float ___ZN2md10VenueLogic22_runExtrusionAnimationEv_block_invoke(uint64_t a1, float a2)
{
  float result;

  result = *(float *)(a1 + 40) + (float)((float)(*(float *)(a1 + 44) - *(float *)(a1 + 40)) * a2);
  *(float *)(*(_QWORD *)(a1 + 32) + 492) = result;
  return result;
}

float ___ZN2md10VenueLogic22_runExtrusionAnimationEv_block_invoke_2(uint64_t a1, int a2)
{
  float result;

  if (a2)
  {
    result = *(float *)(a1 + 40);
    *(float *)(*(_QWORD *)(a1 + 32) + 492) = result;
  }
  return result;
}

void _ZNSt3__110__function6__funcIZN2md10VenueLogic15runBeforeLayoutERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_13CameraContextENS2_16ElevationContextENS2_12SceneContextEEEENS9_IJEEEEE20ResolvedDependenciesERNS2_17VenueLogicContextEE3__1NS_9allocatorISL_EEFvvEED0Ev()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *_ZNKSt3__110__function6__funcIZN2md10VenueLogic15runBeforeLayoutERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_13CameraContextENS2_16ElevationContextENS2_12SceneContextEEEENS9_IJEEEEE20ResolvedDependenciesERNS2_17VenueLogicContextEE3__1NS_9allocatorISL_EEFvvEE7__cloneEv(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42C8B40;
  result[1] = v3;
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZN2md10VenueLogic15runBeforeLayoutERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_13CameraContextENS2_16ElevationContextENS2_12SceneContextEEEENS9_IJEEEEE20ResolvedDependenciesERNS2_17VenueLogicContextEE3__1NS_9allocatorISL_EEFvvEE7__cloneEPNS0_6__baseISO_EE(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42C8B40;
  a2[1] = v2;
  return result;
}

void _ZNSt3__110__function6__funcIZN2md10VenueLogic15runBeforeLayoutERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_13CameraContextENS2_16ElevationContextENS2_12SceneContextEEEENS9_IJEEEEE20ResolvedDependenciesERNS2_17VenueLogicContextEE3__1NS_9allocatorISL_EEFvvEEclEv(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  os_signpost_id_t v4;
  uint8_t v5[16];

  if (GEOGetVectorKitPerformanceLog_onceToken != -1)
    dispatch_once(&GEOGetVectorKitPerformanceLog_onceToken, &__block_literal_global_13_11780);
  v2 = (id)GEOGetVectorKitPerformanceLog_log;
  v3 = v2;
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 80);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)v5 = 0;
    _os_signpost_emit_with_name_impl(&dword_19F029000, v3, OS_SIGNPOST_INTERVAL_END, v4, "VenueLogic", (const char *)&unk_1A0189141, v5, 2u);
  }

}

void _ZNSt3__110__function6__funcIZN2md10VenueLogic15runBeforeLayoutERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_13CameraContextENS2_16ElevationContextENS2_12SceneContextEEEENS9_IJEEEEE20ResolvedDependenciesERNS2_17VenueLogicContextEE3__0NS_9allocatorISL_EEFvvEED0Ev()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *_ZNKSt3__110__function6__funcIZN2md10VenueLogic15runBeforeLayoutERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_13CameraContextENS2_16ElevationContextENS2_12SceneContextEEEENS9_IJEEEEE20ResolvedDependenciesERNS2_17VenueLogicContextEE3__0NS_9allocatorISL_EEFvvEE7__cloneEv(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42C8AF8;
  result[1] = v3;
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZN2md10VenueLogic15runBeforeLayoutERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_13CameraContextENS2_16ElevationContextENS2_12SceneContextEEEENS9_IJEEEEE20ResolvedDependenciesERNS2_17VenueLogicContextEE3__0NS_9allocatorISL_EEFvvEE7__cloneEPNS0_6__baseISO_EE(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42C8AF8;
  a2[1] = v2;
  return result;
}

_QWORD *md::LogicDependencies<gdc::TypeList<md::CameraContext,md::ElevationContext,md::SceneContext>,gdc::TypeList<>>::buildRequiredTuple<md::CameraContext,md::ElevationContext,md::SceneContext>(_QWORD *result, uint64_t a2, unint64_t a3)
{
  uint8x8_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  if (!a3)
  {
    v5 = 0;
    v6 = 0;
    goto LABEL_71;
  }
  v3 = (uint8x8_t)vcnt_s8((int8x8_t)a3);
  v3.i16[0] = vaddlv_u8(v3);
  if (v3.u32[0] > 1uLL)
  {
    v4 = 0x1AF456233693CD46;
    if (a3 <= 0x1AF456233693CD46)
      v4 = 0x1AF456233693CD46 % a3;
  }
  else
  {
    v4 = (a3 - 1) & 0x1AF456233693CD46;
  }
  v7 = *(_QWORD **)(a2 + 8 * v4);
  if (!v7)
    goto LABEL_25;
  v8 = (_QWORD *)*v7;
  if (!v8)
    goto LABEL_25;
  if (v3.u32[0] < 2uLL)
  {
    while (1)
    {
      v10 = v8[1];
      if (v10 == 0x1AF456233693CD46)
      {
        if (v8[2] == 0x1AF456233693CD46)
          goto LABEL_23;
      }
      else if ((v10 & (a3 - 1)) != v4)
      {
        goto LABEL_25;
      }
      v8 = (_QWORD *)*v8;
      if (!v8)
        goto LABEL_25;
    }
  }
  while (1)
  {
    v9 = v8[1];
    if (v9 == 0x1AF456233693CD46)
      break;
    if (v9 >= a3)
      v9 %= a3;
    if (v9 != v4)
      goto LABEL_25;
LABEL_12:
    v8 = (_QWORD *)*v8;
    if (!v8)
      goto LABEL_25;
  }
  if (v8[2] != 0x1AF456233693CD46)
    goto LABEL_12;
LABEL_23:
  v11 = v8[5];
  if (*(_QWORD *)(v11 + 8) == 0x1AF456233693CD46)
  {
    v6 = *(_QWORD *)(v11 + 32);
    goto LABEL_26;
  }
LABEL_25:
  v6 = 0;
LABEL_26:
  if (v3.u32[0] > 1uLL)
  {
    v12 = 0x8BD499FBD96FBB9ELL;
    if (a3 <= 0x8BD499FBD96FBB9ELL)
      v12 = 0x8BD499FBD96FBB9ELL % a3;
  }
  else
  {
    v12 = (a3 - 1) & 0x8BD499FBD96FBB9ELL;
  }
  v13 = *(_QWORD **)(a2 + 8 * v12);
  if (!v13)
    goto LABEL_48;
  v14 = (_QWORD *)*v13;
  if (!v14)
    goto LABEL_48;
  if (v3.u32[0] < 2uLL)
  {
    while (1)
    {
      v16 = v14[1];
      if (v16 == 0x8BD499FBD96FBB9ELL)
      {
        if (v14[2] == 0x8BD499FBD96FBB9ELL)
          goto LABEL_46;
      }
      else if ((v16 & (a3 - 1)) != v12)
      {
        goto LABEL_48;
      }
      v14 = (_QWORD *)*v14;
      if (!v14)
        goto LABEL_48;
    }
  }
  while (2)
  {
    v15 = v14[1];
    if (v15 != 0x8BD499FBD96FBB9ELL)
    {
      if (v15 >= a3)
        v15 %= a3;
      if (v15 != v12)
        goto LABEL_48;
      goto LABEL_35;
    }
    if (v14[2] != 0x8BD499FBD96FBB9ELL)
    {
LABEL_35:
      v14 = (_QWORD *)*v14;
      if (!v14)
        goto LABEL_48;
      continue;
    }
    break;
  }
LABEL_46:
  v17 = v14[5];
  if (*(_QWORD *)(v17 + 8) == 0x8BD499FBD96FBB9ELL)
  {
    v5 = *(_QWORD *)(v17 + 32);
    goto LABEL_49;
  }
LABEL_48:
  v5 = 0;
LABEL_49:
  if (v3.u32[0] > 1uLL)
  {
    v18 = 0x99BED48DEFBBD82BLL;
    if (a3 <= 0x99BED48DEFBBD82BLL)
      v18 = 0x99BED48DEFBBD82BLL % a3;
  }
  else
  {
    v18 = (a3 - 1) & 0x99BED48DEFBBD82BLL;
  }
  v19 = *(_QWORD **)(a2 + 8 * v18);
  if (!v19)
    goto LABEL_71;
  v20 = (_QWORD *)*v19;
  if (!v20)
    goto LABEL_71;
  if (v3.u32[0] < 2uLL)
  {
    while (1)
    {
      v22 = v20[1];
      if (v22 == 0x99BED48DEFBBD82BLL)
      {
        if (v20[2] == 0x99BED48DEFBBD82BLL)
          goto LABEL_69;
      }
      else if ((v22 & (a3 - 1)) != v18)
      {
        goto LABEL_71;
      }
      v20 = (_QWORD *)*v20;
      if (!v20)
        goto LABEL_71;
    }
  }
  while (1)
  {
    v21 = v20[1];
    if (v21 == 0x99BED48DEFBBD82BLL)
      break;
    if (v21 >= a3)
      v21 %= a3;
    if (v21 != v18)
      goto LABEL_71;
LABEL_58:
    v20 = (_QWORD *)*v20;
    if (!v20)
      goto LABEL_71;
  }
  if (v20[2] != 0x99BED48DEFBBD82BLL)
    goto LABEL_58;
LABEL_69:
  v23 = v20[5];
  if (*(_QWORD *)(v23 + 8) != 0x99BED48DEFBBD82BLL)
  {
LABEL_71:
    v24 = 0;
    goto LABEL_72;
  }
  v24 = *(_QWORD *)(v23 + 32);
LABEL_72:
  *result = v6;
  result[1] = v5;
  result[2] = v24;
  return result;
}

_QWORD *gdc::ManagedObjectHolder<md::VenueLogicContext>::~ManagedObjectHolder(_QWORD *a1)
{
  md::VenueLogicContext *v2;

  *a1 = &off_1E42B0F00;
  v2 = (md::VenueLogicContext *)a1[4];
  if (v2)
  {
    md::VenueLogicContext::~VenueLogicContext(v2);
    MEMORY[0x1A1AF4E00]();
  }
  return a1;
}

void gdc::ManagedObjectHolder<md::VenueLogicContext>::~ManagedObjectHolder(_QWORD *a1)
{
  md::VenueLogicContext *v1;

  *a1 = &off_1E42B0F00;
  v1 = (md::VenueLogicContext *)a1[4];
  if (v1)
  {
    md::VenueLogicContext::~VenueLogicContext(v1);
    MEMORY[0x1A1AF4E00]();
  }
  JUMPOUT(0x1A1AF4E00);
}

uint64_t gdc::ObjectHolder<md::VenueLogicContext>::extract@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 32);
  *(_QWORD *)(result + 32) = 0;
  *a2 = v2;
  return result;
}

BOOL md::VenueLogicContext::venueContainsBuildingWithId(md::VenueLogicContext *this, unint64_t a2, unint64_t a3)
{
  uint8x8_t v3;
  unint64_t v4;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;

  if (!a3)
    return 0;
  if (a2)
  {
    v3 = (uint8x8_t)vcnt_s8((int8x8_t)a2);
    v3.i16[0] = vaddlv_u8(v3);
    if (v3.u32[0] > 1uLL)
    {
      v4 = a3;
      if (a2 <= a3)
        v4 = a3 % a2;
    }
    else
    {
      v4 = (a2 - 1) & a3;
    }
    v6 = (_QWORD *)*((_QWORD *)this + v4);
    if (v6)
    {
      v6 = (_QWORD *)*v6;
      if (v6)
      {
        if (v3.u32[0] < 2uLL)
        {
          while (1)
          {
            v8 = v6[1];
            if (v8 == a3)
            {
              if (v6[2] == a3)
                return v6 != 0;
            }
            else if ((v8 & (a2 - 1)) != v4)
            {
              goto LABEL_23;
            }
            v6 = (_QWORD *)*v6;
            if (!v6)
              return v6 != 0;
          }
        }
        do
        {
          v7 = v6[1];
          if (v7 == a3)
          {
            if (v6[2] == a3)
              return v6 != 0;
          }
          else
          {
            if (v7 >= a2)
              v7 %= a2;
            if (v7 != v4)
              goto LABEL_23;
          }
          v6 = (_QWORD *)*v6;
        }
        while (v6);
      }
    }
  }
  else
  {
LABEL_23:
    v6 = 0;
  }
  return v6 != 0;
}

double md::VenueLogicContext::getVenueLevelElevation(md::VenueLogicContext *this, uint64_t a2, unsigned __int16 a3, int a4)
{
  double result;
  char v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  double v16;

  md::VenueLogicContext::buildingElevation(this, a2, a4);
  if (v9)
  {
    v10 = (_QWORD *)((char *)this + 16);
    while (1)
    {
      v10 = (_QWORD *)*v10;
      if (!v10)
        break;
      v11 = v10[3];
      v12 = *(uint64_t **)(v11 + 16);
      v13 = *(uint64_t **)(v11 + 24);
      if (v12 != v13)
      {
        while (v12[3] != a2)
        {
          v12 += 15;
          if (v12 == v13)
          {
            v12 = v13;
            break;
          }
        }
      }
      if (v12 != v13)
      {
        if (v12)
        {
          v14 = *v12;
          v15 = v12[1];
          if (v14 != v15)
          {
            while (*(unsigned __int16 *)(v14 + 8) != a3)
            {
              v14 += 184;
              if (v14 == v15)
                return result;
            }
            if (*(_BYTE *)(v14 + 168))
            {
              v16 = 1.0;
              if (a4)
                v16 = *((float *)this + 73);
              return v16 * *(double *)(v14 + 176);
            }
          }
        }
        return result;
      }
    }
  }
  return result;
}

uint64_t md::VenueLogicContext::buildingElevation(md::VenueLogicContext *this, uint64_t a2, int a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  double v7;
  uint64_t result;
  NSObject *v9;
  uint8_t v10[16];

  v3 = (_QWORD *)((char *)this + 16);
  while (1)
  {
    v3 = (_QWORD *)*v3;
    if (!v3)
      break;
    v4 = v3[3];
    v5 = *(_QWORD *)(v4 + 16);
    v6 = *(_QWORD *)(v4 + 24);
    if (v5 != v6)
    {
      while (*(_QWORD *)(v5 + 24) != a2)
      {
        v5 += 120;
        if (v5 == v6)
        {
          v5 = v6;
          break;
        }
      }
    }
    if (v5 != v6)
    {
      if (v5 && *(_BYTE *)(v5 + 104))
      {
        v7 = 1.0;
        if (a3)
          v7 = *((float *)this + 73);
        *(double *)&result = v7 * *(double *)(v5 + 112);
        return result;
      }
      break;
    }
  }
  if (GEOGetVectorKitVKDefaultLog_onceToken != -1)
    dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_4_11772);
  v9 = (id)GEOGetVectorKitVKDefaultLog_log;
  if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)v10 = 0;
    _os_log_impl(&dword_19F029000, v9, OS_LOG_TYPE_ERROR, "Building couldn't be found to determine elevation. Verify the code and the data, file a bug for data team if necessary.", v10, 2u);
  }

  *(double *)&result = 0.0;
  return result;
}

uint64_t md::VenueLogicContext::displayedFloorOrdinalForVenueBuildingId(int8x8_t *this, uint64_t a2)
{
  int8x8_t *v2;
  int8x8_t v3;
  _QWORD *v4;
  _QWORD *v5;
  int8x8_t v7;
  unint64_t v8;
  uint8x8_t v9;
  unint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;

  v2 = this + 2;
  do
  {
    v2 = (int8x8_t *)*v2;
    if (!v2)
      return 0;
    v3 = v2[3];
    v4 = *(_QWORD **)(*(_QWORD *)&v3 + 16);
    v5 = *(_QWORD **)(*(_QWORD *)&v3 + 24);
    if (v4 != v5)
    {
      while (v4[3] != a2)
      {
        v4 += 15;
        if (v4 == v5)
        {
          v4 = v5;
          break;
        }
      }
    }
  }
  while (v4 == v5);
  if (!v4)
    return (__int16)v4;
  v7 = this[6];
  if (!*(_QWORD *)&v7)
    goto LABEL_30;
  v8 = v4[3];
  v9 = (uint8x8_t)vcnt_s8(v7);
  v9.i16[0] = vaddlv_u8(v9);
  if (v9.u32[0] > 1uLL)
  {
    v10 = v4[3];
    if (v8 >= *(_QWORD *)&v7)
      v10 = v8 % *(_QWORD *)&v7;
  }
  else
  {
    v10 = (*(_QWORD *)&v7 - 1) & v8;
  }
  v11 = *(_QWORD **)(*(_QWORD *)&this[5] + 8 * v10);
  if (!v11 || (v12 = (_QWORD *)*v11) == 0)
  {
LABEL_30:
    v4 += 7;
    goto LABEL_31;
  }
  if (v9.u32[0] < 2uLL)
  {
    v13 = *(_QWORD *)&v7 - 1;
    while (1)
    {
      v15 = v12[1];
      if (v8 == v15)
      {
        if (v12[2] == v8)
          goto LABEL_33;
      }
      else if ((v15 & v13) != v10)
      {
        goto LABEL_30;
      }
      v12 = (_QWORD *)*v12;
      if (!v12)
        goto LABEL_30;
    }
  }
  while (1)
  {
    v14 = v12[1];
    if (v8 == v14)
      break;
    if (v14 >= *(_QWORD *)&v7)
      v14 %= *(_QWORD *)&v7;
    if (v14 != v10)
      goto LABEL_30;
LABEL_20:
    v12 = (_QWORD *)*v12;
    if (!v12)
      goto LABEL_30;
  }
  if (v12[2] != v8)
    goto LABEL_20;
LABEL_33:
  v4 = v12 + 3;
LABEL_31:
  LOWORD(v4) = *(_WORD *)v4;
  return (__int16)v4;
}

uint64_t md::VenueLogic::venueInProximityToWorldPoint(uint64_t a1, float64x2_t *a2, __n128 a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t *v6;
  uint64_t *v7;

  if (a3.n128_f32[0] <= 0.0 || (float)(16.0 - *(float *)(a1 + 692)) <= a3.n128_f32[0])
  {
    md::VenueLogicContext::venuesInProximityToWorldPoint((uint64_t *)&v6, a1 + 208, a2, a3);
    if (v7 == v6)
    {
      v4 = 0;
      v3 = 0;
      if (!v7)
        return v3;
    }
    else
    {
      v4 = *v6;
    }
    operator delete(v6);
    return v4;
  }
  return 0;
}

BOOL md::VenueLogic::displayedFloorIsDefaultForVenueBuilding(int8x8_t *a1, unint64_t a2)
{
  int8x8_t v2;
  uint8x8_t v3;
  unint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;

  v2 = a1[32];
  if (v2)
  {
    v3 = (uint8x8_t)vcnt_s8(v2);
    v3.i16[0] = vaddlv_u8(v3);
    if (v3.u32[0] > 1uLL)
    {
      v4 = a2;
      if (*(_QWORD *)&v2 <= a2)
        v4 = a2 % *(_QWORD *)&v2;
    }
    else
    {
      v4 = (*(_QWORD *)&v2 - 1) & a2;
    }
    v5 = *(_QWORD **)(*(_QWORD *)&a1[31] + 8 * v4);
    if (v5)
    {
      v5 = (_QWORD *)*v5;
      if (v5)
      {
        if (v3.u32[0] < 2uLL)
        {
          v6 = *(_QWORD *)&v2 - 1;
          while (1)
          {
            v8 = v5[1];
            if (v8 == a2)
            {
              if (v5[2] == a2)
                return v5 == 0;
            }
            else if ((v8 & v6) != v4)
            {
              goto LABEL_21;
            }
            v5 = (_QWORD *)*v5;
            if (!v5)
              return v5 == 0;
          }
        }
        do
        {
          v7 = v5[1];
          if (v7 == a2)
          {
            if (v5[2] == a2)
              return v5 == 0;
          }
          else
          {
            if (v7 >= *(_QWORD *)&v2)
              v7 %= *(_QWORD *)&v2;
            if (v7 != v4)
              goto LABEL_21;
          }
          v5 = (_QWORD *)*v5;
        }
        while (v5);
      }
    }
  }
  else
  {
LABEL_21:
    v5 = 0;
  }
  return v5 == 0;
}

uint64_t md::VenueLogic::displayedFloorOrdinalForVenueBuilding(int8x8_t *a1, unint64_t a2, __int16 a3)
{
  int8x8_t v3;
  uint8x8_t v4;
  unint64_t v5;
  uint64_t ***v6;
  uint64_t **v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t *v11;

  v3 = a1[32];
  if (!*(_QWORD *)&v3)
    return a3;
  v4 = (uint8x8_t)vcnt_s8(v3);
  v4.i16[0] = vaddlv_u8(v4);
  if (v4.u32[0] > 1uLL)
  {
    v5 = a2;
    if (*(_QWORD *)&v3 <= a2)
      v5 = a2 % *(_QWORD *)&v3;
  }
  else
  {
    v5 = (*(_QWORD *)&v3 - 1) & a2;
  }
  v6 = *(uint64_t ****)(*(_QWORD *)&a1[31] + 8 * v5);
  if (!v6)
    return a3;
  v7 = *v6;
  if (!v7)
    return a3;
  if (v4.u32[0] < 2uLL)
  {
    v8 = *(_QWORD *)&v3 - 1;
    while (1)
    {
      v11 = v7[1];
      if (v11 == (uint64_t *)a2)
      {
        if (v7[2] == (uint64_t *)a2)
          return *((__int16 *)v7 + 12);
      }
      else if (((unint64_t)v11 & v8) != v5)
      {
        return a3;
      }
      v7 = (uint64_t **)*v7;
      if (!v7)
        return a3;
    }
  }
  while (1)
  {
    v9 = (unint64_t)v7[1];
    if (v9 == a2)
      break;
    if (v9 >= *(_QWORD *)&v3)
      v9 %= *(_QWORD *)&v3;
    if (v9 != v5)
      return a3;
LABEL_11:
    v7 = (uint64_t **)*v7;
    if (!v7)
      return a3;
  }
  if (v7[2] != (uint64_t *)a2)
    goto LABEL_11;
  return *((__int16 *)v7 + 12);
}

_QWORD *md::VenueLogic::setDisplayedFloorOrdinalForVenueBuilding(_QWORD *result, unint64_t a2, unsigned __int16 a3, unsigned __int16 a4)
{
  unint64_t v4;
  unint64_t v5;
  float *v6;
  uint64_t *v8;
  unint64_t v9;
  uint8x8_t v10;
  unint64_t v11;
  uint64_t ***v12;
  uint64_t **v13;
  unint64_t v14;
  uint64_t *v15;
  uint8x8_t v16;
  void **v17;
  _QWORD *v18;
  unint64_t v19;
  uint64_t v20;
  float v21;
  float v22;
  _BOOL8 v23;
  unint64_t v24;
  unint64_t v25;
  size_t prime;
  unint64_t v27;
  uint8x8_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  unint64_t v32;

  v5 = a2;
  v6 = (float *)result;
  v8 = result + 31;
  v9 = result[32];
  if (!v9)
  {
    if (a3 == a4)
      return result;
    goto LABEL_43;
  }
  v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
  v10.i16[0] = vaddlv_u8(v10);
  if (v10.u32[0] > 1uLL)
  {
    v11 = a2;
    if (v9 <= a2)
      v11 = a2 % v9;
  }
  else
  {
    v11 = (v9 - 1) & a2;
  }
  v12 = *(uint64_t ****)(*v8 + 8 * v11);
  if (!v12 || (v13 = *v12) == 0)
  {
LABEL_23:
    if (a3 == a4)
      return result;
    goto LABEL_24;
  }
  if (v10.u32[0] < 2uLL)
  {
    while (1)
    {
      v15 = v13[1];
      if (v15 == (uint64_t *)a2)
      {
        if (v13[2] == (uint64_t *)a2)
          goto LABEL_63;
      }
      else if (((unint64_t)v15 & (v9 - 1)) != v11)
      {
        goto LABEL_23;
      }
      v13 = (uint64_t **)*v13;
      if (!v13)
        goto LABEL_23;
    }
  }
  while (1)
  {
    v14 = (unint64_t)v13[1];
    if (v14 == a2)
      break;
    if (v14 >= v9)
      v14 %= v9;
    if (v14 != v11)
      goto LABEL_23;
LABEL_13:
    v13 = (uint64_t **)*v13;
    if (!v13)
      goto LABEL_23;
  }
  if (v13[2] != (uint64_t *)a2)
    goto LABEL_13;
LABEL_63:
  if (*((unsigned __int16 *)v13 + 12) == a4)
    return result;
LABEL_24:
  v16 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
  v16.i16[0] = vaddlv_u8(v16);
  if (v16.u32[0] > 1uLL)
  {
    v4 = a2;
    if (v9 <= a2)
      v4 = a2 % v9;
  }
  else
  {
    v4 = (v9 - 1) & a2;
  }
  v17 = *(void ***)(*v8 + 8 * v4);
  if (v17)
  {
    v18 = *v17;
    if (*v17)
    {
      if (v16.u32[0] < 2uLL)
      {
        while (1)
        {
          v20 = v18[1];
          if (v20 == a2)
          {
            if (v18[2] == a2)
              goto LABEL_83;
          }
          else if ((v20 & (v9 - 1)) != v4)
          {
            goto LABEL_43;
          }
          v18 = (_QWORD *)*v18;
          if (!v18)
            goto LABEL_43;
        }
      }
      do
      {
        v19 = v18[1];
        if (v19 == a2)
        {
          if (v18[2] == a2)
            goto LABEL_83;
        }
        else
        {
          if (v19 >= v9)
            v19 %= v9;
          if (v19 != v4)
            break;
        }
        v18 = (_QWORD *)*v18;
      }
      while (v18);
    }
  }
LABEL_43:
  v18 = operator new(0x20uLL);
  *v18 = 0;
  v18[1] = v5;
  v18[2] = v5;
  *((_WORD *)v18 + 12) = 0;
  v21 = (float)(unint64_t)(*((_QWORD *)v6 + 34) + 1);
  v22 = v6[70];
  if (v9 && (float)(v22 * (float)v9) >= v21)
  {
    v5 = v4;
  }
  else
  {
    v23 = 1;
    if (v9 >= 3)
      v23 = (v9 & (v9 - 1)) != 0;
    v24 = v23 | (2 * v9);
    v25 = vcvtps_u32_f32(v21 / v22);
    if (v24 <= v25)
      prime = v25;
    else
      prime = v24;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v9 = *((_QWORD *)v6 + 32);
    }
    if (prime > v9)
      goto LABEL_56;
    if (prime < v9)
    {
      v27 = vcvtps_u32_f32((float)*((unint64_t *)v6 + 34) / v6[70]);
      if (v9 < 3 || (v28 = (uint8x8_t)vcnt_s8((int8x8_t)v9), v28.i16[0] = vaddlv_u8(v28), v28.u32[0] > 1uLL))
      {
        v27 = std::__next_prime(v27);
      }
      else
      {
        v29 = 1 << -(char)__clz(v27 - 1);
        if (v27 >= 2)
          v27 = v29;
      }
      if (prime <= v27)
        prime = v27;
      if (prime < v9)
LABEL_56:
        std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>((uint64_t)v8, prime);
    }
    v9 = *((_QWORD *)v6 + 32);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v9 <= v5)
        v5 %= v9;
    }
    else
    {
      v5 &= v9 - 1;
    }
  }
  v30 = *v8;
  v31 = *(_QWORD **)(*v8 + 8 * v5);
  if (v31)
  {
    *v18 = *v31;
    goto LABEL_81;
  }
  *v18 = *((_QWORD *)v6 + 33);
  *((_QWORD *)v6 + 33) = v18;
  *(_QWORD *)(v30 + 8 * v5) = v6 + 66;
  if (*v18)
  {
    v32 = *(_QWORD *)(*v18 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v32 >= v9)
        v32 %= v9;
    }
    else
    {
      v32 &= v9 - 1;
    }
    v31 = (_QWORD *)(*v8 + 8 * v32);
LABEL_81:
    *v31 = v18;
  }
  ++*((_QWORD *)v6 + 34);
LABEL_83:
  *((_WORD *)v18 + 12) = a4;
  result = (_QWORD *)*((_QWORD *)v6 + 98);
  if (result)
    return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 48))(result);
  return result;
}

void sub_19F8F4D78(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t ___ZN2md10VenueLogic23setBaseMapDimmingFactorEfbd_block_invoke(uint64_t a1, float a2)
{
  uint64_t v2;
  uint64_t result;

  v2 = *(_QWORD *)(a1 + 32);
  *(float *)(v2 + 488) = *(float *)(a1 + 40) + (float)((float)(*(float *)(a1 + 44) - *(float *)(a1 + 40)) * a2);
  result = *(_QWORD *)(v2 + 848);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 48))(result);
  return result;
}

uint64_t ___ZN2md10VenueLogic23setBaseMapDimmingFactorEfbd_block_invoke_2(uint64_t result, int a2)
{
  uint64_t v2;

  if (a2)
  {
    v2 = *(_QWORD *)(result + 32);
    *(_DWORD *)(v2 + 488) = *(_DWORD *)(result + 40);
    result = *(_QWORD *)(v2 + 848);
    if (result)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 48))(result);
  }
  return result;
}

void md::VenueLogic::logicContext(md::VenueLogic *this, uint64_t a2)
{
  unint64_t v2;
  unint64_t prime;
  int8x8_t v6;
  BOOL v7;
  unint64_t v8;
  uint8x8_t v9;
  uint64_t v10;
  _QWORD *v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  uint8x8_t v15;
  _QWORD *v16;
  _QWORD *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  float v24;
  float v25;
  _BOOL8 v26;
  unint64_t v27;
  unint64_t v28;
  size_t v29;
  int8x8_t v30;
  unint64_t v31;
  uint8x8_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t *v35;
  unint64_t v36;
  size_t v37;
  int8x8_t v38;
  BOOL v39;
  unint64_t v40;
  uint8x8_t v41;
  uint64_t v42;
  _QWORD *v43;
  _QWORD *v44;
  unint64_t v45;
  unint64_t v46;
  uint8x8_t v47;
  _QWORD *v48;
  _QWORD *v49;
  unint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  float v53;
  float v54;
  _BOOL8 v55;
  unint64_t v56;
  unint64_t v57;
  size_t v58;
  unint64_t v59;
  uint8x8_t v60;
  uint64_t v61;
  uint64_t v62;
  _QWORD *v63;
  unint64_t v64;
  unint64_t v65;
  _BYTE *v66;
  _BYTE *v67;
  int64_t v68;
  char *v69;
  char *v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  uint64_t *v75;
  size_t v76;
  int8x8_t v77;
  BOOL v78;
  unint64_t v79;
  uint8x8_t v80;
  uint64_t v81;
  uint64_t *v82;
  unint64_t v83;
  unint64_t v84;
  uint8x8_t v85;
  _QWORD *v86;
  _QWORD *v87;
  unint64_t v88;
  uint64_t v89;
  _QWORD *v90;
  uint64_t v91;
  _BYTE *v92;
  _BYTE *v93;
  int64_t v94;
  char *v95;
  char *v96;
  float v97;
  float v98;
  _BOOL8 v99;
  unint64_t v100;
  unint64_t v101;
  size_t v102;
  unint64_t v103;
  uint8x8_t v104;
  uint64_t v105;
  uint64_t v106;
  _QWORD *v107;
  unint64_t v108;
  uint64_t v109;
  _QWORD *v110;
  uint64_t *v111;

  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((_DWORD *)this + 8) = *(_DWORD *)(a2 + 240);
  prime = *(_QWORD *)(a2 + 216);
  if (prime == 1)
  {
    prime = 2;
LABEL_17:
    std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>((uint64_t)this, prime);
    goto LABEL_18;
  }
  if ((prime & (prime - 1)) != 0)
  {
    prime = std::__next_prime(*(_QWORD *)(a2 + 216));
    v6 = *(int8x8_t *)((char *)this + 8);
    v7 = prime >= *(_QWORD *)&v6;
    if (prime > *(_QWORD *)&v6)
      goto LABEL_17;
  }
  else
  {
    v6 = 0;
    v7 = 1;
    if (prime)
      goto LABEL_17;
  }
  if (!v7)
  {
    v8 = vcvtps_u32_f32((float)*((unint64_t *)this + 3) / *((float *)this + 8));
    if (*(_QWORD *)&v6 < 3uLL || (v9 = (uint8x8_t)vcnt_s8(v6), v9.i16[0] = vaddlv_u8(v9), v9.u32[0] > 1uLL))
    {
      v8 = std::__next_prime(v8);
    }
    else
    {
      v10 = 1 << -(char)__clz(v8 - 1);
      if (v8 >= 2)
        v8 = v10;
    }
    if (prime <= v8)
      prime = v8;
    if (prime < *(_QWORD *)&v6)
      goto LABEL_17;
  }
LABEL_18:
  v11 = *(_QWORD **)(a2 + 224);
  if (v11)
  {
    v12 = (unint64_t *)((char *)this + 16);
    do
    {
      v13 = v11[2];
      v14 = *((_QWORD *)this + 1);
      if (v14)
      {
        v15 = (uint8x8_t)vcnt_s8((int8x8_t)v14);
        v15.i16[0] = vaddlv_u8(v15);
        if (v15.u32[0] > 1uLL)
        {
          v2 = v11[2];
          if (v13 >= v14)
            v2 = v13 % v14;
        }
        else
        {
          v2 = (v14 - 1) & v13;
        }
        v16 = *(_QWORD **)(*(_QWORD *)this + 8 * v2);
        if (v16)
        {
          v17 = (_QWORD *)*v16;
          if (v17)
          {
            if (v15.u32[0] < 2uLL)
            {
              while (1)
              {
                v19 = v17[1];
                if (v19 == v13)
                {
                  if (v17[2] == v13)
                    goto LABEL_81;
                }
                else if ((v19 & (v14 - 1)) != v2)
                {
                  goto LABEL_40;
                }
                v17 = (_QWORD *)*v17;
                if (!v17)
                  goto LABEL_40;
              }
            }
            do
            {
              v18 = v17[1];
              if (v18 == v13)
              {
                if (v17[2] == v13)
                  goto LABEL_81;
              }
              else
              {
                if (v18 >= v14)
                  v18 %= v14;
                if (v18 != v2)
                  break;
              }
              v17 = (_QWORD *)*v17;
            }
            while (v17);
          }
        }
      }
LABEL_40:
      prime = (unint64_t)operator new(0x28uLL);
      *(_QWORD *)prime = 0;
      *(_QWORD *)(prime + 8) = v13;
      v20 = v11[3];
      *(_QWORD *)(prime + 16) = v11[2];
      *(_QWORD *)(prime + 24) = v20;
      v21 = v11[4];
      *(_QWORD *)(prime + 32) = v21;
      if (v21)
      {
        v22 = (unint64_t *)(v21 + 8);
        do
          v23 = __ldxr(v22);
        while (__stxr(v23 + 1, v22));
      }
      v24 = (float)(unint64_t)(*((_QWORD *)this + 3) + 1);
      v25 = *((float *)this + 8);
      if (!v14 || (float)(v25 * (float)v14) < v24)
      {
        v26 = (v14 & (v14 - 1)) != 0;
        if (v14 < 3)
          v26 = 1;
        v27 = v26 | (2 * v14);
        v28 = vcvtps_u32_f32(v24 / v25);
        if (v27 <= v28)
          v29 = v28;
        else
          v29 = v27;
        if (v29 == 1)
        {
          v29 = 2;
        }
        else if ((v29 & (v29 - 1)) != 0)
        {
          v29 = std::__next_prime(v29);
        }
        v30 = *(int8x8_t *)((char *)this + 8);
        if (v29 > *(_QWORD *)&v30)
          goto LABEL_55;
        if (v29 < *(_QWORD *)&v30)
        {
          v31 = vcvtps_u32_f32((float)*((unint64_t *)this + 3) / *((float *)this + 8));
          if (*(_QWORD *)&v30 < 3uLL || (v32 = (uint8x8_t)vcnt_s8(v30), v32.i16[0] = vaddlv_u8(v32), v32.u32[0] > 1uLL))
          {
            v31 = std::__next_prime(v31);
          }
          else
          {
            v33 = 1 << -(char)__clz(v31 - 1);
            if (v31 >= 2)
              v31 = v33;
          }
          if (v29 <= v31)
            v29 = v31;
          if (v29 < *(_QWORD *)&v30)
LABEL_55:
            std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>((uint64_t)this, v29);
        }
        v14 = *((_QWORD *)this + 1);
        if ((v14 & (v14 - 1)) != 0)
        {
          if (v13 >= v14)
            v2 = v13 % v14;
          else
            v2 = v13;
        }
        else
        {
          v2 = (v14 - 1) & v13;
        }
      }
      v34 = *(_QWORD *)this;
      v35 = *(unint64_t **)(*(_QWORD *)this + 8 * v2);
      if (v35)
      {
        *(_QWORD *)prime = *v35;
      }
      else
      {
        *(_QWORD *)prime = *v12;
        *v12 = prime;
        *(_QWORD *)(v34 + 8 * v2) = v12;
        if (!*(_QWORD *)prime)
          goto LABEL_80;
        v36 = *(_QWORD *)(*(_QWORD *)prime + 8);
        if ((v14 & (v14 - 1)) != 0)
        {
          if (v36 >= v14)
            v36 %= v14;
        }
        else
        {
          v36 &= v14 - 1;
        }
        v35 = (unint64_t *)(*(_QWORD *)this + 8 * v36);
      }
      *v35 = prime;
LABEL_80:
      ++*((_QWORD *)this + 3);
LABEL_81:
      v11 = (_QWORD *)*v11;
    }
    while (v11);
  }
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  v111 = (uint64_t *)((char *)this + 40);
  *((_DWORD *)this + 18) = *(_DWORD *)(a2 + 280);
  v37 = *(_QWORD *)(a2 + 256);
  if (v37 == 1)
  {
    v37 = 2;
LABEL_98:
    std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>((uint64_t)v111, v37);
    goto LABEL_99;
  }
  if ((v37 & (v37 - 1)) != 0)
  {
    v37 = std::__next_prime(*(_QWORD *)(a2 + 256));
    v38 = *(int8x8_t *)((char *)this + 48);
    v39 = v37 >= *(_QWORD *)&v38;
    if (v37 > *(_QWORD *)&v38)
      goto LABEL_98;
  }
  else
  {
    v38 = 0;
    v39 = 1;
    if (v37)
      goto LABEL_98;
  }
  if (!v39)
  {
    v40 = vcvtps_u32_f32((float)*((unint64_t *)this + 8) / *((float *)this + 18));
    if (*(_QWORD *)&v38 < 3uLL || (v41 = (uint8x8_t)vcnt_s8(v38), v41.i16[0] = vaddlv_u8(v41), v41.u32[0] > 1uLL))
    {
      v40 = std::__next_prime(v40);
    }
    else
    {
      v42 = 1 << -(char)__clz(v40 - 1);
      if (v40 >= 2)
        v40 = v42;
    }
    if (v37 <= v40)
      v37 = v40;
    if (v37 < *(_QWORD *)&v38)
      goto LABEL_98;
  }
LABEL_99:
  v43 = *(_QWORD **)(a2 + 264);
  if (v43)
  {
    v44 = (_QWORD *)((char *)this + 56);
    v45 = *((_QWORD *)this + 6);
    do
    {
      v46 = v43[2];
      if (v45)
      {
        v47 = (uint8x8_t)vcnt_s8((int8x8_t)v45);
        v47.i16[0] = vaddlv_u8(v47);
        if (v47.u32[0] > 1uLL)
        {
          prime = v43[2];
          if (v46 >= v45)
            prime = v46 % v45;
        }
        else
        {
          prime = (v45 - 1) & v46;
        }
        v48 = *(_QWORD **)(*v111 + 8 * prime);
        if (v48)
        {
          v49 = (_QWORD *)*v48;
          if (v49)
          {
            if (v47.u32[0] < 2uLL)
            {
              while (1)
              {
                v51 = v49[1];
                if (v51 == v46)
                {
                  if (v49[2] == v46)
                    goto LABEL_159;
                }
                else if ((v51 & (v45 - 1)) != prime)
                {
                  goto LABEL_121;
                }
                v49 = (_QWORD *)*v49;
                if (!v49)
                  goto LABEL_121;
              }
            }
            do
            {
              v50 = v49[1];
              if (v50 == v46)
              {
                if (v49[2] == v46)
                  goto LABEL_159;
              }
              else
              {
                if (v50 >= v45)
                  v50 %= v45;
                if (v50 != prime)
                  break;
              }
              v49 = (_QWORD *)*v49;
            }
            while (v49);
          }
        }
      }
LABEL_121:
      v52 = operator new(0x20uLL);
      *v52 = 0;
      v52[1] = v46;
      *((_OWORD *)v52 + 1) = *((_OWORD *)v43 + 1);
      v53 = (float)(unint64_t)(*((_QWORD *)this + 8) + 1);
      v54 = *((float *)this + 18);
      if (!v45 || (float)(v54 * (float)v45) < v53)
      {
        v55 = (v45 & (v45 - 1)) != 0;
        if (v45 < 3)
          v55 = 1;
        v56 = v55 | (2 * v45);
        v57 = vcvtps_u32_f32(v53 / v54);
        if (v56 <= v57)
          v58 = v57;
        else
          v58 = v56;
        if (v58 == 1)
        {
          v58 = 2;
        }
        else if ((v58 & (v58 - 1)) != 0)
        {
          v58 = std::__next_prime(v58);
          v45 = *((_QWORD *)this + 6);
        }
        if (v58 > v45)
          goto LABEL_133;
        if (v58 < v45)
        {
          v59 = vcvtps_u32_f32((float)*((unint64_t *)this + 8) / *((float *)this + 18));
          if (v45 < 3 || (v60 = (uint8x8_t)vcnt_s8((int8x8_t)v45), v60.i16[0] = vaddlv_u8(v60), v60.u32[0] > 1uLL))
          {
            v59 = std::__next_prime(v59);
          }
          else
          {
            v61 = 1 << -(char)__clz(v59 - 1);
            if (v59 >= 2)
              v59 = v61;
          }
          if (v58 <= v59)
            v58 = v59;
          if (v58 < v45)
LABEL_133:
            std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>((uint64_t)v111, v58);
        }
        v45 = *((_QWORD *)this + 6);
        if ((v45 & (v45 - 1)) != 0)
        {
          if (v46 >= v45)
            prime = v46 % v45;
          else
            prime = v46;
        }
        else
        {
          prime = (v45 - 1) & v46;
        }
      }
      v62 = *v111;
      v63 = *(_QWORD **)(*v111 + 8 * prime);
      if (v63)
      {
        *v52 = *v63;
      }
      else
      {
        *v52 = *v44;
        *v44 = v52;
        *(_QWORD *)(v62 + 8 * prime) = v44;
        if (!*v52)
          goto LABEL_158;
        v64 = *(_QWORD *)(*v52 + 8);
        if ((v45 & (v45 - 1)) != 0)
        {
          if (v64 >= v45)
            v64 %= v45;
        }
        else
        {
          v64 &= v45 - 1;
        }
        v63 = (_QWORD *)(*v111 + 8 * v64);
      }
      *v63 = v52;
LABEL_158:
      ++*((_QWORD *)this + 8);
LABEL_159:
      v43 = (_QWORD *)*v43;
    }
    while (v43);
  }
  v65 = (unint64_t)this + 80;
  std::unordered_set<unsigned long long>::unordered_set((uint64_t)this + 80, a2 + 288);
  *((_QWORD *)this + 15) = 0;
  *((_QWORD *)this + 16) = 0;
  *((_QWORD *)this + 17) = 0;
  v67 = *(_BYTE **)(a2 + 328);
  v66 = *(_BYTE **)(a2 + 336);
  v68 = v66 - v67;
  if (v66 != v67)
  {
    if (v68 < 0)
      abort();
    v69 = (char *)operator new(v66 - v67);
    *((_QWORD *)this + 15) = v69;
    *((_QWORD *)this + 16) = v69;
    v70 = &v69[8 * (v68 >> 3)];
    *((_QWORD *)this + 17) = v70;
    memcpy(v69, v67, v68);
    *((_QWORD *)this + 16) = v70;
  }
  v71 = *(_OWORD *)(a2 + 464);
  *((_OWORD *)this + 15) = *(_OWORD *)(a2 + 448);
  *((_OWORD *)this + 16) = v71;
  *((_OWORD *)this + 17) = *(_OWORD *)(a2 + 480);
  v72 = *(_OWORD *)(a2 + 400);
  *((_OWORD *)this + 11) = *(_OWORD *)(a2 + 384);
  *((_OWORD *)this + 12) = v72;
  v73 = *(_OWORD *)(a2 + 432);
  *((_OWORD *)this + 13) = *(_OWORD *)(a2 + 416);
  *((_OWORD *)this + 14) = v73;
  v74 = *(_OWORD *)(a2 + 368);
  *((_OWORD *)this + 9) = *(_OWORD *)(a2 + 352);
  *((_OWORD *)this + 10) = v74;
  *(_OWORD *)((char *)this + 281) = *(_OWORD *)(a2 + 489);
  v75 = (uint64_t *)((char *)this + 304);
  *((_OWORD *)this + 19) = 0u;
  *((_OWORD *)this + 20) = 0u;
  *((_DWORD *)this + 84) = *(_DWORD *)(a2 + 544);
  v76 = *(_QWORD *)(a2 + 520);
  if (v76 == 1)
  {
    v76 = 2;
LABEL_179:
    std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>((uint64_t)this + 304, v76);
    goto LABEL_180;
  }
  if ((v76 & (v76 - 1)) != 0)
  {
    v76 = std::__next_prime(v76);
    v77 = *(int8x8_t *)((char *)this + 312);
    v78 = v76 >= *(_QWORD *)&v77;
    if (v76 > *(_QWORD *)&v77)
      goto LABEL_179;
  }
  else
  {
    v77 = 0;
    v78 = 1;
    if (v76)
      goto LABEL_179;
  }
  if (!v78)
  {
    v79 = vcvtps_u32_f32((float)*((unint64_t *)this + 41) / *((float *)this + 84));
    if (*(_QWORD *)&v77 < 3uLL || (v80 = (uint8x8_t)vcnt_s8(v77), v80.i16[0] = vaddlv_u8(v80), v80.u32[0] > 1uLL))
    {
      v79 = std::__next_prime(v79);
    }
    else
    {
      v81 = 1 << -(char)__clz(v79 - 1);
      if (v79 >= 2)
        v79 = v81;
    }
    if (v76 <= v79)
      v76 = v79;
    if (v76 < *(_QWORD *)&v77)
      goto LABEL_179;
  }
LABEL_180:
  v109 = a2;
  v82 = *(uint64_t **)(a2 + 528);
  if (v82)
  {
    v110 = (_QWORD *)((char *)this + 320);
    v83 = *((_QWORD *)this + 39);
    do
    {
      v84 = v82[2];
      if (v83)
      {
        v85 = (uint8x8_t)vcnt_s8((int8x8_t)v83);
        v85.i16[0] = vaddlv_u8(v85);
        if (v85.u32[0] > 1uLL)
        {
          v65 = v82[2];
          if (v84 >= v83)
            v65 = v84 % v83;
        }
        else
        {
          v65 = (v83 - 1) & v84;
        }
        v86 = *(_QWORD **)(*v75 + 8 * v65);
        if (v86)
        {
          v87 = (_QWORD *)*v86;
          if (v87)
          {
            if (v85.u32[0] < 2uLL)
            {
              while (1)
              {
                v89 = v87[1];
                if (v89 == v84)
                {
                  if (v87[2] == v84)
                    goto LABEL_243;
                }
                else if ((v89 & (v83 - 1)) != v65)
                {
                  goto LABEL_202;
                }
                v87 = (_QWORD *)*v87;
                if (!v87)
                  goto LABEL_202;
              }
            }
            do
            {
              v88 = v87[1];
              if (v88 == v84)
              {
                if (v87[2] == v84)
                  goto LABEL_243;
              }
              else
              {
                if (v88 >= v83)
                  v88 %= v83;
                if (v88 != v65)
                  break;
              }
              v87 = (_QWORD *)*v87;
            }
            while (v87);
          }
        }
      }
LABEL_202:
      v90 = operator new(0x38uLL);
      *v90 = 0;
      v90[1] = v84;
      v91 = v82[2];
      v90[3] = 0;
      v90[2] = v91;
      v90[4] = 0;
      v90[5] = 0;
      v93 = (_BYTE *)v82[3];
      v92 = (_BYTE *)v82[4];
      v94 = v92 - v93;
      if (v92 != v93)
      {
        if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * (v94 >> 3)) >= 0x492492492492493)
          abort();
        v95 = (char *)operator new(v94);
        v90[3] = v95;
        v90[4] = v95;
        v96 = &v95[8 * (v94 >> 3)];
        v90[5] = v96;
        memcpy(v95, v93, v94);
        v90[4] = v96;
        v75 = (uint64_t *)((char *)this + 304);
      }
      *((_WORD *)v90 + 24) = *((_WORD *)v82 + 24);
      v97 = (float)(unint64_t)(*((_QWORD *)this + 41) + 1);
      v98 = *((float *)this + 84);
      if (!v83 || (float)(v98 * (float)v83) < v97)
      {
        v99 = (v83 & (v83 - 1)) != 0;
        if (v83 < 3)
          v99 = 1;
        v100 = v99 | (2 * v83);
        v101 = vcvtps_u32_f32(v97 / v98);
        if (v100 <= v101)
          v102 = v101;
        else
          v102 = v100;
        if (v102 == 1)
        {
          v102 = 2;
        }
        else if ((v102 & (v102 - 1)) != 0)
        {
          v102 = std::__next_prime(v102);
          v83 = *((_QWORD *)this + 39);
        }
        if (v102 > v83)
          goto LABEL_217;
        if (v102 < v83)
        {
          v103 = vcvtps_u32_f32((float)*((unint64_t *)this + 41) / *((float *)this + 84));
          if (v83 < 3 || (v104 = (uint8x8_t)vcnt_s8((int8x8_t)v83), v104.i16[0] = vaddlv_u8(v104), v104.u32[0] > 1uLL))
          {
            v103 = std::__next_prime(v103);
          }
          else
          {
            v105 = 1 << -(char)__clz(v103 - 1);
            if (v103 >= 2)
              v103 = v105;
          }
          if (v102 <= v103)
            v102 = v103;
          if (v102 < v83)
LABEL_217:
            std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>((uint64_t)v75, v102);
        }
        v83 = *((_QWORD *)this + 39);
        if ((v83 & (v83 - 1)) != 0)
        {
          if (v84 >= v83)
            v65 = v84 % v83;
          else
            v65 = v84;
        }
        else
        {
          v65 = (v83 - 1) & v84;
        }
      }
      v106 = *v75;
      v107 = *(_QWORD **)(*v75 + 8 * v65);
      if (v107)
      {
        *v90 = *v107;
      }
      else
      {
        *v90 = *v110;
        *v110 = v90;
        *(_QWORD *)(v106 + 8 * v65) = v110;
        if (!*v90)
          goto LABEL_242;
        v108 = *(_QWORD *)(*v90 + 8);
        if ((v83 & (v83 - 1)) != 0)
        {
          if (v108 >= v83)
            v108 %= v83;
        }
        else
        {
          v108 &= v83 - 1;
        }
        v107 = (_QWORD *)(*v75 + 8 * v108);
      }
      *v107 = v90;
LABEL_242:
      ++*((_QWORD *)this + 41);
LABEL_243:
      v82 = (uint64_t *)*v82;
    }
    while (v82);
  }
  *((_QWORD *)this + 43) = *(_QWORD *)(v109 + 552);
  *((_BYTE *)this + 352) = *(_BYTE *)(v109 + 560);
}

void sub_19F8F59DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void **a14)
{
  uint64_t v14;
  _QWORD *v16;
  _QWORD *v17;
  void *v18;
  _QWORD *v19;
  _QWORD *v20;
  std::__shared_weak_count *v21;
  unint64_t *p_shared_owners;
  unint64_t v23;
  void *v24;

  v16 = *(_QWORD **)(v14 + 56);
  if (v16)
  {
    do
    {
      v17 = (_QWORD *)*v16;
      operator delete(v16);
      v16 = v17;
    }
    while (v17);
  }
  v18 = *a14;
  *a14 = 0;
  if (v18)
    operator delete(v18);
  v19 = *(_QWORD **)(v14 + 16);
  while (v19)
  {
    v20 = v19;
    v19 = (_QWORD *)*v19;
    v21 = (std::__shared_weak_count *)v20[4];
    if (v21)
    {
      p_shared_owners = (unint64_t *)&v21->__shared_owners_;
      do
        v23 = __ldaxr(p_shared_owners);
      while (__stlxr(v23 - 1, p_shared_owners));
      if (!v23)
      {
        ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
        std::__shared_weak_count::__release_weak(v21);
      }
    }
    operator delete(v20);
  }
  v24 = *(void **)v14;
  *(_QWORD *)v14 = 0;
  if (v24)
    operator delete(v24);
  _Unwind_Resume(exception_object);
}

_QWORD *md::VenueLogic::setNearestVenueDidChangeCallback(uint64_t a1, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *result;
  uint64_t v8;
  _QWORD v9[3];
  _QWORD *v10;
  _QWORD v11[4];

  v11[3] = *MEMORY[0x1E0C80C00];
  v3 = (_QWORD *)(a1 + 696);
  v4 = (_QWORD *)a2[3];
  if (v4)
  {
    if (v4 == a2)
    {
      v10 = v9;
      (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, v9);
    }
    else
    {
      v10 = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v4 + 16))(v4);
    }
  }
  else
  {
    v10 = 0;
  }
  if (v3 != v9)
  {
    v5 = v10;
    v6 = *(_QWORD **)(a1 + 720);
    if (v10 == v9)
    {
      if (v6 == v3)
      {
        (*(void (**)(_QWORD *, _QWORD *))(v9[0] + 24))(v9, v11);
        (*(void (**)(_QWORD *))(*v10 + 32))(v10);
        v10 = 0;
        (*(void (**)(_QWORD, _QWORD *))(**(_QWORD **)(a1 + 720) + 24))(*(_QWORD *)(a1 + 720), v9);
        (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 720) + 32))(*(_QWORD *)(a1 + 720));
        *(_QWORD *)(a1 + 720) = 0;
        v10 = v9;
        (*(void (**)(_QWORD *, _QWORD *))(v11[0] + 24))(v11, v3);
        (*(void (**)(_QWORD *))(v11[0] + 32))(v11);
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *))(v9[0] + 24))(v9, v3);
        (*(void (**)(_QWORD *))(*v10 + 32))(v10);
        v10 = *(_QWORD **)(a1 + 720);
      }
      *(_QWORD *)(a1 + 720) = v3;
    }
    else if (v6 == v3)
    {
      (*(void (**)(_QWORD *, _QWORD *))(*(_QWORD *)(a1 + 696) + 24))(v3, v9);
      (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 720) + 32))(*(_QWORD *)(a1 + 720));
      *(_QWORD *)(a1 + 720) = v10;
      v10 = v9;
    }
    else
    {
      v10 = *(_QWORD **)(a1 + 720);
      *(_QWORD *)(a1 + 720) = v5;
    }
  }
  result = v10;
  if (v10 == v9)
  {
    v8 = 4;
    result = v9;
  }
  else
  {
    if (!v10)
      return result;
    v8 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v8))();
}

_QWORD *md::VenueLogic::setFocusedVenueDidChangeCallback(uint64_t a1, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *result;
  uint64_t v8;
  _QWORD v9[3];
  _QWORD *v10;
  _QWORD v11[4];

  v11[3] = *MEMORY[0x1E0C80C00];
  v3 = (_QWORD *)(a1 + 728);
  v4 = (_QWORD *)a2[3];
  if (v4)
  {
    if (v4 == a2)
    {
      v10 = v9;
      (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, v9);
    }
    else
    {
      v10 = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v4 + 16))(v4);
    }
  }
  else
  {
    v10 = 0;
  }
  if (v3 != v9)
  {
    v5 = v10;
    v6 = *(_QWORD **)(a1 + 752);
    if (v10 == v9)
    {
      if (v6 == v3)
      {
        (*(void (**)(_QWORD *, _QWORD *))(v9[0] + 24))(v9, v11);
        (*(void (**)(_QWORD *))(*v10 + 32))(v10);
        v10 = 0;
        (*(void (**)(_QWORD, _QWORD *))(**(_QWORD **)(a1 + 752) + 24))(*(_QWORD *)(a1 + 752), v9);
        (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 752) + 32))(*(_QWORD *)(a1 + 752));
        *(_QWORD *)(a1 + 752) = 0;
        v10 = v9;
        (*(void (**)(_QWORD *, _QWORD *))(v11[0] + 24))(v11, v3);
        (*(void (**)(_QWORD *))(v11[0] + 32))(v11);
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *))(v9[0] + 24))(v9, v3);
        (*(void (**)(_QWORD *))(*v10 + 32))(v10);
        v10 = *(_QWORD **)(a1 + 752);
      }
      *(_QWORD *)(a1 + 752) = v3;
    }
    else if (v6 == v3)
    {
      (*(void (**)(_QWORD *, _QWORD *))(*(_QWORD *)(a1 + 728) + 24))(v3, v9);
      (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 752) + 32))(*(_QWORD *)(a1 + 752));
      *(_QWORD *)(a1 + 752) = v10;
      v10 = v9;
    }
    else
    {
      v10 = *(_QWORD **)(a1 + 752);
      *(_QWORD *)(a1 + 752) = v5;
    }
  }
  result = v10;
  if (v10 == v9)
  {
    v8 = 4;
    result = v9;
  }
  else
  {
    if (!v10)
      return result;
    v8 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v8))();
}

_QWORD *md::VenueLogic::setRunAnimationCallback(uint64_t a1, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *result;
  uint64_t v8;
  _QWORD v9[3];
  _QWORD *v10;
  _QWORD v11[4];

  v11[3] = *MEMORY[0x1E0C80C00];
  v3 = (_QWORD *)(a1 + 792);
  v4 = (_QWORD *)a2[3];
  if (v4)
  {
    if (v4 == a2)
    {
      v10 = v9;
      (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, v9);
    }
    else
    {
      v10 = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v4 + 16))(v4);
    }
  }
  else
  {
    v10 = 0;
  }
  if (v3 != v9)
  {
    v5 = v10;
    v6 = *(_QWORD **)(a1 + 816);
    if (v10 == v9)
    {
      if (v6 == v3)
      {
        (*(void (**)(_QWORD *, _QWORD *))(v9[0] + 24))(v9, v11);
        (*(void (**)(_QWORD *))(*v10 + 32))(v10);
        v10 = 0;
        (*(void (**)(_QWORD, _QWORD *))(**(_QWORD **)(a1 + 816) + 24))(*(_QWORD *)(a1 + 816), v9);
        (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 816) + 32))(*(_QWORD *)(a1 + 816));
        *(_QWORD *)(a1 + 816) = 0;
        v10 = v9;
        (*(void (**)(_QWORD *, _QWORD *))(v11[0] + 24))(v11, v3);
        (*(void (**)(_QWORD *))(v11[0] + 32))(v11);
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *))(v9[0] + 24))(v9, v3);
        (*(void (**)(_QWORD *))(*v10 + 32))(v10);
        v10 = *(_QWORD **)(a1 + 816);
      }
      *(_QWORD *)(a1 + 816) = v3;
    }
    else if (v6 == v3)
    {
      (*(void (**)(_QWORD *, _QWORD *))(*(_QWORD *)(a1 + 792) + 24))(v3, v9);
      (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 816) + 32))(*(_QWORD *)(a1 + 816));
      *(_QWORD *)(a1 + 816) = v10;
      v10 = v9;
    }
    else
    {
      v10 = *(_QWORD **)(a1 + 816);
      *(_QWORD *)(a1 + 816) = v5;
    }
  }
  result = v10;
  if (v10 == v9)
  {
    v8 = 4;
    result = v9;
  }
  else
  {
    if (!v10)
      return result;
    v8 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v8))();
}

void altitude::RoadTilePrivate::~RoadTilePrivate(altitude::RoadTilePrivate *this)
{
  altitude::RoadTilePrivate::~RoadTilePrivate(this);
  JUMPOUT(0x1A1AF4E00);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  void *v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;

  *(_QWORD *)this = &off_1E42C45A8;
  v2 = *((_QWORD *)this + 4);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2);
  v3 = *((_QWORD *)this + 16);
  if (v3)
  {
    v4 = *((_QWORD *)this + 17);
    v5 = (void *)*((_QWORD *)this + 16);
    if (v4 != v3)
    {
      do
      {
        v6 = *(std::__shared_weak_count **)(v4 - 8);
        if (v6)
        {
          p_shared_owners = (unint64_t *)&v6->__shared_owners_;
          do
            v8 = __ldaxr(p_shared_owners);
          while (__stlxr(v8 - 1, p_shared_owners));
          if (!v8)
          {
            ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
            std::__shared_weak_count::__release_weak(v6);
          }
        }
        v4 -= 16;
      }
      while (v4 != v3);
      v5 = (void *)*((_QWORD *)this + 16);
    }
    *((_QWORD *)this + 17) = v3;
    operator delete(v5);
  }
  v9 = (void *)*((_QWORD *)this + 13);
  if (v9)
  {
    *((_QWORD *)this + 14) = v9;
    operator delete(v9);
  }
  v10 = (std::__shared_weak_count *)*((_QWORD *)this + 12);
  if (!v10)
    goto LABEL_20;
  v11 = (unint64_t *)&v10->__shared_owners_;
  do
    v12 = __ldaxr(v11);
  while (__stlxr(v12 - 1, v11));
  if (!v12)
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
    v13 = (std::__shared_weak_count *)*((_QWORD *)this + 10);
    if (!v13)
      goto LABEL_26;
  }
  else
  {
LABEL_20:
    v13 = (std::__shared_weak_count *)*((_QWORD *)this + 10);
    if (!v13)
      goto LABEL_26;
  }
  v14 = (unint64_t *)&v13->__shared_owners_;
  do
    v15 = __ldaxr(v14);
  while (__stlxr(v15 - 1, v14));
  if (!v15)
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
  }
LABEL_26:
  v16 = (std::__shared_weak_count *)*((_QWORD *)this + 8);
  if (!v16)
    goto LABEL_30;
  v17 = (unint64_t *)&v16->__shared_owners_;
  do
    v18 = __ldaxr(v17);
  while (__stlxr(v18 - 1, v17));
  if (!v18)
  {
    ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
    std::__shared_weak_count::__release_weak(v16);
    v19 = (std::__shared_weak_count *)*((_QWORD *)this + 6);
    if (!v19)
      return;
  }
  else
  {
LABEL_30:
    v19 = (std::__shared_weak_count *)*((_QWORD *)this + 6);
    if (!v19)
      return;
  }
  v20 = (unint64_t *)&v19->__shared_owners_;
  do
    v21 = __ldaxr(v20);
  while (__stlxr(v21 - 1, v20));
  if (!v21)
  {
    ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
    std::__shared_weak_count::__release_weak(v19);
  }
}

uint64_t altitude::RoadTilePrivate::key(altitude::RoadTilePrivate *this)
{
  return *((_QWORD *)this + 1);
}

uint64_t altitude::RoadTilePrivate::renderStamp(altitude::RoadTilePrivate *this)
{
  return *((_QWORD *)this + 19);
}

uint64_t altitude::RoadTilePrivate::anchorTile(altitude::RoadTilePrivate *this)
{
  return *((_QWORD *)this + 4);
}

void altitude::RoadTilePrivate::willBeDrawn(altitude::RoadTilePrivate *this, altitude::View *a2, karo::graphics::Viewport *a3, unsigned __int8 *a4, altitude::StencilManager *a5)
{
  altitude::RoadTilePrivate *v7;
  uint64_t v8;
  int v9;
  int v10;
  unsigned int v11;
  char v12;
  unsigned int v13;
  unsigned int v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t i;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t *v22;
  double v23;
  float v24;
  float v25;
  _QWORD *v26;
  unint64_t v27;
  float *v28;
  uint64_t v29;
  char *v30;
  char *v31;
  int v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  double v39;
  double v40;
  double v41;
  double v42;
  double v43;
  double v44;
  double v45;
  double v46;
  double v47;
  double v48;
  double v49;
  double v50;
  double v51;
  double v52;
  double v53;
  double v54;
  double v55;
  double v56;
  double v57;
  double v58;
  double v59;
  double v60;
  double v61;
  double v62;
  double v63;
  double v64;
  double v65;
  uint64_t v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  float v71;
  float v72;
  float v73;
  float v74;
  float v75;
  float v76;
  float v77;
  float v78;
  float v79;
  float v80;
  float v81;
  float v82;
  float v83;
  float v84;
  float v85;
  float v86;
  uint64_t v87;
  uint64_t v88;
  int v89;
  unsigned int v90;
  unsigned int v91;
  unsigned int v92;
  unsigned __int8 v93;
  _QWORD *v94;
  _QWORD *v95;
  _QWORD *v96;
  uint64_t v97;
  unint64_t v98;
  uint64_t v99;
  unint64_t v100;
  _DWORD *v101;
  unint64_t v102;
  unint64_t v103;
  uint64_t *v104;
  uint64_t *v105;
  uint64_t v106;
  unsigned __int8 v107;
  int v108;
  uint64_t v109;
  int v110;
  unsigned int v111;
  unsigned int v112;
  unsigned int v113;
  unsigned __int8 v114;
  uint64_t v115;
  _QWORD *v116;
  uint64_t v117;
  uint64_t v118;
  _QWORD *v119;
  _QWORD *v120;
  unint64_t v121;
  uint64_t v122;
  unint64_t v123;
  _DWORD *v124;
  unint64_t v125;
  int v126;
  unint64_t v127;
  uint64_t *v128;
  uint64_t *v129;
  uint64_t v130;
  unsigned __int8 v131;
  int v132;
  uint64_t v133;
  uint64_t v134;
  _QWORD *v135;
  unint64_t v136;
  _DWORD *v137;
  uint64_t v138;
  _QWORD *v139;
  unint64_t v140;
  float *v141;
  float *v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  unint64_t v152;
  uint64_t v153;
  unint64_t v154;
  unsigned int v155;
  float v156;
  BOOL v157;
  float *v159;
  double v160;
  char *v161;
  char *v162;
  uint64_t v163;
  uint64_t v164;
  float *v165;
  uint64_t v166;
  double v167;
  __int128 v168;
  std::__shared_weak_count *v169;
  unint64_t *p_shared_owners;
  unint64_t v171;
  std::__shared_weak_count *v172;
  unint64_t *v173;
  unint64_t v174;
  uint64_t v175;
  float v176;
  float v177;
  float v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  int v182;
  int v183;
  char v184;
  int v185;
  unsigned int v186;
  unsigned int v187;
  int v188;
  int v189;
  uint64_t v190;
  char *v191;
  char *v192;
  unint64_t v193;
  uint64_t v194;
  uint64_t *v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  int v203;
  uint64_t v204;
  double v205;
  std::__shared_weak_count *v206;
  unint64_t *v207;
  unint64_t v208;
  unint64_t v209;
  unint64_t *v210;
  unint64_t v211;
  uint64_t v212;
  float *v213;
  float v214;
  _BOOL4 v215;
  uint64_t v217;
  uint64_t v218;
  unint64_t v219;
  unint64_t v220;
  unsigned int v221;
  float v222;
  _BOOL4 v223;
  unsigned int v225;
  char hasValueForKeyAtEnd;
  unsigned int v227;
  uint64_t v228;
  uint64_t v230;
  uint64_t *v231;
  uint64_t v232;
  uint64_t *v233;
  __int128 v234;
  double v235;
  double v236;
  double v237;
  double v238;
  double v239;
  double v240;
  double v241;
  double v242;
  double v243;
  double v244;
  double v245;
  double v246;
  double v247;
  double v248;
  double v249;
  double v250;
  _OWORD v251[8];
  double v252;
  double v253;
  double v254;
  uint64_t v255;
  double v256;
  double v257;
  double v258;
  uint64_t v259;
  double v260;
  double v261;
  double v262;
  uint64_t v263;
  double v264;
  double v265;
  double v266;
  uint64_t v267;

  v7 = this;
  v8 = *((_QWORD *)this + 9);
  v9 = *((_DWORD *)this + 4);
  v10 = *(_DWORD *)(v8 + 72);
  v11 = 0;
  v12 = v9 - v10;
  if (v9 != v10)
  {
    v13 = *((_DWORD *)this + 3) - (*(_DWORD *)(v8 + 68) << v12);
    v14 = *((_DWORD *)this + 2) - (*(_DWORD *)(v8 + 64) << v12);
    v15 = ~v10 + v9;
    v16 = 2 * v15;
    do
    {
      v11 += (v14 >> v15 << v16) + (2 << v16) * (v13 >> v15);
      v14 -= v14 >> v15 << v15;
      v13 -= v13 >> v15 << v15;
      --v15;
      v16 -= 2;
    }
    while (v15 != -1);
  }
  if (*(karo::graphics::Viewport **)(v8 + 80) != a3)
  {
    *(_QWORD *)(v8 + 80) = a3;
    v20 = *(_QWORD *)(v8 + 144);
    if (!v20)
      goto LABEL_128;
    v22 = *(uint64_t **)(v20 + 8);
    v21 = *(uint64_t **)(v20 + 16);
    if (v22 == v21)
      goto LABEL_128;
    v227 = v11;
    v228 = v8;
    v231 = *(uint64_t **)(v20 + 16);
    while (1)
    {
      v29 = *v22;
      (*(void (**)(_QWORD, altitude::View *))(**(_QWORD **)(*v22 + 560) + 16))(*(_QWORD *)(*v22 + 560), a2);
      v30 = *(char **)(v29 + 504);
      v31 = *(char **)(v29 + 512);
      v32 = *(unsigned __int8 *)(*(_QWORD *)(v29 + 560) + 289);
      if (v30 != v31)
      {
        v33 = v31 - v30 - 8;
        if (v33 > 7)
        {
          v34 = (v33 >> 3) + 1;
          v35 = (uint64_t *)(v30 + 8);
          v36 = v34 & 0x3FFFFFFFFFFFFFFELL;
          do
          {
            v37 = *v35;
            *(_BYTE *)(*(v35 - 1) + 48) = v32;
            *(_BYTE *)(v37 + 48) = v32;
            v35 += 2;
            v36 -= 2;
          }
          while (v36);
          if (v34 == (v34 & 0x3FFFFFFFFFFFFFFELL))
            goto LABEL_26;
          v30 += 8 * (v34 & 0x3FFFFFFFFFFFFFFELL);
        }
        do
        {
          v38 = *(_QWORD *)v30;
          v30 += 8;
          *(_BYTE *)(v38 + 48) = v32;
        }
        while (v30 != v31);
      }
LABEL_26:
      if (!v32)
        goto LABEL_18;
      v39 = *((double *)a2 + 10);
      v40 = *((double *)a2 + 11);
      v41 = *((double *)a2 + 12);
      v43 = *((double *)a2 + 8);
      v42 = *((double *)a2 + 9);
      v45 = *((double *)a2 + 6);
      v44 = *((double *)a2 + 7);
      v46 = -(v43 * v39 - v44 * v40) - (v43 * v39 - v44 * v40);
      v47 = -(v45 * v40 - v43 * v42) - (v45 * v40 - v43 * v42);
      v48 = -(v44 * v42 - v45 * v39) - (v44 * v42 - v45 * v39);
      v49 = -(v48 * v42 - (-(v44 - v46 * v40) - v47 * v41));
      v50 = -(v45 + v46 * v41 + v47 * v40 - v48 * v39);
      v51 = v43 + v46 * v39 + v48 * v41;
      v52 = v39 * -2.0;
      v53 = -(v39 * (v39 * -2.0));
      v54 = -(v40 * (v40 * -2.0));
      v55 = 1.0 - (v53 - v40 * (v40 * -2.0));
      v56 = -(v39 * (v42 * -2.0));
      v57 = v40 * -2.0 * v41;
      v58 = v56 - v57;
      v59 = -(v40 * (v42 * -2.0));
      v60 = v41 * v52;
      v61 = v57 + v56;
      v62 = v41 * v52 - v40 * (v42 * -2.0);
      v63 = -(v40 * v52);
      v64 = v42 * -2.0 * v42 + 1.0;
      v65 = v41 * (v42 * -2.0);
      v252 = v55;
      v253 = v61;
      v256 = v58;
      v257 = v64 - v54;
      v260 = v62;
      v261 = v63 - v65;
      v254 = v59 - v60;
      v258 = v65 + v63;
      v262 = v64 - v53;
      v255 = 0;
      v259 = 0;
      v263 = 0;
      v264 = v50;
      v265 = v49;
      v266 = -(v51 - v47 * v42);
      v267 = 0x3FF0000000000000;
      v66 = *(_QWORD *)(v29 + 8);
      v67 = *(_OWORD *)(v66 + 216);
      v251[4] = *(_OWORD *)(v66 + 200);
      v251[5] = v67;
      v68 = *(_OWORD *)(v66 + 248);
      v251[6] = *(_OWORD *)(v66 + 232);
      v251[7] = v68;
      v69 = *(_OWORD *)(v66 + 152);
      v251[0] = *(_OWORD *)(v66 + 136);
      v251[1] = v69;
      v70 = *(_OWORD *)(v66 + 184);
      v251[2] = *(_OWORD *)(v66 + 168);
      v251[3] = v70;
      gm::operator*<double,4,4,4>(&v235, &v252, (double *)v251);
      v71 = v235;
      v72 = v236;
      v73 = v237;
      v74 = v238;
      v75 = v239;
      v76 = v240;
      v77 = v241;
      v78 = v242;
      v79 = v243;
      v80 = v244;
      v81 = v245;
      v82 = v246;
      v83 = v247;
      v84 = v248;
      v85 = v249;
      v86 = v250;
      if (*(_BYTE *)(v29 + 264))
      {
        v87 = *(_QWORD *)(v29 + 560);
        v88 = *(unsigned __int8 *)(v87 + 292);
        *(_QWORD *)(v29 + 192) = v88;
        v89 = *(unsigned __int8 *)(v87 + 293);
        v90 = a4[48];
        if (v90 == 255)
        {
          v90 = a4[8];
          if (v90 >= a4[9])
          {
            LOBYTE(v90) = 1;
            a4[8] = 1;
            a4[9] = a4[10];
          }
          a4[8] = v90 + 1;
          a4[48] = v90;
          v91 = 1;
          a4[49] = 1;
        }
        else
        {
          v91 = a4[49];
        }
        v92 = 2 * v89;
        v93 = v92 - v91;
        if (v92 > v91)
        {
          v91 = a4[8];
          if (v91 + v93 > a4[9])
          {
            LOBYTE(v91) = 1;
            a4[8] = 1;
            a4[9] = a4[10];
          }
          a4[8] = v91 + v93;
          a4[49] = v92;
          LOBYTE(v91) = v92;
        }
        *(_DWORD *)(v29 + 184) = (v92 - 1 + v90);
        v94 = *(_QWORD **)(*(_QWORD *)(v29 + 176) + 64);
        v95 = (_QWORD *)v94[4];
        v96 = (_QWORD *)v94[6];
        v97 = v94[2];
        v98 = v95[1];
        v99 = v95[9];
        *(float *)v99 = v71;
        *(float *)(v99 + 4) = v72;
        *(float *)(v99 + 8) = v73;
        *(float *)(v99 + 12) = v74;
        *(float *)(v99 + 16) = v75;
        *(float *)(v99 + 20) = v76;
        *(float *)(v99 + 24) = v77;
        *(float *)(v99 + 28) = v78;
        *(float *)(v99 + 32) = v79;
        *(float *)(v99 + 36) = v80;
        *(float *)(v99 + 40) = v81;
        *(float *)(v99 + 44) = v82;
        *(float *)(v99 + 48) = v83;
        *(float *)(v99 + 52) = v84;
        *(float *)(v99 + 56) = v85;
        *(float *)(v99 + 60) = v86;
        *(_DWORD *)(v99 + 64) = *(_DWORD *)(v87 + 396);
        if (v95[8] > v98)
          v98 = v95[8];
        v95[7] = 0;
        v95[8] = v98;
        v100 = v96[1];
        v101 = (_DWORD *)v96[9];
        *v101 = *(_DWORD *)(v87 + 404);
        v101[1] = *(_DWORD *)(v87 + 408);
        v101[2] = *(_DWORD *)(v87 + 412);
        v101[3] = *(_DWORD *)(v87 + 416);
        v101[4] = *(_DWORD *)(v87 + 420);
        v101[5] = *(_DWORD *)(v87 + 424);
        v101[6] = *(_DWORD *)(v87 + 428);
        v101[7] = *(_DWORD *)(v87 + 432);
        v102 = v96[8];
        if (v102 <= v100)
          v102 = v100;
        v96[7] = 0;
        v96[8] = v102;
        v103 = *(_QWORD *)(v97 + 8);
        **(_DWORD **)(v97 + 72) = 1065353216;
        if (*(_QWORD *)(v97 + 64) > v103)
          v103 = *(_QWORD *)(v97 + 64);
        *(_QWORD *)(v97 + 56) = 0;
        *(_QWORD *)(v97 + 64) = v103;
        v104 = *(uint64_t **)(v29 + 504);
        v105 = *(uint64_t **)(v29 + 512);
        while (v104 != v105)
        {
          v106 = *v104;
          *(_QWORD *)(*v104 + 224) = v88;
          if (v92 > v91)
          {
            v107 = v92 - v91;
            v108 = a4[8];
            if (v108 + v107 > a4[9])
            {
              LOBYTE(v108) = 1;
              a4[8] = 1;
              a4[9] = a4[10];
            }
            a4[8] = v108 + v107;
            a4[49] = v92;
            LOBYTE(v91) = v92;
          }
          *(_DWORD *)(v106 + 216) = (v92 - 1 + v90);
          ++v104;
        }
      }
      if (*(_BYTE *)(v29 + 136))
      {
        v109 = *(_QWORD *)(v29 + 560);
        v110 = *(unsigned __int8 *)(v109 + 293);
        v111 = a4[48];
        if (v111 == 255)
        {
          v111 = a4[8];
          if (v111 >= a4[9])
          {
            LOBYTE(v111) = 1;
            a4[8] = 1;
            a4[9] = a4[10];
          }
          a4[8] = v111 + 1;
          a4[48] = v111;
          v112 = 1;
          a4[49] = 1;
        }
        else
        {
          v112 = a4[49];
        }
        v113 = 2 * v110 - 1;
        v114 = v113 - v112;
        if (v113 > v112)
        {
          v112 = a4[8];
          if (v112 + v114 > a4[9])
          {
            LOBYTE(v112) = 1;
            a4[8] = 1;
            a4[9] = a4[10];
          }
          a4[8] = v112 + v114;
          a4[49] = v113;
          LOBYTE(v112) = v113;
        }
        *(_DWORD *)(v29 + 56) = (v113 - 1 + v111);
        v115 = *(unsigned __int8 *)(v109 + 292);
        *(_QWORD *)(v29 + 64) = v115;
        v116 = *(_QWORD **)(*(_QWORD *)(v29 + 48) + 64);
        v117 = v116[8];
        v118 = v116[2];
        v119 = (_QWORD *)v116[6];
        v120 = (_QWORD *)v116[4];
        v121 = v120[1];
        v122 = v120[9];
        *(float *)v122 = v71;
        *(float *)(v122 + 4) = v72;
        *(float *)(v122 + 8) = v73;
        *(float *)(v122 + 12) = v74;
        *(float *)(v122 + 16) = v75;
        *(float *)(v122 + 20) = v76;
        *(float *)(v122 + 24) = v77;
        *(float *)(v122 + 28) = v78;
        *(float *)(v122 + 32) = v79;
        *(float *)(v122 + 36) = v80;
        *(float *)(v122 + 40) = v81;
        *(float *)(v122 + 44) = v82;
        *(float *)(v122 + 48) = v83;
        *(float *)(v122 + 52) = v84;
        *(float *)(v122 + 56) = v85;
        *(float *)(v122 + 60) = v86;
        *(_DWORD *)(v122 + 64) = *(_DWORD *)(v109 + 400);
        if (v120[8] > v121)
          v121 = v120[8];
        v120[7] = 0;
        v120[8] = v121;
        v123 = v119[1];
        v124 = (_DWORD *)v119[9];
        *v124 = *(_DWORD *)(v109 + 404);
        v124[1] = *(_DWORD *)(v109 + 408);
        v124[2] = *(_DWORD *)(v109 + 412);
        v124[3] = *(_DWORD *)(v109 + 416);
        v124[4] = *(_DWORD *)(v109 + 420);
        v124[5] = *(_DWORD *)(v109 + 424);
        v124[6] = *(_DWORD *)(v109 + 428);
        v124[7] = *(_DWORD *)(v109 + 432);
        if (v119[8] > v123)
          v123 = v119[8];
        v119[7] = 0;
        v119[8] = v123;
        v125 = *(_QWORD *)(v118 + 8);
        **(_DWORD **)(v118 + 72) = 1065353216;
        if (*(_QWORD *)(v118 + 64) > v125)
          v125 = *(_QWORD *)(v118 + 64);
        *(_QWORD *)(v118 + 56) = 0;
        *(_QWORD *)(v118 + 64) = v125;
        v126 = *(_DWORD *)(v109 + 392);
        v127 = *(_QWORD *)(v117 + 8);
        **(_DWORD **)(v117 + 72) = v126;
        if (*(_QWORD *)(v117 + 64) > v127)
          v127 = *(_QWORD *)(v117 + 64);
        *(_QWORD *)(v117 + 56) = 0;
        *(_QWORD *)(v117 + 64) = v127;
        v128 = *(uint64_t **)(v29 + 504);
        v129 = *(uint64_t **)(v29 + 512);
        while (v128 != v129)
        {
          v130 = *v128;
          *(_QWORD *)(*v128 + 104) = v115;
          if (v113 > v112)
          {
            v131 = v113 - v112;
            v132 = a4[8];
            if (v132 + v131 > a4[9])
            {
              LOBYTE(v132) = 1;
              a4[8] = 1;
              a4[9] = a4[10];
            }
            a4[8] = v132 + v131;
            a4[49] = v113;
            LOBYTE(v112) = v113;
          }
          *(_DWORD *)(v130 + 96) = (v113 - 1 + v111);
          ++v128;
        }
      }
      if (!*(_BYTE *)(v29 + 392))
        goto LABEL_18;
      v133 = *(_QWORD *)(v29 + 304);
      v134 = *(_QWORD *)(v133 + 64);
      v135 = *(_QWORD **)(v134 + 64);
      v136 = v135[1];
      v137 = (_DWORD *)v135[9];
      v138 = *(_QWORD *)(v29 + 560);
      *v137 = *(_DWORD *)(v138 + 404);
      v137[1] = *(_DWORD *)(v138 + 408);
      v137[2] = *(_DWORD *)(v138 + 412);
      v137[3] = *(_DWORD *)(v138 + 416);
      v137[4] = *(_DWORD *)(v138 + 420);
      v137[5] = *(_DWORD *)(v138 + 424);
      v137[6] = *(_DWORD *)(v138 + 428);
      v137[7] = *(_DWORD *)(v138 + 432);
      if (v135[8] > v136)
        v136 = v135[8];
      v135[7] = 0;
      v135[8] = v136;
      v139 = *(_QWORD **)(v134 + 32);
      v140 = v139[1];
      v141 = (float *)v139[9];
      *v141 = v71;
      v141[1] = v72;
      v141[2] = v73;
      v141[3] = v74;
      v141[4] = v75;
      v141[5] = v76;
      v141[6] = v77;
      v141[7] = v78;
      v141[8] = v79;
      v141[9] = v80;
      v141[10] = v81;
      v141[11] = v82;
      v141[12] = v83;
      v141[13] = v84;
      v141[14] = v85;
      v141[15] = v86;
      if (v139[8] > v140)
        v140 = v139[8];
      v139[7] = 0;
      v139[8] = v140;
      v233 = (uint64_t *)(v29 + 568);
      v142 = *(float **)(v29 + 568);
      if (!v142)
      {
        v151 = v138;
LABEL_103:
        v159 = *(float **)(*(_QWORD *)(*(_QWORD *)(v29 + 8) + 128) + 208);
        v235 = 0.0;
        v236 = 0.0;
        v160 = *(double *)(v151 + 328);
        v237 = 0.0;
        v238 = v160;
        v161 = *(char **)(v151 + 304);
        v162 = *(char **)(v151 + 312);
        v163 = v151;
        v164 = v162 - v161;
        if (v162 != v161)
        {
          if (v164 < 0)
LABEL_197:
            abort();
          v165 = v159;
          v166 = v164 >> 2;
          v167 = COERCE_DOUBLE((*(uint64_t (**)(double))(**(_QWORD **)&v160 + 16))(COERCE_DOUBLE(*(_QWORD *)&v160)));
          v235 = v167;
          *(_QWORD *)&v237 = *(_QWORD *)&v167 + 4 * v166;
          v159 = v165;
          do
          {
            if (v167 != 0.0)
              **(_DWORD **)&v167 = *(_DWORD *)v161;
            v161 += 4;
            *(_QWORD *)&v167 += 4;
          }
          while (v161 != v162);
          v236 = v167;
          v163 = *(_QWORD *)(v29 + 560);
        }
        LODWORD(v239) = *(_DWORD *)(v151 + 336);
        md::DashTextureCache::textureForPattern(&v234, v159, (float *)&v235, 0, *(float *)(v163 + 392));
        v168 = v234;
        v234 = 0uLL;
        v169 = *(std::__shared_weak_count **)(v29 + 576);
        *(_OWORD *)v233 = v168;
        if (v169)
        {
          p_shared_owners = (unint64_t *)&v169->__shared_owners_;
          do
            v171 = __ldaxr(p_shared_owners);
          while (__stlxr(v171 - 1, p_shared_owners));
          if (!v171)
          {
            ((void (*)(std::__shared_weak_count *))v169->__on_zero_shared)(v169);
            std::__shared_weak_count::__release_weak(v169);
          }
        }
        v172 = (std::__shared_weak_count *)*((_QWORD *)&v234 + 1);
        if (*((_QWORD *)&v234 + 1))
        {
          v173 = (unint64_t *)(*((_QWORD *)&v234 + 1) + 8);
          do
            v174 = __ldaxr(v173);
          while (__stlxr(v174 - 1, v173));
          if (!v174)
          {
            ((void (*)(std::__shared_weak_count *))v172->__on_zero_shared)(v172);
            std::__shared_weak_count::__release_weak(v172);
          }
        }
        if (v235 != 0.0)
        {
          v236 = v235;
          (*(void (**)(double, double, _QWORD))(**(_QWORD **)&v238 + 40))(COERCE_DOUBLE(*(_QWORD *)&v238), COERCE_DOUBLE(*(_QWORD *)&v235), *(_QWORD *)&v237 - *(_QWORD *)&v235);
        }
        **(_QWORD **)(v133 + 96) = *(_QWORD *)(*(_QWORD *)(v29 + 568) + 64);
        v151 = *(_QWORD *)(v29 + 560);
        goto LABEL_123;
      }
      v232 = v133;
      v143 = *(_QWORD *)(v138 + 304);
      v144 = *(_QWORD *)(v138 + 312);
      v145 = v144 - v143;
      v230 = *(_QWORD *)(v138 + 328);
      if (v144 == v143)
      {
        v150 = 0;
        v149 = 0;
        v151 = v138;
      }
      else
      {
        if (v145 < 0)
          goto LABEL_197;
        v146 = v145 >> 2;
        v147 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v138 + 328) + 16))(*(_QWORD *)(v138 + 328));
        v145 = v147;
        v148 = 0;
        do
        {
          if (v147 + v148)
            *(_DWORD *)(v147 + v148) = *(_DWORD *)(v143 + v148);
          v148 += 4;
        }
        while (v143 + v148 != v144);
        v149 = v147 + v148;
        v150 = v147 + 4 * v146;
        v151 = *(_QWORD *)(v29 + 560);
      }
      v133 = v232;
      if (*((unsigned __int16 *)v142 + 23) == (int)(float)(*(float *)(v151 + 392) + 0.5)
        && *(float *)(v138 + 336) == v142[8]
        && (v152 = (v149 - v145) >> 2,
            v153 = *(_QWORD *)v142,
            v152 == (uint64_t)(*((_QWORD *)v142 + 1) - *(_QWORD *)v142) >> 2))
      {
        if (v149 == v145)
        {
          if (!v145)
            goto LABEL_123;
          v157 = 1;
        }
        else
        {
          v154 = 0;
          v155 = 1;
          do
          {
            v156 = vabds_f32(*(float *)(v145 + 4 * v154), *(float *)(v153 + 4 * v154));
            v157 = v156 <= 0.00000011921;
            v154 = v155++;
          }
          while (v156 <= 0.00000011921 && v152 > v154);
        }
      }
      else
      {
        if (!v145)
          goto LABEL_103;
        v157 = 0;
      }
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v230 + 40))(v230, v145, v150 - v145);
      v151 = *(_QWORD *)(v29 + 560);
      if (!v157)
        goto LABEL_103;
LABEL_123:
      v175 = *v233;
      v176 = *(float *)(*v233 + 48);
      v177 = 0.0;
      if (v176 != 0.0)
      {
        v178 = logf(v176 * *(float *)(v151 + 388));
        v177 = expf(floorf(v178 * 4.0) * -0.25);
      }
      v23 = *(float *)(v151 + 392);
      v24 = v23 + *(float *)(v151 + 400) * 2.0;
      LOWORD(v23) = *(_WORD *)(v175 + 40);
      v25 = v177 / *(float *)(v151 + 384);
      v26 = *(_QWORD **)(*(_QWORD *)(v133 + 64) + 48);
      v27 = v26[1];
      v28 = (float *)v26[9];
      *v28 = v24 / (float)(*((float *)a2 + 345) * (float)LODWORD(v23));
      v28[1] = v24;
      v28[2] = v25;
      if (v26[8] > v27)
        v27 = v26[8];
      v26[7] = 0;
      v26[8] = v27;
      v21 = v231;
LABEL_18:
      if (++v22 == v21)
      {
        v7 = this;
        v17 = *(_QWORD *)(v228 + 144);
        v179 = *(_QWORD *)(v17 + 8);
        v180 = *(_QWORD *)(v17 + 16);
        v11 = v227;
        if (v179 == v180)
          goto LABEL_128;
        while (2)
        {
          v191 = *(char **)(*(_QWORD *)v179 + 504);
          v192 = *(char **)(*(_QWORD *)v179 + 512);
          if (v191 != v192)
          {
            v193 = v192 - v191 - 8;
            if (v193 <= 7)
            {
              do
              {
LABEL_140:
                v198 = *(_QWORD *)v191;
                v191 += 8;
                *(_BYTE *)(v198 + 48) = 0;
              }
              while (v191 != v192);
            }
            else
            {
              v194 = (v193 >> 3) + 1;
              v195 = (uint64_t *)(v191 + 8);
              v196 = v194 & 0x3FFFFFFFFFFFFFFELL;
              do
              {
                v197 = *v195;
                *(_BYTE *)(*(v195 - 1) + 48) = 0;
                *(_BYTE *)(v197 + 48) = 0;
                v195 += 2;
                v196 -= 2;
              }
              while (v196);
              if (v194 != (v194 & 0x3FFFFFFFFFFFFFFELL))
              {
                v191 += 8 * (v194 & 0x3FFFFFFFFFFFFFFELL);
                goto LABEL_140;
              }
            }
          }
          v179 += 8;
          if (v179 == v180)
            goto LABEL_6;
          continue;
        }
      }
    }
  }
  v17 = *(_QWORD *)(v8 + 144);
LABEL_6:
  if (v17)
  {
    v19 = *(_QWORD *)(v17 + 8);
    for (i = *(_QWORD *)(v17 + 16); v19 != i; v19 += 8)
    {
      if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)v19 + 560) + 289))
        *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v19 + 504) + 8 * v11) + 48) = 1;
    }
  }
LABEL_128:
  v181 = *((_QWORD *)v7 + 9);
  v182 = *((_DWORD *)v7 + 4);
  v183 = *(_DWORD *)(v181 + 72);
  v184 = v182 - v183;
  if (v182 == v183)
  {
    v190 = 0;
    if (!*((_BYTE *)v7 + 160))
      return;
LABEL_143:
    v199 = *(_QWORD *)(v181 + 144);
    v200 = *(_QWORD *)(v199 + 8);
    v201 = *(_QWORD *)(v199 + 16);
    if (v200 == v201)
      return;
    while (1)
    {
      v202 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v200 + 504) + 8 * v190);
      *(_BYTE *)(v202 + 48) = 0;
      v203 = *((_DWORD *)v7 + 41);
      v204 = *(_QWORD *)(*(_QWORD *)(v202 + 456) + 560);
      v205 = *(double *)(v204 + 272);
      v206 = *(std::__shared_weak_count **)(v204 + 280);
      if (*(double *)&v206 == 0.0)
      {
        v253 = 0.0;
      }
      else
      {
        v207 = (unint64_t *)&v206->__shared_owners_;
        do
          v208 = __ldxr(v207);
        while (__stxr(v208 + 1, v207));
        v253 = *(double *)&v206;
        do
          v209 = __ldxr(v207);
        while (__stxr(v209 + 1, v207));
      }
      v252 = v205;
      v254 = 0.0;
      v255 = 0;
      LOBYTE(v256) = 0;
      if (v205 != 0.0)
        LODWORD(v205) = (*(uint64_t (**)(double, double *))(**(_QWORD **)&v205 + 48))(COERCE_DOUBLE(*(_QWORD *)&v205), &v254);
      LOBYTE(v256) = LOBYTE(v205);
      if (*(double *)&v206 != 0.0)
      {
        v210 = (unint64_t *)&v206->__shared_owners_;
        do
          v211 = __ldaxr(v210);
        while (__stlxr(v211 - 1, v210));
        if (!v211)
        {
          ((void (*)(std::__shared_weak_count *))v206->__on_zero_shared)(v206);
          std::__shared_weak_count::__release_weak(v206);
        }
        LODWORD(v205) = LOBYTE(v256);
      }
      if (!LODWORD(v205))
      {
        gss::QueryableLocker<gss::PropertyID>::~QueryableLocker((uint64_t)&v252);
LABEL_172:
        v217 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v202 + 208) + 64) + 16);
        v218 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v202 + 88) + 64) + 16);
        v219 = *(_QWORD *)(v217 + 8);
        **(_DWORD **)(v217 + 72) = v203;
        if (*(_QWORD *)(v217 + 64) > v219)
          v219 = *(_QWORD *)(v217 + 64);
        *(_QWORD *)(v217 + 56) = 0;
        *(_QWORD *)(v217 + 64) = v219;
        v220 = *(_QWORD *)(v218 + 8);
        **(_DWORD **)(v218 + 72) = v203;
        if (*(_QWORD *)(v218 + 64) > v220)
          v220 = *(_QWORD *)(v218 + 64);
        *(_QWORD *)(v218 + 56) = 0;
        *(_QWORD *)(v218 + 64) = v220;
        goto LABEL_146;
      }
      v212 = *(_QWORD *)(*(_QWORD *)&v252 + 24);
      v213 = *(float **)v212;
      if (!*(_QWORD *)v212)
        break;
      v214 = *v213;
      v215 = *v213 == 1.0;
      if (!*(_BYTE *)(v212 + 10))
        goto LABEL_178;
      if (v214 == 0.0 || v214 == 1.0)
        goto LABEL_178;
LABEL_179:
      if ((gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtEnd(*(_QWORD *)(*(_QWORD *)&v252 + 24), 0x12Cu, 0) & 1) != 0)
        goto LABEL_145;
      v221 = 1;
LABEL_181:
      if ((gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtEnd(v212, 0x12Cu, v221) & 1) != 0)
        goto LABEL_145;
      if (!v213)
      {
        v223 = 0;
LABEL_191:
        v225 = *(unsigned __int8 *)(v212 + v223 + 11);
        if (v225 != 2)
          goto LABEL_194;
        goto LABEL_192;
      }
      v222 = *v213;
      v223 = *v213 == 1.0;
      if (!*(_BYTE *)(v212 + 10))
        goto LABEL_191;
      if (v222 == 0.0 || v222 == 1.0)
        goto LABEL_191;
LABEL_192:
      if (gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtEnd(v212, 0x12Du, 0))
      {
LABEL_145:
        gss::QueryableLocker<gss::PropertyID>::~QueryableLocker((uint64_t)&v252);
        goto LABEL_146;
      }
      v225 = 1;
LABEL_194:
      hasValueForKeyAtEnd = gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtEnd(v212, 0x12Du, v225);
      gss::QueryableLocker<gss::PropertyID>::~QueryableLocker((uint64_t)&v252);
      if ((hasValueForKeyAtEnd & 1) == 0)
        goto LABEL_172;
LABEL_146:
      v200 += 8;
      if (v200 == v201)
        return;
    }
    v215 = 0;
LABEL_178:
    v221 = *(unsigned __int8 *)(v212 + v215 + 11);
    if (v221 != 2)
      goto LABEL_181;
    goto LABEL_179;
  }
  v185 = 0;
  v186 = *((_DWORD *)v7 + 3) - (*(_DWORD *)(v181 + 68) << v184);
  v187 = *((_DWORD *)v7 + 2) - (*(_DWORD *)(v181 + 64) << v184);
  v188 = ~v183 + v182;
  v189 = 2 * v188;
  do
  {
    v185 += (v187 >> v188 << v189) + (2 << v189) * (v186 >> v188);
    v187 -= v187 >> v188 << v188;
    v186 -= v186 >> v188 << v188;
    --v188;
    v189 -= 2;
  }
  while (v188 != -1);
  v190 = v185;
  if (*((_BYTE *)v7 + 160))
    goto LABEL_143;
}

void sub_19F8F72CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,std::__shared_weak_count *a53,uint64_t a54,std::__shared_weak_count *a55)
{
  std::__shared_weak_count *v55;
  unint64_t *p_shared_owners;
  unint64_t v58;
  unint64_t *v59;
  unint64_t v60;
  unint64_t *v61;
  unint64_t v62;

  if (a55)
  {
    p_shared_owners = (unint64_t *)&a55->__shared_owners_;
    do
      v58 = __ldaxr(p_shared_owners);
    while (__stlxr(v58 - 1, p_shared_owners));
    if (!v58)
    {
      ((void (*)(std::__shared_weak_count *))a55->__on_zero_shared)(a55);
      std::__shared_weak_count::__release_weak(a55);
    }
  }
  if (a53)
  {
    v59 = (unint64_t *)&a53->__shared_owners_;
    do
      v60 = __ldaxr(v59);
    while (__stlxr(v60 - 1, v59));
    if (!v60)
    {
      ((void (*)(std::__shared_weak_count *))a53->__on_zero_shared)(a53);
      std::__shared_weak_count::__release_weak(a53);
    }
  }
  if (v55)
  {
    v61 = (unint64_t *)&v55->__shared_owners_;
    do
      v62 = __ldaxr(v61);
    while (__stlxr(v62 - 1, v61));
    if (!v62)
    {
      ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
      std::__shared_weak_count::__release_weak(v55);
    }
  }
  _Unwind_Resume(exception_object);
}

_QWORD *altitude::RoadTilePrivate::collectRenderItems(_QWORD *this, md::PassList *a2, uint64_t a3, md::RealisticCommandBufferSelector *a4)
{
  uint64_t v5;
  int v6;
  int v7;
  char v8;
  int v9;
  unsigned int v10;
  unsigned int v11;
  int v12;
  int v13;
  uint64_t v14;
  void *v15;
  void *v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned __int8 *v24;
  unsigned __int8 *v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned __int8 *v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unsigned __int8 *v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  _QWORD *v47;
  _QWORD *v48;
  _QWORD *v49;
  __n128 v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unsigned __int8 *v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unsigned __int8 *v62;
  unsigned __int8 *v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  unsigned __int8 *v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  _QWORD *v75;
  uint64_t v76;
  unsigned int *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  void *v84;
  void *v85;
  _QWORD *v86;
  uint64_t v87;
  unint64_t v88;
  void (***v89)(void);
  void (**v90)(void);
  uint64_t v91;
  uint64_t v92;
  _BOOL4 v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t *v96;
  uint64_t *v97;
  uint64_t v98;
  uint64_t v99;
  char **v100;
  char **v101;
  uint64_t v102;
  uint64_t v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  _QWORD *v107;
  uint64_t v108;
  _QWORD *v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  char *v114;
  uint64_t v115;
  uint64_t v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  _QWORD *v120;
  uint64_t v121;
  _QWORD *v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  char *v127;
  uint64_t v128;
  uint64_t v129;
  __int128 v130;
  __int128 v131;
  __int128 v132;
  _QWORD *v133;
  uint64_t v134;
  _QWORD *v135;
  __int128 v136;
  __int128 v137;
  __int128 v138;
  __int128 v139;
  char *v140;
  uint64_t v141;
  uint64_t v142;
  char **v143;
  char **v144;
  uint64_t v145;
  uint64_t v146;
  __int128 v147;
  __int128 v148;
  __int128 v149;
  _QWORD *v150;
  uint64_t v151;
  _QWORD *v152;
  __int128 v153;
  __int128 v154;
  __int128 v155;
  __int128 v156;
  char *v157;
  uint64_t v158;
  uint64_t v159;
  __int128 v160;
  __int128 v161;
  __int128 v162;
  _QWORD *v163;
  uint64_t v164;
  _QWORD *v165;
  __int128 v166;
  __int128 v167;
  __int128 v168;
  __int128 v169;
  char *v170;
  uint64_t v171;
  uint64_t v172;
  __int128 v173;
  __int128 v174;
  __int128 v175;
  _QWORD *v176;
  uint64_t v177;
  _QWORD *v178;
  __int128 v179;
  __int128 v180;
  __int128 v181;
  __int128 v182;
  char *v183;
  ggl::RenderItem **v184;
  uint64_t v185;
  _QWORD *v186;
  _QWORD *v187;
  int v188;
  _QWORD v189[3];
  _QWORD *v190;
  _QWORD v191[3];
  _QWORD *v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  unsigned int v196[6];
  unsigned int *v197;
  ggl::RenderItem *v198[3];
  ggl::RenderItem **v199;
  __int128 v200;
  __int128 v201;
  __int128 v202;
  __int128 v203;
  __int128 v204;
  __int128 v205;
  uint64_t v206;

  v206 = *MEMORY[0x1E0C80C00];
  v5 = this[9];
  if (*((_BYTE *)this + 160))
  {
    v6 = *((_DWORD *)this + 4);
    v7 = *(_DWORD *)(v5 + 72);
    v8 = v6 - v7;
    if (v6 == v7)
    {
      v14 = 0;
    }
    else
    {
      v9 = 0;
      v10 = *((_DWORD *)this + 3) - (*(_DWORD *)(v5 + 68) << v8);
      v11 = *((_DWORD *)this + 2) - (*(_DWORD *)(v5 + 64) << v8);
      v12 = ~v7 + v6;
      v13 = 2 * v12;
      do
      {
        v9 += (v11 >> v12 << v13) + (2 << v13) * (v10 >> v12);
        v11 -= v11 >> v12 << v12;
        v10 -= v10 >> v12 << v12;
        --v12;
        v13 -= 2;
      }
      while (v12 != -1);
      v14 = v9;
    }
    v20 = (_QWORD *)*((_QWORD *)a2 + 1);
    v21 = v20[3];
    v22 = v20[4];
    if (v22 == v21)
    {
      *((_QWORD *)&v200 + 1) = 0;
    }
    else
    {
      v23 = 0;
      v24 = (unsigned __int8 *)*((_QWORD *)a4 + 1);
      while (1)
      {
        v25 = *(unsigned __int8 **)(v21 + 8 * v23);
        if (*v25 == v24[12])
        {
          v26 = *((_QWORD *)v25 + 1);
          v27 = v20[15];
          if (v26 < (v20[16] - v27) >> 3)
            break;
        }
        if (++v23 >= (unint64_t)((v22 - v21) >> 3))
        {
          v28 = 0;
          goto LABEL_22;
        }
      }
      v28 = *(_QWORD *)(v27 + 8 * v26);
      if (v28)
        v28 = *(_QWORD *)(*(_QWORD *)(v28 + 24) + 8 * v24[13]);
LABEL_22:
      *((_QWORD *)&v200 + 1) = v28;
      if (v22 != v21)
      {
        v29 = 0;
        while (1)
        {
          v30 = *(unsigned __int8 **)(v21 + 8 * v29);
          if (*v30 == v24[14])
          {
            v31 = *((_QWORD *)v30 + 1);
            v32 = v20[15];
            if (v31 < (v20[16] - v32) >> 3)
              break;
          }
          if (++v29 >= (unint64_t)((v22 - v21) >> 3))
          {
            v33 = 0;
            goto LABEL_32;
          }
        }
        v33 = *(_QWORD *)(v32 + 8 * v31);
        if (v33)
          v33 = *(_QWORD *)(*(_QWORD *)(v33 + 24) + 8 * v24[15]);
LABEL_32:
        *(_QWORD *)&v200 = v33;
        v35 = v22 - v21;
        if (v22 == v21)
          goto LABEL_39;
        v36 = 0;
        v37 = v35 >> 3;
        while (1)
        {
          v38 = *(unsigned __int8 **)(v21 + 8 * v36);
          if (*v38 == v24[16])
          {
            v39 = *((_QWORD *)v38 + 1);
            v40 = v20[15];
            if (v39 < (v20[16] - v40) >> 3)
              break;
          }
          if (++v36 >= v37)
            goto LABEL_39;
        }
        v41 = *(_QWORD *)(v40 + 8 * v39);
        if (!v41)
LABEL_39:
          v34 = 0;
        else
          v34 = *(_QWORD *)(*(_QWORD *)(v41 + 24) + 8 * v24[17]);
LABEL_40:
        *(_QWORD *)&v201 = v34;
        v42 = *(_QWORD *)(v5 + 144);
        v43 = *(_QWORD *)(v42 + 8);
        v44 = *(_QWORD *)(v42 + 16);
        if (v43 == v44)
          return this;
        while (1)
        {
          v46 = *(_QWORD **)(*(_QWORD *)(*(_QWORD *)v43 + 504) + 8 * v14);
          v189[0] = &off_1E42D8678;
          v189[1] = &v200;
          v190 = v189;
          if (v46[11] && v46[19])
          {
            v47 = (_QWORD *)v46[18];
            if (!v47)
              v47 = v46 + 16;
            if (v47[1] != *v47)
            {
              v196[0] = 0;
              v198[0] = (ggl::RenderItem *)(v46 + 7);
              std::__function::__func<altitude::RoadTilePrivate::collectRenderItems(md::PassList &,unsigned long,md::RealisticCommandBufferSelector *)::$_0,std::allocator<altitude::RoadTilePrivate::collectRenderItems(md::PassList &,unsigned long,md::RealisticCommandBufferSelector *)::$_0>,void ()(md::FlyoverRoadPasses,ggl::RenderItem *)>::operator()((uint64_t)v189, v196, v198);
            }
          }
          if (v46[26] && v46[34])
          {
            v48 = (_QWORD *)v46[33];
            if (!v48)
              v48 = v46 + 31;
            if (v48[1] != *v48)
            {
              v196[0] = 1;
              v198[0] = (ggl::RenderItem *)(v46 + 22);
              if (!v190)
                goto LABEL_206;
              (*(void (**)(_QWORD *, unsigned int *, ggl::RenderItem **, md::RealisticCommandBufferSelector *))(*v190 + 48))(v190, v196, v198, a4);
            }
          }
          if (v46[41] && v46[49])
          {
            v49 = (_QWORD *)v46[48];
            if (!v49)
              v49 = v46 + 46;
            if (v49[1] != *v49)
            {
              v196[0] = 2;
              v198[0] = (ggl::RenderItem *)(v46 + 37);
              if (!v190)
                goto LABEL_206;
              (*(void (**)(_QWORD *, unsigned int *, ggl::RenderItem **, md::RealisticCommandBufferSelector *))(*v190 + 48))(v190, v196, v198, a4);
            }
          }
          this = v190;
          if (v190 == v189)
          {
            this = v189;
            v45 = 4;
          }
          else
          {
            if (!v190)
              goto LABEL_44;
            v45 = 5;
          }
          this = (_QWORD *)(*(uint64_t (**)(void))(*this + 8 * v45))();
LABEL_44:
          v43 += 8;
          if (v43 == v44)
            return this;
        }
      }
    }
    v34 = 0;
    *(_QWORD *)&v200 = 0;
    goto LABEL_40;
  }
  if (*(_QWORD *)(v5 + 88) == a3)
    return this;
  *(_QWORD *)(v5 + 88) = a3;
  +[VKSharedResourcesManager sharedResources](VKSharedResourcesManager, "sharedResources");
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  v16 = v15;
  if (v15)
  {
    objc_msgSend(v15, "realisticCommandBufferSelector");
    v17 = v200;
    if (*((_QWORD *)&v200 + 1))
    {
      v18 = (unint64_t *)(*((_QWORD *)&v200 + 1) + 8);
      do
        v19 = __ldaxr(v18);
      while (__stlxr(v19 - 1, v18));
      if (!v19)
      {
        (*(void (**)(_QWORD))(**((_QWORD **)&v200 + 1) + 16))(*((_QWORD *)&v200 + 1));
        std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v200 + 1));
      }
    }
  }
  else
  {
    v17 = 0;
    v200 = 0uLL;
  }

  v51 = (_QWORD *)*((_QWORD *)a2 + 1);
  v52 = v51[3];
  v53 = v51[4];
  if (v53 == v52)
  {
    v194 = 0;
  }
  else
  {
    v54 = 0;
    v55 = *(_QWORD *)(v17 + 8);
    while (1)
    {
      v56 = *(unsigned __int8 **)(v52 + 8 * v54);
      if (*v56 == *(unsigned __int8 *)(v55 + 12))
      {
        v57 = *((_QWORD *)v56 + 1);
        v58 = v51[15];
        if (v57 < (v51[16] - v58) >> 3)
          break;
      }
      if (++v54 >= (unint64_t)((v53 - v52) >> 3))
        goto LABEL_76;
    }
    v59 = *(_QWORD *)(v58 + 8 * v57);
    if (v59)
    {
      v60 = *(_QWORD *)(*(_QWORD *)(v59 + 24) + 8 * *(unsigned __int8 *)(v55 + 13));
      goto LABEL_77;
    }
LABEL_76:
    v60 = 0;
LABEL_77:
    v194 = v60;
    if (v53 != v52)
    {
      v61 = 0;
      v62 = *(unsigned __int8 **)(v17 + 8);
      while (1)
      {
        v63 = *(unsigned __int8 **)(v52 + 8 * v61);
        if (*v63 == v62[14])
        {
          v64 = *((_QWORD *)v63 + 1);
          v65 = v51[15];
          if (v64 < (v51[16] - v65) >> 3)
            break;
        }
        if (++v61 >= (unint64_t)((v53 - v52) >> 3))
        {
          v66 = 0;
          goto LABEL_87;
        }
      }
      v66 = *(_QWORD *)(v65 + 8 * v64);
      if (v66)
        v66 = *(_QWORD *)(*(_QWORD *)(v66 + 24) + 8 * v62[15]);
LABEL_87:
      v193 = v66;
      v68 = v53 - v52;
      if (v53 == v52)
      {
LABEL_94:
        v67 = 0;
      }
      else
      {
        v69 = 0;
        v70 = v68 >> 3;
        while (1)
        {
          v71 = *(unsigned __int8 **)(v52 + 8 * v69);
          if (*v71 == v62[16])
          {
            v72 = *((_QWORD *)v71 + 1);
            v73 = v51[15];
            if (v72 < (v51[16] - v73) >> 3)
              break;
          }
          if (++v69 >= v70)
            goto LABEL_94;
        }
        v67 = *(_QWORD *)(v73 + 8 * v72);
        if (v67)
          v67 = *(_QWORD *)(*(_QWORD *)(v67 + 24) + 8 * v62[17]);
      }
      goto LABEL_95;
    }
  }
  v67 = 0;
  v193 = 0;
LABEL_95:
  v195 = v67;
  v74 = *(_QWORD *)(v5 + 144);
  v191[0] = &off_1E42D8630;
  v191[1] = &v193;
  v192 = v191;
  v75 = *(_QWORD **)(v74 + 8);
  v186 = *(_QWORD **)(v74 + 16);
  if (v75 == v186)
  {
    this = v191;
    v76 = 4;
    return (_QWORD *)(*(uint64_t (**)(void))(*this + 8 * v76))();
  }
  do
  {
    v79 = *v75;
    v80 = (uint64_t)v192;
    if (!v192)
      goto LABEL_103;
    if (v192 != v191)
    {
      v80 = (*(uint64_t (**)(void))(*v192 + 16))();
LABEL_103:
      v197 = (unsigned int *)v80;
      goto LABEL_105;
    }
    v197 = v196;
    (*(void (**)(_QWORD *, unsigned int *))(v191[0] + 24))(v191, v196);
LABEL_105:
    if (!*(_BYTE *)(v79 + 528))
      goto LABEL_196;
    v82 = *(_QWORD *)(v79 + 424);
    v81 = *(_QWORD *)(v79 + 432);
    if (v81 != v82)
    {
      v83 = *(_QWORD *)(v79 + 432);
      do
      {
        v85 = *(void **)(v83 - 24);
        v83 -= 24;
        v84 = v85;
        if (v85)
        {
          *(_QWORD *)(v81 - 16) = v84;
          operator delete(v84);
        }
        v81 = v83;
      }
      while (v83 != v82);
    }
    *(_QWORD *)(v79 + 432) = v82;
    *(_QWORD *)(v79 + 408) = *(_QWORD *)(v79 + 400);
    v86 = *(_QWORD **)(v79 + 480);
    if (v86)
    {
      do
      {
        if (v86[1])
        {
          v88 = 0;
          v89 = (void (***)(void))(v86 + 2);
          do
          {
            v90 = *v89;
            v89 += 15;
            (*v90)();
            ++v88;
          }
          while (v88 < v86[1]);
        }
        v86[1] = 0;
        v86 = (_QWORD *)*v86;
      }
      while (v86);
      v87 = *(_QWORD *)(v79 + 480);
    }
    else
    {
      v87 = 0;
    }
    *(_QWORD *)(v79 + 488) = v87;
    v91 = (uint64_t)v197;
    v187 = v75;
    if (!v197)
      goto LABEL_122;
    if (v197 != v196)
    {
      v91 = (*(uint64_t (**)(void))(*(_QWORD *)v197 + 16))();
LABEL_122:
      v199 = (ggl::RenderItem **)v91;
      goto LABEL_124;
    }
    v199 = v198;
    (*(void (**)(unsigned int *, ggl::RenderItem **))(*(_QWORD *)v196 + 24))(v196, v198);
LABEL_124:
    if (!*(_BYTE *)(v79 + 528))
      goto LABEL_191;
    if (*(_BYTE *)(v79 + 136))
    {
      v92 = *(_QWORD *)(*(_QWORD *)(v79 + 8) + 56);
      *(_QWORD *)(v79 + 40) = v92;
      v93 = *(unsigned __int8 *)(v92 + 58) == 1;
      if (!*(_BYTE *)(v79 + 264))
        goto LABEL_129;
    }
    else
    {
      v93 = 0;
      if (!*(_BYTE *)(v79 + 264))
        goto LABEL_129;
    }
    v94 = *(_QWORD *)(*(_QWORD *)(v79 + 8) + 64);
    *(_QWORD *)(v79 + 168) = v94;
    if (*(_BYTE *)(v94 + 58) == 1)
      v93 = 1;
LABEL_129:
    if (*(_BYTE *)(v79 + 392))
    {
      v95 = *(_QWORD *)(*(_QWORD *)(v79 + 8) + 72);
      *(_QWORD *)(v79 + 296) = v95;
      if (*(_BYTE *)(v95 + 58) == 1)
        v93 = 1;
    }
    v96 = *(uint64_t **)(v79 + 504);
    v97 = *(uint64_t **)(v79 + 512);
    if (v96 != v97)
    {
      v98 = 0;
      while (1)
      {
        v99 = *v96;
        if (*(_BYTE *)(*v96 + 48))
        {
          if (*(_QWORD *)(v99 + 448) != v98)
          {
            if (v98)
            {
              v100 = ggl::Batcher::commit((__int128 **)(v79 + 400), 0, v50);
              if (v100[1] != *v100)
              {
                v101 = v100;
                if (*(_BYTE *)(v79 + 136))
                {
                  v103 = *(_QWORD *)(v79 + 24);
                  v102 = *(_QWORD *)(v79 + 32);
                  v104 = *(_OWORD *)(v79 + 88);
                  v202 = *(_OWORD *)(v79 + 72);
                  v203 = v104;
                  v105 = *(_OWORD *)(v79 + 120);
                  v204 = *(_OWORD *)(v79 + 104);
                  v205 = v105;
                  v106 = *(_OWORD *)(v79 + 56);
                  v200 = *(_OWORD *)(v79 + 40);
                  v201 = v106;
                  v107 = *(_QWORD **)(v79 + 488);
                  v108 = v107[1];
                  if (v108 == *(_QWORD *)(v79 + 496))
                  {
                    v107 = (_QWORD *)*v107;
                    if (!v107)
                    {
                      v107 = malloc_type_malloc(120 * v108 + 16, 0xB644C221uLL);
                      *v107 = 0;
                      v107[1] = 0;
                      **(_QWORD **)(v79 + 488) = v107;
                    }
                    *(_QWORD *)(v79 + 488) = v107;
                    v108 = v107[1];
                  }
                  v109 = &v107[15 * v108];
                  v107[1] = v108 + 1;
                  v109[2] = &off_1E42B59B0;
                  v109[3] = v103;
                  v109 += 2;
                  v109[2] = v102;
                  v110 = v204;
                  v111 = v205;
                  v112 = v203;
                  *(_OWORD *)(v109 + 7) = v202;
                  v113 = v200;
                  *(_OWORD *)(v109 + 5) = v201;
                  *(_OWORD *)(v109 + 3) = v113;
                  *(_OWORD *)(v109 + 13) = v111;
                  *(_OWORD *)(v109 + 11) = v110;
                  *(_OWORD *)(v109 + 9) = v112;
                  v109[8] = v98;
                  v114 = *v101;
                  v109[11] = *v101;
                  v109[12] = (v101[1] - v114) >> 4;
                  v188 = 0;
                  *(_QWORD *)&v200 = v109;
                  if (!v199)
                    goto LABEL_205;
                  (*((void (**)(ggl::RenderItem **, int *, __int128 *))*v199 + 6))(v199, &v188, &v200);
                }
                if (*(_BYTE *)(v79 + 264))
                {
                  v115 = *(_QWORD *)(v79 + 152);
                  v116 = *(_QWORD *)(v79 + 160);
                  v117 = *(_OWORD *)(v79 + 216);
                  v202 = *(_OWORD *)(v79 + 200);
                  v203 = v117;
                  v118 = *(_OWORD *)(v79 + 248);
                  v204 = *(_OWORD *)(v79 + 232);
                  v205 = v118;
                  v119 = *(_OWORD *)(v79 + 184);
                  v200 = *(_OWORD *)(v79 + 168);
                  v201 = v119;
                  v120 = *(_QWORD **)(v79 + 488);
                  v121 = v120[1];
                  if (v121 == *(_QWORD *)(v79 + 496))
                  {
                    v120 = (_QWORD *)*v120;
                    if (!v120)
                    {
                      v120 = malloc_type_malloc(120 * v121 + 16, 0xB644C221uLL);
                      *v120 = 0;
                      v120[1] = 0;
                      **(_QWORD **)(v79 + 488) = v120;
                    }
                    *(_QWORD *)(v79 + 488) = v120;
                    v121 = v120[1];
                  }
                  v122 = &v120[15 * v121];
                  v120[1] = v121 + 1;
                  v122[2] = &off_1E42B59B0;
                  v122[3] = v115;
                  v122 += 2;
                  v122[2] = v116;
                  v123 = v204;
                  v124 = v205;
                  v125 = v203;
                  *(_OWORD *)(v122 + 7) = v202;
                  v126 = v200;
                  *(_OWORD *)(v122 + 5) = v201;
                  *(_OWORD *)(v122 + 3) = v126;
                  *(_OWORD *)(v122 + 13) = v124;
                  *(_OWORD *)(v122 + 11) = v123;
                  *(_OWORD *)(v122 + 9) = v125;
                  v122[8] = v98;
                  v127 = *v101;
                  v122[11] = *v101;
                  v122[12] = (v101[1] - v127) >> 4;
                  v188 = 1;
                  *(_QWORD *)&v200 = v122;
                  if (!v199)
                    goto LABEL_205;
                  (*((void (**)(ggl::RenderItem **, int *, __int128 *))*v199 + 6))(v199, &v188, &v200);
                }
                if (*(_BYTE *)(v79 + 392))
                {
                  v128 = *(_QWORD *)(v79 + 280);
                  v129 = *(_QWORD *)(v79 + 288);
                  v130 = *(_OWORD *)(v79 + 344);
                  v202 = *(_OWORD *)(v79 + 328);
                  v203 = v130;
                  v131 = *(_OWORD *)(v79 + 376);
                  v204 = *(_OWORD *)(v79 + 360);
                  v205 = v131;
                  v132 = *(_OWORD *)(v79 + 312);
                  v200 = *(_OWORD *)(v79 + 296);
                  v201 = v132;
                  v133 = *(_QWORD **)(v79 + 488);
                  v134 = v133[1];
                  if (v134 == *(_QWORD *)(v79 + 496))
                  {
                    v133 = (_QWORD *)*v133;
                    if (!v133)
                    {
                      v133 = malloc_type_malloc(120 * v134 + 16, 0xB644C221uLL);
                      *v133 = 0;
                      v133[1] = 0;
                      **(_QWORD **)(v79 + 488) = v133;
                    }
                    *(_QWORD *)(v79 + 488) = v133;
                    v134 = v133[1];
                  }
                  v135 = &v133[15 * v134];
                  v133[1] = v134 + 1;
                  v135[2] = &off_1E42B59B0;
                  v135[3] = v128;
                  v135 += 2;
                  v135[2] = v129;
                  v136 = v204;
                  v137 = v205;
                  v138 = v203;
                  *(_OWORD *)(v135 + 7) = v202;
                  v139 = v200;
                  *(_OWORD *)(v135 + 5) = v201;
                  *(_OWORD *)(v135 + 3) = v139;
                  *(_OWORD *)(v135 + 13) = v137;
                  *(_OWORD *)(v135 + 11) = v136;
                  *(_OWORD *)(v135 + 9) = v138;
                  v135[8] = v98;
                  v140 = *v101;
                  v135[11] = *v101;
                  v135[12] = (v101[1] - v140) >> 4;
                  v188 = 2;
                  *(_QWORD *)&v200 = v135;
                  if (!v199)
                    goto LABEL_205;
                  (*((void (**)(ggl::RenderItem **, int *, __int128 *))*v199 + 6))(v199, &v188, &v200);
                }
              }
            }
            v99 = *v96;
            v98 = *(_QWORD *)(*v96 + 448);
          }
          v141 = 16;
          if (v93)
          {
            v141 = 32;
            v142 = v99 + 32;
          }
          else
          {
            v142 = v99 + 16;
          }
          if (*(_QWORD *)(v142 + 8) != *(_QWORD *)(v99 + v141))
            gm::MultiRange<unsigned long>::push_back((char **)(v79 + 400), (_OWORD *)v142);
        }
        if (++v96 == v97)
          goto LABEL_169;
      }
    }
    v98 = 0;
LABEL_169:
    v143 = ggl::Batcher::commit((__int128 **)(v79 + 400), 0, v50);
    if (v143[1] != *v143)
    {
      v144 = v143;
      if (*(_BYTE *)(v79 + 136))
      {
        v145 = *(_QWORD *)(v79 + 24);
        v146 = *(_QWORD *)(v79 + 32);
        v147 = *(_OWORD *)(v79 + 88);
        v202 = *(_OWORD *)(v79 + 72);
        v203 = v147;
        v148 = *(_OWORD *)(v79 + 120);
        v204 = *(_OWORD *)(v79 + 104);
        v205 = v148;
        v149 = *(_OWORD *)(v79 + 56);
        v200 = *(_OWORD *)(v79 + 40);
        v201 = v149;
        v150 = *(_QWORD **)(v79 + 488);
        v151 = v150[1];
        if (v151 == *(_QWORD *)(v79 + 496))
        {
          v150 = (_QWORD *)*v150;
          if (!v150)
          {
            v150 = malloc_type_malloc(120 * v151 + 16, 0xB644C221uLL);
            *v150 = 0;
            v150[1] = 0;
            **(_QWORD **)(v79 + 488) = v150;
          }
          *(_QWORD *)(v79 + 488) = v150;
          v151 = v150[1];
        }
        v152 = &v150[15 * v151];
        v150[1] = v151 + 1;
        v152[2] = &off_1E42B59B0;
        v152[3] = v145;
        v152 += 2;
        v152[2] = v146;
        v153 = v204;
        v154 = v205;
        v155 = v203;
        *(_OWORD *)(v152 + 7) = v202;
        v156 = v200;
        *(_OWORD *)(v152 + 5) = v201;
        *(_OWORD *)(v152 + 3) = v156;
        *(_OWORD *)(v152 + 13) = v154;
        *(_OWORD *)(v152 + 11) = v153;
        *(_OWORD *)(v152 + 9) = v155;
        v152[8] = v98;
        v157 = *v144;
        v152[11] = *v144;
        v152[12] = (v144[1] - v157) >> 4;
        v188 = 0;
        *(_QWORD *)&v200 = v152;
        if (!v199)
        {
LABEL_205:
          std::__throw_bad_function_call[abi:nn180100]();
          __break(1u);
LABEL_206:
          std::__throw_bad_function_call[abi:nn180100]();
        }
        (*((void (**)(ggl::RenderItem **, int *, __int128 *))*v199 + 6))(v199, &v188, &v200);
      }
      if (*(_BYTE *)(v79 + 264))
      {
        v158 = *(_QWORD *)(v79 + 152);
        v159 = *(_QWORD *)(v79 + 160);
        v160 = *(_OWORD *)(v79 + 216);
        v202 = *(_OWORD *)(v79 + 200);
        v203 = v160;
        v161 = *(_OWORD *)(v79 + 248);
        v204 = *(_OWORD *)(v79 + 232);
        v205 = v161;
        v162 = *(_OWORD *)(v79 + 184);
        v200 = *(_OWORD *)(v79 + 168);
        v201 = v162;
        v163 = *(_QWORD **)(v79 + 488);
        v164 = v163[1];
        if (v164 == *(_QWORD *)(v79 + 496))
        {
          v163 = (_QWORD *)*v163;
          if (!v163)
          {
            v163 = malloc_type_malloc(120 * v164 + 16, 0xB644C221uLL);
            *v163 = 0;
            v163[1] = 0;
            **(_QWORD **)(v79 + 488) = v163;
          }
          *(_QWORD *)(v79 + 488) = v163;
          v164 = v163[1];
        }
        v165 = &v163[15 * v164];
        v163[1] = v164 + 1;
        v165[2] = &off_1E42B59B0;
        v165[3] = v158;
        v165 += 2;
        v165[2] = v159;
        v166 = v204;
        v167 = v205;
        v168 = v203;
        *(_OWORD *)(v165 + 7) = v202;
        v169 = v200;
        *(_OWORD *)(v165 + 5) = v201;
        *(_OWORD *)(v165 + 3) = v169;
        *(_OWORD *)(v165 + 13) = v167;
        *(_OWORD *)(v165 + 11) = v166;
        *(_OWORD *)(v165 + 9) = v168;
        v165[8] = v98;
        v170 = *v144;
        v165[11] = *v144;
        v165[12] = (v144[1] - v170) >> 4;
        v188 = 1;
        *(_QWORD *)&v200 = v165;
        if (!v199)
          goto LABEL_205;
        (*((void (**)(ggl::RenderItem **, int *, __int128 *))*v199 + 6))(v199, &v188, &v200);
      }
      if (*(_BYTE *)(v79 + 392))
      {
        v171 = *(_QWORD *)(v79 + 280);
        v172 = *(_QWORD *)(v79 + 288);
        v173 = *(_OWORD *)(v79 + 344);
        v202 = *(_OWORD *)(v79 + 328);
        v203 = v173;
        v174 = *(_OWORD *)(v79 + 376);
        v204 = *(_OWORD *)(v79 + 360);
        v205 = v174;
        v175 = *(_OWORD *)(v79 + 312);
        v200 = *(_OWORD *)(v79 + 296);
        v201 = v175;
        v176 = *(_QWORD **)(v79 + 488);
        v177 = v176[1];
        if (v177 == *(_QWORD *)(v79 + 496))
        {
          v176 = (_QWORD *)*v176;
          if (!v176)
          {
            v176 = malloc_type_malloc(120 * v177 + 16, 0xB644C221uLL);
            *v176 = 0;
            v176[1] = 0;
            **(_QWORD **)(v79 + 488) = v176;
          }
          *(_QWORD *)(v79 + 488) = v176;
          v177 = v176[1];
        }
        v178 = &v176[15 * v177];
        v176[1] = v177 + 1;
        v178[2] = &off_1E42B59B0;
        v178[3] = v171;
        v178 += 2;
        v178[2] = v172;
        v179 = v204;
        v180 = v205;
        v181 = v203;
        *(_OWORD *)(v178 + 7) = v202;
        v182 = v200;
        *(_OWORD *)(v178 + 5) = v201;
        *(_OWORD *)(v178 + 3) = v182;
        *(_OWORD *)(v178 + 13) = v180;
        *(_OWORD *)(v178 + 11) = v179;
        *(_OWORD *)(v178 + 9) = v181;
        v178[8] = v98;
        v183 = *v144;
        v178[11] = *v144;
        v178[12] = (v144[1] - v183) >> 4;
        v188 = 2;
        *(_QWORD *)&v200 = v178;
        if (!v199)
          goto LABEL_205;
        (*((void (**)(ggl::RenderItem **, int *, __int128 *))*v199 + 6))(v199, &v188, &v200);
      }
    }
LABEL_191:
    v184 = v199;
    if (v199 == v198)
    {
      v184 = v198;
      v185 = 4;
      v75 = v187;
    }
    else
    {
      v75 = v187;
      if (!v199)
        goto LABEL_196;
      v185 = 5;
    }
    (*((void (**)(void))*v184 + v185))();
LABEL_196:
    v77 = v197;
    if (v197 == v196)
    {
      v77 = v196;
      v78 = 4;
LABEL_98:
      (*(void (**)(void))(*(_QWORD *)v77 + 8 * v78))();
      goto LABEL_99;
    }
    if (v197)
    {
      v78 = 5;
      goto LABEL_98;
    }
LABEL_99:
    ++v75;
  }
  while (v75 != v186);
  this = v192;
  if (v192 == v191)
  {
    v76 = 4;
    this = v191;
    return (_QWORD *)(*(uint64_t (**)(void))(*this + 8 * v76))();
  }
  else if (v192)
  {
    v76 = 5;
    return (_QWORD *)(*(uint64_t (**)(void))(*this + 8 * v76))();
  }
  return this;
}

void sub_19F8F8244(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void std::__function::__func<altitude::RoadTilePrivate::collectRenderItems(md::PassList &,unsigned long,md::RealisticCommandBufferSelector *)::$_0,std::allocator<altitude::RoadTilePrivate::collectRenderItems(md::PassList &,unsigned long,md::RealisticCommandBufferSelector *)::$_0>,void ()(md::FlyoverRoadPasses,ggl::RenderItem *)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<altitude::RoadTilePrivate::collectRenderItems(md::PassList &,unsigned long,md::RealisticCommandBufferSelector *)::$_0,std::allocator<altitude::RoadTilePrivate::collectRenderItems(md::PassList &,unsigned long,md::RealisticCommandBufferSelector *)::$_0>,void ()(md::FlyoverRoadPasses,ggl::RenderItem *)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42D8678;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<altitude::RoadTilePrivate::collectRenderItems(md::PassList &,unsigned long,md::RealisticCommandBufferSelector *)::$_0,std::allocator<altitude::RoadTilePrivate::collectRenderItems(md::PassList &,unsigned long,md::RealisticCommandBufferSelector *)::$_0>,void ()(md::FlyoverRoadPasses,ggl::RenderItem *)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42D8678;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<altitude::RoadTilePrivate::collectRenderItems(md::PassList &,unsigned long,md::RealisticCommandBufferSelector *)::$_0,std::allocator<altitude::RoadTilePrivate::collectRenderItems(md::PassList &,unsigned long,md::RealisticCommandBufferSelector *)::$_0>,void ()(md::FlyoverRoadPasses,ggl::RenderItem *)>::operator()(uint64_t a1, unsigned int *a2, ggl::RenderItem **a3)
{
  return ggl::CommandBuffer::pushRenderItem(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * *a2), *a3);
}

void md::LightingLogic::~LightingLogic(md::LightingLogic *this)
{
  md::LightingLogic::~LightingLogic(this);
  JUMPOUT(0x1A1AF4E00);
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;

  *(_QWORD *)this = &off_1E428DBA8;
  GEOConfigRemoveBlockListener();
  md::Monitorable<md::Transformable<md::ConfigValue<GEOConfigKeyBOOL,BOOL>>>::~Monitorable((uint64_t)this + 376);
  md::Monitorable<md::ConfigValue<GEOConfigKeyBOOL,BOOL>>::~Monitorable((uint64_t)this + 296);
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((_QWORD **)this + 34));
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 25);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v5 = (std::__shared_weak_count *)*((_QWORD *)this + 23);
  if (v5)
  {
    v6 = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  *((_QWORD *)this + 18) = &off_1E42B49D0;

  *(_QWORD *)this = off_1E42AFC70;
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((_QWORD **)this + 13));
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((_QWORD **)this + 10));
}

void md::LightingLogic::didBecomeInactive(md::LightingLogic *this)
{
  char *v2;

  *((_BYTE *)this + 288) = 0;
  v2 = (char *)this + 272;
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((_QWORD **)this + 34));
  *((_QWORD *)this + 34) = 0;
  *((_QWORD *)this + 35) = 0;
  *((_QWORD *)this + 33) = v2;
}

void md::LightingLogic::createDebugNode(_BYTE *a1@<X0>, uint64_t a2@<X8>)
{
  const std::string::value_type *v4;
  const std::string::value_type *v5;
  const std::string::value_type *v6;
  _BYTE v7[32];
  std::string v8;
  int v9;
  _BYTE v10[32];
  std::string v11;
  int v12;
  _BYTE v13[32];
  std::string __p;
  int v15;
  char v16[23];
  char v17;

  strcpy((char *)a2, "LightingLogic");
  *(_WORD *)(a2 + 23) = 13;
  *(_OWORD *)(a2 + 47) = 0u;
  *(_OWORD *)(a2 + 63) = 0u;
  *(_OWORD *)(a2 + 79) = 0u;
  *(_BYTE *)(a2 + 95) = 0;
  if (a1[312])
    v4 = "On";
  else
    v4 = "Off";
  v17 = 12;
  strcpy(v16, "Shadow Cache");
  memset(&__p, 0, sizeof(__p));
  v15 = 4;
  std::string::__assign_external(&__p, v4);
  gdc::DebugTreeNode::addProperty(a2, (uint64_t)v16, (uint64_t)v13);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (a1[137])
    v5 = "On";
  else
    v5 = "Off";
  v17 = 12;
  strcpy(v16, "SSAO Enabled");
  memset(&v11, 0, sizeof(v11));
  v12 = 4;
  std::string::__assign_external(&v11, v5);
  gdc::DebugTreeNode::addProperty(a2, (uint64_t)v16, (uint64_t)v10);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v11.__r_.__value_.__l.__data_);
  if (a1[138])
    v6 = "On";
  else
    v6 = "Off";
  v17 = 14;
  strcpy(v16, "SSAO Activated");
  memset(&v8, 0, sizeof(v8));
  v9 = 4;
  std::string::__assign_external(&v8, v6);
  gdc::DebugTreeNode::addProperty(a2, (uint64_t)v16, (uint64_t)v7);
  if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v8.__r_.__value_.__l.__data_);
}

uint64_t md::Logic<md::LightingLogic,md::LightingLogicContext,md::LogicDependencies<gdc::TypeList<md::CameraContext,md::StyleLogicContext,md::SceneContext,md::ElevationContext>,gdc::TypeList<>>>::_debugConsoleString@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _BYTE *a4@<X8>)
{
  uint64_t v4;
  uint64_t v6;
  _QWORD v7[5];

  if (*(_QWORD *)(a3 + 8) == 0x41E8D6E445F4145 && (v4 = *(_QWORD *)(a3 + 32)) != 0)
  {
    v6 = result;
    md::LogicDependencies<gdc::TypeList<md::CameraContext,md::StyleLogicContext,md::SceneContext,md::ElevationContext>,gdc::TypeList<>>::buildRequiredTuple<md::CameraContext,md::StyleLogicContext,md::SceneContext,md::ElevationContext>(v7, **(_QWORD **)(a2 + 8), *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8));
    return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD *, uint64_t))(*(_QWORD *)v6 + 160))(v6, a2, v7, v4);
  }
  else
  {
    a4[23] = 0;
    *a4 = 0;
  }
  return result;
}

uint64_t md::Logic<md::LightingLogic,md::LightingLogicContext,md::LogicDependencies<gdc::TypeList<md::CameraContext,md::StyleLogicContext,md::SceneContext,md::ElevationContext>,gdc::TypeList<>>>::frequency(uint64_t a1)
{
  return *(_QWORD *)(a1 + 64);
}

void md::Logic<md::LightingLogic,md::LightingLogicContext,md::LogicDependencies<gdc::TypeList<md::CameraContext,md::StyleLogicContext,md::SceneContext,md::ElevationContext>,gdc::TypeList<>>>::debugConsoleString(uint64_t a1@<X0>, gdc::DebugTreeNode *a2@<X8>)
{
  void *v3;
  uint64_t v4;
  void *v5;
  void *v6[2];
  char v7;
  void *v8;
  char v9;
  void **v10;
  void *__p;
  void *v12;
  uint64_t v13;

  v13 = 0;
  (*(void (**)(void **__return_ptr, uint64_t, uint64_t *))(*(_QWORD *)a1 + 56))(v6, a1, &v13);
  gdc::DebugTreeNode::toString(a2, (uint64_t)v6);
  v3 = __p;
  if (__p)
  {
    v4 = (uint64_t)v12;
    v5 = __p;
    if (v12 != __p)
    {
      do
      {
        v4 -= 80;
        std::__destroy_at[abi:nn180100]<gdc::DebugTreeProperty,0>(v4);
      }
      while ((void *)v4 != v3);
      v5 = __p;
    }
    v12 = v3;
    operator delete(v5);
  }
  std::vector<gdc::DebugTreeNode>::~vector[abi:nn180100](&v10);
  if ((v9 & 0x80000000) == 0)
  {
    if ((v7 & 0x80000000) == 0)
      return;
LABEL_10:
    operator delete(v6[0]);
    return;
  }
  operator delete(v8);
  if (v7 < 0)
    goto LABEL_10;
}

void _ZNSt3__110__function6__funcIZN2md13LightingLogic15runBeforeLayoutERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_13CameraContextENS2_17StyleLogicContextENS2_12SceneContextENS2_16ElevationContextEEEENS9_IJEEEEE20ResolvedDependenciesERNS2_20LightingLogicContextEE3__0NS_9allocatorISM_EEFvvEEclEv(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  os_signpost_id_t v4;
  uint8_t v5[16];

  if (GEOGetVectorKitPerformanceLog_onceToken != -1)
    dispatch_once(&GEOGetVectorKitPerformanceLog_onceToken, &__block_literal_global_13_11780);
  v2 = (id)GEOGetVectorKitPerformanceLog_log;
  v3 = v2;
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 80);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)v5 = 0;
    _os_signpost_emit_with_name_impl(&dword_19F029000, v3, OS_SIGNPOST_INTERVAL_BEGIN, v4, "LightingLogic", (const char *)&unk_1A0189141, v5, 2u);
  }

}

void md::LightingLogic::_calculateShadowProjectionBounds(md::CameraContext const&,md::SceneContext const&,gm::Matrix<double,4,4> const&,gm::Box<double,3> &)const::$_0::operator()(uint64_t a1, uint64_t a2, std::__shared_weak_count *a3)
{
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v7;
  float *v8;
  uint64_t *v9;
  double v10;
  double v11;
  int v12;
  double v13;
  uint64_t v14;
  int v15;
  double *v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double *v28;
  double *v29;
  int v30;
  double v31;
  uint64_t v32;
  int v33;
  char *v34;
  double v35;
  unint64_t *v36;
  unint64_t v37;
  __int128 v38;
  double v39[16];
  __int128 v40;
  uint64_t v41;
  double v42;
  double v43;
  double v44;
  double v45;
  __int128 v46;
  double v47;
  double v48;
  double v49;
  double v50;
  _OWORD v51[8];
  uint64_t v52;
  std::__shared_weak_count *v53;
  double v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  double v59;
  double v60;
  uint64_t v61;
  __int128 v62;
  __int128 v63;
  _BYTE v64[80];
  __int128 v65;
  __int128 v66;
  __int128 v67;
  char v68[24];
  char *v69;
  uint64_t v70;

  v3 = a3;
  v70 = *MEMORY[0x1E0C80C00];
  v52 = a2;
  v53 = a3;
  if (a3)
  {
    p_shared_owners = (unint64_t *)&a3->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  v8 = (float *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 32))(a2);
  v9 = (uint64_t *)v8;
  if (v8[3] >= *v8 && v8[4] >= v8[1] && v8[5] >= v8[2])
  {
    if (*(unsigned __int8 *)(*(_QWORD *)a1 + 3776) - 1 > 2)
    {
      v29 = *(double **)(a1 + 8);
      v30 = 1 << *(_BYTE *)(a2 + 169);
      v31 = 1.0 / (double)v30;
      v32 = *(int *)(a2 + 176);
      v33 = ~*(_DWORD *)(a2 + 172);
      v57 = 0u;
      v59 = 0.0;
      v55 = 0u;
      v56 = 0u;
      v58 = 0u;
      v61 = 0;
      v54 = v31;
      *(double *)&v57 = v31;
      v60 = v31;
      *(double *)&v62 = v31 * (double)v32;
      *((double *)&v62 + 1) = v31 * (double)(v30 + v33);
      v63 = xmmword_19FFB33A0;
      v28 = &v54;
    }
    else
    {
      v10 = *(double *)(a2 + 600);
      v11 = *(double *)(a2 + 608);
      v12 = 1 << *(_BYTE *)(a2 + 169);
      v13 = 1.0 / (double)v12;
      v14 = *(int *)(a2 + 176);
      v15 = v12 + ~*(_DWORD *)(a2 + 172);
      *(double *)v64 = v13 * (double)v14;
      *(double *)&v64[8] = v13 * (double)v15;
      *(double *)&v64[16] = v13 + (double)v14 * v13;
      *(double *)&v64[24] = v13 + (double)v15 * v13;
      gdc::GlobeTileUtils::boundsFromMercatorRect((uint64_t)&v40, (double *)v64, v10, v11);
      v16 = *(double **)(a1 + 8);
      *((_QWORD *)&v65 + 1) = 0;
      memset(&v64[8], 0, 72);
      v66 = v46;
      *(double *)&v67 = v47;
      *((_QWORD *)&v67 + 1) = 0x3FF0000000000000;
      *(double *)v64 = v48 - *(double *)&v46;
      *(double *)&v64[40] = v49 - *((double *)&v46 + 1);
      *(double *)&v65 = v50 - v47;
      v17 = v43;
      v18 = v44;
      v19 = v17 + v17;
      v20 = (v17 + v17) * v17;
      v21 = (v18 + v18) * v18;
      v22 = v42;
      v23 = v22 + v22;
      v24 = (v22 + v22) * v43;
      v25 = (v18 + v18) * v45;
      v26 = v44 * (v22 + v22);
      v27 = 1.0 - (v22 + v22) * v22;
      v54 = 1.0 - (v20 + v21);
      *(double *)&v55 = v25 + v24;
      *((double *)&v56 + 1) = v24 - v25;
      *(double *)&v57 = v27 - v21;
      *((double *)&v58 + 1) = v45 * v19 + v26;
      v59 = v19 * v44 - v45 * v23;
      *((double *)&v55 + 1) = v26 - v45 * v19;
      *((double *)&v57 + 1) = v45 * v23 + v19 * v44;
      v60 = v27 - v20;
      *(_QWORD *)&v56 = 0;
      *(_QWORD *)&v58 = 0;
      v61 = 0;
      v62 = v40;
      *(_QWORD *)&v63 = v41;
      *((_QWORD *)&v63 + 1) = 0x3FF0000000000000;
      gm::operator*<double,4,4,4>(v39, &v54, (double *)v64);
      v28 = v39;
      v29 = v16;
    }
    gm::operator*<double,4,4,4>((double *)v64, v29, v28);
    v51[0] = *(_OWORD *)v64;
    v51[1] = *(_OWORD *)&v64[16];
    v51[2] = *(_OWORD *)&v64[32];
    v51[3] = *(_OWORD *)&v64[48];
    v51[4] = *(_OWORD *)&v64[64];
    v51[5] = v65;
    v51[6] = v66;
    v51[7] = v67;
    v38 = *(_OWORD *)(a1 + 16);
    v34 = (char *)operator new(0x20uLL);
    *(_QWORD *)v34 = &off_1E42DA4D8;
    *(_OWORD *)(v34 + 8) = v38;
    *((_QWORD *)v34 + 3) = v51;
    v69 = v34;
    *(float32x2_t *)&v35 = gm::Box<float,3>::forEachCorner(v9, (uint64_t)v68);
    (*(void (**)(char *, double))(*(_QWORD *)v34 + 40))(v34, v35);
    v3 = v53;
  }
  if (v3)
  {
    v36 = (unint64_t *)&v3->__shared_owners_;
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 - 1, v36));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_19F8F8B60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,char a57)
{
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a57);
  _Unwind_Resume(a1);
}

void std::__function::__func<md::LightingLogic::_calculateShadowProjectionBounds(md::CameraContext const&,md::SceneContext const&,gm::Matrix<double,4,4> const&,gm::Box<double,3> &)::$_0::operator() const(gdc::LayerDataWithWorld const&)::{lambda(gm::Matrix<float,3,1> const&)#1},std::allocator<md::LightingLogic::_calculateShadowProjectionBounds(md::CameraContext const&,md::SceneContext const&,gm::Matrix<double,4,4> const&,gm::Box<double,3> &)::$_0::operator() const(gdc::LayerDataWithWorld const&)::{lambda(gm::Matrix<float,3,1> const&)#1}>,void ()(gm::Matrix<float,3,1>&)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

__n128 std::__function::__func<md::LightingLogic::_calculateShadowProjectionBounds(md::CameraContext const&,md::SceneContext const&,gm::Matrix<double,4,4> const&,gm::Box<double,3> &)::$_0::operator() const(gdc::LayerDataWithWorld const&)::{lambda(gm::Matrix<float,3,1> const&)#1},std::allocator<md::LightingLogic::_calculateShadowProjectionBounds(md::CameraContext const&,md::SceneContext const&,gm::Matrix<double,4,4> const&,gm::Box<double,3> &)::$_0::operator() const(gdc::LayerDataWithWorld const&)::{lambda(gm::Matrix<float,3,1> const&)#1}>,void ()(gm::Matrix<float,3,1>&)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_1E42DA4D8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 std::__function::__func<md::LightingLogic::_calculateShadowProjectionBounds(md::CameraContext const&,md::SceneContext const&,gm::Matrix<double,4,4> const&,gm::Box<double,3> &)::$_0::operator() const(gdc::LayerDataWithWorld const&)::{lambda(gm::Matrix<float,3,1> const&)#1},std::allocator<md::LightingLogic::_calculateShadowProjectionBounds(md::CameraContext const&,md::SceneContext const&,gm::Matrix<double,4,4> const&,gm::Box<double,3> &)::$_0::operator() const(gdc::LayerDataWithWorld const&)::{lambda(gm::Matrix<float,3,1> const&)#1}>,void ()(gm::Matrix<float,3,1>&)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E42DA4D8;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

_QWORD *std::__function::__func<md::LightingLogic::_calculateShadowProjectionBounds(md::CameraContext const&,md::SceneContext const&,gm::Matrix<double,4,4> const&,gm::Box<double,3> &)::$_0::operator() const(gdc::LayerDataWithWorld const&)::{lambda(gm::Matrix<float,3,1> const&)#1},std::allocator<md::LightingLogic::_calculateShadowProjectionBounds(md::CameraContext const&,md::SceneContext const&,gm::Matrix<double,4,4> const&,gm::Box<double,3> &)::$_0::operator() const(gdc::LayerDataWithWorld const&)::{lambda(gm::Matrix<float,3,1> const&)#1}>,void ()(gm::Matrix<float,3,1>&)>::operator()(_QWORD *result, float *a2)
{
  double v2;
  double *v3;

  v2 = *(double *)(result[3] + 112)
     + *(double *)(result[3] + 16) * *a2
     + *(double *)(result[3] + 48) * a2[1]
     + *(double *)(result[3] + 80) * a2[2];
  v3 = (double *)result[1];
  if (v2 < *v3 || (v3 = (double *)result[2], v2 > *v3))
    *v3 = v2;
  return result;
}

void _ZNSt3__110__function6__funcIZN2md13LightingLogic15runBeforeLayoutERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_13CameraContextENS2_17StyleLogicContextENS2_12SceneContextENS2_16ElevationContextEEEENS9_IJEEEEE20ResolvedDependenciesERNS2_20LightingLogicContextEE3__2NS_9allocatorISM_EEFvNS2_17StyleManagerEventEEED0Ev()
{
  JUMPOUT(0x1A1AF4E00);
}

__n128 _ZNKSt3__110__function6__funcIZN2md13LightingLogic15runBeforeLayoutERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_13CameraContextENS2_17StyleLogicContextENS2_12SceneContextENS2_16ElevationContextEEEENS9_IJEEEEE20ResolvedDependenciesERNS2_20LightingLogicContextEE3__2NS_9allocatorISM_EEFvNS2_17StyleManagerEventEEE7__cloneEv(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_1E42CB018;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 _ZNKSt3__110__function6__funcIZN2md13LightingLogic15runBeforeLayoutERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_13CameraContextENS2_17StyleLogicContextENS2_12SceneContextENS2_16ElevationContextEEEENS9_IJEEEEE20ResolvedDependenciesERNS2_20LightingLogicContextEE3__2NS_9allocatorISM_EEFvNS2_17StyleManagerEventEEE7__cloneEPNS0_6__baseISQ_EE(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E42CB018;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void _ZNSt3__110__function6__funcIZN2md13LightingLogic15runBeforeLayoutERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_13CameraContextENS2_17StyleLogicContextENS2_12SceneContextENS2_16ElevationContextEEEENS9_IJEEEEE20ResolvedDependenciesERNS2_20LightingLogicContextEE3__2NS_9allocatorISM_EEFvNS2_17StyleManagerEventEEEclEOSP_(gss::Allocator *a1, unsigned __int8 *a2)
{
  gss::Allocator *v2;
  uint64_t *v3;
  _QWORD *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t *v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  gss::Allocator *v26;
  uint64_t v27;
  __int128 v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  __int128 v35;
  _QWORD *v36;
  _QWORD *v37;
  char *v38;
  uint64_t v39;
  _BYTE v40[15];
  char v41;

  if ((*a2 | 4) != 4)
    return;
  v2 = a1;
  v4 = (_QWORD *)*((_QWORD *)a1 + 1);
  v3 = (uint64_t *)*((_QWORD *)a1 + 2);
  v5 = (std::__shared_weak_count *)v4[23];
  v4[22] = 0;
  v4[23] = 0;
  if (!v5)
    goto LABEL_6;
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(p_shared_owners);
  while (__stlxr(v7 - 1, p_shared_owners));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
    v8 = *v3;
    if (*v3)
    {
LABEL_7:
      v36 = 0;
      v37 = 0;
      v38 = 0;
      v39 = gss::Allocator::instance(a1);
      memset(v40, 0, sizeof(v40));
      v41 = 1;
      gss::StylesheetManager<gss::ScenePropertyID>::styleQueryForFeatureAttributes((unint64_t *)&v35, v8, (gss::FeatureAttributeSet *)&v36, (gss::QueryOverrides *)v40);
      if (!v40[14] && *(_QWORD *)v40)
      {
        v9 = gss::Allocator::instance(a1);
        a1 = (gss::Allocator *)(*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v9 + 40))(v9, *(_QWORD *)v40, *(unsigned __int16 *)&v40[12]);
      }
      v10 = v35;
      v35 = 0uLL;
      v11 = (std::__shared_weak_count *)v4[23];
      *((_OWORD *)v4 + 11) = v10;
      if (v11)
      {
        v12 = (unint64_t *)&v11->__shared_owners_;
        do
          v13 = __ldaxr(v12);
        while (__stlxr(v13 - 1, v12));
        if (!v13)
        {
          ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
          std::__shared_weak_count::__release_weak(v11);
        }
      }
      v14 = (std::__shared_weak_count *)*((_QWORD *)&v35 + 1);
      if (*((_QWORD *)&v35 + 1))
      {
        v15 = (unint64_t *)(*((_QWORD *)&v35 + 1) + 8);
        do
          v16 = __ldaxr(v15);
        while (__stlxr(v16 - 1, v15));
        if (!v16)
        {
          ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
          std::__shared_weak_count::__release_weak(v14);
        }
      }
      if (v36)
      {
        v37 = v36;
        a1 = (gss::Allocator *)(*(uint64_t (**)(uint64_t, _QWORD *, int64_t))(*(_QWORD *)v39 + 40))(v39, v36, v38 - (char *)v36);
      }
    }
  }
  else
  {
LABEL_6:
    v8 = *v3;
    if (*v3)
      goto LABEL_7;
  }
  v17 = (uint64_t *)*((_QWORD *)v2 + 3);
  v18 = (std::__shared_weak_count *)v4[25];
  v4[24] = 0;
  v4[25] = 0;
  if (!v18)
    goto LABEL_26;
  v19 = (unint64_t *)&v18->__shared_owners_;
  do
    v20 = __ldaxr(v19);
  while (__stlxr(v20 - 1, v19));
  if (!v20)
  {
    ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
    std::__shared_weak_count::__release_weak(v18);
    if (!*v17)
      return;
  }
  else
  {
LABEL_26:
    if (!*v17)
      return;
  }
  v21 = gss::Allocator::instance(a1);
  v22 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v21 + 16))(v21, 8, 4);
  v23 = v22;
  if (v22)
    *v22 = 0x90001004BLL;
  v36 = 0;
  v37 = 0;
  v38 = 0;
  v39 = v21;
  v24 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v21 + 16))(v21, 8, 4);
  v36 = v24;
  v38 = (char *)(v24 + 1);
  if (v24)
    *v24 = *v23;
  v37 = v24 + 1;
  gss::FeatureAttributeSet::sort((gss::FeatureAttributeSet *)&v36);
  if (v23)
    (*(void (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)v21 + 40))(v21, v23, 8);
  v25 = *v17;
  memset(v40, 0, sizeof(v40));
  v41 = 1;
  gss::StylesheetManager<gss::PropertyID>::styleQueryForFeatureAttributes((unint64_t *)&v35, v25, (gss::FeatureAttributeSet *)&v36, (gss::QueryOverrides *)v40);
  if (!v40[14] && *(_QWORD *)v40)
  {
    v27 = gss::Allocator::instance(v26);
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v27 + 40))(v27, *(_QWORD *)v40, *(unsigned __int16 *)&v40[12]);
  }
  v28 = v35;
  v35 = 0uLL;
  v29 = (std::__shared_weak_count *)v4[25];
  *((_OWORD *)v4 + 12) = v28;
  if (v29)
  {
    v30 = (unint64_t *)&v29->__shared_owners_;
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
  v32 = (std::__shared_weak_count *)*((_QWORD *)&v35 + 1);
  if (*((_QWORD *)&v35 + 1))
  {
    v33 = (unint64_t *)(*((_QWORD *)&v35 + 1) + 8);
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 - 1, v33));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
  }
  if (v36)
  {
    v37 = v36;
    (*(void (**)(uint64_t, _QWORD *, int64_t))(*(_QWORD *)v39 + 40))(v39, v36, v38 - (char *)v36);
  }
}

void sub_19F8F9030(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, int a16, unsigned __int16 a17, char a18)
{
  uint64_t v19;

  if (!a18 && a15)
  {
    v19 = gss::Allocator::instance((gss::Allocator *)exception_object);
    (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v19 + 40))(v19, a15, a17);
  }
  if (a11)
    (*(void (**)(uint64_t))(*(_QWORD *)a14 + 40))(a14);
  _Unwind_Resume(exception_object);
}

void _ZNSt3__110__function6__funcIZN2md13LightingLogic15runBeforeLayoutERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_13CameraContextENS2_17StyleLogicContextENS2_12SceneContextENS2_16ElevationContextEEEENS9_IJEEEEE20ResolvedDependenciesERNS2_20LightingLogicContextEE3__1NS_9allocatorISM_EEFvvEED0Ev()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *_ZNKSt3__110__function6__funcIZN2md13LightingLogic15runBeforeLayoutERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_13CameraContextENS2_17StyleLogicContextENS2_12SceneContextENS2_16ElevationContextEEEENS9_IJEEEEE20ResolvedDependenciesERNS2_20LightingLogicContextEE3__1NS_9allocatorISM_EEFvvEE7__cloneEv(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42CAFD0;
  result[1] = v3;
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZN2md13LightingLogic15runBeforeLayoutERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_13CameraContextENS2_17StyleLogicContextENS2_12SceneContextENS2_16ElevationContextEEEENS9_IJEEEEE20ResolvedDependenciesERNS2_20LightingLogicContextEE3__1NS_9allocatorISM_EEFvvEE7__cloneEPNS0_6__baseISP_EE(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42CAFD0;
  a2[1] = v2;
  return result;
}

void _ZNSt3__110__function6__funcIZN2md13LightingLogic15runBeforeLayoutERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_13CameraContextENS2_17StyleLogicContextENS2_12SceneContextENS2_16ElevationContextEEEENS9_IJEEEEE20ResolvedDependenciesERNS2_20LightingLogicContextEE3__1NS_9allocatorISM_EEFvvEEclEv(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  os_signpost_id_t v4;
  uint8_t v5[16];

  if (GEOGetVectorKitPerformanceLog_onceToken != -1)
    dispatch_once(&GEOGetVectorKitPerformanceLog_onceToken, &__block_literal_global_13_11780);
  v2 = (id)GEOGetVectorKitPerformanceLog_log;
  v3 = v2;
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 80);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)v5 = 0;
    _os_signpost_emit_with_name_impl(&dword_19F029000, v3, OS_SIGNPOST_INTERVAL_END, v4, "LightingLogic", (const char *)&unk_1A0189141, v5, 2u);
  }

}

void _ZNSt3__110__function6__funcIZN2md13LightingLogic15runBeforeLayoutERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_13CameraContextENS2_17StyleLogicContextENS2_12SceneContextENS2_16ElevationContextEEEENS9_IJEEEEE20ResolvedDependenciesERNS2_20LightingLogicContextEE3__0NS_9allocatorISM_EEFvvEED0Ev()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *_ZNKSt3__110__function6__funcIZN2md13LightingLogic15runBeforeLayoutERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_13CameraContextENS2_17StyleLogicContextENS2_12SceneContextENS2_16ElevationContextEEEENS9_IJEEEEE20ResolvedDependenciesERNS2_20LightingLogicContextEE3__0NS_9allocatorISM_EEFvvEE7__cloneEv(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42CAF88;
  result[1] = v3;
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZN2md13LightingLogic15runBeforeLayoutERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_13CameraContextENS2_17StyleLogicContextENS2_12SceneContextENS2_16ElevationContextEEEENS9_IJEEEEE20ResolvedDependenciesERNS2_20LightingLogicContextEE3__0NS_9allocatorISM_EEFvvEE7__cloneEPNS0_6__baseISP_EE(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42CAF88;
  a2[1] = v2;
  return result;
}

uint64_t std::shared_ptr<ggl::ConstantDataTyped<ggl::Lighting::LightConfiguration>>::~shared_ptr[abi:nn180100](uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = *(std::__shared_weak_count **)(a1 + 8);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return a1;
}

uint64_t ggl::ConstantDataTyped<ggl::Lighting::LightSpecularConfiguration>::~ConstantDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  return a1;
}

void ggl::ConstantDataTyped<ggl::Lighting::LightSpecularConfiguration>::~ConstantDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::Lighting::LightSpecularConfiguration>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E2CC0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::Lighting::LightSpecularConfiguration>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E2CC0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::Lighting::LightSpecularConfiguration>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t ggl::ConstantDataTyped<ggl::Lighting::LightConfigurationVertex>::~ConstantDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  return a1;
}

void ggl::ConstantDataTyped<ggl::Lighting::LightConfigurationVertex>::~ConstantDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::Lighting::LightConfigurationVertex>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E2C88;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::Lighting::LightConfigurationVertex>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E2C88;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::Lighting::LightConfigurationVertex>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t ggl::ConstantDataTyped<ggl::Lighting::LightConfiguration>::~ConstantDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  return a1;
}

void ggl::ConstantDataTyped<ggl::Lighting::LightConfiguration>::~ConstantDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::Lighting::LightConfiguration>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E2C50;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::Lighting::LightConfiguration>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E2C50;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::Lighting::LightConfiguration>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void md::LightingLogicContext::~LightingLogicContext(void **this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;

  if (*((_BYTE *)this + 96))
  {
    if (*((char *)this + 127) < 0)
      operator delete(this[13]);
    *((_BYTE *)this + 96) = 0;
  }
  v2 = (std::__shared_weak_count *)this[5];
  if (!v2)
    goto LABEL_9;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)this[3];
    if (!v5)
      goto LABEL_15;
  }
  else
  {
LABEL_9:
    v5 = (std::__shared_weak_count *)this[3];
    if (!v5)
      goto LABEL_15;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_15:
  v8 = (std::__shared_weak_count *)this[1];
  if (v8)
  {
    v9 = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

void gdc::ManagedObjectHolder<md::LightingLogicContext>::~ManagedObjectHolder(_QWORD *a1)
{
  gdc::ManagedObjectHolder<md::LightingLogicContext>::~ManagedObjectHolder(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t gdc::ObjectHolder<md::LightingLogicContext>::extract@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 32);
  *(_QWORD *)(result + 32) = 0;
  *a2 = v2;
  return result;
}

_QWORD *gdc::ManagedObjectHolder<md::LightingLogicContext>::~ManagedObjectHolder(_QWORD *a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;

  *a1 = &off_1E42B0FF0;
  v2 = a1[4];
  if (v2)
  {
    if (*(_BYTE *)(v2 + 96))
    {
      if (*(char *)(v2 + 127) < 0)
        operator delete(*(void **)(v2 + 104));
      *(_BYTE *)(v2 + 96) = 0;
    }
    v3 = *(std::__shared_weak_count **)(v2 + 40);
    if (v3)
    {
      p_shared_owners = (unint64_t *)&v3->__shared_owners_;
      do
        v5 = __ldaxr(p_shared_owners);
      while (__stlxr(v5 - 1, p_shared_owners));
      if (!v5)
      {
        ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
        std::__shared_weak_count::__release_weak(v3);
      }
    }
    v6 = *(std::__shared_weak_count **)(v2 + 24);
    if (v6)
    {
      v7 = (unint64_t *)&v6->__shared_owners_;
      do
        v8 = __ldaxr(v7);
      while (__stlxr(v8 - 1, v7));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
    v9 = *(std::__shared_weak_count **)(v2 + 8);
    if (v9)
    {
      v10 = (unint64_t *)&v9->__shared_owners_;
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 - 1, v10));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
    MEMORY[0x1A1AF4E00](v2, 0x1032C4060F29B7BLL);
  }
  return a1;
}

void sub_19F8F9A24(_Unwind_Exception *a1)
{
  uint64_t v1;

  md::Monitorable<md::Transformable<md::ConfigValue<GEOConfigKeyBOOL,BOOL>>>::~Monitorable(v1 + 376);
  md::Monitorable<md::ConfigValue<GEOConfigKeyBOOL,BOOL>>::~Monitorable(v1 + 296);
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(_QWORD **)(v1 + 272));
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](v1 + 192);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](v1 + 176);
  *(_QWORD *)(v1 + 144) = &off_1E42B49D0;

  md::Logic<md::DrapingLogic,md::DrapingContext,md::LogicDependencies<gdc::TypeList<md::OverlaysContext,md::CameraContext,md::PendingSceneContext,md::ElevationContext>,gdc::TypeList<>>>::~Logic(v1);
  _Unwind_Resume(a1);
}

uint64_t md::Monitorable<md::Transformable<md::ConfigValue<GEOConfigKeyBOOL,BOOL>>>::~Monitorable(uint64_t a1)
{
  void *v2;
  _QWORD *v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  _QWORD *v8;
  uint64_t v9;

  if (*(_QWORD *)(a1 + 56))
  {
    GEOConfigRemoveBlockListener();
    v2 = *(void **)(a1 + 56);
    *(_QWORD *)(a1 + 56) = 0;

  }
  atomic_store(0, *(unsigned __int8 **)(a1 + 64));
  v3 = *(_QWORD **)(a1 + 104);
  if (v3 == (_QWORD *)(a1 + 80))
  {
    v4 = 4;
    v3 = (_QWORD *)(a1 + 80);
    goto LABEL_7;
  }
  if (v3)
  {
    v4 = 5;
LABEL_7:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  v5 = *(std::__shared_weak_count **)(a1 + 72);
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }

  v8 = *(_QWORD **)(a1 + 48);
  if (v8 == (_QWORD *)(a1 + 24))
  {
    v9 = 4;
    v8 = (_QWORD *)(a1 + 24);
    goto LABEL_17;
  }
  if (v8)
  {
    v9 = 5;
LABEL_17:
    (*(void (**)(void))(*v8 + 8 * v9))();
  }
  return a1;
}

void sub_19F8F9B5C(_Unwind_Exception *a1)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;

  v3 = *(_QWORD **)(v1 + 104);
  if (v3 == (_QWORD *)(v1 + 80))
  {
    v4 = 4;
    v3 = (_QWORD *)(v1 + 80);
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](v1 + 64);

  v5 = *(_QWORD **)(v1 + 48);
  if (v5 == (_QWORD *)(v1 + 24))
  {
    v6 = 4;
    v5 = (_QWORD *)(v1 + 24);
  }
  else
  {
    if (!v5)
      goto LABEL_11;
    v6 = 5;
  }
  (*(void (**)(void))(*v5 + 8 * v6))();
LABEL_11:
  _Unwind_Resume(a1);
}

uint64_t geo::_retain_ptr<NSCalendar * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>::~_retain_ptr(uint64_t a1)
{
  *(_QWORD *)a1 = &off_1E42B49D0;

  return a1;
}

void geo::_retain_ptr<NSCalendar * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>::~_retain_ptr(uint64_t a1)
{
  *(_QWORD *)a1 = &off_1E42B49D0;

  JUMPOUT(0x1A1AF4E00);
}

void md::LightingLogicContext::defaultLightingConstantData(md::LightingLogicContext *this)
{
  unsigned __int8 v1;
  unint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  char v5;
  std::once_flag::_State_type v6;
  char **v7;
  char *v8;

  if ((v1 & 1) == 0
  {
    v3 = operator new();
    v4 = (_QWORD *)ggl::BufferData::BufferData(v3, qword_1EE568628, 2, 1, 6, 1);
    v4[25] = ggl::Lighting::LightConfiguration::reflection(void)::reflection;
    *v4 = &off_1E42B9EB0;
    std::shared_ptr<ggl::ConstantDataTyped<ggl::Lighting::LightConfiguration>>::shared_ptr[abi:nn180100]<ggl::ConstantDataTyped<ggl::Lighting::LightConfiguration>,void>((uint64_t)v4);
    __cxa_atexit((void (*)(void *))std::shared_ptr<ggl::ConstantDataTyped<ggl::Lighting::LightConfiguration>>::~shared_ptr[abi:nn180100], &md::LightingLogicContext::defaultLightingConstantData(void)::_defaultLightingConstantData, &dword_19F029000);
  }
  v6 = 0;
  v2 = atomic_load(&v6);
  if (v2 != -1)
  {
    v8 = &v5;
    v7 = &v8;
    std::__call_once(&v6, &v7, (void (__cdecl *)(void *))std::__call_once_proxy[abi:nn180100]<std::tuple<md::LightingLogicContext::defaultLightingConstantData(void)::$_0 &&>>);
  }
}

void sub_19F8F9D3C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

_QWORD *std::shared_ptr<ggl::ConstantDataTyped<ggl::Lighting::LightConfiguration>>::shared_ptr[abi:nn180100]<ggl::ConstantDataTyped<ggl::Lighting::LightConfiguration>,void>(uint64_t a1)
{
  _QWORD *result;

  md::LightingLogicContext::defaultLightingConstantData(void)::_defaultLightingConstantData = a1;
  result = (_QWORD *)operator new();
  *result = &off_1E42E7A30;
  result[1] = 0;
  result[2] = 0;
  result[3] = a1;
  qword_1EE5885C8 = (uint64_t)result;
  return result;
}

void sub_19F8F9DA8(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

void std::__call_once_proxy[abi:nn180100]<std::tuple<md::LightingLogicContext::defaultLightingConstantData(void)::$_0 &&>>()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;

  v0 = md::LightingLogicContext::defaultLightingConstantData(void)::_defaultLightingConstantData;
  v1 = *(_QWORD *)(md::LightingLogicContext::defaultLightingConstantData(void)::_defaultLightingConstantData + 8);
  v2 = *(_QWORD *)(md::LightingLogicContext::defaultLightingConstantData(void)::_defaultLightingConstantData + 72);
  *(_WORD *)(v2 + 4) = 15360;
  *(_DWORD *)v2 = 0;
  *(_QWORD *)(v2 + 14) = 0;
  *(_QWORD *)(v2 + 6) = 0;
  *(_QWORD *)(v2 + 22) = 0;
  *(_WORD *)(v2 + 30) = 0;
  if (*(_QWORD *)(v0 + 64) > v1)
    v1 = *(_QWORD *)(v0 + 64);
  *(_QWORD *)(v0 + 56) = 0;
  *(_QWORD *)(v0 + 64) = v1;
}

void std::__shared_ptr_pointer<ggl::ConstantDataTyped<ggl::Lighting::LightConfiguration> *,std::shared_ptr<ggl::ConstantDataTyped<ggl::Lighting::LightConfiguration>>::__shared_ptr_default_delete<ggl::ConstantDataTyped<ggl::Lighting::LightConfiguration>,ggl::ConstantDataTyped<ggl::Lighting::LightConfiguration>>,std::allocator<ggl::ConstantDataTyped<ggl::Lighting::LightConfiguration>>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_pointer<ggl::ConstantDataTyped<ggl::Lighting::LightConfiguration> *,std::shared_ptr<ggl::ConstantDataTyped<ggl::Lighting::LightConfiguration>>::__shared_ptr_default_delete<ggl::ConstantDataTyped<ggl::Lighting::LightConfiguration>,ggl::ConstantDataTyped<ggl::Lighting::LightConfiguration>>,std::allocator<ggl::ConstantDataTyped<ggl::Lighting::LightConfiguration>>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t ___ZN2md13LightingLogicC2EPU28objcproto17OS_dispatch_queue8NSObject_block_invoke(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  v1 = *(_QWORD *)(a1 + 32);
  result = GEOConfigGetBOOL();
  *(_BYTE *)(v1 + 136) = result;
  return result;
}

void std::__function::__func<md::LightingLogic::LightingLogic(NSObject  {objcproto17OS_dispatch_queue}*)::$_0,std::allocator<md::LightingLogic::LightingLogic(NSObject  {objcproto17OS_dispatch_queue}*)::$_0>,BOOL ()(BOOL const&)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::LightingLogic::LightingLogic(NSObject  {objcproto17OS_dispatch_queue}*)::$_0,std::allocator<md::LightingLogic::LightingLogic(NSObject  {objcproto17OS_dispatch_queue}*)::$_0>,BOOL ()(BOOL const&)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E42CB060;
  return result;
}

void std::__function::__func<md::LightingLogic::LightingLogic(NSObject  {objcproto17OS_dispatch_queue}*)::$_0,std::allocator<md::LightingLogic::LightingLogic(NSObject  {objcproto17OS_dispatch_queue}*)::$_0>,BOOL ()(BOOL const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E42CB060;
}

uint64_t std::__function::__func<md::LightingLogic::LightingLogic(NSObject  {objcproto17OS_dispatch_queue}*)::$_0,std::allocator<md::LightingLogic::LightingLogic(NSObject  {objcproto17OS_dispatch_queue}*)::$_0>,BOOL ()(BOOL const&)>::operator()(uint64_t a1, _BYTE *a2)
{
  if (*a2)
    return MapsFeature_IsAvailable_SSAO();
  else
    return 0;
}

BOOL karo::media::C3bLoader::loadFromChunk(karo::media::C3bLoader *this, const unsigned __int8 *a2, unint64_t a3, karo::media::C3bModel *a4)
{
  NSObject *v4;
  const unsigned __int8 *v5;
  __int16 v6;
  double v8;
  unint64_t v9;
  unsigned __int32 v10;
  unint64_t v11;
  unsigned __int32 v12;
  unint64_t v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  _BOOL8 result;
  uint64_t v30;
  int64x2_t v31;
  unsigned int v32;
  int v33;
  unsigned __int32 v34;
  char *v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  uint64_t v39;
  NSObject *v40;
  unint64_t v41;
  int v42;
  int v43;
  int v44;
  unint64_t v45;
  unint64_t v46;
  std::vector<unsigned int>::size_type v47;
  unsigned int *v48;
  char *end;
  std::vector<unsigned int>::pointer v50;
  unint64_t v51;
  unint64_t v52;
  int v53;
  std::vector<unsigned int>::size_type v54;
  char *v55;
  char *v56;
  std::vector<unsigned int>::pointer v57;
  unint64_t v58;
  char *v59;
  uint64_t v60;
  double v61;
  unint64_t v62;
  uint64_t v63;
  unint64_t v64;
  unint64_t v65;
  uint64_t v66;
  unint64_t v67;
  unint64_t v68;
  uint64_t v69;
  char **v70;
  unint64_t v71;
  unint64_t v72;
  uint64_t v73;
  unint64_t v74;
  unint64_t v75;
  uint64_t v76;
  char **v77;
  unint64_t v78;
  unint64_t v79;
  uint64_t v80;
  char **v81;
  unint64_t v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t v85;
  NSObject *v86;
  int v87;
  unint64_t v88;
  unint64_t v89;
  int v90;
  unint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  int v95;
  int v96;
  unint64_t v97;
  unint64_t v98;
  unint64_t v99;
  unint64_t v100;
  unint64_t v101;
  uint64_t v102;
  uint64_t v103;
  int v104;
  int v105;
  int v106;
  int v107;
  float v108;
  unint64_t v109;
  unint64_t v110;
  unint64_t v111;
  unint64_t v112;
  unint64_t v113;
  unint64_t v114;
  int v115;
  uint64_t v116;
  int v117;
  unint64_t v118;
  unint64_t v119;
  unint64_t v120;
  unint64_t v121;
  uint64_t v122;
  unint64_t v123;
  unint64_t v124;
  unint64_t v125;
  unint64_t v126;
  unint64_t v127;
  unint64_t v128;
  uint64_t v129;
  unint64_t v130;
  uint64_t v131;
  uint64_t v132;
  int v133;
  float v134;
  unint64_t v135;
  unint64_t v136;
  int v137;
  uint64_t v138;
  unint64_t v139;
  unint64_t v140;
  unint64_t v141;
  uint64_t v142;
  unint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  unsigned __int8 v148;
  double v149;
  double v150;
  double v151;
  double v152;
  double v153;
  double v154;
  double v155;
  float64x2_t v156;
  float64x2_t v157;
  float64x2_t v158;
  float64x2_t v159;
  __int128 v160;
  uint64_t v161;
  unint64_t v162;
  unint64_t v163;
  unint64_t v164;
  unint64_t v165;
  uint64_t v166;
  unint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  int v172;
  int v173;
  float v174;
  int v175;
  unint64_t v176;
  unint64_t v177;
  unint64_t v178;
  unint64_t v179;
  int v180;
  uint64_t v181;
  unint64_t v182;
  unint64_t v183;
  unint64_t v184;
  unint64_t v185;
  uint64_t v186;
  unint64_t v187;
  uint64_t v188;
  uint64_t v189;
  int v190;
  int v191;
  float v192;
  int v193;
  unint64_t v194;
  unint64_t v195;
  unint64_t v196;
  unint64_t v197;
  int v198;
  uint64_t v199;
  unint64_t v200;
  unint64_t v201;
  unint64_t v202;
  unint64_t v203;
  uint64_t v204;
  unint64_t v205;
  uint64_t v206;
  uint64_t v207;
  int v208;
  float v209;
  unint64_t v210;
  unint64_t v211;
  int v212;
  uint64_t v213;
  uint64_t v214;
  unint64_t v215;
  size_t v216;
  char *v217;
  char *v218;
  size_t v219;
  size_t v220;
  __n128 *p_buf;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  __n128 *v225;
  char v226;
  std::string *v227;
  uint64_t v228;
  _QWORD *v229;
  unint64_t v230;
  NSObject *v231;
  const unsigned __int8 *v232;
  uint64_t v233;
  unint64_t v234;
  int v235;
  unint64_t v236;
  unint64_t v237;
  unint64_t v238;
  unint64_t v239;
  unint64_t v240;
  unint64_t v241;
  unint64_t v242;
  unint64_t v243;
  NSObject *v244;
  NSObject *v245;
  int v246;
  double v247;
  double v248;
  double v249;
  double v250;
  double v251;
  double v252;
  size_t v253;
  _WORD *v254;
  int v255;
  double v256;
  double v257;
  double v258;
  double v259;
  double v260;
  double v261;
  size_t v262;
  unsigned int v263;
  char v264;
  unsigned int v265;
  char v266;
  uint64_t v268;
  int *v269;
  int v270;
  BOOL v271;
  uint64_t *v272;
  NSObject *v273;
  unint64_t v274;
  NSObject *v275;
  int v277;
  unsigned __int16 v278;
  double v279;
  double v280;
  unsigned __int16 v281;
  NSObject *v282;
  uint64_t v283;
  int *v284;
  int v285;
  BOOL v286;
  uint64_t *v287;
  unint64_t v288;
  unsigned __int16 v289;
  double v290;
  double v291;
  unsigned __int16 v292;
  uint64_t v293;
  _WORD *v294;
  float *v295;
  const char *v296;
  uint64_t v297;
  uint64_t v298;
  unint64_t v299;
  const char *v300;
  float v301;
  uint64_t v302;
  uint64_t v303;
  int32x2_t *v304;
  unint64_t v305;
  unint64_t v306;
  size_t v307;
  unint64_t v308;
  BOOL v309;
  unint64_t v310;
  uint64_t v311;
  uint64_t v312;
  unint64_t v313;
  unint64_t v314;
  unint64_t v315;
  int32x2_t *v316;
  float32x4_t v317;
  int8x16_t v318;
  int8x16_t v319;
  int8x16_t v320;
  int8x16_t v321;
  int8x16_t v322;
  int8x16_t v323;
  int32x2_t v324;
  float *v325;
  uint64_t v326;
  uint64_t v327;
  size_t v328;
  int v329;
  size_t v330;
  uint64_t v331;
  unsigned int v332;
  unsigned int v333;
  float v334;
  float v335;
  float v336;
  int32x2_t *v337;
  uint64_t v338;
  uint64_t v339;
  int v340;
  size_t v341;
  uint64_t v342;
  float v343;
  float v344;
  int32x2_t *v345;
  size_t v346;
  unint64_t v347;
  size_t v348;
  unint64_t v349;
  unint64_t v350;
  unint64_t v351;
  uint64_t v352;
  _WORD *v353;
  float *v354;
  const char *v355;
  uint64_t v356;
  uint64_t v357;
  unint64_t v358;
  const char *v359;
  float v360;
  uint64_t v361;
  uint64_t v362;
  int32x2_t *v363;
  unint64_t v364;
  unint64_t v365;
  size_t v366;
  unint64_t v367;
  BOOL v368;
  unint64_t v369;
  uint64_t v370;
  uint64_t v371;
  unint64_t v372;
  unint64_t v373;
  unint64_t v374;
  int32x2_t *v375;
  float32x4_t v376;
  int8x16_t v377;
  int8x16_t v378;
  int8x16_t v379;
  int8x16_t v380;
  int8x16_t v381;
  int8x16_t v382;
  int32x2_t v383;
  float *v384;
  uint64_t v385;
  uint64_t v386;
  size_t v387;
  int v388;
  size_t v389;
  uint64_t v390;
  unsigned int v391;
  unsigned int v392;
  float v393;
  float v394;
  float v395;
  int32x2_t *v396;
  uint64_t v397;
  uint64_t v398;
  int v399;
  size_t v400;
  uint64_t v401;
  float v402;
  float v403;
  int32x2_t *v404;
  size_t v405;
  unint64_t v406;
  size_t v407;
  unint64_t v408;
  unint64_t v409;
  unint64_t v410;
  uint64_t v411;
  uint64_t v412;
  unsigned int v413;
  NSObject *v414;
  uint64_t v415;
  unsigned int v416;
  NSObject *v417;
  uint64_t v418;
  uint64_t v419;
  unsigned int v420;
  NSObject *v421;
  uint64_t v422;
  uint64_t v423;
  unsigned int v424;
  NSObject *v425;
  uint64_t v426;
  unsigned int v427;
  NSObject *v428;
  uint64_t v429;
  int v430;
  int v431;
  int v432;
  uint64_t v433;
  unsigned int v434;
  NSObject *v435;
  float32x2_t *v436;
  unint64_t v437;
  size_t v438;
  unsigned __int8 *v439;
  uint32x2_t v440;
  float32x2_t *v441;
  unint64_t v442;
  size_t v443;
  unsigned __int8 *v444;
  uint32x2_t v445;
  uint64_t v446;
  unint64_t v447;
  const __int16 *v448;
  int32x2_t *v449;
  float32x4_t v450;
  int8x16_t v451;
  int8x16_t v452;
  unint64_t v453;
  float32x2_t *v454;
  unsigned __int16 *v455;
  uint32x2_t v456;
  uint64_t v457;
  unint64_t v458;
  const __int16 *v459;
  int32x2_t *v460;
  float32x4_t v461;
  int8x16_t v462;
  int8x16_t v463;
  unint64_t v464;
  float32x2_t *v465;
  unsigned __int16 *v466;
  uint32x2_t v467;
  _QWORD *v468;
  uint64_t v469;
  uint64_t v470;
  unint64_t v471;
  unint64_t v472;
  BOOL v474;
  char *v475;
  unint64_t v476;
  unint64_t v477;
  unint64_t v478;
  unint64_t v479;
  unsigned __int8 *v480;
  karo::media::C3bModel *v481;
  char *v482;
  int v483;
  unsigned int v484;
  char v485;
  NSObject *v486;
  unsigned int *v487;
  char *v489;
  uint64_t **v490;
  NSObject *v491;
  int v492;
  unint64_t v493;
  char *v494;
  char *v495;
  uint64_t v496;
  uint64_t v497;
  _QWORD *v498;
  uint64_t v499;
  unint64_t v500;
  unint64_t v501;
  NSObject *v502;
  uint64_t **v503;
  uint64_t **v504;
  uint64_t **v505;
  uint64_t **v506;
  uint64_t **v507;
  unint64_t *v508;
  unint64_t v509;
  int v510;
  uint64_t v511;
  std::vector<unsigned int>::pointer begin;
  std::vector<unsigned int>::pointer v513;
  int v514;
  uint64_t v515;
  uint64_t v516;
  uint64_t v517;
  uint64_t v518;
  uint64_t v519;
  std::vector<unsigned int>::pointer v520;
  unint64_t v521;
  unint64_t v522;
  const unsigned __int8 *v523;
  unint64_t v524;
  int v525;
  uint64_t v526;
  std::__shared_weak_count *v527;
  unint64_t *p_shared_owners;
  unint64_t v529;
  unint64_t v530;
  BOOL v531;
  _QWORD *v532;
  unint64_t *v533;
  unint64_t v534;
  uint64_t **v535;
  char v536;
  char *v537;
  unint64_t *v538;
  unint64_t v539;
  uint64_t **v540;
  char v541;
  NSObject *v542;
  uint64_t v543;
  unint64_t v544;
  unint64_t v545;
  unint64_t v546;
  size_t v547;
  pwin_jpg *v548;
  std::__shared_weak_count *v549;
  unint64_t *v550;
  unint64_t v551;
  uint64_t v552;
  std::__shared_weak_count *v553;
  unint64_t *v554;
  unint64_t v555;
  unint64_t v556;
  std::__shared_weak_count *v557;
  _QWORD *v558;
  _QWORD *v559;
  std::__shared_weak_count *v560;
  unint64_t *v561;
  ggl::Data *v562;
  unint64_t v563;
  std::__shared_weak_count *v564;
  unint64_t *v565;
  unint64_t v566;
  unint64_t v567;
  uint64_t **v568;
  uint64_t *v569;
  uint64_t **v570;
  int v571;
  _DWORD *v572;
  uint64_t *v573;
  uint64_t *v574;
  __n128 *v575;
  unint64_t *v576;
  unint64_t v577;
  __n128 *v578;
  uint64_t v579;
  unint64_t *v580;
  unint64_t v581;
  uint64_t v582;
  std::__shared_weak_count *v583;
  unint64_t *v584;
  unint64_t v585;
  std::__shared_weak_count *v586;
  unint64_t *v587;
  unint64_t v588;
  size_t v589;
  _DWORD *v590;
  NSObject *v591;
  NSObject *v592;
  NSObject *v593;
  NSObject *v594;
  float v595;
  int v596;
  int v597;
  int v598;
  int v599;
  float v600;
  int v601;
  int v602;
  int v603;
  float v604;
  int v605;
  int v606;
  float v607;
  int v608;
  int v609;
  unsigned __int8 v610;
  uint64_t v611;
  uint64_t v612;
  uint64_t v613;
  unsigned __int8 v614;
  uint64_t v615;
  uint64_t v616;
  uint64_t v617;
  unsigned __int8 v618;
  uint64_t v619;
  uint64_t v620;
  uint64_t v621;
  int v622;
  float64_t v623;
  float64_t v624;
  double v625;
  double v626;
  float64_t v627;
  __int16 v628;
  __int16 v629;
  __int16 v630;
  unsigned __int8 v631;
  unsigned __int8 v632;
  unsigned __int8 v633;
  float v634;
  int v635;
  int v636;
  int v637;
  int v638;
  int v639;
  int v640;
  uint64_t v641;
  uint64_t v642;
  float64_t v643;
  __int16 v644;
  __int16 v645;
  unsigned __int8 v646;
  unsigned __int8 v647;
  unsigned __int8 v648;
  unsigned __int8 v649;
  uint64_t v650;
  int v651;
  int v652;
  unint64_t v653;
  float64_t v654;
  uint64_t v655;
  uint64_t v656;
  int v657;
  int v658;
  uint64_t v659;
  uint64_t v660;
  uint64_t v661;
  double v662;
  const unsigned __int8 *v663;
  unsigned __int8 *v664;
  unsigned __int8 *v665;
  uint64_t v666;
  unint64_t v667;
  unint64_t v668;
  unint64_t v669;
  uint64_t v670;
  char *v671;
  int *v672;
  unint64_t v673;
  uint64x2_t v674;
  unsigned int v675;
  int64x2_t *v677;
  size_t __len;
  int v679;
  unsigned __int32 v680;
  uint64_t **v681;
  unsigned int v682;
  unsigned __int8 *v683;
  const unsigned __int8 *v684;
  unint64_t v685;
  unsigned int v686;
  const unsigned __int8 *v687;
  int v688;
  unsigned __int32 v689;
  char **v690;
  ggl::Data *v692[2];
  int v693;
  uint8_t __dst[16];
  __int128 v695;
  int32x2_t *v696;
  std::vector<unsigned int> v697;
  std::vector<unsigned int> v698;
  __n128 buf;
  unint64_t v700;
  float64_t v701;
  float64_t v702;
  uint64_t v703;
  double v704;
  _BYTE v705[40];
  uint64_t v706;
  int v707;
  int v708;
  int v709;
  int v710;
  uint64_t v711;
  int16x8x2_t v712;
  int16x8x2_t v713;
  int8x16x2_t v714;
  int8x16x2_t v715;

  v711 = *MEMORY[0x1E0C80C00];
  if (a3 <= 0x85)
  {
    if (GEOGetVectorKitVKDefaultLog_onceToken != -1)
      dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_4_11772);
    v4 = (id)GEOGetVectorKitVKDefaultLog_log;
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      buf.n128_u16[0] = 0;
      _os_log_impl(&dword_19F029000, v4, OS_LOG_TYPE_ERROR, "C3M3 data block too short", (uint8_t *)&buf, 2u);
    }
LABEL_1173:

    return 0;
  }
  v5 = a2;
  if (*a2 != 67 || a2[1] != 51 || a2[2] != 77 || a2[3] != 3)
  {
    if (GEOGetVectorKitVKDefaultLog_onceToken != -1)
      dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_4_11772);
    v4 = (id)GEOGetVectorKitVKDefaultLog_log;
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      buf.n128_u16[0] = 0;
      _os_log_impl(&dword_19F029000, v4, OS_LOG_TYPE_ERROR, "C3M3 invalid header", (uint8_t *)&buf, 2u);
    }
    goto LABEL_1173;
  }
  v6 = *(_WORD *)a2;
  *((_BYTE *)a4 + 2) = a2[2];
  *(_WORD *)a4 = v6;
  *((_BYTE *)a4 + 3) = a2[3];
  *((_BYTE *)a4 + 4) = a2[4];
  v686 = a2[5];
  if (!a2[5])
    return 1;
  v688 = 0;
  v684 = a2 - 2;
  v677 = (int64x2_t *)((char *)a4 + 136);
  v672 = (int *)((char *)a4 + 208);
  v681 = (uint64_t **)((char *)a4 + 200);
  v687 = a2 - 4;
  v690 = (char **)((char *)a4 + 176);
  v671 = (char *)a4 + 224;
  v674 = (uint64x2_t)vdupq_n_s64(a3);
  v8 = 1.0;
  v9 = 6;
  while (2)
  {
    v10 = v5[v9];
    if (v9 + 5 >= a3)
      v11 = a3;
    else
      v11 = v9 + 5;
    switch(v5[v9])
    {
      case 0u:
        if (v9 + 5 >= a3)
          return 0;
        v12 = v5[v11];
        if (v5[v11])
        {
          if (GEOGetVectorKitVKDefaultLog_onceToken != -1)
            dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_4_11772);
          v592 = (id)GEOGetVectorKitVKDefaultLog_log;
          if (os_log_type_enabled(v592, OS_LOG_TYPE_ERROR))
          {
            buf.n128_u32[0] = 67109120;
            buf.n128_u32[1] = v12;
            _os_log_impl(&dword_19F029000, v592, OS_LOG_TYPE_ERROR, "C3M3: Unknown header type %d", (uint8_t *)&buf, 8u);
          }
          goto LABEL_1196;
        }
        v13 = v11 + 4;
        if (v11 + 4 >= a3)
          v13 = a3;
        if (v13 + 8 > a3)
          return 0;
        if (v13 + 16 > a3)
          return 0;
        if (v13 + 24 > a3)
          return 0;
        if (v13 + 32 > a3)
          return 0;
        v14 = *(double *)&v5[v13];
        v15 = *(double *)&v5[v13 + 8];
        v16 = *(double *)&v5[v13 + 16];
        v17 = *(double *)&v5[v13 + 24];
        v18 = v15 * v15;
        v19 = v8 - (v16 * v16 + v15 * v15) * 2.0;
        v20 = v15 * v14 - v17 * v16 + v15 * v14 - v17 * v16;
        v21 = v16 * v14;
        v22 = v17 * v15;
        v23 = v17 * v15 + v16 * v14 + v17 * v15 + v16 * v14;
        v24 = v17 * v16 + v15 * v14 + v17 * v16 + v15 * v14;
        v25 = v14 * v14;
        v26 = v8 - (v16 * v16 + v14 * v14) * 2.0;
        v27 = v16 * v15;
        v28 = v17 * v14;
        *((double *)a4 + 1) = v19;
        *((double *)a4 + 2) = v24;
        *((double *)a4 + 3) = v21 - v22 + v21 - v22;
        *((double *)a4 + 5) = v20;
        *((double *)a4 + 6) = v26;
        *((double *)a4 + 7) = v28 + v27 + v28 + v27;
        *((double *)a4 + 9) = v23;
        *((double *)a4 + 10) = v27 - v28 + v27 - v28;
        *((double *)a4 + 11) = v8 - (v18 + v25) * 2.0;
        if (v13 + 40 > a3)
          return 0;
        result = 0;
        if (v13 + 48 > a3)
          return result;
        if (v13 + 56 > a3)
          return result;
        result = 0;
        v30 = *(_QWORD *)&v5[v13 + 48];
        *(_OWORD *)((char *)a4 + 104) = *(_OWORD *)&v5[v13 + 32];
        *((_QWORD *)a4 + 15) = v30;
        v31 = vdupq_n_s64(v13);
        if ((vmaxv_u16((uint16x4_t)vmovn_s32(vuzp1q_s32((int32x4_t)vcgtq_u64((uint64x2_t)vaddq_s64(v31, (int64x2_t)xmmword_19FFB4D00), v674), (int32x4_t)vcgtq_u64((uint64x2_t)vaddq_s64(v31, (int64x2_t)xmmword_19FFB4D10), v674)))) & 1) != 0)return result;
        if (v13 + 96 > a3)
          return result;
        v9 = v13 + 104;
        if (v13 + 104 > a3)
          return result;
LABEL_1166:
        result = v688 + 1 >= v686;
        if (v688 + 1 >= v686)
          return result;
        ++v688;
        if (v9 + 1 > a3)
          return result;
        continue;
      case 1u:
        v9 = v11 + 4;
        if (v11 + 4 > a3)
          return 0;
        v682 = *(_DWORD *)this;
        v680 = *((unsigned __int8 *)this + 4);
        v228 = *((_QWORD *)a4 + 22);
        v229 = (_QWORD *)*((_QWORD *)a4 + 23);
        v230 = 0x6DB6DB6DB6DB6DB7 * (((uint64_t)v229 - v228) >> 3);
        v683 = (unsigned __int8 *)*(unsigned int *)&v5[v11];
        if ((unint64_t)v683 <= v230)
        {
          if ((unint64_t)v683 < v230)
          {
            v468 = (_QWORD *)(v228 + 56 * v683);
            while (v229 != v468)
            {
              v229 -= 7;
              std::__destroy_at[abi:nn180100]<karo::media::C3bMaterial,0>(v229);
            }
            *((_QWORD *)a4 + 23) = v468;
          }
        }
        else
        {
          std::vector<karo::media::C3bMaterial>::__append(v690, (unint64_t)&v683[-v230]);
        }
        if (!(_DWORD)v683)
          goto LABEL_1166;
        v469 = 0;
        v470 = 0;
        v673 = 0;
        v679 = 0;
        v664 = 0;
        v665 = 0;
        v661 = 0;
        v662 = 0.0;
        while (2)
        {
          v693 = v682;
          v471 = v9 + 1;
          if (v9 + 1 <= a3)
            v470 = v5[v9++];
          v472 = v9 + 2;
          v474 = v471 > a3 || v470 > 0xD;
          if (v472 > a3 || v474)
            return 0;
          v475 = *v690;
          (*v690)[56 * v469] = v470;
          if (v470 > 0xB)
            goto LABEL_1153;
          if (((1 << v470) & 0x7F7) != 0)
          {
            v476 = v9 + 3;
            if (v9 + 3 <= a3)
            {
              LOBYTE(v689) = v5[v472];
              v472 = v9 + 3;
            }
            v477 = v472 + 4;
            if (v472 + 4 > a3)
            {
              v478 = v472 + 4;
            }
            else
            {
              LODWORD(v685) = *(_DWORD *)&v5[v472];
              v478 = v472 + 8;
              v472 += 4;
            }
            v479 = v478;
            if (v478 > a3 || (LODWORD(__len) = *(_DWORD *)&v687[v478], v479 = v478 + 4, v472 = v478, v478 + 4 > a3))
            {
              if (v476 > a3)
                return 0;
            }
            else
            {
              v675 = *(_DWORD *)&v687[v479];
              v472 = v478 + 4;
              if (v476 > a3)
                return 0;
            }
            if (v477 > a3 || v478 > a3 || v479 > a3 || v685 >= a3)
              return 0;
            if (v689 > 0xDu)
              goto LABEL_976;
            v480 = (unsigned __int8 *)&v5[v685];
            if (((1 << v689) & 0x319D) != 0)
            {
              if ((_BYTE)v689)
              {
                v481 = a4;
                if ((v689 - 2) < 0xBu && ((0x467u >> (v689 - 2)) & 1) != 0)
                {
                  v482 = off_1E42F04E8[(v689 - 2)];
                }
                else if (v689 == 13)
                {
                  v482 = "heif";
                }
                else
                {
                  v482 = "unknown";
                }
              }
              else
              {
                v482 = "jpg";
                v481 = a4;
              }
              std::string::basic_string[abi:nn180100]<0>(&buf, v482);
              memset(__dst, 0, sizeof(__dst));
              *(_QWORD *)&v695 = 0;
              if (v689 == 4)
              {
                std::vector<unsigned char>::resize((uint64_t)__dst, v675);
                v484 = *((unsigned __int8 *)v481 + 3);
                v485 = v484 > 3 || v484 == 3 && *((_BYTE *)v481 + 4) != 0;
                v487 = *(unsigned int **)__dst;
                {
                  if (GEOGetVectorKitVKDefaultLog_onceToken != -1)
                    dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_4_11772);
                  v491 = (id)GEOGetVectorKitVKDefaultLog_log;
                  if (os_log_type_enabled(v491, OS_LOG_TYPE_ERROR))
                  {
                    LOWORD(v698.__begin_) = 0;
                    _os_log_impl(&dword_19F029000, v491, OS_LOG_TYPE_ERROR, "C3M3 LZMA texture decode failed", (uint8_t *)&v698, 2u);
                  }

                  v492 = 1;
LABEL_1148:
                  if (v487)
                  {
                    *(_QWORD *)&__dst[8] = v487;
                    operator delete(v487);
                  }
                  if (SHIBYTE(v700) < 0)
                    operator delete((void *)buf.n128_u64[0]);
                  if (v492 != 6)
                    return 0;
                  goto LABEL_1153;
                }
                v480 = (unsigned __int8 *)v487;
              }
              else
              {
                if ((__len + v685) > a3)
                {
                  if (GEOGetVectorKitVKDefaultLog_onceToken != -1)
                    dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_4_11772);
                  v486 = (id)GEOGetVectorKitVKDefaultLog_log;
                  if (os_log_type_enabled(v486, OS_LOG_TYPE_ERROR))
                  {
                    LOWORD(v698.__begin_) = 0;
                    _os_log_impl(&dword_19F029000, v486, OS_LOG_TYPE_ERROR, "C3M3 texture won't fit into buffer", (uint8_t *)&v698, 2u);
                  }

                }
                v487 = 0;
              }
              v489 = (char *)operator new(0x88uLL);
              *((_QWORD *)v489 + 1) = 0;
              *((_QWORD *)v489 + 2) = 0;
              *(_QWORD *)v489 = &off_1E42E5DF8;
              *((_QWORD *)v489 + 3) = &off_1E42C3568;
              *((_QWORD *)v489 + 4) = 0;
              *((_DWORD *)v489 + 10) = 29;
              v489[44] = 0;
              *((_OWORD *)v489 + 3) = 0u;
              *((_OWORD *)v489 + 4) = 0u;
              *((_OWORD *)v489 + 5) = 0u;
              *((_OWORD *)v489 + 6) = 0u;
              *((_OWORD *)v489 + 7) = 0u;
              v489[128] = 0;
              v697.__begin_ = (std::vector<unsigned int>::pointer)(v489 + 24);
              v697.__end_ = (std::vector<unsigned int>::pointer)v489;
              switch((int)v470)
              {
                case 1:
                case 4:
                  v490 = std::map<karo::media::C3bMaterialClass,std::vector<std::shared_ptr<karo::media::Image>>>::operator[](v681, 4);
                  std::vector<std::shared_ptr<karo::media::Image>>::push_back[abi:nn180100]((uint64_t)v490, (__n128 *)&v697);
                  break;
                case 2:
                  v505 = std::map<karo::media::C3bMaterialClass,std::vector<std::shared_ptr<karo::media::Image>>>::operator[](v681, 3);
                  std::vector<std::shared_ptr<karo::media::Image>>::push_back[abi:nn180100]((uint64_t)v505, (__n128 *)&v697);
                  break;
                case 5:
                  v506 = std::map<karo::media::C3bMaterialClass,std::vector<std::shared_ptr<karo::media::Image>>>::operator[](v681, 5);
                  std::vector<std::shared_ptr<karo::media::Image>>::push_back[abi:nn180100]((uint64_t)v506, (__n128 *)&v697);
                  break;
                case 6:
                  v507 = std::map<karo::media::C3bMaterialClass,std::vector<std::shared_ptr<karo::media::Image>>>::operator[](v681, 1);
                  std::vector<std::shared_ptr<karo::media::Image>>::push_back[abi:nn180100]((uint64_t)v507, (__n128 *)&v697);
                  break;
                case 7:
                  v503 = std::map<karo::media::C3bMaterialClass,std::vector<std::shared_ptr<karo::media::Image>>>::operator[](v681, 2);
                  std::vector<std::shared_ptr<karo::media::Image>>::push_back[abi:nn180100]((uint64_t)v503, (__n128 *)&v697);
                  break;
                default:
                  v504 = std::map<karo::media::C3bMaterialClass,std::vector<std::shared_ptr<karo::media::Image>>>::operator[](v681, 0);
                  std::vector<std::shared_ptr<karo::media::Image>>::push_back[abi:nn180100]((uint64_t)v504, (__n128 *)&v697);
                  break;
              }
              std::vector<karo::media::C3bMaterial::C3bMaterialImage>::resize((uint64_t)&(*v690)[56 * v469 + 8], 1uLL);
              LODWORD(v698.__begin_) = 7;
              v698.__end_ = v697.__begin_;
              v698.__end_cap_.__value_ = v697.__end_;
              if (v697.__end_)
              {
                v508 = (unint64_t *)(v697.__end_ + 2);
                do
                  v509 = __ldxr(v508);
                while (__stxr(v509 + 1, v508));
              }
              karo::media::C3bMaterial::C3bMaterialImage::operator=(*(_QWORD *)&(*v690)[56 * v469 + 8], (uint64_t)&v698);
              md::components::Material::~Material((md::components::Material *)&v698);
              if ((v470 - 3) > 2)
              {
                v510 = v682;
                if ((_DWORD)v470 != 6)
                {
LABEL_994:
                  if (v680 && !(_BYTE)v689)
                  {
                    v511 = v470;
                    karo::media::Image::setFormat((uint64_t)v697.__begin_, v510);
                    begin = v697.__begin_;
                    std::make_shared[abi:nn180100]<ggl::Data,unsigned char const*&,unsigned int const&,void>((ggl::Data **)&v698, v480, v675);
                    karo::media::Image::setSourceJpegData((uint64_t)begin, (uint64_t)v698.__begin_, (uint64_t)v698.__end_);
LABEL_1000:
                    std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&v698);
                    v492 = 6;
                    v470 = v511;
LABEL_1147:
                    std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&v697);
                    goto LABEL_1148;
                  }
                  if (v680 && v689 == 13)
                  {
                    v511 = v470;
                    karo::media::Image::setFormat((uint64_t)v697.__begin_, v510);
                    v513 = v697.__begin_;
                    std::make_shared[abi:nn180100]<ggl::Data,unsigned char const*&,unsigned int const&,void>((ggl::Data **)&v698, v480, v675);
                    karo::media::Image::setSourceHeifData((uint64_t)v513, (uint64_t)v698.__begin_, (uint64_t)v698.__end_);
                    goto LABEL_1000;
                  }
                  if (v680 && v689 == 12)
                  {
                    if (v510 == 14)
                      v514 = 14;
                    else
                      v514 = 4;
                    karo::media::Image::setFormat((uint64_t)v697.__begin_, v514);
                    if (__len >= 4)
                    {
                      v515 = *(unsigned int *)v480;
                      v516 = v515 + 4;
                      if (v515 + 4 >= (unint64_t)__len)
                        v516 = __len;
                      v517 = v516 + 4;
                      if (v516 + 4 <= (unint64_t)__len)
                      {
                        LODWORD(v666) = v470;
                        v518 = *(unsigned int *)&v480[v516];
                        v519 = v517 + v518;
                        if (v517 + v518 >= (unint64_t)__len)
                          v519 = __len;
                        v670 = v519;
                        v520 = v697.__begin_;
                        std::make_shared[abi:nn180100]<ggl::Data,unsigned char const*&,unsigned int const&,void>((ggl::Data **)&v698, v480 + 4, v515);
                        std::make_shared[abi:nn180100]<ggl::Data,unsigned char const*&,unsigned int const&,void>(v692, &v480[v517], v518);
                        karo::media::Image::setSourceH264Parameters(v520, (uint64_t)v698.__begin_, (uint64_t)v698.__end_, (uint64_t *)v692);
                        std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)v692);
                        std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&v698);
                        if (v670 + 4 <= (unint64_t)__len)
                        {
                          v589 = *(unsigned int *)&v480[v670];
                          std::make_shared[abi:nn180100]<ggl::Data,unsigned long,void>((ggl::Data **)&v698, (v589 + 4));
                          v590 = (_DWORD *)*((_QWORD *)v698.__begin_ + 1);
                          if (v589 <= 0xFFFFFFFB)
                            *v590 = bswap32(v589);
                          memcpy(v590 + 1, &v480[v670 + 4], v589);
                          karo::media::Image::setSourceH264Data((uint64_t)v697.__begin_, (uint64_t)v698.__begin_, (uint64_t)v698.__end_);
                          std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&v698);
                          v492 = 6;
                          v470 = v666;
                        }
                        else
                        {
                          v492 = 1;
                          v470 = v666;
                        }
                        goto LABEL_1147;
                      }
                    }
                    goto LABEL_1146;
                  }
                  if (v689 == 8 && (_DWORD)v470 != 6)
                    v693 = 29;
                  if (karo::media::ImageLoader::supportsFileType((uint64_t)&buf))
                  {
                    if ((karo::media::ImageLoader::loadFromChunk(&v693, (pwin_jpg *)v480, (unsigned __int8 *)v675, (unsigned __int16 *)&buf, (uint64_t)v697.__begin_) & 1) != 0)
                    {
                      if (v689 != 8 || v697.__begin_[4])
                      {
                        v492 = 6;
                        goto LABEL_1147;
                      }
                      if (karo::media::Image::convertToFormat((uint64_t)v697.__begin_, v682))
                      {
                        v492 = 6;
                        v8 = 1.0;
                        goto LABEL_1147;
                      }
                      if (GEOGetVectorKitVKDefaultLog_onceToken != -1)
                        dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_4_11772);
                      v591 = (id)GEOGetVectorKitVKDefaultLog_log;
                      if (os_log_type_enabled(v591, OS_LOG_TYPE_ERROR))
                      {
                        LOWORD(v698.__begin_) = 0;
                        _os_log_impl(&dword_19F029000, v591, OS_LOG_TYPE_ERROR, "C3M3 failed to convert image format for PNG image", (uint8_t *)&v698, 2u);
                      }

                      v8 = 1.0;
LABEL_1146:
                      v492 = 1;
                      goto LABEL_1147;
                    }
                    if (GEOGetVectorKitVKDefaultLog_onceToken != -1)
                      dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_4_11772);
                    v542 = (id)GEOGetVectorKitVKDefaultLog_log;
                    if (os_log_type_enabled(v542, OS_LOG_TYPE_ERROR))
                    {
                      LOWORD(v698.__begin_) = 0;
                      _os_log_impl(&dword_19F029000, v542, OS_LOG_TYPE_ERROR, "C3M3 failed to load image data for image", (uint8_t *)&v698, 2u);
                    }
                  }
                  else
                  {
                    if (GEOGetVectorKitVKDefaultLog_onceToken != -1)
                      dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_4_11772);
                    v542 = (id)GEOGetVectorKitVKDefaultLog_log;
                    if (os_log_type_enabled(v542, OS_LOG_TYPE_ERROR))
                    {
                      LOWORD(v698.__begin_) = 0;
                      _os_log_impl(&dword_19F029000, v542, OS_LOG_TYPE_ERROR, "C3M3 unsupported image texture extension", (uint8_t *)&v698, 2u);
                    }
                  }

                  goto LABEL_1146;
                }
                v510 = 14;
              }
              else
              {
                v510 = 6;
              }
              v693 = v510;
              goto LABEL_994;
            }
            if (v689 == 1)
            {
              buf = 0uLL;
              v700 = 0;
              std::string::basic_string[abi:nn180100](__dst, (void *)&v5[v685], __len);
              buf = *(__n128 *)__dst;
              v700 = v695;
              std::vector<std::string>::push_back[abi:nn180100]((uint64_t)v671, (uint64_t)&buf);
              std::vector<std::string>::push_back[abi:nn180100]((uint64_t)&(*v690)[56 * v469 + 32], (uint64_t)&buf);
              if (SHIBYTE(v700) < 0)
                operator delete((void *)buf.n128_u64[0]);
            }
            else
            {
LABEL_976:
              if (GEOGetVectorKitVKDefaultLog_onceToken != -1)
                dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_4_11772);
              v502 = (id)GEOGetVectorKitVKDefaultLog_log;
              if (os_log_type_enabled(v502, OS_LOG_TYPE_ERROR))
              {
                buf.n128_u32[0] = 67109120;
                buf.n128_u32[1] = v689;
                _os_log_impl(&dword_19F029000, v502, OS_LOG_TYPE_ERROR, "C3M3 unsupported texture format: %d", (uint8_t *)&buf, 8u);
              }

            }
LABEL_1153:
            v9 = v472;
            goto LABEL_1154;
          }
          if ((_DWORD)v470 == 3)
          {
            if (v9 + 3 > a3)
            {
              v483 = 0;
            }
            else
            {
              v483 = v5[v472];
              v472 = v9 + 3;
            }
            v521 = v472 + 4;
            if (v472 + 4 <= a3)
            {
              *(_QWORD *)&v662 = *(unsigned int *)&v5[v472];
              v521 = v472 + 8;
            }
            v522 = v521;
            if (v521 <= a3)
            {
              v665 = (unsigned __int8 *)*(unsigned int *)&v687[v521];
              v522 = v521 + 4;
            }
            if (v522 > a3 || v9 + 3 > a3 || v472 + 4 > a3 || v521 > a3)
              return 0;
            v523 = &v5[v522];
            if (v522 >= a3)
            {
              v525 = 0;
              v524 = v522;
            }
            else
            {
              v524 = v522 + 1;
              v525 = *v523;
            }
            v530 = v524 + 4;
            if (v524 + 4 <= a3)
            {
              v661 = *(unsigned int *)&v5[v524];
              v530 = v524 + 8;
            }
            v472 = v530;
            if (v530 <= a3)
            {
              v664 = (unsigned __int8 *)*(unsigned int *)&v687[v530];
              v472 = v530 + 4;
            }
            if (v472 > a3 || v522 >= a3 || v524 + 4 > a3 || v530 > a3)
              return 0;
            if (v483 | v525)
            {
              if (GEOGetVectorKitVKDefaultLog_onceToken != -1)
                dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_4_11772);
              v592 = (id)GEOGetVectorKitVKDefaultLog_log;
              if (os_log_type_enabled(v592, OS_LOG_TYPE_ERROR))
              {
                buf.n128_u16[0] = 0;
                _os_log_impl(&dword_19F029000, v592, OS_LOG_TYPE_ERROR, "C3M3 unsupported image format", (uint8_t *)&buf, 2u);
              }
            }
            else if (v665 == (unsigned __int8 *)*((unsigned int *)v523 - 1)
                   && v664 == (unsigned __int8 *)*(unsigned int *)&v687[v472])
            {
              std::vector<karo::media::C3bMaterial::C3bMaterialImage>::resize((uint64_t)&v475[56 * v469 + 8], 2uLL);
              std::string::basic_string[abi:nn180100]<0>(&buf, "jpg");
              v531 = karo::media::ImageLoader::supportsFileType((uint64_t)&buf);
              if (SHIBYTE(v700) < 0)
                operator delete((void *)buf.n128_u64[0]);
              if (v531)
              {
                v532 = operator new(0x88uLL);
                v532[1] = 0;
                v533 = v532 + 1;
                v532[2] = 0;
                *v532 = &off_1E42E5DF8;
                v532[3] = &off_1E42C3568;
                v532[4] = 0;
                *((_DWORD *)v532 + 10) = 29;
                *((_BYTE *)v532 + 44) = 0;
                *((_OWORD *)v532 + 3) = 0u;
                *((_OWORD *)v532 + 4) = 0u;
                *((_OWORD *)v532 + 5) = 0u;
                *((_OWORD *)v532 + 6) = 0u;
                *((_OWORD *)v532 + 7) = 0u;
                *((_BYTE *)v532 + 128) = 0;
                *(_QWORD *)__dst = v532 + 3;
                *(_QWORD *)&__dst[8] = v532;
                buf.n128_u32[0] = 4;
                buf.n128_u64[1] = (unint64_t)(v532 + 3);
                v700 = (unint64_t)v532;
                do
                  v534 = __ldxr(v533);
                while (__stxr(v534 + 1, v533));
                karo::media::C3bMaterial::C3bMaterialImage::operator=(*(_QWORD *)&(*v690)[56 * v469 + 8], (uint64_t)&buf);
                md::components::Material::~Material((md::components::Material *)&buf);
                v535 = std::map<karo::media::C3bMaterialClass,std::vector<std::shared_ptr<karo::media::Image>>>::operator[](v681, 4);
                std::vector<std::shared_ptr<karo::media::Image>>::push_back[abi:nn180100]((uint64_t)v535, (__n128 *)__dst);
                LODWORD(v698.__begin_) = 6;
                std::string::basic_string[abi:nn180100]<0>(&buf, "jpg");
                v536 = karo::media::ImageLoader::loadFromChunk((int *)&v698, (pwin_jpg *)&v5[*(_QWORD *)&v662], v665, (unsigned __int16 *)&buf, *(uint64_t *)__dst);
                if (SHIBYTE(v700) < 0)
                  operator delete((void *)buf.n128_u64[0]);
                if ((v536 & 1) != 0)
                {
                  v537 = (char *)operator new(0x88uLL);
                  *((_QWORD *)v537 + 1) = 0;
                  v538 = (unint64_t *)(v537 + 8);
                  *((_QWORD *)v537 + 2) = 0;
                  *(_QWORD *)v537 = &off_1E42E5DF8;
                  *((_QWORD *)v537 + 3) = &off_1E42C3568;
                  *((_QWORD *)v537 + 4) = 0;
                  *((_DWORD *)v537 + 10) = 29;
                  v537[44] = 0;
                  *((_OWORD *)v537 + 3) = 0u;
                  *((_OWORD *)v537 + 4) = 0u;
                  *((_OWORD *)v537 + 5) = 0u;
                  *((_OWORD *)v537 + 6) = 0u;
                  *((_OWORD *)v537 + 7) = 0u;
                  v537[128] = 0;
                  v698.__begin_ = (std::vector<unsigned int>::pointer)(v537 + 24);
                  v698.__end_ = (std::vector<unsigned int>::pointer)v537;
                  buf.n128_u32[0] = 3;
                  buf.n128_u64[1] = (unint64_t)(v537 + 24);
                  v700 = (unint64_t)v537;
                  do
                    v539 = __ldxr(v538);
                  while (__stxr(v539 + 1, v538));
                  karo::media::C3bMaterial::C3bMaterialImage::operator=(*(_QWORD *)&(*v690)[56 * v469 + 8] + 24, (uint64_t)&buf);
                  md::components::Material::~Material((md::components::Material *)&buf);
                  v540 = std::map<karo::media::C3bMaterialClass,std::vector<std::shared_ptr<karo::media::Image>>>::operator[](v681, 3);
                  std::vector<std::shared_ptr<karo::media::Image>>::push_back[abi:nn180100]((uint64_t)v540, (__n128 *)&v698);
                  std::string::basic_string[abi:nn180100]<0>(&buf, "jpg");
                  v541 = karo::media::ImageLoader::loadFromChunk(&v693, (pwin_jpg *)&v5[v661], v664, (unsigned __int16 *)&buf, (uint64_t)v698.__begin_);
                  if (SHIBYTE(v700) < 0)
                    operator delete((void *)buf.n128_u64[0]);
                  if ((v541 & 1) != 0)
                  {
                    std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&v698);
                    std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)__dst);
                    goto LABEL_1153;
                  }
                  if (GEOGetVectorKitVKDefaultLog_onceToken != -1)
                    dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_4_11772);
                  v594 = (id)GEOGetVectorKitVKDefaultLog_log;
                  if (os_log_type_enabled(v594, OS_LOG_TYPE_ERROR))
                  {
                    buf.n128_u16[0] = 0;
                    _os_log_impl(&dword_19F029000, v594, OS_LOG_TYPE_ERROR, "C3M3 failed to load image data for image", (uint8_t *)&buf, 2u);
                  }

                  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&v698);
                }
                else
                {
                  if (GEOGetVectorKitVKDefaultLog_onceToken != -1)
                    dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_4_11772);
                  v593 = (id)GEOGetVectorKitVKDefaultLog_log;
                  if (os_log_type_enabled(v593, OS_LOG_TYPE_ERROR))
                  {
                    buf.n128_u16[0] = 0;
                    _os_log_impl(&dword_19F029000, v593, OS_LOG_TYPE_ERROR, "C3M3 failed to load image data for image", (uint8_t *)&buf, 2u);
                  }

                }
                std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)__dst);
                return 0;
              }
              if (GEOGetVectorKitVKDefaultLog_onceToken != -1)
                dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_4_11772);
              v592 = (id)GEOGetVectorKitVKDefaultLog_log;
              if (os_log_type_enabled(v592, OS_LOG_TYPE_ERROR))
              {
                buf.n128_u16[0] = 0;
                _os_log_impl(&dword_19F029000, v592, OS_LOG_TYPE_ERROR, "C3M3 unsupported image texture extension", (uint8_t *)&buf, 2u);
              }
            }
            else
            {
              if (GEOGetVectorKitVKDefaultLog_onceToken != -1)
                dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_4_11772);
              v592 = (id)GEOGetVectorKitVKDefaultLog_log;
              if (os_log_type_enabled(v592, OS_LOG_TYPE_ERROR))
              {
                buf.n128_u16[0] = 0;
                _os_log_impl(&dword_19F029000, v592, OS_LOG_TYPE_ERROR, "C3M3 unsupported image format", (uint8_t *)&buf, 2u);
              }
            }
LABEL_1196:

            return 0;
          }
          v9 += 3;
          if (v9 > a3)
            return 0;
          v493 = v5[v472];
          v494 = &v475[56 * v469];
          v497 = *((_QWORD *)v494 + 1);
          v495 = v494 + 8;
          v496 = v497;
          v498 = v495 + 8;
          v499 = *((_QWORD *)v495 + 1);
          v500 = 0xAAAAAAAAAAAAAAABLL * ((v499 - v497) >> 3);
          v669 = v493;
          v501 = v493 - v500;
          if (v493 <= v500)
          {
            if (v493 < v500)
            {
              v526 = v496 + 24 * v493;
              while (v499 != v526)
              {
                v527 = *(std::__shared_weak_count **)(v499 - 8);
                if (v527)
                {
                  p_shared_owners = (unint64_t *)&v527->__shared_owners_;
                  do
                    v529 = __ldaxr(p_shared_owners);
                  while (__stlxr(v529 - 1, p_shared_owners));
                  if (!v529)
                  {
                    ((void (*)(std::__shared_weak_count *, unint64_t))v527->__on_zero_shared)(v527, v501);
                    std::__shared_weak_count::__release_weak(v527);
                  }
                }
                v499 -= 24;
              }
              *v498 = v526;
            }
          }
          else
          {
            std::vector<karo::media::C3bMaterial::C3bMaterialImage>::__append((char **)v495, v501);
          }
          if (!(_DWORD)v669)
          {
LABEL_1154:
            if ((unsigned __int8 *)++v469 == v683)
              goto LABEL_1166;
            continue;
          }
          break;
        }
        v543 = 0;
        LODWORD(v666) = v470;
        while (1)
        {
          v544 = v9 + 1;
          if (v9 + 1 <= a3)
            v679 = v5[v9++];
          v545 = v9 + 4;
          if (v9 + 4 <= a3)
          {
            v673 = *(unsigned int *)&v5[v9];
            v545 = v9 + 8;
          }
          v546 = v545 + 4;
          if (v545 > a3)
            v546 = v545;
          if (v546 > a3 || v544 > a3 || v9 + 4 > a3 || v545 > a3)
            return 0;
          v9 = v546;
          v547 = *(unsigned int *)&v687[v546];
          v548 = (pwin_jpg *)&v5[v673];
          if (v679 != 8)
            break;
          v549 = (std::__shared_weak_count *)operator new(0x88uLL);
          v549->__shared_owners_ = 0;
          v550 = (unint64_t *)&v549->__shared_owners_;
          v549->__shared_weak_owners_ = 0;
          v549->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E5DF8;
          v549[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42C3568;
          v549[1].__shared_owners_ = 0;
          LODWORD(v549[1].__shared_weak_owners_) = 29;
          v549[2].std::__shared_count = 0u;
          *(_OWORD *)&v549[2].__shared_weak_owners_ = 0u;
          *(_OWORD *)&v549[3].__shared_owners_ = 0u;
          v549[4].std::__shared_count = 0u;
          *(_OWORD *)&v549[4].__shared_weak_owners_ = 0u;
          LOBYTE(v549[5].__shared_owners_) = 0;
          BYTE4(v549[1].__shared_weak_owners_) = 1;
          *(_DWORD *)__dst = 29;
          HIBYTE(v700) = 0;
          buf.n128_u8[0] = 0;
          karo::media::ImageLoader::loadFromChunk((int *)__dst, v548, (unsigned __int8 *)v547, (unsigned __int16 *)&buf, (uint64_t)&v549[1]);
          do
            v551 = __ldxr(v550);
          while (__stxr(v551 + 1, v550));
          v552 = *(_QWORD *)&(*v690)[56 * v469 + 8] + 24 * v543;
          *(_DWORD *)v552 = 6;
          v553 = *(std::__shared_weak_count **)(v552 + 16);
          *(_QWORD *)(v552 + 8) = v549 + 1;
          *(_QWORD *)(v552 + 16) = v549;
          v470 = v666;
          if (v553)
          {
            v554 = (unint64_t *)&v553->__shared_owners_;
            do
              v555 = __ldaxr(v554);
            while (__stlxr(v555 - 1, v554));
            if (!v555)
            {
              ((void (*)(std::__shared_weak_count *))v553->__on_zero_shared)(v553);
              std::__shared_weak_count::__release_weak(v553);
            }
          }
          do
            v556 = __ldaxr(v550);
          while (__stlxr(v556 - 1, v550));
          if (v556)
            goto LABEL_1077;
          ((void (*)(std::__shared_weak_count *))v549->__on_zero_shared)(v549);
          v557 = v549;
LABEL_1076:
          std::__shared_weak_count::__release_weak(v557);
LABEL_1077:
          if (++v543 == v669)
            goto LABEL_1154;
        }
        v558 = operator new(0x88uLL);
        v559 = v558;
        v558[1] = 0;
        v558[2] = 0;
        v558[3] = &off_1E42C3568;
        *v558 = &off_1E42E5DF8;
        v558[4] = 0;
        *((_DWORD *)v558 + 10) = 29;
        *((_OWORD *)v558 + 3) = 0u;
        *((_OWORD *)v558 + 4) = 0u;
        *((_OWORD *)v558 + 5) = 0u;
        *((_OWORD *)v558 + 6) = 0u;
        *((_OWORD *)v558 + 7) = 0u;
        *((_BYTE *)v558 + 128) = 0;
        *(_QWORD *)__dst = v558 + 3;
        *(_QWORD *)&__dst[8] = v558;
        *((_BYTE *)v558 + 44) = 1;
        if (!v680 || v679)
        {
          HIBYTE(v700) = 0;
          buf.n128_u8[0] = 0;
          karo::media::ImageLoader::loadFromChunk(&v693, v548, (unsigned __int8 *)v547, (unsigned __int16 *)&buf, (uint64_t)(v558 + 3));
          v579 = *(_QWORD *)__dst;
          v470 = v666;
        }
        else
        {
          karo::media::Image::setFormat((uint64_t)(v558 + 3), v693);
          v560 = (std::__shared_weak_count *)operator new(0x30uLL);
          v560->__shared_owners_ = 0;
          v561 = (unint64_t *)&v560->__shared_owners_;
          v560->__shared_weak_owners_ = 0;
          v560->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E42D8;
          v562 = ggl::Data::Data((ggl::Data *)&v560[1], (const unsigned __int8 *)v548, v547);
          do
            v563 = __ldxr(v561);
          while (__stxr(v563 + 1, v561));
          v564 = (std::__shared_weak_count *)v559[7];
          v559[6] = v562;
          v559[7] = v560;
          v470 = v666;
          if (v564)
          {
            v565 = (unint64_t *)&v564->__shared_owners_;
            do
              v566 = __ldaxr(v565);
            while (__stlxr(v566 - 1, v565));
            if (!v566)
            {
              ((void (*)(std::__shared_weak_count *))v564->__on_zero_shared)(v564);
              std::__shared_weak_count::__release_weak(v564);
            }
          }
          do
            v567 = __ldaxr(v561);
          while (__stlxr(v567 - 1, v561));
          if (!v567)
          {
            ((void (*)(std::__shared_weak_count *))v560->__on_zero_shared)(v560);
            std::__shared_weak_count::__release_weak(v560);
          }
          v568 = (uint64_t **)v672;
          while (1)
          {
            v569 = *v568;
            v570 = v568;
            if (!*v568)
              break;
            while (1)
            {
              v568 = (uint64_t **)v569;
              v571 = *((_DWORD *)v569 + 8);
              if (v571 >= 1)
                break;
              if ((v571 & 0x80000000) == 0)
              {
                v572 = v568;
                goto LABEL_1120;
              }
              v569 = v568[1];
              if (!v569)
              {
                v570 = v568 + 1;
                goto LABEL_1117;
              }
            }
          }
LABEL_1117:
          v572 = operator new(0x40uLL);
          v572[8] = 0;
          *((_QWORD *)v572 + 6) = 0;
          *((_QWORD *)v572 + 7) = 0;
          *((_QWORD *)v572 + 5) = 0;
          *(_QWORD *)v572 = 0;
          *((_QWORD *)v572 + 1) = 0;
          *((_QWORD *)v572 + 2) = v568;
          *v570 = (uint64_t *)v572;
          v573 = (uint64_t *)**v681;
          v574 = (uint64_t *)v572;
          if (v573)
          {
            *v681 = v573;
            v574 = *v570;
          }
          std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*((uint64_t **)a4 + 26), v574);
          ++*((_QWORD *)a4 + 27);
LABEL_1120:
          v575 = (__n128 *)*((_QWORD *)v572 + 6);
          if ((unint64_t)v575 >= *((_QWORD *)v572 + 7))
          {
            v578 = std::vector<std::shared_ptr<md::MuninRoadLabel>>::__push_back_slow_path<std::shared_ptr<md::MuninRoadLabel> const&>((uint64_t)(v572 + 10), *(__n128 *)__dst);
            v559 = *(_QWORD **)&__dst[8];
          }
          else
          {
            v575->n128_u64[0] = *(_QWORD *)__dst;
            v559 = *(_QWORD **)&__dst[8];
            v575->n128_u64[1] = *(_QWORD *)&__dst[8];
            if (v559)
            {
              v576 = v559 + 1;
              do
                v577 = __ldxr(v576);
              while (__stxr(v577 + 1, v576));
            }
            v578 = v575 + 1;
          }
          *((_QWORD *)v572 + 6) = v578;
          v579 = *(_QWORD *)__dst;
          if (!v559)
            goto LABEL_1130;
        }
        v580 = v559 + 1;
        do
          v581 = __ldxr(v580);
        while (__stxr(v581 + 1, v580));
LABEL_1130:
        v582 = *(_QWORD *)&(*v690)[56 * v469 + 8] + 24 * v543;
        *(_DWORD *)v582 = 7;
        v583 = *(std::__shared_weak_count **)(v582 + 16);
        *(_QWORD *)(v582 + 8) = v579;
        *(_QWORD *)(v582 + 16) = v559;
        if (v583)
        {
          v584 = (unint64_t *)&v583->__shared_owners_;
          do
            v585 = __ldaxr(v584);
          while (__stlxr(v585 - 1, v584));
          if (!v585)
          {
            ((void (*)(std::__shared_weak_count *))v583->__on_zero_shared)(v583);
            std::__shared_weak_count::__release_weak(v583);
          }
        }
        v586 = *(std::__shared_weak_count **)&__dst[8];
        if (!*(_QWORD *)&__dst[8])
          goto LABEL_1077;
        v587 = (unint64_t *)(*(_QWORD *)&__dst[8] + 8);
        do
          v588 = __ldaxr(v587);
        while (__stlxr(v588 - 1, v587));
        if (v588)
          goto LABEL_1077;
        ((void (*)(std::__shared_weak_count *))v586->__on_zero_shared)(v586);
        v557 = v586;
        goto LABEL_1076;
      case 2u:
        v9 = v11 + 4;
        if (v11 + 4 > a3)
          return 0;
        v32 = *(_DWORD *)&v5[v11];
        std::vector<karo::media::C3mMesh>::reserve((unint64_t *)v677, v32);
        if (!v32)
          goto LABEL_1166;
        v33 = 0;
        v685 = 0;
        v689 = 0;
        while (2)
        {
          if (v9 + 1 > a3)
            return 0;
          v234 = v9 + 3;
          if (v9 + 3 > a3)
            return 0;
          v235 = v5[v9];
          if (v235 == 2)
          {
            v232 = &v5[v234];
            v233 = *(unsigned __int16 *)&v5[v234 - 2];
            memset(v705, 0, 32);
            karo::media::EdgebreakerDecoder::info((karo::media::EdgebreakerDecoder *)&buf, v232);
            karo::media::EdgebreakerDecoder::decode((karo::media::EdgebreakerDecoder *)&buf, v5, a4, v33);
            if (v9 + v233 >= a3)
              v9 = a3;
            else
              v9 += v233;
            karo::media::EdgebreakerDecoder::~EdgebreakerDecoder((karo::media::EdgebreakerDecoder *)&buf);
            goto LABEL_463;
          }
          if (v235 == 1)
          {
            if (v9 + 6 >= a3)
              v240 = a3;
            else
              v240 = v9 + 6;
            if (v9 + 6 < a3)
              v689 = v5[v240++];
            v241 = v240 + 4;
            if (v240 + 4 <= a3)
            {
              LODWORD(v673) = *(_DWORD *)&v5[v240];
              v240 += 4;
            }
            if (v240 + 1 > a3)
              return 0;
            result = 0;
            if (v9 + 6 < a3 && v241 <= a3)
            {
              if (v240 + 9 > a3
                || v240 + 17 > a3
                || v240 + 25 > a3
                || v240 + 33 > a3
                || v240 + 41 > a3
                || v240 + 49 > a3)
              {
                return 0;
              }
              v242 = v240 + 53;
              if (v240 + 53 > a3)
              {
                v243 = v240 + 53;
              }
              else
              {
                v679 = *(_DWORD *)&v687[v242];
                v243 = v240 + 57;
              }
              v9 = v243;
              if (v243 <= a3)
              {
                v682 = *(_DWORD *)&v687[v243];
                v9 = v243 + 4;
              }
              if (v9 > a3)
                return 0;
              result = 0;
              if (v242 <= a3 && v243 <= a3)
              {
                if (v682 + v679 > a3)
                {
                  if (GEOGetVectorKitVKDefaultLog_onceToken != -1)
                    dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_4_11772);
                  v245 = (id)GEOGetVectorKitVKDefaultLog_log;
                  if (os_log_type_enabled(v245, OS_LOG_TYPE_ERROR))
                  {
                    buf.n128_u16[0] = 0;
                    _os_log_impl(&dword_19F029000, v245, OS_LOG_TYPE_ERROR, "C3M3 mesh data block too short", (uint8_t *)&buf, 2u);
                  }
                  goto LABEL_521;
                }
                v246 = v5[v240];
                v247 = *(double *)&v5[v240 + 1];
                v248 = *(double *)&v5[v240 + 9];
                v249 = *(double *)&v5[v240 + 17];
                v250 = *(double *)&v5[v240 + 25];
                v251 = *(double *)&v5[v240 + 33];
                v252 = *(double *)&v5[v240 + 41];
                v253 = *(unsigned int *)&v687[v9];
                if ((_DWORD)v253)
                {
                  v254 = operator new(*(unsigned int *)&v687[v9]);
                  bzero(v254, v253);
                }
                else
                {
                  v254 = 0;
                }
                if ((_DWORD)v253 == v682)
                {
                  memcpy(v254, &v5[v679], v253);
                }
                else
                {
                  v263 = *((unsigned __int8 *)a4 + 3);
                  v264 = v263 > 3 || v263 == 3 && *((_BYTE *)a4 + 4) != 0;
                  {
                    if (GEOGetVectorKitVKDefaultLog_onceToken != -1)
                      dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_4_11772);
                    v275 = (id)GEOGetVectorKitVKDefaultLog_log;
                    if (os_log_type_enabled(v275, OS_LOG_TYPE_ERROR))
                    {
                      buf.n128_u16[0] = 0;
                      _os_log_impl(&dword_19F029000, v275, OS_LOG_TYPE_ERROR, "C3M3 LZMA mesh decode failed", (uint8_t *)&buf, 2u);
                    }
                    goto LABEL_600;
                  }
                }
                v703 = 0;
                v704 = 0.0;
                v700 = 0;
                v701 = 0.0;
                buf.n128_u64[1] = 0;
                memset(&v705[8], 0, 32);
                v706 = 0;
                v707 = -1;
                buf.n128_u8[0] = v689;
                buf.n128_u32[1] = v33;
                LODWORD(v702) = v673;
                if (*((unsigned __int8 *)a4 + 4) <= 1u && !v689)
                {
                  v268 = *((_QWORD *)a4 + 26);
                  if (v268)
                  {
                    v269 = v672;
                    do
                    {
                      v270 = *(_DWORD *)(v268 + 32);
                      v271 = v270 < 5;
                      if (v270 >= 5)
                        v272 = (uint64_t *)v268;
                      else
                        v272 = (uint64_t *)(v268 + 8);
                      if (!v271)
                        v269 = (int *)v268;
                      v268 = *v272;
                    }
                    while (*v272);
                    if (v269 != v672 && v269[8] <= 5)
                      buf.n128_u8[0] = 4;
                  }
                }
                if (v253 <= 5)
                {
                  if (GEOGetVectorKitVKDefaultLog_onceToken != -1)
                    dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_4_11772);
                  v273 = (id)GEOGetVectorKitVKDefaultLog_log;
                  if (os_log_type_enabled(v273, OS_LOG_TYPE_ERROR))
                  {
                    *(_WORD *)__dst = 0;
                    _os_log_impl(&dword_19F029000, v273, OS_LOG_TYPE_ERROR, "C3M3 uncompressed mesh header data block too short", __dst, 2u);
                  }
                  goto LABEL_634;
                }
                v274 = *(unsigned int *)(v254 + 1);
                if ((-1431655765 * v274) >= 0x55555556)
                {
                  if (GEOGetVectorKitVKDefaultLog_onceToken != -1)
                    dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_4_11772);
                  v273 = (id)GEOGetVectorKitVKDefaultLog_log;
                  if (os_log_type_enabled(v273, OS_LOG_TYPE_ERROR))
                  {
                    *(_WORD *)__dst = 0;
                    _os_log_impl(&dword_19F029000, v273, OS_LOG_TYPE_ERROR, "C3M3 index list not a multiple of 3", __dst, 2u);
                  }
                  goto LABEL_634;
                }
                v278 = *v254;
                std::make_shared[abi:nn180100]<ggl::VertexDataTyped<ggl::CommonMesh::BufferPos4UV>,char const(&)[10],unsigned short const&,ggl::BufferUsage,void>((uint64_t *)&v698, *v254, 7);
                v666 = v278;
                ggl::DataWrite<ggl::CommonMesh::BufferPos4UV>::DataWrite((uint64_t *)__dst, (uint64_t)v698.__begin_, 0, v278);
                std::shared_ptr<ggl::VertexData>::operator=[abi:nn180100]<ggl::VertexDataTyped<ggl::CommonMesh::BufferPos4UV>,void>(&v703, (uint64_t)v698.__begin_, (uint64_t)v698.__end_);
                *(_DWORD *)v705 = v278;
                v668 = v9;
                v281 = v278;
                if (v246 == 2)
                {
                  if ((2 * v274) + 6 * (unint64_t)v278 + 6 <= v253)
                  {
                    if (v278)
                    {
                      v325 = (float *)&v696[1] + 1;
                      v326 = 6;
                      v327 = v278;
                      while (1)
                      {
                        v328 = v326 + 2;
                        if (v326 + 2 > v253)
                        {
                          v330 = v326 + 2;
                          v329 = (int)v665;
                        }
                        else
                        {
                          v329 = *(unsigned __int16 *)((char *)v254 + v326);
                          v330 = v326 + 4;
                          v326 += 2;
                        }
                        LODWORD(v665) = v329;
                        if (v330 > v253)
                          goto LABEL_863;
                        v277 = 1;
                        if (v328 > v253)
                          goto LABEL_864;
                        v331 = v330 + 2;
                        if (v330 + 2 > v253)
                          goto LABEL_864;
                        v332 = *(unsigned __int16 *)((char *)v254 + v326);
                        v333 = *(unsigned __int16 *)((char *)v254 + v330);
                        v334 = v250 + v247 * (double)(v333 >> 6);
                        v335 = v251 + v248 * (double)(((v332 | (v333 << 16)) >> 12) & 0x3FF);
                        v336 = v252 + v249 * (double)((v332 >> 2) & 0x3FF);
                        *(v325 - 3) = v334;
                        *(v325 - 2) = v335;
                        *(v325 - 1) = v336;
                        *v325 = 1.0;
                        v325[1] = (float)(((v329 & 0xFE00 | (v332 << 16)) >> 9) & 0x1FF) * 0.0019569;
                        v325[2] = (float)(v329 & 0x1FF) * 0.0019569;
                        v325 += 8;
                        v326 = v331;
                        if (!--v327)
                          goto LABEL_802;
                      }
                    }
                    v331 = 6;
LABEL_802:
                    std::vector<unsigned short>::reserve((uint64_t)&v705[24], v274);
                    if ((_DWORD)v274)
                    {
                      while (1)
                      {
                        v415 = v331 + 2;
                        if (v331 + 2 > v253)
                          goto LABEL_863;
                        v416 = *(unsigned __int16 *)((char *)v254 + v331);
                        if (v416 < v281)
                        {
                          std::vector<unsigned short>::push_back[abi:nn180100]((uint64_t)&v705[24], v416);
                        }
                        else
                        {
                          if (GEOGetVectorKitVKDefaultLog_onceToken != -1)
                            dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_4_11772);
                          v417 = (id)GEOGetVectorKitVKDefaultLog_log;
                          if (os_log_type_enabled(v417, OS_LOG_TYPE_ERROR))
                          {
                            LOWORD(v697.__begin_) = 0;
                            _os_log_impl(&dword_19F029000, v417, OS_LOG_TYPE_ERROR, "C3M3 index out of bounds", (uint8_t *)&v697, 2u);
                          }

                        }
                        v331 = v415;
                        if (!--v274)
                          goto LABEL_851;
                      }
                    }
                    goto LABEL_851;
                  }
                  if (GEOGetVectorKitVKDefaultLog_onceToken != -1)
                    dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_4_11772);
                  v282 = (id)GEOGetVectorKitVKDefaultLog_log;
                  if (!os_log_type_enabled(v282, OS_LOG_TYPE_ERROR))
                    goto LABEL_670;
                }
                else if (v246 == 1)
                {
                  if ((2 * v274) + 5 * (unint64_t)v278 + 6 <= v253)
                  {
                    if (v278)
                    {
                      v293 = 0;
                      v294 = v254 + 3;
                      v295 = (float *)&v696[1];
                      v296 = (char *)v254 + 9;
                      v297 = 11;
                      while (1)
                      {
                        v298 = v293;
                        if (v293 + 7 > v253)
                          goto LABEL_863;
                        v277 = 1;
                        if (v293 + 8 >= v253)
                          goto LABEL_864;
                        v299 = v297;
                        v300 = v296;
                        v301 = v250 + v247 * (double)*((unsigned __int8 *)v294 + v293);
                        LOBYTE(v279) = *((_BYTE *)v294 + v293 + 1);
                        v279 = v251 + v248 * (double)*(unint64_t *)&v279;
                        *(float *)&v279 = v279;
                        LOBYTE(v280) = *((_BYTE *)v294 + v293 + 2);
                        v280 = v252 + v249 * (double)*(unint64_t *)&v280;
                        *(float *)&v280 = v280;
                        *(v295 - 2) = v301;
                        *(v295 - 1) = *(float *)&v279;
                        v293 += 3;
                        *v295 = *(float *)&v280;
                        v295[1] = 1.0;
                        v295 += 8;
                        v297 += 3;
                        v296 += 3;
                        if (3 * v278 == v298 + 3)
                        {
                          v302 = v298 + 9;
                          v303 = v298 + 8;
                          v304 = v696;
                          v305 = (v253 + 1 - (v298 + 9)) >> 1;
                          v306 = v278 - 1;
                          v307 = v298 + 11;
                          if (v298 + 11 <= v253 + 1)
                            v307 = v253 + 1;
                          v308 = (v307 - v303 - 2) >> 1;
                          if (v308 < v305)
                            v305 = v308;
                          if (v306 < v305)
                            v305 = v278 - 1;
                          if (v305 > 0xF
                            && (&v696[2] < (int32x2_t *)((char *)&v254[v305 + 1] + v303 + 1)
                              ? (v309 = (int32x2_t *)((char *)v254 + v303 + 1) >= &v696[4 * v305 + 3])
                              : (v309 = 1),
                                v309))
                          {
                            v310 = v305 + 1;
                            v311 = (v305 + 1) & 0xF;
                            v312 = 16;
                            if (v311)
                              v312 = v311;
                            v313 = v310 - v312;
                            if (v299 <= v253 + 1)
                              v299 = v253 + 1;
                            v314 = (v299 - v298 - 10) >> 1;
                            if ((v253 - v298 - 8) >> 1 < v314)
                              v314 = (v253 - v298 - 8) >> 1;
                            if (v314 >= v306)
                              v314 = v278 - 1;
                            v315 = ~v314 + v312;
                            v316 = v696;
                            do
                            {
                              v714 = vld2q_s8(v300);
                              v300 += 32;
                              v317 = (float32x4_t)vdupq_n_s32(0x3B808081u);
                              v318 = (int8x16_t)vmulq_f32(vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v714.val[0], (int8x16_t)xmmword_19FFB3760)), v317);
                              v319 = (int8x16_t)vmulq_f32(vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v714.val[0], (int8x16_t)xmmword_19FFB3770)), v317);
                              v320 = (int8x16_t)vmulq_f32(vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v714.val[0], (int8x16_t)xmmword_19FFB3780)), v317);
                              v321 = (int8x16_t)vmulq_f32(vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v714.val[0], (int8x16_t)xmmword_19FFB3790)), v317);
                              v714.val[0] = (int8x16_t)vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v714.val[1], (int8x16_t)xmmword_19FFB3790));
                              v322 = (int8x16_t)vmulq_f32(vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v714.val[1], (int8x16_t)xmmword_19FFB3760)), v317);
                              v323 = (int8x16_t)vmulq_f32(vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v714.val[1], (int8x16_t)xmmword_19FFB3770)), v317);
                              v714.val[1] = (int8x16_t)vmulq_f32(vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v714.val[1], (int8x16_t)xmmword_19FFB3780)), v317);
                              v714.val[0] = (int8x16_t)vmulq_f32((float32x4_t)v714.val[0], v317);
                              v316[2] = vzip1_s32(*(int32x2_t *)v321.i8, *(int32x2_t *)v714.val[0].i8);
                              v316[18] = vzip1_s32(*(int32x2_t *)v320.i8, *(int32x2_t *)v714.val[1].i8);
                              v316[34] = vzip1_s32(*(int32x2_t *)v319.i8, *(int32x2_t *)v323.i8);
                              v316[50] = vzip1_s32(*(int32x2_t *)v318.i8, *(int32x2_t *)v322.i8);
                              v316[6] = vzip2_s32(*(int32x2_t *)v321.i8, *(int32x2_t *)v714.val[0].i8);
                              v714.val[0].i64[0] = vextq_s8(v714.val[0], v714.val[0], 8uLL).u64[0];
                              v324 = (int32x2_t)vextq_s8(v321, v321, 8uLL).u64[0];
                              v316[10] = vzip1_s32(v324, *(int32x2_t *)v714.val[0].i8);
                              v316[14] = vzip2_s32(v324, *(int32x2_t *)v714.val[0].i8);
                              v316[22] = vzip2_s32(*(int32x2_t *)v320.i8, *(int32x2_t *)v714.val[1].i8);
                              v714.val[0].i64[0] = vextq_s8(v714.val[1], v714.val[1], 8uLL).u64[0];
                              v714.val[1].i64[0] = vextq_s8(v320, v320, 8uLL).u64[0];
                              v316[26] = vzip1_s32(*(int32x2_t *)v714.val[1].i8, *(int32x2_t *)v714.val[0].i8);
                              v316[30] = vzip2_s32(*(int32x2_t *)v714.val[1].i8, *(int32x2_t *)v714.val[0].i8);
                              v316[38] = vzip2_s32(*(int32x2_t *)v319.i8, *(int32x2_t *)v323.i8);
                              v714.val[0].i64[0] = vextq_s8(v323, v323, 8uLL).u64[0];
                              v714.val[1].i64[0] = vextq_s8(v319, v319, 8uLL).u64[0];
                              v316[42] = vzip1_s32(*(int32x2_t *)v714.val[1].i8, *(int32x2_t *)v714.val[0].i8);
                              v316[46] = vzip2_s32(*(int32x2_t *)v714.val[1].i8, *(int32x2_t *)v714.val[0].i8);
                              v316[54] = vzip2_s32(*(int32x2_t *)v318.i8, *(int32x2_t *)v322.i8);
                              v714.val[0].i64[0] = vextq_s8(v322, v322, 8uLL).u64[0];
                              v318.i64[0] = vextq_s8(v318, v318, 8uLL).u64[0];
                              v316[58] = vzip1_s32(*(int32x2_t *)v318.i8, *(int32x2_t *)v714.val[0].i8);
                              v316[62] = vzip2_s32(*(int32x2_t *)v318.i8, *(int32x2_t *)v714.val[0].i8);
                              v316 += 64;
                              v315 += 16;
                            }
                            while (v315);
                            v302 += 2 * v313;
                          }
                          else
                          {
                            v313 = 0;
                          }
                          v436 = (float32x2_t *)&v304[4 * v313 + 2];
                          v437 = v278 - v313;
                          v438 = ((v253 - v298 - 8) >> 1) - v313;
                          while (v438)
                          {
                            v411 = v302 + 2;
                            if (v302 + 2 > v253)
                              break;
                            v439 = (unsigned __int8 *)v254 + v302;
                            v440.i32[0] = *v439;
                            v440.i32[1] = v439[1];
                            *v436 = vmul_f32(vcvt_f32_u32(v440), (float32x2_t)vdup_n_s32(0x3B808081u));
                            v436 += 4;
                            --v438;
                            v302 = v411;
                            if (!--v437)
                              goto LABEL_790;
                          }
                          goto LABEL_863;
                        }
                      }
                    }
                    v411 = 6;
LABEL_790:
                    std::vector<unsigned short>::reserve((uint64_t)&v705[24], v274);
                    if ((_DWORD)v274)
                    {
                      while (1)
                      {
                        v412 = v411 + 2;
                        if (v411 + 2 > v253)
                          goto LABEL_863;
                        v413 = *(unsigned __int16 *)((char *)v254 + v411);
                        if (v413 < v281)
                        {
                          std::vector<unsigned short>::push_back[abi:nn180100]((uint64_t)&v705[24], v413);
                        }
                        else
                        {
                          if (GEOGetVectorKitVKDefaultLog_onceToken != -1)
                            dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_4_11772);
                          v414 = (id)GEOGetVectorKitVKDefaultLog_log;
                          if (os_log_type_enabled(v414, OS_LOG_TYPE_ERROR))
                          {
                            LOWORD(v697.__begin_) = 0;
                            _os_log_impl(&dword_19F029000, v414, OS_LOG_TYPE_ERROR, "C3M3 index out of bounds", (uint8_t *)&v697, 2u);
                          }

                        }
                        v411 = v412;
                        if (!--v274)
                          goto LABEL_851;
                      }
                    }
                    goto LABEL_851;
                  }
                  if (GEOGetVectorKitVKDefaultLog_onceToken != -1)
                    dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_4_11772);
                  v282 = (id)GEOGetVectorKitVKDefaultLog_log;
                  if (!os_log_type_enabled(v282, OS_LOG_TYPE_ERROR))
                    goto LABEL_670;
                }
                else
                {
                  if (v246)
                    goto LABEL_851;
                  if ((2 * v274) + 10 * (unint64_t)v278 + 6 <= v253)
                  {
                    if (v278)
                    {
                      v337 = v696 + 1;
                      v338 = v278;
                      v339 = 6;
                      v340 = v661;
                      do
                      {
                        if (v339 + 2 > v253)
                        {
                          v341 = v339 + 2;
                          v342 = v339;
                        }
                        else
                        {
                          v340 = *(unsigned __int16 *)((char *)v254 + v339);
                          v341 = v339 + 4;
                          v342 = v339 + 2;
                        }
                        if (v341 > v253)
                        {
                          LODWORD(v661) = v340;
                          goto LABEL_863;
                        }
                        v277 = 1;
                        if (v339 + 2 > v253 || (v339 = v341 + 2, v341 + 2 > v253))
                        {
                          LODWORD(v661) = v340;
                          goto LABEL_864;
                        }
                        v343 = v250 + v247 * (double)(unsigned __int16)v340;
                        LOWORD(v279) = *(_WORD *)((char *)v254 + v342);
                        v279 = v251 + v248 * (double)*(unint64_t *)&v279;
                        *(float *)&v279 = v279;
                        LOWORD(v280) = *(_WORD *)((char *)v254 + v341);
                        v280 = v252 + v249 * (double)*(unint64_t *)&v280;
                        *(float *)v337[-1].i32 = v343;
                        v337[-1].i32[1] = LODWORD(v279);
                        v344 = v280;
                        *(float *)v337->i32 = v344;
                        v337->i32[1] = 1065353216;
                        v337 += 4;
                        --v338;
                      }
                      while (v338);
                      LODWORD(v661) = v340;
                      v345 = v696;
                      v346 = v341 + 4;
                      if (v341 + 4 <= v253 + 1)
                        v346 = v253 + 1;
                      v347 = (v346 + ~v341) >> 2;
                      if (v341 + 6 <= v253 + 1)
                        v348 = v253 + 1;
                      else
                        v348 = v341 + 6;
                      v349 = (v348 - v341 - 3) >> 2;
                      if (v347 >= v349)
                        v347 = v349;
                      if ((unint64_t)v278 - 1 >= v347)
                        v350 = v347;
                      else
                        v350 = v278 - 1;
                      if (v350 > 7)
                      {
                        v446 = 8;
                        if (((v350 + 1) & 7) != 0)
                          v446 = (v350 + 1) & 7;
                        v351 = v350 + 1 - v446;
                        v447 = ~v350 + v446;
                        v448 = (_WORD *)((char *)v254 + v341 + 2);
                        v449 = v696 + 18;
                        do
                        {
                          v712 = vld2q_s16(v448);
                          v448 += 16;
                          v450 = (float32x4_t)vdupq_n_s32(0x37800080u);
                          v451 = (int8x16_t)vmulq_f32(vcvtq_f32_u32(vmovl_high_u16((uint16x8_t)v712.val[0])), v450);
                          v452 = (int8x16_t)vmulq_f32(vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v712.val[0].i8)), v450);
                          v712.val[0] = (int16x8_t)vmulq_f32(vcvtq_f32_u32(vmovl_high_u16((uint16x8_t)v712.val[1])), v450);
                          v712.val[1] = (int16x8_t)vmulq_f32(vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v712.val[1].i8)), v450);
                          v449[-16] = vzip1_s32(*(int32x2_t *)v452.i8, *(int32x2_t *)v712.val[1].i8);
                          *v449 = vzip1_s32(*(int32x2_t *)v451.i8, *(int32x2_t *)v712.val[0].i8);
                          v449[-12] = vzip2_s32(*(int32x2_t *)v452.i8, *(int32x2_t *)v712.val[1].i8);
                          v712.val[1].i64[0] = vextq_s8((int8x16_t)v712.val[1], (int8x16_t)v712.val[1], 8uLL).u64[0];
                          v452.i64[0] = vextq_s8(v452, v452, 8uLL).u64[0];
                          v449[-8] = vzip1_s32(*(int32x2_t *)v452.i8, *(int32x2_t *)v712.val[1].i8);
                          v449[-4] = vzip2_s32(*(int32x2_t *)v452.i8, *(int32x2_t *)v712.val[1].i8);
                          v449[4] = vzip2_s32(*(int32x2_t *)v451.i8, *(int32x2_t *)v712.val[0].i8);
                          v712.val[0].i64[0] = vextq_s8((int8x16_t)v712.val[0], (int8x16_t)v712.val[0], 8uLL).u64[0];
                          v712.val[1].i64[0] = vextq_s8(v451, v451, 8uLL).u64[0];
                          v449[8] = vzip1_s32(*(int32x2_t *)v712.val[1].i8, *(int32x2_t *)v712.val[0].i8);
                          v449[12] = vzip2_s32(*(int32x2_t *)v712.val[1].i8, *(int32x2_t *)v712.val[0].i8);
                          v449 += 32;
                          v447 += 8;
                        }
                        while (v447);
                        v339 += 4 * v351;
                      }
                      else
                      {
                        v351 = 0;
                      }
                      v453 = v278 - v351;
                      v454 = (float32x2_t *)&v345[4 * v351 + 2];
                      while (v339 + 2 <= v253)
                      {
                        v418 = v339 + 4;
                        if (v339 + 4 > v253)
                          break;
                        v455 = (_WORD *)((char *)v254 + v339);
                        v456.i32[0] = *v455;
                        v456.i32[1] = v455[1];
                        *v454 = vmul_f32(vcvt_f32_u32(v456), (float32x2_t)vdup_n_s32(0x37800080u));
                        v454 += 4;
                        v339 = v418;
                        if (!--v453)
                          goto LABEL_814;
                      }
                      goto LABEL_863;
                    }
                    v418 = 6;
LABEL_814:
                    std::vector<unsigned short>::reserve((uint64_t)&v705[24], v274);
                    if ((_DWORD)v274)
                    {
                      while (1)
                      {
                        v419 = v418 + 2;
                        if (v418 + 2 > v253)
                          goto LABEL_863;
                        v420 = *(unsigned __int16 *)((char *)v254 + v418);
                        if (v420 < v281)
                        {
                          std::vector<unsigned short>::push_back[abi:nn180100]((uint64_t)&v705[24], v420);
                        }
                        else
                        {
                          if (GEOGetVectorKitVKDefaultLog_onceToken != -1)
                            dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_4_11772);
                          v421 = (id)GEOGetVectorKitVKDefaultLog_log;
                          if (os_log_type_enabled(v421, OS_LOG_TYPE_ERROR))
                          {
                            LOWORD(v697.__begin_) = 0;
                            _os_log_impl(&dword_19F029000, v421, OS_LOG_TYPE_ERROR, "C3M3 index out of bounds", (uint8_t *)&v697, 2u);
                          }

                        }
                        v418 = v419;
                        if (!--v274)
                          goto LABEL_851;
                      }
                    }
                    goto LABEL_851;
                  }
                  if (GEOGetVectorKitVKDefaultLog_onceToken != -1)
                    dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_4_11772);
                  v282 = (id)GEOGetVectorKitVKDefaultLog_log;
                  if (!os_log_type_enabled(v282, OS_LOG_TYPE_ERROR))
                    goto LABEL_670;
                }
                LOWORD(v697.__begin_) = 0;
                _os_log_impl(&dword_19F029000, v282, OS_LOG_TYPE_ERROR, "C3M3 uncompressed mesh body data block too short", (uint8_t *)&v697, 2u);
                goto LABEL_670;
              }
            }
          }
          else
          {
            if (v5[v9])
            {
              if (GEOGetVectorKitVKDefaultLog_onceToken != -1)
                dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_4_11772);
              v244 = (id)GEOGetVectorKitVKDefaultLog_log;
              if (os_log_type_enabled(v244, OS_LOG_TYPE_ERROR))
              {
                buf.n128_u16[0] = 0;
                _os_log_impl(&dword_19F029000, v244, OS_LOG_TYPE_ERROR, "C3M3 Unknown submesh type.", (uint8_t *)&buf, 2u);
              }

              v9 += 3;
              goto LABEL_463;
            }
            if (v9 + 4 >= a3)
              v236 = a3;
            else
              v236 = v9 + 4;
            if (v9 + 4 < a3)
              LODWORD(__len) = v5[v236++];
            v237 = v236 + 4;
            if (v236 + 4 <= a3)
            {
              v685 = *(unsigned int *)&v5[v236];
              v236 += 4;
            }
            if (v236 + 1 > a3)
              return 0;
            result = 0;
            if (v9 + 4 < a3 && v237 <= a3)
            {
              if (v236 + 9 > a3
                || v236 + 17 > a3
                || v236 + 25 > a3
                || v236 + 33 > a3
                || v236 + 41 > a3
                || v236 + 49 > a3)
              {
                return 0;
              }
              v238 = v236 + 53;
              if (v236 + 53 > a3)
              {
                v239 = v236 + 53;
              }
              else
              {
                v680 = *(_DWORD *)&v687[v238];
                v239 = v236 + 57;
              }
              v9 = v239;
              if (v239 <= a3)
              {
                LODWORD(v683) = *(_DWORD *)&v687[v239];
                v9 = v239 + 4;
              }
              if (v9 > a3)
                return 0;
              result = 0;
              if (v238 <= a3 && v239 <= a3)
              {
                if (v683 + v680 > a3)
                {
                  if (GEOGetVectorKitVKDefaultLog_onceToken != -1)
                    dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_4_11772);
                  v245 = (id)GEOGetVectorKitVKDefaultLog_log;
                  if (os_log_type_enabled(v245, OS_LOG_TYPE_ERROR))
                  {
                    buf.n128_u16[0] = 0;
                    _os_log_impl(&dword_19F029000, v245, OS_LOG_TYPE_ERROR, "C3M3 mesh data block too short", (uint8_t *)&buf, 2u);
                  }
LABEL_521:

                  goto LABEL_463;
                }
                v255 = v5[v236];
                v256 = *(double *)&v5[v236 + 1];
                v257 = *(double *)&v5[v236 + 9];
                v258 = *(double *)&v5[v236 + 17];
                v259 = *(double *)&v5[v236 + 25];
                v260 = *(double *)&v5[v236 + 33];
                v261 = *(double *)&v5[v236 + 41];
                v262 = *(unsigned int *)&v687[v9];
                if ((_DWORD)v262)
                {
                  v254 = operator new(*(unsigned int *)&v687[v9]);
                  bzero(v254, v262);
                }
                else
                {
                  v254 = 0;
                }
                if ((_DWORD)v262 == (_DWORD)v683)
                {
                  memcpy(v254, &v5[v680], v262);
                  goto LABEL_592;
                }
                v265 = *((unsigned __int8 *)a4 + 3);
                v266 = v265 > 3 || v265 == 3 && *((_BYTE *)a4 + 4) != 0;
                {
LABEL_592:
                  v703 = 0;
                  v704 = 0.0;
                  v700 = 0;
                  v701 = 0.0;
                  buf.n128_u64[1] = 0;
                  memset(&v705[8], 0, 32);
                  v706 = 0;
                  v707 = -1;
                  buf.n128_u8[0] = __len;
                  buf.n128_u32[1] = v33;
                  LODWORD(v702) = v685;
                  if (*((unsigned __int8 *)a4 + 4) > 1u)
                    goto LABEL_623;
                  if (__len == 2)
                  {
                    v283 = *(_QWORD *)v672;
                    if (*(_QWORD *)v672)
                    {
                      v284 = v672;
                      do
                      {
                        v285 = *(_DWORD *)(v283 + 32);
                        v286 = v285 < 3;
                        if (v285 >= 3)
                          v287 = (uint64_t *)v283;
                        else
                          v287 = (uint64_t *)(v283 + 8);
                        if (!v286)
                          v284 = (int *)v283;
                        v283 = *v287;
                      }
                      while (*v287);
                      if (v284 != v672 && v284[8] <= 3)
                      {
                        buf.n128_u8[0] = 5;
                        goto LABEL_623;
                      }
                    }
                    if (*((_QWORD *)a4 + 27) > v685)
                    {
                      buf.n128_u8[0] = 0;
                      goto LABEL_623;
                    }
                  }
                  else if ((_BYTE)__len)
                  {
LABEL_623:
                    if (v262 <= 5)
                    {
                      if (GEOGetVectorKitVKDefaultLog_onceToken != -1)
                        dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_4_11772);
                      v273 = (id)GEOGetVectorKitVKDefaultLog_log;
                      if (os_log_type_enabled(v273, OS_LOG_TYPE_ERROR))
                      {
                        *(_WORD *)__dst = 0;
                        _os_log_impl(&dword_19F029000, v273, OS_LOG_TYPE_ERROR, "C3M3 uncompressed mesh header data block too short", __dst, 2u);
                      }
LABEL_634:

                      v277 = 4;
LABEL_635:
                      karo::media::C3mMesh::~C3mMesh((karo::media::C3mMesh *)&buf);
LABEL_636:
                      if (v254)
                        operator delete(v254);
                      if (v277 && v277 != 4)
                        return 0;
LABEL_463:
                      if (++v33 == v32)
                        goto LABEL_1166;
                      continue;
                    }
                    v288 = *(unsigned int *)(v254 + 1);
                    if ((-1431655765 * v288) >= 0x55555556)
                    {
                      if (GEOGetVectorKitVKDefaultLog_onceToken != -1)
                        dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_4_11772);
                      v273 = (id)GEOGetVectorKitVKDefaultLog_log;
                      if (os_log_type_enabled(v273, OS_LOG_TYPE_ERROR))
                      {
                        *(_WORD *)__dst = 0;
                        _os_log_impl(&dword_19F029000, v273, OS_LOG_TYPE_ERROR, "C3M3 index list not a multiple of 3", __dst, 2u);
                      }
                      goto LABEL_634;
                    }
                    v289 = *v254;
                    std::make_shared[abi:nn180100]<ggl::VertexDataTyped<ggl::CommonMesh::BufferPos4UV>,char const(&)[10],unsigned short const&,ggl::BufferUsage,void>((uint64_t *)&v698, *v254, 7);
                    v666 = v289;
                    ggl::DataWrite<ggl::CommonMesh::BufferPos4UV>::DataWrite((uint64_t *)__dst, (uint64_t)v698.__begin_, 0, v289);
                    std::shared_ptr<ggl::VertexData>::operator=[abi:nn180100]<ggl::VertexDataTyped<ggl::CommonMesh::BufferPos4UV>,void>(&v703, (uint64_t)v698.__begin_, (uint64_t)v698.__end_);
                    *(_DWORD *)v705 = v289;
                    v668 = v9;
                    v292 = v289;
                    if (v255 == 2)
                    {
                      if ((2 * v288) + 6 * (unint64_t)v289 + 6 <= v262)
                      {
                        if (v289)
                        {
                          v384 = (float *)&v696[1] + 1;
                          v385 = 6;
                          v386 = v289;
                          while (1)
                          {
                            v387 = v385 + 2;
                            if (v385 + 2 > v262)
                            {
                              v389 = v385 + 2;
                              v388 = (int)v664;
                            }
                            else
                            {
                              v388 = *(unsigned __int16 *)((char *)v254 + v385);
                              v389 = v385 + 4;
                              v385 += 2;
                            }
                            LODWORD(v664) = v388;
                            if (v389 > v262)
                              goto LABEL_863;
                            v277 = 1;
                            if (v387 > v262)
                              goto LABEL_864;
                            v390 = v389 + 2;
                            if (v389 + 2 > v262)
                              goto LABEL_864;
                            v391 = *(unsigned __int16 *)((char *)v254 + v385);
                            v392 = *(unsigned __int16 *)((char *)v254 + v389);
                            v393 = v259 + v256 * (double)(v392 >> 6);
                            v394 = v260 + v257 * (double)(((v391 | (v392 << 16)) >> 12) & 0x3FF);
                            v395 = v261 + v258 * (double)((v391 >> 2) & 0x3FF);
                            *(v384 - 3) = v393;
                            *(v384 - 2) = v394;
                            *(v384 - 1) = v395;
                            *v384 = 1.0;
                            v384[1] = (float)(((v388 & 0xFE00 | (v391 << 16)) >> 9) & 0x1FF) * 0.0019569;
                            v384[2] = (float)(v388 & 0x1FF) * 0.0019569;
                            v384 += 8;
                            v385 = v390;
                            if (!--v386)
                              goto LABEL_838;
                          }
                        }
                        v390 = 6;
LABEL_838:
                        std::vector<unsigned short>::reserve((uint64_t)&v705[24], v288);
                        if ((_DWORD)v288)
                        {
                          while (1)
                          {
                            v426 = v390 + 2;
                            if (v390 + 2 > v262)
                              goto LABEL_863;
                            v427 = *(unsigned __int16 *)((char *)v254 + v390);
                            if (v427 < v292)
                            {
                              std::vector<unsigned short>::push_back[abi:nn180100]((uint64_t)&v705[24], v427);
                            }
                            else
                            {
                              if (GEOGetVectorKitVKDefaultLog_onceToken != -1)
                                dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_4_11772);
                              v428 = (id)GEOGetVectorKitVKDefaultLog_log;
                              if (os_log_type_enabled(v428, OS_LOG_TYPE_ERROR))
                              {
                                LOWORD(v697.__begin_) = 0;
                                _os_log_impl(&dword_19F029000, v428, OS_LOG_TYPE_ERROR, "C3M3 index out of bounds", (uint8_t *)&v697, 2u);
                              }

                            }
                            v390 = v426;
                            if (!--v288)
                              goto LABEL_851;
                          }
                        }
                        goto LABEL_851;
                      }
                      if (GEOGetVectorKitVKDefaultLog_onceToken != -1)
                        dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_4_11772);
                      v282 = (id)GEOGetVectorKitVKDefaultLog_log;
                      if (!os_log_type_enabled(v282, OS_LOG_TYPE_ERROR))
                        goto LABEL_670;
                    }
                    else
                    {
                      if (v255 != 1)
                      {
                        if (!v255)
                        {
                          if ((2 * v288) + 10 * (unint64_t)v289 + 6 > v262)
                          {
                            if (GEOGetVectorKitVKDefaultLog_onceToken != -1)
                              dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_4_11772);
                            v282 = (id)GEOGetVectorKitVKDefaultLog_log;
                            if (!os_log_type_enabled(v282, OS_LOG_TYPE_ERROR))
                              goto LABEL_670;
                            goto LABEL_669;
                          }
                          if (v289)
                          {
                            v396 = v696 + 1;
                            v397 = v289;
                            v398 = 6;
                            v399 = LODWORD(v662);
                            do
                            {
                              if (v398 + 2 > v262)
                              {
                                v400 = v398 + 2;
                                v401 = v398;
                              }
                              else
                              {
                                v399 = *(unsigned __int16 *)((char *)v254 + v398);
                                v400 = v398 + 4;
                                v401 = v398 + 2;
                              }
                              if (v400 > v262)
                              {
                                LODWORD(v662) = v399;
                                goto LABEL_863;
                              }
                              v277 = 1;
                              if (v398 + 2 > v262 || (v398 = v400 + 2, v400 + 2 > v262))
                              {
                                LODWORD(v662) = v399;
                                goto LABEL_864;
                              }
                              v402 = v259 + v256 * (double)(unsigned __int16)v399;
                              LOWORD(v290) = *(_WORD *)((char *)v254 + v401);
                              v290 = v260 + v257 * (double)*(unint64_t *)&v290;
                              *(float *)&v290 = v290;
                              LOWORD(v291) = *(_WORD *)((char *)v254 + v400);
                              v291 = v261 + v258 * (double)*(unint64_t *)&v291;
                              *(float *)v396[-1].i32 = v402;
                              v396[-1].i32[1] = LODWORD(v290);
                              v403 = v291;
                              *(float *)v396->i32 = v403;
                              v396->i32[1] = 1065353216;
                              v396 += 4;
                              --v397;
                            }
                            while (v397);
                            LODWORD(v662) = v399;
                            v404 = v696;
                            v405 = v400 + 4;
                            if (v400 + 4 <= v262 + 1)
                              v405 = v262 + 1;
                            v406 = (v405 + ~v400) >> 2;
                            if (v400 + 6 <= v262 + 1)
                              v407 = v262 + 1;
                            else
                              v407 = v400 + 6;
                            v408 = (v407 - v400 - 3) >> 2;
                            if (v406 >= v408)
                              v406 = v408;
                            if ((unint64_t)v289 - 1 >= v406)
                              v409 = v406;
                            else
                              v409 = v289 - 1;
                            if (v409 > 7)
                            {
                              v457 = 8;
                              if (((v409 + 1) & 7) != 0)
                                v457 = (v409 + 1) & 7;
                              v410 = v409 + 1 - v457;
                              v458 = ~v409 + v457;
                              v459 = (_WORD *)((char *)v254 + v400 + 2);
                              v460 = v696 + 18;
                              do
                              {
                                v713 = vld2q_s16(v459);
                                v459 += 16;
                                v461 = (float32x4_t)vdupq_n_s32(0x37800080u);
                                v462 = (int8x16_t)vmulq_f32(vcvtq_f32_u32(vmovl_high_u16((uint16x8_t)v713.val[0])), v461);
                                v463 = (int8x16_t)vmulq_f32(vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v713.val[0].i8)), v461);
                                v713.val[0] = (int16x8_t)vmulq_f32(vcvtq_f32_u32(vmovl_high_u16((uint16x8_t)v713.val[1])), v461);
                                v713.val[1] = (int16x8_t)vmulq_f32(vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v713.val[1].i8)), v461);
                                v460[-16] = vzip1_s32(*(int32x2_t *)v463.i8, *(int32x2_t *)v713.val[1].i8);
                                *v460 = vzip1_s32(*(int32x2_t *)v462.i8, *(int32x2_t *)v713.val[0].i8);
                                v460[-12] = vzip2_s32(*(int32x2_t *)v463.i8, *(int32x2_t *)v713.val[1].i8);
                                v713.val[1].i64[0] = vextq_s8((int8x16_t)v713.val[1], (int8x16_t)v713.val[1], 8uLL).u64[0];
                                v463.i64[0] = vextq_s8(v463, v463, 8uLL).u64[0];
                                v460[-8] = vzip1_s32(*(int32x2_t *)v463.i8, *(int32x2_t *)v713.val[1].i8);
                                v460[-4] = vzip2_s32(*(int32x2_t *)v463.i8, *(int32x2_t *)v713.val[1].i8);
                                v460[4] = vzip2_s32(*(int32x2_t *)v462.i8, *(int32x2_t *)v713.val[0].i8);
                                v713.val[0].i64[0] = vextq_s8((int8x16_t)v713.val[0], (int8x16_t)v713.val[0], 8uLL).u64[0];
                                v713.val[1].i64[0] = vextq_s8(v462, v462, 8uLL).u64[0];
                                v460[8] = vzip1_s32(*(int32x2_t *)v713.val[1].i8, *(int32x2_t *)v713.val[0].i8);
                                v460[12] = vzip2_s32(*(int32x2_t *)v713.val[1].i8, *(int32x2_t *)v713.val[0].i8);
                                v460 += 32;
                                v458 += 8;
                              }
                              while (v458);
                              v398 += 4 * v410;
                            }
                            else
                            {
                              v410 = 0;
                            }
                            v464 = v289 - v410;
                            v465 = (float32x2_t *)&v404[4 * v410 + 2];
                            while (v398 + 2 <= v262)
                            {
                              v429 = v398 + 4;
                              if (v398 + 4 > v262)
                                break;
                              v466 = (_WORD *)((char *)v254 + v398);
                              v467.i32[0] = *v466;
                              v467.i32[1] = v466[1];
                              *v465 = vmul_f32(vcvt_f32_u32(v467), (float32x2_t)vdup_n_s32(0x37800080u));
                              v465 += 4;
                              v398 = v429;
                              if (!--v464)
                                goto LABEL_850;
                            }
                            goto LABEL_863;
                          }
                          v429 = 6;
LABEL_850:
                          std::vector<unsigned short>::reserve((uint64_t)&v705[24], v288);
                          if ((_DWORD)v288)
                          {
                            while (1)
                            {
                              v433 = v429 + 2;
                              if (v429 + 2 > v262)
                                break;
                              v434 = *(unsigned __int16 *)((char *)v254 + v429);
                              if (v434 < v292)
                              {
                                std::vector<unsigned short>::push_back[abi:nn180100]((uint64_t)&v705[24], v434);
                              }
                              else
                              {
                                if (GEOGetVectorKitVKDefaultLog_onceToken != -1)
                                  dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_4_11772);
                                v435 = (id)GEOGetVectorKitVKDefaultLog_log;
                                if (os_log_type_enabled(v435, OS_LOG_TYPE_ERROR))
                                {
                                  LOWORD(v697.__begin_) = 0;
                                  _os_log_impl(&dword_19F029000, v435, OS_LOG_TYPE_ERROR, "C3M3 index out of bounds", (uint8_t *)&v697, 2u);
                                }

                              }
                              v429 = v433;
                              if (!--v288)
                                goto LABEL_851;
                            }
LABEL_863:
                            v277 = 1;
                            goto LABEL_864;
                          }
                        }
LABEL_851:
                        v708 = v430;
                        v709 = v431;
                        v710 = v432;
                        std::vector<karo::media::C3mMesh>::push_back[abi:nn180100](v677, (const karo::media::C3mMesh *)&buf);
                        v277 = 0;
LABEL_864:
                        v8 = 1.0;
                        v9 = v668;
                        goto LABEL_865;
                      }
                      if ((2 * v288) + 5 * (unint64_t)v289 + 6 <= v262)
                      {
                        if (v289)
                        {
                          v352 = 0;
                          v353 = v254 + 3;
                          v354 = (float *)&v696[1];
                          v355 = (char *)v254 + 9;
                          v356 = 11;
                          while (1)
                          {
                            v357 = v352;
                            if (v352 + 7 > v262)
                              goto LABEL_863;
                            v277 = 1;
                            if (v352 + 8 >= v262)
                              goto LABEL_864;
                            v358 = v356;
                            v359 = v355;
                            v360 = v259 + v256 * (double)*((unsigned __int8 *)v353 + v352);
                            LOBYTE(v290) = *((_BYTE *)v353 + v352 + 1);
                            v290 = v260 + v257 * (double)*(unint64_t *)&v290;
                            *(float *)&v290 = v290;
                            LOBYTE(v291) = *((_BYTE *)v353 + v352 + 2);
                            v291 = v261 + v258 * (double)*(unint64_t *)&v291;
                            *(float *)&v291 = v291;
                            *(v354 - 2) = v360;
                            *(v354 - 1) = *(float *)&v290;
                            v352 += 3;
                            *v354 = *(float *)&v291;
                            v354[1] = 1.0;
                            v354 += 8;
                            v356 += 3;
                            v355 += 3;
                            if (3 * v289 == v357 + 3)
                            {
                              v361 = v357 + 9;
                              v362 = v357 + 8;
                              v363 = v696;
                              v364 = (v262 + 1 - (v357 + 9)) >> 1;
                              v365 = v289 - 1;
                              v366 = v357 + 11;
                              if (v357 + 11 <= v262 + 1)
                                v366 = v262 + 1;
                              v367 = (v366 - v362 - 2) >> 1;
                              if (v367 < v364)
                                v364 = v367;
                              if (v365 < v364)
                                v364 = v289 - 1;
                              if (v364 > 0xF
                                && (&v696[2] < (int32x2_t *)((char *)&v254[v364 + 1] + v362 + 1)
                                  ? (v368 = (int32x2_t *)((char *)v254 + v362 + 1) >= &v696[4 * v364 + 3])
                                  : (v368 = 1),
                                    v368))
                              {
                                v369 = v364 + 1;
                                v370 = (v364 + 1) & 0xF;
                                v371 = 16;
                                if (v370)
                                  v371 = v370;
                                v372 = v369 - v371;
                                if (v358 <= v262 + 1)
                                  v358 = v262 + 1;
                                v373 = (v358 - v357 - 10) >> 1;
                                if ((v262 - v357 - 8) >> 1 < v373)
                                  v373 = (v262 - v357 - 8) >> 1;
                                if (v373 >= v365)
                                  v373 = v289 - 1;
                                v374 = ~v373 + v371;
                                v375 = v696;
                                do
                                {
                                  v715 = vld2q_s8(v359);
                                  v359 += 32;
                                  v376 = (float32x4_t)vdupq_n_s32(0x3B808081u);
                                  v377 = (int8x16_t)vmulq_f32(vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v715.val[0], (int8x16_t)xmmword_19FFB3760)), v376);
                                  v378 = (int8x16_t)vmulq_f32(vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v715.val[0], (int8x16_t)xmmword_19FFB3770)), v376);
                                  v379 = (int8x16_t)vmulq_f32(vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v715.val[0], (int8x16_t)xmmword_19FFB3780)), v376);
                                  v380 = (int8x16_t)vmulq_f32(vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v715.val[0], (int8x16_t)xmmword_19FFB3790)), v376);
                                  v715.val[0] = (int8x16_t)vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v715.val[1], (int8x16_t)xmmword_19FFB3790));
                                  v381 = (int8x16_t)vmulq_f32(vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v715.val[1], (int8x16_t)xmmword_19FFB3760)), v376);
                                  v382 = (int8x16_t)vmulq_f32(vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v715.val[1], (int8x16_t)xmmword_19FFB3770)), v376);
                                  v715.val[1] = (int8x16_t)vmulq_f32(vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v715.val[1], (int8x16_t)xmmword_19FFB3780)), v376);
                                  v715.val[0] = (int8x16_t)vmulq_f32((float32x4_t)v715.val[0], v376);
                                  v375[2] = vzip1_s32(*(int32x2_t *)v380.i8, *(int32x2_t *)v715.val[0].i8);
                                  v375[18] = vzip1_s32(*(int32x2_t *)v379.i8, *(int32x2_t *)v715.val[1].i8);
                                  v375[34] = vzip1_s32(*(int32x2_t *)v378.i8, *(int32x2_t *)v382.i8);
                                  v375[50] = vzip1_s32(*(int32x2_t *)v377.i8, *(int32x2_t *)v381.i8);
                                  v375[6] = vzip2_s32(*(int32x2_t *)v380.i8, *(int32x2_t *)v715.val[0].i8);
                                  v715.val[0].i64[0] = vextq_s8(v715.val[0], v715.val[0], 8uLL).u64[0];
                                  v383 = (int32x2_t)vextq_s8(v380, v380, 8uLL).u64[0];
                                  v375[10] = vzip1_s32(v383, *(int32x2_t *)v715.val[0].i8);
                                  v375[14] = vzip2_s32(v383, *(int32x2_t *)v715.val[0].i8);
                                  v375[22] = vzip2_s32(*(int32x2_t *)v379.i8, *(int32x2_t *)v715.val[1].i8);
                                  v715.val[0].i64[0] = vextq_s8(v715.val[1], v715.val[1], 8uLL).u64[0];
                                  v715.val[1].i64[0] = vextq_s8(v379, v379, 8uLL).u64[0];
                                  v375[26] = vzip1_s32(*(int32x2_t *)v715.val[1].i8, *(int32x2_t *)v715.val[0].i8);
                                  v375[30] = vzip2_s32(*(int32x2_t *)v715.val[1].i8, *(int32x2_t *)v715.val[0].i8);
                                  v375[38] = vzip2_s32(*(int32x2_t *)v378.i8, *(int32x2_t *)v382.i8);
                                  v715.val[0].i64[0] = vextq_s8(v382, v382, 8uLL).u64[0];
                                  v715.val[1].i64[0] = vextq_s8(v378, v378, 8uLL).u64[0];
                                  v375[42] = vzip1_s32(*(int32x2_t *)v715.val[1].i8, *(int32x2_t *)v715.val[0].i8);
                                  v375[46] = vzip2_s32(*(int32x2_t *)v715.val[1].i8, *(int32x2_t *)v715.val[0].i8);
                                  v375[54] = vzip2_s32(*(int32x2_t *)v377.i8, *(int32x2_t *)v381.i8);
                                  v715.val[0].i64[0] = vextq_s8(v381, v381, 8uLL).u64[0];
                                  v377.i64[0] = vextq_s8(v377, v377, 8uLL).u64[0];
                                  v375[58] = vzip1_s32(*(int32x2_t *)v377.i8, *(int32x2_t *)v715.val[0].i8);
                                  v375[62] = vzip2_s32(*(int32x2_t *)v377.i8, *(int32x2_t *)v715.val[0].i8);
                                  v375 += 64;
                                  v374 += 16;
                                }
                                while (v374);
                                v361 += 2 * v372;
                              }
                              else
                              {
                                v372 = 0;
                              }
                              v441 = (float32x2_t *)&v363[4 * v372 + 2];
                              v442 = v289 - v372;
                              v443 = ((v262 - v357 - 8) >> 1) - v372;
                              while (v443)
                              {
                                v422 = v361 + 2;
                                if (v361 + 2 > v262)
                                  break;
                                v444 = (unsigned __int8 *)v254 + v361;
                                v445.i32[0] = *v444;
                                v445.i32[1] = v444[1];
                                *v441 = vmul_f32(vcvt_f32_u32(v445), (float32x2_t)vdup_n_s32(0x3B808081u));
                                v441 += 4;
                                --v443;
                                v361 = v422;
                                if (!--v442)
                                  goto LABEL_826;
                              }
                              goto LABEL_863;
                            }
                          }
                        }
                        v422 = 6;
LABEL_826:
                        std::vector<unsigned short>::reserve((uint64_t)&v705[24], v288);
                        if ((_DWORD)v288)
                        {
                          while (1)
                          {
                            v423 = v422 + 2;
                            if (v422 + 2 > v262)
                              goto LABEL_863;
                            v424 = *(unsigned __int16 *)((char *)v254 + v422);
                            if (v424 < v292)
                            {
                              std::vector<unsigned short>::push_back[abi:nn180100]((uint64_t)&v705[24], v424);
                            }
                            else
                            {
                              if (GEOGetVectorKitVKDefaultLog_onceToken != -1)
                                dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_4_11772);
                              v425 = (id)GEOGetVectorKitVKDefaultLog_log;
                              if (os_log_type_enabled(v425, OS_LOG_TYPE_ERROR))
                              {
                                LOWORD(v697.__begin_) = 0;
                                _os_log_impl(&dword_19F029000, v425, OS_LOG_TYPE_ERROR, "C3M3 index out of bounds", (uint8_t *)&v697, 2u);
                              }

                            }
                            v422 = v423;
                            if (!--v288)
                              goto LABEL_851;
                          }
                        }
                        goto LABEL_851;
                      }
                      if (GEOGetVectorKitVKDefaultLog_onceToken != -1)
                        dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_4_11772);
                      v282 = (id)GEOGetVectorKitVKDefaultLog_log;
                      if (!os_log_type_enabled(v282, OS_LOG_TYPE_ERROR))
                        goto LABEL_670;
                    }
LABEL_669:
                    LOWORD(v697.__begin_) = 0;
                    _os_log_impl(&dword_19F029000, v282, OS_LOG_TYPE_ERROR, "C3M3 uncompressed mesh body data block too short", (uint8_t *)&v697, 2u);
LABEL_670:

                    v8 = 1.0;
                    v9 = v668;
                    v277 = 4;
LABEL_865:
                    ggl::BufferMemory::~BufferMemory((ggl::BufferMemory *)__dst);
                    std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&v698);
                    goto LABEL_635;
                  }
                  buf.n128_u8[0] = 1;
                  goto LABEL_623;
                }
                if (GEOGetVectorKitVKDefaultLog_onceToken != -1)
                  dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_4_11772);
                v275 = (id)GEOGetVectorKitVKDefaultLog_log;
                if (os_log_type_enabled(v275, OS_LOG_TYPE_ERROR))
                {
                  buf.n128_u16[0] = 0;
                  _os_log_impl(&dword_19F029000, v275, OS_LOG_TYPE_ERROR, "C3M3 LZMA mesh decode failed", (uint8_t *)&buf, 2u);
                }
LABEL_600:

                v277 = 4;
                goto LABEL_636;
              }
            }
          }
          return result;
        }
      case 3u:
        v9 = v11 + 4;
        if (v11 + 4 > a3)
          return 0;
        v682 = *(_DWORD *)&v5[v11];
        if (!v682)
          goto LABEL_1166;
        LODWORD(v685) = 0;
        v34 = 0;
        v680 = 0;
        v667 = 0;
        __len = 0;
        v673 = 0;
        while (2)
        {
          v35 = (char *)operator new(0x48uLL);
          *((_QWORD *)v35 + 1) = 0;
          *((_QWORD *)v35 + 2) = 0;
          *(_QWORD *)v35 = &off_1E42E5D50;
          *(_OWORD *)(v35 + 40) = 0u;
          *(_OWORD *)(v35 + 56) = 0u;
          *(_OWORD *)(v35 + 24) = 0u;
          v36 = (std::__shared_weak_count *)*((_QWORD *)a4 + 21);
          *((_QWORD *)a4 + 20) = v35 + 24;
          *((_QWORD *)a4 + 21) = v35;
          if (v36)
          {
            v37 = (unint64_t *)&v36->__shared_owners_;
            do
              v38 = __ldaxr(v37);
            while (__stlxr(v38 - 1, v37));
            if (!v38)
            {
              ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
              std::__shared_weak_count::__release_weak(v36);
            }
          }
          if (v9 + 1 > a3 || v9 + 3 > a3)
            return 0;
          if (v5[v9])
          {
            v39 = *(unsigned __int16 *)&v684[v9 + 3];
            if (GEOGetVectorKitVKDefaultLog_onceToken != -1)
              dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_4_11772);
            v40 = (id)GEOGetVectorKitVKDefaultLog_log;
            if (os_log_type_enabled(v40, OS_LOG_TYPE_ERROR))
            {
              buf.n128_u16[0] = 0;
              _os_log_impl(&dword_19F029000, v40, OS_LOG_TYPE_ERROR, "Unknown SG type.", (uint8_t *)&buf, 2u);
            }

            if (v9 + v39 >= a3)
              v9 = a3;
            else
              v9 += v39;
LABEL_53:
            LODWORD(v685) = v685 + 1;
            if ((_DWORD)v685 == v682)
              goto LABEL_1166;
            continue;
          }
          break;
        }
        v41 = v9 + 5;
        if (v9 + 5 > a3)
          return 0;
        v42 = *(unsigned __int16 *)&v684[v41];
        if (!*(_WORD *)&v684[v41])
        {
LABEL_57:
          v9 = v41 + 2;
          if (v41 + 2 > a3)
            return 0;
          v43 = *(unsigned __int16 *)&v5[v41];
          if (!*(_WORD *)&v5[v41])
            goto LABEL_53;
          v44 = 0;
          v679 = *(unsigned __int16 *)&v5[v41];
          v663 = v5;
          while (1)
          {
            v45 = v9;
            if (v9 + 1 <= a3)
            {
              v34 = v5[v9];
              v45 = v9 + 1;
            }
            v46 = v45 + 2;
            if (v45 + 2 <= a3)
            {
              v680 = *(unsigned __int16 *)&v5[v45];
              v46 = v45 + 4;
            }
            if (v46 > a3)
              return 0;
            result = 0;
            if (v9 + 1 > a3 || v45 + 2 > a3)
              return result;
            v47 = *(unsigned __int16 *)&v684[v46];
            memset(&v698, 0, sizeof(v698));
            v689 = v34;
            if (!(_DWORD)v47)
            {
              LODWORD(v683) = v44;
              end = 0;
              v48 = 0;
              goto LABEL_74;
            }
            std::vector<unsigned int>::__append(&v698, v47);
            v48 = v698.__begin_;
            end = (char *)v698.__end_;
            v50 = v698.__begin_;
            if (v698.__begin_ == v698.__end_)
              break;
            while (1)
            {
              v51 = v46 + 2;
              if (v46 + 2 > a3)
                break;
              *v50++ = *(unsigned __int16 *)&v5[v46];
              v46 += 2;
              if (v50 == (std::vector<unsigned int>::pointer)end)
              {
                LODWORD(v683) = v44;
                v46 = v51;
                goto LABEL_74;
              }
            }
            v53 = 1;
            v9 = v46;
LABEL_380:
            if (v48)
            {
              v698.__end_ = v48;
              operator delete(v48);
            }
            if (v53)
              return 0;
            if (++v44 == v43)
              goto LABEL_53;
          }
          LODWORD(v683) = v44;
          end = (char *)v698.__begin_;
LABEL_74:
          v52 = v46 + 2;
          if (v46 + 2 > a3)
          {
            v53 = 1;
            v9 = v46;
            v34 = v689;
            v44 = (int)v683;
            goto LABEL_380;
          }
          v54 = *(unsigned __int16 *)&v5[v46];
          memset(&v697, 0, sizeof(v697));
          if (v54)
          {
            std::vector<unsigned int>::__append(&v697, v54);
            v55 = (char *)v697.__begin_;
            v56 = (char *)v697.__end_;
            v57 = v697.__begin_;
            if (v697.__begin_ != v697.__end_)
            {
              while (1)
              {
                v58 = v52 + 2;
                if (v52 + 2 > a3)
                  break;
                *v57++ = *(unsigned __int16 *)&v5[v52];
                v52 += 2;
                if (v57 == (std::vector<unsigned int>::pointer)v56)
                {
                  v52 = v58;
                  goto LABEL_84;
                }
              }
LABEL_353:
              v53 = 1;
              goto LABEL_377;
            }
            v56 = (char *)v697.__begin_;
          }
          else
          {
            v56 = 0;
            v55 = 0;
          }
LABEL_84:
          switch(v689)
          {
            case 0u:
              v59 = (char *)operator new(0x50uLL);
              *((_QWORD *)v59 + 1) = 0;
              *((_QWORD *)v59 + 2) = 0;
              *(_QWORD *)v59 = &off_1E42E5EA0;
              *(_OWORD *)(v59 + 40) = 0u;
              *(_OWORD *)(v59 + 56) = 0u;
              *(_OWORD *)(v59 + 24) = 0u;
              *((_QWORD *)v59 + 9) = 0;
              buf.n128_u64[0] = (unint64_t)(v59 + 24);
              buf.n128_u64[1] = (unint64_t)v59;
              std::vector<unsigned int>::__assign_with_size[abi:nn180100]<unsigned int *,unsigned int *>((_QWORD *)v59 + 4, (char *)v48, end, (end - (char *)v48) >> 2);
              std::vector<unsigned int>::__assign_with_size[abi:nn180100]<unsigned int *,unsigned int *>((_QWORD *)(buf.n128_u64[0] + 32), v55, v56, (v56 - v55) >> 2);
              karo::media::C3mSceneGraph::push_back(*((_QWORD *)a4 + 20), &buf);
              goto LABEL_372;
            case 1u:
              v73 = operator new();
              *(_OWORD *)(v73 + 40) = 0u;
              *(_OWORD *)(v73 + 24) = 0u;
              *(_OWORD *)(v73 + 8) = 0u;
              *(_DWORD *)v73 = 1;
              std::vector<unsigned int>::__assign_with_size[abi:nn180100]<unsigned int *,unsigned int *>((_QWORD *)(v73 + 8), (char *)v48, end, (end - (char *)v48) >> 2);
              std::vector<unsigned int>::__assign_with_size[abi:nn180100]<unsigned int *,unsigned int *>((_QWORD *)(v73 + 32), v55, v56, (v56 - v55) >> 2);
              v74 = v52 + 4;
              if (v52 + 4 > a3)
                goto LABEL_353;
              *(_DWORD *)(v73 + 56) = *(_DWORD *)&v5[v52];
              v75 = v52 + 8;
              if (v52 + 8 > a3)
                goto LABEL_96;
              *(_DWORD *)(v73 + 60) = *(_DWORD *)&v5[v74];
              v74 = v52 + 12;
              if (v52 + 12 > a3)
                goto LABEL_386;
              *(_DWORD *)(v73 + 64) = *(_DWORD *)&v5[v75];
              v75 = v52 + 16;
              if (v52 + 16 > a3)
                goto LABEL_96;
              *(_DWORD *)(v73 + 68) = *(_DWORD *)&v663[v74];
              v74 = v52 + 20;
              if (v52 + 20 > a3)
                goto LABEL_386;
              *(_DWORD *)(v73 + 72) = *(_DWORD *)&v663[v75];
              v75 = v52 + 24;
              if (v52 + 24 > a3)
                goto LABEL_96;
              *(_DWORD *)(v73 + 76) = *(_DWORD *)&v663[v74];
              v74 = v52 + 28;
              if (v52 + 28 > a3)
                goto LABEL_386;
              *(_DWORD *)(v73 + 80) = *(_DWORD *)&v663[v75];
              v75 = v52 + 32;
              if (v52 + 32 > a3)
                goto LABEL_96;
              *(_DWORD *)(v73 + 84) = *(_DWORD *)&v663[v74];
              v74 = v52 + 36;
              if (v52 + 36 > a3)
                goto LABEL_386;
              *(_DWORD *)(v73 + 88) = *(_DWORD *)&v663[v75];
              v75 = v52 + 40;
              if (v52 + 40 > a3)
                goto LABEL_96;
              *(_DWORD *)(v73 + 92) = *(_DWORD *)&v663[v74];
              v74 = v52 + 44;
              if (v52 + 44 > a3)
                goto LABEL_386;
              *(_DWORD *)(v73 + 96) = *(_DWORD *)&v663[v75];
              v75 = v52 + 48;
              if (v52 + 48 > a3)
                goto LABEL_96;
              *(_DWORD *)(v73 + 100) = *(_DWORD *)&v663[v74];
              v74 = v52 + 52;
              if (v52 + 52 > a3)
                goto LABEL_386;
              *(_DWORD *)(v73 + 104) = *(_DWORD *)&v663[v75];
              v75 = v52 + 56;
              if (v52 + 56 > a3)
                goto LABEL_96;
              *(_DWORD *)(v73 + 108) = *(_DWORD *)&v663[v74];
              v74 = v52 + 60;
              if (v52 + 60 > a3)
              {
LABEL_386:
                v53 = 1;
                v52 = v75;
                goto LABEL_377;
              }
              *(_DWORD *)(v73 + 112) = *(_DWORD *)&v663[v75];
              if (v52 + 64 > a3)
              {
LABEL_96:
                v53 = 1;
                goto LABEL_375;
              }
              *(_DWORD *)(v73 + 116) = *(_DWORD *)&v663[v74];
              v214 = *((_QWORD *)a4 + 20);
              std::shared_ptr<karo::media::C3mSgNode>::shared_ptr[abi:nn180100]<karo::media::C3mSgStaticTransform,void>(&buf, v73);
              karo::media::C3mSceneGraph::push_back(v214, &buf);
              goto LABEL_372;
            case 2u:
              v63 = operator new();
              *(_OWORD *)(v63 + 40) = 0u;
              *(_OWORD *)(v63 + 8) = 0u;
              *(_QWORD *)(v63 + 88) = 0;
              *(_OWORD *)(v63 + 24) = 0u;
              *(_QWORD *)(v63 + 96) = 0;
              *(_QWORD *)(v63 + 104) = 0;
              *(_DWORD *)v63 = 2;
              std::vector<unsigned int>::__assign_with_size[abi:nn180100]<unsigned int *,unsigned int *>((_QWORD *)(v63 + 8), (char *)v48, end, (end - (char *)v48) >> 2);
              std::vector<unsigned int>::__assign_with_size[abi:nn180100]<unsigned int *,unsigned int *>((_QWORD *)(v63 + 32), v55, v56, (v56 - v55) >> 2);
              v64 = v52 + 4;
              if (v52 + 4 > a3)
              {
                v65 = v52 + 4;
              }
              else
              {
                v640 = *(_DWORD *)&v5[v52];
                v65 = v52 + 8;
                v52 += 4;
              }
              v117 = (int)v665;
              if (v65 > a3)
              {
                v118 = v65;
              }
              else
              {
                v117 = *(_DWORD *)&v5[v52];
                v118 = v65 + 4;
                v52 = v65;
              }
              if (v118 > a3)
              {
                v119 = v118;
              }
              else
              {
                v639 = *(_DWORD *)&v5[v52];
                v119 = v118 + 4;
                v52 = v118;
              }
              if (v119 > a3)
              {
                v120 = v119;
              }
              else
              {
                v638 = *(_DWORD *)&v5[v52];
                v120 = v119 + 4;
                v52 = v119;
              }
              if (v120 > a3)
              {
                v121 = v120;
              }
              else
              {
                v637 = *(_DWORD *)&v5[v52];
                v121 = v120 + 4;
                v52 = v120;
              }
              if (v121 <= a3)
              {
                v636 = *(_DWORD *)&v5[v52];
                v52 = v121;
              }
              v122 = v656;
              v123 = v52 + 1;
              if (v52 + 1 > a3)
              {
                v124 = v52 + 1;
              }
              else
              {
                v649 = v5[v52];
                v124 = v52 + 2;
                ++v52;
              }
              if (v124 <= a3)
              {
                v647 = v5[v52];
                v52 = v124;
              }
              v125 = v52 + 2;
              if (v52 + 2 <= a3)
              {
                v645 = *(_WORD *)&v5[v52];
                v52 += 2;
              }
              v126 = v52 + 8;
              if (v52 + 8 > a3)
              {
                v127 = v52 + 8;
              }
              else
              {
                v122 = *(_QWORD *)&v5[v52];
                v127 = v52 + 16;
                v52 += 8;
              }
              if (v127 > a3)
              {
                v128 = v127;
              }
              else
              {
                v650 = *(_QWORD *)&v5[v52];
                v128 = v127 + 8;
                v52 = v127;
              }
              v129 = v655;
              if (v128 <= a3)
              {
                v129 = *(_QWORD *)&v5[v52];
                v52 = v128;
              }
              v130 = v52 + 2;
              if (v52 + 2 <= a3)
                __len = *(unsigned __int16 *)&v5[v52];
              else
                v130 = v52;
              v53 = 1;
              LODWORD(v665) = v117;
              v655 = v129;
              v656 = v122;
              if (v64 > a3
                || v65 > a3
                || v118 > a3
                || v119 > a3
                || v120 > a3
                || v121 > a3
                || v123 > a3
                || v124 > a3
                || v125 > a3
                || v126 > a3
                || v127 > a3
                || v128 > a3)
              {
                goto LABEL_376;
              }
              *(_BYTE *)(v63 + 56) = v649;
              *(_BYTE *)(v63 + 57) = v647;
              *(_WORD *)(v63 + 58) = v645;
              *(_QWORD *)(v63 + 72) = v650;
              *(_QWORD *)(v63 + 80) = v129;
              *(_QWORD *)(v63 + 64) = v122;
              std::vector<karo::media::C3mSgKeyFrame<float>>::resize((char **)(v63 + 88), __len);
              *(_DWORD *)(v63 + 112) = v640;
              *(_DWORD *)(v63 + 116) = (_DWORD)v665;
              *(_DWORD *)(v63 + 120) = v639;
              *(_DWORD *)(v63 + 124) = v638;
              *(_DWORD *)(v63 + 128) = v637;
              *(_DWORD *)(v63 + 132) = v636;
              v131 = *(_QWORD *)(v63 + 88);
              v132 = *(_QWORD *)(v63 + 96);
              v133 = v635;
              v134 = v634;
              if (v131 == v132)
                goto LABEL_218;
              while (2)
              {
                v135 = v130 + 4;
                if (v130 + 4 <= a3)
                {
                  v134 = *(float *)&v5[v130];
                  v130 += 4;
                }
                v136 = v130 + 1;
                if (v130 + 1 > a3)
                {
                  v52 = v130;
                }
                else
                {
                  v133 = v5[v130];
                  v52 = v130 + 1;
                }
                v130 = v52 + 4;
                if (v52 + 4 > a3)
                {
                  v634 = v134;
                  v635 = v133;
                  goto LABEL_353;
                }
                v53 = 1;
                if (v135 <= a3 && v136 <= a3)
                {
                  v137 = *(_DWORD *)&v5[v52];
                  *(double *)v131 = v134;
                  *(_BYTE *)(v131 + 8) = v133;
                  *(_DWORD *)(v131 + 12) = v137;
                  v131 += 16;
                  if (v131 == v132)
                  {
LABEL_218:
                    v634 = v134;
                    v635 = v133;
                    v138 = *((_QWORD *)a4 + 20);
                    std::shared_ptr<karo::media::C3mSgNode>::shared_ptr[abi:nn180100]<karo::media::C3mSgFixedAxisRotationAnimation,void>(&buf, v63);
                    karo::media::C3mSceneGraph::push_back(v138, &buf);
                    goto LABEL_372;
                  }
                  continue;
                }
                break;
              }
              v634 = v134;
              v635 = v133;
              v52 += 4;
              goto LABEL_377;
            case 3u:
              v66 = operator new();
              *(_OWORD *)(v66 + 40) = 0u;
              *(_OWORD *)(v66 + 8) = 0u;
              *(_QWORD *)(v66 + 88) = 0;
              *(_OWORD *)(v66 + 24) = 0u;
              *(_QWORD *)(v66 + 96) = 0;
              *(_QWORD *)(v66 + 104) = 0;
              *(_DWORD *)v66 = 3;
              std::vector<unsigned int>::__assign_with_size[abi:nn180100]<unsigned int *,unsigned int *>((_QWORD *)(v66 + 8), (char *)v48, end, (end - (char *)v48) >> 2);
              std::vector<unsigned int>::__assign_with_size[abi:nn180100]<unsigned int *,unsigned int *>((_QWORD *)(v66 + 32), v55, v56, (v56 - v55) >> 2);
              v67 = v52 + 1;
              if (v52 + 1 > a3)
              {
                v68 = v52 + 1;
              }
              else
              {
                v648 = v5[v52];
                v68 = v52 + 2;
                ++v52;
              }
              if (v68 <= a3)
              {
                v646 = v5[v52];
                v52 = v68;
              }
              v139 = v52 + 2;
              if (v52 + 2 <= a3)
              {
                v644 = *(_WORD *)&v5[v52];
                v52 += 2;
              }
              v140 = v52 + 8;
              if (v52 + 8 > a3)
              {
                v141 = v52 + 8;
              }
              else
              {
                v642 = *(_QWORD *)&v5[v52];
                v141 = v52 + 16;
                v52 += 8;
              }
              v142 = v666;
              if (v141 > a3)
              {
                v143 = v141;
              }
              else
              {
                v142 = *(_QWORD *)&v5[v52];
                v143 = v141 + 8;
                v52 = v141;
              }
              if (v143 <= a3)
              {
                v641 = *(_QWORD *)&v5[v52];
                v52 = v143;
              }
              if (v52 + 2 <= a3)
              {
                v673 = *(unsigned __int16 *)&v5[v52];
                v52 += 2;
              }
              v53 = 1;
              v666 = v142;
              if (v67 > a3 || v68 > a3 || v139 > a3 || v140 > a3 || v141 > a3 || v143 > a3)
                goto LABEL_377;
              *(_BYTE *)(v66 + 56) = v648;
              *(_BYTE *)(v66 + 57) = v646;
              *(_WORD *)(v66 + 58) = v644;
              *(_QWORD *)(v66 + 64) = v642;
              *(_QWORD *)(v66 + 72) = v142;
              *(_QWORD *)(v66 + 80) = v641;
              std::vector<karo::media::C3mSgKeyFrame<karo::media::TRS>>::resize((char **)(v66 + 88), v673);
              v144 = v66;
              v145 = *(_QWORD *)(v66 + 88);
              v146 = v144;
              v147 = *(_QWORD *)(v144 + 96);
              if (v145 == v147)
                goto LABEL_260;
              while (2)
              {
                if (v52 + 4 <= a3)
                {
                  if (v52 + 5 > a3)
                  {
                    v52 += 4;
                  }
                  else
                  {
                    v148 = v5[v52 + 4];
                    *(double *)v145 = *(float *)&v5[v52];
                    *(_BYTE *)(v145 + 8) = v148;
                    if (v52 + 9 > a3)
                    {
                      v52 += 5;
                    }
                    else if (v52 + 13 > a3)
                    {
                      v52 += 9;
                    }
                    else if (v52 + 17 > a3)
                    {
                      v52 += 13;
                    }
                    else if (v52 + 21 > a3)
                    {
                      v52 += 17;
                    }
                    else if (v52 + 25 > a3)
                    {
                      v52 += 21;
                    }
                    else if (v52 + 29 > a3)
                    {
                      v52 += 25;
                    }
                    else if (v52 + 33 > a3)
                    {
                      v52 += 29;
                    }
                    else if (v52 + 37 > a3)
                    {
                      v52 += 33;
                    }
                    else if (v52 + 41 > a3)
                    {
                      v52 += 37;
                    }
                    else if (v52 + 45 > a3)
                    {
                      v52 += 41;
                    }
                    else if (v52 + 49 > a3)
                    {
                      v52 += 45;
                    }
                    else if (v52 + 53 > a3)
                    {
                      v52 += 49;
                    }
                    else if (v52 + 57 > a3)
                    {
                      v52 += 53;
                    }
                    else if (v52 + 61 > a3)
                    {
                      v52 += 57;
                    }
                    else if (v52 + 65 > a3)
                    {
                      v52 += 61;
                    }
                    else
                    {
                      if (v52 + 69 <= a3)
                      {
                        v625 = *(float *)&v5[v52 + 5];
                        v626 = *(float *)&v5[v52 + 9];
                        v643 = *(float *)&v5[v52 + 13];
                        v662 = *(float *)&v5[v52 + 17];
                        v623 = *(float *)&v5[v52 + 21];
                        v624 = *(float *)&v5[v52 + 25];
                        v627 = *(float *)&v5[v52 + 29];
                        v654 = *(float *)&v5[v52 + 33];
                        v149 = *(float *)&v5[v52 + 37];
                        v150 = *(float *)&v5[v52 + 41];
                        v151 = *(float *)&v5[v52 + 45];
                        v152 = *(float *)&v5[v52 + 49];
                        v153 = *(float *)&v5[v52 + 53];
                        v154 = *(float *)&v5[v52 + 57];
                        v155 = *(float *)&v5[v52 + 61];
                        buf.n128_f64[0] = v625;
                        buf.n128_f64[1] = v626;
                        v704 = v149;
                        *(double *)v705 = v150;
                        v701 = v623;
                        v700 = *(_QWORD *)&v643;
                        v702 = v624;
                        v703 = *(_QWORD *)&v627;
                        *(double *)&v705[8] = v151;
                        gm::quaternionFromRotationMatrix<double>((double *)__dst, buf.n128_f64);
                        v156.f64[0] = v625;
                        v157.f64[0] = v626;
                        v156.f64[1] = v623;
                        v157.f64[1] = v624;
                        v158.f64[0] = v643;
                        v158.f64[1] = v627;
                        v159.f64[0] = v662;
                        v159.f64[1] = v654;
                        v160 = v695;
                        *(_OWORD *)(v145 + 40) = *(_OWORD *)__dst;
                        *(_OWORD *)(v145 + 56) = v160;
                        *(double *)(v145 + 16) = v153;
                        *(double *)(v145 + 24) = v154;
                        *(double *)(v145 + 32) = v155;
                        *(float64x2_t *)(v145 + 72) = vsqrtq_f64(vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v156, v156), v157, v157), v158, v158), v159, v159));
                        *(double *)(v145 + 88) = sqrt(v149 * v149 + v150 * v150 + v151 * v151 + v152 * v152);
                        v145 += 96;
                        v52 += 69;
                        if (v145 == v147)
                        {
LABEL_260:
                          v161 = *((_QWORD *)a4 + 20);
                          std::shared_ptr<karo::media::C3mSgNode>::shared_ptr[abi:nn180100]<karo::media::C3mSgAnimation<karo::media::TRS>,void>(&buf, v146);
                          karo::media::C3mSceneGraph::push_back(v161, &buf);
                          goto LABEL_372;
                        }
                        continue;
                      }
                      v52 += 65;
                    }
                  }
                  goto LABEL_353;
                }
                break;
              }
              v74 = v52 + 1;
              v53 = 1;
              if (v52 + 1 <= a3)
                goto LABEL_375;
              goto LABEL_377;
            case 4u:
              v60 = operator new();
              *(_OWORD *)(v60 + 8) = 0u;
              *(_OWORD *)(v60 + 24) = 0u;
              *(_OWORD *)(v60 + 40) = 0u;
              *(_QWORD *)(v60 + 88) = 0;
              *(_QWORD *)(v60 + 96) = 0;
              *(_QWORD *)(v60 + 104) = 0;
              *(_QWORD *)&v61 = v52 + 4;
              if (v52 + 4 > a3)
              {
                v62 = v52 + 4;
              }
              else
              {
                v622 = *(_DWORD *)&v5[v52];
                v62 = v52 + 8;
                v52 += 4;
              }
              v87 = (int)v664;
              if (v62 > a3)
              {
                v88 = v62;
              }
              else
              {
                v87 = *(_DWORD *)&v5[v52];
                v88 = v62 + 4;
                v52 = v62;
              }
              LODWORD(v664) = v87;
              v662 = v61;
              v653 = v88;
              if (v88 <= a3)
              {
                v652 = *(_DWORD *)&v5[v52];
                v52 = v88;
              }
              *(_DWORD *)v60 = 4;
              std::vector<unsigned int>::__assign_with_size[abi:nn180100]<unsigned int *,unsigned int *>((_QWORD *)(v60 + 8), (char *)v48, end, (end - (char *)v48) >> 2);
              std::vector<unsigned int>::__assign_with_size[abi:nn180100]<unsigned int *,unsigned int *>((_QWORD *)(v60 + 32), v55, v56, (v56 - v55) >> 2);
              v89 = v52 + 1;
              if (v52 + 1 > a3)
              {
                v91 = v52 + 1;
                v93 = v660;
                v92 = v661;
                v94 = v659;
                v95 = v658;
                v96 = v657;
                v90 = v651;
              }
              else
              {
                v90 = v5[v52];
                v91 = v52 + 2;
                ++v52;
                v93 = v660;
                v92 = v661;
                v94 = v659;
                v95 = v658;
                v96 = v657;
              }
              if (v91 <= a3)
              {
                v96 = v5[v52];
                v52 = v91;
              }
              v97 = v52 + 2;
              if (v52 + 2 <= a3)
              {
                v95 = *(unsigned __int16 *)&v5[v52];
                v52 += 2;
              }
              v98 = v52 + 8;
              if (v52 + 8 > a3)
              {
                v99 = v52 + 8;
              }
              else
              {
                v94 = *(_QWORD *)&v5[v52];
                v99 = v52 + 16;
                v52 += 8;
              }
              if (v99 > a3)
              {
                v100 = v99;
              }
              else
              {
                v93 = *(_QWORD *)&v5[v52];
                v100 = v99 + 8;
                v52 = v99;
              }
              if (v100 <= a3)
              {
                v92 = *(_QWORD *)&v5[v52];
                v52 = v100;
              }
              v101 = v52 + 2;
              if (v52 + 2 <= a3)
              {
                v667 = *(unsigned __int16 *)&v5[v52];
                v52 += 2;
              }
              v53 = 1;
              v660 = v93;
              v661 = v92;
              v659 = v94;
              v658 = v95;
              v657 = v96;
              v651 = v90;
              if (*(_QWORD *)&v662 > a3
                || v62 > a3
                || v653 > a3
                || v89 > a3
                || v91 > a3
                || v97 > a3
                || v98 > a3
                || v99 > a3
                || v100 > a3
                || v101 > a3)
              {
                goto LABEL_377;
              }
              *(_DWORD *)(v60 + 112) = v622;
              *(_DWORD *)(v60 + 116) = (_DWORD)v664;
              *(_DWORD *)(v60 + 120) = v652;
              *(_BYTE *)(v60 + 56) = v90;
              *(_BYTE *)(v60 + 57) = v96;
              *(_WORD *)(v60 + 58) = v95;
              *(_QWORD *)(v60 + 72) = v93;
              *(_QWORD *)(v60 + 80) = v92;
              *(_QWORD *)(v60 + 64) = v94;
              std::vector<karo::media::C3mSgKeyFrame<gm::Matrix<float,4,1>>>::resize((char **)(v60 + 88), v667);
              v102 = *(_QWORD *)(v60 + 88);
              v103 = *(_QWORD *)(v60 + 96);
              v105 = v598;
              v104 = v599;
              v106 = v597;
              v107 = v596;
              v108 = v595;
              if (v102 == v103)
                goto LABEL_162;
              while (2)
              {
                v109 = v52 + 4;
                if (v52 + 4 <= a3)
                {
                  v108 = *(float *)&v5[v52];
                  v52 += 4;
                }
                v110 = v52 + 1;
                if (v52 + 1 <= a3)
                  v107 = v5[v52++];
                v111 = v52 + 4;
                if (v52 + 4 > a3)
                {
                  v112 = v52 + 4;
                }
                else
                {
                  v106 = *(_DWORD *)&v5[v52];
                  v112 = v52 + 8;
                  v52 += 4;
                }
                if (v112 > a3)
                {
                  v113 = v112;
                  v114 = v52;
                }
                else
                {
                  v105 = *(_DWORD *)&v5[v52];
                  v113 = v112 + 4;
                  v114 = v112;
                }
                if (v113 > a3)
                {
                  v52 = v113;
                }
                else
                {
                  v104 = *(_DWORD *)&v5[v114];
                  v52 = v113 + 4;
                  v114 = v113;
                }
                if (v52 > a3)
                {
                  v595 = v108;
                  v596 = v107;
                  v597 = v106;
                  v598 = v105;
                  v599 = v104;
                  v53 = 1;
                  v52 = v114;
                }
                else
                {
                  v53 = 1;
                  if (v109 <= a3 && v110 <= a3 && v111 <= a3 && v112 <= a3 && v113 <= a3)
                  {
                    v115 = *(_DWORD *)&v5[v114];
                    *(double *)v102 = v108;
                    *(_BYTE *)(v102 + 8) = v107;
                    *(_DWORD *)(v102 + 12) = v106;
                    *(_DWORD *)(v102 + 16) = v105;
                    *(_DWORD *)(v102 + 20) = v104;
                    *(_DWORD *)(v102 + 24) = v115;
                    v102 += 32;
                    if (v102 == v103)
                    {
LABEL_162:
                      v595 = v108;
                      v596 = v107;
                      v597 = v106;
                      v598 = v105;
                      v599 = v104;
                      v116 = *((_QWORD *)a4 + 20);
                      std::shared_ptr<karo::media::C3mSgNode>::shared_ptr[abi:nn180100]<karo::media::C3mSgRotationAnimation,void>(&buf, v60);
                      karo::media::C3mSceneGraph::push_back(v116, &buf);
                      goto LABEL_372;
                    }
                    continue;
                  }
                  v595 = v108;
                  v596 = v107;
                  v597 = v106;
                  v598 = v105;
                  v599 = v104;
                }
                goto LABEL_377;
              }
            case 5u:
              v76 = operator new();
              *(_OWORD *)(v76 + 40) = 0u;
              *(_OWORD *)(v76 + 8) = 0u;
              *(_QWORD *)(v76 + 88) = 0;
              v77 = (char **)(v76 + 88);
              *(_OWORD *)(v76 + 24) = 0u;
              *(_QWORD *)(v76 + 96) = 0;
              *(_QWORD *)(v76 + 104) = 0;
              *(_DWORD *)v76 = 5;
              std::vector<unsigned int>::__assign_with_size[abi:nn180100]<unsigned int *,unsigned int *>((_QWORD *)(v76 + 8), (char *)v48, end, (end - (char *)v48) >> 2);
              std::vector<unsigned int>::__assign_with_size[abi:nn180100]<unsigned int *,unsigned int *>((_QWORD *)(v76 + 32), v55, v56, (v56 - v55) >> 2);
              v78 = v52 + 1;
              if (v52 + 1 > a3)
              {
                v79 = v52 + 1;
              }
              else
              {
                v614 = v5[v52];
                v79 = v52 + 2;
                ++v52;
              }
              if (v79 <= a3)
              {
                v632 = v5[v52];
                v52 = v79;
              }
              v182 = v52 + 2;
              if (v52 + 2 <= a3)
              {
                v629 = *(_WORD *)&v5[v52];
                v52 += 2;
              }
              v183 = v52 + 8;
              if (v52 + 8 > a3)
              {
                v184 = v52 + 8;
              }
              else
              {
                v615 = *(_QWORD *)&v5[v52];
                v184 = v52 + 16;
                v52 += 8;
              }
              if (v184 > a3)
              {
                v185 = v184;
              }
              else
              {
                v616 = *(_QWORD *)&v5[v52];
                v185 = v184 + 8;
                v52 = v184;
              }
              v186 = v76;
              if (v185 <= a3)
              {
                v617 = *(_QWORD *)&v5[v52];
                v52 = v185;
              }
              v130 = v52 + 2;
              if (v52 + 2 > a3)
                goto LABEL_353;
              v53 = 1;
              if (v78 > a3 || v79 > a3 || v182 > a3 || v183 > a3 || v184 > a3 || v185 > a3)
                goto LABEL_376;
              v187 = *(unsigned __int16 *)&v5[v52];
              *(_BYTE *)(v186 + 56) = v614;
              *(_BYTE *)(v186 + 57) = v632;
              *(_WORD *)(v186 + 58) = v629;
              *(_QWORD *)(v186 + 64) = v615;
              *(_QWORD *)(v186 + 72) = v616;
              *(_QWORD *)(v186 + 80) = v617;
              std::vector<karo::media::C3mSgKeyFrame<gm::Matrix<float,3,1>>>::resize(v77, v187);
              v188 = *(_QWORD *)(v186 + 88);
              v189 = *(_QWORD *)(v186 + 96);
              v190 = v605;
              v191 = v606;
              v192 = v604;
              v193 = v602;
              if (v188 == v189)
                goto LABEL_338;
              while (2)
              {
                v194 = v130 + 4;
                if (v130 + 4 > a3)
                {
                  v195 = v130;
                }
                else
                {
                  v192 = *(float *)&v5[v130];
                  v195 = v130 + 4;
                }
                v52 = v195;
                if (v195 < a3)
                {
                  v52 = v195 + 1;
                  v193 = v5[v195];
                }
                v196 = v52 + 4;
                if (v52 + 4 > a3)
                {
                  v197 = v52 + 4;
                }
                else
                {
                  v191 = *(_DWORD *)&v5[v52];
                  v197 = v52 + 8;
                  v52 += 4;
                }
                if (v197 > a3)
                {
                  v130 = v197;
                }
                else
                {
                  v190 = *(_DWORD *)&v5[v52];
                  v130 = v197 + 4;
                  v52 = v197;
                }
                if (v130 > a3)
                {
                  v602 = v193;
                  v604 = v192;
                  v605 = v190;
                  v606 = v191;
                  goto LABEL_353;
                }
                v53 = 1;
                if (v194 <= a3 && v195 < a3 && v196 <= a3 && v197 <= a3)
                {
                  v198 = *(_DWORD *)&v5[v52];
                  *(double *)v188 = v192;
                  *(_BYTE *)(v188 + 8) = v193;
                  *(_DWORD *)(v188 + 12) = v191;
                  *(_DWORD *)(v188 + 16) = v190;
                  *(_DWORD *)(v188 + 20) = v198;
                  v188 += 24;
                  if (v188 == v189)
                  {
LABEL_338:
                    v602 = v193;
                    v604 = v192;
                    v605 = v190;
                    v606 = v191;
                    v199 = *((_QWORD *)a4 + 20);
                    std::shared_ptr<karo::media::C3mSgNode>::shared_ptr[abi:nn180100]<karo::media::C3mSgAnimation<gm::Matrix<float,3,1>>,void>(&buf, v186);
                    karo::media::C3mSceneGraph::push_back(v199, &buf);
                    goto LABEL_372;
                  }
                  continue;
                }
                break;
              }
              v602 = v193;
              v604 = v192;
              v605 = v190;
              v606 = v191;
              v52 = v130;
              goto LABEL_377;
            case 6u:
              v80 = operator new();
              *(_OWORD *)(v80 + 40) = 0u;
              *(_OWORD *)(v80 + 8) = 0u;
              *(_QWORD *)(v80 + 88) = 0;
              v81 = (char **)(v80 + 88);
              *(_OWORD *)(v80 + 24) = 0u;
              *(_QWORD *)(v80 + 96) = 0;
              *(_QWORD *)(v80 + 104) = 0;
              *(_DWORD *)v80 = 6;
              std::vector<unsigned int>::__assign_with_size[abi:nn180100]<unsigned int *,unsigned int *>((_QWORD *)(v80 + 8), (char *)v48, end, (end - (char *)v48) >> 2);
              std::vector<unsigned int>::__assign_with_size[abi:nn180100]<unsigned int *,unsigned int *>((_QWORD *)(v80 + 32), v55, v56, (v56 - v55) >> 2);
              v82 = v52 + 1;
              if (v52 + 1 > a3)
              {
                v83 = v52 + 1;
              }
              else
              {
                v610 = v5[v52];
                v83 = v52 + 2;
                ++v52;
              }
              if (v83 <= a3)
              {
                v631 = v5[v52];
                v52 = v83;
              }
              v200 = v52 + 2;
              if (v52 + 2 <= a3)
              {
                v628 = *(_WORD *)&v5[v52];
                v52 += 2;
              }
              v201 = v52 + 8;
              if (v52 + 8 > a3)
              {
                v202 = v52 + 8;
              }
              else
              {
                v611 = *(_QWORD *)&v5[v52];
                v202 = v52 + 16;
                v52 += 8;
              }
              if (v202 > a3)
              {
                v203 = v202;
              }
              else
              {
                v612 = *(_QWORD *)&v5[v52];
                v203 = v202 + 8;
                v52 = v202;
              }
              v204 = v80;
              if (v203 <= a3)
              {
                v613 = *(_QWORD *)&v5[v52];
                v52 = v203;
              }
              v130 = v52 + 2;
              if (v52 + 2 > a3)
                goto LABEL_353;
              v53 = 1;
              if (v82 > a3 || v83 > a3 || v200 > a3 || v201 > a3 || v202 > a3 || v203 > a3)
                goto LABEL_376;
              v205 = *(unsigned __int16 *)&v5[v52];
              *(_BYTE *)(v204 + 56) = v610;
              *(_BYTE *)(v204 + 57) = v631;
              *(_WORD *)(v204 + 58) = v628;
              *(_QWORD *)(v204 + 64) = v611;
              *(_QWORD *)(v204 + 72) = v612;
              *(_QWORD *)(v204 + 80) = v613;
              std::vector<karo::media::C3mSgKeyFrame<float>>::resize(v81, v205);
              v206 = *(_QWORD *)(v204 + 88);
              v207 = *(_QWORD *)(v204 + 96);
              v208 = v601;
              v209 = v600;
              if (v206 == v207)
                goto LABEL_371;
              do
              {
                v210 = v130 + 4;
                if (v130 + 4 > a3)
                {
                  v211 = v130;
                }
                else
                {
                  v209 = *(float *)&v5[v130];
                  v211 = v130 + 4;
                }
                v52 = v211 + 1;
                if (v211 >= a3)
                {
                  v130 = v211 + 1;
                  v52 = v211;
                }
                else
                {
                  v208 = v5[v211];
                  v130 = v211 + 2;
                }
                if (v130 > a3)
                {
                  v600 = v209;
                  v601 = v208;
                  goto LABEL_353;
                }
                v53 = 1;
                if (v210 > a3 || v211 >= a3)
                {
                  v600 = v209;
                  v601 = v208;
                  v52 = v130;
                  goto LABEL_377;
                }
                v212 = v5[v52];
                *(double *)v206 = v209;
                *(_BYTE *)(v206 + 8) = v208;
                *(_BYTE *)(v206 + 9) = v212 != 0;
                v206 += 16;
              }
              while (v206 != v207);
LABEL_371:
              v600 = v209;
              v601 = v208;
              v213 = *((_QWORD *)a4 + 20);
              std::shared_ptr<karo::media::C3mSgNode>::shared_ptr[abi:nn180100]<karo::media::C3mSgAnimation<BOOL>,void>(&buf, v204);
              karo::media::C3mSceneGraph::push_back(v213, &buf);
LABEL_372:
              std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&buf);
LABEL_373:
              v53 = 0;
              v74 = v9 + v680;
              if (a3 < v74)
                v74 = a3;
LABEL_375:
              v52 = v74;
              goto LABEL_377;
            case 7u:
              v69 = operator new();
              *(_OWORD *)(v69 + 40) = 0u;
              *(_OWORD *)(v69 + 8) = 0u;
              *(_QWORD *)(v69 + 88) = 0;
              v70 = (char **)(v69 + 88);
              *(_OWORD *)(v69 + 24) = 0u;
              *(_QWORD *)(v69 + 96) = 0;
              *(_QWORD *)(v69 + 104) = 0;
              *(_DWORD *)v69 = 7;
              std::vector<unsigned int>::__assign_with_size[abi:nn180100]<unsigned int *,unsigned int *>((_QWORD *)(v69 + 8), (char *)v48, end, (end - (char *)v48) >> 2);
              std::vector<unsigned int>::__assign_with_size[abi:nn180100]<unsigned int *,unsigned int *>((_QWORD *)(v69 + 32), v55, v56, (v56 - v55) >> 2);
              v71 = v52 + 1;
              if (v52 + 1 > a3)
              {
                v72 = v52 + 1;
              }
              else
              {
                v618 = v5[v52];
                v72 = v52 + 2;
                ++v52;
              }
              if (v72 <= a3)
              {
                v633 = v5[v52];
                v52 = v72;
              }
              v162 = v52 + 2;
              if (v52 + 2 <= a3)
              {
                v630 = *(_WORD *)&v5[v52];
                v52 += 2;
              }
              v163 = v52 + 8;
              if (v52 + 8 > a3)
              {
                v164 = v52 + 8;
              }
              else
              {
                v619 = *(_QWORD *)&v5[v52];
                v164 = v52 + 16;
                v52 += 8;
              }
              if (v164 > a3)
              {
                v165 = v164;
              }
              else
              {
                v620 = *(_QWORD *)&v5[v52];
                v165 = v164 + 8;
                v52 = v164;
              }
              v166 = v69;
              if (v165 <= a3)
              {
                v621 = *(_QWORD *)&v5[v52];
                v52 = v165;
              }
              v130 = v52 + 2;
              if (v52 + 2 > a3)
                goto LABEL_353;
              v53 = 1;
              if (v71 > a3 || v72 > a3 || v162 > a3 || v163 > a3 || v164 > a3 || v165 > a3)
              {
LABEL_376:
                v52 = v130;
                goto LABEL_377;
              }
              v167 = *(unsigned __int16 *)&v5[v52];
              v168 = v166;
              *(_BYTE *)(v166 + 56) = v618;
              *(_BYTE *)(v166 + 57) = v633;
              *(_WORD *)(v166 + 58) = v630;
              *(_QWORD *)(v166 + 64) = v619;
              *(_QWORD *)(v166 + 72) = v620;
              *(_QWORD *)(v166 + 80) = v621;
              std::vector<karo::media::C3mSgKeyFrame<gm::Matrix<float,3,1>>>::resize(v70, v167);
              v169 = *(_QWORD *)(v168 + 88);
              v170 = *(_QWORD *)(v168 + 96);
              v171 = v168;
              v172 = v608;
              v173 = v609;
              v174 = v607;
              v175 = v603;
              if (v169 == v170)
              {
LABEL_299:
                v603 = v175;
                v607 = v174;
                v608 = v172;
                v609 = v173;
                v181 = *((_QWORD *)a4 + 20);
                std::shared_ptr<karo::media::C3mSgNode>::shared_ptr[abi:nn180100]<karo::media::C3mSgAnimation<gm::Matrix<float,3,1>>,void>(&buf, v171);
                karo::media::C3mSceneGraph::push_back(v181, &buf);
                goto LABEL_372;
              }
              break;
            case 8u:
              v84 = operator new();
              *(_OWORD *)(v84 + 40) = 0u;
              *(_OWORD *)(v84 + 24) = 0u;
              *(_OWORD *)(v84 + 8) = 0u;
              *(_DWORD *)v84 = 8;
              std::vector<unsigned int>::__assign_with_size[abi:nn180100]<unsigned int *,unsigned int *>((_QWORD *)(v84 + 8), (char *)v48, end, (end - (char *)v48) >> 2);
              std::vector<unsigned int>::__assign_with_size[abi:nn180100]<unsigned int *,unsigned int *>((_QWORD *)(v84 + 32), v55, v56, (v56 - v55) >> 2);
              if (v52 + 4 > a3)
                goto LABEL_353;
              *(_DWORD *)(v84 + 56) = *(_DWORD *)&v5[v52];
              v85 = *((_QWORD *)a4 + 20);
              std::shared_ptr<karo::media::C3mSgNode>::shared_ptr[abi:nn180100]<karo::media::C3mSgExternalObjectPlaceHolder,void>(&buf, v84);
              karo::media::C3mSceneGraph::push_back(v85, &buf);
              goto LABEL_372;
            default:
              if (GEOGetVectorKitVKDefaultLog_onceToken != -1)
                dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_4_11772);
              v86 = (id)GEOGetVectorKitVKDefaultLog_log;
              if (os_log_type_enabled(v86, OS_LOG_TYPE_ERROR))
              {
                buf.n128_u32[0] = 67109376;
                buf.n128_u32[1] = v689;
                buf.n128_u16[4] = 1024;
                *(unsigned __int32 *)((char *)&buf.n128_u32[2] + 2) = v680;
                _os_log_impl(&dword_19F029000, v86, OS_LOG_TYPE_ERROR, "Unknown node type; %d size: %d",
                  (uint8_t *)&buf,
                  0xEu);
              }

              goto LABEL_373;
          }
          while (1)
          {
            v176 = v130 + 4;
            if (v130 + 4 > a3)
            {
              v177 = v130;
            }
            else
            {
              v174 = *(float *)&v5[v130];
              v177 = v130 + 4;
            }
            v52 = v177;
            if (v177 < a3)
            {
              v52 = v177 + 1;
              v175 = v5[v177];
            }
            v178 = v52 + 4;
            if (v52 + 4 > a3)
            {
              v179 = v52 + 4;
            }
            else
            {
              v173 = *(_DWORD *)&v5[v52];
              v179 = v52 + 8;
              v52 += 4;
            }
            if (v179 > a3)
            {
              v130 = v179;
            }
            else
            {
              v172 = *(_DWORD *)&v5[v52];
              v130 = v179 + 4;
              v52 = v179;
            }
            if (v130 > a3)
            {
              v603 = v175;
              v607 = v174;
              v608 = v172;
              v609 = v173;
              goto LABEL_353;
            }
            v53 = 1;
            if (v176 > a3 || v177 >= a3 || v178 > a3 || v179 > a3)
              break;
            v180 = *(_DWORD *)&v5[v52];
            *(double *)v169 = v174;
            *(_BYTE *)(v169 + 8) = v175;
            *(_DWORD *)(v169 + 12) = v173;
            *(_DWORD *)(v169 + 16) = v172;
            *(_DWORD *)(v169 + 20) = v180;
            v169 += 24;
            if (v169 == v170)
              goto LABEL_299;
          }
          v603 = v175;
          v607 = v174;
          v608 = v172;
          v609 = v173;
          v52 = v130;
LABEL_377:
          v43 = v679;
          if (v697.__begin_)
            operator delete(v697.__begin_);
          v48 = v698.__begin_;
          v9 = v52;
          v8 = 1.0;
          v34 = v689;
          v44 = (int)v683;
          v5 = v663;
          goto LABEL_380;
        }
        break;
      default:
        if (GEOGetVectorKitVKDefaultLog_onceToken != -1)
          dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_4_11772);
        v231 = (id)GEOGetVectorKitVKDefaultLog_log;
        if (os_log_type_enabled(v231, OS_LOG_TYPE_ERROR))
        {
          buf.n128_u32[0] = 67109120;
          buf.n128_u32[1] = v10;
          _os_log_impl(&dword_19F029000, v231, OS_LOG_TYPE_ERROR, "C3M3 Unknown block type: %d", (uint8_t *)&buf, 8u);
        }

        v9 = v11;
        goto LABEL_1166;
    }
    break;
  }
  while (1)
  {
    v215 = v41 + 2;
    if (v41 + 2 > a3)
      return 0;
    v216 = *(unsigned __int16 *)&v5[v41];
    v41 = v215 + v216;
    if (v215 + v216 > a3)
      return 0;
    v217 = (char *)operator new[]();
    v218 = strncpy(v217, (const char *)&v5[v215], v216);
    v218[v216] = 0;
    v219 = strlen(v218);
    if (v219 >= 0x7FFFFFFFFFFFFFF8)
      abort();
    v220 = v219;
    if (v219 >= 0x17)
    {
      v222 = (v219 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v219 | 7) != 0x17)
        v222 = v219 | 7;
      v223 = v222 + 1;
      p_buf = (__n128 *)operator new(v222 + 1);
      v700 = v223 | 0x8000000000000000;
      buf.n128_u64[0] = (unint64_t)p_buf;
      buf.n128_u64[1] = v220;
    }
    else
    {
      HIBYTE(v700) = v219;
      p_buf = &buf;
      if (!v219)
        goto LABEL_441;
    }
    memcpy(p_buf, v217, v220);
LABEL_441:
    p_buf->n128_u8[v220] = 0;
    v224 = *((_QWORD *)a4 + 20);
    v225 = *(__n128 **)(v224 + 8);
    if ((unint64_t)v225 >= *(_QWORD *)(v224 + 16))
    {
      v227 = std::vector<std::string>::__push_back_slow_path<std::string const&>(*((_QWORD *)a4 + 20), (uint64_t)&buf);
      v226 = HIBYTE(v700);
    }
    else
    {
      v226 = HIBYTE(v700);
      if (SHIBYTE(v700) < 0)
      {
        std::string::__init_copy_ctor_external(*(std::string **)(v224 + 8), (const std::string::value_type *)buf.n128_u64[0], buf.n128_u64[1]);
      }
      else
      {
        *v225 = buf;
        v225[1].n128_u64[0] = v700;
      }
      v227 = (std::string *)&v225[1].n128_i8[8];
      *(_QWORD *)(v224 + 8) = (char *)v225 + 24;
    }
    *(_QWORD *)(v224 + 8) = v227;
    MEMORY[0x1A1AF4DE8](v217, 0x1000C8077774924);
    if (v41 >= a3)
      v41 = a3;
    if (v226 < 0)
      operator delete((void *)buf.n128_u64[0]);
    if (!--v42)
      goto LABEL_57;
  }
}

void sub_19F8FF714(_Unwind_Exception *a1)
{
  void *v1;

  ggl::BufferMemory::~BufferMemory((ggl::BufferMemory *)&STACK[0x310]);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x360]);
  karo::media::C3mMesh::~C3mMesh((karo::media::C3mMesh *)&STACK[0x380]);
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_19F8FF934(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

void std::vector<karo::media::C3bMaterial>::__append(char **a1, unint64_t a2)
{
  char *v4;
  char *v5;
  char *v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  size_t v12;
  char *v13;
  char *v14;
  size_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  char *v19;
  char *v20;

  v5 = a1[1];
  v4 = a1[2];
  if (0x6DB6DB6DB6DB6DB7 * ((v4 - v5) >> 3) >= a2)
  {
    if (a2)
    {
      v12 = 56 * ((56 * a2 - 56) / 0x38) + 56;
      bzero(a1[1], v12);
      v5 += v12;
    }
    a1[1] = v5;
  }
  else
  {
    v6 = *a1;
    v7 = 0x6DB6DB6DB6DB6DB7 * ((v5 - *a1) >> 3);
    v8 = v7 + a2;
    if (v7 + a2 > 0x492492492492492)
      abort();
    v9 = 0x6DB6DB6DB6DB6DB7 * ((v4 - v6) >> 3);
    if (2 * v9 > v8)
      v8 = 2 * v9;
    if (v9 >= 0x249249249249249)
      v10 = 0x492492492492492;
    else
      v10 = v8;
    if (v10)
    {
      if (v10 > 0x492492492492492)
        std::__throw_bad_array_new_length[abi:nn180100]();
      v11 = (char *)operator new(56 * v10);
    }
    else
    {
      v11 = 0;
    }
    v13 = &v11[56 * v7];
    v14 = &v11[56 * v10];
    v15 = 56 * ((56 * a2 - 56) / 0x38) + 56;
    bzero(v13, v15);
    v16 = &v13[v15];
    if (v5 == v6)
    {
      *a1 = v13;
      a1[1] = v16;
      a1[2] = v14;
      if (v5)
LABEL_21:
        operator delete(v5);
    }
    else
    {
      v17 = 0;
      do
      {
        v18 = &v13[v17];
        v19 = &v5[v17];
        *(v18 - 56) = v5[v17 - 56];
        *((_QWORD *)v18 - 5) = 0;
        *((_QWORD *)v18 - 4) = 0;
        *((_OWORD *)v18 - 3) = *(_OWORD *)&v5[v17 - 48];
        *((_QWORD *)v18 - 4) = *(_QWORD *)&v5[v17 - 32];
        *((_QWORD *)v19 - 6) = 0;
        *((_QWORD *)v19 - 5) = 0;
        *((_QWORD *)v19 - 4) = 0;
        *((_QWORD *)v18 - 2) = 0;
        *((_QWORD *)v18 - 1) = 0;
        *(_OWORD *)(v18 - 24) = *(_OWORD *)&v5[v17 - 24];
        *((_QWORD *)v18 - 1) = *(_QWORD *)&v5[v17 - 8];
        *((_QWORD *)v19 - 3) = 0;
        *((_QWORD *)v19 - 2) = 0;
        *((_QWORD *)v19 - 1) = 0;
        v17 -= 56;
      }
      while (&v5[v17] != v6);
      v5 = *a1;
      v20 = a1[1];
      *a1 = &v13[v17];
      a1[1] = v16;
      a1[2] = v14;
      while (v20 != v5)
      {
        v20 -= 56;
        std::__destroy_at[abi:nn180100]<karo::media::C3bMaterial,0>(v20);
      }
      if (v5)
        goto LABEL_21;
    }
  }
}

void std::__destroy_at[abi:nn180100]<karo::media::C3bMaterial,0>(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;

  v2 = a1[4];
  if (v2)
  {
    v3 = a1[5];
    v4 = (void *)a1[4];
    if (v3 != v2)
    {
      do
      {
        if (*(char *)(v3 - 1) < 0)
          operator delete(*(void **)(v3 - 24));
        v3 -= 24;
      }
      while (v3 != v2);
      v4 = (void *)a1[4];
    }
    a1[5] = v2;
    operator delete(v4);
  }
  v5 = a1[1];
  if (v5)
  {
    v6 = a1[2];
    v7 = (void *)a1[1];
    if (v6 != v5)
    {
      do
      {
        v8 = *(std::__shared_weak_count **)(v6 - 8);
        if (v8)
        {
          p_shared_owners = (unint64_t *)&v8->__shared_owners_;
          do
            v10 = __ldaxr(p_shared_owners);
          while (__stlxr(v10 - 1, p_shared_owners));
          if (!v10)
          {
            ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
            std::__shared_weak_count::__release_weak(v8);
          }
        }
        v6 -= 24;
      }
      while (v6 != v5);
      v7 = (void *)a1[1];
    }
    a1[2] = v5;
    operator delete(v7);
  }
}

_QWORD *std::string::basic_string[abi:nn180100](_QWORD *__dst, void *__src, size_t __len)
{
  void *v6;
  size_t v7;
  size_t v8;

  if (__len >= 0x17)
  {
    v7 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17)
      v7 = __len | 7;
    v8 = v7 + 1;
    v6 = operator new(v7 + 1);
    __dst[1] = __len;
    __dst[2] = v8 | 0x8000000000000000;
    *__dst = v6;
  }
  else
  {
    *((_BYTE *)__dst + 23) = __len;
    v6 = __dst;
    if (!__len)
      goto LABEL_8;
  }
  memmove(v6, __src, __len);
LABEL_8:
  *((_BYTE *)v6 + __len) = 0;
  return __dst;
}

{
  void *v6;
  size_t v7;
  size_t v8;

  if (__len >= 0x7FFFFFFFFFFFFFF8)
    abort();
  if (__len >= 0x17)
  {
    v7 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17)
      v7 = __len | 7;
    v8 = v7 + 1;
    v6 = operator new(v7 + 1);
    __dst[1] = __len;
    __dst[2] = v8 | 0x8000000000000000;
    *__dst = v6;
  }
  else
  {
    *((_BYTE *)__dst + 23) = __len;
    v6 = __dst;
    if (!__len)
      goto LABEL_9;
  }
  memmove(v6, __src, __len);
LABEL_9:
  *((_BYTE *)v6 + __len) = 0;
  return __dst;
}

std::string *std::vector<std::string>::push_back[abi:nn180100](uint64_t a1, uint64_t a2)
{
  unint64_t v3;
  __int128 v4;
  std::string *result;

  v3 = *(_QWORD *)(a1 + 8);
  if (v3 >= *(_QWORD *)(a1 + 16))
  {
    result = std::vector<std::string>::__push_back_slow_path<std::string const&>(a1, a2);
  }
  else
  {
    if (*(char *)(a2 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(*(std::string **)(a1 + 8), *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
    }
    else
    {
      v4 = *(_OWORD *)a2;
      *(_QWORD *)(v3 + 16) = *(_QWORD *)(a2 + 16);
      *(_OWORD *)v3 = v4;
    }
    result = (std::string *)(v3 + 24);
    *(_QWORD *)(a1 + 8) = v3 + 24;
  }
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

void sub_19F8FFDA8(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void std::vector<unsigned char>::resize(uint64_t a1, unint64_t a2)
{
  char *v4;
  char *v5;
  unint64_t v6;
  size_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  size_t v11;
  char *v12;
  char *v13;
  char *v14;
  char *v15;
  unint64_t v16;
  char *v17;
  char *v18;
  unint64_t v19;
  __int128 v20;
  unint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  char *v25;
  char v26;

  v5 = *(char **)a1;
  v4 = *(char **)(a1 + 8);
  v6 = (unint64_t)&v4[-*(_QWORD *)a1];
  v7 = a2 - v6;
  if (a2 > v6)
  {
    v8 = *(_QWORD *)(a1 + 16);
    if (v8 - (uint64_t)v4 >= v7)
    {
      bzero(*(void **)(a1 + 8), a2 - v6);
      *(_QWORD *)(a1 + 8) = &v4[v7];
      return;
    }
    if ((a2 & 0x8000000000000000) != 0)
      abort();
    v9 = v8 - (_QWORD)v5;
    v10 = 2 * v9;
    if (2 * v9 <= a2)
      v10 = a2;
    if (v9 >= 0x3FFFFFFFFFFFFFFFLL)
      v11 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v11 = v10;
    v12 = (char *)operator new(v11);
    v13 = &v12[v6];
    v14 = &v12[v11];
    v15 = &v12[a2];
    bzero(&v12[v6], v7);
    if (v4 == v5)
      goto LABEL_29;
    if (v6 < 8 || (unint64_t)(v5 - v12) < 0x20)
      goto LABEL_26;
    if (v6 >= 0x20)
    {
      v16 = v6 & 0xFFFFFFFFFFFFFFE0;
      v17 = v4 - 16;
      v18 = &v12[v4 - 16 - v5];
      v19 = v6 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        v20 = *(_OWORD *)v17;
        *((_OWORD *)v18 - 1) = *((_OWORD *)v17 - 1);
        *(_OWORD *)v18 = v20;
        v18 -= 32;
        v17 -= 32;
        v19 -= 32;
      }
      while (v19);
      if (v6 == v16)
        goto LABEL_28;
      if ((v6 & 0x18) == 0)
      {
        v13 -= v16;
        v4 -= v16;
        goto LABEL_26;
      }
    }
    else
    {
      v16 = 0;
    }
    v21 = v16 - (v6 & 0xFFFFFFFFFFFFFFF8);
    v22 = &v4[-v16 - 8];
    v23 = (char *)(v22 - v5);
    do
    {
      v24 = *(_QWORD *)v22;
      v22 -= 8;
      *(_QWORD *)&v23[(_QWORD)v12] = v24;
      v23 -= 8;
      v21 += 8;
    }
    while (v21);
    if (v6 == (v6 & 0xFFFFFFFFFFFFFFF8))
      goto LABEL_28;
    v13 -= v6 & 0xFFFFFFFFFFFFFFF8;
    v4 -= v6 & 0xFFFFFFFFFFFFFFF8;
LABEL_26:
    v25 = v13 - 1;
    do
    {
      v26 = *--v4;
      *v25-- = v26;
    }
    while (v4 != v5);
LABEL_28:
    v4 = v5;
    v13 = v12;
LABEL_29:
    *(_QWORD *)a1 = v13;
    *(_QWORD *)(a1 + 8) = v15;
    *(_QWORD *)(a1 + 16) = v14;
    if (v4)
      operator delete(v4);
    return;
  }
  if (a2 < v6)
    *(_QWORD *)(a1 + 8) = &v5[a2];
}

{
  char *v4;
  char *v5;
  unint64_t v6;
  size_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  size_t v11;
  char *v12;
  char *v13;
  char *v14;
  char *v15;
  unint64_t v16;
  char *v17;
  char *v18;
  unint64_t v19;
  __int128 v20;
  char *v21;
  char *v22;
  unint64_t v23;
  uint64_t v24;
  char *v25;
  char v26;

  v5 = *(char **)a1;
  v4 = *(char **)(a1 + 8);
  v6 = (unint64_t)&v4[-*(_QWORD *)a1];
  v7 = a2 - v6;
  if (a2 > v6)
  {
    v8 = *(_QWORD *)(a1 + 16);
    if (v8 - (uint64_t)v4 >= v7)
    {
      bzero(*(void **)(a1 + 8), a2 - v6);
      *(_QWORD *)(a1 + 8) = &v4[v7];
      return;
    }
    if ((a2 & 0x8000000000000000) != 0)
      std::vector<double>::__throw_length_error[abi:ne180100]();
    v9 = v8 - (_QWORD)v5;
    v10 = 2 * v9;
    if (2 * v9 <= a2)
      v10 = a2;
    if (v9 >= 0x3FFFFFFFFFFFFFFFLL)
      v11 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v11 = v10;
    v12 = (char *)operator new(v11);
    v13 = &v12[v6];
    v14 = &v12[v11];
    v15 = &v12[a2];
    bzero(&v12[v6], v7);
    if (v4 == v5)
      goto LABEL_29;
    if (v6 >= 8 && (unint64_t)(v5 - v12) >= 0x20)
    {
      if (v6 < 0x20)
      {
        v16 = 0;
        goto LABEL_21;
      }
      v16 = v6 & 0xFFFFFFFFFFFFFFE0;
      v17 = v4 - 16;
      v18 = &v12[v4 - 16 - v5];
      v19 = v6 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        v20 = *(_OWORD *)v17;
        *((_OWORD *)v18 - 1) = *((_OWORD *)v17 - 1);
        *(_OWORD *)v18 = v20;
        v18 -= 32;
        v17 -= 32;
        v19 -= 32;
      }
      while (v19);
      if (v6 == v16)
        goto LABEL_28;
      if ((v6 & 0x18) != 0)
      {
LABEL_21:
        v13 -= v6 & 0xFFFFFFFFFFFFFFF8;
        v21 = &v4[-v16 - 8];
        v22 = (char *)(v21 - v5);
        v23 = v16 - (v6 & 0xFFFFFFFFFFFFFFF8);
        do
        {
          v24 = *(_QWORD *)v21;
          v21 -= 8;
          *(_QWORD *)&v22[(_QWORD)v12] = v24;
          v22 -= 8;
          v23 += 8;
        }
        while (v23);
        v4 -= v6 & 0xFFFFFFFFFFFFFFF8;
        if (v6 == (v6 & 0xFFFFFFFFFFFFFFF8))
          goto LABEL_28;
        goto LABEL_26;
      }
      v13 -= v16;
      v4 -= v16;
    }
LABEL_26:
    v25 = v13 - 1;
    do
    {
      v26 = *--v4;
      *v25-- = v26;
    }
    while (v4 != v5);
LABEL_28:
    v4 = v5;
    v13 = v12;
LABEL_29:
    *(_QWORD *)a1 = v13;
    *(_QWORD *)(a1 + 8) = v15;
    *(_QWORD *)(a1 + 16) = v14;
    if (v4)
      operator delete(v4);
    return;
  }
  if (a2 < v6)
    *(_QWORD *)(a1 + 8) = &v5[a2];
}

BOOL `anonymous namespace'::lzma_decompress(_anonymous_namespace_ *this, unsigned __int8 *a2, _BYTE *a3, const unsigned __int8 *a4, char a5)
{
  NSObject *v10;
  _BOOL8 v11;
  _BYTE *v12;
  int v13;
  NSObject *v14;
  uint8_t v16[16];
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  uint8_t buf[24];
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v25 = 0;
  v23 = 0u;
  v24 = 0u;
  v21 = 0u;
  v22 = 0u;
  v19 = 0u;
  v20 = 0u;
  v17 = 0u;
  v18 = 0u;
  if (lzma_auto_decoder())
  {
    if (GEOGetVectorKitVKDefaultLog_onceToken != -1)
      dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_4_11772);
    v10 = (id)GEOGetVectorKitVKDefaultLog_log;
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_19F029000, v10, OS_LOG_TYPE_ERROR, "Failed to intialize the lzma decoder.", buf, 2u);
    }

    return 0;
  }
  else
  {
    if ((a5 & 1) != 0)
    {
      v12 = a3;
    }
    else
    {
      v12 = a3 - 8;
      *(_OWORD *)buf = *(_OWORD *)(a3 - 8);
      *(a3 - 8) = *a3;
      *(_QWORD *)(a3 - 3) = -1;
      *(_DWORD *)(a3 - 7) = 0x100000;
      a4 += 8;
    }
    *(_QWORD *)&v17 = v12;
    *((_QWORD *)&v17 + 1) = a4;
    *((_QWORD *)&v18 + 1) = this;
    *(_QWORD *)&v19 = a2;
    v13 = lzma_code();
    v11 = v13 == 0;
    if (v13)
    {
      if (GEOGetVectorKitVKDefaultLog_onceToken != -1)
        dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_4_11772);
      v14 = (id)GEOGetVectorKitVKDefaultLog_log;
      if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)v16 = 0;
        _os_log_impl(&dword_19F029000, v14, OS_LOG_TYPE_ERROR, "Failed to decode lzma data.", v16, 2u);
      }

    }
    lzma_end();
    if ((a5 & 1) == 0)
      *(_OWORD *)(a3 - 8) = *(_OWORD *)buf;
  }
  return v11;
}

uint64_t **std::map<karo::media::C3bMaterialClass,std::vector<std::shared_ptr<karo::media::Image>>>::operator[](uint64_t **a1, int a2)
{
  uint64_t *v4;
  uint64_t **v5;
  uint64_t **v6;
  int v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;

  v5 = a1 + 1;
  v4 = a1[1];
  if (v4)
  {
    while (1)
    {
      while (1)
      {
        v6 = (uint64_t **)v4;
        v7 = *((_DWORD *)v4 + 8);
        if (v7 <= a2)
          break;
        v4 = *v6;
        v5 = v6;
        if (!*v6)
          goto LABEL_8;
      }
      if (v7 >= a2)
        break;
      v4 = v6[1];
      if (!v4)
      {
        v5 = v6 + 1;
        goto LABEL_8;
      }
    }
  }
  else
  {
    v6 = a1 + 1;
LABEL_8:
    v8 = (uint64_t *)v6;
    v6 = (uint64_t **)operator new(0x40uLL);
    *((_DWORD *)v6 + 8) = a2;
    v6[6] = 0;
    v6[7] = 0;
    v6[5] = 0;
    *v6 = 0;
    v6[1] = 0;
    v6[2] = v8;
    *v5 = (uint64_t *)v6;
    v9 = (uint64_t *)**a1;
    v10 = (uint64_t *)v6;
    if (v9)
    {
      *a1 = v9;
      v10 = *v5;
    }
    std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(a1[1], v10);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  return v6 + 5;
}

__n128 *std::vector<std::shared_ptr<karo::media::Image>>::push_back[abi:nn180100](uint64_t a1, __n128 *a2)
{
  __n128 *v3;
  unint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  __n128 *result;

  v3 = *(__n128 **)(a1 + 8);
  if ((unint64_t)v3 >= *(_QWORD *)(a1 + 16))
  {
    result = std::vector<std::shared_ptr<md::MuninRoadLabel>>::__push_back_slow_path<std::shared_ptr<md::MuninRoadLabel> const&>(a1, *a2);
  }
  else
  {
    v4 = a2->n128_u64[1];
    v3->n128_u64[0] = a2->n128_u64[0];
    v3->n128_u64[1] = v4;
    if (v4)
    {
      v5 = (unint64_t *)(v4 + 8);
      do
        v6 = __ldxr(v5);
      while (__stxr(v6 + 1, v5));
    }
    result = v3 + 1;
  }
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

void std::vector<karo::media::C3bMaterial::C3bMaterialImage>::resize(uint64_t a1, unint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  BOOL v5;
  unint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;

  v3 = *(_QWORD *)(a1 + 8);
  v4 = 0xAAAAAAAAAAAAAAABLL * ((v3 - *(_QWORD *)a1) >> 3);
  v5 = a2 >= v4;
  v6 = a2 - v4;
  if (v6 != 0 && v5)
  {
    std::vector<karo::media::C3bMaterial::C3bMaterialImage>::__append((char **)a1, v6);
  }
  else if (!v5)
  {
    v7 = *(_QWORD *)a1 + 24 * a2;
    while (v3 != v7)
    {
      v8 = *(std::__shared_weak_count **)(v3 - 8);
      if (v8)
      {
        p_shared_owners = (unint64_t *)&v8->__shared_owners_;
        do
          v10 = __ldaxr(p_shared_owners);
        while (__stlxr(v10 - 1, p_shared_owners));
        if (!v10)
        {
          ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
          std::__shared_weak_count::__release_weak(v8);
        }
      }
      v3 -= 24;
    }
    *(_QWORD *)(a1 + 8) = v7;
  }
}

uint64_t karo::media::C3bMaterial::C3bMaterialImage::operator=(uint64_t a1, uint64_t a2)
{
  __int128 v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  v3 = *(_OWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  v4 = *(std::__shared_weak_count **)(a1 + 16);
  *(_OWORD *)(a1 + 8) = v3;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  return a1;
}

ggl::Data *std::make_shared[abi:nn180100]<ggl::Data,unsigned char const*&,unsigned int const&,void>(ggl::Data **a1, const unsigned __int8 *a2, unsigned int a3)
{
  _QWORD *v6;
  ggl::Data *result;

  v6 = operator new(0x30uLL);
  v6[1] = 0;
  v6[2] = 0;
  *v6 = &off_1E42E42D8;
  result = ggl::Data::Data((ggl::Data *)(v6 + 3), a2, a3);
  *a1 = result;
  a1[1] = (ggl::Data *)v6;
  return result;
}

void karo::media::Image::setSourceJpegData(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t *v3;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  if (a3)
  {
    v3 = (unint64_t *)(a3 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  v5 = *(std::__shared_weak_count **)(a1 + 32);
  *(_QWORD *)(a1 + 24) = a2;
  *(_QWORD *)(a1 + 32) = a3;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
}

void karo::media::Image::setSourceHeifData(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t *v3;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  if (a3)
  {
    v3 = (unint64_t *)(a3 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  v5 = *(std::__shared_weak_count **)(a1 + 64);
  *(_QWORD *)(a1 + 56) = a2;
  *(_QWORD *)(a1 + 64) = a3;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
}

void karo::media::Image::setSourceH264Parameters(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;

  if (a3)
  {
    v6 = (unint64_t *)(a3 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  v8 = (std::__shared_weak_count *)a1[10];
  a1[9] = a2;
  a1[10] = a3;
  if (!v8)
    goto LABEL_8;
  p_shared_owners = (unint64_t *)&v8->__shared_owners_;
  do
    v10 = __ldaxr(p_shared_owners);
  while (__stlxr(v10 - 1, p_shared_owners));
  if (!v10)
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
    v12 = *a4;
    v11 = a4[1];
    if (!v11)
      goto LABEL_11;
  }
  else
  {
LABEL_8:
    v12 = *a4;
    v11 = a4[1];
    if (!v11)
      goto LABEL_11;
  }
  v13 = (unint64_t *)(v11 + 8);
  do
    v14 = __ldxr(v13);
  while (__stxr(v14 + 1, v13));
LABEL_11:
  v15 = (std::__shared_weak_count *)a1[12];
  a1[11] = v12;
  a1[12] = v11;
  if (v15)
  {
    v16 = (unint64_t *)&v15->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
}

void karo::media::Image::setSourceH264Data(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t *v3;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  if (a3)
  {
    v3 = (unint64_t *)(a3 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  v5 = *(std::__shared_weak_count **)(a1 + 48);
  *(_QWORD *)(a1 + 40) = a2;
  *(_QWORD *)(a1 + 48) = a3;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
}

void std::vector<karo::media::C3bMaterial::C3bMaterialImage>::__append(char **a1, unint64_t a2)
{
  char *v4;
  char *v5;
  char *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  size_t v12;
  char *v13;
  char *v14;
  size_t v15;
  char *v16;
  int v17;
  char *v18;
  std::__shared_weak_count *v19;
  unint64_t *p_shared_owners;
  unint64_t v21;

  v5 = a1[1];
  v4 = a1[2];
  if (0xAAAAAAAAAAAAAAABLL * ((v4 - v5) >> 3) >= a2)
  {
    if (a2)
    {
      v12 = 24 * ((24 * a2 - 24) / 0x18) + 24;
      bzero(a1[1], v12);
      v5 += v12;
    }
    a1[1] = v5;
  }
  else
  {
    v6 = *a1;
    v7 = 0xAAAAAAAAAAAAAAABLL * ((v5 - *a1) >> 3);
    v8 = v7 + a2;
    if (v7 + a2 > 0xAAAAAAAAAAAAAAALL)
      abort();
    v9 = 0xAAAAAAAAAAAAAAABLL * ((v4 - v6) >> 3);
    if (2 * v9 > v8)
      v8 = 2 * v9;
    if (v9 >= 0x555555555555555)
      v10 = 0xAAAAAAAAAAAAAAALL;
    else
      v10 = v8;
    if (v10)
    {
      if (v10 > 0xAAAAAAAAAAAAAAALL)
        std::__throw_bad_array_new_length[abi:nn180100]();
      v11 = (char *)operator new(24 * v10);
    }
    else
    {
      v11 = 0;
    }
    v13 = &v11[24 * v7];
    v14 = &v11[24 * v10];
    v15 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v13, v15);
    v16 = &v13[v15];
    if (v5 == v6)
    {
      *a1 = v13;
      a1[1] = v16;
      a1[2] = v14;
    }
    else
    {
      do
      {
        v17 = *((_DWORD *)v5 - 6);
        v5 -= 24;
        *((_DWORD *)v13 - 6) = v17;
        v13 -= 24;
        *(_OWORD *)(v13 + 8) = *(_OWORD *)(v5 + 8);
        *((_QWORD *)v5 + 1) = 0;
        *((_QWORD *)v5 + 2) = 0;
      }
      while (v5 != v6);
      v5 = *a1;
      v18 = a1[1];
      *a1 = v13;
      a1[1] = v16;
      a1[2] = v14;
      while (v18 != v5)
      {
        v19 = (std::__shared_weak_count *)*((_QWORD *)v18 - 1);
        if (v19)
        {
          p_shared_owners = (unint64_t *)&v19->__shared_owners_;
          do
            v21 = __ldaxr(p_shared_owners);
          while (__stlxr(v21 - 1, p_shared_owners));
          if (!v21)
          {
            ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
            std::__shared_weak_count::__release_weak(v19);
          }
        }
        v18 -= 24;
      }
    }
    if (v5)
      operator delete(v5);
  }
}

void std::vector<karo::media::C3mMesh>::reserve(unint64_t *a1, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v5;
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  __int128 v12;
  char *v13;
  int64x2_t v14;
  void *__p;
  int64x2_t v16;
  unint64_t v17;
  unint64_t *v18;

  v2 = a1[2];
  v3 = *a1;
  if (0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(v2 - *a1) >> 3) < a2)
  {
    v5 = a1[1];
    v18 = a1 + 2;
    v6 = 120 * a2;
    v7 = (char *)operator new(120 * a2);
    v8 = &v7[v5 - v3];
    if (v5 == v3)
    {
      v14 = vdupq_n_s64(v3);
      v13 = &v7[v5 - v3];
    }
    else
    {
      v9 = 0;
      do
      {
        v10 = &v8[v9];
        v11 = v5 + v9;
        *((_QWORD *)v10 - 15) = *(_QWORD *)(v5 + v9 - 120);
        v12 = *(_OWORD *)(v5 + v9 - 112);
        *((_QWORD *)v10 - 12) = *(_QWORD *)(v5 + v9 - 96);
        *((_OWORD *)v10 - 7) = v12;
        *(_QWORD *)(v11 - 104) = 0;
        *(_QWORD *)(v11 - 96) = 0;
        *(_QWORD *)(v11 - 112) = 0;
        *((_DWORD *)v10 - 22) = *(_DWORD *)(v5 + v9 - 88);
        *((_OWORD *)v10 - 5) = *(_OWORD *)(v5 + v9 - 80);
        *(_QWORD *)(v11 - 80) = 0;
        *(_QWORD *)(v11 - 72) = 0;
        *((_DWORD *)v10 - 16) = *(_DWORD *)(v5 + v9 - 64);
        *(_OWORD *)(v10 - 56) = *(_OWORD *)(v5 + v9 - 56);
        *(_QWORD *)(v11 - 56) = 0;
        *(_QWORD *)(v11 - 48) = 0;
        *(_OWORD *)(v10 - 40) = *(_OWORD *)(v5 + v9 - 40);
        *((_QWORD *)v10 - 3) = *(_QWORD *)(v5 + v9 - 24);
        *(_QWORD *)(v11 - 40) = 0;
        *(_QWORD *)(v11 - 32) = 0;
        *(_QWORD *)(v11 - 24) = 0;
        *((_OWORD *)v10 - 1) = *(_OWORD *)(v5 + v9 - 16);
        v9 -= 120;
      }
      while (v5 + v9 != v3);
      v13 = &v8[v9];
      v14 = *(int64x2_t *)a1;
      v2 = a1[2];
    }
    *a1 = (unint64_t)v13;
    a1[1] = (unint64_t)v8;
    v16 = v14;
    a1[2] = (unint64_t)&v7[v6];
    v17 = v2;
    __p = (void *)v14.i64[0];
    std::__split_buffer<karo::media::C3mMesh>::__destruct_at_end[abi:nn180100]((uint64_t)&__p, v14.i64[0]);
    if (__p)
      operator delete(__p);
  }
}

uint64_t std::make_shared[abi:nn180100]<ggl::VertexDataTyped<ggl::CommonMesh::BufferPos4UV>,char const(&)[10],unsigned short const&,ggl::BufferUsage,void>(uint64_t *a1, unsigned __int16 a2, char a3)
{
  _QWORD *v6;
  uint64_t result;

  v6 = operator new(0xF8uLL);
  v6[1] = 0;
  v6[2] = 0;
  *v6 = &off_1E42DF990;
  result = ggl::BufferData::BufferData((uint64_t)(v6 + 3), 32, 0, 0, a3, a2);
  v6[29] = "C3B VData";
  v6[30] = &ggl::CommonMesh::bufferPos4UVReflection;
  v6[3] = &off_1E42B75A0;
  v6[28] = &unk_1E42B75C0;
  *a1 = result;
  a1[1] = (uint64_t)v6;
  return result;
}

uint64_t *ggl::DataWrite<ggl::CommonMesh::BufferPos4UV>::DataWrite(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  _QWORD *v9;
  int v10;
  int v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int16 v19;
  uint64_t v20;

  v5 = 0;
  a1[5] = 0;
  *a1 = 0;
  a1[1] = 0;
  v6 = *(_QWORD *)(a2 + 8);
  v19 = 1;
  v15 = 0;
  v16 = a2;
  v17 = v6 * a3;
  v18 = v6 * a4;
  if (v6 * a4 != v6 * a3)
    v5 = *(_QWORD *)(a2 + 72) + v6 * a3;
  v20 = v5;
  ggl::BufferMemory::operator=(a1, (uint64_t)&v15);
  if (v20)
  {
    v8 = v17;
    v7 = v18;
    if (v18 != v17)
    {
      v9 = (_QWORD *)v16;
      v10 = v19;
      v11 = HIBYTE(v19);
      if (v15 && *(_BYTE *)(v16 + 17) != 2)
        (*(void (**)(void))(*(_QWORD *)v15 + 64))();
      if (v10 && !v11)
      {
        v13 = v9[7];
        v12 = v9[8];
        if (v12 == v13)
          v13 = v9[10] - v9[9];
        if (v8 < v13)
          v13 = v8;
        if (v12 <= v7)
          v12 = v7;
        if (v12 == v13)
          v12 = v13 + v9[10] - v9[9];
        v9[7] = v13;
        v9[8] = v12;
      }
    }
  }
  return a1;
}

_QWORD *std::shared_ptr<ggl::VertexData>::operator=[abi:nn180100]<ggl::VertexDataTyped<ggl::CommonMesh::BufferPos4UV>,void>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  unint64_t *v4;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;

  if (a3)
  {
    v4 = (unint64_t *)(a3 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = (std::__shared_weak_count *)a1[1];
  *a1 = a2;
  a1[1] = a3;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  return a1;
}

void std::vector<unsigned short>::reserve(uint64_t a1, unint64_t a2)
{
  _BYTE *v2;
  _BYTE *v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  __int128 *v13;
  unint64_t v14;
  __int128 v15;
  __int16 v16;

  v2 = *(_BYTE **)a1;
  if (a2 > (uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 1)
  {
    v4 = *(_BYTE **)(a1 + 8);
    v5 = 2 * a2;
    v6 = (char *)operator new(2 * a2);
    v7 = v4 - v2;
    v8 = &v6[(v4 - v2) & 0xFFFFFFFFFFFFFFFELL];
    v9 = v8;
    if (v4 != v2)
    {
      if ((unint64_t)(v7 - 2) >= 0x1E)
      {
        v9 = &v6[(v4 - v2) & 0xFFFFFFFFFFFFFFFELL];
        if (v4 - v6 - (v7 & 0xFFFFFFFFFFFFFFFELL) >= 0x20)
        {
          v10 = v7 >> 1;
          v11 = ((unint64_t)(v7 - 2) >> 1) + 1;
          v12 = &v6[2 * v10 - 16];
          v13 = (__int128 *)(v4 - 16);
          v14 = v11 & 0xFFFFFFFFFFFFFFF0;
          do
          {
            v15 = *v13;
            *((_OWORD *)v12 - 1) = *(v13 - 1);
            *(_OWORD *)v12 = v15;
            v12 -= 32;
            v13 -= 2;
            v14 -= 16;
          }
          while (v14);
          v9 = &v8[-2 * (v11 & 0xFFFFFFFFFFFFFFF0)];
          v4 -= 2 * (v11 & 0xFFFFFFFFFFFFFFF0);
          if (v11 == (v11 & 0xFFFFFFFFFFFFFFF0))
            goto LABEL_10;
        }
      }
      else
      {
        v9 = &v6[(v4 - v2) & 0xFFFFFFFFFFFFFFFELL];
      }
      do
      {
        v16 = *((_WORD *)v4 - 1);
        v4 -= 2;
        *((_WORD *)v9 - 1) = v16;
        v9 -= 2;
      }
      while (v4 != v2);
    }
LABEL_10:
    *(_QWORD *)a1 = v9;
    *(_QWORD *)(a1 + 8) = v8;
    *(_QWORD *)(a1 + 16) = &v6[v5];
    if (v2)
      operator delete(v2);
  }
}

void std::vector<unsigned short>::push_back[abi:nn180100](uint64_t a1, __int16 a2)
{
  unint64_t v4;
  char *v5;
  char *v6;
  _WORD *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  _WORD *v15;
  char *v16;
  unint64_t v17;
  uint64_t v18;
  _OWORD *v19;
  char *v20;
  unint64_t v21;
  __int128 v22;
  __int16 v23;

  v5 = *(char **)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  v6 = v5;
  if ((unint64_t)v5 >= v4)
  {
    v8 = *(char **)a1;
    v9 = (uint64_t)&v5[-*(_QWORD *)a1];
    if (v9 <= -3)
      abort();
    v10 = v9 >> 1;
    v11 = v4 - (_QWORD)v8;
    if (v11 <= (v9 >> 1) + 1)
      v12 = v10 + 1;
    else
      v12 = v11;
    if (v11 >= 0x7FFFFFFFFFFFFFFELL)
      v13 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v13 = v12;
    if (v13)
    {
      if (v13 < 0)
        std::__throw_bad_array_new_length[abi:nn180100]();
      v14 = operator new(2 * v13);
    }
    else
    {
      v14 = 0;
    }
    v15 = &v14[2 * v10];
    v16 = &v14[2 * v13];
    *v15 = a2;
    v7 = v15 + 1;
    if (v5 != v8)
    {
      v17 = v5 - v8 - 2;
      if (v17 < 0x1E)
        goto LABEL_28;
      if (v5 - v14 - (v9 & 0xFFFFFFFFFFFFFFFELL) < 0x20)
        goto LABEL_28;
      v18 = (v17 >> 1) + 1;
      v6 = &v5[-2 * (v18 & 0xFFFFFFFFFFFFFFF0)];
      v19 = &v14[2 * v10 - 16];
      v20 = v5 - 16;
      v21 = v18 & 0xFFFFFFFFFFFFFFF0;
      do
      {
        v22 = *(_OWORD *)v20;
        *(v19 - 1) = *((_OWORD *)v20 - 1);
        *v19 = v22;
        v19 -= 2;
        v20 -= 32;
        v21 -= 16;
      }
      while (v21);
      v15 -= v18 & 0xFFFFFFFFFFFFFFF0;
      if (v18 != (v18 & 0xFFFFFFFFFFFFFFF0))
      {
LABEL_28:
        do
        {
          v23 = *((_WORD *)v6 - 1);
          v6 -= 2;
          *--v15 = v23;
        }
        while (v6 != v8);
      }
    }
    *(_QWORD *)a1 = v15;
    *(_QWORD *)(a1 + 8) = v7;
    *(_QWORD *)(a1 + 16) = v16;
    if (v8)
      operator delete(v8);
  }
  else
  {
    *(_WORD *)v5 = a2;
    v7 = v5 + 2;
  }
  *(_QWORD *)(a1 + 8) = v7;
}

void `anonymous namespace'::computeCenterPoint(uint64_t a1, unsigned __int16 **a2)
{
  uint64_t v4;
  uint64_t v5;
  char v6;
  const char **v7;
  const char *v8;
  unsigned __int16 *v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  NSObject *v16;
  unint64_t v17;
  float32x2_t v18;
  float32x2_t v19;
  unsigned int v20;
  float v21;
  float v22;
  unint64_t v23;
  float32x2_t *v24;
  float v25;
  char v26;
  uint8_t *v27;
  uint8_t buf[16];

  if (a1)
  {
    v4 = **(_QWORD **)(a1 + 216);
    v5 = *(_QWORD *)(v4 + 16);
    if (v5)
    {
      v6 = 0;
      v7 = *(const char ***)(v4 + 8);
      do
      {
        v8 = *v7;
        v7 += 4;
        v6 |= strcmp(v8, "a_position") == 0;
        --v5;
      }
      while (v5);
    }
    else
    {
      v6 = 0;
    }
    v9 = a2[1];
    v10 = (char *)v9 - (char *)*a2;
    if ((v6 & 1) != 0 && v9 != *a2)
    {
      v11 = *(_QWORD *)(a1 + 8);
      v12 = (*(_QWORD *)(a1 + 48) - *(_QWORD *)(a1 + 40)) / v11;
      if (v12 <= **a2)
      {
        if (GEOGetVectorKitVKDefaultLog_onceToken != -1)
          dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_4_11772);
        v16 = (id)GEOGetVectorKitVKDefaultLog_log;
        if (!os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
          goto LABEL_29;
        *(_WORD *)buf = 0;
      }
      else
      {
        v13 = v11 * v12;
        if ((*(_BYTE *)(a1 + 16) & 2) == 0)
        {
          v14 = atomic_load(&ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::flag);
          if (v14 != -1)
          {
            *(_QWORD *)buf = &v26;
            v27 = buf;
            std::__call_once(&ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::flag, &v27, (void (__cdecl *)(void *))std::__call_once_proxy[abi:nn180100]<std::tuple<ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::$_0 &&>>);
          }
        }
        if (v13)
          v15 = *(_QWORD *)(a1 + 72);
        else
          v15 = 0;
        v17 = 0;
        v18 = (float32x2_t)vdup_n_s32(0x7F7FFFFFu);
        v19 = (float32x2_t)0x80000000800000;
        v20 = 1;
        v21 = 3.4028e38;
        v22 = -3.4028e38;
        while (1)
        {
          v23 = (*a2)[v17];
          if (v12 <= v23)
            break;
          v24 = (float32x2_t *)(v15 + 32 * v23);
          v25 = v24[1].f32[0];
          v18 = vminnm_f32(*v24, v18);
          v19 = vmaxnm_f32(v19, *v24);
          v21 = fminf(v25, v21);
          v22 = fmaxf(v22, v25);
          v17 = v20++;
          if (v10 >> 1 <= v17)
            return;
        }
        if (GEOGetVectorKitVKDefaultLog_onceToken != -1)
          dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_4_11772);
        v16 = (id)GEOGetVectorKitVKDefaultLog_log;
        if (!os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
          goto LABEL_29;
        *(_WORD *)buf = 0;
      }
      _os_log_impl(&dword_19F029000, v16, OS_LOG_TYPE_ERROR, "Index pointing outside vertex buffer", buf, 2u);
LABEL_29:

    }
  }
}

uint64_t std::vector<karo::media::C3mMesh>::push_back[abi:nn180100](int64x2_t *a1, const karo::media::C3mMesh *a2)
{
  unint64_t v3;
  uint64_t result;

  v3 = a1->u64[1];
  if (v3 >= a1[1].i64[0])
  {
    result = std::vector<karo::media::C3mMesh>::__push_back_slow_path<karo::media::C3mMesh const&>(a1, a2);
  }
  else
  {
    karo::media::C3mMesh::C3mMesh((karo::media::C3mMesh *)a1->i64[1], a2);
    result = v3 + 120;
    a1->i64[1] = v3 + 120;
  }
  a1->i64[1] = result;
  return result;
}

void sub_19F9010C4(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void karo::media::C3mMesh::~C3mMesh(karo::media::C3mMesh *this)
{
  void *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  v2 = (void *)*((_QWORD *)this + 10);
  if (v2)
  {
    *((_QWORD *)this + 11) = v2;
    operator delete(v2);
  }
  v3 = (std::__shared_weak_count *)*((_QWORD *)this + 9);
  if (!v3)
    goto LABEL_7;
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (!v5)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
    v6 = (std::__shared_weak_count *)*((_QWORD *)this + 6);
    if (!v6)
      goto LABEL_13;
  }
  else
  {
LABEL_7:
    v6 = (std::__shared_weak_count *)*((_QWORD *)this + 6);
    if (!v6)
      goto LABEL_13;
  }
  v7 = (unint64_t *)&v6->__shared_owners_;
  do
    v8 = __ldaxr(v7);
  while (__stlxr(v8 - 1, v7));
  if (!v8)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
LABEL_13:
  if (*((char *)this + 31) < 0)
    operator delete(*((void **)this + 1));
}

_QWORD *std::shared_ptr<karo::media::C3mSgNode>::shared_ptr[abi:nn180100]<karo::media::C3mSgStaticTransform,void>(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  *a1 = a2;
  v4 = (_QWORD *)operator new();
  *v4 = &off_1E42E8248;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_19F9011DC(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  void *v3;
  void *v4;

  if (v1)
  {
    v3 = (void *)v1[4];
    if (v3)
    {
      v1[5] = v3;
      operator delete(v3);
    }
    v4 = (void *)v1[1];
    if (v4)
    {
      v1[2] = v4;
      operator delete(v4);
    }
    MEMORY[0x1A1AF4E00](v1, 0x1010C4063343E98);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<karo::media::C3mSgKeyFrame<float>>::resize(char **a1, unint64_t a2)
{
  char *v3;
  char *v4;
  unint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  unint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;

  v4 = *a1;
  v3 = a1[1];
  v5 = (v3 - *a1) >> 4;
  v6 = a2 - v5;
  if (a2 <= v5)
  {
    if (a2 >= v5)
      return;
    v17 = &v4[16 * a2];
    goto LABEL_17;
  }
  v7 = a1[2];
  if (v6 <= (v7 - v3) >> 4)
  {
    bzero(a1[1], 16 * v6);
    v17 = &v3[16 * v6];
LABEL_17:
    a1[1] = v17;
    return;
  }
  if (a2 >> 60)
    abort();
  v8 = v7 - v4;
  v9 = v8 >> 3;
  if (v8 >> 3 <= a2)
    v9 = a2;
  v10 = (unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0;
  v11 = 0xFFFFFFFFFFFFFFFLL;
  if (!v10)
    v11 = v9;
  if (v11 >> 60)
    std::__throw_bad_array_new_length[abi:nn180100]();
  v12 = 16 * v11;
  v13 = (char *)operator new(16 * v11);
  v14 = &v13[16 * v5];
  v15 = &v13[v12];
  bzero(v14, 16 * v6);
  v16 = &v14[16 * v6];
  if (v3 != v4)
  {
    do
    {
      *((_OWORD *)v14 - 1) = *((_OWORD *)v3 - 1);
      v14 -= 16;
      v3 -= 16;
    }
    while (v3 != v4);
    v3 = *a1;
  }
  *a1 = v14;
  a1[1] = v16;
  a1[2] = v15;
  if (v3)
    operator delete(v3);
}

_QWORD *std::shared_ptr<karo::media::C3mSgNode>::shared_ptr[abi:nn180100]<karo::media::C3mSgFixedAxisRotationAnimation,void>(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  *a1 = a2;
  v4 = (_QWORD *)operator new();
  *v4 = &off_1E42E8328;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_19F9013A4(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  void *v3;
  void *v4;
  void *v5;

  if (!v1)
LABEL_7:
    _Unwind_Resume(exception_object);
  v3 = (void *)v1[11];
  if (v3)
  {
    v1[12] = v3;
    operator delete(v3);
    v4 = (void *)v1[4];
    if (!v4)
    {
LABEL_4:
      v5 = (void *)v1[1];
      if (!v5)
      {
LABEL_6:
        MEMORY[0x1A1AF4E00](v1, 0x1030C405CC62CCBLL);
        goto LABEL_7;
      }
LABEL_5:
      v1[2] = v5;
      operator delete(v5);
      goto LABEL_6;
    }
  }
  else
  {
    v4 = (void *)v1[4];
    if (!v4)
      goto LABEL_4;
  }
  v1[5] = v4;
  operator delete(v4);
  v5 = (void *)v1[1];
  if (!v5)
    goto LABEL_6;
  goto LABEL_5;
}

void std::vector<karo::media::C3mSgKeyFrame<karo::media::TRS>>::resize(char **a1, unint64_t a2)
{
  char *v4;
  char *v5;
  unint64_t v6;
  unint64_t v7;
  char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  uint64_t v17;
  char v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  char *v22;

  v4 = *a1;
  v5 = a1[1];
  v6 = 0xAAAAAAAAAAAAAAABLL * ((v5 - *a1) >> 5);
  v7 = a2 - v6;
  if (a2 <= v6)
  {
    if (a2 >= v6)
      return;
    v22 = &v4[96 * a2];
    goto LABEL_21;
  }
  v8 = a1[2];
  if (0xAAAAAAAAAAAAAAABLL * ((v8 - v5) >> 5) >= v7)
  {
    v22 = &v5[96 * v7];
    do
    {
      *((_OWORD *)v5 + 4) = 0uLL;
      *((_OWORD *)v5 + 5) = 0uLL;
      *((_OWORD *)v5 + 2) = 0uLL;
      *((_OWORD *)v5 + 3) = 0uLL;
      *(_OWORD *)v5 = 0uLL;
      *((_OWORD *)v5 + 1) = 0uLL;
      *((_QWORD *)v5 + 8) = 0x3FF0000000000000;
      v5 += 96;
    }
    while (v5 != v22);
LABEL_21:
    a1[1] = v22;
    return;
  }
  if (a2 > 0x2AAAAAAAAAAAAAALL)
    abort();
  v9 = 0xAAAAAAAAAAAAAAABLL * ((v8 - v4) >> 5);
  v10 = 2 * v9;
  if (2 * v9 <= a2)
    v10 = a2;
  if (v9 >= 0x155555555555555)
    v11 = 0x2AAAAAAAAAAAAAALL;
  else
    v11 = v10;
  if (v11 > 0x2AAAAAAAAAAAAAALL)
    std::__throw_bad_array_new_length[abi:nn180100]();
  v12 = (char *)operator new(96 * v11);
  v13 = &v12[96 * v6];
  v14 = &v12[96 * a2];
  v15 = v13;
  do
  {
    *((_OWORD *)v15 + 4) = 0uLL;
    *((_OWORD *)v15 + 5) = 0uLL;
    *((_OWORD *)v15 + 2) = 0uLL;
    *((_OWORD *)v15 + 3) = 0uLL;
    *(_OWORD *)v15 = 0uLL;
    *((_OWORD *)v15 + 1) = 0uLL;
    *((_QWORD *)v15 + 8) = 0x3FF0000000000000;
    v15 += 96;
  }
  while (v15 != v14);
  v16 = *a1;
  if (v5 != *a1)
  {
    do
    {
      v17 = *((_QWORD *)v5 - 12);
      v5 -= 96;
      v18 = v5[8];
      *((_QWORD *)v13 - 12) = v17;
      v13 -= 96;
      v13[8] = v18;
      v19 = *((_OWORD *)v5 + 1);
      *((_QWORD *)v13 + 4) = *((_QWORD *)v5 + 4);
      *((_OWORD *)v13 + 1) = v19;
      v20 = *(_OWORD *)(v5 + 40);
      *((_QWORD *)v13 + 7) = *((_QWORD *)v5 + 7);
      *(_OWORD *)(v13 + 40) = v20;
      *((_QWORD *)v13 + 8) = *((_QWORD *)v5 + 8);
      v21 = *(_OWORD *)(v5 + 72);
      *((_QWORD *)v13 + 11) = *((_QWORD *)v5 + 11);
      *(_OWORD *)(v13 + 72) = v21;
    }
    while (v5 != v16);
    v5 = *a1;
  }
  *a1 = v13;
  a1[1] = v14;
  a1[2] = &v12[96 * v11];
  if (v5)
    operator delete(v5);
}

_QWORD *std::shared_ptr<karo::media::C3mSgNode>::shared_ptr[abi:nn180100]<karo::media::C3mSgAnimation<karo::media::TRS>,void>(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  *a1 = a2;
  v4 = (_QWORD *)operator new();
  *v4 = &off_1E42E81A0;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_19F90162C(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  void *v3;
  void *v4;
  void *v5;

  if (!v1)
LABEL_7:
    _Unwind_Resume(exception_object);
  v3 = (void *)v1[11];
  if (v3)
  {
    v1[12] = v3;
    operator delete(v3);
    v4 = (void *)v1[4];
    if (!v4)
    {
LABEL_4:
      v5 = (void *)v1[1];
      if (!v5)
      {
LABEL_6:
        MEMORY[0x1A1AF4E00](v1, 0x1030C403E587085);
        goto LABEL_7;
      }
LABEL_5:
      v1[2] = v5;
      operator delete(v5);
      goto LABEL_6;
    }
  }
  else
  {
    v4 = (void *)v1[4];
    if (!v4)
      goto LABEL_4;
  }
  v1[5] = v4;
  operator delete(v4);
  v5 = (void *)v1[1];
  if (!v5)
    goto LABEL_6;
  goto LABEL_5;
}

void std::vector<karo::media::C3mSgKeyFrame<gm::Matrix<float,4,1>>>::resize(char **a1, unint64_t a2)
{
  char *v3;
  char *v4;
  unint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  unint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  __int128 v17;
  char *v18;

  v4 = *a1;
  v3 = a1[1];
  v5 = (v3 - *a1) >> 5;
  v6 = a2 - v5;
  if (a2 <= v5)
  {
    if (a2 >= v5)
      return;
    v18 = &v4[32 * a2];
    goto LABEL_17;
  }
  v7 = a1[2];
  if (v6 <= (v7 - v3) >> 5)
  {
    bzero(a1[1], 32 * v6);
    v18 = &v3[32 * v6];
LABEL_17:
    a1[1] = v18;
    return;
  }
  if (a2 >> 59)
    abort();
  v8 = v7 - v4;
  v9 = v8 >> 4;
  if (v8 >> 4 <= a2)
    v9 = a2;
  v10 = (unint64_t)v8 >= 0x7FFFFFFFFFFFFFE0;
  v11 = 0x7FFFFFFFFFFFFFFLL;
  if (!v10)
    v11 = v9;
  if (v11 >> 59)
    std::__throw_bad_array_new_length[abi:nn180100]();
  v12 = 32 * v11;
  v13 = (char *)operator new(32 * v11);
  v14 = &v13[32 * v5];
  v15 = &v13[v12];
  bzero(v14, 32 * v6);
  v16 = &v14[32 * v6];
  if (v3 != v4)
  {
    do
    {
      v17 = *((_OWORD *)v3 - 1);
      *((_OWORD *)v14 - 2) = *((_OWORD *)v3 - 2);
      *((_OWORD *)v14 - 1) = v17;
      v14 -= 32;
      v3 -= 32;
    }
    while (v3 != v4);
    v3 = *a1;
  }
  *a1 = v14;
  a1[1] = v16;
  a1[2] = v15;
  if (v3)
    operator delete(v3);
}

_QWORD *std::shared_ptr<karo::media::C3mSgNode>::shared_ptr[abi:nn180100]<karo::media::C3mSgRotationAnimation,void>(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  *a1 = a2;
  v4 = (_QWORD *)operator new();
  *v4 = &off_1E42E8280;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_19F901814(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  void *v3;
  void *v4;
  void *v5;

  if (!v1)
LABEL_7:
    _Unwind_Resume(exception_object);
  v3 = (void *)v1[11];
  if (v3)
  {
    v1[12] = v3;
    operator delete(v3);
    v4 = (void *)v1[4];
    if (!v4)
    {
LABEL_4:
      v5 = (void *)v1[1];
      if (!v5)
      {
LABEL_6:
        MEMORY[0x1A1AF4E00](v1, 0x1030C408C02A2B9);
        goto LABEL_7;
      }
LABEL_5:
      v1[2] = v5;
      operator delete(v5);
      goto LABEL_6;
    }
  }
  else
  {
    v4 = (void *)v1[4];
    if (!v4)
      goto LABEL_4;
  }
  v1[5] = v4;
  operator delete(v4);
  v5 = (void *)v1[1];
  if (!v5)
    goto LABEL_6;
  goto LABEL_5;
}

_QWORD *std::shared_ptr<karo::media::C3mSgNode>::shared_ptr[abi:nn180100]<karo::media::C3mSgAnimation<BOOL>,void>(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  *a1 = a2;
  v4 = (_QWORD *)operator new();
  *v4 = &off_1E42E81D8;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_19F9018D4(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  void *v3;
  void *v4;
  void *v5;

  if (!v1)
LABEL_7:
    _Unwind_Resume(exception_object);
  v3 = (void *)v1[11];
  if (v3)
  {
    v1[12] = v3;
    operator delete(v3);
    v4 = (void *)v1[4];
    if (!v4)
    {
LABEL_4:
      v5 = (void *)v1[1];
      if (!v5)
      {
LABEL_6:
        MEMORY[0x1A1AF4E00](v1, 0x1030C403E587085);
        goto LABEL_7;
      }
LABEL_5:
      v1[2] = v5;
      operator delete(v5);
      goto LABEL_6;
    }
  }
  else
  {
    v4 = (void *)v1[4];
    if (!v4)
      goto LABEL_4;
  }
  v1[5] = v4;
  operator delete(v4);
  v5 = (void *)v1[1];
  if (!v5)
    goto LABEL_6;
  goto LABEL_5;
}

void std::vector<karo::media::C3mSgKeyFrame<gm::Matrix<float,3,1>>>::resize(char **a1, unint64_t a2)
{
  char *v3;
  char *v4;
  unint64_t v5;
  unint64_t v6;
  char *v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  char *v14;
  char *v15;
  __int128 v16;
  char *v17;

  v4 = *a1;
  v3 = a1[1];
  v5 = 0xAAAAAAAAAAAAAAABLL * ((v3 - *a1) >> 3);
  v6 = a2 - v5;
  if (a2 <= v5)
  {
    if (a2 >= v5)
      return;
    v17 = &v4[24 * a2];
    goto LABEL_18;
  }
  v7 = a1[2];
  if (0xAAAAAAAAAAAAAAABLL * ((v7 - v3) >> 3) >= v6)
  {
    bzero(a1[1], 24 * ((24 * v6 - 24) / 0x18) + 24);
    v17 = &v3[24 * ((24 * v6 - 24) / 0x18) + 24];
LABEL_18:
    a1[1] = v17;
    return;
  }
  if (a2 > 0xAAAAAAAAAAAAAAALL)
    abort();
  v8 = 0xAAAAAAAAAAAAAAABLL * ((v7 - v4) >> 3);
  v9 = 2 * v8;
  if (2 * v8 <= a2)
    v9 = a2;
  if (v8 >= 0x555555555555555)
    v10 = 0xAAAAAAAAAAAAAAALL;
  else
    v10 = v9;
  if (v10 > 0xAAAAAAAAAAAAAAALL)
    std::__throw_bad_array_new_length[abi:nn180100]();
  v11 = 24 * v10;
  v12 = (char *)operator new(24 * v10);
  v13 = &v12[24 * v5];
  v14 = &v12[v11];
  bzero(v13, 24 * ((24 * v6 - 24) / 0x18) + 24);
  v15 = &v13[24 * ((24 * v6 - 24) / 0x18) + 24];
  if (v3 != v4)
  {
    do
    {
      v16 = *(_OWORD *)(v3 - 24);
      *((_QWORD *)v13 - 1) = *((_QWORD *)v3 - 1);
      *(_OWORD *)(v13 - 24) = v16;
      v13 -= 24;
      v3 -= 24;
    }
    while (v3 != v4);
    v3 = *a1;
  }
  *a1 = v13;
  a1[1] = v15;
  a1[2] = v14;
  if (v3)
    operator delete(v3);
}

_QWORD *std::shared_ptr<karo::media::C3mSgNode>::shared_ptr[abi:nn180100]<karo::media::C3mSgAnimation<gm::Matrix<float,3,1>>,void>(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  *a1 = a2;
  v4 = (_QWORD *)operator new();
  *v4 = &off_1E42E8168;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_19F901B34(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  void *v3;
  void *v4;
  void *v5;

  if (!v1)
LABEL_7:
    _Unwind_Resume(exception_object);
  v3 = (void *)v1[11];
  if (v3)
  {
    v1[12] = v3;
    operator delete(v3);
    v4 = (void *)v1[4];
    if (!v4)
    {
LABEL_4:
      v5 = (void *)v1[1];
      if (!v5)
      {
LABEL_6:
        MEMORY[0x1A1AF4E00](v1, 0x1030C403E587085);
        goto LABEL_7;
      }
LABEL_5:
      v1[2] = v5;
      operator delete(v5);
      goto LABEL_6;
    }
  }
  else
  {
    v4 = (void *)v1[4];
    if (!v4)
      goto LABEL_4;
  }
  v1[5] = v4;
  operator delete(v4);
  v5 = (void *)v1[1];
  if (!v5)
    goto LABEL_6;
  goto LABEL_5;
}

_QWORD *std::shared_ptr<karo::media::C3mSgNode>::shared_ptr[abi:nn180100]<karo::media::C3mSgExternalObjectPlaceHolder,void>(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  *a1 = a2;
  v4 = (_QWORD *)operator new();
  *v4 = &off_1E42E82F0;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_19F901BF4(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  void *v3;
  void *v4;

  if (v1)
  {
    v3 = (void *)v1[4];
    if (v3)
    {
      v1[5] = v3;
      operator delete(v3);
    }
    v4 = (void *)v1[1];
    if (v4)
    {
      v1[2] = v4;
      operator delete(v4);
    }
    MEMORY[0x1A1AF4E00](v1, 0x1010C402432A8EBLL);
  }
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_pointer<karo::media::C3mSgExternalObjectPlaceHolder *,std::shared_ptr<karo::media::C3mSgNode>::__shared_ptr_default_delete<karo::media::C3mSgNode,karo::media::C3mSgExternalObjectPlaceHolder>,std::allocator<karo::media::C3mSgExternalObjectPlaceHolder>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_pointer<karo::media::C3mSgExternalObjectPlaceHolder *,std::shared_ptr<karo::media::C3mSgNode>::__shared_ptr_default_delete<karo::media::C3mSgNode,karo::media::C3mSgExternalObjectPlaceHolder>,std::allocator<karo::media::C3mSgExternalObjectPlaceHolder>>::__on_zero_shared(uint64_t result)
{
  _QWORD *v1;
  void *v2;
  void *v3;

  v1 = *(_QWORD **)(result + 24);
  if (v1)
  {
    v2 = (void *)v1[4];
    if (v2)
    {
      v1[5] = v2;
      operator delete(v2);
    }
    v3 = (void *)v1[1];
    if (v3)
    {
      v1[2] = v3;
      operator delete(v3);
    }
    JUMPOUT(0x1A1AF4E00);
  }
  return result;
}

void std::__shared_ptr_pointer<karo::media::C3mSgAnimation<gm::Matrix<float,3,1>> *,std::shared_ptr<karo::media::C3mSgNode>::__shared_ptr_default_delete<karo::media::C3mSgNode,karo::media::C3mSgAnimation<gm::Matrix<float,3,1>>>,std::allocator<karo::media::C3mSgAnimation<gm::Matrix<float,3,1>>>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_pointer<karo::media::C3mSgAnimation<gm::Matrix<float,3,1>> *,std::shared_ptr<karo::media::C3mSgNode>::__shared_ptr_default_delete<karo::media::C3mSgNode,karo::media::C3mSgAnimation<gm::Matrix<float,3,1>>>,std::allocator<karo::media::C3mSgAnimation<gm::Matrix<float,3,1>>>>::__on_zero_shared(uint64_t result)
{
  _QWORD *v1;
  void *v2;
  void *v3;
  void *v4;

  v1 = *(_QWORD **)(result + 24);
  if (v1)
  {
    v2 = (void *)v1[11];
    if (v2)
    {
      v1[12] = v2;
      operator delete(v2);
    }
    v3 = (void *)v1[4];
    if (v3)
    {
      v1[5] = v3;
      operator delete(v3);
    }
    v4 = (void *)v1[1];
    if (v4)
    {
      v1[2] = v4;
      operator delete(v4);
    }
    JUMPOUT(0x1A1AF4E00);
  }
  return result;
}

void std::__shared_ptr_pointer<karo::media::C3mSgAnimation<BOOL> *,std::shared_ptr<karo::media::C3mSgNode>::__shared_ptr_default_delete<karo::media::C3mSgNode,karo::media::C3mSgAnimation<BOOL>>,std::allocator<karo::media::C3mSgAnimation<BOOL>>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_pointer<karo::media::C3mSgAnimation<BOOL> *,std::shared_ptr<karo::media::C3mSgNode>::__shared_ptr_default_delete<karo::media::C3mSgNode,karo::media::C3mSgAnimation<BOOL>>,std::allocator<karo::media::C3mSgAnimation<BOOL>>>::__on_zero_shared(uint64_t result)
{
  _QWORD *v1;
  void *v2;
  void *v3;
  void *v4;

  v1 = *(_QWORD **)(result + 24);
  if (v1)
  {
    v2 = (void *)v1[11];
    if (v2)
    {
      v1[12] = v2;
      operator delete(v2);
    }
    v3 = (void *)v1[4];
    if (v3)
    {
      v1[5] = v3;
      operator delete(v3);
    }
    v4 = (void *)v1[1];
    if (v4)
    {
      v1[2] = v4;
      operator delete(v4);
    }
    JUMPOUT(0x1A1AF4E00);
  }
  return result;
}

void std::__shared_ptr_pointer<karo::media::C3mSgRotationAnimation *,std::shared_ptr<karo::media::C3mSgNode>::__shared_ptr_default_delete<karo::media::C3mSgNode,karo::media::C3mSgRotationAnimation>,std::allocator<karo::media::C3mSgRotationAnimation>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_pointer<karo::media::C3mSgRotationAnimation *,std::shared_ptr<karo::media::C3mSgNode>::__shared_ptr_default_delete<karo::media::C3mSgNode,karo::media::C3mSgRotationAnimation>,std::allocator<karo::media::C3mSgRotationAnimation>>::__on_zero_shared(uint64_t result)
{
  _QWORD *v1;
  void *v2;
  void *v3;
  void *v4;

  v1 = *(_QWORD **)(result + 24);
  if (v1)
  {
    v2 = (void *)v1[11];
    if (v2)
    {
      v1[12] = v2;
      operator delete(v2);
    }
    v3 = (void *)v1[4];
    if (v3)
    {
      v1[5] = v3;
      operator delete(v3);
    }
    v4 = (void *)v1[1];
    if (v4)
    {
      v1[2] = v4;
      operator delete(v4);
    }
    JUMPOUT(0x1A1AF4E00);
  }
  return result;
}

void std::__shared_ptr_pointer<karo::media::C3mSgAnimation<karo::media::TRS> *,std::shared_ptr<karo::media::C3mSgNode>::__shared_ptr_default_delete<karo::media::C3mSgNode,karo::media::C3mSgAnimation<karo::media::TRS>>,std::allocator<karo::media::C3mSgAnimation<karo::media::TRS>>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_pointer<karo::media::C3mSgAnimation<karo::media::TRS> *,std::shared_ptr<karo::media::C3mSgNode>::__shared_ptr_default_delete<karo::media::C3mSgNode,karo::media::C3mSgAnimation<karo::media::TRS>>,std::allocator<karo::media::C3mSgAnimation<karo::media::TRS>>>::__on_zero_shared(uint64_t result)
{
  _QWORD *v1;
  void *v2;
  void *v3;
  void *v4;

  v1 = *(_QWORD **)(result + 24);
  if (v1)
  {
    v2 = (void *)v1[11];
    if (v2)
    {
      v1[12] = v2;
      operator delete(v2);
    }
    v3 = (void *)v1[4];
    if (v3)
    {
      v1[5] = v3;
      operator delete(v3);
    }
    v4 = (void *)v1[1];
    if (v4)
    {
      v1[2] = v4;
      operator delete(v4);
    }
    JUMPOUT(0x1A1AF4E00);
  }
  return result;
}

void std::__shared_ptr_pointer<karo::media::C3mSgFixedAxisRotationAnimation *,std::shared_ptr<karo::media::C3mSgNode>::__shared_ptr_default_delete<karo::media::C3mSgNode,karo::media::C3mSgFixedAxisRotationAnimation>,std::allocator<karo::media::C3mSgFixedAxisRotationAnimation>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_pointer<karo::media::C3mSgFixedAxisRotationAnimation *,std::shared_ptr<karo::media::C3mSgNode>::__shared_ptr_default_delete<karo::media::C3mSgNode,karo::media::C3mSgFixedAxisRotationAnimation>,std::allocator<karo::media::C3mSgFixedAxisRotationAnimation>>::__on_zero_shared(uint64_t result)
{
  _QWORD *v1;
  void *v2;
  void *v3;
  void *v4;

  v1 = *(_QWORD **)(result + 24);
  if (v1)
  {
    v2 = (void *)v1[11];
    if (v2)
    {
      v1[12] = v2;
      operator delete(v2);
    }
    v3 = (void *)v1[4];
    if (v3)
    {
      v1[5] = v3;
      operator delete(v3);
    }
    v4 = (void *)v1[1];
    if (v4)
    {
      v1[2] = v4;
      operator delete(v4);
    }
    JUMPOUT(0x1A1AF4E00);
  }
  return result;
}

void std::__shared_ptr_pointer<karo::media::C3mSgStaticTransform *,std::shared_ptr<karo::media::C3mSgNode>::__shared_ptr_default_delete<karo::media::C3mSgNode,karo::media::C3mSgStaticTransform>,std::allocator<karo::media::C3mSgStaticTransform>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_pointer<karo::media::C3mSgStaticTransform *,std::shared_ptr<karo::media::C3mSgNode>::__shared_ptr_default_delete<karo::media::C3mSgNode,karo::media::C3mSgStaticTransform>,std::allocator<karo::media::C3mSgStaticTransform>>::__on_zero_shared(uint64_t result)
{
  _QWORD *v1;
  void *v2;
  void *v3;

  v1 = *(_QWORD **)(result + 24);
  if (v1)
  {
    v2 = (void *)v1[4];
    if (v2)
    {
      v1[5] = v2;
      operator delete(v2);
    }
    v3 = (void *)v1[1];
    if (v3)
    {
      v1[2] = v3;
      operator delete(v3);
    }
    JUMPOUT(0x1A1AF4E00);
  }
  return result;
}

void std::__shared_ptr_emplace<karo::media::C3mSgNode>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E5EA0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<karo::media::C3mSgNode>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E5EA0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_emplace<karo::media::C3mSgNode>::__on_zero_shared(_QWORD *a1)
{
  void *v2;
  void *v3;

  v2 = (void *)a1[7];
  if (v2)
  {
    a1[8] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[4];
  if (v3)
  {
    a1[5] = v3;
    operator delete(v3);
  }
}

void std::__shared_ptr_emplace<karo::media::C3mSceneGraph>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E5D50;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<karo::media::C3mSceneGraph>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E5D50;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_emplace<karo::media::C3mSceneGraph>::__on_zero_shared(_QWORD *a1)
{
  char *v2;
  char *v3;
  void **v4;
  void **v5;
  void **v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;

  v2 = (char *)a1[6];
  v3 = (char *)a1[7];
  if (v3 == v2)
  {
    a1[7] = v2;
    if (!v3)
      goto LABEL_3;
  }
  else
  {
    do
    {
      v7 = (std::__shared_weak_count *)*((_QWORD *)v3 - 1);
      if (v7)
      {
        p_shared_owners = (unint64_t *)&v7->__shared_owners_;
        do
          v9 = __ldaxr(p_shared_owners);
        while (__stlxr(v9 - 1, p_shared_owners));
        if (!v9)
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
      }
      v3 -= 16;
    }
    while (v3 != v2);
    v3 = (char *)a1[6];
    a1[7] = v2;
    if (!v3)
    {
LABEL_3:
      v4 = (void **)a1[3];
      if (!v4)
        return;
      goto LABEL_4;
    }
  }
  if (v2 != v3)
  {
    do
    {
      v10 = (std::__shared_weak_count *)*((_QWORD *)v2 - 1);
      if (v10)
      {
        v11 = (unint64_t *)&v10->__shared_owners_;
        do
          v12 = __ldaxr(v11);
        while (__stlxr(v12 - 1, v11));
        if (!v12)
        {
          ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
          std::__shared_weak_count::__release_weak(v10);
        }
      }
      v2 -= 16;
    }
    while (v2 != v3);
    v2 = (char *)a1[6];
  }
  a1[7] = v3;
  operator delete(v2);
  v4 = (void **)a1[3];
  if (v4)
  {
LABEL_4:
    v5 = (void **)a1[4];
    v6 = v4;
    if (v5 != v4)
    {
      do
      {
        if (*((char *)v5 - 1) < 0)
          operator delete(*(v5 - 3));
        v5 -= 3;
      }
      while (v5 != v4);
      v6 = (void **)a1[3];
    }
    a1[4] = v4;
    operator delete(v6);
  }
}

karo::media::C3mMesh *karo::media::C3mMesh::C3mMesh(karo::media::C3mMesh *this, const karo::media::C3mMesh *a2)
{
  __int128 v4;
  int v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  int v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  _BYTE *v13;
  _BYTE *v14;
  int64_t v15;
  char *v16;
  char *v17;

  *(_QWORD *)this = *(_QWORD *)a2;
  if (*((char *)a2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 8), *((const std::string::value_type **)a2 + 1), *((_QWORD *)a2 + 2));
  }
  else
  {
    v4 = *(_OWORD *)((char *)a2 + 8);
    *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
    *(_OWORD *)((char *)this + 8) = v4;
  }
  v5 = *((_DWORD *)a2 + 8);
  v6 = *((_QWORD *)a2 + 6);
  *((_QWORD *)this + 5) = *((_QWORD *)a2 + 5);
  *((_DWORD *)this + 8) = v5;
  *((_QWORD *)this + 6) = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v9 = *((_DWORD *)a2 + 14);
  v10 = *((_QWORD *)a2 + 9);
  *((_QWORD *)this + 8) = *((_QWORD *)a2 + 8);
  *((_DWORD *)this + 14) = v9;
  *((_QWORD *)this + 9) = v10;
  if (v10)
  {
    v11 = (unint64_t *)(v10 + 8);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  *((_QWORD *)this + 10) = 0;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  v14 = (_BYTE *)*((_QWORD *)a2 + 10);
  v13 = (_BYTE *)*((_QWORD *)a2 + 11);
  v15 = v13 - v14;
  if (v13 != v14)
  {
    if (v15 < 0)
      abort();
    v16 = (char *)operator new(v13 - v14);
    *((_QWORD *)this + 10) = v16;
    *((_QWORD *)this + 11) = v16;
    v17 = &v16[2 * (v15 >> 1)];
    *((_QWORD *)this + 12) = v17;
    memcpy(v16, v14, v15);
    *((_QWORD *)this + 11) = v17;
  }
  *(_OWORD *)((char *)this + 104) = *(_OWORD *)((char *)a2 + 104);
  return this;
}

void sub_19F90239C(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;
  uint64_t v3;
  uint64_t v4;

  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](v4);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](v3);
  if (*(char *)(v1 + 31) < 0)
    operator delete(*v2);
  _Unwind_Resume(a1);
}

uint64_t std::vector<karo::media::C3mMesh>::__push_back_slow_path<karo::media::C3mMesh const&>(int64x2_t *a1, const karo::media::C3mMesh *a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  int64x2_t v16;
  char *v17;
  void *__p;
  int64x2_t v20;
  char *v21;
  int64x2_t *v22;

  v2 = 0xEEEEEEEEEEEEEEEFLL * ((a1->i64[1] - a1->i64[0]) >> 3);
  v3 = v2 + 1;
  if (v2 + 1 > 0x222222222222222)
    abort();
  if (0xDDDDDDDDDDDDDDDELL * ((a1[1].i64[0] - a1->i64[0]) >> 3) > v3)
    v3 = 0xDDDDDDDDDDDDDDDELL * ((a1[1].i64[0] - a1->i64[0]) >> 3);
  if (0xEEEEEEEEEEEEEEEFLL * ((a1[1].i64[0] - a1->i64[0]) >> 3) >= 0x111111111111111)
    v6 = 0x222222222222222;
  else
    v6 = v3;
  v22 = a1 + 1;
  if (v6)
  {
    if (v6 > 0x222222222222222)
      std::__throw_bad_array_new_length[abi:nn180100]();
    v7 = (char *)operator new(120 * v6);
  }
  else
  {
    v7 = 0;
  }
  __p = v7;
  v20.i64[0] = (uint64_t)&v7[120 * v2];
  v20.i64[1] = v20.i64[0];
  v21 = &v7[120 * v6];
  karo::media::C3mMesh::C3mMesh((karo::media::C3mMesh *)v20.i64[0], a2);
  v8 = v20.i64[0];
  v9 = v20.i64[0] + 120;
  v11 = a1->i64[0];
  v10 = a1->u64[1];
  if (v10 == a1->i64[0])
  {
    v16 = vdupq_n_s64(v10);
  }
  else
  {
    v12 = 0;
    do
    {
      v13 = v10 + v12;
      v14 = v8 + v12;
      *(_QWORD *)(v14 - 120) = *(_QWORD *)(v10 + v12 - 120);
      v15 = *(_OWORD *)(v10 + v12 - 112);
      *(_QWORD *)(v14 - 96) = *(_QWORD *)(v10 + v12 - 96);
      *(_OWORD *)(v14 - 112) = v15;
      *(_QWORD *)(v13 - 104) = 0;
      *(_QWORD *)(v13 - 96) = 0;
      *(_QWORD *)(v13 - 112) = 0;
      *(_DWORD *)(v14 - 88) = *(_DWORD *)(v10 + v12 - 88);
      *(_OWORD *)(v14 - 80) = *(_OWORD *)(v10 + v12 - 80);
      *(_QWORD *)(v13 - 80) = 0;
      *(_QWORD *)(v13 - 72) = 0;
      *(_DWORD *)(v14 - 64) = *(_DWORD *)(v10 + v12 - 64);
      *(_OWORD *)(v14 - 56) = *(_OWORD *)(v10 + v12 - 56);
      *(_QWORD *)(v13 - 56) = 0;
      *(_QWORD *)(v13 - 48) = 0;
      *(_QWORD *)(v14 - 40) = 0;
      *(_QWORD *)(v14 - 32) = 0;
      *(_QWORD *)(v14 - 24) = 0;
      *(_OWORD *)(v14 - 40) = *(_OWORD *)(v10 + v12 - 40);
      *(_QWORD *)(v14 - 24) = *(_QWORD *)(v10 + v12 - 24);
      *(_QWORD *)(v13 - 40) = 0;
      *(_QWORD *)(v13 - 32) = 0;
      *(_QWORD *)(v13 - 24) = 0;
      *(_OWORD *)(v14 - 16) = *(_OWORD *)(v10 + v12 - 16);
      v12 -= 120;
    }
    while (v10 + v12 != v11);
    v8 += v12;
    v16 = *a1;
  }
  a1->i64[0] = v8;
  a1->i64[1] = v9;
  v20 = v16;
  v17 = (char *)a1[1].i64[0];
  a1[1].i64[0] = (uint64_t)v21;
  v21 = v17;
  __p = (void *)v16.i64[0];
  std::__split_buffer<karo::media::C3mMesh>::__destruct_at_end[abi:nn180100]((uint64_t)&__p, v16.i64[0]);
  if (__p)
    operator delete(__p);
  return v9;
}

void sub_19F902588(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<karo::media::C3mMesh>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::__split_buffer<karo::media::C3mMesh>::__destruct_at_end[abi:nn180100](uint64_t a1, uint64_t a2)
{
  uint64_t i;
  void *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;

  for (i = *(_QWORD *)(a1 + 16); i != a2; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 120;
    v5 = *(void **)(i - 40);
    if (v5)
    {
      *(_QWORD *)(i - 32) = v5;
      operator delete(v5);
    }
    v6 = *(std::__shared_weak_count **)(i - 48);
    if (!v6)
      goto LABEL_12;
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
      v9 = *(std::__shared_weak_count **)(i - 72);
      if (v9)
      {
LABEL_13:
        v10 = (unint64_t *)&v9->__shared_owners_;
        do
          v11 = __ldaxr(v10);
        while (__stlxr(v11 - 1, v10));
        if (!v11)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
      }
    }
    else
    {
LABEL_12:
      v9 = *(std::__shared_weak_count **)(i - 72);
      if (v9)
        goto LABEL_13;
    }
    if (*(char *)(i - 89) < 0)
      operator delete(*(void **)(i - 112));
  }
}

uint64_t std::__split_buffer<karo::media::C3mMesh>::~__split_buffer(uint64_t a1)
{
  std::__split_buffer<karo::media::C3mMesh>::__destruct_at_end[abi:nn180100](a1, *(_QWORD *)(a1 + 8));
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t md::MeshRenderable::MeshRenderable(uint64_t a1, char a2, uint64_t *a3, _QWORD *a4)
{
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  _QWORD v18[2];

  v6 = (std::__shared_weak_count *)a4[1];
  v18[0] = *a4;
  v18[1] = v6;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    md::MeshRenderable::MeshRenderable(a1, v18, a2, a3);
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  else
  {
    md::MeshRenderable::MeshRenderable(a1, v18, a2, a3);
  }
  v11 = *a4;
  v10 = a4[1];
  if (v10)
  {
    v12 = (unint64_t *)(v10 + 8);
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  v14 = *(std::__shared_weak_count **)(a1 + 40);
  *(_QWORD *)(a1 + 32) = v11;
  *(_QWORD *)(a1 + 40) = v10;
  if (v14)
  {
    v15 = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  *(_BYTE *)(a1 + 148) = 1;
  return a1;
}

void md::MeshRenderable::recalculateBounds(md::MeshRenderable *this)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t i;
  _QWORD *v8;
  uint64_t v9;
  float32x4_t v10;
  float32x4_t v11;
  uint64_t *v12;
  int8x16_t v13;
  float32x2_t v14;
  char v15;
  _QWORD v16[3];
  _QWORD *v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  *(_OWORD *)((char *)this + 76) = xmmword_19FFB3470;
  *(_QWORD *)((char *)this + 92) = 0x80000000800000;
  v2 = **((_QWORD **)this + 4);
  v3 = *(_QWORD *)(v2 + 48) - *(_QWORD *)(v2 + 40);
  v4 = v3 % *(_QWORD *)(v2 + 8);
  if ((*(_BYTE *)(v2 + 16) & 2) == 0)
  {
    v5 = atomic_load(&ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::flag);
    if (v5 != -1)
    {
      v16[0] = &v15;
      v13.i64[0] = (uint64_t)v16;
      std::__call_once(&ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::flag, &v13, (void (__cdecl *)(void *))std::__call_once_proxy[abi:nn180100]<std::tuple<ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::$_0 &&>>);
    }
  }
  if (v3 == v4)
    v6 = 0;
  else
    v6 = *(_QWORD *)(v2 + 72);
  if (*(_DWORD *)(*((_QWORD *)this + 4) + 16))
  {
    for (i = 0; i < *(unsigned int *)(*((_QWORD *)this + 4) + 16); ++i)
    {
      v12 = (uint64_t *)(*((_QWORD *)this + 27) + 36);
      v13 = (int8x16_t)xmmword_19FFB3470;
      v14 = (float32x2_t)0x80000000800000;
      v16[0] = &off_1E42D8AB0;
      v16[1] = &v13;
      v16[2] = v6;
      v17 = v16;
      gm::Box<float,3>::forEachCorner(v12, (uint64_t)v16);
      v8 = v17;
      if (v17 == v16)
      {
        v8 = v16;
        v9 = 4;
      }
      else
      {
        if (!v17)
          goto LABEL_11;
        v9 = 5;
      }
      (*(void (**)(void))(*v8 + 8 * v9))();
LABEL_11:
      v10 = (float32x4_t)v13;
      v10.i32[3] = HIDWORD(*(_OWORD *)((char *)this + 76));
      v11 = *(float32x4_t *)((char *)this + 76);
      v11.i32[3] = v13.i32[3];
      *(int8x16_t *)((char *)this + 76) = vbslq_s8((int8x16_t)vcgtq_f32(v11, v10), v13, *(int8x16_t *)((char *)this + 76));
      *(float32x2_t *)((char *)this + 92) = vmaxnm_f32(*(float32x2_t *)((char *)this + 92), v14);
      v6 += 64;
    }
  }
  if (*((_BYTE *)this + 124))
    *((_BYTE *)this + 124) = 0;
  if (*((_BYTE *)this + 140))
    *((_BYTE *)this + 140) = 0;
}

BOOL md::RasterOverlayRenderPatch::operator!=(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char v12;
  char **v13;
  char *v14;

  if (*a1 != *a2)
    return 1;
  v3 = a1[3];
  v4 = *(_QWORD *)(v3 + 8);
  if ((*(_BYTE *)(v3 + 16) & 2) == 0)
  {
    v5 = atomic_load(&ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::flag);
    if (v5 != -1)
    {
      v14 = &v12;
      v13 = &v14;
      std::__call_once(&ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::flag, &v13, (void (__cdecl *)(void *))std::__call_once_proxy[abi:nn180100]<std::tuple<ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::$_0 &&>>);
    }
  }
  if (v4)
    v6 = *(_QWORD *)(v3 + 72);
  else
    v6 = 0;
  v7 = a2[3];
  v8 = *(_QWORD *)(v7 + 8);
  if ((*(_BYTE *)(v7 + 16) & 2) == 0)
  {
    v9 = atomic_load(&ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::flag);
    if (v9 != -1)
    {
      v14 = &v12;
      v13 = &v14;
      std::__call_once(&ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::flag, &v13, (void (__cdecl *)(void *))std::__call_once_proxy[abi:nn180100]<std::tuple<ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::$_0 &&>>);
    }
  }
  v10 = v8 ? *(_QWORD *)(v7 + 72) : 0;
  return *(_QWORD *)(v6 + 8) != *(_QWORD *)(v10 + 8) || *(float *)v6 != *(float *)v10;
}

void md::MuninStorefrontLabelFeature::~MuninStorefrontLabelFeature(md::MuninStorefrontLabelFeature *this)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  if (*((_BYTE *)this + 736))
    *((_BYTE *)this + 736) = 0;
  if (*((_BYTE *)this + 696))
    *((_BYTE *)this + 696) = 0;
  *(_QWORD *)this = &off_1E429DB28;
  v2 = *((_QWORD *)this + 84);
  if (v2)
  {
    v3 = *((_QWORD *)this + 85);
    v4 = (void *)*((_QWORD *)this + 84);
    if (v3 != v2)
    {
      do
      {
        v5 = *(std::__shared_weak_count **)(v3 - 8);
        if (v5)
        {
          p_shared_owners = (unint64_t *)&v5->__shared_owners_;
          do
            v7 = __ldaxr(p_shared_owners);
          while (__stlxr(v7 - 1, p_shared_owners));
          if (!v7)
          {
            ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
            std::__shared_weak_count::__release_weak(v5);
          }
        }
        v3 -= 16;
      }
      while (v3 != v2);
      v4 = (void *)*((_QWORD *)this + 84);
    }
    *((_QWORD *)this + 85) = v2;
    operator delete(v4);
  }
  md::PointLabelFeature::~PointLabelFeature(this);
}

{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  if (*((_BYTE *)this + 736))
    *((_BYTE *)this + 736) = 0;
  if (*((_BYTE *)this + 696))
    *((_BYTE *)this + 696) = 0;
  *(_QWORD *)this = &off_1E429DB28;
  v2 = *((_QWORD *)this + 84);
  if (v2)
  {
    v3 = *((_QWORD *)this + 85);
    v4 = (void *)*((_QWORD *)this + 84);
    if (v3 != v2)
    {
      do
      {
        v5 = *(std::__shared_weak_count **)(v3 - 8);
        if (v5)
        {
          p_shared_owners = (unint64_t *)&v5->__shared_owners_;
          do
            v7 = __ldaxr(p_shared_owners);
          while (__stlxr(v7 - 1, p_shared_owners));
          if (!v7)
          {
            ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
            std::__shared_weak_count::__release_weak(v5);
          }
        }
        v3 -= 16;
      }
      while (v3 != v2);
      v4 = (void *)*((_QWORD *)this + 84);
    }
    *((_QWORD *)this + 85) = v2;
    operator delete(v4);
  }
  md::PointLabelFeature::~PointLabelFeature(this);
  JUMPOUT(0x1A1AF4E00);
}

float md::MuninStorefrontLabelFeature::minZoomRank(md::MuninStorefrontLabelFeature *this)
{
  return 0.0;
}

float md::MuninStorefrontLabelFeature::maxZoomRank(md::MuninStorefrontLabelFeature *this)
{
  return 252.0;
}

uint64_t md::MuninStorefrontLabelFeature::labelFeatureType(md::MuninStorefrontLabelFeature *this)
{
  return 18;
}

uint64_t md::MuninStorefrontLabelFeature::debugString@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned int *a3@<X2>, char a4@<W3>, _BYTE *a5@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  std::ios_base *v15;
  uint64_t v16;
  void **v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  unsigned int v22;
  BOOL v23;
  uint64_t *v24;
  _QWORD *v25;
  size_t v26;
  unint64_t v27;
  const void **v28;
  const void *v29;
  uint64_t v30;
  uint64_t v31;
  _BYTE *v32;
  void *__p[2];
  unsigned __int8 v35;
  uint64_t v36;
  _QWORD v37[2];
  _QWORD v38[3];
  uint64_t v39;
  unint64_t v40;
  void *v41[2];
  __int128 v42;
  int v43;
  uint64_t v44[20];

  v10 = MEMORY[0x1E0DE4FE0];
  v11 = MEMORY[0x1E0DE4FE0] + 64;
  v12 = (uint64_t *)MEMORY[0x1E0DE4F60];
  v13 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v14 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v44[0] = MEMORY[0x1E0DE4FE0] + 64;
  v36 = v13;
  *(_QWORD *)((char *)&v37[-1] + *(_QWORD *)(v13 - 24)) = v14;
  v15 = (std::ios_base *)((char *)&v37[-1] + *(_QWORD *)(v36 - 24));
  std::ios_base::init(v15, v37);
  v15[1].__vftable = 0;
  v15[1].__fmtflags_ = -1;
  v36 = v10 + 24;
  v44[0] = v11;
  std::streambuf::basic_streambuf();
  v16 = MEMORY[0x1E0DE4FB8];
  v37[0] = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)v41 = 0u;
  v42 = 0u;
  v43 = 16;
  md::StorefrontLabelFeature::debugString(a1, a2, a3, a4, __p);
  if ((v35 & 0x80u) == 0)
    v17 = __p;
  else
    v17 = (void **)__p[0];
  if ((v35 & 0x80u) == 0)
    v18 = v35;
  else
    v18 = (uint64_t)__p[1];
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v36, (uint64_t)v17, v18);
  if ((char)v35 < 0)
  {
    operator delete(__p[0]);
    v19 = *(_QWORD *)(a1 + 464);
    if (!v19)
      goto LABEL_22;
  }
  else
  {
    v19 = *(_QWORD *)(a1 + 464);
    if (!v19)
      goto LABEL_22;
  }
  v20 = *a3;
  v21 = a1 + 464;
  do
  {
    v22 = *(_DWORD *)(v19 + 32);
    v23 = v22 >= v20;
    if (v22 >= v20)
      v24 = (uint64_t *)v19;
    else
      v24 = (uint64_t *)(v19 + 8);
    if (v23)
      v21 = v19;
    v19 = *v24;
  }
  while (*v24);
  if (v21 != a1 + 464 && v20 >= *(_DWORD *)(v21 + 32))
  {
    *(_QWORD *)((char *)&v37[1] + *(_QWORD *)(v36 - 24)) = 1;
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v36, (uint64_t)" CollectionPoint Distance=", 26);
    v25 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v25, (uint64_t)"\n", 1);
  }
LABEL_22:
  if ((v43 & 0x10) != 0)
  {
    v27 = *((_QWORD *)&v42 + 1);
    if (*((_QWORD *)&v42 + 1) < v40)
    {
      *((_QWORD *)&v42 + 1) = v40;
      v27 = v40;
    }
    v28 = (const void **)&v39;
  }
  else
  {
    if ((v43 & 8) == 0)
    {
      v26 = 0;
      a5[23] = 0;
      goto LABEL_37;
    }
    v28 = (const void **)v38;
    v27 = v38[2];
  }
  v29 = *v28;
  v26 = v27 - (_QWORD)*v28;
  if (v26 >= 0x7FFFFFFFFFFFFFF8)
    abort();
  if (v26 >= 0x17)
  {
    v30 = (v26 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v26 | 7) != 0x17)
      v30 = v26 | 7;
    v31 = v30 + 1;
    v32 = operator new(v30 + 1);
    *((_QWORD *)a5 + 1) = v26;
    *((_QWORD *)a5 + 2) = v31 | 0x8000000000000000;
    *(_QWORD *)a5 = v32;
    a5 = v32;
    goto LABEL_36;
  }
  a5[23] = v26;
  if (v26)
LABEL_36:
    memmove(a5, v29, v26);
LABEL_37:
  a5[v26] = 0;
  v36 = *v12;
  *(_QWORD *)((char *)&v37[-1] + *(_QWORD *)(v36 - 24)) = v12[3];
  v37[0] = v16 + 16;
  if (SBYTE7(v42) < 0)
    operator delete(v41[0]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1A1AF4D64](v44);
}

void sub_19F903094(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void md::MuninStorefrontLabelFeature::addElement(md::PointLabelFeature *a1, _QWORD **a2, int a3)
{
  _QWORD **v3;
  md::PointLabelFeature *v4;
  char *v5;
  char *v6;
  char *v7;
  char *v8;
  BOOL v9;
  unsigned __int8 v10;
  uint64_t *v11;
  float *v12;
  unsigned __int8 v13;
  uint64_t v14;
  __int128 v15;
  int v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t *v20;
  unsigned int v21;
  float *v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD **v26;
  _QWORD **v27;
  uint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  md::PointLabelFeatureElement *v34;
  uint64_t *v38;
  char *v39;
  _QWORD **v40;
  _QWORD **v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  __int128 v45;
  float v46;
  int v47;
  uint64_t *v48[2];
  char v49;

  v3 = a2;
  v4 = a1;
  if (*((_QWORD *)a1 + 60))
  {
    v5 = (char *)*((_QWORD *)a1 + 57);
    v6 = (char *)a1 + 464;
    if (v5 != (char *)a1 + 464)
    {
      do
      {
        md::PointPosition::addElement((unint64_t *)v5 + 5, v3);
        v7 = (char *)*((_QWORD *)v5 + 1);
        if (v7)
        {
          do
          {
            v8 = v7;
            v7 = *(char **)v7;
          }
          while (v7);
        }
        else
        {
          do
          {
            v8 = (char *)*((_QWORD *)v5 + 2);
            v9 = *(_QWORD *)v8 == (_QWORD)v5;
            v5 = v8;
          }
          while (!v9);
        }
        v5 = v8;
      }
      while (v8 != v6);
    }
  }
  else if (*((_QWORD *)a1 + 85) != *((_QWORD *)a1 + 84))
  {
    v10 = 0;
    v11 = &v44;
    v12 = &v46;
    v38 = (uint64_t *)((char *)a1 + 472);
    v39 = (char *)a1 + 464;
    do
    {
      v40 = 0;
      v41 = 0;
      v42 = 0;
      {
        v32 = operator new();
        mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v32, "VectorKitLabels", 0x5ED09DD50000000FLL);
      }
      v43 = mdm::Allocator::instance(void)::alloc;
      if (*v3)
        v14 = (uint64_t)(*v3 + 1);
      else
        v14 = 0;
      v15 = *(_OWORD *)(v14 + 24);
      v11[2] = *(_QWORD *)(v14 + 40);
      *(_OWORD *)v11 = v15;
      v45 = *(_OWORD *)(v14 + 48);
      v16 = *(_DWORD *)(v14 + 67);
      *v12 = *(float *)(v14 + 64);
      *(_DWORD *)((char *)v12 + 3) = v16;
      LOWORD(v47) = *(unsigned __int8 *)(v14 + 129);
      HIBYTE(v47) = 0;
      BYTE2(v47) = v46 != 3.4028e38;
      md::PointPosition::addElement((unint64_t *)&v40, v3);
      BYTE1(v47) = v10;
      v17 = *((_DWORD *)v4 + 122);
      *((_DWORD *)v4 + 122) = v17 + 1;
      v18 = *((_QWORD *)v4 + 58);
      v19 = (uint64_t *)v39;
LABEL_21:
      v20 = v19;
      if (v18)
      {
        do
        {
          v19 = (uint64_t *)v18;
          v21 = *(_DWORD *)(v18 + 32);
          if (v17 < v21)
          {
            v18 = *v19;
            goto LABEL_21;
          }
          if (v21 >= v17)
            goto LABEL_14;
          v18 = v19[1];
        }
        while (v18);
        v20 = v19 + 1;
      }
      v22 = v12;
      v23 = v11;
      v24 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)*v38 + 16))(*v38, 128, 8);
      v48[0] = (uint64_t *)v24;
      v48[1] = v38;
      v49 = 0;
      *(_DWORD *)(v24 + 32) = v17;
      *(_QWORD *)(v24 + 40) = 0;
      *(_QWORD *)(v24 + 48) = 0;
      v25 = v43;
      *(_QWORD *)(v24 + 56) = 0;
      *(_QWORD *)(v24 + 64) = v25;
      v27 = v40;
      v26 = v41;
      v28 = (char *)v41 - (char *)v40;
      if (v41 != v40)
      {
        if (v28 < 0)
          abort();
        v29 = (_QWORD *)(*(uint64_t (**)(uint64_t, int64_t, uint64_t))(*(_QWORD *)v25 + 16))(v25, (char *)v41 - (char *)v40, 8);
        *(_QWORD *)(v24 + 40) = v29;
        *(_QWORD *)(v24 + 56) = &v29[v28 >> 3];
        do
        {
          if (v29)
          {
            *v29 = 0;
            v30 = *v27;
            *v29 = *v27;
            if (v30)
              ++*v30;
          }
          ++v27;
          ++v29;
        }
        while (v27 != v26);
        *(_QWORD *)(v24 + 48) = v29;
      }
      v11 = v23;
      *(_OWORD *)(v24 + 72) = *(_OWORD *)v23;
      *(_QWORD *)(v24 + 88) = v23[2];
      *(_OWORD *)(v24 + 96) = v45;
      v12 = v22;
      *(float *)(v24 + 112) = *v22;
      *(float *)(v24 + 115) = *(float *)((char *)v22 + 3);
      *(_DWORD *)(v24 + 120) = v47;
      *(_QWORD *)v24 = 0;
      *(_QWORD *)(v24 + 8) = 0;
      *(_QWORD *)(v24 + 16) = v19;
      *v20 = v24;
      v4 = a1;
      v31 = **((_QWORD **)a1 + 57);
      if (v31)
      {
        *((_QWORD *)a1 + 57) = v31;
        v24 = *v20;
      }
      std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*((uint64_t **)a1 + 58), (uint64_t *)v24);
      ++*((_QWORD *)a1 + 60);
      v3 = a2;
LABEL_14:
      v48[0] = (uint64_t *)&v40;
      std::vector<geo::fast_shared_ptr<md::PointLabelFeatureElement,mdm::MDAllocator>,geo::StdAllocator<geo::fast_shared_ptr<md::PointLabelFeatureElement,mdm::MDAllocator>,mdm::Allocator>>::__destroy_vector::operator()[abi:nn180100](v48);
      ++v10;
    }
    while ((uint64_t)(*((_QWORD *)v4 + 85) - *((_QWORD *)v4 + 84)) >> 4 > (unint64_t)v10);
  }
  if (*v3)
    v33 = (uint64_t)(*v3 + 1);
  else
    v33 = 0;
  md::PointLabelFeatureElement::updateText(v33, v4, a3);
  if (*v3)
    v34 = (md::PointLabelFeatureElement *)(*v3 + 1);
  else
    v34 = 0;
  md::PointLabelFeatureElement::updateLabelPlacements(v34, v4);
}

void sub_19F9034A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  uint64_t v15;

  std::unique_ptr<std::__tree_node<std::__value_type<md::LabelIdentifier,md::PointPosition>,void *>,std::__tree_node_destructor<geo::StdAllocator<std::__tree_node<std::__value_type<md::LabelIdentifier,md::PointPosition>,void *>,mdm::Allocator>>>::~unique_ptr[abi:nn180100]((uint64_t *)(v15 - 120));
  *(_QWORD *)(v15 - 96) = &a15;
  std::vector<geo::fast_shared_ptr<md::PointLabelFeatureElement,mdm::MDAllocator>,geo::StdAllocator<geo::fast_shared_ptr<md::PointLabelFeatureElement,mdm::MDAllocator>,mdm::Allocator>>::__destroy_vector::operator()[abi:nn180100]((uint64_t **)(v15 - 96));
  _Unwind_Resume(a1);
}

uint64_t **std::vector<geo::fast_shared_ptr<md::PointLabelFeatureElement,mdm::MDAllocator>,geo::StdAllocator<geo::fast_shared_ptr<md::PointLabelFeatureElement,mdm::MDAllocator>,mdm::Allocator>>::__destroy_vector::operator()[abi:nn180100](uint64_t **result)
{
  uint64_t *v1;
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t **v6;
  unsigned __int8 v7;
  _QWORD *v8;
  _QWORD *v9;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  uint64_t v14;
  geo::read_write_lock *v15;
  const char *v16;
  malloc_zone_t *zone;

  v1 = *result;
  v2 = (_QWORD *)**result;
  if (v2)
  {
    v3 = (_QWORD *)v1[1];
    v4 = **result;
    v5 = *result;
    if (v3 != v2)
    {
      v6 = result;
      do
      {
        v9 = (_QWORD *)*--v3;
        v8 = v9;
        if (v9)
        {
          if ((*v8)-- == 1)
          {
            v11 = (std::__shared_weak_count *)v8[3];
            if (v11)
            {
              p_shared_owners = (unint64_t *)&v11->__shared_owners_;
              do
                v13 = __ldaxr(p_shared_owners);
              while (__stlxr(v13 - 1, p_shared_owners));
              if (!v13)
              {
                ((void (*)(std::__shared_weak_count *, uint64_t))v11->__on_zero_shared)(v11, v4);
                std::__shared_weak_count::__release_weak(v11);
              }
            }
            {
              v14 = operator new();
              *(_QWORD *)(v14 + 16) = 0x5ED09DD50000000FLL;
              *(_QWORD *)(v14 + 24) = "VectorKitLabels";
              *(_OWORD *)(v14 + 32) = xmmword_19FFB2E80;
              *(_QWORD *)v14 = &off_1E42B5668;
              *(_QWORD *)(v14 + 8) = "VectorKitLabels";
              *(_OWORD *)(v14 + 72) = 0u;
              *(_OWORD *)(v14 + 88) = 0u;
              *(_OWORD *)(v14 + 104) = 0u;
              *(_OWORD *)(v14 + 120) = 0u;
              *(_OWORD *)(v14 + 136) = 0u;
              *(_OWORD *)(v14 + 152) = 0u;
              *(_OWORD *)(v14 + 168) = 0u;
              *(_OWORD *)(v14 + 184) = 0u;
              *(_OWORD *)(v14 + 200) = 0u;
              *(_OWORD *)(v14 + 216) = 0u;
              *(_OWORD *)(v14 + 232) = 0u;
              *(_QWORD *)(v14 + 248) = 0;
              *(_OWORD *)(v14 + 56) = 0u;
              v15 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v14 + 56), 0);
              if ((_DWORD)v15)
                geo::read_write_lock::logFailure(v15, (uint64_t)"initialization", v16);
              zone = malloc_create_zone(0, 0);
              *(_QWORD *)(v14 + 48) = zone;
              malloc_set_zone_name(zone, "VectorKitLabels");
              *(_QWORD *)(v14 + 256) = os_log_create("com.apple.VectorKit", "Memory");
              mdm::Allocator::instance(void)::alloc = v14;
            }
            (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc + 40))(mdm::Allocator::instance(void)::alloc, *v3, 152);
            *v3 = 0;
          }
        }
      }
      while (v3 != v2);
      v5 = *v6;
      v4 = **v6;
    }
    v1[1] = (uint64_t)v2;
    return (uint64_t **)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v5[3] + 40))(v5[3], v4, v5[2] - v4);
  }
  return result;
}

uint64_t *std::unique_ptr<std::__tree_node<std::__value_type<md::LabelIdentifier,md::PointPosition>,void *>,std::__tree_node_destructor<geo::StdAllocator<std::__tree_node<std::__value_type<md::LabelIdentifier,md::PointPosition>,void *>,mdm::Allocator>>>::~unique_ptr[abi:nn180100](uint64_t *a1)
{
  uint64_t v2;
  uint64_t *v4;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (*((_BYTE *)a1 + 16))
    {
      v4 = (uint64_t *)(v2 + 40);
      std::vector<geo::fast_shared_ptr<md::PointLabelFeatureElement,mdm::MDAllocator>,geo::StdAllocator<geo::fast_shared_ptr<md::PointLabelFeatureElement,mdm::MDAllocator>,mdm::Allocator>>::__destroy_vector::operator()[abi:nn180100](&v4);
    }
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)a1[1] + 40))(*(_QWORD *)a1[1], v2, 128);
  }
  return a1;
}

void std::__shared_ptr_emplace<md::MuninStorefront>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DB438;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<md::MuninStorefront>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DB438;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

void sub_19F90383C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_19F903AA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;

  md::MeshSet<ggl::PolygonBase::CompressedMeshMesh,ggl::PolygonBase::CompressedVbo>::~MeshSet((uint64_t)&a9);

  _Unwind_Resume(a1);
}

void sub_19F903CE4(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

void sub_19F903CF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v14;
  uint64_t v15;

  v14 = a13;
  if (a13 == &a10)
  {
    v15 = 4;
    v14 = &a10;
  }
  else
  {
    if (!a13)
      _Unwind_Resume(exception_object);
    v15 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v14 + 8 * v15))();
  _Unwind_Resume(exception_object);
}

void sub_19F903EE8(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

void sub_19F903EF4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v14;
  uint64_t v15;

  v14 = a13;
  if (a13 == &a10)
  {
    v15 = 4;
    v14 = &a10;
  }
  else
  {
    if (!a13)
      _Unwind_Resume(exception_object);
    v15 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v14 + 8 * v15))();
  _Unwind_Resume(exception_object);
}

void sub_19F9040B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v14;
  uint64_t v15;

  v14 = a13;
  if (a13 == &a10)
  {
    v15 = 4;
    v14 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v15 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v14 + 8 * v15))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void sub_19F90426C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v14;
  uint64_t v15;

  v14 = a13;
  if (a13 == &a10)
  {
    v15 = 4;
    v14 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v15 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v14 + 8 * v15))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void sub_19F904424(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v14;
  uint64_t v15;

  v14 = a13;
  if (a13 == &a10)
  {
    v15 = 4;
    v14 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v15 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v14 + 8 * v15))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void sub_19F9045DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v14;
  uint64_t v15;

  v14 = a13;
  if (a13 == &a10)
  {
    v15 = 4;
    v14 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v15 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v14 + 8 * v15))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void sub_19F9057F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25)
{
  uint64_t v25;

  if (v25)
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a13 + 40))(a13, v25, a12 - v25);
  _Unwind_Resume(exception_object);
}

void sub_19F9058C0(gss::Allocator *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,int a21,unsigned __int16 a22,char a23)
{
  BOOL v23;
  uint64_t v24;

  if (a23)
    v23 = 1;
  else
    v23 = a20 == 0;
  if (!v23)
  {
    v24 = gss::Allocator::instance(a1);
    (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v24 + 40))(v24, a20, a22);
  }
  JUMPOUT(0x19F905898);
}

void std::vector<ggl::Batcher>::__base_destruct_at_end[abi:nn180100](uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  void *v11;
  uint64_t v12;
  void *v13;

  v4 = *(_QWORD *)(a1 + 8);
  if (v4 != a2)
  {
    do
    {
      v5 = *(void **)(v4 - 24);
      if (v5)
      {
        *(_QWORD *)(v4 - 16) = v5;
        operator delete(v5);
      }
      v6 = *(_QWORD *)(v4 - 56);
      if (v6)
      {
        v7 = *(_QWORD *)(v4 - 48);
        v8 = *(_QWORD *)(v4 - 56);
        if (v7 != v6)
        {
          v9 = *(_QWORD *)(v4 - 48);
          do
          {
            v11 = *(void **)(v9 - 24);
            v9 -= 24;
            v10 = v11;
            if (v11)
            {
              *(_QWORD *)(v7 - 16) = v10;
              operator delete(v10);
            }
            v7 = v9;
          }
          while (v9 != v6);
          v8 = *(_QWORD *)(v4 - 56);
        }
        *(_QWORD *)(v4 - 48) = v6;
        (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v4 - 32) + 40))(*(_QWORD *)(v4 - 32), v8, *(_QWORD *)(v4 - 40) - v8);
      }
      v12 = v4 - 80;
      v13 = *(void **)(v4 - 80);
      if (v13)
      {
        *(_QWORD *)(v4 - 72) = v13;
        operator delete(v13);
      }
      v4 -= 80;
    }
    while (v12 != a2);
  }
  *(_QWORD *)(a1 + 8) = a2;
}

uint64_t md::MeshSet<ggl::PolygonBase::CompressedMeshMesh,ggl::PolygonBase::CompressedVbo>::~MeshSet(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  int v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  int v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  void *v28;

  v2 = *(std::__shared_weak_count **)(a1 + 176);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v5 = *(_QWORD *)(a1 + 160);
  *(_QWORD *)(a1 + 160) = 0;
  if (v5)
    std::default_delete<md::MeshSetStorage>::operator()[abi:nn180100](v5);
  if (*(_QWORD *)(a1 + 136))
  {
    v7 = *(_QWORD *)(a1 + 112);
    v6 = *(_QWORD *)(a1 + 120);
    if (v6 != v7)
    {
      v8 = *(_QWORD *)(a1 + 96);
      v9 = *(_QWORD *)(a1 + 104);
      v10 = *(unsigned __int8 *)(a1 + 128);
      v11 = *(unsigned __int8 *)(a1 + 129);
      if (v8 && *(_BYTE *)(v9 + 17) != 2)
        (*(void (**)(uint64_t))(*(_QWORD *)v8 + 64))(v8);
      if (v10 && !v11)
      {
        v13 = *(_QWORD *)(v9 + 56);
        v12 = *(_QWORD *)(v9 + 64);
        if (v12 == v13)
          v13 = *(_QWORD *)(v9 + 80) - *(_QWORD *)(v9 + 72);
        if (v7 < v13)
          v13 = v7;
        if (v12 <= v6)
          v12 = v6;
        if (v12 == v13)
          v12 = v13 + *(_QWORD *)(v9 + 80) - *(_QWORD *)(v9 + 72);
        *(_QWORD *)(v9 + 56) = v13;
        *(_QWORD *)(v9 + 64) = v12;
      }
    }
  }
  if (*(_QWORD *)(a1 + 88))
  {
    v15 = *(_QWORD *)(a1 + 64);
    v14 = *(_QWORD *)(a1 + 72);
    if (v14 != v15)
    {
      v16 = *(_QWORD *)(a1 + 48);
      v17 = *(_QWORD *)(a1 + 56);
      v18 = *(unsigned __int8 *)(a1 + 80);
      v19 = *(unsigned __int8 *)(a1 + 81);
      if (v16 && *(_BYTE *)(v17 + 17) != 2)
        (*(void (**)(uint64_t))(*(_QWORD *)v16 + 64))(v16);
      if (v18 && !v19)
      {
        v21 = *(_QWORD *)(v17 + 56);
        v20 = *(_QWORD *)(v17 + 64);
        if (v20 == v21)
          v21 = *(_QWORD *)(v17 + 80) - *(_QWORD *)(v17 + 72);
        if (v15 < v21)
          v21 = v15;
        if (v20 <= v14)
          v20 = v14;
        if (v20 == v21)
          v20 = v21 + *(_QWORD *)(v17 + 80) - *(_QWORD *)(v17 + 72);
        *(_QWORD *)(v17 + 56) = v21;
        *(_QWORD *)(v17 + 64) = v20;
      }
    }
  }
  v22 = *(_QWORD *)(a1 + 24);
  if (v22)
  {
    v23 = *(_QWORD *)(a1 + 32);
    v24 = *(void **)(a1 + 24);
    if (v23 != v22)
    {
      do
      {
        v25 = *(std::__shared_weak_count **)(v23 - 8);
        if (v25)
        {
          v26 = (unint64_t *)&v25->__shared_owners_;
          do
            v27 = __ldaxr(v26);
          while (__stlxr(v27 - 1, v26));
          if (!v27)
          {
            ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
            std::__shared_weak_count::__release_weak(v25);
          }
        }
        v23 -= 16;
      }
      while (v23 != v22);
      v24 = *(void **)(a1 + 24);
    }
    *(_QWORD *)(a1 + 32) = v22;
    operator delete(v24);
  }
  v28 = *(void **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)(a1 + 8) = v28;
    operator delete(v28);
  }
  return a1;
}

void std::default_delete<md::MeshSetStorage>::operator()[abi:nn180100](uint64_t a1)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  int v15;
  unint64_t v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;

  if (*(_QWORD *)(a1 + 168))
  {
    v3 = *(_QWORD *)(a1 + 144);
    v2 = *(_QWORD *)(a1 + 152);
    if (v2 != v3)
    {
      v4 = *(_QWORD *)(a1 + 128);
      v5 = *(_QWORD *)(a1 + 136);
      v6 = *(unsigned __int8 *)(a1 + 160);
      v7 = *(unsigned __int8 *)(a1 + 161);
      if (v4 && *(_BYTE *)(v5 + 17) != 2)
        (*(void (**)(uint64_t))(*(_QWORD *)v4 + 64))(v4);
      if (v6 && !v7)
      {
        v9 = *(_QWORD *)(v5 + 56);
        v8 = *(_QWORD *)(v5 + 64);
        if (v8 == v9)
          v9 = *(_QWORD *)(v5 + 80) - *(_QWORD *)(v5 + 72);
        if (v3 < v9)
          v9 = v3;
        if (v8 <= v2)
          v8 = v2;
        if (v8 == v9)
          v8 = v9 + *(_QWORD *)(v5 + 80) - *(_QWORD *)(v5 + 72);
        *(_QWORD *)(v5 + 56) = v9;
        *(_QWORD *)(v5 + 64) = v8;
      }
    }
  }
  if (*(_QWORD *)(a1 + 120))
  {
    v11 = *(_QWORD *)(a1 + 96);
    v10 = *(_QWORD *)(a1 + 104);
    if (v10 != v11)
    {
      v12 = *(_QWORD *)(a1 + 80);
      v13 = *(_QWORD *)(a1 + 88);
      v14 = *(unsigned __int8 *)(a1 + 112);
      v15 = *(unsigned __int8 *)(a1 + 113);
      if (v12 && *(_BYTE *)(v13 + 17) != 2)
        (*(void (**)(uint64_t))(*(_QWORD *)v12 + 64))(v12);
      if (v14 && !v15)
      {
        v17 = *(_QWORD *)(v13 + 56);
        v16 = *(_QWORD *)(v13 + 64);
        if (v16 == v17)
          v17 = *(_QWORD *)(v13 + 80) - *(_QWORD *)(v13 + 72);
        if (v11 < v17)
          v17 = v11;
        if (v16 <= v10)
          v16 = v10;
        if (v16 == v17)
          v16 = v17 + *(_QWORD *)(v13 + 80) - *(_QWORD *)(v13 + 72);
        *(_QWORD *)(v13 + 56) = v17;
        *(_QWORD *)(v13 + 64) = v16;
      }
    }
  }
  v18 = *(std::__shared_weak_count **)(a1 + 72);
  if (v18)
  {
    p_shared_owners = (unint64_t *)&v18->__shared_owners_;
    do
      v20 = __ldaxr(p_shared_owners);
    while (__stlxr(v20 - 1, p_shared_owners));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  v21 = *(std::__shared_weak_count **)(a1 + 56);
  if (v21)
  {
    v22 = (unint64_t *)&v21->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  std::__tree<gdc::LayerDataWithWorld>::destroy(*(_QWORD **)(a1 + 24));
  JUMPOUT(0x1A1AF4E00);
}

char *std::unordered_map<StyleQueryOverride,std::vector<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>>,`anonymous namespace'::StyleQueryOverrideHash,std::equal_to<StyleQueryOverride>,std::allocator<std::pair<StyleQueryOverride const,std::vector<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>>>>>::operator[](uint64_t a1, unsigned __int8 *a2)
{
  unint64_t v2;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  void **v10;
  _QWORD *v11;
  unint64_t v13;
  uint64_t v15;
  float v16;
  float v17;
  _BOOL8 v18;
  unint64_t v19;
  unint64_t v20;
  size_t v21;
  uint64_t v22;
  _QWORD *v23;
  unint64_t v24;

  v5 = *a2;
  v6 = a2[1];
  v7 = (v6
      + ((v5 - 0x61C8864680B583EBLL) << 6)
      + ((unint64_t)(v5 - 0x61C8864680B583EBLL) >> 2)
      - 0x61C8864680B583EBLL) ^ (v5 - 0x61C8864680B583EBLL);
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v2 = (v6
          + ((v5 - 0x61C8864680B583EBLL) << 6)
          + ((unint64_t)(v5 - 0x61C8864680B583EBLL) >> 2)
          - 0x61C8864680B583EBLL) ^ (v5 - 0x61C8864680B583EBLL);
      if (v7 >= v8)
        v2 = v7 % v8;
    }
    else
    {
      v2 = v7 & (v8 - 1);
    }
    v10 = *(void ***)(*(_QWORD *)a1 + 8 * v2);
    if (v10)
    {
      v11 = *v10;
      if (*v10)
      {
        if (v9.u32[0] < 2uLL)
        {
          while (1)
          {
            v15 = v11[1];
            if (v15 == v7)
            {
              if (*((unsigned __int8 *)v11 + 16) == (_DWORD)v5 && *((unsigned __int8 *)v11 + 17) == (_DWORD)v6)
                return (char *)(v11 + 3);
            }
            else if ((v15 & (v8 - 1)) != v2)
            {
              goto LABEL_28;
            }
            v11 = (_QWORD *)*v11;
            if (!v11)
              goto LABEL_28;
          }
        }
        do
        {
          v13 = v11[1];
          if (v13 == v7)
          {
            if (*((unsigned __int8 *)v11 + 16) == (_DWORD)v5 && *((unsigned __int8 *)v11 + 17) == (_DWORD)v6)
              return (char *)(v11 + 3);
          }
          else
          {
            if (v13 >= v8)
              v13 %= v8;
            if (v13 != v2)
              break;
          }
          v11 = (_QWORD *)*v11;
        }
        while (v11);
      }
    }
  }
LABEL_28:
  v11 = operator new(0x30uLL);
  *v11 = 0;
  v11[1] = v7;
  *((_WORD *)v11 + 8) = *(_WORD *)a2;
  v11[3] = 0;
  v11[4] = 0;
  v11[5] = 0;
  v16 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v17 = *(float *)(a1 + 32);
  if (!v8 || (float)(v17 * (float)v8) < v16)
  {
    v18 = 1;
    if (v8 >= 3)
      v18 = (v8 & (v8 - 1)) != 0;
    v19 = v18 | (2 * v8);
    v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20)
      v21 = v20;
    else
      v21 = v19;
    v8 = *(_QWORD *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8)
        v2 = v7 % v8;
      else
        v2 = v7;
    }
    else
    {
      v2 = (v8 - 1) & v7;
    }
  }
  v22 = *(_QWORD *)a1;
  v23 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v2);
  if (v23)
  {
    *v11 = *v23;
LABEL_48:
    *v23 = v11;
    goto LABEL_49;
  }
  *v11 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v11;
  *(_QWORD *)(v22 + 8 * v2) = a1 + 16;
  if (*v11)
  {
    v24 = *(_QWORD *)(*v11 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v24 >= v8)
        v24 %= v8;
    }
    else
    {
      v24 &= v8 - 1;
    }
    v23 = (_QWORD *)(*(_QWORD *)a1 + 8 * v24);
    goto LABEL_48;
  }
LABEL_49:
  ++*(_QWORD *)(a1 + 24);
  return (char *)(v11 + 3);
}

void sub_19F906650(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void **v2;
  char *v4;
  char *v5;
  void *v6;
  void **v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;

  v4 = (char *)*v2;
  if (*v2)
  {
    v5 = (char *)v1[4];
    v6 = *v2;
    if (v5 != v4)
    {
      v7 = v2;
      do
      {
        v8 = (std::__shared_weak_count *)*((_QWORD *)v5 - 1);
        if (v8)
        {
          p_shared_owners = (unint64_t *)&v8->__shared_owners_;
          do
            v10 = __ldaxr(p_shared_owners);
          while (__stlxr(v10 - 1, p_shared_owners));
          if (!v10)
          {
            ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
            std::__shared_weak_count::__release_weak(v8);
          }
        }
        v5 -= 16;
      }
      while (v5 != v4);
      v6 = *v7;
    }
    v1[4] = v4;
    operator delete(v6);
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

BOOL FeatureStyleAttributesSet::FeatureStyleAttributesCompare::operator()(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t v3;
  int *v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  int *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  unint64_t v16;
  uint64_t v17;

  v2 = (*(char *)(a1 + 34) - 0x61C8864680B57FA7) ^ 0x11;
  v3 = *(unsigned __int8 *)(a1 + 33);
  if (*(_BYTE *)(a1 + 33))
  {
    v4 = (int *)(*(_QWORD *)a1 + 4);
    do
    {
      v5 = ((v2 << 6) - 0x61C8864680B583EBLL + (v2 >> 2) + *(v4 - 1)) ^ v2;
      v2 = (*v4 - 0x61C8864680B583EBLL + (v5 << 6) + (v5 >> 2)) ^ v5;
      v4 += 2;
      --v3;
    }
    while (v3);
  }
  v6 = *(unsigned __int8 *)(a1 + 32);
  if (*(_BYTE *)(a1 + 32))
  {
    v7 = (uint64_t *)(*(_QWORD *)(a1 + 24) + 4);
    do
    {
      v8 = ((v2 << 6) - 0x61C8864680B583EBLL + (v2 >> 2) + *((unsigned int *)v7 - 1)) ^ v2;
      v9 = *v7;
      v7 = (uint64_t *)((char *)v7 + 12);
      v2 = (v9 - 0x61C8864680B583EBLL + (v8 << 6) + (v8 >> 2)) ^ v8;
      --v6;
    }
    while (v6);
  }
  v10 = (*(char *)(a2 + 34) - 0x61C8864680B57FA7) ^ 0x11;
  v11 = *(unsigned __int8 *)(a2 + 33);
  if (*(_BYTE *)(a2 + 33))
  {
    v12 = (int *)(*(_QWORD *)a2 + 4);
    do
    {
      v13 = ((v10 << 6) - 0x61C8864680B583EBLL + (v10 >> 2) + *(v12 - 1)) ^ v10;
      v10 = (*v12 - 0x61C8864680B583EBLL + (v13 << 6) + (v13 >> 2)) ^ v13;
      v12 += 2;
      --v11;
    }
    while (v11);
  }
  v14 = *(unsigned __int8 *)(a2 + 32);
  if (*(_BYTE *)(a2 + 32))
  {
    v15 = (uint64_t *)(*(_QWORD *)(a2 + 24) + 4);
    do
    {
      v16 = ((v10 << 6) - 0x61C8864680B583EBLL + (v10 >> 2) + *((unsigned int *)v15 - 1)) ^ v10;
      v17 = *v15;
      v15 = (uint64_t *)((char *)v15 + 12);
      v10 = (v17 - 0x61C8864680B583EBLL + (v16 << 6) + (v16 >> 2)) ^ v16;
      --v14;
    }
    while (v14);
  }
  return v2 < v10;
}

uint64_t *md::MeshSet<ggl::PolygonBase::CompressedMeshMesh,ggl::PolygonBase::CompressedVbo>::finishedWriting(uint64_t *a1)
{
  uint64_t v2;
  md::MeshSetStorage *v3;
  unint64_t v4;
  unint64_t v5;
  _QWORD *v6;
  int v7;
  int v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  int v14;
  int v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unsigned __int8 v23;
  unsigned __int8 v24;
  uint64_t v25;

  v2 = a1[21];
  if (v2 && *(_QWORD *)v2 == a1[19])
    *(_BYTE *)(v2 + 80) = 1;
  v3 = (md::MeshSetStorage *)a1[20];
  if (v3)
    md::MeshSetStorage::finalize(v3);
  v25 = 0;
  v19 = 0;
  v20 = 0;
  ggl::BufferMemory::operator=(a1 + 6, (uint64_t)&v19);
  if (v25)
  {
    v5 = v21;
    v4 = v22;
    if (v22 != v21)
    {
      v6 = (_QWORD *)v20;
      v7 = v23;
      v8 = v24;
      if (v19 && *(_BYTE *)(v20 + 17) != 2)
        (*(void (**)(void))(*(_QWORD *)v19 + 64))();
      if (v7 && !v8)
      {
        v10 = v6[7];
        v9 = v6[8];
        if (v9 == v10)
          v10 = v6[10] - v6[9];
        if (v5 < v10)
          v10 = v5;
        if (v9 <= v4)
          v9 = v4;
        if (v9 == v10)
          v9 = v10 + v6[10] - v6[9];
        v6[7] = v10;
        v6[8] = v9;
      }
    }
  }
  v25 = 0;
  v19 = 0;
  v20 = 0;
  ggl::BufferMemory::operator=(a1 + 12, (uint64_t)&v19);
  if (v25)
  {
    v12 = v21;
    v11 = v22;
    if (v22 != v21)
    {
      v13 = (_QWORD *)v20;
      v14 = v23;
      v15 = v24;
      if (v19 && *(_BYTE *)(v20 + 17) != 2)
        (*(void (**)(void))(*(_QWORD *)v19 + 64))();
      if (v14 && !v15)
      {
        v17 = v13[7];
        v16 = v13[8];
        if (v16 == v17)
          v17 = v13[10] - v13[9];
        if (v12 < v17)
          v17 = v12;
        if (v16 <= v11)
          v16 = v11;
        if (v16 == v17)
          v16 = v17 + v13[10] - v13[9];
        v13[7] = v17;
        v13[8] = v16;
      }
    }
  }
  return a1 + 3;
}

void std::__hash_table<std::__hash_value_type<std::pair<void const*,unsigned long>,std::vector<md::Edge>>,std::__unordered_map_hasher<std::pair<void const*,unsigned long>,std::__hash_value_type<std::pair<void const*,unsigned long>,std::vector<md::Edge>>,std::hash<std::pair<void const*,unsigned long>>,std::equal_to<std::pair<void const*,unsigned long>>,true>,std::__unordered_map_equal<std::pair<void const*,unsigned long>,std::__hash_value_type<std::pair<void const*,unsigned long>,std::vector<md::Edge>>,std::equal_to<std::pair<void const*,unsigned long>>,std::hash<std::pair<void const*,unsigned long>>,true>,std::allocator<std::__hash_value_type<std::pair<void const*,unsigned long>,std::vector<md::Edge>>>>::__move_assign(uint64_t a1, uint64_t *a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t i;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  void *v17;

  if (*(_QWORD *)(a1 + 24))
  {
    v4 = *(_QWORD **)(a1 + 16);
    if (v4)
    {
      do
      {
        v16 = (_QWORD *)*v4;
        v17 = (void *)v4[4];
        if (v17)
        {
          v4[5] = v17;
          operator delete(v17);
        }
        operator delete(v4);
        v4 = v16;
      }
      while (v16);
    }
    *(_QWORD *)(a1 + 16) = 0;
    v5 = *(_QWORD *)(a1 + 8);
    if (v5)
    {
      for (i = 0; i != v5; ++i)
        *(_QWORD *)(*(_QWORD *)a1 + 8 * i) = 0;
    }
    *(_QWORD *)(a1 + 24) = 0;
  }
  v7 = *a2;
  *a2 = 0;
  v8 = *(void **)a1;
  *(_QWORD *)a1 = v7;
  if (v8)
    operator delete(v8);
  v11 = a2[2];
  v10 = a2 + 2;
  v9 = v11;
  v12 = *(v10 - 1);
  *(_QWORD *)(a1 + 16) = v11;
  *(_QWORD *)(a1 + 8) = v12;
  *(v10 - 1) = 0;
  v13 = v10[1];
  *(_QWORD *)(a1 + 24) = v13;
  *(_DWORD *)(a1 + 32) = *((_DWORD *)v10 + 4);
  if (v13)
  {
    v14 = *(_QWORD *)(v9 + 8);
    v15 = *(_QWORD *)(a1 + 8);
    if ((v15 & (v15 - 1)) != 0)
    {
      if (v14 >= v15)
        v14 %= v15;
    }
    else
    {
      v14 &= v15 - 1;
    }
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v14) = a1 + 16;
    *v10 = 0;
    v10[1] = 0;
  }
}

void md::MeshSet<ggl::PolygonBase::CompressedMeshMesh,ggl::PolygonBase::CompressedVbo>::createMeshes(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, ResourceAccessor *a5, __n128 a6)
{
  uint64_t *v10;
  unsigned __int16 *v11;
  unsigned __int16 *v12;
  uint64_t v13;
  unsigned __int16 *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  unsigned __int16 *v30;
  unsigned __int16 *v31;
  std::__shared_weak_count *v32;
  unsigned __int16 *v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  char *v38;
  unsigned __int16 *v39;
  unsigned __int16 *v40;
  unsigned __int16 *v41;
  __int128 v42;
  unsigned __int16 *v43;
  std::__shared_weak_count *v44;
  unint64_t *p_shared_owners;
  unint64_t v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  unint64_t *v50;
  unint64_t v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unsigned __int16 *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  __int128 v64;
  uint64_t v65;
  __int128 v66;
  unint64_t v67;
  unint64_t v68;
  _QWORD *v69;
  int v70;
  int v71;
  unint64_t v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  unint64_t v79;
  _QWORD *v80;
  int v81;
  int v82;
  unint64_t v83;
  unint64_t v84;
  _Unwind_Exception *v85;
  _Unwind_Exception *v86;
  __int128 v87;
  __n128 v89;
  __int128 v90;
  ResourceAccessor *v91;
  __int128 v92;
  unint64_t v93;
  unint64_t v94;
  __int16 v95;
  uint64_t v96;
  __int128 v97;
  __int128 v98;
  uint64_t v99;
  uint64_t v100;
  __int128 v101;
  uint64_t v102[3];

  v10 = (uint64_t *)a1[20];
  if (v10)
    md::MeshSetStorage::prepareStorage(v10, a5);
  v91 = a5;
  v12 = (unsigned __int16 *)*a1;
  v11 = (unsigned __int16 *)a1[1];
  if ((unsigned __int16 *)*a1 != v11)
  {
    do
    {
      if (!*v12 || !*((_DWORD *)v12 + 1))
        goto LABEL_6;
      v13 = a1[19];
      if (*(_BYTE *)(v13 + 40)
        && (v14 = (unsigned __int16 *)a1[21]) != 0
        && *(_QWORD *)v14 == v13
        && (v15 = *((_QWORD *)v14 + 1) * *v12,
            v16 = *((_QWORD *)v14 + 8),
            v17 = *((_QWORD *)v14 + 4),
            v16 + v15 <= (unint64_t)(*((_QWORD *)v14 + 5) - v17)))
      {
        *(_QWORD *)&v92 = v17 + v16;
        *((_QWORD *)&v92 + 1) = v17 + v16 + v15;
        *((_QWORD *)v14 + 8) = v16 + v15;
        v58 = *(_QWORD *)(v13 + 48);
        v102[0] = a3;
        v59 = *((_QWORD *)v14 + 14);
        if (!v59)
        {
          std::__throw_bad_function_call[abi:nn180100]();
          v86 = v85;
          std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&v98);
          std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&v97);
          std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&v99);
          std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&v101);
          _Unwind_Resume(v86);
        }
        (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t *, uint64_t, __int128 *))(*(_QWORD *)v59 + 48))(&v101, v59, v102, v58, &v92);
        v13 = a1[19];
      }
      else
      {
        v101 = 0uLL;
      }
      md::MeshSetStorage::buildSubIndexData(&v99, v13, (_QWORD *)a1[21], a4, *((unsigned int *)v12 + 1));
      v97 = v101;
      if (*((_QWORD *)&v101 + 1))
      {
        v18 = (unint64_t *)(*((_QWORD *)&v101 + 1) + 8);
        do
          v19 = __ldxr(v18);
        while (__stxr(v19 + 1, v18));
      }
      v20 = operator new(0xA8uLL);
      v21 = v20;
      v20[1] = 0;
      v20[2] = 0;
      *v20 = &off_1E42DE8B8;
      v22 = v20 + 3;
      v92 = v97;
      v97 = 0uLL;
      v23 = (std::__shared_weak_count *)v100;
      v102[0] = v99;
      v102[1] = v100;
      if (v100)
      {
        v24 = (unint64_t *)(v100 + 8);
        do
          v25 = __ldxr(v24);
        while (__stxr(v25 + 1, v24));
        ggl::PolygonBase::CompressedMeshMesh::CompressedMeshMesh((uint64_t)(v20 + 3), a2, (uint64_t *)&v92, v102);
        do
          v26 = __ldaxr(v24);
        while (__stlxr(v26 - 1, v24));
        if (!v26)
        {
          ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
          std::__shared_weak_count::__release_weak(v23);
        }
      }
      else
      {
        ggl::PolygonBase::CompressedMeshMesh::CompressedMeshMesh((uint64_t)(v20 + 3), a2, (uint64_t *)&v92, v102);
      }
      v27 = (std::__shared_weak_count *)*((_QWORD *)&v92 + 1);
      if (*((_QWORD *)&v92 + 1))
      {
        v28 = (unint64_t *)(*((_QWORD *)&v92 + 1) + 8);
        do
          v29 = __ldaxr(v28);
        while (__stlxr(v29 - 1, v28));
        if (!v29)
        {
          ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
          std::__shared_weak_count::__release_weak(v27);
        }
      }
      *(_QWORD *)&v98 = v22;
      *((_QWORD *)&v98 + 1) = v21;
      v31 = (unsigned __int16 *)a1[4];
      v30 = (unsigned __int16 *)a1[5];
      if (v31 >= v30)
      {
        v33 = (unsigned __int16 *)a1[3];
        v34 = ((char *)v31 - (char *)v33) >> 4;
        v35 = v34 + 1;
        if ((unint64_t)(v34 + 1) >> 60)
          abort();
        v36 = (char *)v30 - (char *)v33;
        if (v36 >> 3 > v35)
          v35 = v36 >> 3;
        if ((unint64_t)v36 >= 0x7FFFFFFFFFFFFFF0)
          v37 = 0xFFFFFFFFFFFFFFFLL;
        else
          v37 = v35;
        if (v37 >> 60)
          std::__throw_bad_array_new_length[abi:nn180100]();
        v38 = (char *)operator new(16 * v37);
        v39 = (unsigned __int16 *)&v38[16 * v34];
        a6.n128_u64[1] = *((_QWORD *)&v98 + 1);
        *(_OWORD *)v39 = v98;
        v40 = v39 + 8;
        v41 = (unsigned __int16 *)&v38[16 * v37];
        v98 = 0uLL;
        if (v31 == v33)
        {
          a1[3] = (uint64_t)v39;
          a1[4] = (uint64_t)v40;
          a1[5] = (uint64_t)v41;
        }
        else
        {
          do
          {
            v42 = *((_OWORD *)v31 - 1);
            v31 -= 8;
            a6.n128_u64[1] = *((_QWORD *)&v42 + 1);
            *((_OWORD *)v39 - 1) = v42;
            v39 -= 8;
            *(_QWORD *)v31 = 0;
            *((_QWORD *)v31 + 1) = 0;
          }
          while (v31 != v33);
          v31 = (unsigned __int16 *)a1[3];
          v43 = (unsigned __int16 *)a1[4];
          a1[3] = (uint64_t)v39;
          a1[4] = (uint64_t)v40;
          a1[5] = (uint64_t)v41;
          while (v43 != v31)
          {
            v44 = (std::__shared_weak_count *)*((_QWORD *)v43 - 1);
            if (v44)
            {
              p_shared_owners = (unint64_t *)&v44->__shared_owners_;
              do
                v46 = __ldaxr(p_shared_owners);
              while (__stlxr(v46 - 1, p_shared_owners));
              if (!v46)
              {
                ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
                std::__shared_weak_count::__release_weak(v44);
              }
            }
            v43 -= 8;
          }
        }
        if (v31)
          operator delete(v31);
        v47 = (std::__shared_weak_count *)*((_QWORD *)&v98 + 1);
        a1[4] = (uint64_t)v40;
        if (!v47)
          goto LABEL_57;
        v48 = (unint64_t *)&v47->__shared_owners_;
        do
          v49 = __ldaxr(v48);
        while (__stlxr(v49 - 1, v48));
        if (!v49)
        {
          ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
          std::__shared_weak_count::__release_weak(v47);
          v32 = (std::__shared_weak_count *)*((_QWORD *)&v97 + 1);
          if (!*((_QWORD *)&v97 + 1))
            goto LABEL_62;
        }
        else
        {
LABEL_57:
          v32 = (std::__shared_weak_count *)*((_QWORD *)&v97 + 1);
          if (!*((_QWORD *)&v97 + 1))
            goto LABEL_62;
        }
      }
      else
      {
        *(_QWORD *)v31 = v22;
        *((_QWORD *)v31 + 1) = v21;
        v98 = 0uLL;
        a1[4] = (uint64_t)(v31 + 8);
        v32 = (std::__shared_weak_count *)*((_QWORD *)&v97 + 1);
        if (!*((_QWORD *)&v97 + 1))
          goto LABEL_62;
      }
      v50 = (unint64_t *)&v32->__shared_owners_;
      do
        v51 = __ldaxr(v50);
      while (__stlxr(v51 - 1, v50));
      if (!v51)
      {
        ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
        std::__shared_weak_count::__release_weak(v32);
      }
LABEL_62:
      v52 = (std::__shared_weak_count *)v100;
      if (!v100)
        goto LABEL_66;
      v53 = (unint64_t *)(v100 + 8);
      do
        v54 = __ldaxr(v53);
      while (__stlxr(v54 - 1, v53));
      if (!v54)
      {
        ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
        std::__shared_weak_count::__release_weak(v52);
        v55 = (std::__shared_weak_count *)*((_QWORD *)&v101 + 1);
        if (*((_QWORD *)&v101 + 1))
        {
LABEL_67:
          v56 = (unint64_t *)&v55->__shared_owners_;
          do
            v57 = __ldaxr(v56);
          while (__stlxr(v57 - 1, v56));
          if (!v57)
          {
            ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
            std::__shared_weak_count::__release_weak(v55);
          }
        }
      }
      else
      {
LABEL_66:
        v55 = (std::__shared_weak_count *)*((_QWORD *)&v101 + 1);
        if (*((_QWORD *)&v101 + 1))
          goto LABEL_67;
      }
      v11 = (unsigned __int16 *)a1[1];
LABEL_6:
      v12 += 4;
    }
    while (v12 != v11);
  }
  v60 = (unsigned __int16 *)a1[3];
  if (v60 != (unsigned __int16 *)a1[4])
  {
    v61 = **(_QWORD **)(*(_QWORD *)v60 + 64);
    v62 = *(unsigned __int16 *)*a1;
    v92 = 0uLL;
    v63 = *(_QWORD *)(v61 + 8) * v62;
    a6.n128_u64[0] = (unint64_t)v91;
    *(_QWORD *)&v64 = v91;
    *((_QWORD *)&v64 + 1) = v61;
    v89 = a6;
    if (v63)
    {
      if (v91 && *(_BYTE *)(v61 + 17) != 2)
      {
        v87 = v64;
        v65 = (*((uint64_t (**)(ResourceAccessor *))v91->var0 + 7))(v91);
        v64 = v87;
      }
      else
      {
        v65 = *(_QWORD *)(v61 + 72);
      }
    }
    else
    {
      v65 = 0;
    }
    v92 = v64;
    v93 = 0;
    v94 = v63;
    v96 = v65;
    v95 = 257;
    ggl::BufferMemory::operator=(a1 + 6, (uint64_t)&v92);
    *(_QWORD *)&v66 = v89.n128_u64[0];
    if (v96)
    {
      v68 = v93;
      v67 = v94;
      if (v94 != v93)
      {
        v69 = (_QWORD *)*((_QWORD *)&v92 + 1);
        v70 = v95;
        v71 = HIBYTE(v95);
        if ((_QWORD)v92 && *(_BYTE *)(*((_QWORD *)&v92 + 1) + 17) != 2)
        {
          (*(void (**)(__n128))(*(_QWORD *)v92 + 64))(v89);
          *(_QWORD *)&v66 = v89.n128_u64[0];
        }
        if (v70 && !v71)
        {
          v73 = v69[7];
          v72 = v69[8];
          if (v72 == v73)
            v73 = v69[10] - v69[9];
          if (v68 < v73)
            v73 = v68;
          if (v72 <= v67)
            v72 = v67;
          if (v72 == v73)
            v72 = v73 + v69[10] - v69[9];
          v69[7] = v73;
          v69[8] = v72;
        }
      }
    }
    v74 = *(_QWORD *)(*(_QWORD *)a1[3] + 96);
    v75 = *(unsigned int *)(*a1 + 4);
    v92 = 0uLL;
    v76 = *(_QWORD *)(v74 + 8) * v75;
    *((_QWORD *)&v66 + 1) = v74;
    if (v76)
    {
      if (v91 && *(_BYTE *)(v74 + 17) != 2)
      {
        v90 = v66;
        v77 = (*((uint64_t (**)(ResourceAccessor *))v91->var0 + 7))(v91);
        v66 = v90;
      }
      else
      {
        v77 = *(_QWORD *)(v74 + 72);
      }
    }
    else
    {
      v77 = 0;
    }
    v92 = v66;
    v93 = 0;
    v94 = v76;
    v96 = v77;
    v95 = 257;
    ggl::BufferMemory::operator=(a1 + 12, (uint64_t)&v92);
    if (v96)
    {
      v79 = v93;
      v78 = v94;
      if (v94 != v93)
      {
        v80 = (_QWORD *)*((_QWORD *)&v92 + 1);
        v81 = v95;
        v82 = HIBYTE(v95);
        if ((_QWORD)v92 && *(_BYTE *)(*((_QWORD *)&v92 + 1) + 17) != 2)
          (*(void (**)(void))(*(_QWORD *)v92 + 64))();
        if (v81 && !v82)
        {
          v84 = v80[7];
          v83 = v80[8];
          if (v83 == v84)
            v84 = v80[10] - v80[9];
          if (v79 < v84)
            v84 = v79;
          if (v83 <= v78)
            v83 = v78;
          if (v83 == v84)
            v83 = v84 + v80[10] - v80[9];
          v80[7] = v84;
          v80[8] = v83;
        }
      }
    }
  }
}

void std::__shared_ptr_emplace<ggl::PolygonBase::CompressedMeshMesh>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DE8B8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::PolygonBase::CompressedMeshMesh>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DE8B8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<ggl::PolygonBase::CompressedMeshMesh>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t md::MeshSet<ggl::PolygonBase::CompressedMeshMesh,ggl::PolygonBase::CompressedVbo>::MeshSet(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  char *v5;
  unint64_t *v6;
  char *v7;
  uint64_t *v8;
  uint64_t **v9;
  uint64_t **v10;
  unint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  unint64_t v19;
  char *v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  char *v28;
  char *v29;
  unint64_t v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  __int128 v35;
  uint64_t v36;
  __int128 v38;

  v2 = a2;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 136) = 0;
  *(_BYTE *)(a1 + 144) = 0;
  *(_OWORD *)(a1 + 146) = 0u;
  *(_OWORD *)(a1 + 162) = 0u;
  *(_QWORD *)(a1 + 176) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 152) = a2;
  if (!a2)
  {
    v2 = operator new();
    *(_QWORD *)(v2 + 160) = 0;
    *(_QWORD *)(v2 + 168) = 0;
    *(_OWORD *)(v2 + 128) = 0u;
    *(_OWORD *)(v2 + 144) = 0u;
    *(_OWORD *)(v2 + 96) = 0u;
    *(_OWORD *)(v2 + 112) = 0u;
    *(_OWORD *)(v2 + 64) = 0u;
    *(_OWORD *)(v2 + 80) = 0u;
    *(_OWORD *)(v2 + 32) = 0u;
    *(_OWORD *)(v2 + 48) = 0u;
    *(_OWORD *)v2 = 0u;
    *(_OWORD *)(v2 + 16) = 0u;
    *(_QWORD *)(v2 + 16) = v2 + 24;
    *(_QWORD *)(v2 + 120) = 0;
    *(_QWORD *)(v2 + 128) = 0;
    *(_QWORD *)(v2 + 136) = 0;
    v4 = *(_QWORD *)(a1 + 160);
    *(_QWORD *)(a1 + 160) = v2;
    if (v4)
      std::default_delete<md::MeshSetStorage>::operator()[abi:nn180100](v4);
    *(_QWORD *)(a1 + 152) = v2;
  }
  v5 = (char *)operator new(0x90uLL);
  *((_QWORD *)v5 + 1) = 0;
  v6 = (unint64_t *)(v5 + 8);
  *((_QWORD *)v5 + 2) = 0;
  *(_QWORD *)v5 = &off_1E42DC3C0;
  *((_QWORD *)v5 + 3) = v2;
  v7 = v5 + 24;
  *((_QWORD *)v5 + 4) = 8;
  *(_OWORD *)(v5 + 40) = 0u;
  *(_OWORD *)(v5 + 56) = 0u;
  *(_OWORD *)(v5 + 72) = 0u;
  *(_OWORD *)(v5 + 88) = 0u;
  v5[104] = 0;
  *((_QWORD *)v5 + 14) = &off_1E42CBEB8;
  *((_QWORD *)v5 + 17) = v5 + 112;
  *(_QWORD *)&v38 = v5 + 24;
  *((_QWORD *)&v38 + 1) = v5;
  v9 = (uint64_t **)(v2 + 24);
  v8 = *(uint64_t **)(v2 + 24);
  if (v8)
  {
    while (1)
    {
      while (1)
      {
        v10 = (uint64_t **)v8;
        v11 = v8[4];
        if ((unint64_t)v7 >= v11)
          break;
        v8 = *v10;
        v9 = v10;
        if (!*v10)
          goto LABEL_12;
      }
      if (v11 >= (unint64_t)v7)
        break;
      v8 = v10[1];
      if (!v8)
      {
        v9 = v10 + 1;
        goto LABEL_12;
      }
    }
  }
  else
  {
    v10 = (uint64_t **)(v2 + 24);
LABEL_12:
    v12 = (uint64_t *)operator new(0x30uLL);
    v13 = v12;
    v12[4] = (uint64_t)v7;
    v12[5] = (uint64_t)v5;
    do
      v14 = __ldxr(v6);
    while (__stxr(v14 + 1, v6));
    *v12 = 0;
    v12[1] = 0;
    v12[2] = (uint64_t)v10;
    *v9 = v12;
    v15 = **(_QWORD **)(v2 + 16);
    if (v15)
    {
      *(_QWORD *)(v2 + 16) = v15;
      v13 = *v9;
    }
    std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v2 + 24), v13);
    ++*(_QWORD *)(v2 + 32);
  }
  v16 = *(std::__shared_weak_count **)(a1 + 176);
  *(_OWORD *)(a1 + 168) = v38;
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v18 = __ldaxr(p_shared_owners);
    while (__stlxr(v18 - 1, p_shared_owners));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  v20 = *(char **)(a1 + 8);
  v19 = *(_QWORD *)(a1 + 16);
  if ((unint64_t)v20 >= v19)
  {
    v22 = *(char **)a1;
    v23 = (uint64_t)&v20[-*(_QWORD *)a1];
    v24 = v23 >> 3;
    v25 = (v23 >> 3) + 1;
    if (v25 >> 61)
      abort();
    v26 = v19 - (_QWORD)v22;
    if (v26 >> 2 > v25)
      v25 = v26 >> 2;
    if ((unint64_t)v26 >= 0x7FFFFFFFFFFFFFF8)
      v27 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v27 = v25;
    if (v27 >> 61)
      std::__throw_bad_array_new_length[abi:nn180100]();
    v28 = (char *)operator new(8 * v27);
    v29 = &v28[8 * v24];
    *(_WORD *)v29 = 0;
    *((_DWORD *)v29 + 1) = 0;
    v21 = v29 + 8;
    if (v20 != v22)
    {
      v30 = v20 - v22 - 8;
      if (v30 < 0x58)
        goto LABEL_45;
      if ((unint64_t)(&v20[-v23] - v28) < 0x20)
        goto LABEL_45;
      v31 = (v30 >> 3) + 1;
      v32 = &v28[8 * v24 - 16];
      v33 = v20 - 16;
      v34 = v31 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v35 = *(_OWORD *)v33;
        *((_OWORD *)v32 - 1) = *((_OWORD *)v33 - 1);
        *(_OWORD *)v32 = v35;
        v32 -= 32;
        v33 -= 32;
        v34 -= 4;
      }
      while (v34);
      v29 -= 8 * (v31 & 0x3FFFFFFFFFFFFFFCLL);
      v20 -= 8 * (v31 & 0x3FFFFFFFFFFFFFFCLL);
      if (v31 != (v31 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_45:
        do
        {
          v36 = *((_QWORD *)v20 - 1);
          v20 -= 8;
          *((_QWORD *)v29 - 1) = v36;
          v29 -= 8;
        }
        while (v20 != v22);
      }
    }
    *(_QWORD *)a1 = v29;
    *(_QWORD *)(a1 + 8) = v21;
    *(_QWORD *)(a1 + 16) = &v28[8 * v27];
    if (v22)
      operator delete(v22);
  }
  else
  {
    *(_WORD *)v20 = 0;
    *((_DWORD *)v20 + 1) = 0;
    v21 = v20 + 8;
  }
  *(_QWORD *)(a1 + 8) = v21;
  return a1;
}

void sub_19F9075A8(_Unwind_Exception *a1)
{
  uint64_t v1;
  ggl::BufferMemory *v2;
  ggl::BufferMemory *v3;
  uint64_t v5;
  void *v6;

  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](v1 + 168);
  v5 = *(_QWORD *)(v1 + 160);
  *(_QWORD *)(v1 + 160) = 0;
  if (v5)
    std::default_delete<md::MeshSetStorage>::operator()[abi:nn180100](v5);
  ggl::BufferMemory::~BufferMemory(v3);
  ggl::BufferMemory::~BufferMemory(v2);
  md::DynamicTrafficTileList::~DynamicTrafficTileList((md::DynamicTrafficTileList *)(v1 + 24));
  v6 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v6;
    operator delete(v6);
  }
  _Unwind_Resume(a1);
}

uint64_t md::MeshSet<ggl::PolygonBase::CompressedMeshMesh,ggl::PolygonBase::CompressedVbo>::operator=(uint64_t a1, uint64_t a2)
{
  void *v4;
  void **v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;

  v4 = *(void **)a1;
  if (v4)
  {
    *(_QWORD *)(a1 + 8) = v4;
    operator delete(v4);
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
  }
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  v5 = (void **)(a1 + 24);
  v6 = *(_QWORD *)(a1 + 24);
  if (v6)
  {
    v7 = *(_QWORD *)(a1 + 32);
    v8 = *(void **)(a1 + 24);
    if (v7 != v6)
    {
      do
      {
        v9 = *(std::__shared_weak_count **)(v7 - 8);
        if (v9)
        {
          p_shared_owners = (unint64_t *)&v9->__shared_owners_;
          do
            v11 = __ldaxr(p_shared_owners);
          while (__stlxr(v11 - 1, p_shared_owners));
          if (!v11)
          {
            ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
            std::__shared_weak_count::__release_weak(v9);
          }
        }
        v7 -= 16;
      }
      while (v7 != v6);
      v8 = *v5;
    }
    *(_QWORD *)(a1 + 32) = v6;
    operator delete(v8);
    *v5 = 0;
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 40) = 0;
  }
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  ggl::BufferMemory::operator=((uint64_t *)(a1 + 48), a2 + 48);
  ggl::BufferMemory::operator=((uint64_t *)(a1 + 96), a2 + 96);
  *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
  v12 = *(_QWORD *)(a2 + 160);
  *(_QWORD *)(a2 + 160) = 0;
  v13 = *(_QWORD *)(a1 + 160);
  *(_QWORD *)(a1 + 160) = v12;
  if (v13)
    std::default_delete<md::MeshSetStorage>::operator()[abi:nn180100](v13);
  v14 = *(_OWORD *)(a2 + 168);
  *(_QWORD *)(a2 + 168) = 0;
  *(_QWORD *)(a2 + 176) = 0;
  v15 = *(std::__shared_weak_count **)(a1 + 176);
  *(_OWORD *)(a1 + 168) = v14;
  if (v15)
  {
    v16 = (unint64_t *)&v15->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  return a1;
}

void std::__function::__func<std::shared_ptr<md::MeshSetStorageClient> md::MeshSetStorage::registerClient<ggl::PolygonBase::CompressedVbo>(void)::{lambda(char const*,ggl::BufferData const&,gm::Range<unsigned long> const&)#1},std::allocator<std::shared_ptr<md::MeshSetStorageClient> md::MeshSetStorage::registerClient<ggl::PolygonBase::CompressedVbo>(void)::{lambda(char const*,ggl::BufferData const&,gm::Range<unsigned long> const&)#1}>,std::shared_ptr<ggl::VertexData> ()(char const*,ggl::BufferData const&,gm::Range<unsigned long> const&)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<std::shared_ptr<md::MeshSetStorageClient> md::MeshSetStorage::registerClient<ggl::PolygonBase::CompressedVbo>(void)::{lambda(char const*,ggl::BufferData const&,gm::Range<unsigned long> const&)#1},std::allocator<std::shared_ptr<md::MeshSetStorageClient> md::MeshSetStorage::registerClient<ggl::PolygonBase::CompressedVbo>(void)::{lambda(char const*,ggl::BufferData const&,gm::Range<unsigned long> const&)#1}>,std::shared_ptr<ggl::VertexData> ()(char const*,ggl::BufferData const&,gm::Range<unsigned long> const&)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E42CBEB8;
  return result;
}

void std::__function::__func<std::shared_ptr<md::MeshSetStorageClient> md::MeshSetStorage::registerClient<ggl::PolygonBase::CompressedVbo>(void)::{lambda(char const*,ggl::BufferData const&,gm::Range<unsigned long> const&)#1},std::allocator<std::shared_ptr<md::MeshSetStorageClient> md::MeshSetStorage::registerClient<ggl::PolygonBase::CompressedVbo>(void)::{lambda(char const*,ggl::BufferData const&,gm::Range<unsigned long> const&)#1}>,std::shared_ptr<ggl::VertexData> ()(char const*,ggl::BufferData const&,gm::Range<unsigned long> const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E42CBEB8;
}

void std::__function::__func<std::shared_ptr<md::MeshSetStorageClient> md::MeshSetStorage::registerClient<ggl::PolygonBase::CompressedVbo>(void)::{lambda(char const*,ggl::BufferData const&,gm::Range<unsigned long> const&)#1},std::allocator<std::shared_ptr<md::MeshSetStorageClient> md::MeshSetStorage::registerClient<ggl::PolygonBase::CompressedVbo>(void)::{lambda(char const*,ggl::BufferData const&,gm::Range<unsigned long> const&)#1}>,std::shared_ptr<ggl::VertexData> ()(char const*,ggl::BufferData const&,gm::Range<unsigned long> const&)>::operator()(uint64_t *a1@<X1>, uint64_t a2@<X2>, uint64_t *a3@<X3>, _QWORD *a4@<X8>)
{
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  _QWORD v17[2];

  v7 = *a1;
  v8 = operator new(0xF8uLL);
  v9 = v8;
  v8[1] = 0;
  v8[2] = 0;
  *v8 = &off_1E42DFAE0;
  v10 = v8 + 3;
  v11 = *(_QWORD *)(a2 + 24);
  v12 = *(std::__shared_weak_count **)(a2 + 32);
  v17[0] = v11;
  v17[1] = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldxr(p_shared_owners);
    while (__stxr(v14 + 1, p_shared_owners));
  }
  ggl::BufferData::BufferData((uint64_t)(v8 + 3), 8, v17, *a3, a3[1], 1);
  if (v12)
  {
    v15 = (unint64_t *)&v12->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  v9[29] = v7;
  v9[30] = &ggl::PolygonBase::compressedVboReflection;
  v9[3] = &off_1E42B7720;
  v9[28] = &unk_1E42B7740;
  *a4 = v10;
  a4[1] = v9;
}

uint64_t ggl::VertexDataTyped<ggl::PolygonBase::CompressedVbo>::~VertexDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  return a1;
}

void ggl::VertexDataTyped<ggl::PolygonBase::CompressedVbo>::~VertexDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void `non-virtual thunk to'ggl::VertexDataTyped<ggl::PolygonBase::CompressedVbo>::~VertexDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)(a1 - 200) = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 - 72));
  v2 = *(_QWORD *)(a1 - 128);
  if (v2)
  {
    *(_QWORD *)(a1 - 120) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 - 104) + 40))(*(_QWORD *)(a1 - 104), v2, *(_QWORD *)(a1 - 112) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 - 168);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

{
  uint64_t v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  *(_QWORD *)(a1 - 200) = &off_1E42B5748;
  v2 = a1 - 200;
  std::mutex::~mutex((std::mutex *)(a1 - 72));
  v3 = *(_QWORD *)(v2 + 72);
  if (v3)
  {
    *(_QWORD *)(a1 - 120) = v3;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 - 104) + 40))(*(_QWORD *)(a1 - 104), v3, *(_QWORD *)(a1 - 112) - v3);
  }
  v4 = *(std::__shared_weak_count **)(a1 - 168);
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::PolygonBase::CompressedVbo>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DFAE0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::PolygonBase::CompressedVbo>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DFAE0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::PolygonBase::CompressedVbo>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__shared_ptr_emplace<md::MeshSetStorageClient>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DC3C0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<md::MeshSetStorageClient>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DC3C0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__shared_ptr_emplace<md::MeshSetStorageClient>::__on_zero_shared(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *result;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 112);
  result = *(_QWORD **)(a1 + 136);
  if (result == v1)
  {
    v3 = 4;
    result = v1;
  }
  else
  {
    if (!result)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

void _addRange(uint64_t a1, unsigned int a2, _QWORD *a3)
{
  _QWORD *v4;
  _QWORD *v5;
  unint64_t v6;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  __int128 v20;
  _QWORD *v21;
  _QWORD *v22;
  void *v23;
  void *v24;
  char **v25;
  char *v26;
  _QWORD *v27;
  char *v28;
  uint64_t v29;
  _QWORD *v30;
  unint64_t v31;
  _QWORD *v32;
  unint64_t v33;
  __int128 v34;
  _QWORD *v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  char *v40;
  char *v41;
  __int128 v42;

  v5 = *(_QWORD **)a1;
  v4 = *(_QWORD **)(a1 + 8);
  v6 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v4 - *(_QWORD *)a1) >> 3);
  if (v6 <= a2)
  {
    v9 = a2 + 1;
    v10 = v9 - v6;
    v11 = *(_QWORD *)(a1 + 16);
    if (0xAAAAAAAAAAAAAAABLL * ((v11 - (uint64_t)v4) >> 3) >= v9 - v6)
    {
      if (v9 != v6)
      {
        bzero(*(void **)(a1 + 8), 24 * ((24 * v10 - 24) / 0x18) + 24);
        v4 += 3 * ((24 * v10 - 24) / 0x18) + 3;
      }
      *(_QWORD *)(a1 + 8) = v4;
    }
    else
    {
      v12 = 0xAAAAAAAAAAAAAAABLL * ((v11 - (uint64_t)v5) >> 3);
      v13 = 0x5555555555555556 * ((v11 - (uint64_t)v5) >> 3);
      if (v13 > v9)
        v9 = v13;
      if (v12 >= 0x555555555555555)
        v9 = 0xAAAAAAAAAAAAAAALL;
      if (v9 > 0xAAAAAAAAAAAAAAALL)
        goto LABEL_44;
      v14 = 24 * v9;
      v15 = (char *)operator new(24 * v9);
      v16 = &v15[24 * v6];
      v17 = &v15[v14];
      bzero(v16, 24 * ((24 * v10 - 24) / 0x18) + 24);
      v18 = &v16[24 * ((24 * v10 - 24) / 0x18) + 24];
      if (v4 == v5)
      {
        *(_QWORD *)a1 = v16;
        *(_QWORD *)(a1 + 8) = v18;
        *(_QWORD *)(a1 + 16) = v17;
      }
      else
      {
        do
        {
          v19 = v16;
          *((_QWORD *)v16 - 2) = 0;
          *((_QWORD *)v16 - 1) = 0;
          v20 = *(_OWORD *)(v4 - 3);
          v4 -= 3;
          *(_OWORD *)(v16 - 24) = v20;
          v16 -= 24;
          *((_QWORD *)v19 - 1) = v4[2];
          *v4 = 0;
          v4[1] = 0;
          v4[2] = 0;
        }
        while (v4 != v5);
        v4 = *(_QWORD **)a1;
        v21 = *(_QWORD **)(a1 + 8);
        *(_QWORD *)a1 = v16;
        *(_QWORD *)(a1 + 8) = v18;
        *(_QWORD *)(a1 + 16) = v17;
        if (v21 != v4)
        {
          v22 = v21;
          do
          {
            v24 = (void *)*(v22 - 3);
            v22 -= 3;
            v23 = v24;
            if (v24)
            {
              *(v21 - 2) = v23;
              operator delete(v23);
            }
            v21 = v22;
          }
          while (v22 != v4);
        }
      }
      if (v4)
        operator delete(v4);
    }
    v5 = *(_QWORD **)a1;
  }
  v25 = (char **)&v5[3 * a2];
  v27 = v25 + 1;
  v26 = v25[1];
  v28 = *v25;
  v29 = v26 - *v25;
  if (v26 != *v25 && *((_QWORD *)v26 - 2) == *a3 && *((_QWORD *)v26 - 1) == a3[2])
  {
    *((_QWORD *)v26 - 2) = a3[1];
    return;
  }
  v30 = &v5[3 * a2];
  v33 = v30[2];
  v32 = v30 + 2;
  v31 = v33;
  if ((unint64_t)v26 >= v33)
  {
    v36 = v29 / 24;
    v37 = v29 / 24 + 1;
    if (v37 > 0xAAAAAAAAAAAAAAALL)
      abort();
    v38 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v31 - (_QWORD)v28) >> 3);
    if (2 * v38 > v37)
      v37 = 2 * v38;
    if (v38 >= 0x555555555555555)
      v39 = 0xAAAAAAAAAAAAAAALL;
    else
      v39 = v37;
    if (!v39)
    {
      v40 = 0;
      goto LABEL_38;
    }
    if (v39 <= 0xAAAAAAAAAAAAAAALL)
    {
      v40 = (char *)operator new(24 * v39);
LABEL_38:
      v41 = &v40[24 * v36];
      *(_OWORD *)v41 = *(_OWORD *)a3;
      *((_QWORD *)v41 + 2) = a3[2];
      v35 = v41 + 24;
      if (v26 != v28)
      {
        do
        {
          v42 = *(_OWORD *)(v26 - 24);
          *((_QWORD *)v41 - 1) = *((_QWORD *)v26 - 1);
          *(_OWORD *)(v41 - 24) = v42;
          v41 -= 24;
          v26 -= 24;
        }
        while (v26 != v28);
        v26 = *v25;
      }
      *v25 = v41;
      *v27 = v35;
      *v32 = &v40[24 * v39];
      if (v26)
        operator delete(v26);
      goto LABEL_43;
    }
LABEL_44:
    std::__throw_bad_array_new_length[abi:nn180100]();
  }
  v34 = *(_OWORD *)a3;
  *((_QWORD *)v26 + 2) = a3[2];
  *(_OWORD *)v26 = v34;
  v35 = v26 + 24;
LABEL_43:
  *v27 = v35;
}

void _addRangeToList(uint64_t a1, __int16 a2, unsigned int a3, _QWORD *a4)
{
  if ((a2 & 1) != 0)
  {
    _addRange(a1, a3, a4);
    if ((a2 & 2) == 0)
    {
LABEL_3:
      if ((a2 & 4) == 0)
        goto LABEL_4;
      goto LABEL_20;
    }
  }
  else if ((a2 & 2) == 0)
  {
    goto LABEL_3;
  }
  _addRange(a1 + 24, a3, a4);
  if ((a2 & 4) == 0)
  {
LABEL_4:
    if ((a2 & 8) == 0)
      goto LABEL_5;
    goto LABEL_21;
  }
LABEL_20:
  _addRange(a1 + 48, a3, a4);
  if ((a2 & 8) == 0)
  {
LABEL_5:
    if ((a2 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_22;
  }
LABEL_21:
  _addRange(a1 + 72, a3, a4);
  if ((a2 & 0x10) == 0)
  {
LABEL_6:
    if ((a2 & 0x20) == 0)
      goto LABEL_7;
    goto LABEL_23;
  }
LABEL_22:
  _addRange(a1 + 96, a3, a4);
  if ((a2 & 0x20) == 0)
  {
LABEL_7:
    if ((a2 & 0x40) == 0)
      goto LABEL_8;
    goto LABEL_24;
  }
LABEL_23:
  _addRange(a1 + 120, a3, a4);
  if ((a2 & 0x40) == 0)
  {
LABEL_8:
    if ((a2 & 0x80) == 0)
      goto LABEL_9;
    goto LABEL_25;
  }
LABEL_24:
  _addRange(a1 + 144, a3, a4);
  if ((a2 & 0x80) == 0)
  {
LABEL_9:
    if ((a2 & 0x100) == 0)
      goto LABEL_10;
    goto LABEL_26;
  }
LABEL_25:
  _addRange(a1 + 168, a3, a4);
  if ((a2 & 0x100) == 0)
  {
LABEL_10:
    if ((a2 & 0x200) == 0)
      goto LABEL_11;
    goto LABEL_27;
  }
LABEL_26:
  _addRange(a1 + 192, a3, a4);
  if ((a2 & 0x200) == 0)
  {
LABEL_11:
    if ((a2 & 0x400) == 0)
      goto LABEL_12;
    goto LABEL_28;
  }
LABEL_27:
  _addRange(a1 + 216, a3, a4);
  if ((a2 & 0x400) == 0)
  {
LABEL_12:
    if ((a2 & 0x800) == 0)
      goto LABEL_13;
    goto LABEL_29;
  }
LABEL_28:
  _addRange(a1 + 240, a3, a4);
  if ((a2 & 0x800) == 0)
  {
LABEL_13:
    if ((a2 & 0x1000) == 0)
      goto LABEL_14;
    goto LABEL_30;
  }
LABEL_29:
  _addRange(a1 + 264, a3, a4);
  if ((a2 & 0x1000) == 0)
  {
LABEL_14:
    if ((a2 & 0x2000) == 0)
      goto LABEL_15;
    goto LABEL_31;
  }
LABEL_30:
  _addRange(a1 + 288, a3, a4);
  if ((a2 & 0x2000) == 0)
  {
LABEL_15:
    if ((a2 & 0x4000) == 0)
      goto LABEL_16;
    goto LABEL_32;
  }
LABEL_31:
  _addRange(a1 + 312, a3, a4);
  if ((a2 & 0x4000) == 0)
  {
LABEL_16:
    if ((a2 & 0x8000) == 0)
      return;
LABEL_33:
    _addRange(a1 + 360, a3, a4);
    return;
  }
LABEL_32:
  _addRange(a1 + 336, a3, a4);
  if (a2 < 0)
    goto LABEL_33;
}

void md::ARBuildingTileData::~ARBuildingTileData(md::ARBuildingTileData *this)
{
  md::ARBuildingTileData::~ARBuildingTileData(this);
  JUMPOUT(0x1A1AF4E00);
}

{
  void *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  void *v6;

  *(_QWORD *)this = &off_1E4293EE0;
  *((_QWORD *)this + 79) = &unk_1E4293F20;
  md::RegistryManager::removeRegistry(*((md::RegistryManager **)this + 99), this);
  v2 = (void *)*((_QWORD *)this + 102);
  if (v2)
  {
    *((_QWORD *)this + 103) = v2;
    operator delete(v2);
  }
  v3 = (std::__shared_weak_count *)*((_QWORD *)this + 100);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  v6 = (void *)*((_QWORD *)this + 90);
  if (v6)
  {
    *((_QWORD *)this + 91) = v6;
    operator delete(v6);
  }
  md::MapTileData::~MapTileData(this);
}

uint64_t md::ARBuildingTileData::estimatedCost(md::ARBuildingTileData *this)
{
  uint64_t v1;

  v1 = *((_QWORD *)this + 85);
  if (v1)
    v1 = *(_QWORD *)(v1 + 40);
  return *((_QWORD *)this + 101) + v1;
}

void md::ARBuildingTileData::createDebugNode(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  char *ChildNode;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  void **v12;
  void **v13;
  char *v14;
  char *v15;
  char *v16;
  void **v17;
  void **v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char *v24;
  char *v25;
  char *v26;
  __int128 v27;
  __int128 v28;
  char *v29;
  uint64_t v30;
  char *v31;
  __int128 v32;
  char v33[8];
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  char v39[8];
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  __int128 v45[3];

  md::MapTileData::createDebugNode((uint64_t)a1, a2);
  BYTE7(v45[1]) = 18;
  strcpy((char *)v45, "ARBuildingTileData");
  ChildNode = gdc::DebugTreeNode::createChildNode(a2, v45);
  v5 = a1[101];
  BYTE7(v45[1]) = 17;
  strcpy((char *)v45, "VerticesProcessed");
  v42 = 0;
  v43 = 0;
  v44 = 1;
  v41 = 0;
  v40 = v5;
  gdc::DebugTreeNode::addProperty((uint64_t)ChildNode, (uint64_t)v45, (uint64_t)v39);
  v6 = a1[98];
  BYTE7(v45[1]) = 6;
  strcpy((char *)v45, "Bounds");
  v7 = gdc::Registry::storage<arComponents::LocalBounds>(v6);
  v8 = 0xCF3CF3CF3CF3CF3DLL * ((uint64_t)(*(_QWORD *)(v7 + 88) - *(_QWORD *)(v7 + 80)) >> 3);
  v36 = 0;
  v37 = 0;
  v38 = 1;
  v35 = 0;
  v34 = v8;
  gdc::DebugTreeNode::addProperty((uint64_t)ChildNode, (uint64_t)v45, (uint64_t)v33);
  v9 = (char *)a1[103];
  v10 = (char *)a1[102];
  memset(v45, 0, 24);
  v11 = v9 - v10;
  v30 = (uint64_t)ChildNode;
  if (v9 == v10)
  {
    v18 = 0;
    v13 = 0;
  }
  else
  {
    if ((unint64_t)v11 >= 0x1FFFFFFFFFFFFFF9)
      abort();
    v12 = (void **)operator new(8 * v11);
    v13 = v12;
    v14 = (char *)&v12[8 * (v11 >> 3)];
    *(_QWORD *)&v45[0] = v12;
    *(_QWORD *)&v45[1] = v14;
    v15 = (char *)v12;
    do
    {
      *(_QWORD *)v15 = 0;
      *((_QWORD *)v15 + 5) = 0;
      *((_QWORD *)v15 + 6) = 0;
      *((_QWORD *)v15 + 4) = 0;
      *((_DWORD *)v15 + 14) = 0;
      v15 += 64;
    }
    while (v15 != v14);
    *((_QWORD *)&v45[0] + 1) = &v12[8 * (v11 >> 3)];
    v16 = (char *)a1[102];
    if (v16 != v9)
    {
      v18 = (void **)*((_QWORD *)&v45[0] + 1);
      v17 = *(void ***)&v45[0];
      v19 = v14;
      while (1)
      {
        v20 = *(_QWORD *)v16;
        if (v19 >= v14)
          break;
        *((_QWORD *)v19 + 4) = 0;
        *((_QWORD *)v19 + 5) = 0;
        *((_QWORD *)v19 + 6) = 0;
        *((_DWORD *)v19 + 14) = 1;
        *((_QWORD *)v19 + 1) = v20;
LABEL_8:
        v18 = (void **)(v19 + 64);
        *((_QWORD *)&v45[0] + 1) = v19 + 64;
        v16 += 8;
        v19 += 64;
        if (v16 == v9)
          goto LABEL_31;
      }
      v21 = (v19 - (char *)v13) >> 6;
      v22 = v21 + 1;
      if ((unint64_t)(v21 + 1) >> 58)
        abort();
      if ((v14 - (char *)v13) >> 5 > v22)
        v22 = (v14 - (char *)v13) >> 5;
      if ((unint64_t)(v14 - (char *)v13) >= 0x7FFFFFFFFFFFFFC0)
        v23 = 0x3FFFFFFFFFFFFFFLL;
      else
        v23 = v22;
      if (v23 >> 58)
        std::__throw_bad_array_new_length[abi:nn180100]();
      v24 = (char *)operator new(v23 << 6);
      v25 = &v24[64 * v21];
      *((_QWORD *)v25 + 4) = 0;
      *((_QWORD *)v25 + 5) = 0;
      *((_QWORD *)v25 + 6) = 0;
      v14 = &v24[64 * v23];
      *((_DWORD *)v25 + 14) = 1;
      *((_QWORD *)v25 + 1) = v20;
      v26 = v25;
      if (v19 == (char *)v13)
      {
        *(_QWORD *)&v45[0] = v25;
        *(_QWORD *)&v45[1] = v14;
        v26 = v25;
        if (!v13)
          goto LABEL_26;
      }
      else
      {
        do
        {
          v27 = *((_OWORD *)v19 - 4);
          *(_OWORD *)(v26 - 55) = *(_OWORD *)(v19 - 55);
          *((_OWORD *)v26 - 4) = v27;
          v28 = *((_OWORD *)v19 - 2);
          *((_QWORD *)v26 - 2) = *((_QWORD *)v19 - 2);
          *((_OWORD *)v26 - 2) = v28;
          *((_QWORD *)v19 - 3) = 0;
          *((_QWORD *)v19 - 2) = 0;
          *((_QWORD *)v19 - 4) = 0;
          *((_DWORD *)v26 - 2) = *((_DWORD *)v19 - 2);
          v26 -= 64;
          v19 -= 64;
        }
        while (v19 != (char *)v13);
        *(_QWORD *)&v45[0] = v26;
        *(_QWORD *)&v45[1] = v14;
        while (v18 != v17)
        {
          if (*((char *)v18 - 9) < 0)
            operator delete(*(v18 - 4));
          v18 -= 8;
        }
        v13 = v17;
        if (!v17)
          goto LABEL_26;
      }
      operator delete(v13);
LABEL_26:
      v17 = (void **)v26;
      v13 = (void **)v26;
      v19 = v25;
      goto LABEL_8;
    }
    v18 = &v12[8 * (v11 >> 3)];
  }
LABEL_31:
  v29 = (char *)operator new(0x20uLL);
  v31 = v29;
  v32 = xmmword_19FFB3880;
  strcpy(v29, "InteriorAsOutsideBuildingIds");
  gdc::DebugTreeNode::addProperty(v30, (uint64_t)&v31, (uint64_t *)v45);
  operator delete(v29);
  if (v13)
  {
    while (v18 != v13)
    {
      if (*((char *)v18 - 9) < 0)
        operator delete(*(v18 - 4));
      v18 -= 8;
    }
    operator delete(v13);
  }
}

void sub_19F9084C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, gdc::DebugTreeNode *a10)
{
  uint64_t v10;

  std::vector<gdc::DebugTreeValue>::~vector[abi:nn180100]((void **)(v10 - 128));
  gdc::DebugTreeNode::~DebugTreeNode(a10);
  _Unwind_Resume(a1);
}

uint64_t md::ARBuildingTileData::bounds(md::ARBuildingTileData *this)
{
  return (uint64_t)this + 756;
}

void sub_19F9085A8(_Unwind_Exception *a1)
{
  md::MapTileData *v1;
  uint64_t v2;
  void *v4;
  void *v5;

  v4 = (void *)*((_QWORD *)v1 + 102);
  if (v4)
  {
    *((_QWORD *)v1 + 103) = v4;
    operator delete(v4);
  }
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](v2);
  v5 = (void *)*((_QWORD *)v1 + 90);
  if (v5)
  {
    *((_QWORD *)v1 + 91) = v5;
    operator delete(v5);
  }
  md::MapTileData::~MapTileData(v1);
  _Unwind_Resume(a1);
}

_QWORD *gdc::ManagedObjectHolder<md::components::SharedTransformData>::~ManagedObjectHolder(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_1E42B0A28;
  v2 = a1[4];
  if (v2)
    MEMORY[0x1A1AF4E00](v2, 0x1000C40614DFFF0);
  return a1;
}

void gdc::ManagedObjectHolder<md::components::SharedTransformData>::~ManagedObjectHolder(_QWORD *a1)
{
  uint64_t v1;

  *a1 = &off_1E42B0A28;
  v1 = a1[4];
  if (v1)
    MEMORY[0x1A1AF4E00](v1, 0x1000C40614DFFF0);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t gdc::ObjectHolder<md::components::SharedTransformData>::extract@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 32);
  *(_QWORD *)(result + 32) = 0;
  *a2 = v2;
  return result;
}

uint64_t gdc::Registry::storage<arComponents::LocalTransform>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  uint64_t v16;

  v16 = 0x6F871FA174DA9A1FLL;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0x6F871FA174DA9A1FLL;
      if (*(_QWORD *)&v3 <= 0x6F871FA174DA9A1FuLL)
        v5 = 0x6F871FA174DA9A1FuLL % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0x6F871FA174DA9A1FLL;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0x6F871FA174DA9A1FLL)
            {
              if (v7[2] == 0x6F871FA174DA9A1FLL)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0x6F871FA174DA9A1FLL)
          {
            if (v7[2] == 0x6F871FA174DA9A1FLL)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "arComponents::LocalTransform]";
  *(_QWORD *)(v11 + 24) = 28;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E42B1A28;
  *(_QWORD *)(v11 + 8) = 0x6F871FA174DA9A1FLL;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0x6F871FA174DA9A1FuLL, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0x6F871FA174DA9A1FLL;
  v15[1] = "arComponents::LocalTransform]";
  v15[2] = 28;
  gdc::Registry::_registerStorageDataSignals(a1, 0x6F871FA174DA9A1FLL, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F9088A0(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<arComponents::AssetDataReference>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  unint64_t v16;

  v16 = 0x8FAA2839ECDE4573;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0x8FAA2839ECDE4573;
      if (*(_QWORD *)&v3 <= 0x8FAA2839ECDE4573)
        v5 = 0x8FAA2839ECDE4573 % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0x8FAA2839ECDE4573;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0x8FAA2839ECDE4573)
            {
              if (v7[2] == 0x8FAA2839ECDE4573)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0x8FAA2839ECDE4573)
          {
            if (v7[2] == 0x8FAA2839ECDE4573)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "arComponents::AssetDataReference]";
  *(_QWORD *)(v11 + 24) = 32;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E42B1CF8;
  *(_QWORD *)(v11 + 8) = 0x8FAA2839ECDE4573;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0x8FAA2839ECDE4573, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0x8FAA2839ECDE4573;
  v15[1] = "arComponents::AssetDataReference]";
  v15[2] = 32;
  gdc::Registry::_registerStorageDataSignals(a1, 0x8FAA2839ECDE4573, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F908AC8(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void gdc::ComponentStorageWrapper<arComponents::AssetDataReference>::emplace(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  unint64_t v19;
  char *v20;
  uint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  _QWORD *v24;
  char *v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  char *v36;
  uint64_t v37;
  char *v38;
  char *v39;
  char *v40;
  std::__shared_weak_count *v41;
  unint64_t *p_shared_owners;
  unint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;

  v46 = a2;
  v5 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(a1 + 4, (uint64_t)&v46);
  if ((v6 & 1) != 0)
  {
    v20 = (char *)a1[11];
    v19 = a1[12];
    if ((unint64_t)v20 >= v19)
    {
      v25 = (char *)a1[10];
      v26 = 0xCCCCCCCCCCCCCCCDLL * ((v20 - v25) >> 3);
      v27 = v26 + 1;
      if (v26 + 1 > 0x666666666666666)
        goto LABEL_51;
      v28 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v19 - (_QWORD)v25) >> 3);
      if (2 * v28 > v27)
        v27 = 2 * v28;
      if (v28 >= 0x333333333333333)
        v29 = 0x666666666666666;
      else
        v29 = v27;
      if (v29)
      {
        if (v29 > 0x666666666666666)
          std::__throw_bad_array_new_length[abi:nn180100]();
        v30 = (char *)operator new(40 * v29);
      }
      else
      {
        v30 = 0;
      }
      v31 = &v30[8 * ((v20 - v25) >> 3)];
      v32 = *(_QWORD *)(a3 + 8);
      *(_QWORD *)v31 = *(_QWORD *)a3;
      *((_QWORD *)v31 + 1) = v32;
      v33 = *(_QWORD *)(a3 + 16);
      *((_QWORD *)v31 + 2) = v33;
      if (v33)
      {
        v34 = (unint64_t *)(v33 + 8);
        do
          v35 = __ldxr(v34);
        while (__stxr(v35 + 1, v34));
        v25 = (char *)a1[10];
        v20 = (char *)a1[11];
      }
      v36 = &v30[40 * v29];
      *(_OWORD *)&v30[40 * v26 + 24] = *(_OWORD *)(a3 + 24);
      v24 = v31 + 40;
      if (v20 == v25)
      {
        a1[10] = (uint64_t)v31;
        a1[11] = (uint64_t)v24;
        a1[12] = (uint64_t)v36;
      }
      else
      {
        v37 = 0;
        do
        {
          v38 = &v31[v37];
          v39 = &v20[v37];
          *((_QWORD *)v38 - 5) = *(_QWORD *)&v20[v37 - 40];
          *((_OWORD *)v38 - 2) = *(_OWORD *)&v20[v37 - 32];
          *((_QWORD *)v39 - 4) = 0;
          *((_QWORD *)v39 - 3) = 0;
          *((_OWORD *)v38 - 1) = *(_OWORD *)&v20[v37 - 16];
          v37 -= 40;
        }
        while (&v20[v37] != v25);
        v25 = (char *)a1[10];
        v40 = (char *)a1[11];
        a1[10] = (uint64_t)&v31[v37];
        a1[11] = (uint64_t)v24;
        a1[12] = (uint64_t)v36;
        while (v40 != v25)
        {
          v41 = (std::__shared_weak_count *)*((_QWORD *)v40 - 3);
          if (v41)
          {
            p_shared_owners = (unint64_t *)&v41->__shared_owners_;
            do
              v43 = __ldaxr(p_shared_owners);
            while (__stlxr(v43 - 1, p_shared_owners));
            if (!v43)
            {
              ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
              std::__shared_weak_count::__release_weak(v41);
            }
          }
          v40 -= 40;
        }
      }
      if (v25)
        operator delete(v25);
    }
    else
    {
      *(_QWORD *)v20 = *(_QWORD *)a3;
      *((_QWORD *)v20 + 1) = *(_QWORD *)(a3 + 8);
      v21 = *(_QWORD *)(a3 + 16);
      *((_QWORD *)v20 + 2) = v21;
      if (v21)
      {
        v22 = (unint64_t *)(v21 + 8);
        do
          v23 = __ldxr(v22);
        while (__stxr(v23 + 1, v22));
      }
      *(_OWORD *)(v20 + 24) = *(_OWORD *)(a3 + 24);
      v24 = v20 + 40;
    }
    a1[11] = (uint64_t)v24;
    v16 = a1[31];
  }
  else
  {
    v7 = a1[10];
    v8 = ((uint64_t)v5 - a1[7]) >> 3;
    v9 = v7 + 40 * v8;
    *(_QWORD *)v9 = *(_QWORD *)a3;
    v10 = *(_OWORD *)(a3 + 8);
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 16) = 0;
    v11 = *(std::__shared_weak_count **)(v9 + 16);
    *(_OWORD *)(v9 + 8) = v10;
    if (v11)
    {
      v12 = (unint64_t *)&v11->__shared_owners_;
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 - 1, v12));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    v14 = v7 + 40 * v8;
    v15 = *(_QWORD *)(a3 + 24);
    *(_BYTE *)(v14 + 32) = *(_BYTE *)(a3 + 32);
    *(_QWORD *)(v14 + 24) = v15;
    v16 = a1[31];
    if (v9 != a1[11])
    {
      v17 = (_QWORD *)a1[16];
      if (v17)
      {
        while (1)
        {
          v48 = &v46;
          v49 = 1;
          v47 = v16;
          v18 = v17[6];
          if (!v18)
            break;
          (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v18 + 48))(v18, &v47, &v48);
          v17 = (_QWORD *)*v17;
          if (!v17)
            return;
        }
LABEL_50:
        std::__throw_bad_function_call[abi:nn180100]();
LABEL_51:
        abort();
      }
      return;
    }
  }
  v44 = (_QWORD *)a1[22];
  if (v44)
  {
    while (1)
    {
      v48 = &v46;
      v49 = 1;
      v47 = v16;
      v45 = v44[6];
      if (!v45)
        break;
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v45 + 48))(v45, &v47, &v48);
      v44 = (_QWORD *)*v44;
      if (!v44)
        return;
    }
    goto LABEL_50;
  }
}

uint64_t gdc::ComponentStorageWrapper<arComponents::AssetDataReference>::~ComponentStorageWrapper(uint64_t a1)
{
  gdc::ComponentStorageSignals::~ComponentStorageSignals((gdc::ComponentStorageSignals *)(a1 + 104));
  geo::sparse_map<gdc::Entity,arComponents::AssetDataReference>::~sparse_map((_QWORD *)(a1 + 32));
  return a1;
}

void gdc::ComponentStorageWrapper<arComponents::AssetDataReference>::~ComponentStorageWrapper(uint64_t a1)
{
  gdc::ComponentStorageSignals::~ComponentStorageSignals((gdc::ComponentStorageSignals *)(a1 + 104));
  geo::sparse_map<gdc::Entity,arComponents::AssetDataReference>::~sparse_map((_QWORD *)(a1 + 32));
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<arComponents::AssetDataReference>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  uint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *p_shared_owners;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  _QWORD v39[2];

  v37 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  v14 = a1[10];
  v15 = (_QWORD *)(v14 + 40 * v7);
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  v16 = a1[11];
  *v15 = *(_QWORD *)(v16 - 40);
  v17 = v15 + 1;
  v19 = *(_QWORD *)(v16 - 32);
  v18 = *(_QWORD *)(v16 - 24);
  if (v18)
  {
    v20 = (unint64_t *)(v18 + 8);
    do
      v21 = __ldxr(v20);
    while (__stxr(v21 + 1, v20));
  }
  *v17 = v19;
  v22 = v14 + 40 * v7;
  v23 = *(std::__shared_weak_count **)(v22 + 16);
  *(_QWORD *)(v22 + 16) = v18;
  if (v23)
  {
    p_shared_owners = (unint64_t *)&v23->__shared_owners_;
    do
      v25 = __ldaxr(p_shared_owners);
    while (__stlxr(v25 - 1, p_shared_owners));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  v26 = v14 + 40 * v7;
  v27 = *(_QWORD *)(v16 - 16);
  *(_BYTE *)(v26 + 32) = *(_BYTE *)(v16 - 8);
  *(_QWORD *)(v26 + 24) = v27;
  v28 = a1[11];
  v29 = *(std::__shared_weak_count **)(v28 - 24);
  if (v29)
  {
    v30 = (unint64_t *)&v29->__shared_owners_;
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
  a1[11] = v28 - 40;
  v32 = (_QWORD *)a1[28];
  if (!v32)
    return 1;
  v33 = a1[31];
  while (1)
  {
    v39[0] = &v37;
    v39[1] = 1;
    v38 = v33;
    v34 = v32[6];
    if (!v34)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v34 + 48))(v34, &v38, v39);
    v32 = (_QWORD *)*v32;
    if (!v32)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<arComponents::AssetDataReference>::contains(v35, v36);
}

BOOL gdc::ComponentStorageWrapper<arComponents::AssetDataReference>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

_QWORD *geo::sparse_map<gdc::Entity,arComponents::AssetDataReference>::~sparse_map(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  void *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;

  v2 = a1[6];
  if (v2)
  {
    v3 = a1[7];
    v4 = (void *)a1[6];
    if (v3 != v2)
    {
      do
      {
        v5 = *(std::__shared_weak_count **)(v3 - 24);
        if (v5)
        {
          p_shared_owners = (unint64_t *)&v5->__shared_owners_;
          do
            v7 = __ldaxr(p_shared_owners);
          while (__stlxr(v7 - 1, p_shared_owners));
          if (!v7)
          {
            ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
            std::__shared_weak_count::__release_weak(v5);
          }
        }
        v3 -= 40;
      }
      while (v3 != v2);
      v4 = (void *)a1[6];
    }
    a1[7] = v2;
    operator delete(v4);
  }
  v8 = (void *)a1[3];
  if (v8)
  {
    a1[4] = v8;
    operator delete(v8);
  }
  v9 = (_QWORD *)*a1;
  if (*a1)
  {
    v10 = (_QWORD *)a1[1];
    v11 = (_QWORD *)*a1;
    if (v10 != v9)
    {
      do
      {
        v13 = *--v10;
        v12 = v13;
        *v10 = 0;
        if (v13)
          MEMORY[0x1A1AF4E00](v12, 0x1000C40104B78CFLL);
      }
      while (v10 != v9);
      v11 = (_QWORD *)*a1;
    }
    a1[1] = v9;
    operator delete(v11);
  }
  return a1;
}

void gdc::ComponentStorageWrapper<arComponents::LocalTransform>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<arComponents::LocalTransform>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _DWORD *v14;
  _DWORD *v15;
  int v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  _QWORD v24[2];

  v22 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (*(_DWORD *)(v11 + 4) != (_DWORD)v10 || v11 == v8)
    return 0;
  v14 = (_DWORD *)(a1[10] + 48 * v7);
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  v15 = (_DWORD *)a1[11];
  v16 = *(v15 - 12);
  v15 -= 12;
  *v14 = v16;
  v14[1] = v15[1];
  v14[2] = v15[2];
  v14[3] = v15[3];
  v14[4] = v15[4];
  v14[5] = v15[5];
  v14[6] = v15[6];
  v14[7] = v15[7];
  v14[8] = v15[8];
  v14[9] = v15[9];
  v14[10] = v15[10];
  v14[11] = v15[11];
  a1[11] = v15;
  v17 = (_QWORD *)a1[28];
  if (!v17)
    return 1;
  v18 = a1[31];
  while (1)
  {
    v24[0] = &v22;
    v24[1] = 1;
    v23 = v18;
    v19 = v17[6];
    if (!v19)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v19 + 48))(v19, &v23, v24);
    v17 = (_QWORD *)*v17;
    if (!v17)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<arComponents::LocalTransform>::contains(v20, v21);
}

BOOL gdc::ComponentStorageWrapper<arComponents::LocalTransform>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

arComponents::LocalBounds *arComponents::LocalBounds::LocalBounds(arComponents::LocalBounds *this, const arComponents::LocalBounds *a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  _BYTE *v9;
  _BYTE *v10;
  int64_t v11;
  char *v12;
  size_t v13;

  v4 = *(_OWORD *)a2;
  v5 = *((_OWORD *)a2 + 2);
  *((_OWORD *)this + 1) = *((_OWORD *)a2 + 1);
  *((_OWORD *)this + 2) = v5;
  *(_OWORD *)this = v4;
  v6 = *((_OWORD *)a2 + 3);
  v7 = *((_OWORD *)a2 + 4);
  v8 = *((_OWORD *)a2 + 5);
  *((_QWORD *)this + 12) = *((_QWORD *)a2 + 12);
  *((_OWORD *)this + 4) = v7;
  *((_OWORD *)this + 5) = v8;
  *((_OWORD *)this + 3) = v6;
  *((_BYTE *)this + 104) = 0;
  *((_BYTE *)this + 128) = 0;
  if (*((_BYTE *)a2 + 128))
  {
    *((_QWORD *)this + 13) = 0;
    *((_QWORD *)this + 14) = 0;
    *((_QWORD *)this + 15) = 0;
    v10 = (_BYTE *)*((_QWORD *)a2 + 13);
    v9 = (_BYTE *)*((_QWORD *)a2 + 14);
    v11 = v9 - v10;
    if (v9 != v10)
    {
      if (0xAAAAAAAAAAAAAAABLL * (v11 >> 3) >= 0xAAAAAAAAAAAAAABLL)
        abort();
      v12 = (char *)operator new(v11);
      *((_QWORD *)this + 13) = v12;
      *((_QWORD *)this + 14) = v12;
      *((_QWORD *)this + 15) = &v12[8 * (v11 >> 3)];
      v13 = 24 * ((v11 - 24) / 0x18uLL) + 24;
      memcpy(v12, v10, v13);
      *((_QWORD *)this + 14) = &v12[v13];
    }
    *((_BYTE *)this + 128) = 1;
  }
  *((_BYTE *)this + 136) = 0;
  *((_BYTE *)this + 160) = 0;
  if (*((_BYTE *)a2 + 160))
  {
    *((_QWORD *)this + 17) = 0;
    *((_QWORD *)this + 18) = 0;
    *((_QWORD *)this + 19) = 0;
    if (this != a2)
      std::vector<gm::Matrix<double,2,1>>::__assign_with_size[abi:nn180100]<gm::Matrix<double,2,1>*,gm::Matrix<double,2,1>*>((uint64_t)this + 136, *((_QWORD *)a2 + 17), *((char **)a2 + 18), (uint64_t)(*((_QWORD *)a2 + 18) - *((_QWORD *)a2 + 17)) >> 4);
    *((_BYTE *)this + 160) = 1;
  }
  return this;
}

void sub_19F9094A0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void **v3;
  void *v5;
  void *v6;
  void *v7;

  v5 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 144) = v5;
    operator delete(v5);
  }
  if (*(_BYTE *)(v1 + 160))
  {
    v6 = *v2;
    if (*v2)
    {
      *(_QWORD *)(v1 + 144) = v6;
      operator delete(v6);
    }
  }
  if (*(_BYTE *)(v1 + 128))
  {
    v7 = *v3;
    if (*v3)
    {
      *(_QWORD *)(v1 + 112) = v7;
      operator delete(v7);
    }
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<arComponents::LocalBounds>::__emplace_back_slow_path<arComponents::LocalBounds&>(arComponents::LocalBounds **a1, const arComponents::LocalBounds *a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v6;
  char *v7;
  arComponents::LocalBounds *v8;
  arComponents::LocalBounds *v9;
  arComponents::LocalBounds *v10;
  uint64_t v11;
  char *v12;
  char *v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  _QWORD *v19;
  char *v20;
  arComponents::LocalBounds *v21;
  void *v22;
  void *v23;
  arComponents::LocalBounds *v25;
  arComponents::LocalBounds *v26;

  v2 = 0xCF3CF3CF3CF3CF3DLL * ((a1[1] - *a1) >> 3);
  v3 = v2 + 1;
  if (v2 + 1 > 0x186186186186186)
    abort();
  if (0x9E79E79E79E79E7ALL * ((a1[2] - *a1) >> 3) > v3)
    v3 = 0x9E79E79E79E79E7ALL * ((a1[2] - *a1) >> 3);
  if (0xCF3CF3CF3CF3CF3DLL * ((a1[2] - *a1) >> 3) >= 0xC30C30C30C30C3)
    v6 = 0x186186186186186;
  else
    v6 = v3;
  if (v6)
  {
    if (v6 > 0x186186186186186)
      std::__throw_bad_array_new_length[abi:nn180100]();
    v7 = (char *)operator new(168 * v6);
  }
  else
  {
    v7 = 0;
  }
  v25 = (arComponents::LocalBounds *)&v7[168 * v2];
  v26 = (arComponents::LocalBounds *)&v7[168 * v6];
  arComponents::LocalBounds::LocalBounds(v25, a2);
  v8 = (arComponents::LocalBounds *)((char *)v25 + 168);
  v9 = *a1;
  v10 = a1[1];
  if (v10 == *a1)
  {
    *a1 = v25;
    a1[1] = v8;
    a1[2] = v26;
  }
  else
  {
    v11 = 0;
    do
    {
      v12 = (char *)v25 + v11;
      v13 = (char *)v10 + v11;
      v14 = *(_OWORD *)((char *)v10 + v11 - 168);
      v15 = *(_OWORD *)((char *)v10 + v11 - 152);
      *(_OWORD *)(v12 - 136) = *(_OWORD *)((char *)v10 + v11 - 136);
      *(_OWORD *)(v12 - 152) = v15;
      *(_OWORD *)(v12 - 168) = v14;
      v16 = *(_OWORD *)((char *)v10 + v11 - 120);
      v17 = *(_OWORD *)((char *)v10 + v11 - 104);
      v18 = *(_OWORD *)((char *)v10 + v11 - 88);
      *((_QWORD *)v12 - 9) = *(_QWORD *)((char *)v10 + v11 - 72);
      *(_OWORD *)(v12 - 88) = v18;
      *(_OWORD *)(v12 - 104) = v17;
      *(_OWORD *)(v12 - 120) = v16;
      *((_BYTE *)v25 + v11 - 64) = 0;
      v19 = (_QWORD *)((char *)v25 + v11 - 64);
      *(v12 - 40) = 0;
      if (*((_BYTE *)v10 + v11 - 40))
      {
        *v19 = 0;
        *(_QWORD *)((char *)v25 + v11 - 56) = 0;
        *(_QWORD *)((char *)v25 + v11 - 48) = 0;
        *(_OWORD *)v19 = *((_OWORD *)v13 - 4);
        *((_QWORD *)v12 - 6) = *((_QWORD *)v13 - 6);
        *((_QWORD *)v13 - 8) = 0;
        *((_QWORD *)v13 - 7) = 0;
        *((_QWORD *)v13 - 6) = 0;
        *(v12 - 40) = 1;
      }
      *(v12 - 32) = 0;
      *(v12 - 8) = 0;
      if (*(v13 - 8))
      {
        v20 = (char *)v10 + v11;
        *((_QWORD *)v12 - 4) = 0;
        *((_QWORD *)v12 - 3) = 0;
        *((_QWORD *)v12 - 2) = 0;
        *((_OWORD *)v12 - 2) = *(_OWORD *)((char *)v10 + v11 - 32);
        *(_QWORD *)((char *)v25 + v11 - 16) = *(_QWORD *)((char *)v10 + v11 - 16);
        *((_QWORD *)v20 - 4) = 0;
        *((_QWORD *)v20 - 3) = 0;
        *((_QWORD *)v20 - 2) = 0;
        *(v12 - 8) = 1;
      }
      v11 -= 168;
    }
    while ((arComponents::LocalBounds *)((char *)v10 + v11) != v9);
    v10 = *a1;
    v21 = a1[1];
    *a1 = (arComponents::LocalBounds *)((char *)v25 + v11);
    a1[1] = v8;
    a1[2] = v26;
    while (v21 != v10)
    {
      if (*((_BYTE *)v21 - 8))
      {
        v22 = (void *)*((_QWORD *)v21 - 4);
        if (v22)
        {
          *((_QWORD *)v21 - 3) = v22;
          operator delete(v22);
        }
      }
      if (*((_BYTE *)v21 - 40))
      {
        v23 = (void *)*((_QWORD *)v21 - 8);
        if (v23)
        {
          *((_QWORD *)v21 - 7) = v23;
          operator delete(v23);
        }
      }
      v21 = (arComponents::LocalBounds *)((char *)v21 - 168);
    }
  }
  if (v10)
    operator delete(v10);
  return (char *)v25 + 168;
}

void sub_19F909744(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<arComponents::LocalBounds>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::__split_buffer<arComponents::LocalBounds>::~__split_buffer(uint64_t a1)
{
  uint64_t v2;
  uint64_t i;
  void *v4;
  void *v5;

  v2 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v2; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 168;
    if (*(_BYTE *)(i - 8))
    {
      v4 = *(void **)(i - 32);
      if (v4)
      {
        *(_QWORD *)(i - 24) = v4;
        operator delete(v4);
      }
    }
    if (*(_BYTE *)(i - 40))
    {
      v5 = *(void **)(i - 64);
      if (v5)
      {
        *(_QWORD *)(i - 56) = v5;
        operator delete(v5);
      }
    }
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void md::SelectedPolygonTileResourceFetcher::~SelectedPolygonTileResourceFetcher(id *this)
{
  md::TiledGEOResourceFetcher::~TiledGEOResourceFetcher(this);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t md::SelectedPolygonTileResourceFetcher::tileKey()
{
  return GEOPolygonSelectionTileKeyMake();
}

void altitude::ObjectTreeLoader::~ObjectTreeLoader(altitude::ObjectTreeLoader *this)
{
  void **v2;

  *(_QWORD *)this = off_1E42C4AF8;
  *((_QWORD *)this + 5) = &unk_1E42C4B30;
  std::__tree<std::__value_type<altitude::ObjectTreeModelKey,std::set<altitude::Renderable *>>,std::__map_value_compare<altitude::ObjectTreeModelKey,std::__value_type<altitude::ObjectTreeModelKey,std::set<altitude::Renderable *>>,std::less<altitude::ObjectTreeModelKey>,true>,std::allocator<std::__value_type<altitude::ObjectTreeModelKey,std::set<altitude::Renderable *>>>>::destroy(*((_QWORD **)this + 25));
  v2 = (void **)((char *)this + 168);
  std::vector<altitude::ObjectTreeModel>::__destroy_vector::operator()[abi:nn180100](&v2);
  std::mutex::~mutex((std::mutex *)((char *)this + 104));
  std::__tree<std::__value_type<int,karo::media::C3mmObjectTree>,std::__map_value_compare<int,std::__value_type<int,karo::media::C3mmObjectTree>,std::less<int>,true>,std::allocator<std::__value_type<int,karo::media::C3mmObjectTree>>>::destroy(*((_QWORD **)this + 11));
  *(_QWORD *)this = off_1E42C34D0;
  if (*((char *)this + 31) < 0)
    operator delete(*((void **)this + 1));
}

{
  void **v2;

  *(_QWORD *)this = off_1E42C4AF8;
  *((_QWORD *)this + 5) = &unk_1E42C4B30;
  std::__tree<std::__value_type<altitude::ObjectTreeModelKey,std::set<altitude::Renderable *>>,std::__map_value_compare<altitude::ObjectTreeModelKey,std::__value_type<altitude::ObjectTreeModelKey,std::set<altitude::Renderable *>>,std::less<altitude::ObjectTreeModelKey>,true>,std::allocator<std::__value_type<altitude::ObjectTreeModelKey,std::set<altitude::Renderable *>>>>::destroy(*((_QWORD **)this + 25));
  v2 = (void **)((char *)this + 168);
  std::vector<altitude::ObjectTreeModel>::__destroy_vector::operator()[abi:nn180100](&v2);
  std::mutex::~mutex((std::mutex *)((char *)this + 104));
  std::__tree<std::__value_type<int,karo::media::C3mmObjectTree>,std::__map_value_compare<int,std::__value_type<int,karo::media::C3mmObjectTree>,std::less<int>,true>,std::allocator<std::__value_type<int,karo::media::C3mmObjectTree>>>::destroy(*((_QWORD **)this + 11));
  *(_QWORD *)this = off_1E42C34D0;
  if (*((char *)this + 31) < 0)
    operator delete(*((void **)this + 1));
  JUMPOUT(0x1A1AF4E00);
}

void altitude::ObjectTreeLoader::onTileComponentDataLoaded(altitude::ObjectTreeLoader *this, altitude::Tile *a2, altitude::TileComponent *a3, void *a4)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t **v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  char *v15;
  char *v16;
  char *v17;
  unint64_t *v18;
  unint64_t *v19;
  uint64_t *v20;
  uint64_t v21;
  unint64_t v22;
  NSObject *v23;
  char *v24;
  char *v25;
  char *v26;
  char v27;
  uint64_t *v28;
  uint64_t **v29;
  char *v30;
  char *v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t *v34;
  uint64_t **v35;
  uint64_t **v36;
  unsigned int v37;
  unsigned int v38;
  unsigned int v39;
  BOOL v40;
  unint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  unint64_t *v45;
  unint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  std::__shared_weak_count *v49;
  _QWORD *v50;
  unint64_t *v51;
  BOOL v52;
  uint8_t buf[4];
  unsigned int v54;
  __int16 v55;
  unsigned int v56;
  __int16 v57;
  unsigned int v58;
  __int16 v59;
  unint64_t v60;
  uint64_t v61;

  v61 = *MEMORY[0x1E0C80C00];
  if (!*((_DWORD *)a3 + 2))
  {
    v4 = *((_QWORD *)a3 + 15);
    if (v4)
    {
      v48 = *(_QWORD *)(v4 + 128);
      if (v48)
      {
        v5 = *(_QWORD **)v48;
        v47 = *(_QWORD **)(v48 + 8);
        if (*(_QWORD **)v48 != v47)
        {
          v7 = (uint64_t **)((char *)this + 200);
          do
          {
            v8 = *v5;
            v9 = (std::__shared_weak_count *)v5[1];
            if (v9)
            {
              p_shared_owners = (unint64_t *)&v9->__shared_owners_;
              do
                v11 = __ldxr(p_shared_owners);
              while (__stxr(v11 + 1, p_shared_owners));
            }
            v13 = *(_DWORD *)(v48 + 112);
            v12 = *(_DWORD *)(v48 + 116);
            v14 = *(_DWORD *)(v8 + 56);
            v15 = (char *)*((_QWORD *)this + 21);
            v16 = (char *)*((_QWORD *)this + 22);
            v17 = v15;
            if (v15 != v16)
            {
              while (*(_DWORD *)v17 != v13 || *((_DWORD *)v17 + 1) != v12 || *((_DWORD *)v17 + 2) != v14)
              {
                v17 += 48;
                if (v17 == v16)
                {
                  v17 = (char *)*((_QWORD *)this + 22);
                  break;
                }
              }
            }
            v49 = v9;
            v50 = v5;
            v52 = v17 == v16 || *(_DWORD *)&v15[16 * ((v17 - v15) >> 4) + 40] == -1;
            v19 = *(unint64_t **)(v8 + 32);
            v18 = *(unint64_t **)(v8 + 40);
            v51 = v18;
            while (v19 != v18)
            {
              v22 = *v19;
              if (GEOGetVectorKitVKDefaultLog_onceToken != -1)
                dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_4_11772);
              v23 = GEOGetVectorKitVKDefaultLog_log;
              if (os_log_type_enabled((os_log_t)GEOGetVectorKitVKDefaultLog_log, OS_LOG_TYPE_DEBUG))
              {
                *(_DWORD *)buf = 67109888;
                v54 = v13;
                v55 = 1024;
                v56 = v12;
                v57 = 1024;
                v58 = v14;
                v59 = 2048;
                v60 = v22;
                _os_log_impl(&dword_19F029000, v23, OS_LOG_TYPE_DEBUG, "Register Model Placeholder [%u, %u, %u]->%p", buf, 0x1Eu);
              }
              v24 = (char *)*((_QWORD *)this + 21);
              v25 = (char *)*((_QWORD *)this + 22);
              v26 = v24;
              if (v24 != v25)
              {
                while (*(_DWORD *)v26 != v13 || *((_DWORD *)v26 + 1) != v12 || *((_DWORD *)v26 + 2) != v14)
                {
                  v26 += 48;
                  if (v26 == v25)
                    goto LABEL_43;
                }
              }
              if (v26 == v25 || *(_DWORD *)&v24[16 * ((v26 - v24) >> 4) + 40] == -1)
LABEL_43:
                v27 = 1;
              else
                v27 = 0;
              *(_BYTE *)(v22 + 180) = v27;
              v28 = *v7;
              v29 = v7;
              v30 = (char *)v7;
              if (*v7)
              {
                while (1)
                {
                  while (1)
                  {
                    v30 = (char *)v28;
                    v37 = *((_DWORD *)v28 + 8);
                    if (v13 >= v37)
                    {
                      v38 = *((_DWORD *)v30 + 9);
                      if (v12 >= v38)
                      {
                        v39 = *((_DWORD *)v30 + 10);
                        if (v14 >= v39)
                          break;
                      }
                    }
                    v28 = *(uint64_t **)v30;
                    v29 = (uint64_t **)v30;
                    if (!*(_QWORD *)v30)
                      goto LABEL_45;
                  }
                  v40 = v37 >= v13 && v38 >= v12;
                  if (v40 && v39 >= v14)
                    break;
                  v28 = (uint64_t *)*((_QWORD *)v30 + 1);
                  if (!v28)
                  {
                    v29 = (uint64_t **)(v30 + 8);
                    goto LABEL_45;
                  }
                }
              }
              else
              {
LABEL_45:
                v31 = v30;
                v30 = (char *)operator new(0x48uLL);
                *((_DWORD *)v30 + 8) = v13;
                *((_DWORD *)v30 + 9) = v12;
                *((_DWORD *)v30 + 10) = v14;
                *((_QWORD *)v30 + 8) = 0;
                *((_QWORD *)v30 + 7) = 0;
                *((_QWORD *)v30 + 6) = v30 + 56;
                *(_QWORD *)v30 = 0;
                *((_QWORD *)v30 + 1) = 0;
                *((_QWORD *)v30 + 2) = v31;
                *v29 = (uint64_t *)v30;
                v32 = **((_QWORD **)this + 24);
                v33 = (uint64_t *)v30;
                if (v32)
                {
                  *((_QWORD *)this + 24) = v32;
                  v33 = *v29;
                }
                std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*((uint64_t **)this + 25), v33);
                ++*((_QWORD *)this + 26);
              }
              v35 = (uint64_t **)(v30 + 56);
              v34 = (uint64_t *)*((_QWORD *)v30 + 7);
              if (v34)
              {
                while (1)
                {
                  while (1)
                  {
                    v36 = (uint64_t **)v34;
                    v42 = v34[4];
                    if (v42 <= v22)
                      break;
                    v34 = *v36;
                    v35 = v36;
                    if (!*v36)
                      goto LABEL_68;
                  }
                  if (v42 >= v22)
                    break;
                  v34 = v36[1];
                  if (!v34)
                  {
                    v35 = v36 + 1;
                    goto LABEL_68;
                  }
                }
              }
              else
              {
                v36 = (uint64_t **)(v30 + 56);
LABEL_68:
                v43 = (uint64_t *)operator new(0x28uLL);
                v43[4] = v22;
                *v43 = 0;
                v43[1] = 0;
                v43[2] = (uint64_t)v36;
                *v35 = v43;
                v44 = **((_QWORD **)v30 + 6);
                if (v44)
                {
                  *((_QWORD *)v30 + 6) = v44;
                  v20 = *v35;
                }
                else
                {
                  v20 = v43;
                }
                std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*((uint64_t **)v30 + 7), v20);
                ++*((_QWORD *)v30 + 8);
              }
              v21 = *v19++;
              *(_BYTE *)(v21 + 180) = v52;
              v18 = v51;
            }
            if (v49)
            {
              v45 = (unint64_t *)&v49->__shared_owners_;
              do
                v46 = __ldaxr(v45);
              while (__stlxr(v46 - 1, v45));
              if (!v46)
              {
                ((void (*)(std::__shared_weak_count *, altitude::Tile *))v49->__on_zero_shared)(v49, a2);
                std::__shared_weak_count::__release_weak(v49);
              }
            }
            v5 = v50 + 2;
          }
          while (v50 + 2 != v47);
        }
      }
    }
  }
}

void altitude::ObjectTreeLoader::onTileComponentDataRelease(altitude::ObjectTreeLoader *this, altitude::Tile *a2, altitude::TileComponent *a3, void *a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v9;
  std::__shared_weak_count *v10;
  uint64_t v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  int v14;
  unint64_t *v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  int v21;

  if (!*((_DWORD *)a3 + 2))
  {
    v4 = *((_QWORD *)a3 + 15);
    if (v4)
    {
      v5 = *(_QWORD *)(v4 + 128);
      if (v5)
      {
        v6 = *(uint64_t **)v5;
        v7 = *(uint64_t **)(v5 + 8);
        if (*(uint64_t **)v5 != v7)
        {
          do
          {
            v9 = *v6;
            v10 = (std::__shared_weak_count *)v6[1];
            v11 = *v6;
            if (v10)
            {
              p_shared_owners = (unint64_t *)&v10->__shared_owners_;
              do
                v13 = __ldxr(p_shared_owners);
              while (__stxr(v13 + 1, p_shared_owners));
              v11 = *v6;
            }
            v14 = *(_DWORD *)(v9 + 56);
            v20 = *(_QWORD *)(v5 + 112);
            v21 = v14;
            v15 = *(unint64_t **)(v11 + 32);
            v16 = *(unint64_t **)(v11 + 40);
            while (v15 != v16)
            {
              v17 = *v15++;
              altitude::ObjectTreeLoader::unRegisterModelPlaceholder(this, (unsigned int *)&v20, v17);
            }
            if (v10)
            {
              v18 = (unint64_t *)&v10->__shared_owners_;
              do
                v19 = __ldaxr(v18);
              while (__stlxr(v19 - 1, v18));
              if (!v19)
              {
                ((void (*)(std::__shared_weak_count *, altitude::Tile *))v10->__on_zero_shared)(v10, a2);
                std::__shared_weak_count::__release_weak(v10);
              }
            }
            v6 += 2;
          }
          while (v6 != v7);
        }
      }
    }
  }
}

void `non-virtual thunk to'altitude::ObjectTreeLoader::~ObjectTreeLoader(std::mutex *this)
{
  std::mutex *v2;

  *(_QWORD *)&this[-1].__m_.__opaque[16] = off_1E42C4AF8;
  this->__m_.__sig = (uint64_t)&unk_1E42C4B30;
  std::__tree<std::__value_type<altitude::ObjectTreeModelKey,std::set<altitude::Renderable *>>,std::__map_value_compare<altitude::ObjectTreeModelKey,std::__value_type<altitude::ObjectTreeModelKey,std::set<altitude::Renderable *>>,std::less<altitude::ObjectTreeModelKey>,true>,std::allocator<std::__value_type<altitude::ObjectTreeModelKey,std::set<altitude::Renderable *>>>>::destroy(*(_QWORD **)&this[2].__m_.__opaque[24]);
  v2 = this + 2;
  std::vector<altitude::ObjectTreeModel>::__destroy_vector::operator()[abi:nn180100]((void ***)&v2);
  std::mutex::~mutex(this + 1);
  std::__tree<std::__value_type<int,karo::media::C3mmObjectTree>,std::__map_value_compare<int,std::__value_type<int,karo::media::C3mmObjectTree>,std::less<int>,true>,std::allocator<std::__value_type<int,karo::media::C3mmObjectTree>>>::destroy(*(_QWORD **)&this->__m_.__opaque[40]);
  *(_QWORD *)&this[-1].__m_.__opaque[16] = off_1E42C34D0;
  if (this[-1].__m_.__opaque[47] < 0)
    operator delete(*(void **)&this[-1].__m_.__opaque[24]);
}

{
  char *v2;
  std::mutex *v3;

  *(_QWORD *)&this[-1].__m_.__opaque[16] = off_1E42C4AF8;
  v2 = &this[-1].__m_.__opaque[16];
  this->__m_.__sig = (uint64_t)&unk_1E42C4B30;
  std::__tree<std::__value_type<altitude::ObjectTreeModelKey,std::set<altitude::Renderable *>>,std::__map_value_compare<altitude::ObjectTreeModelKey,std::__value_type<altitude::ObjectTreeModelKey,std::set<altitude::Renderable *>>,std::less<altitude::ObjectTreeModelKey>,true>,std::allocator<std::__value_type<altitude::ObjectTreeModelKey,std::set<altitude::Renderable *>>>>::destroy(*(_QWORD **)&this[2].__m_.__opaque[24]);
  v3 = this + 2;
  std::vector<altitude::ObjectTreeModel>::__destroy_vector::operator()[abi:nn180100]((void ***)&v3);
  std::mutex::~mutex(this + 1);
  std::__tree<std::__value_type<int,karo::media::C3mmObjectTree>,std::__map_value_compare<int,std::__value_type<int,karo::media::C3mmObjectTree>,std::less<int>,true>,std::allocator<std::__value_type<int,karo::media::C3mmObjectTree>>>::destroy(*(_QWORD **)&this->__m_.__opaque[40]);
  *(_QWORD *)v2 = off_1E42C34D0;
  if (this[-1].__m_.__opaque[47] < 0)
    operator delete(*(void **)&this[-1].__m_.__opaque[24]);
  JUMPOUT(0x1A1AF4E00);
}

void `non-virtual thunk to'altitude::ObjectTreeLoader::onTileComponentDataLoaded(altitude::ObjectTreeLoader *this, altitude::Tile *a2, altitude::TileComponent *a3, void *a4)
{
  altitude::ObjectTreeLoader::onTileComponentDataLoaded((altitude::ObjectTreeLoader *)((char *)this - 40), a2, a3, a4);
}

void `non-virtual thunk to'altitude::ObjectTreeLoader::onTileComponentDataRelease(altitude::ObjectTreeLoader *this, altitude::Tile *a2, altitude::TileComponent *a3, void *a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t *v7;
  _QWORD *v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  uint64_t v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  int v14;
  unint64_t *v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  int v21;

  if (!*((_DWORD *)a3 + 2))
  {
    v4 = *((_QWORD *)a3 + 15);
    if (v4)
    {
      v5 = *(_QWORD *)(v4 + 128);
      if (v5)
      {
        v6 = *(uint64_t **)v5;
        v7 = *(uint64_t **)(v5 + 8);
        if (*(uint64_t **)v5 != v7)
        {
          v8 = (_QWORD *)((char *)this - 40);
          do
          {
            v9 = *v6;
            v10 = (std::__shared_weak_count *)v6[1];
            v11 = *v6;
            if (v10)
            {
              p_shared_owners = (unint64_t *)&v10->__shared_owners_;
              do
                v13 = __ldxr(p_shared_owners);
              while (__stxr(v13 + 1, p_shared_owners));
              v11 = *v6;
            }
            v14 = *(_DWORD *)(v9 + 56);
            v20 = *(_QWORD *)(v5 + 112);
            v21 = v14;
            v15 = *(unint64_t **)(v11 + 32);
            v16 = *(unint64_t **)(v11 + 40);
            while (v15 != v16)
            {
              v17 = *v15++;
              altitude::ObjectTreeLoader::unRegisterModelPlaceholder(v8, (unsigned int *)&v20, v17);
            }
            if (v10)
            {
              v18 = (unint64_t *)&v10->__shared_owners_;
              do
                v19 = __ldaxr(v18);
              while (__stlxr(v19 - 1, v18));
              if (!v19)
              {
                ((void (*)(std::__shared_weak_count *, altitude::Tile *))v10->__on_zero_shared)(v10, a2);
                std::__shared_weak_count::__release_weak(v10);
              }
            }
            v6 += 2;
          }
          while (v6 != v7);
        }
      }
    }
  }
}

void altitude::ObjectTreeLoader::unRegisterModelPlaceholder(_QWORD *a1, unsigned int *a2, unint64_t a3)
{
  NSObject *v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t *v10;
  unsigned int v11;
  unsigned int v12;
  _QWORD *v13;
  unsigned int v14;
  uint64_t *v15;
  uint64_t *v16;
  _QWORD *v17;
  unint64_t v18;
  BOOL v19;
  _QWORD *v20;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t *v23;
  BOOL v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t *v28;
  _DWORD v29[2];
  __int16 v30;
  unsigned int v31;
  __int16 v32;
  unsigned int v33;
  __int16 v34;
  unint64_t v35;
  uint64_t v36;

  v36 = *MEMORY[0x1E0C80C00];
  if (GEOGetVectorKitVKDefaultLog_onceToken != -1)
    dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_4_11772);
  v6 = GEOGetVectorKitVKDefaultLog_log;
  if (os_log_type_enabled((os_log_t)GEOGetVectorKitVKDefaultLog_log, OS_LOG_TYPE_DEBUG))
  {
    v7 = *a2;
    v8 = a2[1];
    v9 = a2[2];
    v29[0] = 67109888;
    v29[1] = v7;
    v30 = 1024;
    v31 = v8;
    v32 = 1024;
    v33 = v9;
    v34 = 2048;
    v35 = a3;
    _os_log_impl(&dword_19F029000, v6, OS_LOG_TYPE_DEBUG, "Unregister Model Placeholder [%u, %u, %u]->%p", (uint8_t *)v29, 0x1Eu);
  }
  v10 = (uint64_t *)a1[25];
  if (v10)
  {
    v12 = *a2;
    v11 = a2[1];
    v13 = a1 + 25;
    v14 = a2[2];
    do
    {
      while (*((_DWORD *)v10 + 8) < v12 || *((_DWORD *)v10 + 9) < v11 || *((_DWORD *)v10 + 10) < v14)
      {
        v10 = (uint64_t *)v10[1];
        if (!v10)
          goto LABEL_12;
      }
      v13 = v10;
      v10 = (uint64_t *)*v10;
    }
    while (v10);
LABEL_12:
    if (v13 != a1 + 25 && v12 >= *((_DWORD *)v13 + 8) && v11 >= *((_DWORD *)v13 + 9) && v14 >= *((_DWORD *)v13 + 10))
    {
      v15 = (uint64_t *)v13[7];
      if (v15)
      {
        v16 = v13 + 7;
        v17 = (_QWORD *)v13[7];
        do
        {
          v18 = v17[4];
          v19 = v18 >= a3;
          if (v18 >= a3)
            v20 = v17;
          else
            v20 = v17 + 1;
          if (v19)
            v16 = v17;
          v17 = (_QWORD *)*v20;
        }
        while (*v20);
        if (v16 != v13 + 7 && v16[4] <= a3)
        {
          v21 = (uint64_t *)v16[1];
          if (v21)
          {
            do
            {
              v22 = v21;
              v21 = (uint64_t *)*v21;
            }
            while (v21);
          }
          else
          {
            v23 = v16;
            do
            {
              v22 = (uint64_t *)v23[2];
              v24 = *v22 == (_QWORD)v23;
              v23 = v22;
            }
            while (!v24);
          }
          if ((uint64_t *)v13[6] == v16)
            v13[6] = v22;
          --v13[8];
          std::__tree_remove[abi:nn180100]<std::__tree_node_base<void *> *>(v15, v16);
          operator delete(v16);
        }
      }
      if (!v13[8])
      {
        v25 = (_QWORD *)v13[1];
        if (v25)
        {
          do
          {
            v26 = v25;
            v25 = (_QWORD *)*v25;
          }
          while (v25);
        }
        else
        {
          v27 = v13;
          do
          {
            v26 = (_QWORD *)v27[2];
            v24 = *v26 == (_QWORD)v27;
            v27 = v26;
          }
          while (!v24);
        }
        if ((_QWORD *)a1[24] == v13)
          a1[24] = v26;
        v28 = (uint64_t *)a1[25];
        --a1[26];
        std::__tree_remove[abi:nn180100]<std::__tree_node_base<void *> *>(v28, v13);
        std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy((_QWORD *)v13[7]);
        operator delete(v13);
      }
    }
  }
}

void std::__tree<std::__value_type<altitude::ObjectTreeModelKey,std::set<altitude::Renderable *>>,std::__map_value_compare<altitude::ObjectTreeModelKey,std::__value_type<altitude::ObjectTreeModelKey,std::set<altitude::Renderable *>>,std::less<altitude::ObjectTreeModelKey>,true>,std::allocator<std::__value_type<altitude::ObjectTreeModelKey,std::set<altitude::Renderable *>>>>::destroy(_QWORD *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<altitude::ObjectTreeModelKey,std::set<altitude::Renderable *>>,std::__map_value_compare<altitude::ObjectTreeModelKey,std::__value_type<altitude::ObjectTreeModelKey,std::set<altitude::Renderable *>>,std::less<altitude::ObjectTreeModelKey>,true>,std::allocator<std::__value_type<altitude::ObjectTreeModelKey,std::set<altitude::Renderable *>>>>::destroy(*a1);
    std::__tree<std::__value_type<altitude::ObjectTreeModelKey,std::set<altitude::Renderable *>>,std::__map_value_compare<altitude::ObjectTreeModelKey,std::__value_type<altitude::ObjectTreeModelKey,std::set<altitude::Renderable *>>,std::less<altitude::ObjectTreeModelKey>,true>,std::allocator<std::__value_type<altitude::ObjectTreeModelKey,std::set<altitude::Renderable *>>>>::destroy(a1[1]);
    std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy((_QWORD *)a1[7]);
    operator delete(a1);
  }
}

void std::vector<altitude::ObjectTreeModel>::__destroy_vector::operator()[abi:nn180100](void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  uint64_t v12;
  unsigned int *v13;
  unsigned int v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v7 = *((_QWORD *)v4 - 4);
        if (v7)
        {
          v8 = *((_QWORD *)v4 - 3);
          v6 = (void *)*((_QWORD *)v4 - 4);
          if (v8 != v7)
          {
            do
            {
              v9 = *(std::__shared_weak_count **)(v8 - 16);
              if (v9)
              {
                p_shared_owners = (unint64_t *)&v9->__shared_owners_;
                do
                  v11 = __ldaxr(p_shared_owners);
                while (__stlxr(v11 - 1, p_shared_owners));
                if (!v11)
                {
                  ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
                  std::__shared_weak_count::__release_weak(v9);
                }
              }
              *(_QWORD *)(v8 - 48) = &off_1E42C2D08;
              v12 = *(_QWORD *)(v8 - 40);
              if (v12)
              {
                v13 = (unsigned int *)(v12 + 128);
                do
                  v14 = __ldaxr(v13);
                while (__stlxr(v14 - 1, v13));
              }
              v15 = *(std::__shared_weak_count **)(v8 - 32);
              if (v15)
              {
                v16 = (unint64_t *)&v15->__shared_owners_;
                do
                  v17 = __ldaxr(v16);
                while (__stlxr(v17 - 1, v16));
                if (!v17)
                {
                  ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
                  std::__shared_weak_count::__release_weak(v15);
                }
              }
              v8 -= 48;
            }
            while (v8 != v7);
            v6 = (void *)*((_QWORD *)v4 - 4);
          }
          *((_QWORD *)v4 - 3) = v7;
          operator delete(v6);
        }
        v4 -= 48;
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::__tree<std::__value_type<int,karo::media::C3mmObjectTree>,std::__map_value_compare<int,std::__value_type<int,karo::media::C3mmObjectTree>,std::less<int>,true>,std::allocator<std::__value_type<int,karo::media::C3mmObjectTree>>>::destroy(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  if (a1)
  {
    std::__tree<std::__value_type<int,karo::media::C3mmObjectTree>,std::__map_value_compare<int,std::__value_type<int,karo::media::C3mmObjectTree>,std::less<int>,true>,std::allocator<std::__value_type<int,karo::media::C3mmObjectTree>>>::destroy(*a1);
    std::__tree<std::__value_type<int,karo::media::C3mmObjectTree>,std::__map_value_compare<int,std::__value_type<int,karo::media::C3mmObjectTree>,std::less<int>,true>,std::allocator<std::__value_type<int,karo::media::C3mmObjectTree>>>::destroy(a1[1]);
    v2 = a1[6];
    if (v2)
    {
      v3 = a1[7];
      v4 = (void *)a1[6];
      if (v3 != v2)
      {
        do
        {
          v5 = *(std::__shared_weak_count **)(v3 - 8);
          if (v5)
          {
            p_shared_owners = (unint64_t *)&v5->__shared_owners_;
            do
              v7 = __ldaxr(p_shared_owners);
            while (__stlxr(v7 - 1, p_shared_owners));
            if (!v7)
            {
              ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
              std::__shared_weak_count::__release_weak(v5);
            }
          }
          v3 -= 16;
        }
        while (v3 != v2);
        v4 = (void *)a1[6];
      }
      a1[7] = v2;
      operator delete(v4);
    }
    operator delete(a1);
  }
}

void altitude::ObjectTreeLoader::traverse(uint64_t a1, int *a2, float **a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  float *v12;
  double v13;
  double v14;
  __double2 v15;
  double v16;
  double v17;
  __double2 v18;
  double v19;
  double v20;
  double v21;
  float v22;
  int v23;
  float *v24;
  double *v25;
  double v26;
  double v27;
  unsigned int v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  float v38;
  std::__shared_weak_count *v39;
  float *v40;
  unint64_t *p_shared_owners;
  unint64_t v42;
  float32x4_t *v43;
  float *v44;
  unint64_t v45;
  unsigned int v46;
  float *v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t i;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t *v57;
  unint64_t v58;
  uint64_t v59;
  float32x4_t v60;
  float32x4_t *v61;
  int32x4_t v62;
  uint64_t v63;
  int32x4_t v64;
  float v65;
  unsigned int v66;
  unsigned int v67;
  int v68;
  int v69;
  unsigned int v70;
  char *v71;
  char *v72;
  char *v73;
  char *v74;
  uint64_t v75;
  uint64_t *v76;
  uint64_t v77;
  char *v78;
  unsigned int *v79;
  int v80;
  uint64_t v81;
  uint64_t v82;
  unsigned int *v83;
  unsigned int v84;
  char *v85;
  std::__shared_weak_count *v86;
  unint64_t *v87;
  unint64_t v88;
  std::__shared_weak_count *v89;
  unint64_t *v90;
  unint64_t v91;
  unsigned int *v92;
  unsigned int v93;
  unsigned int *v94;
  unsigned int v95;
  std::__shared_weak_count *v96;
  unint64_t *v97;
  unint64_t v98;
  uint64_t v99;
  unsigned int *v100;
  unsigned int v101;
  std::__shared_weak_count *v102;
  uint64_t v103;
  unint64_t *v104;
  unint64_t v105;
  uint64_t v106;
  std::__shared_weak_count *v107;
  unint64_t *v108;
  unint64_t v109;
  unsigned int *v110;
  unsigned int *v111;
  void *v112;
  std::__shared_weak_count *v113;
  unint64_t *v114;
  unint64_t v115;
  unint64_t v116;
  size_t v117;
  char *v118;
  char *v119;
  uint64_t v120;
  char *v121;
  char *v122;
  unsigned __int32 v123;
  char *v124;
  uint64_t v125;
  unsigned int *v126;
  unsigned int v127;
  char *v128;
  std::__shared_weak_count *v129;
  unint64_t *v130;
  unint64_t v131;
  __n128 v132;
  std::__shared_weak_count *v133;
  unint64_t *v134;
  unint64_t v135;
  unsigned int *v136;
  unsigned int v137;
  unsigned int *v138;
  unsigned int v139;
  std::__shared_weak_count *v140;
  unint64_t *v141;
  unint64_t v142;
  unint64_t v143;
  char *v144;
  int64_t v145;
  unint64_t v146;
  _QWORD *v147;
  char *v148;
  uint64_t v149;
  uint64_t v150;
  unint64_t *v151;
  unint64_t v152;
  unsigned int *v153;
  unsigned int v154;
  uint64_t v155;
  unint64_t *v156;
  unint64_t v157;
  char *v158;
  unint64_t v159;
  unint64_t v160;
  unint64_t v161;
  _QWORD *v162;
  char *v163;
  char *v164;
  _QWORD *v165;
  int64_t v166;
  unint64_t v167;
  _QWORD *v168;
  char *v169;
  uint64_t v170;
  uint64_t v171;
  unint64_t *v172;
  unint64_t v173;
  unsigned int *v174;
  unsigned int v175;
  uint64_t v176;
  unint64_t *v177;
  unint64_t v178;
  unint64_t v179;
  char *v180;
  uint64_t v181;
  char *v182;
  char *v183;
  uint64_t v184;
  char *v185;
  char *v186;
  void *v187;
  uint64_t v188;
  uint64_t v189;
  std::__shared_weak_count *v190;
  unint64_t *v191;
  unint64_t v192;
  uint64_t v193;
  unsigned int *v194;
  unsigned int v195;
  std::__shared_weak_count *v196;
  unint64_t *v197;
  unint64_t v198;
  std::__shared_weak_count *v199;
  unint64_t *v200;
  unint64_t v201;
  uint64_t v202;
  unsigned int *v203;
  unsigned int v204;
  std::__shared_weak_count *v205;
  unint64_t *v206;
  unint64_t v207;
  unint64_t *v208;
  NSObject *v209;
  int v210;
  std::__shared_weak_count *v211;
  unint64_t *v212;
  unint64_t v213;
  _QWORD *v214;
  unint64_t v215;
  unsigned int *v216;
  unint64_t v217;
  unsigned int v218;
  unint64_t v219;
  std::__shared_weak_count *v220;
  _QWORD v221[4];
  int v222;
  __int128 v223;
  uint64_t v224;
  uint64_t v225;
  std::__shared_weak_count *v226;
  void *v227;
  unsigned int *v228;
  std::__shared_weak_count *v229;
  uint8_t buf[8];
  _BYTE v231[24];
  double v232;
  __int128 v233;
  double v234;
  void *v235;
  double v236;
  double v237;
  void *v238;
  double v239;
  double v240;
  void *v241;
  double v242;
  char v243;
  void *v244;
  char v245;
  int v246;
  __int16 v247;
  char v248;
  int v249;
  int v250;
  uint64_t v251;
  int v252;
  uint64_t v253;

  v253 = *MEMORY[0x1E0C80C00];
  v12 = *a3;
  v13 = *((double *)*a3 + 2);
  v14 = *((double *)*a3 + 3);
  v15 = __sincos_stret(*((double *)*a3 + 1));
  v16 = 6378137.0 / sqrt(v15.__sinval * v15.__sinval * -0.00669437999 + 1.0);
  v17 = (v16 + v14) * v15.__cosval;
  v18 = __sincos_stret(v13);
  v19 = v17 * v18.__cosval;
  v20 = v17 * v18.__sinval;
  v21 = (v14 + v16 * 0.99330562) * v15.__sinval;
  v22 = v12[8];
  *(double *)v221 = v19;
  *(double *)&v221[1] = v20;
  *(double *)&v221[2] = v21;
  *(double *)&v221[3] = v22;
  if (karo::graphics::View::relates(a4, (uint64_t)v221))
  {
    v23 = (*(uint64_t (**)(float *))(*(_QWORD *)v12 + 16))(v12);
    v24 = *a3;
    if (v23)
    {
      if ((*(unsigned int (**)(float *))(*(_QWORD *)v24 + 16))(v24) != 1)
        return;
      v26 = *(double *)(a4 + 120);
      v25 = (double *)(a4 + 120);
      v27 = v25[12] + v19 * v26 + v20 * v25[4] + v21 * v25[8];
      v28 = *(_DWORD *)(a5 + 48) - *(_DWORD *)(a5 + 40);
      v29 = 1.0 / (v25[15] + v25[3] * v19 + v25[7] * v20 + v25[11] * v21);
      v30 = v29 * (v25[13] + v25[1] * v19 + v25[5] * v20 + v25[9] * v21);
      v31 = v29 * (v25[14] + v25[2] * v19 + v25[6] * v20 + v25[10] * v21);
      gm::Matrix<double,4,4>::inverted<int,void>((double *)buf, v25);
      v32 = 0.5 / (double)v28 + v29 * v27;
      v33 = v239 + v30 * v232 + v32 * *(double *)buf + *(double *)&v235 * v31;
      v34 = v240 + *(double *)v231 * v32 + *(double *)&v233 * v30 + v236 * v31;
      v35 = *(double *)&v241 + *(double *)&v231[8] * v32 + *((double *)&v233 + 1) * v30 + v237 * v31;
      v36 = 1.0 / (v242 + *(double *)&v231[16] * v32 + v234 * v30 + *(double *)&v238 * v31);
      v37 = sqrt(-(v19 - v36 * v33) * -(v19 - v36 * v33)+ -(v20 - v36 * v34) * -(v20 - v36 * v34)+ -(v21 - v36 * v35) * -(v21 - v36 * v35));
      *(float *)&v37 = v37;
      v38 = *(float *)(a1 + 216);
      v40 = *a3;
      v39 = (std::__shared_weak_count *)a3[1];
      if (v39)
      {
        p_shared_owners = (unint64_t *)&v39->__shared_owners_;
        do
          v42 = __ldxr(p_shared_owners);
        while (__stxr(v42 + 1, p_shared_owners));
      }
      v43 = (float32x4_t *)*((_QWORD *)v40 + 5);
      v44 = (float *)*((_QWORD *)v40 + 6);
      *(float *)&v37 = *(float *)&v37 / v38;
      v220 = v39;
      if (v43 == (float32x4_t *)v44)
      {
        v46 = 0;
      }
      else
      {
        v45 = (char *)v44 - (char *)v43 - 4;
        if (v45 > 0x1B)
        {
          v59 = (v45 >> 2) + 1;
          v60 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&v37, 0);
          v61 = v43 + 1;
          v62 = 0uLL;
          v63 = v59 & 0x7FFFFFFFFFFFFFF8;
          v64 = 0uLL;
          do
          {
            v62 = vsubq_s32(v62, vcgtq_f32(v60, v61[-1]));
            v64 = vsubq_s32(v64, vcgtq_f32(v60, *v61));
            v61 += 2;
            v63 -= 8;
          }
          while (v63);
          v46 = vaddvq_s32(vaddq_s32(v64, v62));
          if (v59 == (v59 & 0x7FFFFFFFFFFFFFF8))
            goto LABEL_36;
          v47 = &v43->f32[v59 & 0x7FFFFFFFFFFFFFF8];
        }
        else
        {
          v46 = 0;
          v47 = (float *)*((_QWORD *)v40 + 5);
        }
        do
        {
          v65 = *v47++;
          if (v65 < *(float *)&v37)
            ++v46;
        }
        while (v47 != v44);
      }
LABEL_36:
      v66 = ((unint64_t)((char *)v44 - (char *)v43) >> 2) - 1;
      if (v46 >= v66)
        v67 = v66;
      else
        v67 = v46;
      if ((float)(*(float *)&v37 / v43->f32[v67]) >= 5.0)
        goto LABEL_237;
      v68 = *a2;
      v69 = a2[1];
      v70 = *((_DWORD *)v40 + 9);
      v71 = *(char **)(a1 + 168);
      v72 = *(char **)(a1 + 176);
      v73 = v71;
      if (v71 != v72)
      {
        while (*(_DWORD *)v73 != v68 || *((_DWORD *)v73 + 1) != v69 || *((_DWORD *)v73 + 2) != v70)
        {
          v73 += 48;
          if (v73 == v72)
          {
            v73 = *(char **)(a1 + 176);
            break;
          }
        }
      }
      v218 = v67;
      if (v73 != v72)
      {
        v74 = &v71[16 * ((v73 - v71) >> 4)];
        v77 = *((_QWORD *)v74 + 2);
        v76 = (uint64_t *)(v74 + 16);
        v75 = v77;
        if (!*(_BYTE *)(v77 + 48 * v67 + 44))
        {
          v78 = &v71[16 * ((v73 - v71) >> 4)];
          v80 = *((_DWORD *)v78 + 11);
          v79 = (unsigned int *)(v78 + 44);
          if (v80 == v67)
            goto LABEL_82;
          v216 = v79;
          *((_QWORD *)&v223 + 1) = v70;
          LODWORD(v223) = 63;
          DWORD1(v223) = v67;
          *(double *)buf = 0.0;
          *(_OWORD *)v231 = v223;
          v232 = 0.0;
          *(_QWORD *)&v233 = 0;
          *(_QWORD *)&v231[16] = 0;
          HIBYTE(v234) = 0;
          *(double *)&v235 = 0.0;
          v236 = 0.0;
          v237 = 0.0;
          *(double *)&v238 = 0.0;
          HIBYTE(v240) = 0;
          v241 = (void *)0x656C707061;
          v243 = 5;
          v244 = (void *)0x656C707061;
          v245 = 5;
          v246 = 0;
          v247 = 1;
          v248 = 1;
          v249 = v68;
          v250 = v69;
          v251 = 0x7FFFFFFFLL;
          v252 = 0;
          altitude::C3bRequestManager::requestC3b((uint64_t)&v227, *(_QWORD *)(a1 + 64), &v223, (uint64_t)buf, 0, 0, 1u, 0xFFFFFFFF);
          v67 = v218;
          v81 = *v76 + 48 * v218;
          v82 = *(_QWORD *)(v81 + 8);
          if (v82)
          {
            v83 = (unsigned int *)(v82 + 128);
            do
              v84 = __ldaxr(v83);
            while (__stlxr(v84 - 1, v83));
          }
          v85 = (char *)v228;
          v86 = v229;
          if (v229)
          {
            v87 = (unint64_t *)&v229->__shared_owners_;
            do
              v88 = __ldxr(v87);
            while (__stxr(v88 + 1, v87));
          }
          v89 = *(std::__shared_weak_count **)(v81 + 16);
          *(_QWORD *)(v81 + 8) = v85;
          *(_QWORD *)(v81 + 16) = v86;
          if (v89)
          {
            v90 = (unint64_t *)&v89->__shared_owners_;
            do
              v91 = __ldaxr(v90);
            while (__stlxr(v91 - 1, v90));
            if (!v91)
            {
              ((void (*)(std::__shared_weak_count *))v89->__on_zero_shared)(v89);
              std::__shared_weak_count::__release_weak(v89);
              v67 = v218;
            }
            v85 = *(char **)(v81 + 8);
          }
          if (v85)
          {
            v92 = (unsigned int *)(v85 + 128);
            do
              v93 = __ldaxr(v92);
            while (__stlxr(v93 + 1, v92));
          }
          v227 = &off_1E42C2D08;
          if (v228)
          {
            v94 = v228 + 32;
            do
              v95 = __ldaxr(v94);
            while (__stlxr(v95 - 1, v94));
          }
          v96 = v229;
          if (v229)
          {
            v97 = (unint64_t *)&v229->__shared_owners_;
            do
              v98 = __ldaxr(v97);
            while (__stlxr(v98 - 1, v97));
            if (!v98)
            {
              ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
              std::__shared_weak_count::__release_weak(v96);
              v67 = v218;
            }
          }
          *(_BYTE *)(*v76 + 48 * v67 + 44) = 0;
          if (v232 != 0.0)
          {
            (*(void (**)(double))(**(_QWORD **)&v232 + 8))(COERCE_DOUBLE(*(_QWORD *)&v232));
            v67 = v218;
          }
          if (v245 < 0)
          {
            operator delete(v244);
            v67 = v218;
            if ((v243 & 0x80000000) == 0)
            {
LABEL_78:
              if ((SHIBYTE(v240) & 0x80000000) == 0)
                goto LABEL_79;
              goto LABEL_245;
            }
          }
          else if ((v243 & 0x80000000) == 0)
          {
            goto LABEL_78;
          }
          operator delete(v241);
          v67 = v218;
          if ((SHIBYTE(v240) & 0x80000000) == 0)
          {
LABEL_79:
            if ((SHIBYTE(v237) & 0x80000000) == 0)
              goto LABEL_80;
            goto LABEL_246;
          }
LABEL_245:
          operator delete(v238);
          v67 = v218;
          if ((SHIBYTE(v237) & 0x80000000) == 0)
          {
LABEL_80:
            if ((SHIBYTE(v234) & 0x80000000) == 0)
            {
LABEL_81:
              v75 = *v76;
              v79 = v216;
LABEL_82:
              *v79 = v67;
              v99 = v75 + 48 * v67;
              *(_DWORD *)(v99 + 40) = a6;
              if (!*(_QWORD *)(v99 + 24))
              {
                v100 = v79;
                if (karo::AsyncRequestManager::RequestHandle::getStatus((karo::AsyncRequestManager::RequestHandle *)(v75 + 48 * v67)) == 4)
                {
                  v101 = *((_DWORD *)v40 + 9);
                  v225 = 0;
                  v226 = 0;
                  v227 = 0;
                  v228 = 0;
                  v229 = 0;
                  *((_QWORD *)&v223 + 1) = 0;
                  v224 = 0;
                  *(_QWORD *)&v223 = (char *)&v223 + 8;
                  v222 = 0;
                  *(_DWORD *)buf = 63;
                  *(_DWORD *)&buf[4] = v218;
                  *(_QWORD *)v231 = v101;
                  *(_DWORD *)&v231[8] = v68;
                  *(_QWORD *)&v231[16] = 0;
                  *(_WORD *)((char *)&v233 + 7) = 0;
                  altitude::C3bRequestManager::getResult(*(_QWORD *)(a1 + 64), (uint64_t)buf, (uint64_t)&v225, (uint64_t)&v227, (uint64_t)&v223, (_WORD *)&v222 + 1, &v222);
                  v103 = v225;
                  v102 = v226;
                  if (v226)
                  {
                    v104 = (unint64_t *)&v226->__shared_owners_;
                    do
                      v105 = __ldxr(v104);
                    while (__stxr(v105 + 1, v104));
                  }
                  *(_QWORD *)(v99 + 24) = v103;
                  v106 = v75 + 48 * v218;
                  v107 = *(std::__shared_weak_count **)(v106 + 32);
                  *(_QWORD *)(v106 + 32) = v102;
                  if (v107)
                  {
                    v108 = (unint64_t *)&v107->__shared_owners_;
                    do
                      v109 = __ldaxr(v108);
                    while (__stlxr(v109 - 1, v108));
                    if (!v109)
                    {
                      ((void (*)(std::__shared_weak_count *))v107->__on_zero_shared)(v107);
                      std::__shared_weak_count::__release_weak(v107);
                    }
                  }
                  if (SBYTE7(v233) < 0)
                    operator delete(*(void **)&v231[16]);
                  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((_QWORD **)&v223 + 1));
                  v110 = (unsigned int *)v227;
                  if (v227)
                  {
                    v111 = v228;
                    v112 = v227;
                    if (v228 != v227)
                    {
                      do
                      {
                        v113 = (std::__shared_weak_count *)*((_QWORD *)v111 - 1);
                        if (v113)
                        {
                          v114 = (unint64_t *)&v113->__shared_owners_;
                          do
                            v115 = __ldaxr(v114);
                          while (__stlxr(v115 - 1, v114));
                          if (!v115)
                          {
                            ((void (*)(std::__shared_weak_count *))v113->__on_zero_shared)(v113);
                            std::__shared_weak_count::__release_weak(v113);
                          }
                        }
                        v111 -= 4;
                      }
                      while (v111 != v110);
                      v112 = v227;
                    }
                    v228 = v110;
                    operator delete(v112);
                  }
                  v211 = v226;
                  if (v226)
                  {
                    v212 = (unint64_t *)&v226->__shared_owners_;
                    do
                      v213 = __ldaxr(v212);
                    while (__stlxr(v213 - 1, v212));
                    if (!v213)
                    {
                      ((void (*)(std::__shared_weak_count *))v211->__on_zero_shared)(v211);
                      std::__shared_weak_count::__release_weak(v211);
                    }
                  }
                }
                else if (!karo::AsyncRequestManager::RequestHandle::getStatus((karo::AsyncRequestManager::RequestHandle *)v99))
                {
                  if (GEOGetVectorKitVKDefaultLog_onceToken != -1)
                    dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_4_11772);
                  v209 = GEOGetVectorKitVKDefaultLog_log;
                  if (os_log_type_enabled((os_log_t)GEOGetVectorKitVKDefaultLog_log, OS_LOG_TYPE_ERROR))
                  {
                    v210 = *((_DWORD *)v40 + 9);
                    *(_DWORD *)buf = 67109888;
                    *(_DWORD *)&buf[4] = v68;
                    *(_WORD *)v231 = 1024;
                    *(_DWORD *)&v231[2] = v69;
                    *(_WORD *)&v231[6] = 1024;
                    *(_DWORD *)&v231[8] = v210;
                    *(_WORD *)&v231[12] = 1024;
                    *(_DWORD *)&v231[14] = v218;
                    _os_log_impl(&dword_19F029000, v209, OS_LOG_TYPE_ERROR, "Failed to load ObjectTree model (region: %u version: %u entity: %u lod: %u)", buf, 0x1Au);
                  }
                  *(_BYTE *)(v75 + 48 * v218 + 44) = 1;
                  *(_OWORD *)v231 = 0uLL;
                  *(double *)buf = COERCE_DOUBLE(&off_1E42C2D08);
                  karo::AsyncRequestManager::RequestHandle::operator=(v99, (uint64_t)buf);
                  karo::AsyncRequestManager::RequestHandle::~RequestHandle((karo::AsyncRequestManager::RequestHandle *)buf);
                  *v100 = -1;
                }
              }
              goto LABEL_237;
            }
LABEL_247:
            operator delete((void *)v233);
            v67 = v218;
            goto LABEL_81;
          }
LABEL_246:
          operator delete(v235);
          v67 = v218;
          if ((SHIBYTE(v234) & 0x80000000) == 0)
            goto LABEL_81;
          goto LABEL_247;
        }
LABEL_237:
        v48 = v220;
        if (!v220)
          return;
        v208 = (unint64_t *)&v220->__shared_owners_;
        do
          v58 = __ldaxr(v208);
        while (__stlxr(v58 - 1, v208));
        goto LABEL_240;
      }
      *((_QWORD *)&v223 + 1) = v70;
      LODWORD(v223) = 63;
      DWORD1(v223) = v67;
      *(double *)buf = 0.0;
      *(_OWORD *)v231 = v223;
      v232 = 0.0;
      *(_QWORD *)&v233 = 0;
      *(_QWORD *)&v231[16] = 0;
      HIBYTE(v234) = 0;
      *(double *)&v235 = 0.0;
      v236 = 0.0;
      v237 = 0.0;
      *(double *)&v238 = 0.0;
      HIBYTE(v240) = 0;
      v241 = (void *)0x656C707061;
      v243 = 5;
      v244 = (void *)0x656C707061;
      v245 = 5;
      v246 = 0;
      v247 = 1;
      v248 = 1;
      v249 = v68;
      v250 = v69;
      v251 = 0x7FFFFFFFLL;
      v252 = 0;
      v116 = *((_QWORD *)v40 + 6) - *((_QWORD *)v40 + 5);
      if (v116)
      {
        if (v116 >= 0x1555555555555555)
          goto LABEL_261;
        v117 = 16 * ((v116 >> 1) + (v116 >> 2));
        v118 = (char *)operator new(v117);
        v119 = v118;
        v120 = 0;
        v121 = &v118[v117];
        do
        {
          v122 = &v118[v120];
          *((_QWORD *)v122 + 5) = 0;
          *(_QWORD *)v122 = &off_1E42C2D08;
          *(_OWORD *)(v122 + 8) = 0uLL;
          *(_OWORD *)(v122 + 24) = 0uLL;
          v120 += 48;
          *(_QWORD *)(v122 + 37) = 0;
        }
        while (v117 != v120);
      }
      else
      {
        v121 = 0;
        v119 = 0;
      }
      altitude::C3bRequestManager::requestC3b((uint64_t)&v227, *(_QWORD *)(a1 + 64), &v223, (uint64_t)buf, 0, 0, 1u, 0xFFFFFFFF);
      v123 = v218;
      v124 = &v119[48 * v218];
      v125 = *((_QWORD *)v124 + 1);
      if (v125)
      {
        v126 = (unsigned int *)(v125 + 128);
        do
          v127 = __ldaxr(v126);
        while (__stlxr(v127 - 1, v126));
      }
      v128 = (char *)v228;
      v129 = v229;
      if (v229)
      {
        v130 = (unint64_t *)&v229->__shared_owners_;
        do
          v131 = __ldxr(v130);
        while (__stxr(v131 + 1, v130));
      }
      v132.n128_u64[0] = -1;
      v132.n128_u64[1] = -1;
      v133 = (std::__shared_weak_count *)*((_QWORD *)v124 + 2);
      *((_QWORD *)v124 + 1) = v128;
      *((_QWORD *)v124 + 2) = v129;
      if (v133)
      {
        v134 = (unint64_t *)&v133->__shared_owners_;
        do
          v135 = __ldaxr(v134);
        while (__stlxr(v135 - 1, v134));
        if (!v135)
        {
          ((void (*)(std::__shared_weak_count *, __n128))v133->__on_zero_shared)(v133, v132);
          std::__shared_weak_count::__release_weak(v133);
          v132.n128_u32[0] = -1;
          v123 = v218;
        }
        v128 = (char *)*((_QWORD *)v124 + 1);
      }
      if (v128)
      {
        v136 = (unsigned int *)(v128 + 128);
        do
          v137 = __ldaxr(v136);
        while (__stlxr(v137 + 1, v136));
      }
      v227 = &off_1E42C2D08;
      if (v228)
      {
        v138 = v228 + 32;
        do
          v139 = __ldaxr(v138);
        while (__stlxr(v139 - 1, v138));
      }
      v132.n128_u32[1] = v123;
      v140 = v229;
      v217 = v132.n128_u64[0];
      if (v229)
      {
        v141 = (unint64_t *)&v229->__shared_owners_;
        do
          v142 = __ldaxr(v141);
        while (__stlxr(v142 - 1, v141));
        if (!v142)
        {
          ((void (*)(std::__shared_weak_count *))v140->__on_zero_shared)(v140);
          std::__shared_weak_count::__release_weak(v140);
          v132.n128_u64[0] = v217;
          v123 = v218;
        }
      }
      *(_DWORD *)&v119[48 * v123 + 40] = a6;
      v144 = *(char **)(a1 + 176);
      v143 = *(_QWORD *)(a1 + 184);
      if ((unint64_t)v144 < v143)
      {
        *(_DWORD *)v144 = v68;
        *((_DWORD *)v144 + 1) = v69;
        *((_DWORD *)v144 + 2) = v70;
        *((_QWORD *)v144 + 3) = 0;
        *((_QWORD *)v144 + 4) = 0;
        *((_QWORD *)v144 + 2) = 0;
        v145 = v121 - v119;
        if (v121 == v119)
        {
LABEL_158:
          *((_QWORD *)v144 + 5) = v132.n128_u64[0];
          v163 = v144 + 48;
          goto LABEL_205;
        }
        v146 = 0xAAAAAAAAAAAAAAABLL * (v145 >> 4);
        if (v146 <= 0x555555555555555)
        {
          v147 = operator new(v145);
          *((_QWORD *)v144 + 2) = v147;
          *((_QWORD *)v144 + 3) = v147;
          *((_QWORD *)v144 + 4) = &v147[6 * v146];
          v148 = v119;
          v132.n128_u64[0] = v217;
          do
          {
            v149 = *((_QWORD *)v148 + 1);
            v150 = *((_QWORD *)v148 + 2);
            *v147 = &off_1E42C2D08;
            v147[1] = v149;
            v147[2] = v150;
            if (v150)
            {
              v151 = (unint64_t *)(v150 + 8);
              do
                v152 = __ldxr(v151);
              while (__stxr(v152 + 1, v151));
              v149 = v147[1];
            }
            if (v149)
            {
              v153 = (unsigned int *)(v149 + 128);
              do
                v154 = __ldaxr(v153);
              while (__stlxr(v154 + 1, v153));
            }
            v155 = *((_QWORD *)v148 + 4);
            v147[3] = *((_QWORD *)v148 + 3);
            v147[4] = v155;
            if (v155)
            {
              v156 = (unint64_t *)(v155 + 8);
              do
                v157 = __ldxr(v156);
              while (__stxr(v157 + 1, v156));
            }
            *((_DWORD *)v147 + 10) = *((_DWORD *)v148 + 10);
            *((_BYTE *)v147 + 44) = v148[44];
            v148 += 48;
            v147 += 6;
          }
          while (v148 != v121);
          *((_QWORD *)v144 + 3) = v147;
          goto LABEL_158;
        }
LABEL_261:
        abort();
      }
      v158 = *(char **)(a1 + 168);
      v159 = 0xAAAAAAAAAAAAAAABLL * ((v144 - v158) >> 4) + 1;
      if (v159 > 0x555555555555555)
        goto LABEL_261;
      v160 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v143 - (_QWORD)v158) >> 4);
      if (2 * v160 > v159)
        v159 = 2 * v160;
      if (v160 >= 0x2AAAAAAAAAAAAAALL)
        v161 = 0x555555555555555;
      else
        v161 = v159;
      v219 = v161;
      if (v161)
      {
        if (v161 > 0x555555555555555)
          std::__throw_bad_array_new_length[abi:nn180100]();
        v162 = operator new(48 * v161);
        v132.n128_u64[0] = v217;
      }
      else
      {
        v162 = 0;
      }
      v215 = 0xAAAAAAAAAAAAAAABLL * ((v144 - v158) >> 4);
      v164 = (char *)&v162[2 * ((v144 - v158) >> 4)];
      *(_DWORD *)v164 = v68;
      *((_DWORD *)v164 + 1) = v69;
      *((_DWORD *)v164 + 2) = v70;
      *((_QWORD *)v164 + 2) = 0;
      *((_QWORD *)v164 + 3) = 0;
      v165 = v164 + 24;
      *((_QWORD *)v164 + 4) = 0;
      v166 = v121 - v119;
      if (v121 == v119)
      {
        v179 = v219;
      }
      else
      {
        v214 = v162;
        v167 = 0xAAAAAAAAAAAAAAABLL * (v166 >> 4);
        if (v167 > 0x555555555555555)
          goto LABEL_261;
        v168 = operator new(v166);
        *((_QWORD *)v164 + 2) = v168;
        *v165 = v168;
        *((_QWORD *)v164 + 4) = &v168[6 * v167];
        v169 = v119;
        v132.n128_u64[0] = v217;
        do
        {
          v170 = *((_QWORD *)v169 + 1);
          v171 = *((_QWORD *)v169 + 2);
          *v168 = &off_1E42C2D08;
          v168[1] = v170;
          v168[2] = v171;
          if (v171)
          {
            v172 = (unint64_t *)(v171 + 8);
            do
              v173 = __ldxr(v172);
            while (__stxr(v173 + 1, v172));
            v170 = v168[1];
          }
          if (v170)
          {
            v174 = (unsigned int *)(v170 + 128);
            do
              v175 = __ldaxr(v174);
            while (__stlxr(v175 + 1, v174));
          }
          v176 = *((_QWORD *)v169 + 4);
          v168[3] = *((_QWORD *)v169 + 3);
          v168[4] = v176;
          if (v176)
          {
            v177 = (unint64_t *)(v176 + 8);
            do
              v178 = __ldxr(v177);
            while (__stxr(v178 + 1, v177));
          }
          *((_DWORD *)v168 + 10) = *((_DWORD *)v169 + 10);
          *((_BYTE *)v168 + 44) = v169[44];
          v169 += 48;
          v168 += 6;
        }
        while (v169 != v121);
        *v165 = v168;
        v158 = *(char **)(a1 + 168);
        v144 = *(char **)(a1 + 176);
        v179 = v219;
        v162 = v214;
      }
      v180 = (char *)&v162[6 * v179];
      v162[6 * v215 + 5] = v132.n128_u64[0];
      v163 = v164 + 48;
      if (v144 == v158)
      {
        *(_QWORD *)(a1 + 168) = v164;
        *(_QWORD *)(a1 + 176) = v163;
        *(_QWORD *)(a1 + 184) = v180;
      }
      else
      {
        v181 = 0;
        do
        {
          v182 = &v164[v181];
          v183 = &v144[v181];
          v184 = *(_QWORD *)&v144[v181 - 48];
          *((_DWORD *)v182 - 10) = *(_DWORD *)&v144[v181 - 40];
          *((_QWORD *)v182 - 6) = v184;
          *((_QWORD *)v182 - 3) = 0;
          *((_QWORD *)v182 - 2) = 0;
          *((_OWORD *)v182 - 2) = *(_OWORD *)&v144[v181 - 32];
          *((_QWORD *)v182 - 2) = *(_QWORD *)&v144[v181 - 16];
          *((_QWORD *)v183 - 4) = 0;
          *((_QWORD *)v183 - 3) = 0;
          *((_QWORD *)v183 - 2) = 0;
          *((_QWORD *)v182 - 1) = *(_QWORD *)&v144[v181 - 8];
          v181 -= 48;
        }
        while (&v144[v181] != v158);
        v185 = &v164[v181];
        v158 = *(char **)(a1 + 168);
        v186 = *(char **)(a1 + 176);
        *(_QWORD *)(a1 + 168) = v185;
        *(_QWORD *)(a1 + 176) = v163;
        *(_QWORD *)(a1 + 184) = v180;
        while (v186 != v158)
        {
          v188 = *((_QWORD *)v186 - 4);
          if (v188)
          {
            v189 = *((_QWORD *)v186 - 3);
            v187 = (void *)*((_QWORD *)v186 - 4);
            if (v189 != v188)
            {
              do
              {
                v190 = *(std::__shared_weak_count **)(v189 - 16);
                if (v190)
                {
                  v191 = (unint64_t *)&v190->__shared_owners_;
                  do
                    v192 = __ldaxr(v191);
                  while (__stlxr(v192 - 1, v191));
                  if (!v192)
                  {
                    ((void (*)(std::__shared_weak_count *))v190->__on_zero_shared)(v190);
                    std::__shared_weak_count::__release_weak(v190);
                  }
                }
                *(_QWORD *)(v189 - 48) = &off_1E42C2D08;
                v193 = *(_QWORD *)(v189 - 40);
                if (v193)
                {
                  v194 = (unsigned int *)(v193 + 128);
                  do
                    v195 = __ldaxr(v194);
                  while (__stlxr(v195 - 1, v194));
                }
                v196 = *(std::__shared_weak_count **)(v189 - 32);
                if (v196)
                {
                  v197 = (unint64_t *)&v196->__shared_owners_;
                  do
                    v198 = __ldaxr(v197);
                  while (__stlxr(v198 - 1, v197));
                  if (!v198)
                  {
                    ((void (*)(std::__shared_weak_count *))v196->__on_zero_shared)(v196);
                    std::__shared_weak_count::__release_weak(v196);
                  }
                }
                v189 -= 48;
              }
              while (v189 != v188);
              v187 = (void *)*((_QWORD *)v186 - 4);
            }
            *((_QWORD *)v186 - 3) = v188;
            operator delete(v187);
          }
          v186 -= 48;
        }
      }
      if (v158)
        operator delete(v158);
LABEL_205:
      *(_QWORD *)(a1 + 176) = v163;
      if (v119)
      {
        if (v121 != v119)
        {
          do
          {
            v199 = (std::__shared_weak_count *)*((_QWORD *)v121 - 2);
            if (v199)
            {
              v200 = (unint64_t *)&v199->__shared_owners_;
              do
                v201 = __ldaxr(v200);
              while (__stlxr(v201 - 1, v200));
              if (!v201)
              {
                ((void (*)(std::__shared_weak_count *))v199->__on_zero_shared)(v199);
                std::__shared_weak_count::__release_weak(v199);
              }
            }
            *((_QWORD *)v121 - 6) = &off_1E42C2D08;
            v202 = *((_QWORD *)v121 - 5);
            if (v202)
            {
              v203 = (unsigned int *)(v202 + 128);
              do
                v204 = __ldaxr(v203);
              while (__stlxr(v204 - 1, v203));
            }
            v205 = (std::__shared_weak_count *)*((_QWORD *)v121 - 4);
            if (v205)
            {
              v206 = (unint64_t *)&v205->__shared_owners_;
              do
                v207 = __ldaxr(v206);
              while (__stlxr(v207 - 1, v206));
              if (!v207)
              {
                ((void (*)(std::__shared_weak_count *))v205->__on_zero_shared)(v205);
                std::__shared_weak_count::__release_weak(v205);
              }
            }
            v121 -= 48;
          }
          while (v121 != v119);
          v121 = v119;
        }
        operator delete(v121);
      }
      if (v232 != 0.0)
        (*(void (**)(double))(**(_QWORD **)&v232 + 8))(COERCE_DOUBLE(*(_QWORD *)&v232));
      if (v245 < 0)
      {
        operator delete(v244);
        if ((v243 & 0x80000000) == 0)
        {
LABEL_228:
          if ((SHIBYTE(v240) & 0x80000000) == 0)
            goto LABEL_229;
          goto LABEL_234;
        }
      }
      else if ((v243 & 0x80000000) == 0)
      {
        goto LABEL_228;
      }
      operator delete(v241);
      if ((SHIBYTE(v240) & 0x80000000) == 0)
      {
LABEL_229:
        if ((SHIBYTE(v237) & 0x80000000) == 0)
          goto LABEL_230;
        goto LABEL_235;
      }
LABEL_234:
      operator delete(v238);
      if ((SHIBYTE(v237) & 0x80000000) == 0)
      {
LABEL_230:
        if ((SHIBYTE(v234) & 0x80000000) == 0)
          goto LABEL_237;
LABEL_236:
        operator delete((void *)v233);
        goto LABEL_237;
      }
LABEL_235:
      operator delete(v235);
      if ((SHIBYTE(v234) & 0x80000000) == 0)
        goto LABEL_237;
      goto LABEL_236;
    }
    v48 = (std::__shared_weak_count *)a3[1];
    if (v48)
    {
      v49 = (unint64_t *)&v48->__shared_owners_;
      do
        v50 = __ldxr(v49);
      while (__stxr(v50 + 1, v49));
    }
    v51 = *((_QWORD *)v24 + 5);
    for (i = *((_QWORD *)v24 + 6); v51 != i; v51 += 16)
    {
      while (1)
      {
        v53 = *(std::__shared_weak_count **)(v51 + 8);
        *(double *)buf = *(double *)v51;
        *(_QWORD *)v231 = v53;
        if (v53)
          break;
        altitude::ObjectTreeLoader::traverse(a1, a2, buf, a4, a5, a6);
        v51 += 16;
        if (v51 == i)
          goto LABEL_24;
      }
      v54 = (unint64_t *)&v53->__shared_owners_;
      do
        v55 = __ldxr(v54);
      while (__stxr(v55 + 1, v54));
      altitude::ObjectTreeLoader::traverse(a1, a2, buf, a4, a5, a6);
      do
        v56 = __ldaxr(v54);
      while (__stlxr(v56 - 1, v54));
      if (!v56)
      {
        ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
        std::__shared_weak_count::__release_weak(v53);
      }
    }
LABEL_24:
    if (v48)
    {
      v57 = (unint64_t *)&v48->__shared_owners_;
      do
        v58 = __ldaxr(v57);
      while (__stlxr(v58 - 1, v57));
LABEL_240:
      if (!v58)
      {
        ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
        std::__shared_weak_count::__release_weak(v48);
      }
    }
  }
}

unint64_t std::__introsort<std::_ClassicAlgPolicy,altitude::ObjectTreeLoader::cleanupModels(void)::OldestFirst &,altitude::ObjectTreeModel::LodLevel **,false>(unint64_t result, uint64_t *a2, uint64_t a3, char a4)
{
  uint64_t *v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int v31;
  unsigned int v32;
  uint64_t v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unsigned int v42;
  unsigned int v43;
  uint64_t v44;
  unsigned int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unsigned int v50;
  unsigned int v51;
  uint64_t v52;
  unsigned int v53;
  uint64_t v54;
  uint64_t v55;
  unsigned int v56;
  uint64_t *v57;
  uint64_t *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t *v65;
  uint64_t *v66;
  uint64_t v67;
  uint64_t v68;
  BOOL v69;
  uint64_t v70;
  uint64_t *v71;
  uint64_t *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unsigned int v82;
  unsigned int v83;
  uint64_t v84;
  unsigned int v85;
  uint64_t *v86;
  uint64_t *v87;
  uint64_t *v88;
  uint64_t v89;
  uint64_t *v90;
  unsigned int v91;
  unsigned int v92;
  unsigned int v93;
  uint64_t *v94;
  uint64_t **v95;
  uint64_t *v96;
  BOOL v98;
  uint64_t v99;
  uint64_t *v100;
  uint64_t *v101;
  uint64_t v102;
  uint64_t v103;
  unsigned int v104;
  uint64_t v105;
  uint64_t v106;
  int64_t v107;
  int64_t v108;
  BOOL v109;
  uint64_t v110;
  uint64_t *v111;
  uint64_t v112;
  unsigned int v113;
  unsigned int v114;
  uint64_t *v115;
  uint64_t v116;
  unsigned int v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t *v122;
  uint64_t v123;
  uint64_t *v124;
  uint64_t v125;
  uint64_t v126;
  unint64_t v127;
  uint64_t *v128;
  uint64_t v129;
  uint64_t v130;
  unsigned int v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  unsigned int v136;
  uint64_t v137;
  uint64_t v138;
  unsigned int v139;
  uint64_t v140;

  v7 = (uint64_t *)result;
LABEL_2:
  v8 = a2 - 1;
  v9 = v7;
  while (2)
  {
    v7 = v9;
    v10 = (char *)a2 - (char *)v9;
    v11 = a2 - v9;
    switch(v11)
    {
      case 0:
      case 1:
        return result;
      case 2:
        v79 = *v9;
        if (*(_DWORD *)(*v8 + 40) < *(_DWORD *)(*v9 + 40))
        {
          *v9 = *v8;
          *v8 = v79;
        }
        return result;
      case 3:
        v80 = *v9;
        v81 = v9[1];
        v82 = *(_DWORD *)(v81 + 40);
        v83 = *(_DWORD *)(*v9 + 40);
        v84 = *v8;
        v85 = *(_DWORD *)(*v8 + 40);
        if (v82 >= v83)
        {
          if (v85 < v82)
          {
            v9[1] = v84;
            *v8 = v81;
            v133 = *v9;
            v132 = v9[1];
            if (*(_DWORD *)(v132 + 40) < *(_DWORD *)(*v9 + 40))
            {
              *v9 = v132;
              v9[1] = v133;
            }
          }
        }
        else
        {
          if (v85 >= v82)
          {
            *v9 = v81;
            v9[1] = v80;
            if (*(_DWORD *)(*v8 + 40) >= v83)
              return result;
            v9[1] = *v8;
          }
          else
          {
            *v9 = v84;
          }
          *v8 = v80;
        }
        return result;
      case 4:
        v86 = v9 + 1;
        v87 = (uint64_t *)v9[1];
        v88 = v9 + 2;
        v89 = v9[2];
        v90 = (uint64_t *)*v9;
        v91 = *((_DWORD *)v87 + 10);
        v92 = *(_DWORD *)(*v9 + 40);
        v93 = *(_DWORD *)(v89 + 40);
        if (v91 >= v92)
        {
          if (v93 >= v91)
            goto LABEL_173;
          *v86 = v89;
          *v88 = (uint64_t)v87;
          v94 = v9;
          v95 = (uint64_t **)(v9 + 1);
          result = (unint64_t)v87;
          if (v93 >= v92)
            goto LABEL_174;
        }
        else
        {
          v94 = v9;
          v95 = (uint64_t **)(v9 + 2);
          result = *v9;
          if (v93 >= v91)
          {
            *v9 = (uint64_t)v87;
            v9[1] = (uint64_t)v90;
            v94 = v9 + 1;
            v95 = (uint64_t **)(v9 + 2);
            result = (unint64_t)v90;
            if (v93 >= v92)
            {
LABEL_173:
              v87 = (uint64_t *)v89;
LABEL_174:
              if (*(_DWORD *)(*v8 + 40) < *((_DWORD *)v87 + 10))
              {
                *v88 = *v8;
                *v8 = (uint64_t)v87;
                v137 = *v88;
                v138 = *v86;
                v139 = *(_DWORD *)(v137 + 40);
                if (v139 < *(_DWORD *)(v138 + 40))
                {
                  v9[1] = v137;
                  v9[2] = v138;
                  v140 = *v9;
                  if (v139 < *(_DWORD *)(*v9 + 40))
                  {
                    *v9 = v137;
                    v9[1] = v140;
                  }
                }
              }
              return result;
            }
          }
        }
        *v94 = v89;
        *v95 = v90;
        v87 = (uint64_t *)result;
        goto LABEL_174;
      case 5:
        return (unint64_t)std::__sort5_maybe_branchless[abi:nn180100]<std::_ClassicAlgPolicy,altitude::ObjectTreeLoader::cleanupModels(void)::OldestFirst &,altitude::ObjectTreeModel::LodLevel **,0>(v9, v9 + 1, v9 + 2, v9 + 3, a2 - 1);
      default:
        if (v10 > 191)
        {
          if (!a3)
          {
            if (v9 != a2)
            {
              v107 = (unint64_t)(v11 - 2) >> 1;
              v108 = v107;
              do
              {
                if (v107 >= v108)
                {
                  v110 = (2 * v108) | 1;
                  v111 = &v9[v110];
                  if (2 * v108 + 2 >= v11)
                  {
                    v112 = *v111;
                  }
                  else
                  {
                    v112 = v111[1];
                    v113 = *(_DWORD *)(*v111 + 40);
                    v114 = *(_DWORD *)(v112 + 40);
                    if (v113 < v114)
                      ++v111;
                    else
                      v112 = *v111;
                    if (v113 < v114)
                      v110 = 2 * v108 + 2;
                  }
                  v115 = &v9[v108];
                  v116 = *v115;
                  result = *(unsigned int *)(v112 + 40);
                  v117 = *(_DWORD *)(*v115 + 40);
                  if (result >= v117)
                  {
                    do
                    {
                      *v115 = v112;
                      v115 = v111;
                      if (v107 < v110)
                        break;
                      v118 = (2 * v110) | 1;
                      v111 = &v9[v118];
                      v110 = 2 * v110 + 2;
                      if (v110 < v11)
                      {
                        v112 = *v111;
                        if (*(_DWORD *)(*v111 + 40) >= *(_DWORD *)(v111[1] + 40))
                        {
                          v110 = v118;
                        }
                        else
                        {
                          v112 = v111[1];
                          ++v111;
                        }
                      }
                      else
                      {
                        v112 = *v111;
                        v110 = v118;
                      }
                      result = *(unsigned int *)(v112 + 40);
                    }
                    while (result >= v117);
                    *v115 = v116;
                  }
                }
                v109 = v108-- <= 0;
              }
              while (!v109);
              v119 = (unint64_t)v10 >> 3;
              do
              {
                v120 = 0;
                v121 = *v9;
                v122 = v9;
                do
                {
                  v124 = &v122[v120 + 1];
                  v125 = (2 * v120) | 1;
                  v120 = 2 * v120 + 2;
                  if (v120 < v119)
                  {
                    v123 = *v124;
                    result = *(unsigned int *)(*v124 + 40);
                    if (result >= *(_DWORD *)(v124[1] + 40))
                    {
                      v120 = v125;
                    }
                    else
                    {
                      v123 = v124[1];
                      ++v124;
                    }
                  }
                  else
                  {
                    v123 = *v124;
                    v120 = v125;
                  }
                  *v122 = v123;
                  v122 = v124;
                }
                while (v120 <= (uint64_t)((unint64_t)(v119 - 2) >> 1));
                if (v124 == --a2)
                {
                  *v124 = v121;
                }
                else
                {
                  *v124 = *a2;
                  *a2 = v121;
                  v126 = (char *)v124 - (char *)v9 + 8;
                  if (v126 >= 9)
                  {
                    v127 = (((unint64_t)v126 >> 3) - 2) >> 1;
                    v128 = &v9[v127];
                    v129 = *v128;
                    v130 = *v124;
                    v131 = *(_DWORD *)(*v124 + 40);
                    if (*(_DWORD *)(*v128 + 40) < v131)
                    {
                      do
                      {
                        *v124 = v129;
                        v124 = v128;
                        if (!v127)
                          break;
                        v127 = (v127 - 1) >> 1;
                        v128 = &v9[v127];
                        v129 = *v128;
                      }
                      while (*(_DWORD *)(*v128 + 40) < v131);
                      *v124 = v130;
                    }
                  }
                }
                v109 = v119-- <= 2;
              }
              while (!v109);
            }
            return result;
          }
          v12 = (unint64_t)v11 >> 1;
          v13 = &v9[(unint64_t)v11 >> 1];
          v14 = *v8;
          v15 = *(_DWORD *)(*v8 + 40);
          if ((unint64_t)v10 >= 0x401)
          {
            v16 = *v13;
            v17 = *v9;
            v18 = *(_DWORD *)(*v13 + 40);
            v19 = *(_DWORD *)(*v9 + 40);
            if (v18 >= v19)
            {
              if (v15 < v18)
              {
                *v13 = v14;
                *v8 = v16;
                v24 = *v9;
                if (*(_DWORD *)(*v13 + 40) < *(_DWORD *)(*v9 + 40))
                {
                  *v9 = *v13;
                  *v13 = v24;
                }
              }
            }
            else
            {
              if (v15 < v18)
              {
                *v9 = v14;
                goto LABEL_21;
              }
              *v9 = v16;
              *v13 = v17;
              if (*(_DWORD *)(*v8 + 40) < v19)
              {
                *v13 = *v8;
LABEL_21:
                *v8 = v17;
              }
            }
            v26 = &v9[v12];
            v29 = *(v26 - 1);
            v27 = v26 - 1;
            v28 = v29;
            v30 = v9[1];
            v31 = *(_DWORD *)(v29 + 40);
            v32 = *(_DWORD *)(v30 + 40);
            v33 = *(a2 - 2);
            v34 = *(_DWORD *)(v33 + 40);
            if (v31 >= v32)
            {
              if (v34 < v31)
              {
                *v27 = v33;
                *(a2 - 2) = v28;
                v35 = v9[1];
                if (*(_DWORD *)(*v27 + 40) < *(_DWORD *)(v35 + 40))
                {
                  v9[1] = *v27;
                  *v27 = v35;
                }
              }
            }
            else
            {
              if (v34 < v31)
              {
                v9[1] = v33;
                goto LABEL_33;
              }
              v9[1] = v28;
              *v27 = v30;
              v36 = *(a2 - 2);
              if (*(_DWORD *)(v36 + 40) < v32)
              {
                *v27 = v36;
LABEL_33:
                *(a2 - 2) = v30;
              }
            }
            v37 = &v9[v12];
            v40 = v37[1];
            v38 = v37 + 1;
            v39 = v40;
            v41 = v9[2];
            v42 = *(_DWORD *)(v40 + 40);
            v43 = *(_DWORD *)(v41 + 40);
            v44 = *(a2 - 3);
            v45 = *(_DWORD *)(v44 + 40);
            if (v42 >= v43)
            {
              if (v45 < v42)
              {
                *v38 = v44;
                *(a2 - 3) = v39;
                v46 = v9[2];
                if (*(_DWORD *)(*v38 + 40) < *(_DWORD *)(v46 + 40))
                {
                  v9[2] = *v38;
                  *v38 = v46;
                }
              }
            }
            else
            {
              if (v45 < v42)
              {
                v9[2] = v44;
                goto LABEL_42;
              }
              v9[2] = v39;
              *v38 = v41;
              v47 = *(a2 - 3);
              if (*(_DWORD *)(v47 + 40) < v43)
              {
                *v38 = v47;
LABEL_42:
                *(a2 - 3) = v41;
              }
            }
            v48 = *v13;
            v49 = *v27;
            v50 = *(_DWORD *)(*v13 + 40);
            v51 = *(_DWORD *)(*v27 + 40);
            v52 = *v38;
            v53 = *(_DWORD *)(*v38 + 40);
            if (v50 >= v51)
            {
              if (v53 >= v50)
                goto LABEL_50;
              *v13 = v52;
              *v38 = v48;
              v38 = v13;
              v48 = v49;
              if (v53 >= v51)
              {
                v48 = v52;
                goto LABEL_50;
              }
            }
            else if (v53 >= v50)
            {
              *v27 = v48;
              *v13 = v49;
              v27 = v13;
              v48 = v52;
              if (v53 >= v51)
              {
                v48 = v49;
LABEL_50:
                v54 = *v9;
                *v9 = v48;
                *v13 = v54;
                goto LABEL_51;
              }
            }
            *v27 = v52;
            *v38 = v49;
            goto LABEL_50;
          }
          v20 = *v9;
          v21 = *v13;
          v22 = *(_DWORD *)(*v9 + 40);
          v23 = *(_DWORD *)(*v13 + 40);
          if (v22 >= v23)
          {
            if (v15 < v22)
            {
              *v9 = v14;
              *v8 = v20;
              v25 = *v13;
              if (*(_DWORD *)(*v9 + 40) < *(_DWORD *)(*v13 + 40))
              {
                *v13 = *v9;
                *v9 = v25;
              }
            }
          }
          else
          {
            if (v15 >= v22)
            {
              *v13 = v20;
              *v9 = v21;
              if (*(_DWORD *)(*v8 + 40) >= v23)
                goto LABEL_51;
              *v9 = *v8;
            }
            else
            {
              *v13 = v14;
            }
            *v8 = v21;
          }
LABEL_51:
          --a3;
          v55 = *v9;
          if ((a4 & 1) == 0)
          {
            v56 = *(_DWORD *)(v55 + 40);
            if (*(_DWORD *)(*(v9 - 1) + 40) < v56)
              goto LABEL_54;
            if (v56 >= *(_DWORD *)(*v8 + 40))
            {
              v71 = v9 + 1;
              do
              {
                v9 = v71;
                if (v71 >= a2)
                  break;
                ++v71;
              }
              while (v56 >= *(_DWORD *)(*v9 + 40));
            }
            else
            {
              do
              {
                v70 = v9[1];
                ++v9;
              }
              while (v56 >= *(_DWORD *)(v70 + 40));
            }
            v72 = a2;
            if (v9 < a2)
            {
              v72 = a2;
              do
                v73 = *--v72;
              while (v56 < *(_DWORD *)(v73 + 40));
            }
            if (v9 < v72)
            {
              v74 = *v9;
              v75 = *v72;
              do
              {
                *v9 = v75;
                *v72 = v74;
                do
                {
                  v76 = v9[1];
                  ++v9;
                  v74 = v76;
                }
                while (v56 >= *(_DWORD *)(v76 + 40));
                do
                {
                  v77 = *--v72;
                  v75 = v77;
                }
                while (v56 < *(_DWORD *)(v77 + 40));
              }
              while (v9 < v72);
            }
            v78 = v9 - 1;
            if (v9 - 1 != v7)
              *v7 = *v78;
            a4 = 0;
            *v78 = v55;
            continue;
          }
          v56 = *(_DWORD *)(v55 + 40);
LABEL_54:
          v57 = v9;
          do
          {
            v58 = v57;
            v60 = v57[1];
            ++v57;
            v59 = v60;
          }
          while (*(_DWORD *)(v60 + 40) < v56);
          v61 = a2;
          if (v58 == v9)
          {
            v61 = a2;
            do
            {
              if (v57 >= v61)
                break;
              v63 = *--v61;
            }
            while (*(_DWORD *)(v63 + 40) >= v56);
          }
          else
          {
            do
              v62 = *--v61;
            while (*(_DWORD *)(v62 + 40) >= v56);
          }
          if (v57 < v61)
          {
            v64 = *v61;
            v65 = v57;
            v66 = v61;
            do
            {
              *v65 = v64;
              *v66 = v59;
              do
              {
                v58 = v65;
                v67 = v65[1];
                ++v65;
                v59 = v67;
              }
              while (*(_DWORD *)(v67 + 40) < v56);
              do
              {
                v68 = *--v66;
                v64 = v68;
              }
              while (*(_DWORD *)(v68 + 40) >= v56);
            }
            while (v65 < v66);
          }
          if (v58 != v9)
            *v9 = *v58;
          *v58 = v55;
          if (v57 < v61)
            goto LABEL_73;
          v69 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,altitude::ObjectTreeLoader::cleanupModels(void)::OldestFirst &,altitude::ObjectTreeModel::LodLevel **>(v9, v58);
          v9 = v58 + 1;
          result = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,altitude::ObjectTreeLoader::cleanupModels(void)::OldestFirst &,altitude::ObjectTreeModel::LodLevel **>(v58 + 1, a2);
          if (!(_DWORD)result)
          {
            if (v69)
              continue;
LABEL_73:
            result = std::__introsort<std::_ClassicAlgPolicy,altitude::ObjectTreeLoader::cleanupModels(void)::OldestFirst &,altitude::ObjectTreeModel::LodLevel **,false>(v7, v58, a3, a4 & 1);
            a4 = 0;
            v9 = v58 + 1;
            continue;
          }
          a2 = v58;
          if (v69)
            return result;
          goto LABEL_2;
        }
        v96 = v9 + 1;
        v98 = v9 == a2 || v96 == a2;
        if ((a4 & 1) != 0)
        {
          if (!v98)
          {
            v99 = 8;
            v100 = v9;
            do
            {
              v103 = *v100;
              v102 = v100[1];
              v100 = v96;
              v104 = *(_DWORD *)(v102 + 40);
              if (v104 < *(_DWORD *)(v103 + 40))
              {
                v105 = v99;
                do
                {
                  *(uint64_t *)((char *)v9 + v105) = v103;
                  v106 = v105 - 8;
                  if (v105 == 8)
                  {
                    v101 = v9;
                    goto LABEL_116;
                  }
                  v103 = *(uint64_t *)((char *)v9 + v105 - 16);
                  v105 -= 8;
                }
                while (v104 < *(_DWORD *)(v103 + 40));
                v101 = (uint64_t *)((char *)v9 + v106);
LABEL_116:
                *v101 = v102;
              }
              v96 = v100 + 1;
              v99 += 8;
            }
            while (v100 + 1 != a2);
          }
        }
        else if (!v98)
        {
          do
          {
            v135 = *v7;
            v134 = v7[1];
            v7 = v96;
            v136 = *(_DWORD *)(v134 + 40);
            if (v136 < *(_DWORD *)(v135 + 40))
            {
              do
              {
                *v96 = v135;
                v135 = *(v96 - 2);
                --v96;
              }
              while (v136 < *(_DWORD *)(v135 + 40));
              *v96 = v134;
            }
            v96 = v7 + 1;
          }
          while (v7 + 1 != a2);
        }
        return result;
    }
  }
}

uint64_t *std::__sort5_maybe_branchless[abi:nn180100]<std::_ClassicAlgPolicy,altitude::ObjectTreeLoader::cleanupModels(void)::OldestFirst &,altitude::ObjectTreeModel::LodLevel **,0>(uint64_t *result, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v5 = *a2;
  v6 = *result;
  v7 = *(_DWORD *)(*a2 + 40);
  v8 = *(_DWORD *)(*result + 40);
  v9 = *a3;
  v10 = *(_DWORD *)(*a3 + 40);
  if (v7 >= v8)
  {
    if (v10 >= v7)
    {
      v5 = *a3;
    }
    else
    {
      *a2 = v9;
      *a3 = v5;
      v11 = *result;
      if (*(_DWORD *)(*a2 + 40) < *(_DWORD *)(*result + 40))
      {
        *result = *a2;
        *a2 = v11;
        v5 = *a3;
      }
    }
  }
  else
  {
    if (v10 < v7)
    {
      *result = v9;
LABEL_9:
      *a3 = v6;
      v5 = v6;
      goto LABEL_11;
    }
    *result = v5;
    *a2 = v6;
    v5 = *a3;
    if (*(_DWORD *)(*a3 + 40) < v8)
    {
      *a2 = v5;
      goto LABEL_9;
    }
  }
LABEL_11:
  if (*(_DWORD *)(*a4 + 40) < *(_DWORD *)(v5 + 40))
  {
    *a3 = *a4;
    *a4 = v5;
    v12 = *a2;
    if (*(_DWORD *)(*a3 + 40) < *(_DWORD *)(*a2 + 40))
    {
      *a2 = *a3;
      *a3 = v12;
      v13 = *result;
      if (*(_DWORD *)(*a2 + 40) < *(_DWORD *)(*result + 40))
      {
        *result = *a2;
        *a2 = v13;
      }
    }
  }
  v14 = *a4;
  if (*(_DWORD *)(*a5 + 40) < *(_DWORD *)(*a4 + 40))
  {
    *a4 = *a5;
    *a5 = v14;
    v15 = *a3;
    if (*(_DWORD *)(*a4 + 40) < *(_DWORD *)(*a3 + 40))
    {
      *a3 = *a4;
      *a4 = v15;
      v16 = *a2;
      if (*(_DWORD *)(*a3 + 40) < *(_DWORD *)(*a2 + 40))
      {
        *a2 = *a3;
        *a3 = v16;
        v17 = *result;
        if (*(_DWORD *)(*a2 + 40) < *(_DWORD *)(*result + 40))
        {
          *result = *a2;
          *a2 = v17;
        }
      }
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,altitude::ObjectTreeLoader::cleanupModels(void)::OldestFirst &,altitude::ObjectTreeModel::LodLevel **>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  uint64_t *v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t *v31;
  int v32;
  uint64_t i;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unsigned int v45;
  uint64_t v46;
  uint64_t v47;

  v2 = 1;
  switch(a2 - a1)
  {
    case 0:
    case 1:
      return v2;
    case 2:
      v3 = *(a2 - 1);
      v4 = *a1;
      if (*(_DWORD *)(v3 + 40) < *(_DWORD *)(*a1 + 40))
      {
        *a1 = v3;
        *(a2 - 1) = v4;
      }
      return 1;
    case 3:
      v14 = *a1;
      v15 = a1[1];
      v16 = *(_DWORD *)(v15 + 40);
      v17 = *(_DWORD *)(*a1 + 40);
      v18 = *(a2 - 1);
      v19 = *(_DWORD *)(v18 + 40);
      if (v16 >= v17)
      {
        if (v19 < v16)
        {
          a1[1] = v18;
          *(a2 - 1) = v15;
          v41 = *a1;
          v40 = a1[1];
          if (*(_DWORD *)(v40 + 40) < *(_DWORD *)(*a1 + 40))
          {
            *a1 = v40;
            a1[1] = v41;
          }
        }
      }
      else
      {
        if (v19 >= v16)
        {
          *a1 = v15;
          a1[1] = v14;
          v47 = *(a2 - 1);
          if (*(_DWORD *)(v47 + 40) >= v17)
            return 1;
          a1[1] = v47;
        }
        else
        {
          *a1 = v18;
        }
        *(a2 - 1) = v14;
      }
      return 1;
    case 4:
      v20 = a1 + 1;
      v21 = a1[1];
      v22 = a1 + 2;
      v23 = a1[2];
      v24 = *a1;
      v25 = *(_DWORD *)(v21 + 40);
      v26 = *(_DWORD *)(*a1 + 40);
      v27 = *(_DWORD *)(v23 + 40);
      if (v25 < v26)
      {
        v28 = a1;
        v29 = a1 + 2;
        v30 = *a1;
        if (v27 >= v25)
        {
          *a1 = v21;
          a1[1] = v24;
          v28 = a1 + 1;
          v29 = a1 + 2;
          v30 = v24;
          if (v27 >= v26)
            goto LABEL_35;
        }
LABEL_34:
        *v28 = v23;
        *v29 = v24;
        v21 = v30;
        goto LABEL_36;
      }
      if (v27 < v25)
      {
        *v20 = v23;
        *v22 = v21;
        v28 = a1;
        v29 = a1 + 1;
        v30 = v21;
        if (v27 >= v26)
          goto LABEL_36;
        goto LABEL_34;
      }
LABEL_35:
      v21 = v23;
LABEL_36:
      v42 = *(a2 - 1);
      if (*(_DWORD *)(v42 + 40) < *(_DWORD *)(v21 + 40))
      {
        *v22 = v42;
        *(a2 - 1) = v21;
        v43 = *v22;
        v44 = *v20;
        v45 = *(_DWORD *)(v43 + 40);
        if (v45 < *(_DWORD *)(v44 + 40))
        {
          a1[1] = v43;
          a1[2] = v44;
          v46 = *a1;
          if (v45 < *(_DWORD *)(*a1 + 40))
          {
            *a1 = v43;
            a1[1] = v46;
          }
        }
      }
      return 1;
    case 5:
      std::__sort5_maybe_branchless[abi:nn180100]<std::_ClassicAlgPolicy,altitude::ObjectTreeLoader::cleanupModels(void)::OldestFirst &,altitude::ObjectTreeModel::LodLevel **,0>(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1);
      return 1;
    default:
      v6 = a1 + 2;
      v5 = a1[2];
      v7 = a1[1];
      v8 = *a1;
      v9 = *(_DWORD *)(v7 + 40);
      v10 = *(_DWORD *)(*a1 + 40);
      v11 = *(_DWORD *)(v5 + 40);
      if (v9 >= v10)
      {
        if (v11 >= v9)
          goto LABEL_19;
        a1[1] = v5;
        *v6 = v7;
        v12 = a1;
        v13 = a1 + 1;
      }
      else
      {
        v12 = a1;
        v13 = a1 + 2;
        if (v11 < v9)
          goto LABEL_18;
        *a1 = v7;
        a1[1] = v8;
        v12 = a1 + 1;
        v13 = a1 + 2;
      }
      if (v11 >= v10)
        goto LABEL_19;
LABEL_18:
      *v12 = v5;
      *v13 = v8;
LABEL_19:
      v31 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v32 = 0;
      for (i = 24; ; i += 8)
      {
        v35 = *v31;
        v36 = *v6;
        v37 = *(_DWORD *)(*v31 + 40);
        if (v37 < *(_DWORD *)(v36 + 40))
        {
          v38 = i;
          do
          {
            *(uint64_t *)((char *)a1 + v38) = v36;
            v39 = v38 - 8;
            if (v38 == 8)
            {
              v34 = a1;
              goto LABEL_22;
            }
            v36 = *(uint64_t *)((char *)a1 + v38 - 16);
            v38 -= 8;
          }
          while (v37 < *(_DWORD *)(v36 + 40));
          v34 = (uint64_t *)((char *)a1 + v39);
LABEL_22:
          *v34 = v35;
          if (++v32 == 8)
            break;
        }
        v6 = v31++;
        if (v31 == a2)
          return 1;
      }
      return v31 + 1 == a2;
  }
}

void altitude::ObjectTreeLoader::pruneModels(altitude::ObjectTreeLoader *this)
{
  uint64_t v1;
  uint64_t v2;
  altitude::ObjectTreeLoader *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  unsigned int *v18;
  unsigned int v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *p_shared_owners;
  unint64_t v31;
  uint64_t v32;
  unsigned int *v33;
  unsigned int v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  uint64_t v44;
  unsigned int *v45;
  unsigned int v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;

  v1 = *((_QWORD *)this + 21);
  v2 = *((_QWORD *)this + 22);
  if (v1 != v2)
  {
    v3 = this;
    while (1)
    {
      while (*(_DWORD *)(v1 + 40) == -1 && *(_DWORD *)(v1 + 44) == -1)
      {
        v24 = v1 + 48;
        v25 = v1;
        if (v1 + 48 != v2)
        {
          do
          {
            *(_QWORD *)v25 = *(_QWORD *)v24;
            *(_DWORD *)(v25 + 8) = *(_DWORD *)(v24 + 8);
            v27 = *(_QWORD *)(v25 + 16);
            if (v27)
            {
              v28 = *(_QWORD *)(v25 + 24);
              v26 = *(void **)(v25 + 16);
              if (v28 != v27)
              {
                do
                {
                  v29 = *(std::__shared_weak_count **)(v28 - 16);
                  if (v29)
                  {
                    p_shared_owners = (unint64_t *)&v29->__shared_owners_;
                    do
                      v31 = __ldaxr(p_shared_owners);
                    while (__stlxr(v31 - 1, p_shared_owners));
                    if (!v31)
                    {
                      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
                      std::__shared_weak_count::__release_weak(v29);
                    }
                  }
                  *(_QWORD *)(v28 - 48) = &off_1E42C2D08;
                  v32 = *(_QWORD *)(v28 - 40);
                  if (v32)
                  {
                    v33 = (unsigned int *)(v32 + 128);
                    do
                      v34 = __ldaxr(v33);
                    while (__stlxr(v34 - 1, v33));
                  }
                  v35 = *(std::__shared_weak_count **)(v28 - 32);
                  if (v35)
                  {
                    v36 = (unint64_t *)&v35->__shared_owners_;
                    do
                      v37 = __ldaxr(v36);
                    while (__stlxr(v37 - 1, v36));
                    if (!v37)
                    {
                      ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
                      std::__shared_weak_count::__release_weak(v35);
                    }
                  }
                  v28 -= 48;
                }
                while (v28 != v27);
                v26 = *(void **)(v25 + 16);
              }
              *(_QWORD *)(v25 + 24) = v27;
              operator delete(v26);
              *(_QWORD *)(v25 + 32) = 0;
            }
            *(_OWORD *)(v25 + 16) = *(_OWORD *)(v24 + 16);
            *(_QWORD *)(v25 + 32) = *(_QWORD *)(v24 + 32);
            *(_QWORD *)(v24 + 16) = 0;
            *(_QWORD *)(v24 + 24) = 0;
            *(_QWORD *)(v24 + 32) = 0;
            *(_QWORD *)(v25 + 40) = *(_QWORD *)(v24 + 40);
            v24 += 48;
            v25 += 48;
          }
          while (v24 != v2);
          v3 = this;
          v2 = *((_QWORD *)this + 22);
        }
        while (v2 != v25)
        {
          v39 = *(_QWORD *)(v2 - 32);
          if (v39)
          {
            v40 = *(_QWORD *)(v2 - 24);
            v38 = *(void **)(v2 - 32);
            if (v40 != v39)
            {
              do
              {
                v41 = *(std::__shared_weak_count **)(v40 - 16);
                if (v41)
                {
                  v42 = (unint64_t *)&v41->__shared_owners_;
                  do
                    v43 = __ldaxr(v42);
                  while (__stlxr(v43 - 1, v42));
                  if (!v43)
                  {
                    ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
                    std::__shared_weak_count::__release_weak(v41);
                  }
                }
                *(_QWORD *)(v40 - 48) = &off_1E42C2D08;
                v44 = *(_QWORD *)(v40 - 40);
                if (v44)
                {
                  v45 = (unsigned int *)(v44 + 128);
                  do
                    v46 = __ldaxr(v45);
                  while (__stlxr(v46 - 1, v45));
                }
                v47 = *(std::__shared_weak_count **)(v40 - 32);
                if (v47)
                {
                  v48 = (unint64_t *)&v47->__shared_owners_;
                  do
                    v49 = __ldaxr(v48);
                  while (__stlxr(v49 - 1, v48));
                  if (!v49)
                  {
                    ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
                    std::__shared_weak_count::__release_weak(v47);
                  }
                }
                v40 -= 48;
              }
              while (v40 != v39);
              v38 = *(void **)(v2 - 32);
            }
            *(_QWORD *)(v2 - 24) = v39;
            operator delete(v38);
          }
          v2 -= 48;
        }
        *((_QWORD *)v3 + 22) = v25;
        v2 = v25;
        if (v1 == v25)
          return;
      }
      v5 = *(_QWORD *)(v1 + 16);
      v4 = *(_QWORD *)(v1 + 24);
      if (v4 != v5)
        break;
LABEL_4:
      v1 += 48;
      if (v1 == v2)
        return;
    }
    v6 = 0;
    v7 = 0;
    while (*(_DWORD *)(v1 + 40) == v7)
    {
LABEL_10:
      v6 = ++v7;
      if (0xAAAAAAAAAAAAAAABLL * ((v4 - v5) >> 4) <= v7)
      {
        v2 = *((_QWORD *)v3 + 22);
        goto LABEL_4;
      }
    }
    v8 = v5 + 48 * v6;
    v11 = *(_QWORD *)(v8 + 8);
    v10 = (uint64_t *)(v8 + 8);
    v9 = v11;
    if (v11)
    {
      v12 = (unsigned int *)(v9 + 128);
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 - 1, v12));
    }
    v14 = *(std::__shared_weak_count **)(v5 + 48 * v6 + 16);
    *v10 = 0;
    v10[1] = 0;
    if (v14)
    {
      v15 = (unint64_t *)&v14->__shared_owners_;
      do
        v16 = __ldaxr(v15);
      while (__stlxr(v16 - 1, v15));
      if (v16)
      {
        v17 = *v10;
        if (!*v10)
          goto LABEL_24;
LABEL_22:
        v18 = (unsigned int *)(v17 + 128);
        do
          v19 = __ldaxr(v18);
        while (__stlxr(v19 + 1, v18));
        goto LABEL_24;
      }
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
      v17 = *v10;
      if (*v10)
        goto LABEL_22;
    }
LABEL_24:
    v20 = v5 + 48 * v6;
    v21 = *(std::__shared_weak_count **)(v20 + 32);
    *(_QWORD *)(v20 + 24) = 0;
    *(_QWORD *)(v20 + 32) = 0;
    if (v21)
    {
      v22 = (unint64_t *)&v21->__shared_owners_;
      do
        v23 = __ldaxr(v22);
      while (__stlxr(v23 - 1, v22));
      if (!v23)
      {
        ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
        std::__shared_weak_count::__release_weak(v21);
      }
    }
    *(_DWORD *)(v5 + 48 * v6 + 40) = 0;
    v5 = *(_QWORD *)(v1 + 16);
    v4 = *(_QWORD *)(v1 + 24);
    goto LABEL_10;
  }
}

void md::FlyoverMetaDataRequester::~FlyoverMetaDataRequester(md::FlyoverMetaDataRequester *this)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  *(_QWORD *)this = &off_1E42A0790;
  v1 = (std::__shared_weak_count *)*((_QWORD *)this + 4);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  *(_QWORD *)this = &off_1E42A0790;
  v1 = (std::__shared_weak_count *)*((_QWORD *)this + 4);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void md::FlyoverMetaDataRequester::requestDataKeys(QuadTile ***this, const gdc::SelectionContext *a2)
{
  uint64_t *i;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  BOOL v15;
  char v16;
  unsigned __int8 v18;
  int v19;
  unint64_t FileIndexToLoadForKey;
  int v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  uint64_t *j;
  char v26;
  int v27;
  int v28;
  uint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  int v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  char *v39;
  char v40;
  int v41;
  int v42;
  int v43;
  unint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  char *v48;
  char *v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  unsigned __int8 *v53;
  unsigned int v54;
  _QWORD *v55;
  size_t v56;
  char *v57;
  char *v58;
  unint64_t v59;
  _BYTE *v60;
  uint64_t v61;
  __int128 *v62;
  _OWORD *v63;
  unint64_t v64;
  __int128 v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t *v68;
  _QWORD *v69;
  uint64_t v70;
  char v71;
  uint64_t v72;
  _BYTE *v73;
  __int128 *v74;
  _OWORD *v75;
  unint64_t v76;
  __int128 v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t *v80;
  _QWORD *v81;
  uint64_t v82;
  char v83;
  void *__p;
  char *v85;
  gdc::LayerDataCollector *v86;
  uint32x2_t v87;
  uint64_t v88;
  void *v89;
  _QWORD *v90;
  _QWORD *v91;
  uint64_t v92;
  _QWORD v93[5];
  __int128 v94;
  void *v95;
  char v96;
  char v97;
  int v98;
  void *v99;
  char v100;
  __int128 v101;
  char *v102;
  uint64_t v103;
  char v104[32];
  unint64_t v105;
  __int128 v106;
  unint64_t v107;
  uint64_t v108;
  char *v109;
  char *v110;
  uint64_t v111;

  v86 = (gdc::LayerDataCollector *)*((_QWORD *)a2 + 1);
  v109 = 0;
  v110 = 0;
  v111 = 0;
  if (*((_BYTE *)a2 + 82) == 1)
  {
    for (i = *(uint64_t **)(*((_QWORD *)a2 + 9) + 24); i; i = (uint64_t *)*i)
    {
      md::FlyoverRegionManager::Internal::getRegionArea((md::FlyoverRegionManager::Internal *)&v94, *this[3], (uint64_t)(i + 2));
      if (v96)
      {
        v6 = (std::__shared_weak_count *)*((_QWORD *)&v94 + 1);
        v5 = v94;
        v106 = v94;
        if (*((_QWORD *)&v94 + 1))
        {
          v7 = (unint64_t *)(*((_QWORD *)&v94 + 1) + 8);
          do
            v8 = __ldxr(v7);
          while (__stxr(v8 + 1, v7));
          do
            v9 = __ldaxr(v7);
          while (__stlxr(v9 - 1, v7));
          if (!v9)
          {
            ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
            std::__shared_weak_count::__release_weak(v6);
          }
          v5 = v106;
        }
        if (v5)
        {
          v10 = *(_QWORD *)(v5 + 120);
          v11 = *(_QWORD *)(v5 + 128);
          while (v10 != v11)
          {
            v12 = *((unsigned __int8 *)i + 17);
            if (*(_DWORD *)(v10 + 4) <= v12)
            {
              v13 = *(_DWORD *)(v10 + 8);
              v14 = v12 + 2;
              v15 = v13 >= v12;
              v16 = v13 - v12;
              if (v15 && v14 > v13)
              {
                v18 = v13 + 1;
                LOBYTE(v101) = -1;
                BYTE1(v101) = v13 + 1;
                v87 = vshl_u32(*(uint32x2_t *)((char *)i + 20), (uint32x2_t)vdup_n_s32((v16 + 1)));
                *(uint32x2_t *)((char *)&v101 + 4) = v87;
                if (!std::__hash_table<geo::QuadTile,geo::QuadTileHash,std::equal_to<geo::QuadTile>,std::allocator<geo::QuadTile>>::find<geo::QuadTile>((_QWORD *)(*((_QWORD *)a2 + 9) + 8), (unsigned __int8 *)&v101))
                {
                  v19 = 1 << v18;
                  v107 = v18 | ((unint64_t)(~(-1 << v18)
                                                               + (v87.i32[0] % v19 + v19) / v19 * v19
                                                               - (v87.i32[0] % v19
                                                                + v19)) << 32);
                  v108 = ((v87.i32[1] % v19 + v19) % v19);
                  FileIndexToLoadForKey = geo::c3mm::C3mmArea::getFileIndexToLoadForKey(v5, (int *)&v107);
                  if ((_DWORD)FileIndexToLoadForKey != -1)
                  {
                    LOBYTE(v94) = -1;
                    BYTE1(v94) = v18;
                    *(uint32x2_t *)((char *)&v94 + 4) = v87;
                    v96 = -1;
                    v97 = FileIndexToLoadForKey;
                    v98 = ~(-1 << FileIndexToLoadForKey) - HIDWORD(FileIndexToLoadForKey);
                    LODWORD(v99) = v21;
                    std::vector<md::FlyoverMetaDataRequester::requestDataKeys(gdc::SelectionContext const*,BOOL)::TileResourcePair,std::allocator<md::FlyoverMetaDataRequester::requestDataKeys(gdc::SelectionContext const*,BOOL)::TileResourcePair>>::push_back[abi:nn180100]((uint64_t)&v109, (uint64_t)&v94);
                    break;
                  }
                }
              }
            }
            v10 += 12;
          }
        }
      }
      else
      {
        v106 = 0uLL;
      }
      v22 = (std::__shared_weak_count *)*((_QWORD *)&v106 + 1);
      if (*((_QWORD *)&v106 + 1))
      {
        v23 = (unint64_t *)(*((_QWORD *)&v106 + 1) + 8);
        do
          v24 = __ldaxr(v23);
        while (__stlxr(v24 - 1, v23));
        if (!v24)
        {
          ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
          std::__shared_weak_count::__release_weak(v22);
        }
      }
    }
  }
  else
  {
    for (j = *(uint64_t **)(*((_QWORD *)a2 + 8) + 24); j; j = (uint64_t *)*j)
    {
      v26 = *((_BYTE *)j + 17);
      v27 = (*((_DWORD *)j + 5) % (1 << v26) + (1 << v26)) % (1 << v26);
      v28 = *((_DWORD *)j + 6) % (1 << v26) + (1 << v26);
      LOBYTE(v101) = *((_BYTE *)j + 16);
      BYTE1(v101) = v26;
      DWORD1(v101) = v27;
      DWORD2(v101) = v28 % (1 << v26);
      md::FlyoverRegionManager::Internal::getRegionArea((md::FlyoverRegionManager::Internal *)&v94, *this[3], (uint64_t)&v101);
      if (v96)
      {
        v30 = (std::__shared_weak_count *)*((_QWORD *)&v94 + 1);
        v29 = v94;
        v106 = v94;
        if (*((_QWORD *)&v94 + 1))
        {
          v31 = (unint64_t *)(*((_QWORD *)&v94 + 1) + 8);
          do
            v32 = __ldxr(v31);
          while (__stxr(v32 + 1, v31));
          do
            v33 = __ldaxr(v31);
          while (__stlxr(v33 - 1, v31));
          if (!v33)
          {
            ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
            std::__shared_weak_count::__release_weak(v30);
          }
          v29 = v106;
        }
        if (v29)
        {
          v107 = BYTE1(v101) | ((unint64_t)(~(-1 << SBYTE1(v101)) - DWORD1(v101)) << 32);
          v108 = DWORD2(v101);
          v34 = geo::c3mm::C3mmArea::getFileIndexToLoadForKey(v29, (int *)&v107);
          if ((_DWORD)v34 != -1)
          {
            LOWORD(v94) = *((_WORD *)j + 8);
            *(_QWORD *)((char *)&v94 + 4) = *(uint64_t *)((char *)j + 20);
            v96 = -1;
            v97 = v34;
            v98 = ~(-1 << v34) - HIDWORD(v34);
            LODWORD(v99) = v35;
            std::vector<md::FlyoverMetaDataRequester::requestDataKeys(gdc::SelectionContext const*,BOOL)::TileResourcePair,std::allocator<md::FlyoverMetaDataRequester::requestDataKeys(gdc::SelectionContext const*,BOOL)::TileResourcePair>>::push_back[abi:nn180100]((uint64_t)&v109, (uint64_t)&v94);
          }
        }
        v36 = (std::__shared_weak_count *)*((_QWORD *)&v106 + 1);
        if (*((_QWORD *)&v106 + 1))
        {
          v37 = (unint64_t *)(*((_QWORD *)&v106 + 1) + 8);
          do
            v38 = __ldaxr(v37);
          while (__stlxr(v38 - 1, v37));
          if (!v38)
          {
            ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
            std::__shared_weak_count::__release_weak(v36);
          }
        }
      }
      else
      {
        v106 = 0uLL;
      }
    }
  }
  __p = v109;
  v85 = v110;
  if (v109 != v110)
  {
    v39 = v109;
    while (1)
    {
      v40 = v39[1];
      v41 = (*((_DWORD *)v39 + 1) % (1 << v40) + (1 << v40)) % (1 << v40);
      v42 = *((_DWORD *)v39 + 2) % (1 << v40) + (1 << v40);
      LOBYTE(v106) = *v39;
      BYTE1(v106) = v40;
      DWORD1(v106) = v41;
      DWORD2(v106) = v42 % (1 << v40);
      v88 = *(_QWORD *)(v39 + 28);
      v43 = v39[25];
      md::FlyoverRegionManager::Internal::getRegionArea((md::FlyoverRegionManager::Internal *)&v94, *this[3], (uint64_t)&v106);
      if (!v96)
      {
        std::__throw_bad_optional_access[abi:nn180100]();
        __break(1u);
        return;
      }
      v44 = v95 | 0x100000000;
      v45 = (std::__shared_weak_count *)*((_QWORD *)&v94 + 1);
      if (*((_QWORD *)&v94 + 1))
      {
        v46 = (unint64_t *)(*((_QWORD *)&v94 + 1) + 8);
        do
          v47 = __ldaxr(v46);
        while (__stlxr(v47 - 1, v46));
        if (!v47)
        {
          ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
          std::__shared_weak_count::__release_weak(v45);
        }
      }
      *(_QWORD *)&v101 = v104;
      *((_QWORD *)&v101 + 1) = v104;
      v102 = v104;
      v103 = 32;
      v105 = 0;
      LODWORD(v94) = HIDWORD(v88);
      geo::small_vector_base<unsigned char>::insert<unsigned char *>((void **)&v101, v104, (char *)&v94, (char *)&v94 + 4);
      LODWORD(v94) = v88;
      geo::small_vector_base<unsigned char>::insert<unsigned char *>((void **)&v101, *((char **)&v101 + 1), (char *)&v94, (char *)&v94 + 4);
      LODWORD(v94) = v43;
      geo::small_vector_base<unsigned char>::insert<unsigned char *>((void **)&v101, *((char **)&v101 + 1), (char *)&v94, (char *)&v94 + 4);
      LODWORD(v94) = 255;
      geo::small_vector_base<unsigned char>::insert<unsigned char *>((void **)&v101, *((char **)&v101 + 1), (char *)&v94, (char *)&v94 + 4);
      LODWORD(v94) = v44 | ((v44 >> 8) << 8);
      geo::small_vector_base<unsigned char>::insert<unsigned char *>((void **)&v101, *((char **)&v101 + 1), (char *)&v94, (char *)&v94 + 4);
      v48 = (char *)*((_QWORD *)&v101 + 1);
      v49 = (char *)v101;
      v50 = 0;
      v51 = *((_QWORD *)&v101 + 1) - v101;
      if (*((_QWORD *)&v101 + 1) != (_QWORD)v101)
      {
        if (v51 <= 1)
          v52 = 1;
        else
          v52 = *((_QWORD *)&v101 + 1) - v101;
        v53 = (unsigned __int8 *)v101;
        do
        {
          v54 = *v53++;
          v50 ^= (v50 << 6) + (v50 >> 2) - 0x61C8864680B583EBLL + v54;
          --v52;
        }
        while (v52);
      }
      v105 = v50;
      v89 = v93;
      v90 = v93;
      v55 = v93;
      v91 = v93;
      v92 = 32;
      if (v51 >= 0x21)
        break;
LABEL_91:
      if (v48 != v49)
      {
        if (v51 < 8)
        {
          v73 = v55;
        }
        else if ((unint64_t)((char *)v55 - v49) < 0x20)
        {
          v73 = v55;
        }
        else
        {
          if (v51 < 0x20)
          {
            v72 = 0;
LABEL_102:
            v78 = v51 & 0xFFFFFFFFFFFFFFF8;
            v73 = (char *)v55 + (v51 & 0xFFFFFFFFFFFFFFF8);
            v79 = v72 - (v51 & 0xFFFFFFFFFFFFFFF8);
            v80 = (uint64_t *)&v49[v72];
            v81 = (_QWORD *)((char *)v55 + v72);
            do
            {
              v82 = *v80++;
              *v81++ = v82;
              v79 += 8;
            }
            while (v79);
            if (v51 != v78)
            {
              v49 += v78;
              goto LABEL_107;
            }
LABEL_108:
            v55 = v90;
            goto LABEL_109;
          }
          v72 = v51 & 0xFFFFFFFFFFFFFFE0;
          v74 = (__int128 *)(v49 + 16);
          v75 = v55 + 2;
          v76 = v51 & 0xFFFFFFFFFFFFFFE0;
          do
          {
            v77 = *v74;
            *(v75 - 1) = *(v74 - 1);
            *v75 = v77;
            v74 += 2;
            v75 += 2;
            v76 -= 32;
          }
          while (v76);
          if (v51 == v72)
            goto LABEL_108;
          if ((v51 & 0x18) != 0)
            goto LABEL_102;
          v49 += v72;
          v73 = (char *)v55 + v72;
        }
        do
        {
LABEL_107:
          v83 = *v49++;
          *v73++ = v83;
        }
        while (v49 != v48);
        goto LABEL_108;
      }
LABEL_109:
      v90 = (_QWORD *)((char *)v55 + v51);
      v93[4] = v105;
      gdc::LayerDataRequestKey::LayerDataRequestKey((unsigned __int8 *)&v94, 0, 0x4Cu, (uint64_t)&v89, -1073741827);
      if (v89 != v91)
        free(v89);
      gdc::LayerDataCollector::addDataKey(v86, (const gdc::LayerDataRequestKey *)&v94, (const QuadTile *)v39);
      if (v100)
        v100 = 0;
      if (v95 != v99)
        free(v95);
      if ((char *)v101 != v102)
        free((void *)v101);
      v39 += 48;
      if (v39 == v85)
        goto LABEL_117;
    }
    if (v51 <= 0x40)
      v56 = 64;
    else
      v56 = *((_QWORD *)&v101 + 1) - v101;
    v55 = malloc_type_malloc(v56, 0x100004077774924uLL);
    v57 = (char *)v89;
    v58 = (char *)v90;
    if (v89 == v90)
    {
LABEL_90:
      v89 = v55;
      v90 = v55;
      v92 = v56;
      goto LABEL_91;
    }
    v59 = (char *)v90 - (_BYTE *)v89;
    if ((unint64_t)((char *)v90 - (_BYTE *)v89) < 8)
    {
      v60 = v55;
    }
    else
    {
      v60 = v55;
      if ((unint64_t)((char *)v55 - (_BYTE *)v89) >= 0x20)
      {
        if (v59 < 0x20)
        {
          v61 = 0;
LABEL_84:
          v66 = v59 & 0xFFFFFFFFFFFFFFF8;
          v60 = (char *)v55 + (v59 & 0xFFFFFFFFFFFFFFF8);
          v67 = v61 - (v59 & 0xFFFFFFFFFFFFFFF8);
          v68 = (uint64_t *)&v57[v61];
          v69 = (_QWORD *)((char *)v55 + v61);
          do
          {
            v70 = *v68++;
            *v69++ = v70;
            v67 += 8;
          }
          while (v67);
          if (v59 == v66)
            goto LABEL_90;
          v57 += v66;
          goto LABEL_89;
        }
        v61 = v59 & 0xFFFFFFFFFFFFFFE0;
        v62 = (__int128 *)((char *)v89 + 16);
        v63 = v55 + 2;
        v64 = v59 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          v65 = *v62;
          *(v63 - 1) = *(v62 - 1);
          *v63 = v65;
          v62 += 2;
          v63 += 2;
          v64 -= 32;
        }
        while (v64);
        if (v59 == v61)
          goto LABEL_90;
        if ((v59 & 0x18) != 0)
          goto LABEL_84;
        v57 += v61;
        v60 = (char *)v55 + v61;
      }
    }
    do
    {
LABEL_89:
      v71 = *v57++;
      *v60++ = v71;
    }
    while (v57 != v58);
    goto LABEL_90;
  }
LABEL_117:
  if (__p)
    operator delete(__p);
}

void sub_19F90D1D0(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v3;

  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](v1 - 152);
  v3 = *(void **)(v1 - 112);
  if (!v3)
    _Unwind_Resume(a1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::vector<md::FlyoverMetaDataRequester::requestDataKeys(gdc::SelectionContext const*,BOOL)::TileResourcePair,std::allocator<md::FlyoverMetaDataRequester::requestDataKeys(gdc::SelectionContext const*,BOOL)::TileResourcePair>>::push_back[abi:nn180100](uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  _WORD *v5;
  char *v6;
  _WORD *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  char *v16;

  v5 = *(_WORD **)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  if ((unint64_t)v5 >= v4)
  {
    v7 = *(_WORD **)a1;
    v8 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v5 - *(_QWORD *)a1) >> 4);
    v9 = v8 + 1;
    if (v8 + 1 > 0x555555555555555)
      std::__throw_bad_array_new_length[abi:nn180100]();
    v10 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v4 - (_QWORD)v7) >> 4);
    if (2 * v10 > v9)
      v9 = 2 * v10;
    if (v10 >= 0x2AAAAAAAAAAAAAALL)
      v11 = 0x555555555555555;
    else
      v11 = v9;
    if (v11 > 0x555555555555555)
      std::__throw_bad_array_new_length[abi:nn180100]();
    v12 = 48 * v11;
    v13 = (char *)operator new(48 * v11);
    v14 = &v13[48 * v8];
    *(_WORD *)v14 = *(_WORD *)a2;
    *(_QWORD *)(v14 + 4) = *(_QWORD *)(a2 + 4);
    *((_WORD *)v14 + 12) = *(_WORD *)(a2 + 24);
    *(_QWORD *)(v14 + 28) = *(_QWORD *)(a2 + 28);
    v6 = v14 + 48;
    if (v5 != v7)
    {
      v15 = 0;
      do
      {
        v16 = &v14[v15 * 2];
        *((_WORD *)v16 - 24) = v5[v15 - 24];
        *(_QWORD *)(v16 - 44) = *(_QWORD *)&v5[v15 - 22];
        *((_WORD *)v16 - 12) = v5[v15 - 12];
        *(_QWORD *)(v16 - 20) = *(_QWORD *)&v5[v15 - 10];
        v15 -= 24;
      }
      while (&v5[v15] != v7);
      v14 += v15 * 2;
    }
    *(_QWORD *)a1 = v14;
    *(_QWORD *)(a1 + 8) = v6;
    *(_QWORD *)(a1 + 16) = &v13[v12];
    if (v7)
      operator delete(v7);
  }
  else
  {
    *v5 = *(_WORD *)a2;
    *(_QWORD *)(v5 + 2) = *(_QWORD *)(a2 + 4);
    v5[12] = *(_WORD *)(a2 + 24);
    *(_QWORD *)(v5 + 14) = *(_QWORD *)(a2 + 28);
    v6 = (char *)(v5 + 24);
  }
  *(_QWORD *)(a1 + 8) = v6;
}

void md::ARAppLocationProvider::~ARAppLocationProvider(md::ARAppLocationProvider *this)
{
  JUMPOUT(0x1A1AF4E00);
}

double md::ARAppLocationProvider::update(uint64_t a1, md::LayoutContext *this)
{
  uint64_t v3;
  double result;

  md::LayoutContext::frameState(this);
  result = *(double *)(v3 + 72);
  *(float64x2_t *)(a1 + 24) = vmulq_f64(*(float64x2_t *)(v3 + 56), (float64x2_t)vdupq_n_s64(0x404CA5DC1A63C1F8uLL));
  *(double *)(a1 + 40) = result;
  return result;
}

uint64_t md::ARAppLocationProvider::location(md::ARAppLocationProvider *this)
{
  return (uint64_t)this + 24;
}

void sub_19F90D56C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_19F90D738(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19F90D814(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19F90D878(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19F90D904(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19F90DBA4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_19F90DCA0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void md::LabelClusterBuilder::findClosestPair(_QWORD *a1, unint64_t a2, unint64_t a3, double *a4, _QWORD *a5, uint64_t **a6)
{
  unint64_t v9;
  unint64_t v11;
  unint64_t v12;
  double v13;
  uint64_t v14;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  long double v23;
  long double v24;
  long double v25;
  double v26;
  double v27;
  __double2 v28;
  long double v29;
  long double v30;
  long double v31;
  float64x2_t v32;
  uint64_t v33;
  long double v34;
  long double v35;
  long double v36;
  double v37;
  double v38;
  __double2 v39;
  long double v40;
  long double v41;
  long double v42;
  float64x2_t v43;
  float64x2_t v44;
  double v45;
  unint64_t v46;
  unint64_t v47;
  double v48;
  unsigned __int8 v49;
  unsigned __int8 v50;
  char *v51;
  unint64_t v52;
  char *v53;
  uint64_t v54;
  char *v55;
  char *v56;
  char *v57;
  unint64_t v58;
  double v59;
  double v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  unint64_t v73;
  char *v74;
  char *v75;
  uint64_t v76;
  unint64_t v77;
  char *v78;
  char *v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  char *v83;
  char *v84;
  uint64_t v85;
  __int128 v86;
  uint64_t v87;
  char *v88;
  char *v89;
  uint64_t v90;
  __int128 v91;
  unsigned __int8 v92;
  uint64_t *v93;
  uint64_t *v94;
  char *v95;
  char *v96;
  unint64_t v97;
  uint64_t v98;
  uint64_t v99;
  unint64_t v100;
  unint64_t v101;
  uint64_t v102;
  uint64_t v103;
  char *v104;
  char *v105;
  unint64_t v106;
  char *v107;
  uint64_t v108;
  uint64_t v109;
  char *v110;
  char *v111;
  uint64_t v112;
  __int128 v113;
  uint64_t v114;
  unint64_t v115;
  double v116;
  unint64_t v117;
  uint64_t *v118;
  double v119;
  uint64_t v121;
  uint64_t v122;
  uint64_t *v123;
  unint64_t v124;
  uint64_t v125;
  int v126;
  long double v127;
  long double v128;
  long double v129;
  double v130;
  double v131;
  __double2 v132;
  long double v133;
  long double v134;
  long double v135;
  float64x2_t v136;
  double v137;
  double v138;
  long double v139;
  long double v140;
  long double v141;
  double v142;
  double v143;
  __double2 v144;
  long double v145;
  long double v146;
  long double v147;
  float64x2_t v148;
  long double v149;
  long double v150;
  long double v151;
  double v152;
  double v153;
  double v154;
  __double2 v155;
  long double v156;
  long double v157;
  long double v158;
  double v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  unint64_t v163;
  unint64_t v164;
  unint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  _QWORD *v169;
  unint64_t v170;
  unint64_t v171;
  unint64_t v172;
  unint64_t v173;
  _QWORD *v174;
  float64x2_t v175;
  long double v176;
  long double v177;
  md::LabelPoint *v178;
  float64x2_t v179;
  float64x2_t v180;
  unint64_t v181;
  long double v182;
  long double v183;
  float64x2_t v185;
  char *v186;
  char *v187;
  char *v188;
  char *v189;
  char *v190;
  uint64_t v191;
  char *v192;
  char *v193;
  char *v194;
  uint64_t v195;

  v9 = a2;
  v11 = a3 - a2;
  if (a3 - a2 <= 4)
  {
    if (v11 >= 2)
    {
      v12 = a3 - 1;
      if (a3 - 1 > a2)
      {
        v13 = *a4 * *a4;
        v14 = *a1;
        __asm { FMOV            V0.2D, #0.5 }
        v180 = _Q0;
        v185 = (float64x2_t)vdupq_n_s64(0x3FC45F306DC9C883uLL);
        do
        {
          v20 = v9++;
          if (v9 < a3)
          {
            v21 = *(_QWORD *)(v14 + 8 * v20);
            v22 = v9;
            do
            {
              if (!*(_BYTE *)(v21 + 61) && *(_BYTE *)(v21 + 62))
              {
                v23 = *(double *)(v21 + 16);
                v24 = *(double *)(v21 + 24);
                v25 = *(double *)(v21 + 32);
                v26 = sqrt(v23 * v23 + v24 * v24);
                v27 = atan2(v25, v26 * 0.996647189);
                v176 = atan2(v24, v23);
                v28 = __sincos_stret(v27);
                v29 = atan2(v25 + v28.__sinval * v28.__sinval * 42841.3115 * v28.__sinval, v26 + v28.__cosval * v28.__cosval * -42697.6727 * v28.__cosval);
                v30 = tan(v29 * 0.5 + 0.785398163);
                v31 = log(v30);
                v32.f64[0] = v176;
                v32.f64[1] = v31;
                *(float64x2_t *)(v21 + 40) = vmlaq_f64(v180, v185, v32);
                *(_BYTE *)(v21 + 61) = 1;
              }
              v33 = *(_QWORD *)(v14 + 8 * v22);
              if (!*(_BYTE *)(v33 + 61) && *(_BYTE *)(v33 + 62))
              {
                v34 = *(double *)(v33 + 16);
                v35 = *(double *)(v33 + 24);
                v36 = *(double *)(v33 + 32);
                v37 = sqrt(v34 * v34 + v35 * v35);
                v38 = atan2(v36, v37 * 0.996647189);
                v177 = atan2(v35, v34);
                v39 = __sincos_stret(v38);
                v40 = atan2(v36 + v39.__sinval * v39.__sinval * 42841.3115 * v39.__sinval, v37 + v39.__cosval * v39.__cosval * -42697.6727 * v39.__cosval);
                v41 = tan(v40 * 0.5 + 0.785398163);
                v42 = log(v41);
                v43.f64[0] = v177;
                v43.f64[1] = v42;
                *(float64x2_t *)(v33 + 40) = vmlaq_f64(v180, v185, v43);
                *(_BYTE *)(v33 + 61) = 1;
              }
              v44 = vsubq_f64(*(float64x2_t *)(v21 + 40), *(float64x2_t *)(v33 + 40));
              v45 = vaddvq_f64(vmulq_f64(v44, v44));
              if (v45 < v13)
              {
                *a5 = v21;
                a5[1] = v33;
                *a4 = sqrt(v45);
                v13 = v45;
              }
              ++v22;
            }
            while (v22 < a3);
          }
        }
        while (v9 != v12);
      }
    }
    return;
  }
  v46 = v11 >> 1;
  v47 = (v11 >> 1) + a2;
  v173 = *(_QWORD *)(*a1 + 8 * v47);
  v178 = (md::LabelPoint *)(v173 + 16);
  v48 = *(double *)md::LabelPoint::mercatorPoint((md::LabelPoint *)(v173 + 16));
  v192 = 0;
  v193 = 0;
  v194 = 0;
  {
    v160 = operator new();
    mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v160, "VectorKitLabels", 0x5ED09DD50000000FLL);
  }
  v171 = v9;
  v167 = mdm::Allocator::instance(void)::alloc;
  v195 = mdm::Allocator::instance(void)::alloc;
  v188 = 0;
  v189 = 0;
  v190 = 0;
  {
    v161 = operator new();
    mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v161, "VectorKitLabels", 0x5ED09DD50000000FLL);
  }
  v168 = mdm::Allocator::instance(void)::alloc;
  v191 = mdm::Allocator::instance(void)::alloc;
  v181 = v11;
  if (v11 >> 62
    || (v51 = (char *)(*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)v167 + 16))(v167, 8 * v46, 8), v192 = v51, v193 = v51, v187 = &v51[8 * v46], v194 = v187, v52 = v11 - v46, (v11 - v46) >> 61))
  {
    abort();
  }
  v53 = (char *)(*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)v168 + 16))(v168, 8 * v52, 8);
  v163 = a3;
  v165 = v47;
  v169 = a1;
  v54 = 0;
  v188 = v53;
  v189 = v53;
  v186 = &v53[8 * v52];
  v190 = v186;
  v55 = v53;
  v56 = v51;
  v174 = a5;
  do
  {
    v58 = (*a6)[v54];
    v59 = *(double *)md::LabelPoint::mercatorPoint((md::LabelPoint *)(v58 + 16));
    if (v59 == *(double *)md::LabelPoint::mercatorPoint(v178))
    {
      if (v58 < v173)
        goto LABEL_27;
    }
    else
    {
      v60 = *(double *)md::LabelPoint::mercatorPoint((md::LabelPoint *)(v58 + 16));
      if (v60 < *(double *)md::LabelPoint::mercatorPoint(v178))
      {
LABEL_27:
        if (v51 >= v187)
        {
          v61 = (v51 - v56) >> 3;
          v62 = v61 + 1;
          if ((unint64_t)(v61 + 1) >> 61)
            goto LABEL_147;
          if ((v187 - v56) >> 2 > v62)
            v62 = (v187 - v56) >> 2;
          if ((unint64_t)(v187 - v56) >= 0x7FFFFFFFFFFFFFF8)
            v63 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v63 = v62;
          if (v63)
          {
            v64 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v167 + 16))(v167, 8 * v63, 8);
            v65 = (char *)(v64 + 8 * v61);
            v66 = v64 + 8 * v63;
            if (v64)
              *(_QWORD *)v65 = v58;
          }
          else
          {
            v66 = 0;
            v65 = (char *)(8 * v61);
          }
          a5 = v174;
          if (v51 == v56)
          {
            v57 = v51;
            v56 = v65;
            v51 = v65 + 8;
            if (v57)
              goto LABEL_23;
          }
          else
          {
            v73 = v51 - v56 - 8;
            if (v73 < 0x138
              || &v65[-(v73 & 0xFFFFFFFFFFFFFFF8) - 8] > v65 - 8
              || &v51[-(v73 & 0xFFFFFFFFFFFFFFF8) - 8] > v51 - 8
              || (unint64_t)(v51 - v65) < 0x20)
            {
              v74 = v51;
              v75 = v65;
            }
            else
            {
              v82 = (v73 >> 3) + 1;
              v74 = &v51[-8 * (v82 & 0x3FFFFFFFFFFFFFFCLL)];
              v83 = v65 - 16;
              v84 = v51 - 16;
              v85 = v82 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v86 = *(_OWORD *)v84;
                *((_OWORD *)v83 - 1) = *((_OWORD *)v84 - 1);
                *(_OWORD *)v83 = v86;
                v83 -= 32;
                v84 -= 32;
                v85 -= 4;
              }
              while (v85);
              v75 = &v65[-8 * (v82 & 0x3FFFFFFFFFFFFFFCLL)];
              if (v82 == (v82 & 0x3FFFFFFFFFFFFFFCLL))
                goto LABEL_59;
            }
            do
            {
              v76 = *((_QWORD *)v74 - 1);
              v74 -= 8;
              *((_QWORD *)v75 - 1) = v76;
              v75 -= 8;
            }
            while (v74 != v56);
LABEL_59:
            v57 = v56;
            v56 = v75;
            v51 = v65 + 8;
            if (v57)
            {
LABEL_23:
              (*(void (**)(uint64_t, char *, int64_t))(*(_QWORD *)v167 + 40))(v167, v57, v187 - v57);
              v187 = (char *)v66;
              goto LABEL_24;
            }
          }
          v187 = (char *)v66;
          goto LABEL_24;
        }
        if (v51)
          *(_QWORD *)v51 = v58;
        v51 += 8;
        goto LABEL_24;
      }
    }
    if (v53 >= v186)
    {
      v67 = (v53 - v55) >> 3;
      v68 = v67 + 1;
      if ((unint64_t)(v67 + 1) >> 61)
      {
LABEL_147:
        v190 = v186;
        v194 = v187;
        v192 = v56;
        abort();
      }
      if ((v186 - v55) >> 2 > v68)
        v68 = (v186 - v55) >> 2;
      if ((unint64_t)(v186 - v55) >= 0x7FFFFFFFFFFFFFF8)
        v69 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v69 = v68;
      if (v69)
      {
        v70 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v168 + 16))(v168, 8 * v69, 8);
        v71 = (char *)(v70 + 8 * v67);
        v72 = v70 + 8 * v69;
        if (v70)
          *(_QWORD *)v71 = v58;
      }
      else
      {
        v72 = 0;
        v71 = (char *)(8 * v67);
      }
      a5 = v174;
      if (v53 != v55)
      {
        v77 = v53 - v55 - 8;
        if (v77 < 0x138
          || &v71[-(v77 & 0xFFFFFFFFFFFFFFF8) - 8] > v71 - 8
          || &v53[-(v77 & 0xFFFFFFFFFFFFFFF8) - 8] > v53 - 8
          || (unint64_t)(v53 - v71) < 0x20)
        {
          v78 = v53;
          v79 = v71;
        }
        else
        {
          v87 = (v77 >> 3) + 1;
          v78 = &v53[-8 * (v87 & 0x3FFFFFFFFFFFFFFCLL)];
          v88 = v71 - 16;
          v89 = v53 - 16;
          v90 = v87 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v91 = *(_OWORD *)v89;
            *((_OWORD *)v88 - 1) = *((_OWORD *)v89 - 1);
            *(_OWORD *)v88 = v91;
            v88 -= 32;
            v89 -= 32;
            v90 -= 4;
          }
          while (v90);
          v79 = &v71[-8 * (v87 & 0x3FFFFFFFFFFFFFFCLL)];
          if (v87 == (v87 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_66:
            v81 = v55;
            v55 = v79;
            v53 = v71 + 8;
            if (v81)
              goto LABEL_67;
            goto LABEL_68;
          }
        }
        do
        {
          v80 = *((_QWORD *)v78 - 1);
          v78 -= 8;
          *((_QWORD *)v79 - 1) = v80;
          v79 -= 8;
        }
        while (v78 != v55);
        goto LABEL_66;
      }
      v81 = v53;
      v55 = v71;
      v53 = v71 + 8;
      if (v81)
LABEL_67:
        (*(void (**)(uint64_t, char *, int64_t))(*(_QWORD *)v168 + 40))(v168, v81, v186 - v81);
LABEL_68:
      v186 = (char *)v72;
      goto LABEL_24;
    }
    if (v53)
      *(_QWORD *)v53 = v58;
    v53 += 8;
LABEL_24:
    ++v54;
  }
  while (v54 != v181);
  v189 = v53;
  v190 = v186;
  v188 = v55;
  v193 = v51;
  v194 = v187;
  v192 = v56;
  md::LabelClusterBuilder::findClosestPair(v169, v171, v165, a4, a5, &v192);
  md::LabelClusterBuilder::findClosestPair(v169, v165, v163, a4, a5, &v188);
  {
    v162 = operator new();
    mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v162, "VectorKitLabels", 0x5ED09DD50000000FLL);
  }
  v93 = *a6;
  v94 = a6[1];
  if (*a6 == v94)
    goto LABEL_142;
  v95 = 0;
  v96 = 0;
  v97 = 0;
  v166 = mdm::Allocator::instance(void)::alloc;
  while (2)
  {
    v98 = *v93;
    if (vabdd_f64(*(double *)md::LabelPoint::mercatorPoint((md::LabelPoint *)(*v93 + 16)), v48) < *a4)
    {
      if ((unint64_t)v95 < v97)
      {
        if (v95)
          *(_QWORD *)v95 = v98;
        v95 += 8;
        goto LABEL_89;
      }
      v99 = (v95 - v96) >> 3;
      v100 = v99 + 1;
      if ((unint64_t)(v99 + 1) >> 61)
        abort();
      v101 = v97 - (_QWORD)v96;
      if ((uint64_t)(v97 - (_QWORD)v96) >> 2 > v100)
        v100 = (uint64_t)(v97 - (_QWORD)v96) >> 2;
      if (v101 >= 0x7FFFFFFFFFFFFFF8)
        v102 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v102 = v100;
      if (v102)
      {
        v103 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v166 + 16))(v166, 8 * v102, 8);
        v104 = (char *)(v103 + 8 * v99);
        v97 = v103 + 8 * v102;
        if (v103)
          *(_QWORD *)v104 = v98;
      }
      else
      {
        v97 = 0;
        v104 = (char *)(8 * v99);
      }
      a5 = v174;
      v105 = v104;
      if (v95 != v96)
      {
        v106 = v95 - v96 - 8;
        if (v106 < 0x138
          || &v104[-(v106 & 0xFFFFFFFFFFFFFFF8) - 8] > v104 - 8
          || &v95[-(v106 & 0xFFFFFFFFFFFFFFF8) - 8] > v95 - 8
          || (unint64_t)(v95 - v104) < 0x20)
        {
          v107 = v95;
          v105 = v104;
        }
        else
        {
          v109 = (v106 >> 3) + 1;
          v107 = &v95[-8 * (v109 & 0x3FFFFFFFFFFFFFFCLL)];
          v110 = v104 - 16;
          v111 = v95 - 16;
          v112 = v109 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v113 = *(_OWORD *)v111;
            *((_OWORD *)v110 - 1) = *((_OWORD *)v111 - 1);
            *(_OWORD *)v110 = v113;
            v110 -= 32;
            v111 -= 32;
            v112 -= 4;
          }
          while (v112);
          v105 = &v104[-8 * (v109 & 0x3FFFFFFFFFFFFFFCLL)];
          if (v109 == (v109 & 0x3FFFFFFFFFFFFFFCLL))
            goto LABEL_108;
        }
        do
        {
          v108 = *((_QWORD *)v107 - 1);
          v107 -= 8;
          *((_QWORD *)v105 - 1) = v108;
          v105 -= 8;
        }
        while (v107 != v96);
      }
LABEL_108:
      v95 = v104 + 8;
      if (v96)
        (*(void (**)(uint64_t, char *, unint64_t))(*(_QWORD *)v166 + 40))(v166, v96, v101);
      v96 = v105;
    }
LABEL_89:
    if (++v93 != v94)
      continue;
    break;
  }
  if (v95 != v96)
  {
    v164 = v97;
    v114 = 0;
    v115 = (v95 - v96) >> 3;
    v116 = *a4 * *a4;
    v117 = v115 - 1;
    v172 = v115;
    if (v115 <= 1)
      v115 = 1;
    v170 = v115;
    v118 = (uint64_t *)(v96 + 8);
    v119 = 0.5;
    __asm { FMOV            V0.2D, #0.5 }
    v175 = _Q0;
    v179 = (float64x2_t)vdupq_n_s64(0x3FC45F306DC9C883uLL);
    while (1)
    {
      v121 = v114 + 1;
      if (v114 + 1 < v172)
        break;
LABEL_122:
      --v117;
      ++v118;
      v114 = v121;
      if (v121 == v170)
      {
        v97 = v164;
        goto LABEL_140;
      }
    }
    v122 = *(_QWORD *)&v96[8 * v114];
    v123 = v118;
    v124 = v117;
    while (2)
    {
      v125 = *v123;
      v126 = *(unsigned __int8 *)(*v123 + 61);
      if (!*(_BYTE *)(*v123 + 61))
      {
        v126 = *(unsigned __int8 *)(v125 + 62);
        if (*(_BYTE *)(v125 + 62))
        {
          v127 = *(double *)(v125 + 16);
          v128 = *(double *)(v125 + 24);
          v129 = *(double *)(v125 + 32);
          v130 = sqrt(v127 * v127 + v128 * v128);
          v131 = atan2(v129, v130 * 0.996647189);
          v182 = atan2(v128, v127);
          v132 = __sincos_stret(v131);
          v133 = atan2(v129 + v132.__sinval * v132.__sinval * 42841.3115 * v132.__sinval, v130 + v132.__cosval * v132.__cosval * -42697.6727 * v132.__cosval);
          v134 = tan(v133 * v119 + 0.785398163);
          v135 = log(v134);
          v136.f64[0] = v182;
          v136.f64[1] = v135;
          *(float64x2_t *)(v125 + 40) = vmlaq_f64(v175, v179, v136);
          v126 = 1;
          *(_BYTE *)(v125 + 61) = 1;
        }
      }
      v137 = *(double *)(v125 + 48);
      if (*(_BYTE *)(v122 + 61) || !*(_BYTE *)(v122 + 62))
      {
        v138 = *(double *)(v122 + 48);
        if (v137 - v138 >= *a4)
          goto LABEL_122;
        if (v126)
          goto LABEL_137;
      }
      else
      {
        v149 = *(double *)(v122 + 16);
        v150 = *(double *)(v122 + 24);
        v151 = *(double *)(v122 + 32);
        v152 = sqrt(v149 * v149 + v150 * v150);
        v153 = atan2(v151, v152 * 0.996647189);
        v154 = atan2(v150, v149);
        v155 = __sincos_stret(v153);
        v156 = v152 + v155.__cosval * v155.__cosval * -42697.6727 * v155.__cosval;
        v119 = 0.5;
        v157 = atan2(v151 + v155.__sinval * v155.__sinval * 42841.3115 * v155.__sinval, v156);
        v158 = tan(v157 * 0.5 + 0.785398163);
        v138 = log(v158) * 0.159154943 + 0.5;
        *(double *)(v122 + 40) = v154 * 0.159154943 + 0.5;
        *(double *)(v122 + 48) = v138;
        *(_BYTE *)(v122 + 61) = 1;
        if (v137 - v138 >= *a4)
          goto LABEL_122;
        if (*(_BYTE *)(v125 + 61))
        {
LABEL_137:
          v159 = (*(double *)(v122 + 40) - *(double *)(v125 + 40)) * (*(double *)(v122 + 40) - *(double *)(v125 + 40))
               + (v138 - *(double *)(v125 + 48)) * (v138 - *(double *)(v125 + 48));
          if (v159 < v116)
          {
            *a5 = v122;
            a5[1] = v125;
            *a4 = sqrt(v159);
            v116 = v159;
          }
          ++v123;
          if (!--v124)
            goto LABEL_122;
          continue;
        }
      }
      break;
    }
    if (*(_BYTE *)(v125 + 62))
    {
      v139 = *(double *)(v125 + 16);
      v140 = *(double *)(v125 + 24);
      v141 = *(double *)(v125 + 32);
      v142 = sqrt(v139 * v139 + v140 * v140);
      v143 = atan2(v141, v142 * 0.996647189);
      v183 = atan2(v140, v139);
      v144 = __sincos_stret(v143);
      v145 = atan2(v141 + v144.__sinval * v144.__sinval * 42841.3115 * v144.__sinval, v142 + v144.__cosval * v144.__cosval * -42697.6727 * v144.__cosval);
      v146 = tan(v145 * v119 + 0.785398163);
      v147 = log(v146);
      v148.f64[0] = v183;
      v148.f64[1] = v147;
      *(float64x2_t *)(v125 + 40) = vmlaq_f64(v175, v179, v148);
      *(_BYTE *)(v125 + 61) = 1;
      v138 = *(double *)(v122 + 48);
    }
    goto LABEL_137;
  }
LABEL_140:
  if (v96)
    (*(void (**)(uint64_t, char *, unint64_t))(*(_QWORD *)v166 + 40))(v166, v96, v97 - (_QWORD)v96);
LABEL_142:
  if (v188)
    (*(void (**)(uint64_t, char *, int64_t))(*(_QWORD *)v168 + 40))(v168, v188, v190 - v188);
  if (v192)
    (*(void (**)(uint64_t, char *, int64_t))(*(_QWORD *)v167 + 40))(v167, v192, v194 - v192);
}

void sub_19F90EA68(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35)
{
  uint64_t v35;
  uint64_t v37;

  if (v35)
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a11 + 40))(a11, v35, a10 - v35);
  if (a28)
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a13 + 40))(a13, a28, a30 - a28);
    v37 = a32;
    if (!a32)
LABEL_5:
      _Unwind_Resume(exception_object);
  }
  else
  {
    v37 = a32;
    if (!a32)
      goto LABEL_5;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a35 + 40))(a35, v37, a34 - v37);
  _Unwind_Resume(exception_object);
}

uint64_t std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::LabelClusterBuilder::ClusterNodeSorterByY &,md::ClusterNode **>(unint64_t *a1, unint64_t *a2, unint64_t *a3)
{
  unint64_t *v4;
  unint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  md::LabelPoint *v8;
  double v9;
  unint64_t v10;
  unint64_t v11;
  md::LabelPoint *v12;
  double v13;
  uint64_t result;
  double v15;
  unint64_t v16;
  unint64_t v17;
  md::LabelPoint *v18;
  double v19;
  double v20;
  unint64_t v21;
  unint64_t v22;
  md::LabelPoint *v23;
  double v24;
  double v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  md::LabelPoint *v29;
  double v30;
  unint64_t v31;
  double v32;
  double v33;

  v4 = a2;
  v5 = a1;
  v6 = *a2;
  v7 = *a1;
  v8 = (md::LabelPoint *)(*a2 + 16);
  v9 = *(double *)(md::LabelPoint::mercatorPoint(v8) + 8);
  if (v9 == *(double *)(md::LabelPoint::mercatorPoint((md::LabelPoint *)(v7 + 16)) + 8))
  {
    if (v6 < v7)
      goto LABEL_3;
LABEL_7:
    v16 = *a3;
    v17 = *v4;
    v18 = (md::LabelPoint *)(*a3 + 16);
    v19 = *(double *)(md::LabelPoint::mercatorPoint(v18) + 8);
    result = md::LabelPoint::mercatorPoint((md::LabelPoint *)(v17 + 16));
    if (v19 == *(double *)(result + 8))
    {
      if (v16 >= v17)
        return result;
    }
    else
    {
      v25 = *(double *)(md::LabelPoint::mercatorPoint(v18) + 8);
      result = md::LabelPoint::mercatorPoint((md::LabelPoint *)(v17 + 16));
      if (v25 >= *(double *)(result + 8))
        return result;
    }
    v26 = *v4;
    *v4 = *a3;
    *a3 = v26;
    v27 = *v4;
    v28 = *v5;
    v29 = (md::LabelPoint *)(*v4 + 16);
    v30 = *(double *)(md::LabelPoint::mercatorPoint(v29) + 8);
    result = md::LabelPoint::mercatorPoint((md::LabelPoint *)(v28 + 16));
    if (v30 == *(double *)(result + 8))
    {
      if (v27 >= v28)
        return result;
    }
    else
    {
      v33 = *(double *)(md::LabelPoint::mercatorPoint(v29) + 8);
      result = md::LabelPoint::mercatorPoint((md::LabelPoint *)(v28 + 16));
      if (v33 >= *(double *)(result + 8))
        return result;
    }
    goto LABEL_17;
  }
  v15 = *(double *)(md::LabelPoint::mercatorPoint(v8) + 8);
  if (v15 >= *(double *)(md::LabelPoint::mercatorPoint((md::LabelPoint *)(v7 + 16)) + 8))
    goto LABEL_7;
LABEL_3:
  v10 = *a3;
  v11 = *v4;
  v12 = (md::LabelPoint *)(*a3 + 16);
  v13 = *(double *)(md::LabelPoint::mercatorPoint(v12) + 8);
  result = md::LabelPoint::mercatorPoint((md::LabelPoint *)(v11 + 16));
  if (v13 == *(double *)(result + 8))
  {
    if (v10 < v11)
    {
LABEL_5:
      v4 = a3;
      goto LABEL_17;
    }
  }
  else
  {
    v20 = *(double *)(md::LabelPoint::mercatorPoint(v12) + 8);
    result = md::LabelPoint::mercatorPoint((md::LabelPoint *)(v11 + 16));
    if (v20 < *(double *)(result + 8))
      goto LABEL_5;
  }
  v21 = *v5;
  *v5 = *v4;
  *v4 = v21;
  v22 = *a3;
  v23 = (md::LabelPoint *)(*a3 + 16);
  v24 = *(double *)(md::LabelPoint::mercatorPoint(v23) + 8);
  result = md::LabelPoint::mercatorPoint((md::LabelPoint *)(v21 + 16));
  if (v24 == *(double *)(result + 8))
  {
    v5 = v4;
    v4 = a3;
    if (v22 >= v21)
      return result;
    goto LABEL_17;
  }
  v32 = *(double *)(md::LabelPoint::mercatorPoint(v23) + 8);
  result = md::LabelPoint::mercatorPoint((md::LabelPoint *)(v21 + 16));
  v5 = v4;
  v4 = a3;
  if (v32 < *(double *)(result + 8))
  {
LABEL_17:
    v31 = *v5;
    *v5 = *v4;
    *v4 = v31;
  }
  return result;
}

uint64_t std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,md::LabelClusterBuilder::ClusterNodeSorterByY &,md::ClusterNode **>(unint64_t *a1, unint64_t *a2, unint64_t *a3, unint64_t *a4)
{
  unint64_t v8;
  unint64_t v9;
  md::LabelPoint *v10;
  double v11;
  uint64_t result;
  double v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  md::LabelPoint *v17;
  double v18;
  double v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  md::LabelPoint *v23;
  double v24;
  unint64_t v25;
  double v26;

  std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::LabelClusterBuilder::ClusterNodeSorterByY &,md::ClusterNode **>(a1, a2, a3);
  v8 = *a4;
  v9 = *a3;
  v10 = (md::LabelPoint *)(*a4 + 16);
  v11 = *(double *)(md::LabelPoint::mercatorPoint(v10) + 8);
  result = md::LabelPoint::mercatorPoint((md::LabelPoint *)(v9 + 16));
  if (v11 == *(double *)(result + 8))
  {
    if (v8 >= v9)
      return result;
  }
  else
  {
    v13 = *(double *)(md::LabelPoint::mercatorPoint(v10) + 8);
    result = md::LabelPoint::mercatorPoint((md::LabelPoint *)(v9 + 16));
    if (v13 >= *(double *)(result + 8))
      return result;
  }
  v14 = *a3;
  *a3 = *a4;
  *a4 = v14;
  v15 = *a3;
  v16 = *a2;
  v17 = (md::LabelPoint *)(*a3 + 16);
  v18 = *(double *)(md::LabelPoint::mercatorPoint(v17) + 8);
  result = md::LabelPoint::mercatorPoint((md::LabelPoint *)(v16 + 16));
  if (v18 == *(double *)(result + 8))
  {
    if (v15 >= v16)
      return result;
  }
  else
  {
    v19 = *(double *)(md::LabelPoint::mercatorPoint(v17) + 8);
    result = md::LabelPoint::mercatorPoint((md::LabelPoint *)(v16 + 16));
    if (v19 >= *(double *)(result + 8))
      return result;
  }
  v20 = *a2;
  *a2 = *a3;
  *a3 = v20;
  v21 = *a2;
  v22 = *a1;
  v23 = (md::LabelPoint *)(*a2 + 16);
  v24 = *(double *)(md::LabelPoint::mercatorPoint(v23) + 8);
  result = md::LabelPoint::mercatorPoint((md::LabelPoint *)(v22 + 16));
  if (v24 == *(double *)(result + 8))
  {
    if (v21 >= v22)
      return result;
  }
  else
  {
    v26 = *(double *)(md::LabelPoint::mercatorPoint(v23) + 8);
    result = md::LabelPoint::mercatorPoint((md::LabelPoint *)(v22 + 16));
    if (v26 >= *(double *)(result + 8))
      return result;
  }
  v25 = *a1;
  *a1 = *a2;
  *a2 = v25;
  return result;
}

uint64_t std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,md::LabelClusterBuilder::ClusterNodeSorterByY &,md::ClusterNode **>(unint64_t *a1, unint64_t *a2, unint64_t *a3, unint64_t *a4, unint64_t *a5)
{
  unint64_t v10;
  unint64_t v11;
  md::LabelPoint *v12;
  double v13;
  uint64_t result;
  double v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  md::LabelPoint *v19;
  double v20;
  double v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  md::LabelPoint *v25;
  double v26;
  double v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  md::LabelPoint *v31;
  double v32;
  unint64_t v33;
  double v34;

  std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,md::LabelClusterBuilder::ClusterNodeSorterByY &,md::ClusterNode **>(a1, a2, a3, a4);
  v10 = *a5;
  v11 = *a4;
  v12 = (md::LabelPoint *)(*a5 + 16);
  v13 = *(double *)(md::LabelPoint::mercatorPoint(v12) + 8);
  result = md::LabelPoint::mercatorPoint((md::LabelPoint *)(v11 + 16));
  if (v13 == *(double *)(result + 8))
  {
    if (v10 >= v11)
      return result;
  }
  else
  {
    v15 = *(double *)(md::LabelPoint::mercatorPoint(v12) + 8);
    result = md::LabelPoint::mercatorPoint((md::LabelPoint *)(v11 + 16));
    if (v15 >= *(double *)(result + 8))
      return result;
  }
  v16 = *a4;
  *a4 = *a5;
  *a5 = v16;
  v17 = *a4;
  v18 = *a3;
  v19 = (md::LabelPoint *)(*a4 + 16);
  v20 = *(double *)(md::LabelPoint::mercatorPoint(v19) + 8);
  result = md::LabelPoint::mercatorPoint((md::LabelPoint *)(v18 + 16));
  if (v20 == *(double *)(result + 8))
  {
    if (v17 >= v18)
      return result;
  }
  else
  {
    v21 = *(double *)(md::LabelPoint::mercatorPoint(v19) + 8);
    result = md::LabelPoint::mercatorPoint((md::LabelPoint *)(v18 + 16));
    if (v21 >= *(double *)(result + 8))
      return result;
  }
  v22 = *a3;
  *a3 = *a4;
  *a4 = v22;
  v23 = *a3;
  v24 = *a2;
  v25 = (md::LabelPoint *)(*a3 + 16);
  v26 = *(double *)(md::LabelPoint::mercatorPoint(v25) + 8);
  result = md::LabelPoint::mercatorPoint((md::LabelPoint *)(v24 + 16));
  if (v26 == *(double *)(result + 8))
  {
    if (v23 >= v24)
      return result;
  }
  else
  {
    v27 = *(double *)(md::LabelPoint::mercatorPoint(v25) + 8);
    result = md::LabelPoint::mercatorPoint((md::LabelPoint *)(v24 + 16));
    if (v27 >= *(double *)(result + 8))
      return result;
  }
  v28 = *a2;
  *a2 = *a3;
  *a3 = v28;
  v29 = *a2;
  v30 = *a1;
  v31 = (md::LabelPoint *)(*a2 + 16);
  v32 = *(double *)(md::LabelPoint::mercatorPoint(v31) + 8);
  result = md::LabelPoint::mercatorPoint((md::LabelPoint *)(v30 + 16));
  if (v32 == *(double *)(result + 8))
  {
    if (v29 >= v30)
      return result;
  }
  else
  {
    v34 = *(double *)(md::LabelPoint::mercatorPoint(v31) + 8);
    result = md::LabelPoint::mercatorPoint((md::LabelPoint *)(v30 + 16));
    if (v34 >= *(double *)(result + 8))
      return result;
  }
  v33 = *a1;
  *a1 = *a2;
  *a2 = v33;
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,md::LabelClusterBuilder::ClusterNodeSorterByY &,md::ClusterNode **>(unint64_t *a1, unint64_t *a2)
{
  unint64_t *v2;
  uint64_t v4;
  _BOOL8 result;
  unint64_t v6;
  unint64_t v7;
  double v8;
  unint64_t *v9;
  unint64_t *v10;
  uint64_t v11;
  int v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  md::LabelPoint *v16;
  double v17;
  double v18;
  unint64_t v19;
  uint64_t v20;
  double v21;
  unint64_t v22;
  double v23;
  double v24;
  unint64_t v25;
  unint64_t *v26;
  int v27;

  v2 = a2;
  v4 = a2 - a1;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = *(a2 - 1);
      v7 = *a1;
      v8 = *(double *)(md::LabelPoint::mercatorPoint((md::LabelPoint *)(v6 + 16)) + 8);
      if (v8 == *(double *)(md::LabelPoint::mercatorPoint((md::LabelPoint *)(v7 + 16)) + 8))
      {
        if (v6 >= v7)
          return 1;
      }
      else
      {
        v24 = *(double *)(md::LabelPoint::mercatorPoint((md::LabelPoint *)(v6 + 16)) + 8);
        if (v24 >= *(double *)(md::LabelPoint::mercatorPoint((md::LabelPoint *)(v7 + 16)) + 8))
          return 1;
      }
      v25 = *a1;
      *a1 = *(v2 - 1);
      *(v2 - 1) = v25;
      return 1;
    case 3:
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::LabelClusterBuilder::ClusterNodeSorterByY &,md::ClusterNode **>(a1, a1 + 1, a2 - 1);
      return 1;
    case 4:
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,md::LabelClusterBuilder::ClusterNodeSorterByY &,md::ClusterNode **>(a1, a1 + 1, a1 + 2, a2 - 1);
      return 1;
    case 5:
      std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,md::LabelClusterBuilder::ClusterNodeSorterByY &,md::ClusterNode **>(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1);
      return 1;
    default:
      v9 = a1 + 2;
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::LabelClusterBuilder::ClusterNodeSorterByY &,md::ClusterNode **>(a1, a1 + 1, a1 + 2);
      v10 = a1 + 3;
      if (a1 + 3 == v2)
        return 1;
      v11 = 0;
      v12 = 0;
      v26 = v2;
      break;
  }
  while (2)
  {
    v14 = *v10;
    v15 = *v9;
    v16 = (md::LabelPoint *)(*v10 + 16);
    v17 = *(double *)(md::LabelPoint::mercatorPoint(v16) + 8);
    if (v17 == *(double *)(md::LabelPoint::mercatorPoint((md::LabelPoint *)(v15 + 16)) + 8))
    {
      if (v14 >= v15)
        goto LABEL_10;
    }
    else
    {
      v18 = *(double *)(md::LabelPoint::mercatorPoint(v16) + 8);
      if (v18 >= *(double *)(md::LabelPoint::mercatorPoint((md::LabelPoint *)(v15 + 16)) + 8))
        goto LABEL_10;
    }
    v19 = *v10;
    *v10 = *v9;
    v13 = a1;
    if (v9 == a1)
      goto LABEL_9;
    v27 = v12;
    v20 = v11;
    while (1)
    {
      v22 = *(unint64_t *)((char *)a1 + v20 + 8);
      v23 = *(double *)(md::LabelPoint::mercatorPoint((md::LabelPoint *)(v19 + 16)) + 8);
      if (v23 != *(double *)(md::LabelPoint::mercatorPoint((md::LabelPoint *)(v22 + 16)) + 8))
        break;
      if (v19 >= v22)
      {
        v13 = v9;
        goto LABEL_8;
      }
LABEL_18:
      --v9;
      *(unint64_t *)((char *)a1 + v20 + 16) = *(unint64_t *)((char *)a1 + v20 + 8);
      v20 -= 8;
      if (v20 == -16)
      {
        v13 = a1;
        goto LABEL_8;
      }
    }
    v21 = *(double *)(md::LabelPoint::mercatorPoint((md::LabelPoint *)(v19 + 16)) + 8);
    if (v21 < *(double *)(md::LabelPoint::mercatorPoint((md::LabelPoint *)(v22 + 16)) + 8))
      goto LABEL_18;
    v13 = (unint64_t *)((char *)a1 + v20 + 16);
LABEL_8:
    v2 = v26;
    v12 = v27;
LABEL_9:
    *v13 = v19;
    if (++v12 == 8)
      return v10 + 1 == v2;
LABEL_10:
    v9 = v10;
    v11 += 8;
    if (++v10 != v2)
      continue;
    return 1;
  }
}

double *std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::LabelClusterBuilder::ClusterNodeSorterByX &,md::ClusterNode **>(unint64_t *a1, unint64_t *a2, unint64_t *a3)
{
  unint64_t *v4;
  unint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  md::LabelPoint *v8;
  double v9;
  unint64_t v10;
  unint64_t v11;
  md::LabelPoint *v12;
  double v13;
  double *result;
  double v15;
  unint64_t v16;
  unint64_t v17;
  md::LabelPoint *v18;
  double v19;
  double v20;
  unint64_t v21;
  unint64_t v22;
  md::LabelPoint *v23;
  double v24;
  double v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  md::LabelPoint *v29;
  double v30;
  unint64_t v31;
  double v32;
  double v33;

  v4 = a2;
  v5 = a1;
  v6 = *a2;
  v7 = *a1;
  v8 = (md::LabelPoint *)(*a2 + 16);
  v9 = *(double *)md::LabelPoint::mercatorPoint(v8);
  if (v9 == *(double *)md::LabelPoint::mercatorPoint((md::LabelPoint *)(v7 + 16)))
  {
    if (v6 < v7)
      goto LABEL_3;
LABEL_7:
    v16 = *a3;
    v17 = *v4;
    v18 = (md::LabelPoint *)(*a3 + 16);
    v19 = *(double *)md::LabelPoint::mercatorPoint(v18);
    result = (double *)md::LabelPoint::mercatorPoint((md::LabelPoint *)(v17 + 16));
    if (v19 == *result)
    {
      if (v16 >= v17)
        return result;
    }
    else
    {
      v25 = *(double *)md::LabelPoint::mercatorPoint(v18);
      result = (double *)md::LabelPoint::mercatorPoint((md::LabelPoint *)(v17 + 16));
      if (v25 >= *result)
        return result;
    }
    v26 = *v4;
    *v4 = *a3;
    *a3 = v26;
    v27 = *v4;
    v28 = *v5;
    v29 = (md::LabelPoint *)(*v4 + 16);
    v30 = *(double *)md::LabelPoint::mercatorPoint(v29);
    result = (double *)md::LabelPoint::mercatorPoint((md::LabelPoint *)(v28 + 16));
    if (v30 == *result)
    {
      if (v27 >= v28)
        return result;
    }
    else
    {
      v33 = *(double *)md::LabelPoint::mercatorPoint(v29);
      result = (double *)md::LabelPoint::mercatorPoint((md::LabelPoint *)(v28 + 16));
      if (v33 >= *result)
        return result;
    }
    goto LABEL_17;
  }
  v15 = *(double *)md::LabelPoint::mercatorPoint(v8);
  if (v15 >= *(double *)md::LabelPoint::mercatorPoint((md::LabelPoint *)(v7 + 16)))
    goto LABEL_7;
LABEL_3:
  v10 = *a3;
  v11 = *v4;
  v12 = (md::LabelPoint *)(*a3 + 16);
  v13 = *(double *)md::LabelPoint::mercatorPoint(v12);
  result = (double *)md::LabelPoint::mercatorPoint((md::LabelPoint *)(v11 + 16));
  if (v13 == *result)
  {
    if (v10 < v11)
    {
LABEL_5:
      v4 = a3;
      goto LABEL_17;
    }
  }
  else
  {
    v20 = *(double *)md::LabelPoint::mercatorPoint(v12);
    result = (double *)md::LabelPoint::mercatorPoint((md::LabelPoint *)(v11 + 16));
    if (v20 < *result)
      goto LABEL_5;
  }
  v21 = *v5;
  *v5 = *v4;
  *v4 = v21;
  v22 = *a3;
  v23 = (md::LabelPoint *)(*a3 + 16);
  v24 = *(double *)md::LabelPoint::mercatorPoint(v23);
  result = (double *)md::LabelPoint::mercatorPoint((md::LabelPoint *)(v21 + 16));
  if (v24 == *result)
  {
    v5 = v4;
    v4 = a3;
    if (v22 >= v21)
      return result;
    goto LABEL_17;
  }
  v32 = *(double *)md::LabelPoint::mercatorPoint(v23);
  result = (double *)md::LabelPoint::mercatorPoint((md::LabelPoint *)(v21 + 16));
  v5 = v4;
  v4 = a3;
  if (v32 < *result)
  {
LABEL_17:
    v31 = *v5;
    *v5 = *v4;
    *v4 = v31;
  }
  return result;
}

double *std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,md::LabelClusterBuilder::ClusterNodeSorterByX &,md::ClusterNode **>(unint64_t *a1, unint64_t *a2, unint64_t *a3, unint64_t *a4)
{
  unint64_t v8;
  unint64_t v9;
  md::LabelPoint *v10;
  double v11;
  double *result;
  double v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  md::LabelPoint *v17;
  double v18;
  double v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  md::LabelPoint *v23;
  double v24;
  unint64_t v25;
  double v26;

  std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::LabelClusterBuilder::ClusterNodeSorterByX &,md::ClusterNode **>(a1, a2, a3);
  v8 = *a4;
  v9 = *a3;
  v10 = (md::LabelPoint *)(*a4 + 16);
  v11 = *(double *)md::LabelPoint::mercatorPoint(v10);
  result = (double *)md::LabelPoint::mercatorPoint((md::LabelPoint *)(v9 + 16));
  if (v11 == *result)
  {
    if (v8 >= v9)
      return result;
  }
  else
  {
    v13 = *(double *)md::LabelPoint::mercatorPoint(v10);
    result = (double *)md::LabelPoint::mercatorPoint((md::LabelPoint *)(v9 + 16));
    if (v13 >= *result)
      return result;
  }
  v14 = *a3;
  *a3 = *a4;
  *a4 = v14;
  v15 = *a3;
  v16 = *a2;
  v17 = (md::LabelPoint *)(*a3 + 16);
  v18 = *(double *)md::LabelPoint::mercatorPoint(v17);
  result = (double *)md::LabelPoint::mercatorPoint((md::LabelPoint *)(v16 + 16));
  if (v18 == *result)
  {
    if (v15 >= v16)
      return result;
  }
  else
  {
    v19 = *(double *)md::LabelPoint::mercatorPoint(v17);
    result = (double *)md::LabelPoint::mercatorPoint((md::LabelPoint *)(v16 + 16));
    if (v19 >= *result)
      return result;
  }
  v20 = *a2;
  *a2 = *a3;
  *a3 = v20;
  v21 = *a2;
  v22 = *a1;
  v23 = (md::LabelPoint *)(*a2 + 16);
  v24 = *(double *)md::LabelPoint::mercatorPoint(v23);
  result = (double *)md::LabelPoint::mercatorPoint((md::LabelPoint *)(v22 + 16));
  if (v24 == *result)
  {
    if (v21 >= v22)
      return result;
  }
  else
  {
    v26 = *(double *)md::LabelPoint::mercatorPoint(v23);
    result = (double *)md::LabelPoint::mercatorPoint((md::LabelPoint *)(v22 + 16));
    if (v26 >= *result)
      return result;
  }
  v25 = *a1;
  *a1 = *a2;
  *a2 = v25;
  return result;
}

double *std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,md::LabelClusterBuilder::ClusterNodeSorterByX &,md::ClusterNode **>(unint64_t *a1, unint64_t *a2, unint64_t *a3, unint64_t *a4, unint64_t *a5)
{
  unint64_t v10;
  unint64_t v11;
  md::LabelPoint *v12;
  double v13;
  double *result;
  double v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  md::LabelPoint *v19;
  double v20;
  double v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  md::LabelPoint *v25;
  double v26;
  double v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  md::LabelPoint *v31;
  double v32;
  unint64_t v33;
  double v34;

  std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,md::LabelClusterBuilder::ClusterNodeSorterByX &,md::ClusterNode **>(a1, a2, a3, a4);
  v10 = *a5;
  v11 = *a4;
  v12 = (md::LabelPoint *)(*a5 + 16);
  v13 = *(double *)md::LabelPoint::mercatorPoint(v12);
  result = (double *)md::LabelPoint::mercatorPoint((md::LabelPoint *)(v11 + 16));
  if (v13 == *result)
  {
    if (v10 >= v11)
      return result;
  }
  else
  {
    v15 = *(double *)md::LabelPoint::mercatorPoint(v12);
    result = (double *)md::LabelPoint::mercatorPoint((md::LabelPoint *)(v11 + 16));
    if (v15 >= *result)
      return result;
  }
  v16 = *a4;
  *a4 = *a5;
  *a5 = v16;
  v17 = *a4;
  v18 = *a3;
  v19 = (md::LabelPoint *)(*a4 + 16);
  v20 = *(double *)md::LabelPoint::mercatorPoint(v19);
  result = (double *)md::LabelPoint::mercatorPoint((md::LabelPoint *)(v18 + 16));
  if (v20 == *result)
  {
    if (v17 >= v18)
      return result;
  }
  else
  {
    v21 = *(double *)md::LabelPoint::mercatorPoint(v19);
    result = (double *)md::LabelPoint::mercatorPoint((md::LabelPoint *)(v18 + 16));
    if (v21 >= *result)
      return result;
  }
  v22 = *a3;
  *a3 = *a4;
  *a4 = v22;
  v23 = *a3;
  v24 = *a2;
  v25 = (md::LabelPoint *)(*a3 + 16);
  v26 = *(double *)md::LabelPoint::mercatorPoint(v25);
  result = (double *)md::LabelPoint::mercatorPoint((md::LabelPoint *)(v24 + 16));
  if (v26 == *result)
  {
    if (v23 >= v24)
      return result;
  }
  else
  {
    v27 = *(double *)md::LabelPoint::mercatorPoint(v25);
    result = (double *)md::LabelPoint::mercatorPoint((md::LabelPoint *)(v24 + 16));
    if (v27 >= *result)
      return result;
  }
  v28 = *a2;
  *a2 = *a3;
  *a3 = v28;
  v29 = *a2;
  v30 = *a1;
  v31 = (md::LabelPoint *)(*a2 + 16);
  v32 = *(double *)md::LabelPoint::mercatorPoint(v31);
  result = (double *)md::LabelPoint::mercatorPoint((md::LabelPoint *)(v30 + 16));
  if (v32 == *result)
  {
    if (v29 >= v30)
      return result;
  }
  else
  {
    v34 = *(double *)md::LabelPoint::mercatorPoint(v31);
    result = (double *)md::LabelPoint::mercatorPoint((md::LabelPoint *)(v30 + 16));
    if (v34 >= *result)
      return result;
  }
  v33 = *a1;
  *a1 = *a2;
  *a2 = v33;
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,md::LabelClusterBuilder::ClusterNodeSorterByX &,md::ClusterNode **>(unint64_t *a1, unint64_t *a2)
{
  unint64_t *v2;
  uint64_t v4;
  _BOOL8 result;
  unint64_t v6;
  unint64_t v7;
  double v8;
  unint64_t *v9;
  unint64_t *v10;
  uint64_t v11;
  int v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  md::LabelPoint *v16;
  double v17;
  double v18;
  unint64_t v19;
  uint64_t v20;
  double v21;
  unint64_t v22;
  double v23;
  double v24;
  unint64_t v25;
  unint64_t *v26;
  int v27;

  v2 = a2;
  v4 = a2 - a1;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = *(a2 - 1);
      v7 = *a1;
      v8 = *(double *)md::LabelPoint::mercatorPoint((md::LabelPoint *)(v6 + 16));
      if (v8 == *(double *)md::LabelPoint::mercatorPoint((md::LabelPoint *)(v7 + 16)))
      {
        if (v6 >= v7)
          return 1;
      }
      else
      {
        v24 = *(double *)md::LabelPoint::mercatorPoint((md::LabelPoint *)(v6 + 16));
        if (v24 >= *(double *)md::LabelPoint::mercatorPoint((md::LabelPoint *)(v7 + 16)))
          return 1;
      }
      v25 = *a1;
      *a1 = *(v2 - 1);
      *(v2 - 1) = v25;
      return 1;
    case 3:
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::LabelClusterBuilder::ClusterNodeSorterByX &,md::ClusterNode **>(a1, a1 + 1, a2 - 1);
      return 1;
    case 4:
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,md::LabelClusterBuilder::ClusterNodeSorterByX &,md::ClusterNode **>(a1, a1 + 1, a1 + 2, a2 - 1);
      return 1;
    case 5:
      std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,md::LabelClusterBuilder::ClusterNodeSorterByX &,md::ClusterNode **>(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1);
      return 1;
    default:
      v9 = a1 + 2;
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::LabelClusterBuilder::ClusterNodeSorterByX &,md::ClusterNode **>(a1, a1 + 1, a1 + 2);
      v10 = a1 + 3;
      if (a1 + 3 == v2)
        return 1;
      v11 = 0;
      v12 = 0;
      v26 = v2;
      break;
  }
  while (2)
  {
    v14 = *v10;
    v15 = *v9;
    v16 = (md::LabelPoint *)(*v10 + 16);
    v17 = *(double *)md::LabelPoint::mercatorPoint(v16);
    if (v17 == *(double *)md::LabelPoint::mercatorPoint((md::LabelPoint *)(v15 + 16)))
    {
      if (v14 >= v15)
        goto LABEL_10;
    }
    else
    {
      v18 = *(double *)md::LabelPoint::mercatorPoint(v16);
      if (v18 >= *(double *)md::LabelPoint::mercatorPoint((md::LabelPoint *)(v15 + 16)))
        goto LABEL_10;
    }
    v19 = *v10;
    *v10 = *v9;
    v13 = a1;
    if (v9 == a1)
      goto LABEL_9;
    v27 = v12;
    v20 = v11;
    while (1)
    {
      v22 = *(unint64_t *)((char *)a1 + v20 + 8);
      v23 = *(double *)md::LabelPoint::mercatorPoint((md::LabelPoint *)(v19 + 16));
      if (v23 != *(double *)md::LabelPoint::mercatorPoint((md::LabelPoint *)(v22 + 16)))
        break;
      if (v19 >= v22)
      {
        v13 = v9;
        goto LABEL_8;
      }
LABEL_18:
      --v9;
      *(unint64_t *)((char *)a1 + v20 + 16) = *(unint64_t *)((char *)a1 + v20 + 8);
      v20 -= 8;
      if (v20 == -16)
      {
        v13 = a1;
        goto LABEL_8;
      }
    }
    v21 = *(double *)md::LabelPoint::mercatorPoint((md::LabelPoint *)(v19 + 16));
    if (v21 < *(double *)md::LabelPoint::mercatorPoint((md::LabelPoint *)(v22 + 16)))
      goto LABEL_18;
    v13 = (unint64_t *)((char *)a1 + v20 + 16);
LABEL_8:
    v2 = v26;
    v12 = v27;
LABEL_9:
    *v13 = v19;
    if (++v12 == 8)
      return v10 + 1 == v2;
LABEL_10:
    v9 = v10;
    v11 += 8;
    if (++v10 != v2)
      continue;
    return 1;
  }
}

void md::ARCameraImageRenderLayer::~ARCameraImageRenderLayer(md::ARCameraImageRenderLayer *this)
{
  md::ARCameraImageRenderLayer::~ARCameraImageRenderLayer(this);
  JUMPOUT(0x1A1AF4E00);
}

{
  _QWORD *v2;
  unint64_t v3;
  void (***v4)(void);
  void (**v5)(void);
  _QWORD **v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  void *v19;

  *(_QWORD *)this = &off_1E42A0050;
  v2 = (_QWORD *)*((_QWORD *)this + 13);
  do
  {
    if (v2[1])
    {
      v3 = 0;
      v4 = (void (***)(void))(v2 + 2);
      do
      {
        v5 = *v4;
        v4 += 15;
        (*v5)();
        ++v3;
      }
      while (v3 < v2[1]);
    }
    v2[1] = 0;
    v2 = (_QWORD *)*v2;
  }
  while (v2);
  v6 = (_QWORD **)*((_QWORD *)this + 13);
  *((_QWORD *)this + 14) = v6;
  v7 = *v6;
  *v6 = 0;
  if (v7)
  {
    do
    {
      v8 = (_QWORD *)*v7;
      free(v7);
      v7 = v8;
    }
    while (v8);
    v6 = (_QWORD **)*((_QWORD *)this + 13);
  }
  free(v6);
  v9 = *((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = 0;
  if (v9)
  {
    v10 = ggl::FragmentedPool<ggl::BuildingFlat::CompressedMeshPipelineSetup>::~FragmentedPool(v9);
    MEMORY[0x1A1AF4E00](v10, 0x10A0C40D234DDC7);
  }
  v11 = (std::__shared_weak_count *)*((_QWORD *)this + 11);
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  v14 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v14)
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  v15 = (std::__shared_weak_count *)*((_QWORD *)this + 8);
  if (v15)
  {
    v16 = (unint64_t *)&v15->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  v18 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v18)
    MEMORY[0x1A1AF4E00](v18, 0x1000C4049ECCB0CLL);
  *(_QWORD *)this = off_1E428C468;
  v19 = (void *)*((_QWORD *)this + 1);
  if (v19)
  {
    *((_QWORD *)this + 2) = v19;
    operator delete(v19);
  }
}

unint64_t md::ARCameraImageRenderLayer::layout(unint64_t this, const md::LayoutContext *a2, double a3, double a4, double a5)
{
  uint64_t v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t *v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  _OWORD *v25;
  __int128 *v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  unint64_t v34;
  void (***v35)(void);
  void (**v36)(void);
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  int8x8_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  _QWORD *v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  _QWORD *v60;
  _QWORD *v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  _QWORD *v67;
  _QWORD *v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  double v75;
  double v76;
  float v77;
  unint64_t v78;
  double v79;
  double v80;
  BOOL v81;
  double v82;
  double v83;
  double v84;
  BOOL v85;
  double v86;
  double v87;
  double v88;
  double v89;
  CGFloat v90;
  float a;
  float c;
  float tx;
  float b;
  float d;
  float ty;
  CGFloat v97;
  CGFloat v98;
  CGFloat v99;
  CGFloat v100;
  uint64_t v101;
  CGFloat v102;
  ggl::RenderItem *v103;
  CGAffineTransform v104;
  uint64_t v105;
  int v106;
  __int128 v107;
  __int128 v108;
  int64x2_t v109;
  uint64_t v110;
  CGAffineTransform v111;
  CGAffineTransform v112;
  CGAffineTransform v113;
  CGAffineTransform v114;

  v6 = this;
  v7 = *(uint64_t **)(this + 96);
  v8 = (uint64_t *)v7[4];
  v9 = (uint64_t *)v7[5];
  if (v8 != v9)
  {
    v10 = (_QWORD *)v7[1];
    while (1)
    {
      v11 = *v8;
      v12 = v7[2];
      if ((unint64_t)v10 >= v12)
        break;
      if (v10)
        *v10 = v11;
      ++v10;
LABEL_4:
      v7[1] = (uint64_t)v10;
      if (++v8 == v9)
      {
        v31 = v7[4];
        if (v31 != v7[5])
          v7[5] = v31;
        goto LABEL_33;
      }
    }
    v13 = ((uint64_t)v10 - *v7) >> 3;
    if ((unint64_t)(v13 + 1) >> 61)
      abort();
    v14 = v12 - *v7;
    v15 = v14 >> 2;
    if (v14 >> 2 <= (unint64_t)(v13 + 1))
      v15 = v13 + 1;
    if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF8)
      v16 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v16 = v15;
    if (v16)
    {
      v17 = 8 * v16;
      this = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v7[3] + 16))(v7[3], 8 * v16, 8);
      v18 = (_QWORD *)(this + 8 * v13);
      v16 = this + v17;
      if (this)
        *v18 = v11;
    }
    else
    {
      v18 = (_QWORD *)(8 * v13);
    }
    v20 = *v7;
    v19 = v7[1];
    v21 = v19 - *v7;
    if (v19 == *v7)
    {
      v23 = v18;
      goto LABEL_29;
    }
    v22 = v21 - 8;
    if ((unint64_t)(v21 - 8) < 0x38)
    {
      v23 = v18;
    }
    else
    {
      v23 = v18;
      if ((unint64_t)(v19 - (_QWORD)v18) >= 0x20)
      {
        v24 = (v22 >> 3) + 1;
        v25 = v18 - 2;
        v26 = (__int128 *)(v19 - 16);
        v27 = v24 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v28 = *v26;
          *(v25 - 1) = *(v26 - 1);
          *v25 = v28;
          v25 -= 2;
          v26 -= 2;
          v27 -= 4;
        }
        while (v27);
        v23 = &v18[-(v24 & 0x3FFFFFFFFFFFFFFCLL)];
        v19 -= 8 * (v24 & 0x3FFFFFFFFFFFFFFCLL);
        if (v24 == (v24 & 0x3FFFFFFFFFFFFFFCLL))
          goto LABEL_28;
      }
    }
    do
    {
      v29 = *(_QWORD *)(v19 - 8);
      v19 -= 8;
      *--v23 = v29;
    }
    while (v19 != v20);
LABEL_28:
    v19 = *v7;
LABEL_29:
    v10 = v18 + 1;
    *v7 = (uint64_t)v23;
    v7[1] = (uint64_t)(v18 + 1);
    v30 = v7[2];
    v7[2] = v16;
    if (v19)
      this = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v7[3] + 40))(v7[3], v19, v30 - v19);
    goto LABEL_4;
  }
LABEL_33:
  v32 = *(_QWORD **)(v6 + 104);
  if (v32)
  {
    do
    {
      if (v32[1])
      {
        v34 = 0;
        v35 = (void (***)(void))(v32 + 2);
        do
        {
          v36 = *v35;
          v35 += 15;
          (*v36)();
          ++v34;
          this = (unint64_t)v35;
        }
        while (v34 < v32[1]);
      }
      v32[1] = 0;
      v32 = (_QWORD *)*v32;
    }
    while (v32);
    v33 = *(_QWORD *)(v6 + 104);
  }
  else
  {
    v33 = 0;
  }
  *(_QWORD *)(v6 + 112) = v33;
  v37 = *(_QWORD **)(*(_QWORD *)(*(_QWORD *)(v6 + 40) + 24) + 8);
  v38 = v37[3];
  v39 = v37[4];
  v40 = v39 - v38;
  if (v39 == v38)
    goto LABEL_48;
  v41 = 0;
  v42 = v40 >> 3;
  while (1)
  {
    v43 = *(_QWORD *)(v38 + 8 * v41);
    if (!*(_BYTE *)v43)
    {
      v44 = *(_QWORD *)(v43 + 8);
      v45 = v37[15];
      if (v44 < (v37[16] - v45) >> 3)
        break;
    }
    if (++v41 >= v42)
      goto LABEL_48;
  }
  v46 = *(_QWORD *)(v45 + 8 * v44);
  if (!v46)
LABEL_48:
    v47 = 0;
  else
    v47 = *(_QWORD *)(*(_QWORD *)(v46 + 24) + 32);
  *(_QWORD *)(v47 + 32) = *(_QWORD *)(v6 + 48);
  v48 = (uint64_t *)*((_QWORD *)a2 + 1);
  v49 = (int8x8_t)v48[1];
  if (!*(_QWORD *)&v49)
    return this;
  v50 = (unint64_t)vcnt_s8(v49);
  LOWORD(v50) = vaddlv_u8((uint8x8_t)v50);
  if (v50 > 1uLL)
  {
    v51 = 0x1AF456233693CD46;
    if (*(_QWORD *)&v49 <= 0x1AF456233693CD46uLL)
      v51 = 0x1AF456233693CD46uLL % *(_QWORD *)&v49;
  }
  else
  {
    v51 = (*(_QWORD *)&v49 - 1) & 0x1AF456233693CD46;
  }
  v52 = *v48;
  v53 = *(_QWORD **)(v52 + 8 * v51);
  if (!v53)
    goto LABEL_72;
  v54 = (_QWORD *)*v53;
  if (!v54)
    goto LABEL_72;
  if (v50 < 2uLL)
  {
    while (1)
    {
      v56 = v54[1];
      if (v56 == 0x1AF456233693CD46)
      {
        if (v54[2] == 0x1AF456233693CD46)
          goto LABEL_70;
      }
      else if ((v56 & (*(_QWORD *)&v49 - 1)) != v51)
      {
        goto LABEL_72;
      }
      v54 = (_QWORD *)*v54;
      if (!v54)
        goto LABEL_72;
    }
  }
  while (1)
  {
    v55 = v54[1];
    if (v55 == 0x1AF456233693CD46)
      break;
    if (v55 >= *(_QWORD *)&v49)
      v55 %= *(_QWORD *)&v49;
    if (v55 != v51)
      goto LABEL_72;
LABEL_59:
    v54 = (_QWORD *)*v54;
    if (!v54)
      goto LABEL_72;
  }
  if (v54[2] != 0x1AF456233693CD46)
    goto LABEL_59;
LABEL_70:
  v57 = v54[5];
  if (*(_QWORD *)(v57 + 8) == 0x1AF456233693CD46)
  {
    v58 = *(_QWORD *)(v57 + 32);
    goto LABEL_73;
  }
LABEL_72:
  v58 = 0;
LABEL_73:
  if (v50 > 1uLL)
  {
    v59 = 0x37F8C546A65FE3EELL;
    if (*(_QWORD *)&v49 <= 0x37F8C546A65FE3EEuLL)
      v59 = 0x37F8C546A65FE3EEuLL % *(_QWORD *)&v49;
  }
  else
  {
    v59 = (*(_QWORD *)&v49 - 1) & 0x37F8C546A65FE3EELL;
  }
  v60 = *(_QWORD **)(v52 + 8 * v59);
  if (!v60)
    goto LABEL_95;
  v61 = (_QWORD *)*v60;
  if (!v61)
    goto LABEL_95;
  if (v50 < 2uLL)
  {
    while (1)
    {
      v63 = v61[1];
      if (v63 == 0x37F8C546A65FE3EELL)
      {
        if (v61[2] == 0x37F8C546A65FE3EELL)
          goto LABEL_93;
      }
      else if ((v63 & (*(_QWORD *)&v49 - 1)) != v59)
      {
        goto LABEL_95;
      }
      v61 = (_QWORD *)*v61;
      if (!v61)
        goto LABEL_95;
    }
  }
  while (2)
  {
    v62 = v61[1];
    if (v62 != 0x37F8C546A65FE3EELL)
    {
      if (v62 >= *(_QWORD *)&v49)
        v62 %= *(_QWORD *)&v49;
      if (v62 != v59)
        goto LABEL_95;
      goto LABEL_82;
    }
    if (v61[2] != 0x37F8C546A65FE3EELL)
    {
LABEL_82:
      v61 = (_QWORD *)*v61;
      if (!v61)
        goto LABEL_95;
      continue;
    }
    break;
  }
LABEL_93:
  v64 = v61[5];
  if (*(_QWORD *)(v64 + 8) == 0x37F8C546A65FE3EELL)
  {
    v65 = *(_QWORD *)(v64 + 32);
    goto LABEL_96;
  }
LABEL_95:
  v65 = 0;
LABEL_96:
  if (v50 > 1uLL)
  {
    v66 = 0x3070CB6B3C7F21D3;
    if (*(_QWORD *)&v49 <= 0x3070CB6B3C7F21D3uLL)
      v66 = 0x3070CB6B3C7F21D3uLL % *(_QWORD *)&v49;
  }
  else
  {
    v66 = (*(_QWORD *)&v49 - 1) & 0x3070CB6B3C7F21D3;
  }
  v67 = *(_QWORD **)(v52 + 8 * v66);
  if (v67)
  {
    v68 = (_QWORD *)*v67;
    if (v68)
    {
      if (v50 < 2uLL)
      {
        v69 = *(_QWORD *)&v49 - 1;
        while (1)
        {
          v71 = v68[1];
          if (v71 == 0x3070CB6B3C7F21D3)
          {
            if (v68[2] == 0x3070CB6B3C7F21D3)
              goto LABEL_116;
          }
          else if ((v71 & v69) != v66)
          {
            return this;
          }
          v68 = (_QWORD *)*v68;
          if (!v68)
            return this;
        }
      }
      do
      {
        v70 = v68[1];
        if (v70 == 0x3070CB6B3C7F21D3)
        {
          if (v68[2] == 0x3070CB6B3C7F21D3)
          {
LABEL_116:
            v72 = v68[5];
            if (*(_QWORD *)(v72 + 8) == 0x3070CB6B3C7F21D3)
            {
              if (v65)
              {
                if (v58)
                {
                  v73 = *(_QWORD *)(v72 + 32);
                  if (v73)
                  {
                    v74 = *(_QWORD *)(v65 + 72);
                    if (v74)
                    {
                      LODWORD(a5) = *(_DWORD *)(v74 + 80);
                      LODWORD(v50) = *(_DWORD *)(v74 + 84);
                      v75 = (double)v50;
                      v76 = (double)*(unint64_t *)&a5;
                      *(double *)(v6 + 128) = v75 / (double)*(unint64_t *)&a5;
                      v77 = *(double *)(v58 + 944);
                      v78 = *(_QWORD *)(v65 + 8);
                      v79 = v77;
                      if (v78 <= 4 && ((1 << v78) & 0x19) != 0)
                      {
                        v80 = v75 * v79;
                        v81 = v75 * v79 < v76;
                        v82 = v76 / v79;
                        if (v81)
                          v83 = v80;
                        else
                          v83 = v76;
                        if (v81)
                          v84 = v75;
                        else
                          v84 = v82;
                      }
                      else
                      {
                        v85 = v75 * v79 <= v76;
                        v86 = v76 * v79;
                        v87 = v75 / v79;
                        if (v85)
                          v83 = v86;
                        else
                          v83 = v75;
                        if (v85)
                          v84 = v76;
                        else
                          v84 = v87;
                      }
                      v88 = v76 * 0.5;
                      v89 = v75 * 0.5;
                      memset(&v111, 0, sizeof(v111));
                      v90 = 0.0;
                      if (v78 <= 3)
                        v90 = dbl_1A001A798[v78];
                      memset(&v104, 0, sizeof(v104));
                      CGAffineTransformMakeScale(&v104, 1.0 / v76, 1.0 / v75);
                      v113 = v104;
                      CGAffineTransformTranslate(&v114, &v113, v88, v89);
                      v104 = v114;
                      v112 = v114;
                      CGAffineTransformRotate(&v114, &v112, v90);
                      v104 = v114;
                      CGAffineTransformScale(&v111, &v114, v83 * 0.5, v84 * -0.5);
                      a = v111.a;
                      c = v111.c;
                      tx = v111.tx;
                      b = v111.b;
                      d = v111.d;
                      ty = v111.ty;
                      v97 = *(double *)(v6 + 80);
                      v114.ty = 0.0;
                      v114.a = 0.0;
                      v114.b = 0.0;
                      v98 = *(double *)(*(_QWORD *)&v97 + 8);
                      v104.a = 0.0;
                      v104.b = v97;
                      v104.c = 0.0;
                      v104.d = v98;
                      LOWORD(v104.tx) = 1;
                      if (v98 == 0.0)
                        v99 = 0.0;
                      else
                        v99 = *(double *)(*(_QWORD *)&v97 + 72);
                      v104.ty = v99;
                      ggl::BufferMemory::operator=((uint64_t *)&v114, (uint64_t)&v104);
                      ggl::BufferMemory::~BufferMemory((ggl::BufferMemory *)&v104);
                      v100 = v114.ty;
                      **(float **)&v114.ty = a;
                      *(float *)(*(_QWORD *)&v100 + 4) = c;
                      *(float *)(*(_QWORD *)&v100 + 8) = tx;
                      *(float *)(*(_QWORD *)&v100 + 16) = b;
                      *(float *)(*(_QWORD *)&v100 + 20) = d;
                      *(float *)(*(_QWORD *)&v100 + 24) = ty;
                      ggl::BufferMemory::~BufferMemory((ggl::BufferMemory *)&v114);
                      v101 = ggl::FragmentedPool<ggl::RenderItem>::pop(*(_QWORD *)(v6 + 96));
                      **(_QWORD **)(v101 + 96) = v74;
                      v102 = *(double *)(v6 + 72);
                      *(_QWORD *)&v104.a = &off_1E42B59B0;
                      *(_QWORD *)&v104.c = "ARCameraImage";
                      v104.d = v102;
                      *(_QWORD *)&v104.tx = v101;
                      LODWORD(v104.ty) = 0;
                      v105 = 0;
                      v106 = 1065353216;
                      v107 = 0u;
                      v108 = 0u;
                      v109 = vdupq_n_s64(1uLL);
                      v110 = 0;
                      v103 = (ggl::RenderItem *)md::RenderItemPool::construct(v6 + 104, (uint64_t)&v104, *(_QWORD *)(v73 + 64));
                      ggl::CommandBuffer::pushRenderItem(v47, v103);
                      return ggl::CommandBuffer::sortRenderItems(*(ggl::CommandBuffer **)(v47 + 72), *(ggl::CommandBuffer **)(v47 + 80));
                    }
                  }
                }
              }
            }
            return this;
          }
        }
        else
        {
          if (v70 >= *(_QWORD *)&v49)
            v70 %= *(_QWORD *)&v49;
          if (v70 != v66)
            return this;
        }
        v68 = (_QWORD *)*v68;
      }
      while (v68);
    }
  }
  return this;
}

uint64_t md::ARCameraImageRenderLayer::layoutWithoutStyles(md::ARCameraImageRenderLayer *this, const md::LayoutContext *a2)
{
  return (*(uint64_t (**)(md::ARCameraImageRenderLayer *, const md::LayoutContext *))(*(_QWORD *)this + 16))(this, a2);
}

void _ZNSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_26ARCameraImagePipelineSetupEEC1ENS_8functionIFPS4_vEEENS6_IFvS7_EEEmmEd1_UlS7_E_NS_9allocatorISC_EESA_ED0Ev()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *_ZNKSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_26ARCameraImagePipelineSetupEEC1ENS_8functionIFPS4_vEEENS6_IFvS7_EEEmmEd1_UlS7_E_NS_9allocatorISC_EESA_E7__cloneEv()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E42D71F0;
  return result;
}

void _ZNKSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_26ARCameraImagePipelineSetupEEC1ENS_8functionIFPS4_vEEENS6_IFvS7_EEEmmEd1_UlS7_E_NS_9allocatorISC_EESA_E7__cloneEPNS0_6__baseISA_EE(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E42D71F0;
}

void std::__function::__func<md::ARCameraImageRenderLayer::ARCameraImageRenderLayer(md::CartographicRenderer &,VKSharedResources *)::$_0,std::allocator<md::ARCameraImageRenderLayer::ARCameraImageRenderLayer(md::CartographicRenderer &,VKSharedResources *)::$_0>,ggl::ARCameraImagePipelineSetup * ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::ARCameraImageRenderLayer::ARCameraImageRenderLayer(md::CartographicRenderer &,VKSharedResources *)::$_0,std::allocator<md::ARCameraImageRenderLayer::ARCameraImageRenderLayer(md::CartographicRenderer &,VKSharedResources *)::$_0>,ggl::ARCameraImagePipelineSetup * ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42D1DC8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<md::ARCameraImageRenderLayer::ARCameraImageRenderLayer(md::CartographicRenderer &,VKSharedResources *)::$_0,std::allocator<md::ARCameraImageRenderLayer::ARCameraImageRenderLayer(md::CartographicRenderer &,VKSharedResources *)::$_0>,ggl::ARCameraImagePipelineSetup * ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42D1DC8;
  a2[1] = v2;
  return result;
}

_QWORD *std::__function::__func<md::ARCameraImageRenderLayer::ARCameraImageRenderLayer(md::CartographicRenderer &,VKSharedResources *)::$_0,std::allocator<md::ARCameraImageRenderLayer::ARCameraImageRenderLayer(md::CartographicRenderer &,VKSharedResources *)::$_0>,ggl::ARCameraImagePipelineSetup * ()(void)>::operator()(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;

  v1 = *(_QWORD **)(a1 + 8);
  v2 = (_QWORD *)operator new();
  v3 = v2;
  v4 = v1[7];
  v5 = (std::__shared_weak_count *)v1[8];
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    ggl::PipelineSetup::PipelineSetup(v2, v4, (uint64_t)v5);
    v8 = (unint64_t *)&v5->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  else
  {
    ggl::PipelineSetup::PipelineSetup(v2, v4, 0);
  }
  *v3 = &off_1E42BB4B0;
  v10 = (_QWORD *)v3[8];
  v11 = v1[10];
  v12 = v1[11];
  *v10 = v11;
  v10[1] = 0;
  v13 = (_QWORD *)v3[20];
  if (v12)
  {
    v14 = (unint64_t *)(v12 + 8);
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }
  v16 = (std::__shared_weak_count *)v13[1];
  *v13 = v11;
  v13[1] = v12;
  if (v16)
  {
    v17 = (unint64_t *)&v16->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  return v3;
}

void std::__shared_ptr_emplace<ggl::ARCameraImagePipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E3F20;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::ARCameraImagePipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E3F20;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<ggl::ARCameraImagePipelineState>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t ggl::ConstantDataTyped<ggl::ARCameraImage::Constants>::~ConstantDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  return a1;
}

void ggl::ConstantDataTyped<ggl::ARCameraImage::Constants>::~ConstantDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::ARCameraImage::Constants>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E1280;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::ARCameraImage::Constants>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E1280;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::ARCameraImage::Constants>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void md::trafficColorForSpeed(uint64_t a1, uint64_t a2, int a3, int a4, float a5)
{
  int v9;
  float32x4_t v10;
  uint64_t v11;
  float v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int v15;
  float *v16;
  float v17;
  BOOL v18;
  unsigned int v19;
  unsigned int v20;
  float v21;
  float v22;
  float32x4_t v23;
  NSObject *v24;
  uint16x4_t v25;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  v9 = 3;
  switch(a3)
  {
    case 0:
    case 1:
    case 2:
      v9 = a3;
      goto LABEL_3;
    case 4:
      v14 = *(_QWORD *)(*(_QWORD *)a2 + 24);
      if ((int)a5 >= 0x17)
        v15 = 23;
      else
        v15 = (int)a5;
      v16 = *(float **)v14;
      if (!*(_QWORD *)v14
        || (v17 = *v16, LODWORD(v16) = *v16 == 1.0, !*(_BYTE *)(v14 + 10))
        || (v17 != 0.0 ? (v18 = v17 == 1.0) : (v18 = 1), v18))
      {
        v19 = *(unsigned __int8 *)(v14 + v16 + 11);
        if (v19 != 2)
          goto LABEL_19;
      }
      if ((gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtZAtEnd(v14, 0x5Cu, v15, 0) & 1) == 0)
      {
        v19 = 1;
LABEL_19:
        if (!gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtZAtEnd(v14, 0x5Cu, v15, v19))
        {
LABEL_21:
          v10 = 0uLL;
          v22 = 0.0;
          if (!a4)
            goto LABEL_30;
          goto LABEL_29;
        }
      }
      gss::RenderStyle<gss::PropertyID>::sampledValueForKeyAtZ<geo::Color<unsigned short,4,(geo::ColorSpace)0>>((unint64_t *)&v25, v14, 0x5Cu, 2u, fminf(fmaxf(a5, 0.0), 23.0));
      LOWORD(v20) = v25.i16[3];
      v21 = (float)v20;
      v10 = vmulq_f32(vcvtq_f32_u32(vmovl_u16(v25)), (float32x4_t)vdupq_n_s32(0x37800080u));
      v22 = v21 * 0.000015259;
      *(_DWORD *)(a1 + 8) = v10.i32[2];
      *(_QWORD *)a1 = v10.i64[0];
LABEL_28:
      *(float *)(a1 + 12) = v22;
      if (a4)
      {
LABEL_29:
        v23 = vmulq_n_f32(v10, v22);
        *(_DWORD *)(a1 + 8) = v23.i32[2];
        *(_QWORD *)a1 = v23.i64[0];
      }
LABEL_30:
      if (fabsf(v22) < 0.00000011921)
      {
        if (GEOGetVectorKitRouteLog_onceToken != -1)
          dispatch_once(&GEOGetVectorKitRouteLog_onceToken, &__block_literal_global_25_11794);
        v24 = (id)GEOGetVectorKitRouteLog_log;
        if (os_log_type_enabled(v24, OS_LOG_TYPE_INFO))
        {
          v25.i16[0] = 0;
          _os_log_impl(&dword_19F029000, v24, OS_LOG_TYPE_INFO, "RouteLine trafficColor is 0", (uint8_t *)&v25, 2u);
        }

      }
      return;
    default:
LABEL_3:
      if (!md::trafficVisibleAtSpeed(a2, v9))
        goto LABEL_21;
      switch(v9)
      {
        case 0:
          v11 = *(_QWORD *)(*(_QWORD *)a2 + 24);
          v12 = fminf(fmaxf(a5, 0.0), 23.0);
          v13 = 43;
          goto LABEL_26;
        case 1:
          v11 = *(_QWORD *)(*(_QWORD *)a2 + 24);
          v12 = fminf(fmaxf(a5, 0.0), 23.0);
          v13 = 54;
          goto LABEL_26;
        case 2:
          v11 = *(_QWORD *)(*(_QWORD *)a2 + 24);
          v12 = fminf(fmaxf(a5, 0.0), 23.0);
          v13 = 65;
          goto LABEL_26;
        case 3:
          v11 = *(_QWORD *)(*(_QWORD *)a2 + 24);
          v12 = fminf(fmaxf(a5, 0.0), 23.0);
          v13 = 76;
LABEL_26:
          gss::RenderStyle<gss::PropertyID>::sampledValueForKeyAtZ<geo::Color<unsigned short,4,(geo::ColorSpace)0>>((unint64_t *)&v25, v11, v13, 2u, v12);
          v10 = vmulq_f32(vcvtq_f32_u32(vmovl_u16(v25)), (float32x4_t)vdupq_n_s32(0x37800080u));
          break;
        default:
          break;
      }
      *(_DWORD *)(a1 + 8) = v10.i32[2];
      *(_QWORD *)a1 = v10.i64[0];
      v22 = v10.f32[3];
      goto LABEL_28;
  }
}

uint64_t md::RouteStyleContext::RouteStyleContext(uint64_t a1, uint64_t a2, uint64_t a3, int a4, float a5)
{
  _QWORD *v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  unint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  float v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  float *v22;
  float v23;
  _BOOL4 v24;
  unsigned int hasValueForKeyAtZAtEnd;
  float v27;
  _BOOL4 v28;
  unsigned int v30;
  uint64_t v31;
  float *v32;
  float v33;
  _BOOL4 v34;
  unsigned int v36;
  float v37;
  float v38;
  _BOOL4 v39;
  unsigned int v41;
  char v42;
  char v43;
  float v44;
  _BOOL4 v45;
  unsigned int v47;
  uint64_t v48;
  uint64_t v49;
  _DWORD *v50;
  unint64_t v51;
  float v52;
  float *v53;
  float v54;
  unsigned int v55;
  float v56;
  float v57;
  float v58;
  float v59;
  id WeakRetained;
  float32x4_t v61;
  NSObject *v62;
  __int128 v63;
  int v64;
  int v65;
  int v66;
  int v67;
  uint64_t v68;
  uint64_t v69;
  float *v70;
  float v71;
  _BOOL4 v72;
  unsigned int v73;
  float v74;
  _BOOL4 v75;
  unsigned int v76;
  uint64_t v77;
  unsigned int v78;
  unsigned int v79;
  char v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  BOOL v84;
  BOOL v85;
  char v86;
  float v87;
  float v88;
  unint64_t v89;
  float v90;
  float *v91;
  float v92;
  unsigned int v93;
  float v94;
  float v95;
  float v96;
  float v97;
  float v98;
  double v99;
  long double v100;
  long double v101;
  float v102;
  long double v103;
  long double v104;
  long double v105;
  long double v106;
  long double v107;
  double v108;
  long double v109;
  float v110;
  unint64_t v111;
  float v112;
  float *v113;
  float v114;
  unsigned int v115;
  float v116;
  float v117;
  float v118;
  float v119;
  float v120;
  float32x2_t v121;
  float v122;
  float32x2_t v123;
  float32x2_t v124;
  float32x2_t v125;
  float v126;
  float v127;
  float32x2_t v128;
  float32x2_t v129;
  float32x2_t v130;
  void *v131;
  int v132;
  uint64_t v133;
  std::__shared_weak_count *v134;
  unint64_t *v135;
  unint64_t v136;
  unint64_t v137;
  unint64_t *v138;
  unint64_t v139;
  uint64_t v140;
  float *v141;
  float v142;
  _BOOL4 v143;
  unsigned int v145;
  __int128 v146;
  float v147;
  _BOOL4 v148;
  unsigned int v150;
  float v151;
  float32x2_t v152;
  float32x2_t v153;
  float32x2_t v154;
  float32x2_t v155;
  float v156;
  float32x2_t v157;
  float v158;
  float v159;
  float v160;
  float32x2_t v161;
  uint64_t v162;
  std::__shared_weak_count *v163;
  unint64_t *v164;
  unint64_t v165;
  int v166;
  unint64_t v167;
  unint64_t v168;
  uint64_t v169;
  std::__shared_weak_count *v170;
  unint64_t *v171;
  unint64_t v172;
  unint64_t v173;
  unint64_t *v174;
  unint64_t v175;
  uint64_t v176;
  float *v177;
  float v178;
  BOOL v179;
  unsigned int v180;
  float v181;
  float v182;
  uint64_t v183;
  uint64_t v184;
  float *v185;
  float v186;
  _BOOL4 v187;
  unsigned int v189;
  unsigned int v190;
  float32x4_t v191;
  float v192;
  _BOOL4 v193;
  unsigned int v195;
  unsigned int v196;
  float v197;
  float32x4_t v198;
  uint64_t v199;
  float *v200;
  float v201;
  _BOOL4 v202;
  unsigned int v204;
  float v205;
  _BOOL4 v206;
  unsigned int v207;
  float v209;
  float32x4_t v210;
  float32x4_t *v211;
  __int128 v212;
  _QWORD v213[2];
  unsigned __int8 v214;
  _BYTE buf[24];
  uint64_t v216;
  int v217;
  uint64_t v218;
  std::__shared_weak_count *v219;
  _QWORD v220[2];
  unsigned __int8 v221;
  char v222;
  uint16x4_t v223;

  *(_QWORD *)(a1 + 192) = 0;
  v10 = (_QWORD *)(a1 + 192);
  *(_BYTE *)(a1 + 184) = 0;
  *(_QWORD *)(a1 + 200) = 0;
  *(_QWORD *)(a1 + 208) = 0;
  *(_QWORD *)(a1 + 216) = gss::Allocator::instance((gss::Allocator *)a1);
  *((_BYTE *)v10 - 190) = 0;
  v11 = *(_QWORD *)(a3 + 272);
  v12 = *(std::__shared_weak_count **)(a3 + 280);
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldxr(p_shared_owners);
    while (__stxr(v14 + 1, p_shared_owners));
    v219 = v12;
    do
      v15 = __ldxr(p_shared_owners);
    while (__stxr(v15 + 1, p_shared_owners));
  }
  else
  {
    v219 = 0;
  }
  v220[0] = 0;
  v220[1] = 0;
  v218 = v11;
  v221 = 0;
  if (v11)
    LODWORD(v11) = (*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)v11 + 48))(v11, v220);
  v221 = v11;
  if (v12)
  {
    v16 = (unint64_t *)&v12->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
    LODWORD(v11) = v221;
  }
  if ((_DWORD)v11)
  {
    v18 = *(float *)(a2 + 8);
    v19 = v218;
    v20 = *(_QWORD *)(v218 + 24);
    if ((int)v18 >= 0x17)
      v21 = 23;
    else
      v21 = (int)v18;
    v22 = *(float **)v20;
    if (*(_QWORD *)v20)
    {
      v23 = *v22;
      v24 = *v22 == 1.0;
      if (*(_BYTE *)(v20 + 10))
      {
        if (v23 != 0.0 && v23 != 1.0)
          goto LABEL_30;
      }
    }
    else
    {
      v24 = 0;
    }
    hasValueForKeyAtZAtEnd = *(unsigned __int8 *)(v20 + v24 + 11);
    if (hasValueForKeyAtZAtEnd != 2)
    {
LABEL_31:
      hasValueForKeyAtZAtEnd = gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtZAtEnd(v20, 0x5Cu, v21, hasValueForKeyAtZAtEnd);
LABEL_32:
      v211 = (float32x4_t *)(v10 - 23);
      if (v22)
      {
        v27 = *v22;
        v28 = *v22 == 1.0;
        if (*(_BYTE *)(v20 + 10))
        {
          if (v27 != 0.0 && v27 != 1.0)
            goto LABEL_42;
        }
      }
      else
      {
        v28 = 0;
      }
      v30 = *(unsigned __int8 *)(v20 + v28 + 11);
      if (v30 != 2)
      {
LABEL_43:
        v30 = gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtZAtEnd(v20, 0x5Du, v21, v30);
LABEL_44:
        if (hasValueForKeyAtZAtEnd)
        {
          gss::RenderStyle<gss::PropertyID>::valueForKeyAtZ<geo::Color<unsigned short,4,(geo::ColorSpace)0>>((unint64_t *)buf, v20, 0x5Cu, v21, 2u, 0);
          *v211 = vmulq_f32(vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)buf)), (float32x4_t)vdupq_n_s32(0x37800080u));
          v19 = v218;
        }
        if (v30)
        {
          gss::RenderStyle<gss::PropertyID>::valueForKeyAtZ<geo::Color<unsigned short,4,(geo::ColorSpace)0>>((unint64_t *)buf, *(_QWORD *)(v19 + 24), 0x5Du, v21, 2u, 0);
          *(float32x4_t *)(a1 + 56) = vmulq_f32(vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)buf)), (float32x4_t)vdupq_n_s32(0x37800080u));
          v19 = v218;
        }
        v31 = *(_QWORD *)(v19 + 24);
        v32 = *(float **)v31;
        if (*(_QWORD *)v31)
        {
          v33 = *v32;
          v34 = *v32 == 1.0;
          if (*(_BYTE *)(v31 + 10))
          {
            if (v33 != 0.0 && v33 != 1.0)
            {
LABEL_58:
              if ((gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtZAtEnd(v31, 0x13Fu, v21, 0) & 1) != 0)
                goto LABEL_61;
              v36 = 1;
LABEL_60:
              if (!gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtZAtEnd(v31, 0x13Fu, v21, v36))
                goto LABEL_76;
LABEL_61:
              v37 = fminf(fmaxf(v18, 0.0), 23.0);
              if (v32)
              {
                v38 = *v32;
                v39 = *v32 == 1.0;
                if (*(_BYTE *)(v31 + 10))
                {
                  if (v38 != 0.0 && v38 != 1.0)
                    goto LABEL_71;
                }
              }
              else
              {
                v39 = 0;
              }
              v41 = *(unsigned __int8 *)(v31 + v39 + 11);
              v38 = 0.0;
              if (v41 != 2)
              {
                v43 = gss::RenderStyle<gss::PropertyID>::styleSampledValueForKeyAtZ<unsigned int>(v31, v41, 0, v37);
LABEL_75:
                *(_BYTE *)(a1 + 184) = v43;
                v31 = *(_QWORD *)(v218 + 24);
                v32 = *(float **)v31;
LABEL_76:
                if (v32)
                {
                  v44 = *v32;
                  v45 = *v32 == 1.0;
                  if (*(_BYTE *)(v31 + 10))
                  {
                    if (v44 != 0.0 && v44 != 1.0)
                      goto LABEL_86;
                  }
                }
                else
                {
                  v45 = 0;
                }
                v47 = *(unsigned __int8 *)(v31 + v45 + 11);
                v44 = 0.0;
                if (v47 != 2)
                {
                  *(_DWORD *)(a1 + 232) = *(_DWORD *)gss::RenderStyle<gss::PropertyID>::styleValueForKey<unsigned int>(v31, 0x68u, v47, 0);
                  if (!a4)
                    goto LABEL_100;
LABEL_92:
                  v51 = *(_QWORD *)(v218 + 24);
                  v52 = fminf(fmaxf(v18, 0.0), 23.0);
                  v53 = *(float **)v51;
                  if (*(_QWORD *)v51
                    && (v54 = *v53, LODWORD(v53) = *v53 == 1.0, *(_BYTE *)(v51 + 10))
                    && v54 != 0.0
                    && v54 != 1.0
                    || (v55 = *(unsigned __int8 *)(v51 + v53 + 11), v54 = 0.0, v55 == 2))
                  {
                    buf[0] = 1;
                    LOBYTE(v212) = 1;
                    gss::RenderStyle<gss::PropertyID>::styleSampledValueForKeyAtZ<float>(v51, 0x139u, 0, buf, v52);
                    v57 = v56;
                    gss::RenderStyle<gss::PropertyID>::styleSampledValueForKeyAtZ<float>(v51, 0x139u, 1u, (BOOL *)&v212, v52);
                    v59 = v57 + (float)((float)(v58 - v57) * v54);
                  }
                  else
                  {
                    gss::RenderStyle<gss::PropertyID>::styleSampledValueForKeyAtZ<float>(*(_QWORD *)(v218 + 24), 0x139u, v55, 0, v52);
                  }
                  *(float *)(a1 + 256) = v59;
LABEL_100:
                  WeakRetained = objc_loadWeakRetained((id *)(a3 + 224));
                  *(_BYTE *)(a1 + 1) = 0;
                  objc_opt_class();
                  if ((objc_opt_isKindOfClass() & 1) != 0)
                  {
                    *(_BYTE *)(a1 + 1) = 1;
                    if ((hasValueForKeyAtZAtEnd & 1) == 0)
                    {
                      if (WeakRetained)
                      {
                        objc_msgSend(WeakRetained, "lineColor");
                        v61 = *(float32x4_t *)buf;
                      }
                      else
                      {
                        v61 = 0uLL;
                      }
                      *v211 = v61;
                    }
                    if ((v30 & 1) == 0)
                    {
                      if (WeakRetained)
                      {
                        objc_msgSend(WeakRetained, "lineColor");
                        v63 = *(_OWORD *)buf;
                      }
                      else
                      {
                        v63 = 0uLL;
                      }
                      *(_OWORD *)(a1 + 56) = v63;
                    }
                  }
                  else if ((hasValueForKeyAtZAtEnd & 1) == 0)
                  {
                    if ((hasLogErrorOnce & 1) == 0)
                    {
                      if (GEOGetVectorKitRouteLog_onceToken != -1)
                        dispatch_once(&GEOGetVectorKitRouteLog_onceToken, &__block_literal_global_25_11794);
                      v62 = (id)GEOGetVectorKitRouteLog_log;
                      if (os_log_type_enabled(v62, OS_LOG_TYPE_ERROR))
                      {
                        *(_WORD *)buf = 0;
                        _os_log_impl(&dword_19F029000, v62, OS_LOG_TYPE_ERROR, "Route FillColor not defined", buf, 2u);
                      }

                      md::RouteLineSection::dumpStyleAttributes((md::RouteLineSection *)a3);
                      hasLogErrorOnce = 1;
                    }
                    *v211 = (float32x4_t)xmmword_19FFB4D30;
                  }
                  v64 = *(_DWORD *)(a1 + 8);
                  v65 = *(_DWORD *)(a1 + 12);
                  *(_DWORD *)(a1 + 24) = v64;
                  *(_DWORD *)(a1 + 28) = v65;
                  v66 = *(_DWORD *)(a1 + 16);
                  v67 = *(_DWORD *)(a1 + 20);
                  *(_DWORD *)(a1 + 32) = v66;
                  *(_DWORD *)(a1 + 36) = v67;
                  *(_DWORD *)(a1 + 40) = v64;
                  *(_DWORD *)(a1 + 44) = v65;
                  *(_DWORD *)(a1 + 48) = v66;
                  *(_DWORD *)(a1 + 52) = v67;
                  v68 = v218;
                  v69 = *(_QWORD *)(v218 + 24);
                  v70 = *(float **)v69;
                  if (*(_QWORD *)v69)
                  {
                    v71 = *v70;
                    v72 = *v70 == 1.0;
                    if (*(_BYTE *)(v69 + 10) && v71 != 0.0 && v71 != 1.0)
                    {
LABEL_126:
                      if ((gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtZAtEnd(*(_QWORD *)(v218 + 24), 0xF0u, v21, 0) & 1) != 0)
                      {
LABEL_129:
                        gss::RenderStyle<gss::PropertyID>::valueForKeyAtZ<geo::Color<unsigned short,4,(geo::ColorSpace)0>>((unint64_t *)buf, v69, 0xF0u, v21, 2u, 0);
                        *(float32x4_t *)(a1 + 40) = vmulq_f32(vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)buf)), (float32x4_t)vdupq_n_s32(0x37800080u));
                        v68 = v218;
                        v69 = *(_QWORD *)(v218 + 24);
                        v70 = *(float **)v69;
LABEL_130:
                        *(_OWORD *)(a1 + 72) = *(_OWORD *)(a1 + 56);
                        if (v70)
                        {
                          v74 = *v70;
                          v75 = *v70 == 1.0;
                          if (*(_BYTE *)(v69 + 10) && v74 != 0.0 && v74 != 1.0)
                          {
LABEL_137:
                            if ((gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtZAtEnd(v69, 0x1A3u, v21, 0) & 1) != 0)
                              goto LABEL_140;
                            v76 = 1;
LABEL_139:
                            if (!gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtZAtEnd(v69, 0x1A3u, v21, v76))
                            {
LABEL_141:
                              *(_BYTE *)(a1 + 5) = 0;
                              v77 = *(_QWORD *)(v68 + 24);
                              v78 = *(unsigned __int8 *)(v77 + 11);
                              if (v78 != 2
                                || (v78 = 1,
                                    (gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtZAtEnd(v77, 0x12Cu, v21, 0) & 1) == 0))
                              {
                                v78 = gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtZAtEnd(v77, 0x12Cu, v21, v78);
                              }
                              v79 = *(unsigned __int8 *)(v77 + 12);
                              if (v79 != 2
                                || (v80 = gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtZAtEnd(v77, 0x12Cu, v21, 0),
                                    v79 = 1,
                                    (v80 & 1) == 0))
                              {
                                v79 = gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtZAtEnd(v77, 0x12Cu, v21, v79);
                              }
                              if ((v78 & v79) == 1)
                                gss::RenderStyle<gss::PropertyID>::valueForKeyAtZ<gss::DashPattern>((uint64_t)buf, v77, 0x12Cu, v21, 2);
                              else
                                gss::RenderStyle<gss::PropertyID>::valueForKeyAtZ<gss::DashPattern>((uint64_t)buf, v77, 0x12Cu, v21, 1);
                              v81 = *v10;
                              if (*v10)
                              {
                                *(_QWORD *)(a1 + 200) = v81;
                                (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 216) + 40))(*(_QWORD *)(a1 + 216), v81, *(_QWORD *)(a1 + 208) - v81);
                                *v10 = 0;
                                v10[1] = 0;
                                v10[2] = 0;
                              }
                              v82 = *(_QWORD *)buf;
                              *(_QWORD *)(a1 + 192) = *(_QWORD *)buf;
                              v83 = *(_QWORD *)&buf[8];
                              *(_OWORD *)(a1 + 200) = *(_OWORD *)&buf[8];
                              *(_DWORD *)(a1 + 224) = v217;
                              *(_BYTE *)(a1 + 5) = v83 != v82;
                              if (*(_BYTE *)(a2 + 145))
                              {
                                v84 = 0;
                                *(_BYTE *)(a1 + 6) = 0;
                              }
                              else
                              {
                                if (*(_BYTE *)(a1 + 1))
                                  v85 = 0;
                                else
                                  v85 = v83 == v82;
                                v86 = v85;
                                *(_BYTE *)(a1 + 6) = v86;
                                v84 = v85 && *(_BYTE *)(a2 + 192) != 0;
                              }
                              *(_BYTE *)a1 = v84;
                              md::RouteLineSection::halfWidthAtZoom(&v218, v18);
                              *(float *)(a1 + 236) = v87 + v87;
                              v88 = 0.0;
                              if (v221)
                              {
                                v89 = *(_QWORD *)(v218 + 24);
                                v90 = fminf(fmaxf(v18, 0.0), 23.0);
                                v91 = *(float **)v89;
                                if (*(_QWORD *)v89
                                  && (v92 = *v91, LODWORD(v91) = *v91 == 1.0, *(_BYTE *)(v89 + 10))
                                  && v92 != 0.0
                                  && v92 != 1.0
                                  || (v93 = *(unsigned __int8 *)(v89 + v91 + 11), v92 = 0.0, v93 == 2))
                                {
                                  buf[0] = 1;
                                  LOBYTE(v212) = 1;
                                  gss::RenderStyle<gss::PropertyID>::styleSampledValueForKeyAtZ<float>(v89, 0x61u, 0, buf, v90);
                                  v95 = v94;
                                  gss::RenderStyle<gss::PropertyID>::styleSampledValueForKeyAtZ<float>(v89, 0x61u, 1u, (BOOL *)&v212, v90);
                                  v88 = v95 + (float)((float)(v96 - v95) * v92);
                                }
                                else
                                {
                                  gss::RenderStyle<gss::PropertyID>::styleSampledValueForKeyAtZ<float>(*(_QWORD *)(v218 + 24), 0x61u, v93, 0, v90);
                                  v88 = v97;
                                }
                              }
                              *(_DWORD *)(a1 + 248) = 0;
                              v98 = *(float *)(a2 + 128);
                              *(float *)(a1 + 240) = (float)(a5 * 0.5) * (float)(*(float *)(a1 + 236) * v98);
                              v209 = *(float *)(a2 + 180);
                              v99 = *(double *)(a3 + 192) - *(double *)(a3 + 168);
                              v100 = exp((*(double *)(a3 + 176) + (*(double *)(a3 + 200) - *(double *)(a3 + 176)) * 0.5)* 6.28318531+ -3.14159265);
                              v101 = atan(v100) * 114.591559 + -90.0;
                              v102 = a5;
                              v103 = cos(v101 * 0.034906585) * -559.82 + 111132.92;
                              v104 = v103 + cos(v101 * 0.0698131701) * 1.175;
                              v105 = v104 + cos(v101 * 0.104719755) * -0.0023;
                              v106 = v101 * 0.00872664626;
                              v107 = tan(v101 * 0.00872664626 + 0.78103484);
                              v108 = log(v107);
                              v109 = tan(v106 + 0.789761487);
                              v110 = fabs((log(v109) - v108) * 0.159154943) / (v99 * v209 * v105);
                              *(float *)(a1 + 252) = v110 * v102;
                              *(float *)(a1 + 244) = v98 * (float)(v102 * v88);
                              v111 = *(_QWORD *)(v218 + 24);
                              v112 = fminf(fmaxf(v18, 0.0), 23.0);
                              v113 = *(float **)v111;
                              if (*(_QWORD *)v111
                                && (v114 = *v113, LODWORD(v113) = *v113 == 1.0, *(_BYTE *)(v111 + 10))
                                && v114 != 0.0
                                && v114 != 1.0
                                || (v115 = *(unsigned __int8 *)(v111 + v113 + 11), v114 = 0.0, v115 == 2))
                              {
                                buf[0] = 1;
                                LOBYTE(v212) = 1;
                                gss::RenderStyle<gss::PropertyID>::styleSampledValueForKeyAtZ<float>(v111, 0x1D0u, 0, buf, v112);
                                v117 = v116;
                                gss::RenderStyle<gss::PropertyID>::styleSampledValueForKeyAtZ<float>(v111, 0x1D0u, 1u, (BOOL *)&v212, v112);
                                v119 = v117 + (float)((float)(v118 - v117) * v114);
                              }
                              else
                              {
                                gss::RenderStyle<gss::PropertyID>::styleSampledValueForKeyAtZ<float>(*(_QWORD *)(v218 + 24), 0x1D0u, v115, 0, v112);
                              }
                              *(float *)(a1 + 264) = v119;
                              *(_DWORD *)(a1 + 260) = *(_DWORD *)(a1 + 240);
                              v120 = *(float *)(a1 + 16);
                              v121 = (float32x2_t)vdup_n_s32(0x3F666666u);
                              v122 = *(float *)(a1 + 20) * 0.9;
                              v123 = *(float32x2_t *)(a1 + 8);
                              v124 = vmul_f32(v123, (float32x2_t)0x3F170A3D3E99999ALL);
                              v124.f32[0] = vaddv_f32(v124) + (float)(v120 * 0.11);
                              v125 = (float32x2_t)vdup_n_s32(0x3E19999Au);
                              *(float32x2_t *)(a1 + 120) = vmul_f32(vmla_f32(v123, v125, vsub_f32((float32x2_t)vdup_lane_s32((int32x2_t)v124, 0), v123)), v121);
                              *(float *)(a1 + 128) = (float)(v120 + (float)((float)(v124.f32[0] - v120) * 0.15)) * 0.9;
                              *(float *)(a1 + 132) = v122;
                              v126 = *(float *)(a1 + 48);
                              v127 = *(float *)(a1 + 52) * 0.9;
                              v128 = *(float32x2_t *)(a1 + 40);
                              v129 = vmul_f32(v128, (float32x2_t)0x3F170A3D3E99999ALL);
                              v129.f32[0] = vaddv_f32(v129) + (float)(v126 * 0.11);
                              v130 = vmla_f32(v128, v125, vsub_f32((float32x2_t)vdup_lane_s32((int32x2_t)v129, 0), v128));
                              *(float32x2_t *)(a1 + 136) = vmul_f32(v130, v121);
                              *(float *)(a1 + 144) = (float)(v126 + (float)((float)(v129.f32[0] - v126) * 0.15)) * 0.9;
                              *(float *)(a1 + 148) = v127;
                              if (*(_BYTE *)(a2 + 176))
                              {
                                +[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings");
                                v131 = (void *)objc_claimAutoreleasedReturnValue();
                                v132 = objc_msgSend(v131, "enableDynamicRouteWidth");

                                if (v132)
                                  *(float *)(a1 + 248) = fminf(fmaxf((float)(*(float *)(a2 + 156) * 0.2) + -2.4, 0.0), 1.0);
                              }
                              v133 = *(_QWORD *)(a3 + 288);
                              v134 = *(std::__shared_weak_count **)(a3 + 296);
                              if (v134)
                              {
                                v135 = (unint64_t *)&v134->__shared_owners_;
                                do
                                  v136 = __ldxr(v135);
                                while (__stxr(v136 + 1, v135));
                                *(_QWORD *)&buf[8] = v134;
                                do
                                  v137 = __ldxr(v135);
                                while (__stxr(v137 + 1, v135));
                              }
                              else
                              {
                                *(_QWORD *)&buf[8] = 0;
                              }
                              *(_QWORD *)&buf[16] = 0;
                              v216 = 0;
                              *(_QWORD *)buf = v133;
                              LOBYTE(v217) = 0;
                              if (v133)
                                LODWORD(v133) = (*(uint64_t (**)(uint64_t, _BYTE *))(*(_QWORD *)v133 + 48))(v133, &buf[16]);
                              LOBYTE(v217) = v133;
                              if (v134)
                              {
                                v138 = (unint64_t *)&v134->__shared_owners_;
                                do
                                  v139 = __ldaxr(v138);
                                while (__stlxr(v139 - 1, v138));
                                if (!v139)
                                {
                                  ((void (*)(std::__shared_weak_count *))v134->__on_zero_shared)(v134);
                                  std::__shared_weak_count::__release_weak(v134);
                                }
                                LODWORD(v133) = v217;
                              }
                              *(_BYTE *)(a1 + 3) = v133;
                              if (!(_DWORD)v133)
                                goto LABEL_232;
                              gss::RenderStyle<gss::PropertyID>::valueForKeyAtZ<geo::Color<unsigned short,4,(geo::ColorSpace)0>>((unint64_t *)&v212, *(_QWORD *)(*(_QWORD *)buf + 24), 0x5Cu, v21, 2u, 0);
                              v210 = (float32x4_t)vdupq_n_s32(0x37800080u);
                              *(float32x4_t *)(a1 + 88) = vmulq_f32(vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)&v212)), v210);
                              gss::RenderStyle<gss::PropertyID>::valueForKeyAtZ<geo::Color<unsigned short,4,(geo::ColorSpace)0>>((unint64_t *)&v212, *(_QWORD *)(*(_QWORD *)buf + 24), 0x5Du, v21, 2u, 0);
                              *(float32x4_t *)(a1 + 104) = vmulq_f32(vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)&v212)), v210);
                              v140 = *(_QWORD *)(*(_QWORD *)buf + 24);
                              v141 = *(float **)v140;
                              if (*(_QWORD *)v140)
                              {
                                v142 = *v141;
                                v143 = *v141 == 1.0;
                                if (*(_BYTE *)(v140 + 10))
                                {
                                  if (v142 != 0.0 && v142 != 1.0)
                                  {
LABEL_207:
                                    if ((gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtZAtEnd(*(_QWORD *)(*(_QWORD *)buf + 24), 0x5Cu, v21, 0) & 1) != 0)
                                    {
                                      if (!*(_BYTE *)(a1 + 1))
                                        goto LABEL_232;
LABEL_217:
                                      if (v141)
                                      {
                                        v147 = *v141;
                                        v148 = *v141 == 1.0;
                                        if (*(_BYTE *)(v140 + 10))
                                        {
                                          if (v147 != 0.0 && v147 != 1.0)
                                            goto LABEL_227;
                                        }
                                      }
                                      else
                                      {
                                        v148 = 0;
                                      }
                                      v150 = *(unsigned __int8 *)(v140 + v148 + 11);
                                      if (v150 != 2)
                                      {
LABEL_229:
                                        if ((gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtZAtEnd(v140, 0x5Du, v21, v150) & 1) == 0)
                                        {
                                          if (!WeakRetained)
                                          {
                                            *(_OWORD *)(a1 + 104) = 0u;
                                            if (!*(_BYTE *)(a1 + 5))
                                            {
LABEL_234:
                                              v151 = *(float *)(a1 + 64);
                                              v152 = *(float32x2_t *)(a1 + 56);
                                              v153 = vmul_f32(v152, (float32x2_t)0x3F170A3D3E99999ALL);
                                              v153.f32[0] = vaddv_f32(v153) + (float)(v151 * 0.11);
                                              v154 = (float32x2_t)vdup_n_s32(0x3E19999Au);
                                              v155 = vmla_f32(v152, v154, vsub_f32((float32x2_t)vdup_lane_s32((int32x2_t)v153, 0), v152));
                                              v156 = v151 + (float)((float)(v153.f32[0] - v151) * 0.15);
                                              v157 = (float32x2_t)vdup_n_s32(0x3F666666u);
                                              v158 = *(float *)(a1 + 68) * 0.9;
                                              *(float32x2_t *)(a1 + 152) = vmul_f32(v155, v157);
                                              *(float *)(a1 + 160) = v156 * 0.9;
                                              *(float *)(a1 + 164) = v158;
                                              v159 = *(float *)(a1 + 80);
                                              v160 = *(float *)(a1 + 84) * 0.9;
                                              v161 = *(float32x2_t *)(a1 + 72);
                                              v130.f32[0] = vaddv_f32(vmul_f32(v161, (float32x2_t)0x3F170A3D3E99999ALL))
                                                          + (float)(v159 * 0.11);
                                              *(float32x2_t *)(a1 + 168) = vmul_f32(vmla_f32(v161, v154, vsub_f32((float32x2_t)vdup_lane_s32((int32x2_t)v130, 0), v161)), v157);
                                              *(float *)(a1 + 176) = (float)(v159
                                                                           + (float)((float)(v130.f32[0] - v159) * 0.15))
                                                                   * 0.9;
                                              *(float *)(a1 + 180) = v160;
                                              *(_BYTE *)(a1 + 4) = 0;
                                              v162 = *(_QWORD *)(a3 + 304);
                                              v163 = *(std::__shared_weak_count **)(a3 + 312);
                                              if (v163)
                                              {
                                                v164 = (unint64_t *)&v163->__shared_owners_;
                                                do
                                                  v165 = __ldxr(v164);
                                                while (__stxr(v165 + 1, v164));
                                                if (!v162)
                                                {
                                                  do
                                                    v168 = __ldaxr(v164);
                                                  while (__stlxr(v168 - 1, v164));
                                                  if (!v168)
                                                  {
                                                    ((void (*)(std::__shared_weak_count *))v163->__on_zero_shared)(v163);
                                                    std::__shared_weak_count::__release_weak(v163);
                                                  }
                                                  goto LABEL_333;
                                                }
                                                v166 = *(unsigned __int8 *)(a2 + 144);
                                                do
                                                  v167 = __ldaxr(v164);
                                                while (__stlxr(v167 - 1, v164));
                                                if (v167)
                                                {
                                                  if (!v166)
                                                    goto LABEL_333;
                                                }
                                                else
                                                {
                                                  ((void (*)(std::__shared_weak_count *))v163->__on_zero_shared)(v163);
                                                  std::__shared_weak_count::__release_weak(v163);
                                                  if (!v166)
                                                  {
LABEL_333:
                                                    *(_BYTE *)(a1 + 2) = 1;
                                                    gss::QueryableLocker<gss::PropertyID>::~QueryableLocker((uint64_t)buf);

                                                    goto LABEL_334;
                                                  }
                                                }
                                              }
                                              else if (!v162 || !*(_BYTE *)(a2 + 144))
                                              {
                                                goto LABEL_333;
                                              }
                                              v169 = *(_QWORD *)(a3 + 304);
                                              v170 = *(std::__shared_weak_count **)(a3 + 312);
                                              if (v170)
                                              {
                                                v171 = (unint64_t *)&v170->__shared_owners_;
                                                do
                                                  v172 = __ldxr(v171);
                                                while (__stxr(v172 + 1, v171));
                                                *((_QWORD *)&v212 + 1) = v170;
                                                do
                                                  v173 = __ldxr(v171);
                                                while (__stxr(v173 + 1, v171));
                                              }
                                              else
                                              {
                                                *((_QWORD *)&v212 + 1) = 0;
                                              }
                                              v213[0] = 0;
                                              v213[1] = 0;
                                              *(_QWORD *)&v212 = v169;
                                              v214 = 0;
                                              if (v169)
                                                LODWORD(v169) = (*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)v169 + 48))(v169, v213);
                                              v214 = v169;
                                              if (v170)
                                              {
                                                v174 = (unint64_t *)&v170->__shared_owners_;
                                                do
                                                  v175 = __ldaxr(v174);
                                                while (__stlxr(v175 - 1, v174));
                                                if (!v175)
                                                {
                                                  ((void (*)(std::__shared_weak_count *))v170->__on_zero_shared)(v170);
                                                  std::__shared_weak_count::__release_weak(v170);
                                                }
                                                LODWORD(v169) = v214;
                                              }
                                              *(_BYTE *)(a1 + 4) = v169;
                                              if (!(_DWORD)v169)
                                                goto LABEL_332;
                                              if (!*(_BYTE *)(a2 + 176))
                                                *(float *)(a1 + 260) = (float)(*(float *)(a1 + 236) * 0.5)
                                                                     * *(float *)(a2 + 128);
                                              v176 = *(_QWORD *)(v212 + 24);
                                              v177 = *(float **)v176;
                                              if (*(_QWORD *)v176
                                                && (v178 = *v177, LODWORD(v177) = *v177 == 1.0, *(_BYTE *)(v176 + 10))
                                                && (v178 != 0.0 ? (v179 = v178 == 1.0) : (v179 = 1), !v179)
                                                || (v180 = *(unsigned __int8 *)(v176 + v177 + 11),
                                                    v178 = 0.0,
                                                    v180 == 2))
                                              {
                                                v223.i8[0] = 1;
                                                v222 = 1;
                                                v181 = *(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v176, 0x1C0u, v21, 0, &v223);
                                                v182 = v181
                                                     + (float)((float)(*(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v176, 0x1C0u, v21, 1u, &v222)- v181)* v178);
                                              }
                                              else
                                              {
                                                v182 = *(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(*(_QWORD *)(v212 + 24), 0x1C0u, v21, v180, 0);
                                              }
                                              v183 = v212;
                                              v184 = *(_QWORD *)(v212 + 24);
                                              v185 = *(float **)v184;
                                              if (*(_QWORD *)v184)
                                              {
                                                v186 = *v185;
                                                v187 = *v185 == 1.0;
                                                if (*(_BYTE *)(v184 + 10))
                                                {
                                                  if (v186 != 0.0 && v186 != 1.0)
                                                  {
LABEL_288:
                                                    if ((gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtZAtEnd(*(_QWORD *)(v212 + 24), 0x5Cu, v21, 0) & 1) != 0)goto LABEL_291;
                                                    v189 = 1;
LABEL_290:
                                                    if (!gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtZAtEnd(v184, 0x5Cu, v21, v189))
                                                    {
                                                      *(float *)(a1 + 132) = *(float *)(a1 + 132) * v182;
                                                      if (v185)
                                                        goto LABEL_292;
                                                      goto LABEL_300;
                                                    }
LABEL_291:
                                                    gss::RenderStyle<gss::PropertyID>::valueForKeyAtZ<geo::Color<unsigned short,4,(geo::ColorSpace)0>>((unint64_t *)&v223, v184, 0x5Cu, v21, 2u, 0);
                                                    LOWORD(v190) = v223.i16[3];
                                                    v191 = vmulq_f32(vcvtq_f32_u32(vmovl_u16(v223)), (float32x4_t)vdupq_n_s32(0x37800080u));
                                                    *(_DWORD *)(a1 + 128) = v191.i32[2];
                                                    *(_QWORD *)(a1 + 120) = v191.i64[0];
                                                    v183 = v212;
                                                    v184 = *(_QWORD *)(v212 + 24);
                                                    v185 = *(float **)v184;
                                                    *(float *)(a1 + 132) = (float)v190 * 0.000015259;
                                                    if (v185)
                                                    {
LABEL_292:
                                                      v192 = *v185;
                                                      v193 = *v185 == 1.0;
                                                      if (*(_BYTE *)(v184 + 10))
                                                      {
                                                        if (v192 != 0.0 && v192 != 1.0)
                                                        {
LABEL_302:
                                                          if ((gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtZAtEnd(v184, 0xF0u, v21, 0) & 1) != 0)goto LABEL_305;
                                                          v195 = 1;
LABEL_304:
                                                          if (!gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtZAtEnd(v184, 0xF0u, v21, v195))
                                                          {
                                                            v197 = *(float *)(a1 + 148) * v182;
LABEL_307:
                                                            *(float *)(a1 + 148) = v197;
                                                            v199 = *(_QWORD *)(v183 + 24);
                                                            v200 = *(float **)v199;
                                                            if (*(_QWORD *)v199)
                                                            {
                                                              v201 = *v200;
                                                              v202 = *v200 == 1.0;
                                                              if (*(_BYTE *)(v199 + 10))
                                                              {
                                                                if (v201 != 0.0 && v201 != 1.0)
                                                                {
LABEL_317:
                                                                  if ((gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtZAtEnd(v199, 0x5Du, v21, 0) & 1) != 0)
                                                                  {
LABEL_320:
                                                                    gss::RenderStyle<gss::PropertyID>::sampledValueForKeyAtZ<geo::Color<unsigned short,4,(geo::ColorSpace)0>>((unint64_t *)&v223, v199, 0x5Du, 2u, v112);
                                                                    *(float32x4_t *)(a1 + 152) = vmulq_f32(vcvtq_f32_u32(vmovl_u16(v223)), (float32x4_t)vdupq_n_s32(0x37800080u));
                                                                    v199 = *(_QWORD *)(v212 + 24);
                                                                    v200 = *(float **)v199;
LABEL_321:
                                                                    if (v200)
                                                                    {
                                                                      v205 = *v200;
                                                                      v206 = *v200 == 1.0;
                                                                      if (*(_BYTE *)(v199 + 10)
                                                                        && v205 != 0.0
                                                                        && v205 != 1.0)
                                                                      {
                                                                        goto LABEL_328;
                                                                      }
                                                                    }
                                                                    else
                                                                    {
                                                                      v206 = 0;
                                                                    }
                                                                    v207 = *(unsigned __int8 *)(v199 + v206 + 11);
                                                                    if (v207 != 2)
                                                                    {
LABEL_330:
                                                                      if (gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtZAtEnd(v199, 0x1A3u, v21, v207))goto LABEL_331;
LABEL_332:
                                                                      gss::QueryableLocker<gss::PropertyID>::~QueryableLocker((uint64_t)&v212);
                                                                      goto LABEL_333;
                                                                    }
LABEL_328:
                                                                    if ((gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtZAtEnd(v199, 0x1A3u, v21, 0) & 1) != 0)
                                                                    {
LABEL_331:
                                                                      gss::RenderStyle<gss::PropertyID>::sampledValueForKeyAtZ<geo::Color<unsigned short,4,(geo::ColorSpace)0>>((unint64_t *)&v223, v199, 0x1A3u, 2u, v112);
                                                                      *(float32x4_t *)(a1 + 168) = vmulq_f32(vcvtq_f32_u32(vmovl_u16(v223)), (float32x4_t)vdupq_n_s32(0x37800080u));
                                                                      goto LABEL_332;
                                                                    }
                                                                    v207 = 1;
                                                                    goto LABEL_330;
                                                                  }
                                                                  v204 = 1;
LABEL_319:
                                                                  if (!gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtZAtEnd(v199, 0x5Du, v21, v204))goto LABEL_321;
                                                                  goto LABEL_320;
                                                                }
                                                              }
                                                            }
                                                            else
                                                            {
                                                              v202 = 0;
                                                            }
                                                            v204 = *(unsigned __int8 *)(v199 + v202 + 11);
                                                            if (v204 != 2)
                                                              goto LABEL_319;
                                                            goto LABEL_317;
                                                          }
LABEL_305:
                                                          gss::RenderStyle<gss::PropertyID>::valueForKeyAtZ<geo::Color<unsigned short,4,(geo::ColorSpace)0>>((unint64_t *)&v223, v184, 0xF0u, v21, 2u, 0);
                                                          LOWORD(v196) = v223.i16[3];
                                                          v197 = (float)v196 * 0.000015259;
                                                          v198 = vmulq_f32(vcvtq_f32_u32(vmovl_u16(v223)), (float32x4_t)vdupq_n_s32(0x37800080u));
                                                          *(_DWORD *)(a1 + 144) = v198.i32[2];
                                                          *(_QWORD *)(a1 + 136) = v198.i64[0];
                                                          v183 = v212;
                                                          goto LABEL_307;
                                                        }
                                                      }
LABEL_301:
                                                      v195 = *(unsigned __int8 *)(v184 + v193 + 11);
                                                      if (v195 != 2)
                                                        goto LABEL_304;
                                                      goto LABEL_302;
                                                    }
LABEL_300:
                                                    v193 = 0;
                                                    goto LABEL_301;
                                                  }
                                                }
                                              }
                                              else
                                              {
                                                v187 = 0;
                                              }
                                              v189 = *(unsigned __int8 *)(v184 + v187 + 11);
                                              if (v189 != 2)
                                                goto LABEL_290;
                                              goto LABEL_288;
                                            }
LABEL_233:
                                            v211->i64[0] = 0;
                                            *(v10 - 22) = 0;
                                            goto LABEL_234;
                                          }
                                          objc_msgSend(WeakRetained, "lineColor");
                                          *(_OWORD *)(a1 + 104) = v212;
                                        }
LABEL_232:
                                        if (!*(_BYTE *)(a1 + 5))
                                          goto LABEL_234;
                                        goto LABEL_233;
                                      }
LABEL_227:
                                      if ((gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtZAtEnd(v140, 0x5Du, v21, 0) & 1) != 0)goto LABEL_232;
                                      v150 = 1;
                                      goto LABEL_229;
                                    }
                                    v145 = 1;
LABEL_211:
                                    if (!*(_BYTE *)(a1 + 1))
                                      goto LABEL_232;
                                    if ((gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtZAtEnd(v140, 0x5Cu, v21, v145) & 1) == 0)
                                    {
                                      if (WeakRetained)
                                      {
                                        objc_msgSend(WeakRetained, "lineColor");
                                        v146 = v212;
                                        v140 = *(_QWORD *)(*(_QWORD *)buf + 24);
                                      }
                                      else
                                      {
                                        v146 = 0uLL;
                                      }
                                      *(_OWORD *)(a1 + 88) = v146;
                                      v141 = *(float **)v140;
                                    }
                                    goto LABEL_217;
                                  }
                                }
                              }
                              else
                              {
                                v143 = 0;
                              }
                              v145 = *(unsigned __int8 *)(v140 + v143 + 11);
                              if (v145 != 2)
                                goto LABEL_211;
                              goto LABEL_207;
                            }
LABEL_140:
                            gss::RenderStyle<gss::PropertyID>::valueForKeyAtZ<geo::Color<unsigned short,4,(geo::ColorSpace)0>>((unint64_t *)buf, v69, 0x1A3u, v21, 2u, 0);
                            *(float32x4_t *)(a1 + 72) = vmulq_f32(vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)buf)), (float32x4_t)vdupq_n_s32(0x37800080u));
                            v68 = v218;
                            goto LABEL_141;
                          }
                        }
                        else
                        {
                          v75 = 0;
                        }
                        v76 = *(unsigned __int8 *)(v69 + v75 + 11);
                        if (v76 != 2)
                          goto LABEL_139;
                        goto LABEL_137;
                      }
                      v73 = 1;
LABEL_128:
                      if (!gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtZAtEnd(v69, 0xF0u, v21, v73))goto LABEL_130;
                      goto LABEL_129;
                    }
                  }
                  else
                  {
                    v72 = 0;
                  }
                  v73 = *(unsigned __int8 *)(v69 + v72 + 11);
                  if (v73 != 2)
                    goto LABEL_128;
                  goto LABEL_126;
                }
LABEL_86:
                buf[0] = 1;
                LOBYTE(v212) = 1;
                v48 = gss::RenderStyle<gss::PropertyID>::styleValueForKey<unsigned int>(v31, 0x68u, 0, buf);
                v49 = gss::RenderStyle<gss::PropertyID>::styleValueForKey<unsigned int>(v31, 0x68u, 1u, &v212);
                if (v44 >= 1.0)
                  v50 = (_DWORD *)v49;
                else
                  v50 = (_DWORD *)v48;
                *(_DWORD *)(a1 + 232) = *v50;
                if (!a4)
                  goto LABEL_100;
                goto LABEL_92;
              }
LABEL_71:
              buf[0] = 1;
              LOBYTE(v212) = 1;
              v42 = gss::RenderStyle<gss::PropertyID>::styleSampledValueForKeyAtZ<unsigned int>(v31, 0, buf, v37);
              v43 = gss::RenderStyle<gss::PropertyID>::styleSampledValueForKeyAtZ<unsigned int>(v31, 1u, (BOOL *)&v212, v37);
              if (v38 < 1.0)
                v43 = v42;
              goto LABEL_75;
            }
          }
        }
        else
        {
          v34 = 0;
        }
        v36 = *(unsigned __int8 *)(v31 + v34 + 11);
        if (v36 != 2)
          goto LABEL_60;
        goto LABEL_58;
      }
LABEL_42:
      v30 = 1;
      if ((gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtZAtEnd(v20, 0x5Du, v21, 0) & 1) != 0)
        goto LABEL_44;
      goto LABEL_43;
    }
LABEL_30:
    hasValueForKeyAtZAtEnd = 1;
    if ((gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtZAtEnd(*(_QWORD *)(v218 + 24), 0x5Cu, v21, 0) & 1) != 0)
      goto LABEL_32;
    goto LABEL_31;
  }
LABEL_334:
  gss::QueryableLocker<gss::PropertyID>::~QueryableLocker((uint64_t)&v218);
  return a1;
}

void sub_19F9122BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  uint64_t v11;
  void *v12;
  uint64_t *v13;
  uint64_t v15;
  uint64_t v16;
  va_list va;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  va_list va1;

  va_start(va1, a11);
  va_start(va, a11);
  v16 = va_arg(va1, _QWORD);
  v18 = va_arg(va1, _QWORD);
  v19 = va_arg(va1, _QWORD);
  v20 = va_arg(va1, _QWORD);
  v21 = va_arg(va1, _QWORD);
  v22 = va_arg(va1, _QWORD);
  gss::QueryableLocker<gss::PropertyID>::~QueryableLocker((uint64_t)va);

  gss::QueryableLocker<gss::PropertyID>::~QueryableLocker((uint64_t)va1);
  v15 = *v13;
  if (*v13)
  {
    *(_QWORD *)(v11 + 200) = v15;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v11 + 216) + 40))(*(_QWORD *)(v11 + 216), v15, *(_QWORD *)(v11 + 208) - v15);
  }
  _Unwind_Resume(a1);
}

void md::LabelExternalMeshRequest::~LabelExternalMeshRequest(md::LabelExternalMeshRequest *this)
{
  md::LabelExternalMeshRequest::~LabelExternalMeshRequest(this);
  JUMPOUT(0x1A1AF4E00);
}

{
  std::mutex *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  *(_QWORD *)this = &off_1E42A0A00;
  v2 = (std::mutex *)((char *)this + 96);
  std::mutex::lock((std::mutex *)((char *)this + 96));
  v3 = *((_QWORD *)this + 20);
  if (v3)
    atomic_store(1u, (unsigned __int8 *)(v3 + 116));
  std::mutex::unlock(v2);
  v4 = (std::__shared_weak_count *)*((_QWORD *)this + 21);
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  std::mutex::~mutex(v2);
}

void sub_19F912634(_Unwind_Exception *a1)
{
  std::mutex *v1;
  uint64_t v2;

  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](v2 + 160);
  std::mutex::~mutex(v1);
  _Unwind_Resume(a1);
}

void altitude::FlyoverRoadTile::append(_QWORD *a1, uint64_t a2, uint64_t **a3, uint64_t a4)
{
  uint64_t v6;
  gss::Allocator *v7;
  BOOL v8;
  uint64_t v9;
  void **v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  int v18;
  _QWORD *v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  uint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  unint64_t v26;
  unsigned __int8 v27;
  float *v28;
  _OWORD *v29;
  uint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  uint64_t v41;
  float *v42;
  float v43;
  _BOOL4 v44;
  BOOL v45;
  unsigned int v46;
  char hasValueForKeyAtEnd;
  float v48;
  _BOOL4 v49;
  char v51;
  uint64_t v52;
  uint64_t *v53;
  uint64_t *v54;
  uint64_t v55;
  uint64_t v56;
  __int128 v57;
  int64x2_t v58;
  unsigned __int8 v59;
  _QWORD *v60;
  uint64_t v61;
  _QWORD *v62;
  uint64_t v63;
  int64x2_t v64;
  unsigned __int8 v65;
  uint64_t *v66;
  unint64_t v67;
  uint64_t *v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  unint64_t v73;
  char *v74;
  uint64_t *v75;
  char *v76;
  unint64_t v77;
  uint64_t v78;
  char *v79;
  uint64_t *v80;
  uint64_t v81;
  __int128 v82;
  __int128 v83;
  uint64_t v84;
  uint64_t *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  geo::read_write_lock *v89;
  const char *v90;
  malloc_zone_t *v91;
  uint64_t v92;
  unint64_t *v93;
  unint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t *v98;
  unint64_t v99;
  gss::Allocator *v100;
  uint64_t *v101;
  uint64_t *i;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  int *v107;
  int *v108;
  int v109;
  uint64_t **v110;
  unint64_t v111;
  uint64_t *v112;
  uint64_t *v113;
  uint64_t *v114;
  uint64_t v115;
  uint64_t v116;
  unint64_t v117;
  uint64_t v118;
  unint64_t v119;
  _BYTE *v120;
  uint64_t *v121;
  uint64_t *v122;
  unint64_t v123;
  unint64_t v124;
  uint64_t v125;
  _OWORD *v126;
  uint64_t *v127;
  uint64_t v128;
  __int128 v129;
  uint64_t v130;
  uint64_t v131;
  _QWORD *v132;
  unint64_t v133;
  _QWORD *v134;
  uint64_t v135;
  uint64_t v136;
  unint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  _QWORD *v141;
  uint64_t v142;
  char *v143;
  char *v144;
  unint64_t v145;
  unint64_t v146;
  unint64_t v147;
  char *v148;
  BOOL v149;
  uint64_t v150;
  char *v151;
  _OWORD *v152;
  char *v153;
  uint64_t v154;
  __int128 v155;
  __int128 v156;
  uint64_t v157;
  char *v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  unsigned __int8 v162;
  uint64_t v163;
  unsigned __int8 v164;
  unint64_t *v165;
  unint64_t v166;
  uint64_t v167;
  int v168;
  uint64_t v169;
  geo::read_write_lock *v170;
  const char *v171;
  malloc_zone_t *zone;
  uint64_t v173;
  _OWORD *v174;
  _QWORD *v176;
  uint64_t **v177;
  uint64_t v178;
  uint64_t v180;
  std::__shared_weak_count *v181;
  uint64_t v182;
  uint64_t v183;
  unsigned __int8 v184;
  __int128 v185;
  __int128 v186;

  v6 = a1[7];
  md::createFeatureAttributeSet((gss::Allocator *)&v180, (uint64_t *)(*(_QWORD *)a2 + 24));
  *(_QWORD *)((char *)&v186 + 7) = 0;
  *(_QWORD *)&v186 = 0;
  HIBYTE(v186) = 1;
  gss::StylesheetManager<gss::PropertyID>::styleQueryForFeatureAttributes((unint64_t *)&v185, v6, (gss::FeatureAttributeSet *)&v180, (gss::QueryOverrides *)&v186);
  if (BYTE14(v186))
    v8 = 1;
  else
    v8 = (_QWORD)v186 == 0;
  if (!v8)
  {
    v9 = gss::Allocator::instance(v7);
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v9 + 40))(v9, v186, WORD6(v186));
  }
  if (v180)
  {
    v181 = (std::__shared_weak_count *)v180;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v183 + 40))(v183, v180, v182 - v180);
  }
  v10 = (void **)(a1 + 4);
  v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a1[5] - a1[4]) >> 3);
  a1[1] = v11;
  v176 = a1;
  v12 = *a1;
  v14 = (std::__shared_weak_count *)*((_QWORD *)&v185 + 1);
  v13 = v185;
  v186 = v185;
  if (*((_QWORD *)&v185 + 1))
  {
    v15 = (unint64_t *)(*((_QWORD *)&v185 + 1) + 8);
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
    v181 = v14;
    do
      v17 = __ldxr(v15);
    while (__stxr(v17 + 1, v15));
  }
  else
  {
    v181 = 0;
  }
  v182 = 0;
  v183 = 0;
  v180 = v13;
  v184 = 0;
  if (v13)
    LOBYTE(v13) = (*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)v13 + 48))(v13, &v182);
  v18 = v11 - v12;
  v184 = v13;
  v19 = v176;
  if (!v14)
    goto LABEL_21;
  p_shared_owners = (unint64_t *)&v14->__shared_owners_;
  do
    v21 = __ldaxr(p_shared_owners);
  while (__stlxr(v21 - 1, p_shared_owners));
  if (!v21)
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
    if (v18 < 2)
    {
LABEL_37:
      v35 = v176[1] - v18;
      v36 = v176[4];
      v37 = 0xAAAAAAAAAAAAAAABLL * ((v176[5] - v36) >> 3);
      if (v35 <= v37)
      {
        if (v35 < v37)
          v176[5] = v36 + 24 * v35;
      }
      else
      {
        std::vector<gm::Matrix<double,3,1>>::__append(v10, v35 - v37);
        v35 = v176[1] - v18;
      }
      v176[1] = v35;
      gss::QueryableLocker<gss::PropertyID>::~QueryableLocker((uint64_t)&v180);
      v38 = (std::__shared_weak_count *)*((_QWORD *)&v185 + 1);
      if (*((_QWORD *)&v185 + 1))
        goto LABEL_204;
      return;
    }
  }
  else
  {
LABEL_21:
    if (v18 < 2)
      goto LABEL_37;
  }
  if (!v184)
    goto LABEL_37;
  v22 = *(_QWORD *)(v180 + 24);
  v23 = *(std::__shared_weak_count **)(v22 + 24);
  v178 = *(_QWORD *)(v22 + 16);
  if (v23)
  {
    v24 = (unint64_t *)&v23->__shared_owners_;
    do
      v25 = __ldxr(v24);
    while (__stxr(v25 + 1, v24));
    do
      v26 = __ldaxr(v24);
    while (__stlxr(v26 - 1, v24));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  gss::QueryableLocker<gss::PropertyID>::~QueryableLocker((uint64_t)&v180);
  v28 = &md::SignedDistanceFieldGenerator::_hypotCache[32438];
  {
    v167 = operator new();
    mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v167, "VectorKitLabels", 0x5ED09DD50000000FLL);
  }
  v29 = (_OWORD *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc
                                                                       + 16))(mdm::Allocator::instance(void)::alloc, 80, 8);
  v29[3] = 0u;
  v29[4] = 0u;
  v29[1] = 0u;
  v29[2] = 0u;
  *v29 = 0u;
  v31 = (std::__shared_weak_count *)*((_QWORD *)&v185 + 1);
  v30 = v185;
  v186 = v185;
  if (*((_QWORD *)&v185 + 1))
  {
    v32 = (unint64_t *)(*((_QWORD *)&v185 + 1) + 8);
    do
      v33 = __ldxr(v32);
    while (__stxr(v33 + 1, v32));
    v181 = v31;
    do
      v34 = __ldxr(v32);
    while (__stxr(v34 + 1, v32));
  }
  else
  {
    v181 = 0;
  }
  v182 = 0;
  v183 = 0;
  v180 = v30;
  v184 = 0;
  v174 = v29;
  if (v30)
    LODWORD(v30) = (*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)v30 + 48))(v30, &v182);
  v184 = v30;
  if (v31)
  {
    v39 = (unint64_t *)&v31->__shared_owners_;
    do
      v40 = __ldaxr(v39);
    while (__stlxr(v40 - 1, v39));
    if (!v40)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
    LODWORD(v30) = v184;
  }
  if (!(_DWORD)v30)
  {
    LOBYTE(v46) = 0;
    goto LABEL_79;
  }
  v41 = *(_QWORD *)(v180 + 24);
  v42 = *(float **)v41;
  if (!*(_QWORD *)v41)
  {
    v44 = 0;
    goto LABEL_63;
  }
  v43 = *v42;
  v44 = *v42 == 1.0;
  if (!*(_BYTE *)(v41 + 10) || (v43 != 0.0 ? (v45 = v43 == 1.0) : (v45 = 1), v45))
  {
LABEL_63:
    v46 = *(unsigned __int8 *)(v41 + v44 + 11);
    if (v46 != 2)
      goto LABEL_65;
  }
  hasValueForKeyAtEnd = gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtEnd(*(_QWORD *)(v180 + 24), 0x12Cu, 0);
  v46 = 1;
  if ((hasValueForKeyAtEnd & 1) != 0)
    goto LABEL_79;
LABEL_65:
  if ((gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtEnd(v41, 0x12Cu, v46) & 1) != 0)
  {
    LOBYTE(v46) = 1;
    goto LABEL_79;
  }
  if (v42)
  {
    v48 = *v42;
    v49 = *v42 == 1.0;
    if (*(_BYTE *)(v41 + 10))
    {
      if (v48 != 0.0 && v48 != 1.0)
      {
LABEL_77:
        v51 = gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtEnd(v41, 0x12Du, 0);
        v46 = 1;
        if ((v51 & 1) != 0)
          goto LABEL_79;
        goto LABEL_78;
      }
    }
  }
  else
  {
    v49 = 0;
  }
  v46 = *(unsigned __int8 *)(v41 + v49 + 11);
  if (v46 == 2)
    goto LABEL_77;
LABEL_78:
  LOBYTE(v46) = gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtEnd(v41, 0x12Du, v46);
LABEL_79:
  *((_BYTE *)v174 + 72) = v46;
  gss::QueryableLocker<gss::PropertyID>::~QueryableLocker((uint64_t)&v180);
  v52 = *v176;
  *((_QWORD *)v174 + 7) = *v176;
  *((_QWORD *)v174 + 6) = v176[1] - v52;
  v53 = *a3;
  v54 = a3[1];
  if (*a3 == v54)
  {
LABEL_82:
    v55 = operator new();
    *(_QWORD *)v55 = &off_1E42AF268;
    *(_QWORD *)(v55 + 8) = 0;
    v56 = v55 + 400;
    *(_QWORD *)(v55 + 64) = 0;
    *(_QWORD *)(v55 + 40) = 0;
    *(_QWORD *)(v55 + 48) = 0;
    *(_QWORD *)(v55 + 32) = "";
    *(_DWORD *)(v55 + 56) = 0;
    *(_DWORD *)(v55 + 72) = 1065353216;
    v57 = 0uLL;
    *(_OWORD *)(v55 + 80) = 0u;
    *(_OWORD *)(v55 + 96) = 0u;
    v58 = vdupq_n_s64(1uLL);
    *(int64x2_t *)(v55 + 112) = v58;
    *(_QWORD *)(v55 + 128) = 0;
    *(_QWORD *)(v55 + 16) = &off_1E42AF548;
    *(_BYTE *)(v55 + 136) = 1;
    *(_QWORD *)(v55 + 192) = 0;
    *(_QWORD *)(v55 + 168) = 0;
    *(_QWORD *)(v55 + 176) = 0;
    *(_QWORD *)(v55 + 160) = "";
    *(_DWORD *)(v55 + 184) = 0;
    *(_DWORD *)(v55 + 200) = 1065353216;
    *(_OWORD *)(v55 + 208) = 0u;
    *(_OWORD *)(v55 + 224) = 0u;
    *(int64x2_t *)(v55 + 240) = v58;
    *(_QWORD *)(v55 + 256) = 0;
    *(_QWORD *)(v55 + 144) = &off_1E42AF548;
    *(_BYTE *)(v55 + 264) = 1;
    *(_QWORD *)(v55 + 320) = 0;
    *(_DWORD *)(v55 + 312) = 0;
    *(_QWORD *)(v55 + 288) = "";
    *(_QWORD *)(v55 + 296) = 0;
    *(_QWORD *)(v55 + 304) = 0;
    *(_DWORD *)(v55 + 328) = 1065353216;
    *(_OWORD *)(v55 + 336) = 0u;
    *(_OWORD *)(v55 + 352) = 0u;
    *(int64x2_t *)(v55 + 368) = v58;
    *(_QWORD *)(v55 + 384) = 0;
    *(_QWORD *)(v55 + 272) = &off_1E42AF548;
    *(_BYTE *)(v55 + 392) = 1;
    *(_OWORD *)(v55 + 416) = 0u;
    *(_OWORD *)(v55 + 432) = 0u;
    *(_OWORD *)(v55 + 400) = 0u;
    if ((v59 & 1) == 0)
    {
      v57 = 0uLL;
      v56 = v55 + 400;
      if (v168)
      {
        v169 = operator new();
        *(_QWORD *)(v169 + 16) = 0xA3D02C1100000005;
        *(_QWORD *)(v169 + 24) = "GeoGL";
        *(_OWORD *)(v169 + 32) = xmmword_19FFB2DE0;
        *(_QWORD *)v169 = &off_1E42B5668;
        *(_QWORD *)(v169 + 8) = "GeoGL";
        *(_OWORD *)(v169 + 72) = 0u;
        *(_OWORD *)(v169 + 88) = 0u;
        *(_OWORD *)(v169 + 104) = 0u;
        *(_OWORD *)(v169 + 120) = 0u;
        *(_OWORD *)(v169 + 136) = 0u;
        *(_OWORD *)(v169 + 152) = 0u;
        *(_OWORD *)(v169 + 168) = 0u;
        *(_OWORD *)(v169 + 184) = 0u;
        *(_OWORD *)(v169 + 200) = 0u;
        *(_OWORD *)(v169 + 216) = 0u;
        *(_OWORD *)(v169 + 232) = 0u;
        *(_QWORD *)(v169 + 248) = 0;
        *(_OWORD *)(v169 + 56) = 0u;
        v170 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v169 + 56), 0);
        if ((_DWORD)v170)
          geo::read_write_lock::logFailure(v170, (uint64_t)"initialization", v171);
        zone = malloc_create_zone(0, 0);
        *(_QWORD *)(v169 + 48) = zone;
        malloc_set_zone_name(zone, "GeoGL");
        *(_QWORD *)(v169 + 256) = os_log_create("com.apple.VectorKit", "Memory");
        ggl::Allocator::instance(void)::alloc = v169;
        v28 = md::SignedDistanceFieldGenerator::_hypotCache + 129752;
        v56 = v55 + 400;
        v57 = 0uLL;
      }
    }
    *(_QWORD *)(v55 + 448) = ggl::Allocator::instance(void)::alloc;
    *(_OWORD *)(v56 + 56) = v57;
    *(_OWORD *)(v56 + 72) = v57;
    *(_QWORD *)(v55 + 488) = 0;
    *(_QWORD *)(v55 + 496) = 32;
    v60 = malloc_type_malloc(0xF10uLL, 0xB644C221uLL);
    *v60 = 0;
    v60[1] = 0;
    *(_QWORD *)(v55 + 480) = v60;
    *(_QWORD *)(v55 + 488) = v60;
    *(_QWORD *)(v55 + 520) = 0;
    *(_QWORD *)(v55 + 504) = 0;
    *(_QWORD *)(v55 + 512) = 0;
    *(_BYTE *)(v55 + 528) = 1;
    if (a4)
    {
      v61 = 0;
      v177 = (uint64_t **)(v55 + 504);
      while (1)
      {
        v63 = operator new();
        *(_OWORD *)(v63 + 432) = 0u;
        *(_OWORD *)(v63 + 448) = 0u;
        *(_OWORD *)(v63 + 400) = 0u;
        *(_OWORD *)(v63 + 416) = 0u;
        *(_OWORD *)(v63 + 368) = 0u;
        *(_OWORD *)(v63 + 384) = 0u;
        *(_OWORD *)(v63 + 336) = 0u;
        *(_OWORD *)(v63 + 352) = 0u;
        *(_OWORD *)(v63 + 304) = 0u;
        *(_OWORD *)(v63 + 320) = 0u;
        *(_OWORD *)(v63 + 240) = 0u;
        *(_OWORD *)(v63 + 256) = 0u;
        *(_OWORD *)(v63 + 272) = 0u;
        *(_OWORD *)(v63 + 288) = 0u;
        v64 = vdupq_n_s64(1uLL);
        *(_OWORD *)(v63 + 208) = 0u;
        *(_OWORD *)(v63 + 224) = 0u;
        *(_OWORD *)(v63 + 176) = 0u;
        *(_OWORD *)(v63 + 192) = 0u;
        *(_OWORD *)(v63 + 144) = 0u;
        *(_OWORD *)(v63 + 160) = 0u;
        *(_OWORD *)(v63 + 112) = 0u;
        *(_OWORD *)(v63 + 128) = 0u;
        *(_OWORD *)(v63 + 80) = 0u;
        *(_OWORD *)(v63 + 96) = 0u;
        *(_OWORD *)(v63 + 48) = 0u;
        *(_OWORD *)(v63 + 64) = 0u;
        *(_OWORD *)(v63 + 16) = 0u;
        *(_OWORD *)(v63 + 32) = 0u;
        *(_OWORD *)v63 = 0u;
        *(_QWORD *)(v63 + 56) = &off_1E42B59B0;
        *(_BYTE *)(v63 + 48) = 1;
        *(_QWORD *)(v63 + 72) = "";
        *(_QWORD *)(v63 + 80) = 0;
        *(_DWORD *)(v63 + 96) = 0;
        *(_QWORD *)(v63 + 88) = 0;
        *(_DWORD *)(v63 + 112) = 1065353216;
        *(_OWORD *)(v63 + 120) = 0u;
        *(_OWORD *)(v63 + 136) = 0u;
        *(int64x2_t *)(v63 + 152) = v64;
        *(_QWORD *)(v63 + 176) = &off_1E42B59B0;
        *(_QWORD *)(v63 + 192) = "";
        *(_QWORD *)(v63 + 208) = 0;
        *(_QWORD *)(v63 + 200) = 0;
        *(_DWORD *)(v63 + 216) = 0;
        *(_DWORD *)(v63 + 232) = 1065353216;
        *(_OWORD *)(v63 + 240) = 0u;
        *(_OWORD *)(v63 + 256) = 0u;
        *(int64x2_t *)(v63 + 272) = v64;
        *(_QWORD *)(v63 + 296) = &off_1E42B59B0;
        *(_QWORD *)(v63 + 312) = "";
        *(_QWORD *)(v63 + 328) = 0;
        *(_QWORD *)(v63 + 320) = 0;
        *(_DWORD *)(v63 + 336) = 0;
        *(_DWORD *)(v63 + 352) = 1065353216;
        *(_OWORD *)(v63 + 360) = 0u;
        *(_OWORD *)(v63 + 376) = 0u;
        *(int64x2_t *)(v63 + 392) = v64;
        *(_OWORD *)(v63 + 408) = 0u;
        *(_OWORD *)(v63 + 424) = 0u;
        {
          v88 = operator new();
          *(_QWORD *)(v88 + 16) = 0x5ED09DD50000000FLL;
          *(_QWORD *)(v88 + 24) = "VectorKitLabels";
          *(_OWORD *)(v88 + 32) = xmmword_19FFB2E80;
          *(_QWORD *)v88 = &off_1E42B5668;
          *(_QWORD *)(v88 + 8) = "VectorKitLabels";
          *(_OWORD *)(v88 + 72) = 0u;
          *(_OWORD *)(v88 + 88) = 0u;
          *(_OWORD *)(v88 + 104) = 0u;
          *(_OWORD *)(v88 + 120) = 0u;
          *(_OWORD *)(v88 + 136) = 0u;
          *(_OWORD *)(v88 + 152) = 0u;
          *(_OWORD *)(v88 + 168) = 0u;
          *(_OWORD *)(v88 + 184) = 0u;
          *(_OWORD *)(v88 + 200) = 0u;
          *(_OWORD *)(v88 + 216) = 0u;
          *(_OWORD *)(v88 + 232) = 0u;
          *(_QWORD *)(v88 + 248) = 0;
          *(_OWORD *)(v88 + 56) = 0u;
          v89 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v88 + 56), 0);
          if ((_DWORD)v89)
            geo::read_write_lock::logFailure(v89, (uint64_t)"initialization", v90);
          v91 = malloc_create_zone(0, 0);
          *(_QWORD *)(v88 + 48) = v91;
          malloc_set_zone_name(v91, "VectorKitLabels");
          *(_QWORD *)(v88 + 256) = os_log_create("com.apple.VectorKit", "Memory");
          v28 = &md::SignedDistanceFieldGenerator::_hypotCache[32438];
          mdm::Allocator::instance(void)::alloc = v88;
        }
        *(_QWORD *)(v63 + 440) = *((_QWORD *)v28 + 299);
        *(_QWORD *)(v63 + 456) = 0;
        v66 = *(uint64_t **)(v55 + 512);
        v67 = *(_QWORD *)(v55 + 520);
        if ((unint64_t)v66 >= v67)
          break;
        *v66 = v63;
        v62 = v66 + 1;
LABEL_86:
        *(_QWORD *)(v55 + 512) = v62;
        if (++v61 == a4)
          goto LABEL_120;
      }
      v68 = *v177;
      v69 = (char *)v66 - (char *)*v177;
      v70 = v69 >> 3;
      v71 = (v69 >> 3) + 1;
      if (v71 >> 61)
        abort();
      v72 = v67 - (_QWORD)v68;
      if (v72 >> 2 > v71)
        v71 = v72 >> 2;
      if ((unint64_t)v72 >= 0x7FFFFFFFFFFFFFF8)
        v73 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v73 = v71;
      if (v73)
      {
        if (v73 >> 61)
          goto LABEL_210;
        v74 = (char *)operator new(8 * v73);
      }
      else
      {
        v74 = 0;
      }
      v75 = (uint64_t *)&v74[8 * v70];
      v76 = &v74[8 * v73];
      *v75 = v63;
      v62 = v75 + 1;
      if (v66 == v68)
      {
        *(_QWORD *)(v55 + 504) = v75;
        *(_QWORD *)(v55 + 512) = v62;
        *(_QWORD *)(v55 + 520) = v76;
      }
      else
      {
        v77 = (char *)v66 - (char *)v68 - 8;
        if (v77 <= 0x77
          || (uint64_t *)((char *)v66 - (v77 & 0xFFFFFFFFFFFFFFF8) - 8) < v75
          && &v74[v69 - (v77 & 0xFFFFFFFFFFFFFFF8) - 8] < (char *)v66)
        {
          goto LABEL_223;
        }
        v78 = (v77 >> 3) + 1;
        v79 = &v74[8 * v70 - 16];
        v80 = v66 - 4;
        v81 = v78 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v83 = *(_OWORD *)v80;
          v82 = *((_OWORD *)v80 + 1);
          *(_OWORD *)v80 = 0uLL;
          *((_OWORD *)v80 + 1) = 0uLL;
          v80 -= 4;
          *((_OWORD *)v79 - 1) = v83;
          *(_OWORD *)v79 = v82;
          v79 -= 32;
          v81 -= 4;
        }
        while (v81);
        v75 -= v78 & 0x3FFFFFFFFFFFFFFCLL;
        v66 -= v78 & 0x3FFFFFFFFFFFFFFCLL;
        if (v78 != (v78 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_223:
          do
          {
            v84 = *--v66;
            *v66 = 0;
            *--v75 = v84;
          }
          while (v66 != v68);
        }
        v66 = *(uint64_t **)(v55 + 504);
        v85 = *(uint64_t **)(v55 + 512);
        *(_QWORD *)(v55 + 504) = v75;
        *(_QWORD *)(v55 + 512) = v62;
        *(_QWORD *)(v55 + 520) = v76;
        if (v85 != v66)
        {
          v28 = md::SignedDistanceFieldGenerator::_hypotCache + 129752;
          do
          {
            v87 = *--v85;
            v86 = v87;
            *v85 = 0;
            if (v87)
              std::default_delete<md::FlyoverRoadSection>::operator()[abi:nn180100](v86);
          }
          while (v85 != v66);
          goto LABEL_114;
        }
      }
      v28 = md::SignedDistanceFieldGenerator::_hypotCache + 129752;
LABEL_114:
      if (v66)
        operator delete(v66);
      goto LABEL_86;
    }
LABEL_120:
    *(_QWORD *)v55 = &off_1E4291A40;
    v92 = *((_QWORD *)&v185 + 1);
    *(_QWORD *)(v55 + 536) = v185;
    *(_QWORD *)(v55 + 544) = v92;
    if (v92)
    {
      v93 = (unint64_t *)(v92 + 8);
      do
        v94 = __ldxr(v93);
      while (__stxr(v94 + 1, v93));
    }
    *(_QWORD *)(v55 + 552) = v178;
    v95 = operator new();
    v96 = v95;
    *(_QWORD *)v95 = &off_1E4291A80;
    *(_BYTE *)(v95 + 8) = 0;
    *(_QWORD *)(v95 + 16) = 0;
    *(_DWORD *)(v95 + 24) = 0;
    v97 = *((_QWORD *)&v185 + 1);
    *(_QWORD *)(v95 + 272) = v185;
    *(_QWORD *)(v95 + 280) = v97;
    if (v97)
    {
      v98 = (unint64_t *)(v97 + 8);
      do
        v99 = __ldxr(v98);
      while (__stxr(v99 + 1, v98));
    }
    *(_WORD *)(v95 + 292) = 0;
    *(_DWORD *)(v95 + 288) = 0;
    *(_OWORD *)(v95 + 296) = 0u;
    *(_OWORD *)(v95 + 312) = 0u;
    v100 = (gss::Allocator *)gss::Allocator::instance((gss::Allocator *)v95);
    *(_QWORD *)(v96 + 328) = v100;
    *(_QWORD *)(v96 + 344) = 0;
    *(_OWORD *)(v96 + 352) = 0u;
    *(_QWORD *)(v96 + 368) = gss::Allocator::instance(v100);
    *(_QWORD *)(v55 + 560) = v96;
    *(_OWORD *)(v55 + 568) = 0u;
    v101 = *(uint64_t **)(v55 + 504);
    for (i = *(uint64_t **)(v55 + 512); v101 != i; *(_QWORD *)(v103 + 456) = v55)
      v103 = *v101++;
    v104 = *(_QWORD *)(*(_QWORD *)a2 + 24);
    v105 = *(unsigned __int8 *)(v104 + 33);
    if (*(_BYTE *)(v104 + 33))
    {
      v106 = 0;
      v107 = *(int **)v104;
      v108 = v107;
      while (1)
      {
        v109 = *v108;
        v108 += 2;
        if (v109 == 1)
          break;
        if (v105 == ++v106)
        {
          LODWORD(v105) = 0;
          goto LABEL_134;
        }
      }
      LODWORD(v105) = v107[2 * v106 + 1];
    }
LABEL_134:
    *(_DWORD *)(*(_QWORD *)(v55 + 560) + 24) = v105;
    v110 = a3;
    v112 = a3[1];
    v111 = (unint64_t)a3[2];
    if ((unint64_t)v112 < v111)
    {
      *v112 = v55;
      v113 = v112 + 1;
      v19 = v176;
LABEL_160:
      v110[1] = v113;
      goto LABEL_161;
    }
    v114 = *a3;
    v115 = (char *)v112 - (char *)*a3;
    v116 = v115 >> 3;
    v117 = (v115 >> 3) + 1;
    if (v117 >> 61)
      abort();
    v118 = v111 - (_QWORD)v114;
    if (v118 >> 2 > v117)
      v117 = v118 >> 2;
    if ((unint64_t)v118 >= 0x7FFFFFFFFFFFFFF8)
      v119 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v119 = v117;
    if (v119)
    {
      if (v119 >> 61)
LABEL_210:
        std::__throw_bad_array_new_length[abi:nn180100]();
      v120 = operator new(8 * v119);
    }
    else
    {
      v120 = 0;
    }
    v121 = (uint64_t *)&v120[8 * v116];
    v122 = (uint64_t *)&v120[8 * v119];
    *v121 = v55;
    v113 = v121 + 1;
    if (v112 == v114)
    {
      v114 = v112;
      v19 = v176;
    }
    else
    {
      v123 = (char *)v112 - (char *)v114 - 8;
      if (v123 < 0x58)
      {
        v19 = v176;
        goto LABEL_154;
      }
      v124 = (char *)v112 - v120 - v115;
      v19 = v176;
      if (v124 < 0x20)
        goto LABEL_224;
      v125 = (v123 >> 3) + 1;
      v126 = &v120[8 * v116 - 16];
      v127 = v112 - 2;
      v128 = v125 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v129 = *(_OWORD *)v127;
        *(v126 - 1) = *((_OWORD *)v127 - 1);
        *v126 = v129;
        v126 -= 2;
        v127 -= 4;
        v128 -= 4;
      }
      while (v128);
      v121 -= v125 & 0x3FFFFFFFFFFFFFFCLL;
      v112 -= v125 & 0x3FFFFFFFFFFFFFFCLL;
      if (v125 != (v125 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_224:
        do
        {
LABEL_154:
          v130 = *--v112;
          *--v121 = v130;
        }
        while (v112 != v114);
        v114 = *a3;
      }
    }
    *a3 = v121;
    a3[1] = v113;
    a3[2] = v122;
    if (v114)
      operator delete(v114);
    v110 = a3;
    goto LABEL_160;
  }
  while (1)
  {
    v55 = *v53;
    if (*(_QWORD *)(*v53 + 552) == v178)
      break;
    if (++v53 == v54)
      goto LABEL_82;
  }
LABEL_161:
  v131 = *(_QWORD *)(*(_QWORD *)(v55 + 504) + 8 * v19[2]);
  v132 = *(_QWORD **)(v131 + 424);
  v133 = *(_QWORD *)(v131 + 432);
  if ((unint64_t)v132 < v133)
  {
    if (v132)
    {
      *v132 = v174;
      v174 = 0;
    }
    v134 = v132 + 1;
    goto LABEL_200;
  }
  v135 = *(_QWORD *)(v131 + 416);
  v136 = ((uint64_t)v132 - v135) >> 3;
  v137 = v136 + 1;
  if ((unint64_t)(v136 + 1) >> 61)
    abort();
  v138 = v133 - v135;
  if (v138 >> 2 > v137)
    v137 = v138 >> 2;
  if ((unint64_t)v138 >= 0x7FFFFFFFFFFFFFF8)
    v139 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v139 = v137;
  if (v139)
  {
    v140 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v131 + 440) + 16))(*(_QWORD *)(v131 + 440), 8 * v139, 8);
    v141 = (_QWORD *)(v140 + 8 * v136);
    v142 = v140 + 8 * v139;
    if (v140)
    {
      *v141 = v174;
      v174 = 0;
    }
  }
  else
  {
    v142 = 0;
    v141 = (_QWORD *)(8 * v136);
  }
  v134 = v141 + 1;
  v143 = *(char **)(v131 + 416);
  v144 = *(char **)(v131 + 424);
  if (v144 != v143)
  {
    v145 = v144 - v143 - 8;
    if (v145 > 0x57
      && ((v146 = (v143 - v144 + 7) & 0xFFFFFFFFFFFFFFF8,
           v147 = (unint64_t)&v144[v146],
           v148 = (char *)v141 + v146,
           v147 < (unint64_t)v141)
        ? (v149 = v148 >= v144)
        : (v149 = 1),
          v149))
    {
      v150 = (v145 >> 3) + 1;
      v151 = &v144[-8 * (v150 & 0x3FFFFFFFFFFFFFFCLL)];
      v152 = v141 - 2;
      v153 = v144 - 32;
      v154 = v150 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v156 = *(_OWORD *)v153;
        v155 = *((_OWORD *)v153 + 1);
        *(_OWORD *)v153 = 0uLL;
        *((_OWORD *)v153 + 1) = 0uLL;
        v153 -= 32;
        *(v152 - 1) = v156;
        *v152 = v155;
        v152 -= 2;
        v154 -= 4;
      }
      while (v154);
      v141 -= v150 & 0x3FFFFFFFFFFFFFFCLL;
      if (v150 == (v150 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_188:
        v144 = *(char **)(v131 + 416);
        v158 = *(char **)(v131 + 424);
        *(_QWORD *)(v131 + 416) = v141;
        *(_QWORD *)(v131 + 424) = v134;
        v159 = *(_QWORD *)(v131 + 432);
        *(_QWORD *)(v131 + 432) = v142;
        while (v158 != v144)
        {
          v161 = *((_QWORD *)v158 - 1);
          v158 -= 8;
          v160 = v161;
          *(_QWORD *)v158 = 0;
          if (v161)
          {
            {
              v163 = operator new();
              *((_QWORD *)v28 + 299) = geo::MallocZoneAllocator::MallocZoneAllocator(v163, "VectorKitLabels", 0x5ED09DD50000000FLL);
            }
            (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)v28 + 299) + 40))(*((_QWORD *)v28 + 299), v160, 80);
          }
        }
        goto LABEL_197;
      }
    }
    else
    {
      v151 = *(char **)(v131 + 424);
    }
    do
    {
      v157 = *((_QWORD *)v151 - 1);
      v151 -= 8;
      *(_QWORD *)v151 = 0;
      *--v141 = v157;
    }
    while (v151 != v143);
    goto LABEL_188;
  }
  *(_QWORD *)(v131 + 416) = v141;
  *(_QWORD *)(v131 + 424) = v134;
  v159 = *(_QWORD *)(v131 + 432);
  *(_QWORD *)(v131 + 432) = v142;
LABEL_197:
  if (v144)
    (*(void (**)(_QWORD, char *, uint64_t))(**(_QWORD **)(v131 + 440) + 40))(*(_QWORD *)(v131 + 440), v144, v159 - (_QWORD)v144);
  v19 = v176;
LABEL_200:
  *(_QWORD *)(v131 + 424) = v134;
  if (v174)
  {
    {
      v173 = operator new();
      *((_QWORD *)v28 + 299) = geo::MallocZoneAllocator::MallocZoneAllocator(v173, "VectorKitLabels", 0x5ED09DD50000000FLL);
    }
    (*(void (**)(_QWORD, _OWORD *, uint64_t))(**((_QWORD **)v28 + 299) + 40))(*((_QWORD *)v28 + 299), v174, 80);
  }
  *v19 = v19[1];
  v38 = (std::__shared_weak_count *)*((_QWORD *)&v185 + 1);
  if (*((_QWORD *)&v185 + 1))
  {
LABEL_204:
    v165 = (unint64_t *)&v38->__shared_owners_;
    do
      v166 = __ldaxr(v165);
    while (__stlxr(v166 - 1, v165));
    if (!v166)
    {
      ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
      std::__shared_weak_count::__release_weak(v38);
    }
  }
}

void sub_19F9136CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v13;
  va_list va;

  va_start(va, a13);
  gss::QueryableLocker<gss::PropertyID>::~QueryableLocker((uint64_t)va);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](v13 - 120);
  _Unwind_Resume(a1);
}

void std::vector<gm::Matrix<double,3,1>>::__append(void **a1, unint64_t a2)
{
  _BYTE *v4;
  char *v5;
  char *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  __int128 v14;

  v5 = (char *)a1[1];
  v4 = a1[2];
  if (0xAAAAAAAAAAAAAAABLL * ((v4 - v5) >> 3) >= a2)
  {
    a1[1] = &v5[24 * (24 * a2 / 0x18)];
  }
  else
  {
    v6 = (char *)*a1;
    v7 = 0xAAAAAAAAAAAAAAABLL * ((v5 - (_BYTE *)*a1) >> 3);
    v8 = v7 + a2;
    if (v7 + a2 > 0xAAAAAAAAAAAAAAALL)
      abort();
    v9 = 0xAAAAAAAAAAAAAAABLL * ((v4 - v6) >> 3);
    if (2 * v9 > v8)
      v8 = 2 * v9;
    if (v9 >= 0x555555555555555)
      v10 = 0xAAAAAAAAAAAAAAALL;
    else
      v10 = v8;
    if (v10)
    {
      if (v10 > 0xAAAAAAAAAAAAAAALL)
        std::__throw_bad_array_new_length[abi:nn180100]();
      v11 = (char *)operator new(24 * v10);
    }
    else
    {
      v11 = 0;
    }
    v12 = &v11[24 * v7];
    v13 = &v12[24 * (24 * a2 / 0x18)];
    if (v5 != v6)
    {
      do
      {
        v14 = *(_OWORD *)(v5 - 24);
        *((_QWORD *)v12 - 1) = *((_QWORD *)v5 - 1);
        *(_OWORD *)(v12 - 24) = v14;
        v12 -= 24;
        v5 -= 24;
      }
      while (v5 != v6);
      v5 = (char *)*a1;
    }
    *a1 = v12;
    a1[1] = v13;
    a1[2] = &v11[24 * v10];
    if (v5)
      operator delete(v5);
  }
}

void altitude::RoadSuperTile::~RoadSuperTile(std::mutex *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  void *v9;
  std::__shared_weak_count *sig;
  unint64_t *v11;
  unint64_t v12;

  v2 = *(_QWORD *)&this[2].__m_.__opaque[8];
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *(_QWORD *)&this[2].__m_.__opaque[16];
  if (v3)
  {
    v4 = *(_QWORD *)&this[2].__m_.__opaque[24];
    v5 = *(void **)&this[2].__m_.__opaque[16];
    if (v4 == v3)
    {
LABEL_16:
      *(_QWORD *)&this[2].__m_.__opaque[24] = v3;
      operator delete(v5);
      goto LABEL_17;
    }
    while (1)
    {
      v6 = *(std::__shared_weak_count **)(v4 - 8);
      if (v6)
      {
        p_shared_owners = (unint64_t *)&v6->__shared_owners_;
        do
          v8 = __ldaxr(p_shared_owners);
        while (__stlxr(v8 - 1, p_shared_owners));
        if (!v8)
          break;
      }
      v9 = *(void **)(v4 - 40);
      if (v9)
        goto LABEL_12;
LABEL_6:
      v4 -= 72;
      if (v4 == v3)
      {
        v5 = *(void **)&this[2].__m_.__opaque[16];
        goto LABEL_16;
      }
    }
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
    v9 = *(void **)(v4 - 40);
    if (!v9)
      goto LABEL_6;
LABEL_12:
    *(_QWORD *)(v4 - 32) = v9;
    operator delete(v9);
    goto LABEL_6;
  }
LABEL_17:
  sig = (std::__shared_weak_count *)this[2].__m_.__sig;
  if (sig)
  {
    v11 = (unint64_t *)&sig->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))sig->__on_zero_shared)(sig);
      std::__shared_weak_count::__release_weak(sig);
    }
  }
  std::mutex::~mutex(this);
}

void altitude::RoadSuperTile::initialize(altitude::RoadSuperTile *this, int a2, md::realistic::RoadRenderLayer *a3, double a4, double a5, double a6, double a7, double a8, float a9, float a10)
{
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  char *v22;
  char *v23;
  char *v24;
  altitude::RoadSuperTile *v25;
  char *v26;
  char *v27;
  __int128 v28;
  _BYTE *v29;
  _BYTE *v30;
  int64_t v31;
  char *v32;
  size_t v33;
  uint64_t v34;
  unint64_t *v35;
  unint64_t v36;
  _QWORD *v37;
  _QWORD *v38;
  std::__shared_weak_count *v39;
  unint64_t *p_shared_owners;
  unint64_t v41;
  void *v42;
  char *v43;
  void *v44;
  _QWORD *v45;
  _QWORD *v46;
  uint64_t v47;
  altitude::RoadSuperTile *v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t *v51;
  unint64_t v52;
  _QWORD *v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  void *v60;
  _BOOL4 v61;
  unsigned int v62;
  int v63;
  int v64;
  uint64_t v65;
  int v66;
  uint64_t v67;
  int v68;
  int v69;
  unsigned int v70;
  unsigned int v71;
  uint64_t v72;
  uint64_t v74;
  float v75;
  float v76;
  float v77;
  float v78;
  char *v79;
  unsigned int v80;
  float v81;
  float v82;
  _QWORD *v83;
  unint64_t v84;
  float *v85;
  float v86;
  BOOL v87;
  BOOL v88;
  uint64_t v89;
  uint64_t v90;
  char v91;
  float v92;
  _QWORD *v93;
  float v94;
  float *v95;
  uint64_t v96;
  uint64_t v97;
  float v98;
  float v99;
  _BOOL4 v101;
  float v102;
  _QWORD *v103;
  float v104;
  _QWORD *v105;
  uint64_t v106;
  uint64_t v107;
  float v108;
  float v109;
  float v110;
  float v111;
  float v112;
  float v113;
  float v114;
  float v115;
  float v116;
  unint64_t v117;
  uint64_t v118;
  __int128 *v119;
  unint64_t v120;
  char *v121;
  unint64_t v122;
  unint64_t v123;
  unint64_t v124;
  char *v125;
  __int128 v126;
  char *v127;
  char *v128;
  __int128 v129;
  char *v130;
  void *v131;
  float v132;
  float v133;
  float v134;
  float v135;
  float v136;
  double v137;
  double v138;
  double v139;
  unint64_t v140;
  double *v141;
  double *v142;
  double *v143;
  unint64_t v144;
  unint64_t v145;
  unint64_t v146;
  float v147;
  float v148;
  char *v149;
  double *v150;
  double *v151;
  __int128 v152;
  float v153;
  float v154;
  float v155;
  float v156;
  float v158;
  float v159;
  double v160;
  double v161;
  double v162;
  unint64_t v163;
  double *v164;
  double *v165;
  unint64_t v166;
  double *v167;
  double v168;
  double v169;
  double v170;
  double v171;
  double *v172;
  double *v173;
  unint64_t v174;
  unint64_t v175;
  unint64_t v176;
  float v177;
  float v178;
  char *v179;
  double *v180;
  unint64_t v181;
  unint64_t v182;
  unint64_t v183;
  float v184;
  char *v185;
  double *v186;
  double *v187;
  __int128 v188;
  double *v189;
  double *v190;
  __int128 v191;
  float v192;
  double v193;
  double v194;
  double v195;
  float v196;
  float v197;
  double *v198;
  double *v199;
  unint64_t v200;
  unint64_t v201;
  unint64_t v202;
  char *v203;
  double *v204;
  double *v205;
  __int128 v206;
  float v207;
  float v208;
  char *v209;
  _BYTE *v210;
  uint64_t v211;
  char *v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t *v219;
  uint64_t *v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  char *v225;
  char *v226;
  int64_t v227;
  _QWORD *v228;
  uint64_t v229;
  uint64_t v230;
  char *v231;
  _QWORD *v232;
  _QWORD **v233;
  _QWORD **v234;
  char *v235;
  _QWORD *v236;
  uint64_t **v237;
  uint64_t **i;
  _QWORD *v239;
  uint64_t *v240;
  uint64_t v241;
  uint64_t v242;
  BOOL v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  unint64_t v249;
  unint64_t v250;
  _BYTE *v251;
  char *v252;
  unint64_t v253;
  char *v254;
  uint64_t v255;
  uint64_t v256;
  _OWORD *v257;
  char *v258;
  uint64_t v259;
  __int128 v260;
  gdc::GlobeTileGrid *v261;
  gdc::GlobeTileGrid *v262;
  gdc::GlobeTileGrid *v263;
  uint64_t v264;
  unint64_t v265;
  unint64_t v266;
  uint64_t v267;
  uint64_t v268;
  unint64_t v269;
  void *v270;
  std::__shared_weak_count *v271;
  unint64_t *v272;
  std::__shared_count v273;
  unsigned __int8 v274;
  std::__shared_weak_count *v275;
  unint64_t *v276;
  std::__shared_count v277;
  unsigned __int8 v278;
  uint64_t v279;
  unint64_t v280;
  unint64_t v281;
  unsigned __int8 v282;
  uint64_t v283;
  unsigned __int8 v284;
  uint64_t v285;
  std::__shared_weak_count *v286;
  unint64_t v287;
  std::__shared_weak_count *v288;
  unint64_t *v289;
  unint64_t v290;
  unint64_t v291;
  std::__shared_weak_count *v292;
  unint64_t *v293;
  unint64_t v294;
  unint64_t v295;
  unint64_t v296;
  unint64_t v297;
  uint64_t *v298;
  _QWORD *v299;
  uint64_t *v300;
  uint64_t v301;
  uint64_t v302;
  unint64_t v303;
  uint64_t v304;
  unint64_t v305;
  unint64_t v306;
  _BYTE *v307;
  uint64_t *v308;
  unint64_t v309;
  uint64_t v310;
  _OWORD *v311;
  uint64_t *v312;
  uint64_t v313;
  __int128 v314;
  uint64_t v315;
  _QWORD *v316;
  uint64_t v317;
  unint64_t v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t *v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t v330;
  _QWORD **v331;
  _QWORD **v332;
  uint64_t v333;
  _QWORD *v334;
  uint64_t v335;
  uint64_t v336;
  uint64_t v337;
  unint64_t v338;
  unint64_t v339;
  _QWORD *v340;
  int v341;
  uint64_t v342;
  geo::read_write_lock *v343;
  const char *v344;
  malloc_zone_t *zone;
  int v346;
  uint64_t v347;
  geo::read_write_lock *v348;
  const char *v349;
  malloc_zone_t *v350;
  unsigned __int8 v351;
  int v352;
  uint64_t v353;
  geo::read_write_lock *v354;
  const char *v355;
  malloc_zone_t *v356;
  int v357;
  uint64_t v358;
  uint64_t v359;
  geo::read_write_lock *v360;
  const char *v361;
  malloc_zone_t *v362;
  uint64_t v363;
  uint64_t *v364;
  uint64_t *v365;
  altitude::RoadSuperTile *v366;
  uint64_t *v367;
  uint64_t v368;
  uint64_t v369;
  uint64_t v370;
  void *v371;
  uint64_t v372;
  uint64_t v373;
  std::__shared_weak_count *v374;
  unint64_t *v375;
  unint64_t v376;
  unint64_t *v377;
  unint64_t v378;
  std::__shared_weak_count *v379;
  unint64_t *v380;
  unint64_t v381;
  _OWORD *v382;
  uint64_t j;
  uint64_t v384;
  unsigned int v385;
  float *v386;
  float v387;
  BOOL v388;
  unsigned int v389;
  int v390;
  int v391;
  uint64_t k;
  int *v393;
  int *v394;
  unint64_t v395;
  uint64_t v396;
  int v397;
  void **v398;
  int **v399;
  int *v400;
  int *v401;
  uint64_t v402;
  uint64_t v403;
  uint64_t v404;
  int *v405;
  int v406;
  int v407;
  void **v409;
  int *v410;
  _QWORD *v411;
  int *v412;
  unint64_t v413;
  uint64_t v414;
  unint64_t v415;
  unint64_t v416;
  _BYTE *v417;
  int *v418;
  unint64_t v419;
  uint64_t v420;
  _OWORD *v421;
  __int128 *v422;
  uint64_t v423;
  __int128 v424;
  int v425;
  uint64_t v426;
  int v427;
  void **v428;
  unsigned int *v429;
  _BYTE *v430;
  uint64_t v431;
  uint64_t v432;
  unsigned int v433;
  unint64_t v434;
  int32x4_t v435;
  int32x4_t *v436;
  int32x4_t v437;
  unint64_t v438;
  int32x4_t v439;
  unint64_t v440;
  unsigned int *v441;
  int v442;
  uint64_t v443;
  uint64_t m;
  uint64_t v445;
  uint64_t v446;
  uint64_t v447;
  uint64_t v448;
  uint64_t v449;
  uint64_t v450;
  void **v451;
  char *v452;
  char *v453;
  unint64_t v454;
  int v455;
  int v456;
  int v457;
  unsigned int v458;
  int v459;
  uint64_t v460;
  uint64_t *v461;
  uint64_t *v462;
  uint64_t v463;
  std::__shared_weak_count *v464;
  unint64_t *v465;
  unint64_t v466;
  uint64_t v467;
  void *v468;
  std::__shared_weak_count *v469;
  unint64_t *v470;
  unint64_t v471;
  unint64_t v472;
  unint64_t *v473;
  unint64_t v474;
  uint64_t v475;
  float *v476;
  float v477;
  _BOOL4 v478;
  _QWORD *v480;
  void *v481;
  _QWORD *v482;
  uint64_t v483;
  std::__shared_weak_count *v484;
  uint64_t v485;
  std::__shared_weak_count *v486;
  uint64_t v487;
  _QWORD *v488;
  uint64_t v489;
  std::__shared_weak_count *v490;
  uint64_t v491;
  std::__shared_weak_count *v492;
  uint64_t v493;
  uint64_t v494;
  uint64_t v495;
  __int128 v496;
  std::__shared_weak_count *v497;
  unint64_t *v498;
  unint64_t v499;
  __int128 v500;
  std::__shared_weak_count *v501;
  unint64_t *v502;
  unint64_t v503;
  _QWORD *v504;
  _QWORD *v505;
  uint64_t *v506;
  uint64_t *v507;
  std::__shared_weak_count *v508;
  uint64_t v509;
  std::__shared_weak_count *v510;
  unint64_t *v511;
  uint64_t v512;
  uint64_t v513;
  _QWORD *v514;
  uint64_t v515;
  _QWORD *v516;
  uint64_t v517;
  uint64_t v518;
  unint64_t v519;
  std::__shared_weak_count *v520;
  unint64_t *v521;
  unint64_t v522;
  unsigned int v523;
  float v524;
  _BOOL4 v525;
  unint64_t *v527;
  unint64_t v528;
  std::__shared_weak_count *v529;
  unint64_t *v530;
  unint64_t v531;
  __int128 v532;
  std::__shared_weak_count *v533;
  unint64_t *v534;
  unint64_t v535;
  __int128 v536;
  std::__shared_weak_count *v537;
  unint64_t *v538;
  unint64_t v539;
  uint64_t v540;
  uint64_t v541;
  uint64_t *v542;
  uint64_t *v543;
  std::__shared_weak_count *v544;
  uint64_t v545;
  std::__shared_weak_count *v546;
  unint64_t *v547;
  uint64_t v548;
  uint64_t v549;
  uint64_t v550;
  uint64_t v551;
  uint64_t v552;
  uint64_t v553;
  uint64_t v554;
  unint64_t v555;
  std::__shared_weak_count *v556;
  unint64_t *v557;
  unint64_t v558;
  unint64_t *v559;
  unint64_t v560;
  unint64_t *v561;
  std::__shared_weak_count *v562;
  unint64_t *v563;
  unint64_t v564;
  std::__shared_weak_count *v565;
  unint64_t *v566;
  unint64_t v567;
  std::__shared_weak_count *v568;
  unint64_t *v569;
  unint64_t v570;
  std::__shared_weak_count *v571;
  unint64_t *v572;
  unint64_t v573;
  std::__shared_weak_count *v574;
  unint64_t *v575;
  unint64_t v576;
  std::__shared_weak_count *v577;
  unint64_t *v578;
  unint64_t v579;
  std::__shared_weak_count *v580;
  unint64_t *v581;
  unint64_t v582;
  unsigned int v583;
  _QWORD *v584;
  void *v585;
  _QWORD *v586;
  uint64_t v587;
  std::__shared_weak_count *v588;
  uint64_t v589;
  std::__shared_weak_count *v590;
  uint64_t v591;
  __int128 v592;
  std::__shared_weak_count *v593;
  unint64_t *v594;
  unint64_t v595;
  uint64_t v596;
  uint64_t *v597;
  uint64_t *v598;
  std::__shared_weak_count *v599;
  unint64_t *v600;
  uint64_t v601;
  uint64_t v602;
  uint64_t v603;
  uint64_t v604;
  unint64_t v605;
  unint64_t *v606;
  unint64_t v607;
  std::__shared_weak_count *v608;
  unint64_t *v609;
  unint64_t v610;
  std::__shared_weak_count *v611;
  unint64_t *v612;
  unint64_t v613;
  std::__shared_weak_count *v614;
  unint64_t *v615;
  unint64_t v616;
  unint64_t *v617;
  std::__shared_weak_count *v618;
  unint64_t *v619;
  unint64_t v620;
  char hasValueForKeyAtEnd;
  int v622;
  double v623;
  long double v624;
  long double v625;
  double v626;
  long double v627;
  double v628;
  __double2 v629;
  double v630;
  __double2 v631;
  double v632;
  int v633;
  int v634;
  _QWORD *v635;
  double v636;
  int v637;
  unsigned int v638;
  double v640;
  uint64_t v641;
  double v642;
  double v643;
  double v644;
  float v645;
  gdc::GlobeTileGrid **v646;
  uint64_t v647;
  void **v648;
  float v650;
  float v651;
  unint64_t v652;
  float v653;
  float v654;
  float v655;
  QuadTile *v656;
  QuadTile *v657;
  float v658;
  _QWORD *v659;
  std::__shared_weak_count *v660;
  uint64_t v661;
  uint64_t *v662;
  uint64_t v663;
  uint64_t v664;
  uint64_t v665;
  _QWORD *v666;
  uint64_t *v667;
  uint64_t *v668;
  float v669;
  uint64_t v670;
  float v671;
  _QWORD **v672;
  std::__shared_weak_count *v673;
  _OWORD *v674;
  uint64_t v675;
  uint64_t v676;
  uint64_t v677;
  void *v678;
  char *v679;
  uint64_t v680;
  uint64_t v681;
  std::__shared_weak_count *v682;
  _QWORD v683[2];
  unsigned __int8 v684;
  _OWORD v685[5];
  uint64_t v686;
  std::__shared_weak_count *v687;
  uint64_t v688;
  std::__shared_weak_count *v689;
  __int128 v690;
  __int128 v691;
  uint64_t v692;
  std::__shared_weak_count *v693;
  uint64_t v694;
  std::__shared_weak_count *v695;
  __int128 v696;
  uint64_t v697;
  std::__shared_weak_count *v698;
  uint64_t v699;
  std::__shared_weak_count *v700;
  void *v701[2];
  void *v702[2];
  __int128 v703;
  void *v704[2];
  void *v705[2];
  __int128 v706;
  void *v707[2];
  void *v708[2];
  __int128 v709;
  void *v710[2];
  void *v711[2];
  __int128 v712;
  void *v713[2];
  void *v714[2];
  __int128 v715;
  void *v716[2];
  void *v717[2];
  __int128 v718;
  void *v719[2];
  void *v720[2];
  __int128 v721;
  void *v722[2];
  void *v723[2];
  __int128 v724;
  void *v725[2];
  void *v726[2];
  __int128 v727;
  void *v728[2];
  void *__p[2];
  __int128 v730;
  uint64_t v731;

  v731 = *MEMORY[0x1E0C80C00];
  *((_DWORD *)this + 19) = a2;
  v10 = (1 << (2 * (a2 - *((_BYTE *)this + 72))));
  v11 = *((_QWORD *)this + 19);
  v12 = *((_QWORD *)this + 20);
  v13 = 0x8E38E38E38E38E39 * ((v12 - v11) >> 3);
  v14 = v10 - v13;
  if (v10 <= v13)
  {
    if (v10 >= v13)
    {
      v37 = (_QWORD *)*((_QWORD *)this + 20);
      v25 = this;
      goto LABEL_44;
    }
    v37 = (_QWORD *)(v11 + 72 * v10);
    v25 = this;
    if ((_QWORD *)v12 == v37)
    {
LABEL_36:
      *((_QWORD *)v25 + 20) = v37;
      goto LABEL_44;
    }
    while (1)
    {
      v38 = v37;
      v39 = *(std::__shared_weak_count **)(v12 - 8);
      if (v39)
      {
        p_shared_owners = (unint64_t *)&v39->__shared_owners_;
        do
          v41 = __ldaxr(p_shared_owners);
        while (__stlxr(v41 - 1, p_shared_owners));
        if (!v41)
          break;
      }
      v42 = *(void **)(v12 - 40);
      if (v42)
        goto LABEL_30;
LABEL_24:
      v12 -= 72;
      v37 = v38;
      if ((_QWORD *)v12 == v38)
        goto LABEL_36;
    }
    ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
    std::__shared_weak_count::__release_weak(v39);
    v42 = *(void **)(v12 - 40);
    if (!v42)
      goto LABEL_24;
LABEL_30:
    *(_QWORD *)(v12 - 32) = v42;
    operator delete(v42);
    goto LABEL_24;
  }
  v15 = *((_QWORD *)this + 21);
  if (0x8E38E38E38E38E39 * ((v15 - v12) >> 3) >= v14)
  {
    v37 = (_QWORD *)(v12 + 72 * v14);
    do
    {
      *(_QWORD *)v12 = 0;
      *(_QWORD *)(v12 + 8) = 0;
      *(_BYTE *)(v12 + 24) = 0;
      *(_QWORD *)(v12 + 16) = 0;
      *(_OWORD *)(v12 + 32) = 0uLL;
      *(_OWORD *)(v12 + 48) = 0uLL;
      *(_QWORD *)(v12 + 64) = 0;
      v12 += 72;
    }
    while ((_QWORD *)v12 != v37);
    v25 = this;
    goto LABEL_36;
  }
  v16 = 0x8E38E38E38E38E39 * ((v15 - v11) >> 3);
  v17 = 2 * v16;
  if (2 * v16 <= v10)
    v17 = (1 << (2 * (a2 - *((_BYTE *)this + 72))));
  if (v16 >= 0x1C71C71C71C71C7)
    v18 = 0x38E38E38E38E38ELL;
  else
    v18 = v17;
  *(_QWORD *)&v703 = (char *)this + 168;
  if (v18 > 0x38E38E38E38E38ELL)
LABEL_745:
    std::__throw_bad_array_new_length[abi:nn180100]();
  v19 = 72 * v18;
  v20 = (char *)operator new(72 * v18);
  v21 = &v20[72 * v13];
  v701[0] = v20;
  v701[1] = v21;
  v22 = &v20[v19];
  v702[1] = &v20[v19];
  v23 = &v20[72 * v10];
  v24 = v21;
  do
  {
    *(_QWORD *)v24 = 0;
    *((_QWORD *)v24 + 1) = 0;
    v24[24] = 0;
    *((_QWORD *)v24 + 2) = 0;
    *((_OWORD *)v24 + 2) = 0uLL;
    *((_OWORD *)v24 + 3) = 0uLL;
    *((_QWORD *)v24 + 8) = 0;
    v24 += 72;
  }
  while (v24 != v23);
  v702[0] = &v20[72 * v10];
  v25 = this;
  v26 = (char *)*((_QWORD *)this + 19);
  v27 = (char *)*((_QWORD *)this + 20);
  if (v27 == v26)
  {
    v43 = (char *)*((_QWORD *)this + 20);
  }
  else
  {
    do
    {
      v28 = *(_OWORD *)(v27 - 72);
      *(_OWORD *)(v21 - 63) = *(_OWORD *)(v27 - 63);
      *(_OWORD *)(v21 - 72) = v28;
      *((_QWORD *)v21 - 4) = 0;
      *((_QWORD *)v21 - 3) = 0;
      *((_QWORD *)v21 - 5) = 0;
      v30 = (_BYTE *)*((_QWORD *)v27 - 5);
      v29 = (_BYTE *)*((_QWORD *)v27 - 4);
      v31 = v29 - v30;
      if (v29 != v30)
      {
        if (0xAAAAAAAAAAAAAAABLL * (v31 >> 3) > 0xAAAAAAAAAAAAAAALL)
          abort();
        v32 = (char *)operator new(v31);
        *((_QWORD *)v21 - 5) = v32;
        *((_QWORD *)v21 - 4) = v32;
        *((_QWORD *)v21 - 3) = &v32[8 * (v31 >> 3)];
        v33 = 24 * ((v31 - 24) / 0x18uLL) + 24;
        memcpy(v32, v30, v33);
        *((_QWORD *)v21 - 4) = &v32[v33];
      }
      *((_QWORD *)v21 - 2) = *((_QWORD *)v27 - 2);
      v34 = *((_QWORD *)v27 - 1);
      *((_QWORD *)v21 - 1) = v34;
      if (v34)
      {
        v35 = (unint64_t *)(v34 + 8);
        do
          v36 = __ldxr(v35);
        while (__stxr(v36 + 1, v35));
      }
      v21 -= 72;
      v27 -= 72;
    }
    while (v27 != v26);
    v25 = this;
    v43 = (char *)*((_QWORD *)this + 19);
    v27 = (char *)*((_QWORD *)this + 20);
    v23 = (char *)v702[0];
    v22 = (char *)v702[1];
  }
  *((_QWORD *)v25 + 19) = v21;
  *((_QWORD *)v25 + 20) = v23;
  v44 = (void *)*((_QWORD *)v25 + 21);
  *((_QWORD *)v25 + 21) = v22;
  v702[1] = v44;
  v701[1] = v43;
  v701[0] = v43;
  if (v27 == v43)
  {
    if (!v27)
      goto LABEL_43;
    goto LABEL_42;
  }
  do
  {
    v702[0] = v27 - 72;
    v57 = (std::__shared_weak_count *)*((_QWORD *)v27 - 1);
    if (!v57)
      goto LABEL_60;
    v58 = (unint64_t *)&v57->__shared_owners_;
    do
      v59 = __ldaxr(v58);
    while (__stlxr(v59 - 1, v58));
    if (v59)
    {
LABEL_60:
      v60 = (void *)*((_QWORD *)v27 - 5);
      if (!v60)
        goto LABEL_55;
LABEL_61:
      *((_QWORD *)v27 - 4) = v60;
      operator delete(v60);
      goto LABEL_55;
    }
    ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
    std::__shared_weak_count::__release_weak(v57);
    v60 = (void *)*((_QWORD *)v27 - 5);
    if (v60)
      goto LABEL_61;
LABEL_55:
    v27 = (char *)v702[0];
  }
  while (v702[0] != v43);
  v27 = (char *)v701[0];
  v25 = this;
  if (v701[0])
LABEL_42:
    operator delete(v27);
LABEL_43:
  v37 = (_QWORD *)*((_QWORD *)v25 + 20);
LABEL_44:
  v45 = (_QWORD *)*((_QWORD *)v25 + 19);
  v46 = v37;
  if (v37 != v45)
  {
    v47 = 0;
    v48 = v25;
    do
    {
      v50 = *((_QWORD *)v48 + 15);
      v49 = *((_QWORD *)v48 + 16);
      if (v49)
      {
        v51 = (unint64_t *)(v49 + 8);
        do
          v52 = __ldxr(v51);
        while (__stxr(v52 + 1, v51));
      }
      v45[9 * v47 + 7] = v50;
      v53 = &v45[9 * v47];
      v54 = (std::__shared_weak_count *)v53[8];
      v53[8] = v49;
      if (v54)
      {
        v55 = (unint64_t *)&v54->__shared_owners_;
        do
          v56 = __ldaxr(v55);
        while (__stlxr(v56 - 1, v55));
        if (!v56)
        {
          ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
          std::__shared_weak_count::__release_weak(v54);
        }
      }
      v48 = this;
      v45 = (_QWORD *)*((_QWORD *)this + 19);
      v45[9 * v47 + 2] = v47;
      ++v47;
      v37 = (_QWORD *)*((_QWORD *)this + 20);
    }
    while (0x8E38E38E38E38E39 * (v37 - v45) != v47);
    v46 = (_QWORD *)*((_QWORD *)this + 19);
    v25 = this;
  }
  v678 = 0;
  v679 = 0;
  v61 = 1;
  v680 = 0;
  if (v46 == v37)
  {
    v210 = 0;
    v209 = 0;
    goto LABEL_254;
  }
  v62 = 0;
  v64 = *((_DWORD *)v25 + 18);
  v63 = *((_DWORD *)v25 + 19);
  v637 = v63 - v64;
  v636 = 1.0 / (double)(1 << (v63 - v64));
  v65 = *((_QWORD *)v25 + 17);
  v633 = 2 * v63 - 2 * v64 - 2;
  v634 = v64 - v63;
  v635 = v37;
  v647 = v65;
  while (2)
  {
    v638 = v62;
    if (v637)
    {
      v66 = 0;
      LODWORD(v67) = 0;
      v68 = v633;
      v69 = v634;
      do
      {
        v70 = v62 >> v68;
        v62 -= v62 >> v68 << v68;
        v71 = v70 >> 1;
        v72 = v70 & 1 | (2 * v66);
        v67 = v71 + 2 * (_DWORD)v67;
        v68 -= 2;
        v66 = v72;
      }
      while (!__CFADD__(v69++, 1));
      v74 = v72 | (v67 << 32);
    }
    else
    {
      v74 = 0;
    }
    v75 = v636 * (double)(int)v74;
    v658 = v75;
    v76 = v636 * (double)SHIDWORD(v74);
    v671 = v76;
    v77 = v636 * (double)((int)v74 + 1);
    v655 = v77;
    v78 = v636 * (double)(HIDWORD(v74) + 1);
    v669 = v78;
    v79 = *(char **)(v65 + 48);
    v701[0] = v79;
    v701[1] = *(void **)(v65 + 56);
    v80 = v701[1];
    while (2)
    {
      if (v79 != *(char **)(v65 + 64) || v80 != *(_DWORD *)(v65 + 72))
      {
        *(_QWORD *)&v685[0] = 0;
        v81 = a9;
        v82 = a10;
        geo::codec::multiSectionFeaturePoints(v79, v80, v685);
        v665 = *(_QWORD *)&v685[0];
        if (*(_QWORD *)&v685[0] < 2uLL)
        {
          a10 = v82;
          a9 = v81;
          goto LABEL_241;
        }
        *(_QWORD *)&v685[0] = 0;
        v83 = v701[0];
        v84 = LODWORD(v701[1]);
        v88 = geo::codec::multiSectionFeaturePoints((_QWORD *)v701[0], LODWORD(v701[1]), v685)
           && ((*(_QWORD *)&v685[0] = 0,
                v85 = (float *)geo::codec::multiSectionFeaturePoints(v83, v84, v685),
                v86 = v85[1],
                v86 > v671)
             ? (v87 = v86 < v669)
             : (v87 = 0),
               v87)
           && *v85 < v655
           && *v85 > v658;
        *(_QWORD *)&v685[0] = 0;
        v89 = geo::codec::multiSectionFeatureElevations((uint64_t)v83, v84, v685);
        v90 = 0;
        v91 = 1;
        v92 = v82;
        while (2)
        {
          *(_QWORD *)&v685[0] = 0;
          v93 = geo::codec::multiSectionFeaturePoints(v83, v84, v685);
          if (v89)
            v94 = *(float *)(v89 + 4 * v90);
          else
            v94 = -3.4028e38;
          v95 = (float *)&v93[v90];
          v97 = *(unsigned int *)v95;
          v96 = *((unsigned int *)v95 + 1);
          v98 = *v95;
          v99 = v95[1];
          if (v99 <= v671 || v99 >= v669)
          {
            v101 = 0;
            if (v90)
              goto LABEL_100;
LABEL_106:
            a9 = v81;
            a10 = v92;
LABEL_150:
            if (v101)
            {
LABEL_151:
              v137 = v98;
              v138 = v99;
              v139 = v94;
              v141 = (double *)v46[5];
              v140 = v46[6];
              if ((unint64_t)v141 >= v140)
              {
                v143 = (double *)v46[4];
                v144 = 0xAAAAAAAAAAAAAAABLL * (v141 - v143) + 1;
                if (v144 > 0xAAAAAAAAAAAAAAALL)
                  goto LABEL_744;
                v145 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v140 - (_QWORD)v143) >> 3);
                if (2 * v145 > v144)
                  v144 = 2 * v145;
                if (v145 >= 0x555555555555555)
                  v146 = 0xAAAAAAAAAAAAAAALL;
                else
                  v146 = v144;
                if (v146)
                {
                  if (v146 > 0xAAAAAAAAAAAAAAALL)
                    goto LABEL_745;
                  v147 = a10;
                  v148 = a9;
                  v149 = (char *)operator new(24 * v146);
                }
                else
                {
                  v147 = a10;
                  v148 = a9;
                  v149 = 0;
                }
                v150 = (double *)&v149[8 * (v141 - v143)];
                *v150 = v137;
                v150[1] = v138;
                v150[2] = v139;
                v151 = v150;
                if (v141 != v143)
                {
                  do
                  {
                    v152 = *(_OWORD *)(v141 - 3);
                    *(v151 - 1) = *(v141 - 1);
                    *(_OWORD *)(v151 - 3) = v152;
                    v151 -= 3;
                    v141 -= 3;
                  }
                  while (v141 != v143);
                  v141 = (double *)v46[4];
                }
                v142 = v150 + 3;
                v46[4] = v151;
                v46[5] = v150 + 3;
                v46[6] = &v149[24 * v146];
                if (v141)
                  operator delete(v141);
                a9 = v148;
                a10 = v147;
              }
              else
              {
                *v141 = v137;
                v141[1] = v138;
                v142 = v141 + 3;
                v141[2] = v139;
              }
              v46[5] = v142;
              v88 = 1;
              goto LABEL_90;
            }
            if (++v90 == v665)
              goto LABEL_240;
            v88 = 0;
LABEL_91:
            v83 = v701[0];
            v84 = LODWORD(v701[1]);
            v92 = a10;
            v81 = a9;
            continue;
          }
          break;
        }
        v101 = v98 < v655 && v98 > v658;
        if (!v90)
          goto LABEL_106;
LABEL_100:
        v102 = v94;
        *(_QWORD *)&v685[0] = 0;
        v103 = geo::codec::multiSectionFeaturePoints(v83, v84, v685);
        if (v89)
          v104 = *(float *)(v89 - 4 + 4 * v90);
        else
          v104 = -3.4028e38;
        v105 = &v103[v90];
        v106 = *((unsigned int *)v105 - 2);
        v107 = *((unsigned int *)v105 - 1);
        if ((v97 | (v96 << 32)) == (v106 | (v107 << 32)))
        {
          a9 = v81;
          a10 = v92;
LABEL_90:
          if (++v90 == v665)
          {
            if (v101)
            {
              v207 = a9;
              v208 = a10;
              altitude::FlyoverRoadTile::append(v46, (uint64_t)v701, (uint64_t **)&v678, 0x8E38E38E38E38E39 * ((uint64_t)(*((_QWORD *)this + 20) - *((_QWORD *)this + 19)) >> 3));
              a10 = v208;
              a9 = v207;
              v65 = v647;
            }
            else
            {
LABEL_240:
              v65 = v647;
            }
LABEL_241:
            v80 = LODWORD(v701[1]) + 1;
            LODWORD(v701[1]) = v80;
            v79 = (char *)v701[0];
            if (v80 >= *((_DWORD *)v701[0] + 25))
            {
              v80 = 0;
              v79 = (char *)v701[0] + 168;
              v701[0] = (char *)v701[0] + 168;
              ++HIDWORD(v701[1]);
              LODWORD(v701[1]) = 0;
            }
            continue;
          }
          goto LABEL_91;
        }
        v108 = *(float *)&v106;
        v109 = *(float *)&v107;
        v110 = v98 - *(float *)&v106;
        v111 = v99 - *(float *)&v107;
        v112 = 1.0 / sqrtf((float)(v110 * v110) + (float)(v111 * v111));
        a9 = v112 * (float)(v98 - *(float *)&v106);
        a10 = v112 * (float)(v99 - *(float *)&v107);
        if (v88)
        {
          if ((v91 & 1) != 0)
            v113 = v112 * (float)(v99 - *(float *)&v107);
          else
            v113 = v92;
          if ((v91 & 1) != 0)
            v114 = a9;
          else
            v114 = v81;
          if ((float)((float)((float)(v114 + a9) * (float)(v114 + a9))
                     + (float)((float)(v113 + a10) * (float)(v113 + a10))) < 2.0)
          {
            v115 = v104;
            v116 = *(float *)&v106;
            v650 = a10;
            v653 = a9;
            altitude::FlyoverRoadTile::append(v46, (uint64_t)v701, (uint64_t **)&v678, 0x8E38E38E38E38E39 * ((uint64_t)(*((_QWORD *)this + 20) - *((_QWORD *)this + 19)) >> 3));
            v118 = v46[4];
            v117 = v46[5];
            a9 = v653;
            a10 = v650;
            v108 = v116;
            v104 = v115;
            if (v118 != v117)
            {
              v119 = (__int128 *)(v117 - 24);
              v120 = v46[6];
              if (v117 >= v120)
              {
                v122 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v117 - v118) >> 3) + 1;
                if (v122 > 0xAAAAAAAAAAAAAAALL)
                  goto LABEL_744;
                v123 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v120 - v118) >> 3);
                if (2 * v123 > v122)
                  v122 = 2 * v123;
                if (v123 >= 0x555555555555555)
                  v124 = 0xAAAAAAAAAAAAAAALL;
                else
                  v124 = v122;
                if (v124)
                {
                  if (v124 > 0xAAAAAAAAAAAAAAALL)
                    goto LABEL_745;
                  v125 = (char *)operator new(24 * v124);
                  v108 = v116;
                  v104 = v115;
                }
                else
                {
                  v125 = 0;
                }
                v126 = *v119;
                v127 = &v125[8 * ((uint64_t)(v117 - v118) >> 3)];
                *((_QWORD *)v127 + 2) = *(_QWORD *)(v117 - 8);
                *(_OWORD *)v127 = v126;
                v128 = v127;
                do
                {
                  v129 = *(_OWORD *)(v117 - 24);
                  *((_QWORD *)v128 - 1) = *(_QWORD *)(v117 - 8);
                  *(_OWORD *)(v128 - 24) = v129;
                  v128 -= 24;
                  v117 -= 24;
                }
                while (v117 != v118);
                v130 = &v125[24 * v124];
                v131 = (void *)v46[4];
                v121 = v127 + 24;
                v46[4] = v128;
                v46[5] = v127 + 24;
                v46[6] = v130;
                if (v131)
                {
                  operator delete(v131);
                  v104 = v115;
                  v108 = v116;
                }
                a9 = v653;
                a10 = v650;
              }
              else
              {
                *(_OWORD *)v117 = *v119;
                *(_QWORD *)(v117 + 16) = *(_QWORD *)(v117 - 8);
                v121 = (char *)(v117 + 24);
              }
              v46[5] = v121;
            }
          }
          if (v101)
          {
            v91 = 0;
            v94 = v102;
            goto LABEL_151;
          }
        }
        v91 = 0;
        if (fabsf(v111) < 0.00000001)
        {
          if (v109 >= v671 && v109 <= v669)
          {
            v132 = 0.0;
            goto LABEL_145;
          }
LABEL_149:
          v94 = v102;
          goto LABEL_150;
        }
        v133 = (float)(1.0 / v111) * (float)(v671 - v109);
        v134 = (float)(1.0 / v111) * (float)(v669 - v109);
        v135 = fminf(v133, v134);
        if (v135 > 1.0)
          goto LABEL_149;
        v136 = fmaxf(v133, v134);
        if (v136 < 0.0)
          goto LABEL_149;
        v132 = fmaxf(v135, 0.0);
        if (v136 >= 1.0)
LABEL_145:
          v136 = 1.0;
        if (fabsf(v110) >= 0.00000001)
        {
          v153 = (float)(1.0 / v110) * (float)(v658 - v108);
          v154 = (float)(1.0 / v110) * (float)(v655 - v108);
          v155 = fmaxf(v153, v154);
          v156 = fminf(v153, v154);
          if (v156 > v136 || v155 < v132)
          {
            v91 = 0;
            v94 = v102;
            goto LABEL_150;
          }
          v132 = fmaxf(v156, v132);
          if (v155 < v136)
            v136 = v155;
        }
        else
        {
          v91 = 0;
          if (v108 < v658 || v108 > v655)
            goto LABEL_149;
        }
        v158 = v108 + (float)(v132 * v110);
        v159 = v109 + (float)(v132 * v111);
        if (v101)
        {
          v160 = v158;
          v161 = v159;
          v162 = (float)(v132 * v102) + (1.0 - v132) * v104;
          v164 = (double *)v46[5];
          v163 = v46[6];
          if ((unint64_t)v164 >= v163)
          {
            v173 = (double *)v46[4];
            v174 = 0xAAAAAAAAAAAAAAABLL * (v164 - v173) + 1;
            if (v174 > 0xAAAAAAAAAAAAAAALL)
              goto LABEL_744;
            v175 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v163 - (_QWORD)v173) >> 3);
            if (2 * v175 > v174)
              v174 = 2 * v175;
            if (v175 >= 0x555555555555555)
              v176 = 0xAAAAAAAAAAAAAAALL;
            else
              v176 = v174;
            if (v176)
            {
              if (v176 > 0xAAAAAAAAAAAAAAALL)
                goto LABEL_745;
              v177 = a10;
              v178 = a9;
              v179 = (char *)operator new(24 * v176);
            }
            else
            {
              v177 = a10;
              v178 = a9;
              v179 = 0;
            }
            v186 = (double *)&v179[8 * (v164 - v173)];
            *v186 = v160;
            v186[1] = v161;
            v186[2] = v162;
            v187 = v186;
            if (v164 != v173)
            {
              do
              {
                v188 = *(_OWORD *)(v164 - 3);
                *(v187 - 1) = *(v164 - 1);
                *(_OWORD *)(v187 - 3) = v188;
                v187 -= 3;
                v164 -= 3;
              }
              while (v164 != v173);
              v164 = (double *)v46[4];
            }
            v165 = v186 + 3;
            v46[4] = v187;
            v46[5] = v186 + 3;
            v46[6] = &v179[24 * v176];
            if (v164)
              operator delete(v164);
            a9 = v178;
            a10 = v177;
            v94 = v102;
          }
          else
          {
            v94 = v102;
            *v164 = v160;
            v164[1] = v161;
            v165 = v164 + 3;
            v164[2] = v162;
          }
          v91 = 0;
          v46[5] = v165;
        }
        else
        {
          v167 = (double *)v46[5];
          v166 = v46[6];
          v168 = v104;
          if (!v88)
          {
            v169 = v158;
            v170 = v159;
            v171 = (float)(v132 * v102) + (1.0 - v132) * v168;
            if ((unint64_t)v167 >= v166)
            {
              v180 = (double *)v46[4];
              v181 = 0xAAAAAAAAAAAAAAABLL * (v167 - v180) + 1;
              if (v181 > 0xAAAAAAAAAAAAAAALL)
                goto LABEL_744;
              v182 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v166 - (_QWORD)v180) >> 3);
              if (2 * v182 > v181)
                v181 = 2 * v182;
              if (v182 >= 0x555555555555555)
                v183 = 0xAAAAAAAAAAAAAAALL;
              else
                v183 = v181;
              v654 = a9;
              v651 = a10;
              if (v183)
              {
                v640 = v171;
                v642 = v158;
                v643 = v159;
                v644 = v168;
                if (v183 > 0xAAAAAAAAAAAAAAALL)
                  goto LABEL_745;
                v184 = v108;
                v185 = (char *)operator new(24 * v183);
                v108 = v184;
                v170 = v643;
                v168 = v644;
                v171 = v640;
                v169 = v642;
              }
              else
              {
                v185 = 0;
              }
              v189 = (double *)&v185[8 * (v167 - v180)];
              *v189 = v169;
              v189[1] = v170;
              v189[2] = v171;
              v190 = v189;
              if (v167 != v180)
              {
                do
                {
                  v191 = *(_OWORD *)(v167 - 3);
                  *(v190 - 1) = *(v167 - 1);
                  *(_OWORD *)(v190 - 3) = v191;
                  v190 -= 3;
                  v167 -= 3;
                }
                while (v167 != v180);
                v167 = (double *)v46[4];
              }
              v172 = v189 + 3;
              v46[4] = v190;
              v46[5] = v189 + 3;
              v46[6] = &v185[24 * v183];
              if (v167)
              {
                v645 = v108;
                operator delete(v167);
                v108 = v645;
              }
              a9 = v654;
              a10 = v651;
            }
            else
            {
              *v167 = v169;
              v167[1] = v170;
              v172 = v167 + 3;
              v167[2] = v171;
            }
            v46[5] = v172;
            v166 = v46[6];
            v167 = v172;
          }
          v192 = v109 + (float)(v136 * v111);
          v193 = (float)(v108 + (float)(v136 * v110));
          v194 = v192;
          v195 = (float)(v136 * v102) + (1.0 - v136) * v168;
          if ((unint64_t)v167 >= v166)
          {
            v199 = (double *)v46[4];
            v200 = 0xAAAAAAAAAAAAAAABLL * (v167 - v199) + 1;
            if (v200 > 0xAAAAAAAAAAAAAAALL)
LABEL_744:
              abort();
            v201 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v166 - (_QWORD)v199) >> 3);
            if (2 * v201 > v200)
              v200 = 2 * v201;
            if (v201 >= 0x555555555555555)
              v202 = 0xAAAAAAAAAAAAAAALL;
            else
              v202 = v200;
            if (v202)
            {
              if (v202 > 0xAAAAAAAAAAAAAAALL)
                goto LABEL_745;
              v196 = a10;
              v197 = a9;
              v203 = (char *)operator new(24 * v202);
            }
            else
            {
              v196 = a10;
              v197 = a9;
              v203 = 0;
            }
            v204 = (double *)&v203[8 * (v167 - v199)];
            *v204 = v193;
            v204[1] = v194;
            v204[2] = v195;
            v205 = v204;
            if (v167 != v199)
            {
              do
              {
                v206 = *(_OWORD *)(v167 - 3);
                *(v205 - 1) = *(v167 - 1);
                *(_OWORD *)(v205 - 3) = v206;
                v205 -= 3;
                v167 -= 3;
              }
              while (v167 != v199);
              v167 = (double *)v46[4];
            }
            v198 = v204 + 3;
            v46[4] = v205;
            v46[5] = v204 + 3;
            v46[6] = &v203[24 * v202];
            if (v167)
              operator delete(v167);
          }
          else
          {
            v196 = a10;
            v197 = a9;
            *v167 = v193;
            v167[1] = v194;
            v198 = v167 + 3;
            v167[2] = v195;
          }
          v46[5] = v198;
          altitude::FlyoverRoadTile::append(v46, (uint64_t)v701, (uint64_t **)&v678, 0x8E38E38E38E38E39 * ((uint64_t)(*((_QWORD *)this + 20) - *((_QWORD *)this + 19)) >> 3));
          v91 = 0;
          a9 = v197;
          a10 = v196;
          v94 = v102;
        }
        goto LABEL_150;
      }
      break;
    }
    v62 = v638 + 1;
    v46 += 9;
    if (v46 != v635)
      continue;
    break;
  }
  v210 = v678;
  v209 = v679;
  v61 = v678 == v679;
  if (v678 != v679)
  {
    v211 = *((_QWORD *)this + 19);
    v212 = (char *)v678;
    do
    {
      v213 = *(_QWORD *)(*(_QWORD *)v212 + 504);
      v214 = *(_QWORD *)(*(_QWORD *)v212 + 512);
      v215 = v214 - v213;
      if (v214 != v213)
      {
        v216 = 0;
        v217 = v215 >> 3;
        do
        {
          v218 = *(_QWORD *)(v213 + 8 * v216);
          v219 = *(uint64_t **)(v218 + 416);
          v220 = *(uint64_t **)(v218 + 424);
          if (v219 != v220)
          {
            v221 = *(_QWORD *)(v211 + 72 * v216 + 32);
            do
            {
              v222 = *v219++;
              *(_QWORD *)(v222 + 56) = v221 + 24 * *(_QWORD *)(v222 + 56);
            }
            while (v219 != v220);
          }
          ++v216;
        }
        while (v216 != v217);
      }
      v212 += 8;
    }
    while (v212 != v209);
  }
LABEL_254:
  v223 = operator new();
  v224 = v223;
  *(_QWORD *)v223 = &off_1E42AF4A8;
  *(_QWORD *)(v223 + 8) = 0;
  *(_QWORD *)(v223 + 16) = 0;
  *(_QWORD *)(v223 + 24) = 0;
  v670 = v223;
  if (!v61)
  {
    v227 = v209 - v210;
    if (v209 - v210 < 0)
      abort();
    v228 = operator new(v209 - v210);
    *(_QWORD *)(v224 + 8) = v228;
    *(_QWORD *)(v224 + 16) = v228;
    v229 = v227 >> 3;
    *(_QWORD *)(v224 + 24) = &v228[v229];
    memcpy(v228, v210, v227);
    v659 = &v228[v229];
    *(_QWORD *)(v224 + 16) = &v228[v229];
    *(_OWORD *)(v224 + 32) = 0u;
    v230 = v224 + 32;
    *(_QWORD *)(v230 + 56) = 0;
    v646 = (gdc::GlobeTileGrid **)(v230 + 56);
    v648 = (void **)v230;
    *(_BYTE *)(v230 + 64) = 0;
    *(_BYTE *)(v230 + 88) = 0;
    *(_OWORD *)(v230 + 16) = 0u;
    *(_OWORD *)(v230 + 32) = 0u;
    *(_BYTE *)(v230 + 48) = 0;
    if (!(v229 * 8))
    {
      v225 = 0;
      v226 = 0;
      goto LABEL_308;
    }
    v656 = (QuadTile *)(v230 + 64);
    v225 = 0;
    v226 = 0;
    v231 = 0;
    while (1)
    {
      v666 = v228;
      v232 = (_QWORD *)*v228;
      v232[1] = v670;
      v234 = (_QWORD **)v232[63];
      v233 = (_QWORD **)v232[64];
      v672 = v233;
      if (v234 != v233)
        break;
LABEL_259:
      v228 = v666 + 1;
      if (v666 + 1 == v659)
      {
        if (!*(_BYTE *)(v670 + 80))
          goto LABEL_308;
        v261 = (gdc::GlobeTileGrid *)operator new();
        v262 = v261;
        if (*(_BYTE *)(v670 + 120))
        {
          gdc::GlobeTileGrid::GlobeTileGrid(v261, v656);
          v263 = *v646;
          *v646 = v262;
          if (v263)
          {
            v264 = *((_QWORD *)v263 + 323);
            if (v264)
              MEMORY[0x1A1AF4DE8](v264, 0x1000C8000313F17);
            MEMORY[0x1A1AF4E00](v263, 0x1020C4007FF0C4BLL);
            v262 = *v646;
          }
          *((_QWORD *)v262 + 323) = operator new[]();
          gdc::GlobeTileGrid::endBuildingHeightRange(*v646);
          goto LABEL_308;
        }
        std::__throw_bad_optional_access[abi:nn180100]();
        __break(1u);
        return;
      }
    }
    while (1)
    {
      v236 = *v234;
      v236[1] = **v234;
      v236[3] = v236[2];
      v236[5] = v236[4];
      v237 = (uint64_t **)v236[52];
      for (i = (uint64_t **)v236[53]; v237 != i; v236[5] = v239[5] + v236[5] - v239[4])
      {
        v240 = *v237++;
        v239 = v240;
        v241 = *v240;
        v242 = v240[6];
        v243 = *((_BYTE *)v240 + 72) == 0;
        if (*((_BYTE *)v240 + 72))
          v244 = 2 * v242;
        else
          v244 = 2 * v242 + 4;
        v245 = v244 + v241;
        v246 = v239[2];
        if (v243)
          v247 = v242 + 1;
        else
          v247 = v242 - 1;
        v239[1] = v245;
        v239[3] = v246 + 6 * v247;
        v236[1] += v244;
        v236[3] = v239[3] + v236[3] - v239[2];
      }
      if (v226 >= v231)
        break;
      *(_QWORD *)v226 = v236;
      v235 = v226 + 8;
LABEL_263:
      ++v234;
      v226 = v235;
      if (v234 == v233)
        goto LABEL_259;
    }
    v248 = (v226 - v225) >> 3;
    v249 = v248 + 1;
    if ((unint64_t)(v248 + 1) >> 61)
      abort();
    if ((v231 - v225) >> 2 > v249)
      v249 = (v231 - v225) >> 2;
    if ((unint64_t)(v231 - v225) >= 0x7FFFFFFFFFFFFFF8)
      v250 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v250 = v249;
    if (v250)
    {
      if (v250 >> 61)
        goto LABEL_745;
      v251 = operator new(8 * v250);
    }
    else
    {
      v251 = 0;
    }
    v252 = &v251[8 * v248];
    *(_QWORD *)v252 = v236;
    v235 = v252 + 8;
    if (v226 != v225)
    {
      v253 = v226 - 8 - v225;
      if (v253 >= 0x168)
      {
        if (&v251[v226 - v225 - 8 - (v253 & 0xFFFFFFFFFFFFFFF8)] > &v251[v226 - v225 - 8])
        {
          v254 = v226;
        }
        else if (&v226[-(v253 & 0xFFFFFFFFFFFFFFF8) - 8] > v226 - 8)
        {
          v254 = v226;
        }
        else if ((unint64_t)(v225 - v251) >= 0x20)
        {
          v256 = (v253 >> 3) + 1;
          v254 = &v226[-8 * (v256 & 0x3FFFFFFFFFFFFFFCLL)];
          v257 = &v251[8 * v248 - 16];
          v258 = v226 - 16;
          v259 = v256 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v260 = *(_OWORD *)v258;
            *(v257 - 1) = *((_OWORD *)v258 - 1);
            *v257 = v260;
            v257 -= 2;
            v258 -= 32;
            v259 -= 4;
          }
          while (v259);
          v252 -= 8 * (v256 & 0x3FFFFFFFFFFFFFFCLL);
          if (v256 == (v256 & 0x3FFFFFFFFFFFFFFCLL))
            goto LABEL_287;
        }
        else
        {
          v254 = v226;
        }
      }
      else
      {
        v254 = v226;
      }
      do
      {
        v255 = *((_QWORD *)v254 - 1);
        v254 -= 8;
        *((_QWORD *)v252 - 1) = v255;
        v252 -= 8;
      }
      while (v254 != v225);
    }
LABEL_287:
    v231 = &v251[8 * v250];
    if (v225)
      operator delete(v225);
    v225 = v252;
    v233 = v672;
    goto LABEL_263;
  }
  v225 = 0;
  v226 = 0;
  *(_OWORD *)(v223 + 32) = 0u;
  *(_QWORD *)(v223 + 88) = 0;
  v648 = (void **)(v223 + 32);
  *(_BYTE *)(v223 + 96) = 0;
  *(_BYTE *)(v223 + 120) = 0;
  *(_OWORD *)(v223 + 48) = 0u;
  *(_OWORD *)(v223 + 64) = 0u;
  *(_BYTE *)(v223 + 80) = 0;
LABEL_308:
  v265 = 0;
  v266 = 0;
  v267 = 0;
  v268 = 0;
  v269 = (v226 - v225) >> 3;
  v270 = &unk_1ECE44000;
  v652 = v269;
  do
  {
    if (v266 == v269
      || (unint64_t)(*(_QWORD *)(*(_QWORD *)&v225[8 * v266] + 8) + v268 - **(_QWORD **)&v225[8 * v266]) >= 0x10000)
    {
      v271 = (std::__shared_weak_count *)operator new(0xF8uLL);
      v271->__shared_owners_ = 0;
      v272 = (unint64_t *)&v271->__shared_owners_;
      v271->__shared_weak_owners_ = 0;
      v271[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B5748;
      v660 = v271 + 1;
      v271->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DFA70;
      v271[1].__shared_owners_ = 64;
      LODWORD(v271[1].__shared_weak_owners_) = 1;
      v271[2].__vftable = 0;
      v271[2].__shared_owners_ = 0;
      v271[2].__shared_weak_owners_ = 0;
      v271[3].__vftable = (std::__shared_weak_count_vtbl *)(v268 << 6);
      v273 = (std::__shared_count)0;
      *(_OWORD *)&v271[3].__shared_owners_ = 0u;
      v271[4].std::__shared_count = 0u;
      v271[4].__shared_weak_owners_ = 0;
      v673 = v271;
      if ((v274 & 1) == 0)
      {
        v273 = (std::__shared_count)0;
        if (v341)
        {
          v342 = operator new();
          *(_QWORD *)(v342 + 16) = 0xA3D02C1100000005;
          *(_QWORD *)(v342 + 24) = "GeoGL";
          *(_OWORD *)(v342 + 32) = xmmword_19FFB2DE0;
          *(_QWORD *)v342 = &off_1E42B5668;
          *(_QWORD *)(v342 + 8) = "GeoGL";
          *(_OWORD *)(v342 + 72) = 0u;
          *(_OWORD *)(v342 + 88) = 0u;
          *(_OWORD *)(v342 + 104) = 0u;
          *(_OWORD *)(v342 + 120) = 0u;
          *(_OWORD *)(v342 + 136) = 0u;
          *(_OWORD *)(v342 + 152) = 0u;
          *(_OWORD *)(v342 + 168) = 0u;
          *(_OWORD *)(v342 + 184) = 0u;
          *(_OWORD *)(v342 + 200) = 0u;
          *(_OWORD *)(v342 + 216) = 0u;
          *(_OWORD *)(v342 + 232) = 0u;
          *(_QWORD *)(v342 + 248) = 0;
          *(_OWORD *)(v342 + 56) = 0u;
          v343 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v342 + 56), 0);
          if ((_DWORD)v343)
            geo::read_write_lock::logFailure(v343, (uint64_t)"initialization", v344);
          zone = malloc_create_zone(0, 0);
          *(_QWORD *)(v342 + 48) = zone;
          malloc_set_zone_name(zone, "GeoGL");
          *(_QWORD *)(v342 + 256) = os_log_create("com.apple.VectorKit", "Memory");
          ggl::Allocator::instance(void)::alloc = v342;
          v270 = &unk_1ECE44000;
          v273 = (std::__shared_count)0;
        }
      }
      v271[5].__vftable = (std::__shared_weak_count_vtbl *)*((_QWORD *)v270 + 495);
      v271[5].__shared_owners_ = 0;
      *((std::__shared_count *)v271 + 11) = v273;
      v271[8].std::__shared_count = v273;
      v271[8].__shared_weak_owners_ = 0;
      v271[9].__vftable = (std::__shared_weak_count_vtbl *)-1;
      *((std::__shared_count *)v271 + 10) = v273;
      v271[6].std::__shared_count = (std::__shared_count)xmmword_19FFB2DD0;
      LODWORD(v271[5].__shared_weak_owners_) = 0;
      v271[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B76A0;
      v271[9].__shared_weak_owners_ = (uint64_t)"BatchType/VData";
      v271[10].__vftable = (std::__shared_weak_count_vtbl *)&ggl::FlyoverRoad::defaultReflection;
      v271[9].__shared_owners_ = (uint64_t)&unk_1E42B76C0;
      v275 = (std::__shared_weak_count *)operator new(0xF8uLL);
      v275->__shared_owners_ = 0;
      v276 = (unint64_t *)&v275->__shared_owners_;
      v275->__shared_weak_owners_ = 0;
      v275[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B5748;
      v275->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DF1E8;
      v275[1].__shared_owners_ = 2;
      LODWORD(v275[1].__shared_weak_owners_) = 257;
      v275[2].__vftable = 0;
      v275[2].__shared_owners_ = 0;
      v275[2].__shared_weak_owners_ = 0;
      v275[3].__vftable = (std::__shared_weak_count_vtbl *)(2 * v267);
      v277 = (std::__shared_count)0;
      *(_OWORD *)&v275[3].__shared_owners_ = 0u;
      v275[4].std::__shared_count = 0u;
      v275[4].__shared_weak_owners_ = 0;
      if ((v278 & 1) == 0)
      {
        v277 = (std::__shared_count)0;
        if (v346)
        {
          v347 = operator new();
          *(_QWORD *)(v347 + 16) = 0xA3D02C1100000005;
          *(_QWORD *)(v347 + 24) = "GeoGL";
          *(_OWORD *)(v347 + 32) = xmmword_19FFB2DE0;
          *(_QWORD *)v347 = &off_1E42B5668;
          *(_QWORD *)(v347 + 8) = "GeoGL";
          *(_OWORD *)(v347 + 72) = 0u;
          *(_OWORD *)(v347 + 88) = 0u;
          *(_OWORD *)(v347 + 104) = 0u;
          *(_OWORD *)(v347 + 120) = 0u;
          *(_OWORD *)(v347 + 136) = 0u;
          *(_OWORD *)(v347 + 152) = 0u;
          *(_OWORD *)(v347 + 168) = 0u;
          *(_OWORD *)(v347 + 184) = 0u;
          *(_OWORD *)(v347 + 200) = 0u;
          *(_OWORD *)(v347 + 216) = 0u;
          *(_OWORD *)(v347 + 232) = 0u;
          *(_QWORD *)(v347 + 248) = 0;
          *(_OWORD *)(v347 + 56) = 0u;
          v348 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v347 + 56), 0);
          if ((_DWORD)v348)
            geo::read_write_lock::logFailure(v348, (uint64_t)"initialization", v349);
          v350 = malloc_create_zone(0, 0);
          *(_QWORD *)(v347 + 48) = v350;
          malloc_set_zone_name(v350, "GeoGL");
          *(_QWORD *)(v347 + 256) = os_log_create("com.apple.VectorKit", "Memory");
          ggl::Allocator::instance(void)::alloc = v347;
          v270 = &unk_1ECE44000;
          v277 = (std::__shared_count)0;
        }
      }
      v275[5].__vftable = (std::__shared_weak_count_vtbl *)*((_QWORD *)v270 + 495);
      v275[5].__shared_owners_ = 0;
      *((std::__shared_count *)v275 + 11) = v277;
      v275[8].std::__shared_count = v277;
      v275[8].__shared_weak_owners_ = 0;
      v275[9].__vftable = (std::__shared_weak_count_vtbl *)-1;
      *((std::__shared_count *)v275 + 10) = v277;
      v275[6].std::__shared_count = (std::__shared_count)xmmword_19FFB2DD0;
      LODWORD(v275[5].__shared_weak_owners_) = 0;
      LODWORD(v275[10].__vftable) = 0;
      v275[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B6B88;
      v275[1].__shared_owners_ = 2;
      v275[9].__shared_owners_ = (uint64_t)&unk_1E42B6BA8;
      v275[9].__shared_weak_owners_ = (uint64_t)"BatchType/IData";
      v279 = operator new();
      do
        v280 = __ldxr(v272);
      while (__stxr(v280 + 1, v272));
      do
        v281 = __ldxr(v276);
      while (__stxr(v281 + 1, v276));
      if ((v282 & 1) == 0
      {
        if ((v351 & 1) == 0
        {
          ggl::MeshTyped<ggl::FlyoverRoad::Default>::attributesReflection(void)::r = (uint64_t)&ggl::FlyoverRoad::defaultReflection;
        }
        ggl::MeshTyped<ggl::FlyoverRoad::Default>::typedReflection(void)::r = (uint64_t)&ggl::MeshTyped<ggl::FlyoverRoad::Default>::attributesReflection(void)::r;
        unk_1EE576188 = 1;
      }
      *(_QWORD *)(v279 + 32) = 0;
      *(_QWORD *)(v279 + 40) = 0;
      *(_DWORD *)(v279 + 48) = 0;
      *(_QWORD *)v279 = &off_1E42BBC08;
      *(_QWORD *)(v279 + 8) = "BatchType/Mesh";
      *(_QWORD *)(v279 + 16) = &unk_1E42BBC28;
      *(_QWORD *)(v279 + 24) = 0;
      *(_QWORD *)(v279 + 56) = &ggl::MeshTyped<ggl::FlyoverRoad::Default>::typedReflection(void)::r;
      *(_QWORD *)(v279 + 64) = 0;
      v283 = v279 + 64;
      *(_QWORD *)(v279 + 72) = 0;
      *(_QWORD *)(v279 + 80) = 0;
      if ((v284 & 1) == 0)
      {
        v283 = v279 + 64;
        if (v352)
        {
          v353 = operator new();
          *(_QWORD *)(v353 + 16) = 0xA3D02C1100000005;
          *(_QWORD *)(v353 + 24) = "GeoGL";
          *(_OWORD *)(v353 + 32) = xmmword_19FFB2DE0;
          *(_QWORD *)v353 = &off_1E42B5668;
          *(_QWORD *)(v353 + 8) = "GeoGL";
          *(_OWORD *)(v353 + 72) = 0u;
          *(_OWORD *)(v353 + 88) = 0u;
          *(_OWORD *)(v353 + 104) = 0u;
          *(_OWORD *)(v353 + 120) = 0u;
          *(_OWORD *)(v353 + 136) = 0u;
          *(_OWORD *)(v353 + 152) = 0u;
          *(_OWORD *)(v353 + 168) = 0u;
          *(_OWORD *)(v353 + 184) = 0u;
          *(_OWORD *)(v353 + 200) = 0u;
          *(_OWORD *)(v353 + 216) = 0u;
          *(_OWORD *)(v353 + 232) = 0u;
          *(_QWORD *)(v353 + 248) = 0;
          *(_OWORD *)(v353 + 56) = 0u;
          v354 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v353 + 56), 0);
          if ((_DWORD)v354)
            geo::read_write_lock::logFailure(v354, (uint64_t)"initialization", v355);
          v356 = malloc_create_zone(0, 0);
          *(_QWORD *)(v353 + 48) = v356;
          malloc_set_zone_name(v356, "GeoGL");
          *(_QWORD *)(v353 + 256) = os_log_create("com.apple.VectorKit", "Memory");
          ggl::Allocator::instance(void)::alloc = v353;
          v283 = v279 + 64;
        }
      }
      v285 = ggl::Allocator::instance(void)::alloc;
      *(_QWORD *)(v279 + 120) = 0;
      *(_QWORD *)(v279 + 96) = 0;
      *(_QWORD *)(v279 + 104) = 0;
      *(_QWORD *)(v279 + 88) = v285;
      if ((v285 & 1) == 0)
      {
        v641 = v283;
        v283 = v641;
        if (v357)
        {
          v358 = operator new();
          *(_QWORD *)(v358 + 16) = 0xA3D02C1100000005;
          *(_QWORD *)(v358 + 24) = "GeoGL";
          *(_OWORD *)(v358 + 32) = xmmword_19FFB2DE0;
          *(_QWORD *)v358 = &off_1E42B5668;
          *(_QWORD *)(v358 + 8) = "GeoGL";
          *(_OWORD *)(v358 + 72) = 0u;
          *(_OWORD *)(v358 + 88) = 0u;
          *(_OWORD *)(v358 + 104) = 0u;
          *(_OWORD *)(v358 + 120) = 0u;
          *(_OWORD *)(v358 + 136) = 0u;
          *(_OWORD *)(v358 + 152) = 0u;
          *(_OWORD *)(v358 + 168) = 0u;
          *(_OWORD *)(v358 + 184) = 0u;
          *(_OWORD *)(v358 + 200) = 0u;
          *(_OWORD *)(v358 + 216) = 0u;
          *(_OWORD *)(v358 + 232) = 0u;
          *(_QWORD *)(v358 + 248) = 0;
          v359 = v358;
          *(_OWORD *)(v358 + 56) = 0u;
          v360 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v358 + 56), 0);
          if ((_DWORD)v360)
            geo::read_write_lock::logFailure(v360, (uint64_t)"initialization", v361);
          v362 = malloc_create_zone(0, 0);
          *(_QWORD *)(v359 + 48) = v362;
          malloc_set_zone_name(v362, "GeoGL");
          *(_QWORD *)(v359 + 256) = os_log_create("com.apple.VectorKit", "Memory");
          ggl::Allocator::instance(void)::alloc = v359;
          v283 = v641;
        }
      }
      *(_QWORD *)(v279 + 128) = ggl::Allocator::instance(void)::alloc;
      *(_QWORD *)(v279 + 136) = 0;
      *(_QWORD *)(v279 + 112) = v279 + 120;
      *(_QWORD *)v279 = &off_1E42BD338;
      *(_QWORD *)(v279 + 16) = &unk_1E42BD358;
      v701[0] = v660;
      v286 = v673;
      v701[1] = v673;
      do
        v287 = __ldxr(v272);
      while (__stxr(v287 + 1, v272));
      std::vector<std::shared_ptr<ggl::VertexData>,geo::StdAllocator<std::shared_ptr<ggl::VertexData>,ggl::Allocator>>::__assign_with_size[abi:nn180100]<std::shared_ptr<ggl::VertexData> const*,std::shared_ptr<ggl::VertexData> const*>(v283, (uint64_t *)v701, (uint64_t *)v702, 1uLL);
      v288 = (std::__shared_weak_count *)v701[1];
      if (v701[1])
      {
        v289 = (unint64_t *)((char *)v701[1] + 8);
        do
          v290 = __ldaxr(v289);
        while (__stlxr(v290 - 1, v289));
        if (!v290)
        {
          ((void (*)(std::__shared_weak_count *))v288->__on_zero_shared)(v288);
          std::__shared_weak_count::__release_weak(v288);
        }
      }
      do
        v291 = __ldxr(v276);
      while (__stxr(v291 + 1, v276));
      v292 = *(std::__shared_weak_count **)(v279 + 104);
      *(_QWORD *)(v279 + 96) = v275 + 1;
      *(_QWORD *)(v279 + 104) = v275;
      if (v292)
      {
        v293 = (unint64_t *)&v292->__shared_owners_;
        do
          v294 = __ldaxr(v293);
        while (__stlxr(v294 - 1, v293));
        if (!v294)
        {
          ((void (*)(std::__shared_weak_count *))v292->__on_zero_shared)(v292);
          std::__shared_weak_count::__release_weak(v292);
        }
      }
      *(_QWORD *)v279 = &off_1E42B5C10;
      *(_QWORD *)(v279 + 16) = &unk_1E42B5C30;
      do
        v295 = __ldaxr(v276);
      while (__stlxr(v295 - 1, v276));
      v270 = &unk_1ECE44000;
      if (!v295)
      {
        ((void (*)(std::__shared_weak_count *))v275->__on_zero_shared)(v275);
        std::__shared_weak_count::__release_weak(v275);
      }
      do
        v296 = __ldaxr(v272);
      while (__stlxr(v296 - 1, v272));
      if (!v296)
      {
        ((void (*)(std::__shared_weak_count *))v673->__on_zero_shared)(v673);
        std::__shared_weak_count::__release_weak(v673);
      }
      v298 = *(uint64_t **)(v670 + 40);
      v297 = *(_QWORD *)(v670 + 48);
      if ((unint64_t)v298 >= v297)
      {
        v300 = (uint64_t *)*v648;
        v301 = (char *)v298 - (_BYTE *)*v648;
        v302 = v301 >> 3;
        v303 = (v301 >> 3) + 1;
        if (v303 >> 61)
          abort();
        v304 = v297 - (_QWORD)v300;
        if (v304 >> 2 > v303)
          v303 = v304 >> 2;
        if ((unint64_t)v304 >= 0x7FFFFFFFFFFFFFF8)
          v305 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v305 = v303;
        if (v305)
        {
          v657 = (QuadTile *)((char *)v298 - (_BYTE *)*v648);
          v661 = v301 >> 3;
          if (v305 >> 61)
            goto LABEL_745;
          v306 = v305;
          v307 = operator new(8 * v305);
          v305 = v306;
          v286 = v673;
          v301 = (uint64_t)v657;
          v302 = v661;
        }
        else
        {
          v307 = 0;
        }
        v308 = (uint64_t *)&v307[8 * v302];
        *v308 = v279;
        v299 = v308 + 1;
        if (v298 == v300)
        {
          v300 = v298;
        }
        else
        {
          v309 = (char *)(v298 - 1) - (char *)v300;
          if (v309 < 0x58)
            goto LABEL_754;
          if ((unint64_t)((char *)v298 - &v307[v301]) < 0x20)
            goto LABEL_754;
          v310 = (v309 >> 3) + 1;
          v311 = &v307[8 * v302 - 16];
          v312 = v298 - 2;
          v313 = v310 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v314 = *(_OWORD *)v312;
            *(v311 - 1) = *((_OWORD *)v312 - 1);
            *v311 = v314;
            v311 -= 2;
            v312 -= 4;
            v313 -= 4;
          }
          while (v313);
          v308 -= v310 & 0x3FFFFFFFFFFFFFFCLL;
          v298 -= v310 & 0x3FFFFFFFFFFFFFFCLL;
          if (v310 != (v310 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_754:
            do
            {
              v315 = *--v298;
              *--v308 = v315;
            }
            while (v298 != v300);
            v300 = (uint64_t *)*v648;
          }
        }
        *(_QWORD *)(v670 + 32) = v308;
        *(_QWORD *)(v670 + 40) = v299;
        *(_QWORD *)(v670 + 48) = &v307[8 * v305];
        if (v300)
        {
          v316 = v299;
          operator delete(v300);
          v299 = v316;
        }
        v269 = v652;
        v270 = &unk_1ECE44000;
      }
      else
      {
        *v298 = v279;
        v299 = v298 + 1;
        v269 = v652;
      }
      *(_QWORD *)(v670 + 40) = v299;
      if (v265 < v266)
      {
        v317 = 0;
        v318 = v265;
        do
        {
          v319 = *(_QWORD *)&v225[8 * v318];
          v320 = *(_QWORD *)(v319 + 32);
          v321 = v320 + v317;
          v322 = *(_QWORD *)(v319 + 40) + v317;
          *(_QWORD *)(v319 + 32) = v321;
          *(_QWORD *)(v319 + 40) = v322;
          v317 = v322 - v320;
          ++v318;
        }
        while (v266 != v318);
        v323 = 0;
        do
        {
          v324 = *(uint64_t **)&v225[8 * v265];
          v325 = *v324;
          v326 = *v324 + v323;
          v327 = v324[1] + v323;
          *v324 = v326;
          v324[1] = v327;
          v328 = v324[2];
          v329 = v328 + v317;
          v330 = v324[3] + v317;
          v324[2] = v329;
          v324[3] = v330;
          v324[56] = v279;
          v331 = (_QWORD **)v324[52];
          v332 = (_QWORD **)v324[53];
          if (v331 != v332)
          {
            v333 = v324[4];
            do
            {
              v334 = *v331++;
              v335 = v334[1] - *v334;
              *v334 = v326;
              v326 += v335;
              v336 = v334[3] - v334[2];
              v334[1] = v326;
              v334[2] = v329;
              v329 += v336;
              v337 = v334[5] - v334[4];
              v334[3] = v329;
              v334[4] = v333;
              v333 += v337;
              v334[5] = v333;
            }
            while (v331 != v332);
          }
          v317 = v330 - v328;
          v323 = v327 - v325;
          ++v265;
        }
        while (v265 != v266);
      }
      do
        v338 = __ldaxr(v276);
      while (__stlxr(v338 - 1, v276));
      if (!v338)
      {
        ((void (*)(std::__shared_weak_count *))v275->__on_zero_shared)(v275);
        std::__shared_weak_count::__release_weak(v275);
      }
      do
        v339 = __ldaxr(v272);
      while (__stlxr(v339 - 1, v272));
      if (!v339)
      {
        ((void (*)(std::__shared_weak_count *))v286->__on_zero_shared)(v286);
        std::__shared_weak_count::__release_weak(v286);
      }
      v268 = 0;
      v267 = 0;
      v265 = v266;
    }
    if (v266 < v269)
    {
      v340 = *(_QWORD **)&v225[8 * v266];
      v268 = v340[1] + v268 - *v340;
      v267 = v340[3] + v267 + v340[5] - (v340[2] + v340[4]);
    }
    ++v266;
  }
  while (v266 <= v269);
  if (v225)
    operator delete(v225);
  v363 = v670;
  *(_QWORD *)v670 = &off_1E4291A60;
  *(_OWORD *)(v670 + 144) = 0u;
  *(_OWORD *)(v670 + 160) = 0u;
  *(_OWORD *)(v670 + 176) = 0u;
  *(_OWORD *)(v670 + 192) = 0u;
  *(_OWORD *)(v670 + 208) = 0u;
  *(_OWORD *)(v670 + 224) = 0u;
  *(_OWORD *)(v670 + 240) = 0u;
  *(_QWORD *)(v670 + 128) = a3;
  *(_QWORD *)(v670 + 136) = 0x3FF0000000000000;
  *(_QWORD *)(v670 + 176) = 0x3FF0000000000000;
  *(_QWORD *)(v670 + 216) = 0x3FF0000000000000;
  *(_QWORD *)(v670 + 256) = 0x3FF0000000000000;
  v364 = *(uint64_t **)(v670 + 8);
  v365 = *(uint64_t **)(v670 + 16);
  v366 = this;
  if (v364 != v365)
  {
    v367 = *(uint64_t **)(v670 + 8);
    do
    {
      v368 = *v367++;
      *(_QWORD *)(v368 + 8) = v670;
    }
    while (v367 != v365);
  }
  *((_QWORD *)this + 18) = v670;
  *(_OWORD *)(v670 + 56) = *(_OWORD *)((char *)a3 + 56);
  *(_QWORD *)(v670 + 72) = *((_QWORD *)a3 + 9);
  *(_OWORD *)__p = 0uLL;
  v730 = 0uLL;
  v727 = 0uLL;
  *(_OWORD *)v728 = 0uLL;
  *(_OWORD *)v725 = 0uLL;
  *(_OWORD *)v726 = 0uLL;
  *(_OWORD *)v723 = 0uLL;
  v724 = 0uLL;
  v721 = 0uLL;
  *(_OWORD *)v722 = 0uLL;
  *(_OWORD *)v719 = 0uLL;
  *(_OWORD *)v720 = 0uLL;
  *(_OWORD *)v717 = 0uLL;
  v718 = 0uLL;
  v715 = 0uLL;
  *(_OWORD *)v716 = 0uLL;
  *(_OWORD *)v713 = 0uLL;
  *(_OWORD *)v714 = 0uLL;
  *(_OWORD *)v711 = 0uLL;
  v712 = 0uLL;
  v709 = 0uLL;
  *(_OWORD *)v710 = 0uLL;
  *(_OWORD *)v707 = 0uLL;
  *(_OWORD *)v708 = 0uLL;
  *(_OWORD *)v705 = 0uLL;
  v706 = 0uLL;
  v703 = 0uLL;
  *(_OWORD *)v704 = 0uLL;
  *(_OWORD *)v701 = 0uLL;
  *(_OWORD *)v702 = 0uLL;
  memset(v685, 0, sizeof(v685));
  if (v364 == v365)
    goto LABEL_510;
  v662 = v365;
  while (2)
  {
    v369 = *v364;
    v370 = *(_QWORD *)(*v364 + 560);
    +[VKPlatform sharedPlatform](VKPlatform, "sharedPlatform");
    v371 = (void *)objc_claimAutoreleasedReturnValue();
    *(_BYTE *)(v370 + 8) = objc_msgSend(v371, "proceduralRoadAlpha");

    v372 = *(_QWORD *)(v369 + 552);
    if (v372)
    {
      *(_QWORD *)(v370 + 16) = v372;
      v373 = *(_QWORD *)(v370 + 272);
      v374 = *(std::__shared_weak_count **)(v370 + 280);
      v699 = v373;
      v700 = v374;
      if (v374)
      {
        v375 = (unint64_t *)&v374->__shared_owners_;
        do
          v376 = __ldxr(v375);
        while (__stxr(v376 + 1, v375));
        v681 = v373;
        v682 = v700;
        if (v700)
        {
          v377 = (unint64_t *)&v700->__shared_owners_;
          do
            v378 = __ldxr(v377);
          while (__stxr(v378 + 1, v377));
        }
      }
      else
      {
        v681 = v373;
        v682 = 0;
      }
      v683[0] = 0;
      v683[1] = 0;
      v684 = 0;
      if (v373)
        LODWORD(v373) = (*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)v373 + 48))(v373, v683);
      v684 = v373;
      v379 = v700;
      if (v700)
      {
        v380 = (unint64_t *)&v700->__shared_owners_;
        do
          v381 = __ldaxr(v380);
        while (__stlxr(v381 - 1, v380));
        if (!v381)
        {
          ((void (*)(std::__shared_weak_count *))v379->__on_zero_shared)(v379);
          std::__shared_weak_count::__release_weak(v379);
        }
        LODWORD(v373) = v684;
      }
      v382 = (_OWORD *)(v370 + 28);
      v674 = (_OWORD *)(v370 + 28);
      if ((_DWORD)v373)
      {
        for (j = 0; j != 20; ++j)
        {
          v384 = *(_QWORD *)(v681 + 24);
          if (j >= 0x17u)
            v385 = 23;
          else
            v385 = j;
          v386 = *(float **)v384;
          if (*(_QWORD *)v384
            && (v387 = *v386, LODWORD(v386) = *v386 == 1.0, *(_BYTE *)(v384 + 10))
            && (v387 != 0.0 ? (v388 = v387 == 1.0) : (v388 = 1), !v388)
            || (v389 = *(unsigned __int8 *)(v384 + v386 + 11), v387 = 0.0, v389 == 2))
          {
            LOBYTE(v699) = 1;
            LOBYTE(v697) = 1;
            v390 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(v384, 0x68u, v385, 0, &v699);
            v391 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(v384, 0x68u, v385, 1u, &v697);
            if (v387 < 1.0)
              v391 = v390;
          }
          else
          {
            v391 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(*(_QWORD *)(v681 + 24), 0x68u, v385, v389, 0);
          }
          v382 = v674;
          *((_DWORD *)v674 + j) = v391;
        }
      }
      else
      {
        *(_OWORD *)(v370 + 76) = 0u;
        *(_OWORD *)(v370 + 92) = 0u;
        *(_OWORD *)(v370 + 44) = 0u;
        *(_OWORD *)(v370 + 60) = 0u;
        *v382 = 0u;
      }
      v667 = v364;
      gss::QueryableLocker<gss::PropertyID>::~QueryableLocker((uint64_t)&v681);
      for (k = 0; k != 20; ++k)
      {
        v397 = *((_DWORD *)v382 + k);
        v398 = &v701[3 * k];
        v399 = (int **)(v398 + 1);
        v400 = (int *)v398[1];
        v401 = (int *)*v398;
        v402 = (char *)v400 - (_BYTE *)*v398;
        v403 = v402 >> 2;
        if (v400 == *v398)
        {
LABEL_462:
          v409 = &v701[3 * k];
          v412 = (int *)v409[2];
          v411 = v409 + 2;
          v410 = v412;
          if (v400 < v412)
          {
            *v400 = v397;
            v393 = v400 + 1;
          }
          else
          {
            v413 = v403 + 1;
            if ((unint64_t)(v403 + 1) >> 62)
              abort();
            v414 = (char *)v410 - (char *)v401;
            if (v414 >> 1 > v413)
              v413 = v414 >> 1;
            if ((unint64_t)v414 >= 0x7FFFFFFFFFFFFFFCLL)
              v415 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v415 = v413;
            if (v415)
            {
              if (v415 >> 62)
                goto LABEL_745;
              v416 = v415;
              v417 = operator new(4 * v415);
              v415 = v416;
            }
            else
            {
              v417 = 0;
            }
            v418 = (int *)&v417[4 * v403];
            *v418 = v397;
            v393 = v418 + 1;
            if (v400 != v401)
            {
              v419 = (char *)(v400 - 1) - (char *)v401;
              if (v419 < 0x2C)
                goto LABEL_755;
              if ((char *)v400 - v417 - (v402 & 0xFFFFFFFFFFFFFFFCLL) < 0x20)
                goto LABEL_755;
              v420 = (v419 >> 2) + 1;
              v421 = &v417[4 * v403 - 16];
              v422 = (__int128 *)(v400 - 4);
              v423 = v420 & 0x7FFFFFFFFFFFFFF8;
              do
              {
                v424 = *v422;
                *(v421 - 1) = *(v422 - 1);
                *v421 = v424;
                v421 -= 2;
                v422 -= 2;
                v423 -= 8;
              }
              while (v423);
              v418 -= v420 & 0x7FFFFFFFFFFFFFF8;
              v400 -= v420 & 0x7FFFFFFFFFFFFFF8;
              if (v420 != (v420 & 0x7FFFFFFFFFFFFFF8))
              {
LABEL_755:
                do
                {
                  v425 = *--v400;
                  *--v418 = v425;
                }
                while (v400 != v401);
              }
            }
            *v398 = v418;
            *v399 = v393;
            *v411 = &v417[4 * v415];
            if (v401)
              operator delete(v401);
          }
          v366 = this;
          v394 = (int *)*v398;
          v395 = 126 - 2 * __clz(((char *)v393 - (_BYTE *)*v398) >> 2);
          v243 = v393 == *v398;
          *v399 = v393;
          if (v243)
            v396 = 0;
          else
            v396 = v395;
          std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,ZOrder *,false>(v394, v393, v396, 1);
        }
        else
        {
          v404 = v403 - 1;
          v405 = (int *)*v398;
          while (1)
          {
            v407 = *v405++;
            v406 = v407;
            if (v397 == v407)
              break;
            if (v397 > v406 || v404-- == 0)
              goto LABEL_462;
          }
        }
        v382 = v674;
      }
      v426 = 0;
      v363 = v670;
      v364 = v667;
      v365 = v662;
      while (2)
      {
        v428 = &v701[3 * v426];
        v429 = (unsigned int *)*v428;
        v430 = v428[1];
        v431 = v430 - (_BYTE *)*v428;
        if (v430 == *v428)
        {
          v427 = 0;
        }
        else
        {
          v432 = v431 >> 2;
          v433 = *v429;
          if ((unint64_t)v431 > 0x1F)
          {
            v434 = v432 & 0xFFFFFFFFFFFFFFF8;
            v435 = vdupq_n_s32(v433);
            v436 = (int32x4_t *)(v429 + 4);
            v437 = 0uLL;
            v438 = v432 & 0xFFFFFFFFFFFFFFF8;
            v439 = 0uLL;
            do
            {
              v437 = vsubq_s32(v437, (int32x4_t)vmvnq_s8((int8x16_t)vceqq_s32(v436[-1], v435)));
              v439 = vsubq_s32(v439, (int32x4_t)vmvnq_s8((int8x16_t)vceqq_s32(*v436, v435)));
              v436 += 2;
              v438 -= 8;
            }
            while (v438);
            v427 = vaddvq_s32(vaddq_s32(v439, v437));
            if (v432 != v434)
              goto LABEL_491;
          }
          else
          {
            v434 = 0;
            v427 = 0;
LABEL_491:
            v440 = v432 - v434;
            v441 = &v429[v434];
            do
            {
              v442 = *v441++;
              if (v442 != v433)
                ++v427;
              --v440;
            }
            while (v440);
          }
        }
        *((_DWORD *)v685 + v426++) = v427;
        if (v426 == 20)
          break;
        continue;
      }
    }
    if (++v364 != v365)
      continue;
    break;
  }
  v443 = *(_QWORD *)(v363 + 8);
  for (m = *(_QWORD *)(v363 + 16); v443 != m; v443 += 8)
  {
    if (*(_QWORD *)(*(_QWORD *)v443 + 552))
    {
      v445 = 0;
      v446 = *(_QWORD *)(*(_QWORD *)v443 + 560);
      v447 = v446 + 28;
      v448 = v446 + 108;
      v449 = v446 + 188;
      do
      {
        v451 = &v701[3 * v445];
        v453 = (char *)*v451;
        v452 = (char *)v451[1];
        v454 = v452 - (_BYTE *)*v451;
        if (v452 != *v451)
        {
          v455 = 0;
          v456 = *(_DWORD *)(v447 + 4 * v445);
          v457 = *(_DWORD *)v453;
          v458 = 1;
          while (1)
          {
            v459 = *(_DWORD *)v453;
            if (v457 != *(_DWORD *)v453)
              ++v458;
            if (v459 == v456)
              break;
            ++v455;
            v453 += 4;
            v457 = v459;
            if (v453 == v452)
              goto LABEL_502;
          }
          v450 = 4 * v445;
          *(_DWORD *)(v448 + v450) = v456 + 1;
          *(_DWORD *)(v447 + v450) = ~v455 + (v454 >> 2);
          *(float *)(v449 + v450) = (float)((float)v458 + -1.0) / (float)*((int *)v685 + v445);
        }
LABEL_502:
        ++v445;
      }
      while (v445 != 20);
    }
  }
LABEL_510:
  if (__p[1])
  {
    *(void **)&v730 = __p[1];
    operator delete(__p[1]);
  }
  if (v728[0])
  {
    v728[1] = v728[0];
    operator delete(v728[0]);
  }
  if (v726[1])
  {
    *(void **)&v727 = v726[1];
    operator delete(v726[1]);
  }
  if (v725[0])
  {
    v725[1] = v725[0];
    operator delete(v725[0]);
  }
  if (v723[1])
  {
    *(void **)&v724 = v723[1];
    operator delete(v723[1]);
  }
  if (v722[0])
  {
    v722[1] = v722[0];
    operator delete(v722[0]);
  }
  if (v720[1])
  {
    *(void **)&v721 = v720[1];
    operator delete(v720[1]);
  }
  if (v719[0])
  {
    v719[1] = v719[0];
    operator delete(v719[0]);
  }
  if (v717[1])
  {
    *(void **)&v718 = v717[1];
    operator delete(v717[1]);
  }
  if (v716[0])
  {
    v716[1] = v716[0];
    operator delete(v716[0]);
  }
  if (v714[1])
  {
    *(void **)&v715 = v714[1];
    operator delete(v714[1]);
  }
  if (v713[0])
  {
    v713[1] = v713[0];
    operator delete(v713[0]);
  }
  if (v711[1])
  {
    *(void **)&v712 = v711[1];
    operator delete(v711[1]);
  }
  if (v710[0])
  {
    v710[1] = v710[0];
    operator delete(v710[0]);
  }
  if (v708[1])
  {
    *(void **)&v709 = v708[1];
    operator delete(v708[1]);
  }
  if (v707[0])
  {
    v707[1] = v707[0];
    operator delete(v707[0]);
  }
  if (v705[1])
  {
    *(void **)&v706 = v705[1];
    operator delete(v705[1]);
  }
  if (v704[0])
  {
    v704[1] = v704[0];
    operator delete(v704[0]);
  }
  if (v702[1])
  {
    *(void **)&v703 = v702[1];
    operator delete(v702[1]);
  }
  if (v701[0])
  {
    v701[1] = v701[0];
    operator delete(v701[0]);
  }
  v460 = *((_QWORD *)v366 + 18);
  v462 = *(uint64_t **)(v460 + 8);
  v461 = *(uint64_t **)(v460 + 16);
  if (v462 != v461)
  {
    v668 = *(uint64_t **)(v460 + 16);
    while (2)
    {
      v463 = *v462;
      if (*(_QWORD *)(*v462 + 176))
        goto LABEL_553;
      *(_BYTE *)(v463 + 136) = 0;
      *(_BYTE *)(v463 + 264) = 0;
      *(_BYTE *)(v463 + 392) = 0;
      v464 = (std::__shared_weak_count *)*((_QWORD *)a3 + 25);
      v681 = *((_QWORD *)a3 + 24);
      v682 = v464;
      if (v464)
      {
        v465 = (unint64_t *)&v464->__shared_owners_;
        do
          v466 = __ldxr(v465);
        while (__stxr(v466 + 1, v465));
      }
      v467 = *(_QWORD *)(v463 + 560);
      v468 = *(void **)(v467 + 272);
      v469 = *(std::__shared_weak_count **)(v467 + 280);
      *(_QWORD *)&v685[0] = v468;
      *((_QWORD *)&v685[0] + 1) = v469;
      if (v469)
      {
        v470 = (unint64_t *)&v469->__shared_owners_;
        do
          v471 = __ldxr(v470);
        while (__stxr(v471 + 1, v470));
        v701[1] = v469;
        do
          v472 = __ldxr(v470);
        while (__stxr(v472 + 1, v470));
      }
      else
      {
        v701[1] = 0;
      }
      v701[0] = v468;
      v702[0] = 0;
      v702[1] = 0;
      LOBYTE(v703) = 0;
      if (v468)
        LODWORD(v468) = (*(uint64_t (**)(void *))(*(_QWORD *)v468 + 48))(v468);
      LOBYTE(v703) = (_BYTE)v468;
      if (v469)
      {
        v473 = (unint64_t *)&v469->__shared_owners_;
        do
          v474 = __ldaxr(v473);
        while (__stlxr(v474 - 1, v473));
        if (!v474)
        {
          ((void (*)(std::__shared_weak_count *))v469->__on_zero_shared)(v469);
          std::__shared_weak_count::__release_weak(v469);
        }
        LODWORD(v468) = v703;
      }
      if ((_DWORD)v468)
      {
        v475 = *((_QWORD *)v701[0] + 3);
        v476 = *(float **)v475;
        if (*(_QWORD *)v475)
        {
          v477 = *v476;
          v478 = *v476 == 1.0;
          if (*(_BYTE *)(v475 + 10))
          {
            if (v477 != 0.0 && v477 != 1.0)
            {
LABEL_605:
              if ((gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtEnd(*((_QWORD *)v701[0] + 3), 0x12Cu, 0) & 1) == 0)
              {
                v523 = 1;
                goto LABEL_607;
              }
              goto LABEL_692;
            }
          }
        }
        else
        {
          v478 = 0;
        }
        v523 = *(unsigned __int8 *)(v475 + v478 + 11);
        if (v523 == 2)
          goto LABEL_605;
LABEL_607:
        if ((gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtEnd(v475, 0x12Cu, v523) & 1) != 0)
        {
LABEL_692:
          gss::QueryableLocker<gss::PropertyID>::~QueryableLocker((uint64_t)v701);
          goto LABEL_693;
        }
        if (v476)
        {
          v524 = *v476;
          v525 = *v476 == 1.0;
          if (*(_BYTE *)(v475 + 10))
          {
            if (v524 != 0.0 && v524 != 1.0)
            {
LABEL_691:
              if ((gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtEnd(v475, 0x12Du, 0) & 1) != 0)
                goto LABEL_692;
              v583 = 1;
              goto LABEL_736;
            }
          }
        }
        else
        {
          v525 = 0;
        }
        v583 = *(unsigned __int8 *)(v475 + v525 + 11);
        if (v583 == 2)
          goto LABEL_691;
LABEL_736:
        hasValueForKeyAtEnd = gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtEnd(v475, 0x12Du, v583);
        gss::QueryableLocker<gss::PropertyID>::~QueryableLocker((uint64_t)v701);
        if ((hasValueForKeyAtEnd & 1) != 0)
        {
LABEL_693:
          v584 = operator new(0xE8uLL);
          v584[1] = 0;
          v584[2] = 0;
          *v584 = &off_1E42E1D38;
          v585 = (void *)ggl::BufferData::BufferData((uint64_t)(v584 + 3), qword_1EE56DB90, 2, 1, 6, 1);
          v584[28] = ggl::FlyoverBorderRibbon::Tile::reflection(void)::reflection;
          v584[3] = &off_1E42B9490;
          v701[0] = v585;
          v701[1] = v584;
          v586 = operator new(0xE8uLL);
          v586[1] = 0;
          v586[2] = 0;
          *v586 = &off_1E42E1DA8;
          v587 = ggl::BufferData::BufferData((uint64_t)(v586 + 3), qword_1EE56DBD0, 2, 1, 6, 1);
          v586[28] = ggl::FlyoverBorderRibbon::Border::reflection(void)::reflection;
          v586[3] = &off_1E42B94D0;
          *(_QWORD *)&v685[0] = v587;
          *((_QWORD *)&v685[0] + 1) = v586;
          v588 = (std::__shared_weak_count *)operator new(0xE8uLL);
          v588->__shared_owners_ = 0;
          v588->__shared_weak_owners_ = 0;
          v588->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E1D70;
          v589 = ggl::BufferData::BufferData((uint64_t)&v588[1], qword_1EE56DC30, 2, 1, 6, 1);
          v588[9].__shared_owners_ = (uint64_t)ggl::FlyoverBorderRibbon::Color::reflection(void)::reflection;
          v588[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B94B0;
          v699 = v589;
          v700 = v588;
          v590 = (std::__shared_weak_count *)operator new(0xE8uLL);
          v590->__shared_owners_ = 0;
          v590->__shared_weak_owners_ = 0;
          v590->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E0F38;
          v591 = ggl::BufferData::BufferData((uint64_t)&v590[1], qword_1EE55C0E0, 2, 1, 6, 1);
          v590[9].__shared_owners_ = (uint64_t)ggl::FlyoverRoad::Blend::reflection(void)::reflection;
          v590[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B8C30;
          v697 = v591;
          v698 = v590;
          v592 = *(_OWORD *)((char *)a3 + 152);
          v593 = (std::__shared_weak_count *)*((_QWORD *)a3 + 20);
          if (v593)
          {
            v594 = (unint64_t *)&v593->__shared_owners_;
            do
              v595 = __ldxr(v594);
            while (__stxr(v595 + 1, v594));
          }
          v696 = v592;
          *(_BYTE *)(v463 + 392) = 1;
          v677 = v592;
          v596 = operator new();
          *(_QWORD *)(v463 + 304) = ggl::FlyoverBorderRibbon::DefaultPipelineSetup::DefaultPipelineSetup(v596, v677, v593, &v681, &v697, (uint64_t *)v701, (uint64_t *)v685, &v699, *((_QWORD *)a3 + 32), *((_QWORD *)a3 + 31));
          v598 = *(uint64_t **)(v463 + 504);
          v597 = *(uint64_t **)(v463 + 512);
          if (v598 != v597)
          {
            do
            {
              v599 = (std::__shared_weak_count *)operator new(0xE8uLL);
              v599->__shared_owners_ = 0;
              v600 = (unint64_t *)&v599->__shared_owners_;
              v599->__shared_weak_owners_ = 0;
              v599->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E0F38;
              v601 = ggl::BufferData::BufferData((uint64_t)&v599[1], qword_1EE55C0E0, 2, 1, 6, 1);
              v599[9].__shared_owners_ = (uint64_t)ggl::FlyoverRoad::Blend::reflection(void)::reflection;
              v599[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B8C30;
              v694 = v601;
              v695 = v599;
              v602 = *v598;
              v603 = operator new();
              *(_QWORD *)(v602 + 328) = ggl::FlyoverBorderRibbon::DefaultPipelineSetup::DefaultPipelineSetup(v603, v696, *((std::__shared_weak_count **)&v696 + 1), &v681, &v694, (uint64_t *)v701, (uint64_t *)v685, &v699, *((_QWORD *)a3 + 32), *((_QWORD *)a3 + 31));
              *(_QWORD *)(*v598 + 320) = *((_QWORD *)a3 + 9);
              *(_QWORD *)(*v598 + 360) = *(_QWORD *)(*v598 + 448);
              v604 = *v598;
              *(_OWORD *)(v604 + 368) = *(_OWORD *)(*v598 + 16);
              *(_QWORD *)(v604 + 384) = 0;
              *(_QWORD *)(v604 + 392) = 1;
              do
                v605 = __ldaxr(v600);
              while (__stlxr(v605 - 1, v600));
              if (!v605)
              {
                ((void (*)(std::__shared_weak_count *))v599->__on_zero_shared)(v599);
                std::__shared_weak_count::__release_weak(v599);
              }
              ++v598;
            }
            while (v598 != v597);
            v593 = (std::__shared_weak_count *)*((_QWORD *)&v696 + 1);
            if (*((_QWORD *)&v696 + 1))
              goto LABEL_705;
            goto LABEL_708;
          }
          if (!v593)
            goto LABEL_708;
LABEL_705:
          v606 = (unint64_t *)&v593->__shared_owners_;
          do
            v607 = __ldaxr(v606);
          while (__stlxr(v607 - 1, v606));
          if (v607)
          {
LABEL_708:
            v608 = v698;
            if (v698)
              goto LABEL_709;
          }
          else
          {
            ((void (*)(std::__shared_weak_count *))v593->__on_zero_shared)(v593);
            std::__shared_weak_count::__release_weak(v593);
            v608 = v698;
            if (v698)
            {
LABEL_709:
              v609 = (unint64_t *)&v608->__shared_owners_;
              do
                v610 = __ldaxr(v609);
              while (__stlxr(v610 - 1, v609));
              if (!v610)
              {
                ((void (*)(std::__shared_weak_count *))v608->__on_zero_shared)(v608);
                std::__shared_weak_count::__release_weak(v608);
              }
            }
          }
          v611 = v700;
          if (!v700)
            goto LABEL_718;
          v612 = (unint64_t *)&v700->__shared_owners_;
          do
            v613 = __ldaxr(v612);
          while (__stlxr(v613 - 1, v612));
          if (!v613)
          {
            ((void (*)(std::__shared_weak_count *))v611->__on_zero_shared)(v611);
            std::__shared_weak_count::__release_weak(v611);
            v614 = (std::__shared_weak_count *)*((_QWORD *)&v685[0] + 1);
            if (*((_QWORD *)&v685[0] + 1))
            {
LABEL_719:
              v615 = (unint64_t *)&v614->__shared_owners_;
              do
                v616 = __ldaxr(v615);
              while (__stlxr(v616 - 1, v615));
              if (!v616)
              {
                ((void (*)(std::__shared_weak_count *))v614->__on_zero_shared)(v614);
                std::__shared_weak_count::__release_weak(v614);
              }
            }
          }
          else
          {
LABEL_718:
            v614 = (std::__shared_weak_count *)*((_QWORD *)&v685[0] + 1);
            if (*((_QWORD *)&v685[0] + 1))
              goto LABEL_719;
          }
          v580 = (std::__shared_weak_count *)v701[1];
          if (v701[1])
          {
            v617 = (unint64_t *)((char *)v701[1] + 8);
            do
              v582 = __ldaxr(v617);
            while (__stlxr(v582 - 1, v617));
            goto LABEL_727;
          }
          goto LABEL_728;
        }
      }
      else
      {
        gss::QueryableLocker<gss::PropertyID>::~QueryableLocker((uint64_t)v701);
      }
      v480 = operator new(0xE8uLL);
      v480[1] = 0;
      v480[2] = 0;
      *v480 = &off_1E42E0FA8;
      v481 = (void *)ggl::BufferData::BufferData((uint64_t)(v480 + 3), qword_1EE55C000, 2, 1, 6, 1);
      v480[28] = ggl::FlyoverRoad::Transform::reflection(void)::reflection;
      v480[3] = &off_1E42B8C70;
      v701[0] = v481;
      v701[1] = v480;
      v482 = operator new(0xE8uLL);
      v482[1] = 0;
      v482[2] = 0;
      *v482 = &off_1E42E0F70;
      v483 = ggl::BufferData::BufferData((uint64_t)(v482 + 3), qword_1EE55C0A0, 2, 1, 6, 1);
      v482[28] = ggl::FlyoverRoad::Color::reflection(void)::reflection;
      v482[3] = &off_1E42B8C50;
      *(_QWORD *)&v685[0] = v483;
      *((_QWORD *)&v685[0] + 1) = v482;
      v484 = (std::__shared_weak_count *)operator new(0xE8uLL);
      v484->__shared_owners_ = 0;
      v484->__shared_weak_owners_ = 0;
      v484->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E0F38;
      v485 = ggl::BufferData::BufferData((uint64_t)&v484[1], qword_1EE55C0E0, 2, 1, 6, 1);
      v484[9].__shared_owners_ = (uint64_t)ggl::FlyoverRoad::Blend::reflection(void)::reflection;
      v484[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B8C30;
      v699 = v485;
      v700 = v484;
      v486 = (std::__shared_weak_count *)operator new(0xE8uLL);
      v486->__shared_owners_ = 0;
      v486->__shared_weak_owners_ = 0;
      v486->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E0FA8;
      v487 = ggl::BufferData::BufferData((uint64_t)&v486[1], qword_1EE55C000, 2, 1, 6, 1);
      v486[9].__shared_owners_ = (uint64_t)ggl::FlyoverRoad::Transform::reflection(void)::reflection;
      v486[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B8C70;
      v697 = v487;
      v698 = v486;
      v488 = operator new(0xE8uLL);
      v488[1] = 0;
      v488[2] = 0;
      *v488 = &off_1E42E0F70;
      v489 = ggl::BufferData::BufferData((uint64_t)(v488 + 3), qword_1EE55C0A0, 2, 1, 6, 1);
      v488[28] = ggl::FlyoverRoad::Color::reflection(void)::reflection;
      v488[3] = &off_1E42B8C50;
      *(_QWORD *)&v696 = v489;
      *((_QWORD *)&v696 + 1) = v488;
      v490 = (std::__shared_weak_count *)operator new(0xE8uLL);
      v490->__shared_owners_ = 0;
      v490->__shared_weak_owners_ = 0;
      v490->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E0F00;
      v491 = ggl::BufferData::BufferData((uint64_t)&v490[1], qword_1EE55C040, 2, 1, 6, 1);
      v490[9].__shared_owners_ = (uint64_t)ggl::FlyoverRoad::RibbonExtra::reflection(void)::reflection;
      v490[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B8C10;
      v694 = v491;
      v695 = v490;
      v492 = (std::__shared_weak_count *)operator new(0xE8uLL);
      v492->__shared_owners_ = 0;
      v492->__shared_weak_owners_ = 0;
      v492->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E0F38;
      v493 = ggl::BufferData::BufferData((uint64_t)&v492[1], qword_1EE55C0E0, 2, 1, 6, 1);
      v492[9].__shared_owners_ = (uint64_t)ggl::FlyoverRoad::Blend::reflection(void)::reflection;
      v492[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B8C30;
      v692 = v493;
      v693 = v492;
      v495 = *((_QWORD *)a3 + 7);
      v494 = *((_QWORD *)a3 + 8);
      if (*(_BYTE *)(*(_QWORD *)(v463 + 560) + 8))
      {
        v496 = *(_OWORD *)((char *)a3 + 104);
        v497 = (std::__shared_weak_count *)*((_QWORD *)a3 + 14);
        if (v497)
        {
          v498 = (unint64_t *)&v497->__shared_owners_;
          do
            v499 = __ldxr(v498);
          while (__stxr(v499 + 1, v498));
        }
        v675 = v496;
        v691 = v496;
        v500 = *(_OWORD *)((char *)a3 + 136);
        v501 = (std::__shared_weak_count *)*((_QWORD *)a3 + 18);
        if (v501)
        {
          v502 = (unint64_t *)&v501->__shared_owners_;
          do
            v503 = __ldxr(v502);
          while (__stxr(v503 + 1, v502));
        }
        v663 = v500;
        v690 = v500;
        *(_BYTE *)(v463 + 264) = 1;
        v504 = (_QWORD *)operator new();
        *(_QWORD *)(v463 + 176) = ggl::FlyoverRoadFillProcedural::DefaultPipelineSetup::DefaultPipelineSetup(v504, v675, v497, &v681, &v699, (uint64_t *)v701, (uint64_t *)v685);
        *(_BYTE *)(v463 + 136) = 1;
        v505 = (_QWORD *)operator new();
        *(_QWORD *)(v463 + 48) = ggl::FlyoverRoadStrokeProcedural::DefaultPipelineSetup::DefaultPipelineSetup(v505, v663, v501, &v681, &v692, &v697, (uint64_t *)&v696, &v694);
        v507 = *(uint64_t **)(v463 + 504);
        v506 = *(uint64_t **)(v463 + 512);
        if (v507 == v506)
        {
          if (!v501)
            goto LABEL_621;
LABEL_617:
          v527 = (unint64_t *)&v501->__shared_owners_;
          do
            v528 = __ldaxr(v527);
          while (__stlxr(v528 - 1, v527));
          if (!v528)
          {
            ((void (*)(std::__shared_weak_count *))v501->__on_zero_shared)(v501);
            std::__shared_weak_count::__release_weak(v501);
          }
        }
        else
        {
          do
          {
            v508 = (std::__shared_weak_count *)operator new(0xE8uLL);
            v508->__shared_owners_ = 0;
            v508->__shared_weak_owners_ = 0;
            v508->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E0F38;
            v509 = ggl::BufferData::BufferData((uint64_t)&v508[1], qword_1EE55C0E0, 2, 1, 6, 1);
            v508[9].__shared_owners_ = (uint64_t)ggl::FlyoverRoad::Blend::reflection(void)::reflection;
            v508[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B8C30;
            v688 = v509;
            v689 = v508;
            v510 = (std::__shared_weak_count *)operator new(0xE8uLL);
            v510->__shared_owners_ = 0;
            v511 = (unint64_t *)&v510->__shared_owners_;
            v510->__shared_weak_owners_ = 0;
            v510->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E0F38;
            v512 = ggl::BufferData::BufferData((uint64_t)&v510[1], qword_1EE55C0E0, 2, 1, 6, 1);
            v510[9].__shared_owners_ = (uint64_t)ggl::FlyoverRoad::Blend::reflection(void)::reflection;
            v510[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B8C30;
            v686 = v512;
            v687 = v510;
            v513 = *v507;
            v514 = (_QWORD *)operator new();
            *(_QWORD *)(v513 + 208) = ggl::FlyoverRoadFillProcedural::DefaultPipelineSetup::DefaultPipelineSetup(v514, v691, *((std::__shared_weak_count **)&v691 + 1), &v681, &v688, (uint64_t *)v701, (uint64_t *)v685);
            v515 = *v507;
            v516 = (_QWORD *)operator new();
            *(_QWORD *)(v515 + 88) = ggl::FlyoverRoadStrokeProcedural::DefaultPipelineSetup::DefaultPipelineSetup(v516, v690, *((std::__shared_weak_count **)&v690 + 1), &v681, &v686, &v697, (uint64_t *)&v696, &v694);
            *(_QWORD *)(*v507 + 200) = v494;
            *(_QWORD *)(*v507 + 80) = v495;
            *(_QWORD *)(*v507 + 240) = *(_QWORD *)(*v507 + 448);
            *(_QWORD *)(*v507 + 120) = *(_QWORD *)(*v507 + 448);
            v517 = *v507;
            *(_OWORD *)(v517 + 248) = *(_OWORD *)(*v507 + 16);
            *(_QWORD *)(v517 + 264) = 0;
            *(_QWORD *)(v517 + 272) = 1;
            v518 = *v507;
            *(_OWORD *)(v518 + 128) = *(_OWORD *)(*v507 + 16);
            *(_QWORD *)(v518 + 144) = 0;
            *(_QWORD *)(v518 + 152) = 1;
            do
              v519 = __ldaxr(v511);
            while (__stlxr(v519 - 1, v511));
            if (!v519)
            {
              ((void (*)(std::__shared_weak_count *))v510->__on_zero_shared)(v510);
              std::__shared_weak_count::__release_weak(v510);
            }
            v520 = v689;
            if (v689)
            {
              v521 = (unint64_t *)&v689->__shared_owners_;
              do
                v522 = __ldaxr(v521);
              while (__stlxr(v522 - 1, v521));
              if (!v522)
              {
                ((void (*)(std::__shared_weak_count *))v520->__on_zero_shared)(v520);
                std::__shared_weak_count::__release_weak(v520);
              }
            }
            ++v507;
          }
          while (v507 != v506);
          v501 = (std::__shared_weak_count *)*((_QWORD *)&v690 + 1);
          if (*((_QWORD *)&v690 + 1))
            goto LABEL_617;
        }
LABEL_621:
        v529 = (std::__shared_weak_count *)*((_QWORD *)&v691 + 1);
        if (*((_QWORD *)&v691 + 1))
        {
          v530 = (unint64_t *)(*((_QWORD *)&v691 + 1) + 8);
          do
            v531 = __ldaxr(v530);
          while (__stlxr(v531 - 1, v530));
          goto LABEL_652;
        }
        goto LABEL_653;
      }
      v532 = *(_OWORD *)((char *)a3 + 88);
      v533 = (std::__shared_weak_count *)*((_QWORD *)a3 + 12);
      if (v533)
      {
        v534 = (unint64_t *)&v533->__shared_owners_;
        do
          v535 = __ldxr(v534);
        while (__stxr(v535 + 1, v534));
      }
      v676 = v532;
      v691 = v532;
      v536 = *(_OWORD *)((char *)a3 + 120);
      v537 = (std::__shared_weak_count *)*((_QWORD *)a3 + 16);
      if (v537)
      {
        v538 = (unint64_t *)&v537->__shared_owners_;
        do
          v539 = __ldxr(v538);
        while (__stxr(v539 + 1, v538));
      }
      v664 = v536;
      v690 = v536;
      *(_BYTE *)(v463 + 264) = 1;
      v540 = operator new();
      *(_QWORD *)(v463 + 176) = ggl::FlyoverRoadFillTextured::DefaultPipelineSetup::DefaultPipelineSetup(v540, v676, v533, &v681, &v699, (uint64_t *)v701, (uint64_t *)v685, *((_QWORD *)a3 + 31));
      *(_BYTE *)(v463 + 136) = 1;
      v541 = operator new();
      *(_QWORD *)(v463 + 48) = ggl::FlyoverRoadStrokeTextured::DefaultPipelineSetup::DefaultPipelineSetup(v541, v664, v537, &v681, &v692, &v697, (uint64_t *)&v696, &v694, *((_QWORD *)a3 + 31));
      v543 = *(uint64_t **)(v463 + 504);
      v542 = *(uint64_t **)(v463 + 512);
      if (v543 == v542)
      {
        if (!v537)
        {
LABEL_649:
          v529 = (std::__shared_weak_count *)*((_QWORD *)&v691 + 1);
          if (*((_QWORD *)&v691 + 1))
          {
            v561 = (unint64_t *)(*((_QWORD *)&v691 + 1) + 8);
            do
              v531 = __ldaxr(v561);
            while (__stlxr(v531 - 1, v561));
LABEL_652:
            if (!v531)
            {
              ((void (*)(std::__shared_weak_count *))v529->__on_zero_shared)(v529);
              std::__shared_weak_count::__release_weak(v529);
              v562 = v693;
              if (v693)
                goto LABEL_654;
              goto LABEL_657;
            }
          }
LABEL_653:
          v562 = v693;
          if (!v693)
            goto LABEL_657;
LABEL_654:
          v563 = (unint64_t *)&v562->__shared_owners_;
          do
            v564 = __ldaxr(v563);
          while (__stlxr(v564 - 1, v563));
          if (v564)
          {
LABEL_657:
            v565 = v695;
            if (v695)
              goto LABEL_658;
          }
          else
          {
            ((void (*)(std::__shared_weak_count *))v562->__on_zero_shared)(v562);
            std::__shared_weak_count::__release_weak(v562);
            v565 = v695;
            if (v695)
            {
LABEL_658:
              v566 = (unint64_t *)&v565->__shared_owners_;
              do
                v567 = __ldaxr(v566);
              while (__stlxr(v567 - 1, v566));
              if (!v567)
              {
                ((void (*)(std::__shared_weak_count *))v565->__on_zero_shared)(v565);
                std::__shared_weak_count::__release_weak(v565);
              }
            }
          }
          v568 = (std::__shared_weak_count *)*((_QWORD *)&v696 + 1);
          if (!*((_QWORD *)&v696 + 1))
            goto LABEL_669;
          v569 = (unint64_t *)(*((_QWORD *)&v696 + 1) + 8);
          do
            v570 = __ldaxr(v569);
          while (__stlxr(v570 - 1, v569));
          if (!v570)
          {
            ((void (*)(std::__shared_weak_count *))v568->__on_zero_shared)(v568);
            std::__shared_weak_count::__release_weak(v568);
            v571 = v698;
            if (v698)
            {
LABEL_670:
              v572 = (unint64_t *)&v571->__shared_owners_;
              do
                v573 = __ldaxr(v572);
              while (__stlxr(v573 - 1, v572));
              if (!v573)
              {
                ((void (*)(std::__shared_weak_count *))v571->__on_zero_shared)(v571);
                std::__shared_weak_count::__release_weak(v571);
              }
            }
          }
          else
          {
LABEL_669:
            v571 = v698;
            if (v698)
              goto LABEL_670;
          }
          v574 = v700;
          if (!v700)
            goto LABEL_679;
          v575 = (unint64_t *)&v700->__shared_owners_;
          do
            v576 = __ldaxr(v575);
          while (__stlxr(v576 - 1, v575));
          if (!v576)
          {
            ((void (*)(std::__shared_weak_count *))v574->__on_zero_shared)(v574);
            std::__shared_weak_count::__release_weak(v574);
            v577 = (std::__shared_weak_count *)*((_QWORD *)&v685[0] + 1);
            if (*((_QWORD *)&v685[0] + 1))
            {
LABEL_680:
              v578 = (unint64_t *)&v577->__shared_owners_;
              do
                v579 = __ldaxr(v578);
              while (__stlxr(v579 - 1, v578));
              if (!v579)
              {
                ((void (*)(std::__shared_weak_count *))v577->__on_zero_shared)(v577);
                std::__shared_weak_count::__release_weak(v577);
              }
            }
          }
          else
          {
LABEL_679:
            v577 = (std::__shared_weak_count *)*((_QWORD *)&v685[0] + 1);
            if (*((_QWORD *)&v685[0] + 1))
              goto LABEL_680;
          }
          v580 = (std::__shared_weak_count *)v701[1];
          if (!v701[1])
            goto LABEL_728;
          v581 = (unint64_t *)((char *)v701[1] + 8);
          do
            v582 = __ldaxr(v581);
          while (__stlxr(v582 - 1, v581));
LABEL_727:
          if (!v582)
          {
            ((void (*)(std::__shared_weak_count *))v580->__on_zero_shared)(v580);
            std::__shared_weak_count::__release_weak(v580);
            v618 = v682;
            if (v682)
            {
LABEL_729:
              v619 = (unint64_t *)&v618->__shared_owners_;
              do
                v620 = __ldaxr(v619);
              while (__stlxr(v620 - 1, v619));
              if (!v620)
              {
                ((void (*)(std::__shared_weak_count *))v618->__on_zero_shared)(v618);
                std::__shared_weak_count::__release_weak(v618);
              }
            }
          }
          else
          {
LABEL_728:
            v618 = v682;
            if (v682)
              goto LABEL_729;
          }
          v366 = this;
          v461 = v668;
LABEL_553:
          if (++v462 == v461)
          {
            v460 = *((_QWORD *)v366 + 18);
            goto LABEL_739;
          }
          continue;
        }
      }
      else
      {
        do
        {
          v544 = (std::__shared_weak_count *)operator new(0xE8uLL);
          v544->__shared_owners_ = 0;
          v544->__shared_weak_owners_ = 0;
          v544->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E0F38;
          v545 = ggl::BufferData::BufferData((uint64_t)&v544[1], qword_1EE55C0E0, 2, 1, 6, 1);
          v544[9].__shared_owners_ = (uint64_t)ggl::FlyoverRoad::Blend::reflection(void)::reflection;
          v544[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B8C30;
          v688 = v545;
          v689 = v544;
          v546 = (std::__shared_weak_count *)operator new(0xE8uLL);
          v546->__shared_owners_ = 0;
          v547 = (unint64_t *)&v546->__shared_owners_;
          v546->__shared_weak_owners_ = 0;
          v546->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E0F38;
          v548 = ggl::BufferData::BufferData((uint64_t)&v546[1], qword_1EE55C0E0, 2, 1, 6, 1);
          v546[9].__shared_owners_ = (uint64_t)ggl::FlyoverRoad::Blend::reflection(void)::reflection;
          v546[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B8C30;
          v686 = v548;
          v687 = v546;
          v549 = *v543;
          v550 = operator new();
          *(_QWORD *)(v549 + 208) = ggl::FlyoverRoadFillTextured::DefaultPipelineSetup::DefaultPipelineSetup(v550, v691, *((std::__shared_weak_count **)&v691 + 1), &v681, &v688, (uint64_t *)v701, (uint64_t *)v685, *((_QWORD *)a3 + 31));
          v551 = *v543;
          v552 = operator new();
          *(_QWORD *)(v551 + 88) = ggl::FlyoverRoadStrokeTextured::DefaultPipelineSetup::DefaultPipelineSetup(v552, v690, *((std::__shared_weak_count **)&v690 + 1), &v681, &v686, &v697, (uint64_t *)&v696, &v694, *((_QWORD *)a3 + 31));
          *(_QWORD *)(*v543 + 200) = v494;
          *(_QWORD *)(*v543 + 80) = v495;
          *(_QWORD *)(*v543 + 240) = *(_QWORD *)(*v543 + 448);
          *(_QWORD *)(*v543 + 120) = *(_QWORD *)(*v543 + 448);
          v553 = *v543;
          *(_OWORD *)(v553 + 248) = *(_OWORD *)(*v543 + 16);
          *(_QWORD *)(v553 + 264) = 0;
          *(_QWORD *)(v553 + 272) = 1;
          v554 = *v543;
          *(_OWORD *)(v554 + 128) = *(_OWORD *)(*v543 + 16);
          *(_QWORD *)(v554 + 144) = 0;
          *(_QWORD *)(v554 + 152) = 1;
          do
            v555 = __ldaxr(v547);
          while (__stlxr(v555 - 1, v547));
          if (!v555)
          {
            ((void (*)(std::__shared_weak_count *))v546->__on_zero_shared)(v546);
            std::__shared_weak_count::__release_weak(v546);
          }
          v556 = v689;
          if (v689)
          {
            v557 = (unint64_t *)&v689->__shared_owners_;
            do
              v558 = __ldaxr(v557);
            while (__stlxr(v558 - 1, v557));
            if (!v558)
            {
              ((void (*)(std::__shared_weak_count *))v556->__on_zero_shared)(v556);
              std::__shared_weak_count::__release_weak(v556);
            }
          }
          ++v543;
        }
        while (v543 != v542);
        v537 = (std::__shared_weak_count *)*((_QWORD *)&v690 + 1);
        if (!*((_QWORD *)&v690 + 1))
          goto LABEL_649;
      }
      break;
    }
    v559 = (unint64_t *)&v537->__shared_owners_;
    do
      v560 = __ldaxr(v559);
    while (__stlxr(v560 - 1, v559));
    if (!v560)
    {
      ((void (*)(std::__shared_weak_count *))v537->__on_zero_shared)(v537);
      std::__shared_weak_count::__release_weak(v537);
    }
    goto LABEL_649;
  }
LABEL_739:
  v622 = *((_DWORD *)v366 + 18);
  v623 = 6.28318531 / (double)(1 << v622);
  v624 = v623 * ((double)*((int *)v366 + 16) + 0.5);
  v625 = exp(((double)((-1 << v622) + *((_DWORD *)v366 + 17) + (1 << v622)) + 0.5) * v623 + -3.14159265);
  v626 = atan(v625) * 2.0 + -1.57079633;
  v627 = fmod(v624, 6.28318531);
  v628 = fmod(v627 + 6.28318531, 6.28318531) + -3.14159265;
  v629 = __sincos_stret(v626);
  v630 = 6378137.0 / sqrt(v629.__sinval * v629.__sinval * -0.00669437999 + 1.0);
  v631 = __sincos_stret(v628);
  v632 = v630 * v629.__cosval * v631.__cosval;
  *((double *)v366 + 12) = v632;
  *((double *)v366 + 13) = v630 * v629.__cosval * v631.__sinval;
  *((double *)v366 + 14) = v629.__sinval * 0.99330562 * v630;
  *(double *)(v460 + 232) = v632;
  *(_QWORD *)(v460 + 240) = *((_QWORD *)v366 + 13);
  *(_QWORD *)(v460 + 248) = *((_QWORD *)v366 + 14);
  *((_QWORD *)v366 + 17) = 0;
  if (v678)
    operator delete(v678);
}

void sub_19F91765C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void **a19, uint64_t *a20,void **a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *__p)
{
  void *v37;
  uint64_t v38;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  void *v43;

  MEMORY[0x1A1AF4E00](v38, 0x1020C4007FF0C4BLL);
  if (v37)
    operator delete(v37);
  v40 = *a20;
  *a20 = 0;
  if (v40)
  {
    v41 = *(_QWORD *)(v40 + 2584);
    if (v41)
      MEMORY[0x1A1AF4DE8](v41, 0x1000C8000313F17);
    MEMORY[0x1A1AF4E00](v40, 0x1020C4007FF0C4BLL);
  }
  v42 = *a21;
  if (*a21)
  {
    *(_QWORD *)(a34 + 40) = v42;
    operator delete(v42);
  }
  v43 = *a19;
  if (*a19)
  {
    *(_QWORD *)(a34 + 16) = v43;
    operator delete(v43);
  }
  MEMORY[0x1A1AF4E00](a34, 0x10A1C4045AE8C7DLL);
  if (!__p)
    _Unwind_Resume(a1);
  operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t std::__split_buffer<altitude::FlyoverRoadTile>::~__split_buffer(uint64_t a1)
{
  uint64_t v2;
  uint64_t i;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  void *v7;

  v2 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v2; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 72;
    v4 = *(std::__shared_weak_count **)(i - 8);
    if (!v4)
      goto LABEL_8;
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (v6)
    {
LABEL_8:
      v7 = *(void **)(i - 40);
      if (!v7)
        continue;
LABEL_9:
      *(_QWORD *)(i - 32) = v7;
      operator delete(v7);
      continue;
    }
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
    v7 = *(void **)(i - 40);
    if (v7)
      goto LABEL_9;
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void std::__function::__func<altitude::RoadSuperTile::collectRenderItems(md::PassList &,unsigned long)::$_0,std::allocator<altitude::RoadSuperTile::collectRenderItems(md::PassList &,unsigned long)::$_0>,void ()(md::FlyoverRoadPasses,ggl::RenderItem *)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<altitude::RoadSuperTile::collectRenderItems(md::PassList &,unsigned long)::$_0,std::allocator<altitude::RoadSuperTile::collectRenderItems(md::PassList &,unsigned long)::$_0>,void ()(md::FlyoverRoadPasses,ggl::RenderItem *)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42D8630;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<altitude::RoadSuperTile::collectRenderItems(md::PassList &,unsigned long)::$_0,std::allocator<altitude::RoadSuperTile::collectRenderItems(md::PassList &,unsigned long)::$_0>,void ()(md::FlyoverRoadPasses,ggl::RenderItem *)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42D8630;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<altitude::RoadSuperTile::collectRenderItems(md::PassList &,unsigned long)::$_0,std::allocator<altitude::RoadSuperTile::collectRenderItems(md::PassList &,unsigned long)::$_0>,void ()(md::FlyoverRoadPasses,ggl::RenderItem *)>::operator()(uint64_t a1, unsigned int *a2, ggl::RenderItem **a3)
{
  return ggl::CommandBuffer::pushRenderItem(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * *a2), *a3);
}

void md::LabelTextureAtlasStore::~LabelTextureAtlasStore(md::LabelTextureAtlasStore *this)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)this = &off_1E429CE90;
  v2 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
}

{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)this = &off_1E429CE90;
  v2 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  JUMPOUT(0x1A1AF4E00);
}

void std::__function::__func<md::LabelTextureAtlasStore::startFrame(void)::$_1,std::allocator<md::LabelTextureAtlasStore::startFrame(void)::$_1>,void ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::LabelTextureAtlasStore::startFrame(void)::$_1,std::allocator<md::LabelTextureAtlasStore::startFrame(void)::$_1>,void ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E42D0E98;
  return result;
}

void std::__function::__func<md::LabelTextureAtlasStore::startFrame(void)::$_1,std::allocator<md::LabelTextureAtlasStore::startFrame(void)::$_1>,void ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E42D0E98;
}

void std::__function::__func<md::LabelTextureAtlasStore::startFrame(void)::$_1,std::allocator<md::LabelTextureAtlasStore::startFrame(void)::$_1>,void ()(void)>::operator()()
{
  NSObject *v0;
  uint8_t v1[16];

  if (GEOGetVectorKitPerformanceLog_onceToken != -1)
    dispatch_once(&GEOGetVectorKitPerformanceLog_onceToken, &__block_literal_global_13_11780);
  v0 = (id)GEOGetVectorKitPerformanceLog_log;
  if (os_signpost_enabled(v0))
  {
    *(_WORD *)v1 = 0;
    _os_signpost_emit_with_name_impl(&dword_19F029000, v0, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "LabelsTextureAtlasUpdate", (const char *)&unk_1A0189141, v1, 2u);
  }

}

void std::__function::__func<md::LabelTextureAtlasStore::startFrame(void)::$_0,std::allocator<md::LabelTextureAtlasStore::startFrame(void)::$_0>,void ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::LabelTextureAtlasStore::startFrame(void)::$_0,std::allocator<md::LabelTextureAtlasStore::startFrame(void)::$_0>,void ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E42D0E50;
  return result;
}

void std::__function::__func<md::LabelTextureAtlasStore::startFrame(void)::$_0,std::allocator<md::LabelTextureAtlasStore::startFrame(void)::$_0>,void ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E42D0E50;
}

void std::__function::__func<md::LabelTextureAtlasStore::startFrame(void)::$_0,std::allocator<md::LabelTextureAtlasStore::startFrame(void)::$_0>,void ()(void)>::operator()()
{
  NSObject *v0;
  uint8_t v1[16];

  if (GEOGetVectorKitPerformanceLog_onceToken != -1)
    dispatch_once(&GEOGetVectorKitPerformanceLog_onceToken, &__block_literal_global_13_11780);
  v0 = (id)GEOGetVectorKitPerformanceLog_log;
  if (os_signpost_enabled(v0))
  {
    *(_WORD *)v1 = 0;
    _os_signpost_emit_with_name_impl(&dword_19F029000, v0, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "LabelsTextureAtlasUpdate", (const char *)&unk_1A0189141, v1, 2u);
  }

}

uint64_t md::LabelTextureAtlasStore::debugString(md::LabelTextureAtlasStore *this, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  std::ios_base *v9;
  uint64_t v10;
  _QWORD *v11;
  void *p_p;
  uint64_t v13;
  _QWORD *v14;
  void *v15;
  uint64_t v16;
  size_t v17;
  unint64_t v18;
  const void **v19;
  const void *v20;
  uint64_t v21;
  uint64_t v22;
  md::LabelTextureAtlasStore *v23;
  void *__p;
  uint64_t v26;
  unsigned __int8 v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD v30[3];
  uint64_t v31;
  unint64_t v32;
  void *v33[2];
  __int128 v34;
  int v35;
  uint64_t v36[19];

  v4 = MEMORY[0x1E0DE4FE0];
  v5 = MEMORY[0x1E0DE4FE0] + 64;
  v6 = (uint64_t *)MEMORY[0x1E0DE4F60];
  v7 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v8 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v36[0] = MEMORY[0x1E0DE4FE0] + 64;
  v28 = v7;
  *(uint64_t *)((char *)&v28 + *(_QWORD *)(v7 - 24)) = v8;
  v9 = (std::ios_base *)((char *)&v28 + *(_QWORD *)(v28 - 24));
  std::ios_base::init(v9, &v29);
  v9[1].__vftable = 0;
  v9[1].__fmtflags_ = -1;
  v28 = v4 + 24;
  v36[0] = v5;
  std::streambuf::basic_streambuf();
  v10 = MEMORY[0x1E0DE4FB8];
  v29 = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)v33 = 0u;
  v34 = 0u;
  v35 = 16;
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v28, (uint64_t)"TextureAtlases: ", 16);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v28, (uint64_t)"\n", 1);
  v11 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v11, (uint64_t)":", 1);
  (*(void (**)(void **__return_ptr, _QWORD, uint64_t))(**(_QWORD **)(a2 + 8) + 48))(&__p, *(_QWORD *)(a2 + 8), 1);
  if ((v27 & 0x80u) == 0)
    p_p = &__p;
  else
    p_p = __p;
  if ((v27 & 0x80u) == 0)
    v13 = v27;
  else
    v13 = v26;
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v11, (uint64_t)p_p, v13);
  if ((char)v27 < 0)
    operator delete(__p);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v28, (uint64_t)"\n", 1);
  v14 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v14, (uint64_t)":", 1);
  (*(void (**)(void **__return_ptr, _QWORD, uint64_t))(**(_QWORD **)(a2 + 16) + 48))(&__p, *(_QWORD *)(a2 + 16), 1);
  if ((v27 & 0x80u) == 0)
    v15 = &__p;
  else
    v15 = __p;
  if ((v27 & 0x80u) == 0)
    v16 = v27;
  else
    v16 = v26;
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
  if ((char)v27 < 0)
    operator delete(__p);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v28, (uint64_t)"\n", 1);
  if ((v35 & 0x10) != 0)
  {
    v18 = *((_QWORD *)&v34 + 1);
    if (*((_QWORD *)&v34 + 1) < v32)
    {
      *((_QWORD *)&v34 + 1) = v32;
      v18 = v32;
    }
    v19 = (const void **)&v31;
  }
  else
  {
    if ((v35 & 8) == 0)
    {
      v17 = 0;
      *((_BYTE *)this + 23) = 0;
      goto LABEL_32;
    }
    v19 = (const void **)v30;
    v18 = v30[2];
  }
  v20 = *v19;
  v17 = v18 - (_QWORD)*v19;
  if (v17 >= 0x7FFFFFFFFFFFFFF8)
    abort();
  if (v17 >= 0x17)
  {
    v21 = (v17 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v17 | 7) != 0x17)
      v21 = v17 | 7;
    v22 = v21 + 1;
    v23 = (md::LabelTextureAtlasStore *)operator new(v21 + 1);
    *((_QWORD *)this + 1) = v17;
    *((_QWORD *)this + 2) = v22 | 0x8000000000000000;
    *(_QWORD *)this = v23;
    this = v23;
    goto LABEL_31;
  }
  *((_BYTE *)this + 23) = v17;
  if (v17)
LABEL_31:
    memmove(this, v20, v17);
LABEL_32:
  *((_BYTE *)this + v17) = 0;
  v28 = *v6;
  *(uint64_t *)((char *)&v28 + *(_QWORD *)(v28 - 24)) = v6[3];
  v29 = v10 + 16;
  if (SBYTE7(v34) < 0)
    operator delete(v33[0]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1A1AF4D64](v36);
}

void sub_19F918340(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  std::ostringstream::~ostringstream((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t geo::MallocZoneAllocator::MallocZoneAllocator(uint64_t a1, const char *a2, uint64_t a3)
{
  geo::read_write_lock *v5;
  const char *v6;
  malloc_zone_t *zone;

  *(_QWORD *)(a1 + 16) = a3;
  *(_QWORD *)(a1 + 24) = a2;
  *(_QWORD *)(a1 + 32) = a3;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)a1 = &off_1E42B5668;
  *(_QWORD *)(a1 + 8) = a2;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_QWORD *)(a1 + 248) = 0;
  *(_OWORD *)(a1 + 56) = 0u;
  v5 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(a1 + 56), 0);
  if ((_DWORD)v5)
    geo::read_write_lock::logFailure(v5, (uint64_t)"initialization", v6);
  zone = malloc_create_zone(0, 0);
  *(_QWORD *)(a1 + 48) = zone;
  malloc_set_zone_name(zone, a2);
  *(_QWORD *)(a1 + 256) = os_log_create("com.apple.VectorKit", "Memory");
  return a1;
}

void geo::MallocZoneAllocator::~MallocZoneAllocator(geo::MallocZoneAllocator *this)
{
  geo::MallocZoneAllocator::~MallocZoneAllocator(this);
  JUMPOUT(0x1A1AF4E00);
}

{
  pthread_rwlock_t *v2;
  geo::read_write_lock *v3;
  const char *v4;
  NSObject *v6;
  unint64_t v7;
  geo::read_write_lock *v8;
  const char *v9;
  geo::read_write_lock *v10;
  const char *v11;
  int v12;
  unint64_t v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)this = &off_1E42B5668;
  v2 = (pthread_rwlock_t *)((char *)this + 56);
  v3 = (geo::read_write_lock *)pthread_rwlock_wrlock((pthread_rwlock_t *)((char *)this + 56));
  if ((_DWORD)v3)
    geo::read_write_lock::logFailure(v3, (uint64_t)"write lock", v4);
  if (atomic_load((unint64_t *)this + 5))
  {
    v6 = *((_QWORD *)this + 32);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      v7 = atomic_load((unint64_t *)this + 5);
      v12 = 134217984;
      v13 = v7;
      _os_log_impl(&dword_19F029000, v6, OS_LOG_TYPE_INFO, "Destroying zone allocator with %lu allocations still alive", (uint8_t *)&v12, 0xCu);
    }
  }
  else
  {
    malloc_destroy_zone(*((malloc_zone_t **)this + 6));
  }
  os_release(*((void **)this + 32));
  v8 = (geo::read_write_lock *)pthread_rwlock_unlock(v2);
  if ((_DWORD)v8)
    geo::read_write_lock::logFailure(v8, (uint64_t)"unlock", v9);
  v10 = (geo::read_write_lock *)pthread_rwlock_destroy(v2);
  if ((_DWORD)v10)
    geo::read_write_lock::logFailure(v10, (uint64_t)"destruction", v11);
}

{
  geo::MallocZoneAllocator::~MallocZoneAllocator(this);
  JUMPOUT(0x1A1AF4E00);
}

{
  pthread_rwlock_t *v2;
  NSObject *v4;
  unint64_t v5;
  int v6;
  unint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)this = &off_1E42B56C0;
  v2 = (pthread_rwlock_t *)((char *)this + 56);
  geo::read_write_lock::write_lock((pthread_rwlock_t *)((char *)this + 56));
  if (atomic_load((unint64_t *)this + 5))
  {
    v4 = *((_QWORD *)this + 32);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
    {
      v5 = atomic_load((unint64_t *)this + 5);
      v6 = 134217984;
      v7 = v5;
      _os_log_impl(&dword_19F029000, v4, OS_LOG_TYPE_INFO, "Destroying zone allocator with %lu allocations still alive", (uint8_t *)&v6, 0xCu);
    }
  }
  else
  {
    malloc_destroy_zone(*((malloc_zone_t **)this + 6));
  }
  os_release(*((void **)this + 32));
  geo::read_write_lock::unlock(v2);
  geo::read_write_lock::~read_write_lock(v2);
}

void *geo::MallocZoneAllocator::reallocate(malloc_zone_t **this, void *a2, size_t a3)
{
  pthread_rwlock_t *v6;
  geo::read_write_lock *v7;
  const char *v8;
  unint64_t *v9;
  unint64_t v10;
  void *v11;
  unint64_t *v12;
  unint64_t v13;
  geo::read_write_lock *v14;
  const char *v15;

  v6 = (pthread_rwlock_t *)(this + 7);
  v7 = (geo::read_write_lock *)pthread_rwlock_rdlock((pthread_rwlock_t *)(this + 7));
  if ((_DWORD)v7)
    geo::read_write_lock::logFailure(v7, (uint64_t)"read lock", v8);
  if (a2)
  {
    v9 = (unint64_t *)(this + 5);
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
  }
  v11 = malloc_type_zone_realloc(this[6], a2, a3, 0x975057C8uLL);
  v12 = (unint64_t *)(this + 5);
  do
    v13 = __ldaxr(v12);
  while (__stlxr(v13 + 1, v12));
  v14 = (geo::read_write_lock *)pthread_rwlock_unlock(v6);
  if ((_DWORD)v14)
    geo::read_write_lock::logFailure(v14, (uint64_t)"unlock", v15);
  return v11;
}

{
  pthread_rwlock_t *v6;
  unint64_t *v7;
  unint64_t v8;
  void *v9;
  unint64_t *v10;
  unint64_t v11;

  v6 = (pthread_rwlock_t *)(this + 7);
  geo::read_write_lock::read_lock((pthread_rwlock_t *)(this + 7));
  if (a2)
  {
    v7 = (unint64_t *)(this + 5);
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
  }
  v9 = malloc_type_zone_realloc(this[6], a2, a3, 0x975057C8uLL);
  v10 = (unint64_t *)(this + 5);
  do
    v11 = __ldaxr(v10);
  while (__stlxr(v11 + 1, v10));
  geo::read_write_lock::unlock(v6);
  return v9;
}

void geo::MallocZoneAllocator::reset(geo::MallocZoneAllocator *this)
{
  pthread_rwlock_t *v2;
  geo::read_write_lock *v3;
  const char *v4;
  geo::read_write_lock *v6;
  const char *v7;
  geo::read_write_lock *v8;
  const char *v9;
  NSObject *v10;
  unint64_t v11;
  unint64_t v12;
  NSObject *v13;
  geo::read_write_lock *v14;
  const char *v15;
  malloc_zone_t *zone;
  geo::read_write_lock *v17;
  const char *v18;
  unint64_t v19;
  int v20;
  unint64_t v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v2 = (pthread_rwlock_t *)((char *)this + 56);
  v3 = (geo::read_write_lock *)pthread_rwlock_wrlock((pthread_rwlock_t *)((char *)this + 56));
  if ((_DWORD)v3)
    geo::read_write_lock::logFailure(v3, (uint64_t)"write lock", v4);
  if (atomic_load((unint64_t *)this + 5))
  {
    v6 = (geo::read_write_lock *)pthread_rwlock_unlock(v2);
    if ((_DWORD)v6)
      geo::read_write_lock::logFailure(v6, (uint64_t)"unlock", v7);
    v8 = (geo::read_write_lock *)pthread_rwlock_rdlock(v2);
    if ((_DWORD)v8)
      geo::read_write_lock::logFailure(v8, (uint64_t)"read lock", v9);
    v10 = *((_QWORD *)this + 32);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
    {
      v11 = *((_QWORD *)this + 3);
      v20 = 136315138;
      v21 = v11;
      _os_log_impl(&dword_19F029000, v10, OS_LOG_TYPE_INFO, "BasicAllocationTracker(%s)", (uint8_t *)&v20, 0xCu);
    }
    if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
    {
      v12 = atomic_load((unint64_t *)this + 5);
      v20 = 134217984;
      v21 = v12;
      _os_log_impl(&dword_19F029000, v10, OS_LOG_TYPE_INFO, "\tCount: %zu", (uint8_t *)&v20, 0xCu);
    }
    v13 = *((_QWORD *)this + 32);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      v19 = atomic_load((unint64_t *)this + 5);
      v20 = 134217984;
      v21 = v19;
      _os_log_error_impl(&dword_19F029000, v13, OS_LOG_TYPE_ERROR, "Resetting zone allocator with %lu allocations still alive", (uint8_t *)&v20, 0xCu);
    }
    v14 = (geo::read_write_lock *)pthread_rwlock_unlock(v2);
    if ((_DWORD)v14)
      geo::read_write_lock::logFailure(v14, (uint64_t)"unlock", v15);
  }
  else
  {
    malloc_destroy_zone(*((malloc_zone_t **)this + 6));
    zone = malloc_create_zone(0, 0);
    *((_QWORD *)this + 6) = zone;
    malloc_set_zone_name(zone, *((const char **)this + 1));
    atomic_store(0, (unint64_t *)this + 5);
    v17 = (geo::read_write_lock *)pthread_rwlock_unlock(v2);
    if ((_DWORD)v17)
      geo::read_write_lock::logFailure(v17, (uint64_t)"unlock", v18);
  }
}

{
  pthread_rwlock_t *v2;
  NSObject *v4;
  malloc_zone_t *zone;
  unint64_t v6;
  int v7;
  unint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v2 = (pthread_rwlock_t *)((char *)this + 56);
  geo::read_write_lock::write_lock((pthread_rwlock_t *)((char *)this + 56));
  if (atomic_load((unint64_t *)this + 5))
  {
    geo::read_write_lock::unlock(v2);
    geo::read_write_lock::read_lock(v2);
    geo::BasicAllocationTracker::debugInfo((geo::MallocZoneAllocator *)((char *)this + 24), *((os_log_t *)this + 32));
    v4 = *((_QWORD *)this + 32);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      v6 = atomic_load((unint64_t *)this + 5);
      v7 = 134217984;
      v8 = v6;
      _os_log_error_impl(&dword_19F029000, v4, OS_LOG_TYPE_ERROR, "Resetting zone allocator with %lu allocations still alive", (uint8_t *)&v7, 0xCu);
    }
    geo::read_write_lock::unlock(v2);
  }
  else
  {
    malloc_destroy_zone(*((malloc_zone_t **)this + 6));
    zone = malloc_create_zone(0, 0);
    *((_QWORD *)this + 6) = zone;
    malloc_set_zone_name(zone, *((const char **)this + 1));
    atomic_store(0, (unint64_t *)this + 5);
    geo::read_write_lock::unlock(v2);
  }
}

unint64_t geo::MallocZoneAllocator::allocationCount(geo::MallocZoneAllocator *this)
{
  pthread_rwlock_t *v2;
  geo::read_write_lock *v3;
  const char *v4;
  unint64_t v5;
  geo::read_write_lock *v6;
  const char *v7;

  v2 = (pthread_rwlock_t *)((char *)this + 56);
  v3 = (geo::read_write_lock *)pthread_rwlock_rdlock((pthread_rwlock_t *)((char *)this + 56));
  if ((_DWORD)v3)
    geo::read_write_lock::logFailure(v3, (uint64_t)"read lock", v4);
  v5 = atomic_load((unint64_t *)this + 5);
  v6 = (geo::read_write_lock *)pthread_rwlock_unlock(v2);
  if ((_DWORD)v6)
    geo::read_write_lock::logFailure(v6, (uint64_t)"unlock", v7);
  return v5;
}

{
  pthread_rwlock_t *v2;
  unint64_t v3;

  v2 = (pthread_rwlock_t *)((char *)this + 56);
  geo::read_write_lock::read_lock((pthread_rwlock_t *)((char *)this + 56));
  v3 = atomic_load((unint64_t *)this + 5);
  geo::read_write_lock::unlock(v2);
  return v3;
}

size_t geo::MallocZoneAllocator::allocationSize(malloc_zone_t **this)
{
  malloc_statistics_t v2;

  malloc_zone_statistics(this[6], &v2);
  return v2.size_allocated;
}

{
  malloc_statistics_t v2;

  malloc_zone_statistics(this[6], &v2);
  return v2.size_allocated;
}

void std::__shared_ptr_emplace<ggl::SolidRibbon::PipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DEA78;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::SolidRibbon::PipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DEA78;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_emplace<ggl::TransitLineRibbon::PatternedBasePipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E3548;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::TransitLineRibbon::PatternedBasePipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E3548;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_emplace<ggl::TransitLineRibbon::BasePipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E3510;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::TransitLineRibbon::BasePipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E3510;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

md::TransitLineSharedResources *md::TransitLineSharedResources::TransitLineSharedResources(md::TransitLineSharedResources *this, const ggl::StandardLibrary *a2, const RenderTargetFormat *a3)
{
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  char *v11;
  unsigned __int8 v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  int8x16_t v18;
  int16x8_t v19;
  int32x4_t v20;
  int8x16_t v21;
  int8x16_t v22;
  int16x8_t v23;
  int32x4_t v24;
  int8x16_t v25;
  int32x4_t v26;
  int8x16_t v27;
  int32x4_t v28;
  int8x16_t v29;
  int8x16_t v30;
  int8x16_t v31;
  int8x16_t v32;
  int8x16_t v33;
  int8x16_t v34;
  int8x16_t v35;
  int8x16_t v36;
  int8x16_t v37;
  int16x8_t v38;
  int32x4_t v39;
  int8x16_t v40;
  int16x8_t v41;
  int32x4_t v42;
  int8x16_t v43;
  int32x4_t v44;
  int8x16_t v45;
  int32x4_t v46;
  int8x16_t v47;
  int8x16_t v48;
  int8x16_t v49;
  int8x16_t v50;
  int8x16_t v51;
  int8x16_t v52;
  int8x16_t v53;
  int8x16_t v54;
  int8x16_t v55;
  int8x16_t v56;
  int8x16_t v57;
  int8x16_t v58;
  int8x16_t v59;
  int8x16_t v60;
  int16x8_t v61;
  int32x4_t v62;
  int8x16_t v63;
  int8x16_t v64;
  int16x8_t v65;
  int32x4_t v66;
  int8x16_t v67;
  int16x8_t v68;
  int32x4_t v69;
  int8x16_t v70;
  int16x8_t v71;
  int32x4_t v72;
  int8x16_t v73;
  int32x4_t v74;
  int8x16_t v75;
  int32x4_t v76;
  int8x16_t v77;
  int32x4_t v78;
  int8x16_t v79;
  int32x4_t v80;
  int8x16_t v81;
  int8x16_t v82;
  int8x16_t v83;
  int8x16_t v84;
  int8x16_t v85;
  int8x16_t v86;
  int8x16_t v87;
  int8x16_t v88;
  std::__shared_weak_count *v89;
  unint64_t *v90;
  unint64_t v91;
  unint64_t *v92;
  unint64_t v93;
  uint64_t v94;
  uint64_t v95;
  std::__shared_weak_count *v96;
  unint64_t *v97;
  unint64_t v98;
  char *v99;
  unsigned __int8 v100;
  unint64_t *v101;
  unint64_t v102;
  unint64_t v103;
  unint64_t *v104;
  unint64_t v105;
  int8x16_t v106;
  int16x8_t v107;
  int32x4_t v108;
  int8x16_t v109;
  int8x16_t v110;
  int16x8_t v111;
  int32x4_t v112;
  int8x16_t v113;
  int32x4_t v114;
  int8x16_t v115;
  int32x4_t v116;
  int8x16_t v117;
  int8x16_t v118;
  int8x16_t v119;
  int8x16_t v120;
  int8x16_t v121;
  int8x16_t v122;
  int8x16_t v123;
  int8x16_t v124;
  int8x16_t v125;
  int16x8_t v126;
  int32x4_t v127;
  int8x16_t v128;
  int16x8_t v129;
  int32x4_t v130;
  int8x16_t v131;
  int32x4_t v132;
  int8x16_t v133;
  int32x4_t v134;
  int8x16_t v135;
  int8x16_t v136;
  int8x16_t v137;
  int8x16_t v138;
  int8x16_t v139;
  int8x16_t v140;
  int8x16_t v141;
  int8x16_t v142;
  int8x16_t v143;
  int8x16_t v144;
  int8x16_t v145;
  int8x16_t v146;
  int8x16_t v147;
  int8x16_t v148;
  int16x8_t v149;
  int32x4_t v150;
  int16x8_t v151;
  int32x4_t v152;
  int32x4_t v153;
  int32x4_t v154;
  int8x16_t v155;
  int8x16_t v156;
  int8x16_t v157;
  int16x8_t v158;
  int32x4_t v159;
  int16x8_t v160;
  int32x4_t v161;
  int8x16_t v162;
  int8x16_t v163;
  int8x16_t v164;
  int32x4_t v165;
  int8x16_t v166;
  int8x16_t v167;
  int8x16_t v168;
  int32x4_t v169;
  int8x16_t v170;
  int8x16_t v171;
  int8x16_t v172;
  int8x16_t v173;
  int8x16_t v174;
  int8x16_t v175;
  int8x16_t v176;
  int8x16_t v177;
  std::__shared_weak_count *v178;
  unint64_t *v179;
  unint64_t v180;
  unint64_t *v181;
  unint64_t v182;
  uint64_t v183;
  uint64_t v184;
  std::__shared_weak_count *v185;
  unint64_t *v186;
  unint64_t v187;
  char *v188;
  unsigned __int8 v189;
  unint64_t *v190;
  unint64_t v191;
  unint64_t v192;
  unint64_t *v193;
  unint64_t v194;
  int8x16_t v195;
  int16x8_t v196;
  int32x4_t v197;
  int8x16_t v198;
  int8x16_t v199;
  int16x8_t v200;
  int32x4_t v201;
  int8x16_t v202;
  int32x4_t v203;
  int8x16_t v204;
  int32x4_t v205;
  int8x16_t v206;
  int8x16_t v207;
  int8x16_t v208;
  int8x16_t v209;
  int8x16_t v210;
  int8x16_t v211;
  int16x8_t v212;
  int32x4_t v213;
  int8x16_t v214;
  int16x8_t v215;
  int32x4_t v216;
  int8x16_t v217;
  int32x4_t v218;
  int8x16_t v219;
  int32x4_t v220;
  int8x16_t v221;
  int8x16_t v222;
  int8x16_t v223;
  int8x16_t v224;
  int8x16_t v225;
  int8x16_t v226;
  int8x16_t v227;
  int8x16_t v228;
  int8x16_t v229;
  int8x16_t v230;
  int8x16_t v231;
  int8x16_t v232;
  int8x16_t v233;
  int16x8_t v234;
  int32x4_t v235;
  int16x8_t v236;
  int32x4_t v237;
  int32x4_t v238;
  int32x4_t v239;
  int8x16_t v240;
  int8x16_t v241;
  int8x16_t v242;
  int8x16_t v243;
  int8x16_t v244;
  int8x16_t v245;
  int8x16_t v246;
  int8x16_t v247;
  int8x16_t v248;
  int16x8_t v249;
  int32x4_t v250;
  int16x8_t v251;
  int32x4_t v252;
  int32x4_t v253;
  int32x4_t v254;
  int8x16_t v255;
  int8x16_t v256;
  int8x16_t v257;
  int8x16_t v258;
  int8x16_t v259;
  int8x16_t v260;
  int8x16_t v261;
  std::__shared_weak_count *v262;
  unint64_t *v263;
  unint64_t v264;
  unint64_t *v265;
  unint64_t v266;
  ggl::TransitLineRibbonShader *v268;
  unsigned __int8 v269;
  unsigned __int8 v270;
  unsigned __int8 v271;
  unsigned __int8 v272;
  unsigned __int8 v273;
  unsigned __int8 v274;
  unsigned __int8 v275;
  ggl::SolidRibbonShader *v276;
  unsigned __int8 v277;
  unsigned __int8 v278;
  unsigned __int8 v279;
  unsigned __int8 v280;
  unsigned __int8 v281;
  unsigned __int8 v282;
  unsigned __int8 v283;
  unsigned __int8 v284;
  unsigned __int8 v285;
  unsigned __int8 v286;
  unsigned __int8 v287;
  unsigned __int8 v288;
  unsigned __int8 v289;
  unsigned __int8 v290;
  __int16 v291;
  char v292;
  __int128 v293;
  __int128 v294;
  __int128 v295;
  __int128 v296;
  __int128 v297;
  __int128 v298;

  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *(_OWORD *)this = 0u;
  v6 = *((_QWORD *)a2 + 10);
  v7 = *(_QWORD *)(v6 + 3056);
  v8 = *(std::__shared_weak_count **)(v6 + 3064);
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  v11 = (char *)operator new(0x198uLL);
  *((_QWORD *)v11 + 1) = 0;
  *((_QWORD *)v11 + 2) = 0;
  *(_QWORD *)v11 = &off_1E42E3510;
  v293 = *(_OWORD *)a3->colorFormats;
  v296 = *(_OWORD *)&a3->colorFormatsCount;
  if ((v12 & 1) == 0)
  {
    if ((_DWORD)v268)
    {
      if ((v269 & 1) == 0)
      {
        if ((_DWORD)v268)
        {
          if ((v280 & 1) == 0
          {
            if ((v288 & 1) == 0
            {
              ggl::MeshTyped<ggl::TransitLineRibbon::DefaultVbo>::attributesReflection(void)::r = (uint64_t)&ggl::TransitLineRibbon::defaultVboReflection;
            }
            ggl::MeshTyped<ggl::TransitLineRibbon::DefaultVbo>::typedReflection(void)::r = (uint64_t)&ggl::MeshTyped<ggl::TransitLineRibbon::DefaultVbo>::attributesReflection(void)::r;
            *(_QWORD *)algn_1ECE43C90 = 1;
          }
          ggl::TransitLineRibbon::BasePipelineSetup::typedReflection(void)::ref = (uint64_t)&ggl::MeshTyped<ggl::TransitLineRibbon::DefaultVbo>::typedReflection(void)::r;
          unk_1EE57E0F0 = &ggl::TransitLineRibbon::pipelineDataBasePipelineDeviceStructs(void)::ref;
          qword_1EE57E0F8 = 0;
          if ((v281 & 1) == 0
          {
            ggl::TransitLineRibbon::pipelineDataBasePipelineConstantStructs(void)::ref = (uint64_t)ggl::Tile::View::reflection(void)::reflection;
            *(_QWORD *)algn_1EE57E158 = ggl::Tile::Transform::reflection(void)::reflection;
            qword_1EE57E160 = (uint64_t)ggl::TransitLineRibbon::Style::reflection(void)::reflection;
            unk_1EE57E168 = ggl::TransitLineRibbon::Options::reflection(void)::reflection;
            qword_1EE57E170 = (uint64_t)ggl::TransitLineRibbon::ClipParams::reflection(void)::reflection;
          }
          qword_1EE57E100 = (uint64_t)&ggl::TransitLineRibbon::pipelineDataBasePipelineConstantStructs(void)::ref;
          unk_1EE57E108 = xmmword_19FFB3020;
        }
      }
      ggl::TransitLineRibbon::BasePipelineState::typedReflection(void)::ref = (uint64_t)&ggl::TransitLineRibbon::BasePipelineSetup::typedReflection(void)::ref;
      ggl::TransitLineRibbonShader::typedReflection(v268);
      qword_1ECE31628 = (uint64_t)&ggl::TransitLineRibbonShader::typedReflection(void)::ref;
      if ((v270 & 1) == 0
      {
        ggl::TransitLineRibbon::pipelineStateBasePipelineAttributeStructBinding(void)::attr = 0;
        *(_QWORD *)algn_1EE57E278 = 0;
        qword_1EE57E280 = (uint64_t)"";
        dword_1EE57E288 = 0;
        qword_1EE57E290 = (uint64_t)&ggl::TransitLineRibbon::pipelineStateBasePipelineAttributeBinding_0(void)::attr;
        unk_1EE57E298 = 7;
      }
      qword_1ECE31630 = (uint64_t)&ggl::TransitLineRibbon::pipelineStateBasePipelineAttributeStructBinding(void)::attr;
      *(_QWORD *)algn_1ECE31638 = 1;
      qword_1ECE31640 = 0;
      unk_1ECE31648 = 2;
      qword_1ECE31650 = (uint64_t)&ggl::TransitLineRibbon::pipelineStateBasePipelineDeviceStructBinding(void)::ref;
      unk_1ECE31658 = 0;
      if ((v271 & 1) == 0
      {
        ggl::TransitLineRibbon::pipelineStateBasePipelineConstantStructBinding(void)::ref = 0;
        *(_QWORD *)algn_1EE57E188 = 0;
        qword_1EE57E190 = (uint64_t)"view";
        dword_1EE57E198 = 3;
        qword_1EE57E1A0 = (uint64_t)&ggl::TransitLineRibbon::pipelineStateBasePipelineConstantViewBinding(void)::reflection;
        unk_1EE57E1A8 = xmmword_19FFB35A0;
        qword_1EE57E1B8 = 1;
        unk_1EE57E1C0 = "transform";
        dword_1EE57E1C8 = 3;
        qword_1EE57E1D0 = (uint64_t)&ggl::TransitLineRibbon::pipelineStateBasePipelineConstantTransformBinding(void)::reflection;
        unk_1EE57E1D8 = xmmword_19FFB3660;
        qword_1EE57E1E8 = 2;
        unk_1EE57E1F0 = "style";
        dword_1EE57E1F8 = 3;
        qword_1EE57E200 = (uint64_t)&ggl::TransitLineRibbon::pipelineStateBasePipelineConstantStyleBinding(void)::reflection;
        unk_1EE57E208 = xmmword_19FFB3730;
        qword_1EE57E218 = 3;
        unk_1EE57E220 = "options";
        dword_1EE57E228 = 3;
        qword_1EE57E230 = (uint64_t)&ggl::TransitLineRibbon::pipelineStateBasePipelineConstantOptionsBinding(void)::reflection;
        unk_1EE57E238 = xmmword_19FFB3050;
        qword_1EE57E248 = 4;
        unk_1EE57E250 = "clipParams";
        dword_1EE57E258 = 3;
        qword_1EE57E260 = (uint64_t)&ggl::TransitLineRibbon::pipelineStateBasePipelineConstantClipParamsBinding(void)::reflection;
        unk_1EE57E268 = 2;
      }
      qword_1ECE31660 = (uint64_t)&ggl::TransitLineRibbon::pipelineStateBasePipelineConstantStructBinding(void)::ref;
      *(_QWORD *)algn_1ECE31668 = 5;
    }
  }
  if (v8)
  {
    v13 = (unint64_t *)&v8->__shared_owners_;
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
    *((_DWORD *)v11 + 14) = 0;
    *((_QWORD *)v11 + 5) = 0;
    *((_QWORD *)v11 + 6) = 0;
    *((_QWORD *)v11 + 3) = &off_1E42B6760;
    *((_QWORD *)v11 + 4) = 0;
    *((_QWORD *)v11 + 8) = &ggl::TransitLineRibbon::BasePipelineState::typedReflection(void)::ref;
    *((_QWORD *)v11 + 9) = v7;
    *((_QWORD *)v11 + 10) = v8;
    do
      v15 = __ldxr(v13);
    while (__stxr(v15 + 1, v13));
  }
  else
  {
    *((_DWORD *)v11 + 14) = 0;
    *((_QWORD *)v11 + 5) = 0;
    *((_QWORD *)v11 + 6) = 0;
    *((_QWORD *)v11 + 3) = &off_1E42B6760;
    *((_QWORD *)v11 + 4) = 0;
    *((_QWORD *)v11 + 8) = &ggl::TransitLineRibbon::BasePipelineState::typedReflection(void)::ref;
    *((_QWORD *)v11 + 9) = v7;
    *((_QWORD *)v11 + 10) = 0;
  }
  v11[136] = 0;
  *(_OWORD *)(v11 + 140) = xmmword_19FFB3060;
  *(_QWORD *)(v11 + 156) = 0;
  *(_QWORD *)(v11 + 172) = 0;
  *(_QWORD *)(v11 + 164) = 0;
  v11[184] = 0;
  *(_OWORD *)(v11 + 188) = xmmword_19FFB3060;
  *(_QWORD *)(v11 + 204) = 0;
  *(_QWORD *)(v11 + 220) = 0;
  *(_QWORD *)(v11 + 212) = 0;
  v11[232] = 0;
  *(_OWORD *)(v11 + 236) = xmmword_19FFB3060;
  *(_QWORD *)(v11 + 252) = 0;
  *(_QWORD *)(v11 + 268) = 0;
  *(_QWORD *)(v11 + 260) = 0;
  *(_OWORD *)(v11 + 280) = v293;
  *(_OWORD *)(v11 + 296) = v296;
  v11[312] = 0;
  *((_QWORD *)v11 + 48) = 0;
  *((_OWORD *)v11 + 22) = 0u;
  *((_OWORD *)v11 + 23) = 0u;
  *((_OWORD *)v11 + 20) = 0u;
  *((_OWORD *)v11 + 21) = 0u;
  *((_QWORD *)v11 + 49) = 0x100000001;
  v11[400] = 0;
  v11[88] = 1;
  *(_WORD *)(v11 + 89) = v291;
  v11[91] = v292;
  *(_OWORD *)(v11 + 92) = xmmword_19FFB35B0;
  *((_DWORD *)v11 + 27) = 7;
  *((_QWORD *)v11 + 14) = 0;
  *((_QWORD *)v11 + 15) = 0;
  *((_DWORD *)v11 + 32) = 0;
  v11[132] = 15;
  if (v8)
  {
    v16 = (unint64_t *)&v8->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  *((_DWORD *)v11 + 84) = 0;
  *(_QWORD *)(v11 + 329) = 0;
  v18 = vceqzq_s8(*(int8x16_t *)(v11 + 328));
  v19 = vmovl_high_s8(v18);
  v20 = vmovl_s16(*(int16x4_t *)v19.i8);
  v21.i64[0] = v20.u32[0];
  v21.i64[1] = v20.u32[1];
  v22 = v21;
  v23 = vmovl_s8(*(int8x8_t *)v18.i8);
  v24 = vmovl_s16(*(int16x4_t *)v23.i8);
  v21.i64[0] = v24.u32[0];
  v21.i64[1] = v24.u32[1];
  v25 = v21;
  v26 = vmovl_high_s16(v19);
  v21.i64[0] = v26.u32[0];
  v21.i64[1] = v26.u32[1];
  v27 = v21;
  v28 = vmovl_high_s16(v23);
  v21.i64[0] = v28.u32[0];
  v21.i64[1] = v28.u32[1];
  v29 = v21;
  v21.i64[0] = v20.u32[2];
  v21.i64[1] = v20.u32[3];
  v30 = v21;
  v21.i64[0] = v24.u32[2];
  v21.i64[1] = v24.u32[3];
  v31 = v21;
  v21.i64[0] = v26.u32[2];
  v21.i64[1] = v26.u32[3];
  v32 = v21;
  v21.i64[0] = v28.u32[2];
  v21.i64[1] = v28.u32[3];
  v33 = vbicq_s8((int8x16_t)xmmword_19FFB3070, v21);
  v34 = vbicq_s8((int8x16_t)xmmword_19FFB3080, v32);
  v35 = vbicq_s8((int8x16_t)xmmword_19FFB3090, v31);
  v36 = vbicq_s8((int8x16_t)xmmword_19FFB30C0, v27);
  v37 = vceqzq_s8(*(int8x16_t *)(v11 + 344));
  v38 = vmovl_high_s8(v37);
  v39 = vmovl_s16(*(int16x4_t *)v38.i8);
  v21.i64[0] = v39.u32[0];
  v21.i64[1] = v39.u32[1];
  v40 = v21;
  v41 = vmovl_s8(*(int8x8_t *)v37.i8);
  v42 = vmovl_s16(*(int16x4_t *)v41.i8);
  v21.i64[0] = v42.u32[0];
  v21.i64[1] = v42.u32[1];
  v43 = v21;
  v44 = vmovl_high_s16(v38);
  v21.i64[0] = v44.u32[0];
  v21.i64[1] = v44.u32[1];
  v45 = v21;
  v46 = vmovl_high_s16(v41);
  v21.i64[0] = v46.u32[0];
  v21.i64[1] = v46.u32[1];
  v47 = v21;
  v21.i64[0] = v39.u32[2];
  v21.i64[1] = v39.u32[3];
  v48 = v21;
  v21.i64[0] = v42.u32[2];
  v21.i64[1] = v42.u32[3];
  v49 = v21;
  v21.i64[0] = v44.u32[2];
  v21.i64[1] = v44.u32[3];
  v50 = v21;
  v21.i64[0] = v46.u32[2];
  v21.i64[1] = v46.u32[3];
  v51 = vbicq_s8((int8x16_t)xmmword_19FFB30F0, v50);
  v52 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3150, v40), vbicq_s8((int8x16_t)xmmword_19FFB30D0, v22));
  v53 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3140, v43), vbicq_s8((int8x16_t)xmmword_19FFB2DB0, v25));
  v54 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3130, v45), v36);
  v55 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3120, v47), vbicq_s8((int8x16_t)xmmword_19FFB30B0, v29));
  v56 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3110, v48), vbicq_s8((int8x16_t)xmmword_19FFB30A0, v30));
  v57 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3100, v49), v35);
  v58 = vorrq_s8(v51, v34);
  v59 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB30E0, v21), v33);
  v60 = vceqzq_s8(*(int8x16_t *)(v11 + 360));
  v61 = vmovl_high_s8(v60);
  v62 = vmovl_s16(*(int16x4_t *)v61.i8);
  v21.i64[0] = v62.i32[0];
  v21.i64[1] = v62.i32[1];
  v63 = vbicq_s8((int8x16_t)xmmword_19FFB3160, v21);
  v64 = vceqzq_s8(*(int8x16_t *)(v11 + 376));
  v65 = vmovl_high_s8(v64);
  v66 = vmovl_s16(*(int16x4_t *)v65.i8);
  v21.i64[0] = v66.i32[0];
  v21.i64[1] = v66.i32[1];
  v67 = vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3250, v21), v63), v52);
  v68 = vmovl_s8(*(int8x8_t *)v60.i8);
  v69 = vmovl_s16(*(int16x4_t *)v68.i8);
  v21.i64[0] = v69.i32[0];
  v21.i64[1] = v69.i32[1];
  v70 = vbicq_s8((int8x16_t)xmmword_19FFB3170, v21);
  v71 = vmovl_s8(*(int8x8_t *)v64.i8);
  v72 = vmovl_s16(*(int16x4_t *)v71.i8);
  v21.i64[0] = v72.i32[0];
  v21.i64[1] = v72.i32[1];
  v73 = vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3240, v21), v70), v53);
  v74 = vmovl_high_s16(v61);
  v21.i64[0] = v74.i32[0];
  v21.i64[1] = v74.i32[1];
  v75 = vbicq_s8((int8x16_t)xmmword_19FFB3180, v21);
  v76 = vmovl_high_s16(v65);
  v21.i64[0] = v76.i32[0];
  v21.i64[1] = v76.i32[1];
  v77 = vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3230, v21), v75), v54);
  v78 = vmovl_high_s16(v68);
  v21.i64[0] = v78.i32[0];
  v21.i64[1] = v78.i32[1];
  v79 = vbicq_s8((int8x16_t)xmmword_19FFB3190, v21);
  v80 = vmovl_high_s16(v71);
  v21.i64[0] = v80.i32[0];
  v21.i64[1] = v80.i32[1];
  v81 = vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3220, v21), v79), v55);
  v21.i64[0] = v62.i32[2];
  v21.i64[1] = v62.i32[3];
  v82 = vbicq_s8((int8x16_t)xmmword_19FFB31A0, v21);
  v21.i64[0] = v66.i32[2];
  v21.i64[1] = v66.i32[3];
  v83 = vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3210, v21), v82), v56);
  v21.i64[0] = v69.i32[2];
  v21.i64[1] = v69.i32[3];
  v84 = vbicq_s8((int8x16_t)xmmword_19FFB31B0, v21);
  v21.i64[0] = v72.i32[2];
  v21.i64[1] = v72.i32[3];
  v85 = vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3200, v21), v84), v57);
  v21.i64[0] = v74.i32[2];
  v21.i64[1] = v74.i32[3];
  v86 = vbicq_s8((int8x16_t)xmmword_19FFB31C0, v21);
  v21.i64[0] = v76.i32[2];
  v21.i64[1] = v76.i32[3];
  v87 = vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB31F0, v21), v86), v58);
  v21.i64[0] = v78.i32[2];
  v21.i64[1] = v78.i32[3];
  v88 = vbicq_s8((int8x16_t)xmmword_19FFB31D0, v21);
  v21.i64[0] = v80.i32[2];
  v21.i64[1] = v80.i32[3];
  *((_QWORD *)v11 + 40) = vaddvq_s64(vaddq_s64((int64x2_t)vorrq_s8(vorrq_s8(v73, v67), vorrq_s8(v81, v77)), (int64x2_t)vorrq_s8(vorrq_s8(v85, v83), vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB31E0, v21), v88), v59), v87))));
  *((_QWORD *)v11 + 3) = &off_1E42BA580;
  v11[312] = 1;
  v89 = (std::__shared_weak_count *)*((_QWORD *)this + 1);
  *(_QWORD *)this = v11 + 24;
  *((_QWORD *)this + 1) = v11;
  if (v89)
  {
    v90 = (unint64_t *)&v89->__shared_owners_;
    do
      v91 = __ldaxr(v90);
    while (__stlxr(v91 - 1, v90));
    if (!v91)
    {
      ((void (*)(std::__shared_weak_count *))v89->__on_zero_shared)(v89);
      std::__shared_weak_count::__release_weak(v89);
    }
  }
  if (v8)
  {
    v92 = (unint64_t *)&v8->__shared_owners_;
    do
      v93 = __ldaxr(v92);
    while (__stlxr(v93 - 1, v92));
    if (!v93)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  v94 = *((_QWORD *)a2 + 10);
  v95 = *(_QWORD *)(v94 + 3080);
  v96 = *(std::__shared_weak_count **)(v94 + 3088);
  if (v96)
  {
    v97 = (unint64_t *)&v96->__shared_owners_;
    do
      v98 = __ldxr(v97);
    while (__stxr(v98 + 1, v97));
  }
  v99 = (char *)operator new(0x198uLL);
  *((_QWORD *)v99 + 1) = 0;
  *((_QWORD *)v99 + 2) = 0;
  *(_QWORD *)v99 = &off_1E42E3548;
  v294 = *(_OWORD *)a3->colorFormats;
  v297 = *(_OWORD *)&a3->colorFormatsCount;
  if ((v100 & 1) == 0
  {
    if ((v272 & 1) == 0
    {
      if ((v282 & 1) == 0
      {
        if ((v289 & 1) == 0
        {
          ggl::MeshTyped<ggl::TransitLineRibbon::DefaultVbo>::attributesReflection(void)::r = (uint64_t)&ggl::TransitLineRibbon::defaultVboReflection;
        }
        ggl::MeshTyped<ggl::TransitLineRibbon::DefaultVbo>::typedReflection(void)::r = (uint64_t)&ggl::MeshTyped<ggl::TransitLineRibbon::DefaultVbo>::attributesReflection(void)::r;
        *(_QWORD *)algn_1ECE43C90 = 1;
      }
      ggl::TransitLineRibbon::PatternedBasePipelineSetup::typedReflection(void)::ref = (uint64_t)&ggl::MeshTyped<ggl::TransitLineRibbon::DefaultVbo>::typedReflection(void)::r;
      unk_1EE57E120 = &ggl::TransitLineRibbon::pipelineDataPatternedBasePipelineDeviceStructs(void)::ref;
      qword_1EE57E128 = 0;
      if ((v283 & 1) == 0
      {
        ggl::TransitLineRibbon::pipelineDataPatternedBasePipelineConstantStructs(void)::ref = (uint64_t)ggl::Tile::View::reflection(void)::reflection;
        *(_QWORD *)algn_1EE57E2A8 = ggl::Tile::Transform::reflection(void)::reflection;
        qword_1EE57E2B0 = (uint64_t)ggl::TransitLineRibbon::Style::reflection(void)::reflection;
        unk_1EE57E2B8 = ggl::TransitLineRibbon::Options::reflection(void)::reflection;
        qword_1EE57E2C0 = (uint64_t)ggl::TransitLineRibbon::PatternStyle::reflection(void)::reflection;
        unk_1EE57E2C8 = ggl::TransitLineRibbon::ClipParams::reflection(void)::reflection;
      }
      qword_1EE57E130 = (uint64_t)&ggl::TransitLineRibbon::pipelineDataPatternedBasePipelineConstantStructs(void)::ref;
      unk_1EE57E138 = xmmword_19FFB4850;
    }
    ggl::TransitLineRibbon::PatternedBasePipelineState::typedReflection(void)::ref = (uint64_t)&ggl::TransitLineRibbon::PatternedBasePipelineSetup::typedReflection(void)::ref;
    if ((v273 & 1) == 0
    {
      ggl::PatternedTransitLineRibbonShader::typedReflection(void)::ref = (uint64_t)"PatternedTransitLineRibbonShader";
      if ((v284 & 1) == 0
      {
        qword_1ECE42DB8 = (uint64_t)"PatternedTransitLineRibbonShader";
        unk_1ECE42DC0 = ggl::patternedTransitLineRibbonShaderVertShaderFunctionAttributes(void)::ref;
        qword_1ECE42DC8 = 1;
        unk_1ECE42DD0 = &ggl::patternedTransitLineRibbonShaderVertShaderFunctionConstantMapping(void)::ref;
        qword_1ECE42DD8 = 6;
        unk_1ECE42DE0 = &ggl::patternedTransitLineRibbonShaderVertShaderFunctionBufferMapping(void)::ref;
        qword_1ECE42DE8 = 0;
        unk_1ECE42DF0 = &ggl::patternedTransitLineRibbonShaderVertShaderFunctionTextureMapping(void)::ref;
        ggl::patternedTransitLineRibbonShaderVertexFunctionDescriptor(void)::ref = 1746350796;
        qword_1ECE42DF8 = 1;
        unk_1ECE42E00 = &ggl::patternedTransitLineRibbonShaderVertShaderFunctionSamplerMapping(void)::ref;
        qword_1ECE42E10 = 0;
        unk_1ECE42E18 = 0;
        qword_1ECE42E08 = 1;
      }
      qword_1ECE3BC68 = (uint64_t)&ggl::patternedTransitLineRibbonShaderVertexFunctionDescriptor(void)::ref;
      dword_1ECE3BC70 = 1746350796;
      if ((v285 & 1) == 0
      {
        ggl::patternedTransitLineRibbonShaderFragmentFunctionDescriptor(void)::ref = 0x1EFDD56E6;
        qword_1ECE43390 = (uint64_t)"PatternedTransitLineRibbonShader";
        unk_1ECE43398 = 0;
        qword_1ECE433A0 = 0;
        unk_1ECE433A8 = &ggl::patternedTransitLineRibbonShaderFragShaderFunctionConstantMapping(void)::ref;
        qword_1ECE433B0 = 1;
        unk_1ECE433B8 = &ggl::patternedTransitLineRibbonShaderFragShaderFunctionBufferMapping(void)::ref;
        qword_1ECE433C0 = 0;
        unk_1ECE433C8 = &ggl::patternedTransitLineRibbonShaderFragShaderFunctionTextureMapping(void)::ref;
        qword_1ECE433D0 = 2;
        unk_1ECE433D8 = &ggl::patternedTransitLineRibbonShaderFragShaderFunctionSamplerMapping(void)::ref;
        qword_1ECE433E8 = 0;
        unk_1ECE433F0 = 0;
        qword_1ECE433E0 = 2;
      }
      qword_1ECE3BC78 = (uint64_t)&ggl::patternedTransitLineRibbonShaderFragmentFunctionDescriptor(void)::ref;
      dword_1ECE3BC80 = -270706970;
      qword_1ECE3BC88 = (uint64_t)ggl::patternedTransitLineRibbonShaderShaderConstants(void)::ref;
      unk_1ECE3BC90 = 6;
      qword_1ECE3BC98 = (uint64_t)ggl::patternedTransitLineRibbonShaderShaderTextures(void)::ref;
      unk_1ECE3BCA0 = 3;
      qword_1ECE3BCA8 = (uint64_t)ggl::patternedTransitLineRibbonShaderShaderSamplers(void)::ref;
      unk_1ECE3BCB0 = 3;
    }
    qword_1ECE31678 = (uint64_t)&ggl::PatternedTransitLineRibbonShader::typedReflection(void)::ref;
    if ((v274 & 1) == 0
    {
      ggl::TransitLineRibbon::pipelineStatePatternedBasePipelineAttributeStructBinding(void)::attr = 0;
      *(_QWORD *)algn_1EE57E3F8 = 0;
      qword_1EE57E400 = (uint64_t)"";
      dword_1EE57E408 = 0;
      qword_1EE57E410 = (uint64_t)&ggl::TransitLineRibbon::pipelineStatePatternedBasePipelineAttributeBinding_0(void)::attr;
      unk_1EE57E418 = 7;
    }
    qword_1ECE31680 = (uint64_t)&ggl::TransitLineRibbon::pipelineStatePatternedBasePipelineAttributeStructBinding(void)::attr;
    *(_QWORD *)algn_1ECE31688 = 1;
    qword_1ECE31690 = 0;
    unk_1ECE31698 = 3;
    qword_1ECE316A0 = (uint64_t)&ggl::TransitLineRibbon::pipelineStatePatternedBasePipelineDeviceStructBinding(void)::ref;
    unk_1ECE316A8 = 0;
    if ((v275 & 1) == 0
    {
      ggl::TransitLineRibbon::pipelineStatePatternedBasePipelineConstantStructBinding(void)::ref = 0;
      *(_QWORD *)algn_1EE57E2D8 = 0;
      qword_1EE57E2E0 = (uint64_t)"view";
      dword_1EE57E2E8 = 3;
      qword_1EE57E2F0 = (uint64_t)&ggl::TransitLineRibbon::pipelineStatePatternedBasePipelineConstantViewBinding(void)::reflection;
      unk_1EE57E2F8 = xmmword_19FFB35A0;
      qword_1EE57E308 = 1;
      unk_1EE57E310 = "transform";
      dword_1EE57E318 = 3;
      qword_1EE57E320 = (uint64_t)&ggl::TransitLineRibbon::pipelineStatePatternedBasePipelineConstantTransformBinding(void)::reflection;
      unk_1EE57E328 = xmmword_19FFB3660;
      qword_1EE57E338 = 2;
      unk_1EE57E340 = "style";
      dword_1EE57E348 = 3;
      qword_1EE57E350 = (uint64_t)&ggl::TransitLineRibbon::pipelineStatePatternedBasePipelineConstantStyleBinding(void)::reflection;
      unk_1EE57E358 = xmmword_19FFB3730;
      qword_1EE57E368 = 3;
      unk_1EE57E370 = "options";
      dword_1EE57E378 = 3;
      qword_1EE57E380 = (uint64_t)&ggl::TransitLineRibbon::pipelineStatePatternedBasePipelineConstantOptionsBinding(void)::reflection;
      unk_1EE57E388 = xmmword_19FFB3050;
      qword_1EE57E398 = 4;
      unk_1EE57E3A0 = "patternStyle";
      dword_1EE57E3A8 = 3;
      qword_1EE57E3B0 = (uint64_t)&ggl::TransitLineRibbon::pipelineStatePatternedBasePipelineConstantPatternStyleBinding(void)::reflection;
      unk_1EE57E3B8 = xmmword_19FFB4D40;
      qword_1EE57E3C8 = 5;
      unk_1EE57E3D0 = "clipParams";
      dword_1EE57E3D8 = 3;
      qword_1EE57E3E0 = (uint64_t)&ggl::TransitLineRibbon::pipelineStatePatternedBasePipelineConstantClipParamsBinding(void)::reflection;
      unk_1EE57E3E8 = 2;
    }
    qword_1ECE316B0 = (uint64_t)&ggl::TransitLineRibbon::pipelineStatePatternedBasePipelineConstantStructBinding(void)::ref;
    unk_1ECE316B8 = 6;
  }
  if (v96)
  {
    v101 = (unint64_t *)&v96->__shared_owners_;
    do
      v102 = __ldxr(v101);
    while (__stxr(v102 + 1, v101));
    *((_DWORD *)v99 + 14) = 0;
    *((_QWORD *)v99 + 5) = 0;
    *((_QWORD *)v99 + 6) = 0;
    *((_QWORD *)v99 + 3) = &off_1E42B6760;
    *((_QWORD *)v99 + 4) = 0;
    *((_QWORD *)v99 + 8) = &ggl::TransitLineRibbon::PatternedBasePipelineState::typedReflection(void)::ref;
    *((_QWORD *)v99 + 9) = v95;
    *((_QWORD *)v99 + 10) = v96;
    do
      v103 = __ldxr(v101);
    while (__stxr(v103 + 1, v101));
  }
  else
  {
    *((_DWORD *)v99 + 14) = 0;
    *((_QWORD *)v99 + 5) = 0;
    *((_QWORD *)v99 + 6) = 0;
    *((_QWORD *)v99 + 3) = &off_1E42B6760;
    *((_QWORD *)v99 + 4) = 0;
    *((_QWORD *)v99 + 8) = &ggl::TransitLineRibbon::PatternedBasePipelineState::typedReflection(void)::ref;
    *((_QWORD *)v99 + 9) = v95;
    *((_QWORD *)v99 + 10) = 0;
  }
  v99[136] = 0;
  *(_OWORD *)(v99 + 140) = xmmword_19FFB3060;
  *(_QWORD *)(v99 + 156) = 0;
  *(_QWORD *)(v99 + 172) = 0;
  *(_QWORD *)(v99 + 164) = 0;
  v99[184] = 0;
  *(_OWORD *)(v99 + 188) = xmmword_19FFB3060;
  *(_QWORD *)(v99 + 204) = 0;
  *(_QWORD *)(v99 + 220) = 0;
  *(_QWORD *)(v99 + 212) = 0;
  v99[232] = 0;
  *(_OWORD *)(v99 + 236) = xmmword_19FFB3060;
  *(_QWORD *)(v99 + 252) = 0;
  *(_QWORD *)(v99 + 268) = 0;
  *(_QWORD *)(v99 + 260) = 0;
  *(_OWORD *)(v99 + 280) = v294;
  *(_OWORD *)(v99 + 296) = v297;
  v99[312] = 0;
  *((_QWORD *)v99 + 48) = 0;
  *((_OWORD *)v99 + 22) = 0u;
  *((_OWORD *)v99 + 23) = 0u;
  *((_OWORD *)v99 + 20) = 0u;
  *((_OWORD *)v99 + 21) = 0u;
  *((_QWORD *)v99 + 49) = 0x100000001;
  v99[400] = 0;
  v99[88] = 1;
  *(_WORD *)(v99 + 89) = v291;
  v99[91] = v292;
  *(_OWORD *)(v99 + 92) = xmmword_19FFB35B0;
  *((_DWORD *)v99 + 27) = 7;
  *((_QWORD *)v99 + 14) = 0;
  *((_QWORD *)v99 + 15) = 0;
  *((_DWORD *)v99 + 32) = 0;
  v99[132] = 15;
  if (v96)
  {
    v104 = (unint64_t *)&v96->__shared_owners_;
    do
      v105 = __ldaxr(v104);
    while (__stlxr(v105 - 1, v104));
    if (!v105)
    {
      ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
      std::__shared_weak_count::__release_weak(v96);
    }
  }
  *((_DWORD *)v99 + 84) = 0;
  *(_QWORD *)(v99 + 329) = 0;
  v106 = vceqzq_s8(*(int8x16_t *)(v99 + 328));
  v107 = vmovl_high_s8(v106);
  v108 = vmovl_s16(*(int16x4_t *)v107.i8);
  v109.i64[0] = v108.u32[0];
  v109.i64[1] = v108.u32[1];
  v110 = v109;
  v111 = vmovl_s8(*(int8x8_t *)v106.i8);
  v112 = vmovl_s16(*(int16x4_t *)v111.i8);
  v109.i64[0] = v112.u32[0];
  v109.i64[1] = v112.u32[1];
  v113 = v109;
  v114 = vmovl_high_s16(v107);
  v109.i64[0] = v114.u32[0];
  v109.i64[1] = v114.u32[1];
  v115 = v109;
  v116 = vmovl_high_s16(v111);
  v109.i64[0] = v116.u32[0];
  v109.i64[1] = v116.u32[1];
  v117 = v109;
  v109.i64[0] = v108.u32[2];
  v109.i64[1] = v108.u32[3];
  v118 = v109;
  v109.i64[0] = v112.u32[2];
  v109.i64[1] = v112.u32[3];
  v119 = v109;
  v109.i64[0] = v114.u32[2];
  v109.i64[1] = v114.u32[3];
  v120 = v109;
  v109.i64[0] = v116.u32[2];
  v109.i64[1] = v116.u32[3];
  v121 = vbicq_s8((int8x16_t)xmmword_19FFB3070, v109);
  v122 = vbicq_s8((int8x16_t)xmmword_19FFB3080, v120);
  v123 = vbicq_s8((int8x16_t)xmmword_19FFB3090, v119);
  v124 = vbicq_s8((int8x16_t)xmmword_19FFB30C0, v115);
  v125 = vceqzq_s8(*(int8x16_t *)(v99 + 344));
  v126 = vmovl_high_s8(v125);
  v127 = vmovl_s16(*(int16x4_t *)v126.i8);
  v109.i64[0] = v127.u32[0];
  v109.i64[1] = v127.u32[1];
  v128 = v109;
  v129 = vmovl_s8(*(int8x8_t *)v125.i8);
  v130 = vmovl_s16(*(int16x4_t *)v129.i8);
  v109.i64[0] = v130.u32[0];
  v109.i64[1] = v130.u32[1];
  v131 = v109;
  v132 = vmovl_high_s16(v126);
  v109.i64[0] = v132.u32[0];
  v109.i64[1] = v132.u32[1];
  v133 = v109;
  v134 = vmovl_high_s16(v129);
  v109.i64[0] = v134.u32[0];
  v109.i64[1] = v134.u32[1];
  v135 = v109;
  v109.i64[0] = v127.u32[2];
  v109.i64[1] = v127.u32[3];
  v136 = v109;
  v109.i64[0] = v130.u32[2];
  v109.i64[1] = v130.u32[3];
  v137 = v109;
  v109.i64[0] = v132.u32[2];
  v109.i64[1] = v132.u32[3];
  v138 = v109;
  v109.i64[0] = v134.u32[2];
  v109.i64[1] = v134.u32[3];
  v139 = vbicq_s8((int8x16_t)xmmword_19FFB30F0, v138);
  v140 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3150, v128), vbicq_s8((int8x16_t)xmmword_19FFB30D0, v110));
  v141 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3140, v131), vbicq_s8((int8x16_t)xmmword_19FFB2DB0, v113));
  v142 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3130, v133), v124);
  v143 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3120, v135), vbicq_s8((int8x16_t)xmmword_19FFB30B0, v117));
  v144 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3110, v136), vbicq_s8((int8x16_t)xmmword_19FFB30A0, v118));
  v145 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3100, v137), v123);
  v146 = vorrq_s8(v139, v122);
  v147 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB30E0, v109), v121);
  v148 = vceqzq_s8(*(int8x16_t *)(v99 + 360));
  v149 = vmovl_s8(*(int8x8_t *)v148.i8);
  v150 = vmovl_high_s16(v149);
  v151 = vmovl_high_s8(v148);
  v152 = vmovl_high_s16(v151);
  v153 = vmovl_s16(*(int16x4_t *)v149.i8);
  v154 = vmovl_s16(*(int16x4_t *)v151.i8);
  v109.i64[0] = v153.i32[0];
  v109.i64[1] = v153.i32[1];
  v155 = v109;
  v109.i64[0] = v154.i32[0];
  v109.i64[1] = v154.i32[1];
  v156 = vbicq_s8((int8x16_t)xmmword_19FFB3160, v109);
  v157 = vceqzq_s8(*(int8x16_t *)(v99 + 376));
  v158 = vmovl_high_s8(v157);
  v159 = vmovl_s16(*(int16x4_t *)v158.i8);
  v109.i64[0] = v159.i32[0];
  v109.i64[1] = v159.i32[1];
  v160 = vmovl_s8(*(int8x8_t *)v157.i8);
  v161 = vmovl_s16(*(int16x4_t *)v160.i8);
  v162 = vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3250, v109), v156), v140);
  v109.i64[0] = v161.i32[0];
  v109.i64[1] = v161.i32[1];
  v163 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3240, v109), vbicq_s8((int8x16_t)xmmword_19FFB3170, v155));
  v109.i64[0] = v152.i32[0];
  v109.i64[1] = v152.i32[1];
  v164 = vbicq_s8((int8x16_t)xmmword_19FFB3180, v109);
  v165 = vmovl_high_s16(v158);
  v166 = vorrq_s8(v163, v141);
  v109.i64[0] = v165.i32[0];
  v109.i64[1] = v165.i32[1];
  v167 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3230, v109), v164);
  v109.i64[0] = v150.i32[0];
  v109.i64[1] = v150.i32[1];
  v168 = vbicq_s8((int8x16_t)xmmword_19FFB3190, v109);
  v169 = vmovl_high_s16(v160);
  v109.i64[0] = v169.i32[0];
  v109.i64[1] = v169.i32[1];
  v170 = vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3220, v109), v168), v143);
  v109.i64[0] = v154.i32[2];
  v109.i64[1] = v154.i32[3];
  v171 = vbicq_s8((int8x16_t)xmmword_19FFB31A0, v109);
  v109.i64[0] = v159.i32[2];
  v109.i64[1] = v159.i32[3];
  v172 = vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3210, v109), v171), v144);
  v109.i64[0] = v153.i32[2];
  v109.i64[1] = v153.i32[3];
  v173 = vbicq_s8((int8x16_t)xmmword_19FFB31B0, v109);
  v109.i64[0] = v161.i32[2];
  v109.i64[1] = v161.i32[3];
  v174 = vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3200, v109), v173), v145);
  v109.i64[0] = v152.i32[2];
  v109.i64[1] = v152.i32[3];
  v175 = vbicq_s8((int8x16_t)xmmword_19FFB31C0, v109);
  v109.i64[0] = v165.i32[2];
  v109.i64[1] = v165.i32[3];
  v176 = vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB31F0, v109), v175), v146);
  v109.i64[0] = v150.i32[2];
  v109.i64[1] = v150.i32[3];
  v177 = vbicq_s8((int8x16_t)xmmword_19FFB31D0, v109);
  v109.i64[0] = v169.i32[2];
  v109.i64[1] = v169.i32[3];
  *((_QWORD *)v99 + 40) = vaddvq_s64(vaddq_s64((int64x2_t)vorrq_s8(vorrq_s8(v166, v162), vorrq_s8(v170, vorrq_s8(v167, v142))), (int64x2_t)vorrq_s8(vorrq_s8(v174, v172), vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB31E0, v109), v177), v147), v176))));
  *((_QWORD *)v99 + 3) = &off_1E42BA5D0;
  v99[312] = 1;
  v178 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 2) = v99 + 24;
  *((_QWORD *)this + 3) = v99;
  if (v178)
  {
    v179 = (unint64_t *)&v178->__shared_owners_;
    do
      v180 = __ldaxr(v179);
    while (__stlxr(v180 - 1, v179));
    if (!v180)
    {
      ((void (*)(std::__shared_weak_count *))v178->__on_zero_shared)(v178);
      std::__shared_weak_count::__release_weak(v178);
    }
  }
  if (v96)
  {
    v181 = (unint64_t *)&v96->__shared_owners_;
    do
      v182 = __ldaxr(v181);
    while (__stlxr(v182 - 1, v181));
    if (!v182)
    {
      ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
      std::__shared_weak_count::__release_weak(v96);
    }
  }
  v183 = *((_QWORD *)a2 + 10);
  v184 = *(_QWORD *)(v183 + 2312);
  v185 = *(std::__shared_weak_count **)(v183 + 2320);
  if (v185)
  {
    v186 = (unint64_t *)&v185->__shared_owners_;
    do
      v187 = __ldxr(v186);
    while (__stxr(v187 + 1, v186));
  }
  v188 = (char *)operator new(0x198uLL);
  *((_QWORD *)v188 + 1) = 0;
  *((_QWORD *)v188 + 2) = 0;
  *(_QWORD *)v188 = &off_1E42DEA78;
  v295 = *(_OWORD *)a3->colorFormats;
  v298 = *(_OWORD *)&a3->colorFormatsCount;
  if ((v189 & 1) == 0)
  {
    if ((_DWORD)v276)
    {
      if ((v277 & 1) == 0)
      {
        if ((_DWORD)v276)
        {
          if ((v286 & 1) == 0
          {
            if ((v290 & 1) == 0
            {
              ggl::MeshTyped<ggl::Ribbon::DefaultVbo>::attributesReflection(void)::r = (uint64_t)&ggl::Ribbon::defaultVboReflection;
            }
            ggl::MeshTyped<ggl::Ribbon::DefaultVbo>::typedReflection(void)::r = (uint64_t)&ggl::MeshTyped<ggl::Ribbon::DefaultVbo>::attributesReflection(void)::r;
            unk_1ECE43DB8 = 1;
          }
          ggl::SolidRibbon::PipelineSetup::typedReflection(void)::ref = (uint64_t)&ggl::MeshTyped<ggl::Ribbon::DefaultVbo>::typedReflection(void)::r;
          *(_QWORD *)algn_1ECE38DC8 = &ggl::SolidRibbon::pipelineDataPipelineDeviceStructs(void)::ref;
          qword_1ECE38DD0 = 0;
          if ((v287 & 1) == 0
          {
            ggl::SolidRibbon::pipelineDataPipelineConstantStructs(void)::ref = (uint64_t)ggl::Tile::View::reflection(void)::reflection;
            unk_1ECE38E00 = ggl::Tile::Transform::reflection(void)::reflection;
            qword_1ECE38E08 = (uint64_t)ggl::OffsetRibbon::Style::reflection(void)::reflection;
            unk_1ECE38E10 = ggl::Tile::Clipping::reflection(void)::reflection;
          }
          qword_1ECE38DD8 = (uint64_t)&ggl::SolidRibbon::pipelineDataPipelineConstantStructs(void)::ref;
          unk_1ECE38DE0 = xmmword_19FFB2F50;
        }
      }
      ggl::SolidRibbon::PipelineState::typedReflection(void)::ref = (uint64_t)&ggl::SolidRibbon::PipelineSetup::typedReflection(void)::ref;
      ggl::SolidRibbonShader::typedReflection(v276);
      qword_1ECE30F00 = (uint64_t)&ggl::SolidRibbonShader::typedReflection(void)::ref;
      if ((v278 & 1) == 0
      {
        ggl::SolidRibbon::pipelineStatePipelineAttributeStructBinding(void)::attr = 0;
        unk_1EE57AE30 = 0;
        qword_1EE57AE38 = (uint64_t)"";
        dword_1EE57AE40 = 0;
        qword_1EE57AE48 = (uint64_t)&ggl::SolidRibbon::pipelineStatePipelineAttributeBinding_0(void)::attr;
        unk_1EE57AE50 = 4;
      }
      qword_1ECE30F08 = (uint64_t)&ggl::SolidRibbon::pipelineStatePipelineAttributeStructBinding(void)::attr;
      unk_1ECE30F10 = 1;
      qword_1ECE30F18 = 0;
      unk_1ECE30F20 = 2;
      qword_1ECE30F28 = (uint64_t)&ggl::SolidRibbon::pipelineStatePipelineDeviceStructBinding(void)::ref;
      unk_1ECE30F30 = 0;
      if ((v279 & 1) == 0
      {
        ggl::SolidRibbon::pipelineStatePipelineConstantStructBinding(void)::ref = 0;
        unk_1EE57AD70 = 0;
        qword_1EE57AD78 = (uint64_t)"view";
        dword_1EE57AD80 = 3;
        qword_1EE57AD88 = (uint64_t)&ggl::SolidRibbon::pipelineStatePipelineConstantViewBinding(void)::reflection;
        *(_OWORD *)algn_1EE57AD90 = xmmword_19FFB35A0;
        qword_1EE57ADA0 = 1;
        qword_1EE57ADA8 = (uint64_t)"transform";
        dword_1EE57ADB0 = 3;
        qword_1EE57ADB8 = (uint64_t)&ggl::SolidRibbon::pipelineStatePipelineConstantTransformBinding(void)::reflection;
        unk_1EE57ADC0 = xmmword_19FFB3660;
        qword_1EE57ADD0 = 2;
        unk_1EE57ADD8 = "style";
        dword_1EE57ADE0 = 3;
        qword_1EE57ADE8 = (uint64_t)&ggl::SolidRibbon::pipelineStatePipelineConstantStyleBinding(void)::reflection;
        *(_OWORD *)algn_1EE57ADF0 = xmmword_19FFB38C0;
        qword_1EE57AE00 = 3;
        unk_1EE57AE08 = "tileClipping";
        dword_1EE57AE10 = 3;
        qword_1EE57AE18 = (uint64_t)&ggl::SolidRibbon::pipelineStatePipelineConstantTileClippingBinding(void)::reflection;
        unk_1EE57AE20 = 2;
      }
      qword_1ECE30F38 = (uint64_t)&ggl::SolidRibbon::pipelineStatePipelineConstantStructBinding(void)::ref;
      unk_1ECE30F40 = 4;
    }
  }
  if (v185)
  {
    v190 = (unint64_t *)&v185->__shared_owners_;
    do
      v191 = __ldxr(v190);
    while (__stxr(v191 + 1, v190));
    *((_DWORD *)v188 + 14) = 0;
    *((_QWORD *)v188 + 5) = 0;
    *((_QWORD *)v188 + 6) = 0;
    *((_QWORD *)v188 + 3) = &off_1E42B6760;
    *((_QWORD *)v188 + 4) = 0;
    *((_QWORD *)v188 + 8) = &ggl::SolidRibbon::PipelineState::typedReflection(void)::ref;
    *((_QWORD *)v188 + 9) = v184;
    *((_QWORD *)v188 + 10) = v185;
    do
      v192 = __ldxr(v190);
    while (__stxr(v192 + 1, v190));
  }
  else
  {
    *((_DWORD *)v188 + 14) = 0;
    *((_QWORD *)v188 + 5) = 0;
    *((_QWORD *)v188 + 6) = 0;
    *((_QWORD *)v188 + 3) = &off_1E42B6760;
    *((_QWORD *)v188 + 4) = 0;
    *((_QWORD *)v188 + 8) = &ggl::SolidRibbon::PipelineState::typedReflection(void)::ref;
    *((_QWORD *)v188 + 9) = v184;
    *((_QWORD *)v188 + 10) = 0;
  }
  v188[136] = 0;
  *(_OWORD *)(v188 + 140) = xmmword_19FFB3060;
  *(_QWORD *)(v188 + 156) = 0;
  *(_QWORD *)(v188 + 172) = 0;
  *(_QWORD *)(v188 + 164) = 0;
  v188[184] = 0;
  *(_OWORD *)(v188 + 188) = xmmword_19FFB3060;
  *(_QWORD *)(v188 + 204) = 0;
  *(_QWORD *)(v188 + 220) = 0;
  *(_QWORD *)(v188 + 212) = 0;
  v188[232] = 0;
  *(_OWORD *)(v188 + 236) = xmmword_19FFB3060;
  *(_QWORD *)(v188 + 252) = 0;
  *(_QWORD *)(v188 + 268) = 0;
  *(_QWORD *)(v188 + 260) = 0;
  *(_OWORD *)(v188 + 280) = v295;
  *(_OWORD *)(v188 + 296) = v298;
  v188[312] = 0;
  *((_QWORD *)v188 + 48) = 0;
  *((_OWORD *)v188 + 22) = 0u;
  *((_OWORD *)v188 + 23) = 0u;
  *((_OWORD *)v188 + 20) = 0u;
  *((_OWORD *)v188 + 21) = 0u;
  *((_QWORD *)v188 + 49) = 0x100000001;
  v188[400] = 0;
  v188[88] = 1;
  *(_WORD *)(v188 + 89) = v291;
  v188[91] = v292;
  *(_OWORD *)(v188 + 92) = xmmword_19FFB35B0;
  *((_DWORD *)v188 + 27) = 7;
  *((_QWORD *)v188 + 14) = 0;
  *((_QWORD *)v188 + 15) = 0;
  *((_DWORD *)v188 + 32) = 0;
  v188[132] = 15;
  if (v185)
  {
    v193 = (unint64_t *)&v185->__shared_owners_;
    do
      v194 = __ldaxr(v193);
    while (__stlxr(v194 - 1, v193));
    if (!v194)
    {
      ((void (*)(std::__shared_weak_count *))v185->__on_zero_shared)(v185);
      std::__shared_weak_count::__release_weak(v185);
    }
  }
  *(_DWORD *)(v188 + 329) = 0x10000;
  *((_DWORD *)v188 + 84) = 0;
  *(_DWORD *)(v188 + 333) = 0;
  v195 = vceqzq_s8(*(int8x16_t *)(v188 + 328));
  v196 = vmovl_s8(*(int8x8_t *)v195.i8);
  v197 = vmovl_high_s16(v196);
  v198.i64[0] = v197.u32[2];
  v198.i64[1] = v197.u32[3];
  v199 = vbicq_s8((int8x16_t)xmmword_19FFB3070, v198);
  v200 = vmovl_high_s8(v195);
  v201 = vmovl_high_s16(v200);
  v198.i64[0] = v201.u32[2];
  v198.i64[1] = v201.u32[3];
  v202 = vbicq_s8((int8x16_t)xmmword_19FFB3080, v198);
  v203 = vmovl_s16(*(int16x4_t *)v196.i8);
  v198.i64[0] = v203.u32[2];
  v198.i64[1] = v203.u32[3];
  v204 = vbicq_s8((int8x16_t)xmmword_19FFB3090, v198);
  v205 = vmovl_s16(*(int16x4_t *)v200.i8);
  v198.i64[0] = v205.u32[2];
  v198.i64[1] = v205.u32[3];
  v206 = vbicq_s8((int8x16_t)xmmword_19FFB30A0, v198);
  v198.i64[0] = v197.u32[0];
  v198.i64[1] = v197.u32[1];
  v207 = vbicq_s8((int8x16_t)xmmword_19FFB30B0, v198);
  v198.i64[0] = v201.u32[0];
  v198.i64[1] = v201.u32[1];
  v208 = vbicq_s8((int8x16_t)xmmword_19FFB30C0, v198);
  v198.i64[0] = v203.u32[0];
  v198.i64[1] = v203.u32[1];
  v209 = vbicq_s8((int8x16_t)xmmword_19FFB2DB0, v198);
  v198.i64[0] = v205.u32[0];
  v198.i64[1] = v205.u32[1];
  v210 = vbicq_s8((int8x16_t)xmmword_19FFB30D0, v198);
  v211 = vceqzq_s8(*(int8x16_t *)(v188 + 344));
  v212 = vmovl_s8(*(int8x8_t *)v211.i8);
  v213 = vmovl_high_s16(v212);
  v198.i64[0] = v213.u32[2];
  v198.i64[1] = v213.u32[3];
  v214 = vbicq_s8((int8x16_t)xmmword_19FFB30E0, v198);
  v215 = vmovl_high_s8(v211);
  v216 = vmovl_high_s16(v215);
  v198.i64[0] = v216.u32[2];
  v198.i64[1] = v216.u32[3];
  v217 = vbicq_s8((int8x16_t)xmmword_19FFB30F0, v198);
  v218 = vmovl_s16(*(int16x4_t *)v212.i8);
  v198.i64[0] = v218.u32[2];
  v198.i64[1] = v218.u32[3];
  v219 = vbicq_s8((int8x16_t)xmmword_19FFB3100, v198);
  v220 = vmovl_s16(*(int16x4_t *)v215.i8);
  v198.i64[0] = v220.u32[2];
  v198.i64[1] = v220.u32[3];
  v221 = vbicq_s8((int8x16_t)xmmword_19FFB3110, v198);
  v198.i64[0] = v213.u32[0];
  v198.i64[1] = v213.u32[1];
  v222 = vbicq_s8((int8x16_t)xmmword_19FFB3120, v198);
  v198.i64[0] = v216.u32[0];
  v198.i64[1] = v216.u32[1];
  v223 = vbicq_s8((int8x16_t)xmmword_19FFB3130, v198);
  v198.i64[0] = v218.u32[0];
  v198.i64[1] = v218.u32[1];
  v224 = vbicq_s8((int8x16_t)xmmword_19FFB3140, v198);
  v198.i64[0] = v220.u32[0];
  v198.i64[1] = v220.u32[1];
  v225 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3150, v198), v210);
  v226 = vorrq_s8(v224, v209);
  v227 = vorrq_s8(v223, v208);
  v228 = vorrq_s8(v222, v207);
  v229 = vorrq_s8(v221, v206);
  v230 = vorrq_s8(v219, v204);
  v231 = vorrq_s8(v217, v202);
  v232 = vorrq_s8(v214, v199);
  v233 = vceqzq_s8(*(int8x16_t *)(v188 + 360));
  v234 = vmovl_s8(*(int8x8_t *)v233.i8);
  v235 = vmovl_high_s16(v234);
  v236 = vmovl_high_s8(v233);
  v237 = vmovl_high_s16(v236);
  v238 = vmovl_s16(*(int16x4_t *)v234.i8);
  v239 = vmovl_s16(*(int16x4_t *)v236.i8);
  v198.i64[0] = v239.i32[0];
  v198.i64[1] = v239.i32[1];
  v240 = vbicq_s8((int8x16_t)xmmword_19FFB3160, v198);
  v198.i64[0] = v238.i32[0];
  v198.i64[1] = v238.i32[1];
  v241 = vbicq_s8((int8x16_t)xmmword_19FFB3170, v198);
  v198.i64[0] = v237.i32[0];
  v198.i64[1] = v237.i32[1];
  v242 = vbicq_s8((int8x16_t)xmmword_19FFB3180, v198);
  v198.i64[0] = v235.i32[0];
  v198.i64[1] = v235.i32[1];
  v243 = vbicq_s8((int8x16_t)xmmword_19FFB3190, v198);
  v198.i64[0] = v235.i32[2];
  v198.i64[1] = v235.i32[3];
  v244 = v198;
  v198.i64[0] = v237.i32[2];
  v198.i64[1] = v237.i32[3];
  v245 = v198;
  v198.i64[0] = v238.i32[2];
  v198.i64[1] = v238.i32[3];
  v246 = v198;
  v198.i64[0] = v239.i32[2];
  v198.i64[1] = v239.i32[3];
  v247 = vbicq_s8((int8x16_t)xmmword_19FFB31A0, v198);
  v248 = vceqzq_s8(*(int8x16_t *)(v188 + 376));
  v249 = vmovl_high_s8(v248);
  v250 = vmovl_s16(*(int16x4_t *)v249.i8);
  v251 = vmovl_s8(*(int8x8_t *)v248.i8);
  v252 = vmovl_s16(*(int16x4_t *)v251.i8);
  v253 = vmovl_high_s16(v249);
  v254 = vmovl_high_s16(v251);
  v198.i64[0] = v254.i32[2];
  v198.i64[1] = v254.i32[3];
  v255 = vbicq_s8((int8x16_t)xmmword_19FFB31E0, v198);
  v198.i64[0] = v253.i32[2];
  v198.i64[1] = v253.i32[3];
  v256 = vbicq_s8((int8x16_t)xmmword_19FFB31F0, v198);
  v198.i64[0] = v252.i32[2];
  v198.i64[1] = v252.i32[3];
  v257 = vbicq_s8((int8x16_t)xmmword_19FFB3200, v198);
  v198.i64[0] = v250.i32[2];
  v198.i64[1] = v250.i32[3];
  v258 = vbicq_s8((int8x16_t)xmmword_19FFB3210, v198);
  v198.i64[0] = v254.i32[0];
  v198.i64[1] = v254.i32[1];
  v259 = vbicq_s8((int8x16_t)xmmword_19FFB3220, v198);
  v198.i64[0] = v253.i32[0];
  v198.i64[1] = v253.i32[1];
  v260 = vbicq_s8((int8x16_t)xmmword_19FFB3230, v198);
  v198.i64[0] = v252.i32[0];
  v198.i64[1] = v252.i32[1];
  v261 = vbicq_s8((int8x16_t)xmmword_19FFB3240, v198);
  v198.i64[0] = v250.i32[0];
  v198.i64[1] = v250.i32[1];
  *((_QWORD *)v188 + 40) = vaddvq_s64(vaddq_s64((int64x2_t)vorrq_s8(vorrq_s8(vorrq_s8(vorrq_s8(v261, v241), v226), vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3250, v198), v240), v225)), vorrq_s8(vorrq_s8(vorrq_s8(v259, v243), v228), vorrq_s8(vorrq_s8(v260, v242), v227))), (int64x2_t)vorrq_s8(vorrq_s8(vorrq_s8(vorrq_s8(v257, vbicq_s8((int8x16_t)xmmword_19FFB31B0, v246)), v230), vorrq_s8(vorrq_s8(v258, v247), v229)), vorrq_s8(vorrq_s8(vorrq_s8(v255, vbicq_s8((int8x16_t)xmmword_19FFB31D0, v244)),
                                                v232),
                                              vorrq_s8(vorrq_s8(v256, vbicq_s8((int8x16_t)xmmword_19FFB31C0, v245)), v231)))));
  *((_QWORD *)v188 + 3) = &off_1E42B5E88;
  v188[312] = 1;
  v262 = (std::__shared_weak_count *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 4) = v188 + 24;
  *((_QWORD *)this + 5) = v188;
  if (v262)
  {
    v263 = (unint64_t *)&v262->__shared_owners_;
    do
      v264 = __ldaxr(v263);
    while (__stlxr(v264 - 1, v263));
    if (!v264)
    {
      ((void (*)(std::__shared_weak_count *))v262->__on_zero_shared)(v262);
      std::__shared_weak_count::__release_weak(v262);
    }
  }
  if (v185)
  {
    v265 = (unint64_t *)&v185->__shared_owners_;
    do
      v266 = __ldaxr(v265);
    while (__stlxr(v266 - 1, v265));
    if (!v266)
    {
      ((void (*)(std::__shared_weak_count *))v185->__on_zero_shared)(v185);
      std::__shared_weak_count::__release_weak(v185);
    }
  }
  return this;
}

void sub_19F91A52C(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;

  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v6 = (std::__shared_weak_count *)v1[5];
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  v9 = (std::__shared_weak_count *)v1[3];
  if (v9)
  {
    v10 = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  v12 = (std::__shared_weak_count *)v1[1];
  if (v12)
  {
    v13 = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  _Unwind_Resume(exception_object);
}

float32x2_t md::LabelLayoutContext::projectPointToPixel(float64x2_t *a1, double *a2, float32x2_t *a3)
{
  float32x2_t result;

  result = vcvt_f32_f64(vmulq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(a1[60], a1[54], *a2), a1[56], a2[1]), a1[58], a2[2]), 1.0 / (a1[61].f64[1] + a1[55].f64[1] * *a2 + a1[57].f64[1] * a2[1] + a1[59].f64[1] * a2[2])));
  *a3 = result;
  return result;
}

BOOL md::LabelLayoutContext::isDistanceClipped(uint64_t a1, uint64_t a2)
{
  double v2;
  uint64_t v3;
  float64x2_t v4;
  double v5;
  double v6;
  double v7;
  double v8;
  float v9;
  float v10;
  double v11;
  double v12;

  if (*(_BYTE *)(*(_QWORD *)a1 + 18))
  {
    v2 = *(double *)a2;
    if (*(_BYTE *)(a1 + 15))
    {
      LOBYTE(v3) = 0;
    }
    else
    {
      v4 = vmulq_f64(*(float64x2_t *)(a2 + 8), *(float64x2_t *)(a1 + 168));
      v3 = 1;
      if (v4.f64[0] + v2 * *(double *)(a1 + 160) + v4.f64[1] > *(double *)(a1 + 288))
        return v3;
    }
  }
  else
  {
    v2 = *(double *)a2;
    LOBYTE(v3) = *(_BYTE *)(a1 + 15) == 0;
  }
  v5 = v2 - *(double *)(a1 + 136);
  v6 = *(double *)(a2 + 8) - *(double *)(a1 + 144);
  v7 = *(double *)(a2 + 16) - *(double *)(a1 + 152);
  if ((v3 & 1) != 0)
  {
    v8 = *(double *)(a1 + 160) * v5 + *(double *)(a1 + 168) * v6 + *(double *)(a1 + 176) * v7;
    if (!*(_BYTE *)(a1 + 1273))
      goto LABEL_14;
  }
  else
  {
    v8 = sqrt(v5 * v5 + v6 * v6 + v7 * v7);
    if (!*(_BYTE *)(a1 + 1273))
    {
LABEL_14:
      if (v8 < *(double *)(a1 + 272))
        return 1;
      return v8 > *(double *)(a1 + 280);
    }
  }
  v9 = *(float *)(a1 + 1276);
  v10 = *(float *)(a1 + 1280);
  if (v9 <= v10)
    goto LABEL_14;
  v11 = *(double *)(a1 + 256);
  v12 = v11 * v10 / v9;
  return v8 > v12 + v11 || v8 < v11 - v12;
}

void md::LabelNavLayoutContext::grabStateFromContext(md::LabelNavLayoutContext *this, md::LabelManager *a2, const md::LabelLayoutContext *a3, const md::LayoutContext *a4)
{
  _QWORD *v8;
  int8x8_t v9;
  uint8x8_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  double *v18;
  double v19;
  double v20;
  double v21;
  uint64_t v22;
  uint64_t v23;
  float v24;
  uint64_t v25;
  float v26;
  uint64_t v27;
  float v28;
  uint64_t v29;
  float v30;
  float v31;
  int v32;
  float v33;
  float v34;
  int v35;
  double v36;
  uint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *p_shared_owners;
  unint64_t v40;
  unint64_t v41;
  _QWORD *v42;
  int8x8_t v43;
  uint8x8_t v44;
  uint64_t v45;
  _QWORD *v46;
  _QWORD *v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  void *v53;
  void *v54;
  void *v55;
  uint64_t *v56;
  int8x8_t v57;
  uint8x8_t v58;
  unint64_t v59;
  uint64_t v60;
  _QWORD *v61;
  _QWORD *v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char v67;
  unint64_t v68;
  _QWORD *v69;
  _QWORD *v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  _QWORD *v76;
  uint64_t v77;
  uint64_t i;
  void *v79;
  void *v80;
  unint64_t v81;
  _QWORD *v82;
  void *v83;
  unint64_t v84;
  _QWORD *v85;
  std::__shared_weak_count *v86;
  unint64_t *v87;
  unint64_t v88;
  char *v89;
  _QWORD *v90;
  uint64_t v91;
  _QWORD *v92;
  void *v93;
  _QWORD *v94;
  std::__shared_weak_count *v95;
  unint64_t *v96;
  unint64_t v97;
  void *__p[2];
  void *v99[2];
  int v100;
  _QWORD *v101;
  _QWORD *v102;
  uint64_t v103;

  v8 = (_QWORD *)*((_QWORD *)a4 + 1);
  v9 = (int8x8_t)v8[1];
  if (!*(_QWORD *)&v9)
    goto LABEL_24;
  v10 = (uint8x8_t)vcnt_s8(v9);
  v10.i16[0] = vaddlv_u8(v10);
  if (v10.u32[0] > 1uLL)
  {
    v11 = 0x1AF456233693CD46;
    if (*(_QWORD *)&v9 <= 0x1AF456233693CD46uLL)
      v11 = 0x1AF456233693CD46uLL % *(_QWORD *)&v9;
  }
  else
  {
    v11 = (*(_QWORD *)&v9 - 1) & 0x1AF456233693CD46;
  }
  v12 = *(_QWORD **)(*v8 + 8 * v11);
  if (!v12)
    goto LABEL_24;
  v13 = (_QWORD *)*v12;
  if (!v13)
    goto LABEL_24;
  if (v10.u32[0] < 2uLL)
  {
    v14 = *(_QWORD *)&v9 - 1;
    while (1)
    {
      v16 = v13[1];
      if (v16 == 0x1AF456233693CD46)
      {
        if (v13[2] == 0x1AF456233693CD46)
          goto LABEL_22;
      }
      else if ((v16 & v14) != v11)
      {
        goto LABEL_24;
      }
      v13 = (_QWORD *)*v13;
      if (!v13)
        goto LABEL_24;
    }
  }
  while (1)
  {
    v15 = v13[1];
    if (v15 == 0x1AF456233693CD46)
      break;
    if (v15 >= *(_QWORD *)&v9)
      v15 %= *(_QWORD *)&v9;
    if (v15 != v11)
      goto LABEL_24;
LABEL_11:
    v13 = (_QWORD *)*v13;
    if (!v13)
      goto LABEL_24;
  }
  if (v13[2] != 0x1AF456233693CD46)
    goto LABEL_11;
LABEL_22:
  v17 = v13[5];
  if (*(_QWORD *)(v17 + 8) == 0x1AF456233693CD46)
  {
    v18 = *(double **)(v17 + 32);
    goto LABEL_25;
  }
LABEL_24:
  v18 = 0;
LABEL_25:
  *((_DWORD *)this + 30) = *((_DWORD *)a3 + 310);
  v19 = *((double *)a3 + 156);
  v20 = *((double *)a3 + 157);
  v21 = *((double *)a3 + 158);
  *((double *)this + 12) = v19;
  *((double *)this + 13) = v20;
  *((double *)this + 14) = v21;
  *(float *)&v19 = (*((double *)a3 + 120)
                  + *((double *)a3 + 108) * v19
                  + *((double *)a3 + 112) * v20
                  + *((double *)a3 + 116) * v21)
                 / (*((double *)a3 + 123)
                  + *((double *)a3 + 111) * v19
                  + *((double *)a3 + 115) * v20
                  + *((double *)a3 + 119) * v21);
  *((_DWORD *)this + 31) = LODWORD(v19);
  md::LayoutContext::frameState(a4);
  *((float *)this + 32) = *((float *)a2 + 44) * *(float *)(v22 + 40);
  md::LayoutContext::frameState(a4);
  v24 = *((float *)a2 + 44) * *(float *)(v23 + 32);
  md::LayoutContext::frameState(a4);
  v26 = *((float *)a2 + 44) * *(float *)(v25 + 36);
  md::LayoutContext::frameState(a4);
  v28 = *((float *)a2 + 44) * *(float *)(v27 + 40);
  md::LayoutContext::frameState(a4);
  v30 = *((float *)a3 + 266) - (float)(*((float *)a2 + 44) * *(float *)(v29 + 44));
  v31 = *((float *)a3 + 267) - v24;
  *((float *)this + 8) = v26;
  *((float *)this + 9) = v28;
  *((float *)this + 10) = v30;
  *((float *)this + 11) = v31;
  v32 = *((_DWORD *)a3 + 266);
  v33 = *((float *)a3 + 267) - v24;
  *((_DWORD *)this + 12) = 0;
  *((float *)this + 13) = v28;
  *((_DWORD *)this + 14) = v32;
  *((float *)this + 15) = v33;
  v34 = *((float *)a3 + 267);
  v35 = *((_DWORD *)a3 + 266);
  *((_DWORD *)this + 20) = 0;
  *((float *)this + 21) = v34 - v28;
  *((_DWORD *)this + 22) = v35;
  *((float *)this + 23) = v34;
  if (*((_BYTE *)a3 + 8))
  {
    *(double *)this = v18[366];
    *((double *)this + 1) = v18[367];
    *((double *)this + 2) = v18[368];
    v36 = v18[369];
  }
  else
  {
    *(_QWORD *)this = 0;
    *((_QWORD *)this + 1) = 0;
    *((_QWORD *)this + 2) = 0x3FF0000000000000;
    v36 = 1.0;
  }
  *((double *)this + 3) = v36;
  v37 = *((_QWORD *)a4 + 4);
  v38 = (std::__shared_weak_count *)*((_QWORD *)a4 + 5);
  if (v38)
  {
    p_shared_owners = (unint64_t *)&v38->__shared_owners_;
    do
      v40 = __ldxr(p_shared_owners);
    while (__stxr(v40 + 1, p_shared_owners));
    *((_QWORD *)this + 17) = *(_QWORD *)(v37 + 64);
    do
      v41 = __ldaxr(p_shared_owners);
    while (__stlxr(v41 - 1, p_shared_owners));
    if (!v41)
    {
      ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
      std::__shared_weak_count::__release_weak(v38);
    }
  }
  else
  {
    *((_QWORD *)this + 17) = *(_QWORD *)(v37 + 64);
  }
  v42 = (_QWORD *)*((_QWORD *)a4 + 1);
  v43 = (int8x8_t)v42[1];
  if (!*(_QWORD *)&v43)
    goto LABEL_59;
  v44 = (uint8x8_t)vcnt_s8(v43);
  v44.i16[0] = vaddlv_u8(v44);
  if (v44.u32[0] > 1uLL)
  {
    v45 = 0x63B6FE00C0848868;
    if (*(_QWORD *)&v43 <= 0x63B6FE00C0848868uLL)
      v45 = 0x63B6FE00C0848868uLL % *(_QWORD *)&v43;
  }
  else
  {
    v45 = (*(_QWORD *)&v43 - 1) & 0x63B6FE00C0848868;
  }
  v46 = *(_QWORD **)(*v42 + 8 * v45);
  if (!v46)
    goto LABEL_59;
  v47 = (_QWORD *)*v46;
  if (!v47)
    goto LABEL_59;
  if (v44.u32[0] < 2uLL)
  {
    v48 = *(_QWORD *)&v43 - 1;
    while (1)
    {
      v50 = v47[1];
      if (v50 == 0x63B6FE00C0848868)
      {
        if (v47[2] == 0x63B6FE00C0848868)
          goto LABEL_57;
      }
      else if ((v50 & v48) != v45)
      {
        goto LABEL_59;
      }
      v47 = (_QWORD *)*v47;
      if (!v47)
        goto LABEL_59;
    }
  }
  while (2)
  {
    v49 = v47[1];
    if (v49 != 0x63B6FE00C0848868)
    {
      if (v49 >= *(_QWORD *)&v43)
        v49 %= *(_QWORD *)&v43;
      if (v49 != v45)
        goto LABEL_59;
      goto LABEL_46;
    }
    if (v47[2] != 0x63B6FE00C0848868)
    {
LABEL_46:
      v47 = (_QWORD *)*v47;
      if (!v47)
        goto LABEL_59;
      continue;
    }
    break;
  }
LABEL_57:
  v51 = v47[5];
  if (*(_QWORD *)(v51 + 8) == 0x63B6FE00C0848868)
  {
    v52 = *(_QWORD *)(v51 + 32);
    goto LABEL_60;
  }
LABEL_59:
  v52 = 0;
LABEL_60:
  *((_QWORD *)this + 18) = v52;
  *((_BYTE *)this + 216) = *((_BYTE *)a3 + 8) ^ 1;
  *((_BYTE *)this + 217) = *((_BYTE *)a3 + 24);
  *((_BYTE *)this + 218) = GEOConfigGetBOOL();
  objc_msgSend(MEMORY[0x1E0D27420], "modernManager");
  v53 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v53, "activeTileGroup");
  v54 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v54, "activeTileSetForTileType:scale:", 92, 1);
  v55 = (void *)objc_claimAutoreleasedReturnValue();
  *((_BYTE *)this + 219) = v55 != 0;

  v56 = (uint64_t *)*((_QWORD *)a4 + 1);
  v57 = (int8x8_t)v56[1];
  if (!*(_QWORD *)&v57)
  {
    *((_BYTE *)this + 220) = 4;
    goto LABEL_109;
  }
  v58 = (uint8x8_t)vcnt_s8(v57);
  v58.i16[0] = vaddlv_u8(v58);
  if (v58.u32[0] > 1uLL)
  {
    v59 = 0xE42D19AFCA302E68;
    if (*(_QWORD *)&v57 <= 0xE42D19AFCA302E68)
      v59 = 0xE42D19AFCA302E68 % *(_QWORD *)&v57;
  }
  else
  {
    v59 = (*(_QWORD *)&v57 - 1) & 0xE42D19AFCA302E68;
  }
  v60 = *v56;
  v61 = *(_QWORD **)(v60 + 8 * v59);
  if (!v61)
    goto LABEL_85;
  v62 = (_QWORD *)*v61;
  if (!v62)
    goto LABEL_85;
  if (v58.u32[0] < 2uLL)
  {
    while (1)
    {
      v64 = v62[1];
      if (v64 == 0xE42D19AFCA302E68)
      {
        if (v62[2] == 0xE42D19AFCA302E68)
          goto LABEL_82;
      }
      else if ((v64 & (*(_QWORD *)&v57 - 1)) != v59)
      {
        goto LABEL_85;
      }
      v62 = (_QWORD *)*v62;
      if (!v62)
        goto LABEL_85;
    }
  }
  while (2)
  {
    v63 = v62[1];
    if (v63 != 0xE42D19AFCA302E68)
    {
      if (v63 >= *(_QWORD *)&v57)
        v63 %= *(_QWORD *)&v57;
      if (v63 != v59)
        goto LABEL_85;
      goto LABEL_71;
    }
    if (v62[2] != 0xE42D19AFCA302E68)
    {
LABEL_71:
      v62 = (_QWORD *)*v62;
      if (!v62)
        goto LABEL_85;
      continue;
    }
    break;
  }
LABEL_82:
  v65 = v62[5];
  if (*(_QWORD *)(v65 + 8) == 0xE42D19AFCA302E68)
  {
    v66 = *(_QWORD *)(v65 + 32);
    if (v66)
    {
      v67 = *(_BYTE *)(v66 + 112);
      goto LABEL_86;
    }
  }
LABEL_85:
  v67 = 4;
LABEL_86:
  *((_BYTE *)this + 220) = v67;
  if (v58.u32[0] > 1uLL)
  {
    v68 = 0x8E4587A431F9C696;
    if (*(_QWORD *)&v57 <= 0x8E4587A431F9C696)
      v68 = 0x8E4587A431F9C696 % *(_QWORD *)&v57;
  }
  else
  {
    v68 = (*(_QWORD *)&v57 - 1) & 0x8E4587A431F9C696;
  }
  v69 = *(_QWORD **)(v60 + 8 * v68);
  if (!v69)
    goto LABEL_109;
  v70 = (_QWORD *)*v69;
  if (!v70)
    goto LABEL_109;
  if (v58.u32[0] < 2uLL)
  {
    v71 = *(_QWORD *)&v57 - 1;
    while (1)
    {
      v73 = v70[1];
      if (v73 == 0x8E4587A431F9C696)
      {
        if (v70[2] == 0x8E4587A431F9C696)
          goto LABEL_106;
      }
      else if ((v73 & v71) != v68)
      {
        goto LABEL_109;
      }
      v70 = (_QWORD *)*v70;
      if (!v70)
        goto LABEL_109;
    }
  }
  while (2)
  {
    v72 = v70[1];
    if (v72 != 0x8E4587A431F9C696)
    {
      if (v72 >= *(_QWORD *)&v57)
        v72 %= *(_QWORD *)&v57;
      if (v72 != v68)
        goto LABEL_109;
      goto LABEL_95;
    }
    if (v70[2] != 0x8E4587A431F9C696)
    {
LABEL_95:
      v70 = (_QWORD *)*v70;
      if (!v70)
        goto LABEL_109;
      continue;
    }
    break;
  }
LABEL_106:
  v74 = v70[5];
  if (*(_QWORD *)(v74 + 8) == 0x8E4587A431F9C696)
  {
    v75 = *(_QWORD *)(v74 + 32);
    if (v75)
    {
      md::RouteLineContext::elevationSourceContext((md::RouteLineContext *)__p, v75);
      goto LABEL_110;
    }
  }
LABEL_109:
  *(_OWORD *)__p = 0u;
  *(_OWORD *)v99 = 0u;
  v100 = 1065353216;
  v102 = 0;
  v103 = 0;
  v101 = &v102;
LABEL_110:
  if (*((_QWORD *)this + 22))
  {
    v76 = (_QWORD *)*((_QWORD *)this + 21);
    while (v76)
    {
      v85 = v76;
      v76 = (_QWORD *)*v76;
      v86 = (std::__shared_weak_count *)v85[6];
      if (v86)
      {
        v87 = (unint64_t *)&v86->__shared_owners_;
        do
          v88 = __ldaxr(v87);
        while (__stlxr(v88 - 1, v87));
        if (!v88)
        {
          ((void (*)(std::__shared_weak_count *))v86->__on_zero_shared)(v86);
          std::__shared_weak_count::__release_weak(v86);
        }
      }
      operator delete(v85);
    }
    *((_QWORD *)this + 21) = 0;
    v77 = *((_QWORD *)this + 20);
    if (v77)
    {
      for (i = 0; i != v77; ++i)
        *(_QWORD *)(*((_QWORD *)this + 19) + 8 * i) = 0;
    }
    *((_QWORD *)this + 22) = 0;
  }
  v79 = __p[0];
  __p[0] = 0;
  v80 = (void *)*((_QWORD *)this + 19);
  *((_QWORD *)this + 19) = v79;
  if (v80)
    operator delete(v80);
  v81 = (unint64_t)__p[1];
  v82 = v99[0];
  *((void **)this + 21) = v99[0];
  *((_QWORD *)this + 20) = v81;
  __p[1] = 0;
  v83 = v99[1];
  *((void **)this + 22) = v99[1];
  *((_DWORD *)this + 46) = v100;
  if (v83)
  {
    v84 = v82[1];
    if ((v81 & (v81 - 1)) != 0)
    {
      if (v84 >= v81)
        v84 %= v81;
    }
    else
    {
      v84 &= v81 - 1;
    }
    *(_QWORD *)(*((_QWORD *)this + 19) + 8 * v84) = (char *)this + 168;
    v99[0] = 0;
    v99[1] = 0;
  }
  v89 = (char *)this + 200;
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((_QWORD **)this + 25));
  v90 = v102;
  *((_QWORD *)this + 24) = v101;
  *((_QWORD *)this + 25) = v90;
  v91 = v103;
  *((_QWORD *)this + 26) = v103;
  if (v91)
  {
    v90[2] = v89;
    v101 = &v102;
    v102 = 0;
    v103 = 0;
    v90 = 0;
  }
  else
  {
    *((_QWORD *)this + 24) = v89;
  }
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(v90);
  v92 = v99[0];
  if (v99[0])
  {
    do
    {
      v94 = v92;
      v92 = (_QWORD *)*v92;
      v95 = (std::__shared_weak_count *)v94[6];
      if (v95)
      {
        v96 = (unint64_t *)&v95->__shared_owners_;
        do
          v97 = __ldaxr(v96);
        while (__stlxr(v97 - 1, v96));
        if (!v97)
        {
          ((void (*)(std::__shared_weak_count *))v95->__on_zero_shared)(v95);
          std::__shared_weak_count::__release_weak(v95);
        }
      }
      operator delete(v94);
    }
    while (v92);
  }
  v93 = __p[0];
  __p[0] = 0;
  if (v93)
    operator delete(v93);
}

void sub_19F91B02C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t *md::RouteLineContext::elevationSourceContext(md::RouteLineContext *this, uint64_t a2)
{
  uint64_t *v3;

  v3 = (uint64_t *)std::unordered_map<geo::QuadTile,std::shared_ptr<md::FlyoverDsmTileData>,geo::QuadTileHash,std::equal_to<geo::QuadTile>,std::allocator<std::pair<geo::QuadTile const,std::shared_ptr<md::FlyoverDsmTileData>>>>::unordered_map((uint64_t)this, a2 + 8);
  v3[6] = 0;
  v3[5] = (uint64_t)(v3 + 6);
  v3 += 5;
  v3[2] = 0;
  return std::set<unsigned char,std::greater<unsigned char>,std::allocator<unsigned char>>::insert[abi:nn180100]<std::__tree_const_iterator<unsigned char,std::__tree_node<unsigned char,void *> *,long>>(v3, *(_QWORD **)(a2 + 48), (_QWORD *)(a2 + 56));
}

void sub_19F91B09C(_Unwind_Exception *a1)
{
  uint64_t v1;
  _QWORD *v3;
  void *v4;
  _QWORD *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;

  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(_QWORD **)(v1 + 48));
  v3 = *(_QWORD **)(v1 + 16);
  while (v3)
  {
    v5 = v3;
    v3 = (_QWORD *)*v3;
    v6 = (std::__shared_weak_count *)v5[6];
    if (v6)
    {
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
    operator delete(v5);
  }
  v4 = *(void **)v1;
  *(_QWORD *)v1 = 0;
  if (v4)
    operator delete(v4);
  _Unwind_Resume(a1);
}

float ___ZN2md15FadeEffectBlock3runEPNS_15AnimationRunnerE_block_invoke(uint64_t a1, float a2)
{
  float result;

  result = 1.0 - a2;
  **(float **)(a1 + 32) = result;
  return result;
}

void md::TransitTileData::~TransitTileData(md::TransitTileData *this)
{
  md::TransitTileData::~TransitTileData(this);
  JUMPOUT(0x1A1AF4E00);
}

{
  char *v2;
  char *v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  void *v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  _QWORD *v46;
  _QWORD *v47;
  _QWORD *v48;
  void *v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  void *v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  void *v61;
  std::__shared_weak_count *v62;
  unint64_t *v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  void *v67;
  std::__shared_weak_count *v68;
  unint64_t *v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  void *v73;
  std::__shared_weak_count *v74;
  unint64_t *v75;
  unint64_t v76;
  uint64_t v77;
  _QWORD *v78;
  _QWORD *v79;
  void *v80;
  md::TransitTileData *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  void *v86;
  _QWORD *v87;
  _QWORD *v88;
  void *v89;
  std::__shared_weak_count *v90;
  unint64_t *v91;
  unint64_t v92;
  std::__shared_weak_count *v93;
  unint64_t *v94;
  unint64_t v95;
  std::__shared_weak_count *v96;
  unint64_t *v97;
  unint64_t v98;
  std::__shared_weak_count *v99;
  unint64_t *v100;
  unint64_t v101;
  std::__shared_weak_count *v102;
  unint64_t *v103;
  unint64_t v104;
  std::__shared_weak_count *v105;
  unint64_t *v106;
  unint64_t v107;
  std::__shared_weak_count *v108;
  unint64_t *v109;
  unint64_t v110;
  md::TransitTileData *v111;
  uint64_t v112;
  uint64_t v113;
  std::__shared_weak_count *v114;
  unint64_t *v115;
  unint64_t v116;

  *(_QWORD *)this = &off_1E4290FB0;
  *((_QWORD *)this + 79) = &unk_1E4290FF0;
  v2 = (char *)*((_QWORD *)this + 118);
  v3 = (char *)*((_QWORD *)this + 119);
  if (v2 != v3)
  {
    v4 = v3 - v2 - 16;
    if (v4 <= 0xF)
      goto LABEL_7;
    v5 = (v4 >> 4) + 1;
    v6 = (uint64_t *)(v2 + 16);
    v7 = v5 & 0x1FFFFFFFFFFFFFFELL;
    do
    {
      v8 = *(v6 - 2);
      v9 = *v6;
      v6 += 4;
      *(_BYTE *)(v8 + 64) = 2;
      *(_BYTE *)(v9 + 64) = 2;
      v7 -= 2;
    }
    while (v7);
    if (v5 != (v5 & 0x1FFFFFFFFFFFFFFELL))
    {
      v2 += 16 * (v5 & 0x1FFFFFFFFFFFFFFELL);
      do
      {
LABEL_7:
        v10 = *(_QWORD *)v2;
        v2 += 16;
        *(_BYTE *)(v10 + 64) = 2;
      }
      while (v2 != v3);
    }
  }
  v11 = (_QWORD *)*((_QWORD *)this + 159);
  if (v11)
  {
    do
    {
      v46 = (_QWORD *)*v11;
      v47 = (_QWORD *)v11[5];
      if (v47)
      {
        do
        {
          v48 = (_QWORD *)*v47;
          operator delete(v47);
          v47 = v48;
        }
        while (v48);
      }
      v49 = (void *)v11[3];
      v11[3] = 0;
      if (v49)
        operator delete(v49);
      operator delete(v11);
      v11 = v46;
    }
    while (v46);
  }
  v12 = (void *)*((_QWORD *)this + 157);
  *((_QWORD *)this + 157) = 0;
  if (v12)
    operator delete(v12);
  v13 = (std::__shared_weak_count *)*((_QWORD *)this + 155);
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  v16 = *((_QWORD *)this + 152);
  *((_QWORD *)this + 152) = 0;
  if (v16)
    (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
  std::__tree<std::__value_type<md::PatternedLineKey,md::PatternedLineSetup>,std::__map_value_compare<md::PatternedLineKey,std::__value_type<md::PatternedLineKey,md::PatternedLineSetup>,std::less<md::PatternedLineKey>,true>,std::allocator<std::__value_type<md::PatternedLineKey,md::PatternedLineSetup>>>::destroy(*((_QWORD **)this + 150));
  v17 = (std::__shared_weak_count *)*((_QWORD *)this + 148);
  if (v17)
  {
    v18 = (unint64_t *)&v17->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  v20 = (std::__shared_weak_count *)*((_QWORD *)this + 146);
  if (v20)
  {
    v21 = (unint64_t *)&v20->__shared_owners_;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  v23 = (std::__shared_weak_count *)*((_QWORD *)this + 144);
  if (v23)
  {
    v24 = (unint64_t *)&v23->__shared_owners_;
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  v26 = (std::__shared_weak_count *)*((_QWORD *)this + 142);
  if (v26)
  {
    v27 = (unint64_t *)&v26->__shared_owners_;
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
  v29 = *((_QWORD *)this + 140);
  *((_QWORD *)this + 140) = 0;
  if (v29)
  {
    v30 = *(_QWORD *)(v29 + 40);
    *(_QWORD *)(v29 + 40) = 0;
    if (v30)
      MEMORY[0x1A1AF4E00](v30, 0x1000C40451B5BE8);
    v31 = *(_QWORD *)(v29 + 24);
    *(_QWORD *)(v29 + 24) = 0;
    if (v31)
      (*(void (**)(uint64_t))(*(_QWORD *)v31 + 8))(v31);
    v32 = *(void **)v29;
    if (*(_QWORD *)v29)
    {
      *(_QWORD *)(v29 + 8) = v32;
      operator delete(v32);
    }
    MEMORY[0x1A1AF4E00](v29, 0x1020C4024962473);
  }
  v33 = *((_QWORD *)this + 139);
  *((_QWORD *)this + 139) = 0;
  if (v33)
  {
    v34 = *(_QWORD *)(v33 + 40);
    *(_QWORD *)(v33 + 40) = 0;
    if (v34)
      MEMORY[0x1A1AF4E00](v34, 0x1000C40451B5BE8);
    v35 = *(_QWORD *)(v33 + 24);
    *(_QWORD *)(v33 + 24) = 0;
    if (v35)
      (*(void (**)(uint64_t))(*(_QWORD *)v35 + 8))(v35);
    v36 = *(void **)v33;
    if (*(_QWORD *)v33)
    {
      *(_QWORD *)(v33 + 8) = v36;
      operator delete(v36);
    }
    MEMORY[0x1A1AF4E00](v33, 0x1020C4024962473);
  }
  v37 = *((_QWORD *)this + 138);
  *((_QWORD *)this + 138) = 0;
  if (v37)
    (*(void (**)(uint64_t))(*(_QWORD *)v37 + 8))(v37);
  v38 = *((_QWORD *)this + 137);
  *((_QWORD *)this + 137) = 0;
  if (v38)
    (*(void (**)(uint64_t))(*(_QWORD *)v38 + 8))(v38);
  v39 = *((_QWORD *)this + 136);
  *((_QWORD *)this + 136) = 0;
  if (v39)
    (*(void (**)(uint64_t))(*(_QWORD *)v39 + 8))(v39);
  v40 = *((_QWORD *)this + 135);
  *((_QWORD *)this + 135) = 0;
  if (v40)
    (*(void (**)(uint64_t))(*(_QWORD *)v40 + 8))(v40);
  v41 = *((_QWORD *)this + 134);
  *((_QWORD *)this + 134) = 0;
  if (v41)
    (*(void (**)(uint64_t))(*(_QWORD *)v41 + 8))(v41);
  v42 = *((_QWORD *)this + 133);
  *((_QWORD *)this + 133) = 0;
  if (v42)
    (*(void (**)(uint64_t))(*(_QWORD *)v42 + 8))(v42);
  v43 = *((_QWORD *)this + 130);
  if (v43)
  {
    v44 = *((_QWORD *)this + 131);
    v45 = (void *)*((_QWORD *)this + 130);
    if (v44 != v43)
    {
      do
      {
        v50 = *(std::__shared_weak_count **)(v44 - 8);
        if (v50)
        {
          v51 = (unint64_t *)&v50->__shared_owners_;
          do
            v52 = __ldaxr(v51);
          while (__stlxr(v52 - 1, v51));
          if (!v52)
          {
            ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
            std::__shared_weak_count::__release_weak(v50);
          }
        }
        v44 -= 16;
      }
      while (v44 != v43);
      v45 = (void *)*((_QWORD *)this + 130);
    }
    *((_QWORD *)this + 131) = v43;
    operator delete(v45);
  }
  v53 = *((_QWORD *)this + 127);
  if (v53)
  {
    v54 = *((_QWORD *)this + 128);
    v55 = (void *)*((_QWORD *)this + 127);
    if (v54 != v53)
    {
      do
      {
        v56 = *(std::__shared_weak_count **)(v54 - 8);
        if (v56)
        {
          v57 = (unint64_t *)&v56->__shared_owners_;
          do
            v58 = __ldaxr(v57);
          while (__stlxr(v58 - 1, v57));
          if (!v58)
          {
            ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
            std::__shared_weak_count::__release_weak(v56);
          }
        }
        v54 -= 16;
      }
      while (v54 != v53);
      v55 = (void *)*((_QWORD *)this + 127);
    }
    *((_QWORD *)this + 128) = v53;
    operator delete(v55);
  }
  v59 = *((_QWORD *)this + 124);
  if (v59)
  {
    v60 = *((_QWORD *)this + 125);
    v61 = (void *)*((_QWORD *)this + 124);
    if (v60 != v59)
    {
      do
      {
        v62 = *(std::__shared_weak_count **)(v60 - 8);
        if (v62)
        {
          v63 = (unint64_t *)&v62->__shared_owners_;
          do
            v64 = __ldaxr(v63);
          while (__stlxr(v64 - 1, v63));
          if (!v64)
          {
            ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
            std::__shared_weak_count::__release_weak(v62);
          }
        }
        v60 -= 16;
      }
      while (v60 != v59);
      v61 = (void *)*((_QWORD *)this + 124);
    }
    *((_QWORD *)this + 125) = v59;
    operator delete(v61);
  }
  v65 = *((_QWORD *)this + 121);
  if (v65)
  {
    v66 = *((_QWORD *)this + 122);
    v67 = (void *)*((_QWORD *)this + 121);
    if (v66 != v65)
    {
      do
      {
        v68 = *(std::__shared_weak_count **)(v66 - 8);
        if (v68)
        {
          v69 = (unint64_t *)&v68->__shared_owners_;
          do
            v70 = __ldaxr(v69);
          while (__stlxr(v70 - 1, v69));
          if (!v70)
          {
            ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
            std::__shared_weak_count::__release_weak(v68);
          }
        }
        v66 -= 16;
      }
      while (v66 != v65);
      v67 = (void *)*((_QWORD *)this + 121);
    }
    *((_QWORD *)this + 122) = v65;
    operator delete(v67);
  }
  v71 = *((_QWORD *)this + 118);
  if (v71)
  {
    v72 = *((_QWORD *)this + 119);
    v73 = (void *)*((_QWORD *)this + 118);
    if (v72 != v71)
    {
      do
      {
        v74 = *(std::__shared_weak_count **)(v72 - 8);
        if (v74)
        {
          v75 = (unint64_t *)&v74->__shared_owners_;
          do
            v76 = __ldaxr(v75);
          while (__stlxr(v76 - 1, v75));
          if (!v76)
          {
            ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
            std::__shared_weak_count::__release_weak(v74);
          }
        }
        v72 -= 16;
      }
      while (v72 != v71);
      v73 = (void *)*((_QWORD *)this + 118);
    }
    *((_QWORD *)this + 119) = v71;
    operator delete(v73);
  }
  v77 = *((_QWORD *)this + 117);
  *((_QWORD *)this + 117) = 0;
  if (v77)
  {
    v78 = *(_QWORD **)(v77 + 16);
    if (v78)
    {
      do
      {
        v79 = (_QWORD *)*v78;
        md::TransitJunction::~TransitJunction((md::TransitJunction *)(v78 + 3));
        operator delete(v78);
        v78 = v79;
      }
      while (v79);
    }
    v80 = *(void **)v77;
    *(_QWORD *)v77 = 0;
    if (v80)
      operator delete(v80);
    MEMORY[0x1A1AF4E00](v77, 0x10A0C408EF24B1CLL);
  }
  if (*((_QWORD *)this + 116))
  {
    v81 = (md::TransitTileData *)*((_QWORD *)this + 115);
    v82 = *((_QWORD *)this + 114);
    v83 = *(_QWORD *)v81;
    *(_QWORD *)(v83 + 8) = *(_QWORD *)(v82 + 8);
    **(_QWORD **)(v82 + 8) = v83;
    *((_QWORD *)this + 116) = 0;
    if (v81 != (md::TransitTileData *)((char *)this + 912))
    {
      do
      {
        v111 = (md::TransitTileData *)*((_QWORD *)v81 + 1);
        v112 = *((_QWORD *)v81 + 8);
        *((_QWORD *)v81 + 8) = 0;
        if (v112)
          (*(void (**)(uint64_t))(*(_QWORD *)v112 + 8))(v112);
        v113 = *((_QWORD *)v81 + 7);
        *((_QWORD *)v81 + 7) = 0;
        if (v113)
          (*(void (**)(uint64_t))(*(_QWORD *)v113 + 8))(v113);
        v114 = (std::__shared_weak_count *)*((_QWORD *)v81 + 4);
        if (v114)
        {
          v115 = (unint64_t *)&v114->__shared_owners_;
          do
            v116 = __ldaxr(v115);
          while (__stlxr(v116 - 1, v115));
          if (!v116)
          {
            ((void (*)(std::__shared_weak_count *))v114->__on_zero_shared)(v114);
            std::__shared_weak_count::__release_weak(v114);
          }
        }
        operator delete(v81);
        v81 = v111;
      }
      while (v111 != (md::TransitTileData *)((char *)this + 912));
    }
  }
  v84 = *((_QWORD *)this + 111);
  if (v84)
  {
    v85 = *((_QWORD *)this + 112);
    v86 = (void *)*((_QWORD *)this + 111);
    if (v85 != v84)
    {
      do
        md::TransitLink::~TransitLink((md::TransitLink *)(v85 - 248));
      while (v85 != v84);
      v86 = (void *)*((_QWORD *)this + 111);
    }
    *((_QWORD *)this + 112) = v84;
    operator delete(v86);
  }
  v87 = (_QWORD *)*((_QWORD *)this + 108);
  if (v87)
  {
    v88 = (_QWORD *)*((_QWORD *)this + 109);
    v89 = (void *)*((_QWORD *)this + 108);
    if (v88 != v87)
    {
      do
      {
        v88 -= 13;
        std::__destroy_at[abi:nn180100]<md::TransitLine,0>(v88);
      }
      while (v88 != v87);
      v89 = (void *)*((_QWORD *)this + 108);
    }
    *((_QWORD *)this + 109) = v87;
    operator delete(v89);
  }
  v90 = (std::__shared_weak_count *)*((_QWORD *)this + 107);
  if (v90)
  {
    v91 = (unint64_t *)&v90->__shared_owners_;
    do
      v92 = __ldaxr(v91);
    while (__stlxr(v92 - 1, v91));
    if (!v92)
    {
      ((void (*)(std::__shared_weak_count *))v90->__on_zero_shared)(v90);
      std::__shared_weak_count::__release_weak(v90);
    }
  }
  v93 = (std::__shared_weak_count *)*((_QWORD *)this + 105);
  if (v93)
  {
    v94 = (unint64_t *)&v93->__shared_owners_;
    do
      v95 = __ldaxr(v94);
    while (__stlxr(v95 - 1, v94));
    if (!v95)
    {
      ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
      std::__shared_weak_count::__release_weak(v93);
    }
  }
  v96 = (std::__shared_weak_count *)*((_QWORD *)this + 103);
  if (v96)
  {
    v97 = (unint64_t *)&v96->__shared_owners_;
    do
      v98 = __ldaxr(v97);
    while (__stlxr(v98 - 1, v97));
    if (!v98)
    {
      ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
      std::__shared_weak_count::__release_weak(v96);
    }
  }
  v99 = (std::__shared_weak_count *)*((_QWORD *)this + 101);
  if (v99)
  {
    v100 = (unint64_t *)&v99->__shared_owners_;
    do
      v101 = __ldaxr(v100);
    while (__stlxr(v101 - 1, v100));
    if (!v101)
    {
      ((void (*)(std::__shared_weak_count *))v99->__on_zero_shared)(v99);
      std::__shared_weak_count::__release_weak(v99);
    }
  }
  v102 = (std::__shared_weak_count *)*((_QWORD *)this + 99);
  if (v102)
  {
    v103 = (unint64_t *)&v102->__shared_owners_;
    do
      v104 = __ldaxr(v103);
    while (__stlxr(v104 - 1, v103));
    if (!v104)
    {
      ((void (*)(std::__shared_weak_count *))v102->__on_zero_shared)(v102);
      std::__shared_weak_count::__release_weak(v102);
    }
  }
  *((_QWORD *)this + 94) = &off_1E42B4D50;

  v105 = (std::__shared_weak_count *)*((_QWORD *)this + 93);
  if (v105)
  {
    v106 = (unint64_t *)&v105->__shared_owners_;
    do
      v107 = __ldaxr(v106);
    while (__stlxr(v107 - 1, v106));
    if (!v107)
    {
      ((void (*)(std::__shared_weak_count *))v105->__on_zero_shared)(v105);
      std::__shared_weak_count::__release_weak(v105);
    }
  }
  v108 = (std::__shared_weak_count *)*((_QWORD *)this + 91);
  if (v108)
  {
    v109 = (unint64_t *)&v108->__shared_owners_;
    do
      v110 = __ldaxr(v109);
    while (__stlxr(v110 - 1, v109));
    if (!v110)
    {
      ((void (*)(std::__shared_weak_count *))v108->__on_zero_shared)(v108);
      std::__shared_weak_count::__release_weak(v108);
    }
  }
  md::MapTileData::~MapTileData(this);
}

void std::__tree<std::__value_type<md::PatternedLineKey,md::PatternedLineSetup>,std::__map_value_compare<md::PatternedLineKey,std::__value_type<md::PatternedLineKey,md::PatternedLineSetup>,std::less<md::PatternedLineKey>,true>,std::allocator<std::__value_type<md::PatternedLineKey,md::PatternedLineSetup>>>::destroy(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;

  if (a1)
  {
    std::__tree<std::__value_type<md::PatternedLineKey,md::PatternedLineSetup>,std::__map_value_compare<md::PatternedLineKey,std::__value_type<md::PatternedLineKey,md::PatternedLineSetup>,std::less<md::PatternedLineKey>,true>,std::allocator<std::__value_type<md::PatternedLineKey,md::PatternedLineSetup>>>::destroy(*a1);
    std::__tree<std::__value_type<md::PatternedLineKey,md::PatternedLineSetup>,std::__map_value_compare<md::PatternedLineKey,std::__value_type<md::PatternedLineKey,md::PatternedLineSetup>,std::less<md::PatternedLineKey>,true>,std::allocator<std::__value_type<md::PatternedLineKey,md::PatternedLineSetup>>>::destroy(a1[1]);
    v2 = (std::__shared_weak_count *)a1[11];
    if (v2)
    {
      p_shared_owners = (unint64_t *)&v2->__shared_owners_;
      do
        v4 = __ldaxr(p_shared_owners);
      while (__stlxr(v4 - 1, p_shared_owners));
      if (!v4)
      {
        ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
        std::__shared_weak_count::__release_weak(v2);
      }
    }
    v5 = (std::__shared_weak_count *)a1[9];
    if (v5)
    {
      v6 = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldaxr(v6);
      while (__stlxr(v7 - 1, v6));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    v8 = (std::__shared_weak_count *)a1[7];
    if (v8)
    {
      v9 = (unint64_t *)&v8->__shared_owners_;
      do
        v10 = __ldaxr(v9);
      while (__stlxr(v10 - 1, v9));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
    operator delete(a1);
  }
}

void md::TransitJunction::~TransitJunction(md::TransitJunction *this)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;
  _QWORD *v5;
  _QWORD *v6;
  void *v7;
  _QWORD *v8;
  _QWORD *v9;
  void *v10;

  v2 = (_QWORD *)*((_QWORD *)this + 23);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = (void *)*((_QWORD *)this + 21);
  *((_QWORD *)this + 21) = 0;
  if (v4)
    operator delete(v4);
  v5 = (_QWORD *)*((_QWORD *)this + 18);
  if (v5)
  {
    do
    {
      v6 = (_QWORD *)*v5;
      operator delete(v5);
      v5 = v6;
    }
    while (v6);
  }
  v7 = (void *)*((_QWORD *)this + 16);
  *((_QWORD *)this + 16) = 0;
  if (v7)
    operator delete(v7);
  v8 = (_QWORD *)*((_QWORD *)this + 13);
  if (v8)
  {
    do
    {
      v9 = (_QWORD *)*v8;
      operator delete(v8);
      v8 = v9;
    }
    while (v9);
  }
  v10 = (void *)*((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = 0;
  if (v10)
    operator delete(v10);
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((_QWORD **)this + 7));
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((_QWORD **)this + 4));
}

void std::__destroy_at[abi:nn180100]<md::TransitLine,0>(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;

  v2 = a1[8];
  if (v2)
  {
    v3 = a1[9];
    v4 = (void *)a1[8];
    if (v3 != v2)
    {
      do
      {
        v5 = *(_QWORD *)(v3 - 72);
        if (v5)
        {
          *(_QWORD *)(v3 - 64) = v5;
          (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 - 48) + 40))(*(_QWORD *)(v3 - 48), v5, *(_QWORD *)(v3 - 56) - v5);
        }
        v6 = *(std::__shared_weak_count **)(v3 - 176);
        if (v6)
        {
          p_shared_owners = (unint64_t *)&v6->__shared_owners_;
          do
            v8 = __ldaxr(p_shared_owners);
          while (__stlxr(v8 - 1, p_shared_owners));
          if (!v8)
          {
            ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
            std::__shared_weak_count::__release_weak(v6);
          }
        }
        v3 -= 184;
      }
      while (v3 != v2);
      v4 = (void *)a1[8];
    }
    a1[9] = v2;
    operator delete(v4);
  }
  v9 = (std::__shared_weak_count *)a1[1];
  if (v9)
  {
    v10 = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
}

uint64_t md::TransitTileData::createFeatures(geo::codec::VectorTile **this)
{
  geo::codec::VectorTile **v1;
  unint64_t v2;
  uint64_t v3;
  geo::codec::VectorTile *v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  geo::codec::VectorTile *v8;
  geo::codec::VectorTile *v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t **v13;
  geo::codec::VectorTile *v14;
  geo::codec::VectorTile *v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  char *v23;
  char *v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t *v27;
  geo::codec::VectorTile *v28;
  const md::TransitLink *v29;
  char *v30;
  md::TransitLink *v31;
  geo::codec::VectorTile *v32;
  md::TransitLink *v33;
  float *v34;
  uint64_t *v35;
  geo::codec::VectorTile *v36;
  geo::codec::VectorTile *v37;
  geo::codec::VectorTile *v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  char *v43;
  md::TransitLink *v44;
  const md::TransitLink *v45;
  const md::TransitLink *v46;
  md::TransitLink *v47;
  geo::codec::VectorTile *v48;
  uint64_t v49;
  _QWORD *v50;
  char *v51;
  unint64_t v52;
  uint64_t *v53;
  float v54;
  uint64_t v55;
  _QWORD *v56;
  _QWORD *v57;
  unint64_t v58;
  unint64_t v59;
  _QWORD *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  unint64_t v66;
  char *v67;
  char *v68;
  unint64_t v69;
  uint64_t v70;
  char *v71;
  _OWORD *v72;
  uint64_t v73;
  __int128 v74;
  uint64_t v75;
  char *v76;
  char *v77;
  char *v78;
  _QWORD *v79;
  _QWORD *v80;
  BOOL v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  unint64_t v86;
  uint8x8_t v87;
  _QWORD *v88;
  _QWORD *v89;
  unint64_t v90;
  uint64_t v91;
  _QWORD *v92;
  float v93;
  float v94;
  _BOOL8 v95;
  unint64_t v96;
  unint64_t v97;
  size_t prime;
  unint64_t v99;
  uint8x8_t v100;
  uint64_t v101;
  uint64_t v102;
  _QWORD *v103;
  unint64_t v104;
  uint64_t v105;
  __int128 v106;
  geo::codec::VectorTile *v107;
  geo::codec::VectorTile *v108;
  _QWORD *v109;
  unint64_t v110;
  unint64_t v111;
  char *v112;
  char *v113;
  __n128 *v114;
  __n128 *v115;
  _QWORD *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  char *v121;
  _QWORD *v122;
  _QWORD *v123;
  _QWORD *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  char *v128;
  _QWORD *v129;
  _QWORD *v130;
  unint64_t v131;
  float *v132;
  unint64_t v133;
  unint64_t v134;
  _QWORD *v135;
  unint64_t v136;
  uint64_t v137;
  uint64_t *v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  float32x2_t *v142;
  float32x2_t v143;
  float32x2_t v144;
  float32x2_t *v145;
  float32x2_t *v146;
  uint64_t v147;
  int v148;
  float v149;
  float32x2_t v150;
  float v151;
  float32_t v152;
  float32x2_t v153;
  float32x2_t v154;
  float v155;
  float v156;
  float v157;
  float v158;
  float v159;
  float v160;
  float v161;
  float *v162;
  float *v163;
  unint64_t v164;
  char *v165;
  char *v166;
  char *v167;
  uint64_t v168;
  unint64_t v169;
  uint64_t v170;
  unint64_t v171;
  char *v172;
  float *v173;
  float *v174;
  uint64_t v175;
  int v176;
  char *v177;
  unint64_t v178;
  float *v179;
  float *v180;
  uint64_t v181;
  unint64_t v182;
  uint64_t v183;
  unint64_t v184;
  char *v185;
  float *v186;
  uint64_t v187;
  uint64_t v188;
  int v189;
  char *v190;
  unint64_t v191;
  const std::nothrow_t *v192;
  unint64_t v193;
  char *v194;
  __n128 v195;
  char *v196;
  uint64_t *v197;
  __n128 *v198;
  unint64_t v199;
  float *v200;
  float *v201;
  unint64_t v202;
  float *v203;
  float *v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  unint64_t v208;
  int8x8_t v209;
  unint64_t v210;
  unint64_t v211;
  unint64_t v212;
  unint64_t v213;
  _QWORD *v214;
  _QWORD *v215;
  uint64_t v216;
  unint64_t v217;
  uint64_t v218;
  uint64_t **v219;
  uint64_t **v220;
  unint64_t v221;
  unint64_t v222;
  uint64_t v223;
  int8x8_t v224;
  uint8x8_t v225;
  unint64_t v226;
  _QWORD *v227;
  _QWORD *v228;
  uint64_t v229;
  uint64_t v230;
  unint64_t v231;
  _DWORD *v232;
  _QWORD *v233;
  _QWORD *v234;
  unint64_t v235;
  _QWORD *v236;
  unint64_t v237;
  unint64_t v238;
  unint64_t v239;
  int8x8_t v240;
  unint64_t v241;
  _QWORD *v242;
  _QWORD *v243;
  uint64_t v244;
  unint64_t v245;
  uint64_t v246;
  unint64_t v247;
  unint64_t v248;
  void **v249;
  _QWORD *v250;
  unint64_t v251;
  uint64_t v252;
  _QWORD *v253;
  float v254;
  _BOOL8 v255;
  unint64_t v256;
  unint64_t v257;
  size_t v258;
  unint64_t v259;
  uint64_t v260;
  uint64_t v261;
  _QWORD *v262;
  unint64_t v263;
  char *v264;
  void *v265;
  char *v266;
  _QWORD *v267;
  uint64_t v268;
  _QWORD *v269;
  _QWORD *v270;
  _QWORD *v271;
  _QWORD *v272;
  _QWORD *v273;
  uint64_t v274;
  _QWORD *v275;
  _QWORD *v276;
  _QWORD *v277;
  int32x2_t v278;
  __int128 v279;
  _QWORD *v280;
  uint64_t v281;
  size_t v282;
  char *v283;
  char *v284;
  _QWORD *v285;
  unint64_t v286;
  __int128 v287;
  unint64_t v288;
  unint64_t v289;
  uint64_t v290;
  unint64_t v291;
  float v292;
  int32x2_t v293;
  float v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  _BOOL4 v298;
  _QWORD *v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  float32x2_t *v303;
  float32x2_t v304;
  float32x2_t v305;
  float32x2_t *v306;
  float32x2_t *v307;
  uint64_t v308;
  unint64_t *v309;
  uint64_t v310;
  void *v311;
  float **v312;
  unint64_t *v313;
  uint64_t v314;
  void *v315;
  float *v316;
  uint64_t v317;
  float *v318;
  float **v319;
  uint64_t v320;
  float v321;
  float v322;
  float v323;
  float v324;
  float v325;
  unint64_t v326;
  float v327;
  float v328;
  float v329;
  unint64_t v330;
  unint64_t v331;
  float *v332;
  float v333;
  float v334;
  unint64_t v335;
  float v336;
  float v337;
  float v338;
  float v339;
  float *v340;
  float v341;
  float v342;
  float v343;
  float v344;
  float v345;
  int v346;
  int v347;
  unint64_t v348;
  float v349;
  unint64_t v350;
  unint64_t v351;
  float *v352;
  float v353;
  float v354;
  unint64_t v355;
  float v356;
  float v357;
  float v358;
  float v359;
  float *v360;
  float v361;
  float v362;
  float v363;
  float v364;
  float v365;
  char v366;
  char v367;
  float v368;
  float v369;
  float v370;
  float v371;
  float v372;
  float v373;
  float *v374;
  float v375;
  float *v376;
  float v377;
  float v378;
  float v379;
  unint64_t v380;
  unint64_t v381;
  float *v382;
  float v383;
  unint64_t v384;
  float v385;
  float v386;
  float v387;
  float v388;
  float v389;
  float v390;
  float v391;
  float v392;
  float v393;
  float v394;
  char v395;
  unint64_t v396;
  unint64_t v397;
  float *v398;
  float v399;
  float v400;
  float v401;
  float v402;
  float v403;
  float v404;
  float v405;
  float v406;
  float v407;
  float v408;
  float v409;
  float v410;
  float v411;
  float *v412;
  float v413;
  float v414;
  float v415;
  float v416;
  float *v417;
  float v418;
  float v419;
  float v420;
  float v421;
  float v422;
  float v423;
  float v424;
  float v425;
  BOOL v426;
  float v427;
  float v428;
  float v429;
  float v430;
  float v431;
  float v432;
  float v433;
  float v434;
  float v435;
  float v436;
  float v437;
  float v438;
  float v439;
  float v440;
  float v441;
  float v442;
  float v443;
  float v444;
  float v445;
  float v446;
  float v447;
  float v448;
  float v449;
  float v450;
  float v451;
  float v452;
  float v453;
  float v454;
  float v455;
  float v456;
  float v457;
  BOOL v458;
  float v459;
  uint64_t v460;
  uint64_t v461;
  void *v462;
  uint64_t v463;
  _DWORD *v464;
  _DWORD *v465;
  geo::codec::VectorTile *v466;
  _QWORD *v467;
  _QWORD *v468;
  void *v469;
  geo::codec::VectorTile *v470;
  geo::codec::VectorTile *v471;
  geo::codec::VectorTile *v472;
  _BYTE *v473;
  _BYTE *v474;
  _BYTE *v475;
  float v476;
  uint64_t v477;
  float v478;
  float v479;
  float v480;
  float v481;
  unint64_t v482;
  unint64_t v483;
  _BYTE *v484;
  uint64_t v485;
  float *v486;
  BOOL v487;
  uint64_t v488;
  uint64_t v489;
  id v490;
  uint64_t result;
  uint64_t v492;
  uint64_t v493;
  uint64_t v494;
  geo::codec::VectorTile *v495;
  geo::codec::VectorTile *v496;
  uint64_t v497;
  _QWORD *v498;
  _QWORD *v499;
  _QWORD *v500;
  _QWORD *v501;
  uint64_t *v502;
  _QWORD *v503;
  float32x2_t v504;
  __int128 v505;
  md::TransitTileData *v506;
  __n128 *v507;
  geo::codec::VectorTile **v508;
  _QWORD *v509;
  unint64_t v510;
  float *v511;
  float *v512;
  uint64_t *v513;
  unint64_t v514;
  __n128 *v515;
  _QWORD *__p;
  char *__pa;
  void *v518;
  __n128 *v519;
  geo::codec::VectorTile **v520;
  uint64_t v521;
  _QWORD *v522;
  unint64_t v523;
  __int128 v524;
  __int128 v525;
  geo::codec::VectorTile **v526;
  _QWORD v527[2];

  v1 = this;
  v2 = geo::codec::VectorTile::transitLineCount(this[90]);
  v3 = geo::codec::VectorTile::transitLines(v1[90]);
  v520 = v1 + 110;
  v4 = v1[108];
  if (0x4EC4EC4EC4EC4EC5 * ((v1[110] - v4) >> 3) < v2)
  {
    if (v2 > 0x276276276276276)
      goto LABEL_726;
    v5 = (uint64_t)v1[109];
    v526 = v1 + 110;
    v6 = (char *)operator new(104 * v2);
    v7 = (uint64_t)&v6[v5 - (_QWORD)v4];
    *(_QWORD *)&v524 = v6;
    *((_QWORD *)&v524 + 1) = v7;
    v8 = (geo::codec::VectorTile *)&v6[104 * v2];
    *(_QWORD *)&v525 = v7;
    *((_QWORD *)&v525 + 1) = v8;
    if ((geo::codec::VectorTile *)v5 == v4)
    {
      v1[108] = (geo::codec::VectorTile *)v7;
      v1[109] = (geo::codec::VectorTile *)v7;
      v1[110] = v8;
      if (v4)
LABEL_8:
        operator delete(v4);
    }
    else
    {
      do
      {
        v5 -= 104;
        v7 = std::construct_at[abi:nn180100]<md::TransitLine,md::TransitLine,md::TransitLine*>(v7 - 104, v5);
      }
      while ((geo::codec::VectorTile *)v5 != v4);
      v4 = v1[108];
      v9 = v1[109];
      v1[108] = (geo::codec::VectorTile *)v7;
      *(_OWORD *)(v1 + 109) = v525;
      while (v9 != v4)
      {
        v9 = (geo::codec::VectorTile *)((char *)v9 - 104);
        std::__destroy_at[abi:nn180100]<md::TransitLine,0>(v9);
      }
      if (v4)
        goto LABEL_8;
    }
  }
  v506 = (md::TransitTileData *)v1;
  if (v2)
  {
    v10 = 0;
    v11 = (unint64_t *)(v1 + 109);
    v12 = (unint64_t)v1[109];
    do
    {
      v13 = (uint64_t **)v1[100];
      v14 = v1[110];
      if (v12 < (unint64_t)v14)
      {
        md::TransitLine::TransitLine(v12, v3 + 104 * v10, (uint64_t **)v1[100], (uint64_t)v1[92], (uint64_t)v1[93]);
        v12 += 104;
        *v11 = v12;
      }
      else
      {
        v15 = v1[108];
        v16 = 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(v12 - (_QWORD)v15) >> 3);
        v17 = v16 + 1;
        if ((unint64_t)(v16 + 1) > 0x276276276276276)
          goto LABEL_726;
        v18 = 0x4EC4EC4EC4EC4EC5 * ((v14 - v15) >> 3);
        if (2 * v18 > v17)
          v17 = 2 * v18;
        if (v18 >= 0x13B13B13B13B13BLL)
          v19 = 0x276276276276276;
        else
          v19 = v17;
        v526 = v520;
        if (v19)
        {
          if (v19 > 0x276276276276276)
LABEL_723:
            std::__throw_bad_array_new_length[abi:nn180100]();
          v20 = (char *)operator new(104 * v19);
        }
        else
        {
          v20 = 0;
        }
        *(_QWORD *)&v524 = v20;
        *((_QWORD *)&v524 + 1) = &v20[104 * v16];
        *(_QWORD *)&v525 = *((_QWORD *)&v524 + 1);
        *((_QWORD *)&v525 + 1) = &v20[104 * v19];
        v1 = (geo::codec::VectorTile **)v506;
        md::TransitLine::TransitLine(*((uint64_t *)&v524 + 1), v3 + 104 * v10, v13, *((_QWORD *)v506 + 92), *((_QWORD *)v506 + 93));
        v21 = *((_QWORD *)&v524 + 1);
        v12 = *((_QWORD *)&v524 + 1) + 104;
        *(_QWORD *)&v525 = *((_QWORD *)&v524 + 1) + 104;
        v22 = (char *)*((_QWORD *)v506 + 109);
        v23 = (char *)*((_QWORD *)v506 + 108);
        if (v22 != v23)
        {
          do
          {
            v22 -= 104;
            v21 = std::construct_at[abi:nn180100]<md::TransitLine,md::TransitLine,md::TransitLine*>(v21 - 104, (uint64_t)v22);
          }
          while (v22 != v23);
          v22 = (char *)*((_QWORD *)v506 + 108);
          v24 = (char *)*((_QWORD *)v506 + 109);
          *((_QWORD *)v506 + 108) = v21;
          v25 = v525;
          *(_OWORD *)v11 = v525;
          v12 = v25;
          while (v24 != v22)
          {
            v24 -= 104;
            std::__destroy_at[abi:nn180100]<md::TransitLine,0>(v24);
          }
          if (!v22)
            goto LABEL_12;
LABEL_31:
          operator delete(v22);
          goto LABEL_12;
        }
        *((_QWORD *)v506 + 108) = *((_QWORD *)&v524 + 1);
        *((_QWORD *)v506 + 109) = v12;
        *((_QWORD *)v506 + 110) = *((_QWORD *)&v525 + 1);
        if (v22)
          goto LABEL_31;
      }
LABEL_12:
      *v11 = v12;
      ++v10;
    }
    while (v10 != v2);
  }
  v26 = geo::codec::VectorTile::transitLinkCount(v1[90]);
  v27 = (uint64_t *)geo::codec::VectorTile::transitLinks(v1[90]);
  v508 = v1 + 113;
  v28 = v1[111];
  if (0xEF7BDEF7BDEF7BDFLL * ((v1[113] - v28) >> 3) >= v26)
    goto LABEL_40;
  if (v26 > 0x108421084210842)
LABEL_726:
    abort();
  v29 = v1[112];
  v526 = v1 + 113;
  v30 = (char *)operator new(248 * v26);
  v31 = (md::TransitLink *)&v30[v29 - v28];
  *(_QWORD *)&v524 = v30;
  *((_QWORD *)&v524 + 1) = v31;
  v32 = (geo::codec::VectorTile *)&v30[248 * v26];
  *(_QWORD *)&v525 = v31;
  *((_QWORD *)&v525 + 1) = v32;
  if (v29 == v28)
  {
    v1[111] = v31;
    v1[112] = v31;
    v1[113] = v32;
    if (!v28)
      goto LABEL_40;
  }
  else
  {
    do
    {
      v29 = (const md::TransitLink *)((char *)v29 - 248);
      v31 = md::TransitLink::TransitLink((md::TransitLink *)((char *)v31 - 248), v29);
    }
    while (v29 != v28);
    v28 = v1[111];
    v33 = v1[112];
    v1[111] = v31;
    *((_OWORD *)v1 + 56) = v525;
    while (v33 != v28)
    {
      v33 = (md::TransitLink *)((char *)v33 - 248);
      md::TransitLink::~TransitLink(v33);
    }
    if (!v28)
      goto LABEL_40;
  }
  operator delete(v28);
LABEL_40:
  if (v26)
  {
    v34 = 0;
    v510 = v26;
    do
    {
      v35 = (uint64_t *)v1[112];
      v36 = v1[113];
      v512 = v34;
      v513 = v27;
      if (v35 < (uint64_t *)v36)
      {
        md::TransitLink::TransitLink(v35, v27);
        v37 = (geo::codec::VectorTile *)(v35 + 31);
        v1[112] = (geo::codec::VectorTile *)(v35 + 31);
        goto LABEL_61;
      }
      v38 = v1[111];
      v39 = 0xEF7BDEF7BDEF7BDFLL * (((char *)v35 - (char *)v38) >> 3);
      v40 = v39 + 1;
      if (v39 + 1 > 0x108421084210842)
        goto LABEL_726;
      v41 = 0xEF7BDEF7BDEF7BDFLL * ((v36 - v38) >> 3);
      if (2 * v41 > v40)
        v40 = 2 * v41;
      if (v41 >= 0x84210842108421)
        v42 = 0x108421084210842;
      else
        v42 = v40;
      v526 = v508;
      if (v42)
      {
        if (v42 > 0x108421084210842)
          goto LABEL_723;
        v43 = (char *)operator new(248 * v42);
      }
      else
      {
        v43 = 0;
      }
      *(_QWORD *)&v524 = v43;
      *((_QWORD *)&v524 + 1) = &v43[248 * v39];
      *(_QWORD *)&v525 = *((_QWORD *)&v524 + 1);
      *((_QWORD *)&v525 + 1) = &v43[248 * v42];
      md::TransitLink::TransitLink(*((uint64_t **)&v524 + 1), v27);
      v44 = (md::TransitLink *)*((_QWORD *)&v524 + 1);
      v37 = (geo::codec::VectorTile *)(v525 + 248);
      *(_QWORD *)&v525 = v525 + 248;
      v45 = v1[112];
      v46 = v1[111];
      if (v45 == v46)
      {
        v1[111] = (geo::codec::VectorTile *)*((_QWORD *)&v524 + 1);
        v1[112] = v37;
        v1[113] = (geo::codec::VectorTile *)*((_QWORD *)&v525 + 1);
        if (v45)
          goto LABEL_60;
      }
      else
      {
        do
        {
          v45 = (const md::TransitLink *)((char *)v45 - 248);
          v44 = md::TransitLink::TransitLink((md::TransitLink *)((char *)v44 - 248), v45);
        }
        while (v45 != v46);
        v45 = v1[111];
        v47 = v1[112];
        v1[111] = v44;
        v48 = (geo::codec::VectorTile *)v525;
        *((_OWORD *)v1 + 56) = v525;
        v37 = v48;
        while (v47 != v45)
        {
          v47 = (md::TransitLink *)((char *)v47 - 248);
          md::TransitLink::~TransitLink(v47);
        }
        if (v45)
LABEL_60:
          operator delete(v45);
      }
LABEL_61:
      v1[112] = v37;
      v521 = geo::codec::VectorTile::transitLines(*((geo::codec::VectorTile **)v37 - 30));
      v49 = geo::codec::VectorTile::transitLinkLineMinZoomOverrides(*((geo::codec::VectorTile **)v37 - 30));
      v51 = (char *)v37 - 248;
      v50 = (_QWORD *)*((_QWORD *)v37 - 31);
      if (v50[4])
      {
        v52 = 0;
        v53 = (uint64_t *)((char *)v37 - 72);
        __p = (_QWORD *)((char *)v37 - 56);
        v518 = (void *)v49;
        do
        {
          *(_QWORD *)&v524 = 0;
          v527[0] = 0;
          geo::codec::transitLinkExtractLineInfo(v50, v52, (uint64_t *)&v524, v527);
          if (v49)
            v54 = *(float *)(v49 + 4 * (*(_QWORD *)(*(_QWORD *)v51 + 24) + v52));
          else
            v54 = 0.0;
          v55 = *((_QWORD *)v506 + 108) + v524 - v521;
          v56 = operator new(0x48uLL);
          v57 = v56;
          *v56 = 1;
          v56[1] = v55;
          v56[2] = v51;
          *((float *)v56 + 6) = fmaxf(*(float *)(*(_QWORD *)(v55 + 16) + 88), v54);
          *((_DWORD *)v56 + 7) = 0;
          v56[4] = 0;
          *((_DWORD *)v56 + 10) = -1;
          *((_DWORD *)v56 + 11) = v52;
          v56[6] = 0xFFFFFFFF00000000;
          *((_DWORD *)v56 + 14) = -1;
          *((_DWORD *)v56 + 15) = 0;
          *((_BYTE *)v56 + 64) = 0;
          *((_BYTE *)v56 + 65) = 1;
          v59 = *((_QWORD *)v37 - 20);
          v58 = *((_QWORD *)v37 - 19);
          if (v59 >= v58)
          {
            v61 = *((_QWORD *)v37 - 21);
            v62 = v59 - v61;
            v63 = (uint64_t)(v59 - v61) >> 3;
            v64 = v63 + 1;
            if ((unint64_t)(v63 + 1) >> 61)
              abort();
            v65 = v58 - v61;
            if (v65 >> 2 > v64)
              v64 = v65 >> 2;
            if ((unint64_t)v65 >= 0x7FFFFFFFFFFFFFF8)
              v66 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v66 = v64;
            if (v66)
            {
              if (v66 >> 61)
                goto LABEL_723;
              v67 = (char *)operator new(8 * v66);
            }
            else
            {
              v67 = 0;
            }
            v68 = &v67[8 * v63];
            *(_QWORD *)v68 = v57;
            v60 = v68 + 8;
            if (v59 != v61)
            {
              v69 = v59 - v61 - 8;
              if (v69 < 0x78
                || (unint64_t)&v67[v62 - (v69 & 0xFFFFFFFFFFFFFFF8) - 8] < v59
                && v59 - (v69 & 0xFFFFFFFFFFFFFFF8) - 8 < (unint64_t)v68)
              {
                goto LABEL_732;
              }
              v70 = (v69 >> 3) + 1;
              v71 = &v67[v62 - 16];
              v72 = (_OWORD *)(v59 - 32);
              v73 = v70 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v74 = v72[1];
                *((_OWORD *)v71 - 1) = *v72;
                *(_OWORD *)v71 = v74;
                *v72 = 0uLL;
                v72[1] = 0uLL;
                v72 -= 2;
                v71 -= 32;
                v73 -= 4;
              }
              while (v73);
              v68 -= 8 * (v70 & 0x3FFFFFFFFFFFFFFCLL);
              v59 -= 8 * (v70 & 0x3FFFFFFFFFFFFFFCLL);
              if (v70 != (v70 & 0x3FFFFFFFFFFFFFFCLL))
              {
LABEL_732:
                do
                {
                  v75 = *(_QWORD *)(v59 - 8);
                  v59 -= 8;
                  *((_QWORD *)v68 - 1) = v75;
                  v68 -= 8;
                  *(_QWORD *)v59 = 0;
                }
                while (v59 != v61);
              }
            }
            v76 = (char *)*((_QWORD *)v37 - 21);
            v77 = (char *)*((_QWORD *)v37 - 20);
            *((_QWORD *)v37 - 21) = v68;
            *((_QWORD *)v37 - 20) = v60;
            *((_QWORD *)v37 - 19) = &v67[8 * v66];
            if (v77 != v76)
            {
              v78 = v77;
              do
              {
                v80 = (_QWORD *)*((_QWORD *)v78 - 1);
                v78 -= 8;
                v79 = v80;
                if (v80)
                {
                  v81 = (*v79)-- == 1;
                  if (v81)
                  {
                    operator delete(v79);
                    *((_QWORD *)v77 - 1) = 0;
                  }
                }
                v77 = v78;
              }
              while (v78 != v76);
            }
            if (v76)
              operator delete(v76);
          }
          else
          {
            *(_QWORD *)v59 = v56;
            v59 += 8;
            v60 = (_QWORD *)v59;
          }
          *((_QWORD *)v37 - 20) = v60;
          v82 = v524;
          v83 = *(v60 - 1);
          if (v83)
            v84 = v83 + 8;
          else
            v84 = 0;
          v85 = *(_QWORD *)(v524 + 40);
          v86 = *((_QWORD *)v37 - 8);
          if (v86)
          {
            v87 = (uint8x8_t)vcnt_s8((int8x8_t)v86);
            v87.i16[0] = vaddlv_u8(v87);
            if (v87.u32[0] > 1uLL)
            {
              v59 = *(_QWORD *)(v524 + 40);
              if (v85 >= v86)
                v59 = v85 % v86;
            }
            else
            {
              v59 = (v86 - 1) & v85;
            }
            v88 = *(_QWORD **)(*v53 + 8 * v59);
            if (v88)
            {
              v89 = (_QWORD *)*v88;
              if (v89)
              {
                if (v87.u32[0] < 2uLL)
                {
                  while (1)
                  {
                    v91 = v89[1];
                    if (v91 == v85)
                    {
                      if (v89[2] == v85)
                        goto LABEL_156;
                    }
                    else if ((v91 & (v86 - 1)) != v59)
                    {
                      goto LABEL_118;
                    }
                    v89 = (_QWORD *)*v89;
                    if (!v89)
                      goto LABEL_118;
                  }
                }
                do
                {
                  v90 = v89[1];
                  if (v90 == v85)
                  {
                    if (v89[2] == v85)
                      goto LABEL_156;
                  }
                  else
                  {
                    if (v90 >= v86)
                      v90 %= v86;
                    if (v90 != v59)
                      break;
                  }
                  v89 = (_QWORD *)*v89;
                }
                while (v89);
              }
            }
          }
LABEL_118:
          v92 = operator new(0x20uLL);
          *v92 = 0;
          v92[1] = v85;
          v92[2] = *(_QWORD *)(v82 + 40);
          v92[3] = v84;
          v93 = (float)(unint64_t)(*((_QWORD *)v37 - 6) + 1);
          v94 = *((float *)v37 - 10);
          if (!v86 || (float)(v94 * (float)v86) < v93)
          {
            v95 = (v86 & (v86 - 1)) != 0;
            if (v86 < 3)
              v95 = 1;
            v96 = v95 | (2 * v86);
            v97 = vcvtps_u32_f32(v93 / v94);
            if (v96 <= v97)
              prime = v97;
            else
              prime = v96;
            if (prime == 1)
            {
              prime = 2;
            }
            else if ((prime & (prime - 1)) != 0)
            {
              prime = std::__next_prime(prime);
              v86 = *((_QWORD *)v37 - 8);
            }
            if (prime > v86)
              goto LABEL_130;
            if (prime < v86)
            {
              v99 = vcvtps_u32_f32((float)*((unint64_t *)v37 - 6) / *((float *)v37 - 10));
              if (v86 < 3
                || (v100 = (uint8x8_t)vcnt_s8((int8x8_t)v86), v100.i16[0] = vaddlv_u8(v100), v100.u32[0] > 1uLL))
              {
                v99 = std::__next_prime(v99);
              }
              else
              {
                v101 = 1 << -(char)__clz(v99 - 1);
                if (v99 >= 2)
                  v99 = v101;
              }
              if (prime <= v99)
                prime = v99;
              if (prime < v86)
LABEL_130:
                std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>((uint64_t)v37 - 72, prime);
            }
            v86 = *((_QWORD *)v37 - 8);
            if ((v86 & (v86 - 1)) != 0)
            {
              if (v85 >= v86)
                v59 = v85 % v86;
              else
                v59 = v85;
            }
            else
            {
              v59 = (v86 - 1) & v85;
            }
          }
          v102 = *v53;
          v103 = *(_QWORD **)(*v53 + 8 * v59);
          if (v103)
          {
            *v92 = *v103;
          }
          else
          {
            *v92 = *__p;
            *__p = v92;
            *(_QWORD *)(v102 + 8 * v59) = __p;
            if (!*v92)
              goto LABEL_155;
            v104 = *(_QWORD *)(*v92 + 8);
            if ((v86 & (v86 - 1)) != 0)
            {
              if (v104 >= v86)
                v104 %= v86;
            }
            else
            {
              v104 &= v86 - 1;
            }
            v103 = (_QWORD *)(*v53 + 8 * v104);
          }
          *v103 = v92;
LABEL_155:
          ++*((_QWORD *)v37 - 6);
LABEL_156:
          ++v52;
          v50 = *(_QWORD **)v51;
          v49 = (uint64_t)v518;
        }
        while (v52 < *(_QWORD *)(*(_QWORD *)v51 + 32));
      }
      v34 = (float *)((char *)v512 + 1);
      v27 = v513 + 23;
      v1 = (geo::codec::VectorTile **)v506;
    }
    while ((float *)((char *)v512 + 1) != (float *)v510);
  }
  v105 = operator new();
  v106 = 0uLL;
  *(_OWORD *)v105 = 0u;
  *(_OWORD *)(v105 + 16) = 0u;
  v502 = (uint64_t *)v105;
  *(_DWORD *)(v105 + 32) = 1065353216;
  v107 = v1[111];
  v108 = v1[112];
  if (v107 == v108)
    goto LABEL_161;
  do
  {
    v463 = *(_QWORD *)v107;
    v464 = *(_DWORD **)(*(_QWORD *)v107 + 40);
    if (v464
      && !std::__hash_table<std::__hash_value_type<md::mun::CollectionPoint const*,geo::small_vector<md::mun::CollectionPoint const*,6ul>>,std::__unordered_map_hasher<md::mun::CollectionPoint const*,std::__hash_value_type<md::mun::CollectionPoint const*,geo::small_vector<md::mun::CollectionPoint const*,6ul>>,std::hash<md::mun::CollectionPoint const*>,std::equal_to<md::mun::CollectionPoint const*>,true>,std::__unordered_map_equal<md::mun::CollectionPoint const*,std::__hash_value_type<md::mun::CollectionPoint const*,geo::small_vector<md::mun::CollectionPoint const*,6ul>>,std::equal_to<md::mun::CollectionPoint const*>,std::hash<md::mun::CollectionPoint const*>,true>,std::allocator<std::__hash_value_type<md::mun::CollectionPoint const*,geo::small_vector<md::mun::CollectionPoint const*,6ul>>>>::find<md::mun::CollectionPoint const*>(v502, *(_QWORD *)(*(_QWORD *)v107 + 40)))
    {
      md::TransitJunction::TransitJunction((uint64_t)&v524, v1[90], v464);
      std::__hash_table<std::__hash_value_type<GeoCodecsConnectivityJunction const*,md::TransitJunction>,std::__unordered_map_hasher<GeoCodecsConnectivityJunction const*,std::__hash_value_type<GeoCodecsConnectivityJunction const*,md::TransitJunction>,std::hash<GeoCodecsConnectivityJunction const*>,std::equal_to<GeoCodecsConnectivityJunction const*>,true>,std::__unordered_map_equal<GeoCodecsConnectivityJunction const*,std::__hash_value_type<GeoCodecsConnectivityJunction const*,md::TransitJunction>,std::equal_to<GeoCodecsConnectivityJunction const*>,std::hash<GeoCodecsConnectivityJunction const*>,true>,std::allocator<std::__hash_value_type<GeoCodecsConnectivityJunction const*,md::TransitJunction>>>::__emplace_unique_key_args<GeoCodecsConnectivityJunction const*,GeoCodecsConnectivityJunction const*&,md::TransitJunction>(v502, (unint64_t)v464, (uint64_t)v464, (uint64_t)&v524);
      md::TransitJunction::~TransitJunction((md::TransitJunction *)&v524);
      v465 = *(_DWORD **)(*(_QWORD *)v107 + 48);
      if (!v465)
        goto LABEL_642;
    }
    else
    {
      v465 = *(_DWORD **)(v463 + 48);
      if (!v465)
        goto LABEL_642;
    }
    if (!std::__hash_table<std::__hash_value_type<md::mun::CollectionPoint const*,geo::small_vector<md::mun::CollectionPoint const*,6ul>>,std::__unordered_map_hasher<md::mun::CollectionPoint const*,std::__hash_value_type<md::mun::CollectionPoint const*,geo::small_vector<md::mun::CollectionPoint const*,6ul>>,std::hash<md::mun::CollectionPoint const*>,std::equal_to<md::mun::CollectionPoint const*>,true>,std::__unordered_map_equal<md::mun::CollectionPoint const*,std::__hash_value_type<md::mun::CollectionPoint const*,geo::small_vector<md::mun::CollectionPoint const*,6ul>>,std::equal_to<md::mun::CollectionPoint const*>,std::hash<md::mun::CollectionPoint const*>,true>,std::allocator<std::__hash_value_type<md::mun::CollectionPoint const*,geo::small_vector<md::mun::CollectionPoint const*,6ul>>>>::find<md::mun::CollectionPoint const*>(v502, (unint64_t)v465))
    {
      md::TransitJunction::TransitJunction((uint64_t)&v524, v1[90], v465);
      std::__hash_table<std::__hash_value_type<GeoCodecsConnectivityJunction const*,md::TransitJunction>,std::__unordered_map_hasher<GeoCodecsConnectivityJunction const*,std::__hash_value_type<GeoCodecsConnectivityJunction const*,md::TransitJunction>,std::hash<GeoCodecsConnectivityJunction const*>,std::equal_to<GeoCodecsConnectivityJunction const*>,true>,std::__unordered_map_equal<GeoCodecsConnectivityJunction const*,std::__hash_value_type<GeoCodecsConnectivityJunction const*,md::TransitJunction>,std::equal_to<GeoCodecsConnectivityJunction const*>,std::hash<GeoCodecsConnectivityJunction const*>,true>,std::allocator<std::__hash_value_type<GeoCodecsConnectivityJunction const*,md::TransitJunction>>>::__emplace_unique_key_args<GeoCodecsConnectivityJunction const*,GeoCodecsConnectivityJunction const*&,md::TransitJunction>(v502, (unint64_t)v465, (uint64_t)v465, (uint64_t)&v524);
      md::TransitJunction::~TransitJunction((md::TransitJunction *)&v524);
    }
LABEL_642:
    v107 = (geo::codec::VectorTile *)((char *)v107 + 248);
  }
  while (v107 != v108);
  v495 = v1[111];
  v496 = v1[112];
  while (v495 != v496)
  {
    v497 = *(_QWORD *)v495;
    v498 = std::__hash_table<std::__hash_value_type<altitude::Tile *,unsigned int>,std::__unordered_map_hasher<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::hash<altitude::Tile *>,std::equal_to<altitude::Tile *>,true>,std::__unordered_map_equal<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::equal_to<altitude::Tile *>,std::hash<altitude::Tile *>,true>,std::allocator<std::__hash_value_type<altitude::Tile *,unsigned int>>>::find<altitude::Tile *>(v502, *(_QWORD *)(*(_QWORD *)v495 + 40));
    if (v498)
    {
      md::TransitJunction::addLink(v498 + 3, v495);
      v497 = *(_QWORD *)v495;
    }
    v499 = std::__hash_table<std::__hash_value_type<altitude::Tile *,unsigned int>,std::__unordered_map_hasher<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::hash<altitude::Tile *>,std::equal_to<altitude::Tile *>,true>,std::__unordered_map_equal<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::equal_to<altitude::Tile *>,std::hash<altitude::Tile *>,true>,std::allocator<std::__hash_value_type<altitude::Tile *,unsigned int>>>::find<altitude::Tile *>(v502, *(_QWORD *)(v497 + 48));
    if (v499)
      md::TransitJunction::addLink(v499 + 3, v495);
    v495 = (geo::codec::VectorTile *)((char *)v495 + 248);
  }
LABEL_161:
  v109 = v502 + 2;
  v505 = v106;
  v504 = (float32x2_t)v106;
  while (1)
  {
    v109 = (_QWORD *)*v109;
    if (!v109)
      break;
    v111 = v109[11] + v109[8];
    if (v111)
    {
      if (v111 >= 0x666666666666667)
        std::__throw_bad_array_new_length[abi:nn180100]();
      v112 = (char *)operator new(40 * v111);
      bzero(v112, 40 * ((40 * v111 - 40) / 0x28) + 40);
      __pa = v112;
      v113 = &v112[40 * ((40 * v111 - 40) / 0x28) + 40];
      v114 = (__n128 *)operator new(8 * v111);
      bzero(v114, 8 * v111);
      v519 = v114;
      v115 = (__n128 *)((char *)v114 + 8 * v111);
    }
    else
    {
      __pa = 0;
      v519 = 0;
      v113 = 0;
      v115 = 0;
    }
    v116 = (_QWORD *)v109[6];
    if (v116 == v109 + 7)
    {
      v117 = 0;
    }
    else
    {
      v117 = 0;
      v118 = v109[12];
      v119 = v109[4];
      do
      {
        v120 = v116[4];
        v121 = &__pa[40 * v117];
        *(_QWORD *)v121 = v120;
        v121[32] = v120 == v118;
        v121[33] = *(_QWORD *)(*(_QWORD *)v120 + 48) == v119;
        v519->n128_u64[v117] = (unint64_t)v121;
        v122 = (_QWORD *)v116[1];
        if (v122)
        {
          do
          {
            v123 = v122;
            v122 = (_QWORD *)*v122;
          }
          while (v122);
        }
        else
        {
          do
          {
            v123 = (_QWORD *)v116[2];
            v81 = *v123 == (_QWORD)v116;
            v116 = v123;
          }
          while (!v81);
        }
        ++v117;
        v116 = v123;
      }
      while (v123 != v109 + 7);
    }
    v124 = (_QWORD *)v109[9];
    if (v124 != v109 + 10)
    {
      v125 = v109[12];
      v126 = v109[4];
      do
      {
        v127 = v124[4];
        v128 = &__pa[40 * v117];
        *(_QWORD *)v128 = v127;
        v128[32] = v127 == v125;
        v128[33] = *(_QWORD *)(*(_QWORD *)v127 + 48) == v126;
        v519->n128_u64[v117] = (unint64_t)v128;
        v129 = (_QWORD *)v124[1];
        if (v129)
        {
          do
          {
            v130 = v129;
            v129 = (_QWORD *)*v129;
          }
          while (v129);
        }
        else
        {
          do
          {
            v130 = (_QWORD *)v124[2];
            v81 = *v130 == (_QWORD)v124;
            v124 = v130;
          }
          while (!v81);
        }
        ++v117;
        v124 = v130;
      }
      while (v130 != v109 + 10);
    }
    v507 = v115;
    v500 = v109 + 10;
    v501 = v109 + 7;
    v522 = v109;
    if (v111)
    {
      v131 = 0;
      v132 = (float *)(v109 + 14);
      v512 = (float *)(v109 + 14);
      while (1)
      {
        v133 = v131++;
        if (v131 < v111)
          break;
LABEL_190:
        if (v131 == v111)
          goto LABEL_253;
      }
      v134 = v519->n128_u64[v133];
      v135 = *(_QWORD **)v134;
      v136 = v131;
      v514 = v131;
      while (2)
      {
        v138 = (uint64_t *)v519->n128_u64[v136];
        v139 = *v138;
        if (*(_QWORD *)(*v135 + 40) == v109[4])
        {
          v145 = (float32x2_t *)v135[7];
          if (!v145[11].i8[5])
            goto LABEL_195;
          v146 = *(float32x2_t **)(v139 + 56);
          if (v146[11].i8[5] && *(_QWORD *)&v145[2] == *(_QWORD *)&v146[2])
          {
            v148 = 0;
            v143 = vneg_f32(*v146);
            v144 = *v145;
          }
          else
          {
            v147 = *(_QWORD *)(v139 + 64);
            if (!*(_BYTE *)(v147 - 3) || *(_QWORD *)&v145[2] != *(_QWORD *)(v147 - 40))
              goto LABEL_195;
            v143 = *(float32x2_t *)(v147 - 56);
            v144 = *v145;
LABEL_209:
            v148 = 1;
          }
        }
        else
        {
          v140 = v135[8];
          if (!*(_BYTE *)(v140 - 3))
            goto LABEL_195;
          v141 = *(_QWORD *)(v139 + 64);
          if (!*(_BYTE *)(v141 - 3) || *(_QWORD *)(v140 - 40) != *(_QWORD *)(v141 - 40))
          {
            v142 = *(float32x2_t **)(v139 + 56);
            if (v142[11].i8[5] && *(_QWORD *)(v140 - 40) == *(_QWORD *)&v142[2])
            {
              v143 = *(float32x2_t *)(v140 - 56);
              v144 = *v142;
              goto LABEL_209;
            }
LABEL_195:
            if (++v136 >= v111)
              goto LABEL_190;
            continue;
          }
          v148 = 0;
          v143 = *(float32x2_t *)(v140 - 56);
          v144 = vneg_f32(*(float32x2_t *)(v141 - 56));
        }
        break;
      }
      v149 = vaddv_f32(vmul_f32(v143, v144));
      if (v149 >= 0.0)
      {
        v150 = vadd_f32(v143, v144);
        v151 = vaddv_f32(vmul_f32(v150, v150));
        if (v151 > 0.0)
        {
          v152 = -v150.f32[1];
          v153 = (float32x2_t)vdup_lane_s32((int32x2_t)v150, 0);
          v153.f32[0] = v152;
          v143 = vmul_n_f32(v153, 1.0 / sqrtf(v151));
        }
        v154 = vmul_f32((float32x2_t)vrev64_s32((int32x2_t)v143), v144);
        LODWORD(v155) = vsub_f32(v154, (float32x2_t)vdup_lane_s32((int32x2_t)v154, 1)).u32[0];
        if (fabsf(v155) >= 0.087156)
        {
          v156 = fminf(1.0 / v155, 4.0);
          v157 = v156 * v143.f32[0];
          v158 = vmuls_lane_f32(v156, v143, 1);
          v143.f32[0] = -(float)(v156 * v143.f32[0]);
          v159 = -(float)(v156 * v143.f32[1]);
          if (v148)
            v160 = v158;
          else
            v160 = v159;
          if (v148)
            v161 = v157;
          else
            v161 = v143.f32[0];
          *(_QWORD *)&v524 = v135;
          *((_QWORD *)&v524 + 1) = v139;
          v162 = (float *)std::__hash_table<std::__hash_value_type<std::pair<md::TransitLink const*,md::TransitLink const*>,gm::Matrix<float,2,1>>,std::__unordered_map_hasher<std::pair<md::TransitLink const*,md::TransitLink const*>,std::__hash_value_type<std::pair<md::TransitLink const*,md::TransitLink const*>,gm::Matrix<float,2,1>>,md::TransitJunction::LinkPairHash,std::equal_to<std::pair<md::TransitLink const*,md::TransitLink const*>>,true>,std::__unordered_map_equal<std::pair<md::TransitLink const*,md::TransitLink const*>,std::__hash_value_type<std::pair<md::TransitLink const*,md::TransitLink const*>,gm::Matrix<float,2,1>>,std::equal_to<std::pair<md::TransitLink const*,md::TransitLink const*>>,md::TransitJunction::LinkPairHash,true>,std::allocator<std::__hash_value_type<std::pair<md::TransitLink const*,md::TransitLink const*>,gm::Matrix<float,2,1>>>>::__emplace_unique_key_args<std::pair<md::TransitLink const*,md::TransitLink const*>,std::piecewise_construct_t const&,std::tuple<std::pair<md::TransitLink const*,md::TransitLink const*>&&>,std::tuple<>>(v132, (uint64_t)v135, v139, &v524);
          v162[8] = v157;
          v162[9] = v158;
          *(_QWORD *)&v524 = v139;
          *((_QWORD *)&v524 + 1) = v135;
          v163 = (float *)std::__hash_table<std::__hash_value_type<std::pair<md::TransitLink const*,md::TransitLink const*>,gm::Matrix<float,2,1>>,std::__unordered_map_hasher<std::pair<md::TransitLink const*,md::TransitLink const*>,std::__hash_value_type<std::pair<md::TransitLink const*,md::TransitLink const*>,gm::Matrix<float,2,1>>,md::TransitJunction::LinkPairHash,std::equal_to<std::pair<md::TransitLink const*,md::TransitLink const*>>,true>,std::__unordered_map_equal<std::pair<md::TransitLink const*,md::TransitLink const*>,std::__hash_value_type<std::pair<md::TransitLink const*,md::TransitLink const*>,gm::Matrix<float,2,1>>,std::equal_to<std::pair<md::TransitLink const*,md::TransitLink const*>>,md::TransitJunction::LinkPairHash,true>,std::allocator<std::__hash_value_type<std::pair<md::TransitLink const*,md::TransitLink const*>,gm::Matrix<float,2,1>>>>::__emplace_unique_key_args<std::pair<md::TransitLink const*,md::TransitLink const*>,std::piecewise_construct_t const&,std::tuple<std::pair<md::TransitLink const*,md::TransitLink const*>&&>,std::tuple<>>(v132, v139, (uint64_t)v135, &v524);
          v163[8] = v161;
          v163[9] = v160;
          v165 = *(char **)(v134 + 16);
          v164 = *(_QWORD *)(v134 + 24);
          if ((unint64_t)v165 >= v164)
          {
            v167 = *(char **)(v134 + 8);
            v168 = (v165 - v167) >> 4;
            v169 = v168 + 1;
            if ((unint64_t)(v168 + 1) >> 60)
              goto LABEL_724;
            v170 = v164 - (_QWORD)v167;
            if (v170 >> 3 > v169)
              v169 = v170 >> 3;
            if ((unint64_t)v170 >= 0x7FFFFFFFFFFFFFF0)
              v171 = 0xFFFFFFFFFFFFFFFLL;
            else
              v171 = v169;
            if (v171 >> 60)
              goto LABEL_723;
            v172 = (char *)operator new(16 * v171);
            v173 = (float *)&v172[16 * v168];
            *(_QWORD *)v173 = v138;
            v173[2] = v149;
            v174 = v173;
            if (v165 == v167)
            {
              v132 = v512;
            }
            else
            {
              v132 = v512;
              do
              {
                v175 = *((_QWORD *)v165 - 2);
                v165 -= 16;
                v176 = *((_DWORD *)v165 + 2);
                *((_QWORD *)v174 - 2) = v175;
                v174 -= 4;
                *((_DWORD *)v174 + 2) = v176;
              }
              while (v165 != v167);
            }
            v177 = &v172[16 * v171];
            v166 = (char *)(v173 + 4);
            *(_QWORD *)(v134 + 8) = v174;
            *(_QWORD *)(v134 + 16) = v173 + 4;
            *(_QWORD *)(v134 + 24) = v177;
            if (v167)
              operator delete(v167);
          }
          else
          {
            *(_QWORD *)v165 = v138;
            *((float *)v165 + 2) = v149;
            v166 = v165 + 16;
          }
          *(_QWORD *)(v134 + 16) = v166;
          v179 = (float *)v138[2];
          v178 = v138[3];
          if ((unint64_t)v179 < v178)
          {
            *(_QWORD *)v179 = v134;
            v179[2] = v149;
            v137 = (uint64_t)(v179 + 4);
          }
          else
          {
            v180 = (float *)v138[1];
            v181 = ((char *)v179 - (char *)v180) >> 4;
            v182 = v181 + 1;
            if ((unint64_t)(v181 + 1) >> 60)
LABEL_724:
              std::__throw_bad_array_new_length[abi:nn180100]();
            v183 = v178 - (_QWORD)v180;
            if (v183 >> 3 > v182)
              v182 = v183 >> 3;
            if ((unint64_t)v183 >= 0x7FFFFFFFFFFFFFF0)
              v184 = 0xFFFFFFFFFFFFFFFLL;
            else
              v184 = v182;
            if (v184 >> 60)
              goto LABEL_723;
            v185 = (char *)operator new(16 * v184);
            v186 = (float *)&v185[16 * v181];
            *(_QWORD *)v186 = v134;
            v186[2] = v149;
            v187 = (uint64_t)v186;
            if (v179 == v180)
            {
              v132 = v512;
            }
            else
            {
              v132 = v512;
              do
              {
                v188 = *((_QWORD *)v179 - 2);
                v179 -= 4;
                v189 = *((_DWORD *)v179 + 2);
                *(_QWORD *)(v187 - 16) = v188;
                v187 -= 16;
                *(_DWORD *)(v187 + 8) = v189;
              }
              while (v179 != v180);
            }
            v190 = &v185[16 * v184];
            v137 = (uint64_t)(v186 + 4);
            v138[1] = v187;
            v138[2] = (uint64_t)(v186 + 4);
            v138[3] = (uint64_t)v190;
            if (v180)
              operator delete(v180);
          }
          v109 = v522;
          v138[2] = v137;
          v131 = v514;
        }
      }
      goto LABEL_195;
    }
LABEL_253:
    v191 = ((char *)v507 - (char *)v519) >> 3;
    v192 = (const std::nothrow_t *)MEMORY[0x1E0DE4E10];
    if ((char *)v507 - (char *)v519 >= 1025)
    {
      v193 = ((char *)v507 - (char *)v519) >> 3;
      while (1)
      {
        v194 = (char *)operator new(8 * v193, v192);
        if (v194)
          break;
        v426 = v193 > 1;
        v193 >>= 1;
        if (!v426)
          goto LABEL_257;
      }
      v196 = v194;
      std::__stable_sort<std::_ClassicAlgPolicy,md::TransitJunction::generateLinkNormals(void)::$_0 &,std::__wrap_iter<md::TransitJunction::generateLinkNormals(void)::LinkInfo **>>(v519, v507, v191, v194, v193);
      operator delete(v196);
      if (v519 == v507)
        goto LABEL_406;
LABEL_260:
      v197 = v109 + 19;
      v511 = (float *)(v109 + 14);
      v503 = v109 + 21;
      v198 = v519;
      do
      {
        v515 = v198;
        v199 = v198->n128_u64[0];
        v200 = *(float **)(v198->n128_u64[0] + 8);
        v201 = *(float **)(v198->n128_u64[0] + 16);
        if ((char *)v201 - (char *)v200 < 2049)
        {
LABEL_266:
          std::__stable_sort<std::_ClassicAlgPolicy,md::TransitJunction::generateLinkNormals(void)::$_1 &,std::__wrap_iter<md::TransitJunction::generateLinkNormals(void)::LinkPath *>>(v200, v201, ((char *)v201 - (char *)v200) >> 4, 0, 0, v195);
        }
        else
        {
          v202 = ((char *)v201 - (char *)v200) >> 4;
          while (1)
          {
            v203 = (float *)operator new(16 * v202, v192);
            if (v203)
              break;
            v426 = v202 > 1;
            v202 >>= 1;
            if (!v426)
              goto LABEL_266;
          }
          v204 = v203;
          std::__stable_sort<std::_ClassicAlgPolicy,md::TransitJunction::generateLinkNormals(void)::$_1 &,std::__wrap_iter<md::TransitJunction::generateLinkNormals(void)::LinkPath *>>(v200, v201, ((char *)v201 - (char *)v200) >> 4, v203, v202, v195);
          operator delete(v204);
        }
        v205 = *(_QWORD *)v199;
        v207 = *(_QWORD *)(*(_QWORD *)v199 + 80);
        v206 = *(_QWORD *)(*(_QWORD *)v199 + 88);
        if (v207 != v206)
        {
LABEL_275:
          if (*(_QWORD *)v207)
            v208 = *(_QWORD *)v207 + 8;
          else
            v208 = 0;
          v209 = (int8x8_t)v109[20];
          if (v209)
          {
            v210 = 0x9DDFEA08EB382D69 * (((8 * v208) + 8) ^ HIDWORD(v208));
            v211 = 0x9DDFEA08EB382D69 * (HIDWORD(v208) ^ (v210 >> 47) ^ v210);
            v212 = 0x9DDFEA08EB382D69 * (v211 ^ (v211 >> 47));
            v195.n128_u64[0] = (unint64_t)vcnt_s8(v209);
            v195.n128_u16[0] = vaddlv_u8((uint8x8_t)v195.n128_u64[0]);
            if (v195.n128_u32[0] > 1uLL)
            {
              v213 = v212;
              if (v212 >= *(_QWORD *)&v209)
                v213 = v212 % *(_QWORD *)&v209;
            }
            else
            {
              v213 = v212 & (*(_QWORD *)&v209 - 1);
            }
            v214 = *(_QWORD **)(*v197 + 8 * v213);
            if (v214)
            {
              v215 = (_QWORD *)*v214;
              if (v215)
              {
                if (v195.n128_u32[0] < 2uLL)
                {
                  v216 = *(_QWORD *)&v209 - 1;
                  while (1)
                  {
                    v218 = v215[1];
                    if (v212 == v218)
                    {
                      if (v215[2] == v208)
                        goto LABEL_274;
                    }
                    else if ((v218 & v216) != v213)
                    {
                      goto LABEL_298;
                    }
                    v215 = (_QWORD *)*v215;
                    if (!v215)
                      goto LABEL_298;
                  }
                }
                do
                {
                  v217 = v215[1];
                  if (v212 == v217)
                  {
                    if (v215[2] == v208)
                      goto LABEL_274;
                  }
                  else
                  {
                    if (v217 >= *(_QWORD *)&v209)
                      v217 %= *(_QWORD *)&v209;
                    if (v217 != v213)
                      break;
                  }
                  v215 = (_QWORD *)*v215;
                }
                while (v215);
              }
            }
          }
LABEL_298:
          v219 = *(uint64_t ***)(v199 + 8);
          v220 = *(uint64_t ***)(v199 + 16);
          if (v219 == v220)
          {
LABEL_323:
            if (*(_BYTE *)(v199 + 33))
              v232 = (_DWORD *)(*(_QWORD *)(v205 + 64) - 48);
            else
              v232 = (_DWORD *)(*(_QWORD *)(v205 + 56) + 8);
            *(_QWORD *)&v524 = v208;
            v233 = std::__hash_table<std::__hash_value_type<md::TransitLineSegment const*,gm::Matrix<float,2,1>>,std::__unordered_map_hasher<md::TransitLineSegment const*,std::__hash_value_type<md::TransitLineSegment const*,gm::Matrix<float,2,1>>,std::hash<md::TransitLineSegment const*>,std::equal_to<md::TransitLineSegment const*>,true>,std::__unordered_map_equal<md::TransitLineSegment const*,std::__hash_value_type<md::TransitLineSegment const*,gm::Matrix<float,2,1>>,std::equal_to<md::TransitLineSegment const*>,std::hash<md::TransitLineSegment const*>,true>,std::allocator<std::__hash_value_type<md::TransitLineSegment const*,gm::Matrix<float,2,1>>>>::__emplace_unique_key_args<md::TransitLineSegment const*,std::piecewise_construct_t const&,std::tuple<md::TransitLineSegment const*&&>,std::tuple<>>((uint64_t)v197, v208, &v524);
            *((_DWORD *)v233 + 6) = *v232;
            v195.n128_u32[0] = v232[1];
            *((_DWORD *)v233 + 7) = v195.n128_u32[0];
            goto LABEL_274;
          }
          v221 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v207 + 8) + 16) + 40);
          while (1)
          {
            v223 = **v219;
            v224 = *(int8x8_t *)(v223 + 184);
            if (v224)
            {
              v225 = (uint8x8_t)vcnt_s8(v224);
              v225.i16[0] = vaddlv_u8(v225);
              if (v225.u32[0] > 1uLL)
              {
                v226 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v207 + 8) + 16) + 40);
                if (*(_QWORD *)&v224 <= v221)
                  v226 = v221 % *(_QWORD *)&v224;
              }
              else
              {
                v226 = (*(_QWORD *)&v224 - 1) & v221;
              }
              v227 = *(_QWORD **)(*(_QWORD *)(v223 + 176) + 8 * v226);
              if (v227)
              {
                v228 = (_QWORD *)*v227;
                if (v228)
                  break;
              }
            }
LABEL_301:
            v219 += 2;
            if (v219 == v220)
              goto LABEL_323;
          }
          if (v225.u32[0] < 2uLL)
          {
            v229 = *(_QWORD *)&v224 - 1;
            while (1)
            {
              v230 = v228[1];
              if (v230 == v221)
              {
                if (v228[2] == v221)
                  goto LABEL_300;
              }
              else if ((v230 & v229) != v226)
              {
                goto LABEL_301;
              }
              v228 = (_QWORD *)*v228;
              if (!v228)
                goto LABEL_301;
            }
          }
          while (1)
          {
            v231 = v228[1];
            if (v231 == v221)
            {
              if (v228[2] == v221)
              {
LABEL_300:
                v222 = v228[3];
                if (!v222)
                  goto LABEL_301;
                *(_QWORD *)&v524 = v205;
                *((_QWORD *)&v524 + 1) = v223;
                v234 = std::__hash_table<std::__hash_value_type<std::pair<md::TransitLink const*,md::TransitLink const*>,gm::Matrix<float,2,1>>,std::__unordered_map_hasher<std::pair<md::TransitLink const*,md::TransitLink const*>,std::__hash_value_type<std::pair<md::TransitLink const*,md::TransitLink const*>,gm::Matrix<float,2,1>>,md::TransitJunction::LinkPairHash,std::equal_to<std::pair<md::TransitLink const*,md::TransitLink const*>>,true>,std::__unordered_map_equal<std::pair<md::TransitLink const*,md::TransitLink const*>,std::__hash_value_type<std::pair<md::TransitLink const*,md::TransitLink const*>,gm::Matrix<float,2,1>>,std::equal_to<std::pair<md::TransitLink const*,md::TransitLink const*>>,md::TransitJunction::LinkPairHash,true>,std::allocator<std::__hash_value_type<std::pair<md::TransitLink const*,md::TransitLink const*>,gm::Matrix<float,2,1>>>>::__emplace_unique_key_args<std::pair<md::TransitLink const*,md::TransitLink const*>,std::piecewise_construct_t const&,std::tuple<std::pair<md::TransitLink const*,md::TransitLink const*>&&>,std::tuple<>>(v511, v205, v223, &v524);
                if (*(_QWORD *)v207)
                  v235 = *(_QWORD *)v207 + 8;
                else
                  v235 = 0;
                v527[0] = v235;
                v236 = std::__hash_table<std::__hash_value_type<md::TransitLineSegment const*,gm::Matrix<float,2,1>>,std::__unordered_map_hasher<md::TransitLineSegment const*,std::__hash_value_type<md::TransitLineSegment const*,gm::Matrix<float,2,1>>,std::hash<md::TransitLineSegment const*>,std::equal_to<md::TransitLineSegment const*>,true>,std::__unordered_map_equal<md::TransitLineSegment const*,std::__hash_value_type<md::TransitLineSegment const*,gm::Matrix<float,2,1>>,std::equal_to<md::TransitLineSegment const*>,std::hash<md::TransitLineSegment const*>,true>,std::allocator<std::__hash_value_type<md::TransitLineSegment const*,gm::Matrix<float,2,1>>>>::__emplace_unique_key_args<md::TransitLineSegment const*,std::piecewise_construct_t const&,std::tuple<md::TransitLineSegment const*&&>,std::tuple<>>((uint64_t)v197, v235, v527);
                *((_DWORD *)v236 + 6) = *((_DWORD *)v234 + 8);
                *((_DWORD *)v236 + 7) = *((_DWORD *)v234 + 9);
                v237 = 0x9DDFEA08EB382D69 * (((8 * v222) + 8) ^ HIDWORD(v222));
                v238 = 0x9DDFEA08EB382D69 * (HIDWORD(v222) ^ (v237 >> 47) ^ v237);
                v239 = 0x9DDFEA08EB382D69 * (v238 ^ (v238 >> 47));
                v240 = (int8x8_t)v522[20];
                if (v240)
                {
                  v195.n128_u64[0] = (unint64_t)vcnt_s8(v240);
                  v195.n128_u16[0] = vaddlv_u8((uint8x8_t)v195.n128_u64[0]);
                  if (v195.n128_u32[0] > 1uLL)
                  {
                    v241 = 0x9DDFEA08EB382D69 * (v238 ^ (v238 >> 47));
                    if (v239 >= *(_QWORD *)&v240)
                      v241 = v239 % *(_QWORD *)&v240;
                  }
                  else
                  {
                    v241 = v239 & (*(_QWORD *)&v240 - 1);
                  }
                  v242 = *(_QWORD **)(*v197 + 8 * v241);
                  if (v242)
                  {
                    v243 = (_QWORD *)*v242;
                    if (v243)
                    {
                      if (v195.n128_u32[0] < 2uLL)
                      {
                        v244 = *(_QWORD *)&v240 - 1;
                        while (1)
                        {
                          v246 = v243[1];
                          if (v239 == v246)
                          {
                            if (v243[2] == v222)
                              goto LABEL_274;
                          }
                          else if ((v246 & v244) != v241)
                          {
                            goto LABEL_350;
                          }
                          v243 = (_QWORD *)*v243;
                          if (!v243)
                            goto LABEL_350;
                        }
                      }
                      do
                      {
                        v245 = v243[1];
                        if (v239 == v245)
                        {
                          if (v243[2] == v222)
                            goto LABEL_274;
                        }
                        else
                        {
                          if (v245 >= *(_QWORD *)&v240)
                            v245 %= *(_QWORD *)&v240;
                          if (v245 != v241)
                            break;
                        }
                        v243 = (_QWORD *)*v243;
                      }
                      while (v243);
                    }
                  }
                }
LABEL_350:
                *(_QWORD *)&v524 = v223;
                *((_QWORD *)&v524 + 1) = v205;
                v509 = std::__hash_table<std::__hash_value_type<std::pair<md::TransitLink const*,md::TransitLink const*>,gm::Matrix<float,2,1>>,std::__unordered_map_hasher<std::pair<md::TransitLink const*,md::TransitLink const*>,std::__hash_value_type<std::pair<md::TransitLink const*,md::TransitLink const*>,gm::Matrix<float,2,1>>,md::TransitJunction::LinkPairHash,std::equal_to<std::pair<md::TransitLink const*,md::TransitLink const*>>,true>,std::__unordered_map_equal<std::pair<md::TransitLink const*,md::TransitLink const*>,std::__hash_value_type<std::pair<md::TransitLink const*,md::TransitLink const*>,gm::Matrix<float,2,1>>,std::equal_to<std::pair<md::TransitLink const*,md::TransitLink const*>>,md::TransitJunction::LinkPairHash,true>,std::allocator<std::__hash_value_type<std::pair<md::TransitLink const*,md::TransitLink const*>,gm::Matrix<float,2,1>>>>::__emplace_unique_key_args<std::pair<md::TransitLink const*,md::TransitLink const*>,std::piecewise_construct_t const&,std::tuple<std::pair<md::TransitLink const*,md::TransitLink const*>&&>,std::tuple<>>(v511, v223, v205, &v524);
                v247 = v522[20];
                if (!v247)
                  goto LABEL_371;
                v195.n128_u64[0] = (unint64_t)vcnt_s8((int8x8_t)v247);
                v195.n128_u16[0] = vaddlv_u8((uint8x8_t)v195.n128_u64[0]);
                if (v195.n128_u32[0] > 1uLL)
                {
                  v248 = v239;
                  if (v239 >= v247)
                    v248 = v239 % v247;
                }
                else
                {
                  v248 = v239 & (v247 - 1);
                }
                v512 = (float *)v248;
                v249 = *(void ***)(*v197 + 8 * v248);
                if (!v249 || (v250 = *v249) == 0)
                {
LABEL_371:
                  v250 = operator new(0x20uLL);
                  *v250 = 0;
                  v250[1] = v239;
                  v250[2] = v222;
                  v195.n128_f32[0] = (float)(unint64_t)(v522[22] + 1);
                  v254 = *((float *)v522 + 46);
                  if (v247 && (float)(v254 * (float)v247) >= v195.n128_f32[0])
                  {
                    v239 = (unint64_t)v512;
                  }
                  else
                  {
                    v255 = (v247 & (v247 - 1)) != 0;
                    if (v247 < 3)
                      v255 = 1;
                    v256 = v255 | (2 * v247);
                    v257 = vcvtps_u32_f32(v195.n128_f32[0] / v254);
                    if (v256 <= v257)
                      v258 = v257;
                    else
                      v258 = v256;
                    if (v258 == 1)
                    {
                      v258 = 2;
                    }
                    else if ((v258 & (v258 - 1)) != 0)
                    {
                      v258 = std::__next_prime(v258);
                      v247 = v522[20];
                    }
                    if (v258 > v247)
                      goto LABEL_384;
                    if (v258 < v247)
                    {
                      v259 = vcvtps_u32_f32((float)(unint64_t)v522[22] / *((float *)v522 + 46));
                      if (v247 < 3
                        || (v195.n128_u64[0] = (unint64_t)vcnt_s8((int8x8_t)v247),
                            v195.n128_u16[0] = vaddlv_u8((uint8x8_t)v195.n128_u64[0]),
                            v195.n128_u32[0] > 1uLL))
                      {
                        v259 = std::__next_prime(v259);
                      }
                      else
                      {
                        v260 = 1 << -(char)__clz(v259 - 1);
                        if (v259 >= 2)
                          v259 = v260;
                      }
                      if (v258 <= v259)
                        v258 = v259;
                      if (v258 < v247)
LABEL_384:
                        std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>((uint64_t)v197, v258);
                    }
                    v247 = v522[20];
                    if ((v247 & (v247 - 1)) != 0)
                    {
                      if (v239 >= v247)
                        v239 %= v247;
                    }
                    else
                    {
                      v239 &= v247 - 1;
                    }
                  }
                  v261 = *v197;
                  v262 = *(_QWORD **)(*v197 + 8 * v239);
                  v253 = v509;
                  if (!v262)
                  {
                    *v250 = *v503;
                    *v503 = v250;
                    *(_QWORD *)(v261 + 8 * v239) = v503;
                    if (*v250)
                    {
                      v263 = *(_QWORD *)(*v250 + 8);
                      if ((v247 & (v247 - 1)) != 0)
                      {
                        if (v263 >= v247)
                          v263 %= v247;
                      }
                      else
                      {
                        v263 &= v247 - 1;
                      }
                      v262 = (_QWORD *)(*v197 + 8 * v263);
LABEL_271:
                      *v262 = v250;
                    }
                    ++v522[22];
                    goto LABEL_273;
                  }
                  *v250 = *v262;
                  goto LABEL_271;
                }
                if (v195.n128_u32[0] < 2uLL)
                {
                  while (1)
                  {
                    v252 = v250[1];
                    if (v252 == v239)
                    {
                      if (v250[2] == v222)
                        goto LABEL_370;
                    }
                    else if ((v252 & (v247 - 1)) != v248)
                    {
                      goto LABEL_371;
                    }
                    v250 = (_QWORD *)*v250;
                    if (!v250)
                      goto LABEL_371;
                  }
                }
                while (2)
                {
                  v251 = v250[1];
                  if (v251 != v239)
                  {
                    if (v251 >= v247)
                      v251 %= v247;
                    if (v251 != v248)
                      goto LABEL_371;
LABEL_360:
                    v250 = (_QWORD *)*v250;
                    if (!v250)
                      goto LABEL_371;
                    continue;
                  }
                  break;
                }
                if (v250[2] != v222)
                  goto LABEL_360;
LABEL_370:
                v253 = v509;
LABEL_273:
                *((_DWORD *)v250 + 6) = *((_DWORD *)v253 + 8);
                v195.n128_u32[0] = *((_DWORD *)v253 + 9);
                *((_DWORD *)v250 + 7) = v195.n128_u32[0];
LABEL_274:
                v207 += 8;
                v109 = v522;
                if (v207 == v206)
                  break;
                goto LABEL_275;
              }
            }
            else
            {
              if (v231 >= *(_QWORD *)&v224)
                v231 %= *(_QWORD *)&v224;
              if (v231 != v226)
                goto LABEL_301;
            }
            v228 = (_QWORD *)*v228;
            if (!v228)
              goto LABEL_301;
          }
        }
        v198 = (__n128 *)&v515->n128_i8[8];
        v192 = (const std::nothrow_t *)MEMORY[0x1E0DE4E10];
      }
      while (&v515->n128_i8[8] != (__int8 *)v507);
      goto LABEL_406;
    }
LABEL_257:
    std::__stable_sort<std::_ClassicAlgPolicy,md::TransitJunction::generateLinkNormals(void)::$_0 &,std::__wrap_iter<md::TransitJunction::generateLinkNormals(void)::LinkInfo **>>(v519, v507, v191, 0, 0);
    if (v519 != v507)
      goto LABEL_260;
LABEL_406:
    if (v519)
      operator delete(v519);
    v1 = (geo::codec::VectorTile **)v506;
    v264 = __pa;
    if (__pa)
    {
      while (v113 != v264)
      {
        v265 = (void *)*((_QWORD *)v113 - 4);
        if (v265)
        {
          *((_QWORD *)v113 - 3) = v265;
          operator delete(v265);
        }
        v113 -= 40;
        v264 = __pa;
      }
      operator delete(__pa);
    }
    v110 = v109[11] + v109[8];
    if (v110 < 3)
      continue;
    v524 = 0uLL;
    *(_QWORD *)&v525 = 0;
    if (v110 >> 61)
      abort();
    v266 = (char *)operator new(8 * v110);
    *(_QWORD *)&v524 = v266;
    *((_QWORD *)&v524 + 1) = v266;
    *(_QWORD *)&v525 = &v266[8 * v110];
    v267 = (_QWORD *)v109[6];
    if (v267 == v501)
    {
      v268 = 0;
      v270 = v500;
    }
    else
    {
      v268 = 0;
      v269 = (_QWORD *)v109[6];
      v270 = v500;
      do
      {
        v271 = (_QWORD *)v269[1];
        if (v271)
        {
          do
          {
            v272 = v271;
            v271 = (_QWORD *)*v271;
          }
          while (v271);
        }
        else
        {
          do
          {
            v272 = (_QWORD *)v269[2];
            v81 = *v272 == (_QWORD)v269;
            v269 = v272;
          }
          while (!v81);
        }
        ++v268;
        v269 = v272;
      }
      while (v272 != v501);
    }
    std::vector<md::TransitLink *>::__insert_with_size[abi:nn180100]<std::__tree_const_iterator<md::TransitLink *,std::__tree_node<md::TransitLink *,void *> *,long>,std::__tree_const_iterator<md::TransitLink *,std::__tree_node<md::TransitLink *,void *> *,long>>((unint64_t *)&v524, (uint64_t)v266, v267, v501, v268);
    v273 = (_QWORD *)v109[9];
    if (v273 == v270)
    {
      v274 = 0;
    }
    else
    {
      v274 = 0;
      v275 = (_QWORD *)v109[9];
      do
      {
        v276 = (_QWORD *)v275[1];
        if (v276)
        {
          do
          {
            v277 = v276;
            v276 = (_QWORD *)*v276;
          }
          while (v276);
        }
        else
        {
          do
          {
            v277 = (_QWORD *)v275[2];
            v81 = *v277 == (_QWORD)v275;
            v275 = v277;
          }
          while (!v81);
        }
        ++v274;
        v275 = v277;
      }
      while (v277 != v270);
    }
    std::vector<md::TransitLink *>::__insert_with_size[abi:nn180100]<std::__tree_const_iterator<md::TransitLink *,std::__tree_node<md::TransitLink *,void *> *,long>,std::__tree_const_iterator<md::TransitLink *,std::__tree_node<md::TransitLink *,void *> *,long>>((unint64_t *)&v524, *((uint64_t *)&v524 + 1), v273, v270, v274);
    v281 = *((_QWORD *)&v524 + 1);
    v280 = (_QWORD *)v524;
    v282 = *((_QWORD *)&v524 + 1) - v524;
    if (*((_QWORD *)&v524 + 1) == (_QWORD)v524)
    {
      v283 = 0;
      v284 = 0;
      v285 = (_QWORD *)*((_QWORD *)&v524 + 1);
    }
    else
    {
      if ((uint64_t)(*((_QWORD *)&v524 + 1) - v524) < 0)
        abort();
      v283 = (char *)operator new(*((_QWORD *)&v524 + 1) - v524);
      bzero(v283, v282);
      v284 = &v283[v282];
      v285 = v280;
      if (v282 == 8)
        goto LABEL_636;
    }
    v286 = 0;
    v287 = v524;
    do
    {
      v289 = v286++;
      v288 = (v281 - (uint64_t)v285) >> 3;
      if (v286 < v288)
      {
        v290 = v109[4];
        v523 = v286;
        v291 = v286;
        while (1)
        {
          v299 = (_QWORD *)v285[v289];
          v300 = v285[v291];
          if (*(_QWORD *)(*v299 + 40) == v290)
          {
            v306 = (float32x2_t *)v299[7];
            if (!v306[11].i8[5])
              goto LABEL_466;
            v307 = *(float32x2_t **)(v300 + 56);
            if (v307[11].i8[5] && *(_QWORD *)&v306[2] == *(_QWORD *)&v307[2])
            {
              v304 = vneg_f32(*v307);
            }
            else
            {
              v308 = *(_QWORD *)(v300 + 64);
              if (!*(_BYTE *)(v308 - 3) || *(_QWORD *)&v306[2] != *(_QWORD *)(v308 - 40))
                goto LABEL_466;
              v304 = *(float32x2_t *)(v308 - 56);
            }
            v305 = *v306;
          }
          else
          {
            v301 = v299[8];
            if (!*(_BYTE *)(v301 - 3))
              goto LABEL_466;
            v302 = *(_QWORD *)(v300 + 64);
            if (*(_BYTE *)(v302 - 3) && *(_QWORD *)(v301 - 40) == *(_QWORD *)(v302 - 40))
            {
              v304 = *(float32x2_t *)(v301 - 56);
              v305 = vneg_f32(*(float32x2_t *)(v302 - 56));
            }
            else
            {
              v303 = *(float32x2_t **)(v300 + 56);
              if (!v303[11].i8[5] || *(_QWORD *)(v301 - 40) != *(_QWORD *)&v303[2])
                goto LABEL_466;
              v304 = *(float32x2_t *)(v301 - 56);
              v305 = *v303;
            }
          }
          if (vaddv_f32(vmul_f32(v304, v305)) > -0.70711)
            goto LABEL_448;
LABEL_466:
          if (!*(_QWORD *)&v283[8 * v289])
          {
            v309 = (unint64_t *)operator new();
            *v309 = 0;
            v309[1] = 0;
            v309[2] = 0;
            v310 = *(_QWORD *)&v283[8 * v289];
            *(_QWORD *)&v283[8 * v289] = v309;
            if (v310)
            {
              v311 = *(void **)v310;
              if (*(_QWORD *)v310)
              {
                *(_QWORD *)(v310 + 8) = v311;
                operator delete(v311);
              }
              MEMORY[0x1A1AF4E00](v310, 0x20C40960023A9, v309);
              v309 = *(unint64_t **)&v283[8 * v289];
            }
            md::TransitLink::populateEndPoints(**(_QWORD **)(v287 + 8 * v289), *(_QWORD *)(**(_QWORD **)(v287 + 8 * v289) + 40) == v109[4], v309);
            v280 = (_QWORD *)v287;
          }
          v312 = *(float ***)&v283[8 * v291];
          if (!v312)
          {
            v313 = (unint64_t *)operator new();
            *v313 = 0;
            v313[1] = 0;
            v313[2] = 0;
            v314 = *(_QWORD *)&v283[8 * v291];
            *(_QWORD *)&v283[8 * v291] = v313;
            if (v314)
            {
              v315 = *(void **)v314;
              if (*(_QWORD *)v314)
              {
                *(_QWORD *)(v314 + 8) = v315;
                operator delete(v315);
              }
              MEMORY[0x1A1AF4E00](v314, 0x20C40960023A9, v313);
              v313 = *(unint64_t **)&v283[8 * v291];
            }
            md::TransitLink::populateEndPoints(**(_QWORD **)(v287 + 8 * v291), *(_QWORD *)(**(_QWORD **)(v287 + 8 * v291) + 40) == v109[4], v313);
            v312 = *(float ***)&v283[8 * v291];
            v280 = (_QWORD *)v287;
          }
          v316 = **(float ***)&v283[8 * v289];
          v317 = *(_QWORD *)(*(_QWORD *)&v283[8 * v289] + 8) - (_QWORD)v316;
          v295 = 0;
          if ((unint64_t)v317 < 0x10)
            goto LABEL_447;
          v319 = v312;
          v318 = *v312;
          v320 = (char *)v319[1] - (char *)v318;
          if ((unint64_t)v320 < 0x10)
            goto LABEL_447;
          v322 = *v316;
          v321 = v316[1];
          v324 = *v318;
          v323 = v318[1];
          v325 = sqrtf((float)((float)(*v316 - *v318) * (float)(*v316 - *v318))+ (float)((float)(v321 - v323) * (float)(v321 - v323)));
          if (v325 >= 0.01)
            goto LABEL_447;
          v326 = 0;
          v327 = (float)(v324 + v322) * 0.5;
          v328 = (float)(v323 + v321) * 0.5;
          v329 = sqrtf((float)((float)(v327 - v322) * (float)(v327 - v322))+ (float)((float)(v328 - v321) * (float)(v328 - v321)));
          v330 = v317 >> 3;
          if (v330 <= 1)
            v331 = 1;
          else
            v331 = v330;
          v332 = v316 + 3;
          v333 = 0.0;
          v334 = 0.0;
          do
          {
            if (v331 - 1 == v326)
            {
              v347 = 1;
              v345 = 0.0;
              goto LABEL_495;
            }
            v335 = v326++;
            v336 = *(v332 - 1);
            v337 = *v332;
            v338 = v336 - v322;
            v339 = *v332 - v321;
            v334 = sqrtf((float)(v338 * v338) + (float)(v339 * v339));
            v332 += 2;
            v321 = v337;
            v322 = v336;
          }
          while (v334 <= 0.00000011921);
          v340 = &v316[2 * v335];
          v426 = v329 <= 0.0;
          v329 = sqrtf((float)((float)(v327 - v336) * (float)(v327 - v336))+ (float)((float)(v328 - v337) * (float)(v328 - v337)));
          v341 = (float)(1.0 / v334) * v338;
          v342 = (float)(1.0 / v334) * v339;
          v343 = v327 - *v340;
          v344 = v328 - v340[1];
          v345 = fabsf(-(float)((float)(v343 * v342) - (float)(v344 * v341)));
          v333 = (float)(v343 * v341) + (float)(v344 * v342);
          v346 = v426;
          if (v333 <= 0.0)
            v347 = 1;
          else
            v347 = v346;
          v331 = v326;
LABEL_495:
          v348 = 0;
          v349 = sqrtf((float)((float)(v327 - v324) * (float)(v327 - v324))+ (float)((float)(v328 - v323) * (float)(v328 - v323)));
          v350 = v320 >> 3;
          if (v350 <= 1)
            v351 = 1;
          else
            v351 = v350;
          v352 = v318 + 3;
          v353 = 0.0;
          v354 = 0.0;
          do
          {
            if (v351 - 1 == v348)
            {
              v367 = 1;
              v365 = 0.0;
              goto LABEL_509;
            }
            v355 = v348++;
            v356 = *(v352 - 1);
            v357 = *v352;
            v358 = v356 - v324;
            v359 = *v352 - v323;
            v354 = sqrtf((float)(v358 * v358) + (float)(v359 * v359));
            v352 += 2;
            v323 = v357;
            v324 = v356;
          }
          while (v354 <= 0.00000011921);
          v360 = &v318[2 * v355];
          v426 = v349 <= 0.0;
          v349 = sqrtf((float)((float)(v327 - v356) * (float)(v327 - v356))+ (float)((float)(v328 - v357) * (float)(v328 - v357)));
          v361 = (float)(1.0 / v354) * v358;
          v362 = (float)(1.0 / v354) * v359;
          v363 = v327 - *v360;
          v364 = v328 - v360[1];
          v353 = fabsf(-(float)((float)(v363 * v362) - (float)(v364 * v361)));
          v365 = (float)(v363 * v361) + (float)(v364 * v362);
          v366 = v426;
          if (v365 <= 0.0)
            v367 = 1;
          else
            v367 = v366;
          v351 = v348;
LABEL_509:
          v368 = 0.0;
          if (v331 >= v330 || !v347)
          {
            v292 = 0.0;
            v293.i32[0] = 0;
            v294 = 0.0;
            goto LABEL_446;
          }
          v292 = 0.0;
          v293 = 0;
          v294 = 0.0;
          v369 = 0.0;
          while (1)
          {
            if (v351 >= v350 || !v367)
            {
LABEL_575:
              v368 = v369;
              goto LABEL_446;
            }
            v370 = fminf(v349, v329);
            v371 = v370 * v370;
            if (v349 < v329)
            {
              *(float *)v278.i32 = sqrtf(v371 - (float)(v345 * v345)) + v333;
              *(float32x2_t *)&v279 = vmla_n_f32(*(float32x2_t *)&v316[2 * v331 - 2], vsub_f32(*(float32x2_t *)&v316[2 * v331], *(float32x2_t *)&v316[2 * v331 - 2]), *(float *)v278.i32 / v334);
              v505 = v279;
              if (v349 > v370)
              {
LABEL_516:
                v372 = sqrtf(v371 - (float)(v353 * v353)) + v365;
                v373 = v372;
                v504 = vmla_n_f32(*(float32x2_t *)&v318[2 * v351 - 2], vsub_f32(*(float32x2_t *)&v318[2 * v351], *(float32x2_t *)&v318[2 * v351 - 2]), v372 / v354);
                goto LABEL_519;
              }
            }
            else
            {
              *(float *)v278.i32 = v334;
              if (v349 > v370)
                goto LABEL_516;
            }
            v373 = v354;
            v372 = v354;
LABEL_519:
            v374 = &v316[2 * v331];
            v375 = v349 < v329 ? *(float *)&v505 : *v374;
            v376 = &v318[2 * v351];
            if (v349 > v370)
            {
              v377 = v504.f32[0];
              if (v349 < v329)
              {
LABEL_524:
                *((_QWORD *)&v279 + 1) = *((_QWORD *)&v505 + 1);
                LODWORD(v279) = DWORD1(v505);
                if (v349 > v370)
                  goto LABEL_525;
                goto LABEL_528;
              }
            }
            else
            {
              v377 = *v376;
              if (v349 < v329)
                goto LABEL_524;
            }
            *(float *)&v279 = v374[1];
            if (v349 > v370)
            {
LABEL_525:
              v378 = v504.f32[1];
              goto LABEL_529;
            }
LABEL_528:
            v378 = v376[1];
LABEL_529:
            v379 = sqrtf((float)((float)(v375 - v377) * (float)(v375 - v377))+ (float)((float)(*(float *)&v279 - v378) * (float)(*(float *)&v279 - v378)));
            if (v379 >= 0.01)
              break;
            if (v349 < v329)
            {
LABEL_553:
              if (v349 <= v370)
              {
LABEL_554:
                v292 = v292 + v354;
                if (v351 <= v350)
                  v396 = v350;
                else
                  v396 = v351;
                if (v350 <= v351 + 1)
                  v397 = v351 + 1;
                else
                  v397 = v350;
                v398 = &v318[2 * v351 + 2];
                do
                {
                  v369 = 0.0;
                  if (v396 == v351)
                  {
                    v351 = v396;
                    goto LABEL_573;
                  }
                  if (++v351 >= v350)
                  {
                    v351 = v397;
                    goto LABEL_573;
                  }
                  v399 = *v398;
                  v400 = v398[1];
                  v401 = *(v398 - 2);
                  v402 = *(v398 - 1);
                  v403 = *v398 - v401;
                  v404 = v400 - v402;
                  v354 = sqrtf((float)(v403 * v403) + (float)(v404 * v404));
                  v398 += 2;
                }
                while (v354 <= 0.00000011921);
                v426 = v349 <= 0.0;
                v349 = sqrtf((float)((float)(v327 - v399) * (float)(v327 - v399))+ (float)((float)(v328 - v400) * (float)(v328 - v400)));
                v405 = (float)(1.0 / v354) * v403;
                v406 = (float)(1.0 / v354) * v404;
                v407 = v327 - v401;
                v408 = v328 - v402;
                v353 = fabsf(-(float)((float)(v407 * v406) - (float)(v408 * v405)));
                v365 = (float)(v407 * v405) + (float)(v408 * v406);
                v367 = v426;
                if (v365 <= 0.0)
                  v367 = 1;
                goto LABEL_573;
              }
            }
            else
            {
              v294 = v294 + v334;
              if (v331 <= v330)
                v380 = v330;
              else
                v380 = v331;
              if (v330 <= v331 + 1)
                v381 = v331 + 1;
              else
                v381 = v330;
              v382 = &v316[2 * v331 + 2];
              v383 = v334;
              v384 = v331;
              do
              {
                if (v380 == v384 || !(_BYTE)v347)
                {
                  if (v380 == v384)
                  {
                    v334 = v383;
                    v331 = v380;
                  }
                  v278.i32[0] = 0;
                  goto LABEL_553;
                }
                ++v384;
                v278.i32[0] = 0;
                if (v384 >= v330)
                {
                  v334 = v383;
                  v331 = v381;
                  if (v349 <= v370)
                    goto LABEL_554;
                  goto LABEL_571;
                }
                v385 = *v382;
                v386 = v382[1];
                v387 = *(v382 - 2);
                v388 = *(v382 - 1);
                v389 = *v382 - v387;
                v390 = v386 - v388;
                v383 = sqrtf((float)(v389 * v389) + (float)(v390 * v390));
                v382 += 2;
              }
              while (v383 <= 0.00000011921);
              v426 = v329 <= 0.0;
              v329 = sqrtf((float)((float)(v327 - v385) * (float)(v327 - v385))+ (float)((float)(v328 - v386) * (float)(v328 - v386)));
              v391 = (float)(1.0 / v383) * v389;
              v392 = (float)(1.0 / v383) * v390;
              v393 = v327 - v387;
              v394 = v328 - v388;
              v345 = fabsf(-(float)((float)(v393 * v392) - (float)(v394 * v391)));
              v333 = (float)(v393 * v391) + (float)(v394 * v392);
              v395 = v426;
              if (v333 <= 0.0)
                LOBYTE(v347) = 1;
              else
                LOBYTE(v347) = v395;
              v334 = v383;
              v331 = v384;
              if (v349 <= v370)
                goto LABEL_554;
            }
LABEL_571:
            v369 = v373;
LABEL_573:
            v293 = vdup_lane_s32(v278, 0);
            if (v331 < v330)
            {
              v325 = v379;
              if ((_BYTE)v347)
                continue;
            }
            goto LABEL_575;
          }
          v409 = *(float *)v278.i32 - *(float *)&v293.i32[1];
          v410 = v372 - v369;
          v368 = 0.0;
          v411 = 0.0;
          if ((float)(v379 - v325) > 0.00000011921)
          {
            v412 = &v316[2 * v331];
            v414 = *(v412 - 2);
            v413 = *(v412 - 1);
            v415 = *v374 - v414;
            v416 = v374[1] - v413;
            v417 = &v318[2 * v351];
            v293.i32[0] = *(__int32 *)(v417 - 2);
            v418 = *(v417 - 1);
            v419 = *(float *)v293.i32 - *v376;
            v420 = v418 - v376[1];
            v411 = (float)(0.01 - v325) / (float)(v379 - v325);
            v421 = (float)(*(float *)&v293.i32[1] + (float)(v411 * v409)) / v334;
            v422 = (float)(v369 + (float)(v411 * v410)) / v354;
            v423 = (float)((float)(v414 + (float)(v415 * v421)) - *(float *)v293.i32) + (float)(v419 * v422);
            v424 = (float)((float)(v413 + (float)(v416 * v421)) - v418) + (float)(v420 * v422);
            v425 = sqrtf((float)(v423 * v423) + (float)(v424 * v424));
            if (fabsf(v425 + -0.01) > 0.001)
            {
              v426 = v425 <= 0.01;
              if (v425 > 0.01)
              {
                v427 = (float)(0.01 - v325) / (float)(v379 - v325);
              }
              else
              {
                v325 = v425;
                v427 = 1.0;
              }
              if (v425 <= 0.01)
                v425 = v379;
              if (v426)
                v428 = v411;
              else
                v428 = 0.0;
              if ((float)(v425 - v325) > 0.00000011921)
              {
                v411 = (float)((float)((float)(0.01 - v325) * (float)(v427 - v428)) / (float)(v425 - v325)) + v428;
                v429 = (float)(*(float *)&v293.i32[1] + (float)(v411 * v409)) / v334;
                v430 = (float)(v369 + (float)(v411 * v410)) / v354;
                v431 = (float)((float)(v414 + (float)(v415 * v429)) - *(float *)v293.i32) + (float)(v419 * v430);
                v432 = (float)((float)(v413 + (float)(v416 * v429)) - v418) + (float)(v420 * v430);
                v433 = sqrtf((float)(v431 * v431) + (float)(v432 * v432));
                if (fabsf(v433 + -0.01) > 0.001)
                {
                  if (v433 > 0.01)
                  {
                    v434 = (float)((float)((float)(0.01 - v325) * (float)(v427 - v428)) / (float)(v425 - v325)) + v428;
                  }
                  else
                  {
                    v325 = v433;
                    v434 = v427;
                  }
                  v435 = v433 <= 0.01 ? v425 : v433;
                  v436 = v433 <= 0.01 ? v411 : v428;
                  if ((float)(v435 - v325) > 0.00000011921)
                  {
                    v411 = (float)((float)((float)(0.01 - v325) * (float)(v434 - v436)) / (float)(v435 - v325)) + v436;
                    v437 = (float)(*(float *)&v293.i32[1] + (float)(v411 * v409)) / v334;
                    v438 = (float)(v369 + (float)(v411 * v410)) / v354;
                    v439 = (float)((float)(v414 + (float)(v415 * v437)) - *(float *)v293.i32) + (float)(v419 * v438);
                    v440 = (float)((float)(v413 + (float)(v416 * v437)) - v418) + (float)(v420 * v438);
                    v441 = sqrtf((float)(v439 * v439) + (float)(v440 * v440));
                    if (fabsf(v441 + -0.01) > 0.001)
                    {
                      if (v441 > 0.01)
                      {
                        v434 = (float)((float)((float)(0.01 - v325) * (float)(v434 - v436)) / (float)(v435 - v325))
                             + v436;
                        v435 = v441;
                      }
                      else
                      {
                        v325 = v441;
                      }
                      if (v441 <= 0.01)
                        v436 = v411;
                      if ((float)(v435 - v325) > 0.00000011921)
                      {
                        v411 = (float)((float)((float)(0.01 - v325) * (float)(v434 - v436)) / (float)(v435 - v325))
                             + v436;
                        v442 = (float)(*(float *)&v293.i32[1] + (float)(v411 * v409)) / v334;
                        v443 = (float)(v369 + (float)(v411 * v410)) / v354;
                        v444 = (float)((float)(v414 + (float)(v415 * v442)) - *(float *)v293.i32) + (float)(v419 * v443);
                        v445 = (float)((float)(v413 + (float)(v416 * v442)) - v418) + (float)(v420 * v443);
                        v446 = sqrtf((float)(v444 * v444) + (float)(v445 * v445));
                        if (fabsf(v446 + -0.01) > 0.001)
                        {
                          v447 = v446 <= 0.01 ? v446 : v325;
                          v448 = v446 <= 0.01
                               ? v434
                               : (float)((float)((float)(0.01 - v325) * (float)(v434 - v436)) / (float)(v435 - v325))
                               + v436;
                          if (v446 <= 0.01)
                          {
                            v449 = v411;
                          }
                          else
                          {
                            v435 = v446;
                            v449 = v436;
                          }
                          if ((float)(v435 - v447) > 0.00000011921)
                          {
                            v411 = (float)((float)((float)(0.01 - v447) * (float)(v448 - v449)) / (float)(v435 - v447))
                                 + v449;
                            v450 = (float)(*(float *)&v293.i32[1] + (float)(v411 * v409)) / v334;
                            v451 = (float)(v369 + (float)(v411 * v410)) / v354;
                            v452 = (float)((float)(v414 + (float)(v415 * v450)) - *(float *)v293.i32)
                                 + (float)(v419 * v451);
                            v453 = (float)((float)(v413 + (float)(v416 * v450)) - v418) + (float)(v420 * v451);
                            v454 = sqrtf((float)(v452 * v452) + (float)(v453 * v453));
                            if (fabsf(v454 + -0.01) > 0.001)
                            {
                              v455 = v454 <= 0.01 ? v454 : v447;
                              v456 = v454 <= 0.01 ? v435 : v454;
                              v457 = v456 - v455;
                              if (v457 > 0.00000011921)
                              {
                                v458 = v454 <= 0.01;
                                if (v454 <= 0.01)
                                  v459 = (float)((float)((float)(0.01 - v447) * (float)(v448 - v449))
                                               / (float)(v435 - v447))
                                       + v449;
                                else
                                  v459 = v449;
                                if (v458)
                                  v411 = v448;
                                v411 = (float)((float)((float)(0.01 - v455) * (float)(v411 - v459)) / v457) + v459;
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          v294 = (float)(v294 + *(float *)&v293.i32[1]) + (float)(v409 * v411);
          v292 = (float)(v292 + v369) + (float)(v410 * v411);
          v293.i32[0] = 0;
LABEL_446:
          *(float *)&v295 = *(float *)v293.i32 + v294;
          *((float *)&v295 + 1) = v368 + v292;
LABEL_447:
          v296 = v280[v289];
          v297 = v280[v291];
          v290 = v109[4];
          v298 = *(_QWORD *)(*(_QWORD *)v296 + 40) != v290;
          *(float *)(v296 + 4 * v298 + 236) = fmaxf(*(float *)(v296 + 4 * v298 + 236), *(float *)&v295);
          LODWORD(v296) = *(_QWORD *)(*(_QWORD *)v297 + 40) != v290;
          *(float *)(v297 + 4 * v296 + 236) = fmaxf(*(float *)(v297 + 4 * v296 + 236), *((float *)&v295 + 1));
          v285 = v280;
          v281 = *((_QWORD *)&v287 + 1);
LABEL_448:
          if (++v291 >= (v281 - (uint64_t)v285) >> 3)
          {
            v288 = (v281 - (uint64_t)v285) >> 3;
            v286 = v523;
            break;
          }
        }
      }
    }
    while (v286 < v288 - 1);
    v1 = (geo::codec::VectorTile **)v506;
    if (!v283)
    {
      if (!v285)
        continue;
LABEL_641:
      *((_QWORD *)&v524 + 1) = v285;
      operator delete(v285);
      continue;
    }
LABEL_636:
    while (v284 != v283)
    {
      v461 = *((_QWORD *)v284 - 1);
      v284 -= 8;
      v460 = v461;
      *(_QWORD *)v284 = 0;
      if (v461)
      {
        v462 = *(void **)v460;
        if (*(_QWORD *)v460)
        {
          *(_QWORD *)(v460 + 8) = v462;
          operator delete(v462);
        }
        MEMORY[0x1A1AF4E00](v460, 0x20C40960023A9);
      }
    }
    operator delete(v283);
    v285 = (_QWORD *)v524;
    if ((_QWORD)v524)
      goto LABEL_641;
  }
  v466 = v1[117];
  v1[117] = (geo::codec::VectorTile *)v502;
  if (v466)
  {
    v467 = (_QWORD *)*((_QWORD *)v466 + 2);
    if (v467)
    {
      do
      {
        v468 = (_QWORD *)*v467;
        md::TransitJunction::~TransitJunction((md::TransitJunction *)(v467 + 3));
        operator delete(v467);
        v467 = v468;
      }
      while (v468);
    }
    v469 = *(void **)v466;
    *(_QWORD *)v466 = 0;
    if (v469)
      operator delete(v469);
    MEMORY[0x1A1AF4E00](v466, 0x10A0C408EF24B1CLL);
  }
  v470 = v1[111];
  v471 = v1[112];
  if (v470 != v471)
  {
    while (2)
    {
      if (*(_DWORD *)(*(_QWORD *)v470 + 20))
      {
        v472 = (geo::codec::VectorTile *)*((_QWORD *)v470 + 1);
        if (v472)
        {
          v473 = (_BYTE *)geo::codec::VectorTile::transitVertices(v472);
          if (v473)
          {
            v474 = (_BYTE *)*((_QWORD *)v470 + 7);
            v475 = (_BYTE *)*((_QWORD *)v470 + 8);
            if (v474 != v475)
            {
              v476 = 1.0 / (float)(1 << *v473);
              v477 = *((_QWORD *)v470 + 7);
              do
              {
                if (*(_BYTE *)(v477 + 92))
                {
                  v478 = *(float *)(v477 + 16);
                  if (fabsf(v478) <= v476)
                  {
                    *(_BYTE *)(v477 + 33) = 3;
                  }
                  else if (fabsf(v478 + -1.0) <= v476)
                  {
                    *(_BYTE *)(v477 + 33) = 1;
                  }
                  else
                  {
                    v479 = *(float *)(v477 + 20);
                    if (fabsf(v479) <= v476)
                    {
                      *(_BYTE *)(v477 + 33) = 2;
                    }
                    else if (fabsf(v479 + -1.0) <= v476)
                    {
                      *(_BYTE *)(v477 + 33) = 0;
                    }
                    else
                    {
                      *(_BYTE *)(v477 + 33) = 4;
                    }
                  }
                  v480 = *(float *)(v477 + 56);
                  if (fabsf(v480) <= v476)
                  {
                    *(_BYTE *)(v477 + 73) = 3;
                  }
                  else if (fabsf(v480 + -1.0) <= v476)
                  {
                    *(_BYTE *)(v477 + 73) = 1;
                  }
                  else
                  {
                    v481 = *(float *)(v477 + 60);
                    if (fabsf(v481) <= v476)
                    {
                      *(_BYTE *)(v477 + 73) = 2;
                    }
                    else if (fabsf(v481 + -1.0) <= v476)
                    {
                      *(_BYTE *)(v477 + 73) = 0;
                    }
                    else
                    {
                      *(_BYTE *)(v477 + 73) = 4;
                    }
                  }
                }
                v477 += 96;
              }
              while ((_BYTE *)v477 != v475);
            }
            v482 = 0xAAAAAAAAAAAAAAABLL * ((v475 - v474) >> 5);
            if (v482 > 1)
            {
              if (v474[73] != 4)
                v474[72] = 2;
              if (*(v475 - 63) != 4)
                *(v475 - 64) = 2;
              if (v482 - 1 >= 2)
              {
                v483 = v482 - 2;
                v484 = v474 + 169;
                do
                {
                  if (*(v484 - 40) != 4)
                    *(v484 - 41) = 2;
                  if (*v484 != 4)
                    *(v484 - 1) = 2;
                  v484 += 96;
                  --v483;
                }
                while (v483);
              }
            }
            v485 = geo::codec::VectorTile::transitLinkSections(*((geo::codec::VectorTile **)v470 + 1));
            if (v485)
            {
              v486 = (float *)(v485 + 8 * *(unsigned int *)(*(_QWORD *)v470 + 16));
              v487 = v486[2 * *(unsigned int *)(*(_QWORD *)v470 + 20) - 1] == 1.0;
              if (*v486 == 0.0)
                goto LABEL_702;
            }
            else
            {
              v487 = 0;
            }
            v488 = *((_QWORD *)v470 + 7);
            if (*(_BYTE *)(v488 + 33) != 4)
              *(_BYTE *)(v488 + 32) = 2;
LABEL_702:
            v489 = *((_QWORD *)v470 + 8);
            if (*(_BYTE *)(v489 - 23) == 4)
              v487 = 1;
            if (!v487)
              *(_BYTE *)(v489 - 24) = 2;
          }
        }
      }
      v470 = (geo::codec::VectorTile *)((char *)v470 + 248);
      if (v470 == v471)
        break;
      continue;
    }
  }
  md::TransitTileData::createNodes((geo::codec::VectorTile **)v506);
  v490 = *((id *)v506 + 95);
  (*(void (**)(_QWORD *__return_ptr))(*(_QWORD *)objc_msgSend(v490, "gglDevice") + 24))(v527);

  md::TransitTileData::createDisplayConnections((id *)v506, (ggl::Loader *)v527);
  result = v527[0];
  if (v527[0])
  {
    v492 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v527[0] + 24))(v527[0]);
    v493 = v527[0];
    v527[0] = 0;
    *(_QWORD *)&v524 = v493;
    (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)v492 + 48))(v492, &v524);
    v494 = v524;
    *(_QWORD *)&v524 = 0;
    if (v494)
      (*(void (**)(uint64_t))(*(_QWORD *)v494 + 8))(v494);
    result = v527[0];
    v527[0] = 0;
    if (result)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

void sub_19F91E78C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,void *a24,uint64_t a25,void *__p)
{
  _QWORD *v27;
  _QWORD *v28;
  void *v29;

  if (__p)
    operator delete(__p);
  v27 = *(_QWORD **)(a11 + 16);
  if (v27)
  {
    do
    {
      v28 = (_QWORD *)*v27;
      md::TransitJunction::~TransitJunction((md::TransitJunction *)(v27 + 3));
      operator delete(v27);
      v27 = v28;
    }
    while (v28);
  }
  v29 = *(void **)a11;
  *(_QWORD *)a11 = 0;
  if (v29)
    operator delete(v29);
  MEMORY[0x1A1AF4E00](a11, 0x10A0C408EF24B1CLL);
  _Unwind_Resume(a1);
}

void md::TransitTileData::createNodes(geo::codec::VectorTile **this)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  geo::codec::VectorTile **v11;
  uint64_t v12;
  geo::codec::VectorTile *v13;
  geo::codec::VectorTile *v14;
  void *v15;
  geo::codec::VectorTile *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  geo::codec::VectorTile *v22;
  geo::codec::VectorTile *v23;
  geo::codec::VectorTile *v24;
  __int128 v25;
  geo::codec::VectorTile *v26;
  std::__shared_weak_count *v27;
  unint64_t *p_shared_owners;
  unint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  uint64_t *v32;
  uint64_t *v33;
  uint64_t **v34;
  uint64_t **v35;
  uint64_t *v36;
  uint64_t j;
  unint64_t *v38;
  unint64_t v39;
  __n128 v40;
  size_t v41;
  unint64_t *v42;
  unint64_t v43;
  __n128 v44;
  unint64_t v45;
  __n128 v46;
  void *v47;
  char *v48;
  uint64_t v49;
  unint64_t v50;
  char *v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t i;
  _QWORD *v58;
  uint64_t v59;
  unint64_t v60;
  uint8x8_t v61;
  unint64_t v62;
  uint64_t v63;
  char v64;
  uint64_t v65;
  _QWORD *v66;
  unint64_t *v67;
  unint64_t v68;
  uint8x8_t v69;
  uint64_t v70;
  char v71;
  char v72;
  unint64_t v73;
  unint64_t v74;
  _QWORD *v75;
  _QWORD *v76;
  uint64_t v77;
  uint64_t v78;
  BOOL v79;
  uint64_t v80;
  unint64_t v81;
  _QWORD *v82;
  _QWORD *v83;
  _QWORD *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  _QWORD *v89;
  _QWORD *v90;
  uint64_t v91;
  _QWORD *v92;
  _QWORD *v93;
  uint64_t v94;
  _QWORD *v95;
  _QWORD *v96;
  unint64_t v97;
  unint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  unint64_t v102;
  unint64_t v103;
  _QWORD *v104;
  _QWORD *v105;
  uint64_t v106;
  uint64_t v107;
  _QWORD *v108;
  _QWORD *v109;
  uint64_t v110;
  _QWORD *v111;
  _QWORD *v112;
  uint64_t v113;
  _QWORD *v114;
  _QWORD *v115;
  unint64_t v116;
  unint64_t v117;
  unint64_t v118;
  _QWORD *v119;
  geo::codec::VectorTile **v120;
  _QWORD *v121;
  _QWORD *v122;
  _QWORD *v123;
  _QWORD *v124;
  unint64_t v125;
  uint64_t *v126;
  uint64_t *v127;
  uint64_t **v128;
  uint64_t **v129;
  uint64_t *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t *v133;
  unint64_t v134;
  uint64_t **v135;
  unint64_t v136;
  _QWORD *v137;
  uint64_t *v138;
  unint64_t v139;
  BOOL v140;
  _QWORD *v141;
  _QWORD *v142;
  unint64_t v143;
  BOOL v144;
  _QWORD *v145;
  char *v146;
  char *v147;
  char *v148;
  uint64_t v149;
  _QWORD *v150;
  uint64_t v151;
  _QWORD *v152;
  _QWORD *v153;
  uint64_t *v154;
  unint64_t v155;
  uint64_t **v156;
  unint64_t v157;
  int64_t v158;
  uint64_t v159;
  unint64_t v160;
  unint64_t v161;
  char *v162;
  unint64_t v163;
  _BYTE *v164;
  char *v165;
  unint64_t v166;
  char *v167;
  uint64_t v168;
  char *v169;
  uint64_t *v170;
  uint64_t **v171;
  uint64_t v172;
  _OWORD *v173;
  __int128 *v174;
  uint64_t v175;
  __int128 v176;
  _QWORD *v177;
  uint64_t *v178;
  unint64_t v179;
  BOOL v180;
  _QWORD *v181;
  _QWORD *v182;
  unint64_t v183;
  BOOL v184;
  _QWORD *v185;
  unint64_t v186;
  uint64_t v187;
  uint64_t *v188;
  _QWORD *v189;
  _QWORD *v190;
  uint64_t **v191;
  int64_t v192;
  uint64_t v193;
  unint64_t v194;
  unint64_t v195;
  unint64_t v196;
  _BYTE *v197;
  char *v198;
  unint64_t v199;
  char *v200;
  uint64_t v201;
  _OWORD *v202;
  __int128 *v203;
  uint64_t v204;
  __int128 v205;
  uint64_t v206;
  char *v207;
  _QWORD *v208;
  _QWORD *v209;
  uint64_t v210;
  uint64_t v211;
  unint64_t v212;
  float v213;
  float32x2_t v214;
  float v215;
  _QWORD *v216;
  uint64_t v217;
  geo::codec::VectorTile *v218;
  char *v219;
  std::__shared_weak_count *v220;
  unint64_t *v221;
  unint64_t v222;
  char *v223;
  unint64_t *v224;
  _QWORD *v225;
  uint64_t v226;
  uint64_t v227;
  geo::codec::VectorTile **v228;
  geo::codec::VectorTile *v229;
  unint64_t v230;
  geo::codec::VectorTile *v231;
  uint64_t v232;
  unint64_t v233;
  uint64_t v234;
  unint64_t v235;
  char *v236;
  geo::codec::VectorTile *v237;
  geo::codec::VectorTile *v238;
  geo::codec::VectorTile *v239;
  __int128 v240;
  geo::codec::VectorTile *v241;
  std::__shared_weak_count *v242;
  unint64_t *v243;
  unint64_t v244;
  std::__shared_weak_count *v245;
  unint64_t *v246;
  unint64_t v247;
  char *v248;
  char *v249;
  unint64_t v250;
  geo::codec::VectorTile *v251;
  uint64_t v252;
  geo::codec::VectorTile *v253;
  geo::codec::VectorTile *v254;
  uint64_t v255;
  unint64_t v256;
  unint64_t v257;
  unint64_t v258;
  unint64_t v259;
  char *v260;
  uint64_t v261;
  char *v262;
  char *v263;
  geo::codec::VectorTile *v264;
  uint64_t v265;
  unint64_t *v266;
  unint64_t v267;
  char *v268;
  geo::codec::VectorTile *v269;
  geo::codec::VectorTile *v270;
  uint64_t v271;
  unint64_t *v272;
  unint64_t v273;
  geo::codec::VectorTile *v274;
  geo::codec::VectorTile *v275;
  __int128 v276;
  geo::codec::VectorTile *v277;
  std::__shared_weak_count *v278;
  unint64_t *v279;
  unint64_t v280;
  geo::codec::VectorTile *v281;
  geo::codec::VectorTile *v282;
  _QWORD *v283;
  char *v284;
  char *v285;
  unint64_t v286;
  geo::codec::VectorTile *v287;
  uint64_t v288;
  geo::codec::VectorTile *v289;
  geo::codec::VectorTile *v290;
  uint64_t v291;
  unint64_t v292;
  unint64_t v293;
  unint64_t v294;
  unint64_t v295;
  char *v296;
  __int128 v297;
  unint64_t *v298;
  unint64_t v299;
  uint64_t v300;
  uint64_t v301;
  unint64_t *v302;
  unint64_t v303;
  unint64_t *v304;
  unint64_t v305;
  uint64_t v306;
  char *v307;
  char *v308;
  geo::codec::VectorTile *v309;
  uint64_t v310;
  unint64_t *v311;
  unint64_t v312;
  char *v313;
  geo::codec::VectorTile *v314;
  geo::codec::VectorTile *v315;
  uint64_t v316;
  unint64_t *v317;
  unint64_t v318;
  geo::codec::VectorTile *v319;
  geo::codec::VectorTile *v320;
  __int128 v321;
  geo::codec::VectorTile *v322;
  std::__shared_weak_count *v323;
  unint64_t *v324;
  unint64_t v325;
  geo::codec::VectorTile *v326;
  geo::codec::VectorTile *v327;
  _QWORD *v328;
  char *v329;
  char *v330;
  unint64_t v331;
  geo::codec::VectorTile *v332;
  uint64_t v333;
  geo::codec::VectorTile *v334;
  geo::codec::VectorTile *v335;
  uint64_t v336;
  unint64_t v337;
  unint64_t v338;
  unint64_t v339;
  unint64_t v340;
  char *v341;
  __int128 v342;
  unint64_t *v343;
  unint64_t v344;
  uint64_t v345;
  uint64_t v346;
  unint64_t *v347;
  unint64_t v348;
  unint64_t *v349;
  unint64_t v350;
  uint64_t v351;
  char *v352;
  char *v353;
  geo::codec::VectorTile *v354;
  uint64_t v355;
  unint64_t *v356;
  unint64_t v357;
  char *v358;
  geo::codec::VectorTile *v359;
  geo::codec::VectorTile *v360;
  uint64_t v361;
  unint64_t *v362;
  unint64_t v363;
  geo::codec::VectorTile *v364;
  geo::codec::VectorTile *v365;
  __int128 v366;
  geo::codec::VectorTile *v367;
  std::__shared_weak_count *v368;
  unint64_t *v369;
  unint64_t v370;
  geo::codec::VectorTile *v371;
  geo::codec::VectorTile *v372;
  _QWORD *v373;
  void **v374;
  char *v375;
  char *v376;
  unint64_t v377;
  uint64_t v378;
  geo::codec::VectorTile *v379;
  geo::codec::VectorTile *v380;
  geo::codec::VectorTile *v381;
  std::__shared_weak_count *v382;
  unint64_t *v383;
  unint64_t v384;
  __int128 v385;
  unint64_t *v386;
  unint64_t v387;
  uint64_t v388;
  uint64_t v389;
  unint64_t *v390;
  unint64_t v391;
  unint64_t *v392;
  unint64_t v393;
  geo::codec::VectorTile *v394;
  unint64_t v395;
  char *v396;
  geo::codec::VectorTile **k;
  uint64_t v398;
  uint64_t v399;
  unint64_t *v400;
  unint64_t v401;
  unint64_t *v402;
  unint64_t v403;
  uint64_t v404;
  uint64_t v405;
  unint64_t *v406;
  unint64_t v407;
  unint64_t *v408;
  unint64_t v409;
  uint64_t v410;
  uint64_t v411;
  unint64_t *v412;
  unint64_t v413;
  unint64_t *v414;
  unint64_t v415;
  geo::codec::VectorTile *v416;
  uint64_t v417;
  unint64_t *v418;
  unint64_t v419;
  char *v420;
  char *v421;
  geo::codec::VectorTile *v422;
  uint64_t v423;
  geo::codec::VectorTile *v424;
  geo::codec::VectorTile *v425;
  uint64_t v426;
  unint64_t v427;
  uint64_t v428;
  unint64_t v429;
  char *v430;
  uint64_t v431;
  char *v432;
  char *v433;
  geo::codec::VectorTile *v434;
  uint64_t v435;
  unint64_t *v436;
  unint64_t v437;
  char *v438;
  geo::codec::VectorTile *v439;
  geo::codec::VectorTile *v440;
  uint64_t v441;
  unint64_t *v442;
  unint64_t v443;
  geo::codec::VectorTile *v444;
  geo::codec::VectorTile *v445;
  __int128 v446;
  geo::codec::VectorTile *v447;
  std::__shared_weak_count *v448;
  unint64_t *v449;
  unint64_t v450;
  geo::codec::VectorTile *v451;
  geo::codec::VectorTile *v452;
  geo::codec::VectorTile *v453;
  geo::codec::VectorTile *v454;
  geo::codec::VectorTile *m;
  geo::codec::VectorTile *v456;
  _QWORD *v457;
  uint64_t v458;
  unsigned __int16 v459;
  int v460;
  unint64_t v461;
  geo::codec::VectorTile *v462;
  unint64_t v463;
  unint64_t v464;
  uint8x8_t v465;
  void **v466;
  char *v467;
  unint64_t v468;
  uint64_t v469;
  float v470;
  float v471;
  _BOOL8 v472;
  unint64_t v473;
  unint64_t v474;
  size_t v475;
  geo::codec::VectorTile *v476;
  geo::codec::VectorTile *v477;
  uint64_t v478;
  _QWORD *v479;
  size_t v480;
  size_t v481;
  size_t v482;
  _QWORD *n;
  size_t v484;
  geo::codec::VectorTile *v485;
  uint64_t v486;
  unint64_t v487;
  uint8x8_t v488;
  uint64_t v489;
  _QWORD *v490;
  uint64_t v491;
  size_t v492;
  geo::codec::VectorTile *v493;
  geo::codec::VectorTile *v494;
  _QWORD *v495;
  unint64_t v496;
  uint64_t v497;
  uint64_t v498;
  unint64_t v499;
  unint64_t v500;
  unint64_t v501;
  unint64_t v502;
  uint8x8_t v503;
  _QWORD *v504;
  _QWORD *v505;
  unint64_t v506;
  uint64_t v507;
  _QWORD *v508;
  float v509;
  float v510;
  _BOOL8 v511;
  unint64_t v512;
  unint64_t v513;
  size_t prime;
  void *v515;
  void *v516;
  uint64_t v517;
  _QWORD *v518;
  char *v519;
  size_t v520;
  size_t v521;
  size_t v522;
  _QWORD *v523;
  size_t v524;
  uint64_t v525;
  uint64_t v526;
  unint64_t v527;
  uint8x8_t v528;
  uint64_t v529;
  _QWORD *v530;
  uint64_t v531;
  size_t v532;
  uint64_t v533;
  geo::codec::VectorTile *v534;
  void *v535;
  uint64_t v536;
  _QWORD *v537;
  unint64_t v538;
  uint64_t v539;
  _QWORD *v540;
  _QWORD *v541;
  void *v542;
  __int128 v543;
  unint64_t *v544;
  unint64_t v545;
  uint64_t v546;
  uint64_t v547;
  unint64_t *v548;
  unint64_t v549;
  unint64_t *v550;
  unint64_t v551;
  char *ii;
  _QWORD *v553;
  _QWORD *v554;
  void *v555;
  _QWORD *v556;
  size_t __sz;
  uint64_t v558;
  int64_t v559;
  unint64_t v560;
  uint64_t v561;
  uint64_t v562;
  uint64_t v563;
  _QWORD *v564;
  char **v565;
  char v566;
  _QWORD *v567;
  geo::codec::VectorTile **v568;
  _QWORD *v569;
  uint64_t v570;
  uint64_t v571;
  _QWORD *v572;
  unint64_t *v573;
  char *v574;
  char *v575;
  char *v576;
  geo::codec::VectorTile *v577;
  void *__p[2];
  char *__pa;
  char *__p_8;
  unint64_t v581;
  uint64_t v582;
  uint64_t **v583;
  uint64_t *v584;
  uint64_t v585;
  uint64_t **v586;
  uint64_t *v587;
  uint64_t v588;
  __int128 v589;
  __int128 v590;
  int v591;
  __int128 v592;
  char v593;

  v561 = geo::codec::VectorTile::transitNodes(this[90]);
  v2 = geo::codec::VectorTile::transitNodeCount(this[90]);
  v3 = geo::codec::VectorTile::transitNodeCollapseIDCount(this[90]);
  v573 = (unint64_t *)geo::codec::VectorTile::transitNodeCollapseIDs(this[90]);
  v4 = geo::codec::VectorTile::transitNodeCollapseIndices(this[90]);
  __sz = geo::codec::VectorTile::transitLinkCount(this[90]);
  v568 = this;
  v560 = v2;
  v570 = geo::codec::VectorTile::transitLinks(this[90]);
  if (v2)
  {
    if (v2 >> 61)
      abort();
    v5 = operator new(8 * v2);
    bzero(v5, 8 * v2);
    v6 = 0;
    v589 = 0u;
    v590 = 0u;
    v591 = 1065353216;
    v587 = 0;
    v588 = 0;
    v586 = &v587;
    v7 = v561;
    while (1)
    {
      v8 = std::__hash_table<std::__hash_value_type<altitude::Tile *,unsigned int>,std::__unordered_map_hasher<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::hash<altitude::Tile *>,std::equal_to<altitude::Tile *>,true>,std::__unordered_map_equal<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::equal_to<altitude::Tile *>,std::hash<altitude::Tile *>,true>,std::allocator<std::__hash_value_type<altitude::Tile *,unsigned int>>>::find<altitude::Tile *>(v568[117], *(_QWORD *)(v7 + 240));
      if (v8)
        v9 = v8 + 3;
      else
        v9 = 0;
      if (!v8 || *(_BYTE *)(v7 + 321) || !*(_WORD *)(v7 + 276))
        goto LABEL_36;
      v10 = operator new(0xA8uLL);
      v10[1] = 0;
      v10[2] = 0;
      *v10 = &off_1E42DC628;
      v11 = v568;
      v12 = md::TransitConnectedNode::TransitConnectedNode((uint64_t)(v10 + 3), (uint64_t *)v7, v568 + 108, v9, *((float *)v568 + 337));
      __p[0] = (void *)v12;
      __p[1] = v10;
      v13 = v568[125];
      v14 = v568[126];
      if (v13 >= v14)
        break;
      *(_QWORD *)v13 = v12;
      *((_QWORD *)v13 + 1) = v10;
      v568[125] = (geo::codec::VectorTile *)((char *)v13 + 16);
LABEL_35:
      *((_QWORD *)v5 + v6) = *((_QWORD *)v11[125] - 2);
LABEL_36:
      std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)&v589, *(_QWORD *)(v7 + 40), (_QWORD *)(v7 + 40))[3] = v6;
      v30 = *(unint64_t **)(v7 + 256);
      if (v30)
      {
        v31 = *v30;
        v32 = (uint64_t *)operator new(0x30uLL);
        v33 = v32;
        v32[4] = v31;
        v32[5] = v6;
        v34 = &v587;
        v35 = &v587;
        v36 = v587;
        if (v587)
        {
          do
          {
            while (1)
            {
              v34 = (uint64_t **)v36;
              if (v31 >= v36[4])
                break;
              v36 = (uint64_t *)*v36;
              v35 = v34;
              if (!*v34)
                goto LABEL_44;
            }
            v36 = (uint64_t *)v36[1];
          }
          while (v36);
          v35 = v34 + 1;
        }
LABEL_44:
        *v32 = 0;
        v32[1] = 0;
        v32[2] = (uint64_t)v34;
        *v35 = v32;
        if (*v586)
        {
          v586 = (uint64_t **)*v586;
          v33 = *v35;
        }
        std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(v587, v33);
        ++v588;
      }
      ++v6;
      v7 += 344;
      if (v6 == v2)
        goto LABEL_49;
    }
    v15 = v5;
    v16 = v568[124];
    v17 = (v13 - v16) >> 4;
    v18 = v17 + 1;
    if ((unint64_t)(v17 + 1) >> 60)
      abort();
    v19 = v14 - v16;
    if (v19 >> 3 > v18)
      v18 = v19 >> 3;
    if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFF0)
      v20 = 0xFFFFFFFFFFFFFFFLL;
    else
      v20 = v18;
    if (v20 >> 60)
      goto LABEL_901;
    v21 = (char *)operator new(16 * v20);
    v22 = (geo::codec::VectorTile *)&v21[16 * v17];
    *(_OWORD *)v22 = *(_OWORD *)__p;
    v23 = (geo::codec::VectorTile *)((char *)v22 + 16);
    v24 = (geo::codec::VectorTile *)&v21[16 * v20];
    if (v13 == v16)
    {
      v568[124] = v22;
      v568[125] = v23;
      v568[126] = v24;
      v5 = v15;
    }
    else
    {
      do
      {
        v25 = *((_OWORD *)v13 - 1);
        v13 = (geo::codec::VectorTile *)((char *)v13 - 16);
        *((_OWORD *)v22 - 1) = v25;
        v22 = (geo::codec::VectorTile *)((char *)v22 - 16);
        *(_QWORD *)v13 = 0;
        *((_QWORD *)v13 + 1) = 0;
      }
      while (v13 != v16);
      v13 = v568[124];
      v26 = v568[125];
      v568[124] = v22;
      v568[125] = v23;
      v568[126] = v24;
      v5 = v15;
      if (v26 == v13)
      {
        if (!v13)
          goto LABEL_34;
        goto LABEL_33;
      }
      do
      {
        v27 = (std::__shared_weak_count *)*((_QWORD *)v26 - 1);
        if (v27)
        {
          p_shared_owners = (unint64_t *)&v27->__shared_owners_;
          do
            v29 = __ldaxr(p_shared_owners);
          while (__stlxr(v29 - 1, p_shared_owners));
          if (!v29)
          {
            ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
            std::__shared_weak_count::__release_weak(v27);
          }
        }
        v26 = (geo::codec::VectorTile *)((char *)v26 - 16);
      }
      while (v26 != v13);
    }
    if (!v13)
    {
LABEL_34:
      v11 = v568;
      v568[125] = v23;
      v2 = v560;
      goto LABEL_35;
    }
LABEL_33:
    operator delete(v13);
    goto LABEL_34;
  }
  v5 = 0;
  v589 = 0u;
  v590 = 0u;
  v591 = 1065353216;
  v587 = 0;
  v588 = 0;
  v586 = &v587;
LABEL_49:
  j = v2;
  if (v3)
  {
    v38 = v573;
    j = v2;
    do
    {
      v39 = *v38++;
      v40.n128_u64[0] = v39;
      v40.n128_u64[1] = j;
      j += std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long>>>::__emplace_unique_key_args<unsigned long long,std::pair<unsigned long long,unsigned long>>((uint64_t)&v589, v39, v40) & 1;
      --v3;
    }
    while (v3);
  }
  v41 = __sz;
  if (__sz)
  {
    v42 = (unint64_t *)(v570 + 64);
    do
    {
      v43 = *(v42 - 1);
      v44.n128_u64[0] = *v42;
      v44.n128_u64[1] = j;
      v45 = (std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long>>>::__emplace_unique_key_args<unsigned long long,std::pair<unsigned long long,unsigned long>>((uint64_t)&v589, *v42, v44) & 1)+ j;
      v46.n128_u64[0] = v43;
      v46.n128_u64[1] = v45;
      v42 += 23;
      j = (std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long>>>::__emplace_unique_key_args<unsigned long long,std::pair<unsigned long long,unsigned long>>((uint64_t)&v589, v43, v46) & 1)+ v45;
      --v41;
    }
    while (v41);
  }
  if (j)
  {
    if ((unint64_t)j >> 61)
      abort();
    v47 = operator new(8 * j);
    bzero(v47, 8 * j);
  }
  else
  {
    v47 = 0;
  }
  __pa = 0;
  __p_8 = 0;
  v581 = j;
  v584 = 0;
  v585 = 0;
  v582 = j;
  *(_QWORD *)&v592 = 0;
  v556 = v5;
  if (!j)
  {
    v56 = 0;
    v49 = v570;
    goto LABEL_74;
  }
  v48 = (char *)operator new(8 * j);
  v49 = v570;
  v50 = (j - 1) & 0x1FFFFFFFFFFFFFFFLL;
  v51 = v48;
  if (v50 >= 0x13)
  {
    if (v48 >= (char *)&v592 + 8 || (v51 = v48, &v48[8 * j] <= (char *)&v592))
    {
      v52 = (v50 + 1) & 0x3FFFFFFFFFFFFFFCLL;
      v53 = v48;
      v54 = v52;
      do
      {
        *(_OWORD *)v53 = 0uLL;
        *((_OWORD *)v53 + 1) = 0uLL;
        v53 += 32;
        v54 -= 4;
      }
      while (v54);
      if (v50 + 1 == v52)
        goto LABEL_71;
      v51 = &v48[8 * v52];
    }
  }
  v55 = v592;
  do
  {
    *(_QWORD *)v51 = v55;
    v51 += 8;
  }
  while (v51 != &v48[8 * j]);
LABEL_71:
  __pa = v48;
  __p_8 = &v48[8 * j];
  for (i = 0; i != j; ++i)
  {
    v58 = (_QWORD *)operator new();
    *v58 = 0;
    v58[1] = i;
    v58[2] = 0;
    *(_QWORD *)&__pa[8 * i] = v58;
  }
  v56 = j;
LABEL_74:
  v569 = v47;
  if (__sz)
  {
    v59 = 0;
    v60 = *((_QWORD *)&v589 + 1);
    v61 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&v589 + 8));
    v61.i16[0] = vaddlv_u8(v61);
    v62 = v61.u32[0];
    v63 = *((_QWORD *)&v589 + 1) - 1;
    v562 = v4;
    do
    {
      v558 = v59;
      v64 = 0;
      v65 = 0;
      v66 = (_QWORD *)(v49 + 64);
      v571 = v49;
      v67 = (unint64_t *)(v49 + 56);
      v68 = *((_QWORD *)&v589 + 1);
      v69 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&v589 + 8));
      v69.i16[0] = vaddlv_u8(v69);
      j = v69.u32[0];
      v70 = *((_QWORD *)&v589 + 1) - 1;
      v71 = 1;
      v564 = v66;
      do
      {
        if (!v60)
          goto LABEL_900;
        v72 = v64;
        v73 = *v67;
        if (v62 > 1)
        {
          v74 = *v67;
          if (v73 >= v60)
            v74 = v73 % v60;
        }
        else
        {
          v74 = v63 & v73;
        }
        v75 = *(_QWORD **)(v589 + 8 * v74);
        if (!v75 || (v76 = (_QWORD *)*v75) == 0)
LABEL_900:
          abort();
        if (v62 < 2)
        {
          while (1)
          {
            v77 = v76[1];
            if (v77 == v73)
            {
              if (v76[2] == v73)
                goto LABEL_92;
            }
            else if ((v77 & v63) != v74)
            {
              goto LABEL_900;
            }
            v76 = (_QWORD *)*v76;
            if (!v76)
              goto LABEL_900;
          }
        }
        while (1)
        {
          v88 = v76[1];
          if (v88 == v73)
            break;
          if (v88 >= v60)
            v88 %= v60;
          if (v88 != v74)
            goto LABEL_900;
LABEL_101:
          v76 = (_QWORD *)*v76;
          if (!v76)
            goto LABEL_900;
        }
        if (v76[2] != v73)
          goto LABEL_101;
LABEL_92:
        v78 = v76[3];
        if (!v569[v78])
        {
          v79 = (v71 & 1) == 0;
          v80 = 48;
          if (!v79)
            v80 = 40;
          v566 = v72;
          v81 = v62;
          v82 = std::__hash_table<std::__hash_value_type<altitude::Tile *,unsigned int>,std::__unordered_map_hasher<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::hash<altitude::Tile *>,std::equal_to<altitude::Tile *>,true>,std::__unordered_map_equal<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::equal_to<altitude::Tile *>,std::hash<altitude::Tile *>,true>,std::allocator<std::__hash_value_type<altitude::Tile *,unsigned int>>>::find<altitude::Tile *>(v568[117], *(_QWORD *)(v571 + v80));
          v72 = v566;
          v62 = v81;
          v83 = v82 + 3;
          v79 = v82 == 0;
          v4 = v562;
          v66 = v564;
          if (v79)
            v83 = 0;
          v569[v78] = v83;
        }
        v84 = (_QWORD *)(v571 + 16 * v65);
        v85 = v84[16];
        if (v85)
        {
          v86 = 0;
          v87 = v84[15];
          do
          {
            v89 = *(_QWORD **)&__pa[8 * v78];
            do
            {
              v90 = v89;
              v89 = (_QWORD *)*v89;
            }
            while (v89);
            v91 = v90[1];
            v92 = *(_QWORD **)&__pa[8 * *(_QWORD *)(v4 + 8 * (v87 + v86))];
            do
            {
              v93 = v92;
              v92 = (_QWORD *)*v92;
            }
            while (v92);
            v94 = v93[1];
            if (v91 != v94)
            {
              v582 = --v56;
              v95 = *(_QWORD **)&__pa[8 * v91];
              v96 = *(_QWORD **)&__pa[8 * v94];
              v97 = v95[2];
              v98 = v96[2];
              if (v97 < v98)
              {
                *v95 = v96;
              }
              else
              {
                *v96 = v95;
                if (v97 <= v98)
                  v95[2] = v97 + 1;
              }
            }
            ++v86;
          }
          while (v86 != v85);
        }
        v99 = v84[20];
        if (v99)
        {
          if (!v68)
LABEL_328:
            abort();
          v100 = 0;
          v101 = *(_QWORD *)(v571 + 16 * v65 + 152);
LABEL_122:
          v102 = v573[v101 + v100];
          if ((unint64_t)j > 1)
          {
            v103 = v573[v101 + v100];
            if (v102 >= v68)
              v103 = v102 % v68;
          }
          else
          {
            v103 = v70 & v102;
          }
          v104 = *(_QWORD **)(v589 + 8 * v103);
          if (!v104)
            goto LABEL_328;
          v105 = (_QWORD *)*v104;
          if (!v105)
            goto LABEL_328;
          if ((unint64_t)j < 2)
          {
            while (1)
            {
              v106 = v105[1];
              if (v106 == v102)
              {
                if (v105[2] == v102)
                  goto LABEL_134;
              }
              else if ((v106 & v70) != v103)
              {
                goto LABEL_328;
              }
              v105 = (_QWORD *)*v105;
              if (!v105)
                goto LABEL_328;
            }
          }
          while (1)
          {
            v118 = v105[1];
            if (v118 == v102)
            {
              if (v105[2] == v102)
              {
LABEL_134:
                v107 = v105[3];
                v108 = *(_QWORD **)&__pa[8 * v78];
                do
                {
                  v109 = v108;
                  v108 = (_QWORD *)*v108;
                }
                while (v108);
                v110 = v109[1];
                v111 = *(_QWORD **)&__pa[8 * v107];
                do
                {
                  v112 = v111;
                  v111 = (_QWORD *)*v111;
                }
                while (v111);
                v113 = v112[1];
                if (v110 != v113)
                {
                  v582 = --v56;
                  v114 = *(_QWORD **)&__pa[8 * v110];
                  v115 = *(_QWORD **)&__pa[8 * v113];
                  v116 = v114[2];
                  v117 = v115[2];
                  if (v116 < v117)
                  {
                    *v114 = v115;
                  }
                  else
                  {
                    *v115 = v114;
                    if (v116 <= v117)
                      v114[2] = v116 + 1;
                  }
                }
                if (++v100 == v99)
                  break;
                goto LABEL_122;
              }
            }
            else
            {
              if (v118 >= v68)
                v118 %= v68;
              if (v118 != v103)
                goto LABEL_328;
            }
            v105 = (_QWORD *)*v105;
            if (!v105)
              goto LABEL_328;
          }
        }
        v71 = 0;
        v64 = 1;
        v67 = v66;
        v65 = 1;
      }
      while ((v72 & 1) == 0);
      v59 = v558 + 1;
      v49 = v571 + 184;
    }
    while (v558 + 1 != __sz);
  }
  v119 = v556;
  v120 = v568;
  if (v581 != v56)
  {
    std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(v584);
    v584 = 0;
    v585 = 0;
    v583 = &v584;
    if (v581)
    {
      for (j = 0; j < v581; ++j)
      {
        v121 = *(_QWORD **)&__pa[8 * j];
        v122 = v121;
        do
        {
          v123 = v122;
          v122 = (_QWORD *)*v122;
        }
        while (v122);
        if (v121 != v123)
        {
          do
          {
            v124 = (_QWORD *)*v121;
            *v121 = v123;
            v121 = v124;
          }
          while (v124 != v123);
        }
        v125 = v123[1];
        v126 = (uint64_t *)operator new(0x30uLL);
        v127 = v126;
        v126[4] = v125;
        v126[5] = j;
        v128 = &v584;
        v129 = &v584;
        v130 = v584;
        if (v584)
        {
          do
          {
            while (1)
            {
              v128 = (uint64_t **)v130;
              if (v125 >= v130[4])
                break;
              v130 = (uint64_t *)*v130;
              v129 = v128;
              if (!*v128)
                goto LABEL_164;
            }
            v130 = (uint64_t *)v130[1];
          }
          while (v130);
          v129 = v128 + 1;
        }
LABEL_164:
        *v126 = 0;
        v126[1] = 0;
        v126[2] = (uint64_t)v128;
        *v129 = v126;
        if (*v583)
        {
          v583 = (uint64_t **)*v583;
          v127 = *v129;
        }
        std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(v584, v127);
        ++v585;
      }
    }
  }
  if (v560)
  {
    v131 = 0;
    v565 = (char **)(v568 + 127);
    v567 = v568 + 108;
    v132 = v561;
    while (1)
    {
      if (!v119[v131] && !*(_BYTE *)(v132 + 321))
      {
        v133 = v587;
        if (v587)
        {
          v134 = *(_QWORD *)(v132 + 40);
          v135 = &v587;
          while (1)
          {
            while (1)
            {
              v136 = v133[4];
              if (v134 >= v136)
                break;
              v135 = (uint64_t **)v133;
              v133 = (uint64_t *)*v133;
              if (!v133)
                goto LABEL_168;
            }
            if (v136 >= v134)
              break;
            v133 = (uint64_t *)v133[1];
            if (!v133)
              goto LABEL_168;
          }
          v137 = (_QWORD *)*v133;
          v138 = v133;
          if (*v133)
          {
            v138 = v133;
            do
            {
              v139 = v137[4];
              v140 = v139 >= v134;
              if (v139 >= v134)
                v141 = v137;
              else
                v141 = v137 + 1;
              if (v140)
                v138 = v137;
              v137 = (_QWORD *)*v141;
            }
            while (*v141);
          }
          v142 = (_QWORD *)v133[1];
          if (v142)
          {
            do
            {
              v143 = v142[4];
              v144 = v134 >= v143;
              if (v134 >= v143)
                v145 = v142 + 1;
              else
                v145 = v142;
              if (!v144)
                v135 = (uint64_t **)v142;
              v142 = (_QWORD *)*v145;
            }
            while (*v145);
          }
          if (v138 != (uint64_t *)v135)
            break;
        }
      }
LABEL_168:
      ++v131;
      v132 += 344;
      if (v131 == v560)
      {
        j = 0;
        v120 = v568;
        while (1)
        {
          if (!v119[j] && !*(_BYTE *)(v561 + 321))
          {
            v225 = operator new(0x68uLL);
            v225[1] = 0;
            v225[2] = 0;
            *v225 = &off_1E42DBA58;
            md::TransitNode::TransitNode((uint64_t)(v225 + 3), (uint64_t *)v561, v567, *((float *)v120 + 337));
            v225[3] = &off_1E42939D0;
            v225[12] = 0;
            *((_BYTE *)v225 + 85) = 0;
            *((_BYTE *)v225 + 84) = *(_BYTE *)(v225[4] + 320);
            v226 = operator new();
            *(_QWORD *)v226 = 0;
            *(_DWORD *)(v226 + 8) = 0;
            *(_QWORD *)(v226 + 16) = 0;
            v227 = v225[12];
            v225[12] = v226;
            if (v227)
              MEMORY[0x1A1AF4E00](v227, 0x1060C4067290D6BLL);
            *(_QWORD *)&v592 = v225 + 3;
            *((_QWORD *)&v592 + 1) = v225;
            v228 = v120;
            v229 = v120[131];
            v230 = (unint64_t)v228[132];
            if ((unint64_t)v229 < v230)
            {
              *(_QWORD *)v229 = v225 + 3;
              *((_QWORD *)v229 + 1) = v225;
              v228[131] = (geo::codec::VectorTile *)((char *)v229 + 16);
              v120 = v228;
            }
            else
            {
              v231 = v228[130];
              v232 = (v229 - v231) >> 4;
              v233 = v232 + 1;
              if ((unint64_t)(v232 + 1) >> 60)
                abort();
              v234 = v230 - (_QWORD)v231;
              if (v234 >> 3 > v233)
                v233 = v234 >> 3;
              if ((unint64_t)v234 >= 0x7FFFFFFFFFFFFFF0)
                v235 = 0xFFFFFFFFFFFFFFFLL;
              else
                v235 = v233;
              if (v235 >> 60)
                goto LABEL_901;
              v236 = (char *)operator new(16 * v235);
              v237 = (geo::codec::VectorTile *)&v236[16 * v232];
              *(_OWORD *)v237 = v592;
              v238 = (geo::codec::VectorTile *)((char *)v237 + 16);
              v239 = (geo::codec::VectorTile *)&v236[16 * v235];
              v592 = 0uLL;
              if (v229 == v231)
              {
                v568[130] = v237;
                v568[131] = v238;
                v568[132] = v239;
              }
              else
              {
                do
                {
                  v240 = *((_OWORD *)v229 - 1);
                  v229 = (geo::codec::VectorTile *)((char *)v229 - 16);
                  *((_OWORD *)v237 - 1) = v240;
                  v237 = (geo::codec::VectorTile *)((char *)v237 - 16);
                  *(_QWORD *)v229 = 0;
                  *((_QWORD *)v229 + 1) = 0;
                }
                while (v229 != v231);
                v229 = v568[130];
                v241 = v568[131];
                v568[130] = v237;
                v568[131] = v238;
                v568[132] = v239;
                while (v241 != v229)
                {
                  v242 = (std::__shared_weak_count *)*((_QWORD *)v241 - 1);
                  if (v242)
                  {
                    v243 = (unint64_t *)&v242->__shared_owners_;
                    do
                      v244 = __ldaxr(v243);
                    while (__stlxr(v244 - 1, v243));
                    if (!v244)
                    {
                      ((void (*)(std::__shared_weak_count *))v242->__on_zero_shared)(v242);
                      std::__shared_weak_count::__release_weak(v242);
                    }
                  }
                  v241 = (geo::codec::VectorTile *)((char *)v241 - 16);
                }
              }
              v119 = v556;
              if (v229)
                operator delete(v229);
              v245 = (std::__shared_weak_count *)*((_QWORD *)&v592 + 1);
              v120 = v568;
              v568[131] = v238;
              if (v245)
              {
                v246 = (unint64_t *)&v245->__shared_owners_;
                do
                  v247 = __ldaxr(v246);
                while (__stlxr(v247 - 1, v246));
                if (!v247)
                {
                  ((void (*)(std::__shared_weak_count *))v245->__on_zero_shared)(v245);
                  std::__shared_weak_count::__release_weak(v245);
                }
              }
            }
          }
          ++j;
          v561 += 344;
          if (j == v560)
            goto LABEL_362;
        }
      }
    }
    v146 = 0;
    v572 = 0;
    v574 = 0;
    v147 = 0;
    v148 = 0;
    while (1)
    {
      v149 = v138[5];
      v150 = *(_QWORD **)(v561 + 344 * v149 + 256);
      if (v150 && v134 == *v150)
      {
        v151 = v119[v149];
        if (!v151)
        {
          if (v581 == v582)
            goto LABEL_229;
          v152 = *(_QWORD **)&__pa[8 * v149];
          do
          {
            v153 = v152;
            v152 = (_QWORD *)*v152;
          }
          while (v152);
          v154 = v584;
          if (!v584)
            goto LABEL_229;
          v155 = v153[1];
          v156 = &v584;
          while (1)
          {
            while (1)
            {
              v157 = v154[4];
              if (v155 >= v157)
                break;
              v156 = (uint64_t **)v154;
              v154 = (uint64_t *)*v154;
              if (!v154)
                goto LABEL_229;
            }
            if (v157 >= v155)
              break;
            v154 = (uint64_t *)v154[1];
            if (!v154)
              goto LABEL_229;
          }
          v177 = (_QWORD *)*v154;
          v178 = v154;
          if (*v154)
          {
            v178 = v154;
            do
            {
              v179 = v177[4];
              v180 = v179 >= v155;
              if (v179 >= v155)
                v181 = v177;
              else
                v181 = v177 + 1;
              if (v180)
                v178 = v177;
              v177 = (_QWORD *)*v181;
            }
            while (*v181);
          }
          v182 = (_QWORD *)v154[1];
          if (v182)
          {
            do
            {
              v183 = v182[4];
              v184 = v155 >= v183;
              if (v155 >= v183)
                v185 = v182 + 1;
              else
                v185 = v182;
              if (!v184)
                v156 = (uint64_t **)v182;
              v182 = (_QWORD *)*v185;
            }
            while (*v185);
          }
          if (v178 == (uint64_t *)v156)
            goto LABEL_229;
          while (2)
          {
            v186 = v178[5];
            if (v186 < v560 && (v187 = v119[v186]) != 0)
            {
              if (v148 < v147)
              {
                *(_QWORD *)v148 = v187;
                v148 += 8;
                v574 = v148;
                v188 = (uint64_t *)v178[1];
                if (!v188)
                  goto LABEL_299;
                do
                {
LABEL_271:
                  v191 = (uint64_t **)v188;
                  v188 = (uint64_t *)*v188;
                }
                while (v188);
LABEL_262:
                v178 = (uint64_t *)v191;
                if (v191 == v156)
                  goto LABEL_229;
                continue;
              }
              v192 = v148 - v146;
              v193 = (v148 - v146) >> 3;
              v194 = v193 + 1;
              if ((unint64_t)(v193 + 1) >> 61)
                abort();
              if ((v147 - v146) >> 2 > v194)
                v194 = (v147 - v146) >> 2;
              if ((unint64_t)(v147 - v146) >= 0x7FFFFFFFFFFFFFF8)
                v195 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v195 = v194;
              if (v195)
              {
                v559 = v148 - v146;
                v563 = (v148 - v146) >> 3;
                v576 = v148;
                if (v195 >> 61)
                  goto LABEL_901;
                v196 = v195;
                v197 = operator new(8 * v195);
                v148 = v576;
                v195 = v196;
                v193 = v563;
                v192 = v559;
              }
              else
              {
                v197 = 0;
              }
              v198 = &v197[8 * v193];
              *(_QWORD *)v198 = v187;
              v574 = v198 + 8;
              if (v148 != v146)
              {
                v199 = v148 - 8 - v146;
                if (v199 < 0x168)
                {
                  v200 = v148;
                  goto LABEL_295;
                }
                if (&v197[v192 - 8 - (v199 & 0xFFFFFFFFFFFFFFF8)] > &v197[v192 - 8])
                {
                  v200 = v148;
                  goto LABEL_295;
                }
                if (&v148[-(v199 & 0xFFFFFFFFFFFFFFF8) - 8] > v148 - 8)
                {
                  v200 = v148;
                  goto LABEL_295;
                }
                if ((unint64_t)(v148 - &v197[v192]) < 0x20)
                {
                  v200 = v148;
                  goto LABEL_295;
                }
                v201 = (v199 >> 3) + 1;
                v200 = &v148[-8 * (v201 & 0x3FFFFFFFFFFFFFFCLL)];
                v202 = &v197[8 * v193 - 16];
                v203 = (__int128 *)(v148 - 16);
                v204 = v201 & 0x3FFFFFFFFFFFFFFCLL;
                do
                {
                  v205 = *v203;
                  *(v202 - 1) = *(v203 - 1);
                  *v202 = v205;
                  v202 -= 2;
                  v203 -= 2;
                  v204 -= 4;
                }
                while (v204);
                v198 -= 8 * (v201 & 0x3FFFFFFFFFFFFFFCLL);
                if (v201 != (v201 & 0x3FFFFFFFFFFFFFFCLL))
                {
                  do
                  {
LABEL_295:
                    v206 = *((_QWORD *)v200 - 1);
                    v200 -= 8;
                    *((_QWORD *)v198 - 1) = v206;
                    v198 -= 8;
                  }
                  while (v200 != v146);
                }
              }
              v147 = &v197[8 * v195];
              if (v146)
              {
                v207 = &v197[8 * v195];
                operator delete(v146);
                v147 = v207;
              }
              v146 = v198;
              v148 = v574;
              v119 = v556;
              v188 = (uint64_t *)v178[1];
              if (v188)
                goto LABEL_271;
            }
            else
            {
              v189 = (_QWORD *)v569[v186];
              v190 = v572;
              if (v189)
                v190 = v189;
              v572 = v190;
              v188 = (uint64_t *)v178[1];
              if (v188)
                goto LABEL_271;
            }
            break;
          }
          do
          {
LABEL_299:
            v191 = (uint64_t **)v178[2];
            v79 = *v191 == v178;
            v178 = (uint64_t *)v191;
          }
          while (!v79);
          goto LABEL_262;
        }
        if (v148 >= v147)
        {
          v158 = v148 - v146;
          v159 = (v148 - v146) >> 3;
          v160 = v159 + 1;
          if ((unint64_t)(v159 + 1) >> 61)
            abort();
          if ((v147 - v146) >> 2 > v160)
            v160 = (v147 - v146) >> 2;
          if ((unint64_t)(v147 - v146) >= 0x7FFFFFFFFFFFFFF8)
            v161 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v161 = v160;
          if (v161)
          {
            v575 = v146;
            if (v161 >> 61)
              goto LABEL_901;
            v162 = v148;
            v163 = v161;
            v164 = operator new(8 * v161);
            v148 = v162;
            v161 = v163;
            v146 = v575;
          }
          else
          {
            v164 = 0;
          }
          v165 = &v164[8 * v159];
          *(_QWORD *)v165 = v151;
          v574 = v165 + 8;
          if (v148 != v146)
          {
            v166 = v148 - 8 - v146;
            if (v166 < 0x168
              || &v164[v158 - 8 - (v166 & 0xFFFFFFFFFFFFFFF8)] > &v164[v158 - 8]
              || &v148[-(v166 & 0xFFFFFFFFFFFFFFF8) - 8] > v148 - 8
              || (unint64_t)(v148 - &v164[v158]) < 0x20)
            {
              v167 = v148;
              v119 = v556;
            }
            else
            {
              v172 = (v166 >> 3) + 1;
              v167 = &v148[-8 * (v172 & 0x3FFFFFFFFFFFFFFCLL)];
              v173 = &v164[8 * v159 - 16];
              v174 = (__int128 *)(v148 - 16);
              v175 = v172 & 0x3FFFFFFFFFFFFFFCLL;
              v119 = v556;
              do
              {
                v176 = *v174;
                *(v173 - 1) = *(v174 - 1);
                *v173 = v176;
                v173 -= 2;
                v174 -= 2;
                v175 -= 4;
              }
              while (v175);
              v165 -= 8 * (v172 & 0x3FFFFFFFFFFFFFFCLL);
              if (v172 == (v172 & 0x3FFFFFFFFFFFFFFCLL))
              {
LABEL_226:
                v147 = &v164[8 * v161];
                if (v146)
                  goto LABEL_227;
                goto LABEL_228;
              }
            }
            do
            {
              v168 = *((_QWORD *)v167 - 1);
              v167 -= 8;
              *((_QWORD *)v165 - 1) = v168;
              v165 -= 8;
            }
            while (v167 != v146);
            goto LABEL_226;
          }
          v119 = v556;
          v147 = &v164[8 * v161];
          if (v146)
          {
LABEL_227:
            v169 = v147;
            operator delete(v146);
            v147 = v169;
          }
LABEL_228:
          v146 = v165;
          v148 = v574;
          goto LABEL_229;
        }
        *(_QWORD *)v148 = v151;
        v148 += 8;
        v574 = v148;
      }
LABEL_229:
      v170 = (uint64_t *)v138[1];
      if (v170)
      {
        do
        {
          v171 = (uint64_t **)v170;
          v170 = (uint64_t *)*v170;
        }
        while (v170);
      }
      else
      {
        do
        {
          v171 = (uint64_t **)v138[2];
          v79 = *v171 == v138;
          v138 = (uint64_t *)v171;
        }
        while (!v79);
      }
      v138 = (uint64_t *)v171;
      if (v171 == v135)
      {
        if (v146 == v148)
        {
          if (!v572)
            goto LABEL_326;
          v209 = operator new(0xA8uLL);
          v209[1] = 0;
          v209[2] = 0;
          *v209 = &off_1E42DBA90;
          v217 = md::TransitConnectedNode::TransitConnectedNode((uint64_t)(v209 + 3), (uint64_t *)v132, v567, v572, *((float *)v568 + 337));
          v209[3] = &off_1E4293A20;
          *(_QWORD *)&v592 = v217;
          *((_QWORD *)&v592 + 1) = v209;
          v218 = v568[128];
          if (v218 < v568[129])
            goto LABEL_319;
          v219 = std::vector<std::shared_ptr<gdc::LayerDataRequest>>::__push_back_slow_path<std::shared_ptr<gdc::LayerDataRequest>>(v565, (uint64_t)&v592);
          v220 = (std::__shared_weak_count *)*((_QWORD *)&v592 + 1);
          v568[128] = (geo::codec::VectorTile *)v219;
          if (!v220)
          {
LABEL_325:
            v119[v131] = *((_QWORD *)v568[128] - 2);
LABEL_326:
            if (v146)
              operator delete(v146);
            goto LABEL_168;
          }
          v221 = (unint64_t *)&v220->__shared_owners_;
          do
            v222 = __ldaxr(v221);
          while (__stlxr(v222 - 1, v221));
        }
        else
        {
          v208 = operator new(0xA8uLL);
          v209 = v208;
          v208[1] = 0;
          v208[2] = 0;
          *v208 = &off_1E42DBA90;
          if (v146 == v574)
          {
            v216 = 0;
          }
          else
          {
            v210 = 0;
            v211 = 0;
            v212 = (v574 - v146) >> 3;
            if (v212 <= 1)
              v212 = 1;
            v213 = 3.4028e38;
            do
            {
              v214 = vsub_f32(*(float32x2_t *)(v132 + 88), *(float32x2_t *)(*(_QWORD *)(*(_QWORD *)&v146[8 * v210] + 8) + 88));
              v215 = vaddv_f32(vmul_f32(v214, v214));
              if (v215 < v213)
                v211 = v210;
              v213 = fminf(v215, v213);
              ++v210;
            }
            while (v212 != v210);
            v216 = *(_QWORD **)(*(_QWORD *)&v146[8 * v211] + 96);
          }
          v217 = md::TransitConnectedNode::TransitConnectedNode((uint64_t)(v208 + 3), (uint64_t *)v132, v567, v216, *((float *)v568 + 337));
          v209[3] = &off_1E4293A20;
          *(_QWORD *)&v592 = v217;
          *((_QWORD *)&v592 + 1) = v209;
          v218 = v568[128];
          if (v218 < v568[129])
          {
LABEL_319:
            *(_QWORD *)v218 = v217;
            *((_QWORD *)v218 + 1) = v209;
            v568[128] = (geo::codec::VectorTile *)((char *)v218 + 16);
            goto LABEL_325;
          }
          v223 = std::vector<std::shared_ptr<gdc::LayerDataRequest>>::__push_back_slow_path<std::shared_ptr<gdc::LayerDataRequest>>(v565, (uint64_t)&v592);
          v220 = (std::__shared_weak_count *)*((_QWORD *)&v592 + 1);
          v568[128] = (geo::codec::VectorTile *)v223;
          if (!v220)
            goto LABEL_325;
          v224 = (unint64_t *)&v220->__shared_owners_;
          do
            v222 = __ldaxr(v224);
          while (__stlxr(v222 - 1, v224));
        }
        if (!v222)
        {
          ((void (*)(std::__shared_weak_count *))v220->__on_zero_shared)(v220);
          std::__shared_weak_count::__release_weak(v220);
        }
        goto LABEL_325;
      }
    }
  }
LABEL_362:
  v248 = (char *)v120[124];
  v249 = (char *)v120[125];
  if (v249 - v248 >= 1)
  {
    v250 = (unint64_t)v120[119];
    j = (v249 - v248) >> 4;
    v251 = v120[118];
    v252 = v250 - (_QWORD)v251;
    v253 = (geo::codec::VectorTile *)((char *)v251 + ((v250 - (_QWORD)v251) & 0xFFFFFFFFFFFFFFF0));
    v254 = v120[120];
    if (j <= (uint64_t)((uint64_t)v254 - v250) >> 4)
    {
      v261 = (uint64_t)(v250 - (_QWORD)v253) >> 4;
      if (v261 >= j)
      {
        v262 = &v248[16 * j];
        v264 = v120[119];
      }
      else
      {
        v262 = &v248[16 * v261];
        if (v262 == v249)
        {
          v264 = v120[119];
        }
        else
        {
          v263 = &v248[16 * v261];
          v264 = v120[119];
          do
          {
            *(_QWORD *)v264 = *(_QWORD *)v263;
            v265 = *((_QWORD *)v263 + 1);
            *((_QWORD *)v264 + 1) = v265;
            if (v265)
            {
              v266 = (unint64_t *)(v265 + 8);
              do
                v267 = __ldxr(v266);
              while (__stxr(v267 + 1, v266));
            }
            v263 += 16;
            v264 = (geo::codec::VectorTile *)((char *)v264 + 16);
          }
          while (v263 != v249);
        }
        v120[119] = v264;
        if ((uint64_t)(v250 - (_QWORD)v253) < 1)
          goto LABEL_412;
      }
      v281 = (geo::codec::VectorTile *)((char *)v264 - 16 * j);
      v282 = v264;
      if ((unint64_t)v281 < v250)
      {
        v283 = (_QWORD *)((char *)v264 - 16 * j);
        v282 = v264;
        do
        {
          *(_OWORD *)v282 = *(_OWORD *)v283;
          v282 = (geo::codec::VectorTile *)((char *)v282 + 16);
          *v283 = 0;
          v283[1] = 0;
          v283 += 2;
        }
        while ((unint64_t)v283 < v250);
      }
      v120[119] = v282;
      if (v264 != (geo::codec::VectorTile *)((char *)v253 + 16 * j))
      {
        do
        {
          v297 = *((_OWORD *)v281 - 1);
          v281 = (geo::codec::VectorTile *)((char *)v281 - 16);
          *(_QWORD *)v281 = 0;
          *((_QWORD *)v281 + 1) = 0;
          j = *((_QWORD *)v264 - 1);
          *((_OWORD *)v264 - 1) = v297;
          v264 = (geo::codec::VectorTile *)((char *)v264 - 16);
          if (j)
          {
            v298 = (unint64_t *)(j + 8);
            do
              v299 = __ldaxr(v298);
            while (__stlxr(v299 - 1, v298));
            if (!v299)
            {
              (*(void (**)(uint64_t))(*(_QWORD *)j + 16))(j);
              std::__shared_weak_count::__release_weak((std::__shared_weak_count *)j);
            }
          }
        }
        while (v281 != v253);
      }
      for (; v248 != v262; v253 = (geo::codec::VectorTile *)((char *)v253 + 16))
      {
        v301 = *(_QWORD *)v248;
        v300 = *((_QWORD *)v248 + 1);
        if (v300)
        {
          v302 = (unint64_t *)(v300 + 8);
          do
            v303 = __ldxr(v302);
          while (__stxr(v303 + 1, v302));
        }
        j = *((_QWORD *)v253 + 1);
        *(_QWORD *)v253 = v301;
        *((_QWORD *)v253 + 1) = v300;
        if (j)
        {
          v304 = (unint64_t *)(j + 8);
          do
            v305 = __ldaxr(v304);
          while (__stlxr(v305 - 1, v304));
          if (!v305)
          {
            (*(void (**)(uint64_t))(*(_QWORD *)j + 16))(j);
            std::__shared_weak_count::__release_weak((std::__shared_weak_count *)j);
          }
        }
        v248 += 16;
      }
      goto LABEL_412;
    }
    v255 = v252 >> 4;
    v256 = (v252 >> 4) + j;
    if (v256 >> 60)
      abort();
    v257 = v254 - v251;
    v258 = (v254 - v251) >> 3;
    if (v258 > v256)
      v256 = v258;
    if (v257 >= 0x7FFFFFFFFFFFFFF0)
      v259 = 0xFFFFFFFFFFFFFFFLL;
    else
      v259 = v256;
    if (v259)
    {
      if (v259 >> 60)
        goto LABEL_901;
      v260 = (char *)operator new(16 * v259);
    }
    else
    {
      v260 = 0;
    }
    v268 = &v260[16 * v255];
    v269 = (geo::codec::VectorTile *)&v268[16 * j];
    v270 = (geo::codec::VectorTile *)v268;
    do
    {
      *(_QWORD *)v270 = *(_QWORD *)v248;
      v271 = *((_QWORD *)v248 + 1);
      *((_QWORD *)v270 + 1) = v271;
      if (v271)
      {
        v272 = (unint64_t *)(v271 + 8);
        do
          v273 = __ldxr(v272);
        while (__stxr(v273 + 1, v272));
      }
      v270 = (geo::codec::VectorTile *)((char *)v270 + 16);
      v248 += 16;
    }
    while (v270 != v269);
    v274 = v120[118];
    if (v274 != v253)
    {
      v275 = v253;
      do
      {
        v276 = *((_OWORD *)v275 - 1);
        v275 = (geo::codec::VectorTile *)((char *)v275 - 16);
        *((_OWORD *)v268 - 1) = v276;
        v268 -= 16;
        *(_QWORD *)v275 = 0;
        *((_QWORD *)v275 + 1) = 0;
      }
      while (v275 != v274);
    }
    v277 = v120[119];
    if (v277 != v253)
    {
      do
      {
        *(_OWORD *)v269 = *(_OWORD *)v253;
        v269 = (geo::codec::VectorTile *)((char *)v269 + 16);
        *(_QWORD *)v253 = 0;
        *((_QWORD *)v253 + 1) = 0;
        v253 = (geo::codec::VectorTile *)((char *)v253 + 16);
      }
      while (v253 != v277);
      v253 = v120[119];
    }
    j = (uint64_t)v120[118];
    v120[118] = (geo::codec::VectorTile *)v268;
    v120[119] = v269;
    v120[120] = (geo::codec::VectorTile *)&v260[16 * v259];
    while (v253 != (geo::codec::VectorTile *)j)
    {
      v278 = (std::__shared_weak_count *)*((_QWORD *)v253 - 1);
      if (v278)
      {
        v279 = (unint64_t *)&v278->__shared_owners_;
        do
          v280 = __ldaxr(v279);
        while (__stlxr(v280 - 1, v279));
        if (!v280)
        {
          ((void (*)(std::__shared_weak_count *))v278->__on_zero_shared)(v278);
          std::__shared_weak_count::__release_weak(v278);
        }
      }
      v253 = (geo::codec::VectorTile *)((char *)v253 - 16);
    }
    if (j)
      operator delete((void *)j);
  }
LABEL_412:
  v284 = (char *)v120[127];
  v285 = (char *)v120[128];
  if (v285 - v284 < 1)
    goto LABEL_477;
  v286 = (unint64_t)v120[119];
  j = (v285 - v284) >> 4;
  v287 = v120[118];
  v288 = v286 - (_QWORD)v287;
  v289 = (geo::codec::VectorTile *)((char *)v287 + ((v286 - (_QWORD)v287) & 0xFFFFFFFFFFFFFFF0));
  v290 = v120[120];
  if (j <= (uint64_t)((uint64_t)v290 - v286) >> 4)
  {
    v306 = (uint64_t)(v286 - (_QWORD)v289) >> 4;
    if (v306 >= j)
    {
      v307 = &v284[16 * j];
      v309 = v120[119];
    }
    else
    {
      v307 = &v284[16 * v306];
      if (v307 == v285)
      {
        v309 = v120[119];
      }
      else
      {
        v308 = &v284[16 * v306];
        v309 = v120[119];
        do
        {
          *(_QWORD *)v309 = *(_QWORD *)v308;
          v310 = *((_QWORD *)v308 + 1);
          *((_QWORD *)v309 + 1) = v310;
          if (v310)
          {
            v311 = (unint64_t *)(v310 + 8);
            do
              v312 = __ldxr(v311);
            while (__stxr(v312 + 1, v311));
          }
          v308 += 16;
          v309 = (geo::codec::VectorTile *)((char *)v309 + 16);
        }
        while (v308 != v285);
      }
      v120[119] = v309;
      if ((uint64_t)(v286 - (_QWORD)v289) < 1)
        goto LABEL_477;
    }
    v326 = (geo::codec::VectorTile *)((char *)v309 - 16 * j);
    v327 = v309;
    if ((unint64_t)v326 < v286)
    {
      v328 = (_QWORD *)((char *)v309 - 16 * j);
      v327 = v309;
      do
      {
        *(_OWORD *)v327 = *(_OWORD *)v328;
        v327 = (geo::codec::VectorTile *)((char *)v327 + 16);
        *v328 = 0;
        v328[1] = 0;
        v328 += 2;
      }
      while ((unint64_t)v328 < v286);
    }
    v120[119] = v327;
    if (v309 != (geo::codec::VectorTile *)((char *)v289 + 16 * j))
    {
      do
      {
        v342 = *((_OWORD *)v326 - 1);
        v326 = (geo::codec::VectorTile *)((char *)v326 - 16);
        *(_QWORD *)v326 = 0;
        *((_QWORD *)v326 + 1) = 0;
        j = *((_QWORD *)v309 - 1);
        *((_OWORD *)v309 - 1) = v342;
        v309 = (geo::codec::VectorTile *)((char *)v309 - 16);
        if (j)
        {
          v343 = (unint64_t *)(j + 8);
          do
            v344 = __ldaxr(v343);
          while (__stlxr(v344 - 1, v343));
          if (!v344)
          {
            (*(void (**)(uint64_t))(*(_QWORD *)j + 16))(j);
            std::__shared_weak_count::__release_weak((std::__shared_weak_count *)j);
          }
        }
      }
      while (v326 != v289);
    }
    for (; v284 != v307; v289 = (geo::codec::VectorTile *)((char *)v289 + 16))
    {
      v346 = *(_QWORD *)v284;
      v345 = *((_QWORD *)v284 + 1);
      if (v345)
      {
        v347 = (unint64_t *)(v345 + 8);
        do
          v348 = __ldxr(v347);
        while (__stxr(v348 + 1, v347));
      }
      j = *((_QWORD *)v289 + 1);
      *(_QWORD *)v289 = v346;
      *((_QWORD *)v289 + 1) = v345;
      if (j)
      {
        v349 = (unint64_t *)(j + 8);
        do
          v350 = __ldaxr(v349);
        while (__stlxr(v350 - 1, v349));
        if (!v350)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)j + 16))(j);
          std::__shared_weak_count::__release_weak((std::__shared_weak_count *)j);
        }
      }
      v284 += 16;
    }
    goto LABEL_477;
  }
  v291 = v288 >> 4;
  v292 = (v288 >> 4) + j;
  if (v292 >> 60)
    abort();
  v293 = v290 - v287;
  v294 = (v290 - v287) >> 3;
  if (v294 > v292)
    v292 = v294;
  if (v293 >= 0x7FFFFFFFFFFFFFF0)
    v295 = 0xFFFFFFFFFFFFFFFLL;
  else
    v295 = v292;
  if (v295)
  {
    if (v295 >> 60)
      goto LABEL_901;
    v296 = (char *)operator new(16 * v295);
  }
  else
  {
    v296 = 0;
  }
  v313 = &v296[16 * v291];
  v314 = (geo::codec::VectorTile *)&v313[16 * j];
  v315 = (geo::codec::VectorTile *)v313;
  do
  {
    *(_QWORD *)v315 = *(_QWORD *)v284;
    v316 = *((_QWORD *)v284 + 1);
    *((_QWORD *)v315 + 1) = v316;
    if (v316)
    {
      v317 = (unint64_t *)(v316 + 8);
      do
        v318 = __ldxr(v317);
      while (__stxr(v318 + 1, v317));
    }
    v315 = (geo::codec::VectorTile *)((char *)v315 + 16);
    v284 += 16;
  }
  while (v315 != v314);
  v319 = v120[118];
  if (v319 != v289)
  {
    v320 = v289;
    do
    {
      v321 = *((_OWORD *)v320 - 1);
      v320 = (geo::codec::VectorTile *)((char *)v320 - 16);
      *((_OWORD *)v313 - 1) = v321;
      v313 -= 16;
      *(_QWORD *)v320 = 0;
      *((_QWORD *)v320 + 1) = 0;
    }
    while (v320 != v319);
  }
  v322 = v120[119];
  if (v322 != v289)
  {
    do
    {
      *(_OWORD *)v314 = *(_OWORD *)v289;
      v314 = (geo::codec::VectorTile *)((char *)v314 + 16);
      *(_QWORD *)v289 = 0;
      *((_QWORD *)v289 + 1) = 0;
      v289 = (geo::codec::VectorTile *)((char *)v289 + 16);
    }
    while (v289 != v322);
    v289 = v120[119];
  }
  j = (uint64_t)v120[118];
  v120[118] = (geo::codec::VectorTile *)v313;
  v120[119] = v314;
  v120[120] = (geo::codec::VectorTile *)&v296[16 * v295];
  while (v289 != (geo::codec::VectorTile *)j)
  {
    v323 = (std::__shared_weak_count *)*((_QWORD *)v289 - 1);
    if (v323)
    {
      v324 = (unint64_t *)&v323->__shared_owners_;
      do
        v325 = __ldaxr(v324);
      while (__stlxr(v325 - 1, v324));
      if (!v325)
      {
        ((void (*)(std::__shared_weak_count *))v323->__on_zero_shared)(v323);
        std::__shared_weak_count::__release_weak(v323);
      }
    }
    v289 = (geo::codec::VectorTile *)((char *)v289 - 16);
  }
  if (j)
    operator delete((void *)j);
LABEL_477:
  v329 = (char *)v120[130];
  v330 = (char *)v120[131];
  if (v330 - v329 < 1)
    goto LABEL_542;
  v331 = (unint64_t)v120[119];
  j = (v330 - v329) >> 4;
  v332 = v120[118];
  v333 = v331 - (_QWORD)v332;
  v334 = (geo::codec::VectorTile *)((char *)v332 + ((v331 - (_QWORD)v332) & 0xFFFFFFFFFFFFFFF0));
  v335 = v120[120];
  if (j <= (uint64_t)((uint64_t)v335 - v331) >> 4)
  {
    v351 = (uint64_t)(v331 - (_QWORD)v334) >> 4;
    if (v351 >= j)
    {
      v352 = &v329[16 * j];
      v354 = v120[119];
    }
    else
    {
      v352 = &v329[16 * v351];
      if (v352 == v330)
      {
        v354 = v120[119];
      }
      else
      {
        v353 = &v329[16 * v351];
        v354 = v120[119];
        do
        {
          *(_QWORD *)v354 = *(_QWORD *)v353;
          v355 = *((_QWORD *)v353 + 1);
          *((_QWORD *)v354 + 1) = v355;
          if (v355)
          {
            v356 = (unint64_t *)(v355 + 8);
            do
              v357 = __ldxr(v356);
            while (__stxr(v357 + 1, v356));
          }
          v353 += 16;
          v354 = (geo::codec::VectorTile *)((char *)v354 + 16);
        }
        while (v353 != v330);
      }
      v120[119] = v354;
      if ((uint64_t)(v331 - (_QWORD)v334) < 1)
        goto LABEL_542;
    }
    v371 = (geo::codec::VectorTile *)((char *)v354 - 16 * j);
    v372 = v354;
    if ((unint64_t)v371 < v331)
    {
      v373 = (_QWORD *)((char *)v354 - 16 * j);
      v372 = v354;
      do
      {
        *(_OWORD *)v372 = *(_OWORD *)v373;
        v372 = (geo::codec::VectorTile *)((char *)v372 + 16);
        *v373 = 0;
        v373[1] = 0;
        v373 += 2;
      }
      while ((unint64_t)v373 < v331);
    }
    v120[119] = v372;
    if (v354 != (geo::codec::VectorTile *)((char *)v334 + 16 * j))
    {
      do
      {
        v385 = *((_OWORD *)v371 - 1);
        v371 = (geo::codec::VectorTile *)((char *)v371 - 16);
        *(_QWORD *)v371 = 0;
        *((_QWORD *)v371 + 1) = 0;
        j = *((_QWORD *)v354 - 1);
        *((_OWORD *)v354 - 1) = v385;
        v354 = (geo::codec::VectorTile *)((char *)v354 - 16);
        if (j)
        {
          v386 = (unint64_t *)(j + 8);
          do
            v387 = __ldaxr(v386);
          while (__stlxr(v387 - 1, v386));
          if (!v387)
          {
            (*(void (**)(uint64_t))(*(_QWORD *)j + 16))(j);
            std::__shared_weak_count::__release_weak((std::__shared_weak_count *)j);
          }
        }
      }
      while (v371 != v334);
    }
    for (; v329 != v352; v334 = (geo::codec::VectorTile *)((char *)v334 + 16))
    {
      v389 = *(_QWORD *)v329;
      v388 = *((_QWORD *)v329 + 1);
      if (v388)
      {
        v390 = (unint64_t *)(v388 + 8);
        do
          v391 = __ldxr(v390);
        while (__stxr(v391 + 1, v390));
      }
      j = *((_QWORD *)v334 + 1);
      *(_QWORD *)v334 = v389;
      *((_QWORD *)v334 + 1) = v388;
      if (j)
      {
        v392 = (unint64_t *)(j + 8);
        do
          v393 = __ldaxr(v392);
        while (__stlxr(v393 - 1, v392));
        if (!v393)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)j + 16))(j);
          std::__shared_weak_count::__release_weak((std::__shared_weak_count *)j);
        }
      }
      v329 += 16;
    }
    goto LABEL_542;
  }
  v336 = v333 >> 4;
  v337 = (v333 >> 4) + j;
  if (v337 >> 60)
    abort();
  v338 = v335 - v332;
  v339 = (v335 - v332) >> 3;
  if (v339 > v337)
    v337 = v339;
  if (v338 >= 0x7FFFFFFFFFFFFFF0)
    v340 = 0xFFFFFFFFFFFFFFFLL;
  else
    v340 = v337;
  if (v340)
  {
    if (v340 >> 60)
      goto LABEL_901;
    v341 = (char *)operator new(16 * v340);
  }
  else
  {
    v341 = 0;
  }
  v358 = &v341[16 * v336];
  v359 = (geo::codec::VectorTile *)&v358[16 * j];
  v360 = (geo::codec::VectorTile *)v358;
  do
  {
    *(_QWORD *)v360 = *(_QWORD *)v329;
    v361 = *((_QWORD *)v329 + 1);
    *((_QWORD *)v360 + 1) = v361;
    if (v361)
    {
      v362 = (unint64_t *)(v361 + 8);
      do
        v363 = __ldxr(v362);
      while (__stxr(v363 + 1, v362));
    }
    v360 = (geo::codec::VectorTile *)((char *)v360 + 16);
    v329 += 16;
  }
  while (v360 != v359);
  v364 = v120[118];
  if (v364 != v334)
  {
    v365 = v334;
    do
    {
      v366 = *((_OWORD *)v365 - 1);
      v365 = (geo::codec::VectorTile *)((char *)v365 - 16);
      *((_OWORD *)v358 - 1) = v366;
      v358 -= 16;
      *(_QWORD *)v365 = 0;
      *((_QWORD *)v365 + 1) = 0;
    }
    while (v365 != v364);
  }
  v367 = v120[119];
  if (v367 != v334)
  {
    do
    {
      *(_OWORD *)v359 = *(_OWORD *)v334;
      v359 = (geo::codec::VectorTile *)((char *)v359 + 16);
      *(_QWORD *)v334 = 0;
      *((_QWORD *)v334 + 1) = 0;
      v334 = (geo::codec::VectorTile *)((char *)v334 + 16);
    }
    while (v334 != v367);
    v334 = v120[119];
  }
  j = (uint64_t)v120[118];
  v120[118] = (geo::codec::VectorTile *)v358;
  v120[119] = v359;
  v120[120] = (geo::codec::VectorTile *)&v341[16 * v340];
  while (v334 != (geo::codec::VectorTile *)j)
  {
    v368 = (std::__shared_weak_count *)*((_QWORD *)v334 - 1);
    if (v368)
    {
      v369 = (unint64_t *)&v368->__shared_owners_;
      do
        v370 = __ldaxr(v369);
      while (__stlxr(v370 - 1, v369));
      if (!v370)
      {
        ((void (*)(std::__shared_weak_count *))v368->__on_zero_shared)(v368);
        std::__shared_weak_count::__release_weak(v368);
      }
    }
    v334 = (geo::codec::VectorTile *)((char *)v334 - 16);
  }
  if (j)
    operator delete((void *)j);
LABEL_542:
  v374 = (void **)(v120 + 121);
  v375 = (char *)v120[124];
  v376 = (char *)v120[125];
  v377 = (v376 - v375) >> 4;
  v378 = (uint64_t)v120[123];
  v379 = v120[121];
  if (v377 <= (v378 - (uint64_t)v379) >> 4)
  {
    v394 = v120[122];
    v395 = (v394 - v379) >> 4;
    if (v395 >= v377)
    {
      if (v375 != v376)
      {
        do
        {
          v405 = *(_QWORD *)v375;
          v404 = *((_QWORD *)v375 + 1);
          if (v404)
          {
            v406 = (unint64_t *)(v404 + 8);
            do
              v407 = __ldxr(v406);
            while (__stxr(v407 + 1, v406));
          }
          j = *((_QWORD *)v379 + 1);
          *(_QWORD *)v379 = v405;
          *((_QWORD *)v379 + 1) = v404;
          if (j)
          {
            v408 = (unint64_t *)(j + 8);
            do
              v409 = __ldaxr(v408);
            while (__stlxr(v409 - 1, v408));
            if (!v409)
            {
              (*(void (**)(uint64_t))(*(_QWORD *)j + 16))(j);
              std::__shared_weak_count::__release_weak((std::__shared_weak_count *)j);
            }
          }
          v375 += 16;
          v379 = (geo::codec::VectorTile *)((char *)v379 + 16);
        }
        while (v375 != v376);
        v394 = v568[122];
      }
      while (v394 != v379)
      {
        j = *((_QWORD *)v394 - 1);
        if (j)
        {
          v414 = (unint64_t *)(j + 8);
          do
            v415 = __ldaxr(v414);
          while (__stlxr(v415 - 1, v414));
          if (!v415)
          {
            (*(void (**)(uint64_t))(*(_QWORD *)j + 16))(j);
            std::__shared_weak_count::__release_weak((std::__shared_weak_count *)j);
          }
        }
        v394 = (geo::codec::VectorTile *)((char *)v394 - 16);
      }
      k = v568;
    }
    else
    {
      v396 = &v375[16 * v395];
      if (v394 == v379)
      {
        k = v568;
      }
      else
      {
        k = v568;
        do
        {
          v399 = *(_QWORD *)v375;
          v398 = *((_QWORD *)v375 + 1);
          if (v398)
          {
            v400 = (unint64_t *)(v398 + 8);
            do
              v401 = __ldxr(v400);
            while (__stxr(v401 + 1, v400));
          }
          j = *((_QWORD *)v379 + 1);
          *(_QWORD *)v379 = v399;
          *((_QWORD *)v379 + 1) = v398;
          if (j)
          {
            v402 = (unint64_t *)(j + 8);
            do
              v403 = __ldaxr(v402);
            while (__stlxr(v403 - 1, v402));
            if (!v403)
            {
              (*(void (**)(uint64_t))(*(_QWORD *)j + 16))(j);
              std::__shared_weak_count::__release_weak((std::__shared_weak_count *)j);
            }
          }
          v375 += 16;
          v379 = (geo::codec::VectorTile *)((char *)v379 + 16);
        }
        while (v375 != v396);
        v379 = v568[122];
      }
      v416 = v379;
      if (v396 != v376)
      {
        v416 = v379;
        do
        {
          *(_QWORD *)v416 = *(_QWORD *)v396;
          v417 = *((_QWORD *)v396 + 1);
          *((_QWORD *)v416 + 1) = v417;
          if (v417)
          {
            v418 = (unint64_t *)(v417 + 8);
            do
              v419 = __ldxr(v418);
            while (__stxr(v419 + 1, v418));
          }
          v396 += 16;
          v416 = (geo::codec::VectorTile *)((char *)v416 + 16);
        }
        while (v396 != v376);
      }
      v379 = v416;
    }
  }
  else
  {
    if (v379)
    {
      v380 = v568[122];
      v381 = v120[121];
      if (v380 != v379)
      {
        do
        {
          v382 = (std::__shared_weak_count *)*((_QWORD *)v380 - 1);
          if (v382)
          {
            v383 = (unint64_t *)&v382->__shared_owners_;
            do
              v384 = __ldaxr(v383);
            while (__stlxr(v384 - 1, v383));
            if (!v384)
            {
              ((void (*)(std::__shared_weak_count *))v382->__on_zero_shared)(v382);
              std::__shared_weak_count::__release_weak(v382);
            }
          }
          v380 = (geo::codec::VectorTile *)((char *)v380 - 16);
        }
        while (v380 != v379);
        v381 = (geo::codec::VectorTile *)*v374;
      }
      v568[122] = v379;
      operator delete(v381);
      v378 = 0;
      *v374 = 0;
      v120[122] = 0;
      v120[123] = 0;
    }
    if (v376 - v375 < 0)
      goto LABEL_907;
    v410 = v378 >> 3;
    if (v378 >> 3 <= v377)
      v410 = (v376 - v375) >> 4;
    j = (unint64_t)v378 >= 0x7FFFFFFFFFFFFFF0 ? 0xFFFFFFFFFFFFFFFLL : v410;
    if ((unint64_t)j >> 60)
LABEL_907:
      abort();
    v379 = (geo::codec::VectorTile *)operator new(16 * j);
    k = v568;
    v568[121] = v379;
    v568[122] = v379;
    v568[123] = (geo::codec::VectorTile *)((char *)v379 + 16 * j);
    while (v375 != v376)
    {
      *(_QWORD *)v379 = *(_QWORD *)v375;
      v411 = *((_QWORD *)v375 + 1);
      *((_QWORD *)v379 + 1) = v411;
      if (v411)
      {
        v412 = (unint64_t *)(v411 + 8);
        do
          v413 = __ldxr(v412);
        while (__stxr(v413 + 1, v412));
      }
      v375 += 16;
      v379 = (geo::codec::VectorTile *)((char *)v379 + 16);
    }
  }
  k[122] = v379;
  v420 = (char *)k[127];
  v421 = (char *)k[128];
  if (v421 - v420 >= 1)
  {
    j = (v421 - v420) >> 4;
    v422 = k[121];
    v423 = v379 - v422;
    v424 = (geo::codec::VectorTile *)((char *)v422 + ((v379 - v422) & 0xFFFFFFFFFFFFFFF0));
    v425 = k[123];
    if (j > (v425 - v379) >> 4)
    {
      v426 = v423 >> 4;
      v427 = (v423 >> 4) + j;
      if (v427 >> 60)
        abort();
      v428 = v425 - v422;
      if (v428 >> 3 > v427)
        v427 = v428 >> 3;
      if ((unint64_t)v428 >= 0x7FFFFFFFFFFFFFF0)
        v429 = 0xFFFFFFFFFFFFFFFLL;
      else
        v429 = v427;
      if (!v429)
      {
        v430 = 0;
LABEL_646:
        v438 = &v430[16 * v426];
        v439 = (geo::codec::VectorTile *)&v438[16 * j];
        v440 = (geo::codec::VectorTile *)v438;
        do
        {
          *(_QWORD *)v440 = *(_QWORD *)v420;
          v441 = *((_QWORD *)v420 + 1);
          *((_QWORD *)v440 + 1) = v441;
          if (v441)
          {
            v442 = (unint64_t *)(v441 + 8);
            do
              v443 = __ldxr(v442);
            while (__stxr(v443 + 1, v442));
          }
          v440 = (geo::codec::VectorTile *)((char *)v440 + 16);
          v420 += 16;
        }
        while (v440 != v439);
        v444 = (geo::codec::VectorTile *)*v374;
        if (*v374 != v424)
        {
          v445 = v424;
          do
          {
            v446 = *((_OWORD *)v445 - 1);
            v445 = (geo::codec::VectorTile *)((char *)v445 - 16);
            *((_OWORD *)v438 - 1) = v446;
            v438 -= 16;
            *(_QWORD *)v445 = 0;
            *((_QWORD *)v445 + 1) = 0;
          }
          while (v445 != v444);
        }
        v447 = k[122];
        if (v447 != v424)
        {
          do
          {
            *(_OWORD *)v439 = *(_OWORD *)v424;
            v439 = (geo::codec::VectorTile *)((char *)v439 + 16);
            *(_QWORD *)v424 = 0;
            *((_QWORD *)v424 + 1) = 0;
            v424 = (geo::codec::VectorTile *)((char *)v424 + 16);
          }
          while (v424 != v447);
          v424 = k[122];
        }
        j = (uint64_t)k[121];
        k[121] = (geo::codec::VectorTile *)v438;
        k[122] = v439;
        k[123] = (geo::codec::VectorTile *)&v430[16 * v429];
        while (v424 != (geo::codec::VectorTile *)j)
        {
          v448 = (std::__shared_weak_count *)*((_QWORD *)v424 - 1);
          if (v448)
          {
            v449 = (unint64_t *)&v448->__shared_owners_;
            do
              v450 = __ldaxr(v449);
            while (__stlxr(v450 - 1, v449));
            if (!v450)
            {
              ((void (*)(std::__shared_weak_count *))v448->__on_zero_shared)(v448);
              std::__shared_weak_count::__release_weak(v448);
            }
          }
          v424 = (geo::codec::VectorTile *)((char *)v424 - 16);
        }
        if (j)
          operator delete((void *)j);
        goto LABEL_675;
      }
      if (!(v429 >> 60))
      {
        v430 = (char *)operator new(16 * v429);
        goto LABEL_646;
      }
LABEL_901:
      std::__throw_bad_array_new_length[abi:nn180100]();
    }
    v431 = (v379 - v424) >> 4;
    if (v431 >= j)
    {
      v432 = &v420[16 * j];
      v434 = v379;
LABEL_670:
      v451 = (geo::codec::VectorTile *)((char *)v434 - 16 * j);
      v452 = v434;
      if (v451 < v379)
      {
        v453 = (geo::codec::VectorTile *)((char *)v434 - 16 * j);
        v452 = v434;
        do
        {
          *(_OWORD *)v452 = *(_OWORD *)v453;
          v452 = (geo::codec::VectorTile *)((char *)v452 + 16);
          *(_QWORD *)v453 = 0;
          *((_QWORD *)v453 + 1) = 0;
          v453 = (geo::codec::VectorTile *)((char *)v453 + 16);
        }
        while (v453 < v379);
      }
      v568[122] = v452;
      if (v434 != (geo::codec::VectorTile *)((char *)v424 + 16 * j))
      {
        do
        {
          v543 = *((_OWORD *)v451 - 1);
          v451 = (geo::codec::VectorTile *)((char *)v451 - 16);
          *(_QWORD *)v451 = 0;
          *((_QWORD *)v451 + 1) = 0;
          j = *((_QWORD *)v434 - 1);
          *((_OWORD *)v434 - 1) = v543;
          v434 = (geo::codec::VectorTile *)((char *)v434 - 16);
          if (j)
          {
            v544 = (unint64_t *)(j + 8);
            do
              v545 = __ldaxr(v544);
            while (__stlxr(v545 - 1, v544));
            if (!v545)
            {
              (*(void (**)(uint64_t))(*(_QWORD *)j + 16))(j);
              std::__shared_weak_count::__release_weak((std::__shared_weak_count *)j);
            }
          }
        }
        while (v451 != v424);
      }
      for (k = v568; v420 != v432; v424 = (geo::codec::VectorTile *)((char *)v424 + 16))
      {
        v547 = *(_QWORD *)v420;
        v546 = *((_QWORD *)v420 + 1);
        if (v546)
        {
          v548 = (unint64_t *)(v546 + 8);
          do
            v549 = __ldxr(v548);
          while (__stxr(v549 + 1, v548));
        }
        j = *((_QWORD *)v424 + 1);
        *(_QWORD *)v424 = v547;
        *((_QWORD *)v424 + 1) = v546;
        if (j)
        {
          v550 = (unint64_t *)(j + 8);
          do
            v551 = __ldaxr(v550);
          while (__stlxr(v551 - 1, v550));
          if (!v551)
          {
            (*(void (**)(uint64_t))(*(_QWORD *)j + 16))(j);
            std::__shared_weak_count::__release_weak((std::__shared_weak_count *)j);
          }
        }
        v420 += 16;
      }
      goto LABEL_675;
    }
    v432 = &v420[16 * v431];
    if (v432 == v421)
    {
      v434 = v379;
    }
    else
    {
      v433 = &v420[16 * v431];
      v434 = v379;
      do
      {
        *(_QWORD *)v434 = *(_QWORD *)v433;
        v435 = *((_QWORD *)v433 + 1);
        *((_QWORD *)v434 + 1) = v435;
        if (v435)
        {
          v436 = (unint64_t *)(v435 + 8);
          do
            v437 = __ldxr(v436);
          while (__stxr(v437 + 1, v436));
        }
        v433 += 16;
        v434 = (geo::codec::VectorTile *)((char *)v434 + 16);
      }
      while (v433 != v421);
    }
    k[122] = v434;
    if (v379 - v424 >= 1)
      goto LABEL_670;
  }
LABEL_675:
  if (k[160])
  {
    j = (uint64_t)k[159];
    if (j)
    {
      do
      {
        v539 = *(_QWORD *)j;
        v540 = *(_QWORD **)(j + 40);
        if (v540)
        {
          do
          {
            v541 = (_QWORD *)*v540;
            operator delete(v540);
            v540 = v541;
          }
          while (v541);
        }
        v542 = *(void **)(j + 24);
        *(_QWORD *)(j + 24) = 0;
        if (v542)
          operator delete(v542);
        operator delete((void *)j);
        j = v539;
      }
      while (v539);
    }
    k[159] = 0;
    v454 = k[158];
    if (v454)
    {
      for (m = 0; m != v454; m = (geo::codec::VectorTile *)((char *)m + 1))
        *((_QWORD *)k[157] + (_QWORD)m) = 0;
    }
    k[160] = 0;
  }
  v456 = k[118];
  v577 = k[119];
  if (v456 != v577)
  {
    v457 = k + 159;
    while (1)
    {
      v458 = *(_QWORD *)(*(_QWORD *)v456 + 8);
      v459 = *(_WORD *)(v458 + 276);
      if (v459)
        break;
LABEL_683:
      v456 = (geo::codec::VectorTile *)((char *)v456 + 16);
      if (v456 == v577)
        goto LABEL_885;
    }
    v460 = 0;
    while (1)
    {
      v461 = *(_QWORD *)(*((_QWORD *)k[90] + 200) + 8 * (*(_DWORD *)(v458 + 288) + v460));
      v462 = k[108];
      if (v461 < 0x4EC4EC4EC4EC4EC5 * ((k[109] - v462) >> 3))
        break;
LABEL_690:
      if (++v460 >= v459)
        goto LABEL_683;
    }
    v463 = *(_QWORD *)(*((_QWORD *)v462 + 13 * v461 + 2) + 40);
    v464 = (unint64_t)k[158];
    if (v464)
    {
      v465 = (uint8x8_t)vcnt_s8((int8x8_t)v464);
      v465.i16[0] = vaddlv_u8(v465);
      if (v465.u32[0] > 1uLL)
      {
        j = *(_QWORD *)(*((_QWORD *)v462 + 13 * v461 + 2) + 40);
        if (v463 >= v464)
          j = v463 % v464;
      }
      else
      {
        j = (v464 - 1) & v463;
      }
      v466 = (void **)*((_QWORD *)k[157] + j);
      if (v466)
      {
        v467 = (char *)*v466;
        if (*v466)
        {
          if (v465.u32[0] < 2uLL)
          {
            while (1)
            {
              v469 = *((_QWORD *)v467 + 1);
              if (v469 == v463)
              {
                if (*((_QWORD *)v467 + 2) == v463)
                  goto LABEL_772;
              }
              else if ((v469 & (v464 - 1)) != j)
              {
                goto LABEL_712;
              }
              v467 = *(char **)v467;
              if (!v467)
                goto LABEL_712;
            }
          }
          do
          {
            v468 = *((_QWORD *)v467 + 1);
            if (v468 == v463)
            {
              if (*((_QWORD *)v467 + 2) == v463)
                goto LABEL_772;
            }
            else
            {
              if (v468 >= v464)
                v468 %= v464;
              if (v468 != j)
                break;
            }
            v467 = *(char **)v467;
          }
          while (v467);
        }
      }
    }
LABEL_712:
    v467 = (char *)operator new(0x40uLL);
    *(_QWORD *)&v592 = v467;
    *((_QWORD *)&v592 + 1) = v457;
    *(_QWORD *)v467 = 0;
    *((_QWORD *)v467 + 1) = v463;
    *((_QWORD *)v467 + 2) = v463;
    *(_OWORD *)(v467 + 24) = 0u;
    *(_OWORD *)(v467 + 40) = 0u;
    *((_DWORD *)v467 + 14) = 1065353216;
    v593 = 1;
    v470 = (float)((unint64_t)k[160] + 1);
    v471 = *((float *)k + 322);
    if (v464 && (float)(v471 * (float)v464) >= v470)
    {
LABEL_762:
      v494 = k[157];
      v495 = (_QWORD *)*((_QWORD *)v494 + j);
      if (v495)
      {
        *(_QWORD *)v467 = *v495;
      }
      else
      {
        *(_QWORD *)v467 = *v457;
        *v457 = v467;
        *((_QWORD *)v494 + j) = v457;
        if (!*(_QWORD *)v467)
        {
LABEL_771:
          k[160] = (geo::codec::VectorTile *)((char *)k[160] + 1);
LABEL_772:
          v497 = *(_QWORD *)v456;
          v498 = HIDWORD(*(_QWORD *)v456);
          v499 = 0x9DDFEA08EB382D69 * ((8 * *(_QWORD *)v456 + 8) ^ v498);
          v500 = (0x9DDFEA08EB382D69 * (v498 ^ (v499 >> 47) ^ v499)) ^ ((0x9DDFEA08EB382D69
                                                                         * (v498 ^ (v499 >> 47) ^ v499)) >> 47);
          v501 = 0x9DDFEA08EB382D69 * v500;
          v502 = *((_QWORD *)v467 + 4);
          if (v502)
          {
            v503 = (uint8x8_t)vcnt_s8((int8x8_t)v502);
            v503.i16[0] = vaddlv_u8(v503);
            if (v503.u32[0] > 1uLL)
            {
              j = 0x9DDFEA08EB382D69 * v500;
              if (v501 >= v502)
                j = v501 % v502;
            }
            else
            {
              j = v501 & (v502 - 1);
            }
            v504 = *(_QWORD **)(*((_QWORD *)v467 + 3) + 8 * j);
            if (v504)
            {
              v505 = (_QWORD *)*v504;
              if (v505)
              {
                if (v503.u32[0] < 2uLL)
                {
                  while (1)
                  {
                    v507 = v505[1];
                    if (v507 == v501)
                    {
                      if (v505[2] == v497)
                        goto LABEL_689;
                    }
                    else if ((v507 & (v502 - 1)) != j)
                    {
                      goto LABEL_792;
                    }
                    v505 = (_QWORD *)*v505;
                    if (!v505)
                      goto LABEL_792;
                  }
                }
                do
                {
                  v506 = v505[1];
                  if (v506 == v501)
                  {
                    if (v505[2] == v497)
                      goto LABEL_689;
                  }
                  else
                  {
                    if (v506 >= v502)
                      v506 %= v502;
                    if (v506 != j)
                      break;
                  }
                  v505 = (_QWORD *)*v505;
                }
                while (v505);
              }
            }
          }
LABEL_792:
          v508 = operator new(0x18uLL);
          *v508 = 0;
          v508[1] = v501;
          v508[2] = v497;
          v509 = (float)(unint64_t)(*((_QWORD *)v467 + 6) + 1);
          v510 = *((float *)v467 + 14);
          if (v502 && (float)(v510 * (float)v502) >= v509)
          {
LABEL_858:
            v536 = *((_QWORD *)v467 + 3);
            v537 = *(_QWORD **)(v536 + 8 * j);
            if (v537)
            {
              *v508 = *v537;
            }
            else
            {
              *v508 = *((_QWORD *)v467 + 5);
              *((_QWORD *)v467 + 5) = v508;
              *(_QWORD *)(v536 + 8 * j) = v467 + 40;
              if (!*v508)
              {
LABEL_688:
                ++*((_QWORD *)v467 + 6);
LABEL_689:
                v459 = *(_WORD *)(v458 + 276);
                k = v568;
                goto LABEL_690;
              }
              v538 = *(_QWORD *)(*v508 + 8);
              if ((v502 & (v502 - 1)) != 0)
              {
                if (v538 >= v502)
                  v538 %= v502;
              }
              else
              {
                v538 &= v502 - 1;
              }
              v537 = (_QWORD *)(*((_QWORD *)v467 + 3) + 8 * v538);
            }
            *v537 = v508;
            goto LABEL_688;
          }
          v511 = (v502 & (v502 - 1)) != 0;
          if (v502 < 3)
            v511 = 1;
          v512 = v511 | (2 * v502);
          v513 = vcvtps_u32_f32(v509 / v510);
          if (v512 <= v513)
            prime = v513;
          else
            prime = v512;
          if (prime == 1)
          {
            prime = 2;
          }
          else if ((prime & (prime - 1)) != 0)
          {
            prime = std::__next_prime(prime);
            v502 = *((_QWORD *)v467 + 4);
          }
          if (prime <= v502)
          {
            if (prime >= v502)
              goto LABEL_853;
            v527 = vcvtps_u32_f32((float)*((unint64_t *)v467 + 6) / *((float *)v467 + 14));
            if (v502 < 3
              || (v528 = (uint8x8_t)vcnt_s8((int8x8_t)v502), v528.i16[0] = vaddlv_u8(v528), v528.u32[0] > 1uLL))
            {
              v527 = std::__next_prime(v527);
            }
            else
            {
              v529 = 1 << -(char)__clz(v527 - 1);
              if (v527 >= 2)
                v527 = v529;
            }
            if (prime <= v527)
              prime = v527;
            if (prime >= v502)
              goto LABEL_853;
            if (!prime)
            {
              v535 = (void *)*((_QWORD *)v467 + 3);
              *((_QWORD *)v467 + 3) = 0;
              if (v535)
                operator delete(v535);
              *((_QWORD *)v467 + 4) = 0;
              goto LABEL_853;
            }
          }
          if (prime >> 61)
            goto LABEL_901;
          v515 = operator new(8 * prime);
          v516 = (void *)*((_QWORD *)v467 + 3);
          *((_QWORD *)v467 + 3) = v515;
          if (v516)
            operator delete(v516);
          v517 = 0;
          *((_QWORD *)v467 + 4) = prime;
          do
            *(_QWORD *)(*((_QWORD *)v467 + 3) + 8 * v517++) = 0;
          while (prime != v517);
          v519 = v467 + 40;
          v518 = (_QWORD *)*((_QWORD *)v467 + 5);
          if (!v518)
            goto LABEL_853;
          v520 = v518[1];
          v521 = prime - 1;
          if ((prime & (prime - 1)) == 0)
          {
            v522 = v520 & v521;
            *(_QWORD *)(*((_QWORD *)v467 + 3) + 8 * v522) = v519;
            while (1)
            {
              v523 = (_QWORD *)*v518;
              if (!*v518)
                break;
              v524 = v523[1] & v521;
              if (v524 == v522)
              {
                v518 = (_QWORD *)*v518;
              }
              else
              {
                v525 = *((_QWORD *)v467 + 3);
                if (*(_QWORD *)(v525 + 8 * v524))
                {
                  *v518 = *v523;
                  v526 = 8 * v524;
                  *v523 = **(_QWORD **)(*((_QWORD *)v467 + 3) + v526);
                  **(_QWORD **)(*((_QWORD *)v467 + 3) + v526) = v523;
                }
                else
                {
                  *(_QWORD *)(v525 + 8 * v524) = v518;
                  v518 = v523;
                  v522 = v524;
                }
              }
            }
LABEL_853:
            v502 = *((_QWORD *)v467 + 4);
            if ((v502 & (v502 - 1)) != 0)
            {
              if (v501 >= v502)
                j = v501 % v502;
              else
                j = v501;
            }
            else
            {
              j = (v502 - 1) & v501;
            }
            goto LABEL_858;
          }
          if (v520 >= prime)
            v520 %= prime;
          *(_QWORD *)(*((_QWORD *)v467 + 3) + 8 * v520) = v519;
          v530 = (_QWORD *)*v518;
          if (!*v518)
            goto LABEL_853;
          while (1)
          {
            v532 = v530[1];
            if (v532 >= prime)
              v532 %= prime;
            if (v532 != v520)
            {
              v533 = *((_QWORD *)v467 + 3);
              if (!*(_QWORD *)(v533 + 8 * v532))
              {
                *(_QWORD *)(v533 + 8 * v532) = v518;
                goto LABEL_830;
              }
              *v518 = *v530;
              v531 = 8 * v532;
              *v530 = **(_QWORD **)(*((_QWORD *)v467 + 3) + v531);
              **(_QWORD **)(*((_QWORD *)v467 + 3) + v531) = v530;
              v530 = v518;
            }
            v532 = v520;
LABEL_830:
            v518 = v530;
            v530 = (_QWORD *)*v530;
            v520 = v532;
            if (!v530)
              goto LABEL_853;
          }
        }
        v496 = *(_QWORD *)(*(_QWORD *)v467 + 8);
        if ((v464 & (v464 - 1)) != 0)
        {
          if (v496 >= v464)
            v496 %= v464;
        }
        else
        {
          v496 &= v464 - 1;
        }
        v495 = (_QWORD *)((char *)k[157] + 8 * v496);
      }
      *v495 = v467;
      goto LABEL_771;
    }
    v472 = (v464 & (v464 - 1)) != 0;
    if (v464 < 3)
      v472 = 1;
    v473 = v472 | (2 * v464);
    v474 = vcvtps_u32_f32(v470 / v471);
    if (v473 <= v474)
      v475 = v474;
    else
      v475 = v473;
    if (v475 == 1)
    {
      v475 = 2;
    }
    else if ((v475 & (v475 - 1)) != 0)
    {
      v475 = std::__next_prime(v475);
      v464 = (unint64_t)k[158];
    }
    if (v475 <= v464)
    {
      if (v475 >= v464)
        goto LABEL_749;
      v487 = vcvtps_u32_f32((float)(unint64_t)k[160] / *((float *)k + 322));
      if (v464 < 3 || (v488 = (uint8x8_t)vcnt_s8((int8x8_t)v464), v488.i16[0] = vaddlv_u8(v488), v488.u32[0] > 1uLL))
      {
        v487 = std::__next_prime(v487);
      }
      else
      {
        v489 = 1 << -(char)__clz(v487 - 1);
        if (v487 >= 2)
          v487 = v489;
      }
      if (v475 <= v487)
        v475 = v487;
      if (v475 >= v464)
      {
        v464 = (unint64_t)k[158];
LABEL_749:
        if ((v464 & (v464 - 1)) != 0)
        {
          if (v463 >= v464)
            j = v463 % v464;
          else
            j = v463;
        }
        else
        {
          j = (v464 - 1) & v463;
        }
        goto LABEL_762;
      }
      if (!v475)
      {
        v534 = k[157];
        k[157] = 0;
        if (v534)
          operator delete(v534);
        v464 = 0;
        k[158] = 0;
        goto LABEL_749;
      }
    }
    if (v475 >> 61)
      goto LABEL_901;
    v476 = (geo::codec::VectorTile *)operator new(8 * v475);
    v477 = k[157];
    k[157] = v476;
    if (v477)
      operator delete(v477);
    v478 = 0;
    k[158] = (geo::codec::VectorTile *)v475;
    do
      *((_QWORD *)k[157] + v478++) = 0;
    while (v475 != v478);
    v479 = (_QWORD *)*v457;
    if (!*v457)
    {
LABEL_748:
      v464 = v475;
      goto LABEL_749;
    }
    v480 = v479[1];
    v481 = v475 - 1;
    if ((v475 & (v475 - 1)) == 0)
    {
      v482 = v480 & v481;
      *((_QWORD *)k[157] + v482) = v457;
      for (n = (_QWORD *)*v479; *v479; n = (_QWORD *)*v479)
      {
        v484 = n[1] & v481;
        if (v484 == v482)
        {
          v479 = n;
        }
        else
        {
          v485 = k[157];
          if (*((_QWORD *)v485 + v484))
          {
            *v479 = *n;
            v486 = 8 * v484;
            *n = **(_QWORD **)((char *)k[157] + v486);
            **(_QWORD **)((char *)k[157] + v486) = n;
          }
          else
          {
            *((_QWORD *)v485 + v484) = v479;
            v479 = n;
            v482 = v484;
          }
        }
      }
      goto LABEL_748;
    }
    if (v480 >= v475)
      v480 %= v475;
    *((_QWORD *)k[157] + v480) = v457;
    v490 = (_QWORD *)*v479;
    if (!*v479)
      goto LABEL_748;
    while (1)
    {
      v492 = v490[1];
      if (v492 >= v475)
        v492 %= v475;
      if (v492 != v480)
      {
        v493 = k[157];
        if (!*((_QWORD *)v493 + v492))
        {
          *((_QWORD *)v493 + v492) = v479;
          goto LABEL_753;
        }
        *v479 = *v490;
        v491 = 8 * v492;
        *v490 = **(_QWORD **)((char *)k[157] + v491);
        **(_QWORD **)((char *)k[157] + v491) = v490;
        v490 = v479;
      }
      v492 = v480;
LABEL_753:
      v479 = v490;
      v490 = (_QWORD *)*v490;
      v480 = v492;
      if (!v490)
        goto LABEL_748;
    }
  }
LABEL_885:
  for (ii = __pa; ii != __p_8; ii += 8)
  {
    if (*(_QWORD *)ii)
      MEMORY[0x1A1AF4E00](*(_QWORD *)ii, 0x1020C4024DAA5DELL);
  }
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(v584);
  if (__pa)
    operator delete(__pa);
  if (v569)
    operator delete(v569);
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(v587);
  v553 = (_QWORD *)v590;
  if ((_QWORD)v590)
  {
    do
    {
      v554 = (_QWORD *)*v553;
      operator delete(v553);
      v553 = v554;
    }
    while (v554);
  }
  v555 = (void *)v589;
  *(_QWORD *)&v589 = 0;
  if (v555)
    operator delete(v555);
  if (v556)
    operator delete(v556);
}

void sub_19F921810(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,void *__p,_QWORD *a23,_QWORD *a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,_QWORD *a29,uint64_t a30,uint64_t a31,uint64_t a32,_QWORD *a33)
{
  void *v33;
  uint64_t v34;
  _QWORD *i;
  _QWORD *v37;
  _QWORD *v38;
  void *v39;

  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](v34 - 112);
  if (v33)
    operator delete(v33);
  for (i = a23; i != a24; ++i)
  {
    if (*i)
      MEMORY[0x1A1AF4E00](*i, 0x1020C4024DAA5DELL);
  }
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(a29);
  if (a23)
    operator delete(a23);
  if (a20)
    operator delete(a20);
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(a33);
  v37 = *(_QWORD **)(v34 - 144);
  if (v37)
  {
    do
    {
      v38 = (_QWORD *)*v37;
      operator delete(v37);
      v37 = v38;
    }
    while (v38);
  }
  v39 = *(void **)(v34 - 160);
  *(_QWORD *)(v34 - 160) = 0;
  if (v39)
  {
    operator delete(v39);
    if (!a11)
LABEL_16:
      _Unwind_Resume(a1);
  }
  else if (!a11)
  {
    goto LABEL_16;
  }
  operator delete(a11);
  _Unwind_Resume(a1);
}

void md::TransitTileData::createDisplayConnections(id *this, ggl::Loader *a2)
{
  id *v2;
  uint64_t v3;
  uint64_t v4;
  BOOL v5;
  id *v6;
  id *v7;
  char *v8;
  char *v9;
  char *v10;
  char *v11;
  id v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  _BYTE *v21;
  char *v22;
  unint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  _OWORD *v27;
  char *v28;
  uint64_t v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  unint64_t v34;
  malloc_zone_t *v35;
  _QWORD *v36;
  _QWORD *v37;
  uint64_t Points;
  id v39;
  _QWORD *v40;
  _QWORD *v41;
  _QWORD *v42;
  uint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *p_shared_owners;
  unint64_t v46;
  unint64_t *v47;
  unint64_t v48;
  _QWORD *v49;
  _QWORD *v50;
  uint64_t v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  unint64_t *v55;
  unint64_t v56;
  uint64_t v57;
  __int128 v58;
  int64x2_t v59;
  unsigned __int8 v60;
  _QWORD *v61;
  uint64_t **v62;
  uint64_t v63;
  __int128 v64;
  unsigned __int8 v65;
  unint64_t v66;
  uint64_t *v67;
  _QWORD *v68;
  uint64_t *v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  unint64_t v74;
  char *v75;
  uint64_t *v76;
  char *v77;
  unint64_t v78;
  uint64_t v79;
  char *v80;
  uint64_t *v81;
  uint64_t v82;
  __int128 v83;
  __int128 v84;
  uint64_t v85;
  uint64_t *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  _QWORD *v90;
  _QWORD *v91;
  malloc_zone_t *v92;
  void (***v93)(_QWORD, uint64_t);
  void (***v94)(_QWORD, uint64_t);
  unsigned __int8 v95;
  uint64_t v96;
  geo::read_write_lock *v97;
  const char *v98;
  uint64_t v99;
  _QWORD *v100;
  id v101;
  _QWORD *v102;
  char *v103;
  unint64_t *v104;
  unint64_t v105;
  std::__shared_weak_count *v106;
  unint64_t *v107;
  unint64_t v108;
  uint64_t v109;
  uint64_t v110;
  id v111;
  uint64_t v112;
  char *v113;
  unint64_t *v114;
  unint64_t v115;
  std::__shared_weak_count *v116;
  unint64_t *v117;
  unint64_t v118;
  uint64_t v119;
  std::__shared_weak_count *v120;
  unint64_t *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  unint64_t v125;
  std::__shared_weak_count *v126;
  unint64_t *v127;
  unint64_t v128;
  unint64_t v129;
  uint64_t v130;
  _QWORD *v131;
  id v132;
  _QWORD *v133;
  char *v134;
  unint64_t *v135;
  unint64_t v136;
  std::__shared_weak_count *v137;
  unint64_t *v138;
  unint64_t v139;
  uint64_t v140;
  uint64_t v141;
  id v142;
  uint64_t v143;
  char *v144;
  unint64_t *v145;
  unint64_t v146;
  std::__shared_weak_count *v147;
  unint64_t *v148;
  unint64_t v149;
  uint64_t v150;
  std::__shared_weak_count *v151;
  unint64_t *v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  unint64_t v156;
  std::__shared_weak_count *v157;
  unint64_t *v158;
  unint64_t v159;
  unint64_t v160;
  _QWORD *v161;
  uint64_t v162;
  unsigned __int8 v163;
  uint64_t v164;
  unint64_t v165;
  unint64_t v166;
  unint64_t v167;
  unint64_t v168;
  uint64_t v169;
  _DWORD *v170;
  int *v171;
  int v172;
  uint64_t v173;
  gss::Allocator *v174;
  uint64_t v175;
  __int128 v176;
  std::__shared_weak_count *v177;
  unint64_t *v178;
  unint64_t v179;
  std::__shared_weak_count *v180;
  unint64_t *v181;
  unint64_t v182;
  uint64_t v183;
  uint64_t (**v184)();
  std::__shared_weak_count *v185;
  unint64_t *v186;
  unint64_t v187;
  unint64_t v188;
  unint64_t *v189;
  unint64_t v190;
  unint64_t v191;
  float *v192;
  float v193;
  BOOL v194;
  unsigned int v195;
  unint64_t v196;
  unint64_t v197;
  char *v198;
  char v199;
  BOOL v200;
  uint64_t (**v201)();
  uint64_t v202;
  uint64_t (***v203)();
  unint64_t v204;
  _QWORD *v205;
  uint64_t v206;
  uint64_t v207;
  unint64_t v208;
  __int128 v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t (***v213)();
  uint64_t v214;
  char *v215;
  char *v216;
  unint64_t v217;
  unint64_t v218;
  unint64_t v219;
  char *v220;
  BOOL v221;
  uint64_t v222;
  char *v223;
  uint64_t (***v224)();
  char *v225;
  uint64_t v226;
  __int128 v227;
  __int128 v228;
  uint64_t (**v229)();
  char *v230;
  uint64_t v231;
  _OWORD *v232;
  __int128 *v233;
  unint64_t v234;
  __int128 v235;
  __int128 v236;
  __int128 v237;
  __int128 v238;
  malloc_zone_t *v239;
  void (***v240)(_QWORD);
  void (***v241)(_QWORD);
  unsigned __int8 v242;
  uint64_t v243;
  geo::read_write_lock *v244;
  const char *v245;
  unsigned __int8 v246;
  uint64_t v247;
  unsigned __int8 v248;
  uint64_t v249;
  geo::read_write_lock *v250;
  const char *v251;
  int v252;
  uint64_t v253;
  geo::read_write_lock *v254;
  const char *v255;
  malloc_zone_t *zone;
  int v257;
  uint64_t v258;
  geo::read_write_lock *v259;
  const char *v260;
  malloc_zone_t *v261;
  uint64_t v262;
  geo::read_write_lock *v263;
  const char *v264;
  malloc_zone_t *v265;
  uint64_t v266;
  geo::read_write_lock *v267;
  const char *v268;
  malloc_zone_t *v269;
  uint64_t v270;
  geo::read_write_lock *v271;
  const char *v272;
  malloc_zone_t *v273;
  uint64_t v274;
  _QWORD *v275;
  int64_t v276;
  _QWORD *v277;
  uint64_t v278;
  char *v279;
  _QWORD *v280;
  char *v281;
  _QWORD *v282;
  _QWORD **v283;
  _QWORD **v284;
  char *v285;
  _QWORD *v286;
  uint64_t *v287;
  uint64_t *v288;
  uint64_t v289;
  uint64_t v290;
  unint64_t v291;
  unint64_t v292;
  uint64_t v293;
  unint64_t v294;
  _QWORD *v295;
  uint64_t v296;
  unint64_t v297;
  uint64_t v298;
  uint64_t (**v299)();
  float *v300;
  float v301;
  uint64_t v302;
  float v303;
  float v304;
  float v305;
  float v306;
  float v307;
  float v308;
  float v309;
  uint64_t v310;
  float *v311;
  uint64_t v312;
  uint64_t v313;
  double v314;
  float v315;
  float v316;
  unint64_t v317;
  float v318;
  float v319;
  uint64_t v320;
  float *v321;
  float v322;
  float v323;
  float *v324;
  uint64_t v325;
  float v326;
  float v327;
  float v328;
  float v329;
  float v330;
  double v331;
  uint64_t v332;
  unint64_t v333;
  _QWORD *v334;
  uint64_t v335;
  uint64_t v336;
  unint64_t v337;
  unint64_t v338;
  _BYTE *v339;
  char *v340;
  unint64_t v341;
  char *v342;
  uint64_t v343;
  uint64_t v344;
  _OWORD *v345;
  char *v346;
  uint64_t v347;
  __int128 v348;
  gdc::GlobeTileGrid *v349;
  char *v350;
  gdc::GlobeTileGrid *v351;
  char *v352;
  gdc::GlobeTileGrid *v353;
  uint64_t v354;
  char *v355;
  uint64_t *v356;
  uint64_t *v357;
  uint64_t v358;
  uint64_t v359;
  unint64_t v360;
  uint64_t v361;
  uint64_t v362;
  gdc::GlobeTileGrid *v363;
  uint64_t v364;
  float *v365;
  float v366;
  unsigned int v367;
  float v368;
  unsigned int v369;
  float *v370;
  float v371;
  float v372;
  unint64_t v373;
  unint64_t v374;
  uint64_t v375;
  uint64_t v376;
  unint64_t v377;
  char *v378;
  unint64_t *v379;
  __int128 v380;
  unsigned __int8 v381;
  char *v382;
  unint64_t *v383;
  __int128 v384;
  unsigned __int8 v385;
  uint64_t v386;
  uint64_t v387;
  unint64_t v388;
  unint64_t v389;
  unint64_t v390;
  std::__shared_weak_count *v391;
  unint64_t *v392;
  unint64_t v393;
  unint64_t v394;
  char *v395;
  _QWORD *v396;
  char *v397;
  uint64_t v398;
  uint64_t v399;
  unint64_t v400;
  uint64_t v401;
  unint64_t v402;
  _BYTE *v403;
  uint64_t *v404;
  unint64_t v405;
  unint64_t v406;
  uint64_t v407;
  _OWORD *v408;
  char *v409;
  uint64_t v410;
  __int128 v411;
  uint64_t v412;
  uint64_t v413;
  unint64_t v414;
  uint64_t v415;
  uint64_t v416;
  uint64_t v417;
  uint64_t v418;
  uint64_t v419;
  uint64_t *v420;
  uint64_t v421;
  uint64_t v422;
  uint64_t v423;
  uint64_t v424;
  uint64_t v425;
  uint64_t v426;
  _QWORD *v427;
  _QWORD *v428;
  uint64_t v429;
  _QWORD *v430;
  uint64_t v431;
  uint64_t v432;
  uint64_t v433;
  std::__shared_weak_count *end;
  unint64_t *v435;
  unint64_t v436;
  std::__shared_weak_count *v437;
  unint64_t *v438;
  unint64_t v439;
  _QWORD *v440;
  int v441;
  uint64_t v442;
  int v443;
  uint64_t v444;
  id v445;
  std::__shared_weak_count *v446;
  unint64_t *v447;
  unint64_t v448;
  uint64_t (***v449)();
  uint64_t v450;
  const QuadTile *v451;
  uint64_t v453;
  _QWORD *v454;
  uint64_t v455;
  void **v456;
  uint64_t v457;
  _QWORD *v458;
  uint64_t v459;
  gdc::GlobeTileGrid **v460;
  id *v461;
  id *v462;
  _QWORD *v463;
  _QWORD **v464;
  _QWORD *v465;
  char *v466;
  _QWORD *v467;
  char *v468;
  uint64_t v469;
  _QWORD *v470;
  uint64_t *v471;
  char *v472;
  _DWORD *v473;
  uint64_t *v474;
  unint64_t v475;
  _QWORD *v476;
  unint64_t v477;
  uint64_t v478;
  char *v479;
  char *v480;
  unint64_t v481;
  unint64_t v482;
  _QWORD v483[5];
  unint64_t v484;
  uint64_t v485[2];
  __int128 v486;
  std::vector<unsigned int> v487;
  uint64_t (**v488)();
  uint64_t (**v489)();
  uint64_t v490;
  void **v491;
  unsigned __int8 v492;
  uint64_t v493;

  v2 = this;
  v493 = *MEMORY[0x1E0C80C00];
  v478 = objc_msgSend(this[95], "isoAlphaAtlas");
  *((_DWORD *)v2 + 335) = *(_DWORD *)(v478 + 8);
  v3 = geo::codec::VectorTile::transitStationTransferCount((geo::codec::VectorTile *)v2[90]);
  v4 = geo::codec::VectorTile::transitStationTransfers((geo::codec::VectorTile *)v2[90]);
  v453 = v3;
  v455 = v4;
  if (v3)
    v5 = v4 == 0;
  else
    v5 = 1;
  v461 = v2;
  if (!v5)
  {
    v31 = 0;
    v462 = v2 + 114;
    while (1)
    {
      v457 = v31;
      v32 = v455 + 104 * v31;
      v33 = (_QWORD *)(v32 + 88);
      if (*(_QWORD *)(v32 + 88))
        break;
LABEL_40:
      v31 = v457 + 1;
      if (v457 + 1 == v453)
        goto LABEL_6;
    }
    v34 = 0;
    v471 = (uint64_t *)(v32 + 24);
    v473 = (_DWORD *)(v455 + 104 * v31 + 96);
    v469 = v455 + 104 * v31;
    v465 = (_QWORD *)(v32 + 88);
    while (1)
    {
      v484 = 0;
      Points = geo::codec::pBTransitStationTransferGetPoints((_QWORD *)v32, v34, &v484);
      if (Points)
      {
        v481 = v484;
        if (v484)
          break;
      }
LABEL_46:
      if (++v34 >= *v33)
        goto LABEL_40;
    }
    v39 = v2[97];
    v475 = Points;
    v40 = operator new(0x50uLL);
    *v40 = 0;
    v40[1] = 0;
    v40[3] = 0;
    v40[4] = 0;
    v40[2] = v32;
    *((_DWORD *)v40 + 10) = *(_DWORD *)(v32 + 68);
    *((_DWORD *)v40 + 11) = *v473;
    *((_WORD *)v40 + 24) = 1;
    v41 = (_QWORD *)operator new();
    v42 = v41;
    v482 = v34;
    v43 = *((_QWORD *)v39 + 4);
    v44 = (std::__shared_weak_count *)*((_QWORD *)v39 + 5);
    if (v44)
    {
      p_shared_owners = (unint64_t *)&v44->__shared_owners_;
      do
        v46 = __ldxr(p_shared_owners);
      while (__stxr(v46 + 1, p_shared_owners));
      ggl::PipelineSetup::PipelineSetup(v41, v43, (uint64_t)v44);
      v47 = (unint64_t *)&v44->__shared_owners_;
      do
        v48 = __ldaxr(v47);
      while (__stlxr(v48 - 1, v47));
      if (!v48)
      {
        ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
        std::__shared_weak_count::__release_weak(v44);
      }
    }
    else
    {
      ggl::PipelineSetup::PipelineSetup(v41, v43, 0);
    }
    *v42 = &off_1E42B5E58;
    v40[7] = v42;
    v49 = (_QWORD *)operator new();
    v50 = v49;
    v51 = *((_QWORD *)v39 + 4);
    v52 = (std::__shared_weak_count *)*((_QWORD *)v39 + 5);
    if (v52)
    {
      v53 = (unint64_t *)&v52->__shared_owners_;
      do
        v54 = __ldxr(v53);
      while (__stxr(v54 + 1, v53));
      ggl::PipelineSetup::PipelineSetup(v49, v51, (uint64_t)v52);
      v55 = (unint64_t *)&v52->__shared_owners_;
      do
        v56 = __ldaxr(v55);
      while (__stlxr(v56 - 1, v55));
      if (!v56)
      {
        ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
        std::__shared_weak_count::__release_weak(v52);
      }
    }
    else
    {
      ggl::PipelineSetup::PipelineSetup(v49, v51, 0);
    }
    *v50 = &off_1E42B5E58;
    v40[8] = v50;
    v57 = operator new();
    *(_QWORD *)v57 = &off_1E42AF2E8;
    *(_QWORD *)(v57 + 8) = 0;
    *(_QWORD *)(v57 + 64) = 0;
    *(_QWORD *)(v57 + 40) = 0;
    *(_QWORD *)(v57 + 48) = 0;
    *(_QWORD *)(v57 + 32) = "";
    *(_DWORD *)(v57 + 56) = 0;
    *(_DWORD *)(v57 + 72) = 1065353216;
    v58 = 0uLL;
    *(_OWORD *)(v57 + 80) = 0u;
    *(_OWORD *)(v57 + 96) = 0u;
    v59 = vdupq_n_s64(1uLL);
    *(int64x2_t *)(v57 + 112) = v59;
    *(_QWORD *)(v57 + 128) = 0;
    *(_QWORD *)(v57 + 16) = &off_1E42AF548;
    *(_BYTE *)(v57 + 136) = 1;
    *(_QWORD *)(v57 + 192) = 0;
    *(_QWORD *)(v57 + 168) = 0;
    *(_QWORD *)(v57 + 176) = 0;
    *(_QWORD *)(v57 + 160) = "";
    *(_DWORD *)(v57 + 184) = 0;
    *(_DWORD *)(v57 + 200) = 1065353216;
    *(_OWORD *)(v57 + 208) = 0u;
    *(_OWORD *)(v57 + 224) = 0u;
    *(int64x2_t *)(v57 + 240) = v59;
    *(_QWORD *)(v57 + 256) = 0;
    *(_QWORD *)(v57 + 144) = &off_1E42AF548;
    *(_BYTE *)(v57 + 264) = 1;
    *(_OWORD *)(v57 + 272) = 0u;
    *(_OWORD *)(v57 + 288) = 0u;
    *(_OWORD *)(v57 + 304) = 0u;
    if ((v60 & 1) == 0)
    {
      v58 = 0uLL;
      if (v252)
      {
        v253 = operator new();
        *(_QWORD *)(v253 + 16) = 0xA3D02C1100000005;
        *(_QWORD *)(v253 + 24) = "GeoGL";
        *(_OWORD *)(v253 + 32) = xmmword_19FFB2DE0;
        *(_QWORD *)v253 = &off_1E42B5668;
        *(_QWORD *)(v253 + 8) = "GeoGL";
        *(_OWORD *)(v253 + 72) = 0u;
        *(_OWORD *)(v253 + 88) = 0u;
        *(_OWORD *)(v253 + 104) = 0u;
        *(_OWORD *)(v253 + 120) = 0u;
        *(_OWORD *)(v253 + 136) = 0u;
        *(_OWORD *)(v253 + 152) = 0u;
        *(_OWORD *)(v253 + 168) = 0u;
        *(_OWORD *)(v253 + 184) = 0u;
        *(_OWORD *)(v253 + 200) = 0u;
        *(_OWORD *)(v253 + 216) = 0u;
        *(_OWORD *)(v253 + 232) = 0u;
        *(_QWORD *)(v253 + 248) = 0;
        *(_OWORD *)(v253 + 56) = 0u;
        v254 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v253 + 56), 0);
        if ((_DWORD)v254)
          geo::read_write_lock::logFailure(v254, (uint64_t)"initialization", v255);
        zone = malloc_create_zone(0, 0);
        *(_QWORD *)(v253 + 48) = zone;
        malloc_set_zone_name(zone, "GeoGL");
        *(_QWORD *)(v253 + 256) = os_log_create("com.apple.VectorKit", "Memory");
        ggl::Allocator::instance(void)::alloc = v253;
        v58 = 0uLL;
      }
    }
    *(_QWORD *)(v57 + 320) = ggl::Allocator::instance(void)::alloc;
    *(_OWORD *)(v57 + 328) = v58;
    *(_OWORD *)(v57 + 344) = v58;
    *(_QWORD *)(v57 + 360) = 0;
    *(_QWORD *)(v57 + 368) = 32;
    v61 = malloc_type_malloc(0xF10uLL, 0xB644C221uLL);
    *v61 = 0;
    v61[1] = 0;
    *(_QWORD *)(v57 + 352) = v61;
    *(_QWORD *)(v57 + 360) = v61;
    v62 = (uint64_t **)(v57 + 376);
    *(_QWORD *)(v57 + 384) = 0;
    *(_QWORD *)(v57 + 392) = 0;
    *(_QWORD *)(v57 + 376) = 0;
    *(_BYTE *)(v57 + 400) = 1;
    v63 = operator new();
    v467 = v40;
    v64 = 0uLL;
    *(_OWORD *)(v63 + 64) = 0u;
    *(_OWORD *)(v63 + 80) = 0u;
    *(_OWORD *)(v63 + 32) = 0u;
    *(_OWORD *)(v63 + 48) = 0u;
    *(_OWORD *)v63 = 0u;
    *(_OWORD *)(v63 + 16) = 0u;
    *(_BYTE *)(v63 + 48) = 1;
    *(_QWORD *)(v63 + 56) = 0;
    *(_QWORD *)(v63 + 64) = 0;
    *(_QWORD *)(v63 + 72) = 0;
    if ((v65 & 1) == 0)
    {
      v64 = 0uLL;
      if (v257)
      {
        v258 = operator new();
        *(_QWORD *)(v258 + 16) = 0x5ED09DD50000000FLL;
        *(_QWORD *)(v258 + 24) = "VectorKitLabels";
        *(_OWORD *)(v258 + 32) = xmmword_19FFB2E80;
        *(_QWORD *)v258 = &off_1E42B5668;
        *(_QWORD *)(v258 + 8) = "VectorKitLabels";
        *(_OWORD *)(v258 + 72) = 0u;
        *(_OWORD *)(v258 + 88) = 0u;
        *(_OWORD *)(v258 + 104) = 0u;
        *(_OWORD *)(v258 + 120) = 0u;
        *(_OWORD *)(v258 + 136) = 0u;
        *(_OWORD *)(v258 + 152) = 0u;
        *(_OWORD *)(v258 + 168) = 0u;
        *(_OWORD *)(v258 + 184) = 0u;
        *(_OWORD *)(v258 + 200) = 0u;
        *(_OWORD *)(v258 + 216) = 0u;
        *(_OWORD *)(v258 + 232) = 0u;
        *(_QWORD *)(v258 + 248) = 0;
        *(_OWORD *)(v258 + 56) = 0u;
        v259 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v258 + 56), 0);
        if ((_DWORD)v259)
          geo::read_write_lock::logFailure(v259, (uint64_t)"initialization", v260);
        v261 = malloc_create_zone(0, 0);
        *(_QWORD *)(v258 + 48) = v261;
        malloc_set_zone_name(v261, "VectorKitLabels");
        *(_QWORD *)(v258 + 256) = os_log_create("com.apple.VectorKit", "Memory");
        mdm::Allocator::instance(void)::alloc = v258;
        v64 = 0uLL;
      }
    }
    *(_QWORD *)(v63 + 80) = mdm::Allocator::instance(void)::alloc;
    v67 = *(uint64_t **)(v57 + 384);
    v66 = *(_QWORD *)(v57 + 392);
    if ((unint64_t)v67 < v66)
    {
      *v67 = v63;
      v68 = v67 + 1;
      goto LABEL_108;
    }
    v69 = *v62;
    v70 = (char *)v67 - (char *)*v62;
    v71 = v70 >> 3;
    v72 = (v70 >> 3) + 1;
    if (v72 >> 61)
      abort();
    v73 = v66 - (_QWORD)v69;
    if (v73 >> 2 > v72)
      v72 = v73 >> 2;
    if ((unint64_t)v73 >= 0x7FFFFFFFFFFFFFF8)
      v74 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v74 = v72;
    if (v74)
    {
      if (v74 >> 61)
LABEL_489:
        std::__throw_bad_array_new_length[abi:nn180100]();
      v75 = (char *)operator new(8 * v74);
      v64 = 0uLL;
    }
    else
    {
      v75 = 0;
    }
    v76 = (uint64_t *)&v75[8 * v71];
    v77 = &v75[8 * v74];
    *v76 = v63;
    v68 = v76 + 1;
    if (v67 == v69)
    {
      *(_QWORD *)(v57 + 376) = v76;
      *(_QWORD *)(v57 + 384) = v68;
      *(_QWORD *)(v57 + 392) = v77;
      v2 = v461;
    }
    else
    {
      v78 = (char *)v67 - (char *)v69 - 8;
      if (v78 <= 0x77
        || (uint64_t *)((char *)v67 - (v78 & 0xFFFFFFFFFFFFFFF8) - 8) < v76
        && &v75[v70 - (v78 & 0xFFFFFFFFFFFFFFF8) - 8] < (char *)v67)
      {
        goto LABEL_499;
      }
      v79 = (v78 >> 3) + 1;
      v80 = &v75[8 * v71 - 16];
      v81 = v67 - 4;
      v82 = v79 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v84 = *(_OWORD *)v81;
        v83 = *((_OWORD *)v81 + 1);
        *(_OWORD *)v81 = v64;
        *((_OWORD *)v81 + 1) = v64;
        v81 -= 4;
        *((_OWORD *)v80 - 1) = v84;
        *(_OWORD *)v80 = v83;
        v80 -= 32;
        v82 -= 4;
      }
      while (v82);
      v76 -= v79 & 0x3FFFFFFFFFFFFFFCLL;
      v67 -= v79 & 0x3FFFFFFFFFFFFFFCLL;
      if (v79 != (v79 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_499:
        do
        {
          v85 = *--v67;
          *v67 = 0;
          *--v76 = v85;
        }
        while (v67 != v69);
      }
      v67 = *(uint64_t **)(v57 + 376);
      v86 = *(uint64_t **)(v57 + 384);
      *(_QWORD *)(v57 + 376) = v76;
      *(_QWORD *)(v57 + 384) = v68;
      *(_QWORD *)(v57 + 392) = v77;
      if (v86 == v67)
      {
        v2 = v461;
        if (!v67)
        {
LABEL_108:
          *(_QWORD *)(v57 + 384) = v68;
          v36 = v467;
          v467[9] = v57;
          v99 = v467[7];
          v100 = *(_QWORD **)(v99 + 64);
          v100[1] = 0;
          v101 = v2[102];
          *v100 = v101;
          v102 = *(_QWORD **)(v99 + 160);
          v103 = (char *)v2[103];
          if (v103)
          {
            v104 = (unint64_t *)(v103 + 8);
            do
              v105 = __ldxr(v104);
            while (__stxr(v105 + 1, v104));
          }
          v106 = (std::__shared_weak_count *)v102[1];
          *v102 = v101;
          v102[1] = v103;
          if (v106)
          {
            v107 = (unint64_t *)&v106->__shared_owners_;
            do
              v108 = __ldaxr(v107);
            while (__stlxr(v108 - 1, v107));
            if (!v108)
            {
              ((void (*)(std::__shared_weak_count *))v106->__on_zero_shared)(v106);
              std::__shared_weak_count::__release_weak(v106);
            }
          }
          v109 = v467[7];
          v110 = *(_QWORD *)(v109 + 64);
          *(_QWORD *)(v110 + 24) = 0;
          v111 = v2[104];
          *(_QWORD *)(v110 + 16) = v111;
          v112 = *(_QWORD *)(v109 + 160);
          v113 = (char *)v2[105];
          if (v113)
          {
            v114 = (unint64_t *)(v113 + 8);
            do
              v115 = __ldxr(v114);
            while (__stxr(v115 + 1, v114));
          }
          v116 = *(std::__shared_weak_count **)(v112 + 24);
          *(_QWORD *)(v112 + 16) = v111;
          *(_QWORD *)(v112 + 24) = v113;
          if (v116)
          {
            v117 = (unint64_t *)&v116->__shared_owners_;
            do
              v118 = __ldaxr(v117);
            while (__stlxr(v118 - 1, v117));
            if (!v118)
            {
              ((void (*)(std::__shared_weak_count *))v116->__on_zero_shared)(v116);
              std::__shared_weak_count::__release_weak(v116);
            }
          }
          v119 = v467[7];
          v120 = (std::__shared_weak_count *)operator new(0xE8uLL);
          v120->__shared_owners_ = 0;
          v121 = (unint64_t *)&v120->__shared_owners_;
          v120->__shared_weak_owners_ = 0;
          v120->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E1248;
          v122 = ggl::BufferData::BufferData((uint64_t)&v120[1], qword_1EE567148, 2, 1, 6, 1);
          v120[9].__shared_owners_ = (uint64_t)ggl::OffsetRibbon::Style::reflection(void)::reflection;
          v120[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B8DF0;
          v123 = *(_QWORD *)(v119 + 64);
          *(_QWORD *)(v123 + 32) = v122;
          *(_QWORD *)(v123 + 40) = 0;
          v124 = *(_QWORD *)(v119 + 160);
          do
            v125 = __ldxr(v121);
          while (__stxr(v125 + 1, v121));
          v126 = *(std::__shared_weak_count **)(v124 + 40);
          *(_QWORD *)(v124 + 32) = v122;
          *(_QWORD *)(v124 + 40) = v120;
          if (v126)
          {
            v127 = (unint64_t *)&v126->__shared_owners_;
            do
              v128 = __ldaxr(v127);
            while (__stlxr(v128 - 1, v127));
            if (!v128)
            {
              ((void (*)(std::__shared_weak_count *))v126->__on_zero_shared)(v126);
              std::__shared_weak_count::__release_weak(v126);
            }
          }
          do
            v129 = __ldaxr(v121);
          while (__stlxr(v129 - 1, v121));
          if (!v129)
          {
            ((void (*)(std::__shared_weak_count *))v120->__on_zero_shared)(v120);
            std::__shared_weak_count::__release_weak(v120);
          }
          **(_QWORD **)(v467[7] + 96) = *(_QWORD *)(v478 + 16);
          v130 = v467[8];
          v131 = *(_QWORD **)(v130 + 64);
          v131[1] = 0;
          v132 = v2[102];
          *v131 = v132;
          v133 = *(_QWORD **)(v130 + 160);
          v134 = (char *)v2[103];
          if (v134)
          {
            v135 = (unint64_t *)(v134 + 8);
            do
              v136 = __ldxr(v135);
            while (__stxr(v136 + 1, v135));
          }
          v137 = (std::__shared_weak_count *)v133[1];
          *v133 = v132;
          v133[1] = v134;
          if (v137)
          {
            v138 = (unint64_t *)&v137->__shared_owners_;
            do
              v139 = __ldaxr(v138);
            while (__stlxr(v139 - 1, v138));
            if (!v139)
            {
              ((void (*)(std::__shared_weak_count *))v137->__on_zero_shared)(v137);
              std::__shared_weak_count::__release_weak(v137);
            }
          }
          v140 = v467[8];
          v141 = *(_QWORD *)(v140 + 64);
          *(_QWORD *)(v141 + 24) = 0;
          v142 = v2[104];
          *(_QWORD *)(v141 + 16) = v142;
          v143 = *(_QWORD *)(v140 + 160);
          v144 = (char *)v2[105];
          if (v144)
          {
            v145 = (unint64_t *)(v144 + 8);
            do
              v146 = __ldxr(v145);
            while (__stxr(v146 + 1, v145));
          }
          v147 = *(std::__shared_weak_count **)(v143 + 24);
          *(_QWORD *)(v143 + 16) = v142;
          *(_QWORD *)(v143 + 24) = v144;
          if (v147)
          {
            v148 = (unint64_t *)&v147->__shared_owners_;
            do
              v149 = __ldaxr(v148);
            while (__stlxr(v149 - 1, v148));
            if (!v149)
            {
              ((void (*)(std::__shared_weak_count *))v147->__on_zero_shared)(v147);
              std::__shared_weak_count::__release_weak(v147);
            }
          }
          v150 = v467[8];
          v151 = (std::__shared_weak_count *)operator new(0xE8uLL);
          v151->__shared_owners_ = 0;
          v152 = (unint64_t *)&v151->__shared_owners_;
          v151->__shared_weak_owners_ = 0;
          v151->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E1248;
          v153 = ggl::BufferData::BufferData((uint64_t)&v151[1], qword_1EE567148, 2, 1, 6, 1);
          v151[9].__shared_owners_ = (uint64_t)ggl::OffsetRibbon::Style::reflection(void)::reflection;
          v151[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B8DF0;
          v154 = *(_QWORD *)(v150 + 64);
          *(_QWORD *)(v154 + 32) = v153;
          *(_QWORD *)(v154 + 40) = 0;
          v155 = *(_QWORD *)(v150 + 160);
          do
            v156 = __ldxr(v152);
          while (__stxr(v156 + 1, v152));
          v157 = *(std::__shared_weak_count **)(v155 + 40);
          *(_QWORD *)(v155 + 32) = v153;
          *(_QWORD *)(v155 + 40) = v151;
          if (v157)
          {
            v158 = (unint64_t *)&v157->__shared_owners_;
            do
              v159 = __ldaxr(v158);
            while (__stlxr(v159 - 1, v158));
            if (!v159)
            {
              ((void (*)(std::__shared_weak_count *))v157->__on_zero_shared)(v157);
              std::__shared_weak_count::__release_weak(v157);
            }
          }
          do
            v160 = __ldaxr(v152);
          while (__stlxr(v160 - 1, v152));
          if (!v160)
          {
            ((void (*)(std::__shared_weak_count *))v151->__on_zero_shared)(v151);
            std::__shared_weak_count::__release_weak(v151);
          }
          **(_QWORD **)(v467[8] + 96) = *(_QWORD *)(v478 + 16);
          v161 = (_QWORD *)v467[9];
          v161[6] = v467[7];
          v161[8] = 1;
          v161[22] = v467[8];
          v161[24] = 2;
          if ((v161 & 1) == 0
          {
            v262 = operator new();
            *(_QWORD *)(v262 + 16) = 0x5ED09DD50000000FLL;
            *(_QWORD *)(v262 + 24) = "VectorKitLabels";
            *(_OWORD *)(v262 + 32) = xmmword_19FFB2E80;
            *(_QWORD *)v262 = &off_1E42B5668;
            *(_QWORD *)(v262 + 8) = "VectorKitLabels";
            *(_OWORD *)(v262 + 72) = 0u;
            *(_OWORD *)(v262 + 88) = 0u;
            *(_OWORD *)(v262 + 104) = 0u;
            *(_OWORD *)(v262 + 120) = 0u;
            *(_OWORD *)(v262 + 136) = 0u;
            *(_OWORD *)(v262 + 152) = 0u;
            *(_OWORD *)(v262 + 168) = 0u;
            *(_OWORD *)(v262 + 184) = 0u;
            *(_OWORD *)(v262 + 200) = 0u;
            *(_OWORD *)(v262 + 216) = 0u;
            *(_OWORD *)(v262 + 232) = 0u;
            *(_QWORD *)(v262 + 248) = 0;
            *(_OWORD *)(v262 + 56) = 0u;
            v263 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v262 + 56), 0);
            if ((_DWORD)v263)
              geo::read_write_lock::logFailure(v263, (uint64_t)"initialization", v264);
            v265 = malloc_create_zone(0, 0);
            *(_QWORD *)(v262 + 48) = v265;
            malloc_set_zone_name(v265, "VectorKitLabels");
            *(_QWORD *)(v262 + 256) = os_log_create("com.apple.VectorKit", "Memory");
            mdm::Allocator::instance(void)::alloc = v262;
          }
          v162 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc
                                                                      + 16))(mdm::Allocator::instance(void)::alloc, 104, 8);
          *(_OWORD *)(v162 + 49) = 0u;
          *(_OWORD *)(v162 + 40) = 0u;
          *(_OWORD *)(v162 + 24) = 0u;
          *(_OWORD *)(v162 + 8) = 0u;
          *(_QWORD *)(v162 + 56) = v481;
          *(_QWORD *)v162 = off_1E42AF568;
          *(_QWORD *)(v162 + 72) = 0;
          *(_QWORD *)(v162 + 80) = 0;
          *(_QWORD *)(v162 + 88) = v481;
          {
            v266 = operator new();
            *(_QWORD *)(v266 + 16) = 0x5ED09DD50000000FLL;
            *(_QWORD *)(v266 + 24) = "VectorKitLabels";
            *(_OWORD *)(v266 + 32) = xmmword_19FFB2E80;
            *(_QWORD *)v266 = &off_1E42B5668;
            *(_QWORD *)(v266 + 8) = "VectorKitLabels";
            *(_OWORD *)(v266 + 72) = 0u;
            *(_OWORD *)(v266 + 88) = 0u;
            *(_OWORD *)(v266 + 104) = 0u;
            *(_OWORD *)(v266 + 120) = 0u;
            *(_OWORD *)(v266 + 136) = 0u;
            *(_OWORD *)(v266 + 152) = 0u;
            *(_OWORD *)(v266 + 168) = 0u;
            *(_OWORD *)(v266 + 184) = 0u;
            *(_OWORD *)(v266 + 200) = 0u;
            *(_OWORD *)(v266 + 216) = 0u;
            *(_OWORD *)(v266 + 232) = 0u;
            *(_QWORD *)(v266 + 248) = 0;
            *(_OWORD *)(v266 + 56) = 0u;
            v267 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v266 + 56), 0);
            if ((_DWORD)v267)
              geo::read_write_lock::logFailure(v267, (uint64_t)"initialization", v268);
            v269 = malloc_create_zone(0, 0);
            *(_QWORD *)(v266 + 48) = v269;
            malloc_set_zone_name(v269, "VectorKitLabels");
            *(_QWORD *)(v266 + 256) = os_log_create("com.apple.VectorKit", "Memory");
            mdm::Allocator::instance(void)::alloc = v266;
          }
          v164 = 8 * v481;
          v165 = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc
                                                                               + 16))(mdm::Allocator::instance(void)::alloc, 8 * v481, 8);
          *(_QWORD *)(v162 + 72) = v165;
          *(_BYTE *)(v162 + 64) = 1;
          *(_WORD *)(v162 + 96) = 0;
          *(_QWORD *)v162 = off_1E42A8180;
          v485[0] = v162;
          if (v481 > 0x13)
          {
            v166 = 0;
            v183 = 8 * (v481 - 1);
            v167 = v475;
            if (v165 + v183 >= v165 && v165 + 4 + v183 >= v165 + 4 && !((v481 - 1) >> 61))
            {
              if (v165 >= v475 + v164 || v165 + v164 <= v475)
              {
                v166 = v481 & 0xFFFFFFFFFFFFFFF8;
                v232 = (_OWORD *)(v165 + 32);
                v233 = (__int128 *)(v475 + 32);
                v234 = v481 & 0xFFFFFFFFFFFFFFF8;
                do
                {
                  v236 = *(v233 - 2);
                  v235 = *(v233 - 1);
                  v238 = *v233;
                  v237 = v233[1];
                  v233 += 4;
                  *(v232 - 2) = v236;
                  *(v232 - 1) = v235;
                  *v232 = v238;
                  v232[1] = v237;
                  v232 += 4;
                  v234 -= 8;
                }
                while (v234);
                if (v166 == v481)
                {
LABEL_166:
                  v173 = (uint64_t)v2[92];
                  md::createFeatureAttributeSet((gss::Allocator *)&v488, v471);
                  *(std::vector<unsigned int>::pointer *)((char *)&v487.__begin_ + 7) = 0;
                  v487.__begin_ = 0;
                  HIBYTE(v487.__end_) = 1;
                  gss::StylesheetManager<gss::PropertyID>::styleQueryForFeatureAttributes((unint64_t *)&v486, v173, (gss::FeatureAttributeSet *)&v488, (gss::QueryOverrides *)&v487);
                  if (!BYTE6(v487.__end_) && v487.__begin_)
                  {
                    v175 = gss::Allocator::instance(v174);
                    (*(void (**)(uint64_t, std::vector<unsigned int>::pointer, _QWORD))(*(_QWORD *)v175 + 40))(v175, v487.__begin_, WORD2(v487.__end_));
                  }
                  v176 = v486;
                  v486 = 0uLL;
                  v177 = (std::__shared_weak_count *)v467[4];
                  *(_OWORD *)(v467 + 3) = v176;
                  v34 = v482;
                  if (!v177)
                    goto LABEL_173;
                  v178 = (unint64_t *)&v177->__shared_owners_;
                  do
                    v179 = __ldaxr(v178);
                  while (__stlxr(v179 - 1, v178));
                  if (!v179)
                  {
                    ((void (*)(std::__shared_weak_count *))v177->__on_zero_shared)(v177);
                    std::__shared_weak_count::__release_weak(v177);
                    v180 = (std::__shared_weak_count *)*((_QWORD *)&v486 + 1);
                    if (!*((_QWORD *)&v486 + 1))
                      goto LABEL_185;
                  }
                  else
                  {
LABEL_173:
                    v180 = (std::__shared_weak_count *)*((_QWORD *)&v486 + 1);
                    if (!*((_QWORD *)&v486 + 1))
                      goto LABEL_185;
                  }
                  v181 = (unint64_t *)&v180->__shared_owners_;
                  do
                    v182 = __ldaxr(v181);
                  while (__stlxr(v182 - 1, v181));
                  if (!v182)
                  {
                    ((void (*)(std::__shared_weak_count *))v180->__on_zero_shared)(v180);
                    std::__shared_weak_count::__release_weak(v180);
                  }
LABEL_185:
                  if (v488)
                  {
                    v489 = v488;
                    (*((void (**)(void **, uint64_t (**)(), uint64_t))*v491 + 5))(v491, v488, v490 - (_QWORD)v488);
                  }
                  v184 = (uint64_t (**)())v467[3];
                  v185 = (std::__shared_weak_count *)v467[4];
                  if (v185)
                  {
                    v186 = (unint64_t *)&v185->__shared_owners_;
                    do
                      v187 = __ldxr(v186);
                    while (__stxr(v187 + 1, v186));
                    v489 = (uint64_t (**)())v185;
                    do
                      v188 = __ldxr(v186);
                    while (__stxr(v188 + 1, v186));
                  }
                  else
                  {
                    v489 = 0;
                  }
                  v488 = v184;
                  v490 = 0;
                  v491 = 0;
                  v492 = 0;
                  if (v184)
                    LODWORD(v184) = (*((uint64_t (**)(uint64_t (**)(), uint64_t *))*v184 + 6))(v184, &v490);
                  v492 = v184;
                  if (v185)
                  {
                    v189 = (unint64_t *)&v185->__shared_owners_;
                    do
                      v190 = __ldaxr(v189);
                    while (__stlxr(v190 - 1, v189));
                    if (!v190)
                    {
                      ((void (*)(std::__shared_weak_count *))v185->__on_zero_shared)(v185);
                      std::__shared_weak_count::__release_weak(v185);
                    }
                    LODWORD(v184) = v492;
                  }
                  if ((_DWORD)v184)
                  {
                    v191 = (unint64_t)v488[3];
                    v192 = *(float **)v191;
                    if (*(_QWORD *)v191
                      && (v193 = *v192, LODWORD(v192) = *v192 == 1.0, *(_BYTE *)(v191 + 10))
                      && (v193 != 0.0 ? (v194 = v193 == 1.0) : (v194 = 1), !v194)
                      || (v195 = *(unsigned __int8 *)(v191 + v192 + 11), v193 = 0.0, v195 == 2))
                    {
                      LOBYTE(v487.__begin_) = 1;
                      LOBYTE(v486) = 1;
                      v196 = gss::RenderStyle<gss::PropertyID>::styleValueForKey<BOOL>(v191, 0xFCu, 0, &v487);
                      v197 = gss::RenderStyle<gss::PropertyID>::styleValueForKey<BOOL>(v191, 0xFCu, 1u, &v486);
                      if (v193 >= 1.0)
                        v198 = (char *)v197;
                      else
                        v198 = (char *)v196;
                      v199 = *v198;
                    }
                    else
                    {
                      v199 = *(_BYTE *)gss::RenderStyle<gss::PropertyID>::styleValueForKey<BOOL>((unint64_t)v488[3], 0xFCu, v195, 0);
                    }
                    v34 = v482;
                    v200 = v199 != 0;
                  }
                  else
                  {
                    v200 = 0;
                  }
                  gss::QueryableLocker<gss::PropertyID>::~QueryableLocker((uint64_t)&v488);
                  v201 = (uint64_t (**)())v485[0];
                  *(_BYTE *)(v485[0] + 96) = v200;
                  *((_BYTE *)v201 + 97) = v200;
                  v202 = **(_QWORD **)(v467[9] + 376);
                  v485[0] = 0;
                  v488 = v201;
                  v203 = *(uint64_t (****)())(v202 + 64);
                  v204 = *(_QWORD *)(v202 + 72);
                  if ((unint64_t)v203 < v204)
                  {
                    if (v203)
                    {
                      *v203 = v201;
                      v201 = 0;
                    }
                    v205 = v203 + 1;
                    goto LABEL_267;
                  }
                  v206 = *(_QWORD *)(v202 + 56);
                  v207 = ((uint64_t)v203 - v206) >> 3;
                  v208 = v207 + 1;
                  v209 = 0uLL;
                  if ((unint64_t)(v207 + 1) >> 61)
                    abort();
                  v210 = v204 - v206;
                  if (v210 >> 2 > v208)
                    v208 = v210 >> 2;
                  if ((unint64_t)v210 >= 0x7FFFFFFFFFFFFFF8)
                    v211 = 0x1FFFFFFFFFFFFFFFLL;
                  else
                    v211 = v208;
                  if (v211)
                  {
                    v212 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v202 + 80) + 16))(*(_QWORD *)(v202 + 80), 8 * v211, 8);
                    v213 = (uint64_t (***)())(v212 + 8 * v207);
                    v214 = v212 + 8 * v211;
                    v209 = 0uLL;
                    if (v212)
                    {
                      v488 = 0;
                      *v213 = v201;
                    }
                  }
                  else
                  {
                    v214 = 0;
                    v213 = (uint64_t (***)())(8 * v207);
                  }
                  v205 = v213 + 1;
                  v215 = *(char **)(v202 + 56);
                  v216 = *(char **)(v202 + 64);
                  if (v216 == v215)
                  {
                    *(_QWORD *)(v202 + 56) = v213;
                    *(_QWORD *)(v202 + 64) = v205;
                    v231 = *(_QWORD *)(v202 + 72);
                    *(_QWORD *)(v202 + 72) = v214;
                    if (!v216)
                      goto LABEL_266;
                    goto LABEL_265;
                  }
                  v217 = v216 - v215 - 8;
                  if (v217 > 0x57
                    && ((v218 = (v215 - v216 + 7) & 0xFFFFFFFFFFFFFFF8,
                         v219 = (unint64_t)&v216[v218],
                         v220 = (char *)v213 + v218,
                         v219 < (unint64_t)v213)
                      ? (v221 = v220 >= v216)
                      : (v221 = 1),
                        v221))
                  {
                    v222 = (v217 >> 3) + 1;
                    v223 = &v216[-8 * (v222 & 0x3FFFFFFFFFFFFFFCLL)];
                    v224 = v213 - 2;
                    v225 = v216 - 32;
                    v226 = v222 & 0x3FFFFFFFFFFFFFFCLL;
                    do
                    {
                      v228 = *(_OWORD *)v225;
                      v227 = *((_OWORD *)v225 + 1);
                      *(_OWORD *)v225 = v209;
                      *((_OWORD *)v225 + 1) = v209;
                      v225 -= 32;
                      *((_OWORD *)v224 - 1) = v228;
                      *(_OWORD *)v224 = v227;
                      v224 -= 4;
                      v226 -= 4;
                    }
                    while (v226);
                    v213 -= v222 & 0x3FFFFFFFFFFFFFFCLL;
                    if (v222 == (v222 & 0x3FFFFFFFFFFFFFFCLL))
                    {
LABEL_245:
                      v216 = *(char **)(v202 + 56);
                      v230 = *(char **)(v202 + 64);
                      *(_QWORD *)(v202 + 56) = v213;
                      *(_QWORD *)(v202 + 64) = v205;
                      v231 = *(_QWORD *)(v202 + 72);
                      *(_QWORD *)(v202 + 72) = v214;
                      if (v230 == v216)
                      {
                        if (!v216)
                          goto LABEL_266;
                      }
                      else
                      {
                        do
                        {
                          v241 = (void (***)(_QWORD))*((_QWORD *)v230 - 1);
                          v230 -= 8;
                          v240 = v241;
                          *(_QWORD *)v230 = 0;
                          if (v241)
                          {
                            (**v240)(v240);
                            if ((v242 & 1) == 0
                            {
                              v243 = operator new();
                              *(_QWORD *)(v243 + 16) = 0x5ED09DD50000000FLL;
                              *(_QWORD *)(v243 + 24) = "VectorKitLabels";
                              *(_OWORD *)(v243 + 32) = xmmword_19FFB2E80;
                              *(_QWORD *)v243 = &off_1E42B5668;
                              *(_QWORD *)(v243 + 8) = "VectorKitLabels";
                              *(_OWORD *)(v243 + 72) = 0u;
                              *(_OWORD *)(v243 + 88) = 0u;
                              *(_OWORD *)(v243 + 104) = 0u;
                              *(_OWORD *)(v243 + 120) = 0u;
                              *(_OWORD *)(v243 + 136) = 0u;
                              *(_OWORD *)(v243 + 152) = 0u;
                              *(_OWORD *)(v243 + 168) = 0u;
                              *(_OWORD *)(v243 + 184) = 0u;
                              *(_OWORD *)(v243 + 200) = 0u;
                              *(_OWORD *)(v243 + 216) = 0u;
                              *(_OWORD *)(v243 + 232) = 0u;
                              *(_QWORD *)(v243 + 248) = 0;
                              *(_OWORD *)(v243 + 56) = 0u;
                              v244 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v243 + 56), 0);
                              if ((_DWORD)v244)
                                geo::read_write_lock::logFailure(v244, (uint64_t)"initialization", v245);
                              v239 = malloc_create_zone(0, 0);
                              *(_QWORD *)(v243 + 48) = v239;
                              malloc_set_zone_name(v239, "VectorKitLabels");
                              *(_QWORD *)(v243 + 256) = os_log_create("com.apple.VectorKit", "Memory");
                              mdm::Allocator::instance(void)::alloc = v243;
                            }
                            (*(void (**)(uint64_t, void (***)(_QWORD), uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc + 40))(mdm::Allocator::instance(void)::alloc, v240, 104);
                          }
                        }
                        while (v230 != v216);
                        v34 = v482;
                        if (!v216)
                          goto LABEL_266;
                      }
LABEL_265:
                      (*(void (**)(_QWORD, char *, uint64_t))(**(_QWORD **)(v202 + 80) + 40))(*(_QWORD *)(v202 + 80), v216, v231 - (_QWORD)v216);
LABEL_266:
                      v201 = v488;
LABEL_267:
                      *(_QWORD *)(v202 + 64) = v205;
                      v488 = 0;
                      v32 = v469;
                      if (v201)
                      {
                        (*(void (**)(uint64_t (**)()))*v201)(v201);
                        if ((v246 & 1) == 0
                        {
                          v270 = operator new();
                          *(_QWORD *)(v270 + 16) = 0x5ED09DD50000000FLL;
                          *(_QWORD *)(v270 + 24) = "VectorKitLabels";
                          *(_OWORD *)(v270 + 32) = xmmword_19FFB2E80;
                          *(_QWORD *)v270 = &off_1E42B5668;
                          *(_QWORD *)(v270 + 8) = "VectorKitLabels";
                          *(_OWORD *)(v270 + 72) = 0u;
                          *(_OWORD *)(v270 + 88) = 0u;
                          *(_OWORD *)(v270 + 104) = 0u;
                          *(_OWORD *)(v270 + 120) = 0u;
                          *(_OWORD *)(v270 + 136) = 0u;
                          *(_OWORD *)(v270 + 152) = 0u;
                          *(_OWORD *)(v270 + 168) = 0u;
                          *(_OWORD *)(v270 + 184) = 0u;
                          *(_OWORD *)(v270 + 200) = 0u;
                          *(_OWORD *)(v270 + 216) = 0u;
                          *(_OWORD *)(v270 + 232) = 0u;
                          *(_QWORD *)(v270 + 248) = 0;
                          *(_OWORD *)(v270 + 56) = 0u;
                          v271 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v270 + 56), 0);
                          if ((_DWORD)v271)
                            geo::read_write_lock::logFailure(v271, (uint64_t)"initialization", v272);
                          v273 = malloc_create_zone(0, 0);
                          *(_QWORD *)(v270 + 48) = v273;
                          malloc_set_zone_name(v273, "VectorKitLabels");
                          *(_QWORD *)(v270 + 256) = os_log_create("com.apple.VectorKit", "Memory");
                          mdm::Allocator::instance(void)::alloc = v270;
                          v36 = v467;
                          v32 = v469;
                          v2 = v461;
                          v34 = v482;
                        }
                        (*(void (**)(uint64_t, uint64_t (**)(), uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc
                                                                                            + 40))(mdm::Allocator::instance(void)::alloc, v201, 104);
                        v247 = v485[0];
                        if (v485[0])
                        {
                          (**(void (***)(uint64_t))v485[0])(v485[0]);
                          if ((v248 & 1) == 0
                          {
                            v249 = operator new();
                            *(_QWORD *)(v249 + 16) = 0x5ED09DD50000000FLL;
                            *(_QWORD *)(v249 + 24) = "VectorKitLabels";
                            *(_OWORD *)(v249 + 32) = xmmword_19FFB2E80;
                            *(_QWORD *)v249 = &off_1E42B5668;
                            *(_QWORD *)(v249 + 8) = "VectorKitLabels";
                            *(_OWORD *)(v249 + 72) = 0u;
                            *(_OWORD *)(v249 + 88) = 0u;
                            *(_OWORD *)(v249 + 104) = 0u;
                            *(_OWORD *)(v249 + 120) = 0u;
                            *(_OWORD *)(v249 + 136) = 0u;
                            *(_OWORD *)(v249 + 152) = 0u;
                            *(_OWORD *)(v249 + 168) = 0u;
                            *(_OWORD *)(v249 + 184) = 0u;
                            *(_OWORD *)(v249 + 200) = 0u;
                            *(_OWORD *)(v249 + 216) = 0u;
                            *(_OWORD *)(v249 + 232) = 0u;
                            *(_QWORD *)(v249 + 248) = 0;
                            *(_OWORD *)(v249 + 56) = 0u;
                            v250 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v249 + 56), 0);
                            if ((_DWORD)v250)
                              geo::read_write_lock::logFailure(v250, (uint64_t)"initialization", v251);
                            v35 = malloc_create_zone(0, 0);
                            *(_QWORD *)(v249 + 48) = v35;
                            malloc_set_zone_name(v35, "VectorKitLabels");
                            *(_QWORD *)(v249 + 256) = os_log_create("com.apple.VectorKit", "Memory");
                            mdm::Allocator::instance(void)::alloc = v249;
                            v36 = v467;
                            v32 = v469;
                            v2 = v461;
                            v34 = v482;
                          }
                          (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc
                                                                            + 40))(mdm::Allocator::instance(void)::alloc, v247, 104);
                        }
                      }
                      v37 = v2[114];
                      *v36 = v37;
                      v36[1] = v462;
                      v37[1] = v36;
                      v2[114] = v36;
                      v2[116] = (char *)v2[116] + 1;
                      v33 = v465;
                      goto LABEL_46;
                    }
                  }
                  else
                  {
                    v223 = *(char **)(v202 + 64);
                  }
                  do
                  {
                    v229 = (uint64_t (**)())*((_QWORD *)v223 - 1);
                    v223 -= 8;
                    *(_QWORD *)v223 = 0;
                    *--v213 = v229;
                  }
                  while (v223 != v215);
                  goto LABEL_245;
                }
              }
              else
              {
                v166 = 0;
              }
            }
          }
          else
          {
            v166 = 0;
            v167 = v475;
          }
          v168 = v481 - v166;
          v169 = 8 * v166;
          v170 = (_DWORD *)(v165 + 8 * v166 + 4);
          v171 = (int *)(v167 + v169 + 4);
          do
          {
            *(v170 - 1) = *(v171 - 1);
            v172 = *v171;
            v171 += 2;
            *v170 = v172;
            v170 += 2;
            --v168;
          }
          while (v168);
          goto LABEL_166;
        }
LABEL_107:
        operator delete(v67);
        goto LABEL_108;
      }
      v2 = v461;
      do
      {
        v89 = *--v86;
        v88 = v89;
        *v86 = 0;
        if (v89)
        {
          v90 = *(_QWORD **)(v88 + 56);
          if (v90)
          {
            v91 = *(_QWORD **)(v88 + 64);
            v87 = *(_QWORD *)(v88 + 56);
            if (v91 != v90)
            {
              do
              {
                v94 = (void (***)(_QWORD, uint64_t))*--v91;
                v93 = v94;
                *v91 = 0;
                if (v94)
                {
                  (**v93)(v93, v87);
                  {
                    v96 = operator new();
                    *(_QWORD *)(v96 + 16) = 0x5ED09DD50000000FLL;
                    *(_QWORD *)(v96 + 24) = "VectorKitLabels";
                    *(_OWORD *)(v96 + 32) = xmmword_19FFB2E80;
                    *(_QWORD *)v96 = &off_1E42B5668;
                    *(_QWORD *)(v96 + 8) = "VectorKitLabels";
                    *(_OWORD *)(v96 + 72) = 0u;
                    *(_OWORD *)(v96 + 88) = 0u;
                    *(_OWORD *)(v96 + 104) = 0u;
                    *(_OWORD *)(v96 + 120) = 0u;
                    *(_OWORD *)(v96 + 136) = 0u;
                    *(_OWORD *)(v96 + 152) = 0u;
                    *(_OWORD *)(v96 + 168) = 0u;
                    *(_OWORD *)(v96 + 184) = 0u;
                    *(_OWORD *)(v96 + 200) = 0u;
                    *(_OWORD *)(v96 + 216) = 0u;
                    *(_OWORD *)(v96 + 232) = 0u;
                    *(_QWORD *)(v96 + 248) = 0;
                    v459 = v96;
                    *(_OWORD *)(v96 + 56) = 0u;
                    v97 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v96 + 56), 0);
                    if ((_DWORD)v97)
                      geo::read_write_lock::logFailure(v97, (uint64_t)"initialization", v98);
                    v92 = malloc_create_zone(0, 0);
                    *(_QWORD *)(v459 + 48) = v92;
                    malloc_set_zone_name(v92, "VectorKitLabels");
                    *(_QWORD *)(v459 + 256) = os_log_create("com.apple.VectorKit", "Memory");
                    mdm::Allocator::instance(void)::alloc = v459;
                  }
                  (*(void (**)(uint64_t, void (***)(_QWORD, uint64_t), uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc + 40))(mdm::Allocator::instance(void)::alloc, v93, 104);
                }
              }
              while (v91 != v90);
              v87 = *(_QWORD *)(v88 + 56);
            }
            *(_QWORD *)(v88 + 64) = v90;
            (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v88 + 80) + 40))(*(_QWORD *)(v88 + 80), v87, *(_QWORD *)(v88 + 72) - v87);
          }
          MEMORY[0x1A1AF4E00](v88, 0x1020C4097AEC518);
        }
      }
      while (v86 != v67);
    }
    if (!v67)
      goto LABEL_108;
    goto LABEL_107;
  }
LABEL_6:
  v6 = v2 + 114;
  v7 = (id *)v2[115];
  if (v7 != v2 + 114)
  {
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v12 = v7[9];
      if (v10 >= v8)
        break;
      *(_QWORD *)v10 = v12;
      v11 = v10 + 8;
LABEL_9:
      v7 = (id *)v7[1];
      v10 = v11;
      if (v7 == v6)
        goto LABEL_295;
    }
    v13 = v9;
    v14 = v10 - v9;
    v15 = v14 >> 3;
    v16 = (v14 >> 3) + 1;
    if (v16 >> 61)
      abort();
    v17 = v13;
    v18 = v8 - v13;
    v19 = (v8 - v13) >> 2;
    if (v19 > v16)
      v16 = v19;
    if (v18 >= 0x7FFFFFFFFFFFFFF8)
      v20 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v20 = v16;
    if (v20)
    {
      if (v20 >> 61)
        goto LABEL_489;
      v21 = operator new(8 * v20);
    }
    else
    {
      v21 = 0;
    }
    v22 = &v21[8 * v15];
    *(_QWORD *)v22 = v12;
    v11 = v22 + 8;
    if (v10 == v17)
    {
      v8 = &v21[8 * v20];
      if (!v17)
        goto LABEL_27;
      goto LABEL_26;
    }
    v23 = v10 - 8 - v17;
    if (v23 >= 0x168)
    {
      if (&v21[v14 - 8 - (v23 & 0xFFFFFFFFFFFFFFF8)] > &v21[v14 - 8])
      {
        v24 = v10;
      }
      else if (&v10[-(v23 & 0xFFFFFFFFFFFFFFF8) - 8] > v10 - 8)
      {
        v24 = v10;
      }
      else if ((unint64_t)(v10 - &v21[v14]) >= 0x20)
      {
        v26 = (v23 >> 3) + 1;
        v24 = &v10[-8 * (v26 & 0x3FFFFFFFFFFFFFFCLL)];
        v27 = &v21[8 * v15 - 16];
        v28 = v10 - 16;
        v29 = v26 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v30 = *(_OWORD *)v28;
          *(v27 - 1) = *((_OWORD *)v28 - 1);
          *v27 = v30;
          v27 -= 2;
          v28 -= 32;
          v29 -= 4;
        }
        while (v29);
        v22 -= 8 * (v26 & 0x3FFFFFFFFFFFFFFCLL);
        if (v26 == (v26 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_25:
          v8 = &v21[8 * v20];
          if (!v17)
          {
LABEL_27:
            v9 = v22;
            goto LABEL_9;
          }
LABEL_26:
          operator delete(v17);
          goto LABEL_27;
        }
      }
      else
      {
        v24 = v10;
      }
    }
    else
    {
      v24 = v10;
    }
    do
    {
      v25 = *((_QWORD *)v24 - 1);
      v24 -= 8;
      *((_QWORD *)v22 - 1) = v25;
      v22 -= 8;
    }
    while (v24 != v17);
    goto LABEL_25;
  }
  v11 = 0;
  v9 = 0;
LABEL_295:
  v274 = operator new();
  v275 = (_QWORD *)v274;
  *(_QWORD *)v274 = &off_1E42AF528;
  *(_QWORD *)(v274 + 8) = 0;
  *(_QWORD *)(v274 + 16) = 0;
  *(_QWORD *)(v274 + 24) = 0;
  v276 = v11 - v9;
  v468 = v9;
  v463 = (_QWORD *)v274;
  if (!v276)
  {
    v281 = 0;
    v350 = 0;
    *(_OWORD *)(v274 + 32) = 0u;
    *(_QWORD *)(v274 + 80) = 0;
    *(_BYTE *)(v274 + 88) = 0;
    *(_BYTE *)(v274 + 112) = 0;
    *(_OWORD *)(v274 + 48) = 0u;
    v456 = (void **)(v274 + 32);
    *(_OWORD *)(v274 + 57) = 0u;
    goto LABEL_403;
  }
  if (v276 < 0)
    abort();
  v277 = operator new(v276);
  v275[1] = v277;
  v275[2] = v277;
  v278 = v276 >> 3;
  v279 = (char *)&v277[v278];
  v275[3] = &v277[v278];
  v280 = v277;
  memcpy(v277, v9, v276);
  v275[2] = v279;
  *((_OWORD *)v275 + 2) = 0u;
  v275[10] = 0;
  v460 = (gdc::GlobeTileGrid **)(v275 + 10);
  *((_BYTE *)v275 + 88) = 0;
  *((_BYTE *)v275 + 112) = 0;
  *((_OWORD *)v275 + 3) = 0u;
  v454 = v279;
  v456 = (void **)(v275 + 4);
  *(_OWORD *)((char *)v275 + 57) = 0u;
  if (!(v278 * 8))
  {
    v281 = 0;
    v350 = 0;
    goto LABEL_403;
  }
  v451 = (const QuadTile *)(v275 + 11);
  v281 = 0;
  v472 = 0;
  v466 = 0;
  while (2)
  {
    v458 = v280;
    v282 = (_QWORD *)*v280;
    v282[1] = v275;
    v284 = (_QWORD **)v282[47];
    v283 = (_QWORD **)v282[48];
    v464 = v283;
    while (v284 != v283)
    {
      v470 = v284;
      v286 = *v284;
      v286[1] = **v284;
      v286[3] = v286[2];
      v286[5] = v286[4];
      v488 = 0;
      v489 = 0;
      v490 = 0;
      memset(&v487, 0, sizeof(v487));
      v288 = (uint64_t *)v286[7];
      v287 = (uint64_t *)v286[8];
      if (v288 != v287)
      {
        v474 = (uint64_t *)v286[8];
        v476 = v286;
        v479 = v281;
        do
        {
          v296 = *v288;
          *(_QWORD *)&v486 = 1;
          md::Ribbons::RibbonWriter<md::Ribbons::SolidTrafficRibbonDescriptor>::eliminateDuplicates(v296, &v488, &v487, (uint64_t *)&v486);
          v297 = v486;
          v298 = v486 - 2;
          if ((unint64_t)v486 >= 2)
          {
            v299 = v488;
            v300 = (float *)(v488 + 1);
            v301 = *(float *)v488;
            v302 = 1;
            while (1)
            {
              if (vabds_f32(*v300, v301) >= 1.0e-10)
              {
                v307 = v300[1] - *((float *)v488 + 1);
                goto LABEL_320;
              }
              v303 = *((float *)v488 + 1);
              v304 = v300[1];
              if (vabds_f32(v304, v303) >= 1.0e-10)
                break;
              ++v302;
              v300 += 2;
              if ((_QWORD)v486 == v302)
              {
                v305 = 0.0;
                v306 = 1.0;
                goto LABEL_321;
              }
            }
            v307 = v304 - v303;
LABEL_320:
            v308 = *v300 - v301;
            v309 = 1.0 / sqrtf((float)(v308 * v308) + (float)(v307 * v307));
            v306 = v309 * v308;
            v305 = v309 * v307;
LABEL_321:
            v310 = v486 - 1;
            if ((unint64_t)(v486 - 1) >= 2)
            {
              v311 = (float *)(v488 + 2);
              v312 = 1;
              v313 = 2;
              while (1)
              {
                v318 = v306;
                v319 = v305;
                v320 = v312 + 1;
                if (v312 + 1 < v297)
                {
                  v321 = (float *)&v299[v312];
                  v322 = *v321;
                  v323 = v321[1];
                  v324 = v311;
                  v325 = v298;
                  while (vabds_f32(*v324, v322) < 1.0e-10)
                  {
                    v326 = v324[1];
                    if (vabds_f32(v326, v323) >= 1.0e-10)
                      goto LABEL_335;
                    v324 += 2;
                    if (!--v325)
                      goto LABEL_336;
                  }
                  v326 = v324[1];
LABEL_335:
                  v327 = v326 - v323;
                  v328 = *v324 - v322;
                  v329 = 1.0 / sqrtf((float)(v328 * v328) + (float)(v327 * v327));
                  v306 = v329 * v328;
                  v305 = v329 * v327;
                }
LABEL_336:
                v330 = atan2f(v305, v306);
                v315 = v330 - atan2f(v319, v318);
                v331 = v315;
                if (v315 > 3.14159265)
                {
                  v314 = -6.28318531;
                }
                else
                {
                  if (v331 >= -3.14159265)
                    goto LABEL_325;
                  v314 = 6.28318531;
                }
                v315 = v331 + v314;
LABEL_325:
                v316 = fmaxf(ceilf(fabsf(v315) * 1.2732), 1.0);
                v317 = 2;
                if ((unint64_t)v316 >= 2)
                  v317 = 2 * (unint64_t)v316;
                v313 += v317;
                --v298;
                v311 += 2;
                v312 = v320;
                if (v320 == v310)
                  goto LABEL_340;
              }
            }
            v313 = 2;
LABEL_340:
            v332 = 2;
            if (*(_BYTE *)(v296 + 96))
              v332 = 4;
            v333 = v332 + v313;
            if (*(_BYTE *)(v296 + 97))
              v333 += 2;
            if (v333 < 0x10000)
            {
              v289 = 3 * v333 + *(_QWORD *)(v296 + 24);
              if (*(_BYTE *)(v296 + 96))
                v290 = -1;
              else
                v290 = 0;
              v291 = ((v333 + 2 * (v290 - (*(_BYTE *)(v296 + 97) != 0))) & 0xFFFFFFFFFFFFFFFELL)
                   + *(_QWORD *)(v296 + 40);
              v292 = *(_QWORD *)(v296 + 8) + v333;
              v293 = v289 - 6;
              v294 = v291 - 2;
            }
            else
            {
              v292 = *(_QWORD *)(v296 + 8);
              v293 = *(_QWORD *)(v296 + 24);
              v294 = *(_QWORD *)(v296 + 40);
            }
            v286 = v476;
            v281 = v479;
            v287 = v474;
            *(_QWORD *)(v296 + 16) = v292;
            *(_QWORD *)(v296 + 32) = v293;
            *(_QWORD *)(v296 + 48) = v294;
          }
          v295 = (_QWORD *)*v288++;
          v286[1] = v295[2] + v286[1] - v295[1];
          v286[3] = v295[4] + v286[3] - v295[3];
          v286[5] = v295[6] + v286[5] - v295[5];
        }
        while (v288 != v287);
        v275 = v463;
        if (v487.__begin_)
          operator delete(v487.__begin_);
      }
      if (v488)
        operator delete(v488);
      v334 = v470;
      v335 = *v470;
      v9 = v468;
      if (v472 < v466)
      {
        *(_QWORD *)v472 = v335;
        v285 = v472 + 8;
        goto LABEL_302;
      }
      v336 = (v472 - v281) >> 3;
      v337 = v336 + 1;
      if ((unint64_t)(v336 + 1) >> 61)
        abort();
      if ((v466 - v281) >> 2 > v337)
        v337 = (v466 - v281) >> 2;
      if ((unint64_t)(v466 - v281) >= 0x7FFFFFFFFFFFFFF8)
        v338 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v338 = v337;
      if (v338)
      {
        if (v338 >> 61)
          goto LABEL_489;
        v339 = operator new(8 * v338);
      }
      else
      {
        v339 = 0;
      }
      v340 = &v339[8 * v336];
      *(_QWORD *)v340 = v335;
      v285 = v340 + 8;
      if (v472 != v281)
      {
        v341 = v472 - 8 - v281;
        if (v341 < 0x168)
        {
          v342 = v472;
          goto LABEL_364;
        }
        if (&v339[v472 - v281 - 8 - (v341 & 0xFFFFFFFFFFFFFFF8)] > &v339[v472 - v281 - 8])
        {
          v342 = v472;
          do
          {
LABEL_364:
            v343 = *((_QWORD *)v342 - 1);
            v342 -= 8;
            *((_QWORD *)v340 - 1) = v343;
            v340 -= 8;
          }
          while (v342 != v281);
          goto LABEL_365;
        }
        if (&v472[-(v341 & 0xFFFFFFFFFFFFFFF8) - 8] > v472 - 8)
        {
          v342 = v472;
          goto LABEL_364;
        }
        if ((unint64_t)(v281 - v339) < 0x20)
        {
          v342 = v472;
          goto LABEL_364;
        }
        v344 = (v341 >> 3) + 1;
        v342 = &v472[-8 * (v344 & 0x3FFFFFFFFFFFFFFCLL)];
        v345 = &v339[8 * v336 - 16];
        v346 = v472 - 16;
        v347 = v344 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v348 = *(_OWORD *)v346;
          *(v345 - 1) = *((_OWORD *)v346 - 1);
          *v345 = v348;
          v345 -= 2;
          v346 -= 32;
          v347 -= 4;
        }
        while (v347);
        v340 -= 8 * (v344 & 0x3FFFFFFFFFFFFFFCLL);
        if (v344 != (v344 & 0x3FFFFFFFFFFFFFFCLL))
          goto LABEL_364;
      }
LABEL_365:
      v466 = &v339[8 * v338];
      if (v281)
        operator delete(v281);
      v281 = v340;
      v334 = v470;
LABEL_302:
      v284 = (_QWORD **)(v334 + 1);
      v472 = v285;
      v283 = v464;
    }
    v280 = v458 + 1;
    if (v458 + 1 != v454)
      continue;
    break;
  }
  if (*((_BYTE *)v275 + 72))
  {
    v349 = (gdc::GlobeTileGrid *)operator new();
    v350 = v472;
    v351 = v349;
    v352 = v281;
    if (!*((_BYTE *)v275 + 112))
    {
      std::__throw_bad_optional_access[abi:nn180100]();
      __break(1u);
      return;
    }
    gdc::GlobeTileGrid::GlobeTileGrid(v349, v451);
    v353 = *v460;
    *v460 = v351;
    if (v353)
    {
      v354 = *((_QWORD *)v353 + 323);
      if (v354)
        MEMORY[0x1A1AF4DE8](v354, 0x1000C8000313F17);
      MEMORY[0x1A1AF4E00](v353, 0x1020C4007FF0C4BLL);
      v351 = *v460;
    }
    v281 = v352;
    *((_QWORD *)v351 + 323) = operator new[]();
    if (v352 != v472)
    {
      v355 = v352;
      do
      {
        v356 = *(uint64_t **)(*(_QWORD *)v355 + 56);
        v357 = *(uint64_t **)(*(_QWORD *)v355 + 64);
        while (v356 != v357)
        {
          v358 = *v356;
          v359 = *(_QWORD *)(*v356 + 80);
          if (v359)
          {
            v360 = *(_QWORD *)(v358 + 88);
            if (v360)
            {
              v361 = 0;
              v362 = *(_QWORD *)(v358 + 72);
              v363 = *v460;
              v364 = *((_QWORD *)*v460 + 323);
              v365 = (float *)(v362 + 4);
              do
              {
                v366 = *((float *)v363 + 648) * *(float *)(v359 + 4 * v361);
                v367 = vcvts_n_u32_f32(*(v365 - 1), 2uLL);
                if (v367 >= 3)
                  v367 = 3;
                v368 = *v365;
                v365 += 2;
                v369 = vcvts_n_u32_f32(v368, 2uLL);
                if (v369 >= 3)
                  v369 = 3;
                v370 = (float *)(v364 + 8 * (v367 | (4 * v369)));
                v371 = fminf(v366, *v370);
                v372 = fmaxf(v370[1], v366);
                *v370 = v371;
                v370[1] = v372;
                ++v361;
              }
              while (v360 > v361);
            }
          }
          ++v356;
        }
        v355 += 8;
      }
      while (v355 != v472);
    }
    gdc::GlobeTileGrid::endBuildingHeightRange(*v460);
  }
  else
  {
    v350 = v472;
  }
LABEL_403:
  v373 = 0;
  v374 = 0;
  v375 = 0;
  v376 = 0;
  v377 = (v350 - v281) >> 3;
  v477 = v377;
  v480 = v281;
  while (2)
  {
    if (v374 == v377
      || (unint64_t)(*(_QWORD *)(*(_QWORD *)&v281[8 * v374] + 8) + v376 - **(_QWORD **)&v281[8 * v374]) >= 0x10000)
    {
      v378 = (char *)operator new(0xF8uLL);
      *((_QWORD *)v378 + 1) = 0;
      v379 = (unint64_t *)(v378 + 8);
      *((_QWORD *)v378 + 2) = 0;
      *((_QWORD *)v378 + 3) = &off_1E42B5748;
      *(_QWORD *)v378 = &off_1E42E04B8;
      *((_QWORD *)v378 + 4) = 16;
      *((_DWORD *)v378 + 10) = 1;
      *((_QWORD *)v378 + 6) = 0;
      *((_QWORD *)v378 + 7) = 0;
      *((_QWORD *)v378 + 8) = 0;
      *((_QWORD *)v378 + 9) = 16 * v376;
      v380 = 0uLL;
      *((_OWORD *)v378 + 5) = 0u;
      *((_OWORD *)v378 + 6) = 0u;
      *((_QWORD *)v378 + 14) = 0;
      if ((v381 & 1) == 0)
      {
        v380 = 0uLL;
        if (v441)
        {
          v442 = operator new();
          ggl::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v442, "GeoGL", 0xA3D02C1100000005);
          v380 = 0uLL;
        }
      }
      *((_QWORD *)v378 + 15) = ggl::Allocator::instance(void)::alloc;
      *((_QWORD *)v378 + 16) = 0;
      *((_OWORD *)v378 + 11) = v380;
      *((_OWORD *)v378 + 12) = v380;
      *((_QWORD *)v378 + 26) = 0;
      *((_QWORD *)v378 + 27) = -1;
      *((_OWORD *)v378 + 10) = v380;
      *((_OWORD *)v378 + 9) = xmmword_19FFB2DD0;
      *((_DWORD *)v378 + 34) = 0;
      *((_QWORD *)v378 + 3) = &off_1E42B81A0;
      *((_QWORD *)v378 + 29) = "BatchType/VData";
      *((_QWORD *)v378 + 30) = &ggl::Ribbon::defaultVboReflection;
      *((_QWORD *)v378 + 28) = &unk_1E42B81C0;
      v488 = (uint64_t (**)())(v378 + 24);
      v489 = (uint64_t (**)())v378;
      v382 = (char *)operator new(0xF8uLL);
      *((_QWORD *)v382 + 1) = 0;
      v383 = (unint64_t *)(v382 + 8);
      *((_QWORD *)v382 + 2) = 0;
      *((_QWORD *)v382 + 3) = &off_1E42B5748;
      *(_QWORD *)v382 = &off_1E42DF1E8;
      *((_QWORD *)v382 + 4) = 2;
      *((_DWORD *)v382 + 10) = 257;
      *((_QWORD *)v382 + 6) = 0;
      *((_QWORD *)v382 + 7) = 0;
      *((_QWORD *)v382 + 8) = 0;
      *((_QWORD *)v382 + 9) = 2 * v375;
      v384 = 0uLL;
      *((_OWORD *)v382 + 5) = 0u;
      *((_OWORD *)v382 + 6) = 0u;
      *((_QWORD *)v382 + 14) = 0;
      if ((v385 & 1) == 0)
      {
        v384 = 0uLL;
        if (v443)
        {
          v444 = operator new();
          ggl::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v444, "GeoGL", 0xA3D02C1100000005);
          v384 = 0uLL;
        }
      }
      *((_QWORD *)v382 + 15) = ggl::Allocator::instance(void)::alloc;
      *((_QWORD *)v382 + 16) = 0;
      *((_OWORD *)v382 + 11) = v384;
      *((_OWORD *)v382 + 12) = v384;
      *((_QWORD *)v382 + 26) = 0;
      *((_QWORD *)v382 + 27) = -1;
      *((_OWORD *)v382 + 10) = v384;
      *((_OWORD *)v382 + 9) = xmmword_19FFB2DD0;
      *((_DWORD *)v382 + 34) = 0;
      *((_DWORD *)v382 + 60) = 0;
      *((_QWORD *)v382 + 3) = &off_1E42B6B88;
      *((_QWORD *)v382 + 4) = 2;
      *((_QWORD *)v382 + 28) = &unk_1E42B6BA8;
      *((_QWORD *)v382 + 29) = "BatchType/IData";
      v487.__begin_ = (std::vector<unsigned int>::pointer)(v382 + 24);
      v487.__end_ = (std::vector<unsigned int>::pointer)v382;
      v386 = operator new();
      v387 = v386;
      *(_QWORD *)&v486 = v378 + 24;
      *((_QWORD *)&v486 + 1) = v378;
      do
        v388 = __ldxr(v379);
      while (__stxr(v388 + 1, v379));
      v485[0] = (uint64_t)(v382 + 24);
      v485[1] = (uint64_t)v382;
      do
        v389 = __ldxr(v383);
      while (__stxr(v389 + 1, v383));
      ggl::Ribbon::BaseMesh::BaseMesh(v386, (uint64_t)"BatchType/Mesh", (uint64_t *)&v486, v485);
      do
        v390 = __ldaxr(v383);
      while (__stlxr(v390 - 1, v383));
      if (!v390)
      {
        (*(void (**)(char *))(*(_QWORD *)v382 + 16))(v382);
        std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v382);
      }
      v391 = (std::__shared_weak_count *)*((_QWORD *)&v486 + 1);
      v9 = v468;
      if (*((_QWORD *)&v486 + 1))
      {
        v392 = (unint64_t *)(*((_QWORD *)&v486 + 1) + 8);
        do
          v393 = __ldaxr(v392);
        while (__stlxr(v393 - 1, v392));
        if (!v393)
        {
          ((void (*)(std::__shared_weak_count *))v391->__on_zero_shared)(v391);
          std::__shared_weak_count::__release_weak(v391);
        }
      }
      v395 = (char *)v463[5];
      v394 = v463[6];
      if ((unint64_t)v395 < v394)
      {
        *(_QWORD *)v395 = v387;
        v396 = v395 + 8;
        v281 = v480;
        goto LABEL_446;
      }
      v397 = (char *)*v456;
      v398 = v395 - (_BYTE *)*v456;
      v399 = v398 >> 3;
      v400 = (v398 >> 3) + 1;
      if (v400 >> 61)
        abort();
      v401 = v394 - (_QWORD)v397;
      if (v401 >> 2 > v400)
        v400 = v401 >> 2;
      if ((unint64_t)v401 >= 0x7FFFFFFFFFFFFFF8)
        v402 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v402 = v400;
      if (v402)
      {
        if (v402 >> 61)
          goto LABEL_489;
        v403 = operator new(8 * v402);
        v9 = v468;
      }
      else
      {
        v403 = 0;
      }
      v404 = (uint64_t *)&v403[8 * v399];
      *v404 = v387;
      v396 = v404 + 1;
      if (v395 == v397)
      {
        v397 = v395;
        v281 = v480;
      }
      else
      {
        v405 = v395 - 8 - v397;
        if (v405 >= 0x58)
        {
          v406 = v395 - &v403[v398];
          v281 = v480;
          if (v406 < 0x20)
            goto LABEL_442;
          v407 = (v405 >> 3) + 1;
          v408 = &v403[8 * v399 - 16];
          v409 = v395 - 16;
          v410 = v407 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v411 = *(_OWORD *)v409;
            *(v408 - 1) = *((_OWORD *)v409 - 1);
            *v408 = v411;
            v408 -= 2;
            v409 -= 32;
            v410 -= 4;
          }
          while (v410);
          v404 -= v407 & 0x3FFFFFFFFFFFFFFCLL;
          v395 -= 8 * (v407 & 0x3FFFFFFFFFFFFFFCLL);
          if (v407 != (v407 & 0x3FFFFFFFFFFFFFFCLL))
            goto LABEL_442;
        }
        else
        {
          v281 = v480;
          do
          {
LABEL_442:
            v412 = *((_QWORD *)v395 - 1);
            v395 -= 8;
            *--v404 = v412;
          }
          while (v395 != v397);
          v397 = (char *)*v456;
        }
      }
      v463[4] = v404;
      v463[5] = v396;
      v463[6] = &v403[8 * v402];
      if (v397)
        operator delete(v397);
LABEL_446:
      v377 = v477;
      v463[5] = v396;
      if (v373 < v374)
      {
        v413 = 0;
        v414 = v373;
        do
        {
          v415 = *(_QWORD *)&v281[8 * v414];
          v416 = *(_QWORD *)(v415 + 32);
          v417 = v416 + v413;
          v418 = *(_QWORD *)(v415 + 40) + v413;
          *(_QWORD *)(v415 + 32) = v417;
          *(_QWORD *)(v415 + 40) = v418;
          v413 = v418 - v416;
          ++v414;
        }
        while (v374 != v414);
        v419 = 0;
        do
        {
          v420 = *(uint64_t **)&v281[8 * v373];
          v421 = *v420;
          v422 = *v420 + v419;
          v423 = v420[1] + v419;
          *v420 = v422;
          v420[1] = v423;
          v424 = v420[2];
          v425 = v424 + v413;
          v426 = v420[3] + v413;
          v420[2] = v425;
          v420[3] = v426;
          v420[11] = v387;
          v427 = (_QWORD *)v420[7];
          v428 = (_QWORD *)v420[8];
          if (v427 != v428)
          {
            v429 = v420[4];
            do
            {
              v430 = (_QWORD *)*v427++;
              v431 = v430[2] - v430[1];
              v430[1] = v422;
              v422 += v431;
              v432 = v430[4] - v430[3];
              v430[2] = v422;
              v430[3] = v425;
              v425 += v432;
              v433 = v430[6] - v430[5];
              v430[4] = v425;
              v430[5] = v429;
              v429 += v433;
              v430[6] = v429;
            }
            while (v427 != v428);
          }
          v419 = v423 - v421;
          v413 = v426 - v424;
          ++v373;
        }
        while (v373 != v374);
      }
      end = (std::__shared_weak_count *)v487.__end_;
      if (!v487.__end_)
        goto LABEL_459;
      v435 = (unint64_t *)(v487.__end_ + 2);
      do
        v436 = __ldaxr(v435);
      while (__stlxr(v436 - 1, v435));
      if (!v436)
      {
        ((void (*)(std::__shared_weak_count *))end->__on_zero_shared)(end);
        std::__shared_weak_count::__release_weak(end);
        v437 = (std::__shared_weak_count *)v489;
        if (v489)
        {
LABEL_460:
          v438 = (unint64_t *)&v437->__shared_owners_;
          do
            v439 = __ldaxr(v438);
          while (__stlxr(v439 - 1, v438));
          if (!v439)
          {
            ((void (*)(std::__shared_weak_count *))v437->__on_zero_shared)(v437);
            std::__shared_weak_count::__release_weak(v437);
          }
        }
      }
      else
      {
LABEL_459:
        v437 = (std::__shared_weak_count *)v489;
        if (v489)
          goto LABEL_460;
      }
      v376 = 0;
      v375 = 0;
      v373 = v374;
    }
    if (v374 < v377)
    {
      v440 = *(_QWORD **)&v281[8 * v374];
      v376 = v440[1] + v376 - *v440;
      v375 = v440[3] + v375 + v440[5] - (v440[2] + v440[4]);
    }
    if (++v374 <= v377)
      continue;
    break;
  }
  if (v281)
    operator delete(v281);
  v445 = v461[152];
  v461[152] = v463;
  if (v445)
    (*(void (**)(id))(*(_QWORD *)v445 + 8))(v445);
  v483[0] = MEMORY[0x1E0C809B0];
  v483[1] = 3221225472;
  v483[2] = ___ZN2md15TransitTileData24createDisplayConnectionsERN3ggl6LoaderE_block_invoke;
  v483[3] = &__block_descriptor_40_e30_v16__0__ResourceAccessor_____8l;
  v483[4] = v461;
  v488 = &off_1E42C7118;
  v489 = (uint64_t (**)())MEMORY[0x1A1AF5730](v483);
  v491 = (void **)&v488;
  v487.__begin_ = 0;
  v487.__end_ = 0;
  (*(void (**)(_QWORD, uint64_t (***)(), std::vector<unsigned int> *))(**(_QWORD **)a2 + 16))(*(_QWORD *)a2, &v488, &v487);
  v446 = (std::__shared_weak_count *)v487.__end_;
  if (v487.__end_)
  {
    v447 = (unint64_t *)(v487.__end_ + 2);
    do
      v448 = __ldaxr(v447);
    while (__stlxr(v448 - 1, v447));
    if (!v448)
    {
      ((void (*)(std::__shared_weak_count *))v446->__on_zero_shared)(v446);
      std::__shared_weak_count::__release_weak(v446);
    }
  }
  v449 = (uint64_t (***)())v491;
  if (v491 == (void **)&v488)
  {
    v450 = 4;
    v449 = &v488;
LABEL_485:
    (*v449)[v450]();
  }
  else if (v491)
  {
    v450 = 5;
    goto LABEL_485;
  }
  if (v9)
    operator delete(v9);
}

void sub_19F9243EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void **a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void **a16, uint64_t a17, uint64_t *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23)
{
  void *v23;
  uint64_t v24;
  void *v26;
  void *v27;

  MEMORY[0x1A1AF4E00](v24, 0x1020C4007FF0C4BLL);
  if (v23)
    operator delete(v23);
  std::unique_ptr<gdc::GlobeTileGrid>::~unique_ptr[abi:nn180100](a18);
  v26 = *a16;
  if (*a16)
  {
    *(_QWORD *)(a20 + 40) = v26;
    operator delete(v26);
  }
  v27 = *a11;
  if (*a11)
  {
    *(_QWORD *)(a20 + 16) = v27;
    operator delete(v27);
  }
  MEMORY[0x1A1AF4E00](a20, 0x10A1C40E0C5228ALL);
  if (!a23)
    _Unwind_Resume(a1);
  operator delete(a23);
  _Unwind_Resume(a1);
}

void ___ZN2md15TransitTileData24createDisplayConnectionsERN3ggl6LoaderE_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  float v4;
  char *__ptr32 *v5;
  uint64_t **v6;
  uint64_t **v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  int8x16_t v26;
  unint64_t v27;
  int32x2_t v28;
  unint64_t v29;
  unint64_t v30;
  float v31;
  float32x2_t v32;
  uint64_t v33;
  int8x16_t v34;
  _OWORD *v35;
  float32x4_t v36;
  unint64_t v37;
  float32x4_t v38;
  const float *v39;
  int8x16_t v40;
  int32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;
  float32x4_t v44;
  float32x4_t v45;
  float32x4_t v46;
  float32x4_t v47;
  unint64_t v48;
  float32x2_t *v49;
  float32x2_t v50;
  float32x2_t v51;
  double v52;
  float v53;
  float *v54;
  float v55;
  uint64_t v56;
  float v57;
  float v58;
  float v59;
  float v60;
  _QWORD *v61;
  float v62;
  float v63;
  float v64;
  int v65;
  uint64_t v66;
  float v67;
  BOOL v68;
  float v69;
  int v70;
  float v71;
  float v72;
  int v73;
  float32x4_t v74;
  float32x4_t v75;
  float v76;
  int v77;
  float v78;
  float v79;
  int v80;
  float32x4_t v81;
  float32x4_t v82;
  uint64_t v83;
  char *v84;
  float *v85;
  unint64_t v86;
  uint64_t v87;
  float v88;
  float v89;
  float v90;
  float v91;
  float v92;
  int v93;
  float v94;
  float v95;
  int v96;
  float32x4_t v97;
  float32x4_t v98;
  float *v99;
  float v100;
  float v101;
  float *v102;
  unint64_t v103;
  float v104;
  float v105;
  float v106;
  float v107;
  unint64_t v108;
  float v109;
  float v110;
  float v111;
  float v112;
  float v113;
  float v114;
  float *v115;
  float v116;
  float v117;
  double v118;
  unint64_t v119;
  char *__ptr32 *v120;
  uint64_t v121;
  float v122;
  float v123;
  int v124;
  float v125;
  float v126;
  int v127;
  __float2 v128;
  float32x4_t v129;
  float32x4_t v130;
  float *v131;
  float *v132;
  float v133;
  float v134;
  float v135;
  float32x4_t v136;
  int16x8_t v137;
  float v138;
  float v139;
  float v140;
  float v141;
  float v142;
  int v143;
  float v144;
  float v145;
  int v146;
  float32x4_t v147;
  float32x4_t v148;
  uint64_t v149;
  uint64_t v150;
  float32x4_t v151;
  float32x4_t v152;
  unint64_t v153;
  unint64_t v154;
  unint64_t v155;
  uint64_t v156;
  unint64_t v157;
  uint64_t v158;
  _WORD *v159;
  uint64_t v160;
  unint64_t v161;
  unint64_t v162;
  _WORD *v163;
  __int16 v164;
  unint64_t v165;
  __int16 v166;
  __int16 v167;
  unint64_t v168;
  unint64_t v169;
  _WORD *v170;
  unint64_t v171;
  int64x2_t v172;
  int64x2_t v173;
  int64x2_t v174;
  int64x2_t v175;
  int64x2_t v176;
  int64x2_t v177;
  __int16 *v178;
  unint64_t v179;
  unint64_t v180;
  unint64_t v181;
  unsigned __int8 v183;
  _QWORD *v184;
  _QWORD *v185;
  _QWORD *v186;
  uint64_t v187;
  malloc_zone_t *v188;
  void (***v189)(_QWORD, uint64_t);
  void (***v190)(_QWORD, uint64_t);
  unsigned __int8 v191;
  uint64_t v192;
  geo::read_write_lock *v193;
  const char *v194;
  uint64_t v195;
  geo::read_write_lock *v196;
  const char *v197;
  malloc_zone_t *zone;
  uint64_t v199;
  uint64_t v200;
  uint64_t **v201;
  uint64_t **v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  _QWORD *v211;
  uint64_t v213;
  uint64_t *v214;
  int v215;
  uint64_t v216;
  uint64_t v217;
  unint64_t v218;
  _WORD *v219;
  _QWORD *v220;
  uint64_t v221;
  char *v222;
  unint64_t v223;
  float v224;
  float v225;
  float v226;
  float v227;
  float v228;
  std::vector<unsigned int> __p;
  void *v230[3];
  _BYTE v231[32];
  __int128 v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  unint64_t v236;
  unint64_t v237;
  int16x8x2_t v238;
  float32x4x2_t v239;

  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 1216);
  v3 = *(_QWORD *)(v2 + 8);
  v199 = *(_QWORD *)(v2 + 16);
  if (v3 != v199)
  {
    v4 = 1.0;
    v5 = &off_19FFB1000;
    do
    {
      v7 = *(uint64_t ***)(*(_QWORD *)v3 + 376);
      v6 = *(uint64_t ***)(*(_QWORD *)v3 + 384);
      v200 = v3;
      v201 = v6;
      while (v7 != v6)
      {
        v8 = *v7;
        v9 = **v7;
        v10 = (*v7)[1];
        v206 = **(_QWORD **)((*v7)[11] + 64);
        v11 = *(_QWORD *)(v206 + 8);
        v208 = v11 * v9;
        v204 = v11 * v10;
        v202 = v7;
        if (v11 * v10 == v11 * v9)
        {
          v210 = 0;
        }
        else if (a2 && *(_BYTE *)(v206 + 17) != 2)
        {
          v210 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 56))(a2, v206, v208);
        }
        else
        {
          v210 = *(_QWORD *)(v206 + 72) + v208;
        }
        v12 = v8[2];
        v14 = v8[4];
        v13 = v8[5];
        if (v13 == v14)
        {
          v13 = v8[3];
        }
        else
        {
          if (v14 < v12)
            v12 = v8[4];
          if (v8[3] > v13)
            v13 = v8[3];
        }
        v205 = *(_QWORD *)(v8[11] + 96);
        v15 = *(_QWORD *)(v205 + 8);
        v207 = v15 * v12;
        v203 = v15 * v13;
        if (v15 * v13 == v15 * v12)
        {
          v209 = 0;
        }
        else if (a2 && *(_BYTE *)(v205 + 17) != 2)
        {
          v209 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 56))(a2, v205, v207);
        }
        else
        {
          v209 = *(_QWORD *)(v205 + 72) + v207;
        }
        v16 = v8[2];
        v17 = v8[4];
        memset(v230, 0, sizeof(v230));
        memset(&__p, 0, sizeof(__p));
        v18 = v8[7];
        v211 = v8 + 7;
        v19 = v8[8];
        if (v18 != v19)
        {
          v20 = 2 * v12;
          v21 = v209 + 2 * v17 - 2 * v12;
          v22 = v209 + 2 * v16 - v20;
          v221 = v210;
          v213 = v8[8];
          v214 = v8;
          while (1)
          {
            v24 = *(_QWORD **)v18;
            *(_OWORD *)v231 = xmmword_19FFB2F60;
            *(_OWORD *)&v231[16] = xmmword_19FFB2F70;
            v25 = v24[2];
            if (v25 != v24[1])
              break;
            v23 = v24[2];
LABEL_28:
            v221 += 16 * (v23 - v25);
            v22 += 2 * (v24[4] - v24[3]);
            v21 += 2 * (v24[6] - v24[5]);
            v18 += 8;
            if (v18 == v19)
              goto LABEL_133;
          }
          v219 = (_WORD *)v22;
          v220 = v24;
          v237 = 1;
          md::Ribbons::RibbonWriter<md::Ribbons::SolidTrafficRibbonDescriptor>::eliminateDuplicates((uint64_t)v24, v230, &__p, (uint64_t *)&v237);
          v27 = v237;
          if (v237 >= 2)
          {
            v218 = v237 - 2;
            v28 = *(int32x2_t *)v230[0];
            v29 = v237 - 1;
            v222 = (char *)v230[0];
            if (v237 >= 9)
            {
              v30 = v29 & 0xFFFFFFFFFFFFFFF8;
              v26.i64[1] = *(_QWORD *)v230[0];
              v34 = (int8x16_t)vdupq_lane_s32(v28, 0);
              v35 = (char *)v230[0] + 40;
              v36 = 0uLL;
              v37 = v29 & 0xFFFFFFFFFFFFFFF8;
              v38 = 0uLL;
              v33 = v221;
              do
              {
                v39 = (const float *)(v35 - 2);
                v239 = vld2q_f32(v39);
                v41 = *(int32x4_t *)v35;
                v40 = *((int8x16_t *)v35 + 1);
                v35 += 4;
                v42 = (float32x4_t)vuzp1q_s32(v41, (int32x4_t)v40);
                v43 = (float32x4_t)vuzp2q_s32(v41, (int32x4_t)v40);
                v44 = vsubq_f32(v239.val[0], (float32x4_t)vextq_s8(v34, (int8x16_t)v239.val[0], 0xCuLL));
                v45 = vsubq_f32(v42, (float32x4_t)vextq_s8((int8x16_t)v239.val[0], (int8x16_t)v42, 0xCuLL));
                v46 = vsubq_f32(v239.val[1], (float32x4_t)vextq_s8(v26, (int8x16_t)v239.val[1], 0xCuLL));
                v239.val[0] = vsubq_f32(v43, (float32x4_t)vextq_s8((int8x16_t)v239.val[1], (int8x16_t)v43, 0xCuLL));
                v36 = vaddq_f32(vsqrtq_f32(vmlaq_f32(vmulq_f32(v44, v44), v46, v46)), v36);
                v38 = vaddq_f32(vsqrtq_f32(vmlaq_f32(vmulq_f32(v45, v45), v239.val[0], v239.val[0])), v38);
                v26 = (int8x16_t)v43;
                v34 = (int8x16_t)v42;
                v37 -= 8;
              }
              while (v37);
              v47 = vaddq_f32(v38, v36);
              v31 = vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v47, v47));
              if (v29 != v30)
              {
                v32 = (float32x2_t)vextq_s8(v40, v40, 8uLL).u64[0];
                goto LABEL_37;
              }
            }
            else
            {
              v30 = 0;
              v31 = 0.0;
              v32 = *(float32x2_t *)v230[0];
              v33 = v221;
LABEL_37:
              v48 = ~v30 + v237;
              v49 = (float32x2_t *)((char *)v230[0] + 8 * v30 + 8);
              do
              {
                v50 = *v49++;
                v51 = vsub_f32(v50, v32);
                v31 = sqrtf(vaddv_f32(vmul_f32(v51, v51))) + v31;
                v32 = v50;
                --v48;
              }
              while (v48);
            }
            v52 = v31;
            v53 = v4 / v31;
            if (v52 <= 1.0e-10)
              v53 = 0.0;
            v224 = v53;
            v54 = (float *)((char *)v230[0] + 8);
            v55 = sqrtf((float)((float)(*((float *)v230[0] + 2) - *(float *)v28.i32)* (float)(*((float *)v230[0] + 2) - *(float *)v28.i32))+ (float)((float)(*((float *)v230[0] + 3) - *(float *)&v28.i32[1])* (float)(*((float *)v230[0] + 3) - *(float *)&v28.i32[1])));
            v56 = 1;
            while (1)
            {
              v57 = *v54;
              if (vabds_f32(*v54, *(float *)v28.i32) >= 1.0e-10)
                break;
              v58 = v54[1];
              if (vabds_f32(v58, *(float *)&v28.i32[1]) >= 1.0e-10)
                goto LABEL_47;
              ++v56;
              v54 += 2;
              if (v237 == v56)
              {
                v59 = 1.0;
                v60 = 0.0;
                v61 = v220;
                goto LABEL_48;
              }
            }
            v58 = v54[1];
LABEL_47:
            v62 = v58 - *(float *)&v28.i32[1];
            v61 = v220;
            v63 = v57 - *(float *)v28.i32;
            v64 = v4 / sqrtf((float)(v63 * v63) + (float)(v62 * v62));
            v59 = v64 * v63;
            v60 = v64 * v62;
LABEL_48:
            v217 = v18;
            v233 = 0;
            *(float *)&v236 = -v60;
            *((float *)&v236 + 1) = v59;
            v65 = *((unsigned __int8 *)v61 + 96);
            v66 = v33;
            v215 = v65;
            if (v65)
            {
              *(float *)&v234 = (float)-v60 - v59;
              *((float *)&v234 + 1) = v59 - v60;
              *(float *)&v235 = v60 - v59;
              *((float *)&v235 + 1) = -(float)(v60 + v59);
              v67 = fmaxf(*(float *)v28.i32, 0.0);
              v68 = v67 < v4;
              v69 = v67 * 65535.0;
              if (!v68)
                v69 = 65535.0;
              v70 = (int)v69;
              v71 = fmaxf(*(float *)&v28.i32[1], 0.0);
              v68 = v71 < v4;
              v72 = v71 * 65535.0;
              if (!v68)
                v72 = 65535.0;
              v73 = (int)v72;
              v232 = xmmword_19FFB2F80;
              *(_WORD *)v33 = v70;
              v74.i64[0] = v234;
              v74.i64[1] = 0xBF8000003F800000;
              *(_WORD *)(v33 + 2) = (int)v72;
              v75.i64[0] = 0xBF000000BF000000;
              v75.i64[1] = 0xBF000000BF000000;
              *(int16x4_t *)(v33 + 4) = vmovn_s32(vcvtq_s32_f32(vmlaq_f32(v75, (float32x4_t)xmmword_19FFB2FA0, v74)));
              *(_WORD *)(v33 + 16) = v70;
              *(_WORD *)(v33 + 18) = v73;
              v74.i64[0] = v235;
              v74.i64[1] = *((_QWORD *)&v232 + 1);
              v75.i64[0] = 0xBF000000BF000000;
              v75.i64[1] = 0xBF000000BF000000;
              *(int16x4_t *)(v33 + 20) = vmovn_s32(vcvtq_s32_f32(vmlaq_f32(v75, (float32x4_t)xmmword_19FFB2FA0, v74)));
              v66 = v33 + 32;
            }
            v216 = v21;
            *(float *)&v234 = -v60;
            *((float *)&v234 + 1) = v59;
            *(float *)&v235 = v60;
            *((float *)&v235 + 1) = -v59;
            v76 = fmaxf(*(float *)v28.i32, 0.0);
            if (v76 >= v4)
              *(float *)v28.i32 = 65535.0;
            else
              *(float *)v28.i32 = v76 * 65535.0;
            v77 = (int)*(float *)v28.i32;
            v78 = fmaxf(*(float *)&v28.i32[1], 0.0);
            if (v78 >= v4)
              v79 = 65535.0;
            else
              v79 = v78 * 65535.0;
            v80 = (int)v79;
            v232 = xmmword_19FFB2FB0;
            *(_WORD *)v66 = v77;
            *(_WORD *)(v66 + 2) = (int)v79;
            v81.i64[0] = v234;
            v81.i64[1] = 0xBF80000000000000;
            v82.i64[0] = 0xBF000000BF000000;
            v82.i64[1] = 0xBF000000BF000000;
            *(int16x4_t *)(v66 + 4) = vmovn_s32(vcvtq_s32_f32(vmlaq_f32(v82, (float32x4_t)xmmword_19FFB2FA0, v81)));
            *(_WORD *)(v66 + 16) = v77;
            *(_WORD *)(v66 + 18) = v80;
            v81.i64[0] = v235;
            v81.i64[1] = *((_QWORD *)&v232 + 1);
            v82.i64[0] = 0xBF000000BF000000;
            v82.i64[1] = 0xBF000000BF000000;
            *(int16x4_t *)(v66 + 20) = vmovn_s32(vcvtq_s32_f32(vmlaq_f32(v82, (float32x4_t)xmmword_19FFB2FA0, v81)));
            v83 = v66 + 32;
            v84 = v222;
            if (v29 < 2)
            {
              v88 = v60;
              v89 = v59;
            }
            else
            {
              v85 = (float *)(v222 + 16);
              v86 = v218;
              v87 = 1;
              v88 = v60;
              v89 = v59;
              v223 = v27 - 1;
              do
              {
                v99 = (float *)&v84[8 * v87];
                v101 = *v99;
                v100 = v99[1];
                if (++v87 < v27)
                {
                  v102 = v85;
                  v103 = v86;
                  while (vabds_f32(*v102, v101) < 1.0e-10)
                  {
                    v104 = v102[1];
                    if (vabds_f32(v104, v100) >= 1.0e-10)
                      goto LABEL_77;
                    v102 += 2;
                    if (!--v103)
                    {
                      v88 = v60;
                      v89 = v59;
                      goto LABEL_78;
                    }
                  }
                  v104 = v102[1];
LABEL_77:
                  v105 = v104 - v100;
                  v106 = *v102 - v101;
                  v107 = v4 / sqrtf((float)(v106 * v106) + (float)(v105 * v105));
                  v89 = v107 * v106;
                  v88 = v107 * v105;
                }
LABEL_78:
                v108 = v27;
                v109 = v89 + v59;
                v110 = v88 + v60;
                v111 = (float)(v109 * v109) + (float)(v110 * v110);
                v112 = v60;
                v113 = v59;
                if (v111 > 0.0)
                {
                  v114 = v4 / sqrtf(v111);
                  v113 = -(float)(v110 * v114);
                  v112 = v114 * v109;
                }
                v115 = (float *)&v84[8 * v87];
                v226 = *v115;
                v225 = v115[1];
                *(float *)&v233 = v55;
                *((float *)&v233 + 1) = v55 * v224;
                v232 = xmmword_19FFB2FB0;
                v228 = v88;
                v227 = v89;
                v116 = atan2f(v88, v89);
                v117 = v116 - atan2f(v60, v59);
                v118 = v117;
                if (v117 <= *((double *)v5 + 322))
                {
                  v4 = 1.0;
                  if (v118 < -3.14159265)
                    v117 = v118 + 6.28318531;
                }
                else
                {
                  v117 = v118 + -6.28318531;
                  v4 = 1.0;
                }
                v119 = (unint64_t)fmaxf(ceilf(fabsf(v117) * 1.2732), v4);
                if (v119 <= 1)
                {
                  v89 = v227;
                  v88 = v228;
                  v90 = sqrtf(fmaxf(-(float)((float)((float)((float)(v113 * v227) + (float)(v112 * v228))* (float)((float)(v113 * v227) + (float)(v112 * v228)))+ -1.0), 0.1));
                  v236 = __PAIR64__(LODWORD(v112), LODWORD(v113));
                  *(float *)&v234 = v113 / v90;
                  *((float *)&v234 + 1) = v112 / v90;
                  *(float *)&v235 = -(float)(v113 / v90);
                  *((float *)&v235 + 1) = -(float)(v112 / v90);
                  v91 = fmaxf(v101, 0.0);
                  if (v91 >= v4)
                    v92 = 65535.0;
                  else
                    v92 = v91 * 65535.0;
                  v93 = (int)v92;
                  v94 = fmaxf(v100, 0.0);
                  if (v94 >= v4)
                    v95 = 65535.0;
                  else
                    v95 = v94 * 65535.0;
                  v96 = (int)v95;
                  *(_WORD *)v83 = v93;
                  *(_WORD *)(v83 + 2) = (int)v95;
                  v97.i64[0] = v234;
                  v97.i64[1] = v232;
                  v98.i64[0] = 0xBF000000BF000000;
                  v98.i64[1] = 0xBF000000BF000000;
                  *(int16x4_t *)(v83 + 4) = vmovn_s32(vcvtq_s32_f32(vmlaq_f32(v98, (float32x4_t)xmmword_19FFB2FA0, v97)));
                  *(_WORD *)(v83 + 16) = v93;
                  *(_WORD *)(v83 + 18) = v96;
                  v97.i64[0] = v235;
                  v97.i64[1] = *((_QWORD *)&v232 + 1);
                  v98.i64[0] = 0xBF000000BF000000;
                  v98.i64[1] = 0xBF000000BF000000;
                  *(int16x4_t *)(v83 + 20) = vmovn_s32(vcvtq_s32_f32(vmlaq_f32(v98, (float32x4_t)xmmword_19FFB2FA0, v97)));
                  v83 += 32;
                  v27 = v108;
                }
                else
                {
                  v120 = v5;
                  v121 = 0;
                  v122 = fmaxf(v101, 0.0);
                  if (v122 >= v4)
                    v123 = 65535.0;
                  else
                    v123 = v122 * 65535.0;
                  v124 = (int)v123;
                  v125 = fmaxf(v100, 0.0);
                  if (v125 >= v4)
                    v126 = 65535.0;
                  else
                    v126 = v125 * 65535.0;
                  v127 = (int)v126;
                  do
                  {
                    v128 = __sincosf_stret((float)((float)((float)(int)v121 * (float)(v4 / (float)((float)v119 + -1.0))) + -0.5)* v117);
                    *(float *)&v236 = -(float)((float)(v128.__sinval * v112) - (float)(v128.__cosval * v113));
                    *((float *)&v236 + 1) = (float)(v128.__sinval * v113) + (float)(v128.__cosval * v112);
                    v234 = v236;
                    *(float *)&v235 = -(float)((float)(v128.__cosval * v113) - (float)(v128.__sinval * v112));
                    *((float *)&v235 + 1) = -*((float *)&v236 + 1);
                    *(_WORD *)v83 = v124;
                    *(_WORD *)(v83 + 2) = v127;
                    v129.i64[0] = v234;
                    v129.i64[1] = v232;
                    v130.i64[0] = 0xBF000000BF000000;
                    v130.i64[1] = 0xBF000000BF000000;
                    *(int16x4_t *)(v83 + 4) = vmovn_s32(vcvtq_s32_f32(vmlaq_f32(v130, (float32x4_t)xmmword_19FFB2FA0, v129)));
                    *(_WORD *)(v83 + 16) = v124;
                    *(_WORD *)(v83 + 18) = v127;
                    v129.i64[0] = v235;
                    v129.i64[1] = *((_QWORD *)&v232 + 1);
                    v130.i64[0] = 0xBF000000BF000000;
                    v130.i64[1] = 0xBF000000BF000000;
                    *(int16x4_t *)(v83 + 20) = vmovn_s32(vcvtq_s32_f32(vmlaq_f32(v130, (float32x4_t)xmmword_19FFB2FA0, v129)));
                    v83 += 32;
                    ++v121;
                  }
                  while (v119 != v121);
                  v5 = v120;
                  v4 = 1.0;
                  v84 = v222;
                  v27 = v108;
                  v88 = v228;
                  v89 = v227;
                }
                --v86;
                v55 = sqrtf((float)((float)(v226 - v101) * (float)(v226 - v101))+ (float)((float)(v225 - v100) * (float)(v225 - v100)))+ v55;
                v85 += 2;
                v60 = v88;
                v59 = v89;
                v29 = v223;
              }
              while (v87 != v223);
            }
            v131 = (float *)&v84[8 * v29];
            v132 = (float *)&v84[8 * v218];
            v133 = *v131;
            if (vabds_f32(*v131, *v132) >= 1.0e-10)
            {
              v135 = v131[1];
              v138 = v135 - v132[1];
              v136 = (float32x4_t)xmmword_19FFB2FA0;
              v137.i64[0] = 0x1000100010001;
              v137.i64[1] = 0x1000100010001;
              v8 = v214;
              v21 = v216;
LABEL_99:
              v139 = v133 - *v132;
              v140 = v4 / sqrtf((float)(v139 * v139) + (float)(v138 * v138));
              v89 = v140 * v139;
              v88 = v140 * v138;
            }
            else
            {
              v134 = v132[1];
              v135 = v131[1];
              v136 = (float32x4_t)xmmword_19FFB2FA0;
              v137.i64[0] = 0x1000100010001;
              v137.i64[1] = 0x1000100010001;
              v8 = v214;
              v21 = v216;
              if (vabds_f32(v135, v134) >= 1.0e-10)
              {
                v138 = v135 - v134;
                goto LABEL_99;
              }
            }
            *(float *)&v234 = -v88;
            *((float *)&v234 + 1) = v89;
            *(float *)&v235 = v88;
            *((float *)&v235 + 1) = -v89;
            *(float *)&v236 = -v88;
            *((float *)&v236 + 1) = v89;
            *(float *)&v233 = v55;
            *((float *)&v233 + 1) = v55 * v224;
            v141 = fmaxf(v133, 0.0);
            if (v141 >= v4)
              v142 = 65535.0;
            else
              v142 = v141 * 65535.0;
            v143 = (int)v142;
            v144 = fmaxf(v135, 0.0);
            if (v144 >= v4)
              v145 = 65535.0;
            else
              v145 = v144 * 65535.0;
            v146 = (int)v145;
            *(_WORD *)v83 = v143;
            *(_WORD *)(v83 + 2) = (int)v145;
            v147.i64[0] = v234;
            v147.i64[1] = v232;
            v148.i64[0] = 0xBF000000BF000000;
            v148.i64[1] = 0xBF000000BF000000;
            *(int16x4_t *)(v83 + 4) = vmovn_s32(vcvtq_s32_f32(vmlaq_f32(v148, v136, v147)));
            *(_WORD *)(v83 + 16) = v143;
            *(_WORD *)(v83 + 18) = v146;
            v147.i64[0] = v235;
            v147.i64[1] = *((_QWORD *)&v232 + 1);
            v148.i64[0] = 0xBF000000BF000000;
            v148.i64[1] = 0xBF000000BF000000;
            *(int16x4_t *)(v83 + 20) = vmovn_s32(vcvtq_s32_f32(vmlaq_f32(v148, v136, v147)));
            v149 = *((char *)v220 + 97);
            if (*((_BYTE *)v220 + 97))
            {
              *(float *)&v234 = v89 - v88;
              *((float *)&v234 + 1) = v88 + v89;
              *(float *)&v235 = v88 + v89;
              *((float *)&v235 + 1) = v88 - v89;
              v150 = *(_QWORD *)&v231[8];
              v232 = *(_OWORD *)&v231[8];
              *(_WORD *)(v83 + 32) = v143;
              *(_WORD *)(v83 + 34) = v146;
              v151.i64[0] = v234;
              v151.i64[1] = v150;
              v152.i64[0] = 0xBF000000BF000000;
              v152.i64[1] = 0xBF000000BF000000;
              *(int16x4_t *)(v83 + 36) = vmovn_s32(vcvtq_s32_f32(vmlaq_f32(v152, v136, v151)));
              *(_WORD *)(v83 + 48) = v143;
              v152.i64[0] = v235;
              v152.i64[1] = *((_QWORD *)&v232 + 1);
              *(_WORD *)(v83 + 50) = v146;
              v151.i64[0] = 0xBF000000BF000000;
              v151.i64[1] = 0xBF000000BF000000;
              *(int16x4_t *)(v83 + 52) = vmovn_s32(vcvtq_s32_f32(vmlaq_f32(v151, v136, v152)));
            }
            v153 = v220[1];
            v154 = v220[2] - v153;
            v155 = v154 >> 1;
            v18 = v217;
            v19 = v213;
            if (v154 >= 4)
            {
              v156 = v220[1];
              v157 = 2;
              if (v155 > 2)
                v157 = v155;
              if (v157 >= 3)
              {
                v160 = 0;
                v161 = v157 - 1;
                v162 = (v157 - 1) & 0xFFFFFFFFFFFFFFFELL;
                v163 = v219 + 6;
                do
                {
                  v164 = v153 + 2 * v160;
                  *(v163 - 6) = v164;
                  *v163 = v164 + 2;
                  *(v163 - 5) = v164 + 1;
                  v163[1] = v164 + 3;
                  *(v163 - 4) = v164 + 2;
                  v163[2] = v164 + 4;
                  *(v163 - 3) = v164 + 1;
                  v163[3] = v164 + 3;
                  *(v163 - 2) = v164 + 3;
                  v163[4] = v164 + 5;
                  v160 += 2;
                  *(v163 - 1) = v164 + 2;
                  v163[5] = v164 + 4;
                  v163 += 12;
                }
                while (v162 != v160);
                if (v161 != v162)
                {
                  v158 = v161 | 1;
                  LODWORD(v156) = 2 * v162 + v153;
                  v159 = &v219[6 * v162];
                  goto LABEL_117;
                }
              }
              else
              {
                v158 = 1;
                v159 = v219;
LABEL_117:
                v165 = v157 - v158;
                do
                {
                  *v159 = v156;
                  v166 = v156 + 1;
                  v159[1] = v156 + 1;
                  v167 = v156 + 3;
                  LODWORD(v156) = v156 + 2;
                  v159[2] = v156;
                  v159[3] = v166;
                  v159[4] = v167;
                  v159[5] = v156;
                  v159 += 6;
                  --v165;
                }
                while (v165);
              }
            }
            if (v220[6] != v220[5])
            {
              v168 = v215 ? 2 : 1;
              if (v155 - v149 > v168)
              {
                v169 = v155 - (v168 + v149);
                v170 = (_WORD *)v21;
                if (v169 < 8)
                {
LABEL_129:
                  v180 = v168 + v149 - v155;
                  v181 = v153 + 2 * v168;
                  do
                  {
                    *v170 = v181 - 2;
                    v170[1] = v181;
                    v181 += 2;
                    v170 += 2;
                  }
                  while (!__CFADD__(v180++, 1));
                }
                else
                {
                  v171 = v169 & 0xFFFFFFFFFFFFFFF8;
                  v172 = vdupq_n_s64(v168);
                  v173 = vaddq_s64(v172, (int64x2_t)xmmword_19FFB2FE0);
                  v174 = vaddq_s64(v172, (int64x2_t)xmmword_19FFB2FF0);
                  v175 = vaddq_s64(v172, (int64x2_t)xmmword_19FFB3000);
                  v176 = vaddq_s64(v172, (int64x2_t)xmmword_19FFB2E40);
                  v177 = vdupq_n_s64(v153);
                  v178 = (__int16 *)v21;
                  v179 = v169 & 0xFFFFFFFFFFFFFFF8;
                  do
                  {
                    v238.val[1] = vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vaddq_s64(v177, vaddq_s64(v176, v176)), (int32x4_t)vaddq_s64(v177, vaddq_s64(v175, v175))), (int16x8_t)vuzp1q_s32((int32x4_t)vaddq_s64(v177, vaddq_s64(v174, v174)), (int32x4_t)vaddq_s64(v177, vaddq_s64(v173, v173))));
                    v238.val[0] = vaddq_s16(v238.val[1], v137);
                    vst2q_s16(v178, v238);
                    v178 += 16;
                    v238.val[0] = (int16x8_t)vdupq_n_s64(8uLL);
                    v174 = vaddq_s64(v174, (int64x2_t)v238.val[0]);
                    v175 = vaddq_s64(v175, (int64x2_t)v238.val[0]);
                    v176 = vaddq_s64(v176, (int64x2_t)v238.val[0]);
                    v173 = vaddq_s64(v173, (int64x2_t)v238.val[0]);
                    v179 -= 8;
                  }
                  while (v179);
                  if (v169 != v171)
                  {
                    v168 |= v171;
                    v170 = (_WORD *)(v21 + 4 * (v169 & 0xFFFFFFFFFFFFFFF8));
                    goto LABEL_129;
                  }
                }
              }
            }
          }
          v24 = *(_QWORD **)v18;
          v25 = *(_QWORD *)(*(_QWORD *)v18 + 8);
          v23 = *(_QWORD *)(*(_QWORD *)v18 + 16);
          v22 = (uint64_t)v219;
          goto LABEL_28;
        }
LABEL_133:
        {
          v195 = operator new();
          *(_QWORD *)(v195 + 16) = 0x5ED09DD50000000FLL;
          *(_QWORD *)(v195 + 24) = "VectorKitLabels";
          *(_OWORD *)(v195 + 32) = xmmword_19FFB2E80;
          *(_QWORD *)v195 = &off_1E42B5668;
          *(_QWORD *)(v195 + 8) = "VectorKitLabels";
          *(_OWORD *)(v195 + 72) = 0u;
          *(_OWORD *)(v195 + 88) = 0u;
          *(_OWORD *)(v195 + 104) = 0u;
          *(_OWORD *)(v195 + 120) = 0u;
          *(_OWORD *)(v195 + 136) = 0u;
          *(_OWORD *)(v195 + 152) = 0u;
          *(_OWORD *)(v195 + 168) = 0u;
          *(_OWORD *)(v195 + 184) = 0u;
          *(_OWORD *)(v195 + 200) = 0u;
          *(_OWORD *)(v195 + 216) = 0u;
          *(_OWORD *)(v195 + 232) = 0u;
          *(_QWORD *)(v195 + 248) = 0;
          *(_OWORD *)(v195 + 56) = 0u;
          v196 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v195 + 56), 0);
          if ((_DWORD)v196)
            geo::read_write_lock::logFailure(v196, (uint64_t)"initialization", v197);
          zone = malloc_create_zone(0, 0);
          *(_QWORD *)(v195 + 48) = zone;
          malloc_set_zone_name(zone, "VectorKitLabels");
          *(_QWORD *)(v195 + 256) = os_log_create("com.apple.VectorKit", "Memory");
          mdm::Allocator::instance(void)::alloc = v195;
        }
        v184 = v211;
        v185 = (_QWORD *)*v211;
        if (*v211)
        {
          v186 = (_QWORD *)v8[8];
          v187 = *v211;
          if (v186 != v185)
          {
            do
            {
              v190 = (void (***)(_QWORD, uint64_t))*--v186;
              v189 = v190;
              *v186 = 0;
              if (v190)
              {
                (**v189)(v189, v187);
                {
                  v192 = operator new();
                  *(_QWORD *)(v192 + 16) = 0x5ED09DD50000000FLL;
                  *(_QWORD *)(v192 + 24) = "VectorKitLabels";
                  *(_OWORD *)(v192 + 32) = xmmword_19FFB2E80;
                  *(_QWORD *)v192 = &off_1E42B5668;
                  *(_QWORD *)(v192 + 8) = "VectorKitLabels";
                  *(_OWORD *)(v192 + 72) = 0u;
                  *(_OWORD *)(v192 + 88) = 0u;
                  *(_OWORD *)(v192 + 104) = 0u;
                  *(_OWORD *)(v192 + 120) = 0u;
                  *(_OWORD *)(v192 + 136) = 0u;
                  *(_OWORD *)(v192 + 152) = 0u;
                  *(_OWORD *)(v192 + 168) = 0u;
                  *(_OWORD *)(v192 + 184) = 0u;
                  *(_OWORD *)(v192 + 200) = 0u;
                  *(_OWORD *)(v192 + 216) = 0u;
                  *(_OWORD *)(v192 + 232) = 0u;
                  *(_QWORD *)(v192 + 248) = 0;
                  *(_OWORD *)(v192 + 56) = 0u;
                  v193 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v192 + 56), 0);
                  if ((_DWORD)v193)
                    geo::read_write_lock::logFailure(v193, (uint64_t)"initialization", v194);
                  v188 = malloc_create_zone(0, 0);
                  *(_QWORD *)(v192 + 48) = v188;
                  malloc_set_zone_name(v188, "VectorKitLabels");
                  *(_QWORD *)(v192 + 256) = os_log_create("com.apple.VectorKit", "Memory");
                  mdm::Allocator::instance(void)::alloc = v192;
                }
                (*(void (**)(uint64_t, void (***)(_QWORD, uint64_t), uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc
                                                                                                 + 40))(mdm::Allocator::instance(void)::alloc, v189, 104);
              }
            }
            while (v186 != v185);
            v187 = *v211;
          }
          v8[8] = (uint64_t)v185;
          (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v8[10] + 40))(v8[10], v187, v8[9] - v187);
          v184 = v211;
          *v211 = 0;
          v211[1] = 0;
          v211[2] = 0;
        }
        *v184 = 0;
        v184[1] = 0;
        v184[2] = 0;
        if (__p.__begin_)
          operator delete(__p.__begin_);
        if (v230[0])
          operator delete(v230[0]);
        if (v209 && v203 != v207 && a2 && *(_BYTE *)(v205 + 17) != 2)
          (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 64))(a2, v209, v205, v207, v203, 1, 1);
        if (v210 && v204 != v208 && a2 && *(_BYTE *)(v206 + 17) != 2)
          (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 64))(a2, v210, v206, v208, v204, 1, 1);
        v7 = v202 + 1;
        v6 = v201;
      }
      v3 = v200 + 8;
    }
    while (v200 + 8 != v199);
  }
}

void sub_19F925B78(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,void *__p,uint64_t a52,uint64_t a53,void *a54)
{
  if (__p)
    operator delete(__p);
  if (a54)
    operator delete(a54);
  if (a22 && a16 != a20 && a25 && *(_BYTE *)(a18 + 17) != 2)
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a25 + 64))(a25, a22, a18, a20, a16, 1, 1);
  if (a23 && a17 != a21 && a25 && *(_BYTE *)(a19 + 17) != 2)
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a25 + 64))(a25, a23, a19, a21, a17, 1, 1);
  _Unwind_Resume(exception_object);
}

uint64_t ggl::VertexDataTyped<ggl::Ribbon::DefaultVbo>::~VertexDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  return a1;
}

void ggl::VertexDataTyped<ggl::Ribbon::DefaultVbo>::~VertexDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void `non-virtual thunk to'ggl::VertexDataTyped<ggl::Ribbon::DefaultVbo>::~VertexDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)(a1 - 200) = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 - 72));
  v2 = *(_QWORD *)(a1 - 128);
  if (v2)
  {
    *(_QWORD *)(a1 - 120) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 - 104) + 40))(*(_QWORD *)(a1 - 104), v2, *(_QWORD *)(a1 - 112) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 - 168);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

{
  uint64_t v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  *(_QWORD *)(a1 - 200) = &off_1E42B5748;
  v2 = a1 - 200;
  std::mutex::~mutex((std::mutex *)(a1 - 72));
  v3 = *(_QWORD *)(v2 + 72);
  if (v3)
  {
    *(_QWORD *)(a1 - 120) = v3;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 - 104) + 40))(*(_QWORD *)(a1 - 104), v3, *(_QWORD *)(a1 - 112) - v3);
  }
  v4 = *(std::__shared_weak_count **)(a1 - 168);
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::Ribbon::DefaultVbo>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E04B8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::Ribbon::DefaultVbo>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E04B8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::Ribbon::DefaultVbo>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void md::Ribbons::RibbonLayer<md::TransitDisplayConnectionRibbonDescriptor>::~RibbonLayer(_QWORD *a1)
{
  md::Ribbons::RibbonLayer<md::TransitDisplayConnectionRibbonDescriptor>::~RibbonLayer(a1);
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *md::Ribbons::RibbonLayer<md::TransitDisplayConnectionRibbonDescriptor>::~RibbonLayer(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;

  *a1 = &off_1E42AF528;
  v2 = (_QWORD *)a1[1];
  v3 = (_QWORD *)a1[2];
  while (v2 != v3)
  {
    if (*v2)
      (*(void (**)(_QWORD))(*(_QWORD *)*v2 + 8))(*v2);
    ++v2;
  }
  v4 = (_QWORD *)a1[4];
  v5 = (_QWORD *)a1[5];
  while (v4 != v5)
  {
    if (*v4)
      (*(void (**)(_QWORD))(*(_QWORD *)*v4 + 8))(*v4);
    ++v4;
  }
  v6 = a1[10];
  a1[10] = 0;
  if (v6)
  {
    v7 = *(_QWORD *)(v6 + 2584);
    if (v7)
      MEMORY[0x1A1AF4DE8](v7, 0x1000C8000313F17);
    MEMORY[0x1A1AF4E00](v6, 0x1020C4007FF0C4BLL);
  }
  v8 = (void *)a1[4];
  if (v8)
  {
    a1[5] = v8;
    operator delete(v8);
  }
  v9 = (void *)a1[1];
  if (v9)
  {
    a1[2] = v9;
    operator delete(v9);
  }
  return a1;
}

_QWORD *std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>(uint64_t a1, unint64_t a2, _QWORD *a3)
{
  unint64_t v3;
  unint64_t v5;
  unint64_t v7;
  uint8x8_t v8;
  _QWORD **v9;
  _QWORD *v10;
  unint64_t v11;
  uint64_t v12;
  float v13;
  float v14;
  _BOOL8 v15;
  unint64_t v16;
  unint64_t v17;
  size_t prime;
  unint64_t v19;
  uint8x8_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  unint64_t v24;

  v5 = a2;
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = a2;
      if (v7 <= a2)
        v3 = a2 % v7;
    }
    else
    {
      v3 = (v7 - 1) & a2;
    }
    v9 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      v10 = *v9;
      if (*v9)
      {
        if (v8.u32[0] < 2uLL)
        {
          while (1)
          {
            v12 = v10[1];
            if (v12 == a2)
            {
              if (v10[2] == a2)
                return v10;
            }
            else if ((v12 & (v7 - 1)) != v3)
            {
              goto LABEL_22;
            }
            v10 = (_QWORD *)*v10;
            if (!v10)
              goto LABEL_22;
          }
        }
        do
        {
          v11 = v10[1];
          if (v11 == a2)
          {
            if (v10[2] == a2)
              return v10;
          }
          else
          {
            if (v11 >= v7)
              v11 %= v7;
            if (v11 != v3)
              break;
          }
          v10 = (_QWORD *)*v10;
        }
        while (v10);
      }
    }
  }
LABEL_22:
  v10 = operator new(0x20uLL);
  *v10 = 0;
  v10[1] = v5;
  v10[2] = *a3;
  v10[3] = 0;
  v13 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v14 = *(float *)(a1 + 32);
  if (v7 && (float)(v14 * (float)v7) >= v13)
  {
    v5 = v3;
  }
  else
  {
    v15 = 1;
    if (v7 >= 3)
      v15 = (v7 & (v7 - 1)) != 0;
    v16 = v15 | (2 * v7);
    v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17)
      prime = v17;
    else
      prime = v16;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v7 = *(_QWORD *)(a1 + 8);
    }
    if (prime > v7)
      goto LABEL_35;
    if (prime < v7)
    {
      v19 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v7 < 3 || (v20 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v20.i16[0] = vaddlv_u8(v20), v20.u32[0] > 1uLL))
      {
        v19 = std::__next_prime(v19);
      }
      else
      {
        v21 = 1 << -(char)__clz(v19 - 1);
        if (v19 >= 2)
          v19 = v21;
      }
      if (prime <= v19)
        prime = v19;
      if (prime < v7)
LABEL_35:
        std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>(a1, prime);
    }
    v7 = *(_QWORD *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v5)
        v5 %= v7;
    }
    else
    {
      v5 &= v7 - 1;
    }
  }
  v22 = *(_QWORD *)a1;
  v23 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v5);
  if (v23)
  {
    *v10 = *v23;
LABEL_58:
    *v23 = v10;
    goto LABEL_59;
  }
  *v10 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v10;
  *(_QWORD *)(v22 + 8 * v5) = a1 + 16;
  if (*v10)
  {
    v24 = *(_QWORD *)(*v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v24 >= v7)
        v24 %= v7;
    }
    else
    {
      v24 &= v7 - 1;
    }
    v23 = (_QWORD *)(*(_QWORD *)a1 + 8 * v24);
    goto LABEL_58;
  }
LABEL_59:
  ++*(_QWORD *)(a1 + 24);
  return v10;
}

void sub_19F9262AC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long>>>::__emplace_unique_key_args<unsigned long long,std::pair<unsigned long long,unsigned long>>(uint64_t a1, unint64_t a2, __n128 a3)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;
  uint8x8_t v7;
  _QWORD *v8;
  _QWORD *v9;
  unint64_t v10;
  uint64_t v11;
  __n128 *v13;
  float v14;
  float v15;
  _BOOL8 v16;
  unint64_t v17;
  unint64_t v18;
  size_t prime;
  unint64_t v20;
  uint8x8_t v21;
  uint64_t v22;
  uint64_t v23;
  __n128 **v24;
  unint64_t v25;

  v4 = a2;
  v6 = *(_QWORD *)(a1 + 8);
  if (v6)
  {
    v7 = (uint8x8_t)vcnt_s8((int8x8_t)v6);
    v7.i16[0] = vaddlv_u8(v7);
    if (v7.u32[0] > 1uLL)
    {
      v3 = a2;
      if (v6 <= a2)
        v3 = a2 % v6;
    }
    else
    {
      v3 = (v6 - 1) & a2;
    }
    v8 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
    if (v8)
    {
      v9 = (_QWORD *)*v8;
      if (v9)
      {
        if (v7.u32[0] < 2uLL)
        {
          while (1)
          {
            v11 = v9[1];
            if (v11 == a2)
            {
              if (v9[2] == a2)
                return 0;
            }
            else if ((v11 & (v6 - 1)) != v3)
            {
              goto LABEL_23;
            }
            v9 = (_QWORD *)*v9;
            if (!v9)
              goto LABEL_23;
          }
        }
        do
        {
          v10 = v9[1];
          if (v10 == a2)
          {
            if (v9[2] == a2)
              return 0;
          }
          else
          {
            if (v10 >= v6)
              v10 %= v6;
            if (v10 != v3)
              break;
          }
          v9 = (_QWORD *)*v9;
        }
        while (v9);
      }
    }
  }
LABEL_23:
  v13 = (__n128 *)operator new(0x20uLL);
  v13->n128_u64[0] = 0;
  v13->n128_u64[1] = v4;
  v13[1] = a3;
  v14 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v15 = *(float *)(a1 + 32);
  if (v6 && (float)(v15 * (float)v6) >= v14)
  {
    v4 = v3;
  }
  else
  {
    v16 = 1;
    if (v6 >= 3)
      v16 = (v6 & (v6 - 1)) != 0;
    v17 = v16 | (2 * v6);
    v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18)
      prime = v18;
    else
      prime = v17;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v6 = *(_QWORD *)(a1 + 8);
    }
    if (prime > v6)
      goto LABEL_36;
    if (prime < v6)
    {
      v20 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v6 < 3 || (v21 = (uint8x8_t)vcnt_s8((int8x8_t)v6), v21.i16[0] = vaddlv_u8(v21), v21.u32[0] > 1uLL))
      {
        v20 = std::__next_prime(v20);
      }
      else
      {
        v22 = 1 << -(char)__clz(v20 - 1);
        if (v20 >= 2)
          v20 = v22;
      }
      if (prime <= v20)
        prime = v20;
      if (prime < v6)
LABEL_36:
        std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>(a1, prime);
    }
    v6 = *(_QWORD *)(a1 + 8);
    if ((v6 & (v6 - 1)) != 0)
    {
      if (v6 <= v4)
        v4 %= v6;
    }
    else
    {
      v4 &= v6 - 1;
    }
  }
  v23 = *(_QWORD *)a1;
  v24 = *(__n128 ***)(*(_QWORD *)a1 + 8 * v4);
  if (v24)
  {
    v13->n128_u64[0] = (unint64_t)*v24;
LABEL_59:
    *v24 = v13;
    goto LABEL_60;
  }
  v13->n128_u64[0] = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v13;
  *(_QWORD *)(v23 + 8 * v4) = a1 + 16;
  if (v13->n128_u64[0])
  {
    v25 = *(_QWORD *)(v13->n128_u64[0] + 8);
    if ((v6 & (v6 - 1)) != 0)
    {
      if (v25 >= v6)
        v25 %= v6;
    }
    else
    {
      v25 &= v6 - 1;
    }
    v24 = (__n128 **)(*(_QWORD *)a1 + 8 * v25);
    goto LABEL_59;
  }
LABEL_60:
  ++*(_QWORD *)(a1 + 24);
  return 1;
}

void sub_19F926598(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<md::TransitOrphanNode>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DBA58;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<md::TransitOrphanNode>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DBA58;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<md::TransitOrphanNode>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__shared_ptr_emplace<md::TransitParentNode>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DBA90;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<md::TransitParentNode>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DBA90;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<md::TransitParentNode>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__shared_ptr_emplace<md::TransitConnectedNode>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DC628;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<md::TransitConnectedNode>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DC628;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<md::TransitConnectedNode>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

md::TransitLink *md::TransitLink::TransitLink(md::TransitLink *this, const md::TransitLink *a2)
{
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  char *v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  _BYTE *v13;
  _BYTE *v14;
  int64_t v15;
  char *v16;
  size_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  _BYTE *v23;
  _BYTE *v24;
  int64_t v25;
  char *v26;
  char *v27;
  const md::TransitLink *v28;
  __int128 v29;
  char v30;
  uint64_t *v31;
  size_t prime;
  _QWORD *v33;
  _QWORD *v34;
  unint64_t v35;
  unint64_t v36;
  uint8x8_t v37;
  _QWORD *v38;
  _QWORD *v39;
  unint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  float v43;
  float v44;
  _BOOL8 v45;
  unint64_t v46;
  unint64_t v47;
  size_t v48;
  unint64_t v49;
  uint8x8_t v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  unint64_t v54;
  __int128 v55;
  unint64_t *v57;
  _QWORD *v58;
  _QWORD *v59;
  _QWORD *v60;
  char *v61;
  BOOL v62;
  unint64_t v63;
  _QWORD *v64;
  _QWORD *v65;
  const md::TransitLink *v66;
  unint64_t v67;
  _OWORD *v68;
  uint64_t v69;
  const md::TransitLink *v70;
  int8x8_t v71;
  BOOL v72;
  unint64_t v73;
  uint8x8_t v74;
  uint64_t v75;

  *(_OWORD *)this = *(_OWORD *)a2;
  v3 = *((_QWORD *)a2 + 2);
  *((_QWORD *)this + 2) = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = *((_QWORD *)a2 + 4);
  *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
  *((_QWORD *)this + 4) = v6;
  v7 = (char *)this + 24;
  if (v6)
  {
    v8 = (unint64_t *)(v6 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  v10 = *((_QWORD *)a2 + 6);
  *((_QWORD *)this + 5) = *((_QWORD *)a2 + 5);
  *((_QWORD *)this + 6) = v10;
  if (v10)
  {
    v11 = (unint64_t *)(v10 + 8);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  *((_QWORD *)this + 7) = 0;
  *((_QWORD *)this + 8) = 0;
  *((_QWORD *)this + 9) = 0;
  v14 = (_BYTE *)*((_QWORD *)a2 + 7);
  v13 = (_BYTE *)*((_QWORD *)a2 + 8);
  v15 = v13 - v14;
  if (v13 != v14)
  {
    if (0xAAAAAAAAAAAAAAABLL * (v15 >> 5) >= 0x2AAAAAAAAAAAAABLL)
      abort();
    v16 = (char *)operator new(v15);
    *((_QWORD *)this + 7) = v16;
    *((_QWORD *)this + 8) = v16;
    *((_QWORD *)this + 9) = &v16[32 * (v15 >> 5)];
    v17 = 96 * ((v15 - 96) / 0x60uLL) + 96;
    memcpy(v16, v14, v17);
    *((_QWORD *)this + 8) = &v16[v17];
  }
  *((_QWORD *)this + 10) = 0;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  v18 = (char *)*((_QWORD *)a2 + 10);
  v19 = (char *)*((_QWORD *)a2 + 11);
  v20 = v19 - v18;
  if (v19 != v18)
  {
    if (v20 < 0)
      abort();
    v21 = operator new(v19 - v18);
    *((_QWORD *)this + 10) = v21;
    *((_QWORD *)this + 12) = &v21[v20 >> 3];
    do
    {
      v22 = *(_QWORD **)v18;
      *v21 = *(_QWORD *)v18;
      if (v22)
        ++*v22;
      v18 += 8;
      ++v21;
    }
    while (v18 != v19);
    *((_QWORD *)this + 11) = v21;
  }
  *((_QWORD *)this + 13) = 0;
  *((_QWORD *)this + 14) = 0;
  *((_QWORD *)this + 15) = 0;
  v24 = (_BYTE *)*((_QWORD *)a2 + 13);
  v23 = (_BYTE *)*((_QWORD *)a2 + 14);
  v25 = v23 - v24;
  if (v23 != v24)
  {
    if (v25 < 0)
      abort();
    v26 = (char *)operator new(v23 - v24);
    *((_QWORD *)this + 13) = v26;
    *((_QWORD *)this + 14) = v26;
    v27 = &v26[8 * (v25 >> 3)];
    *((_QWORD *)this + 15) = v27;
    memcpy(v26, v24, v25);
    *((_QWORD *)this + 14) = v27;
  }
  *((_QWORD *)this + 17) = 0;
  *((_QWORD *)this + 18) = 0;
  *((_QWORD *)this + 16) = (char *)this + 136;
  v28 = (const md::TransitLink *)*((_QWORD *)a2 + 16);
  if (v28 != (const md::TransitLink *)((char *)a2 + 136))
  {
    do
    {
      v57 = (unint64_t *)((char *)v28 + 32);
      v58 = (_QWORD *)*((_QWORD *)this + 17);
      v59 = (_QWORD *)((char *)this + 136);
      if (*((md::TransitLink **)this + 16) == (md::TransitLink *)((char *)this + 136))
        goto LABEL_96;
      v60 = (_QWORD *)*((_QWORD *)this + 17);
      v61 = (char *)this + 136;
      if (v58)
      {
        do
        {
          v59 = v60;
          v60 = (_QWORD *)v60[1];
        }
        while (v60);
      }
      else
      {
        do
        {
          v59 = (_QWORD *)*((_QWORD *)v61 + 2);
          v62 = *v59 == (_QWORD)v61;
          v61 = (char *)v59;
        }
        while (v62);
      }
      v63 = *v57;
      if (v59[4] < *v57)
      {
LABEL_96:
        if (v58)
          v64 = v59;
        else
          v64 = (_QWORD *)((char *)this + 136);
        if (v58)
          v65 = v59 + 1;
        else
          v65 = (_QWORD *)((char *)this + 136);
      }
      else
      {
        v64 = (_QWORD *)((char *)this + 136);
        v65 = (_QWORD *)((char *)this + 136);
        if (v58)
        {
          v65 = (_QWORD *)((char *)this + 136);
          while (1)
          {
            while (1)
            {
              v64 = v58;
              v67 = v58[4];
              if (v63 >= v67)
                break;
              v58 = (_QWORD *)*v64;
              v65 = v64;
              if (!*v64)
                goto LABEL_111;
            }
            if (v67 >= v63)
              break;
            v65 = v64 + 1;
            v58 = (_QWORD *)v64[1];
            if (!v58)
              goto LABEL_111;
          }
        }
      }
      if (*v65)
      {
        v66 = (const md::TransitLink *)*((_QWORD *)v28 + 1);
        if (v66)
          goto LABEL_114;
      }
      else
      {
LABEL_111:
        v68 = operator new(0x30uLL);
        v68[2] = *(_OWORD *)v57;
        *(_QWORD *)v68 = 0;
        *((_QWORD *)v68 + 1) = 0;
        *((_QWORD *)v68 + 2) = v64;
        *v65 = v68;
        v69 = **((_QWORD **)this + 16);
        if (v69)
        {
          *((_QWORD *)this + 16) = v69;
          v68 = (_OWORD *)*v65;
        }
        std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*((uint64_t **)this + 17), (uint64_t *)v68);
        ++*((_QWORD *)this + 18);
        v66 = (const md::TransitLink *)*((_QWORD *)v28 + 1);
        if (v66)
        {
          do
          {
LABEL_114:
            v70 = v66;
            v66 = *(const md::TransitLink **)v66;
          }
          while (v66);
          goto LABEL_89;
        }
      }
      do
      {
        v70 = (const md::TransitLink *)*((_QWORD *)v28 + 2);
        v62 = *(_QWORD *)v70 == (_QWORD)v28;
        v28 = v70;
      }
      while (!v62);
LABEL_89:
      v28 = v70;
    }
    while (v70 != (const md::TransitLink *)((char *)a2 + 136));
  }
  v29 = *(_OWORD *)((char *)a2 + 152);
  v30 = *((_BYTE *)a2 + 168);
  *((_OWORD *)this + 11) = 0u;
  v31 = (uint64_t *)((char *)this + 176);
  *((_BYTE *)this + 168) = v30;
  *(_OWORD *)((char *)this + 152) = v29;
  *((_OWORD *)this + 12) = 0u;
  *((_DWORD *)this + 52) = *((_DWORD *)a2 + 52);
  prime = *((_QWORD *)a2 + 23);
  if (prime == 1)
  {
    prime = 2;
LABEL_26:
    std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>((uint64_t)this + 176, prime);
    goto LABEL_27;
  }
  if ((prime & (prime - 1)) != 0)
  {
    prime = std::__next_prime(*((_QWORD *)a2 + 23));
    v71 = *(int8x8_t *)((char *)this + 184);
    v72 = prime >= *(_QWORD *)&v71;
    if (prime > *(_QWORD *)&v71)
      goto LABEL_26;
  }
  else
  {
    v71 = 0;
    v72 = 1;
    if (prime)
      goto LABEL_26;
  }
  if (!v72)
  {
    v73 = vcvtps_u32_f32((float)*((unint64_t *)this + 25) / *((float *)this + 52));
    if (*(_QWORD *)&v71 < 3uLL || (v74 = (uint8x8_t)vcnt_s8(v71), v74.i16[0] = vaddlv_u8(v74), v74.u32[0] > 1uLL))
    {
      v73 = std::__next_prime(v73);
    }
    else
    {
      v75 = 1 << -(char)__clz(v73 - 1);
      if (v73 >= 2)
        v73 = v75;
    }
    if (prime <= v73)
      prime = v73;
    if (prime < *(_QWORD *)&v71)
      goto LABEL_26;
  }
LABEL_27:
  v33 = (_QWORD *)*((_QWORD *)a2 + 24);
  if (v33)
  {
    v34 = (_QWORD *)((char *)this + 192);
    v35 = *((_QWORD *)this + 23);
    do
    {
      v36 = v33[2];
      if (v35)
      {
        v37 = (uint8x8_t)vcnt_s8((int8x8_t)v35);
        v37.i16[0] = vaddlv_u8(v37);
        if (v37.u32[0] > 1uLL)
        {
          v7 = (char *)v33[2];
          if (v36 >= v35)
            v7 = (char *)(v36 % v35);
        }
        else
        {
          v7 = (char *)((v35 - 1) & v36);
        }
        v38 = *(_QWORD **)(*v31 + 8 * (_QWORD)v7);
        if (v38)
        {
          v39 = (_QWORD *)*v38;
          if (v39)
          {
            if (v37.u32[0] < 2uLL)
            {
              while (1)
              {
                v41 = v39[1];
                if (v41 == v36)
                {
                  if (v39[2] == v36)
                    goto LABEL_87;
                }
                else if ((char *)(v41 & (v35 - 1)) != v7)
                {
                  goto LABEL_49;
                }
                v39 = (_QWORD *)*v39;
                if (!v39)
                  goto LABEL_49;
              }
            }
            do
            {
              v40 = v39[1];
              if (v40 == v36)
              {
                if (v39[2] == v36)
                  goto LABEL_87;
              }
              else
              {
                if (v40 >= v35)
                  v40 %= v35;
                if ((char *)v40 != v7)
                  break;
              }
              v39 = (_QWORD *)*v39;
            }
            while (v39);
          }
        }
      }
LABEL_49:
      v42 = operator new(0x20uLL);
      *v42 = 0;
      v42[1] = v36;
      *((_OWORD *)v42 + 1) = *((_OWORD *)v33 + 1);
      v43 = (float)(unint64_t)(*((_QWORD *)this + 25) + 1);
      v44 = *((float *)this + 52);
      if (!v35 || (float)(v44 * (float)v35) < v43)
      {
        v45 = (v35 & (v35 - 1)) != 0;
        if (v35 < 3)
          v45 = 1;
        v46 = v45 | (2 * v35);
        v47 = vcvtps_u32_f32(v43 / v44);
        if (v46 <= v47)
          v48 = v47;
        else
          v48 = v46;
        if (v48 == 1)
        {
          v48 = 2;
        }
        else if ((v48 & (v48 - 1)) != 0)
        {
          v48 = std::__next_prime(v48);
          v35 = *((_QWORD *)this + 23);
        }
        if (v48 > v35)
          goto LABEL_61;
        if (v48 < v35)
        {
          v49 = vcvtps_u32_f32((float)*((unint64_t *)this + 25) / *((float *)this + 52));
          if (v35 < 3 || (v50 = (uint8x8_t)vcnt_s8((int8x8_t)v35), v50.i16[0] = vaddlv_u8(v50), v50.u32[0] > 1uLL))
          {
            v49 = std::__next_prime(v49);
          }
          else
          {
            v51 = 1 << -(char)__clz(v49 - 1);
            if (v49 >= 2)
              v49 = v51;
          }
          if (v48 <= v49)
            v48 = v49;
          if (v48 < v35)
LABEL_61:
            std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>((uint64_t)this + 176, v48);
        }
        v35 = *((_QWORD *)this + 23);
        if ((v35 & (v35 - 1)) != 0)
        {
          if (v36 >= v35)
            v7 = (char *)(v36 % v35);
          else
            v7 = (char *)v36;
        }
        else
        {
          v7 = (char *)((v35 - 1) & v36);
        }
      }
      v52 = *v31;
      v53 = *(_QWORD **)(*v31 + 8 * (_QWORD)v7);
      if (v53)
      {
        *v42 = *v53;
      }
      else
      {
        *v42 = *v34;
        *v34 = v42;
        *(_QWORD *)(v52 + 8 * (_QWORD)v7) = v34;
        if (!*v42)
          goto LABEL_86;
        v54 = *(_QWORD *)(*v42 + 8);
        if ((v35 & (v35 - 1)) != 0)
        {
          if (v54 >= v35)
            v54 %= v35;
        }
        else
        {
          v54 &= v35 - 1;
        }
        v53 = (_QWORD *)(*v31 + 8 * v54);
      }
      *v53 = v42;
LABEL_86:
      ++*((_QWORD *)this + 25);
LABEL_87:
      v33 = (_QWORD *)*v33;
    }
    while (v33);
  }
  v55 = *(_OWORD *)((char *)a2 + 216);
  *(_OWORD *)((char *)this + 229) = *(_OWORD *)((char *)a2 + 229);
  *(_OWORD *)((char *)this + 216) = v55;
  return this;
}

void sub_19F926DC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, void **a10, void **a11, uint64_t a12, uint64_t a13)
{
  md::components::Material *v13;
  _QWORD **v14;
  uint64_t v15;
  void *v17;
  void *v18;

  std::unordered_set<md::MuninJunction const*>::~unordered_set[abi:nn180100](v15);
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*v14);
  v17 = *a9;
  if (*a9)
  {
    *((_QWORD *)v13 + 14) = v17;
    operator delete(v17);
  }
  std::vector<geo::fast_shared_ptr<md::TransitLineSegment,std::allocator>>::~vector[abi:nn180100](a10);
  v18 = *a11;
  if (*a11)
  {
    *((_QWORD *)v13 + 8) = v18;
    operator delete(v18);
  }
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](a12);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](a13);
  md::components::Material::~Material(v13);
  _Unwind_Resume(a1);
}

uint64_t std::__split_buffer<md::TransitLink>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 248;
    md::TransitLink::~TransitLink((md::TransitLink *)(i - 248));
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void **std::vector<geo::fast_shared_ptr<md::TransitLineSegment,std::allocator>>::~vector[abi:nn180100](void **a1)
{
  char *v2;
  char *v3;
  void *v4;
  char *v5;
  _QWORD *v6;
  _QWORD *v7;

  v2 = (char *)*a1;
  if (*a1)
  {
    v3 = (char *)a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      v5 = (char *)a1[1];
      do
      {
        v7 = (_QWORD *)*((_QWORD *)v5 - 1);
        v5 -= 8;
        v6 = v7;
        if (v7)
        {
          if ((*v6)-- == 1)
          {
            operator delete(v6);
            *((_QWORD *)v3 - 1) = 0;
          }
        }
        v3 = v5;
      }
      while (v5 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

uint64_t std::construct_at[abi:nn180100]<md::TransitLine,md::TransitLine,md::TransitLine*>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  _DWORD *v24;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = *(_OWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = v7;
  *(_OWORD *)(a1 + 36) = *(_OWORD *)(a2 + 36);
  v8 = *(_QWORD *)(a2 + 52);
  *(_DWORD *)(a1 + 60) = *(_DWORD *)(a2 + 60);
  *(_QWORD *)(a1 + 52) = v8;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  v9 = *(_QWORD *)(a2 + 64);
  v10 = *(_QWORD *)(a2 + 72);
  v11 = v10 - v9;
  if (v10 != v9)
  {
    v12 = 0xD37A6F4DE9BD37A7 * (v11 >> 3);
    if (v12 >= 0x1642C8590B21643)
      abort();
    v13 = (char *)operator new(v11);
    *(_QWORD *)(a1 + 64) = v13;
    *(_QWORD *)(a1 + 72) = v13;
    *(_QWORD *)(a1 + 80) = &v13[184 * v12];
    v14 = v13;
    do
    {
      v15 = *(_QWORD *)(v9 + 8);
      *(_QWORD *)v14 = *(_QWORD *)v9;
      *((_QWORD *)v14 + 1) = v15;
      if (v15)
      {
        v16 = (unint64_t *)(v15 + 8);
        do
          v17 = __ldxr(v16);
        while (__stxr(v17 + 1, v16));
      }
      *((_OWORD *)v14 + 1) = *(_OWORD *)(v9 + 16);
      *((_OWORD *)v14 + 2) = *(_OWORD *)(v9 + 32);
      *((_OWORD *)v14 + 3) = *(_OWORD *)(v9 + 48);
      v18 = *(_OWORD *)(v9 + 64);
      v19 = *(_OWORD *)(v9 + 80);
      *(_OWORD *)(v14 + 89) = *(_OWORD *)(v9 + 89);
      *((_OWORD *)v14 + 4) = v18;
      *((_OWORD *)v14 + 5) = v19;
      *((_QWORD *)v14 + 14) = 0;
      *((_QWORD *)v14 + 15) = 0;
      v20 = *(_QWORD *)(v9 + 136);
      *((_QWORD *)v14 + 16) = 0;
      *((_QWORD *)v14 + 17) = v20;
      v21 = *(char **)(v9 + 112);
      v22 = *(char **)(v9 + 120);
      v23 = v22 - v21;
      if (v22 != v21)
      {
        if (v23 < 0)
          abort();
        v24 = (_DWORD *)(*(uint64_t (**)(uint64_t, int64_t, uint64_t))(*(_QWORD *)v20 + 16))(v20, v22 - v21, 4);
        *((_QWORD *)v14 + 14) = v24;
        *((_QWORD *)v14 + 16) = &v24[v23 >> 2];
        do
        {
          if (v24)
            *v24 = *(_DWORD *)v21;
          v21 += 4;
          ++v24;
        }
        while (v21 != v22);
        *((_QWORD *)v14 + 15) = v24;
      }
      *((_DWORD *)v14 + 36) = *(_DWORD *)(v9 + 144);
      *(_OWORD *)(v14 + 152) = *(_OWORD *)(v9 + 152);
      *((_DWORD *)v14 + 42) = *(_DWORD *)(v9 + 168);
      *((_DWORD *)v14 + 44) = *(_DWORD *)(v9 + 176);
      v9 += 184;
      v14 += 184;
    }
    while (v9 != v10);
    *(_QWORD *)(a1 + 72) = v14;
  }
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  return a1;
}

void sub_19F927120(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  v3 = *(std::__shared_weak_count **)(v1 + 8);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__split_buffer<md::TransitLine>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 104;
    std::__destroy_at[abi:nn180100]<md::TransitLine,0>((_QWORD *)(i - 104));
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t ggl::ConstantDataTyped<ggl::TransitLineRibbon::Options>::~ConstantDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  return a1;
}

void ggl::ConstantDataTyped<ggl::TransitLineRibbon::Options>::~ConstantDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::TransitLineRibbon::Options>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E1CC8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::TransitLineRibbon::Options>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E1CC8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::TransitLineRibbon::Options>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t ggl::ConstantDataTyped<ggl::TransitLineRibbon::Style>::~ConstantDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  return a1;
}

void ggl::ConstantDataTyped<ggl::TransitLineRibbon::Style>::~ConstantDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::TransitLineRibbon::Style>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E1C90;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::TransitLineRibbon::Style>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E1C90;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::TransitLineRibbon::Style>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t ggl::ConstantDataTyped<ggl::TransitLineRibbon::ClipParams>::~ConstantDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  return a1;
}

void ggl::ConstantDataTyped<ggl::TransitLineRibbon::ClipParams>::~ConstantDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::TransitLineRibbon::ClipParams>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E1C20;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::TransitLineRibbon::ClipParams>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E1C20;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::TransitLineRibbon::ClipParams>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t md::TransitTileData::TransitTileData(uint64_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4, void *a5, uint64_t a6, _QWORD *a7, uint64_t a8, float a9)
{
  id v17;
  uint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  id v24;
  void *v25;
  uint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  unint64_t *v31;
  unint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  unint64_t v39;
  double v40;
  double v41;
  double v42;
  long double v43;
  long double v44;
  long double v45;
  long double v46;
  long double v47;
  long double v48;
  long double v49;
  double v50;
  long double v51;
  _QWORD *v52;
  uint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *p_shared_owners;
  unint64_t v56;
  _QWORD *v57;
  uint64_t v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  _QWORD *v62;
  uint64_t v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  uint64_t v67;
  unint64_t v68;
  unint64_t v69;
  _QWORD *v70;
  uint64_t v71;
  std::__shared_weak_count *v72;
  unint64_t *v73;
  unint64_t v74;
  uint64_t v75;
  unint64_t v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  _QWORD *v81;
  _QWORD *v82;
  uint64_t *v83;
  uint64_t v84;
  std::__shared_weak_count *v85;
  unint64_t *v86;
  unint64_t v87;
  unint64_t *v88;
  unint64_t v89;
  uint64_t v90;
  uint64_t v91;
  std::__shared_weak_count *v92;
  unint64_t *v93;
  unint64_t v94;
  uint64_t v95;
  uint64_t v96;
  std::__shared_weak_count *v97;
  unint64_t *v98;
  unint64_t v99;
  _QWORD *v100;
  uint64_t v101;
  _QWORD *v102;
  uint64_t v103;
  unint64_t *v104;
  unint64_t v105;
  std::__shared_weak_count *v106;
  unint64_t *v107;
  unint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  unint64_t *v113;
  unint64_t v114;
  std::__shared_weak_count *v115;
  unint64_t *v116;
  unint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  unint64_t *v122;
  unint64_t v123;
  std::__shared_weak_count *v124;
  unint64_t *v125;
  unint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  _QWORD *v130;
  _QWORD *v131;
  uint64_t *v132;
  uint64_t v133;
  std::__shared_weak_count *v134;
  unint64_t *v135;
  unint64_t v136;
  unint64_t *v137;
  unint64_t v138;
  uint64_t v139;
  uint64_t v140;
  std::__shared_weak_count *v141;
  unint64_t *v142;
  unint64_t v143;
  uint64_t v144;
  uint64_t v145;
  std::__shared_weak_count *v146;
  unint64_t *v147;
  unint64_t v148;
  _QWORD *v149;
  uint64_t v150;
  _QWORD *v151;
  uint64_t v152;
  unint64_t *v153;
  unint64_t v154;
  std::__shared_weak_count *v155;
  unint64_t *v156;
  unint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  unint64_t *v162;
  unint64_t v163;
  std::__shared_weak_count *v164;
  unint64_t *v165;
  unint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  unint64_t *v171;
  unint64_t v172;
  std::__shared_weak_count *v173;
  unint64_t *v174;
  unint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  _QWORD *v179;
  _QWORD *v180;
  uint64_t *v181;
  uint64_t v182;
  std::__shared_weak_count *v183;
  unint64_t *v184;
  unint64_t v185;
  unint64_t *v186;
  unint64_t v187;
  uint64_t v188;
  uint64_t v189;
  std::__shared_weak_count *v190;
  unint64_t *v191;
  unint64_t v192;
  uint64_t v193;
  uint64_t v194;
  std::__shared_weak_count *v195;
  unint64_t *v196;
  unint64_t v197;
  _QWORD *v198;
  uint64_t v199;
  _QWORD *v200;
  uint64_t v201;
  unint64_t *v202;
  unint64_t v203;
  std::__shared_weak_count *v204;
  unint64_t *v205;
  unint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  unint64_t *v211;
  unint64_t v212;
  std::__shared_weak_count *v213;
  unint64_t *v214;
  unint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  unint64_t *v220;
  unint64_t v221;
  std::__shared_weak_count *v222;
  unint64_t *v223;
  unint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  _QWORD *v228;
  _QWORD *v229;
  uint64_t *v230;
  uint64_t v231;
  std::__shared_weak_count *v232;
  unint64_t *v233;
  unint64_t v234;
  unint64_t *v235;
  unint64_t v236;
  uint64_t v237;
  uint64_t v238;
  std::__shared_weak_count *v239;
  unint64_t *v240;
  unint64_t v241;
  uint64_t v242;
  uint64_t v243;
  std::__shared_weak_count *v244;
  unint64_t *v245;
  unint64_t v246;
  _QWORD *v247;
  uint64_t v248;
  _QWORD *v249;
  uint64_t v250;
  unint64_t *v251;
  unint64_t v252;
  std::__shared_weak_count *v253;
  unint64_t *v254;
  unint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  unint64_t *v260;
  unint64_t v261;
  std::__shared_weak_count *v262;
  unint64_t *v263;
  unint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  unint64_t *v269;
  unint64_t v270;
  std::__shared_weak_count *v271;
  unint64_t *v272;
  unint64_t v273;
  uint64_t v274;

  v17 = a5;
  md::MapTileData::MapTileData(a1, a2, a8, (uint64_t)a3, 1);
  *(_QWORD *)a1 = &off_1E4290FB0;
  *(_QWORD *)(a1 + 632) = &unk_1E4290FF0;
  v18 = a3[1];
  *(_QWORD *)(a1 + 720) = *a3;
  *(_QWORD *)(a1 + 728) = v18;
  if (v18)
  {
    v19 = (unint64_t *)(v18 + 8);
    do
      v20 = __ldxr(v19);
    while (__stxr(v20 + 1, v19));
  }
  v21 = a4[1];
  *(_QWORD *)(a1 + 736) = *a4;
  *(_QWORD *)(a1 + 744) = v21;
  if (v21)
  {
    v22 = (unint64_t *)(v21 + 8);
    do
      v23 = __ldxr(v22);
    while (__stxr(v23 + 1, v22));
  }
  v24 = v17;
  v25 = v24;
  *(_QWORD *)(a1 + 752) = &off_1E42B4D50;
  *(_QWORD *)(a1 + 760) = v24;
  *(_QWORD *)(a1 + 776) = a6;
  v26 = a7[1];
  *(_QWORD *)(a1 + 784) = *a7;
  *(_QWORD *)(a1 + 792) = v26;
  if (v26)
  {
    v27 = (unint64_t *)(v26 + 8);
    do
      v28 = __ldxr(v27);
    while (__stxr(v28 + 1, v27));
  }
  v29 = (_QWORD *)objc_msgSend(v24, "dataOverrideManager");
  v30 = v29[1];
  *(_QWORD *)(a1 + 800) = *v29;
  *(_QWORD *)(a1 + 808) = v30;
  if (v30)
  {
    v31 = (unint64_t *)(v30 + 8);
    do
      v32 = __ldxr(v31);
    while (__stxr(v32 + 1, v31));
  }
  v33 = operator new(0xE8uLL);
  v33[1] = 0;
  v33[2] = 0;
  *v33 = &off_1E42E2278;
  v34 = ggl::BufferData::BufferData((uint64_t)(v33 + 3), qword_1EE54ADE0, 2, 1, 6, 1);
  v33[28] = ggl::Tile::View::reflection(void)::reflection;
  v33[3] = &off_1E42B97B0;
  *(_QWORD *)(a1 + 816) = v34;
  *(_QWORD *)(a1 + 824) = v33;
  v35 = operator new(0xE8uLL);
  v35[1] = 0;
  v35[2] = 0;
  *v35 = &off_1E42E22E8;
  v36 = ggl::BufferData::BufferData((uint64_t)(v35 + 3), qword_1EE54AFA0, 2, 1, 6, 1);
  v35[28] = ggl::Tile::Transform::reflection(void)::reflection;
  v35[3] = &off_1E42B97F0;
  *(_QWORD *)(a1 + 832) = v36;
  *(_QWORD *)(a1 + 840) = v35;
  v37 = operator new(0xE8uLL);
  v37[1] = 0;
  v37[2] = 0;
  *v37 = &off_1E42E1C20;
  v38 = ggl::BufferData::BufferData((uint64_t)(v37 + 3), qword_1EE5535A8, 2, 1, 6, 1);
  v37[28] = ggl::TransitLineRibbon::ClipParams::reflection(void)::reflection;
  v37[3] = &off_1E42B93F0;
  *(_QWORD *)(a1 + 848) = v38;
  *(_QWORD *)(a1 + 856) = v37;
  *(_OWORD *)(a1 + 864) = 0u;
  *(_OWORD *)(a1 + 880) = 0u;
  *(_OWORD *)(a1 + 896) = 0u;
  *(_QWORD *)(a1 + 912) = a1 + 912;
  *(_QWORD *)(a1 + 920) = a1 + 912;
  *(_QWORD *)(a1 + 1208) = 0;
  *(_QWORD *)(a1 + 1200) = 0;
  *(_OWORD *)(a1 + 928) = 0u;
  *(_OWORD *)(a1 + 944) = 0u;
  *(_OWORD *)(a1 + 960) = 0u;
  *(_OWORD *)(a1 + 976) = 0u;
  *(_OWORD *)(a1 + 992) = 0u;
  *(_OWORD *)(a1 + 1008) = 0u;
  *(_OWORD *)(a1 + 1024) = 0u;
  *(_OWORD *)(a1 + 1040) = 0u;
  *(_OWORD *)(a1 + 1056) = 0u;
  *(_OWORD *)(a1 + 1072) = 0u;
  *(_OWORD *)(a1 + 1088) = 0u;
  *(_OWORD *)(a1 + 1104) = 0u;
  *(_OWORD *)(a1 + 1120) = 0u;
  *(_OWORD *)(a1 + 1136) = 0u;
  *(_OWORD *)(a1 + 1152) = 0u;
  *(_OWORD *)(a1 + 1168) = 0u;
  *(_QWORD *)(a1 + 1184) = 0;
  *(_QWORD *)(a1 + 1192) = a1 + 1200;
  *(_OWORD *)(a1 + 1256) = 0u;
  *(_OWORD *)(a1 + 1272) = 0u;
  *(_OWORD *)(a1 + 1216) = 0u;
  *(_OWORD *)(a1 + 1232) = 0u;
  *(_DWORD *)(a1 + 1288) = 1065353216;
  *(_QWORD *)(a1 + 1336) = 0;
  *(_DWORD *)(a1 + 1344) = 1065353216;
  *(float *)(a1 + 1348) = a9;
  *(_DWORD *)(a1 + 1352) = 0;
  *(_DWORD *)(a1 + 1364) = -1;
  *(_QWORD *)(a1 + 1356) = 0;
  *(_DWORD *)(a1 + 1368) = 65793;
  v39 = *(unsigned __int8 *)(a1 + 169);
  v40 = 1.0 / (double)(1 << v39);
  v41 = v40 * (double)*(int *)(a1 + 176);
  v42 = (double)((1 << v39) + ~*(_DWORD *)(a1 + 172));
  *(double *)(a1 + 1296) = v41;
  *(double *)(a1 + 1304) = v40 * v42;
  *(double *)(a1 + 1312) = v41 + v40;
  *(double *)(a1 + 1320) = v40 * v42 + v40;
  v43 = exp((v42 + 0.5) * v40 * 6.28318531 + -3.14159265);
  v44 = atan(v43) * 114.591559 + -90.0;
  v45 = cos(v44 * 0.034906585) * -559.82 + 111132.92;
  v46 = v45 + cos(v44 * 0.0698131701) * 1.175;
  v47 = v46 + cos(v44 * 0.104719755) * -0.0023;
  v48 = v44 * 0.00872664626;
  v49 = tan(v44 * 0.00872664626 + 0.78103484);
  v50 = log(v49);
  v51 = tan(v48 + 0.789761487);
  *(long double *)(a1 + 1328) = fabs((log(v51) - v50) * 0.159154943) / v47;
  if (v39 <= 0xA)
    *(_DWORD *)(a1 + 1252) = 16843009;
  v52 = operator new(0xE8uLL);
  v52[1] = 0;
  v52[2] = 0;
  *v52 = &off_1E42E1C90;
  v53 = ggl::BufferData::BufferData((uint64_t)(v52 + 3), qword_1EE553508, 2, 1, 6, 1);
  v52[28] = ggl::TransitLineRibbon::Style::reflection(void)::reflection;
  v52[3] = &off_1E42B9430;
  *(_QWORD *)(a1 + 1128) = v53;
  v54 = *(std::__shared_weak_count **)(a1 + 1136);
  *(_QWORD *)(a1 + 1136) = v52;
  if (v54)
  {
    p_shared_owners = (unint64_t *)&v54->__shared_owners_;
    do
      v56 = __ldaxr(p_shared_owners);
    while (__stlxr(v56 - 1, p_shared_owners));
    if (!v56)
    {
      ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
      std::__shared_weak_count::__release_weak(v54);
    }
  }
  v57 = operator new(0xE8uLL);
  v57[1] = 0;
  v57[2] = 0;
  *v57 = &off_1E42E1C90;
  v58 = ggl::BufferData::BufferData((uint64_t)(v57 + 3), qword_1EE553508, 2, 1, 6, 1);
  v57[28] = ggl::TransitLineRibbon::Style::reflection(void)::reflection;
  v57[3] = &off_1E42B9430;
  *(_QWORD *)(a1 + 1144) = v58;
  v59 = *(std::__shared_weak_count **)(a1 + 1152);
  *(_QWORD *)(a1 + 1152) = v57;
  if (v59)
  {
    v60 = (unint64_t *)&v59->__shared_owners_;
    do
      v61 = __ldaxr(v60);
    while (__stlxr(v61 - 1, v60));
    if (!v61)
    {
      ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
      std::__shared_weak_count::__release_weak(v59);
    }
  }
  v62 = operator new(0xE8uLL);
  v62[1] = 0;
  v62[2] = 0;
  *v62 = &off_1E42E1CC8;
  v63 = ggl::BufferData::BufferData((uint64_t)(v62 + 3), qword_1EE553548, 2, 1, 6, 1);
  v62[28] = ggl::TransitLineRibbon::Options::reflection(void)::reflection;
  v62[3] = &off_1E42B9450;
  *(_QWORD *)(a1 + 1160) = v63;
  v64 = *(std::__shared_weak_count **)(a1 + 1168);
  *(_QWORD *)(a1 + 1168) = v62;
  if (v64)
  {
    v65 = (unint64_t *)&v64->__shared_owners_;
    do
      v66 = __ldaxr(v65);
    while (__stlxr(v66 - 1, v65));
    if (!v66)
    {
      ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
      std::__shared_weak_count::__release_weak(v64);
    }
  }
  v67 = *(_QWORD *)(a1 + 1160);
  v68 = *(_QWORD *)(v67 + 8);
  v69 = *(_QWORD *)(v67 + 64);
  **(_DWORD **)(v67 + 72) = 1065353216;
  if (v69 > v68)
    v68 = v69;
  *(_QWORD *)(v67 + 56) = 0;
  *(_QWORD *)(v67 + 64) = v68;
  v70 = operator new(0xE8uLL);
  v70[1] = 0;
  v70[2] = 0;
  *v70 = &off_1E42E1CC8;
  v71 = ggl::BufferData::BufferData((uint64_t)(v70 + 3), qword_1EE553548, 2, 1, 6, 1);
  v70[28] = ggl::TransitLineRibbon::Options::reflection(void)::reflection;
  v70[3] = &off_1E42B9450;
  *(_QWORD *)(a1 + 1176) = v71;
  v72 = *(std::__shared_weak_count **)(a1 + 1184);
  *(_QWORD *)(a1 + 1184) = v70;
  if (v72)
  {
    v73 = (unint64_t *)&v72->__shared_owners_;
    do
      v74 = __ldaxr(v73);
    while (__stlxr(v74 - 1, v73));
    if (!v74)
    {
      ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
      std::__shared_weak_count::__release_weak(v72);
    }
  }
  v75 = *(_QWORD *)(a1 + 1176);
  v76 = *(_QWORD *)(v75 + 8);
  v77 = *(_QWORD *)(v75 + 64);
  **(_DWORD **)(v75 + 72) = 1045220557;
  if (v77 > v76)
    v76 = v77;
  *(_QWORD *)(v75 + 56) = 0;
  *(_QWORD *)(v75 + 64) = v76;
  if (*(_QWORD *)(a1 + 720))
  {
    md::TransitTileData::createFeatures((geo::codec::VectorTile **)a1);
    v78 = objc_msgSend(*(id *)(a1 + 760), "highInflationAlphaAtlas");
    *(_DWORD *)(a1 + 1336) = *(_DWORD *)(v78 + 8);
    v79 = *(_QWORD *)(a1 + 1128);
    v80 = *(_QWORD *)(a1 + 1160);
    v81 = (_QWORD *)operator new();
    v82 = v81;
    v83 = *(uint64_t **)(a1 + 776);
    v84 = *v83;
    v85 = (std::__shared_weak_count *)v83[1];
    if (v85)
    {
      v86 = (unint64_t *)&v85->__shared_owners_;
      do
        v87 = __ldxr(v86);
      while (__stxr(v87 + 1, v86));
      ggl::PipelineSetup::PipelineSetup(v81, v84, (uint64_t)v85);
      v88 = (unint64_t *)&v85->__shared_owners_;
      do
        v89 = __ldaxr(v88);
      while (__stlxr(v89 - 1, v88));
      if (!v89)
      {
        ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
        std::__shared_weak_count::__release_weak(v85);
      }
    }
    else
    {
      ggl::PipelineSetup::PipelineSetup(v81, v84, 0);
    }
    *v82 = &off_1E42BA550;
    v90 = v82[8];
    *(_QWORD *)(v90 + 32) = v79;
    *(_QWORD *)(v90 + 40) = 0;
    v91 = v82[20];
    v92 = *(std::__shared_weak_count **)(v91 + 40);
    *(_QWORD *)(v91 + 32) = 0;
    *(_QWORD *)(v91 + 40) = 0;
    if (v92)
    {
      v93 = (unint64_t *)&v92->__shared_owners_;
      do
        v94 = __ldaxr(v93);
      while (__stlxr(v94 - 1, v93));
      if (!v94)
      {
        ((void (*)(std::__shared_weak_count *))v92->__on_zero_shared)(v92);
        std::__shared_weak_count::__release_weak(v92);
      }
    }
    v95 = v82[8];
    *(_QWORD *)(v95 + 48) = v80;
    *(_QWORD *)(v95 + 56) = 0;
    v96 = v82[20];
    v97 = *(std::__shared_weak_count **)(v96 + 56);
    *(_QWORD *)(v96 + 48) = 0;
    *(_QWORD *)(v96 + 56) = 0;
    if (v97)
    {
      v98 = (unint64_t *)&v97->__shared_owners_;
      do
        v99 = __ldaxr(v98);
      while (__stlxr(v99 - 1, v98));
      if (!v99)
      {
        ((void (*)(std::__shared_weak_count *))v97->__on_zero_shared)(v97);
        std::__shared_weak_count::__release_weak(v97);
      }
    }
    *(_QWORD *)v82[12] = *(_QWORD *)(v78 + 16);
    v100 = (_QWORD *)v82[8];
    v101 = *(_QWORD *)(a1 + 816);
    *v100 = v101;
    v100[1] = 0;
    v102 = (_QWORD *)v82[20];
    v103 = *(_QWORD *)(a1 + 824);
    if (v103)
    {
      v104 = (unint64_t *)(v103 + 8);
      do
        v105 = __ldxr(v104);
      while (__stxr(v105 + 1, v104));
    }
    v106 = (std::__shared_weak_count *)v102[1];
    *v102 = v101;
    v102[1] = v103;
    if (v106)
    {
      v107 = (unint64_t *)&v106->__shared_owners_;
      do
        v108 = __ldaxr(v107);
      while (__stlxr(v108 - 1, v107));
      if (!v108)
      {
        ((void (*)(std::__shared_weak_count *))v106->__on_zero_shared)(v106);
        std::__shared_weak_count::__release_weak(v106);
      }
    }
    v109 = v82[8];
    v110 = *(_QWORD *)(a1 + 832);
    *(_QWORD *)(v109 + 16) = v110;
    *(_QWORD *)(v109 + 24) = 0;
    v111 = v82[20];
    v112 = *(_QWORD *)(a1 + 840);
    if (v112)
    {
      v113 = (unint64_t *)(v112 + 8);
      do
        v114 = __ldxr(v113);
      while (__stxr(v114 + 1, v113));
    }
    v115 = *(std::__shared_weak_count **)(v111 + 24);
    *(_QWORD *)(v111 + 16) = v110;
    *(_QWORD *)(v111 + 24) = v112;
    if (v115)
    {
      v116 = (unint64_t *)&v115->__shared_owners_;
      do
        v117 = __ldaxr(v116);
      while (__stlxr(v117 - 1, v116));
      if (!v117)
      {
        ((void (*)(std::__shared_weak_count *))v115->__on_zero_shared)(v115);
        std::__shared_weak_count::__release_weak(v115);
      }
    }
    v118 = v82[8];
    v119 = *(_QWORD *)(a1 + 848);
    *(_QWORD *)(v118 + 64) = v119;
    *(_QWORD *)(v118 + 72) = 0;
    v120 = v82[20];
    v121 = *(_QWORD *)(a1 + 856);
    if (v121)
    {
      v122 = (unint64_t *)(v121 + 8);
      do
        v123 = __ldxr(v122);
      while (__stxr(v123 + 1, v122));
    }
    v124 = *(std::__shared_weak_count **)(v120 + 72);
    *(_QWORD *)(v120 + 64) = v119;
    *(_QWORD *)(v120 + 72) = v121;
    if (v124)
    {
      v125 = (unint64_t *)&v124->__shared_owners_;
      do
        v126 = __ldaxr(v125);
      while (__stlxr(v126 - 1, v125));
      if (!v126)
      {
        ((void (*)(std::__shared_weak_count *))v124->__on_zero_shared)(v124);
        std::__shared_weak_count::__release_weak(v124);
      }
    }
    v127 = *(_QWORD *)(a1 + 1088);
    *(_QWORD *)(a1 + 1088) = v82;
    if (v127)
      (*(void (**)(uint64_t))(*(_QWORD *)v127 + 8))(v127);
    v128 = *(_QWORD *)(a1 + 1128);
    v129 = *(_QWORD *)(a1 + 1176);
    v130 = (_QWORD *)operator new();
    v131 = v130;
    v132 = *(uint64_t **)(a1 + 776);
    v133 = *v132;
    v134 = (std::__shared_weak_count *)v132[1];
    if (v134)
    {
      v135 = (unint64_t *)&v134->__shared_owners_;
      do
        v136 = __ldxr(v135);
      while (__stxr(v136 + 1, v135));
      ggl::PipelineSetup::PipelineSetup(v130, v133, (uint64_t)v134);
      v137 = (unint64_t *)&v134->__shared_owners_;
      do
        v138 = __ldaxr(v137);
      while (__stlxr(v138 - 1, v137));
      if (!v138)
      {
        ((void (*)(std::__shared_weak_count *))v134->__on_zero_shared)(v134);
        std::__shared_weak_count::__release_weak(v134);
      }
    }
    else
    {
      ggl::PipelineSetup::PipelineSetup(v130, v133, 0);
    }
    *v131 = &off_1E42BA550;
    v139 = v131[8];
    *(_QWORD *)(v139 + 32) = v128;
    *(_QWORD *)(v139 + 40) = 0;
    v140 = v131[20];
    v141 = *(std::__shared_weak_count **)(v140 + 40);
    *(_QWORD *)(v140 + 32) = 0;
    *(_QWORD *)(v140 + 40) = 0;
    if (v141)
    {
      v142 = (unint64_t *)&v141->__shared_owners_;
      do
        v143 = __ldaxr(v142);
      while (__stlxr(v143 - 1, v142));
      if (!v143)
      {
        ((void (*)(std::__shared_weak_count *))v141->__on_zero_shared)(v141);
        std::__shared_weak_count::__release_weak(v141);
      }
    }
    v144 = v131[8];
    *(_QWORD *)(v144 + 48) = v129;
    *(_QWORD *)(v144 + 56) = 0;
    v145 = v131[20];
    v146 = *(std::__shared_weak_count **)(v145 + 56);
    *(_QWORD *)(v145 + 48) = 0;
    *(_QWORD *)(v145 + 56) = 0;
    if (v146)
    {
      v147 = (unint64_t *)&v146->__shared_owners_;
      do
        v148 = __ldaxr(v147);
      while (__stlxr(v148 - 1, v147));
      if (!v148)
      {
        ((void (*)(std::__shared_weak_count *))v146->__on_zero_shared)(v146);
        std::__shared_weak_count::__release_weak(v146);
      }
    }
    *(_QWORD *)v131[12] = *(_QWORD *)(v78 + 16);
    v149 = (_QWORD *)v131[8];
    v150 = *(_QWORD *)(a1 + 816);
    *v149 = v150;
    v149[1] = 0;
    v151 = (_QWORD *)v131[20];
    v152 = *(_QWORD *)(a1 + 824);
    if (v152)
    {
      v153 = (unint64_t *)(v152 + 8);
      do
        v154 = __ldxr(v153);
      while (__stxr(v154 + 1, v153));
    }
    v155 = (std::__shared_weak_count *)v151[1];
    *v151 = v150;
    v151[1] = v152;
    if (v155)
    {
      v156 = (unint64_t *)&v155->__shared_owners_;
      do
        v157 = __ldaxr(v156);
      while (__stlxr(v157 - 1, v156));
      if (!v157)
      {
        ((void (*)(std::__shared_weak_count *))v155->__on_zero_shared)(v155);
        std::__shared_weak_count::__release_weak(v155);
      }
    }
    v158 = v131[8];
    v159 = *(_QWORD *)(a1 + 832);
    *(_QWORD *)(v158 + 16) = v159;
    *(_QWORD *)(v158 + 24) = 0;
    v160 = v131[20];
    v161 = *(_QWORD *)(a1 + 840);
    if (v161)
    {
      v162 = (unint64_t *)(v161 + 8);
      do
        v163 = __ldxr(v162);
      while (__stxr(v163 + 1, v162));
    }
    v164 = *(std::__shared_weak_count **)(v160 + 24);
    *(_QWORD *)(v160 + 16) = v159;
    *(_QWORD *)(v160 + 24) = v161;
    if (v164)
    {
      v165 = (unint64_t *)&v164->__shared_owners_;
      do
        v166 = __ldaxr(v165);
      while (__stlxr(v166 - 1, v165));
      if (!v166)
      {
        ((void (*)(std::__shared_weak_count *))v164->__on_zero_shared)(v164);
        std::__shared_weak_count::__release_weak(v164);
      }
    }
    v167 = v131[8];
    v168 = *(_QWORD *)(a1 + 848);
    *(_QWORD *)(v167 + 64) = v168;
    *(_QWORD *)(v167 + 72) = 0;
    v169 = v131[20];
    v170 = *(_QWORD *)(a1 + 856);
    if (v170)
    {
      v171 = (unint64_t *)(v170 + 8);
      do
        v172 = __ldxr(v171);
      while (__stxr(v172 + 1, v171));
    }
    v173 = *(std::__shared_weak_count **)(v169 + 72);
    *(_QWORD *)(v169 + 64) = v168;
    *(_QWORD *)(v169 + 72) = v170;
    if (v173)
    {
      v174 = (unint64_t *)&v173->__shared_owners_;
      do
        v175 = __ldaxr(v174);
      while (__stlxr(v175 - 1, v174));
      if (!v175)
      {
        ((void (*)(std::__shared_weak_count *))v173->__on_zero_shared)(v173);
        std::__shared_weak_count::__release_weak(v173);
      }
    }
    v176 = *(_QWORD *)(a1 + 1104);
    *(_QWORD *)(a1 + 1104) = v131;
    if (v176)
      (*(void (**)(uint64_t))(*(_QWORD *)v176 + 8))(v176);
    v177 = *(_QWORD *)(a1 + 1144);
    v178 = *(_QWORD *)(a1 + 1160);
    v179 = (_QWORD *)operator new();
    v180 = v179;
    v181 = *(uint64_t **)(a1 + 776);
    v182 = *v181;
    v183 = (std::__shared_weak_count *)v181[1];
    if (v183)
    {
      v184 = (unint64_t *)&v183->__shared_owners_;
      do
        v185 = __ldxr(v184);
      while (__stxr(v185 + 1, v184));
      ggl::PipelineSetup::PipelineSetup(v179, v182, (uint64_t)v183);
      v186 = (unint64_t *)&v183->__shared_owners_;
      do
        v187 = __ldaxr(v186);
      while (__stlxr(v187 - 1, v186));
      if (!v187)
      {
        ((void (*)(std::__shared_weak_count *))v183->__on_zero_shared)(v183);
        std::__shared_weak_count::__release_weak(v183);
      }
    }
    else
    {
      ggl::PipelineSetup::PipelineSetup(v179, v182, 0);
    }
    *v180 = &off_1E42BA550;
    v188 = v180[8];
    *(_QWORD *)(v188 + 32) = v177;
    *(_QWORD *)(v188 + 40) = 0;
    v189 = v180[20];
    v190 = *(std::__shared_weak_count **)(v189 + 40);
    *(_QWORD *)(v189 + 32) = 0;
    *(_QWORD *)(v189 + 40) = 0;
    if (v190)
    {
      v191 = (unint64_t *)&v190->__shared_owners_;
      do
        v192 = __ldaxr(v191);
      while (__stlxr(v192 - 1, v191));
      if (!v192)
      {
        ((void (*)(std::__shared_weak_count *))v190->__on_zero_shared)(v190);
        std::__shared_weak_count::__release_weak(v190);
      }
    }
    v193 = v180[8];
    *(_QWORD *)(v193 + 48) = v178;
    *(_QWORD *)(v193 + 56) = 0;
    v194 = v180[20];
    v195 = *(std::__shared_weak_count **)(v194 + 56);
    *(_QWORD *)(v194 + 48) = 0;
    *(_QWORD *)(v194 + 56) = 0;
    if (v195)
    {
      v196 = (unint64_t *)&v195->__shared_owners_;
      do
        v197 = __ldaxr(v196);
      while (__stlxr(v197 - 1, v196));
      if (!v197)
      {
        ((void (*)(std::__shared_weak_count *))v195->__on_zero_shared)(v195);
        std::__shared_weak_count::__release_weak(v195);
      }
    }
    *(_QWORD *)v180[12] = *(_QWORD *)(v78 + 16);
    v198 = (_QWORD *)v180[8];
    v199 = *(_QWORD *)(a1 + 816);
    *v198 = v199;
    v198[1] = 0;
    v200 = (_QWORD *)v180[20];
    v201 = *(_QWORD *)(a1 + 824);
    if (v201)
    {
      v202 = (unint64_t *)(v201 + 8);
      do
        v203 = __ldxr(v202);
      while (__stxr(v203 + 1, v202));
    }
    v204 = (std::__shared_weak_count *)v200[1];
    *v200 = v199;
    v200[1] = v201;
    if (v204)
    {
      v205 = (unint64_t *)&v204->__shared_owners_;
      do
        v206 = __ldaxr(v205);
      while (__stlxr(v206 - 1, v205));
      if (!v206)
      {
        ((void (*)(std::__shared_weak_count *))v204->__on_zero_shared)(v204);
        std::__shared_weak_count::__release_weak(v204);
      }
    }
    v207 = v180[8];
    v208 = *(_QWORD *)(a1 + 832);
    *(_QWORD *)(v207 + 16) = v208;
    *(_QWORD *)(v207 + 24) = 0;
    v209 = v180[20];
    v210 = *(_QWORD *)(a1 + 840);
    if (v210)
    {
      v211 = (unint64_t *)(v210 + 8);
      do
        v212 = __ldxr(v211);
      while (__stxr(v212 + 1, v211));
    }
    v213 = *(std::__shared_weak_count **)(v209 + 24);
    *(_QWORD *)(v209 + 16) = v208;
    *(_QWORD *)(v209 + 24) = v210;
    if (v213)
    {
      v214 = (unint64_t *)&v213->__shared_owners_;
      do
        v215 = __ldaxr(v214);
      while (__stlxr(v215 - 1, v214));
      if (!v215)
      {
        ((void (*)(std::__shared_weak_count *))v213->__on_zero_shared)(v213);
        std::__shared_weak_count::__release_weak(v213);
      }
    }
    v216 = v180[8];
    v217 = *(_QWORD *)(a1 + 848);
    *(_QWORD *)(v216 + 64) = v217;
    *(_QWORD *)(v216 + 72) = 0;
    v218 = v180[20];
    v219 = *(_QWORD *)(a1 + 856);
    if (v219)
    {
      v220 = (unint64_t *)(v219 + 8);
      do
        v221 = __ldxr(v220);
      while (__stxr(v221 + 1, v220));
    }
    v222 = *(std::__shared_weak_count **)(v218 + 72);
    *(_QWORD *)(v218 + 64) = v217;
    *(_QWORD *)(v218 + 72) = v219;
    if (v222)
    {
      v223 = (unint64_t *)&v222->__shared_owners_;
      do
        v224 = __ldaxr(v223);
      while (__stlxr(v224 - 1, v223));
      if (!v224)
      {
        ((void (*)(std::__shared_weak_count *))v222->__on_zero_shared)(v222);
        std::__shared_weak_count::__release_weak(v222);
      }
    }
    v225 = *(_QWORD *)(a1 + 1080);
    *(_QWORD *)(a1 + 1080) = v180;
    if (v225)
      (*(void (**)(uint64_t))(*(_QWORD *)v225 + 8))(v225);
    v226 = *(_QWORD *)(a1 + 1144);
    v227 = *(_QWORD *)(a1 + 1176);
    v228 = (_QWORD *)operator new();
    v229 = v228;
    v230 = *(uint64_t **)(a1 + 776);
    v231 = *v230;
    v232 = (std::__shared_weak_count *)v230[1];
    if (v232)
    {
      v233 = (unint64_t *)&v232->__shared_owners_;
      do
        v234 = __ldxr(v233);
      while (__stxr(v234 + 1, v233));
      ggl::PipelineSetup::PipelineSetup(v228, v231, (uint64_t)v232);
      v235 = (unint64_t *)&v232->__shared_owners_;
      do
        v236 = __ldaxr(v235);
      while (__stlxr(v236 - 1, v235));
      if (!v236)
      {
        ((void (*)(std::__shared_weak_count *))v232->__on_zero_shared)(v232);
        std::__shared_weak_count::__release_weak(v232);
      }
    }
    else
    {
      ggl::PipelineSetup::PipelineSetup(v228, v231, 0);
    }
    *v229 = &off_1E42BA550;
    v237 = v229[8];
    *(_QWORD *)(v237 + 32) = v226;
    *(_QWORD *)(v237 + 40) = 0;
    v238 = v229[20];
    v239 = *(std::__shared_weak_count **)(v238 + 40);
    *(_QWORD *)(v238 + 32) = 0;
    *(_QWORD *)(v238 + 40) = 0;
    if (v239)
    {
      v240 = (unint64_t *)&v239->__shared_owners_;
      do
        v241 = __ldaxr(v240);
      while (__stlxr(v241 - 1, v240));
      if (!v241)
      {
        ((void (*)(std::__shared_weak_count *))v239->__on_zero_shared)(v239);
        std::__shared_weak_count::__release_weak(v239);
      }
    }
    v242 = v229[8];
    *(_QWORD *)(v242 + 48) = v227;
    *(_QWORD *)(v242 + 56) = 0;
    v243 = v229[20];
    v244 = *(std::__shared_weak_count **)(v243 + 56);
    *(_QWORD *)(v243 + 48) = 0;
    *(_QWORD *)(v243 + 56) = 0;
    if (v244)
    {
      v245 = (unint64_t *)&v244->__shared_owners_;
      do
        v246 = __ldaxr(v245);
      while (__stlxr(v246 - 1, v245));
      if (!v246)
      {
        ((void (*)(std::__shared_weak_count *))v244->__on_zero_shared)(v244);
        std::__shared_weak_count::__release_weak(v244);
      }
    }
    *(_QWORD *)v229[12] = *(_QWORD *)(v78 + 16);
    v247 = (_QWORD *)v229[8];
    v248 = *(_QWORD *)(a1 + 816);
    *v247 = v248;
    v247[1] = 0;
    v249 = (_QWORD *)v229[20];
    v250 = *(_QWORD *)(a1 + 824);
    if (v250)
    {
      v251 = (unint64_t *)(v250 + 8);
      do
        v252 = __ldxr(v251);
      while (__stxr(v252 + 1, v251));
    }
    v253 = (std::__shared_weak_count *)v249[1];
    *v249 = v248;
    v249[1] = v250;
    if (v253)
    {
      v254 = (unint64_t *)&v253->__shared_owners_;
      do
        v255 = __ldaxr(v254);
      while (__stlxr(v255 - 1, v254));
      if (!v255)
      {
        ((void (*)(std::__shared_weak_count *))v253->__on_zero_shared)(v253);
        std::__shared_weak_count::__release_weak(v253);
      }
    }
    v256 = v229[8];
    v257 = *(_QWORD *)(a1 + 832);
    *(_QWORD *)(v256 + 16) = v257;
    *(_QWORD *)(v256 + 24) = 0;
    v258 = v229[20];
    v259 = *(_QWORD *)(a1 + 840);
    if (v259)
    {
      v260 = (unint64_t *)(v259 + 8);
      do
        v261 = __ldxr(v260);
      while (__stxr(v261 + 1, v260));
    }
    v262 = *(std::__shared_weak_count **)(v258 + 24);
    *(_QWORD *)(v258 + 16) = v257;
    *(_QWORD *)(v258 + 24) = v259;
    if (v262)
    {
      v263 = (unint64_t *)&v262->__shared_owners_;
      do
        v264 = __ldaxr(v263);
      while (__stlxr(v264 - 1, v263));
      if (!v264)
      {
        ((void (*)(std::__shared_weak_count *))v262->__on_zero_shared)(v262);
        std::__shared_weak_count::__release_weak(v262);
      }
    }
    v265 = v229[8];
    v266 = *(_QWORD *)(a1 + 848);
    *(_QWORD *)(v265 + 64) = v266;
    *(_QWORD *)(v265 + 72) = 0;
    v267 = v229[20];
    v268 = *(_QWORD *)(a1 + 856);
    if (v268)
    {
      v269 = (unint64_t *)(v268 + 8);
      do
        v270 = __ldxr(v269);
      while (__stxr(v270 + 1, v269));
    }
    v271 = *(std::__shared_weak_count **)(v267 + 72);
    *(_QWORD *)(v267 + 64) = v266;
    *(_QWORD *)(v267 + 72) = v268;
    if (v271)
    {
      v272 = (unint64_t *)&v271->__shared_owners_;
      do
        v273 = __ldaxr(v272);
      while (__stlxr(v273 - 1, v272));
      if (!v273)
      {
        ((void (*)(std::__shared_weak_count *))v271->__on_zero_shared)(v271);
        std::__shared_weak_count::__release_weak(v271);
      }
    }
    v274 = *(_QWORD *)(a1 + 1096);
    *(_QWORD *)(a1 + 1096) = v229;
    if (v274)
      (*(void (**)(uint64_t))(*(_QWORD *)v274 + 8))(v274);
  }

  return a1;
}

void sub_19F928708(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  uint64_t v10;
  uint64_t *v11;
  void **v12;
  _QWORD *v14;
  void *v15;
  uint64_t *v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  char *v48;
  char *v49;
  char *v50;
  char *v51;
  _QWORD *v52;
  _QWORD *v53;
  _QWORD *v54;
  void *v55;
  char *v56;
  char *v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  char *v61;
  char *v62;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;
  char *v66;
  char *v67;
  std::__shared_weak_count *v68;
  unint64_t *v69;
  unint64_t v70;
  char *v71;
  char *v72;
  std::__shared_weak_count *v73;
  unint64_t *v74;
  unint64_t v75;
  char *v76;
  char *v77;
  std::__shared_weak_count *v78;
  unint64_t *v79;
  unint64_t v80;
  uint64_t v81;
  _QWORD *v82;
  _QWORD *v83;
  void *v84;
  uint64_t *v85;
  uint64_t v86;
  uint64_t v87;
  void **v88;
  uint64_t v89;
  _QWORD *v90;
  std::__shared_weak_count *v91;
  uint64_t *v92;
  uint64_t v93;
  uint64_t v94;
  std::__shared_weak_count *v95;
  unint64_t *v96;
  unint64_t v97;
  uint64_t v98;
  void *v99;
  _QWORD *v100;
  void *v101;
  unint64_t *v102;
  unint64_t v103;
  std::__shared_weak_count *v104;
  unint64_t *v105;
  unint64_t v106;
  std::__shared_weak_count *v107;
  unint64_t *v108;
  unint64_t v109;
  std::__shared_weak_count *v110;
  unint64_t *v111;
  unint64_t v112;
  std::__shared_weak_count *v113;
  unint64_t *v114;
  unint64_t v115;
  std::__shared_weak_count *v116;
  unint64_t *v117;
  unint64_t v118;
  std::__shared_weak_count *v119;
  unint64_t *v120;
  unint64_t v121;

  v14 = *(_QWORD **)(v10 + 1272);
  if (v14)
  {
    do
    {
      v52 = (_QWORD *)*v14;
      v53 = (_QWORD *)v14[5];
      if (v53)
      {
        do
        {
          v54 = (_QWORD *)*v53;
          operator delete(v53);
          v53 = v54;
        }
        while (v54);
      }
      v55 = (void *)v14[3];
      v14[3] = 0;
      if (v55)
        operator delete(v55);
      operator delete(v14);
      v14 = v52;
    }
    while (v52);
  }
  v15 = *v12;
  *v12 = 0;
  if (v15)
    operator delete(v15);
  v16 = (uint64_t *)(v10 + 1216);
  v17 = *(std::__shared_weak_count **)(v10 + 1240);
  if (v17)
  {
    p_shared_owners = (unint64_t *)&v17->__shared_owners_;
    do
      v19 = __ldaxr(p_shared_owners);
    while (__stlxr(v19 - 1, p_shared_owners));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  v20 = *v16;
  *v16 = 0;
  if (v20)
    (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
  std::__tree<std::__value_type<md::PatternedLineKey,md::PatternedLineSetup>,std::__map_value_compare<md::PatternedLineKey,std::__value_type<md::PatternedLineKey,md::PatternedLineSetup>,std::less<md::PatternedLineKey>,true>,std::allocator<std::__value_type<md::PatternedLineKey,md::PatternedLineSetup>>>::destroy(*(_QWORD **)(v10 + 1200));
  v21 = *(std::__shared_weak_count **)(v10 + 1184);
  if (v21)
  {
    v22 = (unint64_t *)&v21->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  v24 = *(std::__shared_weak_count **)(v10 + 1168);
  if (v24)
  {
    v25 = (unint64_t *)&v24->__shared_owners_;
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  v27 = *(std::__shared_weak_count **)(v10 + 1152);
  if (v27)
  {
    v28 = (unint64_t *)&v27->__shared_owners_;
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
  v30 = *(std::__shared_weak_count **)(v10 + 1136);
  if (v30)
  {
    v31 = (unint64_t *)&v30->__shared_owners_;
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v32 - 1, v31));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
    }
  }
  v33 = *(_QWORD *)(v10 + 1120);
  *(_QWORD *)(v10 + 1120) = 0;
  if (v33)
  {
    v34 = *(_QWORD *)(v33 + 40);
    *(_QWORD *)(v33 + 40) = 0;
    if (v34)
      MEMORY[0x1A1AF4E00](v34, 0x1000C40451B5BE8);
    v35 = *(_QWORD *)(v33 + 24);
    *(_QWORD *)(v33 + 24) = 0;
    if (v35)
      (*(void (**)(uint64_t))(*(_QWORD *)v35 + 8))(v35);
    v36 = *(void **)v33;
    if (*(_QWORD *)v33)
    {
      *(_QWORD *)(v33 + 8) = v36;
      operator delete(v36);
    }
    MEMORY[0x1A1AF4E00](v33, 0x1020C4024962473);
  }
  v37 = *(_QWORD *)(v10 + 1112);
  *(_QWORD *)(v10 + 1112) = 0;
  if (v37)
  {
    v38 = *(_QWORD *)(v37 + 40);
    *(_QWORD *)(v37 + 40) = 0;
    if (v38)
      MEMORY[0x1A1AF4E00](v38, 0x1000C40451B5BE8);
    v39 = *(_QWORD *)(v37 + 24);
    *(_QWORD *)(v37 + 24) = 0;
    if (v39)
      (*(void (**)(uint64_t))(*(_QWORD *)v39 + 8))(v39);
    v40 = *(void **)v37;
    if (*(_QWORD *)v37)
    {
      *(_QWORD *)(v37 + 8) = v40;
      operator delete(v40);
    }
    MEMORY[0x1A1AF4E00](v37, 0x1020C4024962473);
  }
  v41 = *(_QWORD *)(v10 + 1104);
  *(_QWORD *)(v10 + 1104) = 0;
  if (v41)
    (*(void (**)(uint64_t))(*(_QWORD *)v41 + 8))(v41);
  v42 = *(_QWORD *)(v10 + 1096);
  *(_QWORD *)(v10 + 1096) = 0;
  if (v42)
    (*(void (**)(uint64_t))(*(_QWORD *)v42 + 8))(v42);
  v43 = *(_QWORD *)(v10 + 1088);
  *(_QWORD *)(v10 + 1088) = 0;
  if (v43)
    (*(void (**)(uint64_t))(*(_QWORD *)v43 + 8))(v43);
  v44 = *(_QWORD *)(v10 + 1080);
  *(_QWORD *)(v10 + 1080) = 0;
  if (v44)
    (*(void (**)(uint64_t))(*(_QWORD *)v44 + 8))(v44);
  v45 = *(_QWORD *)(v10 + 1072);
  *(_QWORD *)(v10 + 1072) = 0;
  if (v45)
    (*(void (**)(uint64_t))(*(_QWORD *)v45 + 8))(v45);
  v46 = *(_QWORD *)(v10 + 1064);
  *(_QWORD *)(v10 + 1064) = 0;
  if (v46)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v46 + 8))(v46);
    v47 = *(char **)(v10 + 1040);
    if (!v47)
    {
LABEL_59:
      v48 = *(char **)(v10 + 1016);
      if (!v48)
        goto LABEL_60;
      goto LABEL_80;
    }
  }
  else
  {
    v47 = *(char **)(v10 + 1040);
    if (!v47)
      goto LABEL_59;
  }
  v56 = *(char **)(v10 + 1048);
  v57 = v47;
  if (v56 != v47)
  {
    do
    {
      v58 = (std::__shared_weak_count *)*((_QWORD *)v56 - 1);
      if (v58)
      {
        v59 = (unint64_t *)&v58->__shared_owners_;
        do
          v60 = __ldaxr(v59);
        while (__stlxr(v60 - 1, v59));
        if (!v60)
        {
          ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
          std::__shared_weak_count::__release_weak(v58);
        }
      }
      v56 -= 16;
    }
    while (v56 != v47);
    v57 = *(char **)(v10 + 1040);
  }
  *(_QWORD *)(v10 + 1048) = v47;
  operator delete(v57);
  v48 = *(char **)(v10 + 1016);
  if (!v48)
  {
LABEL_60:
    v49 = *(char **)(v10 + 992);
    if (!v49)
      goto LABEL_61;
    goto LABEL_90;
  }
LABEL_80:
  v61 = *(char **)(v10 + 1024);
  v62 = v48;
  if (v61 != v48)
  {
    do
    {
      v63 = (std::__shared_weak_count *)*((_QWORD *)v61 - 1);
      if (v63)
      {
        v64 = (unint64_t *)&v63->__shared_owners_;
        do
          v65 = __ldaxr(v64);
        while (__stlxr(v65 - 1, v64));
        if (!v65)
        {
          ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
          std::__shared_weak_count::__release_weak(v63);
        }
      }
      v61 -= 16;
    }
    while (v61 != v48);
    v62 = *(char **)(v10 + 1016);
  }
  *(_QWORD *)(v10 + 1024) = v48;
  operator delete(v62);
  v49 = *(char **)(v10 + 992);
  if (!v49)
  {
LABEL_61:
    v50 = *(char **)(v10 + 968);
    if (!v50)
      goto LABEL_62;
    goto LABEL_100;
  }
LABEL_90:
  v66 = *(char **)(v10 + 1000);
  v67 = v49;
  if (v66 != v49)
  {
    do
    {
      v68 = (std::__shared_weak_count *)*((_QWORD *)v66 - 1);
      if (v68)
      {
        v69 = (unint64_t *)&v68->__shared_owners_;
        do
          v70 = __ldaxr(v69);
        while (__stlxr(v70 - 1, v69));
        if (!v70)
        {
          ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
          std::__shared_weak_count::__release_weak(v68);
        }
      }
      v66 -= 16;
    }
    while (v66 != v49);
    v67 = *(char **)(v10 + 992);
  }
  *(_QWORD *)(v10 + 1000) = v49;
  operator delete(v67);
  v50 = *(char **)(v10 + 968);
  if (!v50)
  {
LABEL_62:
    v51 = *(char **)(v10 + 944);
    if (!v51)
      goto LABEL_120;
    goto LABEL_110;
  }
LABEL_100:
  v71 = *(char **)(v10 + 976);
  v72 = v50;
  if (v71 != v50)
  {
    do
    {
      v73 = (std::__shared_weak_count *)*((_QWORD *)v71 - 1);
      if (v73)
      {
        v74 = (unint64_t *)&v73->__shared_owners_;
        do
          v75 = __ldaxr(v74);
        while (__stlxr(v75 - 1, v74));
        if (!v75)
        {
          ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
          std::__shared_weak_count::__release_weak(v73);
        }
      }
      v71 -= 16;
    }
    while (v71 != v50);
    v72 = *(char **)(v10 + 968);
  }
  *(_QWORD *)(v10 + 976) = v50;
  operator delete(v72);
  v51 = *(char **)(v10 + 944);
  if (!v51)
  {
LABEL_120:
    v81 = *(_QWORD *)(v10 + 936);
    *(_QWORD *)(v10 + 936) = 0;
    if (v81)
    {
      v82 = *(_QWORD **)(v81 + 16);
      if (v82)
      {
        do
        {
          v83 = (_QWORD *)*v82;
          md::TransitJunction::~TransitJunction((md::TransitJunction *)(v82 + 3));
          operator delete(v82);
          v82 = v83;
        }
        while (v83);
      }
      v84 = *(void **)v81;
      *(_QWORD *)v81 = 0;
      if (v84)
        operator delete(v84);
      MEMORY[0x1A1AF4E00](v81, 0x10A0C408EF24B1CLL);
    }
    if (*(_QWORD *)(v10 + 928))
    {
      v85 = *(uint64_t **)(v10 + 920);
      v86 = *(_QWORD *)(v10 + 912);
      v87 = *v85;
      *(_QWORD *)(v87 + 8) = *(_QWORD *)(v86 + 8);
      **(_QWORD **)(v86 + 8) = v87;
      *(_QWORD *)(v10 + 928) = 0;
      if (v85 != v11)
      {
        do
        {
          v92 = (uint64_t *)v85[1];
          v93 = v85[8];
          v85[8] = 0;
          if (v93)
            (*(void (**)(uint64_t))(*(_QWORD *)v93 + 8))(v93);
          v94 = v85[7];
          v85[7] = 0;
          if (v94)
            (*(void (**)(uint64_t))(*(_QWORD *)v94 + 8))(v94);
          v95 = (std::__shared_weak_count *)v85[4];
          if (v95)
          {
            v96 = (unint64_t *)&v95->__shared_owners_;
            do
              v97 = __ldaxr(v96);
            while (__stlxr(v97 - 1, v96));
            if (!v97)
            {
              ((void (*)(std::__shared_weak_count *))v95->__on_zero_shared)(v95);
              std::__shared_weak_count::__release_weak(v95);
            }
          }
          operator delete(v85);
          v85 = v92;
        }
        while (v92 != v11);
      }
    }
    v88 = (void **)(v10 + 864);
    v89 = *(_QWORD *)(v10 + 888);
    if (v89)
    {
      v98 = *(_QWORD *)(v10 + 896);
      v99 = *(void **)(v10 + 888);
      if (v98 != v89)
      {
        do
          md::TransitLink::~TransitLink((md::TransitLink *)(v98 - 248));
        while (v98 != v89);
        v99 = *(void **)(v10 + 888);
      }
      *(_QWORD *)(v10 + 896) = v89;
      operator delete(v99);
      v90 = *v88;
      if (!*v88)
      {
LABEL_130:
        v91 = *(std::__shared_weak_count **)(v10 + 856);
        if (!v91)
          goto LABEL_154;
        goto LABEL_150;
      }
    }
    else
    {
      v90 = *v88;
      if (!*v88)
        goto LABEL_130;
    }
    v100 = *(_QWORD **)(v10 + 872);
    v101 = v90;
    if (v100 != v90)
    {
      do
      {
        v100 -= 13;
        std::__destroy_at[abi:nn180100]<md::TransitLine,0>(v100);
      }
      while (v100 != v90);
      v101 = *v88;
    }
    *(_QWORD *)(v10 + 872) = v90;
    operator delete(v101);
    v91 = *(std::__shared_weak_count **)(v10 + 856);
    if (!v91)
    {
LABEL_154:
      v104 = *(std::__shared_weak_count **)(v10 + 840);
      if (v104)
      {
        v105 = (unint64_t *)&v104->__shared_owners_;
        do
          v106 = __ldaxr(v105);
        while (__stlxr(v106 - 1, v105));
        if (!v106)
        {
          ((void (*)(std::__shared_weak_count *))v104->__on_zero_shared)(v104);
          std::__shared_weak_count::__release_weak(v104);
        }
      }
      v107 = *(std::__shared_weak_count **)(v10 + 824);
      if (v107)
      {
        v108 = (unint64_t *)&v107->__shared_owners_;
        do
          v109 = __ldaxr(v108);
        while (__stlxr(v109 - 1, v108));
        if (!v109)
        {
          ((void (*)(std::__shared_weak_count *))v107->__on_zero_shared)(v107);
          std::__shared_weak_count::__release_weak(v107);
        }
      }
      v110 = *(std::__shared_weak_count **)(v10 + 808);
      if (v110)
      {
        v111 = (unint64_t *)&v110->__shared_owners_;
        do
          v112 = __ldaxr(v111);
        while (__stlxr(v112 - 1, v111));
        if (!v112)
        {
          ((void (*)(std::__shared_weak_count *))v110->__on_zero_shared)(v110);
          std::__shared_weak_count::__release_weak(v110);
        }
      }
      v113 = *(std::__shared_weak_count **)(v10 + 792);
      if (v113)
      {
        v114 = (unint64_t *)&v113->__shared_owners_;
        do
          v115 = __ldaxr(v114);
        while (__stlxr(v115 - 1, v114));
        if (!v115)
        {
          ((void (*)(std::__shared_weak_count *))v113->__on_zero_shared)(v113);
          std::__shared_weak_count::__release_weak(v113);
        }
      }
      *(_QWORD *)(v10 + 752) = &off_1E42B4D50;

      v116 = *(std::__shared_weak_count **)(v10 + 744);
      if (v116)
      {
        v117 = (unint64_t *)&v116->__shared_owners_;
        do
          v118 = __ldaxr(v117);
        while (__stlxr(v118 - 1, v117));
        if (!v118)
        {
          ((void (*)(std::__shared_weak_count *))v116->__on_zero_shared)(v116);
          std::__shared_weak_count::__release_weak(v116);
        }
      }
      v119 = *(std::__shared_weak_count **)(v10 + 728);
      if (v119)
      {
        v120 = (unint64_t *)&v119->__shared_owners_;
        do
          v121 = __ldaxr(v120);
        while (__stlxr(v121 - 1, v120));
        if (!v121)
        {
          ((void (*)(std::__shared_weak_count *))v119->__on_zero_shared)(v119);
          std::__shared_weak_count::__release_weak(v119);
        }
      }
      md::MapTileData::~MapTileData((md::MapTileData *)v10);

      _Unwind_Resume(a1);
    }
LABEL_150:
    v102 = (unint64_t *)&v91->__shared_owners_;
    do
      v103 = __ldaxr(v102);
    while (__stlxr(v103 - 1, v102));
    if (!v103)
    {
      ((void (*)(std::__shared_weak_count *))v91->__on_zero_shared)(v91);
      std::__shared_weak_count::__release_weak(v91);
    }
    goto LABEL_154;
  }
LABEL_110:
  v76 = *(char **)(v10 + 952);
  v77 = v51;
  if (v76 != v51)
  {
    do
    {
      v78 = (std::__shared_weak_count *)*((_QWORD *)v76 - 1);
      if (v78)
      {
        v79 = (unint64_t *)&v78->__shared_owners_;
        do
          v80 = __ldaxr(v79);
        while (__stlxr(v80 - 1, v79));
        if (!v80)
        {
          ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
          std::__shared_weak_count::__release_weak(v78);
        }
      }
      v76 -= 16;
    }
    while (v76 != v51);
    v77 = *(char **)(v10 + 944);
  }
  *(_QWORD *)(v10 + 952) = v51;
  operator delete(v77);
  goto LABEL_120;
}

uint64_t md::StyleTexture<md::TransitLineSegment::StylePixel>::StyleTexture(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  char *v5;
  char *v6;
  unsigned __int8 v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  BOOL v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  int v17;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  if (a2)
  {
    if (a2 >> 59)
      abort();
    v4 = 32 * a2;
    v5 = (char *)operator new(32 * a2);
    *(_QWORD *)a1 = v5;
    v6 = &v5[v4];
    *(_QWORD *)(a1 + 16) = &v5[v4];
    bzero(v5, 32 * a2);
    *(_QWORD *)(a1 + 8) = v6;
  }
  *(_QWORD *)(a1 + 24) = 0;
  *(_BYTE *)(a1 + 32) = 1;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_QWORD *)(a1 + 88) = 0;
  v8 = &unk_1EE576000;
  if ((v7 & 1) == 0)
  {
    v8 = &unk_1EE576000;
    if (v17)
    {
      md::StyleTexture<md::TransitLineSegment::StylePixel>::StyleTexture(unsigned long,md::StyleTexture<md::TransitLineSegment::StylePixel>::PackStyle,BOOL,ggl::Filter)::bytesPerPixel = 4;
      v8 = (_QWORD *)&unk_1EE576000;
    }
  }
  v9 = v8[41];
  v10 = (v9 + 7) / v9;
  v11 = vcvtpd_u64_f64(sqrt((double)(v10 * a2)));
  v12 = v11 > 1;
  v13 = (1 << -(char)__clz(v11 - 1));
  if (!v12)
    v13 = 1;
  v14 = vcvtpd_u64_f64((double)a2 / (double)(v13 / v10));
  v12 = v14 > 1;
  v15 = (1 << -(char)__clz(v14 - 1));
  if (!v12)
    v15 = 1;
  *(_QWORD *)(a1 + 48) = v13;
  *(_QWORD *)(a1 + 56) = v15;
  *(_QWORD *)(a1 + 72) = v13 / v10;
  *(_QWORD *)(a1 + 80) = v10;
  *(_QWORD *)(a1 + 64) = v10 * v9;
  *(float *)(a1 + 88) = 1.0 / (float)v13;
  return a1;
}

uint64_t md::Ribbons::RibbonBatch<md::Ribbons::TransitRibbonDescriptor>::RibbonBatch(uint64_t a1)
{
  uint64_t v2;
  __int128 v3;
  int64x2_t v4;
  unsigned __int8 v5;
  _QWORD *v6;
  uint64_t v7;
  unsigned __int8 v8;
  uint64_t *v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  void (***v15)(_QWORD, uint64_t);
  void (***v16)(_QWORD, uint64_t);
  unsigned __int8 v17;
  uint64_t v18;
  int v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;

  *(_QWORD *)a1 = &off_1E42AF0E8;
  *(_QWORD *)(a1 + 8) = 0;
  v2 = a1 + 528;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 32) = "";
  *(_DWORD *)(a1 + 56) = 0;
  *(_DWORD *)(a1 + 72) = 1065353216;
  v3 = 0uLL;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  v4 = vdupq_n_s64(1uLL);
  *(int64x2_t *)(a1 + 112) = v4;
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 16) = &off_1E42AF548;
  *(_BYTE *)(a1 + 136) = 1;
  *(_QWORD *)(a1 + 192) = 0;
  *(_QWORD *)(a1 + 168) = 0;
  *(_QWORD *)(a1 + 176) = 0;
  *(_QWORD *)(a1 + 160) = "";
  *(_DWORD *)(a1 + 184) = 0;
  *(_DWORD *)(a1 + 200) = 1065353216;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(int64x2_t *)(a1 + 240) = v4;
  *(_QWORD *)(a1 + 256) = 0;
  *(_QWORD *)(a1 + 144) = &off_1E42AF548;
  *(_BYTE *)(a1 + 264) = 1;
  *(_QWORD *)(a1 + 320) = 0;
  *(_DWORD *)(a1 + 312) = 0;
  *(_QWORD *)(a1 + 288) = "";
  *(_QWORD *)(a1 + 296) = 0;
  *(_QWORD *)(a1 + 304) = 0;
  *(_DWORD *)(a1 + 328) = 1065353216;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_OWORD *)(a1 + 352) = 0u;
  *(int64x2_t *)(a1 + 368) = v4;
  *(_QWORD *)(a1 + 384) = 0;
  *(_QWORD *)(a1 + 272) = &off_1E42AF548;
  *(_BYTE *)(a1 + 392) = 1;
  *(_QWORD *)(a1 + 448) = 0;
  *(_QWORD *)(a1 + 424) = 0;
  *(_QWORD *)(a1 + 432) = 0;
  *(_QWORD *)(a1 + 416) = "";
  *(_DWORD *)(a1 + 440) = 0;
  *(_DWORD *)(a1 + 456) = 1065353216;
  *(_OWORD *)(a1 + 464) = 0u;
  *(_OWORD *)(a1 + 480) = 0u;
  *(int64x2_t *)(a1 + 496) = v4;
  *(_QWORD *)(a1 + 512) = 0;
  *(_QWORD *)(a1 + 400) = &off_1E42AF548;
  *(_BYTE *)(a1 + 520) = 1;
  *(_OWORD *)(a1 + 528) = 0u;
  *(_OWORD *)(a1 + 544) = 0u;
  *(_OWORD *)(a1 + 560) = 0u;
  if ((v5 & 1) == 0)
  {
    v3 = 0uLL;
    if (v20)
    {
      v21 = operator new();
      ggl::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v21, "GeoGL", 0xA3D02C1100000005);
      v3 = 0uLL;
    }
  }
  *(_QWORD *)(a1 + 576) = ggl::Allocator::instance(void)::alloc;
  *(_QWORD *)(a1 + 616) = 0;
  *(_OWORD *)(v2 + 56) = v3;
  *(_OWORD *)(v2 + 72) = v3;
  *(_QWORD *)(a1 + 624) = 32;
  v6 = malloc_type_malloc(0xF10uLL, 0xB644C221uLL);
  *v6 = 0;
  v6[1] = 0;
  *(_QWORD *)(a1 + 608) = v6;
  *(_QWORD *)(a1 + 616) = v6;
  *(_QWORD *)(a1 + 632) = 0;
  *(_QWORD *)(a1 + 648) = 0;
  *(_QWORD *)(a1 + 640) = 0;
  *(_BYTE *)(a1 + 656) = 1;
  v7 = operator new();
  *(_OWORD *)(v7 + 64) = 0u;
  *(_OWORD *)(v7 + 80) = 0u;
  *(_OWORD *)(v7 + 32) = 0u;
  *(_OWORD *)(v7 + 48) = 0u;
  *(_OWORD *)v7 = 0u;
  *(_OWORD *)(v7 + 16) = 0u;
  *(_BYTE *)(v7 + 48) = 1;
  *(_QWORD *)(v7 + 56) = 0;
  *(_QWORD *)(v7 + 64) = 0;
  *(_QWORD *)(v7 + 72) = 0;
  if ((v8 & 1) == 0)
  {
    v22 = v7;
    v7 = v22;
    if (v23)
    {
      v24 = operator new();
      mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v24, "VectorKitLabels", 0x5ED09DD50000000FLL);
      v7 = v22;
    }
  }
  *(_QWORD *)(v7 + 80) = mdm::Allocator::instance(void)::alloc;
  v25 = v7;
  v9 = *(uint64_t **)(a1 + 640);
  if ((unint64_t)v9 >= *(_QWORD *)(a1 + 648))
  {
    v10 = std::vector<std::unique_ptr<md::Ribbons::RibbonSection<md::Ribbons::TransitRibbonDescriptor>>>::__push_back_slow_path<std::unique_ptr<md::Ribbons::RibbonSection<md::Ribbons::TransitRibbonDescriptor>>>((_QWORD *)(a1 + 632), &v25);
    v11 = v25;
    *(_QWORD *)(a1 + 640) = v10;
    v25 = 0;
    if (v11)
    {
      v12 = *(_QWORD **)(v11 + 56);
      if (v12)
      {
        v13 = *(_QWORD **)(v11 + 64);
        v14 = *(_QWORD *)(v11 + 56);
        if (v13 != v12)
        {
          do
          {
            v16 = (void (***)(_QWORD, uint64_t))*--v13;
            v15 = v16;
            *v13 = 0;
            if (v16)
            {
              (**v15)(v15, v14);
              {
                v18 = operator new();
                mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v18, "VectorKitLabels", 0x5ED09DD50000000FLL);
              }
              (*(void (**)(uint64_t, void (***)(_QWORD, uint64_t), uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc
                                                                                               + 40))(mdm::Allocator::instance(void)::alloc, v15, 152);
            }
          }
          while (v13 != v12);
          v14 = *(_QWORD *)(v11 + 56);
        }
        *(_QWORD *)(v11 + 64) = v12;
        (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v11 + 80) + 40))(*(_QWORD *)(v11 + 80), v14, *(_QWORD *)(v11 + 72) - v14);
      }
      MEMORY[0x1A1AF4E00](v11, 0x1020C4097AEC518);
    }
  }
  else
  {
    *v9 = v7;
    *(_QWORD *)(a1 + 640) = v9 + 1;
    v25 = 0;
  }
  return a1;
}

void sub_19F9294E0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  _QWORD *v2;
  ggl::Batcher *v3;
  void **v4;
  va_list va;

  va_start(va, a2);
  std::unique_ptr<md::Ribbons::RibbonSection<md::Ribbons::TransitRibbonDescriptor>>::~unique_ptr[abi:nn180100]((uint64_t *)va);
  std::vector<std::unique_ptr<md::Ribbons::RibbonSection<md::Ribbons::TransitRibbonDescriptor>>>::~vector[abi:nn180100](v4);
  md::RenderItemPool::~RenderItemPool((md::RenderItemPool *)(v2 + 76));
  ggl::Batcher::~Batcher(v3);
  v2[50] = &off_1E42B59B0;
  v2[52] = 3131955885;
  v2[34] = &off_1E42B59B0;
  v2[36] = 3131955885;
  v2[18] = &off_1E42B59B0;
  v2[20] = 3131955885;
  v2[2] = &off_1E42B59B0;
  v2[4] = 3131955885;
  _Unwind_Resume(a1);
}

void md::TransitTileData::accumulateLineBatches(_QWORD *a1, _QWORD *a2, _QWORD *a3)
{
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  _BYTE *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  _BYTE *v22;
  _QWORD *v23;
  _QWORD *v24;
  unint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  BOOL v30;
  uint64_t v31;
  _OWORD *v32;
  __int128 *v33;
  uint64_t v34;
  __int128 v35;
  int *v36;
  uint64_t **v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  _BYTE *v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  _BYTE *v47;
  _QWORD *v48;
  _QWORD *v49;
  unint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  _OWORD *v53;
  __int128 *v54;
  uint64_t v55;
  __int128 v56;
  uint64_t v57;
  int *v58;
  int *v59;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v5 = a3 + 1;
  v6 = (_QWORD *)*a3;
  if ((_QWORD *)*a3 != a3 + 1)
  {
    v7 = 0;
    while (1)
    {
      v8 = v6[5];
      *(_QWORD *)(v8 + 48) = a2[135];
      v9 = *((_DWORD *)v6 + 8);
      v10 = (4 * v9) | 1u;
      *(_QWORD *)(v8 + 64) = v10;
      v11 = v6[5];
      *(_QWORD *)(v11 + 304) = a2[137];
      *(_QWORD *)(v11 + 320) = v10;
      v12 = v6[5];
      *(_QWORD *)(v12 + 176) = a2[136];
      v13 = (4 * v9) | 2u;
      *(_QWORD *)(v12 + 192) = v13;
      v14 = v6[5];
      *(_QWORD *)(v14 + 432) = a2[138];
      *(_QWORD *)(v14 + 448) = v13;
      v15 = a1[2];
      if ((unint64_t)v7 >= v15)
        break;
      *v7++ = v6[5];
LABEL_25:
      a1[1] = v7;
      v28 = (_QWORD *)v6[1];
      if (v28)
      {
        do
        {
          v29 = v28;
          v28 = (_QWORD *)*v28;
        }
        while (v28);
      }
      else
      {
        do
        {
          v29 = (_QWORD *)v6[2];
          v30 = *v29 == (_QWORD)v6;
          v6 = v29;
        }
        while (!v30);
      }
      v6 = v29;
      if (v29 == v5)
        goto LABEL_42;
    }
    v16 = (_BYTE *)*a1;
    v17 = (uint64_t)v7 - *a1;
    v18 = v17 >> 3;
    v19 = (v17 >> 3) + 1;
    if (v19 >> 61)
      abort();
    v20 = v15 - (_QWORD)v16;
    if (v20 >> 2 > v19)
      v19 = v20 >> 2;
    if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFF8)
      v21 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v21 = v19;
    if (v21)
    {
      if (v21 >> 61)
LABEL_78:
        std::__throw_bad_array_new_length[abi:nn180100]();
      v22 = operator new(8 * v21);
    }
    else
    {
      v22 = 0;
    }
    v23 = &v22[8 * v18];
    *v23 = v6[5];
    v24 = v23 + 1;
    if (v7 == (_QWORD *)v16)
    {
      v16 = v7;
    }
    else
    {
      v25 = (char *)(v7 - 1) - v16;
      if (v25 < 0x168)
      {
        v26 = v7;
        goto LABEL_19;
      }
      if (&v22[v17 - 8 - (v25 & 0xFFFFFFFFFFFFFFF8)] > &v22[v17 - 8])
      {
        v26 = v7;
        goto LABEL_19;
      }
      if ((_QWORD *)((char *)v7 - (v25 & 0xFFFFFFFFFFFFFFF8) - 8) > v7 - 1)
      {
        v26 = v7;
        goto LABEL_19;
      }
      if ((unint64_t)((char *)v7 - &v22[v17]) < 0x20)
      {
        v26 = v7;
        goto LABEL_19;
      }
      v31 = (v25 >> 3) + 1;
      v26 = &v7[-(v31 & 0x3FFFFFFFFFFFFFFCLL)];
      v32 = &v22[8 * v18 - 16];
      v33 = (__int128 *)(v7 - 2);
      v34 = v31 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v35 = *v33;
        *(v32 - 1) = *(v33 - 1);
        *v32 = v35;
        v32 -= 2;
        v33 -= 2;
        v34 -= 4;
      }
      while (v34);
      v23 -= v31 & 0x3FFFFFFFFFFFFFFCLL;
      if (v31 != (v31 & 0x3FFFFFFFFFFFFFFCLL))
      {
        do
        {
LABEL_19:
          v27 = *--v26;
          *--v23 = v27;
        }
        while (v26 != (_QWORD *)v16);
        v16 = (_BYTE *)*a1;
      }
    }
    *a1 = v23;
    a1[1] = v24;
    a1[2] = &v22[8 * v21];
    if (v16)
      operator delete(v16);
    v7 = v24;
    goto LABEL_25;
  }
  v7 = 0;
LABEL_42:
  v36 = (int *)a3[3];
  if (v36 != (int *)(a3 + 4))
  {
    v37 = (uint64_t **)(a2 + 149);
    while (1)
    {
      v38 = *((_QWORD *)v36 + 6);
      *(_BYTE *)(v38 + 136) = 0;
      *(_BYTE *)(v38 + 392) = 0;
      *(_BYTE *)(v38 + 264) = 1;
      *(_QWORD *)(v38 + 176) = std::__tree<std::__value_type<md::PatternedLineKey,md::PatternedLineSetup>,std::__map_value_compare<md::PatternedLineKey,std::__value_type<md::PatternedLineKey,md::PatternedLineSetup>,std::less<md::PatternedLineKey>,true>,std::allocator<std::__value_type<md::PatternedLineKey,md::PatternedLineSetup>>>::__emplace_unique_key_args<md::PatternedLineKey,std::piecewise_construct_t const&,std::tuple<md::PatternedLineKey const&>,std::tuple<>>(v37, v36 + 8, (_OWORD *)v36 + 2)[6];
      *(_QWORD *)(v38 + 192) = (4 * v36[8]) | 3u;
      v39 = *((_QWORD *)v36 + 6);
      *(_BYTE *)(v39 + 520) = 1;
      *(_QWORD *)(v39 + 432) = std::__tree<std::__value_type<md::PatternedLineKey,md::PatternedLineSetup>,std::__map_value_compare<md::PatternedLineKey,std::__value_type<md::PatternedLineKey,md::PatternedLineSetup>,std::less<md::PatternedLineKey>,true>,std::allocator<std::__value_type<md::PatternedLineKey,md::PatternedLineSetup>>>::__emplace_unique_key_args<md::PatternedLineKey,std::piecewise_construct_t const&,std::tuple<md::PatternedLineKey const&>,std::tuple<>>(v37, v36 + 8, (_OWORD *)v36 + 2)[8];
      *(_QWORD *)(v39 + 448) = (4 * v36[8]) | 3u;
      v40 = a1[2];
      if ((unint64_t)v7 >= v40)
        break;
      *v7++ = *((_QWORD *)v36 + 6);
LABEL_71:
      a1[1] = v7;
      v58 = (int *)*((_QWORD *)v36 + 1);
      if (v58)
      {
        do
        {
          v59 = v58;
          v58 = *(int **)v58;
        }
        while (v58);
      }
      else
      {
        do
        {
          v59 = (int *)*((_QWORD *)v36 + 2);
          v30 = *(_QWORD *)v59 == (_QWORD)v36;
          v36 = v59;
        }
        while (!v30);
      }
      v36 = v59;
      if (v59 == (int *)(a3 + 4))
        return;
    }
    v41 = (_BYTE *)*a1;
    v42 = (uint64_t)v7 - *a1;
    v43 = v42 >> 3;
    v44 = (v42 >> 3) + 1;
    if (v44 >> 61)
      abort();
    v45 = v40 - (_QWORD)v41;
    if (v45 >> 2 > v44)
      v44 = v45 >> 2;
    if ((unint64_t)v45 >= 0x7FFFFFFFFFFFFFF8)
      v46 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v46 = v44;
    if (v46)
    {
      if (v46 >> 61)
        goto LABEL_78;
      v47 = operator new(8 * v46);
    }
    else
    {
      v47 = 0;
    }
    v48 = &v47[8 * v43];
    *v48 = *((_QWORD *)v36 + 6);
    v49 = v48 + 1;
    if (v7 == (_QWORD *)v41)
    {
      v41 = v7;
    }
    else
    {
      v50 = (char *)(v7 - 1) - v41;
      if (v50 < 0x58)
      {
        v51 = v7;
        goto LABEL_66;
      }
      if ((unint64_t)((char *)v7 - &v47[v42]) < 0x20)
      {
        v51 = v7;
        goto LABEL_66;
      }
      v52 = (v50 >> 3) + 1;
      v51 = &v7[-(v52 & 0x3FFFFFFFFFFFFFFCLL)];
      v53 = &v47[8 * v43 - 16];
      v54 = (__int128 *)(v7 - 2);
      v55 = v52 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v56 = *v54;
        *(v53 - 1) = *(v54 - 1);
        *v53 = v56;
        v53 -= 2;
        v54 -= 2;
        v55 -= 4;
      }
      while (v55);
      v48 -= v52 & 0x3FFFFFFFFFFFFFFCLL;
      if (v52 != (v52 & 0x3FFFFFFFFFFFFFFCLL))
      {
        do
        {
LABEL_66:
          v57 = *--v51;
          *--v48 = v57;
        }
        while (v51 != (_QWORD *)v41);
        v41 = (_BYTE *)*a1;
      }
    }
    *a1 = v48;
    a1[1] = v49;
    a1[2] = &v47[8 * v46];
    if (v41)
      operator delete(v41);
    v7 = v49;
    goto LABEL_71;
  }
}

void sub_19F9299E8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t md::Ribbons::RibbonLayer<md::Ribbons::TransitRibbonDescriptor>::RibbonLayer(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v4;
  uint64_t v5;
  const void *v6;
  int64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  char *v10;
  char *v11;
  char *v12;
  _QWORD *v13;
  _QWORD **v14;
  _QWORD **v15;
  char *v16;
  _QWORD *v17;
  uint64_t *v18;
  uint64_t *v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  _BYTE *v25;
  char *v26;
  unint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  _OWORD *v31;
  char *v32;
  uint64_t v33;
  __int128 v34;
  gdc::GlobeTileGrid *v35;
  gdc::GlobeTileGrid *v36;
  gdc::GlobeTileGrid *v37;
  uint64_t v38;
  char *v39;
  uint64_t *v40;
  uint64_t *v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  gdc::GlobeTileGrid *v45;
  uint64_t v46;
  float *v47;
  unsigned int v48;
  float v49;
  unsigned int v50;
  unsigned int v51;
  float *v52;
  float v53;
  float v54;
  unint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  _QWORD *v61;
  char *v62;
  unint64_t *v63;
  unsigned int *v64;
  __int128 v65;
  unsigned __int8 v66;
  std::__shared_weak_count *v67;
  unint64_t *p_shared_owners;
  QuadTile *v69;
  std::__shared_count v70;
  unsigned __int8 v71;
  uint64_t v72;
  float *v73;
  unint64_t v74;
  unint64_t v75;
  unsigned __int8 v76;
  uint64_t v77;
  unsigned __int8 v78;
  uint64_t v79;
  unint64_t v80;
  std::__shared_weak_count *v81;
  unint64_t *v82;
  unint64_t v83;
  unint64_t v84;
  std::__shared_weak_count *v85;
  unint64_t *v86;
  unint64_t v87;
  unint64_t v88;
  unint64_t v89;
  unint64_t v90;
  uint64_t *v91;
  _QWORD *v92;
  uint64_t *v93;
  uint64_t v94;
  uint64_t v95;
  unint64_t v96;
  uint64_t v97;
  unint64_t v98;
  _BYTE *v99;
  uint64_t *v100;
  unint64_t v101;
  unint64_t v102;
  uint64_t v103;
  _OWORD *v104;
  uint64_t *v105;
  uint64_t v106;
  __int128 v107;
  uint64_t v108;
  uint64_t v109;
  unint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  _QWORD *v123;
  _QWORD *v124;
  uint64_t v125;
  _QWORD *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  unint64_t *v130;
  unint64_t v131;
  std::__shared_weak_count *end;
  unint64_t *v133;
  unint64_t v134;
  _QWORD *v135;
  int v136;
  uint64_t v137;
  int v138;
  uint64_t v139;
  int v140;
  unsigned __int8 v141;
  int v142;
  uint64_t v143;
  geo::read_write_lock *v144;
  const char *v145;
  malloc_zone_t *zone;
  int v147;
  uint64_t v148;
  uint64_t v149;
  geo::read_write_lock *v150;
  const char *v151;
  malloc_zone_t *v152;
  uint64_t result;
  uint64_t v154;
  void **v155;
  unint64_t v156;
  gdc::GlobeTileGrid **v157;
  QuadTile *v158;
  QuadTile *v159;
  _QWORD *v160;
  float *v161;
  _QWORD *v162;
  _QWORD *v163;
  std::__shared_weak_count *v164;
  std::vector<unsigned int> v165;
  float *v166;
  std::__shared_weak_count *v167;
  uint64_t v168[3];

  v4 = a1;
  v168[1] = *MEMORY[0x1E0C80C00];
  a1[1] = 0;
  *a1 = &off_1E42AF328;
  a1[2] = 0;
  a1[3] = 0;
  v6 = *(const void **)a2;
  v5 = *(_QWORD *)(a2 + 8);
  v7 = v5 - *(_QWORD *)a2;
  if (v5 == *(_QWORD *)a2)
  {
    v160 = 0;
    v8 = 0;
  }
  else
  {
    if (v7 < 0)
      abort();
    v8 = operator new(v5 - *(_QWORD *)a2);
    v4[1] = v8;
    v4[2] = v8;
    v9 = &v8[v7 >> 3];
    v4[3] = v9;
    memcpy(v8, v6, v7);
    v160 = v9;
    v4[2] = v9;
  }
  *((_OWORD *)v4 + 2) = 0u;
  v4[12] = 0;
  v157 = (gdc::GlobeTileGrid **)(v4 + 12);
  *((_BYTE *)v4 + 104) = 0;
  *((_BYTE *)v4 + 128) = 0;
  *((_OWORD *)v4 + 3) = 0u;
  *((_OWORD *)v4 + 4) = 0u;
  v155 = (void **)(v4 + 4);
  *(_OWORD *)((char *)v4 + 73) = 0u;
  if (*(_BYTE *)(a3 + 24))
  {
    *((_WORD *)v4 + 52) = *(_WORD *)a3;
    *(_QWORD *)((char *)v4 + 108) = *(_QWORD *)(a3 + 4);
    *((_BYTE *)v4 + 128) = 1;
  }
  v163 = v4;
  if (v8 == v160)
  {
    v10 = 0;
    v11 = 0;
    goto LABEL_71;
  }
  v158 = (QuadTile *)(v4 + 13);
  v10 = 0;
  v11 = 0;
  v12 = 0;
  while (2)
  {
    v162 = v8;
    v13 = (_QWORD *)*v8;
    v13[1] = v4;
    v14 = (_QWORD **)v13[79];
    v15 = (_QWORD **)v13[80];
    while (v14 != v15)
    {
      v17 = *v14;
      v17[1] = **v14;
      v17[3] = v17[2];
      v17[5] = v17[4];
      v166 = 0;
      v167 = 0;
      v168[0] = 0;
      memset(&v165, 0, sizeof(v165));
      v18 = (uint64_t *)v17[7];
      v19 = (uint64_t *)v17[8];
      if (v18 != v19)
      {
        do
        {
          md::Ribbons::RibbonWriter<md::Ribbons::TransitRibbonDescriptor>::computeMeshSize(*v18, &v166, &v165);
          v20 = (_QWORD *)*v18++;
          v17[1] = v20[2] + v17[1] - v20[1];
          v17[3] = v20[4] + v17[3] - v20[3];
          v17[5] = v20[6] + v17[5] - v20[5];
        }
        while (v18 != v19);
        if (v165.__begin_)
          operator delete(v165.__begin_);
      }
      if (v166)
        operator delete(v166);
      v21 = *v14;
      if (v11 < v12)
      {
        *(_QWORD *)v11 = v21;
        v16 = v11 + 8;
        goto LABEL_12;
      }
      v22 = (v11 - v10) >> 3;
      v23 = v22 + 1;
      if ((unint64_t)(v22 + 1) >> 61)
        abort();
      if ((v12 - v10) >> 2 > v23)
        v23 = (v12 - v10) >> 2;
      if ((unint64_t)(v12 - v10) >= 0x7FFFFFFFFFFFFFF8)
        v24 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v24 = v23;
      if (v24)
      {
        if (v24 >> 61)
LABEL_171:
          std::__throw_bad_array_new_length[abi:nn180100]();
        v25 = operator new(8 * v24);
      }
      else
      {
        v25 = 0;
      }
      v26 = &v25[8 * v22];
      *(_QWORD *)v26 = v21;
      v16 = v26 + 8;
      if (v11 != v10)
      {
        v27 = v11 - 8 - v10;
        if (v27 < 0x168)
        {
          v28 = v11;
          goto LABEL_34;
        }
        if (&v25[v11 - v10 - 8 - (v27 & 0xFFFFFFFFFFFFFFF8)] > &v25[v11 - v10 - 8])
        {
          v28 = v11;
          do
          {
LABEL_34:
            v29 = *((_QWORD *)v28 - 1);
            v28 -= 8;
            *((_QWORD *)v26 - 1) = v29;
            v26 -= 8;
          }
          while (v28 != v10);
          goto LABEL_35;
        }
        if (&v11[-(v27 & 0xFFFFFFFFFFFFFFF8) - 8] > v11 - 8)
        {
          v28 = v11;
          goto LABEL_34;
        }
        if ((unint64_t)(v10 - v25) < 0x20)
        {
          v28 = v11;
          goto LABEL_34;
        }
        v30 = (v27 >> 3) + 1;
        v28 = &v11[-8 * (v30 & 0x3FFFFFFFFFFFFFFCLL)];
        v31 = &v25[8 * v22 - 16];
        v32 = v11 - 16;
        v33 = v30 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v34 = *(_OWORD *)v32;
          *(v31 - 1) = *((_OWORD *)v32 - 1);
          *v31 = v34;
          v31 -= 2;
          v32 -= 32;
          v33 -= 4;
        }
        while (v33);
        v26 -= 8 * (v30 & 0x3FFFFFFFFFFFFFFCLL);
        if (v30 != (v30 & 0x3FFFFFFFFFFFFFFCLL))
          goto LABEL_34;
      }
LABEL_35:
      v12 = &v25[8 * v24];
      if (v10)
        operator delete(v10);
      v10 = v26;
LABEL_12:
      ++v14;
      v11 = v16;
    }
    v8 = v162 + 1;
    v4 = v163;
    if (v162 + 1 != v160)
      continue;
    break;
  }
  if (*((_BYTE *)v163 + 88))
  {
    v35 = (gdc::GlobeTileGrid *)operator new();
    v36 = v35;
    if (!*((_BYTE *)v163 + 128))
    {
      result = std::__throw_bad_optional_access[abi:nn180100]();
      __break(1u);
      return result;
    }
    gdc::GlobeTileGrid::GlobeTileGrid(v35, v158);
    v37 = *v157;
    *v157 = v36;
    if (v37)
    {
      v38 = *((_QWORD *)v37 + 323);
      if (v38)
        MEMORY[0x1A1AF4DE8](v38, 0x1000C8000313F17);
      MEMORY[0x1A1AF4E00](v37, 0x1020C4007FF0C4BLL);
      v36 = *v157;
    }
    *((_QWORD *)v36 + 323) = operator new[]();
    if (v10 != v11)
    {
      v39 = v10;
      do
      {
        v40 = *(uint64_t **)(*(_QWORD *)v39 + 56);
        v41 = *(uint64_t **)(*(_QWORD *)v39 + 64);
        while (v40 != v41)
        {
          v42 = *v40;
          if (!*(_QWORD *)(*v40 + 80))
          {
            v43 = *(_QWORD *)(v42 + 88);
            if (v43)
            {
              v44 = *(_QWORD *)(v42 + 72);
              v45 = *v157;
              v46 = *((_QWORD *)*v157 + 323);
              v47 = (float *)(v44 + 4);
              v48 = 1;
              do
              {
                v49 = *((float *)v45 + 648) * v47[1];
                v50 = vcvts_n_u32_f32(*(v47 - 1), 2uLL);
                if (v50 >= 3)
                  v50 = 3;
                v51 = vcvts_n_u32_f32(*v47, 2uLL);
                if (v51 >= 3)
                  v51 = 3;
                v52 = (float *)(v46 + 8 * (v50 | (4 * v51)));
                v53 = fminf(v49, *v52);
                v54 = fmaxf(v52[1], v49);
                *v52 = v53;
                v52[1] = v54;
                v47 += 3;
              }
              while (v43 > v48++);
            }
          }
          ++v40;
        }
        v39 += 8;
      }
      while (v39 != v11);
    }
    gdc::GlobeTileGrid::endBuildingHeightRange(*v157);
  }
LABEL_71:
  v56 = 0;
  v57 = 0;
  v58 = 0;
  v59 = 0;
  v60 = (v11 - v10) >> 3;
  v61 = (_QWORD *)&unk_1ECE44000;
  v156 = v60;
  while (2)
  {
    if (v57 == v60
      || (unint64_t)(*(_QWORD *)(*(_QWORD *)&v10[8 * v57] + 8) + v59 - **(_QWORD **)&v10[8 * v57]) >= 0x10000)
    {
      v62 = (char *)operator new(0xF8uLL);
      *((_QWORD *)v62 + 1) = 0;
      v63 = (unint64_t *)(v62 + 8);
      *((_QWORD *)v62 + 2) = 0;
      *(_QWORD *)v62 = &off_1E42E0020;
      *((_QWORD *)v62 + 3) = &off_1E42B5748;
      v64 = (unsigned int *)(v62 + 24);
      *((_QWORD *)v62 + 4) = 40;
      *((_DWORD *)v62 + 10) = 1;
      *((_QWORD *)v62 + 6) = 0;
      *((_QWORD *)v62 + 7) = 0;
      *((_QWORD *)v62 + 8) = 0;
      *((_QWORD *)v62 + 9) = 40 * v59;
      v65 = 0uLL;
      *((_OWORD *)v62 + 5) = 0u;
      *((_OWORD *)v62 + 6) = 0u;
      *((_QWORD *)v62 + 14) = 0;
      if ((v66 & 1) == 0)
      {
        v65 = 0uLL;
        v64 = (unsigned int *)(v62 + 24);
        if (v136)
        {
          v137 = operator new();
          v61[495] = geo::MallocZoneAllocator::MallocZoneAllocator(v137, "GeoGL", 0xA3D02C1100000005);
          v65 = 0uLL;
          v64 = (unsigned int *)(v62 + 24);
        }
      }
      *((_QWORD *)v62 + 15) = v61[495];
      *((_QWORD *)v62 + 16) = 0;
      *((_OWORD *)v62 + 11) = v65;
      *((_OWORD *)v62 + 12) = v65;
      *((_QWORD *)v62 + 26) = 0;
      *((_QWORD *)v62 + 27) = -1;
      *((_OWORD *)v62 + 10) = v65;
      *((_OWORD *)v62 + 9) = xmmword_19FFB2DD0;
      *((_DWORD *)v62 + 34) = 0;
      *((_QWORD *)v62 + 3) = &off_1E42B7CE0;
      *((_QWORD *)v62 + 29) = "BatchType/VData";
      *((_QWORD *)v62 + 30) = &ggl::TransitLineRibbon::defaultVboReflection;
      *((_QWORD *)v62 + 28) = &unk_1E42B7D00;
      v161 = (float *)v64;
      v165.__begin_ = v64;
      v165.__end_ = (std::vector<unsigned int>::pointer)v62;
      v67 = (std::__shared_weak_count *)operator new(0xF8uLL);
      v67->__shared_owners_ = 0;
      p_shared_owners = (unint64_t *)&v67->__shared_owners_;
      v67->__shared_weak_owners_ = 0;
      v67[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B5748;
      v69 = (QuadTile *)&v67[1];
      v67->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DF1E8;
      v67[1].__shared_owners_ = 2;
      LODWORD(v67[1].__shared_weak_owners_) = 257;
      v67[2].__vftable = 0;
      v67[2].__shared_owners_ = 0;
      v67[2].__shared_weak_owners_ = 0;
      v67[3].__vftable = (std::__shared_weak_count_vtbl *)(2 * v58);
      v70 = (std::__shared_count)0;
      *(_OWORD *)&v67[3].__shared_owners_ = 0u;
      v67[4].std::__shared_count = 0u;
      v67[4].__shared_weak_owners_ = 0;
      if ((v71 & 1) == 0)
      {
        v70 = (std::__shared_count)0;
        v69 = (QuadTile *)&v67[1];
        if (v138)
        {
          v139 = operator new();
          ggl::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v139, "GeoGL", 0xA3D02C1100000005);
          v70 = (std::__shared_count)0;
          v69 = (QuadTile *)&v67[1];
        }
      }
      v67[5].__vftable = (std::__shared_weak_count_vtbl *)ggl::Allocator::instance(void)::alloc;
      v67[5].__shared_owners_ = 0;
      *((std::__shared_count *)v67 + 11) = v70;
      v67[8].std::__shared_count = v70;
      v67[8].__shared_weak_owners_ = 0;
      v67[9].__vftable = (std::__shared_weak_count_vtbl *)-1;
      *((std::__shared_count *)v67 + 10) = v70;
      v67[6].std::__shared_count = (std::__shared_count)xmmword_19FFB2DD0;
      LODWORD(v67[5].__shared_weak_owners_) = 0;
      LODWORD(v67[10].__vftable) = 0;
      v67[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B6B88;
      v67[1].__shared_owners_ = 2;
      v67[9].__shared_owners_ = (uint64_t)&unk_1E42B6BA8;
      v67[9].__shared_weak_owners_ = (uint64_t)"BatchType/IData";
      v159 = v69;
      v164 = v67;
      v72 = operator new();
      v73 = v161;
      do
        v74 = __ldxr(v63);
      while (__stxr(v74 + 1, v63));
      do
        v75 = __ldxr(p_shared_owners);
      while (__stxr(v75 + 1, p_shared_owners));
      if ((v76 & 1) == 0)
      {
        v73 = v161;
        if (v140)
        {
          if ((v141 & 1) == 0
          {
            ggl::MeshTyped<ggl::TransitLineRibbon::DefaultVbo>::attributesReflection(void)::r = (uint64_t)&ggl::TransitLineRibbon::defaultVboReflection;
          }
          ggl::MeshTyped<ggl::TransitLineRibbon::DefaultVbo>::typedReflection(void)::r = (uint64_t)&ggl::MeshTyped<ggl::TransitLineRibbon::DefaultVbo>::attributesReflection(void)::r;
          *(_QWORD *)algn_1ECE43C90 = 1;
          v73 = v161;
        }
      }
      *(_QWORD *)(v72 + 32) = 0;
      *(_QWORD *)(v72 + 40) = 0;
      *(_DWORD *)(v72 + 48) = 0;
      *(_QWORD *)v72 = &off_1E42BBC08;
      *(_QWORD *)(v72 + 8) = "BatchType/Mesh";
      *(_QWORD *)(v72 + 16) = &unk_1E42BBC28;
      *(_QWORD *)(v72 + 24) = 0;
      *(_QWORD *)(v72 + 56) = &ggl::MeshTyped<ggl::TransitLineRibbon::DefaultVbo>::typedReflection(void)::r;
      *(_QWORD *)(v72 + 64) = 0;
      v77 = v72 + 64;
      *(_QWORD *)(v72 + 72) = 0;
      *(_QWORD *)(v72 + 80) = 0;
      if ((v78 & 1) == 0)
      {
        v77 = v72 + 64;
        v73 = v161;
        if (v142)
        {
          v143 = operator new();
          *(_QWORD *)(v143 + 16) = 0xA3D02C1100000005;
          *(_QWORD *)(v143 + 24) = "GeoGL";
          *(_OWORD *)(v143 + 32) = xmmword_19FFB2DE0;
          *(_QWORD *)v143 = &off_1E42B5668;
          *(_QWORD *)(v143 + 8) = "GeoGL";
          *(_OWORD *)(v143 + 72) = 0u;
          *(_OWORD *)(v143 + 88) = 0u;
          *(_OWORD *)(v143 + 104) = 0u;
          *(_OWORD *)(v143 + 120) = 0u;
          *(_OWORD *)(v143 + 136) = 0u;
          *(_OWORD *)(v143 + 152) = 0u;
          *(_OWORD *)(v143 + 168) = 0u;
          *(_OWORD *)(v143 + 184) = 0u;
          *(_OWORD *)(v143 + 200) = 0u;
          *(_OWORD *)(v143 + 216) = 0u;
          *(_OWORD *)(v143 + 232) = 0u;
          *(_QWORD *)(v143 + 248) = 0;
          *(_OWORD *)(v143 + 56) = 0u;
          v144 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v143 + 56), 0);
          if ((_DWORD)v144)
            geo::read_write_lock::logFailure(v144, (uint64_t)"initialization", v145);
          zone = malloc_create_zone(0, 0);
          *(_QWORD *)(v143 + 48) = zone;
          malloc_set_zone_name(zone, "GeoGL");
          *(_QWORD *)(v143 + 256) = os_log_create("com.apple.VectorKit", "Memory");
          ggl::Allocator::instance(void)::alloc = v143;
          v73 = v161;
          v77 = v72 + 64;
        }
      }
      v79 = ggl::Allocator::instance(void)::alloc;
      *(_QWORD *)(v72 + 120) = 0;
      *(_QWORD *)(v72 + 96) = 0;
      *(_QWORD *)(v72 + 104) = 0;
      *(_QWORD *)(v72 + 88) = v79;
      if ((v79 & 1) == 0)
      {
        v154 = v77;
        v77 = v154;
        v73 = v161;
        if (v147)
        {
          v148 = operator new();
          *(_QWORD *)(v148 + 16) = 0xA3D02C1100000005;
          *(_QWORD *)(v148 + 24) = "GeoGL";
          *(_OWORD *)(v148 + 32) = xmmword_19FFB2DE0;
          *(_QWORD *)v148 = &off_1E42B5668;
          *(_QWORD *)(v148 + 8) = "GeoGL";
          *(_OWORD *)(v148 + 72) = 0u;
          *(_OWORD *)(v148 + 88) = 0u;
          *(_OWORD *)(v148 + 104) = 0u;
          *(_OWORD *)(v148 + 120) = 0u;
          *(_OWORD *)(v148 + 136) = 0u;
          *(_OWORD *)(v148 + 152) = 0u;
          *(_OWORD *)(v148 + 168) = 0u;
          *(_OWORD *)(v148 + 184) = 0u;
          *(_OWORD *)(v148 + 200) = 0u;
          *(_OWORD *)(v148 + 216) = 0u;
          *(_OWORD *)(v148 + 232) = 0u;
          *(_QWORD *)(v148 + 248) = 0;
          v149 = v148;
          *(_OWORD *)(v148 + 56) = 0u;
          v150 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v148 + 56), 0);
          if ((_DWORD)v150)
            geo::read_write_lock::logFailure(v150, (uint64_t)"initialization", v151);
          v152 = malloc_create_zone(0, 0);
          *(_QWORD *)(v149 + 48) = v152;
          malloc_set_zone_name(v152, "GeoGL");
          *(_QWORD *)(v149 + 256) = os_log_create("com.apple.VectorKit", "Memory");
          ggl::Allocator::instance(void)::alloc = v149;
          v73 = v161;
          v77 = v154;
        }
      }
      *(_QWORD *)(v72 + 128) = ggl::Allocator::instance(void)::alloc;
      *(_QWORD *)(v72 + 136) = 0;
      *(_QWORD *)(v72 + 112) = v72 + 120;
      *(_QWORD *)v72 = &off_1E42BD978;
      *(_QWORD *)(v72 + 16) = &unk_1E42BD998;
      v166 = v73;
      v167 = (std::__shared_weak_count *)v62;
      do
        v80 = __ldxr(v63);
      while (__stxr(v80 + 1, v63));
      std::vector<std::shared_ptr<ggl::VertexData>,geo::StdAllocator<std::shared_ptr<ggl::VertexData>,ggl::Allocator>>::__assign_with_size[abi:nn180100]<std::shared_ptr<ggl::VertexData> const*,std::shared_ptr<ggl::VertexData> const*>(v77, (uint64_t *)&v166, v168, 1uLL);
      v81 = v167;
      if (v167)
      {
        v82 = (unint64_t *)&v167->__shared_owners_;
        do
          v83 = __ldaxr(v82);
        while (__stlxr(v83 - 1, v82));
        if (!v83)
        {
          ((void (*)(std::__shared_weak_count *))v81->__on_zero_shared)(v81);
          std::__shared_weak_count::__release_weak(v81);
        }
      }
      do
        v84 = __ldxr(p_shared_owners);
      while (__stxr(v84 + 1, p_shared_owners));
      v85 = *(std::__shared_weak_count **)(v72 + 104);
      *(_QWORD *)(v72 + 96) = v159;
      *(_QWORD *)(v72 + 104) = v67;
      if (v85)
      {
        v86 = (unint64_t *)&v85->__shared_owners_;
        do
          v87 = __ldaxr(v86);
        while (__stlxr(v87 - 1, v86));
        if (!v87)
        {
          ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
          std::__shared_weak_count::__release_weak(v85);
        }
      }
      *(_QWORD *)v72 = &off_1E42BA5F0;
      *(_QWORD *)(v72 + 16) = &unk_1E42BA610;
      do
        v88 = __ldaxr(p_shared_owners);
      while (__stlxr(v88 - 1, p_shared_owners));
      if (!v88)
      {
        ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
        std::__shared_weak_count::__release_weak(v67);
      }
      v61 = (_QWORD *)&unk_1ECE44000;
      do
        v89 = __ldaxr(v63);
      while (__stlxr(v89 - 1, v63));
      if (!v89)
      {
        (*(void (**)(char *))(*(_QWORD *)v62 + 16))(v62);
        std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v62);
      }
      v4 = v163;
      v91 = (uint64_t *)v163[5];
      v90 = v163[6];
      if ((unint64_t)v91 < v90)
      {
        *v91 = v72;
        v92 = v91 + 1;
        goto LABEL_128;
      }
      v93 = (uint64_t *)*v155;
      v94 = (char *)v91 - (_BYTE *)*v155;
      v95 = v94 >> 3;
      v96 = (v94 >> 3) + 1;
      if (v96 >> 61)
        abort();
      v97 = v90 - (_QWORD)v93;
      if (v97 >> 2 > v96)
        v96 = v97 >> 2;
      if ((unint64_t)v97 >= 0x7FFFFFFFFFFFFFF8)
        v98 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v98 = v96;
      if (v98)
      {
        if (v98 >> 61)
          goto LABEL_171;
        v99 = operator new(8 * v98);
      }
      else
      {
        v99 = 0;
      }
      v100 = (uint64_t *)&v99[8 * v95];
      *v100 = v72;
      v92 = v100 + 1;
      if (v91 == v93)
      {
        v93 = v91;
        v61 = (_QWORD *)&unk_1ECE44000;
      }
      else
      {
        v101 = (char *)(v91 - 1) - (char *)v93;
        if (v101 >= 0x58)
        {
          v102 = (char *)v91 - &v99[v94];
          v61 = &unk_1ECE44000;
          if (v102 < 0x20)
            goto LABEL_124;
          v103 = (v101 >> 3) + 1;
          v104 = &v99[8 * v95 - 16];
          v105 = v91 - 2;
          v106 = v103 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v107 = *(_OWORD *)v105;
            *(v104 - 1) = *((_OWORD *)v105 - 1);
            *v104 = v107;
            v104 -= 2;
            v105 -= 4;
            v106 -= 4;
          }
          while (v106);
          v100 -= v103 & 0x3FFFFFFFFFFFFFFCLL;
          v91 -= v103 & 0x3FFFFFFFFFFFFFFCLL;
          if (v103 != (v103 & 0x3FFFFFFFFFFFFFFCLL))
            goto LABEL_124;
        }
        else
        {
          v61 = (_QWORD *)&unk_1ECE44000;
          do
          {
LABEL_124:
            v108 = *--v91;
            *--v100 = v108;
          }
          while (v91 != v93);
          v93 = (uint64_t *)*v155;
        }
      }
      v4 = v163;
      v163[4] = v100;
      v163[5] = v92;
      v163[6] = &v99[8 * v98];
      if (v93)
        operator delete(v93);
LABEL_128:
      v4[5] = v92;
      if (v56 < v57)
      {
        v109 = 0;
        v110 = v56;
        do
        {
          v111 = *(_QWORD *)&v10[8 * v110];
          v112 = *(_QWORD *)(v111 + 32);
          v113 = v112 + v109;
          v114 = *(_QWORD *)(v111 + 40) + v109;
          *(_QWORD *)(v111 + 32) = v113;
          *(_QWORD *)(v111 + 40) = v114;
          v109 = v114 - v112;
          ++v110;
        }
        while (v57 != v110);
        v115 = 0;
        do
        {
          v116 = *(uint64_t **)&v10[8 * v56];
          v117 = *v116;
          v118 = *v116 + v115;
          v119 = v116[1] + v115;
          *v116 = v118;
          v116[1] = v119;
          v120 = v116[2];
          v121 = v120 + v109;
          v122 = v116[3] + v109;
          v116[2] = v121;
          v116[3] = v122;
          v116[11] = v72;
          v123 = (_QWORD *)v116[7];
          v124 = (_QWORD *)v116[8];
          if (v123 != v124)
          {
            v125 = v116[4];
            do
            {
              v126 = (_QWORD *)*v123++;
              v127 = v126[2] - v126[1];
              v126[1] = v118;
              v118 += v127;
              v128 = v126[4] - v126[3];
              v126[2] = v118;
              v126[3] = v121;
              v121 += v128;
              v129 = v126[6] - v126[5];
              v126[4] = v121;
              v126[5] = v125;
              v125 += v129;
              v126[6] = v125;
            }
            while (v123 != v124);
          }
          v115 = v119 - v117;
          v109 = v122 - v120;
          ++v56;
        }
        while (v56 != v57);
      }
      v60 = v156;
      if (!v164)
        goto LABEL_141;
      v130 = (unint64_t *)&v164->__shared_owners_;
      do
        v131 = __ldaxr(v130);
      while (__stlxr(v131 - 1, v130));
      if (!v131)
      {
        ((void (*)(std::__shared_weak_count *))v164->__on_zero_shared)(v164);
        std::__shared_weak_count::__release_weak(v164);
        end = (std::__shared_weak_count *)v165.__end_;
        if (v165.__end_)
        {
LABEL_142:
          v133 = (unint64_t *)&end->__shared_owners_;
          do
            v134 = __ldaxr(v133);
          while (__stlxr(v134 - 1, v133));
          if (!v134)
          {
            ((void (*)(std::__shared_weak_count *))end->__on_zero_shared)(end);
            std::__shared_weak_count::__release_weak(end);
          }
        }
      }
      else
      {
LABEL_141:
        end = (std::__shared_weak_count *)v165.__end_;
        if (v165.__end_)
          goto LABEL_142;
      }
      v59 = 0;
      v58 = 0;
      v56 = v57;
    }
    if (v57 < v60)
    {
      v135 = *(_QWORD **)&v10[8 * v57];
      v59 = v135[1] + v59 - *v135;
      v58 = v135[3] + v58 + v135[5] - (v135[2] + v135[4]);
    }
    if (++v57 <= v60)
      continue;
    break;
  }
  if (v10)
    operator delete(v10);
  return (uint64_t)v4;
}

void sub_19F92A98C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void **a13, void **a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  void *v26;
  uint64_t v27;
  void *v29;
  void *v30;

  MEMORY[0x1A1AF4E00](v27, 0x1020C4007FF0C4BLL);
  if (v26)
    operator delete(v26);
  std::unique_ptr<gdc::GlobeTileGrid>::~unique_ptr[abi:nn180100](a20);
  v29 = *a14;
  if (*a14)
  {
    *(_QWORD *)(a26 + 40) = v29;
    operator delete(v29);
  }
  v30 = *a13;
  if (*a13)
  {
    *(_QWORD *)(a26 + 16) = v30;
    operator delete(v30);
  }
  _Unwind_Resume(a1);
}

void std::__function::__func<md::TransitTileData::createLines(ggl::Loader *)::$_1,std::allocator<md::TransitTileData::createLines(ggl::Loader *)::$_1>,void ()(ggl::ResourceAccessor *)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::TransitTileData::createLines(ggl::Loader *)::$_1,std::allocator<md::TransitTileData::createLines(ggl::Loader *)::$_1>,void ()(ggl::ResourceAccessor *)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42CCE78;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<md::TransitTileData::createLines(ggl::Loader *)::$_1,std::allocator<md::TransitTileData::createLines(ggl::Loader *)::$_1>,void ()(ggl::ResourceAccessor *)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42CCE78;
  a2[1] = v2;
  return result;
}

void std::__function::__func<md::TransitTileData::createLines(ggl::Loader *)::$_1,std::allocator<md::TransitTileData::createLines(ggl::Loader *)::$_1>,void ()(ggl::ResourceAccessor *)>::operator()(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t **v6;
  uint64_t **v7;
  uint64_t *v8;

  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 1064);
  v3 = *(_QWORD *)(v2 + 8);
  v4 = *(_QWORD *)(v2 + 16);
  if (v3 != v4)
  {
    v5 = *a2;
    do
    {
      v6 = *(uint64_t ***)(*(_QWORD *)v3 + 632);
      v7 = *(uint64_t ***)(*(_QWORD *)v3 + 640);
      while (v6 != v7)
      {
        v8 = *v6++;
        md::Ribbons::RibbonSection<md::Ribbons::TransitRibbonDescriptor>::computeMesh(v8, v2, v5);
      }
      v3 += 8;
    }
    while (v3 != v4);
  }
}

void md::Ribbons::RibbonSection<md::Ribbons::TransitRibbonDescriptor>::computeMesh(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  float v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int8x16_t v34;
  unint64_t v35;
  char *v36;
  int32x2_t v37;
  unint64_t v38;
  float v39;
  float32x2_t v40;
  uint64_t v41;
  int8x16_t v42;
  int32x4_t *v43;
  float32x4_t v44;
  unint64_t v45;
  float32x4_t v46;
  const float *i32;
  int32x4_t v48;
  int32x4_t v49;
  int32x4_t v50;
  int8x16_t v51;
  float32x4_t v52;
  float32x4_t v53;
  float32x4_t v54;
  float32x4_t v55;
  float32x4_t v56;
  unint64_t v57;
  _QWORD *v58;
  float32x2_t v59;
  float32x2_t v60;
  double v61;
  float v62;
  float *v63;
  float v64;
  uint64_t i;
  float v66;
  float v67;
  float v69;
  float v70;
  float v71;
  float v72;
  float v73;
  float v74;
  float v75;
  int v76;
  unint64_t v77;
  float *v78;
  unint64_t v79;
  uint64_t v80;
  float v81;
  float v82;
  float v83;
  float *v84;
  float v85;
  float v86;
  float *v87;
  unint64_t v88;
  float v89;
  float v90;
  float v92;
  float v93;
  float v94;
  float v95;
  float v96;
  float v97;
  float v98;
  float v99;
  float v100;
  float v101;
  float v102;
  double v103;
  float v104;
  unint64_t v105;
  uint64_t v106;
  float v107;
  __float2 v108;
  float *v109;
  float *v110;
  float v111;
  float v112;
  float v113;
  float v114;
  float v115;
  float v116;
  float v117;
  float v118;
  float v119;
  float v120;
  unint64_t v121;
  unint64_t v122;
  unint64_t v123;
  int16x8_t v124;
  uint64_t v125;
  unint64_t v126;
  uint64_t v127;
  _WORD *v128;
  uint64_t v129;
  unint64_t v130;
  unint64_t v131;
  _WORD *v132;
  __int16 v133;
  unint64_t v134;
  __int16 v135;
  __int16 v136;
  unint64_t v137;
  uint64_t v138;
  unint64_t v139;
  _WORD *v140;
  unint64_t v141;
  int64x2_t v142;
  int64x2_t v143;
  int64x2_t v144;
  int64x2_t v145;
  int64x2_t v146;
  int64x2_t v147;
  __int16 *v148;
  unint64_t v149;
  unint64_t v150;
  unint64_t v151;
  unsigned __int8 v153;
  _QWORD *v154;
  _QWORD *v155;
  _QWORD *v156;
  _QWORD *v157;
  void (***v158)(_QWORD, _QWORD *);
  void (***v159)(_QWORD, _QWORD *);
  unsigned __int8 v160;
  uint64_t v161;
  unint64_t v162;
  unint64_t v163;
  _QWORD *v164;
  int v165;
  int v166;
  unint64_t v167;
  unint64_t v168;
  unint64_t v169;
  unint64_t v170;
  _QWORD *v171;
  int v172;
  int v173;
  unint64_t v174;
  unint64_t v175;
  uint64_t v176;
  _QWORD *v177;
  uint64_t *v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t *v182;
  uint64_t v183;
  unint64_t v184;
  float v185;
  std::vector<unsigned int>::pointer begin;
  float v187;
  float v188;
  __int128 v189;
  float v190;
  __int128 v192;
  float v193;
  std::vector<unsigned int> __p;
  void *v195[3];
  __int128 v196;
  unint64_t v197;
  unint64_t v198;
  __int16 v199;
  uint64_t v200;
  __int128 v201;
  unint64_t v202;
  unint64_t v203;
  __int16 v204;
  uint64_t v205;
  _QWORD v206[2];
  __int128 v207;
  __int128 v208;
  __int128 v209;
  _BYTE v210[32];
  __int128 v211;
  uint64_t v212;
  uint64_t v213;
  unint64_t v214;
  int v215;
  float v216;
  float v217;
  float v218;
  float v219;
  float v220;
  float v221;
  __int128 v222;
  uint64_t v223;
  char v224;
  char v225;
  unint64_t v226;
  uint64_t v227[3];
  int16x8x2_t v228;
  float32x4x3_t v229;

  v6 = 0;
  v7 = **(_QWORD **)(a1[11] + 64);
  v8 = *a1;
  v9 = a1[1];
  v201 = 0uLL;
  v10 = *(_QWORD *)(v7 + 8);
  v11 = v10 * v8;
  v12 = v10 * v9;
  *(_QWORD *)&v13 = a3;
  *(_QWORD *)&v14 = a3;
  *((_QWORD *)&v14 + 1) = v7;
  if (v10 * v9 != v10 * v8)
  {
    if (a3 && *(_BYTE *)(v7 + 17) != 2)
    {
      v189 = v14;
      v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 56))(a3);
      v14 = v189;
      *(_QWORD *)&v13 = a3;
      v6 = v15;
    }
    else
    {
      v6 = *(_QWORD *)(v7 + 72) + v11;
    }
  }
  v201 = v14;
  v202 = v11;
  v203 = v12;
  v205 = v6;
  v204 = 257;
  v16 = a1[2];
  v18 = a1[4];
  v17 = a1[5];
  if (v17 == v18)
  {
    v17 = a1[3];
  }
  else
  {
    if (v18 < v16)
      v16 = a1[4];
    if (a1[3] > v17)
      v17 = a1[3];
  }
  v19 = 0;
  v20 = *(_QWORD *)(a1[11] + 96);
  v196 = 0uLL;
  v21 = *(_QWORD *)(v20 + 8);
  v22 = v21 * v16;
  v23 = v21 * v17;
  *((_QWORD *)&v13 + 1) = v20;
  if (v21 * v17 != v21 * v16)
  {
    if (a3 && *(_BYTE *)(v20 + 17) != 2)
    {
      v192 = v13;
      v19 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 56))(a3);
      v13 = v192;
    }
    else
    {
      v19 = *(_QWORD *)(v20 + 72) + v22;
    }
  }
  v196 = v13;
  v197 = v22;
  v198 = v23;
  v200 = v19;
  v199 = 257;
  v24 = a1[2];
  v25 = a1[4];
  memset(v195, 0, sizeof(v195));
  memset(&__p, 0, sizeof(__p));
  v26 = (uint64_t *)a1[7];
  v177 = a1 + 7;
  v27 = (uint64_t *)a1[8];
  if (v26 != v27)
  {
    v28 = v19 + 2 * v25 - 2 * v16;
    v29 = v19 + 2 * v24 - 2 * v16;
    v30 = 1.0;
    v178 = (uint64_t *)a1[8];
    v179 = a2;
    while (1)
    {
      v32 = *v26;
      v206[0] = a2;
      v206[1] = v32;
      v207 = xmmword_19FFB2F80;
      v208 = xmmword_19FFB3450;
      v209 = xmmword_19FFB2FB0;
      *(_OWORD *)v210 = xmmword_19FFB2F60;
      *(_OWORD *)&v210[16] = xmmword_19FFB2F70;
      v211 = xmmword_19FFB3460;
      v227[0] = v6;
      v33 = *(_QWORD *)(v32 + 16);
      if (v33 != *(_QWORD *)(v32 + 8))
        break;
      v31 = *(_QWORD *)(v32 + 16);
LABEL_20:
      v6 += 40 * (v31 - v33);
      v29 += 2 * (*(_QWORD *)(v32 + 32) - *(_QWORD *)(v32 + 24));
      v28 += 2 * (*(_QWORD *)(v32 + 48) - *(_QWORD *)(v32 + 40));
      if (++v26 == v27)
        goto LABEL_105;
    }
    v226 = 1;
    md::Ribbons::RibbonWriter<md::Ribbons::DaVinciTrafficRibbonDescriptor>::eliminateDuplicates(v32, (uint64_t)v195, &__p, (uint64_t *)&v226);
    v35 = v226;
    if (v226 < 2)
      goto LABEL_104;
    v184 = v226 - 2;
    v181 = v28;
    v36 = (char *)v195[0];
    begin = __p.__begin_;
    v212 = v6;
    v37 = *(int32x2_t *)v195[0];
    if (v226 >= 0xA)
    {
      v41 = (v226 - 1) & 7;
      if (!v41)
        v41 = 8;
      v38 = v226 - 1 - v41;
      v34.i64[1] = *(_QWORD *)v195[0];
      v42 = (int8x16_t)vdupq_lane_s32(v37, 0);
      v43 = (int32x4_t *)((char *)v195[0] + 60);
      v44 = 0uLL;
      v45 = v38;
      v46 = 0uLL;
      do
      {
        i32 = (const float *)v43[-3].i32;
        v229 = vld3q_f32(i32);
        v49 = v43[1];
        v48 = v43[2];
        v50 = *v43;
        v43 += 6;
        v51.i64[0] = __PAIR64__(v50.u32[3], v50.u32[0]);
        v52 = (float32x4_t)vrev64q_s32(v49);
        v52.i32[0] = v50.i32[1];
        v51.i64[1] = __PAIR64__(v48.u32[1], v49.u32[2]);
        v52.i32[3] = v48.i32[2];
        v53 = vsubq_f32(v229.val[0], (float32x4_t)vextq_s8(v42, (int8x16_t)v229.val[0], 0xCuLL));
        v54 = vsubq_f32((float32x4_t)v51, (float32x4_t)vextq_s8((int8x16_t)v229.val[0], v51, 0xCuLL));
        v55 = vsubq_f32(v229.val[1], (float32x4_t)vextq_s8(v34, (int8x16_t)v229.val[1], 0xCuLL));
        v229.val[0] = vsubq_f32(v52, (float32x4_t)vextq_s8((int8x16_t)v229.val[1], (int8x16_t)v52, 0xCuLL));
        v44 = vaddq_f32(vsqrtq_f32(vmlaq_f32(vmulq_f32(v53, v53), v55, v55)), v44);
        v46 = vaddq_f32(vsqrtq_f32(vmlaq_f32(vmulq_f32(v54, v54), v229.val[0], v229.val[0])), v46);
        v34 = (int8x16_t)v52;
        v42 = v51;
        v45 -= 8;
      }
      while (v45);
      v40 = *(float32x2_t *)((char *)v48.i64 + 4);
      v56 = vaddq_f32(v46, v44);
      v39 = vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v56, v56));
    }
    else
    {
      v38 = 0;
      v39 = 0.0;
      v40 = *(float32x2_t *)v195[0];
    }
    v57 = v38 + 1;
    v58 = (char *)v195[0] + 12 * v38 + 12;
    do
    {
      v59 = *(float32x2_t *)v58;
      v58 = (_QWORD *)((char *)v58 + 12);
      v60 = vsub_f32(v59, v40);
      v39 = sqrtf(vaddv_f32(vmul_f32(v60, v60))) + v39;
      ++v57;
      v40 = v59;
    }
    while (v226 != v57);
    v61 = v39;
    v62 = v30 / v39;
    if (v61 <= 1.0e-10)
      v62 = 0.0;
    v185 = v62;
    v63 = (float *)((char *)v195[0] + 16);
    v64 = sqrtf((float)((float)(*((float *)v195[0] + 3) - *(float *)v37.i32)* (float)(*((float *)v195[0] + 3) - *(float *)v37.i32))+ (float)((float)(*((float *)v195[0] + 4) - *(float *)&v37.i32[1])* (float)(*((float *)v195[0] + 4) - *(float *)&v37.i32[1])));
    for (i = 1; i != v226; ++i)
    {
      v66 = *(v63 - 1);
      v67 = vabds_f32(*v63, *(float *)&v37.i32[1]);
      if (vabds_f32(v66, *(float *)v37.i32) >= 1.0e-10 || v67 >= 1.0e-10)
      {
        v73 = v66 - *(float *)v37.i32;
        v74 = *v63 - *(float *)&v37.i32[1];
        v75 = v30 / sqrtf((float)(v73 * v73) + (float)(v74 * v74));
        v70 = v75 * v73;
        v69 = v75 * v74;
        if (!*(_BYTE *)(v32 + 132))
          goto LABEL_42;
        goto LABEL_44;
      }
      v63 += 3;
    }
    v69 = 0.0;
    v70 = 1.0;
    if (!*(_BYTE *)(v32 + 132))
    {
LABEL_42:
      v71 = -v69;
      v72 = v70;
      goto LABEL_45;
    }
LABEL_44:
    v71 = *(float *)(v32 + 136);
    v72 = *(float *)(v32 + 140);
LABEL_45:
    v182 = v26;
    v213 = *__p.__begin_;
    v214 = (unint64_t)v37;
    v76 = *((_DWORD *)v195[0] + 2);
    v223 = 0;
    v215 = v76;
    v220 = v71;
    v221 = v72;
    v225 = 0;
    if (*(_BYTE *)(v32 + 96))
    {
      v224 = 1;
      v216 = v71 - v70;
      v217 = v72 - v69;
      v218 = -(float)(v70 + v71);
      v219 = -(float)(v69 + v72);
      v222 = xmmword_19FFB2F80;
      md::Ribbons::RibbonWriter<md::Ribbons::TransitRibbonDescriptor>::writeVertex((uint64_t)v206, v227, (uint64_t)&v213);
    }
    v180 = v29;
    v183 = v6;
    v224 = 0;
    v216 = v71;
    v217 = v72;
    v218 = -v71;
    v219 = -v72;
    v222 = xmmword_19FFB2FB0;
    md::Ribbons::RibbonWriter<md::Ribbons::TransitRibbonDescriptor>::writeVertex((uint64_t)v206, v227, (uint64_t)&v213);
    v77 = v35 - 1;
    if (v35 - 1 < 2)
    {
      v82 = v70;
      v81 = v69;
    }
    else
    {
      v78 = (float *)(v36 + 28);
      v79 = v184;
      v80 = 1;
      v81 = v69;
      v82 = v70;
      do
      {
        v213 = begin[v80];
        v84 = (float *)&v36[12 * v80];
        v86 = *v84;
        v85 = v84[1];
        if (++v80 < v35)
        {
          v87 = v78;
          v88 = v79;
          do
          {
            v89 = *(v87 - 1);
            v90 = vabds_f32(*v87, v85);
            if (vabds_f32(v89, v86) >= 1.0e-10 || v90 >= 1.0e-10)
            {
              v92 = v89 - v86;
              v93 = *v87 - v85;
              v94 = v30 / sqrtf((float)(v92 * v92) + (float)(v93 * v93));
              v82 = v94 * v92;
              v81 = v94 * v93;
              goto LABEL_60;
            }
            v87 += 3;
            --v88;
          }
          while (v88);
          v81 = v69;
          v82 = v70;
        }
LABEL_60:
        v187 = v84[4];
        v188 = v84[3];
        v95 = v82 + v70;
        v96 = v81 + v69;
        v97 = (float)(v95 * v95) + (float)(v96 * v96);
        v98 = v69;
        v99 = v70;
        if (v97 > 0.0)
        {
          v100 = v30 / sqrtf(v97);
          v99 = -(float)(v96 * v100);
          v98 = v100 * v95;
        }
        *(float *)&v214 = *v84;
        *((float *)&v214 + 1) = v85;
        v215 = *((_DWORD *)v84 + 2);
        *(float *)&v223 = v64;
        *((float *)&v223 + 1) = v64 * v185;
        v222 = xmmword_19FFB2FB0;
        v225 = 1;
        v190 = v81;
        v193 = v82;
        v101 = atan2f(v81, v82);
        v102 = v101 - atan2f(v69, v70);
        v103 = v102;
        if (v102 <= 3.14159265)
        {
          v104 = 1.0;
          if (v103 < -3.14159265)
            v102 = v103 + 6.28318531;
        }
        else
        {
          v102 = v103 + -6.28318531;
          v104 = 1.0;
        }
        v105 = (unint64_t)fmaxf(ceilf(fabsf(v102) * 0.64377), v104);
        if (v105 <= 1)
        {
          v83 = sqrtf(fmaxf(-(float)((float)((float)((float)(v99 * v193) + (float)(v98 * v190))* (float)((float)(v99 * v193) + (float)(v98 * v190)))+ -1.0), 0.1));
          v220 = v99;
          v221 = v98;
          v216 = v99 / v83;
          v217 = v98 / v83;
          v218 = -(float)(v99 / v83);
          v219 = -(float)(v98 / v83);
          md::Ribbons::RibbonWriter<md::Ribbons::TransitRibbonDescriptor>::writeVertex((uint64_t)v206, v227, (uint64_t)&v213);
        }
        else
        {
          v106 = 0;
          v107 = v104 / (float)((float)v105 + -1.0);
          do
          {
            v108 = __sincosf_stret((float)((float)((float)(int)v106 * v107) + -0.5) * v102);
            v220 = -(float)((float)(v108.__sinval * v98) - (float)(v108.__cosval * v99));
            v221 = (float)(v108.__sinval * v99) + (float)(v108.__cosval * v98);
            v216 = v220;
            v217 = v221;
            v218 = -(float)((float)(v108.__cosval * v99) - (float)(v108.__sinval * v98));
            v219 = -v221;
            md::Ribbons::RibbonWriter<md::Ribbons::TransitRibbonDescriptor>::writeVertex((uint64_t)v206, v227, (uint64_t)&v213);
            v225 = 0;
            ++v106;
          }
          while (v105 != v106);
        }
        --v79;
        v64 = sqrtf((float)((float)(v188 - v86) * (float)(v188 - v86)) + (float)((float)(v187 - v85)
                                                                               * (float)(v187 - v85)))
            + v64;
        v78 += 3;
        v82 = v193;
        v70 = v193;
        v81 = v190;
        v69 = v190;
        v30 = 1.0;
      }
      while (v80 != v77);
    }
    v109 = (float *)&v36[12 * v77];
    v6 = v183;
    v110 = (float *)&v36[12 * v184];
    v111 = *v109;
    if (vabds_f32(*v109, *v110) >= 1.0e-10)
    {
      v113 = v109[1];
      v114 = v113 - v110[1];
      v27 = v178;
      a2 = v179;
      v29 = v180;
      v28 = v181;
    }
    else
    {
      v112 = v110[1];
      v113 = v109[1];
      v27 = v178;
      a2 = v179;
      v29 = v180;
      v28 = v181;
      if (vabds_f32(v113, v112) < 1.0e-10)
        goto LABEL_76;
      v114 = v113 - v112;
    }
    v115 = v111 - *v110;
    v116 = v30 / sqrtf((float)(v115 * v115) + (float)(v114 * v114));
    v82 = v116 * v115;
    v81 = v116 * v114;
LABEL_76:
    v117 = v81;
    if (*(_BYTE *)(v32 + 133))
    {
      v118 = v82;
      v119 = *(float *)(v32 + 144);
      v120 = *(float *)(v32 + 148);
    }
    else
    {
      v119 = -v81;
      v118 = v82;
      v120 = v82;
    }
    v216 = v119;
    v217 = v120;
    v218 = -v119;
    v219 = -v120;
    v225 = 0;
    v213 = begin[v77];
    v214 = __PAIR64__(LODWORD(v113), LODWORD(v111));
    v215 = *((_DWORD *)v109 + 2);
    v220 = v119;
    v221 = v120;
    *(float *)&v223 = v64;
    *((float *)&v223 + 1) = v64 * v185;
    md::Ribbons::RibbonWriter<md::Ribbons::TransitRibbonDescriptor>::writeVertex((uint64_t)v206, v227, (uint64_t)&v213);
    if (*(_BYTE *)(v32 + 97))
    {
      v224 = 1;
      v216 = v118 + v119;
      v217 = v117 + v120;
      v218 = v118 - v119;
      v219 = v117 - v120;
      v222 = *(_OWORD *)&v210[8];
      md::Ribbons::RibbonWriter<md::Ribbons::TransitRibbonDescriptor>::writeVertex((uint64_t)v206, v227, (uint64_t)&v213);
    }
    v121 = *(_QWORD *)(v32 + 8);
    v122 = *(_QWORD *)(v32 + 16) - v121;
    v123 = v122 >> 1;
    v26 = v182;
    v124.i64[0] = 0x1000100010001;
    v124.i64[1] = 0x1000100010001;
    if (v122 < 4)
      goto LABEL_92;
    v125 = *(_QWORD *)(v32 + 8);
    v126 = 2;
    if (v123 > 2)
      v126 = v123;
    if (v126 >= 3)
    {
      v129 = 0;
      v130 = v126 - 1;
      v131 = (v126 - 1) & 0xFFFFFFFFFFFFFFFELL;
      v132 = (_WORD *)(v29 + 12);
      do
      {
        v133 = v121 + 2 * v129;
        *(v132 - 6) = v133;
        *v132 = v133 + 2;
        *(v132 - 5) = v133 + 1;
        v132[1] = v133 + 3;
        *(v132 - 4) = v133 + 2;
        v132[2] = v133 + 4;
        *(v132 - 3) = v133 + 1;
        v132[3] = v133 + 3;
        *(v132 - 2) = v133 + 3;
        v132[4] = v133 + 5;
        v129 += 2;
        *(v132 - 1) = v133 + 2;
        v132[5] = v133 + 4;
        v132 += 12;
      }
      while (v131 != v129);
      if (v130 == v131)
      {
LABEL_92:
        if (*(_QWORD *)(v32 + 48) == *(_QWORD *)(v32 + 40))
          goto LABEL_104;
        v137 = 1;
        if (*(_BYTE *)(v32 + 96))
          v137 = 2;
        if (v123 - *(char *)(v32 + 97) <= v137)
          goto LABEL_104;
        v138 = *(unsigned __int8 *)(v32 + 97);
        v139 = v123 - (v137 + v138);
        v140 = (_WORD *)v28;
        if (v139 >= 8)
        {
          v141 = v139 & 0xFFFFFFFFFFFFFFF8;
          v142 = vdupq_n_s64(v137);
          v143 = vaddq_s64(v142, (int64x2_t)xmmword_19FFB2FE0);
          v144 = vaddq_s64(v142, (int64x2_t)xmmword_19FFB2FF0);
          v145 = vaddq_s64(v142, (int64x2_t)xmmword_19FFB3000);
          v146 = vaddq_s64(v142, (int64x2_t)xmmword_19FFB2E40);
          v147 = vdupq_n_s64(v121);
          v148 = (__int16 *)v28;
          v149 = v139 & 0xFFFFFFFFFFFFFFF8;
          do
          {
            v228.val[1] = vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vaddq_s64(v147, vaddq_s64(v146, v146)), (int32x4_t)vaddq_s64(v147, vaddq_s64(v145, v145))), (int16x8_t)vuzp1q_s32((int32x4_t)vaddq_s64(v147, vaddq_s64(v144, v144)), (int32x4_t)vaddq_s64(v147, vaddq_s64(v143, v143))));
            v228.val[0] = vaddq_s16(v228.val[1], v124);
            vst2q_s16(v148, v228);
            v148 += 16;
            v228.val[0] = (int16x8_t)vdupq_n_s64(8uLL);
            v144 = vaddq_s64(v144, (int64x2_t)v228.val[0]);
            v145 = vaddq_s64(v145, (int64x2_t)v228.val[0]);
            v146 = vaddq_s64(v146, (int64x2_t)v228.val[0]);
            v143 = vaddq_s64(v143, (int64x2_t)v228.val[0]);
            v149 -= 8;
          }
          while (v149);
          if (v139 == v141)
            goto LABEL_104;
          v137 |= v141;
          v140 = (_WORD *)(v28 + 4 * (v139 & 0xFFFFFFFFFFFFFFF8));
        }
        v150 = v137 + v138 - v123;
        v151 = v121 + 2 * v137;
        do
        {
          *v140 = v151 - 2;
          v140[1] = v151;
          v151 += 2;
          v140 += 2;
        }
        while (!__CFADD__(v150++, 1));
LABEL_104:
        v32 = *v26;
        v33 = *(_QWORD *)(*v26 + 8);
        v31 = *(_QWORD *)(*v26 + 16);
        goto LABEL_20;
      }
      v127 = v130 | 1;
      LODWORD(v125) = 2 * v131 + v121;
      v128 = (_WORD *)(v29 + 12 * v131);
    }
    else
    {
      v127 = 1;
      v128 = (_WORD *)v29;
    }
    v134 = v126 - v127;
    do
    {
      *v128 = v125;
      v135 = v125 + 1;
      v128[1] = v125 + 1;
      v136 = v125 + 3;
      LODWORD(v125) = v125 + 2;
      v128[2] = v125;
      v128[3] = v135;
      v128[4] = v136;
      v128[5] = v125;
      v128 += 6;
      --v134;
    }
    while (v134);
    goto LABEL_92;
  }
LABEL_105:
  {
    v176 = operator new();
    mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v176, "VectorKitLabels", 0x5ED09DD50000000FLL);
  }
  v154 = a1 + 7;
  v155 = (_QWORD *)*v177;
  if (*v177)
  {
    v156 = (_QWORD *)a1[8];
    v157 = (_QWORD *)*v177;
    if (v156 != v155)
    {
      do
      {
        v159 = (void (***)(_QWORD, _QWORD *))*--v156;
        v158 = v159;
        *v156 = 0;
        if (v159)
        {
          (**v158)(v158, v157);
          {
            v161 = operator new();
            mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v161, "VectorKitLabels", 0x5ED09DD50000000FLL);
          }
          (*(void (**)(uint64_t, void (***)(_QWORD, _QWORD *), uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc
                                                                                            + 40))(mdm::Allocator::instance(void)::alloc, v158, 152);
        }
      }
      while (v156 != v155);
      v154 = a1 + 7;
      v157 = (_QWORD *)*v177;
    }
    a1[8] = (uint64_t)v155;
    (*(void (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)a1[10] + 40))(a1[10], v157, a1[9] - (_QWORD)v157);
    *v154 = 0;
    v154[1] = 0;
    v154[2] = 0;
  }
  *v154 = 0;
  v154[1] = 0;
  v154[2] = 0;
  if (__p.__begin_)
    operator delete(__p.__begin_);
  if (v195[0])
    operator delete(v195[0]);
  if (v200)
  {
    v163 = v197;
    v162 = v198;
    if (v198 != v197)
    {
      v164 = (_QWORD *)*((_QWORD *)&v196 + 1);
      v165 = v199;
      v166 = HIBYTE(v199);
      if ((_QWORD)v196 && *(_BYTE *)(*((_QWORD *)&v196 + 1) + 17) != 2)
        (*(void (**)(void))(*(_QWORD *)v196 + 64))();
      if (v165 && !v166)
      {
        v168 = v164[7];
        v167 = v164[8];
        if (v167 == v168)
          v168 = v164[10] - v164[9];
        if (v163 < v168)
          v168 = v163;
        if (v167 <= v162)
          v167 = v162;
        if (v167 == v168)
          v167 = v168 + v164[10] - v164[9];
        v164[7] = v168;
        v164[8] = v167;
      }
    }
  }
  if (v205)
  {
    v170 = v202;
    v169 = v203;
    if (v203 != v202)
    {
      v171 = (_QWORD *)*((_QWORD *)&v201 + 1);
      v172 = v204;
      v173 = HIBYTE(v204);
      if ((_QWORD)v201 && *(_BYTE *)(*((_QWORD *)&v201 + 1) + 17) != 2)
        (*(void (**)(void))(*(_QWORD *)v201 + 64))();
      if (v172 && !v173)
      {
        v175 = v171[7];
        v174 = v171[8];
        if (v174 == v175)
          v175 = v171[10] - v171[9];
        if (v170 < v175)
          v175 = v170;
        if (v174 <= v169)
          v174 = v169;
        if (v174 == v175)
          v174 = v175 + v171[10] - v171[9];
        v171[7] = v175;
        v171[8] = v174;
      }
    }
  }
}

void sub_19F92B944(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *__p,uint64_t a40,uint64_t a41,void *a42,uint64_t a43,uint64_t a44,char a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,char a51)
{
  if (__p)
    operator delete(__p);
  if (a42)
    operator delete(a42);
  ggl::BufferMemory::~BufferMemory((ggl::BufferMemory *)&a45);
  ggl::BufferMemory::~BufferMemory((ggl::BufferMemory *)&a51);
  _Unwind_Resume(a1);
}

void std::__function::__func<md::TransitTileData::createLines(ggl::Loader *)::$_0,std::allocator<md::TransitTileData::createLines(ggl::Loader *)::$_0>,void ()(ggl::ResourceAccessor *)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::TransitTileData::createLines(ggl::Loader *)::$_0,std::allocator<md::TransitTileData::createLines(ggl::Loader *)::$_0>,void ()(ggl::ResourceAccessor *)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42CCE30;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<md::TransitTileData::createLines(ggl::Loader *)::$_0,std::allocator<md::TransitTileData::createLines(ggl::Loader *)::$_0>,void ()(ggl::ResourceAccessor *)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42CCE30;
  a2[1] = v2;
  return result;
}

void std::__function::__func<md::TransitTileData::createLines(ggl::Loader *)::$_0,std::allocator<md::TransitTileData::createLines(ggl::Loader *)::$_0>,void ()(ggl::ResourceAccessor *)>::operator()(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t **v6;
  uint64_t **v7;
  uint64_t *v8;

  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 1072);
  v3 = *(_QWORD *)(v2 + 8);
  v4 = *(_QWORD *)(v2 + 16);
  if (v3 != v4)
  {
    v5 = *a2;
    do
    {
      v6 = *(uint64_t ***)(*(_QWORD *)v3 + 632);
      v7 = *(uint64_t ***)(*(_QWORD *)v3 + 640);
      while (v6 != v7)
      {
        v8 = *v6++;
        md::Ribbons::RibbonSection<md::Ribbons::TransitRibbonDescriptor>::computeMesh(v8, v2, v5);
      }
      v3 += 8;
    }
    while (v3 != v4);
  }
}

void std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::TransitLineRibbon::DefaultVbo>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E0020;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::TransitLineRibbon::DefaultVbo>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E0020;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::TransitLineRibbon::DefaultVbo>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void md::Ribbons::RibbonLayer<md::Ribbons::TransitRibbonDescriptor>::~RibbonLayer(_QWORD *a1)
{
  md::Ribbons::RibbonLayer<md::Ribbons::TransitRibbonDescriptor>::~RibbonLayer(a1);
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *md::Ribbons::RibbonLayer<md::Ribbons::TransitRibbonDescriptor>::~RibbonLayer(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;

  *a1 = &off_1E42AF328;
  v2 = (_QWORD *)a1[1];
  v3 = (_QWORD *)a1[2];
  while (v2 != v3)
  {
    if (*v2)
      (*(void (**)(_QWORD))(*(_QWORD *)*v2 + 8))(*v2);
    ++v2;
  }
  v4 = (_QWORD *)a1[4];
  v5 = (_QWORD *)a1[5];
  while (v4 != v5)
  {
    if (*v4)
      (*(void (**)(_QWORD))(*(_QWORD *)*v4 + 8))(*v4);
    ++v4;
  }
  v6 = a1[12];
  a1[12] = 0;
  if (v6)
  {
    v7 = *(_QWORD *)(v6 + 2584);
    if (v7)
      MEMORY[0x1A1AF4DE8](v7, 0x1000C8000313F17);
    MEMORY[0x1A1AF4E00](v6, 0x1020C4007FF0C4BLL);
  }
  v8 = (void *)a1[4];
  if (v8)
  {
    a1[5] = v8;
    operator delete(v8);
  }
  v9 = (void *)a1[1];
  if (v9)
  {
    a1[2] = v9;
    operator delete(v9);
  }
  return a1;
}

uint64_t **std::__tree<std::__value_type<md::PatternedLineKey,md::PatternedLineSetup>,std::__map_value_compare<md::PatternedLineKey,std::__value_type<md::PatternedLineKey,md::PatternedLineSetup>,std::less<md::PatternedLineKey>,true>,std::allocator<std::__value_type<md::PatternedLineKey,md::PatternedLineSetup>>>::__emplace_unique_key_args<md::PatternedLineKey,std::piecewise_construct_t const&,std::tuple<md::PatternedLineKey const&>,std::tuple<>>(uint64_t **a1, int *a2, _OWORD *a3)
{
  uint64_t *v5;
  uint64_t **v6;
  unsigned int v7;
  unsigned int v8;
  unint64_t v9;
  uint64_t **v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t *v16;

  v6 = a1 + 1;
  v5 = a1[1];
  if (!v5)
  {
    v10 = a1 + 1;
    goto LABEL_17;
  }
  v7 = *a2;
  v8 = *((unsigned __int8 *)a2 + 4);
  v9 = *((_QWORD *)a2 + 1);
  do
  {
    while (1)
    {
      v10 = (uint64_t **)v5;
      v11 = *((_DWORD *)v5 + 8);
      if (v7 != v11)
        break;
      v12 = *((unsigned __int8 *)v10 + 36);
      if (v8 != v12)
      {
        if (v8 < v12)
          goto LABEL_3;
        if (v12 >= v8)
          return v10;
        goto LABEL_14;
      }
      v13 = v10[5];
      if (v9 >= (unint64_t)v13)
      {
        if ((unint64_t)v13 >= v9)
          return v10;
        goto LABEL_14;
      }
LABEL_3:
      v5 = *v10;
      v6 = v10;
      if (!*v10)
        goto LABEL_17;
    }
    if (v7 < v11)
      goto LABEL_3;
    if (v11 >= v7)
      return v10;
LABEL_14:
    v5 = v10[1];
  }
  while (v5);
  v6 = v10 + 1;
LABEL_17:
  v14 = (uint64_t *)v10;
  v10 = (uint64_t **)operator new(0x60uLL);
  *((_OWORD *)v10 + 2) = *a3;
  *((_OWORD *)v10 + 3) = 0u;
  *((_OWORD *)v10 + 4) = 0u;
  *((_OWORD *)v10 + 5) = 0u;
  *v10 = 0;
  v10[1] = 0;
  v10[2] = v14;
  *v6 = (uint64_t *)v10;
  v15 = (uint64_t *)**a1;
  v16 = (uint64_t *)v10;
  if (v15)
  {
    *a1 = v15;
    v16 = *v6;
  }
  std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(a1[1], v16);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return v10;
}

uint64_t ggl::ConstantDataTyped<ggl::TransitLineRibbon::PatternStyle>::~ConstantDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  return a1;
}

void ggl::ConstantDataTyped<ggl::TransitLineRibbon::PatternStyle>::~ConstantDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::TransitLineRibbon::PatternStyle>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E1C58;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::TransitLineRibbon::PatternStyle>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E1C58;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::TransitLineRibbon::PatternStyle>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__shared_ptr_pointer<ggl::TransitLineRibbon::PatternedBasePipelineSetup *,std::shared_ptr<ggl::TransitLineRibbon::PatternedBasePipelineSetup>::__shared_ptr_default_delete<ggl::TransitLineRibbon::PatternedBasePipelineSetup,ggl::TransitLineRibbon::PatternedBasePipelineSetup>,std::allocator<ggl::TransitLineRibbon::PatternedBasePipelineSetup>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_pointer<ggl::TransitLineRibbon::PatternedBasePipelineSetup *,std::shared_ptr<ggl::TransitLineRibbon::PatternedBasePipelineSetup>::__shared_ptr_default_delete<ggl::TransitLineRibbon::PatternedBasePipelineSetup,ggl::TransitLineRibbon::PatternedBasePipelineSetup>,std::allocator<ggl::TransitLineRibbon::PatternedBasePipelineSetup>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

_QWORD *std::vector<std::unique_ptr<md::Ribbons::RibbonSection<md::Ribbons::TransitRibbonDescriptor>>>::__push_back_slow_path<std::unique_ptr<md::Ribbons::RibbonSection<md::Ribbons::TransitRibbonDescriptor>>>(_QWORD *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v7;
  unint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  uint64_t v12;
  _QWORD *v13;
  char *v14;
  char *v15;
  unint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  void (***v30)(_QWORD, uint64_t);
  void (***v31)(_QWORD, uint64_t);
  unsigned __int8 v32;
  uint64_t v33;

  v2 = a1[1] - *a1;
  v3 = v2 >> 3;
  v4 = (v2 >> 3) + 1;
  if (v4 >> 61)
    abort();
  v7 = a1[2] - *a1;
  if (v7 >> 2 > v4)
    v4 = v7 >> 2;
  if ((unint64_t)v7 >= 0x7FFFFFFFFFFFFFF8)
    v8 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v8 = v4;
  if (v8)
  {
    if (v8 >> 61)
      std::__throw_bad_array_new_length[abi:nn180100]();
    v9 = (char *)operator new(8 * v8);
  }
  else
  {
    v9 = 0;
  }
  v10 = &v9[8 * v3];
  v11 = &v9[8 * v8];
  v12 = *a2;
  *a2 = 0;
  *(_QWORD *)v10 = v12;
  v13 = v10 + 8;
  v14 = (char *)*a1;
  v15 = (char *)a1[1];
  if (v15 == (char *)*a1)
  {
    *a1 = v10;
    a1[1] = v13;
    a1[2] = v11;
  }
  else
  {
    v16 = (unint64_t)&v15[-*a1 - 8];
    if (v16 <= 0x77
      || &v15[-(v16 & 0xFFFFFFFFFFFFFFF8) - 8] < v10 && &v9[v2 - (v16 & 0xFFFFFFFFFFFFFFF8) - 8] < v15)
    {
      goto LABEL_43;
    }
    v17 = (v16 >> 3) + 1;
    v18 = &v9[8 * v3 - 16];
    v19 = v15 - 32;
    v20 = v17 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v22 = *(_OWORD *)v19;
      v21 = *((_OWORD *)v19 + 1);
      *(_OWORD *)v19 = 0uLL;
      *((_OWORD *)v19 + 1) = 0uLL;
      v19 -= 32;
      *((_OWORD *)v18 - 1) = v22;
      *(_OWORD *)v18 = v21;
      v18 -= 32;
      v20 -= 4;
    }
    while (v20);
    v10 -= 8 * (v17 & 0x3FFFFFFFFFFFFFFCLL);
    v15 -= 8 * (v17 & 0x3FFFFFFFFFFFFFFCLL);
    if (v17 != (v17 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_43:
      do
      {
        v23 = *((_QWORD *)v15 - 1);
        v15 -= 8;
        *(_QWORD *)v15 = 0;
        *((_QWORD *)v10 - 1) = v23;
        v10 -= 8;
      }
      while (v15 != v14);
    }
    v15 = (char *)*a1;
    v24 = (char *)a1[1];
    *a1 = v10;
    a1[1] = v13;
    a1[2] = v11;
    while (v24 != v15)
    {
      v27 = *((_QWORD *)v24 - 1);
      v24 -= 8;
      v26 = v27;
      *(_QWORD *)v24 = 0;
      if (v27)
      {
        v28 = *(_QWORD **)(v26 + 56);
        if (v28)
        {
          v29 = *(_QWORD **)(v26 + 64);
          v25 = *(_QWORD *)(v26 + 56);
          if (v29 != v28)
          {
            do
            {
              v31 = (void (***)(_QWORD, uint64_t))*--v29;
              v30 = v31;
              *v29 = 0;
              if (v31)
              {
                (**v30)(v30, v25);
                {
                  v33 = operator new();
                  mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v33, "VectorKitLabels", 0x5ED09DD50000000FLL);
                }
                (*(void (**)(uint64_t, void (***)(_QWORD, uint64_t), uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc
                                                                                                 + 40))(mdm::Allocator::instance(void)::alloc, v30, 152);
              }
            }
            while (v29 != v28);
            v25 = *(_QWORD *)(v26 + 56);
          }
          *(_QWORD *)(v26 + 64) = v28;
          (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v26 + 80) + 40))(*(_QWORD *)(v26 + 80), v25, *(_QWORD *)(v26 + 72) - v25);
        }
        MEMORY[0x1A1AF4E00](v26, 0x1020C4097AEC518);
      }
    }
  }
  if (v15)
    operator delete(v15);
  return v13;
}

uint64_t *std::unique_ptr<md::Ribbons::RibbonSection<md::Ribbons::TransitRibbonDescriptor>>::~unique_ptr[abi:nn180100](uint64_t *a1)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  malloc_zone_t *zone;
  void (***v7)(_QWORD, uint64_t);
  void (***v8)(_QWORD, uint64_t);
  unsigned __int8 v9;
  uint64_t v10;
  geo::read_write_lock *v11;
  const char *v12;
  _QWORD *v14;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    v3 = *(_QWORD **)(v2 + 56);
    if (v3)
    {
      v4 = *(_QWORD **)(v2 + 64);
      v5 = *(_QWORD *)(v2 + 56);
      if (v4 != v3)
      {
        do
        {
          v8 = (void (***)(_QWORD, uint64_t))*--v4;
          v7 = v8;
          *v4 = 0;
          if (v8)
          {
            (**v7)(v7, v5);
            {
              v14 = v3;
              v10 = operator new();
              *(_QWORD *)(v10 + 16) = 0x5ED09DD50000000FLL;
              *(_QWORD *)(v10 + 24) = "VectorKitLabels";
              *(_OWORD *)(v10 + 32) = xmmword_19FFB2E80;
              *(_QWORD *)v10 = &off_1E42B5668;
              *(_QWORD *)(v10 + 8) = "VectorKitLabels";
              *(_OWORD *)(v10 + 72) = 0u;
              *(_OWORD *)(v10 + 88) = 0u;
              *(_OWORD *)(v10 + 104) = 0u;
              *(_OWORD *)(v10 + 120) = 0u;
              *(_OWORD *)(v10 + 136) = 0u;
              *(_OWORD *)(v10 + 152) = 0u;
              *(_OWORD *)(v10 + 168) = 0u;
              *(_OWORD *)(v10 + 184) = 0u;
              *(_OWORD *)(v10 + 200) = 0u;
              *(_OWORD *)(v10 + 216) = 0u;
              *(_OWORD *)(v10 + 232) = 0u;
              *(_QWORD *)(v10 + 248) = 0;
              *(_OWORD *)(v10 + 56) = 0u;
              v11 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v10 + 56), 0);
              if ((_DWORD)v11)
                geo::read_write_lock::logFailure(v11, (uint64_t)"initialization", v12);
              zone = malloc_create_zone(0, 0);
              *(_QWORD *)(v10 + 48) = zone;
              malloc_set_zone_name(zone, "VectorKitLabels");
              *(_QWORD *)(v10 + 256) = os_log_create("com.apple.VectorKit", "Memory");
              mdm::Allocator::instance(void)::alloc = v10;
              v3 = v14;
            }
            (*(void (**)(uint64_t, void (***)(_QWORD, uint64_t), uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc
                                                                                             + 40))(mdm::Allocator::instance(void)::alloc, v7, 152);
          }
        }
        while (v4 != v3);
        v5 = *(_QWORD *)(v2 + 56);
      }
      *(_QWORD *)(v2 + 64) = v3;
      (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v2 + 80) + 40))(*(_QWORD *)(v2 + 80), v5, *(_QWORD *)(v2 + 72) - v5);
    }
    MEMORY[0x1A1AF4E00](v2, 0x1020C4097AEC518);
  }
  return a1;
}

void **std::vector<std::unique_ptr<md::Ribbons::RibbonSection<md::Ribbons::TransitRibbonDescriptor>>>::~vector[abi:nn180100](void **a1)
{
  if (*a1)
  {
    std::vector<std::unique_ptr<md::Ribbons::RibbonSection<md::Ribbons::TransitRibbonDescriptor>>>::__clear[abi:nn180100](a1);
    operator delete(*a1);
  }
  return a1;
}

_QWORD *std::vector<std::unique_ptr<md::Ribbons::RibbonSection<md::Ribbons::TransitRibbonDescriptor>>>::__clear[abi:nn180100](_QWORD *result)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  malloc_zone_t *zone;
  void (***v10)(_QWORD, uint64_t);
  void (***v11)(_QWORD, uint64_t);
  unsigned __int8 v12;
  uint64_t v13;
  geo::read_write_lock *v14;
  const char *v15;
  _QWORD *v16;

  v1 = result;
  v3 = (_QWORD *)*result;
  v2 = (_QWORD *)result[1];
  if (v2 != (_QWORD *)*result)
  {
    do
    {
      v6 = *--v2;
      v5 = v6;
      *v2 = 0;
      if (v6)
      {
        v7 = *(_QWORD **)(v5 + 56);
        if (v7)
        {
          v8 = *(_QWORD **)(v5 + 64);
          v4 = *(_QWORD *)(v5 + 56);
          if (v8 != v7)
          {
            do
            {
              v11 = (void (***)(_QWORD, uint64_t))*--v8;
              v10 = v11;
              *v8 = 0;
              if (v11)
              {
                (**v10)(v10, v4);
                {
                  v16 = v7;
                  v13 = operator new();
                  *(_QWORD *)(v13 + 16) = 0x5ED09DD50000000FLL;
                  *(_QWORD *)(v13 + 24) = "VectorKitLabels";
                  *(_OWORD *)(v13 + 32) = xmmword_19FFB2E80;
                  *(_QWORD *)v13 = &off_1E42B5668;
                  *(_QWORD *)(v13 + 8) = "VectorKitLabels";
                  *(_OWORD *)(v13 + 72) = 0u;
                  *(_OWORD *)(v13 + 88) = 0u;
                  *(_OWORD *)(v13 + 104) = 0u;
                  *(_OWORD *)(v13 + 120) = 0u;
                  *(_OWORD *)(v13 + 136) = 0u;
                  *(_OWORD *)(v13 + 152) = 0u;
                  *(_OWORD *)(v13 + 168) = 0u;
                  *(_OWORD *)(v13 + 184) = 0u;
                  *(_OWORD *)(v13 + 200) = 0u;
                  *(_OWORD *)(v13 + 216) = 0u;
                  *(_OWORD *)(v13 + 232) = 0u;
                  *(_QWORD *)(v13 + 248) = 0;
                  *(_OWORD *)(v13 + 56) = 0u;
                  v14 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v13 + 56), 0);
                  if ((_DWORD)v14)
                    geo::read_write_lock::logFailure(v14, (uint64_t)"initialization", v15);
                  zone = malloc_create_zone(0, 0);
                  *(_QWORD *)(v13 + 48) = zone;
                  malloc_set_zone_name(zone, "VectorKitLabels");
                  *(_QWORD *)(v13 + 256) = os_log_create("com.apple.VectorKit", "Memory");
                  mdm::Allocator::instance(void)::alloc = v13;
                  v7 = v16;
                }
                (*(void (**)(uint64_t, void (***)(_QWORD, uint64_t), uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc
                                                                                                 + 40))(mdm::Allocator::instance(void)::alloc, v10, 152);
              }
            }
            while (v8 != v7);
            v4 = *(_QWORD *)(v5 + 56);
          }
          *(_QWORD *)(v5 + 64) = v7;
          (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v5 + 80) + 40))(*(_QWORD *)(v5 + 80), v4, *(_QWORD *)(v5 + 72) - v4);
        }
        result = (_QWORD *)MEMORY[0x1A1AF4E00](v5, 0x1020C4097AEC518);
      }
    }
    while (v2 != v3);
  }
  v1[1] = v3;
  return result;
}

void md::Ribbons::RibbonBatch<md::Ribbons::TransitRibbonDescriptor>::~RibbonBatch(uint64_t a1)
{
  md::Ribbons::RibbonBatch<md::Ribbons::TransitRibbonDescriptor>::~RibbonBatch(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t md::Ribbons::RibbonBatch<md::Ribbons::TransitRibbonDescriptor>::~RibbonBatch(uint64_t a1)
{
  _QWORD *v2;
  unint64_t v3;
  void (***v4)(void);
  void (**v5)(void);
  _QWORD **v6;
  _QWORD *v7;
  _QWORD *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  void *v15;
  void *v16;

  *(_QWORD *)a1 = &off_1E42AF0E8;
  if (*(_QWORD *)(a1 + 632))
  {
    std::vector<std::unique_ptr<md::Ribbons::RibbonSection<md::Ribbons::TransitRibbonDescriptor>>>::__clear[abi:nn180100]((_QWORD *)(a1 + 632));
    operator delete(*(void **)(a1 + 632));
  }
  v2 = *(_QWORD **)(a1 + 608);
  do
  {
    if (v2[1])
    {
      v3 = 0;
      v4 = (void (***)(void))(v2 + 2);
      do
      {
        v5 = *v4;
        v4 += 15;
        (*v5)();
        ++v3;
      }
      while (v3 < v2[1]);
    }
    v2[1] = 0;
    v2 = (_QWORD *)*v2;
  }
  while (v2);
  v6 = *(_QWORD ***)(a1 + 608);
  *(_QWORD *)(a1 + 616) = v6;
  v7 = *v6;
  *v6 = 0;
  if (v7)
  {
    do
    {
      v8 = (_QWORD *)*v7;
      free(v7);
      v7 = v8;
    }
    while (v8);
    v6 = *(_QWORD ***)(a1 + 608);
  }
  free(v6);
  v9 = *(void **)(a1 + 584);
  if (v9)
  {
    *(_QWORD *)(a1 + 592) = v9;
    operator delete(v9);
  }
  v10 = *(_QWORD *)(a1 + 552);
  if (v10)
  {
    v11 = *(_QWORD *)(a1 + 560);
    v12 = *(_QWORD *)(a1 + 552);
    if (v11 != v10)
    {
      v13 = *(_QWORD *)(a1 + 560);
      do
      {
        v15 = *(void **)(v13 - 24);
        v13 -= 24;
        v14 = v15;
        if (v15)
        {
          *(_QWORD *)(v11 - 16) = v14;
          operator delete(v14);
        }
        v11 = v13;
      }
      while (v13 != v10);
      v12 = *(_QWORD *)(a1 + 552);
    }
    *(_QWORD *)(a1 + 560) = v10;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 576) + 40))(*(_QWORD *)(a1 + 576), v12, *(_QWORD *)(a1 + 568) - v12);
  }
  v16 = *(void **)(a1 + 528);
  if (v16)
  {
    *(_QWORD *)(a1 + 536) = v16;
    operator delete(v16);
  }
  *(_QWORD *)(a1 + 400) = &off_1E42B59B0;
  *(_QWORD *)(a1 + 416) = 3131955885;
  *(_QWORD *)(a1 + 272) = &off_1E42B59B0;
  *(_QWORD *)(a1 + 288) = 3131955885;
  *(_QWORD *)(a1 + 144) = &off_1E42B59B0;
  *(_QWORD *)(a1 + 160) = 3131955885;
  *(_QWORD *)(a1 + 16) = &off_1E42B59B0;
  *(_QWORD *)(a1 + 32) = 3131955885;
  return a1;
}

void md::TransitTileData::updateLineStyles(uint64_t a1, uint64_t a2, char a3, char a4, float *a5, uint8x8_t a6)
{
  uint64_t v6;
  uint64_t v7;
  char v8;
  int v9;
  BOOL v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  _BYTE *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  char *v29;
  _BYTE *v30;
  uint64_t v31;
  uint64_t v32;
  float v33;
  unint64_t v34;
  char *v35;
  int16x8_t v36;
  char *v37;
  int v38;
  uint64_t **v39;
  uint64_t **v40;
  uint64_t *v41;
  unint64_t v42;
  unsigned int v43;
  unsigned int v44;
  _BOOL4 v45;
  int v46;
  unsigned int v47;
  unsigned int v48;
  _BOOL4 v49;
  int v50;
  char *v51;
  uint64_t *v52;
  char *v53;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  char *v58;
  char *v59;
  uint64_t *v60;
  char *v61;
  unint64_t v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  __int128 *v66;
  _OWORD *v67;
  uint64_t v68;
  __int128 v69;
  uint64_t v70;
  int v71;
  char *v72;
  char *v73;
  uint64_t **v74;
  char *v75;
  uint64_t *v76;
  uint64_t *v77;
  unint64_t v78;
  uint64_t v79;
  unsigned int v80;
  uint64_t v81;
  uint64_t **v82;
  uint64_t v83;
  uint64_t **v84;
  uint64_t ***v85;
  uint64_t *v86;
  uint64_t **v87;
  char *v88;
  unint64_t v90;
  uint64_t *v91;
  uint64_t **v92;
  uint64_t **v93;
  unint64_t v94;
  char *v95;
  uint64_t *v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t v99;
  uint64_t v100;
  unint64_t v101;
  unint64_t v102;
  char *v103;
  char *v104;
  uint64_t *v105;
  char *v106;
  unint64_t v107;
  char *v108;
  uint64_t v109;
  uint64_t v110;
  __int128 *v111;
  _OWORD *v112;
  uint64_t v113;
  __int128 v114;
  uint64_t v115;
  float v116;
  char v117;
  float v118;
  uint64_t *v119;
  char *v120;
  uint64_t v121;
  unint64_t v122;
  uint64_t v123;
  unsigned int v124;
  uint64_t v125;
  char *v126;
  uint64_t v127;
  _QWORD *v128;
  _QWORD *v129;
  uint64_t *v130;
  uint64_t **v131;
  char *v132;
  BOOL v133;
  uint64_t *v135;
  unsigned int v136;
  uint64_t **v137;
  uint64_t **v138;
  unsigned int v139;
  char *v140;
  uint64_t *v141;
  uint64_t v142;
  uint64_t v143;
  unint64_t v144;
  uint64_t v145;
  unint64_t v146;
  unint64_t v147;
  char *v148;
  char *v149;
  uint64_t *v150;
  char *v151;
  unint64_t v152;
  char *v153;
  uint64_t v154;
  uint64_t v155;
  __int128 *v156;
  _OWORD *v157;
  uint64_t v158;
  __int128 v159;
  uint64_t v160;
  uint64_t *v161;
  char *v162;
  uint64_t v163;
  int v164;
  int v165;
  float v166;
  float v167;
  float v168;
  float v169;
  uint64_t v170;
  unint64_t v171;
  uint64_t v172;
  unsigned int v173;
  uint64_t v174;
  char *v175;
  uint64_t v176;
  _QWORD *v177;
  _QWORD *v178;
  uint64_t *v179;
  uint64_t **v180;
  unsigned __int8 *v181;
  int v182;
  unsigned int v183;
  uint64_t v184;
  _QWORD *v185;
  _QWORD *v186;
  unsigned __int8 *v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  _BYTE *v191;
  int v192;
  uint64_t v193;
  float v194;
  float v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t *v198;
  uint64_t *v199;
  float v200;
  uint64_t **v201;
  float *v202;
  uint64_t *v203;
  uint64_t v204;
  float v205;
  unint64_t v206;
  uint64_t *v207;
  uint64_t **v208;
  uint64_t **v209;
  unint64_t v210;
  _QWORD *v211;
  uint64_t v212;
  uint64_t *v213;
  _BYTE *v214;
  int64_t v215;
  char *v216;
  _BYTE *v217;
  unint64_t v218;
  int64_t v219;
  _OWORD *v220;
  char *v221;
  uint64_t *v222;
  uint64_t *v223;
  unint64_t v224;
  _QWORD *v225;
  uint64_t v226;
  uint64_t v227;
  __int128 *v228;
  _OWORD *v229;
  uint64_t v230;
  __int128 v231;
  uint64_t v232;
  unint64_t v233;
  uint64_t v234;
  uint64_t *v235;
  uint64_t *v236;
  size_t v237;
  unint64_t v238;
  _BYTE *v239;
  _BYTE *v240;
  unint64_t v241;
  int v242;
  uint64_t v243;
  uint64_t v244;
  unint64_t v245;
  char *v246;
  char *v247;
  uint64_t v248;
  char v249;
  unint64_t v250;
  _QWORD **v251;
  unsigned int v252;
  char v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  char v259;
  uint64_t v260;
  char v261;
  _BYTE *v262;
  char v263;
  uint64_t v264;
  int v265;
  int v266;
  unsigned int v267;
  int v268;
  int v269;
  int v270;
  _QWORD *v271;
  uint64_t v272;
  char v273;
  uint64_t v274;
  _DWORD *v275;
  int v276;
  int v277;
  int v278;
  _DWORD *v279;
  _BYTE *v280;
  int v281;
  int v282;
  _QWORD *v283;
  _BOOL4 v284;
  BOOL v285;
  _QWORD *v286;
  int v287;
  BOOL v288;
  int v289;
  int v290;
  BOOL v291;
  int v292;
  uint64_t v293;
  __int128 v294;
  uint64_t *v295;
  uint64_t *v296;
  unint64_t v297;
  _QWORD *v298;
  uint64_t *v299;
  uint64_t v300;
  uint64_t v301;
  BOOL v302;
  BOOL v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  float v307;
  float v308;
  char v309;
  unsigned int v310;
  uint64_t v311;
  int v312;
  int v313;
  int v314;
  _DWORD *v315;
  _DWORD *v316;
  _DWORD *v317;
  int v318;
  int v319;
  _DWORD *v320;
  _BOOL4 v321;
  BOOL v322;
  _QWORD *v323;
  int v324;
  BOOL v325;
  int v326;
  int v327;
  BOOL v328;
  int v329;
  uint64_t *v330;
  char v331;
  uint64_t *v332;
  _QWORD *v333;
  uint64_t *v334;
  md::TransitLink *v335;
  md::TransitLink *v336;
  uint64_t *v337;
  const md::TransitLink **v338;
  uint64_t *v339;
  uint64_t *v340;
  _QWORD *v341;
  uint64_t *v342;
  uint64_t *v343;
  const md::TransitLink **v344;
  _QWORD *v345;
  _QWORD *v346;
  _QWORD *v347;
  _QWORD *v348;
  uint64_t *v349;
  md::TransitLink *v350;
  uint64_t *v351;
  const md::TransitLink **v352;
  uint64_t *v353;
  uint64_t *v354;
  _QWORD *v355;
  const md::TransitLink **v356;
  _QWORD *v357;
  _QWORD *v358;
  _QWORD *v359;
  _QWORD *v360;
  unint64_t v361;
  uint64_t *v362;
  uint64_t v363;
  unint64_t v364;
  uint64_t *v366;
  uint64_t *v367;
  _QWORD *v368;
  uint64_t v369;
  unint64_t v370;
  BOOL v371;
  _QWORD *v372;
  _QWORD *v373;
  uint64_t *v375;
  uint64_t *v376;
  uint64_t *v377;
  uint64_t *v378;
  _QWORD *v379;
  float v384;
  float v385;
  float v386;
  uint64_t *v387;
  md::TransitLink *v388;
  char v389;
  float v390;
  _QWORD *v391;
  _QWORD *v392;
  _QWORD *v393;
  md::TransitLink *v394;
  uint64_t v395;
  const md::TransitLink *v396;
  const md::TransitLink *v397;
  float v398;
  uint64_t *v399;
  uint64_t *v400;
  md::TransitLink *v401;
  uint64_t v402;
  const md::TransitLink *v403;
  const md::TransitLink *v404;
  float v405;
  _QWORD *v406;
  _QWORD *v407;
  uint64_t v408;
  uint64_t v409;
  int64_t v410;
  unint64_t v411;
  char *v412;
  uint64_t *v413;
  uint64_t v414;
  uint64_t *v415;
  const std::nothrow_t *v416;
  uint64_t *v417;
  uint64_t *v418;
  _QWORD *v419;
  uint64_t v420;
  _QWORD *v421;
  _QWORD *v422;
  _QWORD *v423;
  char *v424;
  __n128 *v425;
  char *v426;
  char *v427;
  char *v428;
  int64_t v429;
  int64_t v430;
  unint64_t v431;
  char *v432;
  unint64_t v433;
  size_t v434;
  BOOL *v435;
  unint64_t v436;
  uint64_t v437;
  int v438;
  BOOL *v439;
  _QWORD *v440;
  uint64_t v441;
  int v442;
  char *v443;
  char *v444;
  char *v445;
  char *v446;
  void *v447;
  uint64_t v448;
  BOOL *v449;
  uint64_t *v450;
  uint64_t *v451;
  char *v452;
  uint64_t v453;
  char *v454;
  char v455;
  char *v456;
  uint64_t v457;
  uint64_t v458;
  int8x8_t *v459;
  int8x8_t v460;
  uint8x8_t v461;
  uint64_t v462;
  int8x8_t v463;
  unint64_t v464;
  unint64_t v465;
  _QWORD *v466;
  _QWORD *v467;
  uint64_t v468;
  unint64_t v469;
  uint64_t v470;
  uint64_t v471;
  char *v472;
  uint64_t v473;
  uint64_t i;
  unint64_t v475;
  char **v476;
  char **v477;
  uint64_t *v478;
  unint64_t v479;
  uint64_t *v480;
  uint64_t *v481;
  uint64_t v482;
  uint64_t *v483;
  uint64_t v484;
  _BYTE *v485;
  int v486;
  uint64_t v487;
  int v488;
  uint64_t v489;
  uint64_t v490;
  uint64_t v491;
  uint64_t *v492;
  uint64_t v493;
  uint64_t *v494;
  char v495;
  char *v496;
  uint64_t v497;
  uint64_t v498;
  unint64_t v500;
  uint64_t **v501;
  uint64_t *v502;
  uint64_t *v503;
  uint64_t **v504;
  unint64_t v505;
  uint64_t *v506;
  uint64_t *v507;
  int v508;
  char *v509;
  uint64_t v510;
  uint64_t **v511;
  uint64_t **v512;
  char *v513;
  uint64_t **v514;
  uint64_t *v515;
  uint64_t v516;
  uint64_t **v517;
  int v518;
  int v519;
  char **v520;
  char **v521;
  uint64_t *v522;
  unint64_t v523;
  unsigned int v524;
  unsigned int v525;
  _BOOL4 v526;
  int v527;
  unsigned int v528;
  unsigned int v529;
  _BOOL4 v530;
  int v531;
  _QWORD *v532;
  uint64_t v533;
  uint64_t **v534;
  int v535;
  char **v536;
  char **v537;
  uint64_t *v538;
  unint64_t v539;
  unsigned int v540;
  unsigned int v541;
  _BOOL4 v542;
  int v543;
  unsigned int v544;
  unsigned int v545;
  _BOOL4 v546;
  int v547;
  _QWORD *v548;
  uint64_t v549;
  uint64_t **v550;
  uint64_t *v551;
  uint64_t **v552;
  uint64_t *v553;
  unsigned int v554;
  unsigned int v555;
  _BOOL4 v556;
  int v557;
  unsigned int v558;
  uint64_t *v559;
  uint64_t **v560;
  unint64_t v561;
  void *v562;
  uint64_t **v563;
  _DWORD *v564;
  unsigned int v565;
  unsigned int v566;
  _BOOL4 v567;
  int v568;
  _DWORD *v569;
  void *v570;
  unint64_t v571;
  BOOL *v572;
  unint64_t v573;
  unint64_t v574;
  unint64_t v575;
  char v576;
  uint64_t *v577;
  uint64_t v578;
  char *v579;
  _DWORD *v580;
  uint64_t v581;
  unsigned int v582;
  unint64_t v583;
  uint64_t **v584;
  uint64_t *v585;
  uint64_t *v586;
  uint64_t **v587;
  unint64_t v588;
  _QWORD *v589;
  unsigned int *v590;
  char *v591;
  unint64_t v592;
  uint64_t v593;
  char *v594;
  _DWORD *v595;
  int v596;
  uint64_t v597;
  uint64_t v598;
  unint64_t v599;
  unint64_t v600;
  uint64_t v601;
  unint64_t v602;
  unint64_t v603;
  char **v604;
  char **v605;
  uint64_t *v606;
  unint64_t v607;
  uint64_t *v608;
  uint64_t *v609;
  uint64_t v610;
  uint64_t *v611;
  uint64_t v612;
  _BYTE *v613;
  int v614;
  uint64_t v615;
  int v616;
  uint64_t v617;
  uint64_t v618;
  uint64_t v619;
  uint64_t *v620;
  uint64_t v621;
  char *v622;
  uint64_t v623;
  unint64_t v624;
  void *v625;
  _QWORD *v626;
  unint64_t v627;
  _QWORD *v628;
  unint64_t v629;
  float v630;
  uint64_t v631;
  unint64_t *v632;
  unint64_t *v633;
  float *v634;
  float v635;
  float v636;
  float v637;
  float v638;
  unint64_t v639;
  _QWORD *v640;
  float v641;
  unint64_t v642;
  float *v643;
  unint64_t v644;
  BOOL v645;
  _QWORD *v646;
  md::TransitJunction *v647;
  float v648;
  md::TransitJunction *v649;
  uint64_t *v650;
  unint64_t v651;
  _QWORD *v652;
  unsigned __int8 v653;
  uint64_t v654;
  uint64_t v655;
  uint64_t v656;
  uint64_t v657;
  __int128 v658;
  std::__shared_weak_count *v659;
  unint64_t *p_shared_owners;
  unint64_t v661;
  _QWORD *v662;
  _QWORD *v663;
  uint64_t v664;
  char v665;
  uint64_t v666;
  unsigned __int8 *v667;
  uint64_t v668;
  unsigned int v669;
  uint64_t v670;
  uint64_t v671;
  _BYTE *v672;
  int v673;
  uint64_t v674;
  int16x8_t v675;
  uint64_t v676;
  int v677;
  unint64_t v678;
  uint64_t v679;
  uint64_t v680;
  uint64_t v681;
  unint64_t v682;
  char v683;
  uint64_t v684;
  uint64_t v685;
  uint64_t v686;
  unint64_t *v687;
  unint64_t v688;
  std::__shared_weak_count *v689;
  unint64_t *v690;
  unint64_t v691;
  uint64_t v692;
  geo::read_write_lock *v693;
  const char *v694;
  malloc_zone_t *zone;
  uint64_t v696;
  uint64_t v697;
  uint64_t v698;
  uint64_t v699;
  uint64_t v700;
  void *v701;
  uint64_t v702;
  uint64_t v703;
  uint64_t v704;
  void *v705;
  char *v706;
  char *v707;
  unint64_t v708;
  unint64_t v709;
  uint64_t v710;
  uint64_t v711;
  unint64_t v712;
  _QWORD *v713;
  uint64_t v714;
  double v715;
  double v716;
  double v717;
  uint64_t v718;
  uint64_t v719;
  uint64_t v720;
  uint64_t v721;
  void *v722;
  uint64_t v723;
  uint64_t v724;
  uint64_t v725;
  uint64_t v726;
  void *v727;
  uint64_t v728;
  float v729;
  float v730;
  float v731;
  uint64_t v732;
  uint64_t v733;
  float v734;
  float v735;
  float v736;
  float v737;
  float v738;
  float v739;
  float v740;
  unsigned __int8 **v741;
  unsigned __int8 **v742;
  unsigned __int8 *v743;
  uint64_t v744;
  uint64_t v745;
  unsigned int v746;
  unsigned int v747;
  uint64_t v748;
  _BYTE *v749;
  int v750;
  __int128 *v751;
  uint64_t *v752;
  uint64_t **v753;
  uint64_t **v754;
  uint64_t **v755;
  unsigned int v756;
  _DWORD *v757;
  uint64_t v758;
  uint64_t *v759;
  uint64_t *v760;
  uint64_t v761;
  uint64_t *v762;
  uint64_t v763;
  _BYTE *v764;
  int v765;
  uint64_t v766;
  int v767;
  uint64_t *v768;
  uint64_t v769;
  uint64_t v770;
  uint64_t *v771;
  uint64_t v772;
  uint64_t v773;
  uint64_t *v774;
  uint64_t **v775;
  uint64_t **v776;
  unsigned int v777;
  _DWORD *v778;
  uint64_t v779;
  uint64_t *v780;
  uint64_t *v781;
  uint64_t **v782;
  uint64_t **v783;
  unsigned int v784;
  _DWORD *v785;
  uint64_t v786;
  uint64_t *v787;
  uint64_t *v788;
  uint64_t v789;
  uint64_t *v790;
  uint64_t v791;
  _BYTE *v792;
  int v793;
  uint64_t v794;
  int v795;
  uint64_t *v796;
  uint64_t v797;
  uint64_t v798;
  uint64_t *v799;
  uint64_t v800;
  unsigned int v801;
  unint64_t v802;
  __int128 *v803;
  uint64_t *v804;
  uint64_t *v805;
  uint64_t *v806;
  uint64_t *v807;
  uint64_t **v808;
  uint64_t *v809;
  unsigned int v810;
  unsigned int v811;
  unint64_t v812;
  _DWORD *v813;
  _QWORD *v814;
  uint64_t *v815;
  uint64_t v816;
  uint64_t *v817;
  uint64_t **v818;
  uint64_t *v819;
  unsigned int v820;
  unsigned int v821;
  unint64_t v822;
  _DWORD *v823;
  _QWORD *v824;
  uint64_t *v825;
  uint64_t *v826;
  uint64_t *v827;
  uint64_t **v828;
  unsigned int v829;
  unsigned int v830;
  unint64_t v831;
  void *v832;
  uint64_t v833;
  uint64_t *v834;
  uint64_t v835;
  _QWORD *v836;
  _QWORD *v837;
  uint64_t v838;
  uint64_t v839;
  std::__shared_weak_count *v840;
  unint64_t *v841;
  unint64_t v842;
  unint64_t *v843;
  unint64_t v844;
  uint64_t v845;
  uint64_t v846;
  std::__shared_weak_count *v847;
  unint64_t *v848;
  unint64_t v849;
  uint64_t v850;
  uint64_t v851;
  std::__shared_weak_count *v852;
  unint64_t *v853;
  unint64_t v854;
  _QWORD *v855;
  uint64_t v856;
  _QWORD *v857;
  uint64_t v858;
  unint64_t *v859;
  unint64_t v860;
  std::__shared_weak_count *v861;
  unint64_t *v862;
  unint64_t v863;
  uint64_t v864;
  uint64_t v865;
  uint64_t v866;
  uint64_t v867;
  unint64_t *v868;
  unint64_t v869;
  std::__shared_weak_count *v870;
  unint64_t *v871;
  unint64_t v872;
  uint64_t v873;
  uint64_t v874;
  uint64_t v875;
  uint64_t v876;
  unint64_t *v877;
  unint64_t v878;
  std::__shared_weak_count *v879;
  unint64_t *v880;
  unint64_t v881;
  _QWORD *v882;
  std::__shared_weak_count *v883;
  unint64_t *v884;
  unint64_t v885;
  uint64_t v886;
  std::__shared_weak_count *v887;
  unint64_t *v888;
  uint64_t v889;
  uint64_t v890;
  uint64_t v891;
  unint64_t v892;
  std::__shared_weak_count *v893;
  unint64_t *v894;
  unint64_t v895;
  unint64_t v896;
  uint64_t v897;
  _QWORD *v898;
  _QWORD *v899;
  uint64_t v900;
  uint64_t v901;
  std::__shared_weak_count *v902;
  unint64_t *v903;
  unint64_t v904;
  unint64_t *v905;
  unint64_t v906;
  uint64_t v907;
  uint64_t v908;
  std::__shared_weak_count *v909;
  unint64_t *v910;
  unint64_t v911;
  uint64_t v912;
  uint64_t v913;
  std::__shared_weak_count *v914;
  unint64_t *v915;
  unint64_t v916;
  _QWORD *v917;
  uint64_t v918;
  _QWORD *v919;
  uint64_t v920;
  unint64_t *v921;
  unint64_t v922;
  std::__shared_weak_count *v923;
  unint64_t *v924;
  unint64_t v925;
  uint64_t v926;
  uint64_t v927;
  uint64_t v928;
  uint64_t v929;
  unint64_t *v930;
  unint64_t v931;
  std::__shared_weak_count *v932;
  unint64_t *v933;
  unint64_t v934;
  uint64_t v935;
  uint64_t v936;
  uint64_t v937;
  uint64_t v938;
  unint64_t *v939;
  unint64_t v940;
  std::__shared_weak_count *v941;
  unint64_t *v942;
  unint64_t v943;
  _QWORD *v944;
  std::__shared_weak_count *v945;
  unint64_t *v946;
  unint64_t v947;
  uint64_t v948;
  uint64_t v949;
  uint64_t v950;
  std::__shared_weak_count *v951;
  unint64_t *v952;
  unint64_t v953;
  uint64_t *v954;
  uint64_t *j;
  unsigned int v956;
  unsigned int v957;
  unint64_t v958;
  char *v959;
  _QWORD *v960;
  uint64_t *v961;
  _QWORD *v962;
  uint64_t v963;
  std::__shared_weak_count *v964;
  unint64_t *v965;
  unint64_t v966;
  uint64_t ***v967;
  uint64_t v968;
  _QWORD *v969;
  uint64_t v970;
  std::__shared_weak_count *v971;
  unint64_t *v972;
  unint64_t v973;
  void **v974;
  uint64_t v975;
  uint64_t v976;
  uint64_t v977;
  char *v978;
  unsigned __int8 **v979;
  unsigned __int8 **v980;
  unsigned __int8 *v981;
  uint64_t *v982;
  uint64_t *v983;
  uint64_t v984;
  unsigned int v985;
  uint64_t v986;
  uint64_t v987;
  _BYTE *v988;
  int v989;
  uint64_t v990;
  uint64_t v991;
  int v992;
  float v993;
  float v994;
  float v995;
  float v996;
  uint64_t v997;
  uint64_t v998;
  BOOL v999;
  uint64_t v1000;
  float v1001;
  uint64_t v1002;
  uint64_t v1003;
  BOOL v1004;
  uint64_t v1005;
  uint64_t v1006;
  float *v1007;
  uint64_t v1008;
  uint64_t v1009;
  uint64_t v1010;
  uint64_t v1011;
  _QWORD *v1012;
  unint64_t v1013;
  uint64_t v1014;
  float v1015;
  float v1016;
  float v1017;
  float v1018;
  uint64_t v1019;
  float *v1020;
  uint64_t v1021;
  uint64_t v1022;
  uint64_t v1023;
  uint64_t v1024;
  _QWORD *v1025;
  unint64_t v1026;
  uint64_t v1027;
  float v1028;
  float v1029;
  float v1030;
  unint64_t v1031;
  _QWORD *v1032;
  unsigned int v1033;
  uint64_t v1034;
  uint64_t v1035;
  uint64_t v1036;
  uint64_t v1037;
  uint64_t v1038;
  float v1039;
  uint64_t v1040;
  float v1041;
  _QWORD *v1042;
  uint64_t v1043;
  uint64_t v1044;
  uint64_t v1045;
  uint64_t v1046;
  uint64_t v1047;
  uint64_t v1048;
  uint64_t v1049;
  uint64_t v1050;
  uint64_t v1051;
  unint64_t v1052;
  unint64_t v1053;
  unsigned int v1054;
  float v1055;
  _QWORD *v1057;
  uint64_t v1058;
  char *v1059;
  char *v1060;
  uint64_t v1061;
  _DWORD *v1062;
  __int128 v1063;
  std::__shared_weak_count *v1064;
  unint64_t *v1065;
  unint64_t v1066;
  std::__shared_weak_count *v1067;
  unint64_t *v1068;
  unint64_t v1069;
  _QWORD *v1070;
  unint64_t v1071;
  uint64_t v1072;
  float v1073;
  float v1074;
  float v1075;
  float v1076;
  _DWORD *v1077;
  unint64_t v1078;
  _QWORD *v1079;
  _QWORD *v1080;
  char v1081;
  uint64_t v1085;
  uint64_t v1086;
  uint64_t v1088;
  uint64_t v1089;
  BOOL v1090;
  BOOL *v1091;
  uint64_t v1092;
  size_t __len;
  char __lena;
  unint64_t __lenb;
  float32x4_t v1096;
  unint64_t v1097;
  unsigned __int8 **v1098;
  uint64_t v1099;
  BOOL v1100;
  BOOL *v1101;
  _BOOL4 v1102;
  uint64_t v1103;
  int16x8_t v1104;
  uint64_t v1105;
  int v1106;
  char *v1107;
  uint64_t v1108;
  uint64_t v1109;
  char *__p;
  int64_t __pa;
  _DWORD *__pb;
  uint64_t *v1113;
  uint64x2_t *v1114;
  unint64_t v1115;
  uint64_t *v1116;
  BOOL *v1117;
  void *v1118;
  unsigned __int8 **v1119;
  char *v1120;
  _BOOL4 v1121;
  int v1122;
  float32x4_t v1123;
  unint64_t v1124;
  char *v1125;
  char v1127;
  int v1128;
  char *v1129;
  char v1130;
  int v1131;
  char *v1132;
  _DWORD *v1133;
  _DWORD *v1134;
  char *v1135;
  uint64_t v1136;
  int v1137;
  void *v1138;
  char *v1139;
  _BYTE *v1140;
  unint64_t v1141;
  _BYTE v1142[64];
  uint64_t v1143;
  std::__shared_weak_count *v1144;
  void *v1145;
  uint64_t *v1146;
  uint64_t v1147;
  void *v1148;
  uint64_t *v1149;
  uint64_t v1150;
  void **v1151;
  uint64_t **v1152;
  uint64_t *v1153;
  uint64_t v1154;
  uint64_t ***v1155;
  __int128 v1156;
  __int128 v1157;
  _QWORD *v1158;
  uint64_t v1159;
  _QWORD **v1160;
  _QWORD *v1161;
  uint64_t v1162;
  _QWORD **v1163;
  _QWORD *v1164;
  uint64_t v1165;
  uint64_t v1166;

  v1166 = *MEMORY[0x1E0C80C00];
  if (!*(_QWORD *)(a1 + 936))
    return;
  v6 = *(_QWORD *)(a1 + 864);
  v7 = *(_QWORD *)(a1 + 872);
  if (v6 != v7)
  {
    v8 = 0;
    while (1)
    {
      v11 = *(_DWORD *)(a1 + 1364);
      if (*(_DWORD *)(v6 + 60) == v11)
      {
        v12 = *(_QWORD *)(v6 + 64);
      }
      else
      {
        *(_DWORD *)(v6 + 60) = v11;
        v12 = *(_QWORD *)(v6 + 64);
        v13 = *(_QWORD *)(v6 + 72);
        if (v12 != v13)
        {
          v14 = v13 - v12 - 184;
          v15 = *(_QWORD *)(v6 + 64);
          if (v14 >= 0xB8)
          {
            v16 = v14 / 0xB8 + 1;
            v17 = (_BYTE *)(v12 + 361);
            v18 = v16 & 0x3FFFFFFFFFFFFFELL;
            do
            {
              *(v17 - 184) = 1;
              *v17 = 1;
              v17 += 368;
              v18 -= 2;
            }
            while (v18);
            if (v16 == (v16 & 0x3FFFFFFFFFFFFFELL))
              goto LABEL_14;
            v15 = v12 + 184 * (v16 & 0x3FFFFFFFFFFFFFELL);
          }
          do
          {
            *(_BYTE *)(v15 + 177) = 1;
            v15 += 184;
          }
          while (v15 != v13);
        }
      }
LABEL_14:
      md::TransitLine::updateFeatureQueryForMergeTypeIfNecessary((uint64_t *)v6, 0);
      if (*(_BYTE *)(v12 + 177))
      {
        md::TransitLine::_resolveStyle(v6, *(_DWORD *)(v6 + 60), *(_QWORD *)v12, *(std::__shared_weak_count **)(v12 + 8), v12 + 16);
        *(_BYTE *)(v12 + 177) = 0;
      }
      v9 = *(_DWORD *)(v12 + 100);
      v10 = *(_DWORD *)(v6 + 56) != v9;
      *(_DWORD *)(v6 + 56) = v9;
      v8 |= v10;
      v6 += 104;
      if (v6 == v7)
        goto LABEL_17;
    }
  }
  v8 = 0;
LABEL_17:
  v1081 = v8;
  v19 = a1;
  v20 = *(_QWORD *)(a1 + 888);
  v1085 = *(_QWORD *)(a1 + 896);
  if (v20 != v1085)
  {
    v21 = 0;
    v1096 = (float32x4_t)vdupq_n_s32(0x437F0000u);
    while (1)
    {
      v23 = *(char **)(v20 + 80);
      v22 = *(char **)(v20 + 88);
      v24 = v22 - v23;
      v1090 = v21;
      if (v22 == v23)
      {
        __p = 0;
        v73 = 0;
        v1153 = 0;
        v1154 = 0;
        v1152 = &v1153;
        v1149 = 0;
        v1150 = 0;
        v1148 = &v1149;
        v1146 = 0;
        v1147 = 0;
        v1145 = &v1146;
        v116 = 0.0;
        v117 = 1;
        v118 = 0.0;
        *(_QWORD *)(v20 + 160) = 0;
        goto LABEL_250;
      }
      if ((unint64_t)v24 >= 0x1C71C71C71C71C71)
        abort();
      v25 = v24 >> 3;
      v26 = (char *)operator new(72 * (v24 >> 3));
      v27 = v26;
      do
      {
        *(_QWORD *)v27 = 0;
        v27[8] = 0;
        *((_QWORD *)v27 + 2) = 0;
        *((_DWORD *)v27 + 6) = 0;
        *((_DWORD *)v27 + 10) = -1;
        *((_QWORD *)v27 + 4) = 0xFFFFFFFF00000000;
        *((_QWORD *)v27 + 8) = 0;
        *(_QWORD *)(v27 + 44) = 0;
        *(_QWORD *)(v27 + 49) = 0;
        v27 += 72;
      }
      while (v27 != &v26[72 * v25]);
      v1120 = &v26[72 * v25];
      v28 = 0;
      v1153 = 0;
      v1154 = 0;
      v1152 = &v1153;
      __p = v26;
      __len = (size_t)v22;
      do
      {
        v29 = &v26[72 * v28];
        if (*(_QWORD *)v23)
          v30 = (_BYTE *)(*(_QWORD *)v23 + 8);
        else
          v30 = 0;
        *(_QWORD *)v29 = v30;
        if (!v30[56] || (v31 = *(_QWORD *)v30, v32 = *(_QWORD *)(*(_QWORD *)v30 + 64), *(float *)(v32 + 72) <= 0.0))
        {
          v26[72 * v28 + 52] = 0;
          v30[57] = 0;
          goto LABEL_26;
        }
        v33 = *(float *)(v32 + 80);
        v26[72 * v28 + 52] = v33 > 0.0;
        v30[57] = v33 > 0.0;
        if (v33 > 0.0)
        {
          v34 = *(_QWORD *)(v31 + 24);
          v35 = &v26[72 * v28];
          v36 = (int16x8_t)vcvtq_s32_f32(vmulq_f32(*(float32x4_t *)(v31 + 36), v1096));
          *(int16x4_t *)v36.i8 = vmovn_s32((int32x4_t)v36);
          v1104 = v36;
          *((_DWORD *)v35 + 6) = vmovn_s16(v36).u32[0];
          v37 = v35 + 24;
          *((_QWORD *)v37 - 1) = v34;
          v37[32] = *(_BYTE *)(v31 + 88);
          v38 = *(unsigned __int8 *)(v32 + 84);
          v37[30] = v38;
          if (v38)
          {
            v39 = &v1153;
            v40 = &v1153;
            if (v1153)
            {
              v41 = v1153;
              while (1)
              {
                while (1)
                {
                  v39 = (uint64_t **)v41;
                  v42 = v41[4];
                  if (v34 == v42)
                    break;
                  if (v34 >= v42)
                  {
                    if (v42 >= v34)
                      goto LABEL_54;
                    goto LABEL_49;
                  }
LABEL_36:
                  v41 = *v39;
                  v40 = v39;
                  if (!*v39)
                    goto LABEL_51;
                }
                v43 = bswap32(*(_DWORD *)v37);
                v44 = bswap32(*((_DWORD *)v39 + 10));
                _CF = v43 >= v44;
                v45 = v43 > v44;
                v46 = !_CF;
                if (v45 - v46 < 0)
                  goto LABEL_36;
                v47 = bswap32(*((_DWORD *)v39 + 10));
                v48 = bswap32(*(_DWORD *)v37);
                _CF = v47 >= v48;
                v49 = v47 > v48;
                v50 = !_CF;
                if (v49 - v50 >= 0)
                {
LABEL_54:
                  v51 = (char *)v39;
                  goto LABEL_55;
                }
LABEL_49:
                v41 = v39[1];
                if (!v41)
                {
                  v40 = v39 + 1;
                  break;
                }
              }
            }
LABEL_51:
            v51 = (char *)operator new(0x90uLL);
            *((_QWORD *)v51 + 4) = v34;
            *((_DWORD *)v51 + 10) = vmovn_s16(v1104).u32[0];
            *((_OWORD *)v51 + 3) = 0u;
            *((_OWORD *)v51 + 4) = 0u;
            *((_OWORD *)v51 + 7) = 0u;
            *((_OWORD *)v51 + 8) = 0u;
            *((_OWORD *)v51 + 5) = 0u;
            *((_OWORD *)v51 + 6) = 0u;
            *((_QWORD *)v51 + 7) = v51 + 88;
            *((_QWORD *)v51 + 8) = v51 + 88;
            *((_QWORD *)v51 + 9) = v51 + 88;
            *((_QWORD *)v51 + 10) = 4;
            *((_QWORD *)v51 + 15) = 0;
            v51[128] = 0;
            *(_QWORD *)v51 = 0;
            *((_QWORD *)v51 + 1) = 0;
            *((_QWORD *)v51 + 2) = v39;
            *v40 = (uint64_t *)v51;
            v52 = (uint64_t *)v51;
            if (*v1152)
            {
              v1152 = (uint64_t **)*v1152;
              v52 = *v40;
            }
            std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(v1153, v52);
            ++v1154;
LABEL_55:
            v53 = (char *)*((_QWORD *)v51 + 8);
            v54 = (uint64_t)&v53[-*((_QWORD *)v51 + 7)] >> 3;
            v55 = *((_QWORD *)v51 + 10);
            if (v55 < v54 + 1)
            {
              v1099 = *((_QWORD *)v51 + 9);
              v1105 = *((_QWORD *)v51 + 7);
              v56 = (1 << -(char)__clz(v55 + 1));
              if (v55 >= 0xFFFFFFFFFFFFFFFELL)
                v56 = 1;
              if (v56 <= v54 + 1)
                v57 = v54 + 1;
              else
                v57 = v56;
              v58 = (char *)malloc_type_malloc(8 * v57, 0x2004093837F09uLL);
              v59 = v58;
              v60 = (uint64_t *)*((_QWORD *)v51 + 7);
              v61 = (char *)*((_QWORD *)v51 + 8);
              if (v60 != (uint64_t *)v61)
              {
                v62 = v61 - (char *)v60 - 8;
                if (v62 < 0x18)
                {
                  v63 = v58;
                  goto LABEL_69;
                }
                v63 = v58;
                if ((unint64_t)(v58 - (char *)v60) < 0x20)
                {
                  do
                  {
LABEL_69:
                    v70 = *v60++;
                    *(_QWORD *)v63 = v70;
                    v63 += 8;
                  }
                  while (v60 != (uint64_t *)v61);
                }
                else
                {
                  v64 = (v62 >> 3) + 1;
                  v65 = 8 * (v64 & 0x3FFFFFFFFFFFFFFCLL);
                  v63 = &v58[v65];
                  v66 = (__int128 *)(v60 + 2);
                  v67 = v58 + 16;
                  v68 = v64 & 0x3FFFFFFFFFFFFFFCLL;
                  do
                  {
                    v69 = *v66;
                    *(v67 - 1) = *(v66 - 1);
                    *v67 = v69;
                    v66 += 2;
                    v67 += 2;
                    v68 -= 4;
                  }
                  while (v68);
                  if (v64 != (v64 & 0x3FFFFFFFFFFFFFFCLL))
                  {
                    v60 = (uint64_t *)((char *)v60 + v65);
                    goto LABEL_69;
                  }
                }
              }
              if (v1105 != v1099)
                free(*((void **)v51 + 7));
              v53 = &v59[8 * v54];
              *((_QWORD *)v51 + 7) = v59;
              *((_QWORD *)v51 + 8) = v53;
              *((_QWORD *)v51 + 10) = v57;
            }
            *(_QWORD *)v53 = v29;
            *((_QWORD *)v51 + 8) += 8;
            v22 = (char *)__len;
          }
          v26 = __p;
          *(_DWORD *)&__p[72 * v28 + 36] = *(_DWORD *)(v32 + 88);
          if (*(_BYTE *)(v32 + 92))
          {
            v71 = *(_DWORD *)(v31 + 32);
            if (v71 != -1)
            {
              v72 = &__p[72 * v28];
              v72[55] = 1;
              *((_DWORD *)v72 + 10) = *(_DWORD *)(v32 + 96);
              *((_DWORD *)v72 + 8) = v71;
            }
          }
        }
LABEL_26:
        ++v28;
        v23 += 8;
      }
      while (v23 != v22);
      v73 = v1120;
      if ((a3 & 1) == 0)
      {
        v74 = v1152;
        if (v1152 != &v1153)
        {
          do
          {
            v76 = v74[7];
            v77 = v74[8];
            if ((unint64_t)((char *)v77 - (char *)v76) >= 9)
            {
              v78 = v77 - v76;
              *((_DWORD *)v74 + 33) = 0;
              if (v77 == v76)
              {
LABEL_88:
                v80 = 0;
              }
              else
              {
                v79 = 0;
                v80 = 0;
                while (!*(_BYTE *)(v76[v79] + 56))
                {
                  v79 = ++v80;
                  if (v78 <= v80)
                    goto LABEL_88;
                }
                *((_DWORD *)v74 + 33) = v80;
              }
              v81 = 0;
              v82 = v74 + 6;
              *((_BYTE *)v74 + 136) = 1;
              if (v78 <= 1)
                v78 = 1;
              do
              {
                v83 = v76[v81];
                *(_BYTE *)(v83 + 53) = v81 != v80;
                *(_BYTE *)(v83 + 8) = 1;
                v84 = *(uint64_t ***)(v83 + 64);
                if (v84)
                {
                  do
                  {
                    v85 = (uint64_t ***)v84;
                    v84 = (uint64_t **)*v84;
                  }
                  while (v84);
                  *v85 = v82;
                }
                *(_QWORD *)(v83 + 64) = v82;
                ++v81;
              }
              while (v81 != v78);
            }
            v86 = v74[1];
            if (v86)
            {
              do
              {
                v87 = (uint64_t **)v86;
                v86 = (uint64_t *)*v86;
              }
              while (v86);
            }
            else
            {
              do
              {
                v87 = (uint64_t **)v74[2];
                _ZF = *v87 == (uint64_t *)v74;
                v74 = v87;
              }
              while (!_ZF);
            }
            v74 = v87;
          }
          while (v87 != &v1153);
        }
      }
      v1149 = 0;
      v1150 = 0;
      v1148 = &v1149;
      v1100 = v26 == v1120;
      if ((a3 & 2) != 0)
        goto LABEL_141;
      v75 = __p;
      if (v26 == v1120)
        goto LABEL_141;
      while (2)
      {
        if (v75[52])
          _ZF = v75[53] == 0;
        else
          _ZF = 0;
        if (_ZF)
        {
          v90 = *((_QWORD *)v75 + 2);
          v91 = v1149;
          v92 = &v1149;
LABEL_113:
          v93 = v92;
          if (v91)
          {
            while (1)
            {
              v92 = (uint64_t **)v91;
              v94 = v91[4];
              if (v90 < v94)
              {
                v91 = *v92;
                goto LABEL_113;
              }
              if (v94 >= v90)
                break;
              v91 = v92[1];
              if (!v91)
              {
                v93 = v92 + 1;
                goto LABEL_118;
              }
            }
            v95 = (char *)v92;
          }
          else
          {
LABEL_118:
            v95 = (char *)operator new(0x88uLL);
            *((_QWORD *)v95 + 4) = v90;
            *(_OWORD *)(v95 + 40) = 0u;
            *(_OWORD *)(v95 + 56) = 0u;
            *(_OWORD *)(v95 + 72) = 0u;
            *(_OWORD *)(v95 + 104) = 0u;
            *(_OWORD *)(v95 + 120) = 0u;
            *(_OWORD *)(v95 + 88) = 0u;
            *((_QWORD *)v95 + 6) = v95 + 80;
            *((_QWORD *)v95 + 7) = v95 + 80;
            *((_QWORD *)v95 + 8) = v95 + 80;
            *((_QWORD *)v95 + 9) = 4;
            *((_QWORD *)v95 + 14) = 0;
            v95[120] = 0;
            *(_QWORD *)v95 = 0;
            *((_QWORD *)v95 + 1) = 0;
            *((_QWORD *)v95 + 2) = v92;
            *v93 = (uint64_t *)v95;
            v96 = (uint64_t *)v95;
            if (*(_QWORD *)v1148)
            {
              v1148 = *(void **)v1148;
              v96 = *v93;
            }
            std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(v1149, v96);
            ++v1150;
          }
          v97 = *((_QWORD *)v95 + 6);
          v88 = (char *)*((_QWORD *)v95 + 7);
          v98 = (uint64_t)&v88[-v97] >> 3;
          v99 = *((_QWORD *)v95 + 9);
          if (v99 < v98 + 1)
          {
            v100 = *((_QWORD *)v95 + 8);
            v101 = (1 << -(char)__clz(v99 + 1));
            if (v99 >= 0xFFFFFFFFFFFFFFFELL)
              v101 = 1;
            if (v101 <= v98 + 1)
              v102 = v98 + 1;
            else
              v102 = v101;
            v103 = (char *)malloc_type_malloc(8 * v102, 0x2004093837F09uLL);
            v104 = v103;
            v105 = (uint64_t *)*((_QWORD *)v95 + 6);
            v106 = (char *)*((_QWORD *)v95 + 7);
            if (v105 != (uint64_t *)v106)
            {
              v107 = v106 - (char *)v105 - 8;
              if (v107 < 0x18)
              {
                v108 = v103;
                goto LABEL_136;
              }
              v108 = v103;
              if ((unint64_t)(v103 - (char *)v105) < 0x20)
              {
                do
                {
LABEL_136:
                  v115 = *v105++;
                  *(_QWORD *)v108 = v115;
                  v108 += 8;
                }
                while (v105 != (uint64_t *)v106);
              }
              else
              {
                v109 = (v107 >> 3) + 1;
                v110 = 8 * (v109 & 0x3FFFFFFFFFFFFFFCLL);
                v108 = &v103[v110];
                v111 = (__int128 *)(v105 + 2);
                v112 = v103 + 16;
                v113 = v109 & 0x3FFFFFFFFFFFFFFCLL;
                do
                {
                  v114 = *v111;
                  *(v112 - 1) = *(v111 - 1);
                  *v112 = v114;
                  v111 += 2;
                  v112 += 2;
                  v113 -= 4;
                }
                while (v113);
                if (v109 != (v109 & 0x3FFFFFFFFFFFFFFCLL))
                {
                  v105 = (uint64_t *)((char *)v105 + v110);
                  goto LABEL_136;
                }
              }
            }
            if (v97 != v100)
              free(*((void **)v95 + 6));
            v88 = &v104[8 * v98];
            *((_QWORD *)v95 + 6) = v104;
            *((_QWORD *)v95 + 7) = v88;
            *((_QWORD *)v95 + 9) = v102;
            v73 = v1120;
          }
          *(_QWORD *)v88 = v75;
          *((_QWORD *)v95 + 7) += 8;
        }
        v75 += 72;
        if (v75 != v73)
          continue;
        break;
      }
      v119 = (uint64_t *)v1148;
      if (v1148 != &v1149)
      {
        do
        {
          *((_DWORD *)v119 + 31) = 0;
          v121 = v119[6];
          v122 = (v119[7] - v121) >> 3;
          if (v119[7] == v121)
          {
LABEL_149:
            v124 = 0;
          }
          else
          {
            v123 = 0;
            v124 = 0;
            while (!*(_BYTE *)(*(_QWORD *)(v121 + 8 * v123) + 56))
            {
              v123 = ++v124;
              if (v122 <= v124)
                goto LABEL_149;
            }
            *((_DWORD *)v119 + 31) = v124;
          }
          *((_BYTE *)v119 + 128) = 1;
          if (v122 > *(unsigned int *)(*(_QWORD *)(v121 + 8 * v124) + 36))
          {
            v125 = 0;
            v126 = (char *)(v119 + 5);
            do
            {
              v127 = *(_QWORD *)(v121 + 8 * v125);
              *(_BYTE *)(v127 + 53) = v125 != v124;
              *(_BYTE *)(v127 + 8) = 2;
              v128 = *(_QWORD **)(v127 + 64);
              if (v128)
              {
                do
                {
                  v129 = v128;
                  v128 = (_QWORD *)*v128;
                }
                while (v128);
                *v129 = v126;
              }
              *(_QWORD *)(v127 + 64) = v126;
              ++v125;
            }
            while (v125 != v122);
          }
          v130 = (uint64_t *)v119[1];
          if (v130)
          {
            do
            {
              v131 = (uint64_t **)v130;
              v130 = (uint64_t *)*v130;
            }
            while (v130);
          }
          else
          {
            do
            {
              v131 = (uint64_t **)v119[2];
              _ZF = *v131 == v119;
              v119 = (uint64_t *)v131;
            }
            while (!_ZF);
          }
          v119 = (uint64_t *)v131;
        }
        while (v131 != &v1149);
      }
LABEL_141:
      v1146 = 0;
      v1147 = 0;
      v1145 = &v1146;
      if ((a3 & 4) != 0)
        goto LABEL_202;
      v120 = __p;
      if (__p == v73)
        goto LABEL_202;
      while (2)
      {
        if (v120[52])
          v133 = v120[53] == 0;
        else
          v133 = 0;
        if (v133 && v120[55] != 0)
        {
          v135 = v1146;
          v136 = *((_DWORD *)v120 + 8);
          v137 = &v1146;
LABEL_175:
          v138 = v137;
          if (v135)
          {
            while (1)
            {
              v137 = (uint64_t **)v135;
              v139 = *((_DWORD *)v135 + 8);
              if (v136 < v139)
              {
                v135 = *v137;
                goto LABEL_175;
              }
              if (v139 >= v136)
                break;
              v135 = v137[1];
              if (!v135)
              {
                v138 = v137 + 1;
                goto LABEL_180;
              }
            }
            v140 = (char *)v137;
          }
          else
          {
LABEL_180:
            v140 = (char *)operator new(0x88uLL);
            *((_DWORD *)v140 + 8) = v136;
            *(_OWORD *)(v140 + 40) = 0u;
            *(_OWORD *)(v140 + 56) = 0u;
            *(_OWORD *)(v140 + 72) = 0u;
            *(_OWORD *)(v140 + 104) = 0u;
            *(_OWORD *)(v140 + 120) = 0u;
            *(_OWORD *)(v140 + 88) = 0u;
            *((_QWORD *)v140 + 6) = v140 + 80;
            *((_QWORD *)v140 + 7) = v140 + 80;
            *((_QWORD *)v140 + 8) = v140 + 80;
            *((_QWORD *)v140 + 9) = 4;
            *((_QWORD *)v140 + 14) = 0;
            v140[120] = 0;
            *(_QWORD *)v140 = 0;
            *((_QWORD *)v140 + 1) = 0;
            *((_QWORD *)v140 + 2) = v137;
            *v138 = (uint64_t *)v140;
            v141 = (uint64_t *)v140;
            if (*(_QWORD *)v1145)
            {
              v1145 = *(void **)v1145;
              v141 = *v138;
            }
            std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(v1146, v141);
            ++v1147;
          }
          v142 = *((_QWORD *)v140 + 6);
          v132 = (char *)*((_QWORD *)v140 + 7);
          v143 = (uint64_t)&v132[-v142] >> 3;
          v144 = *((_QWORD *)v140 + 9);
          if (v144 < v143 + 1)
          {
            v145 = *((_QWORD *)v140 + 8);
            v146 = (1 << -(char)__clz(v144 + 1));
            if (v144 >= 0xFFFFFFFFFFFFFFFELL)
              v146 = 1;
            if (v146 <= v143 + 1)
              v147 = v143 + 1;
            else
              v147 = v146;
            v148 = (char *)malloc_type_malloc(8 * v147, 0x2004093837F09uLL);
            v149 = v148;
            v150 = (uint64_t *)*((_QWORD *)v140 + 6);
            v151 = (char *)*((_QWORD *)v140 + 7);
            if (v150 != (uint64_t *)v151)
            {
              v152 = v151 - (char *)v150 - 8;
              if (v152 < 0x18)
              {
                v153 = v148;
                goto LABEL_198;
              }
              v153 = v148;
              if ((unint64_t)(v148 - (char *)v150) < 0x20)
              {
                do
                {
LABEL_198:
                  v160 = *v150++;
                  *(_QWORD *)v153 = v160;
                  v153 += 8;
                }
                while (v150 != (uint64_t *)v151);
              }
              else
              {
                v154 = (v152 >> 3) + 1;
                v155 = 8 * (v154 & 0x3FFFFFFFFFFFFFFCLL);
                v153 = &v148[v155];
                v156 = (__int128 *)(v150 + 2);
                v157 = v148 + 16;
                v158 = v154 & 0x3FFFFFFFFFFFFFFCLL;
                do
                {
                  v159 = *v156;
                  *(v157 - 1) = *(v156 - 1);
                  *v157 = v159;
                  v156 += 2;
                  v157 += 2;
                  v158 -= 4;
                }
                while (v158);
                if (v154 != (v154 & 0x3FFFFFFFFFFFFFFCLL))
                {
                  v150 = (uint64_t *)((char *)v150 + v155);
                  goto LABEL_198;
                }
              }
            }
            if (v142 != v145)
              free(*((void **)v140 + 6));
            v132 = &v149[8 * v143];
            *((_QWORD *)v140 + 6) = v149;
            *((_QWORD *)v140 + 7) = v132;
            *((_QWORD *)v140 + 9) = v147;
            v73 = v1120;
          }
          *(_QWORD *)v132 = v120;
          *((_QWORD *)v140 + 7) += 8;
        }
        v120 += 72;
        if (v120 != v73)
          continue;
        break;
      }
      v161 = (uint64_t *)v1145;
      if (v1145 != &v1146)
      {
        do
        {
          *((_DWORD *)v161 + 31) = 0;
          v170 = v161[6];
          v171 = (v161[7] - v170) >> 3;
          if (v161[7] == v170)
          {
LABEL_209:
            v173 = 0;
          }
          else
          {
            v172 = 0;
            v173 = 0;
            while (!*(_BYTE *)(*(_QWORD *)(v170 + 8 * v172) + 56))
            {
              v172 = ++v173;
              if (v171 <= v173)
                goto LABEL_209;
            }
            *((_DWORD *)v161 + 31) = v173;
          }
          *((_BYTE *)v161 + 128) = 1;
          if (v171 > *(unsigned int *)(*(_QWORD *)(v170 + 8 * v173) + 40))
          {
            v174 = 0;
            v175 = (char *)(v161 + 5);
            do
            {
              v176 = *(_QWORD *)(v170 + 8 * v174);
              *(_BYTE *)(v176 + 53) = v174 != v173;
              *(_BYTE *)(v176 + 8) = 3;
              v177 = *(_QWORD **)(v176 + 64);
              if (v177)
              {
                do
                {
                  v178 = v177;
                  v177 = (_QWORD *)*v177;
                }
                while (v177);
                *v178 = v175;
              }
              *(_QWORD *)(v176 + 64) = v175;
              ++v174;
            }
            while (v174 != v171);
          }
          v179 = (uint64_t *)v161[1];
          if (v179)
          {
            do
            {
              v180 = (uint64_t **)v179;
              v179 = (uint64_t *)*v179;
            }
            while (v179);
          }
          else
          {
            do
            {
              v180 = (uint64_t **)v161[2];
              _ZF = *v180 == v161;
              v161 = (uint64_t *)v180;
            }
            while (!_ZF);
          }
          v161 = (uint64_t *)v180;
        }
        while (v180 != &v1146);
      }
LABEL_202:
      *(_QWORD *)(v20 + 160) = 0;
      v162 = __p;
      if (__p != v73)
      {
        v163 = 0;
        v164 = 0;
        v165 = 0;
        v166 = 0.0;
        v167 = 0.0;
        v116 = 0.0;
        v168 = 0.0;
        v169 = 0.0;
        while (1)
        {
          v181 = *(unsigned __int8 **)v162;
          if (v162[52])
            break;
          v181[55] = 1;
          *((_DWORD *)v181 + 8) = -1;
          v181[52] = 0;
LABEL_224:
          v162 += 72;
          if (v162 == v73)
          {
            v118 = (float)(v166 + v169) * 0.5;
            goto LABEL_249;
          }
        }
        v182 = v162[53];
        v181[55] = v182;
        if (v182)
          *((_DWORD *)v181 + 8) = -1;
        v183 = v162[8];
        v181[52] = v183;
        v184 = *((_QWORD *)v162 + 8);
        if (v184)
        {
          v185 = (_QWORD *)*((_QWORD *)v162 + 8);
          do
          {
            v186 = v185;
            v185 = (_QWORD *)*v185;
          }
          while (v185);
          if (*((_BYTE *)v186 + 80))
          {
            *((_DWORD *)v162 + 11) = *((_DWORD *)v186 + 18);
            *((_DWORD *)v162 + 12) = *((_DWORD *)v186 + 19);
LABEL_246:
            v163 |= *(_QWORD *)(*(_QWORD *)v181 + 96);
            *(_QWORD *)(v20 + 160) = v163;
            v73 = v1120;
            goto LABEL_224;
          }
          v1106 = v165;
          v187 = **(unsigned __int8 ***)(v186[1] + 8 * *((unsigned int *)v186 + 21));
          v183 = v187[52];
        }
        else
        {
          v1106 = v165;
          v186 = 0;
          v187 = v181;
        }
        v188 = *(_QWORD *)v187;
        v189 = *(_QWORD *)(*(_QWORD *)v187 + 64);
        md::TransitLine::updateFeatureQueryForMergeTypeIfNecessary(*(uint64_t **)v187, v183);
        v190 = v189 + 184 * v183;
        v192 = *(unsigned __int8 *)(v190 + 177);
        v191 = (_BYTE *)(v190 + 177);
        if (v192)
        {
          md::TransitLine::_resolveStyle(v188, *(_DWORD *)(v188 + 60), *(_QWORD *)(v189 + 184 * v183), *(std::__shared_weak_count **)(v189 + 184 * v183 + 8), v189 + 184 * v183 + 16);
          *v191 = 0;
        }
        v193 = v189 + 184 * v183;
        if (v164)
        {
          v194 = *(float *)(v193 + 76);
          if (*(_DWORD *)(v193 + 100) == v1106)
          {
            v166 = *(float *)(v189 + 184 * v183 + 72);
          }
          else
          {
            v168 = fmaxf(v168, (float)(v167 - v166) * 0.5);
            v196 = v189 + 184 * v183;
            v166 = *(float *)(v196 + 72);
            v194 = fmaxf(v194, (float)(*(float *)(v196 + 80) - v166) * 0.5);
          }
          v116 = fmaxf(v168, v194) + v116;
          v195 = v116 + (float)(v166 * 0.5);
          if (v184)
          {
LABEL_244:
            *((float *)v186 + 18) = v195;
            *((_BYTE *)v186 + 80) = 1;
            *((_DWORD *)v186 + 19) = v164;
          }
        }
        else
        {
          v166 = *(float *)(v193 + 72);
          v169 = v166;
          v195 = v116 + (float)(v166 * 0.5);
          if (v184)
            goto LABEL_244;
        }
        *((float *)v162 + 11) = v195;
        *((_DWORD *)v162 + 12) = v164++;
        v197 = v189 + 184 * v183;
        v168 = *(float *)(v197 + 76);
        v167 = *(float *)(v197 + 80);
        v165 = *(_DWORD *)(v197 + 100);
        v116 = v166 + v116;
        v163 = *(_QWORD *)(v20 + 160);
        goto LABEL_246;
      }
      v116 = 0.0;
      v118 = 0.0;
LABEL_249:
      v117 = v1100;
LABEL_250:
      v198 = (uint64_t *)v1142;
      v1138 = v1142;
      v1139 = v1142;
      v1140 = v1142;
      v1141 = 8;
      *(float *)(v20 + 152) = v116 - v118;
      v199 = (uint64_t *)v1142;
      if ((v117 & 1) != 0)
        goto LABEL_285;
      v200 = v116 * 0.5;
      v201 = (uint64_t **)(v20 + 136);
      v202 = (float *)__p;
      while (2)
      {
        v205 = v202[11];
        v204 = *(_QWORD *)v202;
        v206 = *(_QWORD *)(*(_QWORD *)(**(_QWORD **)v202 + 16) + 40);
        v207 = *v201;
        v208 = (uint64_t **)(v20 + 136);
        v209 = (uint64_t **)(v20 + 136);
        if (*v201)
        {
          while (1)
          {
            while (1)
            {
              v209 = (uint64_t **)v207;
              v210 = v207[4];
              if (v206 >= v210)
                break;
              v207 = *v209;
              v208 = v209;
              if (!*v209)
                goto LABEL_262;
            }
            if (v210 >= v206)
              break;
            v207 = v209[1];
            if (!v207)
            {
              v208 = v209 + 1;
              goto LABEL_262;
            }
          }
          v211 = v209;
        }
        else
        {
LABEL_262:
          v211 = operator new(0x30uLL);
          v211[4] = v206;
          *((_DWORD *)v211 + 10) = 0;
          *v211 = 0;
          v211[1] = 0;
          v211[2] = v209;
          *v208 = v211;
          v212 = **(_QWORD **)(v20 + 128);
          v213 = v211;
          if (v212)
          {
            *(_QWORD *)(v20 + 128) = v212;
            v213 = *v208;
          }
          std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v20 + 136), v213);
          ++*(_QWORD *)(v20 + 144);
          v204 = *(_QWORD *)v202;
        }
        *((float *)v211 + 10) = v205 - v200;
        *(float *)(v204 + 40) = v202[12];
        if (!*(_BYTE *)(v204 + 55))
        {
          v214 = v1138;
          v203 = (uint64_t *)v1139;
          v215 = (v1139 - (_BYTE *)v1138) >> 3;
          if (v1141 < v215 + 1)
          {
            v216 = v73;
            v217 = v1140;
            v218 = (1 << -(char)__clz(v1141 + 1));
            if (v1141 >= 0xFFFFFFFFFFFFFFFELL)
              v218 = 1;
            if (v218 <= v215 + 1)
              v219 = v215 + 1;
            else
              v219 = v218;
            v220 = malloc_type_malloc(8 * v219, 0x2004093837F09uLL);
            v221 = (char *)v220;
            v222 = (uint64_t *)v1138;
            v223 = (uint64_t *)v1139;
            if (v1138 != v1139)
            {
              v224 = v1139 - (_BYTE *)v1138 - 8;
              if (v224 < 0x18)
              {
                v225 = v220;
                goto LABEL_281;
              }
              v225 = v220;
              if ((unint64_t)((char *)v220 - (_BYTE *)v1138) < 0x20)
              {
                do
                {
LABEL_281:
                  v232 = *v222++;
                  *v225++ = v232;
                }
                while (v222 != v223);
              }
              else
              {
                v226 = (v224 >> 3) + 1;
                v227 = 8 * (v226 & 0x3FFFFFFFFFFFFFFCLL);
                v225 = (_QWORD *)((char *)v220 + v227);
                v228 = (__int128 *)((char *)v1138 + 16);
                v229 = v220 + 1;
                v230 = v226 & 0x3FFFFFFFFFFFFFFCLL;
                do
                {
                  v231 = *v228;
                  *(v229 - 1) = *(v228 - 1);
                  *v229 = v231;
                  v228 += 2;
                  v229 += 2;
                  v230 -= 4;
                }
                while (v230);
                if (v226 != (v226 & 0x3FFFFFFFFFFFFFFCLL))
                {
                  v222 = (uint64_t *)((char *)v222 + v227);
                  goto LABEL_281;
                }
              }
            }
            if (v214 != v217)
              free(v1138);
            v203 = (uint64_t *)&v221[8 * v215];
            v1138 = v221;
            v1139 = (char *)v203;
            v1141 = v219;
            v204 = *(_QWORD *)v202;
            v73 = v216;
          }
          *v203 = v204;
          v1139 += 8;
        }
        v202 += 18;
        if (v202 != (float *)v73)
          continue;
        break;
      }
      v198 = (uint64_t *)v1138;
      v199 = (uint64_t *)v1139;
LABEL_285:
      v233 = 126 - 2 * __clz(v199 - v198);
      if (v199 == v198)
        v234 = 0;
      else
        v234 = v233;
      v1121 = 1;
      std::__introsort<std::_ClassicAlgPolicy,md::TransitLink::updateLineStyles(int,md::TransitLineMergeDisable,BOOL &)::$_0 &,md::TransitLineSegment **,false>((uint64_t)v198, v199, v234, 1);
      v236 = (uint64_t *)v1138;
      v235 = (uint64_t *)v1139;
      v237 = v1139 - (_BYTE *)v1138;
      v238 = (v1139 - (_BYTE *)v1138) >> 3;
      v240 = *(_BYTE **)(v20 + 104);
      v239 = *(_BYTE **)(v20 + 112);
      v241 = (v239 - v240) >> 3;
      if (v238 == v241
        && (v242 = memcmp(v1138, *(const void **)(v20 + 104), v1139 - (_BYTE *)v1138), v1121 = v242 != 0, !v242))
      {
        v19 = a1;
      }
      else
      {
        v243 = *(_QWORD *)(v20 + 120);
        if (v238 <= (v243 - (uint64_t)v240) >> 3)
        {
          if (v241 >= v238)
          {
            if (v1139 != v1138)
              memmove(v240, v1138, v237);
            v239 = v240;
          }
          else
          {
            if (v239 != v240)
            {
              memmove(v240, v1138, v239 - v240);
              v239 = *(_BYTE **)(v20 + 112);
            }
            v247 = (char *)v1138 + 8 * v241;
            v237 = v1139 - v247;
            if (v1139 != v247)
              memmove(v239, v247, v1139 - v247);
          }
          v19 = a1;
        }
        else
        {
          if (v240)
          {
            *(_QWORD *)(v20 + 112) = v240;
            operator delete(v240);
            v243 = 0;
            *(_QWORD *)(v20 + 104) = 0;
            *(_QWORD *)(v20 + 112) = 0;
            *(_QWORD *)(v20 + 120) = 0;
          }
          if ((v237 & 0x8000000000000000) != 0)
            goto LABEL_1530;
          v244 = v243 >> 2;
          if (v243 >> 2 <= v238)
            v244 = v238;
          v245 = (unint64_t)v243 >= 0x7FFFFFFFFFFFFFF8 ? 0x1FFFFFFFFFFFFFFFLL : v244;
          if (v245 >> 61)
LABEL_1530:
            abort();
          v246 = (char *)operator new(8 * v245);
          v239 = v246;
          *(_QWORD *)(v20 + 104) = v246;
          *(_QWORD *)(v20 + 112) = v246;
          *(_QWORD *)(v20 + 120) = &v246[8 * v245];
          if (v235 != v236)
            memcpy(v246, v236, v237);
          v19 = a1;
        }
        v239 += v237;
        *(_QWORD *)(v20 + 112) = v239;
        v240 = *(_BYTE **)(v20 + 104);
      }
      *(_BYTE *)(v20 + 168) = 0;
      *(_QWORD *)&v1156 = &v1158;
      *((_QWORD *)&v1156 + 1) = &v1158;
      *(_QWORD *)&v1157 = &v1158;
      *((_QWORD *)&v1157 + 1) = 8;
      if (v239 != v240)
      {
        v248 = 0;
        v249 = 0;
        v250 = 0;
        v251 = &v1158;
        do
        {
          v254 = *(_QWORD *)&v240[8 * v250];
          *((_QWORD *)&v1156 + 1) = v251;
          md::TransitLink::populateMergedLinesAtIndex((_QWORD *)v20, v250, (uint64_t)&v1156);
          v255 = *((_QWORD *)&v1156 + 1);
          v251 = (_QWORD **)v1156;
          if ((_QWORD)v1156 == *((_QWORD *)&v1156 + 1))
          {
            v252 = 0;
            v253 = 1;
          }
          else
          {
            v256 = 0;
            v252 = 0;
            v253 = 1;
            v257 = v1156;
            do
            {
              if (*(_BYTE *)(*(_QWORD *)v257 + 57))
              {
                v258 = *(_QWORD *)(**(_QWORD **)v257 + 24);
                if (v252)
                  v253 &= v256 == v258;
                else
                  v256 = *(_QWORD *)(**(_QWORD **)v257 + 24);
                if ((v249 & 1) != 0)
                {
                  if (v248 != v258)
                    *(_BYTE *)(v20 + 168) = 1;
                  v258 = v248;
                }
                ++v252;
                v249 = 1;
                v248 = v258;
              }
              v257 += 8;
            }
            while (v257 != v255);
          }
          *(_BYTE *)(v254 + 54) = v252 > 1;
          *(_BYTE *)(v254 + 53) = (v253 & 1) == 0;
          ++v250;
          v240 = *(_BYTE **)(v20 + 104);
        }
        while (v250 < (uint64_t)(*(_QWORD *)(v20 + 112) - (_QWORD)v240) >> 3);
        v19 = a1;
        if (v251 != (_QWORD **)v1157)
          free(v251);
      }
      if (v1138 != v1140)
        free(v1138);
      std::__tree<std::__value_type<unsigned int,MergeGroup>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,MergeGroup>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,MergeGroup>>>::destroy(v1146);
      std::__tree<std::__value_type<unsigned int,MergeGroup>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,MergeGroup>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,MergeGroup>>>::destroy(v1149);
      std::__tree<std::__value_type<md::TransitSystemAndColor,MergeGroup>,std::__map_value_compare<md::TransitSystemAndColor,std::__value_type<md::TransitSystemAndColor,MergeGroup>,std::less<md::TransitSystemAndColor>,true>,std::allocator<std::__value_type<md::TransitSystemAndColor,MergeGroup>>>::destroy(v1153);
      if (__p)
        operator delete(__p);
      v21 = v1121 || v1090;
      v20 += 248;
      if (v20 == v1085)
        goto LABEL_337;
    }
  }
  v21 = 0;
LABEL_337:
  *(_BYTE *)(v19 + 1370) |= v21;
  v259 = v21 | a4 | v1081;
  if (!*(_BYTE *)(v19 + 1369))
    goto LABEL_438;
  *(_BYTE *)(v19 + 1369) = 0;
  v260 = *(_QWORD *)(v19 + 1232);
  if (!*(_BYTE *)(v19 + 1248) || (v261 = 0, !*(_BYTE *)(v19 + 1251)))
  {
    v262 = (_BYTE *)geo::codec::VectorTile::transitVertices(*(geo::codec::VectorTile **)(v19 + 720));
    if (v262)
    {
      v1127 = 0;
      v263 = 0;
      v264 = 0;
      v19 = a1;
      v266 = *(_DWORD *)(a1 + 172);
      v265 = *(_DWORD *)(a1 + 176);
      v267 = *(unsigned __int8 *)(a1 + 169);
      if (v265 >= 1 << v267)
        v268 = 1 << v267;
      else
        v268 = 0;
      if (v265 >= 0)
        v269 = -v268;
      else
        v269 = 1 << v267;
      v270 = v269 + v265;
      v271 = (_QWORD *)(v260 + 8);
      v272 = COERCE_UNSIGNED_INT(1.0 / (float)(1 << *v262));
      LOWORD(v1148) = 768;
      v1115 = v272 << 32;
      v1122 = v270;
      while (1)
      {
        v273 = v263;
        v274 = *((unsigned __int8 *)&v1148 + v264);
        if (!*(_BYTE *)(v19 + v274 + 1248))
        {
          v275 = (_DWORD *)((char *)&neighborTileOffsets + 8 * v274);
          v276 = v270 + *v275;
          v277 = v276 >= 1 << v267 ? 1 << v267 : 0;
          v278 = v276 >= 0 ? -v277 : 1 << v267;
          v279 = (_DWORD *)*v271;
          if (*v271)
          {
            v280 = (_BYTE *)(v19 + v274 + 1248);
            v281 = v275[1] + v266;
            v282 = v278 + v276;
            v283 = v271;
            do
            {
              v287 = v279[8];
              v288 = v287 < v282;
              if (v287 == v282 && (v289 = v279[9], v288 = v289 < v281, v289 == v281))
                v284 = v279[10] < v267;
              else
                v284 = v288;
              v285 = !v284;
              if (v284)
                v286 = v279 + 2;
              else
                v286 = v279;
              if (v285)
                v283 = v279;
              v279 = (_DWORD *)*v286;
            }
            while (*v286);
            if (v283 != v271)
            {
              v290 = *((_DWORD *)v283 + 8);
              v291 = v282 < v290;
              if (v282 == v290 && (v292 = *((_DWORD *)v283 + 9), v291 = v281 < v292, v281 == v292))
              {
                if (*((_DWORD *)v283 + 10) <= v267)
                  goto LABEL_378;
              }
              else if (!v291)
              {
LABEL_378:
                *v280 = 1;
                v1156 = 0uLL;
                *(_QWORD *)&v1157 = 0;
                md::TransitInterTileMediator::populateSectionTerminusPaths(v274, (uint64_t)&v1156, *(_QWORD **)(a1 + 888), *(_QWORD **)(a1 + 896));
                v293 = *(_QWORD *)v283[7];
                v1138 = 0;
                v1139 = 0;
                v1140 = 0;
                md::TransitInterTileMediator::populateSectionTerminusPaths(oppositeTileEdges[v274], (uint64_t)&v1138, *(_QWORD **)(v293 + 888), *(_QWORD **)(v293 + 896));
                v294 = v1156;
                v295 = (uint64_t *)v1138;
                if ((_QWORD)v1156 != *((_QWORD *)&v1156 + 1))
                {
                  v296 = (uint64_t *)v1139;
                  v297 = v1115 | v274;
                  v298 = (_QWORD *)v1156;
                  do
                  {
                    v299 = v295;
                    if (v295 != v296)
                    {
                      v300 = v298[1];
                      v301 = v298[2];
                      v299 = v295;
                      if ((v297 | 2) == 2)
                      {
                        while (1)
                        {
                          v302 = v300 == v299[1] && v301 == v299[2];
                          if (v302
                            && vabds_f32(*(float *)(v298[4] + 16), *(float *)(v299[4] + 16)) <= *((float *)&v297 + 1))
                          {
                            break;
                          }
                          v299 += 5;
                          if (v299 == v296)
                            goto LABEL_380;
                        }
                      }
                      else
                      {
                        while (1)
                        {
                          v303 = v300 == v299[1] && v301 == v299[2];
                          if (v303
                            && vabds_f32(*(float *)(v298[4] + 20), *(float *)(v299[4] + 20)) <= *((float *)&v297 + 1))
                          {
                            break;
                          }
                          v299 += 5;
                          if (v299 == v296)
                            goto LABEL_380;
                        }
                      }
                    }
                    if (v299 == v296)
                    {
LABEL_380:
                      *(_BYTE *)(v298[4] + 34) = 3;
                    }
                    else
                    {
                      v305 = v299[3];
                      v304 = v299[4];
                      v1152 = *(uint64_t ***)(v304 + 8);
                      v306 = v298[4];
                      v308 = *((float *)&v1152 + 1);
                      v307 = *(float *)&v1152;
                      if ((v298[3] == v306) == (v305 == v304))
                      {
                        v307 = -*(float *)&v1152;
                        v308 = -*((float *)&v1152 + 1);
                        *(float *)&v1152 = -*(float *)&v1152;
                        *((float *)&v1152 + 1) = -*((float *)&v1152 + 1);
                      }
                      if (*(uint64_t ***)(v306 + 8) == v1152)
                      {
                        v309 = 2;
                      }
                      else if ((float)((float)(*(float *)(v306 + 8) * v307) + (float)(*(float *)(v306 + 12) * v308)) >= 0.866)
                      {
                        *(float *)(v306 + 8) = v307;
                        *(float *)(v306 + 12) = v308;
                        v309 = 1;
                        v1127 = 1;
                      }
                      else
                      {
                        v309 = 4;
                      }
                      *(_BYTE *)(v306 + 34) = v309;
                    }
                    v298 += 5;
                  }
                  while (v298 != *((_QWORD **)&v294 + 1));
                }
                if (v295)
                  operator delete(v295);
                if ((_QWORD)v294)
                  operator delete((void *)v294);
                v19 = a1;
                v270 = v1122;
                goto LABEL_349;
              }
            }
            v19 = a1;
          }
        }
LABEL_349:
        v263 = 1;
        v264 = 1;
        if ((v273 & 1) != 0)
        {
          v261 = v1127;
          goto LABEL_416;
        }
      }
    }
    v261 = 0;
    v19 = a1;
  }
LABEL_416:
  v259 |= v261;
  v310 = *(unsigned __int8 *)(v19 + 169);
  if (v310 < 0xB)
  {
LABEL_438:
    if ((v259 & 1) != 0)
      goto LABEL_449;
    goto LABEL_962;
  }
  v311 = *(_QWORD *)(v19 + 1232);
  v312 = *(_DWORD *)(v19 + 176);
  if (v312 >= 1 << v310)
    v313 = 1 << v310;
  else
    v313 = 0;
  if (v312 >= 0)
    v314 = -v313;
  else
    v314 = 1 << v310;
  v317 = *(_DWORD **)(v311 + 8);
  v315 = (_DWORD *)(v311 + 8);
  v316 = v317;
  if (!v317)
    goto LABEL_448;
  v318 = *(_DWORD *)(v19 + 172);
  v319 = v314 + v312;
  v320 = v315;
  do
  {
    v324 = v316[8];
    v325 = v324 < v319;
    if (v324 == v319 && (v326 = v316[9], v325 = v326 < v318, v326 == v318))
      v321 = v316[10] < v310;
    else
      v321 = v325;
    v322 = !v321;
    if (v321)
      v323 = v316 + 2;
    else
      v323 = v316;
    if (v322)
      v320 = v316;
    v316 = (_DWORD *)*v323;
  }
  while (*v323);
  if (v320 == v315)
    goto LABEL_448;
  v327 = v320[8];
  v328 = v319 < v327;
  if (v319 != v327 || (v329 = v320[9], v328 = v318 < v329, v318 != v329))
  {
    if (!v328)
      goto LABEL_444;
LABEL_448:
    a6.i32[0] = *(_DWORD *)(v19 + 1252);
    *(_DWORD *)(v19 + 1252) = 16843009;
    if (v259 & 1 | vmaxv_u16((uint16x4_t)vceqz_s16((int16x4_t)*(_OWORD *)&vmovl_u8(a6))) & 1)
      goto LABEL_449;
    goto LABEL_962;
  }
  if (v320[10] > v310)
    goto LABEL_448;
LABEL_444:
  if (*(_DWORD *)(v19 + 1252) != v320[12])
  {
    *(_DWORD *)(v19 + 1252) = v320[12];
LABEL_449:
    v330 = *(uint64_t **)(*(_QWORD *)(v19 + 936) + 16);
    v331 = 1;
    if (!v330)
      goto LABEL_963;
    while (1)
    {
      v330[12] = 0;
      *((_BYTE *)v330 + 105) = 0;
      v332 = v330 + 7;
      v333 = v330 + 10;
      v334 = (uint64_t *)v330[6];
      v1116 = v334;
      v335 = 0;
      if (v334 == v330 + 7)
      {
        v1128 = 0;
      }
      else
      {
        v1128 = 0;
        do
        {
          v336 = (md::TransitLink *)v334[4];
          v337 = v1116;
          while (1)
          {
            v338 = (const md::TransitLink **)v337[4];
            if (v338 != (const md::TransitLink **)v336
              && !md::TransitLink::isSuperset(v336, v338[13], v338[14]))
            {
              break;
            }
            v339 = (uint64_t *)v337[1];
            if (v339)
            {
              do
              {
                v340 = v339;
                v339 = (uint64_t *)*v339;
              }
              while (v339);
            }
            else
            {
              do
              {
                v340 = (uint64_t *)v337[2];
                _ZF = *v340 == (_QWORD)v337;
                v337 = v340;
              }
              while (!_ZF);
            }
            v337 = v340;
            if (v340 == v332)
            {
              v341 = (_QWORD *)v330[9];
              if (v341 == v333)
              {
LABEL_466:
                v330[12] = (uint64_t)v336;
                *((_WORD *)v330 + 52) = 257;
                v1128 = 1;
                v335 = v336;
              }
              else
              {
                while (1)
                {
                  v344 = (const md::TransitLink **)v341[4];
                  if (v344 != (const md::TransitLink **)v336
                    && !md::TransitLink::isSuperset(v336, v344[13], v344[14]))
                  {
                    break;
                  }
                  v345 = (_QWORD *)v341[1];
                  if (v345)
                  {
                    do
                    {
                      v346 = v345;
                      v345 = (_QWORD *)*v345;
                    }
                    while (v345);
                  }
                  else
                  {
                    do
                    {
                      v346 = (_QWORD *)v341[2];
                      _ZF = *v346 == (_QWORD)v341;
                      v341 = v346;
                    }
                    while (!_ZF);
                  }
                  v341 = v346;
                  if (v346 == v333)
                    goto LABEL_466;
                }
              }
              break;
            }
          }
          v342 = (uint64_t *)v334[1];
          if (v342)
          {
            do
            {
              v343 = v342;
              v342 = (uint64_t *)*v342;
            }
            while (v342);
          }
          else
          {
            do
            {
              v343 = (uint64_t *)v334[2];
              _ZF = *v343 == (_QWORD)v334;
              v334 = v343;
            }
            while (!_ZF);
          }
          v334 = v343;
        }
        while (v343 != v332);
      }
      v1113 = v330;
      v347 = (_QWORD *)v330[9];
      if (v347 == v333)
      {
        v349 = v1116;
      }
      else
      {
        v348 = (_QWORD *)v330[9];
        v349 = v1116;
        do
        {
          v350 = (md::TransitLink *)v348[4];
          if (v1116 == v332)
          {
LABEL_497:
            v355 = v347;
            while (1)
            {
              v356 = (const md::TransitLink **)v355[4];
              if (v356 != (const md::TransitLink **)v350
                && !md::TransitLink::isSuperset(v350, v356[13], v356[14]))
              {
                break;
              }
              v357 = (_QWORD *)v355[1];
              if (v357)
              {
                do
                {
                  v358 = v357;
                  v357 = (_QWORD *)*v357;
                }
                while (v357);
              }
              else
              {
                do
                {
                  v358 = (_QWORD *)v355[2];
                  _ZF = *v358 == (_QWORD)v355;
                  v355 = v358;
                }
                while (!_ZF);
              }
              v355 = v358;
              if (v358 == v333)
              {
                v1113[12] = (uint64_t)v350;
                *((_WORD *)v1113 + 52) = 256;
                v1128 = 1;
                v335 = v350;
                break;
              }
            }
          }
          else
          {
            v351 = v1116;
            while (1)
            {
              v352 = (const md::TransitLink **)v351[4];
              if (v352 != (const md::TransitLink **)v350
                && !md::TransitLink::isSuperset(v350, v352[13], v352[14]))
              {
                break;
              }
              v353 = (uint64_t *)v351[1];
              if (v353)
              {
                do
                {
                  v354 = v353;
                  v353 = (uint64_t *)*v353;
                }
                while (v353);
              }
              else
              {
                do
                {
                  v354 = (uint64_t *)v351[2];
                  _ZF = *v354 == (_QWORD)v351;
                  v351 = v354;
                }
                while (!_ZF);
              }
              v351 = v354;
              if (v354 == v332)
                goto LABEL_497;
            }
          }
          v359 = (_QWORD *)v348[1];
          if (v359)
          {
            do
            {
              v360 = v359;
              v359 = (_QWORD *)*v359;
            }
            while (v359);
          }
          else
          {
            do
            {
              v360 = (_QWORD *)v348[2];
              _ZF = *v360 == (_QWORD)v348;
              v348 = v360;
            }
            while (!_ZF);
          }
          v348 = v360;
        }
        while (v360 != v333);
      }
      v19 = a1;
      if (!v1128)
      {
        if (v349 == v332)
        {
          v361 = 0;
          v335 = 0;
        }
        else
        {
          v335 = 0;
          v361 = 0;
          v362 = v349;
          do
          {
            v363 = v362[4];
            v364 = (uint64_t)(*(_QWORD *)(v363 + 112) - *(_QWORD *)(v363 + 104)) >> 3;
            _CF = v361 >= v364;
            if (v361 <= v364)
              v361 = (uint64_t)(*(_QWORD *)(v363 + 112) - *(_QWORD *)(v363 + 104)) >> 3;
            if (!_CF)
              v335 = (md::TransitLink *)v362[4];
            v366 = (uint64_t *)v362[1];
            if (v366)
            {
              do
              {
                v367 = v366;
                v366 = (uint64_t *)*v366;
              }
              while (v366);
            }
            else
            {
              do
              {
                v367 = (uint64_t *)v362[2];
                _ZF = *v367 == (_QWORD)v362;
                v362 = v367;
              }
              while (!_ZF);
            }
            v362 = v367;
          }
          while (v367 != v332);
        }
        if (v347 != v333)
        {
          v368 = v347;
          do
          {
            v369 = v368[4];
            v370 = (uint64_t)(*(_QWORD *)(v369 + 112) - *(_QWORD *)(v369 + 104)) >> 3;
            v371 = v361 >= v370;
            if (v361 <= v370)
              v361 = (uint64_t)(*(_QWORD *)(v369 + 112) - *(_QWORD *)(v369 + 104)) >> 3;
            if (!v371)
              v335 = (md::TransitLink *)v368[4];
            v372 = (_QWORD *)v368[1];
            if (v372)
            {
              do
              {
                v373 = v372;
                v372 = (_QWORD *)*v372;
              }
              while (v372);
            }
            else
            {
              do
              {
                v373 = (_QWORD *)v368[2];
                _ZF = *v373 == (_QWORD)v368;
                v368 = v373;
              }
              while (!_ZF);
            }
            v368 = v373;
          }
          while (v373 != v333);
        }
        v1113[12] = (uint64_t)v335;
        if (!v335)
          goto LABEL_451;
        *((_BYTE *)v1113 + 104) = *(_QWORD *)(*(_QWORD *)v335 + 48) == v1113[4];
        v349 = v1116;
      }
      _D0 = 0;
      if (v349 != v332)
      {
        v375 = v349;
        do
        {
          v376 = (uint64_t *)v375[1];
          v377 = v375;
          if (v376)
          {
            do
            {
              v378 = v376;
              v376 = (uint64_t *)*v376;
            }
            while (v376);
          }
          else
          {
            do
            {
              v378 = (uint64_t *)v377[2];
              _ZF = *v378 == (_QWORD)v377;
              v377 = v378;
            }
            while (!_ZF);
          }
          _D0 = vsub_f32(_D0, *(float32x2_t *)(*(_QWORD *)(v375[4] + 64) - 56));
          v375 = v378;
        }
        while (v378 != v332);
      }
      v379 = v347;
      if (v347 != v333)
      {
        do
        {
          v391 = (_QWORD *)v379[1];
          v392 = v379;
          if (v391)
          {
            do
            {
              v393 = v391;
              v391 = (_QWORD *)*v391;
            }
            while (v391);
          }
          else
          {
            do
            {
              v393 = (_QWORD *)v392[2];
              _ZF = *v393 == (_QWORD)v392;
              v392 = v393;
            }
            while (!_ZF);
          }
          _D0 = vadd_f32(**(float32x2_t **)(v379[4] + 56), _D0);
          v379 = v393;
        }
        while (v393 != v333);
      }
      _S2 = _D0.i32[1];
      __asm { FMLA            S1, S2, V0.S[1] }
      v384 = 1.0 / sqrtf(_S1);
      v385 = v384 * _D0.f32[0];
      v386 = vmuls_lane_f32(v384, _D0, 1);
      *(float *)&v1156 = v384 * _D0.f32[0];
      *((float *)&v1156 + 1) = v386;
      v1138 = 0;
      if (!(_QWORD)v1156)
        goto LABEL_601;
      v387 = v1116;
      if (v1116 != v332)
      {
        v388 = 0;
        v389 = 0;
        v390 = 1.0;
        while (1)
        {
          v394 = (md::TransitLink *)v387[4];
          v395 = *((_QWORD *)v394 + 8);
          if (*(_BYTE *)(v395 - 3))
          {
            if (v394 == v335)
              goto LABEL_572;
            if (v1128)
            {
              v396 = (const md::TransitLink *)*((_QWORD *)v335 + 13);
              v397 = (const md::TransitLink *)*((_QWORD *)v335 + 14);
            }
            else
            {
              v396 = (const md::TransitLink *)*((_QWORD *)v335 + 13);
              v397 = (const md::TransitLink *)*((_QWORD *)v335 + 14);
              if (*((_QWORD *)v394 + 14) - *((_QWORD *)v394 + 13) >= (unint64_t)(v397 - v396))
                goto LABEL_572;
            }
            if (md::TransitLink::isSuperset((md::TransitLink *)v387[4], v396, v397))
            {
LABEL_572:
              v398 = -(float)((float)(*(float *)(v395 - 56) * v385) + (float)(*(float *)(v395 - 52) * v386));
              v389 |= v390 > v398;
              if (v390 > v398)
                v388 = v394;
              v390 = fminf(v390, v398);
            }
          }
          v399 = (uint64_t *)v387[1];
          if (v399)
          {
            do
            {
              v400 = v399;
              v399 = (uint64_t *)*v399;
            }
            while (v399);
          }
          else
          {
            do
            {
              v400 = (uint64_t *)v387[2];
              _ZF = *v400 == (_QWORD)v387;
              v387 = v400;
            }
            while (!_ZF);
          }
          v387 = v400;
          if (v400 == v332)
            goto LABEL_582;
        }
      }
      v389 = 0;
      v388 = 0;
      v390 = 1.0;
LABEL_582:
      if (v347 != v333)
        break;
LABEL_583:
      if (v388)
      {
        v1113[12] = (uint64_t)v388;
        *((_BYTE *)v1113 + 104) = v389 & 1;
        v335 = v388;
        v19 = a1;
        goto LABEL_602;
      }
LABEL_601:
      v19 = a1;
      if (!v335)
        goto LABEL_451;
LABEL_602:
      v409 = *((_QWORD *)v335 + 13);
      v408 = *((_QWORD *)v335 + 14);
      v410 = v408 - v409;
      if (v408 == v409)
        goto LABEL_451;
      v1156 = 0uLL;
      *(_QWORD *)&v1157 = 0;
      v411 = v1113[11] + v1113[8];
      if (v411)
      {
        if (v411 >> 61)
          abort();
        v412 = (char *)operator new(8 * v411);
        *(_QWORD *)&v1156 = v412;
        *((_QWORD *)&v1156 + 1) = v412;
        *(_QWORD *)&v1157 = &v412[8 * v411];
        v413 = (uint64_t *)v1113[6];
        if (v413 == v332)
        {
LABEL_615:
          v415 = v413;
          v414 = 0;
          v416 = (const std::nothrow_t *)MEMORY[0x1E0DE4E10];
          goto LABEL_616;
        }
      }
      else
      {
        v412 = 0;
        v413 = v1116;
        if (v1116 == v332)
          goto LABEL_615;
      }
      v414 = 0;
      v415 = v413;
      v416 = (const std::nothrow_t *)MEMORY[0x1E0DE4E10];
      do
      {
        v417 = (uint64_t *)v413[1];
        if (v417)
        {
          do
          {
            v418 = v417;
            v417 = (uint64_t *)*v417;
          }
          while (v417);
        }
        else
        {
          do
          {
            v418 = (uint64_t *)v413[2];
            _ZF = *v418 == (_QWORD)v413;
            v413 = v418;
          }
          while (!_ZF);
        }
        ++v414;
        v413 = v418;
      }
      while (v418 != v332);
LABEL_616:
      std::vector<md::TransitLink *>::__insert_with_size[abi:nn180100]<std::__tree_const_iterator<md::TransitLink *,std::__tree_node<md::TransitLink *,void *> *,long>,std::__tree_const_iterator<md::TransitLink *,std::__tree_node<md::TransitLink *,void *> *,long>>((unint64_t *)&v1156, (uint64_t)v412, v415, v332, v414);
      v419 = (_QWORD *)v1113[9];
      if (v419 == v333)
      {
        v420 = 0;
      }
      else
      {
        v420 = 0;
        v421 = (_QWORD *)v1113[9];
        do
        {
          v422 = (_QWORD *)v421[1];
          if (v422)
          {
            do
            {
              v423 = v422;
              v422 = (_QWORD *)*v422;
            }
            while (v422);
          }
          else
          {
            do
            {
              v423 = (_QWORD *)v421[2];
              _ZF = *v423 == (_QWORD)v421;
              v421 = v423;
            }
            while (!_ZF);
          }
          ++v420;
          v421 = v423;
        }
        while (v423 != v333);
      }
      std::vector<md::TransitLink *>::__insert_with_size[abi:nn180100]<std::__tree_const_iterator<md::TransitLink *,std::__tree_node<md::TransitLink *,void *> *,long>,std::__tree_const_iterator<md::TransitLink *,std::__tree_node<md::TransitLink *,void *> *,long>>((unint64_t *)&v1156, *((uint64_t *)&v1156 + 1), v419, v333, v420);
      v424 = (char *)*((_QWORD *)&v1156 + 1);
      v425 = (__n128 *)v1156;
      if ((_QWORD)v1156 == *((_QWORD *)&v1156 + 1))
      {
        v426 = (char *)v1156;
      }
      else
      {
        v426 = (char *)v1156;
        while (*(_QWORD *)v426 != v1113[12])
        {
          v426 += 8;
          if (v426 == *((char **)&v1156 + 1))
          {
            v426 = (char *)*((_QWORD *)&v1156 + 1);
            break;
          }
        }
        if (v426 != *((char **)&v1156 + 1))
        {
          v427 = v426 + 8;
          if (v426 + 8 != *((char **)&v1156 + 1))
          {
            do
            {
              if (*(_QWORD *)v427 != v1113[12])
              {
                *(_QWORD *)v426 = *(_QWORD *)v427;
                v426 += 8;
              }
              v427 += 8;
            }
            while (v427 != v424);
            v424 = (char *)*((_QWORD *)&v1156 + 1);
            v425 = (__n128 *)v1156;
          }
        }
      }
      if (v426 != v424)
      {
        v428 = v426;
        v429 = v424 - v426;
        v430 = v424 - &v428[v429];
        if (v424 != &v428[v429])
          memmove(v428, &v428[v429], v424 - &v428[v429]);
        v424 = &v428[v430];
        *((_QWORD *)&v1156 + 1) = &v428[v430];
      }
      if (v424 - (char *)v425 < 1025)
      {
LABEL_648:
        std::__stable_sort<std::_ClassicAlgPolicy,md::TransitJunction::updateLineJunctionSlots(void)::$_0 &,std::__wrap_iter<md::TransitLink **>>(v425, v424, (v424 - (char *)v425) >> 3, 0, 0);
        v433 = v424 - (char *)v425;
        if (v424 == (char *)v425)
          goto LABEL_658;
      }
      else
      {
        v431 = (v424 - (char *)v425) >> 3;
        while (1)
        {
          v432 = (char *)operator new(8 * v431, v416);
          if (v432)
            break;
          v288 = v431 > 1;
          v431 >>= 1;
          if (!v288)
            goto LABEL_648;
        }
        v446 = v432;
        std::__stable_sort<std::_ClassicAlgPolicy,md::TransitJunction::updateLineJunctionSlots(void)::$_0 &,std::__wrap_iter<md::TransitLink **>>(v425, v424, (v424 - (char *)v425) >> 3, v432, v431);
        operator delete(v446);
        v433 = v424 - (char *)v425;
        if (v424 == (char *)v425)
        {
LABEL_658:
          v447 = (void *)v1156;
          if ((_QWORD)v1156)
            goto LABEL_954;
          goto LABEL_451;
        }
      }
      __pa = v410;
      if (v433 >= 0x3FFFFFFFFFFFFFF9)
        std::__throw_bad_array_new_length[abi:nn180100]();
      v434 = 4 * v433;
      v435 = (BOOL *)operator new(4 * v433);
      v1097 = __pa >> 3;
      bzero(v435, v434);
      v436 = 0;
      v437 = v1113[4];
      v438 = *((unsigned __int8 *)v1113 + 104);
      v1117 = v435;
      v439 = v435 + 25;
      do
      {
        v440 = (_QWORD *)v425->n128_u64[0];
        v425 = (__n128 *)((char *)v425 + 8);
        v441 = v440[14] - v440[13];
        *(_QWORD *)(v439 - 25) = v440;
        v442 = *(_QWORD *)(*v440 + 48) == v437;
        *(v439 - 1) = v442;
        *v439 = v438 == v442;
        *(_QWORD *)(v439 - 17) = v436;
        v436 += v441 >> 3;
        *(_QWORD *)(v439 - 9) = v436;
        v439 += 32;
      }
      while (v425 != (__n128 *)v424);
      if (v436)
      {
        if (v436 >= 0x24924924924924ALL)
          std::__throw_bad_array_new_length[abi:nn180100]();
        v443 = (char *)operator new(112 * v436);
        v444 = &v443[112 * v436];
        v1129 = v443;
        v445 = v443;
        do
        {
          *(_OWORD *)v445 = 0uLL;
          *((_OWORD *)v445 + 1) = 0uLL;
          *((_OWORD *)v445 + 5) = 0uLL;
          *((_OWORD *)v445 + 6) = 0uLL;
          *((_OWORD *)v445 + 3) = 0uLL;
          *((_OWORD *)v445 + 4) = 0uLL;
          *((_OWORD *)v445 + 2) = 0uLL;
          *((_QWORD *)v445 + 1) = v445 + 40;
          *((_QWORD *)v445 + 2) = v445 + 40;
          *((_QWORD *)v445 + 3) = v445 + 40;
          *((_QWORD *)v445 + 4) = 8;
          *((_DWORD *)v445 + 26) = -1;
          v445 += 112;
        }
        while (v445 != v444);
      }
      else
      {
        v444 = 0;
        v1129 = 0;
      }
      v448 = 0;
      v449 = &v435[v434];
      do
      {
        v450 = *(uint64_t **)(*(_QWORD *)v435 + 104);
        v451 = *(uint64_t **)(*(_QWORD *)v435 + 112);
        if (v450 != v451)
        {
          v452 = &v1129[112 * v448];
          do
          {
            v453 = *v450;
            *(_QWORD *)v452 = *v450;
            md::TransitLink::populateMergedLinesAtIndex(*(_QWORD **)v435, *(unsigned int *)(v453 + 40), (uint64_t)(v452 + 8));
            ++v448;
            v452[108] = v435[24];
            ++v450;
            v452 += 112;
          }
          while (v450 != v451);
        }
        v435 += 32;
      }
      while (v435 != v449);
      v19 = a1;
      v454 = v1129;
      if (v1129 == v444)
        goto LABEL_951;
      v455 = 0;
      v456 = v1129;
      do
      {
        v457 = *((_QWORD *)v456 + 1);
        v458 = *((_QWORD *)v456 + 2);
        if (v457 == v458)
          goto LABEL_696;
        v459 = (int8x8_t *)v1113[12];
        v460 = v459[23];
        if (!*(_QWORD *)&v460)
          goto LABEL_696;
        v461 = (uint8x8_t)vcnt_s8(v460);
        v461.i16[0] = vaddlv_u8(v461);
        v462 = *(_QWORD *)&v460 - 1;
        v463 = v459[22];
        while (2)
        {
          v464 = *(_QWORD *)(*(_QWORD *)(**(_QWORD **)v457 + 16) + 40);
          if (v461.u32[0] > 1uLL)
          {
            v465 = *(_QWORD *)(*(_QWORD *)(**(_QWORD **)v457 + 16) + 40);
            if (*(_QWORD *)&v460 <= v464)
              v465 = v464 % *(_QWORD *)&v460;
          }
          else
          {
            v465 = v462 & v464;
          }
          v466 = *(_QWORD **)(*(_QWORD *)&v463 + 8 * v465);
          if (!v466)
            goto LABEL_672;
          v467 = (_QWORD *)*v466;
          if (!v467)
            goto LABEL_672;
          if (v461.u32[0] < 2uLL)
          {
            while (1)
            {
              v468 = v467[1];
              if (v468 == v464)
              {
                if (v467[2] == v464)
                  goto LABEL_693;
              }
              else if ((v468 & v462) != v465)
              {
                goto LABEL_672;
              }
              v467 = (_QWORD *)*v467;
              if (!v467)
                goto LABEL_672;
            }
          }
          while (1)
          {
            v469 = v467[1];
            if (v469 == v464)
              break;
            if (v469 >= *(_QWORD *)&v460)
              v469 %= *(_QWORD *)&v460;
            if (v469 != v465)
              goto LABEL_672;
LABEL_687:
            v467 = (_QWORD *)*v467;
            if (!v467)
              goto LABEL_672;
          }
          if (v467[2] != v464)
            goto LABEL_687;
LABEL_693:
          v470 = v467[3];
          if (v470 && *(_BYTE *)(v470 + 57))
          {
            *((_DWORD *)v456 + 26) = *(_DWORD *)(v470 + 40);
            goto LABEL_697;
          }
LABEL_672:
          v457 += 8;
          if (v457 != v458)
            continue;
          break;
        }
LABEL_696:
        v455 = 1;
LABEL_697:
        v456 += 112;
      }
      while (v456 != v444);
      if ((v455 & 1) == 0)
        goto LABEL_943;
      v1101 = v449;
      v471 = 0;
      v1139 = 0;
      v1140 = 0;
      v472 = v1129;
      v1138 = &v1139;
      do
      {
        if (*((_DWORD *)v472 + 26) != -1)
        {
          v473 = *((_QWORD *)v472 + 1);
          for (i = *((_QWORD *)v472 + 2); v473 != i; v473 += 8)
          {
            while (1)
            {
              v475 = *(_QWORD *)(*(_QWORD *)(**(_QWORD **)v473 + 16) + 40);
              v476 = &v1139;
              v477 = &v1139;
              if (v1139)
                break;
LABEL_714:
              v480 = (uint64_t *)operator new(0x30uLL);
              v480[4] = v475;
              *((_DWORD *)v480 + 10) = *((_DWORD *)v472 + 26);
              *v480 = 0;
              v480[1] = 0;
              v480[2] = (uint64_t)v476;
              *v477 = (char *)v480;
              if (*(_QWORD *)v1138)
              {
                v1138 = *(void **)v1138;
                v480 = (uint64_t *)*v477;
              }
              v481 = (uint64_t *)v1139;
              _ZF = v480 == (uint64_t *)v1139;
              *((_BYTE *)v480 + 24) = v480 == (uint64_t *)v1139;
              v19 = a1;
              if (!_ZF)
              {
                do
                {
                  v482 = v480[2];
                  if (*(_BYTE *)(v482 + 24))
                    break;
                  v483 = *(uint64_t **)(v482 + 16);
                  v484 = *v483;
                  if (*v483 == v482)
                  {
                    v487 = v483[1];
                    if (!v487 || (v488 = *(unsigned __int8 *)(v487 + 24), v485 = (_BYTE *)(v487 + 24), v488))
                    {
                      if (*(uint64_t **)v482 == v480)
                      {
                        v489 = v480[2];
                      }
                      else
                      {
                        v489 = *(_QWORD *)(v482 + 8);
                        v490 = *(_QWORD *)v489;
                        *(_QWORD *)(v482 + 8) = *(_QWORD *)v489;
                        if (v490)
                        {
                          *(_QWORD *)(v490 + 16) = v482;
                          v483 = *(uint64_t **)(v482 + 16);
                        }
                        *(_QWORD *)(v489 + 16) = v483;
                        *(_QWORD *)(*(_QWORD *)(v482 + 16) + 8 * (**(_QWORD **)(v482 + 16) != v482)) = v489;
                        *(_QWORD *)v489 = v482;
                        *(_QWORD *)(v482 + 16) = v489;
                        v483 = *(uint64_t **)(v489 + 16);
                        v482 = *v483;
                      }
                      *(_BYTE *)(v489 + 24) = 1;
                      *((_BYTE *)v483 + 24) = 0;
                      v493 = *(_QWORD *)(v482 + 8);
                      *v483 = v493;
                      if (v493)
                        *(_QWORD *)(v493 + 16) = v483;
                      *(_QWORD *)(v482 + 16) = v483[2];
                      *(_QWORD *)(v483[2] + 8 * (*(_QWORD *)v483[2] != (_QWORD)v483)) = v482;
                      *(_QWORD *)(v482 + 8) = v483;
                      goto LABEL_705;
                    }
                  }
                  else if (!v484 || (v486 = *(unsigned __int8 *)(v484 + 24), v485 = (_BYTE *)(v484 + 24), v486))
                  {
                    if (*(uint64_t **)v482 == v480)
                    {
                      v491 = v480[1];
                      *(_QWORD *)v482 = v491;
                      if (v491)
                      {
                        *(_QWORD *)(v491 + 16) = v482;
                        v483 = *(uint64_t **)(v482 + 16);
                      }
                      v480[2] = (uint64_t)v483;
                      *(_QWORD *)(*(_QWORD *)(v482 + 16) + 8 * (**(_QWORD **)(v482 + 16) != v482)) = v480;
                      v480[1] = v482;
                      *(_QWORD *)(v482 + 16) = v480;
                      v483 = (uint64_t *)v480[2];
                    }
                    else
                    {
                      v480 = (uint64_t *)v480[2];
                    }
                    *((_BYTE *)v480 + 24) = 1;
                    *((_BYTE *)v483 + 24) = 0;
                    v482 = v483[1];
                    v492 = *(uint64_t **)v482;
                    v483[1] = *(_QWORD *)v482;
                    if (v492)
                      v492[2] = (uint64_t)v483;
                    *(_QWORD *)(v482 + 16) = v483[2];
                    *(_QWORD *)(v483[2] + 8 * (*(_QWORD *)v483[2] != (_QWORD)v483)) = v482;
                    *(_QWORD *)v482 = v483;
LABEL_705:
                    v483[2] = v482;
                    break;
                  }
                  *(_BYTE *)(v482 + 24) = 1;
                  v480 = v483;
                  *((_BYTE *)v483 + 24) = v483 == v481;
                  *v485 = 1;
                }
                while (v483 != v481);
              }
              v1140 = (_BYTE *)++v471;
              v473 += 8;
              if (v473 == i)
                goto LABEL_700;
            }
            v478 = (uint64_t *)v1139;
            while (1)
            {
              while (1)
              {
                v476 = (char **)v478;
                v479 = v478[4];
                if (v475 >= v479)
                  break;
                v478 = (uint64_t *)*v476;
                v477 = v476;
                if (!*v476)
                  goto LABEL_714;
              }
              if (v479 >= v475)
                break;
              v478 = (uint64_t *)v476[1];
              if (!v478)
              {
                v477 = v476 + 1;
                goto LABEL_714;
              }
            }
            v19 = a1;
          }
        }
LABEL_700:
        v472 += 112;
      }
      while (v472 != v444);
      v494 = (uint64_t *)v1139;
      v454 = v1129;
      if (v1129 == v444)
      {
        std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(v1139);
LABEL_951:
        if (!v454)
          goto LABEL_953;
LABEL_952:
        operator delete(v1129);
        goto LABEL_953;
      }
      v495 = 0;
      v496 = v1129;
      do
      {
        if (*((_DWORD *)v496 + 26) == -1)
        {
          v497 = *((_QWORD *)v496 + 1);
          v498 = *((_QWORD *)v496 + 2);
          if (v497 == v498 || v494 == 0)
            goto LABEL_746;
          while (1)
          {
            v500 = *(_QWORD *)(*(_QWORD *)(**(_QWORD **)v497 + 16) + 40);
            v501 = (uint64_t **)&v1139;
            v502 = v494;
            do
            {
              v503 = v502;
              v504 = v501;
              v505 = v502[4];
              if (v505 >= v500)
                v501 = (uint64_t **)v502;
              else
                ++v502;
              v502 = (uint64_t *)*v502;
            }
            while (v502);
            if (v501 != (uint64_t **)&v1139)
            {
              v506 = v505 >= v500 ? v503 : (uint64_t *)v504;
              if (v500 >= v506[4])
                break;
            }
            v497 += 8;
            if (v497 == v498)
              goto LABEL_746;
          }
          v507 = v505 >= v500 ? v503 : (uint64_t *)v504;
          v508 = *((_DWORD *)v507 + 10);
          if (v508 == -1)
LABEL_746:
            v495 = 1;
          else
            *((_DWORD *)v496 + 26) = v508;
        }
        v496 += 112;
      }
      while (v496 != v444);
      std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(v494);
      if ((v495 & 1) == 0)
        goto LABEL_943;
      __lena = 0;
      v509 = v1129;
      while (2)
      {
        if (*((_DWORD *)v509 + 26) != -1)
          goto LABEL_775;
        v1139 = 0;
        v1140 = 0;
        v1138 = &v1139;
        v510 = v1113[12];
        v512 = *(uint64_t ***)(v510 + 104);
        v511 = *(uint64_t ***)(v510 + 112);
        v513 = v1129;
        if (v512 != v511)
        {
          v514 = v511;
          v1107 = v509;
          while (1)
          {
            v515 = *v512;
            v516 = **v512;
            v517 = *(uint64_t ***)(v516 + 24);
            v1152 = v517;
            v518 = ((int)(float)(*(float *)(v516 + 44) * 255.0) << 16) | ((int)(float)(*(float *)(v516 + 48) * 255.0) << 24) | ((int)(float)(*(float *)(v516 + 40) * 255.0) << 8) | (int)(float)(*(float *)(v516 + 36) * 255.0);
            LODWORD(v1153) = v518;
            v519 = *((_DWORD *)v515 + 10);
            v520 = &v1139;
            v521 = &v1139;
            if (v1139)
              break;
LABEL_798:
            v532 = operator new(0x38uLL);
            v532[4] = v517;
            *((_DWORD *)v532 + 10) = v518;
            *((_DWORD *)v532 + 12) = v519;
            *v532 = 0;
            v532[1] = 0;
            v532[2] = v520;
            *v521 = (char *)v532;
            if (*(_QWORD *)v1138)
            {
              v1138 = *(void **)v1138;
              v532 = *v521;
            }
            std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>((uint64_t *)v1139, v532);
            ++v1140;
LABEL_780:
            if (++v512 == v514)
            {
              v513 = v1129;
              v509 = v1107;
              goto LABEL_803;
            }
          }
          v522 = (uint64_t *)v1139;
          while (1)
          {
            v520 = (char **)v522;
            v523 = v522[4];
            if (v517 == (uint64_t **)v523)
            {
              v524 = bswap32(v1153);
              v525 = bswap32(*((_DWORD *)v520 + 10));
              _CF = v524 >= v525;
              v526 = v524 > v525;
              v527 = !_CF;
              if (v526 - v527 < 0)
              {
LABEL_783:
                v522 = (uint64_t *)*v520;
                v521 = v520;
                if (!*v520)
                  goto LABEL_798;
                continue;
              }
              v528 = bswap32(*((_DWORD *)v520 + 10));
              v529 = bswap32(v1153);
              _CF = v528 >= v529;
              v530 = v528 > v529;
              v531 = !_CF;
              if (v530 - v531 >= 0)
                goto LABEL_780;
            }
            else
            {
              if ((unint64_t)v517 < v523)
                goto LABEL_783;
              if (v523 >= (unint64_t)v517)
                goto LABEL_780;
            }
            v522 = (uint64_t *)v520[1];
            if (!v522)
            {
              v521 = v520 + 1;
              goto LABEL_798;
            }
          }
        }
LABEL_803:
        while (2)
        {
          if (v513 == v509 || *((_DWORD *)v513 + 26) == -1)
            goto LABEL_802;
          v533 = ***((_QWORD ***)v513 + 1);
          v534 = *(uint64_t ***)(v533 + 24);
          v1152 = v534;
          v535 = ((int)(float)(*(float *)(v533 + 44) * 255.0) << 16) | ((int)(float)(*(float *)(v533 + 48) * 255.0) << 24) | ((int)(float)(*(float *)(v533 + 40) * 255.0) << 8) | (int)(float)(*(float *)(v533 + 36) * 255.0);
          LODWORD(v1153) = v535;
          v536 = &v1139;
          v537 = &v1139;
          if (!v1139)
            goto LABEL_822;
          v538 = (uint64_t *)v1139;
          while (2)
          {
            while (2)
            {
              v536 = (char **)v538;
              v539 = v538[4];
              if (v534 != (uint64_t **)v539)
              {
                if ((unint64_t)v534 >= v539)
                {
                  if (v539 >= (unint64_t)v534)
                    goto LABEL_802;
                  goto LABEL_820;
                }
LABEL_807:
                v538 = (uint64_t *)*v536;
                v537 = v536;
                if (!*v536)
                  goto LABEL_822;
                continue;
              }
              break;
            }
            v540 = bswap32(v1153);
            v541 = bswap32(*((_DWORD *)v536 + 10));
            _CF = v540 >= v541;
            v542 = v540 > v541;
            v543 = !_CF;
            if (v542 - v543 < 0)
              goto LABEL_807;
            v544 = bswap32(*((_DWORD *)v536 + 10));
            v545 = bswap32(v1153);
            _CF = v544 >= v545;
            v546 = v544 > v545;
            v547 = !_CF;
            if (v546 - v547 >= 0)
              goto LABEL_802;
LABEL_820:
            v538 = (uint64_t *)v536[1];
            if (v538)
              continue;
            break;
          }
          v537 = v536 + 1;
LABEL_822:
          v548 = operator new(0x38uLL);
          v548[4] = v534;
          *((_DWORD *)v548 + 10) = v535;
          *((_DWORD *)v548 + 12) = *((_DWORD *)v513 + 26);
          *v548 = 0;
          v548[1] = 0;
          v548[2] = v536;
          *v537 = (char *)v548;
          if (*(_QWORD *)v1138)
          {
            v1138 = *(void **)v1138;
            v548 = *v537;
          }
          std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>((uint64_t *)v1139, v548);
          ++v1140;
LABEL_802:
          v513 += 112;
          if (v513 != v444)
            continue;
          break;
        }
        v549 = ***((_QWORD ***)v509 + 1);
        v550 = *(uint64_t ***)(v549 + 24);
        v1152 = v550;
        LODWORD(v1153) = ((int)(float)(*(float *)(v549 + 44) * 255.0) << 16) | ((int)(float)(*(float *)(v549 + 48)
                                                                                           * 255.0) << 24) | ((int)(float)(*(float *)(v549 + 40) * 255.0) << 8) | (int)(float)(*(float *)(v549 + 36) * 255.0);
        v551 = (uint64_t *)v1139;
        v19 = a1;
        if (!v1139)
          goto LABEL_773;
        v552 = (uint64_t **)&v1139;
        v553 = (uint64_t *)v1139;
        do
        {
          v559 = v553;
          v560 = v552;
          v561 = v553[4];
          if ((uint64_t **)v561 == v550)
          {
            v554 = bswap32(*((_DWORD *)v553 + 10));
            v555 = bswap32(v1153);
            _CF = v554 >= v555;
            v556 = v554 > v555;
            v557 = !_CF;
            v558 = (v556 - v557) >> 31;
          }
          else
          {
            v558 = v561 < (unint64_t)v550;
          }
          if (v558)
          {
            ++v553;
            v552 = v560;
          }
          else
          {
            v552 = (uint64_t **)v553;
          }
          v553 = (uint64_t *)*v553;
        }
        while (v553);
        if (v552 == (uint64_t **)&v1139)
        {
LABEL_773:
          __lena = 1;
        }
        else
        {
          if (v558)
            v562 = v560;
          else
            v562 = v559;
          v563 = (uint64_t **)*((_QWORD *)v562 + 4);
          if (v550 == v563)
          {
            if (v558)
              v564 = v560;
            else
              v564 = v559;
            v565 = bswap32(v1153);
            v566 = bswap32(v564[10]);
            _CF = v565 >= v566;
            v567 = v565 > v566;
            v568 = !_CF;
            if (v567 - v568 < 0)
              goto LABEL_773;
          }
          else if (v550 < v563)
          {
            goto LABEL_773;
          }
          if (v558)
            v569 = v560;
          else
            v569 = v559;
          *((_DWORD *)v509 + 26) = v569[12];
        }
        std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(v551);
LABEL_775:
        v509 += 112;
        if (v509 != v444)
          continue;
        break;
      }
      if ((__lena & 1) != 0)
      {
        if (__pa < 0)
          abort();
        v570 = operator new(__pa);
        bzero(v570, __pa);
        v1108 = 0;
        v1139 = 0;
        v1140 = 0;
        v1138 = &v1139;
        v571 = v1097 >> 1;
        __lenb = ((__pa - 8) & 0xFFFFFFFFFFFFFFF8) + 8;
        v572 = v1117;
        memset(v570, 255, __lenb);
        while (1)
        {
          v574 = *((_QWORD *)v572 + 1);
          v573 = *((_QWORD *)v572 + 2);
          v575 = v573 - v574;
          if (v573 > v574)
          {
            v576 = 0;
            v577 = (uint64_t *)v1139;
            v578 = *((_QWORD *)v572 + 1);
            do
            {
              v579 = &v1129[112 * v578];
              v582 = *((_DWORD *)v579 + 26);
              v580 = v579 + 104;
              v581 = v582;
              if (v582 != -1)
                goto LABEL_862;
              if (!v577)
                goto LABEL_880;
              v583 = *(_QWORD *)(*(_QWORD *)(**(_QWORD **)&v1129[112 * v578] + 16) + 40);
              v584 = (uint64_t **)&v1139;
              v585 = v577;
              do
              {
                v586 = v585;
                v587 = v584;
                v588 = v585[4];
                if (v588 >= v583)
                  v584 = (uint64_t **)v585;
                else
                  ++v585;
                v585 = (uint64_t *)*v585;
              }
              while (v585);
              if (v584 == (uint64_t **)&v1139
                || (v588 >= v583 ? (v589 = v586) : (v589 = v587),
                    v583 < v589[4]
                 || (v588 >= v583 ? (v590 = (unsigned int *)v586) : (v590 = (unsigned int *)v587),
                     v581 = v590[10],
                     *v580 = v581,
                     (_DWORD)v581 == -1)))
              {
LABEL_880:
                v576 = 1;
              }
              else
              {
LABEL_862:
                *((_QWORD *)v570 + v581) = v578;
              }
              ++v578;
            }
            while (v578 != v573);
            if ((v576 & 1) != 0)
            {
              if (v1097 >= v575)
              {
                v592 = (v1097 - v575) >> 1;
                if (v575 <= 1)
                  v593 = 1;
                else
                  v593 = v573 - v574;
                v1088 = v593;
                v1091 = v572;
                do
                {
                  v594 = &v1129[112 * v574];
                  v596 = *((_DWORD *)v594 + 26);
                  v595 = v594 + 104;
                  if (v596 == -1)
                  {
                    v597 = *((_QWORD *)v572 + 1);
                    v598 = v593;
                    v599 = v574;
                    if (v572[25])
                    {
                      while (1)
                      {
                        v600 = v597 + ~v599 + v575 + v592;
                        v599 = *((_QWORD *)v570 + v600);
                        if (v599 == -1)
                          break;
                        if (!--v598)
                          goto LABEL_891;
                      }
                    }
                    else
                    {
                      v601 = v593;
                      v602 = v574;
                      while (1)
                      {
                        v600 = v602 - v597 + v592;
                        v602 = *((_QWORD *)v570 + v600);
                        if (v602 == -1)
                          break;
                        if (!--v601)
                        {
LABEL_891:
                          *v595 = v571;
                          goto LABEL_892;
                        }
                      }
                    }
                    *((_QWORD *)v570 + v600) = v574;
                    *v595 = v600;
                    v603 = *(_QWORD *)(*(_QWORD *)(**(_QWORD **)&v1129[112 * v574] + 16) + 40);
                    v604 = &v1139;
                    v605 = &v1139;
                    if (v1139)
                    {
                      v606 = (uint64_t *)v1139;
                      while (1)
                      {
                        while (1)
                        {
                          v604 = (char **)v606;
                          v607 = v606[4];
                          if (v603 >= v607)
                            break;
                          v606 = (uint64_t *)*v604;
                          v605 = v604;
                          if (!*v604)
                            goto LABEL_910;
                        }
                        if (v607 >= v603)
                          break;
                        v606 = (uint64_t *)v604[1];
                        if (!v606)
                        {
                          v605 = v604 + 1;
                          goto LABEL_910;
                        }
                      }
                      v19 = a1;
                      LODWORD(v571) = v1097 >> 1;
                      v593 = v1088;
                      v572 = v1091;
                    }
                    else
                    {
LABEL_910:
                      v608 = (uint64_t *)operator new(0x30uLL);
                      v608[4] = v603;
                      *((_DWORD *)v608 + 10) = *v595;
                      *v608 = 0;
                      v608[1] = 0;
                      v608[2] = (uint64_t)v604;
                      *v605 = (char *)v608;
                      if (*(_QWORD *)v1138)
                      {
                        v1138 = *(void **)v1138;
                        v608 = (uint64_t *)*v605;
                      }
                      v609 = (uint64_t *)v1139;
                      _ZF = v608 == (uint64_t *)v1139;
                      *((_BYTE *)v608 + 24) = v608 == (uint64_t *)v1139;
                      v19 = a1;
                      LODWORD(v571) = v1097 >> 1;
                      v593 = v1088;
                      v572 = v1091;
                      if (!_ZF)
                      {
                        do
                        {
                          v610 = v608[2];
                          if (*(_BYTE *)(v610 + 24))
                            break;
                          v611 = *(uint64_t **)(v610 + 16);
                          v612 = *v611;
                          if (*v611 == v610)
                          {
                            v615 = v611[1];
                            if (!v615 || (v616 = *(unsigned __int8 *)(v615 + 24), v613 = (_BYTE *)(v615 + 24), v616))
                            {
                              if (*(uint64_t **)v610 == v608)
                              {
                                v617 = v608[2];
                              }
                              else
                              {
                                v617 = *(_QWORD *)(v610 + 8);
                                v618 = *(_QWORD *)v617;
                                *(_QWORD *)(v610 + 8) = *(_QWORD *)v617;
                                if (v618)
                                {
                                  *(_QWORD *)(v618 + 16) = v610;
                                  v611 = *(uint64_t **)(v610 + 16);
                                }
                                *(_QWORD *)(v617 + 16) = v611;
                                *(_QWORD *)(*(_QWORD *)(v610 + 16) + 8 * (**(_QWORD **)(v610 + 16) != v610)) = v617;
                                *(_QWORD *)v617 = v610;
                                *(_QWORD *)(v610 + 16) = v617;
                                v611 = *(uint64_t **)(v617 + 16);
                                v610 = *v611;
                              }
                              *(_BYTE *)(v617 + 24) = 1;
                              *((_BYTE *)v611 + 24) = 0;
                              v621 = *(_QWORD *)(v610 + 8);
                              *v611 = v621;
                              if (v621)
                                *(_QWORD *)(v621 + 16) = v611;
                              *(_QWORD *)(v610 + 16) = v611[2];
                              *(_QWORD *)(v611[2] + 8 * (*(_QWORD *)v611[2] != (_QWORD)v611)) = v610;
                              *(_QWORD *)(v610 + 8) = v611;
                              goto LABEL_940;
                            }
                          }
                          else if (!v612 || (v614 = *(unsigned __int8 *)(v612 + 24), v613 = (_BYTE *)(v612 + 24), v614))
                          {
                            if (*(uint64_t **)v610 == v608)
                            {
                              v619 = v608[1];
                              *(_QWORD *)v610 = v619;
                              if (v619)
                              {
                                *(_QWORD *)(v619 + 16) = v610;
                                v611 = *(uint64_t **)(v610 + 16);
                              }
                              v608[2] = (uint64_t)v611;
                              *(_QWORD *)(*(_QWORD *)(v610 + 16) + 8 * (**(_QWORD **)(v610 + 16) != v610)) = v608;
                              v608[1] = v610;
                              *(_QWORD *)(v610 + 16) = v608;
                              v611 = (uint64_t *)v608[2];
                            }
                            else
                            {
                              v608 = (uint64_t *)v608[2];
                            }
                            *((_BYTE *)v608 + 24) = 1;
                            *((_BYTE *)v611 + 24) = 0;
                            v610 = v611[1];
                            v620 = *(uint64_t **)v610;
                            v611[1] = *(_QWORD *)v610;
                            if (v620)
                              v620[2] = (uint64_t)v611;
                            *(_QWORD *)(v610 + 16) = v611[2];
                            *(_QWORD *)(v611[2] + 8 * (*(_QWORD *)v611[2] != (_QWORD)v611)) = v610;
                            *(_QWORD *)v610 = v611;
LABEL_940:
                            v611[2] = v610;
                            break;
                          }
                          *(_BYTE *)(v610 + 24) = 1;
                          v608 = v611;
                          *((_BYTE *)v611 + 24) = v611 == v609;
                          *v613 = 1;
                        }
                        while (v611 != v609);
                      }
                      v1140 = (_BYTE *)++v1108;
                      v573 = *((_QWORD *)v1091 + 2);
                    }
                  }
                  else
                  {
LABEL_892:
                    v19 = a1;
                  }
                  ++v574;
                }
                while (v574 < v573);
              }
              else
              {
                v591 = &v1129[112 * v574 + 104];
                do
                {
                  if (*(_DWORD *)v591 == -1)
                    *(_DWORD *)v591 = v571;
                  v591 += 112;
                  --v575;
                }
                while (v575);
              }
            }
          }
          v572 += 32;
          if (v572 == v1101)
            break;
          memset(v570, 255, __lenb);
        }
        std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(v1139);
        operator delete(v570);
      }
LABEL_943:
      v454 = v1129;
      if (v1129 == v444)
        goto LABEL_951;
      v622 = v1129;
      do
      {
        v624 = *((unsigned int *)v622 + 26);
        if (v1097 <= v624)
        {
          *((_DWORD *)v622 + 26) = v1097 >> 1;
          LODWORD(v624) = v1097 >> 1;
        }
        v623 = *(_QWORD *)v622;
        if (v622[108])
          *(_DWORD *)(v623 + 48) = v624;
        else
          *(_DWORD *)(v623 + 44) = v624;
        v622 += 112;
      }
      while (v622 != v444);
      if (v1129)
      {
        do
        {
          v625 = (void *)*((_QWORD *)v444 - 13);
          if (v625 != *((void **)v444 - 11))
            free(v625);
          v444 -= 112;
        }
        while (v444 != v1129);
        goto LABEL_952;
      }
LABEL_953:
      operator delete(v1117);
      v447 = (void *)v1156;
      if ((_QWORD)v1156)
LABEL_954:
        operator delete(v447);
LABEL_451:
      v330 = (uint64_t *)*v1113;
      if (!*v1113)
      {
        v331 = 1;
        goto LABEL_963;
      }
    }
    while (1)
    {
      v401 = (md::TransitLink *)v347[4];
      v402 = *((_QWORD *)v401 + 7);
      if (*(_BYTE *)(v402 + 93))
      {
        if (v401 == v335)
          goto LABEL_592;
        if (v1128)
        {
          v403 = (const md::TransitLink *)*((_QWORD *)v335 + 13);
          v404 = (const md::TransitLink *)*((_QWORD *)v335 + 14);
        }
        else
        {
          v403 = (const md::TransitLink *)*((_QWORD *)v335 + 13);
          v404 = (const md::TransitLink *)*((_QWORD *)v335 + 14);
          if (*((_QWORD *)v401 + 14) - *((_QWORD *)v401 + 13) >= (unint64_t)(v404 - v403))
            goto LABEL_592;
        }
        if (md::TransitLink::isSuperset((md::TransitLink *)v347[4], v403, v404))
        {
LABEL_592:
          v405 = (float)(*(float *)v402 * v385) + (float)(*(float *)(v402 + 4) * v386);
          v389 &= v390 <= v405;
          if (v390 > v405)
            v388 = v401;
          v390 = fminf(v390, v405);
        }
      }
      v406 = (_QWORD *)v347[1];
      if (v406)
      {
        do
        {
          v407 = v406;
          v406 = (_QWORD *)*v406;
        }
        while (v406);
      }
      else
      {
        do
        {
          v407 = (_QWORD *)v347[2];
          _ZF = *v407 == (_QWORD)v347;
          v347 = v407;
        }
        while (!_ZF);
      }
      v347 = v407;
      if (v407 == v333)
        goto LABEL_583;
    }
  }
  if ((v259 & 1) != 0)
    goto LABEL_449;
LABEL_962:
  v331 = 0;
LABEL_963:
  v626 = *(_QWORD **)(a2 + 8);
  v627 = v626[1];
  if ((v627 & (v627 - 1)) != 0)
  {
    v629 = 0x1AF456233693CD46;
    if (v627 <= 0x1AF456233693CD46)
      v629 = 0x1AF456233693CD46 % v627;
    v628 = *(_QWORD **)(*v626 + 8 * v629);
    do
    {
      do
        v628 = (_QWORD *)*v628;
      while (v628[1] != 0x1AF456233693CD46);
    }
    while (v628[2] != 0x1AF456233693CD46);
  }
  else
  {
    v628 = *(_QWORD **)(*v626 + 8 * ((v627 - 1) & 0x1AF456233693CD46));
    do
    {
      do
        v628 = (_QWORD *)*v628;
      while (v628[1] != 0x1AF456233693CD46);
    }
    while (v628[2] != 0x1AF456233693CD46);
  }
  v630 = *(double *)(*(_QWORD *)(v628[5] + 32) + 3768)
       / (*(double *)(*(_QWORD *)(v628[5] + 32) + 1368)
        * (*(double *)(v19 + 1312) - *(double *)(v19 + 1296)));
  v631 = *(_QWORD *)(v19 + 888);
  v1118 = *(void **)(v19 + 896);
  if ((void *)v631 != v1118)
  {
    v1123 = (float32x4_t)vdupq_n_s32(0x437F0000u);
    v1130 = v331;
    do
    {
      v632 = *(unint64_t **)(v631 + 104);
      v633 = *(unint64_t **)(v631 + 112);
      if (v632 != v633)
      {
        v634 = (float *)(v631 + 136);
        do
        {
          v639 = *v632;
          v640 = *(_QWORD **)v634;
          v641 = 0.0;
          if (*(_QWORD *)v634)
          {
            v642 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v639 + 16) + 40);
            v643 = (float *)(v631 + 136);
            do
            {
              v644 = v640[4];
              v645 = v644 >= v642;
              if (v644 >= v642)
                v646 = v640;
              else
                v646 = v640 + 1;
              if (v645)
                v643 = (float *)v640;
              v640 = (_QWORD *)*v646;
            }
            while (*v646);
            if (v643 != v634 && *((_QWORD *)v643 + 4) <= v642)
              v641 = v643[10];
          }
          v647 = *(md::TransitJunction **)(*(_QWORD *)(v631 + 56) + 24);
          v648 = v641;
          if (v647)
          {
            v648 = md::TransitJunction::calculateOffsetForLineSegment(v647, *v632);
            v331 = v1130;
          }
          v649 = *(md::TransitJunction **)(*(_QWORD *)(v631 + 64) - 32);
          v637 = v641;
          if (v649)
          {
            v637 = md::TransitJunction::calculateOffsetForLineSegment(v649, v639);
            v331 = v1130;
          }
          v635 = vabds_f32(v648, v637) * v630;
          if (fabsf(v648) <= fabsf(v637))
            v636 = v648;
          else
            v636 = v637;
          if (v635 < *(float *)(v631 + 232))
          {
            v638 = v648;
          }
          else
          {
            v637 = v636;
            v638 = v636;
          }
          *(float *)(v639 + 20) = v638;
          *(float *)(v639 + 24) = v637;
          *(float *)(v639 + 28) = v641;
          ++v632;
        }
        while (v632 != v633);
      }
      v19 = a1;
      if (*(_QWORD *)(a1 + 784))
      {
        v650 = *(uint64_t **)(v631 + 40);
        if (!v650)
        {
          v651 = *(_QWORD *)(**(_QWORD **)(v631 + 24) + 32);
          v652 = operator new(0x40uLL);
          v652[1] = 0;
          v652[2] = 0;
          *v652 = &off_1E42DD850;
          v652[3] = 0;
          v652[4] = 0;
          v652[5] = 0;
          {
            v692 = operator new();
            *(_QWORD *)(v692 + 16) = 0x5ED09DD50000000FLL;
            *(_QWORD *)(v692 + 24) = "VectorKitLabels";
            *(_OWORD *)(v692 + 32) = xmmword_19FFB2E80;
            *(_QWORD *)v692 = &off_1E42B5668;
            *(_QWORD *)(v692 + 8) = "VectorKitLabels";
            *(_OWORD *)(v692 + 72) = 0u;
            *(_OWORD *)(v692 + 88) = 0u;
            *(_OWORD *)(v692 + 104) = 0u;
            *(_OWORD *)(v692 + 120) = 0u;
            *(_OWORD *)(v692 + 136) = 0u;
            *(_OWORD *)(v692 + 152) = 0u;
            *(_OWORD *)(v692 + 168) = 0u;
            *(_OWORD *)(v692 + 184) = 0u;
            *(_OWORD *)(v692 + 200) = 0u;
            *(_OWORD *)(v692 + 216) = 0u;
            *(_OWORD *)(v692 + 232) = 0u;
            *(_QWORD *)(v692 + 248) = 0;
            *(_OWORD *)(v692 + 56) = 0u;
            v693 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v692 + 56), 0);
            if ((_DWORD)v693)
              geo::read_write_lock::logFailure(v693, (uint64_t)"initialization", v694);
            zone = malloc_create_zone(0, 0);
            *(_QWORD *)(v692 + 48) = zone;
            malloc_set_zone_name(zone, "VectorKitLabels");
            *(_QWORD *)(v692 + 256) = os_log_create("com.apple.VectorKit", "Memory");
            mdm::Allocator::instance(void)::alloc = v692;
          }
          v654 = mdm::Allocator::instance(void)::alloc;
          v652[6] = mdm::Allocator::instance(void)::alloc;
          if (v651)
          {
            if (v651 >> 60)
              abort();
            v655 = 16 * v651;
            v656 = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)v654 + 16))(v654, 16 * v651, 4);
            v652[3] = v656;
            v657 = v656 + 16 * v651;
            v652[5] = v657;
            do
            {
              if (v656)
              {
                *(_QWORD *)v656 = 0;
                *(_QWORD *)(v656 + 8) = 0;
                *(_BYTE *)(v656 + 7) = -1;
                *(_DWORD *)(v656 + 8) = 0;
                *(_BYTE *)(v656 + 12) = 0;
              }
              v656 += 16;
              v655 -= 16;
            }
            while (v655);
            v652[4] = v657;
          }
          *((_WORD *)v652 + 28) = 0;
          *(_QWORD *)&v658 = v652 + 3;
          *((_QWORD *)&v658 + 1) = v652;
          v659 = *(std::__shared_weak_count **)(v631 + 48);
          *(_OWORD *)(v631 + 40) = v658;
          if (v659)
          {
            p_shared_owners = (unint64_t *)&v659->__shared_owners_;
            do
              v661 = __ldaxr(p_shared_owners);
            while (__stlxr(v661 - 1, p_shared_owners));
            if (!v661)
            {
              ((void (*)(std::__shared_weak_count *))v659->__on_zero_shared)(v659);
              std::__shared_weak_count::__release_weak(v659);
            }
          }
          v650 = *(uint64_t **)(v631 + 40);
        }
        v663 = *(_QWORD **)(v631 + 80);
        v662 = *(_QWORD **)(v631 + 88);
        if (v663 != v662)
        {
          v664 = 0;
          do
          {
            v666 = *v650;
            if (*v663)
              v667 = (unsigned __int8 *)(*v663 + 8);
            else
              v667 = 0;
            v668 = *(_QWORD *)v667;
            *(_BYTE *)(v666 + v664 + 11) = *(_BYTE *)(*(_QWORD *)v667 + 88);
            v669 = v667[52];
            v670 = *(_QWORD *)(v668 + 64);
            md::TransitLine::updateFeatureQueryForMergeTypeIfNecessary((uint64_t *)v668, v669);
            v671 = v670 + 184 * v669;
            v673 = *(unsigned __int8 *)(v671 + 177);
            v672 = (_BYTE *)(v671 + 177);
            if (v673)
            {
              md::TransitLine::_resolveStyle(v668, *(_DWORD *)(v668 + 60), *(_QWORD *)(v670 + 184 * v669), *(std::__shared_weak_count **)(v670 + 184 * v669 + 8), v670 + 184 * v669 + 16);
              *v672 = 0;
            }
            v674 = v666 + v664;
            v675 = (int16x8_t)vcvtq_s32_f32(vmulq_f32(*(float32x4_t *)(v670 + 184 * v669 + 32), v1123));
            *(int16x4_t *)v675.i8 = vmovn_s32((int32x4_t)v675);
            *(_DWORD *)(v666 + v664 + 4) = vmovn_s16(v675).u32[0];
            if (*v663)
              v676 = *v663 + 8;
            else
              v676 = 0;
            *(_BYTE *)(v674 + 8) = *(_BYTE *)(v676 + 52);
            v677 = *(unsigned __int8 *)(v676 + 57);
            *(_BYTE *)(v674 + 12) = v677;
            if (v677
              && (v678 = *(unsigned int *)(v676 + 40),
                  v679 = *(_QWORD *)(v631 + 104),
                  v678 < (*(_QWORD *)(v631 + 112) - v679) >> 3))
            {
              v680 = *(_QWORD *)(v679 + 8 * v678);
              v681 = v666 + v664;
              *(_DWORD *)v681 = *(_DWORD *)(v680 + 28);
              *(_BYTE *)(v681 + 9) = *(_BYTE *)(v680 + 53);
              v665 = *(_BYTE *)(v680 + 54);
            }
            else
            {
              v665 = 0;
              *(_DWORD *)v674 = 0;
              *(_BYTE *)(v674 + 9) = 0;
            }
            *(_BYTE *)(v666 + v664 + 10) = v665;
            ++v663;
            v664 += 16;
          }
          while (v663 != v662);
          v650 = *(uint64_t **)(v631 + 40);
        }
        v682 = *(_QWORD *)(v631 + 112) - *(_QWORD *)(v631 + 104);
        if (v682 >= 0x18)
          v683 = 3;
        else
          v683 = v682 >> 3;
        *((_BYTE *)v650 + 33) = v683;
        *((_BYTE *)v650 + 32) = *(_BYTE *)(v631 + 168);
        v684 = *(_QWORD *)(v631 + 24);
        std::mutex::lock((std::mutex *)(v684 + 40));
        v686 = *(_QWORD *)(v631 + 40);
        v685 = *(_QWORD *)(v631 + 48);
        if (v685)
        {
          v687 = (unint64_t *)(v685 + 8);
          do
            v688 = __ldxr(v687);
          while (__stxr(v688 + 1, v687));
        }
        v689 = *(std::__shared_weak_count **)(v684 + 32);
        *(_QWORD *)(v684 + 24) = v686;
        *(_QWORD *)(v684 + 32) = v685;
        v331 = v1130;
        if (v689)
        {
          v690 = (unint64_t *)&v689->__shared_owners_;
          do
            v691 = __ldaxr(v690);
          while (__stlxr(v691 - 1, v690));
          if (!v691)
          {
            ((void (*)(std::__shared_weak_count *))v689->__on_zero_shared)(v689);
            std::__shared_weak_count::__release_weak(v689);
          }
        }
        atomic_store(1u, (unsigned __int8 *)(v684 + 105));
        std::mutex::unlock((std::mutex *)(v684 + 40));
        v19 = a1;
      }
      v631 += 248;
    }
    while ((void *)v631 != v1118);
  }
  if ((v331 & 1) == 0)
    goto LABEL_1422;
  v1086 = *(_QWORD *)(a2 + 736);
  v696 = *(_QWORD *)(v19 + 1064);
  *(_QWORD *)(v19 + 1064) = 0;
  if (v696)
    (*(void (**)(uint64_t))(*(_QWORD *)v696 + 8))(v696);
  v697 = *(_QWORD *)(v19 + 1072);
  *(_QWORD *)(v19 + 1072) = 0;
  if (v697)
    (*(void (**)(uint64_t))(*(_QWORD *)v697 + 8))(v697);
  v698 = *(_QWORD *)(v19 + 1112);
  *(_QWORD *)(v19 + 1112) = 0;
  if (v698)
  {
    v699 = *(_QWORD *)(v698 + 40);
    *(_QWORD *)(v698 + 40) = 0;
    if (v699)
      MEMORY[0x1A1AF4E00](v699, 0x1000C40451B5BE8);
    v700 = *(_QWORD *)(v698 + 24);
    *(_QWORD *)(v698 + 24) = 0;
    if (v700)
      (*(void (**)(uint64_t))(*(_QWORD *)v700 + 8))(v700);
    v701 = *(void **)v698;
    if (*(_QWORD *)v698)
    {
      *(_QWORD *)(v698 + 8) = v701;
      operator delete(v701);
    }
    MEMORY[0x1A1AF4E00](v698, 0x1020C4024962473);
  }
  v702 = *(_QWORD *)(v19 + 1120);
  *(_QWORD *)(v19 + 1120) = 0;
  if (v702)
  {
    v703 = *(_QWORD *)(v702 + 40);
    *(_QWORD *)(v702 + 40) = 0;
    if (v703)
      MEMORY[0x1A1AF4E00](v703, 0x1000C40451B5BE8);
    v704 = *(_QWORD *)(v702 + 24);
    *(_QWORD *)(v702 + 24) = 0;
    if (v704)
      (*(void (**)(uint64_t))(*(_QWORD *)v704 + 8))(v704);
    v705 = *(void **)v702;
    if (*(_QWORD *)v702)
    {
      *(_QWORD *)(v702 + 8) = v705;
      operator delete(v705);
    }
    MEMORY[0x1A1AF4E00](v702, 0x1020C4024962473);
  }
  *(_DWORD *)(v19 + 1356) = 0;
  v706 = *(char **)(v19 + 888);
  v707 = *(char **)(v19 + 896);
  if (v706 == v707)
    goto LABEL_1422;
  v708 = v707 - v706 - 248;
  if (v708 > 0xF7)
  {
    v710 = 0;
    v711 = 0;
    v712 = v708 / 0xF8 + 1;
    v713 = v706 + 360;
    v714 = v712 & 0x3FFFFFFFFFFFFFELL;
    do
    {
      v710 += (uint64_t)(*(v713 - 31) - *(v713 - 32)) >> 3;
      v711 += (uint64_t)(*v713 - *(v713 - 1)) >> 3;
      v713 += 62;
      v714 -= 2;
    }
    while (v714);
    v709 = v711 + v710;
    if (v712 == (v712 & 0x3FFFFFFFFFFFFFELL))
      goto LABEL_1078;
    v706 += 248 * (v712 & 0x3FFFFFFFFFFFFFELL);
  }
  else
  {
    v709 = 0;
  }
  do
  {
    v709 += (uint64_t)(*((_QWORD *)v706 + 14) - *((_QWORD *)v706 + 13)) >> 3;
    v706 += 248;
  }
  while (v706 != v707);
LABEL_1078:
  if (!v709)
    goto LABEL_1422;
  __powidf2();
  v716 = v715;
  v717 = *(double *)(v19 + 1328);
  v718 = operator new();
  md::StyleTexture<md::TransitLineSegment::StylePixel>::StyleTexture(v718, v709);
  v719 = *(_QWORD *)(a1 + 1112);
  *(_QWORD *)(a1 + 1112) = v718;
  if (v719)
  {
    v720 = *(_QWORD *)(v719 + 40);
    *(_QWORD *)(v719 + 40) = 0;
    if (v720)
      MEMORY[0x1A1AF4E00](v720, 0x1000C40451B5BE8);
    v721 = *(_QWORD *)(v719 + 24);
    *(_QWORD *)(v719 + 24) = 0;
    if (v721)
      (*(void (**)(uint64_t))(*(_QWORD *)v721 + 8))(v721);
    v722 = *(void **)v719;
    if (*(_QWORD *)v719)
    {
      *(_QWORD *)(v719 + 8) = v722;
      operator delete(v722);
    }
    MEMORY[0x1A1AF4E00](v719, 0x1020C4024962473);
  }
  v723 = operator new();
  md::StyleTexture<md::TransitLineSegment::StylePixel>::StyleTexture(v723, v709);
  v724 = *(_QWORD *)(a1 + 1120);
  *(_QWORD *)(a1 + 1120) = v723;
  v19 = a1;
  if (v724)
  {
    v725 = *(_QWORD *)(v724 + 40);
    *(_QWORD *)(v724 + 40) = 0;
    if (v725)
      MEMORY[0x1A1AF4E00](v725, 0x1000C40451B5BE8);
    v726 = *(_QWORD *)(v724 + 24);
    *(_QWORD *)(v724 + 24) = 0;
    if (v726)
      (*(void (**)(uint64_t))(*(_QWORD *)v726 + 8))(v726);
    v727 = *(void **)v724;
    if (*(_QWORD *)v724)
    {
      *(_QWORD *)(v724 + 8) = v727;
      operator delete(v727);
    }
    MEMORY[0x1A1AF4E00](v724, 0x1020C4024962473);
  }
  *(_QWORD *)&v1156 = (char *)&v1156 + 8;
  *((_QWORD *)&v1156 + 1) = 0;
  v1158 = 0;
  v1159 = 0;
  *(_QWORD *)&v1157 = 0;
  *((_QWORD *)&v1157 + 1) = &v1158;
  v1160 = &v1161;
  v1161 = 0;
  v1164 = 0;
  v1165 = 0;
  v1162 = 0;
  v1163 = &v1164;
  v1114 = *(uint64x2_t **)(a1 + 1112);
  if (!v1114)
    goto LABEL_1406;
  if (!*(_QWORD *)(a1 + 1120))
    goto LABEL_1406;
  v728 = *(_QWORD *)(a1 + 888);
  v1089 = *(_QWORD *)(a1 + 896);
  if (v728 == v1089)
    goto LABEL_1406;
  v1131 = 0;
  __pb = (_DWORD *)(a1 + 1356);
  v1109 = a1 + 1252;
  v729 = v716 * v717 * 25.0;
  while (2)
  {
    v730 = *(float *)(v728 + 236) + v729;
    v731 = *(float *)(v728 + 240) + v729;
    v733 = *(_QWORD *)(v728 + 56);
    v732 = *(_QWORD *)(v728 + 64);
    if (v732 - v733 == 96)
    {
      v734 = *(float *)(v728 + 232);
      v735 = v734 - (float)(v730 + v731);
      if (v735 <= 0.0)
      {
        v737 = fmaxf((float)(v734 - fmaxf(v730, v731)) * 0.5, 0.0);
        v734 = v734 - v737;
        *(float *)(v728 + 216) = v737;
        *(float *)(v728 + 220) = v734;
      }
      else
      {
        v736 = fminf(v735, 0.0);
        *(float *)(v728 + 216) = v736;
        *(float *)(v728 + 220) = v736 + v730;
        v737 = v734 - v731;
      }
    }
    else
    {
      v738 = *(float *)(v733 + 88);
      *(float *)(v728 + 216) = fminf(v738, 0.0);
      *(float *)(v728 + 220) = fminf(v730, v738);
      v739 = *(float *)(v728 + 232);
      v740 = v739 - *(float *)(v732 - 8);
      v737 = fmaxf(v740, v739 - v731);
      v734 = fmaxf(v740, v739);
    }
    *(float *)(v728 + 224) = v737;
    *(float *)(v728 + 228) = v734;
    v741 = *(unsigned __int8 ***)(v728 + 104);
    v742 = *(unsigned __int8 ***)(v728 + 112);
    v1092 = v728;
    v1098 = v742;
    while (v741 != v742)
    {
      v1119 = v741;
      v743 = *v741;
      v744 = *(_QWORD *)v743;
      v745 = *(_QWORD *)(*(_QWORD *)v743 + 64);
      v746 = *(_DWORD *)(v745 + 100);
      v1124 = (unint64_t)v743;
      v747 = v743[52];
      md::TransitLine::updateFeatureQueryForMergeTypeIfNecessary(*(uint64_t **)v743, v747);
      v748 = v745 + 184 * v747;
      v750 = *(unsigned __int8 *)(v748 + 177);
      v749 = (_BYTE *)(v748 + 177);
      if (v750)
      {
        md::TransitLine::_resolveStyle(v744, *(_DWORD *)(v744 + 60), *(_QWORD *)(v745 + 184 * v747), *(std::__shared_weak_count **)(v745 + 184 * v747 + 8), v745 + 184 * v747 + 16);
        *v749 = 0;
      }
      v1102 = *(_BYTE *)(v745 + 184 * v747 + 104) != 0;
      v751 = &v1156 + 3 * (*(_BYTE *)(v745 + 184 * v747 + 104) != 0);
      v753 = (uint64_t **)v751 + 1;
      v752 = (uint64_t *)*((_QWORD *)v751 + 1);
      v754 = (uint64_t **)v751 + 1;
      v755 = (uint64_t **)v751 + 1;
      if (v752)
      {
        while (1)
        {
          while (1)
          {
            v755 = (uint64_t **)v752;
            v756 = *((_DWORD *)v752 + 8);
            if (v746 >= v756)
              break;
            v752 = *v755;
            v754 = v755;
            if (!*v755)
              goto LABEL_1119;
          }
          if (v756 >= v746)
            break;
          v752 = v755[1];
          if (!v752)
          {
            v754 = v755 + 1;
            goto LABEL_1119;
          }
        }
        if (v755[5])
          goto LABEL_1164;
      }
      else
      {
LABEL_1119:
        v757 = operator new(0x30uLL);
        v757[8] = v746;
        *((_QWORD *)v757 + 5) = 0;
        *(_QWORD *)v757 = 0;
        *((_QWORD *)v757 + 1) = 0;
        *((_QWORD *)v757 + 2) = v755;
        *v754 = (uint64_t *)v757;
        v758 = **(_QWORD **)v751;
        v759 = (uint64_t *)v757;
        if (v758)
        {
          *(_QWORD *)v751 = v758;
          v759 = *v754;
        }
        v760 = *v753;
        _ZF = v759 == *v753;
        *((_BYTE *)v759 + 24) = _ZF;
        if (!_ZF)
        {
          do
          {
            v761 = v759[2];
            if (*(_BYTE *)(v761 + 24))
              break;
            v762 = *(uint64_t **)(v761 + 16);
            v763 = *v762;
            if (*v762 == v761)
            {
              v766 = v762[1];
              if (!v766 || (v767 = *(unsigned __int8 *)(v766 + 24), v764 = (_BYTE *)(v766 + 24), v767))
              {
                if (*(uint64_t **)v761 == v759)
                {
                  v768 = (uint64_t *)v759[2];
                }
                else
                {
                  v768 = *(uint64_t **)(v761 + 8);
                  v769 = *v768;
                  *(_QWORD *)(v761 + 8) = *v768;
                  if (v769)
                  {
                    *(_QWORD *)(v769 + 16) = v761;
                    v762 = *(uint64_t **)(v761 + 16);
                  }
                  v768[2] = (uint64_t)v762;
                  *(_QWORD *)(*(_QWORD *)(v761 + 16) + 8 * (**(_QWORD **)(v761 + 16) != v761)) = v768;
                  *v768 = v761;
                  *(_QWORD *)(v761 + 16) = v768;
                  v762 = (uint64_t *)v768[2];
                  v761 = *v762;
                }
                *((_BYTE *)v768 + 24) = 1;
                *((_BYTE *)v762 + 24) = 0;
                v772 = *(_QWORD *)(v761 + 8);
                *v762 = v772;
                if (v772)
                  *(_QWORD *)(v772 + 16) = v762;
                *(_QWORD *)(v761 + 16) = v762[2];
                *(_QWORD *)(v762[2] + 8 * (*(_QWORD *)v762[2] != (_QWORD)v762)) = v761;
                *(_QWORD *)(v761 + 8) = v762;
                goto LABEL_1150;
              }
            }
            else if (!v763 || (v765 = *(unsigned __int8 *)(v763 + 24), v764 = (_BYTE *)(v763 + 24), v765))
            {
              if (*(uint64_t **)v761 == v759)
              {
                v770 = v759[1];
                *(_QWORD *)v761 = v770;
                if (v770)
                {
                  *(_QWORD *)(v770 + 16) = v761;
                  v762 = *(uint64_t **)(v761 + 16);
                }
                v759[2] = (uint64_t)v762;
                *(_QWORD *)(*(_QWORD *)(v761 + 16) + 8 * (**(_QWORD **)(v761 + 16) != v761)) = v759;
                v759[1] = v761;
                *(_QWORD *)(v761 + 16) = v759;
                v762 = (uint64_t *)v759[2];
              }
              else
              {
                v759 = (uint64_t *)v759[2];
              }
              *((_BYTE *)v759 + 24) = 1;
              *((_BYTE *)v762 + 24) = 0;
              v761 = v762[1];
              v771 = *(uint64_t **)v761;
              v762[1] = *(_QWORD *)v761;
              if (v771)
                v771[2] = (uint64_t)v762;
              *(_QWORD *)(v761 + 16) = v762[2];
              *(_QWORD *)(v762[2] + 8 * (*(_QWORD *)v762[2] != (_QWORD)v762)) = v761;
              *(_QWORD *)v761 = v762;
LABEL_1150:
              v762[2] = v761;
              break;
            }
            *(_BYTE *)(v761 + 24) = 1;
            v759 = v762;
            *((_BYTE *)v762 + 24) = v762 == v760;
            *v764 = 1;
          }
          while (v762 != v760);
        }
        ++*((_QWORD *)v751 + 2);
        if (*((_QWORD *)v757 + 5))
          goto LABEL_1164;
      }
      v773 = operator new();
      md::Ribbons::RibbonBatch<md::Ribbons::TransitRibbonDescriptor>::RibbonBatch(v773);
      v774 = *v753;
      v775 = (uint64_t **)v751 + 1;
      v776 = (uint64_t **)v751 + 1;
      if (*v753)
      {
        while (1)
        {
          while (1)
          {
            v776 = (uint64_t **)v774;
            v777 = *((_DWORD *)v774 + 8);
            if (v746 >= v777)
              break;
            v774 = *v776;
            v775 = v776;
            if (!*v776)
              goto LABEL_1159;
          }
          if (v777 >= v746)
            break;
          v774 = v776[1];
          if (!v774)
          {
            v775 = v776 + 1;
            goto LABEL_1159;
          }
        }
        v778 = v776;
      }
      else
      {
LABEL_1159:
        v778 = operator new(0x30uLL);
        v778[8] = v746;
        *((_QWORD *)v778 + 5) = 0;
        *(_QWORD *)v778 = 0;
        *((_QWORD *)v778 + 1) = 0;
        *((_QWORD *)v778 + 2) = v776;
        *v775 = (uint64_t *)v778;
        v779 = **(_QWORD **)v751;
        v780 = (uint64_t *)v778;
        if (v779)
        {
          *(_QWORD *)v751 = v779;
          v780 = *v775;
        }
        std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*((uint64_t **)v751 + 1), v780);
        ++*((_QWORD *)v751 + 2);
      }
      *((_QWORD *)v778 + 5) = v773;
LABEL_1164:
      v781 = *v753;
      v782 = (uint64_t **)v751 + 1;
      v783 = (uint64_t **)v751 + 1;
      if (*v753)
      {
        while (1)
        {
          while (1)
          {
            v783 = (uint64_t **)v781;
            v784 = *((_DWORD *)v781 + 8);
            if (v746 >= v784)
              break;
            v781 = *v783;
            v782 = v783;
            if (!*v783)
              goto LABEL_1171;
          }
          if (v784 >= v746)
            break;
          v781 = v783[1];
          if (!v781)
          {
            v782 = v783 + 1;
            goto LABEL_1171;
          }
        }
        v785 = v783;
      }
      else
      {
LABEL_1171:
        v785 = operator new(0x30uLL);
        v785[8] = v746;
        *((_QWORD *)v785 + 5) = 0;
        *(_QWORD *)v785 = 0;
        *((_QWORD *)v785 + 1) = 0;
        *((_QWORD *)v785 + 2) = v783;
        *v782 = (uint64_t *)v785;
        v786 = **(_QWORD **)v751;
        v787 = (uint64_t *)v785;
        if (v786)
        {
          *(_QWORD *)v751 = v786;
          v787 = *v782;
        }
        v788 = *v753;
        _ZF = v787 == *v753;
        *((_BYTE *)v787 + 24) = _ZF;
        if (!_ZF)
        {
          do
          {
            v789 = v787[2];
            if (*(_BYTE *)(v789 + 24))
              break;
            v790 = *(uint64_t **)(v789 + 16);
            v791 = *v790;
            if (*v790 == v789)
            {
              v794 = v790[1];
              if (!v794 || (v795 = *(unsigned __int8 *)(v794 + 24), v792 = (_BYTE *)(v794 + 24), v795))
              {
                if (*(uint64_t **)v789 == v787)
                {
                  v796 = (uint64_t *)v787[2];
                }
                else
                {
                  v796 = *(uint64_t **)(v789 + 8);
                  v797 = *v796;
                  *(_QWORD *)(v789 + 8) = *v796;
                  if (v797)
                  {
                    *(_QWORD *)(v797 + 16) = v789;
                    v790 = *(uint64_t **)(v789 + 16);
                  }
                  v796[2] = (uint64_t)v790;
                  *(_QWORD *)(*(_QWORD *)(v789 + 16) + 8 * (**(_QWORD **)(v789 + 16) != v789)) = v796;
                  *v796 = v789;
                  *(_QWORD *)(v789 + 16) = v796;
                  v790 = (uint64_t *)v796[2];
                  v789 = *v790;
                }
                *((_BYTE *)v796 + 24) = 1;
                *((_BYTE *)v790 + 24) = 0;
                v800 = *(_QWORD *)(v789 + 8);
                *v790 = v800;
                if (v800)
                  *(_QWORD *)(v800 + 16) = v790;
                *(_QWORD *)(v789 + 16) = v790[2];
                *(_QWORD *)(v790[2] + 8 * (*(_QWORD *)v790[2] != (_QWORD)v790)) = v789;
                *(_QWORD *)(v789 + 8) = v790;
                goto LABEL_1201;
              }
            }
            else if (!v791 || (v793 = *(unsigned __int8 *)(v791 + 24), v792 = (_BYTE *)(v791 + 24), v793))
            {
              if (*(uint64_t **)v789 == v787)
              {
                v798 = v787[1];
                *(_QWORD *)v789 = v798;
                if (v798)
                {
                  *(_QWORD *)(v798 + 16) = v789;
                  v790 = *(uint64_t **)(v789 + 16);
                }
                v787[2] = (uint64_t)v790;
                *(_QWORD *)(*(_QWORD *)(v789 + 16) + 8 * (**(_QWORD **)(v789 + 16) != v789)) = v787;
                v787[1] = v789;
                *(_QWORD *)(v789 + 16) = v787;
                v790 = (uint64_t *)v787[2];
              }
              else
              {
                v787 = (uint64_t *)v787[2];
              }
              *((_BYTE *)v787 + 24) = 1;
              *((_BYTE *)v790 + 24) = 0;
              v789 = v790[1];
              v799 = *(uint64_t **)v789;
              v790[1] = *(_QWORD *)v789;
              if (v799)
                v799[2] = (uint64_t)v790;
              *(_QWORD *)(v789 + 16) = v790[2];
              *(_QWORD *)(v790[2] + 8 * (*(_QWORD *)v790[2] != (_QWORD)v790)) = v789;
              *(_QWORD *)v789 = v790;
LABEL_1201:
              v790[2] = v789;
              break;
            }
            *(_BYTE *)(v789 + 24) = 1;
            v787 = v790;
            *((_BYTE *)v790 + 24) = v790 == v788;
            *v792 = 1;
          }
          while (v790 != v788);
        }
        ++*((_QWORD *)v751 + 2);
      }
      md::TransitLineSegment::addRibbons(v1124, *((_QWORD **)v785 + 5), v1131, v1114, v1109, __pb);
      if (*(_QWORD *)(v745 + 184 * v747 + 112) == *(_QWORD *)(v745 + 184 * v747 + 120))
        goto LABEL_1108;
      v801 = *(unsigned __int8 *)(v1124 + 52);
      v802 = *(_QWORD *)v1124;
      v803 = &v1156 + 3 * v1102;
      v806 = (uint64_t *)*((_QWORD *)v803 + 4);
      v805 = (uint64_t *)(v803 + 2);
      v804 = v806;
      v807 = v805 - 1;
      v808 = (uint64_t **)v805;
      v809 = v805;
      if (!v806)
      {
LABEL_1219:
        v813 = operator new(0x38uLL);
        v813[8] = v746;
        *((_BYTE *)v813 + 36) = v801;
        *((_QWORD *)v813 + 5) = v802;
        *((_QWORD *)v813 + 6) = 0;
        *(_QWORD *)v813 = 0;
        *((_QWORD *)v813 + 1) = 0;
        *((_QWORD *)v813 + 2) = v809;
        *v808 = (uint64_t *)v813;
        v814 = *(_QWORD **)*v807;
        v815 = (uint64_t *)v813;
        if (v814)
        {
          *v807 = (uint64_t)v814;
          v815 = *v808;
        }
        std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>((uint64_t *)*v805, v815);
        ++v805[1];
        if (*((_QWORD *)v813 + 6))
          goto LABEL_1371;
        goto LABEL_1224;
      }
      while (1)
      {
        while (1)
        {
          v809 = v804;
          v810 = *((_DWORD *)v804 + 8);
          if (v746 == v810)
            break;
          if (v746 < v810)
            goto LABEL_1206;
          if (v810 >= v746)
            goto LABEL_1223;
LABEL_1217:
          v804 = (uint64_t *)v809[1];
          if (!v804)
          {
            v808 = (uint64_t **)(v809 + 1);
            goto LABEL_1219;
          }
        }
        v811 = *((unsigned __int8 *)v809 + 36);
        if (v801 != v811)
          break;
        v812 = v809[5];
        if (v802 >= v812)
        {
          if (v812 >= v802)
            goto LABEL_1223;
          goto LABEL_1217;
        }
LABEL_1206:
        v804 = (uint64_t *)*v809;
        v808 = (uint64_t **)v809;
        if (!*v809)
          goto LABEL_1219;
      }
      if (v801 < v811)
        goto LABEL_1206;
      if (v811 < v801)
        goto LABEL_1217;
LABEL_1223:
      if (v809[6])
        goto LABEL_1371;
LABEL_1224:
      v816 = operator new();
      md::Ribbons::RibbonBatch<md::Ribbons::TransitRibbonDescriptor>::RibbonBatch(v816);
      v817 = (uint64_t *)*v805;
      v818 = (uint64_t **)v805;
      v819 = v805;
      if (!*v805)
      {
LABEL_1239:
        v823 = operator new(0x38uLL);
        v823[8] = v746;
        *((_BYTE *)v823 + 36) = v801;
        *((_QWORD *)v823 + 5) = v802;
        *((_QWORD *)v823 + 6) = 0;
        *(_QWORD *)v823 = 0;
        *((_QWORD *)v823 + 1) = 0;
        *((_QWORD *)v823 + 2) = v819;
        *v818 = (uint64_t *)v823;
        v824 = *(_QWORD **)*v807;
        v825 = (uint64_t *)v823;
        if (v824)
        {
          *v807 = (uint64_t)v824;
          v825 = *v818;
        }
        std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>((uint64_t *)*v805, v825);
        ++v805[1];
        goto LABEL_1243;
      }
      while (2)
      {
        while (2)
        {
          v819 = v817;
          v820 = *((_DWORD *)v817 + 8);
          if (v746 != v820)
          {
            if (v746 < v820)
              goto LABEL_1226;
            if (v820 >= v746)
              goto LABEL_1242;
            goto LABEL_1237;
          }
          v821 = *((unsigned __int8 *)v819 + 36);
          if (v801 == v821)
          {
            v822 = v819[5];
            if (v802 < v822)
              goto LABEL_1226;
            if (v822 >= v802)
              goto LABEL_1242;
LABEL_1237:
            v817 = (uint64_t *)v819[1];
            if (!v817)
            {
              v818 = (uint64_t **)(v819 + 1);
              goto LABEL_1239;
            }
            continue;
          }
          break;
        }
        if (v801 < v821)
        {
LABEL_1226:
          v817 = (uint64_t *)*v819;
          v818 = (uint64_t **)v819;
          if (!*v819)
            goto LABEL_1239;
          continue;
        }
        break;
      }
      if (v821 < v801)
        goto LABEL_1237;
LABEL_1242:
      v823 = v819;
LABEL_1243:
      *((_QWORD *)v823 + 6) = v816;
      v826 = (uint64_t *)(a1 + 1200);
LABEL_1244:
      v827 = (uint64_t *)*v826;
      v828 = (uint64_t **)v826;
      if (*v826)
      {
        while (1)
        {
          v826 = v827;
          v829 = *((_DWORD *)v827 + 8);
          if (v746 == v829)
          {
            v830 = *((unsigned __int8 *)v826 + 36);
            if (v801 == v830)
            {
              v831 = v826[5];
              if (v802 < v831)
                goto LABEL_1244;
              if (v831 >= v802)
                goto LABEL_1261;
            }
            else
            {
              if (v801 < v830)
                goto LABEL_1244;
              if (v830 >= v801)
              {
LABEL_1261:
                v832 = v826;
                if (!v826[6])
                  goto LABEL_1262;
                goto LABEL_1371;
              }
            }
          }
          else
          {
            if (v746 < v829)
              goto LABEL_1244;
            if (v829 >= v746)
              goto LABEL_1261;
          }
          v827 = (uint64_t *)v826[1];
          if (!v827)
          {
            v828 = (uint64_t **)(v826 + 1);
            break;
          }
        }
      }
      v832 = operator new(0x60uLL);
      *((_DWORD *)v832 + 8) = v746;
      *((_BYTE *)v832 + 36) = v801;
      *((_QWORD *)v832 + 5) = v802;
      *((_OWORD *)v832 + 3) = 0u;
      *((_OWORD *)v832 + 4) = 0u;
      *((_OWORD *)v832 + 5) = 0u;
      *(_QWORD *)v832 = 0;
      *((_QWORD *)v832 + 1) = 0;
      *((_QWORD *)v832 + 2) = v826;
      *v828 = (uint64_t *)v832;
      v833 = **(_QWORD **)(a1 + 1192);
      v834 = (uint64_t *)v832;
      if (v833)
      {
        *(_QWORD *)(a1 + 1192) = v833;
        v834 = *v828;
      }
      std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 1200), v834);
      ++*(_QWORD *)(a1 + 1208);
      if (!*((_QWORD *)v832 + 6))
      {
LABEL_1262:
        v1103 = objc_msgSend(*(id *)(a1 + 760), "highInflationAlphaAtlas");
        v835 = *(_QWORD *)(a1 + 1160);
        v836 = (_QWORD *)operator new();
        v837 = v836;
        v838 = *(_QWORD *)(a1 + 776);
        v839 = *(_QWORD *)(v838 + 16);
        v840 = *(std::__shared_weak_count **)(v838 + 24);
        if (v840)
        {
          v841 = (unint64_t *)&v840->__shared_owners_;
          do
            v842 = __ldxr(v841);
          while (__stxr(v842 + 1, v841));
          ggl::PipelineSetup::PipelineSetup(v836, v839, (uint64_t)v840);
          v843 = (unint64_t *)&v840->__shared_owners_;
          do
            v844 = __ldaxr(v843);
          while (__stlxr(v844 - 1, v843));
          if (!v844)
          {
            ((void (*)(std::__shared_weak_count *))v840->__on_zero_shared)(v840);
            std::__shared_weak_count::__release_weak(v840);
          }
        }
        else
        {
          ggl::PipelineSetup::PipelineSetup(v836, v839, 0);
        }
        *v837 = &off_1E42BA5A0;
        v845 = v837[8];
        *(_QWORD *)(v845 + 32) = *(_QWORD *)(a1 + 1128);
        *(_QWORD *)(v845 + 40) = 0;
        v846 = v837[20];
        v847 = *(std::__shared_weak_count **)(v846 + 40);
        *(_QWORD *)(v846 + 32) = 0;
        *(_QWORD *)(v846 + 40) = 0;
        if (v847)
        {
          v848 = (unint64_t *)&v847->__shared_owners_;
          do
            v849 = __ldaxr(v848);
          while (__stlxr(v849 - 1, v848));
          if (!v849)
          {
            ((void (*)(std::__shared_weak_count *))v847->__on_zero_shared)(v847);
            std::__shared_weak_count::__release_weak(v847);
          }
        }
        v850 = v837[8];
        *(_QWORD *)(v850 + 48) = v835;
        *(_QWORD *)(v850 + 56) = 0;
        v851 = v837[20];
        v852 = *(std::__shared_weak_count **)(v851 + 56);
        *(_QWORD *)(v851 + 48) = 0;
        *(_QWORD *)(v851 + 56) = 0;
        if (v852)
        {
          v853 = (unint64_t *)&v852->__shared_owners_;
          do
            v854 = __ldaxr(v853);
          while (__stlxr(v854 - 1, v853));
          if (!v854)
          {
            ((void (*)(std::__shared_weak_count *))v852->__on_zero_shared)(v852);
            std::__shared_weak_count::__release_weak(v852);
          }
        }
        *(_QWORD *)v837[12] = *(_QWORD *)(v1103 + 16);
        v855 = (_QWORD *)v837[8];
        v855[1] = 0;
        v856 = *(_QWORD *)(a1 + 816);
        *v855 = v856;
        v857 = (_QWORD *)v837[20];
        v858 = *(_QWORD *)(a1 + 824);
        if (v858)
        {
          v859 = (unint64_t *)(v858 + 8);
          do
            v860 = __ldxr(v859);
          while (__stxr(v860 + 1, v859));
        }
        v861 = (std::__shared_weak_count *)v857[1];
        *v857 = v856;
        v857[1] = v858;
        if (v861)
        {
          v862 = (unint64_t *)&v861->__shared_owners_;
          do
            v863 = __ldaxr(v862);
          while (__stlxr(v863 - 1, v862));
          if (!v863)
          {
            ((void (*)(std::__shared_weak_count *))v861->__on_zero_shared)(v861);
            std::__shared_weak_count::__release_weak(v861);
          }
        }
        v864 = v837[8];
        *(_QWORD *)(v864 + 24) = 0;
        v865 = *(_QWORD *)(a1 + 832);
        *(_QWORD *)(v864 + 16) = v865;
        v866 = v837[20];
        v867 = *(_QWORD *)(a1 + 840);
        if (v867)
        {
          v868 = (unint64_t *)(v867 + 8);
          do
            v869 = __ldxr(v868);
          while (__stxr(v869 + 1, v868));
        }
        v870 = *(std::__shared_weak_count **)(v866 + 24);
        *(_QWORD *)(v866 + 16) = v865;
        *(_QWORD *)(v866 + 24) = v867;
        if (v870)
        {
          v871 = (unint64_t *)&v870->__shared_owners_;
          do
            v872 = __ldaxr(v871);
          while (__stlxr(v872 - 1, v871));
          if (!v872)
          {
            ((void (*)(std::__shared_weak_count *))v870->__on_zero_shared)(v870);
            std::__shared_weak_count::__release_weak(v870);
          }
        }
        v873 = v837[8];
        *(_QWORD *)(v873 + 88) = 0;
        v874 = *(_QWORD *)(a1 + 848);
        *(_QWORD *)(v873 + 80) = v874;
        v875 = v837[20];
        v876 = *(_QWORD *)(a1 + 856);
        if (v876)
        {
          v877 = (unint64_t *)(v876 + 8);
          do
            v878 = __ldxr(v877);
          while (__stxr(v878 + 1, v877));
        }
        v879 = *(std::__shared_weak_count **)(v875 + 88);
        *(_QWORD *)(v875 + 80) = v874;
        *(_QWORD *)(v875 + 88) = v876;
        if (v879)
        {
          v880 = (unint64_t *)&v879->__shared_owners_;
          do
            v881 = __ldaxr(v880);
          while (__stlxr(v881 - 1, v880));
          if (!v881)
          {
            ((void (*)(std::__shared_weak_count *))v879->__on_zero_shared)(v879);
            std::__shared_weak_count::__release_weak(v879);
          }
        }
        v882 = (_QWORD *)operator new();
        *v882 = &off_1E42E7AD8;
        v882[1] = 0;
        v882[2] = 0;
        v882[3] = v837;
        v883 = (std::__shared_weak_count *)*((_QWORD *)v832 + 7);
        *((_QWORD *)v832 + 6) = v837;
        *((_QWORD *)v832 + 7) = v882;
        if (v883)
        {
          v884 = (unint64_t *)&v883->__shared_owners_;
          do
            v885 = __ldaxr(v884);
          while (__stlxr(v885 - 1, v884));
          if (!v885)
          {
            ((void (*)(std::__shared_weak_count *))v883->__on_zero_shared)(v883);
            std::__shared_weak_count::__release_weak(v883);
          }
        }
        v886 = *((_QWORD *)v832 + 6);
        v887 = (std::__shared_weak_count *)operator new(0xE8uLL);
        v887->__shared_owners_ = 0;
        v888 = (unint64_t *)&v887->__shared_owners_;
        v887->__shared_weak_owners_ = 0;
        v887->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E1C58;
        v889 = ggl::BufferData::BufferData((uint64_t)&v887[1], qword_1EE553628, 2, 1, 6, 1);
        v887[9].__shared_owners_ = (uint64_t)ggl::TransitLineRibbon::PatternStyle::reflection(void)::reflection;
        v887[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B9410;
        v890 = *(_QWORD *)(v886 + 64);
        *(_QWORD *)(v890 + 64) = v889;
        *(_QWORD *)(v890 + 72) = 0;
        v891 = *(_QWORD *)(v886 + 160);
        do
          v892 = __ldxr(v888);
        while (__stxr(v892 + 1, v888));
        v893 = *(std::__shared_weak_count **)(v891 + 72);
        *(_QWORD *)(v891 + 64) = v889;
        *(_QWORD *)(v891 + 72) = v887;
        if (v893)
        {
          v894 = (unint64_t *)&v893->__shared_owners_;
          do
            v895 = __ldaxr(v894);
          while (__stlxr(v895 - 1, v894));
          if (!v895)
          {
            ((void (*)(std::__shared_weak_count *))v893->__on_zero_shared)(v893);
            std::__shared_weak_count::__release_weak(v893);
          }
        }
        do
          v896 = __ldaxr(v888);
        while (__stlxr(v896 - 1, v888));
        if (!v896)
        {
          ((void (*)(std::__shared_weak_count *))v887->__on_zero_shared)(v887);
          std::__shared_weak_count::__release_weak(v887);
        }
        v897 = *(_QWORD *)(a1 + 1176);
        v898 = (_QWORD *)operator new();
        v899 = v898;
        v900 = *(_QWORD *)(a1 + 776);
        v901 = *(_QWORD *)(v900 + 16);
        v902 = *(std::__shared_weak_count **)(v900 + 24);
        if (v902)
        {
          v903 = (unint64_t *)&v902->__shared_owners_;
          do
            v904 = __ldxr(v903);
          while (__stxr(v904 + 1, v903));
          ggl::PipelineSetup::PipelineSetup(v898, v901, (uint64_t)v902);
          v905 = (unint64_t *)&v902->__shared_owners_;
          do
            v906 = __ldaxr(v905);
          while (__stlxr(v906 - 1, v905));
          if (!v906)
          {
            ((void (*)(std::__shared_weak_count *))v902->__on_zero_shared)(v902);
            std::__shared_weak_count::__release_weak(v902);
          }
        }
        else
        {
          ggl::PipelineSetup::PipelineSetup(v898, v901, 0);
        }
        *v899 = &off_1E42BA5A0;
        v907 = v899[8];
        *(_QWORD *)(v907 + 32) = *(_QWORD *)(a1 + 1128);
        *(_QWORD *)(v907 + 40) = 0;
        v908 = v899[20];
        v909 = *(std::__shared_weak_count **)(v908 + 40);
        *(_QWORD *)(v908 + 32) = 0;
        *(_QWORD *)(v908 + 40) = 0;
        if (v909)
        {
          v910 = (unint64_t *)&v909->__shared_owners_;
          do
            v911 = __ldaxr(v910);
          while (__stlxr(v911 - 1, v910));
          if (!v911)
          {
            ((void (*)(std::__shared_weak_count *))v909->__on_zero_shared)(v909);
            std::__shared_weak_count::__release_weak(v909);
          }
        }
        v912 = v899[8];
        *(_QWORD *)(v912 + 48) = v897;
        *(_QWORD *)(v912 + 56) = 0;
        v913 = v899[20];
        v914 = *(std::__shared_weak_count **)(v913 + 56);
        *(_QWORD *)(v913 + 48) = 0;
        *(_QWORD *)(v913 + 56) = 0;
        if (v914)
        {
          v915 = (unint64_t *)&v914->__shared_owners_;
          do
            v916 = __ldaxr(v915);
          while (__stlxr(v916 - 1, v915));
          if (!v916)
          {
            ((void (*)(std::__shared_weak_count *))v914->__on_zero_shared)(v914);
            std::__shared_weak_count::__release_weak(v914);
          }
        }
        *(_QWORD *)v899[12] = *(_QWORD *)(v1103 + 16);
        v917 = (_QWORD *)v899[8];
        v917[1] = 0;
        v918 = *(_QWORD *)(a1 + 816);
        *v917 = v918;
        v919 = (_QWORD *)v899[20];
        v920 = *(_QWORD *)(a1 + 824);
        if (v920)
        {
          v921 = (unint64_t *)(v920 + 8);
          do
            v922 = __ldxr(v921);
          while (__stxr(v922 + 1, v921));
        }
        v923 = (std::__shared_weak_count *)v919[1];
        *v919 = v918;
        v919[1] = v920;
        if (v923)
        {
          v924 = (unint64_t *)&v923->__shared_owners_;
          do
            v925 = __ldaxr(v924);
          while (__stlxr(v925 - 1, v924));
          if (!v925)
          {
            ((void (*)(std::__shared_weak_count *))v923->__on_zero_shared)(v923);
            std::__shared_weak_count::__release_weak(v923);
          }
        }
        v926 = v899[8];
        *(_QWORD *)(v926 + 24) = 0;
        v927 = *(_QWORD *)(a1 + 832);
        *(_QWORD *)(v926 + 16) = v927;
        v928 = v899[20];
        v929 = *(_QWORD *)(a1 + 840);
        if (v929)
        {
          v930 = (unint64_t *)(v929 + 8);
          do
            v931 = __ldxr(v930);
          while (__stxr(v931 + 1, v930));
        }
        v932 = *(std::__shared_weak_count **)(v928 + 24);
        *(_QWORD *)(v928 + 16) = v927;
        *(_QWORD *)(v928 + 24) = v929;
        if (v932)
        {
          v933 = (unint64_t *)&v932->__shared_owners_;
          do
            v934 = __ldaxr(v933);
          while (__stlxr(v934 - 1, v933));
          if (!v934)
          {
            ((void (*)(std::__shared_weak_count *))v932->__on_zero_shared)(v932);
            std::__shared_weak_count::__release_weak(v932);
          }
        }
        v935 = v899[8];
        *(_QWORD *)(v935 + 88) = 0;
        v936 = *(_QWORD *)(a1 + 848);
        *(_QWORD *)(v935 + 80) = v936;
        v937 = v899[20];
        v938 = *(_QWORD *)(a1 + 856);
        if (v938)
        {
          v939 = (unint64_t *)(v938 + 8);
          do
            v940 = __ldxr(v939);
          while (__stxr(v940 + 1, v939));
        }
        v941 = *(std::__shared_weak_count **)(v937 + 88);
        *(_QWORD *)(v937 + 80) = v936;
        *(_QWORD *)(v937 + 88) = v938;
        if (v941)
        {
          v942 = (unint64_t *)&v941->__shared_owners_;
          do
            v943 = __ldaxr(v942);
          while (__stlxr(v943 - 1, v942));
          if (!v943)
          {
            ((void (*)(std::__shared_weak_count *))v941->__on_zero_shared)(v941);
            std::__shared_weak_count::__release_weak(v941);
          }
        }
        v944 = (_QWORD *)operator new();
        *v944 = &off_1E42E7AD8;
        v944[1] = 0;
        v944[2] = 0;
        v944[3] = v899;
        v945 = (std::__shared_weak_count *)*((_QWORD *)v832 + 9);
        *((_QWORD *)v832 + 8) = v899;
        *((_QWORD *)v832 + 9) = v944;
        if (v945)
        {
          v946 = (unint64_t *)&v945->__shared_owners_;
          do
            v947 = __ldaxr(v946);
          while (__stlxr(v947 - 1, v946));
          if (!v947)
          {
            ((void (*)(std::__shared_weak_count *))v945->__on_zero_shared)(v945);
            std::__shared_weak_count::__release_weak(v945);
          }
        }
        v948 = *((_QWORD *)v832 + 8);
        v949 = *(_QWORD *)(v948 + 64);
        *(_QWORD *)(v949 + 64) = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)v832 + 6) + 64) + 64);
        *(_QWORD *)(v949 + 72) = 0;
        v950 = *(_QWORD *)(v948 + 160);
        v951 = *(std::__shared_weak_count **)(v950 + 72);
        *(_QWORD *)(v950 + 64) = 0;
        *(_QWORD *)(v950 + 72) = 0;
        if (v951)
        {
          v952 = (unint64_t *)&v951->__shared_owners_;
          do
            v953 = __ldaxr(v952);
          while (__stlxr(v953 - 1, v952));
          if (!v953)
          {
            ((void (*)(std::__shared_weak_count *))v951->__on_zero_shared)(v951);
            std::__shared_weak_count::__release_weak(v951);
          }
        }
      }
LABEL_1371:
      v954 = (uint64_t *)*v805;
      for (j = v805; *j; v805 = j)
      {
        while (1)
        {
          j = v954;
          v956 = *((_DWORD *)v954 + 8);
          if (v746 == v956)
            break;
          if (v746 < v956)
            goto LABEL_1373;
          if (v956 >= v746)
            goto LABEL_1388;
LABEL_1384:
          v954 = (uint64_t *)j[1];
          if (!v954)
          {
            v805 = j + 1;
            goto LABEL_1386;
          }
        }
        v957 = *((unsigned __int8 *)j + 36);
        if (v801 != v957)
        {
          if (v801 < v957)
            goto LABEL_1373;
          if (v957 >= v801)
          {
LABEL_1388:
            v959 = (char *)j;
            goto LABEL_1107;
          }
          goto LABEL_1384;
        }
        v958 = j[5];
        if (v802 >= v958)
        {
          if (v958 >= v802)
            goto LABEL_1388;
          goto LABEL_1384;
        }
LABEL_1373:
        v954 = (uint64_t *)*j;
      }
LABEL_1386:
      v959 = (char *)operator new(0x38uLL);
      *((_DWORD *)v959 + 8) = v746;
      v959[36] = v801;
      *(_WORD *)(v959 + 37) = (_WORD)v1138;
      v959[39] = BYTE2(v1138);
      *((_QWORD *)v959 + 5) = v802;
      *((_QWORD *)v959 + 6) = 0;
      *(_QWORD *)v959 = 0;
      *((_QWORD *)v959 + 1) = 0;
      *((_QWORD *)v959 + 2) = j;
      *v805 = (uint64_t)v959;
      v960 = *(_QWORD **)*v807;
      v961 = (uint64_t *)v959;
      if (v960)
      {
        *v807 = (uint64_t)v960;
        v961 = (uint64_t *)*v805;
      }
      std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>((uint64_t *)v807[1], v961);
      ++v807[2];
LABEL_1107:
      md::TransitLineSegment::addRibbons(v1124, *((_QWORD **)v959 + 6), v1131, v1114, v1109, __pb);
LABEL_1108:
      ++v1131;
      v741 = v1119 + 1;
      v742 = v1098;
    }
    v728 = v1092 + 248;
    v19 = a1;
    if (v1092 + 248 != v1089)
      continue;
    break;
  }
  if (!((unint64_t)v1157 | v1159))
    goto LABEL_1406;
  md::TransitTileData::accumulateLineBatches(&v1148, (_QWORD *)a1, &v1156);
  v962 = (_QWORD *)operator new();
  LOBYTE(v1138) = 0;
  LOBYTE(v1141) = 0;
  md::Ribbons::RibbonLayer<md::Ribbons::TransitRibbonDescriptor>::RibbonLayer(v962, (uint64_t)&v1148, (uint64_t)&v1138);
  v963 = *(_QWORD *)(a1 + 1072);
  *(_QWORD *)(a1 + 1072) = v962;
  if (v963)
    (*(void (**)(uint64_t))(*(_QWORD *)v963 + 8))(v963);
  v1152 = (uint64_t **)&off_1E42CCE30;
  v1153 = (uint64_t *)a1;
  v1155 = &v1152;
  v1145 = 0;
  v1146 = 0;
  (*(void (**)(_QWORD, uint64_t ***, void **))(**(_QWORD **)(v1086 + 32) + 16))(*(_QWORD *)(v1086 + 32), &v1152, &v1145);
  v964 = (std::__shared_weak_count *)v1146;
  if (v1146)
  {
    v965 = (unint64_t *)(v1146 + 1);
    do
      v966 = __ldaxr(v965);
    while (__stlxr(v966 - 1, v965));
    if (!v966)
    {
      ((void (*)(std::__shared_weak_count *))v964->__on_zero_shared)(v964);
      std::__shared_weak_count::__release_weak(v964);
    }
  }
  v967 = v1155;
  if (v1155 == &v1152)
  {
    v968 = 4;
    v967 = &v1152;
LABEL_1403:
    ((void (*)(void))(*v967)[v968])();
  }
  else if (v1155)
  {
    v968 = 5;
    goto LABEL_1403;
  }
  if (v1148)
    operator delete(v1148);
LABEL_1406:
  if (v1162 | v1165)
  {
    md::TransitTileData::accumulateLineBatches(&v1145, (_QWORD *)v19, &v1160);
    v969 = (_QWORD *)operator new();
    LOBYTE(v1152) = 0;
    LOBYTE(v1155) = 0;
    md::Ribbons::RibbonLayer<md::Ribbons::TransitRibbonDescriptor>::RibbonLayer(v969, (uint64_t)&v1145, (uint64_t)&v1152);
    v970 = *(_QWORD *)(v19 + 1064);
    *(_QWORD *)(v19 + 1064) = v969;
    if (v970)
      (*(void (**)(uint64_t))(*(_QWORD *)v970 + 8))(v970);
    v1148 = &off_1E42CCE78;
    v1149 = (uint64_t *)v19;
    v1151 = &v1148;
    v1143 = 0;
    v1144 = 0;
    (*(void (**)(_QWORD, void **, uint64_t *))(**(_QWORD **)(v1086 + 32) + 16))(*(_QWORD *)(v1086 + 32), &v1148, &v1143);
    v971 = v1144;
    if (v1144)
    {
      v972 = (unint64_t *)&v1144->__shared_owners_;
      do
        v973 = __ldaxr(v972);
      while (__stlxr(v973 - 1, v972));
      if (!v973)
      {
        ((void (*)(std::__shared_weak_count *))v971->__on_zero_shared)(v971);
        std::__shared_weak_count::__release_weak(v971);
      }
    }
    v974 = v1151;
    if (v1151 == &v1148)
    {
      v975 = 4;
      v974 = &v1148;
LABEL_1418:
      (*((void (**)(void))*v974 + v975))();
    }
    else if (v1151)
    {
      v975 = 5;
      goto LABEL_1418;
    }
    if (v1145)
      operator delete(v1145);
  }
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(v1164);
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(v1161);
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(v1158);
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((_QWORD **)&v1156 + 1));
LABEL_1422:
  v976 = *(_QWORD *)(v19 + 1112);
  if (v976 && *(_QWORD *)(a1 + 1120))
  {
    v977 = a1;
    v978 = *(char **)(a1 + 888);
    v1125 = *(char **)(a1 + 896);
    if (v978 != v1125)
    {
      do
      {
        v979 = (unsigned __int8 **)*((_QWORD *)v978 + 13);
        v980 = (unsigned __int8 **)*((_QWORD *)v978 + 14);
        v1132 = v978;
        while (v979 != v980)
        {
          v981 = *v979;
          if (*((_DWORD *)*v979 + 8) != -1)
          {
            v982 = *(uint64_t **)(v977 + 1112);
            v983 = *(uint64_t **)(v977 + 1120);
            v984 = *(_QWORD *)v981;
            v985 = v981[52];
            v986 = *(_QWORD *)(*(_QWORD *)v981 + 64);
            md::TransitLine::updateFeatureQueryForMergeTypeIfNecessary(*(uint64_t **)v981, v985);
            v987 = v986 + 184 * v985;
            v989 = *(unsigned __int8 *)(v987 + 177);
            v988 = (_BYTE *)(v987 + 177);
            if (v989)
            {
              md::TransitLine::_resolveStyle(v984, *(_DWORD *)(v984 + 60), *(_QWORD *)(v986 + 184 * v985), *(std::__shared_weak_count **)(v986 + 184 * v985 + 8), v986 + 184 * v985 + 16);
              *v988 = 0;
            }
            v990 = v986 + 184 * v985;
            v991 = *((unsigned int *)v981 + 8);
            v992 = v981[55];
            if (v981[55])
              v993 = 0.0;
            else
              v993 = *(float *)(v990 + 72) * 0.5;
            v995 = *((float *)v981 + 5);
            v994 = *((float *)v981 + 6);
            v996 = *((float *)v981 + 7);
            v1156 = *(_OWORD *)(v990 + 16);
            *(_QWORD *)&v1157 = __PAIR64__(LODWORD(v995), LODWORD(v993));
            *((_QWORD *)&v1157 + 1) = __PAIR64__(LODWORD(v996), LODWORD(v994));
            v997 = *v982;
            v998 = *v982 + 32 * v991;
            v999 = (_QWORD)v1156 == *(_QWORD *)v998 && *((_QWORD *)&v1156 + 1) == *(_QWORD *)(v998 + 8);
            if (!v999
              || v993 != *(float *)(v998 + 16)
              || (v1006 = v997 + 32 * v991, v995 != *(float *)(v1006 + 20))
              || v994 != *(float *)(v1006 + 24)
              || v996 != *(float *)(v997 + 32 * v991 + 28))
            {
              *((_BYTE *)v982 + 32) = 1;
              *(_OWORD *)v998 = v1156;
              *(_OWORD *)(v998 + 16) = v1157;
              v991 = *((unsigned int *)v981 + 8);
              v992 = v981[55];
              v995 = *((float *)v981 + 5);
              v994 = *((float *)v981 + 6);
              v996 = *((float *)v981 + 7);
            }
            v1000 = v986 + 184 * v985;
            v1001 = *(float *)(v1000 + 80) * 0.5;
            if (v992)
              v1001 = 0.0;
            v1156 = *(_OWORD *)(v1000 + 48);
            *(_QWORD *)&v1157 = __PAIR64__(LODWORD(v995), LODWORD(v1001));
            *((_QWORD *)&v1157 + 1) = __PAIR64__(LODWORD(v996), LODWORD(v994));
            v1002 = *v983;
            v1003 = *v983 + 32 * v991;
            v1004 = (_QWORD)v1156 == *(_QWORD *)v1003 && *((_QWORD *)&v1156 + 1) == *(_QWORD *)(v1003 + 8);
            if (!v1004
              || v1001 != *(float *)(v1003 + 16)
              || (v1005 = v1002 + 32 * v991, v995 != *(float *)(v1005 + 20))
              || v994 != *(float *)(v1005 + 24)
              || v996 != *(float *)(v1002 + 32 * v991 + 28))
            {
              *((_BYTE *)v983 + 32) = 1;
              *(_OWORD *)v1003 = v1156;
              *(_OWORD *)(v1003 + 16) = v1157;
            }
            v977 = a1;
          }
          ++v979;
        }
        v978 = v1132 + 248;
      }
      while (v1132 + 248 != v1125);
      v976 = *(_QWORD *)(v977 + 1112);
    }
    md::StyleTexture<md::TransitLineSegment::StylePixel>::_processStylePixelsIfNecessary(v976);
    v1007 = *(float **)(v976 + 40);
    v1008 = *(_QWORD *)(a1 + 1088);
    v1009 = *(_QWORD *)(a1 + 1112);
    md::StyleTexture<md::TransitLineSegment::StylePixel>::_processStylePixelsIfNecessary(v1009);
    *(_QWORD *)(*(_QWORD *)(v1008 + 96) + 8) = *(_QWORD *)(v1009 + 24);
    v1010 = *(_QWORD *)(a1 + 1104);
    v1011 = *(_QWORD *)(a1 + 1112);
    md::StyleTexture<md::TransitLineSegment::StylePixel>::_processStylePixelsIfNecessary(v1011);
    *(_QWORD *)(*(_QWORD *)(v1010 + 96) + 8) = *(_QWORD *)(v1011 + 24);
    v1012 = *(_QWORD **)(a1 + 1128);
    v1013 = v1012[1];
    v1014 = v1012[9];
    v1015 = *(float *)(a1 + 1336);
    v1016 = (float)(v1007[1] + *v1007) * v1015;
    *(float *)v1014 = v1015 * *v1007;
    *(float *)(v1014 + 4) = v1016;
    v1017 = v1007[2];
    v1018 = v1007[3] + v1017;
    *(float *)(v1014 + 8) = v1017;
    *(float *)(v1014 + 12) = v1018;
    *(_DWORD *)(v1014 + 20) = *(_DWORD *)(*(_QWORD *)(a1 + 1112) + 88);
    if (v1012[8] > v1013)
      v1013 = v1012[8];
    v1012[7] = 0;
    v1012[8] = v1013;
    v1019 = *(_QWORD *)(a1 + 1120);
    md::StyleTexture<md::TransitLineSegment::StylePixel>::_processStylePixelsIfNecessary(v1019);
    v1020 = *(float **)(v1019 + 40);
    v1021 = *(_QWORD *)(a1 + 1080);
    v1022 = *(_QWORD *)(a1 + 1120);
    md::StyleTexture<md::TransitLineSegment::StylePixel>::_processStylePixelsIfNecessary(v1022);
    *(_QWORD *)(*(_QWORD *)(v1021 + 96) + 8) = *(_QWORD *)(v1022 + 24);
    v1023 = *(_QWORD *)(a1 + 1096);
    v1024 = *(_QWORD *)(a1 + 1120);
    md::StyleTexture<md::TransitLineSegment::StylePixel>::_processStylePixelsIfNecessary(v1024);
    *(_QWORD *)(*(_QWORD *)(v1023 + 96) + 8) = *(_QWORD *)(v1024 + 24);
    v1025 = *(_QWORD **)(a1 + 1144);
    v1026 = v1025[1];
    v1027 = v1025[9];
    v1028 = (float)(v1020[1] + *v1020) * *(float *)(a1 + 1336);
    *(float *)v1027 = *(float *)(a1 + 1336) * *v1020;
    *(float *)(v1027 + 4) = v1028;
    v1029 = v1020[2];
    v1030 = v1020[3] + v1029;
    *(float *)(v1027 + 8) = v1029;
    *(float *)(v1027 + 12) = v1030;
    *(_DWORD *)(v1027 + 20) = *(_DWORD *)(*(_QWORD *)(a1 + 1120) + 88);
    v1031 = v1025[8];
    if (v1031 <= v1026)
      v1031 = v1026;
    v1025[7] = 0;
    v1025[8] = v1031;
    v1032 = *(_QWORD **)(a1 + 1192);
    if (v1032 != (_QWORD *)(a1 + 1200))
    {
      while (2)
      {
        v1033 = *((unsigned __int8 *)v1032 + 36);
        v1034 = v1032[6];
        v1035 = *(_QWORD *)(v1032[5] + 64);
        v1036 = *(_QWORD *)(a1 + 1112);
        md::StyleTexture<md::TransitLineSegment::StylePixel>::_processStylePixelsIfNecessary(v1036);
        *(_QWORD *)(*(_QWORD *)(v1034 + 96) + 8) = *(_QWORD *)(v1036 + 24);
        v1037 = v1032[8];
        v1038 = *(_QWORD *)(a1 + 1112);
        md::StyleTexture<md::TransitLineSegment::StylePixel>::_processStylePixelsIfNecessary(v1038);
        *(_QWORD *)(*(_QWORD *)(v1037 + 96) + 8) = *(_QWORD *)(v1038 + 24);
        v1039 = fmaxf(*(float *)(v1035 + 184 * v1033 + 72) - *(float *)(v1035 + 184 * v1033 + 168), 0.0);
        v1040 = v1032[10];
        if (!v1040)
          goto LABEL_1490;
        v1041 = *(float *)(a1 + 1348);
        v1042 = (_QWORD *)(v1035 + 184 * v1033);
        v1043 = v1042[17];
        v1044 = v1042[14];
        v1045 = v1042[15];
        v1046 = v1045 - v1044;
        if (v1045 == v1044)
        {
          v1048 = 0;
          v1051 = 0;
          v1050 = 0;
        }
        else
        {
          if (v1046 < 0)
            abort();
          v1047 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v1043 + 16))(v1043, v1045 - v1044, 4);
          v1048 = v1047;
          v1049 = 0;
          do
          {
            if (v1047 + v1049)
              *(_DWORD *)(v1047 + v1049) = *(_DWORD *)(v1044 + v1049);
            v1049 += 4;
          }
          while (v1044 + v1049 != v1045);
          v1050 = v1047 + v1049;
          v1051 = v1047 + 4 * (v1046 >> 2);
        }
        if (*(unsigned __int16 *)(v1040 + 46) != (int)(float)((float)(v1041 * v1039) + 0.5)
          || *(float *)(v1035 + 184 * v1033 + 144) != *(float *)(v1040 + 32)
          || (v1052 = (v1050 - v1048) >> 2, v1052 != (uint64_t)(*(_QWORD *)(v1040 + 8) - *(_QWORD *)v1040) >> 2))
        {
          if (v1048)
            (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v1043 + 40))(v1043, v1048, v1051 - v1048);
          goto LABEL_1490;
        }
        if (v1050 == v1048)
        {
          if (v1048)
            (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v1043 + 40))(v1043, v1048, v1051 - v1048);
        }
        else
        {
          v1053 = 0;
          v1054 = 1;
          do
          {
            v1055 = vabds_f32(*(float *)(v1048 + 4 * v1053), *(float *)(*(_QWORD *)v1040 + 4 * v1053));
            v1053 = v1054++;
          }
          while (v1055 <= 0.00000011921 && v1052 > v1053);
          (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v1043 + 40))(v1043, v1048, v1051 - v1048);
          if (v1055 <= 0.00000011921)
            goto LABEL_1510;
LABEL_1490:
          v1057 = (_QWORD *)(v1035 + 184 * v1033);
          v1133 = 0;
          v1134 = 0;
          v1058 = v1057[17];
          v1135 = 0;
          v1136 = v1058;
          v1059 = (char *)v1057[14];
          v1060 = (char *)v1057[15];
          v1061 = v1060 - v1059;
          if (v1060 != v1059)
          {
            if (v1061 < 0)
              abort();
            v1062 = (_DWORD *)(*(uint64_t (**)(uint64_t, int64_t, uint64_t))(*(_QWORD *)v1058 + 16))(v1058, v1060 - v1059, 4);
            v1133 = v1062;
            v1135 = (char *)&v1062[v1061 >> 2];
            do
            {
              if (v1062)
                *v1062 = *(_DWORD *)v1059;
              v1059 += 4;
              ++v1062;
            }
            while (v1059 != v1060);
            v1134 = v1062;
          }
          v1137 = *(_DWORD *)(v1035 + 184 * v1033 + 144);
          md::DashTextureCache::textureForPattern(&v1156, a5, (float *)&v1133, 1u, 1.0);
          v1063 = v1156;
          v1156 = 0uLL;
          v1064 = (std::__shared_weak_count *)v1032[11];
          *((_OWORD *)v1032 + 5) = v1063;
          if (!v1064)
            goto LABEL_1501;
          v1065 = (unint64_t *)&v1064->__shared_owners_;
          do
            v1066 = __ldaxr(v1065);
          while (__stlxr(v1066 - 1, v1065));
          if (!v1066)
          {
            ((void (*)(std::__shared_weak_count *))v1064->__on_zero_shared)(v1064);
            std::__shared_weak_count::__release_weak(v1064);
            v1067 = (std::__shared_weak_count *)*((_QWORD *)&v1156 + 1);
            if (*((_QWORD *)&v1156 + 1))
            {
LABEL_1502:
              v1068 = (unint64_t *)&v1067->__shared_owners_;
              do
                v1069 = __ldaxr(v1068);
              while (__stlxr(v1069 - 1, v1068));
              if (!v1069)
              {
                ((void (*)(std::__shared_weak_count *))v1067->__on_zero_shared)(v1067);
                std::__shared_weak_count::__release_weak(v1067);
              }
            }
          }
          else
          {
LABEL_1501:
            v1067 = (std::__shared_weak_count *)*((_QWORD *)&v1156 + 1);
            if (*((_QWORD *)&v1156 + 1))
              goto LABEL_1502;
          }
          if (v1133)
          {
            v1134 = v1133;
            (*(void (**)(uint64_t, _DWORD *, int64_t))(*(_QWORD *)v1136 + 40))(v1136, v1133, v1135 - (char *)v1133);
          }
          *(_QWORD *)(*(_QWORD *)(v1032[6] + 96) + 16) = *(_QWORD *)(v1032[10] + 64);
          *(_QWORD *)(*(_QWORD *)(v1032[8] + 96) + 16) = *(_QWORD *)(v1032[10] + 64);
        }
LABEL_1510:
        v1070 = *(_QWORD **)(*(_QWORD *)(v1032[6] + 64) + 64);
        v1071 = v1070[1];
        if (v1071)
          v1072 = v1070[9];
        else
          v1072 = 0;
        v1073 = 0.0;
        v1074 = 0.0;
        if (*(_QWORD *)(v1035 + 184 * v1033 + 112) != *(_QWORD *)(v1035 + 184 * v1033 + 120))
          v1074 = (float)(v1039 * 0.5) * *(float *)(a1 + 1336);
        *(float *)(v1072 + 16) = v1074;
        v1075 = *(float *)(v1032[10] + 48);
        if (v1075 != 0.0)
        {
          v1076 = logf(v1075 * v630);
          v1073 = expf(floorf(v1076 * 4.0) * -0.25);
        }
        *(float *)(v1072 + 20) = v1073;
        v1077 = (_DWORD *)(v1035 + 184 * v1033);
        *(_DWORD *)v1072 = v1077[38];
        *(_DWORD *)(v1072 + 4) = v1077[39];
        *(_DWORD *)(v1072 + 8) = v1077[40];
        *(_DWORD *)(v1072 + 12) = v1077[41];
        if (v1071)
        {
          v1078 = v1070[8];
          if (v1078 <= v1071)
            v1078 = v1071;
          v1070[7] = 0;
          v1070[8] = v1078;
        }
        v1079 = (_QWORD *)v1032[1];
        if (v1079)
        {
          do
          {
            v1080 = v1079;
            v1079 = (_QWORD *)*v1079;
          }
          while (v1079);
        }
        else
        {
          do
          {
            v1080 = (_QWORD *)v1032[2];
            _ZF = *v1080 == (_QWORD)v1032;
            v1032 = v1080;
          }
          while (!_ZF);
        }
        v1032 = v1080;
        if (v1080 == (_QWORD *)(a1 + 1200))
          return;
        continue;
      }
    }
  }
}

void sub_19F931EA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,void *a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,void *__p,uint64_t a55,uint64_t a56,void *a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62)
{
  uint64_t v62;
  uint64_t v63;

  MEMORY[0x1A1AF4E00](v62, 0x10A1C40D1C9D77BLL);
  if (__p)
    operator delete(__p);
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(_QWORD **)(v63 - 176));
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(_QWORD **)(v63 - 200));
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(_QWORD **)(v63 - 224));
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(_QWORD **)(v63 - 248));
  _Unwind_Resume(a1);
}

void sub_19F9320A4()
{
  JUMPOUT(0x19F9320F8);
}

void sub_19F9320B4()
{
  _QWORD *v0;

  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(v0);
  JUMPOUT(0x19F9320C0);
}

void sub_19F9320CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,void *a40,uint64_t a41,void *a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,_QWORD *a55,uint64_t a56,uint64_t a57,_QWORD *a58,uint64_t a59,uint64_t a60,uint64_t a61,_QWORD *a62)
{
  uint64_t v62;
  void *v64;

  v64 = *(void **)(v62 - 256);
  if (v64 != *(void **)(v62 - 240))
    free(v64);
  if (a40 != a42)
    free(a40);
  std::__tree<std::__value_type<unsigned int,MergeGroup>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,MergeGroup>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,MergeGroup>>>::destroy(a55);
  std::__tree<std::__value_type<unsigned int,MergeGroup>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,MergeGroup>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,MergeGroup>>>::destroy(a58);
  std::__tree<std::__value_type<md::TransitSystemAndColor,MergeGroup>,std::__map_value_compare<md::TransitSystemAndColor,std::__value_type<md::TransitSystemAndColor,MergeGroup>,std::less<md::TransitSystemAndColor>,true>,std::allocator<std::__value_type<md::TransitSystemAndColor,MergeGroup>>>::destroy(a62);
  if (a26)
  {
    operator delete(a26);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x19F932178);
}

void sub_19F932124(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

void sub_19F932130()
{
  JUMPOUT(0x19F93213CLL);
}

void md::StyleTexture<md::TransitLineSegment::StylePixel>::_processStylePixelsIfNecessary(uint64_t a1)
{
  char *v2;
  unint64_t *v3;
  char *v4;
  int v5;
  uint64_t v6;
  unsigned __int8 v7;
  uint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  _QWORD *v12;
  uint64_t *v13;
  uint64_t v14;
  int8x16_t v15;
  int32x2_t v16;
  float *v17;
  float *v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float *v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64x2_t v33;
  uint64x2_t v34;
  uint64x2_t v35;
  float32x4_t v36;
  int8x16_t v37;
  uint64_t v38;
  uint64_t v39;
  uint32x4_t v40;
  int8x16_t v41;
  uint64x2_t v42;
  unint64_t v43;
  int8x16_t v44;
  int32x2_t v45;
  int8x16_t v46;
  int64x2_t v47;
  int shared_owners_high;
  unint64_t *p_shared_owners;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  unint64_t *v53;
  unint64_t v54;
  unint64_t *v55;
  unint64_t v56;
  char *v57;
  float32x4_t v58;
  uint64_t v59;
  std::__shared_weak_count *v60;
  std::__shared_weak_count *v61;
  std::__shared_weak_count *v62;

  if (*(_BYTE *)(a1 + 32))
  {
    v2 = (char *)operator new(0x58uLL);
    *((_QWORD *)v2 + 1) = 0;
    v3 = (unint64_t *)(v2 + 8);
    *((_QWORD *)v2 + 2) = 0;
    *(_QWORD *)v2 = &off_1E42DED18;
    *((_QWORD *)v2 + 3) = &off_1E42B63B0;
    v4 = v2 + 24;
    v5 = *(_DWORD *)(a1 + 92);
    *((_QWORD *)v2 + 5) = 0;
    *((_QWORD *)v2 + 6) = 0;
    *((_QWORD *)v2 + 4) = 0;
    *((_DWORD *)v2 + 14) = 0;
    *(_QWORD *)(v2 + 60) = 0x100000001;
    *((_DWORD *)v2 + 17) = 1;
    *((_DWORD *)v2 + 18) = v5;
    *((_QWORD *)v2 + 10) = 0;
    *((_DWORD *)v2 + 19) = v5;
    v62 = (std::__shared_weak_count *)v2;
    v6 = operator new();
    if ((v7 & 1) == 0
    {
      md::StyleTexture<md::TransitLineSegment::StylePixel>::textureData(void)::bytesPerPixel = 4;
    }
    v8 = *(_QWORD *)(a1 + 48);
    v9 = *(_QWORD *)(a1 + 56);
    v10 = (std::__shared_weak_count *)operator new(0x60uLL);
    v10->__shared_owners_ = 0;
    v10->__shared_weak_owners_ = 0;
    v10->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DEFB8;
    v11 = v10 + 1;
    v12 = ggl::TextureData2D::TextureData2D((uint64_t)&v10[1], v8, v9, 1u, 12, 1);
    v60 = v10 + 1;
    v61 = v10;
    v13 = (uint64_t *)((uint64_t (*)(_QWORD *, _QWORD))v10[1].__on_zero_shared)(v12, 0);
    v14 = operator new();
    v16.i32[1] = 0;
    *(_OWORD *)v14 = xmmword_19FFB4D50;
    v17 = *(float **)a1;
    v18 = *(float **)(a1 + 8);
    if (*(float **)a1 == v18)
    {
      v28 = -INFINITY;
      v29 = -INFINITY;
    }
    else
    {
      v19 = -3.4028e38;
      v20 = 3.4028e38;
      v21 = 3.4028e38;
      v22 = -3.4028e38;
      v23 = *(float **)a1;
      do
      {
        v24 = v23[4];
        v21 = fminf(v24, v21);
        *(float *)v14 = v21;
        v25 = v23[5];
        v26 = v23[6];
        v27 = v23[7];
        v20 = fminf(v27, fminf(v26, fminf(v25, v20)));
        *(float *)(v14 + 8) = v20;
        v22 = fmaxf(v22, v24);
        v19 = fmaxf(fmaxf(fmaxf(v19, v25), v26), v27);
        v23 += 8;
      }
      while (v23 != v18);
      v28 = v22 - v21;
      v29 = v19 - v20;
    }
    *(float *)(v14 + 4) = v28;
    *(float *)(v14 + 12) = v29;
    v30 = *(_QWORD *)(a1 + 40);
    *(_QWORD *)(a1 + 40) = v14;
    if (v30)
    {
      MEMORY[0x1A1AF4E00](v30, 0x1000C40451B5BE8);
      v17 = *(float **)a1;
      v18 = *(float **)(a1 + 8);
    }
    if (v17 != v18)
    {
      v57 = v2;
      LODWORD(v31) = 0;
      v59 = md::StyleTexture<md::TransitLineSegment::StylePixel>::textureData(void)::bytesPerPixel
          * *(_QWORD *)(a1 + 48);
      v32 = 1;
      v33 = (uint64x2_t)xmmword_19FFB4D60;
      v34 = (uint64x2_t)xmmword_19FFB4D70;
      v35 = (uint64x2_t)xmmword_19FFB4D80;
      v36 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v37.i64[0] = 255;
      v37.i64[1] = 255;
      v58 = v36;
      do
      {
        v38 = *(_QWORD *)(a1 + 40);
        v39 = (int)(float)((float)((float)(v17[4] - *(float *)v38) * 255.0) / *(float *)(v38 + 4));
        v16.i32[0] = *(_DWORD *)(v38 + 8);
        v15.i32[0] = *(_DWORD *)(v38 + 12);
        v40 = vmovl_u16((uint16x4_t)vmovn_s32(vcvtq_s32_f32(vmulq_f32(*(float32x4_t *)v17, v36))));
        v41.i64[0] = v40.u32[0];
        v41.i64[1] = v40.u32[1];
        v42 = (uint64x2_t)vandq_s8(v41, v37);
        v41.i64[0] = v40.u32[2];
        v41.i64[1] = v40.u32[3];
        v43 = (unint64_t)(int)(float)((float)((float)(v17[5] - *(float *)v16.i32) * 255.0)
                                                         / *(float *)v15.i32) << 8;
        v44 = vorrq_s8((int8x16_t)vshlq_u64(v42, v34), (int8x16_t)vshlq_u64((uint64x2_t)vandq_s8(v41, v37), v33));
        v45 = vcvt_s32_f32(vdiv_f32(vmul_f32(vsub_f32(*(float32x2_t *)(v17 + 6), (float32x2_t)vdup_lane_s32(v16, 0)), *(float32x2_t *)v36.f32), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v15.i8, 0)));
        v41.i64[0] = v45.u32[0];
        v41.i64[1] = v45.u32[1];
        v46.i64[0] = v43;
        v46.u64[1] = (unint64_t)vorr_s8(*(int8x8_t *)v44.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v44, v44, 8uLL));
        v47 = (int64x2_t)vorrq_s8(v46, (int8x16_t)vshlq_u64((uint64x2_t)v41, v35));
        v15 = (int8x16_t)vdupq_laneq_s64(v47, 1);
        v16 = (int32x2_t)vorrq_s8(v15, (int8x16_t)v47).u64[0];
        *v13 = *(_QWORD *)&v16 | v39;
        if (v32 % *(_QWORD *)(a1 + 72))
        {
          v13 = (uint64_t *)((char *)v13 + *(_QWORD *)(a1 + 64));
        }
        else
        {
          v31 = (v31 + 1);
          v13 = (uint64_t *)(((uint64_t (*)(std::__shared_weak_count *, _QWORD))v11->__on_zero_shared)(v11, 0)+ v59 * v31);
          v34 = (uint64x2_t)xmmword_19FFB4D70;
          v33 = (uint64x2_t)xmmword_19FFB4D60;
          v36 = v58;
          v35 = (uint64x2_t)xmmword_19FFB4D80;
          v37.i64[0] = 255;
          v37.i64[1] = 255;
        }
        v17 += 8;
        ++v32;
      }
      while (v17 != v18);
      v11 = v60;
      v10 = v61;
      v2 = v57;
    }
    shared_owners_high = HIDWORD(v11->__shared_owners_);
    *(_DWORD *)(v6 + 32) = 0;
    *(_QWORD *)(v6 + 16) = 0;
    *(_QWORD *)(v6 + 24) = 0;
    *(_QWORD *)(v6 + 56) = 0x100000001;
    *(_DWORD *)(v6 + 64) = 0;
    *(_DWORD *)(v6 + 68) = shared_owners_high;
    *(_QWORD *)(v6 + 72) = 0x100000001;
    *(_QWORD *)(v6 + 88) = 0;
    *(_QWORD *)(v6 + 96) = 0;
    *(_QWORD *)(v6 + 80) = 0;
    *(_QWORD *)v6 = &off_1E42BE438;
    *(_QWORD *)(v6 + 8) = 0;
    *(_QWORD *)(v6 + 40) = &unk_1E42BE458;
    *(_QWORD *)(v6 + 48) = "";
    *(_DWORD *)(v6 + 104) = v11->__shared_owners_;
    *(_QWORD *)(v6 + 112) = v11;
    *(_QWORD *)(v6 + 120) = v10;
    if (v10)
    {
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v50 = __ldxr(p_shared_owners);
      while (__stxr(v50 + 1, p_shared_owners));
    }
    *(_WORD *)(v6 + 128) = 0;
    *(_BYTE *)(v6 + 130) = 1;
    *(_QWORD *)(v6 + 136) = v4;
    *(_QWORD *)(v6 + 144) = v2;
    do
      v51 = __ldxr(v3);
    while (__stxr(v51 + 1, v3));
    *(_QWORD *)(v6 + 80) = v11->__shared_weak_owners_;
    v52 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 24) = v6;
    if (v52)
      (*(void (**)(uint64_t))(*(_QWORD *)v52 + 8))(v52);
    if (v10)
    {
      v53 = (unint64_t *)&v10->__shared_owners_;
      do
        v54 = __ldaxr(v53);
      while (__stlxr(v54 - 1, v53));
      if (!v54)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
    *(_BYTE *)(a1 + 32) = 0;
    if (v62)
    {
      v55 = (unint64_t *)&v62->__shared_owners_;
      do
        v56 = __ldaxr(v55);
      while (__stlxr(v56 - 1, v55));
      if (!v56)
      {
        ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
        std::__shared_weak_count::__release_weak(v62);
      }
    }
  }
}

void sub_19F932670(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v13;
  uint64_t v14;
  va_list va;

  va_start(va, a13);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)va);
  MEMORY[0x1A1AF4E00](v13, 0x10F1C40BE47B5E1);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](v14 - 96);
  _Unwind_Resume(a1);
}

unint64_t md::TransitTileData::appendNodesAttachedToLines(unint64_t result, _QWORD *a2, unint64_t a3)
{
  _QWORD *v3;
  int8x8_t *v4;
  int8x8_t v5;
  unint64_t v7;
  uint8x8_t v8;
  unint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  _QWORD *i;
  unint64_t v16;

  if (a2)
  {
    v3 = a2;
    v4 = (int8x8_t *)result;
    v5 = *(int8x8_t *)(result + 1264);
    if (v5)
    {
LABEL_3:
      v7 = v3[2];
      v8 = (uint8x8_t)vcnt_s8(v5);
      v8.i16[0] = vaddlv_u8(v8);
      if (v8.u32[0] > 1uLL)
      {
        v9 = v3[2];
        if (v7 >= *(_QWORD *)&v5)
          v9 = v7 % *(_QWORD *)&v5;
      }
      else
      {
        v9 = (*(_QWORD *)&v5 - 1) & v7;
      }
      v10 = *(_QWORD **)(*(_QWORD *)&v4[157] + 8 * v9);
      if (v10)
      {
        v11 = (_QWORD *)*v10;
        if (v11)
        {
          if (v8.u32[0] < 2uLL)
          {
            v12 = *(_QWORD *)&v5 - 1;
            while (1)
            {
              v14 = v11[1];
              if (v7 == v14)
              {
                if (v11[2] == v7)
                  goto LABEL_23;
              }
              else if ((v14 & v12) != v9)
              {
                goto LABEL_25;
              }
              v11 = (_QWORD *)*v11;
              if (!v11)
                goto LABEL_25;
            }
          }
          do
          {
            v13 = v11[1];
            if (v7 == v13)
            {
              if (v11[2] == v7)
              {
LABEL_23:
                for (i = (_QWORD *)v11[5]; i; i = (_QWORD *)*i)
                {
                  v16 = *(_QWORD *)(*(_QWORD *)(i[2] + 8) + 40);
                  result = std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,geo::StdAllocator<unsigned long long,mdm::Allocator>>::__emplace_unique_key_args<unsigned long long,unsigned long long>(a3, v16, &v16);
                }
                break;
              }
            }
            else
            {
              if (v13 >= *(_QWORD *)&v5)
                v13 %= *(_QWORD *)&v5;
              if (v13 != v9)
                break;
            }
            v11 = (_QWORD *)*v11;
          }
          while (v11);
        }
      }
LABEL_25:
      while (1)
      {
        v3 = (_QWORD *)*v3;
        if (!v3)
          break;
        v5 = v4[158];
        if (v5)
          goto LABEL_3;
      }
    }
    else
    {
      do
        v3 = (_QWORD *)*v3;
      while (v3);
    }
  }
  return result;
}

void md::TransitTileData::setSelectedLines(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  int8x8_t v10;
  unint64_t v11;
  uint8x8_t v12;
  unint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  _BYTE *v24;
  uint64_t v25;
  uint64_t v26;

  v2 = *(_QWORD *)(a1 + 888);
  v3 = *(_QWORD *)(a1 + 896);
  if (v2 == v3)
    return;
  while (2)
  {
    v6 = *(_QWORD *)(v2 + 80);
    v7 = *(_QWORD *)(v2 + 88);
LABEL_7:
    if (v6 != v7)
    {
      v9 = *(_QWORD *)(*(_QWORD *)v6 + 8);
      v10 = (int8x8_t)a2[1];
      if (!*(_QWORD *)&v10)
        goto LABEL_28;
      v11 = *(_QWORD *)(*(_QWORD *)(v9 + 16) + 40);
      v12 = (uint8x8_t)vcnt_s8(v10);
      v12.i16[0] = vaddlv_u8(v12);
      if (v12.u32[0] > 1uLL)
      {
        v13 = *(_QWORD *)(*(_QWORD *)(v9 + 16) + 40);
        if (v11 >= *(_QWORD *)&v10)
          v13 = v11 % *(_QWORD *)&v10;
      }
      else
      {
        v13 = (*(_QWORD *)&v10 - 1) & v11;
      }
      v14 = *(_QWORD **)(*a2 + 8 * v13);
      if (!v14 || (v15 = (_QWORD *)*v14) == 0)
      {
LABEL_28:
        v8 = *(unsigned __int8 *)(v9 + 88);
        if (*(_BYTE *)(v9 + 88))
        {
          v19 = 0;
          goto LABEL_30;
        }
        goto LABEL_6;
      }
      if (v12.u32[0] < 2uLL)
      {
        v16 = *(_QWORD *)&v10 - 1;
        while (1)
        {
          v18 = v15[1];
          if (v11 == v18)
          {
            if (v15[2] == v11)
              goto LABEL_5;
          }
          else if ((v18 & v16) != v13)
          {
            goto LABEL_28;
          }
          v15 = (_QWORD *)*v15;
          if (!v15)
            goto LABEL_28;
        }
      }
      while (1)
      {
        v17 = v15[1];
        if (v11 == v17)
        {
          if (v15[2] == v11)
          {
LABEL_5:
            v8 = *(unsigned __int8 *)(v9 + 88);
            if (*(_BYTE *)(v9 + 88))
              goto LABEL_6;
            v19 = 1;
LABEL_30:
            *(_BYTE *)(a1 + 1368) = 1;
            if (v8 != v19)
            {
              *(_BYTE *)(v9 + 88) = v19;
              v20 = *(_QWORD *)(v9 + 64);
              v21 = *(_QWORD *)(v9 + 72);
              if (v20 != v21)
              {
                v22 = v21 - v20 - 184;
                if (v22 <= 0xB7)
                {
                  do
                  {
LABEL_37:
                    *(_BYTE *)(v20 + 176) = 1;
                    v20 += 184;
                  }
                  while (v20 != v21);
                }
                else
                {
                  v23 = v22 / 0xB8 + 1;
                  v24 = (_BYTE *)(v20 + 360);
                  v25 = v23 & 0x3FFFFFFFFFFFFFELL;
                  do
                  {
                    *(v24 - 184) = 1;
                    *v24 = 1;
                    v24 += 368;
                    v25 -= 2;
                  }
                  while (v25);
                  if (v23 != (v23 & 0x3FFFFFFFFFFFFFELL))
                  {
                    v20 += 184 * (v23 & 0x3FFFFFFFFFFFFFELL);
                    goto LABEL_37;
                  }
                }
              }
              md::TransitLine::updateFeatureQueryForMergeTypeIfNecessary((uint64_t *)v9, 0);
              md::TransitLine::updateFeatureQueryForMergeTypeIfNecessary((uint64_t *)v9, 1u);
              md::TransitLine::updateFeatureQueryForMergeTypeIfNecessary((uint64_t *)v9, 2u);
              md::TransitLine::updateFeatureQueryForMergeTypeIfNecessary((uint64_t *)v9, 3u);
              v26 = *(_QWORD *)(v9 + 64);
              md::TransitLine::updateFeatureQueryForMergeTypeIfNecessary((uint64_t *)v9, 0);
              if (*(_BYTE *)(v26 + 177))
              {
                md::TransitLine::_resolveStyle(v9, *(_DWORD *)(v9 + 60), *(_QWORD *)v26, *(std::__shared_weak_count **)(v26 + 8), v26 + 16);
                *(_BYTE *)(v26 + 177) = 0;
              }
            }
LABEL_6:
            v6 += 8;
            goto LABEL_7;
          }
        }
        else
        {
          if (v17 >= *(_QWORD *)&v10)
            v17 %= *(_QWORD *)&v10;
          if (v17 != v13)
            goto LABEL_28;
        }
        v15 = (_QWORD *)*v15;
        if (!v15)
          goto LABEL_28;
      }
    }
    v2 += 248;
    if (v2 != v3)
      continue;
    break;
  }
}

uint64_t *md::TransitTileData::setSelectedNodes(uint64_t *result, uint64_t *a2, uint64_t a3, unint64_t a4)
{
  uint8x8_t v4;
  unint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;

  if (result != a2)
  {
    v4 = (uint8x8_t)vcnt_s8((int8x8_t)a4);
    v4.i16[0] = vaddlv_u8(v4);
    v5 = a4 - 1;
    do
    {
      v7 = *result;
      if (a4)
      {
        v8 = *(_QWORD *)(*(_QWORD *)(v7 + 8) + 40);
        if (v4.u32[0] > 1uLL)
        {
          v9 = *(_QWORD *)(*(_QWORD *)(v7 + 8) + 40);
          if (v8 >= a4)
            v9 = v8 % a4;
        }
        else
        {
          v9 = v5 & v8;
        }
        v6 = *(_QWORD **)(a3 + 8 * v9);
        if (v6)
        {
          v6 = (_QWORD *)*v6;
          if (v6)
          {
            if (v4.u32[0] < 2uLL)
            {
              while (1)
              {
                v10 = v6[1];
                if (v8 == v10)
                {
                  if (v6[2] == v8)
                    goto LABEL_4;
                }
                else if ((v10 & v5) != v9)
                {
                  goto LABEL_3;
                }
                v6 = (_QWORD *)*v6;
                if (!v6)
                  goto LABEL_4;
              }
            }
            do
            {
              v11 = v6[1];
              if (v8 == v11)
              {
                if (v6[2] == v8)
                  break;
              }
              else
              {
                if (v11 >= a4)
                  v11 %= a4;
                if (v11 != v9)
                  goto LABEL_3;
              }
              v6 = (_QWORD *)*v6;
            }
            while (v6);
          }
        }
      }
      else
      {
LABEL_3:
        v6 = 0;
      }
LABEL_4:
      *(_BYTE *)(v7 + 63) = v6 != 0;
      result += 2;
    }
    while (result != a2);
  }
  return result;
}

void md::TransitItemMarkerImpl<md::TransitDisplayConnection>::~TransitItemMarkerImpl()
{
  JUMPOUT(0x1A1AF4E00);
}

uint64_t md::TransitItemMarkerImpl<md::TransitDisplayConnection>::setHighlighted(uint64_t result, char a2)
{
  *(_BYTE *)(*(_QWORD *)(result + 16) + 33) = a2;
  return result;
}

uint64_t md::TransitItemMarkerImpl<md::TransitDisplayConnection>::isHighlighted(uint64_t a1)
{
  return *(unsigned __int8 *)(*(_QWORD *)(a1 + 16) + 33);
}

id md::TransitItemMarkerImpl<md::TransitDisplayConnection>::debugString(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t v7;
  int v8;
  const gss::FeatureAttributeSet *v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  const char *v17;
  const char *v18;
  unint64_t *v19;
  unint64_t v20;
  void *v21;
  uint64_t v23;
  std::__shared_weak_count *v24;
  _QWORD v25[2];
  unsigned __int8 v26;

  v1 = *(_QWORD *)(a1 + 16);
  objc_msgSend(MEMORY[0x1E0CB37A0], "stringWithFormat:", CFSTR("<Display connection>\n"));
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = *(_QWORD *)(v1 + 8);
  if (v3)
  {
    v4 = *(std::__shared_weak_count **)(v1 + 16);
    if (v4)
    {
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v6 = __ldxr(p_shared_owners);
      while (__stxr(v6 + 1, p_shared_owners));
      v24 = v4;
      do
        v7 = __ldxr(p_shared_owners);
      while (__stxr(v7 + 1, p_shared_owners));
    }
    else
    {
      v24 = 0;
    }
    v25[0] = 0;
    v25[1] = 0;
    v23 = v3;
    v26 = 0;
    v8 = (*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)v3 + 48))(v3, v25);
    v26 = v8;
    if (v4)
    {
      v10 = (unint64_t *)&v4->__shared_owners_;
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 - 1, v10));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
      v8 = v26;
    }
    if (v8)
    {
      v12 = *(_QWORD *)(v23 + 24);
      v13 = *(_QWORD *)(v12 + 16);
      v14 = *(std::__shared_weak_count **)(v12 + 24);
      if (v14)
      {
        v15 = (unint64_t *)&v14->__shared_owners_;
        do
          v16 = __ldxr(v15);
        while (__stxr(v16 + 1, v15));
      }
      v17 = "";
      if (v13)
      {
        v18 = *(const char **)(v13 + 104);
        if (v18)
          v17 = v18;
      }
      objc_msgSend(v2, "appendFormat:", CFSTR("  Style:%s\n"), v17);
      if (v14)
      {
        v19 = (unint64_t *)&v14->__shared_owners_;
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v20 - 1, v19));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
          std::__shared_weak_count::__release_weak(v14);
        }
      }
    }
    md::HighlightHelper::debugAttributesToString((md::HighlightHelper *)(*(_QWORD *)(v1 + 8) + 240), v9);
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "appendFormat:", CFSTR("  Attrs:{%@}\n"), v21);

    gss::QueryableLocker<gss::PropertyID>::~QueryableLocker((uint64_t)&v23);
  }
  objc_msgSend(v2, "appendFormat:", CFSTR("  FeatureZoom: Min=%.2f Max=%.2f\n"), *(float *)(v1 + 24), *(float *)(v1 + 28));
  return v2;
}

void sub_19F932D68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v8;
  va_list va;

  va_start(va, a4);
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  gss::QueryableLocker<gss::PropertyID>::~QueryableLocker((uint64_t)va);

  _Unwind_Resume(a1);
}

_QWORD *md::TransitItemMarkerImpl<md::TransitDisplayConnection>::debugDraw(uint64_t a1, float32x2_t *a2, uint64_t a3, char a4)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *result;
  unint64_t v8;
  uint64_t Points;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  float *v14;
  _QWORD v15[2];
  char v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  void *__p[3];

  v4 = *(_QWORD *)(a1 + 16);
  v5 = **(_QWORD **)(a1 + 8);
  v15[0] = v5;
  v15[1] = a3;
  v16 = a4;
  result = *(_QWORD **)v4;
  if (*(_QWORD *)(*(_QWORD *)v4 + 88))
  {
    v8 = 0;
    do
    {
      v20 = 0;
      Points = geo::codec::pBTransitStationTransferGetPoints(result, v8, &v20);
      if (Points && v20)
      {
        v17 = 0;
        v18 = 0;
        v19 = 0;
        memset(__p, 0, sizeof(__p));
        md::HighlightHelper::tileToMercatorPoints(v5, Points, v20, (uint64_t)__p);
        md::HighlightHelper::mercatorToScreenPoints((uint64_t)v15, (double **)__p, (uint64_t)&v17);
        if (__p[0])
          operator delete(__p[0]);
        v10 = v17;
        v11 = v18;
        if (v17)
        {
          if (v18 != v17)
          {
            v12 = v18 - v17;
            a2[1].i32[0] = *(_DWORD *)v17;
            a2[1].i32[1] = *((_DWORD *)v10 + 1);
            if ((unint64_t)(v11 - v10) >= 9)
            {
              v13 = (v12 >> 3) - 1;
              v14 = (float *)(v10 + 8);
              do
              {
                ggl::DebugConsole::drawLine((uint64_t)a2, v14);
                v14 += 2;
                --v13;
              }
              while (v13);
            }
          }
        }
        a2[1].i32[0] = *(_DWORD *)v10;
        a2[1].i32[1] = *((_DWORD *)v10 + 1);
        ggl::DebugConsole::drawSymbol(a2, 4);
        a2[1].i32[0] = *((_DWORD *)v11 - 2);
        a2[1].i32[1] = *((_DWORD *)v11 - 1);
        ggl::DebugConsole::drawSymbol(a2, 2);
        operator delete(v10);
      }
      ++v8;
      result = *(_QWORD **)v4;
    }
    while (v8 < *(_QWORD *)(*(_QWORD *)v4 + 88));
  }
  return result;
}

void sub_19F932FDC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p)
{
  void *v17;

  if (__p)
  {
    operator delete(__p);
    v17 = a12;
    if (!a12)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else
  {
    v17 = a12;
    if (!a12)
      goto LABEL_3;
  }
  operator delete(v17);
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_emplace<md::TransitItemMarkerImpl<md::TransitDisplayConnection>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DC8C8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<md::TransitItemMarkerImpl<md::TransitDisplayConnection>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DC8C8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<md::TransitItemMarkerImpl<md::TransitDisplayConnection>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void md::TransitItemMarkerImpl<md::TransitLink>::~TransitItemMarkerImpl()
{
  JUMPOUT(0x1A1AF4E00);
}

uint64_t md::TransitItemMarkerImpl<md::TransitLink>::setHighlighted(uint64_t result, char a2)
{
  *(_BYTE *)(*(_QWORD *)(result + 16) + 244) = a2;
  return result;
}

uint64_t md::TransitItemMarkerImpl<md::TransitLink>::isHighlighted(uint64_t a1)
{
  return *(unsigned __int8 *)(*(_QWORD *)(a1 + 16) + 244);
}

NSString *md::TransitItemMarkerImpl<md::TransitLink>::debugString(uint64_t a1, int a2)
{
  float *v3;
  NSString *v4;
  NSString *v5;
  unsigned int v6;
  float v7;
  float v8;
  float v9;
  float v10;
  uint64_t v11;
  md::TransitLink::Section *v12;
  md::TransitLink::Section *v13;
  uint64_t v14;
  void *v15;
  float *v16;
  float v17;
  float v18;
  double v19;
  uint64_t v20;
  void *v21;
  md::TransitLine ***v22;
  md::TransitLine ***v23;
  uint64_t v24;
  md::TransitLine **v25;
  void *v26;
  NSString *v27;
  NSMutableString *v28;
  NSString *v29;
  NSMutableString *v30;
  _QWORD *v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  uint64_t v37;
  NSString *v38;
  NSMutableString *v39;
  md::TransitLineSegment *v40;
  NSString *v41;
  NSMutableString *v42;

  v3 = *(float **)(a1 + 16);
  objc_msgSend(MEMORY[0x1E0CB37A0], "stringWithFormat:", CFSTR("<Link:%p>\n"), v3);
  v4 = (NSString *)objc_claimAutoreleasedReturnValue();
  v5 = v4;
  if (a2)
    v6 = 200;
  else
    v6 = 5;
  -[NSString appendString:](v4, "appendString:", CFSTR("EaseRegions: "));
  v7 = v3[54];
  v8 = v3[55];
  if (v7 == v8)
    -[NSString appendString:](v5, "appendString:", CFSTR("start=(none)"));
  else
    -[NSString appendFormat:](v5, "appendFormat:", CFSTR("start=(%.2f:%.2f)[cl:%.2f]"), v7, v8, v3[59]);
  v9 = v3[56];
  v10 = v3[57];
  if (v9 == v10)
    -[NSString appendString:](v5, "appendString:", CFSTR(" end=(none)\n"));
  else
    -[NSString appendFormat:](v5, "appendFormat:", CFSTR(" end=(%.2f:%.2f)[cl:%.2f]\n"), v9, v10, v3[60]);
  -[NSString appendFormat:](v5, "appendFormat:", CFSTR("NodeID From=%llu To=%llu\n"), *(_QWORD *)(*(_QWORD *)v3 + 56), *(_QWORD *)(*(_QWORD *)v3 + 64));
  v11 = geo::codec::VectorTile::transitLinkSections(*((geo::codec::VectorTile **)v3 + 1));
  -[NSString appendFormat:](v5, "appendFormat:", CFSTR("Sections:\n"));
  v12 = (md::TransitLink::Section *)*((_QWORD *)v3 + 7);
  v13 = (md::TransitLink::Section *)*((_QWORD *)v3 + 8);
  if (v12 != v13)
  {
    if (v11)
    {
      v14 = 0;
      do
      {
        md::TransitLink::Section::debugString(v12);
        v15 = (void *)objc_claimAutoreleasedReturnValue();
        -[NSString appendFormat:](v5, "appendFormat:", CFSTR("  %i:%@"), v14, v15);

        v16 = (float *)(v11 + 8 * *(unsigned int *)(*(_QWORD *)v3 + 16));
        v17 = *v16;
        v18 = v16[1];
        if (*v16 == 0.0)
          v17 = -1.0;
        v19 = v17;
        if (v18 == 1.0)
          v18 = -1.0;
        -[NSString appendFormat:](v5, "appendFormat:", CFSTR("    geoSection: start=%.2f end=%.2f\n"), *(_QWORD *)&v19, v18);
        v12 = (md::TransitLink::Section *)((char *)v12 + 96);
        v11 += 8;
        v14 = (v14 + 1);
      }
      while (v12 != v13);
    }
    else
    {
      v20 = 0;
      do
      {
        md::TransitLink::Section::debugString(v12);
        v21 = (void *)objc_claimAutoreleasedReturnValue();
        -[NSString appendFormat:](v5, "appendFormat:", CFSTR("  %i:%@"), v20, v21);

        v20 = (v20 + 1);
        v12 = (md::TransitLink::Section *)((char *)v12 + 96);
      }
      while (v12 != v13);
    }
  }
  -[NSString appendFormat:](v5, "appendFormat:", CFSTR("MergedLines:\n"));
  v22 = (md::TransitLine ***)*((_QWORD *)v3 + 13);
  v23 = (md::TransitLine ***)*((_QWORD *)v3 + 14);
  if (v22 == v23)
  {
    LODWORD(v24) = 0;
  }
  else
  {
    v24 = 0;
    while (v6 != (_DWORD)v24)
    {
      v25 = *v22;
      md::TransitLine::debugLineIDString(**v22);
      v26 = (void *)objc_claimAutoreleasedReturnValue();
      -[NSString appendFormat:](v5, "appendFormat:", CFSTR("  %i:%@\n"), v24, v26);

      md::TransitLine::debugString((uint64_t)*v25, *((unsigned __int8 *)v25 + 52));
      v27 = (NSString *)objc_claimAutoreleasedReturnValue();
      md::HighlightHelper::appendLinesUsingPrefix((md::HighlightHelper *)CFSTR("    "), v27, v5, v28);

      md::TransitLineSegment::debugString((md::TransitLineSegment *)v25);
      v29 = (NSString *)objc_claimAutoreleasedReturnValue();
      md::HighlightHelper::appendLinesUsingPrefix((md::HighlightHelper *)CFSTR("    "), v29, v5, v30);

      v24 = (v24 + 1);
      if (++v22 == v23)
        goto LABEL_28;
    }
    -[NSString appendString:](v5, "appendString:", CFSTR("  Lines Truncated...\n"));
    LODWORD(v24) = v6;
  }
LABEL_28:
  if (*((_QWORD *)v3 + 11) - *((_QWORD *)v3 + 10) > *((_QWORD *)v3 + 14) - *((_QWORD *)v3 + 13))
  {
    -[NSString appendFormat:](v5, "appendFormat:", CFSTR("CollapsedLines:\n"));
    v31 = (_QWORD *)*((_QWORD *)v3 + 10);
    v32 = (_QWORD *)*((_QWORD *)v3 + 11);
    if (v31 != v32)
    {
      v33 = 0;
      do
      {
        if (*v31)
          v34 = *v31 + 8;
        else
          v34 = 0;
        if (*(_BYTE *)(v34 + 55))
        {
          if (v24 >= v6)
          {
            -[NSString appendString:](v5, "appendString:", CFSTR("  Lines Truncated...\n"));
            return v5;
          }
          v35 = *(unsigned int *)(v34 + 40);
          md::TransitLine::debugLineIDString(*(md::TransitLine **)v34);
          v36 = (void *)objc_claimAutoreleasedReturnValue();
          -[NSString appendFormat:](v5, "appendFormat:", CFSTR("  %i:MergedLine:%i %@\n"), v33, v35, v36);

          if (*v31)
            v37 = *v31 + 8;
          else
            v37 = 0;
          md::TransitLine::debugString(*(_QWORD *)v37, *(unsigned __int8 *)(v37 + 52));
          v38 = (NSString *)objc_claimAutoreleasedReturnValue();
          md::HighlightHelper::appendLinesUsingPrefix((md::HighlightHelper *)CFSTR("    "), v38, v5, v39);

          if (*v31)
            v40 = (md::TransitLineSegment *)(*v31 + 8);
          else
            v40 = 0;
          md::TransitLineSegment::debugString(v40);
          v41 = (NSString *)objc_claimAutoreleasedReturnValue();
          md::HighlightHelper::appendLinesUsingPrefix((md::HighlightHelper *)CFSTR("    "), v41, v5, v42);

          v33 = (v33 + 1);
          LODWORD(v24) = v24 + 1;
        }
        ++v31;
      }
      while (v31 != v32);
    }
  }
  return v5;
}

void sub_19F9334CC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void md::TransitItemMarkerImpl<md::TransitLink>::debugDraw(uint64_t a1, float32x2_t *a2, uint64_t a3, char a4)
{
  float *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  float32x2_t v9;
  unint64_t v10;
  uint64_t v11;
  char *v12;
  __int32 *v13;
  uint64_t v14;
  float *v15;
  unint64_t v16;
  size_t v17;
  void *v18;
  float v19;
  float v20;
  unint64_t v21;
  float32x2_t v22;
  float v23;
  uint64_t v24;
  float32x2_t v25;
  float32x2_t v26;
  float v27;
  char *v28;
  char *v29;
  float v30;
  char *v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  size_t v35;
  float32x2_t *v36;
  float32x2_t *v37;
  float32x2_t *v38;
  float32x2_t *v39;
  int v40;
  int v41;
  float v42;
  float v43;
  unint64_t v44;
  float32x2_t v45;
  float v46;
  uint64_t v47;
  float32x2_t v48;
  float32x2_t v49;
  float v50;
  float32x2_t *v51;
  float32x2_t v52;
  float v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  _BYTE *v57;
  float32x2_t *v58;
  unint64_t v59;
  char *v60;
  float32x2_t v61;
  void *v62;
  __int32 *v63;
  __int32 *v64;
  uint64_t v65;
  _OWORD *v66;
  char *v67;
  uint64_t v68;
  __int128 v69;
  float32x2_t v70;
  float32x2_t v71;
  uint64_t v72[2];
  char v73;
  unint64_t v74;
  __int32 *v75;
  uint64_t v76;
  unint64_t v77;
  void *__p;
  float32x2_t *v79;
  uint64_t v80;

  v5 = *(float **)(a1 + 16);
  v6 = **(_QWORD **)(a1 + 8);
  v72[0] = v6;
  v72[1] = a3;
  v73 = a4;
  v7 = *(_QWORD *)v5;
  if (!*(_DWORD *)(*(_QWORD *)v5 + 20))
  {
    if (v5[59] != 0.0)
    {
      v29 = 0;
      v28 = 0;
      __p = 0;
      v79 = 0;
      v80 = 0;
      goto LABEL_39;
    }
    goto LABEL_31;
  }
  v8 = 0;
  do
  {
    v77 = 0;
    v11 = geo::codec::transitLinkPoints(v7, v8, &v77);
    if (v77 >= 2)
    {
      v74 = 0;
      v75 = 0;
      v76 = 0;
      __p = 0;
      v79 = 0;
      v80 = 0;
      md::HighlightHelper::tileToMercatorPoints(v6, v11, v77, (uint64_t)&__p);
      md::HighlightHelper::mercatorToScreenPoints((uint64_t)v72, (double **)&__p, (uint64_t)&v74);
      if (__p)
        operator delete(__p);
      v12 = (char *)v74;
      v13 = v75;
      if (v74)
      {
        if (v75 != (__int32 *)v74)
        {
          a2[1].i32[0] = *(_DWORD *)v74;
          a2[1].i32[1] = *((_DWORD *)v12 + 1);
          if ((unint64_t)((char *)v13 - v12) >= 9)
          {
            v14 = (((char *)v13 - v12) >> 3) - 1;
            v15 = (float *)(v12 + 8);
            do
            {
              ggl::DebugConsole::drawLine((uint64_t)a2, v15);
              v15 += 2;
              --v14;
            }
            while (v14);
          }
        }
      }
      v9 = *(float32x2_t *)v12;
      __p = (void *)*((_QWORD *)v13 - 1);
      a2[1] = v9;
      ggl::DebugConsole::drawLine((uint64_t)a2, (float *)&__p);
      a2[1].i32[0] = *(_DWORD *)v12;
      a2[1].i32[1] = *((_DWORD *)v12 + 1);
      ggl::DebugConsole::drawSymbol(a2, 3);
      a2[1].i32[0] = *(v13 - 2);
      a2[1].i32[1] = *(v13 - 1);
      ggl::DebugConsole::drawSymbol(a2, 4);
      operator delete(v12);
    }
    ++v8;
    v7 = *(_QWORD *)v5;
    v10 = *(unsigned int *)(*(_QWORD *)v5 + 20);
  }
  while (v8 < v10);
  if (v5[59] == 0.0 || (__p = 0, v79 = 0, v80 = 0, !(_DWORD)v10))
  {
LABEL_31:
    v29 = 0;
    v28 = 0;
    goto LABEL_39;
  }
  v74 = 0;
  v16 = geo::codec::transitLinkPoints(v7, 0, &v74);
  if (v74 >= 5)
    v17 = 5;
  else
    v17 = v74;
  std::vector<gm::Matrix<float,2,1>>::__assign_with_size[abi:nn180100]<gm::Matrix<float,2,1> const*,gm::Matrix<float,2,1> const*>((uint64_t)&__p, v16, (char *)(v16 + 8 * v17), v17);
  v18 = __p;
  if (__p != v79)
  {
    v19 = v5[59];
    v20 = 0.0;
    if ((unint64_t)((char *)v79 - (_BYTE *)__p) >= 9)
    {
      v21 = ((char *)v79 - (_BYTE *)__p) >> 3;
      if (v21 <= 2)
        v21 = 2;
      v22 = *(float32x2_t *)__p;
      v23 = 0.0;
      v24 = 1;
      while (1)
      {
        v25 = *(float32x2_t *)((char *)__p + 8 * v24);
        v26 = vsub_f32(v22, v25);
        v27 = sqrtf(vaddv_f32(vmul_f32(v26, v26)));
        v20 = v27 + v23;
        if ((float)(v27 + v23) >= v19)
          break;
        ++v24;
        v23 = v27 + v23;
        v22 = v25;
        if (v21 == v24)
          goto LABEL_26;
      }
      if (v27 == 0.0)
        v30 = 0.0;
      else
        v30 = (float)(v19 - v23) / v27;
      v22.i32[1] = *((_DWORD *)__p + 2 * v24 - 1);
      v70 = vmla_n_f32(v22, vsub_f32(v25, v22), v30);
LABEL_37:
      v31 = (char *)operator new(8uLL);
      *(float32x2_t *)v31 = v70;
      v28 = v31 + 8;
      v29 = v31;
      if (!v18)
        goto LABEL_39;
      goto LABEL_38;
    }
LABEL_26:
    if (vabds_f32(v19, v20) <= 0.00000011921)
    {
      v70 = v79[-1];
      goto LABEL_37;
    }
  }
  v28 = 0;
  v29 = 0;
  if (__p)
LABEL_38:
    operator delete(v18);
LABEL_39:
  if (v5[60] == 0.0)
    goto LABEL_82;
  __p = 0;
  v79 = 0;
  v80 = 0;
  v32 = *(_QWORD *)v5;
  v33 = *(_DWORD *)(*(_QWORD *)v5 + 20);
  if (!v33)
  {
    v51 = (float32x2_t *)v29;
    goto LABEL_81;
  }
  v74 = 0;
  v34 = geo::codec::transitLinkPoints(v32, v33 - 1, &v74);
  if (v74 >= 5)
    v35 = 5;
  else
    v35 = v74;
  std::vector<gm::Matrix<float,2,1>>::__assign_with_size[abi:nn180100]<gm::Matrix<float,2,1> const*,gm::Matrix<float,2,1> const*>((uint64_t)&__p, v34 + 8 * v74 - 8 * v35, (char *)(v34 + 8 * v74), v35);
  v37 = (float32x2_t *)__p;
  v36 = v79;
  if (__p != v79)
  {
    v38 = v79 - 1;
    if (&v79[-1] > __p)
    {
      v39 = (float32x2_t *)__p;
      do
      {
        v40 = v39->i32[0];
        v41 = v39->i32[1];
        v39->i32[0] = v38->i32[0];
        v39->i32[1] = v38->i32[1];
        v38->i32[0] = v40;
        v38->i32[1] = v41;
        --v38;
        ++v39;
      }
      while (v39 < v38);
    }
  }
  if (v37 == v36)
  {
    v51 = (float32x2_t *)v29;
    if (!v36)
      goto LABEL_81;
    goto LABEL_80;
  }
  v42 = v5[60];
  v43 = 0.0;
  if ((unint64_t)((char *)v36 - (char *)v37) < 9)
  {
LABEL_55:
    if (vabds_f32(v42, v43) > 0.00000011921)
    {
      v36 = v37;
      v51 = (float32x2_t *)v29;
      if (!v37)
        goto LABEL_81;
      goto LABEL_80;
    }
    v52 = v36[-1];
  }
  else
  {
    v44 = v36 - v37;
    if (v44 <= 2)
      v44 = 2;
    v45 = *v37;
    v46 = 0.0;
    v47 = 1;
    while (1)
    {
      v48 = v37[v47];
      v49 = vsub_f32(v45, v48);
      v50 = sqrtf(vaddv_f32(vmul_f32(v49, v49)));
      v43 = v50 + v46;
      if ((float)(v50 + v46) >= v42)
        break;
      ++v47;
      v46 = v50 + v46;
      v45 = v48;
      if (v44 == v47)
        goto LABEL_55;
    }
    if (v50 == 0.0)
      v53 = 0.0;
    else
      v53 = (float)(v42 - v46) / v50;
    v45.i32[1] = v37[v47 - 1].i32[1];
    v52 = vmla_n_f32(v45, vsub_f32(v48, v45), v53);
  }
  v54 = v28 - v29;
  v55 = (v28 - v29) >> 3;
  v56 = v55 + 1;
  if ((unint64_t)(v55 + 1) >> 61)
    abort();
  v71 = v52;
  if (v54 >> 2 > v56)
    v56 = v54 >> 2;
  if ((unint64_t)v54 >= 0x7FFFFFFFFFFFFFF8)
    v56 = 0x1FFFFFFFFFFFFFFFLL;
  if (v56 >> 61)
    std::__throw_bad_array_new_length[abi:nn180100]();
  v57 = operator new(8 * v56);
  v58 = (float32x2_t *)&v57[8 * v55];
  *v58 = v71;
  if (v28 != v29)
  {
    v59 = v28 - v29 - 8;
    if (v59 >= 0x58 && (unint64_t)(v29 - v57) >= 0x20)
    {
      v65 = (v59 >> 3) + 1;
      v60 = &v28[-8 * (v65 & 0x3FFFFFFFFFFFFFFCLL)];
      v66 = &v57[8 * v55 - 16];
      v67 = v28 - 16;
      v68 = v65 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v69 = *(_OWORD *)v67;
        *(v66 - 1) = *((_OWORD *)v67 - 1);
        *v66 = v69;
        v66 -= 2;
        v67 -= 32;
        v68 -= 4;
      }
      while (v68);
      v51 = &v58[-(v65 & 0x3FFFFFFFFFFFFFFCLL)];
      if (v65 == (v65 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_77:
        if (!v29)
          goto LABEL_79;
        goto LABEL_78;
      }
    }
    else
    {
      v60 = v28;
      v51 = (float32x2_t *)&v57[8 * v55];
    }
    do
    {
      v61 = *(float32x2_t *)(v60 - 8);
      v60 -= 8;
      v51[-1] = v61;
      --v51;
    }
    while (v60 != v29);
    goto LABEL_77;
  }
  v51 = (float32x2_t *)&v57[8 * v55];
  if (v29)
LABEL_78:
    operator delete(v29);
LABEL_79:
  v28 = (char *)&v58[1];
  v36 = (float32x2_t *)__p;
  if (__p)
  {
LABEL_80:
    v79 = v36;
    operator delete(v36);
  }
LABEL_81:
  v29 = (char *)v51;
LABEL_82:
  if (v29 != v28)
  {
    v74 = 0;
    v75 = 0;
    v76 = 0;
    __p = 0;
    v79 = 0;
    v80 = 0;
    md::HighlightHelper::tileToMercatorPoints(v72[0], (uint64_t)v29, (v28 - v29) >> 3, (uint64_t)&__p);
    md::HighlightHelper::mercatorToScreenPoints((uint64_t)v72, (double **)&__p, (uint64_t)&v74);
    if (__p)
      operator delete(__p);
    v62 = (void *)v74;
    v63 = v75;
    if ((__int32 *)v74 != v75)
    {
      v64 = (__int32 *)v74;
      do
      {
        a2[1].i32[0] = *v64;
        a2[1].i32[1] = v64[1];
        ggl::DebugConsole::drawSymbol(a2, 1);
        v64 += 2;
      }
      while (v64 != v63);
    }
    if (v62)
      operator delete(v62);
  }
  if (v29)
    operator delete(v29);
}

void sub_19F933B44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19)
{
  void *v19;
  void *v20;

  if (v20)
    operator delete(v20);
  if (v19)
    operator delete(v19);
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_emplace<md::TransitItemMarkerImpl<md::TransitLink>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DC858;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<md::TransitItemMarkerImpl<md::TransitLink>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DC858;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<md::TransitItemMarkerImpl<md::TransitLink>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void md::TransitItemMarkerImpl<md::TransitJunction>::~TransitItemMarkerImpl()
{
  JUMPOUT(0x1A1AF4E00);
}

uint64_t md::TransitItemMarkerImpl<md::TransitJunction>::setHighlighted(uint64_t result, char a2)
{
  *(_BYTE *)(*(_QWORD *)(result + 16) + 208) = a2;
  return result;
}

uint64_t md::TransitItemMarkerImpl<md::TransitJunction>::isHighlighted(uint64_t a1)
{
  return *(unsigned __int8 *)(*(_QWORD *)(a1 + 16) + 208);
}

NSString *md::TransitItemMarkerImpl<md::TransitJunction>::debugString(uint64_t a1, int a2)
{
  uint64_t v3;
  NSString *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v8;
  _QWORD *v9;
  float v16;
  float v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25;
  md::TransitLink *v26;
  uint64_t v27;
  float v28;
  float v29;
  float *v30;
  float v31;
  float v32;
  NSString *v33;
  NSMutableString *v34;
  _QWORD *v35;
  _QWORD *v36;
  _QWORD *v37;
  md::TransitLink *v38;
  uint64_t v39;
  float v40;
  float v41;
  float *v42;
  float v43;
  float v44;
  NSString *v45;
  NSMutableString *v46;
  _QWORD *v47;
  _QWORD *v48;

  v3 = *(_QWORD *)(a1 + 16);
  objc_msgSend(MEMORY[0x1E0CB37A0], "stringWithFormat:", CFSTR("<Junction:%p>\n"), v3);
  v4 = (NSString *)objc_claimAutoreleasedReturnValue();
  -[NSString appendFormat:](v4, "appendFormat:", CFSTR("point=(%f,%f)\n"), *(float *)(v3 + 16), *(float *)(v3 + 20));
  v5 = *(_QWORD **)(v3 + 24);
  v6 = (_QWORD *)(v3 + 32);
  _D0 = 0;
  if (v5 != (_QWORD *)(v3 + 32))
  {
    do
    {
      v20 = (_QWORD *)v5[1];
      v21 = v5;
      if (v20)
      {
        do
        {
          v22 = v20;
          v20 = (_QWORD *)*v20;
        }
        while (v20);
      }
      else
      {
        do
        {
          v22 = (_QWORD *)v21[2];
          _ZF = *v22 == (_QWORD)v21;
          v21 = v22;
        }
        while (!_ZF);
      }
      _D0 = vsub_f32(_D0, *(float32x2_t *)(*(_QWORD *)(v5[4] + 64) - 56));
      v5 = v22;
    }
    while (v22 != v6);
  }
  v8 = *(_QWORD **)(v3 + 48);
  v9 = (_QWORD *)(v3 + 56);
  if (v8 != (_QWORD *)(v3 + 56))
  {
    do
    {
      v23 = (_QWORD *)v8[1];
      v24 = v8;
      if (v23)
      {
        do
        {
          v25 = v23;
          v23 = (_QWORD *)*v23;
        }
        while (v23);
      }
      else
      {
        do
        {
          v25 = (_QWORD *)v24[2];
          _ZF = *v25 == (_QWORD)v24;
          v24 = v25;
        }
        while (!_ZF);
      }
      _D0 = vadd_f32(**(float32x2_t **)(v8[4] + 56), _D0);
      v8 = v25;
    }
    while (v25 != v9);
  }
  _S2 = _D0.i32[1];
  __asm { FMLA            S1, S2, V0.S[1] }
  v16 = 1.0 / sqrtf(_S1);
  v17 = atan2f(vmuls_lane_f32(v16, _D0, 1), v16 * _D0.f32[0]) * 57.2957795;
  -[NSString appendFormat:](v4, "appendFormat:", CFSTR("RefLink:%p, isSuperSet:%i, domDir:%.1f\n"), *(_QWORD *)(v3 + 72), *(unsigned __int8 *)(v3 + 81), v17);
  -[NSString appendFormat:](v4, "appendFormat:", CFSTR("Links:\n"));
  v18 = *(_QWORD **)(v3 + 24);
  if (v18 == v6)
  {
    v19 = 0;
  }
  else
  {
    v19 = 0;
    do
    {
      v26 = (md::TransitLink *)v18[4];
      if (*(_QWORD *)(*(_QWORD *)v26 + 40) == *(_QWORD *)(v3 + 8))
      {
        v30 = (float *)*((_QWORD *)v26 + 7);
        v28 = *v30;
        v29 = v30[1];
      }
      else
      {
        v27 = *((_QWORD *)v26 + 8);
        v28 = -*(float *)(v27 - 56);
        v29 = -*(float *)(v27 - 52);
      }
      v31 = atan2f(v29, v28) * 57.2957795;
      v32 = vabds_f32(v31, v17);
      -[NSString appendFormat:](v4, "appendFormat:", CFSTR("  %i:%p, dir:%.02f, domDelta:%.1f\n"), v19, v26, v31, fminf(360.0 - v32, v32));
      md::TransitLink::debugStringForJunction(v26, (int8x8_t *)v3, 1, a2);
      v33 = (NSString *)objc_claimAutoreleasedReturnValue();
      md::HighlightHelper::appendLinesUsingPrefix((md::HighlightHelper *)CFSTR("   "), v33, v4, v34);

      v35 = (_QWORD *)v18[1];
      if (v35)
      {
        do
        {
          v36 = v35;
          v35 = (_QWORD *)*v35;
        }
        while (v35);
      }
      else
      {
        do
        {
          v36 = (_QWORD *)v18[2];
          _ZF = *v36 == (_QWORD)v18;
          v18 = v36;
        }
        while (!_ZF);
      }
      v19 = (v19 + 1);
      v18 = v36;
    }
    while (v36 != v6);
  }
  v37 = *(_QWORD **)(v3 + 48);
  if (v37 != v9)
  {
    do
    {
      v38 = (md::TransitLink *)v37[4];
      if (*(_QWORD *)(*(_QWORD *)v38 + 40) == *(_QWORD *)(v3 + 8))
      {
        v42 = (float *)*((_QWORD *)v38 + 7);
        v40 = *v42;
        v41 = v42[1];
      }
      else
      {
        v39 = *((_QWORD *)v38 + 8);
        v40 = -*(float *)(v39 - 56);
        v41 = -*(float *)(v39 - 52);
      }
      v43 = atan2f(v41, v40) * 57.2957795;
      v44 = vabds_f32(v43, v17);
      -[NSString appendFormat:](v4, "appendFormat:", CFSTR("  %i:%p, dir:%.02f, domDelta:%.1f\n"), v19, v38, v43, fminf(360.0 - v44, v44));
      md::TransitLink::debugStringForJunction(v38, (int8x8_t *)v3, 0, a2);
      v45 = (NSString *)objc_claimAutoreleasedReturnValue();
      md::HighlightHelper::appendLinesUsingPrefix((md::HighlightHelper *)CFSTR("   "), v45, v4, v46);

      v47 = (_QWORD *)v37[1];
      if (v47)
      {
        do
        {
          v48 = v47;
          v47 = (_QWORD *)*v47;
        }
        while (v47);
      }
      else
      {
        do
        {
          v48 = (_QWORD *)v37[2];
          _ZF = *v48 == (_QWORD)v37;
          v37 = v48;
        }
        while (!_ZF);
      }
      v19 = (v19 + 1);
      v37 = v48;
    }
    while (v48 != v9);
  }
  return v4;
}

void sub_19F934008(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void md::TransitItemMarkerImpl<md::TransitJunction>::debugDraw(uint64_t a1, float32x2_t *a2, uint64_t a3, char a4)
{
  uint64_t v5;
  uint64_t v6;
  _DWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  BOOL v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD v15[2];
  char v16;
  _QWORD v17[3];
  void *__p[3];

  v5 = *(_QWORD *)(a1 + 16);
  v6 = **(_QWORD **)(a1 + 8);
  v15[0] = v6;
  v15[1] = a3;
  v16 = a4;
  if (*(_BYTE *)(v5 + 82))
  {
    memset(v17, 0, sizeof(v17));
    memset(__p, 0, sizeof(__p));
    md::HighlightHelper::tileToMercatorPoints(v6, v5 + 16, 1, (uint64_t)__p);
    md::HighlightHelper::mercatorToScreenPoints((uint64_t)v15, (double **)__p, (uint64_t)v17);
    if (__p[0])
      operator delete(__p[0]);
    v7 = (_DWORD *)v17[0];
    a2[1].i32[0] = *(_DWORD *)v17[0];
    a2[1].i32[1] = v7[1];
    ggl::DebugConsole::drawSymbol(a2, 1);
    operator delete(v7);
  }
  v8 = *(_QWORD **)(v5 + 24);
  if (v8 != (_QWORD *)(v5 + 32))
  {
    do
    {
      md::TransitLink::debugDrawWithSelectedJunction((md::TransitLink *)v8[4], (const md::TransitJunction *)v5, v8[4] == *(_QWORD *)(v5 + 72), a2, (const md::HighlightHelper *)v15);
      v10 = (_QWORD *)v8[1];
      if (v10)
      {
        do
        {
          v11 = v10;
          v10 = (_QWORD *)*v10;
        }
        while (v10);
      }
      else
      {
        do
        {
          v11 = (_QWORD *)v8[2];
          v12 = *v11 == (_QWORD)v8;
          v8 = v11;
        }
        while (!v12);
      }
      v8 = v11;
    }
    while (v11 != (_QWORD *)(v5 + 32));
  }
  v9 = *(_QWORD **)(v5 + 48);
  if (v9 != (_QWORD *)(v5 + 56))
  {
    do
    {
      md::TransitLink::debugDrawWithSelectedJunction((md::TransitLink *)v9[4], (const md::TransitJunction *)v5, v9[4] == *(_QWORD *)(v5 + 72), a2, (const md::HighlightHelper *)v15);
      v13 = (_QWORD *)v9[1];
      if (v13)
      {
        do
        {
          v14 = v13;
          v13 = (_QWORD *)*v13;
        }
        while (v13);
      }
      else
      {
        do
        {
          v14 = (_QWORD *)v9[2];
          v12 = *v14 == (_QWORD)v9;
          v9 = v14;
        }
        while (!v12);
      }
      v9 = v14;
    }
    while (v14 != (_QWORD *)(v5 + 56));
  }
}

void sub_19F9341B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, void *__p)
{
  void *v17;

  if (__p)
  {
    operator delete(__p);
    v17 = a13;
    if (!a13)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else
  {
    v17 = a13;
    if (!a13)
      goto LABEL_3;
  }
  operator delete(v17);
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_emplace<md::TransitItemMarkerImpl<md::TransitJunction>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DC890;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<md::TransitItemMarkerImpl<md::TransitJunction>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DC890;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<md::TransitItemMarkerImpl<md::TransitJunction>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

id md::TransitTileData::debugString(md::TransitTileData *this)
{
  void *v2;

  objc_msgSend(MEMORY[0x1E0CB37A0], "string");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "appendString:", CFSTR("Tile\n"));
  objc_msgSend(v2, "appendFormat:", CFSTR(" Counts: links=%i easingPoints=%i \n"), 0xEF7BDEF7BDEF7BDFLL * ((uint64_t)(*((_QWORD *)this + 112) - *((_QWORD *)this + 111)) >> 3), *((unsigned int *)this + 339));
  objc_msgSend(v2, "appendFormat:", CFSTR(" Edges Synched:T=%i L=%i,"), *((unsigned __int8 *)this + 1248), *((unsigned __int8 *)this + 1251));
  objc_msgSend(v2, "appendFormat:", CFSTR(" Neighbors:T=%i B=%i L=%i R=%i \n"), *((unsigned __int8 *)this + 1252), *((unsigned __int8 *)this + 1254), *((unsigned __int8 *)this + 1255), *((unsigned __int8 *)this + 1253));
  return v2;
}

void sub_19F9342FC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19F9345D0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19F934964(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19F934B04(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19F934B7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_19F934FA8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_19F935414(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_19F9355CC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19F935608(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19F935778(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19F9357B4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void ggl::FlyoverNightPolarShader::typedReflection(ggl::FlyoverNightPolarShader *this)
{
  unsigned __int8 v1;
  ggl *v2;
  ggl *v3;

  if ((v1 & 1) == 0)
  {
    if ((_DWORD)v2)
    {
      ggl::FlyoverNightPolarShader::typedReflection(void)::ref = (uint64_t)"FlyoverNightPolarShader";
      ggl::flyoverNightPolarShaderVertexFunctionDescriptor(v2);
      qword_1EE577EA0 = (uint64_t)&ggl::flyoverNightPolarShaderVertexFunctionDescriptor(void)::ref;
      v3 = (ggl *)ggl::crc32::compute<30ul>("FlyoverNightPolarShaderVertex");
      dword_1EE577EA8 = (int)v3;
      ggl::flyoverNightPolarShaderFragmentFunctionDescriptor(v3);
      qword_1EE577EB0 = (uint64_t)&ggl::flyoverNightPolarShaderFragmentFunctionDescriptor(void)::ref;
      dword_1EE577EB8 = ggl::crc32::compute<32ul>("FlyoverNightPolarShaderFragment");
      qword_1EE577EC0 = (uint64_t)ggl::flyoverNightPolarShaderShaderConstants(void)::ref;
      unk_1EE577EC8 = 6;
      qword_1EE577ED0 = (uint64_t)ggl::flyoverNightPolarShaderShaderTextures(void)::ref;
      unk_1EE577ED8 = 3;
      qword_1EE577EE0 = (uint64_t)ggl::flyoverNightPolarShaderShaderSamplers(void)::ref;
      unk_1EE577EE8 = 3;
    }
  }
}

void ggl::flyoverNightPolarShaderVertexFunctionDescriptor(ggl *this)
{
  unsigned __int8 v1;

  if ((v1 & 1) == 0)
  {
    {
      ggl::flyoverNightPolarShaderVertexFunctionDescriptor(void)::ref = ggl::crc32::compute<30ul>("FlyoverNightPolarShaderVertex");
      *(_DWORD *)algn_1EE57832C = 0;
      qword_1EE578330 = (uint64_t)"FlyoverNightPolarShader";
      unk_1EE578338 = ggl::flyoverNightPolarShaderVertShaderFunctionAttributes(void)::ref;
      qword_1EE578340 = 1;
      unk_1EE578348 = &ggl::flyoverNightPolarShaderVertShaderFunctionConstantMapping(void)::ref;
      qword_1EE578350 = 6;
      unk_1EE578358 = &ggl::flyoverNightPolarShaderVertShaderFunctionBufferMapping(void)::ref;
      qword_1EE578360 = 0;
      unk_1EE578368 = &ggl::flyoverNightPolarShaderVertShaderFunctionTextureMapping(void)::ref;
      qword_1EE578370 = 1;
      unk_1EE578378 = &ggl::flyoverNightPolarShaderVertShaderFunctionSamplerMapping(void)::ref;
      qword_1EE578388 = 0;
      unk_1EE578390 = 0;
      qword_1EE578380 = 1;
    }
  }
}

void ggl::flyoverNightPolarShaderFragmentFunctionDescriptor(ggl *this)
{
  unsigned __int8 v1;

  if ((v1 & 1) == 0)
  {
    {
      ggl::flyoverNightPolarShaderFragmentFunctionDescriptor(void)::ref = ggl::crc32::compute<32ul>("FlyoverNightPolarShaderFragment");
      *(_DWORD *)algn_1EE578414 = 1;
      qword_1EE578418 = (uint64_t)"FlyoverNightPolarShader";
      unk_1EE578420 = 0;
      qword_1EE578428 = 0;
      unk_1EE578430 = &ggl::flyoverNightPolarShaderFragShaderFunctionConstantMapping(void)::ref;
      qword_1EE578438 = 2;
      unk_1EE578440 = &ggl::flyoverNightPolarShaderFragShaderFunctionBufferMapping(void)::ref;
      qword_1EE578448 = 0;
      unk_1EE578450 = &ggl::flyoverNightPolarShaderFragShaderFunctionTextureMapping(void)::ref;
      qword_1EE578458 = 2;
      unk_1EE578460 = &ggl::flyoverNightPolarShaderFragShaderFunctionSamplerMapping(void)::ref;
      qword_1EE578470 = 0;
      unk_1EE578478 = 0;
      qword_1EE578468 = 2;
    }
  }
}

void ggl::FlyoverNight::FlyoverPipelineState::~FlyoverPipelineState(ggl::FlyoverNight::FlyoverPipelineState *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  *(_QWORD *)this = &off_1E42B6760;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *(_QWORD *)this = &off_1E42B8A10;
  v5 = *((_QWORD *)this + 1);
  if (v5)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 16))(v5, *((_QWORD *)this + 3));
    *((_QWORD *)this + 3) = 3735927469;
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  *(_QWORD *)this = &off_1E42B6760;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *(_QWORD *)this = &off_1E42B8A10;
  v5 = *((_QWORD *)this + 1);
  if (v5)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 16))(v5, *((_QWORD *)this + 3));
    *((_QWORD *)this + 3) = 3735927469;
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

uint64_t ggl::FlyoverNight::FlyoverPipelineState::FlyoverPipelineState(uint64_t a1, _QWORD *a2, uint64_t a3, _OWORD *a4, char a5)
{
  unsigned __int8 v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  __int128 v12;
  char v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  int8x16_t v18;
  int8x16_t v19;
  int16x8_t v20;
  int32x4_t v21;
  int8x16_t v22;
  int8x16_t v23;
  int16x8_t v24;
  int32x4_t v25;
  int8x16_t v26;
  int32x4_t v27;
  int8x16_t v28;
  int32x4_t v29;
  int8x16_t v30;
  int8x16_t v31;
  int8x16_t v32;
  int8x16_t v33;
  int8x16_t v34;
  int8x16_t v35;
  int8x16_t v36;
  int8x16_t v37;
  int8x16_t v38;
  int16x8_t v39;
  int32x4_t v40;
  int8x16_t v41;
  int16x8_t v42;
  int32x4_t v43;
  int8x16_t v44;
  int32x4_t v45;
  int8x16_t v46;
  int32x4_t v47;
  int8x16_t v48;
  int8x16_t v49;
  int8x16_t v50;
  int8x16_t v51;
  int8x16_t v52;
  int8x16_t v53;
  int8x16_t v54;
  int8x16_t v55;
  int8x16_t v56;
  int8x16_t v57;
  int8x16_t v58;
  int8x16_t v59;
  int8x16_t v60;
  int8x16_t v61;
  int16x8_t v62;
  int32x4_t v63;
  int8x16_t v64;
  int16x8_t v65;
  int32x4_t v66;
  int8x16_t v67;
  int32x4_t v68;
  int8x16_t v69;
  int32x4_t v70;
  int8x16_t v71;
  int8x16_t v72;
  int8x16_t v73;
  int8x16_t v74;
  int8x16_t v75;
  int8x16_t v76;
  int16x8_t v77;
  int32x4_t v78;
  int8x16_t v79;
  int16x8_t v80;
  int32x4_t v81;
  int8x16_t v82;
  int32x4_t v83;
  int8x16_t v84;
  int32x4_t v85;
  int8x16_t v86;
  int8x16_t v87;
  int8x16_t v88;
  int8x16_t v89;
  _OWORD *v91;
  ggl::FlyoverNightShader *v92;
  unsigned __int8 v93;
  unsigned __int8 v94;
  unsigned __int8 v95;
  unsigned __int8 v96;
  unsigned __int8 v97;
  unsigned __int8 v98;
  _QWORD *v99;
  uint64_t v100;
  __int128 v101;
  __int128 v102;
  _BYTE v103[28];

  if ((v7 & 1) == 0)
  {
    v91 = a4;
    v99 = a2;
    v100 = a3;
    a2 = v99;
    a3 = v100;
    a4 = v91;
    if ((_DWORD)v92)
    {
      if ((v93 & 1) == 0)
      {
        if ((_DWORD)v92)
        {
          if ((v96 & 1) == 0
          {
            if ((v98 & 1) == 0
            {
              ggl::MeshTyped<ggl::CommonMesh::BufferPos4UV>::attributesReflection(void)::r = (uint64_t)&ggl::CommonMesh::bufferPos4UVReflection;
            }
            ggl::MeshTyped<ggl::CommonMesh::BufferPos4UV>::typedReflection(void)::r = (uint64_t)&ggl::MeshTyped<ggl::CommonMesh::BufferPos4UV>::attributesReflection(void)::r;
            *(_QWORD *)algn_1EE585510 = 1;
          }
          ggl::FlyoverNight::FlyoverPipelineSetup::typedReflection(void)::ref = (uint64_t)&ggl::MeshTyped<ggl::CommonMesh::BufferPos4UV>::typedReflection(void)::r;
          *(_QWORD *)algn_1EE585428 = &ggl::FlyoverNight::pipelineDataFlyoverPipelineDeviceStructs(void)::ref;
          qword_1EE585430 = 0;
          if ((v97 & 1) == 0
          {
            ggl::FlyoverNight::pipelineDataFlyoverPipelineConstantStructs(void)::ref = (uint64_t)ggl::FlyoverCommon::Shared::reflection(void)::reflection;
            unk_1EE585460 = ggl::FlyoverCommon::Transform::reflection(void)::reflection;
            qword_1EE585468 = (uint64_t)ggl::FlyoverCommon::Clip::reflection(void)::reflection;
            unk_1EE585470 = ggl::FlyoverCommon::Material::reflection(void)::reflection;
            qword_1EE585478 = (uint64_t)ggl::FlyoverCommon::Texcoords::reflection(void)::reflection;
          }
          qword_1EE585438 = (uint64_t)&ggl::FlyoverNight::pipelineDataFlyoverPipelineConstantStructs(void)::ref;
          unk_1EE585440 = xmmword_19FFB38C0;
        }
      }
      ggl::FlyoverNight::FlyoverPipelineState::typedReflection(void)::ref = (uint64_t)&ggl::FlyoverNight::FlyoverPipelineSetup::typedReflection(void)::ref;
      ggl::FlyoverNightShader::typedReflection(v92);
      qword_1EE57B000 = (uint64_t)&ggl::FlyoverNightShader::typedReflection(void)::ref;
      if ((v94 & 1) == 0
      {
        ggl::FlyoverNight::pipelineStateFlyoverPipelineAttributeStructBinding(void)::attr = 0;
        unk_1EE57B200 = 0;
        qword_1EE57B208 = (uint64_t)"";
        dword_1EE57B210 = 0;
        qword_1EE57B218 = (uint64_t)&ggl::FlyoverNight::pipelineStateFlyoverPipelineAttributeBinding_0(void)::attr;
        unk_1EE57B220 = 2;
      }
      qword_1EE57B008 = (uint64_t)&ggl::FlyoverNight::pipelineStateFlyoverPipelineAttributeStructBinding(void)::attr;
      unk_1EE57B010 = 1;
      qword_1EE57B018 = 0;
      unk_1EE57B020 = 3;
      qword_1EE57B028 = (uint64_t)&ggl::FlyoverNight::pipelineStateFlyoverPipelineDeviceStructBinding(void)::ref;
      unk_1EE57B030 = 0;
      if ((v95 & 1) == 0
      {
        ggl::FlyoverNight::pipelineStateFlyoverPipelineConstantStructBinding(void)::ref = 0;
        unk_1EE57B110 = 0;
        qword_1EE57B118 = (uint64_t)"sharedConstants";
        dword_1EE57B120 = 3;
        qword_1EE57B128 = (uint64_t)&ggl::FlyoverNight::pipelineStateFlyoverPipelineConstantSharedConstantsBinding(void)::reflection;
        *(_OWORD *)algn_1EE57B130 = xmmword_19FFB3030;
        qword_1EE57B140 = 1;
        unk_1EE57B148 = "transform";
        dword_1EE57B150 = 3;
        qword_1EE57B158 = (uint64_t)&ggl::FlyoverNight::pipelineStateFlyoverPipelineConstantTransformBinding(void)::reflection;
        unk_1EE57B160 = vdupq_n_s64(2uLL);
        qword_1EE57B170 = 2;
        unk_1EE57B178 = "clip";
        dword_1EE57B180 = 3;
        qword_1EE57B188 = (uint64_t)&ggl::FlyoverNight::pipelineStateFlyoverPipelineConstantClipBinding(void)::reflection;
        *(_OWORD *)algn_1EE57B190 = xmmword_19FFB3040;
        qword_1EE57B1A0 = 3;
        unk_1EE57B1A8 = "material";
        dword_1EE57B1B0 = 3;
        qword_1EE57B1B8 = (uint64_t)&ggl::FlyoverNight::pipelineStateFlyoverPipelineConstantMaterialBinding(void)::reflection;
        unk_1EE57B1C0 = xmmword_19FFB3050;
        qword_1EE57B1D0 = 4;
        unk_1EE57B1D8 = "texcoords";
        dword_1EE57B1E0 = 3;
        qword_1EE57B1E8 = (uint64_t)&ggl::FlyoverNight::pipelineStateFlyoverPipelineConstantTexcoordsBinding(void)::reflection;
        unk_1EE57B1F0 = 2;
      }
      qword_1EE57B038 = (uint64_t)&ggl::FlyoverNight::pipelineStateFlyoverPipelineConstantStructBinding(void)::ref;
      unk_1EE57B040 = 5;
      a4 = v91;
      a2 = v99;
      a3 = v100;
    }
  }
  v8 = *a2;
  v9 = (std::__shared_weak_count *)a2[1];
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }
  *(_OWORD *)v103 = *(_OWORD *)a3;
  *(_OWORD *)&v103[12] = *(_OWORD *)(a3 + 12);
  v12 = *(_OWORD *)(a3 + 28);
  v13 = *(_BYTE *)(a3 + 44);
  v101 = *a4;
  v102 = a4[1];
  *(_DWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)a1 = &off_1E42B6760;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 40) = &ggl::FlyoverNight::FlyoverPipelineState::typedReflection(void)::ref;
  *(_QWORD *)(a1 + 48) = v8;
  *(_QWORD *)(a1 + 56) = v9;
  if (v9)
  {
    v14 = (unint64_t *)&v9->__shared_owners_;
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }
  *(_BYTE *)(a1 + 112) = 0;
  *(_OWORD *)(a1 + 116) = xmmword_19FFB3060;
  *(_QWORD *)(a1 + 132) = 0;
  *(_QWORD *)(a1 + 148) = 0;
  *(_QWORD *)(a1 + 140) = 0;
  *(_BYTE *)(a1 + 160) = 0;
  *(_OWORD *)(a1 + 164) = xmmword_19FFB3060;
  *(_QWORD *)(a1 + 180) = 0;
  *(_QWORD *)(a1 + 196) = 0;
  *(_QWORD *)(a1 + 188) = 0;
  *(_BYTE *)(a1 + 208) = 0;
  *(_OWORD *)(a1 + 212) = xmmword_19FFB3060;
  *(_QWORD *)(a1 + 228) = 0;
  *(_QWORD *)(a1 + 244) = 0;
  *(_QWORD *)(a1 + 236) = 0;
  *(_OWORD *)(a1 + 256) = v101;
  *(_OWORD *)(a1 + 272) = v102;
  *(_BYTE *)(a1 + 288) = 0;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_OWORD *)(a1 + 344) = 0u;
  *(_QWORD *)(a1 + 360) = 0;
  *(_QWORD *)(a1 + 368) = 0x100000001;
  *(_BYTE *)(a1 + 376) = 0;
  *(_OWORD *)(a1 + 64) = *(_OWORD *)v103;
  *(_OWORD *)(a1 + 76) = *(_OWORD *)&v103[12];
  *(_OWORD *)(a1 + 92) = v12;
  *(_BYTE *)(a1 + 108) = v13;
  if (v9)
  {
    v16 = (unint64_t *)&v9->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  *(_BYTE *)(a1 + 304) = a5;
  v18 = *(int8x16_t *)(a1 + 320);
  v19 = vceqzq_s8(*(int8x16_t *)(a1 + 304));
  v20 = vmovl_high_s8(v19);
  v21 = vmovl_s16(*(int16x4_t *)v20.i8);
  v22.i64[0] = v21.u32[0];
  v22.i64[1] = v21.u32[1];
  v23 = v22;
  v24 = vmovl_s8(*(int8x8_t *)v19.i8);
  v25 = vmovl_s16(*(int16x4_t *)v24.i8);
  *(_QWORD *)a1 = &off_1E42B61A0;
  v22.i64[0] = v25.u32[0];
  v22.i64[1] = v25.u32[1];
  v26 = v22;
  v27 = vmovl_high_s16(v20);
  v22.i64[0] = v27.u32[0];
  v22.i64[1] = v27.u32[1];
  v28 = v22;
  v29 = vmovl_high_s16(v24);
  v22.i64[0] = v29.u32[0];
  v22.i64[1] = v29.u32[1];
  v30 = v22;
  v22.i64[0] = v21.u32[2];
  v22.i64[1] = v21.u32[3];
  v31 = v22;
  v22.i64[0] = v25.u32[2];
  v22.i64[1] = v25.u32[3];
  v32 = v22;
  v22.i64[0] = v27.u32[2];
  v22.i64[1] = v27.u32[3];
  v33 = v22;
  v22.i64[0] = v29.u32[2];
  v22.i64[1] = v29.u32[3];
  v34 = vbicq_s8((int8x16_t)xmmword_19FFB3070, v22);
  v35 = vbicq_s8((int8x16_t)xmmword_19FFB3080, v33);
  v36 = vbicq_s8((int8x16_t)xmmword_19FFB3090, v32);
  v37 = vbicq_s8((int8x16_t)xmmword_19FFB30C0, v28);
  v38 = vceqzq_s8(v18);
  v39 = vmovl_high_s8(v38);
  v40 = vmovl_s16(*(int16x4_t *)v39.i8);
  v22.i64[0] = v40.u32[0];
  v22.i64[1] = v40.u32[1];
  v41 = v22;
  v42 = vmovl_s8(*(int8x8_t *)v38.i8);
  v43 = vmovl_s16(*(int16x4_t *)v42.i8);
  v22.i64[0] = v43.u32[0];
  v22.i64[1] = v43.u32[1];
  v44 = v22;
  v45 = vmovl_high_s16(v39);
  v22.i64[0] = v45.u32[0];
  v22.i64[1] = v45.u32[1];
  v46 = v22;
  v47 = vmovl_high_s16(v42);
  v22.i64[0] = v47.u32[0];
  v22.i64[1] = v47.u32[1];
  v48 = v22;
  v22.i64[0] = v40.u32[2];
  v22.i64[1] = v40.u32[3];
  v49 = v22;
  v22.i64[0] = v43.u32[2];
  v22.i64[1] = v43.u32[3];
  v50 = v22;
  v22.i64[0] = v45.u32[2];
  v22.i64[1] = v45.u32[3];
  v51 = v22;
  v22.i64[0] = v47.u32[2];
  v22.i64[1] = v47.u32[3];
  v52 = vbicq_s8((int8x16_t)xmmword_19FFB30F0, v51);
  v53 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3150, v41), vbicq_s8((int8x16_t)xmmword_19FFB30D0, v23));
  v54 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3140, v44), vbicq_s8((int8x16_t)xmmword_19FFB2DB0, v26));
  v55 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3130, v46), v37);
  v56 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3120, v48), vbicq_s8((int8x16_t)xmmword_19FFB30B0, v30));
  v57 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3110, v49), vbicq_s8((int8x16_t)xmmword_19FFB30A0, v31));
  v58 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3100, v50), v36);
  v59 = vorrq_s8(v52, v35);
  v60 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB30E0, v22), v34);
  v61 = vceqzq_s8(*(int8x16_t *)(a1 + 336));
  v62 = vmovl_s8(*(int8x8_t *)v61.i8);
  v63 = vmovl_high_s16(v62);
  v22.i64[0] = v63.i32[2];
  v22.i64[1] = v63.i32[3];
  v64 = v22;
  v65 = vmovl_high_s8(v61);
  v66 = vmovl_high_s16(v65);
  v22.i64[0] = v66.i32[2];
  v22.i64[1] = v66.i32[3];
  v67 = v22;
  v68 = vmovl_s16(*(int16x4_t *)v62.i8);
  v22.i64[0] = v68.i32[2];
  v22.i64[1] = v68.i32[3];
  v69 = v22;
  v70 = vmovl_s16(*(int16x4_t *)v65.i8);
  v22.i64[0] = v70.i32[2];
  v22.i64[1] = v70.i32[3];
  v71 = v22;
  v22.i64[0] = v63.i32[0];
  v22.i64[1] = v63.i32[1];
  v72 = v22;
  v22.i64[0] = v66.i32[0];
  v22.i64[1] = v66.i32[1];
  v73 = v22;
  v22.i64[0] = v68.i32[0];
  v22.i64[1] = v68.i32[1];
  v74 = v22;
  v22.i64[0] = v70.i32[0];
  v22.i64[1] = v70.i32[1];
  v75 = vbicq_s8((int8x16_t)xmmword_19FFB3160, v22);
  v76 = vceqzq_s8(*(int8x16_t *)(a1 + 352));
  v77 = vmovl_high_s8(v76);
  v78 = vmovl_s16(*(int16x4_t *)v77.i8);
  v22.i64[0] = v78.i32[0];
  v22.i64[1] = v78.i32[1];
  v79 = v22;
  v80 = vmovl_s8(*(int8x8_t *)v76.i8);
  v81 = vmovl_s16(*(int16x4_t *)v80.i8);
  v22.i64[0] = v81.i32[0];
  v22.i64[1] = v81.i32[1];
  v82 = v22;
  v83 = vmovl_high_s16(v77);
  v22.i64[0] = v83.i32[0];
  v22.i64[1] = v83.i32[1];
  v84 = v22;
  v85 = vmovl_high_s16(v80);
  v22.i64[0] = v85.i32[0];
  v22.i64[1] = v85.i32[1];
  v86 = v22;
  v22.i64[0] = v78.i32[2];
  v22.i64[1] = v78.i32[3];
  v87 = v22;
  v22.i64[0] = v81.i32[2];
  v22.i64[1] = v81.i32[3];
  v88 = v22;
  v22.i64[0] = v83.i32[2];
  v22.i64[1] = v83.i32[3];
  v89 = v22;
  v22.i64[0] = v85.i32[2];
  v22.i64[1] = v85.i32[3];
  *(_QWORD *)(a1 + 296) = vaddvq_s64(vaddq_s64((int64x2_t)vorrq_s8(vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3240, v82), vbicq_s8((int8x16_t)xmmword_19FFB3170, v74)), v54), vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3250, v79), v75), v53)), vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3220, v86), vbicq_s8((int8x16_t)xmmword_19FFB3190, v72)), v56), vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3230, v84), vbicq_s8((int8x16_t)xmmword_19FFB3180, v73)),
                                               v55))),
                              (int64x2_t)vorrq_s8(vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3200, v88), vbicq_s8((int8x16_t)xmmword_19FFB31B0, v69)), v58), vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3210, v87), vbicq_s8((int8x16_t)xmmword_19FFB31A0, v71)), v57)), vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB31E0, v22), vbicq_s8((int8x16_t)xmmword_19FFB31D0, v64)), v60), vorrq_s8(vorrq_s8(
                                                 vbicq_s8((int8x16_t)xmmword_19FFB31F0, v89),
                                                 vbicq_s8((int8x16_t)xmmword_19FFB31C0, v67)),
                                               v59)))));
  *(_BYTE *)(a1 + 288) = 1;
  return a1;
}

void ggl::FlyoverNight::FlyoverPipelineSetup::~FlyoverPipelineSetup(ggl::FlyoverNight::FlyoverPipelineSetup *this)
{
  ggl::PipelineSetup::~PipelineSetup(this);
  JUMPOUT(0x1A1AF4E00);
}

BOOL ggl::FlyoverNight::FlyoverPipelineSetup::constantDataIsEnabled(ggl::FlyoverNight::FlyoverPipelineSetup *this, unint64_t a2)
{
  return a2 < 5;
}

BOOL ggl::FlyoverNight::FlyoverPipelineSetup::textureIsEnabled(ggl::FlyoverNight::FlyoverPipelineSetup *this, unint64_t a2)
{
  return a2 < 3;
}

uint64_t ggl::FlyoverNight::FlyoverPipelineSetup::FlyoverPipelineSetup(ggl::FlyoverNight::FlyoverPipelineSetup *this)
{
  unsigned __int8 v2;
  uint64_t result;
  unsigned __int8 v4;
  unsigned __int8 v5;
  unsigned __int8 v6;

  if ((v2 & 1) == 0
  {
    if ((v4 & 1) == 0
    {
      if ((v6 & 1) == 0
      {
        ggl::MeshTyped<ggl::CommonMesh::BufferPos4UV>::attributesReflection(void)::r = (uint64_t)&ggl::CommonMesh::bufferPos4UVReflection;
      }
      ggl::MeshTyped<ggl::CommonMesh::BufferPos4UV>::typedReflection(void)::r = (uint64_t)&ggl::MeshTyped<ggl::CommonMesh::BufferPos4UV>::attributesReflection(void)::r;
      *(_QWORD *)algn_1EE585510 = 1;
    }
    ggl::FlyoverNight::FlyoverPipelineSetup::typedReflection(void)::ref = (uint64_t)&ggl::MeshTyped<ggl::CommonMesh::BufferPos4UV>::typedReflection(void)::r;
    *(_QWORD *)algn_1EE585428 = &ggl::FlyoverNight::pipelineDataFlyoverPipelineDeviceStructs(void)::ref;
    qword_1EE585430 = 0;
    if ((v5 & 1) == 0
    {
      ggl::FlyoverNight::pipelineDataFlyoverPipelineConstantStructs(void)::ref = (uint64_t)ggl::FlyoverCommon::Shared::reflection(void)::reflection;
      unk_1EE585460 = ggl::FlyoverCommon::Transform::reflection(void)::reflection;
      qword_1EE585468 = (uint64_t)ggl::FlyoverCommon::Clip::reflection(void)::reflection;
      unk_1EE585470 = ggl::FlyoverCommon::Material::reflection(void)::reflection;
      qword_1EE585478 = (uint64_t)ggl::FlyoverCommon::Texcoords::reflection(void)::reflection;
    }
    qword_1EE585438 = (uint64_t)&ggl::FlyoverNight::pipelineDataFlyoverPipelineConstantStructs(void)::ref;
    unk_1EE585440 = xmmword_19FFB38C0;
  }
  result = ggl::PipelineSetup::PipelineSetup((uint64_t)this, (uint64_t)&ggl::FlyoverNight::FlyoverPipelineSetup::typedReflection(void)::ref);
  *(_QWORD *)this = &off_1E42B6170;
  return result;
}

void ggl::FlyoverNight::FlyoverPolarPipelineState::~FlyoverPolarPipelineState(ggl::FlyoverNight::FlyoverPolarPipelineState *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  *(_QWORD *)this = &off_1E42B6760;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *(_QWORD *)this = &off_1E42B8A10;
  v5 = *((_QWORD *)this + 1);
  if (v5)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 16))(v5, *((_QWORD *)this + 3));
    *((_QWORD *)this + 3) = 3735927469;
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  *(_QWORD *)this = &off_1E42B6760;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *(_QWORD *)this = &off_1E42B8A10;
  v5 = *((_QWORD *)this + 1);
  if (v5)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 16))(v5, *((_QWORD *)this + 3));
    *((_QWORD *)this + 3) = 3735927469;
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void ggl::FlyoverNight::FlyoverPolarPipelineSetup::~FlyoverPolarPipelineSetup(ggl::FlyoverNight::FlyoverPolarPipelineSetup *this)
{
  ggl::PipelineSetup::~PipelineSetup(this);
  JUMPOUT(0x1A1AF4E00);
}

BOOL ggl::FlyoverNight::FlyoverPolarPipelineSetup::constantDataIsEnabled(ggl::FlyoverNight::FlyoverPolarPipelineSetup *this, unint64_t a2)
{
  return a2 < 6;
}

BOOL ggl::FlyoverNight::FlyoverPolarPipelineSetup::textureIsEnabled(ggl::FlyoverNight::FlyoverPolarPipelineSetup *this, unint64_t a2)
{
  return a2 < 3;
}

uint64_t ggl::Hillshade::Pos2DUVPipelineState::Pos2DUVPipelineState(uint64_t a1, _QWORD *a2, uint64_t a3, _OWORD *a4, char a5, char a6)
{
  unsigned __int8 v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  __int128 v14;
  char v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  int8x16_t v20;
  int8x16_t v21;
  int16x8_t v22;
  int32x4_t v23;
  int8x16_t v24;
  int8x16_t v25;
  int16x8_t v26;
  int32x4_t v27;
  int8x16_t v28;
  int32x4_t v29;
  int8x16_t v30;
  int32x4_t v31;
  int8x16_t v32;
  int8x16_t v33;
  int8x16_t v34;
  int8x16_t v35;
  int8x16_t v36;
  int8x16_t v37;
  int8x16_t v38;
  int8x16_t v39;
  int8x16_t v40;
  int16x8_t v41;
  int32x4_t v42;
  int8x16_t v43;
  int16x8_t v44;
  int32x4_t v45;
  int8x16_t v46;
  int32x4_t v47;
  int8x16_t v48;
  int32x4_t v49;
  int8x16_t v50;
  int8x16_t v51;
  int8x16_t v52;
  int8x16_t v53;
  int8x16_t v54;
  int8x16_t v55;
  int8x16_t v56;
  int8x16_t v57;
  int8x16_t v58;
  int8x16_t v59;
  int8x16_t v60;
  int8x16_t v61;
  int8x16_t v62;
  int8x16_t v63;
  int16x8_t v64;
  int32x4_t v65;
  int8x16_t v66;
  int16x8_t v67;
  int32x4_t v68;
  int8x16_t v69;
  int32x4_t v70;
  int8x16_t v71;
  int32x4_t v72;
  int8x16_t v73;
  int8x16_t v74;
  int8x16_t v75;
  int8x16_t v76;
  int8x16_t v77;
  int8x16_t v78;
  int16x8_t v79;
  int32x4_t v80;
  int8x16_t v81;
  int16x8_t v82;
  int32x4_t v83;
  int8x16_t v84;
  int32x4_t v85;
  int8x16_t v86;
  int32x4_t v87;
  int8x16_t v88;
  int8x16_t v89;
  int8x16_t v90;
  int8x16_t v91;
  _OWORD *v93;
  ggl::HillshadeShader *v94;
  unsigned __int8 v95;
  unsigned __int8 v96;
  unsigned __int8 v97;
  unsigned __int8 v98;
  unsigned __int8 v99;
  unsigned __int8 v100;
  _QWORD *v101;
  uint64_t v102;
  __int128 v103;
  __int128 v104;
  _BYTE v105[28];

  if ((v9 & 1) == 0)
  {
    v93 = a4;
    v101 = a2;
    v102 = a3;
    a2 = v101;
    a3 = v102;
    a4 = v93;
    if ((_DWORD)v94)
    {
      if ((v95 & 1) == 0)
      {
        if ((_DWORD)v94)
        {
          if ((v98 & 1) == 0
          {
            if ((v100 & 1) == 0
            {
              ggl::MeshTyped<ggl::CommonMesh::BufferPos2UV>::attributesReflection(void)::r = (uint64_t)&ggl::CommonMesh::bufferPos2UVReflection;
            }
            ggl::MeshTyped<ggl::CommonMesh::BufferPos2UV>::typedReflection(void)::r = (uint64_t)&ggl::MeshTyped<ggl::CommonMesh::BufferPos2UV>::attributesReflection(void)::r;
            unk_1ECE43AC8 = 1;
          }
          ggl::Hillshade::Pos2DUVPipelineSetup::typedReflection(void)::ref = (uint64_t)&ggl::MeshTyped<ggl::CommonMesh::BufferPos2UV>::typedReflection(void)::r;
          *(_QWORD *)algn_1EE5848F8 = &ggl::Hillshade::pipelineDataPos2DUVPipelineDeviceStructs(void)::ref;
          qword_1EE584900 = 0;
          if ((v99 & 1) == 0
          {
            ggl::Hillshade::pipelineDataPos2DUVPipelineConstantStructs(void)::ref = (uint64_t)ggl::Tile::View::reflection(void)::reflection;
            unk_1EE584980 = ggl::Tile::Transform::reflection(void)::reflection;
            qword_1EE584988 = (uint64_t)ggl::Hillshade::HillshadeStyle::reflection(void)::reflection;
          }
          qword_1EE584908 = (uint64_t)&ggl::Hillshade::pipelineDataPos2DUVPipelineConstantStructs(void)::ref;
          unk_1EE584910 = xmmword_19FFB35E0;
        }
      }
      ggl::Hillshade::Pos2DUVPipelineState::typedReflection(void)::ref = (uint64_t)&ggl::Hillshade::Pos2DUVPipelineSetup::typedReflection(void)::ref;
      ggl::HillshadeShader::typedReflection(v94);
      qword_1EE584930 = (uint64_t)&ggl::HillshadeShader::typedReflection(void)::ref;
      if ((v96 & 1) == 0
      {
        ggl::Hillshade::pipelineStatePos2DUVPipelineAttributeStructBinding(void)::attr = 0;
        unk_1EE584A30 = 0;
        qword_1EE584A38 = (uint64_t)"";
        dword_1EE584A40 = 0;
        qword_1EE584A48 = (uint64_t)&ggl::Hillshade::pipelineStatePos2DUVPipelineAttributeBinding_0(void)::attr;
        unk_1EE584A50 = 2;
      }
      qword_1EE584938 = (uint64_t)&ggl::Hillshade::pipelineStatePos2DUVPipelineAttributeStructBinding(void)::attr;
      unk_1EE584940 = 1;
      qword_1EE584948 = 0;
      unk_1EE584950 = 1;
      qword_1EE584958 = (uint64_t)&ggl::Hillshade::pipelineStatePos2DUVPipelineDeviceStructBinding(void)::ref;
      unk_1EE584960 = 0;
      if ((v97 & 1) == 0
      {
        ggl::Hillshade::pipelineStatePos2DUVPipelineConstantStructBinding(void)::ref = 0;
        unk_1EE5849A0 = 0;
        qword_1EE5849A8 = (uint64_t)"view";
        dword_1EE5849B0 = 3;
        qword_1EE5849B8 = (uint64_t)&ggl::Hillshade::pipelineStatePos2DUVPipelineConstantViewBinding(void)::reflection;
        unk_1EE5849C0 = xmmword_19FFB35A0;
        qword_1EE5849D0 = 1;
        unk_1EE5849D8 = "transform";
        dword_1EE5849E0 = 3;
        qword_1EE5849E8 = (uint64_t)&ggl::Hillshade::pipelineStatePos2DUVPipelineConstantTransformBinding(void)::reflection;
        *(_OWORD *)algn_1EE5849F0 = xmmword_19FFB3660;
        qword_1EE584A00 = 2;
        unk_1EE584A08 = "style";
        dword_1EE584A10 = 3;
        qword_1EE584A18 = (uint64_t)&ggl::Hillshade::pipelineStatePos2DUVPipelineConstantStyleBinding(void)::reflection;
        unk_1EE584A20 = 4;
      }
      qword_1EE584968 = (uint64_t)&ggl::Hillshade::pipelineStatePos2DUVPipelineConstantStructBinding(void)::ref;
      unk_1EE584970 = 3;
      a4 = v93;
      a2 = v101;
      a3 = v102;
    }
  }
  v10 = *a2;
  v11 = (std::__shared_weak_count *)a2[1];
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldxr(p_shared_owners);
    while (__stxr(v13 + 1, p_shared_owners));
  }
  *(_OWORD *)v105 = *(_OWORD *)a3;
  *(_OWORD *)&v105[12] = *(_OWORD *)(a3 + 12);
  v14 = *(_OWORD *)(a3 + 28);
  v15 = *(_BYTE *)(a3 + 44);
  v103 = *a4;
  v104 = a4[1];
  *(_DWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)a1 = &off_1E42B6760;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 40) = &ggl::Hillshade::Pos2DUVPipelineState::typedReflection(void)::ref;
  *(_QWORD *)(a1 + 48) = v10;
  *(_QWORD *)(a1 + 56) = v11;
  if (v11)
  {
    v16 = (unint64_t *)&v11->__shared_owners_;
    do
      v17 = __ldxr(v16);
    while (__stxr(v17 + 1, v16));
  }
  *(_BYTE *)(a1 + 112) = 0;
  *(_OWORD *)(a1 + 116) = xmmword_19FFB3060;
  *(_QWORD *)(a1 + 132) = 0;
  *(_QWORD *)(a1 + 148) = 0;
  *(_QWORD *)(a1 + 140) = 0;
  *(_BYTE *)(a1 + 160) = 0;
  *(_OWORD *)(a1 + 164) = xmmword_19FFB3060;
  *(_QWORD *)(a1 + 180) = 0;
  *(_QWORD *)(a1 + 196) = 0;
  *(_QWORD *)(a1 + 188) = 0;
  *(_BYTE *)(a1 + 208) = 0;
  *(_OWORD *)(a1 + 212) = xmmword_19FFB3060;
  *(_QWORD *)(a1 + 228) = 0;
  *(_QWORD *)(a1 + 244) = 0;
  *(_QWORD *)(a1 + 236) = 0;
  *(_OWORD *)(a1 + 256) = v103;
  *(_OWORD *)(a1 + 272) = v104;
  *(_BYTE *)(a1 + 288) = 0;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_OWORD *)(a1 + 344) = 0u;
  *(_QWORD *)(a1 + 360) = 0;
  *(_QWORD *)(a1 + 368) = 0x100000001;
  *(_BYTE *)(a1 + 376) = 0;
  *(_OWORD *)(a1 + 64) = *(_OWORD *)v105;
  *(_OWORD *)(a1 + 76) = *(_OWORD *)&v105[12];
  *(_OWORD *)(a1 + 92) = v14;
  *(_BYTE *)(a1 + 108) = v15;
  if (v11)
  {
    v18 = (unint64_t *)&v11->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  *(_BYTE *)(a1 + 304) = a5;
  *(_BYTE *)(a1 + 305) = a6;
  v20 = *(int8x16_t *)(a1 + 320);
  v21 = vceqzq_s8(*(int8x16_t *)(a1 + 304));
  v22 = vmovl_high_s8(v21);
  v23 = vmovl_s16(*(int16x4_t *)v22.i8);
  v24.i64[0] = v23.u32[0];
  v24.i64[1] = v23.u32[1];
  v25 = v24;
  v26 = vmovl_s8(*(int8x8_t *)v21.i8);
  v27 = vmovl_s16(*(int16x4_t *)v26.i8);
  v24.i64[0] = v27.u32[0];
  v24.i64[1] = v27.u32[1];
  v28 = v24;
  v29 = vmovl_high_s16(v22);
  v24.i64[0] = v29.u32[0];
  v24.i64[1] = v29.u32[1];
  v30 = v24;
  v31 = vmovl_high_s16(v26);
  v24.i64[0] = v31.u32[0];
  v24.i64[1] = v31.u32[1];
  v32 = v24;
  v24.i64[0] = v23.u32[2];
  v24.i64[1] = v23.u32[3];
  v33 = v24;
  v24.i64[0] = v27.u32[2];
  v24.i64[1] = v27.u32[3];
  v34 = v24;
  v24.i64[0] = v29.u32[2];
  v24.i64[1] = v29.u32[3];
  v35 = v24;
  v24.i64[0] = v31.u32[2];
  v24.i64[1] = v31.u32[3];
  v36 = vbicq_s8((int8x16_t)xmmword_19FFB3070, v24);
  v37 = vbicq_s8((int8x16_t)xmmword_19FFB3080, v35);
  v38 = vbicq_s8((int8x16_t)xmmword_19FFB3090, v34);
  v39 = vbicq_s8((int8x16_t)xmmword_19FFB30C0, v30);
  *(_QWORD *)a1 = &off_1E42BD088;
  v40 = vceqzq_s8(v20);
  v41 = vmovl_high_s8(v40);
  v42 = vmovl_s16(*(int16x4_t *)v41.i8);
  v24.i64[0] = v42.u32[0];
  v24.i64[1] = v42.u32[1];
  v43 = v24;
  v44 = vmovl_s8(*(int8x8_t *)v40.i8);
  v45 = vmovl_s16(*(int16x4_t *)v44.i8);
  v24.i64[0] = v45.u32[0];
  v24.i64[1] = v45.u32[1];
  v46 = v24;
  v47 = vmovl_high_s16(v41);
  v24.i64[0] = v47.u32[0];
  v24.i64[1] = v47.u32[1];
  v48 = v24;
  v49 = vmovl_high_s16(v44);
  v24.i64[0] = v49.u32[0];
  v24.i64[1] = v49.u32[1];
  v50 = v24;
  v24.i64[0] = v42.u32[2];
  v24.i64[1] = v42.u32[3];
  v51 = v24;
  v24.i64[0] = v45.u32[2];
  v24.i64[1] = v45.u32[3];
  v52 = v24;
  v24.i64[0] = v47.u32[2];
  v24.i64[1] = v47.u32[3];
  v53 = v24;
  v24.i64[0] = v49.u32[2];
  v24.i64[1] = v49.u32[3];
  v54 = vbicq_s8((int8x16_t)xmmword_19FFB30F0, v53);
  v55 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3150, v43), vbicq_s8((int8x16_t)xmmword_19FFB30D0, v25));
  v56 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3140, v46), vbicq_s8((int8x16_t)xmmword_19FFB2DB0, v28));
  v57 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3130, v48), v39);
  v58 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3120, v50), vbicq_s8((int8x16_t)xmmword_19FFB30B0, v32));
  v59 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3110, v51), vbicq_s8((int8x16_t)xmmword_19FFB30A0, v33));
  v60 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3100, v52), v38);
  v61 = vorrq_s8(v54, v37);
  v62 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB30E0, v24), v36);
  v63 = vceqzq_s8(*(int8x16_t *)(a1 + 336));
  v64 = vmovl_s8(*(int8x8_t *)v63.i8);
  v65 = vmovl_high_s16(v64);
  v24.i64[0] = v65.i32[2];
  v24.i64[1] = v65.i32[3];
  v66 = v24;
  v67 = vmovl_high_s8(v63);
  v68 = vmovl_high_s16(v67);
  v24.i64[0] = v68.i32[2];
  v24.i64[1] = v68.i32[3];
  v69 = v24;
  v70 = vmovl_s16(*(int16x4_t *)v64.i8);
  v24.i64[0] = v70.i32[2];
  v24.i64[1] = v70.i32[3];
  v71 = v24;
  v72 = vmovl_s16(*(int16x4_t *)v67.i8);
  v24.i64[0] = v72.i32[2];
  v24.i64[1] = v72.i32[3];
  v73 = v24;
  v24.i64[0] = v65.i32[0];
  v24.i64[1] = v65.i32[1];
  v74 = v24;
  v24.i64[0] = v68.i32[0];
  v24.i64[1] = v68.i32[1];
  v75 = v24;
  v24.i64[0] = v70.i32[0];
  v24.i64[1] = v70.i32[1];
  v76 = v24;
  v24.i64[0] = v72.i32[0];
  v24.i64[1] = v72.i32[1];
  v77 = vbicq_s8((int8x16_t)xmmword_19FFB3160, v24);
  v78 = vceqzq_s8(*(int8x16_t *)(a1 + 352));
  v79 = vmovl_high_s8(v78);
  v80 = vmovl_s16(*(int16x4_t *)v79.i8);
  v24.i64[0] = v80.i32[0];
  v24.i64[1] = v80.i32[1];
  v81 = v24;
  v82 = vmovl_s8(*(int8x8_t *)v78.i8);
  v83 = vmovl_s16(*(int16x4_t *)v82.i8);
  v24.i64[0] = v83.i32[0];
  v24.i64[1] = v83.i32[1];
  v84 = v24;
  v85 = vmovl_high_s16(v79);
  v24.i64[0] = v85.i32[0];
  v24.i64[1] = v85.i32[1];
  v86 = v24;
  v87 = vmovl_high_s16(v82);
  v24.i64[0] = v87.i32[0];
  v24.i64[1] = v87.i32[1];
  v88 = v24;
  v24.i64[0] = v80.i32[2];
  v24.i64[1] = v80.i32[3];
  v89 = v24;
  v24.i64[0] = v83.i32[2];
  v24.i64[1] = v83.i32[3];
  v90 = v24;
  v24.i64[0] = v85.i32[2];
  v24.i64[1] = v85.i32[3];
  v91 = v24;
  v24.i64[0] = v87.i32[2];
  v24.i64[1] = v87.i32[3];
  *(_QWORD *)(a1 + 296) = vaddvq_s64(vaddq_s64((int64x2_t)vorrq_s8(vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3240, v84), vbicq_s8((int8x16_t)xmmword_19FFB3170, v76)), v56), vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3250, v81), v77), v55)), vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3220, v88), vbicq_s8((int8x16_t)xmmword_19FFB3190, v74)), v58), vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3230, v86), vbicq_s8((int8x16_t)xmmword_19FFB3180, v75)),
                                               v57))),
                              (int64x2_t)vorrq_s8(vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3200, v90), vbicq_s8((int8x16_t)xmmword_19FFB31B0, v71)), v60), vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3210, v89), vbicq_s8((int8x16_t)xmmword_19FFB31A0, v73)), v59)), vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB31E0, v24), vbicq_s8((int8x16_t)xmmword_19FFB31D0, v66)), v62), vorrq_s8(vorrq_s8(
                                                 vbicq_s8((int8x16_t)xmmword_19FFB31F0, v91),
                                                 vbicq_s8((int8x16_t)xmmword_19FFB31C0, v69)),
                                               v61)))));
  *(_BYTE *)(a1 + 288) = 1;
  return a1;
}

void ggl::Hillshade::Pos2DUVPipelineSetup::~Pos2DUVPipelineSetup(ggl::Hillshade::Pos2DUVPipelineSetup *this)
{
  ggl::PipelineSetup::~PipelineSetup(this);
  JUMPOUT(0x1A1AF4E00);
}

BOOL ggl::Hillshade::Pos2DUVPipelineSetup::constantDataIsEnabled(ggl::Hillshade::Pos2DUVPipelineSetup *this, unint64_t a2)
{
  return a2 < 3;
}

BOOL ggl::Hillshade::Pos2DUVPipelineSetup::textureIsEnabled(ggl::Hillshade::Pos2DUVPipelineSetup *this, uint64_t a2)
{
  return a2 == 0;
}

void md::CartographicMapEngineConfiguration::~CartographicMapEngineConfiguration(md::CartographicMapEngineConfiguration *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;

  *(_QWORD *)this = &off_1E42A98A0;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 6);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *(_QWORD *)this = off_1E429CEB0;
  v5 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
  if (v5)
  {
    v6 = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;

  *(_QWORD *)this = &off_1E42A98A0;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 6);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *(_QWORD *)this = off_1E429CEB0;
  v5 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
  if (v5)
  {
    v6 = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

uint64_t md::PolygonRenderLayer<(md::MapDataType)59,md::MapTileDataRenderable<md::PolygonTileData>>::~PolygonRenderLayer(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  void *v5;
  md::PolygonRenderResources *v6;

  *a1 = &off_1E4295C80;
  v2 = (std::__shared_weak_count *)a1[59];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  a1[47] = off_1E42A5CF8;
  v5 = (void *)a1[49];
  if (v5)
  {
    a1[50] = v5;
    operator delete(v5);
  }
  v6 = (md::PolygonRenderResources *)a1[46];
  a1[46] = 0;
  if (v6)
  {
    md::PolygonRenderResources::~PolygonRenderResources(v6);
    MEMORY[0x1A1AF4E00]();
  }
  return md::CartographicTiledVectorRenderLayer<md::MapTileDataRenderable<md::PolygonTileData>>::~CartographicTiledVectorRenderLayer(a1);
}

void md::PolygonRenderLayer<(md::MapDataType)59,md::MapTileDataRenderable<md::PolygonTileData>>::~PolygonRenderLayer(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  void *v5;
  md::PolygonRenderResources *v6;

  *a1 = &off_1E4295C80;
  v2 = (std::__shared_weak_count *)a1[59];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  a1[47] = off_1E42A5CF8;
  v5 = (void *)a1[49];
  if (v5)
  {
    a1[50] = v5;
    operator delete(v5);
  }
  v6 = (md::PolygonRenderResources *)a1[46];
  a1[46] = 0;
  if (v6)
  {
    md::PolygonRenderResources::~PolygonRenderResources(v6);
    MEMORY[0x1A1AF4E00]();
  }
  md::CartographicTiledVectorRenderLayer<md::MapTileDataRenderable<md::PolygonTileData>>::~CartographicTiledVectorRenderLayer(a1);
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *md::PolygonRenderLayer<(md::MapDataType)59,md::MapTileDataRenderable<md::PolygonTileData>>::layout(uint64_t a1, uint64_t **a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t (***v6)();
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  int8x8_t v12;
  uint8x8_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  _QWORD *v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  _QWORD *v39;
  unint64_t v40;
  _QWORD *v41;
  _BYTE *v42;
  _BYTE *v43;
  uint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *p_shared_owners;
  unint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  _QWORD *v50;
  char *v51;
  uint64_t v52;
  gss::Allocator *v53;
  uint64_t v54;
  __int128 v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  _BYTE *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  int v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  int v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  int v78;
  _QWORD *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  unsigned __int8 *v85;
  unint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  int v90;
  _QWORD *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  unsigned __int8 *v96;
  unint64_t v97;
  uint64_t v98;
  unint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  unsigned __int8 *v103;
  unint64_t v104;
  uint64_t v105;
  int v106;
  uint64_t *v107;
  int8x8_t v108;
  uint8x8_t v109;
  uint64_t v110;
  _QWORD *v111;
  _QWORD *v112;
  uint64_t v113;
  unint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  ggl::CommandBuffer *v118;
  std::__shared_weak_count *v119;
  unint64_t *v120;
  unint64_t v121;
  unint64_t v122;
  unint64_t *v123;
  unint64_t v124;
  unsigned int v125;
  ggl::CommandBuffer *v126;
  uint64_t v127;
  uint64_t v128;
  float32x4_t *v129;
  unsigned __int8 *v130;
  unsigned __int8 *v131;
  uint64_t v132;
  unint64_t *v133;
  unint64_t v134;
  _QWORD *result;
  uint64_t v136;
  _QWORD *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  unint64_t v142;
  unsigned __int8 *v143;
  unint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  float32x4_t v148;
  ggl::CommandBuffer *v149;
  ggl::CommandBuffer *v150;
  char *v151;
  uint64_t v152;
  __int16 v153;
  uint64_t v154;
  char v155;
  _QWORD v156[2];
  __int128 v157;
  __int128 v158;
  uint64_t v159;
  float32x4_t *v160;
  _BYTE v161[24];
  _BYTE *v162;
  _QWORD v163[3];
  _QWORD *v164;
  uint64_t (**v165)();
  uint64_t **v166;
  uint64_t (***v167)();
  _QWORD v168[3];
  _QWORD *v169;
  uint64_t v170;

  v170 = *MEMORY[0x1E0C80C00];
  v165 = &off_1E42CF278;
  v166 = a2;
  v167 = &v165;
  v163[0] = &off_1E42CF230;
  v163[1] = a2;
  v164 = v163;
  v169 = v168;
  v168[0] = &off_1E42CF230;
  v168[1] = a2;
  std::__invoke_void_return_wrapper<void,true>::__call[abi:nn180100]<md::PolygonRenderLayer<(md::MapDataType)59,md::MapTileDataRenderable<md::PolygonTileData>>::layout(md::LayoutContext const&)::{lambda(void)#1} &>((uint64_t)&v166);
  v4 = v164;
  if (v164 == v163)
  {
    v5 = 4;
    v4 = v163;
  }
  else
  {
    if (!v164)
      goto LABEL_6;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_6:
  v6 = v167;
  if (v167 == &v165)
  {
    v7 = 4;
    v6 = &v165;
    goto LABEL_10;
  }
  if (v167)
  {
    v7 = 5;
LABEL_10:
    (*v6)[v7]();
  }
  v8 = mach_absolute_time();
  v9 = *(_QWORD *)(a1 + 272);
  v10 = *(_QWORD *)(a1 + 280);
  v156[0] = v9;
  v156[1] = v10;
  v11 = a2[1];
  v12 = (int8x8_t)v11[1];
  if (!*(_QWORD *)&v12)
  {
    v15 = 0;
    v16 = 0;
    goto LABEL_97;
  }
  v13 = (uint8x8_t)vcnt_s8(v12);
  v13.i16[0] = vaddlv_u8(v13);
  if (v13.u32[0] > 1uLL)
  {
    v14 = 0xE42D19AFCA302E68;
    if (*(_QWORD *)&v12 <= 0xE42D19AFCA302E68)
      v14 = 0xE42D19AFCA302E68 % *(_QWORD *)&v12;
  }
  else
  {
    v14 = (*(_QWORD *)&v12 - 1) & 0xE42D19AFCA302E68;
  }
  v17 = *v11;
  v18 = *(_QWORD **)(v17 + 8 * v14);
  if (!v18)
    goto LABEL_35;
  v19 = (_QWORD *)*v18;
  if (!v19)
    goto LABEL_35;
  if (v13.u32[0] < 2uLL)
  {
    while (1)
    {
      v21 = v19[1];
      if (v21 == 0xE42D19AFCA302E68)
      {
        if (v19[2] == 0xE42D19AFCA302E68)
          goto LABEL_33;
      }
      else if ((v21 & (*(_QWORD *)&v12 - 1)) != v14)
      {
        goto LABEL_35;
      }
      v19 = (_QWORD *)*v19;
      if (!v19)
        goto LABEL_35;
    }
  }
  while (1)
  {
    v20 = v19[1];
    if (v20 == 0xE42D19AFCA302E68)
      break;
    if (v20 >= *(_QWORD *)&v12)
      v20 %= *(_QWORD *)&v12;
    if (v20 != v14)
      goto LABEL_35;
LABEL_22:
    v19 = (_QWORD *)*v19;
    if (!v19)
      goto LABEL_35;
  }
  if (v19[2] != 0xE42D19AFCA302E68)
    goto LABEL_22;
LABEL_33:
  v22 = v19[5];
  if (*(_QWORD *)(v22 + 8) == 0xE42D19AFCA302E68)
  {
    v16 = *(uint64_t **)(v22 + 32);
    goto LABEL_36;
  }
LABEL_35:
  v16 = 0;
LABEL_36:
  if (v13.u32[0] > 1uLL)
  {
    v23 = 0xFD5D5EC7C4E1E43ELL;
    if (*(_QWORD *)&v12 <= 0xFD5D5EC7C4E1E43ELL)
      v23 = 0xFD5D5EC7C4E1E43ELL % *(_QWORD *)&v12;
  }
  else
  {
    v23 = (*(_QWORD *)&v12 - 1) & 0xFD5D5EC7C4E1E43ELL;
  }
  v24 = *(_QWORD **)(v17 + 8 * v23);
  if (!v24)
    goto LABEL_58;
  v25 = (_QWORD *)*v24;
  if (!v25)
    goto LABEL_58;
  if (v13.u32[0] < 2uLL)
  {
    while (1)
    {
      v27 = v25[1];
      if (v27 == 0xFD5D5EC7C4E1E43ELL)
      {
        if (v25[2] == 0xFD5D5EC7C4E1E43ELL)
          goto LABEL_56;
      }
      else if ((v27 & (*(_QWORD *)&v12 - 1)) != v23)
      {
        goto LABEL_58;
      }
      v25 = (_QWORD *)*v25;
      if (!v25)
        goto LABEL_58;
    }
  }
  while (2)
  {
    v26 = v25[1];
    if (v26 != 0xFD5D5EC7C4E1E43ELL)
    {
      if (v26 >= *(_QWORD *)&v12)
        v26 %= *(_QWORD *)&v12;
      if (v26 != v23)
        goto LABEL_58;
      goto LABEL_45;
    }
    if (v25[2] != 0xFD5D5EC7C4E1E43ELL)
    {
LABEL_45:
      v25 = (_QWORD *)*v25;
      if (!v25)
        goto LABEL_58;
      continue;
    }
    break;
  }
LABEL_56:
  v28 = v25[5];
  if (*(_QWORD *)(v28 + 8) == 0xFD5D5EC7C4E1E43ELL)
  {
    v29 = *(_QWORD *)(v28 + 32);
    goto LABEL_59;
  }
LABEL_58:
  v29 = 0;
LABEL_59:
  if (v13.u32[0] > 1uLL)
  {
    v30 = 0x401D4CCE847AB1D1;
    if (*(_QWORD *)&v12 <= 0x401D4CCE847AB1D1uLL)
      v30 = 0x401D4CCE847AB1D1uLL % *(_QWORD *)&v12;
  }
  else
  {
    v30 = (*(_QWORD *)&v12 - 1) & 0x401D4CCE847AB1D1;
  }
  v31 = *(_QWORD **)(v17 + 8 * v30);
  if (!v31)
    goto LABEL_82;
  v32 = (_QWORD *)*v31;
  if (!v32)
    goto LABEL_82;
  if (v13.u32[0] < 2uLL)
  {
    v33 = *(_QWORD *)&v12 - 1;
    while (1)
    {
      v35 = v32[1];
      if (v35 == 0x401D4CCE847AB1D1)
      {
        if (v32[2] == 0x401D4CCE847AB1D1)
          goto LABEL_79;
      }
      else if ((v35 & v33) != v30)
      {
        goto LABEL_82;
      }
      v32 = (_QWORD *)*v32;
      if (!v32)
        goto LABEL_82;
    }
  }
  while (2)
  {
    v34 = v32[1];
    if (v34 != 0x401D4CCE847AB1D1)
    {
      if (v34 >= *(_QWORD *)&v12)
        v34 %= *(_QWORD *)&v12;
      if (v34 != v30)
        goto LABEL_82;
      goto LABEL_68;
    }
    if (v32[2] != 0x401D4CCE847AB1D1)
    {
LABEL_68:
      v32 = (_QWORD *)*v32;
      if (!v32)
        goto LABEL_82;
      continue;
    }
    break;
  }
LABEL_79:
  v36 = v32[5];
  if (*(_QWORD *)(v36 + 8) == 0x401D4CCE847AB1D1)
  {
    v15 = *(_QWORD *)(v36 + 32);
    if (!v29)
      goto LABEL_97;
    goto LABEL_83;
  }
LABEL_82:
  v15 = 0;
  if (!v29)
    goto LABEL_97;
LABEL_83:
  if (*(_BYTE *)(v29 + 312))
  {
    for (; v9 != v10; v9 += 8)
      md::updatePolyonGroupsTransitNodeRouteAttributes(*(int8x8_t **)(*(_QWORD *)v9 + 384), *(_QWORD **)(v29 + 288), v29 + 232);
    v37 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 96) + 1120);
    v38 = *(_QWORD *)(v37 + 16);
    if ((v38 & (v38 - 1)) != 0)
    {
      v40 = 0x1BCA10CB9934FB1BLL;
      if (v38 <= 0x1BCA10CB9934FB1BLL)
        v40 = 0x1BCA10CB9934FB1BLL % v38;
      v39 = *(_QWORD **)(*(_QWORD *)(v37 + 8) + 8 * v40);
      do
      {
        do
          v39 = (_QWORD *)*v39;
        while (v39[1] != 0x1BCA10CB9934FB1BLL);
      }
      while (v39[2] != 0x1BCA10CB9934FB1BLL);
    }
    else
    {
      v39 = *(_QWORD **)(*(_QWORD *)(v37 + 8) + 8 * ((v38 - 1) & 0x1BCA10CB9934FB1BLL));
      do
      {
        do
          v39 = (_QWORD *)*v39;
        while (v39[1] != 0x1BCA10CB9934FB1BLL);
      }
      while (v39[2] != 0x1BCA10CB9934FB1BLL);
    }
    *(_BYTE *)(v39[5] + 544) = 0;
  }
LABEL_97:
  v155 = 0;
  v41 = operator new(0x20uLL);
  *v41 = &off_1E42CF1E8;
  v41[1] = &v155;
  v41[2] = v156;
  v41[3] = a1;
  v162 = v41;
  v42 = (_BYTE *)v16[6];
  v43 = (_BYTE *)v16[7];
  if (v42 == v43)
  {
LABEL_102:
    v44 = 5;
LABEL_104:
    v41 = (_QWORD *)(*(uint64_t (**)(void))(*v41 + 8 * v44))();
    goto LABEL_105;
  }
  do
  {
    LOBYTE(v149) = *v42;
    if (!v162)
      goto LABEL_241;
    (*(void (**)(_BYTE *, ggl::CommandBuffer **))(*(_QWORD *)v162 + 48))(v162, &v149);
    ++v42;
  }
  while (v42 != v43);
  v41 = v162;
  if (v162 == v161)
  {
    v44 = 4;
    v41 = v161;
    goto LABEL_104;
  }
  if (v162)
    goto LABEL_102;
LABEL_105:
  if (v155 || !*(_QWORD *)(a1 + 464))
  {
    v45 = *(std::__shared_weak_count **)(a1 + 472);
    *(_QWORD *)(a1 + 464) = 0;
    *(_QWORD *)(a1 + 472) = 0;
    if (!v45)
      goto LABEL_244;
    p_shared_owners = (unint64_t *)&v45->__shared_owners_;
    do
      v47 = __ldaxr(p_shared_owners);
    while (__stlxr(v47 - 1, p_shared_owners));
    if (!v47)
    {
      ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
      std::__shared_weak_count::__release_weak(v45);
      if (*v16)
      {
LABEL_111:
        v48 = gss::Allocator::instance((gss::Allocator *)v41);
        v49 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v48 + 16))(v48, 16, 4);
        v50 = v49;
        if (v49)
          *v49 = 0x200000005;
        v49[1] = 0x1B00000003;
        v149 = 0;
        v150 = 0;
        v151 = 0;
        v152 = v48;
        v51 = (char *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v48 + 16))(v48, 16, 4);
        v149 = (ggl::CommandBuffer *)v51;
        v151 = v51 + 16;
        if (v51)
          *(_QWORD *)v51 = *v50;
        *((_QWORD *)v51 + 1) = v50[1];
        v150 = (ggl::CommandBuffer *)(v51 + 16);
        gss::FeatureAttributeSet::sort((gss::FeatureAttributeSet *)&v149);
        (*(void (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)v48 + 40))(v48, v50, 16);
        v52 = *v16;
        *(_QWORD *)((char *)&v158 + 7) = 0;
        *(_QWORD *)&v158 = 0;
        HIBYTE(v158) = 1;
        gss::StylesheetManager<gss::PropertyID>::styleQueryForFeatureAttributes((unint64_t *)&v157, v52, (gss::FeatureAttributeSet *)&v149, (gss::QueryOverrides *)&v158);
        if (!BYTE14(v158) && (_QWORD)v158)
        {
          v54 = gss::Allocator::instance(v53);
          (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v54 + 40))(v54, v158, WORD6(v158));
        }
        v55 = v157;
        v157 = 0uLL;
        v56 = *(std::__shared_weak_count **)(a1 + 472);
        *(_OWORD *)(a1 + 464) = v55;
        if (v56)
        {
          v57 = (unint64_t *)&v56->__shared_owners_;
          do
            v58 = __ldaxr(v57);
          while (__stlxr(v58 - 1, v57));
          if (!v58)
          {
            ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
            std::__shared_weak_count::__release_weak(v56);
          }
        }
        v59 = (std::__shared_weak_count *)*((_QWORD *)&v157 + 1);
        if (*((_QWORD *)&v157 + 1))
        {
          v60 = (unint64_t *)(*((_QWORD *)&v157 + 1) + 8);
          do
            v61 = __ldaxr(v60);
          while (__stlxr(v61 - 1, v60));
          if (!v61)
          {
            ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
            std::__shared_weak_count::__release_weak(v59);
          }
        }
        if (v149)
        {
          v150 = v149;
          (*(void (**)(uint64_t, ggl::CommandBuffer *, int64_t))(*(_QWORD *)v152 + 40))(v152, v149, v151 - (char *)v149);
        }
      }
    }
    else
    {
LABEL_244:
      if (*v16)
        goto LABEL_111;
    }
  }
  v62 = *(_QWORD *)(a1 + 352);
  *(_QWORD *)(v62 + 112) = 0;
  *(_QWORD *)(v62 + 120) = 0;
  md::PolygonRenderResources::resetPools(*(md::PolygonRenderResources **)(a1 + 368));
  md::LayoutContext::frameState((md::LayoutContext *)a2);
  *(_BYTE *)(a1 + 384) = *(unsigned __int8 *)(v63 + 128) - 1 < 3;
  if (v15)
  {
    *(_DWORD *)(a1 + 444) = *(_DWORD *)v15;
    *(_WORD *)(a1 + 428) = *(_WORD *)(v15 + 4);
    if (*(_BYTE *)(v15 + 16))
    {
      v64 = *(_QWORD *)(v15 + 8);
      v65 = (char *)operator new(8uLL);
      *(_QWORD *)v65 = v64;
      v66 = *(_BYTE **)(a1 + 392);
      *(_QWORD *)(a1 + 400) = v66;
      std::vector<unsigned long long>::__insert_with_size[abi:nn180100]<std::__wrap_iter<unsigned long long const*>,std::__wrap_iter<unsigned long long const*>>((char **)(a1 + 392), v66, v65, v65 + 8, 1);
      operator delete(v65);
    }
    else
    {
      *(_QWORD *)(a1 + 400) = *(_QWORD *)(a1 + 392);
    }
  }
  v67 = *(_QWORD *)(a1 + 368);
  v68 = *(_QWORD *)(v67 + 872);
  v158 = 0uLL;
  v159 = 0;
  md::PolygonLayoutCharacteristics::commandBufferInfo(&v158, (unsigned __int8 *)(a1 + 376), *(_QWORD **)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 24) + 8));
  v69 = v158;
  v70 = *(__int16 *)(v67 + 896);
  LOBYTE(v149) = 0;
  md::CartographicTiledVectorRenderLayer<md::MapTileDataRenderable<md::PolygonTileData>>::layoutStencilTiles(a1, (md::LayoutContext *)a2, v158, v70, 0, &v149);
  if (v68)
    *(_QWORD *)(v69 + 32) = v68;
  v71 = *(_QWORD *)(a1 + 368);
  v72 = *(_QWORD *)(v71 + 880);
  v158 = 0uLL;
  v159 = 0;
  md::PolygonLayoutCharacteristics::commandBufferInfo(&v158, (unsigned __int8 *)(a1 + 376), *(_QWORD **)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 24) + 8));
  v73 = *((_QWORD *)&v158 + 1);
  v74 = *(__int16 *)(v71 + 898);
  LOBYTE(v149) = 0;
  md::CartographicTiledVectorRenderLayer<md::MapTileDataRenderable<md::PolygonTileData>>::layoutStencilTiles(a1, (md::LayoutContext *)a2, *((uint64_t *)&v158 + 1), v74, 0, &v149);
  if (v72)
    *(_QWORD *)(v73 + 32) = v72;
  v75 = *(_QWORD *)(a1 + 368);
  v76 = *(_QWORD *)(v75 + 888);
  v158 = 0uLL;
  v159 = 0;
  md::PolygonLayoutCharacteristics::commandBufferInfo(&v158, (unsigned __int8 *)(a1 + 376), *(_QWORD **)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 24) + 8));
  v77 = v159;
  v78 = *(__int16 *)(v75 + 900);
  LOBYTE(v149) = 0;
  md::CartographicTiledVectorRenderLayer<md::MapTileDataRenderable<md::PolygonTileData>>::layoutStencilTiles(a1, (md::LayoutContext *)a2, v159, v78, 0, &v149);
  if (v76)
    *(_QWORD *)(v77 + 32) = v76;
  if (*(_BYTE *)(a1 + 424))
  {
    v79 = *(_QWORD **)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 24) + 8);
    v80 = v79[3];
    v81 = v79[4];
    v82 = v81 - v80;
    if (v81 == v80)
      goto LABEL_153;
    v83 = 0;
    v84 = v82 >> 3;
    while (1)
    {
      v85 = *(unsigned __int8 **)(v80 + 8 * v83);
      if (*v85 == *(unsigned __int8 *)(a1 + 422))
      {
        v86 = *((_QWORD *)v85 + 1);
        v87 = v79[15];
        if (v86 < (v79[16] - v87) >> 3)
          break;
      }
      if (++v83 >= v84)
        goto LABEL_153;
    }
    v88 = *(_QWORD *)(v87 + 8 * v86);
    if (!v88
      || (v89 = *(_QWORD *)(*(_QWORD *)(v88 + 24) + 8 * *(unsigned __int8 *)(a1 + 423))) == 0
      || !*(_BYTE *)(a1 + 428)
      || (v90 = *(char *)(*(_QWORD *)(a1 + 368) + 912),
          LOBYTE(v149) = 0,
          md::CartographicTiledVectorRenderLayer<md::MapTileDataRenderable<md::PolygonTileData>>::layoutStencilTiles(a1, (md::LayoutContext *)a2, v89, v90, 0, &v149), *(_QWORD *)(v89 + 32) = *(_QWORD *)(*(_QWORD *)(a1 + 368) + 920), *(_BYTE *)(a1 + 424)))
    {
LABEL_153:
      v91 = *(_QWORD **)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 24) + 8);
      v92 = v91[3];
      v93 = v91[4] - v92;
      if (v93)
      {
        v94 = 0;
        v95 = v93 >> 3;
        while (1)
        {
          v96 = *(unsigned __int8 **)(v92 + 8 * v94);
          if (*v96 == *(unsigned __int8 *)(a1 + 422))
          {
            v97 = *((_QWORD *)v96 + 1);
            v98 = v91[15];
            v99 = (v91[16] - v98) >> 3;
            if (v97 < v99)
              break;
          }
          if (++v94 >= v95)
            goto LABEL_168;
        }
        v100 = *(_QWORD *)(v98 + 8 * v97);
        if (v100)
        {
          v101 = *(_QWORD *)(*(_QWORD *)(v100 + 24) + 8 * *(unsigned __int8 *)(a1 + 423));
          if (v101)
          {
            if (*(_BYTE *)(a1 + 427))
            {
              v102 = 0;
              while (1)
              {
                v103 = *(unsigned __int8 **)(v92 + 8 * v102);
                if (*v103 == *(unsigned __int8 *)(a1 + 425))
                {
                  v104 = *((_QWORD *)v103 + 1);
                  if (v104 < v99)
                    break;
                }
                if (++v102 >= v95)
                  goto LABEL_168;
              }
              v105 = *(_QWORD *)(v98 + 8 * v104);
              if (v105 && *(_QWORD *)(*(_QWORD *)(v105 + 24) + 8 * *(unsigned __int8 *)(a1 + 426)))
              {
                v106 = *(char *)(*(_QWORD *)(a1 + 368) + 936);
                LOBYTE(v149) = 0;
                md::CartographicTiledVectorRenderLayer<md::MapTileDataRenderable<md::PolygonTileData>>::layoutStencilTiles(a1, (md::LayoutContext *)a2, v101, v106, 0, &v149);
                *(_QWORD *)(v101 + 32) = *(_QWORD *)(*(_QWORD *)(a1 + 368) + 944);
              }
            }
          }
        }
      }
    }
  }
LABEL_168:
  *(_QWORD *)(*(_QWORD *)(a1 + 368) + 264) = 0;
  *(_BYTE *)(a1 + 440) = *(_BYTE *)(a1 + 360);
  *(_BYTE *)(a1 + 386) = *(_BYTE *)(a1 + 480);
  if (*(_BYTE *)(a1 + 361))
  {
    v107 = a2[1];
    v108 = (int8x8_t)v107[1];
    if (v108)
    {
      v109 = (uint8x8_t)vcnt_s8(v108);
      v109.i16[0] = vaddlv_u8(v109);
      if (v109.u32[0] > 1uLL)
      {
        v110 = 0x1AF456233693CD46;
        if (*(_QWORD *)&v108 <= 0x1AF456233693CD46uLL)
          v110 = 0x1AF456233693CD46uLL % *(_QWORD *)&v108;
      }
      else
      {
        v110 = (*(_QWORD *)&v108 - 1) & 0x1AF456233693CD46;
      }
      v111 = *(_QWORD **)(*v107 + 8 * v110);
      if (v111)
      {
        v112 = (_QWORD *)*v111;
        if (v112)
        {
          if (v109.u32[0] < 2uLL)
          {
            v113 = *(_QWORD *)&v108 - 1;
            while (1)
            {
              v115 = v112[1];
              if (v115 == 0x1AF456233693CD46)
              {
                if (v112[2] == 0x1AF456233693CD46)
                  goto LABEL_190;
              }
              else if ((v115 & v113) != v110)
              {
                goto LABEL_216;
              }
              v112 = (_QWORD *)*v112;
              if (!v112)
                goto LABEL_216;
            }
          }
          do
          {
            v114 = v112[1];
            if (v114 == 0x1AF456233693CD46)
            {
              if (v112[2] == 0x1AF456233693CD46)
              {
LABEL_190:
                v116 = v112[5];
                if (*(_QWORD *)(v116 + 8) == 0x1AF456233693CD46)
                {
                  v117 = *(_QWORD *)(v116 + 32);
                  if (v117)
                  {
                    v118 = *(ggl::CommandBuffer **)(a1 + 464);
                    v119 = *(std::__shared_weak_count **)(a1 + 472);
                    *(_QWORD *)&v158 = v118;
                    *((_QWORD *)&v158 + 1) = v119;
                    if (v119)
                    {
                      v120 = (unint64_t *)&v119->__shared_owners_;
                      do
                        v121 = __ldxr(v120);
                      while (__stxr(v121 + 1, v120));
                      v150 = (ggl::CommandBuffer *)v119;
                      do
                        v122 = __ldxr(v120);
                      while (__stxr(v122 + 1, v120));
                    }
                    else
                    {
                      v150 = 0;
                    }
                    v151 = 0;
                    v152 = 0;
                    v149 = v118;
                    LOBYTE(v153) = 0;
                    if (v118)
                      LODWORD(v118) = (*(uint64_t (**)(ggl::CommandBuffer *, char **))(*(_QWORD *)v118 + 48))(v118, &v151);
                    LOBYTE(v153) = (_BYTE)v118;
                    if (v119)
                    {
                      v123 = (unint64_t *)&v119->__shared_owners_;
                      do
                        v124 = __ldaxr(v123);
                      while (__stlxr(v124 - 1, v123));
                      if (!v124)
                      {
                        ((void (*)(std::__shared_weak_count *))v119->__on_zero_shared)(v119);
                        std::__shared_weak_count::__release_weak(v119);
                      }
                      LODWORD(v118) = v153;
                    }
                    if ((_DWORD)v118)
                    {
                      if ((int)*(float *)(v117 + 3072) >= 0x17)
                        v125 = 23;
                      else
                        v125 = (int)*(float *)(v117 + 3072);
                      gss::RenderStyle<gss::PropertyID>::valueForKeyAtZ<geo::Color<unsigned short,4,(geo::ColorSpace)0>>((unint64_t *)&v158, *((_QWORD *)v149 + 3), 0x5Cu, v125, 2u, 0);
                      v148 = vmulq_f32(vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)&v158)), (float32x4_t)vdupq_n_s32(0x37800080u));
                      gss::QueryableLocker<gss::PropertyID>::~QueryableLocker((uint64_t)&v149);
                      v126 = *(ggl::CommandBuffer **)(*(_QWORD *)(a1 + 368) + 968);
                      v160 = 0;
                      v158 = 0uLL;
                      v127 = *((_QWORD *)v126 + 1);
                      v149 = 0;
                      v150 = v126;
                      v151 = 0;
                      v152 = v127;
                      v153 = 1;
                      if (v127)
                        v128 = *((_QWORD *)v126 + 9);
                      else
                        v128 = 0;
                      v154 = v128;
                      ggl::BufferMemory::operator=((uint64_t *)&v158, (uint64_t)&v149);
                      ggl::BufferMemory::~BufferMemory((ggl::BufferMemory *)&v149);
                      v129 = v160;
                      v160[4] = v148;
                      *(float32x4_t *)((char *)&v129[5] + 8) = (float32x4_t)xmmword_19FFB3480;
                      v129[5].i32[0] = 1065353216;
                      v129->i32[0] = 1065353216;
                      *(uint64_t *)((char *)&v129->i64[1] + 4) = 0;
                      *(uint64_t *)((char *)v129->i64 + 4) = 0;
                      v129[1].i32[1] = 1065353216;
                      v129[1].i64[1] = 0;
                      v129[2].i64[0] = 0;
                      v129[2].i32[2] = 1065353216;
                      *(uint64_t *)((char *)v129[3].i64 + 4) = 0;
                      *(uint64_t *)((char *)&v129[2].i64[1] + 4) = 0;
                      v129[3].i32[3] = 1065353216;
                      v149 = 0;
                      v150 = 0;
                      v151 = 0;
                      md::PolygonLayoutCharacteristics::commandBufferInfo(&v149, (unsigned __int8 *)(a1 + 376), *(_QWORD **)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 24) + 8));
                      md::PolygonRenderLayer<(md::MapDataType)59,md::MapTileDataRenderable<md::PolygonTileData>>::_layoutPolygonGround(a1, a2[1], v149);
                      ggl::BufferMemory::~BufferMemory((ggl::BufferMemory *)&v158);
                    }
                    else
                    {
                      gss::QueryableLocker<gss::PropertyID>::~QueryableLocker((uint64_t)&v149);
                    }
                  }
                }
                break;
              }
            }
            else
            {
              if (v114 >= *(_QWORD *)&v108)
                v114 %= *(_QWORD *)&v108;
              if (v114 != v110)
                break;
            }
            v112 = (_QWORD *)*v112;
          }
          while (v112);
        }
      }
    }
  }
LABEL_216:
  md::preparePolygonTiles<md::MapTileDataRenderable<md::PolygonTileData>>((uint64_t **)(a1 + 272), a2[1], a1 + 376);
  md::layoutPolygonTiles<md::MapTileDataRenderable<md::PolygonTileData>>(a1 + 272, (uint64_t)a2, *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 368), a1 + 376, *(_BYTE *)(a1 + 448));
  (*(void (**)(ggl::CommandBuffer **__return_ptr, uint64_t, uint64_t **))(*(_QWORD *)a1 + 32))(&v149, a1, a2);
  v130 = (unsigned __int8 *)v149;
  v131 = (unsigned __int8 *)v150;
  if (v149 == v150)
  {
    if (v149)
      goto LABEL_218;
  }
  else
  {
    do
    {
      v137 = *(_QWORD **)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 24) + 8);
      v138 = v137[3];
      v139 = v137[4];
      v140 = v139 - v138;
      if (v139 != v138)
      {
        v141 = 0;
        v142 = v140 >> 3;
        while (1)
        {
          v143 = *(unsigned __int8 **)(v138 + 8 * v141);
          if (*v143 == *v130)
          {
            v144 = *((_QWORD *)v143 + 1);
            v145 = v137[15];
            if (v144 < (v137[16] - v145) >> 3)
              break;
          }
          if (++v141 >= v142)
            goto LABEL_227;
        }
        v146 = *(_QWORD *)(v145 + 8 * v144);
        if (v146)
        {
          v147 = *(_QWORD *)(*(_QWORD *)(v146 + 24) + 8 * v130[1]);
          if (v147)
            ggl::CommandBuffer::stableSortRenderItems(*(__n128 **)(v147 + 72), *(char **)(v147 + 80));
        }
      }
LABEL_227:
      v130 += 2;
    }
    while (v130 != v131);
    v130 = (unsigned __int8 *)v149;
    if (v149)
    {
LABEL_218:
      v150 = (ggl::CommandBuffer *)v130;
      operator delete(v130);
    }
  }
  v132 = mach_absolute_time();
  if (ggl::Performance::Counters::instance(void)::onceToken[0] != -1)
    dispatch_once(ggl::Performance::Counters::instance(void)::onceToken, &__block_literal_global_40952);
  v133 = (unint64_t *)(*(_QWORD *)(ggl::Performance::Counters::instance(void)::counters + 32) + 120);
  do
    v134 = __ldaxr(v133);
  while (__stlxr(v134 + v132 - v8, v133));
  if (!v169)
  {
LABEL_241:
    std::__throw_bad_function_call[abi:nn180100]();
    __break(1u);
  }
  (*(void (**)(_QWORD *))(*v169 + 48))(v169);
  result = v169;
  if (v169 == v168)
  {
    v136 = 4;
    result = v168;
    return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v136))();
  }
  else if (v169)
  {
    v136 = 5;
    return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v136))();
  }
  return result;
}

void sub_19F9381C4(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  v4 = mach_absolute_time();
  if (ggl::Performance::Counters::instance(void)::onceToken[0] != -1)
    dispatch_once(ggl::Performance::Counters::instance(void)::onceToken, &__block_literal_global_40952);
  v5 = (unint64_t *)(*(_QWORD *)(ggl::Performance::Counters::instance(void)::counters + 32) + 120);
  do
    v6 = __ldaxr(v5);
  while (__stlxr(v6 + v4 - v1, v5));
  geo::ScopedFunctions::~ScopedFunctions((geo::ScopedFunctions *)(v2 - 120));
  _Unwind_Resume(a1);
}

uint64_t md::PolygonRenderLayer<(md::MapDataType)59,md::MapTileDataRenderable<md::PolygonTileData>>::reserveStencilRange(uint64_t result, uint64_t a2, unsigned __int8 *a3)
{
  int v3;
  int v4;
  int v5;
  unsigned __int8 *v6;
  int v7;
  unsigned int v8;
  unsigned __int8 *v9;
  int v10;
  unsigned __int8 *v11;
  int v12;
  unsigned int v13;
  unsigned __int8 *v14;
  uint64_t v15;
  int v16;
  unsigned __int8 *v17;
  int v18;
  unsigned int v19;
  unsigned __int8 *v20;

  v3 = *a3;
  if ((*(unsigned __int16 *)(result + 422) | (*(unsigned __int8 *)(result + 424) << 16)) >= 0x10000u
    && v3 == *(_WORD *)(result + 422)
    && a3[1] == HIBYTE(*(_WORD *)(result + 422)))
  {
    v5 = *(unsigned __int8 *)(result + 481);
    v6 = *(unsigned __int8 **)(a2 + 24);
    v7 = *v6;
    v8 = v6[1];
    if (v7 + v5 <= v8)
      v9 = 0;
    else
      v9 = v6 + 4;
    *(_QWORD *)(*(_QWORD *)(result + 368) + 904) = v9;
    if (v7 + v5 > v8)
    {
      v6[1] = v6[2];
      LOBYTE(v7) = 1;
    }
    *v6 = v7 + v5;
    *(_BYTE *)(*(_QWORD *)(result + 368) + 912) = v7 - *(_BYTE *)(result + 48);
    return result;
  }
  if (((*(unsigned __int16 *)(result + 425) | (*(unsigned __int8 *)(result + 427) << 16)) & 0xFF0000) != 0)
  {
    v4 = a3[1];
    if (v3 == *(_WORD *)(result + 425) && v4 == HIBYTE(*(_WORD *)(result + 425)))
    {
      v10 = *(unsigned __int8 *)(result + 481);
      v11 = *(unsigned __int8 **)(a2 + 24);
      v12 = *v11;
      v13 = v11[1];
      if (v12 + v10 <= v13)
        v14 = 0;
      else
        v14 = v11 + 4;
      *(_QWORD *)(*(_QWORD *)(result + 368) + 928) = v14;
      if (v12 + v10 > v13)
      {
        v11[1] = v11[2];
        LOBYTE(v12) = 1;
      }
      *v11 = v12 + v10;
      *(_BYTE *)(*(_QWORD *)(result + 368) + 936) = v12 - *(_BYTE *)(result + 48);
      return result;
    }
  }
  else
  {
    v4 = a3[1];
  }
  if (v3 == *(unsigned __int8 *)(result + 416) && v4 == *(unsigned __int8 *)(result + 417))
  {
    v15 = 0;
  }
  else if (v3 == *(unsigned __int8 *)(result + 418) && v4 == *(unsigned __int8 *)(result + 419))
  {
    v15 = 1;
  }
  else
  {
    if (v3 != *(unsigned __int8 *)(result + 420) || v4 != *(unsigned __int8 *)(result + 421))
      return result;
    v15 = 2;
  }
  v16 = *(unsigned __int8 *)(result + 481);
  v17 = *(unsigned __int8 **)(a2 + 24);
  v18 = *v17;
  v19 = v17[1];
  if (v18 + v16 <= v19)
    v20 = 0;
  else
    v20 = v17 + 4;
  *(_QWORD *)(*(_QWORD *)(result + 368) + 8 * v15 + 872) = v20;
  if (v18 + v16 > v19)
  {
    v17[1] = v17[2];
    LOWORD(v18) = 1;
  }
  *v17 = v18 + v16;
  *(_WORD *)(*(_QWORD *)(result + 368) + 2 * v15 + 896) = v18 - *(unsigned __int8 *)(result + 48);
  return result;
}

void md::PolygonRenderLayer<(md::MapDataType)59,md::MapTileDataRenderable<md::PolygonTileData>>::setActive(uint64_t a1, char a2)
{
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_BYTE *)(a1 + 32) = a2;
  if ((a2 & 1) == 0)
    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
  v3 = *(std::__shared_weak_count **)(a1 + 472);
  *(_QWORD *)(a1 + 464) = 0;
  *(_QWORD *)(a1 + 472) = 0;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

_QWORD *md::PolygonRenderLayer<(md::MapDataType)59,md::MapTileDataRenderable<md::PolygonTileData>>::prune(uint64_t a1)
{
  return md::PolygonRenderResources::prunePools(*(_QWORD **)(a1 + 368));
}

uint64_t md::PolygonRenderLayer<(md::MapDataType)59,md::MapTileDataRenderable<md::PolygonTileData>>::prepare(_BYTE *a1)
{
  uint64_t result;
  char v3;

  result = (*(uint64_t (**)(_BYTE *))(*(_QWORD *)a1 + 104))(a1);
  v3 = a1[49];
  a1[481] = v3 - a1[48] + 2;
  a1[480] = v3 + 1;
  return result;
}

void md::PolygonRenderLayer<(md::MapDataType)59,md::MapTileDataRenderable<md::PolygonTileData>>::renderablesWillEnterView(uint64_t a1, uint64_t a2, uint64_t **a3)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v5;

  v3 = *a3;
  v4 = a3[1];
  if (*a3 != v4)
  {
    do
    {
      v5 = *v3++;
      md::PolygonRenderLayer<(md::MapDataType)59,md::MapTileDataRenderable<md::PolygonTileData>>::updateStyles(*(_QWORD **)(v5 + 384), 1);
    }
    while (v3 != v4);
  }
}

void md::PolygonRenderLayer<(md::MapDataType)59,md::MapTileDataRenderable<md::PolygonTileData>>::featureMarker(uint64_t a1@<X1>, double *a2@<X2>, _QWORD *a3@<X8>)
{
  geo::codec::VectorTile *v3;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  float *v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  __int128 v17;
  unint64_t v18;
  unint64_t *p_shared_weak_owners;
  unint64_t v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  __int128 v25;
  unint64_t v26;

  v3 = *(geo::codec::VectorTile **)(a1 + 640);
  *a3 = 0;
  a3[1] = 0;
  if (v3)
  {
    v7 = geo::codec::VectorTile::polygonsCount(v3);
    if (v7)
    {
      v8 = 0;
      do
      {
        v9 = geo::codec::VectorTile::polygons(*(geo::codec::VectorTile **)(a1 + 640)) + (v8 << 7);
        v10 = *(unsigned int *)(v9 + 100);
        if ((_DWORD)v10)
        {
          v11 = 0;
          while (1)
          {
            v26 = 0;
            v12 = (float *)geo::codec::multiSectionFeaturePoints((_QWORD *)v9, v11, &v26);
            if ((VKPointInPolygon(v12, v26, *a2, a2[1]) & 1) != 0)
              break;
            if (v10 == ++v11)
              goto LABEL_8;
          }
          v14 = (std::__shared_weak_count *)operator new(0x40uLL);
          v15 = v14;
          v14->__shared_owners_ = 0;
          p_shared_owners = (unint64_t *)&v14->__shared_owners_;
          v14->__shared_weak_owners_ = 0;
          v14->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DC2E0;
          v14[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E4298458;
          v14[1].__shared_owners_ = 0;
          v14[1].__shared_weak_owners_ = 0;
          v14[2].__vftable = 0;
          v14[2].__shared_owners_ = v9;
          *(_QWORD *)&v17 = v14 + 1;
          *((_QWORD *)&v17 + 1) = v14;
          do
            v18 = __ldxr(p_shared_owners);
          while (__stxr(v18 + 1, p_shared_owners));
          p_shared_weak_owners = (unint64_t *)&v14->__shared_weak_owners_;
          do
            v20 = __ldxr(p_shared_weak_owners);
          while (__stxr(v20 + 1, p_shared_weak_owners));
          v14[1].__shared_owners_ = (uint64_t)&v14[1];
          v14[1].__shared_weak_owners_ = (uint64_t)v14;
          do
            v21 = __ldaxr(p_shared_owners);
          while (__stlxr(v21 - 1, p_shared_owners));
          if (!v21)
          {
            v25 = v17;
            ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
            std::__shared_weak_count::__release_weak(v15);
            v17 = v25;
          }
          v22 = (std::__shared_weak_count *)a3[1];
          *(_OWORD *)a3 = v17;
          if (v22)
          {
            v23 = (unint64_t *)&v22->__shared_owners_;
            do
              v24 = __ldaxr(v23);
            while (__stlxr(v24 - 1, v23));
            if (!v24)
            {
              ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
              std::__shared_weak_count::__release_weak(v22);
            }
          }
          v13 = *a3;
        }
        else
        {
LABEL_8:
          v13 = 0;
        }
        ++v8;
      }
      while (v8 < v7 && !v13);
    }
  }
}

void sub_19F9388E0(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void md::PolygonRenderLayer<(md::MapDataType)59,md::MapTileDataRenderable<md::PolygonTileData>>::updateStyles(_QWORD *a1, uint64_t a2)
{
  uint64_t **i;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  id v9;

  for (i = (uint64_t **)a1[102]; i; i = (uint64_t **)*i)
  {
    v5 = i[4];
    objc_msgSend(v5, "updateCachedStyles");

  }
  v6 = (uint64_t *)(*(uint64_t (**)(_QWORD *))(*a1 + 48))(a1);
  v8 = *v6;
  v7 = v6[1];
  if (v7 != *v6)
  {
    if (a2 == 1)
    {
      do
      {
        v9 = *(id *)(v8 + 8);
        objc_msgSend(v9, "setNeedsTextureUpdate");

        v8 += 24;
      }
      while (v8 != v7);
    }
    else
    {
      do
        v8 += 24;
      while (v8 != v7);
    }
  }
}

void sub_19F9389A8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void std::__invoke_void_return_wrapper<void,true>::__call[abi:nn180100]<md::PolygonRenderLayer<(md::MapDataType)59,md::MapTileDataRenderable<md::PolygonTileData>>::layout(md::LayoutContext const&)::{lambda(void)#1} &>(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  os_signpost_id_t v4;
  uint8_t v5[16];

  if (GEOGetVectorKitPerformanceLog_onceToken != -1)
    dispatch_once(&GEOGetVectorKitPerformanceLog_onceToken, &__block_literal_global_13_11780);
  v2 = (id)GEOGetVectorKitPerformanceLog_log;
  v3 = v2;
  v4 = *(_QWORD *)(*(_QWORD *)a1 + 80);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)v5 = 0;
    _os_signpost_emit_with_name_impl(&dword_19F029000, v3, OS_SIGNPOST_INTERVAL_BEGIN, v4, "PolygonLayout", (const char *)&unk_1A0189141, v5, 2u);
  }

}

void md::updatePolyonGroupsTransitNodeRouteAttributes(int8x8_t *a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v5;
  int8x8_t v6;
  unint64_t v7;
  uint8x8_t v8;
  unint64_t v9;
  uint64_t ***v10;
  uint64_t **v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  _QWORD *v16;
  int8x8_t v17;
  unint64_t v18;
  uint8x8_t v19;
  unint64_t v20;
  uint64_t ***v21;
  uint64_t **v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t *v25;
  uint64_t *v26;

  if (a2)
  {
    v5 = a2;
    v6 = a1[101];
    if (v6)
    {
LABEL_3:
      v7 = v5[2];
      v8 = (uint8x8_t)vcnt_s8(v6);
      v8.i16[0] = vaddlv_u8(v8);
      if (v8.u32[0] > 1uLL)
      {
        v9 = v5[2];
        if (v7 >= *(_QWORD *)&v6)
          v9 = v7 % *(_QWORD *)&v6;
      }
      else
      {
        v9 = (*(_QWORD *)&v6 - 1) & v7;
      }
      v10 = *(uint64_t ****)(*(_QWORD *)&a1[100] + 8 * v9);
      if (v10)
      {
        v11 = *v10;
        if (v11)
        {
          if (v8.u32[0] < 2uLL)
          {
            v12 = *(_QWORD *)&v6 - 1;
            while (1)
            {
              v14 = v11[1];
              if ((uint64_t *)v7 == v14)
              {
                if (v11[2] == (uint64_t *)v7)
                  goto LABEL_23;
              }
              else if (((unint64_t)v14 & v12) != v9)
              {
                goto LABEL_24;
              }
              v11 = (uint64_t **)*v11;
              if (!v11)
                goto LABEL_24;
            }
          }
          do
          {
            v13 = (unint64_t)v11[1];
            if (v7 == v13)
            {
              if (v11[2] == (uint64_t *)v7)
              {
LABEL_23:
                v15 = v11[4];
                objc_msgSend(v15, "clearRouteAttributes");

                break;
              }
            }
            else
            {
              if (v13 >= *(_QWORD *)&v6)
                v13 %= *(_QWORD *)&v6;
              if (v13 != v9)
                break;
            }
            v11 = (uint64_t **)*v11;
          }
          while (v11);
        }
      }
LABEL_24:
      while (1)
      {
        v5 = (_QWORD *)*v5;
        if (!v5)
          break;
        v6 = a1[101];
        if (v6)
          goto LABEL_3;
      }
    }
    else
    {
      do
        v5 = (_QWORD *)*v5;
      while (v5);
    }
  }
  v16 = *(_QWORD **)(a3 + 16);
  if (v16)
  {
    v17 = a1[101];
    if (v17)
    {
LABEL_30:
      v18 = v16[2];
      v19 = (uint8x8_t)vcnt_s8(v17);
      v19.i16[0] = vaddlv_u8(v19);
      if (v19.u32[0] > 1uLL)
      {
        v20 = v16[2];
        if (v18 >= *(_QWORD *)&v17)
          v20 = v18 % *(_QWORD *)&v17;
      }
      else
      {
        v20 = (*(_QWORD *)&v17 - 1) & v18;
      }
      v21 = *(uint64_t ****)(*(_QWORD *)&a1[100] + 8 * v20);
      if (v21)
      {
        v22 = *v21;
        if (v22)
        {
          if (v19.u32[0] < 2uLL)
          {
            v23 = *(_QWORD *)&v17 - 1;
            while (1)
            {
              v25 = v22[1];
              if ((uint64_t *)v18 == v25)
              {
                if (v22[2] == (uint64_t *)v18)
                  goto LABEL_50;
              }
              else if (((unint64_t)v25 & v23) != v20)
              {
                goto LABEL_51;
              }
              v22 = (uint64_t **)*v22;
              if (!v22)
                goto LABEL_51;
            }
          }
          do
          {
            v24 = (unint64_t)v22[1];
            if (v18 == v24)
            {
              if (v22[2] == (uint64_t *)v18)
              {
LABEL_50:
                v26 = v22[4];
                objc_msgSend(v26, "setRouteAttributes:", v16 + 3);

                break;
              }
            }
            else
            {
              if (v24 >= *(_QWORD *)&v17)
                v24 %= *(_QWORD *)&v17;
              if (v24 != v20)
                break;
            }
            v22 = (uint64_t **)*v22;
          }
          while (v22);
        }
      }
LABEL_51:
      while (1)
      {
        v16 = (_QWORD *)*v16;
        if (!v16)
          break;
        v17 = a1[101];
        if (v17)
          goto LABEL_30;
      }
    }
    else
    {
      do
        v16 = (_QWORD *)*v16;
      while (v16);
    }
  }
}

void sub_19F938CC4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void md::PolygonRenderLayer<(md::MapDataType)59,md::MapTileDataRenderable<md::PolygonTileData>>::_layoutPolygonGround(uint64_t a1, _QWORD *a2, ggl::CommandBuffer *a3)
{
  int8x8_t v3;
  uint64_t v5;
  uint8x8_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  id *v21;
  id v22;
  void *v23;
  unint64_t *p_shared_owners;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  unint64_t *v36;
  unint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t *v45;
  unint64_t v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD *v58;
  uint64_t v59;
  _QWORD *v60;
  int64x2_t v61;
  ggl::CommandBuffer *v62;
  uint64_t v63;
  _QWORD *v64;
  int v65;
  uint64_t v66;
  int v67;
  _QWORD *v68;
  std::__shared_weak_count *v69;

  v3 = (int8x8_t)a2[1];
  if (!*(_QWORD *)&v3)
    return;
  v5 = a1;
  v6 = (uint8x8_t)vcnt_s8(v3);
  v6.i16[0] = vaddlv_u8(v6);
  if (v6.u32[0] > 1uLL)
  {
    v7 = 0x3070CB6B3C7F21D3;
    if (*(_QWORD *)&v3 <= 0x3070CB6B3C7F21D3uLL)
      v7 = 0x3070CB6B3C7F21D3uLL % *(_QWORD *)&v3;
  }
  else
  {
    v7 = (*(_QWORD *)&v3 - 1) & 0x3070CB6B3C7F21D3;
  }
  v8 = *(_QWORD **)(*a2 + 8 * v7);
  if (!v8)
    goto LABEL_24;
  v9 = (_QWORD *)*v8;
  if (!v9)
    goto LABEL_24;
  if (v6.u32[0] < 2uLL)
  {
    while (1)
    {
      v11 = v9[1];
      if (v11 == 0x3070CB6B3C7F21D3)
      {
        if (v9[2] == 0x3070CB6B3C7F21D3)
          goto LABEL_22;
      }
      else if ((v11 & (*(_QWORD *)&v3 - 1)) != v7)
      {
        goto LABEL_24;
      }
      v9 = (_QWORD *)*v9;
      if (!v9)
        goto LABEL_24;
    }
  }
  while (1)
  {
    v10 = v9[1];
    if (v10 == 0x3070CB6B3C7F21D3)
      break;
    if (v10 >= *(_QWORD *)&v3)
      v10 %= *(_QWORD *)&v3;
    if (v10 != v7)
      goto LABEL_24;
LABEL_11:
    v9 = (_QWORD *)*v9;
    if (!v9)
      goto LABEL_24;
  }
  if (v9[2] != 0x3070CB6B3C7F21D3)
    goto LABEL_11;
LABEL_22:
  v12 = v9[5];
  if (*(_QWORD *)(v12 + 8) == 0x3070CB6B3C7F21D3)
  {
    v13 = *(_QWORD *)(v12 + 32);
    goto LABEL_25;
  }
LABEL_24:
  v13 = 0;
LABEL_25:
  if (v6.u32[0] > 1uLL)
  {
    v14 = 0xA60DDA5A69582425;
    if (*(_QWORD *)&v3 <= 0xA60DDA5A69582425)
      v14 = 0xA60DDA5A69582425 % *(_QWORD *)&v3;
  }
  else
  {
    v14 = (*(_QWORD *)&v3 - 1) & 0xA60DDA5A69582425;
  }
  v15 = *(_QWORD **)(*a2 + 8 * v14);
  if (v15)
  {
    v16 = (_QWORD *)*v15;
    if (v16)
    {
      if (v6.u32[0] < 2uLL)
      {
        v17 = *(_QWORD *)&v3 - 1;
        while (1)
        {
          v19 = v16[1];
          if (v19 == 0xA60DDA5A69582425)
          {
            if (v16[2] == 0xA60DDA5A69582425)
              goto LABEL_45;
          }
          else if ((v19 & v17) != v14)
          {
            return;
          }
          v16 = (_QWORD *)*v16;
          if (!v16)
            return;
        }
      }
      do
      {
        v18 = v16[1];
        if (v18 == 0xA60DDA5A69582425)
        {
          if (v16[2] == 0xA60DDA5A69582425)
          {
LABEL_45:
            v20 = v16[5];
            if (*(_QWORD *)(v20 + 8) == 0xA60DDA5A69582425)
            {
              if (v13)
              {
                v21 = *(id **)(v20 + 32);
                if (v21)
                {
                  v65 = *(__int16 *)(*(_QWORD *)(a1 + 368) + 896);
                  v22 = *v21;
                  v23 = v22;
                  v66 = v13;
                  if (v22)
                  {
                    objc_msgSend(v22, "textureManager");
                    v64 = v68;
                    if (v69)
                    {
                      p_shared_owners = (unint64_t *)&v69->__shared_owners_;
                      do
                        v25 = __ldaxr(p_shared_owners);
                      while (__stlxr(v25 - 1, p_shared_owners));
                      if (!v25)
                      {
                        ((void (*)())v69->__on_zero_shared)();
                        std::__shared_weak_count::__release_weak(v69);
                      }
                    }
                  }
                  else
                  {
                    v64 = 0;
                  }

                  v26 = *(_QWORD *)(v5 + 272);
                  v63 = *(_QWORD *)(v5 + 280);
                  if (v26 != v63)
                  {
                    v62 = a3;
                    v61 = vdupq_n_s64(1uLL);
                    do
                    {
                      v27 = *(_QWORD **)v26;
                      v28 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)v26 + 384) + 169);
                      v29 = *(_QWORD *)(v5 + 368);
                      v30 = *(_QWORD *)(v29 + 16 * *(unsigned __int8 *)(v5 + 360) + 280);
                      v31 = ggl::FragmentedPool<ggl::RenderItem>::pop(*(_QWORD *)(v29 + 232));
                      v32 = *(_QWORD **)(v31 + 64);
                      v32[1] = 0;
                      v33 = v27[27];
                      *v32 = v33;
                      v34 = *(_QWORD **)(v31 + 160);
                      v35 = v27[28];
                      if (v35)
                      {
                        v36 = (unint64_t *)(v35 + 8);
                        do
                          v37 = __ldxr(v36);
                        while (__stxr(v37 + 1, v36));
                      }
                      v38 = (std::__shared_weak_count *)v34[1];
                      *v34 = v33;
                      v34[1] = v35;
                      if (v38)
                      {
                        v39 = (unint64_t *)&v38->__shared_owners_;
                        do
                          v40 = __ldaxr(v39);
                        while (__stlxr(v40 - 1, v39));
                        if (!v40)
                        {
                          ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
                          std::__shared_weak_count::__release_weak(v38);
                        }
                      }
                      v41 = *(_QWORD *)(v31 + 64);
                      *(_QWORD *)(v41 + 24) = 0;
                      v42 = v27[29];
                      *(_QWORD *)(v41 + 16) = v42;
                      v43 = *(_QWORD *)(v31 + 160);
                      v44 = v27[30];
                      if (v44)
                      {
                        v45 = (unint64_t *)(v44 + 8);
                        do
                          v46 = __ldxr(v45);
                        while (__stxr(v46 + 1, v45));
                      }
                      v47 = *(std::__shared_weak_count **)(v43 + 24);
                      *(_QWORD *)(v43 + 16) = v42;
                      *(_QWORD *)(v43 + 24) = v44;
                      if (v47)
                      {
                        v48 = (unint64_t *)&v47->__shared_owners_;
                        do
                          v49 = __ldaxr(v48);
                        while (__stlxr(v49 - 1, v48));
                        if (!v49)
                        {
                          ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
                          std::__shared_weak_count::__release_weak(v47);
                        }
                      }
                      **(_QWORD **)(v31 + 96) = *v64;
                      v50 = v27[48];
                      if (v50)
                        v51 = v50 + 168;
                      else
                        v51 = 0;
                      v52 = *(unsigned __int8 *)(v51 + 1);
                      v53 = *(_QWORD *)(v5 + 464);
                      v54 = 128;
                      if (*(unsigned __int8 *)(v66 + 320) - 1 < 3)
                        v54 = 144;
                      v55 = v5;
                      v56 = *(_QWORD *)(v5 + 368);
                      v57 = *(_QWORD *)(v66 + v54);
                      v58 = *(_QWORD **)(v56 + 1072);
                      v59 = v58[1];
                      if (v59 == *(_QWORD *)(v56 + 1080))
                      {
                        v58 = (_QWORD *)*v58;
                        if (!v58)
                        {
                          v58 = malloc_type_malloc(120 * v59 + 16, 0xB644C221uLL);
                          *v58 = 0;
                          v58[1] = 0;
                          **(_QWORD **)(v56 + 1072) = v58;
                        }
                        *(_QWORD *)(v56 + 1072) = v58;
                        v59 = v58[1];
                      }
                      v60 = &v58[15 * v59];
                      v58[1] = v59 + 1;
                      v60[2] = &off_1E42B59B0;
                      v60 += 2;
                      v60[2] = "";
                      v60[3] = v30;
                      v60[4] = v31;
                      *((_DWORD *)v60 + 10) = v28 + v65;
                      v60[6] = (16 * (int)v51) & 0xFF00 | (v52 << 19) | (v53 >> 4) | 0x10000;
                      *((_DWORD *)v60 + 14) = 1065353216;
                      *((_DWORD *)v60 + 15) = v67;
                      *((int64x2_t *)v60 + 6) = v61;
                      v60[14] = 0;
                      v60[8] = v57;
                      *(_OWORD *)(v60 + 9) = 0uLL;
                      v60[11] = 0;
                      v60[12] = 1;
                      ggl::CommandBuffer::pushRenderItem((uint64_t)v62, (ggl::RenderItem *)v60);
                      v5 = v55;
                      v26 += 8;
                    }
                    while (v26 != v63);
                  }
                }
              }
            }
            return;
          }
        }
        else
        {
          if (v18 >= *(_QWORD *)&v3)
            v18 %= *(_QWORD *)&v3;
          if (v18 != v14)
            return;
        }
        v16 = (_QWORD *)*v16;
      }
      while (v16);
    }
  }
}

void sub_19F939238(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void std::__function::__func<md::PolygonRenderLayer<(md::MapDataType)59,md::MapTileDataRenderable<md::PolygonTileData>>::layout(md::LayoutContext const&)::{lambda(md::StyleManagerEvent)#1},std::allocator<md::PolygonRenderLayer<(md::MapDataType)59,md::MapTileDataRenderable<md::PolygonTileData>>::layout(md::LayoutContext const&)::{lambda(md::StyleManagerEvent)#1}>,void ()(md::StyleManagerEvent)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

__n128 std::__function::__func<md::PolygonRenderLayer<(md::MapDataType)59,md::MapTileDataRenderable<md::PolygonTileData>>::layout(md::LayoutContext const&)::{lambda(md::StyleManagerEvent)#1},std::allocator<md::PolygonRenderLayer<(md::MapDataType)59,md::MapTileDataRenderable<md::PolygonTileData>>::layout(md::LayoutContext const&)::{lambda(md::StyleManagerEvent)#1}>,void ()(md::StyleManagerEvent)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_1E42CF1E8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 std::__function::__func<md::PolygonRenderLayer<(md::MapDataType)59,md::MapTileDataRenderable<md::PolygonTileData>>::layout(md::LayoutContext const&)::{lambda(md::StyleManagerEvent)#1},std::allocator<md::PolygonRenderLayer<(md::MapDataType)59,md::MapTileDataRenderable<md::PolygonTileData>>::layout(md::LayoutContext const&)::{lambda(md::StyleManagerEvent)#1}>,void ()(md::StyleManagerEvent)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E42CF1E8;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<md::PolygonRenderLayer<(md::MapDataType)59,md::MapTileDataRenderable<md::PolygonTileData>>::layout(md::LayoutContext const&)::{lambda(md::StyleManagerEvent)#1},std::allocator<md::PolygonRenderLayer<(md::MapDataType)59,md::MapTileDataRenderable<md::PolygonTileData>>::layout(md::LayoutContext const&)::{lambda(md::StyleManagerEvent)#1}>,void ()(md::StyleManagerEvent)>::operator()(uint64_t a1, _BYTE *a2)
{
  uint64_t **v2;
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t **v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t **v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t **v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t **v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t v21;

  switch(*a2)
  {
    case 0:
      v2 = *(uint64_t ***)(a1 + 16);
      **(_BYTE **)(a1 + 8) = 1;
      v3 = *v2;
      v4 = v2[1];
      if (*v2 != v4)
      {
        do
        {
          v5 = *v3++;
          md::PolygonRenderLayer<(md::MapDataType)59,md::MapTileDataRenderable<md::PolygonTileData>>::updateStyles(*(_QWORD **)(v5 + 384), 1);
        }
        while (v3 != v4);
      }
      break;
    case 1:
      v6 = *(uint64_t ***)(a1 + 16);
      **(_BYTE **)(a1 + 8) = 1;
      v7 = *v6;
      v8 = v6[1];
      if (*v6 != v8)
      {
        do
        {
          v9 = *v7++;
          md::PolygonRenderLayer<(md::MapDataType)59,md::MapTileDataRenderable<md::PolygonTileData>>::updateStyles(*(_QWORD **)(v9 + 384), 1);
        }
        while (v7 != v8);
      }
      break;
    case 2:
      v10 = *(uint64_t ***)(a1 + 16);
      v11 = *v10;
      v12 = v10[1];
      if (*v10 != v12)
      {
        do
        {
          v13 = *v11++;
          md::PolygonRenderLayer<(md::MapDataType)59,md::MapTileDataRenderable<md::PolygonTileData>>::updateStyles(*(_QWORD **)(v13 + 384), 0);
        }
        while (v11 != v12);
      }
      break;
    case 3:
      v14 = *(uint64_t ***)(a1 + 16);
      v15 = *v14;
      v16 = v14[1];
      if (*v14 != v16)
      {
        do
        {
          v17 = *v15++;
          md::PolygonRenderLayer<(md::MapDataType)59,md::MapTileDataRenderable<md::PolygonTileData>>::updateStyles(*(_QWORD **)(v17 + 384), 1);
        }
        while (v15 != v16);
      }
      break;
    case 4:
      v18 = *(uint64_t ***)(a1 + 16);
      v19 = *v18;
      v20 = v18[1];
      if (*v18 != v20)
      {
        do
        {
          v21 = *v19++;
          md::PolygonRenderLayer<(md::MapDataType)59,md::MapTileDataRenderable<md::PolygonTileData>>::updateStyles(*(_QWORD **)(v21 + 384), 1);
        }
        while (v19 != v20);
      }
      break;
    default:
      return;
  }
}

void std::__function::__func<md::PolygonRenderLayer<(md::MapDataType)59,md::MapTileDataRenderable<md::PolygonTileData>>::layout(md::LayoutContext const&)::{lambda(void)#2},std::allocator<md::PolygonRenderLayer<(md::MapDataType)59,md::MapTileDataRenderable<md::PolygonTileData>>::layout(md::LayoutContext const&)::{lambda(void)#2}>,void ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::PolygonRenderLayer<(md::MapDataType)59,md::MapTileDataRenderable<md::PolygonTileData>>::layout(md::LayoutContext const&)::{lambda(void)#2},std::allocator<md::PolygonRenderLayer<(md::MapDataType)59,md::MapTileDataRenderable<md::PolygonTileData>>::layout(md::LayoutContext const&)::{lambda(void)#2}>,void ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42CF230;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<md::PolygonRenderLayer<(md::MapDataType)59,md::MapTileDataRenderable<md::PolygonTileData>>::layout(md::LayoutContext const&)::{lambda(void)#2},std::allocator<md::PolygonRenderLayer<(md::MapDataType)59,md::MapTileDataRenderable<md::PolygonTileData>>::layout(md::LayoutContext const&)::{lambda(void)#2}>,void ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42CF230;
  a2[1] = v2;
  return result;
}

void std::__function::__func<md::PolygonRenderLayer<(md::MapDataType)59,md::MapTileDataRenderable<md::PolygonTileData>>::layout(md::LayoutContext const&)::{lambda(void)#2},std::allocator<md::PolygonRenderLayer<(md::MapDataType)59,md::MapTileDataRenderable<md::PolygonTileData>>::layout(md::LayoutContext const&)::{lambda(void)#2}>,void ()(void)>::operator()(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  os_signpost_id_t v4;
  uint8_t v5[16];

  if (GEOGetVectorKitPerformanceLog_onceToken != -1)
    dispatch_once(&GEOGetVectorKitPerformanceLog_onceToken, &__block_literal_global_13_11780);
  v2 = (id)GEOGetVectorKitPerformanceLog_log;
  v3 = v2;
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 80);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)v5 = 0;
    _os_signpost_emit_with_name_impl(&dword_19F029000, v3, OS_SIGNPOST_INTERVAL_END, v4, "PolygonLayout", (const char *)&unk_1A0189141, v5, 2u);
  }

}

void std::__function::__func<md::PolygonRenderLayer<(md::MapDataType)59,md::MapTileDataRenderable<md::PolygonTileData>>::layout(md::LayoutContext const&)::{lambda(void)#1},std::allocator<md::PolygonRenderLayer<(md::MapDataType)59,md::MapTileDataRenderable<md::PolygonTileData>>::layout(md::LayoutContext const&)::{lambda(void)#1}>,void ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::PolygonRenderLayer<(md::MapDataType)59,md::MapTileDataRenderable<md::PolygonTileData>>::layout(md::LayoutContext const&)::{lambda(void)#1},std::allocator<md::PolygonRenderLayer<(md::MapDataType)59,md::MapTileDataRenderable<md::PolygonTileData>>::layout(md::LayoutContext const&)::{lambda(void)#1}>,void ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42CF278;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<md::PolygonRenderLayer<(md::MapDataType)59,md::MapTileDataRenderable<md::PolygonTileData>>::layout(md::LayoutContext const&)::{lambda(void)#1},std::allocator<md::PolygonRenderLayer<(md::MapDataType)59,md::MapTileDataRenderable<md::PolygonTileData>>::layout(md::LayoutContext const&)::{lambda(void)#1}>,void ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42CF278;
  a2[1] = v2;
  return result;
}

void std::__function::__func<md::PolygonRenderLayer<(md::MapDataType)59,md::MapTileDataRenderable<md::PolygonTileData>>::layout(md::LayoutContext const&)::{lambda(void)#1},std::allocator<md::PolygonRenderLayer<(md::MapDataType)59,md::MapTileDataRenderable<md::PolygonTileData>>::layout(md::LayoutContext const&)::{lambda(void)#1}>,void ()(void)>::operator()(uint64_t a1)
{
  std::__invoke_void_return_wrapper<void,true>::__call[abi:nn180100]<md::PolygonRenderLayer<(md::MapDataType)59,md::MapTileDataRenderable<md::PolygonTileData>>::layout(md::LayoutContext const&)::{lambda(void)#1} &>(a1 + 8);
}

uint64_t md::PolygonRenderLayer<(md::MapDataType)41,md::MapTileDataRenderable<md::PolygonTileData>>::~PolygonRenderLayer(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  void *v5;
  md::PolygonRenderResources *v6;

  *a1 = &off_1E4295B98;
  v2 = (std::__shared_weak_count *)a1[59];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  a1[47] = off_1E42A5CF8;
  v5 = (void *)a1[49];
  if (v5)
  {
    a1[50] = v5;
    operator delete(v5);
  }
  v6 = (md::PolygonRenderResources *)a1[46];
  a1[46] = 0;
  if (v6)
  {
    md::PolygonRenderResources::~PolygonRenderResources(v6);
    MEMORY[0x1A1AF4E00]();
  }
  return md::CartographicTiledVectorRenderLayer<md::MapTileDataRenderable<md::PolygonTileData>>::~CartographicTiledVectorRenderLayer(a1);
}

_QWORD *md::PolygonRenderLayer<(md::MapDataType)41,md::MapTileDataRenderable<md::PolygonTileData>>::prune(uint64_t a1)
{
  return md::PolygonRenderResources::prunePools(*(_QWORD **)(a1 + 368));
}

void md::PolygonRenderLayer<(md::MapDataType)41,md::MapTileDataRenderable<md::PolygonTileData>>::featureMarker(uint64_t a1@<X1>, double *a2@<X2>, _QWORD *a3@<X8>)
{
  geo::codec::VectorTile *v3;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  float *v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  __int128 v17;
  unint64_t v18;
  unint64_t *p_shared_weak_owners;
  unint64_t v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  __int128 v25;
  unint64_t v26;

  v3 = *(geo::codec::VectorTile **)(a1 + 640);
  *a3 = 0;
  a3[1] = 0;
  if (v3)
  {
    v7 = geo::codec::VectorTile::polygonsCount(v3);
    if (v7)
    {
      v8 = 0;
      do
      {
        v9 = geo::codec::VectorTile::polygons(*(geo::codec::VectorTile **)(a1 + 640)) + (v8 << 7);
        v10 = *(unsigned int *)(v9 + 100);
        if ((_DWORD)v10)
        {
          v11 = 0;
          while (1)
          {
            v26 = 0;
            v12 = (float *)geo::codec::multiSectionFeaturePoints((_QWORD *)v9, v11, &v26);
            if ((VKPointInPolygon(v12, v26, *a2, a2[1]) & 1) != 0)
              break;
            if (v10 == ++v11)
              goto LABEL_8;
          }
          v14 = (std::__shared_weak_count *)operator new(0x40uLL);
          v15 = v14;
          v14->__shared_owners_ = 0;
          p_shared_owners = (unint64_t *)&v14->__shared_owners_;
          v14->__shared_weak_owners_ = 0;
          v14->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DC2E0;
          v14[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E4298458;
          v14[1].__shared_owners_ = 0;
          v14[1].__shared_weak_owners_ = 0;
          v14[2].__vftable = 0;
          v14[2].__shared_owners_ = v9;
          *(_QWORD *)&v17 = v14 + 1;
          *((_QWORD *)&v17 + 1) = v14;
          do
            v18 = __ldxr(p_shared_owners);
          while (__stxr(v18 + 1, p_shared_owners));
          p_shared_weak_owners = (unint64_t *)&v14->__shared_weak_owners_;
          do
            v20 = __ldxr(p_shared_weak_owners);
          while (__stxr(v20 + 1, p_shared_weak_owners));
          v14[1].__shared_owners_ = (uint64_t)&v14[1];
          v14[1].__shared_weak_owners_ = (uint64_t)v14;
          do
            v21 = __ldaxr(p_shared_owners);
          while (__stlxr(v21 - 1, p_shared_owners));
          if (!v21)
          {
            v25 = v17;
            ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
            std::__shared_weak_count::__release_weak(v15);
            v17 = v25;
          }
          v22 = (std::__shared_weak_count *)a3[1];
          *(_OWORD *)a3 = v17;
          if (v22)
          {
            v23 = (unint64_t *)&v22->__shared_owners_;
            do
              v24 = __ldaxr(v23);
            while (__stlxr(v24 - 1, v23));
            if (!v24)
            {
              ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
              std::__shared_weak_count::__release_weak(v22);
            }
          }
          v13 = *a3;
        }
        else
        {
LABEL_8:
          v13 = 0;
        }
        ++v8;
      }
      while (v8 < v7 && !v13);
    }
  }
}

void sub_19F9397D4(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void md::PolygonRenderLayer<(md::MapDataType)41,md::MapTileDataRenderable<md::PolygonTileData>>::updateStyles(_QWORD *a1, uint64_t a2)
{
  uint64_t **i;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  id v9;

  for (i = (uint64_t **)a1[102]; i; i = (uint64_t **)*i)
  {
    v5 = i[4];
    objc_msgSend(v5, "updateCachedStyles");

  }
  v6 = (uint64_t *)(*(uint64_t (**)(_QWORD *))(*a1 + 48))(a1);
  v8 = *v6;
  v7 = v6[1];
  if (v7 != *v6)
  {
    if (a2 == 1)
    {
      do
      {
        v9 = *(id *)(v8 + 8);
        objc_msgSend(v9, "setNeedsTextureUpdate");

        v8 += 24;
      }
      while (v8 != v7);
    }
    else
    {
      do
        v8 += 24;
      while (v8 != v7);
    }
  }
}

void sub_19F93989C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void md::PolygonRenderLayer<(md::MapDataType)41,md::MapTileDataRenderable<md::PolygonTileData>>::_layoutPolygonGround(uint64_t a1, _QWORD *a2, ggl::CommandBuffer *a3)
{
  int8x8_t v3;
  uint64_t v5;
  uint8x8_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  id *v21;
  id v22;
  void *v23;
  unint64_t *p_shared_owners;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  unint64_t *v36;
  unint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t *v45;
  unint64_t v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD *v58;
  uint64_t v59;
  _QWORD *v60;
  int64x2_t v61;
  ggl::CommandBuffer *v62;
  uint64_t v63;
  _QWORD *v64;
  int v65;
  uint64_t v66;
  int v67;
  _QWORD *v68;
  std::__shared_weak_count *v69;

  v3 = (int8x8_t)a2[1];
  if (!*(_QWORD *)&v3)
    return;
  v5 = a1;
  v6 = (uint8x8_t)vcnt_s8(v3);
  v6.i16[0] = vaddlv_u8(v6);
  if (v6.u32[0] > 1uLL)
  {
    v7 = 0x3070CB6B3C7F21D3;
    if (*(_QWORD *)&v3 <= 0x3070CB6B3C7F21D3uLL)
      v7 = 0x3070CB6B3C7F21D3uLL % *(_QWORD *)&v3;
  }
  else
  {
    v7 = (*(_QWORD *)&v3 - 1) & 0x3070CB6B3C7F21D3;
  }
  v8 = *(_QWORD **)(*a2 + 8 * v7);
  if (!v8)
    goto LABEL_24;
  v9 = (_QWORD *)*v8;
  if (!v9)
    goto LABEL_24;
  if (v6.u32[0] < 2uLL)
  {
    while (1)
    {
      v11 = v9[1];
      if (v11 == 0x3070CB6B3C7F21D3)
      {
        if (v9[2] == 0x3070CB6B3C7F21D3)
          goto LABEL_22;
      }
      else if ((v11 & (*(_QWORD *)&v3 - 1)) != v7)
      {
        goto LABEL_24;
      }
      v9 = (_QWORD *)*v9;
      if (!v9)
        goto LABEL_24;
    }
  }
  while (1)
  {
    v10 = v9[1];
    if (v10 == 0x3070CB6B3C7F21D3)
      break;
    if (v10 >= *(_QWORD *)&v3)
      v10 %= *(_QWORD *)&v3;
    if (v10 != v7)
      goto LABEL_24;
LABEL_11:
    v9 = (_QWORD *)*v9;
    if (!v9)
      goto LABEL_24;
  }
  if (v9[2] != 0x3070CB6B3C7F21D3)
    goto LABEL_11;
LABEL_22:
  v12 = v9[5];
  if (*(_QWORD *)(v12 + 8) == 0x3070CB6B3C7F21D3)
  {
    v13 = *(_QWORD *)(v12 + 32);
    goto LABEL_25;
  }
LABEL_24:
  v13 = 0;
LABEL_25:
  if (v6.u32[0] > 1uLL)
  {
    v14 = 0xA60DDA5A69582425;
    if (*(_QWORD *)&v3 <= 0xA60DDA5A69582425)
      v14 = 0xA60DDA5A69582425 % *(_QWORD *)&v3;
  }
  else
  {
    v14 = (*(_QWORD *)&v3 - 1) & 0xA60DDA5A69582425;
  }
  v15 = *(_QWORD **)(*a2 + 8 * v14);
  if (v15)
  {
    v16 = (_QWORD *)*v15;
    if (v16)
    {
      if (v6.u32[0] < 2uLL)
      {
        v17 = *(_QWORD *)&v3 - 1;
        while (1)
        {
          v19 = v16[1];
          if (v19 == 0xA60DDA5A69582425)
          {
            if (v16[2] == 0xA60DDA5A69582425)
              goto LABEL_45;
          }
          else if ((v19 & v17) != v14)
          {
            return;
          }
          v16 = (_QWORD *)*v16;
          if (!v16)
            return;
        }
      }
      do
      {
        v18 = v16[1];
        if (v18 == 0xA60DDA5A69582425)
        {
          if (v16[2] == 0xA60DDA5A69582425)
          {
LABEL_45:
            v20 = v16[5];
            if (*(_QWORD *)(v20 + 8) == 0xA60DDA5A69582425)
            {
              if (v13)
              {
                v21 = *(id **)(v20 + 32);
                if (v21)
                {
                  v65 = *(__int16 *)(*(_QWORD *)(a1 + 368) + 896);
                  v22 = *v21;
                  v23 = v22;
                  v66 = v13;
                  if (v22)
                  {
                    objc_msgSend(v22, "textureManager");
                    v64 = v68;
                    if (v69)
                    {
                      p_shared_owners = (unint64_t *)&v69->__shared_owners_;
                      do
                        v25 = __ldaxr(p_shared_owners);
                      while (__stlxr(v25 - 1, p_shared_owners));
                      if (!v25)
                      {
                        ((void (*)())v69->__on_zero_shared)();
                        std::__shared_weak_count::__release_weak(v69);
                      }
                    }
                  }
                  else
                  {
                    v64 = 0;
                  }

                  v26 = *(_QWORD *)(v5 + 272);
                  v63 = *(_QWORD *)(v5 + 280);
                  if (v26 != v63)
                  {
                    v62 = a3;
                    v61 = vdupq_n_s64(1uLL);
                    do
                    {
                      v27 = *(_QWORD **)v26;
                      v28 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)v26 + 384) + 169);
                      v29 = *(_QWORD *)(v5 + 368);
                      v30 = *(_QWORD *)(v29 + 16 * *(unsigned __int8 *)(v5 + 360) + 280);
                      v31 = ggl::FragmentedPool<ggl::RenderItem>::pop(*(_QWORD *)(v29 + 232));
                      v32 = *(_QWORD **)(v31 + 64);
                      v32[1] = 0;
                      v33 = v27[27];
                      *v32 = v33;
                      v34 = *(_QWORD **)(v31 + 160);
                      v35 = v27[28];
                      if (v35)
                      {
                        v36 = (unint64_t *)(v35 + 8);
                        do
                          v37 = __ldxr(v36);
                        while (__stxr(v37 + 1, v36));
                      }
                      v38 = (std::__shared_weak_count *)v34[1];
                      *v34 = v33;
                      v34[1] = v35;
                      if (v38)
                      {
                        v39 = (unint64_t *)&v38->__shared_owners_;
                        do
                          v40 = __ldaxr(v39);
                        while (__stlxr(v40 - 1, v39));
                        if (!v40)
                        {
                          ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
                          std::__shared_weak_count::__release_weak(v38);
                        }
                      }
                      v41 = *(_QWORD *)(v31 + 64);
                      *(_QWORD *)(v41 + 24) = 0;
                      v42 = v27[29];
                      *(_QWORD *)(v41 + 16) = v42;
                      v43 = *(_QWORD *)(v31 + 160);
                      v44 = v27[30];
                      if (v44)
                      {
                        v45 = (unint64_t *)(v44 + 8);
                        do
                          v46 = __ldxr(v45);
                        while (__stxr(v46 + 1, v45));
                      }
                      v47 = *(std::__shared_weak_count **)(v43 + 24);
                      *(_QWORD *)(v43 + 16) = v42;
                      *(_QWORD *)(v43 + 24) = v44;
                      if (v47)
                      {
                        v48 = (unint64_t *)&v47->__shared_owners_;
                        do
                          v49 = __ldaxr(v48);
                        while (__stlxr(v49 - 1, v48));
                        if (!v49)
                        {
                          ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
                          std::__shared_weak_count::__release_weak(v47);
                        }
                      }
                      **(_QWORD **)(v31 + 96) = *v64;
                      v50 = v27[48];
                      if (v50)
                        v51 = v50 + 168;
                      else
                        v51 = 0;
                      v52 = *(unsigned __int8 *)(v51 + 1);
                      v53 = *(_QWORD *)(v5 + 464);
                      v54 = 128;
                      if (*(unsigned __int8 *)(v66 + 320) - 1 < 3)
                        v54 = 144;
                      v55 = v5;
                      v56 = *(_QWORD *)(v5 + 368);
                      v57 = *(_QWORD *)(v66 + v54);
                      v58 = *(_QWORD **)(v56 + 1072);
                      v59 = v58[1];
                      if (v59 == *(_QWORD *)(v56 + 1080))
                      {
                        v58 = (_QWORD *)*v58;
                        if (!v58)
                        {
                          v58 = malloc_type_malloc(120 * v59 + 16, 0xB644C221uLL);
                          *v58 = 0;
                          v58[1] = 0;
                          **(_QWORD **)(v56 + 1072) = v58;
                        }
                        *(_QWORD *)(v56 + 1072) = v58;
                        v59 = v58[1];
                      }
                      v60 = &v58[15 * v59];
                      v58[1] = v59 + 1;
                      v60[2] = &off_1E42B59B0;
                      v60 += 2;
                      v60[2] = "";
                      v60[3] = v30;
                      v60[4] = v31;
                      *((_DWORD *)v60 + 10) = v28 + v65;
                      v60[6] = (16 * (int)v51) & 0xFF00 | (v52 << 19) | (v53 >> 4) | 0x10000;
                      *((_DWORD *)v60 + 14) = 1065353216;
                      *((_DWORD *)v60 + 15) = v67;
                      *((int64x2_t *)v60 + 6) = v61;
                      v60[14] = 0;
                      v60[8] = v57;
                      *(_OWORD *)(v60 + 9) = 0uLL;
                      v60[11] = 0;
                      v60[12] = 1;
                      ggl::CommandBuffer::pushRenderItem((uint64_t)v62, (ggl::RenderItem *)v60);
                      v5 = v55;
                      v26 += 8;
                    }
                    while (v26 != v63);
                  }
                }
              }
            }
            return;
          }
        }
        else
        {
          if (v18 >= *(_QWORD *)&v3)
            v18 %= *(_QWORD *)&v3;
          if (v18 != v14)
            return;
        }
        v16 = (_QWORD *)*v16;
      }
      while (v16);
    }
  }
}

void sub_19F939E18(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void std::__function::__func<md::PolygonRenderLayer<(md::MapDataType)41,md::MapTileDataRenderable<md::PolygonTileData>>::layout(md::LayoutContext const&)::{lambda(md::StyleManagerEvent)#1},std::allocator<md::PolygonRenderLayer<(md::MapDataType)41,md::MapTileDataRenderable<md::PolygonTileData>>::layout(md::LayoutContext const&)::{lambda(md::StyleManagerEvent)#1}>,void ()(md::StyleManagerEvent)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

__n128 std::__function::__func<md::PolygonRenderLayer<(md::MapDataType)41,md::MapTileDataRenderable<md::PolygonTileData>>::layout(md::LayoutContext const&)::{lambda(md::StyleManagerEvent)#1},std::allocator<md::PolygonRenderLayer<(md::MapDataType)41,md::MapTileDataRenderable<md::PolygonTileData>>::layout(md::LayoutContext const&)::{lambda(md::StyleManagerEvent)#1}>,void ()(md::StyleManagerEvent)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_1E42CF110;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 std::__function::__func<md::PolygonRenderLayer<(md::MapDataType)41,md::MapTileDataRenderable<md::PolygonTileData>>::layout(md::LayoutContext const&)::{lambda(md::StyleManagerEvent)#1},std::allocator<md::PolygonRenderLayer<(md::MapDataType)41,md::MapTileDataRenderable<md::PolygonTileData>>::layout(md::LayoutContext const&)::{lambda(md::StyleManagerEvent)#1}>,void ()(md::StyleManagerEvent)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E42CF110;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<md::PolygonRenderLayer<(md::MapDataType)41,md::MapTileDataRenderable<md::PolygonTileData>>::layout(md::LayoutContext const&)::{lambda(void)#2},std::allocator<md::PolygonRenderLayer<(md::MapDataType)41,md::MapTileDataRenderable<md::PolygonTileData>>::layout(md::LayoutContext const&)::{lambda(void)#2}>,void ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::PolygonRenderLayer<(md::MapDataType)41,md::MapTileDataRenderable<md::PolygonTileData>>::layout(md::LayoutContext const&)::{lambda(void)#2},std::allocator<md::PolygonRenderLayer<(md::MapDataType)41,md::MapTileDataRenderable<md::PolygonTileData>>::layout(md::LayoutContext const&)::{lambda(void)#2}>,void ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42CF158;
  result[1] = v3;
  return result;
}

void std::__function::__func<md::PolygonRenderLayer<(md::MapDataType)41,md::MapTileDataRenderable<md::PolygonTileData>>::layout(md::LayoutContext const&)::{lambda(void)#1},std::allocator<md::PolygonRenderLayer<(md::MapDataType)41,md::MapTileDataRenderable<md::PolygonTileData>>::layout(md::LayoutContext const&)::{lambda(void)#1}>,void ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::PolygonRenderLayer<(md::MapDataType)41,md::MapTileDataRenderable<md::PolygonTileData>>::layout(md::LayoutContext const&)::{lambda(void)#1},std::allocator<md::PolygonRenderLayer<(md::MapDataType)41,md::MapTileDataRenderable<md::PolygonTileData>>::layout(md::LayoutContext const&)::{lambda(void)#1}>,void ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42CF1A0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<md::PolygonRenderLayer<(md::MapDataType)41,md::MapTileDataRenderable<md::PolygonTileData>>::layout(md::LayoutContext const&)::{lambda(void)#1},std::allocator<md::PolygonRenderLayer<(md::MapDataType)41,md::MapTileDataRenderable<md::PolygonTileData>>::layout(md::LayoutContext const&)::{lambda(void)#1}>,void ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42CF1A0;
  a2[1] = v2;
  return result;
}

uint64_t md::PolygonRenderLayer<(md::MapDataType)1,md::MapTileDataRenderable<md::PolygonTileData>>::~PolygonRenderLayer(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  void *v5;
  md::PolygonRenderResources *v6;

  *a1 = &off_1E4295AB0;
  v2 = (std::__shared_weak_count *)a1[59];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  a1[47] = off_1E42A5CF8;
  v5 = (void *)a1[49];
  if (v5)
  {
    a1[50] = v5;
    operator delete(v5);
  }
  v6 = (md::PolygonRenderResources *)a1[46];
  a1[46] = 0;
  if (v6)
  {
    md::PolygonRenderResources::~PolygonRenderResources(v6);
    MEMORY[0x1A1AF4E00]();
  }
  return md::CartographicTiledVectorRenderLayer<md::MapTileDataRenderable<md::PolygonTileData>>::~CartographicTiledVectorRenderLayer(a1);
}

_QWORD *md::PolygonRenderLayer<(md::MapDataType)1,md::MapTileDataRenderable<md::PolygonTileData>>::prune(uint64_t a1)
{
  return md::PolygonRenderResources::prunePools(*(_QWORD **)(a1 + 368));
}

void md::PolygonRenderLayer<(md::MapDataType)1,md::MapTileDataRenderable<md::PolygonTileData>>::featureMarker(uint64_t a1@<X1>, double *a2@<X2>, _QWORD *a3@<X8>)
{
  geo::codec::VectorTile *v3;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  float *v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  __int128 v17;
  unint64_t v18;
  unint64_t *p_shared_weak_owners;
  unint64_t v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  __int128 v25;
  unint64_t v26;

  v3 = *(geo::codec::VectorTile **)(a1 + 640);
  *a3 = 0;
  a3[1] = 0;
  if (v3)
  {
    v7 = geo::codec::VectorTile::polygonsCount(v3);
    if (v7)
    {
      v8 = 0;
      do
      {
        v9 = geo::codec::VectorTile::polygons(*(geo::codec::VectorTile **)(a1 + 640)) + (v8 << 7);
        v10 = *(unsigned int *)(v9 + 100);
        if ((_DWORD)v10)
        {
          v11 = 0;
          while (1)
          {
            v26 = 0;
            v12 = (float *)geo::codec::multiSectionFeaturePoints((_QWORD *)v9, v11, &v26);
            if ((VKPointInPolygon(v12, v26, *a2, a2[1]) & 1) != 0)
              break;
            if (v10 == ++v11)
              goto LABEL_8;
          }
          v14 = (std::__shared_weak_count *)operator new(0x40uLL);
          v15 = v14;
          v14->__shared_owners_ = 0;
          p_shared_owners = (unint64_t *)&v14->__shared_owners_;
          v14->__shared_weak_owners_ = 0;
          v14->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DC2E0;
          v14[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E4298458;
          v14[1].__shared_owners_ = 0;
          v14[1].__shared_weak_owners_ = 0;
          v14[2].__vftable = 0;
          v14[2].__shared_owners_ = v9;
          *(_QWORD *)&v17 = v14 + 1;
          *((_QWORD *)&v17 + 1) = v14;
          do
            v18 = __ldxr(p_shared_owners);
          while (__stxr(v18 + 1, p_shared_owners));
          p_shared_weak_owners = (unint64_t *)&v14->__shared_weak_owners_;
          do
            v20 = __ldxr(p_shared_weak_owners);
          while (__stxr(v20 + 1, p_shared_weak_owners));
          v14[1].__shared_owners_ = (uint64_t)&v14[1];
          v14[1].__shared_weak_owners_ = (uint64_t)v14;
          do
            v21 = __ldaxr(p_shared_owners);
          while (__stlxr(v21 - 1, p_shared_owners));
          if (!v21)
          {
            v25 = v17;
            ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
            std::__shared_weak_count::__release_weak(v15);
            v17 = v25;
          }
          v22 = (std::__shared_weak_count *)a3[1];
          *(_OWORD *)a3 = v17;
          if (v22)
          {
            v23 = (unint64_t *)&v22->__shared_owners_;
            do
              v24 = __ldaxr(v23);
            while (__stlxr(v24 - 1, v23));
            if (!v24)
            {
              ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
              std::__shared_weak_count::__release_weak(v22);
            }
          }
          v13 = *a3;
        }
        else
        {
LABEL_8:
          v13 = 0;
        }
        ++v8;
      }
      while (v8 < v7 && !v13);
    }
  }
}

void sub_19F93A1B4(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void md::PolygonRenderLayer<(md::MapDataType)1,md::MapTileDataRenderable<md::PolygonTileData>>::updateStyles(_QWORD *a1, uint64_t a2)
{
  uint64_t **i;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  id v9;

  for (i = (uint64_t **)a1[102]; i; i = (uint64_t **)*i)
  {
    v5 = i[4];
    objc_msgSend(v5, "updateCachedStyles");

  }
  v6 = (uint64_t *)(*(uint64_t (**)(_QWORD *))(*a1 + 48))(a1);
  v8 = *v6;
  v7 = v6[1];
  if (v7 != *v6)
  {
    if (a2 == 1)
    {
      do
      {
        v9 = *(id *)(v8 + 8);
        objc_msgSend(v9, "setNeedsTextureUpdate");

        v8 += 24;
      }
      while (v8 != v7);
    }
    else
    {
      do
        v8 += 24;
      while (v8 != v7);
    }
  }
}

void sub_19F93A27C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void md::PolygonRenderLayer<(md::MapDataType)1,md::MapTileDataRenderable<md::PolygonTileData>>::_layoutPolygonGround(uint64_t a1, _QWORD *a2, ggl::CommandBuffer *a3)
{
  int8x8_t v3;
  uint64_t v5;
  uint8x8_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  id *v21;
  id v22;
  void *v23;
  unint64_t *p_shared_owners;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  unint64_t *v36;
  unint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t *v45;
  unint64_t v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD *v58;
  uint64_t v59;
  _QWORD *v60;
  int64x2_t v61;
  ggl::CommandBuffer *v62;
  uint64_t v63;
  _QWORD *v64;
  int v65;
  uint64_t v66;
  int v67;
  _QWORD *v68;
  std::__shared_weak_count *v69;

  v3 = (int8x8_t)a2[1];
  if (!*(_QWORD *)&v3)
    return;
  v5 = a1;
  v6 = (uint8x8_t)vcnt_s8(v3);
  v6.i16[0] = vaddlv_u8(v6);
  if (v6.u32[0] > 1uLL)
  {
    v7 = 0x3070CB6B3C7F21D3;
    if (*(_QWORD *)&v3 <= 0x3070CB6B3C7F21D3uLL)
      v7 = 0x3070CB6B3C7F21D3uLL % *(_QWORD *)&v3;
  }
  else
  {
    v7 = (*(_QWORD *)&v3 - 1) & 0x3070CB6B3C7F21D3;
  }
  v8 = *(_QWORD **)(*a2 + 8 * v7);
  if (!v8)
    goto LABEL_24;
  v9 = (_QWORD *)*v8;
  if (!v9)
    goto LABEL_24;
  if (v6.u32[0] < 2uLL)
  {
    while (1)
    {
      v11 = v9[1];
      if (v11 == 0x3070CB6B3C7F21D3)
      {
        if (v9[2] == 0x3070CB6B3C7F21D3)
          goto LABEL_22;
      }
      else if ((v11 & (*(_QWORD *)&v3 - 1)) != v7)
      {
        goto LABEL_24;
      }
      v9 = (_QWORD *)*v9;
      if (!v9)
        goto LABEL_24;
    }
  }
  while (1)
  {
    v10 = v9[1];
    if (v10 == 0x3070CB6B3C7F21D3)
      break;
    if (v10 >= *(_QWORD *)&v3)
      v10 %= *(_QWORD *)&v3;
    if (v10 != v7)
      goto LABEL_24;
LABEL_11:
    v9 = (_QWORD *)*v9;
    if (!v9)
      goto LABEL_24;
  }
  if (v9[2] != 0x3070CB6B3C7F21D3)
    goto LABEL_11;
LABEL_22:
  v12 = v9[5];
  if (*(_QWORD *)(v12 + 8) == 0x3070CB6B3C7F21D3)
  {
    v13 = *(_QWORD *)(v12 + 32);
    goto LABEL_25;
  }
LABEL_24:
  v13 = 0;
LABEL_25:
  if (v6.u32[0] > 1uLL)
  {
    v14 = 0xA60DDA5A69582425;
    if (*(_QWORD *)&v3 <= 0xA60DDA5A69582425)
      v14 = 0xA60DDA5A69582425 % *(_QWORD *)&v3;
  }
  else
  {
    v14 = (*(_QWORD *)&v3 - 1) & 0xA60DDA5A69582425;
  }
  v15 = *(_QWORD **)(*a2 + 8 * v14);
  if (v15)
  {
    v16 = (_QWORD *)*v15;
    if (v16)
    {
      if (v6.u32[0] < 2uLL)
      {
        v17 = *(_QWORD *)&v3 - 1;
        while (1)
        {
          v19 = v16[1];
          if (v19 == 0xA60DDA5A69582425)
          {
            if (v16[2] == 0xA60DDA5A69582425)
              goto LABEL_45;
          }
          else if ((v19 & v17) != v14)
          {
            return;
          }
          v16 = (_QWORD *)*v16;
          if (!v16)
            return;
        }
      }
      do
      {
        v18 = v16[1];
        if (v18 == 0xA60DDA5A69582425)
        {
          if (v16[2] == 0xA60DDA5A69582425)
          {
LABEL_45:
            v20 = v16[5];
            if (*(_QWORD *)(v20 + 8) == 0xA60DDA5A69582425)
            {
              if (v13)
              {
                v21 = *(id **)(v20 + 32);
                if (v21)
                {
                  v65 = *(__int16 *)(*(_QWORD *)(a1 + 368) + 896);
                  v22 = *v21;
                  v23 = v22;
                  v66 = v13;
                  if (v22)
                  {
                    objc_msgSend(v22, "textureManager");
                    v64 = v68;
                    if (v69)
                    {
                      p_shared_owners = (unint64_t *)&v69->__shared_owners_;
                      do
                        v25 = __ldaxr(p_shared_owners);
                      while (__stlxr(v25 - 1, p_shared_owners));
                      if (!v25)
                      {
                        ((void (*)())v69->__on_zero_shared)();
                        std::__shared_weak_count::__release_weak(v69);
                      }
                    }
                  }
                  else
                  {
                    v64 = 0;
                  }

                  v26 = *(_QWORD *)(v5 + 272);
                  v63 = *(_QWORD *)(v5 + 280);
                  if (v26 != v63)
                  {
                    v62 = a3;
                    v61 = vdupq_n_s64(1uLL);
                    do
                    {
                      v27 = *(_QWORD **)v26;
                      v28 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)v26 + 384) + 169);
                      v29 = *(_QWORD *)(v5 + 368);
                      v30 = *(_QWORD *)(v29 + 16 * *(unsigned __int8 *)(v5 + 360) + 280);
                      v31 = ggl::FragmentedPool<ggl::RenderItem>::pop(*(_QWORD *)(v29 + 232));
                      v32 = *(_QWORD **)(v31 + 64);
                      v32[1] = 0;
                      v33 = v27[27];
                      *v32 = v33;
                      v34 = *(_QWORD **)(v31 + 160);
                      v35 = v27[28];
                      if (v35)
                      {
                        v36 = (unint64_t *)(v35 + 8);
                        do
                          v37 = __ldxr(v36);
                        while (__stxr(v37 + 1, v36));
                      }
                      v38 = (std::__shared_weak_count *)v34[1];
                      *v34 = v33;
                      v34[1] = v35;
                      if (v38)
                      {
                        v39 = (unint64_t *)&v38->__shared_owners_;
                        do
                          v40 = __ldaxr(v39);
                        while (__stlxr(v40 - 1, v39));
                        if (!v40)
                        {
                          ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
                          std::__shared_weak_count::__release_weak(v38);
                        }
                      }
                      v41 = *(_QWORD *)(v31 + 64);
                      *(_QWORD *)(v41 + 24) = 0;
                      v42 = v27[29];
                      *(_QWORD *)(v41 + 16) = v42;
                      v43 = *(_QWORD *)(v31 + 160);
                      v44 = v27[30];
                      if (v44)
                      {
                        v45 = (unint64_t *)(v44 + 8);
                        do
                          v46 = __ldxr(v45);
                        while (__stxr(v46 + 1, v45));
                      }
                      v47 = *(std::__shared_weak_count **)(v43 + 24);
                      *(_QWORD *)(v43 + 16) = v42;
                      *(_QWORD *)(v43 + 24) = v44;
                      if (v47)
                      {
                        v48 = (unint64_t *)&v47->__shared_owners_;
                        do
                          v49 = __ldaxr(v48);
                        while (__stlxr(v49 - 1, v48));
                        if (!v49)
                        {
                          ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
                          std::__shared_weak_count::__release_weak(v47);
                        }
                      }
                      **(_QWORD **)(v31 + 96) = *v64;
                      v50 = v27[48];
                      if (v50)
                        v51 = v50 + 168;
                      else
                        v51 = 0;
                      v52 = *(unsigned __int8 *)(v51 + 1);
                      v53 = *(_QWORD *)(v5 + 464);
                      v54 = 128;
                      if (*(unsigned __int8 *)(v66 + 320) - 1 < 3)
                        v54 = 144;
                      v55 = v5;
                      v56 = *(_QWORD *)(v5 + 368);
                      v57 = *(_QWORD *)(v66 + v54);
                      v58 = *(_QWORD **)(v56 + 1072);
                      v59 = v58[1];
                      if (v59 == *(_QWORD *)(v56 + 1080))
                      {
                        v58 = (_QWORD *)*v58;
                        if (!v58)
                        {
                          v58 = malloc_type_malloc(120 * v59 + 16, 0xB644C221uLL);
                          *v58 = 0;
                          v58[1] = 0;
                          **(_QWORD **)(v56 + 1072) = v58;
                        }
                        *(_QWORD *)(v56 + 1072) = v58;
                        v59 = v58[1];
                      }
                      v60 = &v58[15 * v59];
                      v58[1] = v59 + 1;
                      v60[2] = &off_1E42B59B0;
                      v60 += 2;
                      v60[2] = "";
                      v60[3] = v30;
                      v60[4] = v31;
                      *((_DWORD *)v60 + 10) = v28 + v65;
                      v60[6] = (16 * (int)v51) & 0xFF00 | (v52 << 19) | (v53 >> 4) | 0x10000;
                      *((_DWORD *)v60 + 14) = 1065353216;
                      *((_DWORD *)v60 + 15) = v67;
                      *((int64x2_t *)v60 + 6) = v61;
                      v60[14] = 0;
                      v60[8] = v57;
                      *(_OWORD *)(v60 + 9) = 0uLL;
                      v60[11] = 0;
                      v60[12] = 1;
                      ggl::CommandBuffer::pushRenderItem((uint64_t)v62, (ggl::RenderItem *)v60);
                      v5 = v55;
                      v26 += 8;
                    }
                    while (v26 != v63);
                  }
                }
              }
            }
            return;
          }
        }
        else
        {
          if (v18 >= *(_QWORD *)&v3)
            v18 %= *(_QWORD *)&v3;
          if (v18 != v14)
            return;
        }
        v16 = (_QWORD *)*v16;
      }
      while (v16);
    }
  }
}

void sub_19F93A7F8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void std::__function::__func<md::PolygonRenderLayer<(md::MapDataType)1,md::MapTileDataRenderable<md::PolygonTileData>>::layout(md::LayoutContext const&)::{lambda(md::StyleManagerEvent)#1},std::allocator<md::PolygonRenderLayer<(md::MapDataType)1,md::MapTileDataRenderable<md::PolygonTileData>>::layout(md::LayoutContext const&)::{lambda(md::StyleManagerEvent)#1}>,void ()(md::StyleManagerEvent)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

__n128 std::__function::__func<md::PolygonRenderLayer<(md::MapDataType)1,md::MapTileDataRenderable<md::PolygonTileData>>::layout(md::LayoutContext const&)::{lambda(md::StyleManagerEvent)#1},std::allocator<md::PolygonRenderLayer<(md::MapDataType)1,md::MapTileDataRenderable<md::PolygonTileData>>::layout(md::LayoutContext const&)::{lambda(md::StyleManagerEvent)#1}>,void ()(md::StyleManagerEvent)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_1E42CF038;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 std::__function::__func<md::PolygonRenderLayer<(md::MapDataType)1,md::MapTileDataRenderable<md::PolygonTileData>>::layout(md::LayoutContext const&)::{lambda(md::StyleManagerEvent)#1},std::allocator<md::PolygonRenderLayer<(md::MapDataType)1,md::MapTileDataRenderable<md::PolygonTileData>>::layout(md::LayoutContext const&)::{lambda(md::StyleManagerEvent)#1}>,void ()(md::StyleManagerEvent)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E42CF038;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<md::PolygonRenderLayer<(md::MapDataType)1,md::MapTileDataRenderable<md::PolygonTileData>>::layout(md::LayoutContext const&)::{lambda(void)#2},std::allocator<md::PolygonRenderLayer<(md::MapDataType)1,md::MapTileDataRenderable<md::PolygonTileData>>::layout(md::LayoutContext const&)::{lambda(void)#2}>,void ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::PolygonRenderLayer<(md::MapDataType)1,md::MapTileDataRenderable<md::PolygonTileData>>::layout(md::LayoutContext const&)::{lambda(void)#2},std::allocator<md::PolygonRenderLayer<(md::MapDataType)1,md::MapTileDataRenderable<md::PolygonTileData>>::layout(md::LayoutContext const&)::{lambda(void)#2}>,void ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42CF080;
  result[1] = v3;
  return result;
}

void std::__function::__func<md::PolygonRenderLayer<(md::MapDataType)1,md::MapTileDataRenderable<md::PolygonTileData>>::layout(md::LayoutContext const&)::{lambda(void)#1},std::allocator<md::PolygonRenderLayer<(md::MapDataType)1,md::MapTileDataRenderable<md::PolygonTileData>>::layout(md::LayoutContext const&)::{lambda(void)#1}>,void ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::PolygonRenderLayer<(md::MapDataType)1,md::MapTileDataRenderable<md::PolygonTileData>>::layout(md::LayoutContext const&)::{lambda(void)#1},std::allocator<md::PolygonRenderLayer<(md::MapDataType)1,md::MapTileDataRenderable<md::PolygonTileData>>::layout(md::LayoutContext const&)::{lambda(void)#1}>,void ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42CF0C8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<md::PolygonRenderLayer<(md::MapDataType)1,md::MapTileDataRenderable<md::PolygonTileData>>::layout(md::LayoutContext const&)::{lambda(void)#1},std::allocator<md::PolygonRenderLayer<(md::MapDataType)1,md::MapTileDataRenderable<md::PolygonTileData>>::layout(md::LayoutContext const&)::{lambda(void)#1}>,void ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42CF0C8;
  a2[1] = v2;
  return result;
}

void std::__shared_ptr_pointer<md::RasterSharedRenderResources *,std::shared_ptr<md::RasterSharedRenderResources>::__shared_ptr_default_delete<md::RasterSharedRenderResources,md::RasterSharedRenderResources>,std::allocator<md::RasterSharedRenderResources>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_emplace<md::BuildingSharedRenderResources>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DD968;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<md::BuildingSharedRenderResources>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DD968;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t md::CartographicMapEngineConfiguration::CartographicMapEngineConfiguration(uint64_t a1, char a2, char a3, char a4)
{
  uint64_t v7;
  void *v8;
  void *v9;

  v7 = md::MapEngineConfiguration::MapEngineConfiguration(a1, a2, 0);
  *(_QWORD *)v7 = &off_1E42A98A0;
  *(_BYTE *)(v7 + 32) = a3;
  *(_BYTE *)(v7 + 33) = 1;
  *(_BYTE *)(v7 + 34) = a4;
  *(_WORD *)(v7 + 35) = 0;
  *(_QWORD *)(v7 + 40) = 0;
  *(_QWORD *)(v7 + 48) = 0;
  +[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  *(_BYTE *)(a1 + 35) = objc_msgSend(v8, "daVinciCameraControllerForceMercatorZoom");

  +[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  *(_BYTE *)(a1 + 36) = objc_msgSend(v9, "daVinciCameraController");

  return a1;
}

void sub_19F93AA48(_Unwind_Exception *a1)
{
  md::MapEngineConfiguration *v1;
  uint64_t v2;
  void *v3;
  void *v4;

  v4 = v3;

  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](v2);
  md::MapEngineConfiguration::~MapEngineConfiguration(v1);
  _Unwind_Resume(a1);
}

void md::ShadowPipelineProxy::setTransformConstant(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;

  v3 = *a2;
  v4 = *(_QWORD *)(*a2 + 64);
  v5 = *a3;
  v6 = a3[1];
  *(_QWORD *)(v4 + 16) = *a3;
  *(_QWORD *)(v4 + 24) = 0;
  v7 = *(_QWORD *)(v3 + 160);
  if (v6)
  {
    v8 = (unint64_t *)(v6 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  v10 = *(std::__shared_weak_count **)(v7 + 24);
  *(_QWORD *)(v7 + 16) = v5;
  *(_QWORD *)(v7 + 24) = v6;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
}

void md::ShadowPipelineProxy::~ShadowPipelineProxy(md::ShadowPipelineProxy *this)
{
  JUMPOUT(0x1A1AF4E00);
}

void md::ShadowPipelineProxy::update(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  unint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  __int128 *v32;
  uint64_t v33;
  __int128 v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  __int128 *v40;
  uint64_t v41;
  __int128 v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t *v50;
  uint64_t v51;
  uint64_t *v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t *v57;
  uint64_t v58;
  __int16 v59;
  uint64_t *v60;
  _QWORD *v61;
  char v62;
  _WORD *v63;
  uint64_t v64;
  _QWORD *i;
  uint64_t v66;
  unint64_t v67;
  char *v68;
  _WORD *v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  unint64_t v74;
  uint64_t v75;
  _BYTE *v76;
  _WORD *v77;
  char *v78;
  unint64_t v79;
  uint64_t v80;
  _OWORD *v81;
  char *v82;
  unint64_t v83;
  __int128 v84;
  __int16 v85;
  _QWORD *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t *v89;
  uint64_t v90;
  uint64_t *v91;
  uint64_t v92;
  uint64_t *v93;
  uint64_t v94;
  uint64_t *v95;
  uint64_t v96;
  uint64_t *HasTransformConstant;
  uint64_t v98;
  uint64_t *HasTransformInstanceDeviceData;
  uint64_t v100;
  _BYTE v101[20];
  int v102;
  uint64_t v103;
  uint64_t v104;
  int v105;
  uint64_t v106;
  uint64_t v107;
  int v108;
  uint64_t v109;
  uint64_t v110;

  v5 = a1;
  v6 = *(_QWORD *)(a1 + 24);
  v7 = *(_QWORD *)(v6 + 8);
  if (v7 == *(_QWORD *)v6)
  {
    v18 = *(_QWORD *)(v6 + 88);
    if (!v18)
    {
LABEL_90:
      std::__throw_bad_function_call[abi:nn180100]();
LABEL_91:
      abort();
    }
    v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v18 + 48))(v18);
    v9 = *(uint64_t **)(v6 + 40);
    v19 = *(_QWORD *)(v6 + 48);
    if ((unint64_t)v9 >= v19)
    {
      v21 = *(_QWORD *)(v6 + 32);
      v22 = ((uint64_t)v9 - v21) >> 3;
      v13 = v22 + 1;
      if ((unint64_t)(v22 + 1) >> 61)
        goto LABEL_91;
      v23 = v19 - v21;
      if (v23 >> 2 > v13)
        v13 = v23 >> 2;
      if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFF8)
        v13 = 0x1FFFFFFFFFFFFFFFLL;
      if (v13)
      {
        v24 = 8 * v13;
        v25 = (*(uint64_t (**)(_QWORD, unint64_t, uint64_t))(**(_QWORD **)(v6 + 56) + 16))(*(_QWORD *)(v6 + 56), 8 * v13, 8);
        v17 = (uint64_t *)(v25 + 8 * v22);
        v13 = v25 + v24;
        if (v25)
          *v17 = v8;
      }
      else
      {
        v17 = (uint64_t *)(8 * v22);
      }
      v20 = v17 + 1;
      v35 = *(_QWORD *)(v6 + 32);
      v26 = *(_QWORD *)(v6 + 40);
      if (v26 == v35)
        goto LABEL_48;
      v36 = v26 - v35 - 8;
      if (v36 < 0x38)
      {
        v38 = *(_QWORD *)(v6 + 40);
      }
      else if ((unint64_t)(v26 - (_QWORD)v17) < 0x20)
      {
        v38 = *(_QWORD *)(v6 + 40);
      }
      else
      {
        v37 = (v36 >> 3) + 1;
        v38 = v26 - 8 * (v37 & 0x3FFFFFFFFFFFFFFCLL);
        v39 = v17 - 2;
        v40 = (__int128 *)(v26 - 16);
        v41 = v37 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v42 = *v40;
          *((_OWORD *)v39 - 1) = *(v40 - 1);
          *(_OWORD *)v39 = v42;
          v39 -= 4;
          v40 -= 2;
          v41 -= 4;
        }
        while (v41);
        v17 -= v37 & 0x3FFFFFFFFFFFFFFCLL;
        if (v37 == (v37 & 0x3FFFFFFFFFFFFFFCLL))
          goto LABEL_47;
      }
      do
      {
        v44 = *(_QWORD *)(v38 - 8);
        v38 -= 8;
        *--v17 = v44;
      }
      while (v38 != v35);
      goto LABEL_47;
    }
  }
  else
  {
    v8 = *(_QWORD *)(v7 - 8);
    *(_QWORD *)(v6 + 8) = v7 - 8;
    v9 = *(uint64_t **)(v6 + 40);
    v10 = *(_QWORD *)(v6 + 48);
    if ((unint64_t)v9 >= v10)
    {
      v11 = *(_QWORD *)(v6 + 32);
      v12 = ((uint64_t)v9 - v11) >> 3;
      v13 = v12 + 1;
      if ((unint64_t)(v12 + 1) >> 61)
        goto LABEL_91;
      v14 = v10 - v11;
      if (v14 >> 2 > v13)
        v13 = v14 >> 2;
      if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF8)
        v13 = 0x1FFFFFFFFFFFFFFFLL;
      if (v13)
      {
        v15 = 8 * v13;
        v16 = (*(uint64_t (**)(_QWORD, unint64_t, uint64_t))(**(_QWORD **)(v6 + 56) + 16))(*(_QWORD *)(v6 + 56), 8 * v13, 8);
        v17 = (uint64_t *)(v16 + 8 * v12);
        v13 = v16 + v15;
        if (v16)
          *v17 = v8;
      }
      else
      {
        v17 = (uint64_t *)(8 * v12);
      }
      v20 = v17 + 1;
      v27 = *(_QWORD *)(v6 + 32);
      v26 = *(_QWORD *)(v6 + 40);
      if (v26 == v27)
        goto LABEL_48;
      v28 = v26 - v27 - 8;
      if (v28 < 0x38)
      {
        v30 = *(_QWORD *)(v6 + 40);
      }
      else if ((unint64_t)(v26 - (_QWORD)v17) < 0x20)
      {
        v30 = *(_QWORD *)(v6 + 40);
      }
      else
      {
        v29 = (v28 >> 3) + 1;
        v30 = v26 - 8 * (v29 & 0x3FFFFFFFFFFFFFFCLL);
        v31 = v17 - 2;
        v32 = (__int128 *)(v26 - 16);
        v33 = v29 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v34 = *v32;
          *((_OWORD *)v31 - 1) = *(v32 - 1);
          *(_OWORD *)v31 = v34;
          v31 -= 4;
          v32 -= 2;
          v33 -= 4;
        }
        while (v33);
        v17 -= v29 & 0x3FFFFFFFFFFFFFFCLL;
        if (v29 == (v29 & 0x3FFFFFFFFFFFFFFCLL))
          goto LABEL_47;
      }
      do
      {
        v43 = *(_QWORD *)(v30 - 8);
        v30 -= 8;
        *--v17 = v43;
      }
      while (v30 != v27);
LABEL_47:
      v26 = *(_QWORD *)(v6 + 32);
LABEL_48:
      *(_QWORD *)(v6 + 32) = v17;
      *(_QWORD *)(v6 + 40) = v20;
      v45 = *(_QWORD *)(v6 + 48);
      *(_QWORD *)(v6 + 48) = v13;
      if (v26)
        (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v6 + 56) + 40))(*(_QWORD *)(v6 + 56), v26, v45 - v26);
      goto LABEL_50;
    }
  }
  if (v9)
    *v9 = v8;
  v20 = v9 + 1;
LABEL_50:
  *(_QWORD *)(v6 + 40) = v20;
  *(_QWORD *)v101 = v8;
  v46 = *(_QWORD *)(v6 + 120);
  if (!v46)
    goto LABEL_90;
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v46 + 48))(v46, v101);
  v47 = *a3;
  *(_QWORD *)v101 = v8;
  v48 = (uint64_t *)gdc::Registry::storage<arComponents::PipelineInstanceToUse>(a2);
  gdc::ComponentStorageWrapper<md::ls::RegisterHandle>::emplace(v48, v47, v101);
  v49 = *a3;
  *(_QWORD *)&v101[12] = 0;
  *(_QWORD *)&v101[4] = 0;
  v103 = 0;
  v104 = 0;
  v107 = 0;
  v106 = 0;
  *(_DWORD *)v101 = 1065353216;
  v102 = 1065353216;
  v105 = 1065353216;
  v108 = 1065353216;
  v50 = (uint64_t *)gdc::Registry::storage<arComponents::ViewConstantDataComponent>(a2);
  gdc::ComponentStorageWrapper<arComponents::ViewConstantDataComponent>::emplace(v50, v49, (__int128 *)v101);
  v51 = *a3;
  *(_QWORD *)v101 = 0;
  *(_QWORD *)&v101[8] = 0;
  v52 = (uint64_t *)gdc::Registry::storage<arComponents::TransformConstantDataComponent>(a2);
  gdc::ComponentStorageWrapper<arComponents::TransformConstantDataComponent>::emplace(v52, v51, v101);
  v53 = *(std::__shared_weak_count **)&v101[8];
  if (*(_QWORD *)&v101[8])
  {
    v54 = (unint64_t *)(*(_QWORD *)&v101[8] + 8);
    do
      v55 = __ldaxr(v54);
    while (__stlxr(v55 - 1, v54));
    if (!v55)
    {
      ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
      std::__shared_weak_count::__release_weak(v53);
    }
  }
  v56 = *a3;
  v57 = (uint64_t *)gdc::Registry::storage<arComponents::NeedsTransformConstantDataUpdate>(a2);
  gdc::ComponentStorageWrapper<md::components::Collapsible>::emplace(v57, v56);
  v58 = *a3;
  v59 = *(_WORD *)(v5 + 32);
  v60 = (uint64_t *)gdc::Registry::storage<arComponents::CommandBufferLocation>(a2);
  v109 = v58;
  v61 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v60 + 4, (uint64_t)&v109);
  if ((v62 & 1) != 0)
  {
    v68 = (char *)v60[11];
    v67 = v60[12];
    if ((unint64_t)v68 >= v67)
    {
      v100 = v5;
      v70 = (char *)v60[10];
      v71 = v68 - v70;
      if (v68 - v70 <= -3)
        goto LABEL_91;
      v72 = v71 >> 1;
      v73 = v67 - (_QWORD)v70;
      if (v73 <= (v71 >> 1) + 1)
        v74 = v72 + 1;
      else
        v74 = v73;
      if (v73 >= 0x7FFFFFFFFFFFFFFELL)
        v75 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v75 = v74;
      if (v75)
      {
        if (v75 < 0)
          std::__throw_bad_array_new_length[abi:nn180100]();
        v76 = operator new(2 * v75);
      }
      else
      {
        v76 = 0;
      }
      v77 = &v76[2 * v72];
      v78 = &v76[2 * v75];
      *v77 = v59;
      v69 = v77 + 1;
      if (v68 != v70)
      {
        v79 = v68 - v70 - 2;
        if (v79 < 0x1E)
          goto LABEL_95;
        if (v68 - v76 - (v71 & 0xFFFFFFFFFFFFFFFELL) < 0x20)
          goto LABEL_95;
        v80 = (v79 >> 1) + 1;
        v81 = &v76[2 * v72 - 16];
        v82 = v68 - 16;
        v83 = v80 & 0xFFFFFFFFFFFFFFF0;
        do
        {
          v84 = *(_OWORD *)v82;
          *(v81 - 1) = *((_OWORD *)v82 - 1);
          *v81 = v84;
          v81 -= 2;
          v82 -= 32;
          v83 -= 16;
        }
        while (v83);
        v77 -= v80 & 0xFFFFFFFFFFFFFFF0;
        v68 -= 2 * (v80 & 0xFFFFFFFFFFFFFFF0);
        if (v80 != (v80 & 0xFFFFFFFFFFFFFFF0))
        {
LABEL_95:
          do
          {
            v85 = *((_WORD *)v68 - 1);
            v68 -= 2;
            *--v77 = v85;
          }
          while (v68 != v70);
        }
        v68 = (char *)v60[10];
      }
      v60[10] = (uint64_t)v77;
      v60[11] = (uint64_t)v69;
      v60[12] = (uint64_t)v78;
      v5 = v100;
      if (v68)
        operator delete(v68);
    }
    else
    {
      *(_WORD *)v68 = v59;
      v69 = v68 + 2;
    }
    v60[11] = (uint64_t)v69;
    v64 = v60[31];
LABEL_86:
    v86 = (_QWORD *)v60[22];
    if (v86)
    {
      while (1)
      {
        *(_QWORD *)v101 = &v109;
        *(_QWORD *)&v101[8] = 1;
        v110 = v64;
        v87 = v86[6];
        if (!v87)
          goto LABEL_90;
        (*(void (**)(uint64_t, uint64_t *, _BYTE *))(*(_QWORD *)v87 + 48))(v87, &v110, v101);
        v86 = (_QWORD *)*v86;
        if (!v86)
          goto LABEL_89;
      }
    }
    goto LABEL_89;
  }
  v63 = (_WORD *)(v60[10] + (((uint64_t)v61 - v60[7]) >> 2));
  *v63 = v59;
  v64 = v60[31];
  if (v63 == (_WORD *)v60[11])
    goto LABEL_86;
  for (i = (_QWORD *)v60[16]; i; i = (_QWORD *)*i)
  {
    *(_QWORD *)v101 = &v109;
    *(_QWORD *)&v101[8] = 1;
    v110 = v64;
    v66 = i[6];
    if (!v66)
      goto LABEL_90;
    (*(void (**)(uint64_t, uint64_t *, _BYTE *))(*(_QWORD *)v66 + 48))(v66, &v110, v101);
  }
LABEL_89:
  v88 = *a3;
  *(_QWORD *)v101 = *(_QWORD *)(*(_QWORD *)(v8 + 64) + 48);
  v89 = (uint64_t *)gdc::Registry::storage<arComponents::CompWrap<ggl::ConstantDataTyped<ggl::DaVinci::StyleColor>>>(a2);
  gdc::ComponentStorageWrapper<md::ls::RegisterHandle>::emplace(v89, v88, v101);
  v90 = *a3;
  *(_QWORD *)v101 = **(_QWORD **)(v8 + 64);
  v91 = (uint64_t *)gdc::Registry::storage<arComponents::CompWrap<ggl::ConstantDataTyped<ggl::Tile::View>>>(a2);
  gdc::ComponentStorageWrapper<md::ls::RegisterHandle>::emplace(v91, v90, v101);
  v92 = *a3;
  *(_QWORD *)v101 = *(_QWORD *)(*(_QWORD *)(v8 + 64) + 16);
  v93 = (uint64_t *)gdc::Registry::storage<arComponents::CompWrap<ggl::ConstantDataTyped<ggl::Tile::Transform>>>(a2);
  gdc::ComponentStorageWrapper<md::ls::RegisterHandle>::emplace(v93, v92, v101);
  v94 = *a3;
  *(_QWORD *)v101 = **(_QWORD **)(v8 + 32);
  v95 = (uint64_t *)gdc::Registry::storage<arComponents::CompWrap<ggl::DeviceDataTyped<ggl::DaVinci::InstanceTransform>>>(a2);
  gdc::ComponentStorageWrapper<md::ls::RegisterHandle>::emplace(v95, v94, v101);
  v96 = *a3;
  *(_QWORD *)v101 = v5;
  HasTransformConstant = (uint64_t *)gdc::Registry::storage<md::pipelineECS::HasTransformConstantData>(a2);
  gdc::ComponentStorageWrapper<md::ls::RegisterHandle>::emplace(HasTransformConstant, v96, v101);
  v98 = *a3;
  *(_QWORD *)v101 = v5 + 8;
  HasTransformInstanceDeviceData = (uint64_t *)gdc::Registry::storage<md::pipelineECS::HasTransformInstanceDeviceDataFeature>(a2);
  gdc::ComponentStorageWrapper<md::ls::RegisterHandle>::emplace(HasTransformInstanceDeviceData, v98, v101);
}

void sub_19F93B1CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void md::ShadowPipelineProxy::setTransformInstanceDeviceData(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;

  v3 = *a2;
  v4 = *(uint64_t **)(a3 + 32);
  v5 = *(_QWORD **)(*a2 + 32);
  v6 = *v4;
  v7 = v4[1];
  *v5 = v6;
  v5[1] = 0;
  v8 = *(_QWORD **)(v3 + 128);
  if (v7)
  {
    v9 = (unint64_t *)(v7 + 8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  v11 = (std::__shared_weak_count *)v8[1];
  *v8 = v6;
  v8[1] = v7;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
}

void `non-virtual thunk to'md::ShadowPipelineProxy::setTransformInstanceDeviceData(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;

  v3 = *a2;
  v4 = *(uint64_t **)(a3 + 32);
  v5 = *(_QWORD **)(*a2 + 32);
  v6 = *v4;
  v7 = v4[1];
  *v5 = v6;
  v5[1] = 0;
  v8 = *(_QWORD **)(v3 + 128);
  if (v7)
  {
    v9 = (unint64_t *)(v7 + 8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  v11 = (std::__shared_weak_count *)v8[1];
  *v8 = v6;
  v8[1] = v7;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
}

void `non-virtual thunk to'md::ShadowPipelineProxy::update(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  md::ShadowPipelineProxy::update(a1 - 16, a2, a3);
}

void gdc::ComponentStorageWrapper<arComponents::ViewConstantDataComponent>::emplace(uint64_t *a1, uint64_t a2, __int128 *a3)
{
  _QWORD *v5;
  char v6;
  _DWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  _OWORD *v16;
  char *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char *v22;
  char *v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;

  v31 = a2;
  v5 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(a1 + 4, (uint64_t)&v31);
  if ((v6 & 1) != 0)
  {
    v12 = (char *)a1[11];
    v11 = a1[12];
    if ((unint64_t)v12 >= v11)
    {
      v17 = (char *)a1[10];
      v18 = (v12 - v17) >> 6;
      v19 = v18 + 1;
      if ((unint64_t)(v18 + 1) >> 58)
        goto LABEL_30;
      v20 = v11 - (_QWORD)v17;
      if (v20 >> 5 > v19)
        v19 = v20 >> 5;
      if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFC0)
        v21 = 0x3FFFFFFFFFFFFFFLL;
      else
        v21 = v19;
      if (v21)
      {
        if (v21 >> 58)
          std::__throw_bad_array_new_length[abi:nn180100]();
        v22 = (char *)operator new(v21 << 6);
      }
      else
      {
        v22 = 0;
      }
      v23 = &v22[64 * v18];
      v24 = a3[1];
      *(_OWORD *)v23 = *a3;
      *((_OWORD *)v23 + 1) = v24;
      v25 = a3[3];
      *((_OWORD *)v23 + 2) = a3[2];
      *((_OWORD *)v23 + 3) = v25;
      v16 = v23 + 64;
      if (v12 != v17)
      {
        do
        {
          v26 = *((_OWORD *)v12 - 4);
          v27 = *((_OWORD *)v12 - 3);
          v28 = *((_OWORD *)v12 - 1);
          *((_OWORD *)v23 - 2) = *((_OWORD *)v12 - 2);
          *((_OWORD *)v23 - 1) = v28;
          *((_OWORD *)v23 - 4) = v26;
          *((_OWORD *)v23 - 3) = v27;
          v23 -= 64;
          v12 -= 64;
        }
        while (v12 != v17);
        v12 = (char *)a1[10];
      }
      a1[10] = (uint64_t)v23;
      a1[11] = (uint64_t)v16;
      a1[12] = (uint64_t)&v22[64 * v21];
      if (v12)
        operator delete(v12);
    }
    else
    {
      v13 = *a3;
      v14 = a3[1];
      v15 = a3[3];
      *((_OWORD *)v12 + 2) = a3[2];
      *((_OWORD *)v12 + 3) = v15;
      *(_OWORD *)v12 = v13;
      *((_OWORD *)v12 + 1) = v14;
      v16 = v12 + 64;
    }
    a1[11] = (uint64_t)v16;
    v8 = a1[31];
  }
  else
  {
    v7 = (_DWORD *)(a1[10] + 8 * ((_QWORD)v5 - a1[7]));
    *v7 = *(_DWORD *)a3;
    v7[1] = *((_DWORD *)a3 + 1);
    v7[2] = *((_DWORD *)a3 + 2);
    v7[3] = *((_DWORD *)a3 + 3);
    v7[4] = *((_DWORD *)a3 + 4);
    v7[5] = *((_DWORD *)a3 + 5);
    v7[6] = *((_DWORD *)a3 + 6);
    v7[7] = *((_DWORD *)a3 + 7);
    v7[8] = *((_DWORD *)a3 + 8);
    v7[9] = *((_DWORD *)a3 + 9);
    v7[10] = *((_DWORD *)a3 + 10);
    v7[11] = *((_DWORD *)a3 + 11);
    v7[12] = *((_DWORD *)a3 + 12);
    v7[13] = *((_DWORD *)a3 + 13);
    v7[14] = *((_DWORD *)a3 + 14);
    v7[15] = *((_DWORD *)a3 + 15);
    v8 = a1[31];
    if (v7 != (_DWORD *)a1[11])
    {
      v9 = (_QWORD *)a1[16];
      if (v9)
      {
        while (1)
        {
          v33 = &v31;
          v34 = 1;
          v32 = v8;
          v10 = v9[6];
          if (!v10)
            break;
          (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v10 + 48))(v10, &v32, &v33);
          v9 = (_QWORD *)*v9;
          if (!v9)
            return;
        }
LABEL_29:
        std::__throw_bad_function_call[abi:nn180100]();
LABEL_30:
        abort();
      }
      return;
    }
  }
  v29 = (_QWORD *)a1[22];
  if (v29)
  {
    while (1)
    {
      v33 = &v31;
      v34 = 1;
      v32 = v8;
      v30 = v29[6];
      if (!v30)
        break;
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v30 + 48))(v30, &v32, &v33);
      v29 = (_QWORD *)*v29;
      if (!v29)
        return;
    }
    goto LABEL_29;
  }
}

void gdc::ComponentStorageWrapper<arComponents::TransformConstantDataComponent>::emplace(uint64_t *a1, uint64_t a2, _QWORD *a3)
{
  _QWORD *v5;
  char v6;
  uint64_t v7;
  __int128 v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  char *v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  char *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char *v22;
  uint64_t v23;
  char *v24;
  unint64_t *v25;
  unint64_t v26;
  char *v27;
  __int128 v28;
  char *v29;
  std::__shared_weak_count *v30;
  unint64_t *p_shared_owners;
  unint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t v41;

  v38 = a2;
  v5 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(a1 + 4, (uint64_t)&v38);
  if ((v6 & 1) != 0)
  {
    v13 = (char *)a1[11];
    v12 = a1[12];
    if ((unint64_t)v13 >= v12)
    {
      v17 = (char *)a1[10];
      v18 = (v13 - v17) >> 4;
      v19 = v18 + 1;
      if ((unint64_t)(v18 + 1) >> 60)
        goto LABEL_50;
      v20 = v12 - (_QWORD)v17;
      if (v20 >> 3 > v19)
        v19 = v20 >> 3;
      if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFF0)
        v21 = 0xFFFFFFFFFFFFFFFLL;
      else
        v21 = v19;
      if (v21)
      {
        if (v21 >> 60)
          std::__throw_bad_array_new_length[abi:nn180100]();
        v22 = (char *)operator new(16 * v21);
      }
      else
      {
        v22 = 0;
      }
      v23 = a3[1];
      v24 = &v22[16 * v18];
      *(_QWORD *)v24 = *a3;
      *((_QWORD *)v24 + 1) = v23;
      if (v23)
      {
        v25 = (unint64_t *)(v23 + 8);
        do
          v26 = __ldxr(v25);
        while (__stxr(v26 + 1, v25));
        v17 = (char *)a1[10];
        v13 = (char *)a1[11];
      }
      v27 = &v22[16 * v21];
      v7 = (uint64_t)(v24 + 16);
      if (v13 == v17)
      {
        a1[10] = (uint64_t)v24;
        a1[11] = v7;
        a1[12] = (uint64_t)v27;
      }
      else
      {
        do
        {
          v28 = *((_OWORD *)v13 - 1);
          v13 -= 16;
          *((_OWORD *)v24 - 1) = v28;
          v24 -= 16;
          *(_QWORD *)v13 = 0;
          *((_QWORD *)v13 + 1) = 0;
        }
        while (v13 != v17);
        v17 = (char *)a1[10];
        v29 = (char *)a1[11];
        a1[10] = (uint64_t)v24;
        a1[11] = v7;
        a1[12] = (uint64_t)v27;
        while (v29 != v17)
        {
          v30 = (std::__shared_weak_count *)*((_QWORD *)v29 - 1);
          if (v30)
          {
            p_shared_owners = (unint64_t *)&v30->__shared_owners_;
            do
              v32 = __ldaxr(p_shared_owners);
            while (__stlxr(v32 - 1, p_shared_owners));
            if (!v32)
            {
              ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
              std::__shared_weak_count::__release_weak(v30);
            }
          }
          v29 -= 16;
        }
      }
      if (v17)
        operator delete(v17);
    }
    else
    {
      *(_QWORD *)v13 = *a3;
      v14 = a3[1];
      *((_QWORD *)v13 + 1) = v14;
      if (v14)
      {
        v15 = (unint64_t *)(v14 + 8);
        do
          v16 = __ldxr(v15);
        while (__stxr(v16 + 1, v15));
      }
      v7 = (uint64_t)(v13 + 16);
    }
    a1[11] = v7;
  }
  else
  {
    v7 = a1[10] + 2 * ((_QWORD)v5 - a1[7]);
    v8 = *(_OWORD *)a3;
    *a3 = 0;
    a3[1] = 0;
    v9 = *(std::__shared_weak_count **)(v7 + 8);
    *(_OWORD *)v7 = v8;
    if (v9)
    {
      v10 = (unint64_t *)&v9->__shared_owners_;
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 - 1, v10));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
  }
  v33 = a1[31];
  if (v7 == a1[11])
  {
    v36 = (_QWORD *)a1[22];
    if (v36)
    {
      while (1)
      {
        v40 = &v38;
        v41 = 1;
        v39 = v33;
        v37 = v36[6];
        if (!v37)
          break;
        (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v37 + 48))(v37, &v39, &v40);
        v36 = (_QWORD *)*v36;
        if (!v36)
          return;
      }
      goto LABEL_49;
    }
  }
  else
  {
    v34 = (_QWORD *)a1[16];
    if (v34)
    {
      while (1)
      {
        v40 = &v38;
        v41 = 1;
        v39 = v33;
        v35 = v34[6];
        if (!v35)
          break;
        (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v35 + 48))(v35, &v39, &v40);
        v34 = (_QWORD *)*v34;
        if (!v34)
          return;
      }
LABEL_49:
      std::__throw_bad_function_call[abi:nn180100]();
LABEL_50:
      abort();
    }
  }
}

uint64_t gdc::Registry::storage<arComponents::CompWrap<ggl::ConstantDataTyped<ggl::Tile::Transform>>>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  unint64_t v16;

  v16 = 0xBCDEDBDC62731A11;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0xBCDEDBDC62731A11;
      if (*(_QWORD *)&v3 <= 0xBCDEDBDC62731A11)
        v5 = 0xBCDEDBDC62731A11 % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0xBCDEDBDC62731A11;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0xBCDEDBDC62731A11)
            {
              if (v7[2] == 0xBCDEDBDC62731A11)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0xBCDEDBDC62731A11)
          {
            if (v7[2] == 0xBCDEDBDC62731A11)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "arComponents::CompWrap<ggl::ConstantDataTyped<ggl::Tile::Transform>>]";
  *(_QWORD *)(v11 + 24) = 68;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E42B2898;
  *(_QWORD *)(v11 + 8) = 0xBCDEDBDC62731A11;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0xBCDEDBDC62731A11, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0xBCDEDBDC62731A11;
  v15[1] = "arComponents::CompWrap<ggl::ConstantDataTyped<ggl::Tile::Transform>>]";
  v15[2] = 68;
  gdc::Registry::_registerStorageDataSignals(a1, 0xBCDEDBDC62731A11, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F93B9EC(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<arComponents::CompWrap<ggl::DeviceDataTyped<ggl::DaVinci::InstanceTransform>>>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  unint64_t v16;

  v16 = 0xFEA9AEC0E5ADE148;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0xFEA9AEC0E5ADE148;
      if (*(_QWORD *)&v3 <= 0xFEA9AEC0E5ADE148)
        v5 = 0xFEA9AEC0E5ADE148 % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0xFEA9AEC0E5ADE148;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0xFEA9AEC0E5ADE148)
            {
              if (v7[2] == 0xFEA9AEC0E5ADE148)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0xFEA9AEC0E5ADE148)
          {
            if (v7[2] == 0xFEA9AEC0E5ADE148)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "arComponents::CompWrap<ggl::DeviceDataTyped<ggl::DaVinci::InstanceTransform>>]";
  *(_QWORD *)(v11 + 24) = 77;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E42B2838;
  *(_QWORD *)(v11 + 8) = 0xFEA9AEC0E5ADE148;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0xFEA9AEC0E5ADE148, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0xFEA9AEC0E5ADE148;
  v15[1] = "arComponents::CompWrap<ggl::DeviceDataTyped<ggl::DaVinci::InstanceTransform>>]";
  v15[2] = 77;
  gdc::Registry::_registerStorageDataSignals(a1, 0xFEA9AEC0E5ADE148, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F93BC14(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void gdc::ComponentStorageWrapper<arComponents::CompWrap<ggl::DeviceDataTyped<ggl::DaVinci::InstanceTransform>>>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<arComponents::CompWrap<ggl::DeviceDataTyped<ggl::DaVinci::InstanceTransform>>>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  _QWORD v22[2];

  v20 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  v14 = a1[10];
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  *(_QWORD *)(v14 + 8 * v7) = *(_QWORD *)(a1[11] - 8);
  a1[11] -= 8;
  v15 = (_QWORD *)a1[28];
  if (!v15)
    return 1;
  v16 = a1[31];
  while (1)
  {
    v22[0] = &v20;
    v22[1] = 1;
    v21 = v16;
    v17 = v15[6];
    if (!v17)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v17 + 48))(v17, &v21, v22);
    v15 = (_QWORD *)*v15;
    if (!v15)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<arComponents::CompWrap<ggl::DeviceDataTyped<ggl::DaVinci::InstanceTransform>>>::contains(v18, v19);
}

BOOL gdc::ComponentStorageWrapper<arComponents::CompWrap<ggl::DeviceDataTyped<ggl::DaVinci::InstanceTransform>>>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void gdc::ComponentStorageWrapper<arComponents::CompWrap<ggl::ConstantDataTyped<ggl::Tile::Transform>>>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<arComponents::CompWrap<ggl::ConstantDataTyped<ggl::Tile::Transform>>>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  _QWORD v22[2];

  v20 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  v14 = a1[10];
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  *(_QWORD *)(v14 + 8 * v7) = *(_QWORD *)(a1[11] - 8);
  a1[11] -= 8;
  v15 = (_QWORD *)a1[28];
  if (!v15)
    return 1;
  v16 = a1[31];
  while (1)
  {
    v22[0] = &v20;
    v22[1] = 1;
    v21 = v16;
    v17 = v15[6];
    if (!v17)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v17 + 48))(v17, &v21, v22);
    v15 = (_QWORD *)*v15;
    if (!v15)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<arComponents::CompWrap<ggl::ConstantDataTyped<ggl::Tile::Transform>>>::contains(v18, v19);
}

BOOL gdc::ComponentStorageWrapper<arComponents::CompWrap<ggl::ConstantDataTyped<ggl::Tile::Transform>>>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void md::AssetInjectionLogic::~AssetInjectionLogic(md::AssetInjectionLogic *this)
{
  md::AssetInjectionLogic::~AssetInjectionLogic(this);
  JUMPOUT(0x1A1AF4E00);
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  _QWORD *v5;
  void *v6;
  _QWORD *v7;
  void *v8;
  _QWORD *v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  void *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;

  *(_QWORD *)this = &off_1E42967F8;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 26);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (_QWORD *)*((_QWORD *)this + 22);
    if (!v5)
      goto LABEL_8;
  }
  else
  {
LABEL_5:
    v5 = (_QWORD *)*((_QWORD *)this + 22);
    if (!v5)
      goto LABEL_8;
  }
  do
  {
    v14 = (_QWORD *)*v5;
    v15 = v5[3];
    if (v15)
    {
      v16 = v5[4];
      v13 = (void *)v5[3];
      if (v16 != v15)
      {
        do
        {
          v17 = *(std::__shared_weak_count **)(v16 - 8);
          if (v17)
          {
            v18 = (unint64_t *)&v17->__shared_owners_;
            do
              v19 = __ldaxr(v18);
            while (__stlxr(v19 - 1, v18));
            if (!v19)
            {
              ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
              std::__shared_weak_count::__release_weak(v17);
            }
          }
          v16 -= 16;
        }
        while (v16 != v15);
        v13 = (void *)v5[3];
      }
      v5[4] = v15;
      operator delete(v13);
    }
    operator delete(v5);
    v5 = v14;
  }
  while (v14);
LABEL_8:
  v6 = (void *)*((_QWORD *)this + 20);
  *((_QWORD *)this + 20) = 0;
  if (v6)
    operator delete(v6);
  v7 = (_QWORD *)*((_QWORD *)this + 17);
  while (v7)
  {
    v9 = v7;
    v7 = (_QWORD *)*v7;
    v10 = (std::__shared_weak_count *)v9[3];
    if (v10)
    {
      v11 = (unint64_t *)&v10->__shared_owners_;
      do
        v12 = __ldaxr(v11);
      while (__stlxr(v12 - 1, v11));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
    operator delete(v9);
  }
  v8 = (void *)*((_QWORD *)this + 15);
  *((_QWORD *)this + 15) = 0;
  if (v8)
    operator delete(v8);
  *(_QWORD *)this = off_1E42AFC70;
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((_QWORD **)this + 13));
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((_QWORD **)this + 10));
}

uint64_t md::Logic<md::AssetInjectionLogic,md::AssetInjectionContext,md::LogicDependencies<gdc::TypeList<md::SceneContext>,gdc::TypeList<>>>::_debugConsoleString@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _BYTE *a4@<X8>)
{
  _QWORD *v4;
  int8x8_t v5;
  uint8x8_t v6;
  unint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  if (*(_QWORD *)(a3 + 8) != 0xD77FB76AFC10A710 || !*(_QWORD *)(a3 + 32))
  {
    a4[23] = 0;
    *a4 = 0;
    return result;
  }
  v4 = *(_QWORD **)(a2 + 8);
  v5 = (int8x8_t)v4[1];
  if (!*(_QWORD *)&v5)
    goto LABEL_27;
  v6 = (uint8x8_t)vcnt_s8(v5);
  v6.i16[0] = vaddlv_u8(v6);
  if (v6.u32[0] > 1uLL)
  {
    v7 = 0x99BED48DEFBBD82BLL;
    if (*(_QWORD *)&v5 <= 0x99BED48DEFBBD82BLL)
      v7 = 0x99BED48DEFBBD82BLL % *(_QWORD *)&v5;
  }
  else
  {
    v7 = (*(_QWORD *)&v5 - 1) & 0x99BED48DEFBBD82BLL;
  }
  v8 = *(_QWORD **)(*v4 + 8 * v7);
  if (!v8)
    goto LABEL_27;
  v9 = (_QWORD *)*v8;
  if (!v9)
    goto LABEL_27;
  if (v6.u32[0] < 2uLL)
  {
    v10 = *(_QWORD *)&v5 - 1;
    while (1)
    {
      v12 = v9[1];
      if (v12 == 0x99BED48DEFBBD82BLL)
      {
        if (v9[2] == 0x99BED48DEFBBD82BLL)
          goto LABEL_25;
      }
      else if ((v12 & v10) != v7)
      {
        goto LABEL_27;
      }
      v9 = (_QWORD *)*v9;
      if (!v9)
        goto LABEL_27;
    }
  }
  while (1)
  {
    v11 = v9[1];
    if (v11 == 0x99BED48DEFBBD82BLL)
      break;
    if (v11 >= *(_QWORD *)&v5)
      v11 %= *(_QWORD *)&v5;
    if (v11 != v7)
      goto LABEL_27;
LABEL_14:
    v9 = (_QWORD *)*v9;
    if (!v9)
      goto LABEL_27;
  }
  if (v9[2] != 0x99BED48DEFBBD82BLL)
    goto LABEL_14;
LABEL_25:
  v13 = v9[5];
  if (*(_QWORD *)(v13 + 8) == 0x99BED48DEFBBD82BLL)
  {
    v14 = *(_QWORD *)(v13 + 32);
    goto LABEL_28;
  }
LABEL_27:
  v14 = 0;
LABEL_28:
  v15 = v14;
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 160))(result);
}

uint64_t md::Logic<md::AssetInjectionLogic,md::AssetInjectionContext,md::LogicDependencies<gdc::TypeList<md::SceneContext>,gdc::TypeList<>>>::frequency(uint64_t a1)
{
  return *(_QWORD *)(a1 + 64);
}

void md::Logic<md::AssetInjectionLogic,md::AssetInjectionContext,md::LogicDependencies<gdc::TypeList<md::SceneContext>,gdc::TypeList<>>>::debugConsoleString(uint64_t a1@<X0>, gdc::DebugTreeNode *a2@<X8>)
{
  void *v3;
  uint64_t v4;
  void *v5;
  void *v6[2];
  char v7;
  void *v8;
  char v9;
  void **v10;
  void *__p;
  void *v12;
  uint64_t v13;

  v13 = 0;
  (*(void (**)(void **__return_ptr, uint64_t, uint64_t *))(*(_QWORD *)a1 + 56))(v6, a1, &v13);
  gdc::DebugTreeNode::toString(a2, (uint64_t)v6);
  v3 = __p;
  if (__p)
  {
    v4 = (uint64_t)v12;
    v5 = __p;
    if (v12 != __p)
    {
      do
      {
        v4 -= 80;
        std::__destroy_at[abi:nn180100]<gdc::DebugTreeProperty,0>(v4);
      }
      while ((void *)v4 != v3);
      v5 = __p;
    }
    v12 = v3;
    operator delete(v5);
  }
  std::vector<gdc::DebugTreeNode>::~vector[abi:nn180100](&v10);
  if ((v9 & 0x80000000) == 0)
  {
    if ((v7 & 0x80000000) == 0)
      return;
LABEL_10:
    operator delete(v6[0]);
    return;
  }
  operator delete(v8);
  if (v7 < 0)
    goto LABEL_10;
}

_QWORD *std::__hash_table<std::__hash_value_type<unsigned short,std::vector<std::shared_ptr<md::InjectedAsset>>>,std::__unordered_map_hasher<unsigned short,std::__hash_value_type<unsigned short,std::vector<std::shared_ptr<md::InjectedAsset>>>,std::hash<unsigned short>,std::equal_to<unsigned short>,true>,std::__unordered_map_equal<unsigned short,std::__hash_value_type<unsigned short,std::vector<std::shared_ptr<md::InjectedAsset>>>,std::equal_to<unsigned short>,std::hash<unsigned short>,true>,std::allocator<std::__hash_value_type<unsigned short,std::vector<std::shared_ptr<md::InjectedAsset>>>>>::__emplace_unique_key_args<unsigned short,std::piecewise_construct_t const&,std::tuple<unsigned short const&>,std::tuple<>>(uint64_t *a1, unsigned __int16 a2, _WORD *a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  void **v9;
  _QWORD *v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  float v14;
  float v15;
  _BOOL8 v16;
  unint64_t v17;
  unint64_t v18;
  size_t prime;
  void *v20;
  void *v21;
  uint64_t v22;
  _QWORD *v23;
  size_t v24;
  size_t v25;
  size_t v26;
  _QWORD *i;
  size_t v28;
  uint64_t v29;
  unint64_t v30;
  uint8x8_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  size_t v35;
  uint64_t v36;
  _QWORD *v37;
  unint64_t v38;
  void *v40;

  v6 = a2;
  v7 = a1[1];
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = a2;
      if (v7 <= a2)
        v3 = a2 % v7;
    }
    else
    {
      v3 = ((_DWORD)v7 - 1) & a2;
    }
    v9 = *(void ***)(*a1 + 8 * v3);
    if (v9)
    {
      v10 = *v9;
      if (*v9)
      {
        if (v8.u32[0] < 2uLL)
        {
          while (1)
          {
            v12 = v10[1];
            if (v12 == a2)
            {
              if (*((unsigned __int16 *)v10 + 8) == a2)
                return v10;
            }
            else if ((v12 & (v7 - 1)) != v3)
            {
              goto LABEL_22;
            }
            v10 = (_QWORD *)*v10;
            if (!v10)
              goto LABEL_22;
          }
        }
        do
        {
          v11 = v10[1];
          if (v11 == a2)
          {
            if (*((unsigned __int16 *)v10 + 8) == a2)
              return v10;
          }
          else
          {
            if (v11 >= v7)
              v11 %= v7;
            if (v11 != v3)
              break;
          }
          v10 = (_QWORD *)*v10;
        }
        while (v10);
      }
    }
  }
LABEL_22:
  v13 = a1 + 2;
  v10 = operator new(0x30uLL);
  *v10 = 0;
  v10[1] = v6;
  *((_WORD *)v10 + 8) = *a3;
  v10[4] = 0;
  v10[5] = 0;
  v10[3] = 0;
  v14 = (float)(unint64_t)(a1[3] + 1);
  v15 = *((float *)a1 + 8);
  if (!v7 || (float)(v15 * (float)v7) < v14)
  {
    v16 = 1;
    if (v7 >= 3)
      v16 = (v7 & (v7 - 1)) != 0;
    v17 = v16 | (2 * v7);
    v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18)
      prime = v18;
    else
      prime = v17;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v7 = a1[1];
    }
    if (prime <= v7)
    {
      if (prime >= v7)
        goto LABEL_59;
      v30 = vcvtps_u32_f32((float)(unint64_t)a1[3] / *((float *)a1 + 8));
      if (v7 < 3 || (v31 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v31.i16[0] = vaddlv_u8(v31), v31.u32[0] > 1uLL))
      {
        v30 = std::__next_prime(v30);
      }
      else
      {
        v32 = 1 << -(char)__clz(v30 - 1);
        if (v30 >= 2)
          v30 = v32;
      }
      if (prime <= v30)
        prime = v30;
      if (prime >= v7)
      {
        v7 = a1[1];
LABEL_59:
        if ((v7 & (v7 - 1)) != 0)
        {
          if (v7 <= v6)
            v3 = v6 % v7;
          else
            v3 = v6;
        }
        else
        {
          v3 = ((_DWORD)v7 - 1) & v6;
        }
        goto LABEL_72;
      }
      if (!prime)
      {
        v40 = (void *)*a1;
        *a1 = 0;
        if (v40)
          operator delete(v40);
        v7 = 0;
        a1[1] = 0;
        goto LABEL_59;
      }
    }
    if (prime >> 61)
      std::__throw_bad_array_new_length[abi:nn180100]();
    v20 = operator new(8 * prime);
    v21 = (void *)*a1;
    *a1 = (uint64_t)v20;
    if (v21)
      operator delete(v21);
    v22 = 0;
    a1[1] = prime;
    do
      *(_QWORD *)(*a1 + 8 * v22++) = 0;
    while (prime != v22);
    v23 = (_QWORD *)*v13;
    if (!*v13)
    {
LABEL_58:
      v7 = prime;
      goto LABEL_59;
    }
    v24 = v23[1];
    v25 = prime - 1;
    if ((prime & (prime - 1)) == 0)
    {
      v26 = v24 & v25;
      *(_QWORD *)(*a1 + 8 * v26) = v13;
      for (i = (_QWORD *)*v23; *v23; i = (_QWORD *)*v23)
      {
        v28 = i[1] & v25;
        if (v28 == v26)
        {
          v23 = i;
        }
        else if (*(_QWORD *)(*a1 + 8 * v28))
        {
          *v23 = *i;
          v29 = 8 * v28;
          *i = **(_QWORD **)(*a1 + v29);
          **(_QWORD **)(*a1 + v29) = i;
        }
        else
        {
          *(_QWORD *)(*a1 + 8 * v28) = v23;
          v23 = i;
          v26 = v28;
        }
      }
      goto LABEL_58;
    }
    if (v24 >= prime)
      v24 %= prime;
    *(_QWORD *)(*a1 + 8 * v24) = v13;
    v33 = (_QWORD *)*v23;
    if (!*v23)
      goto LABEL_58;
    while (1)
    {
      v35 = v33[1];
      if (v35 >= prime)
        v35 %= prime;
      if (v35 != v24)
      {
        if (!*(_QWORD *)(*a1 + 8 * v35))
        {
          *(_QWORD *)(*a1 + 8 * v35) = v23;
          goto LABEL_63;
        }
        *v23 = *v33;
        v34 = 8 * v35;
        *v33 = **(_QWORD **)(*a1 + v34);
        **(_QWORD **)(*a1 + v34) = v33;
        v33 = v23;
      }
      v35 = v24;
LABEL_63:
      v23 = v33;
      v33 = (_QWORD *)*v33;
      v24 = v35;
      if (!v33)
        goto LABEL_58;
    }
  }
LABEL_72:
  v36 = *a1;
  v37 = *(_QWORD **)(*a1 + 8 * v3);
  if (v37)
  {
    *v10 = *v37;
LABEL_80:
    *v37 = v10;
    goto LABEL_81;
  }
  *v10 = *v13;
  *v13 = v10;
  *(_QWORD *)(v36 + 8 * v3) = v13;
  if (*v10)
  {
    v38 = *(_QWORD *)(*v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v38 >= v7)
        v38 %= v7;
    }
    else
    {
      v38 &= v7 - 1;
    }
    v37 = (_QWORD *)(*a1 + 8 * v38);
    goto LABEL_80;
  }
LABEL_81:
  ++a1[3];
  return v10;
}

void sub_19F93C5E0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<unsigned short,std::vector<std::shared_ptr<md::InjectedAsset>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned short,std::vector<std::shared_ptr<md::InjectedAsset>>>,void *>>>>::~unique_ptr[abi:nn180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::__hash_table<std::shared_ptr<md::InjectedAsset>,std::hash<std::shared_ptr<md::InjectedAsset>>,std::equal_to<std::shared_ptr<md::InjectedAsset>>,std::allocator<std::shared_ptr<md::InjectedAsset>>>::__emplace_unique_key_args<std::shared_ptr<md::InjectedAsset>,std::shared_ptr<md::InjectedAsset> const&>(uint64_t *a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint8x8_t v13;
  _QWORD *v14;
  _QWORD *v15;
  unint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  unint64_t *v20;
  unint64_t v21;
  float v22;
  float v23;
  _BOOL8 v24;
  unint64_t v25;
  unint64_t v26;
  size_t prime;
  void *v28;
  void *v29;
  uint64_t v30;
  _QWORD *v31;
  size_t v32;
  size_t v33;
  size_t v34;
  _QWORD *i;
  size_t v36;
  uint64_t v37;
  unint64_t v38;
  uint8x8_t v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  size_t v43;
  uint64_t v44;
  _QWORD *v45;
  unint64_t v46;
  void *v47;

  v8 = 0x9DDFEA08EB382D69 * (((8 * a2) + 8) ^ HIDWORD(a2));
  v9 = 0x9DDFEA08EB382D69 * (HIDWORD(a2) ^ (v8 >> 47) ^ v8);
  v10 = v9 ^ (v9 >> 47);
  v11 = 0x9DDFEA08EB382D69 * v10;
  v12 = a1[1];
  if (v12)
  {
    v13 = (uint8x8_t)vcnt_s8((int8x8_t)v12);
    v13.i16[0] = vaddlv_u8(v13);
    if (v13.u32[0] > 1uLL)
    {
      v4 = 0x9DDFEA08EB382D69 * v10;
      if (v11 >= v12)
        v4 = v11 % v12;
    }
    else
    {
      v4 = v11 & (v12 - 1);
    }
    v14 = *(_QWORD **)(*a1 + 8 * v4);
    if (v14)
    {
      v15 = (_QWORD *)*v14;
      if (v15)
      {
        if (v13.u32[0] < 2uLL)
        {
          while (1)
          {
            v17 = v15[1];
            if (v17 == v11)
            {
              if (v15[2] == a2)
                return;
            }
            else if ((v17 & (v12 - 1)) != v4)
            {
              goto LABEL_22;
            }
            v15 = (_QWORD *)*v15;
            if (!v15)
              goto LABEL_22;
          }
        }
        do
        {
          v16 = v15[1];
          if (v16 == v11)
          {
            if (v15[2] == a2)
              return;
          }
          else
          {
            if (v16 >= v12)
              v16 %= v12;
            if (v16 != v4)
              break;
          }
          v15 = (_QWORD *)*v15;
        }
        while (v15);
      }
    }
  }
LABEL_22:
  v18 = a1 + 2;
  v19 = operator new(0x20uLL);
  *v19 = 0;
  v19[1] = v11;
  v19[2] = a3;
  v19[3] = a4;
  if (a4)
  {
    v20 = (unint64_t *)(a4 + 8);
    do
      v21 = __ldxr(v20);
    while (__stxr(v21 + 1, v20));
  }
  v22 = (float)(unint64_t)(a1[3] + 1);
  v23 = *((float *)a1 + 8);
  if (!v12 || (float)(v23 * (float)v12) < v22)
  {
    v24 = 1;
    if (v12 >= 3)
      v24 = (v12 & (v12 - 1)) != 0;
    v25 = v24 | (2 * v12);
    v26 = vcvtps_u32_f32(v22 / v23);
    if (v25 <= v26)
      prime = v26;
    else
      prime = v25;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
    }
    v12 = a1[1];
    if (prime <= v12)
    {
      if (prime >= v12)
        goto LABEL_62;
      v38 = vcvtps_u32_f32((float)(unint64_t)a1[3] / *((float *)a1 + 8));
      if (v12 < 3 || (v39 = (uint8x8_t)vcnt_s8((int8x8_t)v12), v39.i16[0] = vaddlv_u8(v39), v39.u32[0] > 1uLL))
      {
        v38 = std::__next_prime(v38);
      }
      else
      {
        v40 = 1 << -(char)__clz(v38 - 1);
        if (v38 >= 2)
          v38 = v40;
      }
      if (prime <= v38)
        prime = v38;
      if (prime >= v12)
      {
        v12 = a1[1];
LABEL_62:
        if ((v12 & (v12 - 1)) != 0)
        {
          if (v11 >= v12)
            v4 = v11 % v12;
          else
            v4 = v11;
        }
        else
        {
          v4 = (v12 - 1) & v11;
        }
        goto LABEL_75;
      }
      if (!prime)
      {
        v47 = (void *)*a1;
        *a1 = 0;
        if (v47)
          operator delete(v47);
        v12 = 0;
        a1[1] = 0;
        goto LABEL_62;
      }
    }
    if (prime >> 61)
      std::__throw_bad_array_new_length[abi:nn180100]();
    v28 = operator new(8 * prime);
    v29 = (void *)*a1;
    *a1 = (uint64_t)v28;
    if (v29)
      operator delete(v29);
    v30 = 0;
    a1[1] = prime;
    do
      *(_QWORD *)(*a1 + 8 * v30++) = 0;
    while (prime != v30);
    v31 = (_QWORD *)*v18;
    if (!*v18)
    {
LABEL_61:
      v12 = prime;
      goto LABEL_62;
    }
    v32 = v31[1];
    v33 = prime - 1;
    if ((prime & (prime - 1)) == 0)
    {
      v34 = v32 & v33;
      *(_QWORD *)(*a1 + 8 * v34) = v18;
      for (i = (_QWORD *)*v31; *v31; i = (_QWORD *)*v31)
      {
        v36 = i[1] & v33;
        if (v36 == v34)
        {
          v31 = i;
        }
        else if (*(_QWORD *)(*a1 + 8 * v36))
        {
          *v31 = *i;
          v37 = 8 * v36;
          *i = **(_QWORD **)(*a1 + v37);
          **(_QWORD **)(*a1 + v37) = i;
        }
        else
        {
          *(_QWORD *)(*a1 + 8 * v36) = v31;
          v31 = i;
          v34 = v36;
        }
      }
      goto LABEL_61;
    }
    if (v32 >= prime)
      v32 %= prime;
    *(_QWORD *)(*a1 + 8 * v32) = v18;
    v41 = (_QWORD *)*v31;
    if (!*v31)
      goto LABEL_61;
    while (1)
    {
      v43 = v41[1];
      if (v43 >= prime)
        v43 %= prime;
      if (v43 != v32)
      {
        if (!*(_QWORD *)(*a1 + 8 * v43))
        {
          *(_QWORD *)(*a1 + 8 * v43) = v31;
          goto LABEL_66;
        }
        *v31 = *v41;
        v42 = 8 * v43;
        *v41 = **(_QWORD **)(*a1 + v42);
        **(_QWORD **)(*a1 + v42) = v41;
        v41 = v31;
      }
      v43 = v32;
LABEL_66:
      v31 = v41;
      v41 = (_QWORD *)*v41;
      v32 = v43;
      if (!v41)
        goto LABEL_61;
    }
  }
LABEL_75:
  v44 = *a1;
  v45 = *(_QWORD **)(*a1 + 8 * v4);
  if (v45)
  {
    *v19 = *v45;
LABEL_83:
    *v45 = v19;
    goto LABEL_84;
  }
  *v19 = *v18;
  *v18 = v19;
  *(_QWORD *)(v44 + 8 * v4) = v18;
  if (*v19)
  {
    v46 = *(_QWORD *)(*v19 + 8);
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v46 >= v12)
        v46 %= v12;
    }
    else
    {
      v46 &= v12 - 1;
    }
    v45 = (_QWORD *)(*a1 + 8 * v46);
    goto LABEL_83;
  }
LABEL_84:
  ++a1[3];
}

void sub_19F93CAA0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::shared_ptr<md::InjectedAsset>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::shared_ptr<md::InjectedAsset>,void *>>>>::~unique_ptr[abi:nn180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::unique_ptr<std::__hash_node<std::shared_ptr<md::InjectedAsset>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::shared_ptr<md::InjectedAsset>,void *>>>>::~unique_ptr[abi:nn180100](uint64_t a1)
{
  _QWORD *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  v2 = *(_QWORD **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
    {
      v3 = (std::__shared_weak_count *)v2[3];
      if (v3)
      {
        p_shared_owners = (unint64_t *)&v3->__shared_owners_;
        do
          v5 = __ldaxr(p_shared_owners);
        while (__stlxr(v5 - 1, p_shared_owners));
        if (!v5)
        {
          ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
          std::__shared_weak_count::__release_weak(v3);
        }
      }
    }
    operator delete(v2);
  }
  return a1;
}

uint64_t std::unique_ptr<std::__hash_node<std::__hash_value_type<unsigned short,std::vector<std::shared_ptr<md::InjectedAsset>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned short,std::vector<std::shared_ptr<md::InjectedAsset>>>,void *>>>>::~unique_ptr[abi:nn180100](uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;

  v2 = *(_QWORD **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
    {
      v3 = v2[3];
      if (v3)
      {
        v4 = v2[4];
        v5 = (void *)v2[3];
        if (v4 != v3)
        {
          do
          {
            v6 = *(std::__shared_weak_count **)(v4 - 8);
            if (v6)
            {
              p_shared_owners = (unint64_t *)&v6->__shared_owners_;
              do
                v8 = __ldaxr(p_shared_owners);
              while (__stlxr(v8 - 1, p_shared_owners));
              if (!v8)
              {
                ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
                std::__shared_weak_count::__release_weak(v6);
              }
            }
            v4 -= 16;
          }
          while (v4 != v3);
          v5 = (void *)v2[3];
        }
        v2[4] = v3;
        operator delete(v5);
      }
    }
    operator delete(v2);
  }
  return a1;
}

void md::AssetInjectionContext::~AssetInjectionContext(md::AssetInjectionContext *this)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;
  _QWORD *v5;
  _QWORD *v6;
  void *v7;

  v2 = (_QWORD *)*((_QWORD *)this + 7);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = (void *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v4)
    operator delete(v4);
  v5 = (_QWORD *)*((_QWORD *)this + 2);
  if (v5)
  {
    do
    {
      v6 = (_QWORD *)*v5;
      operator delete(v5);
      v5 = v6;
    }
    while (v6);
  }
  v7 = *(void **)this;
  *(_QWORD *)this = 0;
  if (v7)
    operator delete(v7);
}

void gdc::ManagedObjectHolder<md::AssetInjectionContext>::~ManagedObjectHolder(_QWORD *a1)
{
  gdc::ManagedObjectHolder<md::AssetInjectionContext>::~ManagedObjectHolder(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t gdc::ObjectHolder<md::AssetInjectionContext>::extract@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 32);
  *(_QWORD *)(result + 32) = 0;
  *a2 = v2;
  return result;
}

_QWORD *gdc::ManagedObjectHolder<md::AssetInjectionContext>::~ManagedObjectHolder(_QWORD *a1)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  void *v5;
  _QWORD *v6;
  _QWORD *v7;
  void *v8;

  *a1 = &off_1E42B10B8;
  v2 = a1[4];
  if (v2)
  {
    v3 = *(_QWORD **)(v2 + 56);
    if (v3)
    {
      do
      {
        v4 = (_QWORD *)*v3;
        operator delete(v3);
        v3 = v4;
      }
      while (v4);
    }
    v5 = *(void **)(v2 + 40);
    *(_QWORD *)(v2 + 40) = 0;
    if (v5)
      operator delete(v5);
    v6 = *(_QWORD **)(v2 + 16);
    if (v6)
    {
      do
      {
        v7 = (_QWORD *)*v6;
        operator delete(v6);
        v6 = v7;
      }
      while (v7);
    }
    v8 = *(void **)v2;
    *(_QWORD *)v2 = 0;
    if (v8)
      operator delete(v8);
    MEMORY[0x1A1AF4E00](v2, 0x10A0C40864A76ABLL);
  }
  return a1;
}

void std::__shared_ptr_emplace<md::InjectedAsset>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DAFD8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<md::InjectedAsset>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DAFD8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_emplace<md::InjectedAsset>::__on_zero_shared(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 104);
  if (v2)
  {
    *(_QWORD *)(a1 + 112) = v2;
    operator delete(v2);
  }
}

void std::__shared_ptr_pointer<ggl::VSLibrary *,std::shared_ptr<ggl::VSLibrary>::__shared_ptr_default_delete<ggl::VSLibrary,ggl::VSLibrary>,std::allocator<ggl::VSLibrary>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_pointer<ggl::VSLibrary *,std::shared_ptr<ggl::VSLibrary>::__shared_ptr_default_delete<ggl::VSLibrary,ggl::VSLibrary>,std::allocator<ggl::VSLibrary>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void std::__shared_ptr_pointer<ggl::FlyoverLibrary *,std::shared_ptr<ggl::FlyoverLibrary>::__shared_ptr_default_delete<ggl::FlyoverLibrary,ggl::FlyoverLibrary>,std::allocator<ggl::FlyoverLibrary>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_pointer<ggl::FlyoverLibrary *,std::shared_ptr<ggl::FlyoverLibrary>::__shared_ptr_default_delete<ggl::FlyoverLibrary,ggl::FlyoverLibrary>,std::allocator<ggl::FlyoverLibrary>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void std::__shared_ptr_pointer<ggl::StandardLibrary *,std::shared_ptr<ggl::StandardLibrary>::__shared_ptr_default_delete<ggl::StandardLibrary,ggl::StandardLibrary>,std::allocator<ggl::StandardLibrary>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_pointer<ggl::StandardLibrary *,std::shared_ptr<ggl::StandardLibrary>::__shared_ptr_default_delete<ggl::StandardLibrary,ggl::StandardLibrary>,std::allocator<ggl::StandardLibrary>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void std::__shared_ptr_pointer<ggl::CommonLibrary *,std::shared_ptr<ggl::CommonLibrary>::__shared_ptr_default_delete<ggl::CommonLibrary,ggl::CommonLibrary>,std::allocator<ggl::CommonLibrary>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_pointer<ggl::CommonLibrary *,std::shared_ptr<ggl::CommonLibrary>::__shared_ptr_default_delete<ggl::CommonLibrary,ggl::CommonLibrary>,std::allocator<ggl::CommonLibrary>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t md::SharedDeviceResources::SharedDeviceResources(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t *a6)
{
  uint64_t v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  unsigned __int8 v22;
  _QWORD *v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  uint64_t v32;
  unint64_t *v33;
  unint64_t v34;
  _QWORD *v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  unint64_t *v44;
  unint64_t v45;
  unsigned __int8 v46;
  _QWORD *v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  unint64_t *v56;
  unint64_t v57;
  unsigned __int8 v58;
  _QWORD *v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;
  unsigned __int8 v67;
  unsigned __int8 v68;
  unsigned __int8 v69;
  unsigned __int8 v70;
  unsigned __int8 v71;
  unsigned __int8 v72;
  unsigned __int8 v73;
  unsigned __int8 v74;
  unsigned __int8 v75;
  unsigned __int8 v76;
  unsigned __int8 v77;
  unsigned __int8 v78;
  unsigned __int8 v79;
  unsigned __int8 v80;
  unsigned __int8 v81;
  unsigned __int8 v82;
  unsigned __int8 v83;
  unsigned __int8 v84;
  unsigned __int8 v85;
  unsigned __int8 v86;
  unsigned __int8 v87;
  unsigned __int8 v88;
  ggl::ClearShader *v89;
  unsigned __int8 v90;
  ggl::ColoredTextShader *v91;
  unsigned __int8 v92;
  unsigned __int8 v93;
  unsigned __int8 v94;
  ggl::ShadedColorShader *v95;
  ggl::TextureRectShader *v96;
  unsigned __int8 v97;
  unsigned __int8 v98;
  unsigned __int8 v99;
  unsigned __int8 v100;
  unsigned __int8 v101;
  unsigned __int8 v102;
  unsigned __int8 v103;
  unsigned __int8 v104;
  unsigned __int8 v105;
  unsigned __int8 v106;
  unsigned __int8 v107;
  unsigned __int8 v108;
  unsigned __int8 v109;
  unsigned __int8 v110;
  unsigned __int8 v111;
  unsigned __int8 v112;
  unsigned __int8 v113;
  unsigned __int8 v114;
  unsigned __int8 v115;
  unsigned __int8 v116;
  unsigned __int8 v117;
  unsigned __int8 v118;
  unsigned __int8 v119;
  unsigned __int8 v120;
  unsigned __int8 v121;
  unsigned __int8 v122;
  unsigned __int8 v123;
  unsigned __int8 v124;
  unsigned __int8 v125;
  unsigned __int8 v126;
  unsigned __int8 v127;
  unsigned __int8 v128;
  unsigned __int8 v129;
  unsigned __int8 v130;
  unsigned __int8 v131;
  unsigned __int8 v132;
  unsigned __int8 v133;
  unsigned __int8 v134;
  unsigned __int8 v135;
  unsigned __int8 v136;
  unsigned __int8 v137;
  unsigned __int8 v138;
  unsigned __int8 v139;
  unsigned __int8 v140;
  unsigned __int8 v141;
  unsigned __int8 v142;
  unsigned __int8 v143;
  unsigned __int8 v144;
  unsigned __int8 v145;
  unsigned __int8 v146;
  unsigned __int8 v147;
  unsigned __int8 v148;
  unsigned __int8 v149;
  unsigned __int8 v150;
  unsigned __int8 v151;
  unsigned __int8 v152;
  unsigned __int8 v153;
  unsigned __int8 v154;
  unsigned __int8 v155;
  unsigned __int8 v156;
  unsigned __int8 v157;
  unsigned __int8 v158;
  unsigned __int8 v159;
  unsigned __int8 v160;
  ggl::EarthCoronaShader *v161;
  ggl::EndOfWorldShader *v162;
  ggl::FlyoverShader *v163;
  ggl::FlyoverPolarShader *v164;
  ggl::FlyoverBorderShader *v165;
  ggl::FlyoverBorderRibbonShader *v166;
  ggl::FlyoverManeuverShader *v167;
  ggl::FlyoverMaskedShader *v168;
  ggl::FlyoverMorphShader *v169;
  ggl::FlyoverMorphBorderShader *v170;
  ggl::FlyoverMorphNightShader *v171;
  ggl::FlyoverNightShader *v172;
  ggl::FlyoverNightPolarShader *v173;
  ggl::FlyoverNightDimShader *v174;
  ggl::FlyoverOverlayShader *v175;
  ggl::FlyoverPostchainBGBlurShader *v176;
  unsigned __int8 v177;
  unsigned __int8 v178;
  unsigned __int8 v179;
  ggl::FlyoverPostchainFGBlurShader *v180;
  ggl::FlyoverRoadFillTexturedShader *v181;
  unsigned __int8 v182;
  unsigned __int8 v183;
  ggl::FlyoverRouteShader *v184;
  unsigned __int8 v185;
  unsigned __int8 v186;
  ggl::FlyoverTrafficShader *v187;
  ggl::SolidLineShader *v188;
  ggl::StarsShader *v189;
  ggl::StenciledAlphaClearShader *v190;
  ggl::TileBaseSurfaceShader *v191;
  ggl::ImageCopyShader *v192;
  unsigned __int8 v193;
  unsigned __int8 v194;
  unsigned __int8 v195;
  unsigned __int8 v196;
  unsigned __int8 v197;
  unsigned __int8 v198;
  unsigned __int8 v199;
  unsigned __int8 v200;
  unsigned __int8 v201;
  unsigned __int8 v202;
  unsigned __int8 v203;
  unsigned __int8 v204;
  unsigned __int8 v205;
  unsigned __int8 v206;
  unsigned __int8 v207;
  unsigned __int8 v208;
  ggl::ViewShader *v209;
  ggl::ViewStretchAlphaShader *v210;
  ggl::BlurXShader *v211;
  ggl::BlurYShader *v212;
  ggl::ShrinkBlur4XShader *v213;
  ggl::VSCompositingShader *v214;
  ggl::VSPassthroughShader *v215;
  ggl::VSSpriteShader *v216;
  int v217;
  int v218;
  int v219;
  unsigned __int8 v220;
  unsigned __int8 v221;
  unsigned __int8 v222;
  unsigned __int8 v223;
  unsigned __int8 v224;
  unsigned __int8 v225;
  unsigned __int8 v226;
  unsigned __int8 v227;
  int v228;
  int v229;
  int v230;
  int v231;
  int v232;
  int v233;
  int v234;
  int v235;
  int v236;
  int v237;
  int v238;
  int v239;
  int v240;
  int v241;
  int v242;
  int v243;
  int v244;
  int v245;
  int v246;
  int v247;
  int v248;
  int v249;
  int v250;
  int v251;
  int v252;
  int v253;
  int v254;
  int v255;
  int v256;
  int v257;
  int v258;
  int v259;
  int v260;
  int v261;
  int v262;
  int v263;
  unsigned __int8 v264;
  int v265;
  unsigned __int8 v266;
  unsigned __int8 v267;
  unsigned __int8 v268;
  unsigned __int8 v269;
  unsigned __int8 v270;
  unsigned __int8 v271;
  int v272;
  unsigned __int8 v273;
  unsigned __int8 v274;
  int v275;
  unsigned __int8 v276;
  unsigned __int8 v277;
  unsigned __int8 v278;
  unsigned __int8 v279;
  int v280;
  unsigned __int8 v281;
  int v282;
  int v283;
  int v284;
  int v285;
  int v286;
  int v287;
  int v288;
  int v289;
  int v290;
  int v291;
  uint64_t v292;
  std::__shared_weak_count *v293;
  uint64_t v294;
  std::__shared_weak_count *v295;
  uint64_t v296;
  std::__shared_weak_count *v297;
  uint64_t v298;
  std::__shared_weak_count *v299;

  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  v11 = *a2;
  v12 = a2[1];
  if (v12)
  {
    v13 = (unint64_t *)(v12 + 8);
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
    v15 = *(std::__shared_weak_count **)(a1 + 72);
    *(_QWORD *)(a1 + 64) = v11;
    *(_QWORD *)(a1 + 72) = v12;
    if (v15)
    {
      p_shared_owners = (unint64_t *)&v15->__shared_owners_;
      do
        v17 = __ldaxr(p_shared_owners);
      while (__stlxr(v17 - 1, p_shared_owners));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
        std::__shared_weak_count::__release_weak(v15);
      }
    }
  }
  else
  {
    *(_QWORD *)(a1 + 64) = v11;
    *(_QWORD *)(a1 + 72) = 0;
  }
  v18 = (_QWORD *)operator new();
  v19 = a3[1];
  v298 = *a3;
  v299 = (std::__shared_weak_count *)v19;
  if (v19)
  {
    v20 = (unint64_t *)(v19 + 8);
    do
      v21 = __ldxr(v20);
    while (__stxr(v21 + 1, v20));
  }
  {
    ggl::CommonLibrary::typedReflection(void)::desc = (uint64_t)"CommonLibrary";
    dword_1ECE39100 = 1598463683;
    {
      if ((v73 & 1) == 0
      {
        ggl::clearDepthStencilShaderVertexFunctionDescriptor(void)::ref = ggl::crc32::compute<30ul>("ClearDepthStencilShaderVertex");
        *(_DWORD *)algn_1ECE452AC = 0;
        qword_1ECE452B0 = (uint64_t)"ClearDepthStencilShader";
        unk_1ECE452B8 = ggl::clearDepthStencilShaderVertShaderFunctionAttributes(void)::ref;
        qword_1ECE452C0 = 1;
        unk_1ECE452C8 = &ggl::clearDepthStencilShaderVertShaderFunctionConstantMapping(void)::ref;
        qword_1ECE452D0 = 1;
        unk_1ECE452D8 = &ggl::clearDepthStencilShaderVertShaderFunctionBufferMapping(void)::ref;
        qword_1ECE452E0 = 0;
        unk_1ECE452E8 = &ggl::clearDepthStencilShaderVertShaderFunctionTextureMapping(void)::ref;
        qword_1ECE452F0 = 0;
        unk_1ECE452F8 = &ggl::clearDepthStencilShaderVertShaderFunctionSamplerMapping(void)::ref;
        qword_1ECE45308 = 0;
        unk_1ECE45310 = 0;
        qword_1ECE45300 = 0;
      }
      CommonLibraryShaderFunctions(void)::desc = (uint64_t)&ggl::clearDepthStencilShaderVertexFunctionDescriptor(void)::ref;
      if ((v74 & 1) == 0
      {
        ggl::clearDepthStencilShaderFragmentFunctionDescriptor(void)::ref = ggl::crc32::compute<32ul>("ClearDepthStencilShaderFragment");
        *(_DWORD *)algn_1ECE658B4 = 1;
        qword_1ECE658B8 = (uint64_t)"ClearDepthStencilShader";
        unk_1ECE658C0 = 0;
        qword_1ECE658C8 = 0;
        unk_1ECE658D0 = &ggl::clearDepthStencilShaderFragShaderFunctionConstantMapping(void)::ref;
        qword_1ECE658D8 = 1;
        unk_1ECE658E0 = &ggl::clearDepthStencilShaderFragShaderFunctionBufferMapping(void)::ref;
        qword_1ECE658E8 = 0;
        unk_1ECE658F0 = &ggl::clearDepthStencilShaderFragShaderFunctionTextureMapping(void)::ref;
        qword_1ECE658F8 = 0;
        unk_1ECE65900 = &ggl::clearDepthStencilShaderFragShaderFunctionSamplerMapping(void)::ref;
        qword_1ECE65910 = 0;
        unk_1ECE65918 = 0;
        qword_1ECE65908 = 0;
      }
      qword_1ECE36B58 = (uint64_t)&ggl::clearDepthStencilShaderFragmentFunctionDescriptor(void)::ref;
      if ((v75 & 1) == 0
      {
        ggl::clearShaderVertexFunctionDescriptor(void)::ref = ggl::crc32::compute<18ul>("ClearShaderVertex");
        *(_DWORD *)algn_1ECE6574C = 0;
        qword_1ECE65750 = (uint64_t)"ClearShader";
        unk_1ECE65758 = ggl::clearShaderVertShaderFunctionAttributes(void)::ref;
        qword_1ECE65760 = 1;
        unk_1ECE65768 = &ggl::clearShaderVertShaderFunctionConstantMapping(void)::ref;
        qword_1ECE65770 = 1;
        unk_1ECE65778 = &ggl::clearShaderVertShaderFunctionBufferMapping(void)::ref;
        qword_1ECE65780 = 0;
        unk_1ECE65788 = &ggl::clearShaderVertShaderFunctionTextureMapping(void)::ref;
        qword_1ECE65790 = 0;
        unk_1ECE65798 = &ggl::clearShaderVertShaderFunctionSamplerMapping(void)::ref;
        qword_1ECE657A8 = 0;
        unk_1ECE657B0 = 0;
        qword_1ECE657A0 = 0;
      }
      qword_1ECE36B60 = (uint64_t)&ggl::clearShaderVertexFunctionDescriptor(void)::ref;
      if ((v76 & 1) == 0
      {
        ggl::clearShaderFragmentFunctionDescriptor(void)::ref = ggl::crc32::compute<20ul>("ClearShaderFragment");
        *(_DWORD *)algn_1ECE44FF4 = 1;
        qword_1ECE44FF8 = (uint64_t)"ClearShader";
        unk_1ECE45000 = 0;
        qword_1ECE45008 = 0;
        unk_1ECE45010 = &ggl::clearShaderFragShaderFunctionConstantMapping(void)::ref;
        qword_1ECE45018 = 1;
        unk_1ECE45020 = &ggl::clearShaderFragShaderFunctionBufferMapping(void)::ref;
        qword_1ECE45028 = 0;
        unk_1ECE45030 = &ggl::clearShaderFragShaderFunctionTextureMapping(void)::ref;
        qword_1ECE45038 = 0;
        unk_1ECE45040 = &ggl::clearShaderFragShaderFunctionSamplerMapping(void)::ref;
        qword_1ECE45050 = 0;
        unk_1ECE45058 = 0;
        qword_1ECE45048 = 0;
      }
      qword_1ECE36B68 = (uint64_t)&ggl::clearShaderFragmentFunctionDescriptor(void)::ref;
      if ((v77 & 1) == 0
      {
        ggl::clear2ShaderVertexFunctionDescriptor(void)::ref = ggl::crc32::compute<19ul>("Clear2ShaderVertex");
        *(_DWORD *)algn_1ECE657C4 = 0;
        qword_1ECE657C8 = (uint64_t)"Clear2Shader";
        unk_1ECE657D0 = ggl::clear2ShaderVertShaderFunctionAttributes(void)::ref;
        qword_1ECE657D8 = 1;
        unk_1ECE657E0 = &ggl::clear2ShaderVertShaderFunctionConstantMapping(void)::ref;
        qword_1ECE657E8 = 1;
        unk_1ECE657F0 = &ggl::clear2ShaderVertShaderFunctionBufferMapping(void)::ref;
        qword_1ECE657F8 = 0;
        unk_1ECE65800 = &ggl::clear2ShaderVertShaderFunctionTextureMapping(void)::ref;
        qword_1ECE65808 = 0;
        unk_1ECE65810 = &ggl::clear2ShaderVertShaderFunctionSamplerMapping(void)::ref;
        qword_1ECE65820 = 0;
        unk_1ECE65828 = 0;
        qword_1ECE65818 = 0;
      }
      qword_1ECE36B70 = (uint64_t)&ggl::clear2ShaderVertexFunctionDescriptor(void)::ref;
      if ((v78 & 1) == 0
      {
        ggl::clear2ShaderFragmentFunctionDescriptor(void)::ref = ggl::crc32::compute<21ul>("Clear2ShaderFragment");
        *(_DWORD *)algn_1ECE4506C = 1;
        qword_1ECE45070 = (uint64_t)"Clear2Shader";
        unk_1ECE45078 = 0;
        qword_1ECE45080 = 0;
        unk_1ECE45088 = &ggl::clear2ShaderFragShaderFunctionConstantMapping(void)::ref;
        qword_1ECE45090 = 1;
        unk_1ECE45098 = &ggl::clear2ShaderFragShaderFunctionBufferMapping(void)::ref;
        qword_1ECE450A0 = 0;
        unk_1ECE450A8 = &ggl::clear2ShaderFragShaderFunctionTextureMapping(void)::ref;
        qword_1ECE450B0 = 0;
        unk_1ECE450B8 = &ggl::clear2ShaderFragShaderFunctionSamplerMapping(void)::ref;
        qword_1ECE450C8 = 0;
        unk_1ECE450D0 = 0;
        qword_1ECE450C0 = 0;
      }
      qword_1ECE36B78 = (uint64_t)&ggl::clear2ShaderFragmentFunctionDescriptor(void)::ref;
      if ((v79 & 1) == 0
      {
        ggl::clear3ShaderVertexFunctionDescriptor(void)::ref = ggl::crc32::compute<19ul>("Clear3ShaderVertex");
        *(_DWORD *)algn_1ECE44F84 = 0;
        qword_1ECE44F88 = (uint64_t)"Clear3Shader";
        unk_1ECE44F90 = ggl::clear3ShaderVertShaderFunctionAttributes(void)::ref;
        qword_1ECE44F98 = 1;
        unk_1ECE44FA0 = &ggl::clear3ShaderVertShaderFunctionConstantMapping(void)::ref;
        qword_1ECE44FA8 = 1;
        unk_1ECE44FB0 = &ggl::clear3ShaderVertShaderFunctionBufferMapping(void)::ref;
        qword_1ECE44FB8 = 0;
        unk_1ECE44FC0 = &ggl::clear3ShaderVertShaderFunctionTextureMapping(void)::ref;
        qword_1ECE44FC8 = 0;
        unk_1ECE44FD0 = &ggl::clear3ShaderVertShaderFunctionSamplerMapping(void)::ref;
        qword_1ECE44FE0 = 0;
        unk_1ECE44FE8 = 0;
        qword_1ECE44FD8 = 0;
      }
      qword_1ECE36B80 = (uint64_t)&ggl::clear3ShaderVertexFunctionDescriptor(void)::ref;
      if ((v80 & 1) == 0
      {
        ggl::clear3ShaderFragmentFunctionDescriptor(void)::ref = ggl::crc32::compute<21ul>("Clear3ShaderFragment");
        *(_DWORD *)algn_1ECE3D07C = 1;
        qword_1ECE3D080 = (uint64_t)"Clear3Shader";
        unk_1ECE3D088 = 0;
        qword_1ECE3D090 = 0;
        unk_1ECE3D098 = &ggl::clear3ShaderFragShaderFunctionConstantMapping(void)::ref;
        qword_1ECE3D0A0 = 1;
        unk_1ECE3D0A8 = &ggl::clear3ShaderFragShaderFunctionBufferMapping(void)::ref;
        qword_1ECE3D0B0 = 0;
        unk_1ECE3D0B8 = &ggl::clear3ShaderFragShaderFunctionTextureMapping(void)::ref;
        qword_1ECE3D0C0 = 0;
        unk_1ECE3D0C8 = &ggl::clear3ShaderFragShaderFunctionSamplerMapping(void)::ref;
        qword_1ECE3D0D8 = 0;
        unk_1ECE3D0E0 = 0;
        qword_1ECE3D0D0 = 0;
      }
      qword_1ECE36B88 = (uint64_t)&ggl::clear3ShaderFragmentFunctionDescriptor(void)::ref;
      if ((v81 & 1) == 0
      {
        ggl::clear4ShaderVertexFunctionDescriptor(void)::ref = ggl::crc32::compute<19ul>("Clear4ShaderVertex");
        *(_DWORD *)algn_1ECE3C9B4 = 0;
        qword_1ECE3C9B8 = (uint64_t)"Clear4Shader";
        unk_1ECE3C9C0 = ggl::clear4ShaderVertShaderFunctionAttributes(void)::ref;
        qword_1ECE3C9C8 = 1;
        unk_1ECE3C9D0 = &ggl::clear4ShaderVertShaderFunctionConstantMapping(void)::ref;
        qword_1ECE3C9D8 = 1;
        unk_1ECE3C9E0 = &ggl::clear4ShaderVertShaderFunctionBufferMapping(void)::ref;
        qword_1ECE3C9E8 = 0;
        unk_1ECE3C9F0 = &ggl::clear4ShaderVertShaderFunctionTextureMapping(void)::ref;
        qword_1ECE3C9F8 = 0;
        unk_1ECE3CA00 = &ggl::clear4ShaderVertShaderFunctionSamplerMapping(void)::ref;
        qword_1ECE3CA10 = 0;
        unk_1ECE3CA18 = 0;
        qword_1ECE3CA08 = 0;
      }
      qword_1ECE36B90 = (uint64_t)&ggl::clear4ShaderVertexFunctionDescriptor(void)::ref;
      if ((v82 & 1) == 0
      {
        ggl::clear4ShaderFragmentFunctionDescriptor(void)::ref = ggl::crc32::compute<21ul>("Clear4ShaderFragment");
        *(_DWORD *)algn_1ECE3D0EC = 1;
        qword_1ECE3D0F0 = (uint64_t)"Clear4Shader";
        unk_1ECE3D0F8 = 0;
        qword_1ECE3D100 = 0;
        unk_1ECE3D108 = &ggl::clear4ShaderFragShaderFunctionConstantMapping(void)::ref;
        qword_1ECE3D110 = 1;
        unk_1ECE3D118 = &ggl::clear4ShaderFragShaderFunctionBufferMapping(void)::ref;
        qword_1ECE3D120 = 0;
        unk_1ECE3D128 = &ggl::clear4ShaderFragShaderFunctionTextureMapping(void)::ref;
        qword_1ECE3D130 = 0;
        unk_1ECE3D138 = &ggl::clear4ShaderFragShaderFunctionSamplerMapping(void)::ref;
        qword_1ECE3D148 = 0;
        unk_1ECE3D150 = 0;
        qword_1ECE3D140 = 0;
      }
      qword_1ECE36B98 = (uint64_t)&ggl::clear4ShaderFragmentFunctionDescriptor(void)::ref;
      if ((v83 & 1) == 0
      {
        ggl::coloredTextShaderVertexFunctionDescriptor(void)::ref = ggl::crc32::compute<24ul>("ColoredTextShaderVertex");
        *(_DWORD *)algn_1ECE3D804 = 0;
        qword_1ECE3D808 = (uint64_t)"ColoredTextShader";
        unk_1ECE3D810 = ggl::coloredTextShaderVertShaderFunctionAttributes(void)::ref;
        qword_1ECE3D818 = 1;
        unk_1ECE3D820 = &ggl::coloredTextShaderVertShaderFunctionConstantMapping(void)::ref;
        qword_1ECE3D828 = 1;
        unk_1ECE3D830 = &ggl::coloredTextShaderVertShaderFunctionBufferMapping(void)::ref;
        qword_1ECE3D838 = 0;
        unk_1ECE3D840 = &ggl::coloredTextShaderVertShaderFunctionTextureMapping(void)::ref;
        qword_1ECE3D848 = 0;
        unk_1ECE3D850 = &ggl::coloredTextShaderVertShaderFunctionSamplerMapping(void)::ref;
        qword_1ECE3D860 = 0;
        unk_1ECE3D868 = 0;
        qword_1ECE3D858 = 0;
      }
      qword_1ECE36BA0 = (uint64_t)&ggl::coloredTextShaderVertexFunctionDescriptor(void)::ref;
      if ((v84 & 1) == 0
      {
        v217 = ggl::crc32::compute<26ul>("ColoredTextShaderFragment");
        qword_1ECE451D0 = 0;
        unk_1ECE451D8 = &ggl::coloredTextShaderFragShaderFunctionConstantMapping(void)::ref;
        qword_1ECE451E0 = 0;
        unk_1ECE451E8 = &ggl::coloredTextShaderFragShaderFunctionBufferMapping(void)::ref;
        ggl::coloredTextShaderFragmentFunctionDescriptor(void)::ref = v217;
        *(_DWORD *)algn_1ECE451BC = 1;
        qword_1ECE451F0 = 0;
        unk_1ECE451F8 = &ggl::coloredTextShaderFragShaderFunctionTextureMapping(void)::ref;
        qword_1ECE451C0 = (uint64_t)"ColoredTextShader";
        unk_1ECE451C8 = 0;
        qword_1ECE45200 = 1;
        unk_1ECE45208 = &ggl::coloredTextShaderFragShaderFunctionSamplerMapping(void)::ref;
        qword_1ECE45218 = 0;
        unk_1ECE45220 = 0;
        qword_1ECE45210 = 1;
      }
      qword_1ECE36BA8 = (uint64_t)&ggl::coloredTextShaderFragmentFunctionDescriptor(void)::ref;
      if ((v85 & 1) == 0
      {
        v218 = ggl::crc32::compute<24ul>("ShadedColorShaderVertex");
        qword_1ECE450E0 = (uint64_t)"ShadedColorShader";
        unk_1ECE450E8 = ggl::shadedColorShaderVertShaderFunctionAttributes(void)::ref;
        qword_1ECE450F0 = 1;
        unk_1ECE450F8 = &ggl::shadedColorShaderVertShaderFunctionConstantMapping(void)::ref;
        qword_1ECE45100 = 2;
        unk_1ECE45108 = &ggl::shadedColorShaderVertShaderFunctionBufferMapping(void)::ref;
        qword_1ECE45110 = 0;
        unk_1ECE45118 = &ggl::shadedColorShaderVertShaderFunctionTextureMapping(void)::ref;
        ggl::shadedColorShaderVertexFunctionDescriptor(void)::ref = v218;
        *(_DWORD *)algn_1ECE450DC = 0;
        qword_1ECE45120 = 0;
        unk_1ECE45128 = &ggl::shadedColorShaderVertShaderFunctionSamplerMapping(void)::ref;
        qword_1ECE45138 = 0;
        unk_1ECE45140 = 0;
        qword_1ECE45130 = 0;
      }
      qword_1ECE36BB0 = (uint64_t)&ggl::shadedColorShaderVertexFunctionDescriptor(void)::ref;
      if ((v86 & 1) == 0
      {
        ggl::shadedColorShaderFragmentFunctionDescriptor(void)::ref = ggl::crc32::compute<26ul>("ShadedColorShaderFragment");
        *(_DWORD *)algn_1ECE45234 = 1;
        qword_1ECE45238 = (uint64_t)"ShadedColorShader";
        unk_1ECE45240 = 0;
        qword_1ECE45248 = 0;
        unk_1ECE45250 = &ggl::shadedColorShaderFragShaderFunctionConstantMapping(void)::ref;
        qword_1ECE45258 = 1;
        unk_1ECE45260 = &ggl::shadedColorShaderFragShaderFunctionBufferMapping(void)::ref;
        qword_1ECE45268 = 0;
        unk_1ECE45270 = &ggl::shadedColorShaderFragShaderFunctionTextureMapping(void)::ref;
        qword_1ECE45278 = 0;
        unk_1ECE45280 = &ggl::shadedColorShaderFragShaderFunctionSamplerMapping(void)::ref;
        qword_1ECE45290 = 0;
        unk_1ECE45298 = 0;
        qword_1ECE45288 = 0;
      }
      qword_1ECE36BB8 = (uint64_t)&ggl::shadedColorShaderFragmentFunctionDescriptor(void)::ref;
      if ((v87 & 1) == 0
      {
        ggl::textureRectShaderVertexFunctionDescriptor(void)::ref = ggl::crc32::compute<24ul>("TextureRectShaderVertex");
        *(_DWORD *)algn_1ECE3DB9C = 0;
        qword_1ECE3DBA0 = (uint64_t)"TextureRectShader";
        unk_1ECE3DBA8 = ggl::textureRectShaderVertShaderFunctionAttributes(void)::ref;
        qword_1ECE3DBB0 = 1;
        unk_1ECE3DBB8 = &ggl::textureRectShaderVertShaderFunctionConstantMapping(void)::ref;
        qword_1ECE3DBC0 = 1;
        unk_1ECE3DBC8 = &ggl::textureRectShaderVertShaderFunctionBufferMapping(void)::ref;
        qword_1ECE3DBD0 = 0;
        unk_1ECE3DBD8 = &ggl::textureRectShaderVertShaderFunctionTextureMapping(void)::ref;
        qword_1ECE3DBE0 = 0;
        unk_1ECE3DBE8 = &ggl::textureRectShaderVertShaderFunctionSamplerMapping(void)::ref;
        qword_1ECE3DBF8 = 0;
        unk_1ECE3DC00 = 0;
        qword_1ECE3DBF0 = 0;
      }
      qword_1ECE36BC0 = (uint64_t)&ggl::textureRectShaderVertexFunctionDescriptor(void)::ref;
      if ((v88 & 1) == 0
      {
        v219 = ggl::crc32::compute<26ul>("TextureRectShaderFragment");
        qword_1ECE3E678 = 0;
        unk_1ECE3E680 = &ggl::textureRectShaderFragShaderFunctionConstantMapping(void)::ref;
        qword_1ECE3E688 = 0;
        unk_1ECE3E690 = &ggl::textureRectShaderFragShaderFunctionBufferMapping(void)::ref;
        ggl::textureRectShaderFragmentFunctionDescriptor(void)::ref = v219;
        *(_DWORD *)algn_1ECE3E664 = 1;
        qword_1ECE3E698 = 0;
        unk_1ECE3E6A0 = &ggl::textureRectShaderFragShaderFunctionTextureMapping(void)::ref;
        qword_1ECE3E668 = (uint64_t)"TextureRectShader";
        unk_1ECE3E670 = 0;
        qword_1ECE3E6A8 = 1;
        unk_1ECE3E6B0 = &ggl::textureRectShaderFragShaderFunctionSamplerMapping(void)::ref;
        qword_1ECE3E6C0 = 0;
        unk_1ECE3E6C8 = 0;
        qword_1ECE3E6B8 = 1;
      }
      qword_1ECE36BC8 = (uint64_t)&ggl::textureRectShaderFragmentFunctionDescriptor(void)::ref;
    }
    qword_1ECE39108 = (uint64_t)&CommonLibraryShaderFunctions(void)::desc;
    unk_1ECE39110 = 16;
    if ((v68 & 1) == 0)
    {
      if ((_DWORD)v89)
      {
        if ((v90 & 1) == 0)
        {
          if ((_DWORD)v89)
          {
            ggl::ClearDepthStencilShader::typedReflection(void)::ref = (uint64_t)"ClearDepthStencilShader";
            if ((v220 & 1) == 0
            {
              ggl::clearDepthStencilShaderVertexFunctionDescriptor(void)::ref = ggl::crc32::compute<30ul>("ClearDepthStencilShaderVertex");
              *(_DWORD *)algn_1ECE452AC = 0;
              qword_1ECE452B0 = (uint64_t)"ClearDepthStencilShader";
              unk_1ECE452B8 = ggl::clearDepthStencilShaderVertShaderFunctionAttributes(void)::ref;
              qword_1ECE452C0 = 1;
              unk_1ECE452C8 = &ggl::clearDepthStencilShaderVertShaderFunctionConstantMapping(void)::ref;
              qword_1ECE452D0 = 1;
              unk_1ECE452D8 = &ggl::clearDepthStencilShaderVertShaderFunctionBufferMapping(void)::ref;
              qword_1ECE452E0 = 0;
              unk_1ECE452E8 = &ggl::clearDepthStencilShaderVertShaderFunctionTextureMapping(void)::ref;
              qword_1ECE452F0 = 0;
              unk_1ECE452F8 = &ggl::clearDepthStencilShaderVertShaderFunctionSamplerMapping(void)::ref;
              qword_1ECE45308 = 0;
              unk_1ECE45310 = 0;
              qword_1ECE45300 = 0;
            }
            qword_1ECE3AA80 = (uint64_t)&ggl::clearDepthStencilShaderVertexFunctionDescriptor(void)::ref;
            dword_1ECE3AA88 = ggl::crc32::compute<30ul>("ClearDepthStencilShaderVertex");
            if ((v221 & 1) == 0
            {
              ggl::clearDepthStencilShaderFragmentFunctionDescriptor(void)::ref = ggl::crc32::compute<32ul>("ClearDepthStencilShaderFragment");
              *(_DWORD *)algn_1ECE658B4 = 1;
              qword_1ECE658B8 = (uint64_t)"ClearDepthStencilShader";
              unk_1ECE658C0 = 0;
              qword_1ECE658C8 = 0;
              unk_1ECE658D0 = &ggl::clearDepthStencilShaderFragShaderFunctionConstantMapping(void)::ref;
              qword_1ECE658D8 = 1;
              unk_1ECE658E0 = &ggl::clearDepthStencilShaderFragShaderFunctionBufferMapping(void)::ref;
              qword_1ECE658E8 = 0;
              unk_1ECE658F0 = &ggl::clearDepthStencilShaderFragShaderFunctionTextureMapping(void)::ref;
              qword_1ECE658F8 = 0;
              unk_1ECE65900 = &ggl::clearDepthStencilShaderFragShaderFunctionSamplerMapping(void)::ref;
              qword_1ECE65910 = 0;
              unk_1ECE65918 = 0;
              qword_1ECE65908 = 0;
            }
            qword_1ECE3AA90 = (uint64_t)&ggl::clearDepthStencilShaderFragmentFunctionDescriptor(void)::ref;
            dword_1ECE3AA98 = ggl::crc32::compute<32ul>("ClearDepthStencilShaderFragment");
            qword_1ECE3AAA0 = (uint64_t)ggl::clearDepthStencilShaderShaderConstants(void)::ref;
            unk_1ECE3AAA8 = 1;
            qword_1ECE3AAB0 = (uint64_t)&ggl::clearDepthStencilShaderShaderTextures(void)::ref;
            unk_1ECE3AAB8 = 0;
            qword_1ECE3AAC0 = (uint64_t)&ggl::clearDepthStencilShaderShaderSamplers(void)::ref;
            unk_1ECE3AAC8 = 0;
          }
        }
        CommonLibraryShaders(void)::desc = (uint64_t)&ggl::ClearDepthStencilShader::typedReflection(void)::ref;
        ggl::ClearShader::typedReflection(v89);
        qword_1ECE36BF0 = (uint64_t)&ggl::ClearShader::typedReflection(void)::ref;
        if ((v92 & 1) == 0)
        {
          if ((_DWORD)v91)
          {
            ggl::Clear2Shader::typedReflection(void)::ref = (uint64_t)"Clear2Shader";
            if ((v222 & 1) == 0
            {
              ggl::clear2ShaderVertexFunctionDescriptor(void)::ref = ggl::crc32::compute<19ul>("Clear2ShaderVertex");
              *(_DWORD *)algn_1ECE657C4 = 0;
              qword_1ECE657C8 = (uint64_t)"Clear2Shader";
              unk_1ECE657D0 = ggl::clear2ShaderVertShaderFunctionAttributes(void)::ref;
              qword_1ECE657D8 = 1;
              unk_1ECE657E0 = &ggl::clear2ShaderVertShaderFunctionConstantMapping(void)::ref;
              qword_1ECE657E8 = 1;
              unk_1ECE657F0 = &ggl::clear2ShaderVertShaderFunctionBufferMapping(void)::ref;
              qword_1ECE657F8 = 0;
              unk_1ECE65800 = &ggl::clear2ShaderVertShaderFunctionTextureMapping(void)::ref;
              qword_1ECE65808 = 0;
              unk_1ECE65810 = &ggl::clear2ShaderVertShaderFunctionSamplerMapping(void)::ref;
              qword_1ECE65820 = 0;
              unk_1ECE65828 = 0;
              qword_1ECE65818 = 0;
            }
            qword_1ECE38F38 = (uint64_t)&ggl::clear2ShaderVertexFunctionDescriptor(void)::ref;
            dword_1ECE38F40 = ggl::crc32::compute<19ul>("Clear2ShaderVertex");
            if ((v223 & 1) == 0
            {
              ggl::clear2ShaderFragmentFunctionDescriptor(void)::ref = ggl::crc32::compute<21ul>("Clear2ShaderFragment");
              *(_DWORD *)algn_1ECE4506C = 1;
              qword_1ECE45070 = (uint64_t)"Clear2Shader";
              unk_1ECE45078 = 0;
              qword_1ECE45080 = 0;
              unk_1ECE45088 = &ggl::clear2ShaderFragShaderFunctionConstantMapping(void)::ref;
              qword_1ECE45090 = 1;
              unk_1ECE45098 = &ggl::clear2ShaderFragShaderFunctionBufferMapping(void)::ref;
              qword_1ECE450A0 = 0;
              unk_1ECE450A8 = &ggl::clear2ShaderFragShaderFunctionTextureMapping(void)::ref;
              qword_1ECE450B0 = 0;
              unk_1ECE450B8 = &ggl::clear2ShaderFragShaderFunctionSamplerMapping(void)::ref;
              qword_1ECE450C8 = 0;
              unk_1ECE450D0 = 0;
              qword_1ECE450C0 = 0;
            }
            qword_1ECE38F48 = (uint64_t)&ggl::clear2ShaderFragmentFunctionDescriptor(void)::ref;
            dword_1ECE38F50 = ggl::crc32::compute<21ul>("Clear2ShaderFragment");
            qword_1ECE38F58 = (uint64_t)ggl::clear2ShaderShaderConstants(void)::ref;
            unk_1ECE38F60 = 1;
            qword_1ECE38F68 = (uint64_t)&ggl::clear2ShaderShaderTextures(void)::ref;
            unk_1ECE38F70 = 0;
            qword_1ECE38F78 = (uint64_t)&ggl::clear2ShaderShaderSamplers(void)::ref;
            unk_1ECE38F80 = 0;
          }
        }
        qword_1ECE36BF8 = (uint64_t)&ggl::Clear2Shader::typedReflection(void)::ref;
        if ((v93 & 1) == 0)
        {
          if ((_DWORD)v91)
          {
            ggl::Clear3Shader::typedReflection(void)::ref = (uint64_t)"Clear3Shader";
            if ((v224 & 1) == 0
            {
              ggl::clear3ShaderVertexFunctionDescriptor(void)::ref = ggl::crc32::compute<19ul>("Clear3ShaderVertex");
              *(_DWORD *)algn_1ECE44F84 = 0;
              qword_1ECE44F88 = (uint64_t)"Clear3Shader";
              unk_1ECE44F90 = ggl::clear3ShaderVertShaderFunctionAttributes(void)::ref;
              qword_1ECE44F98 = 1;
              unk_1ECE44FA0 = &ggl::clear3ShaderVertShaderFunctionConstantMapping(void)::ref;
              qword_1ECE44FA8 = 1;
              unk_1ECE44FB0 = &ggl::clear3ShaderVertShaderFunctionBufferMapping(void)::ref;
              qword_1ECE44FB8 = 0;
              unk_1ECE44FC0 = &ggl::clear3ShaderVertShaderFunctionTextureMapping(void)::ref;
              qword_1ECE44FC8 = 0;
              unk_1ECE44FD0 = &ggl::clear3ShaderVertShaderFunctionSamplerMapping(void)::ref;
              qword_1ECE44FE0 = 0;
              unk_1ECE44FE8 = 0;
              qword_1ECE44FD8 = 0;
            }
            qword_1ECE38F98 = (uint64_t)&ggl::clear3ShaderVertexFunctionDescriptor(void)::ref;
            dword_1ECE38FA0 = ggl::crc32::compute<19ul>("Clear3ShaderVertex");
            if ((v225 & 1) == 0
            {
              ggl::clear3ShaderFragmentFunctionDescriptor(void)::ref = ggl::crc32::compute<21ul>("Clear3ShaderFragment");
              *(_DWORD *)algn_1ECE3D07C = 1;
              qword_1ECE3D080 = (uint64_t)"Clear3Shader";
              unk_1ECE3D088 = 0;
              qword_1ECE3D090 = 0;
              unk_1ECE3D098 = &ggl::clear3ShaderFragShaderFunctionConstantMapping(void)::ref;
              qword_1ECE3D0A0 = 1;
              unk_1ECE3D0A8 = &ggl::clear3ShaderFragShaderFunctionBufferMapping(void)::ref;
              qword_1ECE3D0B0 = 0;
              unk_1ECE3D0B8 = &ggl::clear3ShaderFragShaderFunctionTextureMapping(void)::ref;
              qword_1ECE3D0C0 = 0;
              unk_1ECE3D0C8 = &ggl::clear3ShaderFragShaderFunctionSamplerMapping(void)::ref;
              qword_1ECE3D0D8 = 0;
              unk_1ECE3D0E0 = 0;
              qword_1ECE3D0D0 = 0;
            }
            qword_1ECE38FA8 = (uint64_t)&ggl::clear3ShaderFragmentFunctionDescriptor(void)::ref;
            dword_1ECE38FB0 = ggl::crc32::compute<21ul>("Clear3ShaderFragment");
            qword_1ECE38FB8 = (uint64_t)ggl::clear3ShaderShaderConstants(void)::ref;
            unk_1ECE38FC0 = 1;
            qword_1ECE38FC8 = (uint64_t)&ggl::clear3ShaderShaderTextures(void)::ref;
            unk_1ECE38FD0 = 0;
            qword_1ECE38FD8 = (uint64_t)&ggl::clear3ShaderShaderSamplers(void)::ref;
            unk_1ECE38FE0 = 0;
          }
        }
        qword_1ECE36C00 = (uint64_t)&ggl::Clear3Shader::typedReflection(void)::ref;
        if ((v94 & 1) == 0)
        {
          if ((_DWORD)v91)
          {
            ggl::Clear4Shader::typedReflection(void)::ref = (uint64_t)"Clear4Shader";
            if ((v226 & 1) == 0
            {
              ggl::clear4ShaderVertexFunctionDescriptor(void)::ref = ggl::crc32::compute<19ul>("Clear4ShaderVertex");
              *(_DWORD *)algn_1ECE3C9B4 = 0;
              qword_1ECE3C9B8 = (uint64_t)"Clear4Shader";
              unk_1ECE3C9C0 = ggl::clear4ShaderVertShaderFunctionAttributes(void)::ref;
              qword_1ECE3C9C8 = 1;
              unk_1ECE3C9D0 = &ggl::clear4ShaderVertShaderFunctionConstantMapping(void)::ref;
              qword_1ECE3C9D8 = 1;
              unk_1ECE3C9E0 = &ggl::clear4ShaderVertShaderFunctionBufferMapping(void)::ref;
              qword_1ECE3C9E8 = 0;
              unk_1ECE3C9F0 = &ggl::clear4ShaderVertShaderFunctionTextureMapping(void)::ref;
              qword_1ECE3C9F8 = 0;
              unk_1ECE3CA00 = &ggl::clear4ShaderVertShaderFunctionSamplerMapping(void)::ref;
              qword_1ECE3CA10 = 0;
              unk_1ECE3CA18 = 0;
              qword_1ECE3CA08 = 0;
            }
            qword_1ECE38FF8 = (uint64_t)&ggl::clear4ShaderVertexFunctionDescriptor(void)::ref;
            dword_1ECE39000 = ggl::crc32::compute<19ul>("Clear4ShaderVertex");
            if ((v227 & 1) == 0
            {
              ggl::clear4ShaderFragmentFunctionDescriptor(void)::ref = ggl::crc32::compute<21ul>("Clear4ShaderFragment");
              *(_DWORD *)algn_1ECE3D0EC = 1;
              qword_1ECE3D0F0 = (uint64_t)"Clear4Shader";
              unk_1ECE3D0F8 = 0;
              qword_1ECE3D100 = 0;
              unk_1ECE3D108 = &ggl::clear4ShaderFragShaderFunctionConstantMapping(void)::ref;
              qword_1ECE3D110 = 1;
              unk_1ECE3D118 = &ggl::clear4ShaderFragShaderFunctionBufferMapping(void)::ref;
              qword_1ECE3D120 = 0;
              unk_1ECE3D128 = &ggl::clear4ShaderFragShaderFunctionTextureMapping(void)::ref;
              qword_1ECE3D130 = 0;
              unk_1ECE3D138 = &ggl::clear4ShaderFragShaderFunctionSamplerMapping(void)::ref;
              qword_1ECE3D148 = 0;
              unk_1ECE3D150 = 0;
              qword_1ECE3D140 = 0;
            }
            qword_1ECE39008 = (uint64_t)&ggl::clear4ShaderFragmentFunctionDescriptor(void)::ref;
            dword_1ECE39010 = ggl::crc32::compute<21ul>("Clear4ShaderFragment");
            qword_1ECE39018 = (uint64_t)ggl::clear4ShaderShaderConstants(void)::ref;
            unk_1ECE39020 = 1;
            qword_1ECE39028 = (uint64_t)&ggl::clear4ShaderShaderTextures(void)::ref;
            unk_1ECE39030 = 0;
            qword_1ECE39038 = (uint64_t)&ggl::clear4ShaderShaderSamplers(void)::ref;
            unk_1ECE39040 = 0;
          }
        }
        qword_1ECE36C08 = (uint64_t)&ggl::Clear4Shader::typedReflection(void)::ref;
        ggl::ColoredTextShader::typedReflection(v91);
        qword_1ECE36C10 = (uint64_t)&ggl::ColoredTextShader::typedReflection(void)::ref;
        ggl::ShadedColorShader::typedReflection(v95);
        qword_1ECE36C18 = (uint64_t)&ggl::ShadedColorShader::typedReflection(void)::ref;
        ggl::TextureRectShader::typedReflection(v96);
        qword_1ECE36C20 = (uint64_t)&ggl::TextureRectShader::typedReflection(void)::ref;
      }
    }
    qword_1ECE39118 = (uint64_t)&CommonLibraryShaders(void)::desc;
    unk_1ECE39120 = 8;
    qword_1ECE39128 = (uint64_t)&CommonLibraryComputeShaders(void)::desc;
    unk_1ECE39130 = 0;
    qword_1ECE39138 = (uint64_t)&CommonLibraryTileShaders(void)::desc;
    unk_1ECE39140 = 0;
    qword_1ECE39148 = 0;
    unk_1ECE39150 = 0;
  }
  ggl::ShaderLibrary::ShaderLibrary((uint64_t)v18, &ggl::CommonLibrary::typedReflection(void)::desc, &v298);
  *v18 = &off_1E42B6490;
  v23 = (_QWORD *)operator new();
  *v23 = &off_1E42E7800;
  v23[1] = 0;
  v23[2] = 0;
  v23[3] = v18;
  v24 = *(std::__shared_weak_count **)(a1 + 8);
  *(_QWORD *)a1 = v18;
  *(_QWORD *)(a1 + 8) = v23;
  if (v24)
  {
    v25 = (unint64_t *)&v24->__shared_owners_;
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  v27 = v299;
  if (v299)
  {
    v28 = (unint64_t *)&v299->__shared_owners_;
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
  v30 = (_QWORD *)operator new();
  v31 = v30;
  v32 = a4[1];
  v296 = *a4;
  v297 = (std::__shared_weak_count *)v32;
  if (v32)
  {
    v33 = (unint64_t *)(v32 + 8);
    do
      v34 = __ldxr(v33);
    while (__stxr(v34 + 1, v33));
  }
  ggl::StandardLibrary::StandardLibrary(v30, &v296);
  v35 = (_QWORD *)operator new();
  *v35 = &off_1E42E78E0;
  v35[1] = 0;
  v35[2] = 0;
  v35[3] = v31;
  v36 = *(std::__shared_weak_count **)(a1 + 24);
  *(_QWORD *)(a1 + 16) = v31;
  *(_QWORD *)(a1 + 24) = v35;
  if (v36)
  {
    v37 = (unint64_t *)&v36->__shared_owners_;
    do
      v38 = __ldaxr(v37);
    while (__stlxr(v38 - 1, v37));
    if (!v38)
    {
      ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
      std::__shared_weak_count::__release_weak(v36);
    }
  }
  v39 = v297;
  if (v297)
  {
    v40 = (unint64_t *)&v297->__shared_owners_;
    do
      v41 = __ldaxr(v40);
    while (__stlxr(v41 - 1, v40));
    if (!v41)
    {
      ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
      std::__shared_weak_count::__release_weak(v39);
    }
  }
  v42 = (_QWORD *)operator new();
  v43 = a5[1];
  v294 = *a5;
  v295 = (std::__shared_weak_count *)v43;
  if (v43)
  {
    v44 = (unint64_t *)(v43 + 8);
    do
      v45 = __ldxr(v44);
    while (__stxr(v45 + 1, v44));
  }
  {
    ggl::FlyoverLibrary::typedReflection(void)::desc = (uint64_t)"FlyoverLibrary";
    dword_1ECE39220 = 1992402489;
    {
      if ((v97 & 1) == 0
      {
        ggl::earthCoronaShaderVertexFunctionDescriptor(void)::ref = ggl::crc32::compute<24ul>("EarthCoronaShaderVertex");
        *(_DWORD *)algn_1ECE3D87C = 0;
        qword_1ECE3D880 = (uint64_t)"EarthCoronaShader";
        unk_1ECE3D888 = ggl::earthCoronaShaderVertShaderFunctionAttributes(void)::ref;
        qword_1ECE3D890 = 1;
        unk_1ECE3D898 = &ggl::earthCoronaShaderVertShaderFunctionConstantMapping(void)::ref;
        qword_1ECE3D8A0 = 1;
        unk_1ECE3D8A8 = &ggl::earthCoronaShaderVertShaderFunctionBufferMapping(void)::ref;
        qword_1ECE3D8B0 = 0;
        unk_1ECE3D8B8 = &ggl::earthCoronaShaderVertShaderFunctionTextureMapping(void)::ref;
        qword_1ECE3D8C0 = 0;
        unk_1ECE3D8C8 = &ggl::earthCoronaShaderVertShaderFunctionSamplerMapping(void)::ref;
        qword_1ECE3D8D8 = 0;
        unk_1ECE3D8E0 = 0;
        qword_1ECE3D8D0 = 0;
      }
      FlyoverLibraryShaderFunctions(void)::desc = (uint64_t)&ggl::earthCoronaShaderVertexFunctionDescriptor(void)::ref;
      if ((v98 & 1) == 0
      {
        v228 = ggl::crc32::compute<26ul>("EarthCoronaShaderFragment");
        qword_1ECE3E1F8 = 0;
        unk_1ECE3E200 = &ggl::earthCoronaShaderFragShaderFunctionConstantMapping(void)::ref;
        qword_1ECE3E208 = 1;
        unk_1ECE3E210 = &ggl::earthCoronaShaderFragShaderFunctionBufferMapping(void)::ref;
        ggl::earthCoronaShaderFragmentFunctionDescriptor(void)::ref = v228;
        *(_DWORD *)algn_1ECE3E1E4 = 1;
        qword_1ECE3E218 = 0;
        unk_1ECE3E220 = &ggl::earthCoronaShaderFragShaderFunctionTextureMapping(void)::ref;
        qword_1ECE3E1E8 = (uint64_t)"EarthCoronaShader";
        unk_1ECE3E1F0 = 0;
        qword_1ECE3E228 = 1;
        unk_1ECE3E230 = &ggl::earthCoronaShaderFragShaderFunctionSamplerMapping(void)::ref;
        qword_1ECE3E240 = 0;
        unk_1ECE3E248 = 0;
        qword_1ECE3E238 = 1;
      }
      qword_1ECE341F8 = (uint64_t)&ggl::earthCoronaShaderFragmentFunctionDescriptor(void)::ref;
      if ((v99 & 1) == 0
      {
        v229 = ggl::crc32::compute<23ul>("EndOfWorldShaderVertex");
        qword_1ECE3D5D8 = (uint64_t)"EndOfWorldShader";
        unk_1ECE3D5E0 = ggl::endOfWorldShaderVertShaderFunctionAttributes(void)::ref;
        qword_1ECE3D5E8 = 1;
        unk_1ECE3D5F0 = &ggl::endOfWorldShaderVertShaderFunctionConstantMapping(void)::ref;
        qword_1ECE3D5F8 = 2;
        unk_1ECE3D600 = &ggl::endOfWorldShaderVertShaderFunctionBufferMapping(void)::ref;
        qword_1ECE3D608 = 0;
        unk_1ECE3D610 = &ggl::endOfWorldShaderVertShaderFunctionTextureMapping(void)::ref;
        ggl::endOfWorldShaderVertexFunctionDescriptor(void)::ref = v229;
        *(_DWORD *)algn_1ECE3D5D4 = 0;
        qword_1ECE3D618 = 0;
        unk_1ECE3D620 = &ggl::endOfWorldShaderVertShaderFunctionSamplerMapping(void)::ref;
        qword_1ECE3D630 = 0;
        unk_1ECE3D638 = 0;
        qword_1ECE3D628 = 0;
      }
      qword_1ECE34200 = (uint64_t)&ggl::endOfWorldShaderVertexFunctionDescriptor(void)::ref;
      if ((v100 & 1) == 0
      {
        v230 = ggl::crc32::compute<25ul>("EndOfWorldShaderFragment");
        qword_1ECE3DD80 = 0;
        unk_1ECE3DD88 = &ggl::endOfWorldShaderFragShaderFunctionConstantMapping(void)::ref;
        qword_1ECE3DD90 = 1;
        unk_1ECE3DD98 = &ggl::endOfWorldShaderFragShaderFunctionBufferMapping(void)::ref;
        ggl::endOfWorldShaderFragmentFunctionDescriptor(void)::ref = v230;
        *(_DWORD *)algn_1ECE3DD6C = 1;
        qword_1ECE3DDA0 = 0;
        unk_1ECE3DDA8 = &ggl::endOfWorldShaderFragShaderFunctionTextureMapping(void)::ref;
        qword_1ECE3DD70 = (uint64_t)"EndOfWorldShader";
        unk_1ECE3DD78 = 0;
        qword_1ECE3DDB0 = 1;
        unk_1ECE3DDB8 = &ggl::endOfWorldShaderFragShaderFunctionSamplerMapping(void)::ref;
        qword_1ECE3DDC8 = 0;
        unk_1ECE3DDD0 = 0;
        qword_1ECE3DDC0 = 1;
      }
      qword_1ECE34208 = (uint64_t)&ggl::endOfWorldShaderFragmentFunctionDescriptor(void)::ref;
      if ((v101 & 1) == 0
      {
        v231 = ggl::crc32::compute<20ul>("FlyoverShaderVertex");
        qword_1ECE3CE40 = (uint64_t)"FlyoverShader";
        unk_1ECE3CE48 = ggl::flyoverShaderVertShaderFunctionAttributes(void)::ref;
        qword_1ECE3CE50 = 1;
        unk_1ECE3CE58 = &ggl::flyoverShaderVertShaderFunctionConstantMapping(void)::ref;
        qword_1ECE3CE60 = 5;
        unk_1ECE3CE68 = &ggl::flyoverShaderVertShaderFunctionBufferMapping(void)::ref;
        qword_1ECE3CE70 = 0;
        unk_1ECE3CE78 = &ggl::flyoverShaderVertShaderFunctionTextureMapping(void)::ref;
        ggl::flyoverShaderVertexFunctionDescriptor(void)::ref = v231;
        *(_DWORD *)algn_1ECE3CE3C = 0;
        qword_1ECE3CE80 = 1;
        unk_1ECE3CE88 = &ggl::flyoverShaderVertShaderFunctionSamplerMapping(void)::ref;
        qword_1ECE3CE98 = 0;
        unk_1ECE3CEA0 = 0;
        qword_1ECE3CE90 = 1;
      }
      qword_1ECE34210 = (uint64_t)&ggl::flyoverShaderVertexFunctionDescriptor(void)::ref;
      if ((v102 & 1) == 0
      {
        v232 = ggl::crc32::compute<22ul>("FlyoverShaderFragment");
        qword_1ECE3D2C8 = 0;
        unk_1ECE3D2D0 = &ggl::flyoverShaderFragShaderFunctionConstantMapping(void)::ref;
        qword_1ECE3D2D8 = 2;
        unk_1ECE3D2E0 = &ggl::flyoverShaderFragShaderFunctionBufferMapping(void)::ref;
        ggl::flyoverShaderFragmentFunctionDescriptor(void)::ref = v232;
        *(_DWORD *)algn_1ECE3D2B4 = 1;
        qword_1ECE3D2E8 = 0;
        unk_1ECE3D2F0 = &ggl::flyoverShaderFragShaderFunctionTextureMapping(void)::ref;
        qword_1ECE3D2B8 = (uint64_t)"FlyoverShader";
        unk_1ECE3D2C0 = 0;
        qword_1ECE3D2F8 = 1;
        unk_1ECE3D300 = &ggl::flyoverShaderFragShaderFunctionSamplerMapping(void)::ref;
        qword_1ECE3D310 = 0;
        unk_1ECE3D318 = 0;
        qword_1ECE3D308 = 1;
      }
      qword_1ECE34218 = (uint64_t)&ggl::flyoverShaderFragmentFunctionDescriptor(void)::ref;
      if ((v103 & 1) == 0
      {
        v233 = ggl::crc32::compute<25ul>("FlyoverPolarShaderVertex");
        qword_1EE578240 = (uint64_t)"FlyoverPolarShader";
        unk_1EE578248 = ggl::flyoverPolarShaderVertShaderFunctionAttributes(void)::ref;
        qword_1EE578250 = 1;
        unk_1EE578258 = &ggl::flyoverPolarShaderVertShaderFunctionConstantMapping(void)::ref;
        qword_1EE578260 = 6;
        unk_1EE578268 = &ggl::flyoverPolarShaderVertShaderFunctionBufferMapping(void)::ref;
        qword_1EE578270 = 0;
        unk_1EE578278 = &ggl::flyoverPolarShaderVertShaderFunctionTextureMapping(void)::ref;
        ggl::flyoverPolarShaderVertexFunctionDescriptor(void)::ref = v233;
        *(_DWORD *)algn_1EE57823C = 0;
        qword_1EE578280 = 1;
        unk_1EE578288 = &ggl::flyoverPolarShaderVertShaderFunctionSamplerMapping(void)::ref;
        qword_1EE578298 = 0;
        unk_1EE5782A0 = 0;
        qword_1EE578290 = 1;
      }
      qword_1ECE34220 = (uint64_t)&ggl::flyoverPolarShaderVertexFunctionDescriptor(void)::ref;
      if ((v104 & 1) == 0
      {
        v234 = ggl::crc32::compute<27ul>("FlyoverPolarShaderFragment");
        qword_1EE5782C8 = 0;
        unk_1EE5782D0 = &ggl::flyoverPolarShaderFragShaderFunctionConstantMapping(void)::ref;
        qword_1EE5782D8 = 2;
        unk_1EE5782E0 = &ggl::flyoverPolarShaderFragShaderFunctionBufferMapping(void)::ref;
        ggl::flyoverPolarShaderFragmentFunctionDescriptor(void)::ref = v234;
        *(_DWORD *)algn_1EE5782B4 = 1;
        qword_1EE5782E8 = 0;
        unk_1EE5782F0 = &ggl::flyoverPolarShaderFragShaderFunctionTextureMapping(void)::ref;
        qword_1EE5782B8 = (uint64_t)"FlyoverPolarShader";
        unk_1EE5782C0 = 0;
        qword_1EE5782F8 = 1;
        unk_1EE578300 = &ggl::flyoverPolarShaderFragShaderFunctionSamplerMapping(void)::ref;
        qword_1EE578310 = 0;
        unk_1EE578318 = 0;
        qword_1EE578308 = 1;
      }
      qword_1ECE34228 = (uint64_t)&ggl::flyoverPolarShaderFragmentFunctionDescriptor(void)::ref;
      if ((v105 & 1) == 0
      {
        v235 = ggl::crc32::compute<26ul>("FlyoverBorderShaderVertex");
        qword_1ECE3E258 = (uint64_t)"FlyoverBorderShader";
        unk_1ECE3E260 = ggl::flyoverBorderShaderVertShaderFunctionAttributes(void)::ref;
        qword_1ECE3E268 = 1;
        unk_1ECE3E270 = &ggl::flyoverBorderShaderVertShaderFunctionConstantMapping(void)::ref;
        qword_1ECE3E278 = 5;
        unk_1ECE3E280 = &ggl::flyoverBorderShaderVertShaderFunctionBufferMapping(void)::ref;
        qword_1ECE3E288 = 0;
        unk_1ECE3E290 = &ggl::flyoverBorderShaderVertShaderFunctionTextureMapping(void)::ref;
        ggl::flyoverBorderShaderVertexFunctionDescriptor(void)::ref = v235;
        *(_DWORD *)algn_1ECE3E254 = 0;
        qword_1ECE3E298 = 1;
        unk_1ECE3E2A0 = &ggl::flyoverBorderShaderVertShaderFunctionSamplerMapping(void)::ref;
        qword_1ECE3E2B0 = 0;
        unk_1ECE3E2B8 = 0;
        qword_1ECE3E2A8 = 1;
      }
      qword_1ECE34230 = (uint64_t)&ggl::flyoverBorderShaderVertexFunctionDescriptor(void)::ref;
      if ((v106 & 1) == 0
      {
        ggl::flyoverBorderShaderFragmentFunctionDescriptor(void)::ref = ggl::crc32::compute<28ul>("FlyoverBorderShaderFragment");
        *(_DWORD *)algn_1ECE3F06C = 1;
        qword_1ECE3F070 = (uint64_t)"FlyoverBorderShader";
        unk_1ECE3F078 = 0;
        qword_1ECE3F080 = 0;
        unk_1ECE3F088 = &ggl::flyoverBorderShaderFragShaderFunctionConstantMapping(void)::ref;
        qword_1ECE3F090 = 2;
        unk_1ECE3F098 = &ggl::flyoverBorderShaderFragShaderFunctionBufferMapping(void)::ref;
        qword_1ECE3F0A0 = 0;
        unk_1ECE3F0A8 = &ggl::flyoverBorderShaderFragShaderFunctionTextureMapping(void)::ref;
        qword_1ECE3F0B0 = 3;
        unk_1ECE3F0B8 = &ggl::flyoverBorderShaderFragShaderFunctionSamplerMapping(void)::ref;
        qword_1ECE3F0C8 = 0;
        unk_1ECE3F0D0 = 0;
        qword_1ECE3F0C0 = 3;
      }
      qword_1ECE34238 = (uint64_t)&ggl::flyoverBorderShaderFragmentFunctionDescriptor(void)::ref;
      if ((v107 & 1) == 0
      {
        v236 = ggl::crc32::compute<32ul>("FlyoverBorderRibbonShaderVertex");
        qword_1ECE40C28 = (uint64_t)"FlyoverBorderRibbonShader";
        unk_1ECE40C30 = ggl::flyoverBorderRibbonShaderVertShaderFunctionAttributes(void)::ref;
        qword_1ECE40C38 = 1;
        unk_1ECE40C40 = &ggl::flyoverBorderRibbonShaderVertShaderFunctionConstantMapping(void)::ref;
        qword_1ECE40C48 = 5;
        unk_1ECE40C50 = &ggl::flyoverBorderRibbonShaderVertShaderFunctionBufferMapping(void)::ref;
        qword_1ECE40C58 = 0;
        unk_1ECE40C60 = &ggl::flyoverBorderRibbonShaderVertShaderFunctionTextureMapping(void)::ref;
        ggl::flyoverBorderRibbonShaderVertexFunctionDescriptor(void)::ref = v236;
        *(_DWORD *)algn_1ECE40C24 = 0;
        qword_1ECE40C68 = 0;
        unk_1ECE40C70 = &ggl::flyoverBorderRibbonShaderVertShaderFunctionSamplerMapping(void)::ref;
        qword_1ECE40C80 = 0;
        unk_1ECE40C88 = 0;
        qword_1ECE40C78 = 0;
      }
      qword_1ECE34240 = (uint64_t)&ggl::flyoverBorderRibbonShaderVertexFunctionDescriptor(void)::ref;
      if ((v108 & 1) == 0
      {
        ggl::flyoverBorderRibbonShaderFragmentFunctionDescriptor(void)::ref = ggl::crc32::compute<34ul>("FlyoverBorderRibbonShaderFragment");
        *(_DWORD *)algn_1ECE4170C = 1;
        qword_1ECE41710 = (uint64_t)"FlyoverBorderRibbonShader";
        unk_1ECE41718 = 0;
        qword_1ECE41720 = 0;
        unk_1ECE41728 = &ggl::flyoverBorderRibbonShaderFragShaderFunctionConstantMapping(void)::ref;
        qword_1ECE41730 = 1;
        unk_1ECE41738 = &ggl::flyoverBorderRibbonShaderFragShaderFunctionBufferMapping(void)::ref;
        qword_1ECE41740 = 0;
        unk_1ECE41748 = &ggl::flyoverBorderRibbonShaderFragShaderFunctionTextureMapping(void)::ref;
        qword_1ECE41750 = 2;
        unk_1ECE41758 = &ggl::flyoverBorderRibbonShaderFragShaderFunctionSamplerMapping(void)::ref;
        qword_1ECE41768 = 0;
        unk_1ECE41770 = 0;
        qword_1ECE41760 = 2;
      }
      qword_1ECE34248 = (uint64_t)&ggl::flyoverBorderRibbonShaderFragmentFunctionDescriptor(void)::ref;
      if ((v109 & 1) == 0
      {
        v237 = ggl::crc32::compute<28ul>("FlyoverManeuverShaderVertex");
        qword_1ECE3F0E0 = (uint64_t)"FlyoverManeuverShader";
        unk_1ECE3F0E8 = ggl::flyoverManeuverShaderVertShaderFunctionAttributes(void)::ref;
        qword_1ECE3F0F0 = 1;
        unk_1ECE3F0F8 = &ggl::flyoverManeuverShaderVertShaderFunctionConstantMapping(void)::ref;
        qword_1ECE3F100 = 3;
        unk_1ECE3F108 = &ggl::flyoverManeuverShaderVertShaderFunctionBufferMapping(void)::ref;
        qword_1ECE3F110 = 0;
        unk_1ECE3F118 = &ggl::flyoverManeuverShaderVertShaderFunctionTextureMapping(void)::ref;
        ggl::flyoverManeuverShaderVertexFunctionDescriptor(void)::ref = v237;
        *(_DWORD *)algn_1ECE3F0DC = 0;
        qword_1ECE3F120 = 0;
        unk_1ECE3F128 = &ggl::flyoverManeuverShaderVertShaderFunctionSamplerMapping(void)::ref;
        qword_1ECE3F138 = 0;
        unk_1ECE3F140 = 0;
        qword_1ECE3F130 = 0;
      }
      qword_1ECE34250 = (uint64_t)&ggl::flyoverManeuverShaderVertexFunctionDescriptor(void)::ref;
      if ((v110 & 1) == 0
      {
        v238 = ggl::crc32::compute<30ul>("FlyoverManeuverShaderFragment");
        qword_1ECE3FF98 = 0;
        unk_1ECE3FFA0 = &ggl::flyoverManeuverShaderFragShaderFunctionConstantMapping(void)::ref;
        qword_1ECE3FFA8 = 1;
        unk_1ECE3FFB0 = &ggl::flyoverManeuverShaderFragShaderFunctionBufferMapping(void)::ref;
        ggl::flyoverManeuverShaderFragmentFunctionDescriptor(void)::ref = v238;
        *(_DWORD *)algn_1ECE3FF84 = 1;
        qword_1ECE3FFB8 = 0;
        unk_1ECE3FFC0 = &ggl::flyoverManeuverShaderFragShaderFunctionTextureMapping(void)::ref;
        qword_1ECE3FF88 = (uint64_t)"FlyoverManeuverShader";
        unk_1ECE3FF90 = 0;
        qword_1ECE3FFC8 = 1;
        unk_1ECE3FFD0 = &ggl::flyoverManeuverShaderFragShaderFunctionSamplerMapping(void)::ref;
        qword_1ECE3FFE0 = 0;
        unk_1ECE3FFE8 = 0;
        qword_1ECE3FFD8 = 1;
      }
      qword_1ECE34258 = (uint64_t)&ggl::flyoverManeuverShaderFragmentFunctionDescriptor(void)::ref;
      if ((v111 & 1) == 0
      {
        v239 = ggl::crc32::compute<26ul>("FlyoverMaskedShaderVertex");
        qword_1ECE3E2C8 = (uint64_t)"FlyoverMaskedShader";
        unk_1ECE3E2D0 = ggl::flyoverMaskedShaderVertShaderFunctionAttributes(void)::ref;
        qword_1ECE3E2D8 = 1;
        unk_1ECE3E2E0 = &ggl::flyoverMaskedShaderVertShaderFunctionConstantMapping(void)::ref;
        qword_1ECE3E2E8 = 5;
        unk_1ECE3E2F0 = &ggl::flyoverMaskedShaderVertShaderFunctionBufferMapping(void)::ref;
        qword_1ECE3E2F8 = 0;
        unk_1ECE3E300 = &ggl::flyoverMaskedShaderVertShaderFunctionTextureMapping(void)::ref;
        ggl::flyoverMaskedShaderVertexFunctionDescriptor(void)::ref = v239;
        *(_DWORD *)algn_1ECE3E2C4 = 0;
        qword_1ECE3E308 = 1;
        unk_1ECE3E310 = &ggl::flyoverMaskedShaderVertShaderFunctionSamplerMapping(void)::ref;
        qword_1ECE3E320 = 0;
        unk_1ECE3E328 = 0;
        qword_1ECE3E318 = 1;
      }
      qword_1ECE34260 = (uint64_t)&ggl::flyoverMaskedShaderVertexFunctionDescriptor(void)::ref;
      if ((v112 & 1) == 0
      {
        ggl::flyoverMaskedShaderFragmentFunctionDescriptor(void)::ref = ggl::crc32::compute<28ul>("FlyoverMaskedShaderFragment");
        *(_DWORD *)algn_1ECE3F14C = 1;
        qword_1ECE3F160 = 0;
        unk_1ECE3F168 = &ggl::flyoverMaskedShaderFragShaderFunctionConstantMapping(void)::ref;
        qword_1ECE3F170 = 2;
        unk_1ECE3F178 = &ggl::flyoverMaskedShaderFragShaderFunctionBufferMapping(void)::ref;
        qword_1ECE3F180 = 0;
        unk_1ECE3F188 = &ggl::flyoverMaskedShaderFragShaderFunctionTextureMapping(void)::ref;
        qword_1ECE3F150 = (uint64_t)"FlyoverMaskedShader";
        unk_1ECE3F158 = 0;
        qword_1ECE3F190 = 2;
        unk_1ECE3F198 = &ggl::flyoverMaskedShaderFragShaderFunctionSamplerMapping(void)::ref;
        qword_1ECE3F1A8 = 0;
        unk_1ECE3F1B0 = 0;
        qword_1ECE3F1A0 = 2;
      }
      qword_1ECE34268 = (uint64_t)&ggl::flyoverMaskedShaderFragmentFunctionDescriptor(void)::ref;
      if ((v113 & 1) == 0
      {
        v240 = ggl::crc32::compute<25ul>("FlyoverMorphShaderVertex");
        qword_1ECE3DDE0 = (uint64_t)"FlyoverMorphShader";
        unk_1ECE3DDE8 = ggl::flyoverMorphShaderVertShaderFunctionAttributes(void)::ref;
        qword_1ECE3DDF0 = 1;
        unk_1ECE3DDF8 = &ggl::flyoverMorphShaderVertShaderFunctionConstantMapping(void)::ref;
        qword_1ECE3DE00 = 6;
        unk_1ECE3DE08 = &ggl::flyoverMorphShaderVertShaderFunctionBufferMapping(void)::ref;
        qword_1ECE3DE10 = 0;
        unk_1ECE3DE18 = &ggl::flyoverMorphShaderVertShaderFunctionTextureMapping(void)::ref;
        ggl::flyoverMorphShaderVertexFunctionDescriptor(void)::ref = v240;
        *(_DWORD *)algn_1ECE3DDDC = 0;
        qword_1ECE3DE20 = 1;
        unk_1ECE3DE28 = &ggl::flyoverMorphShaderVertShaderFunctionSamplerMapping(void)::ref;
        qword_1ECE3DE38 = 0;
        unk_1ECE3DE40 = 0;
        qword_1ECE3DE30 = 1;
      }
      qword_1ECE34270 = (uint64_t)&ggl::flyoverMorphShaderVertexFunctionDescriptor(void)::ref;
      if ((v114 & 1) == 0
      {
        ggl::flyoverMorphShaderFragmentFunctionDescriptor(void)::ref = ggl::crc32::compute<27ul>("FlyoverMorphShaderFragment");
        *(_DWORD *)algn_1ECE3E914 = 1;
        qword_1ECE3E918 = (uint64_t)"FlyoverMorphShader";
        unk_1ECE3E920 = 0;
        qword_1ECE3E928 = 0;
        unk_1ECE3E930 = &ggl::flyoverMorphShaderFragShaderFunctionConstantMapping(void)::ref;
        qword_1ECE3E938 = 3;
        unk_1ECE3E940 = &ggl::flyoverMorphShaderFragShaderFunctionBufferMapping(void)::ref;
        qword_1ECE3E948 = 0;
        unk_1ECE3E950 = &ggl::flyoverMorphShaderFragShaderFunctionTextureMapping(void)::ref;
        qword_1ECE3E958 = 2;
        unk_1ECE3E960 = &ggl::flyoverMorphShaderFragShaderFunctionSamplerMapping(void)::ref;
        qword_1ECE3E970 = 0;
        unk_1ECE3E978 = 0;
        qword_1ECE3E968 = 2;
      }
      qword_1ECE34278 = (uint64_t)&ggl::flyoverMorphShaderFragmentFunctionDescriptor(void)::ref;
      if ((v115 & 1) == 0
      {
        v241 = ggl::crc32::compute<31ul>("FlyoverMorphBorderShaderVertex");
        qword_1ECE40660 = (uint64_t)"FlyoverMorphBorderShader";
        unk_1ECE40668 = ggl::flyoverMorphBorderShaderVertShaderFunctionAttributes(void)::ref;
        qword_1ECE40670 = 1;
        unk_1ECE40678 = &ggl::flyoverMorphBorderShaderVertShaderFunctionConstantMapping(void)::ref;
        qword_1ECE40680 = 6;
        unk_1ECE40688 = &ggl::flyoverMorphBorderShaderVertShaderFunctionBufferMapping(void)::ref;
        qword_1ECE40690 = 0;
        unk_1ECE40698 = &ggl::flyoverMorphBorderShaderVertShaderFunctionTextureMapping(void)::ref;
        ggl::flyoverMorphBorderShaderVertexFunctionDescriptor(void)::ref = v241;
        *(_DWORD *)algn_1ECE4065C = 0;
        qword_1ECE406A0 = 1;
        unk_1ECE406A8 = &ggl::flyoverMorphBorderShaderVertShaderFunctionSamplerMapping(void)::ref;
        qword_1ECE406B8 = 0;
        unk_1ECE406C0 = 0;
        qword_1ECE406B0 = 1;
      }
      qword_1ECE34280 = (uint64_t)&ggl::flyoverMorphBorderShaderVertexFunctionDescriptor(void)::ref;
      if ((v116 & 1) == 0
      {
        ggl::flyoverMorphBorderShaderFragmentFunctionDescriptor(void)::ref = ggl::crc32::compute<33ul>("FlyoverMorphBorderShaderFragment");
        *(_DWORD *)algn_1ECE41364 = 1;
        qword_1ECE41368 = (uint64_t)"FlyoverMorphBorderShader";
        unk_1ECE41370 = 0;
        qword_1ECE41378 = 0;
        unk_1ECE41380 = &ggl::flyoverMorphBorderShaderFragShaderFunctionConstantMapping(void)::ref;
        qword_1ECE41388 = 3;
        unk_1ECE41390 = &ggl::flyoverMorphBorderShaderFragShaderFunctionBufferMapping(void)::ref;
        qword_1ECE41398 = 0;
        unk_1ECE413A0 = &ggl::flyoverMorphBorderShaderFragShaderFunctionTextureMapping(void)::ref;
        qword_1ECE413A8 = 4;
        unk_1ECE413B0 = &ggl::flyoverMorphBorderShaderFragShaderFunctionSamplerMapping(void)::ref;
        qword_1ECE413C0 = 0;
        unk_1ECE413C8 = 0;
        qword_1ECE413B8 = 4;
      }
      qword_1ECE34288 = (uint64_t)&ggl::flyoverMorphBorderShaderFragmentFunctionDescriptor(void)::ref;
      if ((v117 & 1) == 0
      {
        v242 = ggl::crc32::compute<30ul>("FlyoverMorphNightShaderVertex");
        qword_1ECE40000 = (uint64_t)"FlyoverMorphNightShader";
        unk_1ECE40008 = ggl::flyoverMorphNightShaderVertShaderFunctionAttributes(void)::ref;
        qword_1ECE40010 = 1;
        unk_1ECE40018 = &ggl::flyoverMorphNightShaderVertShaderFunctionConstantMapping(void)::ref;
        qword_1ECE40020 = 6;
        unk_1ECE40028 = &ggl::flyoverMorphNightShaderVertShaderFunctionBufferMapping(void)::ref;
        qword_1ECE40030 = 0;
        unk_1ECE40038 = &ggl::flyoverMorphNightShaderVertShaderFunctionTextureMapping(void)::ref;
        ggl::flyoverMorphNightShaderVertexFunctionDescriptor(void)::ref = v242;
        *(_DWORD *)algn_1ECE3FFFC = 0;
        qword_1ECE40040 = 1;
        unk_1ECE40048 = &ggl::flyoverMorphNightShaderVertShaderFunctionSamplerMapping(void)::ref;
        qword_1ECE40058 = 0;
        unk_1ECE40060 = 0;
        qword_1ECE40050 = 1;
      }
      qword_1ECE34290 = (uint64_t)&ggl::flyoverMorphNightShaderVertexFunctionDescriptor(void)::ref;
      if ((v118 & 1) == 0
      {
        ggl::flyoverMorphNightShaderFragmentFunctionDescriptor(void)::ref = ggl::crc32::compute<32ul>("FlyoverMorphNightShaderFragment");
        *(_DWORD *)algn_1ECE40C94 = 1;
        qword_1ECE40C98 = (uint64_t)"FlyoverMorphNightShader";
        unk_1ECE40CA0 = 0;
        qword_1ECE40CA8 = 0;
        unk_1ECE40CB0 = &ggl::flyoverMorphNightShaderFragShaderFunctionConstantMapping(void)::ref;
        qword_1ECE40CB8 = 3;
        unk_1ECE40CC0 = &ggl::flyoverMorphNightShaderFragShaderFunctionBufferMapping(void)::ref;
        qword_1ECE40CC8 = 0;
        unk_1ECE40CD0 = &ggl::flyoverMorphNightShaderFragShaderFunctionTextureMapping(void)::ref;
        qword_1ECE40CD8 = 4;
        unk_1ECE40CE0 = &ggl::flyoverMorphNightShaderFragShaderFunctionSamplerMapping(void)::ref;
        qword_1ECE40CF0 = 0;
        unk_1ECE40CF8 = 0;
        qword_1ECE40CE8 = 4;
      }
      qword_1ECE34298 = (uint64_t)&ggl::flyoverMorphNightShaderFragmentFunctionDescriptor(void)::ref;
      if ((v119 & 1) == 0
      {
        v243 = ggl::crc32::compute<25ul>("FlyoverNightShaderVertex");
        qword_1ECE3DE50 = (uint64_t)"FlyoverNightShader";
        unk_1ECE3DE58 = ggl::flyoverNightShaderVertShaderFunctionAttributes(void)::ref;
        qword_1ECE3DE60 = 1;
        unk_1ECE3DE68 = &ggl::flyoverNightShaderVertShaderFunctionConstantMapping(void)::ref;
        qword_1ECE3DE70 = 5;
        unk_1ECE3DE78 = &ggl::flyoverNightShaderVertShaderFunctionBufferMapping(void)::ref;
        qword_1ECE3DE80 = 0;
        unk_1ECE3DE88 = &ggl::flyoverNightShaderVertShaderFunctionTextureMapping(void)::ref;
        ggl::flyoverNightShaderVertexFunctionDescriptor(void)::ref = v243;
        *(_DWORD *)algn_1ECE3DE4C = 0;
        qword_1ECE3DE90 = 1;
        unk_1ECE3DE98 = &ggl::flyoverNightShaderVertShaderFunctionSamplerMapping(void)::ref;
        qword_1ECE3DEA8 = 0;
        unk_1ECE3DEB0 = 0;
        qword_1ECE3DEA0 = 1;
      }
      qword_1ECE342A0 = (uint64_t)&ggl::flyoverNightShaderVertexFunctionDescriptor(void)::ref;
      if ((v120 & 1) == 0
      {
        ggl::flyoverNightShaderFragmentFunctionDescriptor(void)::ref = ggl::crc32::compute<27ul>("FlyoverNightShaderFragment");
        *(_DWORD *)algn_1ECE3E984 = 1;
        qword_1ECE3E998 = 0;
        unk_1ECE3E9A0 = &ggl::flyoverNightShaderFragShaderFunctionConstantMapping(void)::ref;
        qword_1ECE3E9A8 = 2;
        unk_1ECE3E9B0 = &ggl::flyoverNightShaderFragShaderFunctionBufferMapping(void)::ref;
        qword_1ECE3E9B8 = 0;
        unk_1ECE3E9C0 = &ggl::flyoverNightShaderFragShaderFunctionTextureMapping(void)::ref;
        qword_1ECE3E988 = (uint64_t)"FlyoverNightShader";
        unk_1ECE3E990 = 0;
        qword_1ECE3E9C8 = 2;
        unk_1ECE3E9D0 = &ggl::flyoverNightShaderFragShaderFunctionSamplerMapping(void)::ref;
        qword_1ECE3E9E0 = 0;
        unk_1ECE3E9E8 = 0;
        qword_1ECE3E9D8 = 2;
      }
      qword_1ECE342A8 = (uint64_t)&ggl::flyoverNightShaderFragmentFunctionDescriptor(void)::ref;
      if ((v121 & 1) == 0
      {
        v244 = ggl::crc32::compute<30ul>("FlyoverNightPolarShaderVertex");
        qword_1EE578330 = (uint64_t)"FlyoverNightPolarShader";
        unk_1EE578338 = ggl::flyoverNightPolarShaderVertShaderFunctionAttributes(void)::ref;
        qword_1EE578340 = 1;
        unk_1EE578348 = &ggl::flyoverNightPolarShaderVertShaderFunctionConstantMapping(void)::ref;
        qword_1EE578350 = 6;
        unk_1EE578358 = &ggl::flyoverNightPolarShaderVertShaderFunctionBufferMapping(void)::ref;
        qword_1EE578360 = 0;
        unk_1EE578368 = &ggl::flyoverNightPolarShaderVertShaderFunctionTextureMapping(void)::ref;
        ggl::flyoverNightPolarShaderVertexFunctionDescriptor(void)::ref = v244;
        *(_DWORD *)algn_1EE57832C = 0;
        qword_1EE578370 = 1;
        unk_1EE578378 = &ggl::flyoverNightPolarShaderVertShaderFunctionSamplerMapping(void)::ref;
        qword_1EE578388 = 0;
        unk_1EE578390 = 0;
        qword_1EE578380 = 1;
      }
      qword_1ECE342B0 = (uint64_t)&ggl::flyoverNightPolarShaderVertexFunctionDescriptor(void)::ref;
      if ((v122 & 1) == 0
      {
        ggl::flyoverNightPolarShaderFragmentFunctionDescriptor(void)::ref = ggl::crc32::compute<32ul>("FlyoverNightPolarShaderFragment");
        *(_DWORD *)algn_1EE578414 = 1;
        qword_1EE578428 = 0;
        unk_1EE578430 = &ggl::flyoverNightPolarShaderFragShaderFunctionConstantMapping(void)::ref;
        qword_1EE578438 = 2;
        unk_1EE578440 = &ggl::flyoverNightPolarShaderFragShaderFunctionBufferMapping(void)::ref;
        qword_1EE578448 = 0;
        unk_1EE578450 = &ggl::flyoverNightPolarShaderFragShaderFunctionTextureMapping(void)::ref;
        qword_1EE578418 = (uint64_t)"FlyoverNightPolarShader";
        unk_1EE578420 = 0;
        qword_1EE578458 = 2;
        unk_1EE578460 = &ggl::flyoverNightPolarShaderFragShaderFunctionSamplerMapping(void)::ref;
        qword_1EE578470 = 0;
        unk_1EE578478 = 0;
        qword_1EE578468 = 2;
      }
      qword_1ECE342B8 = (uint64_t)&ggl::flyoverNightPolarShaderFragmentFunctionDescriptor(void)::ref;
      if ((v123 & 1) == 0
      {
        ggl::flyoverNightDimShaderVertexFunctionDescriptor(void)::ref = ggl::crc32::compute<28ul>("FlyoverNightDimShaderVertex");
        *(_DWORD *)algn_1ECE3F1BC = 0;
        qword_1ECE3F1C0 = (uint64_t)"FlyoverNightDimShader";
        unk_1ECE3F1C8 = ggl::flyoverNightDimShaderVertShaderFunctionAttributes(void)::ref;
        qword_1ECE3F1D0 = 1;
        unk_1ECE3F1D8 = &ggl::flyoverNightDimShaderVertShaderFunctionConstantMapping(void)::ref;
        qword_1ECE3F1E0 = 1;
        unk_1ECE3F1E8 = &ggl::flyoverNightDimShaderVertShaderFunctionBufferMapping(void)::ref;
        qword_1ECE3F1F0 = 0;
        unk_1ECE3F1F8 = &ggl::flyoverNightDimShaderVertShaderFunctionTextureMapping(void)::ref;
        qword_1ECE3F200 = 0;
        unk_1ECE3F208 = &ggl::flyoverNightDimShaderVertShaderFunctionSamplerMapping(void)::ref;
        qword_1ECE3F218 = 0;
        unk_1ECE3F220 = 0;
        qword_1ECE3F210 = 0;
      }
      qword_1ECE342C0 = (uint64_t)&ggl::flyoverNightDimShaderVertexFunctionDescriptor(void)::ref;
      if ((v124 & 1) == 0
      {
        ggl::flyoverNightDimShaderFragmentFunctionDescriptor(void)::ref = ggl::crc32::compute<30ul>("FlyoverNightDimShaderFragment");
        *(_DWORD *)algn_1ECE40074 = 1;
        qword_1ECE40078 = (uint64_t)"FlyoverNightDimShader";
        unk_1ECE40080 = 0;
        qword_1ECE40088 = 0;
        unk_1ECE40090 = &ggl::flyoverNightDimShaderFragShaderFunctionConstantMapping(void)::ref;
        qword_1ECE40098 = 1;
        unk_1ECE400A0 = &ggl::flyoverNightDimShaderFragShaderFunctionBufferMapping(void)::ref;
        qword_1ECE400A8 = 0;
        unk_1ECE400B0 = &ggl::flyoverNightDimShaderFragShaderFunctionTextureMapping(void)::ref;
        qword_1ECE400B8 = 0;
        unk_1ECE400C0 = &ggl::flyoverNightDimShaderFragShaderFunctionSamplerMapping(void)::ref;
        qword_1ECE400D0 = 0;
        unk_1ECE400D8 = 0;
        qword_1ECE400C8 = 0;
      }
      qword_1ECE342C8 = (uint64_t)&ggl::flyoverNightDimShaderFragmentFunctionDescriptor(void)::ref;
      if ((v125 & 1) == 0
      {
        v245 = ggl::crc32::compute<27ul>("FlyoverOverlayShaderVertex");
        qword_1ECE3EA00 = (uint64_t)"FlyoverOverlayShader";
        unk_1ECE3EA08 = ggl::flyoverOverlayShaderVertShaderFunctionAttributes(void)::ref;
        qword_1ECE3EA10 = 1;
        unk_1ECE3EA18 = &ggl::flyoverOverlayShaderVertShaderFunctionConstantMapping(void)::ref;
        qword_1ECE3EA20 = 3;
        unk_1ECE3EA28 = &ggl::flyoverOverlayShaderVertShaderFunctionBufferMapping(void)::ref;
        qword_1ECE3EA30 = 0;
        unk_1ECE3EA38 = &ggl::flyoverOverlayShaderVertShaderFunctionTextureMapping(void)::ref;
        ggl::flyoverOverlayShaderVertexFunctionDescriptor(void)::ref = v245;
        *(_DWORD *)algn_1ECE3E9FC = 0;
        qword_1ECE3EA40 = 0;
        unk_1ECE3EA48 = &ggl::flyoverOverlayShaderVertShaderFunctionSamplerMapping(void)::ref;
        qword_1ECE3EA58 = 0;
        unk_1ECE3EA60 = 0;
        qword_1ECE3EA50 = 0;
      }
      qword_1ECE342D0 = (uint64_t)&ggl::flyoverOverlayShaderVertexFunctionDescriptor(void)::ref;
      if ((v126 & 1) == 0
      {
        v246 = ggl::crc32::compute<29ul>("FlyoverOverlayShaderFragment");
        qword_1ECE3F898 = 0;
        unk_1ECE3F8A0 = &ggl::flyoverOverlayShaderFragShaderFunctionConstantMapping(void)::ref;
        qword_1ECE3F8A8 = 2;
        unk_1ECE3F8B0 = &ggl::flyoverOverlayShaderFragShaderFunctionBufferMapping(void)::ref;
        ggl::flyoverOverlayShaderFragmentFunctionDescriptor(void)::ref = v246;
        *(_DWORD *)algn_1ECE3F884 = 1;
        qword_1ECE3F8B8 = 0;
        unk_1ECE3F8C0 = &ggl::flyoverOverlayShaderFragShaderFunctionTextureMapping(void)::ref;
        qword_1ECE3F888 = (uint64_t)"FlyoverOverlayShader";
        unk_1ECE3F890 = 0;
        qword_1ECE3F8C8 = 1;
        unk_1ECE3F8D0 = &ggl::flyoverOverlayShaderFragShaderFunctionSamplerMapping(void)::ref;
        qword_1ECE3F8E0 = 0;
        unk_1ECE3F8E8 = 0;
        qword_1ECE3F8D8 = 1;
      }
      qword_1ECE342D8 = (uint64_t)&ggl::flyoverOverlayShaderFragmentFunctionDescriptor(void)::ref;
      if ((v127 & 1) == 0
      {
        v247 = ggl::crc32::compute<38ul>("FlyoverPostchainCompositeShaderVertex");
        qword_1ECE353B8 = (uint64_t)"FlyoverPostchainCompositeShader";
        unk_1ECE353C0 = ggl::flyoverPostchainCompositeShaderVertShaderFunctionAttributes(void)::ref;
        qword_1ECE353C8 = 1;
        unk_1ECE353D0 = &ggl::flyoverPostchainCompositeShaderVertShaderFunctionConstantMapping(void)::ref;
        qword_1ECE353D8 = 0;
        unk_1ECE353E0 = &ggl::flyoverPostchainCompositeShaderVertShaderFunctionBufferMapping(void)::ref;
        qword_1ECE353E8 = 0;
        unk_1ECE353F0 = &ggl::flyoverPostchainCompositeShaderVertShaderFunctionTextureMapping(void)::ref;
        ggl::flyoverPostchainCompositeShaderVertexFunctionDescriptor(void)::ref = v247;
        *(_DWORD *)algn_1ECE353B4 = 0;
        qword_1ECE353F8 = 0;
        unk_1ECE35400 = &ggl::flyoverPostchainCompositeShaderVertShaderFunctionSamplerMapping(void)::ref;
        qword_1ECE35410 = 0;
        unk_1ECE35418 = 0;
        qword_1ECE35408 = 0;
      }
      qword_1ECE342E0 = (uint64_t)&ggl::flyoverPostchainCompositeShaderVertexFunctionDescriptor(void)::ref;
      if ((v128 & 1) == 0
      {
        ggl::flyoverPostchainCompositeShaderFragmentFunctionDescriptor(void)::ref = 0x11EFF1393;
        qword_1ECE35760 = (uint64_t)"FlyoverPostchainCompositeShader";
        unk_1ECE35768 = 0;
        qword_1ECE35770 = 0;
        unk_1ECE35778 = &ggl::flyoverPostchainCompositeShaderFragShaderFunctionConstantMapping(void)::ref;
        qword_1ECE35780 = 1;
        unk_1ECE35788 = &ggl::flyoverPostchainCompositeShaderFragShaderFunctionBufferMapping(void)::ref;
        qword_1ECE35790 = 0;
        unk_1ECE35798 = &ggl::flyoverPostchainCompositeShaderFragShaderFunctionTextureMapping(void)::ref;
        qword_1ECE357A0 = 4;
        unk_1ECE357A8 = &ggl::flyoverPostchainCompositeShaderFragShaderFunctionSamplerMapping(void)::ref;
        qword_1ECE357B8 = 0;
        unk_1ECE357C0 = 0;
        qword_1ECE357B0 = 4;
      }
      qword_1ECE342E8 = (uint64_t)&ggl::flyoverPostchainCompositeShaderFragmentFunctionDescriptor(void)::ref;
      if ((v129 & 1) == 0
      {
        qword_1ECE355F8 = (uint64_t)"FlyoverPostchainSplitFrameShader";
        unk_1ECE35600 = ggl::flyoverPostchainSplitFrameShaderVertShaderFunctionAttributes(void)::ref;
        qword_1ECE35608 = 1;
        unk_1ECE35610 = &ggl::flyoverPostchainSplitFrameShaderVertShaderFunctionConstantMapping(void)::ref;
        qword_1ECE35618 = 0;
        unk_1ECE35620 = &ggl::flyoverPostchainSplitFrameShaderVertShaderFunctionBufferMapping(void)::ref;
        qword_1ECE35628 = 0;
        unk_1ECE35630 = &ggl::flyoverPostchainSplitFrameShaderVertShaderFunctionTextureMapping(void)::ref;
        ggl::flyoverPostchainSplitFrameShaderVertexFunctionDescriptor(void)::ref = 2595229844;
        qword_1ECE35638 = 0;
        unk_1ECE35640 = &ggl::flyoverPostchainSplitFrameShaderVertShaderFunctionSamplerMapping(void)::ref;
        qword_1ECE35650 = 0;
        unk_1ECE35658 = 0;
        qword_1ECE35648 = 0;
      }
      qword_1ECE342F0 = (uint64_t)&ggl::flyoverPostchainSplitFrameShaderVertexFunctionDescriptor(void)::ref;
      if ((v130 & 1) == 0
      {
        ggl::flyoverPostchainSplitFrameShaderFragmentFunctionDescriptor(void)::ref = 0x148DF32F9;
        qword_1ECE359B0 = (uint64_t)"FlyoverPostchainSplitFrameShader";
        unk_1ECE359B8 = 0;
        qword_1ECE359C0 = 0;
        unk_1ECE359C8 = &ggl::flyoverPostchainSplitFrameShaderFragShaderFunctionConstantMapping(void)::ref;
        qword_1ECE359D0 = 1;
        unk_1ECE359D8 = &ggl::flyoverPostchainSplitFrameShaderFragShaderFunctionBufferMapping(void)::ref;
        qword_1ECE359E0 = 0;
        unk_1ECE359E8 = &ggl::flyoverPostchainSplitFrameShaderFragShaderFunctionTextureMapping(void)::ref;
        qword_1ECE359F0 = 2;
        unk_1ECE359F8 = &ggl::flyoverPostchainSplitFrameShaderFragShaderFunctionSamplerMapping(void)::ref;
        qword_1ECE35A08 = 0;
        unk_1ECE35A10 = 0;
        qword_1ECE35A00 = 2;
      }
      qword_1ECE342F8 = (uint64_t)&ggl::flyoverPostchainSplitFrameShaderFragmentFunctionDescriptor(void)::ref;
      if ((v131 & 1) == 0
      {
        qword_1ECE35A98 = (uint64_t)"FlyoverPostchainDownsampleCoCShader";
        unk_1ECE35AA0 = ggl::flyoverPostchainDownsampleCoCShaderVertShaderFunctionAttributes(void)::ref;
        qword_1ECE35AA8 = 1;
        unk_1ECE35AB0 = &ggl::flyoverPostchainDownsampleCoCShaderVertShaderFunctionConstantMapping(void)::ref;
        qword_1ECE35AB8 = 0;
        unk_1ECE35AC0 = &ggl::flyoverPostchainDownsampleCoCShaderVertShaderFunctionBufferMapping(void)::ref;
        qword_1ECE35AC8 = 0;
        unk_1ECE35AD0 = &ggl::flyoverPostchainDownsampleCoCShaderVertShaderFunctionTextureMapping(void)::ref;
        ggl::flyoverPostchainDownsampleCoCShaderVertexFunctionDescriptor(void)::ref = 3177222361;
        qword_1ECE35AD8 = 0;
        unk_1ECE35AE0 = &ggl::flyoverPostchainDownsampleCoCShaderVertShaderFunctionSamplerMapping(void)::ref;
        qword_1ECE35AF0 = 0;
        unk_1ECE35AF8 = 0;
        qword_1ECE35AE8 = 0;
      }
      qword_1ECE34300 = (uint64_t)&ggl::flyoverPostchainDownsampleCoCShaderVertexFunctionDescriptor(void)::ref;
      if ((v132 & 1) == 0
      {
        ggl::flyoverPostchainDownsampleCoCShaderFragmentFunctionDescriptor(void)::ref = 0x1E0B0A741;
        qword_1ECE35D50 = (uint64_t)"FlyoverPostchainDownsampleCoCShader";
        unk_1ECE35D58 = 0;
        qword_1ECE35D60 = 0;
        unk_1ECE35D68 = &ggl::flyoverPostchainDownsampleCoCShaderFragShaderFunctionConstantMapping(void)::ref;
        qword_1ECE35D70 = 0;
        unk_1ECE35D78 = &ggl::flyoverPostchainDownsampleCoCShaderFragShaderFunctionBufferMapping(void)::ref;
        qword_1ECE35D80 = 0;
        unk_1ECE35D88 = &ggl::flyoverPostchainDownsampleCoCShaderFragShaderFunctionTextureMapping(void)::ref;
        qword_1ECE35D90 = 1;
        unk_1ECE35D98 = &ggl::flyoverPostchainDownsampleCoCShaderFragShaderFunctionSamplerMapping(void)::ref;
        qword_1ECE35DA8 = 0;
        unk_1ECE35DB0 = 0;
        qword_1ECE35DA0 = 1;
      }
      qword_1ECE34308 = (uint64_t)&ggl::flyoverPostchainDownsampleCoCShaderFragmentFunctionDescriptor(void)::ref;
      if ((v133 & 1) == 0
      {
        v248 = ggl::crc32::compute<35ul>("FlyoverPostchainBGBlurShaderVertex");
        qword_1ECE35028 = (uint64_t)"FlyoverPostchainBGBlurShader";
        unk_1ECE35030 = ggl::flyoverPostchainBGBlurShaderVertShaderFunctionAttributes(void)::ref;
        qword_1ECE35038 = 1;
        unk_1ECE35040 = &ggl::flyoverPostchainBGBlurShaderVertShaderFunctionConstantMapping(void)::ref;
        qword_1ECE35048 = 0;
        unk_1ECE35050 = &ggl::flyoverPostchainBGBlurShaderVertShaderFunctionBufferMapping(void)::ref;
        qword_1ECE35058 = 0;
        unk_1ECE35060 = &ggl::flyoverPostchainBGBlurShaderVertShaderFunctionTextureMapping(void)::ref;
        ggl::flyoverPostchainBGBlurShaderVertexFunctionDescriptor(void)::ref = v248;
        *(_DWORD *)algn_1ECE35024 = 0;
        qword_1ECE35068 = 0;
        unk_1ECE35070 = &ggl::flyoverPostchainBGBlurShaderVertShaderFunctionSamplerMapping(void)::ref;
        qword_1ECE35080 = 0;
        unk_1ECE35088 = 0;
        qword_1ECE35078 = 0;
      }
      qword_1ECE34310 = (uint64_t)&ggl::flyoverPostchainBGBlurShaderVertexFunctionDescriptor(void)::ref;
      if ((v134 & 1) == 0
      {
        v249 = ggl::crc32::compute<37ul>("FlyoverPostchainBGBlurShaderFragment");
        qword_1ECE35270 = 0;
        unk_1ECE35278 = &ggl::flyoverPostchainBGBlurShaderFragShaderFunctionConstantMapping(void)::ref;
        qword_1ECE35280 = 1;
        unk_1ECE35288 = &ggl::flyoverPostchainBGBlurShaderFragShaderFunctionBufferMapping(void)::ref;
        ggl::flyoverPostchainBGBlurShaderFragmentFunctionDescriptor(void)::ref = v249;
        *(_DWORD *)algn_1ECE3525C = 1;
        qword_1ECE35290 = 0;
        unk_1ECE35298 = &ggl::flyoverPostchainBGBlurShaderFragShaderFunctionTextureMapping(void)::ref;
        qword_1ECE35260 = (uint64_t)"FlyoverPostchainBGBlurShader";
        unk_1ECE35268 = 0;
        qword_1ECE352A0 = 1;
        unk_1ECE352A8 = &ggl::flyoverPostchainBGBlurShaderFragShaderFunctionSamplerMapping(void)::ref;
        qword_1ECE352B8 = 0;
        unk_1ECE352C0 = 0;
        qword_1ECE352B0 = 1;
      }
      qword_1ECE34318 = (uint64_t)&ggl::flyoverPostchainBGBlurShaderFragmentFunctionDescriptor(void)::ref;
      if ((v135 & 1) == 0
      {
        v250 = ggl::crc32::compute<35ul>("FlyoverPostchainFGBlurShaderVertex");
        qword_1ECE35098 = (uint64_t)"FlyoverPostchainFGBlurShader";
        unk_1ECE350A0 = ggl::flyoverPostchainFGBlurShaderVertShaderFunctionAttributes(void)::ref;
        qword_1ECE350A8 = 1;
        unk_1ECE350B0 = &ggl::flyoverPostchainFGBlurShaderVertShaderFunctionConstantMapping(void)::ref;
        qword_1ECE350B8 = 0;
        unk_1ECE350C0 = &ggl::flyoverPostchainFGBlurShaderVertShaderFunctionBufferMapping(void)::ref;
        qword_1ECE350C8 = 0;
        unk_1ECE350D0 = &ggl::flyoverPostchainFGBlurShaderVertShaderFunctionTextureMapping(void)::ref;
        ggl::flyoverPostchainFGBlurShaderVertexFunctionDescriptor(void)::ref = v250;
        *(_DWORD *)algn_1ECE35094 = 0;
        qword_1ECE350D8 = 0;
        unk_1ECE350E0 = &ggl::flyoverPostchainFGBlurShaderVertShaderFunctionSamplerMapping(void)::ref;
        qword_1ECE350F0 = 0;
        unk_1ECE350F8 = 0;
        qword_1ECE350E8 = 0;
      }
      qword_1ECE34320 = (uint64_t)&ggl::flyoverPostchainFGBlurShaderVertexFunctionDescriptor(void)::ref;
      if ((v136 & 1) == 0
      {
        ggl::flyoverPostchainFGBlurShaderFragmentFunctionDescriptor(void)::ref = ggl::crc32::compute<37ul>("FlyoverPostchainFGBlurShaderFragment");
        *(_DWORD *)algn_1ECE352CC = 1;
        qword_1ECE352D0 = (uint64_t)"FlyoverPostchainFGBlurShader";
        unk_1ECE352D8 = 0;
        qword_1ECE352E0 = 0;
        unk_1ECE352E8 = &ggl::flyoverPostchainFGBlurShaderFragShaderFunctionConstantMapping(void)::ref;
        qword_1ECE352F0 = 1;
        unk_1ECE352F8 = &ggl::flyoverPostchainFGBlurShaderFragShaderFunctionBufferMapping(void)::ref;
        qword_1ECE35300 = 0;
        unk_1ECE35308 = &ggl::flyoverPostchainFGBlurShaderFragShaderFunctionTextureMapping(void)::ref;
        qword_1ECE35310 = 2;
        unk_1ECE35318 = &ggl::flyoverPostchainFGBlurShaderFragShaderFunctionSamplerMapping(void)::ref;
        qword_1ECE35328 = 0;
        unk_1ECE35330 = 0;
        qword_1ECE35320 = 2;
      }
      qword_1ECE34328 = (uint64_t)&ggl::flyoverPostchainFGBlurShaderFragmentFunctionDescriptor(void)::ref;
      if ((v137 & 1) == 0
      {
        v251 = ggl::crc32::compute<37ul>("FlyoverPostchainTentBlurShaderVertex");
        qword_1ECE35348 = (uint64_t)"FlyoverPostchainTentBlurShader";
        unk_1ECE35350 = ggl::flyoverPostchainTentBlurShaderVertShaderFunctionAttributes(void)::ref;
        qword_1ECE35358 = 1;
        unk_1ECE35360 = &ggl::flyoverPostchainTentBlurShaderVertShaderFunctionConstantMapping(void)::ref;
        qword_1ECE35368 = 0;
        unk_1ECE35370 = &ggl::flyoverPostchainTentBlurShaderVertShaderFunctionBufferMapping(void)::ref;
        qword_1ECE35378 = 0;
        unk_1ECE35380 = &ggl::flyoverPostchainTentBlurShaderVertShaderFunctionTextureMapping(void)::ref;
        ggl::flyoverPostchainTentBlurShaderVertexFunctionDescriptor(void)::ref = v251;
        *(_DWORD *)algn_1ECE35344 = 0;
        qword_1ECE35388 = 0;
        unk_1ECE35390 = &ggl::flyoverPostchainTentBlurShaderVertShaderFunctionSamplerMapping(void)::ref;
        qword_1ECE353A0 = 0;
        unk_1ECE353A8 = 0;
        qword_1ECE35398 = 0;
      }
      qword_1ECE34330 = (uint64_t)&ggl::flyoverPostchainTentBlurShaderVertexFunctionDescriptor(void)::ref;
      if ((v138 & 1) == 0
      {
        ggl::flyoverPostchainTentBlurShaderFragmentFunctionDescriptor(void)::ref = 0x1F63B14D0;
        qword_1ECE35670 = (uint64_t)"FlyoverPostchainTentBlurShader";
        unk_1ECE35678 = 0;
        qword_1ECE35680 = 0;
        unk_1ECE35688 = &ggl::flyoverPostchainTentBlurShaderFragShaderFunctionConstantMapping(void)::ref;
        qword_1ECE35690 = 0;
        unk_1ECE35698 = &ggl::flyoverPostchainTentBlurShaderFragShaderFunctionBufferMapping(void)::ref;
        qword_1ECE356A0 = 0;
        unk_1ECE356A8 = &ggl::flyoverPostchainTentBlurShaderFragShaderFunctionTextureMapping(void)::ref;
        qword_1ECE356B0 = 1;
        unk_1ECE356B8 = &ggl::flyoverPostchainTentBlurShaderFragShaderFunctionSamplerMapping(void)::ref;
        qword_1ECE356C8 = 0;
        unk_1ECE356D0 = 0;
        qword_1ECE356C0 = 1;
      }
      qword_1ECE34338 = (uint64_t)&ggl::flyoverPostchainTentBlurShaderFragmentFunctionDescriptor(void)::ref;
      if ((v139 & 1) == 0
      {
        v252 = ggl::crc32::compute<38ul>("FlyoverRoadFillProceduralShaderVertex");
        qword_1ECE428B0 = (uint64_t)"FlyoverRoadFillProceduralShader";
        unk_1ECE428B8 = ggl::flyoverRoadFillProceduralShaderVertShaderFunctionAttributes(void)::ref;
        qword_1ECE428C0 = 1;
        unk_1ECE428C8 = &ggl::flyoverRoadFillProceduralShaderVertShaderFunctionConstantMapping(void)::ref;
        qword_1ECE428D0 = 4;
        unk_1ECE428D8 = &ggl::flyoverRoadFillProceduralShaderVertShaderFunctionBufferMapping(void)::ref;
        qword_1ECE428E0 = 0;
        unk_1ECE428E8 = &ggl::flyoverRoadFillProceduralShaderVertShaderFunctionTextureMapping(void)::ref;
        ggl::flyoverRoadFillProceduralShaderVertexFunctionDescriptor(void)::ref = v252;
        *(_DWORD *)algn_1ECE428AC = 0;
        qword_1ECE428F0 = 0;
        unk_1ECE428F8 = &ggl::flyoverRoadFillProceduralShaderVertShaderFunctionSamplerMapping(void)::ref;
        qword_1ECE42908 = 0;
        unk_1ECE42910 = 0;
        qword_1ECE42900 = 0;
      }
      qword_1ECE34340 = (uint64_t)&ggl::flyoverRoadFillProceduralShaderVertexFunctionDescriptor(void)::ref;
      if ((v140 & 1) == 0
      {
        qword_1ECE42F98 = 0;
        unk_1ECE42FA0 = &ggl::flyoverRoadFillProceduralShaderFragShaderFunctionConstantMapping(void)::ref;
        qword_1ECE42FA8 = 2;
        unk_1ECE42FB0 = &ggl::flyoverRoadFillProceduralShaderFragShaderFunctionBufferMapping(void)::ref;
        ggl::flyoverRoadFillProceduralShaderFragmentFunctionDescriptor(void)::ref = 0x1BEAEB913;
        qword_1ECE42FB8 = 0;
        unk_1ECE42FC0 = &ggl::flyoverRoadFillProceduralShaderFragShaderFunctionTextureMapping(void)::ref;
        qword_1ECE42F88 = (uint64_t)"FlyoverRoadFillProceduralShader";
        unk_1ECE42F90 = 0;
        qword_1ECE42FC8 = 0;
        unk_1ECE42FD0 = &ggl::flyoverRoadFillProceduralShaderFragShaderFunctionSamplerMapping(void)::ref;
        qword_1ECE42FE0 = 0;
        unk_1ECE42FE8 = 0;
        qword_1ECE42FD8 = 0;
      }
      qword_1ECE34348 = (uint64_t)&ggl::flyoverRoadFillProceduralShaderFragmentFunctionDescriptor(void)::ref;
      if ((v141 & 1) == 0
      {
        v253 = ggl::crc32::compute<36ul>("FlyoverRoadFillTexturedShaderVertex");
        qword_1ECE42010 = (uint64_t)"FlyoverRoadFillTexturedShader";
        unk_1ECE42018 = ggl::flyoverRoadFillTexturedShaderVertShaderFunctionAttributes(void)::ref;
        qword_1ECE42020 = 1;
        unk_1ECE42028 = &ggl::flyoverRoadFillTexturedShaderVertShaderFunctionConstantMapping(void)::ref;
        qword_1ECE42030 = 4;
        unk_1ECE42038 = &ggl::flyoverRoadFillTexturedShaderVertShaderFunctionBufferMapping(void)::ref;
        qword_1ECE42040 = 0;
        unk_1ECE42048 = &ggl::flyoverRoadFillTexturedShaderVertShaderFunctionTextureMapping(void)::ref;
        ggl::flyoverRoadFillTexturedShaderVertexFunctionDescriptor(void)::ref = v253;
        *(_DWORD *)algn_1ECE4200C = 0;
        qword_1ECE42050 = 0;
        unk_1ECE42058 = &ggl::flyoverRoadFillTexturedShaderVertShaderFunctionSamplerMapping(void)::ref;
        qword_1ECE42068 = 0;
        unk_1ECE42070 = 0;
        qword_1ECE42060 = 0;
      }
      qword_1ECE34350 = (uint64_t)&ggl::flyoverRoadFillTexturedShaderVertexFunctionDescriptor(void)::ref;
      if ((v142 & 1) == 0
      {
        v254 = ggl::crc32::compute<38ul>("FlyoverRoadFillTexturedShaderFragment");
        qword_1ECE42938 = 0;
        unk_1ECE42940 = &ggl::flyoverRoadFillTexturedShaderFragShaderFunctionConstantMapping(void)::ref;
        qword_1ECE42948 = 2;
        unk_1ECE42950 = &ggl::flyoverRoadFillTexturedShaderFragShaderFunctionBufferMapping(void)::ref;
        ggl::flyoverRoadFillTexturedShaderFragmentFunctionDescriptor(void)::ref = v254;
        *(_DWORD *)algn_1ECE42924 = 1;
        qword_1ECE42958 = 0;
        unk_1ECE42960 = &ggl::flyoverRoadFillTexturedShaderFragShaderFunctionTextureMapping(void)::ref;
        qword_1ECE42928 = (uint64_t)"FlyoverRoadFillTexturedShader";
        unk_1ECE42930 = 0;
        qword_1ECE42968 = 1;
        unk_1ECE42970 = &ggl::flyoverRoadFillTexturedShaderFragShaderFunctionSamplerMapping(void)::ref;
        qword_1ECE42980 = 0;
        unk_1ECE42988 = 0;
        qword_1ECE42978 = 1;
      }
      qword_1ECE34358 = (uint64_t)&ggl::flyoverRoadFillTexturedShaderFragmentFunctionDescriptor(void)::ref;
      if ((v143 & 1) == 0
      {
        qword_1ECE42FF8 = (uint64_t)"FlyoverRoadStrokeProceduralShader";
        unk_1ECE43000 = ggl::flyoverRoadStrokeProceduralShaderVertShaderFunctionAttributes(void)::ref;
        qword_1ECE43008 = 1;
        unk_1ECE43010 = &ggl::flyoverRoadStrokeProceduralShaderVertShaderFunctionConstantMapping(void)::ref;
        qword_1ECE43018 = 4;
        unk_1ECE43020 = &ggl::flyoverRoadStrokeProceduralShaderVertShaderFunctionBufferMapping(void)::ref;
        qword_1ECE43028 = 0;
        unk_1ECE43030 = &ggl::flyoverRoadStrokeProceduralShaderVertShaderFunctionTextureMapping(void)::ref;
        ggl::flyoverRoadStrokeProceduralShaderVertexFunctionDescriptor(void)::ref = 3422672659;
        qword_1ECE43038 = 0;
        unk_1ECE43040 = &ggl::flyoverRoadStrokeProceduralShaderVertShaderFunctionSamplerMapping(void)::ref;
        qword_1ECE43050 = 0;
        unk_1ECE43058 = 0;
        qword_1ECE43048 = 0;
      }
      qword_1ECE34360 = (uint64_t)&ggl::flyoverRoadStrokeProceduralShaderVertexFunctionDescriptor(void)::ref;
      if ((v144 & 1) == 0
      {
        qword_1ECE43490 = 0;
        unk_1ECE43498 = &ggl::flyoverRoadStrokeProceduralShaderFragShaderFunctionConstantMapping(void)::ref;
        qword_1ECE434A0 = 3;
        unk_1ECE434A8 = &ggl::flyoverRoadStrokeProceduralShaderFragShaderFunctionBufferMapping(void)::ref;
        ggl::flyoverRoadStrokeProceduralShaderFragmentFunctionDescriptor(void)::ref = 0x1391D3DD7;
        qword_1ECE434B0 = 0;
        unk_1ECE434B8 = &ggl::flyoverRoadStrokeProceduralShaderFragShaderFunctionTextureMapping(void)::ref;
        qword_1ECE43480 = (uint64_t)"FlyoverRoadStrokeProceduralShader";
        unk_1ECE43488 = 0;
        qword_1ECE434C0 = 0;
        unk_1ECE434C8 = &ggl::flyoverRoadStrokeProceduralShaderFragShaderFunctionSamplerMapping(void)::ref;
        qword_1ECE434D8 = 0;
        unk_1ECE434E0 = 0;
        qword_1ECE434D0 = 0;
      }
      qword_1ECE34368 = (uint64_t)&ggl::flyoverRoadStrokeProceduralShaderFragmentFunctionDescriptor(void)::ref;
      if ((v145 & 1) == 0
      {
        v255 = ggl::crc32::compute<38ul>("FlyoverRoadStrokeTexturedShaderVertex");
        qword_1ECE42998 = (uint64_t)"FlyoverRoadStrokeTexturedShader";
        unk_1ECE429A0 = ggl::flyoverRoadStrokeTexturedShaderVertShaderFunctionAttributes(void)::ref;
        qword_1ECE429A8 = 1;
        unk_1ECE429B0 = &ggl::flyoverRoadStrokeTexturedShaderVertShaderFunctionConstantMapping(void)::ref;
        qword_1ECE429B8 = 5;
        unk_1ECE429C0 = &ggl::flyoverRoadStrokeTexturedShaderVertShaderFunctionBufferMapping(void)::ref;
        qword_1ECE429C8 = 0;
        unk_1ECE429D0 = &ggl::flyoverRoadStrokeTexturedShaderVertShaderFunctionTextureMapping(void)::ref;
        ggl::flyoverRoadStrokeTexturedShaderVertexFunctionDescriptor(void)::ref = v255;
        *(_DWORD *)algn_1ECE42994 = 0;
        qword_1ECE429D8 = 0;
        unk_1ECE429E0 = &ggl::flyoverRoadStrokeTexturedShaderVertShaderFunctionSamplerMapping(void)::ref;
        qword_1ECE429F0 = 0;
        unk_1ECE429F8 = 0;
        qword_1ECE429E8 = 0;
      }
      qword_1ECE34370 = (uint64_t)&ggl::flyoverRoadStrokeTexturedShaderVertexFunctionDescriptor(void)::ref;
      if ((v146 & 1) == 0
      {
        ggl::flyoverRoadStrokeTexturedShaderFragmentFunctionDescriptor(void)::ref = 0x1B1863BE2;
        qword_1ECE43070 = (uint64_t)"FlyoverRoadStrokeTexturedShader";
        unk_1ECE43078 = 0;
        qword_1ECE43080 = 0;
        unk_1ECE43088 = &ggl::flyoverRoadStrokeTexturedShaderFragShaderFunctionConstantMapping(void)::ref;
        qword_1ECE43090 = 2;
        unk_1ECE43098 = &ggl::flyoverRoadStrokeTexturedShaderFragShaderFunctionBufferMapping(void)::ref;
        qword_1ECE430A0 = 0;
        unk_1ECE430A8 = &ggl::flyoverRoadStrokeTexturedShaderFragShaderFunctionTextureMapping(void)::ref;
        qword_1ECE430B0 = 1;
        unk_1ECE430B8 = &ggl::flyoverRoadStrokeTexturedShaderFragShaderFunctionSamplerMapping(void)::ref;
        qword_1ECE430C8 = 0;
        unk_1ECE430D0 = 0;
        qword_1ECE430C0 = 1;
      }
      qword_1ECE34378 = (uint64_t)&ggl::flyoverRoadStrokeTexturedShaderFragmentFunctionDescriptor(void)::ref;
      if ((v147 & 1) == 0
      {
        v256 = ggl::crc32::compute<25ul>("FlyoverRouteShaderVertex");
        qword_1ECE3DEC0 = (uint64_t)"FlyoverRouteShader";
        unk_1ECE3DEC8 = ggl::flyoverRouteShaderVertShaderFunctionAttributes(void)::ref;
        qword_1ECE3DED0 = 1;
        unk_1ECE3DED8 = &ggl::flyoverRouteShaderVertShaderFunctionConstantMapping(void)::ref;
        qword_1ECE3DEE0 = 3;
        unk_1ECE3DEE8 = &ggl::flyoverRouteShaderVertShaderFunctionBufferMapping(void)::ref;
        qword_1ECE3DEF0 = 0;
        unk_1ECE3DEF8 = &ggl::flyoverRouteShaderVertShaderFunctionTextureMapping(void)::ref;
        ggl::flyoverRouteShaderVertexFunctionDescriptor(void)::ref = v256;
        *(_DWORD *)algn_1ECE3DEBC = 0;
        qword_1ECE3DF00 = 0;
        unk_1ECE3DF08 = &ggl::flyoverRouteShaderVertShaderFunctionSamplerMapping(void)::ref;
        qword_1ECE3DF18 = 0;
        unk_1ECE3DF20 = 0;
        qword_1ECE3DF10 = 0;
      }
      qword_1ECE34380 = (uint64_t)&ggl::flyoverRouteShaderVertexFunctionDescriptor(void)::ref;
      if ((v148 & 1) == 0
      {
        v257 = ggl::crc32::compute<27ul>("FlyoverRouteShaderFragment");
        qword_1ECE3EA88 = 0;
        unk_1ECE3EA90 = &ggl::flyoverRouteShaderFragShaderFunctionConstantMapping(void)::ref;
        qword_1ECE3EA98 = 1;
        unk_1ECE3EAA0 = &ggl::flyoverRouteShaderFragShaderFunctionBufferMapping(void)::ref;
        ggl::flyoverRouteShaderFragmentFunctionDescriptor(void)::ref = v257;
        *(_DWORD *)algn_1ECE3EA74 = 1;
        qword_1ECE3EAA8 = 0;
        unk_1ECE3EAB0 = &ggl::flyoverRouteShaderFragShaderFunctionTextureMapping(void)::ref;
        qword_1ECE3EA78 = (uint64_t)"FlyoverRouteShader";
        unk_1ECE3EA80 = 0;
        qword_1ECE3EAB8 = 1;
        unk_1ECE3EAC0 = &ggl::flyoverRouteShaderFragShaderFunctionSamplerMapping(void)::ref;
        qword_1ECE3EAD0 = 0;
        unk_1ECE3EAD8 = 0;
        qword_1ECE3EAC8 = 1;
      }
      qword_1ECE34388 = (uint64_t)&ggl::flyoverRouteShaderFragmentFunctionDescriptor(void)::ref;
      if ((v149 & 1) == 0
      {
        v258 = ggl::crc32::compute<27ul>("FlyoverTrafficShaderVertex");
        qword_1ECE3EAE8 = (uint64_t)"FlyoverTrafficShader";
        unk_1ECE3EAF0 = ggl::flyoverTrafficShaderVertShaderFunctionAttributes(void)::ref;
        qword_1ECE3EAF8 = 1;
        unk_1ECE3EB00 = &ggl::flyoverTrafficShaderVertShaderFunctionConstantMapping(void)::ref;
        qword_1ECE3EB08 = 4;
        unk_1ECE3EB10 = &ggl::flyoverTrafficShaderVertShaderFunctionBufferMapping(void)::ref;
        qword_1ECE3EB18 = 0;
        unk_1ECE3EB20 = &ggl::flyoverTrafficShaderVertShaderFunctionTextureMapping(void)::ref;
        ggl::flyoverTrafficShaderVertexFunctionDescriptor(void)::ref = v258;
        *(_DWORD *)algn_1ECE3EAE4 = 0;
        qword_1ECE3EB28 = 0;
        unk_1ECE3EB30 = &ggl::flyoverTrafficShaderVertShaderFunctionSamplerMapping(void)::ref;
        qword_1ECE3EB40 = 0;
        unk_1ECE3EB48 = 0;
        qword_1ECE3EB38 = 0;
      }
      qword_1ECE34390 = (uint64_t)&ggl::flyoverTrafficShaderVertexFunctionDescriptor(void)::ref;
      if ((v150 & 1) == 0
      {
        ggl::flyoverTrafficShaderFragmentFunctionDescriptor(void)::ref = ggl::crc32::compute<29ul>("FlyoverTrafficShaderFragment");
        *(_DWORD *)algn_1ECE3F8FC = 1;
        qword_1ECE3F910 = 0;
        unk_1ECE3F918 = &ggl::flyoverTrafficShaderFragShaderFunctionConstantMapping(void)::ref;
        qword_1ECE3F920 = 3;
        unk_1ECE3F928 = &ggl::flyoverTrafficShaderFragShaderFunctionBufferMapping(void)::ref;
        qword_1ECE3F930 = 0;
        unk_1ECE3F938 = &ggl::flyoverTrafficShaderFragShaderFunctionTextureMapping(void)::ref;
        qword_1ECE3F900 = (uint64_t)"FlyoverTrafficShader";
        unk_1ECE3F908 = 0;
        qword_1ECE3F940 = 0;
        unk_1ECE3F948 = &ggl::flyoverTrafficShaderFragShaderFunctionSamplerMapping(void)::ref;
        qword_1ECE3F958 = 0;
        unk_1ECE3F960 = 0;
        qword_1ECE3F950 = 0;
      }
      qword_1ECE34398 = (uint64_t)&ggl::flyoverTrafficShaderFragmentFunctionDescriptor(void)::ref;
      if ((v151 & 1) == 0
      {
        v259 = ggl::crc32::compute<22ul>("SolidLineShaderVertex");
        qword_1ECE3D4F0 = (uint64_t)"SolidLineShader";
        unk_1ECE3D4F8 = ggl::solidLineShaderVertShaderFunctionAttributes(void)::ref;
        qword_1ECE3D500 = 1;
        unk_1ECE3D508 = &ggl::solidLineShaderVertShaderFunctionConstantMapping(void)::ref;
        qword_1ECE3D510 = 2;
        unk_1ECE3D518 = &ggl::solidLineShaderVertShaderFunctionBufferMapping(void)::ref;
        qword_1ECE3D520 = 0;
        unk_1ECE3D528 = &ggl::solidLineShaderVertShaderFunctionTextureMapping(void)::ref;
        ggl::solidLineShaderVertexFunctionDescriptor(void)::ref = v259;
        *(_DWORD *)algn_1ECE3D4EC = 0;
        qword_1ECE3D530 = 0;
        unk_1ECE3D538 = &ggl::solidLineShaderVertShaderFunctionSamplerMapping(void)::ref;
        qword_1ECE3D548 = 0;
        unk_1ECE3D550 = 0;
        qword_1ECE3D540 = 0;
      }
      qword_1ECE343A0 = (uint64_t)&ggl::solidLineShaderVertexFunctionDescriptor(void)::ref;
      if ((v152 & 1) == 0
      {
        ggl::solidLineShaderFragmentFunctionDescriptor(void)::ref = ggl::crc32::compute<24ul>("SolidLineShaderFragment");
        *(_DWORD *)algn_1ECE3DAB4 = 1;
        qword_1ECE3DAB8 = (uint64_t)"SolidLineShader";
        unk_1ECE3DAC0 = 0;
        qword_1ECE3DAC8 = 0;
        unk_1ECE3DAD0 = &ggl::solidLineShaderFragShaderFunctionConstantMapping(void)::ref;
        qword_1ECE3DAD8 = 1;
        unk_1ECE3DAE0 = &ggl::solidLineShaderFragShaderFunctionBufferMapping(void)::ref;
        qword_1ECE3DAE8 = 0;
        unk_1ECE3DAF0 = &ggl::solidLineShaderFragShaderFunctionTextureMapping(void)::ref;
        qword_1ECE3DAF8 = 0;
        unk_1ECE3DB00 = &ggl::solidLineShaderFragShaderFunctionSamplerMapping(void)::ref;
        qword_1ECE3DB10 = 0;
        unk_1ECE3DB18 = 0;
        qword_1ECE3DB08 = 0;
      }
      qword_1ECE343A8 = (uint64_t)&ggl::solidLineShaderFragmentFunctionDescriptor(void)::ref;
      if ((v153 & 1) == 0
      {
        ggl::starsShaderVertexFunctionDescriptor(void)::ref = ggl::crc32::compute<18ul>("StarsShaderVertex");
        *(_DWORD *)algn_1ECE3C8D4 = 0;
        qword_1ECE3C8D8 = (uint64_t)"StarsShader";
        unk_1ECE3C8E0 = ggl::starsShaderVertShaderFunctionAttributes(void)::ref;
        qword_1ECE3C8E8 = 1;
        unk_1ECE3C8F0 = &ggl::starsShaderVertShaderFunctionConstantMapping(void)::ref;
        qword_1ECE3C8F8 = 1;
        unk_1ECE3C900 = &ggl::starsShaderVertShaderFunctionBufferMapping(void)::ref;
        qword_1ECE3C908 = 0;
        unk_1ECE3C910 = &ggl::starsShaderVertShaderFunctionTextureMapping(void)::ref;
        qword_1ECE3C918 = 0;
        unk_1ECE3C920 = &ggl::starsShaderVertShaderFunctionSamplerMapping(void)::ref;
        qword_1ECE3C930 = 0;
        unk_1ECE3C938 = 0;
        qword_1ECE3C928 = 0;
      }
      qword_1ECE343B0 = (uint64_t)&ggl::starsShaderVertexFunctionDescriptor(void)::ref;
      if ((v154 & 1) == 0
      {
        ggl::starsShaderFragmentFunctionDescriptor(void)::ref = ggl::crc32::compute<20ul>("StarsShaderFragment");
        *(_DWORD *)algn_1ECE3CF9C = 1;
        qword_1ECE3CFB0 = 0;
        unk_1ECE3CFB8 = &ggl::starsShaderFragShaderFunctionConstantMapping(void)::ref;
        qword_1ECE3CFC0 = 0;
        unk_1ECE3CFC8 = &ggl::starsShaderFragShaderFunctionBufferMapping(void)::ref;
        qword_1ECE3CFD0 = 0;
        unk_1ECE3CFD8 = &ggl::starsShaderFragShaderFunctionTextureMapping(void)::ref;
        qword_1ECE3CFA0 = (uint64_t)"StarsShader";
        unk_1ECE3CFA8 = 0;
        qword_1ECE3CFE0 = 0;
        unk_1ECE3CFE8 = &ggl::starsShaderFragShaderFunctionSamplerMapping(void)::ref;
        qword_1ECE3CFF8 = 0;
        unk_1ECE3D000 = 0;
        qword_1ECE3CFF0 = 0;
      }
      qword_1ECE343B8 = (uint64_t)&ggl::starsShaderFragmentFunctionDescriptor(void)::ref;
      if ((v155 & 1) == 0
      {
        v260 = ggl::crc32::compute<32ul>("StenciledAlphaClearShaderVertex");
        qword_1ECE410A0 = (uint64_t)"StenciledAlphaClearShader";
        unk_1ECE410A8 = ggl::stenciledAlphaClearShaderVertShaderFunctionAttributes(void)::ref;
        qword_1ECE410B0 = 1;
        unk_1ECE410B8 = &ggl::stenciledAlphaClearShaderVertShaderFunctionConstantMapping(void)::ref;
        qword_1ECE410C0 = 0;
        unk_1ECE410C8 = &ggl::stenciledAlphaClearShaderVertShaderFunctionBufferMapping(void)::ref;
        qword_1ECE410D0 = 0;
        unk_1ECE410D8 = &ggl::stenciledAlphaClearShaderVertShaderFunctionTextureMapping(void)::ref;
        ggl::stenciledAlphaClearShaderVertexFunctionDescriptor(void)::ref = v260;
        *(_DWORD *)algn_1ECE4109C = 0;
        qword_1ECE410E0 = 0;
        unk_1ECE410E8 = &ggl::stenciledAlphaClearShaderVertShaderFunctionSamplerMapping(void)::ref;
        qword_1ECE410F8 = 0;
        unk_1ECE41100 = 0;
        qword_1ECE410F0 = 0;
      }
      qword_1ECE343C0 = (uint64_t)&ggl::stenciledAlphaClearShaderVertexFunctionDescriptor(void)::ref;
      if ((v156 & 1) == 0
      {
        ggl::stenciledAlphaClearShaderFragmentFunctionDescriptor(void)::ref = ggl::crc32::compute<34ul>("StenciledAlphaClearShaderFragment");
        *(_DWORD *)algn_1ECE41BF4 = 1;
        qword_1ECE41C08 = 0;
        unk_1ECE41C10 = &ggl::stenciledAlphaClearShaderFragShaderFunctionConstantMapping(void)::ref;
        qword_1ECE41C18 = 0;
        unk_1ECE41C20 = &ggl::stenciledAlphaClearShaderFragShaderFunctionBufferMapping(void)::ref;
        qword_1ECE41C28 = 0;
        unk_1ECE41C30 = &ggl::stenciledAlphaClearShaderFragShaderFunctionTextureMapping(void)::ref;
        qword_1ECE41BF8 = (uint64_t)"StenciledAlphaClearShader";
        unk_1ECE41C00 = 0;
        qword_1ECE41C38 = 0;
        unk_1ECE41C40 = &ggl::stenciledAlphaClearShaderFragShaderFunctionSamplerMapping(void)::ref;
        qword_1ECE41C50 = 0;
        unk_1ECE41C58 = 0;
        qword_1ECE41C48 = 0;
      }
      qword_1ECE343C8 = (uint64_t)&ggl::stenciledAlphaClearShaderFragmentFunctionDescriptor(void)::ref;
      if ((v157 & 1) == 0
      {
        v261 = ggl::crc32::compute<28ul>("TileBaseSurfaceShaderVertex");
        qword_1ECE3F568 = (uint64_t)"TileBaseSurfaceShader";
        unk_1ECE3F570 = ggl::tileBaseSurfaceShaderVertShaderFunctionAttributes(void)::ref;
        qword_1ECE3F578 = 1;
        unk_1ECE3F580 = &ggl::tileBaseSurfaceShaderVertShaderFunctionConstantMapping(void)::ref;
        qword_1ECE3F588 = 2;
        unk_1ECE3F590 = &ggl::tileBaseSurfaceShaderVertShaderFunctionBufferMapping(void)::ref;
        qword_1ECE3F598 = 0;
        unk_1ECE3F5A0 = &ggl::tileBaseSurfaceShaderVertShaderFunctionTextureMapping(void)::ref;
        ggl::tileBaseSurfaceShaderVertexFunctionDescriptor(void)::ref = v261;
        *(_DWORD *)algn_1ECE3F564 = 0;
        qword_1ECE3F5A8 = 0;
        unk_1ECE3F5B0 = &ggl::tileBaseSurfaceShaderVertShaderFunctionSamplerMapping(void)::ref;
        qword_1ECE3F5C0 = 0;
        unk_1ECE3F5C8 = 0;
        qword_1ECE3F5B8 = 0;
      }
      qword_1ECE343D0 = (uint64_t)&ggl::tileBaseSurfaceShaderVertexFunctionDescriptor(void)::ref;
      if ((v158 & 1) == 0
      {
        ggl::tileBaseSurfaceShaderFragmentFunctionDescriptor(void)::ref = ggl::crc32::compute<30ul>("TileBaseSurfaceShaderFragment");
        *(_DWORD *)algn_1ECE4032C = 1;
        qword_1ECE40330 = (uint64_t)"TileBaseSurfaceShader";
        unk_1ECE40338 = 0;
        qword_1ECE40340 = 0;
        unk_1ECE40348 = &ggl::tileBaseSurfaceShaderFragShaderFunctionConstantMapping(void)::ref;
        qword_1ECE40350 = 1;
        unk_1ECE40358 = &ggl::tileBaseSurfaceShaderFragShaderFunctionBufferMapping(void)::ref;
        qword_1ECE40360 = 0;
        unk_1ECE40368 = &ggl::tileBaseSurfaceShaderFragShaderFunctionTextureMapping(void)::ref;
        qword_1ECE40370 = 0;
        unk_1ECE40378 = &ggl::tileBaseSurfaceShaderFragShaderFunctionSamplerMapping(void)::ref;
        qword_1ECE40388 = 0;
        unk_1ECE40390 = 0;
        qword_1ECE40380 = 0;
      }
      qword_1ECE343D8 = (uint64_t)&ggl::tileBaseSurfaceShaderFragmentFunctionDescriptor(void)::ref;
      if ((v159 & 1) == 0
      {
        v262 = ggl::crc32::compute<22ul>("ImageCopyShaderVertex");
        qword_1ECE3D410 = (uint64_t)"ImageCopyShader";
        unk_1ECE3D418 = ggl::imageCopyShaderVertShaderFunctionAttributes(void)::ref;
        qword_1ECE3D420 = 1;
        unk_1ECE3D428 = &ggl::imageCopyShaderVertShaderFunctionConstantMapping(void)::ref;
        qword_1ECE3D430 = 0;
        unk_1ECE3D438 = &ggl::imageCopyShaderVertShaderFunctionBufferMapping(void)::ref;
        qword_1ECE3D440 = 0;
        unk_1ECE3D448 = &ggl::imageCopyShaderVertShaderFunctionTextureMapping(void)::ref;
        ggl::imageCopyShaderVertexFunctionDescriptor(void)::ref = v262;
        *(_DWORD *)algn_1ECE3D40C = 0;
        qword_1ECE3D450 = 0;
        unk_1ECE3D458 = &ggl::imageCopyShaderVertShaderFunctionSamplerMapping(void)::ref;
        qword_1ECE3D468 = 0;
        unk_1ECE3D470 = 0;
        qword_1ECE3D460 = 0;
      }
      qword_1ECE343E0 = (uint64_t)&ggl::imageCopyShaderVertexFunctionDescriptor(void)::ref;
      if ((v160 & 1) == 0
      {
        v263 = ggl::crc32::compute<24ul>("ImageCopyShaderFragment");
        qword_1ECE3D978 = 0;
        unk_1ECE3D980 = &ggl::imageCopyShaderFragShaderFunctionConstantMapping(void)::ref;
        qword_1ECE3D988 = 0;
        unk_1ECE3D990 = &ggl::imageCopyShaderFragShaderFunctionBufferMapping(void)::ref;
        ggl::imageCopyShaderFragmentFunctionDescriptor(void)::ref = v263;
        *(_DWORD *)algn_1ECE3D964 = 1;
        qword_1ECE3D998 = 0;
        unk_1ECE3D9A0 = &ggl::imageCopyShaderFragShaderFunctionTextureMapping(void)::ref;
        qword_1ECE3D968 = (uint64_t)"ImageCopyShader";
        unk_1ECE3D970 = 0;
        qword_1ECE3D9A8 = 1;
        unk_1ECE3D9B0 = &ggl::imageCopyShaderFragShaderFunctionSamplerMapping(void)::ref;
        qword_1ECE3D9C0 = 0;
        unk_1ECE3D9C8 = 0;
        qword_1ECE3D9B8 = 1;
      }
      qword_1ECE343E8 = (uint64_t)&ggl::imageCopyShaderFragmentFunctionDescriptor(void)::ref;
    }
    qword_1ECE39228 = (uint64_t)&FlyoverLibraryShaderFunctions(void)::desc;
    unk_1ECE39230 = 64;
    if ((v70 & 1) == 0)
    {
      if ((_DWORD)v161)
      {
        ggl::EarthCoronaShader::typedReflection(v161);
        FlyoverLibraryShaders(void)::desc = (uint64_t)&ggl::EarthCoronaShader::typedReflection(void)::ref;
        ggl::EndOfWorldShader::typedReflection(v162);
        qword_1ECE34070 = (uint64_t)&ggl::EndOfWorldShader::typedReflection(void)::ref;
        ggl::FlyoverShader::typedReflection(v163);
        qword_1ECE34078 = (uint64_t)&ggl::FlyoverShader::typedReflection(void)::ref;
        ggl::FlyoverPolarShader::typedReflection(v164);
        qword_1ECE34080 = (uint64_t)&ggl::FlyoverPolarShader::typedReflection(void)::ref;
        ggl::FlyoverBorderShader::typedReflection(v165);
        qword_1ECE34088 = (uint64_t)&ggl::FlyoverBorderShader::typedReflection(void)::ref;
        ggl::FlyoverBorderRibbonShader::typedReflection(v166);
        qword_1ECE34090 = (uint64_t)&ggl::FlyoverBorderRibbonShader::typedReflection(void)::ref;
        ggl::FlyoverManeuverShader::typedReflection(v167);
        qword_1ECE34098 = (uint64_t)&ggl::FlyoverManeuverShader::typedReflection(void)::ref;
        ggl::FlyoverMaskedShader::typedReflection(v168);
        qword_1ECE340A0 = (uint64_t)&ggl::FlyoverMaskedShader::typedReflection(void)::ref;
        ggl::FlyoverMorphShader::typedReflection(v169);
        qword_1ECE340A8 = (uint64_t)&ggl::FlyoverMorphShader::typedReflection(void)::ref;
        ggl::FlyoverMorphBorderShader::typedReflection(v170);
        qword_1ECE340B0 = (uint64_t)&ggl::FlyoverMorphBorderShader::typedReflection(void)::ref;
        ggl::FlyoverMorphNightShader::typedReflection(v171);
        qword_1ECE340B8 = (uint64_t)&ggl::FlyoverMorphNightShader::typedReflection(void)::ref;
        ggl::FlyoverNightShader::typedReflection(v172);
        qword_1ECE340C0 = (uint64_t)&ggl::FlyoverNightShader::typedReflection(void)::ref;
        ggl::FlyoverNightPolarShader::typedReflection(v173);
        qword_1ECE340C8 = (uint64_t)&ggl::FlyoverNightPolarShader::typedReflection(void)::ref;
        ggl::FlyoverNightDimShader::typedReflection(v174);
        qword_1ECE340D0 = (uint64_t)&ggl::FlyoverNightDimShader::typedReflection(void)::ref;
        ggl::FlyoverOverlayShader::typedReflection(v175);
        qword_1ECE340D8 = (uint64_t)&ggl::FlyoverOverlayShader::typedReflection(void)::ref;
        if ((v177 & 1) == 0)
        {
          if ((_DWORD)v176)
          {
            ggl::FlyoverPostchainCompositeShader::typedReflection(void)::ref = (uint64_t)"FlyoverPostchainCompositeShader";
            if ((v264 & 1) == 0
            {
              v265 = ggl::crc32::compute<38ul>("FlyoverPostchainCompositeShaderVertex");
              qword_1ECE353B8 = (uint64_t)"FlyoverPostchainCompositeShader";
              unk_1ECE353C0 = ggl::flyoverPostchainCompositeShaderVertShaderFunctionAttributes(void)::ref;
              qword_1ECE353C8 = 1;
              unk_1ECE353D0 = &ggl::flyoverPostchainCompositeShaderVertShaderFunctionConstantMapping(void)::ref;
              qword_1ECE353D8 = 0;
              unk_1ECE353E0 = &ggl::flyoverPostchainCompositeShaderVertShaderFunctionBufferMapping(void)::ref;
              qword_1ECE353E8 = 0;
              unk_1ECE353F0 = &ggl::flyoverPostchainCompositeShaderVertShaderFunctionTextureMapping(void)::ref;
              ggl::flyoverPostchainCompositeShaderVertexFunctionDescriptor(void)::ref = v265;
              *(_DWORD *)algn_1ECE353B4 = 0;
              qword_1ECE353F8 = 0;
              unk_1ECE35400 = &ggl::flyoverPostchainCompositeShaderVertShaderFunctionSamplerMapping(void)::ref;
              qword_1ECE35410 = 0;
              unk_1ECE35418 = 0;
              qword_1ECE35408 = 0;
            }
            qword_1ECE347A8 = (uint64_t)&ggl::flyoverPostchainCompositeShaderVertexFunctionDescriptor(void)::ref;
            dword_1ECE347B0 = ggl::crc32::compute<38ul>("FlyoverPostchainCompositeShaderVertex");
            if ((v266 & 1) == 0
            {
              ggl::flyoverPostchainCompositeShaderFragmentFunctionDescriptor(void)::ref = 0x11EFF1393;
              qword_1ECE35760 = (uint64_t)"FlyoverPostchainCompositeShader";
              unk_1ECE35768 = 0;
              qword_1ECE35770 = 0;
              unk_1ECE35778 = &ggl::flyoverPostchainCompositeShaderFragShaderFunctionConstantMapping(void)::ref;
              qword_1ECE35780 = 1;
              unk_1ECE35788 = &ggl::flyoverPostchainCompositeShaderFragShaderFunctionBufferMapping(void)::ref;
              qword_1ECE35790 = 0;
              unk_1ECE35798 = &ggl::flyoverPostchainCompositeShaderFragShaderFunctionTextureMapping(void)::ref;
              qword_1ECE357A0 = 4;
              unk_1ECE357A8 = &ggl::flyoverPostchainCompositeShaderFragShaderFunctionSamplerMapping(void)::ref;
              qword_1ECE357B8 = 0;
              unk_1ECE357C0 = 0;
              qword_1ECE357B0 = 4;
            }
            qword_1ECE347B8 = (uint64_t)&ggl::flyoverPostchainCompositeShaderFragmentFunctionDescriptor(void)::ref;
            dword_1ECE347C0 = 520033171;
            qword_1ECE347C8 = (uint64_t)ggl::flyoverPostchainCompositeShaderShaderConstants(void)::ref;
            unk_1ECE347D0 = 1;
            qword_1ECE347D8 = (uint64_t)ggl::flyoverPostchainCompositeShaderShaderTextures(void)::ref;
            unk_1ECE347E0 = 4;
            qword_1ECE347E8 = (uint64_t)ggl::flyoverPostchainCompositeShaderShaderSamplers(void)::ref;
            unk_1ECE347F0 = 4;
          }
        }
        qword_1ECE340E0 = (uint64_t)&ggl::FlyoverPostchainCompositeShader::typedReflection(void)::ref;
        if ((v178 & 1) == 0)
        {
          if ((_DWORD)v176)
          {
            ggl::FlyoverPostchainSplitFrameShader::typedReflection(void)::ref = (uint64_t)"FlyoverPostchainSplitFrameShader";
            if ((v267 & 1) == 0
            {
              qword_1ECE355F8 = (uint64_t)"FlyoverPostchainSplitFrameShader";
              unk_1ECE35600 = ggl::flyoverPostchainSplitFrameShaderVertShaderFunctionAttributes(void)::ref;
              qword_1ECE35608 = 1;
              unk_1ECE35610 = &ggl::flyoverPostchainSplitFrameShaderVertShaderFunctionConstantMapping(void)::ref;
              qword_1ECE35618 = 0;
              unk_1ECE35620 = &ggl::flyoverPostchainSplitFrameShaderVertShaderFunctionBufferMapping(void)::ref;
              qword_1ECE35628 = 0;
              unk_1ECE35630 = &ggl::flyoverPostchainSplitFrameShaderVertShaderFunctionTextureMapping(void)::ref;
              ggl::flyoverPostchainSplitFrameShaderVertexFunctionDescriptor(void)::ref = 2595229844;
              qword_1ECE35638 = 0;
              unk_1ECE35640 = &ggl::flyoverPostchainSplitFrameShaderVertShaderFunctionSamplerMapping(void)::ref;
              qword_1ECE35650 = 0;
              unk_1ECE35658 = 0;
              qword_1ECE35648 = 0;
            }
            qword_1ECE348C8 = (uint64_t)&ggl::flyoverPostchainSplitFrameShaderVertexFunctionDescriptor(void)::ref;
            dword_1ECE348D0 = -1699737452;
            if ((v268 & 1) == 0
            {
              ggl::flyoverPostchainSplitFrameShaderFragmentFunctionDescriptor(void)::ref = 0x148DF32F9;
              qword_1ECE359B0 = (uint64_t)"FlyoverPostchainSplitFrameShader";
              unk_1ECE359B8 = 0;
              qword_1ECE359C0 = 0;
              unk_1ECE359C8 = &ggl::flyoverPostchainSplitFrameShaderFragShaderFunctionConstantMapping(void)::ref;
              qword_1ECE359D0 = 1;
              unk_1ECE359D8 = &ggl::flyoverPostchainSplitFrameShaderFragShaderFunctionBufferMapping(void)::ref;
              qword_1ECE359E0 = 0;
              unk_1ECE359E8 = &ggl::flyoverPostchainSplitFrameShaderFragShaderFunctionTextureMapping(void)::ref;
              qword_1ECE359F0 = 2;
              unk_1ECE359F8 = &ggl::flyoverPostchainSplitFrameShaderFragShaderFunctionSamplerMapping(void)::ref;
              qword_1ECE35A08 = 0;
              unk_1ECE35A10 = 0;
              qword_1ECE35A00 = 2;
            }
            qword_1ECE348D8 = (uint64_t)&ggl::flyoverPostchainSplitFrameShaderFragmentFunctionDescriptor(void)::ref;
            dword_1ECE348E0 = 1222587129;
            qword_1ECE348E8 = (uint64_t)ggl::flyoverPostchainSplitFrameShaderShaderConstants(void)::ref;
            unk_1ECE348F0 = 1;
            qword_1ECE348F8 = (uint64_t)ggl::flyoverPostchainSplitFrameShaderShaderTextures(void)::ref;
            unk_1ECE34900 = 2;
            qword_1ECE34908 = (uint64_t)ggl::flyoverPostchainSplitFrameShaderShaderSamplers(void)::ref;
            unk_1ECE34910 = 2;
          }
        }
        qword_1ECE340E8 = (uint64_t)&ggl::FlyoverPostchainSplitFrameShader::typedReflection(void)::ref;
        if ((v179 & 1) == 0)
        {
          if ((_DWORD)v176)
          {
            ggl::FlyoverPostchainDownsampleCoCShader::typedReflection(void)::ref = (uint64_t)"FlyoverPostchainDownsampleCoCShader";
            if ((v269 & 1) == 0
            {
              qword_1ECE35A98 = (uint64_t)"FlyoverPostchainDownsampleCoCShader";
              unk_1ECE35AA0 = ggl::flyoverPostchainDownsampleCoCShaderVertShaderFunctionAttributes(void)::ref;
              qword_1ECE35AA8 = 1;
              unk_1ECE35AB0 = &ggl::flyoverPostchainDownsampleCoCShaderVertShaderFunctionConstantMapping(void)::ref;
              qword_1ECE35AB8 = 0;
              unk_1ECE35AC0 = &ggl::flyoverPostchainDownsampleCoCShaderVertShaderFunctionBufferMapping(void)::ref;
              qword_1ECE35AC8 = 0;
              unk_1ECE35AD0 = &ggl::flyoverPostchainDownsampleCoCShaderVertShaderFunctionTextureMapping(void)::ref;
              ggl::flyoverPostchainDownsampleCoCShaderVertexFunctionDescriptor(void)::ref = 3177222361;
              qword_1ECE35AD8 = 0;
              unk_1ECE35AE0 = &ggl::flyoverPostchainDownsampleCoCShaderVertShaderFunctionSamplerMapping(void)::ref;
              qword_1ECE35AF0 = 0;
              unk_1ECE35AF8 = 0;
              qword_1ECE35AE8 = 0;
            }
            qword_1ECE34A48 = (uint64_t)&ggl::flyoverPostchainDownsampleCoCShaderVertexFunctionDescriptor(void)::ref;
            dword_1ECE34A50 = -1117744935;
            if ((v270 & 1) == 0
            {
              ggl::flyoverPostchainDownsampleCoCShaderFragmentFunctionDescriptor(void)::ref = 0x1E0B0A741;
              qword_1ECE35D50 = (uint64_t)"FlyoverPostchainDownsampleCoCShader";
              unk_1ECE35D58 = 0;
              qword_1ECE35D60 = 0;
              unk_1ECE35D68 = &ggl::flyoverPostchainDownsampleCoCShaderFragShaderFunctionConstantMapping(void)::ref;
              qword_1ECE35D70 = 0;
              unk_1ECE35D78 = &ggl::flyoverPostchainDownsampleCoCShaderFragShaderFunctionBufferMapping(void)::ref;
              qword_1ECE35D80 = 0;
              unk_1ECE35D88 = &ggl::flyoverPostchainDownsampleCoCShaderFragShaderFunctionTextureMapping(void)::ref;
              qword_1ECE35D90 = 1;
              unk_1ECE35D98 = &ggl::flyoverPostchainDownsampleCoCShaderFragShaderFunctionSamplerMapping(void)::ref;
              qword_1ECE35DA8 = 0;
              unk_1ECE35DB0 = 0;
              qword_1ECE35DA0 = 1;
            }
            qword_1ECE34A58 = (uint64_t)&ggl::flyoverPostchainDownsampleCoCShaderFragmentFunctionDescriptor(void)::ref;
            dword_1ECE34A60 = -525293759;
            qword_1ECE34A68 = (uint64_t)&ggl::flyoverPostchainDownsampleCoCShaderShaderConstants(void)::ref;
            unk_1ECE34A70 = 0;
            qword_1ECE34A78 = (uint64_t)ggl::flyoverPostchainDownsampleCoCShaderShaderTextures(void)::ref;
            unk_1ECE34A80 = 1;
            qword_1ECE34A88 = (uint64_t)ggl::flyoverPostchainDownsampleCoCShaderShaderSamplers(void)::ref;
            unk_1ECE34A90 = 1;
          }
        }
        qword_1ECE340F0 = (uint64_t)&ggl::FlyoverPostchainDownsampleCoCShader::typedReflection(void)::ref;
        ggl::FlyoverPostchainBGBlurShader::typedReflection(v176);
        qword_1ECE340F8 = (uint64_t)&ggl::FlyoverPostchainBGBlurShader::typedReflection(void)::ref;
        ggl::FlyoverPostchainFGBlurShader::typedReflection(v180);
        qword_1ECE34100 = (uint64_t)&ggl::FlyoverPostchainFGBlurShader::typedReflection(void)::ref;
        if ((v182 & 1) == 0)
        {
          if ((_DWORD)v181)
          {
            ggl::FlyoverPostchainTentBlurShader::typedReflection(void)::ref = (uint64_t)"FlyoverPostchainTentBlurShader";
            if ((v271 & 1) == 0
            {
              v272 = ggl::crc32::compute<37ul>("FlyoverPostchainTentBlurShaderVertex");
              qword_1ECE35348 = (uint64_t)"FlyoverPostchainTentBlurShader";
              unk_1ECE35350 = ggl::flyoverPostchainTentBlurShaderVertShaderFunctionAttributes(void)::ref;
              qword_1ECE35358 = 1;
              unk_1ECE35360 = &ggl::flyoverPostchainTentBlurShaderVertShaderFunctionConstantMapping(void)::ref;
              qword_1ECE35368 = 0;
              unk_1ECE35370 = &ggl::flyoverPostchainTentBlurShaderVertShaderFunctionBufferMapping(void)::ref;
              qword_1ECE35378 = 0;
              unk_1ECE35380 = &ggl::flyoverPostchainTentBlurShaderVertShaderFunctionTextureMapping(void)::ref;
              ggl::flyoverPostchainTentBlurShaderVertexFunctionDescriptor(void)::ref = v272;
              *(_DWORD *)algn_1ECE35344 = 0;
              qword_1ECE35388 = 0;
              unk_1ECE35390 = &ggl::flyoverPostchainTentBlurShaderVertShaderFunctionSamplerMapping(void)::ref;
              qword_1ECE353A0 = 0;
              unk_1ECE353A8 = 0;
              qword_1ECE35398 = 0;
            }
            qword_1ECE34748 = (uint64_t)&ggl::flyoverPostchainTentBlurShaderVertexFunctionDescriptor(void)::ref;
            dword_1ECE34750 = ggl::crc32::compute<37ul>("FlyoverPostchainTentBlurShaderVertex");
            if ((v273 & 1) == 0
            {
              ggl::flyoverPostchainTentBlurShaderFragmentFunctionDescriptor(void)::ref = 0x1F63B14D0;
              qword_1ECE35670 = (uint64_t)"FlyoverPostchainTentBlurShader";
              unk_1ECE35678 = 0;
              qword_1ECE35680 = 0;
              unk_1ECE35688 = &ggl::flyoverPostchainTentBlurShaderFragShaderFunctionConstantMapping(void)::ref;
              qword_1ECE35690 = 0;
              unk_1ECE35698 = &ggl::flyoverPostchainTentBlurShaderFragShaderFunctionBufferMapping(void)::ref;
              qword_1ECE356A0 = 0;
              unk_1ECE356A8 = &ggl::flyoverPostchainTentBlurShaderFragShaderFunctionTextureMapping(void)::ref;
              qword_1ECE356B0 = 1;
              unk_1ECE356B8 = &ggl::flyoverPostchainTentBlurShaderFragShaderFunctionSamplerMapping(void)::ref;
              qword_1ECE356C8 = 0;
              unk_1ECE356D0 = 0;
              qword_1ECE356C0 = 1;
            }
            qword_1ECE34758 = (uint64_t)&ggl::flyoverPostchainTentBlurShaderFragmentFunctionDescriptor(void)::ref;
            dword_1ECE34760 = -163900208;
            qword_1ECE34768 = (uint64_t)&ggl::flyoverPostchainTentBlurShaderShaderConstants(void)::ref;
            unk_1ECE34770 = 0;
            qword_1ECE34778 = (uint64_t)ggl::flyoverPostchainTentBlurShaderShaderTextures(void)::ref;
            unk_1ECE34780 = 1;
            qword_1ECE34788 = (uint64_t)&ggl::flyoverPostchainTentBlurShaderShaderSamplers(void)::ref;
            unk_1ECE34790 = 1;
          }
        }
        qword_1ECE34108 = (uint64_t)&ggl::FlyoverPostchainTentBlurShader::typedReflection(void)::ref;
        if ((v183 & 1) == 0)
        {
          if ((_DWORD)v181)
          {
            ggl::FlyoverRoadFillProceduralShader::typedReflection(void)::ref = (uint64_t)"FlyoverRoadFillProceduralShader";
            if ((v274 & 1) == 0
            {
              v275 = ggl::crc32::compute<38ul>("FlyoverRoadFillProceduralShaderVertex");
              qword_1ECE428B0 = (uint64_t)"FlyoverRoadFillProceduralShader";
              unk_1ECE428B8 = ggl::flyoverRoadFillProceduralShaderVertShaderFunctionAttributes(void)::ref;
              qword_1ECE428C0 = 1;
              unk_1ECE428C8 = &ggl::flyoverRoadFillProceduralShaderVertShaderFunctionConstantMapping(void)::ref;
              qword_1ECE428D0 = 4;
              unk_1ECE428D8 = &ggl::flyoverRoadFillProceduralShaderVertShaderFunctionBufferMapping(void)::ref;
              qword_1ECE428E0 = 0;
              unk_1ECE428E8 = &ggl::flyoverRoadFillProceduralShaderVertShaderFunctionTextureMapping(void)::ref;
              ggl::flyoverRoadFillProceduralShaderVertexFunctionDescriptor(void)::ref = v275;
              *(_DWORD *)algn_1ECE428AC = 0;
              qword_1ECE428F0 = 0;
              unk_1ECE428F8 = &ggl::flyoverRoadFillProceduralShaderVertShaderFunctionSamplerMapping(void)::ref;
              qword_1ECE42908 = 0;
              unk_1ECE42910 = 0;
              qword_1ECE42900 = 0;
            }
            qword_1ECE3BB00 = (uint64_t)&ggl::flyoverRoadFillProceduralShaderVertexFunctionDescriptor(void)::ref;
            dword_1ECE3BB08 = ggl::crc32::compute<38ul>("FlyoverRoadFillProceduralShaderVertex");
            if ((v276 & 1) == 0
            {
              ggl::flyoverRoadFillProceduralShaderFragmentFunctionDescriptor(void)::ref = 0x1BEAEB913;
              qword_1ECE42F88 = (uint64_t)"FlyoverRoadFillProceduralShader";
              unk_1ECE42F90 = 0;
              qword_1ECE42F98 = 0;
              unk_1ECE42FA0 = &ggl::flyoverRoadFillProceduralShaderFragShaderFunctionConstantMapping(void)::ref;
              qword_1ECE42FA8 = 2;
              unk_1ECE42FB0 = &ggl::flyoverRoadFillProceduralShaderFragShaderFunctionBufferMapping(void)::ref;
              qword_1ECE42FB8 = 0;
              unk_1ECE42FC0 = &ggl::flyoverRoadFillProceduralShaderFragShaderFunctionTextureMapping(void)::ref;
              qword_1ECE42FC8 = 0;
              unk_1ECE42FD0 = &ggl::flyoverRoadFillProceduralShaderFragShaderFunctionSamplerMapping(void)::ref;
              qword_1ECE42FE0 = 0;
              unk_1ECE42FE8 = 0;
              qword_1ECE42FD8 = 0;
            }
            qword_1ECE3BB10 = (uint64_t)&ggl::flyoverRoadFillProceduralShaderFragmentFunctionDescriptor(void)::ref;
            dword_1ECE3BB18 = -1095845613;
            qword_1ECE3BB20 = (uint64_t)ggl::flyoverRoadFillProceduralShaderShaderConstants(void)::ref;
            unk_1ECE3BB28 = 4;
            qword_1ECE3BB30 = (uint64_t)&ggl::flyoverRoadFillProceduralShaderShaderTextures(void)::ref;
            unk_1ECE3BB38 = 0;
            qword_1ECE3BB40 = (uint64_t)&ggl::flyoverRoadFillProceduralShaderShaderSamplers(void)::ref;
            unk_1ECE3BB48 = 0;
          }
        }
        qword_1ECE34110 = (uint64_t)&ggl::FlyoverRoadFillProceduralShader::typedReflection(void)::ref;
        ggl::FlyoverRoadFillTexturedShader::typedReflection(v181);
        qword_1ECE34118 = (uint64_t)&ggl::FlyoverRoadFillTexturedShader::typedReflection(void)::ref;
        if ((v185 & 1) == 0)
        {
          if ((_DWORD)v184)
          {
            ggl::FlyoverRoadStrokeProceduralShader::typedReflection(void)::ref = (uint64_t)"FlyoverRoadStrokeProceduralShader";
            if ((v277 & 1) == 0
            {
              qword_1ECE42FF8 = (uint64_t)"FlyoverRoadStrokeProceduralShader";
              unk_1ECE43000 = ggl::flyoverRoadStrokeProceduralShaderVertShaderFunctionAttributes(void)::ref;
              qword_1ECE43008 = 1;
              unk_1ECE43010 = &ggl::flyoverRoadStrokeProceduralShaderVertShaderFunctionConstantMapping(void)::ref;
              qword_1ECE43018 = 4;
              unk_1ECE43020 = &ggl::flyoverRoadStrokeProceduralShaderVertShaderFunctionBufferMapping(void)::ref;
              qword_1ECE43028 = 0;
              unk_1ECE43030 = &ggl::flyoverRoadStrokeProceduralShaderVertShaderFunctionTextureMapping(void)::ref;
              ggl::flyoverRoadStrokeProceduralShaderVertexFunctionDescriptor(void)::ref = 3422672659;
              qword_1ECE43038 = 0;
              unk_1ECE43040 = &ggl::flyoverRoadStrokeProceduralShaderVertShaderFunctionSamplerMapping(void)::ref;
              qword_1ECE43050 = 0;
              unk_1ECE43058 = 0;
              qword_1ECE43048 = 0;
            }
            qword_1ECE3BD18 = (uint64_t)&ggl::flyoverRoadStrokeProceduralShaderVertexFunctionDescriptor(void)::ref;
            dword_1ECE3BD20 = -872294637;
            if ((v278 & 1) == 0
            {
              ggl::flyoverRoadStrokeProceduralShaderFragmentFunctionDescriptor(void)::ref = 0x1391D3DD7;
              qword_1ECE43480 = (uint64_t)"FlyoverRoadStrokeProceduralShader";
              unk_1ECE43488 = 0;
              qword_1ECE43490 = 0;
              unk_1ECE43498 = &ggl::flyoverRoadStrokeProceduralShaderFragShaderFunctionConstantMapping(void)::ref;
              qword_1ECE434A0 = 3;
              unk_1ECE434A8 = &ggl::flyoverRoadStrokeProceduralShaderFragShaderFunctionBufferMapping(void)::ref;
              qword_1ECE434B0 = 0;
              unk_1ECE434B8 = &ggl::flyoverRoadStrokeProceduralShaderFragShaderFunctionTextureMapping(void)::ref;
              qword_1ECE434C0 = 0;
              unk_1ECE434C8 = &ggl::flyoverRoadStrokeProceduralShaderFragShaderFunctionSamplerMapping(void)::ref;
              qword_1ECE434D8 = 0;
              unk_1ECE434E0 = 0;
              qword_1ECE434D0 = 0;
            }
            qword_1ECE3BD28 = (uint64_t)&ggl::flyoverRoadStrokeProceduralShaderFragmentFunctionDescriptor(void)::ref;
            dword_1ECE3BD30 = 958217687;
            qword_1ECE3BD38 = (uint64_t)ggl::flyoverRoadStrokeProceduralShaderShaderConstants(void)::ref;
            unk_1ECE3BD40 = 5;
            qword_1ECE3BD48 = (uint64_t)&ggl::flyoverRoadStrokeProceduralShaderShaderTextures(void)::ref;
            unk_1ECE3BD50 = 0;
            qword_1ECE3BD58 = (uint64_t)&ggl::flyoverRoadStrokeProceduralShaderShaderSamplers(void)::ref;
            unk_1ECE3BD60 = 0;
          }
        }
        qword_1ECE34120 = (uint64_t)&ggl::FlyoverRoadStrokeProceduralShader::typedReflection(void)::ref;
        if ((v186 & 1) == 0)
        {
          if ((_DWORD)v184)
          {
            ggl::FlyoverRoadStrokeTexturedShader::typedReflection(void)::ref = (uint64_t)"FlyoverRoadStrokeTexturedShader";
            if ((v279 & 1) == 0
            {
              v280 = ggl::crc32::compute<38ul>("FlyoverRoadStrokeTexturedShaderVertex");
              qword_1ECE42998 = (uint64_t)"FlyoverRoadStrokeTexturedShader";
              unk_1ECE429A0 = ggl::flyoverRoadStrokeTexturedShaderVertShaderFunctionAttributes(void)::ref;
              qword_1ECE429A8 = 1;
              unk_1ECE429B0 = &ggl::flyoverRoadStrokeTexturedShaderVertShaderFunctionConstantMapping(void)::ref;
              qword_1ECE429B8 = 5;
              unk_1ECE429C0 = &ggl::flyoverRoadStrokeTexturedShaderVertShaderFunctionBufferMapping(void)::ref;
              qword_1ECE429C8 = 0;
              unk_1ECE429D0 = &ggl::flyoverRoadStrokeTexturedShaderVertShaderFunctionTextureMapping(void)::ref;
              ggl::flyoverRoadStrokeTexturedShaderVertexFunctionDescriptor(void)::ref = v280;
              *(_DWORD *)algn_1ECE42994 = 0;
              qword_1ECE429D8 = 0;
              unk_1ECE429E0 = &ggl::flyoverRoadStrokeTexturedShaderVertShaderFunctionSamplerMapping(void)::ref;
              qword_1ECE429F0 = 0;
              unk_1ECE429F8 = 0;
              qword_1ECE429E8 = 0;
            }
            qword_1ECE3BB58 = (uint64_t)&ggl::flyoverRoadStrokeTexturedShaderVertexFunctionDescriptor(void)::ref;
            dword_1ECE3BB60 = ggl::crc32::compute<38ul>("FlyoverRoadStrokeTexturedShaderVertex");
            if ((v281 & 1) == 0
            {
              ggl::flyoverRoadStrokeTexturedShaderFragmentFunctionDescriptor(void)::ref = 0x1B1863BE2;
              qword_1ECE43070 = (uint64_t)"FlyoverRoadStrokeTexturedShader";
              unk_1ECE43078 = 0;
              qword_1ECE43080 = 0;
              unk_1ECE43088 = &ggl::flyoverRoadStrokeTexturedShaderFragShaderFunctionConstantMapping(void)::ref;
              qword_1ECE43090 = 2;
              unk_1ECE43098 = &ggl::flyoverRoadStrokeTexturedShaderFragShaderFunctionBufferMapping(void)::ref;
              qword_1ECE430A0 = 0;
              unk_1ECE430A8 = &ggl::flyoverRoadStrokeTexturedShaderFragShaderFunctionTextureMapping(void)::ref;
              qword_1ECE430B0 = 1;
              unk_1ECE430B8 = &ggl::flyoverRoadStrokeTexturedShaderFragShaderFunctionSamplerMapping(void)::ref;
              qword_1ECE430C8 = 0;
              unk_1ECE430D0 = 0;
              qword_1ECE430C0 = 1;
            }
            qword_1ECE3BB68 = (uint64_t)&ggl::flyoverRoadStrokeTexturedShaderFragmentFunctionDescriptor(void)::ref;
            dword_1ECE3BB70 = -1316602910;
            qword_1ECE3BB78 = (uint64_t)ggl::flyoverRoadStrokeTexturedShaderShaderConstants(void)::ref;
            unk_1ECE3BB80 = 5;
            qword_1ECE3BB88 = (uint64_t)ggl::flyoverRoadStrokeTexturedShaderShaderTextures(void)::ref;
            unk_1ECE3BB90 = 1;
            qword_1ECE3BB98 = (uint64_t)&ggl::flyoverRoadStrokeTexturedShaderShaderSamplers(void)::ref;
            unk_1ECE3BBA0 = 1;
          }
        }
        qword_1ECE34128 = (uint64_t)&ggl::FlyoverRoadStrokeTexturedShader::typedReflection(void)::ref;
        ggl::FlyoverRouteShader::typedReflection(v184);
        qword_1ECE34130 = (uint64_t)&ggl::FlyoverRouteShader::typedReflection(void)::ref;
        ggl::FlyoverTrafficShader::typedReflection(v187);
        qword_1ECE34138 = (uint64_t)&ggl::FlyoverTrafficShader::typedReflection(void)::ref;
        ggl::SolidLineShader::typedReflection(v188);
        qword_1ECE34140 = (uint64_t)&ggl::SolidLineShader::typedReflection(void)::ref;
        ggl::StarsShader::typedReflection(v189);
        qword_1ECE34148 = (uint64_t)&ggl::StarsShader::typedReflection(void)::ref;
        ggl::StenciledAlphaClearShader::typedReflection(v190);
        qword_1ECE34150 = (uint64_t)&ggl::StenciledAlphaClearShader::typedReflection(void)::ref;
        ggl::TileBaseSurfaceShader::typedReflection(v191);
        qword_1ECE34158 = (uint64_t)&ggl::TileBaseSurfaceShader::typedReflection(void)::ref;
        ggl::ImageCopyShader::typedReflection(v192);
        qword_1ECE34160 = (uint64_t)&ggl::ImageCopyShader::typedReflection(void)::ref;
      }
    }
    qword_1ECE39238 = (uint64_t)&FlyoverLibraryShaders(void)::desc;
    unk_1ECE39240 = 32;
    qword_1ECE39248 = (uint64_t)&FlyoverLibraryComputeShaders(void)::desc;
    unk_1ECE39250 = 0;
    qword_1ECE39258 = (uint64_t)&FlyoverLibraryTileShaders(void)::desc;
    unk_1ECE39260 = 0;
    qword_1ECE39268 = 0;
    unk_1ECE39270 = 0;
  }
  ggl::ShaderLibrary::ShaderLibrary((uint64_t)v42, &ggl::FlyoverLibrary::typedReflection(void)::desc, &v294);
  *v42 = &off_1E42B6A88;
  v47 = (_QWORD *)operator new();
  *v47 = &off_1E42E78A8;
  v47[1] = 0;
  v47[2] = 0;
  v47[3] = v42;
  v48 = *(std::__shared_weak_count **)(a1 + 40);
  *(_QWORD *)(a1 + 32) = v42;
  *(_QWORD *)(a1 + 40) = v47;
  if (v48)
  {
    v49 = (unint64_t *)&v48->__shared_owners_;
    do
      v50 = __ldaxr(v49);
    while (__stlxr(v50 - 1, v49));
    if (!v50)
    {
      ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
      std::__shared_weak_count::__release_weak(v48);
    }
  }
  v51 = v295;
  if (v295)
  {
    v52 = (unint64_t *)&v295->__shared_owners_;
    do
      v53 = __ldaxr(v52);
    while (__stlxr(v53 - 1, v52));
    if (!v53)
    {
      ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
      std::__shared_weak_count::__release_weak(v51);
    }
  }
  v54 = (_QWORD *)operator new();
  v55 = a6[1];
  v292 = *a6;
  v293 = (std::__shared_weak_count *)v55;
  if (v55)
  {
    v56 = (unint64_t *)(v55 + 8);
    do
      v57 = __ldxr(v56);
    while (__stxr(v57 + 1, v56));
  }
  {
    ggl::VSLibrary::typedReflection(void)::desc = (uint64_t)"VSLibrary";
    dword_1ECE3C210 = -809916887;
    {
      if ((v193 & 1) == 0
      {
        ggl::viewShaderVertexFunctionDescriptor(void)::ref = ggl::crc32::compute<17ul>("ViewShaderVertex");
        *(_DWORD *)algn_1ECE3C5AC = 0;
        qword_1ECE3C5B0 = (uint64_t)"ViewShader";
        unk_1ECE3C5B8 = ggl::viewShaderVertShaderFunctionAttributes(void)::ref;
        qword_1ECE3C5C0 = 1;
        unk_1ECE3C5C8 = &ggl::viewShaderVertShaderFunctionConstantMapping(void)::ref;
        qword_1ECE3C5D0 = 1;
        unk_1ECE3C5D8 = &ggl::viewShaderVertShaderFunctionBufferMapping(void)::ref;
        qword_1ECE3C5E0 = 0;
        unk_1ECE3C5E8 = &ggl::viewShaderVertShaderFunctionTextureMapping(void)::ref;
        qword_1ECE3C5F0 = 0;
        unk_1ECE3C5F8 = &ggl::viewShaderVertShaderFunctionSamplerMapping(void)::ref;
        qword_1ECE3C608 = 0;
        unk_1ECE3C610 = 0;
        qword_1ECE3C600 = 0;
      }
      VSLibraryShaderFunctions(void)::desc = (uint64_t)&ggl::viewShaderVertexFunctionDescriptor(void)::ref;
      if ((v194 & 1) == 0
      {
        v282 = ggl::crc32::compute<19ul>("ViewShaderFragment");
        qword_1ECE3CC88 = 0;
        unk_1ECE3CC90 = &ggl::viewShaderFragShaderFunctionConstantMapping(void)::ref;
        qword_1ECE3CC98 = 1;
        unk_1ECE3CCA0 = &ggl::viewShaderFragShaderFunctionBufferMapping(void)::ref;
        ggl::viewShaderFragmentFunctionDescriptor(void)::ref = v282;
        *(_DWORD *)algn_1ECE3CC74 = 1;
        qword_1ECE3CCA8 = 0;
        unk_1ECE3CCB0 = &ggl::viewShaderFragShaderFunctionTextureMapping(void)::ref;
        qword_1ECE3CC78 = (uint64_t)"ViewShader";
        unk_1ECE3CC80 = 0;
        qword_1ECE3CCB8 = 1;
        unk_1ECE3CCC0 = &ggl::viewShaderFragShaderFunctionSamplerMapping(void)::ref;
        qword_1ECE3CCD0 = 0;
        unk_1ECE3CCD8 = 0;
        qword_1ECE3CCC8 = 1;
      }
      qword_1ECE34178 = (uint64_t)&ggl::viewShaderFragmentFunctionDescriptor(void)::ref;
      if ((v195 & 1) == 0
      {
        ggl::viewStretchAlphaShaderVertexFunctionDescriptor(void)::ref = ggl::crc32::compute<29ul>("ViewStretchAlphaShaderVertex");
        *(_DWORD *)algn_1ECE3FE1C = 0;
        qword_1ECE3FE20 = (uint64_t)"ViewStretchAlphaShader";
        unk_1ECE3FE28 = ggl::viewStretchAlphaShaderVertShaderFunctionAttributes(void)::ref;
        qword_1ECE3FE30 = 1;
        unk_1ECE3FE38 = &ggl::viewStretchAlphaShaderVertShaderFunctionConstantMapping(void)::ref;
        qword_1ECE3FE40 = 1;
        unk_1ECE3FE48 = &ggl::viewStretchAlphaShaderVertShaderFunctionBufferMapping(void)::ref;
        qword_1ECE3FE50 = 0;
        unk_1ECE3FE58 = &ggl::viewStretchAlphaShaderVertShaderFunctionTextureMapping(void)::ref;
        qword_1ECE3FE60 = 0;
        unk_1ECE3FE68 = &ggl::viewStretchAlphaShaderVertShaderFunctionSamplerMapping(void)::ref;
        qword_1ECE3FE78 = 0;
        unk_1ECE3FE80 = 0;
        qword_1ECE3FE70 = 0;
      }
      qword_1ECE34180 = (uint64_t)&ggl::viewStretchAlphaShaderVertexFunctionDescriptor(void)::ref;
      if ((v196 & 1) == 0
      {
        v283 = ggl::crc32::compute<31ul>("ViewStretchAlphaShaderFragment");
        qword_1ECE40BC8 = 0;
        unk_1ECE40BD0 = &ggl::viewStretchAlphaShaderFragShaderFunctionConstantMapping(void)::ref;
        qword_1ECE40BD8 = 1;
        unk_1ECE40BE0 = &ggl::viewStretchAlphaShaderFragShaderFunctionBufferMapping(void)::ref;
        ggl::viewStretchAlphaShaderFragmentFunctionDescriptor(void)::ref = v283;
        *(_DWORD *)algn_1ECE40BB4 = 1;
        qword_1ECE40BE8 = 0;
        unk_1ECE40BF0 = &ggl::viewStretchAlphaShaderFragShaderFunctionTextureMapping(void)::ref;
        qword_1ECE40BB8 = (uint64_t)"ViewStretchAlphaShader";
        unk_1ECE40BC0 = 0;
        qword_1ECE40BF8 = 1;
        unk_1ECE40C00 = &ggl::viewStretchAlphaShaderFragShaderFunctionSamplerMapping(void)::ref;
        qword_1ECE40C10 = 0;
        unk_1ECE40C18 = 0;
        qword_1ECE40C08 = 1;
      }
      qword_1ECE34188 = (uint64_t)&ggl::viewStretchAlphaShaderFragmentFunctionDescriptor(void)::ref;
      if ((v197 & 1) == 0
      {
        v284 = ggl::crc32::compute<18ul>("BlurXShaderVertex");
        qword_1ECE3C628 = (uint64_t)"BlurXShader";
        unk_1ECE3C630 = ggl::blurXShaderVertShaderFunctionAttributes(void)::ref;
        qword_1ECE3C638 = 1;
        unk_1ECE3C640 = &ggl::blurXShaderVertShaderFunctionConstantMapping(void)::ref;
        qword_1ECE3C648 = 0;
        unk_1ECE3C650 = &ggl::blurXShaderVertShaderFunctionBufferMapping(void)::ref;
        qword_1ECE3C658 = 0;
        unk_1ECE3C660 = &ggl::blurXShaderVertShaderFunctionTextureMapping(void)::ref;
        ggl::blurXShaderVertexFunctionDescriptor(void)::ref = v284;
        *(_DWORD *)algn_1ECE3C624 = 0;
        qword_1ECE3C668 = 0;
        unk_1ECE3C670 = &ggl::blurXShaderVertShaderFunctionSamplerMapping(void)::ref;
        qword_1ECE3C680 = 0;
        unk_1ECE3C688 = 0;
        qword_1ECE3C678 = 0;
      }
      qword_1ECE34190 = (uint64_t)&ggl::blurXShaderVertexFunctionDescriptor(void)::ref;
      if ((v198 & 1) == 0
      {
        v285 = ggl::crc32::compute<20ul>("BlurXShaderFragment");
        qword_1ECE3CD00 = 0;
        unk_1ECE3CD08 = &ggl::blurXShaderFragShaderFunctionConstantMapping(void)::ref;
        qword_1ECE3CD10 = 0;
        unk_1ECE3CD18 = &ggl::blurXShaderFragShaderFunctionBufferMapping(void)::ref;
        ggl::blurXShaderFragmentFunctionDescriptor(void)::ref = v285;
        *(_DWORD *)algn_1ECE3CCEC = 1;
        qword_1ECE3CD20 = 0;
        unk_1ECE3CD28 = &ggl::blurXShaderFragShaderFunctionTextureMapping(void)::ref;
        qword_1ECE3CCF0 = (uint64_t)"BlurXShader";
        unk_1ECE3CCF8 = 0;
        qword_1ECE3CD30 = 1;
        unk_1ECE3CD38 = &ggl::blurXShaderFragShaderFunctionSamplerMapping(void)::ref;
        qword_1ECE3CD48 = 0;
        unk_1ECE3CD50 = 0;
        qword_1ECE3CD40 = 1;
      }
      qword_1ECE34198 = (uint64_t)&ggl::blurXShaderFragmentFunctionDescriptor(void)::ref;
      if ((v199 & 1) == 0
      {
        v286 = ggl::crc32::compute<18ul>("BlurYShaderVertex");
        qword_1ECE3C698 = (uint64_t)"BlurYShader";
        unk_1ECE3C6A0 = ggl::blurYShaderVertShaderFunctionAttributes(void)::ref;
        qword_1ECE3C6A8 = 1;
        unk_1ECE3C6B0 = &ggl::blurYShaderVertShaderFunctionConstantMapping(void)::ref;
        qword_1ECE3C6B8 = 0;
        unk_1ECE3C6C0 = &ggl::blurYShaderVertShaderFunctionBufferMapping(void)::ref;
        qword_1ECE3C6C8 = 0;
        unk_1ECE3C6D0 = &ggl::blurYShaderVertShaderFunctionTextureMapping(void)::ref;
        ggl::blurYShaderVertexFunctionDescriptor(void)::ref = v286;
        *(_DWORD *)algn_1ECE3C694 = 0;
        qword_1ECE3C6D8 = 0;
        unk_1ECE3C6E0 = &ggl::blurYShaderVertShaderFunctionSamplerMapping(void)::ref;
        qword_1ECE3C6F0 = 0;
        unk_1ECE3C6F8 = 0;
        qword_1ECE3C6E8 = 0;
      }
      qword_1ECE341A0 = (uint64_t)&ggl::blurYShaderVertexFunctionDescriptor(void)::ref;
      if ((v200 & 1) == 0
      {
        v287 = ggl::crc32::compute<20ul>("BlurYShaderFragment");
        qword_1ECE3CD70 = 0;
        unk_1ECE3CD78 = &ggl::blurYShaderFragShaderFunctionConstantMapping(void)::ref;
        qword_1ECE3CD80 = 0;
        unk_1ECE3CD88 = &ggl::blurYShaderFragShaderFunctionBufferMapping(void)::ref;
        ggl::blurYShaderFragmentFunctionDescriptor(void)::ref = v287;
        *(_DWORD *)algn_1ECE3CD5C = 1;
        qword_1ECE3CD90 = 0;
        unk_1ECE3CD98 = &ggl::blurYShaderFragShaderFunctionTextureMapping(void)::ref;
        qword_1ECE3CD60 = (uint64_t)"BlurYShader";
        unk_1ECE3CD68 = 0;
        qword_1ECE3CDA0 = 1;
        unk_1ECE3CDA8 = &ggl::blurYShaderFragShaderFunctionSamplerMapping(void)::ref;
        qword_1ECE3CDB8 = 0;
        unk_1ECE3CDC0 = 0;
        qword_1ECE3CDB0 = 1;
      }
      qword_1ECE341A8 = (uint64_t)&ggl::blurYShaderFragmentFunctionDescriptor(void)::ref;
      if ((v201 & 1) == 0
      {
        v288 = ggl::crc32::compute<25ul>("ShrinkBlur4XShaderVertex");
        qword_1ECE3E018 = (uint64_t)"ShrinkBlur4XShader";
        unk_1ECE3E020 = ggl::shrinkBlur4XShaderVertShaderFunctionAttributes(void)::ref;
        qword_1ECE3E028 = 1;
        unk_1ECE3E030 = &ggl::shrinkBlur4XShaderVertShaderFunctionConstantMapping(void)::ref;
        qword_1ECE3E038 = 0;
        unk_1ECE3E040 = &ggl::shrinkBlur4XShaderVertShaderFunctionBufferMapping(void)::ref;
        qword_1ECE3E048 = 0;
        unk_1ECE3E050 = &ggl::shrinkBlur4XShaderVertShaderFunctionTextureMapping(void)::ref;
        ggl::shrinkBlur4XShaderVertexFunctionDescriptor(void)::ref = v288;
        *(_DWORD *)algn_1ECE3E014 = 0;
        qword_1ECE3E058 = 0;
        unk_1ECE3E060 = &ggl::shrinkBlur4XShaderVertShaderFunctionSamplerMapping(void)::ref;
        qword_1ECE3E070 = 0;
        unk_1ECE3E078 = 0;
        qword_1ECE3E068 = 0;
      }
      qword_1ECE341B0 = (uint64_t)&ggl::shrinkBlur4XShaderVertexFunctionDescriptor(void)::ref;
      if ((v202 & 1) == 0
      {
        v289 = ggl::crc32::compute<27ul>("ShrinkBlur4XShaderFragment");
        qword_1ECE3ECD0 = 0;
        unk_1ECE3ECD8 = &ggl::shrinkBlur4XShaderFragShaderFunctionConstantMapping(void)::ref;
        qword_1ECE3ECE0 = 0;
        unk_1ECE3ECE8 = &ggl::shrinkBlur4XShaderFragShaderFunctionBufferMapping(void)::ref;
        ggl::shrinkBlur4XShaderFragmentFunctionDescriptor(void)::ref = v289;
        *(_DWORD *)algn_1ECE3ECBC = 1;
        qword_1ECE3ECF0 = 0;
        unk_1ECE3ECF8 = &ggl::shrinkBlur4XShaderFragShaderFunctionTextureMapping(void)::ref;
        qword_1ECE3ECC0 = (uint64_t)"ShrinkBlur4XShader";
        unk_1ECE3ECC8 = 0;
        qword_1ECE3ED00 = 1;
        unk_1ECE3ED08 = &ggl::shrinkBlur4XShaderFragShaderFunctionSamplerMapping(void)::ref;
        qword_1ECE3ED18 = 0;
        unk_1ECE3ED20 = 0;
        qword_1ECE3ED10 = 1;
      }
      qword_1ECE341B8 = (uint64_t)&ggl::shrinkBlur4XShaderFragmentFunctionDescriptor(void)::ref;
      if ((v203 & 1) == 0
      {
        v290 = ggl::crc32::compute<26ul>("VSCompositingShaderVertex");
        qword_1ECE3E748 = (uint64_t)"VSCompositingShader";
        unk_1ECE3E750 = ggl::vSCompositingShaderVertShaderFunctionAttributes(void)::ref;
        qword_1ECE3E758 = 1;
        unk_1ECE3E760 = &ggl::vSCompositingShaderVertShaderFunctionConstantMapping(void)::ref;
        qword_1ECE3E768 = 0;
        unk_1ECE3E770 = &ggl::vSCompositingShaderVertShaderFunctionBufferMapping(void)::ref;
        qword_1ECE3E778 = 0;
        unk_1ECE3E780 = &ggl::vSCompositingShaderVertShaderFunctionTextureMapping(void)::ref;
        ggl::vSCompositingShaderVertexFunctionDescriptor(void)::ref = v290;
        *(_DWORD *)algn_1ECE3E744 = 0;
        qword_1ECE3E788 = 0;
        unk_1ECE3E790 = &ggl::vSCompositingShaderVertShaderFunctionSamplerMapping(void)::ref;
        qword_1ECE3E7A0 = 0;
        unk_1ECE3E7A8 = 0;
        qword_1ECE3E798 = 0;
      }
      qword_1ECE341C0 = (uint64_t)&ggl::vSCompositingShaderVertexFunctionDescriptor(void)::ref;
      if ((v204 & 1) == 0
      {
        ggl::vSCompositingShaderFragmentFunctionDescriptor(void)::ref = ggl::crc32::compute<28ul>("VSCompositingShaderFragment");
        *(_DWORD *)algn_1ECE3F5DC = 1;
        qword_1ECE3F5E0 = (uint64_t)"VSCompositingShader";
        unk_1ECE3F5E8 = 0;
        qword_1ECE3F5F0 = 0;
        unk_1ECE3F5F8 = &ggl::vSCompositingShaderFragShaderFunctionConstantMapping(void)::ref;
        qword_1ECE3F600 = 1;
        unk_1ECE3F608 = &ggl::vSCompositingShaderFragShaderFunctionBufferMapping(void)::ref;
        qword_1ECE3F610 = 0;
        unk_1ECE3F618 = &ggl::vSCompositingShaderFragShaderFunctionTextureMapping(void)::ref;
        qword_1ECE3F620 = 7;
        unk_1ECE3F628 = &ggl::vSCompositingShaderFragShaderFunctionSamplerMapping(void)::ref;
        qword_1ECE3F638 = 0;
        unk_1ECE3F640 = 0;
        qword_1ECE3F630 = 7;
      }
      qword_1ECE341C8 = (uint64_t)&ggl::vSCompositingShaderFragmentFunctionDescriptor(void)::ref;
      if ((v205 & 1) == 0
      {
        v291 = ggl::crc32::compute<26ul>("VSPassthroughShaderVertex");
        qword_1ECE3E7B8 = (uint64_t)"VSPassthroughShader";
        unk_1ECE3E7C0 = ggl::vSPassthroughShaderVertShaderFunctionAttributes(void)::ref;
        qword_1ECE3E7C8 = 1;
        unk_1ECE3E7D0 = &ggl::vSPassthroughShaderVertShaderFunctionConstantMapping(void)::ref;
        qword_1ECE3E7D8 = 0;
        unk_1ECE3E7E0 = &ggl::vSPassthroughShaderVertShaderFunctionBufferMapping(void)::ref;
        qword_1ECE3E7E8 = 0;
        unk_1ECE3E7F0 = &ggl::vSPassthroughShaderVertShaderFunctionTextureMapping(void)::ref;
        ggl::vSPassthroughShaderVertexFunctionDescriptor(void)::ref = v291;
        *(_DWORD *)algn_1ECE3E7B4 = 0;
        qword_1ECE3E7F8 = 0;
        unk_1ECE3E800 = &ggl::vSPassthroughShaderVertShaderFunctionSamplerMapping(void)::ref;
        qword_1ECE3E810 = 0;
        unk_1ECE3E818 = 0;
        qword_1ECE3E808 = 0;
      }
      qword_1ECE341D0 = (uint64_t)&ggl::vSPassthroughShaderVertexFunctionDescriptor(void)::ref;
      if ((v206 & 1) == 0
      {
        ggl::vSPassthroughShaderFragmentFunctionDescriptor(void)::ref = ggl::crc32::compute<28ul>("VSPassthroughShaderFragment");
        *(_DWORD *)algn_1ECE3F64C = 1;
        qword_1ECE3F650 = (uint64_t)"VSPassthroughShader";
        unk_1ECE3F658 = 0;
        qword_1ECE3F660 = 0;
        unk_1ECE3F668 = &ggl::vSPassthroughShaderFragShaderFunctionConstantMapping(void)::ref;
        qword_1ECE3F670 = 0;
        unk_1ECE3F678 = &ggl::vSPassthroughShaderFragShaderFunctionBufferMapping(void)::ref;
        qword_1ECE3F680 = 0;
        unk_1ECE3F688 = &ggl::vSPassthroughShaderFragShaderFunctionTextureMapping(void)::ref;
        qword_1ECE3F690 = 2;
        unk_1ECE3F698 = &ggl::vSPassthroughShaderFragShaderFunctionSamplerMapping(void)::ref;
        qword_1ECE3F6A8 = 0;
        unk_1ECE3F6B0 = 0;
        qword_1ECE3F6A0 = 2;
      }
      qword_1ECE341D8 = (uint64_t)&ggl::vSPassthroughShaderFragmentFunctionDescriptor(void)::ref;
      if ((v207 & 1) == 0
      {
        ggl::vSSpriteShaderVertexFunctionDescriptor(void)::ref = ggl::crc32::compute<21ul>("VSSpriteShaderVertex");
        *(_DWORD *)algn_1ECE3D23C = 0;
        qword_1ECE3D240 = (uint64_t)"VSSpriteShader";
        unk_1ECE3D248 = ggl::vSSpriteShaderVertShaderFunctionAttributes(void)::ref;
        qword_1ECE3D250 = 1;
        unk_1ECE3D258 = &ggl::vSSpriteShaderVertShaderFunctionConstantMapping(void)::ref;
        qword_1ECE3D260 = 1;
        unk_1ECE3D268 = &ggl::vSSpriteShaderVertShaderFunctionBufferMapping(void)::ref;
        qword_1ECE3D270 = 0;
        unk_1ECE3D278 = &ggl::vSSpriteShaderVertShaderFunctionTextureMapping(void)::ref;
        qword_1ECE3D280 = 0;
        unk_1ECE3D288 = &ggl::vSSpriteShaderVertShaderFunctionSamplerMapping(void)::ref;
        qword_1ECE3D298 = 0;
        unk_1ECE3D2A0 = 0;
        qword_1ECE3D290 = 0;
      }
      qword_1ECE341E0 = (uint64_t)&ggl::vSSpriteShaderVertexFunctionDescriptor(void)::ref;
      if ((v208 & 1) == 0
      {
        ggl::vSSpriteShaderFragmentFunctionDescriptor(void)::ref = ggl::crc32::compute<23ul>("VSSpriteShaderFragment");
        *(_DWORD *)algn_1ECE3D794 = 1;
        qword_1ECE3D798 = (uint64_t)"VSSpriteShader";
        unk_1ECE3D7A0 = 0;
        qword_1ECE3D7A8 = 0;
        unk_1ECE3D7B0 = &ggl::vSSpriteShaderFragShaderFunctionConstantMapping(void)::ref;
        qword_1ECE3D7B8 = 0;
        unk_1ECE3D7C0 = &ggl::vSSpriteShaderFragShaderFunctionBufferMapping(void)::ref;
        qword_1ECE3D7C8 = 0;
        unk_1ECE3D7D0 = &ggl::vSSpriteShaderFragShaderFunctionTextureMapping(void)::ref;
        qword_1ECE3D7D8 = 2;
        unk_1ECE3D7E0 = &ggl::vSSpriteShaderFragShaderFunctionSamplerMapping(void)::ref;
        qword_1ECE3D7F0 = 0;
        unk_1ECE3D7F8 = 0;
        qword_1ECE3D7E8 = 2;
      }
      qword_1ECE341E8 = (uint64_t)&ggl::vSSpriteShaderFragmentFunctionDescriptor(void)::ref;
    }
    qword_1ECE3C218 = (uint64_t)&VSLibraryShaderFunctions(void)::desc;
    unk_1ECE3C220 = 16;
    if ((v72 & 1) == 0)
    {
      if ((_DWORD)v209)
      {
        ggl::ViewShader::typedReflection(v209);
        VSLibraryShaders(void)::desc = (uint64_t)&ggl::ViewShader::typedReflection(void)::ref;
        ggl::ViewStretchAlphaShader::typedReflection(v210);
        qword_1ECE34030 = (uint64_t)&ggl::ViewStretchAlphaShader::typedReflection(void)::ref;
        ggl::BlurXShader::typedReflection(v211);
        qword_1ECE34038 = (uint64_t)&ggl::BlurXShader::typedReflection(void)::ref;
        ggl::BlurYShader::typedReflection(v212);
        qword_1ECE34040 = (uint64_t)&ggl::BlurYShader::typedReflection(void)::ref;
        ggl::ShrinkBlur4XShader::typedReflection(v213);
        qword_1ECE34048 = (uint64_t)&ggl::ShrinkBlur4XShader::typedReflection(void)::ref;
        ggl::VSCompositingShader::typedReflection(v214);
        qword_1ECE34050 = (uint64_t)&ggl::VSCompositingShader::typedReflection(void)::ref;
        ggl::VSPassthroughShader::typedReflection(v215);
        qword_1ECE34058 = (uint64_t)&ggl::VSPassthroughShader::typedReflection(void)::ref;
        ggl::VSSpriteShader::typedReflection(v216);
        qword_1ECE34060 = (uint64_t)&ggl::VSSpriteShader::typedReflection(void)::ref;
      }
    }
    qword_1ECE3C228 = (uint64_t)&VSLibraryShaders(void)::desc;
    unk_1ECE3C230 = 8;
    qword_1ECE3C238 = (uint64_t)&VSLibraryComputeShaders(void)::desc;
    unk_1ECE3C240 = 0;
    qword_1ECE3C248 = (uint64_t)&VSLibraryTileShaders(void)::desc;
    unk_1ECE3C250 = 0;
    qword_1ECE3C258 = 0;
    unk_1ECE3C260 = 0;
  }
  ggl::ShaderLibrary::ShaderLibrary((uint64_t)v54, &ggl::VSLibrary::typedReflection(void)::desc, &v292);
  *v54 = &off_1E42BE478;
  v59 = (_QWORD *)operator new();
  *v59 = &off_1E42E7EC8;
  v59[1] = 0;
  v59[2] = 0;
  v59[3] = v54;
  v60 = *(std::__shared_weak_count **)(a1 + 56);
  *(_QWORD *)(a1 + 48) = v54;
  *(_QWORD *)(a1 + 56) = v59;
  if (v60)
  {
    v61 = (unint64_t *)&v60->__shared_owners_;
    do
      v62 = __ldaxr(v61);
    while (__stlxr(v62 - 1, v61));
    if (!v62)
    {
      ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
      std::__shared_weak_count::__release_weak(v60);
    }
  }
  v63 = v293;
  if (v293)
  {
    v64 = (unint64_t *)&v293->__shared_owners_;
    do
      v65 = __ldaxr(v64);
    while (__stlxr(v65 - 1, v64));
    if (!v65)
    {
      ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
      std::__shared_weak_count::__release_weak(v63);
    }
  }
  return a1;
}

void md::IconListLabelPart::~IconListLabelPart(md::IconListLabelPart *this)
{
  unsigned __int8 v2;
  uint64_t v3;
  geo::read_write_lock *v4;
  const char *v5;
  malloc_zone_t *zone;

  md::CompositeLabelPart::~CompositeLabelPart(this);
  {
    v3 = operator new();
    *(_QWORD *)(v3 + 16) = 0x5ED09DD50000000FLL;
    *(_QWORD *)(v3 + 24) = "VectorKitLabels";
    *(_OWORD *)(v3 + 32) = xmmword_19FFB2E80;
    *(_QWORD *)v3 = &off_1E42B5668;
    *(_QWORD *)(v3 + 8) = "VectorKitLabels";
    *(_OWORD *)(v3 + 72) = 0u;
    *(_OWORD *)(v3 + 88) = 0u;
    *(_OWORD *)(v3 + 104) = 0u;
    *(_OWORD *)(v3 + 120) = 0u;
    *(_OWORD *)(v3 + 136) = 0u;
    *(_OWORD *)(v3 + 152) = 0u;
    *(_OWORD *)(v3 + 168) = 0u;
    *(_OWORD *)(v3 + 184) = 0u;
    *(_OWORD *)(v3 + 200) = 0u;
    *(_OWORD *)(v3 + 216) = 0u;
    *(_OWORD *)(v3 + 232) = 0u;
    *(_QWORD *)(v3 + 248) = 0;
    *(_OWORD *)(v3 + 56) = 0u;
    v4 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v3 + 56), 0);
    if ((_DWORD)v4)
      geo::read_write_lock::logFailure(v4, (uint64_t)"initialization", v5);
    zone = malloc_create_zone(0, 0);
    *(_QWORD *)(v3 + 48) = zone;
    malloc_set_zone_name(zone, "VectorKitLabels");
    *(_QWORD *)(v3 + 256) = os_log_create("com.apple.VectorKit", "Memory");
    mdm::Allocator::instance(void)::alloc = v3;
  }
  (*(void (**)(uint64_t, md::IconListLabelPart *, uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc
                                                                    + 40))(mdm::Allocator::instance(void)::alloc, this, 696);
}

uint64_t md::IconListLabelPart::layoutForStaging(uint64_t a1, uint64_t a2, float32x2_t *a3, float32x2_t *a4, __n128 a5, __n128 a6, double a7)
{
  _QWORD *v11;
  _QWORD *v12;
  uint64_t result;
  uint64_t *v14;
  unsigned __int8 v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t *v21;
  uint64_t **v22;
  uint64_t **v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  id v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  id v31;
  uint64_t *v32;
  _QWORD *v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  _OWORD *v48;
  __int128 *v49;
  uint64_t v50;
  __int128 v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  float32x2_t *v58;
  _QWORD *v59;
  uint64_t **v60;
  uint64_t *v61;
  uint64_t v62;
  uint64_t v63;

  if (!*(_BYTE *)(a1 + 694))
    return md::StackLabelPart::layoutForStaging(a1, a2, a3, a4, a5, a6, a7);
  v11 = *(_QWORD **)(a1 + 576);
  v12 = *(_QWORD **)(a1 + 584);
  if (v11 == v12)
  {
LABEL_5:
    v57 = a2;
    v58 = a3;
    v14 = (uint64_t *)(a1 + 576);
    v61 = 0;
    {
      v54 = operator new();
      mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v54, "VectorKitLabels", 0x5ED09DD50000000FLL);
    }
    v62 = mdm::Allocator::instance(void)::alloc;
    v63 = 0;
    v16 = *(_QWORD **)(a1 + 576);
    v17 = *(_QWORD **)(a1 + 584);
    v55 = *(_QWORD *)(a1 + 592);
    v56 = *(_QWORD *)(a1 + 600);
    *(_QWORD *)(a1 + 584) = 0;
    *(_QWORD *)(a1 + 592) = 0;
    *v14 = 0;
    v59 = v16;
    v60 = &v61;
    if (v16 != v17)
    {
      v18 = v16;
      while (1)
      {
        v20 = (_QWORD *)*v18;
        if ((*(unsigned int (**)(_QWORD))(*(_QWORD *)*v18 + 224))(*v18) == 6)
        {
          v21 = v61;
          v22 = &v61;
          v23 = &v61;
          if (v61)
          {
            v22 = &v61;
            while (1)
            {
              while (1)
              {
                v23 = (uint64_t **)v21;
                v24 = v20[80];
                v25 = *(_QWORD *)(v21[4] + 640);
                if ((md::LabelIcon::operator==(v24, v25) & 1) != 0)
                  break;
                v26 = *(_QWORD *)(v25 + 16);
                v27 = *(id *)(v24 + 16);
                LODWORD(v26) = objc_msgSend(v27, "compareTo:", v26);

                if ((v26 & 0x80000000) == 0)
                  break;
                v21 = *v23;
                v22 = v23;
                if (!*v23)
                  goto LABEL_23;
              }
              v28 = v23[4][80];
              v29 = v20[80];
              if ((md::LabelIcon::operator==(v28, v29) & 1) != 0)
                break;
              v30 = *(_QWORD *)(v29 + 16);
              v31 = *(id *)(v28 + 16);
              LODWORD(v30) = objc_msgSend(v31, "compareTo:", v30);

              if ((v30 & 0x80000000) == 0)
                break;
              v22 = v23 + 1;
              v21 = v23[1];
              if (!v21)
                goto LABEL_23;
            }
            if (*v22)
            {
              (*(void (**)(_QWORD *))(*v20 + 8))(v20);
              goto LABEL_10;
            }
          }
LABEL_23:
          v32 = (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v62 + 16))(v62, 40, 8);
          v32[4] = (uint64_t)v20;
          *v32 = 0;
          v32[1] = 0;
          v32[2] = (uint64_t)v23;
          *v22 = v32;
          if (*v60)
          {
            v60 = (uint64_t **)*v60;
            v32 = *v22;
          }
          std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(v61, v32);
          ++v63;
        }
        v33 = *(_QWORD **)(a1 + 584);
        v34 = *(_QWORD *)(a1 + 592);
        if ((unint64_t)v33 >= v34)
          break;
        if (v33)
          *v33 = v20;
        v19 = v33 + 1;
LABEL_9:
        *(_QWORD *)(a1 + 584) = v19;
LABEL_10:
        if (++v18 == v17)
          goto LABEL_52;
      }
      v35 = ((uint64_t)v33 - *v14) >> 3;
      v36 = v35 + 1;
      if ((unint64_t)(v35 + 1) >> 61)
        abort();
      v37 = v34 - *v14;
      if (v37 >> 2 > v36)
        v36 = v37 >> 2;
      if ((unint64_t)v37 >= 0x7FFFFFFFFFFFFFF8)
        v38 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v38 = v36;
      if (v38)
      {
        v39 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 600) + 16))(*(_QWORD *)(a1 + 600), 8 * v38, 8);
        v40 = (_QWORD *)(v39 + 8 * v35);
        v41 = v39 + 8 * v38;
        if (v39)
          *v40 = v20;
      }
      else
      {
        v41 = 0;
        v40 = (_QWORD *)(8 * v35);
      }
      v42 = *(_QWORD *)(a1 + 584);
      v43 = *(_QWORD *)(a1 + 576);
      v44 = v42 - v43;
      if (v42 == v43)
      {
        v46 = v40;
        goto LABEL_50;
      }
      v45 = v44 - 8;
      if ((unint64_t)(v44 - 8) < 0x38)
      {
        v46 = v40;
      }
      else
      {
        v46 = v40;
        if ((unint64_t)(v42 - (_QWORD)v40) >= 0x20)
        {
          v47 = (v45 >> 3) + 1;
          v48 = v40 - 2;
          v49 = (__int128 *)(v42 - 16);
          v50 = v47 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v51 = *v49;
            *(v48 - 1) = *(v49 - 1);
            *v48 = v51;
            v48 -= 2;
            v49 -= 2;
            v50 -= 4;
          }
          while (v50);
          v46 = &v40[-(v47 & 0x3FFFFFFFFFFFFFFCLL)];
          v42 -= 8 * (v47 & 0x3FFFFFFFFFFFFFFCLL);
          if (v47 == (v47 & 0x3FFFFFFFFFFFFFFCLL))
            goto LABEL_49;
        }
      }
      do
      {
        v52 = *(_QWORD *)(v42 - 8);
        v42 -= 8;
        *--v46 = v52;
      }
      while (v42 != v43);
LABEL_49:
      v42 = *v14;
LABEL_50:
      v19 = v40 + 1;
      *(_QWORD *)(a1 + 576) = v46;
      *(_QWORD *)(a1 + 584) = v40 + 1;
      v53 = *(_QWORD *)(a1 + 592);
      *(_QWORD *)(a1 + 592) = v41;
      if (v42)
        (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 600) + 40))(*(_QWORD *)(a1 + 600), v42, v53 - v42);
      goto LABEL_9;
    }
LABEL_52:
    *(_BYTE *)(a1 + 694) = 0;
    if (v59)
      (*(void (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)v56 + 40))(v56, v59, v55 - (_QWORD)v59);
    std::__tree<std::__value_type<unsigned int,gss::PropertySize>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,gss::PropertySize>,std::less<unsigned int>,true>,geo::StdAllocator<std::__value_type<unsigned int,gss::PropertySize>,gss::Allocator>>::destroy((uint64_t)&v60, v61);
    a3 = v58;
    a2 = v57;
    return md::StackLabelPart::layoutForStaging(a1, a2, a3, a4, a5, a6, a7);
  }
  while (1)
  {
    result = (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*v11 + 344))(*v11, a2);
    if ((_DWORD)result != 37)
      return result;
    if (++v11 == v12)
      goto LABEL_5;
  }
}

void sub_19F942E98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, _QWORD *a16)
{
  if (a14)
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a10 + 40))(a10, a14, a9 - a14);
  std::__tree<std::__value_type<unsigned int,gss::PropertySize>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,gss::PropertySize>,std::less<unsigned int>,true>,geo::StdAllocator<std::__value_type<unsigned int,gss::PropertySize>,gss::Allocator>>::destroy((uint64_t)&a15, a16);
  _Unwind_Resume(a1);
}

void md::IconListLabelPart::debugString(char *a1@<X8>)
{
  a1[23] = 17;
  strcpy(a1, "IconListLabelPart");
}

void md::FogInfo::updateFogUniformsWithLayoutContext(uint64_t *a1, uint64_t a2, double *a3)
{
  _QWORD *v6;
  int8x8_t v7;
  uint8x8_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  double *v21;
  float v22;
  float64x2_t v23;
  BOOL v24;
  float32x4_t v25;
  float v26;
  float64x2_t v27;
  uint64_t v28;
  float32x4_t v29;
  float64_t v30;
  unint64_t v31;
  float32x4_t *v32;
  id v33;
  double v34;
  float32_t v35;
  _QWORD *v36;
  int8x8_t v37;
  uint8x8_t v38;
  uint64_t v39;
  _QWORD *v40;
  _QWORD *v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  __int32 *v46;
  unsigned __int8 v47;
  unsigned __int8 v48;
  unint64_t v49;
  float64_t v50;
  float64_t v51;
  int v52;
  int v53;
  unint64_t v54;
  float64_t v55;
  float v56;
  float32x4_t v57;
  float64x2_t v58;
  float64_t v59;
  unint64_t v60;
  __int16 v61;
  float32x4_t *v62;
  float64_t v63;
  uint64_t v64;
  float64_t v65;

  if (!*a1)
  {
    v10 = operator new(0xE8uLL);
    v10[1] = 0;
    v10[2] = 0;
    *v10 = &off_1E42E20F0;
    v11 = ggl::BufferData::BufferData((uint64_t)(v10 + 3), qword_1EE55EB88, 2, 1, 6, 1);
    v10[28] = ggl::Fog::Skyfog::reflection(void)::reflection;
    v10[3] = &off_1E42B96B0;
    v12 = (std::__shared_weak_count *)a1[1];
    *a1 = v11;
    a1[1] = (uint64_t)v10;
    if (v12)
    {
      p_shared_owners = (unint64_t *)&v12->__shared_owners_;
      do
        v14 = __ldaxr(p_shared_owners);
      while (__stlxr(v14 - 1, p_shared_owners));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
  }
  v6 = *(_QWORD **)(a2 + 8);
  v7 = (int8x8_t)v6[1];
  if (!*(_QWORD *)&v7)
    goto LABEL_30;
  v8 = (uint8x8_t)vcnt_s8(v7);
  v8.i16[0] = vaddlv_u8(v8);
  if (v8.u32[0] > 1uLL)
  {
    v9 = 0x1AF456233693CD46;
    if (*(_QWORD *)&v7 <= 0x1AF456233693CD46uLL)
      v9 = 0x1AF456233693CD46uLL % *(_QWORD *)&v7;
  }
  else
  {
    v9 = (*(_QWORD *)&v7 - 1) & 0x1AF456233693CD46;
  }
  v15 = *(_QWORD **)(*v6 + 8 * v9);
  if (!v15)
    goto LABEL_30;
  v16 = (_QWORD *)*v15;
  if (!v16)
    goto LABEL_30;
  if (v8.u32[0] < 2uLL)
  {
    v17 = *(_QWORD *)&v7 - 1;
    while (1)
    {
      v19 = v16[1];
      if (v19 == 0x1AF456233693CD46)
      {
        if (v16[2] == 0x1AF456233693CD46)
          goto LABEL_28;
      }
      else if ((v19 & v17) != v9)
      {
        goto LABEL_30;
      }
      v16 = (_QWORD *)*v16;
      if (!v16)
        goto LABEL_30;
    }
  }
  while (1)
  {
    v18 = v16[1];
    if (v18 == 0x1AF456233693CD46)
      break;
    if (v18 >= *(_QWORD *)&v7)
      v18 %= *(_QWORD *)&v7;
    if (v18 != v9)
      goto LABEL_30;
LABEL_17:
    v16 = (_QWORD *)*v16;
    if (!v16)
      goto LABEL_30;
  }
  if (v16[2] != 0x1AF456233693CD46)
    goto LABEL_17;
LABEL_28:
  v20 = v16[5];
  if (*(_QWORD *)(v20 + 8) == 0x1AF456233693CD46)
  {
    v21 = *(double **)(v20 + 32);
    goto LABEL_31;
  }
LABEL_30:
  v21 = 0;
LABEL_31:
  v22 = v21[380];
  v23.f64[0] = 0.0;
  v24 = v22 >= 0.0 && v22 <= 1.0;
  v25 = 0uLL;
  if (v24)
  {
    v26 = v21[381];
    v56 = -10.0 / v26;
    gm::operator*<double,4,4,4>(v58.f64, v21 + 395, a3);
    v27.f64[0] = v59;
    v28 = v64;
    v27.f64[1] = v63;
    v23.f64[1] = v65;
    v29 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v27), v23);
    v23.f64[0] = 0.0;
    v25 = vmulq_n_f32(v29, v56);
  }
  v30 = *(double *)a1;
  v58 = 0uLL;
  v31 = *(_QWORD *)(*(_QWORD *)&v30 + 8);
  v23.f64[1] = v30;
  v57 = v25;
  if (v31)
    v32 = *(float32x4_t **)(*(_QWORD *)&v30 + 72);
  else
    v32 = 0;
  v58 = v23;
  v59 = 0.0;
  v60 = v31;
  v62 = v32;
  v61 = 1;
  v32[1].f32[2] = v22;
  v33 = *(id *)a2;
  objc_msgSend(v33, "sizeInPixels");
  v35 = v34;
  v32[1].f32[1] = v35;

  v32[1].i32[0] = -1055916032;
  *v32 = v57;
  v36 = *(_QWORD **)(a2 + 8);
  v37 = (int8x8_t)v36[1];
  if (!*(_QWORD *)&v37)
    goto LABEL_64;
  v38 = (uint8x8_t)vcnt_s8(v37);
  v38.i16[0] = vaddlv_u8(v38);
  if (v38.u32[0] > 1uLL)
  {
    v39 = 0x7C7EC6C7C111B0D0;
    if (*(_QWORD *)&v37 <= 0x7C7EC6C7C111B0D0uLL)
      v39 = 0x7C7EC6C7C111B0D0uLL % *(_QWORD *)&v37;
  }
  else
  {
    v39 = (*(_QWORD *)&v37 - 1) & 0x7C7EC6C7C111B0D0;
  }
  v40 = *(_QWORD **)(*v36 + 8 * v39);
  if (!v40)
    goto LABEL_64;
  v41 = (_QWORD *)*v40;
  if (!v41)
    goto LABEL_64;
  if (v38.u32[0] < 2uLL)
  {
    v42 = *(_QWORD *)&v37 - 1;
    while (1)
    {
      v44 = v41[1];
      if (v44 == 0x7C7EC6C7C111B0D0)
      {
        if (v41[2] == 0x7C7EC6C7C111B0D0)
          goto LABEL_61;
      }
      else if ((v44 & v42) != v39)
      {
        goto LABEL_64;
      }
      v41 = (_QWORD *)*v41;
      if (!v41)
        goto LABEL_64;
    }
  }
  while (2)
  {
    v43 = v41[1];
    if (v43 != 0x7C7EC6C7C111B0D0)
    {
      if (v43 >= *(_QWORD *)&v37)
        v43 %= *(_QWORD *)&v37;
      if (v43 != v39)
        goto LABEL_64;
      goto LABEL_50;
    }
    if (v41[2] != 0x7C7EC6C7C111B0D0)
    {
LABEL_50:
      v41 = (_QWORD *)*v41;
      if (!v41)
        goto LABEL_64;
      continue;
    }
    break;
  }
LABEL_61:
  v45 = v41[5];
  if (*(_QWORD *)(v45 + 8) == 0x7C7EC6C7C111B0D0)
  {
    v46 = *(__int32 **)(v45 + 32);
    if (v46)
    {
      v32[3].i32[0] = *v46;
      v32[3].i32[1] = v46[1];
      v32[3].i32[2] = v46[2];
      v32[3].i32[3] = v46[3];
      v32[2].i32[0] = v46[4];
      v32[2].i32[1] = v46[5];
      v32[2].i32[2] = v46[6];
      v32[2].i32[3] = v46[7];
      goto LABEL_67;
    }
  }
LABEL_64:
  if ((v47 & 1) == 0
  {
    geo::Color<float,4,(geo::ColorSpace)0>::Color<(geo::ColorSpace)2,int,void>((uint64_t)&md::SkyLogic::defaultDayFillColor(void)::skyDayDefaultFillColor, (uint64_t)&md::kSkyDayDefaultFillColor);
  }
  v62[3] = (float32x4_t)md::SkyLogic::defaultDayFillColor(void)::skyDayDefaultFillColor;
  if ((v48 & 1) == 0
  {
    geo::Color<float,4,(geo::ColorSpace)0>::Color<(geo::ColorSpace)2,int,void>((uint64_t)&md::SkyLogic::defaultDayHorizonColor(void)::skyDayDefaultHorizonColor, (uint64_t)&md::kSkyDayDefaultHorizonColor);
  }
  v62[2] = (float32x4_t)md::SkyLogic::defaultDayHorizonColor(void)::skyDayDefaultHorizonColor;
LABEL_67:
  v50 = v59;
  v49 = v60;
  if (v60 != *(_QWORD *)&v59)
  {
    v51 = v58.f64[1];
    v52 = v61;
    v53 = HIBYTE(v61);
    if (*(_QWORD *)&v58.f64[0] && *(_BYTE *)(*(_QWORD *)&v58.f64[1] + 17) != 2)
      (*(void (**)(void))(**(_QWORD **)&v58.f64[0] + 64))();
    if (v52 && !v53)
    {
      v55 = *(double *)(*(_QWORD *)&v51 + 56);
      v54 = *(_QWORD *)(*(_QWORD *)&v51 + 64);
      if (v54 == *(_QWORD *)&v55)
        *(_QWORD *)&v55 = *(_QWORD *)(*(_QWORD *)&v51 + 80) - *(_QWORD *)(*(_QWORD *)&v51 + 72);
      if (*(_QWORD *)&v50 < *(_QWORD *)&v55)
        v55 = v50;
      if (v54 <= v49)
        v54 = v49;
      if (v54 == *(_QWORD *)&v55)
        v54 = *(_QWORD *)&v55 + *(_QWORD *)(*(_QWORD *)&v51 + 80) - *(_QWORD *)(*(_QWORD *)&v51 + 72);
      *(float64_t *)(*(_QWORD *)&v51 + 56) = v55;
      *(_QWORD *)(*(_QWORD *)&v51 + 64) = v54;
    }
  }
}

void sub_19F943450(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  void *v3;
  va_list va;

  va_start(va, a3);

  ggl::BufferMemory::~BufferMemory((ggl::BufferMemory *)va);
  _Unwind_Resume(a1);
}

void md::GlobeRasterRenderLayer::~GlobeRasterRenderLayer(md::GlobeRasterRenderLayer *this)
{
  md::GlobeRasterRenderResources *v2;

  *(_QWORD *)this = &off_1E429CD28;
  v2 = (md::GlobeRasterRenderResources *)*((_QWORD *)this + 44);
  *((_QWORD *)this + 44) = 0;
  if (v2)
  {
    md::GlobeRasterRenderResources::~GlobeRasterRenderResources(v2);
    MEMORY[0x1A1AF4E00]();
  }
  md::CartographicTiledRenderLayer<md::MapTileDataRenderable<md::RasterTileData>>::~CartographicTiledRenderLayer((uint64_t)this);
}

{
  md::GlobeRasterRenderResources *v2;

  *(_QWORD *)this = &off_1E429CD28;
  v2 = (md::GlobeRasterRenderResources *)*((_QWORD *)this + 44);
  *((_QWORD *)this + 44) = 0;
  if (v2)
  {
    md::GlobeRasterRenderResources::~GlobeRasterRenderResources(v2);
    MEMORY[0x1A1AF4E00]();
  }
  md::CartographicTiledRenderLayer<md::MapTileDataRenderable<md::RasterTileData>>::~CartographicTiledRenderLayer((uint64_t)this);
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *md::GlobeRasterRenderLayer::layout(md::GlobeRasterRenderLayer *this, const md::LayoutContext *a2)
{
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  int8x8_t v9;
  uint8x8_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned __int8 *v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  ggl::CommandBuffer *v28;
  uint64_t v29;
  uint64_t **v30;
  __n128 v32;
  __n128 v33;
  __n128 v34;
  __n128 v35;
  __n128 v36;
  __n128 v37;
  __n128 v38;
  uint64_t *v39;
  uint64_t *v40;
  uint64_t *v41;
  _QWORD *v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  __n128 *v58;
  __n128 *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t *v64;
  int8x8_t v65;
  uint8x8_t v66;
  unint64_t v67;
  uint64_t v68;
  _QWORD *v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  __int128 v74;
  uint64_t v75;
  uint64_t v76;
  _QWORD *v77;
  _QWORD *v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  _QWORD *v84;
  _QWORD *v85;
  uint64_t v86;
  unint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  float v91;
  int v92;
  id v93;
  float v94;
  float v95;
  float v96;
  float v98;
  long double v99;
  double v100;
  float v101;
  float v102;
  double v103;
  double v104;
  __double2 v105;
  double v106;
  __double2 v107;
  float v108;
  float v109;
  double v110;
  float v111;
  float v112;
  double v113;
  double v114;
  float v115;
  unint64_t v116;
  _QWORD *v117;
  _QWORD *v118;
  unint64_t v119;
  _QWORD *v120;
  unint64_t v121;
  _QWORD *v122;
  unint64_t v123;
  uint64_t v124;
  uint64_t *v125;
  uint64_t *v126;
  uint64_t v130;
  uint64_t v131;
  ggl::RenderItem *v132;
  uint64_t v133;
  uint64_t v134;
  _QWORD *v135;
  _QWORD *v136;
  unint64_t v137;
  uint64_t v138;
  uint64_t v139;
  unint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  _QWORD *v144;
  uint64_t v145;
  uint64_t v146;
  unint64_t v147;
  _QWORD *v148;
  uint64_t v149;
  uint64_t v150;
  unint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  unint64_t v158;
  _QWORD *v159;
  uint64_t v160;
  _OWORD *v161;
  __int128 *v162;
  uint64_t v163;
  __int128 v164;
  uint64_t v165;
  uint64_t v166;
  unint64_t v167;
  uint64_t v168;
  _OWORD *v169;
  __int128 *v170;
  uint64_t v171;
  __int128 v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  _QWORD *v177;
  unint64_t v178;
  unint64_t v179;
  __n128 v180;
  unint64_t v181;
  int v182;
  int32x2_t v183;
  uint64x2_t v184;
  float64x2_t v185;
  float64x2_t v186;
  int32x2_t v187;
  float32x2_t v188;
  uint64_t *v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  unint64_t *v193;
  unint64_t v194;
  std::__shared_weak_count *v195;
  unint64_t *p_shared_owners;
  unint64_t v197;
  uint64_t v198;
  std::__shared_weak_count *v199;
  uint64_t v200;
  unint64_t *v201;
  unint64_t v202;
  std::__shared_weak_count *v203;
  unint64_t *v204;
  unint64_t v205;
  uint64_t v206;
  unint64_t *v207;
  unint64_t v208;
  unint64_t *v209;
  unint64_t *v210;
  unint64_t v211;
  unint64_t v212;
  unint64_t v213;
  __n128 v214;
  _QWORD *v215;
  int v216;
  int v217;
  unint64_t v218;
  unint64_t v219;
  _QWORD *result;
  uint64_t v221;
  float64x2_t v222;
  __n128 v223;
  __n128 v224;
  __n128 v225;
  uint64_t v226;
  __n128 v227;
  __int128 v228;
  uint64_t v229;
  ggl::CommandBuffer *v230;
  __n128 v231;
  __n128 v232;
  __n128 v233;
  __n128 v234;
  __n128 v235;
  __n128 v236;
  __n128 v237;
  __n128 v238;
  _BYTE __p[24];
  __int128 v240;
  __int128 v241;
  __int128 v242;
  uint64_t v243;
  uint64_t v244;
  __int128 v245;
  __int128 v246;
  uint64_t v247;
  double v248;
  double v249;
  _QWORD v250[3];
  _QWORD *v251;
  _QWORD v252[3];
  _QWORD *v253;
  _QWORD v254[3];
  _QWORD *v255;
  uint64_t v256;

  v256 = *MEMORY[0x1E0C80C00];
  v252[0] = &off_1E42D0D30;
  v252[1] = a2;
  v253 = v252;
  v250[0] = &off_1E42D0D78;
  v250[1] = a2;
  v251 = v250;
  v255 = v254;
  v254[0] = &off_1E42D0D78;
  v254[1] = a2;
  std::__function::__func<md::GlobeRasterRenderLayer::layout(md::LayoutContext const&)::$_0,std::allocator<md::GlobeRasterRenderLayer::layout(md::LayoutContext const&)::$_0>,void ()(void)>::operator()((uint64_t)v252);
  v4 = v251;
  if (v251 == v250)
  {
    v5 = 4;
    v4 = v250;
  }
  else
  {
    if (!v251)
      goto LABEL_6;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_6:
  v6 = v253;
  if (v253 == v252)
  {
    v7 = 4;
    v6 = v252;
    goto LABEL_10;
  }
  if (v253)
  {
    v7 = 5;
LABEL_10:
    (*(void (**)(void))(*v6 + 8 * v7))();
  }
  v8 = (_QWORD *)*((_QWORD *)a2 + 1);
  v9 = (int8x8_t)v8[1];
  if (!*(_QWORD *)&v9)
    goto LABEL_34;
  v10 = (uint8x8_t)vcnt_s8(v9);
  v10.i16[0] = vaddlv_u8(v10);
  if (v10.u32[0] > 1uLL)
  {
    v11 = 0x1AF456233693CD46;
    if (*(_QWORD *)&v9 <= 0x1AF456233693CD46uLL)
      v11 = 0x1AF456233693CD46uLL % *(_QWORD *)&v9;
  }
  else
  {
    v11 = (*(_QWORD *)&v9 - 1) & 0x1AF456233693CD46;
  }
  v12 = *(_QWORD **)(*v8 + 8 * v11);
  if (!v12)
    goto LABEL_34;
  v13 = (_QWORD *)*v12;
  if (!v13)
    goto LABEL_34;
  if (v10.u32[0] < 2uLL)
  {
    v14 = *(_QWORD *)&v9 - 1;
    while (1)
    {
      v16 = v13[1];
      if (v16 == 0x1AF456233693CD46)
      {
        if (v13[2] == 0x1AF456233693CD46)
          goto LABEL_32;
      }
      else if ((v16 & v14) != v11)
      {
        goto LABEL_34;
      }
      v13 = (_QWORD *)*v13;
      if (!v13)
        goto LABEL_34;
    }
  }
  while (1)
  {
    v15 = v13[1];
    if (v15 == 0x1AF456233693CD46)
      break;
    if (v15 >= *(_QWORD *)&v9)
      v15 %= *(_QWORD *)&v9;
    if (v15 != v11)
      goto LABEL_34;
LABEL_21:
    v13 = (_QWORD *)*v13;
    if (!v13)
      goto LABEL_34;
  }
  if (v13[2] != 0x1AF456233693CD46)
    goto LABEL_21;
LABEL_32:
  v17 = v13[5];
  if (*(_QWORD *)(v17 + 8) != 0x1AF456233693CD46)
  {
LABEL_34:
    v18 = 0;
    goto LABEL_35;
  }
  v18 = *(_QWORD *)(v17 + 32);
LABEL_35:
  (*(void (**)(_BYTE *__return_ptr, md::GlobeRasterRenderLayer *, const md::LayoutContext *))(*(_QWORD *)this + 32))(__p, this, a2);
  v19 = (unsigned __int16)**(_WORD **)__p;
  *(_QWORD *)&__p[8] = *(_QWORD *)__p;
  operator delete(*(void **)__p);
  v20 = *(_QWORD **)(*(_QWORD *)(*((_QWORD *)this + 5) + 24) + 8);
  v22 = v20[3];
  v21 = v20[4];
  if (v21 == v22)
    goto LABEL_42;
  v23 = 0;
  while (1)
  {
    v24 = *(unsigned __int8 **)(v22 + 8 * v23);
    if (*v24 == v19)
    {
      v25 = *((_QWORD *)v24 + 1);
      v26 = v20[15];
      if (v25 < (v20[16] - v26) >> 3)
        break;
    }
    if (++v23 >= (unint64_t)((v21 - v22) >> 3))
      goto LABEL_42;
  }
  v27 = *(_QWORD *)(v26 + 8 * v25);
  if (!v27)
LABEL_42:
    v28 = 0;
  else
    v28 = *(ggl::CommandBuffer **)(*(_QWORD *)(v27 + 24) + 8 * (v19 >> 8));
  v29 = *((_QWORD *)v28 + 9);
  if (*((_QWORD *)v28 + 10) != v29)
    *((_QWORD *)v28 + 10) = v29;
  *((_QWORD *)v28 + 4) = 0;
  v30 = (uint64_t **)*((_QWORD *)this + 44);
  ggl::FragmentedPool<ggl::RenderItem>::pushAll(v30[1]);
  v39 = *v30;
  v40 = (uint64_t *)(*v30)[4];
  v41 = (uint64_t *)(*v30)[5];
  v230 = v28;
  if (v40 != v41)
  {
    v226 = v18;
    v42 = (_QWORD *)v39[1];
    while (1)
    {
      v43 = *v40;
      v44 = v39[2];
      if ((unint64_t)v42 >= v44)
        break;
      if (v42)
        *v42 = v43;
      ++v42;
LABEL_48:
      v39[1] = (uint64_t)v42;
      if (++v40 == v41)
      {
        v63 = v39[4];
        v28 = v230;
        v18 = v226;
        if (v63 != v39[5])
          v39[5] = v63;
        goto LABEL_77;
      }
    }
    v45 = ((uint64_t)v42 - *v39) >> 3;
    if ((unint64_t)(v45 + 1) >> 61)
      abort();
    v46 = v44 - *v39;
    v47 = v46 >> 2;
    if (v46 >> 2 <= (unint64_t)(v45 + 1))
      v47 = v45 + 1;
    if ((unint64_t)v46 >= 0x7FFFFFFFFFFFFFF8)
      v48 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v48 = v47;
    if (v48)
    {
      v49 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v39[3] + 16))(v39[3], 8 * v48, 8);
      v50 = (_QWORD *)(v49 + 8 * v45);
      v51 = v49 + 8 * v48;
      if (v49)
        *v50 = v43;
    }
    else
    {
      v51 = 0;
      v50 = (_QWORD *)(8 * v45);
    }
    v53 = *v39;
    v52 = v39[1];
    v54 = v52 - *v39;
    if (v52 == *v39)
    {
      v56 = v50;
      goto LABEL_73;
    }
    v55 = v54 - 8;
    if ((unint64_t)(v54 - 8) < 0x38)
    {
      v56 = v50;
    }
    else
    {
      v56 = v50;
      if ((unint64_t)(v52 - (_QWORD)v50) >= 0x20)
      {
        v57 = (v55 >> 3) + 1;
        v58 = (__n128 *)(v50 - 2);
        v59 = (__n128 *)(v52 - 16);
        v60 = v57 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v32 = v59[-1];
          _Q0 = *v59;
          v58[-1] = v32;
          *v58 = _Q0;
          v58 -= 2;
          v59 -= 2;
          v60 -= 4;
        }
        while (v60);
        v56 = &v50[-(v57 & 0x3FFFFFFFFFFFFFFCLL)];
        v52 -= 8 * (v57 & 0x3FFFFFFFFFFFFFFCLL);
        if (v57 == (v57 & 0x3FFFFFFFFFFFFFFCLL))
          goto LABEL_72;
      }
    }
    do
    {
      v61 = *(_QWORD *)(v52 - 8);
      v52 -= 8;
      *--v56 = v61;
    }
    while (v52 != v53);
LABEL_72:
    v52 = *v39;
LABEL_73:
    v42 = v50 + 1;
    *v39 = (uint64_t)v56;
    v39[1] = (uint64_t)(v50 + 1);
    v62 = v39[2];
    v39[2] = v51;
    if (v52)
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v39[3] + 40))(v39[3], v52, v62 - v52);
    goto LABEL_48;
  }
LABEL_77:
  if (*((_QWORD *)this + 34) != *((_QWORD *)this + 35))
  {
    v64 = (uint64_t *)*((_QWORD *)a2 + 1);
    v65 = (int8x8_t)v64[1];
    v66 = (uint8x8_t)vcnt_s8(v65);
    v66.i16[0] = vaddlv_u8(v66);
    v67 = v66.u32[0];
    if (v66.u32[0] >= 2uLL)
    {
      v70 = 0xE42D19AFCA302E68;
      if (*(_QWORD *)&v65 <= 0xE42D19AFCA302E68)
        v70 = 0xE42D19AFCA302E68 % *(_QWORD *)&v65;
      v68 = *v64;
      v69 = *(_QWORD **)(v68 + 8 * v70);
      do
      {
        do
          v69 = (_QWORD *)*v69;
        while (v69[1] != 0xE42D19AFCA302E68);
      }
      while (v69[2] != 0xE42D19AFCA302E68);
    }
    else
    {
      v68 = *v64;
      v69 = *(_QWORD **)(v68 + 8 * ((*(_QWORD *)&v65 - 1) & 0xE42D19AFCA302E68));
      do
      {
        do
          v69 = (_QWORD *)*v69;
        while (v69[1] != 0xE42D19AFCA302E68);
      }
      while (v69[2] != 0xE42D19AFCA302E68);
    }
    v71 = *(unsigned __int8 *)(*(_QWORD *)(v69[5] + 32) + 72);
    v72 = *(_QWORD *)(*((_QWORD *)this + 44) + 40);
    *(_QWORD *)__p = 0;
    *(_QWORD *)&__p[8] = 0;
    v73 = *(_QWORD *)(v72 + 8);
    *(_QWORD *)&v74 = 0;
    *((_QWORD *)&v74 + 1) = v72;
    if (v73)
      v75 = *(_QWORD *)(v72 + 72);
    else
      v75 = 0;
    *(_OWORD *)__p = v74;
    *(_QWORD *)&__p[16] = 0;
    *(_QWORD *)&v240 = v73;
    *(_QWORD *)&v241 = v75;
    WORD4(v240) = 1;
    if (v67 > 1)
    {
      v76 = 0x1AF456233693CD46;
      if (*(_QWORD *)&v65 <= 0x1AF456233693CD46uLL)
        v76 = 0x1AF456233693CD46uLL % *(_QWORD *)&v65;
    }
    else
    {
      v76 = (*(_QWORD *)&v65 - 1) & 0x1AF456233693CD46;
    }
    v77 = *(_QWORD **)(v68 + 8 * v76);
    v228 = v74;
    if (!v77)
      goto LABEL_113;
    v78 = (_QWORD *)*v77;
    if (!v78)
      goto LABEL_113;
    if (v67 < 2)
    {
      while (1)
      {
        v80 = v78[1];
        if (v80 == 0x1AF456233693CD46)
        {
          if (v78[2] == 0x1AF456233693CD46)
            goto LABEL_111;
        }
        else if ((v80 & (*(_QWORD *)&v65 - 1)) != v76)
        {
          goto LABEL_113;
        }
        v78 = (_QWORD *)*v78;
        if (!v78)
          goto LABEL_113;
      }
    }
    while (1)
    {
      v79 = v78[1];
      if (v79 == 0x1AF456233693CD46)
        break;
      if (v79 >= *(_QWORD *)&v65)
        v79 %= *(_QWORD *)&v65;
      if (v79 != v76)
        goto LABEL_113;
LABEL_100:
      v78 = (_QWORD *)*v78;
      if (!v78)
        goto LABEL_113;
    }
    if (v78[2] != 0x1AF456233693CD46)
      goto LABEL_100;
LABEL_111:
    v81 = v78[5];
    if (*(_QWORD *)(v81 + 8) == 0x1AF456233693CD46)
    {
      v82 = *(_QWORD *)(v81 + 32);
      goto LABEL_114;
    }
LABEL_113:
    v82 = 0;
LABEL_114:
    *(float32x4_t *)v75 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*(float64x2_t *)(v82 + 552)), *(float64x2_t *)(v82 + 568));
    *(float32x4_t *)(v75 + 16) = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*(float64x2_t *)(v82 + 584)), *(float64x2_t *)(v82 + 600));
    *(float32x4_t *)(v75 + 32) = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*(float64x2_t *)(v82 + 616)), *(float64x2_t *)(v82 + 632));
    *(float32x4_t *)(v75 + 48) = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*(float64x2_t *)(v82 + 648)), *(float64x2_t *)(v82 + 664));
    if (v67 > 1)
    {
      v83 = 0x41E8D6E445F4145;
      if (*(_QWORD *)&v65 <= 0x41E8D6E445F4145uLL)
        v83 = 0x41E8D6E445F4145uLL % *(_QWORD *)&v65;
    }
    else
    {
      v83 = (*(_QWORD *)&v65 - 1) & 0x41E8D6E445F4145;
    }
    v84 = *(_QWORD **)(v68 + 8 * v83);
    if (!v84)
      goto LABEL_137;
    v85 = (_QWORD *)*v84;
    if (!v85)
      goto LABEL_137;
    if (v67 < 2)
    {
      v86 = *(_QWORD *)&v65 - 1;
      while (1)
      {
        v88 = v85[1];
        if (v88 == 0x41E8D6E445F4145)
        {
          if (v85[2] == 0x41E8D6E445F4145)
            goto LABEL_134;
        }
        else if ((v88 & v86) != v83)
        {
          goto LABEL_137;
        }
        v85 = (_QWORD *)*v85;
        if (!v85)
          goto LABEL_137;
      }
    }
    while (2)
    {
      v87 = v85[1];
      if (v87 != 0x41E8D6E445F4145)
      {
        if (v87 >= *(_QWORD *)&v65)
          v87 %= *(_QWORD *)&v65;
        if (v87 != v83)
          goto LABEL_137;
        goto LABEL_123;
      }
      if (v85[2] != 0x41E8D6E445F4145)
      {
LABEL_123:
        v85 = (_QWORD *)*v85;
        if (!v85)
          goto LABEL_137;
        continue;
      }
      break;
    }
LABEL_134:
    v89 = v85[5];
    if (*(_QWORD *)(v89 + 8) == 0x41E8D6E445F4145)
    {
      v90 = *(_QWORD *)(v89 + 32);
      if (v90)
      {
        v91 = *(double *)(v90 + 176);
        *(float32x2_t *)(v75 + 96) = vcvt_f32_f64(*(float64x2_t *)(v90 + 160));
        *(float *)(v75 + 104) = v91;
        v92 = *(_DWORD *)(v90 + 424);
        goto LABEL_138;
      }
    }
LABEL_137:
    v93 = objc_alloc_init(MEMORY[0x1E0D26ED0]);
    v231.n128_u64[0] = 0;
    v249 = 0.0;
    v248 = 0.0;
    objc_msgSend(v93, "calculateGeocentricDirectionForSunX:Y:Z:", &v231, &v249, &v248);
    v94 = v231.n128_f64[0];
    v95 = v249;
    v96 = v248;
    *(float *)(v75 + 96) = v94;
    *(float *)(v75 + 100) = v95;
    *(float *)(v75 + 104) = v96;

    v92 = 0;
LABEL_138:
    _ZF = *(double *)(v82 + 32) < 6378137.0 && v71 == 1;
    *(_DWORD *)(v75 + 112) = v92;
    v98 = -1.0;
    if (!_ZF)
      v98 = 1.0;
    if (**((_BYTE **)a2 + 9))
      v98 = 0.0;
    *(float32x2_t *)(v75 + 64) = vmul_n_f32((float32x2_t)0x3F4CCCCD3F333333, v98);
    *(float *)(v75 + 72) = v98;
    v99 = *(double *)(v82 + 512);
    v100 = *(double *)(v82 + 496) * *(double *)(v82 + 496) + *(double *)(v82 + 504) * *(double *)(v82 + 504);
    v101 = sqrt(v100 + v99 * v99) + -6371008.77;
    v102 = fmaxf(v101, 0.0);
    v103 = sqrt(v100);
    v104 = atan2(v99, v103 * 0.996647189);
    v105 = __sincos_stret(v104);
    v106 = atan2(v99 + v105.__sinval * v105.__sinval * 42841.3115 * v105.__sinval, v103 + v105.__cosval * v105.__cosval * -42697.6727 * v105.__cosval);
    v107 = __sincos_stret(v106);
    v108 = v103 / v107.__cosval - 6378137.0 / sqrt(v107.__sinval * v107.__sinval * -0.00669437999 + 1.0);
    v109 = fmaxf(v108, 1.0);
    v110 = v109;
    v111 = sqrt((float)(v109 * v109) + v109 * 12742017.5);
    v112 = v111 - v102;
    v113 = fmax(v110, 0.0);
    if (v113 <= 8000.0)
      v114 = v113 * 0.000125;
    else
      v114 = 1.0;
    v115 = v112 + (v114 * v114 * (v114 * 2.0 + -3.0) + 1.0) * (float)(v112 * -0.5);
    *(float *)(v75 + 80) = v102;
    *(float *)(v75 + 84) = v115;
    if (v73)
    {
      if ((_QWORD)v228 && *(_BYTE *)(*((_QWORD *)&v228 + 1) + 17) != 2)
        (*(void (**)(void))(*(_QWORD *)v228 + 64))();
      v116 = *(_QWORD *)(*((_QWORD *)&v228 + 1) + 64);
      if (v116 <= v73)
        v116 = v73;
      *(_QWORD *)(*((_QWORD *)&v228 + 1) + 56) = 0;
      *(_QWORD *)(*((_QWORD *)&v228 + 1) + 64) = v116;
    }
    v117 = (_QWORD *)*((_QWORD *)this + 44);
    v118 = (_QWORD *)v117[7];
    v119 = v118[1];
    *(_OWORD *)v118[9] = xmmword_19FFB4DC0;
    if (v118[8] > v119)
      v119 = v118[8];
    v118[7] = 0;
    v118[8] = v119;
    v120 = (_QWORD *)v117[9];
    v121 = v120[1];
    *(_OWORD *)v120[9] = xmmword_19FFB4DD0;
    if (v120[8] > v121)
      v121 = v120[8];
    v120[7] = 0;
    v120[8] = v121;
    v122 = (_QWORD *)v117[11];
    v123 = v122[1];
    *(_OWORD *)v122[9] = xmmword_19FFB3480;
    if (v122[8] > v123)
      v123 = v122[8];
    v122[7] = 0;
    v122[8] = v123;
    v241 = 0u;
    v243 = 0;
    v246 = 0u;
    v245 = 0u;
    v242 = 0u;
    v240 = 0u;
    *(_OWORD *)&__p[8] = 0u;
    *(_QWORD *)__p = 0x415854A640000000;
    *(_QWORD *)&v241 = 0x415854A640000000;
    v247 = 0x3FF0000000000000;
    v244 = 0x41583FC4141C97D0;
    gm::operator*<double,4,4,4>(v231.n128_f64, (double *)(v18 + 3160), (double *)__p);
    v38 = v231;
    v35 = v232;
    v37 = v233;
    v33 = v234;
    v36 = v235;
    v32 = v236;
    v34 = v237;
    _Q0 = v238;
    v124 = v117[3];
    *((_QWORD *)v28 + 4) = *((_QWORD *)this + 45);
    v229 = v124;
    *(_BYTE *)(v124 + 55) = *((_BYTE *)this + 368);
    v125 = (uint64_t *)*((_QWORD *)this + 34);
    v126 = (uint64_t *)*((_QWORD *)this + 35);
    if (v125 != v126)
    {
      v38 = (__n128)vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64((float64x2_t)v38), (float64x2_t)v35);
      v35 = (__n128)vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64((float64x2_t)v37), (float64x2_t)v33);
      v225 = v35;
      v227 = v38;
      v33 = (__n128)vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64((float64x2_t)v36), (float64x2_t)v32);
      v32 = (__n128)vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64((float64x2_t)v34), (float64x2_t)_Q0);
      v223 = v32;
      v224 = v33;
      __asm { FMOV            V0.2D, #1.0 }
      v222 = (float64x2_t)_Q0;
      while (1)
      {
        v130 = *v125;
        v131 = *(_QWORD *)(*(_QWORD *)(*v125 + 384) + 720);
        if (v131)
          break;
LABEL_164:
        if (++v125 == v126)
          goto LABEL_276;
      }
      v132 = (ggl::RenderItem *)ggl::FragmentedPool<ggl::RenderItem>::pop(*(_QWORD *)(*((_QWORD *)this + 44) + 8));
      *((_QWORD *)v132 + 3) = v229;
      *((_QWORD *)v132 + 8) = *(_QWORD *)(*((_QWORD *)this + 44) + 16);
      v133 = **((_QWORD **)this + 44);
      v134 = *(_QWORD *)(v133 + 8);
      if (v134 == *(_QWORD *)v133)
      {
        v146 = *(_QWORD *)(v133 + 88);
        if (!v146)
          goto LABEL_286;
        v135 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v146 + 48))(v146);
        v136 = *(_QWORD **)(v133 + 40);
        v147 = *(_QWORD *)(v133 + 48);
        if ((unint64_t)v136 >= v147)
        {
          v149 = *(_QWORD *)(v133 + 32);
          v150 = ((uint64_t)v136 - v149) >> 3;
          v151 = v150 + 1;
          if ((unint64_t)(v150 + 1) >> 61)
LABEL_285:
            abort();
          v152 = v147 - v149;
          if (v152 >> 2 > v151)
            v151 = v152 >> 2;
          if ((unint64_t)v152 >= 0x7FFFFFFFFFFFFFF8)
            v153 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v153 = v151;
          if (v153)
          {
            v154 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v133 + 56) + 16))(*(_QWORD *)(v133 + 56), 8 * v153, 8);
            v144 = (_QWORD *)(v154 + 8 * v150);
            v145 = v154 + 8 * v153;
            if (v154)
              *v144 = v135;
          }
          else
          {
            v145 = 0;
            v144 = (_QWORD *)(8 * v150);
          }
          v165 = *(_QWORD *)(v133 + 32);
          v155 = *(_QWORD *)(v133 + 40);
          v166 = v155 - v165;
          if (v155 != v165)
          {
            v167 = v166 - 8;
            if ((unint64_t)(v166 - 8) < 0x38)
            {
              v159 = v144;
            }
            else
            {
              v159 = v144;
              if ((unint64_t)(v155 - (_QWORD)v144) >= 0x20)
              {
                v168 = (v167 >> 3) + 1;
                v169 = v144 - 2;
                v170 = (__int128 *)(v155 - 16);
                v171 = v168 & 0x3FFFFFFFFFFFFFFCLL;
                do
                {
                  v172 = *v170;
                  *(v169 - 1) = *(v170 - 1);
                  *v169 = v172;
                  v169 -= 2;
                  v170 -= 2;
                  v171 -= 4;
                }
                while (v171);
                v159 = &v144[-(v168 & 0x3FFFFFFFFFFFFFFCLL)];
                v155 -= 8 * (v168 & 0x3FFFFFFFFFFFFFFCLL);
                if (v168 == (v168 & 0x3FFFFFFFFFFFFFFCLL))
                  goto LABEL_213;
              }
            }
            do
            {
              v174 = *(_QWORD *)(v155 - 8);
              v155 -= 8;
              *--v159 = v174;
            }
            while (v155 != v165);
            goto LABEL_213;
          }
LABEL_207:
          v159 = v144;
          goto LABEL_214;
        }
      }
      else
      {
        v135 = *(_QWORD **)(v134 - 8);
        *(_QWORD *)(v133 + 8) = v134 - 8;
        v136 = *(_QWORD **)(v133 + 40);
        v137 = *(_QWORD *)(v133 + 48);
        if ((unint64_t)v136 >= v137)
        {
          v138 = *(_QWORD *)(v133 + 32);
          v139 = ((uint64_t)v136 - v138) >> 3;
          v140 = v139 + 1;
          if ((unint64_t)(v139 + 1) >> 61)
            goto LABEL_285;
          v141 = v137 - v138;
          if (v141 >> 2 > v140)
            v140 = v141 >> 2;
          if ((unint64_t)v141 >= 0x7FFFFFFFFFFFFFF8)
            v142 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v142 = v140;
          if (v142)
          {
            v143 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v133 + 56) + 16))(*(_QWORD *)(v133 + 56), 8 * v142, 8);
            v144 = (_QWORD *)(v143 + 8 * v139);
            v145 = v143 + 8 * v142;
            if (v143)
              *v144 = v135;
          }
          else
          {
            v145 = 0;
            v144 = (_QWORD *)(8 * v139);
          }
          v156 = *(_QWORD *)(v133 + 32);
          v155 = *(_QWORD *)(v133 + 40);
          v157 = v155 - v156;
          if (v155 != v156)
          {
            v158 = v157 - 8;
            if ((unint64_t)(v157 - 8) < 0x38)
            {
              v159 = v144;
            }
            else
            {
              v159 = v144;
              if ((unint64_t)(v155 - (_QWORD)v144) >= 0x20)
              {
                v160 = (v158 >> 3) + 1;
                v161 = v144 - 2;
                v162 = (__int128 *)(v155 - 16);
                v163 = v160 & 0x3FFFFFFFFFFFFFFCLL;
                do
                {
                  v164 = *v162;
                  *(v161 - 1) = *(v162 - 1);
                  *v161 = v164;
                  v161 -= 2;
                  v162 -= 2;
                  v163 -= 4;
                }
                while (v163);
                v159 = &v144[-(v160 & 0x3FFFFFFFFFFFFFFCLL)];
                v155 -= 8 * (v160 & 0x3FFFFFFFFFFFFFFCLL);
                if (v160 == (v160 & 0x3FFFFFFFFFFFFFFCLL))
                  goto LABEL_213;
              }
            }
            do
            {
              v173 = *(_QWORD *)(v155 - 8);
              v155 -= 8;
              *--v159 = v173;
            }
            while (v155 != v156);
LABEL_213:
            v155 = *(_QWORD *)(v133 + 32);
LABEL_214:
            v148 = v144 + 1;
            *(_QWORD *)(v133 + 32) = v159;
            *(_QWORD *)(v133 + 40) = v144 + 1;
            v175 = *(_QWORD *)(v133 + 48);
            *(_QWORD *)(v133 + 48) = v145;
            if (v155)
              (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v133 + 56) + 40))(*(_QWORD *)(v133 + 56), v155, v175 - v155);
            goto LABEL_216;
          }
          goto LABEL_207;
        }
      }
      if (v136)
        *v136 = v135;
      v148 = v136 + 1;
LABEL_216:
      *(_QWORD *)(v133 + 40) = v148;
      v231.n128_u64[0] = (unint64_t)v135;
      v176 = *(_QWORD *)(v133 + 120);
      if (!v176)
        goto LABEL_286;
      (*(void (**)(uint64_t, __n128 *))(*(_QWORD *)v176 + 48))(v176, &v231);
      v177 = (_QWORD *)v135[8];
      v178 = v177[2];
      v231 = 0uLL;
      v179 = *(_QWORD *)(v178 + 8);
      v180.n128_u64[0] = 0;
      v180.n128_u64[1] = v178;
      v181 = *(_QWORD *)(v178 + 72);
      v231 = v180;
      v232.n128_u64[0] = 0;
      v232.n128_u64[1] = v179;
      v233.n128_u64[1] = v181;
      v233.n128_u16[0] = 1;
      LOBYTE(v179) = *(_BYTE *)(v130 + 25);
      v182 = *(unsigned __int8 *)(v130 + 24);
      *(_DWORD *)(v181 + 80) = v182;
      *(__n128 *)v181 = v227;
      *(__n128 *)(v181 + 16) = v225;
      *(__n128 *)(v181 + 32) = v224;
      *(__n128 *)(v181 + 48) = v223;
      v183 = vrev64_s32(*(int32x2_t *)(v130 + 28));
      v184.i64[0] = v183.u32[0];
      v184.i64[1] = v183.u32[1];
      v185 = vdivq_f64(v222, (float64x2_t)vdupq_lane_s64(COERCE__INT64((double)(1 << v179)), 0));
      v186 = vmulq_f64(vcvtq_f64_u64(v184), v185);
      v187 = vadd_s32(v183, (int32x2_t)0x100000001);
      v184.i64[0] = v187.u32[0];
      v184.i64[1] = v187.u32[1];
      v188 = vcvt_f32_f64(v186);
      *(float32x2_t *)(v181 + 64) = vsub_f32(vcvt_f32_f64(vmulq_f64(vcvtq_f64_u64(v184), v185)), v188);
      *(float32x2_t *)(v181 + 72) = v188;
      if (v182 == 5)
      {
        v189 = (uint64_t *)(*((_QWORD *)this + 44) + 72);
      }
      else if (v182 == 2)
      {
        v189 = (uint64_t *)(*((_QWORD *)this + 44) + 56);
      }
      else
      {
        v189 = (uint64_t *)(*((_QWORD *)this + 44) + 88);
      }
      v177[5] = 0;
      v190 = *v189;
      v177[4] = *v189;
      v191 = v135[20];
      v192 = v189[1];
      if (v192)
      {
        v193 = (unint64_t *)(v192 + 8);
        do
          v194 = __ldxr(v193);
        while (__stxr(v194 + 1, v193));
      }
      v195 = *(std::__shared_weak_count **)(v191 + 40);
      *(_QWORD *)(v191 + 32) = v190;
      *(_QWORD *)(v191 + 40) = v192;
      if (v195)
      {
        p_shared_owners = (unint64_t *)&v195->__shared_owners_;
        do
          v197 = __ldaxr(p_shared_owners);
        while (__stlxr(v197 - 1, p_shared_owners));
        if (!v197)
        {
          ((void (*)(std::__shared_weak_count *))v195->__on_zero_shared)(v195);
          std::__shared_weak_count::__release_weak(v195);
        }
      }
      *(_QWORD *)(v135[12] + 8) = v131;
      v198 = *((_QWORD *)this + 44);
      v200 = *(_QWORD *)(v198 + 104);
      v199 = *(std::__shared_weak_count **)(v198 + 112);
      if (v199)
      {
        v201 = (unint64_t *)&v199->__shared_owners_;
        do
          v202 = __ldxr(v201);
        while (__stxr(v202 + 1, v201));
      }
      if (v200 && **(_QWORD **)(v200 + 40) == v135[1])
      {
        v206 = v135[2];
        if (v206 && v206 != v200)
          ggl::PipelineSetup::resetData((uint64_t)v135);
        if (v199)
        {
          v207 = (unint64_t *)&v199->__shared_owners_;
          do
            v208 = __ldxr(v207);
          while (__stxr(v208 + 1, v207));
        }
        v203 = (std::__shared_weak_count *)v135[3];
        v135[2] = v200;
        v135[3] = v199;
        if (!v203)
          goto LABEL_249;
        v209 = (unint64_t *)&v203->__shared_owners_;
        do
          v205 = __ldaxr(v209);
        while (__stlxr(v205 - 1, v209));
      }
      else
      {
        v203 = (std::__shared_weak_count *)v135[3];
        v135[2] = 0;
        v135[3] = 0;
        if (!v203)
          goto LABEL_249;
        v204 = (unint64_t *)&v203->__shared_owners_;
        do
          v205 = __ldaxr(v204);
        while (__stlxr(v205 - 1, v204));
      }
      if (!v205)
      {
        ((void (*)(std::__shared_weak_count *))v203->__on_zero_shared)(v203);
        std::__shared_weak_count::__release_weak(v203);
        if (v199)
          goto LABEL_250;
        goto LABEL_255;
      }
LABEL_249:
      if (v199)
      {
LABEL_250:
        v210 = (unint64_t *)&v199->__shared_owners_;
        do
          v211 = __ldaxr(v210);
        while (__stlxr(v211 - 1, v210));
        if (!v211)
        {
          ((void (*)(std::__shared_weak_count *))v199->__on_zero_shared)(v199);
          std::__shared_weak_count::__release_weak(v199);
        }
      }
LABEL_255:
      *((_QWORD *)v132 + 4) = v135;
      if (v135[9] != v135[8])
      {
        v212 = 0;
        do
        {
          (*(void (**)(_QWORD *, unint64_t))(*v135 + 16))(v135, v212++);
          v135 = (_QWORD *)*((_QWORD *)v132 + 4);
        }
        while (v212 < (uint64_t)(v135[9] - v135[8]) >> 4);
      }
      if (v135[13] != v135[12])
      {
        v213 = 0;
        do
        {
          (*(void (**)(_QWORD *, unint64_t))(*v135 + 24))(v135, v213++);
          v135 = (_QWORD *)*((_QWORD *)v132 + 4);
        }
        while (v213 < (uint64_t)(v135[13] - v135[12]) >> 3);
      }
      ggl::CommandBuffer::pushRenderItem((uint64_t)v230, v132);
      if (v233.n128_u64[1])
      {
        v214 = v232;
        if (v232.n128_u64[1] != v232.n128_u64[0])
        {
          v215 = (_QWORD *)v231.n128_u64[1];
          v216 = v233.n128_u8[0];
          v217 = v233.n128_u8[1];
          if (v231.n128_u64[0] && *(_BYTE *)(v231.n128_u64[1] + 17) != 2)
            (*(void (**)(void))(*(_QWORD *)v231.n128_u64[0] + 64))();
          if (v216 && !v217)
          {
            v218 = v215[7];
            v219 = v215[8];
            if (v219 == v218)
              v218 = v215[10] - v215[9];
            if (v214.n128_u64[0] < v218)
              v218 = v214.n128_u64[0];
            if (v219 <= v214.n128_u64[1])
              v219 = v214.n128_u64[1];
            if (v219 == v218)
              v219 = v218 + v215[10] - v215[9];
            v215[7] = v218;
            v215[8] = v219;
          }
        }
      }
      goto LABEL_164;
    }
  }
LABEL_276:
  if (!v255)
  {
LABEL_286:
    std::__throw_bad_function_call[abi:nn180100]();
    __break(1u);
  }
  (*(void (**)(_QWORD *, __n128, __n128, __n128, __n128, __n128, __n128, __n128, __n128))(*v255 + 48))(v255, _Q0, v32, v33, v34, v35, v36, v37, v38);
  result = v255;
  if (v255 == v254)
  {
    v221 = 4;
    result = v254;
  }
  else
  {
    if (!v255)
      return result;
    v221 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v221))();
}

void sub_19F9446E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39)
{
  void *v39;
  uint64_t v40;

  ggl::BufferMemory::~BufferMemory((ggl::BufferMemory *)&a39);
  geo::ScopedFunctions::~ScopedFunctions((geo::ScopedFunctions *)(v40 - 184));
  _Unwind_Resume(a1);
}

uint64_t md::GlobeRasterRenderLayer::reserveStencilRange(uint64_t result, uint64_t a2)
{
  unsigned __int8 *v2;
  unsigned int v3;
  unsigned int v4;
  BOOL v5;
  unsigned __int8 *v6;

  v2 = *(unsigned __int8 **)(a2 + 24);
  v3 = *v2;
  v4 = v2[1];
  v5 = v3 >= v4;
  if (v3 >= v4)
    v6 = v2 + 4;
  else
    v6 = 0;
  *(_QWORD *)(result + 360) = v6;
  if (v5)
  {
    v2[1] = v2[2];
    LOBYTE(v3) = 1;
  }
  *v2 = v3 + 1;
  *(_BYTE *)(result + 368) = v3;
  return result;
}

void std::__function::__func<md::GlobeRasterRenderLayer::layout(md::LayoutContext const&)::$_0,std::allocator<md::GlobeRasterRenderLayer::layout(md::LayoutContext const&)::$_0>,void ()(void)>::operator()(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  os_signpost_id_t v4;
  uint8_t v5[16];

  if (GEOGetVectorKitPerformanceLog_onceToken != -1)
    dispatch_once(&GEOGetVectorKitPerformanceLog_onceToken, &__block_literal_global_13_11780);
  v2 = (id)GEOGetVectorKitPerformanceLog_log;
  v3 = v2;
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 80);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)v5 = 0;
    _os_signpost_emit_with_name_impl(&dword_19F029000, v3, OS_SIGNPOST_INTERVAL_BEGIN, v4, "GlobeRasterLayout", (const char *)&unk_1A0189141, v5, 2u);
  }

}

void std::__function::__func<md::GlobeRasterRenderLayer::layout(md::LayoutContext const&)::$_1,std::allocator<md::GlobeRasterRenderLayer::layout(md::LayoutContext const&)::$_1>,void ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::GlobeRasterRenderLayer::layout(md::LayoutContext const&)::$_1,std::allocator<md::GlobeRasterRenderLayer::layout(md::LayoutContext const&)::$_1>,void ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42D0D78;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<md::GlobeRasterRenderLayer::layout(md::LayoutContext const&)::$_1,std::allocator<md::GlobeRasterRenderLayer::layout(md::LayoutContext const&)::$_1>,void ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42D0D78;
  a2[1] = v2;
  return result;
}

void std::__function::__func<md::GlobeRasterRenderLayer::layout(md::LayoutContext const&)::$_1,std::allocator<md::GlobeRasterRenderLayer::layout(md::LayoutContext const&)::$_1>,void ()(void)>::operator()(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  os_signpost_id_t v4;
  uint8_t v5[16];

  if (GEOGetVectorKitPerformanceLog_onceToken != -1)
    dispatch_once(&GEOGetVectorKitPerformanceLog_onceToken, &__block_literal_global_13_11780);
  v2 = (id)GEOGetVectorKitPerformanceLog_log;
  v3 = v2;
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 80);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)v5 = 0;
    _os_signpost_emit_with_name_impl(&dword_19F029000, v3, OS_SIGNPOST_INTERVAL_END, v4, "GlobeRasterLayout", (const char *)&unk_1A0189141, v5, 2u);
  }

}

void std::__function::__func<md::GlobeRasterRenderLayer::layout(md::LayoutContext const&)::$_0,std::allocator<md::GlobeRasterRenderLayer::layout(md::LayoutContext const&)::$_0>,void ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::GlobeRasterRenderLayer::layout(md::LayoutContext const&)::$_0,std::allocator<md::GlobeRasterRenderLayer::layout(md::LayoutContext const&)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42D0D30;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<md::GlobeRasterRenderLayer::layout(md::LayoutContext const&)::$_0,std::allocator<md::GlobeRasterRenderLayer::layout(md::LayoutContext const&)::$_0>,void ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42D0D30;
  a2[1] = v2;
  return result;
}

void md::GlobeRasterRenderResources::~GlobeRasterRenderResources(md::GlobeRasterRenderResources *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 14);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)*((_QWORD *)this + 12);
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)*((_QWORD *)this + 12);
    if (!v5)
      goto LABEL_11;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  v8 = (std::__shared_weak_count *)*((_QWORD *)this + 10);
  if (!v8)
    goto LABEL_15;
  v9 = (unint64_t *)&v8->__shared_owners_;
  do
    v10 = __ldaxr(v9);
  while (__stlxr(v10 - 1, v9));
  if (!v10)
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
    v11 = (std::__shared_weak_count *)*((_QWORD *)this + 8);
    if (!v11)
      goto LABEL_21;
  }
  else
  {
LABEL_15:
    v11 = (std::__shared_weak_count *)*((_QWORD *)this + 8);
    if (!v11)
      goto LABEL_21;
  }
  v12 = (unint64_t *)&v11->__shared_owners_;
  do
    v13 = __ldaxr(v12);
  while (__stlxr(v13 - 1, v12));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
LABEL_21:
  v14 = (std::__shared_weak_count *)*((_QWORD *)this + 6);
  if (v14)
  {
    v15 = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v17 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v17)
    (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  v18 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v18)
    (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
  v19 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v19)
    (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
  v20 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v20)
  {
    v21 = ggl::FragmentedPool<ggl::BuildingFlat::CompressedMeshPipelineSetup>::~FragmentedPool(v20);
    MEMORY[0x1A1AF4E00](v21, 0x10A0C40D234DDC7);
  }
  v22 = *(_QWORD *)this;
  *(_QWORD *)this = 0;
  if (v22)
  {
    v23 = ggl::FragmentedPool<ggl::BuildingFlat::CompressedMeshPipelineSetup>::~FragmentedPool(v22);
    MEMORY[0x1A1AF4E00](v23, 0x10A0C40D234DDC7);
  }
}

void std::__shared_ptr_emplace<ggl::DaVinci::GlobeTexturedPipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E4B60;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::DaVinci::GlobeTexturedPipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E4B60;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<ggl::DaVinci::GlobeTexturedPipelineState>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void _ZNSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_7DaVinci26GlobeTexturedPipelineSetupEEC1ENS_8functionIFPS5_vEEENS7_IFvS8_EEEmmEd1_UlS8_E_NS_9allocatorISD_EESB_ED0Ev()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *_ZNKSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_7DaVinci26GlobeTexturedPipelineSetupEEC1ENS_8functionIFPS5_vEEENS7_IFvS8_EEEmmEd1_UlS8_E_NS_9allocatorISD_EESB_E7__cloneEv()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E42D7820;
  return result;
}

void _ZNKSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_7DaVinci26GlobeTexturedPipelineSetupEEC1ENS_8functionIFPS5_vEEENS7_IFvS8_EEEmmEd1_UlS8_E_NS_9allocatorISD_EESB_E7__cloneEPNS0_6__baseISB_EE(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E42D7820;
}

void std::__function::__func<md::GlobeRasterRenderResources::GlobeRasterRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_1,std::allocator<md::GlobeRasterRenderResources::GlobeRasterRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_1>,ggl::DaVinci::GlobeTexturedPipelineSetup * ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::GlobeRasterRenderResources::GlobeRasterRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_1,std::allocator<md::GlobeRasterRenderResources::GlobeRasterRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_1>,ggl::DaVinci::GlobeTexturedPipelineSetup * ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42D2EA8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<md::GlobeRasterRenderResources::GlobeRasterRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_1,std::allocator<md::GlobeRasterRenderResources::GlobeRasterRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_1>,ggl::DaVinci::GlobeTexturedPipelineSetup * ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42D2EA8;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<md::GlobeRasterRenderResources::GlobeRasterRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_1,std::allocator<md::GlobeRasterRenderResources::GlobeRasterRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_1>,ggl::DaVinci::GlobeTexturedPipelineSetup * ()(void)>::operator()(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  unsigned __int8 v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t v27;
  unsigned __int8 v29;
  unsigned __int8 v30;
  unsigned __int8 v31;

  v1 = *(_QWORD **)(a1 + 8);
  v2 = operator new();
  if ((v3 & 1) == 0
  {
    if ((v29 & 1) == 0
    {
      if ((v31 & 1) == 0
      {
        ggl::MeshTyped<ggl::DaVinci::GlobeTextured>::attributesReflection(void)::r = (uint64_t)&ggl::DaVinci::globeTexturedReflection;
      }
      ggl::MeshTyped<ggl::DaVinci::GlobeTextured>::typedReflection(void)::r = (uint64_t)&ggl::MeshTyped<ggl::DaVinci::GlobeTextured>::attributesReflection(void)::r;
      unk_1EE585DE8 = 1;
    }
    ggl::DaVinci::GlobeTexturedPipelineSetup::typedReflection(void)::ref = (uint64_t)&ggl::MeshTyped<ggl::DaVinci::GlobeTextured>::typedReflection(void)::r;
    unk_1EE585540 = &ggl::DaVinci::pipelineDataGlobeTexturedPipelineDeviceStructs(void)::ref;
    qword_1EE585548 = 0;
    if ((v30 & 1) == 0
    {
      ggl::DaVinci::pipelineDataGlobeTexturedPipelineConstantStructs(void)::ref = (uint64_t)ggl::FlyoverCommon::Shared::reflection(void)::reflection;
      *(_QWORD *)algn_1EE585638 = ggl::DaVinci::S2Transform::reflection(void)::reflection;
      qword_1EE585640 = (uint64_t)ggl::FlyoverCommon::Clip::reflection(void)::reflection;
    }
    qword_1EE585550 = (uint64_t)&ggl::DaVinci::pipelineDataGlobeTexturedPipelineConstantStructs(void)::ref;
    unk_1EE585558 = xmmword_19FFB3C60;
  }
  ggl::PipelineSetup::PipelineSetup(v2, (uint64_t)&ggl::DaVinci::GlobeTexturedPipelineSetup::typedReflection(void)::ref);
  *(_QWORD *)v2 = &off_1E42BC6E0;
  v4 = (std::__shared_weak_count *)operator new(0xE8uLL);
  v4->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  v4->__shared_weak_owners_ = 0;
  v4->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E2828;
  v6 = ggl::BufferData::BufferData((uint64_t)&v4[1], qword_1EE562798, 2, 1, 6, 1);
  v4[9].__shared_owners_ = (uint64_t)ggl::DaVinci::S2Transform::reflection(void)::reflection;
  v4[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B9B10;
  v7 = *(_QWORD *)(v2 + 64);
  *(_QWORD *)(v7 + 16) = v6;
  *(_QWORD *)(v7 + 24) = 0;
  v8 = *(_QWORD *)(v2 + 160);
  do
    v9 = __ldxr(p_shared_owners);
  while (__stxr(v9 + 1, p_shared_owners));
  v10 = *(std::__shared_weak_count **)(v8 + 24);
  *(_QWORD *)(v8 + 16) = v6;
  *(_QWORD *)(v8 + 24) = v4;
  if (v10)
  {
    v11 = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  v13 = *(_QWORD **)(v2 + 64);
  v14 = v1[5];
  v15 = v1[6];
  *v13 = v14;
  v13[1] = 0;
  v16 = *(_QWORD **)(v2 + 160);
  if (v15)
  {
    v17 = (unint64_t *)(v15 + 8);
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
  }
  v19 = (std::__shared_weak_count *)v16[1];
  *v16 = v14;
  v16[1] = v15;
  if (v19)
  {
    v20 = (unint64_t *)&v19->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  v22 = *(_QWORD *)(v2 + 64);
  *(_QWORD *)(v22 + 32) = 0;
  *(_QWORD *)(v22 + 40) = 0;
  v23 = *(_QWORD *)(v2 + 160);
  v24 = *(std::__shared_weak_count **)(v23 + 40);
  *(_QWORD *)(v23 + 32) = 0;
  *(_QWORD *)(v23 + 40) = 0;
  if (v24)
  {
    v25 = (unint64_t *)&v24->__shared_owners_;
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  **(_QWORD **)(v2 + 96) = v1[4];
  do
    v27 = __ldaxr(p_shared_owners);
  while (__stlxr(v27 - 1, p_shared_owners));
  if (!v27)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  return v2;
}

uint64_t ggl::ConstantDataTyped<ggl::DaVinci::S2Transform>::~ConstantDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  return a1;
}

void ggl::ConstantDataTyped<ggl::DaVinci::S2Transform>::~ConstantDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::DaVinci::S2Transform>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E2828;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::DaVinci::S2Transform>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E2828;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::DaVinci::S2Transform>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t ggl::ConstantDataTyped<ggl::FlyoverCommon::Shared>::~ConstantDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  return a1;
}

void ggl::ConstantDataTyped<ggl::FlyoverCommon::Shared>::~ConstantDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::FlyoverCommon::Shared>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E12F0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::FlyoverCommon::Shared>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E12F0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::FlyoverCommon::Shared>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__function::__func<md::GlobeRasterRenderResources::GlobeRasterRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_0,std::allocator<md::GlobeRasterRenderResources::GlobeRasterRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_0>,ggl::RenderItem * ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::GlobeRasterRenderResources::GlobeRasterRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_0,std::allocator<md::GlobeRasterRenderResources::GlobeRasterRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_0>,ggl::RenderItem * ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E42D2E60;
  return result;
}

void std::__function::__func<md::GlobeRasterRenderResources::GlobeRasterRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_0,std::allocator<md::GlobeRasterRenderResources::GlobeRasterRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_0>,ggl::RenderItem * ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E42D2E60;
}

int64x2_t std::__function::__func<md::GlobeRasterRenderResources::GlobeRasterRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_0,std::allocator<md::GlobeRasterRenderResources::GlobeRasterRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_0>,ggl::RenderItem * ()(void)>::operator()()
{
  uint64_t v0;
  int64x2_t result;

  v0 = operator new();
  *(_QWORD *)v0 = &off_1E42B59B0;
  *(_QWORD *)(v0 + 48) = 0;
  *(_QWORD *)(v0 + 24) = 0;
  *(_QWORD *)(v0 + 32) = 0;
  *(_QWORD *)(v0 + 16) = "GlobeRasterTile";
  *(_DWORD *)(v0 + 40) = 0;
  *(_DWORD *)(v0 + 56) = 1065353216;
  *(_OWORD *)(v0 + 64) = 0u;
  *(_OWORD *)(v0 + 80) = 0u;
  result = vdupq_n_s64(1uLL);
  *(int64x2_t *)(v0 + 96) = result;
  *(_QWORD *)(v0 + 112) = 0;
  return result;
}

void LabelPlacementToShortString(std::string *this, _BYTE *a2)
{
  std::string::size_type v4;
  __int16 v5;
  int v6;
  unsigned int v7;
  unsigned int v8;
  __int16 v9;
  std::string *p_s;
  std::string::size_type size;
  std::string::size_type v12;
  __int16 v13;
  int v14;
  std::string __s;

  *(_OWORD *)&this->__r_.__value_.__l.__data_ = 0uLL;
  this->__r_.__value_.__r.__words[2] = 0;
  switch(*a2)
  {
    case 0:
      v4 = 2;
      *((_BYTE *)&__s.__r_.__value_.__s + 23) = 2;
      v5 = 26180;
      goto LABEL_7;
    case 1:
      v4 = 2;
      *((_BYTE *)&__s.__r_.__value_.__s + 23) = 2;
      v5 = 25427;
      goto LABEL_7;
    case 2:
      v4 = 2;
      *((_BYTE *)&__s.__r_.__value_.__s + 23) = 2;
      v5 = 24899;
LABEL_7:
      LOWORD(__s.__r_.__value_.__l.__data_) = v5;
      __s.__r_.__value_.__s.__data_[2] = 0;
      break;
    case 3:
      v4 = 4;
      *((_BYTE *)&__s.__r_.__value_.__s + 23) = 4;
      v6 = 2017812803;
LABEL_15:
      LODWORD(__s.__r_.__value_.__l.__data_) = v6;
      __s.__r_.__value_.__s.__data_[4] = 0;
      break;
    case 4:
      v4 = 7;
      *((_BYTE *)&__s.__r_.__value_.__s + 23) = 7;
      strcpy((char *)&__s, "AutoOff");
      break;
    case 5:
      v4 = 8;
      *((_BYTE *)&__s.__r_.__value_.__s + 23) = 8;
      strcpy((char *)&__s, "FeatNrml");
      break;
    default:
      switch(*a2)
      {
        case 'd':
          v4 = 4;
          *((_BYTE *)&__s.__r_.__value_.__s + 23) = 4;
          v6 = 2017813331;
          goto LABEL_15;
        case 'e':
          v4 = 6;
          *((_BYTE *)&__s.__r_.__value_.__s + 23) = 6;
          strcpy((char *)&__s, "TLnOff");
          break;
        case 'f':
          v4 = 5;
          *((_BYTE *)&__s.__r_.__value_.__s + 23) = 5;
          strcpy((char *)&__s, "RtOff");
          break;
        case 'g':
          v4 = 4;
          *((_BYTE *)&__s.__r_.__value_.__s + 23) = 4;
          v6 = 2037149520;
          goto LABEL_15;
        default:
          v4 = 0;
          *((_BYTE *)&__s.__r_.__value_.__s + 23) = 0;
          __s.__r_.__value_.__s.__data_[0] = 0;
          break;
      }
      break;
  }
  std::string::append(this, (const std::string::value_type *)&__s, v4);
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__s.__r_.__value_.__l.__data_);
  std::string::append(this, ":", 1uLL);
  switch(a2[3])
  {
    case 0:
      v8 = 1;
      *((_BYTE *)&__s.__r_.__value_.__s + 23) = 1;
      strcpy((char *)&__s, "R");
      break;
    case 1:
      v8 = 2;
      *((_BYTE *)&__s.__r_.__value_.__s + 23) = 2;
      v9 = 21076;
      goto LABEL_27;
    case 2:
      v8 = 1;
      *((_BYTE *)&__s.__r_.__value_.__s + 23) = 1;
      strcpy((char *)&__s, "T");
      break;
    case 3:
      v8 = 2;
      *((_BYTE *)&__s.__r_.__value_.__s + 23) = 2;
      v9 = 19540;
      goto LABEL_27;
    case 4:
      v8 = 1;
      *((_BYTE *)&__s.__r_.__value_.__s + 23) = 1;
      strcpy((char *)&__s, "L");
      break;
    case 5:
      v8 = 2;
      *((_BYTE *)&__s.__r_.__value_.__s + 23) = 2;
      v9 = 19522;
      goto LABEL_27;
    case 6:
      v8 = 1;
      *((_BYTE *)&__s.__r_.__value_.__s + 23) = 1;
      strcpy((char *)&__s, "B");
      break;
    case 7:
      v8 = 2;
      *((_BYTE *)&__s.__r_.__value_.__s + 23) = 2;
      v9 = 21058;
LABEL_27:
      LOWORD(__s.__r_.__value_.__l.__data_) = v9;
      __s.__r_.__value_.__s.__data_[2] = 0;
      break;
    case 8:
      v8 = 1;
      *((_BYTE *)&__s.__r_.__value_.__s + 23) = 1;
      strcpy((char *)&__s, "C");
      break;
    case 9:
      v8 = 4;
      *((_BYTE *)&__s.__r_.__value_.__s + 23) = 4;
      strcpy((char *)&__s, "None");
      break;
    case 0xA:
      LOBYTE(v7) = a2[4];
      std::to_string(&__s, (int)(float)((float)v7 * 1.4118));
      v8 = HIBYTE(__s.__r_.__value_.__r.__words[2]);
      break;
    default:
      v8 = 0;
      *((_BYTE *)&__s.__r_.__value_.__s + 23) = 0;
      __s.__r_.__value_.__s.__data_[0] = 0;
      break;
  }
  if ((v8 & 0x80u) == 0)
    p_s = &__s;
  else
    p_s = (std::string *)__s.__r_.__value_.__r.__words[0];
  if ((v8 & 0x80u) == 0)
    size = v8;
  else
    size = __s.__r_.__value_.__l.__size_;
  std::string::append(this, (const std::string::value_type *)p_s, size);
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__s.__r_.__value_.__l.__data_);
  std::string::append(this, ":", 1uLL);
  switch(a2[1])
  {
    case 0:
      v12 = 2;
      *((_BYTE *)&__s.__r_.__value_.__s + 23) = 2;
      v13 = 28494;
      goto LABEL_53;
    case 1:
      v12 = 1;
      *((_BYTE *)&__s.__r_.__value_.__s + 23) = 1;
      strcpy((char *)&__s, "H");
      goto LABEL_55;
    case 2:
      v12 = 1;
      *((_BYTE *)&__s.__r_.__value_.__s + 23) = 1;
      strcpy((char *)&__s, "V");
      goto LABEL_55;
    case 3:
    case 5:
    case 6:
    case 7:
    case 9:
    case 0xA:
    case 0xB:
    case 0xE:
    case 0xF:
    case 0x11:
    case 0x12:
    case 0x13:
    case 0x14:
    case 0x15:
    case 0x16:
    case 0x17:
    case 0x18:
    case 0x19:
    case 0x1A:
    case 0x1B:
    case 0x1C:
    case 0x1D:
    case 0x1E:
    case 0x1F:
      goto LABEL_44;
    case 4:
      v12 = 4;
      *((_BYTE *)&__s.__r_.__value_.__s + 23) = 4;
      v14 = 1432841793;
      goto LABEL_49;
    case 8:
      v12 = 4;
      *((_BYTE *)&__s.__r_.__value_.__s + 23) = 4;
      v14 = 1147629121;
LABEL_49:
      LODWORD(__s.__r_.__value_.__l.__data_) = v14;
      __s.__r_.__value_.__s.__data_[4] = 0;
      goto LABEL_55;
    case 0xC:
      v12 = 3;
      *((_BYTE *)&__s.__r_.__value_.__s + 23) = 3;
      strcpy((char *)&__s, "Ang");
      goto LABEL_55;
    case 0xD:
      v12 = 6;
      *((_BYTE *)&__s.__r_.__value_.__s + 23) = 6;
      strcpy((char *)&__s, "HOrAng");
      goto LABEL_55;
    case 0x10:
      v12 = 2;
      *((_BYTE *)&__s.__r_.__value_.__s + 23) = 2;
      v13 = 25936;
      goto LABEL_53;
    case 0x20:
      v12 = 5;
      *((_BYTE *)&__s.__r_.__value_.__s + 23) = 5;
      strcpy((char *)&__s, "AutoV");
      goto LABEL_55;
    default:
      if (a2[1] == 128)
      {
        v12 = 2;
        *((_BYTE *)&__s.__r_.__value_.__s + 23) = 2;
        v13 = 26180;
LABEL_53:
        LOWORD(__s.__r_.__value_.__l.__data_) = v13;
        __s.__r_.__value_.__s.__data_[2] = 0;
      }
      else
      {
LABEL_44:
        v12 = 0;
        *((_BYTE *)&__s.__r_.__value_.__s + 23) = 0;
        __s.__r_.__value_.__s.__data_[0] = 0;
      }
LABEL_55:
      std::string::append(this, (const std::string::value_type *)&__s, v12);
      if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__s.__r_.__value_.__l.__data_);
      return;
  }
}

void sub_19F945898(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t md::to_string(uint64_t result, int a2)
{
  unsigned __int8 v2;
  int v3;
  unsigned __int8 v4;
  unsigned __int8 v5;
  unsigned __int8 v6;
  unsigned __int8 v7;
  const char *v8;
  unsigned __int8 v9;
  const char *v10;
  unsigned __int8 v11;
  unsigned __int8 v12;
  const char *v13;
  unsigned __int8 v14;
  unsigned __int8 v15;
  unsigned __int8 v16;
  unsigned __int8 v17;
  unsigned __int8 v18;
  unsigned __int8 v19;
  const char *v20;
  unsigned __int8 v21;
  unsigned __int8 v22;
  const char *v23;
  unsigned __int8 v24;
  unsigned __int8 v25;
  uint64_t v26;
  unsigned __int8 v27;
  unsigned __int8 v28;
  unsigned __int8 v29;
  unsigned __int8 v30;
  unsigned __int8 v31;
  const char *v32;
  unsigned __int8 v33;
  unsigned __int8 v34;
  unsigned __int8 v35;
  unsigned __int8 v36;
  unsigned __int8 v37;
  unsigned __int8 v38;
  float *v39;
  int v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  int v50;
  uint64_t v51;
  int v52;
  uint64_t v53;
  int v54;
  uint64_t v55;
  int v56;
  uint64_t v57;
  int v58;
  uint64_t v59;
  int v60;
  uint64_t v61;
  int v62;
  uint64_t v63;
  int v64;
  uint64_t v65;
  int v66;
  uint64_t v67;
  int v68;
  uint64_t v69;
  int v70;
  uint64_t v71;
  int v72;
  uint64_t v73;
  int v74;
  uint64_t v75;
  int v76;
  uint64_t v77;
  int v78;
  uint64_t v79;
  int v80;
  uint64_t v81;
  int v82;
  uint64_t v83;
  int v84;
  uint64_t v85;
  int v86;
  uint64_t v87;
  int v88;
  uint64_t v89;
  int v90;
  uint64_t v91;
  int v92;
  uint64_t v93;
  int v94;
  uint64_t v95;
  int v96;
  int v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;

  switch(a2)
  {
    case 0:
      if ((v2 & 1) == 0)
      {
        v99 = result;
        result = v99;
        if (v40)
        {
          v41 = operator new();
          mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v41, "VectorKitLabels", 0x5ED09DD50000000FLL);
          result = v99;
        }
      }
      *(_QWORD *)(result + 24) = mdm::Allocator::instance(void)::alloc;
      *(_BYTE *)(result + 23) = 4;
      v3 = 1701736270;
      goto LABEL_10;
    case 1:
      if ((v5 & 1) == 0)
      {
        v101 = result;
        result = v101;
        if (v44)
        {
          v45 = operator new();
          mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v45, "VectorKitLabels", 0x5ED09DD50000000FLL);
          result = v101;
        }
      }
      *(_QWORD *)(result + 24) = mdm::Allocator::instance(void)::alloc;
      *(_BYTE *)(result + 23) = 5;
      strcpy((char *)result, "Point");
      return result;
    case 2:
      if ((v6 & 1) == 0)
      {
        v102 = result;
        result = v102;
        if (v46)
        {
          v47 = operator new();
          mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v47, "VectorKitLabels", 0x5ED09DD50000000FLL);
          result = v102;
        }
      }
      *(_QWORD *)(result + 24) = mdm::Allocator::instance(void)::alloc;
      *(_BYTE *)(result + 23) = 4;
      v3 = 1701734732;
LABEL_10:
      *(_DWORD *)result = v3;
      *(_BYTE *)(result + 4) = 0;
      return result;
    case 3:
      if ((v7 & 1) == 0)
      {
        v103 = result;
        result = v103;
        if (v48)
        {
          v49 = operator new();
          mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v49, "VectorKitLabels", 0x5ED09DD50000000FLL);
          result = v103;
        }
      }
      *(_QWORD *)(result + 24) = mdm::Allocator::instance(void)::alloc;
      v8 = "PhysicalFeature";
      goto LABEL_57;
    case 4:
      if ((v9 & 1) == 0)
      {
        v104 = result;
        result = v104;
        if (v50)
        {
          v51 = operator new();
          mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v51, "VectorKitLabels", 0x5ED09DD50000000FLL);
          result = v104;
        }
      }
      *(_QWORD *)(result + 24) = mdm::Allocator::instance(void)::alloc;
      *(_BYTE *)(result + 23) = 11;
      *(_DWORD *)(result + 7) = 1701734732;
      v10 = "ContourLine";
      goto LABEL_27;
    case 5:
      if ((v11 & 1) == 0)
      {
        v105 = result;
        result = v105;
        if (v52)
        {
          v53 = operator new();
          mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v53, "VectorKitLabels", 0x5ED09DD50000000FLL);
          result = v105;
        }
      }
      *(_QWORD *)(result + 24) = mdm::Allocator::instance(void)::alloc;
      *(_BYTE *)(result + 23) = 11;
      *(_DWORD *)(result + 7) = 1701734732;
      v10 = "OverlayLine";
      goto LABEL_27;
    case 6:
      if ((v12 & 1) == 0)
      {
        v106 = result;
        result = v106;
        if (v54)
        {
          v55 = operator new();
          mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v55, "VectorKitLabels", 0x5ED09DD50000000FLL);
          result = v106;
        }
      }
      *(_QWORD *)(result + 24) = mdm::Allocator::instance(void)::alloc;
      v13 = "ScreenFeature";
      goto LABEL_50;
    case 7:
      if ((v14 & 1) == 0)
      {
        v107 = result;
        result = v107;
        if (v56)
        {
          v57 = operator new();
          mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v57, "VectorKitLabels", 0x5ED09DD50000000FLL);
          result = v107;
        }
      }
      *(_QWORD *)(result + 24) = mdm::Allocator::instance(void)::alloc;
      v8 = "TrafficIncident";
      goto LABEL_57;
    case 8:
      if ((v15 & 1) == 0)
      {
        v108 = result;
        result = v108;
        if (v58)
        {
          v59 = operator new();
          mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v59, "VectorKitLabels", 0x5ED09DD50000000FLL);
          result = v108;
        }
      }
      *(_QWORD *)(result + 24) = mdm::Allocator::instance(void)::alloc;
      *(_BYTE *)(result + 23) = 11;
      *(_DWORD *)(result + 7) = 1701080910;
      v10 = "TransitNode";
      goto LABEL_27;
    case 9:
      if ((v16 & 1) == 0)
      {
        v109 = result;
        result = v109;
        if (v60)
        {
          v61 = operator new();
          mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v61, "VectorKitLabels", 0x5ED09DD50000000FLL);
          result = v109;
        }
      }
      *(_QWORD *)(result + 24) = mdm::Allocator::instance(void)::alloc;
      *(_BYTE *)(result + 23) = 11;
      *(_DWORD *)(result + 7) = 1701734732;
      v10 = "TransitLine";
      goto LABEL_27;
    case 10:
      if ((v17 & 1) == 0)
      {
        v110 = result;
        result = v110;
        if (v62)
        {
          v63 = operator new();
          mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v63, "VectorKitLabels", 0x5ED09DD50000000FLL);
          result = v110;
        }
      }
      *(_QWORD *)(result + 24) = mdm::Allocator::instance(void)::alloc;
      *(_BYTE *)(result + 23) = 11;
      *(_DWORD *)(result + 7) = 1802398028;
      v10 = "TransitLink";
LABEL_27:
      *(_QWORD *)result = *(_QWORD *)v10;
      *(_BYTE *)(result + 11) = 0;
      return result;
    case 11:
      if ((v18 & 1) == 0)
      {
        v111 = result;
        result = v111;
        if (v64)
        {
          v65 = operator new();
          mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v65, "VectorKitLabels", 0x5ED09DD50000000FLL);
          result = v111;
        }
      }
      *(_QWORD *)(result + 24) = mdm::Allocator::instance(void)::alloc;
      *(_BYTE *)(result + 23) = 18;
      strcpy((char *)result, "TransitAccessPoint");
      return result;
    case 12:
      if ((v19 & 1) == 0)
      {
        v112 = result;
        result = v112;
        if (v66)
        {
          v67 = operator new();
          mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v67, "VectorKitLabels", 0x5ED09DD50000000FLL);
          result = v112;
        }
      }
      *(_QWORD *)(result + 24) = mdm::Allocator::instance(void)::alloc;
      *(_BYTE *)(result + 23) = 16;
      v20 = "RouteTransitNode";
      goto LABEL_62;
    case 13:
      if ((v21 & 1) == 0)
      {
        v113 = result;
        result = v113;
        if (v68)
        {
          v69 = operator new();
          mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v69, "VectorKitLabels", 0x5ED09DD50000000FLL);
          result = v113;
        }
      }
      *(_QWORD *)(result + 24) = mdm::Allocator::instance(void)::alloc;
      *(_BYTE *)(result + 23) = 16;
      v20 = "RouteTransitLine";
      goto LABEL_62;
    case 14:
      if ((v22 & 1) == 0)
      {
        v114 = result;
        result = v114;
        if (v70)
        {
          v71 = operator new();
          mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v71, "VectorKitLabels", 0x5ED09DD50000000FLL);
          result = v114;
        }
      }
      *(_QWORD *)(result + 24) = mdm::Allocator::instance(void)::alloc;
      *(_BYTE *)(result + 23) = 9;
      *(_WORD *)(result + 8) = 101;
      v23 = "RouteLine";
      goto LABEL_47;
    case 15:
      if ((v24 & 1) == 0)
      {
        v115 = result;
        result = v115;
        if (v72)
        {
          v73 = operator new();
          mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v73, "VectorKitLabels", 0x5ED09DD50000000FLL);
          result = v115;
        }
      }
      *(_QWORD *)(result + 24) = mdm::Allocator::instance(void)::alloc;
      v13 = "TrafficCamera";
      goto LABEL_50;
    case 16:
      if ((v25 & 1) == 0)
      {
        v116 = result;
        result = v116;
        if (v74)
        {
          v75 = operator new();
          mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v75, "VectorKitLabels", 0x5ED09DD50000000FLL);
          result = v116;
        }
      }
      *(_QWORD *)(result + 24) = mdm::Allocator::instance(void)::alloc;
      *(_BYTE *)(result + 23) = 8;
      v26 = 0x6174456574756F52;
      goto LABEL_44;
    case 17:
      if ((v27 & 1) == 0)
      {
        v117 = result;
        result = v117;
        if (v76)
        {
          v77 = operator new();
          mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v77, "VectorKitLabels", 0x5ED09DD50000000FLL);
          result = v117;
        }
      }
      *(_QWORD *)(result + 24) = mdm::Allocator::instance(void)::alloc;
      *(_BYTE *)(result + 23) = 10;
      strcpy((char *)result, "MuninPoint");
      return result;
    case 18:
      if ((v28 & 1) == 0)
      {
        v118 = result;
        result = v118;
        if (v78)
        {
          v79 = operator new();
          mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v79, "VectorKitLabels", 0x5ED09DD50000000FLL);
          result = v118;
        }
      }
      *(_QWORD *)(result + 24) = mdm::Allocator::instance(void)::alloc;
      *(_BYTE *)(result + 23) = 8;
      v26 = 0x696F506E696E754DLL;
LABEL_44:
      *(_QWORD *)result = v26;
      *(_BYTE *)(result + 8) = 0;
      return result;
    case 19:
      if ((v29 & 1) == 0)
      {
        v119 = result;
        result = v119;
        if (v80)
        {
          v81 = operator new();
          mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v81, "VectorKitLabels", 0x5ED09DD50000000FLL);
          result = v119;
        }
      }
      *(_QWORD *)(result + 24) = mdm::Allocator::instance(void)::alloc;
      *(_BYTE *)(result + 23) = 9;
      *(_WORD *)(result + 8) = 100;
      v23 = "MuninRoad";
LABEL_47:
      *(_QWORD *)result = *(_QWORD *)v23;
      return result;
    case 20:
      if ((v30 & 1) == 0)
      {
        v120 = result;
        result = v120;
        if (v82)
        {
          v83 = operator new();
          mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v83, "VectorKitLabels", 0x5ED09DD50000000FLL);
          result = v120;
        }
      }
      *(_QWORD *)(result + 24) = mdm::Allocator::instance(void)::alloc;
      v13 = "RouteWaypoint";
LABEL_50:
      *(_BYTE *)(result + 23) = 13;
      *(_QWORD *)result = *(_QWORD *)v13;
      *(_QWORD *)(result + 5) = *(_QWORD *)(v13 + 5);
      *(_BYTE *)(result + 13) = 0;
      return result;
    case 21:
      if ((v31 & 1) == 0)
      {
        v121 = result;
        result = v121;
        if (v84)
        {
          v85 = operator new();
          mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v85, "VectorKitLabels", 0x5ED09DD50000000FLL);
          result = v121;
        }
      }
      *(_QWORD *)(result + 24) = mdm::Allocator::instance(void)::alloc;
      *(_BYTE *)(result + 23) = 17;
      *(_WORD *)(result + 16) = 110;
      v32 = "RouteWaypointIcon";
      goto LABEL_65;
    case 22:
      if ((v33 & 1) == 0)
      {
        v122 = result;
        result = v122;
        if (v86)
        {
          v87 = operator new();
          mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v87, "VectorKitLabels", 0x5ED09DD50000000FLL);
          result = v122;
        }
      }
      *(_QWORD *)(result + 24) = mdm::Allocator::instance(void)::alloc;
      *(_BYTE *)(result + 23) = 16;
      v20 = "RouteAnchorpoint";
      goto LABEL_62;
    case 23:
      if ((v34 & 1) == 0)
      {
        v123 = result;
        result = v123;
        if (v88)
        {
          v89 = operator new();
          mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v89, "VectorKitLabels", 0x5ED09DD50000000FLL);
          result = v123;
        }
      }
      *(_QWORD *)(result + 24) = mdm::Allocator::instance(void)::alloc;
      v8 = "RouteAnnotation";
LABEL_57:
      *(_BYTE *)(result + 23) = 15;
      *(_QWORD *)result = *(_QWORD *)v8;
      *(_QWORD *)(result + 7) = *(_QWORD *)(v8 + 7);
      *(_BYTE *)(result + 15) = 0;
      return result;
    case 24:
      if ((v35 & 1) == 0)
      {
        v124 = result;
        result = v124;
        if (v90)
        {
          v91 = operator new();
          mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v91, "VectorKitLabels", 0x5ED09DD50000000FLL);
          result = v124;
        }
      }
      *(_QWORD *)(result + 24) = mdm::Allocator::instance(void)::alloc;
      *(_BYTE *)(result + 23) = 17;
      *(_WORD *)(result + 16) = 114;
      v32 = "ARWalkingManeuver";
      goto LABEL_65;
    case 25:
      if ((v36 & 1) == 0)
      {
        v125 = result;
        result = v125;
        if (v92)
        {
          v93 = operator new();
          mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v93, "VectorKitLabels", 0x5ED09DD50000000FLL);
          result = v125;
        }
      }
      *(_QWORD *)(result + 24) = mdm::Allocator::instance(void)::alloc;
      *(_BYTE *)(result + 23) = 16;
      v20 = "ARWalkingArrival";
LABEL_62:
      *(_OWORD *)result = *(_OWORD *)v20;
      *(_BYTE *)(result + 16) = 0;
      break;
    case 26:
      if ((v37 & 1) == 0)
      {
        v126 = result;
        result = v126;
        if (v94)
        {
          v95 = operator new();
          mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v95, "VectorKitLabels", 0x5ED09DD50000000FLL);
          result = v126;
        }
      }
      *(_QWORD *)(result + 24) = mdm::Allocator::instance(void)::alloc;
      *(_BYTE *)(result + 23) = 17;
      *(_WORD *)(result + 16) = 101;
      v32 = "ARWalkingContinue";
LABEL_65:
      *(_OWORD *)result = *(_OWORD *)v32;
      break;
    case 27:
      v39 = &md::SignedDistanceFieldGenerator::_hypotCache[32438];
      if ((v38 & 1) == 0)
      {
        v127 = result;
        v39 = md::SignedDistanceFieldGenerator::_hypotCache + 129752;
        v97 = v96;
        result = v127;
        if (v97)
        {
          v98 = operator new();
          mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v98, "VectorKitLabels", 0x5ED09DD50000000FLL);
          v39 = md::SignedDistanceFieldGenerator::_hypotCache + 129752;
          result = v127;
        }
      }
      *(_QWORD *)(result + 24) = *((_QWORD *)v39 + 299);
      *(_BYTE *)(result + 23) = 19;
      strcpy((char *)result, "ARWalkingStorefront");
      break;
    default:
      if ((v4 & 1) == 0)
      {
        v100 = result;
        result = v100;
        if (v42)
        {
          v43 = operator new();
          mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v43, "VectorKitLabels", 0x5ED09DD50000000FLL);
          result = v100;
        }
      }
      *(_QWORD *)(result + 24) = mdm::Allocator::instance(void)::alloc;
      *(_BYTE *)(result + 23) = 0;
      *(_BYTE *)result = 0;
      break;
  }
  return result;
}

_QWORD *md::PolylineOverlayLayer<md::Ribbons::PolylineOverlayRibbonDescriptor>::~PolylineOverlayLayer(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;

  *a1 = &off_1E428C920;
  v2 = (std::__shared_weak_count *)a1[26];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)a1[24];
    if (!v5)
      return md::Ribbons::RibbonLayer<md::Ribbons::PolylineOverlayRibbonDescriptor>::~RibbonLayer(a1);
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[24];
    if (!v5)
      return md::Ribbons::RibbonLayer<md::Ribbons::PolylineOverlayRibbonDescriptor>::~RibbonLayer(a1);
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
  return md::Ribbons::RibbonLayer<md::Ribbons::PolylineOverlayRibbonDescriptor>::~RibbonLayer(a1);
}

void md::PolylineOverlayLayer<md::Ribbons::PolylineOverlayRibbonDescriptor>::~PolylineOverlayLayer(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;

  *a1 = &off_1E428C920;
  v2 = (std::__shared_weak_count *)a1[26];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)a1[24];
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[24];
    if (!v5)
      goto LABEL_11;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  md::Ribbons::RibbonLayer<md::Ribbons::PolylineOverlayRibbonDescriptor>::~RibbonLayer(a1);
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *md::Ribbons::RibbonLayer<md::Ribbons::PolylineOverlayRibbonDescriptor>::~RibbonLayer(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;

  *a1 = &off_1E42AF448;
  v2 = (_QWORD *)a1[1];
  v3 = (_QWORD *)a1[2];
  while (v2 != v3)
  {
    if (*v2)
      (*(void (**)(_QWORD))(*(_QWORD *)*v2 + 8))(*v2);
    ++v2;
  }
  v4 = (_QWORD *)a1[4];
  v5 = (_QWORD *)a1[5];
  while (v4 != v5)
  {
    if (*v4)
      (*(void (**)(_QWORD))(*(_QWORD *)*v4 + 8))(*v4);
    ++v4;
  }
  v6 = a1[18];
  a1[18] = 0;
  if (v6)
  {
    v7 = *(_QWORD *)(v6 + 2584);
    if (v7)
      MEMORY[0x1A1AF4DE8](v7, 0x1000C8000313F17);
    MEMORY[0x1A1AF4E00](v6, 0x1020C4007FF0C4BLL);
  }
  v8 = (void *)a1[4];
  if (v8)
  {
    a1[5] = v8;
    operator delete(v8);
  }
  v9 = (void *)a1[1];
  if (v9)
  {
    a1[2] = v9;
    operator delete(v9);
  }
  return a1;
}

void md::Ribbons::RibbonLayer<md::Ribbons::PolylineOverlayRibbonDescriptor>::~RibbonLayer(_QWORD *a1)
{
  md::Ribbons::RibbonLayer<md::Ribbons::PolylineOverlayRibbonDescriptor>::~RibbonLayer(a1);
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *md::RibbonLayer<md::Ribbons::PolylineOverlayRibbonDescriptor>::~RibbonLayer(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;

  *a1 = &off_1E428C920;
  v2 = (std::__shared_weak_count *)a1[26];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)a1[24];
    if (!v5)
      return md::Ribbons::RibbonLayer<md::Ribbons::PolylineOverlayRibbonDescriptor>::~RibbonLayer(a1);
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[24];
    if (!v5)
      return md::Ribbons::RibbonLayer<md::Ribbons::PolylineOverlayRibbonDescriptor>::~RibbonLayer(a1);
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
  return md::Ribbons::RibbonLayer<md::Ribbons::PolylineOverlayRibbonDescriptor>::~RibbonLayer(a1);
}

void md::RibbonLayer<md::Ribbons::PolylineOverlayRibbonDescriptor>::~RibbonLayer(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;

  *a1 = &off_1E428C920;
  v2 = (std::__shared_weak_count *)a1[26];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)a1[24];
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[24];
    if (!v5)
      goto LABEL_11;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  md::Ribbons::RibbonLayer<md::Ribbons::PolylineOverlayRibbonDescriptor>::~RibbonLayer(a1);
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *md::PolylineOverlayLayer<md::Ribbons::GradientPolylineOverlayRibbonDescriptor>::~PolylineOverlayLayer(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;

  *a1 = &off_1E428C960;
  v2 = (std::__shared_weak_count *)a1[26];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)a1[24];
    if (!v5)
      return md::Ribbons::RibbonLayer<md::Ribbons::GradientPolylineOverlayRibbonDescriptor>::~RibbonLayer(a1);
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[24];
    if (!v5)
      return md::Ribbons::RibbonLayer<md::Ribbons::GradientPolylineOverlayRibbonDescriptor>::~RibbonLayer(a1);
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
  return md::Ribbons::RibbonLayer<md::Ribbons::GradientPolylineOverlayRibbonDescriptor>::~RibbonLayer(a1);
}

void md::PolylineOverlayLayer<md::Ribbons::GradientPolylineOverlayRibbonDescriptor>::~PolylineOverlayLayer(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;

  *a1 = &off_1E428C960;
  v2 = (std::__shared_weak_count *)a1[26];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)a1[24];
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[24];
    if (!v5)
      goto LABEL_11;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  md::Ribbons::RibbonLayer<md::Ribbons::GradientPolylineOverlayRibbonDescriptor>::~RibbonLayer(a1);
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *md::Ribbons::RibbonLayer<md::Ribbons::GradientPolylineOverlayRibbonDescriptor>::~RibbonLayer(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;

  *a1 = &off_1E42AF488;
  v2 = (_QWORD *)a1[1];
  v3 = (_QWORD *)a1[2];
  while (v2 != v3)
  {
    if (*v2)
      (*(void (**)(_QWORD))(*(_QWORD *)*v2 + 8))(*v2);
    ++v2;
  }
  v4 = (_QWORD *)a1[4];
  v5 = (_QWORD *)a1[5];
  while (v4 != v5)
  {
    if (*v4)
      (*(void (**)(_QWORD))(*(_QWORD *)*v4 + 8))(*v4);
    ++v4;
  }
  v6 = a1[18];
  a1[18] = 0;
  if (v6)
  {
    v7 = *(_QWORD *)(v6 + 2584);
    if (v7)
      MEMORY[0x1A1AF4DE8](v7, 0x1000C8000313F17);
    MEMORY[0x1A1AF4E00](v6, 0x1020C4007FF0C4BLL);
  }
  v8 = (void *)a1[4];
  if (v8)
  {
    a1[5] = v8;
    operator delete(v8);
  }
  v9 = (void *)a1[1];
  if (v9)
  {
    a1[2] = v9;
    operator delete(v9);
  }
  return a1;
}

void md::Ribbons::RibbonLayer<md::Ribbons::GradientPolylineOverlayRibbonDescriptor>::~RibbonLayer(_QWORD *a1)
{
  md::Ribbons::RibbonLayer<md::Ribbons::GradientPolylineOverlayRibbonDescriptor>::~RibbonLayer(a1);
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *md::RibbonLayer<md::Ribbons::GradientPolylineOverlayRibbonDescriptor>::~RibbonLayer(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;

  *a1 = &off_1E428C960;
  v2 = (std::__shared_weak_count *)a1[26];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)a1[24];
    if (!v5)
      return md::Ribbons::RibbonLayer<md::Ribbons::GradientPolylineOverlayRibbonDescriptor>::~RibbonLayer(a1);
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[24];
    if (!v5)
      return md::Ribbons::RibbonLayer<md::Ribbons::GradientPolylineOverlayRibbonDescriptor>::~RibbonLayer(a1);
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
  return md::Ribbons::RibbonLayer<md::Ribbons::GradientPolylineOverlayRibbonDescriptor>::~RibbonLayer(a1);
}

void md::RibbonLayer<md::Ribbons::GradientPolylineOverlayRibbonDescriptor>::~RibbonLayer(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;

  *a1 = &off_1E428C960;
  v2 = (std::__shared_weak_count *)a1[26];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)a1[24];
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[24];
    if (!v5)
      goto LABEL_11;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  md::Ribbons::RibbonLayer<md::Ribbons::GradientPolylineOverlayRibbonDescriptor>::~RibbonLayer(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t md::RibbonLayer<md::Ribbons::PolylineOverlayRibbonDescriptor>::RibbonLayer(_QWORD *a1, uint64_t a2, uint64_t *a3, uint64_t a4, _QWORD *a5, char *a6)
{
  uint64_t *v6;
  uint64_t v7;
  _QWORD *v8;
  char *v9;
  unsigned __int8 v10;
  unsigned __int8 v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  _OWORD *v36;
  __int128 *v37;
  uint64_t v38;
  __int128 v39;
  __int128 v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  void (***v44)(_QWORD);
  void (***v45)(_QWORD);
  unsigned __int8 v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  std::__shared_weak_count *v50;
  unint64_t *p_shared_owners;
  unint64_t v52;
  __int128 v53;
  int64x2_t v54;
  unsigned __int8 v55;
  _QWORD *v56;
  uint64_t v57;
  unint64_t *v58;
  unint64_t v59;
  void *v60;
  char v61;
  uint64_t v62;
  unint64_t *v63;
  unint64_t v64;
  std::__shared_weak_count *v65;
  unint64_t *v66;
  unint64_t v67;
  uint64_t v68;
  unint64_t *v69;
  unint64_t v70;
  std::__shared_weak_count *v71;
  uint64_t v72;
  unint64_t v73;
  unint64_t v74;
  char *v75;
  char *v76;
  char *v77;
  unint64_t v78;
  char *v79;
  uint64_t v80;
  char *v81;
  char *v82;
  uint64_t v83;
  __int128 v84;
  uint64_t v85;
  unint64_t *v86;
  unint64_t v87;
  uint64_t *v88;
  char *v89;
  uint64_t *v90;
  uint64_t v91;
  unsigned __int8 v92;
  uint64_t *v93;
  uint64_t v94;
  char *v95;
  int64_t v96;
  uint64_t v97;
  unint64_t v98;
  unint64_t v99;
  unint64_t v100;
  unint64_t v101;
  char *v102;
  uint64_t *v103;
  int64_t v104;
  unint64_t v105;
  uint64_t *v106;
  uint64_t v107;
  unint64_t v108;
  unint64_t v109;
  unint64_t v110;
  unint64_t v111;
  char *v112;
  uint64_t *v113;
  uint64_t v114;
  __int128 v115;
  __int128 v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  _QWORD *v120;
  _QWORD *v121;
  void (***v122)(_QWORD, uint64_t);
  void (***v123)(_QWORD, uint64_t);
  unsigned __int8 v124;
  uint64_t v125;
  uint64_t *v126;
  uint64_t v127;
  void (***v128)(_QWORD, uint64_t);
  void (***v129)(_QWORD, uint64_t);
  unsigned __int8 v130;
  uint64_t v131;
  uint64_t *v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  unsigned __int8 v136;
  uint64_t v137;
  uint64_t v138;
  char *v139;
  int64_t v140;
  uint64_t v141;
  unint64_t v142;
  unint64_t v143;
  unint64_t v144;
  unint64_t v145;
  char *v146;
  uint64_t *v147;
  int64_t v148;
  unint64_t v149;
  uint64_t *v150;
  uint64_t v151;
  unint64_t v152;
  unint64_t v153;
  unint64_t v154;
  unint64_t v155;
  char *v156;
  uint64_t *v157;
  uint64_t v158;
  __int128 v159;
  __int128 v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  _QWORD *v164;
  uint64_t *v165;
  _QWORD *v166;
  malloc_zone_t *zone;
  void (***v168)(_QWORD, uint64_t);
  void (***v169)(_QWORD, uint64_t);
  unsigned __int8 v170;
  uint64_t v171;
  geo::read_write_lock *v172;
  const char *v173;
  _QWORD *v174;
  _QWORD *v175;
  uint64_t v176;
  void (***v177)(_QWORD, uint64_t);
  void (***v178)(_QWORD, uint64_t);
  unsigned __int8 v179;
  uint64_t v180;
  float64x2_t v181;
  float32x2_t v182;
  float32x2_t v183;
  _QWORD *v184;
  unint64_t v185;
  _QWORD *v186;
  uint64_t v187;
  uint64_t v188;
  unint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  _QWORD *v193;
  uint64_t v194;
  _QWORD *v195;
  unint64_t v196;
  unint64_t v197;
  unint64_t v198;
  BOOL v199;
  unint64_t v200;
  uint64_t v201;
  _QWORD *v202;
  _OWORD *v203;
  __int128 *v204;
  uint64_t v205;
  __int128 v206;
  __int128 v207;
  uint64_t v208;
  _QWORD *v209;
  void (***v210)(_QWORD);
  void (***v211)(_QWORD);
  unsigned __int8 v212;
  uint64_t v213;
  unsigned __int8 v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  int8x16_t *v220;
  unint64_t v221;
  uint64_t v222;
  uint64_t *v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t *v226;
  unint64_t v227;
  _QWORD *v228;
  uint64_t v229;
  char *v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  unint64_t v234;
  char *v235;
  char *v236;
  char *v237;
  char *v238;
  char *v239;
  unint64_t v240;
  uint64_t v242;
  char *v243;
  char *v244;
  uint64_t v245;
  __int128 v246;
  __int128 v247;
  uint64_t v248;
  char *v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t *v253;
  _QWORD *v254;
  _QWORD *v255;
  void (***v256)(_QWORD, uint64_t);
  void (***v257)(_QWORD, uint64_t);
  unsigned __int8 v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t *v261;
  void (***v262)(_QWORD, uint64_t);
  void (***v263)(_QWORD, uint64_t);
  unsigned __int8 v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t *v269;
  void (***v270)(_QWORD, uint64_t);
  void (***v271)(_QWORD, uint64_t);
  unsigned __int8 v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  int v276;
  uint64_t v277;
  int v278;
  char v279;
  int64_t v280;
  _QWORD *v281;
  char *v282;
  _QWORD *v283;
  _QWORD *v284;
  _QWORD *v285;
  _QWORD **v286;
  _QWORD **v287;
  char *v288;
  _QWORD *v289;
  uint64_t *v290;
  uint64_t *v291;
  uint64_t v292;
  unint64_t v293;
  uint64_t v294;
  _QWORD *v295;
  uint64_t v296;
  unint64_t v297;
  uint64_t v298;
  float v299;
  float *v300;
  float v301;
  uint64_t v302;
  float v303;
  float v304;
  float v305;
  float v306;
  unint64_t v307;
  float v308;
  float v309;
  float v310;
  uint64_t v311;
  int v312;
  double v313;
  float *v314;
  uint64_t v315;
  uint64_t v316;
  float v317;
  unint64_t v318;
  float v319;
  float v320;
  uint64_t v321;
  float *v322;
  float v323;
  float v324;
  float *v325;
  uint64_t v326;
  float v327;
  float v328;
  float v329;
  float v330;
  float v331;
  float v332;
  double v333;
  double v334;
  float v335;
  int v336;
  float v337;
  _QWORD *v338;
  uint64_t v339;
  char *v340;
  uint64_t v341;
  uint64_t v342;
  unint64_t v343;
  char *v344;
  unint64_t v345;
  unint64_t v346;
  unint64_t v347;
  _BYTE *v348;
  _QWORD *v349;
  char *v350;
  unint64_t v351;
  char *v352;
  uint64_t v353;
  uint64_t v354;
  _OWORD *v355;
  char *v356;
  uint64_t v357;
  __int128 v358;
  gdc::GlobeTileGrid *v359;
  char *v360;
  gdc::GlobeTileGrid *v361;
  char *v362;
  gdc::GlobeTileGrid *v363;
  uint64_t v364;
  char *v365;
  uint64_t *v366;
  uint64_t *v367;
  uint64_t v368;
  uint64_t v369;
  unint64_t v370;
  uint64_t v371;
  uint64_t v372;
  gdc::GlobeTileGrid *v373;
  uint64_t v374;
  float *v375;
  float v376;
  unsigned int v377;
  float v378;
  unsigned int v379;
  float *v380;
  float v381;
  float v382;
  char *v383;
  unint64_t v384;
  unint64_t v385;
  uint64_t v386;
  uint64_t v387;
  unint64_t v388;
  std::__shared_weak_count *v389;
  unint64_t *v390;
  std::__shared_count v391;
  unsigned __int8 v392;
  std::__shared_weak_count *v393;
  unint64_t *v394;
  std::__shared_weak_count *v395;
  std::__shared_count v396;
  unsigned __int8 v397;
  uint64_t v398;
  unint64_t v399;
  unint64_t v400;
  unsigned __int8 v401;
  uint64_t v402;
  unsigned __int8 v403;
  uint64_t v404;
  unint64_t v405;
  std::__shared_weak_count *v406;
  unint64_t *v407;
  unint64_t v408;
  unint64_t v409;
  std::__shared_weak_count *v410;
  unint64_t *v411;
  unint64_t v412;
  unint64_t v413;
  unint64_t v414;
  unint64_t v415;
  uint64_t *v416;
  _QWORD *v417;
  uint64_t *v418;
  uint64_t v419;
  uint64_t v420;
  unint64_t v421;
  uint64_t v422;
  unint64_t v423;
  _BYTE *v424;
  uint64_t *v425;
  unint64_t v426;
  uint64_t v427;
  _OWORD *v428;
  uint64_t *v429;
  uint64_t v430;
  __int128 v431;
  uint64_t v432;
  uint64_t v433;
  unint64_t v434;
  uint64_t v435;
  uint64_t v436;
  uint64_t v437;
  uint64_t v438;
  uint64_t v439;
  uint64_t *v440;
  uint64_t v441;
  uint64_t v442;
  uint64_t v443;
  uint64_t v444;
  uint64_t v445;
  uint64_t v446;
  _QWORD *v447;
  _QWORD *v448;
  uint64_t v449;
  _QWORD *v450;
  uint64_t v451;
  uint64_t v452;
  uint64_t v453;
  std::__shared_weak_count *v454;
  unint64_t *v455;
  unint64_t v456;
  std::__shared_weak_count *v457;
  unint64_t *v458;
  unint64_t v459;
  _QWORD *v460;
  int v461;
  uint64_t v462;
  int v463;
  uint64_t v464;
  unsigned __int8 v465;
  int v466;
  uint64_t v467;
  geo::read_write_lock *v468;
  const char *v469;
  malloc_zone_t *v470;
  int v471;
  uint64_t v472;
  uint64_t v473;
  geo::read_write_lock *v474;
  const char *v475;
  malloc_zone_t *v476;
  uint64_t v477;
  unint64_t *v478;
  unint64_t v479;
  uint64_t v480;
  unint64_t *v481;
  unint64_t v482;
  uint64_t v483;
  float v484;
  uint64_t **v485;
  uint64_t v486;
  uint64_t *v487;
  uint64_t v488;
  uint64_t v489;
  uint64_t v490;
  uint64_t v491;
  uint64_t v492;
  uint64_t v493;
  __int128 v494;
  unint64_t v495;
  unint64_t v496;
  unint64_t v497;
  uint64_t v498;
  uint64_t v499;
  uint64_t v500;
  uint64_t v501;
  uint64_t v502;
  __int128 v503;
  uint64_t v504;
  uint64_t v505;
  uint64_t *v506;
  uint64_t *v507;
  void *v508;
  uint64_t v509;
  uint64_t v510;
  uint64_t v511;
  _QWORD *v512;
  uint64_t v513;
  int8x16_t v514;
  unint64_t v515;
  char *v516;
  int32x2_t v517;
  unint64_t v518;
  unint64_t v519;
  float v520;
  float32x2_t v521;
  int8x16_t v522;
  _OWORD *v523;
  float32x4_t v524;
  unint64_t v525;
  float32x4_t v526;
  const float *v527;
  int8x16_t v528;
  int32x4_t v529;
  float32x4_t v530;
  float32x4_t v531;
  float32x4_t v532;
  float32x4_t v533;
  float32x4_t v534;
  float32x4_t v535;
  unint64_t v536;
  float32x2_t *v537;
  float32x2_t v538;
  float32x2_t v539;
  double v540;
  float v541;
  float v542;
  float *v543;
  float v544;
  uint64_t v545;
  float v546;
  float v547;
  float v548;
  float v549;
  float v550;
  float v551;
  float v552;
  int v553;
  char *v554;
  __int128 *v555;
  unsigned int v556;
  float *v557;
  unint64_t v558;
  uint64_t v559;
  float v560;
  int32x2_t v561;
  float v562;
  float v563;
  float *v564;
  float v565;
  float v566;
  float *v567;
  unint64_t v568;
  float v569;
  float32x2_t v570;
  int32x2_t v571;
  float v572;
  float v573;
  float v574;
  float v575;
  unsigned int v576;
  float *v577;
  float v578;
  float v579;
  float v580;
  float v581;
  float v582;
  float v583;
  float v584;
  float v585;
  int v586;
  uint64_t v587;
  float v588;
  float v589;
  float v590;
  float v591;
  double v592;
  float v593;
  float v594;
  float v595;
  int v596;
  long double v597;
  float v598;
  unint64_t v599;
  float v601;
  float v607;
  float v608;
  float v609;
  float v613;
  float v614;
  float v615;
  float v618;
  float v622;
  float v623;
  float v624;
  float v625;
  float v626;
  float v627;
  float v628;
  float v629;
  float v630;
  unsigned int v631;
  unsigned int v632;
  float v633;
  int8x16_t v634;
  _BYTE *v635;
  _BYTE *v636;
  uint64_t i;
  __float2 v638;
  unsigned int v639;
  unsigned int v640;
  __int32 v641;
  float *v642;
  float *v643;
  float v644;
  float v645;
  float v646;
  float v647;
  float v648;
  float v649;
  uint64_t v650;
  float32x4_t v651;
  float32x4_t v652;
  float32x4_t v653;
  float32x4_t v654;
  char *v655;
  _BYTE *v656;
  unsigned int v657;
  int16x8_t v658;
  unint64_t v659;
  unint64_t v660;
  unint64_t v661;
  uint64_t v662;
  unint64_t v663;
  uint64_t v664;
  _WORD *v665;
  uint64_t v666;
  unint64_t v667;
  unint64_t v668;
  _WORD *v669;
  __int16 v670;
  unint64_t v671;
  __int16 v672;
  __int16 v673;
  uint64_t v674;
  unint64_t v675;
  unint64_t v676;
  _WORD *v677;
  unint64_t v678;
  int64x2_t v679;
  int64x2_t v680;
  int64x2_t v681;
  int64x2_t v682;
  int64x2_t v683;
  int64x2_t v684;
  __int16 *v685;
  unint64_t v686;
  unint64_t v687;
  unint64_t v688;
  unsigned __int8 v689;
  _QWORD *v690;
  uint64_t *v691;
  _QWORD *v692;
  _QWORD *v693;
  void (***v694)(_QWORD, _QWORD *);
  void (***v695)(_QWORD, _QWORD *);
  unsigned __int8 v696;
  uint64_t v697;
  unint64_t v698;
  unint64_t v699;
  _QWORD *v700;
  int v701;
  int v702;
  unint64_t v703;
  unint64_t v704;
  unint64_t v705;
  unint64_t v706;
  _QWORD *v707;
  int v708;
  int v709;
  unint64_t v710;
  unint64_t v711;
  uint64_t v712;
  uint64_t result;
  uint64_t v714;
  uint64_t v715;
  uint64_t **v716;
  _QWORD *v718;
  uint64_t **v719;
  uint64_t *v720;
  uint64_t *v721;
  uint64_t v722;
  _WORD *v724;
  unint64_t v725;
  QuadTile *v726;
  float v727;
  void **v728;
  float v729;
  _QWORD *v730;
  float v731;
  _QWORD *v734;
  gdc::GlobeTileGrid **v735;
  char *__p;
  char *__pa;
  _QWORD **v738;
  char *v740;
  uint64_t v741;
  _WORD *v742;
  char *v743;
  _QWORD *v744;
  char *v745;
  float v746;
  uint64_t *v747;
  _QWORD *v748;
  float v749;
  float v750;
  char *v751;
  char *v752;
  unint64_t v753;
  float v754;
  uint64_t v755;
  char *v756;
  _QWORD *v757;
  std::vector<unsigned int>::pointer begin;
  uint64_t *v759;
  uint64_t *v760;
  float v761;
  float v762;
  uint64_t *v763;
  uint64_t v764;
  float v765;
  float v766;
  uint64_t *v767;
  std::__shared_weak_count *v768;
  float v769;
  int32x2_t v770;
  __int32 v771;
  unint64_t v772;
  uint64_t *v773;
  unint64_t v774;
  uint64_t *v775;
  char *v776;
  float v777;
  unint64_t v778;
  int32x2_t v779;
  float32x2_t v780;
  std::vector<unsigned int> v781;
  void *v782[3];
  __int128 v783;
  unint64_t v784;
  unint64_t v785;
  __int16 v786;
  uint64_t v787;
  __int128 v788;
  unint64_t v789;
  unint64_t v790;
  __int16 v791;
  uint64_t v792;
  void *v793;
  std::__shared_weak_count *v794;
  float32x4_t v795;
  float v796;
  float v797;
  int8x16_t v798;
  uint64_t v799;
  char v800;
  char v801;
  unint64_t v802;
  uint64_t v803;
  void *v804;
  uint64_t v805;
  __int128 v806;
  __int128 v807;
  _BYTE v808[32];
  __int128 v809;
  __int128 v810;
  uint64_t v811;
  uint64_t v812;
  int16x8x2_t v813;
  float32x4x2_t v814;

  v8 = a1;
  v812 = *MEMORY[0x1E0C80C00];
  v747 = a3;
  v9 = 0;
  if (!a3)
  {
    v751 = 0;
    goto LABEL_356;
  }
  v751 = 0;
  v743 = 0;
  v7 = 1065353216;
  while (2)
  {
    v805 = 0;
    v804 = 0;
    {
      v274 = operator new();
      mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v274, "VectorKitLabels", 0x5ED09DD50000000FLL);
    }
    __p = v9;
    v806 = (unint64_t)mdm::Allocator::instance(void)::alloc;
    {
      v275 = operator new();
      mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v275, "VectorKitLabels", 0x5ED09DD50000000FLL);
    }
    v807 = (unint64_t)mdm::Allocator::instance(void)::alloc;
    *(_DWORD *)v808 = 1065353216;
    v12 = (uint64_t *)v747[6];
    v13 = (uint64_t *)v747[7];
    while (v12 != v13)
    {
      LODWORD(v782[0]) = 0;
      LODWORD(v782[0]) = ggl::CullingGrid::intersectedCellsForRibbon(*(_QWORD *)(*v12 + 88), *(float **)(*v12 + 72), 0);
      *(_QWORD *)&v788 = v782;
      v14 = std::__hash_table<std::__hash_value_type<unsigned int,std::vector<std::unique_ptr<md::PolylineOverlayRibbon,mdm::TypeDeleter<md::PolylineOverlayRibbon>>,geo::StdAllocator<std::unique_ptr<md::PolylineOverlayRibbon,mdm::TypeDeleter<md::PolylineOverlayRibbon>>,mdm::Allocator>>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::vector<std::unique_ptr<md::PolylineOverlayRibbon,mdm::TypeDeleter<md::PolylineOverlayRibbon>>,geo::StdAllocator<std::unique_ptr<md::PolylineOverlayRibbon,mdm::TypeDeleter<md::PolylineOverlayRibbon>>,mdm::Allocator>>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::vector<std::unique_ptr<md::PolylineOverlayRibbon,mdm::TypeDeleter<md::PolylineOverlayRibbon>>,geo::StdAllocator<std::unique_ptr<md::PolylineOverlayRibbon,mdm::TypeDeleter<md::PolylineOverlayRibbon>>,mdm::Allocator>>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,geo::StdAllocator<std::__hash_value_type<unsigned int,std::vector<std::unique_ptr<md::PolylineOverlayRibbon,mdm::TypeDeleter<md::PolylineOverlayRibbon>>,geo::StdAllocator<std::unique_ptr<md::PolylineOverlayRibbon,mdm::TypeDeleter<md::PolylineOverlayRibbon>>,mdm::Allocator>>>,mdm::Allocator>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>((float *)&v804, v782[0], (_DWORD **)&v788);
      v15 = v14;
      v16 = *(_QWORD **)(v14 + 32);
      v17 = *(_QWORD *)(v14 + 40);
      if ((unint64_t)v16 < v17)
      {
        if (v16)
        {
          v18 = *v12;
          *v12 = 0;
          *v16 = v18;
        }
        v6 = v16 + 1;
        goto LABEL_9;
      }
      v19 = *(_QWORD *)(v14 + 24);
      v20 = ((uint64_t)v16 - v19) >> 3;
      v21 = v20 + 1;
      if ((unint64_t)(v20 + 1) >> 61)
        abort();
      v22 = v17 - v19;
      if (v22 >> 2 > v21)
        v21 = v22 >> 2;
      if ((unint64_t)v22 >= 0x7FFFFFFFFFFFFFF8)
        v23 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v23 = v21;
      if (v23)
      {
        v24 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v14 + 48) + 16))(*(_QWORD *)(v14 + 48), 8 * v23, 8);
        v25 = (_QWORD *)(v24 + 8 * v20);
        v26 = v24 + 8 * v23;
        if (v24)
        {
          v27 = *v12;
          *v12 = 0;
          *v25 = v27;
        }
      }
      else
      {
        v26 = 0;
        v25 = (_QWORD *)(8 * v20);
      }
      v6 = v25 + 1;
      v28 = *(_QWORD **)(v15 + 24);
      v29 = *(_QWORD *)(v15 + 32);
      if ((_QWORD *)v29 == v28)
      {
        *(_QWORD *)(v15 + 24) = v25;
        *(_QWORD *)(v15 + 32) = v6;
        v43 = *(_QWORD *)(v15 + 40);
        *(_QWORD *)(v15 + 40) = v26;
        if (!v29)
          goto LABEL_9;
LABEL_47:
        (*(void (**)(_QWORD, unint64_t, unint64_t))(**(_QWORD **)(v15 + 48) + 40))(*(_QWORD *)(v15 + 48), v29, v43 - v29);
        goto LABEL_9;
      }
      v30 = v29 - (_QWORD)v28 - 8;
      if (v30 > 0x47
        && ((v31 = v30 >> 3, v29 - 8 * v31 - 8 < (unint64_t)v25)
          ? (_CF = (unint64_t)&v25[-v31 - 1] >= v29)
          : (_CF = 1),
            _CF))
      {
        v33 = v31 + 1;
        v34 = (v31 + 1) & 0x3FFFFFFFFFFFFFFCLL;
        v35 = (_QWORD *)(v29 - 8 * v34);
        v36 = v25 - 2;
        v37 = (__int128 *)(v29 - 32);
        v38 = v34;
        do
        {
          v40 = *v37;
          v39 = v37[1];
          *v37 = 0uLL;
          v37[1] = 0uLL;
          v37 -= 2;
          *(v36 - 1) = v40;
          *v36 = v39;
          v36 -= 2;
          v38 -= 4;
        }
        while (v38);
        v25 -= v34;
        if (v33 == v34)
          goto LABEL_37;
      }
      else
      {
        v35 = *(_QWORD **)(v15 + 32);
      }
      do
      {
        v41 = *--v35;
        *v35 = 0;
        *--v25 = v41;
      }
      while (v35 != v28);
LABEL_37:
      v29 = *(_QWORD *)(v15 + 24);
      v42 = *(_QWORD **)(v15 + 32);
      *(_QWORD *)(v15 + 24) = v25;
      *(_QWORD *)(v15 + 32) = v6;
      v43 = *(_QWORD *)(v15 + 40);
      *(_QWORD *)(v15 + 40) = v26;
      while (v42 != (_QWORD *)v29)
      {
        v45 = (void (***)(_QWORD))*--v42;
        v44 = v45;
        *v42 = 0;
        if (v45)
        {
          (**v44)(v44);
          {
            v47 = operator new();
            mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v47, "VectorKitLabels", 0x5ED09DD50000000FLL);
          }
          (*(void (**)(uint64_t, void (***)(_QWORD), uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc
                                                                                  + 40))(mdm::Allocator::instance(void)::alloc, v44, 136);
        }
      }
      v8 = a1;
      if (v29)
        goto LABEL_47;
LABEL_9:
      *(_QWORD *)(v15 + 32) = v6;
      ++v12;
    }
    v48 = operator new();
    v49 = v48;
    v50 = *(std::__shared_weak_count **)(a4 + 8);
    v793 = *(void **)a4;
    v794 = v50;
    if (v50)
    {
      p_shared_owners = (unint64_t *)&v50->__shared_owners_;
      do
        v52 = __ldxr(p_shared_owners);
      while (__stxr(v52 + 1, p_shared_owners));
    }
    *(_QWORD *)v48 = &off_1E42AF208;
    *(_QWORD *)(v48 + 8) = 0;
    *(_QWORD *)(v48 + 64) = 0;
    *(_QWORD *)(v48 + 40) = 0;
    *(_QWORD *)(v48 + 48) = 0;
    *(_QWORD *)(v48 + 32) = "";
    *(_DWORD *)(v48 + 56) = 0;
    *(_DWORD *)(v48 + 72) = 1065353216;
    v53 = 0uLL;
    *(_OWORD *)(v48 + 80) = 0u;
    *(_OWORD *)(v48 + 96) = 0u;
    v54 = vdupq_n_s64(1uLL);
    *(int64x2_t *)(v48 + 112) = v54;
    *(_QWORD *)(v48 + 128) = 0;
    *(_QWORD *)(v48 + 16) = &off_1E42AF548;
    *(_BYTE *)(v48 + 136) = 1;
    *(_QWORD *)(v48 + 192) = 0;
    *(_QWORD *)(v48 + 168) = 0;
    *(_QWORD *)(v48 + 176) = 0;
    *(_QWORD *)(v48 + 160) = "";
    *(_DWORD *)(v48 + 184) = 0;
    *(_DWORD *)(v48 + 200) = 1065353216;
    *(_OWORD *)(v48 + 208) = 0u;
    *(_OWORD *)(v48 + 224) = 0u;
    *(int64x2_t *)(v48 + 240) = v54;
    *(_QWORD *)(v48 + 256) = 0;
    *(_QWORD *)(v48 + 144) = &off_1E42AF548;
    *(_BYTE *)(v48 + 264) = 1;
    *(_QWORD *)(v48 + 320) = 0;
    *(_DWORD *)(v48 + 312) = 0;
    *(_QWORD *)(v48 + 288) = "";
    *(_QWORD *)(v48 + 296) = 0;
    *(_QWORD *)(v48 + 304) = 0;
    *(_DWORD *)(v48 + 328) = 1065353216;
    *(_OWORD *)(v48 + 336) = 0u;
    *(_OWORD *)(v48 + 352) = 0u;
    *(int64x2_t *)(v48 + 368) = v54;
    *(_QWORD *)(v48 + 384) = 0;
    *(_QWORD *)(v48 + 272) = &off_1E42AF548;
    *(_BYTE *)(v48 + 392) = 1;
    *(_QWORD *)(v48 + 448) = 0;
    *(_QWORD *)(v48 + 424) = 0;
    *(_QWORD *)(v48 + 432) = 0;
    *(_QWORD *)(v48 + 416) = "";
    *(_DWORD *)(v48 + 440) = 0;
    *(_DWORD *)(v48 + 456) = 1065353216;
    *(_OWORD *)(v48 + 464) = 0u;
    *(_OWORD *)(v48 + 480) = 0u;
    *(int64x2_t *)(v48 + 496) = v54;
    *(_QWORD *)(v48 + 512) = 0;
    *(_QWORD *)(v48 + 400) = &off_1E42AF548;
    *(_BYTE *)(v48 + 520) = 1;
    *(_QWORD *)(v48 + 544) = "";
    *(_QWORD *)(v48 + 576) = 0;
    *(_DWORD *)(v48 + 568) = 0;
    *(_QWORD *)(v48 + 552) = 0;
    *(_QWORD *)(v48 + 560) = 0;
    *(_DWORD *)(v48 + 584) = 1065353216;
    *(_OWORD *)(v48 + 592) = 0u;
    *(_OWORD *)(v48 + 608) = 0u;
    *(int64x2_t *)(v48 + 624) = v54;
    *(_QWORD *)(v48 + 640) = 0;
    *(_QWORD *)(v48 + 528) = &off_1E42AF548;
    *(_BYTE *)(v48 + 648) = 1;
    *(_QWORD *)(v48 + 672) = "";
    *(_QWORD *)(v48 + 704) = 0;
    *(_QWORD *)(v48 + 688) = 0;
    *(_QWORD *)(v48 + 680) = 0;
    *(_DWORD *)(v48 + 696) = 0;
    *(_DWORD *)(v48 + 712) = 1065353216;
    *(_OWORD *)(v48 + 720) = 0u;
    *(_OWORD *)(v48 + 736) = 0u;
    *(int64x2_t *)(v48 + 752) = v54;
    *(_QWORD *)(v48 + 768) = 0;
    *(_QWORD *)(v48 + 656) = &off_1E42AF548;
    *(_BYTE *)(v48 + 776) = 1;
    *(_QWORD *)(v48 + 800) = "";
    *(_QWORD *)(v48 + 832) = 0;
    *(_QWORD *)(v48 + 816) = 0;
    *(_QWORD *)(v48 + 808) = 0;
    *(_DWORD *)(v48 + 824) = 0;
    *(_DWORD *)(v48 + 840) = 1065353216;
    *(_OWORD *)(v48 + 848) = 0u;
    *(_OWORD *)(v48 + 864) = 0u;
    *(int64x2_t *)(v48 + 880) = v54;
    *(_QWORD *)(v48 + 896) = 0;
    *(_QWORD *)(v48 + 784) = &off_1E42AF548;
    *(_BYTE *)(v48 + 904) = 1;
    *(_QWORD *)(v48 + 928) = "";
    *(_QWORD *)(v48 + 960) = 0;
    *(_QWORD *)(v48 + 944) = 0;
    *(_QWORD *)(v48 + 936) = 0;
    *(_DWORD *)(v48 + 952) = 0;
    *(_DWORD *)(v48 + 968) = 1065353216;
    *(_OWORD *)(v48 + 976) = 0u;
    *(_OWORD *)(v48 + 992) = 0u;
    *(int64x2_t *)(v48 + 1008) = v54;
    *(_QWORD *)(v48 + 1024) = 0;
    *(_QWORD *)(v48 + 912) = &off_1E42AF548;
    *(_BYTE *)(v48 + 1032) = 1;
    *(_QWORD *)(v48 + 1056) = "";
    *(_QWORD *)(v48 + 1088) = 0;
    *(_QWORD *)(v48 + 1072) = 0;
    *(_QWORD *)(v48 + 1064) = 0;
    *(_DWORD *)(v48 + 1080) = 0;
    *(_DWORD *)(v48 + 1096) = 1065353216;
    *(_OWORD *)(v48 + 1120) = 0u;
    *(_OWORD *)(v48 + 1104) = 0u;
    *(int64x2_t *)(v48 + 1136) = v54;
    *(_QWORD *)(v48 + 1152) = 0;
    *(_QWORD *)(v48 + 1040) = &off_1E42AF548;
    *(_BYTE *)(v48 + 1160) = 1;
    *(_QWORD *)(v48 + 1184) = "";
    *(_QWORD *)(v48 + 1216) = 0;
    *(_QWORD *)(v48 + 1200) = 0;
    *(_QWORD *)(v48 + 1192) = 0;
    *(_DWORD *)(v48 + 1208) = 0;
    *(_DWORD *)(v48 + 1224) = 1065353216;
    *(_OWORD *)(v48 + 1248) = 0u;
    *(_OWORD *)(v48 + 1232) = 0u;
    *(int64x2_t *)(v48 + 1264) = v54;
    *(_QWORD *)(v48 + 1280) = 0;
    *(_QWORD *)(v48 + 1168) = &off_1E42AF548;
    *(_BYTE *)(v48 + 1288) = 1;
    *(_OWORD *)(v48 + 1328) = 0u;
    *(_OWORD *)(v48 + 1312) = 0u;
    *(_OWORD *)(v48 + 1296) = 0u;
    if ((v55 & 1) == 0)
    {
      v53 = 0uLL;
      if (v276)
      {
        v277 = operator new();
        ggl::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v277, "GeoGL", 0xA3D02C1100000005);
        v53 = 0uLL;
      }
    }
    *(_QWORD *)(v49 + 1344) = ggl::Allocator::instance(void)::alloc;
    *(_QWORD *)(v49 + 1384) = 0;
    *(_OWORD *)(v49 + 1352) = v53;
    *(_OWORD *)(v49 + 1368) = v53;
    *(_QWORD *)(v49 + 1392) = 32;
    v56 = malloc_type_malloc(0xF10uLL, 0xB644C221uLL);
    *v56 = 0;
    v56[1] = 0;
    *(_QWORD *)(v49 + 1376) = v56;
    *(_QWORD *)(v49 + 1384) = v56;
    *(_QWORD *)(v49 + 1400) = 0;
    *(_QWORD *)(v49 + 1416) = 0;
    *(_QWORD *)(v49 + 1408) = 0;
    *(_BYTE *)(v49 + 1424) = 1;
    *(_QWORD *)v49 = &off_1E428C7A0;
    *(_DWORD *)(v49 + 1432) = *((_DWORD *)v747 + 4);
    *(_QWORD *)(v49 + 1440) = v747[3];
    v57 = v747[4];
    *(_QWORD *)(v49 + 1448) = v57;
    if (v57)
    {
      v58 = (unint64_t *)(v57 + 8);
      do
        v59 = __ldxr(v58);
      while (__stxr(v59 + 1, v58));
    }
    *(_BYTE *)(v49 + 1456) = *((_BYTE *)v747 + 40);
    *(_QWORD *)v49 = &off_1E429A3A8;
    +[VKSharedResourcesManager sharedResources](VKSharedResourcesManager, "sharedResources");
    v60 = (void *)objc_claimAutoreleasedReturnValue();
    v61 = *(_BYTE *)(objc_msgSend(v60, "gglDevice") + 20);

    *(_BYTE *)(v49 + 1464) = v61;
    *(_QWORD *)(v49 + 1472) = v747[3];
    v62 = v747[4];
    *(_QWORD *)(v49 + 1480) = v62;
    if (v62)
    {
      v63 = (unint64_t *)(v62 + 8);
      do
        v64 = __ldxr(v63);
      while (__stxr(v64 + 1, v63));
    }
    v65 = v794;
    *(_QWORD *)(v49 + 1488) = v793;
    *(_QWORD *)(v49 + 1496) = v65;
    if (v65)
    {
      v66 = (unint64_t *)&v65->__shared_owners_;
      do
        v67 = __ldxr(v66);
      while (__stxr(v67 + 1, v66));
    }
    v68 = a5[1];
    *(_QWORD *)(v49 + 1504) = *a5;
    *(_QWORD *)(v49 + 1512) = v68;
    if (v68)
    {
      v69 = (unint64_t *)(v68 + 8);
      do
        v70 = __ldxr(v69);
      while (__stxr(v70 + 1, v69));
    }
    if (v751 >= v743)
    {
      v72 = (v751 - __p) >> 3;
      v73 = v72 + 1;
      if ((unint64_t)(v72 + 1) >> 61)
        abort();
      if ((v743 - __p) >> 2 > v73)
        v73 = (v743 - __p) >> 2;
      if ((unint64_t)(v743 - __p) >= 0x7FFFFFFFFFFFFFF8)
        v74 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v74 = v73;
      if (v74)
      {
        if (v74 >> 61)
          goto LABEL_767;
        v75 = (char *)operator new(8 * v74);
      }
      else
      {
        v75 = 0;
      }
      v6 = (uint64_t *)&v75[8 * v72];
      *v6 = v49;
      v76 = (char *)(v6 + 1);
      v77 = __p;
      if (v751 != __p)
      {
        v78 = v751 - 8 - __p;
        if (v78 < 0x58)
        {
          v79 = v751;
          v77 = __p;
          goto LABEL_85;
        }
        if ((unint64_t)(__p - v75) < 0x20)
        {
          v79 = v751;
          v77 = __p;
          do
          {
LABEL_85:
            v85 = *((_QWORD *)v79 - 1);
            v79 -= 8;
            *--v6 = v85;
          }
          while (v79 != v77);
          goto LABEL_86;
        }
        v80 = (v78 >> 3) + 1;
        v79 = &v751[-8 * (v80 & 0x3FFFFFFFFFFFFFFCLL)];
        v81 = &v75[8 * v72 - 16];
        v82 = v751 - 16;
        v83 = v80 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v84 = *(_OWORD *)v82;
          *((_OWORD *)v81 - 1) = *((_OWORD *)v82 - 1);
          *(_OWORD *)v81 = v84;
          v81 -= 32;
          v82 -= 32;
          v83 -= 4;
        }
        while (v83);
        v6 -= v80 & 0x3FFFFFFFFFFFFFFCLL;
        v77 = __p;
        if (v80 != (v80 & 0x3FFFFFFFFFFFFFFCLL))
          goto LABEL_85;
      }
LABEL_86:
      v743 = &v75[8 * v74];
      if (v77)
        operator delete(v77);
      __p = (char *)v6;
      v751 = v76;
      v71 = v794;
      if (v794)
        goto LABEL_89;
      goto LABEL_93;
    }
    *(_QWORD *)v751 = v49;
    v751 += 8;
    v71 = v794;
    if (!v794)
      goto LABEL_93;
LABEL_89:
    v86 = (unint64_t *)&v71->__shared_owners_;
    do
      v87 = __ldaxr(v86);
    while (__stlxr(v87 - 1, v86));
    if (!v87)
    {
      ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
      std::__shared_weak_count::__release_weak(v71);
    }
LABEL_93:
    v759 = (uint64_t *)*((_QWORD *)&v806 + 1);
    if (*((_QWORD *)&v806 + 1))
    {
      v88 = 0;
      v89 = 0;
      v90 = 0;
      while (1)
      {
        v91 = operator new();
        *(_OWORD *)(v91 + 80) = 0u;
        *(_OWORD *)(v91 + 96) = 0u;
        *(_OWORD *)(v91 + 48) = 0u;
        *(_OWORD *)(v91 + 64) = 0u;
        *(_OWORD *)(v91 + 16) = 0u;
        *(_OWORD *)(v91 + 32) = 0u;
        *(_OWORD *)v91 = 0u;
        *(_BYTE *)(v91 + 48) = 1;
        *(_QWORD *)(v91 + 56) = 0;
        *(_QWORD *)(v91 + 64) = 0;
        *(_QWORD *)(v91 + 72) = 0;
        {
          v217 = operator new();
          mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v217, "VectorKitLabels", 0x5ED09DD50000000FLL);
        }
        *(_QWORD *)(v91 + 80) = mdm::Allocator::instance(void)::alloc;
        *(_DWORD *)(v91 + 96) = 0;
        *(_QWORD *)(v91 + 100) = 1065353216;
        *(_QWORD *)&v788 = v91;
        if (v90 < (uint64_t *)v89)
        {
          *(_QWORD *)&v788 = 0;
          *v90 = v91;
          v93 = v90 + 1;
          v94 = v788;
          if (!(_QWORD)v788)
            goto LABEL_152;
LABEL_140:
          v126 = *(uint64_t **)(v94 + 56);
          if (v126)
          {
            v6 = *(uint64_t **)(v94 + 64);
            v127 = *(_QWORD *)(v94 + 56);
            if (v6 != v126)
            {
              do
              {
                v129 = (void (***)(_QWORD, uint64_t))*--v6;
                v128 = v129;
                *v6 = 0;
                if (v129)
                {
                  (**v128)(v128, v127);
                  if ((v130 & 1) == 0
                  {
                    v131 = operator new();
                    mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v131, "VectorKitLabels", 0x5ED09DD50000000FLL);
                  }
                  (*(void (**)(uint64_t, void (***)(_QWORD, uint64_t), uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc + 40))(mdm::Allocator::instance(void)::alloc, v128, 136);
                }
              }
              while (v6 != v126);
              v127 = *(_QWORD *)(v94 + 56);
            }
            *(_QWORD *)(v94 + 64) = v126;
            (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v94 + 80) + 40))(*(_QWORD *)(v94 + 80), v127, *(_QWORD *)(v94 + 72) - v127);
          }
          MEMORY[0x1A1AF4E00](v94, 0x1020C40379845F6);
          goto LABEL_152;
        }
        v95 = v89;
        v96 = (char *)v90 - (char *)v88;
        v97 = v90 - v88;
        v98 = v97 + 1;
        if ((unint64_t)(v97 + 1) >> 61)
          abort();
        v99 = v95 - (char *)v88;
        v100 = (v95 - (char *)v88) >> 2;
        if (v100 > v98)
          v98 = v100;
        v101 = v99 >= 0x7FFFFFFFFFFFFFF8 ? 0x1FFFFFFFFFFFFFFFLL : v98;
        v772 = v101;
        if (v101)
        {
          if (v101 >> 61)
            goto LABEL_767;
          v102 = (char *)operator new(8 * v101);
        }
        else
        {
          v102 = 0;
        }
        v103 = (uint64_t *)&v102[8 * v97];
        *(_QWORD *)&v788 = 0;
        *v103 = v91;
        v93 = v103 + 1;
        v104 = (char *)v90 - (char *)v88;
        if (v90 != v88)
          break;
LABEL_137:
        v89 = &v102[8 * v772];
        if (v88)
          operator delete(v88);
        v88 = v103;
        v94 = v788;
        if ((_QWORD)v788)
          goto LABEL_140;
LABEL_152:
        *(_DWORD *)(*(v93 - 1) + 96) = *((_DWORD *)v759 + 4);
        v132 = (uint64_t *)v759[3];
        v767 = (uint64_t *)v759[4];
        if (v132 != v767)
        {
          v133 = 0;
          while (1)
          {
            v134 = *v132;
            v6 = *(uint64_t **)(*v132 + 88);
            if ((unint64_t)v6 + v133 <= 0x5999)
            {
              v773 = v88;
              v138 = *(v93 - 1);
              goto LABEL_217;
            }
            v135 = operator new();
            *(_OWORD *)(v135 + 80) = 0u;
            *(_OWORD *)(v135 + 96) = 0u;
            *(_OWORD *)(v135 + 48) = 0u;
            *(_OWORD *)(v135 + 64) = 0u;
            *(_OWORD *)(v135 + 16) = 0u;
            *(_OWORD *)(v135 + 32) = 0u;
            *(_OWORD *)v135 = 0u;
            *(_BYTE *)(v135 + 48) = 1;
            *(_QWORD *)(v135 + 56) = 0;
            *(_QWORD *)(v135 + 64) = 0;
            *(_QWORD *)(v135 + 72) = 0;
            {
              v216 = operator new();
              mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v216, "VectorKitLabels", 0x5ED09DD50000000FLL);
            }
            *(_QWORD *)(v135 + 80) = mdm::Allocator::instance(void)::alloc;
            *(_DWORD *)(v135 + 96) = 0;
            *(_QWORD *)(v135 + 100) = 1065353216;
            *(_QWORD *)&v788 = v135;
            if (v93 >= (uint64_t *)v89)
              break;
            *(_QWORD *)&v788 = 0;
            *v93++ = v135;
            v137 = v788;
            if ((_QWORD)v788)
              goto LABEL_204;
LABEL_216:
            v773 = v88;
            v133 = 0;
            v138 = *(v93 - 1);
            *(_DWORD *)(v138 + 96) = *((_DWORD *)v759 + 4);
            v134 = *v132;
            v6 = *(uint64_t **)(*v132 + 88);
LABEL_217:
            *v132 = 0;
            v181.f64[0] = *(float64_t *)(v134 + 104);
            v181.f64[1] = *(double *)(v134 + 112) + v181.f64[0];
            *(float32x2_t *)&v181.f64[0] = vcvt_f32_f64(v181);
            v182.i32[0] = *(_QWORD *)(v138 + 100);
            v182.i32[1] = HIDWORD(v181.f64[0]);
            v183.i32[0] = LODWORD(v181.f64[0]);
            v183.i32[1] = HIDWORD(*(_QWORD *)(v138 + 100));
            *(int8x8_t *)(v138 + 100) = vbsl_s8((int8x8_t)vcgt_f32(v182, v183), *(int8x8_t *)&v181.f64[0], *(int8x8_t *)(v138 + 100));
            v184 = *(_QWORD **)(v138 + 64);
            v185 = *(_QWORD *)(v138 + 72);
            if ((unint64_t)v184 < v185)
            {
              if (v184)
              {
                *v184 = v134;
                v134 = 0;
              }
              v186 = v184 + 1;
              goto LABEL_254;
            }
            v187 = *(_QWORD *)(v138 + 56);
            v188 = ((uint64_t)v184 - v187) >> 3;
            v189 = v188 + 1;
            if ((unint64_t)(v188 + 1) >> 61)
              abort();
            v190 = v185 - v187;
            if (v190 >> 2 > v189)
              v189 = v190 >> 2;
            if ((unint64_t)v190 >= 0x7FFFFFFFFFFFFFF8)
              v191 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v191 = v189;
            if (v191)
            {
              v192 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v138 + 80) + 16))(*(_QWORD *)(v138 + 80), 8 * v191, 8);
              v193 = (_QWORD *)(v192 + 8 * v188);
              v194 = v192 + 8 * v191;
              if (v192)
              {
                *v193 = v134;
                v134 = 0;
              }
            }
            else
            {
              v194 = 0;
              v193 = (_QWORD *)(8 * v188);
            }
            v186 = v193 + 1;
            v195 = *(_QWORD **)(v138 + 56);
            v196 = *(_QWORD *)(v138 + 64);
            if ((_QWORD *)v196 == v195)
            {
              *(_QWORD *)(v138 + 56) = v193;
              *(_QWORD *)(v138 + 64) = v186;
              v764 = *(_QWORD *)(v138 + 72);
              *(_QWORD *)(v138 + 72) = v194;
              if (!v196)
                goto LABEL_254;
              goto LABEL_253;
            }
            v197 = v196 - (_QWORD)v195 - 8;
            if (v197 <= 0x47
              || ((v198 = v197 >> 3, v196 - 8 * v198 - 8 < (unint64_t)v193)
                ? (v199 = (unint64_t)&v193[-v198 - 1] >= v196)
                : (v199 = 1),
                  !v199))
            {
              v202 = *(_QWORD **)(v138 + 64);
              do
              {
LABEL_243:
                v208 = *--v202;
                *v202 = 0;
                *--v193 = v208;
              }
              while (v202 != v195);
              goto LABEL_244;
            }
            v200 = v198 + 1;
            v201 = (v198 + 1) & 0x3FFFFFFFFFFFFFFCLL;
            v202 = (_QWORD *)(v196 - 8 * v201);
            v203 = v193 - 2;
            v204 = (__int128 *)(v196 - 32);
            v205 = v201;
            do
            {
              v207 = *v204;
              v206 = v204[1];
              *v204 = 0uLL;
              v204[1] = 0uLL;
              v204 -= 2;
              *(v203 - 1) = v207;
              *v203 = v206;
              v203 -= 2;
              v205 -= 4;
            }
            while (v205);
            v193 -= v201;
            if (v200 != v201)
              goto LABEL_243;
LABEL_244:
            v196 = *(_QWORD *)(v138 + 56);
            v209 = *(_QWORD **)(v138 + 64);
            *(_QWORD *)(v138 + 56) = v193;
            *(_QWORD *)(v138 + 64) = v186;
            v764 = *(_QWORD *)(v138 + 72);
            *(_QWORD *)(v138 + 72) = v194;
            if (v209 == (_QWORD *)v196)
            {
              if (!v196)
                goto LABEL_254;
            }
            else
            {
              v756 = v89;
              do
              {
                v211 = (void (***)(_QWORD))*--v209;
                v210 = v211;
                *v209 = 0;
                if (v211)
                {
                  (**v210)(v210);
                  if ((v212 & 1) == 0
                  {
                    v213 = operator new();
                    mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v213, "VectorKitLabels", 0x5ED09DD50000000FLL);
                  }
                  (*(void (**)(uint64_t, void (***)(_QWORD), uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc
                                                                                          + 40))(mdm::Allocator::instance(void)::alloc, v210, 136);
                }
              }
              while (v209 != (_QWORD *)v196);
              v89 = v756;
              if (!v196)
                goto LABEL_254;
            }
LABEL_253:
            (*(void (**)(_QWORD, unint64_t, unint64_t))(**(_QWORD **)(v138 + 80) + 40))(*(_QWORD *)(v138 + 80), v196, v764 - v196);
LABEL_254:
            *(_QWORD *)(v138 + 64) = v186;
            v88 = v773;
            if (v134)
            {
              (**(void (***)(uint64_t))v134)(v134);
              {
                v215 = operator new();
                mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v215, "VectorKitLabels", 0x5ED09DD50000000FLL);
              }
              (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc + 40))(mdm::Allocator::instance(void)::alloc, v134, 136);
            }
            v133 += (uint64_t)v6;
            if (++v132 == v767)
              goto LABEL_95;
          }
          v139 = v89;
          v140 = (char *)v93 - (char *)v88;
          v141 = v93 - v88;
          v142 = v141 + 1;
          if ((unint64_t)(v141 + 1) >> 61)
            abort();
          v143 = v139 - (char *)v88;
          v144 = (v139 - (char *)v88) >> 2;
          if (v144 > v142)
            v142 = v144;
          if (v143 >= 0x7FFFFFFFFFFFFFF8)
            v145 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v145 = v142;
          v774 = v145;
          if (v145)
          {
            if (v145 >> 61)
              goto LABEL_767;
            v146 = (char *)operator new(8 * v145);
          }
          else
          {
            v146 = 0;
          }
          v147 = (uint64_t *)&v146[8 * v141];
          *(_QWORD *)&v788 = 0;
          *v147 = v135;
          v763 = v147 + 1;
          v148 = (char *)v93 - (char *)v88;
          if (v93 != v88)
          {
            v149 = v148 - 8;
            if ((unint64_t)(v148 - 8) < 0x138)
            {
              v150 = v93;
              goto LABEL_175;
            }
            v152 = v149 & 0xFFFFFFFFFFFFFFF8;
            if ((uint64_t *)((char *)v93 - (v149 & 0xFFFFFFFFFFFFFFF8) - 8) > v93 - 1)
            {
              v150 = v93;
              goto LABEL_175;
            }
            if (&v146[v140 - 8 - v152] > &v146[v140 - 8])
            {
              v150 = v93;
              goto LABEL_175;
            }
            v153 = v149 >> 3;
            if (&v93[-v153 - 1] < v147)
            {
              v154 = (unint64_t)&v146[v140 - v152 - 8];
              v150 = v93;
              if (v154 < (unint64_t)v93)
                goto LABEL_778;
            }
            v155 = v153 + 1;
            v150 = &v93[-(v155 & 0x3FFFFFFFFFFFFFFCLL)];
            v156 = &v146[8 * v141 - 16];
            v157 = v93 - 4;
            v158 = v155 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v160 = *(_OWORD *)v157;
              v159 = *((_OWORD *)v157 + 1);
              *(_OWORD *)v157 = 0uLL;
              *((_OWORD *)v157 + 1) = 0uLL;
              v157 -= 4;
              *((_OWORD *)v156 - 1) = v160;
              *(_OWORD *)v156 = v159;
              v156 -= 32;
              v158 -= 4;
            }
            while (v158);
            v147 -= v155 & 0x3FFFFFFFFFFFFFFCLL;
            if (v155 != (v155 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_778:
              do
              {
LABEL_175:
                v151 = *--v150;
                *v150 = 0;
                *--v147 = v151;
              }
              while (v150 != v88);
            }
            do
            {
              v163 = *--v93;
              v162 = v163;
              *v93 = 0;
              if (v163)
              {
                v164 = *(_QWORD **)(v162 + 56);
                if (v164)
                {
                  v165 = v88;
                  v166 = *(_QWORD **)(v162 + 64);
                  v161 = *(_QWORD *)(v162 + 56);
                  if (v166 != v164)
                  {
                    do
                    {
                      v169 = (void (***)(_QWORD, uint64_t))*--v166;
                      v168 = v169;
                      *v166 = 0;
                      if (v169)
                      {
                        (**v168)(v168, v161);
                        if ((v170 & 1) == 0
                        {
                          v171 = operator new();
                          *(_QWORD *)(v171 + 16) = 0x5ED09DD50000000FLL;
                          *(_QWORD *)(v171 + 24) = "VectorKitLabels";
                          *(_OWORD *)(v171 + 32) = xmmword_19FFB2E80;
                          *(_QWORD *)v171 = &off_1E42B5668;
                          *(_QWORD *)(v171 + 8) = "VectorKitLabels";
                          *(_OWORD *)(v171 + 72) = 0u;
                          *(_OWORD *)(v171 + 88) = 0u;
                          *(_OWORD *)(v171 + 104) = 0u;
                          *(_OWORD *)(v171 + 120) = 0u;
                          *(_OWORD *)(v171 + 136) = 0u;
                          *(_OWORD *)(v171 + 152) = 0u;
                          *(_OWORD *)(v171 + 168) = 0u;
                          *(_OWORD *)(v171 + 184) = 0u;
                          *(_OWORD *)(v171 + 200) = 0u;
                          *(_OWORD *)(v171 + 216) = 0u;
                          *(_OWORD *)(v171 + 232) = 0u;
                          *(_QWORD *)(v171 + 248) = 0;
                          v755 = v171;
                          *(_OWORD *)(v171 + 56) = 0u;
                          v172 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v171 + 56), 0);
                          if ((_DWORD)v172)
                            geo::read_write_lock::logFailure(v172, (uint64_t)"initialization", v173);
                          zone = malloc_create_zone(0, 0);
                          *(_QWORD *)(v755 + 48) = zone;
                          malloc_set_zone_name(zone, "VectorKitLabels");
                          *(_QWORD *)(v755 + 256) = os_log_create("com.apple.VectorKit", "Memory");
                          mdm::Allocator::instance(void)::alloc = v755;
                        }
                        (*(void (**)(uint64_t, void (***)(_QWORD, uint64_t), uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc + 40))(mdm::Allocator::instance(void)::alloc, v168, 136);
                      }
                    }
                    while (v166 != v164);
                    v161 = *(_QWORD *)(v162 + 56);
                  }
                  *(_QWORD *)(v162 + 64) = v164;
                  (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v162 + 80) + 40))(*(_QWORD *)(v162 + 80), v161, *(_QWORD *)(v162 + 72) - v161);
                  v88 = v165;
                }
                MEMORY[0x1A1AF4E00](v162, 0x1020C40379845F6);
              }
            }
            while (v93 != v88);
          }
          v89 = &v146[8 * v774];
          if (v88)
            operator delete(v88);
          v88 = v147;
          v93 = v763;
          v137 = v788;
          if (!(_QWORD)v788)
            goto LABEL_216;
LABEL_204:
          v174 = *(_QWORD **)(v137 + 56);
          if (v174)
          {
            v175 = *(_QWORD **)(v137 + 64);
            v176 = *(_QWORD *)(v137 + 56);
            if (v175 != v174)
            {
              do
              {
                v178 = (void (***)(_QWORD, uint64_t))*--v175;
                v177 = v178;
                *v175 = 0;
                if (v178)
                {
                  (**v177)(v177, v176);
                  if ((v179 & 1) == 0
                  {
                    v180 = operator new();
                    mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v180, "VectorKitLabels", 0x5ED09DD50000000FLL);
                  }
                  (*(void (**)(uint64_t, void (***)(_QWORD, uint64_t), uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc + 40))(mdm::Allocator::instance(void)::alloc, v177, 136);
                }
              }
              while (v175 != v174);
              v176 = *(_QWORD *)(v137 + 56);
            }
            *(_QWORD *)(v137 + 64) = v174;
            (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v137 + 80) + 40))(*(_QWORD *)(v137 + 80), v176, *(_QWORD *)(v137 + 72) - v176);
          }
          MEMORY[0x1A1AF4E00](v137, 0x1020C40379845F6);
          goto LABEL_216;
        }
LABEL_95:
        v90 = v93;
        v8 = a1;
        v759 = (uint64_t *)*v759;
        if (!v759)
          goto LABEL_271;
      }
      v105 = v104 - 8;
      if ((unint64_t)(v104 - 8) >= 0x138)
      {
        v108 = v105 & 0xFFFFFFFFFFFFFFF8;
        if ((uint64_t *)((char *)v90 - (v105 & 0xFFFFFFFFFFFFFFF8) - 8) > v90 - 1)
        {
          v106 = v90;
        }
        else if (&v102[v96 - 8 - v108] > &v102[v96 - 8])
        {
          v106 = v90;
        }
        else
        {
          v109 = v105 >> 3;
          if (&v90[-v109 - 1] >= v103
            || (v110 = (unint64_t)&v102[v96 - v108 - 8], v106 = v90, v110 >= (unint64_t)v90))
          {
            v111 = v109 + 1;
            v106 = &v90[-(v111 & 0x3FFFFFFFFFFFFFFCLL)];
            v112 = &v102[8 * v97 - 16];
            v113 = v90 - 4;
            v114 = v111 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v116 = *(_OWORD *)v113;
              v115 = *((_OWORD *)v113 + 1);
              *(_OWORD *)v113 = 0uLL;
              *((_OWORD *)v113 + 1) = 0uLL;
              v113 -= 4;
              *((_OWORD *)v112 - 1) = v116;
              *(_OWORD *)v112 = v115;
              v112 -= 32;
              v114 -= 4;
            }
            while (v114);
            v103 -= v111 & 0x3FFFFFFFFFFFFFFCLL;
            if (v111 == (v111 & 0x3FFFFFFFFFFFFFFCLL))
            {
              do
              {
LABEL_127:
                v119 = *--v90;
                v118 = v119;
                *v90 = 0;
                if (v119)
                {
                  v120 = *(_QWORD **)(v118 + 56);
                  if (v120)
                  {
                    v6 = v88;
                    v121 = *(_QWORD **)(v118 + 64);
                    v117 = *(_QWORD *)(v118 + 56);
                    if (v121 != v120)
                    {
                      do
                      {
                        v123 = (void (***)(_QWORD, uint64_t))*--v121;
                        v122 = v123;
                        *v121 = 0;
                        if (v123)
                        {
                          (**v122)(v122, v117);
                          if ((v124 & 1) == 0
                          {
                            v125 = operator new();
                            mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v125, "VectorKitLabels", 0x5ED09DD50000000FLL);
                          }
                          (*(void (**)(uint64_t, void (***)(_QWORD, uint64_t), uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc + 40))(mdm::Allocator::instance(void)::alloc, v122, 136);
                        }
                      }
                      while (v121 != v120);
                      v117 = *(_QWORD *)(v118 + 56);
                    }
                    *(_QWORD *)(v118 + 64) = v120;
                    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v118 + 80) + 40))(*(_QWORD *)(v118 + 80), v117, *(_QWORD *)(v118 + 72) - v117);
                    v88 = v6;
                  }
                  MEMORY[0x1A1AF4E00](v118, 0x1020C40379845F6);
                }
              }
              while (v90 != v88);
              goto LABEL_137;
            }
          }
        }
      }
      else
      {
        v106 = v90;
      }
      do
      {
        v107 = *--v106;
        *v106 = 0;
        *--v103 = v107;
      }
      while (v106 != v88);
      goto LABEL_127;
    }
    v93 = 0;
    v88 = 0;
LABEL_271:
    v218 = *((_QWORD *)v751 - 1);
    v219 = *(_QWORD *)(v218 + 1400);
    v220 = *(int8x16_t **)(v218 + 1408);
    v221 = 126 - 2 * __clz(((uint64_t)v220->i64 - v219) >> 3);
    if (v220 == (int8x16_t *)v219)
      v222 = 0;
    else
      v222 = v221;
    std::__introsort<std::_ClassicAlgPolicy,md::RibbonLayer<md::Ribbons::PolylineOverlayRibbonDescriptor>::batch(std::unordered_map<md::PolylineOverlayBatchKey,std::vector<std::unique_ptr<md::PolylineOverlayRibbon,mdm::TypeDeleter<md::PolylineOverlayRibbon>>,geo::StdAllocator<std::unique_ptr<md::PolylineOverlayRibbon,mdm::TypeDeleter<md::PolylineOverlayRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::PolylineOverlayBatchKey,std::vector<std::unique_ptr<md::PolylineOverlayRibbon,mdm::TypeDeleter<md::PolylineOverlayRibbon>>,geo::StdAllocator<std::unique_ptr<md::PolylineOverlayRibbon,mdm::TypeDeleter<md::PolylineOverlayRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::PolylineOverlayRibbonSection<md::Ribbons::PolylineOverlayRibbonDescriptor>> const&,std::unique_ptr<md::PolylineOverlayRibbonSection<md::Ribbons::PolylineOverlayRibbonDescriptor>> const)#1} &,std::default_delete<md::PolylineOverlayRibbonSection>*,false>(v219, v220, v222, 1);
    v223 = v88;
    if (v88 == v93)
    {
      if (!v93)
        goto LABEL_4;
LABEL_3:
      operator delete(v88);
      goto LABEL_4;
    }
    do
    {
      v6 = (uint64_t *)*((_QWORD *)v751 - 1);
      v225 = *v223;
      *v223 = 0;
      *(_QWORD *)&v783 = v225;
      v226 = (uint64_t *)v6[176];
      v227 = v6[177];
      if ((unint64_t)v226 < v227)
      {
        *(_QWORD *)&v783 = 0;
        *v226 = v225;
        v228 = v226 + 1;
        goto LABEL_321;
      }
      v775 = v223;
      v229 = v6[175];
      v230 = (char *)v226 - v229;
      v231 = ((uint64_t)v226 - v229) >> 3;
      if ((unint64_t)(v231 + 1) >> 61)
        abort();
      v232 = v227 - v229;
      v233 = v232 >> 2;
      if (v232 >> 2 <= (unint64_t)(v231 + 1))
        v233 = v231 + 1;
      if ((unint64_t)v232 >= 0x7FFFFFFFFFFFFFF8)
        v234 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v234 = v233;
      if (v234)
      {
        if (v234 >> 61)
          goto LABEL_767;
        v235 = (char *)operator new(8 * v234);
      }
      else
      {
        v235 = 0;
      }
      v236 = &v235[8 * v231];
      v237 = &v235[8 * v234];
      *(_QWORD *)&v783 = 0;
      *(_QWORD *)v236 = v225;
      v228 = v236 + 8;
      v238 = (char *)v6[176];
      v239 = (char *)v6[175];
      if (v238 == v239)
      {
        v6[175] = (uint64_t)v236;
        v6[176] = (uint64_t)v228;
        v6[177] = (uint64_t)v237;
        if (v238)
          goto LABEL_320;
      }
      else
      {
        v240 = v238 - v239 - 8;
        if (v240 <= 0x77)
          goto LABEL_779;
        if (&v238[-(v240 & 0xFFFFFFFFFFFFFFF8) - 8] < v236
          && &v230[(_QWORD)v235 - (v240 & 0xFFFFFFFFFFFFFFF8) - 8] < v238)
        {
          goto LABEL_779;
        }
        v242 = (v240 >> 3) + 1;
        v243 = &v235[8 * v231 - 16];
        v244 = v238 - 32;
        v245 = v242 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v247 = *(_OWORD *)v244;
          v246 = *((_OWORD *)v244 + 1);
          *(_OWORD *)v244 = 0uLL;
          *((_OWORD *)v244 + 1) = 0uLL;
          v244 -= 32;
          *((_OWORD *)v243 - 1) = v247;
          *(_OWORD *)v243 = v246;
          v243 -= 32;
          v245 -= 4;
        }
        while (v245);
        v236 -= 8 * (v242 & 0x3FFFFFFFFFFFFFFCLL);
        v238 -= 8 * (v242 & 0x3FFFFFFFFFFFFFFCLL);
        if (v242 != (v242 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_779:
          do
          {
            v248 = *((_QWORD *)v238 - 1);
            v238 -= 8;
            *(_QWORD *)v238 = 0;
            *((_QWORD *)v236 - 1) = v248;
            v236 -= 8;
          }
          while (v238 != v239);
        }
        v238 = (char *)v6[175];
        v249 = (char *)v6[176];
        v6[175] = (uint64_t)v236;
        v6[176] = (uint64_t)v228;
        v6[177] = (uint64_t)v237;
        while (v249 != v238)
        {
          v252 = *((_QWORD *)v249 - 1);
          v249 -= 8;
          v251 = v252;
          *(_QWORD *)v249 = 0;
          if (v252)
          {
            v253 = v88;
            v254 = *(_QWORD **)(v251 + 56);
            if (v254)
            {
              v255 = *(_QWORD **)(v251 + 64);
              v250 = *(_QWORD *)(v251 + 56);
              if (v255 != v254)
              {
                do
                {
                  v257 = (void (***)(_QWORD, uint64_t))*--v255;
                  v256 = v257;
                  *v255 = 0;
                  if (v257)
                  {
                    (**v256)(v256, v250);
                    if ((v258 & 1) == 0
                    {
                      v259 = operator new();
                      mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v259, "VectorKitLabels", 0x5ED09DD50000000FLL);
                    }
                    (*(void (**)(uint64_t, void (***)(_QWORD, uint64_t), uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc + 40))(mdm::Allocator::instance(void)::alloc, v256, 136);
                  }
                }
                while (v255 != v254);
                v250 = *(_QWORD *)(v251 + 56);
              }
              *(_QWORD *)(v251 + 64) = v254;
              (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v251 + 80) + 40))(*(_QWORD *)(v251 + 80), v250, *(_QWORD *)(v251 + 72) - v250);
            }
            MEMORY[0x1A1AF4E00](v251, 0x1020C40379845F6);
            v88 = v253;
          }
        }
        v8 = a1;
        v223 = v775;
        if (v238)
LABEL_320:
          operator delete(v238);
      }
LABEL_321:
      v6[176] = (uint64_t)v228;
      v260 = v783;
      *(_QWORD *)&v783 = 0;
      if (v260)
      {
        v6 = *(uint64_t **)(v260 + 56);
        if (v6)
        {
          v261 = *(uint64_t **)(v260 + 64);
          v224 = *(_QWORD *)(v260 + 56);
          if (v261 != v6)
          {
            do
            {
              v263 = (void (***)(_QWORD, uint64_t))*--v261;
              v262 = v263;
              *v261 = 0;
              if (v263)
              {
                (**v262)(v262, v224);
                {
                  v265 = operator new();
                  mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v265, "VectorKitLabels", 0x5ED09DD50000000FLL);
                }
                (*(void (**)(uint64_t, void (***)(_QWORD, uint64_t), uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc
                                                                                                 + 40))(mdm::Allocator::instance(void)::alloc, v262, 136);
              }
            }
            while (v261 != v6);
            v224 = *(_QWORD *)(v260 + 56);
          }
          *(_QWORD *)(v260 + 64) = v6;
          (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v260 + 80) + 40))(*(_QWORD *)(v260 + 80), v224, *(_QWORD *)(v260 + 72) - v224);
        }
        MEMORY[0x1A1AF4E00](v260, 0x1020C40379845F6);
      }
      ++v223;
    }
    while (v223 != v93);
    if (v88)
    {
      do
      {
        v268 = *--v93;
        v267 = v268;
        *v93 = 0;
        if (v268)
        {
          v269 = *(uint64_t **)(v267 + 56);
          if (v269)
          {
            v6 = *(uint64_t **)(v267 + 64);
            v266 = *(_QWORD *)(v267 + 56);
            if (v6 != v269)
            {
              do
              {
                v271 = (void (***)(_QWORD, uint64_t))*--v6;
                v270 = v271;
                *v6 = 0;
                if (v271)
                {
                  (**v270)(v270, v266);
                  if ((v272 & 1) == 0
                  {
                    v273 = operator new();
                    mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v273, "VectorKitLabels", 0x5ED09DD50000000FLL);
                  }
                  (*(void (**)(uint64_t, void (***)(_QWORD, uint64_t), uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc + 40))(mdm::Allocator::instance(void)::alloc, v270, 136);
                }
              }
              while (v6 != v269);
              v266 = *(_QWORD *)(v267 + 56);
            }
            *(_QWORD *)(v267 + 64) = v269;
            (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v267 + 80) + 40))(*(_QWORD *)(v267 + 80), v266, *(_QWORD *)(v267 + 72) - v266);
          }
          MEMORY[0x1A1AF4E00](v267, 0x1020C40379845F6);
        }
      }
      while (v93 != v88);
      goto LABEL_3;
    }
LABEL_4:
    std::__hash_table<std::__hash_value_type<unsigned int,std::vector<std::unique_ptr<md::PolylineOverlayRibbon,mdm::TypeDeleter<md::PolylineOverlayRibbon>>,geo::StdAllocator<std::unique_ptr<md::PolylineOverlayRibbon,mdm::TypeDeleter<md::PolylineOverlayRibbon>>,mdm::Allocator>>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::vector<std::unique_ptr<md::PolylineOverlayRibbon,mdm::TypeDeleter<md::PolylineOverlayRibbon>>,geo::StdAllocator<std::unique_ptr<md::PolylineOverlayRibbon,mdm::TypeDeleter<md::PolylineOverlayRibbon>>,mdm::Allocator>>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::vector<std::unique_ptr<md::PolylineOverlayRibbon,mdm::TypeDeleter<md::PolylineOverlayRibbon>>,geo::StdAllocator<std::unique_ptr<md::PolylineOverlayRibbon,mdm::TypeDeleter<md::PolylineOverlayRibbon>>,mdm::Allocator>>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,geo::StdAllocator<std::__hash_value_type<unsigned int,std::vector<std::unique_ptr<md::PolylineOverlayRibbon,mdm::TypeDeleter<md::PolylineOverlayRibbon>>,geo::StdAllocator<std::unique_ptr<md::PolylineOverlayRibbon,mdm::TypeDeleter<md::PolylineOverlayRibbon>>,mdm::Allocator>>>,mdm::Allocator>>::~__hash_table((uint64_t *)&v804);
    v9 = __p;
    v747 = (uint64_t *)*v747;
    if (v747)
      continue;
    break;
  }
LABEL_356:
  __pa = v9;
  v278 = a6[24];
  if (a6[24])
  {
    LOBYTE(v6) = a6[1];
    v279 = *a6;
    v7 = *(_QWORD *)(a6 + 4);
  }
  else
  {
    v279 = 0;
  }
  *v8 = &off_1E42AF448;
  v8[1] = 0;
  v8[2] = 0;
  v8[3] = 0;
  v280 = v751 - __pa;
  if (v751 == __pa)
  {
    v730 = 0;
    v283 = 0;
  }
  else
  {
    if (v280 < 0)
      abort();
    v281 = operator new(v751 - __pa);
    v8[1] = v281;
    v8[2] = v281;
    v282 = (char *)&v281[v280 >> 3];
    v8[3] = v282;
    v283 = v281;
    memcpy(v281, __pa, v280);
    v730 = v282;
    v8[2] = v282;
  }
  *((_OWORD *)v8 + 2) = 0u;
  v8[18] = 0;
  v735 = (gdc::GlobeTileGrid **)(v8 + 18);
  *((_BYTE *)v8 + 152) = 0;
  *((_BYTE *)v8 + 176) = 0;
  *((_OWORD *)v8 + 3) = 0u;
  *((_OWORD *)v8 + 4) = 0u;
  *((_OWORD *)v8 + 5) = 0u;
  *((_OWORD *)v8 + 6) = 0u;
  *((_OWORD *)v8 + 7) = 0u;
  v728 = (void **)(v8 + 4);
  *(_OWORD *)((char *)v8 + 121) = 0u;
  if (v278)
  {
    *((_BYTE *)v8 + 152) = v279;
    *((_BYTE *)v8 + 153) = (_BYTE)v6;
    *(_QWORD *)((char *)v8 + 156) = v7;
    *((_BYTE *)v8 + 176) = 1;
  }
  if (v283 == v730)
  {
    v383 = 0;
    v360 = 0;
    goto LABEL_479;
  }
  v726 = (QuadTile *)(v8 + 19);
  v284 = 0;
  v752 = 0;
  v740 = 0;
  while (2)
  {
    v734 = v283;
    v285 = (_QWORD *)*v283;
    v285[1] = v8;
    v286 = (_QWORD **)v285[175];
    v287 = (_QWORD **)v285[176];
    v738 = v287;
LABEL_371:
    if (v286 != v287)
    {
      v748 = v286;
      v289 = *v286;
      v289[1] = **v286;
      v289[3] = v289[2];
      v289[5] = v289[4];
      v805 = 0;
      v804 = 0;
      *(_QWORD *)&v806 = 0;
      v794 = 0;
      v793 = 0;
      v795.i64[0] = 0;
      v291 = (uint64_t *)v289[7];
      v290 = (uint64_t *)v289[8];
      if (v291 == v290)
        goto LABEL_425;
      v744 = v284;
      v757 = v289;
      v760 = (uint64_t *)v289[8];
LABEL_377:
      v296 = *v291;
      *(_QWORD *)&v788 = 1;
      md::Ribbons::RibbonWriter<md::Ribbons::SolidTrafficRibbonDescriptor>::eliminateDuplicates(v296, &v804, (std::vector<unsigned int> *)&v793, (uint64_t *)&v788);
      v297 = v788;
      v298 = v788 - 2;
      if ((unint64_t)v788 < 2)
        goto LABEL_376;
      v299 = *(float *)(v296 + 128);
      if (v299 >= 1.5708)
      {
        v307 = 2 * v788;
        goto LABEL_417;
      }
      v300 = (float *)((char *)v804 + 8);
      v301 = *(float *)v804;
      v302 = 1;
      v776 = (char *)v804;
      while (1)
      {
        if (vabds_f32(*v300, v301) >= 1.0e-10)
        {
          v308 = v300[1] - *((float *)v804 + 1);
          goto LABEL_387;
        }
        v303 = *((float *)v804 + 1);
        v304 = v300[1];
        if (vabds_f32(v304, v303) >= 1.0e-10)
          break;
        ++v302;
        v300 += 2;
        if ((_QWORD)v788 == v302)
        {
          v305 = 0.0;
          v306 = 1.0;
          goto LABEL_388;
        }
      }
      v308 = v304 - v303;
LABEL_387:
      v309 = *v300 - v301;
      v310 = 1.0 / sqrtf((float)(v309 * v309) + (float)(v308 * v308));
      v306 = v310 * v309;
      v305 = v310 * v308;
LABEL_388:
      v311 = v788 - 1;
      if ((unint64_t)(v788 - 1) < 2)
      {
        v307 = 4;
        v290 = v760;
        goto LABEL_417;
      }
      v312 = *(unsigned __int8 *)(v296 + 121);
      v313 = *(float *)(v296 + 124);
      v314 = (float *)((char *)v804 + 16);
      v315 = 1;
      v316 = 2;
      v317 = 1.0 / v299;
      while (1)
      {
        v319 = v306;
        v320 = v305;
        v321 = v315 + 1;
        if (v315 + 1 < v297)
        {
          v322 = (float *)&v776[8 * v315];
          v323 = *v322;
          v324 = v322[1];
          v325 = v314;
          v326 = v298;
          while (vabds_f32(*v325, v323) < 1.0e-10)
          {
            v327 = v325[1];
            if (vabds_f32(v327, v324) >= 1.0e-10)
              goto LABEL_399;
            v325 += 2;
            if (!--v326)
              goto LABEL_400;
          }
          v327 = v325[1];
LABEL_399:
          v328 = v327 - v324;
          v329 = *v325 - v323;
          v330 = 1.0 / sqrtf((float)(v329 * v329) + (float)(v328 * v328));
          v306 = v330 * v329;
          v305 = v330 * v328;
        }
LABEL_400:
        v331 = atan2f(v305, v306);
        v332 = v331 - atan2f(v320, v319);
        v333 = v332;
        if (v332 > 3.14159265)
          break;
        if (v333 < -3.14159265)
        {
          v334 = 6.28318531;
          goto LABEL_404;
        }
LABEL_405:
        v335 = fabsf(v332);
        v336 = v312;
        if (v312 == 2)
        {
          if (1.0 / sin(v335 * -0.5 + 1.57079633) <= v313)
            v336 = 2;
          else
            v336 = 1;
        }
        v337 = fmaxf(ceilf(v335 * v317), 1.0);
        if ((unint64_t)v337 < 2)
        {
          v318 = 2;
        }
        else if (v336 == 1)
        {
          v318 = 6;
        }
        else if (v336 == 2)
        {
          v318 = 12;
        }
        else
        {
          v318 = 2 * (unint64_t)v337;
        }
        v316 += v318;
        --v298;
        v314 += 2;
        v315 = v321;
        if (v321 == v311)
        {
          v307 = v316 + 2;
          v8 = a1;
          v289 = v757;
          v290 = v760;
LABEL_417:
          if (*(_BYTE *)(v296 + 96))
            v307 += 2;
          if (*(_BYTE *)(v296 + 97))
            v307 += 2;
          if (v307 < 0x10000)
          {
            v292 = 3 * v307 + *(_QWORD *)(v296 + 24);
            v293 = *(_QWORD *)(v296 + 8) + v307;
            v294 = v292 - 6;
          }
          else
          {
            v293 = *(_QWORD *)(v296 + 8);
            v294 = *(_QWORD *)(v296 + 24);
          }
          *(_QWORD *)(v296 + 16) = v293;
          *(_QWORD *)(v296 + 32) = v294;
          *(_QWORD *)(v296 + 48) = *(_QWORD *)(v296 + 40);
LABEL_376:
          v295 = (_QWORD *)*v291++;
          v289[1] = v295[2] + v289[1] - v295[1];
          v289[3] = v295[4] + v289[3] - v295[3];
          v289[5] = v295[6] + v289[5] - v295[5];
          if (v291 != v290)
            goto LABEL_377;
          v284 = v744;
          if (v793)
            operator delete(v793);
LABEL_425:
          if (v804)
            operator delete(v804);
          v338 = v748;
          v339 = *v748;
          if (v752 < v740)
          {
            *(_QWORD *)v752 = v339;
            v288 = v752 + 8;
          }
          else
          {
            v340 = (char *)v284;
            v341 = v752 - (char *)v284;
            v342 = v341 >> 3;
            v343 = (v341 >> 3) + 1;
            if (v343 >> 61)
              abort();
            v344 = v340;
            v345 = v740 - v340;
            v346 = (v740 - v340) >> 2;
            if (v346 > v343)
              v343 = v346;
            if (v345 >= 0x7FFFFFFFFFFFFFF8)
              v347 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v347 = v343;
            if (v347)
            {
              if (!(v347 >> 61))
              {
                v348 = operator new(8 * v347);
                goto LABEL_438;
              }
LABEL_767:
              std::__throw_bad_array_new_length[abi:nn180100]();
            }
            v348 = 0;
LABEL_438:
            v349 = &v348[8 * v342];
            *v349 = v339;
            v288 = (char *)(v349 + 1);
            v350 = v344;
            if (v752 != v344)
            {
              v351 = v752 - 8 - v344;
              if (v351 < 0x168)
              {
                v352 = v752;
                goto LABEL_446;
              }
              if (&v348[v341 - 8 - (v351 & 0xFFFFFFFFFFFFFFF8)] <= &v348[v341 - 8]
                && &v752[-(v351 & 0xFFFFFFFFFFFFFFF8) - 8] <= v752 - 8
                && (unint64_t)(v752 - &v348[v341]) >= 0x20)
              {
                v354 = (v351 >> 3) + 1;
                v352 = &v752[-8 * (v354 & 0x3FFFFFFFFFFFFFFCLL)];
                v355 = &v348[8 * v342 - 16];
                v356 = v752 - 16;
                v357 = v354 & 0x3FFFFFFFFFFFFFFCLL;
                v350 = v344;
                do
                {
                  v358 = *(_OWORD *)v356;
                  *(v355 - 1) = *((_OWORD *)v356 - 1);
                  *v355 = v358;
                  v355 -= 2;
                  v356 -= 32;
                  v357 -= 4;
                }
                while (v357);
                v349 -= v354 & 0x3FFFFFFFFFFFFFFCLL;
                if (v354 != (v354 & 0x3FFFFFFFFFFFFFFCLL))
                  goto LABEL_447;
              }
              else
              {
                v352 = v752;
LABEL_446:
                v350 = v344;
                do
                {
LABEL_447:
                  v353 = *((_QWORD *)v352 - 1);
                  v352 -= 8;
                  *--v349 = v353;
                }
                while (v352 != v350);
              }
            }
            v740 = &v348[8 * v347];
            if (v350)
              operator delete(v350);
            v284 = v349;
            v338 = v748;
          }
          v286 = (_QWORD **)(v338 + 1);
          v752 = v288;
          v287 = v738;
          goto LABEL_371;
        }
      }
      v334 = -6.28318531;
LABEL_404:
      v332 = v333 + v334;
      goto LABEL_405;
    }
    v283 = v734 + 1;
    if (v734 + 1 != v730)
      continue;
    break;
  }
  if (!*((_BYTE *)v8 + 136))
  {
    v383 = (char *)v284;
    v360 = v752;
    goto LABEL_479;
  }
  v359 = (gdc::GlobeTileGrid *)operator new();
  v360 = v752;
  v361 = v359;
  v362 = (char *)v284;
  if (*((_BYTE *)v8 + 176))
  {
    gdc::GlobeTileGrid::GlobeTileGrid(v359, v726);
    v363 = *v735;
    *v735 = v361;
    if (v363)
    {
      v364 = *((_QWORD *)v363 + 323);
      if (v364)
        MEMORY[0x1A1AF4DE8](v364, 0x1000C8000313F17);
      MEMORY[0x1A1AF4E00](v363, 0x1020C4007FF0C4BLL);
      v361 = *v735;
    }
    *((_QWORD *)v361 + 323) = operator new[]();
    if (v362 != v752)
    {
      v365 = v362;
      do
      {
        v366 = *(uint64_t **)(*(_QWORD *)v365 + 56);
        v367 = *(uint64_t **)(*(_QWORD *)v365 + 64);
        while (v366 != v367)
        {
          v368 = *v366;
          v369 = *(_QWORD *)(*v366 + 80);
          if (v369)
          {
            v370 = *(_QWORD *)(v368 + 88);
            if (v370)
            {
              v371 = 0;
              v372 = *(_QWORD *)(v368 + 72);
              v373 = *v735;
              v374 = *((_QWORD *)*v735 + 323);
              v375 = (float *)(v372 + 4);
              do
              {
                v376 = *((float *)v373 + 648) * *(float *)(v369 + 4 * v371);
                v377 = vcvts_n_u32_f32(*(v375 - 1), 2uLL);
                if (v377 >= 3)
                  v377 = 3;
                v378 = *v375;
                v375 += 2;
                v379 = vcvts_n_u32_f32(v378, 2uLL);
                if (v379 >= 3)
                  v379 = 3;
                v380 = (float *)(v374 + 8 * (v377 | (4 * v379)));
                v381 = fminf(v376, *v380);
                v382 = fmaxf(v380[1], v376);
                *v380 = v381;
                v380[1] = v382;
                ++v371;
              }
              while (v370 > v371);
            }
          }
          ++v366;
        }
        v365 += 8;
      }
      while (v365 != v752);
    }
    gdc::GlobeTileGrid::endBuildingHeightRange(*v735);
    v383 = v362;
LABEL_479:
    v384 = 0;
    v385 = 0;
    v386 = 0;
    v387 = 0;
    v745 = v383;
    v388 = (v360 - v383) >> 3;
    v753 = v388;
    while (2)
    {
      if (v385 == v388
        || (unint64_t)(*(_QWORD *)(*(_QWORD *)&v745[8 * v385] + 8) + v387 - **(_QWORD **)&v745[8 * v385]) >= 0x10000)
      {
        v389 = (std::__shared_weak_count *)operator new(0xF8uLL);
        v389->__shared_owners_ = 0;
        v390 = (unint64_t *)&v389->__shared_owners_;
        v389->__shared_weak_owners_ = 0;
        v389->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E0170;
        v389[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B5748;
        v389[1].__shared_owners_ = 20;
        LODWORD(v389[1].__shared_weak_owners_) = 1;
        v389[2].__vftable = 0;
        v389[2].__shared_owners_ = 0;
        v389[2].__shared_weak_owners_ = 0;
        v389[3].__vftable = (std::__shared_weak_count_vtbl *)(20 * v387);
        v391 = (std::__shared_count)0;
        *(_OWORD *)&v389[3].__shared_owners_ = 0u;
        v389[4].std::__shared_count = 0u;
        v389[4].__shared_weak_owners_ = 0;
        if ((v392 & 1) == 0)
        {
          v391 = (std::__shared_count)0;
          if (v461)
          {
            v462 = operator new();
            ggl::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v462, "GeoGL", 0xA3D02C1100000005);
            v391 = (std::__shared_count)0;
          }
        }
        v389[5].__vftable = (std::__shared_weak_count_vtbl *)ggl::Allocator::instance(void)::alloc;
        v389[5].__shared_owners_ = 0;
        *((std::__shared_count *)v389 + 11) = v391;
        v389[8].std::__shared_count = v391;
        v389[8].__shared_weak_owners_ = 0;
        v389[9].__vftable = (std::__shared_weak_count_vtbl *)-1;
        *((std::__shared_count *)v389 + 10) = v391;
        v389[6].std::__shared_count = (std::__shared_count)xmmword_19FFB2DD0;
        LODWORD(v389[5].__shared_weak_owners_) = 0;
        v389[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B7E60;
        v389[9].__shared_weak_owners_ = (uint64_t)"BatchType/VData";
        v389[10].__vftable = (std::__shared_weak_count_vtbl *)&ggl::PolylineOverlayRibbon::defaultVboReflection;
        v389[9].__shared_owners_ = (uint64_t)&unk_1E42B7E80;
        v793 = &v389[1];
        v794 = v389;
        v393 = (std::__shared_weak_count *)operator new(0xF8uLL);
        v393->__shared_owners_ = 0;
        v394 = (unint64_t *)&v393->__shared_owners_;
        v393->__shared_weak_owners_ = 0;
        v393[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B5748;
        v395 = v393 + 1;
        v393->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DF1E8;
        v393[1].__shared_owners_ = 2;
        LODWORD(v393[1].__shared_weak_owners_) = 257;
        v393[2].__vftable = 0;
        v393[2].__shared_owners_ = 0;
        v393[2].__shared_weak_owners_ = 0;
        v393[3].__vftable = (std::__shared_weak_count_vtbl *)(2 * v386);
        v396 = (std::__shared_count)0;
        *(_OWORD *)&v393[3].__shared_owners_ = 0u;
        v393[4].std::__shared_count = 0u;
        v393[4].__shared_weak_owners_ = 0;
        if ((v397 & 1) == 0)
        {
          v396 = (std::__shared_count)0;
          v395 = v393 + 1;
          if (v463)
          {
            v464 = operator new();
            ggl::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v464, "GeoGL", 0xA3D02C1100000005);
            v396 = (std::__shared_count)0;
            v395 = v393 + 1;
          }
        }
        v393[5].__vftable = (std::__shared_weak_count_vtbl *)ggl::Allocator::instance(void)::alloc;
        v393[5].__shared_owners_ = 0;
        *((std::__shared_count *)v393 + 11) = v396;
        v393[8].std::__shared_count = v396;
        v393[8].__shared_weak_owners_ = 0;
        v393[9].__vftable = (std::__shared_weak_count_vtbl *)-1;
        *((std::__shared_count *)v393 + 10) = v396;
        v393[6].std::__shared_count = (std::__shared_count)xmmword_19FFB2DD0;
        LODWORD(v393[5].__shared_weak_owners_) = 0;
        LODWORD(v393[10].__vftable) = 0;
        v393[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B6B88;
        v393[1].__shared_owners_ = 2;
        v393[9].__shared_owners_ = (uint64_t)&unk_1E42B6BA8;
        v393[9].__shared_weak_owners_ = (uint64_t)"BatchType/IData";
        v768 = v395;
        *(_QWORD *)&v788 = v395;
        *((_QWORD *)&v788 + 1) = v393;
        v398 = operator new();
        do
          v399 = __ldxr(v390);
        while (__stxr(v399 + 1, v390));
        do
          v400 = __ldxr(v394);
        while (__stxr(v400 + 1, v394));
        if ((v401 & 1) == 0
        {
          if ((v465 & 1) == 0
          {
            ggl::MeshTyped<ggl::PolylineOverlayRibbon::DefaultVbo>::attributesReflection(void)::r = (uint64_t)&ggl::PolylineOverlayRibbon::defaultVboReflection;
          }
          ggl::MeshTyped<ggl::PolylineOverlayRibbon::DefaultVbo>::typedReflection(void)::r = (uint64_t)&ggl::MeshTyped<ggl::PolylineOverlayRibbon::DefaultVbo>::attributesReflection(void)::r;
          unk_1ECE324F8 = 1;
        }
        *(_QWORD *)(v398 + 32) = 0;
        *(_QWORD *)(v398 + 40) = 0;
        *(_DWORD *)(v398 + 48) = 0;
        *(_QWORD *)v398 = &off_1E42BBC08;
        *(_QWORD *)(v398 + 8) = "BatchType/Mesh";
        *(_QWORD *)(v398 + 16) = &unk_1E42BBC28;
        *(_QWORD *)(v398 + 24) = 0;
        *(_QWORD *)(v398 + 56) = &ggl::MeshTyped<ggl::PolylineOverlayRibbon::DefaultVbo>::typedReflection(void)::r;
        *(_QWORD *)(v398 + 64) = 0;
        v402 = v398 + 64;
        *(_QWORD *)(v398 + 72) = 0;
        *(_QWORD *)(v398 + 80) = 0;
        if ((v403 & 1) == 0)
        {
          v402 = v398 + 64;
          if (v466)
          {
            v467 = operator new();
            *(_QWORD *)(v467 + 16) = 0xA3D02C1100000005;
            *(_QWORD *)(v467 + 24) = "GeoGL";
            *(_OWORD *)(v467 + 32) = xmmword_19FFB2DE0;
            *(_QWORD *)v467 = &off_1E42B5668;
            *(_QWORD *)(v467 + 8) = "GeoGL";
            *(_OWORD *)(v467 + 72) = 0u;
            *(_OWORD *)(v467 + 88) = 0u;
            *(_OWORD *)(v467 + 104) = 0u;
            *(_OWORD *)(v467 + 120) = 0u;
            *(_OWORD *)(v467 + 136) = 0u;
            *(_OWORD *)(v467 + 152) = 0u;
            *(_OWORD *)(v467 + 168) = 0u;
            *(_OWORD *)(v467 + 184) = 0u;
            *(_OWORD *)(v467 + 200) = 0u;
            *(_OWORD *)(v467 + 216) = 0u;
            *(_OWORD *)(v467 + 232) = 0u;
            *(_QWORD *)(v467 + 248) = 0;
            *(_OWORD *)(v467 + 56) = 0u;
            v468 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v467 + 56), 0);
            if ((_DWORD)v468)
              geo::read_write_lock::logFailure(v468, (uint64_t)"initialization", v469);
            v470 = malloc_create_zone(0, 0);
            *(_QWORD *)(v467 + 48) = v470;
            malloc_set_zone_name(v470, "GeoGL");
            *(_QWORD *)(v467 + 256) = os_log_create("com.apple.VectorKit", "Memory");
            ggl::Allocator::instance(void)::alloc = v467;
            v402 = v398 + 64;
          }
        }
        v404 = ggl::Allocator::instance(void)::alloc;
        *(_QWORD *)(v398 + 120) = 0;
        *(_QWORD *)(v398 + 96) = 0;
        *(_QWORD *)(v398 + 104) = 0;
        *(_QWORD *)(v398 + 88) = v404;
        if ((v404 & 1) == 0)
        {
          v741 = v402;
          v402 = v741;
          if (v471)
          {
            v472 = operator new();
            *(_QWORD *)(v472 + 16) = 0xA3D02C1100000005;
            *(_QWORD *)(v472 + 24) = "GeoGL";
            *(_OWORD *)(v472 + 32) = xmmword_19FFB2DE0;
            *(_QWORD *)v472 = &off_1E42B5668;
            *(_QWORD *)(v472 + 8) = "GeoGL";
            *(_OWORD *)(v472 + 72) = 0u;
            *(_OWORD *)(v472 + 88) = 0u;
            *(_OWORD *)(v472 + 104) = 0u;
            *(_OWORD *)(v472 + 120) = 0u;
            *(_OWORD *)(v472 + 136) = 0u;
            *(_OWORD *)(v472 + 152) = 0u;
            *(_OWORD *)(v472 + 168) = 0u;
            *(_OWORD *)(v472 + 184) = 0u;
            *(_OWORD *)(v472 + 200) = 0u;
            *(_OWORD *)(v472 + 216) = 0u;
            *(_OWORD *)(v472 + 232) = 0u;
            *(_QWORD *)(v472 + 248) = 0;
            v473 = v472;
            *(_OWORD *)(v472 + 56) = 0u;
            v474 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v472 + 56), 0);
            if ((_DWORD)v474)
              geo::read_write_lock::logFailure(v474, (uint64_t)"initialization", v475);
            v476 = malloc_create_zone(0, 0);
            *(_QWORD *)(v473 + 48) = v476;
            malloc_set_zone_name(v476, "GeoGL");
            *(_QWORD *)(v473 + 256) = os_log_create("com.apple.VectorKit", "Memory");
            ggl::Allocator::instance(void)::alloc = v473;
            v402 = v741;
          }
        }
        *(_QWORD *)(v398 + 128) = ggl::Allocator::instance(void)::alloc;
        *(_QWORD *)(v398 + 136) = 0;
        *(_QWORD *)(v398 + 112) = v398 + 120;
        *(_QWORD *)v398 = &off_1E42BDAF8;
        *(_QWORD *)(v398 + 16) = &unk_1E42BDB18;
        v804 = &v389[1];
        v805 = (uint64_t)v389;
        do
          v405 = __ldxr(v390);
        while (__stxr(v405 + 1, v390));
        std::vector<std::shared_ptr<ggl::VertexData>,geo::StdAllocator<std::shared_ptr<ggl::VertexData>,ggl::Allocator>>::__assign_with_size[abi:nn180100]<std::shared_ptr<ggl::VertexData> const*,std::shared_ptr<ggl::VertexData> const*>(v402, (uint64_t *)&v804, (uint64_t *)&v806, 1uLL);
        v406 = (std::__shared_weak_count *)v805;
        if (v805)
        {
          v407 = (unint64_t *)(v805 + 8);
          do
            v408 = __ldaxr(v407);
          while (__stlxr(v408 - 1, v407));
          if (!v408)
          {
            ((void (*)(std::__shared_weak_count *))v406->__on_zero_shared)(v406);
            std::__shared_weak_count::__release_weak(v406);
          }
        }
        do
          v409 = __ldxr(v394);
        while (__stxr(v409 + 1, v394));
        v410 = *(std::__shared_weak_count **)(v398 + 104);
        *(_QWORD *)(v398 + 96) = v768;
        *(_QWORD *)(v398 + 104) = v393;
        if (v410)
        {
          v411 = (unint64_t *)&v410->__shared_owners_;
          do
            v412 = __ldaxr(v411);
          while (__stlxr(v412 - 1, v411));
          if (!v412)
          {
            ((void (*)(std::__shared_weak_count *))v410->__on_zero_shared)(v410);
            std::__shared_weak_count::__release_weak(v410);
          }
        }
        *(_QWORD *)v398 = &off_1E42BAF50;
        *(_QWORD *)(v398 + 16) = &unk_1E42BAF70;
        do
          v413 = __ldaxr(v394);
        while (__stlxr(v413 - 1, v394));
        if (!v413)
        {
          ((void (*)(std::__shared_weak_count *))v393->__on_zero_shared)(v393);
          std::__shared_weak_count::__release_weak(v393);
        }
        do
          v414 = __ldaxr(v390);
        while (__stlxr(v414 - 1, v390));
        if (!v414)
        {
          ((void (*)(std::__shared_weak_count *))v389->__on_zero_shared)(v389);
          std::__shared_weak_count::__release_weak(v389);
        }
        v416 = (uint64_t *)a1[5];
        v415 = a1[6];
        if ((unint64_t)v416 >= v415)
        {
          v418 = (uint64_t *)*v728;
          v419 = (char *)v416 - (_BYTE *)*v728;
          v420 = v419 >> 3;
          v421 = (v419 >> 3) + 1;
          if (v421 >> 61)
            abort();
          v422 = v415 - (_QWORD)v418;
          if (v422 >> 2 > v421)
            v421 = v422 >> 2;
          if ((unint64_t)v422 >= 0x7FFFFFFFFFFFFFF8)
            v423 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v423 = v421;
          if (v423)
          {
            if (v423 >> 61)
              goto LABEL_767;
            v424 = operator new(8 * v423);
          }
          else
          {
            v424 = 0;
          }
          v425 = (uint64_t *)&v424[8 * v420];
          *v425 = v398;
          v417 = v425 + 1;
          if (v416 == v418)
          {
            v418 = v416;
          }
          else
          {
            v426 = (char *)(v416 - 1) - (char *)v418;
            if (v426 < 0x58)
              goto LABEL_780;
            if ((unint64_t)((char *)v416 - &v424[v419]) < 0x20)
              goto LABEL_780;
            v427 = (v426 >> 3) + 1;
            v428 = &v424[8 * v420 - 16];
            v429 = v416 - 2;
            v430 = v427 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v431 = *(_OWORD *)v429;
              *(v428 - 1) = *((_OWORD *)v429 - 1);
              *v428 = v431;
              v428 -= 2;
              v429 -= 4;
              v430 -= 4;
            }
            while (v430);
            v425 -= v427 & 0x3FFFFFFFFFFFFFFCLL;
            v416 -= v427 & 0x3FFFFFFFFFFFFFFCLL;
            if (v427 != (v427 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_780:
              do
              {
                v432 = *--v416;
                *--v425 = v432;
              }
              while (v416 != v418);
              v418 = (uint64_t *)*v728;
            }
          }
          a1[4] = v425;
          a1[5] = v417;
          a1[6] = &v424[8 * v423];
          if (v418)
            operator delete(v418);
        }
        else
        {
          *v416 = v398;
          v417 = v416 + 1;
        }
        v388 = v753;
        a1[5] = v417;
        if (v384 < v385)
        {
          v433 = 0;
          v434 = v384;
          do
          {
            v435 = *(_QWORD *)&v745[8 * v434];
            v436 = *(_QWORD *)(v435 + 32);
            v437 = v436 + v433;
            v438 = *(_QWORD *)(v435 + 40) + v433;
            *(_QWORD *)(v435 + 32) = v437;
            *(_QWORD *)(v435 + 40) = v438;
            v433 = v438 - v436;
            ++v434;
          }
          while (v385 != v434);
          v439 = 0;
          do
          {
            v440 = *(uint64_t **)&v745[8 * v384];
            v441 = *v440;
            v442 = *v440 + v439;
            v443 = v440[1] + v439;
            *v440 = v442;
            v440[1] = v443;
            v444 = v440[2];
            v445 = v444 + v433;
            v446 = v440[3] + v433;
            v440[2] = v445;
            v440[3] = v446;
            v440[11] = v398;
            v447 = (_QWORD *)v440[7];
            v448 = (_QWORD *)v440[8];
            if (v447 != v448)
            {
              v449 = v440[4];
              do
              {
                v450 = (_QWORD *)*v447++;
                v451 = v450[2] - v450[1];
                v450[1] = v442;
                v442 += v451;
                v452 = v450[4] - v450[3];
                v450[2] = v442;
                v450[3] = v445;
                v445 += v452;
                v453 = v450[6] - v450[5];
                v450[4] = v445;
                v450[5] = v449;
                v449 += v453;
                v450[6] = v449;
              }
              while (v447 != v448);
            }
            v439 = v443 - v441;
            v433 = v446 - v444;
            ++v384;
          }
          while (v384 != v385);
        }
        v454 = (std::__shared_weak_count *)*((_QWORD *)&v788 + 1);
        if (!*((_QWORD *)&v788 + 1))
          goto LABEL_547;
        v455 = (unint64_t *)(*((_QWORD *)&v788 + 1) + 8);
        do
          v456 = __ldaxr(v455);
        while (__stlxr(v456 - 1, v455));
        if (!v456)
        {
          ((void (*)(std::__shared_weak_count *))v454->__on_zero_shared)(v454);
          std::__shared_weak_count::__release_weak(v454);
          v457 = v794;
          if (v794)
          {
LABEL_548:
            v458 = (unint64_t *)&v457->__shared_owners_;
            do
              v459 = __ldaxr(v458);
            while (__stlxr(v459 - 1, v458));
            if (!v459)
            {
              ((void (*)(std::__shared_weak_count *))v457->__on_zero_shared)(v457);
              std::__shared_weak_count::__release_weak(v457);
            }
          }
        }
        else
        {
LABEL_547:
          v457 = v794;
          if (v794)
            goto LABEL_548;
        }
        v387 = 0;
        v386 = 0;
        v384 = v385;
      }
      if (v385 < v388)
      {
        v460 = *(_QWORD **)&v745[8 * v385];
        v387 = v460[1] + v387 - *v460;
        v386 = v460[3] + v386 + v460[5] - (v460[2] + v460[4]);
      }
      if (++v385 <= v388)
        continue;
      break;
    }
    if (v745)
      operator delete(v745);
    if (__pa)
      operator delete(__pa);
    *a1 = &off_1E428C920;
    a1[23] = *(_QWORD *)a4;
    v477 = *(_QWORD *)(a4 + 8);
    a1[24] = v477;
    if (v477)
    {
      v478 = (unint64_t *)(v477 + 8);
      do
        v479 = __ldxr(v478);
      while (__stxr(v479 + 1, v478));
    }
    a1[25] = *a5;
    v480 = a5[1];
    a1[26] = v480;
    if (v480)
    {
      v481 = (unint64_t *)(v480 + 8);
      do
        v482 = __ldxr(v481);
      while (__stxr(v482 + 1, v481));
    }
    a1[27] = 0;
    v483 = a1[1];
    v714 = a1[2];
    if (v483 != v714)
    {
      v484 = 1.0;
      while (1)
      {
        v485 = *(uint64_t ***)(*(_QWORD *)v483 + 1400);
        v715 = v483;
        v716 = *(uint64_t ***)(*(_QWORD *)v483 + 1408);
        if (v485 != v716)
          break;
LABEL_585:
        v483 = v715 + 8;
        if (v715 + 8 == v714)
          return (uint64_t)a1;
      }
      while (1)
      {
        v486 = 0;
        v487 = *v485;
        v488 = **(_QWORD **)((*v485)[11] + 64);
        v489 = **v485;
        v490 = (*v485)[1];
        v788 = 0uLL;
        v491 = *(_QWORD *)(v488 + 8);
        v492 = v491 * v489;
        v493 = v491 * v490;
        if (v491 * v490 != v491 * v489)
        {
          if (a2 && *(_BYTE *)(v488 + 17) != 2)
            v486 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 56))(a2, v488, v492, v491 * v490, 1, 1);
          else
            v486 = *(_QWORD *)(v488 + 72) + v492;
        }
        *(_QWORD *)&v494 = a2;
        *((_QWORD *)&v494 + 1) = v488;
        v788 = v494;
        v789 = v492;
        v790 = v493;
        v792 = v486;
        v791 = 257;
        v495 = v487[2];
        v497 = v487[4];
        v496 = v487[5];
        if (v496 == v497)
        {
          v496 = v487[3];
        }
        else
        {
          if (v497 < v495)
            v495 = v487[4];
          if (v487[3] > v496)
            v496 = v487[3];
        }
        v498 = 0;
        v499 = *(_QWORD *)(v487[11] + 96);
        v783 = 0uLL;
        v500 = *(_QWORD *)(v499 + 8);
        v501 = v500 * v495;
        v502 = v500 * v496;
        if (v500 * v496 != v500 * v495)
        {
          if (a2 && *(_BYTE *)(v499 + 17) != 2)
            v498 = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 56))(a2, v499, v500 * v495, v502, 1, 1);
          else
            v498 = *(_QWORD *)(v499 + 72) + v501;
        }
        v719 = v485;
        *(_QWORD *)&v503 = a2;
        *((_QWORD *)&v503 + 1) = v499;
        v783 = v503;
        v784 = v501;
        v785 = v502;
        v787 = v498;
        v786 = 257;
        v504 = v487[2];
        v505 = v487[4];
        memset(v782, 0, sizeof(v782));
        memset(&v781, 0, sizeof(v781));
        v720 = v487;
        v506 = (uint64_t *)v487[7];
        v718 = v487 + 7;
        v507 = (uint64_t *)v487[8];
        v508 = a1;
        if (v506 != v507)
          break;
LABEL_715:
        {
          v712 = operator new();
          mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v712, "VectorKitLabels", 0x5ED09DD50000000FLL);
        }
        v690 = (_QWORD *)*v718;
        v691 = v720;
        if (*v718)
        {
          v692 = (_QWORD *)v720[8];
          v693 = (_QWORD *)*v718;
          if (v692 != v690)
          {
            do
            {
              v695 = (void (***)(_QWORD, _QWORD *))*--v692;
              v694 = v695;
              *v692 = 0;
              if (v695)
              {
                (**v694)(v694, v693);
                {
                  v697 = operator new();
                  mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v697, "VectorKitLabels", 0x5ED09DD50000000FLL);
                }
                (*(void (**)(uint64_t, void (***)(_QWORD, _QWORD *), uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc
                                                                                                  + 40))(mdm::Allocator::instance(void)::alloc, v694, 136);
              }
            }
            while (v692 != v690);
            v693 = (_QWORD *)*v718;
            v691 = v720;
          }
          v691[8] = (uint64_t)v690;
          (*(void (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)v691[10] + 40))(v691[10], v693, v691[9] - (_QWORD)v693);
          *v718 = 0;
          v718[1] = 0;
          v718[2] = 0;
        }
        *v718 = 0;
        v718[1] = 0;
        v718[2] = 0;
        if (v781.__begin_)
          operator delete(v781.__begin_);
        if (v782[0])
          operator delete(v782[0]);
        if (v787)
        {
          v698 = v784;
          v699 = v785;
          if (v785 != v784)
          {
            v700 = (_QWORD *)*((_QWORD *)&v783 + 1);
            v701 = v786;
            v702 = HIBYTE(v786);
            if ((_QWORD)v783 && *(_BYTE *)(*((_QWORD *)&v783 + 1) + 17) != 2)
              (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)v783 + 64))(v783, v787);
            if (v701 && !v702)
            {
              v703 = v700[7];
              v704 = v700[8];
              if (v704 == v703)
                v703 = v700[10] - v700[9];
              if (v698 < v703)
                v703 = v698;
              if (v704 <= v699)
                v704 = v699;
              if (v704 == v703)
                v704 = v703 + v700[10] - v700[9];
              v700[7] = v703;
              v700[8] = v704;
            }
          }
        }
        if (v792)
        {
          v705 = v789;
          v706 = v790;
          if (v790 != v789)
          {
            v707 = (_QWORD *)*((_QWORD *)&v788 + 1);
            v708 = v791;
            v709 = HIBYTE(v791);
            if ((_QWORD)v788 && *(_BYTE *)(*((_QWORD *)&v788 + 1) + 17) != 2)
              (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)v788 + 64))(v788, v792);
            if (v708 && !v709)
            {
              v710 = v707[7];
              v711 = v707[8];
              if (v711 == v710)
                v710 = v707[10] - v707[9];
              if (v705 < v710)
                v710 = v705;
              if (v711 <= v706)
                v711 = v706;
              if (v711 == v710)
                v711 = v710 + v707[10] - v707[9];
              v707[7] = v710;
              v707[8] = v711;
            }
          }
        }
        v485 = v719 + 1;
        if (v719 + 1 == v716)
          goto LABEL_585;
      }
      v509 = v486;
      v510 = v498 + 2 * v505 - 2 * v495;
      v511 = v498 + 2 * v504 - 2 * v495;
      v721 = (uint64_t *)v487[8];
      while (2)
      {
        v513 = *v506;
        v804 = v508;
        v805 = v513;
        v806 = xmmword_19FFB2F80;
        v807 = xmmword_19FFB3450;
        *(_OWORD *)v808 = xmmword_19FFB2FB0;
        *(_OWORD *)&v808[16] = xmmword_19FFB2F60;
        v809 = xmmword_19FFB2F70;
        v810 = xmmword_19FFB3460;
        v803 = v509;
        if (*(_QWORD *)(v513 + 16) != *(_QWORD *)(v513 + 8))
        {
          v802 = 1;
          md::Ribbons::RibbonWriter<md::Ribbons::SolidTrafficRibbonDescriptor>::eliminateDuplicates(v513, v782, &v781, (uint64_t *)&v802);
          v742 = (_WORD *)v511;
          v515 = v802;
          if (v802 >= 2)
          {
            v724 = (_WORD *)v510;
            v725 = v802 - 2;
            v516 = (char *)v782[0];
            begin = v781.__begin_;
            v811 = v509;
            v517 = *(int32x2_t *)v782[0];
            v518 = v802 - 1;
            if (v802 >= 9)
            {
              v519 = v518 & 0xFFFFFFFFFFFFFFF8;
              v514.i64[1] = *(_QWORD *)v782[0];
              v522 = (int8x16_t)vdupq_lane_s32(v517, 0);
              v523 = (char *)v782[0] + 40;
              v524 = 0uLL;
              v525 = v518 & 0xFFFFFFFFFFFFFFF8;
              v526 = 0uLL;
              do
              {
                v527 = (const float *)(v523 - 2);
                v814 = vld2q_f32(v527);
                v529 = *(int32x4_t *)v523;
                v528 = *((int8x16_t *)v523 + 1);
                v523 += 4;
                v530 = (float32x4_t)vuzp1q_s32(v529, (int32x4_t)v528);
                v531 = (float32x4_t)vuzp2q_s32(v529, (int32x4_t)v528);
                v532 = vsubq_f32(v814.val[0], (float32x4_t)vextq_s8(v522, (int8x16_t)v814.val[0], 0xCuLL));
                v533 = vsubq_f32(v530, (float32x4_t)vextq_s8((int8x16_t)v814.val[0], (int8x16_t)v530, 0xCuLL));
                v534 = vsubq_f32(v814.val[1], (float32x4_t)vextq_s8(v514, (int8x16_t)v814.val[1], 0xCuLL));
                v814.val[0] = vsubq_f32(v531, (float32x4_t)vextq_s8((int8x16_t)v814.val[1], (int8x16_t)v531, 0xCuLL));
                v524 = vaddq_f32(vsqrtq_f32(vmlaq_f32(vmulq_f32(v532, v532), v534, v534)), v524);
                v526 = vaddq_f32(vsqrtq_f32(vmlaq_f32(vmulq_f32(v533, v533), v814.val[0], v814.val[0])), v526);
                v514 = (int8x16_t)v531;
                v522 = (int8x16_t)v530;
                v525 -= 8;
              }
              while (v525);
              v535 = vaddq_f32(v526, v524);
              v520 = vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v535, v535));
              if (v518 != v519)
              {
                v521 = (float32x2_t)vextq_s8(v528, v528, 8uLL).u64[0];
                goto LABEL_619;
              }
            }
            else
            {
              v519 = 0;
              v520 = 0.0;
              v521 = *(float32x2_t *)v782[0];
LABEL_619:
              v536 = ~v519 + v802;
              v537 = (float32x2_t *)((char *)v782[0] + 8 * v519 + 8);
              do
              {
                v538 = *v537++;
                v539 = vsub_f32(v538, v521);
                v520 = sqrtf(vaddv_f32(vmul_f32(v539, v539))) + v520;
                v521 = v538;
                --v536;
              }
              while (v536);
            }
            v540 = v520;
            v541 = v484 / v520;
            if (v540 <= 1.0e-10)
              v542 = 0.0;
            else
              v542 = v541;
            v543 = (float *)((char *)v782[0] + 8);
            v544 = sqrtf((float)((float)(*((float *)v782[0] + 2) - *(float *)v517.i32)* (float)(*((float *)v782[0] + 2) - *(float *)v517.i32))+ (float)((float)(*((float *)v782[0] + 3) - *(float *)&v517.i32[1])* (float)(*((float *)v782[0] + 3) - *(float *)&v517.i32[1])));
            v545 = 1;
            while (vabds_f32(*v543, *(float *)v517.i32) < 1.0e-10)
            {
              v546 = v543[1];
              if (vabds_f32(v546, *(float *)&v517.i32[1]) >= 1.0e-10)
                goto LABEL_630;
              ++v545;
              v543 += 2;
              if (v802 == v545)
              {
                v547 = 1.0;
                v548 = 0.0;
                goto LABEL_631;
              }
            }
            v546 = v543[1];
LABEL_630:
            v549 = v546 - *(float *)&v517.i32[1];
            v550 = *v543 - *(float *)v517.i32;
            v551 = v484 / sqrtf((float)(v550 * v550) + (float)(v549 * v549));
            v547 = v551 * v550;
            v548 = v551 * v549;
LABEL_631:
            v552 = -v548;
            v793 = (void *)*v781.__begin_;
            LODWORD(v794) = v517.i32[0];
            v553 = *((_DWORD *)v782[0] + 1);
            v799 = 0;
            HIDWORD(v794) = v553;
            v796 = -v548;
            v797 = v547;
            v801 = 0;
            if (*(_BYTE *)(v805 + 96))
            {
              v800 = 1;
              v795.f32[0] = v552 - (float)(v547 * *((float *)&v810 + 2));
              v795.f32[1] = v547 - (float)(v548 * *((float *)&v810 + 2));
              v795.f32[2] = v548 - (float)(v547 * *((float *)&v810 + 2));
              v795.f32[3] = -(float)((float)(v548 * *((float *)&v810 + 2)) + v547);
              v554 = (char *)&v806 + 12;
              v555 = &v806;
              if (!*(_BYTE *)(v805 + 120))
                goto LABEL_635;
              if (*(_BYTE *)(v805 + 120) == 1)
              {
                v555 = (__int128 *)v808;
                v554 = &v808[12];
LABEL_635:
                v556 = *((_DWORD *)v555 + 2);
                v798.i64[0] = *(_QWORD *)v555;
                v798.i64[1] = __PAIR64__(*(_DWORD *)v554, v556);
              }
              HIDWORD(v799) = 0;
              v769 = v548;
              v777 = v547;
              md::Ribbons::RibbonWriter<md::Ribbons::PolylineOverlayRibbonDescriptor>::writeVertex((uint64_t)&v804, &v803, (float *)&v793);
              v548 = v769;
              v547 = v777;
            }
            v722 = v509;
            v778 = __PAIR64__(LODWORD(v548), LODWORD(v547));
            v800 = 0;
            v795.i64[0] = __PAIR64__(LODWORD(v547), LODWORD(v552));
            v795.f32[2] = v548;
            v795.f32[3] = -v547;
            v798 = *(int8x16_t *)v808;
            md::Ribbons::RibbonWriter<md::Ribbons::PolylineOverlayRibbonDescriptor>::writeVertex((uint64_t)&v804, &v803, (float *)&v793);
            if (v518 >= 2)
            {
              v557 = (float *)(v516 + 16);
              v558 = v725;
              v559 = 1;
              v560 = v544;
              v561 = (int32x2_t)v778;
              v746 = v542;
              while (1)
              {
                v793 = (void *)begin[v559];
                v564 = (float *)&v516[8 * v559];
                v565 = *v564;
                v566 = v564[1];
                if (++v559 >= v515)
                {
LABEL_647:
                  v570 = (float32x2_t)vdup_lane_s32(v561, 1);
                  v571 = v561;
                  v572 = *(float *)v561.i32;
                }
                else
                {
                  v567 = v557;
                  v568 = v558;
                  while (vabds_f32(*v567, v565) < 1.0e-10)
                  {
                    v569 = v567[1];
                    if (vabds_f32(v569, v566) >= 1.0e-10)
                      goto LABEL_649;
                    v567 += 2;
                    if (!--v568)
                      goto LABEL_647;
                  }
                  v569 = v567[1];
LABEL_649:
                  v573 = v569 - v566;
                  v574 = *v567 - v565;
                  v575 = v484 / sqrtf((float)(v574 * v574) + (float)(v573 * v573));
                  v572 = v575 * v574;
                  *(float *)&v576 = v575 * v573;
                  *(float *)v571.i32 = v575 * v574;
                  v571.i32[1] = v576;
                  v570 = (float32x2_t)__PAIR64__(v561.u32[1], v576);
                }
                v779 = v571;
                v577 = (float *)&v516[8 * v559];
                v578 = *v577;
                v579 = v577[1];
                v580 = v572 + *(float *)v561.i32;
                v581 = vaddv_f32(v570);
                v582 = (float)(v580 * v580) + (float)(v581 * v581);
                if (v582 <= 0.0)
                {
                  v585 = *(float *)&v561.i32[1];
                  v584 = *(float *)v561.i32;
                }
                else
                {
                  v583 = v484 / sqrtf(v582);
                  v584 = -(float)(v581 * v583);
                  v585 = v583 * v580;
                }
                v562 = v484
                     - (float)((float)((float)(v584 * v572) + (float)(v585 * v570.f32[0]))
                             * (float)((float)(v584 * v572) + (float)(v585 * v570.f32[0])));
                *(float *)&v794 = *v564;
                v586 = *((_DWORD *)v564 + 1);
                *((float *)&v799 + 1) = v560 * v542;
                v798 = *(int8x16_t *)v808;
                HIDWORD(v794) = v586;
                v796 = v584;
                *(float *)&v799 = v560;
                v797 = v585;
                v801 = 1;
                v587 = v805;
                v588 = *(float *)(v805 + 128);
                if (v588 >= 1.5708)
                  goto LABEL_640;
                v761 = v579;
                v765 = v578;
                v749 = v484
                     - (float)((float)((float)(v584 * v572) + (float)(v585 * v570.f32[0]))
                             * (float)((float)(v584 * v572) + (float)(v585 * v570.f32[0])));
                v754 = v560;
                v589 = v570.f32[1];
                v770 = v561;
                v590 = atan2f(v570.f32[0], v572);
                v591 = v590 - atan2f(v589, *(float *)v770.i32);
                v592 = v591;
                if (v591 <= 3.14159265)
                {
                  v593 = v765;
                  v594 = v761;
                  if (v592 < -3.14159265)
                    v591 = v592 + 6.28318531;
                }
                else
                {
                  v591 = v592 + -6.28318531;
                  v593 = v765;
                  v594 = v761;
                }
                v595 = fabsf(v591);
                v596 = *(unsigned __int8 *)(v587 + 121);
                v484 = 1.0;
                if (v596 == 2)
                {
                  v597 = sin(v595 * -0.5 + 1.57079633);
                  v594 = v761;
                  v593 = v765;
                  *(float *)&v597 = 1.0 / v597;
                  if (*(float *)(v587 + 124) < *(float *)&v597)
                    v596 = 1;
                  else
                    v596 = 2;
                }
                v598 = sqrtf((float)((float)(v593 - v565) * (float)(v593 - v565))+ (float)((float)(v594 - v566) * (float)(v594 - v566)));
                v599 = (unint64_t)fmaxf(ceilf(v595 / v588), 1.0);
                _V5.S[1] = v770.i32[1];
                if (v599 <= 1)
                  break;
                if (v596 == 2)
                {
                  v762 = v598;
                  _S10 = v770.i32[1];
                  __asm { FMLA            S0, S10, V5.S[1] }
                  v618 = 1.0 / sqrtf(_S0);
                  _V2.S[1] = v779.i32[1];
                  _S0 = v779.i32[1];
                  __asm { FMLA            S1, S0, V2.S[1] }
                  v622 = 1.0 / sqrtf(_S1);
                  v731 = -(float)(*(float *)&v779.i32[1] * v622);
                  v729 = v622 * *(float *)v779.i32;
                  v623 = sqrtf(fmaxf(v749, 0.00001));
                  v750 = v584 / v623;
                  v624 = (float)(v584 / v623) - v584;
                  v727 = v585 / v623;
                  v625 = (float)(v585 / v623) - v585;
                  v626 = atan2f(v625, v624);
                  v627 = atan2f(*(float *)&v770.i32[1], *(float *)v770.i32);
                  v766 = sqrtf((float)(v624 * v624) + (float)(v625 * v625)) * sinf(v626 - v627);
                  v628 = 1.0 - v766;
                  v629 = -(float)(*(float *)&v770.i32[1] * v618);
                  v795.f32[0] = v629;
                  v795.f32[1] = v618 * *(float *)v770.i32;
                  v795.f32[2] = -(float)(v618 * (float)-*(float *)&v770.i32[1]);
                  v795.f32[3] = -(float)(v618 * *(float *)v770.i32);
                  md::Ribbons::RibbonWriter<md::Ribbons::PolylineOverlayRibbonDescriptor>::writeVertex((uint64_t)&v804, &v803, (float *)&v793);
                  if (v591 >= 0.0)
                  {
                    v795.i64[0] = 0;
                    v795.f32[2] = -(float)(v624 + (float)(v628 * v629));
                    v795.f32[3] = -(float)(v625 + (float)(v628 * (float)(v618 * *(float *)v770.i32)));
                    v798 = vextq_s8(*(int8x16_t *)&v808[8], *(int8x16_t *)&v808[8], 8uLL);
                    md::Ribbons::RibbonWriter<md::Ribbons::PolylineOverlayRibbonDescriptor>::writeVertex((uint64_t)&v804, &v803, (float *)&v793);
                    v795.f32[0] = -v624;
                    v795.f32[1] = -v625;
                    v795.f32[2] = -v750;
                    v795.f32[3] = -v727;
                    *(float32x2_t *)v798.i8 = vmul_n_f32(*(float32x2_t *)&v808[8], v766);
                    v798.i64[1] = *(_QWORD *)&v808[8];
                    md::Ribbons::RibbonWriter<md::Ribbons::PolylineOverlayRibbonDescriptor>::writeVertex((uint64_t)&v804, &v803, (float *)&v793);
                    v795.f32[0] = -v624;
                    v795.f32[1] = -v625;
                    v630 = v731;
                    *(float *)&v639 = -(float)(v624 + (float)(v628 * v731));
                    *(float *)&v640 = -(float)(v625 + (float)(v628 * v729));
                    v633 = v729;
                    v795.i64[1] = __PAIR64__(v640, v639);
                    *(float32x2_t *)v798.i8 = vmul_n_f32(*(float32x2_t *)&v808[8], v766);
                    v798.i64[1] = *(_QWORD *)&v808[8];
                    md::Ribbons::RibbonWriter<md::Ribbons::PolylineOverlayRibbonDescriptor>::writeVertex((uint64_t)&v804, &v803, (float *)&v793);
                    v795.i64[0] = 0;
                    v636 = &v808[20];
                    v635 = &v808[16];
                  }
                  else
                  {
                    v795.f32[0] = v624 + (float)(v628 * v629);
                    v795.f32[1] = v625 + (float)(v628 * (float)(v618 * *(float *)v770.i32));
                    v795.i64[1] = __PAIR64__(LODWORD(v625), LODWORD(v624));
                    v798.i64[0] = *(_QWORD *)v808;
                    v798.u64[1] = (unint64_t)vmul_n_f32(*(float32x2_t *)v808, v766);
                    md::Ribbons::RibbonWriter<md::Ribbons::PolylineOverlayRibbonDescriptor>::writeVertex((uint64_t)&v804, &v803, (float *)&v793);
                    v795.i64[0] = __PAIR64__(LODWORD(v727), LODWORD(v750));
                    v795.i64[1] = __PAIR64__(LODWORD(v625), LODWORD(v624));
                    v798.i64[0] = *(_QWORD *)v808;
                    v798.u64[1] = (unint64_t)vmul_n_f32(*(float32x2_t *)v808, v766);
                    md::Ribbons::RibbonWriter<md::Ribbons::PolylineOverlayRibbonDescriptor>::writeVertex((uint64_t)&v804, &v803, (float *)&v793);
                    v630 = v731;
                    *(float *)&v631 = v624 + (float)(v628 * v731);
                    *(float *)&v632 = v625 + (float)(v628 * v729);
                    v633 = v729;
                    v795 = (float32x4_t)__PAIR64__(v632, v631);
                    v634.i64[0] = *(_QWORD *)v808;
                    v634.i64[1] = *(_QWORD *)&v808[16];
                    v798 = v634;
                    md::Ribbons::RibbonWriter<md::Ribbons::PolylineOverlayRibbonDescriptor>::writeVertex((uint64_t)&v804, &v803, (float *)&v793);
                    v795.i64[0] = __PAIR64__(LODWORD(v729), LODWORD(v731));
                    v635 = v808;
                    v636 = &v808[4];
                  }
                  v542 = v746;
                  v601 = v762;
                  v795.f32[2] = -v630;
                  v795.f32[3] = -v633;
                  v641 = *(_DWORD *)v636;
                  v798.i32[0] = *(_DWORD *)v635;
                  v798.i32[1] = v641;
                  v798.i64[1] = *(_QWORD *)&v808[8];
                  md::Ribbons::RibbonWriter<md::Ribbons::PolylineOverlayRibbonDescriptor>::writeVertex((uint64_t)&v804, &v803, (float *)&v793);
                  v795.i64[0] = __PAIR64__(LODWORD(v633), LODWORD(v630));
                  v795.f32[2] = -v630;
                  v795.f32[3] = -v633;
                  v798 = *(int8x16_t *)v808;
                }
                else
                {
                  if (v596 != 1)
                  {
                    for (i = 0; i != v599; ++i)
                    {
                      v638 = __sincosf_stret((float)((float)((float)(int)i * (float)(1.0 / (float)((float)v599 + -1.0))) + -0.5)* v591);
                      v796 = -(float)((float)(v638.__sinval * v585) - (float)(v638.__cosval * v584));
                      v797 = (float)(v638.__sinval * v584) + (float)(v638.__cosval * v585);
                      v795.f32[0] = v796;
                      v795.f32[1] = v797;
                      v795.f32[2] = -(float)((float)(v638.__cosval * v584) - (float)(v638.__sinval * v585));
                      v795.f32[3] = -v797;
                      md::Ribbons::RibbonWriter<md::Ribbons::PolylineOverlayRibbonDescriptor>::writeVertex((uint64_t)&v804, &v803, (float *)&v793);
                      v801 = 0;
                    }
                    v560 = v598 + v754;
                    v542 = v746;
                    goto LABEL_641;
                  }
                  v601 = v598;
                  _S0 = v770.i32[1];
                  __asm { FMLA            S2, S0, V5.S[1] }
                  v607 = 1.0 / sqrtf(_S2);
                  v608 = -(float)(*(float *)&v770.i32[1] * v607);
                  v609 = v607 * *(float *)v770.i32;
                  _V4.S[1] = v779.i32[1];
                  _S0 = v779.i32[1];
                  __asm { FMLA            S3, S0, V4.S[1] }
                  v613 = 1.0 / sqrtf(_S3);
                  v614 = -(float)(*(float *)&v779.i32[1] * v613);
                  v615 = v613 * *(float *)v779.i32;
                  v795.f32[0] = v608;
                  v795.f32[1] = v607 * *(float *)v770.i32;
                  v795.f32[2] = -(float)(v607 * (float)-*(float *)&v770.i32[1]);
                  v795.f32[3] = -(float)(v607 * *(float *)v770.i32);
                  md::Ribbons::RibbonWriter<md::Ribbons::PolylineOverlayRibbonDescriptor>::writeVertex((uint64_t)&v804, &v803, (float *)&v793);
                  if (v591 >= 0.0)
                  {
                    v795.i64[0] = 0;
                    v795.f32[2] = -v614;
                    v795.f32[3] = -v615;
                    v798.i64[0] = *(_QWORD *)&v808[16];
                    md::Ribbons::RibbonWriter<md::Ribbons::PolylineOverlayRibbonDescriptor>::writeVertex((uint64_t)&v804, &v803, (float *)&v793);
                    v798.i64[0] = *(_QWORD *)v808;
                  }
                  else
                  {
                    v795 = (float32x4_t)__PAIR64__(LODWORD(v609), LODWORD(v608));
                    v798.i64[1] = *(_QWORD *)&v808[16];
                    md::Ribbons::RibbonWriter<md::Ribbons::PolylineOverlayRibbonDescriptor>::writeVertex((uint64_t)&v804, &v803, (float *)&v793);
                    v798.i64[1] = *(_QWORD *)&v808[8];
                  }
                  v542 = v746;
                  v795.i64[0] = __PAIR64__(LODWORD(v615), LODWORD(v614));
                  v795.f32[2] = -v614;
                  v795.f32[3] = -v615;
                }
                md::Ribbons::RibbonWriter<md::Ribbons::PolylineOverlayRibbonDescriptor>::writeVertex((uint64_t)&v804, &v803, (float *)&v793);
                v560 = v601 + v754;
                v484 = 1.0;
LABEL_641:
                --v558;
                v557 += 2;
                v561 = v779;
                if (v559 == v518)
                  goto LABEL_678;
              }
              v560 = v598 + v754;
              v542 = v746;
              v562 = v749;
LABEL_640:
              v563 = sqrtf(fmaxf(v562, 0.1));
              v795.f32[0] = v584 / v563;
              v795.f32[1] = v585 / v563;
              v795.f32[2] = -(float)(v584 / v563);
              v795.f32[3] = -(float)(v585 / v563);
              md::Ribbons::RibbonWriter<md::Ribbons::PolylineOverlayRibbonDescriptor>::writeVertex((uint64_t)&v804, &v803, (float *)&v793);
              goto LABEL_641;
            }
            v560 = v544;
            v561 = (int32x2_t)v778;
LABEL_678:
            v642 = (float *)&v516[8 * v518];
            v643 = (float *)&v516[8 * v725];
            v508 = a1;
            v507 = v721;
            if (vabds_f32(*v642, *v643) >= 1.0e-10)
            {
              v647 = v642[1] - v643[1];
              v509 = v722;
            }
            else
            {
              v644 = v643[1];
              v645 = v642[1];
              v509 = v722;
              if (vabds_f32(v645, v644) < 1.0e-10)
              {
                v646 = *(float *)&v561.i32[1];
                goto LABEL_684;
              }
              v647 = v645 - v644;
            }
            v648 = *v642 - *v643;
            v649 = v484 / sqrtf((float)(v648 * v648) + (float)(v647 * v647));
            *(float *)v561.i32 = v649 * v648;
            v646 = v649 * v647;
            *(float *)&v561.i32[1] = v646;
LABEL_684:
            v771 = LODWORD(v646);
            v780 = (float32x2_t)v561;
            v795.f32[0] = -v646;
            *(uint64_t *)((char *)v795.i64 + 4) = __PAIR64__(LODWORD(v646), v561.u32[0]);
            v795.f32[3] = -*(float *)v561.i32;
            v801 = 0;
            v793 = (void *)begin[v518];
            v794 = *(std::__shared_weak_count **)v642;
            v796 = -v646;
            v797 = *(float *)v561.i32;
            *(float *)&v799 = v560;
            *((float *)&v799 + 1) = v560 * v542;
            md::Ribbons::RibbonWriter<md::Ribbons::PolylineOverlayRibbonDescriptor>::writeVertex((uint64_t)&v804, &v803, (float *)&v793);
            v650 = v805;
            if (*(_BYTE *)(v805 + 97))
            {
              v800 = 1;
              *(float32x2_t *)v651.f32 = vmul_n_f32(v780, *((float *)&v810 + 3));
              v651.i64[1] = v651.i64[0];
              *(int32x2_t *)v652.f32 = vdup_lane_s32((int32x2_t)v780, 0);
              v652.i32[0] = v771;
              v652.i64[1] = v652.i64[0];
              v653 = vsubq_f32(v651, v652);
              v654 = vaddq_f32(v651, v652);
              v654.i32[0] = v653.i32[0];
              v654.i32[3] = v653.i32[3];
              v795 = v654;
              v655 = (char *)&v809 + 4;
              v656 = &v808[24];
              if (!*(_BYTE *)(v805 + 120))
                goto LABEL_688;
              if (*(_BYTE *)(v805 + 120) == 1)
              {
                v656 = v808;
                v655 = &v808[12];
LABEL_688:
                v657 = *((_DWORD *)v656 + 2);
                v798.i64[0] = *(_QWORD *)v656;
                v798.i64[1] = __PAIR64__(*(_DWORD *)v655, v657);
              }
              md::Ribbons::RibbonWriter<md::Ribbons::PolylineOverlayRibbonDescriptor>::writeVertex((uint64_t)&v804, &v803, (float *)&v793);
              v650 = v805;
            }
            v658.i64[0] = 0x1000100010001;
            v658.i64[1] = 0x1000100010001;
            v659 = *(_QWORD *)(v650 + 8);
            v660 = *(_QWORD *)(v650 + 16) - v659;
            v661 = v660 >> 1;
            if (v660 >= 4)
            {
              v662 = *(_QWORD *)(v650 + 8);
              v663 = 2;
              if (v661 > 2)
                v663 = v661;
              if (v663 >= 3)
              {
                v666 = 0;
                v667 = v663 - 1;
                v668 = (v663 - 1) & 0xFFFFFFFFFFFFFFFELL;
                v669 = v742 + 6;
                do
                {
                  v670 = v659 + 2 * v666;
                  *(v669 - 6) = v670;
                  *v669 = v670 + 2;
                  *(v669 - 5) = v670 + 1;
                  v669[1] = v670 + 3;
                  *(v669 - 4) = v670 + 2;
                  v669[2] = v670 + 4;
                  *(v669 - 3) = v670 + 1;
                  v669[3] = v670 + 3;
                  *(v669 - 2) = v670 + 3;
                  v669[4] = v670 + 5;
                  v666 += 2;
                  *(v669 - 1) = v670 + 2;
                  v669[5] = v670 + 4;
                  v669 += 12;
                }
                while (v668 != v666);
                if (v667 != v668)
                {
                  v664 = v667 | 1;
                  LODWORD(v662) = 2 * v668 + v659;
                  v665 = &v742[6 * v668];
                  goto LABEL_699;
                }
              }
              else
              {
                v664 = 1;
                v665 = v742;
LABEL_699:
                v671 = v663 - v664;
                do
                {
                  *v665 = v662;
                  v672 = v662 + 1;
                  v665[1] = v662 + 1;
                  v673 = v662 + 3;
                  LODWORD(v662) = v662 + 2;
                  v665[2] = v662;
                  v665[3] = v672;
                  v665[4] = v673;
                  v665[5] = v662;
                  v665 += 6;
                  --v671;
                }
                while (v671);
              }
            }
            if (*(_QWORD *)(v650 + 48) != *(_QWORD *)(v650 + 40))
            {
              v674 = *(char *)(v650 + 97);
              v675 = *(_BYTE *)(v650 + 96) ? 2 : 1;
              if (v661 - v674 > v675)
              {
                v676 = v661 - (v675 + v674);
                v677 = v724;
                if (v676 < 8)
                {
LABEL_711:
                  v687 = v675 + v674 - v661;
                  v688 = v659 + 2 * v675;
                  do
                  {
                    *v677 = v688 - 2;
                    v677[1] = v688;
                    v688 += 2;
                    v677 += 2;
                    _CF = __CFADD__(v687++, 1);
                  }
                  while (!_CF);
                }
                else
                {
                  v678 = v676 & 0xFFFFFFFFFFFFFFF8;
                  v679 = vdupq_n_s64(v675);
                  v680 = vaddq_s64(v679, (int64x2_t)xmmword_19FFB2FE0);
                  v681 = vaddq_s64(v679, (int64x2_t)xmmword_19FFB2FF0);
                  v682 = vaddq_s64(v679, (int64x2_t)xmmword_19FFB3000);
                  v683 = vaddq_s64(v679, (int64x2_t)xmmword_19FFB2E40);
                  v684 = vdupq_n_s64(v659);
                  v685 = v724;
                  v686 = v676 & 0xFFFFFFFFFFFFFFF8;
                  do
                  {
                    v813.val[1] = vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vaddq_s64(v684, vaddq_s64(v683, v683)), (int32x4_t)vaddq_s64(v684, vaddq_s64(v682, v682))), (int16x8_t)vuzp1q_s32((int32x4_t)vaddq_s64(v684, vaddq_s64(v681, v681)), (int32x4_t)vaddq_s64(v684, vaddq_s64(v680, v680))));
                    v813.val[0] = vaddq_s16(v813.val[1], v658);
                    vst2q_s16(v685, v813);
                    v685 += 16;
                    v813.val[0] = (int16x8_t)vdupq_n_s64(8uLL);
                    v681 = vaddq_s64(v681, (int64x2_t)v813.val[0]);
                    v682 = vaddq_s64(v682, (int64x2_t)v813.val[0]);
                    v683 = vaddq_s64(v683, (int64x2_t)v813.val[0]);
                    v680 = vaddq_s64(v680, (int64x2_t)v813.val[0]);
                    v686 -= 8;
                  }
                  while (v686);
                  if (v676 != v678)
                  {
                    v675 |= v678;
                    v677 = &v724[2 * (v676 & 0xFFFFFFFFFFFFFFF8)];
                    goto LABEL_711;
                  }
                }
              }
            }
            v510 = (uint64_t)v724;
          }
          v511 = (uint64_t)v742;
        }
        v512 = (_QWORD *)*v506++;
        v509 += 20 * (v512[2] - v512[1]);
        v511 += 2 * (v512[4] - v512[3]);
        v510 += 2 * (v512[6] - v512[5]);
        if (v506 == v507)
          goto LABEL_715;
        continue;
      }
    }
    return (uint64_t)a1;
  }
  else
  {
    result = std::__throw_bad_optional_access[abi:nn180100]();
    __break(1u);
  }
  return result;
}

void sub_19F94B648(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void **a37,uint64_t a38,void **a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t *a47,uint64_t a48,void *a49)
{
  void *v49;
  uint64_t v50;
  void *v52;
  void *v53;

  MEMORY[0x1A1AF4E00](v50, 0x1020C4007FF0C4BLL);
  if (v49)
    operator delete(v49);
  std::unique_ptr<gdc::GlobeTileGrid>::~unique_ptr[abi:nn180100](a47);
  v52 = *a39;
  if (*a39)
  {
    *(_QWORD *)(a33 + 40) = v52;
    operator delete(v52);
  }
  v53 = *a37;
  if (*a37)
  {
    *(_QWORD *)(a33 + 16) = v53;
    operator delete(v53);
    if (a49)
    {
LABEL_9:
      operator delete(a49);
      _Unwind_Resume(a1);
    }
  }
  else if (a49)
  {
    goto LABEL_9;
  }
  _Unwind_Resume(a1);
}

uint64_t md::Ribbons::RibbonWriter<md::Ribbons::PolylineOverlayRibbonDescriptor>::writeVertex(uint64_t result, uint64_t *a2, float *a3)
{
  double v3;
  uint64_t v4;
  int v5;
  float v6;
  BOOL v7;
  float v8;
  int v9;
  float v10;
  float v11;
  uint64_t v12;
  float32x4_t v13;
  float32x2_t v14;
  float v15;
  float32x4_t v16;
  uint64_t v17;
  float v18;
  uint64_t v19;
  int v20;
  float v21;
  float v22;
  int v23;
  float v24;
  float v25;
  float32x4_t v26;
  float32x2_t v27;
  float v28;
  float32x4_t v29;
  uint64_t v30;
  float v31;
  uint64_t v32;

  v3 = a3[15];
  v4 = *(_QWORD *)a3;
  v5 = 0;
  v6 = fmaxf(a3[2], 0.0);
  v7 = v6 < 1.0;
  v8 = v6 * 65535.0;
  if (!v7)
    v8 = 65535.0;
  v9 = (int)v8;
  v10 = fmaxf(a3[3], 0.0);
  if (v10 >= 1.0)
    v11 = 65535.0;
  else
    v11 = v10 * 65535.0;
  v12 = *a2;
  *(_WORD *)v12 = v9;
  *(_WORD *)(v12 + 2) = (int)v11;
  v13.i64[0] = *((_QWORD *)a3 + 2);
  v14 = vabs_f32(*(float32x2_t *)v13.f32);
  v15 = fmaxf(v14.f32[0], v14.f32[1]);
  if (v15 > 4.0)
    *(float32x2_t *)v13.f32 = vmul_n_f32(*(float32x2_t *)v13.f32, 4.0 / v15);
  v13.i64[1] = *((_QWORD *)a3 + 5);
  v16.i64[0] = 0xBF000000BF000000;
  v16.i64[1] = 0xBF000000BF000000;
  *(int16x4_t *)(v12 + 4) = vmovn_s32(vcvtq_s32_f32(vmlaq_f32(v16, (float32x4_t)xmmword_19FFB2FA0, v13)));
  v17 = *(_QWORD *)(result + 8);
  v18 = *(double *)(v17 + 104) + *(double *)(v17 + 112) * v3;
  *(float *)(v12 + 12) = v18;
  v19 = *(_QWORD *)(v17 + 80);
  if (v19)
    v5 = *(_DWORD *)(v19 + 4 * v4);
  *(_DWORD *)(v12 + 16) = v5;
  *a2 = v12 + 20;
  v20 = 0;
  v21 = fmaxf(a3[2], 0.0);
  v7 = v21 < 1.0;
  v22 = v21 * 65535.0;
  if (!v7)
    v22 = 65535.0;
  v23 = (int)v22;
  v24 = fmaxf(a3[3], 0.0);
  if (v24 >= 1.0)
    v25 = 65535.0;
  else
    v25 = v24 * 65535.0;
  *(_WORD *)(v12 + 20) = v23;
  *(_WORD *)(v12 + 22) = (int)v25;
  v26.i64[0] = *((_QWORD *)a3 + 3);
  v27 = vabs_f32(*(float32x2_t *)v26.f32);
  v28 = fmaxf(v27.f32[0], v27.f32[1]);
  if (v28 > 4.0)
    *(float32x2_t *)v26.f32 = vmul_n_f32(*(float32x2_t *)v26.f32, 4.0 / v28);
  v26.i64[1] = *((_QWORD *)a3 + 6);
  v29.i64[0] = 0xBF000000BF000000;
  v29.i64[1] = 0xBF000000BF000000;
  *(int16x4_t *)(v12 + 24) = vmovn_s32(vcvtq_s32_f32(vmlaq_f32(v29, (float32x4_t)xmmword_19FFB2FA0, v26)));
  v30 = *(_QWORD *)(result + 8);
  v31 = *(double *)(v30 + 104) + *(double *)(v30 + 112) * v3;
  *(float *)(v12 + 32) = v31;
  v32 = *(_QWORD *)(v30 + 80);
  if (v32)
    v20 = *(_DWORD *)(v32 + 4 * v4);
  *(_DWORD *)(v12 + 36) = v20;
  *a2 = v12 + 40;
  return result;
}

void std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::PolylineOverlayRibbon::DefaultVbo>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E0170;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::PolylineOverlayRibbon::DefaultVbo>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E0170;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::PolylineOverlayRibbon::DefaultVbo>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t std::__hash_table<std::__hash_value_type<unsigned int,std::vector<std::unique_ptr<md::PolylineOverlayRibbon,mdm::TypeDeleter<md::PolylineOverlayRibbon>>,geo::StdAllocator<std::unique_ptr<md::PolylineOverlayRibbon,mdm::TypeDeleter<md::PolylineOverlayRibbon>>,mdm::Allocator>>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::vector<std::unique_ptr<md::PolylineOverlayRibbon,mdm::TypeDeleter<md::PolylineOverlayRibbon>>,geo::StdAllocator<std::unique_ptr<md::PolylineOverlayRibbon,mdm::TypeDeleter<md::PolylineOverlayRibbon>>,mdm::Allocator>>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::vector<std::unique_ptr<md::PolylineOverlayRibbon,mdm::TypeDeleter<md::PolylineOverlayRibbon>>,geo::StdAllocator<std::unique_ptr<md::PolylineOverlayRibbon,mdm::TypeDeleter<md::PolylineOverlayRibbon>>,mdm::Allocator>>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,geo::StdAllocator<std::__hash_value_type<unsigned int,std::vector<std::unique_ptr<md::PolylineOverlayRibbon,mdm::TypeDeleter<md::PolylineOverlayRibbon>>,geo::StdAllocator<std::unique_ptr<md::PolylineOverlayRibbon,mdm::TypeDeleter<md::PolylineOverlayRibbon>>,mdm::Allocator>>>,mdm::Allocator>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(float *a1, unsigned int a2, _DWORD **a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  uint64_t *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unsigned __int8 v13;
  float v14;
  float v15;
  _BOOL8 v16;
  unint64_t v17;
  unint64_t v18;
  size_t prime;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t *v24;
  size_t v25;
  size_t v26;
  size_t v27;
  _QWORD *i;
  size_t v29;
  uint64_t v30;
  unint64_t v31;
  uint8x8_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  size_t v36;
  uint64_t *v37;
  unint64_t v38;
  uint64_t v40;
  uint64_t v41;

  v6 = a2;
  v7 = *((_QWORD *)a1 + 1);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = a2;
      if (v7 <= a2)
        v3 = a2 % v7;
    }
    else
    {
      v3 = ((_DWORD)v7 - 1) & a2;
    }
    v9 = *(uint64_t **)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      v10 = *v9;
      if (*v9)
      {
        if (v8.u32[0] < 2uLL)
        {
          while (1)
          {
            v12 = *(_QWORD *)(v10 + 8);
            if (v12 == a2)
            {
              if (*(_DWORD *)(v10 + 16) == a2)
                return v10;
            }
            else if ((v12 & (v7 - 1)) != v3)
            {
              goto LABEL_22;
            }
            v10 = *(_QWORD *)v10;
            if (!v10)
              goto LABEL_22;
          }
        }
        do
        {
          v11 = *(_QWORD *)(v10 + 8);
          if (v11 == a2)
          {
            if (*(_DWORD *)(v10 + 16) == a2)
              return v10;
          }
          else
          {
            if (v11 >= v7)
              v11 %= v7;
            if (v11 != v3)
              break;
          }
          v10 = *(_QWORD *)v10;
        }
        while (v10);
      }
    }
  }
LABEL_22:
  v10 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(**((_QWORD **)a1 + 4) + 16))(*((_QWORD *)a1 + 4), 56, 8);
  *(_QWORD *)v10 = 0;
  *(_QWORD *)(v10 + 8) = v6;
  *(_DWORD *)(v10 + 16) = **a3;
  *(_QWORD *)(v10 + 32) = 0;
  *(_QWORD *)(v10 + 40) = 0;
  *(_QWORD *)(v10 + 24) = 0;
  {
    v41 = operator new();
    mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v41, "VectorKitLabels", 0x5ED09DD50000000FLL);
  }
  *(_QWORD *)(v10 + 48) = mdm::Allocator::instance(void)::alloc;
  v14 = (float)(unint64_t)(*((_QWORD *)a1 + 5) + 1);
  v15 = a1[12];
  if (!v7 || (float)(v15 * (float)v7) < v14)
  {
    v16 = 1;
    if (v7 >= 3)
      v16 = (v7 & (v7 - 1)) != 0;
    v17 = v16 | (2 * v7);
    v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18)
      prime = v18;
    else
      prime = v17;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
    }
    v7 = *((_QWORD *)a1 + 1);
    if (prime <= v7)
    {
      if (prime >= v7)
        goto LABEL_59;
      v31 = vcvtps_u32_f32((float)*((unint64_t *)a1 + 5) / a1[12]);
      if (v7 < 3 || (v32 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v32.i16[0] = vaddlv_u8(v32), v32.u32[0] > 1uLL))
      {
        v31 = std::__next_prime(v31);
      }
      else
      {
        v33 = 1 << -(char)__clz(v31 - 1);
        if (v31 >= 2)
          v31 = v33;
      }
      if (prime <= v31)
        prime = v31;
      if (prime >= v7)
      {
        v7 = *((_QWORD *)a1 + 1);
LABEL_59:
        if ((v7 & (v7 - 1)) != 0)
        {
          if (v7 <= v6)
            v3 = v6 % v7;
          else
            v3 = v6;
        }
        else
        {
          v3 = ((_DWORD)v7 - 1) & v6;
        }
        goto LABEL_72;
      }
      if (!prime)
      {
        v40 = *(_QWORD *)a1;
        *(_QWORD *)a1 = 0;
        if (v40)
          (*(void (**)(uint64_t, uint64_t, uint64_t))(**((_QWORD **)a1 + 2) + 40))(*((_QWORD *)a1 + 2), v40, 8 * *((_QWORD *)a1 + 1));
        v7 = 0;
        *((_QWORD *)a1 + 1) = 0;
        goto LABEL_59;
      }
    }
    v20 = (*(uint64_t (**)(uint64_t, size_t, uint64_t))(**((_QWORD **)a1 + 2) + 16))(*((_QWORD *)a1 + 2), 8 * prime, 8);
    v21 = *(_QWORD *)a1;
    *(_QWORD *)a1 = v20;
    if (v21)
      (*(void (**)(uint64_t, uint64_t, uint64_t))(**((_QWORD **)a1 + 2) + 40))(*((_QWORD *)a1 + 2), v21, 8 * *((_QWORD *)a1 + 1));
    v22 = 0;
    *((_QWORD *)a1 + 1) = prime;
    do
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v22++) = 0;
    while (prime != v22);
    v24 = (uint64_t *)(a1 + 6);
    v23 = (_QWORD *)*((_QWORD *)a1 + 3);
    if (!v23)
    {
LABEL_58:
      v7 = prime;
      goto LABEL_59;
    }
    v25 = v23[1];
    v26 = prime - 1;
    if ((prime & (prime - 1)) == 0)
    {
      v27 = v25 & v26;
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v27) = v24;
      for (i = (_QWORD *)*v23; *v23; i = (_QWORD *)*v23)
      {
        v29 = i[1] & v26;
        if (v29 == v27)
        {
          v23 = i;
        }
        else if (*(_QWORD *)(*(_QWORD *)a1 + 8 * v29))
        {
          *v23 = *i;
          v30 = 8 * v29;
          *i = **(_QWORD **)(*(_QWORD *)a1 + v30);
          **(_QWORD **)(*(_QWORD *)a1 + v30) = i;
        }
        else
        {
          *(_QWORD *)(*(_QWORD *)a1 + 8 * v29) = v23;
          v23 = i;
          v27 = v29;
        }
      }
      goto LABEL_58;
    }
    if (v25 >= prime)
      v25 %= prime;
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v25) = v24;
    v34 = (_QWORD *)*v23;
    if (!*v23)
      goto LABEL_58;
    while (1)
    {
      v36 = v34[1];
      if (v36 >= prime)
        v36 %= prime;
      if (v36 != v25)
      {
        if (!*(_QWORD *)(*(_QWORD *)a1 + 8 * v36))
        {
          *(_QWORD *)(*(_QWORD *)a1 + 8 * v36) = v23;
          goto LABEL_63;
        }
        *v23 = *v34;
        v35 = 8 * v36;
        *v34 = **(_QWORD **)(*(_QWORD *)a1 + v35);
        **(_QWORD **)(*(_QWORD *)a1 + v35) = v34;
        v34 = v23;
      }
      v36 = v25;
LABEL_63:
      v23 = v34;
      v34 = (_QWORD *)*v34;
      v25 = v36;
      if (!v34)
        goto LABEL_58;
    }
  }
LABEL_72:
  v37 = *(uint64_t **)(*(_QWORD *)a1 + 8 * v3);
  if (v37)
  {
    *(_QWORD *)v10 = *v37;
LABEL_80:
    *v37 = v10;
    goto LABEL_81;
  }
  *(_QWORD *)v10 = *((_QWORD *)a1 + 3);
  *((_QWORD *)a1 + 3) = v10;
  *(_QWORD *)(*(_QWORD *)a1 + 8 * v3) = a1 + 6;
  if (*(_QWORD *)v10)
  {
    v38 = *(_QWORD *)(*(_QWORD *)v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v38 >= v7)
        v38 %= v7;
    }
    else
    {
      v38 &= v7 - 1;
    }
    v37 = (uint64_t *)(*(_QWORD *)a1 + 8 * v38);
    goto LABEL_80;
  }
LABEL_81:
  ++*((_QWORD *)a1 + 5);
  return v10;
}

void sub_19F94C138(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<unsigned int,std::vector<std::unique_ptr<md::PolylineOverlayRibbon,mdm::TypeDeleter<md::PolylineOverlayRibbon>>,geo::StdAllocator<std::unique_ptr<md::PolylineOverlayRibbon,mdm::TypeDeleter<md::PolylineOverlayRibbon>>,mdm::Allocator>>>,void *>,std::__hash_node_destructor<geo::StdAllocator<std::__hash_node<std::__hash_value_type<unsigned int,std::vector<std::unique_ptr<md::PolylineOverlayRibbon,mdm::TypeDeleter<md::PolylineOverlayRibbon>>,geo::StdAllocator<std::unique_ptr<md::PolylineOverlayRibbon,mdm::TypeDeleter<md::PolylineOverlayRibbon>>,mdm::Allocator>>>,void *>,mdm::Allocator>>>::~unique_ptr[abi:nn180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,md::RibbonLayer<md::Ribbons::PolylineOverlayRibbonDescriptor>::batch(std::unordered_map<md::PolylineOverlayBatchKey,std::vector<std::unique_ptr<md::PolylineOverlayRibbon,mdm::TypeDeleter<md::PolylineOverlayRibbon>>,geo::StdAllocator<std::unique_ptr<md::PolylineOverlayRibbon,mdm::TypeDeleter<md::PolylineOverlayRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::PolylineOverlayBatchKey,std::vector<std::unique_ptr<md::PolylineOverlayRibbon,mdm::TypeDeleter<md::PolylineOverlayRibbon>>,geo::StdAllocator<std::unique_ptr<md::PolylineOverlayRibbon,mdm::TypeDeleter<md::PolylineOverlayRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::PolylineOverlayRibbonSection<md::Ribbons::PolylineOverlayRibbonDescriptor>> const&,std::unique_ptr<md::PolylineOverlayRibbonSection<md::Ribbons::PolylineOverlayRibbonDescriptor>> const)#1} &,std::default_delete<md::PolylineOverlayRibbonSection>*,false>(uint64_t result, int8x16_t *a2, uint64_t a3, char a4)
{
  uint64_t *v5;
  int8x16_t *v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  int8x16_t *v14;
  int8x16_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  int v23;
  int v24;
  int v25;
  int v26;
  uint64_t v27;
  _BOOL8 v28;
  unsigned int v29;
  uint64_t *v30;
  uint64_t *v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  void (***v44)(_QWORD, uint64_t);
  void (***v45)(_QWORD, uint64_t);
  unsigned __int8 v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  _QWORD *v50;
  uint64_t v51;
  void (***v52)(_QWORD, uint64_t);
  void (***v53)(_QWORD, uint64_t);
  unsigned __int8 v54;
  uint64_t v55;
  BOOL v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t *v59;
  uint64_t *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  _BOOL8 v64;
  uint64_t v65;
  unsigned int v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t *v73;
  uint64_t v74;
  _QWORD *v75;
  uint64_t v76;
  _QWORD *v77;
  uint64_t v78;
  void (***v79)(_QWORD, uint64_t);
  void (***v80)(_QWORD, uint64_t);
  unsigned __int8 v81;
  uint64_t v82;
  uint64_t v83;
  _QWORD *v84;
  _QWORD *v85;
  uint64_t v86;
  void (***v87)(_QWORD, uint64_t);
  void (***v88)(_QWORD, uint64_t);
  unsigned __int8 v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  int8x16_t *v93;
  uint64_t v94;
  uint64_t v95;
  int8x16_t v96;
  int8x16_t *v97;
  BOOL v99;
  uint64_t *v100;
  uint64_t v101;
  uint64_t *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  int8x16_t *v106;
  _QWORD *v107;
  _QWORD *v108;
  uint64_t v109;
  malloc_zone_t *zone;
  void (***v111)(_QWORD, uint64_t);
  void (***v112)(_QWORD, uint64_t);
  unsigned __int8 v113;
  uint64_t v114;
  geo::read_write_lock *v115;
  const char *v116;
  unint64_t v117;
  uint64_t v118;
  uint64_t v119;
  int v120;
  int v121;
  int v122;
  int v123;
  unsigned int v124;
  unint64_t v125;
  uint64_t v126;
  uint64_t v127;
  _QWORD *v128;
  _QWORD *v129;
  malloc_zone_t *v130;
  void (***v131)(_QWORD, uint64_t);
  void (***v132)(_QWORD, uint64_t);
  unsigned __int8 v133;
  uint64_t v134;
  geo::read_write_lock *v135;
  const char *v136;
  int64_t v137;
  uint64_t v138;
  int64_t v139;
  uint64_t v140;
  uint64_t *v141;
  uint64_t v142;
  uint64_t v143;
  _BOOL4 v144;
  uint64_t v145;
  uint64_t *v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t *v150;
  uint64_t v151;
  _QWORD *v152;
  _QWORD *v153;
  uint64_t v154;
  void (***v155)(_QWORD, uint64_t);
  void (***v156)(_QWORD, uint64_t);
  unsigned __int8 v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  _QWORD *v161;
  _QWORD *v162;
  void (***v163)(_QWORD, uint64_t);
  void (***v164)(_QWORD, uint64_t);
  unsigned __int8 v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v170;
  uint64_t *v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t *v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  _QWORD *v180;
  _QWORD *v181;
  malloc_zone_t *v182;
  void (***v183)(_QWORD, uint64_t);
  void (***v184)(_QWORD, uint64_t);
  unsigned __int8 v185;
  uint64_t v186;
  geo::read_write_lock *v187;
  const char *v188;
  uint64_t *v189;
  uint64_t v190;
  uint64_t v191;
  _QWORD *v192;
  _QWORD *v193;
  uint64_t v194;
  void (***v195)(_QWORD, uint64_t);
  void (***v196)(_QWORD, uint64_t);
  unsigned __int8 v197;
  uint64_t v198;
  uint64_t v199;
  _QWORD *v200;
  _QWORD *v201;
  void (***v202)(_QWORD, uint64_t);
  void (***v203)(_QWORD, uint64_t);
  unsigned __int8 v204;
  uint64_t v205;
  uint64_t v206;
  _QWORD *v207;
  _QWORD *v208;
  uint64_t v209;
  void (***v210)(_QWORD, uint64_t);
  void (***v211)(_QWORD, uint64_t);
  unsigned __int8 v212;
  uint64_t v213;
  uint64_t v214;
  unint64_t v215;
  uint64_t *v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t *v219;
  uint64_t v220;
  _QWORD *v221;
  _QWORD *v222;
  uint64_t v223;
  void (***v224)(_QWORD, uint64_t);
  void (***v225)(_QWORD, uint64_t);
  unsigned __int8 v226;
  uint64_t v227;
  _QWORD *v228;
  void (***v229)(_QWORD, uint64_t);
  void (***v230)(_QWORD, uint64_t);
  unsigned __int8 v231;
  uint64_t v232;
  uint64_t v233;
  int8x16_t *v234;
  uint64_t *v235;
  uint64_t v236;
  uint64_t v237;
  unint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  int v242;
  unint64_t v243;
  uint64_t v244;
  _QWORD *v245;
  _QWORD *v246;
  malloc_zone_t *v247;
  void (***v248)(_QWORD, uint64_t);
  void (***v249)(_QWORD, uint64_t);
  unsigned __int8 v250;
  uint64_t v251;
  geo::read_write_lock *v252;
  const char *v253;
  _QWORD *v254;
  _QWORD *v255;
  malloc_zone_t *v256;
  void (***v257)(_QWORD, uint64_t);
  void (***v258)(_QWORD, uint64_t);
  unsigned __int8 v259;
  uint64_t v260;
  geo::read_write_lock *v261;
  const char *v262;
  uint64_t v263;
  uint64_t *v265;
  uint64_t v266;
  uint64_t v267;
  int64_t v268;
  uint64_t v269;
  _QWORD *v270;
  uint64_t v271;
  uint64_t *v272;
  int64_t v273;
  int8x16_t *v275;
  uint64_t v276;

  v275 = (int8x16_t *)result;
LABEL_2:
  v5 = (uint64_t *)v275;
  v265 = &a2[-1].i64[1];
  while (2)
  {
    v6 = (int8x16_t *)v5;
    v7 = (char *)a2 - (char *)v5;
    v8 = ((char *)a2 - (char *)v5) >> 3;
    v275 = v6;
    switch(v8)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        v91 = *v265;
        v92 = v6->i64[0];
        result = md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(*v265 + 96), v6->i64[0]);
        if ((_DWORD)result)
        {
          v6->i64[0] = v91;
          *v265 = v92;
        }
        return result;
      case 3uLL:
        return std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1} &,std::default_delete<md::RibbonSection>*>(v6->i64, &v6->i64[1], v265);
      case 4uLL:
        v93 = v6 + 1;
        std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1} &,std::default_delete<md::RibbonSection>*>(v6->i64, &v6->i64[1], v6[1].i64);
        v94 = *v265;
        v95 = v6[1].i64[0];
        result = md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(*v265 + 96), v95);
        if ((_DWORD)result)
        {
          v93->i64[0] = v94;
          *v265 = v95;
          result = md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(v93->i64[0] + 96), v6->i64[1]);
          if ((_DWORD)result)
          {
            v96 = *(int8x16_t *)((char *)v6 + 8);
            *(int8x16_t *)((char *)v6 + 8) = vextq_s8(v96, v96, 8uLL);
            result = md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(v96.i64[1] + 96), v6->i64[0]);
            if ((_DWORD)result)
              *v6 = vextq_s8(*v6, *v6, 8uLL);
          }
        }
        return result;
      case 5uLL:
        return std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1} &,std::default_delete<md::RibbonSection>*>(v6->i64, &v6->i64[1], v6[1].i64, &v6[1].i64[1], v265);
      default:
        if (v7 <= 191)
        {
          v97 = (int8x16_t *)&v6->u64[1];
          v99 = v6 == a2 || v97 == a2;
          if ((a4 & 1) != 0)
          {
            if (!v99)
            {
              v100 = (uint64_t *)v6;
              do
              {
                v102 = v100;
                v100 = (uint64_t *)v97;
                v104 = *v102;
                v103 = v102[1];
                result = md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(v103 + 96), *v102);
                if ((_DWORD)result)
                {
                  v105 = 0;
                  *v100 = 0;
                  v272 = v100;
                  while (1)
                  {
                    *v100 = v104;
                    v100 = v102;
                    *v102 = 0;
                    v106 = v275;
                    if (v105)
                    {
                      v107 = *(_QWORD **)(v105 + 56);
                      if (v107)
                      {
                        v108 = *(_QWORD **)(v105 + 64);
                        v109 = *(_QWORD *)(v105 + 56);
                        if (v108 != v107)
                        {
                          do
                          {
                            v112 = (void (***)(_QWORD, uint64_t))*--v108;
                            v111 = v112;
                            *v108 = 0;
                            if (v112)
                            {
                              (**v111)(v111, v109);
                              if ((v113 & 1) == 0
                              {
                                v114 = operator new();
                                *(_QWORD *)(v114 + 16) = 0x5ED09DD50000000FLL;
                                *(_QWORD *)(v114 + 24) = "VectorKitLabels";
                                *(_OWORD *)(v114 + 32) = xmmword_19FFB2E80;
                                *(_QWORD *)v114 = &off_1E42B5668;
                                *(_QWORD *)(v114 + 8) = "VectorKitLabels";
                                *(_OWORD *)(v114 + 72) = 0u;
                                *(_OWORD *)(v114 + 88) = 0u;
                                *(_OWORD *)(v114 + 104) = 0u;
                                *(_OWORD *)(v114 + 120) = 0u;
                                *(_OWORD *)(v114 + 136) = 0u;
                                *(_OWORD *)(v114 + 152) = 0u;
                                *(_OWORD *)(v114 + 168) = 0u;
                                *(_OWORD *)(v114 + 184) = 0u;
                                *(_OWORD *)(v114 + 200) = 0u;
                                *(_OWORD *)(v114 + 216) = 0u;
                                *(_OWORD *)(v114 + 232) = 0u;
                                *(_QWORD *)(v114 + 248) = 0;
                                v266 = v114;
                                *(_OWORD *)(v114 + 56) = 0u;
                                v115 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v114 + 56), 0);
                                if ((_DWORD)v115)
                                  geo::read_write_lock::logFailure(v115, (uint64_t)"initialization", v116);
                                zone = malloc_create_zone(0, 0);
                                *(_QWORD *)(v266 + 48) = zone;
                                malloc_set_zone_name(zone, "VectorKitLabels");
                                *(_QWORD *)(v266 + 256) = os_log_create("com.apple.VectorKit", "Memory");
                                mdm::Allocator::instance(void)::alloc = v266;
                              }
                              (*(void (**)(uint64_t, void (***)(_QWORD, uint64_t), uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc + 40))(mdm::Allocator::instance(void)::alloc, v111, 136);
                            }
                          }
                          while (v108 != v107);
                          v109 = *(_QWORD *)(v105 + 56);
                          v106 = v275;
                        }
                        *(_QWORD *)(v105 + 64) = v107;
                        (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v105 + 80) + 40))(*(_QWORD *)(v105 + 80), v109, *(_QWORD *)(v105 + 72) - v109);
                      }
                      result = MEMORY[0x1A1AF4E00](v105, 0x1020C40379845F6);
                    }
                    if (v100 == (uint64_t *)v106)
                      break;
                    v117 = *(unsigned int *)(v103 + 96);
                    v118 = v117 & 0xF;
                    if ((v117 & 0xF000) != 0)
                      v119 = 3;
                    else
                      v119 = 0;
                    if ((v117 & 0xF00) != 0)
                      v119 = 2;
                    if ((v117 & 0xF0) != 0)
                      v119 = 1;
                    if ((v117 & 0xF) != 0)
                      v119 = 0;
                    v120 = ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v119];
                    v121 = ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[(unsigned __int16)v117 >> 12];
                    v122 = ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[(v117 >> 8) & 0xF];
                    v123 = ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v117 >> 4];
                    v124 = ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v118];
                    v102 = v100 - 1;
                    v104 = *(v100 - 1);
                    v125 = *(unsigned int *)(v104 + 96);
                    if ((v125 & 0xF000) != 0)
                      v126 = 3;
                    else
                      v126 = 0;
                    if ((v125 & 0xF00) != 0)
                      v126 = 2;
                    if ((v125 & 0xF0) != 0)
                      v126 = 1;
                    if ((v125 & 0xF) != 0)
                      v126 = 0;
                    if (((v121 << 12) | (v120 << 16) | (v122 << 8) | (16 * v123) | v124) >= ((ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[(unsigned __int16)v125 >> 12] << 12) | (ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v126] << 16) | (ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[(v125 >> 8) & 0xF] << 8) | (16 * ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v125 >> 4]) | ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v125 & 0xF]))
                      goto LABEL_214;
                    v105 = *v100;
                  }
                  v100 = (uint64_t *)v106;
LABEL_214:
                  v127 = *v100;
                  *v100 = v103;
                  v100 = v272;
                  if (v127)
                  {
                    v128 = *(_QWORD **)(v127 + 56);
                    if (v128)
                    {
                      v129 = *(_QWORD **)(v127 + 64);
                      v101 = *(_QWORD *)(v127 + 56);
                      if (v129 != v128)
                      {
                        do
                        {
                          v132 = (void (***)(_QWORD, uint64_t))*--v129;
                          v131 = v132;
                          *v129 = 0;
                          if (v132)
                          {
                            (**v131)(v131, v101);
                            if ((v133 & 1) == 0
                            {
                              v134 = operator new();
                              *(_QWORD *)(v134 + 16) = 0x5ED09DD50000000FLL;
                              *(_QWORD *)(v134 + 24) = "VectorKitLabels";
                              *(_OWORD *)(v134 + 32) = xmmword_19FFB2E80;
                              *(_QWORD *)v134 = &off_1E42B5668;
                              *(_QWORD *)(v134 + 8) = "VectorKitLabels";
                              *(_OWORD *)(v134 + 72) = 0u;
                              *(_OWORD *)(v134 + 88) = 0u;
                              *(_OWORD *)(v134 + 104) = 0u;
                              *(_OWORD *)(v134 + 120) = 0u;
                              *(_OWORD *)(v134 + 136) = 0u;
                              *(_OWORD *)(v134 + 152) = 0u;
                              *(_OWORD *)(v134 + 168) = 0u;
                              *(_OWORD *)(v134 + 184) = 0u;
                              *(_OWORD *)(v134 + 200) = 0u;
                              *(_OWORD *)(v134 + 216) = 0u;
                              *(_OWORD *)(v134 + 232) = 0u;
                              *(_QWORD *)(v134 + 248) = 0;
                              *(_OWORD *)(v134 + 56) = 0u;
                              v135 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v134 + 56), 0);
                              if ((_DWORD)v135)
                                geo::read_write_lock::logFailure(v135, (uint64_t)"initialization", v136);
                              v130 = malloc_create_zone(0, 0);
                              *(_QWORD *)(v134 + 48) = v130;
                              malloc_set_zone_name(v130, "VectorKitLabels");
                              *(_QWORD *)(v134 + 256) = os_log_create("com.apple.VectorKit", "Memory");
                              mdm::Allocator::instance(void)::alloc = v134;
                              v100 = v272;
                            }
                            (*(void (**)(uint64_t, void (***)(_QWORD, uint64_t), uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc + 40))(mdm::Allocator::instance(void)::alloc, v131, 136);
                          }
                        }
                        while (v129 != v128);
                        v101 = *(_QWORD *)(v127 + 56);
                      }
                      *(_QWORD *)(v127 + 64) = v128;
                      (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v127 + 80) + 40))(*(_QWORD *)(v127 + 80), v101, *(_QWORD *)(v127 + 72) - v101);
                    }
                    result = MEMORY[0x1A1AF4E00](v127, 0x1020C40379845F6);
                  }
                }
                v97 = (int8x16_t *)(v100 + 1);
              }
              while (v100 + 1 != (uint64_t *)a2);
            }
          }
          else if (!v99)
          {
            do
            {
              v235 = (uint64_t *)v275;
              v234 = v97;
              v237 = v275->i64[0];
              v236 = v275->i64[1];
              v238 = *(unsigned int *)(v236 + 96);
              result = md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(v238, v275->i64[0]);
              v275 = v234;
              if ((_DWORD)result)
              {
                v239 = 0;
                v234->i64[0] = 0;
                do
                {
                  v234->i64[0] = v237;
                  v234 = (int8x16_t *)v235;
                  *v235 = 0;
                  if (v239)
                  {
                    v245 = *(_QWORD **)(v239 + 56);
                    if (v245)
                    {
                      v246 = *(_QWORD **)(v239 + 64);
                      v240 = *(_QWORD *)(v239 + 56);
                      if (v246 != v245)
                      {
                        do
                        {
                          v249 = (void (***)(_QWORD, uint64_t))*--v246;
                          v248 = v249;
                          *v246 = 0;
                          if (v249)
                          {
                            (**v248)(v248, v240);
                            if ((v250 & 1) == 0
                            {
                              v251 = operator new();
                              *(_QWORD *)(v251 + 16) = 0x5ED09DD50000000FLL;
                              *(_QWORD *)(v251 + 24) = "VectorKitLabels";
                              *(_OWORD *)(v251 + 32) = xmmword_19FFB2E80;
                              *(_QWORD *)v251 = &off_1E42B5668;
                              *(_QWORD *)(v251 + 8) = "VectorKitLabels";
                              *(_OWORD *)(v251 + 72) = 0u;
                              *(_OWORD *)(v251 + 88) = 0u;
                              *(_OWORD *)(v251 + 104) = 0u;
                              *(_OWORD *)(v251 + 120) = 0u;
                              *(_OWORD *)(v251 + 136) = 0u;
                              *(_OWORD *)(v251 + 152) = 0u;
                              *(_OWORD *)(v251 + 168) = 0u;
                              *(_OWORD *)(v251 + 184) = 0u;
                              *(_OWORD *)(v251 + 200) = 0u;
                              *(_OWORD *)(v251 + 216) = 0u;
                              *(_OWORD *)(v251 + 232) = 0u;
                              *(_QWORD *)(v251 + 248) = 0;
                              v269 = v251;
                              *(_OWORD *)(v251 + 56) = 0u;
                              v252 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v251 + 56), 0);
                              if ((_DWORD)v252)
                                geo::read_write_lock::logFailure(v252, (uint64_t)"initialization", v253);
                              v247 = malloc_create_zone(0, 0);
                              *(_QWORD *)(v269 + 48) = v247;
                              malloc_set_zone_name(v247, "VectorKitLabels");
                              *(_QWORD *)(v269 + 256) = os_log_create("com.apple.VectorKit", "Memory");
                              mdm::Allocator::instance(void)::alloc = v269;
                            }
                            (*(void (**)(uint64_t, void (***)(_QWORD, uint64_t), uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc + 40))(mdm::Allocator::instance(void)::alloc, v248, 136);
                          }
                        }
                        while (v246 != v245);
                        v240 = *(_QWORD *)(v239 + 56);
                      }
                      *(_QWORD *)(v239 + 64) = v245;
                      (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v239 + 80) + 40))(*(_QWORD *)(v239 + 80), v240, *(_QWORD *)(v239 + 72) - v240);
                    }
                    result = MEMORY[0x1A1AF4E00](v239, 0x1020C40379845F6);
                    v238 = *(unsigned int *)(v236 + 96);
                  }
                  if ((v238 & 0xF000) != 0)
                    v241 = 3;
                  else
                    v241 = 0;
                  if ((v238 & 0xF00) != 0)
                    v241 = 2;
                  if ((v238 & 0xF0) != 0)
                    v241 = 1;
                  if ((v238 & 0xF) != 0)
                    v241 = 0;
                  v242 = ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v241];
                  v235 = &v234[-1].i64[1];
                  v237 = v234[-1].i64[1];
                  v243 = *(unsigned int *)(v237 + 96);
                  if ((v243 & 0xF000) != 0)
                    v244 = 3;
                  else
                    v244 = 0;
                  if ((v243 & 0xF00) != 0)
                    v244 = 2;
                  if ((v243 & 0xF0) != 0)
                    v244 = 1;
                  if ((v243 & 0xF) != 0)
                    v244 = 0;
                  v239 = v234->i64[0];
                }
                while (((ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[(unsigned __int16)v238 >> 12] << 12) | (v242 << 16) | (ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[(v238 >> 8) & 0xF] << 8) | (16 * ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v238 >> 4]) | ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v238 & 0xF]) < ((ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[(unsigned __int16)v243 >> 12] << 12) | (ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v244] << 16) | (ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[(v243 >> 8) & 0xF] << 8) | (16 * ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v243 >> 4]) | ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v243 & 0xF]));
                v234->i64[0] = v236;
                v234 = v275;
                if (v239)
                {
                  v254 = *(_QWORD **)(v239 + 56);
                  if (v254)
                  {
                    v255 = *(_QWORD **)(v239 + 64);
                    v233 = *(_QWORD *)(v239 + 56);
                    if (v255 != v254)
                    {
                      do
                      {
                        v258 = (void (***)(_QWORD, uint64_t))*--v255;
                        v257 = v258;
                        *v255 = 0;
                        if (v258)
                        {
                          (**v257)(v257, v233);
                          if ((v259 & 1) == 0
                          {
                            v260 = operator new();
                            *(_QWORD *)(v260 + 16) = 0x5ED09DD50000000FLL;
                            *(_QWORD *)(v260 + 24) = "VectorKitLabels";
                            *(_OWORD *)(v260 + 32) = xmmword_19FFB2E80;
                            *(_QWORD *)v260 = &off_1E42B5668;
                            *(_QWORD *)(v260 + 8) = "VectorKitLabels";
                            *(_OWORD *)(v260 + 72) = 0u;
                            *(_OWORD *)(v260 + 88) = 0u;
                            *(_OWORD *)(v260 + 104) = 0u;
                            *(_OWORD *)(v260 + 120) = 0u;
                            *(_OWORD *)(v260 + 136) = 0u;
                            *(_OWORD *)(v260 + 152) = 0u;
                            *(_OWORD *)(v260 + 168) = 0u;
                            *(_OWORD *)(v260 + 184) = 0u;
                            *(_OWORD *)(v260 + 200) = 0u;
                            *(_OWORD *)(v260 + 216) = 0u;
                            *(_OWORD *)(v260 + 232) = 0u;
                            *(_QWORD *)(v260 + 248) = 0;
                            *(_OWORD *)(v260 + 56) = 0u;
                            v261 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v260 + 56), 0);
                            if ((_DWORD)v261)
                              geo::read_write_lock::logFailure(v261, (uint64_t)"initialization", v262);
                            v256 = malloc_create_zone(0, 0);
                            *(_QWORD *)(v260 + 48) = v256;
                            malloc_set_zone_name(v256, "VectorKitLabels");
                            *(_QWORD *)(v260 + 256) = os_log_create("com.apple.VectorKit", "Memory");
                            mdm::Allocator::instance(void)::alloc = v260;
                          }
                          (*(void (**)(uint64_t, void (***)(_QWORD, uint64_t), uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc + 40))(mdm::Allocator::instance(void)::alloc, v257, 136);
                        }
                      }
                      while (v255 != v254);
                      v233 = *(_QWORD *)(v239 + 56);
                    }
                    *(_QWORD *)(v239 + 64) = v254;
                    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v239 + 80) + 40))(*(_QWORD *)(v239 + 80), v233, *(_QWORD *)(v239 + 72) - v233);
                  }
                  result = MEMORY[0x1A1AF4E00](v239, 0x1020C40379845F6);
                  v234 = v275;
                }
              }
              v97 = (int8x16_t *)&v234->u64[1];
            }
            while (&v234->u64[1] != (unint64_t *)a2);
          }
          return result;
        }
        if (!a3)
        {
          if (v6 == a2)
            return result;
          v137 = (v8 - 2) >> 1;
          v273 = v137;
          do
          {
            v139 = v137;
            if (v273 >= v137)
            {
              v140 = (2 * v137) | 1;
              v141 = &v275->i64[v140];
              if (2 * v137 + 2 >= (uint64_t)v8)
              {
                v145 = *v141;
              }
              else
              {
                v142 = *v141;
                v143 = v141[1];
                v144 = md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(*v141 + 96), v143);
                if (v144)
                  v145 = v143;
                else
                  v145 = v142;
                if (v144)
                {
                  ++v141;
                  v140 = 2 * v139 + 2;
                }
              }
              v146 = &v275->i64[v139];
              v147 = *v146;
              result = md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(v145 + 96), *v146);
              if ((result & 1) == 0)
              {
                v268 = v139;
                *v146 = 0;
                v148 = *v141;
                do
                {
                  v150 = v141;
                  *v141 = 0;
                  v151 = *v146;
                  *v146 = v148;
                  if (v151)
                  {
                    v152 = *(_QWORD **)(v151 + 56);
                    if (v152)
                    {
                      v153 = *(_QWORD **)(v151 + 64);
                      v154 = *(_QWORD *)(v151 + 56);
                      if (v153 != v152)
                      {
                        do
                        {
                          v156 = (void (***)(_QWORD, uint64_t))*--v153;
                          v155 = v156;
                          *v153 = 0;
                          if (v156)
                          {
                            (**v155)(v155, v154);
                            if ((v157 & 1) == 0
                            {
                              v158 = operator new();
                              mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v158, "VectorKitLabels", 0x5ED09DD50000000FLL);
                            }
                            (*(void (**)(uint64_t, void (***)(_QWORD, uint64_t), uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc + 40))(mdm::Allocator::instance(void)::alloc, v155, 136);
                          }
                        }
                        while (v153 != v152);
                        v154 = *(_QWORD *)(v151 + 56);
                      }
                      *(_QWORD *)(v151 + 64) = v152;
                      (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v151 + 80) + 40))(*(_QWORD *)(v151 + 80), v154, *(_QWORD *)(v151 + 72) - v154);
                    }
                    result = MEMORY[0x1A1AF4E00](v151, 0x1020C40379845F6);
                  }
                  if (v273 < v140)
                    break;
                  v159 = (2 * v140) | 1;
                  v141 = &v275->i64[v159];
                  v140 = 2 * v140 + 2;
                  if (v140 < (uint64_t)v8)
                  {
                    v148 = *v141;
                    v149 = v141[1];
                    if (md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(*v141 + 96), v149))
                    {
                      v148 = v149;
                      ++v141;
                    }
                    else
                    {
                      v140 = v159;
                    }
                  }
                  else
                  {
                    v148 = *v141;
                    v140 = v159;
                  }
                  result = md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(v148 + 96), v147);
                  v146 = v150;
                }
                while (!(_DWORD)result);
                v160 = *v150;
                *v150 = v147;
                v139 = v268;
                if (v160)
                {
                  v161 = *(_QWORD **)(v160 + 56);
                  if (v161)
                  {
                    v162 = *(_QWORD **)(v160 + 64);
                    v138 = *(_QWORD *)(v160 + 56);
                    if (v162 != v161)
                    {
                      do
                      {
                        v164 = (void (***)(_QWORD, uint64_t))*--v162;
                        v163 = v164;
                        *v162 = 0;
                        if (v164)
                        {
                          (**v163)(v163, v138);
                          if ((v165 & 1) == 0
                          {
                            v166 = operator new();
                            mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v166, "VectorKitLabels", 0x5ED09DD50000000FLL);
                          }
                          (*(void (**)(uint64_t, void (***)(_QWORD, uint64_t), uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc + 40))(mdm::Allocator::instance(void)::alloc, v163, 136);
                        }
                      }
                      while (v162 != v161);
                      v138 = *(_QWORD *)(v160 + 56);
                    }
                    *(_QWORD *)(v160 + 64) = v161;
                    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v160 + 80) + 40))(*(_QWORD *)(v160 + 80), v138, *(_QWORD *)(v160 + 72) - v138);
                  }
                  result = MEMORY[0x1A1AF4E00](v160, 0x1020C40379845F6);
                }
              }
            }
            v137 = v139 - 1;
          }
          while (v139);
          v167 = (unint64_t)v7 >> 3;
          while (2)
          {
            if (v167 >= 2)
            {
              v170 = 0;
              v171 = (uint64_t *)v275;
              v172 = v275->i64[0];
              v275->i64[0] = 0;
              do
              {
                v174 = &v171[v170 + 1];
                v175 = (2 * v170) | 1;
                v170 = 2 * v170 + 2;
                if (v170 >= v167)
                {
                  v178 = *v174;
                  v170 = v175;
                }
                else
                {
                  v176 = *v174;
                  v177 = v174[1];
                  result = md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(*v174 + 96), v177);
                  if ((_DWORD)result)
                    v178 = v177;
                  else
                    v178 = v176;
                  if ((_DWORD)result)
                    ++v174;
                  else
                    v170 = v175;
                }
                *v174 = 0;
                v179 = *v171;
                *v171 = v178;
                if (v179)
                {
                  v180 = *(_QWORD **)(v179 + 56);
                  if (v180)
                  {
                    v181 = *(_QWORD **)(v179 + 64);
                    v173 = *(_QWORD *)(v179 + 56);
                    if (v181 != v180)
                    {
                      do
                      {
                        v184 = (void (***)(_QWORD, uint64_t))*--v181;
                        v183 = v184;
                        *v181 = 0;
                        if (v184)
                        {
                          (**v183)(v183, v173);
                          if ((v185 & 1) == 0
                          {
                            v186 = operator new();
                            *(_QWORD *)(v186 + 16) = 0x5ED09DD50000000FLL;
                            *(_QWORD *)(v186 + 24) = "VectorKitLabels";
                            *(_OWORD *)(v186 + 32) = xmmword_19FFB2E80;
                            *(_QWORD *)v186 = &off_1E42B5668;
                            *(_QWORD *)(v186 + 8) = "VectorKitLabels";
                            *(_OWORD *)(v186 + 72) = 0u;
                            *(_OWORD *)(v186 + 88) = 0u;
                            *(_OWORD *)(v186 + 104) = 0u;
                            *(_OWORD *)(v186 + 120) = 0u;
                            *(_OWORD *)(v186 + 136) = 0u;
                            *(_OWORD *)(v186 + 152) = 0u;
                            *(_OWORD *)(v186 + 168) = 0u;
                            *(_OWORD *)(v186 + 184) = 0u;
                            *(_OWORD *)(v186 + 200) = 0u;
                            *(_OWORD *)(v186 + 216) = 0u;
                            *(_OWORD *)(v186 + 232) = 0u;
                            *(_QWORD *)(v186 + 248) = 0;
                            *(_OWORD *)(v186 + 56) = 0u;
                            v187 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v186 + 56), 0);
                            if ((_DWORD)v187)
                              geo::read_write_lock::logFailure(v187, (uint64_t)"initialization", v188);
                            v182 = malloc_create_zone(0, 0);
                            *(_QWORD *)(v186 + 48) = v182;
                            malloc_set_zone_name(v182, "VectorKitLabels");
                            *(_QWORD *)(v186 + 256) = os_log_create("com.apple.VectorKit", "Memory");
                            mdm::Allocator::instance(void)::alloc = v186;
                          }
                          (*(void (**)(uint64_t, void (***)(_QWORD, uint64_t), uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc + 40))(mdm::Allocator::instance(void)::alloc, v183, 136);
                        }
                      }
                      while (v181 != v180);
                      v173 = *(_QWORD *)(v179 + 56);
                    }
                    *(_QWORD *)(v179 + 64) = v180;
                    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v179 + 80) + 40))(*(_QWORD *)(v179 + 80), v173, *(_QWORD *)(v179 + 72) - v173);
                  }
                  result = MEMORY[0x1A1AF4E00](v179, 0x1020C40379845F6);
                }
                v171 = v174;
              }
              while (v170 <= (uint64_t)((unint64_t)(v167 - 2) >> 1));
              v189 = &a2[-1].i64[1];
              if (v174 == (uint64_t *)&a2[-1].u64[1])
              {
                v199 = *v174;
                *v174 = v172;
                if (v199)
                {
                  v200 = *(_QWORD **)(v199 + 56);
                  if (v200)
                  {
                    v201 = *(_QWORD **)(v199 + 64);
                    v168 = *(_QWORD *)(v199 + 56);
                    if (v201 == v200)
                      goto LABEL_275;
                    do
                    {
                      v203 = (void (***)(_QWORD, uint64_t))*--v201;
                      v202 = v203;
                      *v201 = 0;
                      if (v203)
                      {
                        (**v202)(v202, v168);
                        if ((v204 & 1) == 0
                        {
                          v205 = operator new();
                          mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v205, "VectorKitLabels", 0x5ED09DD50000000FLL);
                        }
                        (*(void (**)(uint64_t, void (***)(_QWORD, uint64_t), uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc + 40))(mdm::Allocator::instance(void)::alloc, v202, 136);
                      }
                    }
                    while (v201 != v200);
                    goto LABEL_274;
                  }
LABEL_276:
                  result = MEMORY[0x1A1AF4E00](v199, 0x1020C40379845F6);
                }
              }
              else
              {
                v190 = *v189;
                *v189 = 0;
                v191 = *v174;
                *v174 = v190;
                if (v191)
                {
                  v192 = *(_QWORD **)(v191 + 56);
                  if (v192)
                  {
                    v193 = *(_QWORD **)(v191 + 64);
                    v194 = *(_QWORD *)(v191 + 56);
                    if (v193 != v192)
                    {
                      do
                      {
                        v196 = (void (***)(_QWORD, uint64_t))*--v193;
                        v195 = v196;
                        *v193 = 0;
                        if (v196)
                        {
                          (**v195)(v195, v194);
                          if ((v197 & 1) == 0
                          {
                            v198 = operator new();
                            mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v198, "VectorKitLabels", 0x5ED09DD50000000FLL);
                          }
                          (*(void (**)(uint64_t, void (***)(_QWORD, uint64_t), uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc + 40))(mdm::Allocator::instance(void)::alloc, v195, 136);
                        }
                      }
                      while (v193 != v192);
                      v194 = *(_QWORD *)(v191 + 56);
                    }
                    *(_QWORD *)(v191 + 64) = v192;
                    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v191 + 80) + 40))(*(_QWORD *)(v191 + 80), v194, *(_QWORD *)(v191 + 72) - v194);
                  }
                  result = MEMORY[0x1A1AF4E00](v191, 0x1020C40379845F6);
                }
                v206 = *v189;
                *v189 = v172;
                if (v206)
                {
                  v207 = *(_QWORD **)(v206 + 56);
                  if (v207)
                  {
                    v208 = *(_QWORD **)(v206 + 64);
                    v209 = *(_QWORD *)(v206 + 56);
                    if (v208 != v207)
                    {
                      do
                      {
                        v211 = (void (***)(_QWORD, uint64_t))*--v208;
                        v210 = v211;
                        *v208 = 0;
                        if (v211)
                        {
                          (**v210)(v210, v209);
                          if ((v212 & 1) == 0
                          {
                            v213 = operator new();
                            mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v213, "VectorKitLabels", 0x5ED09DD50000000FLL);
                          }
                          (*(void (**)(uint64_t, void (***)(_QWORD, uint64_t), uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc + 40))(mdm::Allocator::instance(void)::alloc, v210, 136);
                        }
                      }
                      while (v208 != v207);
                      v209 = *(_QWORD *)(v206 + 56);
                    }
                    *(_QWORD *)(v206 + 64) = v207;
                    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v206 + 80) + 40))(*(_QWORD *)(v206 + 80), v209, *(_QWORD *)(v206 + 72) - v209);
                  }
                  result = MEMORY[0x1A1AF4E00](v206, 0x1020C40379845F6);
                }
                v214 = (char *)(v174 + 1) - (char *)v275;
                if (v214 >= 9)
                {
                  v215 = (unint64_t)((v214 >> 3) - 2) >> 1;
                  v216 = &v275->i64[v215];
                  v217 = *v174;
                  result = md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(*v216 + 96), *v174);
                  if ((_DWORD)result)
                  {
                    *v174 = 0;
                    v218 = *v216;
                    do
                    {
                      v219 = v216;
                      *v216 = 0;
                      v220 = *v174;
                      *v174 = v218;
                      if (v220)
                      {
                        v221 = *(_QWORD **)(v220 + 56);
                        if (v221)
                        {
                          v222 = *(_QWORD **)(v220 + 64);
                          v223 = *(_QWORD *)(v220 + 56);
                          if (v222 != v221)
                          {
                            do
                            {
                              v225 = (void (***)(_QWORD, uint64_t))*--v222;
                              v224 = v225;
                              *v222 = 0;
                              if (v225)
                              {
                                (**v224)(v224, v223);
                                if ((v226 & 1) == 0
                                {
                                  v227 = operator new();
                                  mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v227, "VectorKitLabels", 0x5ED09DD50000000FLL);
                                }
                                (*(void (**)(uint64_t, void (***)(_QWORD, uint64_t), uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc + 40))(mdm::Allocator::instance(void)::alloc, v224, 136);
                              }
                            }
                            while (v222 != v221);
                            v223 = *(_QWORD *)(v220 + 56);
                          }
                          *(_QWORD *)(v220 + 64) = v221;
                          (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v220 + 80) + 40))(*(_QWORD *)(v220 + 80), v223, *(_QWORD *)(v220 + 72) - v223);
                        }
                        result = MEMORY[0x1A1AF4E00](v220, 0x1020C40379845F6);
                      }
                      if (!v215)
                        break;
                      v215 = (v215 - 1) >> 1;
                      v216 = &v275->i64[v215];
                      v218 = *v216;
                      result = md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(*v216 + 96), v217);
                      v174 = v219;
                    }
                    while ((result & 1) != 0);
                    v199 = *v219;
                    *v219 = v217;
                    if (v199)
                    {
                      v200 = *(_QWORD **)(v199 + 56);
                      if (v200)
                      {
                        v228 = *(_QWORD **)(v199 + 64);
                        v168 = *(_QWORD *)(v199 + 56);
                        if (v228 == v200)
                        {
LABEL_275:
                          *(_QWORD *)(v199 + 64) = v200;
                          (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v199 + 80) + 40))(*(_QWORD *)(v199 + 80), v168, *(_QWORD *)(v199 + 72) - v168);
                          goto LABEL_276;
                        }
                        do
                        {
                          v230 = (void (***)(_QWORD, uint64_t))*--v228;
                          v229 = v230;
                          *v228 = 0;
                          if (v230)
                          {
                            (**v229)(v229, v168);
                            if ((v231 & 1) == 0
                            {
                              v232 = operator new();
                              mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v232, "VectorKitLabels", 0x5ED09DD50000000FLL);
                            }
                            (*(void (**)(uint64_t, void (***)(_QWORD, uint64_t), uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc + 40))(mdm::Allocator::instance(void)::alloc, v229, 136);
                          }
                        }
                        while (v228 != v200);
LABEL_274:
                        v168 = *(_QWORD *)(v199 + 56);
                        goto LABEL_275;
                      }
                      goto LABEL_276;
                    }
                  }
                }
              }
            }
            a2 = (int8x16_t *)((char *)a2 - 8);
            if ((unint64_t)v167-- <= 2)
              return result;
            continue;
          }
        }
        v9 = v8 >> 1;
        if ((unint64_t)v7 < 0x401)
        {
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1} &,std::default_delete<md::RibbonSection>*>(&v6->i64[v8 >> 1], v6->i64, v265);
        }
        else
        {
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1} &,std::default_delete<md::RibbonSection>*>(v6->i64, &v6->i64[v8 >> 1], v265);
          v10 = v9;
          v11 = &v6->i64[v9];
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1} &,std::default_delete<md::RibbonSection>*>(&v6->i64[1], v11 - 1, a2[-1].i64);
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1} &,std::default_delete<md::RibbonSection>*>(v6[1].i64, &v6->i64[v10 + 1], &a2[-2].i64[1]);
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1} &,std::default_delete<md::RibbonSection>*>(v11 - 1, &v6->i64[v8 >> 1], &v6->i64[v10 + 1]);
          v12 = v6->i64[0];
          v6->i64[0] = *v11;
          *v11 = v12;
        }
        v267 = a3 - 1;
        v13 = v6->i64[0];
        if ((a4 & 1) == 0
          && !md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(v6[-1].i64[1] + 96), v6->i64[0]))
        {
          v6->i64[0] = 0;
          v57 = *(unsigned int *)(v13 + 96);
          result = md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(v57, *v265);
          if ((result & 1) != 0)
          {
            v5 = (uint64_t *)v6;
            do
            {
              v58 = v5[1];
              ++v5;
              result = md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(v57, v58);
            }
            while ((result & 1) == 0);
          }
          else
          {
            v59 = &v6->i64[1];
            do
            {
              v5 = v59;
              if (v59 >= (uint64_t *)a2)
                break;
              ++v59;
              result = md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(v57, *v5);
            }
            while (!(_DWORD)result);
          }
          v60 = (uint64_t *)a2;
          if (v5 < (uint64_t *)a2)
          {
            v60 = (uint64_t *)a2;
            do
            {
              v61 = *--v60;
              result = md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(v57, v61);
            }
            while ((result & 1) != 0);
          }
          if (v5 < v60)
          {
            v62 = *v5;
            v63 = *v60;
            v64 = (v57 & 0xF) == 0;
            if ((v57 & 0xF000) != 0)
              v65 = 3;
            else
              v65 = 0;
            if ((v57 & 0xF00) != 0)
              v65 = 2;
            if (!(_BYTE)v57)
              v64 = v65;
            v66 = (ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[(unsigned __int16)v57 >> 12] << 12) | (ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v64] << 16) | (ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[(v57 >> 8) & 0xF] << 8) | (16 * ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v57 >> 4]) | ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v57 & 0xF];
            do
            {
              *v5 = v63;
              *v60 = v62;
              do
              {
                v67 = v5[1];
                ++v5;
                v62 = v67;
                v68 = *(unsigned int *)(v67 + 96);
                if ((v68 & 0xF000) != 0)
                  v69 = 3;
                else
                  v69 = 0;
                if ((v68 & 0xF00) != 0)
                  v69 = 2;
                if ((v68 & 0xF0) != 0)
                  v69 = 1;
                if ((v68 & 0xF) != 0)
                  v69 = 0;
              }
              while (v66 >= ((ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[(unsigned __int16)v68 >> 12] << 12) | (ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v69] << 16) | (ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[(v68 >> 8) & 0xF] << 8) | (16 * ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v68 >> 4]) | ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v68 & 0xF]));
              do
              {
                v70 = *--v60;
                v63 = v70;
                v71 = *(unsigned int *)(v70 + 96);
                if ((v71 & 0xF000) != 0)
                  v72 = 3;
                else
                  v72 = 0;
                if ((v71 & 0xF00) != 0)
                  v72 = 2;
                if ((v71 & 0xF0) != 0)
                  v72 = 1;
                if ((v71 & 0xF) != 0)
                  v72 = 0;
              }
              while (v66 < ((ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[(unsigned __int16)v71 >> 12] << 12) | (ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v72] << 16) | (ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[(v71 >> 8) & 0xF] << 8) | (16 * ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v71 >> 4]) | ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v71 & 0xF]));
            }
            while (v5 < v60);
          }
          v73 = v5 - 1;
          if (v5 - 1 != (uint64_t *)v6)
          {
            v74 = *v73;
            *v73 = 0;
            result = v6->i64[0];
            v6->i64[0] = v74;
            if (result)
            {
              v75 = *(_QWORD **)(result + 56);
              if (v75)
              {
                v76 = result;
                v77 = *(_QWORD **)(result + 64);
                v78 = *(_QWORD *)(result + 56);
                if (v77 != v75)
                {
                  v276 = result;
                  do
                  {
                    v80 = (void (***)(_QWORD, uint64_t))*--v77;
                    v79 = v80;
                    *v77 = 0;
                    if (v80)
                    {
                      (**v79)(v79, v78);
                      if ((v81 & 1) == 0
                      {
                        v82 = operator new();
                        mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v82, "VectorKitLabels", 0x5ED09DD50000000FLL);
                      }
                      (*(void (**)(uint64_t, void (***)(_QWORD, uint64_t), uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc + 40))(mdm::Allocator::instance(void)::alloc, v79, 136);
                    }
                  }
                  while (v77 != v75);
                  v76 = v276;
                  v78 = *(_QWORD *)(v276 + 56);
                }
                *(_QWORD *)(v76 + 64) = v75;
                (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v76 + 80) + 40))(*(_QWORD *)(v76 + 80), v78, *(_QWORD *)(v76 + 72) - v78);
                result = v76;
              }
              result = MEMORY[0x1A1AF4E00](result, 0x1020C40379845F6);
            }
          }
          a4 = 0;
          v83 = *v73;
          *v73 = v13;
          a3 = v267;
          if (v83)
          {
            v84 = *(_QWORD **)(v83 + 56);
            if (v84)
            {
              v85 = *(_QWORD **)(v83 + 64);
              v86 = *(_QWORD *)(v83 + 56);
              if (v85 != v84)
              {
                do
                {
                  v88 = (void (***)(_QWORD, uint64_t))*--v85;
                  v87 = v88;
                  *v85 = 0;
                  if (v88)
                  {
                    (**v87)(v87, v86);
                    if ((v89 & 1) == 0
                    {
                      v90 = operator new();
                      mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v90, "VectorKitLabels", 0x5ED09DD50000000FLL);
                    }
                    (*(void (**)(uint64_t, void (***)(_QWORD, uint64_t), uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc + 40))(mdm::Allocator::instance(void)::alloc, v87, 136);
                  }
                }
                while (v85 != v84);
                v86 = *(_QWORD *)(v83 + 56);
              }
              *(_QWORD *)(v83 + 64) = v84;
              (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v83 + 80) + 40))(*(_QWORD *)(v83 + 80), v86, *(_QWORD *)(v83 + 72) - v86);
            }
            result = MEMORY[0x1A1AF4E00](v83, 0x1020C40379845F6);
            a4 = 0;
          }
          continue;
        }
        v6->i64[0] = 0;
        v14 = v6;
        do
        {
          v15 = v14;
          v17 = v14->i64[1];
          v14 = (int8x16_t *)((char *)v14 + 8);
          v16 = v17;
        }
        while (md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(v17 + 96), v13));
        v18 = (uint64_t *)a2;
        if (v15 == v6)
        {
          v18 = (uint64_t *)a2;
          do
          {
            if (v14 >= (int8x16_t *)v18)
              break;
            v20 = *--v18;
          }
          while (!md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(v20 + 96), v13));
        }
        else
        {
          do
            v19 = *--v18;
          while (!md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(v19 + 96), v13));
        }
        if (v14 < (int8x16_t *)v18)
        {
          v21 = *v18;
          v22 = *(unsigned int *)(v13 + 96);
          v23 = ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[(unsigned __int16)v22 >> 12] << 12;
          v24 = ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[(v22 >> 8) & 0xF];
          v25 = ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v22 >> 4];
          v26 = ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v22 & 0xF];
          if ((v22 & 0xF000) != 0)
            v27 = 3;
          else
            v27 = 0;
          if ((v22 & 0xF00) != 0)
            v27 = 2;
          if (*(_DWORD *)(v13 + 96))
            v28 = (*(_DWORD *)(v13 + 96) & 0xF) == 0;
          else
            v28 = v27;
          v29 = v23 | (ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v28] << 16) | (v24 << 8) | (16 * v25) | v26;
          v30 = (uint64_t *)v14;
          v31 = v18;
          do
          {
            *v30 = v21;
            *v31 = v16;
            do
            {
              v32 = v30[1];
              ++v30;
              v16 = v32;
              v33 = *(unsigned int *)(v32 + 96);
              if ((v33 & 0xF000) != 0)
                v34 = 3;
              else
                v34 = 0;
              if ((v33 & 0xF00) != 0)
                v34 = 2;
              if ((v33 & 0xF0) != 0)
                v34 = 1;
              if ((v33 & 0xF) != 0)
                v34 = 0;
            }
            while (((ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[(unsigned __int16)v33 >> 12] << 12) | (ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v34] << 16) | (ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[(v33 >> 8) & 0xF] << 8) | (16 * ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v33 >> 4]) | ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v33 & 0xF]) < v29);
            v15 = (int8x16_t *)(v30 - 1);
            do
            {
              v35 = *--v31;
              v21 = v35;
              v36 = *(unsigned int *)(v35 + 96);
              if ((v36 & 0xF000) != 0)
                v37 = 3;
              else
                v37 = 0;
              if ((v36 & 0xF00) != 0)
                v37 = 2;
              if ((v36 & 0xF0) != 0)
                v37 = 1;
              if ((v36 & 0xF) != 0)
                v37 = 0;
            }
            while (((ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[(unsigned __int16)v36 >> 12] << 12) | (ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v37] << 16) | (ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[(v36 >> 8) & 0xF] << 8) | (16 * ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v36 >> 4]) | ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v36 & 0xF]) >= v29);
          }
          while (v30 < v31);
        }
        if (v15 != v6)
        {
          v38 = v15->i64[0];
          v15->i64[0] = 0;
          v39 = v6->i64[0];
          v6->i64[0] = v38;
          if (v39)
          {
            v40 = *(_QWORD **)(v39 + 56);
            if (v40)
            {
              v41 = v39;
              v42 = *(_QWORD **)(v39 + 64);
              v43 = *(_QWORD *)(v39 + 56);
              if (v42 != v40)
              {
                v263 = v39;
                v270 = *(_QWORD **)(v39 + 56);
                do
                {
                  v45 = (void (***)(_QWORD, uint64_t))*--v42;
                  v44 = v45;
                  *v42 = 0;
                  if (v45)
                  {
                    (**v44)(v44, v43);
                    if ((v46 & 1) == 0
                    {
                      v47 = operator new();
                      mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v47, "VectorKitLabels", 0x5ED09DD50000000FLL);
                    }
                    (*(void (**)(uint64_t, void (***)(_QWORD, uint64_t), uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc + 40))(mdm::Allocator::instance(void)::alloc, v44, 136);
                    v40 = v270;
                  }
                }
                while (v42 != v40);
                v41 = v263;
                v43 = *(_QWORD *)(v263 + 56);
              }
              *(_QWORD *)(v41 + 64) = v40;
              (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v41 + 80) + 40))(*(_QWORD *)(v41 + 80), v43, *(_QWORD *)(v41 + 72) - v43);
              v39 = v41;
            }
            MEMORY[0x1A1AF4E00](v39, 0x1020C40379845F6);
          }
        }
        v48 = v15->i64[0];
        v15->i64[0] = v13;
        if (v48)
        {
          v49 = *(_QWORD **)(v48 + 56);
          if (v49)
          {
            v50 = *(_QWORD **)(v48 + 64);
            v51 = *(_QWORD *)(v48 + 56);
            if (v50 != v49)
            {
              v271 = v48;
              do
              {
                v53 = (void (***)(_QWORD, uint64_t))*--v50;
                v52 = v53;
                *v50 = 0;
                if (v53)
                {
                  (**v52)(v52, v51);
                  {
                    v55 = operator new();
                    mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v55, "VectorKitLabels", 0x5ED09DD50000000FLL);
                  }
                  (*(void (**)(uint64_t, void (***)(_QWORD, uint64_t), uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc + 40))(mdm::Allocator::instance(void)::alloc, v52, 136);
                }
              }
              while (v50 != v49);
              v48 = v271;
              v51 = *(_QWORD *)(v271 + 56);
            }
            *(_QWORD *)(v48 + 64) = v49;
            (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v48 + 80) + 40))(*(_QWORD *)(v48 + 80), v51, *(_QWORD *)(v48 + 72) - v51);
          }
          MEMORY[0x1A1AF4E00](v48, 0x1020C40379845F6);
        }
        a3 = v267;
        if (v14 < (int8x16_t *)v18)
        {
LABEL_82:
          result = std::__introsort<std::_ClassicAlgPolicy,md::RibbonLayer<md::Ribbons::PolylineOverlayRibbonDescriptor>::batch(std::unordered_map<md::PolylineOverlayBatchKey,std::vector<std::unique_ptr<md::PolylineOverlayRibbon,mdm::TypeDeleter<md::PolylineOverlayRibbon>>,geo::StdAllocator<std::unique_ptr<md::PolylineOverlayRibbon,mdm::TypeDeleter<md::PolylineOverlayRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::PolylineOverlayBatchKey,std::vector<std::unique_ptr<md::PolylineOverlayRibbon,mdm::TypeDeleter<md::PolylineOverlayRibbon>>,geo::StdAllocator<std::unique_ptr<md::PolylineOverlayRibbon,mdm::TypeDeleter<md::PolylineOverlayRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::PolylineOverlayRibbonSection<md::Ribbons::PolylineOverlayRibbonDescriptor>> const&,std::unique_ptr<md::PolylineOverlayRibbonSection<md::Ribbons::PolylineOverlayRibbonDescriptor>> const)#1} &,std::default_delete<md::PolylineOverlayRibbonSection>*,false>(v275, v15, v267, a4 & 1);
          a4 = 0;
          v5 = &v15->i64[1];
          continue;
        }
        v56 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,md::RibbonLayer<md::Ribbons::PolylineOverlayRibbonDescriptor>::batch(std::unordered_map<md::PolylineOverlayBatchKey,std::vector<std::unique_ptr<md::PolylineOverlayRibbon,mdm::TypeDeleter<md::PolylineOverlayRibbon>>,geo::StdAllocator<std::unique_ptr<md::PolylineOverlayRibbon,mdm::TypeDeleter<md::PolylineOverlayRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::PolylineOverlayBatchKey,std::vector<std::unique_ptr<md::PolylineOverlayRibbon,mdm::TypeDeleter<md::PolylineOverlayRibbon>>,geo::StdAllocator<std::unique_ptr<md::PolylineOverlayRibbon,mdm::TypeDeleter<md::PolylineOverlayRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::PolylineOverlayRibbonSection<md::Ribbons::PolylineOverlayRibbonDescriptor>> const&,std::unique_ptr<md::PolylineOverlayRibbonSection<md::Ribbons::PolylineOverlayRibbonDescriptor>> const)#1} &,std::default_delete<md::PolylineOverlayRibbonSection>*>(v275, v15);
        v5 = &v15->i64[1];
        result = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,md::RibbonLayer<md::Ribbons::PolylineOverlayRibbonDescriptor>::batch(std::unordered_map<md::PolylineOverlayBatchKey,std::vector<std::unique_ptr<md::PolylineOverlayRibbon,mdm::TypeDeleter<md::PolylineOverlayRibbon>>,geo::StdAllocator<std::unique_ptr<md::PolylineOverlayRibbon,mdm::TypeDeleter<md::PolylineOverlayRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::PolylineOverlayBatchKey,std::vector<std::unique_ptr<md::PolylineOverlayRibbon,mdm::TypeDeleter<md::PolylineOverlayRibbon>>,geo::StdAllocator<std::unique_ptr<md::PolylineOverlayRibbon,mdm::TypeDeleter<md::PolylineOverlayRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::PolylineOverlayRibbonSection<md::Ribbons::PolylineOverlayRibbonDescriptor>> const&,std::unique_ptr<md::PolylineOverlayRibbonSection<md::Ribbons::PolylineOverlayRibbonDescriptor>> const)#1} &,std::default_delete<md::PolylineOverlayRibbonSection>*>((int8x16_t *)&v15->u64[1], a2);
        if (!(_DWORD)result)
        {
          if (v56)
            continue;
          goto LABEL_82;
        }
        a2 = v15;
        if (!v56)
          goto LABEL_2;
        return result;
    }
  }
}

uint64_t *std::unique_ptr<md::PolylineOverlayRibbonSection<md::Ribbons::PolylineOverlayRibbonDescriptor>>::~unique_ptr[abi:nn180100](uint64_t *a1)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  malloc_zone_t *zone;
  void (***v7)(_QWORD, uint64_t);
  void (***v8)(_QWORD, uint64_t);
  unsigned __int8 v9;
  uint64_t v10;
  geo::read_write_lock *v11;
  const char *v12;
  _QWORD *v14;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    v3 = *(_QWORD **)(v2 + 56);
    if (v3)
    {
      v4 = *(_QWORD **)(v2 + 64);
      v5 = *(_QWORD *)(v2 + 56);
      if (v4 != v3)
      {
        do
        {
          v8 = (void (***)(_QWORD, uint64_t))*--v4;
          v7 = v8;
          *v4 = 0;
          if (v8)
          {
            (**v7)(v7, v5);
            {
              v14 = v3;
              v10 = operator new();
              *(_QWORD *)(v10 + 16) = 0x5ED09DD50000000FLL;
              *(_QWORD *)(v10 + 24) = "VectorKitLabels";
              *(_OWORD *)(v10 + 32) = xmmword_19FFB2E80;
              *(_QWORD *)v10 = &off_1E42B5668;
              *(_QWORD *)(v10 + 8) = "VectorKitLabels";
              *(_OWORD *)(v10 + 72) = 0u;
              *(_OWORD *)(v10 + 88) = 0u;
              *(_OWORD *)(v10 + 104) = 0u;
              *(_OWORD *)(v10 + 120) = 0u;
              *(_OWORD *)(v10 + 136) = 0u;
              *(_OWORD *)(v10 + 152) = 0u;
              *(_OWORD *)(v10 + 168) = 0u;
              *(_OWORD *)(v10 + 184) = 0u;
              *(_OWORD *)(v10 + 200) = 0u;
              *(_OWORD *)(v10 + 216) = 0u;
              *(_OWORD *)(v10 + 232) = 0u;
              *(_QWORD *)(v10 + 248) = 0;
              *(_OWORD *)(v10 + 56) = 0u;
              v11 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v10 + 56), 0);
              if ((_DWORD)v11)
                geo::read_write_lock::logFailure(v11, (uint64_t)"initialization", v12);
              zone = malloc_create_zone(0, 0);
              *(_QWORD *)(v10 + 48) = zone;
              malloc_set_zone_name(zone, "VectorKitLabels");
              *(_QWORD *)(v10 + 256) = os_log_create("com.apple.VectorKit", "Memory");
              mdm::Allocator::instance(void)::alloc = v10;
              v3 = v14;
            }
            (*(void (**)(uint64_t, void (***)(_QWORD, uint64_t), uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc
                                                                                             + 40))(mdm::Allocator::instance(void)::alloc, v7, 136);
          }
        }
        while (v4 != v3);
        v5 = *(_QWORD *)(v2 + 56);
      }
      *(_QWORD *)(v2 + 64) = v3;
      (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v2 + 80) + 40))(*(_QWORD *)(v2 + 80), v5, *(_QWORD *)(v2 + 72) - v5);
    }
    MEMORY[0x1A1AF4E00](v2, 0x1020C40379845F6);
  }
  return a1;
}

uint64_t *std::__hash_table<std::__hash_value_type<unsigned int,std::vector<std::unique_ptr<md::PolylineOverlayRibbon,mdm::TypeDeleter<md::PolylineOverlayRibbon>>,geo::StdAllocator<std::unique_ptr<md::PolylineOverlayRibbon,mdm::TypeDeleter<md::PolylineOverlayRibbon>>,mdm::Allocator>>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::vector<std::unique_ptr<md::PolylineOverlayRibbon,mdm::TypeDeleter<md::PolylineOverlayRibbon>>,geo::StdAllocator<std::unique_ptr<md::PolylineOverlayRibbon,mdm::TypeDeleter<md::PolylineOverlayRibbon>>,mdm::Allocator>>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::vector<std::unique_ptr<md::PolylineOverlayRibbon,mdm::TypeDeleter<md::PolylineOverlayRibbon>>,geo::StdAllocator<std::unique_ptr<md::PolylineOverlayRibbon,mdm::TypeDeleter<md::PolylineOverlayRibbon>>,mdm::Allocator>>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,geo::StdAllocator<std::__hash_value_type<unsigned int,std::vector<std::unique_ptr<md::PolylineOverlayRibbon,mdm::TypeDeleter<md::PolylineOverlayRibbon>>,geo::StdAllocator<std::unique_ptr<md::PolylineOverlayRibbon,mdm::TypeDeleter<md::PolylineOverlayRibbon>>,mdm::Allocator>>>,mdm::Allocator>>::~__hash_table(uint64_t *a1)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t *v4;
  _QWORD *v5;
  _QWORD *v6;
  malloc_zone_t *zone;
  void (***v8)(_QWORD, uint64_t);
  void (***v9)(_QWORD, uint64_t);
  unsigned __int8 v10;
  uint64_t v11;
  geo::read_write_lock *v12;
  const char *v13;
  uint64_t v14;
  uint64_t v16;

  v2 = (uint64_t *)a1[3];
  if (v2)
  {
    do
    {
      v4 = (uint64_t *)*v2;
      v5 = (_QWORD *)v2[3];
      if (v5)
      {
        v6 = (_QWORD *)v2[4];
        v3 = v2[3];
        if (v6 != v5)
        {
          do
          {
            v9 = (void (***)(_QWORD, uint64_t))*--v6;
            v8 = v9;
            *v6 = 0;
            if (v9)
            {
              (**v8)(v8, v3);
              {
                v11 = operator new();
                *(_QWORD *)(v11 + 16) = 0x5ED09DD50000000FLL;
                *(_QWORD *)(v11 + 24) = "VectorKitLabels";
                *(_OWORD *)(v11 + 32) = xmmword_19FFB2E80;
                *(_QWORD *)v11 = &off_1E42B5668;
                *(_QWORD *)(v11 + 8) = "VectorKitLabels";
                *(_OWORD *)(v11 + 72) = 0u;
                *(_OWORD *)(v11 + 88) = 0u;
                *(_OWORD *)(v11 + 104) = 0u;
                *(_OWORD *)(v11 + 120) = 0u;
                *(_OWORD *)(v11 + 136) = 0u;
                *(_OWORD *)(v11 + 152) = 0u;
                *(_OWORD *)(v11 + 168) = 0u;
                *(_OWORD *)(v11 + 184) = 0u;
                *(_OWORD *)(v11 + 200) = 0u;
                *(_OWORD *)(v11 + 216) = 0u;
                *(_OWORD *)(v11 + 232) = 0u;
                *(_QWORD *)(v11 + 248) = 0;
                v16 = v11;
                *(_OWORD *)(v11 + 56) = 0u;
                v12 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v11 + 56), 0);
                if ((_DWORD)v12)
                  geo::read_write_lock::logFailure(v12, (uint64_t)"initialization", v13);
                zone = malloc_create_zone(0, 0);
                *(_QWORD *)(v16 + 48) = zone;
                malloc_set_zone_name(zone, "VectorKitLabels");
                *(_QWORD *)(v16 + 256) = os_log_create("com.apple.VectorKit", "Memory");
                mdm::Allocator::instance(void)::alloc = v16;
              }
              (*(void (**)(uint64_t, void (***)(_QWORD, uint64_t), uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc
                                                                                               + 40))(mdm::Allocator::instance(void)::alloc, v8, 136);
            }
          }
          while (v6 != v5);
          v3 = v2[3];
        }
        v2[4] = (uint64_t)v5;
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v2[6] + 40))(v2[6], v3, v2[5] - v3);
      }
      (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(_QWORD *)a1[4] + 40))(a1[4], v2, 56);
      v2 = v4;
    }
    while (v4);
  }
  v14 = *a1;
  *a1 = 0;
  if (v14)
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1[2] + 40))(a1[2], v14, 8 * a1[1]);
  return a1;
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,md::RibbonLayer<md::Ribbons::PolylineOverlayRibbonDescriptor>::batch(std::unordered_map<md::PolylineOverlayBatchKey,std::vector<std::unique_ptr<md::PolylineOverlayRibbon,mdm::TypeDeleter<md::PolylineOverlayRibbon>>,geo::StdAllocator<std::unique_ptr<md::PolylineOverlayRibbon,mdm::TypeDeleter<md::PolylineOverlayRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::PolylineOverlayBatchKey,std::vector<std::unique_ptr<md::PolylineOverlayRibbon,mdm::TypeDeleter<md::PolylineOverlayRibbon>>,geo::StdAllocator<std::unique_ptr<md::PolylineOverlayRibbon,mdm::TypeDeleter<md::PolylineOverlayRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::PolylineOverlayRibbonSection<md::Ribbons::PolylineOverlayRibbonDescriptor>> const&,std::unique_ptr<md::PolylineOverlayRibbonSection<md::Ribbons::PolylineOverlayRibbonDescriptor>> const)#1} &,std::default_delete<md::PolylineOverlayRibbonSection>*>(int8x16_t *a1, int8x16_t *a2)
{
  int8x16_t *v2;
  uint64_t v4;
  _BOOL8 result;
  uint64_t v6;
  uint64_t v7;
  uint64_t *i64;
  int8x16_t *v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int8x16_t *i;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  void (***v19)(_QWORD, uint64_t);
  void (***v20)(_QWORD, uint64_t);
  unsigned __int8 v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  void (***v26)(_QWORD, uint64_t);
  void (***v27)(_QWORD, uint64_t);
  unsigned __int8 v28;
  uint64_t v29;
  int8x16_t *v30;
  uint64_t v31;
  uint64_t v32;
  int8x16_t v33;
  int8x16_t *v34;
  int v35;

  v2 = a2;
  v4 = ((char *)a2 - (char *)a1) >> 3;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = a2[-1].i64[1];
      v7 = a1->i64[0];
      if (md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(v6 + 96), a1->i64[0]))
      {
        a1->i64[0] = v6;
        v2[-1].i64[1] = v7;
      }
      return 1;
    case 3:
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1} &,std::default_delete<md::RibbonSection>*>(a1->i64, &a1->i64[1], &a2[-1].i64[1]);
      return 1;
    case 4:
      v30 = a1 + 1;
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1} &,std::default_delete<md::RibbonSection>*>(a1->i64, &a1->i64[1], a1[1].i64);
      v31 = v2[-1].i64[1];
      v32 = a1[1].i64[0];
      if (md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(v31 + 96), v32))
      {
        v30->i64[0] = v31;
        v2[-1].i64[1] = v32;
        if (md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(v30->i64[0] + 96), a1->i64[1]))
        {
          v33 = *(int8x16_t *)((char *)a1 + 8);
          *(int8x16_t *)((char *)a1 + 8) = vextq_s8(v33, v33, 8uLL);
          if (md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(v33.i64[1] + 96), a1->i64[0]))
          {
            *a1 = vextq_s8(*a1, *a1, 8uLL);
          }
        }
      }
      return 1;
    case 5:
      std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1} &,std::default_delete<md::RibbonSection>*>(a1->i64, &a1->i64[1], a1[1].i64, &a1[1].i64[1], &a2[-1].i64[1]);
      return 1;
    default:
      i64 = a1[1].i64;
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1} &,std::default_delete<md::RibbonSection>*>(a1->i64, &a1->i64[1], a1[1].i64);
      v9 = (int8x16_t *)((char *)a1 + 24);
      if (&a1[1].u64[1] == (unint64_t *)v2)
        return 1;
      v10 = 0;
      v34 = v2;
      break;
  }
  while (1)
  {
    v12 = v9->i64[0];
    v13 = *i64;
    if (md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(v9->i64[0] + 96), *i64))
    {
      v35 = v10;
      v14 = 0;
      v9->i64[0] = 0;
      for (i = v9; ; v14 = i->i64[0])
      {
        i->i64[0] = v13;
        i = (int8x16_t *)i64;
        *i64 = 0;
        if (v14)
        {
          v16 = *(_QWORD **)(v14 + 56);
          if (v16)
          {
            v17 = *(_QWORD **)(v14 + 64);
            v18 = *(_QWORD *)(v14 + 56);
            if (v17 != v16)
            {
              do
              {
                v20 = (void (***)(_QWORD, uint64_t))*--v17;
                v19 = v20;
                *v17 = 0;
                if (v20)
                {
                  (**v19)(v19, v18);
                  {
                    v22 = operator new();
                    mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v22, "VectorKitLabels", 0x5ED09DD50000000FLL);
                  }
                  (*(void (**)(uint64_t, void (***)(_QWORD, uint64_t), uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc + 40))(mdm::Allocator::instance(void)::alloc, v19, 136);
                }
              }
              while (v17 != v16);
              v18 = *(_QWORD *)(v14 + 56);
            }
            *(_QWORD *)(v14 + 64) = v16;
            (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v14 + 80) + 40))(*(_QWORD *)(v14 + 80), v18, *(_QWORD *)(v14 + 72) - v18);
          }
          MEMORY[0x1A1AF4E00](v14, 0x1020C40379845F6);
        }
        if (i == a1)
          break;
        i64 = &i[-1].i64[1];
        v13 = i[-1].i64[1];
        if (!md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(v12 + 96), v13))goto LABEL_30;
      }
      i = a1;
LABEL_30:
      v23 = i->i64[0];
      i->i64[0] = v12;
      v2 = v34;
      if (v23)
      {
        v24 = *(_QWORD **)(v23 + 56);
        if (v24)
        {
          v25 = *(_QWORD **)(v23 + 64);
          v11 = *(_QWORD *)(v23 + 56);
          if (v25 != v24)
          {
            do
            {
              v27 = (void (***)(_QWORD, uint64_t))*--v25;
              v26 = v27;
              *v25 = 0;
              if (v27)
              {
                (**v26)(v26, v11);
                {
                  v29 = operator new();
                  mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v29, "VectorKitLabels", 0x5ED09DD50000000FLL);
                }
                (*(void (**)(uint64_t, void (***)(_QWORD, uint64_t), uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc
                                                                                                 + 40))(mdm::Allocator::instance(void)::alloc, v26, 136);
              }
            }
            while (v25 != v24);
            v11 = *(_QWORD *)(v23 + 56);
          }
          *(_QWORD *)(v23 + 64) = v24;
          (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v23 + 80) + 40))(*(_QWORD *)(v23 + 80), v11, *(_QWORD *)(v23 + 72) - v11);
        }
        MEMORY[0x1A1AF4E00](v23, 0x1020C40379845F6);
      }
      v10 = v35 + 1;
      if (v35 == 7)
        return &v9->u64[1] == (unint64_t *)v34;
    }
    i64 = (uint64_t *)v9;
    v9 = (int8x16_t *)((char *)v9 + 8);
    if (v9 == v2)
      return 1;
  }
}

uint64_t md::RibbonBatch<md::Ribbons::PolylineOverlayRibbonDescriptor>::~RibbonBatch(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *a1 = &off_1E428C7A0;
  v2 = (std::__shared_weak_count *)a1[181];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return md::Ribbons::RibbonBatch<md::Ribbons::PolylineOverlayRibbonDescriptor>::~RibbonBatch((uint64_t)a1);
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *a1 = &off_1E428C7A0;
  v2 = (std::__shared_weak_count *)a1[181];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return md::Ribbons::RibbonBatch<md::Ribbons::PolylineOverlayRibbonDescriptor>::~RibbonBatch((uint64_t)a1);
}

uint64_t md::Ribbons::RibbonBatch<md::Ribbons::PolylineOverlayRibbonDescriptor>::~RibbonBatch(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  malloc_zone_t *zone;
  void (***v11)(_QWORD, uint64_t);
  void (***v12)(_QWORD, uint64_t);
  unsigned __int8 v13;
  uint64_t v14;
  geo::read_write_lock *v15;
  const char *v16;
  _QWORD *v17;
  unint64_t v18;
  void (***v19)(void);
  void (**v20)(void);
  _QWORD **v21;
  _QWORD *v22;
  _QWORD *v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  void *v30;
  void *v31;
  _QWORD *v33;

  *(_QWORD *)a1 = &off_1E42AF208;
  v2 = *(_QWORD **)(a1 + 1400);
  if (v2)
  {
    v3 = *(_QWORD **)(a1 + 1408);
    v4 = *(void **)(a1 + 1400);
    if (v3 != v2)
    {
      do
      {
        v7 = *--v3;
        v6 = v7;
        *v3 = 0;
        if (v7)
        {
          v8 = *(_QWORD **)(v6 + 56);
          if (v8)
          {
            v9 = *(_QWORD **)(v6 + 64);
            v5 = *(_QWORD *)(v6 + 56);
            if (v9 != v8)
            {
              do
              {
                v12 = (void (***)(_QWORD, uint64_t))*--v9;
                v11 = v12;
                *v9 = 0;
                if (v12)
                {
                  (**v11)(v11, v5);
                  {
                    v33 = v2;
                    v14 = operator new();
                    *(_QWORD *)(v14 + 16) = 0x5ED09DD50000000FLL;
                    *(_QWORD *)(v14 + 24) = "VectorKitLabels";
                    *(_OWORD *)(v14 + 32) = xmmword_19FFB2E80;
                    *(_QWORD *)v14 = &off_1E42B5668;
                    *(_QWORD *)(v14 + 8) = "VectorKitLabels";
                    *(_OWORD *)(v14 + 72) = 0u;
                    *(_OWORD *)(v14 + 88) = 0u;
                    *(_OWORD *)(v14 + 104) = 0u;
                    *(_OWORD *)(v14 + 120) = 0u;
                    *(_OWORD *)(v14 + 136) = 0u;
                    *(_OWORD *)(v14 + 152) = 0u;
                    *(_OWORD *)(v14 + 168) = 0u;
                    *(_OWORD *)(v14 + 184) = 0u;
                    *(_OWORD *)(v14 + 200) = 0u;
                    *(_OWORD *)(v14 + 216) = 0u;
                    *(_OWORD *)(v14 + 232) = 0u;
                    *(_QWORD *)(v14 + 248) = 0;
                    *(_OWORD *)(v14 + 56) = 0u;
                    v15 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v14 + 56), 0);
                    if ((_DWORD)v15)
                      geo::read_write_lock::logFailure(v15, (uint64_t)"initialization", v16);
                    zone = malloc_create_zone(0, 0);
                    *(_QWORD *)(v14 + 48) = zone;
                    malloc_set_zone_name(zone, "VectorKitLabels");
                    *(_QWORD *)(v14 + 256) = os_log_create("com.apple.VectorKit", "Memory");
                    mdm::Allocator::instance(void)::alloc = v14;
                    v2 = v33;
                  }
                  (*(void (**)(uint64_t, void (***)(_QWORD, uint64_t), uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc + 40))(mdm::Allocator::instance(void)::alloc, v11, 136);
                }
              }
              while (v9 != v8);
              v5 = *(_QWORD *)(v6 + 56);
            }
            *(_QWORD *)(v6 + 64) = v8;
            (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v6 + 80) + 40))(*(_QWORD *)(v6 + 80), v5, *(_QWORD *)(v6 + 72) - v5);
          }
          MEMORY[0x1A1AF4E00](v6, 0x1020C40379845F6);
        }
      }
      while (v3 != v2);
      v4 = *(void **)(a1 + 1400);
    }
    *(_QWORD *)(a1 + 1408) = v2;
    operator delete(v4);
  }
  v17 = *(_QWORD **)(a1 + 1376);
  do
  {
    if (v17[1])
    {
      v18 = 0;
      v19 = (void (***)(void))(v17 + 2);
      do
      {
        v20 = *v19;
        v19 += 15;
        (*v20)();
        ++v18;
      }
      while (v18 < v17[1]);
    }
    v17[1] = 0;
    v17 = (_QWORD *)*v17;
  }
  while (v17);
  v21 = *(_QWORD ***)(a1 + 1376);
  *(_QWORD *)(a1 + 1384) = v21;
  v22 = *v21;
  *v21 = 0;
  if (v22)
  {
    do
    {
      v23 = (_QWORD *)*v22;
      free(v22);
      v22 = v23;
    }
    while (v23);
    v21 = *(_QWORD ***)(a1 + 1376);
  }
  free(v21);
  v24 = *(void **)(a1 + 1352);
  if (v24)
  {
    *(_QWORD *)(a1 + 1360) = v24;
    operator delete(v24);
  }
  v25 = *(_QWORD *)(a1 + 1320);
  if (v25)
  {
    v26 = *(_QWORD *)(a1 + 1328);
    v27 = *(_QWORD *)(a1 + 1320);
    if (v26 != v25)
    {
      v28 = *(_QWORD *)(a1 + 1328);
      do
      {
        v30 = *(void **)(v28 - 24);
        v28 -= 24;
        v29 = v30;
        if (v30)
        {
          *(_QWORD *)(v26 - 16) = v29;
          operator delete(v29);
        }
        v26 = v28;
      }
      while (v28 != v25);
      v27 = *(_QWORD *)(a1 + 1320);
    }
    *(_QWORD *)(a1 + 1328) = v25;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 1344) + 40))(*(_QWORD *)(a1 + 1344), v27, *(_QWORD *)(a1 + 1336) - v27);
  }
  v31 = *(void **)(a1 + 1296);
  if (v31)
  {
    *(_QWORD *)(a1 + 1304) = v31;
    operator delete(v31);
  }
  *(_QWORD *)(a1 + 1168) = &off_1E42B59B0;
  *(_QWORD *)(a1 + 1184) = 3131955885;
  *(_QWORD *)(a1 + 1040) = &off_1E42B59B0;
  *(_QWORD *)(a1 + 1056) = 3131955885;
  *(_QWORD *)(a1 + 912) = &off_1E42B59B0;
  *(_QWORD *)(a1 + 928) = 3131955885;
  *(_QWORD *)(a1 + 784) = &off_1E42B59B0;
  *(_QWORD *)(a1 + 800) = 3131955885;
  *(_QWORD *)(a1 + 656) = &off_1E42B59B0;
  *(_QWORD *)(a1 + 672) = 3131955885;
  *(_QWORD *)(a1 + 528) = &off_1E42B59B0;
  *(_QWORD *)(a1 + 544) = 3131955885;
  *(_QWORD *)(a1 + 400) = &off_1E42B59B0;
  *(_QWORD *)(a1 + 416) = 3131955885;
  *(_QWORD *)(a1 + 272) = &off_1E42B59B0;
  *(_QWORD *)(a1 + 288) = 3131955885;
  *(_QWORD *)(a1 + 144) = &off_1E42B59B0;
  *(_QWORD *)(a1 + 160) = 3131955885;
  *(_QWORD *)(a1 + 16) = &off_1E42B59B0;
  *(_QWORD *)(a1 + 32) = 3131955885;
  return a1;
}

void md::Ribbons::RibbonBatch<md::Ribbons::PolylineOverlayRibbonDescriptor>::~RibbonBatch(uint64_t a1)
{
  md::Ribbons::RibbonBatch<md::Ribbons::PolylineOverlayRibbonDescriptor>::~RibbonBatch(a1);
  JUMPOUT(0x1A1AF4E00);
}

void md::PolylineOverlayBatch<md::Ribbons::PolylineOverlayRibbonDescriptor>::~PolylineOverlayBatch(_QWORD *a1)
{
  md::PolylineOverlayBatch<md::Ribbons::PolylineOverlayRibbonDescriptor>::~PolylineOverlayBatch(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t md::PolylineOverlayBatch<md::Ribbons::PolylineOverlayRibbonDescriptor>::~PolylineOverlayBatch(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;

  *a1 = &off_1E429A3A8;
  v2 = (std::__shared_weak_count *)a1[189];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)a1[187];
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[187];
    if (!v5)
      goto LABEL_11;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  v8 = (std::__shared_weak_count *)a1[185];
  if (v8)
  {
    v9 = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  *a1 = &off_1E428C7A0;
  v11 = (std::__shared_weak_count *)a1[181];
  if (v11)
  {
    v12 = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  return md::Ribbons::RibbonBatch<md::Ribbons::PolylineOverlayRibbonDescriptor>::~RibbonBatch((uint64_t)a1);
}

void md::RibbonBatch<md::Ribbons::PolylineOverlayRibbonDescriptor>::~RibbonBatch(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *a1 = &off_1E428C7A0;
  v2 = (std::__shared_weak_count *)a1[181];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  md::Ribbons::RibbonBatch<md::Ribbons::PolylineOverlayRibbonDescriptor>::~RibbonBatch((uint64_t)a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t *std::unique_ptr<std::__hash_node<std::__hash_value_type<unsigned int,std::vector<std::unique_ptr<md::PolylineOverlayRibbon,mdm::TypeDeleter<md::PolylineOverlayRibbon>>,geo::StdAllocator<std::unique_ptr<md::PolylineOverlayRibbon,mdm::TypeDeleter<md::PolylineOverlayRibbon>>,mdm::Allocator>>>,void *>,std::__hash_node_destructor<geo::StdAllocator<std::__hash_node<std::__hash_value_type<unsigned int,std::vector<std::unique_ptr<md::PolylineOverlayRibbon,mdm::TypeDeleter<md::PolylineOverlayRibbon>>,geo::StdAllocator<std::unique_ptr<md::PolylineOverlayRibbon,mdm::TypeDeleter<md::PolylineOverlayRibbon>>,mdm::Allocator>>>,void *>,mdm::Allocator>>>::~unique_ptr[abi:nn180100](uint64_t *a1)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  void (***v6)(_QWORD, uint64_t);
  void (***v7)(_QWORD, uint64_t);
  unsigned __int8 v8;
  uint64_t v9;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (*((_BYTE *)a1 + 16))
    {
      v3 = *(_QWORD **)(v2 + 24);
      if (v3)
      {
        v4 = *(_QWORD **)(v2 + 32);
        v5 = *(_QWORD *)(v2 + 24);
        if (v4 != v3)
        {
          do
          {
            v7 = (void (***)(_QWORD, uint64_t))*--v4;
            v6 = v7;
            *v4 = 0;
            if (v7)
            {
              (**v6)(v6, v5);
              {
                v9 = operator new();
                mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v9, "VectorKitLabels", 0x5ED09DD50000000FLL);
              }
              (*(void (**)(uint64_t, void (***)(_QWORD, uint64_t), uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc
                                                                                               + 40))(mdm::Allocator::instance(void)::alloc, v6, 136);
            }
          }
          while (v4 != v3);
          v5 = *(_QWORD *)(v2 + 24);
        }
        *(_QWORD *)(v2 + 32) = v3;
        (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v2 + 48) + 40))(*(_QWORD *)(v2 + 48), v5, *(_QWORD *)(v2 + 40) - v5);
      }
    }
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)a1[1] + 40))(*(_QWORD *)a1[1], v2, 56);
  }
  return a1;
}

void md::PolylineOverlayLayer<md::Ribbons::PolylineOverlayRibbonDescriptor>::layout(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t *v8;
  _QWORD *v9;
  int8x8_t v10;
  uint8x8_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  _QWORD *v21;
  uint64_t v22;
  unint64_t v23;
  float *v24;
  double v25;
  unint64_t v26;
  double v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  _BYTE *v33;
  uint64_t *v34;
  uint64_t *v35;
  uint64_t v36;
  BOOL v37;
  uint64_t v38;
  _BYTE *v39;
  uint64_t v40;
  float v41;
  float v42;
  uint64_t *v43;
  uint64_t *v44;
  BOOL v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t *v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t *v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  _QWORD *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  unint64_t v97;
  uint64_t *v98;
  uint64_t v99;
  uint64_t *v100;
  __int128 *v101;
  uint64_t v102;
  __int128 v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  unint64_t v111;
  uint64_t v112;
  uint64_t *v113;
  __int128 *v114;
  uint64_t v115;
  __int128 v116;
  uint64_t v117;
  uint64_t v118;
  unint64_t v119;
  uint64_t v120;
  uint64_t *v121;
  __int128 *v122;
  uint64_t v123;
  __int128 v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  unint64_t v128;
  uint64_t v129;
  uint64_t *v130;
  __int128 *v131;
  uint64_t v132;
  __int128 v133;
  uint64_t v134;
  uint64_t v135;
  unint64_t v136;
  uint64_t v137;
  uint64_t *v138;
  __int128 *v139;
  uint64_t v140;
  __int128 v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  unint64_t v146;
  uint64_t v147;
  uint64_t *v148;
  __int128 *v149;
  uint64_t v150;
  __int128 v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t *v157;
  uint64_t v158;
  uint64_t v159;
  std::__shared_weak_count *v160;
  uint64_t v161;
  std::__shared_weak_count *v162;
  unint64_t *p_shared_owners;
  unint64_t v164;
  uint64_t v165;
  unint64_t *v166;
  unint64_t v167;
  unint64_t *v168;
  std::__shared_weak_count *v169;
  unint64_t *v170;
  unint64_t v171;
  _QWORD *v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  unint64_t *v177;
  unint64_t v178;
  std::__shared_weak_count *v179;
  unint64_t *v180;
  unint64_t v181;
  _QWORD *v182;
  uint64_t v183;
  _QWORD *v184;
  uint64_t v185;
  unint64_t *v186;
  unint64_t v187;
  std::__shared_weak_count *v188;
  unint64_t *v189;
  unint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  unint64_t *v195;
  unint64_t v196;
  std::__shared_weak_count *v197;
  unint64_t *v198;
  unint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  unint64_t *v204;
  unint64_t v205;
  std::__shared_weak_count *v206;
  unint64_t *v207;
  unint64_t v208;
  _QWORD *v209;
  uint64_t v210;
  _QWORD *v211;
  uint64_t v212;
  unint64_t *v213;
  unint64_t v214;
  std::__shared_weak_count *v215;
  unint64_t *v216;
  unint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  unint64_t *v222;
  unint64_t v223;
  unint64_t *v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  unint64_t *v229;
  unint64_t v230;
  std::__shared_weak_count *v231;
  unint64_t *v232;
  unint64_t v233;
  _QWORD *v234;
  uint64_t v235;
  _QWORD *v236;
  uint64_t v237;
  unint64_t *v238;
  unint64_t v239;
  std::__shared_weak_count *v240;
  unint64_t *v241;
  unint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  unint64_t *v247;
  unint64_t v248;
  unint64_t *v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  unint64_t *v254;
  unint64_t v255;
  std::__shared_weak_count *v256;
  unint64_t *v257;
  unint64_t v258;
  _QWORD *v259;
  uint64_t v260;
  _QWORD *v261;
  uint64_t v262;
  unint64_t *v263;
  unint64_t v264;
  std::__shared_weak_count *v265;
  unint64_t *v266;
  unint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  unint64_t *v272;
  unint64_t v273;
  unint64_t *v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  unint64_t *v279;
  unint64_t v280;
  std::__shared_weak_count *v281;
  unint64_t *v282;
  unint64_t v283;
  _QWORD *v284;
  uint64_t v285;
  _QWORD *v286;
  uint64_t v287;
  unint64_t *v288;
  unint64_t v289;
  std::__shared_weak_count *v290;
  unint64_t *v291;
  unint64_t v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  unint64_t *v297;
  unint64_t v298;
  unint64_t *v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  unint64_t *v304;
  unint64_t v305;
  std::__shared_weak_count *v306;
  unint64_t *v307;
  unint64_t v308;
  _QWORD *v309;
  uint64_t v310;
  _QWORD *v311;
  uint64_t v312;
  unint64_t *v313;
  unint64_t v314;
  std::__shared_weak_count *v315;
  unint64_t *v316;
  unint64_t v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  unint64_t *v322;
  unint64_t v323;
  unint64_t *v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t v328;
  unint64_t *v329;
  unint64_t v330;
  std::__shared_weak_count *v331;
  unint64_t *v332;
  unint64_t v333;
  _QWORD *v334;
  uint64_t v335;
  _QWORD *v336;
  uint64_t v337;
  unint64_t *v338;
  unint64_t v339;
  std::__shared_weak_count *v340;
  unint64_t *v341;
  unint64_t v342;
  uint64_t v343;
  uint64_t v344;
  uint64_t v345;
  uint64_t v346;
  unint64_t *v347;
  unint64_t v348;
  unint64_t *v349;
  uint64_t v350;
  uint64_t v351;
  uint64_t v352;
  uint64_t v353;
  unint64_t *v354;
  unint64_t v355;
  std::__shared_weak_count *v356;
  unint64_t *v357;
  unint64_t v358;
  _QWORD *v359;
  uint64_t v360;
  _QWORD *v361;
  uint64_t v362;
  unint64_t *v363;
  unint64_t v364;
  std::__shared_weak_count *v365;
  unint64_t *v366;
  unint64_t v367;
  uint64_t v368;
  uint64_t v369;
  uint64_t v370;
  uint64_t v371;
  unint64_t *v372;
  unint64_t v373;
  unint64_t *v374;
  uint64_t v375;
  uint64_t v376;
  uint64_t v377;
  uint64_t v378;
  unint64_t *v379;
  unint64_t v380;
  std::__shared_weak_count *v381;
  unint64_t *v382;
  unint64_t v383;
  _QWORD *v384;
  uint64_t v385;
  _QWORD *v386;
  uint64_t v387;
  unint64_t *v388;
  unint64_t v389;
  std::__shared_weak_count *v390;
  unint64_t *v391;
  unint64_t v392;
  uint64_t v393;
  uint64_t v394;
  uint64_t v395;
  uint64_t v396;
  unint64_t *v397;
  unint64_t v398;
  unint64_t *v399;
  uint64_t v400;
  uint64_t v401;
  uint64_t v402;
  uint64_t v403;
  unint64_t *v404;
  unint64_t v405;
  std::__shared_weak_count *v406;
  unint64_t *v407;
  unint64_t v408;
  _QWORD *v409;
  uint64_t v410;
  _QWORD *v411;
  uint64_t v412;
  unint64_t *v413;
  unint64_t v414;
  std::__shared_weak_count *v415;
  unint64_t *v416;
  unint64_t v417;
  uint64_t v418;
  uint64_t v419;
  uint64_t v420;
  uint64_t v421;
  unint64_t *v422;
  unint64_t v423;
  unint64_t *v424;
  uint64_t *v425;
  __int128 v426;
  std::__shared_weak_count *v427;
  char v428;
  _OWORD *v429;
  _OWORD v430[2];
  __int16 v431;
  uint64_t v432;
  int v433;

  v4 = *(_QWORD *)(a1 + 224);
  if (*(_BYTE *)(v4 + 304))
  {
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(v4 + 176);
    if (*(_BYTE *)(a2 + 136))
      *(_QWORD *)(a1 + 88) = *(_QWORD *)(v4 + 176);
  }
  if (*(_BYTE *)(a2 + 132))
  {
    *(_QWORD *)(a1 + 64) = *(_QWORD *)(v4 + 200);
    *(_QWORD *)(a1 + 72) = *(_QWORD *)(v4 + 208);
    *(_QWORD *)(a1 + 80) = *(_QWORD *)(v4 + 240);
    if (*(_BYTE *)(a2 + 136))
    {
      *(_QWORD *)(a1 + 96) = *(_QWORD *)(v4 + 200);
      *(_QWORD *)(a1 + 104) = *(_QWORD *)(v4 + 208);
      *(_QWORD *)(a1 + 112) = *(_QWORD *)(v4 + 240);
    }
    *(_QWORD *)(a1 + 120) = *(_QWORD *)(v4 + 248);
    *(_QWORD *)(a1 + 128) = *(_QWORD *)(v4 + 248);
  }
  else
  {
    v5 = *(unsigned __int8 *)(a2 + 56);
    *(_QWORD *)(a1 + 64) = *(_QWORD *)(v4 + 184);
    *(_QWORD *)(a1 + 72) = *(_QWORD *)(v4 + 208);
    if (v5)
    {
      *(_QWORD *)(a1 + 80) = *(_QWORD *)(v4 + 232);
      if (!*(_BYTE *)(a2 + 136))
        goto LABEL_14;
      *(_QWORD *)(a1 + 96) = *(_QWORD *)(v4 + 184);
      *(_QWORD *)(a1 + 104) = *(_QWORD *)(v4 + 208);
      v6 = *(_QWORD *)(v4 + 232);
    }
    else
    {
      *(_QWORD *)(a1 + 80) = *(_QWORD *)(v4 + 224);
      if (!*(_BYTE *)(a2 + 136))
        goto LABEL_14;
      *(_QWORD *)(a1 + 96) = *(_QWORD *)(v4 + 184);
      *(_QWORD *)(a1 + 104) = *(_QWORD *)(v4 + 208);
      v6 = *(_QWORD *)(v4 + 224);
    }
    *(_QWORD *)(a1 + 112) = v6;
  }
LABEL_14:
  v7 = *(uint64_t **)(a1 + 8);
  v8 = *(uint64_t **)(a1 + 16);
  if (v8 == v7)
    return;
  if (!*(_BYTE *)(*v7 + 1456))
  {
    v9 = *(_QWORD **)(*(_QWORD *)a2 + 8);
    v10 = (int8x8_t)v9[1];
    if (!*(_QWORD *)&v10)
      goto LABEL_41;
    v11 = (uint8x8_t)vcnt_s8(v10);
    v11.i16[0] = vaddlv_u8(v11);
    if (v11.u32[0] > 1uLL)
    {
      v12 = 0x1AF456233693CD46;
      if (*(_QWORD *)&v10 <= 0x1AF456233693CD46uLL)
        v12 = 0x1AF456233693CD46uLL % *(_QWORD *)&v10;
    }
    else
    {
      v12 = (*(_QWORD *)&v10 - 1) & 0x1AF456233693CD46;
    }
    v13 = *(_QWORD **)(*v9 + 8 * v12);
    if (!v13)
      goto LABEL_41;
    v14 = (_QWORD *)*v13;
    if (!v14)
      goto LABEL_41;
    if (v11.u32[0] < 2uLL)
    {
      while (1)
      {
        v16 = v14[1];
        if (v16 == 0x1AF456233693CD46)
        {
          if (v14[2] == 0x1AF456233693CD46)
            goto LABEL_39;
        }
        else if ((v16 & (*(_QWORD *)&v10 - 1)) != v12)
        {
          goto LABEL_41;
        }
        v14 = (_QWORD *)*v14;
        if (!v14)
          goto LABEL_41;
      }
    }
    while (1)
    {
      v15 = v14[1];
      if (v15 == 0x1AF456233693CD46)
      {
        if (v14[2] == 0x1AF456233693CD46)
        {
LABEL_39:
          v17 = v14[5];
          if (*(_QWORD *)(v17 + 8) == 0x1AF456233693CD46)
          {
            v18 = *(_QWORD *)(v17 + 32);
            goto LABEL_42;
          }
LABEL_41:
          v18 = 0;
LABEL_42:
          if (*(_BYTE *)(v18 + 3776))
          {
            v19 = *(_QWORD *)(a1 + 144);
            if (v19)
            {
              v20 = gdc::GlobeTileGrid::intersectWithFrustum(v19, (const double *)(v18 + 984), *(double *)(v18 + 24));
LABEL_67:
              v30 = *(_QWORD *)(a1 + 8);
              v31 = *(_QWORD *)(a1 + 16);
              if (v30 == v31)
                return;
              do
              {
                v33 = *(_BYTE **)v30;
                v34 = *(uint64_t **)(*(_QWORD *)v30 + 1400);
                v35 = *(uint64_t **)(*(_QWORD *)v30 + 1408);
                if (v34 == v35)
                {
                  v32 = 0;
                }
                else
                {
                  v32 = 0;
                  do
                  {
                    v36 = *v34++;
                    v37 = (*(_DWORD *)(v36 + 96) & v20) != 0;
                    v32 |= v37;
                    *(_BYTE *)(v36 + 48) = v37;
                  }
                  while (v34 != v35);
                }
                v33[136] = v32 & 1;
                v33[264] = v32 & 1;
                v33[392] = v32 & 1;
                v33[520] = v32 & 1;
                v33[648] = v32 & 1;
                v33[776] = v32 & 1;
                v33[904] = v32 & 1;
                v33[1032] = v32 & 1;
                v33[1160] = v32 & 1;
                v33[1288] = v32 & 1;
                v30 += 8;
                v33[1424] = v32 & 1;
              }
              while (v30 != v31);
              v7 = *(uint64_t **)(a1 + 8);
              v8 = *(uint64_t **)(a1 + 16);
              if (v7 == v8)
                return;
LABEL_76:
              v425 = v8;
              while (2)
              {
                v38 = *v7;
                if (!*(_BYTE *)(*v7 + 1424))
                  goto LABEL_78;
                v39 = *(_BYTE **)(v38 + 1472);
                v430[0] = xmmword_19FFB3980;
                v430[1] = xmmword_19FFB3B40;
                v431 = 256;
                v432 = 0x3F800000BF800000;
                v433 = 0;
                if (*(_QWORD *)(a2 + 144) && *(_BYTE *)(a2 + 136))
                {
                  md::PolylineOverlayStyle::updateFromStyleQuery<md::Stroke1StyleProperties>((uint64_t)v39, a2, (uint64_t)v430);
                  if (!*v39)
                    goto LABEL_86;
LABEL_85:
                  md::PolylineOverlayStyle::writePasses((uint64_t)v39, a2, (uint64_t)v430);
                }
                else
                {
                  md::PolylineOverlayStyle::updateFromOverlay((uint64_t)v39, a2, (uint64_t)v430);
                  if (*v39)
                    goto LABEL_85;
                }
LABEL_86:
                v40 = *(_QWORD *)(v38 + 1472);
                os_unfair_lock_lock((os_unfair_lock_t)(v40 + 196));
                v41 = *(float *)(v40 + 152);
                v42 = *(float *)(v40 + 156);
                os_unfair_lock_unlock((os_unfair_lock_t)(v40 + 196));
                v43 = *(uint64_t **)(v38 + 1400);
                v44 = *(uint64_t **)(v38 + 1408);
                while (v43 != v44)
                {
                  v46 = *v43;
                  if (*(_BYTE *)(*v43 + 48))
                  {
                    v45 = *(float *)(v46 + 104) >= v41 && *(float *)(v46 + 100) <= v42;
                    *(_BYTE *)(v46 + 48) = v45;
                  }
                  ++v43;
                }
                v47 = **(unsigned __int8 **)(v38 + 1472);
                *(_BYTE *)(v38 + 136) = v47;
                *(_BYTE *)(v38 + 264) = v47;
                *(_BYTE *)(v38 + 392) = v47;
                *(_BYTE *)(v38 + 520) = v47;
                *(_BYTE *)(v38 + 648) = v47;
                *(_BYTE *)(v38 + 776) = v47;
                *(_BYTE *)(v38 + 904) = v47;
                *(_BYTE *)(v38 + 1032) = v47;
                *(_BYTE *)(v38 + 1160) = v47;
                *(_BYTE *)(v38 + 1288) = v47;
                *(_BYTE *)(v38 + 1424) = v47;
                if (!v47)
                {
LABEL_78:
                  if (++v7 == v8)
                    return;
                  continue;
                }
                break;
              }
              v48 = 0;
              LOBYTE(v429) = *(_BYTE *)(v38 + 1464);
              BYTE1(v429) = *(_BYTE *)(a2 + 88);
              BYTE2(v429) = *(_BYTE *)(a2 + 135);
              BYTE3(v429) = *(_BYTE *)(a2 + 134);
              v49 = *(_QWORD **)(*(_QWORD *)(v38 + 8) + 224);
              while (2)
              {
                if (!*(_BYTE *)(*(_QWORD *)(v38 + 1472) + v48 + 120))
                {
                  *(_BYTE *)(v38 + (v48 << 7) + 136) = 0;
                  goto LABEL_99;
                }
                v50 = v38 + (v48 << 7);
                *(_BYTE *)(v50 + 136) = 1;
                *(_DWORD *)(v50 + 56) = *(unsigned __int8 *)(a2 + 57);
                if (((1 << v48) & 0x255) != 0)
                {
                  v51 = v49[17];
                  v52 = *(_QWORD *)(v51 + 8);
                  if (v52 != *(_QWORD *)v51)
                  {
                    v53 = *(_QWORD *)(v52 - 8);
                    *(_QWORD *)(v51 + 8) = v52 - 8;
                    v54 = *(uint64_t **)(v51 + 40);
                    v55 = *(_QWORD *)(v51 + 48);
                    if ((unint64_t)v54 >= v55)
                    {
                      v56 = *(_QWORD *)(v51 + 32);
                      v57 = ((uint64_t)v54 - v56) >> 3;
                      v58 = v57 + 1;
                      if ((unint64_t)(v57 + 1) >> 61)
                        goto LABEL_506;
                      v59 = v55 - v56;
                      if (v59 >> 2 > v58)
                        v58 = v59 >> 2;
                      if ((unint64_t)v59 >= 0x7FFFFFFFFFFFFFF8)
                        v58 = 0x1FFFFFFFFFFFFFFFLL;
                      if (v58)
                      {
                        v60 = 8 * v58;
                        v61 = (*(uint64_t (**)(_QWORD, unint64_t, uint64_t))(**(_QWORD **)(v51 + 56)
                                                                                           + 16))(*(_QWORD *)(v51 + 56), 8 * v58, 8);
                        v62 = (uint64_t *)(v61 + 8 * v57);
                        v58 = v61 + v60;
                        if (v61)
                          *v62 = v53;
                      }
                      else
                      {
                        v62 = (uint64_t *)(8 * v57);
                      }
                      v95 = *(_QWORD *)(v51 + 32);
                      v94 = *(_QWORD *)(v51 + 40);
                      v96 = v94 - v95;
                      if (v94 != v95)
                      {
                        v97 = v96 - 8;
                        if ((unint64_t)(v96 - 8) < 0x38)
                        {
                          v98 = v62;
                        }
                        else
                        {
                          v98 = v62;
                          if ((unint64_t)(v94 - (_QWORD)v62) >= 0x20)
                          {
                            v99 = (v97 >> 3) + 1;
                            v100 = v62 - 2;
                            v101 = (__int128 *)(v94 - 16);
                            v102 = v99 & 0x3FFFFFFFFFFFFFFCLL;
                            do
                            {
                              v103 = *v101;
                              *((_OWORD *)v100 - 1) = *(v101 - 1);
                              *(_OWORD *)v100 = v103;
                              v100 -= 4;
                              v101 -= 2;
                              v102 -= 4;
                            }
                            while (v102);
                            v98 = &v62[-(v99 & 0x3FFFFFFFFFFFFFFCLL)];
                            v94 -= 8 * (v99 & 0x3FFFFFFFFFFFFFFCLL);
                            if (v99 == (v99 & 0x3FFFFFFFFFFFFFFCLL))
                              break;
                          }
                        }
                        do
                        {
                          v125 = *(_QWORD *)(v94 - 8);
                          v94 -= 8;
                          *--v98 = v125;
                        }
                        while (v94 != v95);
                        break;
                      }
LABEL_225:
                      v98 = v62;
LABEL_235:
                      v93 = v62 + 1;
                      *(_QWORD *)(v51 + 32) = v98;
                      *(_QWORD *)(v51 + 40) = v62 + 1;
                      v155 = *(_QWORD *)(v51 + 48);
                      *(_QWORD *)(v51 + 48) = v58;
                      if (v94)
                        (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v51 + 56) + 40))(*(_QWORD *)(v51 + 56), v94, v155 - v94);
LABEL_237:
                      *(_QWORD *)(v51 + 40) = v93;
                      *(_QWORD *)&v430[0] = v53;
                      v156 = *(_QWORD *)(v51 + 120);
                      if (!v156)
                      {
LABEL_505:
                        std::__throw_bad_function_call[abi:nn180100]();
LABEL_506:
                        abort();
                      }
                      (*(void (**)(uint64_t, _OWORD *))(*(_QWORD *)v156 + 48))(v156, v430);
                      while (2)
                      {
                        v50 += 16;
                        v157 = *(uint64_t **)(*(_QWORD *)(v38 + 8) + 224);
                        switch((char)v48)
                        {
                          case 0:
                            v159 = *v157;
                            goto LABEL_248;
                          case 1:
                          case 8:
                            v158 = v157[1];
                            goto LABEL_246;
                          case 2:
                          case 9:
                            v159 = v157[2];
                            goto LABEL_248;
                          case 3:
                          case 7:
                            md::PolylinePipelineStateManager<md::Ribbons::PolylineOverlayRibbonDescriptor,ggl::PolylineOverlayRibbon::FillPipelineState,std::shared_ptr<ggl::PolylineOverlayFillShader>>::pipelineStateForFunctionConstants((std::__shared_weak_count **)v430, v157[3], (char *)&v429);
                            break;
                          case 4:
                            v159 = v157[4];
                            goto LABEL_248;
                          case 5:
                            v158 = v157[5];
LABEL_246:
                            md::PolylinePipelineStateManager<md::Ribbons::PolylineOverlayRibbonDescriptor,ggl::PolylineOverlayRibbon::AlphaPipelineState,std::shared_ptr<ggl::PolylineOverlayAlphaShader>>::pipelineStateForFunctionConstants((std::__shared_weak_count **)v430, v158, (char *)&v429);
                            break;
                          case 6:
                            v159 = v157[6];
LABEL_248:
                            md::PolylinePipelineStateManager<md::Ribbons::PolylineOverlayRibbonDescriptor,ggl::PolylineOverlayRibbon::AlphaFillPipelineState,std::shared_ptr<ggl::PolylineOverlayAlphaFillShader>>::pipelineStateForFunctionConstants((std::__shared_weak_count **)v430, v159, (char *)&v429);
                            break;
                          default:
                            v53 = 0;
                            continue;
                        }
                        break;
                      }
                      v160 = (std::__shared_weak_count *)*((_QWORD *)&v430[0] + 1);
                      v161 = *(_QWORD *)&v430[0];
                      if (!*(_QWORD *)&v430[0] || **(_QWORD **)(*(_QWORD *)&v430[0] + 40) != *(_QWORD *)(v53 + 8))
                      {
                        v162 = *(std::__shared_weak_count **)(v53 + 24);
                        *(_QWORD *)(v53 + 16) = 0;
                        *(_QWORD *)(v53 + 24) = 0;
                        if (v162)
                        {
                          p_shared_owners = (unint64_t *)&v162->__shared_owners_;
                          do
                            v164 = __ldaxr(p_shared_owners);
                          while (__stlxr(v164 - 1, p_shared_owners));
                          goto LABEL_264;
                        }
                        goto LABEL_265;
                      }
                      v165 = *(_QWORD *)(v53 + 16);
                      if (v165 && v165 != *(_QWORD *)&v430[0])
                      {
                        v426 = v430[0];
                        ggl::PipelineSetup::resetData(v53);
                        v160 = (std::__shared_weak_count *)*((_QWORD *)&v426 + 1);
                        v161 = v426;
                      }
                      if (v160)
                      {
                        v166 = (unint64_t *)&v160->__shared_owners_;
                        do
                          v167 = __ldxr(v166);
                        while (__stxr(v167 + 1, v166));
                      }
                      v162 = *(std::__shared_weak_count **)(v53 + 24);
                      *(_QWORD *)(v53 + 16) = v161;
                      *(_QWORD *)(v53 + 24) = v160;
                      if (!v162)
                        goto LABEL_265;
                      v168 = (unint64_t *)&v162->__shared_owners_;
                      do
                        v164 = __ldaxr(v168);
                      while (__stlxr(v164 - 1, v168));
LABEL_264:
                      if (!v164)
                      {
                        v427 = v160;
                        ((void (*)(std::__shared_weak_count *))v162->__on_zero_shared)(v162);
                        std::__shared_weak_count::__release_weak(v162);
                        v169 = v427;
                        if (v427)
                        {
LABEL_266:
                          v170 = (unint64_t *)&v169->__shared_owners_;
                          do
                            v171 = __ldaxr(v170);
                          while (__stlxr(v171 - 1, v170));
                          if (!v171)
                          {
                            ((void (*)(std::__shared_weak_count *))v169->__on_zero_shared)(v169);
                            std::__shared_weak_count::__release_weak(v169);
                          }
                        }
                      }
                      else
                      {
LABEL_265:
                        v169 = v160;
                        if (v160)
                          goto LABEL_266;
                      }
                      **(_QWORD **)(v53 + 96) = *(_QWORD *)(v49[32] + 16);
                      if (v53)
                      {
                        v172 = *(_QWORD **)(v38 + 1472);
                        if (v172)
                        {
                          switch((char)v48)
                          {
                            case 0:
                              v173 = *(_QWORD *)(v53 + 64);
                              *(_QWORD *)(v173 + 40) = 0;
                              v174 = v172[1];
                              *(_QWORD *)(v173 + 32) = v174;
                              v175 = *(_QWORD *)(v53 + 160);
                              v176 = v172[2];
                              if (v176)
                              {
                                v177 = (unint64_t *)(v176 + 8);
                                do
                                  v178 = __ldxr(v177);
                                while (__stxr(v178 + 1, v177));
                              }
                              v179 = *(std::__shared_weak_count **)(v175 + 40);
                              *(_QWORD *)(v175 + 32) = v174;
                              *(_QWORD *)(v175 + 40) = v176;
                              if (v179)
                              {
                                v180 = (unint64_t *)&v179->__shared_owners_;
                                do
                                  v181 = __ldaxr(v180);
                                while (__stlxr(v181 - 1, v180));
                                if (!v181)
                                {
                                  ((void (*)(std::__shared_weak_count *))v179->__on_zero_shared)(v179);
                                  std::__shared_weak_count::__release_weak(v179);
                                }
                              }
                              v182 = *(_QWORD **)(v53 + 64);
                              v182[1] = 0;
                              v183 = *(_QWORD *)(v38 + 1488);
                              *v182 = v183;
                              v184 = *(_QWORD **)(v53 + 160);
                              v185 = *(_QWORD *)(v38 + 1496);
                              if (v185)
                              {
                                v186 = (unint64_t *)(v185 + 8);
                                do
                                  v187 = __ldxr(v186);
                                while (__stxr(v187 + 1, v186));
                              }
                              v188 = (std::__shared_weak_count *)v184[1];
                              *v184 = v183;
                              v184[1] = v185;
                              if (v188)
                              {
                                v189 = (unint64_t *)&v188->__shared_owners_;
                                do
                                  v190 = __ldaxr(v189);
                                while (__stlxr(v190 - 1, v189));
                                if (!v190)
                                {
                                  ((void (*)(std::__shared_weak_count *))v188->__on_zero_shared)(v188);
                                  std::__shared_weak_count::__release_weak(v188);
                                }
                              }
                              v191 = *(_QWORD *)(v53 + 64);
                              *(_QWORD *)(v191 + 24) = 0;
                              v192 = *(_QWORD *)(v38 + 1504);
                              *(_QWORD *)(v191 + 16) = v192;
                              v193 = *(_QWORD *)(v53 + 160);
                              v194 = *(_QWORD *)(v38 + 1512);
                              if (v194)
                              {
                                v195 = (unint64_t *)(v194 + 8);
                                do
                                  v196 = __ldxr(v195);
                                while (__stxr(v196 + 1, v195));
                              }
                              v197 = *(std::__shared_weak_count **)(v193 + 24);
                              *(_QWORD *)(v193 + 16) = v192;
                              *(_QWORD *)(v193 + 24) = v194;
                              if (v197)
                              {
                                v198 = (unint64_t *)&v197->__shared_owners_;
                                do
                                  v199 = __ldaxr(v198);
                                while (__stlxr(v199 - 1, v198));
                                goto LABEL_96;
                              }
                              break;
                            case 1:
                              v200 = *(_QWORD *)(v53 + 64);
                              *(_QWORD *)(v200 + 40) = 0;
                              v201 = v172[3];
                              *(_QWORD *)(v200 + 32) = v201;
                              v202 = *(_QWORD *)(v53 + 160);
                              v203 = v172[4];
                              if (v203)
                              {
                                v204 = (unint64_t *)(v203 + 8);
                                do
                                  v205 = __ldxr(v204);
                                while (__stxr(v205 + 1, v204));
                              }
                              v206 = *(std::__shared_weak_count **)(v202 + 40);
                              *(_QWORD *)(v202 + 32) = v201;
                              *(_QWORD *)(v202 + 40) = v203;
                              if (v206)
                              {
                                v207 = (unint64_t *)&v206->__shared_owners_;
                                do
                                  v208 = __ldaxr(v207);
                                while (__stlxr(v208 - 1, v207));
                                if (!v208)
                                {
                                  ((void (*)(std::__shared_weak_count *))v206->__on_zero_shared)(v206);
                                  std::__shared_weak_count::__release_weak(v206);
                                }
                              }
                              v209 = *(_QWORD **)(v53 + 64);
                              v209[1] = 0;
                              v210 = *(_QWORD *)(v38 + 1488);
                              *v209 = v210;
                              v211 = *(_QWORD **)(v53 + 160);
                              v212 = *(_QWORD *)(v38 + 1496);
                              if (v212)
                              {
                                v213 = (unint64_t *)(v212 + 8);
                                do
                                  v214 = __ldxr(v213);
                                while (__stxr(v214 + 1, v213));
                              }
                              v215 = (std::__shared_weak_count *)v211[1];
                              *v211 = v210;
                              v211[1] = v212;
                              if (v215)
                              {
                                v216 = (unint64_t *)&v215->__shared_owners_;
                                do
                                  v217 = __ldaxr(v216);
                                while (__stlxr(v217 - 1, v216));
                                if (!v217)
                                {
                                  ((void (*)(std::__shared_weak_count *))v215->__on_zero_shared)(v215);
                                  std::__shared_weak_count::__release_weak(v215);
                                }
                              }
                              v218 = *(_QWORD *)(v53 + 64);
                              *(_QWORD *)(v218 + 24) = 0;
                              v219 = *(_QWORD *)(v38 + 1504);
                              *(_QWORD *)(v218 + 16) = v219;
                              v220 = *(_QWORD *)(v53 + 160);
                              v221 = *(_QWORD *)(v38 + 1512);
                              if (v221)
                              {
                                v222 = (unint64_t *)(v221 + 8);
                                do
                                  v223 = __ldxr(v222);
                                while (__stxr(v223 + 1, v222));
                              }
                              v197 = *(std::__shared_weak_count **)(v220 + 24);
                              *(_QWORD *)(v220 + 16) = v219;
                              *(_QWORD *)(v220 + 24) = v221;
                              if (v197)
                              {
                                v224 = (unint64_t *)&v197->__shared_owners_;
                                do
                                  v199 = __ldaxr(v224);
                                while (__stlxr(v199 - 1, v224));
                                goto LABEL_96;
                              }
                              break;
                            case 2:
                              v225 = *(_QWORD *)(v53 + 64);
                              *(_QWORD *)(v225 + 40) = 0;
                              v226 = v172[5];
                              *(_QWORD *)(v225 + 32) = v226;
                              v227 = *(_QWORD *)(v53 + 160);
                              v228 = v172[6];
                              if (v228)
                              {
                                v229 = (unint64_t *)(v228 + 8);
                                do
                                  v230 = __ldxr(v229);
                                while (__stxr(v230 + 1, v229));
                              }
                              v231 = *(std::__shared_weak_count **)(v227 + 40);
                              *(_QWORD *)(v227 + 32) = v226;
                              *(_QWORD *)(v227 + 40) = v228;
                              if (v231)
                              {
                                v232 = (unint64_t *)&v231->__shared_owners_;
                                do
                                  v233 = __ldaxr(v232);
                                while (__stlxr(v233 - 1, v232));
                                if (!v233)
                                {
                                  ((void (*)(std::__shared_weak_count *))v231->__on_zero_shared)(v231);
                                  std::__shared_weak_count::__release_weak(v231);
                                }
                              }
                              v234 = *(_QWORD **)(v53 + 64);
                              v234[1] = 0;
                              v235 = *(_QWORD *)(v38 + 1488);
                              *v234 = v235;
                              v236 = *(_QWORD **)(v53 + 160);
                              v237 = *(_QWORD *)(v38 + 1496);
                              if (v237)
                              {
                                v238 = (unint64_t *)(v237 + 8);
                                do
                                  v239 = __ldxr(v238);
                                while (__stxr(v239 + 1, v238));
                              }
                              v240 = (std::__shared_weak_count *)v236[1];
                              *v236 = v235;
                              v236[1] = v237;
                              if (v240)
                              {
                                v241 = (unint64_t *)&v240->__shared_owners_;
                                do
                                  v242 = __ldaxr(v241);
                                while (__stlxr(v242 - 1, v241));
                                if (!v242)
                                {
                                  ((void (*)(std::__shared_weak_count *))v240->__on_zero_shared)(v240);
                                  std::__shared_weak_count::__release_weak(v240);
                                }
                              }
                              v243 = *(_QWORD *)(v53 + 64);
                              *(_QWORD *)(v243 + 24) = 0;
                              v244 = *(_QWORD *)(v38 + 1504);
                              *(_QWORD *)(v243 + 16) = v244;
                              v245 = *(_QWORD *)(v53 + 160);
                              v246 = *(_QWORD *)(v38 + 1512);
                              if (v246)
                              {
                                v247 = (unint64_t *)(v246 + 8);
                                do
                                  v248 = __ldxr(v247);
                                while (__stxr(v248 + 1, v247));
                              }
                              v197 = *(std::__shared_weak_count **)(v245 + 24);
                              *(_QWORD *)(v245 + 16) = v244;
                              *(_QWORD *)(v245 + 24) = v246;
                              if (v197)
                              {
                                v249 = (unint64_t *)&v197->__shared_owners_;
                                do
                                  v199 = __ldaxr(v249);
                                while (__stlxr(v199 - 1, v249));
                                goto LABEL_96;
                              }
                              break;
                            case 3:
                              v250 = *(_QWORD *)(v53 + 64);
                              *(_QWORD *)(v250 + 40) = 0;
                              v251 = v172[5];
                              *(_QWORD *)(v250 + 32) = v251;
                              v252 = *(_QWORD *)(v53 + 160);
                              v253 = v172[6];
                              if (v253)
                              {
                                v254 = (unint64_t *)(v253 + 8);
                                do
                                  v255 = __ldxr(v254);
                                while (__stxr(v255 + 1, v254));
                              }
                              v256 = *(std::__shared_weak_count **)(v252 + 40);
                              *(_QWORD *)(v252 + 32) = v251;
                              *(_QWORD *)(v252 + 40) = v253;
                              if (v256)
                              {
                                v257 = (unint64_t *)&v256->__shared_owners_;
                                do
                                  v258 = __ldaxr(v257);
                                while (__stlxr(v258 - 1, v257));
                                if (!v258)
                                {
                                  ((void (*)(std::__shared_weak_count *))v256->__on_zero_shared)(v256);
                                  std::__shared_weak_count::__release_weak(v256);
                                }
                              }
                              v259 = *(_QWORD **)(v53 + 64);
                              v259[1] = 0;
                              v260 = *(_QWORD *)(v38 + 1488);
                              *v259 = v260;
                              v261 = *(_QWORD **)(v53 + 160);
                              v262 = *(_QWORD *)(v38 + 1496);
                              if (v262)
                              {
                                v263 = (unint64_t *)(v262 + 8);
                                do
                                  v264 = __ldxr(v263);
                                while (__stxr(v264 + 1, v263));
                              }
                              v265 = (std::__shared_weak_count *)v261[1];
                              *v261 = v260;
                              v261[1] = v262;
                              if (v265)
                              {
                                v266 = (unint64_t *)&v265->__shared_owners_;
                                do
                                  v267 = __ldaxr(v266);
                                while (__stlxr(v267 - 1, v266));
                                if (!v267)
                                {
                                  ((void (*)(std::__shared_weak_count *))v265->__on_zero_shared)(v265);
                                  std::__shared_weak_count::__release_weak(v265);
                                }
                              }
                              v268 = *(_QWORD *)(v53 + 64);
                              *(_QWORD *)(v268 + 24) = 0;
                              v269 = *(_QWORD *)(v38 + 1504);
                              *(_QWORD *)(v268 + 16) = v269;
                              v270 = *(_QWORD *)(v53 + 160);
                              v271 = *(_QWORD *)(v38 + 1512);
                              if (v271)
                              {
                                v272 = (unint64_t *)(v271 + 8);
                                do
                                  v273 = __ldxr(v272);
                                while (__stxr(v273 + 1, v272));
                              }
                              v197 = *(std::__shared_weak_count **)(v270 + 24);
                              *(_QWORD *)(v270 + 16) = v269;
                              *(_QWORD *)(v270 + 24) = v271;
                              if (v197)
                              {
                                v274 = (unint64_t *)&v197->__shared_owners_;
                                do
                                  v199 = __ldaxr(v274);
                                while (__stlxr(v199 - 1, v274));
                                goto LABEL_96;
                              }
                              break;
                            case 4:
                              v275 = *(_QWORD *)(v53 + 64);
                              *(_QWORD *)(v275 + 40) = 0;
                              v276 = v172[7];
                              *(_QWORD *)(v275 + 32) = v276;
                              v277 = *(_QWORD *)(v53 + 160);
                              v278 = v172[8];
                              if (v278)
                              {
                                v279 = (unint64_t *)(v278 + 8);
                                do
                                  v280 = __ldxr(v279);
                                while (__stxr(v280 + 1, v279));
                              }
                              v281 = *(std::__shared_weak_count **)(v277 + 40);
                              *(_QWORD *)(v277 + 32) = v276;
                              *(_QWORD *)(v277 + 40) = v278;
                              if (v281)
                              {
                                v282 = (unint64_t *)&v281->__shared_owners_;
                                do
                                  v283 = __ldaxr(v282);
                                while (__stlxr(v283 - 1, v282));
                                if (!v283)
                                {
                                  ((void (*)(std::__shared_weak_count *))v281->__on_zero_shared)(v281);
                                  std::__shared_weak_count::__release_weak(v281);
                                }
                              }
                              v284 = *(_QWORD **)(v53 + 64);
                              v284[1] = 0;
                              v285 = *(_QWORD *)(v38 + 1488);
                              *v284 = v285;
                              v286 = *(_QWORD **)(v53 + 160);
                              v287 = *(_QWORD *)(v38 + 1496);
                              if (v287)
                              {
                                v288 = (unint64_t *)(v287 + 8);
                                do
                                  v289 = __ldxr(v288);
                                while (__stxr(v289 + 1, v288));
                              }
                              v290 = (std::__shared_weak_count *)v286[1];
                              *v286 = v285;
                              v286[1] = v287;
                              if (v290)
                              {
                                v291 = (unint64_t *)&v290->__shared_owners_;
                                do
                                  v292 = __ldaxr(v291);
                                while (__stlxr(v292 - 1, v291));
                                if (!v292)
                                {
                                  ((void (*)(std::__shared_weak_count *))v290->__on_zero_shared)(v290);
                                  std::__shared_weak_count::__release_weak(v290);
                                }
                              }
                              v293 = *(_QWORD *)(v53 + 64);
                              *(_QWORD *)(v293 + 24) = 0;
                              v294 = *(_QWORD *)(v38 + 1504);
                              *(_QWORD *)(v293 + 16) = v294;
                              v295 = *(_QWORD *)(v53 + 160);
                              v296 = *(_QWORD *)(v38 + 1512);
                              if (v296)
                              {
                                v297 = (unint64_t *)(v296 + 8);
                                do
                                  v298 = __ldxr(v297);
                                while (__stxr(v298 + 1, v297));
                              }
                              v197 = *(std::__shared_weak_count **)(v295 + 24);
                              *(_QWORD *)(v295 + 16) = v294;
                              *(_QWORD *)(v295 + 24) = v296;
                              if (v197)
                              {
                                v299 = (unint64_t *)&v197->__shared_owners_;
                                do
                                  v199 = __ldaxr(v299);
                                while (__stlxr(v199 - 1, v299));
                                goto LABEL_96;
                              }
                              break;
                            case 5:
                              v300 = *(_QWORD *)(v53 + 64);
                              *(_QWORD *)(v300 + 40) = 0;
                              v301 = v172[9];
                              *(_QWORD *)(v300 + 32) = v301;
                              v302 = *(_QWORD *)(v53 + 160);
                              v303 = v172[10];
                              if (v303)
                              {
                                v304 = (unint64_t *)(v303 + 8);
                                do
                                  v305 = __ldxr(v304);
                                while (__stxr(v305 + 1, v304));
                              }
                              v306 = *(std::__shared_weak_count **)(v302 + 40);
                              *(_QWORD *)(v302 + 32) = v301;
                              *(_QWORD *)(v302 + 40) = v303;
                              if (v306)
                              {
                                v307 = (unint64_t *)&v306->__shared_owners_;
                                do
                                  v308 = __ldaxr(v307);
                                while (__stlxr(v308 - 1, v307));
                                if (!v308)
                                {
                                  ((void (*)(std::__shared_weak_count *))v306->__on_zero_shared)(v306);
                                  std::__shared_weak_count::__release_weak(v306);
                                }
                              }
                              v309 = *(_QWORD **)(v53 + 64);
                              v309[1] = 0;
                              v310 = *(_QWORD *)(v38 + 1488);
                              *v309 = v310;
                              v311 = *(_QWORD **)(v53 + 160);
                              v312 = *(_QWORD *)(v38 + 1496);
                              if (v312)
                              {
                                v313 = (unint64_t *)(v312 + 8);
                                do
                                  v314 = __ldxr(v313);
                                while (__stxr(v314 + 1, v313));
                              }
                              v315 = (std::__shared_weak_count *)v311[1];
                              *v311 = v310;
                              v311[1] = v312;
                              if (v315)
                              {
                                v316 = (unint64_t *)&v315->__shared_owners_;
                                do
                                  v317 = __ldaxr(v316);
                                while (__stlxr(v317 - 1, v316));
                                if (!v317)
                                {
                                  ((void (*)(std::__shared_weak_count *))v315->__on_zero_shared)(v315);
                                  std::__shared_weak_count::__release_weak(v315);
                                }
                              }
                              v318 = *(_QWORD *)(v53 + 64);
                              *(_QWORD *)(v318 + 24) = 0;
                              v319 = *(_QWORD *)(v38 + 1504);
                              *(_QWORD *)(v318 + 16) = v319;
                              v320 = *(_QWORD *)(v53 + 160);
                              v321 = *(_QWORD *)(v38 + 1512);
                              if (v321)
                              {
                                v322 = (unint64_t *)(v321 + 8);
                                do
                                  v323 = __ldxr(v322);
                                while (__stxr(v323 + 1, v322));
                              }
                              v197 = *(std::__shared_weak_count **)(v320 + 24);
                              *(_QWORD *)(v320 + 16) = v319;
                              *(_QWORD *)(v320 + 24) = v321;
                              if (v197)
                              {
                                v324 = (unint64_t *)&v197->__shared_owners_;
                                do
                                  v199 = __ldaxr(v324);
                                while (__stlxr(v199 - 1, v324));
                                goto LABEL_96;
                              }
                              break;
                            case 6:
                              v325 = *(_QWORD *)(v53 + 64);
                              *(_QWORD *)(v325 + 40) = 0;
                              v326 = v172[11];
                              *(_QWORD *)(v325 + 32) = v326;
                              v327 = *(_QWORD *)(v53 + 160);
                              v328 = v172[12];
                              if (v328)
                              {
                                v329 = (unint64_t *)(v328 + 8);
                                do
                                  v330 = __ldxr(v329);
                                while (__stxr(v330 + 1, v329));
                              }
                              v331 = *(std::__shared_weak_count **)(v327 + 40);
                              *(_QWORD *)(v327 + 32) = v326;
                              *(_QWORD *)(v327 + 40) = v328;
                              if (v331)
                              {
                                v332 = (unint64_t *)&v331->__shared_owners_;
                                do
                                  v333 = __ldaxr(v332);
                                while (__stlxr(v333 - 1, v332));
                                if (!v333)
                                {
                                  ((void (*)(std::__shared_weak_count *))v331->__on_zero_shared)(v331);
                                  std::__shared_weak_count::__release_weak(v331);
                                }
                              }
                              v334 = *(_QWORD **)(v53 + 64);
                              v334[1] = 0;
                              v335 = *(_QWORD *)(v38 + 1488);
                              *v334 = v335;
                              v336 = *(_QWORD **)(v53 + 160);
                              v337 = *(_QWORD *)(v38 + 1496);
                              if (v337)
                              {
                                v338 = (unint64_t *)(v337 + 8);
                                do
                                  v339 = __ldxr(v338);
                                while (__stxr(v339 + 1, v338));
                              }
                              v340 = (std::__shared_weak_count *)v336[1];
                              *v336 = v335;
                              v336[1] = v337;
                              if (v340)
                              {
                                v341 = (unint64_t *)&v340->__shared_owners_;
                                do
                                  v342 = __ldaxr(v341);
                                while (__stlxr(v342 - 1, v341));
                                if (!v342)
                                {
                                  ((void (*)(std::__shared_weak_count *))v340->__on_zero_shared)(v340);
                                  std::__shared_weak_count::__release_weak(v340);
                                }
                              }
                              v343 = *(_QWORD *)(v53 + 64);
                              *(_QWORD *)(v343 + 24) = 0;
                              v344 = *(_QWORD *)(v38 + 1504);
                              *(_QWORD *)(v343 + 16) = v344;
                              v345 = *(_QWORD *)(v53 + 160);
                              v346 = *(_QWORD *)(v38 + 1512);
                              if (v346)
                              {
                                v347 = (unint64_t *)(v346 + 8);
                                do
                                  v348 = __ldxr(v347);
                                while (__stxr(v348 + 1, v347));
                              }
                              v197 = *(std::__shared_weak_count **)(v345 + 24);
                              *(_QWORD *)(v345 + 16) = v344;
                              *(_QWORD *)(v345 + 24) = v346;
                              if (v197)
                              {
                                v349 = (unint64_t *)&v197->__shared_owners_;
                                do
                                  v199 = __ldaxr(v349);
                                while (__stlxr(v199 - 1, v349));
                                goto LABEL_96;
                              }
                              break;
                            case 7:
                              v350 = *(_QWORD *)(v53 + 64);
                              *(_QWORD *)(v350 + 40) = 0;
                              v351 = v172[11];
                              *(_QWORD *)(v350 + 32) = v351;
                              v352 = *(_QWORD *)(v53 + 160);
                              v353 = v172[12];
                              if (v353)
                              {
                                v354 = (unint64_t *)(v353 + 8);
                                do
                                  v355 = __ldxr(v354);
                                while (__stxr(v355 + 1, v354));
                              }
                              v356 = *(std::__shared_weak_count **)(v352 + 40);
                              *(_QWORD *)(v352 + 32) = v351;
                              *(_QWORD *)(v352 + 40) = v353;
                              if (v356)
                              {
                                v357 = (unint64_t *)&v356->__shared_owners_;
                                do
                                  v358 = __ldaxr(v357);
                                while (__stlxr(v358 - 1, v357));
                                if (!v358)
                                {
                                  ((void (*)(std::__shared_weak_count *))v356->__on_zero_shared)(v356);
                                  std::__shared_weak_count::__release_weak(v356);
                                }
                              }
                              v359 = *(_QWORD **)(v53 + 64);
                              v359[1] = 0;
                              v360 = *(_QWORD *)(v38 + 1488);
                              *v359 = v360;
                              v361 = *(_QWORD **)(v53 + 160);
                              v362 = *(_QWORD *)(v38 + 1496);
                              if (v362)
                              {
                                v363 = (unint64_t *)(v362 + 8);
                                do
                                  v364 = __ldxr(v363);
                                while (__stxr(v364 + 1, v363));
                              }
                              v365 = (std::__shared_weak_count *)v361[1];
                              *v361 = v360;
                              v361[1] = v362;
                              if (v365)
                              {
                                v366 = (unint64_t *)&v365->__shared_owners_;
                                do
                                  v367 = __ldaxr(v366);
                                while (__stlxr(v367 - 1, v366));
                                if (!v367)
                                {
                                  ((void (*)(std::__shared_weak_count *))v365->__on_zero_shared)(v365);
                                  std::__shared_weak_count::__release_weak(v365);
                                }
                              }
                              v368 = *(_QWORD *)(v53 + 64);
                              *(_QWORD *)(v368 + 24) = 0;
                              v369 = *(_QWORD *)(v38 + 1504);
                              *(_QWORD *)(v368 + 16) = v369;
                              v370 = *(_QWORD *)(v53 + 160);
                              v371 = *(_QWORD *)(v38 + 1512);
                              if (v371)
                              {
                                v372 = (unint64_t *)(v371 + 8);
                                do
                                  v373 = __ldxr(v372);
                                while (__stxr(v373 + 1, v372));
                              }
                              v197 = *(std::__shared_weak_count **)(v370 + 24);
                              *(_QWORD *)(v370 + 16) = v369;
                              *(_QWORD *)(v370 + 24) = v371;
                              if (v197)
                              {
                                v374 = (unint64_t *)&v197->__shared_owners_;
                                do
                                  v199 = __ldaxr(v374);
                                while (__stlxr(v199 - 1, v374));
                                goto LABEL_96;
                              }
                              break;
                            case 8:
                              v375 = *(_QWORD *)(v53 + 64);
                              *(_QWORD *)(v375 + 40) = 0;
                              v376 = v172[13];
                              *(_QWORD *)(v375 + 32) = v376;
                              v377 = *(_QWORD *)(v53 + 160);
                              v378 = v172[14];
                              if (v378)
                              {
                                v379 = (unint64_t *)(v378 + 8);
                                do
                                  v380 = __ldxr(v379);
                                while (__stxr(v380 + 1, v379));
                              }
                              v381 = *(std::__shared_weak_count **)(v377 + 40);
                              *(_QWORD *)(v377 + 32) = v376;
                              *(_QWORD *)(v377 + 40) = v378;
                              if (v381)
                              {
                                v382 = (unint64_t *)&v381->__shared_owners_;
                                do
                                  v383 = __ldaxr(v382);
                                while (__stlxr(v383 - 1, v382));
                                if (!v383)
                                {
                                  ((void (*)(std::__shared_weak_count *))v381->__on_zero_shared)(v381);
                                  std::__shared_weak_count::__release_weak(v381);
                                }
                              }
                              v384 = *(_QWORD **)(v53 + 64);
                              v384[1] = 0;
                              v385 = *(_QWORD *)(v38 + 1488);
                              *v384 = v385;
                              v386 = *(_QWORD **)(v53 + 160);
                              v387 = *(_QWORD *)(v38 + 1496);
                              if (v387)
                              {
                                v388 = (unint64_t *)(v387 + 8);
                                do
                                  v389 = __ldxr(v388);
                                while (__stxr(v389 + 1, v388));
                              }
                              v390 = (std::__shared_weak_count *)v386[1];
                              *v386 = v385;
                              v386[1] = v387;
                              if (v390)
                              {
                                v391 = (unint64_t *)&v390->__shared_owners_;
                                do
                                  v392 = __ldaxr(v391);
                                while (__stlxr(v392 - 1, v391));
                                if (!v392)
                                {
                                  ((void (*)(std::__shared_weak_count *))v390->__on_zero_shared)(v390);
                                  std::__shared_weak_count::__release_weak(v390);
                                }
                              }
                              v393 = *(_QWORD *)(v53 + 64);
                              *(_QWORD *)(v393 + 24) = 0;
                              v394 = *(_QWORD *)(v38 + 1504);
                              *(_QWORD *)(v393 + 16) = v394;
                              v395 = *(_QWORD *)(v53 + 160);
                              v396 = *(_QWORD *)(v38 + 1512);
                              if (v396)
                              {
                                v397 = (unint64_t *)(v396 + 8);
                                do
                                  v398 = __ldxr(v397);
                                while (__stxr(v398 + 1, v397));
                              }
                              v197 = *(std::__shared_weak_count **)(v395 + 24);
                              *(_QWORD *)(v395 + 16) = v394;
                              *(_QWORD *)(v395 + 24) = v396;
                              if (v197)
                              {
                                v399 = (unint64_t *)&v197->__shared_owners_;
                                do
                                  v199 = __ldaxr(v399);
                                while (__stlxr(v199 - 1, v399));
                                goto LABEL_96;
                              }
                              break;
                            case 9:
                              v400 = *(_QWORD *)(v53 + 64);
                              *(_QWORD *)(v400 + 40) = 0;
                              v401 = v172[5];
                              *(_QWORD *)(v400 + 32) = v401;
                              v402 = *(_QWORD *)(v53 + 160);
                              v403 = v172[6];
                              if (v403)
                              {
                                v404 = (unint64_t *)(v403 + 8);
                                do
                                  v405 = __ldxr(v404);
                                while (__stxr(v405 + 1, v404));
                              }
                              v406 = *(std::__shared_weak_count **)(v402 + 40);
                              *(_QWORD *)(v402 + 32) = v401;
                              *(_QWORD *)(v402 + 40) = v403;
                              if (v406)
                              {
                                v407 = (unint64_t *)&v406->__shared_owners_;
                                do
                                  v408 = __ldaxr(v407);
                                while (__stlxr(v408 - 1, v407));
                                if (!v408)
                                {
                                  ((void (*)(std::__shared_weak_count *))v406->__on_zero_shared)(v406);
                                  std::__shared_weak_count::__release_weak(v406);
                                }
                              }
                              v409 = *(_QWORD **)(v53 + 64);
                              v409[1] = 0;
                              v410 = *(_QWORD *)(v38 + 1488);
                              *v409 = v410;
                              v411 = *(_QWORD **)(v53 + 160);
                              v412 = *(_QWORD *)(v38 + 1496);
                              if (v412)
                              {
                                v413 = (unint64_t *)(v412 + 8);
                                do
                                  v414 = __ldxr(v413);
                                while (__stxr(v414 + 1, v413));
                              }
                              v415 = (std::__shared_weak_count *)v411[1];
                              *v411 = v410;
                              v411[1] = v412;
                              if (v415)
                              {
                                v416 = (unint64_t *)&v415->__shared_owners_;
                                do
                                  v417 = __ldaxr(v416);
                                while (__stlxr(v417 - 1, v416));
                                if (!v417)
                                {
                                  ((void (*)(std::__shared_weak_count *))v415->__on_zero_shared)(v415);
                                  std::__shared_weak_count::__release_weak(v415);
                                }
                              }
                              v418 = *(_QWORD *)(v53 + 64);
                              *(_QWORD *)(v418 + 24) = 0;
                              v419 = *(_QWORD *)(v38 + 1504);
                              *(_QWORD *)(v418 + 16) = v419;
                              v420 = *(_QWORD *)(v53 + 160);
                              v421 = *(_QWORD *)(v38 + 1512);
                              if (v421)
                              {
                                v422 = (unint64_t *)(v421 + 8);
                                do
                                  v423 = __ldxr(v422);
                                while (__stxr(v423 + 1, v422));
                              }
                              v197 = *(std::__shared_weak_count **)(v420 + 24);
                              *(_QWORD *)(v420 + 16) = v419;
                              *(_QWORD *)(v420 + 24) = v421;
                              if (v197)
                              {
                                v424 = (unint64_t *)&v197->__shared_owners_;
                                do
                                  v199 = __ldaxr(v424);
                                while (__stlxr(v199 - 1, v424));
LABEL_96:
                                if (!v199)
                                {
                                  ((void (*)(std::__shared_weak_count *))v197->__on_zero_shared)(v197);
                                  std::__shared_weak_count::__release_weak(v197);
                                }
                              }
                              break;
                            default:
                              break;
                          }
                        }
                      }
                      *(_QWORD *)(v50 + 32) = v53;
LABEL_99:
                      if (++v48 == 10)
                      {
                        v8 = v425;
                        goto LABEL_78;
                      }
                      continue;
                    }
LABEL_157:
                    if (v54)
                      *v54 = v53;
                    v93 = v54 + 1;
                    goto LABEL_237;
                  }
                  v77 = *(_QWORD *)(v51 + 88);
                  if (!v77)
                    goto LABEL_505;
                  v53 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v77 + 48))(v77);
                  v54 = *(uint64_t **)(v51 + 40);
                  v78 = *(_QWORD *)(v51 + 48);
                  if ((unint64_t)v54 < v78)
                    goto LABEL_157;
                  v79 = *(_QWORD *)(v51 + 32);
                  v80 = ((uint64_t)v54 - v79) >> 3;
                  v58 = v80 + 1;
                  if ((unint64_t)(v80 + 1) >> 61)
                    goto LABEL_506;
                  v81 = v78 - v79;
                  if (v81 >> 2 > v58)
                    v58 = v81 >> 2;
                  if ((unint64_t)v81 >= 0x7FFFFFFFFFFFFFF8)
                    v58 = 0x1FFFFFFFFFFFFFFFLL;
                  if (v58)
                  {
                    v82 = 8 * v58;
                    v83 = (*(uint64_t (**)(_QWORD, unint64_t, uint64_t))(**(_QWORD **)(v51 + 56) + 16))(*(_QWORD *)(v51 + 56), 8 * v58, 8);
                    v62 = (uint64_t *)(v83 + 8 * v80);
                    v58 = v83 + v82;
                    if (v83)
                      *v62 = v53;
                  }
                  else
                  {
                    v62 = (uint64_t *)(8 * v80);
                  }
                  v117 = *(_QWORD *)(v51 + 32);
                  v94 = *(_QWORD *)(v51 + 40);
                  v118 = v94 - v117;
                  if (v94 == v117)
                    goto LABEL_225;
                  v119 = v118 - 8;
                  if ((unint64_t)(v118 - 8) < 0x38)
                  {
                    v98 = v62;
                  }
                  else
                  {
                    v98 = v62;
                    if ((unint64_t)(v94 - (_QWORD)v62) >= 0x20)
                    {
                      v120 = (v119 >> 3) + 1;
                      v121 = v62 - 2;
                      v122 = (__int128 *)(v94 - 16);
                      v123 = v120 & 0x3FFFFFFFFFFFFFFCLL;
                      do
                      {
                        v124 = *v122;
                        *((_OWORD *)v121 - 1) = *(v122 - 1);
                        *(_OWORD *)v121 = v124;
                        v121 -= 4;
                        v122 -= 2;
                        v123 -= 4;
                      }
                      while (v123);
                      v98 = &v62[-(v120 & 0x3FFFFFFFFFFFFFFCLL)];
                      v94 -= 8 * (v120 & 0x3FFFFFFFFFFFFFFCLL);
                      if (v120 == (v120 & 0x3FFFFFFFFFFFFFFCLL))
                        break;
                    }
                  }
                  do
                  {
                    v143 = *(_QWORD *)(v94 - 8);
                    v94 -= 8;
                    *--v98 = v143;
                  }
                  while (v94 != v117);
                }
                else if (((1 << v48) & 0x122) != 0)
                {
                  v51 = v49[16];
                  v63 = *(_QWORD *)(v51 + 8);
                  if (v63 == *(_QWORD *)v51)
                  {
                    v84 = *(_QWORD *)(v51 + 88);
                    if (!v84)
                      goto LABEL_505;
                    v53 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v84 + 48))(v84);
                    v54 = *(uint64_t **)(v51 + 40);
                    v85 = *(_QWORD *)(v51 + 48);
                    if ((unint64_t)v54 < v85)
                      goto LABEL_157;
                    v86 = *(_QWORD *)(v51 + 32);
                    v87 = ((uint64_t)v54 - v86) >> 3;
                    v58 = v87 + 1;
                    if ((unint64_t)(v87 + 1) >> 61)
                      goto LABEL_506;
                    v88 = v85 - v86;
                    if (v88 >> 2 > v58)
                      v58 = v88 >> 2;
                    if ((unint64_t)v88 >= 0x7FFFFFFFFFFFFFF8)
                      v58 = 0x1FFFFFFFFFFFFFFFLL;
                    if (v58)
                    {
                      v89 = 8 * v58;
                      v90 = (*(uint64_t (**)(_QWORD, unint64_t, uint64_t))(**(_QWORD **)(v51 + 56) + 16))(*(_QWORD *)(v51 + 56), 8 * v58, 8);
                      v62 = (uint64_t *)(v90 + 8 * v87);
                      v58 = v90 + v89;
                      if (v90)
                        *v62 = v53;
                    }
                    else
                    {
                      v62 = (uint64_t *)(8 * v87);
                    }
                    v134 = *(_QWORD *)(v51 + 32);
                    v94 = *(_QWORD *)(v51 + 40);
                    v135 = v94 - v134;
                    if (v94 == v134)
                      goto LABEL_225;
                    v136 = v135 - 8;
                    if ((unint64_t)(v135 - 8) < 0x38)
                    {
                      v98 = v62;
                    }
                    else
                    {
                      v98 = v62;
                      if ((unint64_t)(v94 - (_QWORD)v62) >= 0x20)
                      {
                        v137 = (v136 >> 3) + 1;
                        v138 = v62 - 2;
                        v139 = (__int128 *)(v94 - 16);
                        v140 = v137 & 0x3FFFFFFFFFFFFFFCLL;
                        do
                        {
                          v141 = *v139;
                          *((_OWORD *)v138 - 1) = *(v139 - 1);
                          *(_OWORD *)v138 = v141;
                          v138 -= 4;
                          v139 -= 2;
                          v140 -= 4;
                        }
                        while (v140);
                        v98 = &v62[-(v137 & 0x3FFFFFFFFFFFFFFCLL)];
                        v94 -= 8 * (v137 & 0x3FFFFFFFFFFFFFFCLL);
                        if (v137 == (v137 & 0x3FFFFFFFFFFFFFFCLL))
                          break;
                      }
                    }
                    do
                    {
                      v153 = *(_QWORD *)(v94 - 8);
                      v94 -= 8;
                      *--v98 = v153;
                    }
                    while (v94 != v134);
                  }
                  else
                  {
                    v53 = *(_QWORD *)(v63 - 8);
                    *(_QWORD *)(v51 + 8) = v63 - 8;
                    v54 = *(uint64_t **)(v51 + 40);
                    v64 = *(_QWORD *)(v51 + 48);
                    if ((unint64_t)v54 < v64)
                      goto LABEL_157;
                    v65 = *(_QWORD *)(v51 + 32);
                    v66 = ((uint64_t)v54 - v65) >> 3;
                    v58 = v66 + 1;
                    if ((unint64_t)(v66 + 1) >> 61)
                      goto LABEL_506;
                    v67 = v64 - v65;
                    if (v67 >> 2 > v58)
                      v58 = v67 >> 2;
                    if ((unint64_t)v67 >= 0x7FFFFFFFFFFFFFF8)
                      v58 = 0x1FFFFFFFFFFFFFFFLL;
                    if (v58)
                    {
                      v68 = 8 * v58;
                      v69 = (*(uint64_t (**)(_QWORD, unint64_t, uint64_t))(**(_QWORD **)(v51 + 56) + 16))(*(_QWORD *)(v51 + 56), 8 * v58, 8);
                      v62 = (uint64_t *)(v69 + 8 * v66);
                      v58 = v69 + v68;
                      if (v69)
                        *v62 = v53;
                    }
                    else
                    {
                      v62 = (uint64_t *)(8 * v66);
                    }
                    v109 = *(_QWORD *)(v51 + 32);
                    v94 = *(_QWORD *)(v51 + 40);
                    v110 = v94 - v109;
                    if (v94 == v109)
                      goto LABEL_225;
                    v111 = v110 - 8;
                    if ((unint64_t)(v110 - 8) < 0x38)
                    {
                      v98 = v62;
                    }
                    else
                    {
                      v98 = v62;
                      if ((unint64_t)(v94 - (_QWORD)v62) >= 0x20)
                      {
                        v112 = (v111 >> 3) + 1;
                        v113 = v62 - 2;
                        v114 = (__int128 *)(v94 - 16);
                        v115 = v112 & 0x3FFFFFFFFFFFFFFCLL;
                        do
                        {
                          v116 = *v114;
                          *((_OWORD *)v113 - 1) = *(v114 - 1);
                          *(_OWORD *)v113 = v116;
                          v113 -= 4;
                          v114 -= 2;
                          v115 -= 4;
                        }
                        while (v115);
                        v98 = &v62[-(v112 & 0x3FFFFFFFFFFFFFFCLL)];
                        v94 -= 8 * (v112 & 0x3FFFFFFFFFFFFFFCLL);
                        if (v112 == (v112 & 0x3FFFFFFFFFFFFFFCLL))
                          break;
                      }
                    }
                    do
                    {
                      v142 = *(_QWORD *)(v94 - 8);
                      v94 -= 8;
                      *--v98 = v142;
                    }
                    while (v94 != v109);
                  }
                }
                else
                {
                  v51 = v49[18];
                  v70 = *(_QWORD *)(v51 + 8);
                  if (v70 == *(_QWORD *)v51)
                  {
                    v91 = *(_QWORD *)(v51 + 88);
                    if (!v91)
                      goto LABEL_505;
                    v53 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v91 + 48))(v91);
                    v54 = *(uint64_t **)(v51 + 40);
                    v92 = *(_QWORD *)(v51 + 48);
                    if ((unint64_t)v54 < v92)
                      goto LABEL_157;
                    v104 = *(_QWORD *)(v51 + 32);
                    v105 = ((uint64_t)v54 - v104) >> 3;
                    v58 = v105 + 1;
                    if ((unint64_t)(v105 + 1) >> 61)
                      goto LABEL_506;
                    v106 = v92 - v104;
                    if (v106 >> 2 > v58)
                      v58 = v106 >> 2;
                    if ((unint64_t)v106 >= 0x7FFFFFFFFFFFFFF8)
                      v58 = 0x1FFFFFFFFFFFFFFFLL;
                    if (v58)
                    {
                      v107 = 8 * v58;
                      v108 = (*(uint64_t (**)(_QWORD, unint64_t, uint64_t))(**(_QWORD **)(v51 + 56)
                                                                                          + 16))(*(_QWORD *)(v51 + 56), 8 * v58, 8);
                      v62 = (uint64_t *)(v108 + 8 * v105);
                      v58 = v108 + v107;
                      if (v108)
                        *v62 = v53;
                    }
                    else
                    {
                      v62 = (uint64_t *)(8 * v105);
                    }
                    v144 = *(_QWORD *)(v51 + 32);
                    v94 = *(_QWORD *)(v51 + 40);
                    v145 = v94 - v144;
                    if (v94 == v144)
                      goto LABEL_225;
                    v146 = v145 - 8;
                    if ((unint64_t)(v145 - 8) < 0x38)
                    {
                      v98 = v62;
                    }
                    else
                    {
                      v98 = v62;
                      if ((unint64_t)(v94 - (_QWORD)v62) >= 0x20)
                      {
                        v147 = (v146 >> 3) + 1;
                        v148 = v62 - 2;
                        v149 = (__int128 *)(v94 - 16);
                        v150 = v147 & 0x3FFFFFFFFFFFFFFCLL;
                        do
                        {
                          v151 = *v149;
                          *((_OWORD *)v148 - 1) = *(v149 - 1);
                          *(_OWORD *)v148 = v151;
                          v148 -= 4;
                          v149 -= 2;
                          v150 -= 4;
                        }
                        while (v150);
                        v98 = &v62[-(v147 & 0x3FFFFFFFFFFFFFFCLL)];
                        v94 -= 8 * (v147 & 0x3FFFFFFFFFFFFFFCLL);
                        if (v147 == (v147 & 0x3FFFFFFFFFFFFFFCLL))
                          break;
                      }
                    }
                    do
                    {
                      v154 = *(_QWORD *)(v94 - 8);
                      v94 -= 8;
                      *--v98 = v154;
                    }
                    while (v94 != v144);
                  }
                  else
                  {
                    v53 = *(_QWORD *)(v70 - 8);
                    *(_QWORD *)(v51 + 8) = v70 - 8;
                    v54 = *(uint64_t **)(v51 + 40);
                    v71 = *(_QWORD *)(v51 + 48);
                    if ((unint64_t)v54 < v71)
                      goto LABEL_157;
                    v72 = *(_QWORD *)(v51 + 32);
                    v73 = ((uint64_t)v54 - v72) >> 3;
                    v58 = v73 + 1;
                    if ((unint64_t)(v73 + 1) >> 61)
                      goto LABEL_506;
                    v74 = v71 - v72;
                    if (v74 >> 2 > v58)
                      v58 = v74 >> 2;
                    if ((unint64_t)v74 >= 0x7FFFFFFFFFFFFFF8)
                      v58 = 0x1FFFFFFFFFFFFFFFLL;
                    if (v58)
                    {
                      v75 = 8 * v58;
                      v76 = (*(uint64_t (**)(_QWORD, unint64_t, uint64_t))(**(_QWORD **)(v51 + 56) + 16))(*(_QWORD *)(v51 + 56), 8 * v58, 8);
                      v62 = (uint64_t *)(v76 + 8 * v73);
                      v58 = v76 + v75;
                      if (v76)
                        *v62 = v53;
                    }
                    else
                    {
                      v62 = (uint64_t *)(8 * v73);
                    }
                    v126 = *(_QWORD *)(v51 + 32);
                    v94 = *(_QWORD *)(v51 + 40);
                    v127 = v94 - v126;
                    if (v94 == v126)
                      goto LABEL_225;
                    v128 = v127 - 8;
                    if ((unint64_t)(v127 - 8) < 0x38)
                    {
                      v98 = v62;
                    }
                    else
                    {
                      v98 = v62;
                      if ((unint64_t)(v94 - (_QWORD)v62) >= 0x20)
                      {
                        v129 = (v128 >> 3) + 1;
                        v130 = v62 - 2;
                        v131 = (__int128 *)(v94 - 16);
                        v132 = v129 & 0x3FFFFFFFFFFFFFFCLL;
                        do
                        {
                          v133 = *v131;
                          *((_OWORD *)v130 - 1) = *(v131 - 1);
                          *(_OWORD *)v130 = v133;
                          v130 -= 4;
                          v131 -= 2;
                          v132 -= 4;
                        }
                        while (v132);
                        v98 = &v62[-(v129 & 0x3FFFFFFFFFFFFFFCLL)];
                        v94 -= 8 * (v129 & 0x3FFFFFFFFFFFFFFCLL);
                        if (v129 == (v129 & 0x3FFFFFFFFFFFFFFCLL))
                          break;
                      }
                    }
                    do
                    {
                      v152 = *(_QWORD *)(v94 - 8);
                      v94 -= 8;
                      *--v98 = v152;
                    }
                    while (v94 != v126);
                  }
                }
                break;
              }
              v94 = *(_QWORD *)(v51 + 32);
              goto LABEL_235;
            }
            v22 = *(_QWORD *)(a1 + 184);
            if ((*(_BYTE *)(v22 + 16) & 2) == 0)
            {
              v23 = atomic_load(&ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::flag);
              if (v23 != -1)
              {
                *(_QWORD *)&v430[0] = &v428;
                v429 = v430;
                std::__call_once(&ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::flag, &v429, (void (__cdecl *)(void *))std::__call_once_proxy[abi:nn180100]<std::tuple<ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::$_0 &&>>);
              }
            }
            v24 = *(float **)(v22 + 72);
            v25 = 0.0;
          }
          else
          {
            if ((*(_QWORD *)&v10 & (*(_QWORD *)&v10 - 1)) != 0)
            {
              v26 = 0x8BD499FBD96FBB9ELL;
              if (*(_QWORD *)&v10 <= 0x8BD499FBD96FBB9ELL)
                v26 = 0x8BD499FBD96FBB9ELL % *(_QWORD *)&v10;
              v21 = *(_QWORD **)(*v9 + 8 * v26);
              do
              {
                do
                  v21 = (_QWORD *)*v21;
                while (v21[1] != 0x8BD499FBD96FBB9ELL);
              }
              while (v21[2] != 0x8BD499FBD96FBB9ELL);
            }
            else
            {
              v21 = *(_QWORD **)(*v9 + 8 * ((*(_QWORD *)&v10 - 1) & 0x8BD499FBD96FBB9ELL));
              do
              {
                do
                  v21 = (_QWORD *)*v21;
                while (v21[1] != 0x8BD499FBD96FBB9ELL);
              }
              while (v21[2] != 0x8BD499FBD96FBB9ELL);
            }
            v27 = 0.0;
            if (**(_BYTE **)(v21[5] + 32) && *(_BYTE *)(a1 + 176))
              v27 = *(double *)(v18 + 24) * 0.0000000249532021 * (double)(1 << *(_BYTE *)(a1 + 153));
            v28 = *(_QWORD *)(a1 + 184);
            if ((*(_BYTE *)(v28 + 16) & 2) == 0)
            {
              v29 = atomic_load(&ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::flag);
              if (v29 != -1)
              {
                *(_QWORD *)&v430[0] = &v428;
                v429 = v430;
                std::__call_once(&ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::flag, &v429, (void (__cdecl *)(void *))std::__call_once_proxy[abi:nn180100]<std::tuple<ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::$_0 &&>>);
              }
            }
            v24 = *(float **)(v28 + 72);
            v25 = v27;
          }
          v20 = ggl::CullingGrid::intersectedCellsForView(v24, v25);
          goto LABEL_67;
        }
      }
      else
      {
        if (v15 >= *(_QWORD *)&v10)
          v15 %= *(_QWORD *)&v10;
        if (v15 != v12)
          goto LABEL_41;
      }
      v14 = (_QWORD *)*v14;
      if (!v14)
        goto LABEL_41;
    }
  }
  if (v7 != v8)
    goto LABEL_76;
}

uint64_t md::PolylineOverlayStyle::updateFromStyleQuery<md::Stroke1StyleProperties>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int v3;
  unsigned int v4;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  _QWORD *v15;
  unint64_t v16;
  _QWORD *v17;
  float v18;
  int v19;
  float v20;
  float v21;
  float v22;
  unint64_t v23;
  uint64_t v24;
  float v25;
  unint64_t v26;
  float v27;
  float *v28;
  float v29;
  BOOL v30;
  unsigned int v31;
  float v32;
  float v33;
  float v34;
  float v35;
  uint64_t v36;
  unsigned int v37;
  float *v38;
  float v39;
  BOOL v40;
  int v41;
  char v42;
  char v43;
  uint64_t v44;
  float *v45;
  float v46;
  BOOL v47;
  unsigned int v48;
  int v49;
  uint64_t v50;
  char v51;
  double v52;
  int v53;
  int v54;
  id v55;
  double v56;
  double v57;
  uint64_t v58;
  unsigned int v59;
  unsigned int v60;
  double v61;
  float *v62;
  float v63;
  unsigned int v64;
  float *v65;
  float v66;
  int hasValueForKeyAtEnd;
  double v68;
  float *v69;
  float v70;
  unsigned int v71;
  float *v72;
  float v73;
  float v74;
  float v75;
  double v76;
  float v77;
  double v78;
  double v79;
  double v80;
  float v81;
  float v82;
  float v83;
  float v84;
  float v85;
  float v86;
  float v87;
  float v88;
  float v89;
  float v90;
  float v91;
  BOOL v92;
  BOOL v93;
  double v95;
  double v96;
  double v97;
  double v98;
  double v99;
  double v100;
  double v101;
  unint64_t v102[2];
  unint64_t v103;
  std::__shared_weak_count *v104;
  _QWORD v105[2];
  unsigned __int8 v106;
  char v107;

  *(_BYTE *)a1 = 1;
  *(_DWORD *)(a3 + 28) = 1065353216;
  *(_DWORD *)(a3 + 52) = 0;
  v8 = *(_QWORD *)(a2 + 144);
  v9 = *(std::__shared_weak_count **)(a2 + 152);
  v102[0] = v8;
  v102[1] = (unint64_t)v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
    v104 = v9;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
  }
  else
  {
    v104 = 0;
  }
  v105[0] = 0;
  v105[1] = 0;
  v103 = v8;
  v106 = 0;
  if (v8)
    LODWORD(v8) = (*(uint64_t (**)(unint64_t, _QWORD *))(*(_QWORD *)v8 + 48))(v8, v105);
  v106 = v8;
  if (v9)
  {
    v13 = (unint64_t *)&v9->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
    LODWORD(v8) = v106;
  }
  if (!(_DWORD)v8)
  {
    v18 = 0.0;
    LOBYTE(v19) = 2;
    v20 = 0.0;
    v21 = 0.0;
    v22 = 0.0;
LABEL_93:
    v84 = v22 * 12.92;
    goto LABEL_95;
  }
  v15 = *(_QWORD **)(*(_QWORD *)a2 + 8);
  v16 = v15[1];
  if ((v16 & (v16 - 1)) != 0)
  {
    v23 = 0x1AF456233693CD46;
    if (v16 <= 0x1AF456233693CD46)
      v23 = 0x1AF456233693CD46 % v16;
    v17 = *(_QWORD **)(*v15 + 8 * v23);
    do
    {
      do
        v17 = (_QWORD *)*v17;
      while (v17[1] != 0x1AF456233693CD46);
    }
    while (v17[2] != 0x1AF456233693CD46);
  }
  else
  {
    v17 = *(_QWORD **)(*v15 + 8 * ((v16 - 1) & 0x1AF456233693CD46));
    do
    {
      do
        v17 = (_QWORD *)*v17;
      while (v17[1] != 0x1AF456233693CD46);
    }
    while (v17[2] != 0x1AF456233693CD46);
  }
  v24 = *(_QWORD *)(v17[5] + 32);
  v25 = fmaxf(*(float *)(v24 + 3080) + *(float *)(v24 + 3076), 1.0);
  v26 = *(_QWORD *)(v103 + 24);
  v27 = fminf(fmaxf(v25, 0.0), 23.0);
  v28 = *(float **)v26;
  if (*(_QWORD *)v26
    && (v29 = *v28, LODWORD(v28) = *v28 == 1.0, *(_BYTE *)(v26 + 10))
    && (v29 != 0.0 ? (v30 = v29 == 1.0) : (v30 = 1), !v30)
    || (v31 = *(unsigned __int8 *)(v26 + v28 + 11), v29 = 0.0, v31 == 2))
  {
    LOBYTE(v102[0]) = 1;
    v107 = 1;
    gss::RenderStyle<gss::PropertyID>::styleSampledValueForKeyAtZ<float>(v26, 0x61u, 0, (BOOL *)v102, v27);
    v33 = v32;
    gss::RenderStyle<gss::PropertyID>::styleSampledValueForKeyAtZ<float>(v26, 0x61u, 1u, (BOOL *)&v107, v27);
    v35 = v33 + (float)((float)(v34 - v33) * v29);
  }
  else
  {
    gss::RenderStyle<gss::PropertyID>::styleSampledValueForKeyAtZ<float>(*(_QWORD *)(v103 + 24), 0x61u, v31, 0, v27);
  }
  *(float *)a3 = v35;
  v36 = *(_QWORD *)(v103 + 24);
  if ((int)v25 >= 0x17)
    v37 = 23;
  else
    v37 = (int)v25;
  v38 = *(float **)v36;
  if (*(_QWORD *)v36
    && (v39 = *v38, LODWORD(v38) = *v38 == 1.0, *(_BYTE *)(v36 + 10))
    && (v39 != 0.0 ? (v40 = v39 == 1.0) : (v40 = 1), !v40)
    || (v41 = *(unsigned __int8 *)(v36 + v38 + 11), v39 = 0.0, v41 == 2))
  {
    LOBYTE(v102[0]) = 1;
    v107 = 1;
    v42 = *(_BYTE *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<BOOL>((unsigned __int16 *)v36, 0x5Bu, v37, 0, v102);
    v43 = *(_BYTE *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<BOOL>((unsigned __int16 *)v36, 0x5Bu, v37, 1, &v107);
    if (v39 < 1.0)
      v43 = v42;
  }
  else
  {
    v43 = *(_BYTE *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<BOOL>(*(unsigned __int16 **)(v103 + 24), 0x5Bu, v37, v41, 0);
  }
  *(_BYTE *)(a3 + 33) = v43 != 0;
  gss::RenderStyle<gss::PropertyID>::sampledValueForKeyAtZ<geo::Color<unsigned short,4,(geo::ColorSpace)0>>(v102, *(_QWORD *)(v103 + 24), 0x5Du, 2u, v27);
  LOWORD(v4) = WORD1(v102[0]);
  LOWORD(v39) = v102[0];
  LOWORD(v25) = HIWORD(v102[0]);
  LOWORD(v3) = WORD2(v102[0]);
  v44 = *(_QWORD *)(v103 + 24);
  v45 = *(float **)v44;
  if (*(_QWORD *)v44
    && (v46 = *v45, LODWORD(v45) = *v45 == 1.0, *(_BYTE *)(v44 + 10))
    && (v46 != 0.0 ? (v47 = v46 == 1.0) : (v47 = 1), !v47)
    || (v48 = *(unsigned __int8 *)(v44 + v45 + 11), v46 = 0.0, v48 == 2))
  {
    LOBYTE(v102[0]) = 1;
    v107 = 1;
    v19 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(v44, 0x13Fu, v37, 0, v102);
    v49 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(v44, 0x13Fu, v37, 1u, &v107);
    if (v46 >= 1.0)
      LOBYTE(v19) = v49;
  }
  else
  {
    v19 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(*(_QWORD *)(v103 + 24), 0x13Fu, v37, v48, 0);
  }
  v99 = *(double *)(a2 + 184);
  v100 = *(double *)(a2 + 192);
  v97 = *(double *)(a2 + 200);
  v98 = *(double *)(a2 + 208);
  v50 = *(_QWORD *)(v24 + 5584);
  if (!v50)
    v50 = v24;
  v51 = *(_BYTE *)(a2 + 161);
  v101 = *(double *)(v50 + 3768);
  v52 = *(double *)(v50 + 1368);
  v53 = *(_DWORD *)(a2 + 168);
  v54 = *(_DWORD *)(a2 + 164);
  v55 = **(id **)a2;
  objc_msgSend(v55, "sizeInPixels");
  v95 = v57;
  v96 = v56;

  v58 = *(_QWORD *)(v103 + 24);
  v59 = *(unsigned __int8 *)(v58 + 12);
  v60 = v59;
  if (v59 != 2)
  {
LABEL_69:
    v61 = 0.0;
    if (!gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtEnd(v58, 0x1D7u, v60))
      goto LABEL_78;
    goto LABEL_70;
  }
  if ((gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtEnd(*(_QWORD *)(v103 + 24), 0x1D7u, 0) & 1) == 0)
  {
    v60 = 1;
    goto LABEL_69;
  }
LABEL_70:
  v62 = *(float **)v58;
  if (*(_QWORD *)v58 && (v63 = *v62, LODWORD(v62) = *v62 == 1.0, *(_BYTE *)(v58 + 10)) && v63 != 0.0 && v63 != 1.0
    || (v64 = *(unsigned __int8 *)(v58 + v62 + 11), v63 = 0.0, v64 == 2))
  {
    LOBYTE(v102[0]) = 1;
    v107 = 1;
    v65 = (float *)gss::RenderStyle<gss::PropertyID>::styleValueForKey<float>(v58, 0x1D7u, 0, v102);
    v66 = *v65
        + (float)((float)(*(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKey<float>(v58, 0x1D7u, 1u, &v107)
                        - *v65)
                * v63);
  }
  else
  {
    v66 = *(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKey<float>(v58, 0x1D7u, v64, 0);
  }
  v61 = v66;
  v58 = *(_QWORD *)(v103 + 24);
  v59 = *(unsigned __int8 *)(v58 + 12);
LABEL_78:
  if (v59 != 2)
    goto LABEL_81;
  if ((gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtEnd(v58, 0x1D8u, 0) & 1) == 0)
  {
    v59 = 1;
LABEL_81:
    hasValueForKeyAtEnd = gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtEnd(v58, 0x1D8u, v59);
    v68 = 0.0;
    if (!hasValueForKeyAtEnd)
      goto LABEL_90;
  }
  v69 = *(float **)v58;
  if (*(_QWORD *)v58 && (v70 = *v69, LODWORD(v69) = *v69 == 1.0, *(_BYTE *)(v58 + 10)) && v70 != 0.0 && v70 != 1.0
    || (v71 = *(unsigned __int8 *)(v58 + v69 + 11), v70 = 0.0, v71 == 2))
  {
    LOBYTE(v102[0]) = 1;
    v107 = 1;
    v72 = (float *)gss::RenderStyle<gss::PropertyID>::styleValueForKey<float>(v58, 0x1D8u, 0, v102);
    v73 = *v72
        + (float)((float)(*(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKey<float>(v58, 0x1D8u, 1u, &v107)
                        - *v72)
                * v70);
  }
  else
  {
    v73 = *(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKey<float>(v58, 0x1D8u, v71, 0);
  }
  v68 = v73;
LABEL_90:
  v74 = (float)v3;
  v75 = (float)LODWORD(v25);
  v22 = (float)LODWORD(v39) * 0.000015259;
  v76 = v52;
  v77 = v75 * 0.000015259;
  v78 = (double)(1 << v51);
  v79 = 1.0 / v78 * (double)v53;
  v80 = 1.0 / v78 * (double)((1 << v51) + ~v54);
  v81 = (v97 - v79) * v78;
  v82 = (v98 - v80) * v78;
  *(float *)&v79 = (v79 - v99) * v78;
  *(float *)&v80 = (v80 - v100) * v78;
  v83 = fmin(fmax(log2(v76* fmax(v81 + *(float *)&v79, v82 + *(float *)&v80)/ (v101* v78* fmin(v95, v96)* fmax(v61, 0.000000001)))/ fmax(v68, 0.000000001), 0.0), 1.0);
  v18 = v77 * v83;
  if ((float)(v77 * v83) == 0.0)
    *(_BYTE *)(a3 + 33) = 0;
  v21 = (float)v4 * 0.000015259;
  v20 = v74 * 0.000015259;
  if (v22 < 0.0031308)
    goto LABEL_93;
  v84 = (float)(powf(v22, 0.41667) * 1.055) + -0.055;
LABEL_95:
  if (v21 >= 0.0031308)
    v85 = (float)(powf(v21, 0.41667) * 1.055) + -0.055;
  else
    v85 = v21 * 12.92;
  if (v20 >= 0.0031308)
    v86 = (float)(powf(v20, 0.41667) * 1.055) + -0.055;
  else
    v86 = v20 * 12.92;
  *(float *)(a3 + 8) = v84;
  *(float *)(a3 + 12) = v85;
  *(float *)(a3 + 16) = v86;
  *(float *)(a3 + 20) = v18;
  v87 = *(float *)a3;
  v88 = *(float *)(a2 + 72) * *(float *)a3;
  *(float *)(a3 + 4) = v88;
  *(_QWORD *)(a3 + 36) = *(_QWORD *)(a1 + 152);
  v89 = 0.0;
  if (v19 == 1)
    v90 = 0.0;
  else
    v90 = 1.0;
  if (v19 == 1)
    v89 = 1.0;
  if (v19 == 2)
  {
    v90 = 0.5;
    v89 = 0.5;
  }
  *(float *)(a3 + 44) = -(float)(v88 * v89);
  *(float *)(a3 + 48) = v90 * v88;
  v91 = *(float *)(a3 + 28);
  v92 = 1;
  if (v91 >= 1.0 && !*(_DWORD *)(a3 + 52))
  {
    if (*(_QWORD *)(a1 + 176) == *(_QWORD *)(a1 + 168))
      v92 = *(float *)(a1 + 148) < 1.0;
    else
      v92 = *(_BYTE *)(a1 + 192) != 0;
  }
  v93 = 0;
  *(_BYTE *)(a3 + 32) = v92;
  *(_QWORD *)(a3 + 36) = *(_QWORD *)(a1 + 152);
  *(float *)(a3 + 4) = *(float *)(a2 + 72) * v87;
  if (*(_BYTE *)(a3 + 33) && v91 > 0.0)
    v93 = v18 > 0.0 || *(_QWORD *)(a1 + 176) != *(_QWORD *)(a1 + 168);
  *(_BYTE *)a1 = v93;
  return gss::QueryableLocker<gss::PropertyID>::~QueryableLocker((uint64_t)&v103);
}

void sub_19F951528(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  void *v11;
  va_list va;

  va_start(va, a11);

  gss::QueryableLocker<gss::PropertyID>::~QueryableLocker((uint64_t)va);
  _Unwind_Resume(a1);
}

void md::PolylineOverlayStyle::updateFromOverlay(uint64_t a1, uint64_t a2, uint64_t a3)
{
  os_unfair_lock_s *v6;
  float v7;
  float v8;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  int *v16;
  int v17;
  BOOL v19;
  BOOL v20;

  *(_BYTE *)a1 = 1;
  v6 = (os_unfair_lock_s *)(a1 + 196);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 196));
  v7 = *(float *)(a1 + 132);
  v8 = fabsf(v7);
  if (v7 <= 0.0 || v8 <= (float)(v8 * 0.000011921) || v8 < 1.1755e-38)
  {
    v11 = -1.0;
    if (*(float *)(a2 + 20) > 1.9)
      v11 = 0.0;
    v12 = v11 + *(float *)(a2 + 8);
    v7 = 21.0;
    if (v12 <= 18.0)
    {
      v13 = VKVectorOverlayAutomaticLineWidthForZoomLevel(double)::kLineWidthForZoomLevel[vcvtmd_u64_f64(v12)];
      v7 = v13
         + (v12 - floor(v12))
         * (float)(VKVectorOverlayAutomaticLineWidthForZoomLevel(double)::kLineWidthForZoomLevel[vcvtpd_u64_f64(v12)]
                 - v13);
    }
  }
  *(float *)a3 = v7;
  *(_DWORD *)(a3 + 8) = *(_DWORD *)(a1 + 136);
  *(_DWORD *)(a3 + 12) = *(_DWORD *)(a1 + 140);
  *(_DWORD *)(a3 + 16) = *(_DWORD *)(a1 + 144);
  v14 = *(float *)(a1 + 148);
  *(float *)(a3 + 20) = v14;
  v15 = *(float *)(a2 + 120) * *(float *)(a1 + 160);
  *(float *)(a3 + 28) = v15;
  if (*(_BYTE *)(a2 + 124))
    v16 = (int *)(a2 + 128);
  else
    v16 = (int *)(a1 + 164);
  v17 = *v16;
  *(_DWORD *)(a3 + 52) = v17;
  if (v15 >= 1.0 && v17 == 0)
  {
    if (*(_QWORD *)(a1 + 176) == *(_QWORD *)(a1 + 168))
      v19 = *(float *)(a1 + 148) < 1.0;
    else
      v19 = *(_BYTE *)(a1 + 192) != 0;
  }
  else
  {
    v19 = 1;
  }
  v20 = 0;
  *(_BYTE *)(a3 + 32) = v19;
  *(_QWORD *)(a3 + 36) = *(_QWORD *)(a1 + 152);
  *(float *)(a3 + 4) = *(float *)(a2 + 72) * v7;
  if (*(_BYTE *)(a3 + 33) && v15 > 0.0)
    v20 = v14 > 0.0 || *(_QWORD *)(a1 + 176) != *(_QWORD *)(a1 + 168);
  *(_BYTE *)a1 = v20;
  os_unfair_lock_unlock(v6);
}

void md::PolylineOverlayStyle::writePasses(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int v3;
  unsigned int v4;
  float v8;
  int v9;
  _QWORD *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  _QWORD *v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  int v20;
  unint64_t *v21;
  unint64_t v22;
  _QWORD *v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  _QWORD *v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t *v33;
  unint64_t v34;
  _QWORD *v35;
  unint64_t *v36;
  unint64_t v37;
  unint64_t *v38;
  _QWORD *v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  unint64_t *v43;
  unint64_t v44;
  unint64_t v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t *v50;
  unint64_t v51;
  _QWORD *v52;
  unint64_t v53;
  _QWORD *v54;
  float v55;
  int v56;
  float v57;
  float v58;
  float v59;
  unint64_t v60;
  uint64_t v61;
  float v62;
  unint64_t v63;
  float v64;
  float *v65;
  float v66;
  BOOL v67;
  unsigned int v68;
  float v69;
  float v70;
  float v71;
  float v72;
  uint64_t v73;
  unsigned int v74;
  float *v75;
  float v76;
  BOOL v77;
  int v78;
  char v79;
  char v80;
  uint64_t v81;
  float *v82;
  float v83;
  BOOL v84;
  unsigned int v85;
  int v86;
  uint64_t v87;
  char v88;
  int v89;
  int v90;
  id v91;
  double v92;
  double v93;
  uint64_t v94;
  unsigned int v95;
  unsigned int v96;
  double v97;
  float *v98;
  float v99;
  unsigned int v100;
  float *v101;
  float v102;
  int hasValueForKeyAtEnd;
  double v104;
  float *v105;
  float v106;
  unsigned int v107;
  float *v108;
  float v109;
  float v110;
  double v111;
  double v112;
  double v113;
  float v114;
  float v115;
  float v116;
  float v117;
  float v118;
  float v119;
  float v120;
  float v121;
  float v122;
  uint64_t v123;
  _BOOL4 v124;
  BOOL v125;
  _QWORD *v126;
  std::__shared_weak_count *v127;
  unint64_t *v128;
  unint64_t v129;
  unint64_t *v130;
  unint64_t v131;
  _QWORD *v132;
  std::__shared_weak_count *v133;
  unint64_t *v134;
  unint64_t v135;
  unint64_t *v136;
  unint64_t v137;
  char v138;
  _QWORD *v139;
  std::__shared_weak_count *v140;
  unint64_t *v141;
  unint64_t v142;
  unint64_t *v143;
  unint64_t v144;
  double v145;
  double v146;
  double v147;
  double v148;
  double v149;
  double v150;
  double v151;
  double v152;
  __int128 v153;
  __int128 v154;
  __int16 v155;
  uint64_t v156;
  uint64_t v157;
  int v158;
  _QWORD *v159;
  std::__shared_weak_count *v160;
  _QWORD *v161;
  std::__shared_weak_count *v162;
  uint64_t v163;
  std::__shared_weak_count *v164;
  _QWORD *v165;
  std::__shared_weak_count *v166;
  _QWORD *v167;
  std::__shared_weak_count *v168;
  _QWORD *v169;
  std::__shared_weak_count *v170;
  unint64_t v171[2];
  __int128 v172;
  _QWORD v173[2];
  unsigned __int8 v174;
  char v175;

  *(_WORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 120) = 0;
  v8 = *(float *)(a2 + 68) * (float)**(unsigned int **)(*(_QWORD *)(a2 + 112) + 256);
  v9 = *(unsigned __int8 *)(a2 + 136);
  if (*(_BYTE *)(a3 + 32))
  {
    if (*(_BYTE *)(a1 + 193))
    {
      v10 = *(_QWORD **)(a1 + 8);
      v11 = *(std::__shared_weak_count **)(a1 + 16);
      v169 = v10;
      v170 = v11;
      if (v11)
      {
        p_shared_owners = (unint64_t *)&v11->__shared_owners_;
        do
          v13 = __ldxr(p_shared_owners);
        while (__stxr(v13 + 1, p_shared_owners));
      }
      v153 = xmmword_19FFB34C0;
      md::PolylineOverlayStyle::setStyleConstants(v10, a3, (__int32 *)&v153, 1.0, v8);
      if (v11)
      {
        v14 = (unint64_t *)&v11->__shared_owners_;
        do
          v15 = __ldaxr(v14);
        while (__stlxr(v15 - 1, v14));
        if (!v15)
        {
          ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
          std::__shared_weak_count::__release_weak(v11);
        }
      }
    }
    v16 = *(_QWORD **)(a1 + 24);
    v17 = *(std::__shared_weak_count **)(a1 + 32);
    v167 = v16;
    v168 = v17;
    if (v17)
    {
      v18 = (unint64_t *)&v17->__shared_owners_;
      do
        v19 = __ldxr(v18);
      while (__stxr(v19 + 1, v18));
    }
    v20 = *(_DWORD *)(a3 + 20);
    DWORD2(v153) = 0;
    *(_QWORD *)&v153 = 0;
    HIDWORD(v153) = v20;
    md::PolylineOverlayStyle::setStyleConstants(v16, a3, (__int32 *)&v153, 1.0, v8);
    if (v17)
    {
      v21 = (unint64_t *)&v17->__shared_owners_;
      do
        v22 = __ldaxr(v21);
      while (__stlxr(v22 - 1, v21));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
      }
    }
    *(_BYTE *)(a1 + 120) = *(_BYTE *)(a1 + 193);
    *(_WORD *)(a1 + 121) = 257;
    *(_BYTE *)(a1 + 123) = 0;
    if (*(_BYTE *)(a2 + 132) && *(_BYTE *)(a2 + 133))
    {
      *(_WORD *)(a1 + 128) = 257;
      v23 = *(_QWORD **)(a1 + 104);
      v24 = *(std::__shared_weak_count **)(a1 + 112);
      v165 = v23;
      v166 = v24;
      if (v24)
      {
        v25 = (unint64_t *)&v24->__shared_owners_;
        do
          v26 = __ldxr(v25);
        while (__stxr(v26 + 1, v25));
      }
      md::PolylineOverlayStyle::setStyleConstants(v23, a3, (__int32 *)(a3 + 8), 0.2, v8);
      if (v24)
      {
        v27 = (unint64_t *)&v24->__shared_owners_;
        do
          v28 = __ldaxr(v27);
        while (__stlxr(v28 - 1, v27));
        goto LABEL_45;
      }
    }
  }
  else
  {
    *(_BYTE *)(a1 + 123) = 1;
    if (*(_BYTE *)(a2 + 132) && *(_BYTE *)(a2 + 133))
    {
      *(_WORD *)(a1 + 128) = 257;
      v29 = *(_QWORD **)(a1 + 104);
      v30 = *(std::__shared_weak_count **)(a1 + 112);
      v163 = *(_QWORD *)(a1 + 104);
      v164 = v30;
      if (v30)
      {
        v31 = (unint64_t *)&v30->__shared_owners_;
        do
          v32 = __ldxr(v31);
        while (__stxr(v32 + 1, v31));
      }
      md::PolylineOverlayStyle::setStyleConstants(v29, a3, (__int32 *)(a3 + 8), 0.2, v8);
      if (v30)
      {
        v33 = (unint64_t *)&v30->__shared_owners_;
        do
          v34 = __ldaxr(v33);
        while (__stlxr(v34 - 1, v33));
        if (!v34)
        {
          ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
          std::__shared_weak_count::__release_weak(v30);
        }
      }
      if (*(_BYTE *)(a1 + 193))
      {
        *(_BYTE *)(a1 + 120) = 1;
        v35 = *(_QWORD **)(a1 + 8);
        v24 = *(std::__shared_weak_count **)(a1 + 16);
        v161 = v35;
        v162 = v24;
        if (v24)
        {
          v36 = (unint64_t *)&v24->__shared_owners_;
          do
            v37 = __ldxr(v36);
          while (__stxr(v37 + 1, v36));
        }
        v153 = xmmword_19FFB34C0;
        md::PolylineOverlayStyle::setStyleConstants(v35, a3, (__int32 *)&v153, 1.0, v8);
        if (v24)
        {
          v38 = (unint64_t *)&v24->__shared_owners_;
          do
            v28 = __ldaxr(v38);
          while (__stlxr(v28 - 1, v38));
LABEL_45:
          if (!v28)
          {
            ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
            std::__shared_weak_count::__release_weak(v24);
          }
        }
      }
    }
  }
  v39 = *(_QWORD **)(a1 + 40);
  v40 = *(std::__shared_weak_count **)(a1 + 48);
  v159 = v39;
  v160 = v40;
  if (v40)
  {
    v41 = (unint64_t *)&v40->__shared_owners_;
    do
      v42 = __ldxr(v41);
    while (__stxr(v42 + 1, v41));
  }
  md::PolylineOverlayStyle::setStyleConstants(v39, a3, (__int32 *)(a3 + 8), 1.0, v8);
  if (!v40)
    goto LABEL_54;
  v43 = (unint64_t *)&v40->__shared_owners_;
  do
    v44 = __ldaxr(v43);
  while (__stlxr(v44 - 1, v43));
  if (!v44)
  {
    ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
    std::__shared_weak_count::__release_weak(v40);
    if (!v9)
      return;
  }
  else
  {
LABEL_54:
    if (!v9)
      return;
  }
  v153 = xmmword_19FFB3980;
  v154 = xmmword_19FFB3B40;
  v155 = 256;
  v157 = 0x3F800000BF800000;
  *(_BYTE *)a1 = 1;
  HIDWORD(v154) = 1065353216;
  v158 = 0;
  v45 = *(_QWORD *)(a2 + 144);
  v46 = *(std::__shared_weak_count **)(a2 + 152);
  v171[0] = v45;
  v171[1] = (unint64_t)v46;
  if (v46)
  {
    v47 = (unint64_t *)&v46->__shared_owners_;
    do
      v48 = __ldxr(v47);
    while (__stxr(v48 + 1, v47));
    *((_QWORD *)&v172 + 1) = v46;
    do
      v49 = __ldxr(v47);
    while (__stxr(v49 + 1, v47));
  }
  else
  {
    *((_QWORD *)&v172 + 1) = 0;
  }
  v173[0] = 0;
  v173[1] = 0;
  *(_QWORD *)&v172 = v45;
  v174 = 0;
  if (v45)
    LODWORD(v45) = (*(uint64_t (**)(unint64_t, _QWORD *))(*(_QWORD *)v45 + 48))(v45, v173);
  v174 = v45;
  if (v46)
  {
    v50 = (unint64_t *)&v46->__shared_owners_;
    do
      v51 = __ldaxr(v50);
    while (__stlxr(v51 - 1, v50));
    if (!v51)
    {
      ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
      std::__shared_weak_count::__release_weak(v46);
    }
    LODWORD(v45) = v174;
  }
  if (!(_DWORD)v45)
  {
    v55 = 0.0;
    LOBYTE(v56) = 1;
    v57 = 0.0;
    v58 = 0.0;
    v59 = 0.0;
    goto LABEL_149;
  }
  v52 = *(_QWORD **)(*(_QWORD *)a2 + 8);
  v53 = v52[1];
  if ((v53 & (v53 - 1)) != 0)
  {
    v60 = 0x1AF456233693CD46;
    if (v53 <= 0x1AF456233693CD46)
      v60 = 0x1AF456233693CD46 % v53;
    v54 = *(_QWORD **)(*v52 + 8 * v60);
    do
    {
      do
        v54 = (_QWORD *)*v54;
      while (v54[1] != 0x1AF456233693CD46);
    }
    while (v54[2] != 0x1AF456233693CD46);
  }
  else
  {
    v54 = *(_QWORD **)(*v52 + 8 * ((v53 - 1) & 0x1AF456233693CD46));
    do
    {
      do
        v54 = (_QWORD *)*v54;
      while (v54[1] != 0x1AF456233693CD46);
    }
    while (v54[2] != 0x1AF456233693CD46);
  }
  v61 = *(_QWORD *)(v54[5] + 32);
  v62 = fmaxf(*(float *)(v61 + 3080) + *(float *)(v61 + 3076), 1.0);
  v63 = *(_QWORD *)(v172 + 24);
  v64 = fminf(fmaxf(v62, 0.0), 23.0);
  v65 = *(float **)v63;
  if (*(_QWORD *)v63
    && (v66 = *v65, LODWORD(v65) = *v65 == 1.0, *(_BYTE *)(v63 + 10))
    && (v66 != 0.0 ? (v67 = v66 == 1.0) : (v67 = 1), !v67)
    || (v68 = *(unsigned __int8 *)(v63 + v65 + 11), v66 = 0.0, v68 == 2))
  {
    LOBYTE(v171[0]) = 1;
    v175 = 1;
    gss::RenderStyle<gss::PropertyID>::styleSampledValueForKeyAtZ<float>(v63, 0x194u, 0, (BOOL *)v171, v64);
    v70 = v69;
    gss::RenderStyle<gss::PropertyID>::styleSampledValueForKeyAtZ<float>(v63, 0x194u, 1u, (BOOL *)&v175, v64);
    v72 = v70 + (float)((float)(v71 - v70) * v66);
  }
  else
  {
    gss::RenderStyle<gss::PropertyID>::styleSampledValueForKeyAtZ<float>(*(_QWORD *)(v172 + 24), 0x194u, v68, 0, v64);
  }
  *(float *)&v153 = v72;
  v73 = *(_QWORD *)(v172 + 24);
  if ((int)v62 >= 0x17)
    v74 = 23;
  else
    v74 = (int)v62;
  v75 = *(float **)v73;
  if (*(_QWORD *)v73
    && (v76 = *v75, LODWORD(v75) = *v75 == 1.0, *(_BYTE *)(v73 + 10))
    && (v76 != 0.0 ? (v77 = v76 == 1.0) : (v77 = 1), !v77)
    || (v78 = *(unsigned __int8 *)(v73 + v75 + 11), v76 = 0.0, v78 == 2))
  {
    LOBYTE(v171[0]) = 1;
    v175 = 1;
    v79 = *(_BYTE *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<BOOL>((unsigned __int16 *)v73, 0x5Bu, v74, 0, v171);
    v80 = *(_BYTE *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<BOOL>((unsigned __int16 *)v73, 0x5Bu, v74, 1, &v175);
    if (v76 < 1.0)
      v80 = v79;
  }
  else
  {
    v80 = *(_BYTE *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<BOOL>(*(unsigned __int16 **)(v172 + 24), 0x5Bu, v74, v78, 0);
  }
  HIBYTE(v155) = v80 != 0;
  gss::RenderStyle<gss::PropertyID>::sampledValueForKeyAtZ<geo::Color<unsigned short,4,(geo::ColorSpace)0>>(v171, *(_QWORD *)(v172 + 24), 0x193u, 2u, v64);
  LOWORD(v4) = WORD1(v171[0]);
  LOWORD(v62) = v171[0];
  LOWORD(v76) = HIWORD(v171[0]);
  LOWORD(v3) = WORD2(v171[0]);
  v81 = *(_QWORD *)(v172 + 24);
  v82 = *(float **)v81;
  if (*(_QWORD *)v81
    && (v83 = *v82, LODWORD(v82) = *v82 == 1.0, *(_BYTE *)(v81 + 10))
    && (v83 != 0.0 ? (v84 = v83 == 1.0) : (v84 = 1), !v84)
    || (v85 = *(unsigned __int8 *)(v81 + v82 + 11), v83 = 0.0, v85 == 2))
  {
    LOBYTE(v171[0]) = 1;
    v175 = 1;
    v56 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(v81, 0x198u, v74, 0, v171);
    v86 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(v81, 0x198u, v74, 1u, &v175);
    if (v83 >= 1.0)
      LOBYTE(v56) = v86;
  }
  else
  {
    v56 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(*(_QWORD *)(v172 + 24), 0x198u, v74, v85, 0);
  }
  v149 = *(double *)(a2 + 184);
  v150 = *(double *)(a2 + 192);
  v147 = *(double *)(a2 + 200);
  v148 = *(double *)(a2 + 208);
  v87 = *(_QWORD *)(v61 + 5584);
  if (!v87)
    v87 = v61;
  v88 = *(_BYTE *)(a2 + 161);
  v151 = *(double *)(v87 + 3768);
  v152 = *(double *)(v87 + 1368);
  v89 = *(_DWORD *)(a2 + 168);
  v90 = *(_DWORD *)(a2 + 164);
  v91 = **(id **)a2;
  objc_msgSend(v91, "sizeInPixels");
  v145 = v93;
  v146 = v92;

  v94 = *(_QWORD *)(v172 + 24);
  v95 = *(unsigned __int8 *)(v94 + 12);
  v96 = v95;
  if (v95 != 2)
  {
LABEL_125:
    v97 = 0.0;
    if (!gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtEnd(v94, 0x1D7u, v96))
      goto LABEL_134;
    goto LABEL_126;
  }
  if ((gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtEnd(*(_QWORD *)(v172 + 24), 0x1D7u, 0) & 1) == 0)
  {
    v96 = 1;
    goto LABEL_125;
  }
LABEL_126:
  v98 = *(float **)v94;
  if (*(_QWORD *)v94 && (v99 = *v98, LODWORD(v98) = *v98 == 1.0, *(_BYTE *)(v94 + 10)) && v99 != 0.0 && v99 != 1.0
    || (v100 = *(unsigned __int8 *)(v94 + v98 + 11), v99 = 0.0, v100 == 2))
  {
    LOBYTE(v171[0]) = 1;
    v175 = 1;
    v101 = (float *)gss::RenderStyle<gss::PropertyID>::styleValueForKey<float>(v94, 0x1D7u, 0, v171);
    v102 = *v101
         + (float)((float)(*(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKey<float>(v94, 0x1D7u, 1u, &v175)
                         - *v101)
                 * v99);
  }
  else
  {
    v102 = *(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKey<float>(v94, 0x1D7u, v100, 0);
  }
  v97 = v102;
  v94 = *(_QWORD *)(v172 + 24);
  v95 = *(unsigned __int8 *)(v94 + 12);
LABEL_134:
  if (v95 != 2)
    goto LABEL_137;
  if ((gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtEnd(v94, 0x1D8u, 0) & 1) == 0)
  {
    v95 = 1;
LABEL_137:
    hasValueForKeyAtEnd = gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtEnd(v94, 0x1D8u, v95);
    v104 = 0.0;
    if (!hasValueForKeyAtEnd)
      goto LABEL_146;
  }
  v105 = *(float **)v94;
  if (*(_QWORD *)v94
    && (v106 = *v105, LODWORD(v105) = *v105 == 1.0, *(_BYTE *)(v94 + 10))
    && v106 != 0.0
    && v106 != 1.0
    || (v107 = *(unsigned __int8 *)(v94 + v105 + 11), v106 = 0.0, v107 == 2))
  {
    LOBYTE(v171[0]) = 1;
    v175 = 1;
    v108 = (float *)gss::RenderStyle<gss::PropertyID>::styleValueForKey<float>(v94, 0x1D8u, 0, v171);
    v109 = *v108
         + (float)((float)(*(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKey<float>(v94, 0x1D8u, 1u, &v175)
                         - *v108)
                 * v106);
  }
  else
  {
    v109 = *(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKey<float>(v94, 0x1D8u, v107, 0);
  }
  v104 = v109;
LABEL_146:
  v110 = (float)v4;
  v59 = (float)LODWORD(v62) * 0.000015259;
  v111 = (double)(1 << v88);
  v112 = 1.0 / v111 * (double)v89;
  v113 = 1.0 / v111 * (double)((1 << v88) + ~v90);
  v114 = (v147 - v112) * v111;
  v115 = (v148 - v113) * v111;
  *(float *)&v112 = (v112 - v149) * v111;
  *(float *)&v113 = (v113 - v150) * v111;
  v116 = fmin(fmax(log2(v152* fmax(v114 + *(float *)&v112, v115 + *(float *)&v113)/ (v151* v111* fmin(v145, v146)* fmax(v97, 0.000000001)))/ fmax(v104, 0.000000001), 0.0), 1.0);
  v55 = (float)((float)LODWORD(v76) * 0.000015259) * v116;
  if (v55 == 0.0)
    HIBYTE(v155) = 0;
  v58 = v110 * 0.000015259;
  v57 = (float)v3 * 0.000015259;
  if (v59 >= 0.0031308)
  {
    v117 = (float)(powf(v59, 0.41667) * 1.055) + -0.055;
    goto LABEL_151;
  }
LABEL_149:
  v117 = v59 * 12.92;
LABEL_151:
  if (v58 >= 0.0031308)
    v118 = (float)(powf(v58, 0.41667) * 1.055) + -0.055;
  else
    v118 = v58 * 12.92;
  if (v57 >= 0.0031308)
    v119 = (float)(powf(v57, 0.41667) * 1.055) + -0.055;
  else
    v119 = v57 * 12.92;
  *((_QWORD *)&v153 + 1) = __PAIR64__(LODWORD(v118), LODWORD(v117));
  *(_QWORD *)&v154 = __PAIR64__(LODWORD(v55), LODWORD(v119));
  v120 = *(float *)(a2 + 72) * *(float *)&v153;
  if (v56 == 2)
  {
    v122 = 0.5;
    v121 = 0.5;
  }
  else if (v56 == 1)
  {
    v121 = 1.0;
    v122 = 0.0;
  }
  else
  {
    v121 = 0.0;
    v122 = 1.0;
  }
  v123 = *(_QWORD *)(a1 + 152);
  *(float *)&v157 = -(float)(v120 * v121);
  *((float *)&v157 + 1) = v122 * v120;
  v124 = 1;
  if (*((float *)&v154 + 3) >= 1.0 && !v158)
  {
    if (*(_QWORD *)(a1 + 176) == *(_QWORD *)(a1 + 168))
      v124 = *(float *)(a1 + 148) < 1.0;
    else
      v124 = *(_BYTE *)(a1 + 192) != 0;
  }
  v125 = 0;
  LOBYTE(v155) = v124;
  v156 = v123;
  *((float *)&v153 + 1) = v120;
  if (HIBYTE(v155) && *((float *)&v154 + 3) > 0.0)
    v125 = v55 > 0.0 || *(_QWORD *)(a1 + 176) != *(_QWORD *)(a1 + 168);
  *(_BYTE *)a1 = v125;
  gss::QueryableLocker<gss::PropertyID>::~QueryableLocker((uint64_t)&v172);
  if (v124)
  {
    if (*(_BYTE *)(a1 + 193))
    {
      v126 = *(_QWORD **)(a1 + 56);
      v127 = *(std::__shared_weak_count **)(a1 + 64);
      if (v127)
      {
        v128 = (unint64_t *)&v127->__shared_owners_;
        do
          v129 = __ldxr(v128);
        while (__stxr(v129 + 1, v128));
      }
      v172 = xmmword_19FFB34C0;
      md::PolylineOverlayStyle::setStyleConstants(v126, (uint64_t)&v153, (__int32 *)&v172, 1.0, v8);
      if (v127)
      {
        v130 = (unint64_t *)&v127->__shared_owners_;
        do
          v131 = __ldaxr(v130);
        while (__stlxr(v131 - 1, v130));
        if (!v131)
        {
          ((void (*)(std::__shared_weak_count *))v127->__on_zero_shared)(v127);
          std::__shared_weak_count::__release_weak(v127);
        }
      }
    }
    v132 = *(_QWORD **)(a1 + 72);
    v133 = *(std::__shared_weak_count **)(a1 + 80);
    if (v133)
    {
      v134 = (unint64_t *)&v133->__shared_owners_;
      do
        v135 = __ldxr(v134);
      while (__stxr(v135 + 1, v134));
    }
    *(_QWORD *)((char *)&v172 + 4) = 0;
    LODWORD(v172) = 0;
    HIDWORD(v172) = DWORD1(v154);
    md::PolylineOverlayStyle::setStyleConstants(v132, (uint64_t)&v153, (__int32 *)&v172, 1.0, v8);
    if (v133)
    {
      v136 = (unint64_t *)&v133->__shared_owners_;
      do
        v137 = __ldaxr(v136);
      while (__stlxr(v137 - 1, v136));
      if (!v137)
      {
        ((void (*)(std::__shared_weak_count *))v133->__on_zero_shared)(v133);
        std::__shared_weak_count::__release_weak(v133);
      }
    }
    v138 = 0;
    *(_BYTE *)(a1 + 124) = *(_BYTE *)(a1 + 193);
    *(_WORD *)(a1 + 125) = 257;
  }
  else
  {
    v138 = 1;
  }
  *(_BYTE *)(a1 + 127) = v138;
  v139 = *(_QWORD **)(a1 + 88);
  v140 = *(std::__shared_weak_count **)(a1 + 96);
  if (v140)
  {
    v141 = (unint64_t *)&v140->__shared_owners_;
    do
      v142 = __ldxr(v141);
    while (__stxr(v142 + 1, v141));
  }
  md::PolylineOverlayStyle::setStyleConstants(v139, (uint64_t)&v153, (__int32 *)&v153 + 2, 1.0, v8);
  if (v140)
  {
    v143 = (unint64_t *)&v140->__shared_owners_;
    do
      v144 = __ldaxr(v143);
    while (__stlxr(v144 - 1, v143));
    if (!v144)
    {
      ((void (*)(std::__shared_weak_count *))v140->__on_zero_shared)(v140);
      std::__shared_weak_count::__release_weak(v140);
    }
  }
}

