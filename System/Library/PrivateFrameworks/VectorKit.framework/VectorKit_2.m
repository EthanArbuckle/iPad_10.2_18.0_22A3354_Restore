void sub_19F0C4814(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  _QWORD *v26;
  uint64_t v27;
  _QWORD *v29;
  uint64_t v30;

  v29 = *(_QWORD **)(v27 - 104);
  if (v29 == v26)
  {
    v30 = 4;
    v29 = (_QWORD *)(v27 - 128);
  }
  else
  {
    if (!v29)
      goto LABEL_6;
    v30 = 5;
  }
  (*(void (**)(void))(*v29 + 8 * v30))();
LABEL_6:
  std::unordered_set<md::MuninJunction const*>::~unordered_set[abi:nn180100]((uint64_t)&a26);
  geo::ScopedFunctions::~ScopedFunctions((geo::ScopedFunctions *)(v27 - 160));
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<md::components::PendingMaterial>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  uint64_t v16;

  v16 = 0x251D10CE20A5B012;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0x251D10CE20A5B012;
      if (*(_QWORD *)&v3 <= 0x251D10CE20A5B012uLL)
        v5 = 0x251D10CE20A5B012uLL % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0x251D10CE20A5B012;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0x251D10CE20A5B012)
            {
              if (v7[2] == 0x251D10CE20A5B012)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0x251D10CE20A5B012)
          {
            if (v7[2] == 0x251D10CE20A5B012)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "md::components::PendingMaterial]";
  *(_QWORD *)(v11 + 24) = 31;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E42B3018;
  *(_QWORD *)(v11 + 8) = 0x251D10CE20A5B012;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0x251D10CE20A5B012uLL, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0x251D10CE20A5B012;
  v15[1] = "md::components::PendingMaterial]";
  v15[2] = 31;
  gdc::Registry::_registerStorageDataSignals(a1, 0x251D10CE20A5B012, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F0C4CD8(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void gms::MaterialManager<ggl::Texture2D>::materialForKeyAndAttributes(_QWORD *a1, int8x8_t *a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v4;
  int8x8_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint8x8_t v13;
  void **v14;
  unsigned __int8 *v15;
  unint64_t v17;
  uint64_t v19;
  _QWORD *v20;
  float v21;
  float v22;
  _BOOL8 v23;
  unint64_t v24;
  unint64_t v25;
  size_t prime;
  void *v27;
  void *v28;
  uint64_t v29;
  _QWORD *v30;
  size_t v31;
  size_t v32;
  size_t v33;
  _QWORD *i;
  size_t v35;
  uint64_t v36;
  unint64_t v37;
  uint8x8_t v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  size_t v42;
  uint64_t v43;
  _QWORD *v44;
  unint64_t v45;
  _QWORD *v46;
  int8x8_t v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  uint8x8_t v51;
  uint64_t v52;
  uint64_t **v53;
  uint64_t *v54;
  uint64_t v55;
  unint64_t v57;
  uint64_t v59;
  void *v60;
  uint64_t v61;
  unint64_t *v62;
  unint64_t v63;
  char *v64;
  unint64_t v65;
  int8x8_t v66;
  geo::read_write_lock *v67;
  const char *v68;
  geo::read_write_lock *v69;
  const char *v70;
  gss::Allocator *v71;
  unsigned __int8 *v72;
  std::__shared_weak_count *v73;
  std::__shared_weak_count *v74;
  unint64_t *p_shared_owners;
  unint64_t v76;
  std::__shared_weak_count *v77;
  unint64_t *v78;
  unint64_t v79;
  BOOL v80;
  uint64_t v81;
  std::__shared_weak_count *v82;
  unint64_t *v83;
  unint64_t v84;
  char *v85;
  unint64_t v86;
  int8x8_t v87;
  geo::read_write_lock *v88;
  const char *v89;
  geo::read_write_lock *v90;
  const char *v91;
  gss::Allocator *v92;
  unsigned __int8 *v93;
  std::__shared_weak_count *v94;
  std::__shared_weak_count *v95;
  unint64_t *v96;
  unint64_t v97;
  std::__shared_weak_count *v98;
  unint64_t *v99;
  unint64_t v100;
  BOOL v101;
  uint64_t v102;
  std::__shared_weak_count *v103;
  uint64_t v104;
  unint64_t *v105;
  unint64_t v106;
  std::__shared_weak_count *v107;
  unint64_t *v108;
  unint64_t v109;
  unint64_t *v110;
  unint64_t v111;
  unint64_t *v112;
  unint64_t v113;
  unint64_t *v114;
  unint64_t v115;
  unint64_t *v116;
  unint64_t v117;
  unint64_t *v118;
  unint64_t v119;
  int v120;
  std::__shared_weak_count *v121;
  unint64_t *v122;
  unint64_t v123;
  unint64_t *v124;
  unint64_t v125;
  unint64_t *v126;
  unint64_t v127;
  unint64_t *v128;
  unint64_t v129;
  unint64_t *v130;
  unint64_t v131;
  uint64_t v132;
  unint64_t *v133;
  unint64_t v134;
  std::__shared_weak_count *v136;
  uint64_t v137;
  std::__shared_weak_count *v138;
  uint64_t v139;
  std::__shared_weak_count *v140;
  unsigned __int8 *v141;
  std::__shared_weak_count *v142;
  char v143;
  uint64_t v144;
  _BYTE v145[15];
  char v146;

  v8 = a2[48];
  v9 = *a3;
  v10 = a3[1];
  v11 = ((v10 << 6)
       + (v10 >> 2)
       - 0x61C8864680B583EBLL
       + ((((unint64_t)*a3 >> 34) + *a3 + (HIDWORD(*a3) << 6) - 0x61C8864680B583EBLL) ^ HIDWORD(*a3))) ^ v10;
  v12 = *(_QWORD *)(*(_QWORD *)&v8 + 8);
  if (v12)
  {
    v13 = (uint8x8_t)vcnt_s8((int8x8_t)v12);
    v13.i16[0] = vaddlv_u8(v13);
    if (v13.u32[0] > 1uLL)
    {
      v4 = ((v10 << 6)
          + (v10 >> 2)
          - 0x61C8864680B583EBLL
          + ((((unint64_t)*a3 >> 34) + *a3 + (HIDWORD(*a3) << 6) - 0x61C8864680B583EBLL) ^ HIDWORD(*a3))) ^ v10;
      if (v11 >= v12)
        v4 = v11 % v12;
    }
    else
    {
      v4 = v11 & (v12 - 1);
    }
    v14 = *(void ***)(**(_QWORD **)&v8 + 8 * v4);
    if (v14)
    {
      v15 = (unsigned __int8 *)*v14;
      if (*v14)
      {
        if (v13.u32[0] < 2uLL)
        {
          while (1)
          {
            v19 = *((_QWORD *)v15 + 1);
            if (v19 == v11)
            {
              if (*((_QWORD *)v15 + 2) == v9 && *((_QWORD *)v15 + 3) == v10)
                goto LABEL_88;
            }
            else if ((v19 & (v12 - 1)) != v4)
            {
              goto LABEL_28;
            }
            v15 = *(unsigned __int8 **)v15;
            if (!v15)
              goto LABEL_28;
          }
        }
        do
        {
          v17 = *((_QWORD *)v15 + 1);
          if (v17 == v11)
          {
            if (*((_QWORD *)v15 + 2) == v9 && *((_QWORD *)v15 + 3) == v10)
              goto LABEL_88;
          }
          else
          {
            if (v17 >= v12)
              v17 %= v12;
            if (v17 != v4)
              break;
          }
          v15 = *(unsigned __int8 **)v15;
        }
        while (v15);
      }
    }
  }
LABEL_28:
  v20 = (_QWORD *)(*(_QWORD *)&v8 + 16);
  v15 = (unsigned __int8 *)operator new(0x38uLL);
  v141 = v15;
  v142 = (std::__shared_weak_count *)(*(_QWORD *)&v8 + 16);
  *(_QWORD *)v15 = 0;
  *((_QWORD *)v15 + 1) = v11;
  *((_OWORD *)v15 + 1) = *(_OWORD *)a3;
  v15[32] = 0;
  v15[48] = 0;
  v143 = 1;
  v21 = (float)(unint64_t)(*(_QWORD *)(*(_QWORD *)&v8 + 24) + 1);
  v22 = *(float *)(*(_QWORD *)&v8 + 32);
  if (!v12 || (float)(v22 * (float)v12) < v21)
  {
    v23 = 1;
    if (v12 >= 3)
      v23 = (v12 & (v12 - 1)) != 0;
    v24 = v23 | (2 * v12);
    v25 = vcvtps_u32_f32(v21 / v22);
    if (v24 <= v25)
      prime = v25;
    else
      prime = v24;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v12 = *(_QWORD *)(*(_QWORD *)&v8 + 8);
    }
    if (prime <= v12)
    {
      if (prime >= v12)
        goto LABEL_65;
      v37 = vcvtps_u32_f32((float)*(unint64_t *)(*(_QWORD *)&v8 + 24) / *(float *)(*(_QWORD *)&v8 + 32));
      if (v12 < 3 || (v38 = (uint8x8_t)vcnt_s8((int8x8_t)v12), v38.i16[0] = vaddlv_u8(v38), v38.u32[0] > 1uLL))
      {
        v37 = std::__next_prime(v37);
      }
      else
      {
        v39 = 1 << -(char)__clz(v37 - 1);
        if (v37 >= 2)
          v37 = v39;
      }
      if (prime <= v37)
        prime = v37;
      if (prime >= v12)
      {
        v12 = *(_QWORD *)(*(_QWORD *)&v8 + 8);
LABEL_65:
        if ((v12 & (v12 - 1)) != 0)
        {
          if (v11 >= v12)
            v4 = v11 % v12;
          else
            v4 = v11;
        }
        else
        {
          v4 = (v12 - 1) & v11;
        }
        goto LABEL_78;
      }
      if (!prime)
      {
        v60 = **(void ***)&v8;
        **(_QWORD **)&v8 = 0;
        if (v60)
          operator delete(v60);
        v12 = 0;
        *(_QWORD *)(*(_QWORD *)&v8 + 8) = 0;
        goto LABEL_65;
      }
    }
    if (prime >> 61)
      goto LABEL_241;
    v27 = operator new(8 * prime);
    v28 = **(void ***)&v8;
    **(_QWORD **)&v8 = v27;
    if (v28)
      operator delete(v28);
    v29 = 0;
    *(_QWORD *)(*(_QWORD *)&v8 + 8) = prime;
    do
      *(_QWORD *)(**(_QWORD **)&v8 + 8 * v29++) = 0;
    while (prime != v29);
    v30 = (_QWORD *)*v20;
    if (!*v20)
    {
LABEL_64:
      v12 = prime;
      goto LABEL_65;
    }
    v31 = v30[1];
    v32 = prime - 1;
    if ((prime & (prime - 1)) == 0)
    {
      v33 = v31 & v32;
      *(_QWORD *)(**(_QWORD **)&v8 + 8 * v33) = v20;
      for (i = (_QWORD *)*v30; *v30; i = (_QWORD *)*v30)
      {
        v35 = i[1] & v32;
        if (v35 == v33)
        {
          v30 = i;
        }
        else if (*(_QWORD *)(**(_QWORD **)&v8 + 8 * v35))
        {
          *v30 = *i;
          v36 = 8 * v35;
          *i = **(_QWORD **)(**(_QWORD **)&v8 + v36);
          **(_QWORD **)(**(_QWORD **)&v8 + v36) = i;
        }
        else
        {
          *(_QWORD *)(**(_QWORD **)&v8 + 8 * v35) = v30;
          v30 = i;
          v33 = v35;
        }
      }
      goto LABEL_64;
    }
    if (v31 >= prime)
      v31 %= prime;
    *(_QWORD *)(**(_QWORD **)&v8 + 8 * v31) = v20;
    v40 = (_QWORD *)*v30;
    if (!*v30)
      goto LABEL_64;
    while (1)
    {
      v42 = v40[1];
      if (v42 >= prime)
        v42 %= prime;
      if (v42 != v31)
      {
        if (!*(_QWORD *)(**(_QWORD **)&v8 + 8 * v42))
        {
          *(_QWORD *)(**(_QWORD **)&v8 + 8 * v42) = v30;
          goto LABEL_69;
        }
        *v30 = *v40;
        v41 = 8 * v42;
        *v40 = **(_QWORD **)(**(_QWORD **)&v8 + v41);
        **(_QWORD **)(**(_QWORD **)&v8 + v41) = v40;
        v40 = v30;
      }
      v42 = v31;
LABEL_69:
      v30 = v40;
      v40 = (_QWORD *)*v40;
      v31 = v42;
      if (!v40)
        goto LABEL_64;
    }
  }
LABEL_78:
  v43 = **(_QWORD **)&v8;
  v44 = *(_QWORD **)(**(_QWORD **)&v8 + 8 * v4);
  if (v44)
  {
    *(_QWORD *)v15 = *v44;
  }
  else
  {
    *(_QWORD *)v15 = *v20;
    *v20 = v15;
    *(_QWORD *)(v43 + 8 * v4) = v20;
    if (!*(_QWORD *)v15)
      goto LABEL_87;
    v45 = *(_QWORD *)(*(_QWORD *)v15 + 8);
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v45 >= v12)
        v45 %= v12;
    }
    else
    {
      v45 &= v12 - 1;
    }
    v44 = (_QWORD *)(**(_QWORD **)&v8 + 8 * v45);
  }
  *v44 = v15;
LABEL_87:
  ++*(_QWORD *)(*(_QWORD *)&v8 + 24);
LABEL_88:
  if (v15[48])
    goto LABEL_236;
  v46 = (_QWORD *)a2[47];
  v47 = (int8x8_t)v46[1];
  if (!*(_QWORD *)&v47)
    goto LABEL_130;
  v48 = *a3;
  v49 = a3[1];
  v50 = ((v49 << 6)
       - 0x61C8864680B583EBLL
       + (v49 >> 2)
       + ((*a3 - 0x61C8864680B583EBLL + ((unint64_t)*a3 >> 34) + (HIDWORD(*a3) << 6)) ^ HIDWORD(*a3))) ^ v49;
  v51 = (uint8x8_t)vcnt_s8(v47);
  v51.i16[0] = vaddlv_u8(v51);
  if (v51.u32[0] > 1uLL)
  {
    v52 = ((v49 << 6)
         - 0x61C8864680B583EBLL
         + (v49 >> 2)
         + ((*a3 - 0x61C8864680B583EBLL + ((unint64_t)*a3 >> 34) + (HIDWORD(*a3) << 6)) ^ HIDWORD(*a3))) ^ v49;
    if (v50 >= *(_QWORD *)&v47)
      v52 = v50 % *(_QWORD *)&v47;
  }
  else
  {
    v52 = v50 & (*(_QWORD *)&v47 - 1);
  }
  v53 = *(uint64_t ***)(*v46 + 8 * v52);
  if (!v53)
    goto LABEL_130;
  v54 = *v53;
  if (!v54)
    goto LABEL_130;
  if (v51.u32[0] < 2uLL)
  {
    v55 = *(_QWORD *)&v47 - 1;
    while (1)
    {
      v59 = v54[1];
      if (v59 == v50)
      {
        if (v54[2] == v48 && v54[3] == v49)
          goto LABEL_125;
      }
      else if ((v59 & v55) != v52)
      {
        goto LABEL_130;
      }
      v54 = (uint64_t *)*v54;
      if (!v54)
        goto LABEL_130;
    }
  }
  while (1)
  {
    v57 = v54[1];
    if (v57 == v50)
      break;
    if (v57 >= *(_QWORD *)&v47)
      v57 %= *(_QWORD *)&v47;
    if (v57 != v52)
      goto LABEL_130;
LABEL_102:
    v54 = (uint64_t *)*v54;
    if (!v54)
      goto LABEL_130;
  }
  if (v54[2] != v48 || v54[3] != v49)
    goto LABEL_102;
LABEL_125:
  if (!*((_BYTE *)v54 + 48))
  {
LABEL_130:
    v64 = geo::FrameCache<gms::MaterialManager<ggl::Texture2D>::MaterialCacheKey,std::shared_ptr<gms::_Material<ggl::Texture2D>>,gms::MaterialManager<ggl::Texture2D>::MaterialCacheKeyHash,gms::MaterialManager<ggl::Texture2D>::MaterialCacheKeyEqual>::operator[]((uint64_t)&a2[13], a3);
    if (v64[16])
      goto LABEL_153;
    v65 = *a3;
    v66 = a2[11];
    v67 = (geo::read_write_lock *)pthread_rwlock_rdlock((pthread_rwlock_t *)(*(_QWORD *)&v66 + 16));
    if ((_DWORD)v67)
      geo::read_write_lock::logFailure(v67, (uint64_t)"read lock", v68);
    memset(v145, 0, sizeof(v145));
    v146 = 1;
    geo::intern_linear_map<gss::StyleAttribute,unsigned short,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::copy(v145, *(_QWORD *)&v66 + 216);
    v69 = (geo::read_write_lock *)pthread_rwlock_unlock((pthread_rwlock_t *)(*(_QWORD *)&v66 + 16));
    if ((_DWORD)v69)
      geo::read_write_lock::logFailure(v69, (uint64_t)"unlock", v70);
    gms::MaterialManager<ggl::Texture2D>::rawMaterialForIDAndAttributes(&v141, a2, v65, a4, (uint64_t)v145);
    v72 = v141;
    if (v64[16])
    {
      v73 = v142;
      v141 = 0;
      v142 = 0;
      v74 = (std::__shared_weak_count *)*((_QWORD *)v64 + 1);
      *(_QWORD *)v64 = v72;
      *((_QWORD *)v64 + 1) = v73;
      if (v74)
      {
        p_shared_owners = (unint64_t *)&v74->__shared_owners_;
        do
          v76 = __ldaxr(p_shared_owners);
        while (__stlxr(v76 - 1, p_shared_owners));
        if (!v76)
        {
          ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
          std::__shared_weak_count::__release_weak(v74);
        }
      }
    }
    else
    {
      *(_QWORD *)v64 = v141;
      *((_QWORD *)v64 + 1) = v142;
      v141 = 0;
      v142 = 0;
      v64[16] = 1;
    }
    v77 = v142;
    if (v142)
    {
      v78 = (unint64_t *)&v142->__shared_owners_;
      do
        v79 = __ldaxr(v78);
      while (__stlxr(v79 - 1, v78));
      if (!v79)
      {
        ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
        std::__shared_weak_count::__release_weak(v77);
      }
    }
    if (v145[14])
      v80 = 1;
    else
      v80 = *(_QWORD *)v145 == 0;
    if (!v80)
    {
      v81 = gss::Allocator::instance(v71);
      (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v81 + 40))(v81, *(_QWORD *)v145, *(unsigned __int16 *)&v145[12]);
    }
    if (v64[16])
    {
LABEL_153:
      v82 = (std::__shared_weak_count *)*((_QWORD *)v64 + 1);
      v139 = *(_QWORD *)v64;
      v140 = v82;
      if (v82)
      {
        v83 = (unint64_t *)&v82->__shared_owners_;
        do
          v84 = __ldxr(v83);
        while (__stxr(v84 + 1, v83));
      }
      v85 = geo::FrameCache<gms::MaterialManager<ggl::Texture2D>::MaterialCacheKey,std::shared_ptr<gms::_Material<ggl::Texture2D>>,gms::MaterialManager<ggl::Texture2D>::MaterialCacheKeyHash,gms::MaterialManager<ggl::Texture2D>::MaterialCacheKeyEqual>::operator[]((uint64_t)&a2[25], a3);
      if (!v85[16])
      {
        v86 = *a3;
        v87 = a2[11];
        v144 = *(_QWORD *)&v87 + 16;
        v88 = (geo::read_write_lock *)pthread_rwlock_rdlock((pthread_rwlock_t *)(*(_QWORD *)&v87 + 16));
        if ((_DWORD)v88)
          geo::read_write_lock::logFailure(v88, (uint64_t)"read lock", v89);
        memset(v145, 0, sizeof(v145));
        v146 = 1;
        geo::intern_linear_map<gss::StyleAttribute,unsigned short,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::copy(v145, *(_QWORD *)&v87 + 232);
        v90 = (geo::read_write_lock *)pthread_rwlock_unlock((pthread_rwlock_t *)(*(_QWORD *)&v87 + 16));
        if ((_DWORD)v90)
          geo::read_write_lock::logFailure(v90, (uint64_t)"unlock", v91);
        gms::MaterialManager<ggl::Texture2D>::rawMaterialForIDAndAttributes(&v141, a2, v86, a4, (uint64_t)v145);
        v93 = v141;
        if (v85[16])
        {
          v94 = v142;
          v141 = 0;
          v142 = 0;
          v95 = (std::__shared_weak_count *)*((_QWORD *)v85 + 1);
          *(_QWORD *)v85 = v93;
          *((_QWORD *)v85 + 1) = v94;
          if (v95)
          {
            v96 = (unint64_t *)&v95->__shared_owners_;
            do
              v97 = __ldaxr(v96);
            while (__stlxr(v97 - 1, v96));
            if (!v97)
            {
              ((void (*)(std::__shared_weak_count *))v95->__on_zero_shared)(v95);
              std::__shared_weak_count::__release_weak(v95);
            }
          }
        }
        else
        {
          *(_QWORD *)v85 = v141;
          *((_QWORD *)v85 + 1) = v142;
          v141 = 0;
          v142 = 0;
          v85[16] = 1;
        }
        v98 = v142;
        if (v142)
        {
          v99 = (unint64_t *)&v142->__shared_owners_;
          do
            v100 = __ldaxr(v99);
          while (__stlxr(v100 - 1, v99));
          if (!v100)
          {
            ((void (*)(std::__shared_weak_count *))v98->__on_zero_shared)(v98);
            std::__shared_weak_count::__release_weak(v98);
          }
        }
        if (v145[14])
          v101 = 1;
        else
          v101 = *(_QWORD *)v145 == 0;
        if (!v101)
        {
          v102 = gss::Allocator::instance(v92);
          (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v102 + 40))(v102, *(_QWORD *)v145, *(unsigned __int16 *)&v145[12]);
        }
        if (!v85[16])
        {
          std::__throw_bad_optional_access[abi:nn180100]();
          __break(1u);
          return;
        }
      }
      v104 = *(_QWORD *)v85;
      v103 = (std::__shared_weak_count *)*((_QWORD *)v85 + 1);
      v138 = v103;
      if (v103)
      {
        v105 = (unint64_t *)&v103->__shared_owners_;
        do
          v106 = __ldxr(v105);
        while (__stxr(v106 + 1, v105));
      }
      v107 = v140;
      v137 = v139;
      if (v140)
      {
        v108 = (unint64_t *)&v140->__shared_owners_;
        do
          v109 = __ldxr(v108);
        while (__stxr(v109 + 1, v108));
      }
      v136 = v103;
      if (v103)
      {
        v110 = (unint64_t *)&v103->__shared_owners_;
        do
          v111 = __ldxr(v110);
        while (__stxr(v111 + 1, v110));
      }
      if (v139)
      {
        if (!v104)
        {
          if (v140)
          {
            v112 = (unint64_t *)&v140->__shared_owners_;
            do
              v113 = __ldxr(v112);
            while (__stxr(v113 + 1, v112));
          }
          if (v103)
          {
            v114 = (unint64_t *)&v103->__shared_owners_;
            do
              v115 = __ldaxr(v114);
            while (__stlxr(v115 - 1, v114));
            v107 = v103;
            if (!v115)
            {
LABEL_206:
              ((void (*)(std::__shared_weak_count *))v107->__on_zero_shared)(v107);
              std::__shared_weak_count::__release_weak(v107);
            }
          }
        }
LABEL_207:
        __asm { BR              X10 }
      }
      if (v104)
      {
        if (v103)
        {
          v116 = (unint64_t *)&v103->__shared_owners_;
          do
            v117 = __ldxr(v116);
          while (__stxr(v117 + 1, v116));
        }
        v137 = v104;
        if (v140)
        {
          v118 = (unint64_t *)&v140->__shared_owners_;
          do
            v119 = __ldaxr(v118);
          while (__stlxr(v119 - 1, v118));
          if (!v119)
            goto LABEL_206;
        }
        goto LABEL_207;
      }
      v120 = v15[48];
      *((_QWORD *)v15 + 4) = 0;
      if (v120)
      {
        v121 = (std::__shared_weak_count *)*((_QWORD *)v15 + 5);
        *((_QWORD *)v15 + 5) = 0;
        if (v121)
        {
          v122 = (unint64_t *)&v121->__shared_owners_;
          do
            v123 = __ldaxr(v122);
          while (__stlxr(v123 - 1, v122));
          if (!v123)
          {
            ((void (*)(std::__shared_weak_count *))v121->__on_zero_shared)(v121);
            std::__shared_weak_count::__release_weak(v121);
          }
        }
      }
      else
      {
        *((_QWORD *)v15 + 5) = 0;
        v15[48] = 1;
      }
      if (v136)
      {
        v124 = (unint64_t *)&v136->__shared_owners_;
        do
          v125 = __ldaxr(v124);
        while (__stlxr(v125 - 1, v124));
        if (!v125)
        {
          ((void (*)(std::__shared_weak_count *))v136->__on_zero_shared)(v136);
          std::__shared_weak_count::__release_weak(v136);
        }
      }
      if (v140)
      {
        v126 = (unint64_t *)&v140->__shared_owners_;
        do
          v127 = __ldaxr(v126);
        while (__stlxr(v127 - 1, v126));
        if (!v127)
        {
          ((void (*)(std::__shared_weak_count *))v140->__on_zero_shared)(v140);
          std::__shared_weak_count::__release_weak(v140);
        }
      }
      if (v138)
      {
        v128 = (unint64_t *)&v138->__shared_owners_;
        do
          v129 = __ldaxr(v128);
        while (__stlxr(v129 - 1, v128));
        if (!v129)
        {
          ((void (*)(std::__shared_weak_count *))v138->__on_zero_shared)(v138);
          std::__shared_weak_count::__release_weak(v138);
        }
      }
      if (v140)
      {
        v130 = (unint64_t *)&v140->__shared_owners_;
        do
          v131 = __ldaxr(v130);
        while (__stlxr(v131 - 1, v130));
        if (!v131)
        {
          ((void (*)(std::__shared_weak_count *))v140->__on_zero_shared)(v140);
          std::__shared_weak_count::__release_weak(v140);
        }
      }
      if (v15[48])
        goto LABEL_236;
    }
    std::__throw_bad_optional_access[abi:nn180100]();
LABEL_241:
    std::__throw_bad_array_new_length[abi:nn180100]();
  }
  *((_QWORD *)v15 + 4) = v54[4];
  v61 = v54[5];
  *((_QWORD *)v15 + 5) = v61;
  if (v61)
  {
    v62 = (unint64_t *)(v61 + 8);
    do
      v63 = __ldxr(v62);
    while (__stxr(v63 + 1, v62));
  }
  v15[48] = 1;
LABEL_236:
  *a1 = *((_QWORD *)v15 + 4);
  v132 = *((_QWORD *)v15 + 5);
  a1[1] = v132;
  if (v132)
  {
    v133 = (unint64_t *)(v132 + 8);
    do
      v134 = __ldxr(v133);
    while (__stxr(v134 + 1, v133));
  }
}

void sub_19F0C6548(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v3;
  uint64_t v5;
  va_list va;
  uint64_t v7;
  uint64_t v8;
  va_list va1;
  uint64_t v10;
  uint64_t v11;
  va_list va2;
  uint64_t v13;
  uint64_t v14;
  va_list va3;
  uint64_t v16;
  va_list va4;

  va_start(va4, a3);
  va_start(va3, a3);
  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v5 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v8 = va_arg(va2, _QWORD);
  v10 = va_arg(va2, _QWORD);
  va_copy(va3, va2);
  v11 = va_arg(va3, _QWORD);
  v13 = va_arg(va3, _QWORD);
  va_copy(va4, va3);
  v14 = va_arg(va4, _QWORD);
  v16 = va_arg(va4, _QWORD);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](v3 - 96);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)va4);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)va2);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)va3);
  _Unwind_Resume(a1);
}

uint64_t *gms::MaterialManager<ggl::Texture2D>::addMaterialSheet(uint64_t a1, unint64_t a2, unint64_t a3, std::__shared_weak_count *a4)
{
  uint64_t *result;
  int8x8_t v7;
  uint8x8_t v8;
  unint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t (**v21)();
  unint64_t v22;
  std::__shared_weak_count *v23;
  uint64_t (***v24)();
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  result = (uint64_t *)(a1 + 16);
  v7 = *(int8x8_t *)(a1 + 24);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8(v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v9 = a2;
      if (*(_QWORD *)&v7 <= a2)
        v9 = a2 % *(_QWORD *)&v7;
    }
    else
    {
      v9 = (*(_QWORD *)&v7 - 1) & a2;
    }
    v10 = *(_QWORD **)(*result + 8 * v9);
    if (v10)
    {
      v11 = (_QWORD *)*v10;
      if (v11)
      {
        if (v8.u32[0] < 2uLL)
        {
          v12 = *(_QWORD *)&v7 - 1;
          while (1)
          {
            v14 = v11[1];
            if (v14 == a2)
            {
              if (v11[2] == a2)
                return result;
            }
            else if ((v14 & v12) != v9)
            {
              goto LABEL_21;
            }
            v11 = (_QWORD *)*v11;
            if (!v11)
              goto LABEL_21;
          }
        }
        do
        {
          v13 = v11[1];
          if (v13 == a2)
          {
            if (v11[2] == a2)
              return result;
          }
          else
          {
            if (v13 >= *(_QWORD *)&v7)
              v13 %= *(_QWORD *)&v7;
            if (v13 != v9)
              break;
          }
          v11 = (_QWORD *)*v11;
        }
        while (v11);
      }
    }
  }
LABEL_21:
  v21 = (uint64_t (**)())a2;
  v22 = a3;
  v23 = a4;
  if (a4)
  {
    p_shared_owners = (unint64_t *)&a4->__shared_owners_;
    do
      v16 = __ldxr(p_shared_owners);
    while (__stxr(v16 + 1, p_shared_owners));
  }
  std::__hash_table<std::__hash_value_type<unsigned long long,std::shared_ptr<gms::MaterialSheet<ggl::Texture2D>>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::shared_ptr<gms::MaterialSheet<ggl::Texture2D>>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::shared_ptr<gms::MaterialSheet<ggl::Texture2D>>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::shared_ptr<gms::MaterialSheet<ggl::Texture2D>>>>>::__emplace_unique_key_args<unsigned long long,std::pair<unsigned long long const,std::shared_ptr<gms::MaterialSheet<ggl::Texture2D>>>>(result, a2, (uint64_t)&v21);
  v17 = v23;
  if (v23)
  {
    v18 = (unint64_t *)&v23->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  v21 = &off_1E42D8048;
  v22 = a2;
  v24 = &v21;
  geo::FrameCache<gms::MaterialManager<ggl::Texture2D>::MaterialCacheKey,std::shared_ptr<gms::_Material<ggl::Texture2D>>,gms::MaterialManager<ggl::Texture2D>::MaterialCacheKeyHash,gms::MaterialManager<ggl::Texture2D>::MaterialCacheKeyEqual>::removeFromCache(*(_QWORD **)(a1 + 192), (uint64_t)&v21);
  geo::FrameCache<gms::MaterialManager<ggl::Texture2D>::MaterialCacheKey,std::shared_ptr<gms::_Material<ggl::Texture2D>>,gms::MaterialManager<ggl::Texture2D>::MaterialCacheKeyHash,gms::MaterialManager<ggl::Texture2D>::MaterialCacheKeyEqual>::removeFromCache(*(_QWORD **)(a1 + 184), (uint64_t)&v21);
  geo::FrameCache<gms::MaterialManager<ggl::Texture2D>::MaterialCacheKey,std::shared_ptr<gms::_Material<ggl::Texture2D>>,gms::MaterialManager<ggl::Texture2D>::MaterialCacheKeyHash,gms::MaterialManager<ggl::Texture2D>::MaterialCacheKeyEqual>::removeFromCache(*(_QWORD **)(a1 + 288), (uint64_t)&v21);
  geo::FrameCache<gms::MaterialManager<ggl::Texture2D>::MaterialCacheKey,std::shared_ptr<gms::_Material<ggl::Texture2D>>,gms::MaterialManager<ggl::Texture2D>::MaterialCacheKeyHash,gms::MaterialManager<ggl::Texture2D>::MaterialCacheKeyEqual>::removeFromCache(*(_QWORD **)(a1 + 280), (uint64_t)&v21);
  geo::FrameCache<gms::MaterialManager<ggl::Texture2D>::MaterialCacheKey,std::shared_ptr<gms::_Material<ggl::Texture2D>>,gms::MaterialManager<ggl::Texture2D>::MaterialCacheKeyHash,gms::MaterialManager<ggl::Texture2D>::MaterialCacheKeyEqual>::removeFromCache(*(_QWORD **)(a1 + 384), (uint64_t)&v21);
  geo::FrameCache<gms::MaterialManager<ggl::Texture2D>::MaterialCacheKey,std::shared_ptr<gms::_Material<ggl::Texture2D>>,gms::MaterialManager<ggl::Texture2D>::MaterialCacheKeyHash,gms::MaterialManager<ggl::Texture2D>::MaterialCacheKeyEqual>::removeFromCache(*(_QWORD **)(a1 + 376), (uint64_t)&v21);
  result = (uint64_t *)v24;
  if (v24 == &v21)
  {
    v20 = 4;
    result = (uint64_t *)&v21;
  }
  else
  {
    if (!v24)
      return result;
    v20 = 5;
  }
  return (uint64_t *)(*(uint64_t (**)(void))(*result + 8 * v20))();
}

void sub_19F0C687C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  md::components::Material::~Material((md::components::Material *)va);
  _Unwind_Resume(a1);
}

void sub_19F0C6890(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      _Unwind_Resume(exception_object);
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
  _Unwind_Resume(exception_object);
}

uint64_t gdc::Registry::storage<md::components::FlexClientStateChanged>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  uint64_t v16;

  v16 = 0x6F78D65E6A19A54BLL;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0x6F78D65E6A19A54BLL;
      if (*(_QWORD *)&v3 <= 0x6F78D65E6A19A54BuLL)
        v5 = 0x6F78D65E6A19A54BuLL % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0x6F78D65E6A19A54BLL;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0x6F78D65E6A19A54BLL)
            {
              if (v7[2] == 0x6F78D65E6A19A54BLL)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0x6F78D65E6A19A54BLL)
          {
            if (v7[2] == 0x6F78D65E6A19A54BLL)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "md::components::FlexClientStateChanged]";
  *(_QWORD *)(v11 + 24) = 38;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E42B32E8;
  *(_QWORD *)(v11 + 8) = 0x6F78D65E6A19A54BLL;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0x6F78D65E6A19A54BuLL, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0x6F78D65E6A19A54BLL;
  v15[1] = "md::components::FlexClientStateChanged]";
  v15[2] = 38;
  gdc::Registry::_registerStorageDataSignals(a1, 0x6F78D65E6A19A54BLL, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F0C6ADC(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void geo::FrameCache<gms::MaterialManager<ggl::Texture2D>::MaterialCacheKey,std::shared_ptr<gms::_Material<ggl::Texture2D>>,gms::MaterialManager<ggl::Texture2D>::MaterialCacheKeyHash,gms::MaterialManager<ggl::Texture2D>::MaterialCacheKeyEqual>::removeFromCache(_QWORD *a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v6;
  int v7;
  _QWORD *v8;
  int8x8_t v9;
  unint64_t v10;
  uint8x8_t v11;
  _QWORD *v12;
  _QWORD *v13;
  unint64_t v14;
  _QWORD *v15;
  unint64_t v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  _QWORD *v21;
  int8x8_t *v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v3 = a1 + 2;
  v2 = (_QWORD *)a1[2];
  if (v2)
  {
    while (1)
    {
      v6 = *(_QWORD *)(a2 + 24);
      if (!v6)
      {
        std::__throw_bad_function_call[abi:nn180100]();
        gms::MaterialManager<ggl::Texture2D>::rawMaterialForIDAndAttributes(v21, v22, v23, v24, v25);
        return;
      }
      v7 = (*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)v6 + 48))(v6, v2 + 2);
      v8 = (_QWORD *)*v2;
      if (v7)
        break;
LABEL_4:
      v2 = v8;
      if (!v8)
        return;
    }
    v9 = (int8x8_t)a1[1];
    v10 = v2[1];
    v11 = (uint8x8_t)vcnt_s8(v9);
    v11.i16[0] = vaddlv_u8(v11);
    if (v11.u32[0] > 1uLL)
    {
      if (v10 >= *(_QWORD *)&v9)
        v10 %= *(_QWORD *)&v9;
    }
    else
    {
      v10 &= *(_QWORD *)&v9 - 1;
    }
    v12 = *(_QWORD **)(*a1 + 8 * v10);
    do
    {
      v13 = v12;
      v12 = (_QWORD *)*v12;
    }
    while (v12 != v2);
    if (v13 == v3)
      goto LABEL_43;
    v14 = v13[1];
    if (v11.u32[0] > 1uLL)
    {
      if (v14 >= *(_QWORD *)&v9)
        v14 %= *(_QWORD *)&v9;
    }
    else
    {
      v14 &= *(_QWORD *)&v9 - 1;
    }
    v15 = (_QWORD *)*v2;
    if (v14 != v10)
    {
LABEL_43:
      if (v8)
      {
        v16 = v8[1];
        if (v11.u32[0] > 1uLL)
        {
          if (v16 >= *(_QWORD *)&v9)
            v16 %= *(_QWORD *)&v9;
        }
        else
        {
          v16 &= *(_QWORD *)&v9 - 1;
        }
        v15 = (_QWORD *)*v2;
        if (v16 == v10)
          goto LABEL_27;
      }
      *(_QWORD *)(*a1 + 8 * v10) = 0;
      v15 = (_QWORD *)*v2;
    }
    if (!v15)
    {
LABEL_33:
      *v13 = v15;
      *v2 = 0;
      --a1[3];
      if (*((_BYTE *)v2 + 48))
      {
        v18 = (std::__shared_weak_count *)v2[5];
        if (v18)
        {
          p_shared_owners = (unint64_t *)&v18->__shared_owners_;
          do
            v20 = __ldaxr(p_shared_owners);
          while (__stlxr(v20 - 1, p_shared_owners));
          if (!v20)
          {
            ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
            std::__shared_weak_count::__release_weak(v18);
          }
        }
      }
      operator delete(v2);
      goto LABEL_4;
    }
LABEL_27:
    v17 = v15[1];
    if (v11.u32[0] > 1uLL)
    {
      if (v17 >= *(_QWORD *)&v9)
        v17 %= *(_QWORD *)&v9;
    }
    else
    {
      v17 &= *(_QWORD *)&v9 - 1;
    }
    if (v17 != v10)
    {
      *(_QWORD *)(*a1 + 8 * v17) = v13;
      v15 = (_QWORD *)*v2;
    }
    goto LABEL_33;
  }
}

void gms::MaterialManager<ggl::Texture2D>::rawMaterialForIDAndAttributes(_QWORD *a1, int8x8_t *a2, unint64_t a3, uint64_t a4, uint64_t a5)
{
  __int16 *v5;
  std::__shared_weak_count *v9;
  uint64_t v10;
  int v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  __int16 v15;
  gss::Allocator *v16;
  __int128 v17;
  uint64_t v18;
  unsigned int v19;
  __int128 v20;
  uint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  BOOL v24;
  uint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t *p_shared_owners;
  unint64_t v29;
  __int128 v30;
  __int128 v31;

  v31 = 0uLL;
  gms::MaterialManager<ggl::Texture2D>::getMaterialSheet(&v30, a2, a3);
  v9 = (std::__shared_weak_count *)*((_QWORD *)&v30 + 1);
  v10 = v30;
  v31 = v30;
  if (!(_QWORD)v30)
  {
    *a1 = 0;
    a1[1] = 0;
    goto LABEL_30;
  }
  if (a4)
  {
    *(_QWORD *)((char *)&v30 + 7) = 0;
    *(_QWORD *)&v30 = 0;
    HIBYTE(v30) = 1;
    geo::intern_linear_map<gss::StyleAttribute,unsigned short,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::copy(&v30, a5);
    v11 = *(unsigned __int16 *)(a4 + 10);
    if (*(_WORD *)(a4 + 10))
    {
      v12 = 0;
      v13 = 0;
      v14 = *(unsigned __int16 *)(a4 + 10);
      do
      {
        if (v13 < v14)
        {
          v12 = (unsigned int *)(*(_QWORD *)a4 + 4 * v13);
          v5 = (__int16 *)(*(_QWORD *)a4 + *(unsigned __int16 *)(a4 + 8) + 2 * v13);
        }
        v15 = *v5;
        *(_WORD *)geo::intern_linear_map<gss::StyleAttribute,unsigned short,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::operator[](&v30, *v12) = v15;
        v14 = *(unsigned __int16 *)(a4 + 10);
        if (v13 + 1 < v14)
          ++v13;
        else
          v13 = *(unsigned __int16 *)(a4 + 10);
      }
      while (v13 != v11);
    }
    v16 = (gss::Allocator *)(***(uint64_t (****)(_QWORD, __int128 *))(v10 + 16))(*(_QWORD *)(v10 + 16), &v30);
    if ((_DWORD)v16 == -1)
    {
      v18 = *(_QWORD *)(v10 + 80);
      *a1 = *(_QWORD *)(v10 + 72);
      a1[1] = v18;
      if (!v18)
        goto LABEL_21;
    }
    else
    {
      v17 = *(_OWORD *)(*(_QWORD *)(v10 + 40) + 16 * v16);
      *(_OWORD *)a1 = v17;
      v18 = *((_QWORD *)&v17 + 1);
      if (!*((_QWORD *)&v17 + 1))
        goto LABEL_21;
    }
    v22 = (unint64_t *)(v18 + 8);
    do
      v23 = __ldxr(v22);
    while (__stxr(v23 + 1, v22));
LABEL_21:
    if (BYTE14(v30))
      v24 = 1;
    else
      v24 = (_QWORD)v30 == 0;
    if (!v24)
    {
      v25 = gss::Allocator::instance(v16);
      (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v25 + 40))(v25, v30, WORD6(v30));
    }
    v9 = (std::__shared_weak_count *)*((_QWORD *)&v31 + 1);
    goto LABEL_30;
  }
  v19 = (***(uint64_t (****)(_QWORD, uint64_t))(v30 + 16))(*(_QWORD *)(v30 + 16), a5);
  if (v19 == -1)
  {
    v21 = *(_QWORD *)(v10 + 80);
    *a1 = *(_QWORD *)(v10 + 72);
    a1[1] = v21;
    if (!v21)
      goto LABEL_30;
  }
  else
  {
    v20 = *(_OWORD *)(*(_QWORD *)(v10 + 40) + 16 * v19);
    *(_OWORD *)a1 = v20;
    v21 = *((_QWORD *)&v20 + 1);
    if (!*((_QWORD *)&v20 + 1))
      goto LABEL_30;
  }
  v26 = (unint64_t *)(v21 + 8);
  do
    v27 = __ldxr(v26);
  while (__stxr(v27 + 1, v26));
LABEL_30:
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v29 = __ldaxr(p_shared_owners);
    while (__stlxr(v29 - 1, p_shared_owners));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
}

void sub_19F0C6EC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *gms::MaterialManager<ggl::Texture2D>::getMaterialSheet(_QWORD *result, int8x8_t *a2, unint64_t a3)
{
  int8x8_t v3;
  uint8x8_t v4;
  unint64_t v5;
  int8x8_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;

  v3 = a2[3];
  if (!*(_QWORD *)&v3)
    goto LABEL_21;
  v4 = (uint8x8_t)vcnt_s8(v3);
  v4.i16[0] = vaddlv_u8(v4);
  if (v4.u32[0] > 1uLL)
  {
    v5 = a3;
    if (*(_QWORD *)&v3 <= a3)
      v5 = a3 % *(_QWORD *)&v3;
  }
  else
  {
    v5 = (*(_QWORD *)&v3 - 1) & a3;
  }
  v6 = a2[2];
  v7 = *(_QWORD **)(*(_QWORD *)&v6 + 8 * v5);
  if (!v7 || (v8 = (_QWORD *)*v7) == 0)
  {
LABEL_21:
    *result = 0;
    result[1] = 0;
    return result;
  }
  v9 = *(_QWORD *)&v3 - 1;
  if (v4.u32[0] < 2uLL)
  {
    while (1)
    {
      v10 = v8[1];
      if (v10 == a3)
      {
        if (v8[2] == a3)
          goto LABEL_22;
      }
      else if ((v10 & v9) != v5)
      {
        goto LABEL_21;
      }
      v8 = (_QWORD *)*v8;
      if (!v8)
        goto LABEL_21;
    }
  }
  while (1)
  {
    v11 = v8[1];
    if (v11 == a3)
      break;
    if (v11 >= *(_QWORD *)&v3)
      v11 %= *(_QWORD *)&v3;
    if (v11 != v5)
      goto LABEL_21;
LABEL_16:
    v8 = (_QWORD *)*v8;
    if (!v8)
      goto LABEL_21;
  }
  if (v8[2] != a3)
    goto LABEL_16;
LABEL_22:
  if (v4.u32[0] > 1uLL)
  {
    v12 = a3;
    if (*(_QWORD *)&v3 <= a3)
      v12 = a3 % *(_QWORD *)&v3;
  }
  else
  {
    v12 = v9 & a3;
  }
  v13 = *(_QWORD **)(*(_QWORD *)&v6 + 8 * v12);
  if (!v13 || (v14 = (_QWORD *)*v13) == 0)
LABEL_45:
    abort();
  if (v4.u32[0] < 2uLL)
  {
    while (1)
    {
      v15 = v14[1];
      if (v15 == a3)
      {
        if (v14[2] == a3)
          goto LABEL_34;
      }
      else if ((v15 & v9) != v12)
      {
        goto LABEL_45;
      }
      v14 = (_QWORD *)*v14;
      if (!v14)
        goto LABEL_45;
    }
  }
  while (2)
  {
    v19 = v14[1];
    if (v19 != a3)
    {
      if (v19 >= *(_QWORD *)&v3)
        v19 %= *(_QWORD *)&v3;
      if (v19 != v12)
        goto LABEL_45;
      goto LABEL_39;
    }
    if (v14[2] != a3)
    {
LABEL_39:
      v14 = (_QWORD *)*v14;
      if (!v14)
        goto LABEL_45;
      continue;
    }
    break;
  }
LABEL_34:
  v16 = v14[4];
  *result = v14[3];
  result[1] = v16;
  if (v16)
  {
    v17 = (unint64_t *)(v16 + 8);
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
  }
  return result;
}

char *geo::FrameCache<gms::MaterialManager<ggl::Texture2D>::MaterialCacheKey,std::shared_ptr<gms::_Material<ggl::Texture2D>>,gms::MaterialManager<ggl::Texture2D>::MaterialCacheKeyHash,gms::MaterialManager<ggl::Texture2D>::MaterialCacheKeyEqual>::operator[](uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  void **v11;
  _QWORD *v12;
  unint64_t v14;
  uint64_t v16;
  _QWORD *v17;
  float v18;
  float v19;
  _BOOL8 v20;
  unint64_t v21;
  unint64_t v22;
  size_t prime;
  void *v24;
  void *v25;
  uint64_t v26;
  _QWORD *v27;
  size_t v28;
  size_t v29;
  size_t v30;
  _QWORD *i;
  size_t v32;
  uint64_t v33;
  unint64_t v34;
  uint8x8_t v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  size_t v39;
  uint64_t v40;
  _QWORD *v41;
  unint64_t v42;
  char *result;
  _QWORD *v44;
  int8x8_t v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  uint8x8_t v49;
  uint64_t v50;
  uint64_t **v51;
  uint64_t *v52;
  uint64_t v53;
  unint64_t v55;
  uint64_t v57;
  void *v58;
  uint64_t v59;
  unint64_t *v60;
  unint64_t v61;

  v5 = *(uint64_t **)(a1 + 88);
  v6 = *a2;
  v7 = a2[1];
  v8 = ((v7 << 6)
      + (v7 >> 2)
      - 0x61C8864680B583EBLL
      + ((((unint64_t)*a2 >> 34) + *a2 + (HIDWORD(*a2) << 6) - 0x61C8864680B583EBLL) ^ HIDWORD(*a2))) ^ v7;
  v9 = v5[1];
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      v2 = ((v7 << 6)
          + (v7 >> 2)
          - 0x61C8864680B583EBLL
          + ((((unint64_t)*a2 >> 34) + *a2 + (HIDWORD(*a2) << 6) - 0x61C8864680B583EBLL) ^ HIDWORD(*a2))) ^ v7;
      if (v8 >= v9)
        v2 = v8 % v9;
    }
    else
    {
      v2 = v8 & (v9 - 1);
    }
    v11 = *(void ***)(*v5 + 8 * v2);
    if (v11)
    {
      v12 = *v11;
      if (*v11)
      {
        if (v10.u32[0] < 2uLL)
        {
          while (1)
          {
            v16 = v12[1];
            if (v16 == v8)
            {
              if (v12[2] == v6 && v12[3] == v7)
                goto LABEL_88;
            }
            else if ((v16 & (v9 - 1)) != v2)
            {
              goto LABEL_28;
            }
            v12 = (_QWORD *)*v12;
            if (!v12)
              goto LABEL_28;
          }
        }
        do
        {
          v14 = v12[1];
          if (v14 == v8)
          {
            if (v12[2] == v6 && v12[3] == v7)
              goto LABEL_88;
          }
          else
          {
            if (v14 >= v9)
              v14 %= v9;
            if (v14 != v2)
              break;
          }
          v12 = (_QWORD *)*v12;
        }
        while (v12);
      }
    }
  }
LABEL_28:
  v17 = v5 + 2;
  v12 = operator new(0x38uLL);
  *v12 = 0;
  v12[1] = v8;
  *((_OWORD *)v12 + 1) = *(_OWORD *)a2;
  *((_BYTE *)v12 + 32) = 0;
  *((_BYTE *)v12 + 48) = 0;
  v18 = (float)(unint64_t)(v5[3] + 1);
  v19 = *((float *)v5 + 8);
  if (!v9 || (float)(v19 * (float)v9) < v18)
  {
    v20 = 1;
    if (v9 >= 3)
      v20 = (v9 & (v9 - 1)) != 0;
    v21 = v20 | (2 * v9);
    v22 = vcvtps_u32_f32(v18 / v19);
    if (v21 <= v22)
      prime = v22;
    else
      prime = v21;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v9 = v5[1];
    }
    if (prime <= v9)
    {
      if (prime >= v9)
        goto LABEL_65;
      v34 = vcvtps_u32_f32((float)(unint64_t)v5[3] / *((float *)v5 + 8));
      if (v9 < 3 || (v35 = (uint8x8_t)vcnt_s8((int8x8_t)v9), v35.i16[0] = vaddlv_u8(v35), v35.u32[0] > 1uLL))
      {
        v34 = std::__next_prime(v34);
      }
      else
      {
        v36 = 1 << -(char)__clz(v34 - 1);
        if (v34 >= 2)
          v34 = v36;
      }
      if (prime <= v34)
        prime = v34;
      if (prime >= v9)
      {
        v9 = v5[1];
LABEL_65:
        if ((v9 & (v9 - 1)) != 0)
        {
          if (v8 >= v9)
            v2 = v8 % v9;
          else
            v2 = v8;
        }
        else
        {
          v2 = (v9 - 1) & v8;
        }
        goto LABEL_78;
      }
      if (!prime)
      {
        v58 = (void *)*v5;
        *v5 = 0;
        if (v58)
          operator delete(v58);
        v9 = 0;
        v5[1] = 0;
        goto LABEL_65;
      }
    }
    if (prime >> 61)
      std::__throw_bad_array_new_length[abi:nn180100]();
    v24 = operator new(8 * prime);
    v25 = (void *)*v5;
    *v5 = (uint64_t)v24;
    if (v25)
      operator delete(v25);
    v26 = 0;
    v5[1] = prime;
    do
      *(_QWORD *)(*v5 + 8 * v26++) = 0;
    while (prime != v26);
    v27 = (_QWORD *)*v17;
    if (!*v17)
    {
LABEL_64:
      v9 = prime;
      goto LABEL_65;
    }
    v28 = v27[1];
    v29 = prime - 1;
    if ((prime & (prime - 1)) == 0)
    {
      v30 = v28 & v29;
      *(_QWORD *)(*v5 + 8 * v30) = v17;
      for (i = (_QWORD *)*v27; *v27; i = (_QWORD *)*v27)
      {
        v32 = i[1] & v29;
        if (v32 == v30)
        {
          v27 = i;
        }
        else if (*(_QWORD *)(*v5 + 8 * v32))
        {
          *v27 = *i;
          v33 = 8 * v32;
          *i = **(_QWORD **)(*v5 + v33);
          **(_QWORD **)(*v5 + v33) = i;
        }
        else
        {
          *(_QWORD *)(*v5 + 8 * v32) = v27;
          v27 = i;
          v30 = v32;
        }
      }
      goto LABEL_64;
    }
    if (v28 >= prime)
      v28 %= prime;
    *(_QWORD *)(*v5 + 8 * v28) = v17;
    v37 = (_QWORD *)*v27;
    if (!*v27)
      goto LABEL_64;
    while (1)
    {
      v39 = v37[1];
      if (v39 >= prime)
        v39 %= prime;
      if (v39 != v28)
      {
        if (!*(_QWORD *)(*v5 + 8 * v39))
        {
          *(_QWORD *)(*v5 + 8 * v39) = v27;
          goto LABEL_69;
        }
        *v27 = *v37;
        v38 = 8 * v39;
        *v37 = **(_QWORD **)(*v5 + v38);
        **(_QWORD **)(*v5 + v38) = v37;
        v37 = v27;
      }
      v39 = v28;
LABEL_69:
      v27 = v37;
      v37 = (_QWORD *)*v37;
      v28 = v39;
      if (!v37)
        goto LABEL_64;
    }
  }
LABEL_78:
  v40 = *v5;
  v41 = *(_QWORD **)(*v5 + 8 * v2);
  if (v41)
  {
    *v12 = *v41;
LABEL_86:
    *v41 = v12;
    goto LABEL_87;
  }
  *v12 = *v17;
  *v17 = v12;
  *(_QWORD *)(v40 + 8 * v2) = v17;
  if (*v12)
  {
    v42 = *(_QWORD *)(*v12 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v42 >= v9)
        v42 %= v9;
    }
    else
    {
      v42 &= v9 - 1;
    }
    v41 = (_QWORD *)(*v5 + 8 * v42);
    goto LABEL_86;
  }
LABEL_87:
  ++v5[3];
LABEL_88:
  result = (char *)(v12 + 4);
  if (!*((_BYTE *)v12 + 48))
  {
    v44 = *(_QWORD **)(a1 + 80);
    v45 = (int8x8_t)v44[1];
    if (v45)
    {
      v46 = *a2;
      v47 = a2[1];
      v48 = ((v47 << 6)
           - 0x61C8864680B583EBLL
           + (v47 >> 2)
           + ((*a2 - 0x61C8864680B583EBLL + ((unint64_t)*a2 >> 34) + (HIDWORD(*a2) << 6)) ^ HIDWORD(*a2))) ^ v47;
      v49 = (uint8x8_t)vcnt_s8(v45);
      v49.i16[0] = vaddlv_u8(v49);
      if (v49.u32[0] > 1uLL)
      {
        v50 = ((v47 << 6)
             - 0x61C8864680B583EBLL
             + (v47 >> 2)
             + ((*a2 - 0x61C8864680B583EBLL + ((unint64_t)*a2 >> 34) + (HIDWORD(*a2) << 6)) ^ HIDWORD(*a2))) ^ v47;
        if (v48 >= *(_QWORD *)&v45)
          v50 = v48 % *(_QWORD *)&v45;
      }
      else
      {
        v50 = v48 & (*(_QWORD *)&v45 - 1);
      }
      v51 = *(uint64_t ***)(*v44 + 8 * v50);
      if (v51)
      {
        v52 = *v51;
        if (v52)
        {
          if (v49.u32[0] < 2uLL)
          {
            v53 = *(_QWORD *)&v45 - 1;
            while (1)
            {
              v57 = v52[1];
              if (v57 == v48)
              {
                if (v52[2] == v46 && v52[3] == v47)
                  goto LABEL_126;
              }
              else if ((v57 & v53) != v50)
              {
                return result;
              }
              v52 = (uint64_t *)*v52;
              if (!v52)
                return result;
            }
          }
          do
          {
            v55 = v52[1];
            if (v55 == v48)
            {
              if (v52[2] == v46 && v52[3] == v47)
              {
LABEL_126:
                if (*((_BYTE *)v52 + 48))
                {
                  v12[4] = v52[4];
                  v59 = v52[5];
                  v12[5] = v59;
                  if (v59)
                  {
                    v60 = (unint64_t *)(v59 + 8);
                    do
                      v61 = __ldxr(v60);
                    while (__stxr(v61 + 1, v60));
                  }
                  *((_BYTE *)v12 + 48) = 1;
                }
                return result;
              }
            }
            else
            {
              if (v55 >= *(_QWORD *)&v45)
                v55 %= *(_QWORD *)&v45;
              if (v55 != v50)
                return result;
            }
            v52 = (uint64_t *)*v52;
          }
          while (v52);
        }
      }
    }
  }
  return result;
}

void sub_19F0C76AC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<gms::MaterialManager<ggl::Texture2D>::MaterialCacheKey,std::optional<std::shared_ptr<gms::_Material<ggl::Texture2D>>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<gms::MaterialManager<ggl::Texture2D>::MaterialCacheKey,std::optional<std::shared_ptr<gms::_Material<ggl::Texture2D>>>>,void *>>>>::~unique_ptr[abi:nn180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void gms::MaterialManager<ggl::Texture2D>::setClientStyleState(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t *v4;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  geo::read_write_lock *v11;
  const char *v12;
  geo::read_write_lock *v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  uint64_t v25;
  int8x16_t *v26;
  int8x16_t v27;
  _QWORD *v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t i;
  int8x16_t v32;
  _QWORD *v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t j;
  int8x16_t v37;
  _QWORD *v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t k;
  _QWORD *v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  _QWORD *v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  _QWORD *v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  _BYTE v54[15];
  char v55;
  uint64_t v56;

  if (*(_QWORD *)(a1 + 88) != a2)
  {
    *(_DWORD *)(a1 + 392) = 0;
    if (a3)
    {
      v4 = (unint64_t *)(a3 + 8);
      do
        v5 = __ldxr(v4);
      while (__stxr(v5 + 1, v4));
    }
    v6 = *(std::__shared_weak_count **)(a1 + 96);
    *(_QWORD *)(a1 + 88) = a2;
    *(_QWORD *)(a1 + 96) = a3;
    if (v6)
    {
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
    v9 = *(_QWORD *)(a1 + 56);
    v10 = *(_QWORD *)(a1 + 88);
    v56 = v10 + 16;
    v11 = (geo::read_write_lock *)pthread_rwlock_rdlock((pthread_rwlock_t *)(v10 + 16));
    if ((_DWORD)v11)
      geo::read_write_lock::logFailure(v11, (uint64_t)"read lock", v12);
    memset(v54, 0, sizeof(v54));
    v55 = 1;
    geo::intern_linear_map<gss::StyleAttribute,unsigned short,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::copy(v54, v10 + 216);
    v13 = (geo::read_write_lock *)pthread_rwlock_unlock((pthread_rwlock_t *)(v10 + 16));
    if ((_DWORD)v13)
      geo::read_write_lock::logFailure(v13, (uint64_t)"unlock", v14);
    v16 = *(_QWORD *)(a1 + 72);
    v15 = *(_QWORD *)(a1 + 80);
    if (v15)
    {
      v17 = (unint64_t *)(v15 + 8);
      do
        v18 = __ldxr(v17);
      while (__stxr(v18 + 1, v17));
    }
    v19 = *(std::__shared_weak_count **)(v9 + 80);
    *(_QWORD *)(v9 + 72) = v16;
    *(_QWORD *)(v9 + 80) = v15;
    if (v19)
    {
      v20 = (unint64_t *)&v19->__shared_owners_;
      do
        v21 = __ldaxr(v20);
      while (__stlxr(v21 - 1, v20));
      if (!v21)
      {
        ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
        std::__shared_weak_count::__release_weak(v19);
      }
    }
    v22 = *(_QWORD *)v54;
    if (v54[14])
      v23 = 1;
    else
      v23 = *(_QWORD *)v54 == 0;
    if (!v23)
    {
      v24 = gss::Allocator::instance(v13);
      (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v24 + 40))(v24, v22, *(unsigned __int16 *)&v54[12]);
      *(_QWORD *)v54 = 0;
    }
  }
  v25 = *(_QWORD *)(a1 + 88);
  if (*(_DWORD *)(v25 + 248) == *(_DWORD *)(a1 + 392))
  {
    v26 = (int8x16_t *)(a1 + 280);
    v27 = *(int8x16_t *)(a1 + 184);
    *(int8x16_t *)(a1 + 184) = vextq_s8(v27, v27, 8uLL);
    v28 = (_QWORD *)v27.i64[0];
    if (*(_QWORD *)(v27.i64[0] + 24))
    {
      v29 = *(_QWORD **)(v27.i64[0] + 16);
      while (v29)
      {
        v42 = v29;
        v29 = (_QWORD *)*v29;
        if (*((_BYTE *)v42 + 48))
        {
          v43 = (std::__shared_weak_count *)v42[5];
          if (v43)
          {
            v44 = (unint64_t *)&v43->__shared_owners_;
            do
              v45 = __ldaxr(v44);
            while (__stlxr(v45 - 1, v44));
            if (!v45)
            {
              ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
              std::__shared_weak_count::__release_weak(v43);
            }
          }
        }
        operator delete(v42);
      }
      v28[2] = 0;
      v30 = v28[1];
      if (v30)
      {
        for (i = 0; i != v30; ++i)
          *(_QWORD *)(*v28 + 8 * i) = 0;
      }
      v28[3] = 0;
    }
    v32 = *v26;
    *v26 = vextq_s8(*v26, *v26, 8uLL);
    v33 = (_QWORD *)v32.i64[0];
    if (*(_QWORD *)(v32.i64[0] + 24))
    {
      v34 = *(_QWORD **)(v32.i64[0] + 16);
      while (v34)
      {
        v46 = v34;
        v34 = (_QWORD *)*v34;
        if (*((_BYTE *)v46 + 48))
        {
          v47 = (std::__shared_weak_count *)v46[5];
          if (v47)
          {
            v48 = (unint64_t *)&v47->__shared_owners_;
            do
              v49 = __ldaxr(v48);
            while (__stlxr(v49 - 1, v48));
            if (!v49)
            {
              ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
              std::__shared_weak_count::__release_weak(v47);
            }
          }
        }
        operator delete(v46);
      }
      v33[2] = 0;
      v35 = v33[1];
      if (v35)
      {
        for (j = 0; j != v35; ++j)
          *(_QWORD *)(*v33 + 8 * j) = 0;
      }
      v33[3] = 0;
    }
    v37 = v26[6];
    v26[6] = vextq_s8(v37, v37, 8uLL);
    v38 = (_QWORD *)v37.i64[0];
    if (*(_QWORD *)(v37.i64[0] + 24))
    {
      v39 = *(_QWORD **)(v37.i64[0] + 16);
      while (v39)
      {
        v50 = v39;
        v39 = (_QWORD *)*v39;
        if (*((_BYTE *)v50 + 48))
        {
          v51 = (std::__shared_weak_count *)v50[5];
          if (v51)
          {
            v52 = (unint64_t *)&v51->__shared_owners_;
            do
              v53 = __ldaxr(v52);
            while (__stlxr(v53 - 1, v52));
            if (!v53)
            {
              ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
              std::__shared_weak_count::__release_weak(v51);
            }
          }
        }
        operator delete(v50);
      }
      v38[2] = 0;
      v40 = v38[1];
      if (v40)
      {
        for (k = 0; k != v40; ++k)
          *(_QWORD *)(*v38 + 8 * k) = 0;
      }
      v38[3] = 0;
    }
  }
  else
  {
    *(_DWORD *)(a1 + 392) = *(_DWORD *)(v25 + 248);
    geo::FrameCache<gms::MaterialManager<ggl::Texture2D>::MaterialCacheKey,std::shared_ptr<gms::_Material<ggl::Texture2D>>,gms::MaterialManager<ggl::Texture2D>::MaterialCacheKeyHash,gms::MaterialManager<ggl::Texture2D>::MaterialCacheKeyEqual>::clear(a1 + 104);
    geo::FrameCache<gms::MaterialManager<ggl::Texture2D>::MaterialCacheKey,std::shared_ptr<gms::_Material<ggl::Texture2D>>,gms::MaterialManager<ggl::Texture2D>::MaterialCacheKeyHash,gms::MaterialManager<ggl::Texture2D>::MaterialCacheKeyEqual>::clear(a1 + 200);
    geo::FrameCache<gms::MaterialManager<ggl::Texture2D>::MaterialCacheKey,std::shared_ptr<gms::_Material<ggl::Texture2D>>,gms::MaterialManager<ggl::Texture2D>::MaterialCacheKeyHash,gms::MaterialManager<ggl::Texture2D>::MaterialCacheKeyEqual>::clear(a1 + 296);
  }
}

void sub_19F0C7A68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  geo::write_lock_guard::~write_lock_guard((pthread_rwlock_t **)va);
  _Unwind_Resume(a1);
}

void md::MaterialLogic::_clearPendingTaggedRegistries(md::MaterialLogic *this)
{
  uint64_t **v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t i;
  uint64_t RegistryByIdentifier;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD v19[2];

  v2 = (uint64_t **)*((_QWORD *)this + 26);
  if (!v2)
  {
LABEL_2:
    if (*((_QWORD *)this + 27))
    {
      v3 = (_QWORD *)*((_QWORD *)this + 26);
      if (v3)
      {
        do
        {
          v4 = (_QWORD *)*v3;
          operator delete(v3);
          v3 = v4;
        }
        while (v4);
      }
      *((_QWORD *)this + 26) = 0;
      v5 = *((_QWORD *)this + 25);
      if (v5)
      {
        for (i = 0; i != v5; ++i)
          *(_QWORD *)(*((_QWORD *)this + 24) + 8 * i) = 0;
      }
      *((_QWORD *)this + 27) = 0;
    }
    return;
  }
  while (1)
  {
    RegistryByIdentifier = md::RegistryManager::getRegistryByIdentifier(*((md::RegistryManager **)this + 19), *((unsigned __int16 *)v2 + 8));
    if (!RegistryByIdentifier)
      goto LABEL_11;
    v8 = (_QWORD *)gdc::Registry::storage<md::components::DidResolvePendingMaterial>(RegistryByIdentifier);
    v9 = v8;
    if (v8[29])
    {
      v10 = (_QWORD *)v8[28];
      if (v10)
        break;
    }
LABEL_10:
    v9[8] = v9[7];
    v9[11] = v9[10];
LABEL_11:
    v2 = (uint64_t **)*v2;
    if (!v2)
      goto LABEL_2;
  }
  v11 = v8[31];
  v12 = v8[7];
  v13 = (v8[8] - v12) >> 3;
  while (1)
  {
    v19[0] = v12;
    v19[1] = v13;
    v18 = v11;
    v14 = v10[6];
    if (!v14)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v14 + 48))(v14, &v18, v19);
    v10 = (_QWORD *)*v10;
    if (!v10)
      goto LABEL_10;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  std::__hash_table<std::__hash_value_type<unsigned long long,std::shared_ptr<gms::MaterialSheet<ggl::Texture2D>>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::shared_ptr<gms::MaterialSheet<ggl::Texture2D>>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::shared_ptr<gms::MaterialSheet<ggl::Texture2D>>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::shared_ptr<gms::MaterialSheet<ggl::Texture2D>>>>>::__emplace_unique_key_args<unsigned long long,std::pair<unsigned long long const,std::shared_ptr<gms::MaterialSheet<ggl::Texture2D>>>>(v15, v16, v17);
}

void std::__hash_table<std::__hash_value_type<unsigned long long,std::shared_ptr<gms::MaterialSheet<ggl::Texture2D>>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::shared_ptr<gms::MaterialSheet<ggl::Texture2D>>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::shared_ptr<gms::MaterialSheet<ggl::Texture2D>>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::shared_ptr<gms::MaterialSheet<ggl::Texture2D>>>>>::__emplace_unique_key_args<unsigned long long,std::pair<unsigned long long const,std::shared_ptr<gms::MaterialSheet<ggl::Texture2D>>>>(uint64_t *a1, unint64_t a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v7;
  uint8x8_t v8;
  _QWORD *v9;
  _QWORD *v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  char *v14;
  float v15;
  float v16;
  _BOOL8 v17;
  unint64_t v18;
  unint64_t v19;
  size_t prime;
  void *v21;
  void *v22;
  uint64_t v23;
  _QWORD *v24;
  size_t v25;
  size_t v26;
  size_t v27;
  _QWORD *i;
  size_t v29;
  uint64_t v30;
  unint64_t v31;
  uint8x8_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  size_t v36;
  uint64_t v37;
  _QWORD *v38;
  unint64_t v39;
  void *v40;

  v7 = a1[1];
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = a2;
      if (v7 <= a2)
        v3 = a2 % v7;
    }
    else
    {
      v3 = (v7 - 1) & a2;
    }
    v9 = *(_QWORD **)(*a1 + 8 * v3);
    if (v9)
    {
      v10 = (_QWORD *)*v9;
      if (v10)
      {
        if (v8.u32[0] < 2uLL)
        {
          while (1)
          {
            v12 = v10[1];
            if (v12 == a2)
            {
              if (v10[2] == a2)
                return;
            }
            else if ((v12 & (v7 - 1)) != v3)
            {
              goto LABEL_22;
            }
            v10 = (_QWORD *)*v10;
            if (!v10)
              goto LABEL_22;
          }
        }
        do
        {
          v11 = v10[1];
          if (v11 == a2)
          {
            if (v10[2] == a2)
              return;
          }
          else
          {
            if (v11 >= v7)
              v11 %= v7;
            if (v11 != v3)
              break;
          }
          v10 = (_QWORD *)*v10;
        }
        while (v10);
      }
    }
  }
LABEL_22:
  v13 = a1 + 2;
  v14 = (char *)operator new(0x28uLL);
  *(_QWORD *)v14 = 0;
  *((_QWORD *)v14 + 1) = a2;
  *((_QWORD *)v14 + 2) = *(_QWORD *)a3;
  *(_OWORD *)(v14 + 24) = *(_OWORD *)(a3 + 8);
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  v15 = (float)(unint64_t)(a1[3] + 1);
  v16 = *((float *)a1 + 8);
  if (!v7 || (float)(v16 * (float)v7) < v15)
  {
    v17 = 1;
    if (v7 >= 3)
      v17 = (v7 & (v7 - 1)) != 0;
    v18 = v17 | (2 * v7);
    v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19)
      prime = v19;
    else
      prime = v18;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
    }
    v7 = a1[1];
    if (prime <= v7)
    {
      if (prime >= v7)
        goto LABEL_59;
      v31 = vcvtps_u32_f32((float)(unint64_t)a1[3] / *((float *)a1 + 8));
      if (v7 < 3 || (v32 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v32.i16[0] = vaddlv_u8(v32), v32.u32[0] > 1uLL))
      {
        v31 = std::__next_prime(v31);
      }
      else
      {
        v33 = 1 << -(char)__clz(v31 - 1);
        if (v31 >= 2)
          v31 = v33;
      }
      if (prime <= v31)
        prime = v31;
      if (prime >= v7)
      {
        v7 = a1[1];
LABEL_59:
        if ((v7 & (v7 - 1)) != 0)
        {
          if (v7 <= a2)
            v3 = a2 % v7;
          else
            v3 = a2;
        }
        else
        {
          v3 = (v7 - 1) & a2;
        }
        goto LABEL_72;
      }
      if (!prime)
      {
        v40 = (void *)*a1;
        *a1 = 0;
        if (v40)
          operator delete(v40);
        v7 = 0;
        a1[1] = 0;
        goto LABEL_59;
      }
    }
    if (prime >> 61)
      std::__throw_bad_array_new_length[abi:nn180100]();
    v21 = operator new(8 * prime);
    v22 = (void *)*a1;
    *a1 = (uint64_t)v21;
    if (v22)
      operator delete(v22);
    v23 = 0;
    a1[1] = prime;
    do
      *(_QWORD *)(*a1 + 8 * v23++) = 0;
    while (prime != v23);
    v24 = (_QWORD *)*v13;
    if (!*v13)
    {
LABEL_58:
      v7 = prime;
      goto LABEL_59;
    }
    v25 = v24[1];
    v26 = prime - 1;
    if ((prime & (prime - 1)) == 0)
    {
      v27 = v25 & v26;
      *(_QWORD *)(*a1 + 8 * v27) = v13;
      for (i = (_QWORD *)*v24; *v24; i = (_QWORD *)*v24)
      {
        v29 = i[1] & v26;
        if (v29 == v27)
        {
          v24 = i;
        }
        else if (*(_QWORD *)(*a1 + 8 * v29))
        {
          *v24 = *i;
          v30 = 8 * v29;
          *i = **(_QWORD **)(*a1 + v30);
          **(_QWORD **)(*a1 + v30) = i;
        }
        else
        {
          *(_QWORD *)(*a1 + 8 * v29) = v24;
          v24 = i;
          v27 = v29;
        }
      }
      goto LABEL_58;
    }
    if (v25 >= prime)
      v25 %= prime;
    *(_QWORD *)(*a1 + 8 * v25) = v13;
    v34 = (_QWORD *)*v24;
    if (!*v24)
      goto LABEL_58;
    while (1)
    {
      v36 = v34[1];
      if (v36 >= prime)
        v36 %= prime;
      if (v36 != v25)
      {
        if (!*(_QWORD *)(*a1 + 8 * v36))
        {
          *(_QWORD *)(*a1 + 8 * v36) = v24;
          goto LABEL_63;
        }
        *v24 = *v34;
        v35 = 8 * v36;
        *v34 = **(_QWORD **)(*a1 + v35);
        **(_QWORD **)(*a1 + v35) = v34;
        v34 = v24;
      }
      v36 = v25;
LABEL_63:
      v24 = v34;
      v34 = (_QWORD *)*v34;
      v25 = v36;
      if (!v34)
        goto LABEL_58;
    }
  }
LABEL_72:
  v37 = *a1;
  v38 = *(_QWORD **)(*a1 + 8 * v3);
  if (v38)
  {
    *(_QWORD *)v14 = *v38;
LABEL_80:
    *v38 = v14;
    goto LABEL_81;
  }
  *(_QWORD *)v14 = *v13;
  *v13 = v14;
  *(_QWORD *)(v37 + 8 * v3) = v13;
  if (*(_QWORD *)v14)
  {
    v39 = *(_QWORD *)(*(_QWORD *)v14 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v39 >= v7)
        v39 %= v7;
    }
    else
    {
      v39 &= v7 - 1;
    }
    v38 = (_QWORD *)(*a1 + 8 * v39);
    goto LABEL_80;
  }
LABEL_81:
  ++a1[3];
}

void sub_19F0C7FF4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<md::LabelIdentifier,std::shared_ptr<md::HighPrecisionAltitudeRequest>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<md::LabelIdentifier,std::shared_ptr<md::HighPrecisionAltitudeRequest>>,void *>>>>::~unique_ptr[abi:nn180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL std::__function::__func<gms::MaterialManager<ggl::Texture2D>::addMaterialSheet(unsigned long long,std::shared_ptr<gms::MaterialSheet<ggl::Texture2D>>)::{lambda(gms::MaterialManager<ggl::Texture2D>::MaterialCacheKey const&)#1},std::allocator<gms::MaterialManager<ggl::Texture2D>::addMaterialSheet(unsigned long long,std::shared_ptr<gms::MaterialSheet<ggl::Texture2D>>)::{lambda(gms::MaterialManager<ggl::Texture2D>::MaterialCacheKey const&)#1}>,BOOL ()(gms::MaterialManager<ggl::Texture2D>::MaterialCacheKey const&)>::operator()(uint64_t a1, _QWORD *a2)
{
  return *a2 == *(_QWORD *)(a1 + 8);
}

double md::Logic<md::AssetInjectionLogic,md::AssetInjectionContext,md::LogicDependencies<gdc::TypeList<md::SceneContext>,gdc::TypeList<>>>::allocateContext@<D0>(uint64_t a1@<X8>)
{
  double result;

  result = 0.0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_DWORD *)(a1 + 72) = 1065353216;
  return result;
}

uint64_t gdc::Registry::storage<md::components::DidResolvePendingMaterial>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  uint64_t v16;

  v16 = 0x21F9ABBDA81BEAF3;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0x21F9ABBDA81BEAF3;
      if (*(_QWORD *)&v3 <= 0x21F9ABBDA81BEAF3uLL)
        v5 = 0x21F9ABBDA81BEAF3uLL % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0x21F9ABBDA81BEAF3;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0x21F9ABBDA81BEAF3)
            {
              if (v7[2] == 0x21F9ABBDA81BEAF3)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0x21F9ABBDA81BEAF3)
          {
            if (v7[2] == 0x21F9ABBDA81BEAF3)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "md::components::DidResolvePendingMaterial]";
  *(_QWORD *)(v11 + 24) = 41;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E42B33A8;
  *(_QWORD *)(v11 + 8) = 0x21F9ABBDA81BEAF3;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0x21F9ABBDA81BEAF3uLL, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0x21F9ABBDA81BEAF3;
  v15[1] = "md::components::DidResolvePendingMaterial]";
  v15[2] = 41;
  gdc::Registry::_registerStorageDataSignals(a1, 0x21F9ABBDA81BEAF3, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F0C8254(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t std::basic_regex<char,std::regex_traits<char>>::__search<std::allocator<std::sub_match<char const*>>>(uint64_t a1, std::sub_match<const char *> *a2, std::sub_match<const char *> *a3, std::vector<std::csub_match> *this, int a5)
{
  int v9;
  int v10;
  const std::vector<std::csub_match>::value_type *v11;
  int v12;
  const char *i;
  std::vector<std::csub_match>::pointer begin;
  std::sub_match<const char *> *first;
  std::sub_match<const char *> *second;
  uint64_t result;

  if ((a5 & 0x80) != 0)
    v9 = a5 & 0xFFA;
  else
    v9 = a5;
  v10 = *(_DWORD *)(a1 + 28);
  this[1].__begin_ = a3;
  v11 = (const std::vector<std::csub_match>::value_type *)&this[1];
  this[1].__end_ = a3;
  LOBYTE(this[1].__end_cap_.__value_) = 0;
  std::vector<std::sub_match<char const*>>::assign(this, (v10 + 1), (std::vector<std::csub_match>::const_reference)&this[1]);
  this[2].__begin_ = a2;
  this[2].__end_ = a2;
  LOBYTE(this[2].__end_cap_.__value_) = 0;
  *(std::pair<const char *, const char *> *)&this[3].__begin_ = v11->std::pair<const char *, const char *>;
  LOBYTE(this[3].__end_cap_.__value_) = this[1].__end_cap_.__value_;
  if ((v9 & 0x800) == 0)
    this[4].__end_ = a2;
  LOBYTE(this[4].__begin_) = 1;
  if ((*(_WORD *)(a1 + 24) & 0x1F0) == 0)
  {
    if ((std::basic_regex<char,std::regex_traits<char>>::__match_at_start_ecma<std::allocator<std::sub_match<char const*>>>(a1, (const char *)a2, (const char *)a3, (uint64_t *)this, v9, (v9 & 0x800) == 0) & 1) != 0)goto LABEL_28;
    goto LABEL_13;
  }
  if (*(_DWORD *)(a1 + 28))
  {
    if (std::basic_regex<char,std::regex_traits<char>>::__match_at_start_posix_subs<std::allocator<std::sub_match<char const*>>>(a1, (const char *)a2, (const char *)a3, (uint64_t *)this, v9, (v9 & 0x800) == 0))goto LABEL_28;
LABEL_13:
    if (a2 != a3 && (v9 & 0x40) == 0)
    {
      v12 = v9 | 0x80;
      for (i = (char *)&a2->first + 1; i != (const char *)a3; ++i)
      {
        std::vector<std::sub_match<char const*>>::assign(this, 0xAAAAAAAAAAAAAAABLL * (((char *)this->__end_ - (char *)this->__begin_) >> 3), v11);
        if ((*(_WORD *)(a1 + 24) & 0x1F0) != 0)
        {
          if (*(_DWORD *)(a1 + 28))
          {
            if (std::basic_regex<char,std::regex_traits<char>>::__match_at_start_posix_subs<std::allocator<std::sub_match<char const*>>>(a1, i, (const char *)a3, (uint64_t *)this, v12, 0))goto LABEL_28;
          }
          else if ((std::basic_regex<char,std::regex_traits<char>>::__match_at_start_posix_nosubs<std::allocator<std::sub_match<char const*>>>(a1, (uint64_t)i, (uint64_t)a3, (uint64_t *)this, v12, 0) & 1) != 0)
          {
            goto LABEL_28;
          }
        }
        else if ((std::basic_regex<char,std::regex_traits<char>>::__match_at_start_ecma<std::allocator<std::sub_match<char const*>>>(a1, i, (const char *)a3, (uint64_t *)this, v12, 0) & 1) != 0)
        {
          goto LABEL_28;
        }
        std::vector<std::sub_match<char const*>>::assign(this, 0xAAAAAAAAAAAAAAABLL * (((char *)this->__end_ - (char *)this->__begin_) >> 3), v11);
      }
      std::vector<std::sub_match<char const*>>::assign(this, 0xAAAAAAAAAAAAAAABLL * (((char *)this->__end_ - (char *)this->__begin_) >> 3), v11);
      if ((*(_WORD *)(a1 + 24) & 0x1F0) != 0)
      {
        if (*(_DWORD *)(a1 + 28))
        {
          if (std::basic_regex<char,std::regex_traits<char>>::__match_at_start_posix_subs<std::allocator<std::sub_match<char const*>>>(a1, (const char *)a3, (const char *)a3, (uint64_t *)this, v12, 0))goto LABEL_28;
        }
        else if ((std::basic_regex<char,std::regex_traits<char>>::__match_at_start_posix_nosubs<std::allocator<std::sub_match<char const*>>>(a1, (uint64_t)a3, (uint64_t)a3, (uint64_t *)this, v12, 0) & 1) != 0)
        {
          goto LABEL_28;
        }
      }
      else if ((std::basic_regex<char,std::regex_traits<char>>::__match_at_start_ecma<std::allocator<std::sub_match<char const*>>>(a1, (const char *)a3, (const char *)a3, (uint64_t *)this, v12, 0) & 1) != 0)
      {
        goto LABEL_28;
      }
    }
    result = 0;
    this->__end_ = this->__begin_;
    return result;
  }
  if ((std::basic_regex<char,std::regex_traits<char>>::__match_at_start_posix_nosubs<std::allocator<std::sub_match<char const*>>>(a1, (uint64_t)a2, (uint64_t)a3, (uint64_t *)this, v9, (v9 & 0x800) == 0) & 1) == 0)goto LABEL_13;
LABEL_28:
  if (this->__end_ == this->__begin_)
    begin = (std::vector<std::csub_match>::pointer)v11;
  else
    begin = this->__begin_;
  first = (std::sub_match<const char *> *)begin->first;
  this[2].__end_ = (std::vector<std::csub_match>::pointer)begin->first;
  LOBYTE(this[2].__end_cap_.__value_) = this[2].__begin_ != first;
  second = (std::sub_match<const char *> *)begin->second;
  this[3].__begin_ = second;
  LOBYTE(this[3].__end_cap_.__value_) = second != this[3].__end_;
  return 1;
}

void std::vector<std::sub_match<char const*>>::assign(std::vector<std::csub_match> *this, std::vector<std::csub_match>::size_type __n, std::vector<std::csub_match>::const_reference __u)
{
  std::sub_match<const char *> *value;
  std::sub_match<const char *> *begin;
  unint64_t v8;
  std::vector<std::csub_match>::size_type v9;
  unint64_t v10;
  uint64_t v11;
  std::sub_match<const char *> *v12;
  std::vector<std::csub_match>::size_type v13;
  std::sub_match<const char *> *v14;
  std::vector<std::csub_match>::pointer end;
  unint64_t v16;
  std::vector<std::csub_match>::size_type v17;
  std::vector<std::csub_match>::value_type *v18;
  std::sub_match<const char *> *v19;
  std::vector<std::csub_match>::size_type v20;
  std::pair<const char *, const char *> v21;

  value = this->__end_cap_.__value_;
  begin = this->__begin_;
  if (0xAAAAAAAAAAAAAAABLL * (((char *)value - (char *)begin) >> 3) < __n)
  {
    if (begin)
    {
      this->__end_ = begin;
      operator delete(begin);
      value = 0;
      this->__begin_ = 0;
      this->__end_ = 0;
      this->__end_cap_.__value_ = 0;
    }
    if (__n > 0xAAAAAAAAAAAAAAALL)
      goto LABEL_26;
    v8 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)value >> 3);
    v9 = 2 * v8;
    if (2 * v8 <= __n)
      v9 = __n;
    v10 = v8 >= 0x555555555555555 ? 0xAAAAAAAAAAAAAAALL : v9;
    if (v10 > 0xAAAAAAAAAAAAAAALL)
LABEL_26:
      abort();
    v11 = v10;
    v12 = (std::sub_match<const char *> *)operator new(24 * v10);
    this->__begin_ = v12;
    this->__end_ = v12;
    this->__end_cap_.__value_ = &v12[v11];
    v13 = 24 * __n;
    v14 = &v12[__n];
    do
    {
      v12->std::pair<const char *, const char *> = __u->std::pair<const char *, const char *>;
      *(_QWORD *)&v12->matched = *(_QWORD *)&__u->matched;
      ++v12;
      v13 -= 24;
    }
    while (v13);
    goto LABEL_25;
  }
  end = this->__end_;
  v16 = end - begin;
  if (v16 >= __n)
    v17 = __n;
  else
    v17 = end - begin;
  if (v17)
  {
    v18 = begin;
    do
    {
      *v18++ = *__u;
      --v17;
    }
    while (v17);
  }
  if (__n <= v16)
  {
    v14 = &begin[__n];
LABEL_25:
    this->__end_ = v14;
    return;
  }
  v19 = &end[__n - v16];
  v20 = 24 * __n - 24 * v16;
  do
  {
    v21 = __u->std::pair<const char *, const char *>;
    *(_QWORD *)&end->matched = *(_QWORD *)&__u->matched;
    end->std::pair<const char *, const char *> = v21;
    ++end;
    v20 -= 24;
  }
  while (v20);
  this->__end_ = v19;
}

uint64_t std::basic_regex<char,std::regex_traits<char>>::__match_at_start_ecma<std::allocator<std::sub_match<char const*>>>(uint64_t a1, const char *a2, const char *a3, uint64_t *a4, int a5, char a6)
{
  uint64_t v6;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  __int16 v19;
  unsigned int v20;
  char *v21;
  uint64_t v22;
  char *v23;
  char *v24;
  const char *v25;
  char *v26;
  void *v27;
  void *v28;
  uint64_t v29;
  __int128 v30;
  _BYTE *v31;
  _BYTE *v32;
  int64_t v33;
  char *v34;
  size_t v35;
  _BYTE *v36;
  _BYTE *v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  char *v41;
  __int128 v42;
  uint64_t v43;
  char *i;
  void *v45;
  void *v46;
  uint64_t result;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  _BYTE *v52;
  unsigned int v53;
  uint64_t v54;
  char v55;
  uint64_t *v57;
  const char *v58;
  _BYTE v61[56];
  void *__p[2];
  _QWORD v63[4];
  std::vector<std::csub_match>::value_type __x;
  char *v65;
  char *v66;
  unint64_t v67;

  v65 = 0;
  v66 = 0;
  v67 = 0;
  v6 = *(_QWORD *)(a1 + 40);
  if (!v6)
    return v6;
  __x.first = a3;
  __x.second = a3;
  __x.matched = 0;
  *(_DWORD *)v61 = 0;
  memset(&v61[8], 0, 48);
  *(_OWORD *)__p = 0u;
  memset(v63, 0, 21);
  v11 = std::vector<std::__state<char>>::__push_back_slow_path<std::__state<char>>((void **)&v65, (uint64_t)v61);
  v66 = v11;
  if (__p[0])
    operator delete(__p[0]);
  if (*(_QWORD *)&v61[32])
    operator delete(*(void **)&v61[32]);
  v12 = *((_QWORD *)v11 - 8);
  *((_DWORD *)v11 - 24) = 0;
  *((_QWORD *)v11 - 11) = a2;
  *((_QWORD *)v11 - 10) = a2;
  *((_QWORD *)v11 - 9) = a3;
  v13 = *(unsigned int *)(a1 + 28);
  v14 = 0xAAAAAAAAAAAAAAABLL * ((*((_QWORD *)v11 - 7) - v12) >> 3);
  if (v13 <= v14)
  {
    if (v13 < v14)
      *((_QWORD *)v11 - 7) = v12 + 24 * v13;
  }
  else
  {
    std::vector<std::sub_match<char const*>>::__append((std::vector<std::csub_match> *)(v11 - 64), v13 - v14, &__x);
  }
  v15 = *((_QWORD *)v11 - 5);
  v16 = *(unsigned int *)(a1 + 32);
  v17 = (*((_QWORD *)v11 - 4) - v15) >> 4;
  if (v16 <= v17)
  {
    if (v16 < v17)
      *((_QWORD *)v11 - 4) = v15 + 16 * v16;
  }
  else
  {
    std::vector<geo::Mercator2<double>>::__append((std::vector<std::pair<unsigned long, const char *>> *)(v11 - 40), v16 - v17);
  }
  v57 = a4;
  v58 = a3;
  v18 = ((_DWORD)a3 - (_DWORD)a2);
  *((_QWORD *)v11 - 2) = v6;
  v19 = a5;
  *((_DWORD *)v11 - 2) = a5;
  *(v11 - 4) = a6;
  v20 = 1;
  while (2)
  {
    if ((v20 & 0xFFF) != 0 || (int)(v20 >> 12) < (int)v18)
    {
      v23 = v11 - 16;
      v22 = *((_QWORD *)v11 - 2);
      v24 = v11 - 96;
      if (v22)
        (*(void (**)(uint64_t, char *))(*(_QWORD *)v22 + 16))(v22, v11 - 96);
      switch(*(_DWORD *)v24)
      {
        case 0xFFFFFC18:
          v25 = (const char *)*((_QWORD *)v11 - 10);
          if ((v19 & 0x20) != 0 && v25 == a2 || (v19 & 0x1000) != 0 && v25 != v58)
            goto LABEL_26;
          v48 = *v57;
          *(_QWORD *)v48 = a2;
          *(_QWORD *)(v48 + 8) = v25;
          *(_BYTE *)(v48 + 16) = 1;
          v49 = *((_QWORD *)v11 - 8);
          v50 = *((_QWORD *)v11 - 7) - v49;
          if (v50)
          {
            v51 = 0xAAAAAAAAAAAAAAABLL * (v50 >> 3);
            v52 = (_BYTE *)(v49 + 16);
            v53 = 1;
            do
            {
              v54 = v48 + 24 * v53;
              *(_OWORD *)v54 = *((_OWORD *)v52 - 1);
              v55 = *v52;
              v52 += 24;
              *(_BYTE *)(v54 + 16) = v55;
            }
            while (v51 > v53++);
          }
          v6 = 1;
          v21 = v65;
          if (!v65)
            return v6;
          goto LABEL_43;
        case 0xFFFFFC1D:
        case 0xFFFFFC1E:
        case 0xFFFFFC21:
          goto LABEL_16;
        case 0xFFFFFC1F:
LABEL_26:
          v26 = v66;
          v27 = (void *)*((_QWORD *)v66 - 5);
          if (v27)
          {
            *((_QWORD *)v66 - 4) = v27;
            operator delete(v27);
          }
          v28 = (void *)*((_QWORD *)v26 - 8);
          if (v28)
          {
            *((_QWORD *)v26 - 7) = v28;
            operator delete(v28);
          }
          v66 = v26 - 96;
          goto LABEL_16;
        case 0xFFFFFC20:
          v29 = v18;
          v30 = *((_OWORD *)v11 - 5);
          *(_OWORD *)v61 = *(_OWORD *)v24;
          *(_OWORD *)&v61[16] = v30;
          memset(&v61[32], 0, 24);
          v32 = (_BYTE *)*((_QWORD *)v11 - 8);
          v31 = (_BYTE *)*((_QWORD *)v11 - 7);
          v33 = v31 - v32;
          if (v31 != v32)
          {
            if (0xAAAAAAAAAAAAAAABLL * (v33 >> 3) >= 0xAAAAAAAAAAAAAABLL)
              abort();
            v34 = (char *)operator new(v33);
            *(_QWORD *)&v61[32] = v34;
            *(_QWORD *)&v61[40] = v34;
            *(_QWORD *)&v61[48] = &v34[8 * (v33 >> 3)];
            v35 = 24 * ((v33 - 24) / 0x18uLL) + 24;
            memcpy(v34, v32, v35);
            *(_QWORD *)&v61[40] = &v34[v35];
            v19 = a5;
          }
          __p[0] = 0;
          __p[1] = 0;
          v63[0] = 0;
          v37 = (_BYTE *)*((_QWORD *)v11 - 5);
          v36 = (_BYTE *)*((_QWORD *)v11 - 4);
          v38 = v36 - v37;
          if (v36 != v37)
          {
            if (v38 < 0)
              abort();
            v39 = (char *)operator new(v36 - v37);
            __p[0] = v39;
            __p[1] = v39;
            v63[0] = &v39[16 * (v38 >> 4)];
            memcpy(v39, v37, v38 & 0xFFFFFFFFFFFFFFF0);
            __p[1] = &v39[v38 & 0xFFFFFFFFFFFFFFF0];
          }
          v40 = *(_QWORD *)v23;
          *(_QWORD *)((char *)&v63[1] + 5) = *(_QWORD *)(v23 + 5);
          v63[1] = v40;
          (*(void (**)(_QWORD, uint64_t, char *))(**(_QWORD **)v23 + 24))(*(_QWORD *)v23, 1, v24);
          v18 = v29;
          (*(void (**)(_QWORD, _QWORD, _BYTE *))(*(_QWORD *)v63[1] + 24))(v63[1], 0, v61);
          v41 = v66;
          if ((unint64_t)v66 >= v67)
          {
            v66 = std::vector<std::__state<char>>::__push_back_slow_path<std::__state<char>>((void **)&v65, (uint64_t)v61);
            if (__p[0])
            {
              __p[1] = __p[0];
              operator delete(__p[0]);
            }
          }
          else
          {
            v42 = *(_OWORD *)&v61[16];
            *(_OWORD *)v66 = *(_OWORD *)v61;
            *((_OWORD *)v41 + 1) = v42;
            *((_QWORD *)v41 + 4) = 0;
            *((_QWORD *)v41 + 5) = 0;
            *((_QWORD *)v41 + 6) = 0;
            *((_QWORD *)v41 + 7) = 0;
            *((_OWORD *)v41 + 2) = *(_OWORD *)&v61[32];
            *((_QWORD *)v41 + 6) = *(_QWORD *)&v61[48];
            memset(&v61[32], 0, 24);
            *((_QWORD *)v41 + 8) = 0;
            *((_QWORD *)v41 + 9) = 0;
            *(_OWORD *)(v41 + 56) = *(_OWORD *)__p;
            *((_QWORD *)v41 + 9) = v63[0];
            __p[0] = 0;
            __p[1] = 0;
            v63[0] = 0;
            v43 = v63[1];
            *(_QWORD *)(v41 + 85) = *(_QWORD *)((char *)&v63[1] + 5);
            *((_QWORD *)v41 + 10) = v43;
            v66 = v41 + 96;
          }
          if (*(_QWORD *)&v61[32])
          {
            *(_QWORD *)&v61[40] = *(_QWORD *)&v61[32];
            operator delete(*(void **)&v61[32]);
          }
LABEL_16:
          v21 = v65;
          v11 = v66;
          ++v20;
          if (v65 != v66)
            continue;
          v6 = 0;
          if (v65)
          {
LABEL_43:
            for (i = v66; i != v21; i -= 96)
            {
              v45 = (void *)*((_QWORD *)i - 5);
              if (v45)
              {
                *((_QWORD *)i - 4) = v45;
                operator delete(v45);
              }
              v46 = (void *)*((_QWORD *)i - 8);
              if (v46)
              {
                *((_QWORD *)i - 7) = v46;
                operator delete(v46);
              }
            }
            operator delete(v21);
          }
          break;
        default:
          goto LABEL_57;
      }
      return v6;
    }
    break;
  }
LABEL_57:
  result = std::__throw_regex_error[abi:nn180100]<(std::regex_constants::error_type)12>();
  __break(1u);
  return result;
}

void sub_19F0C8BFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22)
{
  uint64_t v22;

  std::vector<std::__state<char>>::~vector[abi:nn180100]((void **)(v22 - 112));
  _Unwind_Resume(a1);
}

uint64_t std::__alternate<char>::__exec_split(uint64_t result, int a2, uint64_t a3)
{
  uint64_t v3;

  *(_DWORD *)a3 = -994;
  v3 = 8;
  if (a2)
    v3 = 16;
  *(_QWORD *)(a3 + 80) = *(_QWORD *)(result + v3);
  return result;
}

uint64_t std::__match_char<char>::__exec(uint64_t result, uint64_t a2)
{
  unsigned __int8 *v2;

  v2 = *(unsigned __int8 **)(a2 + 16);
  if (v2 == *(unsigned __int8 **)(a2 + 24) || *v2 != *(unsigned __int8 *)(result + 16))
  {
    *(_DWORD *)a2 = -993;
    *(_QWORD *)(a2 + 80) = 0;
  }
  else
  {
    *(_DWORD *)a2 = -995;
    *(_QWORD *)(a2 + 16) = v2 + 1;
    *(_QWORD *)(a2 + 80) = *(_QWORD *)(result + 8);
  }
  return result;
}

void std::__empty_state<char>::__exec(const std::__empty_state<char> *this, std::__empty_state<char>::__state *a2)
{
  a2->__do_ = -994;
  a2->__node_ = this->__first_;
}

void std::__alternate<char>::__exec(uint64_t a1, _DWORD *a2)
{
  *a2 = -992;
}

void std::vector<geo::Mercator2<double>>::__append(std::vector<std::pair<unsigned long, const char *>> *this, std::vector<std::pair<unsigned long, const char *>>::size_type __n)
{
  std::pair<unsigned long, const char *> *value;
  std::pair<unsigned long, const char *> *end;
  std::vector<std::pair<unsigned long, const char *>>::pointer begin;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  std::vector<std::pair<unsigned long, const char *>>::size_type v12;
  std::pair<unsigned long, const char *> *v13;
  size_t v14;
  std::pair<unsigned long, const char *> *v15;
  std::pair<unsigned long, const char *> *v16;

  end = this->__end_;
  value = this->__end_cap_.__value_;
  if (__n <= value - end)
  {
    if (__n)
    {
      v12 = 16 * __n;
      bzero(this->__end_, 16 * __n);
      end = (std::pair<unsigned long, const char *> *)((char *)end + v12);
    }
    this->__end_ = end;
  }
  else
  {
    begin = this->__begin_;
    v7 = end - this->__begin_;
    v8 = v7 + __n;
    if ((v7 + __n) >> 60)
      abort();
    v9 = (char *)value - (char *)begin;
    if (v9 >> 3 > v8)
      v8 = v9 >> 3;
    if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF0)
      v10 = 0xFFFFFFFFFFFFFFFLL;
    else
      v10 = v8;
    if (v10)
    {
      if (v10 >> 60)
        std::__throw_bad_array_new_length[abi:nn180100]();
      v11 = (char *)operator new(16 * v10);
    }
    else
    {
      v11 = 0;
    }
    v13 = (std::pair<unsigned long, const char *> *)&v11[16 * v7];
    v14 = __n;
    v15 = (std::pair<unsigned long, const char *> *)&v11[16 * v10];
    bzero(v13, v14 * 16);
    v16 = &v13[v14];
    if (end != begin)
    {
      do
      {
        v13[-1] = end[-1];
        --v13;
        --end;
      }
      while (end != begin);
      end = this->__begin_;
    }
    this->__begin_ = v13;
    this->__end_ = v16;
    this->__end_cap_.__value_ = v15;
    if (end)
      operator delete(end);
  }
}

uint64_t std::__loop<char>::__exec_split(uint64_t result, int a2, uint64_t a3)
{
  int v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  _BYTE *v14;

  *(_DWORD *)a3 = -994;
  if (*(unsigned __int8 *)(result + 52) == a2)
  {
    *(_QWORD *)(a3 + 80) = *(_QWORD *)(result + 16);
    return result;
  }
  *(_QWORD *)(a3 + 80) = *(_QWORD *)(result + 8);
  v3 = *(_DWORD *)(result + 44);
  *(_QWORD *)(*(_QWORD *)(a3 + 56) + 16 * *(unsigned int *)(result + 40) + 8) = *(_QWORD *)(a3 + 16);
  v4 = *(_DWORD *)(result + 48);
  if (v3 != v4)
  {
    v5 = (v4 - 1);
    v6 = (v3 - 1);
    v7 = *(_QWORD *)(a3 + 24);
    v8 = *(_QWORD *)(a3 + 32);
    v9 = v5 - v6;
    if ((unint64_t)(v5 - v6) < 2)
      goto LABEL_9;
    v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
    v11 = v8 + 24 * v6 + 24;
    v12 = v9 & 0xFFFFFFFFFFFFFFFELL;
    do
    {
      *(_QWORD *)(v11 - 24) = v7;
      *(_QWORD *)(v11 - 16) = v7;
      *(_QWORD *)v11 = v7;
      *(_QWORD *)(v11 + 8) = v7;
      *(_BYTE *)(v11 - 8) = 0;
      *(_BYTE *)(v11 + 16) = 0;
      v11 += 48;
      v12 -= 2;
    }
    while (v12);
    if (v9 != v10)
    {
      v6 += v10;
LABEL_9:
      v13 = v5 - v6;
      v14 = (_BYTE *)(v8 + 24 * v6 + 16);
      do
      {
        *((_QWORD *)v14 - 2) = v7;
        *((_QWORD *)v14 - 1) = v7;
        *v14 = 0;
        v14 += 24;
        --v13;
      }
      while (v13);
    }
  }
  return result;
}

uint64_t std::__loop<char>::__exec(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  _BOOL4 v8;
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  _BYTE *v23;
  int v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  _BYTE *v35;

  v2 = *(unsigned int *)(result + 40);
  v3 = *(_QWORD *)(a2 + 56);
  v4 = (unint64_t *)(v3 + 16 * v2);
  if (*(_DWORD *)a2 != -991)
  {
    *v4 = 0;
    if (!*(_QWORD *)(result + 32))
    {
      *(_DWORD *)a2 = -994;
      goto LABEL_40;
    }
    if (*(_QWORD *)(result + 24))
    {
      *(_DWORD *)a2 = -994;
      *(_QWORD *)(a2 + 80) = *(_QWORD *)(result + 8);
      *(_QWORD *)(v3 + 16 * v2 + 8) = *(_QWORD *)(a2 + 16);
      v24 = *(_DWORD *)(result + 44);
      v25 = *(_DWORD *)(result + 48);
      if (v24 == v25)
        return result;
      v26 = (v25 - 1);
      v27 = (v24 - 1);
      v28 = *(_QWORD *)(a2 + 24);
      v29 = *(_QWORD *)(a2 + 32);
      v30 = v26 - v27;
      if ((unint64_t)(v26 - v27) >= 2)
      {
        v31 = v30 & 0xFFFFFFFFFFFFFFFELL;
        v32 = v29 + 24 * v27 + 24;
        v33 = v30 & 0xFFFFFFFFFFFFFFFELL;
        do
        {
          *(_QWORD *)(v32 - 24) = v28;
          *(_QWORD *)(v32 - 16) = v28;
          *(_QWORD *)v32 = v28;
          *(_QWORD *)(v32 + 8) = v28;
          *(_BYTE *)(v32 - 8) = 0;
          *(_BYTE *)(v32 + 16) = 0;
          v32 += 48;
          v33 -= 2;
        }
        while (v33);
        if (v30 == v31)
          return result;
        v27 += v31;
      }
      v34 = v26 - v27;
      v35 = (_BYTE *)(v29 + 24 * v27 + 16);
      do
      {
        *((_QWORD *)v35 - 2) = v28;
        *((_QWORD *)v35 - 1) = v28;
        *v35 = 0;
        v35 += 24;
        --v34;
      }
      while (v34);
      return result;
    }
LABEL_38:
    *(_DWORD *)a2 = -992;
    return result;
  }
  v5 = *v4 + 1;
  *v4 = v5;
  v6 = *(_QWORD *)(result + 24);
  v7 = *(_QWORD *)(result + 32);
  v8 = v5 < v7;
  if (v5 < v7 && v5 >= v6)
    v8 = v5 < v7 && *(_QWORD *)(v3 + 16 * v2 + 8) != *(_QWORD *)(a2 + 16);
  if (v8 && v5 >= v6)
    goto LABEL_38;
  *(_DWORD *)a2 = -994;
  if (!v8)
  {
LABEL_40:
    *(_QWORD *)(a2 + 80) = *(_QWORD *)(result + 16);
    return result;
  }
  *(_QWORD *)(a2 + 80) = *(_QWORD *)(result + 8);
  *(_QWORD *)(v3 + 16 * v2 + 8) = *(_QWORD *)(a2 + 16);
  v12 = *(_DWORD *)(result + 44);
  v13 = *(_DWORD *)(result + 48);
  if (v12 == v13)
    return result;
  v14 = (v13 - 1);
  v15 = (v12 - 1);
  v16 = *(_QWORD *)(a2 + 24);
  v17 = *(_QWORD *)(a2 + 32);
  v18 = v14 - v15;
  if ((unint64_t)(v14 - v15) < 2)
    goto LABEL_24;
  v19 = v18 & 0xFFFFFFFFFFFFFFFELL;
  v20 = v17 + 24 * v15 + 24;
  v21 = v18 & 0xFFFFFFFFFFFFFFFELL;
  do
  {
    *(_QWORD *)(v20 - 24) = v16;
    *(_QWORD *)(v20 - 16) = v16;
    *(_QWORD *)v20 = v16;
    *(_QWORD *)(v20 + 8) = v16;
    *(_BYTE *)(v20 - 8) = 0;
    *(_BYTE *)(v20 + 16) = 0;
    v20 += 48;
    v21 -= 2;
  }
  while (v21);
  if (v18 != v19)
  {
    v15 += v19;
LABEL_24:
    v22 = v14 - v15;
    v23 = (_BYTE *)(v17 + 24 * v15 + 16);
    do
    {
      *((_QWORD *)v23 - 2) = v16;
      *((_QWORD *)v23 - 1) = v16;
      *v23 = 0;
      v23 += 24;
      --v22;
    }
    while (v22);
  }
  return result;
}

void std::__bracket_expression<char,std::regex_traits<char>>::__exec(const std::__bracket_expression<char, std::regex_traits<char>> *this, std::__bracket_expression<char, std::regex_traits<char>>::__state *a2)
{
  std::__bracket_expression<char, std::regex_traits<char>>::__state *v2;
  char *current;
  char *last;
  char v6;
  char v7;
  std::string::size_type size;
  int v9;
  uint64_t v10;
  _BOOL4 negate;
  std::string::size_type v12;
  std::string *p_s;
  std::vector<std::pair<char, char>>::pointer begin;
  uint64_t v15;
  uint64_t v16;
  char *p_second;
  std::vector<std::pair<std::string, std::string>>::pointer v19;
  char v20;
  int64_t v21;
  uint64_t v22;
  unint64_t v23;
  std::string *v24;
  char v25;
  std::string::size_type v26;
  uint64_t v27;
  unsigned __int8 *v28;
  BOOL v29;
  std::string::size_type v30;
  unsigned __int8 v31;
  std::vector<char>::pointer v32;
  unint64_t v33;
  int v34;
  std::regex_traits<char>::char_class_type v35;
  int v36;
  std::vector<char>::pointer end;
  std::vector<char>::pointer v38;
  char *v39;
  std::vector<std::pair<std::string, std::string>>::pointer v40;
  std::vector<std::pair<std::string, std::string>>::pointer v41;
  unsigned int v42;
  int64_t v43;
  uint64_t v44;
  unint64_t v45;
  std::string *v46;
  std::string::size_type v47;
  uint64_t v48;
  unsigned __int8 *v49;
  BOOL v50;
  int v51;
  char *v52;
  size_t v53;
  size_t v54;
  int v55;
  int v56;
  char *v57;
  size_t v58;
  size_t v59;
  int v60;
  int v61;
  char *v62;
  size_t v63;
  size_t v64;
  int v65;
  int v66;
  char *v67;
  size_t v68;
  size_t v69;
  int v70;
  int v71;
  int v72;
  std::vector<std::string>::pointer v73;
  uint64_t v74;
  int64_t v75;
  uint64_t v76;
  unint64_t v77;
  __int128 v78;
  std::string::size_type v79;
  uint64_t v80;
  BOOL v81;
  std::string *v82;
  std::string::size_type v83;
  int v84;
  std::string *v85;
  std::string *v86;
  uint64_t v87;
  std::regex_traits<char>::char_class_type v88;
  int v89;
  std::string *v90;
  size_t v91;
  std::__bracket_expression<char, std::regex_traits<char>>::__state *v92;
  std::vector<std::string>::pointer v93;
  int v94;
  int64_t v95;
  unint64_t v96;
  size_t v97;
  std::string::size_type v98;
  uint64_t v99;
  uint64_t v100;
  BOOL v101;
  std::string *v102;
  std::string::size_type v103;
  int v104;
  std::string *v105;
  uint64_t v106;
  uint64_t v107;
  const void *v108;
  uint64_t v109;
  std::string::size_type v110;
  int v111;
  std::vector<std::string>::pointer v112;
  std::regex_traits<char>::char_class_type mask;
  const std::ctype_base::mask *tab;
  std::ctype_base::mask v115;
  std::regex_traits<char>::char_class_type neg_mask;
  int v117;
  std::__node<char> *first;
  int v119;
  std::string::size_type v120;
  unint64_t v121;
  uint64_t v122;
  uint64_t v123;
  std::string::value_type *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  char v128;
  uint64_t v129;
  uint64_t v130;
  std::__bracket_expression<char, std::regex_traits<char>>::__state *v131;
  std::__bracket_expression<char, std::regex_traits<char>>::__state *v132;
  std::__bracket_expression<char, std::regex_traits<char>>::__state *v133;
  int v134;
  _BOOL4 v135;
  int v136;
  int v137;
  std::string __p;
  __int16 __src;
  std::string v140;
  std::string __s;

  v2 = a2;
  current = a2->__current_;
  last = a2->__last_;
  if (current == last)
  {
    v10 = 0;
    negate = this->__negate_;
    goto LABEL_263;
  }
  if (!this->__might_have_digraph_ || current + 1 == last)
    goto LABEL_42;
  v6 = *current;
  LOBYTE(__src) = *current;
  v7 = current[1];
  HIBYTE(__src) = v7;
  if (this->__icase_)
  {
    LOBYTE(__src) = ((uint64_t (*)(const std::ctype<char> *, _QWORD))this->__traits_.__ct_->do_tolower)(this->__traits_.__ct_, v6);
    HIBYTE(__src) = ((uint64_t (*)(const std::ctype<char> *, _QWORD))this->__traits_.__ct_->do_tolower)(this->__traits_.__ct_, v7);
  }
  *((_BYTE *)&__s.__r_.__value_.__s + 23) = 2;
  LOWORD(__s.__r_.__value_.__l.__data_) = __src;
  __s.__r_.__value_.__s.__data_[2] = 0;
  std::__get_collation_name(&v140, (const char *)&__s);
  __p = v140;
  size = HIBYTE(v140.__r_.__value_.__r.__words[2]);
  v9 = SHIBYTE(v140.__r_.__value_.__r.__words[2]);
  if ((v140.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = v140.__r_.__value_.__l.__size_;
  if (size)
    goto LABEL_9;
  if ((SHIBYTE(__s.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    v12 = HIBYTE(__s.__r_.__value_.__r.__words[2]);
    if (HIBYTE(__s.__r_.__value_.__r.__words[2]) >= 3u)
      goto LABEL_15;
    p_s = &__s;
    goto LABEL_166;
  }
  v12 = __s.__r_.__value_.__l.__size_;
  if (__s.__r_.__value_.__l.__size_ < 3)
  {
    p_s = (std::string *)__s.__r_.__value_.__r.__words[0];
LABEL_166:
    (*(void (**)(std::string *__return_ptr, const std::collate<char> *, std::string *, char *))(*(_QWORD *)this->__traits_.__col_ + 32))(&v140, this->__traits_.__col_, p_s, (char *)p_s + v12);
    if (v9 < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    __p = v140;
    if (SHIBYTE(v140.__r_.__value_.__r.__words[2]) < 0)
    {
      if (__p.__r_.__value_.__l.__size_ == 1 || __p.__r_.__value_.__l.__size_ == 12)
      {
        if ((__s.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v90 = &__s;
        else
          v90 = (std::string *)__s.__r_.__value_.__r.__words[0];
        if ((__s.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v91 = HIBYTE(__s.__r_.__value_.__r.__words[2]);
        else
          v91 = __s.__r_.__value_.__l.__size_;
        std::string::__assign_no_alias<false>((void **)&__p.__r_.__value_.__l.__data_, v90, v91);
      }
      else
      {
        *__p.__r_.__value_.__l.__data_ = 0;
        __p.__r_.__value_.__l.__size_ = 0;
      }
    }
    else if (HIBYTE(v140.__r_.__value_.__r.__words[2]) == 1 || HIBYTE(v140.__r_.__value_.__r.__words[2]) == 12)
    {
      if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
        std::string::__assign_no_alias<true>(&__p, __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
      else
        __p = __s;
    }
    else
    {
      __p.__r_.__value_.__s.__data_[0] = 0;
      *((_BYTE *)&__p.__r_.__value_.__s + 23) = 0;
    }
  }
LABEL_9:
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__s.__r_.__value_.__l.__data_);
LABEL_15:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    v30 = __p.__r_.__value_.__l.__size_;
    operator delete(__p.__r_.__value_.__l.__data_);
    if (v30)
      goto LABEL_17;
LABEL_42:
    negate = 0;
    v10 = 1;
    goto LABEL_43;
  }
  if (!*((_BYTE *)&__p.__r_.__value_.__s + 23))
    goto LABEL_42;
LABEL_17:
  begin = this->__digraphs_.__begin_;
  v15 = (char *)this->__digraphs_.__end_ - (char *)begin;
  if (v15)
  {
    v16 = v15 >> 1;
    if ((unint64_t)(v15 >> 1) <= 1)
      v16 = 1;
    p_second = &begin->second;
    while (__src != *(p_second - 1) || HIBYTE(__src) != *p_second)
    {
      p_second += 2;
      if (!--v16)
        goto LABEL_26;
    }
    goto LABEL_260;
  }
LABEL_26:
  if (!this->__collate_ || this->__ranges_.__begin_ == this->__ranges_.__end_)
  {
    negate = 0;
    goto LABEL_199;
  }
  *((_BYTE *)&__s.__r_.__value_.__s + 23) = 2;
  LOWORD(__s.__r_.__value_.__l.__data_) = __src;
  __s.__r_.__value_.__s.__data_[2] = 0;
  (*(void (**)(std::string *__return_ptr, const std::collate<char> *, std::string *, std::string::value_type *))(*(_QWORD *)this->__traits_.__col_ + 32))(&v140, this->__traits_.__col_, &__s, &__s.__r_.__value_.__s.__data_[2]);
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__s.__r_.__value_.__l.__data_);
  v19 = this->__ranges_.__begin_;
  v20 = HIBYTE(v140.__r_.__value_.__r.__words[2]);
  v21 = (char *)this->__ranges_.__end_ - (char *)v19;
  if (!v21)
  {
    v29 = 0;
    v72 = 0;
    v71 = 0;
    goto LABEL_196;
  }
  v131 = v2;
  v22 = 0;
  v23 = v21 / 48;
  if ((v140.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v24 = &v140;
  else
    v24 = (std::string *)v140.__r_.__value_.__r.__words[0];
  v25 = HIBYTE(v140.__r_.__value_.__r.__words[2]);
  if ((v140.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v26 = HIBYTE(v140.__r_.__value_.__r.__words[2]);
  else
    v26 = v140.__r_.__value_.__l.__size_;
  if (v23 <= 1)
    v27 = 1;
  else
    v27 = v21 / 48;
  v28 = (unsigned __int8 *)&v19->second.__r_.__value_.__r.__words[2] + 7;
  v29 = 1;
  do
  {
    v61 = (char)*(v28 - 24);
    if (v61 >= 0)
      v62 = (char *)(v28 - 47);
    else
      v62 = *(char **)(v28 - 47);
    if (v61 >= 0)
      v63 = *(v28 - 24);
    else
      v63 = *(_QWORD *)(v28 - 39);
    if (v26 >= v63)
      v64 = v63;
    else
      v64 = v26;
    v65 = memcmp(v62, v24, v64);
    if (v65)
    {
      if ((v65 & 0x80000000) == 0)
        goto LABEL_104;
    }
    else if (v63 > v26)
    {
      goto LABEL_104;
    }
    v66 = (char)*v28;
    if (v66 >= 0)
      v67 = (char *)(v28 - 23);
    else
      v67 = *(char **)(v28 - 23);
    if (v66 >= 0)
      v68 = *v28;
    else
      v68 = *(_QWORD *)(v28 - 15);
    if (v68 >= v26)
      v69 = v26;
    else
      v69 = v68;
    v70 = memcmp(v24, v67, v69);
    if (v70)
    {
      if (v70 < 0)
      {
LABEL_129:
        v71 = 1;
        v72 = 5;
        goto LABEL_176;
      }
    }
    else if (v26 <= v68)
    {
      goto LABEL_129;
    }
LABEL_104:
    v29 = ++v22 < v23;
    v28 += 48;
  }
  while (v27 != v22);
  v72 = 0;
  v71 = 0;
LABEL_176:
  v2 = v131;
  v20 = v25;
LABEL_196:
  if (v20 < 0)
    operator delete(v140.__r_.__value_.__l.__data_);
  negate = v71;
  if (v29)
    goto LABEL_240;
LABEL_199:
  if (this->__equivalences_.__begin_ == this->__equivalences_.__end_)
    goto LABEL_242;
  v137 = negate;
  v92 = v2;
  std::regex_traits<char>::__transform_primary<char *>((uint64_t)&__s, (uint64_t)&this->__traits_, &__src, &v140);
  v93 = this->__equivalences_.__begin_;
  v94 = SHIBYTE(__s.__r_.__value_.__r.__words[2]);
  v95 = (char *)this->__equivalences_.__end_ - (char *)v93;
  if (!v95)
    goto LABEL_220;
  v96 = v95 / 24;
  v97 = __s.__r_.__value_.__l.__size_;
  if ((__s.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v98 = HIBYTE(__s.__r_.__value_.__r.__words[2]);
  else
    v98 = __s.__r_.__value_.__l.__size_;
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
  {
    v134 = SHIBYTE(__s.__r_.__value_.__r.__words[2]);
    v107 = 0;
    v108 = (const void *)__s.__r_.__value_.__r.__words[0];
    if (v96 <= 1)
      v109 = 1;
    else
      v109 = v95 / 24;
    v101 = 1;
    do
    {
      v110 = HIBYTE(v93->__r_.__value_.__r.__words[2]);
      v111 = (char)v110;
      if ((v110 & 0x80u) != 0)
        v110 = v93->__r_.__value_.__l.__size_;
      if (v98 == v110)
      {
        v112 = v111 >= 0 ? v93 : (std::vector<std::string>::pointer)v93->__r_.__value_.__r.__words[0];
        if (!memcmp(v108, v112, v97))
        {
          v137 = 1;
          v72 = 5;
          goto LABEL_236;
        }
      }
      v101 = ++v107 < v96;
      ++v93;
    }
    while (v109 != v107);
    v72 = 0;
LABEL_236:
    v2 = v92;
    v94 = v134;
    goto LABEL_237;
  }
  if (!*((_BYTE *)&__s.__r_.__value_.__s + 23))
  {
    v120 = HIBYTE(v93->__r_.__value_.__r.__words[2]);
    if ((v120 & 0x80u) != 0)
      v120 = v93->__r_.__value_.__l.__size_;
    if (v120 != HIBYTE(__s.__r_.__value_.__r.__words[2]))
    {
      v121 = 0;
      if (v96 <= 1)
        v122 = 1;
      else
        v122 = v96;
      v123 = v122 - 1;
      v124 = &v93[1].__r_.__value_.__s.__data_[8];
      v2 = v92;
      while (v123 != v121)
      {
        ++v121;
        v125 = v124[15];
        v127 = *(_QWORD *)v124;
        v124 += 24;
        v126 = v127;
        if ((v125 & 0x80u) != 0)
          v125 = v126;
        if (v98 == v125)
        {
          v101 = v121 < v96;
          v137 = 1;
          v72 = 5;
          goto LABEL_237;
        }
      }
      v101 = 0;
      v72 = 0;
      goto LABEL_237;
    }
    v2 = v92;
    negate = 1;
LABEL_262:
    v10 = 2;
    goto LABEL_263;
  }
  v99 = 0;
  v100 = v96 <= 1 ? 1 : v95 / 24;
  v101 = 1;
  do
  {
    v102 = &v93[v99];
    v103 = HIBYTE(v102->__r_.__value_.__r.__words[2]);
    v104 = (char)v103;
    if ((v103 & 0x80u) != 0)
      v103 = v102->__r_.__value_.__l.__size_;
    if (v98 == v103)
    {
      if (v104 < 0)
        v102 = (std::string *)v102->__r_.__value_.__r.__words[0];
      v105 = &__s;
      v106 = HIBYTE(__s.__r_.__value_.__r.__words[2]);
      while (v105->__r_.__value_.__s.__data_[0] == v102->__r_.__value_.__s.__data_[0])
      {
        v105 = (std::string *)((char *)v105 + 1);
        v102 = (std::string *)((char *)v102 + 1);
        if (!--v106)
        {
          v137 = 1;
          v72 = 5;
          v2 = v92;
          goto LABEL_237;
        }
      }
    }
    v101 = ++v99 < v96;
  }
  while (v99 != v100);
LABEL_220:
  v101 = 0;
  v72 = 0;
  v2 = v92;
LABEL_237:
  if (v94 < 0)
    operator delete(__s.__r_.__value_.__l.__data_);
  negate = v137;
  if (!v101)
  {
LABEL_242:
    if ((char)__src < 0)
    {
      neg_mask = this->__neg_mask_;
    }
    else
    {
      mask = this->__mask_;
      tab = this->__traits_.__ct_->__tab_;
      v115 = tab[__src];
      if (((v115 & mask) != 0 || __src == 95 && (mask & 0x80) != 0)
        && (SHIBYTE(__src) & 0x80000000) == 0
        && ((tab[HIBYTE(__src)] & mask) != 0 || (mask & 0x80) != 0 && HIBYTE(__src) == 95))
      {
        goto LABEL_260;
      }
      neg_mask = this->__neg_mask_;
      if ((v115 & neg_mask) != 0 || __src == 95 && (neg_mask & 0x80) != 0)
      {
LABEL_259:
        v117 = negate;
LABEL_261:
        negate = v117;
        goto LABEL_262;
      }
    }
    if ((SHIBYTE(__src) & 0x80000000) == 0)
    {
      if ((this->__traits_.__ct_->__tab_[HIBYTE(__src)] & neg_mask) == 0)
      {
        v117 = 1;
        if (HIBYTE(__src) != 95 || (neg_mask & 0x80) == 0)
          goto LABEL_261;
      }
      goto LABEL_259;
    }
LABEL_260:
    v117 = 1;
    goto LABEL_261;
  }
LABEL_240:
  if (v72)
    goto LABEL_262;
  v10 = 2;
LABEL_43:
  v31 = *v2->__current_;
  __p.__r_.__value_.__s.__data_[0] = v31;
  if (this->__icase_)
  {
    v31 = ((uint64_t (*)(const std::ctype<char> *, _QWORD))this->__traits_.__ct_->do_tolower)(this->__traits_.__ct_, (char)v31);
    __p.__r_.__value_.__s.__data_[0] = v31;
  }
  v32 = this->__chars_.__begin_;
  v33 = this->__chars_.__end_ - v32;
  if (v33)
  {
    if (v33 <= 1)
      v33 = 1;
    while (1)
    {
      v34 = *v32++;
      if (v34 == v31)
        break;
      if (!--v33)
        goto LABEL_50;
    }
LABEL_185:
    negate = 1;
    goto LABEL_263;
  }
LABEL_50:
  v35 = this->__neg_mask_;
  if (v35 || this->__neg_chars_.__begin_ != this->__neg_chars_.__end_)
  {
    if ((v31 & 0x80) != 0 || (this->__traits_.__ct_->__tab_[v31] & v35) == 0)
      v36 = (v31 == 95) & (v35 >> 7);
    else
      LOBYTE(v36) = 1;
    end = this->__neg_chars_.__end_;
    v38 = (std::vector<char>::pointer)memchr(this->__neg_chars_.__begin_, (char)v31, end - this->__neg_chars_.__begin_);
    v39 = v38 ? v38 : end;
    if ((v36 & 1) == 0 && v39 == end)
      goto LABEL_185;
  }
  v40 = this->__ranges_.__begin_;
  v41 = this->__ranges_.__end_;
  if (v40 == v41)
    goto LABEL_135;
  if (!this->__collate_)
  {
    v42 = 1;
    *((_BYTE *)&v140.__r_.__value_.__s + 23) = 1;
    LOWORD(v140.__r_.__value_.__l.__data_) = v31;
    v43 = (char *)v41 - (char *)v40;
    if (v43)
      goto LABEL_66;
LABEL_162:
    v50 = 0;
    if ((v42 & 0x80) != 0)
      goto LABEL_133;
    goto LABEL_134;
  }
  *((_BYTE *)&__s.__r_.__value_.__s + 23) = 1;
  LOWORD(__s.__r_.__value_.__l.__data_) = v31;
  (*(void (**)(std::string *__return_ptr, const std::collate<char> *, std::string *, std::string::value_type *))(*(_QWORD *)this->__traits_.__col_ + 32))(&v140, this->__traits_.__col_, &__s, &__s.__r_.__value_.__s.__data_[1]);
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__s.__r_.__value_.__l.__data_);
  v40 = this->__ranges_.__begin_;
  v42 = HIBYTE(v140.__r_.__value_.__r.__words[2]);
  v43 = (char *)this->__ranges_.__end_ - (char *)v40;
  if (!v43)
    goto LABEL_162;
LABEL_66:
  v129 = v10;
  v132 = v2;
  v135 = negate;
  v44 = 0;
  v45 = v43 / 48;
  v128 = v42;
  if ((v42 & 0x80u) == 0)
    v46 = &v140;
  else
    v46 = (std::string *)v140.__r_.__value_.__r.__words[0];
  if ((v42 & 0x80u) == 0)
    v47 = v42;
  else
    v47 = v140.__r_.__value_.__l.__size_;
  if (v45 <= 1)
    v48 = 1;
  else
    v48 = v43 / 48;
  v49 = (unsigned __int8 *)&v40->second.__r_.__value_.__r.__words[2] + 7;
  v50 = 1;
  while (2)
  {
    v51 = (char)*(v49 - 24);
    if (v51 >= 0)
      v52 = (char *)(v49 - 47);
    else
      v52 = *(char **)(v49 - 47);
    if (v51 >= 0)
      v53 = *(v49 - 24);
    else
      v53 = *(_QWORD *)(v49 - 39);
    if (v47 >= v53)
      v54 = v53;
    else
      v54 = v47;
    v55 = memcmp(v52, v46, v54);
    if (v55)
    {
      if (v55 < 0)
        goto LABEL_91;
    }
    else if (v53 <= v47)
    {
LABEL_91:
      v56 = (char)*v49;
      if (v56 >= 0)
        v57 = (char *)(v49 - 23);
      else
        v57 = *(char **)(v49 - 23);
      if (v56 >= 0)
        v58 = *v49;
      else
        v58 = *(_QWORD *)(v49 - 15);
      if (v58 >= v47)
        v59 = v47;
      else
        v59 = v58;
      v60 = memcmp(v46, v57, v59);
      if (v60)
      {
        if (v60 < 0)
        {
LABEL_102:
          negate = 1;
          v2 = v132;
          goto LABEL_132;
        }
      }
      else if (v47 <= v58)
      {
        goto LABEL_102;
      }
    }
    v50 = ++v44 < v45;
    v49 += 48;
    if (v48 != v44)
      continue;
    break;
  }
  v2 = v132;
  negate = v135;
LABEL_132:
  v10 = v129;
  if (v128 < 0)
LABEL_133:
    operator delete(v140.__r_.__value_.__l.__data_);
LABEL_134:
  if (v50)
    goto LABEL_263;
LABEL_135:
  if (this->__equivalences_.__begin_ == this->__equivalences_.__end_)
  {
LABEL_180:
    if ((v31 & 0x80) != 0)
      goto LABEL_263;
    v88 = this->__mask_;
    if ((this->__traits_.__ct_->__tab_[v31] & v88) == 0)
    {
      v89 = (v88 >> 7) & 1;
      if (v31 != 95)
        v89 = 0;
      if (v89 != 1)
        goto LABEL_263;
    }
    goto LABEL_185;
  }
  std::regex_traits<char>::__transform_primary<char *>((uint64_t)&__s, (uint64_t)&this->__traits_, &__p, &__p.__r_.__value_.__s.__data_[1]);
  v73 = this->__equivalences_.__begin_;
  v74 = HIBYTE(__s.__r_.__value_.__r.__words[2]);
  v75 = (char *)this->__equivalences_.__end_ - (char *)v73;
  if (!v75)
  {
    if ((*((_BYTE *)&__s.__r_.__value_.__s + 23) & 0x80) != 0)
      operator delete(__s.__r_.__value_.__l.__data_);
LABEL_179:
    v31 = __p.__r_.__value_.__s.__data_[0];
    goto LABEL_180;
  }
  v130 = v10;
  v133 = v2;
  v136 = negate;
  v76 = 0;
  v77 = v75 / 24;
  v78 = *(_OWORD *)&__s.__r_.__value_.__l.__data_;
  if ((__s.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v79 = HIBYTE(__s.__r_.__value_.__r.__words[2]);
  else
    v79 = __s.__r_.__value_.__l.__size_;
  if (v77 <= 1)
    v80 = 1;
  else
    v80 = v75 / 24;
  v81 = 1;
  while (2)
  {
    v82 = &v73[v76];
    v83 = HIBYTE(v82->__r_.__value_.__r.__words[2]);
    v84 = (char)v83;
    if ((v83 & 0x80u) != 0)
      v83 = v82->__r_.__value_.__l.__size_;
    if (v79 != v83)
    {
LABEL_145:
      v81 = ++v76 < v77;
      if (v76 != v80)
        continue;
LABEL_158:
      v10 = v130;
      v2 = v133;
      if ((v74 & 0x80) == 0)
      {
        negate = v136;
        if (!v81)
          goto LABEL_179;
        goto LABEL_263;
      }
      negate = v136;
      goto LABEL_178;
    }
    break;
  }
  if (v84 >= 0)
    v85 = &v73[v76];
  else
    v85 = (std::string *)v82->__r_.__value_.__r.__words[0];
  if ((v74 & 0x80) != 0)
  {
    if (memcmp((const void *)v78, v85, *((size_t *)&v78 + 1)))
      goto LABEL_145;
    v10 = v130;
    v2 = v133;
    negate = 1;
LABEL_178:
    operator delete(__s.__r_.__value_.__l.__data_);
    if (v81)
      goto LABEL_263;
    goto LABEL_179;
  }
  if ((_DWORD)v74)
  {
    v86 = &__s;
    v87 = v74;
    while (v86->__r_.__value_.__s.__data_[0] == v85->__r_.__value_.__s.__data_[0])
    {
      v86 = (std::string *)((char *)v86 + 1);
      v85 = (std::string *)((char *)v85 + 1);
      if (!--v87)
      {
        v136 = 1;
        goto LABEL_158;
      }
    }
    goto LABEL_145;
  }
  v10 = v130;
  v2 = v133;
  negate = 1;
  if (!v81)
    goto LABEL_179;
LABEL_263:
  if (negate == this->__negate_)
  {
    first = 0;
    v119 = -993;
  }
  else
  {
    v2->__current_ += v10;
    first = this->__first_;
    v119 = -995;
  }
  v2->__do_ = v119;
  v2->__node_ = first;
}

void sub_19F0C9C04(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if ((a25 & 0x80000000) == 0)
    _Unwind_Resume(exception_object);
  operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t std::__empty_non_own_state<char>::__exec(uint64_t result, uint64_t a2)
{
  *(_DWORD *)a2 = -994;
  *(_QWORD *)(a2 + 80) = *(_QWORD *)(result + 8);
  return result;
}

uint64_t std::__repeat_one_loop<char>::__exec(uint64_t result, uint64_t a2)
{
  *(_DWORD *)a2 = -991;
  *(_QWORD *)(a2 + 80) = *(_QWORD *)(result + 8);
  return result;
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_ecma_exp<char const*>(std::basic_regex<char> *a1, char *a2, char *a3)
{
  std::__owns_one_state<char> *end;
  char *v7;
  char *v8;
  std::__owns_one_state<char> *v9;
  unsigned int marked_count;
  char *v11;
  BOOL v12;
  std::__node<char> *v13;
  std::__owns_one_state<char> *v14;
  std::__node<char> *first;
  std::__node<char> *v16;
  std::__node<char> *v17;
  std::__node<char> *v18;
  std::__node<char> *v19;
  std::__node<char> *v20;
  std::__node<char> *v21;
  std::__owns_one_state<char> *v22;
  char *v23;
  char *v24;
  std::__owns_one_state<char> *v25;
  unsigned int v26;
  char *v27;
  BOOL v28;
  std::__node<char> *v29;
  std::__owns_one_state<char> *v30;
  std::__node<char> *v31;

  end = a1->__end_;
  v7 = a2;
  while (1)
  {
    v8 = v7;
    v7 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_assertion<char const*>((uint64_t)a1, v7, a3);
    if (v7 == v8)
      break;
LABEL_2:
    if (v7 == v8)
      goto LABEL_6;
  }
  v9 = a1->__end_;
  marked_count = a1->__marked_count_;
  v11 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_atom<char const*>(a1);
  if (v11 != v8)
  {
    v7 = std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_dupl_symbol<char const*>(a1, v11, a3, v9, marked_count + 1, a1->__marked_count_ + 1, v12);
    goto LABEL_2;
  }
LABEL_6:
  if (v8 == a2)
  {
    v13 = (std::__node<char> *)operator new();
    v14 = a1->__end_;
    first = v14->__first_;
    v13[1].__vftable = (std::__node<char>_vtbl *)first;
    v14->__first_ = v13;
    a1->__end_ = (std::__owns_one_state<char> *)a1->__end_->__first_;
  }
  if (v8 == a3)
    return a3;
  while (2)
  {
    if (*v8 != 124)
      return v8;
    v22 = a1->__end_;
    v23 = v8 + 1;
    v24 = v8 + 1;
    while (2)
    {
      v8 = v24;
      v24 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_assertion<char const*>((uint64_t)a1, v24, a3);
      if (v24 != v8)
      {
LABEL_14:
        if (v24 == v8)
          goto LABEL_17;
        continue;
      }
      break;
    }
    v25 = a1->__end_;
    v26 = a1->__marked_count_;
    v27 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_atom<char const*>(a1);
    if (v27 != v8)
    {
      v24 = std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_dupl_symbol<char const*>(a1, v27, a3, v25, v26 + 1, a1->__marked_count_ + 1, v28);
      goto LABEL_14;
    }
LABEL_17:
    if (v8 == v23)
    {
      v29 = (std::__node<char> *)operator new();
      v30 = a1->__end_;
      v31 = v30->__first_;
      v29[1].__vftable = (std::__node<char>_vtbl *)v31;
      v30->__first_ = v29;
      a1->__end_ = (std::__owns_one_state<char> *)a1->__end_->__first_;
    }
    v16 = (std::__node<char> *)operator new();
    v17 = v22->__first_;
    v16[1].__vftable = (std::__node<char>_vtbl *)end->__first_;
    v16[2].__vftable = (std::__node<char>_vtbl *)v17;
    v16->__vftable = (std::__node<char>_vtbl *)&off_1E42DA640;
    end->__first_ = v16;
    v22->__first_ = 0;
    v18 = (std::__node<char> *)operator new();
    v19 = a1->__end_->__first_;
    v18[1].__vftable = (std::__node<char>_vtbl *)v19;
    v22->__first_ = v18;
    a1->__end_->__first_ = 0;
    v20 = (std::__node<char> *)operator new();
    v21 = v22->__first_;
    v20->__vftable = (std::__node<char>_vtbl *)&unk_1E42E8EF8;
    v20[1].__vftable = (std::__node<char>_vtbl *)v21;
    a1->__end_->__first_ = v20;
    a1->__end_ = (std::__owns_one_state<char> *)v22->__first_;
    if (v8 != a3)
      continue;
    return a3;
  }
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_dupl_symbol<char const*>(std::basic_regex<char> *this, char *a2, char *a3, std::__owns_one_state<char> *__s, size_t __mexp_begin, size_t __mexp_end, BOOL a7)
{
  int v7;
  int v8;
  unsigned __int32 v11;
  int v12;
  char *v13;
  _QWORD *v14;
  std::__owns_one_state<char> *v15;
  std::__node<char> *v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int loop_count;
  __int128 v20;
  char *v21;
  int v22;
  int v23;
  char *v24;
  int v25;
  int v26;
  size_t v27;
  size_t v28;
  BOOL v29;
  _QWORD *v30;
  std::__owns_one_state<char> *end;
  std::__node<char> *first;
  BOOL v33;
  _QWORD *v34;
  std::__owns_one_state<char> *v35;
  std::__node<char> *v36;
  _QWORD *v37;
  std::__owns_one_state<char> *v38;
  std::__node<char> *v39;
  uint64_t v40;
  unsigned int v41;
  __int128 v42;
  _QWORD *v43;
  std::__owns_one_state<char> *v44;
  std::__node<char> *v45;
  _QWORD *v46;
  std::__owns_one_state<char> *v47;
  std::__node<char> *v48;
  std::__node<char> *v49;
  char *v51;
  int v52;
  uint64_t v53;
  _QWORD *v54;
  std::__owns_one_state<char> *v55;
  std::__node<char> *v56;
  std::__node<char> *v57;
  int v58;
  char *v59;
  int v60;
  uint64_t v61;
  _QWORD *v62;
  std::__owns_one_state<char> *v63;
  std::__node<char> *v64;
  std::__node<char> *v65;
  uint64_t v66;
  uint64_t v67;
  _QWORD *v68;
  std::__owns_one_state<char> *v69;
  std::__node<char> *v70;
  std::__node<char> *v71;
  uint64_t v72;

  if (a2 == a3)
    return a2;
  v7 = __mexp_end;
  v8 = __mexp_begin;
  v11 = this->__flags_ & 0x1F0;
  v12 = *a2;
  if (v12 <= 62)
  {
    if (v12 == 42)
    {
      v13 = a2 + 1;
      if (v11)
        v29 = 1;
      else
        v29 = v13 == a3;
      if (!v29 && *v13 == 63)
      {
        v13 = a2 + 2;
        v30 = (_QWORD *)operator new();
        end = this->__end_;
        first = end->__first_;
        v30[1] = first;
        end->__first_ = 0;
        v17 = operator new();
        v18 = v17;
        loop_count = this->__loop_count_;
        *(_QWORD *)(v17 + 8) = __s->__first_;
        *(_QWORD *)(v17 + 16) = v30;
        *(_QWORD *)v17 = &off_1E42E8FB8;
        v20 = xmmword_19FFB5ED0;
        goto LABEL_41;
      }
      v43 = (_QWORD *)operator new();
      v44 = this->__end_;
      v45 = v44->__first_;
      v43[1] = v45;
      v44->__first_ = 0;
      v40 = operator new();
      v18 = v40;
      v41 = this->__loop_count_;
      *(_QWORD *)(v40 + 8) = __s->__first_;
      *(_QWORD *)(v40 + 16) = v43;
      *(_QWORD *)v40 = &off_1E42E8FB8;
      v42 = xmmword_19FFB5ED0;
      goto LABEL_45;
    }
    if (v12 == 43)
    {
      v13 = a2 + 1;
      if (!v11 && v13 != a3 && *v13 == 63)
      {
        v13 = a2 + 2;
        v14 = (_QWORD *)operator new();
        v15 = this->__end_;
        v16 = v15->__first_;
        v14[1] = v16;
        v15->__first_ = 0;
        v17 = operator new();
        v18 = v17;
        loop_count = this->__loop_count_;
        *(_QWORD *)(v17 + 8) = __s->__first_;
        *(_QWORD *)(v17 + 16) = v14;
        *(_QWORD *)v17 = &off_1E42E8FB8;
        v20 = xmmword_19FFB5EC0;
LABEL_41:
        *(_OWORD *)(v17 + 24) = v20;
        *(_DWORD *)(v17 + 40) = loop_count;
        *(_DWORD *)(v17 + 44) = v8;
        *(_DWORD *)(v17 + 48) = v7;
        *(_BYTE *)(v17 + 52) = 0;
LABEL_47:
        __s->__first_ = 0;
        v49 = (std::__node<char> *)operator new();
        v49->__vftable = (std::__node<char>_vtbl *)&off_1E42DA8A0;
        v49[1].__vftable = (std::__node<char>_vtbl *)v18;
        this->__end_->__first_ = v49;
        this->__end_ = *(std::__owns_one_state<char> **)(v18 + 16);
        __s->__first_ = (std::__node<char> *)v18;
        ++this->__loop_count_;
        return v13;
      }
      v37 = (_QWORD *)operator new();
      v38 = this->__end_;
      v39 = v38->__first_;
      v37[1] = v39;
      v38->__first_ = 0;
      v40 = operator new();
      v18 = v40;
      v41 = this->__loop_count_;
      *(_QWORD *)(v40 + 8) = __s->__first_;
      *(_QWORD *)(v40 + 16) = v37;
      *(_QWORD *)v40 = &off_1E42E8FB8;
      v42 = xmmword_19FFB5EC0;
      goto LABEL_45;
    }
    return a2;
  }
  if (v12 == 63)
  {
    v13 = a2 + 1;
    if (v11)
      v33 = 1;
    else
      v33 = v13 == a3;
    if (!v33 && *v13 == 63)
    {
      v13 = a2 + 2;
      v34 = (_QWORD *)operator new();
      v35 = this->__end_;
      v36 = v35->__first_;
      v34[1] = v36;
      v35->__first_ = 0;
      v17 = operator new();
      v18 = v17;
      loop_count = this->__loop_count_;
      *(_QWORD *)(v17 + 8) = __s->__first_;
      *(_QWORD *)(v17 + 16) = v34;
      *(_QWORD *)v17 = &off_1E42E8FB8;
      v20 = xmmword_19FFB2E40;
      goto LABEL_41;
    }
    v46 = (_QWORD *)operator new();
    v47 = this->__end_;
    v48 = v47->__first_;
    v46[1] = v48;
    v47->__first_ = 0;
    v40 = operator new();
    v18 = v40;
    v41 = this->__loop_count_;
    *(_QWORD *)(v40 + 8) = __s->__first_;
    *(_QWORD *)(v40 + 16) = v46;
    *(_QWORD *)v40 = &off_1E42E8FB8;
    v42 = xmmword_19FFB2E40;
LABEL_45:
    *(_OWORD *)(v40 + 24) = v42;
LABEL_46:
    *(_DWORD *)(v40 + 40) = v41;
    *(_DWORD *)(v40 + 44) = v8;
    *(_DWORD *)(v40 + 48) = v7;
    *(_BYTE *)(v40 + 52) = 1;
    goto LABEL_47;
  }
  if (v12 != 123)
    return a2;
  v21 = a2 + 1;
  if (a2 + 1 == a3)
    goto LABEL_75;
  v22 = *v21;
  if ((v22 & 0xF8) != 0x30 && (v22 & 0xFE) != 0x38)
    goto LABEL_75;
  v23 = v22 - 48;
  v24 = a2 + 2;
  if (a2 + 2 == a3)
  {
LABEL_19:
    v24 = a3;
  }
  else
  {
    while (1)
    {
      v25 = *v24;
      if ((v25 & 0xF8) != 0x30 && (v25 & 0xFE) != 0x38)
        break;
      if (v23 >= 214748364)
        goto LABEL_75;
      v23 = v25 + 10 * v23 - 48;
      if (++v24 == a3)
        goto LABEL_19;
    }
  }
  if (v24 == v21)
    goto LABEL_75;
  if (v24 == a3)
    goto LABEL_76;
  v26 = *v24;
  if (v26 != 44)
  {
    if (v26 == 125)
    {
      v13 = v24 + 1;
      if (v11 || v13 == a3 || *v13 != 63)
      {
        v53 = v23;
        v54 = (_QWORD *)operator new();
        v55 = this->__end_;
        v56 = v55->__first_;
        v54[1] = v56;
        v55->__first_ = 0;
        v40 = operator new();
        v18 = v40;
        v41 = this->__loop_count_;
        v57 = __s->__first_;
        *(_QWORD *)v40 = &off_1E42E8FB8;
        *(_QWORD *)(v40 + 8) = v57;
        *(_QWORD *)(v40 + 16) = v54;
        *(_QWORD *)(v40 + 24) = v53;
        *(_QWORD *)(v40 + 32) = v53;
        goto LABEL_46;
      }
      v27 = v23;
      v13 = v24 + 2;
      __mexp_begin = __mexp_begin;
      __mexp_end = __mexp_end;
      v28 = v23;
LABEL_72:
      std::basic_regex<char,std::regex_traits<char>>::__push_loop(this, v27, v28, __s, __mexp_begin, __mexp_end, a7);
      return v13;
    }
    goto LABEL_75;
  }
  v51 = v24 + 1;
  if (v24 + 1 == a3)
  {
LABEL_75:
    std::__throw_regex_error[abi:nn180100]<(std::regex_constants::error_type)12>();
    goto LABEL_76;
  }
  v52 = *v51;
  if (v52 == 125)
  {
    v13 = v24 + 2;
    if (!v11 && v13 != a3 && *v13 == 63)
    {
      v13 = v24 + 3;
      std::basic_regex<char,std::regex_traits<char>>::__push_nongreedy_inf_repeat[abi:nn180100]((uint64_t)this, v23, (uint64_t)__s, __mexp_begin, __mexp_end);
      return v13;
    }
    v61 = v23;
    v62 = (_QWORD *)operator new();
    v63 = this->__end_;
    v64 = v63->__first_;
    v62[1] = v64;
    v63->__first_ = 0;
    v40 = operator new();
    v18 = v40;
    v41 = this->__loop_count_;
    v65 = __s->__first_;
    *(_QWORD *)v40 = &off_1E42E8FB8;
    *(_QWORD *)(v40 + 8) = v65;
    *(_QWORD *)(v40 + 16) = v62;
    *(_QWORD *)(v40 + 24) = v61;
    *(_QWORD *)(v40 + 32) = -1;
    goto LABEL_46;
  }
  if ((v52 & 0xF8) == 0x30 || (v52 & 0xFE) == 0x38)
  {
    v58 = v52 - 48;
    v59 = v24 + 2;
    if (v59 == a3)
    {
LABEL_63:
      v59 = a3;
    }
    else
    {
      while (1)
      {
        v60 = *v59;
        if ((v60 & 0xF8) != 0x30 && (v60 & 0xFE) != 0x38)
          break;
        if (v58 >= 214748364)
          goto LABEL_75;
        v58 = v60 + 10 * v58 - 48;
        if (++v59 == a3)
          goto LABEL_63;
      }
    }
    if (v59 != v51 && v59 != a3 && *v59 == 125)
    {
      if (v58 >= v23)
      {
        v13 = v59 + 1;
        if (v11 || v13 == a3 || *v13 != 63)
        {
          v66 = v23;
          v67 = v58;
          v68 = (_QWORD *)operator new();
          v69 = this->__end_;
          v70 = v69->__first_;
          v68[1] = v70;
          v69->__first_ = 0;
          v40 = operator new();
          v18 = v40;
          v41 = this->__loop_count_;
          v71 = __s->__first_;
          *(_QWORD *)v40 = &off_1E42E8FB8;
          *(_QWORD *)(v40 + 8) = v71;
          *(_QWORD *)(v40 + 16) = v68;
          *(_QWORD *)(v40 + 24) = v66;
          *(_QWORD *)(v40 + 32) = v67;
          goto LABEL_46;
        }
        v27 = v23;
        v28 = v58;
        v13 = v59 + 2;
        __mexp_begin = __mexp_begin;
        __mexp_end = __mexp_end;
        goto LABEL_72;
      }
      goto LABEL_75;
    }
  }
LABEL_76:
  v72 = std::__throw_regex_error[abi:nn180100]<(std::regex_constants::error_type)12>();
  return (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_character_escape<char const*>(v72);
}

void std::basic_regex<char,std::regex_traits<char>>::__parse_character_escape<char const*>(std::basic_regex<char> *a1, unsigned __int8 *a2, unsigned __int8 *a3, uint64_t *a4)
{
  unsigned __int8 *v4;
  uint64_t v5;
  std::basic_regex<char>::value_type v6;
  unsigned __int8 v7;
  std::basic_regex<char>::value_type v8;
  int v9;
  int v10;
  unsigned __int8 v11;
  char v12;
  unsigned __int8 v13;
  char v14;
  std::basic_regex<char>::value_type v15;
  std::basic_regex<char> *v16;
  std::basic_regex<char>::value_type v17;

  v4 = a2;
  if (a2 != a3)
  {
    v5 = *a2;
    v6 = v5;
    switch((char)v5)
    {
      case '0':
        if (!a4)
        {
          v6 = 0;
          goto LABEL_64;
        }
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((_BYTE *)a4 + 23) = 1;
        }
        *(_WORD *)a4 = 0;
        return;
      case 'c':
        if (v4 + 1 == a3)
          goto LABEL_81;
        v7 = v4[1];
        if (((v7 & 0xDF) - 65) > 0x19u)
          goto LABEL_81;
        v8 = v7 & 0x1F;
        if (a4)
        {
          if (*((char *)a4 + 23) < 0)
          {
            a4[1] = 1;
            a4 = (uint64_t *)*a4;
          }
          else
          {
            *((_BYTE *)a4 + 23) = 1;
          }
          *(_BYTE *)a4 = v8;
          *((_BYTE *)a4 + 1) = 0;
        }
        else
        {
          std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v8);
        }
        return;
      case 'f':
        if (!a4)
        {
          v6 = 12;
          goto LABEL_64;
        }
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((_BYTE *)a4 + 23) = 1;
        }
        *(_WORD *)a4 = 12;
        return;
      case 'n':
        if (!a4)
        {
          v6 = 10;
          goto LABEL_64;
        }
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((_BYTE *)a4 + 23) = 1;
        }
        *(_WORD *)a4 = 10;
        return;
      case 'r':
        if (!a4)
        {
          v6 = 13;
          goto LABEL_64;
        }
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((_BYTE *)a4 + 23) = 1;
        }
        *(_WORD *)a4 = 13;
        return;
      case 't':
        if (!a4)
        {
          v6 = 9;
          goto LABEL_64;
        }
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((_BYTE *)a4 + 23) = 1;
        }
        *(_WORD *)a4 = 9;
        return;
      case 'u':
        if (v4 + 1 == a3)
          goto LABEL_81;
        v9 = v4[1];
        if ((v9 & 0xF8) != 0x30 && (v9 & 0xFE) != 0x38 && (v9 | 0x20u) - 97 >= 6)
          goto LABEL_81;
        v4 += 2;
        if (v4 == a3)
          goto LABEL_81;
        v10 = *v4;
        if ((v10 & 0xF8) != 0x30 && (v10 & 0xFE) != 0x38 && (v10 | 0x20u) - 97 >= 6)
          goto LABEL_81;
        goto LABEL_38;
      case 'v':
        if (a4)
        {
          if (*((char *)a4 + 23) < 0)
          {
            a4[1] = 1;
            a4 = (uint64_t *)*a4;
          }
          else
          {
            *((_BYTE *)a4 + 23) = 1;
          }
          *(_WORD *)a4 = 11;
        }
        else
        {
          v6 = 11;
LABEL_64:
          std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v6);
        }
        return;
      case 'x':
LABEL_38:
        if (v4 + 1 == a3)
          goto LABEL_81;
        v11 = v4[1];
        v12 = -48;
        if ((v11 & 0xF8) == 0x30 || (v11 & 0xFE) == 0x38)
          goto LABEL_43;
        v11 |= 0x20u;
        if ((v11 - 97) >= 6u)
          goto LABEL_81;
        v12 = -87;
LABEL_43:
        if (v4 + 2 == a3)
          goto LABEL_81;
        v13 = v4[2];
        v14 = -48;
        if ((v13 & 0xF8) == 0x30 || (v13 & 0xFE) == 0x38)
          goto LABEL_48;
        v13 |= 0x20u;
        if ((v13 - 97) >= 6u)
        {
LABEL_81:
          v16 = (std::basic_regex<char> *)std::__throw_regex_error[abi:nn180100]<(std::regex_constants::error_type)12>();
          std::basic_regex<char,std::regex_traits<char>>::__push_char(v16, v17);
        }
        else
        {
          v14 = -87;
LABEL_48:
          v15 = v14 + v13 + 16 * (v12 + v11);
          if (a4)
          {
            if (*((char *)a4 + 23) < 0)
            {
              a4[1] = 1;
              a4 = (uint64_t *)*a4;
            }
            else
            {
              *((_BYTE *)a4 + 23) = 1;
            }
            *(_BYTE *)a4 = v15;
            *((_BYTE *)a4 + 1) = 0;
          }
          else
          {
            std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v15);
          }
        }
        break;
      default:
        if ((char)v5 == 95 || ((char)v5 & 0x80000000) == 0 && (a1->__traits_.__ct_->__tab_[v5] & 0x500) != 0)
          goto LABEL_81;
        if (!a4)
          goto LABEL_64;
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((_BYTE *)a4 + 23) = 1;
        }
        *(_BYTE *)a4 = v5;
        *((_BYTE *)a4 + 1) = 0;
        return;
    }
  }
}

void std::basic_regex<char,std::regex_traits<char>>::__push_char(std::basic_regex<char> *this, std::basic_regex<char>::value_type __c)
{
  uint64_t v2;
  std::basic_regex<_CharT, _Traits>::flag_type flags;
  uint64_t v5;
  std::__owns_one_state<char> *end;
  std::__node<char> *v7;
  uint64_t v8;
  std::__node<char> *first;
  std::__node<char> *v10;

  v2 = __c;
  flags = this->__flags_;
  if ((flags & 1) != 0)
  {
    v8 = operator new();
    first = this->__end_->__first_;
    *(_QWORD *)v8 = &off_1E42DA928;
    *(_QWORD *)(v8 + 8) = first;
    std::locale::locale((std::locale *)(v8 + 16), &this->__traits_.__loc_);
    *(_OWORD *)(v8 + 24) = *(_OWORD *)&this->__traits_.__ct_;
    *(_BYTE *)(v8 + 40) = ((uint64_t (*)(const std::ctype<char> *, uint64_t))this->__traits_.__ct_->do_tolower)(this->__traits_.__ct_, v2);
LABEL_6:
    this->__end_->__first_ = (std::__node<char> *)v8;
    goto LABEL_7;
  }
  if ((flags & 8) != 0)
  {
    v8 = operator new();
    v10 = this->__end_->__first_;
    *(_QWORD *)v8 = &off_1E42DAAE0;
    *(_QWORD *)(v8 + 8) = v10;
    std::locale::locale((std::locale *)(v8 + 16), &this->__traits_.__loc_);
    *(_OWORD *)(v8 + 24) = *(_OWORD *)&this->__traits_.__ct_;
    *(_BYTE *)(v8 + 40) = v2;
    goto LABEL_6;
  }
  v5 = operator new();
  end = this->__end_;
  v7 = end->__first_;
  *(_QWORD *)v5 = &off_1E42DA700;
  *(_QWORD *)(v5 + 8) = v7;
  *(_BYTE *)(v5 + 16) = v2;
  end->__first_ = (std::__node<char> *)v5;
LABEL_7:
  this->__end_ = (std::__owns_one_state<char> *)this->__end_->__first_;
}

void sub_19F0CAB4C(_Unwind_Exception *a1)
{
  void (__cdecl ***v1)(std::__owns_one_state<char> *__hidden);
  std::locale *v2;
  void (__cdecl **v4)(std::__owns_one_state<char> *__hidden);

  std::locale::~locale(v2);
  v4 = v1[1];
  if (v4)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v4 + 1))(v4);
  MEMORY[0x1A1AF4E00](v1, 0x10E1C4010F5D982);
  _Unwind_Resume(a1);
}

void std::basic_regex<char,std::regex_traits<char>>::__push_loop(std::basic_regex<char> *this, size_t __min, size_t __max, std::__owns_one_state<char> *__s, size_t __mexp_begin, size_t __mexp_end, BOOL __greedy)
{
  int v7;
  int v8;
  _QWORD *v13;
  std::__owns_one_state<char> *end;
  std::__node<char> *first;
  uint64_t v16;
  unsigned int loop_count;
  std::__node<char> *v18;
  std::__node<char> *v19;

  v7 = __mexp_end;
  v8 = __mexp_begin;
  v13 = (_QWORD *)operator new();
  end = this->__end_;
  first = end->__first_;
  v13[1] = first;
  end->__first_ = 0;
  v16 = operator new();
  loop_count = this->__loop_count_;
  v18 = __s->__first_;
  *(_QWORD *)v16 = &off_1E42E8FB8;
  *(_QWORD *)(v16 + 8) = v18;
  *(_QWORD *)(v16 + 16) = v13;
  *(_QWORD *)(v16 + 24) = __min;
  *(_QWORD *)(v16 + 32) = __max;
  *(_DWORD *)(v16 + 40) = loop_count;
  *(_DWORD *)(v16 + 44) = v8;
  *(_DWORD *)(v16 + 48) = v7;
  *(_BYTE *)(v16 + 52) = 0;
  __s->__first_ = 0;
  v19 = (std::__node<char> *)operator new();
  v19->__vftable = (std::__node<char>_vtbl *)&off_1E42DA8A0;
  v19[1].__vftable = (std::__node<char>_vtbl *)v16;
  this->__end_->__first_ = v19;
  this->__end_ = *(std::__owns_one_state<char> **)(v16 + 16);
  __s->__first_ = (std::__node<char> *)v16;
  ++this->__loop_count_;
}

void sub_19F0CACA0(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void std::basic_regex<char,std::regex_traits<char>>::__parse<char const*>(uint64_t a1, std::basic_regex<char>::value_type *a2, std::basic_regex<char>::value_type *a3)
{
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  uint64_t v12;
  unsigned int v13;
  std::basic_regex<char>::value_type *v14;
  std::basic_regex<char>::value_type *v15;
  char *v16;
  std::basic_regex<char>::value_type *v17;
  std::__owns_one_state<char> *v18;
  int v19;
  char *v20;
  BOOL v21;
  std::basic_regex<char>::value_type *v22;
  std::basic_regex<char>::value_type *v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  std::basic_regex<char>::value_type *v34;
  char *v35;
  std::__owns_one_state<char> *v36;
  int v37;
  char *v38;
  BOOL v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  std::basic_regex<char>::value_type *v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  _QWORD *v53;
  uint64_t v54;
  _QWORD *v55;
  uint64_t v56;
  std::basic_regex<char>::value_type *v57;
  std::basic_regex<char>::value_type *v58;
  _QWORD *v59;
  uint64_t v60;
  uint64_t v61;
  std::basic_regex<char>::value_type *v62;
  uint64_t v63;
  _QWORD *v64;
  uint64_t v65;
  uint64_t v66;
  _QWORD *v67;
  uint64_t v68;
  _QWORD *v69;
  uint64_t v70;
  _QWORD *v71;
  uint64_t v72;
  std::basic_regex<char>::value_type *v73;
  std::basic_regex<char>::value_type *v74;
  uint64_t v75;
  std::basic_regex<char>::value_type *v76;
  std::basic_regex<char>::value_type *v77;

  v6 = (_QWORD *)operator new();
  *v6 = &off_1E42DA670;
  v7 = (_QWORD *)operator new();
  v7[1] = v6;
  v8 = (_QWORD *)operator new();
  *v8 = &off_1E42E8DE0;
  v8[1] = 0;
  v8[2] = 0;
  v8[3] = v7;
  v9 = *(std::__shared_weak_count **)(a1 + 48);
  *(_QWORD *)(a1 + 40) = v7;
  *(_QWORD *)(a1 + 48) = v8;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  v12 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 56) = v12;
  v13 = *(_DWORD *)(a1 + 24) & 0x1F0;
  if (v13 > 0x3F)
  {
    if (v13 != 64)
    {
      if (v13 == 128)
      {
        v22 = (std::basic_regex<char>::value_type *)memchr(a2, 10, a3 - a2);
        if (v22)
          v23 = v22;
        else
          v23 = a3;
        if (v23 == a2)
        {
          v59 = (_QWORD *)operator new();
          v60 = *(_QWORD *)(a1 + 56);
          v61 = *(_QWORD *)(v60 + 8);
          v59[1] = v61;
          *(_QWORD *)(v60 + 8) = v59;
          *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
        }
        else
        {
          std::basic_regex<char,std::regex_traits<char>>::__parse_basic_reg_exp<char const*>((std::basic_regex<char> *)a1, a2, v23);
        }
        if (v23 == a3)
          v62 = v23;
        else
          v62 = v23 + 1;
        if (v62 != a3)
        {
          v63 = *(_QWORD *)(a1 + 56);
          do
          {
            v73 = (std::basic_regex<char>::value_type *)memchr(v62, 10, a3 - v62);
            if (v73)
              v74 = v73;
            else
              v74 = a3;
            if (v74 == v62)
            {
              v64 = (_QWORD *)operator new();
              v65 = *(_QWORD *)(a1 + 56);
              v66 = *(_QWORD *)(v65 + 8);
              v64[1] = v66;
              *(_QWORD *)(v65 + 8) = v64;
              *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
            }
            else
            {
              std::basic_regex<char,std::regex_traits<char>>::__parse_basic_reg_exp<char const*>((std::basic_regex<char> *)a1, v62, v74);
            }
            v67 = (_QWORD *)operator new();
            v68 = *(_QWORD *)(v63 + 8);
            v67[1] = *(_QWORD *)(v12 + 8);
            v67[2] = v68;
            *v67 = &off_1E42DA640;
            *(_QWORD *)(v12 + 8) = v67;
            *(_QWORD *)(v63 + 8) = 0;
            v69 = (_QWORD *)operator new();
            v70 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
            v69[1] = v70;
            *(_QWORD *)(v63 + 8) = v69;
            *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) = 0;
            v71 = (_QWORD *)operator new();
            v72 = *(_QWORD *)(v63 + 8);
            *v71 = &unk_1E42E8EF8;
            v71[1] = v72;
            *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) = v71;
            v63 = *(_QWORD *)(v63 + 8);
            *(_QWORD *)(a1 + 56) = v63;
            if (v74 == a3)
              v62 = v74;
            else
              v62 = v74 + 1;
          }
          while (v62 != a3);
        }
        return;
      }
      if (v13 == 256)
      {
        v14 = (std::basic_regex<char>::value_type *)memchr(a2, 10, a3 - a2);
        if (v14)
          v15 = v14;
        else
          v15 = a3;
        if (v15 == a2)
        {
          v43 = (_QWORD *)operator new();
          v44 = *(_QWORD *)(a1 + 56);
          v45 = *(_QWORD *)(v44 + 8);
          v43[1] = v45;
          *(_QWORD *)(v44 + 8) = v43;
          *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
        }
        else
        {
          std::basic_regex<char,std::regex_traits<char>>::__parse_extended_reg_exp<char const*>((std::basic_regex<char> *)a1, a2, v15);
        }
        if (v15 == a3)
          v46 = v15;
        else
          v46 = v15 + 1;
        if (v46 != a3)
        {
          v47 = *(_QWORD *)(a1 + 56);
          do
          {
            v57 = (std::basic_regex<char>::value_type *)memchr(v46, 10, a3 - v46);
            if (v57)
              v58 = v57;
            else
              v58 = a3;
            if (v58 == v46)
            {
              v48 = (_QWORD *)operator new();
              v49 = *(_QWORD *)(a1 + 56);
              v50 = *(_QWORD *)(v49 + 8);
              v48[1] = v50;
              *(_QWORD *)(v49 + 8) = v48;
              *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
            }
            else
            {
              std::basic_regex<char,std::regex_traits<char>>::__parse_extended_reg_exp<char const*>((std::basic_regex<char> *)a1, v46, v58);
            }
            v51 = (_QWORD *)operator new();
            v52 = *(_QWORD *)(v47 + 8);
            v51[1] = *(_QWORD *)(v12 + 8);
            v51[2] = v52;
            *v51 = &off_1E42DA640;
            *(_QWORD *)(v12 + 8) = v51;
            *(_QWORD *)(v47 + 8) = 0;
            v53 = (_QWORD *)operator new();
            v54 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
            v53[1] = v54;
            *(_QWORD *)(v47 + 8) = v53;
            *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) = 0;
            v55 = (_QWORD *)operator new();
            v56 = *(_QWORD *)(v47 + 8);
            *v55 = &unk_1E42E8EF8;
            v55[1] = v56;
            *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) = v55;
            v47 = *(_QWORD *)(v47 + 8);
            *(_QWORD *)(a1 + 56) = v47;
            if (v58 == a3)
              v46 = v58;
            else
              v46 = v58 + 1;
          }
          while (v46 != a3);
        }
        return;
      }
LABEL_77:
      v75 = std::__throw_regex_error[abi:nn180100]<(std::regex_constants::error_type)12>();
      std::basic_regex<char,std::regex_traits<char>>::__parse_bracket_expression<char const*>(v75, v76, v77);
      return;
    }
LABEL_19:
    std::basic_regex<char,std::regex_traits<char>>::__parse_extended_reg_exp<char const*>((std::basic_regex<char> *)a1, a2, a3);
    return;
  }
  if (v13)
  {
    if (v13 == 16)
    {
      std::basic_regex<char,std::regex_traits<char>>::__parse_basic_reg_exp<char const*>((std::basic_regex<char> *)a1, a2, a3);
      return;
    }
    if (v13 != 32)
      goto LABEL_77;
    goto LABEL_19;
  }
  v16 = a2;
  while (1)
  {
    v17 = v16;
    v16 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_assertion<char const*>(a1, v16, a3);
    if (v16 == v17)
      break;
LABEL_21:
    if (v16 == v17)
      goto LABEL_31;
  }
  v18 = *(std::__owns_one_state<char> **)(a1 + 56);
  v19 = *(_DWORD *)(a1 + 28);
  std::basic_regex<char,std::regex_traits<char>>::__parse_atom<char const*>((std::basic_regex<char> *)a1, v17, a3);
  if (v20 != v17)
  {
    v16 = std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_dupl_symbol<char const*>((std::basic_regex<char> *)a1, v20, a3, v18, (v19 + 1), (*(_DWORD *)(a1 + 28) + 1), v21);
    goto LABEL_21;
  }
LABEL_31:
  if (v17 == a2)
  {
    v24 = (_QWORD *)operator new();
    v25 = *(_QWORD *)(a1 + 56);
    v26 = *(_QWORD *)(v25 + 8);
    v24[1] = v26;
    *(_QWORD *)(v25 + 8) = v24;
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
  }
  if (v17 == a3)
    return;
  while (2)
  {
    if (*v17 != 124)
      return;
    v33 = *(_QWORD *)(a1 + 56);
    v34 = v17 + 1;
    v35 = v17 + 1;
    while (2)
    {
      v17 = v35;
      v35 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_assertion<char const*>(a1, v35, a3);
      if (v35 != v17)
      {
LABEL_40:
        if (v35 == v17)
          goto LABEL_35;
        continue;
      }
      break;
    }
    v36 = *(std::__owns_one_state<char> **)(a1 + 56);
    v37 = *(_DWORD *)(a1 + 28);
    std::basic_regex<char,std::regex_traits<char>>::__parse_atom<char const*>((std::basic_regex<char> *)a1, v17, a3);
    if (v38 != v17)
    {
      v35 = std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_dupl_symbol<char const*>((std::basic_regex<char> *)a1, v38, a3, v36, (v37 + 1), (*(_DWORD *)(a1 + 28) + 1), v39);
      goto LABEL_40;
    }
LABEL_35:
    if (v17 == v34)
    {
      v40 = (_QWORD *)operator new();
      v41 = *(_QWORD *)(a1 + 56);
      v42 = *(_QWORD *)(v41 + 8);
      v40[1] = v42;
      *(_QWORD *)(v41 + 8) = v40;
      *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
    }
    v27 = (_QWORD *)operator new();
    v28 = *(_QWORD *)(v33 + 8);
    v27[1] = *(_QWORD *)(v12 + 8);
    v27[2] = v28;
    *v27 = &off_1E42DA640;
    *(_QWORD *)(v12 + 8) = v27;
    *(_QWORD *)(v33 + 8) = 0;
    v29 = (_QWORD *)operator new();
    v30 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
    v29[1] = v30;
    *(_QWORD *)(v33 + 8) = v29;
    *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) = 0;
    v31 = (_QWORD *)operator new();
    v32 = *(_QWORD *)(v33 + 8);
    *v31 = &unk_1E42E8EF8;
    v31[1] = v32;
    *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) = v31;
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(v33 + 8);
    if (v17 != a3)
      continue;
    break;
  }
}

void std::basic_regex<char,std::regex_traits<char>>::__parse_bracket_expression<char const*>(uint64_t a1, std::basic_regex<char>::value_type *a2, std::basic_regex<char>::value_type *a3)
{
  int v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  std::basic_regex<char>::value_type *v10;
  std::basic_regex<char>::value_type *v11;
  std::basic_regex<char>::value_type *v12;
  int v13;
  unint64_t v14;
  unint64_t v15;
  int v16;
  std::basic_regex<char>::value_type *j;
  std::basic_regex<char>::value_type *v18;
  std::basic_regex<char>::value_type *v19;
  std::basic_regex<char>::value_type *v20;
  std::basic_regex<char>::value_type *i;
  int v22;
  std::basic_regex<char>::value_type *m;
  uint64_t v24;
  char *p_dst;
  char *v26;
  int v27;
  _BYTE *v28;
  unsigned __int8 v29;
  void **v30;
  int v31;
  std::basic_regex<char>::value_type *v32;
  uint64_t v33;
  std::basic_regex<char>::value_type *v34;
  std::basic_regex<char>::value_type *v35;
  size_t v36;
  int v37;
  __int128 *v38;
  void **v39;
  uint64_t v40;
  uint64_t v41;
  BOOL v42;
  uint64_t v43;
  char *v44;
  const char *v45;
  std::regex_traits<char>::char_class_type classname;
  int v47;
  std::basic_regex<char>::value_type *v48;
  std::basic_regex<char>::value_type *v49;
  int64_t v50;
  std::basic_regex<char>::value_type *v51;
  std::basic_regex<char>::value_type *k;
  int v53;
  std::basic_regex<char>::value_type *v54;
  uint64_t v55;
  std::string::value_type *v56;
  unint64_t v57;
  __int128 v58;
  uint64_t v59;
  char *v60;
  int v61;
  char *v62;
  std::string::value_type *v63;
  std::basic_regex<char> *v64;
  unsigned __int8 *v65;
  unsigned __int8 *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  void *v70[2];
  int64_t v71;
  void *__p[2];
  unint64_t v73;
  std::string::value_type *__s[2];
  int64_t v75;
  __int128 __dst;
  int64_t v77;

  if (a2 == a3 || *a2 != 91)
    return;
  if (a2 + 1 == a3)
    goto LABEL_179;
  v5 = a2[1];
  v6 = v5 == 94;
  v7 = (uint64_t)(v5 == 94 ? a2 + 2 : a2 + 1);
  v8 = operator new();
  v9 = std::__bracket_expression<char,std::regex_traits<char>>::__bracket_expression[abi:nn180100](v8, a1, *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8), v6, *(_DWORD *)(a1 + 24) & 1, (*(_DWORD *)(a1 + 24) & 8) != 0);
  *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) = v9;
  *(_QWORD *)(a1 + 56) = v9;
  if ((std::basic_regex<char>::value_type *)v7 == a3)
    goto LABEL_179;
  if ((*(_WORD *)(a1 + 24) & 0x1F0) != 0 && *(_BYTE *)v7 == 93)
  {
    std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:nn180100](v8, 93);
    ++v7;
  }
  if ((std::basic_regex<char>::value_type *)v7 == a3)
  {
LABEL_179:
    std::__throw_regex_error[abi:nn180100]<(std::regex_constants::error_type)12>();
LABEL_180:
    std::__throw_regex_error[abi:nn180100]<(std::regex_constants::error_type)12>();
LABEL_181:
    abort();
  }
  v10 = a3 - 4;
  v69 = a1;
  do
  {
    v11 = (std::basic_regex<char>::value_type *)v7;
    v12 = a3;
    if ((std::basic_regex<char>::value_type *)v7 == a3)
      goto LABEL_14;
    v13 = *(unsigned __int8 *)v7;
    v12 = (std::basic_regex<char>::value_type *)v7;
    if (v13 == 93)
      goto LABEL_14;
    v14 = 0;
    __p[0] = 0;
    __p[1] = 0;
    v73 = 0;
    v15 = 0;
    v12 = (std::basic_regex<char>::value_type *)v7;
    if ((std::basic_regex<char>::value_type *)(v7 + 1) == a3 || v13 != 91)
      goto LABEL_54;
    v16 = *(unsigned __int8 *)(v7 + 1);
    if (v16 == 46)
    {
      if ((uint64_t)&a3[-v7 - 2] < 2)
        goto LABEL_179;
      v19 = &v10[-v7];
      v20 = (std::basic_regex<char>::value_type *)(v7 + 2);
      for (i = (std::basic_regex<char>::value_type *)(v7 + 2); ; v20 = i)
      {
        v22 = *i++;
        if (v22 == 46 && *i == 93)
          break;
        if (!v19)
          goto LABEL_179;
        --v19;
      }
      if (v20 == a3)
        goto LABEL_179;
      std::regex_traits<char>::__lookup_collatename<char const*>((uint64_t)&__dst, a1, (_BYTE *)(v7 + 2), v20);
      if (SHIBYTE(v73) < 0)
        operator delete(__p[0]);
      *(_OWORD *)__p = __dst;
      v73 = v77;
      v15 = HIBYTE(v77);
      v14 = *((_QWORD *)&__dst + 1);
      if (v77 >= 0)
        v26 = (char *)HIBYTE(v73);
      else
        v26 = (char *)__p[1];
      if ((unint64_t)(v26 - 1) >= 2)
        goto LABEL_180;
      v12 = v20 + 2;
      goto LABEL_54;
    }
    if (v16 != 58)
    {
      if (v16 == 61)
      {
        if ((uint64_t)&a3[-v7 - 2] < 2)
          goto LABEL_179;
        for (j = 0; ; ++j)
        {
          v18 = &j[v7 + 2];
          if (*v18 == 61 && j[v7 + 3] == 93)
            break;
          if (&v10[-v7] == j)
            goto LABEL_179;
        }
        if (v18 == a3)
          goto LABEL_179;
        std::regex_traits<char>::__lookup_collatename<char const*>((uint64_t)&__dst, a1, (_BYTE *)(v7 + 2), &j[v7 + 2]);
        if (SHIBYTE(v77) < 0)
        {
          v24 = *((_QWORD *)&__dst + 1);
          if (!*((_QWORD *)&__dst + 1))
            goto LABEL_180;
          p_dst = (char *)__dst;
        }
        else
        {
          v24 = HIBYTE(v77);
          if (!HIBYTE(v77))
            goto LABEL_180;
          p_dst = (char *)&__dst;
        }
        std::regex_traits<char>::__transform_primary<std::__wrap_iter<char *>>((uint64_t)__s, a1, p_dst, &p_dst[v24]);
        v56 = (std::string::value_type *)HIBYTE(v75);
        if (v75 < 0)
          v56 = __s[1];
        if (v56)
        {
          v57 = *(_QWORD *)(v8 + 144);
          if (v57 >= *(_QWORD *)(v8 + 152))
          {
            *(_QWORD *)(v8 + 144) = std::vector<std::string>::__push_back_slow_path<std::string const&>(v8 + 136, (uint64_t)__s);
            if ((SHIBYTE(v75) & 0x80000000) == 0)
              goto LABEL_151;
            goto LABEL_150;
          }
          if (SHIBYTE(v75) < 0)
          {
            std::string::__init_copy_ctor_external(*(std::string **)(v8 + 144), __s[0], (std::string::size_type)__s[1]);
          }
          else
          {
            v58 = *(_OWORD *)__s;
            *(_QWORD *)(v57 + 16) = v75;
            *(_OWORD *)v57 = v58;
          }
          *(_QWORD *)(v8 + 144) = v57 + 24;
          if (SHIBYTE(v75) < 0)
LABEL_150:
            operator delete(__s[0]);
        }
        else
        {
          v59 = HIBYTE(v77);
          if (v77 < 0)
            v59 = *((_QWORD *)&__dst + 1);
          if (v59 == 2)
          {
            v62 = (char *)&__dst;
            if (v77 < 0)
              v62 = (char *)__dst;
            std::__bracket_expression<char,std::regex_traits<char>>::__add_digraph[abi:nn180100](v8, *v62, v62[1]);
            if (SHIBYTE(v75) < 0)
              goto LABEL_150;
          }
          else
          {
            if (v59 != 1)
              goto LABEL_180;
            v60 = (char *)&__dst;
            if (v77 < 0)
              v60 = (char *)__dst;
            std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:nn180100](v8, *v60);
            if (SHIBYTE(v75) < 0)
              goto LABEL_150;
          }
        }
LABEL_151:
        if (SHIBYTE(v77) < 0)
          operator delete((void *)__dst);
        v47 = 0;
        v7 = (uint64_t)(v18 + 2);
        v48 = v11;
        if ((SHIBYTE(v73) & 0x80000000) == 0)
          goto LABEL_140;
        goto LABEL_154;
      }
      v14 = 0;
      v15 = 0;
      v12 = (std::basic_regex<char>::value_type *)v7;
LABEL_54:
      v7 = *(_DWORD *)(a1 + 24) & 0x1F0;
      if ((v15 & 0x80u) == 0)
        v14 = v15;
      if (v14)
      {
        if (v12 == a3)
          goto LABEL_131;
        goto LABEL_58;
      }
      if ((*(_DWORD *)(a1 + 24) & 0x1B0 | 0x40) == 0x40)
      {
        v31 = *v12;
        if (v31 == 92)
        {
          v32 = v12 + 1;
          if ((*(_DWORD *)(a1 + 24) & 0x1F0) != 0)
            v33 = std::basic_regex<char,std::regex_traits<char>>::__parse_awk_escape<char const*>((std::basic_regex<char> *)a1, v32, a3, (uint64_t *)__p);
          else
            std::basic_regex<char,std::regex_traits<char>>::__parse_class_escape<char const*>((std::basic_regex<char> *)a1, (unsigned __int8 *)v32, (unsigned __int8 *)a3, (uint64_t)__p, v8);
          v12 = (std::basic_regex<char>::value_type *)v33;
          if ((std::basic_regex<char>::value_type *)v33 == a3)
            goto LABEL_131;
          goto LABEL_58;
        }
      }
      else
      {
        LOBYTE(v31) = *v12;
      }
      if ((char)v15 < 0)
      {
        v39 = (void **)__p[0];
        __p[1] = (void *)1;
      }
      else
      {
        HIBYTE(v73) = 1;
        v39 = __p;
      }
      *(_BYTE *)v39 = v31;
      *((_BYTE *)v39 + 1) = 0;
      if (++v12 == a3)
      {
LABEL_131:
        v29 = HIBYTE(v73);
        if ((SHIBYTE(v73) & 0x80000000) == 0)
          goto LABEL_132;
        if (!__p[1])
        {
LABEL_13:
          operator delete(__p[0]);
LABEL_14:
          v7 = (uint64_t)v12;
          continue;
        }
        if (__p[1] == (void *)1)
          goto LABEL_137;
LABEL_65:
        v30 = (void **)__p[0];
LABEL_134:
        std::__bracket_expression<char,std::regex_traits<char>>::__add_digraph[abi:nn180100](v8, *(char *)v30, *((char *)v30 + 1));
        goto LABEL_139;
      }
LABEL_58:
      v27 = *v12;
      if (v27 == 93)
        goto LABEL_131;
      v28 = v12 + 1;
      if (v12 + 1 == a3 || v27 != 45 || *v28 == 93)
      {
        v29 = HIBYTE(v73);
        if (SHIBYTE(v73) < 0)
        {
          if (!__p[1])
            goto LABEL_13;
          if (__p[1] != (void *)1)
            goto LABEL_65;
LABEL_137:
          v30 = (void **)__p[0];
LABEL_138:
          std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:nn180100](v8, *(char *)v30);
LABEL_139:
          v47 = 1;
          v48 = v12;
          if ((SHIBYTE(v73) & 0x80000000) == 0)
            goto LABEL_140;
          goto LABEL_154;
        }
LABEL_132:
        v61 = v29;
        if (!v29)
          goto LABEL_14;
        v30 = __p;
        if (v61 == 1)
          goto LABEL_138;
        goto LABEL_134;
      }
      __s[0] = 0;
      __s[1] = 0;
      v75 = 0;
      v48 = v12 + 2;
      if (v12 + 2 != a3 && *v28 == 91 && *v48 == 46)
      {
        v49 = v12 + 3;
        if (a3 - (v12 + 3) < 2)
          goto LABEL_179;
        v50 = a3 - 5 - v12;
        v51 = v12 + 3;
        for (k = v49; ; v51 = k)
        {
          v53 = *k++;
          if (v53 == 46 && *k == 93)
            break;
          if (!v50)
            goto LABEL_179;
          --v50;
        }
        if (v51 == a3)
          goto LABEL_179;
        std::regex_traits<char>::__lookup_collatename<char const*>((uint64_t)&__dst, a1, v49, v51);
        if (SHIBYTE(v75) < 0)
          operator delete(__s[0]);
        v75 = v77;
        *(_OWORD *)__s = __dst;
        v63 = (std::string::value_type *)HIBYTE(v77);
        if (v77 < 0)
          v63 = __s[1];
        if ((unint64_t)(v63 - 1) >= 2)
          goto LABEL_180;
        v48 = v51 + 2;
LABEL_165:
        __dst = *(_OWORD *)__p;
        v77 = v73;
        __p[1] = 0;
        v73 = 0;
        __p[0] = 0;
        *(_OWORD *)v70 = *(_OWORD *)__s;
        v71 = v75;
        __s[0] = 0;
        __s[1] = 0;
        v75 = 0;
        std::__bracket_expression<char,std::regex_traits<char>>::__add_range[abi:nn180100](v8, (char *)&__dst, (char *)v70);
        if (SHIBYTE(v71) < 0)
        {
          operator delete(v70[0]);
          if ((SHIBYTE(v77) & 0x80000000) == 0)
          {
LABEL_167:
            if ((SHIBYTE(v75) & 0x80000000) == 0)
              goto LABEL_168;
LABEL_172:
            operator delete(__s[0]);
LABEL_168:
            v47 = 1;
            if ((SHIBYTE(v73) & 0x80000000) == 0)
              goto LABEL_140;
            goto LABEL_154;
          }
        }
        else if ((SHIBYTE(v77) & 0x80000000) == 0)
        {
          goto LABEL_167;
        }
        operator delete((void *)__dst);
        if ((SHIBYTE(v75) & 0x80000000) == 0)
          goto LABEL_168;
        goto LABEL_172;
      }
      if ((v7 | 0x40) == 0x40)
      {
        LODWORD(v28) = *v28;
        if ((_DWORD)v28 == 92)
        {
          v54 = v12 + 2;
          if ((_DWORD)v7)
            v55 = std::basic_regex<char,std::regex_traits<char>>::__parse_awk_escape<char const*>((std::basic_regex<char> *)a1, v54, a3, (uint64_t *)__s);
          else
            std::basic_regex<char,std::regex_traits<char>>::__parse_class_escape<char const*>((std::basic_regex<char> *)a1, (unsigned __int8 *)v54, (unsigned __int8 *)a3, (uint64_t)__s, v8);
          v48 = (std::basic_regex<char>::value_type *)v55;
          goto LABEL_165;
        }
      }
      else
      {
        LOBYTE(v28) = *v28;
      }
      HIBYTE(v75) = 1;
      LOBYTE(__s[0]) = (_BYTE)v28;
      goto LABEL_165;
    }
    if ((uint64_t)&a3[-v7 - 2] < 2)
      goto LABEL_179;
    for (m = 0; m[v7 + 2] != 58 || m[v7 + 3] != 93; ++m)
    {
      if (&v10[-v7] == m)
        goto LABEL_179;
    }
    v34 = m + 2;
    v35 = &v34[v7];
    if (&v34[v7] == a3)
      goto LABEL_179;
    v36 = (size_t)(v34 - 2);
    if ((unint64_t)(v34 - 2) >= 0x7FFFFFFFFFFFFFF8)
      goto LABEL_181;
    v37 = *(_DWORD *)(a1 + 24);
    if (v36 >= 0x17)
    {
      v40 = (v36 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v36 | 7) != 0x17)
        v40 = v36 | 7;
      v41 = v40 + 1;
      v38 = (__int128 *)operator new(v40 + 1);
      *((_QWORD *)&__dst + 1) = v36;
      v77 = v41 | 0x8000000000000000;
      *(_QWORD *)&__dst = v38;
LABEL_84:
      memcpy(v38, v11 + 2, v36);
      v38 = (__int128 *)((char *)v38 + v36);
      goto LABEL_85;
    }
    HIBYTE(v77) = (_BYTE)v34 - 2;
    v38 = &__dst;
    if (v34 != (std::basic_regex<char>::value_type *)2)
      goto LABEL_84;
LABEL_85:
    v42 = v37 & 1;
    *(_BYTE *)v38 = 0;
    a1 = v69;
    v43 = HIBYTE(v77);
    if (v77 >= 0)
      v44 = (char *)&__dst;
    else
      v44 = (char *)__dst;
    if (v77 < 0)
      v43 = *((_QWORD *)&__dst + 1);
    (*(void (**)(_QWORD, char *, char *))(**(_QWORD **)(v69 + 8) + 48))(*(_QWORD *)(v69 + 8), v44, &v44[v43]);
    if (v77 >= 0)
      v45 = (const char *)&__dst;
    else
      v45 = (const char *)__dst;
    classname = std::__get_classname(v45, v42);
    if (SHIBYTE(v77) < 0)
      operator delete((void *)__dst);
    if (!classname)
    {
      v64 = (std::basic_regex<char> *)std::__throw_regex_error[abi:nn180100]<(std::regex_constants::error_type)12>();
      std::basic_regex<char,std::regex_traits<char>>::__parse_class_escape<char const*>(v64, v65, v66, v67, v68);
      return;
    }
    v47 = 0;
    *(_DWORD *)(v8 + 160) |= classname;
    v7 = (uint64_t)(v35 + 2);
    v48 = v11;
    if ((SHIBYTE(v73) & 0x80000000) == 0)
    {
LABEL_140:
      v12 = v48;
      if (v47)
        goto LABEL_14;
      continue;
    }
LABEL_154:
    operator delete(__p[0]);
    v12 = v48;
    if ((v47 & 1) != 0)
      goto LABEL_14;
  }
  while ((std::basic_regex<char>::value_type *)v7 != v11);
  if (v11 == a3)
    goto LABEL_179;
  if (*v11 == 45)
  {
    std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:nn180100](v8, 45);
    ++v11;
  }
  if (v11 == a3 || *v11 != 93)
    goto LABEL_179;
}

void std::basic_regex<char,std::regex_traits<char>>::__parse_class_escape<char const*>(std::basic_regex<char> *a1, unsigned __int8 *a2, unsigned __int8 *a3, uint64_t a4, uint64_t a5)
{
  void *v5;

  if (a2 == a3)
  {
    v5 = (void *)std::__throw_regex_error[abi:nn180100]<(std::regex_constants::error_type)12>();
    std::__shared_ptr_pointer<std::__empty_state<char> *,std::shared_ptr<std::__empty_state<char>>::__shared_ptr_default_delete<std::__empty_state<char>,std::__empty_state<char>>,std::allocator<std::__empty_state<char>>>::__on_zero_shared_weak(v5);
  }
  else
  {
    switch(*a2)
    {
      case 'D':
        *(_DWORD *)(a5 + 164) |= 0x400u;
        break;
      case 'E':
      case 'F':
      case 'G':
      case 'H':
      case 'I':
      case 'J':
      case 'K':
      case 'L':
      case 'M':
      case 'N':
      case 'O':
      case 'P':
      case 'Q':
      case 'R':
      case 'T':
      case 'U':
      case 'V':
      case 'X':
      case 'Y':
      case 'Z':
      case '[':
      case '\\':
      case ']':
      case '^':
      case '_':
      case 'a':
      case 'c':
      case 'e':
      case 'f':
      case 'g':
      case 'h':
      case 'i':
      case 'j':
      case 'k':
      case 'l':
      case 'm':
      case 'n':
      case 'o':
      case 'p':
      case 'q':
      case 'r':
      case 't':
      case 'u':
      case 'v':
        goto LABEL_7;
      case 'S':
        *(_DWORD *)(a5 + 164) |= 0x4000u;
        break;
      case 'W':
        *(_DWORD *)(a5 + 164) |= 0x500u;
        std::__bracket_expression<char,std::regex_traits<char>>::__add_neg_char[abi:nn180100](a5);
        break;
      case 'b':
        if (*(char *)(a4 + 23) < 0)
        {
          *(_QWORD *)(a4 + 8) = 1;
          a4 = *(_QWORD *)a4;
        }
        else
        {
          *(_BYTE *)(a4 + 23) = 1;
        }
        *(_WORD *)a4 = 8;
        break;
      case 'd':
        *(_DWORD *)(a5 + 160) |= 0x400u;
        break;
      case 's':
        *(_DWORD *)(a5 + 160) |= 0x4000u;
        break;
      case 'w':
        *(_DWORD *)(a5 + 160) |= 0x500u;
        std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:nn180100](a5, 95);
        break;
      default:
        if (*a2)
        {
LABEL_7:
          std::basic_regex<char,std::regex_traits<char>>::__parse_character_escape<char const*>(a1, a2, a3, (uint64_t *)a4);
        }
        else
        {
          if (*(char *)(a4 + 23) < 0)
          {
            *(_QWORD *)(a4 + 8) = 1;
            a4 = *(_QWORD *)a4;
          }
          else
          {
            *(_BYTE *)(a4 + 23) = 1;
          }
          *(_BYTE *)a4 = 0;
          *(_BYTE *)(a4 + 1) = 0;
        }
        break;
    }
  }
}

void std::__end_state<char>::__exec(uint64_t a1, _DWORD *a2)
{
  *a2 = -1000;
}

double geo::S2CellCoordinates::xyzFromTileLocalST<double>(uint64_t a1, double a2, double a3)
{
  double v3;
  double v4;
  double v5;
  BOOL v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;

  v3 = 1.0 / (double)(1 << *(_BYTE *)(a1 + 8));
  v4 = (double)*(unsigned int *)a1 * v3
     + -((double)*(unsigned int *)a1 * v3 - (double)(*(_DWORD *)a1 + 1) * v3) * a2;
  v5 = (double)*(unsigned int *)(a1 + 4) * v3
     + -((double)*(unsigned int *)(a1 + 4) * v3 - (double)(*(_DWORD *)(a1 + 4) + 1) * v3) * a3;
  v6 = v4 < 0.5;
  v7 = (1.0 - v4) * (1.0 - v4) * -1.33333333 + 0.333333333;
  v8 = v4 * v4 * 1.33333333 + -0.333333333;
  if (!v6)
    v7 = v8;
  v6 = v5 < 0.5;
  v9 = (1.0 - v5) * (1.0 - v5) * -1.33333333 + 0.333333333;
  v10 = v5 * v5 * 1.33333333 + -0.333333333;
  if (v6)
    v11 = v9;
  else
    v11 = v10;
  v12 = 1.0;
  v13 = 1.0;
  v14 = 1.0;
  switch(*(_BYTE *)(a1 + 9))
  {
    case 0:
      v13 = v7;
      v14 = v11;
      break;
    case 1:
      v12 = -v7;
      v14 = v11;
      break;
    case 2:
      v12 = -v7;
      v13 = -v11;
      break;
    case 3:
      v13 = -v11;
      v14 = -v7;
      v12 = -1.0;
      break;
    case 4:
      v14 = -v7;
      v13 = -1.0;
      v12 = v11;
      break;
    case 5:
      v14 = -1.0;
      v12 = v11;
      v13 = v7;
      break;
    default:
      return 1.0 / sqrt(v12 * v12 + v13 * v13 + v14 * v14) * v12;
  }
  return 1.0 / sqrt(v12 * v12 + v13 * v13 + v14 * v14) * v12;
}

uint64_t *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<gm::Matrix<float,2,1>>(uint64_t a1, unsigned int a2, unsigned int a3, _BYTE *a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unsigned __int16 *v18;
  unsigned __int16 *v19;
  unint64_t v20;
  uint64_t v21;
  unsigned int v22;
  unint64_t v23;
  unsigned __int16 *v24;
  unsigned __int16 *v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t *result;
  unsigned int v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unsigned __int16 *v34;
  unsigned int v35;
  uint64_t v36;
  unint64_t v37;
  _WORD *v38;
  unsigned __int16 *v39;
  unsigned __int16 *v40;
  unsigned int v41;

  v4 = *(_QWORD *)(a1 + 16 * a3 + 16);
  if (v4)
  {
    v6 = a1 + 16 * a3;
    v7 = *(unsigned __int16 *)(v6 + 56);
    if (!*(_WORD *)(v6 + 56))
      return gss::CartoStyle<gss::PropertyID>::valueForKeyAtZ<gm::Matrix<float,2,1>>(*(uint64_t **)(v4 + 72), 0x92u, a2, a4);
    v8 = *(_QWORD *)(v6 + 48);
    v9 = v8 + 8 * v7;
    if (a2 >= 0x17)
      v10 = 23;
    else
      v10 = a2;
    while (1)
    {
      v12 = *(uint64_t **)(*(_QWORD *)v8 + 72);
      if (!v12)
        goto LABEL_8;
      v15 = *v12;
      v14 = v12 + 2;
      v13 = v15;
      v16 = v15 + 80 * *((unsigned __int8 *)v14 + a2);
      v17 = *(unsigned __int16 *)(v16 + 10);
      if (!*(_WORD *)(v16 + 10))
      {
        v11 = 0;
        goto LABEL_7;
      }
      v18 = *(unsigned __int16 **)v16;
      if (!*(_BYTE *)(v16 + 15))
        break;
      v19 = *(unsigned __int16 **)v16;
      v20 = v17;
      if (v17 >= 0x1E)
      {
        do
        {
          v23 = v20 >> 1;
          v24 = &v19[v20 >> 1];
          v26 = *v24;
          v25 = v24 + 1;
          v20 += ~(v20 >> 1);
          if (v26 < 0x92)
            v19 = v25;
          else
            v20 = v23;
        }
        while (v20);
        if (v19 == &v18[v17] || *v19 != 146)
          goto LABEL_8;
        goto LABEL_28;
      }
      v21 = 0;
      while (1)
      {
        v22 = v18[v21];
        if (v22 >= 0x92)
          break;
        if (v17 == ++v21)
          goto LABEL_8;
      }
      v11 = (unsigned __int16)v21;
      if (v22 != 146)
        v11 = v17;
LABEL_7:
      if (v11 != (_DWORD)v17)
      {
        v29 = *((unsigned __int8 *)v14 + v10);
        v30 = v13 + 80 * *((unsigned __int8 *)v14 + v10);
        v31 = *(unsigned __int16 *)(v30 + 58);
        if (!*(_WORD *)(v30 + 58))
          return &gss::PropertySetValueHelper<gss::PropertyID,gm::Matrix<float,2,1>>::value(gss::PropertyID,gss::StylePropertySet<gss::PropertyID> const&)::_defaultValue;
        v32 = v13 + 80 * *((unsigned __int8 *)v14 + v10);
        v33 = *(_QWORD *)(v32 + 48);
        if (*(_BYTE *)(v32 + 63))
        {
          if (v31 < 0x1E)
          {
            v34 = 0;
            result = &gss::PropertySetValueHelper<gss::PropertyID,gm::Matrix<float,2,1>>::value(gss::PropertyID,gss::StylePropertySet<gss::PropertyID> const&)::_defaultValue;
            while (1)
            {
              v35 = *(unsigned __int16 *)(v33 + 2 * (_QWORD)v34);
              if (v35 >= 0x92)
                break;
              v34 = (unsigned __int16 *)((char *)v34 + 1);
              if ((unsigned __int16 *)v31 == v34)
                return result;
            }
            LODWORD(v34) = (unsigned __int16)v34;
            if (v35 != 146)
              LODWORD(v34) = v31;
            if (v34 >= v31)
              return &gss::PropertySetValueHelper<gss::PropertyID,gm::Matrix<float,2,1>>::value(gss::PropertyID,gss::StylePropertySet<gss::PropertyID> const&)::_defaultValue;
            return (uint64_t *)(v33 + *(unsigned __int16 *)(v13 + 80 * v29 + 56) + 8 * v34);
          }
          v34 = *(unsigned __int16 **)(v32 + 48);
          v37 = v31;
          do
          {
            v38 = (_WORD *)(v37 >> 1);
            v39 = &v34[v37 >> 1];
            v41 = *v39;
            v40 = v39 + 1;
            v37 += ~(v37 >> 1);
            if (v41 < 0x92)
              v34 = v40;
            else
              v37 = (unint64_t)v38;
          }
          while (v37);
          if (v34 == (unsigned __int16 *)(v33 + 2 * v31) || *v34 != 146)
            return &gss::PropertySetValueHelper<gss::PropertyID,gm::Matrix<float,2,1>>::value(gss::PropertyID,gss::StylePropertySet<gss::PropertyID> const&)::_defaultValue;
        }
        else
        {
          v36 = 2 * v31;
          v34 = *(unsigned __int16 **)(v32 + 48);
          while (*v34 != 146)
          {
            ++v34;
            v36 -= 2;
            if (!v36)
            {
              LODWORD(v34) = v33 + 2 * v31;
              break;
            }
          }
        }
        LODWORD(v34) = (unsigned __int16)(((_DWORD)v34 - v33) >> 1);
        if (v34 >= v31)
          return &gss::PropertySetValueHelper<gss::PropertyID,gm::Matrix<float,2,1>>::value(gss::PropertyID,gss::StylePropertySet<gss::PropertyID> const&)::_defaultValue;
        return (uint64_t *)(v33 + *(unsigned __int16 *)(v13 + 80 * v29 + 56) + 8 * v34);
      }
LABEL_8:
      v8 += 8;
      if (v8 == v9)
        return gss::CartoStyle<gss::PropertyID>::valueForKeyAtZ<gm::Matrix<float,2,1>>(*(uint64_t **)(v4 + 72), 0x92u, a2, a4);
    }
    v27 = 2 * v17;
    v19 = *(unsigned __int16 **)v16;
    while (*v19 != 146)
    {
      ++v19;
      v27 -= 2;
      if (!v27)
      {
        LODWORD(v19) = (_DWORD)v18 + 2 * v17;
        break;
      }
    }
LABEL_28:
    v11 = (unsigned __int16)(((_DWORD)v19 - (_DWORD)v18) >> 1);
    goto LABEL_7;
  }
  if (a4)
    *a4 = 0;
  return (uint64_t *)gss::defaultValueForKey<gss::PropertyID,gm::Matrix<float,2,1>>();
}

uint64_t *gss::CartoStyle<gss::PropertyID>::valueForKeyAtZ<gm::Matrix<float,2,1>>(uint64_t *result, unsigned int a2, unsigned int a3, _BYTE *a4)
{
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unsigned __int16 *v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  unsigned __int16 *v13;
  unsigned __int16 *v14;
  unint64_t v15;
  unint64_t v16;
  unsigned __int16 *v17;
  unsigned __int16 *v18;
  unsigned int v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unsigned int v25;
  unsigned __int16 v26;
  uint64_t v27;
  unsigned __int16 *v28;
  unsigned __int16 *v29;
  unint64_t v30;
  unint64_t v31;
  unsigned __int16 *v32;
  unsigned __int16 *v33;
  unsigned int v34;

  if (!result)
    goto LABEL_38;
  v4 = a3 >= 0x17 ? 23 : a3;
  v5 = *((unsigned __int8 *)result + v4 + 16);
  v6 = *result;
  v7 = *result + 80 * v5;
  v8 = *(unsigned __int16 *)(v7 + 10);
  if (!*(_WORD *)(v7 + 10))
    goto LABEL_38;
  v9 = *(unsigned __int16 **)v7;
  if (!*(_BYTE *)(v7 + 15))
  {
    v12 = 2 * v8;
    v13 = *(unsigned __int16 **)v7;
    while (*v13 != a2)
    {
      ++v13;
      v12 -= 2;
      if (!v12)
      {
        v13 = &v9[v8];
        break;
      }
    }
    if ((_DWORD)v8 == (unsigned __int16)((unint64_t)((char *)v13 - (char *)v9) >> 1))
      goto LABEL_38;
    goto LABEL_27;
  }
  if (v8 < 0x1E)
  {
    v10 = 0;
    while (1)
    {
      v11 = v9[v10];
      if (v11 >= a2)
        break;
      if (v8 == ++v10)
        goto LABEL_38;
    }
    if (v11 == a2)
      v26 = v10;
    else
      v26 = v8;
    if ((_DWORD)v8 == v26)
      goto LABEL_38;
    goto LABEL_27;
  }
  v14 = *(unsigned __int16 **)v7;
  v15 = v8;
  do
  {
    v16 = v15 >> 1;
    v17 = &v14[v15 >> 1];
    v19 = *v17;
    v18 = v17 + 1;
    v15 += ~(v15 >> 1);
    if (v19 < a2)
      v14 = v18;
    else
      v15 = v16;
  }
  while (v15);
  if (v14 == &v9[v8]
    || *v14 != a2
    || (_DWORD)v8 == (unsigned __int16)((unint64_t)((char *)v14 - (char *)v9) >> 1))
  {
LABEL_38:
    if (a4)
      *a4 = 0;
    return (uint64_t *)gss::defaultValueForKey<gss::PropertyID,gm::Matrix<float,2,1>>();
  }
LABEL_27:
  v20 = v6 + 80 * v5;
  v21 = *(unsigned __int16 *)(v20 + 58);
  if (!*(_WORD *)(v20 + 58))
    return &gss::PropertySetValueHelper<gss::PropertyID,gm::Matrix<float,2,1>>::value(gss::PropertyID,gss::StylePropertySet<gss::PropertyID> const&)::_defaultValue;
  v22 = v6 + 80 * v5;
  v23 = *(_QWORD *)(v22 + 48);
  if (*(_BYTE *)(v22 + 63))
  {
    if (v21 >= 0x1E)
    {
      v29 = *(unsigned __int16 **)(v22 + 48);
      v30 = v21;
      do
      {
        v31 = v30 >> 1;
        v32 = &v29[v30 >> 1];
        v34 = *v32;
        v33 = v32 + 1;
        v30 += ~(v30 >> 1);
        if (v34 < a2)
          v29 = v33;
        else
          v30 = v31;
      }
      while (v30);
      if (v29 == (unsigned __int16 *)(v23 + 2 * v21) || *v29 != a2)
        return &gss::PropertySetValueHelper<gss::PropertyID,gm::Matrix<float,2,1>>::value(gss::PropertyID,gss::StylePropertySet<gss::PropertyID> const&)::_defaultValue;
      v24 = ((unint64_t)v29 - v23) >> 1;
    }
    else
    {
      v24 = 0;
      result = &gss::PropertySetValueHelper<gss::PropertyID,gm::Matrix<float,2,1>>::value(gss::PropertyID,gss::StylePropertySet<gss::PropertyID> const&)::_defaultValue;
      while (1)
      {
        v25 = *(unsigned __int16 *)(v23 + 2 * v24);
        if (v25 >= a2)
          break;
        if (v21 == ++v24)
          return result;
      }
      if (v25 != a2)
        LOWORD(v24) = v21;
    }
  }
  else
  {
    v27 = 2 * v21;
    v28 = *(unsigned __int16 **)(v22 + 48);
    while (*v28 != a2)
    {
      ++v28;
      v27 -= 2;
      if (!v27)
      {
        v28 = (unsigned __int16 *)(v23 + 2 * v21);
        break;
      }
    }
    v24 = ((unint64_t)v28 - v23) >> 1;
  }
  if ((_DWORD)v21 == (unsigned __int16)v24)
    return &gss::PropertySetValueHelper<gss::PropertyID,gm::Matrix<float,2,1>>::value(gss::PropertyID,gss::StylePropertySet<gss::PropertyID> const&)::_defaultValue;
  if (v21 > (unsigned __int16)v24)
    return (uint64_t *)(v23 + *(unsigned __int16 *)(v6 + 80 * v5 + 56) + 8 * (unsigned __int16)v24);
  return result;
}

void gss::StylesheetQuery<gss::ScenePropertyID>::resolve(uint64_t a1)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_weak_owners;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  BOOL v15;
  uint64_t v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  pthread_rwlock_t *v21;
  geo::read_write_lock *v22;
  const char *v23;
  unint64_t v24;
  _DWORD *v25;
  _DWORD *v26;
  unsigned __int16 *v27;
  unsigned __int16 *v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  std::__shared_weak_count *v32;
  std::__shared_weak_count *v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  _BOOL4 v40;
  geo::read_write_lock *v41;
  const char *v42;
  unint64_t *v43;
  unint64_t v44;
  uint64_t v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  BOOL v52;
  uint64_t v53;
  uint64_t v54;
  std::__shared_weak_count *v55;
  uint64_t v56;
  std::__shared_weak_count *v57;
  uint64_t v58;
  std::__shared_weak_count *v59;
  uint64_t v60;
  std::__shared_weak_count *v61;

  v60 = 0;
  v61 = 0;
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2 || (v61 = std::__shared_weak_count::lock(v2)) == 0 || (v3 = *(_QWORD *)(a1 + 8), (v60 = v3) == 0))
  {
    v58 = 0;
    v59 = 0;
LABEL_39:
    v32 = *(std::__shared_weak_count **)(a1 + 296);
    *(_QWORD *)(a1 + 288) = 0;
    *(_QWORD *)(a1 + 296) = 0;
    if (v32)
      std::__shared_weak_count::__release_weak(v32);
    goto LABEL_41;
  }
  v5 = *(_QWORD *)(v3 + 16);
  v4 = *(std::__shared_weak_count **)(v3 + 24);
  v58 = v5;
  v59 = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  if (!v5)
    goto LABEL_39;
  gss::StylesheetManager<gss::ScenePropertyID>::sourceStyleAttributes(&v56, v3, *(uint64_t **)(a1 + 240), *(uint64_t **)(a1 + 248), a1 + 272);
  gss::StyleSheet<gss::ScenePropertyID>::styleMatchingAttributes(&v54, v5, (uint64_t)&v56);
  v8 = v54;
  v9 = v55;
  if (v55)
  {
    p_shared_weak_owners = (unint64_t *)&v55->__shared_weak_owners_;
    do
      v11 = __ldxr(p_shared_weak_owners);
    while (__stxr(v11 + 1, p_shared_weak_owners));
  }
  v12 = *(std::__shared_weak_count **)(a1 + 296);
  *(_QWORD *)(a1 + 288) = v8;
  *(_QWORD *)(a1 + 296) = v9;
  if (v12)
  {
    std::__shared_weak_count::__release_weak(v12);
    v9 = v55;
  }
  if (v9)
  {
    v13 = (unint64_t *)&v9->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  if (BYTE6(v57))
    v15 = 1;
  else
    v15 = v56 == 0;
  if (!v15)
  {
    v16 = gss::Allocator::instance((gss::Allocator *)v12);
    (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v16 + 40))(v16, v56, WORD2(v57));
  }
  if (!v58)
    goto LABEL_41;
  v17 = *(_QWORD *)(v60 + 520);
  v18 = *(std::__shared_weak_count **)(v60 + 528);
  v56 = v17;
  v57 = v18;
  if (v18)
  {
    v19 = (unint64_t *)&v18->__shared_owners_;
    do
      v20 = __ldxr(v19);
    while (__stxr(v20 + 1, v19));
  }
  v21 = (pthread_rwlock_t *)(v17 + 16);
  v22 = (geo::read_write_lock *)pthread_rwlock_rdlock((pthread_rwlock_t *)(v17 + 16));
  if ((_DWORD)v22)
    geo::read_write_lock::logFailure(v22, (uint64_t)"read lock", v23);
  v24 = *(unsigned __int16 *)(v17 + 242);
  if ((_DWORD)v24 != *(unsigned __int16 *)(v17 + 226))
    goto LABEL_54;
  if (!*(_WORD *)(v17 + 242))
  {
    v40 = 0;
    goto LABEL_59;
  }
  v25 = *(_DWORD **)(v17 + 232);
  v26 = *(_DWORD **)(v17 + 216);
  if (*v25 != *v26
    || (v27 = (unsigned __int16 *)((char *)v26 + *(unsigned __int16 *)(v17 + 224)),
        v28 = (unsigned __int16 *)((char *)v25 + *(unsigned __int16 *)(v17 + 240)),
        *v28 != *v27))
  {
LABEL_54:
    v40 = 1;
    goto LABEL_59;
  }
  v29 = 0;
  v30 = 1;
  while (1)
  {
    if (v24 == v30)
    {
      v31 = *(unsigned __int16 *)(v17 + 242);
      goto LABEL_58;
    }
    v31 = v30;
    ++v29;
    if (v25[v30] != v26[v30])
      break;
    ++v30;
    if (v28[v31] != v27[v31])
      goto LABEL_58;
  }
  v31 = v29;
LABEL_58:
  v40 = v31 < v24;
LABEL_59:
  v41 = (geo::read_write_lock *)pthread_rwlock_unlock(v21);
  if ((_DWORD)v41)
    geo::read_write_lock::logFailure(v41, (uint64_t)"unlock", v42);
  if (v18)
  {
    v43 = (unint64_t *)&v18->__shared_owners_;
    do
      v44 = __ldaxr(v43);
    while (__stlxr(v44 - 1, v43));
    if (!v44)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  if (v40)
  {
    gss::StylesheetManager<gss::ScenePropertyID>::targetStyleAttributes(&v56, v60, *(uint64_t **)(a1 + 240), *(uint64_t **)(a1 + 248), a1 + 272);
    gss::StyleSheet<gss::ScenePropertyID>::styleMatchingAttributes(&v54, v58, (uint64_t)&v56);
    v45 = v54;
    v46 = v55;
    if (v55)
    {
      v47 = (unint64_t *)&v55->__shared_weak_owners_;
      do
        v48 = __ldxr(v47);
      while (__stxr(v48 + 1, v47));
    }
    v49 = *(std::__shared_weak_count **)(a1 + 312);
    *(_QWORD *)(a1 + 304) = v45;
    *(_QWORD *)(a1 + 312) = v46;
    if (v49)
    {
      std::__shared_weak_count::__release_weak(v49);
      v46 = v55;
    }
    if (v46)
    {
      v50 = (unint64_t *)&v46->__shared_owners_;
      do
        v51 = __ldaxr(v50);
      while (__stlxr(v51 - 1, v50));
      if (!v51)
      {
        ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
        std::__shared_weak_count::__release_weak(v46);
      }
    }
    if (BYTE6(v57))
      v52 = 1;
    else
      v52 = v56 == 0;
    if (!v52)
    {
      v53 = gss::Allocator::instance((gss::Allocator *)v49);
      (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v53 + 40))(v53, v56, WORD2(v57));
    }
    goto LABEL_43;
  }
LABEL_41:
  v33 = *(std::__shared_weak_count **)(a1 + 312);
  *(_QWORD *)(a1 + 304) = 0;
  *(_QWORD *)(a1 + 312) = 0;
  if (v33)
    std::__shared_weak_count::__release_weak(v33);
LABEL_43:
  v34 = v59;
  if (v59)
  {
    v35 = (unint64_t *)&v59->__shared_owners_;
    do
      v36 = __ldaxr(v35);
    while (__stlxr(v36 - 1, v35));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      std::__shared_weak_count::__release_weak(v34);
    }
  }
  v37 = v61;
  if (v61)
  {
    v38 = (unint64_t *)&v61->__shared_owners_;
    do
      v39 = __ldaxr(v38);
    while (__stlxr(v39 - 1, v38));
    if (!v39)
    {
      ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
      std::__shared_weak_count::__release_weak(v37);
    }
  }
}

void sub_19F0CC7A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  va_list va1;
  uint64_t v9;
  va_list va2;

  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v7 = va_arg(va2, _QWORD);
  v9 = va_arg(va2, _QWORD);
  gss::QueryOverrides::~QueryOverrides((gss::QueryOverrides *)va);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)va2);
  _Unwind_Resume(a1);
}

void gss::StylesheetManager<gss::ScenePropertyID>::targetStyleAttributes(uint64_t *a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t a5)
{
  uint64_t v10;
  unint64_t v11;
  char *v12;
  uint64_t v13;
  geo::read_write_lock *v14;
  const char *v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  unsigned int v19;
  geo::read_write_lock *v20;
  const char *v21;
  unsigned int v22;
  unsigned int v23;
  uint64_t v24;
  unsigned int v25;
  void *__p;
  void *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  char v32;
  char v33;

  __p = 0;
  v27 = 0;
  v28 = 0;
  v10 = a4 - a3;
  v11 = v10 + 20;
  if (v10 == -20)
  {
    v12 = 0;
  }
  else
  {
    if (v11 >> 61)
      abort();
    v12 = (char *)operator new(8 * v11);
    __p = v12;
    v27 = v12;
    v28 = &v12[8 * v11];
  }
  std::vector<std::pair<gss::StyleAttribute,unsigned short>>::__insert_with_size[abi:nn180100]<std::__wrap_iter<std::pair<gss::StyleAttribute,unsigned short> const*>,std::__wrap_iter<std::pair<gss::StyleAttribute,unsigned short> const*>>((unint64_t *)&__p, (uint64_t)v12, a3, a4, v10);
  v13 = *(_QWORD *)(a2 + 520);
  if (v13)
  {
    v29 = v13 + 16;
    v14 = (geo::read_write_lock *)pthread_rwlock_rdlock((pthread_rwlock_t *)(v13 + 16));
    if ((_DWORD)v14)
      geo::read_write_lock::logFailure(v14, (uint64_t)"read lock", v15);
    v16 = *(unsigned __int16 *)(v13 + 242);
    v30 = v13 + 232;
    v31 = 0;
    v32 = 0;
    v33 = 0;
    if (v16)
    {
      v17 = 0;
      v18 = 0;
      do
      {
        ++v18;
        v19 = v17 + 1;
        if (v17 + 1 < v16)
          ++v17;
        else
          v17 = v16;
      }
      while (v19 < v16);
    }
    else
    {
      v18 = 0;
    }
    std::vector<std::pair<gss::StyleAttribute,unsigned short>>::__insert_with_size[abi:nn180100]<geo::intern_linear_map<gss::StyleAttribute,unsigned short,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::Iterator,geo::intern_linear_map<gss::StyleAttribute,unsigned short,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::Iterator>((unint64_t *)&__p, v27, &v30, v13 + 232, v16, v18);
    v20 = (geo::read_write_lock *)pthread_rwlock_unlock((pthread_rwlock_t *)(v13 + 16));
    if ((_DWORD)v20)
      geo::read_write_lock::logFailure(v20, (uint64_t)"unlock", v21);
    v22 = *(unsigned __int16 *)(a5 + 10);
    v30 = a5;
    v31 = 0;
    v32 = 0;
    v33 = 0;
    if (v22)
    {
      v23 = 0;
      v24 = 0;
      do
      {
        ++v24;
        v25 = v23 + 1;
        if (v23 + 1 < v22)
          ++v23;
        else
          v23 = v22;
      }
      while (v25 < v22);
    }
    else
    {
      v24 = 0;
    }
    std::vector<std::pair<gss::StyleAttribute,unsigned short>>::__insert_with_size[abi:nn180100]<geo::intern_linear_map<gss::StyleAttribute,unsigned short,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::Iterator,geo::intern_linear_map<gss::StyleAttribute,unsigned short,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::Iterator>((unint64_t *)&__p, v27, &v30, a5, v22, v24);
  }
  gss::ResolveMultiAttributeVectorToMap((unsigned int **)&__p, a1);
  if (__p)
  {
    v27 = __p;
    operator delete(__p);
  }
}

void sub_19F0CC990(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, pthread_rwlock_t *a13)
{
  geo::write_lock_guard::~write_lock_guard(&a13);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void gss::StylesheetManager<gss::ScenePropertyID>::sourceStyleAttributes(uint64_t *a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t a5)
{
  uint64_t v10;
  unint64_t v11;
  char *v12;
  uint64_t v13;
  geo::read_write_lock *v14;
  const char *v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  unsigned int v19;
  geo::read_write_lock *v20;
  const char *v21;
  unsigned int v22;
  unsigned int v23;
  uint64_t v24;
  unsigned int v25;
  void *__p;
  void *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  char v32;
  char v33;

  __p = 0;
  v27 = 0;
  v28 = 0;
  v10 = a4 - a3;
  v11 = v10 + 20;
  if (v10 == -20)
  {
    v12 = 0;
  }
  else
  {
    if (v11 >> 61)
      abort();
    v12 = (char *)operator new(8 * v11);
    __p = v12;
    v27 = v12;
    v28 = &v12[8 * v11];
  }
  std::vector<std::pair<gss::StyleAttribute,unsigned short>>::__insert_with_size[abi:nn180100]<std::__wrap_iter<std::pair<gss::StyleAttribute,unsigned short> const*>,std::__wrap_iter<std::pair<gss::StyleAttribute,unsigned short> const*>>((unint64_t *)&__p, (uint64_t)v12, a3, a4, v10);
  v13 = *(_QWORD *)(a2 + 520);
  if (v13)
  {
    v29 = v13 + 16;
    v14 = (geo::read_write_lock *)pthread_rwlock_rdlock((pthread_rwlock_t *)(v13 + 16));
    if ((_DWORD)v14)
      geo::read_write_lock::logFailure(v14, (uint64_t)"read lock", v15);
    v16 = *(unsigned __int16 *)(v13 + 226);
    v30 = v13 + 216;
    v31 = 0;
    v32 = 0;
    v33 = 0;
    if (v16)
    {
      v17 = 0;
      v18 = 0;
      do
      {
        ++v18;
        v19 = v17 + 1;
        if (v17 + 1 < v16)
          ++v17;
        else
          v17 = v16;
      }
      while (v19 < v16);
    }
    else
    {
      v18 = 0;
    }
    std::vector<std::pair<gss::StyleAttribute,unsigned short>>::__insert_with_size[abi:nn180100]<geo::intern_linear_map<gss::StyleAttribute,unsigned short,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::Iterator,geo::intern_linear_map<gss::StyleAttribute,unsigned short,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::Iterator>((unint64_t *)&__p, v27, &v30, v13 + 216, v16, v18);
    v20 = (geo::read_write_lock *)pthread_rwlock_unlock((pthread_rwlock_t *)(v13 + 16));
    if ((_DWORD)v20)
      geo::read_write_lock::logFailure(v20, (uint64_t)"unlock", v21);
    v22 = *(unsigned __int16 *)(a5 + 10);
    v30 = a5;
    v31 = 0;
    v32 = 0;
    v33 = 0;
    if (v22)
    {
      v23 = 0;
      v24 = 0;
      do
      {
        ++v24;
        v25 = v23 + 1;
        if (v23 + 1 < v22)
          ++v23;
        else
          v23 = v22;
      }
      while (v25 < v22);
    }
    else
    {
      v24 = 0;
    }
    std::vector<std::pair<gss::StyleAttribute,unsigned short>>::__insert_with_size[abi:nn180100]<geo::intern_linear_map<gss::StyleAttribute,unsigned short,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::Iterator,geo::intern_linear_map<gss::StyleAttribute,unsigned short,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::Iterator>((unint64_t *)&__p, v27, &v30, a5, v22, v24);
  }
  gss::ResolveMultiAttributeVectorToMap((unsigned int **)&__p, a1);
  if (__p)
  {
    v27 = __p;
    operator delete(__p);
  }
}

void sub_19F0CCB64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, pthread_rwlock_t *a13)
{
  geo::write_lock_guard::~write_lock_guard(&a13);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t gss::ClientStyleState<gss::PropertyID>::setStateWithClientStyleState(uint64_t result, uint64_t a2)
{
  unsigned int v2;
  uint64_t v4;
  pthread_rwlock_t *v5;
  geo::read_write_lock *v6;
  const char *v7;
  unsigned int v8;
  geo::read_write_lock *v9;
  const char *v10;
  geo::read_write_lock *v11;
  const char *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  geo::read_write_lock *v19;
  const char *v20;
  unsigned int v21;
  float v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  __int128 v26;

  v2 = atomic_load((unsigned int *)(result + 248));
  if (v2 != *(_DWORD *)(a2 + 248))
  {
    v4 = result;
    *(_QWORD *)((char *)&v26 + 7) = 0;
    *(_QWORD *)&v26 = 0;
    HIBYTE(v26) = 1;
    *(_QWORD *)((char *)&v25 + 7) = 0;
    HIBYTE(v25) = 1;
    v5 = (pthread_rwlock_t *)(a2 + 16);
    *(_QWORD *)&v25 = 0;
    v6 = (geo::read_write_lock *)pthread_rwlock_rdlock((pthread_rwlock_t *)(a2 + 16));
    if ((_DWORD)v6)
      geo::read_write_lock::logFailure(v6, (uint64_t)"read lock", v7);
    if (&v26 != (__int128 *)(a2 + 216))
    {
      *(_QWORD *)((char *)&v26 + 7) = 0;
      *(_QWORD *)&v26 = 0;
      HIBYTE(v26) = 1;
      geo::intern_linear_map<gss::StyleAttribute,unsigned short,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::copy(&v26, a2 + 216);
    }
    if (&v25 != (__int128 *)(a2 + 232))
    {
      *(_QWORD *)((char *)&v25 + 7) = 0;
      *(_QWORD *)&v25 = 0;
      HIBYTE(v25) = 1;
      geo::intern_linear_map<gss::StyleAttribute,unsigned short,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::copy(&v25, a2 + 232);
    }
    v8 = *(_DWORD *)(a2 + 248);
    v9 = (geo::read_write_lock *)pthread_rwlock_unlock(v5);
    if ((_DWORD)v9)
      geo::read_write_lock::logFailure(v9, (uint64_t)"unlock", v10);
    v11 = (geo::read_write_lock *)pthread_rwlock_wrlock((pthread_rwlock_t *)(v4 + 16));
    if ((_DWORD)v11)
      geo::read_write_lock::logFailure(v11, (uint64_t)"write lock", v12);
    v13 = (_QWORD *)(v4 + 216);
    if ((__int128 *)(v4 + 216) != &v26)
    {
      if (!*(_BYTE *)(v4 + 230) && *v13)
      {
        v14 = gss::Allocator::instance(v11);
        v11 = (geo::read_write_lock *)(*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v14 + 40))(v14, *(_QWORD *)(v4 + 216), *(unsigned __int16 *)(v4 + 228));
        *v13 = 0;
      }
      v15 = *((_QWORD *)&v26 + 1);
      *(_QWORD *)(v4 + 216) = v26;
      *(_DWORD *)(v4 + 224) = v15;
      *(_WORD *)(v4 + 228) = WORD2(v15);
      *(_WORD *)(v4 + 230) = HIWORD(v26);
      *(_QWORD *)((char *)&v26 + 7) = 0;
      *(_QWORD *)&v26 = 0;
      HIBYTE(v26) = 1;
    }
    v16 = (_QWORD *)(v4 + 232);
    if ((__int128 *)(v4 + 232) != &v25)
    {
      if (!*(_BYTE *)(v4 + 246) && *v16)
      {
        v17 = gss::Allocator::instance(v11);
        (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v17 + 40))(v17, *(_QWORD *)(v4 + 232), *(unsigned __int16 *)(v4 + 244));
        *v16 = 0;
      }
      v18 = *((_QWORD *)&v25 + 1);
      *(_QWORD *)(v4 + 232) = v25;
      *(_DWORD *)(v4 + 240) = v18;
      *(_WORD *)(v4 + 244) = WORD2(v18);
      *(_WORD *)(v4 + 246) = HIWORD(v25);
      *(_QWORD *)((char *)&v25 + 7) = 0;
      *(_QWORD *)&v25 = 0;
      HIBYTE(v25) = 1;
    }
    atomic_store(v8, (unsigned int *)(v4 + 248));
    v19 = (geo::read_write_lock *)pthread_rwlock_unlock((pthread_rwlock_t *)(v4 + 16));
    if ((_DWORD)v19)
      geo::read_write_lock::logFailure(v19, (uint64_t)"unlock", v20);
    v21 = atomic_load((unsigned int *)(a2 + 256));
    atomic_store(v21, (unsigned int *)(v4 + 256));
    v22 = COERCE_FLOAT(atomic_load((unsigned int *)(v4 + 256)));
    result = v22 > 0.0 || gss::ClientStyleState<gss::PropertyID>::hasTargetStyleAttributes(v4);
    atomic_store(result, (unsigned __int8 *)(v4 + 254));
    if (!BYTE14(v25) && (_QWORD)v25)
    {
      v23 = gss::Allocator::instance((gss::Allocator *)result);
      result = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v23 + 40))(v23, v25, WORD6(v25));
    }
    if (!BYTE14(v26))
    {
      if ((_QWORD)v26)
      {
        v24 = gss::Allocator::instance((gss::Allocator *)result);
        return (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v24 + 40))(v24, v26, WORD6(v26));
      }
    }
  }
  return result;
}

void sub_19F0CCE7C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  pthread_rwlock_t *v3;
  va_list va;
  uint64_t v5;
  va_list va1;
  uint64_t v7;
  va_list va2;

  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, pthread_rwlock_t *);
  va_copy(va2, va1);
  v5 = va_arg(va2, _QWORD);
  v7 = va_arg(va2, _QWORD);
  geo::write_lock_guard::~write_lock_guard((pthread_rwlock_t **)va);
  gss::QueryOverrides::~QueryOverrides((gss::QueryOverrides *)va1);
  gss::QueryOverrides::~QueryOverrides((gss::QueryOverrides *)va2);
  _Unwind_Resume(a1);
}

void gss::StylesheetQuery<gss::PropertyID>::resolve(uint64_t a1)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_weak_owners;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  BOOL v15;
  uint64_t v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  _BOOL4 hasTargetStyleAttributes;
  unint64_t *v22;
  unint64_t v23;
  uint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  BOOL v31;
  uint64_t v32;
  std::__shared_weak_count *v33;
  std::__shared_weak_count *v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  uint64_t v41;
  std::__shared_weak_count *v42;
  uint64_t v43;
  std::__shared_weak_count *v44;
  uint64_t v45;
  std::__shared_weak_count *v46;
  uint64_t v47;
  std::__shared_weak_count *v48;

  v47 = 0;
  v48 = 0;
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2 || (v48 = std::__shared_weak_count::lock(v2)) == 0 || (v3 = *(_QWORD *)(a1 + 8), (v47 = v3) == 0))
  {
    v45 = 0;
    v46 = 0;
LABEL_49:
    v33 = *(std::__shared_weak_count **)(a1 + 296);
    *(_QWORD *)(a1 + 288) = 0;
    *(_QWORD *)(a1 + 296) = 0;
    if (v33)
      std::__shared_weak_count::__release_weak(v33);
    goto LABEL_51;
  }
  v5 = *(_QWORD *)(v3 + 16);
  v4 = *(std::__shared_weak_count **)(v3 + 24);
  v45 = v5;
  v46 = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  if (!v5)
    goto LABEL_49;
  gss::StylesheetManager<gss::PropertyID>::sourceStyleAttributes(&v43, v3, *(uint64_t **)(a1 + 240), *(uint64_t **)(a1 + 248), a1 + 272);
  gss::StyleSheet<gss::PropertyID>::styleMatchingAttributes(&v41, v5, (uint64_t)&v43);
  v8 = v41;
  v9 = v42;
  if (v42)
  {
    p_shared_weak_owners = (unint64_t *)&v42->__shared_weak_owners_;
    do
      v11 = __ldxr(p_shared_weak_owners);
    while (__stxr(v11 + 1, p_shared_weak_owners));
  }
  v12 = *(std::__shared_weak_count **)(a1 + 296);
  *(_QWORD *)(a1 + 288) = v8;
  *(_QWORD *)(a1 + 296) = v9;
  if (v12)
  {
    std::__shared_weak_count::__release_weak(v12);
    v9 = v42;
  }
  if (v9)
  {
    v13 = (unint64_t *)&v9->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  if (BYTE6(v44))
    v15 = 1;
  else
    v15 = v43 == 0;
  if (!v15)
  {
    v16 = gss::Allocator::instance((gss::Allocator *)v12);
    (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v16 + 40))(v16, v43, WORD2(v44));
  }
  if (v45)
  {
    v17 = *(_QWORD *)(v47 + 520);
    v18 = *(std::__shared_weak_count **)(v47 + 528);
    v43 = v17;
    v44 = v18;
    if (v18)
    {
      v19 = (unint64_t *)&v18->__shared_owners_;
      do
        v20 = __ldxr(v19);
      while (__stxr(v20 + 1, v19));
    }
    hasTargetStyleAttributes = gss::ClientStyleState<gss::PropertyID>::hasTargetStyleAttributes(v17);
    if (v18)
    {
      v22 = (unint64_t *)&v18->__shared_owners_;
      do
        v23 = __ldaxr(v22);
      while (__stlxr(v23 - 1, v22));
      if (!v23)
      {
        ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
        std::__shared_weak_count::__release_weak(v18);
      }
    }
    if (hasTargetStyleAttributes)
    {
      gss::StylesheetManager<gss::PropertyID>::targetStyleAttributes(&v43, v47, *(uint64_t **)(a1 + 240), *(uint64_t **)(a1 + 248), a1 + 272);
      gss::StyleSheet<gss::PropertyID>::styleMatchingAttributes(&v41, v45, (uint64_t)&v43);
      v24 = v41;
      v25 = v42;
      if (v42)
      {
        v26 = (unint64_t *)&v42->__shared_weak_owners_;
        do
          v27 = __ldxr(v26);
        while (__stxr(v27 + 1, v26));
      }
      v28 = *(std::__shared_weak_count **)(a1 + 312);
      *(_QWORD *)(a1 + 304) = v24;
      *(_QWORD *)(a1 + 312) = v25;
      if (v28)
      {
        std::__shared_weak_count::__release_weak(v28);
        v25 = v42;
      }
      if (v25)
      {
        v29 = (unint64_t *)&v25->__shared_owners_;
        do
          v30 = __ldaxr(v29);
        while (__stlxr(v30 - 1, v29));
        if (!v30)
        {
          ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
          std::__shared_weak_count::__release_weak(v25);
        }
      }
      if (BYTE6(v44))
        v31 = 1;
      else
        v31 = v43 == 0;
      if (!v31)
      {
        v32 = gss::Allocator::instance((gss::Allocator *)v28);
        (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v32 + 40))(v32, v43, WORD2(v44));
      }
      goto LABEL_53;
    }
  }
LABEL_51:
  v34 = *(std::__shared_weak_count **)(a1 + 312);
  *(_QWORD *)(a1 + 304) = 0;
  *(_QWORD *)(a1 + 312) = 0;
  if (v34)
    std::__shared_weak_count::__release_weak(v34);
LABEL_53:
  v35 = v46;
  if (v46)
  {
    v36 = (unint64_t *)&v46->__shared_owners_;
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 - 1, v36));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
      std::__shared_weak_count::__release_weak(v35);
    }
  }
  v38 = v48;
  if (v48)
  {
    v39 = (unint64_t *)&v48->__shared_owners_;
    do
      v40 = __ldaxr(v39);
    while (__stlxr(v40 - 1, v39));
    if (!v40)
    {
      ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
      std::__shared_weak_count::__release_weak(v38);
    }
  }
}

void sub_19F0CD1A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  va_list va1;
  uint64_t v9;
  va_list va2;

  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v7 = va_arg(va2, _QWORD);
  v9 = va_arg(va2, _QWORD);
  gss::QueryOverrides::~QueryOverrides((gss::QueryOverrides *)va);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)va2);
  _Unwind_Resume(a1);
}

void gss::StyleSheet<gss::PropertyID>::styleMatchingAttributes(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  uint64_t v7;
  geo::read_write_lock *v8;
  const char *v9;
  unsigned __int16 *v10;
  unint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  int8x8_t v15;
  uint8x8_t v16;
  unint64_t v17;
  uint64_t **v18;
  uint64_t *v19;
  uint64_t v20;
  unsigned __int16 *v21;
  uint64_t v22;
  _DWORD *v23;
  unsigned __int16 *v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t v30;
  _DWORD *v31;
  unsigned __int16 *v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  geo::read_write_lock *v37;
  const char *v38;
  unsigned __int8 v39;
  unsigned __int8 v40;
  geo::read_write_lock *v41;
  const char *v42;
  unsigned __int16 *v43;
  unint64_t v44;
  unsigned int *v45;
  unsigned int v46;
  unint64_t v47;
  unsigned int v48;
  unint64_t v49;
  uint8x8_t v50;
  uint64_t **v51;
  uint64_t *v52;
  unint64_t v53;
  unsigned __int16 *v54;
  uint64_t v55;
  _DWORD *v56;
  unsigned __int16 *v57;
  uint64_t v58;
  unint64_t v59;
  unint64_t v60;
  _DWORD *v61;
  unsigned __int16 *v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t *v70;
  unint64_t v71;
  float v72;
  float v73;
  _BOOL8 v74;
  unint64_t v75;
  unint64_t v76;
  size_t prime;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  _QWORD *v81;
  uint64_t v82;
  size_t v83;
  size_t v84;
  size_t v85;
  _QWORD *i;
  size_t v87;
  uint64_t v88;
  uint64_t v89;
  unint64_t v90;
  uint8x8_t v91;
  uint64_t v92;
  _QWORD *v93;
  uint64_t v94;
  size_t v95;
  uint64_t v96;
  uint64_t *v97;
  unint64_t v98;
  const char *v99;
  uint64_t v100;
  uint64_t v101;
  __int128 v102;
  _QWORD v103[2];
  char v104;

  geo::intern_linear_map<gss::StyleAttribute,unsigned short,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::shrink_to_fit(a3);
  v7 = *(_QWORD *)(a3 + 8);
  *(_QWORD *)&v102 = *(_QWORD *)a3;
  DWORD2(v102) = v7;
  WORD6(v102) = WORD2(v7);
  HIWORD(v102) = *(_WORD *)(a3 + 14);
  *(_QWORD *)(a3 + 7) = 0;
  *(_QWORD *)a3 = 0;
  *(_BYTE *)(a3 + 15) = 1;
  v8 = (geo::read_write_lock *)pthread_rwlock_rdlock((pthread_rwlock_t *)(a2 + 2528));
  if ((_DWORD)v8)
    geo::read_write_lock::logFailure(v8, (uint64_t)"read lock", v9);
  if (WORD5(v102))
  {
    v11 = 0;
    v12 = 0;
    v13 = 0;
    do
    {
      if (v13 < WORD5(v102))
      {
        v12 = (unsigned int *)(v102 + 4 * v13);
        v10 = (unsigned __int16 *)(v102 + WORD4(v102) + 2 * v13);
      }
      v11 ^= (*v10
            - 0x61C8864680B583EBLL
            + ((((v11 << 6) - 0x61C8864680B583EBLL + (v11 >> 2) + *v12) ^ v11) << 6)
            + ((((v11 << 6) - 0x61C8864680B583EBLL + (v11 >> 2) + *v12) ^ v11) >> 2)) ^ ((v11 << 6)
                                                                                       - 0x61C8864680B583EBLL
                                                                                       + (v11 >> 2)
                                                                                       + *v12);
      v14 = v13 + 1;
      if (v13 + 1 < WORD5(v102))
        ++v13;
      else
        v13 = WORD5(v102);
    }
    while (v14 < WORD5(v102));
    v15 = *(int8x8_t *)(a2 + 2736);
    if (!*(_QWORD *)&v15)
    {
LABEL_65:
      v37 = (geo::read_write_lock *)pthread_rwlock_unlock((pthread_rwlock_t *)(a2 + 2528));
      if ((_DWORD)v37)
        geo::read_write_lock::logFailure(v37, (uint64_t)"unlock", v38);
      v39 = atomic_load((unsigned __int8 *)(a2 + 2786));
      if ((v39 & 1) == 0)
        std::__assoc_sub_state::wait(*(std::__assoc_sub_state **)(a2 + 2816));
      v40 = atomic_load((unsigned __int8 *)(a2 + 2787));
      if ((v40 & 1) == 0)
      {
        *a1 = 0;
        a1[1] = 0;
        goto LABEL_196;
      }
      gss::StyleMatchingTreeNode<gss::CartoStyle<gss::PropertyID>>::matchAttributes(a1, **(_DWORD ***)(a2 + 160), (uint64_t)&v102, v103, (uint64_t *)(*(_QWORD *)(a2 + 160) + 8), (uint64_t *)(a2 + 64), (_QWORD *)(*(_QWORD *)(a2 + 160) + 24));
      v41 = (geo::read_write_lock *)pthread_rwlock_wrlock((pthread_rwlock_t *)(a2 + 2528));
      if ((_DWORD)v41)
        geo::read_write_lock::logFailure(v41, (uint64_t)"write lock", v42);
      if (WORD5(v102))
      {
        v44 = 0;
        v45 = 0;
        v46 = 0;
        do
        {
          if (v46 < WORD5(v102))
          {
            v45 = (unsigned int *)(v102 + 4 * v46);
            v43 = (unsigned __int16 *)(v102 + WORD4(v102) + 2 * v46);
          }
          v47 = ((v44 << 6) - 0x61C8864680B583EBLL + (v44 >> 2) + *v45) ^ v44;
          v44 = (*v43 - 0x61C8864680B583EBLL + (v47 << 6) + (v47 >> 2)) ^ v47;
          v48 = v46 + 1;
          if (v46 + 1 < WORD5(v102))
            ++v46;
          else
            v46 = WORD5(v102);
        }
        while (v48 < WORD5(v102));
        v49 = *(_QWORD *)(a2 + 2736);
        if (v49)
        {
LABEL_82:
          v50 = (uint8x8_t)vcnt_s8((int8x8_t)v49);
          v50.i16[0] = vaddlv_u8(v50);
          if (v50.u32[0] > 1uLL)
          {
            v3 = v44;
            if (v44 >= v49)
              v3 = v44 % v49;
          }
          else
          {
            v3 = (v49 - 1) & v44;
          }
          v51 = *(uint64_t ***)(*(_QWORD *)(a2 + 2728) + 8 * v3);
          if (v51)
          {
            v52 = *v51;
            if (v52)
            {
              v53 = v49 - 1;
              if (WORD5(v102))
              {
                v54 = (unsigned __int16 *)(v102 + WORD4(v102));
                if (v50.u32[0] < 2uLL)
                {
                  while (1)
                  {
                    v55 = v52[1];
                    if (v55 == v44)
                    {
                      if (WORD5(v102) == *((unsigned __int16 *)v52 + 13))
                      {
                        v56 = (_DWORD *)v52[2];
                        if (*(_DWORD *)v102 == *v56)
                        {
                          v57 = (unsigned __int16 *)((char *)v56 + *((unsigned __int16 *)v52 + 12));
                          if (*v54 == *v57)
                          {
                            v58 = 1;
                            do
                            {
                              if (WORD5(v102) == v58)
                                goto LABEL_194;
                              v59 = v58;
                              if (*(_DWORD *)(v102 + 4 * v58) != v56[v58])
                                break;
                              ++v58;
                            }
                            while (v54[v59] == v57[v59]);
                            if (v59 >= WORD5(v102))
                              goto LABEL_194;
                          }
                        }
                      }
                    }
                    else if ((v55 & v53) != v3)
                    {
                      goto LABEL_132;
                    }
                    v52 = (uint64_t *)*v52;
                    if (!v52)
                      goto LABEL_132;
                  }
                }
                while (1)
                {
                  v60 = v52[1];
                  if (v60 == v44)
                  {
                    if (WORD5(v102) == *((unsigned __int16 *)v52 + 13))
                    {
                      v61 = (_DWORD *)v52[2];
                      if (*(_DWORD *)v102 == *v61)
                      {
                        v62 = (unsigned __int16 *)((char *)v61 + *((unsigned __int16 *)v52 + 12));
                        if (*v54 == *v62)
                        {
                          v63 = 1;
                          do
                          {
                            if (WORD5(v102) == v63)
                              goto LABEL_194;
                            v64 = v63;
                            if (*(_DWORD *)(v102 + 4 * v63) != v61[v63])
                              break;
                            ++v63;
                          }
                          while (v54[v64] == v62[v64]);
                          if (v64 >= WORD5(v102))
                            goto LABEL_194;
                        }
                      }
                    }
                  }
                  else
                  {
                    if (v60 >= v49)
                      v60 %= v49;
                    if (v60 != v3)
                      goto LABEL_132;
                  }
                  v52 = (uint64_t *)*v52;
                  if (!v52)
                    goto LABEL_132;
                }
              }
              if (v50.u32[0] < 2uLL)
              {
                while (1)
                {
                  v65 = v52[1];
                  if (v65 == v44)
                  {
                    if (!*((_WORD *)v52 + 13))
                      goto LABEL_194;
                  }
                  else if ((v65 & v53) != v3)
                  {
                    goto LABEL_132;
                  }
                  v52 = (uint64_t *)*v52;
                  if (!v52)
                    goto LABEL_132;
                }
              }
              do
              {
                v66 = v52[1];
                if (v66 == v44)
                {
                  if (!*((_WORD *)v52 + 13))
                    goto LABEL_194;
                }
                else
                {
                  if (v66 >= v49)
                    v66 %= v49;
                  if (v66 != v3)
                    break;
                }
                v52 = (uint64_t *)*v52;
              }
              while (v52);
            }
          }
        }
      }
      else
      {
        v44 = 0;
        v49 = *(_QWORD *)(a2 + 2736);
        if (v49)
          goto LABEL_82;
      }
LABEL_132:
      v67 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a2 + 2760) + 16))(*(_QWORD *)(a2 + 2760), 48, 8);
      v103[0] = v67;
      v103[1] = a2 + 2760;
      *(_QWORD *)v67 = 0;
      *(_QWORD *)(v67 + 8) = v44;
      v68 = *((_QWORD *)&v102 + 1);
      *(_QWORD *)(v67 + 16) = v102;
      *(_DWORD *)(v67 + 24) = v68;
      *(_WORD *)(v67 + 28) = WORD2(v68);
      *(_WORD *)(v67 + 30) = HIWORD(v102);
      *(_QWORD *)&v102 = 0;
      *(_QWORD *)((char *)&v102 + 7) = 0;
      HIBYTE(v102) = 1;
      *(_QWORD *)(v67 + 32) = *a1;
      v69 = a1[1];
      *(_QWORD *)(v67 + 40) = v69;
      if (v69)
      {
        v70 = (unint64_t *)(v69 + 8);
        do
          v71 = __ldxr(v70);
        while (__stxr(v71 + 1, v70));
      }
      v104 = 1;
      v72 = (float)(unint64_t)(*(_QWORD *)(a2 + 2768) + 1);
      v73 = *(float *)(a2 + 2776);
      if (v49 && (float)(v73 * (float)v49) >= v72)
      {
LABEL_184:
        v97 = *(uint64_t **)(*(_QWORD *)(a2 + 2728) + 8 * v3);
        if (v97)
        {
          *(_QWORD *)v67 = *v97;
        }
        else
        {
          *(_QWORD *)v67 = *(_QWORD *)(a2 + 2752);
          *(_QWORD *)(a2 + 2752) = v67;
          *(_QWORD *)(*(_QWORD *)(a2 + 2728) + 8 * v3) = a2 + 2752;
          if (!*(_QWORD *)v67)
          {
LABEL_193:
            ++*(_QWORD *)(a2 + 2768);
            goto LABEL_194;
          }
          v98 = *(_QWORD *)(*(_QWORD *)v67 + 8);
          if ((v49 & (v49 - 1)) != 0)
          {
            if (v98 >= v49)
              v98 %= v49;
          }
          else
          {
            v98 &= v49 - 1;
          }
          v97 = (uint64_t *)(*(_QWORD *)(a2 + 2728) + 8 * v98);
        }
        *v97 = v67;
        goto LABEL_193;
      }
      v74 = 1;
      if (v49 >= 3)
        v74 = (v49 & (v49 - 1)) != 0;
      v75 = v74 | (2 * v49);
      v76 = vcvtps_u32_f32(v72 / v73);
      if (v75 <= v76)
        prime = v76;
      else
        prime = v75;
      if (prime == 1)
      {
        prime = 2;
      }
      else if ((prime & (prime - 1)) != 0)
      {
        prime = std::__next_prime(prime);
      }
      v49 = *(_QWORD *)(a2 + 2736);
      if (prime <= v49)
      {
        if (prime >= v49)
          goto LABEL_171;
        v90 = vcvtps_u32_f32((float)*(unint64_t *)(a2 + 2768) / *(float *)(a2 + 2776));
        if (v49 < 3 || (v91 = (uint8x8_t)vcnt_s8((int8x8_t)v49), v91.i16[0] = vaddlv_u8(v91), v91.u32[0] > 1uLL))
        {
          v90 = std::__next_prime(v90);
        }
        else
        {
          v92 = 1 << -(char)__clz(v90 - 1);
          if (v90 >= 2)
            v90 = v92;
        }
        if (prime <= v90)
          prime = v90;
        if (prime >= v49)
        {
          v49 = *(_QWORD *)(a2 + 2736);
LABEL_171:
          if ((v49 & (v49 - 1)) != 0)
          {
            if (v44 >= v49)
              v3 = v44 % v49;
            else
              v3 = v44;
          }
          else
          {
            v3 = (v49 - 1) & v44;
          }
          goto LABEL_184;
        }
        if (!prime)
        {
          v101 = *(_QWORD *)(a2 + 2728);
          *(_QWORD *)(a2 + 2728) = 0;
          if (v101)
            (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a2 + 2744) + 40))(*(_QWORD *)(a2 + 2744), v101, 8 * *(_QWORD *)(a2 + 2736));
          v49 = 0;
          *(_QWORD *)(a2 + 2736) = 0;
          goto LABEL_171;
        }
      }
      v78 = (*(uint64_t (**)(_QWORD, size_t, uint64_t))(**(_QWORD **)(a2 + 2744) + 16))(*(_QWORD *)(a2 + 2744), 8 * prime, 8);
      v79 = *(_QWORD *)(a2 + 2728);
      *(_QWORD *)(a2 + 2728) = v78;
      if (v79)
        (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a2 + 2744) + 40))(*(_QWORD *)(a2 + 2744), v79, 8 * *(_QWORD *)(a2 + 2736));
      v80 = 0;
      *(_QWORD *)(a2 + 2736) = prime;
      do
        *(_QWORD *)(*(_QWORD *)(a2 + 2728) + 8 * v80++) = 0;
      while (prime != v80);
      v81 = *(_QWORD **)(a2 + 2752);
      if (!v81)
      {
LABEL_170:
        v49 = prime;
        goto LABEL_171;
      }
      v82 = a2 + 2752;
      v83 = v81[1];
      v84 = prime - 1;
      if ((prime & (prime - 1)) == 0)
      {
        v85 = v83 & v84;
        *(_QWORD *)(*(_QWORD *)(a2 + 2728) + 8 * v85) = v82;
        for (i = (_QWORD *)*v81; *v81; i = (_QWORD *)*v81)
        {
          v87 = i[1] & v84;
          if (v87 == v85)
          {
            v81 = i;
          }
          else
          {
            v88 = *(_QWORD *)(a2 + 2728);
            if (*(_QWORD *)(v88 + 8 * v87))
            {
              *v81 = *i;
              v89 = 8 * v87;
              *i = **(_QWORD **)(*(_QWORD *)(a2 + 2728) + v89);
              **(_QWORD **)(*(_QWORD *)(a2 + 2728) + v89) = i;
            }
            else
            {
              *(_QWORD *)(v88 + 8 * v87) = v81;
              v81 = i;
              v85 = v87;
            }
          }
        }
        goto LABEL_170;
      }
      if (v83 >= prime)
        v83 %= prime;
      *(_QWORD *)(*(_QWORD *)(a2 + 2728) + 8 * v83) = v82;
      v93 = (_QWORD *)*v81;
      if (!*v81)
        goto LABEL_170;
      while (1)
      {
        v95 = v93[1];
        if (v95 >= prime)
          v95 %= prime;
        if (v95 != v83)
        {
          v96 = *(_QWORD *)(a2 + 2728);
          if (!*(_QWORD *)(v96 + 8 * v95))
          {
            *(_QWORD *)(v96 + 8 * v95) = v81;
            goto LABEL_175;
          }
          *v81 = *v93;
          v94 = 8 * v95;
          *v93 = **(_QWORD **)(*(_QWORD *)(a2 + 2728) + v94);
          **(_QWORD **)(*(_QWORD *)(a2 + 2728) + v94) = v93;
          v93 = v81;
        }
        v95 = v83;
LABEL_175:
        v81 = v93;
        v93 = (_QWORD *)*v93;
        v83 = v95;
        if (!v93)
          goto LABEL_170;
      }
    }
  }
  else
  {
    v11 = 0;
    v15 = *(int8x8_t *)(a2 + 2736);
    if (!*(_QWORD *)&v15)
      goto LABEL_65;
  }
  v16 = (uint8x8_t)vcnt_s8(v15);
  v16.i16[0] = vaddlv_u8(v16);
  if (v16.u32[0] > 1uLL)
  {
    v17 = v11;
    if (v11 >= *(_QWORD *)&v15)
      v17 = v11 % *(_QWORD *)&v15;
  }
  else
  {
    v17 = (*(_QWORD *)&v15 - 1) & v11;
  }
  v18 = *(uint64_t ***)(*(_QWORD *)(a2 + 2728) + 8 * v17);
  if (!v18)
    goto LABEL_65;
  v19 = *v18;
  if (!v19)
    goto LABEL_65;
  v20 = *(_QWORD *)&v15 - 1;
  if (WORD5(v102))
  {
    v21 = (unsigned __int16 *)(v102 + WORD4(v102));
    if (v16.u32[0] < 2uLL)
    {
      while (1)
      {
        v22 = v19[1];
        if (v22 == v11)
        {
          if (WORD5(v102) == *((unsigned __int16 *)v19 + 13))
          {
            v23 = (_DWORD *)v19[2];
            if (*(_DWORD *)v102 == *v23)
            {
              v24 = (unsigned __int16 *)((char *)v23 + *((unsigned __int16 *)v19 + 12));
              if (*v21 == *v24)
              {
                v25 = 1;
                do
                {
                  if (WORD5(v102) == v25)
                    goto LABEL_34;
                  v26 = v25;
                  if (*(_DWORD *)(v102 + 4 * v25) != v23[v25])
                    break;
                  ++v25;
                }
                while (v21[v26] == v24[v26]);
                if (v26 >= WORD5(v102))
                  goto LABEL_34;
              }
            }
          }
        }
        else if ((v22 & v20) != v17)
        {
          goto LABEL_65;
        }
        v19 = (uint64_t *)*v19;
        if (!v19)
          goto LABEL_65;
      }
    }
    while (1)
    {
      v30 = v19[1];
      if (v30 == v11)
      {
        if (WORD5(v102) == *((unsigned __int16 *)v19 + 13))
        {
          v31 = (_DWORD *)v19[2];
          if (*(_DWORD *)v102 == *v31)
          {
            v32 = (unsigned __int16 *)((char *)v31 + *((unsigned __int16 *)v19 + 12));
            if (*v21 == *v32)
            {
              v33 = 1;
              do
              {
                if (WORD5(v102) == v33)
                  goto LABEL_34;
                v34 = v33;
                if (*(_DWORD *)(v102 + 4 * v33) != v31[v33])
                  break;
                ++v33;
              }
              while (v21[v34] == v32[v34]);
              if (v34 >= WORD5(v102))
                goto LABEL_34;
            }
          }
        }
      }
      else
      {
        if (v30 >= *(_QWORD *)&v15)
          v30 %= *(_QWORD *)&v15;
        if (v30 != v17)
          goto LABEL_65;
      }
      v19 = (uint64_t *)*v19;
      if (!v19)
        goto LABEL_65;
    }
  }
  if (v16.u32[0] < 2uLL)
  {
    while (1)
    {
      v35 = v19[1];
      if (v35 == v11)
      {
        if (!*((_WORD *)v19 + 13))
          goto LABEL_34;
      }
      else if ((v35 & v20) != v17)
      {
        goto LABEL_65;
      }
      v19 = (uint64_t *)*v19;
      if (!v19)
        goto LABEL_65;
    }
  }
  while (1)
  {
    v36 = v19[1];
    if (v36 == v11)
      break;
    if (v36 >= *(_QWORD *)&v15)
      v36 %= *(_QWORD *)&v15;
    if (v36 != v17)
      goto LABEL_65;
LABEL_60:
    v19 = (uint64_t *)*v19;
    if (!v19)
      goto LABEL_65;
  }
  if (*((_WORD *)v19 + 13))
    goto LABEL_60;
LABEL_34:
  *a1 = v19[4];
  v27 = v19[5];
  a1[1] = v27;
  if (v27)
  {
    v28 = (unint64_t *)(v27 + 8);
    do
      v29 = __ldxr(v28);
    while (__stxr(v29 + 1, v28));
  }
LABEL_194:
  v37 = (geo::read_write_lock *)pthread_rwlock_unlock((pthread_rwlock_t *)(a2 + 2528));
  if ((_DWORD)v37)
    geo::read_write_lock::logFailure(v37, (uint64_t)"unlock", v99);
LABEL_196:
  if (!BYTE14(v102))
  {
    if ((_QWORD)v102)
    {
      v100 = gss::Allocator::instance(v37);
      (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v100 + 40))(v100, v102, WORD6(v102));
    }
  }
}

void sub_19F0CDCBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, pthread_rwlock_t *a9, char a10, uint64_t a11, char a12)
{
  uint64_t v12;

  std::unique_ptr<std::__hash_node<std::__hash_value_type<gss::StyleSheetResultCacheKey,std::shared_ptr<gss::CartoStyle<gss::PropertyID>>>,void *>,std::__hash_node_destructor<geo::StdAllocator<std::__hash_node<std::__hash_value_type<gss::StyleSheetResultCacheKey,std::shared_ptr<gss::CartoStyle<gss::PropertyID>>>,void *>,gss::Allocator>>>::~unique_ptr[abi:nn180100]((gss::Allocator *)&a12);
  geo::write_lock_guard::~write_lock_guard(&a9);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](v12);
  gss::QueryOverrides::~QueryOverrides((gss::QueryOverrides *)&a10);
  _Unwind_Resume(a1);
}

BOOL gss::ClientStyleState<gss::PropertyID>::hasTargetStyleAttributes(uint64_t a1)
{
  pthread_rwlock_t *v2;
  geo::read_write_lock *v3;
  const char *v4;
  unint64_t v5;
  _DWORD *v6;
  _DWORD *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  _DWORD *v11;
  _DWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _BOOL8 v16;
  geo::read_write_lock *v17;
  const char *v18;

  v2 = (pthread_rwlock_t *)(a1 + 16);
  v3 = (geo::read_write_lock *)pthread_rwlock_rdlock((pthread_rwlock_t *)(a1 + 16));
  if ((_DWORD)v3)
    geo::read_write_lock::logFailure(v3, (uint64_t)"read lock", v4);
  v5 = *(unsigned __int16 *)(a1 + 242);
  if ((_DWORD)v5 != *(unsigned __int16 *)(a1 + 226))
    goto LABEL_12;
  if (!*(_WORD *)(a1 + 242))
  {
    v16 = 0;
    goto LABEL_16;
  }
  v6 = *(_DWORD **)(a1 + 232);
  v7 = *(_DWORD **)(a1 + 216);
  if (*v6 != *v7
    || (v8 = *(unsigned __int16 *)(a1 + 224),
        v9 = *(unsigned __int16 *)(a1 + 240),
        *(unsigned __int16 *)((char *)v6 + v9) != *(unsigned __int16 *)((char *)v7 + v8)))
  {
LABEL_12:
    v16 = 1;
    goto LABEL_16;
  }
  v10 = 0;
  v11 = v6 + 1;
  v12 = v7 + 1;
  v13 = (uint64_t)v6 + v9 + 2;
  v14 = (uint64_t)v7 + v8 + 2;
  while (v5 - 1 != v10)
  {
    v15 = v10++;
    if (v11[v15] != v12[v15])
      goto LABEL_15;
    if (*(unsigned __int16 *)(v13 + 2 * v15) != *(unsigned __int16 *)(v14 + 2 * v15))
    {
      v10 = v15 + 1;
      goto LABEL_15;
    }
  }
  v10 = *(unsigned __int16 *)(a1 + 242);
LABEL_15:
  v16 = v10 < v5;
LABEL_16:
  v17 = (geo::read_write_lock *)pthread_rwlock_unlock(v2);
  if ((_DWORD)v17)
    geo::read_write_lock::logFailure(v17, (uint64_t)"unlock", v18);
  return v16;
}

void gss::StylesheetManager<gss::PropertyID>::targetStyleAttributes(uint64_t *a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t a5)
{
  uint64_t v10;
  unint64_t v11;
  char *v12;
  uint64_t v13;
  geo::read_write_lock *v14;
  const char *v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  unsigned int v19;
  geo::read_write_lock *v20;
  const char *v21;
  unsigned int v22;
  unsigned int v23;
  uint64_t v24;
  unsigned int v25;
  void *__p;
  void *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  char v32;
  char v33;

  __p = 0;
  v27 = 0;
  v28 = 0;
  v10 = a4 - a3;
  v11 = v10 + 20;
  if (v10 == -20)
  {
    v12 = 0;
  }
  else
  {
    if (v11 >> 61)
      abort();
    v12 = (char *)operator new(8 * v11);
    __p = v12;
    v27 = v12;
    v28 = &v12[8 * v11];
  }
  std::vector<std::pair<gss::StyleAttribute,unsigned short>>::__insert_with_size[abi:nn180100]<std::__wrap_iter<std::pair<gss::StyleAttribute,unsigned short> const*>,std::__wrap_iter<std::pair<gss::StyleAttribute,unsigned short> const*>>((unint64_t *)&__p, (uint64_t)v12, a3, a4, v10);
  v13 = *(_QWORD *)(a2 + 520);
  if (v13)
  {
    v29 = v13 + 16;
    v14 = (geo::read_write_lock *)pthread_rwlock_rdlock((pthread_rwlock_t *)(v13 + 16));
    if ((_DWORD)v14)
      geo::read_write_lock::logFailure(v14, (uint64_t)"read lock", v15);
    v16 = *(unsigned __int16 *)(v13 + 242);
    v30 = v13 + 232;
    v31 = 0;
    v32 = 0;
    v33 = 0;
    if (v16)
    {
      v17 = 0;
      v18 = 0;
      do
      {
        ++v18;
        v19 = v17 + 1;
        if (v17 + 1 < v16)
          ++v17;
        else
          v17 = v16;
      }
      while (v19 < v16);
    }
    else
    {
      v18 = 0;
    }
    std::vector<std::pair<gss::StyleAttribute,unsigned short>>::__insert_with_size[abi:nn180100]<geo::intern_linear_map<gss::StyleAttribute,unsigned short,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::Iterator,geo::intern_linear_map<gss::StyleAttribute,unsigned short,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::Iterator>((unint64_t *)&__p, v27, &v30, v13 + 232, v16, v18);
    v20 = (geo::read_write_lock *)pthread_rwlock_unlock((pthread_rwlock_t *)(v13 + 16));
    if ((_DWORD)v20)
      geo::read_write_lock::logFailure(v20, (uint64_t)"unlock", v21);
    v22 = *(unsigned __int16 *)(a5 + 10);
    v30 = a5;
    v31 = 0;
    v32 = 0;
    v33 = 0;
    if (v22)
    {
      v23 = 0;
      v24 = 0;
      do
      {
        ++v24;
        v25 = v23 + 1;
        if (v23 + 1 < v22)
          ++v23;
        else
          v23 = v22;
      }
      while (v25 < v22);
    }
    else
    {
      v24 = 0;
    }
    std::vector<std::pair<gss::StyleAttribute,unsigned short>>::__insert_with_size[abi:nn180100]<geo::intern_linear_map<gss::StyleAttribute,unsigned short,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::Iterator,geo::intern_linear_map<gss::StyleAttribute,unsigned short,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::Iterator>((unint64_t *)&__p, v27, &v30, a5, v22, v24);
  }
  gss::ResolveMultiAttributeVectorToMap((unsigned int **)&__p, a1);
  if (__p)
  {
    v27 = __p;
    operator delete(__p);
  }
}

void sub_19F0CDFBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, pthread_rwlock_t *a13)
{
  geo::write_lock_guard::~write_lock_guard(&a13);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void gss::StylesheetManager<gss::PropertyID>::sourceStyleAttributes(uint64_t *a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t a5)
{
  uint64_t v10;
  unint64_t v11;
  char *v12;
  uint64_t v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int v17;
  void *__p;
  void *v19;
  char *v20;
  uint64_t v21;
  int v22;
  char v23;
  char v24;

  __p = 0;
  v19 = 0;
  v20 = 0;
  v10 = a4 - a3;
  v11 = v10 + 20;
  if (v10 == -20)
  {
    v12 = 0;
  }
  else
  {
    if (v11 >> 61)
      abort();
    v12 = (char *)operator new(8 * v11);
    __p = v12;
    v19 = v12;
    v20 = &v12[8 * v11];
  }
  std::vector<std::pair<gss::StyleAttribute,unsigned short>>::__insert_with_size[abi:nn180100]<std::__wrap_iter<std::pair<gss::StyleAttribute,unsigned short> const*>,std::__wrap_iter<std::pair<gss::StyleAttribute,unsigned short> const*>>((unint64_t *)&__p, (uint64_t)v12, a3, a4, v10);
  v13 = *(_QWORD *)(a2 + 520);
  if (v13)
  {
    gss::ClientStyleState<gss::PropertyID>::appendSourceClientStyleAttributes(v13, (unint64_t *)&__p);
    v14 = *(unsigned __int16 *)(a5 + 10);
    v21 = a5;
    v22 = 0;
    v23 = 0;
    v24 = 0;
    if (v14)
    {
      v15 = 0;
      v16 = 0;
      do
      {
        ++v16;
        v17 = v15 + 1;
        if (v15 + 1 < v14)
          ++v15;
        else
          v15 = v14;
      }
      while (v17 < v14);
    }
    else
    {
      v16 = 0;
    }
    std::vector<std::pair<gss::StyleAttribute,unsigned short>>::__insert_with_size[abi:nn180100]<geo::intern_linear_map<gss::StyleAttribute,unsigned short,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::Iterator,geo::intern_linear_map<gss::StyleAttribute,unsigned short,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::Iterator>((unint64_t *)&__p, v19, &v21, a5, v14, v16);
  }
  gss::ResolveMultiAttributeVectorToMap((unsigned int **)&__p, a1);
  if (__p)
  {
    v19 = __p;
    operator delete(__p);
  }
}

void sub_19F0CE110(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void gss::ResolveMultiAttributeVectorToMap(unsigned int **a1@<X0>, uint64_t *a2@<X8>)
{
  unsigned int *v4;
  unsigned int *v5;
  uint64_t v6;
  unint64_t v7;
  const std::nothrow_t *v8;
  unint64_t v9;
  unsigned int *v10;
  BOOL v11;
  unsigned int *v12;
  unsigned int *v13;
  unsigned int *v14;
  unsigned int **v15;
  unsigned int *v16;
  int v17;
  int v18;
  unsigned int *i;
  unsigned int v20;
  unsigned __int16 v21;
  unsigned int v22;
  unsigned __int16 v23;
  uint64_t v24;

  v5 = *a1;
  v4 = a1[1];
  v6 = (char *)v4 - (char *)*a1;
  v7 = v6 >> 3;
  if (v6 < 1)
  {
LABEL_5:
    std::__stable_sort<std::_ClassicAlgPolicy,gss::ResolveMultiAttributeVectorToMap(std::vector<std::pair<gss::StyleAttribute,unsigned short>> &)::$_1 &,std::__wrap_iter<std::pair<gss::StyleAttribute,unsigned short>*>>(v5, v4, v7, 0, 0);
  }
  else
  {
    v8 = (const std::nothrow_t *)MEMORY[0x1E0DE4E10];
    v9 = v6 >> 3;
    while (1)
    {
      v10 = (unsigned int *)operator new(8 * v9, v8);
      if (v10)
        break;
      v11 = v9 > 1;
      v9 >>= 1;
      if (!v11)
        goto LABEL_5;
    }
    v12 = v10;
    std::__stable_sort<std::_ClassicAlgPolicy,gss::ResolveMultiAttributeVectorToMap(std::vector<std::pair<gss::StyleAttribute,unsigned short>> &)::$_1 &,std::__wrap_iter<std::pair<gss::StyleAttribute,unsigned short>*>>(v5, v4, v7, v10, v9);
    operator delete(v12);
  }
  v15 = a1;
  v13 = *a1;
  v14 = v15[1];
  if (v14 == v13)
  {
    v13 = v14;
  }
  else
  {
    v16 = v14 + 2;
    while (v16 - 4 != v13)
    {
      v17 = *(v16 - 4);
      v18 = *(v16 - 6);
      v16 -= 2;
      if (v17 == v18)
      {
        for (i = v16 - 4; i != v13; i -= 2)
        {
          v20 = *(i - 2);
          if (*(v16 - 2) != v20)
          {
            *(v16 - 4) = v20;
            *((_WORD *)v16 - 6) = *((_WORD *)i - 2);
            v16 -= 2;
          }
        }
        v13 = v16 - 2;
        break;
      }
    }
  }
  *(uint64_t *)((char *)a2 + 7) = 0;
  *a2 = 0;
  *((_BYTE *)a2 + 15) = 1;
  if ((unint64_t)((((char *)v14 - (char *)v13) >> 3) - 1) <= 0xFFFE)
    geo::intern_linear_map<gss::StyleAttribute,unsigned short,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::reallocate((unsigned __int16 *)a2, ((_DWORD)v14 - (_DWORD)v13) >> 3);
  if (v13 != v14)
  {
    v21 = *((_WORD *)a2 + 5);
    do
    {
      if (*((unsigned __int16 *)a2 + 6) == v21)
      {
        if (v21 == 0xFFFF)
          break;
        v22 = 2 * (v21 & 0x7FFF);
        if (v22 <= 4)
          v23 = 4;
        else
          v23 = v22;
        geo::intern_linear_map<gss::StyleAttribute,unsigned short,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::reallocate((unsigned __int16 *)a2, v23);
        v21 = *((_WORD *)a2 + 5);
      }
      v24 = *a2;
      *(_DWORD *)(*a2 + 4 * v21) = *v13;
      *(_WORD *)(v24 + *((unsigned __int16 *)a2 + 4) + 2 * v21++) = *((_WORD *)v13 + 2);
      *((_WORD *)a2 + 5) = v21;
      v13 += 2;
    }
    while (v13 != v14);
  }
  *((_BYTE *)a2 + 15) = 1;
}

void gss::ClientStyleState<gss::PropertyID>::appendSourceClientStyleAttributes(uint64_t a1, unint64_t *a2)
{
  pthread_rwlock_t *v4;
  geo::read_write_lock *v5;
  const char *v6;
  void *v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int v11;
  geo::read_write_lock *v12;
  const char *v13;
  uint64_t v14;
  int v15;
  char v16;
  char v17;

  v4 = (pthread_rwlock_t *)(a1 + 16);
  v5 = (geo::read_write_lock *)pthread_rwlock_rdlock((pthread_rwlock_t *)(a1 + 16));
  if ((_DWORD)v5)
    geo::read_write_lock::logFailure(v5, (uint64_t)"read lock", v6);
  v7 = (void *)a2[1];
  v8 = *(unsigned __int16 *)(a1 + 226);
  v14 = a1 + 216;
  v15 = 0;
  v16 = 0;
  v17 = 0;
  if (v8)
  {
    v9 = 0;
    v10 = 0;
    do
    {
      ++v10;
      v11 = v9 + 1;
      if (v9 + 1 < v8)
        ++v9;
      else
        v9 = v8;
    }
    while (v11 < v8);
  }
  else
  {
    v10 = 0;
  }
  std::vector<std::pair<gss::StyleAttribute,unsigned short>>::__insert_with_size[abi:nn180100]<geo::intern_linear_map<gss::StyleAttribute,unsigned short,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::Iterator,geo::intern_linear_map<gss::StyleAttribute,unsigned short,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::Iterator>(a2, v7, &v14, a1 + 216, v8, v10);
  v12 = (geo::read_write_lock *)pthread_rwlock_unlock(v4);
  if ((_DWORD)v12)
    geo::read_write_lock::logFailure(v12, (uint64_t)"unlock", v13);
}

void sub_19F0CE3D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, pthread_rwlock_t *a9)
{
  geo::write_lock_guard::~write_lock_guard(&a9);
  _Unwind_Resume(a1);
}

void _ZNSt3__110__function6__funcIZN2md8SkyLogic15runBeforeLayoutERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_13CameraContextENS2_17StyleLogicContextEEEENS9_IJEEEEE20ResolvedDependenciesERNS2_15SkyLogicContextEE3__2NS_9allocatorISK_EEFvNS2_17StyleManagerEventEEEclEOSN_(gss::Allocator *a1, unsigned __int8 *a2)
{
  uint64_t v2;
  uint64_t *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  gss::Allocator *v12;
  uint64_t v13;
  __int128 v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  __int128 v21;
  _QWORD *v22;
  _QWORD *v23;
  char *v24;
  uint64_t v25;
  _BYTE v26[15];
  char v27;

  if ((*a2 | 4) == 4)
  {
    v2 = *((_QWORD *)a1 + 1);
    v3 = (uint64_t *)*((_QWORD *)a1 + 2);
    v4 = *(std::__shared_weak_count **)(v2 + 128);
    *(_QWORD *)(v2 + 120) = 0;
    *(_QWORD *)(v2 + 128) = 0;
    if (!v4)
      goto LABEL_6;
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
      if (!*v3)
        return;
    }
    else
    {
LABEL_6:
      if (!*v3)
        return;
    }
    v7 = gss::Allocator::instance(a1);
    v8 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v7 + 16))(v7, 8, 4);
    v9 = v8;
    if (v8)
      *v8 = 0x700000005;
    v22 = 0;
    v23 = 0;
    v24 = 0;
    v25 = v7;
    v10 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v7 + 16))(v7, 8, 4);
    v22 = v10;
    v24 = (char *)(v10 + 1);
    if (v10)
      *v10 = *v9;
    v23 = v10 + 1;
    gss::FeatureAttributeSet::sort((gss::FeatureAttributeSet *)&v22);
    if (v9)
      (*(void (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)v7 + 40))(v7, v9, 8);
    v11 = *v3;
    memset(v26, 0, sizeof(v26));
    v27 = 1;
    gss::StylesheetManager<gss::PropertyID>::styleQueryForFeatureAttributes((unint64_t *)&v21, v11, (gss::FeatureAttributeSet *)&v22, (gss::QueryOverrides *)v26);
    if (!v26[14] && *(_QWORD *)v26)
    {
      v13 = gss::Allocator::instance(v12);
      (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v13 + 40))(v13, *(_QWORD *)v26, *(unsigned __int16 *)&v26[12]);
    }
    v14 = v21;
    v21 = 0uLL;
    v15 = *(std::__shared_weak_count **)(v2 + 128);
    *(_OWORD *)(v2 + 120) = v14;
    if (v15)
    {
      v16 = (unint64_t *)&v15->__shared_owners_;
      do
        v17 = __ldaxr(v16);
      while (__stlxr(v17 - 1, v16));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
        std::__shared_weak_count::__release_weak(v15);
      }
    }
    v18 = (std::__shared_weak_count *)*((_QWORD *)&v21 + 1);
    if (*((_QWORD *)&v21 + 1))
    {
      v19 = (unint64_t *)(*((_QWORD *)&v21 + 1) + 8);
      do
        v20 = __ldaxr(v19);
      while (__stlxr(v20 - 1, v19));
      if (!v20)
      {
        ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
        std::__shared_weak_count::__release_weak(v18);
      }
    }
    if (v22)
    {
      v23 = v22;
      (*(void (**)(uint64_t, _QWORD *, int64_t))(*(_QWORD *)v25 + 40))(v25, v22, v24 - (char *)v22);
    }
  }
}

void sub_19F0CE5EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, int a16, unsigned __int16 a17, char a18)
{
  uint64_t v19;

  if (!a18 && a15)
  {
    v19 = gss::Allocator::instance((gss::Allocator *)exception_object);
    (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v19 + 40))(v19, a15, a17);
  }
  if (a11)
    (*(void (**)(uint64_t))(*(_QWORD *)a14 + 40))(a14);
  _Unwind_Resume(exception_object);
}

void _ZNSt3__110__function6__funcIZN2md22MapZoomLevelStyleLogic15runBeforeLayoutERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_13CameraContextENS2_17StyleLogicContextEEEENS9_IJEEEEE20ResolvedDependenciesERNS2_29MapZoomLevelStyleLogicContextEE3__0NS_9allocatorISK_EEFvNS2_17StyleManagerEventEEEclEOSN_(uint64_t a1, _BYTE *a2)
{
  uint64_t v2;
  uint64_t v3;
  unsigned __int8 v4;
  uint64_t v5;
  unsigned __int8 v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t v11;
  float v12;
  uint64_t v13;
  unsigned __int8 v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  float v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26[4];
  unsigned int v27;
  char v28;
  int v29;

  if (*a2 == 5)
  {
    v2 = *(_QWORD *)(a1 + 16);
    if (*(_QWORD *)v2)
    {
      v3 = *(_QWORD *)(a1 + 8);
      v4 = atomic_load((unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)v2 + 16) + 2784));
      if ((v4 & 1) != 0)
      {
        v5 = *(_QWORD *)(*(_QWORD *)v2 + 16);
        if (v5)
        {
          v6 = atomic_load((unsigned __int8 *)(v5 + 2784));
          if ((v6 & 1) == 0)
            std::__assoc_sub_state::wait(*(std::__assoc_sub_state **)(v5 + 2808));
          v8 = *(_QWORD *)(v5 + 120);
          v7 = *(std::__shared_weak_count **)(v5 + 128);
          if (v7)
          {
            p_shared_owners = (unint64_t *)&v7->__shared_owners_;
            do
              v10 = __ldxr(p_shared_owners);
            while (__stxr(v10 + 1, p_shared_owners));
            do
              v11 = __ldaxr(p_shared_owners);
            while (__stlxr(v11 - 1, p_shared_owners));
            if (!v11)
            {
              ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
              std::__shared_weak_count::__release_weak(v7);
            }
          }
          if (v8)
          {
            *(_DWORD *)(v3 + 148) = 1096810496;
            v12 = 13.0;
            if (*(_QWORD *)v2)
            {
              v13 = *(_QWORD *)(*(_QWORD *)v2 + 16);
              if (v13)
              {
                v14 = atomic_load((unsigned __int8 *)(v13 + 2784));
                if ((v14 & 1) == 0)
                  std::__assoc_sub_state::wait(*(std::__assoc_sub_state **)(v13 + 2808));
                v15 = *(_QWORD *)(v13 + 120);
                v16 = *(std::__shared_weak_count **)(v13 + 128);
                if (v16)
                {
                  v17 = (unint64_t *)&v16->__shared_owners_;
                  do
                    v18 = __ldxr(v17);
                  while (__stxr(v18 + 1, v17));
                }
                if (v15)
                {
                  v12 = *(float *)(v15 + 288);
                  *(_DWORD *)(v3 + 148) = *(_DWORD *)(v15 + 292);
                }
                else
                {
                  v12 = 13.0;
                }
                if (v16)
                {
                  v19 = (unint64_t *)&v16->__shared_owners_;
                  do
                    v20 = __ldaxr(v19);
                  while (__stlxr(v20 - 1, v19));
                  if (!v20)
                  {
                    ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
                    std::__shared_weak_count::__release_weak(v16);
                  }
                }
              }
            }
            v21 = v12 <= 13.0 ? 13.25 : v12 + 0.25;
            if (*(float *)(v3 + 144) != v21)
            {
              v22 = *(_QWORD *)(v3 + 152);
              v27 = vcvtms_u32_f32(v12);
              v26[0] = 1;
              v29 = 25;
              v28 = 1;
              v23 = *(_QWORD *)(v22 + 56);
              v24 = *(_QWORD *)(v22 + 64);
              if (v23 != v24)
              {
                while (*(_WORD *)v23 != 13)
                {
                  v23 += 16;
                  if (v23 == v24)
                    goto LABEL_40;
                }
              }
              if (v23 != v24)
              {
                v25 = *(_QWORD *)(v23 + 8);
                if (v25)
                  (*(void (**)(uint64_t, char *))(*(_QWORD *)v25 + 32))(v25, v26);
              }
LABEL_40:
              *(float *)(v3 + 144) = v21;
            }
          }
        }
      }
    }
  }
}

uint64_t _ZNSt3__110__function6__funcIZN2md15LocalNorthLogic15runBeforeLayoutERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_17StyleLogicContextENS2_12SceneContextENS2_13CameraContextEEEENS9_IJEEEEE20ResolvedDependenciesERNS2_22LocalNorthLogicContextEE3__2NS_9allocatorISL_EEFvNS2_17StyleManagerEventEEEclEOSO_(uint64_t result, unsigned __int8 *a2)
{
  int v2;

  v2 = *a2;
  if (v2 == 5 || v2 == 0)
    **(_BYTE **)(result + 8) = 1;
  return result;
}

uint64_t (***std::__function::__func<md::LabelsLogic::runBeforeLayout(md::LayoutContext const&,md::LogicDependencies<gdc::TypeList<md::StyleLogicContext>,gdc::TypeList<md::MeshRenderableContext>>::ResolvedDependencies const&,md::LabelsContext &)::$_2,std::allocator<md::LabelsLogic::runBeforeLayout(md::LayoutContext const&,md::LogicDependencies<gdc::TypeList<md::StyleLogicContext>,gdc::TypeList<md::MeshRenderableContext>>::ResolvedDependencies const&,md::LabelsContext &)::$_2>,void ()(md::StyleManagerEvent)>::operator()(uint64_t (***result)(), _BYTE *a2))()
{
  uint64_t (***v2)();
  uint64_t (**v3)();
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  md::LabelManager *v7;
  uint64_t (**v8)();
  char v9;
  uint64_t (*v10)();
  uint64_t (*v11)();
  uint64_t (***v12)();
  uint64_t v13;
  uint64_t (*v14)();
  unsigned __int8 v15;
  uint64_t v16;
  md::LabelManager *v17;
  uint64_t v18;
  unsigned __int8 v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  char v23;
  uint64_t (**v24)();
  md::LabelManager *v25;
  uint64_t (*v26)();
  uint64_t (***v27)();
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  v2 = result;
  v3 = result[2];
  switch(*a2)
  {
    case 0:
    case 4:
      v4 = (std::__shared_weak_count *)v3[30];
      v3[29] = 0;
      v3[30] = 0;
      if (v4)
      {
        p_shared_owners = (unint64_t *)&v4->__shared_owners_;
        do
          v6 = __ldaxr(p_shared_owners);
        while (__stlxr(v6 - 1, p_shared_owners));
        if (!v6)
        {
          ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
          std::__shared_weak_count::__release_weak(v4);
        }
      }
      md::LabelManager::setStyleManager((md::LabelManager *)v3[20], (uint64_t)*v2[3], (uint64_t)v2[3][1]);
      md::LabelManager::setSceneManager((md::LabelManager *)v3[20], (uint64_t)*v2[4], (std::__shared_weak_count *)v2[4][1]);
      v7 = (md::LabelManager *)v3[20];
      v24 = &off_1E42C9D40;
      v25 = v7;
      v27 = &v24;
      md::LabelManager::queueCommand(v7, 29, 1, &v24);
      goto LABEL_17;
    case 1:
      v8 = result[1];
      v9 = *((_BYTE *)v8 + 80);
      v10 = v3[20];
      v11 = v8[9];
      if (v9)
      {
        v24 = &off_1E42CA448;
        v25 = (md::LabelManager *)v10;
        v26 = v11;
        v27 = &v24;
        md::LabelManager::queueCommand((md::LabelManager *)v10, 27, 0, &v24);
        v12 = v27;
        if (v27 == &v24)
        {
          v13 = 4;
          v12 = &v24;
        }
        else
        {
          if (!v27)
          {
LABEL_27:
            v10 = v3[20];
            v11 = v2[1][9];
            goto LABEL_28;
          }
          v13 = 5;
        }
        (*v12)[v13]();
        goto LABEL_27;
      }
      *((_BYTE *)v10 + 3380) = 1;
      *((_BYTE *)v10 + 3043) = 1;
      *((_BYTE *)v10 + 3045) = 1;
      *((_BYTE *)v10 + 3047) = 1;
      v19 = atomic_load((unsigned __int8 *)v10 + 3058);
      if ((v19 & 1) != 0)
      {
        v20 = *((_QWORD *)v10 + 17);
        if (v20)
        {
          v21 = *(_QWORD *)(v20 + 56);
          if (v21)
          {
            v24 = (uint64_t (**)())v10;
            v23 = 9;
            (*(void (**)(uint64_t, uint64_t (***)(), char *))(*(_QWORD *)v21 + 48))(v21, &v24, &v23);
          }
        }
      }
      *(_WORD *)((char *)v10 + 3381) = 1;
LABEL_28:
      v22 = operator new(0x20uLL);
      *v22 = &off_1E42CA298;
      v22[1] = v10;
      v22[2] = v11;
      *((_BYTE *)v22 + 24) = v9;
      v27 = (uint64_t (***)())v22;
      md::LabelManager::queueCommand((md::LabelManager *)v10, 28, 0, &v24);
      result = v27;
      if (v27 == &v24)
      {
LABEL_29:
        v18 = 4;
        result = &v24;
      }
      else
      {
LABEL_18:
        if (!result)
          return result;
        v18 = 5;
      }
      return (uint64_t (***)())(*result)[v18]();
    case 2:
      v14 = v3[20];
      v15 = atomic_load((unsigned __int8 *)v14 + 3058);
      if ((v15 & 1) != 0)
      {
        v16 = *((_QWORD *)v14 + 17);
        if (v16)
        {
          result = *(uint64_t (****)())(v16 + 56);
          if (result)
          {
            v24 = (uint64_t (**)())v3[20];
            v23 = 9;
            return (uint64_t (***)())((uint64_t (*)(uint64_t (***)(), uint64_t (***)(), char *))(*result)[6])(result, &v24, &v23);
          }
        }
      }
      return result;
    case 3:
      v17 = (md::LabelManager *)v3[20];
      v24 = &off_1E42CA0E8;
      v25 = v17;
      v27 = &v24;
      md::LabelManager::queueCommand(v17, 30, 0, &v24);
LABEL_17:
      result = v27;
      if (v27 != &v24)
        goto LABEL_18;
      goto LABEL_29;
    default:
      return result;
  }
}

void sub_19F0CEB58(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

void sub_19F0CEB64(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void std::__function::__func<md::RouteRenderLayer::runLayoutLogic(md::LayoutContext const&)::$_0,std::allocator<md::RouteRenderLayer::runLayoutLogic(md::LayoutContext const&)::$_0>,void ()(md::StyleManagerEvent)>::operator()(gss::Allocator *a1, unsigned __int8 *a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  gss::Allocator *v8;
  uint64_t v9;
  __int128 v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  BOOL v17;
  uint64_t v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  __int128 v23;
  _BYTE v24[15];
  char v25;
  _QWORD *v26;
  _QWORD *v27;
  char *v28;
  uint64_t v29;

  if ((*a2 | 4) == 4)
  {
    v2 = *((_QWORD *)a1 + 1);
    v3 = (uint64_t *)*((_QWORD *)a1 + 2);
    if (*v3)
    {
      v4 = gss::Allocator::instance(a1);
      v5 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v4 + 16))(v4, 16, 4);
      v6 = v5;
      if (v5)
        *v5 = 0xB00000005;
      v5[1] = 65552;
      v26 = 0;
      v27 = 0;
      v28 = 0;
      v29 = v4;
      v7 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v4 + 16))(v4, 16, 4);
      v26 = v7;
      v28 = (char *)(v7 + 2);
      if (v7)
        *v7 = *v6;
      v7[1] = v6[1];
      v27 = v7 + 2;
      gss::FeatureAttributeSet::sort((gss::FeatureAttributeSet *)&v26);
      (*(void (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)v4 + 40))(v4, v6, 16);
      memset(v24, 0, sizeof(v24));
      v25 = 1;
      *(_WORD *)geo::intern_linear_map<gss::StyleAttribute,unsigned short,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::operator[](v24, 0x10002u) = 1;
      *(_WORD *)geo::intern_linear_map<gss::StyleAttribute,unsigned short,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::operator[](v24, 0x10000u) = 0;
      gss::StylesheetManager<gss::PropertyID>::styleQueryForFeatureAttributes((unint64_t *)&v23, *v3, (gss::FeatureAttributeSet *)&v26, (gss::QueryOverrides *)v24);
      v9 = *(_QWORD *)(v2 + 64);
      v10 = v23;
      v23 = 0uLL;
      v11 = *(std::__shared_weak_count **)(v9 + 64);
      *(_OWORD *)(v9 + 56) = v10;
      if (v11)
      {
        p_shared_owners = (unint64_t *)&v11->__shared_owners_;
        do
          v13 = __ldaxr(p_shared_owners);
        while (__stlxr(v13 - 1, p_shared_owners));
        if (!v13)
        {
          ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
          std::__shared_weak_count::__release_weak(v11);
        }
      }
      v14 = (std::__shared_weak_count *)*((_QWORD *)&v23 + 1);
      if (*((_QWORD *)&v23 + 1))
      {
        v15 = (unint64_t *)(*((_QWORD *)&v23 + 1) + 8);
        do
          v16 = __ldaxr(v15);
        while (__stlxr(v16 - 1, v15));
        if (!v16)
        {
          ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
          std::__shared_weak_count::__release_weak(v14);
        }
      }
      if (v24[14])
        v17 = 1;
      else
        v17 = *(_QWORD *)v24 == 0;
      if (!v17)
      {
        v18 = gss::Allocator::instance(v8);
        (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v18 + 40))(v18, *(_QWORD *)v24, *(unsigned __int16 *)&v24[12]);
      }
      if (v26)
      {
        v27 = v26;
        (*(void (**)(uint64_t, _QWORD *, int64_t))(*(_QWORD *)v29 + 40))(v29, v26, v28 - (char *)v26);
      }
    }
    else
    {
      v19 = *(_QWORD *)(v2 + 64);
      v20 = *(std::__shared_weak_count **)(v19 + 64);
      *(_QWORD *)(v19 + 56) = 0;
      *(_QWORD *)(v19 + 64) = 0;
      if (v20)
      {
        v21 = (unint64_t *)&v20->__shared_owners_;
        do
          v22 = __ldaxr(v21);
        while (__stlxr(v22 - 1, v21));
        if (!v22)
        {
          ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
          std::__shared_weak_count::__release_weak(v20);
        }
      }
    }
    *(_BYTE *)(*(_QWORD *)(v2 + 64) + 48) = 1;
  }
}

void sub_19F0CEE0C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, unsigned __int16 a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  uint64_t v19;

  if (!a14 && a11)
  {
    v19 = gss::Allocator::instance((gss::Allocator *)exception_object);
    (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v19 + 40))(v19, a11, a13);
  }
  if (a15)
    (*(void (**)(uint64_t))(*(_QWORD *)a18 + 40))(a18);
  _Unwind_Resume(exception_object);
}

void std::__function::__func<md::PolygonRenderLayer<(md::MapDataType)41,md::MapTileDataRenderable<md::PolygonTileData>>::layout(md::LayoutContext const&)::{lambda(md::StyleManagerEvent)#1},std::allocator<md::PolygonRenderLayer<(md::MapDataType)41,md::MapTileDataRenderable<md::PolygonTileData>>::layout(md::LayoutContext const&)::{lambda(md::StyleManagerEvent)#1}>,void ()(md::StyleManagerEvent)>::operator()(uint64_t a1, _BYTE *a2)
{
  uint64_t **v2;
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t **v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t **v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t **v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t **v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t v21;

  switch(*a2)
  {
    case 0:
      v2 = *(uint64_t ***)(a1 + 16);
      **(_BYTE **)(a1 + 8) = 1;
      v3 = *v2;
      v4 = v2[1];
      if (*v2 != v4)
      {
        do
        {
          v5 = *v3++;
          md::PolygonRenderLayer<(md::MapDataType)41,md::MapTileDataRenderable<md::PolygonTileData>>::updateStyles(*(_QWORD **)(v5 + 384), 1);
        }
        while (v3 != v4);
      }
      break;
    case 1:
      v6 = *(uint64_t ***)(a1 + 16);
      **(_BYTE **)(a1 + 8) = 1;
      v7 = *v6;
      v8 = v6[1];
      if (*v6 != v8)
      {
        do
        {
          v9 = *v7++;
          md::PolygonRenderLayer<(md::MapDataType)41,md::MapTileDataRenderable<md::PolygonTileData>>::updateStyles(*(_QWORD **)(v9 + 384), 1);
        }
        while (v7 != v8);
      }
      break;
    case 2:
      v10 = *(uint64_t ***)(a1 + 16);
      v11 = *v10;
      v12 = v10[1];
      if (*v10 != v12)
      {
        do
        {
          v13 = *v11++;
          md::PolygonRenderLayer<(md::MapDataType)41,md::MapTileDataRenderable<md::PolygonTileData>>::updateStyles(*(_QWORD **)(v13 + 384), 0);
        }
        while (v11 != v12);
      }
      break;
    case 3:
      v14 = *(uint64_t ***)(a1 + 16);
      v15 = *v14;
      v16 = v14[1];
      if (*v14 != v16)
      {
        do
        {
          v17 = *v15++;
          md::PolygonRenderLayer<(md::MapDataType)41,md::MapTileDataRenderable<md::PolygonTileData>>::updateStyles(*(_QWORD **)(v17 + 384), 1);
        }
        while (v15 != v16);
      }
      break;
    case 4:
      v18 = *(uint64_t ***)(a1 + 16);
      v19 = *v18;
      v20 = v18[1];
      if (*v18 != v20)
      {
        do
        {
          v21 = *v19++;
          md::PolygonRenderLayer<(md::MapDataType)41,md::MapTileDataRenderable<md::PolygonTileData>>::updateStyles(*(_QWORD **)(v21 + 384), 1);
        }
        while (v19 != v20);
      }
      break;
    default:
      return;
  }
}

void std::__function::__func<md::PolygonRenderLayer<(md::MapDataType)1,md::MapTileDataRenderable<md::PolygonTileData>>::layout(md::LayoutContext const&)::{lambda(md::StyleManagerEvent)#1},std::allocator<md::PolygonRenderLayer<(md::MapDataType)1,md::MapTileDataRenderable<md::PolygonTileData>>::layout(md::LayoutContext const&)::{lambda(md::StyleManagerEvent)#1}>,void ()(md::StyleManagerEvent)>::operator()(uint64_t a1, _BYTE *a2)
{
  uint64_t **v2;
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t **v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t **v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t **v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t **v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t v21;

  switch(*a2)
  {
    case 0:
      v2 = *(uint64_t ***)(a1 + 16);
      **(_BYTE **)(a1 + 8) = 1;
      v3 = *v2;
      v4 = v2[1];
      if (*v2 != v4)
      {
        do
        {
          v5 = *v3++;
          md::PolygonRenderLayer<(md::MapDataType)1,md::MapTileDataRenderable<md::PolygonTileData>>::updateStyles(*(_QWORD **)(v5 + 384), 1);
        }
        while (v3 != v4);
      }
      break;
    case 1:
      v6 = *(uint64_t ***)(a1 + 16);
      **(_BYTE **)(a1 + 8) = 1;
      v7 = *v6;
      v8 = v6[1];
      if (*v6 != v8)
      {
        do
        {
          v9 = *v7++;
          md::PolygonRenderLayer<(md::MapDataType)1,md::MapTileDataRenderable<md::PolygonTileData>>::updateStyles(*(_QWORD **)(v9 + 384), 1);
        }
        while (v7 != v8);
      }
      break;
    case 2:
      v10 = *(uint64_t ***)(a1 + 16);
      v11 = *v10;
      v12 = v10[1];
      if (*v10 != v12)
      {
        do
        {
          v13 = *v11++;
          md::PolygonRenderLayer<(md::MapDataType)1,md::MapTileDataRenderable<md::PolygonTileData>>::updateStyles(*(_QWORD **)(v13 + 384), 0);
        }
        while (v11 != v12);
      }
      break;
    case 3:
      v14 = *(uint64_t ***)(a1 + 16);
      v15 = *v14;
      v16 = v14[1];
      if (*v14 != v16)
      {
        do
        {
          v17 = *v15++;
          md::PolygonRenderLayer<(md::MapDataType)1,md::MapTileDataRenderable<md::PolygonTileData>>::updateStyles(*(_QWORD **)(v17 + 384), 1);
        }
        while (v15 != v16);
      }
      break;
    case 4:
      v18 = *(uint64_t ***)(a1 + 16);
      v19 = *v18;
      v20 = v18[1];
      if (*v18 != v20)
      {
        do
        {
          v21 = *v19++;
          md::PolygonRenderLayer<(md::MapDataType)1,md::MapTileDataRenderable<md::PolygonTileData>>::updateStyles(*(_QWORD **)(v21 + 384), 1);
        }
        while (v19 != v20);
      }
      break;
    default:
      return;
  }
}

md::LabelManager *md::LabelManager::setStyleManager(md::LabelManager *this, uint64_t a2, uint64_t a3)
{
  md::LabelManager *v3;
  unint64_t *v4;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t v9;
  _QWORD v10[3];
  md::LabelManager *v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  if (*((_QWORD *)this + 436) != a2)
  {
    v3 = this;
    if (a3)
    {
      v4 = (unint64_t *)(a3 + 8);
      do
        v5 = __ldxr(v4);
      while (__stxr(v5 + 1, v4));
    }
    *((_QWORD *)this + 436) = a2;
    v6 = (std::__shared_weak_count *)*((_QWORD *)this + 437);
    *((_QWORD *)this + 437) = a3;
    if (v6)
    {
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
    v10[0] = &off_1E42C97E8;
    v10[1] = v3;
    v11 = (md::LabelManager *)v10;
    md::LabelManager::queueCommand(v3, 8, 1, v10);
    this = v11;
    if (v11 == (md::LabelManager *)v10)
    {
      v9 = 4;
      this = (md::LabelManager *)v10;
    }
    else
    {
      if (!v11)
        return this;
      v9 = 5;
    }
    return (md::LabelManager *)(*(uint64_t (**)(void))(*(_QWORD *)this + 8 * v9))();
  }
  return this;
}

void sub_19F0CF1F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void md::LabelManager::setSceneManager(md::LabelManager *a1, uint64_t a2, std::__shared_weak_count *a3)
{
  unint64_t *p_shared_owners;
  unint64_t v7;
  _QWORD *v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  _QWORD v17[3];
  _QWORD *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  if (a3)
  {
    p_shared_owners = (unint64_t *)&a3->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  v18 = 0;
  v8 = operator new(0x20uLL);
  *v8 = &off_1E42C97A0;
  v8[1] = a1;
  v8[2] = a2;
  v8[3] = a3;
  if (a3)
  {
    v9 = (unint64_t *)&a3->__shared_owners_;
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  v18 = v8;
  md::LabelManager::queueCommand(a1, 34, 1, v17);
  v13 = v18;
  if (v18 == v17)
  {
    v14 = 4;
    v13 = v17;
  }
  else
  {
    if (!v18)
      goto LABEL_12;
    v14 = 5;
  }
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(*v13 + 8 * v14))(v13, v11, v12);
LABEL_12:
  if (a3)
  {
    v15 = (unint64_t *)&a3->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))a3->__on_zero_shared)(a3);
      std::__shared_weak_count::__release_weak(a3);
    }
  }
}

void sub_19F0CF360(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char *a15)
{
  char *v15;
  char *v17;
  uint64_t v18;

  v17 = a15;
  if (a15 == v15)
  {
    v18 = 4;
    v17 = &a12;
  }
  else
  {
    if (!a15)
      goto LABEL_6;
    v18 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v17 + 8 * v18))();
LABEL_6:
  md::components::Material::~Material((md::components::Material *)&a9);
  _Unwind_Resume(a1);
}

uint64_t md::SingleGEOResourceDataRequester::setVisibleZoomRange(uint64_t result, uint64_t a2)
{
  int v2;
  int v3;

  v2 = *(unsigned __int8 *)(result + 28);
  if (*(_BYTE *)a2)
  {
    *(_DWORD *)(result + 32) = *(_DWORD *)(a2 + 4);
    if (!v2)
      *(_BYTE *)(result + 28) = 1;
  }
  else if (*(_BYTE *)(result + 28))
  {
    *(_BYTE *)(result + 28) = 0;
  }
  v3 = *(unsigned __int8 *)(result + 36);
  if (*(_BYTE *)(a2 + 8))
  {
    *(_DWORD *)(result + 40) = *(_DWORD *)(a2 + 12);
    if (!v3)
      *(_BYTE *)(result + 36) = 1;
  }
  else if (*(_BYTE *)(result + 36))
  {
    *(_BYTE *)(result + 36) = 0;
  }
  return result;
}

int *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(uint64_t a1, unsigned int a2, unsigned int a3, unsigned int a4, _BYTE *a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  unsigned __int16 **v16;
  unint64_t v17;
  unsigned __int16 *v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  unsigned __int16 *v22;
  unsigned __int16 *v23;
  unint64_t v24;
  unint64_t v25;
  unsigned __int16 *v26;
  unsigned __int16 *v27;
  unsigned int v28;
  int *result;
  unsigned int v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unsigned int v36;
  uint64_t v37;
  unsigned __int16 *v38;
  unsigned __int16 *v39;
  unint64_t v40;
  unint64_t v41;
  unsigned __int16 *v42;
  unsigned __int16 *v43;
  unsigned int v44;

  v5 = *(_QWORD *)(a1 + 16 * a4 + 16);
  if (!v5)
  {
    if (a5)
      *a5 = 0;
    return (int *)gss::defaultValueForKey<gss::PropertyID,unsigned int>(a2);
  }
  v6 = a1 + 16 * a4;
  v7 = *(unsigned __int16 *)(v6 + 56);
  if (!*(_WORD *)(v6 + 56))
    return gss::CartoStyle<gss::PropertyID>::valueForKeyAtZ<unsigned int>(*(int **)(v5 + 72), a2, a3, a5);
  v8 = *(_QWORD *)(v6 + 48);
  v9 = v8 + 8 * v7;
  if (a3 >= 0x17)
    v10 = 23;
  else
    v10 = a3;
  while (1)
  {
    v12 = *(uint64_t **)(*(_QWORD *)v8 + 72);
    if (v12)
    {
      v15 = *v12;
      v14 = v12 + 2;
      v13 = v15;
      v16 = (unsigned __int16 **)(v15 + 80 * *((unsigned __int8 *)v14 + a3));
      v17 = *((unsigned __int16 *)v16 + 5);
      if (*((_WORD *)v16 + 5))
      {
        v18 = *v16;
        if (*((_BYTE *)v16 + 15))
        {
          if (v17 >= 0x1E)
          {
            v23 = *v16;
            v24 = v17;
            do
            {
              v25 = v24 >> 1;
              v26 = &v23[v24 >> 1];
              v28 = *v26;
              v27 = v26 + 1;
              v24 += ~(v24 >> 1);
              if (v28 < a2)
                v23 = v27;
              else
                v24 = v25;
            }
            while (v24);
            if (v23 == &v18[v17] || *v23 != a2)
              goto LABEL_8;
            v11 = (unint64_t)((char *)v23 - (char *)v18) >> 1;
          }
          else
          {
            v19 = 0;
            while (1)
            {
              v20 = v18[v19];
              if (v20 >= a2)
                break;
              if (v17 == ++v19)
                goto LABEL_8;
            }
            LOWORD(v11) = v20 == a2 ? v19 : (unsigned __int16)v17;
          }
        }
        else
        {
          v21 = 2 * v17;
          v22 = *v16;
          while (*v22 != a2)
          {
            ++v22;
            v21 -= 2;
            if (!v21)
            {
              v22 = &v18[v17];
              break;
            }
          }
          v11 = (unint64_t)((char *)v22 - (char *)v18) >> 1;
        }
      }
      else
      {
        LOWORD(v11) = 0;
      }
      if ((_DWORD)v17 != (unsigned __int16)v11)
        break;
    }
LABEL_8:
    v8 += 8;
    if (v8 == v9)
      return gss::CartoStyle<gss::PropertyID>::valueForKeyAtZ<unsigned int>(*(int **)(v5 + 72), a2, a3, a5);
  }
  v30 = *((unsigned __int8 *)v14 + v10);
  v31 = v13 + 80 * *((unsigned __int8 *)v14 + v10);
  v32 = *(unsigned __int16 *)(v31 + 42);
  if (!*(_WORD *)(v31 + 42))
    return &gss::PropertySetValueHelper<gss::PropertyID,unsigned int>::value(gss::PropertyID,gss::StylePropertySet<gss::PropertyID> const&)::_defaultValue;
  v33 = v13 + 80 * *((unsigned __int8 *)v14 + v10);
  v34 = *(_QWORD *)(v33 + 32);
  if (*(_BYTE *)(v33 + 47))
  {
    if (v32 < 0x1E)
    {
      v35 = 0;
      result = &gss::PropertySetValueHelper<gss::PropertyID,unsigned int>::value(gss::PropertyID,gss::StylePropertySet<gss::PropertyID> const&)::_defaultValue;
      while (1)
      {
        v36 = *(unsigned __int16 *)(v34 + 2 * v35);
        if (v36 >= a2)
          break;
        if (v32 == ++v35)
          return result;
      }
      if (v36 != a2)
        LOWORD(v35) = v32;
      goto LABEL_59;
    }
    v39 = *(unsigned __int16 **)(v33 + 32);
    v40 = v32;
    do
    {
      v41 = v40 >> 1;
      v42 = &v39[v40 >> 1];
      v44 = *v42;
      v43 = v42 + 1;
      v40 += ~(v40 >> 1);
      if (v44 < a2)
        v39 = v43;
      else
        v40 = v41;
    }
    while (v40);
    if (v39 != (unsigned __int16 *)(v34 + 2 * v32) && *v39 == a2)
    {
      v35 = ((unint64_t)v39 - v34) >> 1;
      goto LABEL_59;
    }
    return &gss::PropertySetValueHelper<gss::PropertyID,unsigned int>::value(gss::PropertyID,gss::StylePropertySet<gss::PropertyID> const&)::_defaultValue;
  }
  else
  {
    v37 = 2 * v32;
    v38 = *(unsigned __int16 **)(v33 + 32);
    while (*v38 != a2)
    {
      ++v38;
      v37 -= 2;
      if (!v37)
      {
        v38 = (unsigned __int16 *)(v34 + 2 * v32);
        break;
      }
    }
    v35 = ((unint64_t)v38 - v34) >> 1;
LABEL_59:
    if (v32 <= (unsigned __int16)v35)
      return &gss::PropertySetValueHelper<gss::PropertyID,unsigned int>::value(gss::PropertyID,gss::StylePropertySet<gss::PropertyID> const&)::_defaultValue;
    return (int *)(v34 + *(unsigned __int16 *)(v13 + 80 * v30 + 40) + 4 * (unsigned __int16)v35);
  }
}

int *gss::CartoStyle<gss::PropertyID>::valueForKeyAtZ<unsigned int>(int *result, unsigned int a2, unsigned int a3, _BYTE *a4)
{
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unsigned __int16 *v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  unsigned __int16 *v13;
  unsigned __int16 *v14;
  unint64_t v15;
  unint64_t v16;
  unsigned __int16 *v17;
  unsigned __int16 *v18;
  unsigned int v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unsigned int v25;
  unsigned __int16 v26;
  uint64_t v27;
  unsigned __int16 *v28;
  unsigned __int16 *v29;
  unint64_t v30;
  unint64_t v31;
  unsigned __int16 *v32;
  unsigned __int16 *v33;
  unsigned int v34;

  if (!result)
    goto LABEL_38;
  v4 = a3 >= 0x17 ? 23 : a3;
  v5 = *((unsigned __int8 *)result + v4 + 16);
  v6 = *(_QWORD *)result;
  v7 = *(_QWORD *)result + 80 * v5;
  v8 = *(unsigned __int16 *)(v7 + 10);
  if (!*(_WORD *)(v7 + 10))
    goto LABEL_38;
  v9 = *(unsigned __int16 **)v7;
  if (!*(_BYTE *)(v7 + 15))
  {
    v12 = 2 * v8;
    v13 = *(unsigned __int16 **)v7;
    while (*v13 != a2)
    {
      ++v13;
      v12 -= 2;
      if (!v12)
      {
        v13 = &v9[v8];
        break;
      }
    }
    if ((_DWORD)v8 == (unsigned __int16)((unint64_t)((char *)v13 - (char *)v9) >> 1))
      goto LABEL_38;
    goto LABEL_27;
  }
  if (v8 < 0x1E)
  {
    v10 = 0;
    while (1)
    {
      v11 = v9[v10];
      if (v11 >= a2)
        break;
      if (v8 == ++v10)
        goto LABEL_38;
    }
    if (v11 == a2)
      v26 = v10;
    else
      v26 = v8;
    if ((_DWORD)v8 == v26)
      goto LABEL_38;
    goto LABEL_27;
  }
  v14 = *(unsigned __int16 **)v7;
  v15 = v8;
  do
  {
    v16 = v15 >> 1;
    v17 = &v14[v15 >> 1];
    v19 = *v17;
    v18 = v17 + 1;
    v15 += ~(v15 >> 1);
    if (v19 < a2)
      v14 = v18;
    else
      v15 = v16;
  }
  while (v15);
  if (v14 == &v9[v8]
    || *v14 != a2
    || (_DWORD)v8 == (unsigned __int16)((unint64_t)((char *)v14 - (char *)v9) >> 1))
  {
LABEL_38:
    if (a4)
      *a4 = 0;
    return (int *)gss::defaultValueForKey<gss::PropertyID,unsigned int>(a2);
  }
LABEL_27:
  v20 = v6 + 80 * v5;
  v21 = *(unsigned __int16 *)(v20 + 42);
  if (!*(_WORD *)(v20 + 42))
    return &gss::PropertySetValueHelper<gss::PropertyID,unsigned int>::value(gss::PropertyID,gss::StylePropertySet<gss::PropertyID> const&)::_defaultValue;
  v22 = v6 + 80 * v5;
  v23 = *(_QWORD *)(v22 + 32);
  if (*(_BYTE *)(v22 + 47))
  {
    if (v21 >= 0x1E)
    {
      v29 = *(unsigned __int16 **)(v22 + 32);
      v30 = v21;
      do
      {
        v31 = v30 >> 1;
        v32 = &v29[v30 >> 1];
        v34 = *v32;
        v33 = v32 + 1;
        v30 += ~(v30 >> 1);
        if (v34 < a2)
          v29 = v33;
        else
          v30 = v31;
      }
      while (v30);
      if (v29 == (unsigned __int16 *)(v23 + 2 * v21) || *v29 != a2)
        return &gss::PropertySetValueHelper<gss::PropertyID,unsigned int>::value(gss::PropertyID,gss::StylePropertySet<gss::PropertyID> const&)::_defaultValue;
      v24 = ((unint64_t)v29 - v23) >> 1;
    }
    else
    {
      v24 = 0;
      result = &gss::PropertySetValueHelper<gss::PropertyID,unsigned int>::value(gss::PropertyID,gss::StylePropertySet<gss::PropertyID> const&)::_defaultValue;
      while (1)
      {
        v25 = *(unsigned __int16 *)(v23 + 2 * v24);
        if (v25 >= a2)
          break;
        if (v21 == ++v24)
          return result;
      }
      if (v25 != a2)
        LOWORD(v24) = v21;
    }
  }
  else
  {
    v27 = 2 * v21;
    v28 = *(unsigned __int16 **)(v22 + 32);
    while (*v28 != a2)
    {
      ++v28;
      v27 -= 2;
      if (!v27)
      {
        v28 = (unsigned __int16 *)(v23 + 2 * v21);
        break;
      }
    }
    v24 = ((unint64_t)v28 - v23) >> 1;
  }
  if ((_DWORD)v21 == (unsigned __int16)v24)
    return &gss::PropertySetValueHelper<gss::PropertyID,unsigned int>::value(gss::PropertyID,gss::StylePropertySet<gss::PropertyID> const&)::_defaultValue;
  if (v21 > (unsigned __int16)v24)
    return (int *)(v23 + *(unsigned __int16 *)(v6 + 80 * v5 + 40) + 4 * (unsigned __int16)v24);
  return result;
}

void *gss::defaultValueForKey<gss::PropertyID,unsigned int>(int a1)
{
  void *result;

  if (a1 > 286)
  {
    if (a1 <= 364)
    {
      if (a1 <= 327)
      {
        switch(a1)
        {
          case 287:
            return &gss::defaultValueForKey<gss::PropertyID,unsigned int>(gss::PropertyID)::kDefaultLabelAnnotationColorSource;
          case 315:
            return &gss::defaultValueForKey<gss::PropertyID,unsigned int>(gss::PropertyID)::kDefaultLabelTextPlacementSource;
          case 316:
            return &gss::defaultValueForKey<gss::PropertyID,unsigned int>(gss::PropertyID)::kDefaultNavLabelShieldSize;
        }
        return &gss::defaultValueForKey<gss::PropertyID,unsigned int>(gss::PropertyID)::_defaultValue;
      }
      switch(a1)
      {
        case 334:
          result = &gss::defaultValueForKey<gss::PropertyID,unsigned int>(gss::PropertyID)::kDefaultPickedLabelBalloonBehavior;
          break;
        case 335:
        case 336:
        case 337:
        case 338:
        case 340:
        case 342:
          return &gss::defaultValueForKey<gss::PropertyID,unsigned int>(gss::PropertyID)::_defaultValue;
        case 339:
          result = &gss::defaultValueForKey<gss::PropertyID,unsigned int>(gss::PropertyID)::kDefaultLabelAnnotationTextSource;
          break;
        case 341:
          result = &gss::defaultValueForKey<gss::PropertyID,unsigned int>(gss::PropertyID)::kDefaultTransitPlacement;
          break;
        case 343:
          result = &gss::defaultValueForKey<gss::PropertyID,unsigned int>(gss::PropertyID)::kDefaultLabelMeshPositioningMode;
          break;
        default:
          if (a1 != 328)
            return &gss::defaultValueForKey<gss::PropertyID,unsigned int>(gss::PropertyID)::_defaultValue;
          result = &gss::defaultValueForKey<gss::PropertyID,unsigned int>(gss::PropertyID)::kDefaultLabelTextSizingMode;
          break;
      }
    }
    else
    {
      if (a1 > 453)
      {
        if (a1 > 476)
        {
          if (a1 == 477)
            return &gss::defaultValueForKey<gss::PropertyID,unsigned int>(gss::PropertyID)::kDefaultLabelAnnotationOffsetPosition;
          if (a1 == 480)
            return &gss::defaultValueForKey<gss::PropertyID,unsigned int>(gss::PropertyID)::kDefaultManeuverDisplayMode;
        }
        else
        {
          if (a1 == 454)
            return &gss::defaultValueForKey<gss::PropertyID,unsigned int>(gss::PropertyID)::kDefaultExternalFeatureCategory;
          if (a1 == 470)
            return &gss::defaultValueForKey<gss::PropertyID,unsigned int>(gss::PropertyID)::kDefaultLabelCollisionExclusionGroups;
        }
        return &gss::defaultValueForKey<gss::PropertyID,unsigned int>(gss::PropertyID)::_defaultValue;
      }
      switch(a1)
      {
        case 365:
          result = &gss::defaultValueForKey<gss::PropertyID,unsigned int>(gss::PropertyID)::kDefaultLabelAnnotationImageSource;
          break;
        case 367:
          result = &gss::defaultValueForKey<gss::PropertyID,unsigned int>(gss::PropertyID)::kDefaultLabelSecondaryAnnotationTextSource;
          break;
        case 368:
          result = &gss::defaultValueForKey<gss::PropertyID,unsigned int>(gss::PropertyID)::kDefaultLabelSecondaryAnnotationImageSource;
          break;
        case 374:
          result = &gss::defaultValueForKey<gss::PropertyID,unsigned int>(gss::PropertyID)::kDefaultLabelAnnotationLayout;
          break;
        case 375:
          result = &gss::defaultValueForKey<gss::PropertyID,unsigned int>(gss::PropertyID)::kDefaultLabelAnnotation2Layout;
          break;
        case 376:
          result = &gss::defaultValueForKey<gss::PropertyID,unsigned int>(gss::PropertyID)::kDefaultLabelAnnotation2TextSource;
          break;
        case 377:
          result = &gss::defaultValueForKey<gss::PropertyID,unsigned int>(gss::PropertyID)::kDefaultLabelAnnotation2ImageSource;
          break;
        case 383:
          result = &gss::defaultValueForKey<gss::PropertyID,unsigned int>(gss::PropertyID)::kDefaultAlt1LabelIconImageSource;
          break;
        case 384:
          result = &gss::defaultValueForKey<gss::PropertyID,unsigned int>(gss::PropertyID)::kDefaultAlt2LabelIconImageSource;
          break;
        default:
          return &gss::defaultValueForKey<gss::PropertyID,unsigned int>(gss::PropertyID)::_defaultValue;
      }
    }
  }
  else
  {
    if (a1 <= 206)
    {
      if (a1 <= 188)
      {
        switch(a1)
        {
          case 167:
            result = &gss::defaultValueForKey<gss::PropertyID,unsigned int>(gss::PropertyID)::kDefaultLabelTextOrientation;
            break;
          case 168:
            result = &gss::defaultValueForKey<gss::PropertyID,unsigned int>(gss::PropertyID)::kDefaultLabelTextAlternateOrientations;
            break;
          case 169:
            result = &gss::defaultValueForKey<gss::PropertyID,unsigned int>(gss::PropertyID)::kDefaultLabelLayoutStyle;
            break;
          case 170:
            result = &gss::defaultValueForKey<gss::PropertyID,unsigned int>(gss::PropertyID)::kDefaultLabelIconStyle;
            break;
          case 171:
          case 172:
          case 173:
          case 174:
          case 175:
          case 176:
          case 177:
          case 178:
          case 180:
          case 182:
          case 184:
            return &gss::defaultValueForKey<gss::PropertyID,unsigned int>(gss::PropertyID)::_defaultValue;
          case 179:
            result = &gss::defaultValueForKey<gss::PropertyID,unsigned int>(gss::PropertyID)::kDefaultLabelIconGlyphStyle;
            break;
          case 181:
            result = &gss::defaultValueForKey<gss::PropertyID,unsigned int>(gss::PropertyID)::kDefaultLabelIconGlyphBlendMode;
            break;
          case 183:
            result = &gss::defaultValueForKey<gss::PropertyID,unsigned int>(gss::PropertyID)::kDefaultLabelIconBadgeLightBlendMode;
            break;
          case 185:
            result = &gss::defaultValueForKey<gss::PropertyID,unsigned int>(gss::PropertyID)::kDefaultLabelIconGlowBlendMode;
            break;
          default:
            if (a1 != 123)
              return &gss::defaultValueForKey<gss::PropertyID,unsigned int>(gss::PropertyID)::_defaultValue;
            result = &gss::defaultValueForKey<gss::PropertyID,unsigned int>(gss::PropertyID)::kDefaultLabelTextVisibility;
            break;
        }
        return result;
      }
      if (a1 == 189)
        return &gss::defaultValueForKey<gss::PropertyID,unsigned int>(gss::PropertyID)::kDefaultLabelIconSize;
      if (a1 == 192)
        return &gss::defaultValueForKey<gss::PropertyID,unsigned int>(gss::PropertyID)::kDefaultLabelAnnotationIconSize;
      return &gss::defaultValueForKey<gss::PropertyID,unsigned int>(gss::PropertyID)::_defaultValue;
    }
    if (a1 > 232)
    {
      switch(a1)
      {
        case 233:
          return &gss::defaultValueForKey<gss::PropertyID,unsigned int>(gss::PropertyID)::kDefaultLabelOffsetPosition;
        case 236:
          return &gss::defaultValueForKey<gss::PropertyID,unsigned int>(gss::PropertyID)::kDefaultLabelCollisionOverlayGroup;
        case 275:
          return &gss::defaultValueForKey<gss::PropertyID,unsigned int>(gss::PropertyID)::kDefaultLabelShieldVariant;
      }
      return &gss::defaultValueForKey<gss::PropertyID,unsigned int>(gss::PropertyID)::_defaultValue;
    }
    switch(a1)
    {
      case 207:
        result = &gss::defaultValueForKey<gss::PropertyID,unsigned int>(gss::PropertyID)::kDefaultShieldSize;
        break;
      case 209:
        result = &gss::defaultValueForKey<gss::PropertyID,unsigned int>(gss::PropertyID)::kDefaultLabelIconTextSource;
        break;
      case 210:
        result = &gss::defaultValueForKey<gss::PropertyID,unsigned int>(gss::PropertyID)::kDefaultLabelTextSource;
        break;
      case 212:
        result = &gss::defaultValueForKey<gss::PropertyID,unsigned int>(gss::PropertyID)::kDefaultLabelIconColorSource;
        break;
      case 213:
        result = &gss::defaultValueForKey<gss::PropertyID,unsigned int>(gss::PropertyID)::kDefaultLabelColorSource;
        break;
      case 223:
        result = &gss::defaultValueForKey<gss::PropertyID,unsigned int>(gss::PropertyID)::kDefaultLabelPositioningMode;
        break;
      case 224:
        result = &gss::defaultValueForKey<gss::PropertyID,unsigned int>(gss::PropertyID)::kDefaultLabelDefaultTextPosition;
        break;
      case 225:
        result = &gss::defaultValueForKey<gss::PropertyID,unsigned int>(gss::PropertyID)::kDefaultLabelAlternateTextPositions;
        break;
      default:
        return &gss::defaultValueForKey<gss::PropertyID,unsigned int>(gss::PropertyID)::_defaultValue;
    }
  }
  return result;
}

unint64_t *gss::RenderStyle<gss::PropertyID>::valueForKeyAtZ<geo::Color<unsigned short,4,(geo::ColorSpace)0>>(unint64_t *a1, uint64_t a2, unsigned int a3, unsigned int a4, unsigned int a5, BOOL *a6)
{
  unint64_t v11;
  float v12;
  unsigned int v14;
  unint64_t v15;
  unint64_t *result;
  unint64_t v17;
  unint64_t v18;
  int8x8_t v19;
  int8x8_t v20;
  float32x2_t v21;
  float32x2_t v22;
  int32x2_t v23;
  uint64x2_t v24;
  uint64x2_t v25;
  unint64_t v26;
  float v27;
  unsigned __int8 v28;
  unsigned __int8 v29;

  if (a5 == 2)
  {
    v11 = *(_QWORD *)a2;
    if (*(_QWORD *)a2)
    {
      v12 = *(float *)v11;
      LODWORD(v11) = *(float *)v11 == 1.0;
      if (*(_BYTE *)(a2 + 10))
      {
        if (v12 != 0.0 && v12 != 1.0)
          goto LABEL_12;
      }
    }
    v11 = v11;
  }
  else
  {
    v11 = a5;
  }
  v14 = *(unsigned __int8 *)(a2 + v11 + 11);
  v12 = 0.0;
  if (v14 != 2)
  {
    result = (unint64_t *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<geo::Color<unsigned short,4,(geo::ColorSpace)0>>(a2, a3, a4, v14, a6);
    v26 = *result;
    goto LABEL_16;
  }
LABEL_12:
  v27 = v12;
  v29 = 1;
  v28 = 1;
  v15 = *(_QWORD *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<geo::Color<unsigned short,4,(geo::ColorSpace)0>>(a2, a3, a4, 0, &v29);
  result = (unint64_t *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<geo::Color<unsigned short,4,(geo::ColorSpace)0>>(a2, a3, a4, 1u, &v28);
  v17 = *result;
  v18 = HIDWORD(*result);
  v19 = (int8x8_t)vmovn_s64((int64x2_t)vshlq_u64((uint64x2_t)vdupq_n_s64(v15), (uint64x2_t)xmmword_19FFB34F0));
  v20 = (int8x8_t)vmovn_s64((int64x2_t)vshlq_u64((uint64x2_t)vdupq_n_s64(*result), (uint64x2_t)xmmword_19FFB34F0));
  if (a6)
    *a6 = (v29 | v28) != 0;
  v21 = (float32x2_t)vdup_n_s32(0x37800080u);
  v22 = vmul_f32(vcvt_f32_u32((uint32x2_t)vand_s8(v19, (int8x8_t)0xFFFF0000FFFFLL)), v21);
  v23 = vcvt_s32_f32(vmul_f32(vmla_n_f32(v22, vmla_f32(vneg_f32(v22), v21, vcvt_f32_u32((uint32x2_t)vand_s8(v20, (int8x8_t)0xFFFF0000FFFFLL))), v27), (float32x2_t)vdup_n_s32(0x477FFF00u)));
  v24.i64[0] = v23.u32[0];
  v24.i64[1] = v23.u32[1];
  v25 = vshlq_u64(v24, (uint64x2_t)xmmword_19FFB3500);
  v26 = v25.i64[0] | ((unint64_t)(int)(float)((float)((float)((float)WORD2(v15) * 0.000015259)
                                                                         + (float)((float)-(float)((float)((float)WORD2(v15) * 0.000015259)
                                                                                                 - (float)((float)(unsigned __int16)v18 * 0.000015259))
                                                                                 * v27))
                                                                 * 65535.0) << 32) | (int)(float)((float)((float)((float)(unsigned __int16)v15 * 0.000015259) + (float)((float)-(float)((float)((float)(unsigned __int16)v15 * 0.000015259) - (float)((float)(unsigned __int16)v17 * 0.000015259)) * v27)) * 65535.0) | v25.i64[1];
LABEL_16:
  *a1 = v26;
  return result;
}

__int16 *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<geo::Color<unsigned short,4,(geo::ColorSpace)0>>(uint64_t a1, unsigned int a2, unsigned int a3, unsigned int a4, _BYTE *a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  unsigned __int16 **v16;
  unint64_t v17;
  unsigned __int16 *v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  unsigned __int16 *v22;
  unsigned __int16 *v23;
  unint64_t v24;
  unint64_t v25;
  unsigned __int16 *v26;
  unsigned __int16 *v27;
  unsigned int v28;
  __int16 *result;
  unsigned int v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unsigned int v36;
  uint64_t v37;
  unsigned __int16 *v38;
  unsigned __int16 *v39;
  unint64_t v40;
  unint64_t v41;
  unsigned __int16 *v42;
  unsigned __int16 *v43;
  unsigned int v44;

  v5 = *(_QWORD *)(a1 + 16 * a4 + 16);
  if (!v5)
  {
    if (a5)
      *a5 = 0;
    return (__int16 *)gss::defaultValueForKey<gss::PropertyID,geo::Color<unsigned short,4,(geo::ColorSpace)0>>(a2);
  }
  v6 = a1 + 16 * a4;
  v7 = *(unsigned __int16 *)(v6 + 56);
  if (!*(_WORD *)(v6 + 56))
    return gss::CartoStyle<gss::PropertyID>::valueForKeyAtZ<geo::Color<unsigned short,4,(geo::ColorSpace)0>>(*(__int16 **)(v5 + 72), a2, a3, a5);
  v8 = *(_QWORD *)(v6 + 48);
  v9 = v8 + 8 * v7;
  if (a3 >= 0x17)
    v10 = 23;
  else
    v10 = a3;
  while (1)
  {
    v12 = *(uint64_t **)(*(_QWORD *)v8 + 72);
    if (v12)
    {
      v15 = *v12;
      v14 = v12 + 2;
      v13 = v15;
      v16 = (unsigned __int16 **)(v15 + 80 * *((unsigned __int8 *)v14 + a3));
      v17 = *((unsigned __int16 *)v16 + 5);
      if (*((_WORD *)v16 + 5))
      {
        v18 = *v16;
        if (*((_BYTE *)v16 + 15))
        {
          if (v17 >= 0x1E)
          {
            v23 = *v16;
            v24 = v17;
            do
            {
              v25 = v24 >> 1;
              v26 = &v23[v24 >> 1];
              v28 = *v26;
              v27 = v26 + 1;
              v24 += ~(v24 >> 1);
              if (v28 < a2)
                v23 = v27;
              else
                v24 = v25;
            }
            while (v24);
            if (v23 == &v18[v17] || *v23 != a2)
              goto LABEL_8;
            v11 = (unint64_t)((char *)v23 - (char *)v18) >> 1;
          }
          else
          {
            v19 = 0;
            while (1)
            {
              v20 = v18[v19];
              if (v20 >= a2)
                break;
              if (v17 == ++v19)
                goto LABEL_8;
            }
            LOWORD(v11) = v20 == a2 ? v19 : (unsigned __int16)v17;
          }
        }
        else
        {
          v21 = 2 * v17;
          v22 = *v16;
          while (*v22 != a2)
          {
            ++v22;
            v21 -= 2;
            if (!v21)
            {
              v22 = &v18[v17];
              break;
            }
          }
          v11 = (unint64_t)((char *)v22 - (char *)v18) >> 1;
        }
      }
      else
      {
        LOWORD(v11) = 0;
      }
      if ((_DWORD)v17 != (unsigned __int16)v11)
        break;
    }
LABEL_8:
    v8 += 8;
    if (v8 == v9)
      return gss::CartoStyle<gss::PropertyID>::valueForKeyAtZ<geo::Color<unsigned short,4,(geo::ColorSpace)0>>(*(__int16 **)(v5 + 72), a2, a3, a5);
  }
  v30 = *((unsigned __int8 *)v14 + v10);
  v31 = v13 + 80 * *((unsigned __int8 *)v14 + v10);
  v32 = *(unsigned __int16 *)(v31 + 58);
  if (!*(_WORD *)(v31 + 58))
    return &gss::PropertySetValueHelper<gss::PropertyID,geo::Color<unsigned short,4,(geo::ColorSpace)0>>::value(gss::PropertyID,gss::StylePropertySet<gss::PropertyID> const&)::_defaultValue;
  v33 = v13 + 80 * *((unsigned __int8 *)v14 + v10);
  v34 = *(_QWORD *)(v33 + 48);
  if (*(_BYTE *)(v33 + 63))
  {
    if (v32 < 0x1E)
    {
      v35 = 0;
      result = &gss::PropertySetValueHelper<gss::PropertyID,geo::Color<unsigned short,4,(geo::ColorSpace)0>>::value(gss::PropertyID,gss::StylePropertySet<gss::PropertyID> const&)::_defaultValue;
      while (1)
      {
        v36 = *(unsigned __int16 *)(v34 + 2 * v35);
        if (v36 >= a2)
          break;
        if (v32 == ++v35)
          return result;
      }
      if (v36 != a2)
        LOWORD(v35) = v32;
      goto LABEL_59;
    }
    v39 = *(unsigned __int16 **)(v33 + 48);
    v40 = v32;
    do
    {
      v41 = v40 >> 1;
      v42 = &v39[v40 >> 1];
      v44 = *v42;
      v43 = v42 + 1;
      v40 += ~(v40 >> 1);
      if (v44 < a2)
        v39 = v43;
      else
        v40 = v41;
    }
    while (v40);
    if (v39 != (unsigned __int16 *)(v34 + 2 * v32) && *v39 == a2)
    {
      v35 = ((unint64_t)v39 - v34) >> 1;
      goto LABEL_59;
    }
    return &gss::PropertySetValueHelper<gss::PropertyID,geo::Color<unsigned short,4,(geo::ColorSpace)0>>::value(gss::PropertyID,gss::StylePropertySet<gss::PropertyID> const&)::_defaultValue;
  }
  else
  {
    v37 = 2 * v32;
    v38 = *(unsigned __int16 **)(v33 + 48);
    while (*v38 != a2)
    {
      ++v38;
      v37 -= 2;
      if (!v37)
      {
        v38 = (unsigned __int16 *)(v34 + 2 * v32);
        break;
      }
    }
    v35 = ((unint64_t)v38 - v34) >> 1;
LABEL_59:
    if (v32 <= (unsigned __int16)v35)
      return &gss::PropertySetValueHelper<gss::PropertyID,geo::Color<unsigned short,4,(geo::ColorSpace)0>>::value(gss::PropertyID,gss::StylePropertySet<gss::PropertyID> const&)::_defaultValue;
    return (__int16 *)(v34 + *(unsigned __int16 *)(v13 + 80 * v30 + 56) + 8 * (unsigned __int16)v35);
  }
}

uint64_t gss::RenderStyle<gss::PropertyID>::valueForKeyAtZ<int>(uint64_t a1, unsigned int a2, unsigned int a3, BOOL *a4)
{
  float *v8;
  float v9;
  BOOL v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned __int8 v15;
  unsigned __int8 v16;

  v8 = *(float **)a1;
  if (!*(_QWORD *)a1
    || (v9 = *v8, LODWORD(v8) = *v8 == 1.0, !*(_BYTE *)(a1 + 10))
    || (v9 != 0.0 ? (v10 = v9 == 1.0) : (v10 = 1), v10))
  {
    v11 = *(unsigned __int8 *)(a1 + v8 + 11);
    v9 = 0.0;
    if (v11 != 2)
      return *(unsigned int *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<int>(a1, a2, a3, v11, a4);
  }
  v16 = 1;
  v15 = 1;
  v12 = *(_DWORD *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<int>(a1, a2, a3, 0, &v16);
  v13 = *(_DWORD *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<int>(a1, a2, a3, 1u, &v15);
  if (a4)
    *a4 = (v16 | v15) != 0;
  if (v9 >= 1.0)
    return v13;
  else
    return v12;
}

uint64_t gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<int>(uint64_t result, unsigned int a2, unsigned int a3, unsigned int a4, _BYTE *a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unsigned __int16 *v22;
  unsigned __int16 *v23;
  unsigned int v24;
  uint64_t *v25;
  uint64_t v26;
  unsigned int v27;
  uint64_t v28;
  unsigned __int16 **v29;
  unint64_t v30;
  unsigned __int16 *v31;
  uint64_t v32;
  unsigned int v33;
  unsigned int v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unsigned int v40;
  unint64_t v41;
  uint64_t v42;
  unsigned __int16 *v43;
  unsigned __int16 *v44;
  unint64_t v45;
  unint64_t v46;
  unsigned __int16 *v47;
  unsigned __int16 *v48;
  unsigned int v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  unsigned int v53;
  uint64_t v54;
  unsigned __int16 *v55;
  uint64_t v56;
  unsigned __int16 *v57;
  unsigned __int16 *v58;
  unint64_t v59;
  unint64_t v60;
  unsigned __int16 *v61;
  unsigned __int16 *v62;
  unsigned int v63;
  unsigned __int16 *v64;
  unint64_t v65;
  unint64_t v66;
  unsigned __int16 *v67;
  unsigned __int16 *v68;
  unsigned int v69;
  uint64_t v70;

  v5 = *(_QWORD *)(result + 16 * a4 + 16);
  if (!v5)
    goto LABEL_69;
  v6 = result + 16 * a4;
  v7 = *(unsigned __int16 *)(v6 + 56);
  if (!*(_WORD *)(v6 + 56))
  {
LABEL_33:
    v25 = *(uint64_t **)(v5 + 72);
    if (v25)
    {
      if (a3 >= 0x17)
        v26 = 23;
      else
        v26 = a3;
      v27 = *((unsigned __int8 *)v25 + v26 + 16);
      v28 = *v25;
      v29 = (unsigned __int16 **)(v28 + 80 * v27);
      v30 = *((unsigned __int16 *)v29 + 5);
      if (*((_WORD *)v29 + 5))
      {
        v31 = *v29;
        if (*((_BYTE *)v29 + 15))
        {
          if (v30 >= 0x1E)
          {
            v44 = *v29;
            v45 = v30;
            do
            {
              v46 = v45 >> 1;
              v47 = &v44[v45 >> 1];
              v49 = *v47;
              v48 = v47 + 1;
              v45 += ~(v45 >> 1);
              if (v49 < a2)
                v44 = v48;
              else
                v45 = v46;
            }
            while (v45);
            if (v44 == &v31[v30] || *v44 != a2)
              goto LABEL_69;
            v41 = (unint64_t)((char *)v44 - (char *)v31) >> 1;
          }
          else
          {
            v32 = 0;
            while (1)
            {
              v33 = v31[v32];
              if (v33 >= a2)
                break;
              if (v30 == ++v32)
                goto LABEL_69;
            }
            if (v33 == a2)
              LOWORD(v41) = v32;
            else
              LOWORD(v41) = v30;
          }
        }
        else
        {
          v42 = 2 * v30;
          v43 = *v29;
          while (*v43 != a2)
          {
            ++v43;
            v42 -= 2;
            if (!v42)
            {
              v43 = &v31[v30];
              break;
            }
          }
          v41 = (unint64_t)((char *)v43 - (char *)v31) >> 1;
        }
      }
      else
      {
        LOWORD(v41) = 0;
      }
      if ((_DWORD)v30 != (unsigned __int16)v41)
      {
        v50 = v28 + 80 * v27;
        v51 = *(unsigned __int16 *)(v50 + 42);
        if (!*(_WORD *)(v50 + 42))
          return (uint64_t)&gss::PropertySetValueHelper<gss::PropertyID,int>::value(gss::PropertyID,gss::StylePropertySet<gss::PropertyID> const&)::_defaultValue;
        v52 = v28 + 80 * v27;
        v38 = *(_QWORD *)(v52 + 32);
        if (*(_BYTE *)(v52 + 47))
        {
          if (v51 >= 0x1E)
          {
            v64 = *(unsigned __int16 **)(v52 + 32);
            v65 = v51;
            do
            {
              v66 = v65 >> 1;
              v67 = &v64[v65 >> 1];
              v69 = *v67;
              v68 = v67 + 1;
              v65 += ~(v65 >> 1);
              if (v69 < a2)
                v64 = v68;
              else
                v65 = v66;
            }
            while (v65);
            if (v64 == (unsigned __int16 *)(v38 + 2 * v51) || *v64 != a2)
              return (uint64_t)&gss::PropertySetValueHelper<gss::PropertyID,int>::value(gss::PropertyID,gss::StylePropertySet<gss::PropertyID> const&)::_defaultValue;
            v39 = ((unint64_t)v64 - v38) >> 1;
          }
          else
          {
            v39 = 0;
            result = (uint64_t)&gss::PropertySetValueHelper<gss::PropertyID,int>::value(gss::PropertyID,gss::StylePropertySet<gss::PropertyID> const&)::_defaultValue;
            while (1)
            {
              v53 = *(unsigned __int16 *)(v38 + 2 * v39);
              if (v53 >= a2)
                break;
              if (v51 == ++v39)
                return result;
            }
            if (v53 != a2)
              LOWORD(v39) = v51;
          }
        }
        else
        {
          v56 = 2 * v51;
          v57 = *(unsigned __int16 **)(v52 + 32);
          while (*v57 != a2)
          {
            ++v57;
            v56 -= 2;
            if (!v56)
            {
              v57 = (unsigned __int16 *)(v38 + 2 * v51);
              break;
            }
          }
          v39 = ((unint64_t)v57 - v38) >> 1;
        }
        if ((_DWORD)v51 == (unsigned __int16)v39)
          return (uint64_t)&gss::PropertySetValueHelper<gss::PropertyID,int>::value(gss::PropertyID,gss::StylePropertySet<gss::PropertyID> const&)::_defaultValue;
        if (v51 <= (unsigned __int16)v39)
          return result;
        v70 = v28 + 80 * v27;
        return v38 + *(unsigned __int16 *)(v70 + 40) + 4 * (unsigned __int16)v39;
      }
    }
LABEL_69:
    if (a5)
      *a5 = 0;
    return (uint64_t)gss::defaultValueForKey<gss::PropertyID,int>(a2);
  }
  v8 = *(_QWORD *)(v6 + 48);
  v9 = v8 + 8 * v7;
  if (a3 >= 0x17)
    v10 = 23;
  else
    v10 = a3;
  while (1)
  {
    v12 = *(uint64_t **)(*(_QWORD *)v8 + 72);
    if (v12)
    {
      v15 = *v12;
      v14 = v12 + 2;
      v13 = v15;
      result = v15 + 80 * *((unsigned __int8 *)v14 + a3);
      v16 = *(unsigned __int16 *)(result + 10);
      if (*(_WORD *)(result + 10))
      {
        v17 = *(_QWORD *)result;
        if (*(_BYTE *)(result + 15))
        {
          if (v16 >= 0x1E)
          {
            result = *(_QWORD *)result;
            v20 = v16;
            do
            {
              v21 = v20 >> 1;
              v22 = (unsigned __int16 *)(result + 2 * (v20 >> 1));
              v24 = *v22;
              v23 = v22 + 1;
              v20 += ~(v20 >> 1);
              if (v24 < a2)
                result = (uint64_t)v23;
              else
                v20 = v21;
            }
            while (v20);
            if (result == v17 + 2 * v16 || *(unsigned __int16 *)result != a2)
              goto LABEL_8;
            v11 = (unint64_t)(result - v17) >> 1;
          }
          else
          {
            result = 0;
            while (1)
            {
              v18 = *(unsigned __int16 *)(v17 + 2 * result);
              if (v18 >= a2)
                break;
              if (v16 == ++result)
                goto LABEL_8;
            }
            LOWORD(v11) = v18 == a2 ? result : (unsigned __int16)v16;
          }
        }
        else
        {
          v19 = 2 * v16;
          result = *(_QWORD *)result;
          while (*(unsigned __int16 *)result != a2)
          {
            result += 2;
            v19 -= 2;
            if (!v19)
            {
              result = v17 + 2 * v16;
              break;
            }
          }
          v11 = (unint64_t)(result - v17) >> 1;
        }
      }
      else
      {
        LOWORD(v11) = 0;
      }
      if ((_DWORD)v16 != (unsigned __int16)v11)
        break;
    }
LABEL_8:
    v8 += 8;
    if (v8 == v9)
      goto LABEL_33;
  }
  v34 = *((unsigned __int8 *)v14 + v10);
  v35 = v13 + 80 * *((unsigned __int8 *)v14 + v10);
  v36 = *(unsigned __int16 *)(v35 + 42);
  if (!*(_WORD *)(v35 + 42))
    return (uint64_t)&gss::PropertySetValueHelper<gss::PropertyID,int>::value(gss::PropertyID,gss::StylePropertySet<gss::PropertyID> const&)::_defaultValue;
  v37 = v13 + 80 * *((unsigned __int8 *)v14 + v10);
  v38 = *(_QWORD *)(v37 + 32);
  if (!*(_BYTE *)(v37 + 47))
  {
    v54 = 2 * v36;
    v55 = *(unsigned __int16 **)(v37 + 32);
    while (*v55 != a2)
    {
      ++v55;
      v54 -= 2;
      if (!v54)
      {
        v55 = (unsigned __int16 *)(v38 + 2 * v36);
        break;
      }
    }
    v39 = ((unint64_t)v55 - v38) >> 1;
LABEL_107:
    if (v36 <= (unsigned __int16)v39)
      return (uint64_t)&gss::PropertySetValueHelper<gss::PropertyID,int>::value(gss::PropertyID,gss::StylePropertySet<gss::PropertyID> const&)::_defaultValue;
    v70 = v13 + 80 * v34;
    return v38 + *(unsigned __int16 *)(v70 + 40) + 4 * (unsigned __int16)v39;
  }
  if (v36 < 0x1E)
  {
    v39 = 0;
    result = (uint64_t)&gss::PropertySetValueHelper<gss::PropertyID,int>::value(gss::PropertyID,gss::StylePropertySet<gss::PropertyID> const&)::_defaultValue;
    while (1)
    {
      v40 = *(unsigned __int16 *)(v38 + 2 * v39);
      if (v40 >= a2)
        break;
      if (v36 == ++v39)
        return result;
    }
    if (v40 != a2)
      LOWORD(v39) = v36;
    goto LABEL_107;
  }
  v58 = *(unsigned __int16 **)(v37 + 32);
  v59 = v36;
  do
  {
    v60 = v59 >> 1;
    v61 = &v58[v59 >> 1];
    v63 = *v61;
    v62 = v61 + 1;
    v59 += ~(v59 >> 1);
    if (v63 < a2)
      v58 = v62;
    else
      v59 = v60;
  }
  while (v59);
  if (v58 != (unsigned __int16 *)(v38 + 2 * v36) && *v58 == a2)
  {
    v39 = ((unint64_t)v58 - v38) >> 1;
    goto LABEL_107;
  }
  return (uint64_t)&gss::PropertySetValueHelper<gss::PropertyID,int>::value(gss::PropertyID,gss::StylePropertySet<gss::PropertyID> const&)::_defaultValue;
}

unsigned __int16 *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned char>(unsigned __int16 *result, unsigned int a2, unsigned int a3, int a4, _BYTE *a5)
{
  uint64_t v5;
  unsigned __int16 *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  unsigned __int16 *v20;
  unsigned __int16 *v21;
  unsigned __int16 *v22;
  unsigned __int16 *v23;
  unsigned int v24;
  uint64_t *v25;
  uint64_t v26;
  unsigned int v27;
  uint64_t v28;
  unsigned __int16 **v29;
  unint64_t v30;
  unsigned __int16 *v31;
  uint64_t v32;
  unsigned int v33;
  unsigned int v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unsigned int v40;
  unint64_t v41;
  uint64_t v42;
  unsigned __int16 *v43;
  unsigned __int16 *v44;
  unint64_t v45;
  unint64_t v46;
  unsigned __int16 *v47;
  unsigned __int16 *v48;
  unsigned int v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  unsigned int v53;
  uint64_t v54;
  unsigned __int16 *v55;
  uint64_t v56;
  unsigned __int16 *v57;
  unsigned __int16 *v58;
  unint64_t v59;
  unint64_t v60;
  unsigned __int16 *v61;
  unsigned __int16 *v62;
  unsigned int v63;
  unsigned __int16 *v64;
  unint64_t v65;
  unint64_t v66;
  unsigned __int16 *v67;
  unsigned __int16 *v68;
  unsigned int v69;
  uint64_t v70;

  v5 = *(_QWORD *)&result[8 * a4 + 8];
  if (!v5)
    goto LABEL_69;
  v6 = &result[8 * a4];
  v7 = v6[28];
  if (!v6[28])
  {
LABEL_33:
    v25 = *(uint64_t **)(v5 + 72);
    if (v25)
    {
      if (a3 >= 0x17)
        v26 = 23;
      else
        v26 = a3;
      v27 = *((unsigned __int8 *)v25 + v26 + 16);
      v28 = *v25;
      v29 = (unsigned __int16 **)(v28 + 80 * v27);
      v30 = *((unsigned __int16 *)v29 + 5);
      if (*((_WORD *)v29 + 5))
      {
        v31 = *v29;
        if (*((_BYTE *)v29 + 15))
        {
          if (v30 >= 0x1E)
          {
            v44 = *v29;
            v45 = v30;
            do
            {
              v46 = v45 >> 1;
              v47 = &v44[v45 >> 1];
              v49 = *v47;
              v48 = v47 + 1;
              v45 += ~(v45 >> 1);
              if (v49 < a2)
                v44 = v48;
              else
                v45 = v46;
            }
            while (v45);
            if (v44 == &v31[v30] || *v44 != a2)
              goto LABEL_69;
            v41 = (unint64_t)((char *)v44 - (char *)v31) >> 1;
          }
          else
          {
            v32 = 0;
            while (1)
            {
              v33 = v31[v32];
              if (v33 >= a2)
                break;
              if (v30 == ++v32)
                goto LABEL_69;
            }
            if (v33 == a2)
              LOWORD(v41) = v32;
            else
              LOWORD(v41) = v30;
          }
        }
        else
        {
          v42 = 2 * v30;
          v43 = *v29;
          while (*v43 != a2)
          {
            ++v43;
            v42 -= 2;
            if (!v42)
            {
              v43 = &v31[v30];
              break;
            }
          }
          v41 = (unint64_t)((char *)v43 - (char *)v31) >> 1;
        }
      }
      else
      {
        LOWORD(v41) = 0;
      }
      if ((_DWORD)v30 != (unsigned __int16)v41)
      {
        v50 = v28 + 80 * v27;
        v51 = *(unsigned __int16 *)(v50 + 26);
        if (!*(_WORD *)(v50 + 26))
          return (unsigned __int16 *)&gss::PropertySetValueHelper<gss::PropertyID,unsigned char>::value(gss::PropertyID,gss::StylePropertySet<gss::PropertyID> const&)::_defaultValue;
        v52 = v28 + 80 * v27;
        v38 = *(_QWORD *)(v52 + 16);
        if (*(_BYTE *)(v52 + 31))
        {
          if (v51 >= 0x1E)
          {
            v64 = *(unsigned __int16 **)(v52 + 16);
            v65 = v51;
            do
            {
              v66 = v65 >> 1;
              v67 = &v64[v65 >> 1];
              v69 = *v67;
              v68 = v67 + 1;
              v65 += ~(v65 >> 1);
              if (v69 < a2)
                v64 = v68;
              else
                v65 = v66;
            }
            while (v65);
            if (v64 == (unsigned __int16 *)(v38 + 2 * v51) || *v64 != a2)
              return (unsigned __int16 *)&gss::PropertySetValueHelper<gss::PropertyID,unsigned char>::value(gss::PropertyID,gss::StylePropertySet<gss::PropertyID> const&)::_defaultValue;
            v39 = ((unint64_t)v64 - v38) >> 1;
          }
          else
          {
            v39 = 0;
            result = (unsigned __int16 *)&gss::PropertySetValueHelper<gss::PropertyID,unsigned char>::value(gss::PropertyID,gss::StylePropertySet<gss::PropertyID> const&)::_defaultValue;
            while (1)
            {
              v53 = *(unsigned __int16 *)(v38 + 2 * v39);
              if (v53 >= a2)
                break;
              if (v51 == ++v39)
                return result;
            }
            if (v53 != a2)
              LOWORD(v39) = v51;
          }
        }
        else
        {
          v56 = 2 * v51;
          v57 = *(unsigned __int16 **)(v52 + 16);
          while (*v57 != a2)
          {
            ++v57;
            v56 -= 2;
            if (!v56)
            {
              v57 = (unsigned __int16 *)(v38 + 2 * v51);
              break;
            }
          }
          v39 = ((unint64_t)v57 - v38) >> 1;
        }
        if ((_DWORD)v51 == (unsigned __int16)v39)
          return (unsigned __int16 *)&gss::PropertySetValueHelper<gss::PropertyID,unsigned char>::value(gss::PropertyID,gss::StylePropertySet<gss::PropertyID> const&)::_defaultValue;
        if (v51 <= (unsigned __int16)v39)
          return result;
        v70 = v28 + 80 * v27;
        return (unsigned __int16 *)(v38 + *(unsigned __int16 *)(v70 + 24) + (unsigned __int16)v39);
      }
    }
LABEL_69:
    if (a5)
      *a5 = 0;
    return (unsigned __int16 *)gss::defaultValueForKey<gss::PropertyID,unsigned char>(a2);
  }
  v8 = *((_QWORD *)v6 + 6);
  v9 = v8 + 8 * v7;
  if (a3 >= 0x17)
    v10 = 23;
  else
    v10 = a3;
  while (1)
  {
    v12 = *(uint64_t **)(*(_QWORD *)v8 + 72);
    if (v12)
    {
      v15 = *v12;
      v14 = v12 + 2;
      v13 = v15;
      result = (unsigned __int16 *)(v15 + 80 * *((unsigned __int8 *)v14 + a3));
      v16 = result[5];
      if (result[5])
      {
        v17 = *(_QWORD *)result;
        if (*((_BYTE *)result + 15))
        {
          if (v16 >= 0x1E)
          {
            result = *(unsigned __int16 **)result;
            v20 = (unsigned __int16 *)v16;
            do
            {
              v21 = (unsigned __int16 *)((unint64_t)v20 >> 1);
              v22 = &result[(unint64_t)v20 >> 1];
              v24 = *v22;
              v23 = v22 + 1;
              v20 = (unsigned __int16 *)((char *)v20 + ~((unint64_t)v20 >> 1));
              if (v24 < a2)
                result = v23;
              else
                v20 = v21;
            }
            while (v20);
            if (result == (unsigned __int16 *)(v17 + 2 * v16) || *result != a2)
              goto LABEL_8;
            v11 = ((unint64_t)result - v17) >> 1;
          }
          else
          {
            result = 0;
            while (1)
            {
              v18 = *(unsigned __int16 *)(v17 + 2 * (_QWORD)result);
              if (v18 >= a2)
                break;
              result = (unsigned __int16 *)((char *)result + 1);
              if ((unsigned __int16 *)v16 == result)
                goto LABEL_8;
            }
            LOWORD(v11) = v18 == a2 ? (unsigned __int16)result : v16;
          }
        }
        else
        {
          v19 = 2 * v16;
          result = *(unsigned __int16 **)result;
          while (*result != a2)
          {
            ++result;
            v19 -= 2;
            if (!v19)
            {
              result = (unsigned __int16 *)(v17 + 2 * v16);
              break;
            }
          }
          v11 = ((unint64_t)result - v17) >> 1;
        }
      }
      else
      {
        LOWORD(v11) = 0;
      }
      if ((_DWORD)v16 != (unsigned __int16)v11)
        break;
    }
LABEL_8:
    v8 += 8;
    if (v8 == v9)
      goto LABEL_33;
  }
  v34 = *((unsigned __int8 *)v14 + v10);
  v35 = v13 + 80 * *((unsigned __int8 *)v14 + v10);
  v36 = *(unsigned __int16 *)(v35 + 26);
  if (!*(_WORD *)(v35 + 26))
    return (unsigned __int16 *)&gss::PropertySetValueHelper<gss::PropertyID,unsigned char>::value(gss::PropertyID,gss::StylePropertySet<gss::PropertyID> const&)::_defaultValue;
  v37 = v13 + 80 * *((unsigned __int8 *)v14 + v10);
  v38 = *(_QWORD *)(v37 + 16);
  if (!*(_BYTE *)(v37 + 31))
  {
    v54 = 2 * v36;
    v55 = *(unsigned __int16 **)(v37 + 16);
    while (*v55 != a2)
    {
      ++v55;
      v54 -= 2;
      if (!v54)
      {
        v55 = (unsigned __int16 *)(v38 + 2 * v36);
        break;
      }
    }
    v39 = ((unint64_t)v55 - v38) >> 1;
LABEL_107:
    if (v36 <= (unsigned __int16)v39)
      return (unsigned __int16 *)&gss::PropertySetValueHelper<gss::PropertyID,unsigned char>::value(gss::PropertyID,gss::StylePropertySet<gss::PropertyID> const&)::_defaultValue;
    v70 = v13 + 80 * v34;
    return (unsigned __int16 *)(v38 + *(unsigned __int16 *)(v70 + 24) + (unsigned __int16)v39);
  }
  if (v36 < 0x1E)
  {
    v39 = 0;
    result = (unsigned __int16 *)&gss::PropertySetValueHelper<gss::PropertyID,unsigned char>::value(gss::PropertyID,gss::StylePropertySet<gss::PropertyID> const&)::_defaultValue;
    while (1)
    {
      v40 = *(unsigned __int16 *)(v38 + 2 * v39);
      if (v40 >= a2)
        break;
      if (v36 == ++v39)
        return result;
    }
    if (v40 != a2)
      LOWORD(v39) = v36;
    goto LABEL_107;
  }
  v58 = *(unsigned __int16 **)(v37 + 16);
  v59 = v36;
  do
  {
    v60 = v59 >> 1;
    v61 = &v58[v59 >> 1];
    v63 = *v61;
    v62 = v61 + 1;
    v59 += ~(v59 >> 1);
    if (v63 < a2)
      v58 = v62;
    else
      v59 = v60;
  }
  while (v59);
  if (v58 != (unsigned __int16 *)(v38 + 2 * v36) && *v58 == a2)
  {
    v39 = ((unint64_t)v58 - v38) >> 1;
    goto LABEL_107;
  }
  return (unsigned __int16 *)&gss::PropertySetValueHelper<gss::PropertyID,unsigned char>::value(gss::PropertyID,gss::StylePropertySet<gss::PropertyID> const&)::_defaultValue;
}

uint64_t gss::RenderStyle<gss::PropertyID>::styleValueForKey<float>(uint64_t result, unsigned int a2, unsigned int a3, _BYTE *a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unsigned __int16 ***v10;
  unsigned __int16 **v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  unsigned __int16 *v17;
  unsigned __int16 *v18;
  unint64_t v19;
  unint64_t v20;
  unsigned __int16 *v21;
  unsigned __int16 *v22;
  unsigned int v23;
  unsigned __int16 ***v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  uint64_t v29;
  unsigned __int16 *v30;
  unint64_t v31;
  unsigned int v32;
  unint64_t v33;
  uint64_t v34;
  unsigned __int16 *v35;
  unsigned __int16 *v36;
  unint64_t v37;
  unint64_t v38;
  unsigned __int16 *v39;
  unsigned __int16 *v40;
  unsigned int v41;
  uint64_t v42;
  unsigned int v43;
  uint64_t v44;
  unsigned __int16 *v45;
  uint64_t v46;
  unsigned __int16 *v47;
  unsigned __int16 *v48;
  unint64_t v49;
  unint64_t v50;
  unsigned __int16 *v51;
  unsigned __int16 *v52;
  unsigned int v53;
  unsigned __int16 *v54;
  unint64_t v55;
  unint64_t v56;
  unsigned __int16 *v57;
  unsigned __int16 *v58;
  unsigned int v59;

  v4 = *(_QWORD *)(result + 16 * a3 + 16);
  if (!v4)
  {
    if (a4)
      *a4 = 0;
    return (uint64_t)gss::defaultValueForKey<gss::PropertyID,float>(a2);
  }
  v5 = result + 16 * a3;
  v6 = *(unsigned __int16 *)(v5 + 56);
  if (!*(_WORD *)(v5 + 56))
  {
LABEL_31:
    v24 = *(unsigned __int16 ****)(v4 + 72);
    if (v24)
    {
      v11 = *v24;
      v25 = *((unsigned __int16 *)v11 + 5);
      if (!*((_WORD *)v11 + 5))
      {
        LOWORD(v33) = 0;
        goto LABEL_66;
      }
      v26 = (uint64_t)*v11;
      if (!*((_BYTE *)v11 + 15))
      {
        v34 = 2 * v25;
        v35 = *v11;
        while (*v35 != a2)
        {
          ++v35;
          v34 -= 2;
          if (!v34)
          {
            v35 = (unsigned __int16 *)(v26 + 2 * v25);
            break;
          }
        }
        v33 = ((unint64_t)v35 - v26) >> 1;
LABEL_66:
        if ((_DWORD)v25 != (unsigned __int16)v33)
        {
          v42 = *((unsigned __int16 *)v11 + 21);
          if (!*((_WORD *)v11 + 21))
            return (uint64_t)&gss::PropertySetValueHelper<gss::PropertyID,float>::value(gss::PropertyID,gss::StylePropertySet<gss::PropertyID> const&)::_defaultValue;
          v30 = v11[4];
          if (*((_BYTE *)v11 + 47))
          {
            if (v42 >= 0x1E)
            {
              v54 = v11[4];
              v55 = *((unsigned __int16 *)v11 + 21);
              do
              {
                v56 = v55 >> 1;
                v57 = &v54[v55 >> 1];
                v59 = *v57;
                v58 = v57 + 1;
                v55 += ~(v55 >> 1);
                if (v59 < a2)
                  v54 = v58;
                else
                  v55 = v56;
              }
              while (v55);
              if (v54 == &v30[v42] || *v54 != a2)
                return (uint64_t)&gss::PropertySetValueHelper<gss::PropertyID,float>::value(gss::PropertyID,gss::StylePropertySet<gss::PropertyID> const&)::_defaultValue;
              v31 = (unint64_t)((char *)v54 - (char *)v30) >> 1;
            }
            else
            {
              v31 = 0;
              result = (uint64_t)&gss::PropertySetValueHelper<gss::PropertyID,float>::value(gss::PropertyID,gss::StylePropertySet<gss::PropertyID> const&)::_defaultValue;
              while (1)
              {
                v43 = v30[v31];
                if (v43 >= a2)
                  break;
                if (v42 == ++v31)
                  return result;
              }
              if (v43 != a2)
                LOWORD(v31) = *((_WORD *)v11 + 21);
            }
          }
          else
          {
            v46 = 2 * v42;
            v47 = v11[4];
            while (*v47 != a2)
            {
              ++v47;
              v46 -= 2;
              if (!v46)
              {
                v47 = &v30[v42];
                break;
              }
            }
            v31 = (unint64_t)((char *)v47 - (char *)v30) >> 1;
          }
          if ((_DWORD)v42 == (unsigned __int16)v31)
            return (uint64_t)&gss::PropertySetValueHelper<gss::PropertyID,float>::value(gss::PropertyID,gss::StylePropertySet<gss::PropertyID> const&)::_defaultValue;
          if (v42 <= (unsigned __int16)v31)
            return result;
          return (uint64_t)&v30[2 * (unsigned __int16)v31] + *((unsigned __int16 *)v11 + 20);
        }
        goto LABEL_67;
      }
      if (v25 < 0x1E)
      {
        v27 = 0;
        while (1)
        {
          v28 = *(unsigned __int16 *)(v26 + 2 * v27);
          if (v28 >= a2)
            break;
          if (v25 == ++v27)
            goto LABEL_67;
        }
        if (v28 == a2)
          LOWORD(v33) = v27;
        else
          LOWORD(v33) = *((_WORD *)v11 + 5);
        goto LABEL_66;
      }
      v36 = *v11;
      v37 = *((unsigned __int16 *)v11 + 5);
      do
      {
        v38 = v37 >> 1;
        v39 = &v36[v37 >> 1];
        v41 = *v39;
        v40 = v39 + 1;
        v37 += ~(v37 >> 1);
        if (v41 < a2)
          v36 = v40;
        else
          v37 = v38;
      }
      while (v37);
      if (v36 != (unsigned __int16 *)(v26 + 2 * v25) && *v36 == a2)
      {
        v33 = ((unint64_t)v36 - v26) >> 1;
        goto LABEL_66;
      }
    }
LABEL_67:
    if (a4)
      *a4 = 0;
    return (uint64_t)gss::defaultValueForKey<gss::PropertyID,float>(a2);
  }
  v7 = *(_QWORD *)(v5 + 48);
  v8 = v7 + 8 * v6;
  while (1)
  {
    v10 = *(unsigned __int16 ****)(*(_QWORD *)v7 + 72);
    if (v10)
    {
      v11 = *v10;
      v12 = *((unsigned __int16 *)v11 + 5);
      if (*((_WORD *)v11 + 5))
      {
        v13 = (uint64_t)*v11;
        if (*((_BYTE *)v11 + 15))
        {
          if (v12 >= 0x1E)
          {
            v18 = *v11;
            v19 = *((unsigned __int16 *)v11 + 5);
            do
            {
              v20 = v19 >> 1;
              v21 = &v18[v19 >> 1];
              v23 = *v21;
              v22 = v21 + 1;
              result = v23;
              v19 += ~(v19 >> 1);
              if (v23 < a2)
                v18 = v22;
              else
                v19 = v20;
            }
            while (v19);
            if (v18 == (unsigned __int16 *)(v13 + 2 * v12) || *v18 != a2)
              goto LABEL_6;
            v9 = ((unint64_t)v18 - v13) >> 1;
          }
          else
          {
            v14 = 0;
            while (1)
            {
              v15 = *(unsigned __int16 *)(v13 + 2 * v14);
              if (v15 >= a2)
                break;
              if (v12 == ++v14)
                goto LABEL_6;
            }
            LOWORD(v9) = v15 == a2 ? v14 : *((_WORD *)v11 + 5);
          }
        }
        else
        {
          v16 = 2 * v12;
          v17 = *v11;
          while (*v17 != a2)
          {
            ++v17;
            v16 -= 2;
            if (!v16)
            {
              v17 = (unsigned __int16 *)(v13 + 2 * v12);
              break;
            }
          }
          v9 = ((unint64_t)v17 - v13) >> 1;
        }
      }
      else
      {
        LOWORD(v9) = 0;
      }
      if ((_DWORD)v12 != (unsigned __int16)v9)
        break;
    }
LABEL_6:
    v7 += 8;
    if (v7 == v8)
      goto LABEL_31;
  }
  v29 = *((unsigned __int16 *)v11 + 21);
  if (!*((_WORD *)v11 + 21))
    return (uint64_t)&gss::PropertySetValueHelper<gss::PropertyID,float>::value(gss::PropertyID,gss::StylePropertySet<gss::PropertyID> const&)::_defaultValue;
  v30 = v11[4];
  if (!*((_BYTE *)v11 + 47))
  {
    v44 = 2 * v29;
    v45 = v11[4];
    while (*v45 != a2)
    {
      ++v45;
      v44 -= 2;
      if (!v44)
      {
        v45 = &v30[v29];
        break;
      }
    }
    v31 = (unint64_t)((char *)v45 - (char *)v30) >> 1;
LABEL_105:
    if (v29 <= (unsigned __int16)v31)
      return (uint64_t)&gss::PropertySetValueHelper<gss::PropertyID,float>::value(gss::PropertyID,gss::StylePropertySet<gss::PropertyID> const&)::_defaultValue;
    return (uint64_t)&v30[2 * (unsigned __int16)v31] + *((unsigned __int16 *)v11 + 20);
  }
  if (v29 < 0x1E)
  {
    v31 = 0;
    result = (uint64_t)&gss::PropertySetValueHelper<gss::PropertyID,float>::value(gss::PropertyID,gss::StylePropertySet<gss::PropertyID> const&)::_defaultValue;
    while (1)
    {
      v32 = v30[v31];
      if (v32 >= a2)
        break;
      if (v29 == ++v31)
        return result;
    }
    if (v32 != a2)
      LOWORD(v31) = *((_WORD *)v11 + 21);
    goto LABEL_105;
  }
  v48 = v11[4];
  v49 = *((unsigned __int16 *)v11 + 21);
  do
  {
    v50 = v49 >> 1;
    v51 = &v48[v49 >> 1];
    v53 = *v51;
    v52 = v51 + 1;
    v49 += ~(v49 >> 1);
    if (v53 < a2)
      v48 = v52;
    else
      v49 = v50;
  }
  while (v49);
  if (v48 != &v30[v29] && *v48 == a2)
  {
    v31 = (unint64_t)((char *)v48 - (char *)v30) >> 1;
    goto LABEL_105;
  }
  return (uint64_t)&gss::PropertySetValueHelper<gss::PropertyID,float>::value(gss::PropertyID,gss::StylePropertySet<gss::PropertyID> const&)::_defaultValue;
}

double __Block_byref_object_copy_(uint64_t a1, uint64_t a2)
{
  double result;

  *(_WORD *)(a1 + 48) = *(_WORD *)(a2 + 48);
  result = *(double *)(a2 + 52);
  *(double *)(a1 + 52) = result;
  return result;
}

void md::RenderLayer::clearCommandBuffers(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned __int8 *v4;
  unsigned __int8 *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unsigned __int8 *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t i;
  _QWORD *v26;
  uint64_t v27;
  unsigned __int8 *v28;
  unsigned __int8 *v29;

  (*(void (**)(unsigned __int8 **__return_ptr, uint64_t, uint64_t))(*(_QWORD *)a1 + 32))(&v28, a1, a3);
  v4 = v28;
  v5 = v29;
  if (v28 == v29)
  {
    if (v28)
      goto LABEL_3;
    return;
  }
  do
  {
    v6 = *(_QWORD **)(a2 + 8);
    v7 = v6[3];
    v8 = v6[4];
    v9 = v8 - v7;
    if (v8 != v7)
    {
      v10 = 0;
      v11 = v9 >> 3;
      while (1)
      {
        v12 = *(unsigned __int8 **)(v7 + 8 * v10);
        if (*v12 == *v4)
        {
          v13 = *((_QWORD *)v12 + 1);
          v14 = v6[15];
          if (v13 < (v6[16] - v14) >> 3)
            break;
        }
        if (++v10 >= v11)
          goto LABEL_6;
      }
      v15 = *(_QWORD *)(v14 + 8 * v13);
      if (v15)
      {
        v16 = *(_QWORD **)(*(_QWORD *)(v15 + 24) + 8 * v4[1]);
        v16[4] = 0;
        v17 = v16[9];
        if (v16[10] != v17)
          v16[10] = v17;
        v16[14] = v16[13];
        v16[6] = v16[5];
        v19 = (_QWORD *)v16[25];
        v18 = (_QWORD *)v16[26];
        if (v18 != v19)
        {
          v20 = v18 - 4;
          while (1)
          {
            v22 = (_QWORD *)v20[3];
            if (v20 == v22)
              break;
            if (v22)
            {
              v23 = 5;
LABEL_22:
              (*(void (**)(void))(*v22 + 8 * v23))();
            }
            if (*((_BYTE *)v20 - 28))
              *((_BYTE *)v20 - 28) = 0;
            if (*((_BYTE *)v20 - 32))
              *((_BYTE *)v20 - 32) = 0;
            v21 = v20 - 6;
            v20 -= 10;
            if (v21 == v19)
              goto LABEL_27;
          }
          v22 = v20;
          v23 = 4;
          goto LABEL_22;
        }
LABEL_27:
        v16[26] = v19;
        v24 = v16[29];
        for (i = v16[30]; ; i -= 64)
        {
          if (i == v24)
          {
            v16[30] = v24;
            goto LABEL_6;
          }
          v26 = *(_QWORD **)(i - 8);
          if ((_QWORD *)(i - 32) == v26)
            break;
          if (v26)
          {
            v27 = 5;
            goto LABEL_29;
          }
LABEL_30:
          ;
        }
        v26 = (_QWORD *)(i - 32);
        v27 = 4;
LABEL_29:
        (*(void (**)(void))(*v26 + 8 * v27))();
        goto LABEL_30;
      }
    }
LABEL_6:
    v4 += 2;
  }
  while (v4 != v5);
  v4 = v28;
  if (!v28)
    return;
LABEL_3:
  v29 = v4;
  operator delete(v4);
}

void ggl::MetalDeviceContext::processBuffer(ggl::MetalDeviceContext *this, ggl::CommandBuffer *a2)
{
  id v2;
  uint64_t v3;
  os_signpost_id_t v6;
  NSObject *v7;
  NSObject *v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  NSObject *v12;
  uint64_t v13;
  NSObject *v14;
  NSObject *v15;
  uint64_t v16;
  ggl::CommandBuffer *v17;
  uint64_t *v18;
  uint64_t *v19;
  NSObject *v20;
  uint64_t v21;
  _QWORD *v22;
  NSObject *v23;
  _QWORD *v24;
  int v25;
  uint64_t v26;
  NSObject *v27;
  _QWORD *v28;
  ggl::MetalDeviceContext *v29;
  NSObject *v30;
  _QWORD *v31;
  _QWORD *v32;
  std::mutex **v33;
  std::mutex **v34;
  ggl::Device *v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  std::mutex *v39;
  std::mutex *v40;
  id v41;
  int64x2_t v42;
  int64x2_t v43;
  uint64_t v44;
  unint64_t v45;
  __int128 v46;
  _OWORD *v47;
  _QWORD **v48;
  _QWORD **v49;
  __int128 *v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  _BYTE *v55;
  __int128 *v56;
  __n128 v57;
  uint64_t v58;
  __int128 *v59;
  uint64_t v60;
  BOOL v61;
  unint64_t v66;
  _OWORD *v67;
  _QWORD *v68;
  int v69;
  uint64_t v70;
  NSObject *v71;
  _QWORD *v72;
  NSObject *v73;
  _QWORD *v74;
  _QWORD *v75;
  std::mutex **v76;
  std::mutex **v77;
  ggl::Device *v78;
  uint64_t v79;
  _QWORD *v80;
  uint64_t v81;
  std::mutex *v82;
  std::mutex *v83;
  id v84;
  int64x2_t v85;
  int64x2_t v86;
  uint64_t v87;
  unint64_t v88;
  __int128 v89;
  _OWORD *v90;
  _QWORD **v91;
  _QWORD **v92;
  __int128 *v93;
  uint64_t v94;
  uint64_t v95;
  int v96;
  uint64_t v97;
  _BYTE *v98;
  __int128 *v99;
  __n128 v100;
  uint64_t v101;
  __int128 *v102;
  uint64_t v103;
  BOOL v104;
  unint64_t v109;
  _OWORD *v110;
  _QWORD *v111;
  int v112;
  uint64_t v113;
  ggl::MetalDeviceContext *v114;
  unint64_t v115;
  NSObject *v116;
  NSObject *v117;
  uint64_t v118;
  _QWORD *v119;
  uint64_t v120;
  uint64_t v121;
  __int128 *v122;
  __int128 *v123;
  __n128 v124;
  uint64_t v125;
  __int128 *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t i;
  uint64_t v131;
  uint64_t v132;
  uint64_t j;
  NSObject *v134;
  NSObject *v135;
  uint64_t v136;
  uint64_t v137;
  unint64_t *v138;
  unint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  NSObject *v144;
  NSObject *v145;
  uint64_t v146;
  const ggl::Buffer *v147;
  _QWORD *v148;
  void *v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  const ggl::Buffer *v154;
  _QWORD *v155;
  void *v156;
  uint64_t v157;
  NSObject *v158;
  NSObject *v159;
  uint64_t v160;
  uint64_t v161;
  ggl::MetalDeviceContext *v162;
  unint64_t *v163;
  unint64_t v164;
  uint64_t v165;
  uint64_t k;
  _QWORD *v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t m;
  _QWORD *v172;
  uint64_t v173;
  ggl::CommandBuffer *v174;
  _QWORD *v175;
  _QWORD *v176;
  _QWORD *v177;
  _QWORD *v178;
  _QWORD *v179;
  uint64_t v180;
  uint64_t v181;
  _QWORD *v182;
  _QWORD *v183;
  _QWORD *v184;
  _QWORD *v185;
  _QWORD *v186;
  uint64_t v187;
  _BOOL4 v188;
  uint64_t v189;
  uint64_t v190;
  BOOL v191;
  NSObject *v193;
  NSObject *v194;
  os_signpost_id_t v195;
  uint64_t v196;
  uint64_t v197;
  unint64_t v198;
  ggl::CommandBuffer *v199;
  unsigned __int8 *v200;
  unsigned __int8 *v201;
  ggl::MetalResourceManager *v202;
  ggl::MetalResourceManager *v203;
  ggl::MetalResourceManager *v204;
  int v205;
  uint64_t v206;
  _QWORD *v207;
  const ggl::Texture *v208;
  ggl::MetalTextureResource *v209;
  uint64_t v210;
  int v211;
  const ggl::Buffer *v212;
  const ggl::Buffer *v213;
  unint64_t *v214;
  const ggl::Buffer *v215;
  _QWORD *v216;
  const ggl::Buffer *v217;
  void *v218;
  _QWORD *v219;
  _QWORD *v220;
  void *v221;
  void *v222;
  id v223;
  unint64_t *v224;
  unint64_t v225;
  unint64_t v226;
  char v227;
  const ggl::Texture *v228;
  ggl::MetalTextureResource *v229;
  id *v230;
  id *v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  NSObject *v252;
  NSObject *v253;
  os_signpost_id_t v254;
  uint64_t v255;
  uint64_t (***v256)();
  uint64_t v257;
  uint64_t (***v258)();
  uint64_t v259;
  _QWORD *v260;
  uint64_t v261;
  ggl::CommandBuffer *v262;
  uint64_t v263;
  uint64_t v264;
  void *v265;
  void *v266;
  void *v267;
  uint64_t v268;
  uint64_t v269;
  void *v270;
  id v271;
  ggl::Device *v272;
  unint64_t v273;
  id v274;
  _QWORD *v275;
  uint64_t v276;
  uint64_t v277;
  const ggl::ShaderFunction *v278;
  uint64_t v279;
  id v280;
  id v281;
  void *v282;
  id v283;
  void *v284;
  unsigned __int8 v285;
  std::__shared_weak_count *v286;
  uint64_t v287;
  std::__shared_weak_count *v288;
  std::__shared_weak_count *v289;
  unint64_t *p_shared_owners;
  unint64_t v291;
  unsigned __int8 v292;
  uint64_t v293;
  std::mutex **v294;
  std::mutex **v295;
  _QWORD *v296;
  uint64_t v297;
  std::mutex *v298;
  ggl::MetalResourceManager *v299;
  int64x2_t v300;
  int64x2_t v301;
  const ggl::Buffer *v302;
  std::mutex *v303;
  _QWORD *v304;
  void *v305;
  uint64_t v306;
  unint64_t *v307;
  unint64_t v308;
  unint64_t v309;
  std::mutex **v310;
  std::mutex **v311;
  _QWORD *v312;
  uint64_t v313;
  std::mutex *v314;
  ggl::MetalResourceManager *v315;
  int64x2_t v316;
  int64x2_t v317;
  const ggl::Buffer *v318;
  std::mutex *v319;
  _QWORD *v320;
  void *v321;
  uint64_t v322;
  unint64_t *v323;
  unint64_t v324;
  unint64_t v325;
  _QWORD *v326;
  uint64_t v327;
  uint64_t v328;
  unint64_t v329;
  unint64_t v330;
  unsigned __int8 *v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t v334;
  void *v335;
  id v336;
  ggl::MetalResourceManager *v337;
  unint64_t *v338;
  uint64_t v339;
  unint64_t v340;
  unsigned __int8 *v341;
  uint64_t v342;
  uint64_t v343;
  uint64_t v344;
  void *v345;
  id v346;
  ggl::MetalResourceManager *v347;
  uint64_t v348;
  unsigned __int8 *v349;
  uint64_t v350;
  uint64_t v351;
  uint64_t v352;
  const ggl::Texture *v353;
  ggl::MetalTextureResource *v354;
  unint64_t *v355;
  unint64_t v356;
  uint64_t SamplerStateResource;
  id *v358;
  unint64_t v359;
  unint64_t *v360;
  unint64_t v361;
  id v362;
  unint64_t v363;
  uint64_t v364;
  uint64_t v365;
  uint64_t v366;
  uint64_t v367;
  uint64_t v368;
  uint64_t v369;
  uint64_t v370;
  uint64_t v371;
  void *v372;
  void *v373;
  void *v374;
  void **v375;
  void *v376;
  void *v377;
  uint64_t *v378;
  uint64_t *v379;
  std::__shared_weak_count **v380;
  uint64_t v381;
  uint64_t v382;
  uint64_t v383;
  uint64_t v384;
  uint64_t v385;
  uint64_t v386;
  uint64_t v387;
  uint64_t v388;
  uint64_t v389;
  uint64_t v390;
  uint64_t v391;
  uint64_t v392;
  int v393;
  unint64_t v394;
  ggl::MetalTextureResource *v395;
  uint64_t v396;
  uint64_t v397;
  id v398;
  NSObject *v399;
  uint64_t v400;
  uint64_t v401;
  uint64_t v402;
  uint64_t v403;
  uint64_t v404;
  _QWORD *v405;
  id v406;
  ggl::Device *v407;
  uint64_t v408;
  _QWORD *v409;
  uint64_t v410;
  uint64_t v411;
  uint64_t v412;
  const ggl::Texture *v413;
  uint64_t v414;
  uint64_t v415;
  ggl::MetalDeviceContext *v416;
  BOOL v417;
  ggl::MetalResourceManager *v418;
  ggl::MetalResourceManager *v419;
  id v420;
  id v421;
  uint64_t v422;
  uint64_t v423;
  std::__shared_weak_count **v424;
  _QWORD *v425;
  ggl::MetalResourceManager *v426;
  ggl::MetalResourceManager *v427;
  ggl::MetalResourceManager *v428;
  os_signpost_id_t v429;
  ggl::CommandBuffer *v430;
  _QWORD v431[3];
  _QWORD v432[3];
  _QWORD v433[3];
  uint64_t v434;
  uint64_t v435;
  uint64_t v436;
  uint64_t v437;
  uint64_t v438;
  uint64_t v439;
  uint64_t (**v440)();
  __int128 v441;
  uint64_t (***v442)();
  uint64_t (**v443)();
  os_signpost_id_t *v444;
  ggl::CommandBuffer **v445;
  uint64_t (***v446)();
  __int128 v447;
  uint64_t v448;
  __int128 *v449;
  _QWORD buf[6];
  __int128 v451;
  __int128 v452;
  __int128 v453;
  __int128 v454;
  __int128 v455;
  uint64_t v456;

  v456 = *MEMORY[0x1E0C80C00];
  v430 = a2;
  v3 = *((_QWORD *)this + 5);
  if (!v3 || !*((_QWORD *)this + 6))
    return;
  v6 = *((unsigned __int8 *)a2 + 16) | (*(_QWORD *)(v3 + 40) << 8);
  v429 = v6;
  if (GEOGetGeoGLPerformanceDetailLog_onceToken != -1)
    dispatch_once(&GEOGetGeoGLPerformanceDetailLog_onceToken, &__block_literal_global_7_40484);
  v7 = (id)GEOGetGeoGLPerformanceDetailLog_log;
  v8 = v7;
  if (v6 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v7))
  {
    v9 = *((_QWORD *)a2 + 1);
    v10 = *((_QWORD *)this + 7);
    LODWORD(buf[0]) = 136315394;
    *(_QWORD *)((char *)buf + 4) = v9;
    WORD2(buf[1]) = 2048;
    *(_QWORD *)((char *)&buf[1] + 6) = v10;
    _os_signpost_emit_with_name_impl(&dword_19F029000, v8, OS_SIGNPOST_INTERVAL_BEGIN, v6, "ProcessCommandBuffer", "category=%s parent_signpost=%llu", (uint8_t *)buf, 0x16u);
  }
  v416 = this;

  if (GEOGetGeoGLPerformanceDetailLog_onceToken != -1)
    dispatch_once(&GEOGetGeoGLPerformanceDetailLog_onceToken, &__block_literal_global_7_40484);
  v11 = (id)GEOGetGeoGLPerformanceDetailLog_log;
  v12 = v11;
  if (v429 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v11))
  {
    v13 = *((_QWORD *)v430 + 1);
    LODWORD(buf[0]) = 136315138;
    *(_QWORD *)((char *)buf + 4) = v13;
    _os_signpost_emit_with_name_impl(&dword_19F029000, v12, OS_SIGNPOST_INTERVAL_BEGIN, v429, "CommandBufferLock", "category=%s", (uint8_t *)buf, 0xCu);
  }

  if (GEOGetGeoGLPerformanceDetailLog_onceToken != -1)
    dispatch_once(&GEOGetGeoGLPerformanceDetailLog_onceToken, &__block_literal_global_7_40484);
  v14 = (id)GEOGetGeoGLPerformanceDetailLog_log;
  v15 = v14;
  if (v429 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v14))
  {
    v16 = *((_QWORD *)v430 + 1);
    LODWORD(buf[0]) = 136315138;
    *(_QWORD *)((char *)buf + 4) = v16;
    _os_signpost_emit_with_name_impl(&dword_19F029000, v15, OS_SIGNPOST_INTERVAL_END, v429, "CommandBufferLock", "category=%s", (uint8_t *)buf, 0xCu);
  }

  v426 = *(ggl::MetalResourceManager **)(*((_QWORD *)this + 2) + 80);
  v17 = v430;
  v18 = (uint64_t *)*((_QWORD *)v430 + 9);
  v19 = (uint64_t *)*((_QWORD *)v430 + 10);
  if (v18 != v19)
  {
    v20 = MEMORY[0x1E0C81028];
    do
    {
      v22 = (_QWORD *)*v18;
      if (*(_QWORD *)(*v18 + 16) == 3131955885)
      {
        v23 = v20;
        if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
        {
          v24 = (_QWORD *)*v18;
          v25 = *((unsigned __int8 *)v430 + 16);
          LODWORD(buf[0]) = 134218240;
          *(_QWORD *)((char *)buf + 4) = v24;
          WORD2(buf[1]) = 1024;
          *(_DWORD *)((char *)&buf[1] + 6) = v25;
          _os_log_error_impl(&dword_19F029000, v20, OS_LOG_TYPE_ERROR, "Detected stale render item %p in command buffer %d.  Please file a radar!", (uint8_t *)buf, 0x12u);
        }

        v22 = (_QWORD *)*v18;
      }
      ggl::RenderItem::gatherBufferLoadItems(v22, (uint64_t *)(*((_QWORD *)this + 5) + 56), *((ggl::Device **)this + 2), *(_QWORD *)(*((_QWORD *)this + 5) + 24), *(_QWORD *)(*((_QWORD *)this + 5) + 32));
      v21 = *v18++;
      ggl::RenderItem::gatherTextureLoadItems(v21, *((_QWORD *)this + 5) + 88, *((unsigned __int8 *)v430 + 16));
    }
    while (v18 != v19);
    v17 = v430;
  }
  v26 = *((_QWORD *)v17 + 13);
  v422 = *((_QWORD *)v17 + 14);
  if (v26 != v422)
  {
    v27 = MEMORY[0x1E0C81028];
    while (1)
    {
      v28 = *(_QWORD **)v26;
      v29 = v416;
      if (**(_QWORD **)v26 == 3131955885)
      {
        v30 = v27;
        if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
        {
          v68 = *(_QWORD **)v26;
          v69 = *((unsigned __int8 *)v430 + 16);
          LODWORD(buf[0]) = 134218240;
          *(_QWORD *)((char *)buf + 4) = v68;
          WORD2(buf[1]) = 1024;
          *(_DWORD *)((char *)&buf[1] + 6) = v69;
          _os_log_error_impl(&dword_19F029000, v27, OS_LOG_TYPE_ERROR, "Detected stale compute item %p in command buffer %d.  Please file a radar!", (uint8_t *)buf, 0x12u);
        }

        v28 = *(_QWORD **)v26;
        v29 = v416;
      }
      v31 = (_QWORD *)*((_QWORD *)v29 + 5);
      v32 = (_QWORD *)v28[1];
      v33 = (std::mutex **)v32[5];
      v34 = (std::mutex **)v32[6];
      if (v33 == v34)
        break;
      v35 = (ggl::Device *)*((_QWORD *)v29 + 2);
      v36 = v31[3];
      v2 = (id)v31[4];
      do
      {
        v39 = *v33;
        if ((*v33)->__m_.__opaque[10] == 1 && v39[3].__m_.__sig != v36 && *(_DWORD *)&v39[1].__m_.__opaque[40])
        {
          v39[3].__m_.__sig = v36;
          *(_OWORD *)&v39->__m_.__opaque[48] = *(_OWORD *)&v39->__m_.__opaque[32];
        }
        if (v39[1].__m_.__sig == *(_QWORD *)&v39->__m_.__opaque[48])
          goto LABEL_37;
        v40 = *v33;
        if (!*(_QWORD *)&(*v33)->__m_.__opaque[16])
          ggl::BufferData::prepareBufferForDevice(*v33, v35, 0);
        if (v40->__m_.__opaque[10] == 1 && v40[3].__m_.__sig != v36 && *(_DWORD *)&v40[1].__m_.__opaque[40])
        {
          v40[3].__m_.__sig = v36;
          *(_OWORD *)&v40->__m_.__opaque[48] = *(_OWORD *)&v40->__m_.__opaque[32];
        }
        if (*(_DWORD *)&v40[1].__m_.__opaque[40] <= 1u)
          v41 = 0;
        else
          v41 = v2;
        v42 = *(int64x2_t *)&v40->__m_.__opaque[48];
        v43 = vaddq_s64(vdupq_n_s64((_QWORD)v41 * *(_QWORD *)&v40[1].__m_.__opaque[48]), v42);
        *(_QWORD *)&v40->__m_.__opaque[48] = 0;
        v40[1].__m_.__sig = 0;
        v44 = *(_QWORD *)&v40->__m_.__opaque[16];
        buf[0] = *(_QWORD *)v40[1].__m_.__opaque + v42.i64[0];
        buf[1] = v44;
        *(int64x2_t *)&buf[2] = v43;
        *((_QWORD *)&v451 + 1) = 0;
        v45 = v31[8];
        if (v45 >= v31[9])
        {
          v47 = std::vector<ggl::BufferLoadItem,geo::StdAllocator<ggl::BufferLoadItem,ggl::Allocator>>::__emplace_back_slow_path<ggl::BufferLoadItem&>(v31 + 7, (uint64_t)buf);
        }
        else
        {
          if (v45)
          {
            v46 = *(_OWORD *)&buf[2];
            *(_OWORD *)v45 = *(_OWORD *)buf;
            *(_OWORD *)(v45 + 16) = v46;
            if (!*((_QWORD *)&v451 + 1))
            {
              *(_QWORD *)(v45 + 56) = 0;
              v47 = (_OWORD *)(v45 + 64);
              goto LABEL_59;
            }
            if (*((_QWORD **)&v451 + 1) == &buf[4])
            {
              *(_QWORD *)(v45 + 56) = v45 + 32;
              (*(void (**)(_QWORD))(**((_QWORD **)&v451 + 1) + 24))(*((_QWORD *)&v451 + 1));
              v47 = (_OWORD *)(v45 + 64);
              goto LABEL_59;
            }
            *(_QWORD *)(v45 + 56) = (*(uint64_t (**)(void))(**((_QWORD **)&v451 + 1) + 16))();
          }
          v47 = (_OWORD *)(v45 + 64);
        }
LABEL_59:
        v31[8] = v47;
        v37 = (_QWORD *)*((_QWORD *)&v451 + 1);
        if (*((_QWORD **)&v451 + 1) == &buf[4])
        {
          v37 = &buf[4];
          v38 = 4;
LABEL_36:
          (*(void (**)(void))(*v37 + 8 * v38))();
          goto LABEL_37;
        }
        if (*((_QWORD *)&v451 + 1))
        {
          v38 = 5;
          goto LABEL_36;
        }
LABEL_37:
        v33 += 2;
      }
      while (v33 != v34);
      v32 = *(_QWORD **)(*(_QWORD *)v26 + 8);
      if (v32)
      {
        v31 = (_QWORD *)*((_QWORD *)v416 + 5);
        break;
      }
LABEL_28:
      v26 += 8;
      v27 = MEMORY[0x1E0C81028];
      if (v26 == v422)
      {
        v17 = v430;
        goto LABEL_117;
      }
    }
    v49 = (_QWORD **)v32[9];
    v48 = (_QWORD **)v32[10];
    while (1)
    {
      if (v49 == v48)
        goto LABEL_28;
      v52 = (uint64_t)*v49;
      if (*v49)
      {
        v53 = *(_DWORD *)(v52 + 56);
        if (v53 == 3)
        {
          if (*(_QWORD *)(v52 + 96))
            v61 = *(_QWORD *)(v52 + 112) == 0;
          else
            v61 = 1;
          if (!v61
            && *(_QWORD *)(v52 + 128) != 0
            && *(_QWORD *)(v52 + 144) != 0
            && *(_QWORD *)(v52 + 160) != 0
            && *(_QWORD *)(v52 + 176) != 0)
          {
            v55 = (_BYTE *)(v52 + 193);
            if (!*(_BYTE *)(v52 + 193))
            {
              ggl::TextureCube::vendImplicitLoadItems(*v49, v31 + 11);
              goto LABEL_69;
            }
          }
        }
        else if (v53 == 1)
        {
          v54 = *(_QWORD *)(v52 + 112);
          if (v54)
          {
            v55 = (_BYTE *)(v52 + 129);
            if (!*(_BYTE *)(v52 + 129))
            {
              v2 = *(id *)(v52 + 80);
              v56 = (__int128 *)operator new(0x20uLL);
              *(_QWORD *)v56 = &off_1E42C6DE0;
              *((_QWORD *)v56 + 1) = ggl::Texture2D::onImplicitLoadComplete;
              *((_QWORD *)v56 + 2) = 0;
              *((_QWORD *)v56 + 3) = v52;
              v449 = v56;
              buf[0] = v54;
              buf[1] = v52;
              LOBYTE(buf[2]) = 0;
              BYTE4(buf[2]) = 0;
              *(_QWORD *)((char *)&buf[3] + 4) = 0;
              *(_QWORD *)((char *)&buf[4] + 4) = v2;
              v57 = std::__function::__func<std::__bind<void (ggl::Texture2D::*)(ggl::Texture2DLoadItem const&),ggl::Texture2D*,std::placeholders::__ph<1> const&>,std::allocator<std::__bind<void (ggl::Texture2D::*)(ggl::Texture2DLoadItem const&),ggl::Texture2D*,std::placeholders::__ph<1> const&>>,void ()(ggl::Texture2DLoadItem const&)>::__clone((uint64_t)v56);
              *((_QWORD *)&v452 + 1) = v58;
              v59 = v449;
              if (v449 == &v447)
              {
                v59 = &v447;
                v60 = 4;
LABEL_99:
                (*(void (**)(__n128))(*(_QWORD *)v59 + 8 * v60))(v57);
              }
              else if (v449)
              {
                v60 = 5;
                goto LABEL_99;
              }
              v66 = v31[12];
              if (v66 >= v31[13])
              {
                v67 = std::vector<ggl::Texture2DLoadItem,geo::StdAllocator<ggl::Texture2DLoadItem,ggl::Allocator>>::__emplace_back_slow_path<ggl::Texture2DLoadItem>(v31 + 11, (uint64_t)buf);
              }
              else
              {
                if (!v66)
                  goto LABEL_109;
                *(_OWORD *)v66 = *(_OWORD *)buf;
                *(_BYTE *)(v66 + 16) = 0;
                if (LOBYTE(buf[2]))
                {
                  *(_BYTE *)(v66 + 17) = BYTE1(buf[2]);
                  *(_BYTE *)(v66 + 16) = 1;
                }
                *(_BYTE *)(v66 + 20) = 0;
                if (BYTE4(buf[2]))
                {
                  *(_DWORD *)(v66 + 24) = buf[3];
                  *(_BYTE *)(v66 + 20) = 1;
                }
                *(_OWORD *)(v66 + 28) = *(_OWORD *)((char *)&buf[3] + 4);
                if (*((_QWORD *)&v452 + 1))
                {
                  if (*((__int128 **)&v452 + 1) == &v451)
                  {
                    *(_QWORD *)(v66 + 72) = v66 + 48;
                    (*(void (**)(_QWORD))(**((_QWORD **)&v452 + 1) + 24))(*((_QWORD *)&v452 + 1));
                    v67 = (_OWORD *)(v66 + 80);
                  }
                  else
                  {
                    *(_QWORD *)(v66 + 72) = *((_QWORD *)&v452 + 1);
                    *((_QWORD *)&v452 + 1) = 0;
LABEL_109:
                    v67 = (_OWORD *)(v66 + 80);
                  }
                }
                else
                {
                  *(_QWORD *)(v66 + 72) = 0;
                  v67 = (_OWORD *)(v66 + 80);
                }
              }
              v31[12] = v67;
              v50 = (__int128 *)*((_QWORD *)&v452 + 1);
              if (*((__int128 **)&v452 + 1) == &v451)
              {
                v50 = &v451;
                v51 = 4;
              }
              else
              {
                if (!*((_QWORD *)&v452 + 1))
                  goto LABEL_69;
                v51 = 5;
              }
              (*(void (**)(void))(*(_QWORD *)v50 + 8 * v51))();
LABEL_69:
              *v55 = 1;
            }
          }
        }
      }
      ++v49;
    }
  }
LABEL_117:
  v70 = *((_QWORD *)v17 + 17);
  v423 = *((_QWORD *)v17 + 18);
  if (v70 != v423)
  {
    v71 = MEMORY[0x1E0C81028];
    while (1)
    {
      v72 = *(_QWORD **)v70;
      if (**(_QWORD **)v70 == 3131955885)
      {
        v73 = v71;
        if (os_log_type_enabled(v71, OS_LOG_TYPE_ERROR))
        {
          v111 = *(_QWORD **)v70;
          v112 = *((unsigned __int8 *)v430 + 16);
          LODWORD(buf[0]) = 134218240;
          *(_QWORD *)((char *)buf + 4) = v111;
          WORD2(buf[1]) = 1024;
          *(_DWORD *)((char *)&buf[1] + 6) = v112;
          _os_log_error_impl(&dword_19F029000, v71, OS_LOG_TYPE_ERROR, "Detected stale tile item %p in command buffer %d.  Please file a radar!", (uint8_t *)buf, 0x12u);
        }

        v72 = *(_QWORD **)v70;
      }
      v74 = (_QWORD *)*((_QWORD *)v416 + 5);
      v75 = (_QWORD *)v72[1];
      v76 = (std::mutex **)v75[5];
      v77 = (std::mutex **)v75[6];
      if (v76 == v77)
        break;
      v78 = (ggl::Device *)*((_QWORD *)v416 + 2);
      v79 = v74[3];
      v2 = (id)v74[4];
      do
      {
        v82 = *v76;
        if (!*v76)
          goto LABEL_128;
        if (v82->__m_.__opaque[10] == 1 && v82[3].__m_.__sig != v79 && *(_DWORD *)&v82[1].__m_.__opaque[40])
        {
          v82[3].__m_.__sig = v79;
          *(_OWORD *)&v82->__m_.__opaque[48] = *(_OWORD *)&v82->__m_.__opaque[32];
        }
        if (v82[1].__m_.__sig == *(_QWORD *)&v82->__m_.__opaque[48])
          goto LABEL_128;
        v83 = *v76;
        if (!*(_QWORD *)&(*v76)->__m_.__opaque[16])
          ggl::BufferData::prepareBufferForDevice(*v76, v78, 0);
        if (v83->__m_.__opaque[10] == 1 && v83[3].__m_.__sig != v79 && *(_DWORD *)&v83[1].__m_.__opaque[40])
        {
          v83[3].__m_.__sig = v79;
          *(_OWORD *)&v83->__m_.__opaque[48] = *(_OWORD *)&v83->__m_.__opaque[32];
        }
        if (*(_DWORD *)&v83[1].__m_.__opaque[40] <= 1u)
          v84 = 0;
        else
          v84 = v2;
        v85 = *(int64x2_t *)&v83->__m_.__opaque[48];
        v86 = vaddq_s64(vdupq_n_s64((_QWORD)v84 * *(_QWORD *)&v83[1].__m_.__opaque[48]), v85);
        *(_QWORD *)&v83->__m_.__opaque[48] = 0;
        v83[1].__m_.__sig = 0;
        v87 = *(_QWORD *)&v83->__m_.__opaque[16];
        buf[0] = *(_QWORD *)v83[1].__m_.__opaque + v85.i64[0];
        buf[1] = v87;
        *(int64x2_t *)&buf[2] = v86;
        *((_QWORD *)&v451 + 1) = 0;
        v88 = v74[8];
        if (v88 >= v74[9])
        {
          v90 = std::vector<ggl::BufferLoadItem,geo::StdAllocator<ggl::BufferLoadItem,ggl::Allocator>>::__emplace_back_slow_path<ggl::BufferLoadItem&>(v74 + 7, (uint64_t)buf);
        }
        else
        {
          if (v88)
          {
            v89 = *(_OWORD *)&buf[2];
            *(_OWORD *)v88 = *(_OWORD *)buf;
            *(_OWORD *)(v88 + 16) = v89;
            if (!*((_QWORD *)&v451 + 1))
            {
              *(_QWORD *)(v88 + 56) = 0;
              v90 = (_OWORD *)(v88 + 64);
              goto LABEL_151;
            }
            if (*((_QWORD **)&v451 + 1) == &buf[4])
            {
              *(_QWORD *)(v88 + 56) = v88 + 32;
              (*(void (**)(_QWORD))(**((_QWORD **)&v451 + 1) + 24))(*((_QWORD *)&v451 + 1));
              v90 = (_OWORD *)(v88 + 64);
              goto LABEL_151;
            }
            *(_QWORD *)(v88 + 56) = (*(uint64_t (**)(void))(**((_QWORD **)&v451 + 1) + 16))();
          }
          v90 = (_OWORD *)(v88 + 64);
        }
LABEL_151:
        v74[8] = v90;
        v80 = (_QWORD *)*((_QWORD *)&v451 + 1);
        if (*((_QWORD **)&v451 + 1) == &buf[4])
        {
          v80 = &buf[4];
          v81 = 4;
LABEL_127:
          (*(void (**)(void))(*v80 + 8 * v81))();
          goto LABEL_128;
        }
        if (*((_QWORD *)&v451 + 1))
        {
          v81 = 5;
          goto LABEL_127;
        }
LABEL_128:
        v76 += 2;
      }
      while (v76 != v77);
      v75 = *(_QWORD **)(*(_QWORD *)v70 + 8);
      if (v75)
      {
        v74 = (_QWORD *)*((_QWORD *)v416 + 5);
        break;
      }
LABEL_119:
      v70 += 8;
      v71 = MEMORY[0x1E0C81028];
      if (v70 == v423)
        goto LABEL_208;
    }
    v92 = (_QWORD **)v75[9];
    v91 = (_QWORD **)v75[10];
    while (1)
    {
      if (v92 == v91)
        goto LABEL_119;
      v95 = (uint64_t)*v92;
      if (*v92)
      {
        v96 = *(_DWORD *)(v95 + 56);
        if (v96 == 3)
        {
          if (*(_QWORD *)(v95 + 96))
            v104 = *(_QWORD *)(v95 + 112) == 0;
          else
            v104 = 1;
          if (!v104
            && *(_QWORD *)(v95 + 128) != 0
            && *(_QWORD *)(v95 + 144) != 0
            && *(_QWORD *)(v95 + 160) != 0
            && *(_QWORD *)(v95 + 176) != 0)
          {
            v98 = (_BYTE *)(v95 + 193);
            if (!*(_BYTE *)(v95 + 193))
            {
              ggl::TextureCube::vendImplicitLoadItems(*v92, v74 + 11);
              goto LABEL_161;
            }
          }
        }
        else if (v96 == 1)
        {
          v97 = *(_QWORD *)(v95 + 112);
          if (v97)
          {
            v98 = (_BYTE *)(v95 + 129);
            if (!*(_BYTE *)(v95 + 129))
            {
              v2 = *(id *)(v95 + 80);
              v99 = (__int128 *)operator new(0x20uLL);
              *(_QWORD *)v99 = &off_1E42C6DE0;
              *((_QWORD *)v99 + 1) = ggl::Texture2D::onImplicitLoadComplete;
              *((_QWORD *)v99 + 2) = 0;
              *((_QWORD *)v99 + 3) = v95;
              v449 = v99;
              buf[0] = v97;
              buf[1] = v95;
              LOBYTE(buf[2]) = 0;
              BYTE4(buf[2]) = 0;
              *(_QWORD *)((char *)&buf[3] + 4) = 0;
              *(_QWORD *)((char *)&buf[4] + 4) = v2;
              v100 = std::__function::__func<std::__bind<void (ggl::Texture2D::*)(ggl::Texture2DLoadItem const&),ggl::Texture2D*,std::placeholders::__ph<1> const&>,std::allocator<std::__bind<void (ggl::Texture2D::*)(ggl::Texture2DLoadItem const&),ggl::Texture2D*,std::placeholders::__ph<1> const&>>,void ()(ggl::Texture2DLoadItem const&)>::__clone((uint64_t)v99);
              *((_QWORD *)&v452 + 1) = v101;
              v102 = v449;
              if (v449 == &v447)
              {
                v102 = &v447;
                v103 = 4;
LABEL_191:
                (*(void (**)(__n128))(*(_QWORD *)v102 + 8 * v103))(v100);
              }
              else if (v449)
              {
                v103 = 5;
                goto LABEL_191;
              }
              v109 = v74[12];
              if (v109 >= v74[13])
              {
                v110 = std::vector<ggl::Texture2DLoadItem,geo::StdAllocator<ggl::Texture2DLoadItem,ggl::Allocator>>::__emplace_back_slow_path<ggl::Texture2DLoadItem>(v74 + 11, (uint64_t)buf);
              }
              else
              {
                if (!v109)
                  goto LABEL_201;
                *(_OWORD *)v109 = *(_OWORD *)buf;
                *(_BYTE *)(v109 + 16) = 0;
                if (LOBYTE(buf[2]))
                {
                  *(_BYTE *)(v109 + 17) = BYTE1(buf[2]);
                  *(_BYTE *)(v109 + 16) = 1;
                }
                *(_BYTE *)(v109 + 20) = 0;
                if (BYTE4(buf[2]))
                {
                  *(_DWORD *)(v109 + 24) = buf[3];
                  *(_BYTE *)(v109 + 20) = 1;
                }
                *(_OWORD *)(v109 + 28) = *(_OWORD *)((char *)&buf[3] + 4);
                if (*((_QWORD *)&v452 + 1))
                {
                  if (*((__int128 **)&v452 + 1) == &v451)
                  {
                    *(_QWORD *)(v109 + 72) = v109 + 48;
                    (*(void (**)(_QWORD))(**((_QWORD **)&v452 + 1) + 24))(*((_QWORD *)&v452 + 1));
                    v110 = (_OWORD *)(v109 + 80);
                  }
                  else
                  {
                    *(_QWORD *)(v109 + 72) = *((_QWORD *)&v452 + 1);
                    *((_QWORD *)&v452 + 1) = 0;
LABEL_201:
                    v110 = (_OWORD *)(v109 + 80);
                  }
                }
                else
                {
                  *(_QWORD *)(v109 + 72) = 0;
                  v110 = (_OWORD *)(v109 + 80);
                }
              }
              v74[12] = v110;
              v93 = (__int128 *)*((_QWORD *)&v452 + 1);
              if (*((__int128 **)&v452 + 1) == &v451)
              {
                v93 = &v451;
                v94 = 4;
              }
              else
              {
                if (!*((_QWORD *)&v452 + 1))
                  goto LABEL_161;
                v94 = 5;
              }
              (*(void (**)(void))(*(_QWORD *)v93 + 8 * v94))();
LABEL_161:
              *v98 = 1;
            }
          }
        }
      }
      ++v92;
    }
  }
LABEL_208:
  v113 = mach_absolute_time();
  v114 = v416;
  v115 = 0xCCCCCCCCCCCCCCCDLL
       * ((uint64_t)(*(_QWORD *)(*((_QWORD *)v416 + 5) + 96) - *(_QWORD *)(*((_QWORD *)v416 + 5) + 88)) >> 4)
       - 0x3333333333333333 * ((uint64_t)(*((_QWORD *)v430 + 26) - *((_QWORD *)v430 + 25)) >> 4);
  if (v115)
  {
    if (GEOGetGeoGLPerformanceDetailLog_onceToken != -1)
      dispatch_once(&GEOGetGeoGLPerformanceDetailLog_onceToken, &__block_literal_global_7_40484);
    v116 = (id)GEOGetGeoGLPerformanceDetailLog_log;
    v117 = v116;
    if (v429 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v116))
    {
      v118 = *((_QWORD *)v430 + 1);
      LODWORD(buf[0]) = 136315138;
      *(_QWORD *)((char *)buf + 4) = v118;
      _os_signpost_emit_with_name_impl(&dword_19F029000, v117, OS_SIGNPOST_INTERVAL_BEGIN, v429, "UploadTextures", "category=%s", (uint8_t *)buf, 0xCu);
    }

    v114 = v416;
  }
  v119 = (_QWORD *)*((_QWORD *)v114 + 9);
  if (v119[3])
    goto LABEL_226;
  v120 = v119[14];
  v121 = v119[10];
  v122 = (__int128 *)operator new(0x20uLL);
  *(_QWORD *)v122 = &off_1E42C6DE0;
  *((_QWORD *)v122 + 1) = ggl::Texture2D::onImplicitLoadComplete;
  *((_QWORD *)v122 + 2) = 0;
  *((_QWORD *)v122 + 3) = v119;
  v449 = v122;
  buf[0] = v120;
  buf[1] = v119;
  LOBYTE(buf[2]) = 0;
  BYTE4(buf[2]) = 0;
  *(_QWORD *)((char *)&buf[3] + 4) = 0;
  v123 = &v451;
  *(_QWORD *)((char *)&buf[4] + 4) = v121;
  v124 = std::__function::__func<std::__bind<void (ggl::Texture2D::*)(ggl::Texture2DLoadItem const&),ggl::Texture2D*,std::placeholders::__ph<1> const&>,std::allocator<std::__bind<void (ggl::Texture2D::*)(ggl::Texture2DLoadItem const&),ggl::Texture2D*,std::placeholders::__ph<1> const&>>,void ()(ggl::Texture2DLoadItem const&)>::__clone((uint64_t)v122);
  *((_QWORD *)&v452 + 1) = v125;
  v126 = v449;
  if (v449 == &v447)
  {
    v127 = 4;
    v126 = &v447;
    v114 = v416;
  }
  else
  {
    v114 = v416;
    if (!v449)
      goto LABEL_221;
    v127 = 5;
  }
  (*(void (**)(__n128))(*(_QWORD *)v126 + 8 * v127))(v124);
LABEL_221:
  ggl::MetalResourceManager::upload(v426, (uint64_t)buf, (std::__shared_weak_count *)(*((_QWORD *)v114 + 5) + 8));
  if (*((__int128 **)&v452 + 1) == &v451)
  {
    v128 = 4;
    goto LABEL_225;
  }
  if (*((_QWORD *)&v452 + 1))
  {
    v128 = 5;
    v123 = (__int128 *)*((_QWORD *)&v452 + 1);
LABEL_225:
    (*(void (**)(__int128 *))(*(_QWORD *)v123 + 8 * v128))(v123);
  }
LABEL_226:
  v129 = *((_QWORD *)v430 + 25);
  for (i = *((_QWORD *)v430 + 26); v129 != i; v129 += 80)
    ggl::MetalResourceManager::upload(v426, v129, (std::__shared_weak_count *)(*((_QWORD *)v114 + 5) + 8));
  v131 = *((_QWORD *)v114 + 5);
  v132 = *(_QWORD *)(v131 + 88);
  for (j = *(_QWORD *)(v131 + 96); v132 != j; v132 += 80)
    ggl::MetalResourceManager::upload(v426, v132, (std::__shared_weak_count *)(*((_QWORD *)v114 + 5) + 8));
  if (v115)
  {
    if (GEOGetGeoGLPerformanceDetailLog_onceToken != -1)
      dispatch_once(&GEOGetGeoGLPerformanceDetailLog_onceToken, &__block_literal_global_7_40484);
    v134 = (id)GEOGetGeoGLPerformanceDetailLog_log;
    v135 = v134;
    if (v429 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v134))
    {
      v136 = *((_QWORD *)v430 + 1);
      LODWORD(buf[0]) = 136315394;
      *(_QWORD *)((char *)buf + 4) = v136;
      WORD2(buf[1]) = 2048;
      *(_QWORD *)((char *)&buf[1] + 6) = v115;
      _os_signpost_emit_with_name_impl(&dword_19F029000, v135, OS_SIGNPOST_INTERVAL_END, v429, "UploadTextures", "category=%s textureCount=%zu", (uint8_t *)buf, 0x16u);
    }

  }
  v137 = mach_absolute_time();
  if (ggl::Performance::Counters::instance(void)::onceToken[0] != -1)
    dispatch_once(ggl::Performance::Counters::instance(void)::onceToken, &__block_literal_global_40952);
  v138 = (unint64_t *)(*(_QWORD *)(ggl::Performance::Counters::instance(void)::counters + 32) + 152);
  do
    v139 = __ldaxr(v138);
  while (__stlxr(v139 + v137 - v113, v138));
  v140 = mach_absolute_time();
  v142 = *((_QWORD *)v430 + 29);
  v141 = *((_QWORD *)v430 + 30);
  v143 = ((v141 - v142) >> 6)
       + ((uint64_t)(*(_QWORD *)(*((_QWORD *)v416 + 5) + 64) - *(_QWORD *)(*((_QWORD *)v416 + 5) + 56)) >> 6);
  if (v143)
  {
    if (GEOGetGeoGLPerformanceDetailLog_onceToken != -1)
      dispatch_once(&GEOGetGeoGLPerformanceDetailLog_onceToken, &__block_literal_global_7_40484);
    v144 = (id)GEOGetGeoGLPerformanceDetailLog_log;
    v145 = v144;
    if (v429 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v144))
    {
      v146 = *((_QWORD *)v430 + 1);
      LODWORD(buf[0]) = 136315138;
      *(_QWORD *)((char *)buf + 4) = v146;
      _os_signpost_emit_with_name_impl(&dword_19F029000, v145, OS_SIGNPOST_INTERVAL_BEGIN, v429, "UploadBuffers", "category=%s", (uint8_t *)buf, 0xCu);
    }

    v142 = *((_QWORD *)v430 + 29);
    v141 = *((_QWORD *)v430 + 30);
  }
  while (v142 != v141)
  {
    if (*(_QWORD *)(v142 + 24) != *(_QWORD *)(v142 + 16))
    {
      v147 = *(const ggl::Buffer **)(v142 + 8);
      v148 = (_QWORD *)*((_QWORD *)v147 + 3);
      if (v148 || (v148 = ggl::MetalResourceManager::newBuffer(v426, v147)) != 0)
      {
        v149 = (void *)v148[4];
        if (v149)
        {
          memcpy((void *)(objc_msgSend(v149, "contents") + *(_QWORD *)(v142 + 16)), *(const void **)v142, *(_QWORD *)(v142 + 24) - *(_QWORD *)(v142 + 16));
          v150 = *(_QWORD *)(v142 + 56);
          if (v150)
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v150 + 48))(v150, v142);
        }
      }
    }
    v142 += 64;
  }
  v151 = *((_QWORD *)v416 + 5);
  v153 = *(_QWORD *)(v151 + 56);
  v152 = *(_QWORD *)(v151 + 64);
  while (v153 != v152)
  {
    if (*(_QWORD *)(v153 + 24) != *(_QWORD *)(v153 + 16))
    {
      v154 = *(const ggl::Buffer **)(v153 + 8);
      v155 = (_QWORD *)*((_QWORD *)v154 + 3);
      if (v155 || (v155 = ggl::MetalResourceManager::newBuffer(v426, v154)) != 0)
      {
        v156 = (void *)v155[4];
        if (v156)
        {
          memcpy((void *)(objc_msgSend(v156, "contents") + *(_QWORD *)(v153 + 16)), *(const void **)v153, *(_QWORD *)(v153 + 24) - *(_QWORD *)(v153 + 16));
          v157 = *(_QWORD *)(v153 + 56);
          if (v157)
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v157 + 48))(v157, v153);
        }
      }
    }
    v153 += 64;
  }
  if (v143)
  {
    if (GEOGetGeoGLPerformanceDetailLog_onceToken != -1)
      dispatch_once(&GEOGetGeoGLPerformanceDetailLog_onceToken, &__block_literal_global_7_40484);
    v158 = (id)GEOGetGeoGLPerformanceDetailLog_log;
    v159 = v158;
    if (v429 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v158))
    {
      v160 = *((_QWORD *)v430 + 1);
      LODWORD(buf[0]) = 136315394;
      *(_QWORD *)((char *)buf + 4) = v160;
      WORD2(buf[1]) = 2048;
      *(_QWORD *)((char *)&buf[1] + 6) = v143;
      _os_signpost_emit_with_name_impl(&dword_19F029000, v159, OS_SIGNPOST_INTERVAL_END, v429, "UploadBuffers", "category=%s bufferCount=%zu", (uint8_t *)buf, 0x16u);
    }

  }
  v161 = mach_absolute_time();
  if (ggl::Performance::Counters::instance(void)::onceToken[0] != -1)
    dispatch_once(ggl::Performance::Counters::instance(void)::onceToken, &__block_literal_global_40952);
  v162 = v416;
  v163 = (unint64_t *)(*(_QWORD *)(ggl::Performance::Counters::instance(void)::counters + 32) + 160);
  do
    v164 = __ldaxr(v163);
  while (__stlxr(v164 + v161 - v140, v163));
  v165 = *((_QWORD *)v430 + 29);
  for (k = *((_QWORD *)v430 + 30); k != v165; k -= 64)
  {
    v167 = *(_QWORD **)(k - 8);
    if ((_QWORD *)(k - 32) == v167)
    {
      v167 = (_QWORD *)(k - 32);
      v168 = 4;
LABEL_278:
      (*(void (**)(void))(*v167 + 8 * v168))();
      continue;
    }
    if (v167)
    {
      v168 = 5;
      goto LABEL_278;
    }
  }
  *((_QWORD *)v430 + 30) = v165;
  v169 = *((_QWORD *)v416 + 5);
  v170 = *(_QWORD *)(v169 + 56);
  for (m = *(_QWORD *)(v169 + 64); m != v170; m -= 64)
  {
    v172 = *(_QWORD **)(m - 8);
    if ((_QWORD *)(m - 32) == v172)
    {
      v172 = (_QWORD *)(m - 32);
      v173 = 4;
LABEL_286:
      (*(void (**)(void))(*v172 + 8 * v173))();
      continue;
    }
    if (v172)
    {
      v173 = 5;
      goto LABEL_286;
    }
  }
  *(_QWORD *)(v169 + 64) = v170;
  v174 = v430;
  v176 = (_QWORD *)*((_QWORD *)v430 + 25);
  v175 = (_QWORD *)*((_QWORD *)v430 + 26);
  if (v175 != v176)
  {
    v177 = v175 - 4;
    while (1)
    {
      v179 = (_QWORD *)v177[3];
      if (v177 == v179)
        break;
      if (v179)
      {
        v180 = 5;
LABEL_299:
        (*(void (**)(void))(*v179 + 8 * v180))();
      }
      if (*((_BYTE *)v177 - 28))
        *((_BYTE *)v177 - 28) = 0;
      if (*((_BYTE *)v177 - 32))
        *((_BYTE *)v177 - 32) = 0;
      v178 = v177 - 6;
      v177 -= 10;
      if (v178 == v176)
        goto LABEL_304;
    }
    v179 = v177;
    v180 = 4;
    goto LABEL_299;
  }
LABEL_304:
  *((_QWORD *)v174 + 26) = v176;
  v181 = *((_QWORD *)v416 + 5);
  v183 = *(_QWORD **)(v181 + 88);
  v182 = *(_QWORD **)(v181 + 96);
  if (v182 != v183)
  {
    v184 = v182 - 4;
    while (1)
    {
      v186 = (_QWORD *)v184[3];
      if (v184 == v186)
        break;
      if (v186)
      {
        v187 = 5;
LABEL_311:
        (*(void (**)(void))(*v186 + 8 * v187))();
      }
      if (*((_BYTE *)v184 - 28))
        *((_BYTE *)v184 - 28) = 0;
      if (*((_BYTE *)v184 - 32))
        *((_BYTE *)v184 - 32) = 0;
      v185 = v184 - 6;
      v184 -= 10;
      if (v185 == v183)
        goto LABEL_316;
    }
    v186 = v184;
    v187 = 4;
    goto LABEL_311;
  }
LABEL_316:
  *(_QWORD *)(v181 + 96) = v183;
  if (*((_QWORD *)v430 + 4)
    || *((_QWORD *)v430 + 9) != *((_QWORD *)v430 + 10)
    || *((_QWORD *)v430 + 17) != *((_QWORD *)v430 + 18)
    || *((_QWORD *)v430 + 38)
    || *((_QWORD *)v430 + 44))
  {
    v188 = 0;
  }
  else
  {
    v402 = *((_QWORD *)v416 + 6);
    if (*(_BYTE *)(v402 + 84))
      v188 = *(unsigned __int8 *)(v402 + 72) != 0;
    else
      v188 = 1;
  }
  v190 = *((_QWORD *)v430 + 21);
  v189 = *((_QWORD *)v430 + 22);
  v417 = v188;
  if (v188)
  {
    v191 = *((_QWORD *)v430 + 13) == *((_QWORD *)v430 + 14) && *((_QWORD *)v430 + 5) == *((_QWORD *)v430 + 6);
    if (v191 && v190 == v189)
    {
      if (GEOGetGeoGLPerformanceDetailLog_onceToken != -1)
        dispatch_once(&GEOGetGeoGLPerformanceDetailLog_onceToken, &__block_literal_global_7_40484);
      v193 = (id)GEOGetGeoGLPerformanceDetailLog_log;
      v194 = v193;
      v195 = v429;
      if (v429 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v193))
        goto LABEL_627;
      goto LABEL_628;
    }
  }
  v412 = *((_QWORD *)v430 + 14);
  v414 = *((_QWORD *)v430 + 13);
  v403 = *((_QWORD *)v430 + 6);
  v404 = *((_QWORD *)v430 + 5);
  if (v190 == v189)
    goto LABEL_428;
  v196 = *((_QWORD *)v416 + 2);
  v197 = *((_QWORD *)v416 + 5);
  v198 = *(_QWORD *)(v197 + 40);
  ggl::MetalDeviceContextFrame::blitCommandEncoder(v197, 0, *(unsigned __int8 *)(v197 + 48));
  v427 = (ggl::MetalResourceManager *)objc_claimAutoreleasedReturnValue();
  ggl::MetalDeviceContextFrame::blitCommandEncoder(*((_QWORD *)v416 + 5), 1u, *(unsigned __int8 *)(*((_QWORD *)v416 + 5) + 49));
  v419 = (ggl::MetalResourceManager *)objc_claimAutoreleasedReturnValue();
  v199 = v430;
  v201 = (unsigned __int8 *)*((_QWORD *)v430 + 21);
  v200 = (unsigned __int8 *)*((_QWORD *)v430 + 22);
  if (v201 == v200)
    goto LABEL_427;
  v424 = *(std::__shared_weak_count ***)(v196 + 80);
  do
  {
    v202 = v427;
    if (v201[1])
    {
      if (v201[1] != 1)
        goto LABEL_339;
      v202 = v419;
    }
    v203 = v202;
    if (v203)
    {
      v204 = v203;
      v205 = *v201;
      if (v205 == 6)
      {
        v206 = *(_QWORD *)(*((_QWORD *)v201 + 2) + 24);
        if (v206)
        {
LABEL_347:
          v207 = *(_QWORD **)(v206 + 24);
          v208 = (const ggl::Texture *)*((_QWORD *)v201 + 8);
          if (!v208)
          {
LABEL_348:
            v209 = 0;
            goto LABEL_361;
          }
          goto LABEL_360;
        }
        goto LABEL_350;
      }
      if (v205 == 5)
      {
        v206 = *(_QWORD *)(*((_QWORD *)v201 + 4) + 24);
        if (v206)
          goto LABEL_347;
LABEL_350:
        v207 = 0;
        v208 = (const ggl::Texture *)*((_QWORD *)v201 + 8);
        if (!v208)
          goto LABEL_348;
LABEL_360:
        v209 = ggl::MetalResourceManager::prepareTexture(v424, v208, v198);
LABEL_361:
        v211 = *v201;
        if (v211 == 6)
        {
          if (!v207)
          {
            v213 = *(const ggl::Buffer **)(*((_QWORD *)v201 + 2) + 24);
            if (*((_QWORD *)v213 + 3))
              v207 = 0;
            else
              v207 = ggl::MetalResourceManager::newBuffer((ggl::MetalResourceManager *)v424, v213);
          }
          v217 = *(const ggl::Buffer **)(*((_QWORD *)v201 + 1) + 24);
          v214 = (unint64_t *)*((_QWORD *)v217 + 3);
          if (!v214)
            goto LABEL_379;
        }
        else
        {
          if (v211 != 5)
          {
            if (!v207)
            {
              v215 = (const ggl::Buffer *)*((_QWORD *)v201 + 6);
              if (!v215)
              {
                v214 = 0;
                v207 = 0;
                goto LABEL_380;
              }
              v216 = ggl::MetalResourceManager::newBuffer((ggl::MetalResourceManager *)v424, v215);
              v207 = v216;
              if (v201[148])
              {
                -[ggl::MetalResourceManager fillBuffer:range:value:](v204, "fillBuffer:range:value:", v216[4], 0, *(_QWORD *)(*((_QWORD *)v201 + 6) + 40), 0);
                v214 = 0;
                goto LABEL_380;
              }
            }
            v214 = 0;
            goto LABEL_380;
          }
          if (!v207)
          {
            v212 = *(const ggl::Buffer **)(*((_QWORD *)v201 + 4) + 24);
            if (*((_QWORD *)v212 + 3))
              v207 = 0;
            else
              v207 = ggl::MetalResourceManager::newBuffer((ggl::MetalResourceManager *)v424, v212);
          }
          v217 = *(const ggl::Buffer **)(*((_QWORD *)v201 + 3) + 24);
          v214 = (unint64_t *)*((_QWORD *)v217 + 3);
          if (!v214)
LABEL_379:
            v214 = (unint64_t *)ggl::MetalResourceManager::newBuffer((ggl::MetalResourceManager *)v424, v217);
        }
LABEL_380:
        if (*v201 - 5 > 1)
        {
          v219 = (_QWORD *)*((_QWORD *)v201 + 5);
          if (v219)
            v219 = *(_QWORD **)(v219[3] + 32);
          v220 = v219;
          if (v207)
            v221 = (void *)v207[4];
          else
            v221 = 0;
          v223 = v221;
        }
        else
        {
          if (v214)
            v218 = (void *)v214[4];
          else
            v218 = 0;
          v220 = v218;
          if (v207)
            v222 = (void *)v207[4];
          else
            v222 = 0;
          v223 = v222;
          if (v214)
          {
            v224 = v214 + 2;
            v225 = atomic_load(v214 + 2);
            if (v225 < v198)
            {
              while (1)
              {
                v226 = __ldaxr(v224);
                if (v226 == v225)
                {
                  if (!__stlxr(v198, v224))
                  {
                    v227 = 1;
                    goto LABEL_400;
                  }
                }
                else
                {
                  __clrex();
                }
                v227 = 0;
LABEL_400:
                if ((v227 & 1) == 0)
                {
                  v225 = v226;
                  if (v226 < v198)
                    continue;
                }
                break;
              }
            }
          }
        }
        v228 = (const ggl::Texture *)*((_QWORD *)v201 + 7);
        if (v228)
        {
          v229 = ggl::MetalResourceManager::prepareTexture(v424, v228, v198);
          if (*((_BYTE *)v229 + 120) == 1)
          {
            v230 = (id *)(*((_QWORD *)v229 + 4) + 8 * *((unsigned int *)v229 + 16));
LABEL_414:
            v2 = *v230;
            if (!v209)
              goto LABEL_415;
            goto LABEL_408;
          }
          if (!*((_BYTE *)v229 + 120))
          {
            v230 = (id *)*((_QWORD *)v229 + 4);
            goto LABEL_414;
          }
        }
        else
        {
          v2 = 0;
        }
        if (!v209)
        {
LABEL_415:
          v214 = 0;
          goto LABEL_416;
        }
LABEL_408:
        if (*((_BYTE *)v209 + 120) == 1)
        {
          v231 = (id *)(*((_QWORD *)v209 + 4) + 8 * *((unsigned int *)v209 + 16));
        }
        else
        {
          if (*((_BYTE *)v209 + 120))
          {
LABEL_416:
            v232 = *((unsigned int *)v201 + 18);
            v233 = *((unsigned int *)v201 + 19);
            v234 = *((unsigned int *)v201 + 20);
            v235 = *((unsigned int *)v201 + 22);
            v236 = *((unsigned int *)v201 + 23);
            v237 = *((unsigned int *)v201 + 24);
            v238 = *((unsigned int *)v201 + 25);
            v239 = *((unsigned int *)v201 + 26);
            switch(*v201)
            {
              case 0u:
              case 5u:
                v240 = *((unsigned int *)v201 + 27);
                v241 = *((unsigned int *)v201 + 28);
                goto LABEL_422;
              case 1u:
                v243 = *((unsigned int *)v201 + 27);
                v244 = *((unsigned int *)v201 + 29);
                v245 = *((unsigned int *)v201 + 31);
                buf[0] = *((unsigned int *)v201 + 18);
                buf[1] = v233;
                buf[2] = v234;
                v246 = *((unsigned int *)v201 + 34);
                v247 = *((unsigned int *)v201 + 36);
                *(_QWORD *)&v447 = v237;
                *((_QWORD *)&v447 + 1) = v238;
                v448 = v239;
                -[ggl::MetalResourceManager copyFromBuffer:sourceOffset:sourceBytesPerRow:sourceBytesPerImage:sourceSize:toTexture:destinationSlice:destinationLevel:destinationOrigin:](v204, "copyFromBuffer:sourceOffset:sourceBytesPerRow:sourceBytesPerImage:sourceSize:toTexture:destinationSlice:destinationLevel:destinationOrigin:", v220, v243, v244, v245, buf, v214, v246, v247, &v447);
                break;
              case 2u:
                v242 = *((unsigned int *)v201 + 35);
                v437 = *((unsigned int *)v201 + 21);
                v438 = v235;
                v439 = v236;
                v434 = v232;
                v435 = v233;
                v436 = v234;
                -[ggl::MetalResourceManager copyFromTexture:sourceSlice:sourceLevel:sourceOrigin:sourceSize:toBuffer:destinationOffset:destinationBytesPerRow:destinationBytesPerImage:](v204, "copyFromTexture:sourceSlice:sourceLevel:sourceOrigin:sourceSize:toBuffer:destinationOffset:destinationBytesPerRow:destinationBytesPerImage:", v2, *((unsigned int *)v201 + 33), v242, &v437, &v434, v223, *((unsigned int *)v201 + 28), *((unsigned int *)v201 + 30), *((unsigned int *)v201 + 32));
                break;
              case 3u:
                v433[0] = *((unsigned int *)v201 + 21);
                v433[1] = v235;
                v433[2] = v236;
                v432[0] = v232;
                v432[1] = v233;
                v432[2] = v234;
                v248 = *((unsigned int *)v201 + 33);
                v249 = *((unsigned int *)v201 + 34);
                v250 = *((unsigned int *)v201 + 35);
                v251 = *((unsigned int *)v201 + 36);
                v431[0] = v237;
                v431[1] = v238;
                v431[2] = v239;
                -[ggl::MetalResourceManager copyFromTexture:sourceSlice:sourceLevel:sourceOrigin:sourceSize:toTexture:destinationSlice:destinationLevel:destinationOrigin:](v204, "copyFromTexture:sourceSlice:sourceLevel:sourceOrigin:sourceSize:toTexture:destinationSlice:destinationLevel:destinationOrigin:", v2, v248, v250, v433, v432, v214, v249, v251, v431);
                break;
              case 4u:
                -[ggl::MetalResourceManager copyFromTexture:toTexture:](v204, "copyFromTexture:toTexture:", v2, v214);
                break;
              case 6u:
                v240 = *((unsigned int *)v201 + 27);
                v241 = *((unsigned int *)v201 + 28);
                v232 = objc_msgSend(v223, "length");
LABEL_422:
                -[ggl::MetalResourceManager copyFromBuffer:sourceOffset:toBuffer:destinationOffset:size:](v204, "copyFromBuffer:sourceOffset:toBuffer:destinationOffset:size:", v220, v240, v223, v241, v232);
                break;
              default:
                break;
            }

            goto LABEL_339;
          }
          v231 = (id *)*((_QWORD *)v209 + 4);
        }
        v214 = (unint64_t *)*v231;
        goto LABEL_416;
      }
      v208 = (const ggl::Texture *)*((_QWORD *)v201 + 8);
      if (v208)
      {
        v209 = (ggl::MetalTextureResource *)*((_QWORD *)v208 + 3);
        v210 = *((_QWORD *)v201 + 6);
        if (v210)
          goto LABEL_354;
      }
      else
      {
        v209 = 0;
        v210 = *((_QWORD *)v201 + 6);
        if (v210)
        {
LABEL_354:
          v207 = *(_QWORD **)(v210 + 24);
          if (v209)
            goto LABEL_355;
          goto LABEL_359;
        }
      }
      v207 = 0;
      if (v209)
      {
LABEL_355:
        if (!v208)
          goto LABEL_361;
        goto LABEL_360;
      }
LABEL_359:
      v208 = (const ggl::Texture *)*((_QWORD *)v201 + 8);
      if (!v208)
        goto LABEL_348;
      goto LABEL_360;
    }
LABEL_339:
    v201 += 152;
  }
  while (v201 != v200);
  v199 = v430;
  v201 = (unsigned __int8 *)*((_QWORD *)v430 + 21);
LABEL_427:
  *((_QWORD *)v199 + 22) = v201;

  v162 = v416;
LABEL_428:
  if (v417 || !*(_QWORD *)(*((_QWORD *)v162 + 6) + 8))
    goto LABEL_451;
  v443 = &off_1E42D7E98;
  v444 = &v429;
  v445 = &v430;
  v446 = &v443;
  v440 = &off_1E42D7EE0;
  *(_QWORD *)&v441 = &v429;
  *((_QWORD *)&v441 + 1) = &v430;
  v442 = &v440;
  buf[3] = buf;
  buf[0] = &off_1E42D7EE0;
  *(_OWORD *)&buf[1] = v441;
  if (GEOGetGeoGLPerformanceDetailLog_onceToken != -1)
    dispatch_once(&GEOGetGeoGLPerformanceDetailLog_onceToken, &__block_literal_global_7_40484);
  v252 = (id)GEOGetGeoGLPerformanceDetailLog_log;
  v253 = v252;
  v254 = *v444;
  if (*v444 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v252))
  {
    v255 = *((_QWORD *)*v445 + 1);
    LODWORD(v447) = 136315138;
    *(_QWORD *)((char *)&v447 + 4) = v255;
    _os_signpost_emit_with_name_impl(&dword_19F029000, v253, OS_SIGNPOST_INTERVAL_BEGIN, v254, "EncodeRenderItems", "category=%s", (uint8_t *)&v447, 0xCu);
  }

  v256 = v442;
  if (v442 == &v440)
  {
    v257 = 4;
    v256 = &v440;
    v162 = v416;
LABEL_439:
    (*v256)[v257]();
  }
  else
  {
    v162 = v416;
    if (v442)
    {
      v257 = 5;
      goto LABEL_439;
    }
  }
  v258 = v446;
  if (v446 == &v443)
  {
    v259 = 4;
    v258 = &v443;
LABEL_444:
    (*v258)[v259]();
  }
  else if (v446)
  {
    v259 = 5;
    goto LABEL_444;
  }
  ggl::MetalDeviceContext::doRenderWork(v162, v430);
  if (!buf[3])
  {
LABEL_635:
    std::__throw_bad_function_call[abi:nn180100]();
    __break(1u);
    return;
  }
  (*(void (**)(_QWORD))(*(_QWORD *)buf[3] + 48))(buf[3]);
  v260 = (_QWORD *)buf[3];
  if ((_QWORD *)buf[3] == buf)
  {
    v261 = 4;
    v260 = buf;
LABEL_450:
    (*(void (**)(void))(*v260 + 8 * v261))();
  }
  else if (buf[3])
  {
    v261 = 5;
    goto LABEL_450;
  }
LABEL_451:
  v262 = v430;
  if (v414 == v412)
    goto LABEL_602;
  v263 = *((_QWORD *)v162 + 5);
  *(_BYTE *)(v263 + 50) = 1;
  v264 = *((_QWORD *)v162 + 6);
  v420 = *(id *)(v263 + 120);
  v265 = *(void **)(v264 + 96);
  if (v265)
  {
    objc_msgSend(v265, "updateFence:afterStages:", *(_QWORD *)(v264 + 88), 2);
    objc_msgSend(*(id *)(v264 + 96), "endEncoding");
    v266 = *(void **)(v264 + 96);
    *(_QWORD *)(v264 + 96) = 0;

  }
  v267 = *(void **)(v264 + 104);
  if (v267)
    goto LABEL_462;
  v268 = *(unsigned int *)(v264 + 80);
  if (!(_DWORD)v268)
    goto LABEL_458;
  if ((_DWORD)v268 != 1)
  {
    v267 = 0;
    if (!*(_DWORD *)(v264 + 76))
      goto LABEL_462;
    goto LABEL_461;
  }
  v268 = 1;
LABEL_458:
  objc_msgSend(v420, "computeCommandEncoderWithDispatchType:", v268);
  v269 = objc_claimAutoreleasedReturnValue();
  v270 = *(void **)(v264 + 104);
  *(_QWORD *)(v264 + 104) = v269;

  v267 = *(void **)(v264 + 104);
  if (*(_DWORD *)(v264 + 76))
  {
LABEL_461:
    objc_msgSend(v267, "waitForFence:", *(_QWORD *)(v264 + 88));
    v267 = *(void **)(v264 + 104);
  }
LABEL_462:
  v271 = v267;

  v272 = (ggl::Device *)*((_QWORD *)v416 + 2);
  v273 = *(_QWORD *)(*((_QWORD *)v416 + 5) + 40);
  v274 = v271;
  v275 = (_QWORD *)*((_QWORD *)v262 + 13);
  v405 = (_QWORD *)*((_QWORD *)v262 + 14);
  v406 = v274;
  if (v275 != v405)
  {
    v428 = *(ggl::MetalResourceManager **)(*((_QWORD *)v416 + 5) + 32);
    v415 = *(_QWORD *)(*((_QWORD *)v416 + 5) + 24);
    v411 = *((_QWORD *)v416 + 4);
    v413 = (const ggl::Texture *)*((_QWORD *)v416 + 9);
    v408 = 0;
    v407 = v272;
    do
    {
      v409 = v275;
      v418 = (ggl::MetalResourceManager *)*((_QWORD *)v272 + 10);
      v410 = *v275;
      v421 = v406;
      v425 = *(_QWORD **)(v410 + 8);
      v276 = v425[21];
      v277 = *(_QWORD *)(v276 + 24);
      if (!v277)
      {
        v278 = *(const ggl::ShaderFunction **)(v276 + 48);
        v279 = *((_QWORD *)v278 + 3);
        if (!v279)
          v279 = ggl::MetalResourceManager::newShaderFunction(v418, v278, *(unsigned __int8 *)(v276 + 56), *(_QWORD *)(v276 + 64));
        v280 = *(id *)(v279 + 32);
        v281 = *(id *)(*((_QWORD *)v418 + 32) + 104);
        buf[0] = 0;
        v282 = (void *)objc_msgSend(v281, "newComputePipelineStateWithFunction:error:", v280, buf);
        v283 = (id)buf[0];

        if (v283)
        {
          objc_msgSend(v283, "localizedDescription");
          v284 = (void *)objc_claimAutoreleasedReturnValue();
          NSLog((NSString *)CFSTR("error creating compute CPS: %@"), v284);

          v277 = 0;
        }
        else
        {
          {
            v370 = operator new();
            ggl::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v370, "GeoGL", 0xA3D02C1100000005);
          }
          v277 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)ggl::Allocator::instance(void)::alloc
                                                                      + 16))(ggl::Allocator::instance(void)::alloc, 40, 8);
          *(_QWORD *)v277 = 0;
          *(_WORD *)(v277 + 8) = 1537;
          *(_QWORD *)(v277 + 16) = 0;
          *(_QWORD *)(v277 + 24) = 0;
          *(_QWORD *)(v277 + 32) = 0;
          objc_storeStrong((id *)(v277 + 32), v282);
          v286 = (std::__shared_weak_count *)*((_QWORD *)v418 + 2);
          if (!v286 || (v287 = *((_QWORD *)v418 + 1), (v288 = std::__shared_weak_count::lock(v286)) == 0))
          {
            std::__throw_bad_weak_ptr[abi:nn180100]();
            goto LABEL_635;
          }
          v289 = *(std::__shared_weak_count **)(v276 + 16);
          *(_QWORD *)(v276 + 8) = v287;
          *(_QWORD *)(v276 + 16) = v288;
          if (v289)
          {
            p_shared_owners = (unint64_t *)&v289->__shared_owners_;
            do
              v291 = __ldaxr(p_shared_owners);
            while (__stlxr(v291 - 1, p_shared_owners));
            if (!v291)
            {
              ((void (*)(std::__shared_weak_count *))v289->__on_zero_shared)(v289);
              std::__shared_weak_count::__release_weak(v289);
            }
          }
          *(_QWORD *)(v276 + 24) = v277;
          ++*(_DWORD *)(v276 + 32);
          ggl::ResourceManager::_addResourceStat((uint64_t)v418, "ComputePipelineState", 0xCB8C155300000014, 0);
        }

        {
          v369 = operator new();
          ggl::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v369, "GeoGL", 0xA3D02C1100000005);
        }
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)ggl::Allocator::instance(void)::alloc + 40))(ggl::Allocator::instance(void)::alloc, v279, 40);

        v272 = v407;
      }
      v293 = *(_QWORD *)(v277 + 32);
      if (v408 != v293)
      {
        objc_msgSend(v421, "setComputePipelineState:", *(_QWORD *)(v277 + 32));
        v408 = v293;
      }
      v294 = (std::mutex **)v425[1];
      v295 = (std::mutex **)v425[2];
      while (v294 != v295)
      {
        v298 = *v294;
        if (!*(_QWORD *)&(*v294)->__m_.__opaque[16])
          ggl::BufferData::prepareBufferForDevice(*v294, v272, 0);
        if (v298->__m_.__opaque[10] == 1 && v298[3].__m_.__sig != v415 && *(_DWORD *)&v298[1].__m_.__opaque[40])
        {
          v298[3].__m_.__sig = v415;
          *(_OWORD *)&v298->__m_.__opaque[48] = *(_OWORD *)&v298->__m_.__opaque[32];
        }
        v299 = v428;
        if (*(_DWORD *)&v298[1].__m_.__opaque[40] <= 1u)
          v299 = 0;
        v300 = *(int64x2_t *)&v298->__m_.__opaque[48];
        v301 = vaddq_s64(vdupq_n_s64((_QWORD)v299 * *(_QWORD *)&v298[1].__m_.__opaque[48]), v300);
        *(_QWORD *)&v298->__m_.__opaque[48] = 0;
        v298[1].__m_.__sig = 0;
        v302 = *(const ggl::Buffer **)&v298->__m_.__opaque[16];
        buf[0] = *(_QWORD *)v298[1].__m_.__opaque + v300.i64[0];
        buf[1] = v302;
        *(int64x2_t *)&buf[2] = v301;
        *((_QWORD *)&v451 + 1) = 0;
        v303 = *v294;
        if (*(_DWORD *)&(*v294)[1].__m_.__opaque[40] >= 2u && !*(_QWORD *)&v303[1].__m_.__opaque[32])
          *(_QWORD *)&v303[1].__m_.__opaque[32] = v411;
        if ((vmovn_s64(vceqq_s64(vdupq_laneq_s64(v301, 1), v301)).u8[0] & 1) == 0)
        {
          v304 = (_QWORD *)*((_QWORD *)v302 + 3);
          if (v304 || (v304 = ggl::MetalResourceManager::newBuffer(v418, v302)) != 0)
          {
            v305 = (void *)v304[4];
            if (v305)
            {
              v306 = objc_msgSend(v305, "contents");
              memcpy((void *)(v306 + buf[2]), (const void *)buf[0], buf[3] - buf[2]);
              if (*((_QWORD *)&v451 + 1))
                (*(void (**)(_QWORD, _QWORD *))(**((_QWORD **)&v451 + 1) + 48))(*((_QWORD *)&v451 + 1), buf);
            }
          }
        }
        v307 = (unint64_t *)(*(_QWORD *)(*(_QWORD *)&v303->__m_.__opaque[16] + 24) + 16);
        v308 = atomic_load(v307);
        if (v308 < v273)
        {
          do
          {
            v309 = __ldaxr(v307);
            if (v309 == v308)
            {
              if (!__stlxr(v273, v307))
                break;
            }
            else
            {
              __clrex();
            }
            v308 = v309;
          }
          while (v309 < v273);
        }
        v296 = (_QWORD *)*((_QWORD *)&v451 + 1);
        if (*((_QWORD **)&v451 + 1) == &buf[4])
        {
          v296 = &buf[4];
          v297 = 4;
LABEL_484:
          (*(void (**)(void))(*v296 + 8 * v297))();
          goto LABEL_485;
        }
        if (*((_QWORD *)&v451 + 1))
        {
          v297 = 5;
          goto LABEL_484;
        }
LABEL_485:
        v294 += 2;
      }
      v310 = (std::mutex **)v425[5];
      v311 = (std::mutex **)v425[6];
      while (v310 != v311)
      {
        v314 = *v310;
        if (!*(_QWORD *)&(*v310)->__m_.__opaque[16])
          ggl::BufferData::prepareBufferForDevice(*v310, v272, 0);
        if (v314->__m_.__opaque[10] == 1 && v314[3].__m_.__sig != v415 && *(_DWORD *)&v314[1].__m_.__opaque[40])
        {
          v314[3].__m_.__sig = v415;
          *(_OWORD *)&v314->__m_.__opaque[48] = *(_OWORD *)&v314->__m_.__opaque[32];
        }
        v315 = v428;
        if (*(_DWORD *)&v314[1].__m_.__opaque[40] <= 1u)
          v315 = 0;
        v316 = *(int64x2_t *)&v314->__m_.__opaque[48];
        v317 = vaddq_s64(vdupq_n_s64((_QWORD)v315 * *(_QWORD *)&v314[1].__m_.__opaque[48]), v316);
        *(_QWORD *)&v314->__m_.__opaque[48] = 0;
        v314[1].__m_.__sig = 0;
        v318 = *(const ggl::Buffer **)&v314->__m_.__opaque[16];
        buf[0] = *(_QWORD *)v314[1].__m_.__opaque + v316.i64[0];
        buf[1] = v318;
        *(int64x2_t *)&buf[2] = v317;
        *((_QWORD *)&v451 + 1) = 0;
        v319 = *v310;
        if (*(_DWORD *)&(*v310)[1].__m_.__opaque[40] >= 2u && !*(_QWORD *)&v319[1].__m_.__opaque[32])
          *(_QWORD *)&v319[1].__m_.__opaque[32] = v411;
        if ((vmovn_s64(vceqq_s64(vdupq_laneq_s64(v317, 1), v317)).u8[0] & 1) == 0)
        {
          v320 = (_QWORD *)*((_QWORD *)v318 + 3);
          if (v320 || (v320 = ggl::MetalResourceManager::newBuffer(v418, v318)) != 0)
          {
            v321 = (void *)v320[4];
            if (v321)
            {
              v322 = objc_msgSend(v321, "contents");
              memcpy((void *)(v322 + buf[2]), (const void *)buf[0], buf[3] - buf[2]);
              if (*((_QWORD *)&v451 + 1))
                (*(void (**)(_QWORD, _QWORD *))(**((_QWORD **)&v451 + 1) + 48))(*((_QWORD *)&v451 + 1), buf);
            }
          }
        }
        v323 = (unint64_t *)(*(_QWORD *)(*(_QWORD *)&v319->__m_.__opaque[16] + 24) + 16);
        v324 = atomic_load(v323);
        if (v324 < v273)
        {
          do
          {
            v325 = __ldaxr(v323);
            if (v325 == v324)
            {
              if (!__stlxr(v273, v323))
                break;
            }
            else
            {
              __clrex();
            }
            v324 = v325;
          }
          while (v325 < v273);
        }
        v312 = (_QWORD *)*((_QWORD *)&v451 + 1);
        if (*((_QWORD **)&v451 + 1) == &buf[4])
        {
          v312 = &buf[4];
          v313 = 4;
LABEL_515:
          (*(void (**)(void))(*v312 + 8 * v313))();
          goto LABEL_516;
        }
        if (*((_QWORD *)&v451 + 1))
        {
          v313 = 5;
          goto LABEL_515;
        }
LABEL_516:
        v310 += 2;
      }
      v326 = **(_QWORD ***)(v276 + 40);
      v454 = 0u;
      v455 = 0u;
      v452 = 0u;
      v453 = 0u;
      v451 = 0u;
      memset(buf, 0, sizeof(buf));
      if (!v326[5])
      {
        v338 = v326 + 7;
        if (!v326[7])
          goto LABEL_568;
        v328 = 0;
        v329 = 0;
LABEL_558:
        v339 = 0;
        v340 = 0;
        while (2)
        {
          v341 = (unsigned __int8 *)(v326[6] + v339);
          v342 = *v341;
          v343 = v341[1];
          if (v329)
          {
            if (v329 > 0xF || v328 + v329 != v343)
            {
              objc_msgSend(v421, "setBuffers:offsets:withRange:", buf, &v447, v328, v329);
              v329 = 0;
              goto LABEL_563;
            }
          }
          else
          {
LABEL_563:
            v328 = v343;
          }
          v344 = *(_QWORD *)(v425[5] + 16 * v342);
          v345 = *(void **)(*(_QWORD *)(*(_QWORD *)(v344 + 24) + 24) + 32);
          v346 = v345;
          objc_storeStrong((id *)&buf[v329], v345);
          v347 = v428;
          if (*(_DWORD *)(v344 + 112) <= 1u)
            v347 = 0;
          *((_QWORD *)&v447 + v329) = *(_QWORD *)(v344 + 40) + (_QWORD)v347 * *(_QWORD *)(v344 + 120);

          ++v329;
          ++v340;
          v339 += 2;
          if (v340 >= *v338)
            goto LABEL_567;
          continue;
        }
      }
      v327 = 0;
      v328 = 0;
      v329 = 0;
      v330 = 0;
      do
      {
        v331 = (unsigned __int8 *)(v326[4] + v327);
        v332 = *v331;
        v333 = v331[1];
        if (!v329)
          goto LABEL_550;
        if (v329 > 0xF || v328 + v329 != v333)
        {
          objc_msgSend(v421, "setBuffers:offsets:withRange:", buf, &v447, v328, v329);
          v329 = 0;
LABEL_550:
          v328 = v333;
        }
        v334 = *(_QWORD *)(v425[1] + 16 * v332);
        v335 = *(void **)(*(_QWORD *)(*(_QWORD *)(v334 + 24) + 24) + 32);
        v336 = v335;
        objc_storeStrong((id *)&buf[v329], v335);
        v337 = v428;
        if (*(_DWORD *)(v334 + 112) <= 1u)
          v337 = 0;
        *((_QWORD *)&v447 + v329) = *(_QWORD *)(v334 + 40) + (_QWORD)v337 * *(_QWORD *)(v334 + 120);

        ++v329;
        ++v330;
        v327 += 2;
      }
      while (v330 < v326[5]);
      v338 = v326 + 7;
      if (v326[7])
        goto LABEL_558;
LABEL_567:
      objc_msgSend(v421, "setBuffers:offsets:withRange:", buf, &v447, v328, v329);
LABEL_568:
      if (v326[9])
      {
        v348 = 0;
        while (2)
        {
          v349 = (unsigned __int8 *)(v326[8] + 2 * v348);
          v350 = *v349;
          v351 = v349[1];
          v352 = *(unsigned __int8 *)(v326[10] + 2 * v348 + 1);
          if (*(_QWORD *)(v425[9] + 8 * v350))
            v353 = *(const ggl::Texture **)(v425[9] + 8 * v350);
          else
            v353 = v413;
          v354 = (ggl::MetalTextureResource *)*((_QWORD *)v353 + 3);
          if (!v354)
            v354 = ggl::MetalResourceManager::prepareTexture((std::__shared_weak_count **)v418, v353, v273);
          v355 = (unint64_t *)((char *)v354 + 16);
          v356 = atomic_load((unint64_t *)v354 + 2);
          if (v356 < v273)
          {
            do
            {
              v359 = __ldaxr(v355);
              if (v359 == v356)
              {
                if (!__stlxr(v273, v355))
                  break;
              }
              else
              {
                __clrex();
              }
              v356 = v359;
            }
            while (v359 < v273);
          }
          SamplerStateResource = ggl::MetalResourceManager::getSamplerStateResource(v418, v353);
          if (!SamplerStateResource)
            goto LABEL_570;
          if (*((_BYTE *)v354 + 120) == 1)
          {
            v358 = (id *)(*((_QWORD *)v354 + 4) + 8 * *((unsigned int *)v354 + 16));
LABEL_587:
            v353 = (const ggl::Texture *)*v358;
          }
          else if (!*((_BYTE *)v354 + 120))
          {
            v358 = (id *)*((_QWORD *)v354 + 4);
            goto LABEL_587;
          }
          objc_msgSend(v421, "setTexture:atIndex:", v353, v351);
          v360 = (unint64_t *)(SamplerStateResource + 16);
          v361 = atomic_load((unint64_t *)(SamplerStateResource + 16));
          if (v361 < v273)
          {
            do
            {
              v363 = __ldaxr(v360);
              if (v363 == v361)
              {
                if (!__stlxr(v273, v360))
                  break;
              }
              else
              {
                __clrex();
              }
              v361 = v363;
            }
            while (v363 < v273);
          }
          v362 = *(id *)(SamplerStateResource + 32);
          objc_msgSend(v421, "setSamplerState:atIndex:", v362, v352);

LABEL_570:
          if ((unint64_t)++v348 >= v326[9])
            break;
          continue;
        }
      }
      v364 = *(unsigned int *)(v410 + 24);
      v365 = HIDWORD(*(_QWORD *)(v410 + 16));
      v366 = *(unsigned int *)(v410 + 36);
      v367 = *(_QWORD *)(v410 + 28);
      v368 = HIDWORD(*(_QWORD *)(v410 + 28));
      v437 = *(_QWORD *)(v410 + 16);
      v438 = v365;
      v439 = v364;
      v434 = v367;
      v435 = v368;
      v436 = v366;
      objc_msgSend(v421, "dispatchThreadgroups:threadsPerThreadgroup:", &v437, &v434);

      v275 = v409 + 1;
      v272 = v407;
    }
    while (v409 + 1 != v405);
  }

  v262 = v430;
LABEL_602:
  if (v404 != v403)
  {
    *(_BYTE *)(*((_QWORD *)v416 + 5) + 50) = 1;
    v371 = *((_QWORD *)v416 + 6);
    v372 = *(void **)(v371 + 104);
    if (v372)
    {
      objc_msgSend(v372, "updateFence:", *(_QWORD *)(v371 + 88));
      objc_msgSend(*(id *)(v371 + 104), "endEncoding");
      v373 = *(void **)(v371 + 104);
      *(_QWORD *)(v371 + 104) = 0;

    }
    v374 = *(void **)(v371 + 96);
    if (v374)
    {
      objc_msgSend(v374, "updateFence:afterStages:", *(_QWORD *)(v371 + 88), 2);
      v376 = *(void **)(v371 + 96);
      v375 = (void **)(v371 + 96);
      objc_msgSend(v376, "endEncoding");
      v377 = *v375;
      *v375 = 0;

    }
    v378 = (uint64_t *)*((_QWORD *)v262 + 5);
    v379 = (uint64_t *)*((_QWORD *)v262 + 6);
    if (v378 != v379)
    {
      v380 = *(std::__shared_weak_count ***)(*((_QWORD *)v416 + 2) + 80);
      do
      {
        v381 = *v378;
        v382 = *(_QWORD *)(*v378 + 40);
        v383 = *(_QWORD *)(*v378 + 16);
        v384 = *(_QWORD *)(*v378 + 24);
        v385 = v384 - v383;
        if (v384 == v383)
        {
          v396 = 0;
          v390 = 0;
          v387 = 0;
        }
        else
        {
          if (v385 < 0)
            abort();
          v386 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)v382 + 16))(*(_QWORD *)(*v378 + 40), v384 - v383, 8);
          v387 = v386;
          v388 = 0;
          do
          {
            if (v386 + v388)
              *(_QWORD *)(v386 + v388) = *(_QWORD *)(v383 + v388);
            v388 += 8;
          }
          while (v383 + v388 != v384);
          v389 = v386 + v388;
          v390 = v386 + 8 * (v385 >> 3);
          v391 = v389 - v386;
          if (v389 != v386)
          {
            v392 = 0;
            v393 = 0;
            v394 = v391 >> 3;
            do
            {
              v395 = ggl::MetalResourceManager::prepareTexture(v380, *(const ggl::Texture **)(v387 + 8 * v392), *(_QWORD *)(*((_QWORD *)v416 + 5) + 40));
              (*(void (**)(uint64_t, ggl::MetalTextureResource *, _QWORD))(*(_QWORD *)v381 + 24))(v381, v395, v393++);
              v392 = v393;
            }
            while (v394 > v393);
          }
          v396 = v387;
        }
        v397 = *((_QWORD *)v416 + 2);
        v398 = *(id *)(*((_QWORD *)v416 + 5) + 120);
        (*(void (**)(uint64_t, uint64_t, id))(*(_QWORD *)v381 + 16))(v381, v397, v398);

        if (v387)
          (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v382 + 40))(v382, v387, v390 - v396);
        ++v378;
      }
      while (v378 != v379);
    }
  }
  if (GEOGetGeoGLPerformanceDetailLog_onceToken != -1)
    dispatch_once(&GEOGetGeoGLPerformanceDetailLog_onceToken, &__block_literal_global_7_40484);
  v399 = (id)GEOGetGeoGLPerformanceDetailLog_log;
  v194 = v399;
  v195 = v429;
  if (v429 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v399))
  {
LABEL_627:
    v400 = *((_QWORD *)v430 + 1);
    v401 = *((_QWORD *)v416 + 7);
    LODWORD(buf[0]) = 136315394;
    *(_QWORD *)((char *)buf + 4) = v400;
    WORD2(buf[1]) = 2048;
    *(_QWORD *)((char *)&buf[1] + 6) = v401;
    _os_signpost_emit_with_name_impl(&dword_19F029000, v194, OS_SIGNPOST_INTERVAL_END, v195, "ProcessCommandBuffer", "category=%s parent_signpost=%llu", (uint8_t *)buf, 0x16u);
  }
LABEL_628:

}

void sub_19F0D3A64(_Unwind_Exception *a1)
{
  uint64_t v1;

  geo::ScopedFunctions::~ScopedFunctions((geo::ScopedFunctions *)(v1 - 240));
  _Unwind_Resume(a1);
}

void sub_19F0D3A78(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  uint64_t v31;
  _QWORD *v33;
  uint64_t v34;

  v33 = *(_QWORD **)(v31 - 216);
  if (v33 == (_QWORD *)(v31 - 240))
  {
    v34 = 4;
    v33 = (_QWORD *)(v31 - 240);
  }
  else
  {
    if (!v33)
      _Unwind_Resume(exception_object);
    v34 = 5;
  }
  (*(void (**)(void))(*v33 + 8 * v34))();
  _Unwind_Resume(exception_object);
}

void std::__function::__func<ggl::MetalDeviceContext::processBuffer(ggl::CommandBuffer *)::$_1,std::allocator<ggl::MetalDeviceContext::processBuffer(ggl::CommandBuffer *)::$_1>,void ()(void)>::operator()(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  os_signpost_id_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  if (GEOGetGeoGLPerformanceDetailLog_onceToken != -1)
    dispatch_once(&GEOGetGeoGLPerformanceDetailLog_onceToken, &__block_literal_global_7_40484);
  v2 = (id)GEOGetGeoGLPerformanceDetailLog_log;
  v3 = v2;
  v4 = **(_QWORD **)(a1 + 8);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    v5 = *(_QWORD *)(**(_QWORD **)(a1 + 16) + 8);
    v6 = 136315138;
    v7 = v5;
    _os_signpost_emit_with_name_impl(&dword_19F029000, v3, OS_SIGNPOST_INTERVAL_END, v4, "EncodeRenderItems", "category=%s", (uint8_t *)&v6, 0xCu);
  }

}

__n128 std::__function::__func<ggl::MetalDeviceContext::processBuffer(ggl::CommandBuffer *)::$_1,std::allocator<ggl::MetalDeviceContext::processBuffer(ggl::CommandBuffer *)::$_1>,void ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E42D7EE0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<ggl::MetalDeviceContext::processBuffer(ggl::CommandBuffer *)::$_0,std::allocator<ggl::MetalDeviceContext::processBuffer(ggl::CommandBuffer *)::$_0>,void ()(void)>::operator()(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  os_signpost_id_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  if (GEOGetGeoGLPerformanceDetailLog_onceToken != -1)
    dispatch_once(&GEOGetGeoGLPerformanceDetailLog_onceToken, &__block_literal_global_7_40484);
  v2 = (id)GEOGetGeoGLPerformanceDetailLog_log;
  v3 = v2;
  v4 = **(_QWORD **)(a1 + 8);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    v5 = *(_QWORD *)(**(_QWORD **)(a1 + 16) + 8);
    v6 = 136315138;
    v7 = v5;
    _os_signpost_emit_with_name_impl(&dword_19F029000, v3, OS_SIGNPOST_INTERVAL_BEGIN, v4, "EncodeRenderItems", "category=%s", (uint8_t *)&v6, 0xCu);
  }

}

_QWORD *ggl::RenderItem::gatherTextureLoadItems(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v3;
  _QWORD *result;
  uint64_t v5;
  unint64_t v8;
  _OWORD *v9;
  uint64_t *v10;
  NSObject *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  __n128 v19;
  uint64_t *v20;
  _QWORD *v21;
  _BYTE *v22;
  uint64_t v23;
  BOOL v24;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  int v33;
  unint64_t v34;
  const double *v35;
  int8x16_t v36;
  uint64_t v37;
  int8x16_t v38;
  const double *v39;
  unsigned __int128 v40;
  const double *v41;
  unsigned __int128 v42;
  const double *v43;
  unsigned __int128 v44;
  const double *v45;
  unsigned __int128 v46;
  const double *v47;
  unsigned __int128 v48;
  const double *v49;
  unsigned __int128 v50;
  const double *v51;
  unsigned __int128 v52;
  const double *v53;
  unsigned __int128 v54;
  const double *v55;
  unsigned __int128 v56;
  const double *v57;
  unsigned __int128 v58;
  const double *v59;
  unsigned __int128 v60;
  const double *v61;
  unsigned __int128 v62;
  int8x16_t v63;
  const double *v64;
  unsigned __int128 v65;
  const double *v66;
  int16x8_t v67;
  unsigned __int128 v68;
  const double *v69;
  int8x16_t v70;
  int32x4_t v71;
  unsigned __int128 v72;
  int16x8_t v73;
  unsigned __int128 v74;
  uint64_t v75;
  uint64_t v76;
  const double *v77;
  int8x8_t v78;
  uint64_t v79;
  const double *v80;
  unsigned __int128 v81;
  unsigned __int128 v82;
  const double *v83;
  unsigned __int128 v84;
  const double *v85;
  unsigned __int128 v86;
  uint64_t v87;
  uint64_t *v88;
  uint64_t v89;
  uint64_t v90;
  _QWORD *v91;
  uint64_t v92;
  uint64_t v93;
  unint64_t v94;
  _QWORD *v95;
  _QWORD *v96;
  uint64_t v97;
  unint64_t v98;
  unint64_t v99;
  unint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  _QWORD *v104;
  uint64_t v105;
  _QWORD *v106;
  unint64_t v107;
  _QWORD *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  unint64_t v112;
  _QWORD *v113;
  unint64_t v114;
  _QWORD *v115;
  unint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  _QWORD *v120;
  _QWORD *v121;
  _QWORD *v122;
  uint64_t v123;
  uint64_t v124;
  unint64_t v125;
  _OWORD *v126;
  uint64_t *v127;
  _OWORD *v128;
  uint64_t v129;
  int v130;
  uint64_t v131;
  uint64_t v132;
  _BYTE buf[22];
  __int16 v134;
  _QWORD v135[3];
  uint64_t v136;
  uint64_t *v137;
  _BYTE v138[24];
  _BYTE *v139;
  uint64_t v140;

  v3 = a1;
  v140 = *MEMORY[0x1E0C80C00];
  result = *(_QWORD **)(a1 + 32);
  if (result)
  {
    v5 = result[12];
    if (v5 != result[13])
    {
      v8 = 0;
      v9 = (_OWORD *)((char *)v135 + 4);
      v10 = &v136;
      v11 = MEMORY[0x1E0C81028];
      while (1)
      {
        v14 = *(_QWORD *)(v5 + 8 * v8);
        if (!v14 || !(*(unsigned int (**)(_QWORD *, unint64_t))(*result + 24))(result, v8))
          goto LABEL_7;
        if (*(_QWORD *)(v14 + 24) == 3735927469 && os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
        {
          v124 = *(_QWORD *)(v3 + 16);
          *(_DWORD *)buf = 134218498;
          *(_QWORD *)&buf[4] = v14;
          *(_WORD *)&buf[12] = 2080;
          *(_QWORD *)&buf[14] = v124;
          v134 = 1024;
          LODWORD(v135[0]) = a3;
          _os_log_error_impl(&dword_19F029000, v11, OS_LOG_TYPE_ERROR, "Detected stale texture resource %p in render item %s within command buffer %d Please file a radar!", buf, 0x1Cu);
        }
        v15 = *(_DWORD *)(v14 + 56);
        if (v15 == 3)
        {
          if (*(_QWORD *)(v14 + 96))
            v24 = *(_QWORD *)(v14 + 112) == 0;
          else
            v24 = 1;
          v28 = v24
             || *(_QWORD *)(v14 + 128) == 0
             || *(_QWORD *)(v14 + 144) == 0
             || *(_QWORD *)(v14 + 160) == 0
             || *(_QWORD *)(v14 + 176) == 0;
          if (v28 || *(_BYTE *)(v14 + 193))
            goto LABEL_7;
          ggl::TextureCube::vendImplicitLoadItems((_QWORD *)v14, (uint64_t *)a2);
          v22 = (_BYTE *)(v14 + 193);
          goto LABEL_6;
        }
        if (v15 == 2)
          break;
        if (v15 != 1)
          goto LABEL_7;
        v16 = *(_QWORD *)(v14 + 112);
        if (!v16 || *(_BYTE *)(v14 + 129))
          goto LABEL_7;
        v17 = *(_QWORD *)(v14 + 80);
        v18 = operator new(0x20uLL);
        *v18 = &off_1E42C6DE0;
        v18[1] = ggl::Texture2D::onImplicitLoadComplete;
        v18[2] = 0;
        v18[3] = v14;
        v139 = v18;
        *(_QWORD *)buf = v16;
        *(_QWORD *)&buf[8] = v14;
        buf[16] = 0;
        buf[20] = 0;
        *(_QWORD *)((char *)v135 + 4) = 0;
        *(_QWORD *)((char *)&v135[1] + 4) = v17;
        v19 = std::__function::__func<std::__bind<void (ggl::Texture2D::*)(ggl::Texture2DLoadItem const&),ggl::Texture2D*,std::placeholders::__ph<1> const&>,std::allocator<std::__bind<void (ggl::Texture2D::*)(ggl::Texture2DLoadItem const&),ggl::Texture2D*,std::placeholders::__ph<1> const&>>,void ()(ggl::Texture2DLoadItem const&)>::__clone((uint64_t)v18);
        v137 = v20;
        v21 = v139;
        if (v139 == v138)
        {
          v21 = v138;
          v23 = 4;
          v22 = (_BYTE *)(v14 + 129);
          v11 = MEMORY[0x1E0C81028];
        }
        else
        {
          v22 = (_BYTE *)(v14 + 129);
          v11 = MEMORY[0x1E0C81028];
          if (!v139)
            goto LABEL_122;
          v23 = 5;
        }
        (*(void (**)(__n128))(*v21 + 8 * v23))(v19);
LABEL_122:
        v125 = *(_QWORD *)(a2 + 8);
        if (v125 >= *(_QWORD *)(a2 + 16))
        {
          v126 = std::vector<ggl::Texture2DLoadItem,geo::StdAllocator<ggl::Texture2DLoadItem,ggl::Allocator>>::__emplace_back_slow_path<ggl::Texture2DLoadItem>((uint64_t *)a2, (uint64_t)buf);
        }
        else
        {
          if (!v125)
            goto LABEL_131;
          *(_OWORD *)v125 = *(_OWORD *)buf;
          *(_BYTE *)(v125 + 16) = 0;
          if (buf[16])
          {
            *(_BYTE *)(v125 + 17) = buf[17];
            *(_BYTE *)(v125 + 16) = 1;
          }
          *(_BYTE *)(v125 + 20) = 0;
          if (buf[20])
          {
            *(_DWORD *)(v125 + 24) = v135[0];
            *(_BYTE *)(v125 + 20) = 1;
          }
          *(_OWORD *)(v125 + 28) = *v9;
          if (v137)
          {
            if (v137 != v10)
            {
              *(_QWORD *)(v125 + 72) = v137;
              v137 = 0;
LABEL_131:
              v126 = (_OWORD *)(v125 + 80);
              goto LABEL_133;
            }
            *(_QWORD *)(v125 + 72) = v125 + 48;
            (*(void (**)(uint64_t *))(*v137 + 24))(v137);
            v126 = (_OWORD *)(v125 + 80);
          }
          else
          {
            *(_QWORD *)(v125 + 72) = 0;
            v126 = (_OWORD *)(v125 + 80);
          }
        }
LABEL_133:
        *(_QWORD *)(a2 + 8) = v126;
        v12 = v137;
        if (v137 == v10)
        {
          v12 = v10;
          v13 = 4;
        }
        else
        {
          if (!v137)
            goto LABEL_6;
          v13 = 5;
        }
        (*(void (**)(void))(*v12 + 8 * v13))();
LABEL_6:
        *v22 = 1;
LABEL_7:
        ++v8;
        result = *(_QWORD **)(v3 + 32);
        v5 = result[12];
        if (v8 >= (result[13] - v5) >> 3)
          return result;
      }
      v29 = *(unsigned int *)(v14 + 88);
      if (!(_DWORD)v29)
      {
        v33 = *(unsigned __int8 *)(v14 + 129);
        v22 = (_BYTE *)(v14 + 129);
        if (v33)
          goto LABEL_7;
        goto LABEL_6;
      }
      v30 = *(_QWORD *)(v14 + 96);
      if (v29 < 9)
      {
        v31 = 0;
        LOBYTE(v32) = 1;
        goto LABEL_56;
      }
      if (v29 < 0x21)
      {
        v31 = 0;
        LOBYTE(v32) = 1;
        goto LABEL_51;
      }
      v34 = 32;
      if ((v29 & 0x1F) != 0)
        v34 = v29 & 0x1F;
      v31 = v29 - v34;
      v35 = (const double *)(v30 + 256);
      v36.i64[0] = 0x101010101010101;
      v36.i64[1] = 0x101010101010101;
      v37 = *(unsigned int *)(v14 + 88);
      v38.i64[0] = 0x101010101010101;
      v38.i64[1] = 0x101010101010101;
      do
      {
        v39 = v35 - 32;
        v40 = (unsigned __int128)vld2q_f64(v39);
        v41 = v35 - 28;
        v42 = (unsigned __int128)vld2q_f64(v41);
        v43 = v35 - 24;
        v44 = (unsigned __int128)vld2q_f64(v43);
        v45 = v35 - 20;
        v46 = (unsigned __int128)vld2q_f64(v45);
        v47 = v35 - 16;
        v48 = (unsigned __int128)vld2q_f64(v47);
        v49 = v35 - 12;
        v50 = (unsigned __int128)vld2q_f64(v49);
        v51 = v35 - 8;
        v52 = (unsigned __int128)vld2q_f64(v51);
        v53 = v35 - 4;
        v54 = (unsigned __int128)vld2q_f64(v53);
        v55 = v35;
        v56 = (unsigned __int128)vld2q_f64(v55);
        v55 += 4;
        v57 = v35 + 20;
        v58 = (unsigned __int128)vld2q_f64(v57);
        v59 = v35 + 24;
        v60 = (unsigned __int128)vld2q_f64(v59);
        v61 = v35 + 28;
        v62 = (unsigned __int128)vld2q_f64(v61);
        v63 = vuzp1q_s8(vmvnq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vceqzq_s64((int64x2_t)v40), (int32x4_t)vceqzq_s64((int64x2_t)v42)), (int16x8_t)vuzp1q_s32((int32x4_t)vceqzq_s64((int64x2_t)v44), (int32x4_t)vceqzq_s64((int64x2_t)v46)))), vmvnq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vceqzq_s64((int64x2_t)v48), (int32x4_t)vceqzq_s64((int64x2_t)v50)), (int16x8_t)vuzp1q_s32((int32x4_t)vceqzq_s64((int64x2_t)v52), (int32x4_t)vceqzq_s64((int64x2_t)v54)))));
        v64 = v35 + 16;
        v65 = (unsigned __int128)vld2q_f64(v64);
        v66 = v35 + 12;
        v67 = (int16x8_t)vuzp1q_s32((int32x4_t)vceqzq_s64((int64x2_t)v65), (int32x4_t)vceqzq_s64((int64x2_t)v58));
        v68 = (unsigned __int128)vld2q_f64(v66);
        v69 = v35 + 8;
        v70 = (int8x16_t)vuzp1q_s16(v67, (int16x8_t)vuzp1q_s32((int32x4_t)vceqzq_s64((int64x2_t)v60), (int32x4_t)vceqzq_s64((int64x2_t)v62)));
        v71 = (int32x4_t)vceqzq_s64((int64x2_t)v68);
        v72 = (unsigned __int128)vld2q_f64(v69);
        v73 = (int16x8_t)vuzp1q_s32((int32x4_t)vceqzq_s64((int64x2_t)v72), v71);
        v74 = (unsigned __int128)vld2q_f64(v55);
        v36 = vandq_s8(v36, v63);
        v38 = vandq_s8(v38, vuzp1q_s8(vmvnq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vceqzq_s64((int64x2_t)v56), (int32x4_t)vceqzq_s64((int64x2_t)v74)), v73)), vmvnq_s8(v70)));
        v37 -= 32;
        v35 += 64;
      }
      while (v34 != v37);
      LOBYTE(v32) = vminvq_u8((uint8x16_t)vcltzq_s8(vshlq_n_s8(vandq_s8(v38, v36), 7uLL)));
      if (v34 >= 9)
      {
LABEL_51:
        v75 = 8;
        if ((v29 & 7) != 0)
          v75 = v29 & 7;
        v76 = v75 + v31;
        v77 = (const double *)(v30 + 16 * v31);
        v31 = v29 - v75;
        v78 = (int8x8_t)-1;
        v78.i8[0] = v32;
        v79 = v76 - v29;
        do
        {
          v80 = v77;
          v81 = (unsigned __int128)vld2q_f64(v80);
          v80 += 4;
          v82 = (unsigned __int128)vld2q_f64(v80);
          v83 = v77 + 8;
          v84 = (unsigned __int128)vld2q_f64(v83);
          v85 = v77 + 12;
          v86 = (unsigned __int128)vld2q_f64(v85);
          v78 = vand_s8(v78, vmovn_s16((int16x8_t)vmvnq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vceqzq_s64((int64x2_t)v81), (int32x4_t)vceqzq_s64((int64x2_t)v82)), (int16x8_t)vuzp1q_s32((int32x4_t)vceqzq_s64((int64x2_t)v84), (int32x4_t)vceqzq_s64((int64x2_t)v86))))));
          v77 += 16;
          v79 += 8;
        }
        while (v79);
        LOBYTE(v32) = vminv_u8((uint8x8_t)vcltz_s8(vshl_n_s8(v78, 7uLL)));
      }
LABEL_56:
      v87 = v29 - v31;
      v88 = (uint64_t *)(v30 + 16 * v31);
      do
      {
        v89 = *v88;
        v88 += 2;
        v32 = v32 & (v89 != 0);
        --v87;
      }
      while (v87);
      if (!v32 || *(_BYTE *)(v14 + 129))
        goto LABEL_7;
      v127 = v10;
      v128 = v9;
      v129 = v3;
      v130 = a3;
      v90 = 0;
      v91 = *(_QWORD **)(a2 + 8);
      v131 = a2;
      while (2)
      {
        v92 = *(_QWORD *)(*(_QWORD *)(v14 + 96) + 16 * v90);
        v93 = *(_QWORD *)(v14 + 80);
        v94 = *(_QWORD *)(a2 + 16);
        if ((unint64_t)v91 < v94)
        {
          if (v91)
          {
            v95 = operator new(0x20uLL);
            *v95 = &off_1E42C6D98;
            v95[1] = ggl::Texture2DArray::onImplicitLoadComplete;
            v95[2] = 0;
            v95[3] = v14;
            v135[0] = v95;
            *v91 = v92;
            v91[1] = v14;
            *((_BYTE *)v91 + 16) = 0;
            *((_BYTE *)v91 + 20) = 1;
            *((_DWORD *)v91 + 6) = v90;
            *(_QWORD *)((char *)v91 + 28) = 0;
            *(_QWORD *)((char *)v91 + 36) = v93;
            if (v135[0])
            {
              v91[9] = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v135[0] + 16))(v135[0]);
              v96 = (_QWORD *)v135[0];
              if ((_BYTE *)v135[0] == buf)
              {
                v96 = buf;
                v97 = 4;
LABEL_84:
                (*(void (**)(void))(*v96 + 8 * v97))();
              }
              else if (v135[0])
              {
                v97 = 5;
                goto LABEL_84;
              }
            }
            else
            {
              v91[9] = 0;
            }
          }
          v91 += 10;
LABEL_63:
          *(_QWORD *)(a2 + 8) = v91;
          if (++v90 >= (unint64_t)*(unsigned int *)(v14 + 88))
          {
            a3 = v130;
            v9 = v128;
            v3 = v129;
            v10 = v127;
            v11 = MEMORY[0x1E0C81028];
            v22 = (_BYTE *)(v14 + 129);
            goto LABEL_6;
          }
          continue;
        }
        break;
      }
      v98 = 0xCCCCCCCCCCCCCCCDLL * (((uint64_t)v91 - *(_QWORD *)a2) >> 4);
      v99 = v98 + 1;
      if (v98 + 1 > 0x333333333333333)
        abort();
      v100 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v94 - *(_QWORD *)a2) >> 4);
      if (2 * v100 > v99)
        v99 = 2 * v100;
      if (v100 >= 0x199999999999999)
        v101 = 0x333333333333333;
      else
        v101 = v99;
      if (v101)
      {
        v102 = 80 * v101;
        v103 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a2 + 24) + 16))(*(_QWORD *)(a2 + 24), 80 * v101, 8);
        v104 = (_QWORD *)(v103 + 80 * v98);
        v132 = v103 + v102;
        if (v103)
        {
          v105 = v103;
          v106 = operator new(0x20uLL);
          *v106 = &off_1E42C6D98;
          v106[1] = ggl::Texture2DArray::onImplicitLoadComplete;
          v106[2] = 0;
          v106[3] = v14;
          v135[0] = v106;
          *v104 = v92;
          v107 = v105 + 80 * v98;
          *(_QWORD *)(v107 + 8) = v14;
          *(_BYTE *)(v107 + 16) = 0;
          *(_BYTE *)(v107 + 20) = 1;
          *(_DWORD *)(v107 + 24) = v90;
          *(_QWORD *)(v107 + 28) = 0;
          *(_QWORD *)(v107 + 36) = v93;
          if (v135[0])
          {
            a2 = v131;
            if ((_BYTE *)v135[0] == buf)
            {
              *(_QWORD *)(v105 + 80 * v98 + 72) = v107 + 48;
              (*(void (**)(_QWORD))(*(_QWORD *)v135[0] + 24))(v135[0]);
            }
            else
            {
              *(_QWORD *)(v105 + 80 * v98 + 72) = (*(uint64_t (**)(void))(*(_QWORD *)v135[0] + 16))();
            }
          }
          else
          {
            *(_QWORD *)(v105 + 80 * v98 + 72) = 0;
            a2 = v131;
          }
          v108 = (_QWORD *)v135[0];
          if ((_BYTE *)v135[0] == buf)
          {
            v108 = buf;
            v109 = 4;
LABEL_91:
            (*(void (**)(void))(*v108 + 8 * v109))();
          }
          else if (v135[0])
          {
            v109 = 5;
            goto LABEL_91;
          }
        }
        else
        {
          a2 = v131;
        }
      }
      else
      {
        v132 = 0;
        v104 = (_QWORD *)(16 * (((uint64_t)v91 - *(_QWORD *)a2) >> 4));
      }
      v91 = v104 + 10;
      v110 = *(_QWORD *)a2;
      v111 = *(_QWORD *)(a2 + 8);
      if (v111 == *(_QWORD *)a2)
      {
        *(_QWORD *)a2 = v104;
        *(_QWORD *)(a2 + 8) = v91;
        v119 = *(_QWORD *)(a2 + 16);
        *(_QWORD *)(a2 + 16) = v132;
      }
      else
      {
        v112 = 0;
        do
        {
          v113 = &v104[v112 / 8];
          v114 = v111 + v112;
          *((_OWORD *)v113 - 5) = *(_OWORD *)(v111 + v112 - 80);
          *((_BYTE *)v113 - 64) = 0;
          if (*(_BYTE *)(v111 + v112 - 64))
          {
            *((_BYTE *)v113 - 63) = *(_BYTE *)(v114 - 63);
            *((_BYTE *)v113 - 64) = 1;
          }
          *((_BYTE *)v113 - 60) = 0;
          if (*(_BYTE *)(v114 - 60))
          {
            LODWORD(v104[v112 / 8 - 7]) = *(_DWORD *)(v111 + v112 - 56);
            *((_BYTE *)v113 - 60) = 1;
          }
          v115 = &v104[v112 / 8];
          v116 = v111 + v112;
          *(_OWORD *)((char *)&v104[v112 / 8 - 6] - 4) = *(_OWORD *)(v111 + v112 - 52);
          v117 = *(_QWORD *)(v111 + v112 - 8);
          if (v117)
          {
            if (v116 - 32 == v117)
            {
              *(v115 - 1) = v115 - 4;
              (*(void (**)(_QWORD))(**(_QWORD **)(v116 - 8) + 24))(*(_QWORD *)(v116 - 8));
            }
            else
            {
              *(v115 - 1) = v117;
              *(_QWORD *)(v116 - 8) = 0;
            }
          }
          else
          {
            *(v115 - 1) = 0;
          }
          v112 -= 80;
        }
        while (v111 + v112 != v110);
        v111 = *(_QWORD *)a2;
        v118 = *(_QWORD *)(a2 + 8);
        *(_QWORD *)a2 = &v104[v112 / 8];
        *(_QWORD *)(a2 + 8) = v91;
        v119 = *(_QWORD *)(a2 + 16);
        *(_QWORD *)(a2 + 16) = v132;
        if (v118 != v111)
        {
          v120 = (_QWORD *)(v118 - 32);
          while (1)
          {
            v122 = (_QWORD *)v120[3];
            if (v120 == v122)
              break;
            if (v122)
            {
              v123 = 5;
LABEL_111:
              (*(void (**)(void))(*v122 + 8 * v123))();
            }
            if (*((_BYTE *)v120 - 28))
              *((_BYTE *)v120 - 28) = 0;
            if (*((_BYTE *)v120 - 32))
              *((_BYTE *)v120 - 32) = 0;
            v121 = v120 - 6;
            v120 -= 10;
            if (v121 == (_QWORD *)v111)
              goto LABEL_117;
          }
          v122 = v120;
          v123 = 4;
          goto LABEL_111;
        }
      }
LABEL_117:
      if (v111)
        (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a2 + 24) + 40))(*(_QWORD *)(a2 + 24), v111, v119 - v111);
      goto LABEL_63;
    }
  }
  return result;
}

_QWORD *ggl::RenderItem::gatherBufferLoadItems(_QWORD *result, uint64_t *a2, ggl::Device *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  _QWORD *v10;
  std::mutex **v11;
  std::mutex **v12;
  uint64_t v13;
  std::mutex *v14;
  std::mutex *v15;
  uint64_t v16;
  int64x2_t v17;
  int64x2_t v18;
  uint64_t v19;
  unint64_t v20;
  int64x2_t v21;
  _OWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int64x2_t v26;
  int64x2_t v27;
  uint64_t v28;
  unint64_t v29;
  int64x2_t v30;
  _OWORD *v31;
  uint64_t v32;
  uint64_t v33;
  std::mutex **v34;
  std::mutex **v35;
  uint64_t v36;
  std::mutex *v37;
  std::mutex *v38;
  uint64_t v39;
  int64x2_t v40;
  int64x2_t v41;
  uint64_t v42;
  unint64_t v43;
  int64x2_t v44;
  _OWORD *v45;
  __int128 v46;
  int64x2_t v47;
  _BYTE v48[24];
  _BYTE *v49;
  uint64_t v50;

  v9 = (uint64_t)result;
  v50 = *MEMORY[0x1E0C80C00];
  v10 = (_QWORD *)result[8];
  if (!v10)
    goto LABEL_62;
  v12 = (std::mutex **)v10[8];
  v11 = (std::mutex **)v10[9];
  if (v11 == v12 || !*v12)
    goto LABEL_35;
  do
  {
    v14 = *v12;
    if ((*v12)->__m_.__opaque[10] == 1 && v14[3].__m_.__sig != a4 && *(_DWORD *)&v14[1].__m_.__opaque[40])
    {
      v14[3].__m_.__sig = a4;
      *(_OWORD *)&v14->__m_.__opaque[48] = *(_OWORD *)&v14->__m_.__opaque[32];
    }
    if (v14[1].__m_.__sig == *(_QWORD *)&v14->__m_.__opaque[48])
      goto LABEL_7;
    v15 = *v12;
    if (!*(_QWORD *)&(*v12)->__m_.__opaque[16])
      ggl::BufferData::prepareBufferForDevice(*v12, a3, 0);
    if (v15->__m_.__opaque[10] == 1 && v15[3].__m_.__sig != a4 && *(_DWORD *)&v15[1].__m_.__opaque[40])
    {
      v15[3].__m_.__sig = a4;
      *(_OWORD *)&v15->__m_.__opaque[48] = *(_OWORD *)&v15->__m_.__opaque[32];
    }
    if (*(_DWORD *)&v15[1].__m_.__opaque[40] <= 1u)
      v16 = 0;
    else
      v16 = a5;
    v17 = *(int64x2_t *)&v15->__m_.__opaque[48];
    v18 = vaddq_s64(vdupq_n_s64(v16 * *(_QWORD *)&v15[1].__m_.__opaque[48]), v17);
    *(_QWORD *)&v15->__m_.__opaque[48] = 0;
    v15[1].__m_.__sig = 0;
    v19 = *(_QWORD *)&v15->__m_.__opaque[16];
    *(_QWORD *)&v46 = *(_QWORD *)v15[1].__m_.__opaque + v17.i64[0];
    *((_QWORD *)&v46 + 1) = v19;
    v47 = v18;
    v49 = 0;
    v20 = a2[1];
    if (v20 >= a2[2])
    {
      v22 = std::vector<ggl::BufferLoadItem,geo::StdAllocator<ggl::BufferLoadItem,ggl::Allocator>>::__emplace_back_slow_path<ggl::BufferLoadItem&>(a2, (uint64_t)&v46);
    }
    else
    {
      if (v20)
      {
        v21 = v47;
        *(_OWORD *)v20 = v46;
        *(int64x2_t *)(v20 + 16) = v21;
        if (!v49)
        {
          *(_QWORD *)(v20 + 56) = 0;
          v22 = (_OWORD *)(v20 + 64);
          goto LABEL_29;
        }
        if (v49 == v48)
        {
          *(_QWORD *)(v20 + 56) = v20 + 32;
          (*(void (**)(_BYTE *))(*(_QWORD *)v49 + 24))(v49);
          v22 = (_OWORD *)(v20 + 64);
          goto LABEL_29;
        }
        *(_QWORD *)(v20 + 56) = (*(uint64_t (**)(void))(*(_QWORD *)v49 + 16))();
      }
      v22 = (_OWORD *)(v20 + 64);
    }
LABEL_29:
    a2[1] = (uint64_t)v22;
    result = v49;
    if (v49 == v48)
    {
      result = v48;
      v13 = 4;
LABEL_6:
      result = (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v13))();
      goto LABEL_7;
    }
    if (v49)
    {
      v13 = 5;
      goto LABEL_6;
    }
LABEL_7:
    v12 += 2;
  }
  while (v12 != v11);
  v10 = *(_QWORD **)(v9 + 64);
LABEL_35:
  v23 = v10[12];
  if (v23)
  {
    if (*(_BYTE *)(v23 + 18) == 1 && *(_QWORD *)(v23 + 192) != a4 && *(_DWORD *)(v23 + 112))
    {
      *(_QWORD *)(v23 + 192) = a4;
      *(_OWORD *)(v23 + 56) = *(_OWORD *)(v23 + 40);
    }
    if (*(_QWORD *)(v23 + 64) != *(_QWORD *)(v23 + 56))
    {
      v24 = *(_QWORD *)(*(_QWORD *)(v9 + 64) + 96);
      if (!*(_QWORD *)(v24 + 24))
        ggl::BufferData::prepareBufferForDevice(*(std::mutex **)(*(_QWORD *)(v9 + 64) + 96), a3, 0);
      if (*(_BYTE *)(v24 + 18) == 1 && *(_QWORD *)(v24 + 192) != a4 && *(_DWORD *)(v24 + 112))
      {
        *(_QWORD *)(v24 + 192) = a4;
        *(_OWORD *)(v24 + 56) = *(_OWORD *)(v24 + 40);
      }
      if (*(_DWORD *)(v24 + 112) <= 1u)
        v25 = 0;
      else
        v25 = a5;
      v26 = *(int64x2_t *)(v24 + 56);
      v27 = vaddq_s64(vdupq_n_s64(v25 * *(_QWORD *)(v24 + 120)), v26);
      *(_QWORD *)(v24 + 56) = 0;
      *(_QWORD *)(v24 + 64) = 0;
      v28 = *(_QWORD *)(v24 + 24);
      *(_QWORD *)&v46 = *(_QWORD *)(v24 + 72) + v26.i64[0];
      *((_QWORD *)&v46 + 1) = v28;
      v47 = v27;
      v49 = 0;
      v29 = a2[1];
      if (v29 >= a2[2])
      {
        v31 = std::vector<ggl::BufferLoadItem,geo::StdAllocator<ggl::BufferLoadItem,ggl::Allocator>>::__emplace_back_slow_path<ggl::BufferLoadItem&>(a2, (uint64_t)&v46);
      }
      else
      {
        if (!v29)
          goto LABEL_55;
        v30 = v47;
        *(_OWORD *)v29 = v46;
        *(int64x2_t *)(v29 + 16) = v30;
        if (v49)
        {
          if (v49 == v48)
          {
            *(_QWORD *)(v29 + 56) = v29 + 32;
            (*(void (**)(_BYTE *))(*(_QWORD *)v49 + 24))(v49);
            v31 = (_OWORD *)(v29 + 64);
          }
          else
          {
            *(_QWORD *)(v29 + 56) = (*(uint64_t (**)(void))(*(_QWORD *)v49 + 16))();
LABEL_55:
            v31 = (_OWORD *)(v29 + 64);
          }
        }
        else
        {
          *(_QWORD *)(v29 + 56) = 0;
          v31 = (_OWORD *)(v29 + 64);
        }
      }
      a2[1] = (uint64_t)v31;
      result = v49;
      if (v49 == v48)
      {
        v32 = 4;
        result = v48;
LABEL_61:
        result = (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v32))();
      }
      else if (v49)
      {
        v32 = 5;
        goto LABEL_61;
      }
    }
  }
LABEL_62:
  v33 = *(_QWORD *)(v9 + 32);
  v34 = *(std::mutex ***)(v33 + 32);
  v35 = *(std::mutex ***)(v33 + 40);
  if (v34 != v35)
  {
    while (2)
    {
      v37 = *v34;
      if (*v34)
      {
        if (v37->__m_.__opaque[10] == 1 && v37[3].__m_.__sig != a4 && *(_DWORD *)&v37[1].__m_.__opaque[40])
        {
          v37[3].__m_.__sig = a4;
          *(_OWORD *)&v37->__m_.__opaque[48] = *(_OWORD *)&v37->__m_.__opaque[32];
        }
        if (v37[1].__m_.__sig != *(_QWORD *)&v37->__m_.__opaque[48])
        {
          v38 = *v34;
          if (!*(_QWORD *)&(*v34)->__m_.__opaque[16])
            ggl::BufferData::prepareBufferForDevice(*v34, a3, 0);
          if (v38->__m_.__opaque[10] == 1 && v38[3].__m_.__sig != a4 && *(_DWORD *)&v38[1].__m_.__opaque[40])
          {
            v38[3].__m_.__sig = a4;
            *(_OWORD *)&v38->__m_.__opaque[48] = *(_OWORD *)&v38->__m_.__opaque[32];
          }
          if (*(_DWORD *)&v38[1].__m_.__opaque[40] <= 1u)
            v39 = 0;
          else
            v39 = a5;
          v40 = *(int64x2_t *)&v38->__m_.__opaque[48];
          v41 = vaddq_s64(vdupq_n_s64(v39 * *(_QWORD *)&v38[1].__m_.__opaque[48]), v40);
          *(_QWORD *)&v38->__m_.__opaque[48] = 0;
          v38[1].__m_.__sig = 0;
          v42 = *(_QWORD *)&v38->__m_.__opaque[16];
          *(_QWORD *)&v46 = *(_QWORD *)v38[1].__m_.__opaque + v40.i64[0];
          *((_QWORD *)&v46 + 1) = v42;
          v47 = v41;
          v49 = 0;
          v43 = a2[1];
          if (v43 >= a2[2])
          {
            v45 = std::vector<ggl::BufferLoadItem,geo::StdAllocator<ggl::BufferLoadItem,ggl::Allocator>>::__emplace_back_slow_path<ggl::BufferLoadItem&>(a2, (uint64_t)&v46);
          }
          else
          {
            if (!v43)
              goto LABEL_87;
            v44 = v47;
            *(_OWORD *)v43 = v46;
            *(int64x2_t *)(v43 + 16) = v44;
            if (v49)
            {
              if (v49 == v48)
              {
                *(_QWORD *)(v43 + 56) = v43 + 32;
                (*(void (**)(_BYTE *))(*(_QWORD *)v49 + 24))(v49);
                v45 = (_OWORD *)(v43 + 64);
              }
              else
              {
                *(_QWORD *)(v43 + 56) = (*(uint64_t (**)(void))(*(_QWORD *)v49 + 16))();
LABEL_87:
                v45 = (_OWORD *)(v43 + 64);
              }
            }
            else
            {
              *(_QWORD *)(v43 + 56) = 0;
              v45 = (_OWORD *)(v43 + 64);
            }
          }
          a2[1] = (uint64_t)v45;
          result = v49;
          if (v49 == v48)
          {
            result = v48;
            v36 = 4;
            goto LABEL_65;
          }
          if (v49)
          {
            v36 = 5;
LABEL_65:
            result = (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v36))();
          }
        }
      }
      v34 += 2;
      if (v34 == v35)
        return result;
      continue;
    }
  }
  return result;
}

__n128 std::__function::__func<md::CartographicRenderLayer::frame(md::LayoutContext const&)::$_0,std::allocator<md::CartographicRenderLayer::frame(md::LayoutContext const&)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_1E42D19D8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

void md::RenderLayer::unlock(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *__p[3];

  (*(void (**)(void **__return_ptr, uint64_t, uint64_t))(*(_QWORD *)a1 + 32))(__p, a1, a3);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
}

void md::RenderLayer::lock(unsigned __int8 *a1, uint64_t a2, uint64_t a3)
{
  unsigned __int8 *v5;
  unsigned __int8 *v6;
  int v7;
  ggl::CommandBuffer *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unsigned __int8 *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned __int8 *v20;
  unsigned __int8 *v21;

  (*(void (**)(unsigned __int8 **__return_ptr, unsigned __int8 *, uint64_t))(*(_QWORD *)a1 + 32))(&v20, a1, a3);
  v5 = v20;
  v6 = v21;
  if (v20 != v21)
  {
    v7 = a1[32];
    do
    {
      v9 = *(_QWORD **)(a2 + 8);
      v10 = v9[3];
      v11 = v9[4];
      v12 = v11 - v10;
      if (v11 != v10)
      {
        v13 = 0;
        v14 = v12 >> 3;
        while (1)
        {
          v15 = *(unsigned __int8 **)(v10 + 8 * v13);
          if (*v15 == *v5)
          {
            v16 = *((_QWORD *)v15 + 1);
            v17 = v9[15];
            if (v16 < (v9[16] - v17) >> 3)
              break;
          }
          if (++v13 >= v14)
            goto LABEL_5;
        }
        v18 = *(_QWORD *)(v17 + 8 * v16);
        if (v18)
        {
          v19 = v5[1];
          if (v7)
            v8 = *(ggl::CommandBuffer **)(*(_QWORD *)(v18 + 24) + 8 * v19);
          else
            v8 = 0;
          ggl::RenderQueue::setBufferForLayer(*(_QWORD *)(v18 + 8), v19, v8);
        }
      }
LABEL_5:
      v5 += 2;
    }
    while (v5 != v6);
    v5 = v20;
  }
  if (v5)
  {
    v21 = v5;
    operator delete(v5);
  }
}

_QWORD *md::RenderLayer::activeCommandBuffers@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  _BYTE *v3;
  _BYTE *v4;
  int64_t v5;
  char *v6;
  char *v7;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v4 = (_BYTE *)result[1];
  v3 = (_BYTE *)result[2];
  v5 = v3 - v4;
  if (v3 != v4)
  {
    if (v5 < 0)
      abort();
    v6 = (char *)operator new(v3 - v4);
    *a2 = v6;
    v7 = &v6[2 * (v5 >> 1)];
    a2[2] = v7;
    result = memcpy(v6, v4, v5);
    a2[1] = v7;
  }
  return result;
}

_WORD *std::__function::__func<md::ClearRenderLayer::constSelector(md::CommandBufferLocation const&)::{lambda(md::LayoutContext const&)#1},std::allocator<md::ClearRenderLayer::constSelector(md::CommandBufferLocation const&)::{lambda(md::LayoutContext const&)#1}>,std::vector<md::CommandBufferLocation> ()(md::LayoutContext const&)>::operator()@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  __int16 v3;
  _WORD *v4;
  _WORD *result;

  v3 = *(_WORD *)(a1 + 8);
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  v4 = operator new(2uLL);
  *a2 = v4;
  *v4 = v3;
  result = v4 + 1;
  a2[1] = result;
  a2[2] = result;
  return result;
}

uint64_t md::ClearRenderLayer::activeCommandBuffers(md::ClearRenderLayer *this, const md::LayoutContext *a2)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 13);
  if (!v2)
  {
    std::__throw_bad_function_call[abi:nn180100]();
    JUMPOUT(0x19F0D5120);
  }
  return (*(uint64_t (**)(uint64_t, const md::LayoutContext *))(*(_QWORD *)v2 + 48))(v2, a2);
}

void std::__function::__func<gdc::ResourceFetcher::createResource(unsigned long long,gdc::ResourceKey const&,gdc::ResourceOriginalLoadReason,gdc::ResourceSource,long long,BOOL,gdc::RawResourceSourceData const&)::$_1,std::allocator<gdc::ResourceFetcher::createResource(unsigned long long,gdc::ResourceKey const&,gdc::ResourceOriginalLoadReason,gdc::ResourceSource,long long,BOOL,gdc::RawResourceSourceData const&)::$_1>,void ()(void)>::operator()(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  uint64_t v4;
  os_signpost_id_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  __int16 v11;
  int v12;
  __int16 v13;
  uint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  if (GEOGetGeoDisplayCoreResourceLoadingLog::onceToken != -1)
    dispatch_once(&GEOGetGeoDisplayCoreResourceLoadingLog::onceToken, &__block_literal_global_4_42058);
  v2 = (id)GEOGetGeoDisplayCoreResourceLoadingLog::log;
  v3 = v2;
  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(v4 + 80);
  if (v5 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    v6 = **(_QWORD **)(a1 + 16);
    v7 = **(unsigned __int8 **)(a1 + 24);
    v8 = *(_QWORD *)(v4 + 88);
    v9 = 134218496;
    v10 = v6;
    v11 = 1024;
    v12 = v7;
    v13 = 2048;
    v14 = v8;
    _os_signpost_emit_with_name_impl(&dword_19F029000, v3, OS_SIGNPOST_INTERVAL_END, v5, "ResourceDecode", "resourceSize=%lu source=%hhu parent_signpost=%llu", (uint8_t *)&v9, 0x1Cu);
  }

}

__n128 std::__function::__func<gdc::ResourceFetcher::createResource(unsigned long long,gdc::ResourceKey const&,gdc::ResourceOriginalLoadReason,gdc::ResourceSource,long long,BOOL,gdc::RawResourceSourceData const&)::$_1,std::allocator<gdc::ResourceFetcher::createResource(unsigned long long,gdc::ResourceKey const&,gdc::ResourceOriginalLoadReason,gdc::ResourceSource,long long,BOOL,gdc::RawResourceSourceData const&)::$_1>,void ()(void)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_1E42D58D8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

void std::__function::__func<gdc::ResourceFetcher::createResource(unsigned long long,gdc::ResourceKey const&,gdc::ResourceOriginalLoadReason,gdc::ResourceSource,long long,BOOL,gdc::RawResourceSourceData const&)::$_0,std::allocator<gdc::ResourceFetcher::createResource(unsigned long long,gdc::ResourceKey const&,gdc::ResourceOriginalLoadReason,gdc::ResourceSource,long long,BOOL,gdc::RawResourceSourceData const&)::$_0>,void ()(void)>::operator()(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  uint64_t v4;
  os_signpost_id_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  __int16 v11;
  int v12;
  __int16 v13;
  uint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  if (GEOGetGeoDisplayCoreResourceLoadingLog::onceToken != -1)
    dispatch_once(&GEOGetGeoDisplayCoreResourceLoadingLog::onceToken, &__block_literal_global_4_42058);
  v2 = (id)GEOGetGeoDisplayCoreResourceLoadingLog::log;
  v3 = v2;
  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(v4 + 80);
  if (v5 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    v6 = **(_QWORD **)(a1 + 16);
    v7 = **(unsigned __int8 **)(a1 + 24);
    v8 = *(_QWORD *)(v4 + 88);
    v9 = 134218496;
    v10 = v6;
    v11 = 1024;
    v12 = v7;
    v13 = 2048;
    v14 = v8;
    _os_signpost_emit_with_name_impl(&dword_19F029000, v3, OS_SIGNPOST_INTERVAL_BEGIN, v5, "ResourceDecode", "resourceSize=%lu source=%hhu parent_signpost=%llu", (uint8_t *)&v9, 0x1Cu);
  }

}

void std::__function::__func<md::LabelImageLoader::enqueueIconForRendering(std::shared_ptr<md::LabelIcon> const&)::$_0,std::allocator<md::LabelImageLoader::enqueueIconForRendering(std::shared_ptr<md::LabelIcon> const&)::$_0>,void ()(void)>::destroy_deallocate(_QWORD *a1)
{
  std::__function::__alloc_func<md::LabelImageLoader::enqueueIconForRendering(std::shared_ptr<md::LabelIcon> const&)::$_0,std::allocator<md::LabelImageLoader::enqueueIconForRendering(std::shared_ptr<md::LabelIcon> const&)::$_0>,void ()(void)>::destroy[abi:nn180100](a1 + 1);
  operator delete(a1);
}

void std::__function::__func<md::LabelImageLoader::enqueueIconForRendering(std::shared_ptr<md::LabelIcon> const&)::$_0::operator() const(void)::{lambda(void)#3},std::allocator<md::LabelImageLoader::enqueueIconForRendering(std::shared_ptr<md::LabelIcon> const&)::$_0::operator() const(void)::{lambda(void)#3}>,void ()(void)>::destroy_deallocate(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;

  v2 = (std::__shared_weak_count *)__p[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)__p[4];
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)__p[4];
    if (!v5)
      goto LABEL_11;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  v8 = (std::__shared_weak_count *)__p[2];
  if (v8)
  {
    v9 = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  operator delete(__p);
}

void _ZNSt3__110__function6__funcIZZN2md23TiledGEOResourceFetcher14fetchResourcesERKNS_13unordered_mapIN3gdc11ResourceKeyEyNS5_15ResourceKeyHashENS_8equal_toIS6_EENS_9allocatorINS_4pairIKS6_yEEEEEEPN3geo9TaskQueueEPU32objcproto21OS_dispatch_semaphore8NSObjectEUb_E3__1NSA_ISO_EEFvvEEclEv(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  uint64_t v4;
  os_signpost_id_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  if (GEOGetVectorKitResourceLoadingLog_onceToken != -1)
    dispatch_once(&GEOGetVectorKitResourceLoadingLog_onceToken, &__block_literal_global_19_11788);
  v2 = (id)GEOGetVectorKitResourceLoadingLog_log;
  v3 = v2;
  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(v4 + 80);
  if (v5 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    v6 = *(_QWORD *)(v4 + 88);
    v7 = 134217984;
    v8 = v6;
    _os_signpost_emit_with_name_impl(&dword_19F029000, v3, OS_SIGNPOST_INTERVAL_END, v5, "CreateResource", "parent_signpost=%llu", (uint8_t *)&v7, 0xCu);
  }

}

void _ZNSt3__110__function6__funcIZZN2md23TiledGEOResourceFetcher14fetchResourcesERKNS_13unordered_mapIN3gdc11ResourceKeyEyNS5_15ResourceKeyHashENS_8equal_toIS6_EENS_9allocatorINS_4pairIKS6_yEEEEEEPN3geo9TaskQueueEPU32objcproto21OS_dispatch_semaphore8NSObjectEUb_E3__0NSA_ISO_EEFvvEEclEv(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  uint64_t v4;
  os_signpost_id_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  if (GEOGetVectorKitResourceLoadingLog_onceToken != -1)
    dispatch_once(&GEOGetVectorKitResourceLoadingLog_onceToken, &__block_literal_global_19_11788);
  v2 = (id)GEOGetVectorKitResourceLoadingLog_log;
  v3 = v2;
  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(v4 + 80);
  if (v5 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    v6 = *(_QWORD *)(v4 + 88);
    v7 = 134217984;
    v8 = v6;
    _os_signpost_emit_with_name_impl(&dword_19F029000, v3, OS_SIGNPOST_INTERVAL_BEGIN, v5, "CreateResource", "parent_signpost=%llu", (uint8_t *)&v7, 0xCu);
  }

}

uint64_t _ZNKSt3__110__function6__funcIZZN2md23TiledGEOResourceFetcher14fetchResourcesERKNS_13unordered_mapIN3gdc11ResourceKeyEyNS5_15ResourceKeyHashENS_8equal_toIS6_EENS_9allocatorINS_4pairIKS6_yEEEEEEPN3geo9TaskQueueEPU32objcproto21OS_dispatch_semaphore8NSObjectEUb_E3__1NSA_ISO_EEFvvEE7__cloneEPNS0_6__baseISQ_EE(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42DA0E8;
  a2[1] = v2;
  return result;
}

void std::__function::__func<md::DaVinciCenterLineRoadsRenderLayer::layout(md::LayoutContext const&)::$_0,std::allocator<md::DaVinciCenterLineRoadsRenderLayer::layout(md::LayoutContext const&)::$_0>,void ()(void)>::operator()(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  os_signpost_id_t v4;
  uint8_t v5[16];

  if (GEOGetVectorKitPerformanceLog_onceToken != -1)
    dispatch_once(&GEOGetVectorKitPerformanceLog_onceToken, &__block_literal_global_13_11780);
  v2 = (id)GEOGetVectorKitPerformanceLog_log;
  v3 = v2;
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 80);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)v5 = 0;
    _os_signpost_emit_with_name_impl(&dword_19F029000, v3, OS_SIGNPOST_INTERVAL_BEGIN, v4, "DaVinciCenterlineRoadsLayout", (const char *)&unk_1A0189141, v5, 2u);
  }

}

uint64_t std::__function::__func<md::DaVinciCenterLineRoadsRenderLayer::layout(md::LayoutContext const&)::$_1,std::allocator<md::DaVinciCenterLineRoadsRenderLayer::layout(md::LayoutContext const&)::$_1>,void ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42D3C70;
  a2[1] = v2;
  return result;
}

void std::__function::__func<md::DaVinciCenterLineRoadsRenderLayer::layout(md::LayoutContext const&)::$_1,std::allocator<md::DaVinciCenterLineRoadsRenderLayer::layout(md::LayoutContext const&)::$_1>,void ()(void)>::operator()(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  os_signpost_id_t v4;
  uint8_t v5[16];

  if (GEOGetVectorKitPerformanceLog_onceToken != -1)
    dispatch_once(&GEOGetVectorKitPerformanceLog_onceToken, &__block_literal_global_13_11780);
  v2 = (id)GEOGetVectorKitPerformanceLog_log;
  v3 = v2;
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 80);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)v5 = 0;
    _os_signpost_emit_with_name_impl(&dword_19F029000, v3, OS_SIGNPOST_INTERVAL_END, v4, "DaVinciCenterlineRoadsLayout", (const char *)&unk_1A0189141, v5, 2u);
  }

}

void setupAttachments(ggl::MetalResourceManager *,ggl::RenderTarget *,ggl::PassDescriptor const&,ggl::ClearItem *,MTLRenderPassDescriptor *,unsigned long)::$_0::operator()(uint64_t a1, void *a2, int a3)
{
  id v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  BOOL v18;
  uint64_t v19;
  id v20;

  v5 = a2;
  v20 = v5;
  if (!a3)
  {
    objc_msgSend(v5, "setTexture:", 0);
    objc_msgSend(v20, "setLoadAction:", 0);
    v11 = 0;
    goto LABEL_6;
  }
  objc_msgSend(v5, "setTexture:", **(_QWORD **)a1);
  objc_msgSend(v20, "setLevel:", *(_QWORD *)(**(_QWORD **)(a1 + 8) + 288));
  objc_msgSend(v20, "setSlice:", *(_QWORD *)(**(_QWORD **)(a1 + 8) + 296));
  v6 = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 40);
  v7 = **(_QWORD **)(a1 + 24);
  v8 = **(_QWORD **)(a1 + 32);
  if (v8 && *(_BYTE *)(v8 + 28))
  {
    v9 = 2;
    v10 = v20;
    goto LABEL_14;
  }
  v10 = v20;
  if (*(_DWORD *)(v7 + 56))
  {
    v12 = 0;
    if (v6 != 2)
      goto LABEL_9;
LABEL_12:
    v9 = 1;
    goto LABEL_14;
  }
  v12 = *(_DWORD *)(v7 + 76);
  if (v6 == 2)
    goto LABEL_12;
LABEL_9:
  if (v6)
    v9 = 0;
  else
    v9 = v12 == 0;
LABEL_14:
  objc_msgSend(v10, "setLoadAction:", v9);
  v13 = *(_QWORD *)(a1 + 8);
  v14 = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 44);
  v15 = *(_QWORD *)(*(_QWORD *)v13 + 304);
  if (v15)
  {
    v16 = *(_QWORD *)(*(_QWORD *)v13 + 304);
    if (*(_DWORD *)(v15 + 56))
      goto LABEL_16;
  }
  else
  {
    v16 = **(_QWORD **)(a1 + 24);
    if (*(_DWORD *)(v16 + 56))
    {
LABEL_16:
      v17 = 0;
      if (v14 != 3)
        goto LABEL_17;
LABEL_26:
      if (v15)
        v11 = 2;
      else
        v11 = 1;
      goto LABEL_6;
    }
  }
  v17 = *(_DWORD *)(v16 + 76);
  if (v14 == 3)
    goto LABEL_26;
LABEL_17:
  if (v14 == 2)
  {
    v11 = 1;
  }
  else if (v14)
  {
    v11 = 0;
  }
  else
  {
    v18 = v15 == 0;
    v19 = 1;
    if (!v18)
      v19 = 2;
    if (v17)
      v11 = 0;
    else
      v11 = v19;
  }
LABEL_6:
  objc_msgSend(v20, "setStoreAction:", v11);

}

void sub_19F0D59F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void std::__function::__func<md::LabelImageLoader::enqueueIconForRendering(std::shared_ptr<md::LabelIcon> const&)::$_0::operator() const(void)::{lambda(void)#1},std::allocator<md::LabelImageLoader::enqueueIconForRendering(std::shared_ptr<md::LabelIcon> const&)::$_0::operator() const(void)::{lambda(void)#1}>,void ()(void)>::operator()()
{
  NSObject *v0;
  uint8_t v1[16];

  if (GEOGetVectorKitPerformanceLog_onceToken != -1)
    dispatch_once(&GEOGetVectorKitPerformanceLog_onceToken, &__block_literal_global_13_11780);
  v0 = (id)GEOGetVectorKitPerformanceLog_log;
  if (os_signpost_enabled(v0))
  {
    *(_WORD *)v1 = 0;
    _os_signpost_emit_with_name_impl(&dword_19F029000, v0, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "LabelsRenderIcon", (const char *)&unk_1A0189141, v1, 2u);
  }

}

void std::__function::__func<md::LabelImageLoader::enqueueIconForRendering(std::shared_ptr<md::LabelIcon> const&)::$_0::operator() const(void)::{lambda(void)#2},std::allocator<md::LabelImageLoader::enqueueIconForRendering(std::shared_ptr<md::LabelIcon> const&)::$_0::operator() const(void)::{lambda(void)#2}>,void ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E42D99E0;
}

void std::__function::__func<md::LabelImageLoader::enqueueIconForRendering(std::shared_ptr<md::LabelIcon> const&)::$_0::operator() const(void)::{lambda(void)#2},std::allocator<md::LabelImageLoader::enqueueIconForRendering(std::shared_ptr<md::LabelIcon> const&)::$_0::operator() const(void)::{lambda(void)#2}>,void ()(void)>::operator()()
{
  NSObject *v0;
  uint8_t v1[16];

  if (GEOGetVectorKitPerformanceLog_onceToken != -1)
    dispatch_once(&GEOGetVectorKitPerformanceLog_onceToken, &__block_literal_global_13_11780);
  v0 = (id)GEOGetVectorKitPerformanceLog_log;
  if (os_signpost_enabled(v0))
  {
    *(_WORD *)v1 = 0;
    _os_signpost_emit_with_name_impl(&dword_19F029000, v0, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "LabelsRenderIcon", (const char *)&unk_1A0189141, v1, 2u);
  }

}

void _ZNSt3__110__function6__funcIZZN2md28IdentifiedGEOResourceFetcher14fetchResourcesERKNS_13unordered_mapIN3gdc11ResourceKeyEyNS5_15ResourceKeyHashENS_8equal_toIS6_EENS_9allocatorINS_4pairIKS6_yEEEEEEPN3geo9TaskQueueEPU32objcproto21OS_dispatch_semaphore8NSObjectEUb_E3__2NSA_ISO_EEFvvEEclEv(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  uint64_t v4;
  os_signpost_id_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  if (GEOGetVectorKitResourceLoadingLog_onceToken != -1)
    dispatch_once(&GEOGetVectorKitResourceLoadingLog_onceToken, &__block_literal_global_19_11788);
  v2 = (id)GEOGetVectorKitResourceLoadingLog_log;
  v3 = v2;
  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(v4 + 80);
  if (v5 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    v6 = *(_QWORD *)(v4 + 88);
    v7 = 134217984;
    v8 = v6;
    _os_signpost_emit_with_name_impl(&dword_19F029000, v3, OS_SIGNPOST_INTERVAL_END, v5, "CreateResource", "parent_signpost=%llu", (uint8_t *)&v7, 0xCu);
  }

}

void _ZNSt3__110__function6__funcIZZN2md28IdentifiedGEOResourceFetcher14fetchResourcesERKNS_13unordered_mapIN3gdc11ResourceKeyEyNS5_15ResourceKeyHashENS_8equal_toIS6_EENS_9allocatorINS_4pairIKS6_yEEEEEEPN3geo9TaskQueueEPU32objcproto21OS_dispatch_semaphore8NSObjectEUb_E3__1NSA_ISO_EEFvvEEclEv(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  uint64_t v4;
  os_signpost_id_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  if (GEOGetVectorKitResourceLoadingLog_onceToken != -1)
    dispatch_once(&GEOGetVectorKitResourceLoadingLog_onceToken, &__block_literal_global_19_11788);
  v2 = (id)GEOGetVectorKitResourceLoadingLog_log;
  v3 = v2;
  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(v4 + 80);
  if (v5 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    v6 = *(_QWORD *)(v4 + 88);
    v7 = 134217984;
    v8 = v6;
    _os_signpost_emit_with_name_impl(&dword_19F029000, v3, OS_SIGNPOST_INTERVAL_BEGIN, v5, "CreateResource", "parent_signpost=%llu", (uint8_t *)&v7, 0xCu);
  }

}

uint64_t _ZNKSt3__110__function6__funcIZZN2md28IdentifiedGEOResourceFetcher14fetchResourcesERKNS_13unordered_mapIN3gdc11ResourceKeyEyNS5_15ResourceKeyHashENS_8equal_toIS6_EENS_9allocatorINS_4pairIKS6_yEEEEEEPN3geo9TaskQueueEPU32objcproto21OS_dispatch_semaphore8NSObjectEUb_E3__2NSA_ISO_EEFvvEE7__cloneEPNS0_6__baseISQ_EE(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42DA250;
  a2[1] = v2;
  return result;
}

void std::__function::__func<md::LoadingStatusLogic::runBeforeLayout(md::LayoutContext const&,md::LogicDependencies<gdc::TypeList<md::SceneContext>,gdc::TypeList<md::IdentifiedResourceContext>>::ResolvedDependencies const&,md::LoadingStatusContext &)::$_0,std::allocator<md::LoadingStatusLogic::runBeforeLayout(md::LayoutContext const&,md::LogicDependencies<gdc::TypeList<md::SceneContext>,gdc::TypeList<md::IdentifiedResourceContext>>::ResolvedDependencies const&,md::LoadingStatusContext &)::$_0>,void ()(void)>::operator()(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  os_signpost_id_t v4;
  uint8_t v5[16];

  if (GEOGetVectorKitPerformanceLog_onceToken != -1)
    dispatch_once(&GEOGetVectorKitPerformanceLog_onceToken, &__block_literal_global_13_11780);
  v2 = (id)GEOGetVectorKitPerformanceLog_log;
  v3 = v2;
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 80);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)v5 = 0;
    _os_signpost_emit_with_name_impl(&dword_19F029000, v3, OS_SIGNPOST_INTERVAL_BEGIN, v4, "LoadingStatusLogic", (const char *)&unk_1A0189141, v5, 2u);
  }

}

void _ZNSt3__110__function6__funcIZN2md15LocalNorthLogic15runBeforeLayoutERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_17StyleLogicContextENS2_12SceneContextENS2_13CameraContextEEEENS9_IJEEEEE20ResolvedDependenciesERNS2_22LocalNorthLogicContextEE3__0NS_9allocatorISL_EEFvvEEclEv(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  os_signpost_id_t v4;
  uint8_t v5[16];

  if (GEOGetVectorKitPerformanceLog_onceToken != -1)
    dispatch_once(&GEOGetVectorKitPerformanceLog_onceToken, &__block_literal_global_13_11780);
  v2 = (id)GEOGetVectorKitPerformanceLog_log;
  v3 = v2;
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 80);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)v5 = 0;
    _os_signpost_emit_with_name_impl(&dword_19F029000, v3, OS_SIGNPOST_INTERVAL_BEGIN, v4, "LocalNorthLogic", (const char *)&unk_1A0189141, v5, 2u);
  }

}

void _ZNSt3__110__function6__funcIZN2md13StandardLogic15runBeforeLayoutERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_12SceneContextENS2_13CameraContextEEEENS9_IJEEEEE20ResolvedDependenciesERNS2_20StandardLogicContextEE3__0NS_9allocatorISK_EEFvvEEclEv(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  os_signpost_id_t v4;
  uint8_t v5[16];

  if (GEOGetVectorKitPerformanceLog_onceToken != -1)
    dispatch_once(&GEOGetVectorKitPerformanceLog_onceToken, &__block_literal_global_13_11780);
  v2 = (id)GEOGetVectorKitPerformanceLog_log;
  v3 = v2;
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 80);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)v5 = 0;
    _os_signpost_emit_with_name_impl(&dword_19F029000, v3, OS_SIGNPOST_INTERVAL_BEGIN, v4, "StandardLogic", (const char *)&unk_1A0189141, v5, 2u);
  }

}

void std::__function::__func<md::LogicManager::runLogicBefore(md::LayoutContext const&,gdc::Context &)::$_1,std::allocator<md::LogicManager::runLogicBefore(md::LayoutContext const&,gdc::Context &)::$_1>,void ()(void)>::operator()(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  os_signpost_id_t v4;
  uint8_t v5[16];

  if (GEOGetVectorKitPerformanceLog_onceToken != -1)
    dispatch_once(&GEOGetVectorKitPerformanceLog_onceToken, &__block_literal_global_13_11780);
  v2 = (id)GEOGetVectorKitPerformanceLog_log;
  v3 = v2;
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 80);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)v5 = 0;
    _os_signpost_emit_with_name_impl(&dword_19F029000, v3, OS_SIGNPOST_INTERVAL_END, v4, "LogicManagerRunLogic", (const char *)&unk_1A0189141, v5, 2u);
  }

}

void std::__function::__func<md::LabelsLogic::runBeforeLayout(md::LayoutContext const&,md::LogicDependencies<gdc::TypeList<md::StyleLogicContext>,gdc::TypeList<md::MeshRenderableContext>>::ResolvedDependencies const&,md::LabelsContext &)::$_1,std::allocator<md::LabelsLogic::runBeforeLayout(md::LayoutContext const&,md::LogicDependencies<gdc::TypeList<md::StyleLogicContext>,gdc::TypeList<md::MeshRenderableContext>>::ResolvedDependencies const&,md::LabelsContext &)::$_1>,void ()(void)>::operator()(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  os_signpost_id_t v4;
  uint8_t v5[16];

  if (GEOGetVectorKitPerformanceLog_onceToken != -1)
    dispatch_once(&GEOGetVectorKitPerformanceLog_onceToken, &__block_literal_global_13_11780);
  v2 = (id)GEOGetVectorKitPerformanceLog_log;
  v3 = v2;
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 80);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)v5 = 0;
    _os_signpost_emit_with_name_impl(&dword_19F029000, v3, OS_SIGNPOST_INTERVAL_END, v4, "LabelsLogic", (const char *)&unk_1A0189141, v5, 2u);
  }

}

void std::__function::__func<md::LabelsLogic::runBeforeLayout(md::LayoutContext const&,md::LogicDependencies<gdc::TypeList<md::StyleLogicContext>,gdc::TypeList<md::MeshRenderableContext>>::ResolvedDependencies const&,md::LabelsContext &)::$_0,std::allocator<md::LabelsLogic::runBeforeLayout(md::LayoutContext const&,md::LogicDependencies<gdc::TypeList<md::StyleLogicContext>,gdc::TypeList<md::MeshRenderableContext>>::ResolvedDependencies const&,md::LabelsContext &)::$_0>,void ()(void)>::operator()(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  os_signpost_id_t v4;
  uint8_t v5[16];

  if (GEOGetVectorKitPerformanceLog_onceToken != -1)
    dispatch_once(&GEOGetVectorKitPerformanceLog_onceToken, &__block_literal_global_13_11780);
  v2 = (id)GEOGetVectorKitPerformanceLog_log;
  v3 = v2;
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 80);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)v5 = 0;
    _os_signpost_emit_with_name_impl(&dword_19F029000, v3, OS_SIGNPOST_INTERVAL_BEGIN, v4, "LabelsLogic", (const char *)&unk_1A0189141, v5, 2u);
  }

}

void std::__function::__func<md::AnchorLogic::runBeforeLayout(md::LayoutContext const&,md::LogicDependencies<gdc::TypeList<md::CameraContext,md::ElevationContext>,gdc::TypeList<md::NavigationContext>>::ResolvedDependencies const&,md::AnchorContext &)::$_1,std::allocator<md::AnchorLogic::runBeforeLayout(md::LayoutContext const&,md::LogicDependencies<gdc::TypeList<md::CameraContext,md::ElevationContext>,gdc::TypeList<md::NavigationContext>>::ResolvedDependencies const&,md::AnchorContext &)::$_1>,void ()(void)>::operator()(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  os_signpost_id_t v4;
  uint8_t v5[16];

  if (GEOGetVectorKitPerformanceLog_onceToken != -1)
    dispatch_once(&GEOGetVectorKitPerformanceLog_onceToken, &__block_literal_global_13_11780);
  v2 = (id)GEOGetVectorKitPerformanceLog_log;
  v3 = v2;
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 80);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)v5 = 0;
    _os_signpost_emit_with_name_impl(&dword_19F029000, v3, OS_SIGNPOST_INTERVAL_END, v4, "AnchorLogic", (const char *)&unk_1A0189141, v5, 2u);
  }

}

uint64_t _ZNKSt3__110__function6__funcIZN2md8SkyLogic15runBeforeLayoutERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_13CameraContextENS2_17StyleLogicContextEEEENS9_IJEEEEE20ResolvedDependenciesERNS2_15SkyLogicContextEE3__1NS_9allocatorISK_EEFvvEE7__cloneEPNS0_6__baseISN_EE(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42D4768;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<md::LoadingStatusLogic::runBeforeLayout(md::LayoutContext const&,md::LogicDependencies<gdc::TypeList<md::SceneContext>,gdc::TypeList<md::IdentifiedResourceContext>>::ResolvedDependencies const&,md::LoadingStatusContext &)::$_1,std::allocator<md::LoadingStatusLogic::runBeforeLayout(md::LayoutContext const&,md::LogicDependencies<gdc::TypeList<md::SceneContext>,gdc::TypeList<md::IdentifiedResourceContext>>::ResolvedDependencies const&,md::LoadingStatusContext &)::$_1>,void ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42CEF60;
  a2[1] = v2;
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZN2md15LocalNorthLogic15runBeforeLayoutERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_17StyleLogicContextENS2_12SceneContextENS2_13CameraContextEEEENS9_IJEEEEE20ResolvedDependenciesERNS2_22LocalNorthLogicContextEE3__1NS_9allocatorISL_EEFvvEE7__cloneEPNS0_6__baseISO_EE(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42CC530;
  a2[1] = v2;
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZN2md13StandardLogic15runBeforeLayoutERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_12SceneContextENS2_13CameraContextEEEENS9_IJEEEEE20ResolvedDependenciesERNS2_20StandardLogicContextEE3__1NS_9allocatorISK_EEFvvEE7__cloneEPNS0_6__baseISN_EE(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42CBB10;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<md::LabelsLogic::runBeforeLayout(md::LayoutContext const&,md::LogicDependencies<gdc::TypeList<md::StyleLogicContext>,gdc::TypeList<md::MeshRenderableContext>>::ResolvedDependencies const&,md::LabelsContext &)::$_1,std::allocator<md::LabelsLogic::runBeforeLayout(md::LayoutContext const&,md::LogicDependencies<gdc::TypeList<md::StyleLogicContext>,gdc::TypeList<md::MeshRenderableContext>>::ResolvedDependencies const&,md::LabelsContext &)::$_1>,void ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42C8D80;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<md::AnchorLogic::runBeforeLayout(md::LayoutContext const&,md::LogicDependencies<gdc::TypeList<md::CameraContext,md::ElevationContext>,gdc::TypeList<md::NavigationContext>>::ResolvedDependencies const&,md::AnchorContext &)::$_1,std::allocator<md::AnchorLogic::runBeforeLayout(md::LayoutContext const&,md::LogicDependencies<gdc::TypeList<md::CameraContext,md::ElevationContext>,gdc::TypeList<md::NavigationContext>>::ResolvedDependencies const&,md::AnchorContext &)::$_1>,void ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42C8BD0;
  a2[1] = v2;
  return result;
}

void _ZNSt3__110__function6__funcIZN2md8SkyLogic15runBeforeLayoutERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_13CameraContextENS2_17StyleLogicContextEEEENS9_IJEEEEE20ResolvedDependenciesERNS2_15SkyLogicContextEE3__0NS_9allocatorISK_EEFvvEEclEv(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  os_signpost_id_t v4;
  uint8_t v5[16];

  if (GEOGetVectorKitPerformanceLog_onceToken != -1)
    dispatch_once(&GEOGetVectorKitPerformanceLog_onceToken, &__block_literal_global_13_11780);
  v2 = (id)GEOGetVectorKitPerformanceLog_log;
  v3 = v2;
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 80);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)v5 = 0;
    _os_signpost_emit_with_name_impl(&dword_19F029000, v3, OS_SIGNPOST_INTERVAL_BEGIN, v4, "SkyLogic", (const char *)&unk_1A0189141, v5, 2u);
  }

}

void std::__function::__func<md::AnchorLogic::runBeforeLayout(md::LayoutContext const&,md::LogicDependencies<gdc::TypeList<md::CameraContext,md::ElevationContext>,gdc::TypeList<md::NavigationContext>>::ResolvedDependencies const&,md::AnchorContext &)::$_0,std::allocator<md::AnchorLogic::runBeforeLayout(md::LayoutContext const&,md::LogicDependencies<gdc::TypeList<md::CameraContext,md::ElevationContext>,gdc::TypeList<md::NavigationContext>>::ResolvedDependencies const&,md::AnchorContext &)::$_0>,void ()(void)>::operator()(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  os_signpost_id_t v4;
  uint8_t v5[16];

  if (GEOGetVectorKitPerformanceLog_onceToken != -1)
    dispatch_once(&GEOGetVectorKitPerformanceLog_onceToken, &__block_literal_global_13_11780);
  v2 = (id)GEOGetVectorKitPerformanceLog_log;
  v3 = v2;
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 80);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)v5 = 0;
    _os_signpost_emit_with_name_impl(&dword_19F029000, v3, OS_SIGNPOST_INTERVAL_BEGIN, v4, "AnchorLogic", (const char *)&unk_1A0189141, v5, 2u);
  }

}

void _ZNSt3__110__function6__funcIZN2md9PuckLogic15runBeforeLayoutERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_13CameraContextENS2_16ElevationContextENS2_17NavigationContextENS2_17StyleLogicContextENS2_22SharedResourcesContextENS2_15RegistryContextENS2_25IdentifiedResourceContextENS2_12SceneContextENS2_20NonTiledAssetContextEEEENS9_IJEEEEE20ResolvedDependenciesERNS2_11PuckContextEE3__1NS_9allocatorISR_EEFvvEEclEv(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  os_signpost_id_t v4;
  uint8_t v5[16];

  if (GEOGetVectorKitPerformanceLog_onceToken != -1)
    dispatch_once(&GEOGetVectorKitPerformanceLog_onceToken, &__block_literal_global_13_11780);
  v2 = (id)GEOGetVectorKitPerformanceLog_log;
  v3 = v2;
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 80);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)v5 = 0;
    _os_signpost_emit_with_name_impl(&dword_19F029000, v3, OS_SIGNPOST_INTERVAL_END, v4, "PuckLogic", (const char *)&unk_1A0189141, v5, 2u);
  }

}

void _ZNSt3__110__function6__funcIZN2md20SharedResourcesLogic15runBeforeLayoutERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJEEESA_EE20ResolvedDependenciesERNS2_22SharedResourcesContextEE3__0NS_9allocatorISH_EEFvvEEclEv(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  os_signpost_id_t v4;
  uint8_t v5[16];

  if (GEOGetVectorKitPerformanceLog_onceToken != -1)
    dispatch_once(&GEOGetVectorKitPerformanceLog_onceToken, &__block_literal_global_13_11780);
  v2 = (id)GEOGetVectorKitPerformanceLog_log;
  v3 = v2;
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 80);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)v5 = 0;
    _os_signpost_emit_with_name_impl(&dword_19F029000, v3, OS_SIGNPOST_INTERVAL_BEGIN, v4, "SharedResourcesLogic", (const char *)&unk_1A0189141, v5, 2u);
  }

}

void std::__function::__func<md::LoadingStatusLogic::runBeforeLayout(md::LayoutContext const&,md::LogicDependencies<gdc::TypeList<md::SceneContext>,gdc::TypeList<md::IdentifiedResourceContext>>::ResolvedDependencies const&,md::LoadingStatusContext &)::$_1,std::allocator<md::LoadingStatusLogic::runBeforeLayout(md::LayoutContext const&,md::LogicDependencies<gdc::TypeList<md::SceneContext>,gdc::TypeList<md::IdentifiedResourceContext>>::ResolvedDependencies const&,md::LoadingStatusContext &)::$_1>,void ()(void)>::operator()(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  os_signpost_id_t v4;
  uint8_t v5[16];

  if (GEOGetVectorKitPerformanceLog_onceToken != -1)
    dispatch_once(&GEOGetVectorKitPerformanceLog_onceToken, &__block_literal_global_13_11780);
  v2 = (id)GEOGetVectorKitPerformanceLog_log;
  v3 = v2;
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 80);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)v5 = 0;
    _os_signpost_emit_with_name_impl(&dword_19F029000, v3, OS_SIGNPOST_INTERVAL_END, v4, "LoadingStatusLogic", (const char *)&unk_1A0189141, v5, 2u);
  }

}

void _ZNSt3__110__function6__funcIZN2md17RouteOverlayLogic15runBeforeLayoutERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJEEESA_EE20ResolvedDependenciesERNS2_19RouteOverlayContextEE3__1NS_9allocatorISH_EEFvvEEclEv(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  os_signpost_id_t v4;
  uint8_t v5[16];

  if (GEOGetVectorKitPerformanceLog_onceToken != -1)
    dispatch_once(&GEOGetVectorKitPerformanceLog_onceToken, &__block_literal_global_13_11780);
  v2 = (id)GEOGetVectorKitPerformanceLog_log;
  v3 = v2;
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 80);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)v5 = 0;
    _os_signpost_emit_with_name_impl(&dword_19F029000, v3, OS_SIGNPOST_INTERVAL_END, v4, "RouteOverlayLogic", (const char *)&unk_1A0189141, v5, 2u);
  }

}

void _ZNSt3__110__function6__funcIZN2md17RouteOverlayLogic15runBeforeLayoutERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJEEESA_EE20ResolvedDependenciesERNS2_19RouteOverlayContextEE3__0NS_9allocatorISH_EEFvvEEclEv(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  os_signpost_id_t v4;
  uint8_t v5[16];

  if (GEOGetVectorKitPerformanceLog_onceToken != -1)
    dispatch_once(&GEOGetVectorKitPerformanceLog_onceToken, &__block_literal_global_13_11780);
  v2 = (id)GEOGetVectorKitPerformanceLog_log;
  v3 = v2;
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 80);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)v5 = 0;
    _os_signpost_emit_with_name_impl(&dword_19F029000, v3, OS_SIGNPOST_INTERVAL_BEGIN, v4, "RouteOverlayLogic", (const char *)&unk_1A0189141, v5, 2u);
  }

}

void _ZNSt3__110__function6__funcIZN2md15LocalNorthLogic15runBeforeLayoutERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_17StyleLogicContextENS2_12SceneContextENS2_13CameraContextEEEENS9_IJEEEEE20ResolvedDependenciesERNS2_22LocalNorthLogicContextEE3__1NS_9allocatorISL_EEFvvEEclEv(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  os_signpost_id_t v4;
  uint8_t v5[16];

  if (GEOGetVectorKitPerformanceLog_onceToken != -1)
    dispatch_once(&GEOGetVectorKitPerformanceLog_onceToken, &__block_literal_global_13_11780);
  v2 = (id)GEOGetVectorKitPerformanceLog_log;
  v3 = v2;
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 80);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)v5 = 0;
    _os_signpost_emit_with_name_impl(&dword_19F029000, v3, OS_SIGNPOST_INTERVAL_END, v4, "LocalNorthLogic", (const char *)&unk_1A0189141, v5, 2u);
  }

}

void std::__function::__func<md::ElevationLogic::runBeforeLayout(md::LayoutContext const&,md::LogicDependencies<gdc::TypeList<md::StyleLogicContext,md::SettingsContext>,gdc::TypeList<md::LayerDataLogicContext>>::ResolvedDependencies const&,md::ElevationContext &)::$_1,std::allocator<md::ElevationLogic::runBeforeLayout(md::LayoutContext const&,md::LogicDependencies<gdc::TypeList<md::StyleLogicContext,md::SettingsContext>,gdc::TypeList<md::LayerDataLogicContext>>::ResolvedDependencies const&,md::ElevationContext &)::$_1>,void ()(void)>::operator()(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  os_signpost_id_t v4;
  uint8_t v5[16];

  if (GEOGetVectorKitPerformanceLog_onceToken != -1)
    dispatch_once(&GEOGetVectorKitPerformanceLog_onceToken, &__block_literal_global_13_11780);
  v2 = (id)GEOGetVectorKitPerformanceLog_log;
  v3 = v2;
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 80);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)v5 = 0;
    _os_signpost_emit_with_name_impl(&dword_19F029000, v3, OS_SIGNPOST_INTERVAL_END, v4, "ElevationLogic", (const char *)&unk_1A0189141, v5, 2u);
  }

}

void _ZNSt3__110__function6__funcIZN2md13SettingsLogic15runBeforeLayoutERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJEEESA_EE20ResolvedDependenciesERNS2_15SettingsContextEE3__1NS_9allocatorISH_EEFvvEEclEv(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  os_signpost_id_t v4;
  uint8_t v5[16];

  if (GEOGetVectorKitPerformanceLog_onceToken != -1)
    dispatch_once(&GEOGetVectorKitPerformanceLog_onceToken, &__block_literal_global_13_11780);
  v2 = (id)GEOGetVectorKitPerformanceLog_log;
  v3 = v2;
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 80);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)v5 = 0;
    _os_signpost_emit_with_name_impl(&dword_19F029000, v3, OS_SIGNPOST_INTERVAL_END, v4, "SettingsLogic", (const char *)&unk_1A0189141, v5, 2u);
  }

}

void _ZNSt3__110__function6__funcIZN2md13SettingsLogic15runBeforeLayoutERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJEEESA_EE20ResolvedDependenciesERNS2_15SettingsContextEE3__0NS_9allocatorISH_EEFvvEEclEv(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  os_signpost_id_t v4;
  uint8_t v5[16];

  if (GEOGetVectorKitPerformanceLog_onceToken != -1)
    dispatch_once(&GEOGetVectorKitPerformanceLog_onceToken, &__block_literal_global_13_11780);
  v2 = (id)GEOGetVectorKitPerformanceLog_log;
  v3 = v2;
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 80);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)v5 = 0;
    _os_signpost_emit_with_name_impl(&dword_19F029000, v3, OS_SIGNPOST_INTERVAL_BEGIN, v4, "SettingsLogic", (const char *)&unk_1A0189141, v5, 2u);
  }

}

void std::__function::__func<md::LogicManager::runLogicBefore(md::LayoutContext const&,gdc::Context &)::$_0,std::allocator<md::LogicManager::runLogicBefore(md::LayoutContext const&,gdc::Context &)::$_0>,void ()(void)>::operator()(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  os_signpost_id_t v4;
  uint8_t v5[16];

  if (GEOGetVectorKitPerformanceLog_onceToken != -1)
    dispatch_once(&GEOGetVectorKitPerformanceLog_onceToken, &__block_literal_global_13_11780);
  v2 = (id)GEOGetVectorKitPerformanceLog_log;
  v3 = v2;
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 80);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)v5 = 0;
    _os_signpost_emit_with_name_impl(&dword_19F029000, v3, OS_SIGNPOST_INTERVAL_BEGIN, v4, "LogicManagerRunLogic", (const char *)&unk_1A0189141, v5, 2u);
  }

}

void _ZNSt3__110__function6__funcIZN2md11CameraLogic15runBeforeLayoutERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_16ElevationContextEEEENS9_IJEEEEE20ResolvedDependenciesERNS2_13CameraContextEE3__1NS_9allocatorISJ_EEFvvEEclEv(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  os_signpost_id_t v4;
  uint8_t v5[16];

  if (GEOGetVectorKitPerformanceLog_onceToken != -1)
    dispatch_once(&GEOGetVectorKitPerformanceLog_onceToken, &__block_literal_global_13_11780);
  v2 = (id)GEOGetVectorKitPerformanceLog_log;
  v3 = v2;
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 80);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)v5 = 0;
    _os_signpost_emit_with_name_impl(&dword_19F029000, v3, OS_SIGNPOST_INTERVAL_END, v4, "CameraLogic", (const char *)&unk_1A0189141, v5, 2u);
  }

}

void _ZNSt3__110__function6__funcIZN2md11CameraLogic15runBeforeLayoutERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_16ElevationContextEEEENS9_IJEEEEE20ResolvedDependenciesERNS2_13CameraContextEE3__0NS_9allocatorISJ_EEFvvEEclEv(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  os_signpost_id_t v4;
  uint8_t v5[16];

  if (GEOGetVectorKitPerformanceLog_onceToken != -1)
    dispatch_once(&GEOGetVectorKitPerformanceLog_onceToken, &__block_literal_global_13_11780);
  v2 = (id)GEOGetVectorKitPerformanceLog_log;
  v3 = v2;
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 80);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)v5 = 0;
    _os_signpost_emit_with_name_impl(&dword_19F029000, v3, OS_SIGNPOST_INTERVAL_BEGIN, v4, "CameraLogic", (const char *)&unk_1A0189141, v5, 2u);
  }

}

void _ZNSt3__110__function6__funcIZN2md10StyleLogic15runBeforeLayoutERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJEEESA_EE20ResolvedDependenciesERNS2_17StyleLogicContextEE3__2NS_9allocatorISH_EEFvvEEclEv(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  os_signpost_id_t v4;
  uint8_t v5[16];

  if (GEOGetVectorKitPerformanceLog_onceToken != -1)
    dispatch_once(&GEOGetVectorKitPerformanceLog_onceToken, &__block_literal_global_13_11780);
  v2 = (id)GEOGetVectorKitPerformanceLog_log;
  v3 = v2;
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 80);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)v5 = 0;
    _os_signpost_emit_with_name_impl(&dword_19F029000, v3, OS_SIGNPOST_INTERVAL_END, v4, "StyleLogic", (const char *)&unk_1A0189141, v5, 2u);
  }

}

void _ZNSt3__110__function6__funcIZN2md10StyleLogic15runBeforeLayoutERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJEEESA_EE20ResolvedDependenciesERNS2_17StyleLogicContextEE3__1NS_9allocatorISH_EEFvvEEclEv(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  os_signpost_id_t v4;
  uint8_t v5[16];

  if (GEOGetVectorKitPerformanceLog_onceToken != -1)
    dispatch_once(&GEOGetVectorKitPerformanceLog_onceToken, &__block_literal_global_13_11780);
  v2 = (id)GEOGetVectorKitPerformanceLog_log;
  v3 = v2;
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 80);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)v5 = 0;
    _os_signpost_emit_with_name_impl(&dword_19F029000, v3, OS_SIGNPOST_INTERVAL_BEGIN, v4, "StyleLogic", (const char *)&unk_1A0189141, v5, 2u);
  }

}

uint64_t _ZNKSt3__110__function6__funcIZN2md20SharedResourcesLogic15runBeforeLayoutERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJEEESA_EE20ResolvedDependenciesERNS2_22SharedResourcesContextEE3__1NS_9allocatorISH_EEFvvEE7__cloneEPNS0_6__baseISK_EE(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42D0790;
  a2[1] = v2;
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZN2md17RouteOverlayLogic15runBeforeLayoutERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJEEESA_EE20ResolvedDependenciesERNS2_19RouteOverlayContextEE3__1NS_9allocatorISH_EEFvvEE7__cloneEPNS0_6__baseISK_EE(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42CEC00;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<md::ElevationLogic::runBeforeLayout(md::LayoutContext const&,md::LogicDependencies<gdc::TypeList<md::StyleLogicContext,md::SettingsContext>,gdc::TypeList<md::LayerDataLogicContext>>::ResolvedDependencies const&,md::ElevationContext &)::$_1,std::allocator<md::ElevationLogic::runBeforeLayout(md::LayoutContext const&,md::LogicDependencies<gdc::TypeList<md::StyleLogicContext,md::SettingsContext>,gdc::TypeList<md::LayerDataLogicContext>>::ResolvedDependencies const&,md::ElevationContext &)::$_1>,void ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42CBC30;
  a2[1] = v2;
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZN2md13SettingsLogic15runBeforeLayoutERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJEEESA_EE20ResolvedDependenciesERNS2_15SettingsContextEE3__1NS_9allocatorISH_EEFvvEE7__cloneEPNS0_6__baseISK_EE(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42CBA80;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<md::LogicManager::runLogicBefore(md::LayoutContext const&,gdc::Context &)::$_1,std::allocator<md::LogicManager::runLogicBefore(md::LayoutContext const&,gdc::Context &)::$_1>,void ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42CA9E8;
  a2[1] = v2;
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZN2md11CameraLogic15runBeforeLayoutERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_16ElevationContextEEEENS9_IJEEEEE20ResolvedDependenciesERNS2_13CameraContextEE3__1NS_9allocatorISJ_EEFvvEE7__cloneEPNS0_6__baseISM_EE(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42C8C60;
  a2[1] = v2;
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZN2md10StyleLogic15runBeforeLayoutERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJEEESA_EE20ResolvedDependenciesERNS2_17StyleLogicContextEE3__2NS_9allocatorISH_EEFvvEE7__cloneEPNS0_6__baseISK_EE(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42C88B8;
  a2[1] = v2;
  return result;
}

void std::__function::__func<md::ElevationLogic::runBeforeLayout(md::LayoutContext const&,md::LogicDependencies<gdc::TypeList<md::StyleLogicContext,md::SettingsContext>,gdc::TypeList<md::LayerDataLogicContext>>::ResolvedDependencies const&,md::ElevationContext &)::$_0,std::allocator<md::ElevationLogic::runBeforeLayout(md::LayoutContext const&,md::LogicDependencies<gdc::TypeList<md::StyleLogicContext,md::SettingsContext>,gdc::TypeList<md::LayerDataLogicContext>>::ResolvedDependencies const&,md::ElevationContext &)::$_0>,void ()(void)>::operator()(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  os_signpost_id_t v4;
  uint8_t v5[16];

  if (GEOGetVectorKitPerformanceLog_onceToken != -1)
    dispatch_once(&GEOGetVectorKitPerformanceLog_onceToken, &__block_literal_global_13_11780);
  v2 = (id)GEOGetVectorKitPerformanceLog_log;
  v3 = v2;
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 80);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)v5 = 0;
    _os_signpost_emit_with_name_impl(&dword_19F029000, v3, OS_SIGNPOST_INTERVAL_BEGIN, v4, "ElevationLogic", (const char *)&unk_1A0189141, v5, 2u);
  }

}

void _ZNSt3__110__function6__funcIZN2md8SkyLogic15runBeforeLayoutERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_13CameraContextENS2_17StyleLogicContextEEEENS9_IJEEEEE20ResolvedDependenciesERNS2_15SkyLogicContextEE3__1NS_9allocatorISK_EEFvvEEclEv(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  os_signpost_id_t v4;
  uint8_t v5[16];

  if (GEOGetVectorKitPerformanceLog_onceToken != -1)
    dispatch_once(&GEOGetVectorKitPerformanceLog_onceToken, &__block_literal_global_13_11780);
  v2 = (id)GEOGetVectorKitPerformanceLog_log;
  v3 = v2;
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 80);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)v5 = 0;
    _os_signpost_emit_with_name_impl(&dword_19F029000, v3, OS_SIGNPOST_INTERVAL_END, v4, "SkyLogic", (const char *)&unk_1A0189141, v5, 2u);
  }

}

void _ZNSt3__110__function6__funcIZN2md20SharedResourcesLogic15runBeforeLayoutERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJEEESA_EE20ResolvedDependenciesERNS2_22SharedResourcesContextEE3__1NS_9allocatorISH_EEFvvEEclEv(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  os_signpost_id_t v4;
  uint8_t v5[16];

  if (GEOGetVectorKitPerformanceLog_onceToken != -1)
    dispatch_once(&GEOGetVectorKitPerformanceLog_onceToken, &__block_literal_global_13_11780);
  v2 = (id)GEOGetVectorKitPerformanceLog_log;
  v3 = v2;
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 80);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)v5 = 0;
    _os_signpost_emit_with_name_impl(&dword_19F029000, v3, OS_SIGNPOST_INTERVAL_END, v4, "SharedResourcesLogic", (const char *)&unk_1A0189141, v5, 2u);
  }

}

id ggl::MetalDeviceContextFrame::blitCommandEncoder(uint64_t a1, unsigned int a2, int a3)
{
  uint64_t v3;
  void *v4;
  void **v5;
  void *v6;
  BOOL v7;
  uint64_t v8;
  id v9;
  uint64_t v10;
  void *v11;

  v3 = a1 + 8 * a2;
  v6 = *(void **)(v3 + 144);
  v5 = (void **)(v3 + 144);
  v4 = v6;
  if (v6)
    v7 = 1;
  else
    v7 = a3 == 0;
  if (!v7)
  {
    v8 = 136;
    if (!a2)
      v8 = 128;
    v9 = *(id *)(a1 + v8);
    objc_msgSend(v9, "blitCommandEncoder");
    v10 = objc_claimAutoreleasedReturnValue();
    v11 = *v5;
    *v5 = (void *)v10;

    v4 = *v5;
  }
  return v4;
}

void sub_19F0D718C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void _ZNSt3__110__function6__funcIZN2md12PolygonLogic15runBeforeLayoutERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_15SettingsContextENS2_12SceneContextEEEENS9_IJEEEEE20ResolvedDependenciesERNS2_14PolygonContextEE3__1NS_9allocatorISK_EEFvvEEclEv(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  os_signpost_id_t v4;
  uint8_t v5[16];

  if (GEOGetVectorKitPerformanceLog_onceToken != -1)
    dispatch_once(&GEOGetVectorKitPerformanceLog_onceToken, &__block_literal_global_13_11780);
  v2 = (id)GEOGetVectorKitPerformanceLog_log;
  v3 = v2;
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 80);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)v5 = 0;
    _os_signpost_emit_with_name_impl(&dword_19F029000, v3, OS_SIGNPOST_INTERVAL_END, v4, "PolygonLogic", (const char *)&unk_1A0189141, v5, 2u);
  }

}

void _ZNSt3__110__function6__funcIZN2md12PolygonLogic15runBeforeLayoutERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_15SettingsContextENS2_12SceneContextEEEENS9_IJEEEEE20ResolvedDependenciesERNS2_14PolygonContextEE3__0NS_9allocatorISK_EEFvvEEclEv(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  os_signpost_id_t v4;
  uint8_t v5[16];

  if (GEOGetVectorKitPerformanceLog_onceToken != -1)
    dispatch_once(&GEOGetVectorKitPerformanceLog_onceToken, &__block_literal_global_13_11780);
  v2 = (id)GEOGetVectorKitPerformanceLog_log;
  v3 = v2;
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 80);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)v5 = 0;
    _os_signpost_emit_with_name_impl(&dword_19F029000, v3, OS_SIGNPOST_INTERVAL_BEGIN, v4, "PolygonLogic", (const char *)&unk_1A0189141, v5, 2u);
  }

}

uint64_t _ZNKSt3__110__function6__funcIZN2md12PolygonLogic15runBeforeLayoutERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_15SettingsContextENS2_12SceneContextEEEENS9_IJEEEEE20ResolvedDependenciesERNS2_14PolygonContextEE3__1NS_9allocatorISK_EEFvvEE7__cloneEPNS0_6__baseISN_EE(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42CAAC0;
  a2[1] = v2;
  return result;
}

void _ZNSt3__110__function6__funcIZN2md13StandardLogic15runBeforeLayoutERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_12SceneContextENS2_13CameraContextEEEENS9_IJEEEEE20ResolvedDependenciesERNS2_20StandardLogicContextEE3__1NS_9allocatorISK_EEFvvEEclEv(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  os_signpost_id_t v4;
  uint8_t v5[16];

  if (GEOGetVectorKitPerformanceLog_onceToken != -1)
    dispatch_once(&GEOGetVectorKitPerformanceLog_onceToken, &__block_literal_global_13_11780);
  v2 = (id)GEOGetVectorKitPerformanceLog_log;
  v3 = v2;
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 80);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)v5 = 0;
    _os_signpost_emit_with_name_impl(&dword_19F029000, v3, OS_SIGNPOST_INTERVAL_END, v4, "StandardLogic", (const char *)&unk_1A0189141, v5, 2u);
  }

}

uint64_t md::Renderer::didPrepareForLayout(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 24) + 16))(*(_QWORD *)(a1 + 24), a2, a1);
}

void std::__function::__func<ggl::MetalResourceManager::destroyDeletedResourcesUptoFence(unsigned long long)::$_1,std::allocator<ggl::MetalResourceManager::destroyDeletedResourcesUptoFence(unsigned long long)::$_1>,void ()(void)>::operator()()
{
  NSObject *v0;
  uint8_t v1[16];

  if (GEOGetGeoGLPerformanceLog_onceToken != -1)
    dispatch_once(&GEOGetGeoGLPerformanceLog_onceToken, &__block_literal_global_4_40479);
  v0 = (id)GEOGetGeoGLPerformanceLog_log;
  if (os_signpost_enabled(v0))
  {
    *(_WORD *)v1 = 0;
    _os_signpost_emit_with_name_impl(&dword_19F029000, v0, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "DestroyResources", (const char *)&unk_1A0189141, v1, 2u);
  }

}

void std::__function::__func<md::LabelRenderLayer::layout(md::LayoutContext const&)::$_0,std::allocator<md::LabelRenderLayer::layout(md::LayoutContext const&)::$_0>,void ()(void)>::operator()(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  os_signpost_id_t v4;
  uint8_t v5[16];

  if (GEOGetVectorKitPerformanceLog_onceToken != -1)
    dispatch_once(&GEOGetVectorKitPerformanceLog_onceToken, &__block_literal_global_13_11780);
  v2 = (id)GEOGetVectorKitPerformanceLog_log;
  v3 = v2;
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 80);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)v5 = 0;
    _os_signpost_emit_with_name_impl(&dword_19F029000, v3, OS_SIGNPOST_INTERVAL_BEGIN, v4, "LabelLayout", (const char *)&unk_1A0189141, v5, 2u);
  }

}

void std::__function::__func<md::PuckRenderLayer::layout(md::LayoutContext const&)::$_0,std::allocator<md::PuckRenderLayer::layout(md::LayoutContext const&)::$_0>,void ()(void)>::operator()(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  os_signpost_id_t v4;
  uint8_t v5[16];

  if (GEOGetVectorKitPerformanceLog_onceToken != -1)
    dispatch_once(&GEOGetVectorKitPerformanceLog_onceToken, &__block_literal_global_13_11780);
  v2 = (id)GEOGetVectorKitPerformanceLog_log;
  v3 = v2;
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 80);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)v5 = 0;
    _os_signpost_emit_with_name_impl(&dword_19F029000, v3, OS_SIGNPOST_INTERVAL_BEGIN, v4, "PuckLayout", (const char *)&unk_1A0189141, v5, 2u);
  }

}

void std::__function::__func<md::GridRenderLayer::layout(md::LayoutContext const&)::$_0,std::allocator<md::GridRenderLayer::layout(md::LayoutContext const&)::$_0>,void ()(void)>::operator()(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  os_signpost_id_t v4;
  uint8_t v5[16];

  if (GEOGetVectorKitPerformanceLog_onceToken != -1)
    dispatch_once(&GEOGetVectorKitPerformanceLog_onceToken, &__block_literal_global_13_11780);
  v2 = (id)GEOGetVectorKitPerformanceLog_log;
  v3 = v2;
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 80);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)v5 = 0;
    _os_signpost_emit_with_name_impl(&dword_19F029000, v3, OS_SIGNPOST_INTERVAL_BEGIN, v4, "GridLayout", (const char *)&unk_1A0189141, v5, 2u);
  }

}

void std::__function::__func<md::SkyRenderLayer::layout(md::LayoutContext const&)::$_1,std::allocator<md::SkyRenderLayer::layout(md::LayoutContext const&)::$_1>,void ()(void)>::operator()(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  os_signpost_id_t v4;
  uint8_t v5[16];

  if (GEOGetVectorKitPerformanceLog_onceToken != -1)
    dispatch_once(&GEOGetVectorKitPerformanceLog_onceToken, &__block_literal_global_13_11780);
  v2 = (id)GEOGetVectorKitPerformanceLog_log;
  v3 = v2;
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 80);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)v5 = 0;
    _os_signpost_emit_with_name_impl(&dword_19F029000, v3, OS_SIGNPOST_INTERVAL_END, v4, "SkyLayout", (const char *)&unk_1A0189141, v5, 2u);
  }

}

void std::__function::__func<md::SkyRenderLayer::layout(md::LayoutContext const&)::$_0,std::allocator<md::SkyRenderLayer::layout(md::LayoutContext const&)::$_0>,void ()(void)>::operator()(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  os_signpost_id_t v4;
  uint8_t v5[16];

  if (GEOGetVectorKitPerformanceLog_onceToken != -1)
    dispatch_once(&GEOGetVectorKitPerformanceLog_onceToken, &__block_literal_global_13_11780);
  v2 = (id)GEOGetVectorKitPerformanceLog_log;
  v3 = v2;
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 80);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)v5 = 0;
    _os_signpost_emit_with_name_impl(&dword_19F029000, v3, OS_SIGNPOST_INTERVAL_BEGIN, v4, "SkyLayout", (const char *)&unk_1A0189141, v5, 2u);
  }

}

uint64_t std::__function::__func<md::LabelRenderLayer::layout(md::LayoutContext const&)::$_1,std::allocator<md::LabelRenderLayer::layout(md::LayoutContext const&)::$_1>,void ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42CD538;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<md::PuckRenderLayer::layout(md::LayoutContext const&)::$_1,std::allocator<md::PuckRenderLayer::layout(md::LayoutContext const&)::$_1>,void ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42CC800;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<md::GridRenderLayer::layout(md::LayoutContext const&)::$_1,std::allocator<md::GridRenderLayer::layout(md::LayoutContext const&)::$_1>,void ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42CC338;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<md::SkyRenderLayer::layout(md::LayoutContext const&)::$_1,std::allocator<md::SkyRenderLayer::layout(md::LayoutContext const&)::$_1>,void ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42CC188;
  a2[1] = v2;
  return result;
}

void std::__function::__func<md::GridRenderLayer::layout(md::LayoutContext const&)::$_1,std::allocator<md::GridRenderLayer::layout(md::LayoutContext const&)::$_1>,void ()(void)>::operator()(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  os_signpost_id_t v4;
  uint8_t v5[16];

  if (GEOGetVectorKitPerformanceLog_onceToken != -1)
    dispatch_once(&GEOGetVectorKitPerformanceLog_onceToken, &__block_literal_global_13_11780);
  v2 = (id)GEOGetVectorKitPerformanceLog_log;
  v3 = v2;
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 80);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)v5 = 0;
    _os_signpost_emit_with_name_impl(&dword_19F029000, v3, OS_SIGNPOST_INTERVAL_END, v4, "GridLayout", (const char *)&unk_1A0189141, v5, 2u);
  }

}

void std::__function::__func<ggl::MetalResourceManager::destroyDeletedResourcesUptoFence(unsigned long long)::$_0,std::allocator<ggl::MetalResourceManager::destroyDeletedResourcesUptoFence(unsigned long long)::$_0>,void ()(void)>::operator()()
{
  NSObject *v0;
  uint8_t v1[16];

  if (GEOGetGeoGLPerformanceLog_onceToken != -1)
    dispatch_once(&GEOGetGeoGLPerformanceLog_onceToken, &__block_literal_global_4_40479);
  v0 = (id)GEOGetGeoGLPerformanceLog_log;
  if (os_signpost_enabled(v0))
  {
    *(_WORD *)v1 = 0;
    _os_signpost_emit_with_name_impl(&dword_19F029000, v0, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "DestroyResources", (const char *)&unk_1A0189141, v1, 2u);
  }

}

void std::__function::__func<ggl::MetalResourceManager::destroyDeletedResourcesUptoFence(unsigned long long)::$_1,std::allocator<ggl::MetalResourceManager::destroyDeletedResourcesUptoFence(unsigned long long)::$_1>,void ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E42D7F70;
}

void std::__function::__func<md::PuckRenderLayer::layout(md::LayoutContext const&)::$_1,std::allocator<md::PuckRenderLayer::layout(md::LayoutContext const&)::$_1>,void ()(void)>::operator()(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  os_signpost_id_t v4;
  uint8_t v5[16];

  if (GEOGetVectorKitPerformanceLog_onceToken != -1)
    dispatch_once(&GEOGetVectorKitPerformanceLog_onceToken, &__block_literal_global_13_11780);
  v2 = (id)GEOGetVectorKitPerformanceLog_log;
  v3 = v2;
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 80);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)v5 = 0;
    _os_signpost_emit_with_name_impl(&dword_19F029000, v3, OS_SIGNPOST_INTERVAL_END, v4, "PuckLayout", (const char *)&unk_1A0189141, v5, 2u);
  }

}

void std::__function::__func<md::LabelRenderLayer::layout(md::LayoutContext const&)::$_1,std::allocator<md::LabelRenderLayer::layout(md::LayoutContext const&)::$_1>,void ()(void)>::operator()(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  os_signpost_id_t v4;
  uint8_t v5[16];

  if (GEOGetVectorKitPerformanceLog_onceToken != -1)
    dispatch_once(&GEOGetVectorKitPerformanceLog_onceToken, &__block_literal_global_13_11780);
  v2 = (id)GEOGetVectorKitPerformanceLog_log;
  v3 = v2;
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 80);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)v5 = 0;
    _os_signpost_emit_with_name_impl(&dword_19F029000, v3, OS_SIGNPOST_INTERVAL_END, v4, "LabelLayout", (const char *)&unk_1A0189141, v5, 2u);
  }

}

void std::__function::__func<md::VenueRenderLayer::layout(md::LayoutContext const&)::$_0,std::allocator<md::VenueRenderLayer::layout(md::LayoutContext const&)::$_0>,void ()(void)>::operator()(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  os_signpost_id_t v4;
  uint8_t v5[16];

  if (GEOGetVectorKitPerformanceLog_onceToken != -1)
    dispatch_once(&GEOGetVectorKitPerformanceLog_onceToken, &__block_literal_global_13_11780);
  v2 = (id)GEOGetVectorKitPerformanceLog_log;
  v3 = v2;
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 80);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)v5 = 0;
    _os_signpost_emit_with_name_impl(&dword_19F029000, v3, OS_SIGNPOST_INTERVAL_BEGIN, v4, "VenueLayout", (const char *)&unk_1A0189141, v5, 2u);
  }

}

uint64_t std::__function::__func<md::VenueRenderLayer::layout(md::LayoutContext const&)::$_1,std::allocator<md::VenueRenderLayer::layout(md::LayoutContext const&)::$_1>,void ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42CE300;
  a2[1] = v2;
  return result;
}

void std::__function::__func<md::PostchainRenderLayer::layout(md::LayoutContext const&)::$_0,std::allocator<md::PostchainRenderLayer::layout(md::LayoutContext const&)::$_0>,void ()(void)>::operator()(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  os_signpost_id_t v4;
  uint8_t v5[16];

  if (GEOGetVectorKitPerformanceLog_onceToken != -1)
    dispatch_once(&GEOGetVectorKitPerformanceLog_onceToken, &__block_literal_global_13_11780);
  v2 = (id)GEOGetVectorKitPerformanceLog_log;
  v3 = v2;
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 80);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)v5 = 0;
    _os_signpost_emit_with_name_impl(&dword_19F029000, v3, OS_SIGNPOST_INTERVAL_BEGIN, v4, "CartographicPostchainLayout", (const char *)&unk_1A0189141, v5, 2u);
  }

}

uint64_t std::__function::__func<md::PostchainRenderLayer::layout(md::LayoutContext const&)::$_1,std::allocator<md::PostchainRenderLayer::layout(md::LayoutContext const&)::$_1>,void ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42D0700;
  a2[1] = v2;
  return result;
}

void std::__function::__func<md::PostchainRenderLayer::layout(md::LayoutContext const&)::$_1,std::allocator<md::PostchainRenderLayer::layout(md::LayoutContext const&)::$_1>,void ()(void)>::operator()(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  os_signpost_id_t v4;
  uint8_t v5[16];

  if (GEOGetVectorKitPerformanceLog_onceToken != -1)
    dispatch_once(&GEOGetVectorKitPerformanceLog_onceToken, &__block_literal_global_13_11780);
  v2 = (id)GEOGetVectorKitPerformanceLog_log;
  v3 = v2;
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 80);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)v5 = 0;
    _os_signpost_emit_with_name_impl(&dword_19F029000, v3, OS_SIGNPOST_INTERVAL_END, v4, "CartographicPostchainLayout", (const char *)&unk_1A0189141, v5, 2u);
  }

}

void std::__function::__func<md::IdentifiedResourceLogic::runBeforeLayoutAtVariableRate(md::LayoutContext const&,md::LogicDependencies<gdc::TypeList<md::SceneContext,md::LayerDataLogicContext,md::RegistryContext,md::ElevationContext>,gdc::TypeList<md::AssetInjectionContext>>::ResolvedDependencies const&,md::IdentifiedResourceContext &)::$_1,std::allocator<md::IdentifiedResourceLogic::runBeforeLayoutAtVariableRate(md::LayoutContext const&,md::LogicDependencies<gdc::TypeList<md::SceneContext,md::LayerDataLogicContext,md::RegistryContext,md::ElevationContext>,gdc::TypeList<md::AssetInjectionContext>>::ResolvedDependencies const&,md::IdentifiedResourceContext &)::$_1>,void ()(void)>::operator()(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  os_signpost_id_t v4;
  uint8_t v5[16];

  if (GEOGetVectorKitPerformanceLog_onceToken != -1)
    dispatch_once(&GEOGetVectorKitPerformanceLog_onceToken, &__block_literal_global_13_11780);
  v2 = (id)GEOGetVectorKitPerformanceLog_log;
  v3 = v2;
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 80);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)v5 = 0;
    _os_signpost_emit_with_name_impl(&dword_19F029000, v3, OS_SIGNPOST_INTERVAL_END, v4, "IdentifiedResourceLogicVariableRate", (const char *)&unk_1A0189141, v5, 2u);
  }

}

void _ZNSt3__110__function6__funcIZN2md20PendingRegistryLogic29runBeforeLayoutAtVariableRateERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_19PendingSceneContextEEEENS9_IJEEEEE20ResolvedDependenciesERNS2_22PendingRegistryContextEE3__0NS_9allocatorISJ_EEFvvEEclEv(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  os_signpost_id_t v4;
  uint8_t v5[16];

  if (GEOGetVectorKitPerformanceLog_onceToken != -1)
    dispatch_once(&GEOGetVectorKitPerformanceLog_onceToken, &__block_literal_global_13_11780);
  v2 = (id)GEOGetVectorKitPerformanceLog_log;
  v3 = v2;
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 80);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)v5 = 0;
    _os_signpost_emit_with_name_impl(&dword_19F029000, v3, OS_SIGNPOST_INTERVAL_BEGIN, v4, "PendingRegistryLogic", (const char *)&unk_1A0189141, v5, 2u);
  }

}

void _ZNSt3__110__function6__funcIZN2md15SceneQueryLogic29runBeforeLayoutAtVariableRateERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_13CameraContextENS2_15RegistryContextENS2_17NavigationContextENS2_17StyleLogicContextENS2_15SettingsContextEEEENS9_IJEEEEE20ResolvedDependenciesERNS2_17SceneQueryContextEE3__1NS_9allocatorISN_EEFvvEEclEv(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  os_signpost_id_t v4;
  uint8_t v5[16];

  if (GEOGetVectorKitPerformanceLog_onceToken != -1)
    dispatch_once(&GEOGetVectorKitPerformanceLog_onceToken, &__block_literal_global_13_11780);
  v2 = (id)GEOGetVectorKitPerformanceLog_log;
  v3 = v2;
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 80);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)v5 = 0;
    _os_signpost_emit_with_name_impl(&dword_19F029000, v3, OS_SIGNPOST_INTERVAL_END, v4, "SceneQueryLogic", (const char *)&unk_1A0189141, v5, 2u);
  }

}

void _ZNSt3__110__function6__funcIZN2md15SceneQueryLogic29runBeforeLayoutAtVariableRateERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_13CameraContextENS2_15RegistryContextENS2_17NavigationContextENS2_17StyleLogicContextENS2_15SettingsContextEEEENS9_IJEEEEE20ResolvedDependenciesERNS2_17SceneQueryContextEE3__0NS_9allocatorISN_EEFvvEEclEv(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  os_signpost_id_t v4;
  uint8_t v5[16];

  if (GEOGetVectorKitPerformanceLog_onceToken != -1)
    dispatch_once(&GEOGetVectorKitPerformanceLog_onceToken, &__block_literal_global_13_11780);
  v2 = (id)GEOGetVectorKitPerformanceLog_log;
  v3 = v2;
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 80);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)v5 = 0;
    _os_signpost_emit_with_name_impl(&dword_19F029000, v3, OS_SIGNPOST_INTERVAL_BEGIN, v4, "SceneQueryLogic", (const char *)&unk_1A0189141, v5, 2u);
  }

}

void _ZNSt3__110__function6__funcIZN2md14LayerDataLogic29runBeforeLayoutAtVariableRateERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJEEESA_EE20ResolvedDependenciesERNS2_21LayerDataLogicContextEE3__0NS_9allocatorISH_EEFvvEEclEv(uint64_t a1)
{
  os_signpost_id_t v2;
  NSObject *v3;
  uint8_t v4[16];

  if (GEOGetVectorKitPerformanceLog_onceToken != -1)
    dispatch_once(&GEOGetVectorKitPerformanceLog_onceToken, &__block_literal_global_13_11780);
  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 80);
  if (v2 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    v3 = GEOGetVectorKitPerformanceLog_log;
    if (os_signpost_enabled((os_log_t)GEOGetVectorKitPerformanceLog_log))
    {
      *(_WORD *)v4 = 0;
      _os_signpost_emit_with_name_impl(&dword_19F029000, v3, OS_SIGNPOST_INTERVAL_BEGIN, v2, "LayerDataLogicVariableRate", (const char *)&unk_1A0189141, v4, 2u);
    }
  }
}

void _ZNSt3__110__function6__funcIZN2md13RegistryLogic29runBeforeLayoutAtVariableRateERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_12SceneContextEEEENS9_IJEEEEE20ResolvedDependenciesERNS2_15RegistryContextEE3__1NS_9allocatorISJ_EEFvvEEclEv(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  os_signpost_id_t v4;
  uint8_t v5[16];

  if (GEOGetVectorKitPerformanceLog_onceToken != -1)
    dispatch_once(&GEOGetVectorKitPerformanceLog_onceToken, &__block_literal_global_13_11780);
  v2 = (id)GEOGetVectorKitPerformanceLog_log;
  v3 = v2;
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 80);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)v5 = 0;
    _os_signpost_emit_with_name_impl(&dword_19F029000, v3, OS_SIGNPOST_INTERVAL_END, v4, "RegistryLogic", (const char *)&unk_1A0189141, v5, 2u);
  }

}

void _ZNSt3__110__function6__funcIZN2md13RegistryLogic29runBeforeLayoutAtVariableRateERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_12SceneContextEEEENS9_IJEEEEE20ResolvedDependenciesERNS2_15RegistryContextEE3__0NS_9allocatorISJ_EEFvvEEclEv(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  os_signpost_id_t v4;
  uint8_t v5[16];

  if (GEOGetVectorKitPerformanceLog_onceToken != -1)
    dispatch_once(&GEOGetVectorKitPerformanceLog_onceToken, &__block_literal_global_13_11780);
  v2 = (id)GEOGetVectorKitPerformanceLog_log;
  v3 = v2;
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 80);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)v5 = 0;
    _os_signpost_emit_with_name_impl(&dword_19F029000, v3, OS_SIGNPOST_INTERVAL_BEGIN, v4, "RegistryLogic", (const char *)&unk_1A0189141, v5, 2u);
  }

}

void _ZNSt3__110__function6__funcIZN2md13MaterialLogic29runBeforeLayoutAtVariableRateERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_12AssetContextENS2_25IdentifiedResourceContextENS2_15RegistryContextENS2_17SceneQueryContextENS2_17StyleLogicContextEEEENS9_IJEEEEE20ResolvedDependenciesERNS2_15MaterialContextEE3__1NS_9allocatorISN_EEFvvEEclEv(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  os_signpost_id_t v4;
  uint8_t v5[16];

  if (GEOGetVectorKitPerformanceLog_onceToken != -1)
    dispatch_once(&GEOGetVectorKitPerformanceLog_onceToken, &__block_literal_global_13_11780);
  v2 = (id)GEOGetVectorKitPerformanceLog_log;
  v3 = v2;
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 80);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)v5 = 0;
    _os_signpost_emit_with_name_impl(&dword_19F029000, v3, OS_SIGNPOST_INTERVAL_END, v4, "MaterialLogic", (const char *)&unk_1A0189141, v5, 2u);
  }

}

void _ZNSt3__110__function6__funcIZN2md13MaterialLogic29runBeforeLayoutAtVariableRateERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_12AssetContextENS2_25IdentifiedResourceContextENS2_15RegistryContextENS2_17SceneQueryContextENS2_17StyleLogicContextEEEENS9_IJEEEEE20ResolvedDependenciesERNS2_15MaterialContextEE3__0NS_9allocatorISN_EEFvvEEclEv(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  os_signpost_id_t v4;
  uint8_t v5[16];

  if (GEOGetVectorKitPerformanceLog_onceToken != -1)
    dispatch_once(&GEOGetVectorKitPerformanceLog_onceToken, &__block_literal_global_13_11780);
  v2 = (id)GEOGetVectorKitPerformanceLog_log;
  v3 = v2;
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 80);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)v5 = 0;
    _os_signpost_emit_with_name_impl(&dword_19F029000, v3, OS_SIGNPOST_INTERVAL_BEGIN, v4, "MaterialLogic", (const char *)&unk_1A0189141, v5, 2u);
  }

}

void _ZNSt3__110__function6__funcIZN2md10AssetLogic29runBeforeLayoutAtVariableRateERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_25IdentifiedResourceContextEEEENS9_IJEEEEE20ResolvedDependenciesERNS2_12AssetContextEE3__1NS_9allocatorISJ_EEFvvEEclEv(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  os_signpost_id_t v4;
  uint8_t v5[16];

  if (GEOGetVectorKitPerformanceLog_onceToken != -1)
    dispatch_once(&GEOGetVectorKitPerformanceLog_onceToken, &__block_literal_global_13_11780);
  v2 = (id)GEOGetVectorKitPerformanceLog_log;
  v3 = v2;
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 80);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)v5 = 0;
    _os_signpost_emit_with_name_impl(&dword_19F029000, v3, OS_SIGNPOST_INTERVAL_END, v4, "AssetLogic", (const char *)&unk_1A0189141, v5, 2u);
  }

}

void _ZNSt3__110__function6__funcIZN2md10AssetLogic29runBeforeLayoutAtVariableRateERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_25IdentifiedResourceContextEEEENS9_IJEEEEE20ResolvedDependenciesERNS2_12AssetContextEE3__0NS_9allocatorISJ_EEFvvEEclEv(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  os_signpost_id_t v4;
  uint8_t v5[16];

  if (GEOGetVectorKitPerformanceLog_onceToken != -1)
    dispatch_once(&GEOGetVectorKitPerformanceLog_onceToken, &__block_literal_global_13_11780);
  v2 = (id)GEOGetVectorKitPerformanceLog_log;
  v3 = v2;
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 80);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)v5 = 0;
    _os_signpost_emit_with_name_impl(&dword_19F029000, v3, OS_SIGNPOST_INTERVAL_BEGIN, v4, "AssetLogic", (const char *)&unk_1A0189141, v5, 2u);
  }

}

uint64_t _ZNKSt3__110__function6__funcIZN2md20PendingRegistryLogic29runBeforeLayoutAtVariableRateERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_19PendingSceneContextEEEENS9_IJEEEEE20ResolvedDependenciesERNS2_22PendingRegistryContextEE3__1NS_9allocatorISJ_EEFvvEE7__cloneEPNS0_6__baseISM_EE(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42D0670;
  a2[1] = v2;
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZN2md15SceneQueryLogic29runBeforeLayoutAtVariableRateERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_13CameraContextENS2_15RegistryContextENS2_17NavigationContextENS2_17StyleLogicContextENS2_15SettingsContextEEEENS9_IJEEEEE20ResolvedDependenciesERNS2_17SceneQueryContextEE3__1NS_9allocatorISN_EEFvvEE7__cloneEPNS0_6__baseISQ_EE(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42CCBA8;
  a2[1] = v2;
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZN2md14LayerDataLogic29runBeforeLayoutAtVariableRateERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJEEESA_EE20ResolvedDependenciesERNS2_21LayerDataLogicContextEE3__1NS_9allocatorISH_EEFvvEE7__cloneEPNS0_6__baseISK_EE(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42CBE70;
  a2[1] = v2;
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZN2md13RegistryLogic29runBeforeLayoutAtVariableRateERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_12SceneContextEEEENS9_IJEEEEE20ResolvedDependenciesERNS2_15RegistryContextEE3__1NS_9allocatorISJ_EEFvvEE7__cloneEPNS0_6__baseISM_EE(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42CB9F0;
  a2[1] = v2;
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZN2md13MaterialLogic29runBeforeLayoutAtVariableRateERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_12AssetContextENS2_25IdentifiedResourceContextENS2_15RegistryContextENS2_17SceneQueryContextENS2_17StyleLogicContextEEEENS9_IJEEEEE20ResolvedDependenciesERNS2_15MaterialContextEE3__1NS_9allocatorISN_EEFvvEE7__cloneEPNS0_6__baseISQ_EE(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42CB210;
  a2[1] = v2;
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZN2md10AssetLogic29runBeforeLayoutAtVariableRateERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_25IdentifiedResourceContextEEEENS9_IJEEEEE20ResolvedDependenciesERNS2_12AssetContextEE3__1NS_9allocatorISJ_EEFvvEE7__cloneEPNS0_6__baseISM_EE(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42C85A0;
  a2[1] = v2;
  return result;
}

void std::__function::__func<md::LabelTile::LabelTile(geo::QuadTile const&,std::shared_ptr<geo::codec::VectorTile> const&,md::LabelTileType,std::shared_ptr<md::LabelManager> const&,BOOL,std::shared_ptr<md::LabelSelectedFeatureInfo>,md::mun::MuninMetadata *)::$_1,std::allocator<md::LabelTile::LabelTile(geo::QuadTile const&,std::shared_ptr<geo::codec::VectorTile> const&,md::LabelTileType,std::shared_ptr<md::LabelManager> const&,BOOL,std::shared_ptr<md::LabelSelectedFeatureInfo>,md::mun::MuninMetadata *)::$_1>,void ()(void)>::operator()()
{
  NSObject *v0;
  uint8_t v1[16];

  if (GEOGetVectorKitPerformanceLog_onceToken != -1)
    dispatch_once(&GEOGetVectorKitPerformanceLog_onceToken, &__block_literal_global_13_11780);
  v0 = (id)GEOGetVectorKitPerformanceLog_log;
  if (os_signpost_enabled(v0))
  {
    *(_WORD *)v1 = 0;
    _os_signpost_emit_with_name_impl(&dword_19F029000, v0, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "LabelsTileDecode", (const char *)&unk_1A0189141, v1, 2u);
  }

}

void std::__function::__func<md::LabelTile::LabelTile(geo::QuadTile const&,std::shared_ptr<geo::codec::VectorTile> const&,md::LabelTileType,std::shared_ptr<md::LabelManager> const&,BOOL,std::shared_ptr<md::LabelSelectedFeatureInfo>,md::mun::MuninMetadata *)::$_0,std::allocator<md::LabelTile::LabelTile(geo::QuadTile const&,std::shared_ptr<geo::codec::VectorTile> const&,md::LabelTileType,std::shared_ptr<md::LabelManager> const&,BOOL,std::shared_ptr<md::LabelSelectedFeatureInfo>,md::mun::MuninMetadata *)::$_0>,void ()(void)>::operator()()
{
  NSObject *v0;
  uint8_t v1[16];

  if (GEOGetVectorKitPerformanceLog_onceToken != -1)
    dispatch_once(&GEOGetVectorKitPerformanceLog_onceToken, &__block_literal_global_13_11780);
  v0 = (id)GEOGetVectorKitPerformanceLog_log;
  if (os_signpost_enabled(v0))
  {
    *(_WORD *)v1 = 0;
    _os_signpost_emit_with_name_impl(&dword_19F029000, v0, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "LabelsTileDecode", (const char *)&unk_1A0189141, v1, 2u);
  }

}

void std::__function::__func<md::LabelTile::LabelTile(geo::QuadTile const&,std::shared_ptr<geo::codec::VectorTile> const&,md::LabelTileType,std::shared_ptr<md::LabelManager> const&,BOOL,std::shared_ptr<md::LabelSelectedFeatureInfo>,md::mun::MuninMetadata *)::$_1,std::allocator<md::LabelTile::LabelTile(geo::QuadTile const&,std::shared_ptr<geo::codec::VectorTile> const&,md::LabelTileType,std::shared_ptr<md::LabelManager> const&,BOOL,std::shared_ptr<md::LabelSelectedFeatureInfo>,md::mun::MuninMetadata *)::$_1>,void ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E42D4918;
}

void std::__function::__func<md::VenueRenderLayer::layout(md::LayoutContext const&)::$_1,std::allocator<md::VenueRenderLayer::layout(md::LayoutContext const&)::$_1>,void ()(void)>::operator()(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  os_signpost_id_t v4;
  uint8_t v5[16];

  if (GEOGetVectorKitPerformanceLog_onceToken != -1)
    dispatch_once(&GEOGetVectorKitPerformanceLog_onceToken, &__block_literal_global_13_11780);
  v2 = (id)GEOGetVectorKitPerformanceLog_log;
  v3 = v2;
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 80);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)v5 = 0;
    _os_signpost_emit_with_name_impl(&dword_19F029000, v3, OS_SIGNPOST_INTERVAL_END, v4, "VenueLayout", (const char *)&unk_1A0189141, v5, 2u);
  }

}

void _ZNSt3__110__function6__funcIZN2md14LayerDataLogic29runBeforeLayoutAtVariableRateERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJEEESA_EE20ResolvedDependenciesERNS2_21LayerDataLogicContextEE3__1NS_9allocatorISH_EEFvvEEclEv(uint64_t a1)
{
  os_signpost_id_t v2;
  NSObject *v3;
  uint8_t v4[16];

  if (GEOGetVectorKitPerformanceLog_onceToken != -1)
    dispatch_once(&GEOGetVectorKitPerformanceLog_onceToken, &__block_literal_global_13_11780);
  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 80);
  if (v2 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    v3 = GEOGetVectorKitPerformanceLog_log;
    if (os_signpost_enabled((os_log_t)GEOGetVectorKitPerformanceLog_log))
    {
      *(_WORD *)v4 = 0;
      _os_signpost_emit_with_name_impl(&dword_19F029000, v3, OS_SIGNPOST_INTERVAL_END, v2, "LayerDataLogicVariableRate", (const char *)&unk_1A0189141, v4, 2u);
    }
  }
}

void _ZNSt3__110__function6__funcIZN2md20PendingRegistryLogic29runBeforeLayoutAtVariableRateERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_19PendingSceneContextEEEENS9_IJEEEEE20ResolvedDependenciesERNS2_22PendingRegistryContextEE3__1NS_9allocatorISJ_EEFvvEEclEv(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  os_signpost_id_t v4;
  uint8_t v5[16];

  if (GEOGetVectorKitPerformanceLog_onceToken != -1)
    dispatch_once(&GEOGetVectorKitPerformanceLog_onceToken, &__block_literal_global_13_11780);
  v2 = (id)GEOGetVectorKitPerformanceLog_log;
  v3 = v2;
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 80);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)v5 = 0;
    _os_signpost_emit_with_name_impl(&dword_19F029000, v3, OS_SIGNPOST_INTERVAL_END, v4, "PendingRegistryLogic", (const char *)&unk_1A0189141, v5, 2u);
  }

}

uint64_t std::__function::__func<md::LabelManager::LabelManager(gdc::WorldType,md::LabelManagerCreationParams const&)::$_1,std::allocator<md::LabelManager::LabelManager(gdc::WorldType,md::LabelManagerCreationParams const&)::$_1>,void ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42CA718;
  a2[1] = v2;
  return result;
}

void std::__function::__func<md::StandardLabeler::collideLabels(void)::$_1,std::allocator<md::StandardLabeler::collideLabels(void)::$_1>,void ()(void)>::operator()()
{
  NSObject *v0;
  uint8_t v1[16];

  if (GEOGetVectorKitPerformanceLog_onceToken != -1)
    dispatch_once(&GEOGetVectorKitPerformanceLog_onceToken, &__block_literal_global_13_11780);
  v0 = (id)GEOGetVectorKitPerformanceLog_log;
  if (os_signpost_enabled(v0))
  {
    *(_WORD *)v1 = 0;
    _os_signpost_emit_with_name_impl(&dword_19F029000, v0, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "LabelsCollision", (const char *)&unk_1A0189141, v1, 2u);
  }

}

void std::__function::__func<md::StandardLabeler::collideLabels(void)::$_0,std::allocator<md::StandardLabeler::collideLabels(void)::$_0>,void ()(void)>::operator()()
{
  NSObject *v0;
  uint8_t v1[16];

  if (GEOGetVectorKitPerformanceLog_onceToken != -1)
    dispatch_once(&GEOGetVectorKitPerformanceLog_onceToken, &__block_literal_global_13_11780);
  v0 = (id)GEOGetVectorKitPerformanceLog_log;
  if (os_signpost_enabled(v0))
  {
    *(_WORD *)v1 = 0;
    _os_signpost_emit_with_name_impl(&dword_19F029000, v0, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "LabelsCollision", (const char *)&unk_1A0189141, v1, 2u);
  }

}

void std::__function::__func<md::StandardLabeler::collideLabels(void)::$_1,std::allocator<md::StandardLabeler::collideLabels(void)::$_1>,void ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E42CCC38;
}

uint64_t std::__function::__func<md::LabelManager::LabelManager(gdc::WorldType,md::LabelManagerCreationParams const&)::$_0,std::allocator<md::LabelManager::LabelManager(gdc::WorldType,md::LabelManagerCreationParams const&)::$_0>,void ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42CA6D0;
  a2[1] = v2;
  return result;
}

void std::__function::__func<md::LabelManager::stylesheetDidFinishDecodingGlobalProperties(std::shared_ptr<gss::StylesheetManager<gss::PropertyID>> const&)::$_0,std::allocator<md::LabelManager::stylesheetDidFinishDecodingGlobalProperties(std::shared_ptr<gss::StylesheetManager<gss::PropertyID>> const&)::$_0>,void ()(void)>::destroy_deallocate(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = (std::__shared_weak_count *)__p[3];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  operator delete(__p);
}

void std::__function::__func<md::LabelCustomFeatureSupport::addDataSource(objc_object  {objcproto25VKCustomFeatureDataSource}*)::$_0,std::allocator<objc_object  {objcproto25VKCustomFeatureDataSource}*>,void ()(void)>::destroy(uint64_t a1)
{

}

void std::__function::__func<md::LabelTextDataLoader::finishBatch(void)::$_0::operator() const(void)::{lambda(void)#3},std::allocator<md::LabelTextDataLoader::finishBatch(void)::$_0::operator() const(void)::{lambda(void)#3}>,void ()(void)>::destroy_deallocate(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;

  v2 = (std::__shared_weak_count *)__p[4];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)__p[2];
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)__p[2];
    if (!v5)
      goto LABEL_11;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  operator delete(__p);
}

void std::__function::__func<md::LabelTextDataLoader::finishBatch(void)::$_0,std::allocator<md::LabelTextDataLoader::finishBatch(void)::$_0>,void ()(void)>::destroy_deallocate(uint64_t *a1)
{
  std::__function::__alloc_func<md::LabelTextDataLoader::finishBatch(void)::$_0,std::allocator<md::LabelTextDataLoader::finishBatch(void)::$_0>,void ()(void)>::destroy[abi:nn180100](a1 + 1);
  operator delete(a1);
}

void std::__function::__func<gss::StyleSheet<gss::ScenePropertyID>::construct(unsigned char const*,unsigned long,std::string const&,float,gss::TargetDisplay,BOOL,std::shared_ptr<std::unordered_map<std::string,int,std::hash<std::string>,std::equal_to<std::string>,geo::StdAllocator<std::pair<std::string const,int>,gss::Allocator>>> const&,std::shared_ptr<std::unordered_map<std::string,int,std::hash<std::string>,std::equal_to<std::string>,geo::StdAllocator<std::pair<std::string const,int>,gss::Allocator>>> const&,BOOL,BOOL,std::function<void ()(BOOL)>)::{lambda(void)#1},std::allocator<gss::StyleSheet<gss::ScenePropertyID>::construct(unsigned char const*,unsigned long,std::string const&,float,gss::TargetDisplay,BOOL,std::shared_ptr<std::unordered_map<std::string,int,std::hash<std::string>,std::equal_to<std::string>,geo::StdAllocator<std::pair<std::string const,int>,gss::Allocator>>> const&,std::shared_ptr<std::unordered_map<std::string,int,std::hash<std::string>,std::equal_to<std::string>,geo::StdAllocator<std::pair<std::string const,int>,gss::Allocator>>> const&,BOOL,BOOL,std::function<void ()(BOOL)>)::{lambda(void)#1}>,void ()(void)>::destroy_deallocate(char *__p)
{
  char *v2;
  char *v3;
  uint64_t v4;

  v2 = __p + 40;
  v3 = (char *)*((_QWORD *)__p + 8);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
  }
  operator delete(__p);
}

void std::__function::__func<gss::StyleSheet<gss::PropertyID>::construct(unsigned char const*,unsigned long,std::string const&,float,gss::TargetDisplay,BOOL,std::shared_ptr<std::unordered_map<std::string,int,std::hash<std::string>,std::equal_to<std::string>,geo::StdAllocator<std::pair<std::string const,int>,gss::Allocator>>> const&,std::shared_ptr<std::unordered_map<std::string,int,std::hash<std::string>,std::equal_to<std::string>,geo::StdAllocator<std::pair<std::string const,int>,gss::Allocator>>> const&,BOOL,BOOL,std::function<void ()(BOOL)>)::{lambda(void)#1},std::allocator<gss::StyleSheet<gss::PropertyID>::construct(unsigned char const*,unsigned long,std::string const&,float,gss::TargetDisplay,BOOL,std::shared_ptr<std::unordered_map<std::string,int,std::hash<std::string>,std::equal_to<std::string>,geo::StdAllocator<std::pair<std::string const,int>,gss::Allocator>>> const&,std::shared_ptr<std::unordered_map<std::string,int,std::hash<std::string>,std::equal_to<std::string>,geo::StdAllocator<std::pair<std::string const,int>,gss::Allocator>>> const&,BOOL,BOOL,std::function<void ()(BOOL)>)::{lambda(void)#1}>,void ()(void)>::destroy_deallocate(char *__p)
{
  char *v2;
  char *v3;
  uint64_t v4;

  v2 = __p + 40;
  v3 = (char *)*((_QWORD *)__p + 8);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
  }
  operator delete(__p);
}

void std::__function::__func<md::DrapingTaskScheduler::reset(void)::$_0,std::allocator<md::DrapingTaskScheduler::reset(void)::$_0>,void ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E42D0598;
}

void std::__function::__func<md::RoadRenderLayer::layout(md::LayoutContext const&)::$_1,std::allocator<md::RoadRenderLayer::layout(md::LayoutContext const&)::$_1>,void ()(void)>::operator()(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  os_signpost_id_t v4;
  uint8_t v5[16];

  if (GEOGetVectorKitPerformanceLog_onceToken != -1)
    dispatch_once(&GEOGetVectorKitPerformanceLog_onceToken, &__block_literal_global_13_11780);
  v2 = (id)GEOGetVectorKitPerformanceLog_log;
  v3 = v2;
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 80);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)v5 = 0;
    _os_signpost_emit_with_name_impl(&dword_19F029000, v3, OS_SIGNPOST_INTERVAL_END, v4, "RoadLayout", (const char *)&unk_1A0189141, v5, 2u);
  }

}

void std::__function::__func<md::RoadRenderLayer::layout(md::LayoutContext const&)::$_0,std::allocator<md::RoadRenderLayer::layout(md::LayoutContext const&)::$_0>,void ()(void)>::operator()(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  os_signpost_id_t v4;
  uint8_t v5[16];

  if (GEOGetVectorKitPerformanceLog_onceToken != -1)
    dispatch_once(&GEOGetVectorKitPerformanceLog_onceToken, &__block_literal_global_13_11780);
  v2 = (id)GEOGetVectorKitPerformanceLog_log;
  v3 = v2;
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 80);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)v5 = 0;
    _os_signpost_emit_with_name_impl(&dword_19F029000, v3, OS_SIGNPOST_INTERVAL_BEGIN, v4, "RoadLayout", (const char *)&unk_1A0189141, v5, 2u);
  }

}

char *std::__function::__func<gss::StyleSheet<gss::ScenePropertyID>::construct(unsigned char const*,unsigned long,std::string const&,float,gss::TargetDisplay,BOOL,std::shared_ptr<std::unordered_map<std::string,int,std::hash<std::string>,std::equal_to<std::string>,geo::StdAllocator<std::pair<std::string const,int>,gss::Allocator>>> const&,std::shared_ptr<std::unordered_map<std::string,int,std::hash<std::string>,std::equal_to<std::string>,geo::StdAllocator<std::pair<std::string const,int>,gss::Allocator>>> const&,BOOL,BOOL,std::function<void ()(BOOL)>)::{lambda(void)#1},std::allocator<gss::StyleSheet<gss::ScenePropertyID>::construct(unsigned char const*,unsigned long,std::string const&,float,gss::TargetDisplay,BOOL,std::shared_ptr<std::unordered_map<std::string,int,std::hash<std::string>,std::equal_to<std::string>,geo::StdAllocator<std::pair<std::string const,int>,gss::Allocator>>> const&,std::shared_ptr<std::unordered_map<std::string,int,std::hash<std::string>,std::equal_to<std::string>,geo::StdAllocator<std::pair<std::string const,int>,gss::Allocator>>> const&,BOOL,BOOL,std::function<void ()(BOOL)>)::{lambda(void)#1}>,void ()(void)>::__clone(uint64_t a1)
{
  char *v2;
  uint64_t v3;

  v2 = (char *)operator new(0x48uLL);
  *(_QWORD *)v2 = &off_1E42D8240;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v2 + 17) = *(_OWORD *)(a1 + 17);
  v3 = *(_QWORD *)(a1 + 64);
  if (v3)
  {
    if (v3 == a1 + 40)
    {
      *((_QWORD *)v2 + 8) = v2 + 40;
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 24))(v3);
      return v2;
    }
    v3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 16))(v3);
  }
  *((_QWORD *)v2 + 8) = v3;
  return v2;
}

void sub_19F0D8EA4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

char *std::__function::__func<gss::StyleSheet<gss::PropertyID>::construct(unsigned char const*,unsigned long,std::string const&,float,gss::TargetDisplay,BOOL,std::shared_ptr<std::unordered_map<std::string,int,std::hash<std::string>,std::equal_to<std::string>,geo::StdAllocator<std::pair<std::string const,int>,gss::Allocator>>> const&,std::shared_ptr<std::unordered_map<std::string,int,std::hash<std::string>,std::equal_to<std::string>,geo::StdAllocator<std::pair<std::string const,int>,gss::Allocator>>> const&,BOOL,BOOL,std::function<void ()(BOOL)>)::{lambda(void)#1},std::allocator<gss::StyleSheet<gss::PropertyID>::construct(unsigned char const*,unsigned long,std::string const&,float,gss::TargetDisplay,BOOL,std::shared_ptr<std::unordered_map<std::string,int,std::hash<std::string>,std::equal_to<std::string>,geo::StdAllocator<std::pair<std::string const,int>,gss::Allocator>>> const&,std::shared_ptr<std::unordered_map<std::string,int,std::hash<std::string>,std::equal_to<std::string>,geo::StdAllocator<std::pair<std::string const,int>,gss::Allocator>>> const&,BOOL,BOOL,std::function<void ()(BOOL)>)::{lambda(void)#1}>,void ()(void)>::__clone(uint64_t a1)
{
  char *v2;
  uint64_t v3;

  v2 = (char *)operator new(0x48uLL);
  *(_QWORD *)v2 = &off_1E42D81F8;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v2 + 17) = *(_OWORD *)(a1 + 17);
  v3 = *(_QWORD *)(a1 + 64);
  if (v3)
  {
    if (v3 == a1 + 40)
    {
      *((_QWORD *)v2 + 8) = v2 + 40;
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 24))(v3);
      return v2;
    }
    v3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 16))(v3);
  }
  *((_QWORD *)v2 + 8) = v3;
  return v2;
}

void sub_19F0D8F3C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<md::MapEngine::MapEngine(float,float,float,BOOL,VKMapViewPurpose,std::shared_ptr<md::TaskContext> const&,VKMapPurpose,std::unique_ptr<md::AnimationManager>,geo::linear_map<md::MapEngineSetting,long long,std::equal_to<md::MapEngineSetting>,std::allocator<std::pair<md::MapEngineSetting,long long>>,std::vector<std::pair<md::MapEngineSetting,long long>>> const&,unsigned long long,GEOApplicationAuditToken *)::$_29,std::allocator<md::MapEngine::MapEngine(float,float,float,BOOL,VKMapViewPurpose,std::shared_ptr<md::TaskContext> const&,VKMapPurpose,std::unique_ptr<md::AnimationManager>,geo::linear_map<md::MapEngineSetting,long long,std::equal_to<md::MapEngineSetting>,std::allocator<std::pair<md::MapEngineSetting,long long>>,std::vector<std::pair<md::MapEngineSetting,long long>>> const&,unsigned long long,GEOApplicationAuditToken *)::$_29>,void ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E427CED0;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<md::RoadRenderLayer::layout(md::LayoutContext const&)::$_1,std::allocator<md::RoadRenderLayer::layout(md::LayoutContext const&)::$_1>,void ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42CC920;
  a2[1] = v2;
  return result;
}

char *std::__function::__func<md::LabelManager::stylesheetDidFinishDecodingGlobalProperties(std::shared_ptr<gss::StylesheetManager<gss::PropertyID>> const&)::$_0,std::allocator<md::LabelManager::stylesheetDidFinishDecodingGlobalProperties(std::shared_ptr<gss::StylesheetManager<gss::PropertyID>> const&)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  char *result;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  result = (char *)operator new(0x20uLL);
  *(_QWORD *)result = &off_1E42CA688;
  *(_OWORD *)(result + 8) = *(_OWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 24);
  *((_QWORD *)result + 3) = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

id std::__function::__func<md::LabelCustomFeatureSupport::addDataSource(objc_object  {objcproto25VKCustomFeatureDataSource}*)::$_0,std::allocator<objc_object  {objcproto25VKCustomFeatureDataSource}*>,void ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  void *v4;
  id result;

  v3 = *(_QWORD *)(a1 + 8);
  v4 = *(void **)(a1 + 16);
  *a2 = &off_1E42D2B90;
  a2[1] = v3;
  result = v4;
  a2[2] = result;
  return result;
}

void std::__function::__func<md::LabelTextDataLoader::finishBatch(void)::$_0::operator() const(void)::{lambda(void)#1},std::allocator<md::LabelTextDataLoader::finishBatch(void)::$_0::operator() const(void)::{lambda(void)#1}>,void ()(void)>::operator()()
{
  NSObject *v0;
  uint8_t v1[16];

  if (GEOGetVectorKitPerformanceLog_onceToken != -1)
    dispatch_once(&GEOGetVectorKitPerformanceLog_onceToken, &__block_literal_global_13_11780);
  v0 = (id)GEOGetVectorKitPerformanceLog_log;
  if (os_signpost_enabled(v0))
  {
    *(_WORD *)v1 = 0;
    _os_signpost_emit_with_name_impl(&dword_19F029000, v0, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "LabelsGenerateGlyphInfos", (const char *)&unk_1A0189141, v1, 2u);
  }

}

void std::__function::__func<md::LabelTextDataLoader::finishBatch(void)::$_0::operator() const(void)::{lambda(void)#2},std::allocator<md::LabelTextDataLoader::finishBatch(void)::$_0::operator() const(void)::{lambda(void)#2}>,void ()(void)>::operator()()
{
  NSObject *v0;
  uint8_t v1[16];

  if (GEOGetVectorKitPerformanceLog_onceToken != -1)
    dispatch_once(&GEOGetVectorKitPerformanceLog_onceToken, &__block_literal_global_13_11780);
  v0 = (id)GEOGetVectorKitPerformanceLog_log;
  if (os_signpost_enabled(v0))
  {
    *(_WORD *)v1 = 0;
    _os_signpost_emit_with_name_impl(&dword_19F029000, v0, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "LabelsGenerateGlyphInfos", (const char *)&unk_1A0189141, v1, 2u);
  }

}

_QWORD *std::__function::__func<md::LabelTextDataLoader::finishBatch(void)::$_0::operator() const(void)::{lambda(void)#3},std::allocator<md::LabelTextDataLoader::finishBatch(void)::$_0::operator() const(void)::{lambda(void)#3}>,void ()(void)>::__clone(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;

  result = operator new(0x28uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_1E42D9C68;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = a1[4];
  result[3] = a1[3];
  result[4] = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  return result;
}

void std::__function::__func<md::LabelTextDataLoader::finishBatch(void)::$_0::operator() const(void)::{lambda(void)#2},std::allocator<md::LabelTextDataLoader::finishBatch(void)::$_0::operator() const(void)::{lambda(void)#2}>,void ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E42D9C20;
}

void std::__function::__func<md::LabelGlyphImageLoader::startQueuedLoads(void)::$_0::operator() const(void)::{lambda(void)#3},std::allocator<md::LabelGlyphImageLoader::startQueuedLoads(void)::$_0::operator() const(void)::{lambda(void)#3}>,void ()(void)>::destroy_deallocate(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;

  v2 = (std::__shared_weak_count *)__p[4];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)__p[2];
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)__p[2];
    if (!v5)
      goto LABEL_11;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  operator delete(__p);
}

void std::__function::__func<md::LabelGlyphImageLoader::startQueuedLoads(void)::$_0,std::allocator<md::LabelGlyphImageLoader::startQueuedLoads(void)::$_0>,void ()(void)>::destroy_deallocate(void *a1)
{
  std::__function::__alloc_func<md::LabelGlyphImageLoader::startQueuedLoads(void)::$_0,std::allocator<md::LabelGlyphImageLoader::startQueuedLoads(void)::$_0>,void ()(void)>::destroy[abi:nn180100]((uint64_t)a1 + 8);
  operator delete(a1);
}

void std::__function::__func<md::MapEngine::MapEngine(float,float,float,BOOL,VKMapViewPurpose,std::shared_ptr<md::TaskContext> const&,VKMapPurpose,std::unique_ptr<md::AnimationManager>,geo::linear_map<md::MapEngineSetting,long long,std::equal_to<md::MapEngineSetting>,std::allocator<std::pair<md::MapEngineSetting,long long>>,std::vector<std::pair<md::MapEngineSetting,long long>>> const&,unsigned long long,GEOApplicationAuditToken *)::$_1,std::allocator<md::MapEngine::MapEngine(float,float,float,BOOL,VKMapViewPurpose,std::shared_ptr<md::TaskContext> const&,VKMapPurpose,std::unique_ptr<md::AnimationManager>,geo::linear_map<md::MapEngineSetting,long long,std::equal_to<md::MapEngineSetting>,std::allocator<std::pair<md::MapEngineSetting,long long>>,std::vector<std::pair<md::MapEngineSetting,long long>>> const&,unsigned long long,GEOApplicationAuditToken *)::$_1>,void ()(void)>::operator()(uint64_t a1)
{
  uint64_t v1;
  NSObject *v2;
  NSObject *v3;
  os_signpost_id_t v4;
  uint8_t v5[16];

  v1 = *(_QWORD *)(a1 + 8);
  if (GEOGetVectorKitPerformanceLog_onceToken != -1)
    dispatch_once(&GEOGetVectorKitPerformanceLog_onceToken, &__block_literal_global_13_11780);
  v2 = (id)GEOGetVectorKitPerformanceLog_log;
  v3 = v2;
  v4 = *(_QWORD *)(v1 + 1216);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)v5 = 0;
    _os_signpost_emit_with_name_impl(&dword_19F029000, v3, OS_SIGNPOST_INTERVAL_END, v4, "InitMapEngine", (const char *)&unk_1A0189141, v5, 2u);
  }

}

void std::__function::__func<md::MapEngine::MapEngine(float,float,float,BOOL,VKMapViewPurpose,std::shared_ptr<md::TaskContext> const&,VKMapPurpose,std::unique_ptr<md::AnimationManager>,geo::linear_map<md::MapEngineSetting,long long,std::equal_to<md::MapEngineSetting>,std::allocator<std::pair<md::MapEngineSetting,long long>>,std::vector<std::pair<md::MapEngineSetting,long long>>> const&,unsigned long long,GEOApplicationAuditToken *)::$_0,std::allocator<md::MapEngine::MapEngine(float,float,float,BOOL,VKMapViewPurpose,std::shared_ptr<md::TaskContext> const&,VKMapPurpose,std::unique_ptr<md::AnimationManager>,geo::linear_map<md::MapEngineSetting,long long,std::equal_to<md::MapEngineSetting>,std::allocator<std::pair<md::MapEngineSetting,long long>>,std::vector<std::pair<md::MapEngineSetting,long long>>> const&,unsigned long long,GEOApplicationAuditToken *)::$_0>,void ()(void)>::operator()(uint64_t a1)
{
  uint64_t v1;
  NSObject *v2;
  NSObject *v3;
  os_signpost_id_t v4;
  uint8_t v5[16];

  v1 = *(_QWORD *)(a1 + 8);
  if (GEOGetVectorKitPerformanceLog_onceToken != -1)
    dispatch_once(&GEOGetVectorKitPerformanceLog_onceToken, &__block_literal_global_13_11780);
  v2 = (id)GEOGetVectorKitPerformanceLog_log;
  v3 = v2;
  v4 = *(_QWORD *)(v1 + 1216);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)v5 = 0;
    _os_signpost_emit_with_name_impl(&dword_19F029000, v3, OS_SIGNPOST_INTERVAL_BEGIN, v4, "InitMapEngine", (const char *)&unk_1A0189141, v5, 2u);
  }

}

void std::__function::__func<md::World::World(VKSharedResources *,GEOApplicationAuditToken *,float,objc_object  {objcproto14MDRenderTarget}*,std::shared_ptr<md::TaskContext>,gdc::LoadingStatusTracker *,ggl::RenderTargetFormat const&,std::function<void ()(void)>,BOOL,md::RunLoopController *)::$_1,std::allocator<md::RunLoopController *>,std::function>::operator()()
{
  NSObject *v0;
  uint8_t v1[16];

  if (GEOGetVectorKitPerformanceLog_onceToken != -1)
    dispatch_once(&GEOGetVectorKitPerformanceLog_onceToken, &__block_literal_global_13_11780);
  v0 = (id)GEOGetVectorKitPerformanceLog_log;
  if (os_signpost_enabled(v0))
  {
    *(_WORD *)v1 = 0;
    _os_signpost_emit_with_name_impl(&dword_19F029000, v0, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "InitWorld", (const char *)&unk_1A0189141, v1, 2u);
  }

}

void std::__function::__func<md::World::World(VKSharedResources *,GEOApplicationAuditToken *,float,objc_object  {objcproto14MDRenderTarget}*,std::shared_ptr<md::TaskContext>,gdc::LoadingStatusTracker *,ggl::RenderTargetFormat const&,std::function<void ()(void)>,BOOL,md::RunLoopController *)::$_0,std::allocator<md::RunLoopController *>,std::function>::operator()()
{
  NSObject *v0;
  uint8_t v1[16];

  if (GEOGetVectorKitPerformanceLog_onceToken != -1)
    dispatch_once(&GEOGetVectorKitPerformanceLog_onceToken, &__block_literal_global_13_11780);
  v0 = (id)GEOGetVectorKitPerformanceLog_log;
  if (os_signpost_enabled(v0))
  {
    *(_WORD *)v1 = 0;
    _os_signpost_emit_with_name_impl(&dword_19F029000, v0, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "InitWorld", (const char *)&unk_1A0189141, v1, 2u);
  }

}

uint64_t std::__function::__func<md::MapEngine::MapEngine(float,float,float,BOOL,VKMapViewPurpose,std::shared_ptr<md::TaskContext> const&,VKMapPurpose,std::unique_ptr<md::AnimationManager>,geo::linear_map<md::MapEngineSetting,long long,std::equal_to<md::MapEngineSetting>,std::allocator<std::pair<md::MapEngineSetting,long long>>,std::vector<std::pair<md::MapEngineSetting,long long>>> const&,unsigned long long,GEOApplicationAuditToken *)::$_1,std::allocator<md::MapEngine::MapEngine(float,float,float,BOOL,VKMapViewPurpose,std::shared_ptr<md::TaskContext> const&,VKMapPurpose,std::unique_ptr<md::AnimationManager>,geo::linear_map<md::MapEngineSetting,long long,std::equal_to<md::MapEngineSetting>,std::allocator<std::pair<md::MapEngineSetting,long long>>,std::vector<std::pair<md::MapEngineSetting,long long>>> const&,unsigned long long,GEOApplicationAuditToken *)::$_1>,void ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42D4D98;
  a2[1] = v2;
  return result;
}

void std::__function::__func<md::World::World(VKSharedResources *,GEOApplicationAuditToken *,float,objc_object  {objcproto14MDRenderTarget}*,std::shared_ptr<md::TaskContext>,gdc::LoadingStatusTracker *,ggl::RenderTargetFormat const&,std::function<void ()(void)>,BOOL,md::RunLoopController *)::$_1,std::allocator<md::RunLoopController *>,std::function>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E42D4210;
}

void std::__function::__func<md::LabelGlyphImageLoader::startQueuedLoads(void)::$_0::operator() const(void)::{lambda(void)#1},std::allocator<md::LabelGlyphImageLoader::startQueuedLoads(void)::$_0::operator() const(void)::{lambda(void)#1}>,void ()(void)>::operator()()
{
  NSObject *v0;
  uint8_t v1[16];

  if (GEOGetVectorKitPerformanceLog_onceToken != -1)
    dispatch_once(&GEOGetVectorKitPerformanceLog_onceToken, &__block_literal_global_13_11780);
  v0 = (id)GEOGetVectorKitPerformanceLog_log;
  if (os_signpost_enabled(v0))
  {
    *(_WORD *)v1 = 0;
    _os_signpost_emit_with_name_impl(&dword_19F029000, v0, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "LabelsRenderGlyphs", (const char *)&unk_1A0189141, v1, 2u);
  }

}

void std::__function::__func<md::LabelGlyphImageLoader::startQueuedLoads(void)::$_0::operator() const(void)::{lambda(void)#2},std::allocator<md::LabelGlyphImageLoader::startQueuedLoads(void)::$_0::operator() const(void)::{lambda(void)#2}>,void ()(void)>::operator()()
{
  NSObject *v0;
  uint8_t v1[16];

  if (GEOGetVectorKitPerformanceLog_onceToken != -1)
    dispatch_once(&GEOGetVectorKitPerformanceLog_onceToken, &__block_literal_global_13_11780);
  v0 = (id)GEOGetVectorKitPerformanceLog_log;
  if (os_signpost_enabled(v0))
  {
    *(_WORD *)v1 = 0;
    _os_signpost_emit_with_name_impl(&dword_19F029000, v0, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "LabelsRenderGlyphs", (const char *)&unk_1A0189141, v1, 2u);
  }

}

void std::__function::__func<md::CoastlineRenderLayer::layout(md::LayoutContext const&)::$_1,std::allocator<md::CoastlineRenderLayer::layout(md::LayoutContext const&)::$_1>,void ()(void)>::operator()(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  os_signpost_id_t v4;
  uint8_t v5[16];

  if (GEOGetVectorKitPerformanceLog_onceToken != -1)
    dispatch_once(&GEOGetVectorKitPerformanceLog_onceToken, &__block_literal_global_13_11780);
  v2 = (id)GEOGetVectorKitPerformanceLog_log;
  v3 = v2;
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 80);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)v5 = 0;
    _os_signpost_emit_with_name_impl(&dword_19F029000, v3, OS_SIGNPOST_INTERVAL_END, v4, "CoastlineLayout", (const char *)&unk_1A0189141, v5, 2u);
  }

}

void std::__function::__func<md::CoastlineRenderLayer::layout(md::LayoutContext const&)::$_0,std::allocator<md::CoastlineRenderLayer::layout(md::LayoutContext const&)::$_0>,void ()(void)>::operator()(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  os_signpost_id_t v4;
  uint8_t v5[16];

  if (GEOGetVectorKitPerformanceLog_onceToken != -1)
    dispatch_once(&GEOGetVectorKitPerformanceLog_onceToken, &__block_literal_global_13_11780);
  v2 = (id)GEOGetVectorKitPerformanceLog_log;
  v3 = v2;
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 80);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)v5 = 0;
    _os_signpost_emit_with_name_impl(&dword_19F029000, v3, OS_SIGNPOST_INTERVAL_BEGIN, v4, "CoastlineLayout", (const char *)&unk_1A0189141, v5, 2u);
  }

}

void std::__function::__func<md::PolygonRenderLayer<(md::MapDataType)41,md::MapTileDataRenderable<md::PolygonTileData>>::layout(md::LayoutContext const&)::{lambda(void)#1},std::allocator<md::PolygonRenderLayer<(md::MapDataType)41,md::MapTileDataRenderable<md::PolygonTileData>>::layout(md::LayoutContext const&)::{lambda(void)#1}>,void ()(void)>::operator()(uint64_t a1)
{
  std::__invoke_void_return_wrapper<void,true>::__call[abi:nn180100]<md::PolygonRenderLayer<(md::MapDataType)59,md::MapTileDataRenderable<md::PolygonTileData>>::layout(md::LayoutContext const&)::{lambda(void)#1} &>(a1 + 8);
}

void std::__function::__func<md::PolygonRenderLayer<(md::MapDataType)41,md::MapTileDataRenderable<md::PolygonTileData>>::layout(md::LayoutContext const&)::{lambda(void)#2},std::allocator<md::PolygonRenderLayer<(md::MapDataType)41,md::MapTileDataRenderable<md::PolygonTileData>>::layout(md::LayoutContext const&)::{lambda(void)#2}>,void ()(void)>::operator()(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  os_signpost_id_t v4;
  uint8_t v5[16];

  if (GEOGetVectorKitPerformanceLog_onceToken != -1)
    dispatch_once(&GEOGetVectorKitPerformanceLog_onceToken, &__block_literal_global_13_11780);
  v2 = (id)GEOGetVectorKitPerformanceLog_log;
  v3 = v2;
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 80);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)v5 = 0;
    _os_signpost_emit_with_name_impl(&dword_19F029000, v3, OS_SIGNPOST_INTERVAL_END, v4, "PolygonLayout", (const char *)&unk_1A0189141, v5, 2u);
  }

}

void std::__function::__func<md::PolygonRenderLayer<(md::MapDataType)1,md::MapTileDataRenderable<md::PolygonTileData>>::layout(md::LayoutContext const&)::{lambda(void)#1},std::allocator<md::PolygonRenderLayer<(md::MapDataType)1,md::MapTileDataRenderable<md::PolygonTileData>>::layout(md::LayoutContext const&)::{lambda(void)#1}>,void ()(void)>::operator()(uint64_t a1)
{
  std::__invoke_void_return_wrapper<void,true>::__call[abi:nn180100]<md::PolygonRenderLayer<(md::MapDataType)59,md::MapTileDataRenderable<md::PolygonTileData>>::layout(md::LayoutContext const&)::{lambda(void)#1} &>(a1 + 8);
}

void std::__function::__func<md::PolygonRenderLayer<(md::MapDataType)1,md::MapTileDataRenderable<md::PolygonTileData>>::layout(md::LayoutContext const&)::{lambda(void)#2},std::allocator<md::PolygonRenderLayer<(md::MapDataType)1,md::MapTileDataRenderable<md::PolygonTileData>>::layout(md::LayoutContext const&)::{lambda(void)#2}>,void ()(void)>::operator()(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  os_signpost_id_t v4;
  uint8_t v5[16];

  if (GEOGetVectorKitPerformanceLog_onceToken != -1)
    dispatch_once(&GEOGetVectorKitPerformanceLog_onceToken, &__block_literal_global_13_11780);
  v2 = (id)GEOGetVectorKitPerformanceLog_log;
  v3 = v2;
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 80);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)v5 = 0;
    _os_signpost_emit_with_name_impl(&dword_19F029000, v3, OS_SIGNPOST_INTERVAL_END, v4, "PolygonLayout", (const char *)&unk_1A0189141, v5, 2u);
  }

}

void std::__function::__func<md::HikingRenderLayer::layout(md::LayoutContext const&)::$_1,std::allocator<md::HikingRenderLayer::layout(md::LayoutContext const&)::$_1>,void ()(void)>::operator()(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  os_signpost_id_t v4;
  uint8_t v5[16];

  if (GEOGetVectorKitPerformanceLog_onceToken != -1)
    dispatch_once(&GEOGetVectorKitPerformanceLog_onceToken, &__block_literal_global_13_11780);
  v2 = (id)GEOGetVectorKitPerformanceLog_log;
  v3 = v2;
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 80);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)v5 = 0;
    _os_signpost_emit_with_name_impl(&dword_19F029000, v3, OS_SIGNPOST_INTERVAL_END, v4, "HikingLayout", (const char *)&unk_1A0189141, v5, 2u);
  }

}

void std::__function::__func<md::HikingRenderLayer::layout(md::LayoutContext const&)::$_0,std::allocator<md::HikingRenderLayer::layout(md::LayoutContext const&)::$_0>,void ()(void)>::operator()(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  os_signpost_id_t v4;
  uint8_t v5[16];

  if (GEOGetVectorKitPerformanceLog_onceToken != -1)
    dispatch_once(&GEOGetVectorKitPerformanceLog_onceToken, &__block_literal_global_13_11780);
  v2 = (id)GEOGetVectorKitPerformanceLog_log;
  v3 = v2;
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 80);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)v5 = 0;
    _os_signpost_emit_with_name_impl(&dword_19F029000, v3, OS_SIGNPOST_INTERVAL_BEGIN, v4, "HikingLayout", (const char *)&unk_1A0189141, v5, 2u);
  }

}

_QWORD *std::__function::__func<md::LabelGlyphImageLoader::startQueuedLoads(void)::$_0::operator() const(void)::{lambda(void)#3},std::allocator<md::LabelGlyphImageLoader::startQueuedLoads(void)::$_0::operator() const(void)::{lambda(void)#3}>,void ()(void)>::__clone(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;

  result = operator new(0x28uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_1E42D9E60;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = a1[4];
  result[3] = a1[3];
  result[4] = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  return result;
}

void std::__function::__func<md::LabelGlyphImageLoader::startQueuedLoads(void)::$_0::operator() const(void)::{lambda(void)#2},std::allocator<md::LabelGlyphImageLoader::startQueuedLoads(void)::$_0::operator() const(void)::{lambda(void)#2}>,void ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E42D9E18;
}

__n128 std::__function::__func<md::LabelCustomFeatureProvider::dataSourceFeaturesDidChangeForRect(GEOMapRect)::$_0,std::allocator<md::LabelCustomFeatureProvider::dataSourceFeaturesDidChangeForRect(GEOMapRect)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x30uLL);
  *(_QWORD *)v2 = &off_1E42D2FC8;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  *((_QWORD *)v2 + 5) = *(_QWORD *)(a1 + 40);
  return result;
}

uint64_t std::__function::__func<md::CoastlineRenderLayer::layout(md::LayoutContext const&)::$_1,std::allocator<md::CoastlineRenderLayer::layout(md::LayoutContext const&)::$_1>,void ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42D0550;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<md::PolygonRenderLayer<(md::MapDataType)41,md::MapTileDataRenderable<md::PolygonTileData>>::layout(md::LayoutContext const&)::{lambda(void)#2},std::allocator<md::PolygonRenderLayer<(md::MapDataType)41,md::MapTileDataRenderable<md::PolygonTileData>>::layout(md::LayoutContext const&)::{lambda(void)#2}>,void ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42CF158;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<md::PolygonRenderLayer<(md::MapDataType)1,md::MapTileDataRenderable<md::PolygonTileData>>::layout(md::LayoutContext const&)::{lambda(void)#2},std::allocator<md::PolygonRenderLayer<(md::MapDataType)1,md::MapTileDataRenderable<md::PolygonTileData>>::layout(md::LayoutContext const&)::{lambda(void)#2}>,void ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42CF080;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<md::HikingRenderLayer::layout(md::LayoutContext const&)::$_1,std::allocator<md::HikingRenderLayer::layout(md::LayoutContext const&)::$_1>,void ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42CE4F8;
  a2[1] = v2;
  return result;
}

void gcl::tmesh::DecoderImpl::decompressAdaptiveTraversal(_DWORD *a1, uint64_t a2, uint64_t a3)
{
  int v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int v8;
  int v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  int v15;
  int v16;
  int *v17;
  _BOOL4 v18;
  _BOOL4 v19;
  unsigned int v20;
  uint64_t v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  int v25;
  int v26;
  unsigned int v27;
  uint64_t v28;
  unint64_t v29;
  int v30;
  unint64_t v31;
  _WORD *v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int v37;
  unsigned int v38;
  unsigned int v39;
  unsigned int v40;
  BOOL v41;
  unsigned int v42;
  int v43;
  int v44;
  BOOL v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  int *v51;
  int v52;
  int v53;
  _DWORD *v54;
  int *v55;
  int v56;
  int v57;
  int v58;
  int v59;
  int v60;
  int v61;
  int v62;
  int v63;
  int v64;
  int v65;
  int v66;
  int v67;
  int v68;
  unsigned int v69;
  unsigned int v70;
  unsigned int v71;
  _BOOL4 v74;
  unsigned int v75;
  unsigned int v76;
  unsigned int v77;
  int v78;
  int v79;
  int v80;
  int v81;
  int v82;
  int v83;
  BOOL v84;
  unsigned int v85;
  int v86;
  unsigned int v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  BOOL v95;
  unint64_t v96;
  uint64_t v97;
  int v98;
  int v99;
  int v100;
  int v101;
  int v102;
  int v103;
  unsigned int v104;
  _BOOL4 v105;
  unsigned int v106;
  unsigned int v107;
  int v108;
  int v109;
  int v110;
  int v111;
  unsigned int v112;
  uint64_t v113;
  int v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  BOOL v120;
  unint64_t v121;
  uint64_t v122;
  unint64_t v123;
  unsigned int v124;
  int v125;
  int v126;
  uint64_t v127;
  uint64_t v128;
  int v129;
  uint64_t v130;
  uint64_t v131;
  int *v132;
  int v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  unint64_t v138;
  int v139;
  uint64_t v140;
  int v141;
  int *v142;
  int v143;
  int v144;
  _QWORD *v145;
  int ***v146;
  uint64_t *v147;
  char *v148;
  int **v149;
  uint64_t v150;
  uint64_t v151;
  unint64_t v152;
  unint64_t v153;
  uint64_t v154;
  _BYTE *v155;
  int **v156;
  char *v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t *v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  int v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  unsigned int v168;
  unint64_t v169;
  uint64_t v170;
  uint64_t v171;
  int **v172;
  _OWORD *v173;
  int **v174;
  uint64_t v175;
  __int128 v176;
  int *v177;
  int ***v178;
  uint64_t *v179;
  int v180;
  int v181;
  _BOOL4 v182;
  _BOOL4 v183;
  _BOOL4 v184;
  unsigned int v185;
  unsigned int v186;
  int v187;
  int v188;
  uint64_t v189;
  unint64_t v190;
  int v191;
  unint64_t v192;
  uint64_t v193;
  uint64_t v194;
  int v195;
  int v196;
  _DWORD *v198;
  int *v199;
  uint64_t v200;
  unint64_t v202;
  int v204;
  uint64_t v205;

  v3 = a1[948];
  v205 = 0;
  v4 = a1[947];
  if (v4 >= 1)
  {
    v5 = (uint64_t)a1;
    v6 = 0;
    v196 = v3 + 1;
    v199 = a1 + 62;
    LODWORD(v7) = -1;
    do
    {
      if (v6 == HIDWORD(v205))
      {
        ++HIDWORD(v205);
        if (*(_BYTE *)(v5 + 3820))
          v8 = -1;
        else
          v8 = v7;
        *(_DWORD *)(*(_QWORD *)(v5 + 176) + 12 * v6) = v8;
        gcl::tmesh::DecoderImpl::decompressGeometry(v5, v6, a2);
        gcl::MutableApproximatePriorityQueue<gcl::tmesh::VertexPriority,64>::insert(v199, (int *)(*(_QWORD *)(v5 + 224) + 12 * v6));
        v9 = *(_DWORD *)(v5 + 248);
        if (v9)
        {
          v193 = v6;
          while (1)
          {
            v10 = *(_DWORD *)(v5 + 252);
            if ((v10 & 0x80000000) != 0)
            {
              v13 = 0;
            }
            else
            {
              *(_DWORD *)(v5 + 248) = --v9;
              v11 = v5 + 248 + 24 * v10;
              v12 = *(_QWORD *)(v11 + 16);
              v13 = *(_QWORD *)(v12 - 8);
              *(_QWORD *)(v11 + 16) = v12 - 8;
              *(_DWORD *)(v13 + 8) = -1;
              if (v9)
              {
                do
                {
                  if (*(_QWORD *)(v5 + 24 * v10 + 256) != *(_QWORD *)(v5 + 24 * v10 + 264))
                    break;
                  *(_DWORD *)(v5 + 252) = v10 - 1;
                  v14 = (int)v10-- <= 0;
                }
                while (!v14);
              }
              else
              {
                *(_DWORD *)(v5 + 252) = -1;
              }
            }
            v7 = 0xAAAAAAAAAAAAAAABLL * ((v13 - *(_QWORD *)(v5 + 224)) >> 2);
            v17 = (int *)(*(_QWORD *)(v5 + 152)
                        + ((uint64_t)(0xAAAAAAAB00000000 * ((v13 - *(_QWORD *)(v5 + 224)) >> 2)) >> 28));
            v15 = *v17;
            v16 = v17[1];
            v18 = *v17 != -1;
            v19 = v16 == *v17 && v15 != -1;
            v20 = (v18 | (2 * (v16 != -1))) + v19;
            v21 = v5 + 2 * v20;
            v22 = *(unsigned __int16 *)(v21 + 2048);
            v23 = *(_DWORD *)(v5 + 2732);
            v24 = *(_DWORD *)(v5 + 2736);
            if (v23 < 0x40000001)
            {
              v25 = *(_DWORD *)(v5 + 2744);
              while (1)
              {
                v24 *= 2;
                *(_DWORD *)(v5 + 2744) = --v25;
                if (v25)
                  goto LABEL_27;
                v28 = *(_QWORD *)(v5 + 2720);
                *(_QWORD *)(v5 + 2720) = v28 + 1;
                v29 = *(unsigned int *)(v5 + 2704);
                if (v28 + 1 >= v29)
                {
                  v30 = 65280;
                  v31 = v28 + 2;
                  *(_QWORD *)(v5 + 2720) = v31;
                  if (v31 >= v29)
                  {
LABEL_33:
                    v26 = 255;
                    goto LABEL_26;
                  }
                }
                else
                {
                  v30 = *(unsigned __int8 *)(*(_QWORD *)(v5 + 2712) + v28 + 1) << 8;
                  v31 = v28 + 2;
                  *(_QWORD *)(v5 + 2720) = v31;
                  if (v31 >= v29)
                    goto LABEL_33;
                }
                v26 = *(unsigned __int8 *)(*(_QWORD *)(v5 + 2712) + v31);
LABEL_26:
                v24 |= v30 | v26;
                v25 = 16;
                *(_DWORD *)(v5 + 2744) = 16;
LABEL_27:
                v27 = 2 * v23;
                v41 = v23 >= 0x20000001;
                v23 *= 2;
                if (v41)
                  goto LABEL_35;
              }
            }
            v27 = *(_DWORD *)(v5 + 2732);
LABEL_35:
            v32 = (_WORD *)(v21 + 2048);
            v33 = (HIWORD(v27) * v22) & 0xFFFF0000;
            v34 = v27 - v33;
            v35 = v24 < v33 ? 0 : (HIWORD(v27) * v22) & 0xFFFF0000;
            *(_DWORD *)(v5 + 2736) = v24 - v35;
            *v32 = *(_WORD *)(v5 + 2 * ((v22 >> 7) & 0x1FE | (v24 >= v33)) + 2752) + v22;
            v36 = v24 < v33 ? v33 : v34;
            *(_DWORD *)(v5 + 2732) = v36;
            if (v24 >= v33)
              break;
LABEL_11:
            if (!v9)
              goto LABEL_3;
          }
          v194 = (int)v7;
          v195 = v7;
          v198 = (_DWORD *)(a2 + 12 * (int)v7);
          while (2)
          {
            v204 = 0;
            v43 = gcl::tmesh::DecoderImpl::decompressTFanConnectivity((gcl::tmesh::DecoderImpl *)v5, v7, v20, a3, &v204, (_DWORD *)&v205 + 1, &v205);
            if (v43 < 0 || (v44 = v43, v43 > v196))
            {
LABEL_273:
              *(_DWORD *)(v5 + 3872) = 3;
              return;
            }
            v45 = v204 == 3 || v204 == 5;
            if (v45)
            {
              if (v43)
              {
                v46 = v43 + 1;
                do
                {
                  v47 = (v46 - 2);
                  if (*(_BYTE *)(*(_QWORD *)(v5 + 32) + v47))
                    gcl::tmesh::DecoderImpl::decompressGeometry(v5, *(_DWORD *)(*(_QWORD *)(v5 + 8) + 4 * v47), a2);
                  --v46;
                }
                while (v46 > 1);
                goto LABEL_69;
              }
            }
            else if (v43)
            {
              v48 = 0;
              do
              {
                if (*(_BYTE *)(*(_QWORD *)(v5 + 32) + v48))
                  gcl::tmesh::DecoderImpl::decompressGeometry(v5, *(_DWORD *)(*(_QWORD *)(v5 + 8) + 4 * v48), a2);
                ++v48;
              }
              while (v44 != v48);
LABEL_69:
              if (v44 > 1)
              {
                if (*(_BYTE *)(v5 + 3818))
                {
                  v49 = *(_QWORD *)(v5 + 224);
                  v50 = v44 - 1;
                  v51 = (int *)(*(_QWORD *)(v5 + 8) + 4);
                  while (1)
                  {
                    v53 = *(v51 - 1);
                    v52 = *v51;
                    v54 = (_DWORD *)(a2 + 12 * v53);
                    v55 = (int *)(a2 + 12 * *v51);
                    v57 = *v55;
                    v56 = v55[1];
                    v58 = v54[1];
                    v59 = *v55 - *v54;
                    v60 = v56 - v58;
                    v61 = v55[2];
                    v62 = v54[2];
                    v63 = v61 - v62;
                    v64 = v198[1];
                    v65 = *v198 - *v54;
                    v66 = v64 - v58;
                    v67 = v198[2];
                    v68 = v67 - v62;
                    if (v59 >= 0)
                      v69 = v59;
                    else
                      v69 = -v59;
                    if (v60 >= 0)
                      v70 = v60;
                    else
                      v70 = -v60;
                    if (v63 >= 0)
                      v71 = v63;
                    else
                      v71 = -v63;
                    v74 = v69 < 0x1000 && v70 < 0x1000 && v71 < 0x1000;
                    if (v65 >= 0)
                      v75 = v65;
                    else
                      v75 = -v65;
                    if (v66 >= 0)
                      v76 = v66;
                    else
                      v76 = -v66;
                    if (v68 >= 0)
                      v77 = v68;
                    else
                      v77 = -v68;
                    if (v74 && v75 <= 0xFFF && v76 <= 0xFFF && v77 <= 0xFFF)
                    {
                      v78 = v65 * v59 + v66 * v60 + v68 * v63;
                      if (!v78)
                        goto LABEL_145;
                      v79 = v68 * v60 - v66 * v63;
                      if (v79 < 0)
                        v79 = v66 * v63 - v68 * v60;
                      v80 = v65 * v63 - v68 * v59;
                      if (v80 < 0)
                        v80 = -v80;
                      v81 = v66 * v59 - v65 * v60;
                      if (v81 < 0)
                        v81 = -v81;
                      v82 = v79 + v80;
                      if (v80 < v81)
                      {
                        v83 = v81;
                      }
                      else
                      {
                        v82 = v79 + v81;
                        v83 = v80;
                      }
                      v84 = v79 >= v80 && v79 >= v81;
                      if (v84)
                        v85 = v80 + v81;
                      else
                        v85 = v82;
                      if (v84)
                        v86 = v79;
                      else
                        v86 = v83;
                      v87 = v86 + (v85 >> 2);
                      if (v78 < 0)
                        LODWORD(v88) = -16 * v78 / (int)(v87 - v78) + 16;
                      else
                        LODWORD(v88) = (int)(16 * v87) / (int)(v87 + v78);
                    }
                    else
                    {
                      v89 = v66 * (uint64_t)v60 + v65 * (uint64_t)v59 + v68 * (uint64_t)v63;
                      if (!v89)
                      {
LABEL_145:
                        LODWORD(v88) = 16;
                        goto LABEL_148;
                      }
                      v90 = v68 * (uint64_t)v60 - v66 * (uint64_t)v63;
                      if (v90 < 0)
                        v90 = v66 * (uint64_t)v63 - v68 * (uint64_t)v60;
                      v91 = v65 * (uint64_t)v63 - v68 * (uint64_t)v59;
                      if (v91 < 0)
                        v91 = -v91;
                      v92 = v66 * (uint64_t)v59 - v65 * (uint64_t)v60;
                      if (v92 < 0)
                        v92 = -v92;
                      v93 = v90 + v91;
                      if (v91 < (unint64_t)v92)
                      {
                        v94 = v92;
                      }
                      else
                      {
                        v93 = v90 + v92;
                        v94 = v91;
                      }
                      v95 = v90 >= (unint64_t)v91 && v90 >= (unint64_t)v92;
                      if (v95)
                        v96 = v91 + v92;
                      else
                        v96 = v93;
                      if (v95)
                        v97 = v90;
                      else
                        v97 = v94;
                      v88 = v97 + (v96 >> 2);
                      if (v89 < 0)
                        LODWORD(v88) = -16 * v89 / (v88 - v89) + 16;
                      else
                        v88 = 16 * v88 / (v88 + v89);
                    }
LABEL_148:
                    v98 = *v198 - v57;
                    v99 = v64 - v56;
                    v100 = v67 - v61;
                    v101 = -v59;
                    v102 = -v60;
                    v103 = -v63;
                    if (v98 >= 0)
                      v104 = v98;
                    else
                      v104 = -v98;
                    v105 = v104 < 0x1000 && v74;
                    if (v99 >= 0)
                      v106 = v99;
                    else
                      v106 = -v99;
                    if (v100 >= 0)
                      v107 = v100;
                    else
                      v107 = -v100;
                    if (!v105 || v106 > 0xFFF || v107 > 0xFFF)
                    {
                      v113 = v99 * (uint64_t)v102 + v98 * (uint64_t)v101 + v100 * (uint64_t)v103;
                      if (v113)
                      {
                        v114 = -v59;
                        v115 = v100 * (uint64_t)v102 - v99 * (uint64_t)v103;
                        if (v115 < 0)
                          v115 = v99 * (uint64_t)v103 - v100 * (uint64_t)v102;
                        v116 = v98 * (uint64_t)v103 - v100 * (uint64_t)v114;
                        if (v116 < 0)
                          v116 = -v116;
                        v117 = v99 * (uint64_t)v114 - v98 * (uint64_t)v102;
                        if (v117 < 0)
                          v117 = -v117;
                        v118 = v115 + v116;
                        if (v116 < (unint64_t)v117)
                        {
                          v119 = v117;
                        }
                        else
                        {
                          v118 = v115 + v117;
                          v119 = v116;
                        }
                        v120 = v115 >= (unint64_t)v116 && v115 >= (unint64_t)v117;
                        if (v120)
                          v121 = v116 + v117;
                        else
                          v121 = v118;
                        if (v120)
                          v122 = v115;
                        else
                          v122 = v119;
                        v123 = v122 + (v121 >> 2);
                        if (v113 < 0)
                          LODWORD(v113) = -16 * v113 / (uint64_t)(v123 - v113) + 16;
                        else
                          v113 = (uint64_t)(16 * v123) / (uint64_t)(v123 + v113);
                        goto LABEL_202;
                      }
LABEL_195:
                      LODWORD(v113) = 16;
                      goto LABEL_202;
                    }
                    v108 = v98 * v101 + v99 * v102 + v100 * v103;
                    if (!v108)
                      goto LABEL_195;
                    v109 = v99 * v63 + v100 * v102;
                    if (v109 < 0)
                      v109 = -v109;
                    v110 = v98 * v103 + v100 * v59;
                    if (v110 < 0)
                      v110 = -v110;
                    v111 = v98 * v60 + v99 * v101;
                    if (v111 < 0)
                      v111 = -v111;
                    if (v109 < v110 || v109 < v111)
                    {
                      v124 = v109 + v110;
                      v125 = v109 + v111;
                      if (v110 < v111)
                      {
                        v126 = v111;
                      }
                      else
                      {
                        v124 = v125;
                        v126 = v110;
                      }
                      v112 = v126 + (v124 >> 2);
                      if (v108 < 0)
                      {
LABEL_173:
                        LODWORD(v113) = -16 * v108 / (int)(v112 - v108) + 16;
                        goto LABEL_202;
                      }
                    }
                    else
                    {
                      v112 = v109 + ((v110 + v111) >> 2);
                      if (v108 < 0)
                        goto LABEL_173;
                    }
                    LODWORD(v113) = (int)(16 * v112) / (int)(v112 + v108);
LABEL_202:
                    v127 = 12 * v53;
                    *(_DWORD *)(v49 + v127) += v88;
                    v128 = 12 * v52;
                    v129 = *(_DWORD *)(v49 + v128) + v113;
                    *(_DWORD *)(v49 + v128) = v129;
                    if ((*(_DWORD *)(v49 + v127) & 0x80000000) != 0 || v129 < 0)
                      goto LABEL_273;
                    if (*(_DWORD *)(v5 + 3872))
                      return;
                    ++v51;
                    if (!--v50)
                      goto LABEL_209;
                  }
                }
                v130 = *(_QWORD *)(v5 + 224);
                v131 = v44 - 1;
                v132 = (int *)(*(_QWORD *)(v5 + 8) + 4);
                do
                {
                  v133 = *v132;
                  *(_DWORD *)(v130 + 12 * *(v132 - 1)) += 8;
                  *(_DWORD *)(v130 + 12 * v133) += 8;
                  ++v132;
                  --v131;
                }
                while (v131);
              }
LABEL_209:
              if (v44 >= 1)
              {
                v134 = 0;
                v135 = v44;
                v200 = v44;
                while (1)
                {
                  v139 = *(_DWORD *)(*(_QWORD *)(v5 + 8) + 4 * v134);
                  v140 = *(_QWORD *)(v5 + 224);
                  if (*(_BYTE *)(*(_QWORD *)(v5 + 32) + v134))
                  {
                    v141 = *(_DWORD *)(v5 + 252);
                    goto LABEL_218;
                  }
                  v158 = *(unsigned int *)(v140 + 12 * v139 + 8);
                  if ((v158 & 0x80000000) == 0)
                    break;
LABEL_215:
                  if (++v134 == v135)
                    goto LABEL_258;
                }
                v159 = v5 + 24 * *(int *)(v140 + 12 * v139 + 4);
                v160 = (uint64_t *)(v159 + 264);
                v163 = v159 + 256;
                v161 = *(_QWORD *)(v159 + 256);
                v162 = *(_QWORD *)(v163 + 8);
                v164 = ((unint64_t)(v162 - v161) >> 3) - 1;
                if ((_DWORD)v158 != v164)
                {
                  v165 = 8 * v164;
                  v166 = *(_QWORD *)(v161 + 8 * v158);
                  *(_QWORD *)(v161 + 8 * v158) = *(_QWORD *)(v161 + v165);
                  *(_QWORD *)(v161 + v165) = v166;
                  *(_DWORD *)(*(_QWORD *)(v161 + 8 * v158) + 8) = v158;
                  *(_DWORD *)(v166 + 8) = v164;
                  v162 = *v160;
                }
                v167 = *(_QWORD *)(v162 - 8);
                *v160 = v162 - 8;
                *(_DWORD *)(v167 + 8) = -1;
                v45 = (*v199)-- == 1;
                if (v45)
                {
                  v141 = -1;
                  *(_DWORD *)(v5 + 252) = -1;
                }
                else
                {
                  v168 = *(_DWORD *)(v5 + 252);
                  v141 = v168;
                  if ((v168 & 0x80000000) == 0)
                  {
                    while (*(_QWORD *)(v5 + 24 * v168 + 256) == *(_QWORD *)(v5 + 24 * v168 + 264))
                    {
                      v141 = v168 - 1;
                      *(_DWORD *)(v5 + 252) = v168 - 1;
                      v14 = (int)v168-- <= 0;
                      if (v14)
                      {
                        if (v167)
                          goto LABEL_218;
                        goto LABEL_215;
                      }
                    }
                    v141 = v168;
                    if (v167)
                      goto LABEL_218;
                    goto LABEL_215;
                  }
                }
LABEL_218:
                v142 = (int *)(v140 + 12 * v139);
                if (*v142 >= 63)
                  v143 = 63;
                else
                  v143 = *v142;
                if (v143 <= v141)
                  v144 = v141;
                else
                  v144 = v143;
                *(_DWORD *)(v5 + 252) = v144;
                v145 = (_QWORD *)(v5 + 24 * v143);
                v146 = (int ***)(v145 + 32);
                v147 = v145 + 33;
                v148 = (char *)v145[32];
                v149 = (int **)v145[33];
                v150 = ((char *)v149 - v148) >> 3;
                v151 = v140 + 12 * v139;
                *(_DWORD *)(v151 + 4) = v143;
                *(_DWORD *)(v151 + 8) = v150;
                v152 = v145[34];
                if ((unint64_t)v149 >= v152)
                {
                  v153 = v150 + 1;
                  if ((unint64_t)(v150 + 1) >> 61)
                    std::vector<double>::__throw_length_error[abi:ne180100]();
                  v154 = v152 - (_QWORD)v148;
                  if (v154 >> 2 > v153)
                    v153 = v154 >> 2;
                  if ((unint64_t)v154 >= 0x7FFFFFFFFFFFFFF8)
                    v153 = 0x1FFFFFFFFFFFFFFFLL;
                  v202 = v153;
                  if (v153)
                  {
                    if (v153 >> 61)
                      std::__throw_bad_array_new_length[abi:ne180100]();
                    v155 = operator new(8 * v153);
                    v146 = (int ***)(v145 + 32);
                    v147 = v145 + 33;
                    v5 = (uint64_t)a1;
                    v156 = (int **)&v155[8 * v150];
                    *v156 = v142;
                    v136 = (uint64_t)(v156 + 1);
                    v157 = (char *)((char *)v149 - v148);
                    if (v149 == (int **)v148)
                    {
LABEL_252:
                      *v146 = v156;
                      *v147 = v136;
                      v145[34] = &v155[8 * v202];
                      if (v149)
                      {
                        v178 = v146;
                        v179 = v147;
                        operator delete(v149);
                        v147 = v179;
                        v5 = (uint64_t)a1;
                        v146 = v178;
                      }
                      v135 = v200;
                      goto LABEL_212;
                    }
                  }
                  else
                  {
                    v155 = 0;
                    v156 = (int **)(8 * v150);
                    *(_QWORD *)(8 * v150) = v142;
                    v136 = 8 * v150 + 8;
                    v157 = (char *)((char *)v149 - v148);
                    if (v149 == (int **)v148)
                      goto LABEL_252;
                  }
                  v169 = (unint64_t)(v157 - 8);
                  if (v169 < 0x58)
                    goto LABEL_279;
                  if ((char *)v149 - v155 - (((char *)v149 - v148) & 0xFFFFFFFFFFFFFFF8) < 0x20)
                    goto LABEL_279;
                  v170 = (v169 >> 3) + 1;
                  v171 = 8 * (v170 & 0x3FFFFFFFFFFFFFFCLL);
                  v172 = &v149[v171 / 0xFFFFFFFFFFFFFFF8];
                  v156 = (int **)((char *)v156 - v171);
                  v173 = &v155[8 * v150 - 16];
                  v174 = v149 - 2;
                  v175 = v170 & 0x3FFFFFFFFFFFFFFCLL;
                  do
                  {
                    v176 = *(_OWORD *)v174;
                    *(v173 - 1) = *((_OWORD *)v174 - 1);
                    *v173 = v176;
                    v173 -= 2;
                    v174 -= 4;
                    v175 -= 4;
                  }
                  while (v175);
                  v149 = v172;
                  if (v170 != (v170 & 0x3FFFFFFFFFFFFFFCLL))
                  {
LABEL_279:
                    do
                    {
                      v177 = *--v149;
                      *--v156 = v177;
                    }
                    while (v149 != (int **)v148);
                  }
                  v149 = *v146;
                  goto LABEL_252;
                }
                *v149 = v142;
                v136 = (uint64_t)(v149 + 1);
LABEL_212:
                *v147 = v136;
                ++*(_DWORD *)(v5 + 248);
                v137 = v5 + 248 + 4 * v143;
                v138 = (unint64_t)(v136 - (_QWORD)*v146) >> 3;
                if (*(_DWORD *)(v137 + 1544) > (int)v138)
                  LODWORD(v138) = *(_DWORD *)(v137 + 1544);
                *(_DWORD *)(v137 + 1544) = v138;
                goto LABEL_215;
              }
            }
LABEL_258:
            if (*(_DWORD *)(v5 + 3872))
              return;
            v180 = *(_DWORD *)(*(_QWORD *)(v5 + 152) + 16 * v194);
            v181 = *(_DWORD *)(*(_QWORD *)(v5 + 152) + 16 * v194 + 4);
            v182 = v181 != -1;
            v183 = v180 != -1;
            v184 = v181 == v180 && v180 != -1;
            v185 = *(_DWORD *)(v5 + 2732);
            v186 = *(_DWORD *)(v5 + 2736);
            if (v185 < 0x40000001)
            {
              v187 = *(_DWORD *)(v5 + 2744);
              LODWORD(v7) = v195;
              while (2)
              {
                v186 *= 2;
                *(_DWORD *)(v5 + 2744) = --v187;
                if (v187)
                  goto LABEL_266;
                v189 = *(_QWORD *)(v5 + 2720);
                *(_QWORD *)(v5 + 2720) = v189 + 1;
                v190 = *(unsigned int *)(v5 + 2704);
                if (v189 + 1 >= v190)
                {
                  v191 = 65280;
                  v192 = v189 + 2;
                  *(_QWORD *)(v5 + 2720) = v192;
                  if (v192 >= v190)
                    goto LABEL_272;
                }
                else
                {
                  v191 = *(unsigned __int8 *)(*(_QWORD *)(v5 + 2712) + v189 + 1) << 8;
                  v192 = v189 + 2;
                  *(_QWORD *)(v5 + 2720) = v192;
                  if (v192 >= v190)
                  {
LABEL_272:
                    v188 = 255;
LABEL_265:
                    v186 |= v191 | v188;
                    v187 = 16;
                    *(_DWORD *)(v5 + 2744) = 16;
LABEL_266:
                    v37 = 2 * v185;
                    v41 = v185 >= 0x20000001;
                    v185 *= 2;
                    if (v41)
                      goto LABEL_44;
                    continue;
                  }
                }
                break;
              }
              v188 = *(unsigned __int8 *)(*(_QWORD *)(v5 + 2712) + v192);
              goto LABEL_265;
            }
            v37 = *(_DWORD *)(v5 + 2732);
            LODWORD(v7) = v195;
LABEL_44:
            v20 = (v183 | (2 * v182)) + v184;
            v38 = *(unsigned __int16 *)(v5 + 2058);
            v39 = (HIWORD(v37) * v38) & 0xFFFF0000;
            if (v186 < v39)
              v40 = 0;
            else
              v40 = (HIWORD(v37) * v38) & 0xFFFF0000;
            *(_DWORD *)(v5 + 2736) = v186 - v40;
            v41 = v186 >= v39;
            *(_WORD *)(v5 + 2058) = *(_WORD *)(v5 + 2 * ((v38 >> 7) & 0x1FE | (v186 >= v39)) + 2752) + v38;
            if (v186 < v39)
              v42 = (HIWORD(v37) * v38) & 0xFFFF0000;
            else
              v42 = v37 - v39;
            *(_DWORD *)(v5 + 2732) = v42;
            if (!v41)
            {
              v9 = *v199;
              v6 = v193;
              goto LABEL_11;
            }
            continue;
          }
        }
LABEL_3:
        v4 = *(_DWORD *)(v5 + 3788);
      }
      ++v6;
    }
    while (v6 < v4);
  }
}

int32x2_t gcl::tmesh::DecoderImpl::decompressGeometry(uint64_t a1, int a2, uint64_t a3)
{
  int *v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int *v11;
  int v12;
  int v13;
  int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  int v18;
  int v19;
  unsigned int v20;
  uint64_t v21;
  unint64_t v22;
  int v23;
  unint64_t v24;
  unsigned int v25;
  int32x2_t *v26;
  int32x2_t *v27;
  int32x2_t *v28;
  int v29;
  int32x2_t *v30;
  int32x2_t *v31;
  uint32x2_t v32;
  BOOL v33;
  int v34;
  int32x2_t *v35;
  unsigned int v36;
  unsigned int v37;
  BOOL v38;
  _BOOL4 v39;
  uint64_t v40;
  unsigned int v41;
  unsigned int v42;
  uint64_t v43;
  unsigned int v44;
  _WORD *v45;
  unsigned int v46;
  int v47;
  int v48;
  unsigned int v49;
  uint64_t v50;
  unint64_t v51;
  int v52;
  unint64_t v53;
  unsigned int v54;
  unsigned int v55;
  _BOOL4 v56;
  unsigned int v57;
  int v58;
  int32x2_t *v59;
  int32x2_t *v60;
  int32x2_t *v61;
  int32x2_t v62;
  int v63;
  int32x2_t v64;
  int32x2_t *v65;
  int32x2_t *v66;
  int32x2_t *v67;
  int32x2_t *v68;
  __int32 v69;
  __int32 v70;
  int v71;
  int32x2_t v72;
  uint32x2_t v73;
  int32x2_t v74;
  int v75;
  int32x2_t *v76;
  int32x2_t *v77;
  int32x2_t *v78;
  int32x2_t *v79;
  int32x2_t *v80;
  __int32 v81;
  __int32 v82;
  int v83;
  int32x2_t *v84;
  int32x2_t *v85;
  int32x2_t *v86;
  int32x2_t *v87;
  uint32x2_t v88;
  int32x2_t v89;
  int64x2_t v90;
  int32x2_t *v91;
  int32x2_t result;
  int32x2_t v93;
  int32x2_t v94;
  int v95;

  v6 = (int *)(*(_QWORD *)(a1 + 176) + 12 * a2);
  v7 = *v6;
  v8 = v6[1];
  v9 = v6[2];
  v10 = *(_DWORD *)(a1 + 3812);
  if (v10 != 1)
  {
    if (v10 != 2)
      goto LABEL_17;
    v11 = (int *)(*(_QWORD *)(a1 + 200) + 12 * a2);
    v12 = v11[2];
    if (v12 != -1)
    {
      v14 = *v11;
      v13 = v11[1];
      v15 = *(unsigned __int16 *)(a1 + 2416);
      v16 = *(_DWORD *)(a1 + 2732);
      v17 = *(_DWORD *)(a1 + 2736);
      if (v16 < 0x40000001)
      {
        v18 = *(_DWORD *)(a1 + 2744);
        while (1)
        {
          v17 *= 2;
          *(_DWORD *)(a1 + 2744) = --v18;
          if (v18)
            goto LABEL_8;
          v21 = *(_QWORD *)(a1 + 2720);
          *(_QWORD *)(a1 + 2720) = v21 + 1;
          v22 = *(unsigned int *)(a1 + 2704);
          if (v21 + 1 >= v22)
          {
            v23 = 65280;
            v24 = v21 + 2;
            *(_QWORD *)(a1 + 2720) = v24;
            if (v24 >= v22)
            {
LABEL_14:
              v19 = 255;
              goto LABEL_7;
            }
          }
          else
          {
            v23 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 2712) + v21 + 1) << 8;
            v24 = v21 + 2;
            *(_QWORD *)(a1 + 2720) = v24;
            if (v24 >= v22)
              goto LABEL_14;
          }
          v19 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 2712) + v24);
LABEL_7:
          v17 |= v23 | v19;
          v18 = 16;
          *(_DWORD *)(a1 + 2744) = 16;
LABEL_8:
          v20 = 2 * v16;
          v38 = v16 >= 0x20000001;
          v16 *= 2;
          if (v38)
            goto LABEL_24;
        }
      }
      v20 = *(_DWORD *)(a1 + 2732);
LABEL_24:
      v36 = (HIWORD(v20) * v15) & 0xFFFF0000;
      v37 = v20 - v36;
      v38 = v17 >= v36;
      v39 = v17 >= v36;
      v40 = a1 + 2416;
      *(_WORD *)(a1 + 2416) = *(_WORD *)(a1 + 2 * ((v15 >> 7) & 0x1FE | v39) + 2752) + v15;
      if (v17 < v36)
        v41 = v36;
      else
        v41 = v37;
      if (v17 < v36)
        v42 = 0;
      else
        v42 = v36;
      v43 = 2;
      if (v38)
        v43 = 4;
      v44 = v17 - v42;
      *(_DWORD *)(a1 + 2732) = v41;
      *(_DWORD *)(a1 + 2736) = v44;
      v45 = (_WORD *)(v40 + v43);
      v46 = *(unsigned __int16 *)(v40 + v43);
      if (v41 < 0x40000001)
      {
        v47 = *(_DWORD *)(a1 + 2744);
        while (1)
        {
          v44 *= 2;
          *(_DWORD *)(a1 + 2744) = --v47;
          if (v47)
            goto LABEL_36;
          v50 = *(_QWORD *)(a1 + 2720);
          *(_QWORD *)(a1 + 2720) = v50 + 1;
          v51 = *(unsigned int *)(a1 + 2704);
          if (v50 + 1 >= v51)
          {
            v52 = 65280;
            v53 = v50 + 2;
            *(_QWORD *)(a1 + 2720) = v53;
            if (v53 >= v51)
            {
LABEL_42:
              v48 = 255;
              goto LABEL_35;
            }
          }
          else
          {
            v52 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 2712) + v50 + 1) << 8;
            v53 = v50 + 2;
            *(_QWORD *)(a1 + 2720) = v53;
            if (v53 >= v51)
              goto LABEL_42;
          }
          v48 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 2712) + v53);
LABEL_35:
          v44 |= v52 | v48;
          v47 = 16;
          *(_DWORD *)(a1 + 2744) = 16;
LABEL_36:
          v49 = 2 * v41;
          v38 = v41 >= 0x20000001;
          v41 *= 2;
          if (v38)
            goto LABEL_44;
        }
      }
      v49 = v41;
LABEL_44:
      v54 = (HIWORD(v49) * v46) & 0xFFFF0000;
      v55 = v49 - v54;
      v56 = v44 >= v54;
      *v45 = *(_WORD *)(a1 + 2 * ((v46 >> 7) & 0x1FE | v56) + 2752) + v46;
      if (v44 < v54)
        v57 = v54;
      else
        v57 = v55;
      if (v44 < v54)
        v54 = 0;
      *(_DWORD *)(a1 + 2732) = v57;
      *(_DWORD *)(a1 + 2736) = v44 - v54;
      v58 = v39 | (2 * v56);
      if (v58 == 2)
      {
        v65 = (int32x2_t *)(a3 + 12 * v8);
        v66 = (int32x2_t *)(a3 + 12 * v13);
        v67 = (int32x2_t *)(a3 + 12 * v7);
        v68 = (int32x2_t *)(a3 + 12 * v14);
        v69 = v67[1].i32[0];
        v70 = v68[1].i32[0];
        v33 = __OFADD__(v70, v69);
        v71 = v70 + v69;
        v72 = vadd_s32(*v66, *v65);
        v73 = (uint32x2_t)vadd_s32(*v68, *v67);
        v74 = vshr_n_s32((int32x2_t)vsra_n_u32(v73, v73, 0x1FuLL), 1uLL);
        if (v71 < 0 != v33)
          v75 = v71 + 1;
        else
          v75 = v71;
        v93 = vsub_s32(v72, v74);
        v29 = v66[1].i32[0] + v65[1].i32[0] - (v75 >> 1);
      }
      else if (v58 == 1)
      {
        v76 = (int32x2_t *)(a3 + 12 * v14);
        v77 = (int32x2_t *)(a3 + 12 * v13);
        v78 = (int32x2_t *)(a3 + 12 * v12);
        v93 = vsub_s32(vadd_s32(*v77, *v76), *v78);
        v29 = v77[1].i32[0] + v76[1].i32[0] - v78[1].i32[0];
      }
      else if (v58)
      {
        v79 = (int32x2_t *)(a3 + 12 * v7);
        v80 = (int32x2_t *)(a3 + 12 * v14);
        v81 = v79[1].i32[0];
        v82 = v80[1].i32[0];
        v33 = __OFADD__(v82, v81);
        v83 = v82 + v81;
        if (v83 < 0 != v33)
          ++v83;
        v84 = (int32x2_t *)(a3 + 12 * v8);
        v85 = (int32x2_t *)(a3 + 12 * v13);
        v86 = (int32x2_t *)(a3 + 12 * v9);
        v87 = (int32x2_t *)(a3 + 12 * v12);
        v88 = (uint32x2_t)vadd_s32(*v80, *v79);
        v89 = vadd_s32(*v85, *v84);
        v90 = vmull_s32(vsub_s32(vsra_n_s32(vadd_s32(v89, v89), (int32x2_t)vsra_n_u32(v88, v88, 0x1FuLL), 1uLL), vadd_s32(*v86, *v87)), vdup_n_s32(0x55555556u));
        v93 = vadd_s32(vshrn_n_s64(v90, 0x20uLL), vmovn_s64((int64x2_t)vshrq_n_u64((uint64x2_t)v90, 0x3FuLL)));
        v29 = (2 * (v85[1].i32[0] + v84[1].i32[0]) + (v83 >> 1) - (v86[1].i32[0] + v87[1].i32[0])) / 3;
      }
      else
      {
        v59 = (int32x2_t *)(a3 + 12 * v7);
        v60 = (int32x2_t *)(a3 + 12 * v8);
        v61 = (int32x2_t *)(a3 + 12 * v9);
        v93 = vsub_s32(vadd_s32(*v60, *v59), *v61);
        v29 = v60[1].i32[0] + v59[1].i32[0] - v61[1].i32[0];
      }
      v25 = 1;
      goto LABEL_64;
    }
  }
  if (v9 != -1)
  {
    v25 = 0;
    v26 = (int32x2_t *)(a3 + 12 * v7);
    v27 = (int32x2_t *)(a3 + 12 * v8);
    v28 = (int32x2_t *)(a3 + 12 * v9);
    v93 = vsub_s32(vadd_s32(*v27, *v26), *v28);
    v29 = v27[1].i32[0] + v26[1].i32[0] - v28[1].i32[0];
LABEL_64:
    gcl::tmesh::DecoderImpl::decodeResidual((uint64_t)&v94, a1, *(_DWORD *)(a1 + 3808), (uint64_t *)(a1 + 120 * v25 + 2424));
    v62 = v94;
    v63 = v95;
    v64 = v93;
    goto LABEL_65;
  }
LABEL_17:
  if (v8 != -1)
  {
    v25 = 0;
    v30 = (int32x2_t *)(a3 + 12 * v7);
    v31 = (int32x2_t *)(a3 + 12 * v8);
    v32 = (uint32x2_t)vadd_s32(*v31, *v30);
    LODWORD(v30) = v30[1].i32[0];
    LODWORD(v31) = v31[1].i32[0];
    v33 = __OFADD__((_DWORD)v31, (_DWORD)v30);
    v34 = (_DWORD)v31 + (_DWORD)v30;
    v93 = vshr_n_s32((int32x2_t)vsra_n_u32(v32, v32, 0x1FuLL), 1uLL);
    if (v34 < 0 != v33)
      ++v34;
    v29 = v34 >> 1;
    goto LABEL_64;
  }
  if (v7 != -1)
  {
    v25 = 0;
    v35 = (int32x2_t *)(a3 + 12 * v7);
    v93 = *v35;
    v29 = v35[1].i32[0];
    goto LABEL_64;
  }
  if (!*(_BYTE *)(a1 + 3820))
  {
    v25 = 0;
    v29 = 0;
    v93 = 0;
    goto LABEL_64;
  }
  gcl::tmesh::DecoderImpl::decodeResidual((uint64_t)&v94, a1, 3, 0);
  v29 = 0;
  v62 = v94;
  v63 = v95;
  v64 = 0;
LABEL_65:
  v91 = (int32x2_t *)(a3 + 12 * a2);
  result = vadd_s32(v62, v64);
  *v91 = result;
  v91[1].i32[0] = v63 + v29;
  return result;
}

uint64_t gcl::tmesh::DecoderImpl::decodeResidual(uint64_t result, uint64_t a2, int a3, uint64_t *a4)
{
  _DWORD *v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  int v13;
  int v14;
  unsigned int v15;
  uint64_t v16;
  unint64_t v17;
  int v18;
  unint64_t v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  BOOL v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  uint64_t v27;
  unsigned int v28;
  int v29;
  int v30;
  unsigned int v31;
  uint64_t v32;
  unint64_t v33;
  int v34;
  unint64_t v35;
  unsigned int v36;
  unsigned int v37;
  unsigned int v38;
  unsigned int v39;
  _WORD *v40;
  unsigned int v41;
  int v42;
  int v43;
  unsigned int v44;
  uint64_t v45;
  unint64_t v46;
  int v47;
  unint64_t v48;
  unsigned int v49;
  unsigned int v50;
  _BOOL4 v51;
  uint64_t v52;
  unsigned int v53;
  unsigned int v54;
  int v55;
  int v56;
  unsigned int v57;
  uint64_t v58;
  unint64_t v59;
  int v60;
  unint64_t v61;
  unsigned int v62;
  unsigned int v63;
  _BOOL4 v64;
  unsigned int v65;
  unsigned int v66;
  unsigned int v67;
  int v68;
  uint64_t v69;
  unsigned int v70;
  int v71;
  int v72;
  unsigned int v73;
  uint64_t v74;
  unint64_t v75;
  int v76;
  unint64_t v77;
  unsigned int v78;
  unsigned int v79;
  _BOOL4 v80;
  unsigned int v81;
  unsigned int v82;
  unsigned int v83;
  int v84;
  uint64_t v85;
  unsigned int v86;
  int v87;
  int v88;
  unsigned int v89;
  uint64_t v90;
  unint64_t v91;
  int v92;
  unint64_t v93;
  unsigned int v94;
  unsigned int v95;
  _BOOL4 v96;
  unsigned int v97;
  unsigned int v98;
  unsigned int v99;
  int v100;
  uint64_t v101;
  unsigned int v102;
  int v103;
  int v104;
  unsigned int v105;
  uint64_t v106;
  unint64_t v107;
  int v108;
  unint64_t v109;
  unsigned int v110;
  unsigned int v111;
  _BOOL4 v112;
  unsigned int v113;
  unsigned int v114;
  unsigned int v115;
  int v116;
  uint64_t v117;
  unsigned int v118;
  int v119;
  int v120;
  unsigned int v121;
  uint64_t v122;
  unint64_t v123;
  int v124;
  unint64_t v125;
  unsigned int v126;
  unsigned int v127;
  _BOOL4 v128;
  unsigned int v129;
  unsigned int v130;
  int v131;
  int v132;
  int v133;
  int v134;
  unsigned int v135;
  unsigned int v136;
  unsigned int v137;
  unsigned int v138;
  int v139;
  int v140;
  int v141;
  uint64_t v142;
  unint64_t v143;
  int v144;
  unint64_t v145;
  unsigned int *v146;
  int *v147;
  int v148;
  unsigned int v149;
  unsigned int v150;
  BOOL v151;
  int v152;
  uint64_t v153;
  int v154;
  int v155;
  uint64_t v156;
  unsigned int v157;
  unsigned int v158;
  unsigned int v159;
  int v160;
  int v161;
  unsigned int v162;
  uint64_t v163;
  unint64_t v164;
  int v165;
  unint64_t v166;
  unsigned int v167;
  unsigned int v168;
  unsigned int v169;
  BOOL v170;
  unsigned int v171;
  unsigned int v172;
  unsigned int v173;
  uint64_t v174;
  unsigned int v175;
  int v176;
  int v177;
  unsigned int v178;
  uint64_t v179;
  unint64_t v180;
  int v181;
  unint64_t v182;
  unsigned int v183;
  unsigned int v184;
  unsigned int v185;
  unsigned int v186;
  _WORD *v187;
  unsigned int v188;
  int v189;
  int v190;
  unsigned int v191;
  uint64_t v192;
  unint64_t v193;
  int v194;
  unint64_t v195;
  unsigned int v196;
  unsigned int v197;
  _BOOL4 v198;
  unsigned int v199;
  unsigned int v200;
  uint64_t v201;
  unsigned int v202;
  int v203;
  int v204;
  unsigned int v205;
  uint64_t v206;
  unint64_t v207;
  int v208;
  unint64_t v209;
  int v210;
  unsigned int v211;
  _BOOL4 v212;
  unsigned int v213;
  unsigned int v214;
  unsigned int v215;
  uint64_t v216;
  unsigned int v217;
  int v218;
  int v219;
  unsigned int v220;
  uint64_t v221;
  unint64_t v222;
  int v223;
  unint64_t v224;
  unsigned int v225;
  _BOOL4 v226;
  unsigned int v227;
  unsigned int v228;
  unsigned int v229;
  unsigned int v230;
  uint64_t v231;
  unsigned int v232;
  int v233;
  int v234;
  unsigned int v235;
  uint64_t v236;
  unint64_t v237;
  int v238;
  unint64_t v239;
  unsigned int v240;
  _BOOL4 v241;
  unsigned int v242;
  unsigned int v243;
  unsigned int v244;
  unsigned int v245;
  uint64_t v246;
  unsigned int v247;
  int v248;
  int v249;
  unsigned int v250;
  uint64_t v251;
  unint64_t v252;
  int v253;
  unint64_t v254;
  unsigned int v255;
  _BOOL4 v256;
  unsigned int v257;
  unsigned int v258;
  unsigned int v259;
  unsigned int v260;
  uint64_t v261;
  unsigned int v262;
  int v263;
  int v264;
  unsigned int v265;
  uint64_t v266;
  unint64_t v267;
  int v268;
  unint64_t v269;
  unsigned int v270;
  unsigned int v271;
  _BOOL4 v272;
  unsigned int v273;
  unsigned int v274;
  int v275;
  uint64_t v276;
  int v277;
  int v278;
  uint64_t v279;
  int v280;
  unsigned int v281;
  int v282;
  unsigned int v283;
  BOOL v284;
  int v285;
  uint64_t v286;
  unsigned int v287;
  int v288;
  unsigned int v289;
  int v290;
  int v291;
  int v292;
  int v293;
  unsigned int v294;
  unsigned int v295;
  unsigned int v296;
  unsigned int v297;
  int v298;
  int v299;
  int v300;
  uint64_t v301;
  unint64_t v302;
  int v303;
  unint64_t v304;
  int v305;
  int v306;
  unsigned int v307;
  unsigned int v308;
  unsigned int v309;
  unsigned int v310;
  int v311;
  int v312;
  int v313;
  uint64_t v314;
  unint64_t v315;
  int v316;
  unint64_t v317;
  unsigned int *v318;

  v6 = (_DWORD *)result;
  switch(a3)
  {
    case 0:
      v7 = 0;
      while (1)
      {
        v9 = *a4;
        v10 = *(unsigned __int16 *)(*a4 + 2 * v7);
        v11 = *(_DWORD *)(a2 + 2732);
        v12 = *(_DWORD *)(a2 + 2736);
        if (v11 < 0x40000001)
        {
          v13 = *(_DWORD *)(a2 + 2744);
          while (1)
          {
            v12 *= 2;
            *(_DWORD *)(a2 + 2744) = --v13;
            if (v13)
              goto LABEL_11;
            v16 = *(_QWORD *)(a2 + 2720);
            *(_QWORD *)(a2 + 2720) = v16 + 1;
            v17 = *(unsigned int *)(a2 + 2704);
            if (v16 + 1 >= v17)
            {
              v18 = 65280;
              v19 = v16 + 2;
              *(_QWORD *)(a2 + 2720) = v19;
              if (v19 >= v17)
              {
LABEL_17:
                v14 = 255;
                goto LABEL_10;
              }
            }
            else
            {
              v18 = *(unsigned __int8 *)(*(_QWORD *)(a2 + 2712) + v16 + 1) << 8;
              v19 = v16 + 2;
              *(_QWORD *)(a2 + 2720) = v19;
              if (v19 >= v17)
                goto LABEL_17;
            }
            v14 = *(unsigned __int8 *)(*(_QWORD *)(a2 + 2712) + v19);
LABEL_10:
            v12 |= v18 | v14;
            v13 = 16;
            *(_DWORD *)(a2 + 2744) = 16;
LABEL_11:
            v15 = 2 * v11;
            v23 = v11 >= 0x20000001;
            v11 *= 2;
            if (v23)
              goto LABEL_19;
          }
        }
        v15 = *(_DWORD *)(a2 + 2732);
LABEL_19:
        v8 = 0;
        v20 = (HIWORD(v15) * v10) & 0xFFFF0000;
        v21 = v12 < v20 ? 0 : (HIWORD(v15) * v10) & 0xFFFF0000;
        v22 = v12 - v21;
        *(_DWORD *)(a2 + 2736) = v12 - v21;
        v23 = v12 >= v20;
        v24 = (v10 >> 7) & 0x1FE | (v12 >= v20);
        v25 = v15 - v20;
        *(_WORD *)(v9 + 2 * v7) = *(_WORD *)(a2 + 2 * v24 + 2752) + v10;
        v26 = v23 ? v15 - v20 : (HIWORD(v15) * v10) & 0xFFFF0000;
        *(_DWORD *)(a2 + 2732) = v26;
        if (v23)
          break;
LABEL_6:
        v6[v7++] = v8;
        if (v7 == 3)
          return result;
      }
      v27 = a4[3];
      v28 = *(unsigned __int16 *)(v27 + 2 * v7);
      if (v25 < 0x40000001)
      {
        v29 = *(_DWORD *)(a2 + 2744);
        while (1)
        {
          v22 *= 2;
          *(_DWORD *)(a2 + 2744) = --v29;
          if (v29)
            goto LABEL_31;
          v32 = *(_QWORD *)(a2 + 2720);
          *(_QWORD *)(a2 + 2720) = v32 + 1;
          v33 = *(unsigned int *)(a2 + 2704);
          if (v32 + 1 >= v33)
          {
            v34 = 65280;
            v35 = v32 + 2;
            *(_QWORD *)(a2 + 2720) = v35;
            if (v35 >= v33)
            {
LABEL_37:
              v30 = 255;
              goto LABEL_30;
            }
          }
          else
          {
            v34 = *(unsigned __int8 *)(*(_QWORD *)(a2 + 2712) + v32 + 1) << 8;
            v35 = v32 + 2;
            *(_QWORD *)(a2 + 2720) = v35;
            if (v35 >= v33)
              goto LABEL_37;
          }
          v30 = *(unsigned __int8 *)(*(_QWORD *)(a2 + 2712) + v35);
LABEL_30:
          v22 |= v34 | v30;
          v29 = 16;
          *(_DWORD *)(a2 + 2744) = 16;
LABEL_31:
          v31 = 2 * v25;
          v23 = v25 >= 0x20000001;
          v25 *= 2;
          if (v23)
            goto LABEL_39;
        }
      }
      v31 = v15 - v20;
LABEL_39:
      v36 = (HIWORD(v31) * v28) & 0xFFFF0000;
      *(_WORD *)(v27 + 2 * v7) = *(_WORD *)(a2 + 2 * ((v28 >> 7) & 0x1FE | (v22 >= v36)) + 2752) + v28;
      if (v22 < v36)
        v37 = (HIWORD(v31) * v28) & 0xFFFF0000;
      else
        v37 = v31 - v36;
      if (v22 < v36)
        v38 = 0;
      else
        v38 = v36;
      v39 = v22 - v38;
      *(_DWORD *)(a2 + 2732) = v37;
      *(_DWORD *)(a2 + 2736) = v22 - v38;
      v40 = (_WORD *)(a4[6] + (v7 << 7));
      v41 = (unsigned __int16)*v40;
      if (v37 < 0x40000001)
      {
        v42 = *(_DWORD *)(a2 + 2744);
        while (1)
        {
          v39 *= 2;
          *(_DWORD *)(a2 + 2744) = --v42;
          if (v42)
            goto LABEL_49;
          v45 = *(_QWORD *)(a2 + 2720);
          *(_QWORD *)(a2 + 2720) = v45 + 1;
          v46 = *(unsigned int *)(a2 + 2704);
          if (v45 + 1 >= v46)
          {
            v47 = 65280;
            v48 = v45 + 2;
            *(_QWORD *)(a2 + 2720) = v48;
            if (v48 >= v46)
            {
LABEL_55:
              v43 = 255;
              goto LABEL_48;
            }
          }
          else
          {
            v47 = *(unsigned __int8 *)(*(_QWORD *)(a2 + 2712) + v45 + 1) << 8;
            v48 = v45 + 2;
            *(_QWORD *)(a2 + 2720) = v48;
            if (v48 >= v46)
              goto LABEL_55;
          }
          v43 = *(unsigned __int8 *)(*(_QWORD *)(a2 + 2712) + v48);
LABEL_48:
          v39 |= v47 | v43;
          v42 = 16;
          *(_DWORD *)(a2 + 2744) = 16;
LABEL_49:
          v44 = 2 * v37;
          v23 = v37 >= 0x20000001;
          v37 *= 2;
          if (v23)
            goto LABEL_57;
        }
      }
      v44 = v37;
LABEL_57:
      v49 = (HIWORD(v44) * v41) & 0xFFFF0000;
      v50 = v44 - v49;
      v51 = v39 >= v49;
      *v40 = *(_WORD *)(a2 + 2 * ((v41 >> 7) & 0x1FE | v51) + 2752) + v41;
      if (v39 >= v49)
      {
        v52 = 2;
      }
      else
      {
        v50 = v49;
        v49 = 0;
        v52 = 1;
      }
      v53 = v39 - v49;
      *(_DWORD *)(a2 + 2732) = v50;
      *(_DWORD *)(a2 + 2736) = v53;
      v54 = (unsigned __int16)v40[v52];
      if (v50 < 0x40000001)
      {
        v55 = *(_DWORD *)(a2 + 2744);
        while (1)
        {
          v53 *= 2;
          *(_DWORD *)(a2 + 2744) = --v55;
          if (v55)
            goto LABEL_64;
          v58 = *(_QWORD *)(a2 + 2720);
          *(_QWORD *)(a2 + 2720) = v58 + 1;
          v59 = *(unsigned int *)(a2 + 2704);
          if (v58 + 1 >= v59)
          {
            v60 = 65280;
            v61 = v58 + 2;
            *(_QWORD *)(a2 + 2720) = v61;
            if (v61 >= v59)
            {
LABEL_70:
              v56 = 255;
              goto LABEL_63;
            }
          }
          else
          {
            v60 = *(unsigned __int8 *)(*(_QWORD *)(a2 + 2712) + v58 + 1) << 8;
            v61 = v58 + 2;
            *(_QWORD *)(a2 + 2720) = v61;
            if (v61 >= v59)
              goto LABEL_70;
          }
          v56 = *(unsigned __int8 *)(*(_QWORD *)(a2 + 2712) + v61);
LABEL_63:
          v53 |= v60 | v56;
          v55 = 16;
          *(_DWORD *)(a2 + 2744) = 16;
LABEL_64:
          v57 = 2 * v50;
          v23 = v50 >= 0x20000001;
          v50 *= 2;
          if (v23)
            goto LABEL_72;
        }
      }
      v57 = v50;
LABEL_72:
      v62 = (HIWORD(v57) * v54) & 0xFFFF0000;
      v63 = v57 - v62;
      v64 = v53 >= v62;
      v40[v52] = *(_WORD *)(a2 + 2 * ((v54 >> 7) & 0x1FE | v64) + 2752) + v54;
      if (v53 < v62)
        v65 = v62;
      else
        v65 = v63;
      if (v53 < v62)
        v66 = 0;
      else
        v66 = v62;
      v67 = v53 - v66;
      *(_DWORD *)(a2 + 2732) = v65;
      *(_DWORD *)(a2 + 2736) = v67;
      v68 = v51 | (2 * v64);
      v69 = (v68 + 3);
      v70 = (unsigned __int16)v40[v69];
      if (v65 < 0x40000001)
      {
        v71 = *(_DWORD *)(a2 + 2744);
        while (1)
        {
          v67 *= 2;
          *(_DWORD *)(a2 + 2744) = --v71;
          if (v71)
            goto LABEL_82;
          v74 = *(_QWORD *)(a2 + 2720);
          *(_QWORD *)(a2 + 2720) = v74 + 1;
          v75 = *(unsigned int *)(a2 + 2704);
          if (v74 + 1 >= v75)
          {
            v76 = 65280;
            v77 = v74 + 2;
            *(_QWORD *)(a2 + 2720) = v77;
            if (v77 >= v75)
            {
LABEL_88:
              v72 = 255;
              goto LABEL_81;
            }
          }
          else
          {
            v76 = *(unsigned __int8 *)(*(_QWORD *)(a2 + 2712) + v74 + 1) << 8;
            v77 = v74 + 2;
            *(_QWORD *)(a2 + 2720) = v77;
            if (v77 >= v75)
              goto LABEL_88;
          }
          v72 = *(unsigned __int8 *)(*(_QWORD *)(a2 + 2712) + v77);
LABEL_81:
          v67 |= v76 | v72;
          v71 = 16;
          *(_DWORD *)(a2 + 2744) = 16;
LABEL_82:
          v73 = 2 * v65;
          v23 = v65 >= 0x20000001;
          v65 *= 2;
          if (v23)
            goto LABEL_90;
        }
      }
      v73 = v65;
LABEL_90:
      v78 = (HIWORD(v73) * v70) & 0xFFFF0000;
      v79 = v73 - v78;
      v80 = v67 >= v78;
      v40[v69] = *(_WORD *)(a2 + 2 * ((v70 >> 7) & 0x1FE | v80) + 2752) + v70;
      if (v67 < v78)
        v81 = v78;
      else
        v81 = v79;
      if (v67 < v78)
        v82 = 0;
      else
        v82 = v78;
      v83 = v67 - v82;
      *(_DWORD *)(a2 + 2732) = v81;
      *(_DWORD *)(a2 + 2736) = v83;
      v84 = v68 | (4 * v80);
      v85 = (v84 + 7);
      v86 = (unsigned __int16)v40[v85];
      if (v81 < 0x40000001)
      {
        v87 = *(_DWORD *)(a2 + 2744);
        while (1)
        {
          v83 *= 2;
          *(_DWORD *)(a2 + 2744) = --v87;
          if (v87)
            goto LABEL_100;
          v90 = *(_QWORD *)(a2 + 2720);
          *(_QWORD *)(a2 + 2720) = v90 + 1;
          v91 = *(unsigned int *)(a2 + 2704);
          if (v90 + 1 >= v91)
          {
            v92 = 65280;
            v93 = v90 + 2;
            *(_QWORD *)(a2 + 2720) = v93;
            if (v93 >= v91)
            {
LABEL_106:
              v88 = 255;
              goto LABEL_99;
            }
          }
          else
          {
            v92 = *(unsigned __int8 *)(*(_QWORD *)(a2 + 2712) + v90 + 1) << 8;
            v93 = v90 + 2;
            *(_QWORD *)(a2 + 2720) = v93;
            if (v93 >= v91)
              goto LABEL_106;
          }
          v88 = *(unsigned __int8 *)(*(_QWORD *)(a2 + 2712) + v93);
LABEL_99:
          v83 |= v92 | v88;
          v87 = 16;
          *(_DWORD *)(a2 + 2744) = 16;
LABEL_100:
          v89 = 2 * v81;
          v23 = v81 >= 0x20000001;
          v81 *= 2;
          if (v23)
            goto LABEL_108;
        }
      }
      v89 = v81;
LABEL_108:
      v94 = (HIWORD(v89) * v86) & 0xFFFF0000;
      v95 = v89 - v94;
      v96 = v83 >= v94;
      v40[v85] = *(_WORD *)(a2 + 2 * ((v86 >> 7) & 0x1FE | v96) + 2752) + v86;
      if (v83 < v94)
        v97 = v94;
      else
        v97 = v95;
      if (v83 < v94)
        v98 = 0;
      else
        v98 = v94;
      v99 = v83 - v98;
      *(_DWORD *)(a2 + 2732) = v97;
      *(_DWORD *)(a2 + 2736) = v99;
      v100 = v84 | (8 * v96);
      v101 = (v100 + 15);
      v102 = (unsigned __int16)v40[v101];
      if (v97 < 0x40000001)
      {
        v103 = *(_DWORD *)(a2 + 2744);
        while (1)
        {
          v99 *= 2;
          *(_DWORD *)(a2 + 2744) = --v103;
          if (v103)
            goto LABEL_118;
          v106 = *(_QWORD *)(a2 + 2720);
          *(_QWORD *)(a2 + 2720) = v106 + 1;
          v107 = *(unsigned int *)(a2 + 2704);
          if (v106 + 1 >= v107)
          {
            v108 = 65280;
            v109 = v106 + 2;
            *(_QWORD *)(a2 + 2720) = v109;
            if (v109 >= v107)
            {
LABEL_124:
              v104 = 255;
              goto LABEL_117;
            }
          }
          else
          {
            v108 = *(unsigned __int8 *)(*(_QWORD *)(a2 + 2712) + v106 + 1) << 8;
            v109 = v106 + 2;
            *(_QWORD *)(a2 + 2720) = v109;
            if (v109 >= v107)
              goto LABEL_124;
          }
          v104 = *(unsigned __int8 *)(*(_QWORD *)(a2 + 2712) + v109);
LABEL_117:
          v99 |= v108 | v104;
          v103 = 16;
          *(_DWORD *)(a2 + 2744) = 16;
LABEL_118:
          v105 = 2 * v97;
          v23 = v97 >= 0x20000001;
          v97 *= 2;
          if (v23)
            goto LABEL_126;
        }
      }
      v105 = v97;
LABEL_126:
      v110 = (HIWORD(v105) * v102) & 0xFFFF0000;
      v111 = v105 - v110;
      v112 = v99 >= v110;
      v40[v101] = *(_WORD *)(a2 + 2 * ((v102 >> 7) & 0x1FE | v112) + 2752) + v102;
      if (v99 < v110)
        v113 = v110;
      else
        v113 = v111;
      if (v99 < v110)
        v114 = 0;
      else
        v114 = v110;
      v115 = v99 - v114;
      *(_DWORD *)(a2 + 2732) = v113;
      *(_DWORD *)(a2 + 2736) = v115;
      v116 = v100 | (16 * v112);
      v117 = (v116 + 31);
      v118 = (unsigned __int16)v40[v117];
      if (v113 >= 0x40000001)
      {
        v121 = v113;
LABEL_144:
        v126 = (HIWORD(v121) * v118) & 0xFFFF0000;
        v127 = v121 - v126;
        v128 = v115 >= v126;
        v40[v117] = *(_WORD *)(a2 + 2 * ((v118 >> 7) & 0x1FE | v128) + 2752) + v118;
        if (v115 < v126)
          v129 = v126;
        else
          v129 = v127;
        if (v115 < v126)
          v130 = 0;
        else
          v130 = v126;
        *(_DWORD *)(a2 + 2732) = v129;
        *(_DWORD *)(a2 + 2736) = v115 - v130;
        v131 = v116 | (32 * v128);
        if (v131 == 63)
        {
          result = gcl::ArithmeticDecoder::decodeExpGolomb((unsigned int *)(a2 + 2704), *(_DWORD *)(a4[12] + 4 * v7), (_WORD *)(a4[9] + 2 * v7));
          v131 = result + 63;
        }
        if (v22 >= v36)
          v8 = v131 + 1;
        else
          v8 = ~v131;
        goto LABEL_6;
      }
      v119 = *(_DWORD *)(a2 + 2744);
      while (1)
      {
        v115 *= 2;
        *(_DWORD *)(a2 + 2744) = --v119;
        if (v119)
          goto LABEL_136;
        v122 = *(_QWORD *)(a2 + 2720);
        *(_QWORD *)(a2 + 2720) = v122 + 1;
        v123 = *(unsigned int *)(a2 + 2704);
        if (v122 + 1 >= v123)
        {
          v124 = 65280;
          v125 = v122 + 2;
          *(_QWORD *)(a2 + 2720) = v125;
          if (v125 >= v123)
          {
LABEL_142:
            v120 = 255;
            goto LABEL_135;
          }
        }
        else
        {
          v124 = *(unsigned __int8 *)(*(_QWORD *)(a2 + 2712) + v122 + 1) << 8;
          v125 = v122 + 2;
          *(_QWORD *)(a2 + 2720) = v125;
          if (v125 >= v123)
            goto LABEL_142;
        }
        v120 = *(unsigned __int8 *)(*(_QWORD *)(a2 + 2712) + v125);
LABEL_135:
        v115 |= v124 | v120;
        v119 = 16;
        *(_DWORD *)(a2 + 2744) = 16;
LABEL_136:
        v121 = 2 * v113;
        v23 = v113 >= 0x20000001;
        v113 *= 2;
        if (v23)
          goto LABEL_144;
      }
    case 2:
      v146 = (unsigned int *)(a2 + 2704);
      v147 = (int *)a4[12];
      v148 = gcl::ArithmeticDecoder::decodeSignedExpGolomb((unsigned int *)(a2 + 2704), *v147, (_WORD *)a4[3], (_WORD *)a4[9]);
      if (v148 >= 0)
        v149 = v148;
      else
        v149 = -v148;
      v150 = v149 >> *v147;
      if (*v147)
        v151 = v150 == 0;
      else
        v151 = 0;
      if (v151)
      {
        v152 = -1;
      }
      else
      {
        if (v150 < 2)
          goto LABEL_334;
        v152 = 1;
      }
      *v147 += v152;
LABEL_334:
      *v6 = v148;
      v279 = a4[12];
      v280 = gcl::ArithmeticDecoder::decodeSignedExpGolomb(v146, *(_DWORD *)(v279 + 4), (_WORD *)(a4[3] + 2), (_WORD *)(a4[9] + 2));
      if (v280 >= 0)
        v281 = v280;
      else
        v281 = -v280;
      v282 = *(_DWORD *)(v279 + 4);
      v283 = v281 >> v282;
      if (v282)
        v284 = v283 == 0;
      else
        v284 = 0;
      if (v284)
      {
        v285 = -1;
      }
      else
      {
        if (v283 < 2)
        {
LABEL_345:
          v6[1] = v280;
          v286 = a4[12];
          result = gcl::ArithmeticDecoder::decodeSignedExpGolomb(v146, *(_DWORD *)(v286 + 8), (_WORD *)(a4[3] + 4), (_WORD *)(a4[9] + 4));
          if ((int)result >= 0)
            v287 = result;
          else
            v287 = -(int)result;
          v288 = *(_DWORD *)(v286 + 8);
          v289 = v287 >> v288;
          if (!v288 || v289)
          {
            if (v289 < 2)
              goto LABEL_354;
            v290 = 1;
          }
          else
          {
            v290 = -1;
          }
          *(_DWORD *)(v286 + 8) = v290 + v288;
          goto LABEL_354;
        }
        v285 = 1;
      }
      *(_DWORD *)(v279 + 4) = v285 + v282;
      goto LABEL_345;
    case 3:
      v132 = *(_DWORD *)(a2 + 2688);
      if (v132 <= 0)
      {
        v134 = 0;
        goto LABEL_357;
      }
      v133 = 0;
      v134 = 0;
      v135 = *(_DWORD *)(a2 + 2732);
      v136 = *(_DWORD *)(a2 + 2736);
      do
      {
        if (v135 < 0x40000001)
        {
          v140 = *(_DWORD *)(a2 + 2744);
          while (1)
          {
            v136 *= 2;
            *(_DWORD *)(a2 + 2744) = --v140;
            if (v140)
              goto LABEL_162;
            v142 = *(_QWORD *)(a2 + 2720);
            *(_QWORD *)(a2 + 2720) = v142 + 1;
            v143 = *(unsigned int *)(a2 + 2704);
            if (v142 + 1 >= v143)
            {
              v144 = 65280;
              v145 = v142 + 2;
              *(_QWORD *)(a2 + 2720) = v145;
              if (v145 >= v143)
              {
LABEL_168:
                v141 = 255;
                goto LABEL_161;
              }
            }
            else
            {
              v144 = *(unsigned __int8 *)(*(_QWORD *)(a2 + 2712) + v142 + 1) << 8;
              v145 = v142 + 2;
              *(_QWORD *)(a2 + 2720) = v145;
              if (v145 >= v143)
                goto LABEL_168;
            }
            v141 = *(unsigned __int8 *)(*(_QWORD *)(a2 + 2712) + v145);
LABEL_161:
            v136 |= v144 | v141;
            v140 = 16;
            *(_DWORD *)(a2 + 2744) = 16;
LABEL_162:
            v137 = 2 * v135;
            v23 = v135 >= 0x20000001;
            v135 *= 2;
            if (v23)
              goto LABEL_155;
          }
        }
        v137 = v135;
LABEL_155:
        v138 = (v137 >> 1) & 0x7FFF0000;
        v135 = v137 - v138;
        v139 = v136 >= v138;
        if (v136 < v138)
        {
          v135 = v138;
          v138 = 0;
        }
        v136 -= v138;
        *(_DWORD *)(a2 + 2732) = v135;
        *(_DWORD *)(a2 + 2736) = v136;
        v134 += v139 << v133++;
      }
      while (v133 != v132);
LABEL_357:
      *(_DWORD *)result = v134;
      v291 = *(_DWORD *)(a2 + 2692);
      if (v291 >= 1)
      {
        v292 = 0;
        v293 = 0;
        v294 = *(_DWORD *)(a2 + 2732);
        v295 = *(_DWORD *)(a2 + 2736);
        while (v294 >= 0x40000001)
        {
          v296 = v294;
LABEL_360:
          v297 = (v296 >> 1) & 0x7FFF0000;
          v294 = v296 - v297;
          v298 = v295 >= v297;
          if (v295 < v297)
          {
            v294 = v297;
            v297 = 0;
          }
          v295 -= v297;
          *(_DWORD *)(a2 + 2732) = v294;
          *(_DWORD *)(a2 + 2736) = v295;
          v293 += v298 << v292++;
          if (v292 == v291)
            goto LABEL_375;
        }
        v299 = *(_DWORD *)(a2 + 2744);
        while (2)
        {
          v295 *= 2;
          *(_DWORD *)(a2 + 2744) = --v299;
          if (v299)
            goto LABEL_367;
          v301 = *(_QWORD *)(a2 + 2720);
          *(_QWORD *)(a2 + 2720) = v301 + 1;
          v302 = *(unsigned int *)(a2 + 2704);
          if (v301 + 1 >= v302)
          {
            v303 = 65280;
            v304 = v301 + 2;
            *(_QWORD *)(a2 + 2720) = v304;
            if (v304 >= v302)
              goto LABEL_373;
          }
          else
          {
            v303 = *(unsigned __int8 *)(*(_QWORD *)(a2 + 2712) + v301 + 1) << 8;
            v304 = v301 + 2;
            *(_QWORD *)(a2 + 2720) = v304;
            if (v304 >= v302)
            {
LABEL_373:
              v300 = 255;
LABEL_366:
              v295 |= v303 | v300;
              v299 = 16;
              *(_DWORD *)(a2 + 2744) = 16;
LABEL_367:
              v296 = 2 * v294;
              v23 = v294 >= 0x20000001;
              v294 *= 2;
              if (v23)
                goto LABEL_360;
              continue;
            }
          }
          break;
        }
        v300 = *(unsigned __int8 *)(*(_QWORD *)(a2 + 2712) + v304);
        goto LABEL_366;
      }
      v293 = 0;
LABEL_375:
      *(_DWORD *)(result + 4) = v293;
      v305 = *(_DWORD *)(a2 + 2696);
      if (v305 < 1)
      {
        result = 0;
        v6[2] = 0;
        return result;
      }
      v306 = 0;
      LODWORD(result) = 0;
      v307 = *(_DWORD *)(a2 + 2732);
      v308 = *(_DWORD *)(a2 + 2736);
      while (2)
      {
        if (v307 < 0x40000001)
        {
          v312 = *(_DWORD *)(a2 + 2744);
          while (1)
          {
            v308 *= 2;
            *(_DWORD *)(a2 + 2744) = --v312;
            if (v312)
              goto LABEL_385;
            v314 = *(_QWORD *)(a2 + 2720);
            *(_QWORD *)(a2 + 2720) = v314 + 1;
            v315 = *(unsigned int *)(a2 + 2704);
            if (v314 + 1 >= v315)
            {
              v316 = 65280;
              v317 = v314 + 2;
              *(_QWORD *)(a2 + 2720) = v317;
              if (v317 >= v315)
              {
LABEL_391:
                v313 = 255;
                goto LABEL_384;
              }
            }
            else
            {
              v316 = *(unsigned __int8 *)(*(_QWORD *)(a2 + 2712) + v314 + 1) << 8;
              v317 = v314 + 2;
              *(_QWORD *)(a2 + 2720) = v317;
              if (v317 >= v315)
                goto LABEL_391;
            }
            v313 = *(unsigned __int8 *)(*(_QWORD *)(a2 + 2712) + v317);
LABEL_384:
            v308 |= v316 | v313;
            v312 = 16;
            *(_DWORD *)(a2 + 2744) = 16;
LABEL_385:
            v309 = 2 * v307;
            v23 = v307 >= 0x20000001;
            v307 *= 2;
            if (v23)
              goto LABEL_378;
          }
        }
        v309 = v307;
LABEL_378:
        v310 = (v309 >> 1) & 0x7FFF0000;
        v307 = v309 - v310;
        v311 = v308 >= v310;
        if (v308 < v310)
        {
          v307 = v310;
          v310 = 0;
        }
        v308 -= v310;
        *(_DWORD *)(a2 + 2732) = v307;
        *(_DWORD *)(a2 + 2736) = v308;
        result = ((v311 << v306++) + result);
        if (v306 != v305)
          continue;
        break;
      }
LABEL_354:
      v6[2] = result;
      return result;
    case 4:
      v153 = 0;
      v318 = (unsigned int *)(a2 + 2704);
      break;
    default:
      return result;
  }
  while (1)
  {
    v156 = *a4;
    v157 = *(unsigned __int16 *)(*a4 + 2 * v153);
    v158 = *(_DWORD *)(a2 + 2732);
    v159 = *(_DWORD *)(a2 + 2736);
    if (v158 < 0x40000001)
    {
      v160 = *(_DWORD *)(a2 + 2744);
      while (1)
      {
        v159 *= 2;
        *(_DWORD *)(a2 + 2744) = --v160;
        if (v160)
          goto LABEL_189;
        v163 = *(_QWORD *)(a2 + 2720);
        *(_QWORD *)(a2 + 2720) = v163 + 1;
        v164 = *(unsigned int *)(a2 + 2704);
        if (v163 + 1 >= v164)
        {
          v165 = 65280;
          v166 = v163 + 2;
          *(_QWORD *)(a2 + 2720) = v166;
          if (v166 >= v164)
          {
LABEL_195:
            v161 = 255;
            goto LABEL_188;
          }
        }
        else
        {
          v165 = *(unsigned __int8 *)(*(_QWORD *)(a2 + 2712) + v163 + 1) << 8;
          v166 = v163 + 2;
          *(_QWORD *)(a2 + 2720) = v166;
          if (v166 >= v164)
            goto LABEL_195;
        }
        v161 = *(unsigned __int8 *)(*(_QWORD *)(a2 + 2712) + v166);
LABEL_188:
        v159 |= v165 | v161;
        v160 = 16;
        *(_DWORD *)(a2 + 2744) = 16;
LABEL_189:
        v162 = 2 * v158;
        v23 = v158 >= 0x20000001;
        v158 *= 2;
        if (v23)
          goto LABEL_197;
      }
    }
    v162 = *(_DWORD *)(a2 + 2732);
LABEL_197:
    v155 = 0;
    v167 = (HIWORD(v162) * v157) & 0xFFFF0000;
    v168 = v159 < v167 ? 0 : (HIWORD(v162) * v157) & 0xFFFF0000;
    v169 = v159 - v168;
    *(_DWORD *)(a2 + 2736) = v159 - v168;
    v170 = v159 >= v167;
    v171 = (v157 >> 7) & 0x1FE | (v159 >= v167);
    v172 = v162 - v167;
    *(_WORD *)(v156 + 2 * v153) = *(_WORD *)(a2 + 2 * v171 + 2752) + v157;
    v173 = v170 ? v162 - v167 : (HIWORD(v162) * v157) & 0xFFFF0000;
    *(_DWORD *)(a2 + 2732) = v173;
    if (v170)
      break;
LABEL_184:
    v6[v153++] = v155;
    if (v153 == 3)
      return result;
  }
  v174 = a4[3];
  v175 = *(unsigned __int16 *)(v174 + 2 * v153);
  if (v172 < 0x40000001)
  {
    v176 = *(_DWORD *)(a2 + 2744);
    while (1)
    {
      v169 *= 2;
      *(_DWORD *)(a2 + 2744) = --v176;
      if (v176)
        goto LABEL_209;
      v179 = *(_QWORD *)(a2 + 2720);
      *(_QWORD *)(a2 + 2720) = v179 + 1;
      v180 = *(unsigned int *)(a2 + 2704);
      if (v179 + 1 >= v180)
      {
        v181 = 65280;
        v182 = v179 + 2;
        *(_QWORD *)(a2 + 2720) = v182;
        if (v182 >= v180)
        {
LABEL_215:
          v177 = 255;
          goto LABEL_208;
        }
      }
      else
      {
        v181 = *(unsigned __int8 *)(*(_QWORD *)(a2 + 2712) + v179 + 1) << 8;
        v182 = v179 + 2;
        *(_QWORD *)(a2 + 2720) = v182;
        if (v182 >= v180)
          goto LABEL_215;
      }
      v177 = *(unsigned __int8 *)(*(_QWORD *)(a2 + 2712) + v182);
LABEL_208:
      v169 |= v181 | v177;
      v176 = 16;
      *(_DWORD *)(a2 + 2744) = 16;
LABEL_209:
      v178 = 2 * v172;
      v23 = v172 >= 0x20000001;
      v172 *= 2;
      if (v23)
        goto LABEL_217;
    }
  }
  v178 = v162 - v167;
LABEL_217:
  v183 = (HIWORD(v178) * v175) & 0xFFFF0000;
  *(_WORD *)(v174 + 2 * v153) = *(_WORD *)(a2 + 2 * ((v175 >> 7) & 0x1FE | (v169 >= v183)) + 2752) + v175;
  if (v169 < v183)
    v184 = (HIWORD(v178) * v175) & 0xFFFF0000;
  else
    v184 = v178 - v183;
  if (v169 < v183)
    v185 = 0;
  else
    v185 = (HIWORD(v178) * v175) & 0xFFFF0000;
  v186 = v169 - v185;
  *(_DWORD *)(a2 + 2732) = v184;
  *(_DWORD *)(a2 + 2736) = v169 - v185;
  v187 = (_WORD *)(a4[6] + (v153 << 7));
  v188 = (unsigned __int16)*v187;
  if (v184 < 0x40000001)
  {
    v189 = *(_DWORD *)(a2 + 2744);
    while (1)
    {
      v186 *= 2;
      *(_DWORD *)(a2 + 2744) = --v189;
      if (v189)
        goto LABEL_227;
      v192 = *(_QWORD *)(a2 + 2720);
      *(_QWORD *)(a2 + 2720) = v192 + 1;
      v193 = *(unsigned int *)(a2 + 2704);
      if (v192 + 1 >= v193)
      {
        v194 = 65280;
        v195 = v192 + 2;
        *(_QWORD *)(a2 + 2720) = v195;
        if (v195 >= v193)
        {
LABEL_233:
          v190 = 255;
          goto LABEL_226;
        }
      }
      else
      {
        v194 = *(unsigned __int8 *)(*(_QWORD *)(a2 + 2712) + v192 + 1) << 8;
        v195 = v192 + 2;
        *(_QWORD *)(a2 + 2720) = v195;
        if (v195 >= v193)
          goto LABEL_233;
      }
      v190 = *(unsigned __int8 *)(*(_QWORD *)(a2 + 2712) + v195);
LABEL_226:
      v186 |= v194 | v190;
      v189 = 16;
      *(_DWORD *)(a2 + 2744) = 16;
LABEL_227:
      v191 = 2 * v184;
      v23 = v184 >= 0x20000001;
      v184 *= 2;
      if (v23)
        goto LABEL_235;
    }
  }
  v191 = v184;
LABEL_235:
  v196 = (HIWORD(v191) * v188) & 0xFFFF0000;
  v197 = v191 - v196;
  v198 = v186 >= v196;
  *v187 = *(_WORD *)(a2 + 2 * ((v188 >> 7) & 0x1FE | v198) + 2752) + v188;
  if (v186 >= v196)
  {
    v199 = v196;
  }
  else
  {
    v197 = v196;
    v199 = 0;
  }
  v200 = v186 - v199;
  *(_DWORD *)(a2 + 2732) = v197;
  *(_DWORD *)(a2 + 2736) = v200;
  v201 = (v198 & 0x7FFFFFFu) + 1;
  v202 = (unsigned __int16)v187[v201];
  if (v197 < 0x40000001)
  {
    v203 = *(_DWORD *)(a2 + 2744);
    while (1)
    {
      v200 *= 2;
      *(_DWORD *)(a2 + 2744) = --v203;
      if (v203)
        goto LABEL_242;
      v206 = *(_QWORD *)(a2 + 2720);
      *(_QWORD *)(a2 + 2720) = v206 + 1;
      v207 = *(unsigned int *)(a2 + 2704);
      if (v206 + 1 >= v207)
      {
        v208 = 65280;
        v209 = v206 + 2;
        *(_QWORD *)(a2 + 2720) = v209;
        if (v209 >= v207)
        {
LABEL_248:
          v204 = 255;
          goto LABEL_241;
        }
      }
      else
      {
        v208 = *(unsigned __int8 *)(*(_QWORD *)(a2 + 2712) + v206 + 1) << 8;
        v209 = v206 + 2;
        *(_QWORD *)(a2 + 2720) = v209;
        if (v209 >= v207)
          goto LABEL_248;
      }
      v204 = *(unsigned __int8 *)(*(_QWORD *)(a2 + 2712) + v209);
LABEL_241:
      v200 |= v208 | v204;
      v203 = 16;
      *(_DWORD *)(a2 + 2744) = 16;
LABEL_242:
      v205 = 2 * v197;
      v23 = v197 >= 0x20000001;
      v197 *= 2;
      if (v23)
        goto LABEL_250;
    }
  }
  v205 = v197;
LABEL_250:
  v210 = 32 * v198;
  v211 = (HIWORD(v205) * v202) & 0xFFFF0000;
  v212 = v200 >= v211;
  v187[v201] = *(_WORD *)(a2 + 2 * ((v202 >> 7) & 0x1FE | v212) + 2752) + v202;
  if (v200 < v211)
    v213 = (HIWORD(v205) * v202) & 0xFFFF0000;
  else
    v213 = v205 - v211;
  if (v200 < v211)
    v211 = 0;
  v214 = v200 - v211;
  *(_DWORD *)(a2 + 2732) = v213;
  *(_DWORD *)(a2 + 2736) = v214;
  v215 = v210 | (16 * v212);
  v216 = (v215 >> 4) + 3;
  v217 = (unsigned __int16)v187[v216];
  if (v213 < 0x40000001)
  {
    v218 = *(_DWORD *)(a2 + 2744);
    while (1)
    {
      v214 *= 2;
      *(_DWORD *)(a2 + 2744) = --v218;
      if (v218)
        goto LABEL_259;
      v221 = *(_QWORD *)(a2 + 2720);
      *(_QWORD *)(a2 + 2720) = v221 + 1;
      v222 = *(unsigned int *)(a2 + 2704);
      if (v221 + 1 >= v222)
      {
        v223 = 65280;
        v224 = v221 + 2;
        *(_QWORD *)(a2 + 2720) = v224;
        if (v224 >= v222)
        {
LABEL_265:
          v219 = 255;
          goto LABEL_258;
        }
      }
      else
      {
        v223 = *(unsigned __int8 *)(*(_QWORD *)(a2 + 2712) + v221 + 1) << 8;
        v224 = v221 + 2;
        *(_QWORD *)(a2 + 2720) = v224;
        if (v224 >= v222)
          goto LABEL_265;
      }
      v219 = *(unsigned __int8 *)(*(_QWORD *)(a2 + 2712) + v224);
LABEL_258:
      v214 |= v223 | v219;
      v218 = 16;
      *(_DWORD *)(a2 + 2744) = 16;
LABEL_259:
      v220 = 2 * v213;
      v23 = v213 >= 0x20000001;
      v213 *= 2;
      if (v23)
        goto LABEL_267;
    }
  }
  v220 = v213;
LABEL_267:
  v225 = (HIWORD(v220) * v217) & 0xFFFF0000;
  v226 = v214 >= v225;
  v187[v216] = *(_WORD *)(a2 + 2 * ((v217 >> 7) & 0x1FE | v226) + 2752) + v217;
  if (v214 < v225)
    v227 = (HIWORD(v220) * v217) & 0xFFFF0000;
  else
    v227 = v220 - v225;
  if (v214 < v225)
    v228 = 0;
  else
    v228 = (HIWORD(v220) * v217) & 0xFFFF0000;
  v229 = v214 - v228;
  *(_DWORD *)(a2 + 2732) = v227;
  *(_DWORD *)(a2 + 2736) = v229;
  v230 = v215 | (8 * v226);
  v231 = (v230 >> 3) + 7;
  v232 = (unsigned __int16)v187[v231];
  if (v227 < 0x40000001)
  {
    v233 = *(_DWORD *)(a2 + 2744);
    while (1)
    {
      v229 *= 2;
      *(_DWORD *)(a2 + 2744) = --v233;
      if (v233)
        goto LABEL_277;
      v236 = *(_QWORD *)(a2 + 2720);
      *(_QWORD *)(a2 + 2720) = v236 + 1;
      v237 = *(unsigned int *)(a2 + 2704);
      if (v236 + 1 >= v237)
      {
        v238 = 65280;
        v239 = v236 + 2;
        *(_QWORD *)(a2 + 2720) = v239;
        if (v239 >= v237)
        {
LABEL_283:
          v234 = 255;
          goto LABEL_276;
        }
      }
      else
      {
        v238 = *(unsigned __int8 *)(*(_QWORD *)(a2 + 2712) + v236 + 1) << 8;
        v239 = v236 + 2;
        *(_QWORD *)(a2 + 2720) = v239;
        if (v239 >= v237)
          goto LABEL_283;
      }
      v234 = *(unsigned __int8 *)(*(_QWORD *)(a2 + 2712) + v239);
LABEL_276:
      v229 |= v238 | v234;
      v233 = 16;
      *(_DWORD *)(a2 + 2744) = 16;
LABEL_277:
      v235 = 2 * v227;
      v23 = v227 >= 0x20000001;
      v227 *= 2;
      if (v23)
        goto LABEL_285;
    }
  }
  v235 = v227;
LABEL_285:
  v240 = (HIWORD(v235) * v232) & 0xFFFF0000;
  v241 = v229 >= v240;
  v187[v231] = *(_WORD *)(a2 + 2 * ((v232 >> 7) & 0x1FE | v241) + 2752) + v232;
  if (v229 < v240)
    v242 = (HIWORD(v235) * v232) & 0xFFFF0000;
  else
    v242 = v235 - v240;
  if (v229 < v240)
    v243 = 0;
  else
    v243 = (HIWORD(v235) * v232) & 0xFFFF0000;
  v244 = v229 - v243;
  *(_DWORD *)(a2 + 2732) = v242;
  *(_DWORD *)(a2 + 2736) = v244;
  v245 = v230 | (4 * v241);
  v246 = (v245 >> 2) + 15;
  v247 = (unsigned __int16)v187[v246];
  if (v242 < 0x40000001)
  {
    v248 = *(_DWORD *)(a2 + 2744);
    while (1)
    {
      v244 *= 2;
      *(_DWORD *)(a2 + 2744) = --v248;
      if (v248)
        goto LABEL_295;
      v251 = *(_QWORD *)(a2 + 2720);
      *(_QWORD *)(a2 + 2720) = v251 + 1;
      v252 = *(unsigned int *)(a2 + 2704);
      if (v251 + 1 >= v252)
      {
        v253 = 65280;
        v254 = v251 + 2;
        *(_QWORD *)(a2 + 2720) = v254;
        if (v254 >= v252)
        {
LABEL_301:
          v249 = 255;
          goto LABEL_294;
        }
      }
      else
      {
        v253 = *(unsigned __int8 *)(*(_QWORD *)(a2 + 2712) + v251 + 1) << 8;
        v254 = v251 + 2;
        *(_QWORD *)(a2 + 2720) = v254;
        if (v254 >= v252)
          goto LABEL_301;
      }
      v249 = *(unsigned __int8 *)(*(_QWORD *)(a2 + 2712) + v254);
LABEL_294:
      v244 |= v253 | v249;
      v248 = 16;
      *(_DWORD *)(a2 + 2744) = 16;
LABEL_295:
      v250 = 2 * v242;
      v23 = v242 >= 0x20000001;
      v242 *= 2;
      if (v23)
        goto LABEL_303;
    }
  }
  v250 = v242;
LABEL_303:
  v255 = (HIWORD(v250) * v247) & 0xFFFF0000;
  v256 = v244 >= v255;
  v187[v246] = *(_WORD *)(a2 + 2 * ((v247 >> 7) & 0x1FE | v256) + 2752) + v247;
  if (v244 < v255)
    v257 = (HIWORD(v250) * v247) & 0xFFFF0000;
  else
    v257 = v250 - v255;
  if (v244 < v255)
    v258 = 0;
  else
    v258 = (HIWORD(v250) * v247) & 0xFFFF0000;
  v259 = v244 - v258;
  *(_DWORD *)(a2 + 2732) = v257;
  *(_DWORD *)(a2 + 2736) = v259;
  v260 = v245 | (2 * v256);
  v261 = (v260 >> 1) + 31;
  v262 = (unsigned __int16)v187[v261];
  if (v257 < 0x40000001)
  {
    v263 = *(_DWORD *)(a2 + 2744);
    while (1)
    {
      v259 *= 2;
      *(_DWORD *)(a2 + 2744) = --v263;
      if (v263)
        goto LABEL_313;
      v266 = *(_QWORD *)(a2 + 2720);
      *(_QWORD *)(a2 + 2720) = v266 + 1;
      v267 = *(unsigned int *)(a2 + 2704);
      if (v266 + 1 >= v267)
      {
        v268 = 65280;
        v269 = v266 + 2;
        *(_QWORD *)(a2 + 2720) = v269;
        if (v269 >= v267)
        {
LABEL_319:
          v264 = 255;
          goto LABEL_312;
        }
      }
      else
      {
        v268 = *(unsigned __int8 *)(*(_QWORD *)(a2 + 2712) + v266 + 1) << 8;
        v269 = v266 + 2;
        *(_QWORD *)(a2 + 2720) = v269;
        if (v269 >= v267)
          goto LABEL_319;
      }
      v264 = *(unsigned __int8 *)(*(_QWORD *)(a2 + 2712) + v269);
LABEL_312:
      v259 |= v268 | v264;
      v263 = 16;
      *(_DWORD *)(a2 + 2744) = 16;
LABEL_313:
      v265 = 2 * v257;
      v23 = v257 >= 0x20000001;
      v257 *= 2;
      if (v23)
        goto LABEL_321;
    }
  }
  v265 = v257;
LABEL_321:
  v270 = (HIWORD(v265) * v262) & 0xFFFF0000;
  v271 = v265 - v270;
  v272 = v259 >= v270;
  v187[v261] = *(_WORD *)(a2 + 2 * ((v262 >> 7) & 0x1FE | v272) + 2752) + v262;
  if (v259 < v270)
    v273 = v270;
  else
    v273 = v271;
  if (v259 < v270)
    v274 = 0;
  else
    v274 = v270;
  *(_DWORD *)(a2 + 2732) = v273;
  *(_DWORD *)(a2 + 2736) = v259 - v274;
  v275 = v260 | v272;
  if ((v260 | v272) == 0x3F)
  {
    v276 = a4[12];
    result = gcl::ArithmeticDecoder::decodeExpGolomb(v318, *(_DWORD *)(v276 + 4 * v153), (_WORD *)(a4[9] + 2 * v153));
    v275 = result + 63;
    v277 = *(_DWORD *)(v276 + 4 * v153);
    v278 = ((int)result + 63) >> v277;
    if (v277 && !v278)
    {
      v154 = -1;
LABEL_180:
      *(_DWORD *)(v276 + 4 * v153) = v154 + v277;
      goto LABEL_181;
    }
    if (v278 >= 2)
    {
      v154 = 1;
      goto LABEL_180;
    }
  }
LABEL_181:
  if (v169 >= v183)
    v155 = v275 + 1;
  else
    v155 = ~v275;
  goto LABEL_184;
}

uint64_t gcl::ArithmeticDecoder::decodeSignedExpGolomb(unsigned int *a1, int a2, _WORD *a3, _WORD *a4)
{
  uint64_t result;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  int v10;
  int v11;
  unsigned int v12;
  uint64_t v13;
  unint64_t v14;
  int v15;
  unint64_t v16;
  unsigned int v17;
  BOOL v18;
  unsigned int v19;

  result = gcl::ArithmeticDecoder::decodeExpGolomb(a1, a2, a4);
  if ((_DWORD)result)
  {
    v7 = (unsigned __int16)*a3;
    v9 = a1[7];
    v8 = a1[8];
    if (v9 <= 0x40000000)
    {
      v10 = a1[10];
      while (1)
      {
        v8 *= 2;
        a1[10] = --v10;
        if (v10)
          goto LABEL_6;
        v13 = *((_QWORD *)a1 + 2);
        *((_QWORD *)a1 + 2) = v13 + 1;
        v14 = *a1;
        if (v13 + 1 >= v14)
        {
          v15 = 65280;
          v16 = v13 + 2;
          *((_QWORD *)a1 + 2) = v16;
          if (v16 >= v14)
          {
LABEL_12:
            v11 = 255;
            goto LABEL_5;
          }
        }
        else
        {
          v15 = *(unsigned __int8 *)(*((_QWORD *)a1 + 1) + v13 + 1) << 8;
          v16 = v13 + 2;
          *((_QWORD *)a1 + 2) = v16;
          if (v16 >= v14)
            goto LABEL_12;
        }
        v11 = *(unsigned __int8 *)(*((_QWORD *)a1 + 1) + v16);
LABEL_5:
        v8 |= v15 | v11;
        v10 = 16;
        a1[10] = 16;
LABEL_6:
        v12 = 2 * v9;
        v18 = v9 >= 0x20000001;
        v9 *= 2;
        if (v18)
          goto LABEL_14;
      }
    }
    v12 = a1[7];
LABEL_14:
    v17 = (HIWORD(v12) * v7) & 0xFFFF0000;
    v18 = v8 >= v17;
    *a3 = *((_WORD *)a1 + ((v7 >> 7) & 0x1FE | (v8 >= v17)) + 24) + v7;
    if (v8 < v17)
      v19 = (HIWORD(v12) * v7) & 0xFFFF0000;
    else
      v19 = v12 - v17;
    if (v8 < v17)
      v17 = 0;
    if (v18)
      result = result;
    else
      result = -(int)result;
    a1[7] = v19;
    a1[8] = v8 - v17;
  }
  return result;
}

uint64_t gcl::ArithmeticDecoder::decodeExpGolomb(unsigned int *a1, int a2, _WORD *a3)
{
  int v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  int v7;
  int v8;
  unsigned int v9;
  uint64_t v10;
  unint64_t v11;
  int v12;
  unint64_t v13;
  unsigned int v14;
  unsigned int v15;
  BOOL v16;
  int v17;
  int v19;
  int v20;
  unsigned int v22;
  unsigned int v23;
  int v24;
  int v25;
  int v26;
  uint64_t v27;
  unint64_t v28;
  int v29;
  unint64_t v30;

  v3 = 0;
  v4 = (unsigned __int16)*a3;
  v6 = a1[7];
  v5 = a1[8];
  if (v6 >= 0x40000001)
    goto LABEL_12;
LABEL_2:
  v7 = a1[10];
  do
  {
    v5 *= 2;
    a1[10] = --v7;
    if (!v7)
    {
      v10 = *((_QWORD *)a1 + 2);
      *((_QWORD *)a1 + 2) = v10 + 1;
      v11 = *a1;
      if (v10 + 1 >= v11)
      {
        v12 = 65280;
        v13 = v10 + 2;
        *((_QWORD *)a1 + 2) = v13;
        if (v13 >= v11)
        {
LABEL_11:
          v8 = 255;
          goto LABEL_4;
        }
      }
      else
      {
        v12 = *(unsigned __int8 *)(*((_QWORD *)a1 + 1) + v10 + 1) << 8;
        v13 = v10 + 2;
        *((_QWORD *)a1 + 2) = v13;
        if (v13 >= v11)
          goto LABEL_11;
      }
      v8 = *(unsigned __int8 *)(*((_QWORD *)a1 + 1) + v13);
LABEL_4:
      v5 |= v12 | v8;
      v7 = 16;
      a1[10] = 16;
    }
    v9 = 2 * v6;
    v16 = v6 >= 0x20000001;
    v6 *= 2;
  }
  while (!v16);
  while (1)
  {
    v6 = (HIWORD(v9) * (unsigned __int16)v4) & 0xFFFF0000;
    v14 = v9 - v6;
    if (v5 < v6)
      v15 = 0;
    else
      v15 = (HIWORD(v9) * (unsigned __int16)v4) & 0xFFFF0000;
    v16 = v5 >= v6;
    v5 -= v15;
    v17 = v16;
    v4 += *((unsigned __int16 *)a1 + ((v4 >> 7) & 0x1FE | v17) + 24);
    *a3 = v4;
    if (v16)
      v6 = v14;
    a1[7] = v6;
    a1[8] = v5;
    if (!v16 || a2 >= 31)
      break;
    v19 = 1 << a2++;
    v3 |= v19;
    if (v6 < 0x40000001)
      goto LABEL_2;
LABEL_12:
    v9 = v6;
  }
  v20 = 0;
  if (a2)
  {
    while (v6 >= 0x40000001)
    {
      v22 = v6;
LABEL_31:
      v23 = (v22 >> 1) & 0x7FFF0000;
      v6 = v22 - v23;
      v24 = v5 >= v23;
      if (v5 < v23)
      {
        v6 = v23;
        v23 = 0;
      }
      v5 -= v23;
      a1[7] = v6;
      a1[8] = v5;
      v20 |= v24 << --a2;
      if (!a2)
        return (v20 + v3);
    }
    v25 = a1[10];
    while (1)
    {
      v5 *= 2;
      a1[10] = --v25;
      if (v25)
        goto LABEL_38;
      v27 = *((_QWORD *)a1 + 2);
      *((_QWORD *)a1 + 2) = v27 + 1;
      v28 = *a1;
      if (v27 + 1 >= v28)
      {
        v29 = 65280;
        v30 = v27 + 2;
        *((_QWORD *)a1 + 2) = v30;
        if (v30 >= v28)
        {
LABEL_44:
          v26 = 255;
          goto LABEL_37;
        }
      }
      else
      {
        v29 = *(unsigned __int8 *)(*((_QWORD *)a1 + 1) + v27 + 1) << 8;
        v30 = v27 + 2;
        *((_QWORD *)a1 + 2) = v30;
        if (v30 >= v28)
          goto LABEL_44;
      }
      v26 = *(unsigned __int8 *)(*((_QWORD *)a1 + 1) + v30);
LABEL_37:
      v5 |= v29 | v26;
      v25 = 16;
      a1[10] = 16;
LABEL_38:
      v22 = 2 * v6;
      v16 = v6 >= 0x20000001;
      v6 *= 2;
      if (v16)
        goto LABEL_31;
    }
  }
  return (v20 + v3);
}

uint64_t gcl::tmesh::DecoderImpl::decompressTFanConnectivity(gcl::tmesh::DecoderImpl *this, int a2, unsigned int a3, uint64_t a4, int *a5, _DWORD *a6, _DWORD *a7)
{
  _WORD *v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  int v16;
  int v17;
  unsigned int v18;
  uint64_t v19;
  unint64_t v20;
  int v21;
  unint64_t v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  char v28;
  char v29;
  int v30;
  int v31;
  int v32;
  char *v33;
  unsigned int v34;
  int v35;
  int v36;
  unsigned int v37;
  uint64_t v38;
  unint64_t v39;
  int v40;
  unint64_t v41;
  unsigned int v42;
  unsigned int v43;
  BOOL v44;
  _BOOL4 v45;
  unsigned int v46;
  uint64_t v47;
  unsigned int v48;
  char *v49;
  unsigned int v50;
  int v51;
  int v52;
  unsigned int v53;
  uint64_t v54;
  unint64_t v55;
  int v56;
  unint64_t v57;
  unsigned int v58;
  unsigned int v59;
  _BOOL4 v60;
  unsigned int v61;
  unsigned int v62;
  unsigned int v63;
  int v64;
  _WORD *v65;
  unsigned int v66;
  int v67;
  int v68;
  unsigned int v69;
  uint64_t v70;
  unint64_t v71;
  int v72;
  unint64_t v73;
  unsigned int v74;
  unsigned int v75;
  BOOL v76;
  unsigned int v77;
  int v78;
  int v79;
  unsigned int v80;
  int *v81;
  int v82;
  _WORD *v83;
  unsigned int v84;
  unsigned int v85;
  unsigned int v86;
  int v87;
  int v88;
  unsigned int v89;
  uint64_t v90;
  unint64_t v91;
  int v92;
  unint64_t v93;
  unsigned int v94;
  unsigned int v95;
  BOOL v96;
  _BOOL4 v97;
  unsigned int v98;
  unsigned int v99;
  uint64_t v100;
  unsigned int v101;
  _WORD *v102;
  unsigned int v103;
  int v104;
  int v105;
  unsigned int v106;
  uint64_t v107;
  unint64_t v108;
  int v109;
  unint64_t v110;
  unsigned int v111;
  unsigned int v112;
  _BOOL4 v113;
  unsigned int v114;
  unsigned int v115;
  unsigned int v116;
  int v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  char *v121;
  unint64_t v122;
  unint64_t v123;
  _DWORD *v124;
  char *v125;
  char *v126;
  size_t v127;
  uint64_t v128;
  unint64_t v129;
  uint64_t v130;
  size_t v131;
  char *v132;
  char *v133;
  char *v134;
  char *v135;
  unint64_t v136;
  char *v137;
  char *v138;
  unint64_t v139;
  __int128 v140;
  char *v141;
  char *v142;
  unint64_t v143;
  uint64_t v144;
  char *v145;
  char v146;
  _DWORD *v147;
  uint64_t v148;
  int v149;
  unsigned int v150;
  unsigned int v151;
  unsigned int v152;
  int v153;
  int v154;
  unsigned int v155;
  uint64_t v156;
  unint64_t v157;
  int v158;
  unint64_t v159;
  unsigned int v160;
  unsigned int v161;
  unsigned int v162;
  unsigned int v163;
  uint64_t v164;
  int v165;
  int v166;
  uint64_t v167;
  int v168;
  unsigned int v169;
  unsigned int v170;
  int v171;
  int v172;
  unsigned int v173;
  uint64_t v174;
  unint64_t v175;
  int v176;
  unint64_t v177;
  unsigned int v178;
  unsigned int v179;
  unsigned int v180;
  _BOOL4 v181;
  unsigned int v182;
  int v183;
  uint64_t v185;
  uint64_t v186;
  _DWORD *v187;
  BOOL v188;
  int v189;
  uint64_t v190;
  int v191;
  uint64_t v192;
  uint64_t v193;
  int v194;
  int v195;
  _DWORD *v196;
  int v197;
  int v198;
  uint64_t v199;
  int v200;
  _DWORD *v201;
  int *v202;
  int v203;
  int v204;
  uint64_t v205;
  int v206;
  _DWORD *v207;
  _DWORD *v208;
  _BOOL4 v209;
  uint64_t v210;
  uint64_t v211;
  int *v212;
  uint64_t v213;
  uint64_t v214;
  int v215;
  _DWORD *v216;
  _DWORD *v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  int v221;
  int v222;
  int v223;
  _DWORD *v224;
  char *v225;
  unint64_t v226;
  char *v227;
  size_t v228;
  char *v229;
  uint64_t v230;
  int v231;
  int v232;
  int *v233;
  _DWORD *v234;
  unsigned int *v235;
  int v236;
  int v238;
  char v239;
  char v240;
  int v241;
  char v242;
  unsigned int v243;
  int v244;
  int v245;

  v12 = (_WORD *)((char *)this + 16 * a3 + 2060);
  v13 = (unsigned __int16)*v12;
  v14 = *((_DWORD *)this + 683);
  v15 = *((_DWORD *)this + 684);
  if (v14 < 0x40000001)
  {
    v16 = *((_DWORD *)this + 686);
    while (1)
    {
      v15 *= 2;
      *((_DWORD *)this + 686) = --v16;
      if (v16)
        goto LABEL_5;
      v19 = *((_QWORD *)this + 340);
      *((_QWORD *)this + 340) = v19 + 1;
      v20 = *((unsigned int *)this + 676);
      if (v19 + 1 >= v20)
      {
        v21 = 65280;
        v22 = v19 + 2;
        *((_QWORD *)this + 340) = v22;
        if (v22 >= v20)
        {
LABEL_11:
          v17 = 255;
          goto LABEL_4;
        }
      }
      else
      {
        v21 = *(unsigned __int8 *)(*((_QWORD *)this + 339) + v19 + 1) << 8;
        v22 = v19 + 2;
        *((_QWORD *)this + 340) = v22;
        if (v22 >= v20)
          goto LABEL_11;
      }
      v17 = *(unsigned __int8 *)(*((_QWORD *)this + 339) + v22);
LABEL_4:
      v15 |= v21 | v17;
      v16 = 16;
      *((_DWORD *)this + 686) = 16;
LABEL_5:
      v18 = 2 * v14;
      v44 = v14 >= 0x20000001;
      v14 *= 2;
      if (v44)
        goto LABEL_13;
    }
  }
  v18 = *((_DWORD *)this + 683);
LABEL_13:
  v23 = (HIWORD(v18) * v13) & 0xFFFF0000;
  v24 = v18 - v23;
  if (v15 < v23)
    v25 = 0;
  else
    v25 = v23;
  v26 = v15 - v25;
  *((_DWORD *)this + 684) = v26;
  *v12 = *((_WORD *)this + ((v13 >> 7) & 0x1FE | (v15 >= v23)) + 1376) + v13;
  if (v15 < v23)
    v27 = v23;
  else
    v27 = v24;
  *((_DWORD *)this + 683) = v27;
  if (v15 < v23)
  {
    v33 = (char *)this + 16 * a3;
    v34 = *((unsigned __int16 *)v33 + 1031);
    if (v23 < 0x40000001)
    {
      v35 = *((_DWORD *)this + 686);
      while (1)
      {
        v26 *= 2;
        *((_DWORD *)this + 686) = --v35;
        if (v35)
          goto LABEL_26;
        v38 = *((_QWORD *)this + 340);
        *((_QWORD *)this + 340) = v38 + 1;
        v39 = *((unsigned int *)this + 676);
        if (v38 + 1 >= v39)
        {
          v40 = 65280;
          v41 = v38 + 2;
          *((_QWORD *)this + 340) = v41;
          if (v41 >= v39)
          {
LABEL_32:
            v36 = 255;
            goto LABEL_25;
          }
        }
        else
        {
          v40 = *(unsigned __int8 *)(*((_QWORD *)this + 339) + v38 + 1) << 8;
          v41 = v38 + 2;
          *((_QWORD *)this + 340) = v41;
          if (v41 >= v39)
            goto LABEL_32;
        }
        v36 = *(unsigned __int8 *)(*((_QWORD *)this + 339) + v41);
LABEL_25:
        v26 |= v40 | v36;
        v35 = 16;
        *((_DWORD *)this + 686) = 16;
LABEL_26:
        v37 = 2 * v23;
        v44 = v23 >= 0x20000001;
        v23 *= 2;
        if (v44)
          goto LABEL_34;
      }
    }
    v37 = v23;
LABEL_34:
    v42 = (HIWORD(v37) * v34) & 0xFFFF0000;
    v43 = v37 - v42;
    v44 = v26 >= v42;
    v45 = v26 >= v42;
    *((_WORD *)v33 + 1031) = *((_WORD *)this + ((v34 >> 7) & 0x1FE | v45) + 1376) + v34;
    if (v26 < v42)
      v46 = v42;
    else
      v46 = v43;
    if (v26 < v42)
      v42 = 0;
    v47 = 4;
    if (v44)
      v47 = 6;
    v48 = v26 - v42;
    *((_DWORD *)this + 683) = v46;
    *((_DWORD *)this + 684) = v48;
    v49 = &v33[v47 + 2060];
    v50 = *(unsigned __int16 *)v49;
    if (v46 < 0x40000001)
    {
      v51 = *((_DWORD *)this + 686);
      while (1)
      {
        v48 *= 2;
        *((_DWORD *)this + 686) = --v51;
        if (v51)
          goto LABEL_45;
        v54 = *((_QWORD *)this + 340);
        *((_QWORD *)this + 340) = v54 + 1;
        v55 = *((unsigned int *)this + 676);
        if (v54 + 1 >= v55)
        {
          v56 = 65280;
          v57 = v54 + 2;
          *((_QWORD *)this + 340) = v57;
          if (v57 >= v55)
          {
LABEL_51:
            v52 = 255;
            goto LABEL_44;
          }
        }
        else
        {
          v56 = *(unsigned __int8 *)(*((_QWORD *)this + 339) + v54 + 1) << 8;
          v57 = v54 + 2;
          *((_QWORD *)this + 340) = v57;
          if (v57 >= v55)
            goto LABEL_51;
        }
        v52 = *(unsigned __int8 *)(*((_QWORD *)this + 339) + v57);
LABEL_44:
        v48 |= v56 | v52;
        v51 = 16;
        *((_DWORD *)this + 686) = 16;
LABEL_45:
        v53 = 2 * v46;
        v44 = v46 >= 0x20000001;
        v46 *= 2;
        if (v44)
          goto LABEL_53;
      }
    }
    v53 = v46;
LABEL_53:
    v58 = (HIWORD(v53) * v50) & 0xFFFF0000;
    v59 = v53 - v58;
    v60 = v48 >= v58;
    *(_WORD *)v49 = *((_WORD *)this + ((v50 >> 7) & 0x1FE | v60) + 1376) + v50;
    if (v48 < v58)
      v61 = v58;
    else
      v61 = v59;
    if (v48 < v58)
      v62 = 0;
    else
      v62 = v58;
    v63 = v48 - v62;
    *((_DWORD *)this + 683) = v61;
    *((_DWORD *)this + 684) = v63;
    v64 = v45 | (2 * v60);
    v65 = (_WORD *)((char *)this + 16 * a3 + 2 * (v64 | 4) + 2060);
    v66 = (unsigned __int16)*v65;
    if (v61 >= 0x40000001)
    {
      v69 = v61;
LABEL_71:
      v74 = (HIWORD(v69) * v66) & 0xFFFF0000;
      v75 = v69 - v74;
      v76 = v63 >= v74;
      *v65 = *((_WORD *)this + ((v66 >> 7) & 0x1FE | (v63 >= v74)) + 1376) + v66;
      if (v63 < v74)
        v77 = v74;
      else
        v77 = v75;
      if (v63 < v74)
        v74 = 0;
      v78 = v64 + 5;
      if (!v76)
        v78 = v64 + 1;
      *((_DWORD *)this + 683) = v77;
      *((_DWORD *)this + 684) = v63 - v74;
      v28 = 0;
      v32 = 0;
      v29 = 0;
      v31 = 1;
      v30 = 1;
      switch(v78)
      {
        case 1:
          goto LABEL_90;
        case 2:
          v28 = 0;
          v29 = 0;
          v32 = 1;
          v240 = 0;
          *a5 = v78;
          if (!*((_BYTE *)this + 3817))
            goto LABEL_98;
          goto LABEL_91;
        case 3:
          v31 = 0;
          v30 = 0;
          goto LABEL_85;
        case 4:
          v31 = 0;
LABEL_85:
          v28 = 1;
          goto LABEL_87;
        case 5:
          v28 = 0;
          v30 = 0;
LABEL_87:
          v32 = 1;
          v29 = 1;
          v240 = 0;
          *a5 = v78;
          if (!*((_BYTE *)this + 3817))
            goto LABEL_98;
          goto LABEL_91;
        case 6:
          v28 = 0;
          v32 = 0;
          v29 = 1;
LABEL_90:
          v240 = 1;
          *a5 = v78;
          if (*((_BYTE *)this + 3817))
            goto LABEL_91;
          goto LABEL_98;
        case 7:
          v31 = 0;
          v32 = 0;
          v28 = 1;
          v29 = 1;
          v240 = 1;
          *a5 = v78;
          if (!*((_BYTE *)this + 3817))
            goto LABEL_98;
          goto LABEL_91;
        default:
          v28 = 0;
          v31 = 1;
          v32 = 1;
          v29 = 1;
          v30 = 1;
          v240 = 0;
          *a5 = v78;
          if (!*((_BYTE *)this + 3817))
            goto LABEL_98;
          goto LABEL_91;
      }
    }
    v67 = *((_DWORD *)this + 686);
    while (1)
    {
      v63 *= 2;
      *((_DWORD *)this + 686) = --v67;
      if (v67)
        goto LABEL_63;
      v70 = *((_QWORD *)this + 340);
      *((_QWORD *)this + 340) = v70 + 1;
      v71 = *((unsigned int *)this + 676);
      if (v70 + 1 >= v71)
      {
        v72 = 65280;
        v73 = v70 + 2;
        *((_QWORD *)this + 340) = v73;
        if (v73 >= v71)
        {
LABEL_69:
          v68 = 255;
          goto LABEL_62;
        }
      }
      else
      {
        v72 = *(unsigned __int8 *)(*((_QWORD *)this + 339) + v70 + 1) << 8;
        v73 = v70 + 2;
        *((_QWORD *)this + 340) = v73;
        if (v73 >= v71)
          goto LABEL_69;
      }
      v68 = *(unsigned __int8 *)(*((_QWORD *)this + 339) + v73);
LABEL_62:
      v63 |= v72 | v68;
      v67 = 16;
      *((_DWORD *)this + 686) = 16;
LABEL_63:
      v69 = 2 * v61;
      v44 = v61 >= 0x20000001;
      v61 *= 2;
      if (v44)
        goto LABEL_71;
    }
  }
  v28 = 0;
  v29 = 0;
  v30 = 0;
  v31 = 1;
  v32 = 1;
  v240 = 0;
  *a5 = 0;
  if (!*((_BYTE *)this + 3817))
  {
LABEL_98:
    v245 = 7;
    v81 = (int *)(*((_QWORD *)this + 10) + 4 * a2);
    if (*v81 >= 7)
      v81 = &v245;
    goto LABEL_100;
  }
LABEL_91:
  if (!*((_BYTE *)this + 3816))
    goto LABEL_98;
  v79 = *(_DWORD *)(*((_QWORD *)this + 28) + 12 * a2);
  if (v79 <= 19)
    v79 = 19;
  v80 = v79 - 19;
  v243 = v80 >> 1;
  v244 = 15;
  v44 = v80 >= 0x1E;
  v81 = &v244;
  if (!v44)
    v81 = (int *)&v243;
LABEL_100:
  v82 = *v81;
  v83 = (_WORD *)((char *)this + 6 * *v81 + 2140);
  v84 = (unsigned __int16)*v83;
  v85 = *((_DWORD *)this + 683);
  v86 = *((_DWORD *)this + 684);
  if (v85 < 0x40000001)
  {
    v87 = *((_DWORD *)this + 686);
    while (1)
    {
      v86 *= 2;
      *((_DWORD *)this + 686) = --v87;
      if (v87)
        goto LABEL_104;
      v90 = *((_QWORD *)this + 340);
      *((_QWORD *)this + 340) = v90 + 1;
      v91 = *((unsigned int *)this + 676);
      if (v90 + 1 >= v91)
      {
        v92 = 65280;
        v93 = v90 + 2;
        *((_QWORD *)this + 340) = v93;
        if (v93 >= v91)
        {
LABEL_110:
          v88 = 255;
          goto LABEL_103;
        }
      }
      else
      {
        v92 = *(unsigned __int8 *)(*((_QWORD *)this + 339) + v90 + 1) << 8;
        v93 = v90 + 2;
        *((_QWORD *)this + 340) = v93;
        if (v93 >= v91)
          goto LABEL_110;
      }
      v88 = *(unsigned __int8 *)(*((_QWORD *)this + 339) + v93);
LABEL_103:
      v86 |= v92 | v88;
      v87 = 16;
      *((_DWORD *)this + 686) = 16;
LABEL_104:
      v89 = 2 * v85;
      v44 = v85 >= 0x20000001;
      v85 *= 2;
      if (v44)
        goto LABEL_112;
    }
  }
  v89 = *((_DWORD *)this + 683);
LABEL_112:
  v94 = (HIWORD(v89) * v84) & 0xFFFF0000;
  v95 = v89 - v94;
  v96 = v86 >= v94;
  v97 = v86 >= v94;
  *v83 = *((_WORD *)this + ((v84 >> 7) & 0x1FE | v97) + 1376) + v84;
  if (v86 < v94)
    v98 = v94;
  else
    v98 = v95;
  if (v86 < v94)
    v99 = 0;
  else
    v99 = v94;
  v100 = 2;
  if (v96)
    v100 = 4;
  v101 = v86 - v99;
  *((_DWORD *)this + 683) = v98;
  *((_DWORD *)this + 684) = v101;
  v102 = (_WORD *)((char *)this + 6 * v82 + v100 + 2140);
  v103 = (unsigned __int16)*v102;
  if (v98 < 0x40000001)
  {
    v104 = *((_DWORD *)this + 686);
    while (1)
    {
      v101 *= 2;
      *((_DWORD *)this + 686) = --v104;
      if (v104)
        goto LABEL_124;
      v107 = *((_QWORD *)this + 340);
      *((_QWORD *)this + 340) = v107 + 1;
      v108 = *((unsigned int *)this + 676);
      if (v107 + 1 >= v108)
      {
        v109 = 65280;
        v110 = v107 + 2;
        *((_QWORD *)this + 340) = v110;
        if (v110 >= v108)
        {
LABEL_130:
          v105 = 255;
          goto LABEL_123;
        }
      }
      else
      {
        v109 = *(unsigned __int8 *)(*((_QWORD *)this + 339) + v107 + 1) << 8;
        v110 = v107 + 2;
        *((_QWORD *)this + 340) = v110;
        if (v110 >= v108)
          goto LABEL_130;
      }
      v105 = *(unsigned __int8 *)(*((_QWORD *)this + 339) + v110);
LABEL_123:
      v101 |= v109 | v105;
      v104 = 16;
      *((_DWORD *)this + 686) = 16;
LABEL_124:
      v106 = 2 * v98;
      v44 = v98 >= 0x20000001;
      v98 *= 2;
      if (v44)
        goto LABEL_132;
    }
  }
  v106 = v98;
LABEL_132:
  v239 = v29;
  v242 = v28;
  v238 = v31;
  v111 = (HIWORD(v106) * v103) & 0xFFFF0000;
  v112 = v106 - v111;
  v113 = v101 >= v111;
  *v102 = *((_WORD *)this + ((v103 >> 7) & 0x1FE | v113) + 1376) + v103;
  if (v101 < v111)
    v114 = v111;
  else
    v114 = v112;
  if (v101 < v111)
    v115 = 0;
  else
    v115 = v111;
  *((_DWORD *)this + 683) = v114;
  *((_DWORD *)this + 684) = v101 - v115;
  v116 = v97 | (2 * v113);
  if (v116 == 3)
  {
    v117 = gcl::ArithmeticDecoder::decodeExpGolomb((unsigned int *)this + 676, 0, (_WORD *)this + 1118);
    if (v117 < -3)
      goto LABEL_145;
    v116 = v117 + 3;
  }
  if ((int)v116 < *((_DWORD *)this + 948) - *a7)
  {
    v235 = (unsigned int *)((char *)this + 2704);
    v236 = a2;
    v231 = v32;
    v232 = v30;
    v233 = a5;
    v234 = a7;
    v230 = a4;
    v118 = v116 + 1;
    v119 = v116 + 2;
    v120 = *((_QWORD *)this + 1);
    v121 = (char *)this + 8;
    v122 = (*((_QWORD *)this + 2) - v120) >> 2;
    if ((int)v118 < (int)v122)
      goto LABEL_180;
    v123 = (2 * (_DWORD)v119) | 1u;
    if (v123 <= v122)
    {
      if (v123 < v122)
        *((_QWORD *)this + 2) = v120 + 4 * v123;
    }
    else
    {
      std::vector<int>::__append((std::vector<int> *)((char *)this + 8), v123 - v122);
    }
    v126 = (char *)*((_QWORD *)this + 4);
    v125 = (char *)*((_QWORD *)this + 5);
    v127 = v123 - (v125 - v126);
    if (v123 <= v125 - v126)
    {
      if (v123 < v125 - v126)
        *((_QWORD *)this + 5) = &v126[v123];
LABEL_180:
      **((_BYTE **)this + 4) = v242;
      *(_BYTE *)(*((_QWORD *)this + 4) + v118) = v240;
      v147 = (_DWORD *)*((_QWORD *)this + 1);
      v148 = *((_QWORD *)this + 19);
      v241 = *(_DWORD *)(v148 + 16 * v236);
      if ((v239 & 1) != 0)
      {
        if (!v238)
        {
LABEL_186:
          if ((int)v116 < 1)
            goto LABEL_239;
          v150 = *((unsigned __int16 *)this + 1138);
          v151 = *((_DWORD *)this + 683);
          v152 = *((_DWORD *)this + 684);
          if (v151 < 0x40000001)
          {
            v153 = *((_DWORD *)this + 686);
            while (1)
            {
              v152 *= 2;
              *((_DWORD *)this + 686) = --v153;
              if (v153)
                goto LABEL_191;
              v156 = *((_QWORD *)this + 340);
              *((_QWORD *)this + 340) = v156 + 1;
              v157 = *((unsigned int *)this + 676);
              if (v156 + 1 >= v157)
              {
                v158 = 65280;
                v159 = v156 + 2;
                *((_QWORD *)this + 340) = v159;
                if (v159 >= v157)
                {
LABEL_197:
                  v154 = 255;
                  goto LABEL_190;
                }
              }
              else
              {
                v158 = *(unsigned __int8 *)(*((_QWORD *)this + 339) + v156 + 1) << 8;
                v159 = v156 + 2;
                *((_QWORD *)this + 340) = v159;
                if (v159 >= v157)
                  goto LABEL_197;
              }
              v154 = *(unsigned __int8 *)(*((_QWORD *)this + 339) + v159);
LABEL_190:
              v152 |= v158 | v154;
              v153 = 16;
              *((_DWORD *)this + 686) = 16;
LABEL_191:
              v155 = 2 * v151;
              v44 = v151 >= 0x20000001;
              v151 *= 2;
              if (v44)
                goto LABEL_199;
            }
          }
          v155 = *((_DWORD *)this + 683);
LABEL_199:
          v160 = (HIWORD(v155) * v150) & 0xFFFF0000;
          v161 = v155 - v160;
          if (v152 < v160)
            v162 = 0;
          else
            v162 = (HIWORD(v155) * v150) & 0xFFFF0000;
          *((_DWORD *)this + 684) = v152 - v162;
          *((_WORD *)this + 1138) = *((_WORD *)this + ((v150 >> 7) & 0x1FE | (v152 >= v160)) + 1376) + v150;
          if (v152 < v160)
            v163 = v160;
          else
            v163 = v161;
          *((_DWORD *)this + 683) = v163;
          if (v152 >= v160)
          {
            v164 = 1;
            do
              *(_BYTE *)(*((_QWORD *)this + 4) + v164++) = 1;
            while (v118 != v164);
            goto LABEL_239;
          }
          if (v116 == 1)
          {
            *(_BYTE *)(*((_QWORD *)this + 4) + 1) = 0;
            if (*((_BYTE *)this + 3816))
            {
              v166 = gcl::tmesh::DecoderImpl::decodeIndex(this, *((_DWORD *)this + 947));
            }
            else
            {
              v165 = *((_DWORD *)this + 947);
              v166 = v165 - gcl::ArithmeticDecoder::decodeExpGolomb(v235, 0, (_WORD *)this + 1137);
            }
            *(_DWORD *)(*(_QWORD *)v121 + 4) = v166;
LABEL_239:
            if (*((_DWORD *)this + 968))
              return 0xFFFFFFFFLL;
            if (v232)
            {
              if (!v231)
              {
LABEL_248:
                v124 = (_DWORD *)((char *)this + 3872);
                if (*v233 == 3 || *v233 == 5)
                {
                  v185 = *((_QWORD *)this + 4);
                  v186 = v116 + 1;
                  v187 = v234;
                  do
                  {
                    if (*(_BYTE *)(v185 + v186))
                    {
                      v189 = (*a6)++;
                      *(_DWORD *)(*(_QWORD *)v121 + 4 * v186) = v189;
                    }
                    v188 = v186-- <= 0;
                  }
                  while (!v188);
                }
                else
                {
                  v190 = 0;
                  v185 = *((_QWORD *)this + 4);
                  v187 = v234;
                  do
                  {
                    if (*(_BYTE *)(v185 + v190))
                    {
                      v191 = (*a6)++;
                      *(_DWORD *)(*(_QWORD *)v121 + 4 * v190) = v191;
                    }
                    ++v190;
                  }
                  while (v119 != v190);
                }
                v192 = 0;
                v193 = *((_QWORD *)this + 19);
                while (1)
                {
                  v194 = *(_DWORD *)(*((_QWORD *)this + 1) + 4 * v192);
                  if (v194 < 0 || v194 >= (int)((unint64_t)(*((_QWORD *)this + 20) - v193) >> 4))
                    goto LABEL_146;
                  if (v119 == ++v192)
                  {
                    v195 = *v233;
                    if (*v233 > 2)
                    {
                      if (v195 == 3 || v195 == 5)
                      {
                        if (v116 <= 0x7FFFFFFD)
                        {
                          v202 = (int *)(v193 + 16 * v236);
                          v203 = v202[3];
                          v204 = *v202;
                          v205 = v116;
                          do
                          {
                            v206 = v204;
                            v204 = *(_DWORD *)(*((_QWORD *)this + 1) + 4 * v205);
                            if (*(_BYTE *)(*((_QWORD *)this + 4) + v205))
                            {
                              v207 = (_DWORD *)(*((_QWORD *)this + 22) + 12 * v204);
                              *v207 = v236;
                              v207[1] = v206;
                              v207[2] = v203;
                            }
                            v203 = v206;
                            v188 = v205-- <= 0;
                          }
                          while (!v188);
                        }
                      }
                      else if ((int)v119 >= 1)
                      {
                        v220 = 0;
                        v221 = -1;
                        v222 = -1;
                        do
                        {
                          v223 = v221;
                          v221 = *(_DWORD *)(*((_QWORD *)this + 1) + 4 * v220);
                          if (*(_BYTE *)(*((_QWORD *)this + 4) + v220))
                          {
                            v224 = (_DWORD *)(*((_QWORD *)this + 22) + 12 * v221);
                            *v224 = v236;
                            v224[1] = v223;
                            v224[2] = v222;
                          }
                          ++v220;
                          v222 = v223;
                        }
                        while (v119 != v220);
                      }
                    }
                    else
                    {
                      v196 = (_DWORD *)(v193 + 16 * v236);
                      if (v116 <= 0x7FFFFFFD)
                      {
                        v197 = v196[1];
                        v198 = v196[2];
                        v199 = 1;
                        do
                        {
                          v200 = *(_DWORD *)(*((_QWORD *)this + 1) + 4 * v199);
                          if (*(_BYTE *)(*((_QWORD *)this + 4) + v199))
                          {
                            v201 = (_DWORD *)(*((_QWORD *)this + 22) + 12 * v200);
                            *v201 = v236;
                            v201[1] = v197;
                            v201[2] = v198;
                          }
                          ++v199;
                          v198 = v197;
                          v197 = v200;
                        }
                        while (v119 != v199);
                        v185 = *((_QWORD *)this + 4);
                      }
                      if (!v195 && *(_BYTE *)(v185 + v116))
                      {
                        v208 = (_DWORD *)(*((_QWORD *)this + 25) + 12 * *(int *)(*((_QWORD *)this + 1) + 4 * v116));
                        *v208 = v236;
                        v208[1] = *v196;
                        v208[2] = *(_DWORD *)(v193 + 16 * v236 + 12);
                      }
                    }
                    if (*((_BYTE *)this + 3816))
                    {
                      v209 = *((_BYTE *)this + 3817) == 0;
                      if (*v187 + (int)v118 > *((_DWORD *)this + 948))
                        goto LABEL_146;
                    }
                    else
                    {
                      v209 = 1;
                      if (*v187 + (int)v118 > *((_DWORD *)this + 948))
                        goto LABEL_146;
                    }
                    v210 = *((_QWORD *)this + 19);
                    v211 = v119 - 1;
                    v212 = (int *)(*((_QWORD *)this + 1) + 4);
                    do
                    {
                      v214 = *(v212 - 1);
                      v213 = *v212;
                      v215 = (*v187)++;
                      v216 = (_DWORD *)(v230 + 12 * v215);
                      *v216 = v236;
                      v216[1] = v214;
                      v216[2] = v213;
                      v217 = (_DWORD *)(v210 + 16 * v214);
                      v218 = v210 + 16 * v213;
                      *(_DWORD *)(v218 + 4) = v214;
                      *(_DWORD *)(v218 + 8) = v236;
                      *v217 = v213;
                      v217[3] = v236;
                      if (v209)
                      {
                        v219 = *((_QWORD *)this + 10);
                        ++*(_DWORD *)(v219 + 4 * v214);
                        ++*(_DWORD *)(v219 + 4 * v213);
                      }
                      ++v212;
                      --v211;
                    }
                    while (v211);
                    return v119;
                  }
                }
              }
              if (*((_BYTE *)this + 3816))
                v241 = gcl::tmesh::DecoderImpl::decodeIndex(this, v236 + 1);
              else
                v241 = gcl::ArithmeticDecoder::decodeSignedExpGolomb(v235, 0, (_WORD *)this + 1136, (_WORD *)this + 1137)+ v236+ 1;
            }
            v147[v118] = v241;
            goto LABEL_248;
          }
          v167 = 1;
          while (1)
          {
            v169 = *((_DWORD *)this + 683);
            v170 = *((_DWORD *)this + 684);
            if (v169 < 0x40000001)
              break;
            v173 = *((_DWORD *)this + 683);
LABEL_228:
            v178 = *((unsigned __int16 *)this + 1139);
            v179 = (HIWORD(v173) * v178) & 0xFFFF0000;
            v180 = v173 - v179;
            v181 = v170 >= v179;
            *((_WORD *)this + 1139) = *((_WORD *)this + ((v178 >> 7) & 0x1FE | v181) + 1376) + v178;
            if (v170 < v179)
              v182 = v179;
            else
              v182 = v180;
            if (v170 < v179)
              v179 = 0;
            *((_DWORD *)this + 683) = v182;
            *((_DWORD *)this + 684) = v170 - v179;
            *(_BYTE *)(*((_QWORD *)this + 4) + v167) = v181;
            if (!*(_BYTE *)(*((_QWORD *)this + 4) + v167))
            {
              if (*((_BYTE *)this + 3816))
              {
                v168 = gcl::tmesh::DecoderImpl::decodeIndex(this, *((_DWORD *)this + 947));
              }
              else
              {
                v183 = *((_DWORD *)this + 947);
                v168 = v183 - gcl::ArithmeticDecoder::decodeExpGolomb(v235, 0, (_WORD *)this + 1137);
              }
              *(_DWORD *)(*(_QWORD *)v121 + 4 * v167) = v168;
            }
            if (++v167 == v118)
              goto LABEL_239;
          }
          v171 = *((_DWORD *)this + 686);
          while (1)
          {
            v170 *= 2;
            *((_DWORD *)this + 686) = --v171;
            if (v171)
              goto LABEL_220;
            v174 = *((_QWORD *)this + 340);
            *((_QWORD *)this + 340) = v174 + 1;
            v175 = *((unsigned int *)this + 676);
            if (v174 + 1 >= v175)
            {
              v176 = 65280;
              v177 = v174 + 2;
              *((_QWORD *)this + 340) = v177;
              if (v177 >= v175)
              {
LABEL_226:
                v172 = 255;
                goto LABEL_219;
              }
            }
            else
            {
              v176 = *(unsigned __int8 *)(*((_QWORD *)this + 339) + v174 + 1) << 8;
              v177 = v174 + 2;
              *((_QWORD *)this + 340) = v177;
              if (v177 >= v175)
                goto LABEL_226;
            }
            v172 = *(unsigned __int8 *)(*((_QWORD *)this + 339) + v177);
LABEL_219:
            v170 |= v176 | v172;
            v171 = 16;
            *((_DWORD *)this + 686) = 16;
LABEL_220:
            v173 = 2 * v169;
            v44 = v169 >= 0x20000001;
            v169 *= 2;
            if (v44)
              goto LABEL_228;
          }
        }
        if (*((_BYTE *)this + 3816))
          v149 = gcl::tmesh::DecoderImpl::decodeIndex(this, v236 - 1);
        else
          v149 = gcl::ArithmeticDecoder::decodeSignedExpGolomb(v235, 0, (_WORD *)this + 1136, (_WORD *)this + 1137)
               + v236
               - 1;
      }
      else
      {
        v149 = *(_DWORD *)(v148 + 16 * v236 + 4);
      }
      *v147 = v149;
      goto LABEL_186;
    }
    v128 = *((_QWORD *)this + 6);
    if (v128 - (uint64_t)v125 >= v127)
    {
      bzero(*((void **)this + 5), v123 - (v125 - v126));
      *((_QWORD *)this + 5) = &v126[v123];
      goto LABEL_180;
    }
    v129 = v128 - (_QWORD)v126;
    v130 = 2 * v129;
    if (2 * v129 <= v123)
      v130 = (2 * (_DWORD)v119) | 1u;
    if (v129 >= 0x3FFFFFFFFFFFFFFFLL)
      v131 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v131 = v130;
    v228 = v131;
    v225 = (char *)operator new(v131);
    v226 = v125 - v126;
    v229 = &v225[v228];
    v227 = &v225[v123];
    v132 = &v225[v125 - v126];
    bzero(v132, v127);
    if (v125 == v126)
    {
      v134 = v229;
      v133 = &v225[v125 - v126];
      v135 = v227;
      goto LABEL_178;
    }
    if (v226 < 8)
    {
      v133 = v225;
      goto LABEL_175;
    }
    v133 = v225;
    if ((unint64_t)(v126 - v225) >= 0x20)
    {
      if (v226 < 0x20)
      {
        v136 = 0;
        goto LABEL_170;
      }
      v136 = v226 & 0xFFFFFFFFFFFFFFE0;
      v137 = v125 - 16;
      v138 = &v225[v125 - 16 - v126];
      v139 = v226 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        v140 = *(_OWORD *)v137;
        *((_OWORD *)v138 - 1) = *((_OWORD *)v137 - 1);
        *(_OWORD *)v138 = v140;
        v138 -= 32;
        v137 -= 32;
        v139 -= 32;
      }
      while (v139);
      if (v226 == v136)
        goto LABEL_177;
      if ((v226 & 0x18) != 0)
      {
LABEL_170:
        v132 -= v226 & 0xFFFFFFFFFFFFFFF8;
        v141 = &v125[-v136 - 8];
        v142 = (char *)(v141 - v126);
        v143 = v136 - (v226 & 0xFFFFFFFFFFFFFFF8);
        do
        {
          v144 = *(_QWORD *)v141;
          v141 -= 8;
          *(_QWORD *)&v142[(_QWORD)v225] = v144;
          v142 -= 8;
          v143 += 8;
        }
        while (v143);
        v125 -= v226 & 0xFFFFFFFFFFFFFFF8;
        if (v226 == (v226 & 0xFFFFFFFFFFFFFFF8))
          goto LABEL_177;
        goto LABEL_175;
      }
      v132 -= v136;
      v125 -= v136;
    }
LABEL_175:
    v145 = v132 - 1;
    do
    {
      v146 = *--v125;
      *v145-- = v146;
    }
    while (v125 != v126);
LABEL_177:
    v125 = v126;
    v134 = v229;
    v135 = v227;
LABEL_178:
    *((_QWORD *)this + 4) = v133;
    *((_QWORD *)this + 5) = v135;
    *((_QWORD *)this + 6) = v134;
    if (v125)
      operator delete(v125);
    goto LABEL_180;
  }
LABEL_145:
  v124 = (_DWORD *)((char *)this + 3872);
LABEL_146:
  *v124 = 3;
  return 0xFFFFFFFFLL;
}

void gcl::MutableApproximatePriorityQueue<gcl::tmesh::VertexPriority,64>::insert(_DWORD *a1, int *a2)
{
  int v4;
  int v5;
  _DWORD *v6;
  int ***v7;
  char *v8;
  char *v9;
  uint64_t *v10;
  char *v11;
  char *v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  _BYTE *v21;
  int **v22;
  char *v23;
  char *v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _OWORD *v28;
  char *v29;
  uint64_t v30;
  __int128 v31;
  int *v32;
  char *v33;
  uint64_t *v34;
  _DWORD *v35;
  unint64_t v36;

  if (*a2 >= 63)
    v4 = 63;
  else
    v4 = *a2;
  v5 = a1[1];
  if (v4 > v5)
    v5 = v4;
  a1[1] = v5;
  v6 = &a1[6 * v4];
  v9 = (char *)*((_QWORD *)v6 + 1);
  v7 = (int ***)(v6 + 2);
  v8 = v9;
  v10 = (uint64_t *)(v7 + 1);
  v11 = (char *)v7[1];
  v12 = v11;
  v13 = v11 - v9;
  v14 = (v11 - v9) >> 3;
  a2[1] = v4;
  a2[2] = v14;
  v16 = v7 + 2;
  v15 = (unint64_t)v7[2];
  if ((unint64_t)v11 < v15)
  {
    *(_QWORD *)v11 = a2;
    v17 = (uint64_t)(v11 + 8);
    goto LABEL_28;
  }
  v18 = v14 + 1;
  if ((unint64_t)(v14 + 1) >> 61)
    std::vector<double>::__throw_length_error[abi:ne180100]();
  v19 = v15 - (_QWORD)v8;
  if (v19 >> 2 > v18)
    v18 = v19 >> 2;
  if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFF8)
    v20 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v20 = v18;
  if (v20)
  {
    if (v20 >> 61)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v21 = operator new(8 * v20);
    v16 = v7 + 2;
    v10 = (uint64_t *)(v7 + 1);
    v22 = (int **)&v21[8 * v14];
    v23 = &v21[8 * v20];
    *v22 = a2;
    v17 = (uint64_t)(v22 + 1);
    v24 = (char *)(v11 - v8);
    if (v11 == v8)
      goto LABEL_26;
    goto LABEL_19;
  }
  v21 = 0;
  v22 = (int **)(8 * v14);
  v23 = 0;
  *(_QWORD *)(8 * v14) = a2;
  v17 = 8 * v14 + 8;
  v24 = (char *)(v11 - v8);
  if (v11 != v8)
  {
LABEL_19:
    v25 = (unint64_t)(v24 - 8);
    if (v25 < 0x58)
      goto LABEL_35;
    if (v11 - v21 - (v13 & 0xFFFFFFFFFFFFFFF8) < 0x20)
      goto LABEL_35;
    v26 = (v25 >> 3) + 1;
    v27 = 8 * (v26 & 0x3FFFFFFFFFFFFFFCLL);
    v12 = &v11[-v27];
    v22 = (int **)((char *)v22 - v27);
    v28 = &v21[8 * v14 - 16];
    v29 = v11 - 16;
    v30 = v26 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v31 = *(_OWORD *)v29;
      *(v28 - 1) = *((_OWORD *)v29 - 1);
      *v28 = v31;
      v28 -= 2;
      v29 -= 32;
      v30 -= 4;
    }
    while (v30);
    if (v26 != (v26 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_35:
      do
      {
        v32 = (int *)*((_QWORD *)v12 - 1);
        v12 -= 8;
        *--v22 = v32;
      }
      while (v12 != v8);
    }
    v12 = (char *)*v7;
  }
LABEL_26:
  *v7 = v22;
  *v10 = v17;
  *v16 = v23;
  if (v12)
  {
    v33 = v12;
    v34 = v10;
    operator delete(v33);
    v10 = v34;
  }
LABEL_28:
  *v10 = v17;
  ++*a1;
  v35 = &a1[v4];
  v36 = (unint64_t)(v17 - (_QWORD)*v7) >> 3;
  if (v35[386] > (int)v36)
    LODWORD(v36) = v35[386];
  v35[386] = v36;
}

uint64_t gcl::tmesh::DecoderImpl::decodeIndex(gcl::tmesh::DecoderImpl *this, int a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  int v7;
  int v8;
  unsigned int v9;
  uint64_t v10;
  unint64_t v11;
  int v12;
  unint64_t v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  int v20;
  int v21;
  unsigned int v22;
  uint64_t v23;
  unint64_t v24;
  int v25;
  unint64_t v26;
  unsigned int v28;
  unsigned int v29;
  BOOL v30;
  _BOOL4 v31;
  char *v32;
  unsigned int v33;
  uint64_t v34;
  unsigned int v35;
  char *v36;
  unsigned int v37;
  int v38;
  int v39;
  unsigned int v40;
  uint64_t v41;
  unint64_t v42;
  int v43;
  unint64_t v44;
  unsigned int v45;
  unsigned int v46;
  _BOOL4 v47;
  unsigned int v48;
  unsigned int v49;
  unsigned int v50;
  int v51;
  _WORD *v52;
  unsigned int v53;
  int v54;
  int v55;
  unsigned int v56;
  uint64_t v57;
  unint64_t v58;
  int v59;
  unint64_t v60;
  unsigned int v61;
  unsigned int v62;
  _BOOL4 v63;
  unsigned int v64;
  unsigned int v65;
  unsigned int v66;
  int v67;
  _WORD *v68;
  unsigned int v69;
  int v70;
  int v71;
  unsigned int v72;
  uint64_t v73;
  unint64_t v74;
  int v75;
  unint64_t v76;
  unsigned int v77;
  unsigned int v78;
  _BOOL4 v79;
  unsigned int v80;
  unsigned int v81;
  unsigned int v82;
  int v83;
  _WORD *v84;
  unsigned int v85;
  int v86;
  int v87;
  unsigned int v88;
  uint64_t v89;
  unint64_t v90;
  int v91;
  unint64_t v92;
  unsigned int v93;
  unsigned int v94;
  _BOOL4 v95;
  unsigned int v96;
  unsigned int v97;
  unsigned int v98;
  int v99;
  _WORD *v100;
  unsigned int v101;
  int v102;
  int v103;
  unsigned int v104;
  uint64_t v105;
  unint64_t v106;
  int v107;
  unint64_t v108;
  unsigned int v109;
  unsigned int v110;
  _BOOL4 v111;
  unsigned int v112;
  unsigned int v113;
  unsigned int v114;
  unsigned int v115;
  int v116;
  int v117;
  unsigned int v118;
  uint64_t v119;
  unint64_t v120;
  int v121;
  unint64_t v122;
  unsigned int v123;
  unsigned int v124;
  BOOL v125;
  _BOOL4 v126;
  char *v127;
  unsigned int v128;
  uint64_t v129;
  unsigned int v130;
  char *v131;
  unsigned int v132;
  int v133;
  int v134;
  unsigned int v135;
  uint64_t v136;
  unint64_t v137;
  int v138;
  unint64_t v139;
  unsigned int v140;
  unsigned int v141;
  _BOOL4 v142;
  unsigned int v143;
  int v144;
  int v145;
  uint64_t v146;
  uint64_t v147;

  v3 = (unsigned int *)((char *)this + 2704);
  v4 = *((unsigned __int16 *)this + 1119);
  v5 = *((_DWORD *)this + 683);
  v6 = *((_DWORD *)this + 684);
  if (v5 < 0x40000001)
  {
    v7 = *((_DWORD *)this + 686);
    while (1)
    {
      v6 *= 2;
      *((_DWORD *)this + 686) = --v7;
      if (v7)
        goto LABEL_5;
      v10 = *((_QWORD *)this + 340);
      *((_QWORD *)this + 340) = v10 + 1;
      v11 = *((unsigned int *)this + 676);
      if (v10 + 1 >= v11)
      {
        v12 = 65280;
        v13 = v10 + 2;
        *((_QWORD *)this + 340) = v13;
        if (v13 >= v11)
        {
LABEL_11:
          v8 = 255;
          goto LABEL_4;
        }
      }
      else
      {
        v12 = *(unsigned __int8 *)(*((_QWORD *)this + 339) + v10 + 1) << 8;
        v13 = v10 + 2;
        *((_QWORD *)this + 340) = v13;
        if (v13 >= v11)
          goto LABEL_11;
      }
      v8 = *(unsigned __int8 *)(*((_QWORD *)this + 339) + v13);
LABEL_4:
      v6 |= v12 | v8;
      v7 = 16;
      *((_DWORD *)this + 686) = 16;
LABEL_5:
      v9 = 2 * v5;
      v30 = v5 >= 0x20000001;
      v5 *= 2;
      if (v30)
        goto LABEL_13;
    }
  }
  v9 = *((_DWORD *)this + 683);
LABEL_13:
  v14 = (HIWORD(v9) * v4) & 0xFFFF0000;
  v15 = v9 - v14;
  if (v6 < v14)
    v16 = 0;
  else
    v16 = (HIWORD(v9) * v4) & 0xFFFF0000;
  v17 = v6 - v16;
  *((_DWORD *)this + 684) = v17;
  *((_WORD *)this + 1119) = *((_WORD *)this + ((v4 >> 7) & 0x1FE | (v6 >= v14)) + 1376) + v4;
  if (v6 < v14)
    v18 = (HIWORD(v9) * v4) & 0xFFFF0000;
  else
    v18 = v9 - v14;
  *((_DWORD *)this + 683) = v18;
  if (v6 < v14)
    return gcl::ArithmeticDecoder::decodeSignedExpGolomb(v3, 0, (_WORD *)this + 1136, (_WORD *)this + 1137)+ a2;
  v19 = *((unsigned __int16 *)this + 1140);
  if (v15 < 0x40000001)
  {
    v20 = *((_DWORD *)this + 686);
    while (1)
    {
      v17 *= 2;
      *((_DWORD *)this + 686) = --v20;
      if (v20)
        goto LABEL_25;
      v23 = *((_QWORD *)this + 340);
      *((_QWORD *)this + 340) = v23 + 1;
      v24 = *((unsigned int *)this + 676);
      if (v23 + 1 >= v24)
      {
        v25 = 65280;
        v26 = v23 + 2;
        *((_QWORD *)this + 340) = v26;
        if (v26 >= v24)
        {
LABEL_31:
          v21 = 255;
          goto LABEL_24;
        }
      }
      else
      {
        v25 = *(unsigned __int8 *)(*((_QWORD *)this + 339) + v23 + 1) << 8;
        v26 = v23 + 2;
        *((_QWORD *)this + 340) = v26;
        if (v26 >= v24)
          goto LABEL_31;
      }
      v21 = *(unsigned __int8 *)(*((_QWORD *)this + 339) + v26);
LABEL_24:
      v17 |= v25 | v21;
      v20 = 16;
      *((_DWORD *)this + 686) = 16;
LABEL_25:
      v22 = 2 * v15;
      v30 = v15 >= 0x20000001;
      v15 *= 2;
      if (v30)
        goto LABEL_33;
    }
  }
  v22 = v9 - v14;
LABEL_33:
  v28 = (HIWORD(v22) * v19) & 0xFFFF0000;
  v29 = v22 - v28;
  v30 = v17 >= v28;
  v31 = v17 >= v28;
  v32 = (char *)this + 2280;
  *((_WORD *)this + 1140) = *((_WORD *)this + ((v19 >> 7) & 0x1FE | v31) + 1376) + v19;
  if (v17 >= v28)
  {
    v33 = v28;
  }
  else
  {
    v29 = v28;
    v33 = 0;
  }
  v34 = 2;
  if (v30)
    v34 = 4;
  v35 = v17 - v33;
  *((_DWORD *)this + 683) = v29;
  *((_DWORD *)this + 684) = v35;
  v36 = &v32[v34];
  v37 = *(unsigned __int16 *)&v32[v34];
  if (v29 < 0x40000001)
  {
    v38 = *((_DWORD *)this + 686);
    while (1)
    {
      v35 *= 2;
      *((_DWORD *)this + 686) = --v38;
      if (v38)
        goto LABEL_42;
      v41 = *((_QWORD *)this + 340);
      *((_QWORD *)this + 340) = v41 + 1;
      v42 = *((unsigned int *)this + 676);
      if (v41 + 1 >= v42)
      {
        v43 = 65280;
        v44 = v41 + 2;
        *((_QWORD *)this + 340) = v44;
        if (v44 >= v42)
        {
LABEL_48:
          v39 = 255;
          goto LABEL_41;
        }
      }
      else
      {
        v43 = *(unsigned __int8 *)(*((_QWORD *)this + 339) + v41 + 1) << 8;
        v44 = v41 + 2;
        *((_QWORD *)this + 340) = v44;
        if (v44 >= v42)
          goto LABEL_48;
      }
      v39 = *(unsigned __int8 *)(*((_QWORD *)this + 339) + v44);
LABEL_41:
      v35 |= v43 | v39;
      v38 = 16;
      *((_DWORD *)this + 686) = 16;
LABEL_42:
      v40 = 2 * v29;
      v30 = v29 >= 0x20000001;
      v29 *= 2;
      if (v30)
        goto LABEL_50;
    }
  }
  v40 = v29;
LABEL_50:
  v45 = (HIWORD(v40) * v37) & 0xFFFF0000;
  v46 = v40 - v45;
  v47 = v35 >= v45;
  *(_WORD *)v36 = *((_WORD *)this + ((v37 >> 7) & 0x1FE | v47) + 1376) + v37;
  if (v35 < v45)
    v48 = v45;
  else
    v48 = v46;
  if (v35 < v45)
    v49 = 0;
  else
    v49 = v45;
  v50 = v35 - v49;
  *((_DWORD *)this + 683) = v48;
  *((_DWORD *)this + 684) = v50;
  v51 = v31 | (2 * v47);
  v52 = (_WORD *)((char *)this + 2 * (v51 + 3) + 2280);
  v53 = (unsigned __int16)*v52;
  if (v48 < 0x40000001)
  {
    v54 = *((_DWORD *)this + 686);
    while (1)
    {
      v50 *= 2;
      *((_DWORD *)this + 686) = --v54;
      if (v54)
        goto LABEL_60;
      v57 = *((_QWORD *)this + 340);
      *((_QWORD *)this + 340) = v57 + 1;
      v58 = *((unsigned int *)this + 676);
      if (v57 + 1 >= v58)
      {
        v59 = 65280;
        v60 = v57 + 2;
        *((_QWORD *)this + 340) = v60;
        if (v60 >= v58)
        {
LABEL_66:
          v55 = 255;
          goto LABEL_59;
        }
      }
      else
      {
        v59 = *(unsigned __int8 *)(*((_QWORD *)this + 339) + v57 + 1) << 8;
        v60 = v57 + 2;
        *((_QWORD *)this + 340) = v60;
        if (v60 >= v58)
          goto LABEL_66;
      }
      v55 = *(unsigned __int8 *)(*((_QWORD *)this + 339) + v60);
LABEL_59:
      v50 |= v59 | v55;
      v54 = 16;
      *((_DWORD *)this + 686) = 16;
LABEL_60:
      v56 = 2 * v48;
      v30 = v48 >= 0x20000001;
      v48 *= 2;
      if (v30)
        goto LABEL_68;
    }
  }
  v56 = v48;
LABEL_68:
  v61 = (HIWORD(v56) * v53) & 0xFFFF0000;
  v62 = v56 - v61;
  v63 = v50 >= v61;
  *v52 = *((_WORD *)this + ((v53 >> 7) & 0x1FE | v63) + 1376) + v53;
  if (v50 < v61)
    v64 = v61;
  else
    v64 = v62;
  if (v50 < v61)
    v65 = 0;
  else
    v65 = v61;
  v66 = v50 - v65;
  *((_DWORD *)this + 683) = v64;
  *((_DWORD *)this + 684) = v66;
  v67 = v51 | (4 * v63);
  v68 = (_WORD *)((char *)this + 2 * (v67 + 7) + 2280);
  v69 = (unsigned __int16)*v68;
  if (v64 < 0x40000001)
  {
    v70 = *((_DWORD *)this + 686);
    while (1)
    {
      v66 *= 2;
      *((_DWORD *)this + 686) = --v70;
      if (v70)
        goto LABEL_78;
      v73 = *((_QWORD *)this + 340);
      *((_QWORD *)this + 340) = v73 + 1;
      v74 = *((unsigned int *)this + 676);
      if (v73 + 1 >= v74)
      {
        v75 = 65280;
        v76 = v73 + 2;
        *((_QWORD *)this + 340) = v76;
        if (v76 >= v74)
        {
LABEL_84:
          v71 = 255;
          goto LABEL_77;
        }
      }
      else
      {
        v75 = *(unsigned __int8 *)(*((_QWORD *)this + 339) + v73 + 1) << 8;
        v76 = v73 + 2;
        *((_QWORD *)this + 340) = v76;
        if (v76 >= v74)
          goto LABEL_84;
      }
      v71 = *(unsigned __int8 *)(*((_QWORD *)this + 339) + v76);
LABEL_77:
      v66 |= v75 | v71;
      v70 = 16;
      *((_DWORD *)this + 686) = 16;
LABEL_78:
      v72 = 2 * v64;
      v30 = v64 >= 0x20000001;
      v64 *= 2;
      if (v30)
        goto LABEL_86;
    }
  }
  v72 = v64;
LABEL_86:
  v77 = (HIWORD(v72) * v69) & 0xFFFF0000;
  v78 = v72 - v77;
  v79 = v66 >= v77;
  *v68 = *((_WORD *)this + ((v69 >> 7) & 0x1FE | v79) + 1376) + v69;
  if (v66 < v77)
    v80 = v77;
  else
    v80 = v78;
  if (v66 < v77)
    v81 = 0;
  else
    v81 = v77;
  v82 = v66 - v81;
  *((_DWORD *)this + 683) = v80;
  *((_DWORD *)this + 684) = v82;
  v83 = v67 | (8 * v79);
  v84 = (_WORD *)((char *)this + 2 * (v83 + 15) + 2280);
  v85 = (unsigned __int16)*v84;
  if (v80 < 0x40000001)
  {
    v86 = *((_DWORD *)this + 686);
    while (1)
    {
      v82 *= 2;
      *((_DWORD *)this + 686) = --v86;
      if (v86)
        goto LABEL_96;
      v89 = *((_QWORD *)this + 340);
      *((_QWORD *)this + 340) = v89 + 1;
      v90 = *((unsigned int *)this + 676);
      if (v89 + 1 >= v90)
      {
        v91 = 65280;
        v92 = v89 + 2;
        *((_QWORD *)this + 340) = v92;
        if (v92 >= v90)
        {
LABEL_102:
          v87 = 255;
          goto LABEL_95;
        }
      }
      else
      {
        v91 = *(unsigned __int8 *)(*((_QWORD *)this + 339) + v89 + 1) << 8;
        v92 = v89 + 2;
        *((_QWORD *)this + 340) = v92;
        if (v92 >= v90)
          goto LABEL_102;
      }
      v87 = *(unsigned __int8 *)(*((_QWORD *)this + 339) + v92);
LABEL_95:
      v82 |= v91 | v87;
      v86 = 16;
      *((_DWORD *)this + 686) = 16;
LABEL_96:
      v88 = 2 * v80;
      v30 = v80 >= 0x20000001;
      v80 *= 2;
      if (v30)
        goto LABEL_104;
    }
  }
  v88 = v80;
LABEL_104:
  v93 = (HIWORD(v88) * v85) & 0xFFFF0000;
  v94 = v88 - v93;
  v95 = v82 >= v93;
  *v84 = *((_WORD *)this + ((v85 >> 7) & 0x1FE | v95) + 1376) + v85;
  if (v82 < v93)
    v96 = v93;
  else
    v96 = v94;
  if (v82 < v93)
    v97 = 0;
  else
    v97 = v93;
  v98 = v82 - v97;
  *((_DWORD *)this + 683) = v96;
  *((_DWORD *)this + 684) = v98;
  v99 = v83 | (16 * v95);
  v100 = (_WORD *)((char *)this + 2 * (v99 + 31) + 2280);
  v101 = (unsigned __int16)*v100;
  if (v96 < 0x40000001)
  {
    v102 = *((_DWORD *)this + 686);
    while (1)
    {
      v98 *= 2;
      *((_DWORD *)this + 686) = --v102;
      if (v102)
        goto LABEL_114;
      v105 = *((_QWORD *)this + 340);
      *((_QWORD *)this + 340) = v105 + 1;
      v106 = *((unsigned int *)this + 676);
      if (v105 + 1 >= v106)
      {
        v107 = 65280;
        v108 = v105 + 2;
        *((_QWORD *)this + 340) = v108;
        if (v108 >= v106)
        {
LABEL_120:
          v103 = 255;
          goto LABEL_113;
        }
      }
      else
      {
        v107 = *(unsigned __int8 *)(*((_QWORD *)this + 339) + v105 + 1) << 8;
        v108 = v105 + 2;
        *((_QWORD *)this + 340) = v108;
        if (v108 >= v106)
          goto LABEL_120;
      }
      v103 = *(unsigned __int8 *)(*((_QWORD *)this + 339) + v108);
LABEL_113:
      v98 |= v107 | v103;
      v102 = 16;
      *((_DWORD *)this + 686) = 16;
LABEL_114:
      v104 = 2 * v96;
      v30 = v96 >= 0x20000001;
      v96 *= 2;
      if (v30)
        goto LABEL_122;
    }
  }
  v104 = v96;
LABEL_122:
  v109 = (HIWORD(v104) * v101) & 0xFFFF0000;
  v110 = v104 - v109;
  v111 = v98 >= v109;
  *v100 = *((_WORD *)this + ((v101 >> 7) & 0x1FE | v111) + 1376) + v101;
  if (v98 < v109)
    v112 = v109;
  else
    v112 = v110;
  if (v98 < v109)
    v113 = 0;
  else
    v113 = v109;
  v114 = v98 - v113;
  *((_DWORD *)this + 683) = v112;
  *((_DWORD *)this + 684) = v114;
  v115 = *((unsigned __int16 *)this + 1204);
  if (v112 < 0x40000001)
  {
    v116 = *((_DWORD *)this + 686);
    while (1)
    {
      v114 *= 2;
      *((_DWORD *)this + 686) = --v116;
      if (v116)
        goto LABEL_132;
      v119 = *((_QWORD *)this + 340);
      *((_QWORD *)this + 340) = v119 + 1;
      v120 = *((unsigned int *)this + 676);
      if (v119 + 1 >= v120)
      {
        v121 = 65280;
        v122 = v119 + 2;
        *((_QWORD *)this + 340) = v122;
        if (v122 >= v120)
        {
LABEL_138:
          v117 = 255;
          goto LABEL_131;
        }
      }
      else
      {
        v121 = *(unsigned __int8 *)(*((_QWORD *)this + 339) + v119 + 1) << 8;
        v122 = v119 + 2;
        *((_QWORD *)this + 340) = v122;
        if (v122 >= v120)
          goto LABEL_138;
      }
      v117 = *(unsigned __int8 *)(*((_QWORD *)this + 339) + v122);
LABEL_131:
      v114 |= v121 | v117;
      v116 = 16;
      *((_DWORD *)this + 686) = 16;
LABEL_132:
      v118 = 2 * v112;
      v30 = v112 >= 0x20000001;
      v112 *= 2;
      if (v30)
        goto LABEL_140;
    }
  }
  v118 = v112;
LABEL_140:
  v123 = (HIWORD(v118) * v115) & 0xFFFF0000;
  v124 = v118 - v123;
  v125 = v114 >= v123;
  v126 = v114 >= v123;
  v127 = (char *)this + 2408;
  *((_WORD *)this + 1204) = *((_WORD *)this + ((v115 >> 7) & 0x1FE | v126) + 1376) + v115;
  if (v114 >= v123)
  {
    v128 = v123;
  }
  else
  {
    v124 = v123;
    v128 = 0;
  }
  v129 = 2;
  if (v125)
    v129 = 4;
  v130 = v114 - v128;
  *((_DWORD *)this + 683) = v124;
  *((_DWORD *)this + 684) = v130;
  v131 = &v127[v129];
  v132 = *(unsigned __int16 *)&v127[v129];
  if (v124 < 0x40000001)
  {
    v133 = *((_DWORD *)this + 686);
    while (1)
    {
      v130 *= 2;
      *((_DWORD *)this + 686) = --v133;
      if (v133)
        goto LABEL_149;
      v136 = *((_QWORD *)this + 340);
      *((_QWORD *)this + 340) = v136 + 1;
      v137 = *((unsigned int *)this + 676);
      if (v136 + 1 >= v137)
      {
        v138 = 65280;
        v139 = v136 + 2;
        *((_QWORD *)this + 340) = v139;
        if (v139 >= v137)
        {
LABEL_155:
          v134 = 255;
          goto LABEL_148;
        }
      }
      else
      {
        v138 = *(unsigned __int8 *)(*((_QWORD *)this + 339) + v136 + 1) << 8;
        v139 = v136 + 2;
        *((_QWORD *)this + 340) = v139;
        if (v139 >= v137)
          goto LABEL_155;
      }
      v134 = *(unsigned __int8 *)(*((_QWORD *)this + 339) + v139);
LABEL_148:
      v130 |= v138 | v134;
      v133 = 16;
      *((_DWORD *)this + 686) = 16;
LABEL_149:
      v135 = 2 * v124;
      v30 = v124 >= 0x20000001;
      v124 *= 2;
      if (v30)
        goto LABEL_157;
    }
  }
  v135 = v124;
LABEL_157:
  v140 = (HIWORD(v135) * v132) & 0xFFFF0000;
  v141 = v135 - v140;
  v142 = v130 >= v140;
  *(_WORD *)v131 = *((_WORD *)this + ((v132 >> 7) & 0x1FE | v142) + 1376) + v132;
  if (v130 < v140)
    v143 = v140;
  else
    v143 = v141;
  if (v130 < v140)
    v140 = 0;
  *((_DWORD *)this + 683) = v143;
  *((_DWORD *)this + 684) = v130 - v140;
  v144 = v126 | (2 * v142);
  if (v144 == 3)
  {
    v145 = gcl::ArithmeticDecoder::decodeExpGolomb(v3, 0, (_WORD *)this + 1207);
    if (v145 < -3)
      goto LABEL_168;
    v144 = v145 + 3;
  }
  v146 = *((_QWORD *)this + 3 * (v99 | (32 * v111)) + 32);
  if (v144 < (int)((unint64_t)(*((_QWORD *)this + 3 * (v99 | (32 * v111)) + 33) - v146) >> 3))
  {
    v147 = *(_QWORD *)(v146 + 8 * v144);
    if (v147)
      return -1431655765 * ((unint64_t)(v147 - *((_QWORD *)this + 28)) >> 2);
  }
LABEL_168:
  *((_DWORD *)this + 968) = 3;
  return 0xFFFFFFFFLL;
}

uint64_t gss::StyleSheet<gss::ScenePropertyID>::decodeStyles(uint64_t a1, _QWORD *a2, uint64_t a3, int a4, _QWORD *a5)
{
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  char v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unsigned int v16;
  unint64_t v17;
  unint64_t v18;
  unsigned int v19;
  unint64_t v20;
  NSObject *v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  int v26;
  int v27;
  char v28;
  unsigned int v29;
  unint64_t v30;
  unsigned int v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  NSObject *v35;
  _QWORD *v36;
  _QWORD *v37;
  _QWORD *v38;
  uint64_t v39;
  char v40;
  int v41;
  int v42;
  uint64_t v43;
  char v44;
  unsigned int v45;
  unint64_t v46;
  unsigned int v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  NSObject *v51;
  _QWORD *v52;
  _QWORD *v53;
  _QWORD *v54;
  uint64_t v55;
  char v56;
  int v57;
  int v58;
  uint64_t v59;
  char v60;
  unsigned int v61;
  unint64_t v62;
  unsigned int v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;
  NSObject *v67;
  _QWORD *v68;
  _QWORD *v69;
  _QWORD *v70;
  uint64_t v71;
  char v72;
  int v73;
  int v74;
  uint64_t v75;
  char v76;
  unsigned int v77;
  unint64_t v78;
  unsigned int v79;
  unint64_t v80;
  unint64_t v81;
  unint64_t v82;
  NSObject *v83;
  _QWORD *v84;
  _QWORD *v85;
  _QWORD *v86;
  uint64_t v87;
  char v88;
  int v89;
  int v90;
  uint64_t v91;
  int v92;
  unint64_t v93;
  char v94;
  unint64_t v95;
  unint64_t v96;
  unsigned int v97;
  unint64_t v98;
  NSObject *v99;
  _QWORD *v100;
  _QWORD *v101;
  _QWORD *v102;
  uint64_t v103;
  uint64_t v105;
  char v106;
  int v107;
  int v108;
  uint64_t v109;
  int v110;
  gss::Allocator *v111;
  uint64_t v112;
  _WORD *v113;
  unint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  std::__shared_weak_count *v118;
  unint64_t *p_shared_owners;
  unint64_t v120;
  NSObject *v121;
  _QWORD *v122;
  _QWORD *v123;
  _QWORD *v124;
  uint64_t v125;
  uint64_t v126;
  int v127;
  gss::Allocator *v128;
  uint64_t v129;
  uint64_t v130;
  std::__shared_weak_count *v131;
  unint64_t *v132;
  unint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  std::__shared_weak_count *v137;
  unint64_t *v138;
  __int128 v139;
  unint64_t v140;
  unint64_t *v141;
  uint64_t v142;
  unint64_t v143;
  unint64_t v144;
  uint64_t v145;
  std::__shared_weak_count *v146;
  unint64_t *v147;
  unint64_t v148;
  uint64_t v149;
  void *v150;
  void *v151;
  std::string::size_type size;
  std::string *v153;
  uint64_t v154;
  int i;
  uint64_t v156;
  uint64_t v157;
  __int128 v158;
  uint64_t v159;
  unint64_t *v160;
  unint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  unint64_t v165;
  uint64_t v166;
  unint64_t v167;
  int v168;
  unint64_t v169;
  unint64_t v170;
  uint64_t v171;
  unint64_t v172;
  int v173;
  unint64_t v174;
  int v175;
  unsigned int v176;
  uint64_t v177;
  uint64_t v178;
  __int128 v179;
  std::__shared_weak_count *v180;
  unint64_t *v181;
  unint64_t v182;
  unint64_t v183;
  uint64_t v184;
  std::__shared_weak_count *v185;
  unint64_t *v186;
  unint64_t v187;
  unint64_t *v188;
  unint64_t v189;
  int v190;
  uint64_t v191;
  int v192;
  unint64_t v193;
  uint64_t v194;
  unsigned int v195;
  unint64_t v196;
  uint64_t v197;
  uint64_t v198;
  int *v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  __int128 v204;
  uint64_t v205;
  unint64_t *v206;
  unint64_t v207;
  uint64_t v208;
  gss::Allocator **v209;
  uint64_t v210;
  unsigned int v211;
  unsigned int v212;
  __int128 v213;
  unint64_t *v214;
  unint64_t v215;
  unint64_t *v216;
  unint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  std::__shared_weak_count *v221;
  gss::Allocator *v222;
  unint64_t *v223;
  unint64_t v224;
  unint64_t *v225;
  unint64_t v226;
  NSObject *v227;
  _QWORD *v228;
  _QWORD *v229;
  _QWORD *v230;
  NSObject *v231;
  _QWORD *v232;
  _QWORD *v233;
  _QWORD *v234;
  NSObject *v235;
  _QWORD *v236;
  _QWORD *v237;
  _QWORD *v238;
  NSObject *v239;
  _QWORD *v240;
  _QWORD *v241;
  _QWORD *v242;
  NSObject *v243;
  _QWORD *v244;
  _QWORD *v245;
  _QWORD *v246;
  NSObject *v247;
  _QWORD *v248;
  _QWORD *v249;
  _QWORD *v250;
  NSObject *v251;
  _QWORD *v252;
  _QWORD *v253;
  _QWORD *v254;
  NSObject *v255;
  _QWORD *v256;
  _QWORD *v257;
  _QWORD *v258;
  NSObject *v259;
  _QWORD *v260;
  _QWORD *v261;
  _QWORD *v262;
  NSObject *v263;
  _QWORD *v264;
  _QWORD *v265;
  _QWORD *v266;
  NSObject *v267;
  _QWORD *v268;
  _QWORD *v269;
  _QWORD *v270;
  NSObject *v271;
  _QWORD *v272;
  _QWORD *v273;
  _QWORD *v274;
  NSObject *v275;
  _QWORD *v276;
  _QWORD *v277;
  _QWORD *v278;
  NSObject *v279;
  _QWORD *v280;
  _QWORD *v281;
  _QWORD *v282;
  NSObject *v283;
  _QWORD *v284;
  _QWORD *v285;
  _QWORD *v286;
  NSObject *v287;
  _QWORD *v288;
  _QWORD *v289;
  _QWORD *v290;
  NSObject *v291;
  _QWORD *v292;
  _QWORD *v293;
  _QWORD *v294;
  NSObject *v295;
  _QWORD *v296;
  _QWORD *v297;
  _QWORD *v298;
  NSObject *v299;
  _QWORD *v300;
  _QWORD *v301;
  _QWORD *v302;
  NSObject *v303;
  _QWORD *v304;
  _QWORD *v305;
  _QWORD *v306;
  NSObject *v307;
  _QWORD *v308;
  _QWORD *v309;
  _QWORD *v310;
  NSObject *v311;
  _QWORD *v312;
  _QWORD *v313;
  _QWORD *v314;
  NSObject *v315;
  _QWORD *v316;
  _QWORD *v317;
  _QWORD *v318;
  NSObject *v319;
  _QWORD *v320;
  _QWORD *v321;
  _QWORD *v322;
  int v323;
  unint64_t v324;
  int v325;
  _QWORD *v326;
  int v327;
  gss::Allocator **v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  gss::Allocator *v332;
  __int128 v333;
  unsigned __int8 v334;
  gss::Allocator **v335;
  uint64_t v336;
  __int128 v337;
  __int128 v338;
  char v339[4];
  int v340;
  _QWORD v341[2];
  unsigned int v342;
  __int128 v343;
  __int128 v344;
  std::string v345;
  _BYTE buf[28];
  uint64_t v347;

  v347 = *MEMORY[0x1E0C80C00];
  v9 = gss::StylFile::chapter(a2, 0x15u);
  v10 = v9;
  memset(&v345, 0, sizeof(v345));
  v11 = *((unsigned __int8 *)v9 + 24);
  v12 = v11 + 5;
  v13 = v9[1];
  v14 = v9[2];
  v15 = v14 + ((unint64_t)(v11 + 5) >> 3);
  v16 = (v11 + 5) & 7;
  v17 = v14 + 1;
  if (v15 < v14 + 1)
  {
    if (*((_BYTE *)v9 + 24))
      v18 = v14 + 1;
    else
      v18 = v9[2];
    if (v13 < v18)
      goto LABEL_14;
    if (*((_BYTE *)v9 + 24))
    {
      if (v13 >= v17)
      {
        v19 = (((1 << (8 - v11)) - 1) & *(unsigned __int8 *)(*v9 + v14)) << v11;
        goto LABEL_25;
      }
      goto LABEL_13;
    }
    if (v13 >= v17)
    {
      LOBYTE(v19) = *(_BYTE *)(*v9 + v14);
      goto LABEL_25;
    }
LABEL_13:
    v9[2] = v15;
    *((_BYTE *)v9 + 24) = v16;
LABEL_14:
    GEOGetGeoCSSStyleSheetLog();
    v21 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleSheet.hpp";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 522;
      *(_WORD *)&buf[18] = 2082;
      *(_QWORD *)&buf[20] = "Could not read number of bits for inheritance list length.";
      _os_log_impl(&dword_19F029000, v21, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
    }

    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a5, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleSheet.hpp", 80);
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a5, (uint64_t)":", 1);
    v22 = (_QWORD *)std::ostream::operator<<();
    v23 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v22, (uint64_t)" STYL Parse Error Here: ", 24);
    v24 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v23, (uint64_t)"Could not read number of bits for inheritance list length.", 58);
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v24, (uint64_t)"\n", 1);
    goto LABEL_137;
  }
  if (v11 <= 3)
    v20 = v14 + 1;
  else
    v20 = v14 + 2;
  if (v13 < v20)
    goto LABEL_13;
  v25 = *v9;
  if (*((_BYTE *)v9 + 24))
  {
    v26 = *(unsigned __int8 *)(v25 + v14);
    if (v17 >= v13)
      v27 = 0;
    else
      v27 = *(unsigned __int8 *)(v25 + v17);
    v19 = ((v27 & (0xFFFF << (8 - v11))) >> (8 - v11)) | ((((1 << (8 - v11)) + 255) & v26) << v11);
    v9[2] = v17;
  }
  else
  {
    LOBYTE(v19) = *(_BYTE *)(v25 + v14);
  }
LABEL_25:
  v9[2] = v15;
  *((_BYTE *)v9 + 24) = v16;
  *(_BYTE *)(a3 + 89) = (v19 >> 3) + 1;
  v28 = v12 & 7;
  v29 = (v12 & 7) + 5;
  v30 = v15 + (v29 >> 3);
  v31 = v29 & 7;
  v32 = v15 + 1;
  if (v30 < v15 + 1)
  {
    if (v16)
      v33 = v15 + 1;
    else
      v33 = v15;
    if (v13 < v33)
      goto LABEL_38;
    if (v16)
    {
      if (v13 >= v32)
      {
        LODWORD(v15) = (((1 << (8 - v16)) - 1) & *(unsigned __int8 *)(*v9 + v15)) << v28;
        goto LABEL_49;
      }
      goto LABEL_37;
    }
    v43 = *v9;
    v9[2] = v15;
    if (v13 >= v32)
    {
      LOBYTE(v15) = *(_BYTE *)(v43 + v15);
      goto LABEL_49;
    }
LABEL_37:
    v9[2] = v30;
    *((_BYTE *)v9 + 24) = v31;
LABEL_38:
    GEOGetGeoCSSStyleSheetLog();
    v35 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v35, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleSheet.hpp";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 524;
      *(_WORD *)&buf[18] = 2082;
      *(_QWORD *)&buf[20] = "Could not read number of bits for zoom style count.";
      _os_log_impl(&dword_19F029000, v35, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
    }

    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a5, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleSheet.hpp", 80);
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a5, (uint64_t)":", 1);
    v36 = (_QWORD *)std::ostream::operator<<();
    v37 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v36, (uint64_t)" STYL Parse Error Here: ", 24);
    v38 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v37, (uint64_t)"Could not read number of bits for zoom style count.", 51);
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v38, (uint64_t)"\n", 1);
    goto LABEL_137;
  }
  if (v16 <= 3)
    v34 = v15 + 1;
  else
    v34 = v15 + 2;
  if (v13 < v34)
    goto LABEL_37;
  v39 = *v9;
  if (v16)
  {
    v40 = 8 - v16;
    v41 = *(unsigned __int8 *)(v39 + v15);
    if (v32 >= v13)
      v42 = 0;
    else
      v42 = *(unsigned __int8 *)(v39 + v32);
    LODWORD(v15) = ((v42 & (0xFFFF << v40)) >> v40) | ((((1 << v40) + 255) & v41) << v28);
    v9[2] = v32;
  }
  else
  {
    LOBYTE(v15) = *(_BYTE *)(v39 + v15);
  }
LABEL_49:
  v9[2] = v30;
  *((_BYTE *)v9 + 24) = v31;
  *(_BYTE *)(a3 + 90) = (v15 >> 3) + 1;
  v44 = v29 & 7;
  v45 = (v29 & 7) + 5;
  v46 = v30 + (v45 >> 3);
  v47 = v45 & 7;
  v48 = v30 + 1;
  if (v46 < v30 + 1)
  {
    if (v31)
      v49 = v30 + 1;
    else
      v49 = v30;
    if (v13 < v49)
      goto LABEL_62;
    if (v31)
    {
      if (v13 >= v48)
      {
        LODWORD(v30) = (((1 << (8 - v31)) - 1) & *(unsigned __int8 *)(*v9 + v30)) << v44;
        goto LABEL_73;
      }
      goto LABEL_61;
    }
    v59 = *v9;
    v9[2] = v30;
    if (v13 >= v48)
    {
      LOBYTE(v30) = *(_BYTE *)(v59 + v30);
      goto LABEL_73;
    }
LABEL_61:
    v9[2] = v46;
    *((_BYTE *)v9 + 24) = v47;
LABEL_62:
    GEOGetGeoCSSStyleSheetLog();
    v51 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v51, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleSheet.hpp";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 526;
      *(_WORD *)&buf[18] = 2082;
      *(_QWORD *)&buf[20] = "Could not read number of bits for conditional style count.";
      _os_log_impl(&dword_19F029000, v51, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
    }

    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a5, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleSheet.hpp", 80);
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a5, (uint64_t)":", 1);
    v52 = (_QWORD *)std::ostream::operator<<();
    v53 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v52, (uint64_t)" STYL Parse Error Here: ", 24);
    v54 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v53, (uint64_t)"Could not read number of bits for conditional style count.", 58);
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v54, (uint64_t)"\n", 1);
    goto LABEL_137;
  }
  if (v31 <= 3)
    v50 = v30 + 1;
  else
    v50 = v30 + 2;
  if (v13 < v50)
    goto LABEL_61;
  v55 = *v9;
  if (v31)
  {
    v56 = 8 - v31;
    v57 = *(unsigned __int8 *)(v55 + v30);
    if (v48 >= v13)
      v58 = 0;
    else
      v58 = *(unsigned __int8 *)(v55 + v48);
    LODWORD(v30) = ((v58 & (0xFFFF << v56)) >> v56) | ((((1 << v56) + 255) & v57) << v44);
    v9[2] = v48;
  }
  else
  {
    LOBYTE(v30) = *(_BYTE *)(v55 + v30);
  }
LABEL_73:
  v9[2] = v46;
  *((_BYTE *)v9 + 24) = v47;
  *(_BYTE *)(a3 + 91) = (v30 >> 3) + 1;
  v60 = v45 & 7;
  v61 = (v45 & 7) + 5;
  v62 = v46 + (v61 >> 3);
  v63 = v61 & 7;
  v64 = v46 + 1;
  if (v62 < v46 + 1)
  {
    if (v47)
      v65 = v46 + 1;
    else
      v65 = v46;
    if (v13 < v65)
      goto LABEL_86;
    if (v47)
    {
      if (v13 >= v64)
      {
        LODWORD(v46) = (((1 << (8 - v47)) - 1) & *(unsigned __int8 *)(*v9 + v46)) << v60;
        goto LABEL_97;
      }
      goto LABEL_85;
    }
    v75 = *v9;
    v9[2] = v46;
    if (v13 >= v64)
    {
      LOBYTE(v46) = *(_BYTE *)(v75 + v46);
      goto LABEL_97;
    }
LABEL_85:
    v9[2] = v62;
    *((_BYTE *)v9 + 24) = v63;
LABEL_86:
    GEOGetGeoCSSStyleSheetLog();
    v67 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v67, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleSheet.hpp";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 528;
      *(_WORD *)&buf[18] = 2082;
      *(_QWORD *)&buf[20] = "Could not read number of bits for condition count.";
      _os_log_impl(&dword_19F029000, v67, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
    }

    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a5, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleSheet.hpp", 80);
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a5, (uint64_t)":", 1);
    v68 = (_QWORD *)std::ostream::operator<<();
    v69 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v68, (uint64_t)" STYL Parse Error Here: ", 24);
    v70 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v69, (uint64_t)"Could not read number of bits for condition count.", 50);
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v70, (uint64_t)"\n", 1);
    goto LABEL_137;
  }
  if (v47 <= 3)
    v66 = v46 + 1;
  else
    v66 = v46 + 2;
  if (v13 < v66)
    goto LABEL_85;
  v71 = *v9;
  if (v47)
  {
    v72 = 8 - v47;
    v73 = *(unsigned __int8 *)(v71 + v46);
    if (v64 >= v13)
      v74 = 0;
    else
      v74 = *(unsigned __int8 *)(v71 + v64);
    LODWORD(v46) = ((v74 & (0xFFFF << v72)) >> v72) | ((((1 << v72) + 255) & v73) << v60);
    v9[2] = v64;
  }
  else
  {
    LOBYTE(v46) = *(_BYTE *)(v71 + v46);
  }
LABEL_97:
  v9[2] = v62;
  *((_BYTE *)v9 + 24) = v63;
  *(_BYTE *)(a3 + 92) = (v46 >> 3) + 1;
  v76 = v61 & 7;
  v77 = (v61 & 7) + 5;
  v78 = v62 + (v77 >> 3);
  v79 = v77 & 7;
  v80 = v62 + 1;
  if (v78 < v62 + 1)
  {
    if (v63)
      v81 = v62 + 1;
    else
      v81 = v62;
    if (v13 < v81)
      goto LABEL_110;
    if (v63)
    {
      if (v13 >= v80)
      {
        LODWORD(v62) = (((1 << (8 - v63)) - 1) & *(unsigned __int8 *)(*v9 + v62)) << v76;
        goto LABEL_121;
      }
      goto LABEL_109;
    }
    v91 = *v9;
    v9[2] = v62;
    if (v13 >= v80)
    {
      LOBYTE(v62) = *(_BYTE *)(v91 + v62);
      goto LABEL_121;
    }
LABEL_109:
    v9[2] = v78;
    *((_BYTE *)v9 + 24) = v79;
LABEL_110:
    GEOGetGeoCSSStyleSheetLog();
    v83 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v83, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleSheet.hpp";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 530;
      *(_WORD *)&buf[18] = 2082;
      *(_QWORD *)&buf[20] = "Could not read number of bits for condition attribute count.";
      _os_log_impl(&dword_19F029000, v83, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
    }

    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a5, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleSheet.hpp", 80);
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a5, (uint64_t)":", 1);
    v84 = (_QWORD *)std::ostream::operator<<();
    v85 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v84, (uint64_t)" STYL Parse Error Here: ", 24);
    v86 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v85, (uint64_t)"Could not read number of bits for condition attribute count.", 60);
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v86, (uint64_t)"\n", 1);
    goto LABEL_137;
  }
  if (v63 <= 3)
    v82 = v62 + 1;
  else
    v82 = v62 + 2;
  if (v13 < v82)
    goto LABEL_109;
  v87 = *v9;
  if (v63)
  {
    v88 = 8 - v63;
    v89 = *(unsigned __int8 *)(v87 + v62);
    if (v80 >= v13)
      v90 = 0;
    else
      v90 = *(unsigned __int8 *)(v87 + v80);
    LODWORD(v62) = ((v90 & (0xFFFF << v88)) >> v88) | ((((1 << v88) + 255) & v89) << v76);
    v9[2] = v80;
  }
  else
  {
    LOBYTE(v62) = *(_BYTE *)(v87 + v62);
  }
LABEL_121:
  v9[2] = v78;
  *((_BYTE *)v9 + 24) = v79;
  *(_BYTE *)(a3 + 93) = (v62 >> 3) + 1;
  v92 = v77 & 7;
  v93 = v78 + ((v92 + 5) >> 3);
  v94 = (v92 + 5) & 7;
  v95 = v78 + 1;
  if (v93 < v78 + 1)
  {
    if (v79)
      v96 = v78 + 1;
    else
      v96 = v78;
    if (v13 < v96)
      goto LABEL_134;
    if (v79)
    {
      if (v13 >= v95)
      {
        v97 = (((1 << (8 - v79)) - 1) & *(unsigned __int8 *)(*v9 + v78)) << v92;
        goto LABEL_149;
      }
      goto LABEL_133;
    }
    v109 = *v9;
    v9[2] = v78;
    if (v13 >= v95)
    {
      LOBYTE(v97) = *(_BYTE *)(v109 + v78);
      goto LABEL_149;
    }
LABEL_133:
    v9[2] = v93;
    *((_BYTE *)v9 + 24) = v94;
LABEL_134:
    GEOGetGeoCSSStyleSheetLog();
    v99 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v99, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleSheet.hpp";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 532;
      *(_WORD *)&buf[18] = 2082;
      *(_QWORD *)&buf[20] = "Could not read number of bits for style count.";
      _os_log_impl(&dword_19F029000, v99, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
    }

    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a5, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleSheet.hpp", 80);
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a5, (uint64_t)":", 1);
    v100 = (_QWORD *)std::ostream::operator<<();
    v101 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v100, (uint64_t)" STYL Parse Error Here: ", 24);
    v102 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v101, (uint64_t)"Could not read number of bits for style count.", 46);
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v102, (uint64_t)"\n", 1);
    goto LABEL_137;
  }
  if (v79 <= 3)
    v98 = v78 + 1;
  else
    v98 = v78 + 2;
  if (v13 < v98)
    goto LABEL_133;
  v105 = *v9;
  if (v79)
  {
    v106 = 8 - v79;
    v107 = *(unsigned __int8 *)(v105 + v78);
    if (v95 >= v13)
      v108 = 0;
    else
      v108 = *(unsigned __int8 *)(v105 + v95);
    v97 = ((v108 & (0xFFFF << v106)) >> v106) | ((((1 << v106) + 255) & v107) << v92);
    v9[2] = v95;
  }
  else
  {
    LOBYTE(v97) = *(_BYTE *)(v105 + v78);
  }
LABEL_149:
  v110 = v97 >> 3;
  v9[2] = v93;
  *((_BYTE *)v9 + 24) = v94;
  *(_BYTE *)(a3 + 94) = v110 + 1;
  v111 = (gss::Allocator *)geo::ibitstream::readUIntBits(&v344, v9, v110 + 1);
  if (!(_BYTE)v344)
  {
    GEOGetGeoCSSStyleSheetLog();
    v121 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v121, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleSheet.hpp";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 535;
      *(_WORD *)&buf[18] = 2082;
      *(_QWORD *)&buf[20] = "Could not read number of styles.";
      _os_log_impl(&dword_19F029000, v121, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
    }

    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a5, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleSheet.hpp", 80);
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a5, (uint64_t)":", 1);
    v122 = (_QWORD *)std::ostream::operator<<();
    v123 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v122, (uint64_t)" STYL Parse Error Here: ", 24);
    v124 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v123, (uint64_t)"Could not read number of styles.", 32);
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v124, (uint64_t)"\n", 1);
    goto LABEL_137;
  }
  v112 = DWORD1(v344);
  v336 = DWORD1(v344);
  if (*(_BYTE *)(a1 + 76))
    goto LABEL_184;
  v113 = (_WORD *)(a1 + 72);
  v114 = *(unsigned __int16 *)(a1 + 72);
  if (v114 > DWORD1(v344))
  {
    v115 = *(_QWORD *)(a1 + 64);
    v116 = v115 + 16 * DWORD1(v344);
    v117 = v115 + 16 * v114;
    do
    {
      v118 = *(std::__shared_weak_count **)(v116 + 8);
      if (v118)
      {
        p_shared_owners = (unint64_t *)&v118->__shared_owners_;
        do
          v120 = __ldaxr(p_shared_owners);
        while (__stlxr(v120 - 1, p_shared_owners));
        if (!v120)
        {
          ((void (*)(std::__shared_weak_count *))v118->__on_zero_shared)(v118);
          std::__shared_weak_count::__release_weak(v118);
        }
      }
      v116 += 16;
    }
    while (v116 != v117);
LABEL_183:
    LODWORD(v112) = v336;
    *v113 = v336;
    goto LABEL_184;
  }
  if (v114 < DWORD1(v344))
  {
    if (DWORD1(v344) > *(unsigned __int16 *)(a1 + 74))
    {
      v125 = gss::Allocator::instance(v111);
      v111 = (gss::Allocator *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v125 + 16))(v125, 16 * v112, 8);
      v332 = v111;
      v126 = *(_QWORD *)(a1 + 64);
      v114 = *(unsigned __int16 *)(a1 + 72);
      if (v126)
      {
        if (*(_WORD *)(a1 + 72))
        {
          v127 = *(unsigned __int16 *)(a1 + 72);
          v128 = v111;
          do
          {
            *(_OWORD *)v128 = *(_OWORD *)v126;
            v128 = (gss::Allocator *)((char *)v128 + 16);
            *(_QWORD *)v126 = 0;
            *(_QWORD *)(v126 + 8) = 0;
            v126 += 16;
            --v127;
          }
          while ((_WORD)v127);
        }
        if (!*(_BYTE *)(a1 + 76))
        {
          v129 = *(_QWORD *)(a1 + 64);
          if (v129)
          {
            if (*v113)
            {
              v130 = v129 + 16 * (unsigned __int16)*v113;
              v330 = v130;
              do
              {
                v131 = *(std::__shared_weak_count **)(v129 + 8);
                if (v131)
                {
                  v132 = (unint64_t *)&v131->__shared_owners_;
                  do
                    v133 = __ldaxr(v132);
                  while (__stlxr(v133 - 1, v132));
                  if (!v133)
                  {
                    ((void (*)(std::__shared_weak_count *))v131->__on_zero_shared)(v131);
                    std::__shared_weak_count::__release_weak(v131);
                    v130 = v330;
                  }
                }
                v129 += 16;
              }
              while (v129 != v130);
            }
            v134 = gss::Allocator::instance(v111);
            v111 = (gss::Allocator *)(*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v134 + 40))(v134, *(_QWORD *)(a1 + 64), 16 * *(unsigned __int16 *)(a1 + 74));
          }
        }
        *(_DWORD *)v113 = 0;
        *(_BYTE *)(a1 + 76) = 0;
        *v113 = v114;
      }
      v112 = v336;
      *(_WORD *)(a1 + 74) = v336;
      *(_QWORD *)(a1 + 64) = v332;
    }
    if (v114 != v112)
      bzero((void *)(*(_QWORD *)(a1 + 64) + 16 * v114), 16 * v336 - 16 * v114);
    goto LABEL_183;
  }
LABEL_184:
  if (!(_DWORD)v112)
  {
LABEL_319:
    if (*(_WORD *)(a1 + 72))
    {
      v219 = *(_QWORD *)(a1 + 64);
      v220 = v219 + 16 * *(unsigned __int16 *)(a1 + 72);
      do
      {
        v222 = *(gss::Allocator **)v219;
        v221 = *(std::__shared_weak_count **)(v219 + 8);
        *(_QWORD *)buf = *(_QWORD *)v219;
        *(_QWORD *)&buf[8] = v221;
        if (v221)
        {
          v223 = (unint64_t *)&v221->__shared_owners_;
          do
            v224 = __ldxr(v223);
          while (__stxr(v224 + 1, v223));
        }
        gss::CartoStyle<gss::ScenePropertyID>::initConditionalStyleList(v222, a1);
        gss::CartoStyle<gss::PropertyID>::internOnDecode((uint64_t)v222, a1 + 232);
        if (v221)
        {
          v225 = (unint64_t *)&v221->__shared_owners_;
          do
            v226 = __ldaxr(v225);
          while (__stlxr(v226 - 1, v225));
          if (!v226)
          {
            ((void (*)(std::__shared_weak_count *))v221->__on_zero_shared)(v221);
            std::__shared_weak_count::__release_weak(v221);
          }
        }
        v219 += 16;
        v103 = 1;
      }
      while (v219 != v220);
    }
    else
    {
      v103 = 1;
    }
    goto LABEL_138;
  }
  v331 = 0;
  v327 = 0;
  while (1)
  {
    v135 = gss::Allocator::instance(v111);
    v136 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v135 + 16))(v135, 160, 8);
    v137 = (std::__shared_weak_count *)v136;
    *(_QWORD *)(v136 + 8) = 0;
    v138 = (unint64_t *)(v136 + 8);
    *(_QWORD *)v136 = &off_1E42E5998;
    *(_QWORD *)(v136 + 32) = &off_1E42C28A8;
    *(_QWORD *)(v136 + 16) = 0;
    *(_QWORD *)(v136 + 24) = v135;
    *(_QWORD *)(v136 + 48) = 0;
    *(_QWORD *)(v136 + 56) = 0;
    *(_QWORD *)(v136 + 40) = 0;
    *(_QWORD *)(v136 + 61) = 0;
    *(_QWORD *)(v136 + 72) = 0;
    *(_QWORD *)(v136 + 77) = 0;
    *(_QWORD *)(v136 + 88) = 0;
    *(_QWORD *)(v136 + 93) = 0;
    *(_OWORD *)(v136 + 120) = 0u;
    *(_OWORD *)(v136 + 104) = 0u;
    *(_QWORD *)(v136 + 136) = 0;
    *(_DWORD *)(v136 + 152) = 0;
    atomic_store(0, (unsigned __int8 *)(v136 + 154));
    *(_QWORD *)&v139 = v136 + 32;
    *((_QWORD *)&v139 + 1) = v136;
    do
      v140 = __ldxr(v138);
    while (__stxr(v140 + 1, v138));
    v141 = (unint64_t *)(v136 + 16);
    v142 = v336;
    do
      v143 = __ldxr(v141);
    while (__stxr(v143 + 1, v141));
    *(_QWORD *)(v136 + 40) = v136 + 32;
    *(_QWORD *)(v136 + 48) = v136;
    do
      v144 = __ldaxr(v138);
    while (__stlxr(v144 - 1, v138));
    if (!v144)
    {
      v333 = v139;
      (*(void (**)(uint64_t))(*(_QWORD *)v136 + 16))(v136);
      std::__shared_weak_count::__release_weak(v137);
      v139 = v333;
    }
    v145 = *(_QWORD *)(a1 + 64) + 16 * v331;
    v146 = *(std::__shared_weak_count **)(v145 + 8);
    *(_OWORD *)v145 = v139;
    if (v146)
    {
      v147 = (unint64_t *)&v146->__shared_owners_;
      do
        v148 = __ldaxr(v147);
      while (__stlxr(v148 - 1, v147));
      if (!v148)
      {
        ((void (*)(std::__shared_weak_count *))v146->__on_zero_shared)(v146);
        std::__shared_weak_count::__release_weak(v146);
      }
    }
    v149 = *(_QWORD *)(a1 + 64) + 16 * v331;
    if (*(_BYTE *)(a3 + 12))
    {
      if (SHIBYTE(v345.__r_.__value_.__r.__words[2]) < 0)
      {
        *v345.__r_.__value_.__l.__data_ = 0;
        v345.__r_.__value_.__l.__size_ = 0;
      }
      else
      {
        v345.__r_.__value_.__s.__data_[0] = 0;
        *((_BYTE *)&v345.__r_.__value_.__s + 23) = 0;
      }
      if ((geo::ibitstream::readString(v10, &v345) & 1) == 0)
      {
        GEOGetGeoCSSStyleSheetLog();
        v263 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v263, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315650;
          *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleSheet.hpp";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 543;
          *(_WORD *)&buf[18] = 2082;
          *(_QWORD *)&buf[20] = "Could not read style name.";
          _os_log_impl(&dword_19F029000, v263, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
        }

        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a5, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleSheet.hpp", 80);
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a5, (uint64_t)":", 1);
        v264 = (_QWORD *)std::ostream::operator<<();
        v265 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v264, (uint64_t)" STYL Parse Error Here: ", 24);
        v266 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v265, (uint64_t)"Could not read style name.", 26);
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v266, (uint64_t)"\n", 1);
        goto LABEL_137;
      }
      if (a4)
      {
        v150 = (void *)operator new[]();
        v151 = v150;
        size = HIBYTE(v345.__r_.__value_.__r.__words[2]);
        if ((v345.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v153 = &v345;
        else
          v153 = (std::string *)v345.__r_.__value_.__r.__words[0];
        if ((v345.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          size = v345.__r_.__value_.__l.__size_;
        memcpy(v150, v153, size + 1);
        v154 = *(_QWORD *)(*(_QWORD *)v149 + 104);
        *(_QWORD *)(*(_QWORD *)v149 + 104) = v151;
        if (v154)
          MEMORY[0x1A1AF4DE8](v154, 0x1000C8077774924);
      }
    }
    geo::ibitstream::readVarInt((uint64_t)&v344, v10);
    if (!(_BYTE)v344)
    {
      GEOGetGeoCSSStyleSheetLog();
      v255 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v255, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315650;
        *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleSheet.hpp";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 552;
        *(_WORD *)&buf[18] = 2082;
        *(_QWORD *)&buf[20] = "Could not read style score.";
        _os_log_impl(&dword_19F029000, v255, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
      }

      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a5, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleSheet.hpp", 80);
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a5, (uint64_t)":", 1);
      v256 = (_QWORD *)std::ostream::operator<<();
      v257 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v256, (uint64_t)" STYL Parse Error Here: ", 24);
      v258 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v257, (uint64_t)"Could not read style score.", 27);
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v258, (uint64_t)"\n", 1);
      goto LABEL_137;
    }
    *(_QWORD *)(*(_QWORD *)v149 + 112) = *((_QWORD *)&v344 + 1);
    geo::ibitstream::readUIntBits(&v344, v10, *(unsigned __int8 *)(a3 + 89));
    if (!(_BYTE)v344)
    {
      GEOGetGeoCSSStyleSheetLog();
      v259 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v259, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315650;
        *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleSheet.hpp";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 556;
        *(_WORD *)&buf[18] = 2082;
        *(_QWORD *)&buf[20] = "Could not read number of inheritted styles.";
        _os_log_impl(&dword_19F029000, v259, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
      }

      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a5, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleSheet.hpp", 80);
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a5, (uint64_t)":", 1);
      v260 = (_QWORD *)std::ostream::operator<<();
      v261 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v260, (uint64_t)" STYL Parse Error Here: ", 24);
      v262 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v261, (uint64_t)"Could not read number of inheritted styles.", 43);
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v262, (uint64_t)"\n", 1);
      goto LABEL_137;
    }
    for (i = DWORD1(v344); i; --i)
    {
      geo::ibitstream::readUIntBits(&v344, v10, *(unsigned __int8 *)(a3 + 94));
      if (!(_BYTE)v344)
      {
        GEOGetGeoCSSStyleSheetLog();
        v227 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v227, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315650;
          *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleSheet.hpp";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 559;
          *(_WORD *)&buf[18] = 2082;
          *(_QWORD *)&buf[20] = "Could not read inherited style index.";
          _os_log_impl(&dword_19F029000, v227, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
        }

        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a5, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleSheet.hpp", 80);
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a5, (uint64_t)":", 1);
        v228 = (_QWORD *)std::ostream::operator<<();
        v229 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v228, (uint64_t)" STYL Parse Error Here: ", 24);
        v230 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v229, (uint64_t)"Could not read inherited style index.", 37);
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v230, (uint64_t)"\n", 1);
        goto LABEL_137;
      }
      if (DWORD1(v344) >= v336)
      {
        GEOGetGeoCSSStyleSheetLog();
        v231 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v231, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315650;
          *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleSheet.hpp";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 560;
          *(_WORD *)&buf[18] = 2082;
          *(_QWORD *)&buf[20] = "Inherited style index out of bounds.";
          _os_log_impl(&dword_19F029000, v231, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
        }

        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a5, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleSheet.hpp", 80);
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a5, (uint64_t)":", 1);
        v232 = (_QWORD *)std::ostream::operator<<();
        v233 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v232, (uint64_t)" STYL Parse Error Here: ", 24);
        v234 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v233, (uint64_t)"Inherited style index out of bounds.", 36);
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v234, (uint64_t)"\n", 1);
        goto LABEL_137;
      }
      v156 = *(_QWORD *)v149;
      *(_DWORD *)buf = DWORD1(v344);
      geo::intern_vector<unsigned int,geo::StdAllocator<unsigned int,gss::Allocator>>::push_back(v156 + 24, buf);
    }
    geo::ibitstream::readUIntBits(&v344, v10, *(unsigned __int8 *)(a3 + 88));
    if (!(_BYTE)v344)
    {
      GEOGetGeoCSSStyleSheetLog();
      v267 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v267, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315650;
        *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleSheet.hpp";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 565;
        *(_WORD *)&buf[18] = 2082;
        *(_QWORD *)&buf[20] = "Could not read property set index.";
        _os_log_impl(&dword_19F029000, v267, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
      }

      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a5, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleSheet.hpp", 80);
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a5, (uint64_t)":", 1);
      v268 = (_QWORD *)std::ostream::operator<<();
      v269 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v268, (uint64_t)" STYL Parse Error Here: ", 24);
      v270 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v269, (uint64_t)"Could not read property set index.", 34);
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v270, (uint64_t)"\n", 1);
      goto LABEL_137;
    }
    if (DWORD1(v344) >= *(unsigned __int16 *)(a1 + 152))
    {
      GEOGetGeoCSSStyleSheetLog();
      v271 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v271, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315650;
        *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleSheet.hpp";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 566;
        *(_WORD *)&buf[18] = 2082;
        *(_QWORD *)&buf[20] = "Property set index out of bounds.";
        _os_log_impl(&dword_19F029000, v271, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
      }

      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a5, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleSheet.hpp", 80);
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a5, (uint64_t)":", 1);
      v272 = (_QWORD *)std::ostream::operator<<();
      v273 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v272, (uint64_t)" STYL Parse Error Here: ", 24);
      v274 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v273, (uint64_t)"Property set index out of bounds.", 33);
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v274, (uint64_t)"\n", 1);
      goto LABEL_137;
    }
    v157 = *(_QWORD *)v149;
    v158 = *(_OWORD *)(*(_QWORD *)(a1 + 144) + 16 * DWORD1(v344));
    v343 = v158;
    v159 = *((_QWORD *)&v158 + 1);
    if (*((_QWORD *)&v158 + 1))
    {
      v160 = (unint64_t *)(*((_QWORD *)&v158 + 1) + 8);
      do
        v161 = __ldxr(v160);
      while (__stxr(v161 + 1, v160));
      v159 = *((_QWORD *)&v343 + 1);
    }
    gss::CartoStyle<gss::PropertyID>::setPropertySet(v157, v158, v159);
    std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&v343);
    geo::ibitstream::readUIntBits(&v344, v10, *(unsigned __int8 *)(a3 + 90));
    if (!(_BYTE)v344)
    {
      GEOGetGeoCSSStyleSheetLog();
      v275 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v275, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315650;
        *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleSheet.hpp";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 570;
        *(_WORD *)&buf[18] = 2082;
        *(_QWORD *)&buf[20] = "Could not read number of zoom styles.";
        _os_log_impl(&dword_19F029000, v275, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
      }

      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a5, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleSheet.hpp", 80);
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a5, (uint64_t)":", 1);
      v276 = (_QWORD *)std::ostream::operator<<();
      v277 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v276, (uint64_t)" STYL Parse Error Here: ", 24);
      v278 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v277, (uint64_t)"Could not read number of zoom styles.", 37);
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v278, (uint64_t)"\n", 1);
      goto LABEL_137;
    }
    v162 = DWORD1(v344);
    v328 = (gss::Allocator **)(*(_QWORD *)v149 + 40);
    geo::intern_vector<gss::ZoomStyle<gss::PropertyID>,geo::StdAllocator<gss::ZoomStyle<gss::PropertyID>,gss::Allocator>>::resize(v328, DWORD1(v344));
    v326 = (_QWORD *)v149;
    if ((_DWORD)v162)
      break;
LABEL_273:
    v111 = (gss::Allocator *)geo::ibitstream::readUIntBits(&v344, v10, *(unsigned __int8 *)(a3 + 91));
    if (!(_BYTE)v344)
    {
      GEOGetGeoCSSStyleSheetLog();
      v303 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v303, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315650;
        *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleSheet.hpp";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 585;
        *(_WORD *)&buf[18] = 2082;
        *(_QWORD *)&buf[20] = "Could not read number of conditional styles.";
        _os_log_impl(&dword_19F029000, v303, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
      }

      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a5, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleSheet.hpp", 80);
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a5, (uint64_t)":", 1);
      v304 = (_QWORD *)std::ostream::operator<<();
      v305 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v304, (uint64_t)" STYL Parse Error Here: ", 24);
      v306 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v305, (uint64_t)"Could not read number of conditional styles.", 44);
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v306, (uint64_t)"\n", 1);
      goto LABEL_137;
    }
    v190 = DWORD1(v344);
    v191 = *v326;
    v335 = (gss::Allocator **)(*v326 + 56);
    if (!WORD3(v344) && !*(_BYTE *)(v191 + 68) && DWORD1(v344) > *(unsigned __int16 *)(v191 + 66))
    {
      geo::intern_vector<std::shared_ptr<gss::ConditionalStyle<gss::PropertyID>>,geo::StdAllocator<std::shared_ptr<gss::ConditionalStyle<gss::PropertyID>>,gss::Allocator>>::reallocate(v335, DWORD1(v344));
LABEL_279:
      v323 = v190;
      v192 = 0;
      v329 = v191;
      while (1)
      {
        geo::ibitstream::readUIntBits(&v344, v10, *(unsigned __int8 *)(a3 + 92));
        if (!(_BYTE)v344)
          break;
        v325 = v192;
        v193 = DWORD1(v344);
        *(_QWORD *)((char *)&v344 + 5) = 0;
        *(_QWORD *)&v344 = 0;
        geo::intern_vector<gss::StyleCondition,geo::StdAllocator<gss::StyleCondition,gss::Allocator>>::resize((gss::Allocator *)&v344, v193);
        geo::intern_vector<gss::StyleCondition,geo::StdAllocator<gss::StyleCondition,gss::Allocator>>::intern<geo::StdAllocator<gss::StyleCondition,gss::Allocator>>((gss::Allocator *)&v344, a1 + 448);
        if ((_DWORD)v193)
        {
          v194 = 0;
          v324 = v193;
          while (1)
          {
            v342 = 0;
            if (!gss::decodeAttributeEncoding(v10, &v342, *(_BYTE *)(a3 + 13), *(_BYTE *)(a3 + 14), a5))
            {
              GEOGetGeoCSSStyleSheetLog();
              v279 = objc_claimAutoreleasedReturnValue();
              if (os_log_type_enabled(v279, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)buf = 136315650;
                *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleSheet.hpp";
                *(_WORD *)&buf[12] = 1024;
                *(_DWORD *)&buf[14] = 596;
                *(_WORD *)&buf[18] = 2082;
                *(_QWORD *)&buf[20] = "Could not decode attribute.";
                _os_log_impl(&dword_19F029000, v279, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
              }

              std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a5, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleSheet.hpp", 80);
              std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a5, (uint64_t)":", 1);
              v280 = (_QWORD *)std::ostream::operator<<();
              v281 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v280, (uint64_t)" STYL Parse Error Here: ", 24);
              v282 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v281, (uint64_t)"Could not decode attribute.", 27);
              std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v282, (uint64_t)"\n", 1);
              goto LABEL_340;
            }
            v195 = *(unsigned __int8 *)std::map<unsigned int,unsigned char,std::less<unsigned int>,geo::StdAllocator<std::pair<unsigned int const,unsigned char>,gss::Allocator>>::operator[]((uint64_t **)(a3 + 16), &v342);
            geo::ibitstream::readUIntBits(v341, v10, *(unsigned __int8 *)(a3 + 93));
            if (!LOBYTE(v341[0]))
            {
              GEOGetGeoCSSStyleSheetLog();
              v283 = objc_claimAutoreleasedReturnValue();
              if (os_log_type_enabled(v283, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)buf = 136315650;
                *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleSheet.hpp";
                *(_WORD *)&buf[12] = 1024;
                *(_DWORD *)&buf[14] = 599;
                *(_WORD *)&buf[18] = 2082;
                *(_QWORD *)&buf[20] = "Could not read number of attribute values for condition.";
                _os_log_impl(&dword_19F029000, v283, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
              }

              std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a5, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleSheet.hpp", 80);
              std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a5, (uint64_t)":", 1);
              v284 = (_QWORD *)std::ostream::operator<<();
              v285 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v284, (uint64_t)" STYL Parse Error Here: ", 24);
              v286 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v285, (uint64_t)"Could not read number of attribute values for condition.", 56);
              std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v286, (uint64_t)"\n", 1);
              goto LABEL_340;
            }
            v196 = HIDWORD(v341[0]);
            memset(v341, 0, 13);
            geo::intern_vector<unsigned int,geo::StdAllocator<unsigned int,gss::Allocator>>::resize((gss::Allocator *)v341, v196);
            geo::intern_vector<unsigned int,geo::StdAllocator<unsigned int,gss::Allocator>>::intern<geo::StdAllocator<unsigned int,gss::Allocator>>((uint64_t)v341, a1 + 416);
            if ((_DWORD)v196)
              break;
            v199 = (int *)v341[0];
LABEL_291:
            *(_DWORD *)buf = v342;
            *(_QWORD *)&buf[8] = 0;
            *(_QWORD *)&buf[13] = 0;
            if (BYTE4(v341[1]))
            {
              *(_QWORD *)&buf[8] = v199;
              *(_DWORD *)&buf[16] = v341[1];
              buf[20] = 1;
            }
            else
            {
              geo::intern_vector<unsigned int,geo::StdAllocator<unsigned int,gss::Allocator>>::append<unsigned int *>((uint64_t)&buf[8], v199, (char *)&v199[LOWORD(v341[1])]);
            }
            gss::StyleCondition::operator=(v344 + 24 * v194, (uint64_t)buf);
            gss::StyleCondition::~StyleCondition((gss::StyleCondition *)buf);
            geo::intern_vector<unsigned int,geo::StdAllocator<unsigned int,gss::Allocator>>::~intern_vector(v341);
            if (++v194 == v193)
              goto LABEL_295;
          }
          v197 = 0;
          v198 = 4 * v196;
          while (1)
          {
            geo::ibitstream::readUIntBits(v339, v10, v195);
            if (!v339[0])
              break;
            v199 = (int *)v341[0];
            *(_DWORD *)(v341[0] + v197) = v340;
            v197 += 4;
            if (v198 == v197)
            {
              v193 = v324;
              goto LABEL_291;
            }
          }
          GEOGetGeoCSSStyleSheetLog();
          v235 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v235, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136315650;
            *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleSheet.hpp";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 605;
            *(_WORD *)&buf[18] = 2082;
            *(_QWORD *)&buf[20] = "Could not read value for condition attribute.";
            _os_log_impl(&dword_19F029000, v235, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
          }

          std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a5, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleSheet.hpp", 80);
          std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a5, (uint64_t)":", 1);
          v236 = (_QWORD *)std::ostream::operator<<();
          v237 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v236, (uint64_t)" STYL Parse Error Here: ", 24);
          v238 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v237, (uint64_t)"Could not read value for condition attribute.", 45);
          std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v238, (uint64_t)"\n", 1);
          geo::intern_vector<unsigned int,geo::StdAllocator<unsigned int,gss::Allocator>>::~intern_vector(v341);
          goto LABEL_340;
        }
LABEL_295:
        gss::make_shared<gss::ConditionalStyle<gss::ScenePropertyID>,geo::intern_vector<gss::StyleCondition,geo::StdAllocator<gss::StyleCondition,gss::Allocator>>>((gss::Allocator *)buf, (uint64_t *)&v344);
        geo::intern_vector<std::shared_ptr<gss::ConditionalStyle<gss::PropertyID>>,geo::StdAllocator<std::shared_ptr<gss::ConditionalStyle<gss::PropertyID>>,gss::Allocator>>::emplace_back<std::shared_ptr<gss::ConditionalStyle<gss::PropertyID>>>((uint64_t)v335, (__n128 *)buf);
        std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)buf);
        v200 = *(_QWORD *)(v329 + 56);
        v201 = *(unsigned __int16 *)(v329 + 64);
        geo::ibitstream::readUIntBits(v341, v10, *(unsigned __int8 *)(a3 + 88));
        if (!LOBYTE(v341[0]))
        {
          GEOGetGeoCSSStyleSheetLog();
          v311 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v311, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136315650;
            *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleSheet.hpp";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 613;
            *(_WORD *)&buf[18] = 2082;
            *(_QWORD *)&buf[20] = "Could not read conditional style property set index.";
            _os_log_impl(&dword_19F029000, v311, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
          }

          std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a5, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleSheet.hpp", 80);
          std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a5, (uint64_t)":", 1);
          v312 = (_QWORD *)std::ostream::operator<<();
          v313 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v312, (uint64_t)" STYL Parse Error Here: ", 24);
          v314 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v313, (uint64_t)"Could not read conditional style property set index.", 52);
          std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v314, (uint64_t)"\n", 1);
          goto LABEL_340;
        }
        if (HIDWORD(v341[0]) >= *(unsigned __int16 *)(a1 + 152))
        {
          GEOGetGeoCSSStyleSheetLog();
          v315 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v315, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136315650;
            *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleSheet.hpp";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 614;
            *(_WORD *)&buf[18] = 2082;
            *(_QWORD *)&buf[20] = "Conditional style property set index out of bounds.";
            _os_log_impl(&dword_19F029000, v315, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
          }

          std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a5, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleSheet.hpp", 80);
          std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a5, (uint64_t)":", 1);
          v316 = (_QWORD *)std::ostream::operator<<();
          v317 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v316, (uint64_t)" STYL Parse Error Here: ", 24);
          v318 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v317, (uint64_t)"Conditional style property set index out of bounds.", 51);
          std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v318, (uint64_t)"\n", 1);
          goto LABEL_340;
        }
        v202 = v200 + 16 * v201;
        v203 = *(_QWORD *)(v202 - 16);
        v204 = *(_OWORD *)(*(_QWORD *)(a1 + 144) + 16 * HIDWORD(v341[0]));
        v338 = v204;
        v205 = *((_QWORD *)&v204 + 1);
        if (*((_QWORD *)&v204 + 1))
        {
          v206 = (unint64_t *)(*((_QWORD *)&v204 + 1) + 8);
          do
            v207 = __ldxr(v206);
          while (__stxr(v207 + 1, v206));
          v205 = *((_QWORD *)&v338 + 1);
        }
        gss::CartoStyle<gss::PropertyID>::setPropertySet(v203, v204, v205);
        std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&v338);
        geo::ibitstream::readUIntBits(v341, v10, *(unsigned __int8 *)(a3 + 90));
        if (!LOBYTE(v341[0]))
        {
          GEOGetGeoCSSStyleSheetLog();
          v319 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v319, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136315650;
            *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleSheet.hpp";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 617;
            *(_WORD *)&buf[18] = 2082;
            *(_QWORD *)&buf[20] = "Could not read conditional style's zoom style count.";
            _os_log_impl(&dword_19F029000, v319, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
          }

          std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a5, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleSheet.hpp", 80);
          std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a5, (uint64_t)":", 1);
          v320 = (_QWORD *)std::ostream::operator<<();
          v321 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v320, (uint64_t)" STYL Parse Error Here: ", 24);
          v322 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v321, (uint64_t)"Could not read conditional style's zoom style count.", 52);
          std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v322, (uint64_t)"\n", 1);
LABEL_340:
          geo::intern_vector<gss::StyleCondition,geo::StdAllocator<gss::StyleCondition,gss::Allocator>>::~intern_vector((uint64_t)&v344);
          goto LABEL_137;
        }
        v208 = HIDWORD(v341[0]);
        v209 = (gss::Allocator **)(*(_QWORD *)(v202 - 16) + 40);
        geo::intern_vector<gss::ZoomStyle<gss::PropertyID>,geo::StdAllocator<gss::ZoomStyle<gss::PropertyID>,gss::Allocator>>::resize(v209, HIDWORD(v341[0]));
        if ((_DWORD)v208)
        {
          v210 = 0;
          while (1)
          {
            geo::ibitstream::readUIntBits(buf, v10, 8u);
            if (!buf[0])
              break;
            v211 = *(_DWORD *)&buf[4];
            geo::ibitstream::readUIntBits(buf, v10, 8u);
            if (!buf[0])
            {
              GEOGetGeoCSSStyleSheetLog();
              v291 = objc_claimAutoreleasedReturnValue();
              if (os_log_type_enabled(v291, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)buf = 136315650;
                *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleSheet.hpp";
                *(_WORD *)&buf[12] = 1024;
                *(_DWORD *)&buf[14] = 624;
                *(_WORD *)&buf[18] = 2082;
                *(_QWORD *)&buf[20] = "Could not read conditional style's zoom style max zoom.";
                _os_log_impl(&dword_19F029000, v291, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
              }

              std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a5, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleSheet.hpp", 80);
              std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a5, (uint64_t)":", 1);
              v292 = (_QWORD *)std::ostream::operator<<();
              v293 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v292, (uint64_t)" STYL Parse Error Here: ", 24);
              v294 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v293, (uint64_t)"Could not read conditional style's zoom style max zoom.", 55);
              std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v294, (uint64_t)"\n", 1);
              goto LABEL_340;
            }
            v212 = *(_DWORD *)&buf[4];
            geo::ibitstream::readUIntBits(v341, v10, *(unsigned __int8 *)(a3 + 88));
            if (!LOBYTE(v341[0]))
            {
              GEOGetGeoCSSStyleSheetLog();
              v295 = objc_claimAutoreleasedReturnValue();
              if (os_log_type_enabled(v295, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)buf = 136315650;
                *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleSheet.hpp";
                *(_WORD *)&buf[12] = 1024;
                *(_DWORD *)&buf[14] = 625;
                *(_WORD *)&buf[18] = 2082;
                *(_QWORD *)&buf[20] = "Could not read conditional style's zoom style property set index.";
                _os_log_impl(&dword_19F029000, v295, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
              }

              std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a5, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleSheet.hpp", 80);
              std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a5, (uint64_t)":", 1);
              v296 = (_QWORD *)std::ostream::operator<<();
              v297 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v296, (uint64_t)" STYL Parse Error Here: ", 24);
              v298 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v297, (uint64_t)"Could not read conditional style's zoom style property set index.", 65);
              std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v298, (uint64_t)"\n", 1);
              goto LABEL_340;
            }
            if (HIDWORD(v341[0]) >= *(unsigned __int16 *)(a1 + 152))
            {
              GEOGetGeoCSSStyleSheetLog();
              v299 = objc_claimAutoreleasedReturnValue();
              if (os_log_type_enabled(v299, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)buf = 136315650;
                *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleSheet.hpp";
                *(_WORD *)&buf[12] = 1024;
                *(_DWORD *)&buf[14] = 626;
                *(_WORD *)&buf[18] = 2082;
                *(_QWORD *)&buf[20] = "Conditional style's zoom style property set index out of bounds.";
                _os_log_impl(&dword_19F029000, v299, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
              }

              std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a5, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleSheet.hpp", 80);
              std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a5, (uint64_t)":", 1);
              v300 = (_QWORD *)std::ostream::operator<<();
              v301 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v300, (uint64_t)" STYL Parse Error Here: ", 24);
              v302 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v301, (uint64_t)"Conditional style's zoom style property set index out of bounds.", 64);
              std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v302, (uint64_t)"\n", 1);
              goto LABEL_340;
            }
            v213 = *(_OWORD *)(*(_QWORD *)(a1 + 144) + 16 * HIDWORD(v341[0]));
            v337 = v213;
            if (*((_QWORD *)&v213 + 1))
            {
              v214 = (unint64_t *)(*((_QWORD *)&v213 + 1) + 8);
              do
                v215 = __ldxr(v214);
              while (__stxr(v215 + 1, v214));
              *(float *)buf = (float)v211 * 0.125;
              *(float *)&buf[4] = (float)v212 * 0.125;
              *(_QWORD *)&buf[8] = v213;
              *(_QWORD *)&buf[16] = *((_QWORD *)&v337 + 1);
              if (*((_QWORD *)&v337 + 1))
              {
                v216 = (unint64_t *)(*((_QWORD *)&v337 + 1) + 8);
                do
                  v217 = __ldxr(v216);
                while (__stxr(v217 + 1, v216));
              }
            }
            else
            {
              *(float *)buf = (float)v211 * 0.125;
              *(float *)&buf[4] = (float)v212 * 0.125;
              *(_QWORD *)&buf[8] = v213;
              *(_QWORD *)&buf[16] = 0;
            }
            gss::ZoomStyle<gss::PropertyID>::operator=((uint64_t)*v209 + 24 * v210, (uint64_t)buf);
            md::components::Material::~Material((md::components::Material *)buf);
            std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&v337);
            if (++v210 == v208)
              goto LABEL_317;
          }
          GEOGetGeoCSSStyleSheetLog();
          v287 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v287, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136315650;
            *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleSheet.hpp";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 623;
            *(_WORD *)&buf[18] = 2082;
            *(_QWORD *)&buf[20] = "Could not read conditional style's zoom style min zoom.";
            _os_log_impl(&dword_19F029000, v287, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
          }

          std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a5, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleSheet.hpp", 80);
          std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a5, (uint64_t)":", 1);
          v288 = (_QWORD *)std::ostream::operator<<();
          v289 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v288, (uint64_t)" STYL Parse Error Here: ", 24);
          v290 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v289, (uint64_t)"Could not read conditional style's zoom style min zoom.", 55);
          std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v290, (uint64_t)"\n", 1);
          goto LABEL_340;
        }
LABEL_317:
        v218 = *(_QWORD *)(v202 - 16);
        *(_DWORD *)(v218 + 152) = v327;
        *(_DWORD *)(v218 + 156) = v325;
        *(_QWORD *)(v218 + 144) = *v326;
        ++v327;
        v192 = v325 + 1;
        v111 = (gss::Allocator *)geo::intern_vector<gss::StyleCondition,geo::StdAllocator<gss::StyleCondition,gss::Allocator>>::~intern_vector((uint64_t)&v344);
        v142 = v336;
        if (v325 + 1 == v323)
          goto LABEL_318;
      }
      GEOGetGeoCSSStyleSheetLog();
      v307 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v307, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315650;
        *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleSheet.hpp";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 590;
        *(_WORD *)&buf[18] = 2082;
        *(_QWORD *)&buf[20] = "Could not read number of conditions.";
        _os_log_impl(&dword_19F029000, v307, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
      }

      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a5, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleSheet.hpp", 80);
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a5, (uint64_t)":", 1);
      v308 = (_QWORD *)std::ostream::operator<<();
      v309 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v308, (uint64_t)" STYL Parse Error Here: ", 24);
      v310 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v309, (uint64_t)"Could not read number of conditions.", 36);
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v310, (uint64_t)"\n", 1);
      goto LABEL_137;
    }
    if (DWORD1(v344))
      goto LABEL_279;
LABEL_318:
    if (++v331 == v142)
      goto LABEL_319;
  }
  v163 = 0;
  while (1)
  {
    v164 = *((unsigned __int8 *)v10 + 24);
    v165 = v10[1];
    v166 = v10[2];
    v167 = v166 + ((unint64_t)(v164 + 8) >> 3);
    v168 = v164 & 7;
    v169 = v166 + 1;
    if (v167 >= v166 + 1)
      break;
    if (*((_BYTE *)v10 + 24))
      v170 = v166 + 1;
    else
      v170 = v10[2];
    if (v165 < v170)
      goto LABEL_342;
    if (!*((_BYTE *)v10 + 24))
    {
      if (v165 < v169)
        goto LABEL_341;
      v171 = *v10;
LABEL_245:
      LOBYTE(v166) = *(_BYTE *)(v171 + v166);
      goto LABEL_248;
    }
    if (v165 < v169)
      goto LABEL_341;
    v171 = *v10;
    LODWORD(v166) = (((1 << (8 - v164)) - 1) & *(unsigned __int8 *)(*v10 + v166)) << v164;
LABEL_248:
    v10[2] = v167;
    *((_BYTE *)v10 + 24) = v168;
    v174 = v167 + 1;
    if (v165 < v167 + 1)
    {
      v10[2] = v174;
      *((_BYTE *)v10 + 24) = v168;
      GEOGetGeoCSSStyleSheetLog();
      v243 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v243, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315650;
        *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleSheet.hpp";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 577;
        *(_WORD *)&buf[18] = 2082;
        *(_QWORD *)&buf[20] = "Could not read zoom style max zoom.";
        _os_log_impl(&dword_19F029000, v243, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
      }

      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a5, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleSheet.hpp", 80);
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a5, (uint64_t)":", 1);
      v244 = (_QWORD *)std::ostream::operator<<();
      v245 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v244, (uint64_t)" STYL Parse Error Here: ", 24);
      v246 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v245, (uint64_t)"Could not read zoom style max zoom.", 35);
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v246, (uint64_t)"\n", 1);
      goto LABEL_137;
    }
    v334 = v166;
    if (v168)
    {
      if (v174 >= v165)
        v175 = 0;
      else
        v175 = *(unsigned __int8 *)(v171 + v174);
      v176 = ((v175 & (0xFFFF << (8 - v168))) >> (8 - v168)) | ((((1 << (8 - v168)) + 255) & *(unsigned __int8 *)(v171 + v167)) << v168);
      v10[2] = v174;
    }
    else
    {
      LOBYTE(v176) = *(_BYTE *)(v171 + v167);
    }
    v10[2] = v174;
    *((_BYTE *)v10 + 24) = v168;
    geo::ibitstream::readUIntBits(&v344, v10, *(unsigned __int8 *)(a3 + 88));
    if (!(_BYTE)v344)
    {
      GEOGetGeoCSSStyleSheetLog();
      v247 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v247, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315650;
        *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleSheet.hpp";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 578;
        *(_WORD *)&buf[18] = 2082;
        *(_QWORD *)&buf[20] = "Could not read zoom style property set index.";
        _os_log_impl(&dword_19F029000, v247, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
      }

      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a5, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleSheet.hpp", 80);
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a5, (uint64_t)":", 1);
      v248 = (_QWORD *)std::ostream::operator<<();
      v249 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v248, (uint64_t)" STYL Parse Error Here: ", 24);
      v250 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v249, (uint64_t)"Could not read zoom style property set index.", 45);
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v250, (uint64_t)"\n", 1);
      goto LABEL_137;
    }
    if (DWORD1(v344) >= *(unsigned __int16 *)(a1 + 152))
    {
      GEOGetGeoCSSStyleSheetLog();
      v251 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v251, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315650;
        *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleSheet.hpp";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 579;
        *(_WORD *)&buf[18] = 2082;
        *(_QWORD *)&buf[20] = "Zoom style property set index out of bounds.";
        _os_log_impl(&dword_19F029000, v251, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
      }

      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a5, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleSheet.hpp", 80);
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a5, (uint64_t)":", 1);
      v252 = (_QWORD *)std::ostream::operator<<();
      v253 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v252, (uint64_t)" STYL Parse Error Here: ", 24);
      v254 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v253, (uint64_t)"Zoom style property set index out of bounds.", 44);
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v254, (uint64_t)"\n", 1);
      goto LABEL_137;
    }
    v177 = v162;
    v178 = *(_QWORD *)(a1 + 144);
    v179 = *(_OWORD *)(v178 + 16 * DWORD1(v344));
    v180 = *(std::__shared_weak_count **)(v178 + 16 * DWORD1(v344) + 8);
    if (v180)
    {
      v181 = (unint64_t *)&v180->__shared_owners_;
      do
        v182 = __ldxr(v181);
      while (__stxr(v182 + 1, v181));
      do
        v183 = __ldxr(v181);
      while (__stxr(v183 + 1, v181));
    }
    else
    {
      *((_QWORD *)&v179 + 1) = 0;
    }
    v184 = (uint64_t)*v328 + 24 * v163;
    *(float *)v184 = (float)v334 * 0.125;
    *(float *)(v184 + 4) = (float)v176 * 0.125;
    v185 = *(std::__shared_weak_count **)(v184 + 16);
    *(_OWORD *)(v184 + 8) = v179;
    if (v185)
    {
      v186 = (unint64_t *)&v185->__shared_owners_;
      do
        v187 = __ldaxr(v186);
      while (__stlxr(v187 - 1, v186));
      if (!v187)
      {
        ((void (*)(std::__shared_weak_count *))v185->__on_zero_shared)(v185);
        std::__shared_weak_count::__release_weak(v185);
      }
    }
    v142 = v336;
    if (v180)
    {
      v188 = (unint64_t *)&v180->__shared_owners_;
      do
        v189 = __ldaxr(v188);
      while (__stlxr(v189 - 1, v188));
      if (!v189)
      {
        ((void (*)(std::__shared_weak_count *))v180->__on_zero_shared)(v180);
        std::__shared_weak_count::__release_weak(v180);
      }
    }
    ++v163;
    v162 = v177;
    if (v163 == v177)
      goto LABEL_273;
  }
  if (v164 <= 8)
    v172 = v166 + 1;
  else
    v172 = v166 + 2;
  if (v165 >= v172)
  {
    v171 = *v10;
    if (!*((_BYTE *)v10 + 24))
      goto LABEL_245;
    if (v169 >= v165)
      v173 = 0;
    else
      v173 = *(unsigned __int8 *)(v171 + v169);
    LODWORD(v166) = ((v173 & (0xFFFF << (8 - v164))) >> (8 - v164)) | ((((1 << (8 - v164)) + 255) & *(unsigned __int8 *)(v171 + v166)) << v164);
    v10[2] = v169;
    goto LABEL_248;
  }
LABEL_341:
  v10[2] = v167;
  *((_BYTE *)v10 + 24) = v168;
LABEL_342:
  GEOGetGeoCSSStyleSheetLog();
  v239 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v239, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 136315650;
    *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleSheet.hpp";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 576;
    *(_WORD *)&buf[18] = 2082;
    *(_QWORD *)&buf[20] = "Could not read zoom style min zoom.";
    _os_log_impl(&dword_19F029000, v239, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
  }

  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a5, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleSheet.hpp", 80);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a5, (uint64_t)":", 1);
  v240 = (_QWORD *)std::ostream::operator<<();
  v241 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v240, (uint64_t)" STYL Parse Error Here: ", 24);
  v242 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v241, (uint64_t)"Could not read zoom style min zoom.", 35);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v242, (uint64_t)"\n", 1);
LABEL_137:
  v103 = 0;
LABEL_138:
  if (SHIBYTE(v345.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v345.__r_.__value_.__l.__data_);
  return v103;
}

void sub_19F0E1388(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36)
{
  uint64_t v36;

  geo::intern_vector<gss::StyleCondition,geo::StdAllocator<gss::StyleCondition,gss::Allocator>>::~intern_vector((uint64_t)&a36);
  if (*(char *)(v36 - 177) < 0)
    operator delete(*(void **)(v36 - 200));
  _Unwind_Resume(a1);
}

gss::Allocator *gss::CartoStyle<gss::ScenePropertyID>::initConditionalStyleList(gss::Allocator *result, uint64_t a2)
{
  gss::Allocator *v3;
  int v4;
  unsigned int *v5;
  unsigned int *v6;
  _QWORD *v7;
  gss::Allocator *inited;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  gss::Allocator *v12;
  gss::Allocator **v13;
  gss::Allocator **v14;
  unsigned int v15;
  gss::Allocator *v16;
  gss::Allocator *v17;
  uint64_t v18;
  gss::Allocator *v19;
  uint64_t v20;
  _BYTE *v21;
  int v22;
  uint64_t v23;
  int v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  gss::Allocator *v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  unsigned int *v32;
  uint64_t v33;
  __int128 *v34;
  __int128 *v35;
  unsigned int v36;
  gss::Allocator *v37;
  gss::Allocator **v38;
  gss::Allocator **v39;
  unsigned int v40;
  gss::Allocator *v41;
  uint64_t v42;
  gss::Allocator *v43;
  uint64_t v44;
  _BYTE *v45;
  int v46;
  uint64_t v47;
  int v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t v51;
  gss::Allocator *v52;
  uint64_t v53;
  uint64_t v54;
  BOOL v55;
  __int128 v57;
  unint64_t *v58;
  unint64_t v59;
  _QWORD *v60;
  unint64_t v61;
  uint64_t v62;
  BOOL v63;
  _QWORD *v65;
  _QWORD *v66;
  uint64_t v67;
  unint64_t *v68;
  unint64_t v69;
  unsigned __int16 v70;
  uint64_t *v71;
  uint64_t v72;
  uint64_t v73;
  std::__shared_weak_count *v74;
  unint64_t *v75;
  unint64_t v76;
  int v77;
  gss::Allocator *v78;
  gss::Allocator *v79;
  std::__shared_weak_count *v80;
  unint64_t *p_shared_owners;
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;
  gss::Allocator *v85;
  unsigned int *v86;
  uint64_t v87;
  gss::Allocator *v88[2];
  gss::Allocator **v89;
  gss::Allocator *v90;
  uint64_t v91;
  uint64_t v92;

  if (!*((_BYTE *)result + 120))
  {
    v3 = result;
    v90 = 0;
    v91 = gss::Allocator::instance(result);
    v92 = 0;
    v89 = &v90;
    if (*((_WORD *)v3 + 16))
    {
      v4 = 0;
      v85 = v3;
      v5 = (unsigned int *)*((_QWORD *)v3 + 3);
      v6 = &v5[*((unsigned __int16 *)v3 + 16)];
      v87 = a2;
      do
      {
        v7 = (_QWORD *)(*(_QWORD *)(a2 + 64) + 16 * *v5);
        inited = (gss::Allocator *)gss::CartoStyle<gss::ScenePropertyID>::initConditionalStyleList(*v7, a2);
        if (*(_WORD *)(*v7 + 64))
        {
          v9 = *(_QWORD *)(*v7 + 56);
          v10 = v9 + 16 * *(unsigned __int16 *)(*v7 + 64);
          do
          {
            v11 = *(_DWORD *)(*(_QWORD *)v9 + 152);
            v12 = v90;
            v13 = &v90;
            v14 = &v90;
            if (v90)
            {
              while (1)
              {
                while (1)
                {
                  v14 = (gss::Allocator **)v12;
                  v15 = *((_DWORD *)v12 + 7);
                  if (v11 >= v15)
                    break;
                  v12 = *v14;
                  v13 = v14;
                  if (!*v14)
                    goto LABEL_18;
                }
                if (v15 >= v11)
                  break;
                v12 = v14[1];
                if (!v12)
                {
                  v13 = v14 + 1;
                  goto LABEL_18;
                }
              }
              inited = (gss::Allocator *)v14;
            }
            else
            {
LABEL_18:
              inited = (gss::Allocator *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v91 + 16))(v91, 40, 8);
              *((_DWORD *)inited + 7) = v11;
              *((_DWORD *)inited + 8) = 0;
              *(_QWORD *)inited = 0;
              *((_QWORD *)inited + 1) = 0;
              *((_QWORD *)inited + 2) = v14;
              *v13 = inited;
              v16 = inited;
              if (*v89)
              {
                v89 = (gss::Allocator **)*v89;
                v16 = *v13;
              }
              v17 = v90;
              v55 = v16 == v90;
              *((_BYTE *)v16 + 24) = v16 == v90;
              if (!v55)
              {
                do
                {
                  v18 = *((_QWORD *)v16 + 2);
                  if (*(_BYTE *)(v18 + 24))
                    break;
                  v19 = *(gss::Allocator **)(v18 + 16);
                  v20 = *(_QWORD *)v19;
                  if (*(_QWORD *)v19 == v18)
                  {
                    v23 = *((_QWORD *)v19 + 1);
                    if (!v23 || (v24 = *(unsigned __int8 *)(v23 + 24), v21 = (_BYTE *)(v23 + 24), v24))
                    {
                      if (*(gss::Allocator **)v18 == v16)
                      {
                        v25 = (uint64_t *)*((_QWORD *)v16 + 2);
                      }
                      else
                      {
                        v25 = *(uint64_t **)(v18 + 8);
                        v26 = *v25;
                        *(_QWORD *)(v18 + 8) = *v25;
                        if (v26)
                        {
                          *(_QWORD *)(v26 + 16) = v18;
                          v19 = *(gss::Allocator **)(v18 + 16);
                        }
                        v25[2] = (uint64_t)v19;
                        *(_QWORD *)(*(_QWORD *)(v18 + 16) + 8 * (**(_QWORD **)(v18 + 16) != v18)) = v25;
                        *v25 = v18;
                        *(_QWORD *)(v18 + 16) = v25;
                        v19 = (gss::Allocator *)v25[2];
                        v18 = *(_QWORD *)v19;
                      }
                      *((_BYTE *)v25 + 24) = 1;
                      *((_BYTE *)v19 + 24) = 0;
                      v29 = *(_QWORD *)(v18 + 8);
                      *(_QWORD *)v19 = v29;
                      if (v29)
                        *(_QWORD *)(v29 + 16) = v19;
                      *(_QWORD *)(v18 + 16) = *((_QWORD *)v19 + 2);
                      *(_QWORD *)(*((_QWORD *)v19 + 2) + 8 * (**((_QWORD **)v19 + 2) != (_QWORD)v19)) = v18;
                      *(_QWORD *)(v18 + 8) = v19;
                      goto LABEL_8;
                    }
                  }
                  else if (!v20 || (v22 = *(unsigned __int8 *)(v20 + 24), v21 = (_BYTE *)(v20 + 24), v22))
                  {
                    if (*(gss::Allocator **)v18 == v16)
                    {
                      v27 = *((_QWORD *)v16 + 1);
                      *(_QWORD *)v18 = v27;
                      if (v27)
                      {
                        *(_QWORD *)(v27 + 16) = v18;
                        v19 = *(gss::Allocator **)(v18 + 16);
                      }
                      *((_QWORD *)v16 + 2) = v19;
                      *(_QWORD *)(*(_QWORD *)(v18 + 16) + 8 * (**(_QWORD **)(v18 + 16) != v18)) = v16;
                      *((_QWORD *)v16 + 1) = v18;
                      *(_QWORD *)(v18 + 16) = v16;
                      v19 = (gss::Allocator *)*((_QWORD *)v16 + 2);
                    }
                    else
                    {
                      v16 = (gss::Allocator *)*((_QWORD *)v16 + 2);
                    }
                    *((_BYTE *)v16 + 24) = 1;
                    *((_BYTE *)v19 + 24) = 0;
                    v18 = *((_QWORD *)v19 + 1);
                    v28 = *(gss::Allocator **)v18;
                    *((_QWORD *)v19 + 1) = *(_QWORD *)v18;
                    if (v28)
                      *((_QWORD *)v28 + 2) = v19;
                    *(_QWORD *)(v18 + 16) = *((_QWORD *)v19 + 2);
                    *(_QWORD *)(*((_QWORD *)v19 + 2) + 8 * (**((_QWORD **)v19 + 2) != (_QWORD)v19)) = v18;
                    *(_QWORD *)v18 = v19;
LABEL_8:
                    *((_QWORD *)v19 + 2) = v18;
                    break;
                  }
                  *(_BYTE *)(v18 + 24) = 1;
                  v16 = v19;
                  *((_BYTE *)v19 + 24) = v19 == v17;
                  *v21 = 1;
                }
                while (v19 != v17);
              }
              ++v92;
            }
            *((_DWORD *)inited + 8) = v4++;
            v9 += 16;
          }
          while (v9 != v10);
        }
        ++v5;
        a2 = v87;
      }
      while (v5 != v6);
      if (v92 && v87)
      {
        v30 = v92 + *((unsigned __int16 *)v85 + 32);
        memset(v88, 0, 13);
        if ((unint64_t)(v30 - 1) <= 0xFFFE)
          inited = geo::intern_vector<std::shared_ptr<gss::ConditionalStyle<gss::PropertyID>>,geo::StdAllocator<std::shared_ptr<gss::ConditionalStyle<gss::PropertyID>>,gss::Allocator>>::reallocate(v88, v30);
        if (*((_WORD *)v85 + 16))
        {
          v31 = 0;
          v32 = (unsigned int *)*((_QWORD *)v85 + 3);
          v86 = &v32[*((unsigned __int16 *)v85 + 16)];
          while (1)
          {
            v33 = *(_QWORD *)(*(_QWORD *)(a2 + 64) + 16 * *v32);
            if (*(_WORD *)(v33 + 64))
              break;
LABEL_53:
            ++v32;
            a2 = v87;
            if (v32 == v86)
              goto LABEL_111;
          }
          v34 = *(__int128 **)(v33 + 56);
          v35 = &v34[*(unsigned __int16 *)(v33 + 64)];
          while (1)
          {
            v36 = *(_DWORD *)(*(_QWORD *)v34 + 152);
            v37 = v90;
            v38 = &v90;
            v39 = &v90;
            if (v90)
            {
              while (1)
              {
                while (1)
                {
                  v39 = (gss::Allocator **)v37;
                  v40 = *((_DWORD *)v37 + 7);
                  if (v36 >= v40)
                    break;
                  v37 = *v39;
                  v38 = v39;
                  if (!*v39)
                    goto LABEL_65;
                }
                if (v40 >= v36)
                  break;
                v37 = v39[1];
                if (!v37)
                {
                  v38 = v39 + 1;
                  goto LABEL_65;
                }
              }
              if (*((_DWORD *)v39 + 8) != v31)
                goto LABEL_57;
            }
            else
            {
LABEL_65:
              inited = (gss::Allocator *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v91 + 16))(v91, 40, 8);
              *((_DWORD *)inited + 7) = v36;
              *((_DWORD *)inited + 8) = 0;
              *(_QWORD *)inited = 0;
              *((_QWORD *)inited + 1) = 0;
              *((_QWORD *)inited + 2) = v39;
              *v38 = inited;
              if (*v89)
              {
                v89 = (gss::Allocator **)*v89;
                inited = *v38;
              }
              v41 = v90;
              v55 = inited == v90;
              *((_BYTE *)inited + 24) = inited == v90;
              if (!v55)
              {
                do
                {
                  v42 = *((_QWORD *)inited + 2);
                  if (*(_BYTE *)(v42 + 24))
                    break;
                  v43 = *(gss::Allocator **)(v42 + 16);
                  v44 = *(_QWORD *)v43;
                  if (*(_QWORD *)v43 == v42)
                  {
                    v47 = *((_QWORD *)v43 + 1);
                    if (!v47 || (v48 = *(unsigned __int8 *)(v47 + 24), v45 = (_BYTE *)(v47 + 24), v48))
                    {
                      if (*(gss::Allocator **)v42 == inited)
                      {
                        v49 = (uint64_t *)*((_QWORD *)inited + 2);
                      }
                      else
                      {
                        v49 = *(uint64_t **)(v42 + 8);
                        v50 = *v49;
                        *(_QWORD *)(v42 + 8) = *v49;
                        if (v50)
                        {
                          *(_QWORD *)(v50 + 16) = v42;
                          v43 = *(gss::Allocator **)(v42 + 16);
                        }
                        v49[2] = (uint64_t)v43;
                        *(_QWORD *)(*(_QWORD *)(v42 + 16) + 8 * (**(_QWORD **)(v42 + 16) != v42)) = v49;
                        *v49 = v42;
                        *(_QWORD *)(v42 + 16) = v49;
                        v43 = (gss::Allocator *)v49[2];
                        v42 = *(_QWORD *)v43;
                      }
                      *((_BYTE *)v49 + 24) = 1;
                      *((_BYTE *)v43 + 24) = 0;
                      v53 = *(_QWORD *)(v42 + 8);
                      *(_QWORD *)v43 = v53;
                      if (v53)
                        *(_QWORD *)(v53 + 16) = v43;
                      *(_QWORD *)(v42 + 16) = *((_QWORD *)v43 + 2);
                      *(_QWORD *)(*((_QWORD *)v43 + 2) + 8 * (**((_QWORD **)v43 + 2) != (_QWORD)v43)) = v42;
                      *(_QWORD *)(v42 + 8) = v43;
                      goto LABEL_96;
                    }
                  }
                  else if (!v44 || (v46 = *(unsigned __int8 *)(v44 + 24), v45 = (_BYTE *)(v44 + 24), v46))
                  {
                    if (*(gss::Allocator **)v42 == inited)
                    {
                      v51 = *((_QWORD *)inited + 1);
                      *(_QWORD *)v42 = v51;
                      if (v51)
                      {
                        *(_QWORD *)(v51 + 16) = v42;
                        v43 = *(gss::Allocator **)(v42 + 16);
                      }
                      *((_QWORD *)inited + 2) = v43;
                      *(_QWORD *)(*(_QWORD *)(v42 + 16) + 8 * (**(_QWORD **)(v42 + 16) != v42)) = inited;
                      *((_QWORD *)inited + 1) = v42;
                      *(_QWORD *)(v42 + 16) = inited;
                      v43 = (gss::Allocator *)*((_QWORD *)inited + 2);
                    }
                    else
                    {
                      inited = (gss::Allocator *)*((_QWORD *)inited + 2);
                    }
                    *((_BYTE *)inited + 24) = 1;
                    *((_BYTE *)v43 + 24) = 0;
                    v42 = *((_QWORD *)v43 + 1);
                    v52 = *(gss::Allocator **)v42;
                    *((_QWORD *)v43 + 1) = *(_QWORD *)v42;
                    if (v52)
                      *((_QWORD *)v52 + 2) = v43;
                    *(_QWORD *)(v42 + 16) = *((_QWORD *)v43 + 2);
                    *(_QWORD *)(*((_QWORD *)v43 + 2) + 8 * (**((_QWORD **)v43 + 2) != (_QWORD)v43)) = v42;
                    *(_QWORD *)v42 = v43;
LABEL_96:
                    *((_QWORD *)v43 + 2) = v42;
                    break;
                  }
                  *(_BYTE *)(v42 + 24) = 1;
                  inited = v43;
                  *((_BYTE *)v43 + 24) = v43 == v41;
                  *v45 = 1;
                }
                while (v43 != v41);
              }
              ++v92;
              if (v31)
                goto LABEL_57;
            }
            v54 = LOWORD(v88[1]);
            v55 = LOWORD(v88[1]) != 0xFFFFLL && BYTE4(v88[1]) == 0;
            if (v55 && LOWORD(v88[1]) >= WORD1(v88[1]))
            {
              inited = geo::intern_vector<std::shared_ptr<gss::ConditionalStyle<gss::PropertyID>>,geo::StdAllocator<std::shared_ptr<gss::ConditionalStyle<gss::PropertyID>>,gss::Allocator>>::reallocate(v88, LOWORD(v88[1]) + 1);
              v54 = LOWORD(v88[1]);
            }
            v57 = *v34;
            *((_OWORD *)v88[0] + v54) = *v34;
            if (*((_QWORD *)&v57 + 1))
            {
              v58 = (unint64_t *)(*((_QWORD *)&v57 + 1) + 8);
              do
                v59 = __ldxr(v58);
              while (__stxr(v59 + 1, v58));
              LOWORD(v54) = v88[1];
            }
            LOWORD(v88[1]) = v54 + 1;
LABEL_57:
            ++v31;
            if (++v34 == v35)
              goto LABEL_53;
          }
        }
LABEL_111:
        v60 = (_QWORD *)*((_QWORD *)v85 + 7);
        v61 = *((unsigned __int16 *)v85 + 32);
        v62 = LOWORD(v88[1]);
        if (WORD1(v88[1]) - (unint64_t)LOWORD(v88[1]) < v61)
        {
          v63 = LOWORD(v88[1]) + v61 > WORD1(v88[1]) && (LOWORD(v88[1]) + v61) >> 16 == 0;
          if (v63 && BYTE4(v88[1]) == 0)
          {
            inited = geo::intern_vector<std::shared_ptr<gss::ConditionalStyle<gss::PropertyID>>,geo::StdAllocator<std::shared_ptr<gss::ConditionalStyle<gss::PropertyID>>,gss::Allocator>>::reallocate(v88, LOWORD(v88[1]) + v61);
            v62 = LOWORD(v88[1]);
          }
        }
        if ((_DWORD)v61)
        {
          v65 = &v60[2 * v61];
          v66 = (_QWORD *)((char *)v88[0] + 16 * v62);
          do
          {
            *v66 = *v60;
            v67 = v60[1];
            v66[1] = v67;
            if (v67)
            {
              v68 = (unint64_t *)(v67 + 8);
              do
                v69 = __ldxr(v68);
              while (__stxr(v69 + 1, v68));
            }
            v60 += 2;
            v66 += 2;
          }
          while (v60 != v65);
          LOWORD(v62) = v88[1];
        }
        v70 = v62 + v61;
        LOWORD(v88[1]) = v70;
        if (!BYTE4(v88[1]) && WORD1(v88[1]) != v70)
          inited = geo::intern_vector<std::shared_ptr<gss::ConditionalStyle<gss::PropertyID>>,geo::StdAllocator<std::shared_ptr<gss::ConditionalStyle<gss::PropertyID>>,gss::Allocator>>::reallocate(v88, v70);
        v71 = (uint64_t *)((char *)v85 + 56);
        if ((gss::Allocator **)((char *)v85 + 56) == v88)
        {
          v77 = BYTE4(v88[1]);
          *((_BYTE *)v85 + 120) = 1;
          if (!v77)
          {
            v78 = v88[0];
            if (v88[0])
            {
              if (LOWORD(v88[1]))
              {
                v79 = (gss::Allocator *)((char *)v88[0] + 16 * LOWORD(v88[1]));
                do
                {
                  v80 = (std::__shared_weak_count *)*((_QWORD *)v78 + 1);
                  if (v80)
                  {
                    p_shared_owners = (unint64_t *)&v80->__shared_owners_;
                    do
                      v82 = __ldaxr(p_shared_owners);
                    while (__stlxr(v82 - 1, p_shared_owners));
                    if (!v82)
                    {
                      ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
                      std::__shared_weak_count::__release_weak(v80);
                    }
                  }
                  v78 = (gss::Allocator *)((char *)v78 + 16);
                }
                while (v78 != v79);
              }
              v84 = gss::Allocator::instance(inited);
              (*(void (**)(uint64_t, gss::Allocator *, uint64_t))(*(_QWORD *)v84 + 40))(v84, v88[0], 16 * WORD1(v88[1]));
            }
          }
        }
        else
        {
          if (!*((_BYTE *)v85 + 68))
          {
            v72 = *v71;
            if (*v71)
            {
              if (*((_WORD *)v85 + 32))
              {
                v73 = v72 + 16 * *((unsigned __int16 *)v85 + 32);
                do
                {
                  v74 = *(std::__shared_weak_count **)(v72 + 8);
                  if (v74)
                  {
                    v75 = (unint64_t *)&v74->__shared_owners_;
                    do
                      v76 = __ldaxr(v75);
                    while (__stlxr(v76 - 1, v75));
                    if (!v76)
                    {
                      ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
                      std::__shared_weak_count::__release_weak(v74);
                    }
                  }
                  v72 += 16;
                }
                while (v72 != v73);
              }
              v83 = gss::Allocator::instance(inited);
              (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v83 + 40))(v83, *((_QWORD *)v85 + 7), 16 * *((unsigned __int16 *)v85 + 33));
            }
          }
          *((gss::Allocator **)v85 + 7) = v88[0];
          *((_DWORD *)v85 + 16) = v88[1];
          *((_BYTE *)v85 + 68) = BYTE4(v88[1]);
          *((_BYTE *)v85 + 120) = 1;
        }
      }
    }
    return (gss::Allocator *)std::__tree<std::__value_type<unsigned int,gss::PropertySize>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,gss::PropertySize>,std::less<unsigned int>,true>,geo::StdAllocator<std::__value_type<unsigned int,gss::PropertySize>,gss::Allocator>>::destroy((uint64_t)&v89, v90);
  }
  return result;
}

void sub_19F0E1D8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, _QWORD *a16)
{
  geo::intern_vector<std::shared_ptr<gss::ConditionalStyle<gss::PropertyID>>,geo::StdAllocator<std::shared_ptr<gss::ConditionalStyle<gss::PropertyID>>,gss::Allocator>>::~intern_vector(&a13);
  std::__tree<std::__value_type<unsigned int,gss::PropertySize>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,gss::PropertySize>,std::less<unsigned int>,true>,geo::StdAllocator<std::__value_type<unsigned int,gss::PropertySize>,gss::Allocator>>::destroy((uint64_t)&a15, a16);
  _Unwind_Resume(a1);
}

void gss::make_shared<gss::ConditionalStyle<gss::ScenePropertyID>,geo::intern_vector<gss::StyleCondition,geo::StdAllocator<gss::StyleCondition,gss::Allocator>>>(gss::Allocator *a1, uint64_t *a2)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  uint64_t *v7;
  std::__shared_weak_count *v8;
  unint64_t v9;
  unint64_t *p_shared_weak_owners;
  unint64_t v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;

  v4 = gss::Allocator::instance(a1);
  v5 = (std::__shared_weak_count *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v4 + 16))(v4, 192, 8);
  v5->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  v5->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E5B20;
  v5->__shared_weak_owners_ = 0;
  v5[1].__vftable = (std::__shared_weak_count_vtbl *)v4;
  v5[1].__shared_owners_ = (uint64_t)&off_1E42C28A8;
  v7 = &v5[1].__shared_owners_;
  v5[2].__vftable = 0;
  v5[2].__shared_owners_ = 0;
  v5[1].__shared_weak_owners_ = 0;
  *(uint64_t *)((char *)&v5[2].__shared_owners_ + 5) = 0;
  v5[3].__vftable = 0;
  *(std::__shared_weak_count_vtbl **)((char *)&v5[3].__vftable + 5) = 0;
  v5[3].__shared_weak_owners_ = 0;
  *(uint64_t *)((char *)&v5[3].__shared_weak_owners_ + 5) = 0;
  *(_OWORD *)&v5[4].__shared_owners_ = 0u;
  v5[5].std::__shared_count = 0u;
  v5[5].__shared_weak_owners_ = 0;
  LODWORD(v5[6].__shared_owners_) = 0;
  atomic_store(0, (unsigned __int8 *)&v5[6].__shared_owners_ + 2);
  v5[1].__shared_owners_ = (uint64_t)&off_1E42C29A8;
  *(uint64_t *)((char *)&v5[6].__shared_weak_owners_ + 5) = 0;
  v5[6].__shared_weak_owners_ = 0;
  geo::intern_vector<gss::StyleCondition,geo::StdAllocator<gss::StyleCondition,gss::Allocator>>::copy((uint64_t)&v5[6].__shared_weak_owners_, a2);
  v5[7].__shared_owners_ = 0;
  v5[7].__shared_weak_owners_ = 0;
  *(_QWORD *)a1 = (char *)v5 + 32;
  *((_QWORD *)a1 + 1) = v5;
  v8 = (std::__shared_weak_count *)v5[2].__vftable;
  if (v8)
  {
    if (v8->__shared_owners_ != -1)
      return;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
    p_shared_weak_owners = (unint64_t *)&v5->__shared_weak_owners_;
    do
      v11 = __ldxr(p_shared_weak_owners);
    while (__stxr(v11 + 1, p_shared_weak_owners));
    v5[1].__shared_weak_owners_ = (uint64_t)v7;
    v5[2].__vftable = (std::__shared_weak_count_vtbl *)v5;
    std::__shared_weak_count::__release_weak(v8);
  }
  else
  {
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
    v13 = (unint64_t *)&v5->__shared_weak_owners_;
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
    v5[1].__shared_weak_owners_ = (uint64_t)v7;
    v5[2].__vftable = (std::__shared_weak_count_vtbl *)v5;
  }
  do
    v15 = __ldaxr(p_shared_owners);
  while (__stlxr(v15 - 1, p_shared_owners));
  if (!v15)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
}

void sub_19F0E1F40(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  uint64_t v2;
  uint64_t v3;

  gss::CartoStyle<gss::ScenePropertyID>::~CartoStyle(v2);
  std::__shared_weak_count::~__shared_weak_count(v1);
  (*(void (**)(uint64_t, std::__shared_weak_count *, uint64_t))(*(_QWORD *)v3 + 40))(v3, v1, 192);
  _Unwind_Resume(a1);
}

void gss::make_shared<gss::ConditionalStyle<gss::PropertyID>,geo::intern_vector<gss::StyleCondition,geo::StdAllocator<gss::StyleCondition,gss::Allocator>>>(gss::Allocator *a1, uint64_t *a2)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  uint64_t *v7;
  std::__shared_weak_count *v8;
  unint64_t v9;
  unint64_t *p_shared_weak_owners;
  unint64_t v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;

  v4 = gss::Allocator::instance(a1);
  v5 = (std::__shared_weak_count *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v4 + 16))(v4, 192, 8);
  v5->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  v5->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E5AE8;
  v5->__shared_weak_owners_ = 0;
  v5[1].__vftable = (std::__shared_weak_count_vtbl *)v4;
  v5[1].__shared_owners_ = (uint64_t)&off_1E42C2880;
  v7 = &v5[1].__shared_owners_;
  v5[2].__vftable = 0;
  v5[2].__shared_owners_ = 0;
  v5[1].__shared_weak_owners_ = 0;
  *(uint64_t *)((char *)&v5[2].__shared_owners_ + 5) = 0;
  v5[3].__vftable = 0;
  *(std::__shared_weak_count_vtbl **)((char *)&v5[3].__vftable + 5) = 0;
  v5[3].__shared_weak_owners_ = 0;
  *(uint64_t *)((char *)&v5[3].__shared_weak_owners_ + 5) = 0;
  *(_OWORD *)&v5[4].__shared_owners_ = 0u;
  v5[5].std::__shared_count = 0u;
  v5[5].__shared_weak_owners_ = 0;
  LODWORD(v5[6].__shared_owners_) = 0;
  atomic_store(0, (unsigned __int8 *)&v5[6].__shared_owners_ + 2);
  v5[1].__shared_owners_ = (uint64_t)&off_1E42C2980;
  *(uint64_t *)((char *)&v5[6].__shared_weak_owners_ + 5) = 0;
  v5[6].__shared_weak_owners_ = 0;
  geo::intern_vector<gss::StyleCondition,geo::StdAllocator<gss::StyleCondition,gss::Allocator>>::copy((uint64_t)&v5[6].__shared_weak_owners_, a2);
  v5[7].__shared_owners_ = 0;
  v5[7].__shared_weak_owners_ = 0;
  *(_QWORD *)a1 = (char *)v5 + 32;
  *((_QWORD *)a1 + 1) = v5;
  v8 = (std::__shared_weak_count *)v5[2].__vftable;
  if (v8)
  {
    if (v8->__shared_owners_ != -1)
      return;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
    p_shared_weak_owners = (unint64_t *)&v5->__shared_weak_owners_;
    do
      v11 = __ldxr(p_shared_weak_owners);
    while (__stxr(v11 + 1, p_shared_weak_owners));
    v5[1].__shared_weak_owners_ = (uint64_t)v7;
    v5[2].__vftable = (std::__shared_weak_count_vtbl *)v5;
    std::__shared_weak_count::__release_weak(v8);
  }
  else
  {
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
    v13 = (unint64_t *)&v5->__shared_weak_owners_;
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
    v5[1].__shared_weak_owners_ = (uint64_t)v7;
    v5[2].__vftable = (std::__shared_weak_count_vtbl *)v5;
  }
  do
    v15 = __ldaxr(p_shared_owners);
  while (__stlxr(v15 - 1, p_shared_owners));
  if (!v15)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
}

void sub_19F0E20F0(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  uint64_t v2;
  uint64_t v3;

  gss::CartoStyle<gss::PropertyID>::~CartoStyle(v2);
  std::__shared_weak_count::~__shared_weak_count(v1);
  (*(void (**)(uint64_t, std::__shared_weak_count *, uint64_t))(*(_QWORD *)v3 + 40))(v3, v1, 192);
  _Unwind_Resume(a1);
}

uint64_t geo::intern_vector<gss::StyleCondition,geo::StdAllocator<gss::StyleCondition,gss::Allocator>>::copy(uint64_t result, uint64_t *a2)
{
  unsigned __int16 *v3;
  uint64_t v4;
  _BYTE *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int *v17;
  unsigned __int16 v18;

  v3 = (unsigned __int16 *)result;
  if (!*(_BYTE *)(result + 12) && *(_QWORD *)result)
  {
    if (*(_WORD *)(result + 8))
    {
      v4 = 24 * *(unsigned __int16 *)(result + 8);
      v5 = (_BYTE *)(*(_QWORD *)result + 20);
      do
      {
        v6 = v5 - 12;
        if (!*v5 && *v6)
        {
          v7 = gss::Allocator::instance((gss::Allocator *)result);
          result = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v7 + 40))(v7, *(_QWORD *)(v5 - 12), 4 * *((unsigned __int16 *)v5 - 1));
        }
        *(_QWORD *)(v5 - 7) = 0;
        *v6 = 0;
        v5 += 24;
        v4 -= 24;
      }
      while (v4);
    }
    v8 = gss::Allocator::instance((gss::Allocator *)result);
    result = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v8 + 40))(v8, *(_QWORD *)v3, 24 * v3[5]);
  }
  *(_QWORD *)((char *)v3 + 5) = 0;
  *(_QWORD *)v3 = 0;
  v9 = *a2;
  if (*((_BYTE *)a2 + 12))
  {
    *(_QWORD *)v3 = v9;
    *((_DWORD *)v3 + 2) = *((_DWORD *)a2 + 2);
    *((_BYTE *)v3 + 12) = 1;
  }
  else
  {
    v10 = *((unsigned __int16 *)a2 + 4);
    if (*((_WORD *)a2 + 4))
    {
      v11 = gss::Allocator::instance((gss::Allocator *)result);
      v12 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v11 + 16))(v11, 24 * v10, 8);
      if (*(_QWORD *)v3)
        geo::intern_vector<std::pair<unsigned int,geo::intern_vector<unsigned int,geo::StdAllocator<unsigned int,gss::Allocator>>>,geo::StdAllocator<std::pair<unsigned int,geo::intern_vector<unsigned int,geo::StdAllocator<unsigned int,gss::Allocator>>>,gss::Allocator>>::moveContent((gss::Allocator *)v3, v12);
      v13 = 0;
      v3[5] = v10;
      *(_QWORD *)v3 = v12;
      v14 = v12 + 24 * v3[4];
      do
      {
        v15 = v9 + v13;
        v16 = v14 + v13;
        *(_DWORD *)v16 = *(_DWORD *)(v9 + v13);
        *(_QWORD *)(v14 + v13 + 8) = 0;
        result = v14 + v13 + 8;
        *(_QWORD *)(v16 + 13) = 0;
        v17 = *(int **)(v9 + v13 + 8);
        if (*(_BYTE *)(v9 + v13 + 20))
        {
          *(_QWORD *)result = v17;
          *(_DWORD *)(v16 + 16) = *(_DWORD *)(v15 + 16);
          *(_BYTE *)(v16 + 20) = 1;
        }
        else
        {
          result = geo::intern_vector<unsigned int,geo::StdAllocator<unsigned int,gss::Allocator>>::append<unsigned int *>(result, v17, (char *)&v17[*(unsigned __int16 *)(v15 + 16)]);
        }
        v13 += 24;
      }
      while (v15 + 24 != v9 + 24 * v10);
      v18 = v3[4];
    }
    else
    {
      v18 = 0;
    }
    v3[4] = v18 + v10;
  }
  return result;
}

_QWORD *gms::BasicMaterial<ggl::Texture2D>::minHideOnCollapse@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>, __n128 a3@<Q0>)
{
  float v3;
  uint64_t v6;
  _QWORD *result;
  char v8;
  char v9;
  uint64_t v10;

  v3 = a3.n128_f32[0];
  v6 = *(_QWORD *)(a1 + 16);
  if (v6)
  {
    (*(void (**)(char *__return_ptr, __n128))(*(_QWORD *)v6 + 576))((char *)&v10 + 2, a3);
    result = *(_QWORD **)(a1 + 32);
    if (result)
      goto LABEL_3;
  }
  else
  {
    BYTE2(v10) = 0;
    result = *(_QWORD **)(a1 + 32);
    if (result)
    {
LABEL_3:
      result = (*(_QWORD *(**)(uint64_t *__return_ptr, float))(*result + 576))(&v10, v3);
      if (BYTE2(v10))
        goto LABEL_4;
LABEL_10:
      *a2 = 0;
      if (!(_BYTE)v10)
        return result;
      v9 = BYTE1(v10);
      goto LABEL_13;
    }
  }
  LOBYTE(v10) = 0;
  if (!BYTE2(v10))
    goto LABEL_10;
LABEL_4:
  if (!(_BYTE)v10)
  {
    v9 = BYTE3(v10);
LABEL_13:
    a2[1] = v9;
    *a2 = 1;
    return result;
  }
  v8 = BYTE1(v10);
  if (BYTE1(v10) >= BYTE3(v10))
    v8 = BYTE3(v10);
  *a2 = 1;
  a2[1] = v8;
  return result;
}

uint64_t gms::_BasicMaterial<ggl::Texture2D>::hideOnCollapse@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t (***v3)(_QWORD);
  uint64_t result;

  v3 = *(uint64_t (****)(_QWORD))(a1 + 216);
  if (v3)
    return (**v3)(v3);
  result = *(_QWORD *)(a1 + 72);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 576))(result);
  *a2 = 0;
  return result;
}

void grl::IconManager::imageForKeyValue(uint64_t a1@<X0>, unsigned int a2@<W1>, int a3@<W2>, const grl::IconModifiers *a4@<X3>, float *a5@<X4>, _DWORD *a6@<X5>, _QWORD *a7@<X8>)
{
  int v9;
  grl::Allocator *v13;
  unsigned int v14;
  int *v15;
  int *v16;
  int v17;
  int v18;
  unsigned int v19;
  unsigned int v20;
  grl::IconModifiers *v21;
  NSObject *v22;
  int v23;
  NSObject *v24;
  std::__shared_weak_count *v25;
  unint64_t *p_shared_owners;
  unint64_t v27;
  int *v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  char *v32;
  int *v33;
  int *v34;
  int v35;
  char *v36;
  NSObject *v37;
  unsigned int v38;
  uint64_t v39;
  _QWORD *v40;
  int *__p;
  int *v43;
  int *v44;
  _QWORD **v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  std::__shared_weak_count *v50;
  IconModifiers buf;
  _QWORD v52[10];

  v9 = a3;
  v52[8] = *MEMORY[0x1E0C80C00];
  v13 = (grl::Allocator *)grl::IconManager::identifierForMapKeyValue(a1, a2, a3, 1, ceilf(*a5));
  v14 = v13;
  if (a6)
    *a6 = (_DWORD)v13;
  if ((_DWORD)v13)
  {
    v15 = (int *)*((_QWORD *)a4 + 15);
    v16 = (int *)*((_QWORD *)a4 + 16);
    if (v15 == v16)
      goto LABEL_58;
    v38 = v13;
    v39 = (uint64_t)a6;
    v40 = a7;
    v17 = 0;
    __p = 0;
    v43 = 0;
    v44 = 0;
    while (1)
    {
      v18 = *v15;
      v19 = grl::IconManager::identifierForMapKeyValue(a1, a2, *v15, 1, ceilf(*a5));
      if (v19)
      {
        v20 = v19;
        v21 = grl::IconModifiers::IconModifiers((grl::IconModifiers *)&buf, a4);
        buf._isInfoOnly = 1;
        v46 = 0;
        v47 = grl::Allocator::instance(v21);
        v48 = 0;
        v45 = &v46;
        grl::IconManager::imageForIconID(a1, v20, &buf, (uint64_t)a5, &v45, 0, &v49);
        std::__tree<std::__value_type<unsigned short,grl::ImageData>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,grl::ImageData>,std::less<unsigned short>,true>,geo::StdAllocator<std::__value_type<unsigned short,grl::ImageData>,grl::Allocator>>::destroy((uint64_t)&v45, v46);
        if (v49)
        {
          if (*(_BYTE *)(v49 + 153))
          {
            v9 = *(_DWORD *)(v49 + 154);
            v17 = 1;
          }
          else
          {
            v17 = 0;
          }
          v23 = 1;
        }
        else
        {
          v23 = 0;
        }
        v25 = v50;
        if (v50)
        {
          p_shared_owners = (unint64_t *)&v50->__shared_owners_;
          do
            v27 = __ldaxr(p_shared_owners);
          while (__stlxr(v27 - 1, p_shared_owners));
          if (!v27)
          {
            ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
            std::__shared_weak_count::__release_weak(v25);
          }
        }
        grl::IconModifiers::~IconModifiers((grl::IconModifiers *)&buf);
        if (!v17)
          goto LABEL_15;
      }
      else
      {
        if (GEOGetGeoResourceLibIconManagerLog::onceToken != -1)
          dispatch_once(&GEOGetGeoResourceLibIconManagerLog::onceToken, &__block_literal_global_1);
        v22 = GEOGetGeoResourceLibIconManagerLog::log;
        if (os_log_type_enabled((os_log_t)GEOGetGeoResourceLibIconManagerLog::log, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)&buf._isClusterIcon = 67109376;
          *(_DWORD *)&buf._isMirrored = a2;
          LOWORD(buf._opacity) = 1024;
          *(_DWORD *)((char *)&buf._opacity + 2) = v18;
          _os_log_impl(&dword_19F029000, v22, OS_LOG_TYPE_ERROR, "Failed to find Icon ID for key: %i - value: %i", (uint8_t *)&buf, 0xEu);
        }
        v23 = 0;
        if (!v17)
        {
LABEL_15:
          if (GEOGetGeoResourceLibIconManagerLog::onceToken != -1)
            dispatch_once(&GEOGetGeoResourceLibIconManagerLog::onceToken, &__block_literal_global_1);
          v24 = GEOGetGeoResourceLibIconManagerLog::log;
          if (os_log_type_enabled((os_log_t)GEOGetGeoResourceLibIconManagerLog::log, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)&buf._isClusterIcon = 67109376;
            *(_DWORD *)&buf._isMirrored = a2;
            LOWORD(buf._opacity) = 1024;
            *(_DWORD *)((char *)&buf._opacity + 2) = v18;
            _os_log_impl(&dword_19F029000, v24, OS_LOG_TYPE_ERROR, "Failed to find clustercolor for key: %i - value: %i", (uint8_t *)&buf, 0xEu);
          }
          goto LABEL_45;
        }
      }
      if (v43 >= v44)
      {
        v29 = v43 - __p;
        if ((unint64_t)(v29 + 1) >> 62)
          abort();
        v30 = ((char *)v44 - (char *)__p) >> 1;
        if (v30 <= v29 + 1)
          v30 = v29 + 1;
        if ((unint64_t)((char *)v44 - (char *)__p) >= 0x7FFFFFFFFFFFFFFCLL)
          v31 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v31 = v30;
        if (v31)
          v32 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned int>>((uint64_t)&v44, v31);
        else
          v32 = 0;
        v33 = (int *)&v32[4 * v29];
        *v33 = v9;
        v28 = v33 + 1;
        v34 = v43;
        if (v43 != __p)
        {
          do
          {
            v35 = *--v34;
            *--v33 = v35;
          }
          while (v34 != __p);
          v34 = __p;
        }
        __p = v33;
        v44 = (int *)&v32[4 * v31];
        if (v34)
          operator delete(v34);
      }
      else
      {
        *v43 = v9;
        v28 = v43 + 1;
      }
      v43 = v28;
LABEL_45:
      if (v23)
        v17 = 0;
      if (++v15 == v16)
      {
        v13 = (grl::Allocator *)__p;
        if (__p != v43)
        {
          grl::IconModifiers::IconModifiers((grl::IconModifiers *)&buf, a4);
          v36 = std::vector<geo::Color<unsigned char,4,(geo::ColorSpace)2>>::__assign_with_size[abi:nn180100]<geo::Color<unsigned char,4,(geo::ColorSpace)2>*,geo::Color<unsigned char,4,(geo::ColorSpace)2>*>(v52, __p, v43, v43 - __p);
          v46 = 0;
          v47 = grl::Allocator::instance((grl::Allocator *)v36);
          v48 = 0;
          v45 = &v46;
          grl::IconManager::imageForIconID(a1, v38, &buf, (uint64_t)a5, &v45, v39, v40);
          std::__tree<std::__value_type<unsigned short,grl::ImageData>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,grl::ImageData>,std::less<unsigned short>,true>,geo::StdAllocator<std::__value_type<unsigned short,grl::ImageData>,grl::Allocator>>::destroy((uint64_t)&v45, v46);
          grl::IconModifiers::~IconModifiers((grl::IconModifiers *)&buf);
          if (__p)
            operator delete(__p);
          return;
        }
        a6 = (_DWORD *)v39;
        a7 = v40;
        v14 = v38;
        if (__p)
          operator delete(__p);
LABEL_58:
        *(_QWORD *)&buf._opacity = 0;
        *(_QWORD *)&buf._pathScale._hasValue = grl::Allocator::instance(v13);
        buf._pathScale._value.type = 0.0;
        *(_QWORD *)&buf._isClusterIcon = &buf._opacity;
        grl::IconManager::imageForIconID(a1, v14, (IconModifiers *)a4, (uint64_t)a5, &buf, (uint64_t)a6, a7);
        std::__tree<std::__value_type<unsigned short,grl::ImageData>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,grl::ImageData>,std::less<unsigned short>,true>,geo::StdAllocator<std::__value_type<unsigned short,grl::ImageData>,grl::Allocator>>::destroy((uint64_t)&buf, *(_QWORD **)&buf._opacity);
        return;
      }
    }
  }
  if (GEOGetGeoResourceLibIconManagerLog::onceToken != -1)
    dispatch_once(&GEOGetGeoResourceLibIconManagerLog::onceToken, &__block_literal_global_1);
  v37 = GEOGetGeoResourceLibIconManagerLog::log;
  if (os_log_type_enabled((os_log_t)GEOGetGeoResourceLibIconManagerLog::log, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)&buf._isClusterIcon = 67109376;
    *(_DWORD *)&buf._isMirrored = a2;
    LOWORD(buf._opacity) = 1024;
    *(_DWORD *)((char *)&buf._opacity + 2) = v9;
    _os_log_impl(&dword_19F029000, v37, OS_LOG_TYPE_ERROR, "Failed to find Icon ID for key: %i - value: %i", (uint8_t *)&buf, 0xEu);
  }
  *a7 = 0;
  a7[1] = 0;
}

uint64_t grl::IconManager::identifierForMapKeyValue(uint64_t a1, unsigned int a2, int a3, int a4, float a5)
{
  float v8;
  std::__shared_weak_count *v9;
  uint64_t v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  const char *v26;
  NSObject *v27;
  uint32_t v28;
  uint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  void *__p[2];
  char v34;
  float v35;
  unsigned int v36;
  uint8_t buf[8];
  std::__shared_weak_count *v38;
  double v39;
  uint64_t v40;

  v40 = *MEMORY[0x1E0C80C00];
  v36 = a2;
  v8 = ceilf(a5);
  std::string::basic_string[abi:nn180100]<0>(__p, "Default");
  v35 = v8;
  grl::IconManager::retrieveResourcePack(buf, a1, (const void **)__p, 2);
  v10 = *(_QWORD *)buf;
  v9 = v38;
  if (!v38)
    goto LABEL_6;
  p_shared_owners = (unint64_t *)&v38->__shared_owners_;
  do
    v12 = __ldxr(p_shared_owners);
  while (__stxr(v12 + 1, p_shared_owners));
  do
    v13 = __ldaxr(p_shared_owners);
  while (__stlxr(v13 - 1, p_shared_owners));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
    if (v10)
      goto LABEL_7;
  }
  else
  {
LABEL_6:
    if (v10)
    {
LABEL_7:
      v14 = v9;
      goto LABEL_22;
    }
  }
  grl::IconManager::loadGlobalResourcePack(buf, a1, (uint64_t)__p);
  v10 = *(_QWORD *)buf;
  v14 = v38;
  if (v38)
  {
    v15 = (unint64_t *)&v38->__shared_owners_;
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }
  if (v9)
  {
    v17 = (unint64_t *)&v9->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  v19 = v38;
  if (!v38)
    goto LABEL_21;
  v20 = (unint64_t *)&v38->__shared_owners_;
  do
    v21 = __ldaxr(v20);
  while (__stlxr(v21 - 1, v20));
  if (v21)
  {
LABEL_21:
    if (v10)
      goto LABEL_22;
LABEL_35:
    if (GEOGetGeoResourceLibIconManagerLog::onceToken != -1)
      dispatch_once(&GEOGetGeoResourceLibIconManagerLog::onceToken, &__block_literal_global_1);
    v29 = GEOGetGeoResourceLibIconManagerLog::log;
    if (!os_log_type_enabled((os_log_t)GEOGetGeoResourceLibIconManagerLog::log, OS_LOG_TYPE_ERROR))
      goto LABEL_40;
    *(_DWORD *)buf = 67109376;
    *(_DWORD *)&buf[4] = v36;
    LOWORD(v38) = 1024;
    *(_DWORD *)((char *)&v38 + 2) = a3;
    v26 = "Failed to find map pack key: %i - value: %i";
    v27 = v29;
    v28 = 14;
    goto LABEL_39;
  }
  ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
  std::__shared_weak_count::__release_weak(v19);
  if (!v10)
    goto LABEL_35;
LABEL_22:
  *(_DWORD *)buf = v36;
  *(_DWORD *)&buf[4] = a3;
  v22 = std::__hash_table<std::__hash_value_type<grl::codec::IconMapKeyValue,unsigned int>,std::__unordered_map_hasher<grl::codec::IconMapKeyValue,std::__hash_value_type<grl::codec::IconMapKeyValue,unsigned int>,std::hash<grl::codec::IconMapKeyValue>,std::equal_to<grl::codec::IconMapKeyValue>,true>,std::__unordered_map_equal<grl::codec::IconMapKeyValue,std::__hash_value_type<grl::codec::IconMapKeyValue,unsigned int>,std::equal_to<grl::codec::IconMapKeyValue>,std::hash<grl::codec::IconMapKeyValue>,true>,geo::StdAllocator<std::__hash_value_type<grl::codec::IconMapKeyValue,unsigned int>,grl::Allocator>>::find<grl::codec::IconMapKeyValue>((_QWORD *)(v10 + 40), (unsigned int *)buf);
  if (v22)
  {
    v23 = *((unsigned int *)v22 + 6);
    if (!a4)
      goto LABEL_29;
  }
  else
  {
    v23 = 0;
    if (!a4)
      goto LABEL_29;
  }
  if (!(_DWORD)v23)
  {
    v24 = std::__hash_table<std::__hash_value_type<unsigned int,unsigned int>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,geo::StdAllocator<std::__hash_value_type<unsigned int,unsigned int>,grl::Allocator>>::find<unsigned int>((_QWORD *)(v10 + 392), &v36);
    if (!v24)
    {
LABEL_30:
      if (GEOGetGeoResourceLibIconManagerLog::onceToken != -1)
        dispatch_once(&GEOGetGeoResourceLibIconManagerLog::onceToken, &__block_literal_global_1);
      v25 = GEOGetGeoResourceLibIconManagerLog::log;
      if (!os_log_type_enabled((os_log_t)GEOGetGeoResourceLibIconManagerLog::log, OS_LOG_TYPE_ERROR))
        goto LABEL_40;
      *(_DWORD *)buf = 67109632;
      *(_DWORD *)&buf[4] = v36;
      LOWORD(v38) = 1024;
      *(_DWORD *)((char *)&v38 + 2) = a3;
      HIWORD(v38) = 2048;
      v39 = v8;
      v26 = "Failed to find ID for Map Value\nKey: %i - Value: %i - Content Scale: %f";
      v27 = v25;
      v28 = 24;
LABEL_39:
      _os_log_impl(&dword_19F029000, v27, OS_LOG_TYPE_ERROR, v26, buf, v28);
LABEL_40:
      v23 = 0;
      goto LABEL_41;
    }
    v23 = *((unsigned int *)v24 + 5);
  }
LABEL_29:
  if (!(_DWORD)v23)
    goto LABEL_30;
LABEL_41:
  if (v14)
  {
    v30 = (unint64_t *)&v14->__shared_owners_;
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  if (v34 < 0)
    operator delete(__p[0]);
  return v23;
}

uint64_t **grl::IconManager::imageForIconID@<X0>(uint64_t a1@<X0>, unsigned int a2@<W1>, IconModifiers *a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X4>, uint64_t a6@<X5>, _QWORD *a7@<X8>)
{
  IconModifiers *v10;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t *v18;
  __int128 *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  std::string *v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  __int128 *v36;
  std::string *v37;
  std::string *v38;
  std::string *v39;
  std::string *v40;
  __int128 v41;
  std::string *v42;
  uint64_t v43;
  __int128 *v44;
  __int128 v45;
  std::string *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  std::string *v50;
  __int128 v51;
  uint64_t v52;
  std::string *v53;
  uint64_t v54;
  uint64_t v55;
  __int128 v56;
  uint64_t v57;
  std::string *v58;
  __int128 v59;
  uint64_t *v60;
  uint64_t v61;
  unint64_t *p_shared_owners;
  uint64_t v64;
  _QWORD *v65;
  uint64_t v66;
  _QWORD *v67;
  uint64_t *v69;
  std::__shared_weak_count *v70;
  uint64_t *v71;
  _QWORD v72[2];
  unsigned int v73;
  __int16 v74;
  __int16 v75;
  char v76;
  uint64_t *v77;
  std::__shared_weak_count *v78;
  std::string *v79;
  uint64_t v80;
  uint64_t *v81;

  v10 = a3;
  v13 = *(unsigned __int16 *)(a4 + 6);
  v14 = *(unsigned __int16 *)(a4 + 8);
  v15 = *(unsigned __int8 *)(a4 + 4);
  v73 = a2;
  v74 = v13;
  v75 = v14;
  v76 = v15;
  v16 = (((a2 - 0x61C8864680B583EBLL) << 6)
       + (((unint64_t)a2 - 0x61C8864680B583EBLL) >> 2)
       + v13
       - 0x61C8864680B583EBLL) ^ (a2 - 0x61C8864680B583EBLL);
  v17 = (v14 + (v16 << 6) + (v16 >> 2) - 0x61C8864680B583EBLL) ^ v16;
  v72[0] = &off_1E42C2848;
  v72[1] = (v15 + (v17 << 6) + (v17 >> 2) - 0x61C8864680B583EBLL) ^ v17;
  v71 = 0;
  if (*(_BYTE *)(a4 + 12))
  {
    v67 = a7;
    (*(void (**)(uint64_t **__return_ptr, _QWORD, _QWORD, uint64_t))(**(_QWORD **)(a1 + 8) + 32))(&v69, *(_QWORD *)(a1 + 8), 0, 1);
    geo::make_unique<std::vector<std::string,geo::StdAllocator<std::string,grl::Allocator>>,std::vector<std::string,geo::StdAllocator<std::string,grl::Allocator>> const&>(&v77, (uint64_t *)(a4 + 16));
    v18 = v77;
    v77 = 0;
    std::unique_ptr<std::vector<std::string,geo::StdAllocator<std::string,grl::Allocator>>>::reset[abi:nn180100](&v71, v18);
    std::unique_ptr<std::vector<std::string,geo::StdAllocator<std::string,grl::Allocator>>>::reset[abi:nn180100](&v77, 0);
    v20 = *v69;
    v19 = (__int128 *)v69[1];
    v21 = (uint64_t)v19 - *v69;
    if (v21 >= 1)
    {
      v65 = a5;
      v66 = a6;
      v22 = v71;
      v23 = v21 / 24;
      v24 = v71[1];
      v25 = (uint64_t)(v24 - *v71) / 24;
      v26 = (std::string *)(*v71 + 24 * v25);
      v27 = v71[2];
      if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v27 - v24) >> 3)) < v21 / 24)
      {
        if ((unint64_t)(v25 + v23) > 0xAAAAAAAAAAAAAAALL)
          abort();
        v28 = 0xAAAAAAAAAAAAAAABLL * ((v27 - *v71) >> 3);
        v29 = 2 * v28;
        if (2 * v28 <= v25 + v23)
          v29 = v25 + v23;
        if (v28 >= 0x555555555555555)
          v30 = 0xAAAAAAAAAAAAAAALL;
        else
          v30 = v29;
        v81 = v71 + 3;
        if (v30)
          v31 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v71[3] + 16))(v71[3], 24 * v30, 8);
        else
          v31 = 0;
        v64 = v31;
        v46 = (std::string *)(v31 + 24 * v25);
        v47 = 3 * v23;
        v48 = (uint64_t)&v46[v23];
        v49 = 8 * v47;
        v50 = v46;
        do
        {
          if (v50)
          {
            if (*(char *)(v20 + 23) < 0)
            {
              std::string::__init_copy_ctor_external(v50, *(const std::string::value_type **)v20, *(_QWORD *)(v20 + 8));
            }
            else
            {
              v51 = *(_OWORD *)v20;
              v50->__r_.__value_.__r.__words[2] = *(_QWORD *)(v20 + 16);
              *(_OWORD *)&v50->__r_.__value_.__l.__data_ = v51;
            }
          }
          ++v50;
          v20 += 24;
          v49 -= 24;
        }
        while (v49);
        v52 = *v22;
        if ((std::string *)*v22 == v26)
        {
          v55 = (uint64_t)v46;
          v54 = v64;
        }
        else
        {
          v53 = v26;
          v54 = v64;
          do
          {
            v55 = (uint64_t)&v46[-1];
            v56 = *(_OWORD *)&v53[-1].__r_.__value_.__l.__data_;
            v46[-1].__r_.__value_.__r.__words[2] = v53[-1].__r_.__value_.__r.__words[2];
            *(_OWORD *)&v46[-1].__r_.__value_.__l.__data_ = v56;
            v53[-1].__r_.__value_.__l.__size_ = 0;
            v53[-1].__r_.__value_.__r.__words[2] = 0;
            v53[-1].__r_.__value_.__r.__words[0] = 0;
            --v53;
            --v46;
          }
          while (v53 != (std::string *)v52);
        }
        v57 = v54 + 24 * v30;
        v58 = (std::string *)v22[1];
        if (v58 == v26)
        {
          a5 = v65;
          a6 = v66;
        }
        else
        {
          a5 = v65;
          a6 = v66;
          do
          {
            v59 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
            *(_QWORD *)(v48 + 16) = *((_QWORD *)&v26->__r_.__value_.__l + 2);
            *(_OWORD *)v48 = v59;
            v48 += 24;
            v26->__r_.__value_.__l.__size_ = 0;
            v26->__r_.__value_.__r.__words[2] = 0;
            v26->__r_.__value_.__r.__words[0] = 0;
            ++v26;
          }
          while (v26 != v58);
          v26 = (std::string *)v22[1];
        }
        v60 = (uint64_t *)*v22;
        *v22 = v55;
        v77 = v60;
        v78 = (std::__shared_weak_count *)v60;
        v22[1] = v48;
        v79 = v26;
        v61 = v22[2];
        v22[2] = v57;
        v80 = v61;
        std::__split_buffer<std::string,geo::StdAllocator<std::string,grl::Allocator> &>::~__split_buffer((uint64_t)&v77);
        goto LABEL_51;
      }
      if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v24 - (_QWORD)v26) >> 3)) >= v23)
      {
        v36 = (__int128 *)(v20 + 24 * v23);
        v37 = (std::string *)v71[1];
        a5 = v65;
      }
      else
      {
        v36 = (__int128 *)(v20 + 8 * ((uint64_t)(v24 - (_QWORD)v26) >> 3));
        v37 = std::__uninitialized_allocator_copy_impl[abi:nn180100]<geo::StdAllocator<std::string,grl::Allocator>,std::string const*,std::string const*,std::string*>((int)v71 + 24, v36, v19, (std::string *)v71[1]);
        v22[1] = (uint64_t)v37;
        a5 = v65;
        if ((uint64_t)(v24 - (_QWORD)v26) < 1)
          goto LABEL_51;
      }
      v38 = &v26[v23];
      v39 = &v37[-v23];
      v40 = v37;
      if ((unint64_t)v39 < v24)
      {
        v40 = v37;
        do
        {
          if (v40)
          {
            v41 = *(_OWORD *)&v39->__r_.__value_.__l.__data_;
            v40->__r_.__value_.__r.__words[2] = v39->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v40->__r_.__value_.__l.__data_ = v41;
            v39->__r_.__value_.__l.__size_ = 0;
            v39->__r_.__value_.__r.__words[2] = 0;
            v39->__r_.__value_.__r.__words[0] = 0;
          }
          ++v39;
          ++v40;
        }
        while ((unint64_t)v39 < v24);
      }
      v22[1] = (uint64_t)v40;
      if (v37 != v38)
      {
        v42 = v37 - 1;
        v43 = 8 * (((char *)v37 - (char *)v38) >> 3);
        do
        {
          if (SHIBYTE(v42->__r_.__value_.__r.__words[2]) < 0)
            operator delete(v42->__r_.__value_.__l.__data_);
          v44 = (__int128 *)((char *)&v26[-1] + v43);
          v45 = *v44;
          v42->__r_.__value_.__r.__words[2] = v26->__r_.__value_.__r.__words[(unint64_t)v43 / 8 - 1];
          *(_OWORD *)&v42->__r_.__value_.__l.__data_ = v45;
          --v42;
          v26->__r_.__value_.__s.__data_[v43 - 1] = 0;
          *(_BYTE *)v44 = 0;
          v43 -= 24;
        }
        while (v43);
      }
      for (; (__int128 *)v20 != v36; ++v26)
      {
        std::string::operator=(v26, (const std::string *)v20);
        v20 += 24;
      }
    }
LABEL_51:
    v33 = v70;
    a7 = v67;
    v10 = a3;
    if (!v70)
      goto LABEL_56;
    p_shared_owners = (unint64_t *)&v70->__shared_owners_;
    do
      v35 = __ldaxr(p_shared_owners);
    while (__stlxr(v35 - 1, p_shared_owners));
    goto LABEL_54;
  }
  (*(void (**)(uint64_t **__return_ptr, _QWORD, _QWORD, uint64_t))(**(_QWORD **)(a1 + 8) + 32))(&v77, *(_QWORD *)(a1 + 8), 0, 3);
  geo::make_unique<std::vector<std::string,geo::StdAllocator<std::string,grl::Allocator>>,std::vector<std::string,geo::StdAllocator<std::string,grl::Allocator>> const&>(&v69, v77);
  v32 = v69;
  v69 = 0;
  std::unique_ptr<std::vector<std::string,geo::StdAllocator<std::string,grl::Allocator>>>::reset[abi:nn180100](&v71, v32);
  std::unique_ptr<std::vector<std::string,geo::StdAllocator<std::string,grl::Allocator>>>::reset[abi:nn180100](&v69, 0);
  v33 = v78;
  if (!v78)
    goto LABEL_56;
  v34 = (unint64_t *)&v78->__shared_owners_;
  do
    v35 = __ldaxr(v34);
  while (__stlxr(v35 - 1, v34));
LABEL_54:
  if (!v35)
  {
    ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
    std::__shared_weak_count::__release_weak(v33);
  }
LABEL_56:
  grl::IconManager::image(a7, a1, (unsigned int *)v72, v10, *(unsigned __int16 *)(a4 + 10), &v71, a5, a6, ceilf(*(float *)a4));
  return std::unique_ptr<std::vector<std::string,geo::StdAllocator<std::string,grl::Allocator>>>::reset[abi:nn180100](&v71, 0);
}

void grl::IconManager::image(_QWORD *a1, uint64_t a2, unsigned int *a3, IconModifiers *a4, unsigned int a5, uint64_t **a6, _QWORD *a7, uint64_t a8, float a9)
{
  unsigned int v12;
  float v13;
  std::__shared_weak_count *v14;
  grl::codec::IconMapPack *v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  uint64_t **GlobalResourcePack;
  unint64_t *v21;
  unint64_t v22;
  unint64_t *p_shared_owners;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  grl::Allocator *v28;
  grl::Allocator *v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  __int128 v37;
  int64x2_t v38;
  grl::Allocator *v39;
  grl::Allocator *v40;
  __int32 *i;
  std::string::size_type size;
  __int32 v43;
  grl::Allocator *v44;
  grl::Allocator *v45;
  uint64_t v46;
  _DWORD *v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  __int32 *v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  __int32 *v56;
  __int32 v57;
  char *v58;
  unsigned int *v59;
  unsigned int *v60;
  char *v61;
  char *v62;
  unsigned int v63;
  char *v64;
  unsigned int v65;
  BOOL v66;
  char **v67;
  uint64_t v68;
  _DWORD *v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unsigned int *v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  unsigned int *v78;
  unsigned int v79;
  char *v80;
  unsigned int *v81;
  unsigned int *v82;
  void *v83;
  char v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  grl::codec::IconMapPack *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  __int128 v98;
  int64x2_t v99;
  unint64_t v100;
  unint64_t v101;
  unsigned int *v102;
  unsigned int *v103;
  _QWORD *v104;
  int64_t v105;
  int v106;
  __int128 v107;
  std::string *v108;
  char *v109;
  std::string *v110;
  char *v111;
  BOOL v112;
  uint64_t v113;
  unsigned int v114;
  _QWORD *v115;
  unsigned int v116;
  BOOL v117;
  uint64_t *v118;
  uint64_t v119;
  __int128 v120;
  uint64_t v121;
  uint64_t v122;
  unint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  __int128 v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  __int128 v135;
  int64x2_t v136;
  uint64_t v137;
  void *v138;
  uint64_t v139;
  uint64_t v140;
  std::string::size_type v141;
  __int128 v142;
  unint64_t v143;
  unsigned int *v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  __int128 v148;
  std::string::size_type v149;
  uint64_t v150;
  unint64_t v151;
  uint64_t v152;
  __int128 v153;
  uint64_t v154;
  uint64_t v155;
  unint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  __int128 v162;
  uint64_t v163;
  unint64_t v164;
  uint64_t v165;
  std::string::size_type v166;
  __int128 v167;
  std::string::size_type v168;
  std::string::size_type v169;
  uint64_t v170;
  std::string::size_type v171;
  __int128 v172;
  uint64_t v173;
  __int128 v174;
  std::string::size_type v175;
  unint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  __int128 v180;
  int64x2_t v181;
  unint64_t v182;
  uint64_t v183;
  __int128 *v184;
  uint64_t v185;
  __int128 *v186;
  uint64_t v187;
  unint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  __int128 *v192;
  std::string *v193;
  uint64_t v194;
  std::string *v195;
  uint64_t v196;
  char *v197;
  uint64_t v198;
  __int128 *v199;
  __int128 *v200;
  __int128 v201;
  __int128 *v202;
  __int128 v203;
  uint64_t v204;
  unint64_t v205;
  unint64_t *v206;
  unint64_t v207;
  uint64_t v208;
  uint64_t v209;
  std::__shared_weak_count *v210;
  uint64_t v211;
  unint64_t *v212;
  unint64_t v213;
  unint64_t v214;
  std::__shared_weak_count *v215;
  unint64_t *v216;
  unint64_t v217;
  unint64_t *v218;
  unint64_t v219;
  std::__shared_weak_count *v220;
  unint64_t *v221;
  unint64_t v222;
  uint64_t v223;
  std::__shared_weak_count *v224;
  unint64_t *v225;
  unint64_t v226;
  unint64_t v227;
  std::__shared_weak_count *v228;
  unint64_t *v229;
  unint64_t v230;
  unint64_t *v231;
  unint64_t v232;
  std::__shared_weak_count *v233;
  unint64_t *v234;
  unint64_t v235;
  uint64_t v236;
  NSObject *v237;
  const char *v238;
  uint32_t v239;
  unsigned int v240;
  std::__shared_weak_count *v241;
  unsigned int v242;
  BOOL v243;
  NSObject *v244;
  const void *v245;
  uint64_t v246;
  const void *v247;
  unint64_t *v248;
  unint64_t v249;
  unint64_t *v250;
  unint64_t v251;
  unint64_t *v252;
  unint64_t v253;
  __int128 v254;
  std::__shared_weak_count *v255;
  unint64_t *v256;
  unint64_t v257;
  __int128 v258;
  BOOL v259;
  grl::Allocator *v260;
  unint64_t v261;
  unint64_t v262;
  std::string::size_type v263;
  uint64_t *v264;
  uint64_t **v265;
  uint64_t **v266;
  const void **v267;
  uint64_t *v268;
  std::string *v269;
  __int128 v270;
  uint64_t *v271;
  const void *v272;
  std::string *v273;
  std::string *v274;
  unint64_t *v275;
  unint64_t v276;
  std::__shared_weak_count *v277;
  unint64_t *v278;
  unint64_t v279;
  unint64_t *v280;
  std::__shared_weak_count *v281;
  unint64_t *v282;
  unint64_t v283;
  std::__shared_weak_count *v284;
  unint64_t *v285;
  unint64_t v286;
  unint64_t *v287;
  unint64_t v288;
  std::string *v292;
  std::string *v293;
  unsigned int v295;
  unsigned int v296;
  grl::codec::IconMapPack *v298;
  uint64_t v299;
  std::__shared_weak_count *v300;
  _QWORD *v301;
  unsigned int v302;
  grl::IconKey *v303;
  unsigned int v304;
  uint64_t v306;
  void *v307;
  std::__shared_weak_count *v308;
  __int128 v309;
  unint64_t v310;
  uint64_t v311;
  __int128 v312;
  std::string __p;
  float v314;
  int64x2_t v315;
  char *v316;
  uint64_t v317;
  __int128 v318;
  uint64_t v319;
  uint64_t v320;
  void *v321;
  std::__shared_weak_count *v322;
  char v323;
  float v324;
  unsigned int v325;
  unsigned int v326;
  std::string v327;
  unint64_t v328;
  uint64_t *v329;
  std::string v330;
  _BYTE buf[24];
  uint64_t v332;
  uint64_t *v333;
  uint64_t v334;

  v334 = *MEMORY[0x1E0C80C00];
  v307 = 0;
  v308 = 0;
  v312 = 0uLL;
  v12 = a3[4];
  v325 = a5;
  v326 = v12;
  v13 = ceilf(a9);
  std::string::basic_string[abi:nn180100]<0>(&v321, "Default");
  v324 = v13;
  grl::IconManager::retrieveResourcePack(buf, a2, (const void **)&v321, 2);
  v15 = *(grl::codec::IconMapPack **)buf;
  v14 = *(std::__shared_weak_count **)&buf[8];
  if (*(_QWORD *)&buf[8])
  {
    v16 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
    do
      v17 = __ldxr(v16);
    while (__stxr(v17 + 1, v16));
    do
      v18 = __ldaxr(v16);
    while (__stlxr(v18 - 1, v16));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v306 = a2;
  v303 = (grl::IconKey *)a3;
  if (v15)
  {
    v19 = v14;
    goto LABEL_22;
  }
  GlobalResourcePack = grl::IconManager::loadGlobalResourcePack(buf, a2, (uint64_t)&v321);
  v15 = *(grl::codec::IconMapPack **)buf;
  v19 = *(std::__shared_weak_count **)&buf[8];
  if (*(_QWORD *)&buf[8])
  {
    v21 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
    do
      v22 = __ldxr(v21);
    while (__stxr(v22 + 1, v21));
  }
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v24 = __ldaxr(p_shared_owners);
    while (__stlxr(v24 - 1, p_shared_owners));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v25 = *(std::__shared_weak_count **)&buf[8];
  if (!*(_QWORD *)&buf[8])
    goto LABEL_21;
  v26 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
  do
    v27 = __ldaxr(v26);
  while (__stlxr(v27 - 1, v26));
  if (!v27)
  {
    ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
    std::__shared_weak_count::__release_weak(v25);
    if (v15)
    {
LABEL_22:
      v28 = (grl::Allocator *)grl::codec::IconMapPack::regionsForIconID(v15, &v326, &v318);
      v300 = v19;
      if (v325 != 0xFFFF)
      {
        v39 = (grl::Allocator *)grl::codec::IconMapPack::regionsForCountryCode(v15, &v325, &v327);
        v315 = 0uLL;
        v316 = 0;
        v317 = grl::Allocator::instance(v39);
        v40 = (grl::Allocator *)std::vector<unsigned int,geo::StdAllocator<unsigned int,grl::Allocator>>::reserve((uint64_t)&v315, (uint64_t)(*((_QWORD *)&v318 + 1) - v318) >> 2);
        size = v327.__r_.__value_.__l.__size_;
        for (i = (__int32 *)v327.__r_.__value_.__r.__words[0]; i != (__int32 *)size; ++i)
        {
          v43 = *i;
          v44 = (grl::Allocator *)*((_QWORD *)&v318 + 1);
          v40 = (grl::Allocator *)wmemchr((__int32 *)v318, *i, (uint64_t)(*((_QWORD *)&v318 + 1) - v318) >> 2);
          if (v40)
            v45 = v40;
          else
            v45 = v44;
          if (v45 != *((grl::Allocator **)&v318 + 1))
          {
            v46 = v315.i64[1];
            if (v315.i64[1] >= (unint64_t)v316)
            {
              v48 = (v315.i64[1] - v315.i64[0]) >> 2;
              v49 = v48 + 1;
              if ((unint64_t)(v48 + 1) >> 62)
                goto LABEL_472;
              v50 = (uint64_t)&v316[-v315.i64[0]];
              if ((uint64_t)&v316[-v315.i64[0]] >> 1 > v49)
                v49 = v50 >> 1;
              if ((unint64_t)v50 >= 0x7FFFFFFFFFFFFFFCLL)
                v51 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v51 = v49;
              if (v51)
              {
                v40 = (grl::Allocator *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v317 + 16))(v317, 4 * v51, 4);
                v52 = (__int32 *)((char *)v40 + 4 * v48);
                v53 = (char *)v40 + 4 * v51;
                if (v40)
                  *v52 = v43;
              }
              else
              {
                v53 = 0;
                v52 = (__int32 *)(4 * v48);
              }
              v55 = v315.i64[1];
              v54 = v315.i64[0];
              v56 = v52;
              if (v315.i64[1] != v315.i64[0])
              {
                v56 = v52;
                do
                {
                  v57 = *(_DWORD *)(v55 - 4);
                  v55 -= 4;
                  *--v56 = v57;
                }
                while (v55 != v54);
              }
              v47 = v52 + 1;
              v315.i64[0] = (uint64_t)v56;
              v315.i64[1] = (uint64_t)(v52 + 1);
              v58 = v316;
              v316 = v53;
              if (v54)
                v40 = (grl::Allocator *)(*(uint64_t (**)(uint64_t, uint64_t, char *))(*(_QWORD *)v317 + 40))(v317, v54, &v58[-v54]);
            }
            else
            {
              if (v315.i64[1])
                *(_DWORD *)v315.i64[1] = v43;
              v47 = (_DWORD *)(v46 + 4);
            }
            v315.i64[1] = (uint64_t)v47;
          }
        }
        v60 = (unsigned int *)*((_QWORD *)&v318 + 1);
        v59 = (unsigned int *)v318;
        if ((_QWORD)v318 != *((_QWORD *)&v318 + 1))
        {
          v61 = (char *)v15 + 272;
          do
          {
            v62 = *(char **)v61;
            if (*(_QWORD *)v61)
            {
              v63 = *v59;
              v64 = (char *)v15 + 272;
              do
              {
                v65 = *((_DWORD *)v62 + 7);
                v66 = v65 >= v63;
                if (v65 >= v63)
                  v67 = (char **)v62;
                else
                  v67 = (char **)(v62 + 8);
                if (v66)
                  v64 = v62;
                v62 = *v67;
              }
              while (*v67);
              if (v64 != v61 && v63 >= *((_DWORD *)v64 + 7))
              {
                v68 = v315.i64[1];
                if (v315.i64[1] >= (unint64_t)v316)
                {
                  v70 = (v315.i64[1] - v315.i64[0]) >> 2;
                  v71 = v70 + 1;
                  if ((unint64_t)(v70 + 1) >> 62)
                    goto LABEL_472;
                  v72 = (uint64_t)&v316[-v315.i64[0]];
                  if ((uint64_t)&v316[-v315.i64[0]] >> 1 > v71)
                    v71 = v72 >> 1;
                  if ((unint64_t)v72 >= 0x7FFFFFFFFFFFFFFCLL)
                    v73 = 0x3FFFFFFFFFFFFFFFLL;
                  else
                    v73 = v71;
                  if (v73)
                  {
                    v40 = (grl::Allocator *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v317 + 16))(v317, 4 * v73, 4);
                    v74 = (unsigned int *)((char *)v40 + 4 * v70);
                    v75 = (char *)v40 + 4 * v73;
                    if (v40)
                      *v74 = v63;
                  }
                  else
                  {
                    v75 = 0;
                    v74 = (unsigned int *)(4 * v70);
                  }
                  v77 = v315.i64[1];
                  v76 = v315.i64[0];
                  v78 = v74;
                  if (v315.i64[1] != v315.i64[0])
                  {
                    v78 = v74;
                    do
                    {
                      v79 = *(_DWORD *)(v77 - 4);
                      v77 -= 4;
                      *--v78 = v79;
                    }
                    while (v77 != v76);
                  }
                  v69 = v74 + 1;
                  v315.i64[0] = (uint64_t)v78;
                  v315.i64[1] = (uint64_t)(v74 + 1);
                  v80 = v316;
                  v316 = v75;
                  if (v76)
                    v40 = (grl::Allocator *)(*(uint64_t (**)(uint64_t, uint64_t, char *))(*(_QWORD *)v317 + 40))(v317, v76, &v80[-v76]);
                }
                else
                {
                  if (v315.i64[1])
                    *(_DWORD *)v315.i64[1] = v63;
                  v69 = (_DWORD *)(v68 + 4);
                }
                v315.i64[1] = (uint64_t)v69;
              }
            }
            ++v59;
          }
          while (v59 != v60);
        }
        v309 = 0uLL;
        v310 = 0;
        v311 = grl::Allocator::instance(v40);
        v82 = (unsigned int *)v315.i64[1];
        v81 = (unsigned int *)v315.i64[0];
        if (v315.i64[0] == v315.i64[1])
        {
          a2 = v306;
        }
        else
        {
          do
          {
            grl::codec::IconMapPack::regionNameForID(v15, v81, &__p);
            v330.__r_.__value_.__r.__words[0] = __p.__r_.__value_.__l.__size_;
            v83 = (void *)__p.__r_.__value_.__r.__words[0];
            *(std::string::size_type *)((char *)v330.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 7);
            v84 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
            memset(&__p, 0, sizeof(__p));
            v85 = *((_QWORD *)&v309 + 1);
            if (*((_QWORD *)&v309 + 1) >= v310)
            {
              v87 = (uint64_t)(*((_QWORD *)&v309 + 1) - v309) >> 5;
              v88 = v87 + 1;
              if ((unint64_t)(v87 + 1) >> 59)
                goto LABEL_472;
              v89 = v15;
              v90 = v310 - v309;
              if ((uint64_t)(v310 - v309) >> 4 > v88)
                v88 = v90 >> 4;
              if ((unint64_t)v90 >= 0x7FFFFFFFFFFFFFE0)
                v91 = 0x7FFFFFFFFFFFFFFLL;
              else
                v91 = v88;
              v333 = &v311;
              if (v91)
              {
                v92 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v311 + 16))(v311, 32 * v91, 8);
                v93 = v92 + 32 * v87;
                v94 = v92 + 32 * v91;
                if (v92)
                {
                  *(_QWORD *)v93 = v83;
                  v83 = 0;
                  *(_QWORD *)(v93 + 8) = v330.__r_.__value_.__r.__words[0];
                  *(_QWORD *)(v93 + 15) = *(std::string::size_type *)((char *)v330.__r_.__value_.__r.__words + 7);
                  *(_BYTE *)(v93 + 23) = v84;
                  v330.__r_.__value_.__r.__words[0] = 0;
                  *(std::string::size_type *)((char *)v330.__r_.__value_.__r.__words + 7) = 0;
                  *(float *)(v93 + 24) = v13;
                  v84 = 0;
                }
              }
              else
              {
                v94 = 0;
                v93 = 32 * v87;
              }
              v15 = v89;
              v95 = *((_QWORD *)&v309 + 1);
              v96 = v309;
              if (*((_QWORD *)&v309 + 1) == (_QWORD)v309)
              {
                v99 = vdupq_n_s64(*((unint64_t *)&v309 + 1));
                v97 = v93;
              }
              else
              {
                v97 = v93;
                do
                {
                  v98 = *(_OWORD *)(v95 - 32);
                  *(_QWORD *)(v97 - 16) = *(_QWORD *)(v95 - 16);
                  *(_OWORD *)(v97 - 32) = v98;
                  *(_QWORD *)(v95 - 24) = 0;
                  *(_QWORD *)(v95 - 16) = 0;
                  *(_QWORD *)(v95 - 32) = 0;
                  *(_DWORD *)(v97 - 8) = *(_DWORD *)(v95 - 8);
                  v97 -= 32;
                  v95 -= 32;
                }
                while (v95 != v96);
                v99 = (int64x2_t)v309;
              }
              v86 = v93 + 32;
              *(_QWORD *)&v309 = v97;
              *((_QWORD *)&v309 + 1) = v93 + 32;
              *(int64x2_t *)&buf[8] = v99;
              v100 = v310;
              v310 = v94;
              v332 = v100;
              *(_QWORD *)buf = v99.i64[0];
              std::__split_buffer<std::pair<std::string,float>,geo::StdAllocator<std::pair<std::string,float>,grl::Allocator> &>::~__split_buffer((uint64_t)buf);
            }
            else
            {
              if (*((_QWORD *)&v309 + 1))
              {
                **((_QWORD **)&v309 + 1) = v83;
                *(_QWORD *)(v85 + 8) = v330.__r_.__value_.__r.__words[0];
                *(_QWORD *)(v85 + 15) = *(std::string::size_type *)((char *)v330.__r_.__value_.__r.__words + 7);
                *(_BYTE *)(v85 + 23) = v84;
                v330.__r_.__value_.__r.__words[0] = 0;
                *(std::string::size_type *)((char *)v330.__r_.__value_.__r.__words + 7) = 0;
                *(float *)(v85 + 24) = v13;
                v83 = 0;
                v84 = 0;
              }
              v86 = v85 + 32;
            }
            *((_QWORD *)&v309 + 1) = v86;
            if (v84 < 0)
              operator delete(v83);
            a2 = v306;
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__p.__r_.__value_.__l.__data_);
            ++v81;
          }
          while (v81 != v82);
          v81 = (unsigned int *)v315.i64[0];
        }
        v19 = v300;
        if (v81)
        {
          v315.i64[1] = (uint64_t)v81;
          (*(void (**)(uint64_t, unsigned int *, int64_t))(*(_QWORD *)v317 + 40))(v317, v81, v316 - (char *)v81);
        }
        if (v327.__r_.__value_.__r.__words[0])
        {
          v327.__r_.__value_.__l.__size_ = v327.__r_.__value_.__r.__words[0];
          (*(void (**)(unint64_t, std::string::size_type, std::string::size_type))(*(_QWORD *)v328 + 40))(v328, v327.__r_.__value_.__r.__words[0], v327.__r_.__value_.__r.__words[2] - v327.__r_.__value_.__r.__words[0]);
        }
        goto LABEL_285;
      }
      v309 = 0uLL;
      v310 = 0;
      v29 = (grl::Allocator *)grl::Allocator::instance(v28);
      v311 = (uint64_t)v29;
      v30 = *((_QWORD *)&v318 + 1) - v318;
      v31 = (uint64_t)(*((_QWORD *)&v318 + 1) - v318) >> 2;
      if (v31)
      {
        if (v30 >= 0x1FFFFFFFFFFFFFFDLL)
          goto LABEL_472;
        v32 = *((_QWORD *)&v309 + 1) - v309;
        v333 = &v311;
        v33 = (*(uint64_t (**)(grl::Allocator *, unint64_t, uint64_t))(*(_QWORD *)v29 + 16))(v29, 8 * v30, 8);
        v34 = *((_QWORD *)&v309 + 1);
        v35 = v309;
        if (*((_QWORD *)&v309 + 1) == (_QWORD)v309)
        {
          v38 = vdupq_n_s64(*((unint64_t *)&v309 + 1));
          v36 = v33 + v32;
        }
        else
        {
          v36 = v33 + v32;
          do
          {
            v37 = *(_OWORD *)(v34 - 32);
            *(_QWORD *)(v36 - 16) = *(_QWORD *)(v34 - 16);
            *(_OWORD *)(v36 - 32) = v37;
            *(_QWORD *)(v34 - 24) = 0;
            *(_QWORD *)(v34 - 16) = 0;
            *(_QWORD *)(v34 - 32) = 0;
            *(_DWORD *)(v36 - 8) = *(_DWORD *)(v34 - 8);
            v36 -= 32;
            v34 -= 32;
          }
          while (v34 != v35);
          v38 = (int64x2_t)v309;
        }
        *(_QWORD *)&v309 = v36;
        *((_QWORD *)&v309 + 1) = v33 + v32;
        *(int64x2_t *)&buf[8] = v38;
        v101 = v310;
        v310 = v33 + 32 * v31;
        v332 = v101;
        *(_QWORD *)buf = v38.i64[0];
        v29 = (grl::Allocator *)std::__split_buffer<std::pair<std::string,float>,geo::StdAllocator<std::pair<std::string,float>,grl::Allocator> &>::~__split_buffer((uint64_t)buf);
      }
      v315 = 0uLL;
      v316 = 0;
      v317 = grl::Allocator::instance(v29);
      v103 = (unsigned int *)*((_QWORD *)&v318 + 1);
      v102 = (unsigned int *)v318;
      if ((_QWORD)v318 != *((_QWORD *)&v318 + 1))
      {
        v104 = (_QWORD *)((char *)v15 + 272);
        v298 = v15;
        v301 = (_QWORD *)((char *)v15 + 272);
        do
        {
          grl::codec::IconMapPack::regionNameForID(v15, v102, &v330);
          v105 = HIBYTE(v330.__r_.__value_.__r.__words[2]);
          v106 = SHIBYTE(v330.__r_.__value_.__r.__words[2]);
          v107 = *(_OWORD *)&v330.__r_.__value_.__l.__data_;
          if ((v330.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          {
            v108 = &v330;
          }
          else
          {
            v105 = v330.__r_.__value_.__l.__size_;
            v108 = (std::string *)v330.__r_.__value_.__r.__words[0];
          }
          if (v105 < 7)
            goto LABEL_143;
          v109 = (char *)v108 + v105;
          v110 = v108;
          while (1)
          {
            v111 = (char *)memchr(v110, 68, v105 - 6);
            if (!v111)
              goto LABEL_143;
            v112 = *(_DWORD *)v111 == 1634100548 && *(_DWORD *)(v111 + 3) == 1953264993;
            if (v112)
              break;
            v110 = (std::string *)(v111 + 1);
            v105 = v109 - (char *)v110;
            if (v109 - (char *)v110 < 7)
              goto LABEL_143;
          }
          if (v111 == v109 || v111 - (char *)v108 == -1)
          {
LABEL_143:
            v113 = *v104;
            if (*v104)
            {
              v114 = *v102;
              v115 = v104;
              do
              {
                v116 = *(_DWORD *)(v113 + 28);
                v117 = v116 >= v114;
                if (v116 >= v114)
                  v118 = (uint64_t *)v113;
                else
                  v118 = (uint64_t *)(v113 + 8);
                if (v117)
                  v115 = (_QWORD *)v113;
                v113 = *v118;
              }
              while (*v118);
              if (v115 != v104 && v114 >= *((_DWORD *)v115 + 7))
              {
                v130 = v309;
                if (v106 < 0)
                  std::string::__init_copy_ctor_external(&__p, (const std::string::value_type *)v107, *((std::string::size_type *)&v107 + 1));
                else
                  __p = v330;
                v131 = v309;
                v314 = v13;
                v139 = v130 - v309;
                v140 = (v130 - (uint64_t)v309) >> 5;
                v141 = v130;
                if (*((_QWORD *)&v309 + 1) >= v310)
                {
                  v143 = ((uint64_t)(*((_QWORD *)&v309 + 1) - v309) >> 5) + 1;
                  if (v143 >> 59)
                    goto LABEL_472;
                  v144 = v103;
                  v145 = v310 - v309;
                  if ((uint64_t)(v310 - v309) >> 4 > v143)
                    v143 = v145 >> 4;
                  if ((unint64_t)v145 >= 0x7FFFFFFFFFFFFFE0)
                    v146 = 0x7FFFFFFFFFFFFFFLL;
                  else
                    v146 = v143;
                  v329 = &v311;
                  if (v146)
                    v147 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v311 + 16))(v311, 32 * v146, 8);
                  else
                    v147 = 0;
                  v149 = v147 + 32 * v140;
                  v327.__r_.__value_.__r.__words[0] = v147;
                  v327.__r_.__value_.__l.__size_ = v149;
                  v150 = v147 + 32 * v146;
                  v328 = v150;
                  if (v140 == v146)
                  {
                    v103 = v144;
                    if (v139 < 1)
                    {
                      v163 = v150;
                      if (v131 == v130)
                        v164 = 1;
                      else
                        v164 = v139 >> 4;
                      v333 = &v311;
                      v165 = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)v311 + 16))(v311, 32 * v164, 8);
                      v166 = v165 + 32 * (v164 >> 2);
                      v327.__r_.__value_.__r.__words[0] = v165;
                      v327.__r_.__value_.__l.__size_ = v166;
                      *(_QWORD *)buf = v147;
                      *(_QWORD *)&buf[8] = v149;
                      v328 = v165 + 32 * v164;
                      *(_QWORD *)&buf[16] = v149;
                      v332 = v163;
                      std::__split_buffer<std::pair<std::string,float>,geo::StdAllocator<std::pair<std::string,float>,grl::Allocator> &>::~__split_buffer((uint64_t)buf);
                      v149 = v166;
                    }
                    else
                    {
                      v151 = v140 + 2;
                      if (v140 >= -1)
                        v151 = v140 + 1;
                      v149 -= 32 * (v151 >> 1);
                      v327.__r_.__value_.__l.__size_ = v149;
                    }
                  }
                  else
                  {
                    v103 = v144;
                  }
                  v104 = v301;
                  if (v149)
                  {
                    v167 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
                    *(_QWORD *)(v149 + 16) = *((_QWORD *)&__p.__r_.__value_.__l + 2);
                    *(_OWORD *)v149 = v167;
                    memset(&__p, 0, sizeof(__p));
                    *(float *)(v149 + 24) = v314;
                  }
                  v168 = v149 + 32;
                  v327.__r_.__value_.__r.__words[2] = v149 + 32;
                  v169 = v327.__r_.__value_.__l.__size_;
                  v170 = v309;
                  if ((_QWORD)v309 == v141)
                  {
                    v15 = v298;
                  }
                  else
                  {
                    v171 = v141;
                    v15 = v298;
                    do
                    {
                      v172 = *(_OWORD *)(v171 - 32);
                      *(_QWORD *)(v169 - 16) = *(_QWORD *)(v171 - 16);
                      *(_OWORD *)(v169 - 32) = v172;
                      *(_QWORD *)(v171 - 24) = 0;
                      *(_QWORD *)(v171 - 16) = 0;
                      *(_QWORD *)(v171 - 32) = 0;
                      *(_DWORD *)(v169 - 8) = *(_DWORD *)(v171 - 8);
                      v169 -= 32;
                      v171 -= 32;
                    }
                    while (v171 != v170);
                    v168 = v327.__r_.__value_.__r.__words[2];
                  }
                  v327.__r_.__value_.__l.__size_ = v169;
                  v173 = *((_QWORD *)&v309 + 1);
                  if (*((_QWORD *)&v309 + 1) != v141)
                  {
                    do
                    {
                      if (v168)
                      {
                        v174 = *(_OWORD *)v141;
                        *(_QWORD *)(v168 + 16) = *(_QWORD *)(v141 + 16);
                        *(_OWORD *)v168 = v174;
                        *(_QWORD *)(v141 + 8) = 0;
                        *(_QWORD *)(v141 + 16) = 0;
                        *(_QWORD *)v141 = 0;
                        *(_DWORD *)(v168 + 24) = *(_DWORD *)(v141 + 24);
                      }
                      v141 += 32;
                      v168 += 32;
                    }
                    while (v141 != v173);
                    v169 = v327.__r_.__value_.__l.__size_;
                    v141 = *((_QWORD *)&v309 + 1);
                  }
                  v175 = v309;
                  v176 = v310;
                  *(_QWORD *)&v309 = v169;
                  *((_QWORD *)&v309 + 1) = v168;
                  v310 = v328;
                  v327.__r_.__value_.__r.__words[2] = v141;
                  v328 = v176;
                  v327.__r_.__value_.__r.__words[0] = v175;
                  v327.__r_.__value_.__l.__size_ = v175;
                  std::__split_buffer<std::pair<std::string,float>,geo::StdAllocator<std::pair<std::string,float>,grl::Allocator> &>::~__split_buffer((uint64_t)&v327);
                }
                else
                {
                  if (v130 == *((_QWORD *)&v309 + 1))
                  {
                    if ((_QWORD)v309)
                    {
                      v148 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
                      *(_QWORD *)(v130 + 16) = *((_QWORD *)&__p.__r_.__value_.__l + 2);
                      *(_OWORD *)v130 = v148;
                      memset(&__p, 0, sizeof(__p));
                      *(float *)(v131 + 32 * v140 + 24) = v314;
                    }
                    *((_QWORD *)&v309 + 1) = v130 + 32;
                  }
                  else
                  {
                    std::vector<std::pair<std::string,float>,geo::StdAllocator<std::pair<std::string,float>,grl::Allocator>>::__move_range((uint64_t)&v309, v130, *((unint64_t *)&v309 + 1), v130 + 32);
                    if (*(char *)(v130 + 23) < 0)
                      operator delete(*(void **)v130);
                    v142 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
                    *(_QWORD *)(v130 + 16) = *((_QWORD *)&__p.__r_.__value_.__l + 2);
                    *(_OWORD *)v130 = v142;
                    *((_BYTE *)&__p.__r_.__value_.__s + 23) = 0;
                    __p.__r_.__value_.__s.__data_[0] = 0;
                    *(float *)(v131 + 32 * v140 + 24) = v314;
                  }
                  v104 = v301;
                }
                if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                  goto LABEL_240;
                v138 = (void *)__p.__r_.__value_.__r.__words[0];
                goto LABEL_182;
              }
            }
            if (v106 < 0)
              std::string::__init_copy_ctor_external(&v327, (const std::string::value_type *)v107, *((std::string::size_type *)&v107 + 1));
            else
              v327 = v330;
            *(float *)&v328 = v13;
            v119 = v315.i64[1];
            if (v315.i64[1] >= (unint64_t)v316)
            {
              v122 = (v315.i64[1] - v315.i64[0]) >> 5;
              v123 = v122 + 1;
              if ((unint64_t)(v122 + 1) >> 59)
                goto LABEL_472;
              v124 = (uint64_t)&v316[-v315.i64[0]];
              if ((uint64_t)&v316[-v315.i64[0]] >> 4 > v123)
                v123 = v124 >> 4;
              if ((unint64_t)v124 >= 0x7FFFFFFFFFFFFFE0)
                v125 = 0x7FFFFFFFFFFFFFFLL;
              else
                v125 = v123;
              v333 = &v317;
              if (v125)
              {
                v126 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v317 + 16))(v317, 32 * v125, 8);
                v127 = v126 + 32 * v122;
                v128 = v126 + 32 * v125;
                if (v126)
                {
                  v129 = *(_OWORD *)&v327.__r_.__value_.__l.__data_;
                  *(_QWORD *)(v127 + 16) = *((_QWORD *)&v327.__r_.__value_.__l + 2);
                  *(_OWORD *)v127 = v129;
                  memset(&v327, 0, sizeof(v327));
                  *(_DWORD *)(v127 + 24) = v328;
                }
              }
              else
              {
                v128 = 0;
                v127 = 32 * v122;
              }
              v132 = v315.i64[1];
              v133 = v315.i64[0];
              if (v315.i64[1] == v315.i64[0])
              {
                v136 = vdupq_n_s64(v315.u64[1]);
                v134 = v127;
              }
              else
              {
                v134 = v127;
                do
                {
                  v135 = *(_OWORD *)(v132 - 32);
                  *(_QWORD *)(v134 - 16) = *(_QWORD *)(v132 - 16);
                  *(_OWORD *)(v134 - 32) = v135;
                  *(_QWORD *)(v132 - 24) = 0;
                  *(_QWORD *)(v132 - 16) = 0;
                  *(_QWORD *)(v132 - 32) = 0;
                  *(_DWORD *)(v134 - 8) = *(_DWORD *)(v132 - 8);
                  v134 -= 32;
                  v132 -= 32;
                }
                while (v132 != v133);
                v136 = v315;
              }
              v121 = v127 + 32;
              v315.i64[0] = v134;
              v315.i64[1] = v127 + 32;
              *(int64x2_t *)&buf[8] = v136;
              v137 = (uint64_t)v316;
              v316 = (char *)v128;
              v332 = v137;
              *(_QWORD *)buf = v136.i64[0];
              std::__split_buffer<std::pair<std::string,float>,geo::StdAllocator<std::pair<std::string,float>,grl::Allocator> &>::~__split_buffer((uint64_t)buf);
            }
            else
            {
              if (v315.i64[1])
              {
                v120 = *(_OWORD *)&v327.__r_.__value_.__l.__data_;
                *(_QWORD *)(v315.i64[1] + 16) = *((_QWORD *)&v327.__r_.__value_.__l + 2);
                *(_OWORD *)v119 = v120;
                memset(&v327, 0, sizeof(v327));
                *(_DWORD *)(v119 + 24) = v328;
              }
              v121 = v119 + 32;
            }
            v315.i64[1] = v121;
          }
          else
          {
            if (v106 < 0)
              std::string::__init_copy_ctor_external(&v327, (const std::string::value_type *)v107, *((std::string::size_type *)&v107 + 1));
            else
              v327 = v330;
            *(float *)&v328 = v13;
            v152 = *((_QWORD *)&v309 + 1);
            if (*((_QWORD *)&v309 + 1) >= v310)
            {
              v155 = (uint64_t)(*((_QWORD *)&v309 + 1) - v309) >> 5;
              v156 = v155 + 1;
              if ((unint64_t)(v155 + 1) >> 59)
                goto LABEL_472;
              v157 = v310 - v309;
              if ((uint64_t)(v310 - v309) >> 4 > v156)
                v156 = v157 >> 4;
              if ((unint64_t)v157 >= 0x7FFFFFFFFFFFFFE0)
                v158 = 0x7FFFFFFFFFFFFFFLL;
              else
                v158 = v156;
              v333 = &v311;
              if (v158)
              {
                v159 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v311 + 16))(v311, 32 * v158, 8);
                v160 = v159 + 32 * v155;
                v161 = v159 + 32 * v158;
                if (v159)
                {
                  v162 = *(_OWORD *)&v327.__r_.__value_.__l.__data_;
                  *(_QWORD *)(v160 + 16) = *((_QWORD *)&v327.__r_.__value_.__l + 2);
                  *(_OWORD *)v160 = v162;
                  memset(&v327, 0, sizeof(v327));
                  *(_DWORD *)(v160 + 24) = v328;
                }
              }
              else
              {
                v161 = 0;
                v160 = 32 * v155;
              }
              v177 = *((_QWORD *)&v309 + 1);
              v178 = v309;
              if (*((_QWORD *)&v309 + 1) == (_QWORD)v309)
              {
                v181 = vdupq_n_s64(*((unint64_t *)&v309 + 1));
                v179 = v160;
              }
              else
              {
                v179 = v160;
                do
                {
                  v180 = *(_OWORD *)(v177 - 32);
                  *(_QWORD *)(v179 - 16) = *(_QWORD *)(v177 - 16);
                  *(_OWORD *)(v179 - 32) = v180;
                  *(_QWORD *)(v177 - 24) = 0;
                  *(_QWORD *)(v177 - 16) = 0;
                  *(_QWORD *)(v177 - 32) = 0;
                  *(_DWORD *)(v179 - 8) = *(_DWORD *)(v177 - 8);
                  v179 -= 32;
                  v177 -= 32;
                }
                while (v177 != v178);
                v181 = (int64x2_t)v309;
              }
              v154 = v160 + 32;
              *(_QWORD *)&v309 = v179;
              *((_QWORD *)&v309 + 1) = v160 + 32;
              *(int64x2_t *)&buf[8] = v181;
              v182 = v310;
              v310 = v161;
              v332 = v182;
              *(_QWORD *)buf = v181.i64[0];
              std::__split_buffer<std::pair<std::string,float>,geo::StdAllocator<std::pair<std::string,float>,grl::Allocator> &>::~__split_buffer((uint64_t)buf);
            }
            else
            {
              if (*((_QWORD *)&v309 + 1))
              {
                v153 = *(_OWORD *)&v327.__r_.__value_.__l.__data_;
                *(_QWORD *)(*((_QWORD *)&v309 + 1) + 16) = *((_QWORD *)&v327.__r_.__value_.__l + 2);
                *(_OWORD *)v152 = v153;
                memset(&v327, 0, sizeof(v327));
                *(_DWORD *)(v152 + 24) = v328;
              }
              v154 = v152 + 32;
            }
            *((_QWORD *)&v309 + 1) = v154;
          }
          if (SHIBYTE(v327.__r_.__value_.__r.__words[2]) < 0)
          {
            v138 = (void *)v327.__r_.__value_.__r.__words[0];
LABEL_182:
            operator delete(v138);
          }
LABEL_240:
          if (SHIBYTE(v330.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v330.__r_.__value_.__l.__data_);
          ++v102;
        }
        while (v102 != v103);
      }
      v184 = (__int128 *)v315.i64[1];
      v183 = v315.i64[0];
      if (v315.i64[1] - v315.i64[0] < 1)
        goto LABEL_284;
      v185 = (v315.i64[1] - v315.i64[0]) >> 5;
      v186 = (__int128 *)*((_QWORD *)&v309 + 1);
      if (v185 <= (uint64_t)(v310 - *((_QWORD *)&v309 + 1)) >> 5)
      {
        if (v185 <= 0)
        {
          v194 = v315.i64[0] + 32 * v185;
          std::vector<std::pair<std::string,float>,geo::StdAllocator<std::pair<std::string,float>,grl::Allocator>>::__move_range((uint64_t)&v309, *((uint64_t *)&v309 + 1), *((unint64_t *)&v309 + 1), *((_QWORD *)&v309 + 1) + 32 * v185);
          for (; v183 != v194; v186 += 2)
          {
            std::string::operator=((std::string *)v186, (const std::string *)v183);
            *((_DWORD *)v186 + 6) = *(_DWORD *)(v183 + 24);
            v183 += 32;
          }
        }
        else
        {
          v191 = *((_QWORD *)&v309 + 1);
          if (v315.i64[0] != v315.i64[1])
          {
            v192 = (__int128 *)v315.i64[0];
            v193 = (std::string *)*((_QWORD *)&v309 + 1);
            do
            {
              geo::StdAllocator<std::pair<std::string,float>,grl::Allocator>::construct<std::pair<std::string,float>,std::pair<std::string,float>&>(v193, v192);
              v192 += 2;
              v193 = (std::string *)((char *)v193 + 32);
              v191 += 32;
            }
            while (v192 != v184);
          }
          *((_QWORD *)&v309 + 1) = v191;
        }
        goto LABEL_284;
      }
      v187 = (uint64_t)(*((_QWORD *)&v309 + 1) - v309) >> 5;
      if (!((unint64_t)(v187 + v185) >> 59))
      {
        v188 = (uint64_t)(v310 - v309) >> 4;
        if (v188 <= v187 + v185)
          v188 = v187 + v185;
        if (v310 - (unint64_t)v309 >= 0x7FFFFFFFFFFFFFE0)
          v189 = 0x7FFFFFFFFFFFFFFLL;
        else
          v189 = v188;
        v333 = &v311;
        if (v189)
          v190 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v311 + 16))(v311, 32 * v189, 8);
        else
          v190 = 0;
        v195 = (std::string *)(v190 + 32 * v187);
        *(_QWORD *)buf = v190;
        *(_QWORD *)&buf[8] = v195;
        v332 = v190 + 32 * v189;
        v196 = 32 * v185;
        v197 = (char *)v195 + 32 * v185;
        do
        {
          geo::StdAllocator<std::pair<std::string,float>,grl::Allocator>::construct<std::pair<std::string,float>,std::pair<std::string,float>&>(v195, (__int128 *)v183);
          v195 = (std::string *)((char *)v195 + 32);
          v183 += 32;
          v196 -= 32;
        }
        while (v196);
        *(_QWORD *)&buf[16] = v197;
        v198 = *(_QWORD *)&buf[8];
        v199 = (__int128 *)v309;
        if ((__int128 *)v309 != v186)
        {
          v200 = v186;
          do
          {
            v201 = *(v200 - 2);
            *(_QWORD *)(v198 - 16) = *((_QWORD *)v200 - 2);
            *(_OWORD *)(v198 - 32) = v201;
            *((_QWORD *)v200 - 3) = 0;
            *((_QWORD *)v200 - 2) = 0;
            *((_QWORD *)v200 - 4) = 0;
            *(_DWORD *)(v198 - 8) = *((_DWORD *)v200 - 2);
            v198 -= 32;
            v200 -= 2;
          }
          while (v200 != v199);
          v197 = *(char **)&buf[16];
        }
        *(_QWORD *)&buf[8] = v198;
        v202 = (__int128 *)*((_QWORD *)&v309 + 1);
        if (*((__int128 **)&v309 + 1) != v186)
        {
          do
          {
            if (v197)
            {
              v203 = *v186;
              *((_QWORD *)v197 + 2) = *((_QWORD *)v186 + 2);
              *(_OWORD *)v197 = v203;
              *((_QWORD *)v186 + 1) = 0;
              *((_QWORD *)v186 + 2) = 0;
              *(_QWORD *)v186 = 0;
              *((_DWORD *)v197 + 6) = *((_DWORD *)v186 + 6);
            }
            v186 += 2;
            v197 += 32;
          }
          while (v186 != v202);
          v198 = *(_QWORD *)&buf[8];
          v186 = (__int128 *)*((_QWORD *)&v309 + 1);
        }
        v204 = v309;
        v205 = v310;
        *(_QWORD *)&v309 = v198;
        *((_QWORD *)&v309 + 1) = v197;
        v310 = v332;
        *(_QWORD *)&buf[16] = v186;
        v332 = v205;
        *(_QWORD *)buf = v204;
        *(_QWORD *)&buf[8] = v204;
        std::__split_buffer<std::pair<std::string,float>,geo::StdAllocator<std::pair<std::string,float>,grl::Allocator> &>::~__split_buffer((uint64_t)buf);
LABEL_284:
        *(_QWORD *)buf = &v315;
        std::vector<std::pair<std::string,float>,geo::StdAllocator<std::pair<std::string,float>,grl::Allocator>>::__destroy_vector::operator()[abi:nn180100]((uint64_t **)buf);
        a2 = v306;
        v19 = v300;
LABEL_285:
        if ((_QWORD)v318)
        {
          *((_QWORD *)&v318 + 1) = v318;
          (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v320 + 40))(v320, v318, v319 - v318);
        }
        goto LABEL_287;
      }
LABEL_472:
      abort();
    }
  }
  else
  {
LABEL_21:
    if (v15)
      goto LABEL_22;
  }
  v309 = 0uLL;
  v310 = 0;
  v311 = grl::Allocator::instance((grl::Allocator *)GlobalResourcePack);
LABEL_287:
  if (v19)
  {
    v206 = (unint64_t *)&v19->__shared_owners_;
    do
      v207 = __ldaxr(v206);
    while (__stlxr(v207 - 1, v206));
    if (!v207)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  if (v323 < 0)
    operator delete(v321);
  v208 = *((_QWORD *)&v309 + 1);
  v209 = v309;
  if ((_QWORD)v309 == *((_QWORD *)&v309 + 1))
  {
    v254 = 0uLL;
    goto LABEL_402;
  }
  v302 = 0;
  v296 = 0;
  v304 = 0;
  v292 = (std::string *)(a8 + 32);
  v293 = (std::string *)(a8 + 8);
  v295 = 4;
  v299 = *((_QWORD *)&v309 + 1);
  do
  {
    grl::IconManager::retrieveResourcePack(buf, a2, (const void **)v209, 1);
    v211 = *(_QWORD *)buf;
    v210 = *(std::__shared_weak_count **)&buf[8];
    if (*(_QWORD *)&buf[8])
    {
      v212 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
      do
        v213 = __ldxr(v212);
      while (__stxr(v213 + 1, v212));
      do
        v214 = __ldaxr(v212);
      while (__stlxr(v214 - 1, v212));
      if (!v214)
      {
        ((void (*)(std::__shared_weak_count *))v210->__on_zero_shared)(v210);
        std::__shared_weak_count::__release_weak(v210);
        if (!v211)
          goto LABEL_304;
LABEL_302:
        v215 = v210;
LABEL_317:
        grl::IconManager::retrieveResourcePack(buf, a2, (const void **)v209, 0);
        v223 = *(_QWORD *)buf;
        v224 = *(std::__shared_weak_count **)&buf[8];
        if (!*(_QWORD *)&buf[8])
          goto LABEL_322;
        v225 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
        do
          v226 = __ldxr(v225);
        while (__stxr(v226 + 1, v225));
        do
          v227 = __ldaxr(v225);
        while (__stlxr(v227 - 1, v225));
        if (!v227)
        {
          ((void (*)(std::__shared_weak_count *))v224->__on_zero_shared)(v224);
          std::__shared_weak_count::__release_weak(v224);
          if (v223)
            goto LABEL_323;
        }
        else
        {
LABEL_322:
          if (v223)
          {
LABEL_323:
            v228 = v224;
            goto LABEL_338;
          }
        }
        grl::IconManager::loadResourcePack(buf, a2, v209, 0, a6);
        v223 = *(_QWORD *)buf;
        v228 = *(std::__shared_weak_count **)&buf[8];
        if (*(_QWORD *)&buf[8])
        {
          v229 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
          do
            v230 = __ldxr(v229);
          while (__stxr(v230 + 1, v229));
        }
        if (v224)
        {
          v231 = (unint64_t *)&v224->__shared_owners_;
          do
            v232 = __ldaxr(v231);
          while (__stlxr(v232 - 1, v231));
          if (!v232)
          {
            ((void (*)(std::__shared_weak_count *))v224->__on_zero_shared)(v224);
            std::__shared_weak_count::__release_weak(v224);
          }
        }
        v233 = *(std::__shared_weak_count **)&buf[8];
        if (!*(_QWORD *)&buf[8])
          goto LABEL_337;
        v234 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
        do
          v235 = __ldaxr(v234);
        while (__stlxr(v235 - 1, v234));
        if (!v235)
        {
          ((void (*)(std::__shared_weak_count *))v233->__on_zero_shared)(v233);
          std::__shared_weak_count::__release_weak(v233);
          if (v223)
          {
LABEL_338:
            if (*(float *)(v211 + 32) != *(float *)(v223 + 32))
            {
              if (GEOGetGeoResourceLibIconManagerLog::onceToken != -1)
                dispatch_once(&GEOGetGeoResourceLibIconManagerLog::onceToken, &__block_literal_global_1);
              v236 = GEOGetGeoResourceLibIconManagerLog::log;
              if (os_log_type_enabled((os_log_t)GEOGetGeoResourceLibIconManagerLog::log, OS_LOG_TYPE_ERROR))
              {
                *(_WORD *)buf = 0;
                v237 = v236;
                v238 = "Mismatching config and data packs";
                v239 = 2;
LABEL_373:
                _os_log_impl(&dword_19F029000, v237, OS_LOG_TYPE_ERROR, v238, buf, v239);
                goto LABEL_374;
              }
              goto LABEL_374;
            }
            *(_QWORD *)buf = &off_1E42C2848;
            *(_QWORD *)&buf[8] = 0;
            *(_QWORD *)&buf[16] = 0;
            LOBYTE(v332) = 4;
            grl::codec::IconConfigPack::iconForKey((grl::codec::IconConfigPack *)v211, v303, (grl::IconKey *)buf, (uint64_t *)&v327);
            v240 = *(_DWORD *)&buf[16];
            if (v327.__r_.__value_.__r.__words[0]
              && *(_DWORD *)&buf[16] == *((_DWORD *)v303 + 4)
              && __PAIR64__(*(unsigned __int16 *)&buf[22], *(unsigned __int16 *)&buf[20]) == __PAIR64__(*((unsigned __int16 *)v303+ 11), *((unsigned __int16 *)v303+ 10))&& v332 == *((unsigned __int8 *)v303 + 24))
            {
              std::shared_ptr<ggl::VertexData>::operator=[abi:nn180100]<ggl::VertexDataTyped<ggl::CommonMesh::BufferPos4UV>,void>(&v307, v223, (uint64_t)v228);
              if (a8)
              {
                std::string::operator=(v293, (const std::string *)(v223 + 8));
                std::string::operator=(v292, (const std::string *)(v211 + 8));
              }
              LODWORD(v241) = 1;
              v208 = v299;
              if (!v228)
                goto LABEL_391;
              goto LABEL_388;
            }
            if (v304 == *(_DWORD *)&buf[16])
            {
              v242 = *(unsigned __int16 *)&buf[20];
              v243 = v302 >= *(unsigned __int16 *)&buf[20];
              if (v302 == *(unsigned __int16 *)&buf[20])
              {
                v243 = v296 >= *(unsigned __int16 *)&buf[22];
                v242 = v302;
                if (v296 == *(unsigned __int16 *)&buf[22])
                  v243 = v295 >= v332;
              }
              v208 = v299;
              if (v243)
              {
LABEL_380:
                v241 = (std::__shared_weak_count *)v327.__r_.__value_.__l.__size_;
                if (v327.__r_.__value_.__l.__size_)
                {
                  v248 = (unint64_t *)(v327.__r_.__value_.__l.__size_ + 8);
                  do
                    v249 = __ldaxr(v248);
                  while (__stlxr(v249 - 1, v248));
                  a2 = v306;
                  if (!v249)
                  {
                    ((void (*)(std::__shared_weak_count *))v241->__on_zero_shared)(v241);
                    std::__shared_weak_count::__release_weak(v241);
                  }
                  LODWORD(v241) = 0;
                  if (!v228)
                    goto LABEL_391;
                }
                else
                {
                  a2 = v306;
                  if (!v228)
                    goto LABEL_391;
                }
LABEL_388:
                v250 = (unint64_t *)&v228->__shared_owners_;
                do
                  v251 = __ldaxr(v250);
                while (__stlxr(v251 - 1, v250));
                if (!v251)
                {
                  ((void (*)(std::__shared_weak_count *))v228->__on_zero_shared)(v228);
                  std::__shared_weak_count::__release_weak(v228);
                  if (!v215)
                    goto LABEL_397;
LABEL_392:
                  v252 = (unint64_t *)&v215->__shared_owners_;
                  do
                    v253 = __ldaxr(v252);
                  while (__stlxr(v253 - 1, v252));
                  if (!v253)
                  {
                    ((void (*)(std::__shared_weak_count *))v215->__on_zero_shared)(v215);
                    std::__shared_weak_count::__release_weak(v215);
                  }
                  goto LABEL_397;
                }
LABEL_391:
                if (!v215)
                  goto LABEL_397;
                goto LABEL_392;
              }
            }
            else
            {
              v208 = v299;
              if (v304 >= *(_DWORD *)&buf[16])
                goto LABEL_380;
              v242 = *(unsigned __int16 *)&buf[20];
            }
            v295 = v332;
            v296 = *(unsigned __int16 *)&buf[22];
            std::shared_ptr<ggl::VertexData>::operator=[abi:nn180100]<ggl::VertexDataTyped<ggl::CommonMesh::BufferPos4UV>,void>(&v307, v223, (uint64_t)v228);
            std::shared_ptr<grl::codec::IconData>::operator=[abi:nn180100](&v312, (uint64_t *)&v327);
            if (a8)
            {
              std::string::operator=(v293, (const std::string *)(v223 + 8));
              std::string::operator=(v292, (const std::string *)(v211 + 8));
            }
            v302 = v242;
            v304 = v240;
            goto LABEL_380;
          }
        }
        else
        {
LABEL_337:
          if (v223)
            goto LABEL_338;
        }
        if (GEOGetGeoResourceLibIconManagerLog::onceToken != -1)
          dispatch_once(&GEOGetGeoResourceLibIconManagerLog::onceToken, &__block_literal_global_1);
        v246 = GEOGetGeoResourceLibIconManagerLog::log;
        if (os_log_type_enabled((os_log_t)GEOGetGeoResourceLibIconManagerLog::log, OS_LOG_TYPE_ERROR))
        {
          v247 = (const void *)v209;
          if (*(char *)(v209 + 23) < 0)
            v247 = *(const void **)v209;
          *(_DWORD *)buf = 136315138;
          *(_QWORD *)&buf[4] = v247;
          v237 = v246;
          v238 = "No data pack found for key %s";
          v239 = 12;
          goto LABEL_373;
        }
LABEL_374:
        LODWORD(v241) = 3;
        if (!v228)
          goto LABEL_391;
        goto LABEL_388;
      }
    }
    if (v211)
      goto LABEL_302;
LABEL_304:
    grl::IconManager::loadResourcePack(buf, a2, v209, 1u, a6);
    v211 = *(_QWORD *)buf;
    v215 = *(std::__shared_weak_count **)&buf[8];
    if (*(_QWORD *)&buf[8])
    {
      v216 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
      do
        v217 = __ldxr(v216);
      while (__stxr(v217 + 1, v216));
    }
    if (v210)
    {
      v218 = (unint64_t *)&v210->__shared_owners_;
      do
        v219 = __ldaxr(v218);
      while (__stlxr(v219 - 1, v218));
      if (!v219)
      {
        ((void (*)(std::__shared_weak_count *))v210->__on_zero_shared)(v210);
        std::__shared_weak_count::__release_weak(v210);
      }
    }
    v220 = *(std::__shared_weak_count **)&buf[8];
    if (!*(_QWORD *)&buf[8])
      goto LABEL_316;
    v221 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
    do
      v222 = __ldaxr(v221);
    while (__stlxr(v222 - 1, v221));
    if (!v222)
    {
      ((void (*)(std::__shared_weak_count *))v220->__on_zero_shared)(v220);
      std::__shared_weak_count::__release_weak(v220);
      if (v211)
        goto LABEL_317;
    }
    else
    {
LABEL_316:
      if (v211)
        goto LABEL_317;
    }
    if (GEOGetGeoResourceLibIconManagerLog::onceToken != -1)
      dispatch_once(&GEOGetGeoResourceLibIconManagerLog::onceToken, &__block_literal_global_1);
    v244 = GEOGetGeoResourceLibIconManagerLog::log;
    if (os_log_type_enabled((os_log_t)GEOGetGeoResourceLibIconManagerLog::log, OS_LOG_TYPE_ERROR))
    {
      v245 = (const void *)v209;
      if (*(char *)(v209 + 23) < 0)
        v245 = *(const void **)v209;
      *(_DWORD *)buf = 136315138;
      *(_QWORD *)&buf[4] = v245;
      _os_log_impl(&dword_19F029000, v244, OS_LOG_TYPE_ERROR, "No config pack found for key %s", buf, 0xCu);
    }
    LODWORD(v241) = 3;
    if (v215)
      goto LABEL_392;
LABEL_397:
    if ((_DWORD)v241 != 3 && (_DWORD)v241)
      goto LABEL_403;
    v209 += 32;
  }
  while (v209 != v208);
  v254 = v312;
LABEL_402:
  *(_OWORD *)&v327.__r_.__value_.__l.__data_ = v254;
  v312 = 0uLL;
LABEL_403:
  *(_QWORD *)buf = &v309;
  std::vector<std::pair<std::string,float>,geo::StdAllocator<std::pair<std::string,float>,grl::Allocator>>::__destroy_vector::operator()[abi:nn180100]((uint64_t **)buf);
  v255 = (std::__shared_weak_count *)*((_QWORD *)&v312 + 1);
  if (*((_QWORD *)&v312 + 1))
  {
    v256 = (unint64_t *)(*((_QWORD *)&v312 + 1) + 8);
    do
      v257 = __ldaxr(v256);
    while (__stlxr(v257 - 1, v256));
    if (!v257)
    {
      ((void (*)(std::__shared_weak_count *))v255->__on_zero_shared)(v255);
      std::__shared_weak_count::__release_weak(v255);
    }
  }
  v258 = *(_OWORD *)&v327.__r_.__value_.__l.__data_;
  if (v327.__r_.__value_.__r.__words[0])
    v259 = v307 == 0;
  else
    v259 = 1;
  if (v259)
  {
    *a1 = 0;
    a1[1] = 0;
  }
  else
  {
    grl::codec::IconData::alternativeTextFamily((grl::codec::IconData *)v327.__r_.__value_.__l.__data_, a4, (uint64_t)&v315);
    if (v315.i8[0])
    {
      *(_OWORD *)&buf[8] = *(_OWORD *)((char *)v303 + 8);
      LOBYTE(v332) = *((_BYTE *)v303 + 24);
      *(_DWORD *)&buf[16] = v315.i32[1];
      v261 = (*(unsigned __int16 *)&buf[20]
            + ((v315.u32[1] - 0x61C8864680B583EBLL) << 6)
            + (((unint64_t)v315.u32[1] - 0x61C8864680B583EBLL) >> 2)
            - 0x61C8864680B583EBLL) ^ (v315.u32[1] - 0x61C8864680B583EBLL);
      v262 = (*(unsigned __int16 *)&buf[22] + (v261 << 6) + (v261 >> 2) - 0x61C8864680B583EBLL) ^ v261;
      *(_QWORD *)buf = &off_1E42C2848;
      *(_QWORD *)&buf[8] = (v332 + (v262 << 6) + (v262 >> 2) - 0x61C8864680B583EBLL) ^ v262;
      v327.__r_.__value_.__l.__size_ = 0;
      v327.__r_.__value_.__r.__words[2] = grl::Allocator::instance(v260);
      v328 = 0;
      v327.__r_.__value_.__r.__words[0] = (std::string::size_type)&v327.__r_.__value_.__l.__size_;
      grl::IconManager::image(a1, v306, buf, a4, a5, a6, &v327, 0, a9);
      std::__tree<std::__value_type<unsigned short,grl::ImageData>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,grl::ImageData>,std::less<unsigned short>,true>,geo::StdAllocator<std::__value_type<unsigned short,grl::ImageData>,grl::Allocator>>::destroy((uint64_t)&v327, (_QWORD *)v327.__r_.__value_.__l.__size_);
      goto LABEL_461;
    }
    *(_QWORD *)&buf[8] = 0;
    *(_QWORD *)&buf[16] = grl::Allocator::instance(v260);
    v332 = 0;
    *(_QWORD *)buf = &buf[8];
    v327.__r_.__value_.__l.__size_ = 0;
    v327.__r_.__value_.__r.__words[2] = grl::Allocator::instance(*(grl::Allocator **)&buf[16]);
    v328 = 0;
    v327.__r_.__value_.__r.__words[0] = (std::string::size_type)&v327.__r_.__value_.__l.__size_;
    if (*(_QWORD *)(v306 + 496))
    {
      if (grl::codec::IconData::requiresFonts(v258, (uint64_t)&v327, (grl::IconModifiers *)a4))
      {
        v263 = v327.__r_.__value_.__r.__words[0];
        if ((std::string::size_type *)v327.__r_.__value_.__l.__data_ != &v327.__r_.__value_.__r.__words[1])
        {
          do
          {
            grl::FontManager::fontForKey(*(grl::FontManager **)(v306 + 496), (__int128 *)(v263 + 32), &v321, 0.0);
            v264 = *(uint64_t **)&buf[8];
            v265 = (uint64_t **)&buf[8];
            v266 = (uint64_t **)&buf[8];
            if (!*(_QWORD *)&buf[8])
              goto LABEL_428;
            v265 = (uint64_t **)&buf[8];
            while (1)
            {
              while (1)
              {
                v266 = (uint64_t **)v264;
                v267 = (const void **)(v264 + 4);
                if (!std::less<std::string>::operator()[abi:nn180100]((uint64_t)&v332, (const void **)(v263 + 32), (const void **)v264 + 4))break;
                v264 = *v266;
                v265 = v266;
                if (!*v266)
                  goto LABEL_428;
              }
              if (!std::less<std::string>::operator()[abi:nn180100]((uint64_t)&v332, v267, (const void **)(v263 + 32)))
                break;
              v265 = v266 + 1;
              v264 = v266[1];
              if (!v264)
                goto LABEL_428;
            }
            v268 = *v265;
            if (!*v265)
            {
LABEL_428:
              v268 = (uint64_t *)(*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)&buf[16] + 16))(*(_QWORD *)&buf[16], 80, 8);
              v269 = (std::string *)(v268 + 4);
              if (*(char *)(v263 + 55) < 0)
              {
                std::string::__init_copy_ctor_external(v269, *(const std::string::value_type **)(v263 + 32), *(_QWORD *)(v263 + 40));
              }
              else
              {
                v270 = *(_OWORD *)(v263 + 32);
                v268[6] = *(_QWORD *)(v263 + 48);
                *(_OWORD *)&v269->__r_.__value_.__l.__data_ = v270;
              }
              v268[7] = (uint64_t)&off_1E42B4970;
              v268[8] = 0;
              *v268 = 0;
              v268[1] = 0;
              v268[2] = (uint64_t)v266;
              *v265 = v268;
              v271 = v268;
              if (**(_QWORD **)buf)
              {
                *(_QWORD *)buf = **(_QWORD **)buf;
                v271 = *v265;
              }
              std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)&buf[8], v271);
              ++v332;
            }
            v272 = (const void *)v268[8];
            if (v272)
              CFRelease(v272);
            v268[8] = (uint64_t)v322;
            v273 = *(std::string **)(v263 + 8);
            if (v273)
            {
              do
              {
                v274 = v273;
                v273 = (std::string *)v273->__r_.__value_.__r.__words[0];
              }
              while (v273);
            }
            else
            {
              do
              {
                v274 = *(std::string **)(v263 + 16);
                v112 = v274->__r_.__value_.__r.__words[0] == v263;
                v263 = (std::string::size_type)v274;
              }
              while (!v112);
            }
            v263 = (std::string::size_type)v274;
          }
          while (v274 != (std::string *)&v327.__r_.__value_.__r.__words[1]);
        }
      }
    }
    v321 = v307;
    v322 = v308;
    if (v308)
    {
      v275 = (unint64_t *)&v308->__shared_owners_;
      do
        v276 = __ldxr(v275);
      while (__stxr(v276 + 1, v275));
    }
    *a1 = 0;
    a1[1] = 0;
    if (a7[3])
    {
      grl::codec::IconData::imageWithImageData((grl::codec::IconData *)v258, a7, (uint64_t)a4, (uint64_t)buf, (uint64_t **)&v318, a9);
      std::shared_ptr<md::LabelFeature>::operator=[abi:nn180100]((uint64_t)a1, &v318);
      v277 = (std::__shared_weak_count *)*((_QWORD *)&v318 + 1);
      if (*((_QWORD *)&v318 + 1))
      {
        v278 = (unint64_t *)(*((_QWORD *)&v318 + 1) + 8);
        do
          v279 = __ldaxr(v278);
        while (__stlxr(v279 - 1, v278));
LABEL_453:
        if (!v279)
        {
          ((void (*)(std::__shared_weak_count *))v277->__on_zero_shared)(v277);
          std::__shared_weak_count::__release_weak(v277);
        }
      }
    }
    else
    {
      grl::codec::IconData::imageWithPack((grl::Allocator *)v258, (grl::codec::IconDataPack **)&v321, (uint64_t)a4, (uint64_t)buf, (uint64_t **)&v318, a9);
      std::shared_ptr<md::LabelFeature>::operator=[abi:nn180100]((uint64_t)a1, &v318);
      v277 = (std::__shared_weak_count *)*((_QWORD *)&v318 + 1);
      if (*((_QWORD *)&v318 + 1))
      {
        v280 = (unint64_t *)(*((_QWORD *)&v318 + 1) + 8);
        do
          v279 = __ldaxr(v280);
        while (__stlxr(v279 - 1, v280));
        goto LABEL_453;
      }
    }
    v281 = v322;
    if (v322)
    {
      v282 = (unint64_t *)&v322->__shared_owners_;
      do
        v283 = __ldaxr(v282);
      while (__stlxr(v283 - 1, v282));
      if (!v283)
      {
        ((void (*)(std::__shared_weak_count *))v281->__on_zero_shared)(v281);
        std::__shared_weak_count::__release_weak(v281);
      }
    }
    std::__tree<std::string,std::less<std::string>,geo::StdAllocator<std::string,grl::Allocator>>::destroy((uint64_t)&v327, v327.__r_.__value_.__l.__size_);
    std::__tree<std::__value_type<std::string,geo::_retain_ptr<__CTFont const*,geo::_retain_cf<__CTFont const*>,geo::_release_cf,geo::_hash_cf,geo::_equal_cf>>,std::__map_value_compare<std::string,std::__value_type<std::string,geo::_retain_ptr<__CTFont const*,geo::_retain_cf<__CTFont const*>,geo::_release_cf,geo::_hash_cf,geo::_equal_cf>>,std::less<std::string>,true>,geo::StdAllocator<std::__value_type<std::string,geo::_retain_ptr<__CTFont const*,geo::_retain_cf<__CTFont const*>,geo::_release_cf,geo::_hash_cf,geo::_equal_cf>>,grl::Allocator>>::destroy((uint64_t)buf, *(uint64_t *)&buf[8]);
  }
LABEL_461:
  v284 = v308;
  if (v308)
  {
    v285 = (unint64_t *)&v308->__shared_owners_;
    do
      v286 = __ldaxr(v285);
    while (__stlxr(v286 - 1, v285));
    if (!v286)
    {
      ((void (*)(std::__shared_weak_count *))v284->__on_zero_shared)(v284);
      std::__shared_weak_count::__release_weak(v284);
    }
  }
  if (*((_QWORD *)&v258 + 1))
  {
    v287 = (unint64_t *)(*((_QWORD *)&v258 + 1) + 8);
    do
      v288 = __ldaxr(v287);
    while (__stlxr(v288 - 1, v287));
    if (!v288)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v258 + 1) + 16))(*((_QWORD *)&v258 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v258 + 1));
    }
  }
}

void grl::IconManager::retrieveResourcePack(_QWORD *a1, uint64_t a2, const void **a3, int a4)
{
  std::__shared_mutex_base *v8;
  uint64_t v9;
  std::mutex *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  NSObject *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _BOOL4 v20;
  uint64_t *v21;
  uint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  uint8_t v30[16];

  v8 = (std::__shared_mutex_base *)(a2 + 104);
  std::__shared_mutex_base::lock_shared((std::__shared_mutex_base *)(a2 + 104));
  v9 = *(_QWORD *)(a2 + 96);
  if (!v9)
  {
    if (GEOGetGeoResourceLibIconManagerLog::onceToken != -1)
      dispatch_once(&GEOGetGeoResourceLibIconManagerLog::onceToken, &__block_literal_global_1);
    v16 = GEOGetGeoResourceLibIconManagerLog::log;
    if (os_log_type_enabled((os_log_t)GEOGetGeoResourceLibIconManagerLog::log, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)v30 = 0;
      _os_log_impl(&dword_19F029000, v16, OS_LOG_TYPE_ERROR, "No packinfo available", v30, 2u);
    }
    goto LABEL_32;
  }
  if (a4 == 2)
  {
    v10 = (std::mutex *)(v9 + 176);
    std::mutex::lock((std::mutex *)(v9 + 176));
    v17 = *(_QWORD *)(a2 + 96);
    v18 = *(_QWORD *)(v17 + 8);
    if (v18)
    {
      v19 = v17 + 8;
      do
      {
        v20 = std::less<std::pair<std::string,float>>::operator()[abi:nn180100]((const void **)(v18 + 32), a3);
        v21 = (uint64_t *)(v18 + 8);
        if (!v20)
        {
          v21 = (uint64_t *)v18;
          v19 = v18;
        }
        v18 = *v21;
      }
      while (*v21);
      if (v19 != v17 + 8
        && !std::less<std::pair<std::string,float>>::operator()[abi:nn180100](a3, (const void **)(v19 + 32)))
      {
        ++*(_DWORD *)(v17 + 368);
        v22 = *(_QWORD *)(v19 + 72);
        *a1 = *(_QWORD *)(v19 + 64);
        a1[1] = v22;
        if (v22)
        {
          v23 = (unint64_t *)(v22 + 8);
          do
            v24 = __ldxr(v23);
          while (__stxr(v24 + 1, v23));
        }
        goto LABEL_29;
      }
    }
    goto LABEL_30;
  }
  if (a4 == 1)
  {
    v10 = (std::mutex *)(v9 + 304);
    std::mutex::lock((std::mutex *)(v9 + 304));
    v25 = geo::LRUPolicy<std::pair<std::string,float>,std::shared_ptr<grl::codec::IconDataPack>,grl::codec::PackKeyHash>::get(*(_QWORD *)(a2 + 96) + 152, (_QWORD *)(*(_QWORD *)(a2 + 96) + 112), (float *)a3);
    v26 = *(_QWORD *)(a2 + 96);
    if (v26 + 152 != v25)
    {
      ++*(_DWORD *)(v26 + 368);
      v27 = *(_QWORD *)(v25 + 56);
      *a1 = *(_QWORD *)(v25 + 48);
      a1[1] = v27;
      if (v27)
      {
        v28 = (unint64_t *)(v27 + 8);
        do
          v29 = __ldxr(v28);
        while (__stxr(v29 + 1, v28));
      }
      goto LABEL_29;
    }
    goto LABEL_30;
  }
  if (a4)
  {
LABEL_31:
    ++*(_DWORD *)(v9 + 372);
LABEL_32:
    *a1 = 0;
    a1[1] = 0;
    goto LABEL_33;
  }
  v10 = (std::mutex *)(v9 + 240);
  std::mutex::lock((std::mutex *)(v9 + 240));
  v11 = geo::LRUPolicy<std::pair<std::string,float>,std::shared_ptr<grl::codec::IconDataPack>,grl::codec::PackKeyHash>::get(*(_QWORD *)(a2 + 96) + 80, (_QWORD *)(*(_QWORD *)(a2 + 96) + 40), (float *)a3);
  v12 = *(_QWORD *)(a2 + 96);
  if (v12 + 80 == v11)
  {
LABEL_30:
    std::mutex::unlock(v10);
    v9 = *(_QWORD *)(a2 + 96);
    goto LABEL_31;
  }
  ++*(_DWORD *)(v12 + 368);
  v13 = *(_QWORD *)(v11 + 56);
  *a1 = *(_QWORD *)(v11 + 48);
  a1[1] = v13;
  if (v13)
  {
    v14 = (unint64_t *)(v13 + 8);
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }
LABEL_29:
  std::mutex::unlock(v10);
LABEL_33:
  std::__shared_mutex_base::unlock_shared(v8);
}

uint64_t std::__tree<std::string,std::less<std::string>,geo::StdAllocator<std::string,grl::Allocator>>::destroy(uint64_t result, uint64_t a2)
{
  uint64_t v3;

  if (a2)
  {
    v3 = result;
    std::__tree<std::string,std::less<std::string>,geo::StdAllocator<std::string,grl::Allocator>>::destroy(result, *(_QWORD *)a2);
    std::__tree<std::string,std::less<std::string>,geo::StdAllocator<std::string,grl::Allocator>>::destroy(v3, *(_QWORD *)(a2 + 8));
    if (*(char *)(a2 + 55) < 0)
      operator delete(*(void **)(a2 + 32));
    return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 16) + 40))(*(_QWORD *)(v3 + 16), a2, 56);
  }
  return result;
}

uint64_t std::__tree<std::__value_type<std::string,geo::_retain_ptr<__CTFont const*,geo::_retain_cf<__CTFont const*>,geo::_release_cf,geo::_hash_cf,geo::_equal_cf>>,std::__map_value_compare<std::string,std::__value_type<std::string,geo::_retain_ptr<__CTFont const*,geo::_retain_cf<__CTFont const*>,geo::_release_cf,geo::_hash_cf,geo::_equal_cf>>,std::less<std::string>,true>,geo::StdAllocator<std::__value_type<std::string,geo::_retain_ptr<__CTFont const*,geo::_retain_cf<__CTFont const*>,geo::_release_cf,geo::_hash_cf,geo::_equal_cf>>,grl::Allocator>>::destroy(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  const void *v4;

  if (a2)
  {
    v3 = result;
    std::__tree<std::__value_type<std::string,geo::_retain_ptr<__CTFont const*,geo::_retain_cf<__CTFont const*>,geo::_release_cf,geo::_hash_cf,geo::_equal_cf>>,std::__map_value_compare<std::string,std::__value_type<std::string,geo::_retain_ptr<__CTFont const*,geo::_retain_cf<__CTFont const*>,geo::_release_cf,geo::_hash_cf,geo::_equal_cf>>,std::less<std::string>,true>,geo::StdAllocator<std::__value_type<std::string,geo::_retain_ptr<__CTFont const*,geo::_retain_cf<__CTFont const*>,geo::_release_cf,geo::_hash_cf,geo::_equal_cf>>,grl::Allocator>>::destroy(result, *(_QWORD *)a2);
    std::__tree<std::__value_type<std::string,geo::_retain_ptr<__CTFont const*,geo::_retain_cf<__CTFont const*>,geo::_release_cf,geo::_hash_cf,geo::_equal_cf>>,std::__map_value_compare<std::string,std::__value_type<std::string,geo::_retain_ptr<__CTFont const*,geo::_retain_cf<__CTFont const*>,geo::_release_cf,geo::_hash_cf,geo::_equal_cf>>,std::less<std::string>,true>,geo::StdAllocator<std::__value_type<std::string,geo::_retain_ptr<__CTFont const*,geo::_retain_cf<__CTFont const*>,geo::_release_cf,geo::_hash_cf,geo::_equal_cf>>,grl::Allocator>>::destroy(v3, *(_QWORD *)(a2 + 8));
    *(_QWORD *)(a2 + 56) = &off_1E42B4970;
    v4 = *(const void **)(a2 + 64);
    if (v4)
      CFRelease(v4);
    if (*(char *)(a2 + 55) < 0)
      operator delete(*(void **)(a2 + 32));
    return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 16) + 40))(*(_QWORD *)(v3 + 16), a2, 80);
  }
  return result;
}

uint64_t geo::LRUPolicy<std::pair<std::string,float>,std::shared_ptr<grl::codec::IconDataPack>,grl::codec::PackKeyHash>::get(uint64_t a1, _QWORD *a2, float *a3)
{
  unsigned __int8 *v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;

  v4 = std::__hash_table<std::__hash_value_type<std::pair<std::string,float>,std::__list_iterator<std::pair<std::pair<std::string,float>,std::shared_ptr<grl::codec::IconDataPack>>,void *>>,std::__unordered_map_hasher<std::pair<std::string,float>,std::__hash_value_type<std::pair<std::string,float>,std::__list_iterator<std::pair<std::pair<std::string,float>,std::shared_ptr<grl::codec::IconDataPack>>,void *>>,grl::codec::PackKeyHash,std::equal_to<std::pair<std::string,float>>,true>,std::__unordered_map_equal<std::pair<std::string,float>,std::__hash_value_type<std::pair<std::string,float>,std::__list_iterator<std::pair<std::pair<std::string,float>,std::shared_ptr<grl::codec::IconDataPack>>,void *>>,std::equal_to<std::pair<std::string,float>>,grl::codec::PackKeyHash,true>,std::allocator<std::__hash_value_type<std::pair<std::string,float>,std::__list_iterator<std::pair<std::pair<std::string,float>,std::shared_ptr<grl::codec::IconDataPack>>,void *>>>>::find<std::pair<std::string,float>>(a2, a3);
  if (v4)
  {
    v5 = *(uint64_t **)(a1 + 8);
    v6 = (uint64_t *)*((_QWORD *)v4 + 6);
    if (v5 == v6)
      return *(_QWORD *)(a1 + 8);
    v7 = (uint64_t *)v6[1];
    if (v7 == v5)
    {
      return *(_QWORD *)(a1 + 8);
    }
    else
    {
      v8 = *v6;
      *(_QWORD *)(v8 + 8) = v7;
      *(_QWORD *)v6[1] = v8;
      v9 = *v5;
      *(_QWORD *)(v9 + 8) = v6;
      *v6 = v9;
      *v5 = (uint64_t)v6;
      v6[1] = (uint64_t)v5;
      return *(_QWORD *)(a1 + 8);
    }
  }
  return a1;
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::pair<std::string,float>,std::__list_iterator<std::pair<std::pair<std::string,float>,std::shared_ptr<grl::codec::IconDataPack>>,void *>>,std::__unordered_map_hasher<std::pair<std::string,float>,std::__hash_value_type<std::pair<std::string,float>,std::__list_iterator<std::pair<std::pair<std::string,float>,std::shared_ptr<grl::codec::IconDataPack>>,void *>>,grl::codec::PackKeyHash,std::equal_to<std::pair<std::string,float>>,true>,std::__unordered_map_equal<std::pair<std::string,float>,std::__hash_value_type<std::pair<std::string,float>,std::__list_iterator<std::pair<std::pair<std::string,float>,std::shared_ptr<grl::codec::IconDataPack>>,void *>>,std::equal_to<std::pair<std::string,float>>,grl::codec::PackKeyHash,true>,std::allocator<std::__hash_value_type<std::pair<std::string,float>,std::__list_iterator<std::pair<std::pair<std::string,float>,std::shared_ptr<grl::codec::IconDataPack>>,void *>>>>::find<std::pair<std::string,float>>(_QWORD *a1, float *a2)
{
  unint64_t v4;
  int8x8_t v5;
  unint64_t v6;
  uint8x8_t v7;
  unint64_t v8;
  unint64_t v9;
  unsigned __int8 **v10;
  unsigned __int8 *i;
  unint64_t v12;

  v4 = grl::codec::PackKeyHash::operator()((uint64_t)a2);
  v5 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v5)
    return 0;
  v6 = v4;
  v7 = (uint8x8_t)vcnt_s8(v5);
  v7.i16[0] = vaddlv_u8(v7);
  v8 = v7.u32[0];
  if (v7.u32[0] > 1uLL)
  {
    v9 = v4;
    if (v4 >= *(_QWORD *)&v5)
      v9 = v4 % *(_QWORD *)&v5;
  }
  else
  {
    v9 = (*(_QWORD *)&v5 - 1) & v4;
  }
  v10 = *(unsigned __int8 ***)(*a1 + 8 * v9);
  if (!v10)
    return 0;
  for (i = *v10; i; i = *(unsigned __int8 **)i)
  {
    v12 = *((_QWORD *)i + 1);
    if (v12 == v6)
    {
      if (std::equal_to<std::pair<std::string,float>>::operator()[abi:nn180100](i + 16, a2))
        return i;
    }
    else
    {
      if (v8 > 1)
      {
        if (v12 >= *(_QWORD *)&v5)
          v12 %= *(_QWORD *)&v5;
      }
      else
      {
        v12 &= *(_QWORD *)&v5 - 1;
      }
      if (v12 != v9)
        return 0;
    }
  }
  return i;
}

unint64_t grl::codec::PackKeyHash::operator()(uint64_t a1)
{
  int v2;
  uint64_t *v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  float v7;
  char v9;

  v2 = *(char *)(a1 + 23);
  if (v2 >= 0)
    v3 = (uint64_t *)a1;
  else
    v3 = *(uint64_t **)a1;
  if (v2 >= 0)
    v4 = *(unsigned __int8 *)(a1 + 23);
  else
    v4 = *(_QWORD *)(a1 + 8);
  v5 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:nn180100]((uint64_t)&v9, v3, v4);
  v6 = 0x9E3779B97F4A7C15;
  v7 = *(float *)(a1 + 24);
  if (v7 != 0.0)
    v6 = LODWORD(v7) - 0x61C8864680B583EBLL;
  return (((v5 - 0x61C8864680B583EBLL) >> 2) + ((v5 - 0x61C8864680B583EBLL) << 6) + v6) ^ (v5 - 0x61C8864680B583EBLL);
}

uint64_t std::__split_buffer<std::pair<std::string,float>,geo::StdAllocator<std::pair<std::string,float>,grl::Allocator> &>::~__split_buffer(uint64_t a1)
{
  void **v2;
  void **v3;
  void **v4;

  v3 = *(void ***)(a1 + 8);
  v2 = *(void ***)(a1 + 16);
  if (v2 != v3)
  {
    do
    {
      v4 = v2 - 4;
      *(_QWORD *)(a1 + 16) = v2 - 4;
      if (*((char *)v2 - 9) < 0)
      {
        operator delete(*v4);
        v4 = *(void ***)(a1 + 16);
      }
      v2 = v4;
    }
    while (v4 != v3);
  }
  if (*(_QWORD *)a1)
    (*(void (**)(_QWORD, _QWORD, _QWORD))(***(_QWORD ***)(a1 + 32) + 40))(**(_QWORD **)(a1 + 32), *(_QWORD *)a1, *(_QWORD *)(a1 + 24) - *(_QWORD *)a1);
  return a1;
}

void grl::codec::IconMapPack::regionNameForID(grl::codec::IconMapPack *this@<X0>, unsigned int *a2@<X1>, std::string *a3@<X8>)
{
  char *v3;
  unsigned int v4;
  char *v5;
  unsigned int v6;
  BOOL v7;
  char **v8;
  __int128 v9;

  v3 = (char *)*((_QWORD *)this + 38);
  if (!v3)
    goto LABEL_12;
  v4 = *a2;
  v5 = (char *)this + 304;
  do
  {
    v6 = *((_DWORD *)v3 + 8);
    v7 = v6 >= v4;
    if (v6 >= v4)
      v8 = (char **)v3;
    else
      v8 = (char **)(v3 + 8);
    if (v7)
      v5 = v3;
    v3 = *v8;
  }
  while (*v8);
  if (v5 != (char *)this + 304 && v4 >= *((_DWORD *)v5 + 8))
  {
    if (v5[63] < 0)
    {
      std::string::__init_copy_ctor_external(a3, *((const std::string::value_type **)v5 + 5), *((_QWORD *)v5 + 6));
    }
    else
    {
      v9 = *(_OWORD *)(v5 + 40);
      a3->__r_.__value_.__r.__words[2] = *((_QWORD *)v5 + 7);
      *(_OWORD *)&a3->__r_.__value_.__l.__data_ = v9;
    }
  }
  else
  {
LABEL_12:
    std::string::basic_string[abi:nn180100]<0>(a3, "Default");
  }
}

uint64_t grl::codec::IconMapPack::regionsForIconID@<X0>(grl::codec::IconMapPack *this@<X0>, unsigned int *a2@<X1>, _QWORD *a3@<X8>)
{
  char *v4;
  unsigned int v5;
  char *v6;
  unsigned int v7;
  BOOL v8;
  char **v9;
  uint64_t result;
  uint64_t v11;

  v4 = (char *)*((_QWORD *)this + 42);
  if (!v4)
    goto LABEL_12;
  v5 = *a2;
  v6 = (char *)this + 336;
  do
  {
    v7 = *((_DWORD *)v4 + 8);
    v8 = v7 >= v5;
    if (v7 >= v5)
      v9 = (char **)v4;
    else
      v9 = (char **)(v4 + 8);
    if (v8)
      v6 = v4;
    v4 = *v9;
  }
  while (*v9);
  if (v6 != (char *)this + 336 && v5 >= *((_DWORD *)v6 + 8))
  {
    *a3 = 0;
    a3[1] = 0;
    v11 = *((_QWORD *)v6 + 8);
    a3[2] = 0;
    a3[3] = v11;
    return std::vector<unsigned int,geo::StdAllocator<unsigned int,grl::Allocator>>::__init_with_size[abi:nn180100]<unsigned int *,unsigned int *>((uint64_t)a3, *((_DWORD **)v6 + 5), *((_DWORD **)v6 + 6), (uint64_t)(*((_QWORD *)v6 + 6) - *((_QWORD *)v6 + 5)) >> 2);
  }
  else
  {
LABEL_12:
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    result = grl::Allocator::instance(this);
    a3[3] = result;
  }
  return result;
}

void grl::codec::IconData::alternativeTextFamily(grl::codec::IconData *this@<X0>, IconModifiers *a2@<X1>, uint64_t a3@<X8>)
{
  ValueUnion *v4;
  ValueUnion *p_value;
  unint64_t v8;
  ValueUnion v9;
  ValueUnion *v10;
  BOOL v11;
  int v12;
  _DWORD v13[10];

  v4 = *(ValueUnion **)&a2->_tailDirection._hasValue;
  p_value = &a2->_tailDirection._value;
  if (v4 == &a2->_tailDirection._value)
  {
LABEL_12:
    *(_BYTE *)a3 = 0;
  }
  else
  {
    while (1)
    {
      grl::codec::IconData::infoLayer(this, a2, (uint64_t)v13);
      v8 = (char)v4[7].data[7] < 0 ? *(_QWORD *)&v4[6].type : v4[7].data[7];
      if (v8 > v13[1])
        break;
      v9 = v4[1];
      if (*(_QWORD *)&v9.type)
      {
        do
        {
          v10 = *(ValueUnion **)&v9.type;
          v9 = **(ValueUnion **)&v9.type;
        }
        while (*(_QWORD *)&v9.type);
      }
      else
      {
        do
        {
          v10 = *(ValueUnion **)&v4[2].type;
          v11 = *(_QWORD *)&v10->type == (_QWORD)v4;
          v4 = v10;
        }
        while (!v11);
      }
      v4 = v10;
      if (v10 == p_value)
        goto LABEL_12;
    }
    v12 = v13[0];
    *(_BYTE *)a3 = 1;
    *(_DWORD *)(a3 + 4) = v12;
  }
}

void geo::make_unique<std::vector<std::string,geo::StdAllocator<std::string,grl::Allocator>>,std::vector<std::string,geo::StdAllocator<std::string,grl::Allocator>> const&>(_QWORD *a1, uint64_t *a2)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  std::string *v11;
  __int128 *v12;
  __int128 v13;

  v4 = (_QWORD *)operator new();
  v5 = v4;
  *v4 = 0;
  v4[1] = 0;
  v6 = a2[3];
  v4[2] = 0;
  v4[3] = v6;
  v8 = *a2;
  v7 = a2[1];
  if (v7 != v8)
  {
    std::vector<std::string,geo::StdAllocator<std::string,grl::Allocator>>::__vallocate[abi:nn180100]((uint64_t)v4, 0xAAAAAAAAAAAAAAABLL * ((v7 - v8) >> 3));
    v9 = 0;
    v10 = v5[1];
    do
    {
      v11 = (std::string *)(v10 + v9);
      if (v10 + v9)
      {
        v12 = (__int128 *)(v8 + v9);
        if (*(char *)(v8 + v9 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(v11, *(const std::string::value_type **)(v8 + v9), *(_QWORD *)(v8 + v9 + 8));
        }
        else
        {
          v13 = *v12;
          v11->__r_.__value_.__r.__words[2] = *((_QWORD *)v12 + 2);
          *(_OWORD *)&v11->__r_.__value_.__l.__data_ = v13;
        }
      }
      v9 += 24;
    }
    while (v8 + v9 != v7);
    v5[1] = v10 + v9;
  }
  *a1 = v5;
}

uint64_t std::__split_buffer<std::string,geo::StdAllocator<std::string,grl::Allocator> &>::~__split_buffer(uint64_t a1)
{
  std::__split_buffer<std::string,geo::StdAllocator<std::string,grl::Allocator> &>::__destruct_at_end[abi:nn180100](a1, *(void ***)(a1 + 8));
  if (*(_QWORD *)a1)
    (*(void (**)(_QWORD, _QWORD, _QWORD))(***(_QWORD ***)(a1 + 32) + 40))(**(_QWORD **)(a1 + 32), *(_QWORD *)a1, *(_QWORD *)(a1 + 24) - *(_QWORD *)a1);
  return a1;
}

{
  void **v2;
  void **v3;
  void **v5;

  v3 = *(void ***)(a1 + 8);
  v2 = *(void ***)(a1 + 16);
  if (v2 != v3)
  {
    do
    {
      v5 = v2 - 3;
      *(_QWORD *)(a1 + 16) = v2 - 3;
      if (*((char *)v2 - 1) < 0)
      {
        operator delete(*v5);
        v5 = *(void ***)(a1 + 16);
      }
      v2 = v5;
    }
    while (v5 != v3);
  }
  if (*(_QWORD *)a1)
    (*(void (**)(_QWORD, _QWORD, _QWORD))(***(_QWORD ***)(a1 + 32) + 40))(**(_QWORD **)(a1 + 32), *(_QWORD *)a1, *(_QWORD *)(a1 + 24) - *(_QWORD *)a1);
  return a1;
}

void std::string::__init_copy_ctor_external(std::string *this, const std::string::value_type *__s, std::string::size_type __sz)
{
  std::string *v5;
  std::string::size_type v6;
  std::string::size_type v7;
  std::string *v8;

  v5 = this;
  if (__sz > 0x16)
  {
    if (__sz >= 0x7FFFFFFFFFFFFFF8)
      std::string::__throw_length_error[abi:ne180100]();
    v6 = (__sz & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__sz | 7) != 0x17)
      v6 = __sz | 7;
    v7 = v6 + 1;
    v8 = (std::string *)operator new(v6 + 1);
    v5->__r_.__value_.__l.__size_ = __sz;
    v5->__r_.__value_.__r.__words[2] = v7 | 0x8000000000000000;
    v5->__r_.__value_.__r.__words[0] = (std::string::size_type)v8;
    v5 = v8;
  }
  else
  {
    *((_BYTE *)&this->__r_.__value_.__s + 23) = __sz;
  }
  memmove(v5, __s, __sz + 1);
}

void grl::ResourceProvider::resourceNamesOfResourceType(uint64_t a1@<X0>, unsigned int a2@<W1>, unint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  std::mutex *v8;
  uint64_t **v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  grl::Allocator *v14;
  std::mutex *v15;
  std::string *v16;
  std::string *v17;
  std::string::size_type v18;
  BOOL v19;
  int v20;
  char *v21;
  __int128 v22;
  uint64_t v23;
  _QWORD *v24;
  std::__shared_weak_count *size;
  unint64_t *v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  grl::Allocator *v31;
  std::__shared_weak_count *v32;
  unint64_t *p_shared_owners;
  unint64_t v34;
  NSObject *v35;
  void **v36;
  const char *v37;
  char v38;
  uint64_t v39;
  char v40;
  uint64_t v41;
  void **v42;
  void **v43;
  void **v44;
  void *__p[2];
  char v46;
  void *v47[2];
  char v48;
  void *v49[2];
  char v50;
  uint64_t *v51;
  std::__shared_weak_count *v52;
  __int128 v53;
  uint64_t v54;
  uint64_t v55;
  __int128 v56;
  std::string v57;
  void **v58;
  __int16 v59;
  void **v60;
  uint64_t v61;

  v61 = *MEMORY[0x1E0C80C00];
  LOWORD(v56) = a2;
  *((_QWORD *)&v56 + 1) = a3;
  v8 = (std::mutex *)(a1 + 176);
  std::mutex::lock((std::mutex *)(a1 + 176));
  v9 = (uint64_t **)(a1 + 240);
  v10 = std::__tree<std::__value_type<grl::ResourceProvider::ResourceCacheKey,std::shared_ptr<std::vector<std::string,geo::StdAllocator<std::string,grl::Allocator>> const>>,std::__map_value_compare<grl::ResourceProvider::ResourceCacheKey,std::__value_type<grl::ResourceProvider::ResourceCacheKey,std::shared_ptr<std::vector<std::string,geo::StdAllocator<std::string,grl::Allocator>> const>>,std::less<grl::ResourceProvider::ResourceCacheKey>,true>,std::allocator<std::__value_type<grl::ResourceProvider::ResourceCacheKey,std::shared_ptr<std::vector<std::string,geo::StdAllocator<std::string,grl::Allocator>> const>>>>::find<grl::ResourceProvider::ResourceCacheKey>(a1 + 240, (unsigned __int8 *)&v56);
  if (a1 + 248 != v10)
  {
    v11 = *(_QWORD *)(v10 + 56);
    *a4 = *(_QWORD *)(v10 + 48);
    a4[1] = v11;
    if (v11)
    {
      v12 = (unint64_t *)(v11 + 8);
      do
        v13 = __ldxr(v12);
      while (__stxr(v13 + 1, v12));
    }
    std::mutex::unlock(v8);
    return;
  }
  std::mutex::unlock(v8);
  v53 = 0uLL;
  v54 = 0;
  v55 = grl::Allocator::instance(v14);
  (*(void (**)(uint64_t **__return_ptr, uint64_t, unint64_t))(*(_QWORD *)a1 + 24))(&v51, a1, a3);
  if (!v51)
  {
    v31 = (grl::Allocator *)operator new(0x38uLL);
    *((_QWORD *)v31 + 1) = 0;
    *((_QWORD *)v31 + 2) = 0;
    *((_QWORD *)v31 + 3) = 0;
    *(_QWORD *)v31 = &off_1E42DABB0;
    *((_QWORD *)v31 + 4) = 0;
    *((_QWORD *)v31 + 5) = 0;
    *((_QWORD *)v31 + 6) = grl::Allocator::instance(v31);
    *a4 = (char *)v31 + 24;
    a4[1] = v31;
    goto LABEL_33;
  }
  v15 = (std::mutex *)(a1 + 112);
  std::mutex::lock(v15);
  v16 = (std::string *)*v51;
  v17 = (std::string *)v51[1];
  v49[0] = &v53;
  while (v16 != v17)
  {
    v18 = std::string::rfind(v16, 46, 0xFFFFFFFFFFFFFFFFLL);
    if (v18 == -1)
      goto LABEL_19;
    std::string::basic_string(&v57, v16, v18 + 1, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)v47);
    grl::ResourceTypeFromPackExtension((int64_t)&v57, v47);
    if (LOBYTE(v47[0]))
      v19 = BYTE1(v47[0]) == a2;
    else
      v19 = 0;
    v20 = v19;
    if ((SHIBYTE(v57.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      if (!v20)
        goto LABEL_19;
LABEL_18:
      std::back_insert_iterator<std::vector<std::string,geo::StdAllocator<std::string,grl::Allocator>>>::operator=[abi:nn180100]((unint64_t **)v49, (__int128 *)v16);
      goto LABEL_19;
    }
    operator delete(v57.__r_.__value_.__l.__data_);
    if (v20)
      goto LABEL_18;
LABEL_19:
    ++v16;
  }
  if ((_QWORD)v53 == *((_QWORD *)&v53 + 1) && *v51 != v51[1])
  {
    if (qword_1ECE65BB8 != -1)
      dispatch_once(&qword_1ECE65BB8, &__block_literal_global_2);
    v35 = _MergedGlobals_3;
    if (os_log_type_enabled((os_log_t)_MergedGlobals_3, OS_LOG_TYPE_ERROR))
    {
      v36 = v49;
      grl::buildStringFromResourceNames(*v51, 0xAAAAAAAAAAAAAAABLL * ((v51[1] - *v51) >> 3), v49);
      if (v50 < 0)
        v36 = (void **)v49[0];
      if (a2 > 3)
        v37 = "";
      else
        v37 = off_1E4314D70[(char)a2];
      v38 = 0;
      v39 = 0;
      v48 = 2;
      strcpy((char *)v47, "00");
      do
      {
        v40 = v38;
        if (((a3 >> v39) & 1) != 0)
        {
          v41 = v39 ^ 1;
          if (v48 >= 0)
            v42 = v47;
          else
            v42 = (void **)v47[0];
          *((_BYTE *)v42 + v41) = 49;
        }
        v38 = 1;
        v39 = 1;
      }
      while ((v40 & 1) == 0);
      if (v48 >= 0)
        v43 = v47;
      else
        v43 = (void **)v47[0];
      grl::buildStringFromResourceNames(v53, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)&v53 + 1) - v53) >> 3), __p);
      if (v46 >= 0)
        v44 = __p;
      else
        v44 = (void **)__p[0];
      LODWORD(v57.__r_.__value_.__l.__data_) = 136315906;
      *(std::string::size_type *)((char *)v57.__r_.__value_.__r.__words + 4) = (std::string::size_type)v36;
      WORD2(v57.__r_.__value_.__r.__words[1]) = 2080;
      *(std::string::size_type *)((char *)&v57.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v37;
      HIWORD(v57.__r_.__value_.__r.__words[2]) = 2080;
      v58 = v43;
      v59 = 2080;
      v60 = v44;
      _os_log_impl(&dword_19F029000, v35, OS_LOG_TYPE_ERROR, "Resources names got filtered to empty set for resourceType:%s location:%s input:%s output:%s", (uint8_t *)&v57, 0x2Au);
      if (v46 < 0)
        operator delete(__p[0]);
      if (v48 < 0)
        operator delete(v47[0]);
      if (v50 < 0)
        operator delete(v49[0]);
    }
  }
  std::mutex::unlock(v15);
  std::mutex::lock(v8);
  v21 = (char *)operator new(0x38uLL);
  *((_QWORD *)v21 + 1) = 0;
  *((_QWORD *)v21 + 2) = 0;
  *(_QWORD *)v21 = &off_1E42DABB0;
  v22 = v53;
  v23 = v55;
  *((_QWORD *)v21 + 5) = v54;
  *((_QWORD *)v21 + 6) = v23;
  v57.__r_.__value_.__l.__size_ = (std::string::size_type)v21;
  *(_OWORD *)(v21 + 24) = v22;
  v53 = 0uLL;
  v54 = 0;
  v57.__r_.__value_.__r.__words[0] = (std::string::size_type)(v21 + 24);
  v24 = std::__tree<std::__value_type<grl::ResourceProvider::ResourceCacheKey,std::shared_ptr<std::vector<std::string,geo::StdAllocator<std::string,grl::Allocator>> const>>,std::__map_value_compare<grl::ResourceProvider::ResourceCacheKey,std::__value_type<grl::ResourceProvider::ResourceCacheKey,std::shared_ptr<std::vector<std::string,geo::StdAllocator<std::string,grl::Allocator>> const>>,std::less<grl::ResourceProvider::ResourceCacheKey>,true>,std::allocator<std::__value_type<grl::ResourceProvider::ResourceCacheKey,std::shared_ptr<std::vector<std::string,geo::StdAllocator<std::string,grl::Allocator>> const>>>>::__emplace_unique_key_args<grl::ResourceProvider::ResourceCacheKey,grl::ResourceProvider::ResourceCacheKey&,std::shared_ptr<std::vector<std::string,geo::StdAllocator<std::string,grl::Allocator>> const>>(v9, (unsigned __int8 *)&v56, &v56, (__int128 *)&v57);
  size = (std::__shared_weak_count *)v57.__r_.__value_.__l.__size_;
  if (v57.__r_.__value_.__l.__size_)
  {
    v26 = (unint64_t *)(v57.__r_.__value_.__l.__size_ + 8);
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
      std::__shared_weak_count::__release_weak(size);
    }
  }
  v28 = v24[7];
  *a4 = v24[6];
  a4[1] = v28;
  if (v28)
  {
    v29 = (unint64_t *)(v28 + 8);
    do
      v30 = __ldxr(v29);
    while (__stxr(v30 + 1, v29));
  }
  std::mutex::unlock(v8);
LABEL_33:
  v32 = v52;
  if (v52)
  {
    p_shared_owners = (unint64_t *)&v52->__shared_owners_;
    do
      v34 = __ldaxr(p_shared_owners);
    while (__stlxr(v34 - 1, p_shared_owners));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
  }
  v57.__r_.__value_.__r.__words[0] = (std::string::size_type)&v53;
  std::vector<std::string,geo::StdAllocator<std::string,grl::Allocator>>::__destroy_vector::operator()[abi:nn180100]((uint64_t **)&v57);
}

uint64_t std::__tree<std::__value_type<grl::ResourceProvider::ResourceCacheKey,std::shared_ptr<std::vector<std::string,geo::StdAllocator<std::string,grl::Allocator>> const>>,std::__map_value_compare<grl::ResourceProvider::ResourceCacheKey,std::__value_type<grl::ResourceProvider::ResourceCacheKey,std::shared_ptr<std::vector<std::string,geo::StdAllocator<std::string,grl::Allocator>> const>>,std::less<grl::ResourceProvider::ResourceCacheKey>,true>,std::allocator<std::__value_type<grl::ResourceProvider::ResourceCacheKey,std::shared_ptr<std::vector<std::string,geo::StdAllocator<std::string,grl::Allocator>> const>>>>::find<grl::ResourceProvider::ResourceCacheKey>(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  _BOOL4 v6;
  uint64_t *v7;

  v2 = a1 + 8;
  v3 = *(_QWORD *)(a1 + 8);
  if (!v3)
    return v2;
  v5 = a1 + 8;
  do
  {
    v6 = grl::ResourceProvider::ResourceCacheKey::operator<((unsigned __int8 *)(v3 + 32), a2);
    v7 = (uint64_t *)(v3 + 8);
    if (!v6)
    {
      v7 = (uint64_t *)v3;
      v5 = v3;
    }
    v3 = *v7;
  }
  while (*v7);
  if (v5 == v2 || grl::ResourceProvider::ResourceCacheKey::operator<(a2, (unsigned __int8 *)(v5 + 32)))
    return v2;
  return v5;
}

BOOL grl::ResourceProvider::ResourceCacheKey::operator<(unsigned __int8 *a1, unsigned __int8 *a2)
{
  unint64_t v2;
  unint64_t v3;

  v2 = (a1[1]
      + (((unint64_t)*a1 - 0x61C8864680B583ABLL) >> 2)
      + (((*a1 - 0x61C8864680B583ABLL) ^ 1) << 6)
      - 0x61C8864680B583EBLL) ^ (*a1 - 0x61C8864680B583ABLL) ^ 1;
  v3 = (a2[1]
      + (((unint64_t)*a2 - 0x61C8864680B583ABLL) >> 2)
      + (((*a2 - 0x61C8864680B583ABLL) ^ 1) << 6)
      - 0x61C8864680B583EBLL) ^ (*a2 - 0x61C8864680B583ABLL) ^ 1;
  return ((*((_QWORD *)a1 + 1) + (v2 << 6) + (v2 >> 2) - 0x61C8864680B583EBLL) ^ v2) < ((*((_QWORD *)a2 + 1)
                                                                                       + (v3 << 6)
                                                                                       + (v3 >> 2)
                                                                                       - 0x61C8864680B583EBLL) ^ v3);
}

uint64_t *std::__hash_table<std::__hash_value_type<grl::codec::IconMapKeyValue,unsigned int>,std::__unordered_map_hasher<grl::codec::IconMapKeyValue,std::__hash_value_type<grl::codec::IconMapKeyValue,unsigned int>,std::hash<grl::codec::IconMapKeyValue>,std::equal_to<grl::codec::IconMapKeyValue>,true>,std::__unordered_map_equal<grl::codec::IconMapKeyValue,std::__hash_value_type<grl::codec::IconMapKeyValue,unsigned int>,std::equal_to<grl::codec::IconMapKeyValue>,std::hash<grl::codec::IconMapKeyValue>,true>,geo::StdAllocator<std::__hash_value_type<grl::codec::IconMapKeyValue,unsigned int>,grl::Allocator>>::find<grl::codec::IconMapKeyValue>(_QWORD *a1, unsigned int *a2)
{
  int8x8_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint8x8_t v6;
  unint64_t v7;
  uint64_t **v8;
  uint64_t *result;
  unint64_t v10;

  v2 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v2)
    return 0;
  v3 = *a2;
  v4 = a2[1];
  v5 = (v4
      + ((v3 - 0x61C8864680B583EBLL) << 6)
      + ((unint64_t)(v3 - 0x61C8864680B583EBLL) >> 2)
      - 0x61C8864680B583EBLL) ^ (v3 - 0x61C8864680B583EBLL);
  v6 = (uint8x8_t)vcnt_s8(v2);
  v6.i16[0] = vaddlv_u8(v6);
  if (v6.u32[0] > 1uLL)
  {
    v7 = (v4
        + ((v3 - 0x61C8864680B583EBLL) << 6)
        + ((unint64_t)(v3 - 0x61C8864680B583EBLL) >> 2)
        - 0x61C8864680B583EBLL) ^ (v3 - 0x61C8864680B583EBLL);
    if (v5 >= *(_QWORD *)&v2)
      v7 = v5 % *(_QWORD *)&v2;
  }
  else
  {
    v7 = v5 & (*(_QWORD *)&v2 - 1);
  }
  v8 = *(uint64_t ***)(*a1 + 8 * v7);
  if (!v8)
    return 0;
  for (result = *v8; result; result = (uint64_t *)*result)
  {
    v10 = result[1];
    if (v5 == v10)
    {
      if (*((_DWORD *)result + 4) == (_DWORD)v3 && *((_DWORD *)result + 5) == (_DWORD)v4)
        return result;
    }
    else
    {
      if (v6.u32[0] > 1uLL)
      {
        if (v10 >= *(_QWORD *)&v2)
          v10 %= *(_QWORD *)&v2;
      }
      else
      {
        v10 &= *(_QWORD *)&v2 - 1;
      }
      if (v10 != v7)
        return 0;
    }
  }
  return result;
}

uint64_t grl::codec::IconMapPack::regionsForCountryCode@<X0>(grl::codec::IconMapPack *this@<X0>, unsigned int *a2@<X1>, _QWORD *a3@<X8>)
{
  char *v4;
  unsigned int v5;
  char *v6;
  unsigned int v7;
  BOOL v8;
  char **v9;
  uint64_t result;
  uint64_t v11;

  v4 = (char *)*((_QWORD *)this + 46);
  if (!v4)
    goto LABEL_12;
  v5 = *a2;
  v6 = (char *)this + 368;
  do
  {
    v7 = *((_DWORD *)v4 + 8);
    v8 = v7 >= v5;
    if (v7 >= v5)
      v9 = (char **)v4;
    else
      v9 = (char **)(v4 + 8);
    if (v8)
      v6 = v4;
    v4 = *v9;
  }
  while (*v9);
  if (v6 != (char *)this + 368 && v5 >= *((_DWORD *)v6 + 8))
  {
    *a3 = 0;
    a3[1] = 0;
    v11 = *((_QWORD *)v6 + 8);
    a3[2] = 0;
    a3[3] = v11;
    return std::vector<unsigned int,geo::StdAllocator<unsigned int,grl::Allocator>>::__init_with_size[abi:nn180100]<unsigned int *,unsigned int *>((uint64_t)a3, *((_DWORD **)v6 + 5), *((_DWORD **)v6 + 6), (uint64_t)(*((_QWORD *)v6 + 6) - *((_QWORD *)v6 + 5)) >> 2);
  }
  else
  {
LABEL_12:
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    result = grl::Allocator::instance(this);
    a3[3] = result;
  }
  return result;
}

double grl::codec::InfoLayerData::InfoLayerData(grl::codec::InfoLayerData *this)
{
  double result;

  *(_QWORD *)this = 0xFFFFFFFF00000000;
  *((_QWORD *)this + 1) = 0xFF000000FF000000;
  *((_DWORD *)this + 4) = 0;
  *(_QWORD *)&result = 0xFF000000FFLL;
  *(_QWORD *)((char *)this + 20) = 0xFF000000FFLL;
  *((_BYTE *)this + 28) = -1;
  *((_DWORD *)this + 8) = 1065353216;
  *((_WORD *)this + 18) = 0;
  return result;
}

__n128 __copy_helper_block_ea8_48c23_ZTSN3gdc11ResourceKeyE(__n128 *a1, __n128 *a2)
{
  __int8 *v4;
  __int8 *v5;
  __int8 *v6;
  unint64_t v7;
  size_t v8;
  __int8 *v9;
  __int8 *v10;
  unint64_t v11;
  __int8 *v12;
  unint64_t v13;
  __int128 *v14;
  _OWORD *v15;
  unint64_t v16;
  __int128 v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t *v20;
  __int8 *v21;
  uint64_t v22;
  __int8 v23;
  unint64_t v24;
  __int8 *v25;
  __int128 *v26;
  _OWORD *v27;
  unint64_t v28;
  __int128 v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t *v32;
  __int8 *v33;
  uint64_t v34;
  __int8 v35;
  __n128 result;

  v4 = &a1[5].n128_i8[8];
  a1[3].n128_u64[0] = a2[3].n128_u64[0];
  a1[3].n128_u64[1] = (unint64_t)v4;
  a1[4].n128_u64[0] = (unint64_t)v4;
  a1[4].n128_u64[1] = (unint64_t)v4;
  a1[5].n128_u64[0] = 32;
  v5 = (__int8 *)a2[3].n128_u64[1];
  v6 = (__int8 *)a2[4].n128_u64[0];
  v7 = v6 - v5;
  if ((unint64_t)(v6 - v5) >= 0x21)
  {
    if (v7 <= 0x40)
      v8 = 64;
    else
      v8 = v6 - v5;
    v4 = (__int8 *)malloc_type_malloc(v8, 0x100004077774924uLL);
    v9 = (__int8 *)a1[3].n128_u64[1];
    v10 = (__int8 *)a1[4].n128_u64[0];
    if (v9 == v10)
      goto LABEL_21;
    v11 = v10 - v9;
    if ((unint64_t)(v10 - v9) < 8)
    {
      v12 = v4;
      goto LABEL_20;
    }
    v12 = v4;
    if ((unint64_t)(v4 - v9) < 0x20)
      goto LABEL_20;
    if (v11 >= 0x20)
    {
      v13 = v11 & 0xFFFFFFFFFFFFFFE0;
      v14 = (__int128 *)(v9 + 16);
      v15 = v4 + 16;
      v16 = v11 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        v17 = *v14;
        *(v15 - 1) = *(v14 - 1);
        *v15 = v17;
        v14 += 2;
        v15 += 2;
        v16 -= 32;
      }
      while (v16);
      if (v11 == v13)
        goto LABEL_21;
      if ((v11 & 0x18) == 0)
      {
        v9 += v13;
        v12 = &v4[v13];
        goto LABEL_20;
      }
    }
    else
    {
      v13 = 0;
    }
    v18 = v11 & 0xFFFFFFFFFFFFFFF8;
    v12 = &v4[v11 & 0xFFFFFFFFFFFFFFF8];
    v19 = v13 - (v11 & 0xFFFFFFFFFFFFFFF8);
    v20 = (uint64_t *)&v9[v13];
    v21 = &v4[v13];
    do
    {
      v22 = *v20++;
      *(_QWORD *)v21 = v22;
      v21 += 8;
      v19 += 8;
    }
    while (v19);
    if (v11 == v18)
      goto LABEL_21;
    v9 += v18;
    do
    {
LABEL_20:
      v23 = *v9++;
      *v12++ = v23;
    }
    while (v9 != v10);
LABEL_21:
    a1[3].n128_u64[1] = (unint64_t)v4;
    a1[4].n128_u64[0] = (unint64_t)v4;
    a1[5].n128_u64[0] = v8;
  }
  if (v5 != v6)
  {
    if (v7 < 8)
    {
      v25 = v4;
      goto LABEL_38;
    }
    if ((unint64_t)(v4 - v5) < 0x20)
    {
      v25 = v4;
      goto LABEL_38;
    }
    if (v7 >= 0x20)
    {
      v24 = v7 & 0xFFFFFFFFFFFFFFE0;
      v26 = (__int128 *)(v5 + 16);
      v27 = v4 + 16;
      v28 = v7 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        v29 = *v26;
        *(v27 - 1) = *(v26 - 1);
        *v27 = v29;
        v26 += 2;
        v27 += 2;
        v28 -= 32;
      }
      while (v28);
      if (v7 == v24)
        goto LABEL_39;
      if ((v7 & 0x18) == 0)
      {
        v5 += v24;
        v25 = &v4[v24];
        goto LABEL_38;
      }
    }
    else
    {
      v24 = 0;
    }
    v30 = v7 & 0xFFFFFFFFFFFFFFF8;
    v25 = &v4[v7 & 0xFFFFFFFFFFFFFFF8];
    v31 = v24 - (v7 & 0xFFFFFFFFFFFFFFF8);
    v32 = (uint64_t *)&v5[v24];
    v33 = &v4[v24];
    do
    {
      v34 = *v32++;
      *(_QWORD *)v33 = v34;
      v33 += 8;
      v31 += 8;
    }
    while (v31);
    if (v7 == v30)
      goto LABEL_39;
    v5 += v30;
    do
    {
LABEL_38:
      v35 = *v5++;
      *v25++ = v35;
    }
    while (v5 != v6);
LABEL_39:
    v4 = (__int8 *)a1[4].n128_u64[0];
  }
  a1[4].n128_u64[0] = (unint64_t)&v4[v7];
  a1[7].n128_u64[1] = a2[7].n128_u64[1];
  result = a2[8];
  a1[8] = result;
  return result;
}

uint64_t md::LabelLineSegmentImpl::points(md::LabelLineSegmentImpl *this)
{
  uint64_t result;
  _QWORD *v3;
  unint64_t v4;
  unint64_t v5;

  v3 = (_QWORD *)((char *)this + 48);
  result = *((_QWORD *)this + 6);
  v4 = *((unsigned __int16 *)v3 - 1);
  v5 = 0xAAAAAAAAAAAAAAABLL * ((v3[1] - result) >> 4);
  if (v4 <= v5)
  {
    if (v4 < v5)
      *((_QWORD *)this + 7) = result + 48 * *((unsigned __int16 *)v3 - 1);
  }
  else
  {
    std::vector<md::LabelPoint,geo::StdAllocator<md::LabelPoint,mdm::Allocator>>::__append((uint64_t)v3, v4 - v5);
    return *v3;
  }
  return result;
}

{
  return *((_QWORD *)this + 6);
}

uint64_t std::vector<md::LabelPoint,geo::StdAllocator<md::LabelPoint,mdm::Allocator>>::__append(uint64_t result, unint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  int v19;
  uint64_t v20;

  v3 = result;
  v4 = *(_QWORD *)(result + 8);
  v5 = *(_QWORD *)(result + 16);
  if (0xAAAAAAAAAAAAAAABLL * ((v5 - v4) >> 4) >= a2)
  {
    if (a2)
    {
      v10 = v4 + 48 * a2;
      v11 = 48 * a2;
      do
      {
        if (v4)
        {
          *(_OWORD *)(v4 + 16) = 0uLL;
          *(_OWORD *)(v4 + 32) = 0uLL;
          *(_OWORD *)v4 = 0uLL;
          *(_DWORD *)(v4 + 40) = 2139095039;
        }
        v4 += 48;
        v11 -= 48;
      }
      while (v11);
      v4 = v10;
    }
    *(_QWORD *)(result + 8) = v4;
  }
  else
  {
    v6 = 0xAAAAAAAAAAAAAAABLL * ((v4 - *(_QWORD *)result) >> 4);
    v7 = v6 + a2;
    if (v6 + a2 > 0x555555555555555)
      abort();
    v8 = 0xAAAAAAAAAAAAAAABLL * ((v5 - *(_QWORD *)result) >> 4);
    if (2 * v8 > v7)
      v7 = 2 * v8;
    if (v8 >= 0x2AAAAAAAAAAAAAALL)
      v9 = 0x555555555555555;
    else
      v9 = v7;
    if (v9)
      result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(result + 24) + 16))(*(_QWORD *)(result + 24), 48 * v9, 8);
    else
      result = 0;
    v12 = result + 48 * v6;
    v13 = 48 * a2;
    v14 = v12 + 48 * a2;
    v15 = v12;
    do
    {
      if (v15)
      {
        *(_OWORD *)(v15 + 16) = 0uLL;
        *(_OWORD *)(v15 + 32) = 0uLL;
        *(_OWORD *)v15 = 0uLL;
        *(_DWORD *)(v15 + 40) = 2139095039;
      }
      v15 += 48;
      v13 -= 48;
    }
    while (v13);
    v17 = *(_QWORD *)v3;
    v16 = *(_QWORD *)(v3 + 8);
    if (v16 != *(_QWORD *)v3)
    {
      do
      {
        v18 = *(_OWORD *)(v16 - 48);
        *(_QWORD *)(v12 - 32) = *(_QWORD *)(v16 - 32);
        *(_OWORD *)(v12 - 48) = v18;
        *(_OWORD *)(v12 - 24) = *(_OWORD *)(v16 - 24);
        v19 = *(_DWORD *)(v16 - 8);
        *(_DWORD *)(v12 - 5) = *(_DWORD *)(v16 - 5);
        *(_DWORD *)(v12 - 8) = v19;
        v12 -= 48;
        v16 -= 48;
      }
      while (v16 != v17);
      v16 = *(_QWORD *)v3;
    }
    *(_QWORD *)v3 = v12;
    *(_QWORD *)(v3 + 8) = v14;
    v20 = *(_QWORD *)(v3 + 16);
    *(_QWORD *)(v3 + 16) = result + 48 * v9;
    if (v16)
      return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 24) + 40))(*(_QWORD *)(v3 + 24), v16, v20 - v16);
  }
  return result;
}

uint64_t gss::StyleMatchingTree<gss::CartoStyle<gss::ScenePropertyID>>::construct(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  uint64_t v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unsigned int v15;
  unint64_t v16;
  unint64_t v17;
  unsigned int v18;
  unint64_t v19;
  NSObject *v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  int v25;
  int v26;
  char v27;
  unsigned int v28;
  uint64_t v29;
  unint64_t v30;
  unsigned int v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unsigned int v35;
  unint64_t v36;
  NSObject *v37;
  _QWORD *v38;
  _QWORD *v39;
  _QWORD *v40;
  char v41;
  int v42;
  int v43;
  char v44;
  unsigned int v45;
  unint64_t v46;
  unsigned int v47;
  unint64_t v48;
  unint64_t v49;
  unsigned int v50;
  unint64_t v51;
  NSObject *v52;
  _QWORD *v53;
  _QWORD *v54;
  _QWORD *v55;
  char v56;
  int v57;
  int v58;
  char v59;
  unsigned int v60;
  unint64_t v61;
  unsigned int v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  NSObject *v66;
  _QWORD *v67;
  _QWORD *v68;
  _QWORD *v69;
  char v70;
  int v71;
  int v72;
  char v73;
  unsigned int v74;
  unint64_t v75;
  unsigned int v76;
  unint64_t v77;
  unint64_t v78;
  unint64_t v79;
  NSObject *v80;
  _QWORD *v81;
  _QWORD *v82;
  _QWORD *v83;
  uint64_t v84;
  char v85;
  int v86;
  int v87;
  uint64_t v88;
  char v89;
  unint64_t v90;
  char v91;
  unint64_t v92;
  unint64_t v93;
  unsigned int v94;
  unint64_t v95;
  NSObject *v96;
  _QWORD *v97;
  _QWORD *v98;
  _QWORD *v99;
  uint64_t v101;
  char v102;
  int v103;
  int v104;
  uint64_t v105;
  unsigned int v106;
  uint64_t v107;
  uint64_t *v108;
  unsigned int v109;
  uint64_t v110;
  gss::Allocator *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  unsigned int *v115;
  uint64_t v116;
  gss::Allocator *v117;
  uint64_t i;
  uint64_t *v119;
  unsigned int v120;
  unsigned int v121;
  uint64_t *v122;
  unsigned int v123;
  int v124;
  unsigned int v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  unint64_t v129;
  unint64_t v130;
  char v131;
  unint64_t v132;
  unint64_t v133;
  unsigned int v134;
  unint64_t v135;
  uint64_t v136;
  int v137;
  unsigned int v138;
  unsigned int *v139;
  unsigned int v140;
  uint64_t v141;
  uint64_t v142;
  unint64_t v143;
  unint64_t v144;
  char v145;
  unint64_t v146;
  unint64_t v147;
  unsigned int v148;
  unsigned int v149;
  __int16 v150;
  uint64_t v151;
  unint64_t v152;
  uint64_t v153;
  int v154;
  uint64_t v155;
  unsigned __int16 *v156;
  unsigned int v157;
  unint64_t v158;
  uint64_t *v159;
  uint64_t v160;
  uint64_t v161;
  _WORD *v162;
  uint64_t *v163;
  unsigned int v164;
  NSObject *v165;
  __int16 v166;
  _QWORD *v167;
  _QWORD *v168;
  _QWORD *v169;
  NSObject *v170;
  _QWORD *v171;
  _QWORD *v172;
  _QWORD *v173;
  NSObject *v174;
  _QWORD *v175;
  _QWORD *v176;
  _QWORD *v177;
  NSObject *v178;
  _QWORD *v179;
  _QWORD *v180;
  _QWORD *v181;
  NSObject *v182;
  _QWORD *v183;
  _QWORD *v184;
  _QWORD *v185;
  NSObject *v186;
  _QWORD *v187;
  _QWORD *v188;
  _QWORD *v189;
  NSObject *v190;
  _QWORD *v191;
  _QWORD *v192;
  _QWORD *v193;
  NSObject *v194;
  _QWORD *v195;
  _QWORD *v196;
  _QWORD *v197;
  NSObject *v198;
  _QWORD *v199;
  _QWORD *v200;
  _QWORD *v201;
  NSObject *v202;
  _QWORD *v203;
  _QWORD *v204;
  _QWORD *v205;
  NSObject *v206;
  _QWORD *v207;
  _QWORD *v208;
  _QWORD *v209;
  NSObject *v210;
  _QWORD *v211;
  _QWORD *v212;
  _QWORD *v213;
  NSObject *v214;
  _QWORD *v215;
  _QWORD *v216;
  _QWORD *v217;
  NSObject *v218;
  _QWORD *v219;
  _QWORD *v220;
  _QWORD *v221;
  NSObject *v222;
  _QWORD *v223;
  _QWORD *v224;
  _QWORD *v225;
  NSObject *v226;
  _QWORD *v227;
  _QWORD *v228;
  _QWORD *v229;
  NSObject *v230;
  _QWORD *v231;
  _QWORD *v232;
  _QWORD *v233;
  NSObject *v234;
  _QWORD *v235;
  _QWORD *v236;
  _QWORD *v237;
  NSObject *v238;
  _QWORD *v239;
  _QWORD *v240;
  _QWORD *v241;
  NSObject *v242;
  _QWORD *v243;
  _QWORD *v244;
  _QWORD *v245;
  NSObject *v246;
  _QWORD *v247;
  _QWORD *v248;
  _QWORD *v249;
  NSObject *v250;
  _QWORD *v251;
  _QWORD *v252;
  _QWORD *v253;
  NSObject *v254;
  _QWORD *v255;
  _QWORD *v256;
  _QWORD *v257;
  NSObject *v258;
  _QWORD *v259;
  _QWORD *v260;
  _QWORD *v261;
  NSObject *v262;
  _QWORD *v263;
  _QWORD *v264;
  _QWORD *v265;
  NSObject *v266;
  _QWORD *v267;
  _QWORD *v268;
  _QWORD *v269;
  NSObject *v270;
  _QWORD *v271;
  _QWORD *v272;
  _QWORD *v273;
  NSObject *v274;
  _QWORD *v275;
  _QWORD *v276;
  _QWORD *v277;
  unsigned int v278;
  int v279;
  unsigned int v280;
  unsigned int v281;
  uint64_t v282;
  uint64_t v283;
  unsigned int v284;
  uint64_t v285;
  unsigned int v286;
  unsigned int v287;
  uint64_t v288;
  uint64_t v289;
  gss::Allocator *v290;
  uint64_t v291;
  unsigned int v292;
  _BYTE v293[4];
  unsigned int v294;
  uint8_t buf[4];
  const char *v296;
  __int16 v297;
  int v298;
  __int16 v299;
  const char *v300;
  uint64_t v301;

  v301 = *MEMORY[0x1E0C80C00];
  v10 = *((unsigned __int8 *)a2 + 24);
  v11 = v10 + 5;
  v12 = a2[1];
  v13 = a2[2];
  v14 = v13 + ((unint64_t)(v10 + 5) >> 3);
  v15 = (v10 + 5) & 7;
  v16 = v13 + 1;
  if (v14 < v13 + 1)
  {
    if (*((_BYTE *)a2 + 24))
      v17 = v13 + 1;
    else
      v17 = a2[2];
    if (v12 < v17)
      goto LABEL_14;
    if (*((_BYTE *)a2 + 24))
    {
      if (v12 >= v16)
      {
        v18 = (((1 << (8 - v10)) - 1) & *(unsigned __int8 *)(*a2 + v13)) << v10;
        goto LABEL_25;
      }
      goto LABEL_13;
    }
    if (v12 >= v16)
    {
      LOBYTE(v18) = *(_BYTE *)(*a2 + v13);
      goto LABEL_25;
    }
LABEL_13:
    a2[2] = v14;
    *((_BYTE *)a2 + 24) = v15;
LABEL_14:
    GEOGetGeoCSSStyleSheetLog();
    v20 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      v296 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleMatchingTree.hpp";
      v297 = 1024;
      v298 = 164;
      v299 = 2082;
      v300 = "Could not read number of bits used for end chain counts.";
      _os_log_impl(&dword_19F029000, v20, OS_LOG_TYPE_ERROR, "Read/write lock %s resulted in non-zero value %d", buf, 0x1Cu);
    }

    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a5, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleMatchingTree.hpp", 87);
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a5, (uint64_t)":", 1);
    v21 = (_QWORD *)std::ostream::operator<<();
    v22 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v21, (uint64_t)" STYL Parse Error Here: ", 24);
    v23 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v22, (uint64_t)"Could not read number of bits used for end chain counts.", 56);
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v23, (uint64_t)"\n", 1);
    return 0;
  }
  if (v10 <= 3)
    v19 = v13 + 1;
  else
    v19 = v13 + 2;
  if (v12 < v19)
    goto LABEL_13;
  v24 = *a2;
  if (*((_BYTE *)a2 + 24))
  {
    v25 = *(unsigned __int8 *)(v24 + v13);
    if (v16 >= v12)
      v26 = 0;
    else
      v26 = *(unsigned __int8 *)(v24 + v16);
    v18 = ((v26 & (0xFFFF << (8 - v10))) >> (8 - v10)) | ((((1 << (8 - v10)) + 255) & v25) << v10);
    a2[2] = v16;
  }
  else
  {
    LOBYTE(v18) = *(_BYTE *)(v24 + v13);
  }
LABEL_25:
  a2[2] = v14;
  *((_BYTE *)a2 + 24) = v15;
  *(_BYTE *)(a3 + 95) = (v18 >> 3) + 1;
  v27 = v11 & 7;
  v28 = (v11 & 7) + 5;
  v29 = v28 >> 3;
  v30 = v14 + v29;
  v31 = v28 & 7;
  v32 = v14 + 1;
  if (v14 + v29 < v14 + 1)
  {
    if (v15)
      v33 = v14 + 1;
    else
      v33 = v14;
    if (v12 < v33)
      goto LABEL_38;
    if (v15)
    {
      if (v12 >= v32)
      {
        v34 = *a2;
        v35 = (((1 << (8 - v15)) - 1) & *(unsigned __int8 *)(*a2 + v14)) << v27;
        goto LABEL_48;
      }
      goto LABEL_37;
    }
    v34 = *a2;
    a2[2] = v14;
    if (v12 >= v32)
      goto LABEL_45;
LABEL_37:
    a2[2] = v30;
    *((_BYTE *)a2 + 24) = v31;
LABEL_38:
    GEOGetGeoCSSStyleSheetLog();
    v37 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v37, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      v296 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleMatchingTree.hpp";
      v297 = 1024;
      v298 = 166;
      v299 = 2082;
      v300 = "Could not read number of bits used for end chain lengths.";
      _os_log_impl(&dword_19F029000, v37, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
    }

    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a5, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleMatchingTree.hpp", 87);
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a5, (uint64_t)":", 1);
    v38 = (_QWORD *)std::ostream::operator<<();
    v39 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v38, (uint64_t)" STYL Parse Error Here: ", 24);
    v40 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v39, (uint64_t)"Could not read number of bits used for end chain lengths.", 57);
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v40, (uint64_t)"\n", 1);
    return 0;
  }
  if (v15 <= 3)
    v36 = v14 + 1;
  else
    v36 = v14 + 2;
  if (v12 < v36)
    goto LABEL_37;
  v34 = *a2;
  if (!v15)
  {
LABEL_45:
    LOBYTE(v35) = *(_BYTE *)(v34 + v14);
    goto LABEL_48;
  }
  v41 = 8 - v15;
  v42 = *(unsigned __int8 *)(v34 + v14);
  if (v32 >= v12)
    v43 = 0;
  else
    v43 = *(unsigned __int8 *)(v34 + v32);
  v35 = ((v43 & (0xFFFF << v41)) >> v41) | ((((1 << v41) + 255) & v42) << v27);
  a2[2] = v32;
LABEL_48:
  a2[2] = v30;
  *((_BYTE *)a2 + 24) = v31;
  v44 = v28 & 7;
  v45 = (v28 & 7) + 5;
  v46 = v30 + (v45 >> 3);
  v47 = v45 & 7;
  v48 = v30 + 1;
  if (v46 < v30 + 1)
  {
    if (v31)
      v49 = v30 + 1;
    else
      v49 = v30;
    if (v12 < v49)
      goto LABEL_61;
    if (v31)
    {
      if (v12 >= v48)
      {
        v50 = (((1 << (8 - v31)) - 1) & *(unsigned __int8 *)(v34 + v30)) << v44;
        goto LABEL_71;
      }
      goto LABEL_60;
    }
    a2[2] = v30;
    if (v12 >= v48)
      goto LABEL_68;
LABEL_60:
    a2[2] = v46;
    *((_BYTE *)a2 + 24) = v47;
LABEL_61:
    GEOGetGeoCSSStyleSheetLog();
    v52 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v52, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      v296 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleMatchingTree.hpp";
      v297 = 1024;
      v298 = 168;
      v299 = 2082;
      v300 = "Could not read number of bits used for attribute value counts.";
      _os_log_impl(&dword_19F029000, v52, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
    }

    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a5, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleMatchingTree.hpp", 87);
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a5, (uint64_t)":", 1);
    v53 = (_QWORD *)std::ostream::operator<<();
    v54 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v53, (uint64_t)" STYL Parse Error Here: ", 24);
    v55 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v54, (uint64_t)"Could not read number of bits used for attribute value counts.", 62);
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v55, (uint64_t)"\n", 1);
    return 0;
  }
  if (v31 <= 3)
    v51 = v30 + 1;
  else
    v51 = v30 + 2;
  if (v12 < v51)
    goto LABEL_60;
  if (!v31)
  {
LABEL_68:
    LOBYTE(v50) = *(_BYTE *)(v34 + v30);
    goto LABEL_71;
  }
  v56 = 8 - v31;
  v57 = *(unsigned __int8 *)(v34 + v30);
  if (v48 >= v12)
    v58 = 0;
  else
    v58 = *(unsigned __int8 *)(v34 + v48);
  v50 = ((v58 & (0xFFFF << v56)) >> v56) | ((((1 << v56) + 255) & v57) << v44);
  a2[2] = v48;
LABEL_71:
  a2[2] = v46;
  *((_BYTE *)a2 + 24) = v47;
  v59 = v45 & 7;
  v60 = (v45 & 7) + 5;
  v61 = v46 + (v60 >> 3);
  v62 = v60 & 7;
  v63 = v46 + 1;
  if (v61 < v46 + 1)
  {
    if (v47)
      v64 = v46 + 1;
    else
      v64 = v46;
    if (v12 < v64)
      goto LABEL_84;
    if (v47)
    {
      if (v12 >= v63)
      {
        LODWORD(v34) = (((1 << (8 - v47)) - 1) & *(unsigned __int8 *)(v34 + v46)) << v59;
        goto LABEL_94;
      }
      goto LABEL_83;
    }
    a2[2] = v46;
    if (v12 >= v63)
      goto LABEL_91;
LABEL_83:
    a2[2] = v61;
    *((_BYTE *)a2 + 24) = v62;
LABEL_84:
    GEOGetGeoCSSStyleSheetLog();
    v66 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v66, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      v296 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleMatchingTree.hpp";
      v297 = 1024;
      v298 = 170;
      v299 = 2082;
      v300 = "Could not read number of bits used for node indices.";
      _os_log_impl(&dword_19F029000, v66, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
    }

    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a5, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleMatchingTree.hpp", 87);
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a5, (uint64_t)":", 1);
    v67 = (_QWORD *)std::ostream::operator<<();
    v68 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v67, (uint64_t)" STYL Parse Error Here: ", 24);
    v69 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v68, (uint64_t)"Could not read number of bits used for node indices.", 52);
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v69, (uint64_t)"\n", 1);
    return 0;
  }
  if (v47 <= 3)
    v65 = v46 + 1;
  else
    v65 = v46 + 2;
  if (v12 < v65)
    goto LABEL_83;
  if (!v47)
  {
LABEL_91:
    LOBYTE(v34) = *(_BYTE *)(v34 + v46);
    goto LABEL_94;
  }
  v70 = 8 - v47;
  v71 = *(unsigned __int8 *)(v34 + v46);
  if (v63 >= v12)
    v72 = 0;
  else
    v72 = *(unsigned __int8 *)(v34 + v63);
  LODWORD(v34) = ((v72 & (0xFFFF << v70)) >> v70) | ((((1 << v70) + 255) & v71) << v59);
  a2[2] = v63;
LABEL_94:
  a2[2] = v61;
  *((_BYTE *)a2 + 24) = v62;
  *(_BYTE *)(a3 + 96) = (v34 >> 3) + 1;
  v73 = v60 & 7;
  v74 = (v60 & 7) + 5;
  v75 = v61 + (v74 >> 3);
  v76 = v74 & 7;
  v77 = v61 + 1;
  if (v75 < v61 + 1)
  {
    if (v62)
      v78 = v61 + 1;
    else
      v78 = v61;
    if (v12 < v78)
      goto LABEL_107;
    if (v62)
    {
      if (v12 >= v77)
      {
        LODWORD(v61) = (((1 << (8 - v62)) - 1) & *(unsigned __int8 *)(*a2 + v61)) << v73;
        goto LABEL_118;
      }
      goto LABEL_106;
    }
    v88 = *a2;
    a2[2] = v61;
    if (v12 >= v77)
    {
      LOBYTE(v61) = *(_BYTE *)(v88 + v61);
      goto LABEL_118;
    }
LABEL_106:
    a2[2] = v75;
    *((_BYTE *)a2 + 24) = v76;
LABEL_107:
    GEOGetGeoCSSStyleSheetLog();
    v80 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v80, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      v296 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleMatchingTree.hpp";
      v297 = 1024;
      v298 = 172;
      v299 = 2082;
      v300 = "Could not read number of bits used for node child counts.";
      _os_log_impl(&dword_19F029000, v80, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
    }

    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a5, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleMatchingTree.hpp", 87);
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a5, (uint64_t)":", 1);
    v81 = (_QWORD *)std::ostream::operator<<();
    v82 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v81, (uint64_t)" STYL Parse Error Here: ", 24);
    v83 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v82, (uint64_t)"Could not read number of bits used for node child counts.", 57);
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v83, (uint64_t)"\n", 1);
    return 0;
  }
  if (v62 <= 3)
    v79 = v61 + 1;
  else
    v79 = v61 + 2;
  if (v12 < v79)
    goto LABEL_106;
  v84 = *a2;
  if (v62)
  {
    v85 = 8 - v62;
    v86 = *(unsigned __int8 *)(v84 + v61);
    if (v77 >= v12)
      v87 = 0;
    else
      v87 = *(unsigned __int8 *)(v84 + v77);
    LODWORD(v61) = ((v87 & (0xFFFF << v85)) >> v85) | ((((1 << v85) + 255) & v86) << v73);
    a2[2] = v77;
  }
  else
  {
    LOBYTE(v61) = *(_BYTE *)(v84 + v61);
  }
LABEL_118:
  a2[2] = v75;
  *((_BYTE *)a2 + 24) = v76;
  *(_BYTE *)(a3 + 97) = (v61 >> 3) + 1;
  v89 = v74 & 7;
  v90 = v75 + (((v74 & 7) + 5) >> 3);
  v91 = ((v74 & 7) + 5) & 7;
  v92 = v75 + 1;
  if (v90 >= v75 + 1)
  {
    if (v76 <= 3)
      v95 = v75 + 1;
    else
      v95 = v75 + 2;
    if (v12 >= v95)
    {
      v101 = *a2;
      if (v76)
      {
        v102 = 8 - v76;
        v103 = *(unsigned __int8 *)(v101 + v75);
        if (v92 >= v12)
          v104 = 0;
        else
          v104 = *(unsigned __int8 *)(v101 + v92);
        v94 = ((v104 & (0xFFFF << v102)) >> v102) | ((((1 << v102) + 255) & v103) << v89);
        a2[2] = v92;
      }
      else
      {
        LOBYTE(v94) = *(_BYTE *)(v101 + v75);
      }
      goto LABEL_143;
    }
    goto LABEL_130;
  }
  if (v76)
    v93 = v75 + 1;
  else
    v93 = v75;
  if (v12 < v93)
    goto LABEL_131;
  if (!v76)
  {
    v105 = *a2;
    a2[2] = v75;
    if (v12 >= v92)
    {
      LOBYTE(v94) = *(_BYTE *)(v105 + v75);
      goto LABEL_143;
    }
    goto LABEL_130;
  }
  if (v12 < v92)
  {
LABEL_130:
    a2[2] = v90;
    *((_BYTE *)a2 + 24) = v91;
LABEL_131:
    GEOGetGeoCSSStyleSheetLog();
    v96 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v96, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      v296 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleMatchingTree.hpp";
      v297 = 1024;
      v298 = 174;
      v299 = 2082;
      v300 = "Could not read number of bits used for chunk sizes.";
      _os_log_impl(&dword_19F029000, v96, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
    }

    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a5, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleMatchingTree.hpp", 87);
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a5, (uint64_t)":", 1);
    v97 = (_QWORD *)std::ostream::operator<<();
    v98 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v97, (uint64_t)" STYL Parse Error Here: ", 24);
    v99 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v98, (uint64_t)"Could not read number of bits used for chunk sizes.", 51);
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v99, (uint64_t)"\n", 1);
    return 0;
  }
  v94 = (((1 << (8 - v76)) - 1) & *(unsigned __int8 *)(*a2 + v75)) << v89;
LABEL_143:
  a2[2] = v90;
  *((_BYTE *)a2 + 24) = v91;
  v106 = (v94 >> 3) + 1;
  geo::ibitstream::readUIntBits(v293, a2, v106);
  if (!v293[0])
  {
    GEOGetGeoCSSStyleSheetLog();
    v170 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v170, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      v296 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleMatchingTree.hpp";
      v297 = 1024;
      v298 = 178;
      v299 = 2082;
      v300 = "Could not read end chain chunk.";
      _os_log_impl(&dword_19F029000, v170, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
    }

    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a5, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleMatchingTree.hpp", 87);
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a5, (uint64_t)":", 1);
    v171 = (_QWORD *)std::ostream::operator<<();
    v172 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v171, (uint64_t)" STYL Parse Error Here: ", 24);
    v173 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v172, (uint64_t)"Could not read end chain chunk.", 31);
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v173, (uint64_t)"\n", 1);
    return 0;
  }
  if (*((_BYTE *)a2 + 24))
  {
    *((_BYTE *)a2 + 24) = 0;
    ++a2[2];
  }
  geo::ibitstream::readUIntBits(v293, a2, *(unsigned __int8 *)(a3 + 95));
  if (!v293[0])
  {
    GEOGetGeoCSSStyleSheetLog();
    v174 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v174, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      v296 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleMatchingTree.hpp";
      v297 = 1024;
      v298 = 182;
      v299 = 2082;
      v300 = "Could not read number of end chains.";
      _os_log_impl(&dword_19F029000, v174, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
    }

    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a5, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleMatchingTree.hpp", 87);
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a5, (uint64_t)":", 1);
    v175 = (_QWORD *)std::ostream::operator<<();
    v176 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v175, (uint64_t)" STYL Parse Error Here: ", 24);
    v177 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v176, (uint64_t)"Could not read number of end chains.", 36);
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v177, (uint64_t)"\n", 1);
    return 0;
  }
  v107 = v294;
  v108 = (uint64_t *)(a1 + 24);
  geo::intern_vector<gss::MatchingGraphEndChain,geo::StdAllocator<gss::MatchingGraphEndChain,gss::Allocator>>::resize(a1 + 24, v294);
  v284 = v106;
  v283 = v107;
  if ((_DWORD)v107)
  {
    v288 = 0;
    v109 = (v35 >> 3) + 1;
    v286 = (v50 >> 3) + 1;
    v280 = v109;
    do
    {
      v110 = *v108;
      geo::ibitstream::readUIntBits(v293, a2, v109);
      if (!v293[0])
      {
        GEOGetGeoCSSStyleSheetLog();
        v198 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v198, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315650;
          v296 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleMatchingTree.hpp";
          v297 = 1024;
          v298 = 187;
          v299 = 2082;
          v300 = "Could not read end chain length.";
          _os_log_impl(&dword_19F029000, v198, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
        }

        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a5, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleMatchingTree.hpp", 87);
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a5, (uint64_t)":", 1);
        v199 = (_QWORD *)std::ostream::operator<<();
        v200 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v199, (uint64_t)" STYL Parse Error Here: ", 24);
        v201 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v200, (uint64_t)"Could not read end chain length.", 32);
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v201, (uint64_t)"\n", 1);
        return 0;
      }
      v111 = (gss::Allocator *)(v110 + 16 * v288);
      v112 = v294;
      v290 = v111;
      geo::intern_vector<std::pair<unsigned int,geo::intern_vector<unsigned int,geo::StdAllocator<unsigned int,gss::Allocator>>>,geo::StdAllocator<std::pair<unsigned int,geo::intern_vector<unsigned int,geo::StdAllocator<unsigned int,gss::Allocator>>>,gss::Allocator>>::resize(v111, v294);
      v285 = v112;
      if ((_DWORD)v112)
      {
        v113 = 0;
        do
        {
          v114 = *(_QWORD *)v290;
          v115 = (unsigned int *)(*(_QWORD *)v290 + 24 * v113);
          if (!gss::decodeAttributeEncoding(a2, v115, *(_BYTE *)(a3 + 13), *(_BYTE *)(a3 + 14), a5))
          {
            GEOGetGeoCSSStyleSheetLog();
            v190 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v190, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 136315650;
              v296 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleMatchingTree.hpp";
              v297 = 1024;
              v298 = 191;
              v299 = 2082;
              v300 = "Could not decode attributes.";
              _os_log_impl(&dword_19F029000, v190, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
            }

            std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a5, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleMatchingTree.hpp", 87);
            std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a5, (uint64_t)":", 1);
            v191 = (_QWORD *)std::ostream::operator<<();
            v192 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v191, (uint64_t)" STYL Parse Error Here: ", 24);
            v193 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v192, (uint64_t)"Could not decode attributes.", 28);
            std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v193, (uint64_t)"\n", 1);
            return 0;
          }
          geo::ibitstream::readUIntBits(v293, a2, v286);
          if (!v293[0])
          {
            GEOGetGeoCSSStyleSheetLog();
            v194 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v194, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 136315650;
              v296 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleMatchingTree.hpp";
              v297 = 1024;
              v298 = 193;
              v299 = 2082;
              v300 = "Could not read number of values.";
              _os_log_impl(&dword_19F029000, v194, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
            }

            std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a5, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleMatchingTree.hpp", 87);
            std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a5, (uint64_t)":", 1);
            v195 = (_QWORD *)std::ostream::operator<<();
            v196 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v195, (uint64_t)" STYL Parse Error Here: ", 24);
            v197 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v196, (uint64_t)"Could not read number of values.", 32);
            std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v197, (uint64_t)"\n", 1);
            return 0;
          }
          v116 = v294;
          v117 = (gss::Allocator *)(v114 + 24 * v113 + 8);
          geo::intern_vector<unsigned int,geo::StdAllocator<unsigned int,gss::Allocator>>::resize(v117, v294);
          if ((_DWORD)v116)
          {
            for (i = 0; i != v116; ++i)
            {
              v119 = *(uint64_t **)(a3 + 24);
              if (!v119)
LABEL_344:
                abort();
              v120 = *v115;
              while (1)
              {
                while (1)
                {
                  v121 = *((_DWORD *)v119 + 7);
                  if (v120 >= v121)
                    break;
                  v119 = (uint64_t *)*v119;
                  if (!v119)
                    goto LABEL_344;
                }
                if (v121 >= v120)
                  break;
                v119 = (uint64_t *)v119[1];
                if (!v119)
                  goto LABEL_344;
              }
              geo::ibitstream::readUIntBits(v293, a2, *((unsigned __int8 *)v119 + 32));
              if (!v293[0])
              {
                GEOGetGeoCSSStyleSheetLog();
                v178 = objc_claimAutoreleasedReturnValue();
                if (os_log_type_enabled(v178, OS_LOG_TYPE_ERROR))
                {
                  *(_DWORD *)buf = 136315650;
                  v296 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleMatchingTree.hpp";
                  v297 = 1024;
                  v298 = 196;
                  v299 = 2082;
                  v300 = "Could not read attribute value.";
                  _os_log_impl(&dword_19F029000, v178, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
                }

                std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a5, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleMatchingTree.hpp", 87);
                std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a5, (uint64_t)":", 1);
                v179 = (_QWORD *)std::ostream::operator<<();
                v180 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v179, (uint64_t)" STYL Parse Error Here: ", 24);
                v181 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v180, (uint64_t)"Could not read attribute value.", 31);
                std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v181, (uint64_t)"\n", 1);
                return 0;
              }
              *(_DWORD *)(*(_QWORD *)v117 + 4 * i) = v294;
            }
          }
          ++v113;
        }
        while (v113 != v285);
      }
      v108 = (uint64_t *)(a1 + 24);
      ++v288;
      v106 = v284;
      v109 = v280;
    }
    while (v288 != v283);
  }
  if (*((_BYTE *)a2 + 24))
  {
    *((_BYTE *)a2 + 24) = 0;
    ++a2[2];
  }
  geo::ibitstream::readUIntBits(v293, a2, *(unsigned __int8 *)(a3 + 96));
  if (!v293[0])
  {
    GEOGetGeoCSSStyleSheetLog();
    v182 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v182, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      v296 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleMatchingTree.hpp";
      v297 = 1024;
      v298 = 206;
      v299 = 2082;
      v300 = "Could not read number of style matching graph nodes.";
      _os_log_impl(&dword_19F029000, v182, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
    }

    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a5, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleMatchingTree.hpp", 87);
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a5, (uint64_t)":", 1);
    v183 = (_QWORD *)std::ostream::operator<<();
    v184 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v183, (uint64_t)" STYL Parse Error Here: ", 24);
    v185 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v184, (uint64_t)"Could not read number of style matching graph nodes.", 52);
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v185, (uint64_t)"\n", 1);
    return 0;
  }
  v122 = (uint64_t *)(a1 + 8);
  geo::intern_vector<gss::StyleMatchingTreeNode<gss::CartoStyle<gss::PropertyID>>,geo::StdAllocator<gss::StyleMatchingTreeNode<gss::CartoStyle<gss::PropertyID>>,gss::Allocator>>::resize(a1 + 8, v294);
  geo::ibitstream::readUIntBits(v293, a2, *(unsigned __int8 *)(a3 + 96));
  if (!v293[0])
  {
    GEOGetGeoCSSStyleSheetLog();
    v186 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v186, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      v296 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleMatchingTree.hpp";
      v297 = 1024;
      v298 = 208;
      v299 = 2082;
      v300 = "Could not read number of chunks.";
      _os_log_impl(&dword_19F029000, v186, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
    }

    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a5, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleMatchingTree.hpp", 87);
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a5, (uint64_t)":", 1);
    v187 = (_QWORD *)std::ostream::operator<<();
    v188 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v187, (uint64_t)" STYL Parse Error Here: ", 24);
    v189 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v188, (uint64_t)"Could not read number of chunks.", 32);
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v189, (uint64_t)"\n", 1);
    return 0;
  }
  v282 = a4;
  v123 = v294;
  if (*((_BYTE *)a2 + 24))
  {
    *((_BYTE *)a2 + 24) = 0;
    ++a2[2];
  }
  if (!v123)
  {
LABEL_260:
    *(_QWORD *)a1 = *(_QWORD *)(a1 + 8);
    return 1;
  }
  v124 = 0;
  v125 = 0;
  v278 = v123;
  while (1)
  {
    geo::ibitstream::readUIntBits(v293, a2, v106);
    if (!v293[0])
    {
      GEOGetGeoCSSStyleSheetLog();
      v218 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v218, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315650;
        v296 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleMatchingTree.hpp";
        v297 = 1024;
        v298 = 214;
        v299 = 2082;
        v300 = "Could not read chunk length.";
        _os_log_impl(&dword_19F029000, v218, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
      }

      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a5, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleMatchingTree.hpp", 87);
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a5, (uint64_t)":", 1);
      v219 = (_QWORD *)std::ostream::operator<<();
      v220 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v219, (uint64_t)" STYL Parse Error Here: ", 24);
      v221 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v220, (uint64_t)"Could not read chunk length.", 28);
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v221, (uint64_t)"\n", 1);
      return 0;
    }
    geo::ibitstream::readUIntBits(v293, a2, *(unsigned __int8 *)(a3 + 96));
    if (!v293[0])
    {
      GEOGetGeoCSSStyleSheetLog();
      v222 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v222, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315650;
        v296 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleMatchingTree.hpp";
        v297 = 1024;
        v298 = 215;
        v299 = 2082;
        v300 = "Could not read number of nodes in the chunk.";
        _os_log_impl(&dword_19F029000, v222, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
      }

      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a5, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleMatchingTree.hpp", 87);
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a5, (uint64_t)":", 1);
      v223 = (_QWORD *)std::ostream::operator<<();
      v224 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v223, (uint64_t)" STYL Parse Error Here: ", 24);
      v225 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v224, (uint64_t)"Could not read number of nodes in the chunk.", 44);
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v225, (uint64_t)"\n", 1);
      return 0;
    }
    v279 = v124;
    if (v294)
      break;
LABEL_257:
    if (*((_BYTE *)a2 + 24))
    {
      *((_BYTE *)a2 + 24) = 0;
      ++a2[2];
    }
    v124 = v279 + 1;
    v106 = v284;
    v122 = (uint64_t *)(a1 + 8);
    if (v279 + 1 == v278)
      goto LABEL_260;
  }
  v281 = v125 + v294;
  while (1)
  {
    v126 = *v122;
    v127 = *((unsigned __int8 *)a2 + 24);
    v129 = a2[1];
    v128 = a2[2];
    v130 = v128 + ((unint64_t)(v127 + 1) >> 3);
    v131 = (v127 + 1) & 7;
    v132 = v128 + 1;
    if (v130 >= v128 + 1)
    {
      if (v127 <= 7)
        v135 = v128 + 1;
      else
        v135 = v128 + 2;
      if (v129 < v135)
      {
LABEL_294:
        a2[2] = v130;
        *((_BYTE *)a2 + 24) = v131;
LABEL_295:
        GEOGetGeoCSSStyleSheetLog();
        v214 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v214, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315650;
          v296 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleMatchingTree.hpp";
          v297 = 1024;
          v298 = 259;
          v299 = 2082;
          v300 = "Could not read indication of node being terminal.";
          _os_log_impl(&dword_19F029000, v214, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
        }

        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a5, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleMatchingTree.hpp", 87);
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a5, (uint64_t)":", 1);
        v215 = (_QWORD *)std::ostream::operator<<();
        v216 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v215, (uint64_t)" STYL Parse Error Here: ", 24);
        v217 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v216, (uint64_t)"Could not read indication of node being terminal.", 49);
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v217, (uint64_t)"\n", 1);
        goto LABEL_341;
      }
      v136 = *a2;
      if (*((_BYTE *)a2 + 24))
      {
        v137 = v132 >= v129 ? 0 : *(unsigned __int8 *)(v136 + v132);
        v134 = ((v137 & (0xFFFF << (8 - v127))) >> (8 - v127)) | ((((1 << (8 - v127)) + 255) & *(unsigned __int8 *)(v136 + v128)) << v127);
        a2[2] = v132;
      }
      else
      {
        LOBYTE(v134) = *(_BYTE *)(v136 + v128);
      }
    }
    else
    {
      if (*((_BYTE *)a2 + 24))
        v133 = v128 + 1;
      else
        v133 = a2[2];
      if (v129 < v133)
        goto LABEL_295;
      if (*((_BYTE *)a2 + 24))
      {
        if (v129 < v132)
          goto LABEL_294;
        v134 = (((1 << (8 - v127)) - 1) & *(unsigned __int8 *)(*a2 + v128)) << v127;
      }
      else
      {
        if (v129 < v132)
          goto LABEL_294;
        LOBYTE(v134) = *(_BYTE *)(*a2 + v128);
      }
    }
    v138 = v125;
    v139 = (unsigned int *)(v126 + 24 * v125);
    a2[2] = v130;
    *((_BYTE *)a2 + 24) = v131;
    if ((v134 & 0x80) == 0)
      break;
    geo::ibitstream::readUIntBits(v293, a2, *(unsigned __int8 *)(a3 + 94));
    if (!v293[0])
    {
      GEOGetGeoCSSStyleSheetLog();
      v246 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v246, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315650;
        v296 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleMatchingTree.hpp";
        v297 = 1024;
        v298 = 263;
        v299 = 2082;
        v300 = "Could not read style index.";
        _os_log_impl(&dword_19F029000, v246, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
      }

      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a5, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleMatchingTree.hpp", 87);
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a5, (uint64_t)":", 1);
      v247 = (_QWORD *)std::ostream::operator<<();
      v248 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v247, (uint64_t)" STYL Parse Error Here: ", 24);
      v249 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v248, (uint64_t)"Could not read style index.", 27);
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v249, (uint64_t)"\n", 1);
      goto LABEL_341;
    }
    v149 = v294;
    geo::ibitstream::readUIntBits(v293, a2, *(unsigned __int8 *)(a3 + 95));
    if (!v293[0])
    {
      GEOGetGeoCSSStyleSheetLog();
      v250 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v250, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315650;
        v296 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleMatchingTree.hpp";
        v297 = 1024;
        v298 = 264;
        v299 = 2082;
        v300 = "Could not end chain index.";
        _os_log_impl(&dword_19F029000, v250, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
      }

      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a5, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleMatchingTree.hpp", 87);
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a5, (uint64_t)":", 1);
      v251 = (_QWORD *)std::ostream::operator<<();
      v252 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v251, (uint64_t)" STYL Parse Error Here: ", 24);
      v253 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v252, (uint64_t)"Could not end chain index.", 26);
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v253, (uint64_t)"\n", 1);
      goto LABEL_341;
    }
    if (v149 >= 0xFFFF)
    {
      GEOGetGeoCSSStyleSheetLog();
      v254 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v254, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315650;
        v296 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleMatchingTree.hpp";
        v297 = 1024;
        v298 = 266;
        v299 = 2082;
        v300 = "StyleIndex outside uint16 range";
        _os_log_impl(&dword_19F029000, v254, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
      }

      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a5, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleMatchingTree.hpp", 87);
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a5, (uint64_t)":", 1);
      v255 = (_QWORD *)std::ostream::operator<<();
      v256 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v255, (uint64_t)" STYL Parse Error Here: ", 24);
      v257 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v256, (uint64_t)"StyleIndex outside uint16 range", 31);
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v257, (uint64_t)"\n", 1);
      goto LABEL_341;
    }
    if (v149 >= *(unsigned __int16 *)(v282 + 8))
    {
      GEOGetGeoCSSStyleSheetLog();
      v258 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v258, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315650;
        v296 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleMatchingTree.hpp";
        v297 = 1024;
        v298 = 267;
        v299 = 2082;
        v300 = "StyleIndex outside styles range";
        _os_log_impl(&dword_19F029000, v258, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
      }

      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a5, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleMatchingTree.hpp", 87);
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a5, (uint64_t)":", 1);
      v259 = (_QWORD *)std::ostream::operator<<();
      v260 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v259, (uint64_t)" STYL Parse Error Here: ", 24);
      v261 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v260, (uint64_t)"StyleIndex outside styles range", 31);
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v261, (uint64_t)"\n", 1);
      goto LABEL_341;
    }
    v150 = v294;
    if (v294 >= 0xFFFF)
    {
      GEOGetGeoCSSStyleSheetLog();
      v262 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v262, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315650;
        v296 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleMatchingTree.hpp";
        v297 = 1024;
        v298 = 268;
        v299 = 2082;
        v300 = "EndChainIndex outside uint16 range";
        _os_log_impl(&dword_19F029000, v262, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
      }

      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a5, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleMatchingTree.hpp", 87);
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a5, (uint64_t)":", 1);
      v263 = (_QWORD *)std::ostream::operator<<();
      v264 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v263, (uint64_t)" STYL Parse Error Here: ", 24);
      v265 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v264, (uint64_t)"EndChainIndex outside uint16 range", 34);
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v265, (uint64_t)"\n", 1);
      goto LABEL_341;
    }
    *v139 = 0x7FFFFFFF;
    v151 = v126 + 24 * v138;
    *(_WORD *)(v151 + 4) = v149;
    *(_WORD *)(v151 + 6) = v150;
LABEL_255:
    v125 = v138 + 1;
    v122 = (uint64_t *)(a1 + 8);
    if (v138 + 1 == v281)
    {
      v125 = v281;
      goto LABEL_257;
    }
  }
  v287 = v138;
  *(_DWORD *)(v126 + 24 * v138 + 4) = 0;
  v292 = 0;
  if (!gss::decodeAttributeEncoding(a2, &v292, *(_BYTE *)(a3 + 13), *(_BYTE *)(a3 + 14), a5))
  {
    GEOGetGeoCSSStyleSheetLog();
    v226 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v226, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      v296 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleMatchingTree.hpp";
      v297 = 1024;
      v298 = 280;
      v299 = 2082;
      v300 = "Could not decode attribute.";
      _os_log_impl(&dword_19F029000, v226, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
    }

    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a5, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleMatchingTree.hpp", 87);
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a5, (uint64_t)":", 1);
    v227 = (_QWORD *)std::ostream::operator<<();
    v228 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v227, (uint64_t)" STYL Parse Error Here: ", 24);
    v229 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v228, (uint64_t)"Could not decode attribute.", 27);
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v229, (uint64_t)"\n", 1);
    goto LABEL_341;
  }
  v140 = v292;
  if (v292 == 0x7FFFFFFF)
  {
    GEOGetGeoCSSStyleSheetLog();
    v230 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v230, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      v296 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleMatchingTree.hpp";
      v297 = 1024;
      v298 = 281;
      v299 = 2082;
      v300 = "attribute is using sentinel value";
      _os_log_impl(&dword_19F029000, v230, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
    }

    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a5, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleMatchingTree.hpp", 87);
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a5, (uint64_t)":", 1);
    v231 = (_QWORD *)std::ostream::operator<<();
    v232 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v231, (uint64_t)" STYL Parse Error Here: ", 24);
    v233 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v232, (uint64_t)"attribute is using sentinel value", 33);
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v233, (uint64_t)"\n", 1);
    goto LABEL_341;
  }
  *v139 = v292;
  v141 = *((unsigned __int8 *)a2 + 24);
  v143 = a2[1];
  v142 = a2[2];
  v144 = v142 + ((unint64_t)(v141 + 1) >> 3);
  v145 = (v141 + 1) & 7;
  v146 = v142 + 1;
  if (v144 >= v142 + 1)
  {
    if (v141 <= 7)
      v152 = v142 + 1;
    else
      v152 = v142 + 2;
    if (v143 < v152)
    {
LABEL_310:
      a2[2] = v144;
      *((_BYTE *)a2 + 24) = v145;
LABEL_311:
      GEOGetGeoCSSStyleSheetLog();
      v234 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v234, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315650;
        v296 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleMatchingTree.hpp";
        v297 = 1024;
        v298 = 283;
        v299 = 2082;
        v300 = "Could not read indication of undefined node existing.";
        _os_log_impl(&dword_19F029000, v234, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
      }

      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a5, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleMatchingTree.hpp", 87);
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a5, (uint64_t)":", 1);
      v235 = (_QWORD *)std::ostream::operator<<();
      v236 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v235, (uint64_t)" STYL Parse Error Here: ", 24);
      v237 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v236, (uint64_t)"Could not read indication of undefined node existing.", 53);
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v237, (uint64_t)"\n", 1);
      goto LABEL_341;
    }
    v153 = *a2;
    if (*((_BYTE *)a2 + 24))
    {
      if (v146 >= v143)
        v154 = 0;
      else
        v154 = *(unsigned __int8 *)(v153 + v146);
      v148 = ((v154 & (0xFFFF << (8 - v141))) >> (8 - v141)) | ((((1 << (8 - v141)) + 255) & *(unsigned __int8 *)(v153 + v142)) << v141);
      a2[2] = v146;
    }
    else
    {
      LOBYTE(v148) = *(_BYTE *)(v153 + v142);
    }
  }
  else
  {
    if (*((_BYTE *)a2 + 24))
      v147 = v142 + 1;
    else
      v147 = a2[2];
    if (v143 < v147)
      goto LABEL_311;
    if (*((_BYTE *)a2 + 24))
    {
      if (v143 < v146)
        goto LABEL_310;
      v148 = (((1 << (8 - v141)) - 1) & *(unsigned __int8 *)(*a2 + v142)) << v141;
    }
    else
    {
      if (v143 < v146)
        goto LABEL_310;
      LOBYTE(v148) = *(_BYTE *)(*a2 + v142);
    }
  }
  a2[2] = v144;
  *((_BYTE *)a2 + 24) = v145;
  if ((v148 & 0x80) != 0)
  {
    geo::ibitstream::readUIntBits(v293, a2, *(unsigned __int8 *)(a3 + 96));
    if (!v293[0])
    {
      GEOGetGeoCSSStyleSheetLog();
      v266 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v266, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315650;
        v296 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleMatchingTree.hpp";
        v297 = 1024;
        v298 = 288;
        v299 = 2082;
        v300 = "Could not read undefined node index.";
        _os_log_impl(&dword_19F029000, v266, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
      }

      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a5, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleMatchingTree.hpp", 87);
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a5, (uint64_t)":", 1);
      v267 = (_QWORD *)std::ostream::operator<<();
      v268 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v267, (uint64_t)" STYL Parse Error Here: ", 24);
      v269 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v268, (uint64_t)"Could not read undefined node index.", 36);
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v269, (uint64_t)"\n", 1);
      goto LABEL_341;
    }
    if (v294 >= *(unsigned __int16 *)(a1 + 16))
    {
      GEOGetGeoCSSStyleSheetLog();
      v270 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v270, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315650;
        v296 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleMatchingTree.hpp";
        v297 = 1024;
        v298 = 289;
        v299 = 2082;
        v300 = "Undefined node index out of bounds";
        _os_log_impl(&dword_19F029000, v270, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
      }

      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a5, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleMatchingTree.hpp", 87);
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a5, (uint64_t)":", 1);
      v271 = (_QWORD *)std::ostream::operator<<();
      v272 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v271, (uint64_t)" STYL Parse Error Here: ", 24);
      v273 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v272, (uint64_t)"Undefined node index out of bounds", 34);
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v273, (uint64_t)"\n", 1);
      goto LABEL_341;
    }
    *(_WORD *)buf = -1;
    *(_WORD *)&buf[2] = v294;
    geo::intern_vector<gss::StyleMatchingTreeNode<gss::CartoStyle<gss::PropertyID>>::SubTreeNode,geo::StdAllocator<gss::StyleMatchingTreeNode<gss::CartoStyle<gss::PropertyID>>::SubTreeNode,gss::Allocator>>::push_back(v126 + 24 * v287 + 8, buf);
    v289 = 1;
  }
  else
  {
    v289 = 0;
  }
  geo::ibitstream::readUIntBits(v293, a2, *(unsigned __int8 *)(a3 + 97));
  if (!v293[0])
  {
    GEOGetGeoCSSStyleSheetLog();
    v238 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v238, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      v296 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleMatchingTree.hpp";
      v297 = 1024;
      v298 = 293;
      v299 = 2082;
      v300 = "Could not read number of children.";
      _os_log_impl(&dword_19F029000, v238, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
    }

    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a5, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleMatchingTree.hpp", 87);
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a5, (uint64_t)":", 1);
    v239 = (_QWORD *)std::ostream::operator<<();
    v240 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v239, (uint64_t)" STYL Parse Error Here: ", 24);
    v241 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v240, (uint64_t)"Could not read number of children.", 34);
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v241, (uint64_t)"\n", 1);
    goto LABEL_341;
  }
  v155 = v126 + 24 * v287;
  v157 = *(unsigned __int16 *)(v155 + 16);
  v156 = (unsigned __int16 *)(v155 + 16);
  v291 = v294;
  v158 = v157 + (unint64_t)v294;
  if (v158 >= 0xFFFF)
  {
    GEOGetGeoCSSStyleSheetLog();
    v242 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v242, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      v296 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleMatchingTree.hpp";
      v297 = 1024;
      v298 = 296;
      v299 = 2082;
      v300 = "SubTree nodes larger than uint16!";
      _os_log_impl(&dword_19F029000, v242, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
    }

    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a5, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleMatchingTree.hpp", 87);
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a5, (uint64_t)":", 1);
    v243 = (_QWORD *)std::ostream::operator<<();
    v244 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v243, (uint64_t)" STYL Parse Error Here: ", 24);
    v245 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v244, (uint64_t)"SubTree nodes larger than uint16!", 33);
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v245, (uint64_t)"\n", 1);
    goto LABEL_341;
  }
  v159 = (uint64_t *)(v156 - 4);
  geo::intern_vector<gss::StyleMatchingTreeNode<gss::CartoStyle<gss::PropertyID>>::SubTreeNode,geo::StdAllocator<gss::StyleMatchingTreeNode<gss::CartoStyle<gss::PropertyID>>::SubTreeNode,gss::Allocator>>::resize((gss::Allocator *)(v156 - 4), v158);
  geo::intern_vector<gss::StyleMatchingTreeNode<gss::CartoStyle<gss::ScenePropertyID>>::SubTreeNode,geo::StdAllocator<gss::StyleMatchingTreeNode<gss::CartoStyle<gss::ScenePropertyID>>::SubTreeNode,gss::Allocator>>::intern<geo::StdAllocator<gss::StyleMatchingTreeNode<gss::CartoStyle<gss::ScenePropertyID>>::SubTreeNode,gss::Allocator>>(v156 - 4, a1 + 40);
  if (!(_DWORD)v291)
  {
    v161 = *v159;
LABEL_254:
    std::sort[abi:nn180100]<gss::StyleMatchingTreeNode<gss::CartoStyle<gss::ScenePropertyID>>::SubTreeNode *,gss::StyleMatchingTreeNode<gss::CartoStyle<gss::ScenePropertyID>>::construct(geo::ibitstream &,gss::DecodingContext const&,geo::intern_vector<std::shared_ptr<gss::CartoStyle<gss::ScenePropertyID>>,geo::StdAllocator<std::shared_ptr<gss::CartoStyle<gss::ScenePropertyID>>,gss::Allocator>> const&,geo::intern_vector<gss::MatchingGraphEndChain,geo::StdAllocator<gss::MatchingGraphEndChain,gss::Allocator>> &,geo::intern_vector<gss::StyleMatchingTreeNode<gss::CartoStyle<gss::ScenePropertyID>>,geo::StdAllocator<gss::StyleMatchingTreeNode<gss::CartoStyle<gss::ScenePropertyID>>,gss::Allocator>> &,std::ostringstream &,geo::intern_allocator<gss::StyleMatchingTreeNode<gss::CartoStyle<gss::ScenePropertyID>>::SubTreeNode,geo::StdAllocator<gss::StyleMatchingTreeNode<gss::CartoStyle<gss::ScenePropertyID>>::SubTreeNode,gss::Allocator>> &)::{lambda(gss::StyleMatchingTreeNode<gss::CartoStyle<gss::ScenePropertyID>>::SubTreeNode const&,gss::StyleMatchingTreeNode<gss::CartoStyle<gss::ScenePropertyID>>::SubTreeNode const&)#1}>(v161, (int32x2_t *)(v161 + 4 * *v156));
    v138 = v287;
    goto LABEL_255;
  }
  v160 = 0;
  while (1)
  {
    v163 = *(uint64_t **)(a3 + 24);
    if (!v163)
LABEL_345:
      abort();
    while (1)
    {
      while (1)
      {
        v164 = *((_DWORD *)v163 + 7);
        if (v140 >= v164)
          break;
        v163 = (uint64_t *)*v163;
        if (!v163)
          goto LABEL_345;
      }
      if (v164 >= v140)
        break;
      v163 = (uint64_t *)v163[1];
      if (!v163)
        goto LABEL_345;
    }
    geo::ibitstream::readUIntBits(v293, a2, *((unsigned __int8 *)v163 + 32));
    if (!v293[0])
      break;
    LODWORD(v165) = v294;
    geo::ibitstream::readUIntBits(v293, a2, *(unsigned __int8 *)(a3 + 96));
    if (!v293[0])
    {
      GEOGetGeoCSSStyleSheetLog();
      v206 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v206, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315650;
        v296 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleMatchingTree.hpp";
        v297 = 1024;
        v298 = 305;
        v299 = 2082;
        v300 = "Could not read referenced node index.";
        _os_log_impl(&dword_19F029000, v206, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
      }

      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a5, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleMatchingTree.hpp", 87);
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a5, (uint64_t)":", 1);
      v207 = (_QWORD *)std::ostream::operator<<();
      v208 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v207, (uint64_t)" STYL Parse Error Here: ", 24);
      v209 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v208, (uint64_t)"Could not read referenced node index.", 37);
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v209, (uint64_t)"\n", 1);
      goto LABEL_341;
    }
    v166 = v294;
    if (v294 >= *(unsigned __int16 *)(a1 + 16))
    {
      GEOGetGeoCSSStyleSheetLog();
      v210 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v210, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315650;
        v296 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleMatchingTree.hpp";
        v297 = 1024;
        v298 = 306;
        v299 = 2082;
        v300 = "Referenced node index out of bounds";
        _os_log_impl(&dword_19F029000, v210, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
      }

      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a5, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleMatchingTree.hpp", 87);
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a5, (uint64_t)":", 1);
      v211 = (_QWORD *)std::ostream::operator<<();
      v212 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v211, (uint64_t)" STYL Parse Error Here: ", 24);
      v213 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v212, (uint64_t)"Referenced node index out of bounds", 35);
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v213, (uint64_t)"\n", 1);
      goto LABEL_341;
    }
    if (v165 >= 0xFFFF)
    {
      GEOGetGeoCSSStyleSheetLog();
      v165 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v165, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 136315650;
        v296 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleMatchingTree.hpp";
        v297 = 1024;
        v298 = 308;
        v299 = 2082;
        v300 = "AttributeValue nodes larger than uint16!";
        _os_log_impl(&dword_19F029000, v165, OS_LOG_TYPE_DEBUG, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
      }

      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a5, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleMatchingTree.hpp", 87);
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a5, (uint64_t)":", 1);
      v167 = (_QWORD *)std::ostream::operator<<();
      v168 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v167, (uint64_t)" STYL Parse Warning: ", 21);
      v169 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v168, (uint64_t)"AttributeValue nodes larger than uint16!", 40);
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v169, (uint64_t)"\n", 1);
      LOWORD(v165) = -1;
    }
    v161 = *v159;
    v162 = (_WORD *)(*v159 + 4 * (v160 + v289));
    *v162 = (_WORD)v165;
    v162[1] = v166;
    if (++v160 == v291)
      goto LABEL_254;
  }
  GEOGetGeoCSSStyleSheetLog();
  v202 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v202, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 136315650;
    v296 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleMatchingTree.hpp";
    v297 = 1024;
    v298 = 304;
    v299 = 2082;
    v300 = "Could not read attribute value.";
    _os_log_impl(&dword_19F029000, v202, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
  }

  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a5, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleMatchingTree.hpp", 87);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a5, (uint64_t)":", 1);
  v203 = (_QWORD *)std::ostream::operator<<();
  v204 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v203, (uint64_t)" STYL Parse Error Here: ", 24);
  v205 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v204, (uint64_t)"Could not read attribute value.", 31);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v205, (uint64_t)"\n", 1);
LABEL_341:
  GEOGetGeoCSSStyleSheetLog();
  v274 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v274, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 136315650;
    v296 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleMatchingTree.hpp";
    v297 = 1024;
    v298 = 218;
    v299 = 2082;
    v300 = "Could not construct node.";
    _os_log_impl(&dword_19F029000, v274, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
  }

  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a5, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleMatchingTree.hpp", 87);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a5, (uint64_t)":", 1);
  v275 = (_QWORD *)std::ostream::operator<<();
  v276 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v275, (uint64_t)" STYL Parse Error Here: ", 24);
  v277 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v276, (uint64_t)"Could not construct node.", 25);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v277, (uint64_t)"\n", 1);
  return 0;
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,gss::StyleMatchingTreeNode<gss::CartoStyle<gss::ScenePropertyID>>::construct(geo::ibitstream &,gss::DecodingContext const&,geo::intern_vector<std::shared_ptr<gss::CartoStyle<gss::ScenePropertyID>>,geo::StdAllocator<std::shared_ptr<gss::CartoStyle<gss::ScenePropertyID>>,gss::Allocator>> const&,geo::intern_vector<gss::MatchingGraphEndChain,geo::StdAllocator<gss::MatchingGraphEndChain,gss::Allocator>> &,geo::intern_vector<gss::StyleMatchingTreeNode<gss::CartoStyle<gss::ScenePropertyID>>,geo::StdAllocator<gss::StyleMatchingTreeNode<gss::CartoStyle<gss::ScenePropertyID>>,gss::Allocator>> &,std::ostringstream &,geo::intern_allocator<gss::StyleMatchingTreeNode<gss::CartoStyle<gss::ScenePropertyID>>::SubTreeNode,geo::StdAllocator<gss::StyleMatchingTreeNode<gss::CartoStyle<gss::ScenePropertyID>>::SubTreeNode,gss::Allocator>> &)::{lambda(gss::StyleMatchingTreeNode<gss::CartoStyle<gss::ScenePropertyID>>::SubTreeNode const&,gss::StyleMatchingTreeNode<gss::CartoStyle<gss::ScenePropertyID>>::SubTreeNode const&)#1} &,gss::StyleMatchingTreeNode<gss::CartoStyle<gss::ScenePropertyID>>::SubTreeNode*,false>(uint64_t result, int32x2_t *a2, uint64_t a3, char a4)
{
  int32x2_t *v7;
  __int32 *v8;
  int32x2_t *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unsigned __int16 *v13;
  unsigned int v14;
  unsigned int v15;
  __int32 v16;
  unsigned int v17;
  __int32 v18;
  __int32 v19;
  __int32 v20;
  __int32 v21;
  __int32 v22;
  char *v23;
  char *v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  __int32 v28;
  __int32 v29;
  __int32 v30;
  __int32 v31;
  char *v32;
  unsigned __int16 *v33;
  unsigned int v34;
  unsigned int v35;
  unsigned int v36;
  __int32 v37;
  __int32 v38;
  __int32 v39;
  unsigned int v40;
  unsigned int v41;
  unsigned int v42;
  __int32 v43;
  __int32 v44;
  __int32 v45;
  __int32 v46;
  int32x2_t *v47;
  unint64_t v48;
  unsigned int v49;
  int32x2_t *v50;
  unsigned int v51;
  unsigned int v52;
  unint64_t v53;
  int32x2_t *v54;
  __int32 v55;
  unsigned int v56;
  unsigned int v57;
  BOOL v58;
  unsigned int v59;
  unsigned int v60;
  int32x2_t *v61;
  int32x2_t *v62;
  unsigned int v63;
  __int32 v64;
  unsigned int v65;
  unsigned int v66;
  __int32 *v67;
  __int32 v68;
  unsigned int v69;
  unsigned int v70;
  unsigned int v71;
  unsigned int v72;
  unsigned int v73;
  __int32 v74;
  unsigned int v75;
  int32x2_t *v76;
  BOOL v78;
  uint64_t v79;
  int32x2_t *v80;
  int32x2_t *v81;
  unsigned int v82;
  unsigned int v83;
  __int32 v84;
  uint64_t v85;
  unsigned int v86;
  int64_t v87;
  int64_t v88;
  BOOL v89;
  uint64_t v90;
  unsigned __int16 *v91;
  unsigned int v92;
  unsigned int v93;
  BOOL v94;
  unsigned __int16 *v95;
  int v96;
  unsigned int v97;
  unsigned int v98;
  BOOL v99;
  _DWORD *v100;
  uint64_t v101;
  __int32 v102;
  __int32 v103;
  __int32 v104;
  unsigned int v105;
  unsigned int v106;
  __int32 v107;
  int32x2_t *v108;
  __int32 v109;
  uint64_t v110;
  uint64_t v111;
  __int32 v112;
  int32x2_t *v113;
  int32x2_t *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  unint64_t v118;
  int32x2_t *v119;
  __int32 v120;
  int32x2_t *v121;
  __int32 v122;
  __int32 v123;
  __int32 v124;
  __int32 v125;

  v7 = (int32x2_t *)result;
LABEL_2:
  v8 = (__int32 *)&a2[-1] + 1;
  v9 = v7;
  while (2)
  {
    v7 = v9;
    v10 = (char *)a2 - (char *)v9;
    v11 = ((char *)a2 - (char *)v9) >> 2;
    switch(v11)
    {
      case 0:
      case 1:
        return result;
      case 2:
        if (*(unsigned __int16 *)v8 < v9->u16[0])
        {
          v68 = v9->i32[0];
          goto LABEL_101;
        }
        return result;
      case 3:
        v69 = v9->u16[2];
        v70 = *(unsigned __int16 *)v8;
        if (v69 >= v9->u16[0])
        {
          if (v70 < v69)
          {
            v102 = v9->i32[1];
            v9->i32[1] = *v8;
            *v8 = v102;
            if (v9->u16[2] < v9->u16[0])
              *v9 = vrev64_s32(*v9);
          }
        }
        else
        {
          v68 = v9->i32[0];
          if (v70 >= v69)
          {
            v9->i32[0] = v9->i32[1];
            v9->i32[1] = v68;
            if (*(unsigned __int16 *)v8 < (unsigned __int16)v68)
            {
              v9->i32[1] = *v8;
              *v8 = v68;
            }
          }
          else
          {
LABEL_101:
            v9->i32[0] = *v8;
            *v8 = v68;
          }
        }
        return result;
      case 4:
        v71 = v9->u16[2];
        v72 = v9->u16[0];
        v73 = v9[1].u16[0];
        if (v71 >= v72)
        {
          if (v73 < v71)
          {
            v73 = v9->u32[1];
            v103 = v9[1].i32[0];
            v9->i32[1] = v103;
            v9[1].i32[0] = v73;
            v73 = (unsigned __int16)v73;
            if (v72 > (unsigned __int16)v103)
            {
              v104 = v9->i32[0];
              v9->i32[0] = v103;
              v9->i32[1] = v104;
            }
          }
        }
        else
        {
          v74 = v9->i32[0];
          v75 = (unsigned __int16)v9->i32[0];
          if (v73 >= v71)
          {
            v9->i32[0] = v9->i32[1];
            v9->i32[1] = v74;
            if (v73 >= v75)
              goto LABEL_181;
            v9->i32[1] = v9[1].i32[0];
          }
          else
          {
            v9->i32[0] = v9[1].i32[0];
          }
          v9[1].i32[0] = v74;
          v73 = v75;
        }
LABEL_181:
        if (*(unsigned __int16 *)v8 < v73)
        {
          v122 = v9[1].i32[0];
          v9[1].i32[0] = *v8;
          *v8 = v122;
          if (v9[1].u16[0] < v9->u16[2])
          {
            v124 = v9->i32[1];
            v123 = v9[1].i32[0];
            v9->i32[1] = v123;
            v9[1].i32[0] = v124;
            if (v9->u16[0] > (unsigned __int16)v123)
            {
              v125 = v9->i32[0];
              v9->i32[0] = v123;
              v9->i32[1] = v125;
            }
          }
        }
        return result;
      case 5:
        return (uint64_t)std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,gss::StyleMatchingTreeNode<gss::CartoStyle<gss::PropertyID>>::construct(geo::ibitstream &,gss::DecodingContext const&,geo::intern_vector<std::shared_ptr<gss::CartoStyle<gss::PropertyID>>,geo::StdAllocator<std::shared_ptr<gss::CartoStyle<gss::PropertyID>>,gss::Allocator>> const&,geo::intern_vector<gss::MatchingGraphEndChain,geo::StdAllocator<gss::MatchingGraphEndChain,gss::Allocator>> &,geo::intern_vector<gss::StyleMatchingTreeNode<gss::CartoStyle<gss::PropertyID>>,geo::StdAllocator<gss::StyleMatchingTreeNode<gss::CartoStyle<gss::PropertyID>>,gss::Allocator>> &,std::ostringstream &,geo::intern_allocator<gss::StyleMatchingTreeNode<gss::CartoStyle<gss::PropertyID>>::SubTreeNode,geo::StdAllocator<gss::StyleMatchingTreeNode<gss::CartoStyle<gss::PropertyID>>::SubTreeNode,gss::Allocator>> &)::{lambda(gss::StyleMatchingTreeNode<gss::CartoStyle<gss::PropertyID>>::SubTreeNode const&,gss::StyleMatchingTreeNode<gss::CartoStyle<gss::PropertyID>>::SubTreeNode const&)#1} &,gss::StyleMatchingTreeNode<gss::CartoStyle<gss::PropertyID>>::SubTreeNode*>((unsigned __int16 *)v9, (unsigned __int16 *)v9 + 2, (unsigned int *)&v9[1], (unsigned int *)&v9[1] + 1, (unsigned int *)&a2[-1] + 1);
      default:
        if (v10 <= 95)
        {
          v76 = (int32x2_t *)((char *)v9 + 4);
          v78 = v9 == a2 || v76 == a2;
          if ((a4 & 1) != 0)
          {
            if (!v78)
            {
              v79 = 0;
              v80 = v9;
              do
              {
                v82 = v80->u16[2];
                v83 = v80->u16[0];
                v80 = v76;
                if (v82 < v83)
                {
                  v84 = v76->i32[0];
                  v85 = v79;
                  do
                  {
                    *(__int32 *)((char *)&v9->i32[1] + v85) = *(__int32 *)((char *)v9->i32 + v85);
                    if (!v85)
                    {
                      v81 = v9;
                      goto LABEL_116;
                    }
                    v86 = *(unsigned __int16 *)((char *)&v9->u16[-2] + v85);
                    v85 -= 4;
                  }
                  while (v86 > (unsigned __int16)v84);
                  v81 = (int32x2_t *)((char *)v9 + v85 + 4);
LABEL_116:
                  v81->i32[0] = v84;
                }
                v76 = (int32x2_t *)((char *)v80 + 4);
                v79 += 4;
              }
              while (&v80->u8[4] != (unsigned __int8 *)a2);
            }
          }
          else if (!v78)
          {
            do
            {
              v105 = v7->u16[2];
              v106 = v7->u16[0];
              v7 = v76;
              if (v105 < v106)
              {
                v107 = v76->i32[0];
                do
                {
                  v108 = v76;
                  v109 = v76[-1].i32[1];
                  v76 = (int32x2_t *)((char *)v76 - 4);
                  v108->i32[0] = v109;
                }
                while (v108[-1].u16[0] > (unsigned __int16)v107);
                v76->i32[0] = v107;
              }
              v76 = (int32x2_t *)((char *)v7 + 4);
            }
            while (&v7->u8[4] != (unsigned __int8 *)a2);
          }
          return result;
        }
        if (!a3)
        {
          if (v9 != a2)
          {
            v87 = (unint64_t)(v11 - 2) >> 1;
            v88 = v87;
            do
            {
              if (v87 >= v88)
              {
                v90 = (2 * v88) | 1;
                v91 = (unsigned __int16 *)v9 + 2 * v90;
                if (2 * v88 + 2 >= v11)
                {
                  v92 = *v91;
                }
                else
                {
                  v92 = *v91;
                  v93 = v91[2];
                  v94 = v92 >= v93;
                  if (v92 <= v93)
                    v92 = v91[2];
                  if (!v94)
                  {
                    v91 += 2;
                    v90 = 2 * v88 + 2;
                  }
                }
                v95 = (unsigned __int16 *)v9 + 2 * v88;
                if (v92 >= *v95)
                {
                  v96 = *(_DWORD *)v95;
                  while (1)
                  {
                    v100 = v95;
                    v95 = v91;
                    *v100 = *(_DWORD *)v91;
                    if (v87 < v90)
                      break;
                    v101 = (2 * v90) | 1;
                    v91 = (unsigned __int16 *)v9 + 2 * v101;
                    v90 = 2 * v90 + 2;
                    if (v90 < v11)
                    {
                      v97 = *v91;
                      result = (uint64_t)(v91 + 2);
                      v98 = v91[2];
                      v99 = v97 >= v98;
                      if (v97 <= v98)
                        v97 = v91[2];
                      if (v99)
                        v90 = v101;
                      else
                        v91 += 2;
                      if (v97 < (unsigned __int16)v96)
                        break;
                    }
                    else
                    {
                      v90 = v101;
                      if (*v91 < (unsigned __int16)v96)
                        break;
                    }
                  }
                  *(_DWORD *)v95 = v96;
                }
              }
              v89 = v88-- <= 0;
            }
            while (!v89);
            v110 = (unint64_t)v10 >> 2;
            do
            {
              v111 = 0;
              v112 = v9->i32[0];
              v113 = v9;
              do
              {
                v114 = (int32x2_t *)((char *)v113 + 4 * v111 + 4);
                v115 = (2 * v111) | 1;
                v116 = 2 * v111 + 2;
                if (v116 < v110 && v114->u16[0] < v114->u16[2])
                {
                  v114 = (int32x2_t *)((char *)v114 + 4);
                  v115 = v116;
                }
                v113->i32[0] = v114->i32[0];
                v113 = v114;
                v111 = v115;
              }
              while (v115 <= (uint64_t)((unint64_t)(v110 - 2) >> 1));
              a2 = (int32x2_t *)((char *)a2 - 4);
              if (v114 == a2)
              {
                v114->i32[0] = v112;
              }
              else
              {
                v114->i32[0] = a2->i32[0];
                a2->i32[0] = v112;
                v117 = (char *)v114 - (char *)v9 + 4;
                if (v117 >= 5)
                {
                  v118 = (((unint64_t)v117 >> 2) - 2) >> 1;
                  v119 = (int32x2_t *)((char *)v9 + 4 * v118);
                  if (v119->u16[0] < v114->u16[0])
                  {
                    v120 = v114->i32[0];
                    do
                    {
                      v121 = v114;
                      v114 = v119;
                      v121->i32[0] = v119->i32[0];
                      if (!v118)
                        break;
                      v118 = (v118 - 1) >> 1;
                      v119 = (int32x2_t *)((char *)v9 + 4 * v118);
                    }
                    while (v119->u16[0] < (unsigned __int16)v120);
                    v114->i32[0] = v120;
                  }
                }
              }
              v89 = v110-- <= 2;
            }
            while (!v89);
          }
          return result;
        }
        v12 = (unint64_t)v11 >> 1;
        v13 = (unsigned __int16 *)v9 + 2 * ((unint64_t)v11 >> 1);
        v14 = *(unsigned __int16 *)v8;
        if ((unint64_t)v10 < 0x201)
        {
          v17 = v9->u16[0];
          if (v17 >= *v13)
          {
            if (v14 < v17)
            {
              v21 = v9->i32[0];
              v9->i32[0] = *v8;
              *v8 = v21;
              if (v9->u16[0] < *v13)
              {
                v22 = *(_DWORD *)v13;
                *(_DWORD *)v13 = v9->i32[0];
                v9->i32[0] = v22;
                --a3;
                if ((a4 & 1) != 0)
                  goto LABEL_33;
                goto LABEL_56;
              }
            }
          }
          else
          {
            v18 = *(_DWORD *)v13;
            if (v14 >= v17)
            {
              *(_DWORD *)v13 = v9->i32[0];
              v9->i32[0] = v18;
              if (*(unsigned __int16 *)v8 >= (unsigned __int16)v18)
                goto LABEL_32;
              v9->i32[0] = *v8;
            }
            else
            {
              *(_DWORD *)v13 = *v8;
            }
            *v8 = v18;
          }
LABEL_32:
          --a3;
          if ((a4 & 1) != 0)
            goto LABEL_33;
LABEL_56:
          v31 = v9->i32[0];
          if (v9[-1].u16[2] < v9->u16[0])
            goto LABEL_57;
          v59 = (unsigned __int16)v9->i32[0];
          if (*(unsigned __int16 *)v8 <= v59)
          {
            v61 = (int32x2_t *)((char *)v9 + 4);
            do
            {
              v9 = v61;
              if (v61 >= a2)
                break;
              v61 = (int32x2_t *)((char *)v61 + 4);
            }
            while (v9->u16[0] <= v59);
          }
          else
          {
            do
            {
              v60 = v9->u16[2];
              v9 = (int32x2_t *)((char *)v9 + 4);
            }
            while (v60 <= v59);
          }
          v62 = a2;
          if (v9 < a2)
          {
            v62 = a2;
            do
            {
              v63 = v62[-1].u16[2];
              v62 = (int32x2_t *)((char *)v62 - 4);
            }
            while (v63 > v59);
          }
          while (v9 < v62)
          {
            v64 = v9->i32[0];
            v9->i32[0] = v62->i32[0];
            v62->i32[0] = v64;
            do
            {
              v65 = v9->u16[2];
              v9 = (int32x2_t *)((char *)v9 + 4);
            }
            while (v65 <= v59);
            do
            {
              v66 = v62[-1].u16[2];
              v62 = (int32x2_t *)((char *)v62 - 4);
            }
            while (v66 > v59);
          }
          v67 = (__int32 *)&v9[-1] + 1;
          if (&v9[-1].u8[4] != (unsigned __int8 *)v7)
            v7->i32[0] = *v67;
          a4 = 0;
          *v67 = v31;
          continue;
        }
        v15 = *v13;
        if (v15 >= v9->u16[0])
        {
          if (v14 < v15)
          {
            v19 = *(_DWORD *)v13;
            *(_DWORD *)v13 = *v8;
            *v8 = v19;
            if (*v13 < v9->u16[0])
            {
              v20 = v9->i32[0];
              v9->i32[0] = *(_DWORD *)v13;
              *(_DWORD *)v13 = v20;
            }
          }
        }
        else
        {
          v16 = v9->i32[0];
          if (v14 < v15)
          {
            v9->i32[0] = *v8;
            goto LABEL_22;
          }
          v9->i32[0] = *(_DWORD *)v13;
          *(_DWORD *)v13 = v16;
          if (*(unsigned __int16 *)v8 < (unsigned __int16)v16)
          {
            *(_DWORD *)v13 = *v8;
LABEL_22:
            *v8 = v16;
          }
        }
        v23 = (char *)v9 + 4 * v12;
        v26 = *((unsigned __int16 *)v23 - 2);
        v24 = v23 - 4;
        v25 = v26;
        v27 = a2[-1].u16[0];
        if (v26 >= v9->u16[2])
        {
          if (v27 < v25)
          {
            v29 = *(_DWORD *)v24;
            *(_DWORD *)v24 = a2[-1].i32[0];
            a2[-1].i32[0] = v29;
            if (*(unsigned __int16 *)v24 < v9->u16[2])
            {
              v30 = v9->i32[1];
              v9->i32[1] = *(_DWORD *)v24;
              *(_DWORD *)v24 = v30;
            }
          }
        }
        else
        {
          v28 = v9->i32[1];
          if (v27 < v25)
          {
            v9->i32[1] = a2[-1].i32[0];
            goto LABEL_36;
          }
          v9->i32[1] = *(_DWORD *)v24;
          *(_DWORD *)v24 = v28;
          if (a2[-1].u16[0] < (unsigned __int16)v28)
          {
            *(_DWORD *)v24 = a2[-1].i32[0];
LABEL_36:
            a2[-1].i32[0] = v28;
          }
        }
        v32 = (char *)v9 + 4 * v12;
        v35 = *((unsigned __int16 *)v32 + 2);
        v33 = (unsigned __int16 *)(v32 + 4);
        v34 = v35;
        v36 = a2[-2].u16[2];
        if (v35 >= v9[1].u16[0])
        {
          if (v36 < v34)
          {
            v38 = *(_DWORD *)v33;
            *(_DWORD *)v33 = a2[-2].i32[1];
            a2[-2].i32[1] = v38;
            if (*v33 < v9[1].u16[0])
            {
              v39 = v9[1].i32[0];
              v9[1].i32[0] = *(_DWORD *)v33;
              *(_DWORD *)v33 = v39;
            }
          }
        }
        else
        {
          v37 = v9[1].i32[0];
          if (v36 < v34)
          {
            v9[1].i32[0] = a2[-2].i32[1];
            goto LABEL_45;
          }
          v9[1].i32[0] = *(_DWORD *)v33;
          *(_DWORD *)v33 = v37;
          if (a2[-2].u16[2] < (unsigned __int16)v37)
          {
            *(_DWORD *)v33 = a2[-2].i32[1];
LABEL_45:
            a2[-2].i32[1] = v37;
          }
        }
        v40 = *v13;
        v41 = *(unsigned __int16 *)v24;
        v42 = *v33;
        if (v40 >= v41)
        {
          v43 = *(_DWORD *)v13;
          if (v42 < v40)
          {
            v44 = *(_DWORD *)v33;
            *(_DWORD *)v13 = *(_DWORD *)v33;
            *(_DWORD *)v33 = v43;
            if (v41 <= (unsigned __int16)v44)
            {
              v43 = v44;
            }
            else
            {
              v43 = *(_DWORD *)v24;
              *(_DWORD *)v24 = v44;
              *(_DWORD *)v13 = v43;
            }
          }
        }
        else
        {
          v43 = *(_DWORD *)v24;
          if (v42 >= v40)
          {
            *(_DWORD *)v24 = *(_DWORD *)v13;
            *(_DWORD *)v13 = v43;
            if (v42 < (unsigned __int16)v43)
            {
              v45 = *(_DWORD *)v33;
              *(_DWORD *)v13 = *(_DWORD *)v33;
              *(_DWORD *)v33 = v43;
              v43 = v45;
            }
          }
          else
          {
            *(_DWORD *)v24 = *(_DWORD *)v33;
            *(_DWORD *)v33 = v43;
            v43 = *(_DWORD *)v13;
          }
        }
        v46 = v9->i32[0];
        v9->i32[0] = v43;
        *(_DWORD *)v13 = v46;
        --a3;
        if ((a4 & 1) == 0)
          goto LABEL_56;
LABEL_33:
        v31 = v9->i32[0];
LABEL_57:
        v47 = v9;
        do
        {
          v48 = (unint64_t)v47;
          v49 = v47->u16[2];
          v47 = (int32x2_t *)((char *)v47 + 4);
        }
        while (v49 < (unsigned __int16)v31);
        v50 = a2;
        if ((int32x2_t *)v48 == v9)
        {
          v50 = a2;
          do
          {
            if (v47 >= v50)
              break;
            v52 = v50[-1].u16[2];
            v50 = (int32x2_t *)((char *)v50 - 4);
          }
          while (v52 >= (unsigned __int16)v31);
        }
        else
        {
          do
          {
            v51 = v50[-1].u16[2];
            v50 = (int32x2_t *)((char *)v50 - 4);
          }
          while (v51 >= (unsigned __int16)v31);
        }
        if (v47 < v50)
        {
          v53 = (unint64_t)v47;
          v54 = v50;
          do
          {
            v55 = *(_DWORD *)v53;
            *(_DWORD *)v53 = v54->i32[0];
            v54->i32[0] = v55;
            do
            {
              v48 = v53;
              v56 = *(unsigned __int16 *)(v53 + 4);
              v53 += 4;
            }
            while (v56 < (unsigned __int16)v31);
            do
            {
              v57 = v54[-1].u16[2];
              v54 = (int32x2_t *)((char *)v54 - 4);
            }
            while (v57 >= (unsigned __int16)v31);
          }
          while (v53 < (unint64_t)v54);
        }
        if ((int32x2_t *)v48 != v9)
          v9->i32[0] = *(_DWORD *)v48;
        *(_DWORD *)v48 = v31;
        if (v47 < v50)
        {
LABEL_76:
          result = std::__introsort<std::_ClassicAlgPolicy,gss::StyleMatchingTreeNode<gss::CartoStyle<gss::ScenePropertyID>>::construct(geo::ibitstream &,gss::DecodingContext const&,geo::intern_vector<std::shared_ptr<gss::CartoStyle<gss::ScenePropertyID>>,geo::StdAllocator<std::shared_ptr<gss::CartoStyle<gss::ScenePropertyID>>,gss::Allocator>> const&,geo::intern_vector<gss::MatchingGraphEndChain,geo::StdAllocator<gss::MatchingGraphEndChain,gss::Allocator>> &,geo::intern_vector<gss::StyleMatchingTreeNode<gss::CartoStyle<gss::ScenePropertyID>>,geo::StdAllocator<gss::StyleMatchingTreeNode<gss::CartoStyle<gss::ScenePropertyID>>,gss::Allocator>> &,std::ostringstream &,geo::intern_allocator<gss::StyleMatchingTreeNode<gss::CartoStyle<gss::ScenePropertyID>>::SubTreeNode,geo::StdAllocator<gss::StyleMatchingTreeNode<gss::CartoStyle<gss::ScenePropertyID>>::SubTreeNode,gss::Allocator>> &)::{lambda(gss::StyleMatchingTreeNode<gss::CartoStyle<gss::ScenePropertyID>>::SubTreeNode const&,gss::StyleMatchingTreeNode<gss::CartoStyle<gss::ScenePropertyID>>::SubTreeNode const&)#1} &,gss::StyleMatchingTreeNode<gss::CartoStyle<gss::ScenePropertyID>>::SubTreeNode*,false>(v7, v48, a3, a4 & 1);
          a4 = 0;
          v9 = (int32x2_t *)(v48 + 4);
          continue;
        }
        v58 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,gss::StyleMatchingTreeNode<gss::CartoStyle<gss::ScenePropertyID>>::construct(geo::ibitstream &,gss::DecodingContext const&,geo::intern_vector<std::shared_ptr<gss::CartoStyle<gss::ScenePropertyID>>,geo::StdAllocator<std::shared_ptr<gss::CartoStyle<gss::ScenePropertyID>>,gss::Allocator>> const&,geo::intern_vector<gss::MatchingGraphEndChain,geo::StdAllocator<gss::MatchingGraphEndChain,gss::Allocator>> &,geo::intern_vector<gss::StyleMatchingTreeNode<gss::CartoStyle<gss::ScenePropertyID>>,geo::StdAllocator<gss::StyleMatchingTreeNode<gss::CartoStyle<gss::ScenePropertyID>>,gss::Allocator>> &,std::ostringstream &,geo::intern_allocator<gss::StyleMatchingTreeNode<gss::CartoStyle<gss::ScenePropertyID>>::SubTreeNode,geo::StdAllocator<gss::StyleMatchingTreeNode<gss::CartoStyle<gss::ScenePropertyID>>::SubTreeNode,gss::Allocator>> &)::{lambda(gss::StyleMatchingTreeNode<gss::CartoStyle<gss::ScenePropertyID>>::SubTreeNode const&,gss::StyleMatchingTreeNode<gss::CartoStyle<gss::ScenePropertyID>>::SubTreeNode const&)#1} &,gss::StyleMatchingTreeNode<gss::CartoStyle<gss::ScenePropertyID>>::SubTreeNode*>(v9, (int32x2_t *)v48);
        v9 = (int32x2_t *)(v48 + 4);
        result = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,gss::StyleMatchingTreeNode<gss::CartoStyle<gss::ScenePropertyID>>::construct(geo::ibitstream &,gss::DecodingContext const&,geo::intern_vector<std::shared_ptr<gss::CartoStyle<gss::ScenePropertyID>>,geo::StdAllocator<std::shared_ptr<gss::CartoStyle<gss::ScenePropertyID>>,gss::Allocator>> const&,geo::intern_vector<gss::MatchingGraphEndChain,geo::StdAllocator<gss::MatchingGraphEndChain,gss::Allocator>> &,geo::intern_vector<gss::StyleMatchingTreeNode<gss::CartoStyle<gss::ScenePropertyID>>,geo::StdAllocator<gss::StyleMatchingTreeNode<gss::CartoStyle<gss::ScenePropertyID>>,gss::Allocator>> &,std::ostringstream &,geo::intern_allocator<gss::StyleMatchingTreeNode<gss::CartoStyle<gss::ScenePropertyID>>::SubTreeNode,geo::StdAllocator<gss::StyleMatchingTreeNode<gss::CartoStyle<gss::ScenePropertyID>>::SubTreeNode,gss::Allocator>> &)::{lambda(gss::StyleMatchingTreeNode<gss::CartoStyle<gss::ScenePropertyID>>::SubTreeNode const&,gss::StyleMatchingTreeNode<gss::CartoStyle<gss::ScenePropertyID>>::SubTreeNode const&)#1} &,gss::StyleMatchingTreeNode<gss::CartoStyle<gss::ScenePropertyID>>::SubTreeNode*>((int32x2_t *)(v48 + 4), a2);
        if (!(_DWORD)result)
        {
          if (v58)
            continue;
          goto LABEL_76;
        }
        a2 = (int32x2_t *)v48;
        if (!v58)
          goto LABEL_2;
        return result;
    }
  }
}

void geo::intern_vector<gss::StyleMatchingTreeNode<gss::CartoStyle<gss::ScenePropertyID>>::SubTreeNode,geo::StdAllocator<gss::StyleMatchingTreeNode<gss::CartoStyle<gss::ScenePropertyID>>::SubTreeNode,gss::Allocator>>::intern<geo::StdAllocator<gss::StyleMatchingTreeNode<gss::CartoStyle<gss::ScenePropertyID>>::SubTreeNode,gss::Allocator>>(_WORD *a1, uint64_t a2)
{
  _WORD *v2;
  unint64_t v3;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  gss::Allocator *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  gss::Allocator **v12;
  _QWORD *v13;
  _QWORD *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  gss::Allocator **v21;
  char *v22;
  unint64_t v23;
  uint64_t v24;
  _OWORD *v25;
  gss::Allocator **v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  gss::Allocator *v30;
  gss::Allocator **v31;
  _QWORD *v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int *v38;
  int v39;
  _DWORD *v40;
  uint64_t v41;
  uint64_t v42;
  __int128 *v43;
  _OWORD *v44;
  uint64_t v45;
  __int128 v46;
  int v47;
  uint64_t v48;

  if (!*((_BYTE *)a1 + 12))
  {
    v2 = a1;
    v3 = (unsigned __int16)a1[4];
    if (!a1[4])
    {
LABEL_49:
      *((_BYTE *)v2 + 12) = 1;
      return;
    }
    if (*(_DWORD *)(a2 + 24) >= v3)
    {
      v5 = *(_QWORD *)(a2 + 8);
      if (*(_QWORD *)a2 == v5 || (v6 = *(uint64_t **)(v5 - 8), v7 = v6[1], v6[2] - v7 < v3))
      {
        v8 = (gss::Allocator *)operator new();
        v9 = *(unsigned int *)(a2 + 24);
        *(_QWORD *)v8 = 0;
        *((_QWORD *)v8 + 1) = 0;
        *((_QWORD *)v8 + 2) = v9;
        v10 = gss::Allocator::instance(v8);
        a1 = (_WORD *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v10 + 16))(v10, 4 * v9, 2);
        *(_QWORD *)v8 = a1;
        v12 = *(gss::Allocator ***)(a2 + 8);
        v11 = *(_QWORD *)(a2 + 16);
        if ((unint64_t)v12 >= v11)
        {
          v15 = *(char **)a2;
          v16 = (uint64_t)v12 - *(_QWORD *)a2;
          v17 = v16 >> 3;
          v18 = (v16 >> 3) + 1;
          if (v18 >> 61)
            abort();
          v19 = v11 - (_QWORD)v15;
          if (v19 >> 2 > v18)
            v18 = v19 >> 2;
          if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFF8)
            v20 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v20 = v18;
          if (v20)
          {
            if (v20 >> 61)
              std::__throw_bad_array_new_length[abi:nn180100]();
            a1 = operator new(8 * v20);
          }
          else
          {
            a1 = 0;
          }
          v21 = (gss::Allocator **)&a1[4 * v17];
          v22 = (char *)&a1[4 * v20];
          *v21 = v8;
          v14 = v21 + 1;
          if (v12 == (gss::Allocator **)v15)
          {
            *(_QWORD *)a2 = v21;
            *(_QWORD *)(a2 + 8) = v14;
            *(_QWORD *)(a2 + 16) = v22;
          }
          else
          {
            v23 = (char *)v12 - v15 - 8;
            if (v23 <= 0x77
              || (gss::Allocator **)((char *)v12 - (v23 & 0xFFFFFFFFFFFFFFF8) - 8) < v21
              && (gss::Allocator **)((char *)a1 + v16 - (v23 & 0xFFFFFFFFFFFFFFF8) - 8) < v12)
            {
              goto LABEL_55;
            }
            v24 = (v23 >> 3) + 1;
            v25 = &a1[4 * v17 - 8];
            v26 = v12 - 4;
            v27 = v24 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v29 = *(_OWORD *)v26;
              v28 = *((_OWORD *)v26 + 1);
              *(_OWORD *)v26 = 0uLL;
              *((_OWORD *)v26 + 1) = 0uLL;
              v26 -= 4;
              *(v25 - 1) = v29;
              *v25 = v28;
              v25 -= 2;
              v27 -= 4;
            }
            while (v27);
            v21 -= v24 & 0x3FFFFFFFFFFFFFFCLL;
            v12 -= v24 & 0x3FFFFFFFFFFFFFFCLL;
            if (v24 != (v24 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_55:
              do
              {
                v30 = *--v12;
                *v12 = 0;
                *--v21 = v30;
              }
              while (v12 != (gss::Allocator **)v15);
            }
            v12 = *(gss::Allocator ***)a2;
            v31 = *(gss::Allocator ***)(a2 + 8);
            *(_QWORD *)a2 = v21;
            *(_QWORD *)(a2 + 8) = v14;
            *(_QWORD *)(a2 + 16) = v22;
            while (v31 != v12)
            {
              v33 = *--v31;
              v32 = v33;
              *v31 = 0;
              if (v33)
              {
                v34 = gss::Allocator::instance((gss::Allocator *)a1);
                (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v34 + 40))(v34, *v32, 4 * v32[2]);
                a1 = (_WORD *)MEMORY[0x1A1AF4E00](v32, 0x1020C4024DAA5DELL);
              }
            }
          }
          if (v12)
            operator delete(v12);
          *(_QWORD *)(a2 + 8) = v14;
        }
        else
        {
          *v12 = v8;
          v13 = v12 + 1;
          *(_QWORD *)(a2 + 8) = v13;
          v14 = v13;
        }
        v6 = (uint64_t *)*(v14 - 1);
        v7 = v6[1];
      }
      v35 = *v6;
      v6[1] = v7 + v3;
      if (v35)
      {
        v36 = v35 + 4 * v7;
        v37 = (unsigned __int16)v2[4];
        if (v2[4])
        {
          v38 = *(int **)v2;
          if (v37 < 8)
          {
            v39 = (unsigned __int16)v2[4];
            v40 = (_DWORD *)(v35 + 4 * v7);
          }
          else
          {
            v39 = (unsigned __int16)v2[4];
            v40 = (_DWORD *)(v35 + 4 * v7);
            if ((unint64_t)(v36 - (_QWORD)v38) >= 0x20)
            {
              v41 = (unsigned __int16)v37 & 0xFFF8;
              v42 = 4 * v41;
              v40 = (_DWORD *)(v36 + 4 * v41);
              v43 = (__int128 *)(v38 + 4);
              v44 = (_OWORD *)(v35 + 4 * v7 + 16);
              v45 = v41;
              do
              {
                v46 = *v43;
                *(v44 - 1) = *(v43 - 1);
                *v44 = v46;
                v43 += 2;
                v44 += 2;
                v45 -= 8;
              }
              while (v45);
              if (v41 == v37)
                goto LABEL_45;
              v39 = v37 - v41;
              v38 = (int *)((char *)v38 + v42);
            }
          }
          do
          {
            v47 = *v38++;
            *v40++ = v47;
            --v39;
          }
          while ((_WORD)v39);
        }
LABEL_45:
        if (!*((_BYTE *)v2 + 12))
        {
          if (*(_QWORD *)v2)
          {
            v48 = gss::Allocator::instance((gss::Allocator *)a1);
            (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v48 + 40))(v48, *(_QWORD *)v2, 4 * (unsigned __int16)v2[5]);
          }
        }
        v2[4] = v37;
        v2[5] = 0;
        *(_QWORD *)v2 = v36;
        goto LABEL_49;
      }
    }
  }
}

void sub_19F0E9CA0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<geo::intern_allocator<gss::StyleMatchingTreeNode<gss::CartoStyle<gss::PropertyID>>::SubTreeNode,geo::StdAllocator<gss::StyleMatchingTreeNode<gss::CartoStyle<gss::PropertyID>>::SubTreeNode,gss::Allocator>>::PageInfo,std::default_delete<geo::intern_allocator<gss::StyleMatchingTreeNode<gss::CartoStyle<gss::PropertyID>>::SubTreeNode,geo::StdAllocator<gss::StyleMatchingTreeNode<gss::CartoStyle<gss::PropertyID>>::SubTreeNode,gss::Allocator>>::PageInfo>>::~unique_ptr[abi:nn180100]((gss::Allocator *)va);
  _Unwind_Resume(a1);
}

void sub_19F0E9CB4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AF4E00](v1, 0x1020C4024DAA5DELL);
  _Unwind_Resume(a1);
}

uint64_t geo::intern_vector<gss::MatchingGraphEndChain,geo::StdAllocator<gss::MatchingGraphEndChain,gss::Allocator>>::resize(uint64_t result, unint64_t a2)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int *v26;
  __int16 v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  __int16 v35;

  if (!*(_BYTE *)(result + 12))
  {
    v2 = a2;
    v3 = result;
    v4 = *(unsigned __int16 *)(result + 8);
    if (v4 > a2)
    {
      v5 = *(_QWORD *)result + 16 * a2;
      v6 = *(_QWORD *)result + 16 * v4;
      do
      {
        if (!*(_BYTE *)(v5 + 12) && *(_QWORD *)v5)
        {
          if (*(_WORD *)(v5 + 8))
          {
            v8 = 24 * *(unsigned __int16 *)(v5 + 8);
            v9 = (_BYTE *)(*(_QWORD *)v5 + 20);
            do
            {
              v10 = v9 - 12;
              if (!*v9)
              {
                if (*v10)
                {
                  v11 = gss::Allocator::instance((gss::Allocator *)result);
                  result = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v11 + 40))(v11, *(_QWORD *)(v9 - 12), 4 * *((unsigned __int16 *)v9 - 1));
                }
              }
              *(_QWORD *)(v9 - 7) = 0;
              *v10 = 0;
              v9 += 24;
              v8 -= 24;
            }
            while (v8);
          }
          v7 = gss::Allocator::instance((gss::Allocator *)result);
          result = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v7 + 40))(v7, *(_QWORD *)v5, 24 * *(unsigned __int16 *)(v5 + 10));
        }
        *(_QWORD *)(v5 + 5) = 0;
        *(_QWORD *)v5 = 0;
        v5 += 16;
      }
      while (v5 != v6);
      goto LABEL_39;
    }
    if (v4 >= a2)
      return result;
    v12 = 16 * a2;
    if (*(unsigned __int16 *)(result + 10) >= a2)
    {
      result = *(_QWORD *)result;
      if (v4 == a2)
      {
LABEL_39:
        *(_WORD *)(v3 + 8) = v2;
        return result;
      }
    }
    else
    {
      v13 = gss::Allocator::instance((gss::Allocator *)result);
      result = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)v13 + 16))(v13, 16 * v2, 8);
      v14 = *(uint64_t **)v3;
      v4 = *(unsigned __int16 *)(v3 + 8);
      if (*(_QWORD *)v3)
      {
        v32 = v2;
        v33 = result;
        v31 = 16 * v2;
        v34 = *(unsigned __int16 *)(v3 + 8);
        if (*(_WORD *)(v3 + 8))
        {
          v15 = result;
          v16 = *(unsigned __int16 *)(v3 + 8);
          do
          {
            *(_QWORD *)(v15 + 5) = 0;
            *(_QWORD *)v15 = 0;
            *(_QWORD *)(v15 + 5) = 0;
            *(_QWORD *)v15 = 0;
            v17 = *v14;
            if (*((_BYTE *)v14 + 12))
            {
              *(_QWORD *)v15 = v17;
              *(_DWORD *)(v15 + 8) = *((_DWORD *)v14 + 2);
              *(_BYTE *)(v15 + 12) = 1;
            }
            else
            {
              v18 = *((unsigned __int16 *)v14 + 4);
              if (*((_WORD *)v14 + 4))
              {
                v19 = gss::Allocator::instance((gss::Allocator *)result);
                v20 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v19 + 16))(v19, 24 * v18, 8);
                if (*(_QWORD *)v15)
                  geo::intern_vector<std::pair<unsigned int,geo::intern_vector<unsigned int,geo::StdAllocator<unsigned int,gss::Allocator>>>,geo::StdAllocator<std::pair<unsigned int,geo::intern_vector<unsigned int,geo::StdAllocator<unsigned int,gss::Allocator>>>,gss::Allocator>>::moveContent((gss::Allocator *)v15, v20);
                v21 = 0;
                v22 = v17 + 24 * v18;
                v35 = v18;
                *(_WORD *)(v15 + 10) = v18;
                *(_QWORD *)v15 = v20;
                v23 = v20 + 24 * *(unsigned __int16 *)(v15 + 8);
                do
                {
                  v24 = v17 + v21;
                  v25 = v23 + v21;
                  *(_DWORD *)v25 = *(_DWORD *)(v17 + v21);
                  *(_QWORD *)(v23 + v21 + 8) = 0;
                  result = v23 + v21 + 8;
                  *(_QWORD *)(v25 + 13) = 0;
                  v26 = *(int **)(v17 + v21 + 8);
                  if (*(_BYTE *)(v17 + v21 + 20))
                  {
                    *(_QWORD *)result = v26;
                    *(_DWORD *)(v25 + 16) = *(_DWORD *)(v24 + 16);
                    *(_BYTE *)(v25 + 20) = 1;
                  }
                  else
                  {
                    result = geo::intern_vector<unsigned int,geo::StdAllocator<unsigned int,gss::Allocator>>::append<unsigned int *>(result, v26, (char *)&v26[*(unsigned __int16 *)(v24 + 16)]);
                  }
                  v21 += 24;
                }
                while (v24 + 24 != v22);
                v27 = *(_WORD *)(v15 + 8);
                LOWORD(v18) = v35;
              }
              else
              {
                v27 = 0;
              }
              *(_WORD *)(v15 + 8) = v27 + v18;
            }
            v15 += 16;
            v14 += 2;
            --v16;
          }
          while ((_WORD)v16);
        }
        geo::intern_vector<gss::MatchingGraphEndChain,geo::StdAllocator<gss::MatchingGraphEndChain,gss::Allocator>>::deallocateStorage(v3);
        v12 = v31;
        v2 = v32;
        result = v33;
        v4 = v34;
      }
      *(_WORD *)(v3 + 10) = v2;
      *(_QWORD *)v3 = result;
      if (v4 == v2)
        goto LABEL_39;
    }
    v28 = 16 * v4;
    v29 = (_QWORD *)(result + v28);
    v30 = v12 - v28;
    do
    {
      *(_QWORD *)((char *)v29 + 5) = 0;
      *v29 = 0;
      v29 += 2;
      v30 -= 16;
    }
    while (v30);
    goto LABEL_39;
  }
  return result;
}

_QWORD *__destroy_helper_block_ea8_40c27_ZTSNSt3__18functionIFvbEEE(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *result;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 40);
  result = *(_QWORD **)(a1 + 64);
  if (result == v1)
  {
    v3 = 4;
    result = v1;
  }
  else
  {
    if (!result)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

_QWORD *std::__hash_table<geo::fast_shared_ptr<md::LabelFeatureThunk<md::UniLineLabelFeature,GeoCodecsFeature,geo::codec::VectorTile>,mdm::MDAllocator>,md::LabelFeatureThunk<md::UniLineLabelFeature,GeoCodecsFeature,geo::codec::VectorTile>::FeatureHash<geo::fast_shared_ptr<md::LabelFeatureThunk<md::UniLineLabelFeature,GeoCodecsFeature,geo::codec::VectorTile>,mdm::MDAllocator>>,md::LabelFeatureThunk<md::UniLineLabelFeature,GeoCodecsFeature,geo::codec::VectorTile>::FeatureEqual<geo::fast_shared_ptr<md::LabelFeatureThunk<md::UniLineLabelFeature,GeoCodecsFeature,geo::codec::VectorTile>,mdm::MDAllocator>>,geo::StdAllocator<geo::fast_shared_ptr<md::LabelFeatureThunk<md::UniLineLabelFeature,GeoCodecsFeature,geo::codec::VectorTile>,mdm::MDAllocator>,mdm::Allocator>>::__emplace_unique_key_args<geo::fast_shared_ptr<md::LabelFeatureThunk<md::UniLineLabelFeature,GeoCodecsFeature,geo::codec::VectorTile>,mdm::MDAllocator>,geo::fast_shared_ptr<md::LabelFeatureThunk<md::UniLineLabelFeature,GeoCodecsFeature,geo::codec::VectorTile>,mdm::MDAllocator> const&>(float *a1, _QWORD *a2, _QWORD **a3)
{
  unint64_t v3;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  _QWORD **v12;
  _QWORD *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  float v21;
  float v22;
  _BOOL8 v23;
  unint64_t v24;
  unint64_t v25;
  size_t prime;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t *v31;
  size_t v32;
  size_t v33;
  size_t v34;
  _QWORD *i;
  size_t v36;
  uint64_t v37;
  unint64_t v38;
  uint8x8_t v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  size_t v43;
  _QWORD *v44;
  unint64_t v45;
  uint64_t v47;

  if (*a2)
    v7 = *a2 + 8;
  else
    v7 = 0;
  v8 = md::LabelFeatureThunk<md::UniLineLabelFeature,GeoCodecsFeature,geo::codec::VectorTile>::hash(v7);
  v9 = v8;
  v10 = *((_QWORD *)a1 + 1);
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    if (v11.u32[0] > 1uLL)
    {
      v3 = v8;
      if (v8 >= v10)
        v3 = v8 % v10;
    }
    else
    {
      v3 = (v10 - 1) & v8;
    }
    v12 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v3);
    if (v12)
    {
      v13 = *v12;
      if (*v12)
      {
        if (v11.u32[0] < 2uLL)
        {
          while (1)
          {
            v17 = v13[1];
            if (v17 == v9)
            {
              v18 = v13[2];
              if (v18)
                v19 = v18 + 8;
              else
                v19 = 0;
              if (!md::LabelFeatureThunk<md::UniLineLabelFeature,GeoCodecsFeature,geo::codec::VectorTile>::compare(v19, *a2 + 8))return v13;
            }
            else if ((v17 & (v10 - 1)) != v3)
            {
              goto LABEL_32;
            }
            v13 = (_QWORD *)*v13;
            if (!v13)
              goto LABEL_32;
          }
        }
        do
        {
          v14 = v13[1];
          if (v14 == v9)
          {
            v15 = v13[2];
            if (v15)
              v16 = v15 + 8;
            else
              v16 = 0;
            if (!md::LabelFeatureThunk<md::UniLineLabelFeature,GeoCodecsFeature,geo::codec::VectorTile>::compare(v16, *a2 + 8))return v13;
          }
          else
          {
            if (v14 >= v10)
              v14 %= v10;
            if (v14 != v3)
              break;
          }
          v13 = (_QWORD *)*v13;
        }
        while (v13);
      }
    }
  }
LABEL_32:
  v13 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(**((_QWORD **)a1 + 4) + 16))(*((_QWORD *)a1 + 4), 24, 8);
  *v13 = 0;
  v13[1] = v9;
  v13[2] = 0;
  v20 = *a3;
  v13[2] = *a3;
  if (v20)
    ++*v20;
  v21 = (float)(unint64_t)(*((_QWORD *)a1 + 5) + 1);
  v22 = a1[12];
  if (!v10 || (float)(v22 * (float)v10) < v21)
  {
    v23 = 1;
    if (v10 >= 3)
      v23 = (v10 & (v10 - 1)) != 0;
    v24 = v23 | (2 * v10);
    v25 = vcvtps_u32_f32(v21 / v22);
    if (v24 <= v25)
      prime = v25;
    else
      prime = v24;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
    }
    v10 = *((_QWORD *)a1 + 1);
    if (prime <= v10)
    {
      if (prime >= v10)
        goto LABEL_70;
      v38 = vcvtps_u32_f32((float)*((unint64_t *)a1 + 5) / a1[12]);
      if (v10 < 3 || (v39 = (uint8x8_t)vcnt_s8((int8x8_t)v10), v39.i16[0] = vaddlv_u8(v39), v39.u32[0] > 1uLL))
      {
        v38 = std::__next_prime(v38);
      }
      else
      {
        v40 = 1 << -(char)__clz(v38 - 1);
        if (v38 >= 2)
          v38 = v40;
      }
      if (prime <= v38)
        prime = v38;
      if (prime >= v10)
      {
        v10 = *((_QWORD *)a1 + 1);
LABEL_70:
        if ((v10 & (v10 - 1)) != 0)
        {
          if (v9 >= v10)
            v3 = v9 % v10;
          else
            v3 = v9;
        }
        else
        {
          v3 = (v10 - 1) & v9;
        }
        goto LABEL_83;
      }
      if (!prime)
      {
        v47 = *(_QWORD *)a1;
        *(_QWORD *)a1 = 0;
        if (v47)
          (*(void (**)(uint64_t, uint64_t, uint64_t))(**((_QWORD **)a1 + 2) + 40))(*((_QWORD *)a1 + 2), v47, 8 * *((_QWORD *)a1 + 1));
        v10 = 0;
        *((_QWORD *)a1 + 1) = 0;
        goto LABEL_70;
      }
    }
    v27 = (*(uint64_t (**)(uint64_t, size_t, uint64_t))(**((_QWORD **)a1 + 2) + 16))(*((_QWORD *)a1 + 2), 8 * prime, 8);
    v28 = *(_QWORD *)a1;
    *(_QWORD *)a1 = v27;
    if (v28)
      (*(void (**)(uint64_t, uint64_t, uint64_t))(**((_QWORD **)a1 + 2) + 40))(*((_QWORD *)a1 + 2), v28, 8 * *((_QWORD *)a1 + 1));
    v29 = 0;
    *((_QWORD *)a1 + 1) = prime;
    do
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v29++) = 0;
    while (prime != v29);
    v31 = (uint64_t *)(a1 + 6);
    v30 = (_QWORD *)*((_QWORD *)a1 + 3);
    if (!v30)
    {
LABEL_69:
      v10 = prime;
      goto LABEL_70;
    }
    v32 = v30[1];
    v33 = prime - 1;
    if ((prime & (prime - 1)) == 0)
    {
      v34 = v32 & v33;
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v34) = v31;
      for (i = (_QWORD *)*v30; *v30; i = (_QWORD *)*v30)
      {
        v36 = i[1] & v33;
        if (v36 == v34)
        {
          v30 = i;
        }
        else if (*(_QWORD *)(*(_QWORD *)a1 + 8 * v36))
        {
          *v30 = *i;
          v37 = 8 * v36;
          *i = **(_QWORD **)(*(_QWORD *)a1 + v37);
          **(_QWORD **)(*(_QWORD *)a1 + v37) = i;
        }
        else
        {
          *(_QWORD *)(*(_QWORD *)a1 + 8 * v36) = v30;
          v30 = i;
          v34 = v36;
        }
      }
      goto LABEL_69;
    }
    if (v32 >= prime)
      v32 %= prime;
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v32) = v31;
    v41 = (_QWORD *)*v30;
    if (!*v30)
      goto LABEL_69;
    while (1)
    {
      v43 = v41[1];
      if (v43 >= prime)
        v43 %= prime;
      if (v43 != v32)
      {
        if (!*(_QWORD *)(*(_QWORD *)a1 + 8 * v43))
        {
          *(_QWORD *)(*(_QWORD *)a1 + 8 * v43) = v30;
          goto LABEL_74;
        }
        *v30 = *v41;
        v42 = 8 * v43;
        *v41 = **(_QWORD **)(*(_QWORD *)a1 + v42);
        **(_QWORD **)(*(_QWORD *)a1 + v42) = v41;
        v41 = v30;
      }
      v43 = v32;
LABEL_74:
      v30 = v41;
      v41 = (_QWORD *)*v41;
      v32 = v43;
      if (!v41)
        goto LABEL_69;
    }
  }
LABEL_83:
  v44 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v44)
  {
    *v13 = *v44;
LABEL_91:
    *v44 = v13;
    goto LABEL_92;
  }
  *v13 = *((_QWORD *)a1 + 3);
  *((_QWORD *)a1 + 3) = v13;
  *(_QWORD *)(*(_QWORD *)a1 + 8 * v3) = a1 + 6;
  if (*v13)
  {
    v45 = *(_QWORD *)(*v13 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v45 >= v10)
        v45 %= v10;
    }
    else
    {
      v45 &= v10 - 1;
    }
    v44 = (_QWORD *)(*(_QWORD *)a1 + 8 * v45);
    goto LABEL_91;
  }
LABEL_92:
  ++*((_QWORD *)a1 + 5);
  return v13;
}

void sub_19F0EA4D4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<geo::fast_shared_ptr<md::LabelFeatureThunk<md::UniLineLabelFeature,GeoCodecsFeature,geo::codec::VectorTile>,mdm::MDAllocator>,void *>,std::__hash_node_destructor<geo::StdAllocator<std::__hash_node<geo::fast_shared_ptr<md::LabelFeatureThunk<md::UniLineLabelFeature,GeoCodecsFeature,geo::codec::VectorTile>,mdm::MDAllocator>,void *>,mdm::Allocator>>>::~unique_ptr[abi:nn180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

unint64_t std::__hash_table<geo::fast_shared_ptr<md::LabelFeatureThunk<md::UniLineLabelFeature,GeoCodecsFeature,geo::codec::VectorTile>,mdm::MDAllocator>,md::LabelFeaturePoolTileInfo::FeatureHash<geo::fast_shared_ptr<md::LabelFeatureThunk<md::UniLineLabelFeature,GeoCodecsFeature,geo::codec::VectorTile>,mdm::MDAllocator>>,md::LabelFeaturePoolTileInfo::FeatureEqual<geo::fast_shared_ptr<md::LabelFeatureThunk<md::UniLineLabelFeature,GeoCodecsFeature,geo::codec::VectorTile>,mdm::MDAllocator>>,geo::StdAllocator<geo::fast_shared_ptr<md::LabelFeatureThunk<md::UniLineLabelFeature,GeoCodecsFeature,geo::codec::VectorTile>,mdm::MDAllocator>,mdm::Allocator>>::__emplace_unique_key_args<geo::fast_shared_ptr<md::LabelFeatureThunk<md::UniLineLabelFeature,GeoCodecsFeature,geo::codec::VectorTile>,mdm::MDAllocator>,geo::fast_shared_ptr<md::LabelFeatureThunk<md::UniLineLabelFeature,GeoCodecsFeature,geo::codec::VectorTile>,mdm::MDAllocator> const&>(unint64_t result, uint64_t a2, _QWORD **a3)
{
  unint64_t v3;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  _QWORD *v20;
  float v21;
  float v22;
  _BOOL8 v23;
  unint64_t v24;
  unint64_t v25;
  size_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  unint64_t v30;
  size_t v31;
  size_t v32;
  size_t v33;
  _QWORD *i;
  size_t v35;
  uint64_t v36;
  uint8x8_t v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  size_t v41;
  unint64_t *v42;
  unint64_t v43;
  uint64_t v44;

  v5 = result;
  v6 = a2 + 8;
  if (!a2)
    v6 = 0;
  v7 = *(_QWORD *)(v6 + 8);
  v8 = *(_QWORD *)(v7 + 72);
  v9 = *(_QWORD *)(result + 8);
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      v3 = *(_QWORD *)(v7 + 72);
      if (v8 >= v9)
        v3 = v8 % v9;
    }
    else
    {
      v3 = (v9 - 1) & v8;
    }
    v11 = *(_QWORD **)(*(_QWORD *)result + 8 * v3);
    if (v11)
    {
      v12 = (_QWORD *)*v11;
      if (v12)
      {
        if (v10.u32[0] < 2uLL)
        {
          while (1)
          {
            v18 = v12[1];
            if (v18 == v8)
            {
              v16 = v12[2];
              if (v16)
                v17 = v16 + 8;
              else
                v17 = 0;
              if (*(_QWORD *)(*(_QWORD *)(v17 + 8) + 72) == v8)
                return result;
            }
            else if ((v18 & (v9 - 1)) != v3)
            {
              goto LABEL_30;
            }
            v12 = (_QWORD *)*v12;
            if (!v12)
              goto LABEL_30;
          }
        }
        do
        {
          v15 = v12[1];
          if (v15 == v8)
          {
            v13 = v12[2];
            if (v13)
              v14 = v13 + 8;
            else
              v14 = 0;
            if (*(_QWORD *)(*(_QWORD *)(v14 + 8) + 72) == v8)
              return result;
          }
          else
          {
            if (v15 >= v9)
              v15 %= v9;
            if (v15 != v3)
              break;
          }
          v12 = (_QWORD *)*v12;
        }
        while (v12);
      }
    }
  }
LABEL_30:
  result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(result + 32) + 16))(*(_QWORD *)(result + 32), 24, 8);
  v19 = result;
  *(_QWORD *)result = 0;
  *(_QWORD *)(result + 8) = v8;
  *(_QWORD *)(result + 16) = 0;
  v20 = *a3;
  *(_QWORD *)(result + 16) = *a3;
  if (v20)
    ++*v20;
  v21 = (float)(unint64_t)(*(_QWORD *)(v5 + 40) + 1);
  v22 = *(float *)(v5 + 48);
  if (!v9 || (float)(v22 * (float)v9) < v21)
  {
    v23 = 1;
    if (v9 >= 3)
      v23 = (v9 & (v9 - 1)) != 0;
    v24 = v23 | (2 * v9);
    v25 = vcvtps_u32_f32(v21 / v22);
    if (v24 <= v25)
      v26 = v25;
    else
      v26 = v24;
    if (v26 == 1)
    {
      v26 = 2;
    }
    else if ((v26 & (v26 - 1)) != 0)
    {
      result = std::__next_prime(v26);
      v26 = result;
    }
    v9 = *(_QWORD *)(v5 + 8);
    if (v26 <= v9)
    {
      if (v26 >= v9)
        goto LABEL_68;
      result = vcvtps_u32_f32((float)*(unint64_t *)(v5 + 40) / *(float *)(v5 + 48));
      if (v9 < 3 || (v37 = (uint8x8_t)vcnt_s8((int8x8_t)v9), v37.i16[0] = vaddlv_u8(v37), v37.u32[0] > 1uLL))
      {
        result = std::__next_prime(result);
      }
      else
      {
        v38 = 1 << -(char)__clz(result - 1);
        if (result >= 2)
          result = v38;
      }
      if (v26 <= result)
        v26 = result;
      if (v26 >= v9)
      {
        v9 = *(_QWORD *)(v5 + 8);
LABEL_68:
        if ((v9 & (v9 - 1)) != 0)
        {
          if (v8 >= v9)
            v3 = v8 % v9;
          else
            v3 = v8;
        }
        else
        {
          v3 = (v9 - 1) & v8;
        }
        goto LABEL_81;
      }
      if (!v26)
      {
        v44 = *(_QWORD *)v5;
        *(_QWORD *)v5 = 0;
        if (v44)
          result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v5 + 16) + 40))(*(_QWORD *)(v5 + 16), v44, 8 * *(_QWORD *)(v5 + 8));
        v9 = 0;
        *(_QWORD *)(v5 + 8) = 0;
        goto LABEL_68;
      }
    }
    result = (*(uint64_t (**)(_QWORD, size_t, uint64_t))(**(_QWORD **)(v5 + 16) + 16))(*(_QWORD *)(v5 + 16), 8 * v26, 8);
    v27 = *(_QWORD *)v5;
    *(_QWORD *)v5 = result;
    if (v27)
      result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v5 + 16) + 40))(*(_QWORD *)(v5 + 16), v27, 8 * *(_QWORD *)(v5 + 8));
    v28 = 0;
    *(_QWORD *)(v5 + 8) = v26;
    do
      *(_QWORD *)(*(_QWORD *)v5 + 8 * v28++) = 0;
    while (v26 != v28);
    v30 = v5 + 24;
    v29 = *(_QWORD **)(v5 + 24);
    if (!v29)
    {
LABEL_67:
      v9 = v26;
      goto LABEL_68;
    }
    v31 = v29[1];
    v32 = v26 - 1;
    if ((v26 & (v26 - 1)) == 0)
    {
      v33 = v31 & v32;
      *(_QWORD *)(*(_QWORD *)v5 + 8 * v33) = v30;
      for (i = (_QWORD *)*v29; *v29; i = (_QWORD *)*v29)
      {
        v35 = i[1] & v32;
        if (v35 == v33)
        {
          v29 = i;
        }
        else if (*(_QWORD *)(*(_QWORD *)v5 + 8 * v35))
        {
          *v29 = *i;
          v36 = 8 * v35;
          *i = **(_QWORD **)(*(_QWORD *)v5 + v36);
          **(_QWORD **)(*(_QWORD *)v5 + v36) = i;
        }
        else
        {
          *(_QWORD *)(*(_QWORD *)v5 + 8 * v35) = v29;
          v29 = i;
          v33 = v35;
        }
      }
      goto LABEL_67;
    }
    if (v31 >= v26)
      v31 %= v26;
    *(_QWORD *)(*(_QWORD *)v5 + 8 * v31) = v30;
    v39 = (_QWORD *)*v29;
    if (!*v29)
      goto LABEL_67;
    while (1)
    {
      v41 = v39[1];
      if (v41 >= v26)
        v41 %= v26;
      if (v41 != v31)
      {
        if (!*(_QWORD *)(*(_QWORD *)v5 + 8 * v41))
        {
          *(_QWORD *)(*(_QWORD *)v5 + 8 * v41) = v29;
          goto LABEL_72;
        }
        *v29 = *v39;
        v40 = 8 * v41;
        *v39 = **(_QWORD **)(*(_QWORD *)v5 + v40);
        **(_QWORD **)(*(_QWORD *)v5 + v40) = v39;
        v39 = v29;
      }
      v41 = v31;
LABEL_72:
      v29 = v39;
      v39 = (_QWORD *)*v39;
      v31 = v41;
      if (!v39)
        goto LABEL_67;
    }
  }
LABEL_81:
  v42 = *(unint64_t **)(*(_QWORD *)v5 + 8 * v3);
  if (v42)
  {
    *(_QWORD *)v19 = *v42;
LABEL_89:
    *v42 = v19;
    goto LABEL_90;
  }
  *(_QWORD *)v19 = *(_QWORD *)(v5 + 24);
  *(_QWORD *)(v5 + 24) = v19;
  *(_QWORD *)(*(_QWORD *)v5 + 8 * v3) = v5 + 24;
  if (*(_QWORD *)v19)
  {
    v43 = *(_QWORD *)(*(_QWORD *)v19 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v43 >= v9)
        v43 %= v9;
    }
    else
    {
      v43 &= v9 - 1;
    }
    v42 = (unint64_t *)(*(_QWORD *)v5 + 8 * v43);
    goto LABEL_89;
  }
LABEL_90:
  ++*(_QWORD *)(v5 + 40);
  return result;
}

void sub_19F0EA9CC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<geo::fast_shared_ptr<md::LabelFeatureThunk<md::UniLineLabelFeature,GeoCodecsFeature,geo::codec::VectorTile>,mdm::MDAllocator>,void *>,std::__hash_node_destructor<geo::StdAllocator<std::__hash_node<geo::fast_shared_ptr<md::LabelFeatureThunk<md::UniLineLabelFeature,GeoCodecsFeature,geo::codec::VectorTile>,mdm::MDAllocator>,void *>,mdm::Allocator>>>::~unique_ptr[abi:nn180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t md::LabelFeatureThunk<md::UniLineLabelFeature,GeoCodecsFeature,geo::codec::VectorTile>::hash(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  _DWORD *v7;
  unint64_t v8;
  int *v9;
  int v10;
  unint64_t v11;
  uint64_t NativeShieldCount;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  size_t v16;
  unsigned int v17;
  uint64_t v18;
  int v19;
  uint64_t NativeLabelCount;
  uint64_t v21;
  unint64_t v22;
  char *v23;
  size_t v24;
  unsigned int v25;
  uint64_t v26;
  int v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v31;
  char *__s;

  v1 = *(unsigned __int8 *)(a1 + 88);
  v2 = *(_QWORD *)(a1 + 80);
  if (!v2)
  {
    v4 = *(_QWORD *)(a1 + 56);
    v5 = *(_QWORD *)(v4 + 24);
    if (v5)
    {
      v6 = *(unsigned __int8 *)(v5 + 33);
      if (*(_BYTE *)(v5 + 33))
      {
        v7 = *(_DWORD **)v5;
        if (*v7 == 189)
        {
          v8 = 0;
LABEL_11:
          if (LOBYTE(v7[2 * v8 + 1]) == 1)
          {
            v11 = *(_QWORD *)(v4 + 40);
            if (v11)
              goto LABEL_30;
          }
        }
        else
        {
          v8 = 0;
          v9 = v7 + 2;
          while (v6 - 1 != v8)
          {
            v10 = *v9;
            v9 += 2;
            ++v8;
            if (v10 == 189)
            {
              if (v8 >= v6)
                break;
              goto LABEL_11;
            }
          }
        }
      }
    }
    NativeShieldCount = geo::codec::featureGetNativeShieldCount(*(_QWORD *)(a1 + 56));
    if (NativeShieldCount)
    {
      v13 = NativeShieldCount;
      v14 = 0;
      v11 = 0;
      do
      {
        v31 = 0;
        __s = 0;
        geo::codec::featureGetNativeShield(v4, v14, &__s, &v31, 0);
        v15 = __s;
        if (__s)
        {
          v16 = strlen(__s);
          v17 = -2128831035;
          v18 = 0x9E3779BA006719DALL;
          if (v16)
          {
            do
            {
              v19 = *v15++;
              v17 = (v17 * v19) ^ 0x1000193;
              --v16;
            }
            while (v16);
            v18 = v17 - 0x61C8864680B583EBLL;
          }
          v11 ^= (v11 >> 2) + (v11 << 6) + v18;
        }
        v11 ^= v31 - 0x61C8864680B583EBLL + (v11 << 6) + (v11 >> 2);
        ++v14;
      }
      while (v14 != v13);
    }
    else
    {
      NativeLabelCount = geo::codec::featureGetNativeLabelCount(v4);
      if (NativeLabelCount)
      {
        v21 = NativeLabelCount;
        v22 = 0;
        v11 = 0;
        do
        {
          __s = 0;
          geo::codec::featureGetNativeLabel(v4, v22, &__s, 0);
          v23 = __s;
          if (__s)
          {
            v24 = strlen(__s);
            v25 = -2128831035;
            v26 = 0x9E3779BA006719DALL;
            if (v24)
            {
              do
              {
                v27 = *v23++;
                v25 = (v25 * v27) ^ 0x1000193;
                --v24;
              }
              while (v24);
              v26 = v25 - 0x61C8864680B583EBLL;
            }
            v11 ^= (v11 >> 2) + (v11 << 6) + v26;
          }
          ++v22;
        }
        while (v22 != v21);
      }
      else
      {
        v28 = 0x9DDFEA08EB382D69 * (((8 * v4) + 8) ^ HIDWORD(v4));
        v29 = 0x9DDFEA08EB382D69 * (HIDWORD(v4) ^ (v28 >> 47) ^ v28);
        v11 = 0x9DDFEA08EB382D69 * (v29 ^ (v29 >> 47));
      }
    }
LABEL_30:
    v3 = (v1 << 6) - 0x61C8864680B583EBLL + (v1 >> 2) + v11;
    return v3 ^ v1;
  }
  v3 = v2 - 0x61C8864680B583EBLL + (v1 << 6) + (v1 >> 2);
  return v3 ^ v1;
}

void std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__emplace_unique_key_args<unsigned int,unsigned int>(uint64_t a1, unsigned int a2, int a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  uint64_t **v9;
  uint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  float v14;
  float v15;
  _BOOL8 v16;
  unint64_t v17;
  unint64_t v18;
  size_t prime;
  unint64_t v20;
  uint8x8_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  unint64_t v25;

  v6 = a2;
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = a2;
      if (v7 <= a2)
        v3 = a2 % v7;
    }
    else
    {
      v3 = ((_DWORD)v7 - 1) & a2;
    }
    v9 = *(uint64_t ***)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      v10 = *v9;
      if (v10)
      {
        if (v8.u32[0] < 2uLL)
        {
          while (1)
          {
            v12 = v10[1];
            if (v12 == a2)
            {
              if (*((_DWORD *)v10 + 4) == a2)
                return;
            }
            else if ((v12 & (v7 - 1)) != v3)
            {
              goto LABEL_22;
            }
            v10 = (uint64_t *)*v10;
            if (!v10)
              goto LABEL_22;
          }
        }
        do
        {
          v11 = v10[1];
          if (v11 == a2)
          {
            if (*((_DWORD *)v10 + 4) == a2)
              return;
          }
          else
          {
            if (v11 >= v7)
              v11 %= v7;
            if (v11 != v3)
              break;
          }
          v10 = (uint64_t *)*v10;
        }
        while (v10);
      }
    }
  }
LABEL_22:
  v13 = operator new(0x18uLL);
  *v13 = 0;
  v13[1] = v6;
  *((_DWORD *)v13 + 4) = a3;
  v14 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v15 = *(float *)(a1 + 32);
  if (v7 && (float)(v15 * (float)v7) >= v14)
  {
    v6 = v3;
  }
  else
  {
    v16 = 1;
    if (v7 >= 3)
      v16 = (v7 & (v7 - 1)) != 0;
    v17 = v16 | (2 * v7);
    v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18)
      prime = v18;
    else
      prime = v17;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v7 = *(_QWORD *)(a1 + 8);
    }
    if (prime > v7)
      goto LABEL_35;
    if (prime < v7)
    {
      v20 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v7 < 3 || (v21 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v21.i16[0] = vaddlv_u8(v21), v21.u32[0] > 1uLL))
      {
        v20 = std::__next_prime(v20);
      }
      else
      {
        v22 = 1 << -(char)__clz(v20 - 1);
        if (v20 >= 2)
          v20 = v22;
      }
      if (prime <= v20)
        prime = v20;
      if (prime < v7)
LABEL_35:
        std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>(a1, prime);
    }
    v7 = *(_QWORD *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6)
        v6 %= v7;
    }
    else
    {
      v6 = ((_DWORD)v7 - 1) & v6;
    }
  }
  v23 = *(_QWORD *)a1;
  v24 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v6);
  if (v24)
  {
    *v13 = *v24;
LABEL_58:
    *v24 = v13;
    goto LABEL_59;
  }
  *v13 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v13;
  *(_QWORD *)(v23 + 8 * v6) = a1 + 16;
  if (*v13)
  {
    v25 = *(_QWORD *)(*v13 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v25 >= v7)
        v25 %= v7;
    }
    else
    {
      v25 &= v7 - 1;
    }
    v24 = (_QWORD *)(*(_QWORD *)a1 + 8 * v25);
    goto LABEL_58;
  }
LABEL_59:
  ++*(_QWORD *)(a1 + 24);
}

void sub_19F0EAF20(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void md::LabelLineStore::consumeWorkUnits(md::LabelLineStore *this)
{
  unsigned __int8 v1;
  unsigned __int8 v3;
  std::mutex *v4;
  unsigned __int8 v5;
  unsigned __int8 v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unsigned __int8 *v10;
  unsigned __int8 *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t (***v15)();
  uint64_t v16;
  int64x2_t v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  _QWORD *v21;
  md::LabelLineStore::WorkUnit *v22;
  md::LabelLineStore::WorkUnit *v23;
  unsigned __int8 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  __int128 v36;
  uint64_t v37;
  uint64_t v38;
  int64x2_t v39;
  int64x2_t v40;
  uint64_t v41;
  std::__shared_weak_count *v42;
  uint64_t (**v43)();
  int64x2_t *v44;
  uint64_t (***v45)();
  uint64_t v46;

  v46 = *MEMORY[0x1E0C80C00];
  v1 = atomic_load((unsigned __int8 *)this + 80);
  if ((v1 & 1) == 0)
    return;
  {
    v35 = operator new();
    mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v35, "VectorKitLabels", 0x5ED09DD50000000FLL);
  }
  v38 = mdm::Allocator::instance(void)::alloc;
  std::mutex::lock((std::mutex *)((char *)this + 16));
  v36 = *(_OWORD *)((char *)this + 88);
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  v37 = *((_QWORD *)this + 13);
  *((_QWORD *)this + 13) = 0;
  atomic_store(0, (unsigned __int8 *)this + 80);
  std::mutex::unlock((std::mutex *)((char *)this + 16));
  v4 = (std::mutex *)((char *)this + 160);
  std::mutex::lock((std::mutex *)((char *)this + 160));
  md::LabelLineStore::processWorkUnits((uint64_t)this, (const md::LabelLineStore::WorkUnit **)v36, *((const md::LabelLineStore::WorkUnit ***)&v36 + 1));
  v5 = atomic_load((unsigned __int8 *)this + 248);
  if ((v5 & 1) != 0)
    goto LABEL_22;
  v6 = atomic_load((unsigned __int8 *)this + 248);
  if ((v6 & 1) != 0)
    goto LABEL_22;
  ++*((_DWORD *)this + 63);
  atomic_store(0xFEu, (unsigned __int8 *)this + 224);
  atomic_store(0xFEu, (unsigned __int8 *)this + 225);
  atomic_store(0xFEu, (unsigned __int8 *)this + 226);
  atomic_store(0xFEu, (unsigned __int8 *)this + 227);
  atomic_store(0xFEu, (unsigned __int8 *)this + 228);
  atomic_store(0xFEu, (unsigned __int8 *)this + 229);
  atomic_store(0xFEu, (unsigned __int8 *)this + 230);
  atomic_store(0xFEu, (unsigned __int8 *)this + 231);
  atomic_store(0xFEu, (unsigned __int8 *)this + 232);
  atomic_store(0xFEu, (unsigned __int8 *)this + 233);
  atomic_store(0xFEu, (unsigned __int8 *)this + 234);
  atomic_store(0xFEu, (unsigned __int8 *)this + 235);
  atomic_store(0xFEu, (unsigned __int8 *)this + 236);
  atomic_store(0xFEu, (unsigned __int8 *)this + 237);
  atomic_store(0xFEu, (unsigned __int8 *)this + 238);
  atomic_store(0xFEu, (unsigned __int8 *)this + 239);
  atomic_store(0xFEu, (unsigned __int8 *)this + 240);
  atomic_store(0xFEu, (unsigned __int8 *)this + 241);
  atomic_store(0xFEu, (unsigned __int8 *)this + 242);
  atomic_store(0xFEu, (unsigned __int8 *)this + 243);
  atomic_store(0xFEu, (unsigned __int8 *)this + 244);
  atomic_store(0xFEu, (unsigned __int8 *)this + 245);
  atomic_store(0xFEu, (unsigned __int8 *)this + 246);
  atomic_store(0xFEu, (unsigned __int8 *)this + 247);
  atomic_store(1u, (unsigned __int8 *)this + 248);
  v7 = (std::__shared_weak_count *)*((_QWORD *)this + 1);
  if (v7)
  {
    v8 = *(_QWORD *)this;
    v9 = std::__shared_weak_count::lock(v7);
    if (v9)
    {
      v41 = v8;
      v42 = v9;
      v10 = (unsigned __int8 *)*((_QWORD *)this + 16);
      v11 = (unsigned __int8 *)*((_QWORD *)this + 17);
      if (v10 == v11)
        goto LABEL_14;
      do
      {
        md::LabelLineZSet::createLines(v10, &v41);
        v10 += 112;
      }
      while (v10 != v11);
      v13 = *((_QWORD *)this + 16);
      v12 = *((_QWORD *)this + 17);
      if (v13 == v12)
      {
LABEL_14:
        v39 = vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
        v40 = vdupq_n_s64(0xFFEFFFFFFFFFFFFFLL);
        v43 = &off_1E42CBCC0;
        v44 = &v39;
        v15 = &v43;
        v45 = &v43;
      }
      else
      {
        v14 = *((_QWORD *)this + 16);
        while (*(_QWORD *)(v14 + 80) != *(_QWORD *)(v14 + 88))
        {
          v14 += 112;
          if (v14 == v12)
            goto LABEL_54;
        }
        if (v14 != v12)
        {
          v26 = v14 + 112;
          if (v14 + 112 != v12)
          {
            do
            {
              if (*(_QWORD *)(v26 + 80) != *(_QWORD *)(v26 + 88))
              {
                md::LabelLineZSet::operator=(v14, v26);
                v14 += 112;
              }
              v26 += 112;
            }
            while (v26 != v12);
            v13 = *((_QWORD *)this + 16);
            v12 = *((_QWORD *)this + 17);
          }
        }
        if (v14 == v12)
        {
LABEL_54:
          v14 = v12;
          goto LABEL_56;
        }
        while (v12 != v14)
        {
          v28 = *(_QWORD **)(v12 - 32);
          if (v28)
          {
            std::vector<std::unique_ptr<md::LabelLine,mdm::TypeDeleter<md::LabelLine>>,geo::StdAllocator<std::unique_ptr<md::LabelLine,mdm::TypeDeleter<md::LabelLine>>,mdm::Allocator>>::__base_destruct_at_end[abi:nn180100](v12 - 32, v28);
            (*(void (**)(_QWORD, _QWORD, _QWORD))(**(_QWORD **)(v12 - 8) + 40))(*(_QWORD *)(v12 - 8), *(_QWORD *)(v12 - 32), *(_QWORD *)(v12 - 16) - *(_QWORD *)(v12 - 32));
          }
          v39.i64[0] = v12 - 64;
          std::vector<std::unique_ptr<md::TileLabelLine,mdm::TypeDeleter<md::TileLabelLine>>,geo::StdAllocator<std::unique_ptr<md::TileLabelLine,mdm::TypeDeleter<md::TileLabelLine>>,mdm::Allocator>>::__destroy_vector::operator()[abi:nn180100]((uint64_t **)&v39);
          v29 = *(_QWORD **)(v12 - 96);
          if (v29)
          {
            v30 = *(_QWORD **)(v12 - 88);
            v27 = *(_QWORD *)(v12 - 96);
            if (v30 != v29)
            {
              do
              {
                v32 = *--v30;
                v31 = v32;
                *v30 = 0;
                if (v32)
                  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v31 + 8))(v31, v27);
              }
              while (v30 != v29);
              v27 = *(_QWORD *)(v12 - 96);
            }
            *(_QWORD *)(v12 - 88) = v29;
            (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v12 - 72) + 40))(*(_QWORD *)(v12 - 72), v27, *(_QWORD *)(v12 - 80) - v27);
          }
          v12 -= 112;
        }
        *((_QWORD *)this + 17) = v14;
        v13 = *((_QWORD *)this + 16);
LABEL_56:
        v39 = vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
        v40 = vdupq_n_s64(0xFFEFFFFFFFFFFFFFLL);
        v43 = &off_1E42CBCC0;
        v44 = &v39;
        v15 = &v43;
        v45 = &v43;
        if (v13 != v14)
        {
          do
          {
            v33 = *(_QWORD *)(v13 + 16);
            v34 = *(_QWORD *)(v13 + 24);
            if (v33 != v34)
            {
              while (v45)
              {
                ((void (*)(uint64_t (***)(), uint64_t))(*v45)[6])(v45, v33);
                v33 += 8;
                if (v33 == v34)
                  goto LABEL_60;
              }
              std::__throw_bad_function_call[abi:nn180100]();
              goto LABEL_69;
            }
LABEL_60:
            v13 += 112;
          }
          while (v13 != v14);
          v15 = v45;
          if (v45 == &v43)
          {
            v16 = 4;
            v15 = &v43;
          }
          else
          {
            if (!v45)
              goto LABEL_17;
            v16 = 5;
          }
          goto LABEL_16;
        }
      }
      v16 = 4;
LABEL_16:
      (*v15)[v16]();
LABEL_17:
      v17 = v40;
      *((int64x2_t *)this + 16) = v39;
      *((int64x2_t *)this + 17) = v17;
      v18 = v42;
      if (v42)
      {
        p_shared_owners = (unint64_t *)&v42->__shared_owners_;
        do
          v20 = __ldaxr(p_shared_owners);
        while (__stlxr(v20 - 1, p_shared_owners));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
LABEL_22:
      std::mutex::unlock(v4);
      if ((_QWORD)v36)
      {
        v21 = (_QWORD *)*((_QWORD *)&v36 + 1);
        while (v21 != (_QWORD *)v36)
        {
          v23 = (md::LabelLineStore::WorkUnit *)*--v21;
          v22 = v23;
          *v21 = 0;
          if (v23)
          {
            md::LabelLineStore::WorkUnit::~WorkUnit(v22);
            if ((v24 & 1) == 0)
            {
              {
                v25 = operator new();
                mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v25, "VectorKitLabels", 0x5ED09DD50000000FLL);
              }
            }
            (*(void (**)(uint64_t, md::LabelLineStore::WorkUnit *, uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc
                                                                                     + 40))(mdm::Allocator::instance(void)::alloc, v22, 248);
          }
        }
        (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v38 + 40))(v38, v36, v37 - v36);
      }
      return;
    }
  }
  std::__throw_bad_weak_ptr[abi:nn180100]();
LABEL_69:
  __break(1u);
}

void sub_19F0EB514(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  std::mutex *v3;
  uint64_t v5;
  va_list va;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v5 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  std::mutex::unlock(v3);
  std::vector<std::unique_ptr<md::LabelLineStore::WorkUnit,mdm::TypeDeleter<md::LabelLineStore::WorkUnit>>,geo::StdAllocator<std::unique_ptr<md::LabelLineStore::WorkUnit,mdm::TypeDeleter<md::LabelLineStore::WorkUnit>>,mdm::Allocator>>::~vector[abi:nn180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void md::LabelLineStore::processWorkUnits(uint64_t a1, const md::LabelLineStore::WorkUnit **a2, const md::LabelLineStore::WorkUnit **a3)
{
  const md::LabelLineStore::WorkUnit *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  geo::codec::VectorTile *v16;
  int v17;
  char v18;
  _OWORD *v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  unsigned __int8 v24;
  uint64_t v25;
  unsigned __int8 v26;
  unsigned __int8 v27;
  unsigned __int8 v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  _QWORD *v33;
  unsigned __int8 v34;
  unsigned __int8 v35;
  unsigned __int8 v36;
  uint64_t v37;
  geo::read_write_lock *v38;
  const char *v39;
  malloc_zone_t *v40;
  uint64_t v41;
  geo::read_write_lock *v42;
  const char *v43;
  malloc_zone_t *v44;
  uint64_t v45;
  geo::read_write_lock *v46;
  const char *v47;
  malloc_zone_t *zone;
  uint64_t v49;
  geo::read_write_lock *v50;
  const char *v51;
  malloc_zone_t *v52;
  uint64_t v53;
  geo::read_write_lock *v54;
  const char *v55;
  malloc_zone_t *v56;
  uint64_t v57;
  geo::read_write_lock *v58;
  const char *v59;
  malloc_zone_t *v60;
  uint64_t v61;
  geo::read_write_lock *v62;
  const char *v63;
  malloc_zone_t *v64;
  uint64_t (***v65)(_QWORD, _QWORD, _QWORD);
  unsigned int v66;
  std::__shared_weak_count *v67;
  unint64_t *p_shared_owners;
  unint64_t v69;
  uint64_t v70;
  float *v71;
  char v72;
  unsigned __int8 v73;
  geo::codec::VectorTile **v74;
  uint64_t v75;
  geo::codec::VectorTile **v76;
  char v77;
  unint64_t *p_shared_weak_owners;
  unint64_t v79;
  unsigned __int8 v80;
  uint64_t v81;
  int v82;
  unsigned int v83;
  unsigned int v84;
  unsigned __int16 *v85;
  _QWORD *v86;
  _QWORD *v87;
  uint64_t v88;
  unint64_t v89;
  uint64_t v90;
  uint64_t (***v91)(_QWORD, _QWORD *, _QWORD);
  int v92;
  uint64_t v93;
  geo::codec::VectorTile *v94;
  uint64_t (***v95)(_QWORD, _QWORD, _QWORD);
  unsigned int v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t (***v100)(_QWORD, _QWORD, _QWORD);
  unsigned int v101;
  unsigned int v102;
  geo::codec::VectorTile **v103;
  geo::codec::VectorTile *v104;
  unint64_t v105;
  uint64_t v106;
  uint64_t v107;
  std::__shared_weak_count *v108;
  uint64_t v109;
  std::__shared_weak_count *v110;
  uint64_t v111;
  unint64_t *v112;
  unint64_t v113;
  uint64_t v114;
  unint64_t v115;
  unsigned __int8 v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  std::__shared_weak_count *v121;
  uint64_t v122;
  unint64_t *v123;
  unint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  unsigned int v128;
  int v129;
  unint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  _OWORD *v138;
  uint64_t v139;
  unsigned __int8 v140;
  uint64_t v141;
  unsigned __int8 v142;
  unsigned __int8 v143;
  unsigned __int8 v144;
  unint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t *v148;
  _QWORD *v149;
  unsigned __int8 v150;
  unsigned __int8 v151;
  uint64_t v152;
  uint64_t v153;
  geo::read_write_lock *v154;
  const char *v155;
  malloc_zone_t *v156;
  uint64_t v157;
  geo::read_write_lock *v158;
  const char *v159;
  malloc_zone_t *v160;
  uint64_t v161;
  geo::read_write_lock *v162;
  const char *v163;
  malloc_zone_t *v164;
  uint64_t v165;
  geo::read_write_lock *v166;
  const char *v167;
  malloc_zone_t *v168;
  uint64_t v169;
  geo::read_write_lock *v170;
  const char *v171;
  malloc_zone_t *v172;
  uint64_t v173;
  geo::read_write_lock *v174;
  const char *v175;
  malloc_zone_t *v176;
  uint64_t v177;
  geo::read_write_lock *v178;
  const char *v179;
  malloc_zone_t *v180;
  unint64_t *v181;
  unint64_t v182;
  uint64_t v183;
  char v184;
  char v185;
  uint64_t v186;
  unint64_t v187;
  uint64_t v188;
  unint64_t v189;
  int v190;
  _OWORD *v191;
  uint64_t v192;
  unint64_t v193;
  uint64_t v194;
  uint64_t v195;
  unsigned __int8 v196;
  uint64_t v197;
  unsigned __int8 v198;
  unsigned __int8 v199;
  unsigned __int8 v200;
  unint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t *v205;
  _QWORD *v206;
  unsigned __int8 v207;
  unsigned __int8 v208;
  unsigned __int8 v209;
  uint64_t v210;
  geo::read_write_lock *v211;
  const char *v212;
  malloc_zone_t *v213;
  uint64_t v214;
  geo::read_write_lock *v215;
  const char *v216;
  malloc_zone_t *v217;
  uint64_t v218;
  geo::read_write_lock *v219;
  const char *v220;
  malloc_zone_t *v221;
  uint64_t v222;
  geo::read_write_lock *v223;
  const char *v224;
  malloc_zone_t *v225;
  uint64_t v226;
  geo::read_write_lock *v227;
  const char *v228;
  malloc_zone_t *v229;
  uint64_t v230;
  geo::read_write_lock *v231;
  const char *v232;
  malloc_zone_t *v233;
  uint64_t v234;
  geo::read_write_lock *v235;
  const char *v236;
  malloc_zone_t *v237;
  std::__shared_weak_count *v238;
  uint64_t v239;
  unint64_t *v240;
  unint64_t v241;
  _QWORD *v242;
  _QWORD **v243;
  _QWORD *v244;
  unint64_t v245;
  std::__shared_weak_count *v246;
  unint64_t *v247;
  unint64_t v248;
  _QWORD *v249;
  uint64_t v250;
  _QWORD *v251;
  _QWORD *v252;
  _QWORD *v253;
  _QWORD *v254;
  unint64_t v255;
  uint64_t v256;
  uint64_t v257;
  unsigned int v258;
  int v259;
  char v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  unsigned int v266;
  uint64_t v267;
  unint64_t v268;
  uint64_t v269;
  unint64_t v270;
  geo::codec::VectorTile ***v271;
  unint64_t v272;
  _QWORD *v273;
  uint64_t v274;
  uint64_t v275;
  unint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  geo::codec::VectorTile ***v280;
  uint64_t v281;
  unsigned int v282;
  BOOL v283;
  uint64_t *v284;
  std::__shared_weak_count *v285;
  std::__shared_weak_count *v286;
  std::__shared_weak_count *v287;
  uint64_t v288;
  unint64_t *v289;
  unint64_t v290;
  _QWORD *i;
  unsigned int v292;
  uint64_t *v294;
  std::__shared_weak_count *v295;
  std::__shared_weak_count *v296;
  std::__shared_weak_count *v297;
  uint64_t v298;
  unint64_t *v299;
  unint64_t v300;
  uint64_t v301;
  uint64_t v302;
  unint64_t *v303;
  unint64_t v304;
  _QWORD *v305;
  _BOOL4 v306;
  uint64_t v307;
  uint64_t v308;
  unint64_t *v309;
  unint64_t v310;
  std::__shared_weak_count *v311;
  uint64_t v312;
  unint64_t *v313;
  unint64_t v314;
  uint64_t ***v315;
  uint64_t **v316;
  uint64_t **v317;
  unint64_t v318;
  uint64_t v319;
  _QWORD *v320;
  _QWORD *v321;
  uint64_t *v322;
  std::__shared_weak_count *v323;
  std::__shared_weak_count *v324;
  std::__shared_weak_count *v325;
  uint64_t v326;
  unint64_t *v327;
  unint64_t v328;
  _QWORD *k;
  uint64_t *v330;
  std::__shared_weak_count *v331;
  std::__shared_weak_count *v332;
  std::__shared_weak_count *v333;
  uint64_t v334;
  unint64_t *v335;
  unint64_t v336;
  uint64_t v337;
  uint64_t v338;
  unint64_t *v339;
  unint64_t v340;
  _QWORD *v341;
  char *v342;
  char *v343;
  unint64_t v344;
  unint64_t v345;
  geo::codec::VectorTile **v346;
  char *v347;
  geo::codec::VectorTile **v348;
  char *v349;
  uint64_t v350;
  uint64_t v351;
  uint64_t v352;
  uint64_t v353;
  std::__shared_weak_count *v354;
  unsigned __int8 v355;
  uint64_t v356;
  geo::read_write_lock *v357;
  const char *v358;
  malloc_zone_t *v359;
  std::__shared_weak_count *v360;
  unsigned __int8 v361;
  unint64_t *v362;
  unint64_t v363;
  unsigned __int8 v364;
  uint64_t v365;
  uint64_t v366;
  uint64_t v367;
  unsigned __int8 v368;
  uint64_t v369;
  uint64_t v370;
  uint64_t v371;
  unsigned __int8 v372;
  uint64_t v373;
  uint64_t v374;
  uint64_t v375;
  unsigned __int8 v376;
  unsigned __int8 v377;
  uint64_t v378;
  uint64_t v379;
  uint64_t v380;
  uint64_t v381;
  uint64_t *v382;
  std::__shared_weak_count *v383;
  std::__shared_weak_count *v384;
  std::__shared_weak_count *v385;
  uint64_t v386;
  unint64_t *v387;
  unint64_t v388;
  uint64_t **j;
  unsigned __int8 v390;
  uint64_t *v391;
  std::__shared_weak_count *v392;
  std::__shared_weak_count *v393;
  std::__shared_weak_count *v394;
  uint64_t v395;
  unint64_t *v396;
  unint64_t v397;
  uint64_t *v398;
  uint64_t *v399;
  uint64_t v400;
  std::__shared_weak_count *v401;
  uint64_t v402;
  geo::read_write_lock *v403;
  const char *v404;
  malloc_zone_t *v405;
  float *v406;
  unint64_t *v407;
  unint64_t v408;
  uint64_t **v409;
  uint64_t **v410;
  uint64_t v411;
  unsigned __int8 v412;
  uint64_t *v413;
  uint64_t *v414;
  uint64_t v415;
  std::__shared_weak_count *v416;
  uint64_t v417;
  geo::read_write_lock *v418;
  const char *v419;
  malloc_zone_t *v420;
  uint64_t v421;
  uint64_t v422;
  uint64_t v423;
  std::__shared_weak_count *v424;
  unsigned __int8 v425;
  uint64_t v426;
  geo::read_write_lock *v427;
  const char *v428;
  malloc_zone_t *v429;
  unint64_t *v430;
  unint64_t v431;
  _QWORD *v432;
  uint64_t v433;
  uint64_t v434;
  unint64_t *v435;
  unint64_t v436;
  uint64_t v437;
  geo::codec::VectorTile ***v438;
  char *v439;
  uint64_t v440;
  __int128 v441;
  __int128 v442;
  _OWORD *v443;
  uint64_t v444;
  __int128 v445;
  uint64_t v446;
  uint64_t v447;
  _OWORD *v448;
  __int128 v449;
  uint64_t v450;
  _DWORD *v451;
  _OWORD *v452;
  uint64_t v453;
  __int128 v454;
  uint64_t v455;
  uint64_t v456;
  _OWORD *v457;
  __int128 v458;
  uint64_t v459;
  _DWORD *v460;
  _OWORD *v461;
  uint64_t v462;
  __int128 v463;
  uint64_t v464;
  uint64_t v465;
  _OWORD *v466;
  __int128 v467;
  uint64_t v468;
  _DWORD *v469;
  _OWORD *v470;
  uint64_t v471;
  __int128 v472;
  uint64_t v473;
  uint64_t v474;
  _OWORD *v475;
  __int128 v476;
  uint64_t v477;
  _DWORD *v478;
  _OWORD *v479;
  uint64_t v480;
  __int128 v481;
  uint64_t v482;
  uint64_t v483;
  _OWORD *v484;
  __int128 v485;
  uint64_t v486;
  _DWORD *v487;
  unint64_t v488;
  uint64_t v489;
  uint64_t v490;
  uint64_t *v491;
  _QWORD *v492;
  unint64_t *v493;
  unint64_t v494;
  uint64_t v495;
  geo::read_write_lock *v496;
  const char *v497;
  malloc_zone_t *v498;
  uint64_t v499;
  geo::read_write_lock *v500;
  const char *v501;
  malloc_zone_t *v502;
  uint64_t v503;
  geo::read_write_lock *v504;
  const char *v505;
  malloc_zone_t *v506;
  uint64_t v507;
  geo::read_write_lock *v508;
  const char *v509;
  malloc_zone_t *v510;
  uint64_t v511;
  geo::read_write_lock *v512;
  const char *v513;
  malloc_zone_t *v514;
  uint64_t v515;
  geo::read_write_lock *v516;
  const char *v517;
  malloc_zone_t *v518;
  uint64_t v519;
  geo::read_write_lock *v520;
  const char *v521;
  malloc_zone_t *v522;
  uint64_t v523;
  geo::read_write_lock *v524;
  const char *v525;
  malloc_zone_t *v526;
  uint64_t v527;
  geo::read_write_lock *v528;
  const char *v529;
  malloc_zone_t *v530;
  uint64_t v531;
  geo::read_write_lock *v532;
  const char *v533;
  malloc_zone_t *v534;
  int v535;
  int64x2_t v536;
  int64x2_t v537;
  std::__shared_weak_count *v538;
  uint64_t v539;
  char v540;
  unsigned int v541;
  geo::codec::VectorTile **v542;
  char *v543;
  char *v544;
  geo::codec::VectorTile *v545;
  unsigned int v546;
  geo::codec::VectorTile *v547;
  uint64_t *v548;
  const md::LabelLineStore::WorkUnit **v550;
  _OWORD v552[2];
  uint64_t v553;
  std::__shared_weak_count *v554;
  uint64_t v555;
  uint64_t v556;
  __int16 v557;
  unint64_t v558;
  __int16 v559;
  _OWORD *v560;
  geo::codec::VectorTile *v561;
  uint64_t v562;
  uint64_t v563;
  uint64_t v564;
  int v565;
  int v566;
  uint64_t v567;
  unint64_t v568;
  uint64_t v569;
  char v570;

  if (a2 != a3)
  {
    v548 = (uint64_t *)(a1 + 128);
    v544 = (char *)(a1 + 120);
    v536 = vdupq_n_s64(0xFFEFFFFFFFFFFFFFLL);
    v537 = vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
    while (2)
    {
      v550 = a2;
      v3 = *a2;
      switch(*(_DWORD *)*a2)
      {
        case 0:
        case 3:
          md::LabelLineStore::addRoad((md::LabelLineStore *)a1, *a2);
          goto LABEL_4;
        case 1:
          v4 = *((_QWORD *)v3 + 5);
          v5 = *(_QWORD *)(v4 + 48);
          if (v5)
          {
            v6 = *((_QWORD *)v3 + 16);
            v7 = v6 ? (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v6 + 8))(v6, *((_QWORD *)v3 + 5)) : 0;
            v256 = *(_QWORD *)(*(_QWORD *)(v5 + 32) + 8);
            v257 = geo::codec::VectorTile::key(*((geo::codec::VectorTile **)v3 + 6));
            v258 = *(_DWORD *)(v4 + 20);
            if (v258)
            {
              v259 = *(_BYTE *)(v257 + 1) & 0x3F;
              v260 = *((_BYTE *)v3 + 216);
              v261 = *(_QWORD *)(v5 + 32);
              v263 = *(_QWORD *)(v261 + 24);
              v262 = *(_QWORD *)(v261 + 32);
              v264 = (uint64_t)v3 + 184;
              v265 = (uint64_t)v3 + 144;
              v266 = 0;
              if (v263)
              {
                do
                {
                  v267 = v266 + *(_DWORD *)(v4 + 16);
                  v268 = *(_QWORD *)(v262 + 16 * v267 + 8);
                  if (v268 >= 2)
                  {
                    md::LabelLineStore::addSegment<GeoCodecsContourLinesFeature>(a1, v4, v267, v259, v260, v264, v265, v256 + 8 * *(_QWORD *)(v262 + 16 * v267), v263 + 4 * *(_QWORD *)(v262 + 16 * v267), v268, v7);
                    v258 = *(_DWORD *)(v4 + 20);
                  }
                  ++v266;
                }
                while (v266 < v258);
              }
              else
              {
                do
                {
                  v269 = v266 + *(_DWORD *)(v4 + 16);
                  v270 = *(_QWORD *)(v262 + 16 * v269 + 8);
                  if (v270 >= 2)
                  {
                    md::LabelLineStore::addSegment<GeoCodecsContourLinesFeature>(a1, v4, v269, v259, v260, v264, v265, v256 + 8 * *(_QWORD *)(v262 + 16 * v269), 0, v270, v7);
                    v258 = *(_DWORD *)(v4 + 20);
                  }
                  ++v266;
                }
                while (v266 < v258);
              }
            }
          }
          goto LABEL_4;
        case 2:
          v11 = *((_QWORD *)v3 + 8);
          v13 = *(_QWORD *)(v11 + 32);
          v12 = *(_QWORD *)(v11 + 40);
          if (v12 != v13)
          {
            v14 = 0;
            v15 = 0;
            v16 = (const md::LabelLineStore::WorkUnit *)((char *)v3 + 144);
            v17 = *((unsigned __int8 *)v3 + 145);
            v18 = *((_BYTE *)v3 + 216);
            v19 = (_OWORD *)((char *)v3 + 184);
            do
            {
              v21 = (uint64_t *)(v13 + 24 * v14);
              v20 = *v21;
              v22 = v21[1] - *v21;
              if ((unint64_t)v22 >= 0x10)
              {
                v553 = 0;
                v23 = a1;
                LOWORD(v558) = *(_WORD *)(a1 + 121);
                HIDWORD(v558) = v15;
                LOBYTE(v559) = v18;
                HIBYTE(v559) = v17;
                v560 = v19;
                v561 = v16;
                v566 = v22 >> 3;
                v562 = v20;
                v563 = 0;
                v564 = 0;
                v565 = 0;
                v568 = 0;
                v569 = 0;
                v567 = 0;
                v570 = *(_BYTE *)(a1 + 290);
                switch(v22 >> 3)
                {
                  case 2:
                    if ((v24 & 1) == 0
                    {
                      v45 = operator new();
                      *(_QWORD *)(v45 + 16) = 0x5ED09DD50000000FLL;
                      *(_QWORD *)(v45 + 24) = "VectorKitLabels";
                      *(_OWORD *)(v45 + 32) = xmmword_19FFB2E80;
                      *(_QWORD *)v45 = &off_1E42B5668;
                      *(_QWORD *)(v45 + 8) = "VectorKitLabels";
                      *(_OWORD *)(v45 + 72) = 0u;
                      *(_OWORD *)(v45 + 88) = 0u;
                      *(_OWORD *)(v45 + 104) = 0u;
                      *(_OWORD *)(v45 + 120) = 0u;
                      *(_OWORD *)(v45 + 136) = 0u;
                      *(_OWORD *)(v45 + 152) = 0u;
                      *(_OWORD *)(v45 + 168) = 0u;
                      *(_OWORD *)(v45 + 184) = 0u;
                      *(_OWORD *)(v45 + 200) = 0u;
                      *(_OWORD *)(v45 + 216) = 0u;
                      *(_OWORD *)(v45 + 232) = 0u;
                      *(_QWORD *)(v45 + 248) = 0;
                      *(_OWORD *)(v45 + 56) = 0u;
                      v46 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v45 + 56), 0);
                      if ((_DWORD)v46)
                        geo::read_write_lock::logFailure(v46, (uint64_t)"initialization", v47);
                      zone = malloc_create_zone(0, 0);
                      *(_QWORD *)(v45 + 48) = zone;
                      malloc_set_zone_name(zone, "VectorKitLabels");
                      *(_QWORD *)(v45 + 256) = os_log_create("com.apple.VectorKit", "Memory");
                      mdm::Allocator::instance(void)::alloc = v45;
                      v23 = a1;
                    }
                    v25 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc
                                                                               + 16))(mdm::Allocator::instance(void)::alloc, 152, 8);
                    *(_QWORD *)(v25 + 8) = 0;
                    *(_QWORD *)(v25 + 16) = v11;
                    *(_QWORD *)(v25 + 24) = 0;
                    *(_BYTE *)(v25 + 32) = 4;
                    *(_BYTE *)(v25 + 33) = v570;
                    *(_WORD *)(v25 + 34) = v559;
                    *(_WORD *)(v25 + 36) = 0;
                    *(_DWORD *)(v25 + 40) = 0;
                    *(_WORD *)(v25 + 44) = WORD2(v558);
                    *(_WORD *)(v25 + 46) = v566;
                    *(_QWORD *)v25 = off_1E429B0A0;
                    *(_OWORD *)(v25 + 48) = 0u;
                    *(_OWORD *)(v25 + 64) = 0u;
                    *(_QWORD *)(v25 + 80) = 0;
                    *(_DWORD *)(v25 + 88) = 2139095039;
                    *(_WORD *)(v25 + 92) = 0;
                    *(_BYTE *)(v25 + 94) = 0;
                    *(_OWORD *)(v25 + 96) = 0u;
                    *(_OWORD *)(v25 + 112) = 0u;
                    *(_QWORD *)(v25 + 128) = 0;
                    *(_DWORD *)(v25 + 136) = 2139095039;
                    *(_WORD *)(v25 + 140) = 0;
                    *(_BYTE *)(v25 + 142) = 0;
                    *(_QWORD *)(v25 + 144) = 0x7F7F00007F7FLL;
                    md::LabelLineSegment::createLists((unsigned __int16 *)v25, (uint64_t)&v558);
                    goto LABEL_29;
                  case 3:
                    if ((v28 & 1) == 0
                    {
                      v49 = operator new();
                      *(_QWORD *)(v49 + 16) = 0x5ED09DD50000000FLL;
                      *(_QWORD *)(v49 + 24) = "VectorKitLabels";
                      *(_OWORD *)(v49 + 32) = xmmword_19FFB2E80;
                      *(_QWORD *)v49 = &off_1E42B5668;
                      *(_QWORD *)(v49 + 8) = "VectorKitLabels";
                      *(_OWORD *)(v49 + 72) = 0u;
                      *(_OWORD *)(v49 + 88) = 0u;
                      *(_OWORD *)(v49 + 104) = 0u;
                      *(_OWORD *)(v49 + 120) = 0u;
                      *(_OWORD *)(v49 + 136) = 0u;
                      *(_OWORD *)(v49 + 152) = 0u;
                      *(_OWORD *)(v49 + 168) = 0u;
                      *(_OWORD *)(v49 + 184) = 0u;
                      *(_OWORD *)(v49 + 200) = 0u;
                      *(_OWORD *)(v49 + 216) = 0u;
                      *(_OWORD *)(v49 + 232) = 0u;
                      *(_QWORD *)(v49 + 248) = 0;
                      *(_OWORD *)(v49 + 56) = 0u;
                      v50 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v49 + 56), 0);
                      if ((_DWORD)v50)
                        geo::read_write_lock::logFailure(v50, (uint64_t)"initialization", v51);
                      v52 = malloc_create_zone(0, 0);
                      *(_QWORD *)(v49 + 48) = v52;
                      malloc_set_zone_name(v52, "VectorKitLabels");
                      *(_QWORD *)(v49 + 256) = os_log_create("com.apple.VectorKit", "Memory");
                      mdm::Allocator::instance(void)::alloc = v49;
                      v23 = a1;
                    }
                    v25 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc
                                                                               + 16))(mdm::Allocator::instance(void)::alloc, 208, 8);
                    *(_QWORD *)(v25 + 8) = 0;
                    *(_QWORD *)(v25 + 16) = v11;
                    *(_QWORD *)(v25 + 24) = 0;
                    *(_BYTE *)(v25 + 32) = 4;
                    *(_BYTE *)(v25 + 33) = v570;
                    *(_WORD *)(v25 + 34) = v559;
                    *(_WORD *)(v25 + 36) = 0;
                    *(_DWORD *)(v25 + 40) = 0;
                    *(_WORD *)(v25 + 44) = WORD2(v558);
                    *(_WORD *)(v25 + 46) = v566;
                    *(_QWORD *)v25 = off_1E429B0F8;
                    *(_OWORD *)(v25 + 48) = 0u;
                    *(_OWORD *)(v25 + 64) = 0u;
                    *(_QWORD *)(v25 + 80) = 0;
                    *(_DWORD *)(v25 + 88) = 2139095039;
                    *(_WORD *)(v25 + 92) = 0;
                    *(_BYTE *)(v25 + 94) = 0;
                    *(_OWORD *)(v25 + 96) = 0u;
                    *(_OWORD *)(v25 + 112) = 0u;
                    *(_QWORD *)(v25 + 128) = 0;
                    *(_DWORD *)(v25 + 136) = 2139095039;
                    *(_WORD *)(v25 + 140) = 0;
                    *(_BYTE *)(v25 + 142) = 0;
                    *(_OWORD *)(v25 + 144) = 0u;
                    *(_OWORD *)(v25 + 160) = 0u;
                    *(_QWORD *)(v25 + 176) = 0;
                    *(_DWORD *)(v25 + 184) = 2139095039;
                    *(_WORD *)(v25 + 188) = 0;
                    *(_BYTE *)(v25 + 190) = 0;
                    *(_QWORD *)(v25 + 192) = 0x7F7F00007F7FLL;
                    *(_DWORD *)(v25 + 200) = 32639;
                    md::LabelLineSegment::createLists((unsigned __int16 *)v25, (uint64_t)&v558);
                    goto LABEL_29;
                  case 4:
                    if ((v26 & 1) == 0
                    {
                      v37 = operator new();
                      *(_QWORD *)(v37 + 16) = 0x5ED09DD50000000FLL;
                      *(_QWORD *)(v37 + 24) = "VectorKitLabels";
                      *(_OWORD *)(v37 + 32) = xmmword_19FFB2E80;
                      *(_QWORD *)v37 = &off_1E42B5668;
                      *(_QWORD *)(v37 + 8) = "VectorKitLabels";
                      *(_OWORD *)(v37 + 72) = 0u;
                      *(_OWORD *)(v37 + 88) = 0u;
                      *(_OWORD *)(v37 + 104) = 0u;
                      *(_OWORD *)(v37 + 120) = 0u;
                      *(_OWORD *)(v37 + 136) = 0u;
                      *(_OWORD *)(v37 + 152) = 0u;
                      *(_OWORD *)(v37 + 168) = 0u;
                      *(_OWORD *)(v37 + 184) = 0u;
                      *(_OWORD *)(v37 + 200) = 0u;
                      *(_OWORD *)(v37 + 216) = 0u;
                      *(_OWORD *)(v37 + 232) = 0u;
                      *(_QWORD *)(v37 + 248) = 0;
                      *(_OWORD *)(v37 + 56) = 0u;
                      v38 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v37 + 56), 0);
                      if ((_DWORD)v38)
                        geo::read_write_lock::logFailure(v38, (uint64_t)"initialization", v39);
                      v40 = malloc_create_zone(0, 0);
                      *(_QWORD *)(v37 + 48) = v40;
                      malloc_set_zone_name(v40, "VectorKitLabels");
                      *(_QWORD *)(v37 + 256) = os_log_create("com.apple.VectorKit", "Memory");
                      mdm::Allocator::instance(void)::alloc = v37;
                      v23 = a1;
                    }
                    v25 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc
                                                                               + 16))(mdm::Allocator::instance(void)::alloc, 256, 8);
                    *(_QWORD *)(v25 + 8) = 0;
                    *(_QWORD *)(v25 + 16) = v11;
                    *(_QWORD *)(v25 + 24) = 0;
                    *(_BYTE *)(v25 + 32) = 4;
                    *(_BYTE *)(v25 + 33) = v570;
                    *(_WORD *)(v25 + 34) = v559;
                    *(_WORD *)(v25 + 36) = 0;
                    *(_DWORD *)(v25 + 40) = 0;
                    *(_WORD *)(v25 + 44) = WORD2(v558);
                    *(_WORD *)(v25 + 46) = v566;
                    *(_QWORD *)v25 = off_1E429B150;
                    *(_OWORD *)(v25 + 48) = 0u;
                    *(_OWORD *)(v25 + 64) = 0u;
                    *(_QWORD *)(v25 + 80) = 0;
                    *(_DWORD *)(v25 + 88) = 2139095039;
                    *(_WORD *)(v25 + 92) = 0;
                    *(_BYTE *)(v25 + 94) = 0;
                    *(_OWORD *)(v25 + 96) = 0u;
                    *(_OWORD *)(v25 + 112) = 0u;
                    *(_QWORD *)(v25 + 128) = 0;
                    *(_DWORD *)(v25 + 136) = 2139095039;
                    *(_WORD *)(v25 + 140) = 0;
                    *(_BYTE *)(v25 + 142) = 0;
                    *(_OWORD *)(v25 + 144) = 0u;
                    *(_OWORD *)(v25 + 160) = 0u;
                    *(_QWORD *)(v25 + 176) = 0;
                    *(_DWORD *)(v25 + 184) = 2139095039;
                    *(_WORD *)(v25 + 188) = 0;
                    *(_BYTE *)(v25 + 190) = 0;
                    *(_OWORD *)(v25 + 192) = 0u;
                    *(_OWORD *)(v25 + 208) = 0u;
                    *(_QWORD *)(v25 + 224) = 0;
                    *(_DWORD *)(v25 + 232) = 2139095039;
                    *(_WORD *)(v25 + 236) = 0;
                    *(_BYTE *)(v25 + 238) = 0;
                    *(_OWORD *)(v25 + 240) = xmmword_19FFB4C40;
                    md::LabelLineSegment::createLists((unsigned __int16 *)v25, (uint64_t)&v558);
                    goto LABEL_29;
                  case 5:
                    if ((v27 & 1) == 0
                    {
                      v41 = operator new();
                      *(_QWORD *)(v41 + 16) = 0x5ED09DD50000000FLL;
                      *(_QWORD *)(v41 + 24) = "VectorKitLabels";
                      *(_OWORD *)(v41 + 32) = xmmword_19FFB2E80;
                      *(_QWORD *)v41 = &off_1E42B5668;
                      *(_QWORD *)(v41 + 8) = "VectorKitLabels";
                      *(_OWORD *)(v41 + 72) = 0u;
                      *(_OWORD *)(v41 + 88) = 0u;
                      *(_OWORD *)(v41 + 104) = 0u;
                      *(_OWORD *)(v41 + 120) = 0u;
                      *(_OWORD *)(v41 + 136) = 0u;
                      *(_OWORD *)(v41 + 152) = 0u;
                      *(_OWORD *)(v41 + 168) = 0u;
                      *(_OWORD *)(v41 + 184) = 0u;
                      *(_OWORD *)(v41 + 200) = 0u;
                      *(_OWORD *)(v41 + 216) = 0u;
                      *(_OWORD *)(v41 + 232) = 0u;
                      *(_QWORD *)(v41 + 248) = 0;
                      *(_OWORD *)(v41 + 56) = 0u;
                      v42 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v41 + 56), 0);
                      if ((_DWORD)v42)
                        geo::read_write_lock::logFailure(v42, (uint64_t)"initialization", v43);
                      v44 = malloc_create_zone(0, 0);
                      *(_QWORD *)(v41 + 48) = v44;
                      malloc_set_zone_name(v44, "VectorKitLabels");
                      *(_QWORD *)(v41 + 256) = os_log_create("com.apple.VectorKit", "Memory");
                      mdm::Allocator::instance(void)::alloc = v41;
                      v23 = a1;
                    }
                    v25 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc
                                                                               + 16))(mdm::Allocator::instance(void)::alloc, 312, 8);
                    *(_QWORD *)(v25 + 8) = 0;
                    *(_QWORD *)(v25 + 16) = v11;
                    *(_QWORD *)(v25 + 24) = 0;
                    *(_BYTE *)(v25 + 32) = 4;
                    *(_BYTE *)(v25 + 33) = v570;
                    *(_WORD *)(v25 + 34) = v559;
                    *(_WORD *)(v25 + 36) = 0;
                    *(_DWORD *)(v25 + 40) = 0;
                    *(_WORD *)(v25 + 44) = WORD2(v558);
                    *(_WORD *)(v25 + 46) = v566;
                    *(_QWORD *)v25 = off_1E429B1A8;
                    *(_OWORD *)(v25 + 48) = 0u;
                    *(_OWORD *)(v25 + 64) = 0u;
                    *(_QWORD *)(v25 + 80) = 0;
                    *(_DWORD *)(v25 + 88) = 2139095039;
                    *(_WORD *)(v25 + 92) = 0;
                    *(_BYTE *)(v25 + 94) = 0;
                    *(_OWORD *)(v25 + 96) = 0u;
                    *(_OWORD *)(v25 + 112) = 0u;
                    *(_QWORD *)(v25 + 128) = 0;
                    *(_DWORD *)(v25 + 136) = 2139095039;
                    *(_WORD *)(v25 + 140) = 0;
                    *(_BYTE *)(v25 + 142) = 0;
                    *(_OWORD *)(v25 + 144) = 0u;
                    *(_OWORD *)(v25 + 160) = 0u;
                    *(_QWORD *)(v25 + 176) = 0;
                    *(_DWORD *)(v25 + 184) = 2139095039;
                    *(_WORD *)(v25 + 188) = 0;
                    *(_BYTE *)(v25 + 190) = 0;
                    *(_OWORD *)(v25 + 192) = 0u;
                    *(_OWORD *)(v25 + 208) = 0u;
                    *(_QWORD *)(v25 + 224) = 0;
                    *(_DWORD *)(v25 + 232) = 2139095039;
                    *(_WORD *)(v25 + 236) = 0;
                    *(_BYTE *)(v25 + 238) = 0;
                    *(_QWORD *)(v25 + 272) = 0;
                    *(_OWORD *)(v25 + 240) = 0u;
                    *(_OWORD *)(v25 + 256) = 0u;
                    *(_DWORD *)(v25 + 280) = 2139095039;
                    *(_WORD *)(v25 + 284) = 0;
                    *(_BYTE *)(v25 + 286) = 0;
                    *(_OWORD *)(v25 + 288) = xmmword_19FFB4C40;
                    *(_DWORD *)(v25 + 304) = 32639;
                    md::LabelLineSegment::createLists((unsigned __int16 *)v25, (uint64_t)&v558);
LABEL_29:
                    v553 = v25;
                    break;
                  default:
                    if ((v34 & 1) == 0
                    {
                      v53 = operator new();
                      *(_QWORD *)(v53 + 16) = 0x5ED09DD50000000FLL;
                      *(_QWORD *)(v53 + 24) = "VectorKitLabels";
                      *(_OWORD *)(v53 + 32) = xmmword_19FFB2E80;
                      *(_QWORD *)v53 = &off_1E42B5668;
                      *(_QWORD *)(v53 + 8) = "VectorKitLabels";
                      *(_OWORD *)(v53 + 72) = 0u;
                      *(_OWORD *)(v53 + 88) = 0u;
                      *(_OWORD *)(v53 + 104) = 0u;
                      *(_OWORD *)(v53 + 120) = 0u;
                      *(_OWORD *)(v53 + 136) = 0u;
                      *(_OWORD *)(v53 + 152) = 0u;
                      *(_OWORD *)(v53 + 168) = 0u;
                      *(_OWORD *)(v53 + 184) = 0u;
                      *(_OWORD *)(v53 + 200) = 0u;
                      *(_OWORD *)(v53 + 216) = 0u;
                      *(_OWORD *)(v53 + 232) = 0u;
                      *(_QWORD *)(v53 + 248) = 0;
                      *(_OWORD *)(v53 + 56) = 0u;
                      v54 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v53 + 56), 0);
                      if ((_DWORD)v54)
                        geo::read_write_lock::logFailure(v54, (uint64_t)"initialization", v55);
                      v56 = malloc_create_zone(0, 0);
                      *(_QWORD *)(v53 + 48) = v56;
                      malloc_set_zone_name(v56, "VectorKitLabels");
                      *(_QWORD *)(v53 + 256) = os_log_create("com.apple.VectorKit", "Memory");
                      mdm::Allocator::instance(void)::alloc = v53;
                    }
                    v25 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc
                                                                               + 16))(mdm::Allocator::instance(void)::alloc, 112, 8);
                    *(_QWORD *)(v25 + 8) = 0;
                    *(_QWORD *)(v25 + 16) = v11;
                    *(_QWORD *)(v25 + 24) = 0;
                    *(_BYTE *)(v25 + 32) = 4;
                    *(_BYTE *)(v25 + 33) = v570;
                    *(_WORD *)(v25 + 34) = v559;
                    *(_WORD *)(v25 + 36) = 0;
                    *(_DWORD *)(v25 + 40) = 0;
                    *(_WORD *)(v25 + 44) = WORD2(v558);
                    *(_WORD *)(v25 + 46) = v566;
                    *(_QWORD *)v25 = off_1E4299158;
                    *(_QWORD *)(v25 + 48) = 0;
                    *(_QWORD *)(v25 + 56) = 0;
                    *(_QWORD *)(v25 + 64) = 0;
                    if ((v35 & 1) == 0
                    {
                      v57 = operator new();
                      *(_QWORD *)(v57 + 16) = 0x5ED09DD50000000FLL;
                      *(_QWORD *)(v57 + 24) = "VectorKitLabels";
                      *(_OWORD *)(v57 + 32) = xmmword_19FFB2E80;
                      *(_QWORD *)v57 = &off_1E42B5668;
                      *(_QWORD *)(v57 + 8) = "VectorKitLabels";
                      *(_OWORD *)(v57 + 72) = 0u;
                      *(_OWORD *)(v57 + 88) = 0u;
                      *(_OWORD *)(v57 + 104) = 0u;
                      *(_OWORD *)(v57 + 120) = 0u;
                      *(_OWORD *)(v57 + 136) = 0u;
                      *(_OWORD *)(v57 + 152) = 0u;
                      *(_OWORD *)(v57 + 168) = 0u;
                      *(_OWORD *)(v57 + 184) = 0u;
                      *(_OWORD *)(v57 + 200) = 0u;
                      *(_OWORD *)(v57 + 216) = 0u;
                      *(_OWORD *)(v57 + 232) = 0u;
                      *(_QWORD *)(v57 + 248) = 0;
                      *(_OWORD *)(v57 + 56) = 0u;
                      v58 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v57 + 56), 0);
                      if ((_DWORD)v58)
                        geo::read_write_lock::logFailure(v58, (uint64_t)"initialization", v59);
                      v60 = malloc_create_zone(0, 0);
                      *(_QWORD *)(v57 + 48) = v60;
                      malloc_set_zone_name(v60, "VectorKitLabels");
                      *(_QWORD *)(v57 + 256) = os_log_create("com.apple.VectorKit", "Memory");
                      mdm::Allocator::instance(void)::alloc = v57;
                    }
                    *(_QWORD *)(v25 + 72) = mdm::Allocator::instance(void)::alloc;
                    *(_QWORD *)(v25 + 80) = 0;
                    *(_QWORD *)(v25 + 88) = 0;
                    *(_QWORD *)(v25 + 96) = 0;
                    if ((v36 & 1) == 0
                    {
                      v61 = operator new();
                      *(_QWORD *)(v61 + 16) = 0x5ED09DD50000000FLL;
                      *(_QWORD *)(v61 + 24) = "VectorKitLabels";
                      *(_OWORD *)(v61 + 32) = xmmword_19FFB2E80;
                      *(_QWORD *)v61 = &off_1E42B5668;
                      *(_QWORD *)(v61 + 8) = "VectorKitLabels";
                      *(_OWORD *)(v61 + 72) = 0u;
                      *(_OWORD *)(v61 + 88) = 0u;
                      *(_OWORD *)(v61 + 104) = 0u;
                      *(_OWORD *)(v61 + 120) = 0u;
                      *(_OWORD *)(v61 + 136) = 0u;
                      *(_OWORD *)(v61 + 152) = 0u;
                      *(_OWORD *)(v61 + 168) = 0u;
                      *(_OWORD *)(v61 + 184) = 0u;
                      *(_OWORD *)(v61 + 200) = 0u;
                      *(_OWORD *)(v61 + 216) = 0u;
                      *(_OWORD *)(v61 + 232) = 0u;
                      *(_QWORD *)(v61 + 248) = 0;
                      *(_OWORD *)(v61 + 56) = 0u;
                      v62 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v61 + 56), 0);
                      if ((_DWORD)v62)
                        geo::read_write_lock::logFailure(v62, (uint64_t)"initialization", v63);
                      v64 = malloc_create_zone(0, 0);
                      *(_QWORD *)(v61 + 48) = v64;
                      malloc_set_zone_name(v64, "VectorKitLabels");
                      *(_QWORD *)(v61 + 256) = os_log_create("com.apple.VectorKit", "Memory");
                      mdm::Allocator::instance(void)::alloc = v61;
                    }
                    *(_QWORD *)(v25 + 104) = mdm::Allocator::instance(void)::alloc;
                    md::LabelLineSegment::createLists((unsigned __int16 *)v25, (uint64_t)&v558);
                    v553 = v25;
                    v23 = a1;
                    break;
                }
                LOBYTE(v556) = v17;
                LOBYTE(v555) = v18;
                v30 = *(_QWORD *)(v23 + 128);
                v29 = *(_QWORD *)(v23 + 136);
                if (v30 == v29)
                {
LABEL_33:
                  *(_QWORD *)&v552[0] = v23;
                  if (v29 >= *(_QWORD *)(v23 + 144))
                  {
                    v31 = std::vector<md::LabelLineZSet,geo::StdAllocator<md::LabelLineZSet,mdm::Allocator>>::__emplace_back_slow_path<md::LabelLineStore *,unsigned char const&,unsigned char const&,md::LabelLineSource const&>(v548, (uint64_t *)v552, (char *)&v556, (char *)&v555, v544);
                  }
                  else
                  {
                    if (v29)
                      v29 = md::LabelLineZSet::LabelLineZSet(v29, v23, v17, v18, *(_BYTE *)(v23 + 120));
                    v31 = v29 + 112;
                    *(_QWORD *)(v23 + 136) = v31;
                  }
                  *(_QWORD *)(v23 + 136) = v31;
                  v30 = v31 - 112;
                }
                else
                {
                  while (*(unsigned __int8 *)(v30 + 1) != v17)
                  {
                    v30 += 112;
                    if (v30 == v29)
                      goto LABEL_33;
                  }
                }
                v32 = *(uint64_t **)(v30 + 24);
                if ((unint64_t)v32 >= *(_QWORD *)(v30 + 32))
                {
                  v33 = std::vector<std::unique_ptr<md::LabelLineSegment>,geo::StdAllocator<std::unique_ptr<md::LabelLineSegment>,mdm::Allocator>>::__emplace_back_slow_path<std::unique_ptr<md::LabelLineSegment>>(v30 + 16, &v553);
                  v25 = v553;
                }
                else
                {
                  if (v32)
                  {
                    v553 = 0;
                    *v32 = v25;
                    v25 = 0;
                  }
                  v33 = v32 + 1;
                }
                *(_QWORD *)(v30 + 24) = v33;
                atomic_store(0, (unsigned __int8 *)(v23 + 248));
                v553 = 0;
                if (v25)
                  (*(void (**)(uint64_t))(*(_QWORD *)v25 + 8))(v25);
                v13 = *(_QWORD *)(v11 + 32);
                v12 = *(_QWORD *)(v11 + 40);
              }
              v14 = ++v15;
            }
            while (0xAAAAAAAAAAAAAAABLL * ((v12 - v13) >> 3) > v15);
          }
          goto LABEL_4;
        case 4:
          if (*(_QWORD *)(a1 + 128) != *(_QWORD *)(a1 + 136))
          {
            std::vector<md::LabelLineZSet,geo::StdAllocator<md::LabelLineZSet,mdm::Allocator>>::__clear[abi:nn180100]((uint64_t **)v548);
            goto LABEL_555;
          }
          goto LABEL_4;
        case 5:
          v67 = (std::__shared_weak_count *)*((_QWORD *)v3 + 2);
          v545 = (geo::codec::VectorTile *)*((_QWORD *)v3 + 1);
          if (v67)
          {
            p_shared_owners = (unint64_t *)&v67->__shared_owners_;
            do
              v69 = __ldxr(p_shared_owners);
            while (__stxr(v69 + 1, p_shared_owners));
          }
          v70 = *((_QWORD *)v3 + 13);
          v538 = v67;
          v71 = &md::SignedDistanceFieldGenerator::_hypotCache[32438];
          v72 = *(_BYTE *)(geo::codec::VectorTile::key(v545) + 1);
          v540 = *((_BYTE *)v3 + 216);
          {
            v495 = operator new();
            *(_QWORD *)(v495 + 16) = 0x5ED09DD50000000FLL;
            *(_QWORD *)(v495 + 24) = "VectorKitLabels";
            *(_OWORD *)(v495 + 32) = xmmword_19FFB2E80;
            *(_QWORD *)v495 = &off_1E42B5668;
            *(_QWORD *)(v495 + 8) = "VectorKitLabels";
            *(_OWORD *)(v495 + 72) = 0u;
            *(_OWORD *)(v495 + 88) = 0u;
            *(_OWORD *)(v495 + 104) = 0u;
            *(_OWORD *)(v495 + 120) = 0u;
            *(_OWORD *)(v495 + 136) = 0u;
            *(_OWORD *)(v495 + 152) = 0u;
            *(_OWORD *)(v495 + 168) = 0u;
            *(_OWORD *)(v495 + 184) = 0u;
            *(_OWORD *)(v495 + 200) = 0u;
            *(_OWORD *)(v495 + 216) = 0u;
            *(_OWORD *)(v495 + 232) = 0u;
            *(_QWORD *)(v495 + 248) = 0;
            *(_OWORD *)(v495 + 56) = 0u;
            v496 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v495 + 56), 0);
            if ((_DWORD)v496)
              geo::read_write_lock::logFailure(v496, (uint64_t)"initialization", v497);
            v498 = malloc_create_zone(0, 0);
            *(_QWORD *)(v495 + 48) = v498;
            malloc_set_zone_name(v498, "VectorKitLabels");
            *(_QWORD *)(v495 + 256) = os_log_create("com.apple.VectorKit", "Memory");
            mdm::Allocator::instance(void)::alloc = v495;
          }
          v74 = (geo::codec::VectorTile **)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc
                                                                                                + 16))(mdm::Allocator::instance(void)::alloc, 64, 8);
          v75 = a1;
          v76 = v74;
          v77 = *((_BYTE *)v3 + 226);
          *v74 = v545;
          v74[1] = (geo::codec::VectorTile *)v67;
          if (v67)
          {
            p_shared_weak_owners = (unint64_t *)&v67->__shared_weak_owners_;
            do
              v79 = __ldxr(p_shared_weak_owners);
            while (__stxr(v79 + 1, p_shared_weak_owners));
          }
          v74[3] = 0;
          v74[2] = (geo::codec::VectorTile *)v70;
          v74[4] = 0;
          v74[5] = 0;
          v539 = (uint64_t)(v74 + 3);
          v542 = v74;
          {
            v499 = operator new();
            *(_QWORD *)(v499 + 16) = 0x5ED09DD50000000FLL;
            *(_QWORD *)(v499 + 24) = "VectorKitLabels";
            *(_OWORD *)(v499 + 32) = xmmword_19FFB2E80;
            *(_QWORD *)v499 = &off_1E42B5668;
            *(_QWORD *)(v499 + 8) = "VectorKitLabels";
            *(_OWORD *)(v499 + 72) = 0u;
            *(_OWORD *)(v499 + 88) = 0u;
            *(_OWORD *)(v499 + 104) = 0u;
            *(_OWORD *)(v499 + 120) = 0u;
            *(_OWORD *)(v499 + 136) = 0u;
            *(_OWORD *)(v499 + 152) = 0u;
            *(_OWORD *)(v499 + 168) = 0u;
            *(_OWORD *)(v499 + 184) = 0u;
            *(_OWORD *)(v499 + 200) = 0u;
            *(_OWORD *)(v499 + 216) = 0u;
            *(_OWORD *)(v499 + 232) = 0u;
            *(_QWORD *)(v499 + 248) = 0;
            *(_OWORD *)(v499 + 56) = 0u;
            v500 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v499 + 56), 0);
            if ((_DWORD)v500)
              geo::read_write_lock::logFailure(v500, (uint64_t)"initialization", v501);
            v502 = malloc_create_zone(0, 0);
            *(_QWORD *)(v499 + 48) = v502;
            malloc_set_zone_name(v502, "VectorKitLabels");
            *(_QWORD *)(v499 + 256) = os_log_create("com.apple.VectorKit", "Memory");
            v71 = &md::SignedDistanceFieldGenerator::_hypotCache[32438];
            mdm::Allocator::instance(void)::alloc = v499;
            v75 = a1;
            v76 = v542;
          }
          v76[6] = (geo::codec::VectorTile *)mdm::Allocator::instance(void)::alloc;
          *((_DWORD *)v76 + 14) = 0;
          *((_BYTE *)v76 + 60) = v77;
          v81 = geo::codec::VectorTile::labelLineFeatureSections(v545);
          v82 = v72 & 0x3F;
          v83 = *(unsigned __int16 *)(v70 + 42);
          if (*(_WORD *)(v70 + 42))
          {
            v84 = 0;
            v85 = (unsigned __int16 *)(v81 + 40 * *(unsigned int *)(v70 + 32) + 24);
            do
            {
              if (!*((_BYTE *)v85 + 8))
              {
                v86 = (_QWORD *)(geo::codec::VectorTile::lines(v545) + 168 * *((unsigned int *)v85 - 6));
                v558 = 0;
                v87 = geo::codec::multiSectionFeaturePoints(v86, *v85, &v558);
                *(_QWORD *)&v552[0] = 0;
                v88 = geo::codec::multiSectionFeatureElevations((uint64_t)v86, *v85, v552);
                v89 = v558;
                if (v558 >= 2)
                {
                  v90 = v88;
                  v91 = (uint64_t (***)(_QWORD, _QWORD *, _QWORD))*((_QWORD *)v3 + 16);
                  if (v91)
                  {
                    v92 = (**v91)(v91, v86, *((unsigned __int8 *)v3 + 224));
                    LODWORD(v91) = (*(uint64_t (**)(_QWORD, _QWORD *))(**((_QWORD **)v3 + 16) + 8))(*((_QWORD *)v3 + 16), v86);
                    v89 = v558;
                  }
                  else
                  {
                    v92 = 0;
                  }
                  v535 = v92;
                  v75 = a1;
                  v71 = md::SignedDistanceFieldGenerator::_hypotCache + 129752;
                  v93 = md::LabelLineStore::addSegment<GeoCodecsRoadFeature>(a1, (uint64_t)v86, *v85, v82, v540, (uint64_t)v3 + 184, (uint64_t)v3 + 144, (uint64_t)v87, v90, v89, v535, (int)v91, *(_QWORD *)(v70 + 24));
                  *((_DWORD *)v542 + 14) += (*(uint64_t (**)(uint64_t))(*(_QWORD *)v93 + 16))(v93);
                  v94 = v542[3];
                  if (v542[4] - v94 == -16)
                  {
                    v542[4] = v94;
                  }
                  else
                  {
                    std::vector<md::LabelLineSegmentInfo,geo::StdAllocator<md::LabelLineSegmentInfo,mdm::Allocator>>::__append(v539, 1uLL);
                    v94 = v542[4];
                  }
                  *((_QWORD *)v94 - 2) = v93;
                  *((_BYTE *)v94 - 8) = *((_BYTE *)v85 + 6) ^ 1;
                }
                v83 = *(unsigned __int16 *)(v70 + 42);
              }
              ++v84;
              v85 += 20;
            }
            while (v84 < v83);
          }
          v103 = v542;
          v104 = v542[3];
          if (v104 == v542[4])
          {
            v108 = v538;
            if (!v104)
              goto LABEL_431;
LABEL_430:
            v103[4] = v104;
            (*(void (**)(geo::codec::VectorTile *, geo::codec::VectorTile *, int64_t))(*(_QWORD *)v103[6] + 40))(v103[6], v104, v103[5] - v104);
            goto LABEL_431;
          }
          LOBYTE(v552[0]) = v82;
          LOBYTE(v553) = v540;
          v106 = *(_QWORD *)(v75 + 128);
          v105 = *(_QWORD *)(v75 + 136);
          if (v106 == v105)
          {
LABEL_114:
            v558 = v75;
            if (v105 >= *(_QWORD *)(v75 + 144))
            {
              v108 = v538;
              v107 = std::vector<md::LabelLineZSet,geo::StdAllocator<md::LabelLineZSet,mdm::Allocator>>::__emplace_back_slow_path<md::LabelLineStore *,unsigned char const&,unsigned char const&,md::LabelLineSource const&>(v548, (uint64_t *)&v558, (char *)v552, (char *)&v553, v544);
            }
            else
            {
              if (v105)
                v105 = md::LabelLineZSet::LabelLineZSet(v105, v75, v82, v540, *(_BYTE *)(v75 + 120));
              v107 = v105 + 112;
              *(_QWORD *)(v75 + 136) = v107;
              v108 = v538;
            }
            *(_QWORD *)(v75 + 136) = v107;
            v106 = v107 - 112;
          }
          else
          {
            while (*(unsigned __int8 *)(v106 + 1) != v82)
            {
              v106 += 112;
              if (v106 == v105)
                goto LABEL_114;
            }
            v108 = v538;
          }
          v271 = *(geo::codec::VectorTile ****)(v106 + 56);
          v272 = *(_QWORD *)(v106 + 64);
          if ((unint64_t)v271 < v272)
          {
            if (v271)
            {
              *v271 = v542;
              v103 = 0;
            }
            v273 = v271 + 1;
            goto LABEL_428;
          }
          v274 = *(_QWORD *)(v106 + 48);
          v275 = ((uint64_t)v271 - v274) >> 3;
          v276 = v275 + 1;
          if ((unint64_t)(v275 + 1) >> 61)
            abort();
          v277 = v272 - v274;
          if (v277 >> 2 > v276)
            v276 = v277 >> 2;
          if ((unint64_t)v277 >= 0x7FFFFFFFFFFFFFF8)
            v278 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v278 = v276;
          if (v278)
          {
            v279 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v106 + 72) + 16))(*(_QWORD *)(v106 + 72), 8 * v278, 8);
            v280 = (geo::codec::VectorTile ***)(v279 + 8 * v275);
            v281 = v279 + 8 * v278;
            if (v279)
            {
              *v280 = v542;
              v103 = 0;
            }
          }
          else
          {
            v281 = 0;
            v280 = (geo::codec::VectorTile ***)(8 * v275);
          }
          v273 = v280 + 1;
          v342 = *(char **)(v106 + 48);
          v343 = *(char **)(v106 + 56);
          if (v343 == v342)
          {
            *(_QWORD *)(v106 + 48) = v280;
            *(_QWORD *)(v106 + 56) = v273;
            v350 = *(_QWORD *)(v106 + 64);
            *(_QWORD *)(v106 + 64) = v281;
            if (!v343)
              goto LABEL_428;
            goto LABEL_427;
          }
          v344 = v343 - v342 - 8;
          if (v344 > 0x57
            && ((v345 = (v342 - v343 + 7) & 0xFFFFFFFFFFFFFFF8, &v343[v345] >= (char *)v280)
             || (char *)v280 + v345 >= v343))
          {
            v437 = (v344 >> 3) + 1;
            v347 = &v343[-8 * (v437 & 0x3FFFFFFFFFFFFFFCLL)];
            v438 = v280 - 2;
            v439 = v343 - 32;
            v440 = v437 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v442 = *(_OWORD *)v439;
              v441 = *((_OWORD *)v439 + 1);
              *(_OWORD *)v439 = 0uLL;
              *((_OWORD *)v439 + 1) = 0uLL;
              v439 -= 32;
              *((_OWORD *)v438 - 1) = v442;
              *(_OWORD *)v438 = v441;
              v438 -= 4;
              v440 -= 4;
            }
            while (v440);
            v346 = v103;
            v280 -= v437 & 0x3FFFFFFFFFFFFFFCLL;
            if (v437 == (v437 & 0x3FFFFFFFFFFFFFFCLL))
              goto LABEL_413;
          }
          else
          {
            v346 = v103;
            v347 = *(char **)(v106 + 56);
          }
          do
          {
            v348 = (geo::codec::VectorTile **)*((_QWORD *)v347 - 1);
            v347 -= 8;
            *(_QWORD *)v347 = 0;
            *--v280 = v348;
          }
          while (v347 != v342);
LABEL_413:
          v343 = *(char **)(v106 + 48);
          v349 = *(char **)(v106 + 56);
          *(_QWORD *)(v106 + 48) = v280;
          *(_QWORD *)(v106 + 56) = v273;
          v350 = *(_QWORD *)(v106 + 64);
          *(_QWORD *)(v106 + 64) = v281;
          while (v349 != v343)
          {
            v352 = *((_QWORD *)v349 - 1);
            v349 -= 8;
            v351 = v352;
            *(_QWORD *)v349 = 0;
            if (v352)
            {
              v353 = *(_QWORD *)(v351 + 24);
              if (v353)
              {
                *(_QWORD *)(v351 + 32) = v353;
                (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v351 + 48) + 40))(*(_QWORD *)(v351 + 48), v353, *(_QWORD *)(v351 + 40) - v353);
              }
              v354 = *(std::__shared_weak_count **)(v351 + 8);
              if (v354)
                std::__shared_weak_count::__release_weak(v354);
              {
                v356 = operator new();
                *(_QWORD *)(v356 + 16) = 0x5ED09DD50000000FLL;
                *(_QWORD *)(v356 + 24) = "VectorKitLabels";
                *(_OWORD *)(v356 + 32) = xmmword_19FFB2E80;
                *(_QWORD *)v356 = &off_1E42B5668;
                *(_QWORD *)(v356 + 8) = "VectorKitLabels";
                *(_OWORD *)(v356 + 72) = 0u;
                *(_OWORD *)(v356 + 88) = 0u;
                *(_OWORD *)(v356 + 104) = 0u;
                *(_OWORD *)(v356 + 120) = 0u;
                *(_OWORD *)(v356 + 136) = 0u;
                *(_OWORD *)(v356 + 152) = 0u;
                *(_OWORD *)(v356 + 168) = 0u;
                *(_OWORD *)(v356 + 184) = 0u;
                *(_OWORD *)(v356 + 200) = 0u;
                *(_OWORD *)(v356 + 216) = 0u;
                *(_OWORD *)(v356 + 232) = 0u;
                *(_QWORD *)(v356 + 248) = 0;
                *(_OWORD *)(v356 + 56) = 0u;
                v357 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v356 + 56), 0);
                if ((_DWORD)v357)
                  geo::read_write_lock::logFailure(v357, (uint64_t)"initialization", v358);
                v359 = malloc_create_zone(0, 0);
                *(_QWORD *)(v356 + 48) = v359;
                malloc_set_zone_name(v359, "VectorKitLabels");
                *(_QWORD *)(v356 + 256) = os_log_create("com.apple.VectorKit", "Memory");
                v71 = &md::SignedDistanceFieldGenerator::_hypotCache[32438];
                mdm::Allocator::instance(void)::alloc = v356;
                v108 = v538;
              }
              (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)v71 + 299) + 40))(*((_QWORD *)v71 + 299), v351, 64);
            }
          }
          v103 = v346;
          if (!v343)
            goto LABEL_428;
LABEL_427:
          (*(void (**)(_QWORD, char *, uint64_t))(**(_QWORD **)(v106 + 72) + 40))(*(_QWORD *)(v106 + 72), v343, v350 - (_QWORD)v343);
LABEL_428:
          *(_QWORD *)(v106 + 56) = v273;
          if (!v103)
            goto LABEL_435;
          v104 = v103[3];
          if (v104)
            goto LABEL_430;
LABEL_431:
          v360 = (std::__shared_weak_count *)v103[1];
          if (v360)
            std::__shared_weak_count::__release_weak(v360);
          {
            v503 = operator new();
            *(_QWORD *)(v503 + 16) = 0x5ED09DD50000000FLL;
            *(_QWORD *)(v503 + 24) = "VectorKitLabels";
            *(_OWORD *)(v503 + 32) = xmmword_19FFB2E80;
            *(_QWORD *)v503 = &off_1E42B5668;
            *(_QWORD *)(v503 + 8) = "VectorKitLabels";
            *(_OWORD *)(v503 + 72) = 0u;
            *(_OWORD *)(v503 + 88) = 0u;
            *(_OWORD *)(v503 + 104) = 0u;
            *(_OWORD *)(v503 + 120) = 0u;
            *(_OWORD *)(v503 + 136) = 0u;
            *(_OWORD *)(v503 + 152) = 0u;
            *(_OWORD *)(v503 + 168) = 0u;
            *(_OWORD *)(v503 + 184) = 0u;
            *(_OWORD *)(v503 + 200) = 0u;
            *(_OWORD *)(v503 + 216) = 0u;
            *(_OWORD *)(v503 + 232) = 0u;
            *(_QWORD *)(v503 + 248) = 0;
            *(_OWORD *)(v503 + 56) = 0u;
            v504 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v503 + 56), 0);
            if ((_DWORD)v504)
              geo::read_write_lock::logFailure(v504, (uint64_t)"initialization", v505);
            v506 = malloc_create_zone(0, 0);
            *(_QWORD *)(v503 + 48) = v506;
            malloc_set_zone_name(v506, "VectorKitLabels");
            *(_QWORD *)(v503 + 256) = os_log_create("com.apple.VectorKit", "Memory");
            v71 = &md::SignedDistanceFieldGenerator::_hypotCache[32438];
            mdm::Allocator::instance(void)::alloc = v503;
            v108 = v538;
          }
          (*(void (**)(_QWORD, geo::codec::VectorTile **, uint64_t))(**((_QWORD **)v71 + 299) + 40))(*((_QWORD *)v71 + 299), v103, 64);
LABEL_435:
          if (v108)
          {
            v362 = (unint64_t *)&v108->__shared_owners_;
            do
              v363 = __ldaxr(v362);
            while (__stlxr(v363 - 1, v362));
            if (!v363)
            {
              ((void (*)(std::__shared_weak_count *))v108->__on_zero_shared)(v108);
              std::__shared_weak_count::__release_weak(v108);
            }
          }
LABEL_4:
          a2 = v550 + 1;
          if (v550 + 1 == a3)
            return;
          continue;
        case 6:
          v95 = (uint64_t (***)(_QWORD, _QWORD, _QWORD))*((_QWORD *)v3 + 16);
          if (v95)
          {
            v546 = (**v95)(v95, *((_QWORD *)v3 + 5), *((unsigned __int8 *)v3 + 224));
            v96 = (*(uint64_t (**)(_QWORD, _QWORD))(**((_QWORD **)v3 + 16) + 8))(*((_QWORD *)v3 + 16), *((_QWORD *)v3 + 5));
          }
          else
          {
            v96 = 0;
            v546 = 0;
          }
          v122 = *((_QWORD *)v3 + 14);
          v121 = (std::__shared_weak_count *)*((_QWORD *)v3 + 15);
          *(_QWORD *)&v552[0] = v122;
          *((_QWORD *)&v552[0] + 1) = v121;
          if (v121)
          {
            v123 = (unint64_t *)&v121->__shared_owners_;
            do
              v124 = __ldxr(v123);
            while (__stxr(v124 + 1, v123));
          }
          v125 = *(_QWORD *)(v122 + 216) - *(_QWORD *)(v122 + 208);
          v126 = a1;
          if (v125)
          {
            v127 = 0;
            v128 = 0;
            v129 = *(unsigned __int8 *)(v122 + 177);
            v130 = 0xAAAAAAAAAAAAAAABLL * (v125 >> 5);
            do
            {
              v131 = *(_QWORD *)(v122 + 208);
              v132 = *(_QWORD *)(v131 + 96 * v127);
              v133 = *(_QWORD *)(v131 + 96 * v127 + 8) - v132;
              if ((unint64_t)v133 >= 0x10)
              {
                v134 = v131 + 96 * v127;
                v136 = *(_QWORD *)(v134 + 32);
                v135 = *(_QWORD *)(v134 + 40);
                v137 = v133 >> 3;
                v138 = (_OWORD *)(v134 + 64);
                if (v135 == v136)
                  v139 = 0;
                else
                  v139 = v136;
                v556 = 0;
                LOWORD(v558) = *(_WORD *)(v126 + 121);
                HIDWORD(v558) = v128;
                LOBYTE(v559) = v129;
                HIBYTE(v559) = v129;
                v560 = v138;
                v561 = 0;
                v562 = v132;
                v563 = v139;
                v564 = 0;
                v565 = 0;
                v566 = v137;
                v567 = 0;
                v568 = __PAIR64__(v96, v546);
                v569 = 0;
                v570 = *(_BYTE *)(v126 + 290);
                switch(v137)
                {
                  case 2:
                    if ((v140 & 1) == 0
                    {
                      v161 = operator new();
                      *(_QWORD *)(v161 + 16) = 0x5ED09DD50000000FLL;
                      *(_QWORD *)(v161 + 24) = "VectorKitLabels";
                      *(_OWORD *)(v161 + 32) = xmmword_19FFB2E80;
                      *(_QWORD *)v161 = &off_1E42B5668;
                      *(_QWORD *)(v161 + 8) = "VectorKitLabels";
                      *(_OWORD *)(v161 + 72) = 0u;
                      *(_OWORD *)(v161 + 88) = 0u;
                      *(_OWORD *)(v161 + 104) = 0u;
                      *(_OWORD *)(v161 + 120) = 0u;
                      *(_OWORD *)(v161 + 136) = 0u;
                      *(_OWORD *)(v161 + 152) = 0u;
                      *(_OWORD *)(v161 + 168) = 0u;
                      *(_OWORD *)(v161 + 184) = 0u;
                      *(_OWORD *)(v161 + 200) = 0u;
                      *(_OWORD *)(v161 + 216) = 0u;
                      *(_OWORD *)(v161 + 232) = 0u;
                      *(_QWORD *)(v161 + 248) = 0;
                      *(_OWORD *)(v161 + 56) = 0u;
                      v162 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v161 + 56), 0);
                      if ((_DWORD)v162)
                        geo::read_write_lock::logFailure(v162, (uint64_t)"initialization", v163);
                      v164 = malloc_create_zone(0, 0);
                      *(_QWORD *)(v161 + 48) = v164;
                      malloc_set_zone_name(v164, "VectorKitLabels");
                      *(_QWORD *)(v161 + 256) = os_log_create("com.apple.VectorKit", "Memory");
                      mdm::Allocator::instance(void)::alloc = v161;
                      v126 = a1;
                    }
                    v141 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc
                                                                                + 16))(mdm::Allocator::instance(void)::alloc, 152, 8);
                    md::LabelLineSegment::LabelLineSegment(v141, (uint64_t *)v552, (uint64_t)&v558);
                    *(_QWORD *)v141 = off_1E429B0A0;
                    *(_OWORD *)(v141 + 48) = 0u;
                    *(_OWORD *)(v141 + 64) = 0u;
                    *(_QWORD *)(v141 + 80) = 0;
                    *(_DWORD *)(v141 + 88) = 2139095039;
                    *(_WORD *)(v141 + 92) = 0;
                    *(_BYTE *)(v141 + 94) = 0;
                    *(_OWORD *)(v141 + 96) = 0u;
                    *(_OWORD *)(v141 + 112) = 0u;
                    *(_QWORD *)(v141 + 128) = 0;
                    *(_DWORD *)(v141 + 136) = 2139095039;
                    *(_WORD *)(v141 + 140) = 0;
                    *(_BYTE *)(v141 + 142) = 0;
                    *(_QWORD *)(v141 + 144) = 0x7F7F00007F7FLL;
                    md::LabelLineSegment::createLists((unsigned __int16 *)v141, (uint64_t)&v558);
                    goto LABEL_149;
                  case 3:
                    if ((v144 & 1) == 0
                    {
                      v165 = operator new();
                      *(_QWORD *)(v165 + 16) = 0x5ED09DD50000000FLL;
                      *(_QWORD *)(v165 + 24) = "VectorKitLabels";
                      *(_OWORD *)(v165 + 32) = xmmword_19FFB2E80;
                      *(_QWORD *)v165 = &off_1E42B5668;
                      *(_QWORD *)(v165 + 8) = "VectorKitLabels";
                      *(_OWORD *)(v165 + 72) = 0u;
                      *(_OWORD *)(v165 + 88) = 0u;
                      *(_OWORD *)(v165 + 104) = 0u;
                      *(_OWORD *)(v165 + 120) = 0u;
                      *(_OWORD *)(v165 + 136) = 0u;
                      *(_OWORD *)(v165 + 152) = 0u;
                      *(_OWORD *)(v165 + 168) = 0u;
                      *(_OWORD *)(v165 + 184) = 0u;
                      *(_OWORD *)(v165 + 200) = 0u;
                      *(_OWORD *)(v165 + 216) = 0u;
                      *(_OWORD *)(v165 + 232) = 0u;
                      *(_QWORD *)(v165 + 248) = 0;
                      *(_OWORD *)(v165 + 56) = 0u;
                      v166 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v165 + 56), 0);
                      if ((_DWORD)v166)
                        geo::read_write_lock::logFailure(v166, (uint64_t)"initialization", v167);
                      v168 = malloc_create_zone(0, 0);
                      *(_QWORD *)(v165 + 48) = v168;
                      malloc_set_zone_name(v168, "VectorKitLabels");
                      *(_QWORD *)(v165 + 256) = os_log_create("com.apple.VectorKit", "Memory");
                      mdm::Allocator::instance(void)::alloc = v165;
                      v126 = a1;
                    }
                    v141 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc
                                                                                + 16))(mdm::Allocator::instance(void)::alloc, 208, 8);
                    md::LabelLineSegment::LabelLineSegment(v141, (uint64_t *)v552, (uint64_t)&v558);
                    *(_QWORD *)v141 = off_1E429B0F8;
                    *(_OWORD *)(v141 + 48) = 0u;
                    *(_OWORD *)(v141 + 64) = 0u;
                    *(_QWORD *)(v141 + 80) = 0;
                    *(_DWORD *)(v141 + 88) = 2139095039;
                    *(_WORD *)(v141 + 92) = 0;
                    *(_BYTE *)(v141 + 94) = 0;
                    *(_OWORD *)(v141 + 96) = 0u;
                    *(_OWORD *)(v141 + 112) = 0u;
                    *(_QWORD *)(v141 + 128) = 0;
                    *(_DWORD *)(v141 + 136) = 2139095039;
                    *(_WORD *)(v141 + 140) = 0;
                    *(_BYTE *)(v141 + 142) = 0;
                    *(_OWORD *)(v141 + 144) = 0u;
                    *(_OWORD *)(v141 + 160) = 0u;
                    *(_QWORD *)(v141 + 176) = 0;
                    *(_DWORD *)(v141 + 184) = 2139095039;
                    *(_WORD *)(v141 + 188) = 0;
                    *(_BYTE *)(v141 + 190) = 0;
                    *(_QWORD *)(v141 + 192) = 0x7F7F00007F7FLL;
                    *(_DWORD *)(v141 + 200) = 32639;
                    md::LabelLineSegment::createLists((unsigned __int16 *)v141, (uint64_t)&v558);
                    goto LABEL_149;
                  case 4:
                    if ((v142 & 1) == 0
                    {
                      v153 = operator new();
                      *(_QWORD *)(v153 + 16) = 0x5ED09DD50000000FLL;
                      *(_QWORD *)(v153 + 24) = "VectorKitLabels";
                      *(_OWORD *)(v153 + 32) = xmmword_19FFB2E80;
                      *(_QWORD *)v153 = &off_1E42B5668;
                      *(_QWORD *)(v153 + 8) = "VectorKitLabels";
                      *(_OWORD *)(v153 + 72) = 0u;
                      *(_OWORD *)(v153 + 88) = 0u;
                      *(_OWORD *)(v153 + 104) = 0u;
                      *(_OWORD *)(v153 + 120) = 0u;
                      *(_OWORD *)(v153 + 136) = 0u;
                      *(_OWORD *)(v153 + 152) = 0u;
                      *(_OWORD *)(v153 + 168) = 0u;
                      *(_OWORD *)(v153 + 184) = 0u;
                      *(_OWORD *)(v153 + 200) = 0u;
                      *(_OWORD *)(v153 + 216) = 0u;
                      *(_OWORD *)(v153 + 232) = 0u;
                      *(_QWORD *)(v153 + 248) = 0;
                      *(_OWORD *)(v153 + 56) = 0u;
                      v154 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v153 + 56), 0);
                      if ((_DWORD)v154)
                        geo::read_write_lock::logFailure(v154, (uint64_t)"initialization", v155);
                      v156 = malloc_create_zone(0, 0);
                      *(_QWORD *)(v153 + 48) = v156;
                      malloc_set_zone_name(v156, "VectorKitLabels");
                      *(_QWORD *)(v153 + 256) = os_log_create("com.apple.VectorKit", "Memory");
                      mdm::Allocator::instance(void)::alloc = v153;
                      v126 = a1;
                    }
                    v141 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc
                                                                                + 16))(mdm::Allocator::instance(void)::alloc, 256, 8);
                    md::LabelLineSegment::LabelLineSegment(v141, (uint64_t *)v552, (uint64_t)&v558);
                    *(_QWORD *)v141 = off_1E429B150;
                    *(_OWORD *)(v141 + 48) = 0u;
                    *(_OWORD *)(v141 + 64) = 0u;
                    *(_QWORD *)(v141 + 80) = 0;
                    *(_DWORD *)(v141 + 88) = 2139095039;
                    *(_WORD *)(v141 + 92) = 0;
                    *(_BYTE *)(v141 + 94) = 0;
                    *(_OWORD *)(v141 + 96) = 0u;
                    *(_OWORD *)(v141 + 112) = 0u;
                    *(_QWORD *)(v141 + 128) = 0;
                    *(_DWORD *)(v141 + 136) = 2139095039;
                    *(_WORD *)(v141 + 140) = 0;
                    *(_BYTE *)(v141 + 142) = 0;
                    *(_OWORD *)(v141 + 144) = 0u;
                    *(_OWORD *)(v141 + 160) = 0u;
                    *(_QWORD *)(v141 + 176) = 0;
                    *(_DWORD *)(v141 + 184) = 2139095039;
                    *(_WORD *)(v141 + 188) = 0;
                    *(_BYTE *)(v141 + 190) = 0;
                    *(_QWORD *)(v141 + 224) = 0;
                    *(_OWORD *)(v141 + 192) = 0u;
                    *(_OWORD *)(v141 + 208) = 0u;
                    *(_DWORD *)(v141 + 232) = 2139095039;
                    *(_WORD *)(v141 + 236) = 0;
                    *(_BYTE *)(v141 + 238) = 0;
                    *(_OWORD *)(v141 + 240) = xmmword_19FFB4C40;
                    md::LabelLineSegment::createLists((unsigned __int16 *)v141, (uint64_t)&v558);
                    goto LABEL_149;
                  case 5:
                    if ((v143 & 1) == 0
                    {
                      v157 = operator new();
                      *(_QWORD *)(v157 + 16) = 0x5ED09DD50000000FLL;
                      *(_QWORD *)(v157 + 24) = "VectorKitLabels";
                      *(_OWORD *)(v157 + 32) = xmmword_19FFB2E80;
                      *(_QWORD *)v157 = &off_1E42B5668;
                      *(_QWORD *)(v157 + 8) = "VectorKitLabels";
                      *(_OWORD *)(v157 + 72) = 0u;
                      *(_OWORD *)(v157 + 88) = 0u;
                      *(_OWORD *)(v157 + 104) = 0u;
                      *(_OWORD *)(v157 + 120) = 0u;
                      *(_OWORD *)(v157 + 136) = 0u;
                      *(_OWORD *)(v157 + 152) = 0u;
                      *(_OWORD *)(v157 + 168) = 0u;
                      *(_OWORD *)(v157 + 184) = 0u;
                      *(_OWORD *)(v157 + 200) = 0u;
                      *(_OWORD *)(v157 + 216) = 0u;
                      *(_OWORD *)(v157 + 232) = 0u;
                      *(_QWORD *)(v157 + 248) = 0;
                      *(_OWORD *)(v157 + 56) = 0u;
                      v158 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v157 + 56), 0);
                      if ((_DWORD)v158)
                        geo::read_write_lock::logFailure(v158, (uint64_t)"initialization", v159);
                      v160 = malloc_create_zone(0, 0);
                      *(_QWORD *)(v157 + 48) = v160;
                      malloc_set_zone_name(v160, "VectorKitLabels");
                      *(_QWORD *)(v157 + 256) = os_log_create("com.apple.VectorKit", "Memory");
                      mdm::Allocator::instance(void)::alloc = v157;
                      v126 = a1;
                    }
                    v141 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc
                                                                                + 16))(mdm::Allocator::instance(void)::alloc, 312, 8);
                    md::LabelLineSegment::LabelLineSegment(v141, (uint64_t *)v552, (uint64_t)&v558);
                    *(_QWORD *)v141 = off_1E429B1A8;
                    *(_OWORD *)(v141 + 48) = 0u;
                    *(_OWORD *)(v141 + 64) = 0u;
                    *(_QWORD *)(v141 + 80) = 0;
                    *(_DWORD *)(v141 + 88) = 2139095039;
                    *(_WORD *)(v141 + 92) = 0;
                    *(_BYTE *)(v141 + 94) = 0;
                    *(_OWORD *)(v141 + 96) = 0u;
                    *(_OWORD *)(v141 + 112) = 0u;
                    *(_QWORD *)(v141 + 128) = 0;
                    *(_DWORD *)(v141 + 136) = 2139095039;
                    *(_WORD *)(v141 + 140) = 0;
                    *(_BYTE *)(v141 + 142) = 0;
                    *(_OWORD *)(v141 + 144) = 0u;
                    *(_OWORD *)(v141 + 160) = 0u;
                    *(_QWORD *)(v141 + 176) = 0;
                    *(_DWORD *)(v141 + 184) = 2139095039;
                    *(_WORD *)(v141 + 188) = 0;
                    *(_BYTE *)(v141 + 190) = 0;
                    *(_QWORD *)(v141 + 224) = 0;
                    *(_OWORD *)(v141 + 192) = 0u;
                    *(_OWORD *)(v141 + 208) = 0u;
                    *(_DWORD *)(v141 + 232) = 2139095039;
                    *(_WORD *)(v141 + 236) = 0;
                    *(_BYTE *)(v141 + 238) = 0;
                    *(_OWORD *)(v141 + 240) = 0u;
                    *(_OWORD *)(v141 + 256) = 0u;
                    *(_QWORD *)(v141 + 272) = 0;
                    *(_DWORD *)(v141 + 280) = 2139095039;
                    *(_WORD *)(v141 + 284) = 0;
                    *(_BYTE *)(v141 + 286) = 0;
                    *(_OWORD *)(v141 + 288) = xmmword_19FFB4C40;
                    *(_DWORD *)(v141 + 304) = 32639;
                    md::LabelLineSegment::createLists((unsigned __int16 *)v141, (uint64_t)&v558);
LABEL_149:
                    v556 = v141;
                    break;
                  default:
                    if ((v150 & 1) == 0
                    {
                      v169 = operator new();
                      *(_QWORD *)(v169 + 16) = 0x5ED09DD50000000FLL;
                      *(_QWORD *)(v169 + 24) = "VectorKitLabels";
                      *(_OWORD *)(v169 + 32) = xmmword_19FFB2E80;
                      *(_QWORD *)v169 = &off_1E42B5668;
                      *(_QWORD *)(v169 + 8) = "VectorKitLabels";
                      *(_OWORD *)(v169 + 72) = 0u;
                      *(_OWORD *)(v169 + 88) = 0u;
                      *(_OWORD *)(v169 + 104) = 0u;
                      *(_OWORD *)(v169 + 120) = 0u;
                      *(_OWORD *)(v169 + 136) = 0u;
                      *(_OWORD *)(v169 + 152) = 0u;
                      *(_OWORD *)(v169 + 168) = 0u;
                      *(_OWORD *)(v169 + 184) = 0u;
                      *(_OWORD *)(v169 + 200) = 0u;
                      *(_OWORD *)(v169 + 216) = 0u;
                      *(_OWORD *)(v169 + 232) = 0u;
                      *(_QWORD *)(v169 + 248) = 0;
                      *(_OWORD *)(v169 + 56) = 0u;
                      v170 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v169 + 56), 0);
                      if ((_DWORD)v170)
                        geo::read_write_lock::logFailure(v170, (uint64_t)"initialization", v171);
                      v172 = malloc_create_zone(0, 0);
                      *(_QWORD *)(v169 + 48) = v172;
                      malloc_set_zone_name(v172, "VectorKitLabels");
                      *(_QWORD *)(v169 + 256) = os_log_create("com.apple.VectorKit", "Memory");
                      mdm::Allocator::instance(void)::alloc = v169;
                    }
                    v141 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc
                                                                                + 16))(mdm::Allocator::instance(void)::alloc, 112, 8);
                    md::LabelLineSegment::LabelLineSegment(v141, (uint64_t *)v552, (uint64_t)&v558);
                    *(_QWORD *)v141 = off_1E4299158;
                    *(_QWORD *)(v141 + 48) = 0;
                    *(_QWORD *)(v141 + 56) = 0;
                    *(_QWORD *)(v141 + 64) = 0;
                    if ((v151 & 1) == 0
                    {
                      v173 = operator new();
                      *(_QWORD *)(v173 + 16) = 0x5ED09DD50000000FLL;
                      *(_QWORD *)(v173 + 24) = "VectorKitLabels";
                      *(_OWORD *)(v173 + 32) = xmmword_19FFB2E80;
                      *(_QWORD *)v173 = &off_1E42B5668;
                      *(_QWORD *)(v173 + 8) = "VectorKitLabels";
                      *(_OWORD *)(v173 + 72) = 0u;
                      *(_OWORD *)(v173 + 88) = 0u;
                      *(_OWORD *)(v173 + 104) = 0u;
                      *(_OWORD *)(v173 + 120) = 0u;
                      *(_OWORD *)(v173 + 136) = 0u;
                      *(_OWORD *)(v173 + 152) = 0u;
                      *(_OWORD *)(v173 + 168) = 0u;
                      *(_OWORD *)(v173 + 184) = 0u;
                      *(_OWORD *)(v173 + 200) = 0u;
                      *(_OWORD *)(v173 + 216) = 0u;
                      *(_OWORD *)(v173 + 232) = 0u;
                      *(_QWORD *)(v173 + 248) = 0;
                      *(_OWORD *)(v173 + 56) = 0u;
                      v174 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v173 + 56), 0);
                      if ((_DWORD)v174)
                        geo::read_write_lock::logFailure(v174, (uint64_t)"initialization", v175);
                      v176 = malloc_create_zone(0, 0);
                      *(_QWORD *)(v173 + 48) = v176;
                      malloc_set_zone_name(v176, "VectorKitLabels");
                      *(_QWORD *)(v173 + 256) = os_log_create("com.apple.VectorKit", "Memory");
                      mdm::Allocator::instance(void)::alloc = v173;
                    }
                    v152 = mdm::Allocator::instance(void)::alloc;
                    *(_QWORD *)(v141 + 80) = 0;
                    *(_QWORD *)(v141 + 72) = v152;
                    *(_QWORD *)(v141 + 88) = 0;
                    *(_QWORD *)(v141 + 96) = 0;
                    if ((v152 & 1) == 0
                    {
                      v177 = operator new();
                      *(_QWORD *)(v177 + 16) = 0x5ED09DD50000000FLL;
                      *(_QWORD *)(v177 + 24) = "VectorKitLabels";
                      *(_OWORD *)(v177 + 32) = xmmword_19FFB2E80;
                      *(_QWORD *)v177 = &off_1E42B5668;
                      *(_QWORD *)(v177 + 8) = "VectorKitLabels";
                      *(_OWORD *)(v177 + 72) = 0u;
                      *(_OWORD *)(v177 + 88) = 0u;
                      *(_OWORD *)(v177 + 104) = 0u;
                      *(_OWORD *)(v177 + 120) = 0u;
                      *(_OWORD *)(v177 + 136) = 0u;
                      *(_OWORD *)(v177 + 152) = 0u;
                      *(_OWORD *)(v177 + 168) = 0u;
                      *(_OWORD *)(v177 + 184) = 0u;
                      *(_OWORD *)(v177 + 200) = 0u;
                      *(_OWORD *)(v177 + 216) = 0u;
                      *(_OWORD *)(v177 + 232) = 0u;
                      *(_QWORD *)(v177 + 248) = 0;
                      *(_OWORD *)(v177 + 56) = 0u;
                      v178 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v177 + 56), 0);
                      if ((_DWORD)v178)
                        geo::read_write_lock::logFailure(v178, (uint64_t)"initialization", v179);
                      v180 = malloc_create_zone(0, 0);
                      *(_QWORD *)(v177 + 48) = v180;
                      malloc_set_zone_name(v180, "VectorKitLabels");
                      *(_QWORD *)(v177 + 256) = os_log_create("com.apple.VectorKit", "Memory");
                      mdm::Allocator::instance(void)::alloc = v177;
                    }
                    *(_QWORD *)(v141 + 104) = mdm::Allocator::instance(void)::alloc;
                    md::LabelLineSegment::createLists((unsigned __int16 *)v141, (uint64_t)&v558);
                    v556 = v141;
                    v126 = a1;
                    break;
                }
                LOBYTE(v555) = v129;
                HIBYTE(v557) = v129;
                v146 = *(_QWORD *)(v126 + 128);
                v145 = *(_QWORD *)(v126 + 136);
                if (v146 == v145)
                {
LABEL_153:
                  v553 = v126;
                  if (v145 >= *(_QWORD *)(v126 + 144))
                  {
                    v147 = std::vector<md::LabelLineZSet,geo::StdAllocator<md::LabelLineZSet,mdm::Allocator>>::__emplace_back_slow_path<md::LabelLineStore *,unsigned char const&,unsigned char const&,md::LabelLineSource const&>(v548, &v553, (char *)&v555, (char *)&v557 + 1, v544);
                  }
                  else
                  {
                    if (v145)
                      v145 = md::LabelLineZSet::LabelLineZSet(v145, v126, v129, v129, *(_BYTE *)(v126 + 120));
                    v147 = v145 + 112;
                    *(_QWORD *)(v126 + 136) = v147;
                  }
                  *(_QWORD *)(v126 + 136) = v147;
                  v146 = v147 - 112;
                }
                else
                {
                  while (*(unsigned __int8 *)(v146 + 1) != v129)
                  {
                    v146 += 112;
                    if (v146 == v145)
                      goto LABEL_153;
                  }
                }
                v148 = *(uint64_t **)(v146 + 24);
                if ((unint64_t)v148 >= *(_QWORD *)(v146 + 32))
                {
                  v149 = std::vector<std::unique_ptr<md::LabelLineSegment>,geo::StdAllocator<std::unique_ptr<md::LabelLineSegment>,mdm::Allocator>>::__emplace_back_slow_path<std::unique_ptr<md::LabelLineSegment>>(v146 + 16, &v556);
                  v141 = v556;
                }
                else
                {
                  if (v148)
                  {
                    v556 = 0;
                    *v148 = v141;
                    v141 = 0;
                  }
                  v149 = v148 + 1;
                }
                *(_QWORD *)(v146 + 24) = v149;
                atomic_store(0, (unsigned __int8 *)(v126 + 248));
                v556 = 0;
                if (v141)
                  (*(void (**)(uint64_t))(*(_QWORD *)v141 + 8))(v141);
              }
              v127 = ++v128;
            }
            while (v130 > v128);
            v121 = (std::__shared_weak_count *)*((_QWORD *)&v552[0] + 1);
          }
          if (v121)
          {
            v181 = (unint64_t *)&v121->__shared_owners_;
            do
              v182 = __ldaxr(v181);
            while (__stlxr(v182 - 1, v181));
            if (!v182)
            {
              ((void (*)(std::__shared_weak_count *))v121->__on_zero_shared)(v121);
              std::__shared_weak_count::__release_weak(v121);
            }
          }
          goto LABEL_4;
        case 7:
          v65 = (uint64_t (***)(_QWORD, _QWORD, _QWORD))*((_QWORD *)v3 + 16);
          if (v65)
          {
            v66 = (**v65)(v65, *((_QWORD *)v3 + 5), *((unsigned __int8 *)v3 + 224));
            LODWORD(v65) = (*(uint64_t (**)(_QWORD, _QWORD))(**((_QWORD **)v3 + 16) + 8))(*((_QWORD *)v3 + 16), *((_QWORD *)v3 + 5));
          }
          else
          {
            v66 = 0;
          }
          v109 = *((_QWORD *)v3 + 14);
          v110 = (std::__shared_weak_count *)*((_QWORD *)v3 + 15);
          v553 = v109;
          v554 = v110;
          v111 = a1;
          if (v110)
          {
            v112 = (unint64_t *)&v110->__shared_owners_;
            do
              v113 = __ldxr(v112);
            while (__stxr(v113 + 1, v112));
          }
          v114 = *(_QWORD *)(v109 + 184);
          v115 = 0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(v109 + 192) - v114) >> 3);
          v552[0] = v537;
          v552[1] = v536;
          if (v115 < 2)
            goto LABEL_636;
          v555 = 0;
          LOWORD(v558) = *(_WORD *)(a1 + 121);
          HIDWORD(v558) = 0;
          v559 = 0;
          v560 = v552;
          v561 = 0;
          v562 = 0;
          v563 = 0;
          v564 = v114;
          v565 = 0;
          v566 = v115;
          v567 = 0x3F80000000000000;
          v568 = __PAIR64__(v65, v66);
          v569 = 0;
          v570 = *(_BYTE *)(a1 + 290);
          switch(v115)
          {
            case 2uLL:
              {
                v515 = operator new();
                *(_QWORD *)(v515 + 16) = 0x5ED09DD50000000FLL;
                *(_QWORD *)(v515 + 24) = "VectorKitLabels";
                *(_OWORD *)(v515 + 32) = xmmword_19FFB2E80;
                *(_QWORD *)v515 = &off_1E42B5668;
                *(_QWORD *)(v515 + 8) = "VectorKitLabels";
                *(_OWORD *)(v515 + 72) = 0u;
                *(_OWORD *)(v515 + 88) = 0u;
                *(_OWORD *)(v515 + 104) = 0u;
                *(_OWORD *)(v515 + 120) = 0u;
                *(_OWORD *)(v515 + 136) = 0u;
                *(_OWORD *)(v515 + 152) = 0u;
                *(_OWORD *)(v515 + 168) = 0u;
                *(_OWORD *)(v515 + 184) = 0u;
                *(_OWORD *)(v515 + 200) = 0u;
                *(_OWORD *)(v515 + 216) = 0u;
                *(_OWORD *)(v515 + 232) = 0u;
                *(_QWORD *)(v515 + 248) = 0;
                *(_OWORD *)(v515 + 56) = 0u;
                v516 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v515 + 56), 0);
                if ((_DWORD)v516)
                  geo::read_write_lock::logFailure(v516, (uint64_t)"initialization", v517);
                v518 = malloc_create_zone(0, 0);
                *(_QWORD *)(v515 + 48) = v518;
                malloc_set_zone_name(v518, "VectorKitLabels");
                *(_QWORD *)(v515 + 256) = os_log_create("com.apple.VectorKit", "Memory");
                mdm::Allocator::instance(void)::alloc = v515;
                v111 = a1;
              }
              v117 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc
                                                                          + 16))(mdm::Allocator::instance(void)::alloc, 152, 8);
              md::LabelLineSegment::LabelLineSegment(v117, &v553, (uint64_t)&v558);
              *(_QWORD *)v117 = off_1E429B0A0;
              *(_OWORD *)(v117 + 48) = 0u;
              *(_OWORD *)(v117 + 64) = 0u;
              *(_QWORD *)(v117 + 80) = 0;
              *(_DWORD *)(v117 + 88) = 2139095039;
              *(_WORD *)(v117 + 92) = 0;
              *(_BYTE *)(v117 + 94) = 0;
              *(_OWORD *)(v117 + 96) = 0u;
              *(_OWORD *)(v117 + 112) = 0u;
              *(_QWORD *)(v117 + 128) = 0;
              *(_DWORD *)(v117 + 136) = 2139095039;
              *(_WORD *)(v117 + 140) = 0;
              *(_BYTE *)(v117 + 142) = 0;
              *(_QWORD *)(v117 + 144) = 0x7F7F00007F7FLL;
              if (*(unsigned __int16 *)(v117 + 46) < 2u)
                goto LABEL_619;
              md::LabelLineSegment::createPointList(v117, (uint64_t)&v558);
              v118 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v117 + 64))(v117);
              v119 = *(unsigned __int16 *)(v117 + 46);
              if (!*(_WORD *)(v117 + 46))
                goto LABEL_619;
              if (v119 < 8)
              {
                v120 = 0;
                goto LABEL_597;
              }
              if (v119 >= 0x20)
              {
                v120 = (unsigned __int16)v119 & 0xFFE0;
                v461 = (_OWORD *)(v118 + 64);
                v462 = v120;
                *(_QWORD *)&v463 = 0x7F0000007F00;
                *((_QWORD *)&v463 + 1) = 0x7F0000007F00;
                do
                {
                  *(v461 - 2) = v463;
                  *(v461 - 1) = v463;
                  *(v461 - 4) = v463;
                  *(v461 - 3) = v463;
                  v461[2] = v463;
                  v461[3] = v463;
                  *v461 = v463;
                  v461[1] = v463;
                  v461 += 8;
                  v462 -= 32;
                }
                while (v462);
                if (v120 == v119)
                  goto LABEL_619;
                if ((v119 & 0x18) == 0)
                {
LABEL_597:
                  v468 = v119 - v120;
                  v469 = (_DWORD *)(v118 + 4 * v120);
                  do
                  {
                    *v469++ = 32512;
                    --v468;
                  }
                  while (v468);
                  goto LABEL_619;
                }
              }
              else
              {
                v120 = 0;
              }
              v464 = v120;
              v120 = (unsigned __int16)v119 & 0xFFF8;
              v465 = v464 - v120;
              v466 = (_OWORD *)(v118 + 4 * v464);
              *(_QWORD *)&v467 = 0x7F0000007F00;
              *((_QWORD *)&v467 + 1) = 0x7F0000007F00;
              do
              {
                *v466 = v467;
                v466[1] = v467;
                v466 += 2;
                v465 += 8;
              }
              while (v465);
              if (v120 != v119)
                goto LABEL_597;
              goto LABEL_619;
            case 3uLL:
              {
                v519 = operator new();
                *(_QWORD *)(v519 + 16) = 0x5ED09DD50000000FLL;
                *(_QWORD *)(v519 + 24) = "VectorKitLabels";
                *(_OWORD *)(v519 + 32) = xmmword_19FFB2E80;
                *(_QWORD *)v519 = &off_1E42B5668;
                *(_QWORD *)(v519 + 8) = "VectorKitLabels";
                *(_OWORD *)(v519 + 72) = 0u;
                *(_OWORD *)(v519 + 88) = 0u;
                *(_OWORD *)(v519 + 104) = 0u;
                *(_OWORD *)(v519 + 120) = 0u;
                *(_OWORD *)(v519 + 136) = 0u;
                *(_OWORD *)(v519 + 152) = 0u;
                *(_OWORD *)(v519 + 168) = 0u;
                *(_OWORD *)(v519 + 184) = 0u;
                *(_OWORD *)(v519 + 200) = 0u;
                *(_OWORD *)(v519 + 216) = 0u;
                *(_OWORD *)(v519 + 232) = 0u;
                *(_QWORD *)(v519 + 248) = 0;
                *(_OWORD *)(v519 + 56) = 0u;
                v520 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v519 + 56), 0);
                if ((_DWORD)v520)
                  geo::read_write_lock::logFailure(v520, (uint64_t)"initialization", v521);
                v522 = malloc_create_zone(0, 0);
                *(_QWORD *)(v519 + 48) = v522;
                malloc_set_zone_name(v522, "VectorKitLabels");
                *(_QWORD *)(v519 + 256) = os_log_create("com.apple.VectorKit", "Memory");
                mdm::Allocator::instance(void)::alloc = v519;
                v111 = a1;
              }
              v117 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc
                                                                          + 16))(mdm::Allocator::instance(void)::alloc, 208, 8);
              md::LabelLineSegment::LabelLineSegment(v117, &v553, (uint64_t)&v558);
              *(_QWORD *)v117 = off_1E429B0F8;
              *(_OWORD *)(v117 + 48) = 0u;
              *(_OWORD *)(v117 + 64) = 0u;
              *(_QWORD *)(v117 + 80) = 0;
              *(_DWORD *)(v117 + 88) = 2139095039;
              *(_WORD *)(v117 + 92) = 0;
              *(_BYTE *)(v117 + 94) = 0;
              *(_OWORD *)(v117 + 96) = 0u;
              *(_OWORD *)(v117 + 112) = 0u;
              *(_QWORD *)(v117 + 128) = 0;
              *(_DWORD *)(v117 + 136) = 2139095039;
              *(_WORD *)(v117 + 140) = 0;
              *(_BYTE *)(v117 + 142) = 0;
              *(_OWORD *)(v117 + 144) = 0u;
              *(_OWORD *)(v117 + 160) = 0u;
              *(_QWORD *)(v117 + 176) = 0;
              *(_DWORD *)(v117 + 184) = 2139095039;
              *(_WORD *)(v117 + 188) = 0;
              *(_BYTE *)(v117 + 190) = 0;
              *(_QWORD *)(v117 + 192) = 0x7F7F00007F7FLL;
              *(_DWORD *)(v117 + 200) = 32639;
              if (*(unsigned __int16 *)(v117 + 46) < 2u)
                goto LABEL_619;
              md::LabelLineSegment::createPointList(v117, (uint64_t)&v558);
              v373 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v117 + 64))(v117);
              v374 = *(unsigned __int16 *)(v117 + 46);
              if (!*(_WORD *)(v117 + 46))
                goto LABEL_619;
              if (v374 < 8)
              {
                v375 = 0;
                goto LABEL_607;
              }
              if (v374 >= 0x20)
              {
                v375 = (unsigned __int16)v374 & 0xFFE0;
                v470 = (_OWORD *)(v373 + 64);
                v471 = v375;
                *(_QWORD *)&v472 = 0x7F0000007F00;
                *((_QWORD *)&v472 + 1) = 0x7F0000007F00;
                do
                {
                  *(v470 - 2) = v472;
                  *(v470 - 1) = v472;
                  *(v470 - 4) = v472;
                  *(v470 - 3) = v472;
                  v470[2] = v472;
                  v470[3] = v472;
                  *v470 = v472;
                  v470[1] = v472;
                  v470 += 8;
                  v471 -= 32;
                }
                while (v471);
                if (v375 == v374)
                  goto LABEL_619;
                if ((v374 & 0x18) == 0)
                {
LABEL_607:
                  v477 = v374 - v375;
                  v478 = (_DWORD *)(v373 + 4 * v375);
                  do
                  {
                    *v478++ = 32512;
                    --v477;
                  }
                  while (v477);
                  goto LABEL_619;
                }
              }
              else
              {
                v375 = 0;
              }
              v473 = v375;
              v375 = (unsigned __int16)v374 & 0xFFF8;
              v474 = v473 - v375;
              v475 = (_OWORD *)(v373 + 4 * v473);
              *(_QWORD *)&v476 = 0x7F0000007F00;
              *((_QWORD *)&v476 + 1) = 0x7F0000007F00;
              do
              {
                *v475 = v476;
                v475[1] = v476;
                v475 += 2;
                v474 += 8;
              }
              while (v474);
              if (v375 != v374)
                goto LABEL_607;
              goto LABEL_619;
            case 4uLL:
              {
                v507 = operator new();
                *(_QWORD *)(v507 + 16) = 0x5ED09DD50000000FLL;
                *(_QWORD *)(v507 + 24) = "VectorKitLabels";
                *(_OWORD *)(v507 + 32) = xmmword_19FFB2E80;
                *(_QWORD *)v507 = &off_1E42B5668;
                *(_QWORD *)(v507 + 8) = "VectorKitLabels";
                *(_OWORD *)(v507 + 72) = 0u;
                *(_OWORD *)(v507 + 88) = 0u;
                *(_OWORD *)(v507 + 104) = 0u;
                *(_OWORD *)(v507 + 120) = 0u;
                *(_OWORD *)(v507 + 136) = 0u;
                *(_OWORD *)(v507 + 152) = 0u;
                *(_OWORD *)(v507 + 168) = 0u;
                *(_OWORD *)(v507 + 184) = 0u;
                *(_OWORD *)(v507 + 200) = 0u;
                *(_OWORD *)(v507 + 216) = 0u;
                *(_OWORD *)(v507 + 232) = 0u;
                *(_QWORD *)(v507 + 248) = 0;
                *(_OWORD *)(v507 + 56) = 0u;
                v508 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v507 + 56), 0);
                if ((_DWORD)v508)
                  geo::read_write_lock::logFailure(v508, (uint64_t)"initialization", v509);
                v510 = malloc_create_zone(0, 0);
                *(_QWORD *)(v507 + 48) = v510;
                malloc_set_zone_name(v510, "VectorKitLabels");
                *(_QWORD *)(v507 + 256) = os_log_create("com.apple.VectorKit", "Memory");
                mdm::Allocator::instance(void)::alloc = v507;
                v111 = a1;
              }
              v117 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc
                                                                          + 16))(mdm::Allocator::instance(void)::alloc, 256, 8);
              md::LabelLineSegment::LabelLineSegment(v117, &v553, (uint64_t)&v558);
              *(_QWORD *)v117 = off_1E429B150;
              *(_OWORD *)(v117 + 48) = 0u;
              *(_OWORD *)(v117 + 64) = 0u;
              *(_QWORD *)(v117 + 80) = 0;
              *(_DWORD *)(v117 + 88) = 2139095039;
              *(_WORD *)(v117 + 92) = 0;
              *(_BYTE *)(v117 + 94) = 0;
              *(_OWORD *)(v117 + 96) = 0u;
              *(_OWORD *)(v117 + 112) = 0u;
              *(_QWORD *)(v117 + 128) = 0;
              *(_DWORD *)(v117 + 136) = 2139095039;
              *(_WORD *)(v117 + 140) = 0;
              *(_BYTE *)(v117 + 142) = 0;
              *(_OWORD *)(v117 + 144) = 0u;
              *(_OWORD *)(v117 + 160) = 0u;
              *(_QWORD *)(v117 + 176) = 0;
              *(_DWORD *)(v117 + 184) = 2139095039;
              *(_WORD *)(v117 + 188) = 0;
              *(_BYTE *)(v117 + 190) = 0;
              *(_QWORD *)(v117 + 224) = 0;
              *(_OWORD *)(v117 + 192) = 0u;
              *(_OWORD *)(v117 + 208) = 0u;
              *(_DWORD *)(v117 + 232) = 2139095039;
              *(_WORD *)(v117 + 236) = 0;
              *(_BYTE *)(v117 + 238) = 0;
              *(_OWORD *)(v117 + 240) = xmmword_19FFB4C40;
              if (*(unsigned __int16 *)(v117 + 46) < 2u)
                goto LABEL_619;
              md::LabelLineSegment::createPointList(v117, (uint64_t)&v558);
              v365 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v117 + 64))(v117);
              v366 = *(unsigned __int16 *)(v117 + 46);
              if (!*(_WORD *)(v117 + 46))
                goto LABEL_619;
              if (v366 < 8)
              {
                v367 = 0;
                goto LABEL_577;
              }
              if (v366 >= 0x20)
              {
                v367 = (unsigned __int16)v366 & 0xFFE0;
                v443 = (_OWORD *)(v365 + 64);
                v444 = v367;
                *(_QWORD *)&v445 = 0x7F0000007F00;
                *((_QWORD *)&v445 + 1) = 0x7F0000007F00;
                do
                {
                  *(v443 - 2) = v445;
                  *(v443 - 1) = v445;
                  *(v443 - 4) = v445;
                  *(v443 - 3) = v445;
                  v443[2] = v445;
                  v443[3] = v445;
                  *v443 = v445;
                  v443[1] = v445;
                  v443 += 8;
                  v444 -= 32;
                }
                while (v444);
                if (v367 == v366)
                  goto LABEL_619;
                if ((v366 & 0x18) == 0)
                {
LABEL_577:
                  v450 = v366 - v367;
                  v451 = (_DWORD *)(v365 + 4 * v367);
                  do
                  {
                    *v451++ = 32512;
                    --v450;
                  }
                  while (v450);
                  goto LABEL_619;
                }
              }
              else
              {
                v367 = 0;
              }
              v446 = v367;
              v367 = (unsigned __int16)v366 & 0xFFF8;
              v447 = v446 - v367;
              v448 = (_OWORD *)(v365 + 4 * v446);
              *(_QWORD *)&v449 = 0x7F0000007F00;
              *((_QWORD *)&v449 + 1) = 0x7F0000007F00;
              do
              {
                *v448 = v449;
                v448[1] = v449;
                v448 += 2;
                v447 += 8;
              }
              while (v447);
              if (v367 != v366)
                goto LABEL_577;
              goto LABEL_619;
            case 5uLL:
              {
                v511 = operator new();
                *(_QWORD *)(v511 + 16) = 0x5ED09DD50000000FLL;
                *(_QWORD *)(v511 + 24) = "VectorKitLabels";
                *(_OWORD *)(v511 + 32) = xmmword_19FFB2E80;
                *(_QWORD *)v511 = &off_1E42B5668;
                *(_QWORD *)(v511 + 8) = "VectorKitLabels";
                *(_OWORD *)(v511 + 72) = 0u;
                *(_OWORD *)(v511 + 88) = 0u;
                *(_OWORD *)(v511 + 104) = 0u;
                *(_OWORD *)(v511 + 120) = 0u;
                *(_OWORD *)(v511 + 136) = 0u;
                *(_OWORD *)(v511 + 152) = 0u;
                *(_OWORD *)(v511 + 168) = 0u;
                *(_OWORD *)(v511 + 184) = 0u;
                *(_OWORD *)(v511 + 200) = 0u;
                *(_OWORD *)(v511 + 216) = 0u;
                *(_OWORD *)(v511 + 232) = 0u;
                *(_QWORD *)(v511 + 248) = 0;
                *(_OWORD *)(v511 + 56) = 0u;
                v512 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v511 + 56), 0);
                if ((_DWORD)v512)
                  geo::read_write_lock::logFailure(v512, (uint64_t)"initialization", v513);
                v514 = malloc_create_zone(0, 0);
                *(_QWORD *)(v511 + 48) = v514;
                malloc_set_zone_name(v514, "VectorKitLabels");
                *(_QWORD *)(v511 + 256) = os_log_create("com.apple.VectorKit", "Memory");
                mdm::Allocator::instance(void)::alloc = v511;
                v111 = a1;
              }
              v117 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc
                                                                          + 16))(mdm::Allocator::instance(void)::alloc, 312, 8);
              md::LabelLineSegment::LabelLineSegment(v117, &v553, (uint64_t)&v558);
              *(_QWORD *)v117 = off_1E429B1A8;
              *(_OWORD *)(v117 + 48) = 0u;
              *(_OWORD *)(v117 + 64) = 0u;
              *(_QWORD *)(v117 + 80) = 0;
              *(_DWORD *)(v117 + 88) = 2139095039;
              *(_WORD *)(v117 + 92) = 0;
              *(_BYTE *)(v117 + 94) = 0;
              *(_OWORD *)(v117 + 96) = 0u;
              *(_OWORD *)(v117 + 112) = 0u;
              *(_QWORD *)(v117 + 128) = 0;
              *(_DWORD *)(v117 + 136) = 2139095039;
              *(_WORD *)(v117 + 140) = 0;
              *(_BYTE *)(v117 + 142) = 0;
              *(_OWORD *)(v117 + 144) = 0u;
              *(_OWORD *)(v117 + 160) = 0u;
              *(_QWORD *)(v117 + 176) = 0;
              *(_DWORD *)(v117 + 184) = 2139095039;
              *(_WORD *)(v117 + 188) = 0;
              *(_BYTE *)(v117 + 190) = 0;
              *(_QWORD *)(v117 + 224) = 0;
              *(_OWORD *)(v117 + 192) = 0u;
              *(_OWORD *)(v117 + 208) = 0u;
              *(_DWORD *)(v117 + 232) = 2139095039;
              *(_WORD *)(v117 + 236) = 0;
              *(_BYTE *)(v117 + 238) = 0;
              *(_OWORD *)(v117 + 240) = 0u;
              *(_OWORD *)(v117 + 256) = 0u;
              *(_QWORD *)(v117 + 272) = 0;
              *(_DWORD *)(v117 + 280) = 2139095039;
              *(_WORD *)(v117 + 284) = 0;
              *(_BYTE *)(v117 + 286) = 0;
              *(_OWORD *)(v117 + 288) = xmmword_19FFB4C40;
              *(_DWORD *)(v117 + 304) = 32639;
              if (*(unsigned __int16 *)(v117 + 46) < 2u)
                goto LABEL_619;
              md::LabelLineSegment::createPointList(v117, (uint64_t)&v558);
              v369 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v117 + 64))(v117);
              v370 = *(unsigned __int16 *)(v117 + 46);
              if (!*(_WORD *)(v117 + 46))
                goto LABEL_619;
              if (v370 < 8)
              {
                v371 = 0;
                goto LABEL_587;
              }
              if (v370 >= 0x20)
              {
                v371 = (unsigned __int16)v370 & 0xFFE0;
                v452 = (_OWORD *)(v369 + 64);
                v453 = v371;
                *(_QWORD *)&v454 = 0x7F0000007F00;
                *((_QWORD *)&v454 + 1) = 0x7F0000007F00;
                do
                {
                  *(v452 - 2) = v454;
                  *(v452 - 1) = v454;
                  *(v452 - 4) = v454;
                  *(v452 - 3) = v454;
                  v452[2] = v454;
                  v452[3] = v454;
                  *v452 = v454;
                  v452[1] = v454;
                  v452 += 8;
                  v453 -= 32;
                }
                while (v453);
                if (v371 == v370)
                  goto LABEL_619;
                if ((v370 & 0x18) == 0)
                {
LABEL_587:
                  v459 = v370 - v371;
                  v460 = (_DWORD *)(v369 + 4 * v371);
                  do
                  {
                    *v460++ = 32512;
                    --v459;
                  }
                  while (v459);
                  goto LABEL_619;
                }
              }
              else
              {
                v371 = 0;
              }
              v455 = v371;
              v371 = (unsigned __int16)v370 & 0xFFF8;
              v456 = v455 - v371;
              v457 = (_OWORD *)(v369 + 4 * v455);
              *(_QWORD *)&v458 = 0x7F0000007F00;
              *((_QWORD *)&v458 + 1) = 0x7F0000007F00;
              do
              {
                *v457 = v458;
                v457[1] = v458;
                v457 += 2;
                v456 += 8;
              }
              while (v456);
              if (v371 != v370)
                goto LABEL_587;
              goto LABEL_619;
            default:
              {
                v523 = operator new();
                *(_QWORD *)(v523 + 16) = 0x5ED09DD50000000FLL;
                *(_QWORD *)(v523 + 24) = "VectorKitLabels";
                *(_OWORD *)(v523 + 32) = xmmword_19FFB2E80;
                *(_QWORD *)v523 = &off_1E42B5668;
                *(_QWORD *)(v523 + 8) = "VectorKitLabels";
                *(_OWORD *)(v523 + 72) = 0u;
                *(_OWORD *)(v523 + 88) = 0u;
                *(_OWORD *)(v523 + 104) = 0u;
                *(_OWORD *)(v523 + 120) = 0u;
                *(_OWORD *)(v523 + 136) = 0u;
                *(_OWORD *)(v523 + 152) = 0u;
                *(_OWORD *)(v523 + 168) = 0u;
                *(_OWORD *)(v523 + 184) = 0u;
                *(_OWORD *)(v523 + 200) = 0u;
                *(_OWORD *)(v523 + 216) = 0u;
                *(_OWORD *)(v523 + 232) = 0u;
                *(_QWORD *)(v523 + 248) = 0;
                *(_OWORD *)(v523 + 56) = 0u;
                v524 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v523 + 56), 0);
                if ((_DWORD)v524)
                  geo::read_write_lock::logFailure(v524, (uint64_t)"initialization", v525);
                v526 = malloc_create_zone(0, 0);
                *(_QWORD *)(v523 + 48) = v526;
                malloc_set_zone_name(v526, "VectorKitLabels");
                *(_QWORD *)(v523 + 256) = os_log_create("com.apple.VectorKit", "Memory");
                mdm::Allocator::instance(void)::alloc = v523;
                v111 = a1;
              }
              v117 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc
                                                                          + 16))(mdm::Allocator::instance(void)::alloc, 112, 8);
              md::LabelLineSegment::LabelLineSegment(v117, &v553, (uint64_t)&v558);
              *(_QWORD *)v117 = off_1E4299158;
              *(_QWORD *)(v117 + 48) = 0;
              *(_QWORD *)(v117 + 56) = 0;
              *(_QWORD *)(v117 + 64) = 0;
              {
                v527 = operator new();
                *(_QWORD *)(v527 + 16) = 0x5ED09DD50000000FLL;
                *(_QWORD *)(v527 + 24) = "VectorKitLabels";
                *(_OWORD *)(v527 + 32) = xmmword_19FFB2E80;
                *(_QWORD *)v527 = &off_1E42B5668;
                *(_QWORD *)(v527 + 8) = "VectorKitLabels";
                *(_OWORD *)(v527 + 72) = 0u;
                *(_OWORD *)(v527 + 88) = 0u;
                *(_OWORD *)(v527 + 104) = 0u;
                *(_OWORD *)(v527 + 120) = 0u;
                *(_OWORD *)(v527 + 136) = 0u;
                *(_OWORD *)(v527 + 152) = 0u;
                *(_OWORD *)(v527 + 168) = 0u;
                *(_OWORD *)(v527 + 184) = 0u;
                *(_OWORD *)(v527 + 200) = 0u;
                *(_OWORD *)(v527 + 216) = 0u;
                *(_OWORD *)(v527 + 232) = 0u;
                *(_QWORD *)(v527 + 248) = 0;
                *(_OWORD *)(v527 + 56) = 0u;
                v528 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v527 + 56), 0);
                if ((_DWORD)v528)
                  geo::read_write_lock::logFailure(v528, (uint64_t)"initialization", v529);
                v530 = malloc_create_zone(0, 0);
                *(_QWORD *)(v527 + 48) = v530;
                malloc_set_zone_name(v530, "VectorKitLabels");
                *(_QWORD *)(v527 + 256) = os_log_create("com.apple.VectorKit", "Memory");
                mdm::Allocator::instance(void)::alloc = v527;
                v111 = a1;
              }
              v378 = mdm::Allocator::instance(void)::alloc;
              *(_QWORD *)(v117 + 80) = 0;
              *(_QWORD *)(v117 + 72) = v378;
              *(_QWORD *)(v117 + 88) = 0;
              *(_QWORD *)(v117 + 96) = 0;
              {
                v531 = operator new();
                *(_QWORD *)(v531 + 16) = 0x5ED09DD50000000FLL;
                *(_QWORD *)(v531 + 24) = "VectorKitLabels";
                *(_OWORD *)(v531 + 32) = xmmword_19FFB2E80;
                *(_QWORD *)v531 = &off_1E42B5668;
                *(_QWORD *)(v531 + 8) = "VectorKitLabels";
                *(_OWORD *)(v531 + 72) = 0u;
                *(_OWORD *)(v531 + 88) = 0u;
                *(_OWORD *)(v531 + 104) = 0u;
                *(_OWORD *)(v531 + 120) = 0u;
                *(_OWORD *)(v531 + 136) = 0u;
                *(_OWORD *)(v531 + 152) = 0u;
                *(_OWORD *)(v531 + 168) = 0u;
                *(_OWORD *)(v531 + 184) = 0u;
                *(_OWORD *)(v531 + 200) = 0u;
                *(_OWORD *)(v531 + 216) = 0u;
                *(_OWORD *)(v531 + 232) = 0u;
                *(_QWORD *)(v531 + 248) = 0;
                *(_OWORD *)(v531 + 56) = 0u;
                v532 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v531 + 56), 0);
                if ((_DWORD)v532)
                  geo::read_write_lock::logFailure(v532, (uint64_t)"initialization", v533);
                v534 = malloc_create_zone(0, 0);
                *(_QWORD *)(v531 + 48) = v534;
                malloc_set_zone_name(v534, "VectorKitLabels");
                *(_QWORD *)(v531 + 256) = os_log_create("com.apple.VectorKit", "Memory");
                mdm::Allocator::instance(void)::alloc = v531;
                v111 = a1;
              }
              *(_QWORD *)(v117 + 104) = mdm::Allocator::instance(void)::alloc;
              if (*(unsigned __int16 *)(v117 + 46) < 2u)
                goto LABEL_619;
              md::LabelLineSegment::createPointList(v117, (uint64_t)&v558);
              v379 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v117 + 64))(v117);
              v380 = *(unsigned __int16 *)(v117 + 46);
              if (!*(_WORD *)(v117 + 46))
                goto LABEL_619;
              if (v380 < 8)
              {
                v381 = 0;
                goto LABEL_617;
              }
              if (v380 >= 0x20)
              {
                v381 = (unsigned __int16)v380 & 0xFFE0;
                v479 = (_OWORD *)(v379 + 64);
                v480 = v381;
                *(_QWORD *)&v481 = 0x7F0000007F00;
                *((_QWORD *)&v481 + 1) = 0x7F0000007F00;
                do
                {
                  *(v479 - 2) = v481;
                  *(v479 - 1) = v481;
                  *(v479 - 4) = v481;
                  *(v479 - 3) = v481;
                  v479[2] = v481;
                  v479[3] = v481;
                  *v479 = v481;
                  v479[1] = v481;
                  v479 += 8;
                  v480 -= 32;
                }
                while (v480);
                if (v381 == v380)
                  goto LABEL_619;
                if ((v380 & 0x18) == 0)
                {
LABEL_617:
                  v486 = v380 - v381;
                  v487 = (_DWORD *)(v379 + 4 * v381);
                  do
                  {
                    *v487++ = 32512;
                    --v486;
                  }
                  while (v486);
                  goto LABEL_619;
                }
              }
              else
              {
                v381 = 0;
              }
              v482 = v381;
              v381 = (unsigned __int16)v380 & 0xFFF8;
              v483 = v482 - v381;
              v484 = (_OWORD *)(v379 + 4 * v482);
              *(_QWORD *)&v485 = 0x7F0000007F00;
              *((_QWORD *)&v485 + 1) = 0x7F0000007F00;
              do
              {
                *v484 = v485;
                v484[1] = v485;
                v484 += 2;
                v483 += 8;
              }
              while (v483);
              if (v381 != v380)
                goto LABEL_617;
LABEL_619:
              v555 = v117;
              v557 = 0;
              v489 = *(_QWORD *)(v111 + 128);
              v488 = *(_QWORD *)(v111 + 136);
              if (v489 == v488)
              {
LABEL_622:
                v556 = v111;
                if (v488 >= *(_QWORD *)(v111 + 144))
                {
                  v490 = std::vector<md::LabelLineZSet,geo::StdAllocator<md::LabelLineZSet,mdm::Allocator>>::__emplace_back_slow_path<md::LabelLineStore *,unsigned char const&,unsigned char const&,md::LabelLineSource const&>(v548, &v556, (char *)&v557 + 1, (char *)&v557, v544);
                }
                else
                {
                  if (v488)
                    v488 = md::LabelLineZSet::LabelLineZSet(v488, v111, 0, 0, *(_BYTE *)(v111 + 120));
                  v490 = v488 + 112;
                  *(_QWORD *)(v111 + 136) = v490;
                }
                *(_QWORD *)(v111 + 136) = v490;
                v489 = v490 - 112;
              }
              else
              {
                while (*(_BYTE *)(v489 + 1))
                {
                  v489 += 112;
                  if (v489 == v488)
                    goto LABEL_622;
                }
              }
              v491 = *(uint64_t **)(v489 + 24);
              if ((unint64_t)v491 >= *(_QWORD *)(v489 + 32))
              {
                v492 = std::vector<std::unique_ptr<md::LabelLineSegment>,geo::StdAllocator<std::unique_ptr<md::LabelLineSegment>,mdm::Allocator>>::__emplace_back_slow_path<std::unique_ptr<md::LabelLineSegment>>(v489 + 16, &v555);
                v117 = v555;
              }
              else
              {
                if (v491)
                {
                  v555 = 0;
                  *v491 = v117;
                  v117 = 0;
                }
                v492 = v491 + 1;
              }
              *(_QWORD *)(v489 + 24) = v492;
              atomic_store(0, (unsigned __int8 *)(v111 + 248));
              v555 = 0;
              if (v117)
                (*(void (**)(uint64_t))(*(_QWORD *)v117 + 8))(v117);
              v110 = v554;
LABEL_636:
              if (v110)
              {
                v493 = (unint64_t *)&v110->__shared_owners_;
                do
                  v494 = __ldaxr(v493);
                while (__stlxr(v494 - 1, v493));
                if (!v494)
                {
                  ((void (*)(std::__shared_weak_count *))v110->__on_zero_shared)(v110);
                  std::__shared_weak_count::__release_weak(v110);
                }
              }
              goto LABEL_4;
          }
        case 8:
          v100 = (uint64_t (***)(_QWORD, _QWORD, _QWORD))*((_QWORD *)v3 + 16);
          if (v100)
          {
            v101 = (**v100)(v100, *((_QWORD *)v3 + 5), *((unsigned __int8 *)v3 + 224));
            v102 = (*(uint64_t (**)(_QWORD, _QWORD))(**((_QWORD **)v3 + 16) + 8))(*((_QWORD *)v3 + 16), *((_QWORD *)v3 + 5));
          }
          else
          {
            v102 = 0;
            v101 = 0;
          }
          v183 = *((_QWORD *)v3 + 5);
          v184 = *(_BYTE *)(geo::codec::VectorTile::key(*((geo::codec::VectorTile **)v3 + 6)) + 1);
          v185 = *((_BYTE *)v3 + 216);
          v186 = geo::codec::VectorTile::transitVertices(*((geo::codec::VectorTile **)v3 + 6));
          v187 = *(unsigned int *)(v183 + 20);
          if ((_DWORD)v187)
          {
            v188 = v186;
            v189 = 0;
            v190 = v184 & 0x3F;
            v191 = (_OWORD *)((char *)v3 + 184);
            v547 = (const md::LabelLineStore::WorkUnit *)((char *)v3 + 144);
            v541 = v101;
            v543 = (char *)v3 + 184;
            do
            {
              v192 = *(_QWORD *)(v188 + 32) + 16 * *(unsigned int *)(v183 + 16);
              v193 = *(_QWORD *)(v192 + 16 * v189 + 8);
              if (v193 >= 2)
              {
                v194 = *(_QWORD *)(v188 + 8);
                v195 = *(_QWORD *)(v192 + 16 * v189);
                v553 = 0;
                LOWORD(v558) = *(_WORD *)(a1 + 121);
                HIDWORD(v558) = v189;
                LOBYTE(v559) = v185;
                HIBYTE(v559) = v190;
                v560 = v191;
                v561 = v547;
                v562 = v194 + 8 * v195;
                v566 = v193;
                v567 = 0;
                v563 = 0;
                v564 = 0;
                v565 = 0;
                v568 = __PAIR64__(v102, v101);
                v569 = 0;
                v570 = *(_BYTE *)(a1 + 290);
                switch(v193)
                {
                  case 2uLL:
                    if ((v196 & 1) == 0
                    {
                      v218 = operator new();
                      *(_QWORD *)(v218 + 16) = 0x5ED09DD50000000FLL;
                      *(_QWORD *)(v218 + 24) = "VectorKitLabels";
                      *(_OWORD *)(v218 + 32) = xmmword_19FFB2E80;
                      *(_QWORD *)v218 = &off_1E42B5668;
                      *(_QWORD *)(v218 + 8) = "VectorKitLabels";
                      *(_OWORD *)(v218 + 72) = 0u;
                      *(_OWORD *)(v218 + 88) = 0u;
                      *(_OWORD *)(v218 + 104) = 0u;
                      *(_OWORD *)(v218 + 120) = 0u;
                      *(_OWORD *)(v218 + 136) = 0u;
                      *(_OWORD *)(v218 + 152) = 0u;
                      *(_OWORD *)(v218 + 168) = 0u;
                      *(_OWORD *)(v218 + 184) = 0u;
                      *(_OWORD *)(v218 + 200) = 0u;
                      *(_OWORD *)(v218 + 216) = 0u;
                      *(_OWORD *)(v218 + 232) = 0u;
                      *(_QWORD *)(v218 + 248) = 0;
                      *(_OWORD *)(v218 + 56) = 0u;
                      v219 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v218 + 56), 0);
                      if ((_DWORD)v219)
                        geo::read_write_lock::logFailure(v219, (uint64_t)"initialization", v220);
                      v221 = malloc_create_zone(0, 0);
                      *(_QWORD *)(v218 + 48) = v221;
                      malloc_set_zone_name(v221, "VectorKitLabels");
                      *(_QWORD *)(v218 + 256) = os_log_create("com.apple.VectorKit", "Memory");
                      mdm::Allocator::instance(void)::alloc = v218;
                      v101 = v541;
                      v191 = v543;
                    }
                    v197 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc
                                                                                + 16))(mdm::Allocator::instance(void)::alloc, 152, 8);
                    *(_QWORD *)(v197 + 8) = 0;
                    *(_QWORD *)(v197 + 16) = v183;
                    *(_QWORD *)(v197 + 24) = 0;
                    *(_BYTE *)(v197 + 32) = 2;
                    *(_BYTE *)(v197 + 33) = v570;
                    *(_WORD *)(v197 + 34) = v559;
                    *(_WORD *)(v197 + 36) = 0;
                    *(_BYTE *)(v197 + 38) = v568;
                    *(_DWORD *)(v197 + 40) = 0;
                    *(_WORD *)(v197 + 44) = WORD2(v558);
                    *(_WORD *)(v197 + 46) = v566;
                    *(_QWORD *)v197 = off_1E429B0A0;
                    *(_QWORD *)(v197 + 80) = 0;
                    *(_OWORD *)(v197 + 48) = 0u;
                    *(_OWORD *)(v197 + 64) = 0u;
                    *(_DWORD *)(v197 + 88) = 2139095039;
                    *(_WORD *)(v197 + 92) = 0;
                    *(_BYTE *)(v197 + 94) = 0;
                    *(_OWORD *)(v197 + 96) = 0u;
                    *(_OWORD *)(v197 + 112) = 0u;
                    *(_QWORD *)(v197 + 128) = 0;
                    *(_DWORD *)(v197 + 136) = 2139095039;
                    *(_WORD *)(v197 + 140) = 0;
                    *(_BYTE *)(v197 + 142) = 0;
                    *(_QWORD *)(v197 + 144) = 0x7F7F00007F7FLL;
                    md::LabelLineSegment::createLists((unsigned __int16 *)v197, v183, (uint64_t)&v558);
                    goto LABEL_219;
                  case 3uLL:
                    if ((v200 & 1) == 0
                    {
                      v222 = operator new();
                      *(_QWORD *)(v222 + 16) = 0x5ED09DD50000000FLL;
                      *(_QWORD *)(v222 + 24) = "VectorKitLabels";
                      *(_OWORD *)(v222 + 32) = xmmword_19FFB2E80;
                      *(_QWORD *)v222 = &off_1E42B5668;
                      *(_QWORD *)(v222 + 8) = "VectorKitLabels";
                      *(_OWORD *)(v222 + 72) = 0u;
                      *(_OWORD *)(v222 + 88) = 0u;
                      *(_OWORD *)(v222 + 104) = 0u;
                      *(_OWORD *)(v222 + 120) = 0u;
                      *(_OWORD *)(v222 + 136) = 0u;
                      *(_OWORD *)(v222 + 152) = 0u;
                      *(_OWORD *)(v222 + 168) = 0u;
                      *(_OWORD *)(v222 + 184) = 0u;
                      *(_OWORD *)(v222 + 200) = 0u;
                      *(_OWORD *)(v222 + 216) = 0u;
                      *(_OWORD *)(v222 + 232) = 0u;
                      *(_QWORD *)(v222 + 248) = 0;
                      *(_OWORD *)(v222 + 56) = 0u;
                      v223 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v222 + 56), 0);
                      if ((_DWORD)v223)
                        geo::read_write_lock::logFailure(v223, (uint64_t)"initialization", v224);
                      v225 = malloc_create_zone(0, 0);
                      *(_QWORD *)(v222 + 48) = v225;
                      malloc_set_zone_name(v225, "VectorKitLabels");
                      *(_QWORD *)(v222 + 256) = os_log_create("com.apple.VectorKit", "Memory");
                      mdm::Allocator::instance(void)::alloc = v222;
                      v101 = v541;
                      v191 = v543;
                    }
                    v197 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc
                                                                                + 16))(mdm::Allocator::instance(void)::alloc, 208, 8);
                    *(_QWORD *)(v197 + 8) = 0;
                    *(_QWORD *)(v197 + 16) = v183;
                    *(_QWORD *)(v197 + 24) = 0;
                    *(_BYTE *)(v197 + 32) = 2;
                    *(_BYTE *)(v197 + 33) = v570;
                    *(_WORD *)(v197 + 34) = v559;
                    *(_WORD *)(v197 + 36) = 0;
                    *(_BYTE *)(v197 + 38) = v568;
                    *(_DWORD *)(v197 + 40) = 0;
                    *(_WORD *)(v197 + 44) = WORD2(v558);
                    *(_WORD *)(v197 + 46) = v566;
                    *(_QWORD *)v197 = off_1E429B0F8;
                    *(_QWORD *)(v197 + 80) = 0;
                    *(_OWORD *)(v197 + 48) = 0u;
                    *(_OWORD *)(v197 + 64) = 0u;
                    *(_DWORD *)(v197 + 88) = 2139095039;
                    *(_WORD *)(v197 + 92) = 0;
                    *(_BYTE *)(v197 + 94) = 0;
                    *(_OWORD *)(v197 + 96) = 0u;
                    *(_OWORD *)(v197 + 112) = 0u;
                    *(_QWORD *)(v197 + 128) = 0;
                    *(_DWORD *)(v197 + 136) = 2139095039;
                    *(_WORD *)(v197 + 140) = 0;
                    *(_BYTE *)(v197 + 142) = 0;
                    *(_OWORD *)(v197 + 144) = 0u;
                    *(_OWORD *)(v197 + 160) = 0u;
                    *(_QWORD *)(v197 + 176) = 0;
                    *(_DWORD *)(v197 + 184) = 2139095039;
                    *(_WORD *)(v197 + 188) = 0;
                    *(_BYTE *)(v197 + 190) = 0;
                    *(_QWORD *)(v197 + 192) = 0x7F7F00007F7FLL;
                    *(_DWORD *)(v197 + 200) = 32639;
                    md::LabelLineSegment::createLists((unsigned __int16 *)v197, v183, (uint64_t)&v558);
                    goto LABEL_219;
                  case 4uLL:
                    if ((v198 & 1) == 0
                    {
                      v210 = operator new();
                      *(_QWORD *)(v210 + 16) = 0x5ED09DD50000000FLL;
                      *(_QWORD *)(v210 + 24) = "VectorKitLabels";
                      *(_OWORD *)(v210 + 32) = xmmword_19FFB2E80;
                      *(_QWORD *)v210 = &off_1E42B5668;
                      *(_QWORD *)(v210 + 8) = "VectorKitLabels";
                      *(_OWORD *)(v210 + 72) = 0u;
                      *(_OWORD *)(v210 + 88) = 0u;
                      *(_OWORD *)(v210 + 104) = 0u;
                      *(_OWORD *)(v210 + 120) = 0u;
                      *(_OWORD *)(v210 + 136) = 0u;
                      *(_OWORD *)(v210 + 152) = 0u;
                      *(_OWORD *)(v210 + 168) = 0u;
                      *(_OWORD *)(v210 + 184) = 0u;
                      *(_OWORD *)(v210 + 200) = 0u;
                      *(_OWORD *)(v210 + 216) = 0u;
                      *(_OWORD *)(v210 + 232) = 0u;
                      *(_QWORD *)(v210 + 248) = 0;
                      *(_OWORD *)(v210 + 56) = 0u;
                      v211 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v210 + 56), 0);
                      if ((_DWORD)v211)
                        geo::read_write_lock::logFailure(v211, (uint64_t)"initialization", v212);
                      v213 = malloc_create_zone(0, 0);
                      *(_QWORD *)(v210 + 48) = v213;
                      malloc_set_zone_name(v213, "VectorKitLabels");
                      *(_QWORD *)(v210 + 256) = os_log_create("com.apple.VectorKit", "Memory");
                      mdm::Allocator::instance(void)::alloc = v210;
                      v101 = v541;
                      v191 = v543;
                    }
                    v197 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc
                                                                                + 16))(mdm::Allocator::instance(void)::alloc, 256, 8);
                    *(_QWORD *)(v197 + 8) = 0;
                    *(_QWORD *)(v197 + 16) = v183;
                    *(_QWORD *)(v197 + 24) = 0;
                    *(_BYTE *)(v197 + 32) = 2;
                    *(_BYTE *)(v197 + 33) = v570;
                    *(_WORD *)(v197 + 34) = v559;
                    *(_WORD *)(v197 + 36) = 0;
                    *(_BYTE *)(v197 + 38) = v568;
                    *(_DWORD *)(v197 + 40) = 0;
                    *(_WORD *)(v197 + 44) = WORD2(v558);
                    *(_WORD *)(v197 + 46) = v566;
                    *(_QWORD *)v197 = off_1E429B150;
                    *(_QWORD *)(v197 + 80) = 0;
                    *(_OWORD *)(v197 + 48) = 0u;
                    *(_OWORD *)(v197 + 64) = 0u;
                    *(_DWORD *)(v197 + 88) = 2139095039;
                    *(_WORD *)(v197 + 92) = 0;
                    *(_BYTE *)(v197 + 94) = 0;
                    *(_OWORD *)(v197 + 96) = 0u;
                    *(_OWORD *)(v197 + 112) = 0u;
                    *(_QWORD *)(v197 + 128) = 0;
                    *(_DWORD *)(v197 + 136) = 2139095039;
                    *(_WORD *)(v197 + 140) = 0;
                    *(_BYTE *)(v197 + 142) = 0;
                    *(_OWORD *)(v197 + 144) = 0u;
                    *(_OWORD *)(v197 + 160) = 0u;
                    *(_QWORD *)(v197 + 176) = 0;
                    *(_DWORD *)(v197 + 184) = 2139095039;
                    *(_WORD *)(v197 + 188) = 0;
                    *(_BYTE *)(v197 + 190) = 0;
                    *(_OWORD *)(v197 + 192) = 0u;
                    *(_OWORD *)(v197 + 208) = 0u;
                    *(_QWORD *)(v197 + 224) = 0;
                    *(_DWORD *)(v197 + 232) = 2139095039;
                    *(_WORD *)(v197 + 236) = 0;
                    *(_BYTE *)(v197 + 238) = 0;
                    *(_OWORD *)(v197 + 240) = xmmword_19FFB4C40;
                    md::LabelLineSegment::createLists((unsigned __int16 *)v197, v183, (uint64_t)&v558);
                    goto LABEL_219;
                  case 5uLL:
                    if ((v199 & 1) == 0
                    {
                      v214 = operator new();
                      *(_QWORD *)(v214 + 16) = 0x5ED09DD50000000FLL;
                      *(_QWORD *)(v214 + 24) = "VectorKitLabels";
                      *(_OWORD *)(v214 + 32) = xmmword_19FFB2E80;
                      *(_QWORD *)v214 = &off_1E42B5668;
                      *(_QWORD *)(v214 + 8) = "VectorKitLabels";
                      *(_OWORD *)(v214 + 72) = 0u;
                      *(_OWORD *)(v214 + 88) = 0u;
                      *(_OWORD *)(v214 + 104) = 0u;
                      *(_OWORD *)(v214 + 120) = 0u;
                      *(_OWORD *)(v214 + 136) = 0u;
                      *(_OWORD *)(v214 + 152) = 0u;
                      *(_OWORD *)(v214 + 168) = 0u;
                      *(_OWORD *)(v214 + 184) = 0u;
                      *(_OWORD *)(v214 + 200) = 0u;
                      *(_OWORD *)(v214 + 216) = 0u;
                      *(_OWORD *)(v214 + 232) = 0u;
                      *(_QWORD *)(v214 + 248) = 0;
                      *(_OWORD *)(v214 + 56) = 0u;
                      v215 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v214 + 56), 0);
                      if ((_DWORD)v215)
                        geo::read_write_lock::logFailure(v215, (uint64_t)"initialization", v216);
                      v217 = malloc_create_zone(0, 0);
                      *(_QWORD *)(v214 + 48) = v217;
                      malloc_set_zone_name(v217, "VectorKitLabels");
                      *(_QWORD *)(v214 + 256) = os_log_create("com.apple.VectorKit", "Memory");
                      mdm::Allocator::instance(void)::alloc = v214;
                      v101 = v541;
                      v191 = v543;
                    }
                    v197 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc
                                                                                + 16))(mdm::Allocator::instance(void)::alloc, 312, 8);
                    *(_QWORD *)(v197 + 8) = 0;
                    *(_QWORD *)(v197 + 16) = v183;
                    *(_QWORD *)(v197 + 24) = 0;
                    *(_BYTE *)(v197 + 32) = 2;
                    *(_BYTE *)(v197 + 33) = v570;
                    *(_WORD *)(v197 + 34) = v559;
                    *(_WORD *)(v197 + 36) = 0;
                    *(_BYTE *)(v197 + 38) = v568;
                    *(_DWORD *)(v197 + 40) = 0;
                    *(_WORD *)(v197 + 44) = WORD2(v558);
                    *(_WORD *)(v197 + 46) = v566;
                    *(_QWORD *)v197 = off_1E429B1A8;
                    *(_QWORD *)(v197 + 80) = 0;
                    *(_OWORD *)(v197 + 48) = 0u;
                    *(_OWORD *)(v197 + 64) = 0u;
                    *(_DWORD *)(v197 + 88) = 2139095039;
                    *(_WORD *)(v197 + 92) = 0;
                    *(_BYTE *)(v197 + 94) = 0;
                    *(_OWORD *)(v197 + 96) = 0u;
                    *(_OWORD *)(v197 + 112) = 0u;
                    *(_QWORD *)(v197 + 128) = 0;
                    *(_DWORD *)(v197 + 136) = 2139095039;
                    *(_WORD *)(v197 + 140) = 0;
                    *(_BYTE *)(v197 + 142) = 0;
                    *(_OWORD *)(v197 + 144) = 0u;
                    *(_OWORD *)(v197 + 160) = 0u;
                    *(_QWORD *)(v197 + 176) = 0;
                    *(_DWORD *)(v197 + 184) = 2139095039;
                    *(_WORD *)(v197 + 188) = 0;
                    *(_BYTE *)(v197 + 190) = 0;
                    *(_OWORD *)(v197 + 192) = 0u;
                    *(_OWORD *)(v197 + 208) = 0u;
                    *(_QWORD *)(v197 + 224) = 0;
                    *(_DWORD *)(v197 + 232) = 2139095039;
                    *(_WORD *)(v197 + 236) = 0;
                    *(_BYTE *)(v197 + 238) = 0;
                    *(_QWORD *)(v197 + 272) = 0;
                    *(_OWORD *)(v197 + 240) = 0u;
                    *(_OWORD *)(v197 + 256) = 0u;
                    *(_DWORD *)(v197 + 280) = 2139095039;
                    *(_WORD *)(v197 + 284) = 0;
                    *(_BYTE *)(v197 + 286) = 0;
                    *(_OWORD *)(v197 + 288) = xmmword_19FFB4C40;
                    *(_DWORD *)(v197 + 304) = 32639;
                    md::LabelLineSegment::createLists((unsigned __int16 *)v197, v183, (uint64_t)&v558);
LABEL_219:
                    v553 = v197;
                    break;
                  default:
                    if ((v207 & 1) == 0
                    {
                      v226 = operator new();
                      *(_QWORD *)(v226 + 16) = 0x5ED09DD50000000FLL;
                      *(_QWORD *)(v226 + 24) = "VectorKitLabels";
                      *(_OWORD *)(v226 + 32) = xmmword_19FFB2E80;
                      *(_QWORD *)v226 = &off_1E42B5668;
                      *(_QWORD *)(v226 + 8) = "VectorKitLabels";
                      *(_OWORD *)(v226 + 72) = 0u;
                      *(_OWORD *)(v226 + 88) = 0u;
                      *(_OWORD *)(v226 + 104) = 0u;
                      *(_OWORD *)(v226 + 120) = 0u;
                      *(_OWORD *)(v226 + 136) = 0u;
                      *(_OWORD *)(v226 + 152) = 0u;
                      *(_OWORD *)(v226 + 168) = 0u;
                      *(_OWORD *)(v226 + 184) = 0u;
                      *(_OWORD *)(v226 + 200) = 0u;
                      *(_OWORD *)(v226 + 216) = 0u;
                      *(_OWORD *)(v226 + 232) = 0u;
                      *(_QWORD *)(v226 + 248) = 0;
                      *(_OWORD *)(v226 + 56) = 0u;
                      v227 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v226 + 56), 0);
                      if ((_DWORD)v227)
                        geo::read_write_lock::logFailure(v227, (uint64_t)"initialization", v228);
                      v229 = malloc_create_zone(0, 0);
                      *(_QWORD *)(v226 + 48) = v229;
                      malloc_set_zone_name(v229, "VectorKitLabels");
                      *(_QWORD *)(v226 + 256) = os_log_create("com.apple.VectorKit", "Memory");
                      mdm::Allocator::instance(void)::alloc = v226;
                    }
                    v197 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc
                                                                                + 16))(mdm::Allocator::instance(void)::alloc, 112, 8);
                    *(_QWORD *)(v197 + 8) = 0;
                    *(_QWORD *)(v197 + 16) = v183;
                    *(_QWORD *)(v197 + 24) = 0;
                    *(_BYTE *)(v197 + 32) = 2;
                    *(_BYTE *)(v197 + 33) = v570;
                    *(_WORD *)(v197 + 34) = v559;
                    *(_WORD *)(v197 + 36) = 0;
                    *(_BYTE *)(v197 + 38) = v568;
                    *(_DWORD *)(v197 + 40) = 0;
                    *(_WORD *)(v197 + 44) = WORD2(v558);
                    *(_WORD *)(v197 + 46) = v566;
                    *(_QWORD *)v197 = off_1E4299158;
                    *(_QWORD *)(v197 + 48) = 0;
                    *(_QWORD *)(v197 + 56) = 0;
                    *(_QWORD *)(v197 + 64) = 0;
                    if ((v208 & 1) == 0
                    {
                      v230 = operator new();
                      *(_QWORD *)(v230 + 16) = 0x5ED09DD50000000FLL;
                      *(_QWORD *)(v230 + 24) = "VectorKitLabels";
                      *(_OWORD *)(v230 + 32) = xmmword_19FFB2E80;
                      *(_QWORD *)v230 = &off_1E42B5668;
                      *(_QWORD *)(v230 + 8) = "VectorKitLabels";
                      *(_OWORD *)(v230 + 72) = 0u;
                      *(_OWORD *)(v230 + 88) = 0u;
                      *(_OWORD *)(v230 + 104) = 0u;
                      *(_OWORD *)(v230 + 120) = 0u;
                      *(_OWORD *)(v230 + 136) = 0u;
                      *(_OWORD *)(v230 + 152) = 0u;
                      *(_OWORD *)(v230 + 168) = 0u;
                      *(_OWORD *)(v230 + 184) = 0u;
                      *(_OWORD *)(v230 + 200) = 0u;
                      *(_OWORD *)(v230 + 216) = 0u;
                      *(_OWORD *)(v230 + 232) = 0u;
                      *(_QWORD *)(v230 + 248) = 0;
                      *(_OWORD *)(v230 + 56) = 0u;
                      v231 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v230 + 56), 0);
                      if ((_DWORD)v231)
                        geo::read_write_lock::logFailure(v231, (uint64_t)"initialization", v232);
                      v233 = malloc_create_zone(0, 0);
                      *(_QWORD *)(v230 + 48) = v233;
                      malloc_set_zone_name(v233, "VectorKitLabels");
                      *(_QWORD *)(v230 + 256) = os_log_create("com.apple.VectorKit", "Memory");
                      mdm::Allocator::instance(void)::alloc = v230;
                    }
                    *(_QWORD *)(v197 + 72) = mdm::Allocator::instance(void)::alloc;
                    *(_QWORD *)(v197 + 80) = 0;
                    *(_QWORD *)(v197 + 88) = 0;
                    *(_QWORD *)(v197 + 96) = 0;
                    if ((v209 & 1) == 0
                    {
                      v234 = operator new();
                      *(_QWORD *)(v234 + 16) = 0x5ED09DD50000000FLL;
                      *(_QWORD *)(v234 + 24) = "VectorKitLabels";
                      *(_OWORD *)(v234 + 32) = xmmword_19FFB2E80;
                      *(_QWORD *)v234 = &off_1E42B5668;
                      *(_QWORD *)(v234 + 8) = "VectorKitLabels";
                      *(_OWORD *)(v234 + 72) = 0u;
                      *(_OWORD *)(v234 + 88) = 0u;
                      *(_OWORD *)(v234 + 104) = 0u;
                      *(_OWORD *)(v234 + 120) = 0u;
                      *(_OWORD *)(v234 + 136) = 0u;
                      *(_OWORD *)(v234 + 152) = 0u;
                      *(_OWORD *)(v234 + 168) = 0u;
                      *(_OWORD *)(v234 + 184) = 0u;
                      *(_OWORD *)(v234 + 200) = 0u;
                      *(_OWORD *)(v234 + 216) = 0u;
                      *(_OWORD *)(v234 + 232) = 0u;
                      *(_QWORD *)(v234 + 248) = 0;
                      *(_OWORD *)(v234 + 56) = 0u;
                      v235 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v234 + 56), 0);
                      if ((_DWORD)v235)
                        geo::read_write_lock::logFailure(v235, (uint64_t)"initialization", v236);
                      v237 = malloc_create_zone(0, 0);
                      *(_QWORD *)(v234 + 48) = v237;
                      malloc_set_zone_name(v237, "VectorKitLabels");
                      *(_QWORD *)(v234 + 256) = os_log_create("com.apple.VectorKit", "Memory");
                      mdm::Allocator::instance(void)::alloc = v234;
                    }
                    *(_QWORD *)(v197 + 104) = mdm::Allocator::instance(void)::alloc;
                    md::LabelLineSegment::createLists((unsigned __int16 *)v197, v183, (uint64_t)&v558);
                    v191 = v543;
                    v553 = v197;
                    v101 = v541;
                    break;
                }
                LOBYTE(v556) = v190;
                LOBYTE(v555) = v185;
                v202 = *(_QWORD *)(a1 + 128);
                v201 = *(_QWORD *)(a1 + 136);
                if (v202 == v201)
                {
LABEL_223:
                  *(_QWORD *)&v552[0] = a1;
                  if (v201 >= *(_QWORD *)(a1 + 144))
                  {
                    v204 = std::vector<md::LabelLineZSet,geo::StdAllocator<md::LabelLineZSet,mdm::Allocator>>::__emplace_back_slow_path<md::LabelLineStore *,unsigned char const&,unsigned char const&,md::LabelLineSource const&>(v548, (uint64_t *)v552, (char *)&v556, (char *)&v555, v544);
                    v203 = a1;
                  }
                  else
                  {
                    v203 = a1;
                    if (v201)
                      v201 = md::LabelLineZSet::LabelLineZSet(v201, a1, v190, v185, *(_BYTE *)(a1 + 120));
                    v204 = v201 + 112;
                    *(_QWORD *)(a1 + 136) = v204;
                  }
                  *(_QWORD *)(v203 + 136) = v204;
                  v202 = v204 - 112;
                }
                else
                {
                  while (*(unsigned __int8 *)(v202 + 1) != v190)
                  {
                    v202 += 112;
                    if (v202 == v201)
                      goto LABEL_223;
                  }
                }
                v205 = *(uint64_t **)(v202 + 24);
                if ((unint64_t)v205 >= *(_QWORD *)(v202 + 32))
                {
                  v206 = std::vector<std::unique_ptr<md::LabelLineSegment>,geo::StdAllocator<std::unique_ptr<md::LabelLineSegment>,mdm::Allocator>>::__emplace_back_slow_path<std::unique_ptr<md::LabelLineSegment>>(v202 + 16, &v553);
                  v197 = v553;
                }
                else
                {
                  if (v205)
                  {
                    v553 = 0;
                    *v205 = v197;
                    v197 = 0;
                  }
                  v206 = v205 + 1;
                }
                *(_QWORD *)(v202 + 24) = v206;
                atomic_store(0, (unsigned __int8 *)(a1 + 248));
                v553 = 0;
                if (v197)
                  (*(void (**)(uint64_t))(*(_QWORD *)v197 + 8))(v197);
                v187 = *(unsigned int *)(v183 + 20);
              }
              ++v189;
            }
            while (v189 < v187);
          }
          goto LABEL_4;
        case 9:
          v8 = geo::codec::VectorTile::key(*((geo::codec::VectorTile **)v3 + 1));
          v10 = *(_QWORD *)(a1 + 128);
          v9 = *(_QWORD *)(a1 + 136);
          if (v10 == v9)
            goto LABEL_4;
          while (*(_BYTE *)(v10 + 1) != (*(_BYTE *)(v8 + 1) & 0x3F))
          {
            v10 += 112;
            if (v10 == v9)
              goto LABEL_4;
          }
          v239 = *((_QWORD *)v3 + 1);
          v238 = (std::__shared_weak_count *)*((_QWORD *)v3 + 2);
          if (v238)
          {
            v240 = (unint64_t *)&v238->__shared_owners_;
            do
              v241 = __ldxr(v240);
            while (__stxr(v241 + 1, v240));
            v242 = *(_QWORD **)(v10 + 16);
            v243 = (_QWORD **)(v10 + 24);
            v244 = *(_QWORD **)(v10 + 24);
            do
              v245 = __ldxr(v240);
            while (__stxr(v245 + 1, v240));
          }
          else
          {
            v242 = *(_QWORD **)(v10 + 16);
            v243 = (_QWORD **)(v10 + 24);
            v244 = *(_QWORD **)(v10 + 24);
          }
          while (2)
          {
            if (v242 == v244)
            {
              v242 = v244;
            }
            else
            {
              v282 = *(unsigned __int8 *)(*v242 + 32);
              v283 = v282 > 3 || v282 == 1;
              if (v283
                || (v284 = *(uint64_t **)(*v242 + 16)) == 0
                || (v285 = (std::__shared_weak_count *)v284[1]) == 0
                || (v286 = std::__shared_weak_count::lock(v285)) == 0)
              {
                if (!v239)
                  goto LABEL_325;
LABEL_310:
                ++v242;
                continue;
              }
              v287 = v286;
              v288 = *v284;
              v289 = (unint64_t *)&v286->__shared_owners_;
              do
                v290 = __ldaxr(v289);
              while (__stlxr(v290 - 1, v289));
              if (v290)
              {
                if (v288 == v239)
                  goto LABEL_325;
                goto LABEL_310;
              }
              ((void (*)(std::__shared_weak_count *))v286->__on_zero_shared)(v286);
              std::__shared_weak_count::__release_weak(v287);
              if (v288 != v239)
                goto LABEL_310;
LABEL_325:
              if (v242 != v244)
              {
                for (i = v242 + 1; ; ++i)
                {
                  if (i == v244)
                    goto LABEL_347;
                  v292 = *(unsigned __int8 *)(*i + 32);
                  if (v292 > 3 || v292 == 1)
                    break;
                  v294 = *(uint64_t **)(*i + 16);
                  if (!v294)
                    break;
                  v295 = (std::__shared_weak_count *)v294[1];
                  if (!v295)
                    break;
                  v296 = std::__shared_weak_count::lock(v295);
                  if (!v296)
                    break;
                  v297 = v296;
                  v298 = *v294;
                  v299 = (unint64_t *)&v296->__shared_owners_;
                  do
                    v300 = __ldaxr(v299);
                  while (__stlxr(v300 - 1, v299));
                  if (!v300)
                  {
                    ((void (*)(std::__shared_weak_count *))v296->__on_zero_shared)(v296);
                    std::__shared_weak_count::__release_weak(v297);
                  }
                  if (v298 != v239)
                    goto LABEL_344;
LABEL_328:
                  ;
                }
                if (!v239)
                  goto LABEL_328;
LABEL_344:
                v301 = *i;
                *i = 0;
                v302 = *v242;
                *v242 = v301;
                if (v302)
                  (*(void (**)(uint64_t))(*(_QWORD *)v302 + 8))(v302);
                ++v242;
                goto LABEL_328;
              }
            }
            break;
          }
LABEL_347:
          if (v238)
          {
            v303 = (unint64_t *)&v238->__shared_owners_;
            do
              v304 = __ldaxr(v303);
            while (__stlxr(v304 - 1, v303));
            if (!v304)
            {
              ((void (*)(std::__shared_weak_count *))v238->__on_zero_shared)(v238);
              std::__shared_weak_count::__release_weak(v238);
            }
          }
          v305 = *v243;
          v306 = v242 != *v243;
          if (v242 != *v243)
          {
            while (v305 != v242)
            {
              v308 = *--v305;
              v307 = v308;
              *v305 = 0;
              if (v308)
                (*(void (**)(uint64_t))(*(_QWORD *)v307 + 8))(v307);
            }
            *v243 = v242;
          }
          if (!v238)
            goto LABEL_362;
          v309 = (unint64_t *)&v238->__shared_owners_;
          do
            v310 = __ldaxr(v309);
          while (__stlxr(v310 - 1, v309));
          if (!v310)
          {
            ((void (*)(std::__shared_weak_count *))v238->__on_zero_shared)(v238);
            std::__shared_weak_count::__release_weak(v238);
            v312 = *((_QWORD *)v3 + 1);
            v311 = (std::__shared_weak_count *)*((_QWORD *)v3 + 2);
            if (!v311)
            {
LABEL_465:
              v315 = (uint64_t ***)(v10 + 56);
              v316 = *(uint64_t ***)(v10 + 56);
              v317 = *(uint64_t ***)(v10 + 48);
              goto LABEL_468;
            }
          }
          else
          {
LABEL_362:
            v312 = *((_QWORD *)v3 + 1);
            v311 = (std::__shared_weak_count *)*((_QWORD *)v3 + 2);
            if (!v311)
              goto LABEL_465;
          }
          v313 = (unint64_t *)&v311->__shared_owners_;
          do
            v314 = __ldxr(v313);
          while (__stxr(v314 + 1, v313));
          v315 = (uint64_t ***)(v10 + 56);
          v316 = *(uint64_t ***)(v10 + 56);
          v317 = *(uint64_t ***)(v10 + 48);
          do
            v318 = __ldxr(v313);
          while (__stxr(v318 + 1, v313));
LABEL_468:
          while (v317 != v316)
          {
            v382 = *v317;
            v383 = (std::__shared_weak_count *)(*v317)[1];
            if (!v383 || (v384 = std::__shared_weak_count::lock(v383)) == 0)
            {
              if (!v312)
                goto LABEL_477;
              goto LABEL_467;
            }
            v385 = v384;
            v386 = *v382;
            v387 = (unint64_t *)&v384->__shared_owners_;
            do
              v388 = __ldaxr(v387);
            while (__stlxr(v388 - 1, v387));
            if (!v388)
            {
              ((void (*)(std::__shared_weak_count *))v384->__on_zero_shared)(v384);
              std::__shared_weak_count::__release_weak(v385);
              if (v386 != v312)
                goto LABEL_467;
LABEL_477:
              if (v317 != v316)
              {
                for (j = v317 + 1; ; ++j)
                {
                  if (j == v316)
                    goto LABEL_503;
                  v391 = *j;
                  v392 = (std::__shared_weak_count *)(*j)[1];
                  if (!v392)
                    break;
                  v393 = std::__shared_weak_count::lock(v392);
                  if (!v393)
                    break;
                  v394 = v393;
                  v395 = *v391;
                  v396 = (unint64_t *)&v393->__shared_owners_;
                  do
                    v397 = __ldaxr(v396);
                  while (__stlxr(v397 - 1, v396));
                  if (!v397)
                  {
                    ((void (*)(std::__shared_weak_count *))v393->__on_zero_shared)(v393);
                    std::__shared_weak_count::__release_weak(v394);
                  }
                  if (v395 != v312)
                    goto LABEL_493;
LABEL_482:
                  ;
                }
                if (!v312)
                  goto LABEL_482;
LABEL_493:
                v398 = *j;
                *j = 0;
                v399 = *v317;
                *v317 = v398;
                if (v399)
                {
                  v400 = v399[3];
                  if (v400)
                  {
                    v399[4] = v400;
                    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v399[6] + 40))(v399[6], v400, v399[5] - v400);
                  }
                  v401 = (std::__shared_weak_count *)v399[1];
                  if (v401)
                    std::__shared_weak_count::__release_weak(v401);
                  if ((v390 & 1) == 0
                  {
                    v402 = operator new();
                    *(_QWORD *)(v402 + 16) = 0x5ED09DD50000000FLL;
                    *(_QWORD *)(v402 + 24) = "VectorKitLabels";
                    *(_OWORD *)(v402 + 32) = xmmword_19FFB2E80;
                    *(_QWORD *)v402 = &off_1E42B5668;
                    *(_QWORD *)(v402 + 8) = "VectorKitLabels";
                    *(_OWORD *)(v402 + 72) = 0u;
                    *(_OWORD *)(v402 + 88) = 0u;
                    *(_OWORD *)(v402 + 104) = 0u;
                    *(_OWORD *)(v402 + 120) = 0u;
                    *(_OWORD *)(v402 + 136) = 0u;
                    *(_OWORD *)(v402 + 152) = 0u;
                    *(_OWORD *)(v402 + 168) = 0u;
                    *(_OWORD *)(v402 + 184) = 0u;
                    *(_OWORD *)(v402 + 200) = 0u;
                    *(_OWORD *)(v402 + 216) = 0u;
                    *(_OWORD *)(v402 + 232) = 0u;
                    *(_QWORD *)(v402 + 248) = 0;
                    *(_OWORD *)(v402 + 56) = 0u;
                    v403 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v402 + 56), 0);
                    if ((_DWORD)v403)
                      geo::read_write_lock::logFailure(v403, (uint64_t)"initialization", v404);
                    v405 = malloc_create_zone(0, 0);
                    *(_QWORD *)(v402 + 48) = v405;
                    malloc_set_zone_name(v405, "VectorKitLabels");
                    *(_QWORD *)(v402 + 256) = os_log_create("com.apple.VectorKit", "Memory");
                    mdm::Allocator::instance(void)::alloc = v402;
                  }
                  (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc
                                                                      + 40))(mdm::Allocator::instance(void)::alloc, v399, 64);
                }
                ++v317;
                goto LABEL_482;
              }
LABEL_503:
              v406 = md::SignedDistanceFieldGenerator::_hypotCache + 129752;
              if (v311)
              {
                v407 = (unint64_t *)&v311->__shared_owners_;
                do
                  v408 = __ldaxr(v407);
                while (__stlxr(v408 - 1, v407));
                if (!v408)
                {
                  ((void (*)(std::__shared_weak_count *))v311->__on_zero_shared)(v311);
                  std::__shared_weak_count::__release_weak(v311);
                }
              }
              v409 = *v315;
              if (v317 != v409)
              {
                v410 = *(uint64_t ***)(v10 + 56);
                if (v409 != v410)
                {
                  v411 = v409 - v317;
                  do
                  {
                    v413 = v317[v411];
                    v317[v411] = 0;
                    v414 = *v317;
                    *v317 = v413;
                    if (v414)
                    {
                      v415 = v414[3];
                      if (v415)
                      {
                        v414[4] = v415;
                        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v414[6] + 40))(v414[6], v415, v414[5] - v415);
                      }
                      v416 = (std::__shared_weak_count *)v414[1];
                      if (v416)
                        std::__shared_weak_count::__release_weak(v416);
                      if ((v412 & 1) == 0
                      {
                        v417 = operator new();
                        *(_QWORD *)(v417 + 16) = 0x5ED09DD50000000FLL;
                        *(_QWORD *)(v417 + 24) = "VectorKitLabels";
                        *(_OWORD *)(v417 + 32) = xmmword_19FFB2E80;
                        *(_QWORD *)v417 = &off_1E42B5668;
                        *(_QWORD *)(v417 + 8) = "VectorKitLabels";
                        *(_OWORD *)(v417 + 72) = 0u;
                        *(_OWORD *)(v417 + 88) = 0u;
                        *(_OWORD *)(v417 + 104) = 0u;
                        *(_OWORD *)(v417 + 120) = 0u;
                        *(_OWORD *)(v417 + 136) = 0u;
                        *(_OWORD *)(v417 + 152) = 0u;
                        *(_OWORD *)(v417 + 168) = 0u;
                        *(_OWORD *)(v417 + 184) = 0u;
                        *(_OWORD *)(v417 + 200) = 0u;
                        *(_OWORD *)(v417 + 216) = 0u;
                        *(_OWORD *)(v417 + 232) = 0u;
                        *(_QWORD *)(v417 + 248) = 0;
                        *(_OWORD *)(v417 + 56) = 0u;
                        v418 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v417 + 56), 0);
                        if ((_DWORD)v418)
                          geo::read_write_lock::logFailure(v418, (uint64_t)"initialization", v419);
                        v420 = malloc_create_zone(0, 0);
                        *(_QWORD *)(v417 + 48) = v420;
                        malloc_set_zone_name(v420, "VectorKitLabels");
                        *(_QWORD *)(v417 + 256) = os_log_create("com.apple.VectorKit", "Memory");
                        v406 = &md::SignedDistanceFieldGenerator::_hypotCache[32438];
                        mdm::Allocator::instance(void)::alloc = v417;
                      }
                      (*(void (**)(_QWORD, uint64_t *, uint64_t))(**((_QWORD **)v406 + 299) + 40))(*((_QWORD *)v406 + 299), v414, 64);
                    }
                    ++v317;
                  }
                  while (&v317[v411] != v410);
                  v409 = *(uint64_t ***)(v10 + 56);
                }
                while (v409 != v317)
                {
                  v422 = (uint64_t)*--v409;
                  v421 = v422;
                  *v409 = 0;
                  if (v422)
                  {
                    v423 = *(_QWORD *)(v421 + 24);
                    if (v423)
                    {
                      *(_QWORD *)(v421 + 32) = v423;
                      (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v421 + 48) + 40))(*(_QWORD *)(v421 + 48), v423, *(_QWORD *)(v421 + 40) - v423);
                    }
                    v424 = *(std::__shared_weak_count **)(v421 + 8);
                    if (v424)
                      std::__shared_weak_count::__release_weak(v424);
                    if ((v425 & 1) == 0
                    {
                      v426 = operator new();
                      *(_QWORD *)(v426 + 16) = 0x5ED09DD50000000FLL;
                      *(_QWORD *)(v426 + 24) = "VectorKitLabels";
                      *(_OWORD *)(v426 + 32) = xmmword_19FFB2E80;
                      *(_QWORD *)v426 = &off_1E42B5668;
                      *(_QWORD *)(v426 + 8) = "VectorKitLabels";
                      *(_OWORD *)(v426 + 72) = 0u;
                      *(_OWORD *)(v426 + 88) = 0u;
                      *(_OWORD *)(v426 + 104) = 0u;
                      *(_OWORD *)(v426 + 120) = 0u;
                      *(_OWORD *)(v426 + 136) = 0u;
                      *(_OWORD *)(v426 + 152) = 0u;
                      *(_OWORD *)(v426 + 168) = 0u;
                      *(_OWORD *)(v426 + 184) = 0u;
                      *(_OWORD *)(v426 + 200) = 0u;
                      *(_OWORD *)(v426 + 216) = 0u;
                      *(_OWORD *)(v426 + 232) = 0u;
                      *(_QWORD *)(v426 + 248) = 0;
                      *(_OWORD *)(v426 + 56) = 0u;
                      v427 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v426 + 56), 0);
                      if ((_DWORD)v427)
                        geo::read_write_lock::logFailure(v427, (uint64_t)"initialization", v428);
                      v429 = malloc_create_zone(0, 0);
                      *(_QWORD *)(v426 + 48) = v429;
                      malloc_set_zone_name(v429, "VectorKitLabels");
                      *(_QWORD *)(v426 + 256) = os_log_create("com.apple.VectorKit", "Memory");
                      v406 = &md::SignedDistanceFieldGenerator::_hypotCache[32438];
                      mdm::Allocator::instance(void)::alloc = v426;
                    }
                    (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)v406 + 299) + 40))(*((_QWORD *)v406 + 299), v421, 64);
                  }
                }
                *(_QWORD *)(v10 + 56) = v317;
                v306 = 1;
              }
              if (!v311)
                goto LABEL_541;
              v430 = (unint64_t *)&v311->__shared_owners_;
              do
                v431 = __ldaxr(v430);
              while (__stlxr(v431 - 1, v430));
              if (!v431)
              {
                ((void (*)(std::__shared_weak_count *))v311->__on_zero_shared)(v311);
                std::__shared_weak_count::__release_weak(v311);
                if (v306)
                  goto LABEL_555;
              }
              else
              {
LABEL_541:
                if (v306)
                  goto LABEL_555;
              }
              goto LABEL_4;
            }
            if (v386 == v312)
              goto LABEL_477;
LABEL_467:
            ++v317;
          }
          v317 = v316;
          goto LABEL_503;
        case 0xA:
          v98 = *(_QWORD *)(a1 + 128);
          v97 = *(_QWORD *)(a1 + 136);
          if (v98 == v97)
            goto LABEL_4;
          v99 = *((_QWORD *)v3 + 3);
          while (*(unsigned __int8 *)(v98 + 1) != *(unsigned __int8 *)(v99 + 1))
          {
            v98 += 112;
            if (v98 == v97)
              goto LABEL_4;
          }
          v246 = (std::__shared_weak_count *)*((_QWORD *)v3 + 4);
          if (v246)
          {
            v247 = (unint64_t *)&v246->__shared_owners_;
            do
              v248 = __ldxr(v247);
            while (__stxr(v248 + 1, v247));
            v251 = *(_QWORD **)(v98 + 16);
            v250 = v98 + 16;
            v249 = v251;
            v254 = *(_QWORD **)(v250 + 8);
            v252 = (_QWORD *)(v250 + 8);
            v253 = v254;
            do
              v255 = __ldxr(v247);
            while (__stxr(v255 + 1, v247));
          }
          else
          {
            v320 = *(_QWORD **)(v98 + 16);
            v319 = v98 + 16;
            v249 = v320;
            v321 = *(_QWORD **)(v319 + 8);
            v252 = (_QWORD *)(v319 + 8);
            v253 = v321;
          }
          while (2)
          {
            if (v249 == v253)
            {
              v249 = v253;
            }
            else
            {
              if (*(_BYTE *)(*v249 + 32) != 4
                || (v322 = *(uint64_t **)(*v249 + 16), (v323 = (std::__shared_weak_count *)v322[1]) == 0)
                || (v324 = std::__shared_weak_count::lock(v323)) == 0)
              {
                if (!v99)
                  goto LABEL_381;
LABEL_370:
                ++v249;
                continue;
              }
              v325 = v324;
              v326 = *v322;
              v327 = (unint64_t *)&v324->__shared_owners_;
              do
                v328 = __ldaxr(v327);
              while (__stlxr(v328 - 1, v327));
              if (v328)
              {
                if (v326 == v99)
                  goto LABEL_381;
                goto LABEL_370;
              }
              ((void (*)(std::__shared_weak_count *))v324->__on_zero_shared)(v324);
              std::__shared_weak_count::__release_weak(v325);
              if (v326 != v99)
                goto LABEL_370;
LABEL_381:
              if (v249 != v253)
              {
                for (k = v249 + 1; ; ++k)
                {
                  if (k == v253)
                    goto LABEL_399;
                  if (*(_BYTE *)(*k + 32) != 4)
                    break;
                  v330 = *(uint64_t **)(*k + 16);
                  v331 = (std::__shared_weak_count *)v330[1];
                  if (!v331)
                    break;
                  v332 = std::__shared_weak_count::lock(v331);
                  if (!v332)
                    break;
                  v333 = v332;
                  v334 = *v330;
                  v335 = (unint64_t *)&v332->__shared_owners_;
                  do
                    v336 = __ldaxr(v335);
                  while (__stlxr(v336 - 1, v335));
                  if (!v336)
                  {
                    ((void (*)(std::__shared_weak_count *))v332->__on_zero_shared)(v332);
                    std::__shared_weak_count::__release_weak(v333);
                  }
                  if (v334 != v99)
                    goto LABEL_396;
LABEL_384:
                  ;
                }
                if (!v99)
                  goto LABEL_384;
LABEL_396:
                v337 = *k;
                *k = 0;
                v338 = *v249;
                *v249 = v337;
                if (v338)
                  (*(void (**)(uint64_t))(*(_QWORD *)v338 + 8))(v338);
                ++v249;
                goto LABEL_384;
              }
            }
            break;
          }
LABEL_399:
          if (v246)
          {
            v339 = (unint64_t *)&v246->__shared_owners_;
            do
              v340 = __ldaxr(v339);
            while (__stlxr(v340 - 1, v339));
            if (!v340)
            {
              ((void (*)(std::__shared_weak_count *))v246->__on_zero_shared)(v246);
              std::__shared_weak_count::__release_weak(v246);
            }
          }
          v341 = (_QWORD *)*v252;
          if (v249 != (_QWORD *)*v252)
          {
            v432 = (_QWORD *)*v252;
            while (v432 != v249)
            {
              v434 = *--v432;
              v433 = v434;
              *v432 = 0;
              if (v434)
                (*(void (**)(uint64_t))(*(_QWORD *)v433 + 8))(v433);
            }
            *v252 = v249;
          }
          if (v246)
          {
            v435 = (unint64_t *)&v246->__shared_owners_;
            do
              v436 = __ldaxr(v435);
            while (__stlxr(v436 - 1, v435));
            if (!v436)
            {
              ((void (*)(std::__shared_weak_count *))v246->__on_zero_shared)(v246);
              std::__shared_weak_count::__release_weak(v246);
            }
          }
          if (v249 != v341)
LABEL_555:
            atomic_store(0, (unsigned __int8 *)(a1 + 248));
          goto LABEL_4;
        default:
          goto LABEL_4;
      }
    }
  }
}

void sub_19F0F034C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, __int128 a13)
{
  uint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *p_shared_owners;
  unint64_t v23;
  unsigned __int8 v24;
  uint64_t v25;
  geo::read_write_lock *v26;
  const char *v27;
  malloc_zone_t *zone;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;

  v18 = *v14;
  if (*v14)
  {
    *(_QWORD *)(v13 + 88) = v18;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v13 + 104) + 40))(*(_QWORD *)(v13 + 104), v18, *(_QWORD *)(v13 + 96) - v18);
  }
  v19 = *v15;
  if (*v15)
  {
    *(_QWORD *)(v13 + 56) = v19;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v13 + 72) + 40))(*(_QWORD *)(v13 + 72), v19, *(_QWORD *)(v13 + 64) - v19);
  }
  *(_QWORD *)v13 = off_1E4291B50;
  v20 = *(_QWORD *)(v13 + 24);
  *(_QWORD *)(v13 + 24) = 0;
  if (v20)
  {
    v21 = *(std::__shared_weak_count **)(v20 + 8);
    if (v21)
    {
      p_shared_owners = (unint64_t *)&v21->__shared_owners_;
      do
        v23 = __ldaxr(p_shared_owners);
      while (__stlxr(v23 - 1, p_shared_owners));
      if (!v23)
      {
        ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
        std::__shared_weak_count::__release_weak(v21);
      }
    }
    MEMORY[0x1A1AF4E00](v20, 0x1020C40457A241BLL);
  }
  {
    v25 = operator new();
    *(_QWORD *)(v25 + 16) = 0x5ED09DD50000000FLL;
    *(_QWORD *)(v25 + 24) = "VectorKitLabels";
    *(_OWORD *)(v25 + 32) = a13;
    *(_QWORD *)v25 = &off_1E42B5668;
    *(_QWORD *)(v25 + 8) = "VectorKitLabels";
    *(_OWORD *)(v25 + 72) = 0u;
    *(_OWORD *)(v25 + 88) = 0u;
    *(_OWORD *)(v25 + 104) = 0u;
    *(_OWORD *)(v25 + 120) = 0u;
    *(_OWORD *)(v25 + 136) = 0u;
    *(_OWORD *)(v25 + 152) = 0u;
    *(_OWORD *)(v25 + 168) = 0u;
    *(_OWORD *)(v25 + 184) = 0u;
    *(_OWORD *)(v25 + 200) = 0u;
    *(_OWORD *)(v25 + 216) = 0u;
    *(_OWORD *)(v25 + 232) = 0u;
    *(_QWORD *)(v25 + 248) = 0;
    *(_OWORD *)(v25 + 56) = 0u;
    v26 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v25 + 56), 0);
    if ((_DWORD)v26)
      geo::read_write_lock::logFailure(v26, (uint64_t)"initialization", v27);
    zone = malloc_create_zone(0, 0);
    *(_QWORD *)(v25 + 48) = zone;
    malloc_set_zone_name(zone, "VectorKitLabels");
    *(_QWORD *)(v25 + 256) = os_log_create("com.apple.VectorKit", "Memory");
    mdm::Allocator::instance(void)::alloc = v25;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc + 40))(mdm::Allocator::instance(void)::alloc, v13, 112);
  v29 = *(std::__shared_weak_count **)(v16 - 232);
  if (v29)
  {
    v30 = (unint64_t *)&v29->__shared_owners_;
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
  _Unwind_Resume(a1);
}

uint64_t md::LabelLineStore::addRoad(md::LabelLineStore *this, const md::LabelLineStore::WorkUnit *a2)
{
  uint64_t (***v3)(_QWORD, _QWORD, _QWORD);
  int v4;
  _QWORD *v5;
  uint64_t result;
  unsigned int *v7;
  unsigned int *v8;
  int v9;
  char v10;
  char *v11;
  char *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v18;
  unint64_t v19;

  v3 = (uint64_t (***)(_QWORD, _QWORD, _QWORD))*((_QWORD *)a2 + 16);
  if (v3)
  {
    v16 = (**v3)(v3, *((_QWORD *)a2 + 5), *((unsigned __int8 *)a2 + 224));
    v4 = (*(uint64_t (**)(_QWORD, _QWORD))(**((_QWORD **)a2 + 16) + 8))(*((_QWORD *)a2 + 16), *((_QWORD *)a2 + 5));
  }
  else
  {
    v4 = 0;
    v16 = 0;
  }
  v5 = (_QWORD *)*((_QWORD *)a2 + 5);
  result = geo::codec::VectorTile::key(*((geo::codec::VectorTile **)a2 + 6));
  v7 = (unsigned int *)*((_QWORD *)a2 + 9);
  v8 = (unsigned int *)*((_QWORD *)a2 + 10);
  if (v7 != v8)
  {
    v9 = *(_BYTE *)(result + 1) & 0x3F;
    v10 = *((_BYTE *)a2 + 216);
    v11 = (char *)a2 + 184;
    v12 = (char *)a2 + 144;
    do
    {
      v13 = *v7;
      v19 = 0;
      result = (uint64_t)geo::codec::multiSectionFeaturePoints(v5, v13, &v19);
      if (v19 >= 2)
      {
        v14 = result;
        v18 = 0;
        v15 = geo::codec::multiSectionFeatureElevations((uint64_t)v5, v13, &v18);
        result = md::LabelLineStore::addSegment<GeoCodecsRoadFeature>((uint64_t)this, (uint64_t)v5, v13, v9, v10, (uint64_t)v11, (uint64_t)v12, v14, v15, v19, v16, v4, 0);
      }
      ++v7;
    }
    while (v7 != v8);
  }
  return result;
}

uint64_t md::LabelFeatureThunk<md::UniLineLabelFeature,GeoCodecsFeature,geo::codec::VectorTile>::compare(uint64_t a1, uint64_t a2)
{
  int v3;
  int v4;
  uint64_t result;
  unint64_t v6;
  unint64_t v7;
  geo::codec *v8;
  unint64_t v9;
  _DWORD *v10;
  uint64_t v11;
  int *v12;
  int v13;
  int v14;
  BOOL v15;
  BOOL v16;
  unsigned int v17;
  int v18;
  _DWORD *v19;
  _BOOL4 v20;
  uint64_t v21;
  int *v22;
  int v23;
  int v24;
  unint64_t v25;
  unint64_t v26;
  int *v27;
  int v28;
  unint64_t v29;
  unint64_t v30;
  int *v31;
  int v32;
  unint64_t v33;
  unint64_t v34;
  const GeoCodecsRoadFeature *v35;
  const GeoCodecsRoadFeature *v36;

  v3 = *(unsigned __int8 *)(a1 + 88);
  v4 = *(unsigned __int8 *)(a2 + 88);
  result = (v3 - v4);
  if (v3 != v4)
    return result;
  v6 = *(_QWORD *)(a1 + 80);
  v7 = *(_QWORD *)(a2 + 80);
  if (v6 | v7)
  {
    v15 = v6 >= v7;
    v16 = v6 == v7;
    goto LABEL_10;
  }
  v8 = *(geo::codec **)(a1 + 56);
  v9 = *(_QWORD *)(a2 + 56);
  v10 = (_DWORD *)*((_QWORD *)v8 + 3);
  if (v10)
  {
    if (*((_BYTE *)v10 + 33))
    {
      v11 = 0;
      v12 = *(int **)v10;
      while (1)
      {
        v13 = *v12;
        v12 += 2;
        if (v13 == 1)
          break;
        if (*((unsigned __int8 *)v10 + 33) == ++v11)
          goto LABEL_8;
      }
      v14 = *(_DWORD *)(*(_QWORD *)v10 + 8 * v11 + 4);
    }
    else
    {
LABEL_8:
      v14 = -1;
    }
    v18 = (v14 & ~(v14 >> 31));
    v19 = *(_DWORD **)(v9 + 24);
    if (v19)
      goto LABEL_20;
  }
  else
  {
    v18 = 0;
    v19 = *(_DWORD **)(v9 + 24);
    if (v19)
    {
LABEL_20:
      if (*((_BYTE *)v19 + 33))
      {
        v21 = 0;
        v22 = *(int **)v19;
        while (1)
        {
          v23 = *v22;
          v22 += 2;
          if (v23 == 1)
            break;
          if (*((unsigned __int8 *)v19 + 33) == ++v21)
            goto LABEL_24;
        }
        v24 = *(_DWORD *)(*(_QWORD *)v19 + 8 * v21 + 4);
      }
      else
      {
LABEL_24:
        v24 = -1;
      }
      v20 = (v24 & ~(v24 >> 31)) == 12;
      goto LABEL_27;
    }
  }
  v20 = 0;
LABEL_27:
  if (v20 == (v18 == 12))
  {
    if (!v10)
      goto LABEL_42;
    v25 = *((unsigned __int8 *)v10 + 33);
    if (*((_BYTE *)v10 + 33))
    {
      v10 = *(_DWORD **)v10;
      if (*v10 == 189)
      {
        v26 = 0;
LABEL_32:
        LODWORD(v10) = LOBYTE(v10[2 * v26 + 1]) == 1;
LABEL_42:
        if (!v19)
          goto LABEL_52;
        v29 = *((unsigned __int8 *)v19 + 33);
        if (*((_BYTE *)v19 + 33))
        {
          v19 = *(_DWORD **)v19;
          if (*v19 == 189)
          {
            v30 = 0;
LABEL_46:
            LODWORD(v19) = LOBYTE(v19[2 * v30 + 1]) == 1;
LABEL_52:
            if ((v10 | v19) != 1)
              goto LABEL_70;
            if ((_DWORD)v10 != (_DWORD)v19)
            {
              if ((_DWORD)v10)
                return 1;
              else
                return 0xFFFFFFFFLL;
            }
            v33 = *((_QWORD *)v8 + 5);
            v34 = *(_QWORD *)(v9 + 40);
            if (!(v33 | v34))
            {
LABEL_70:
              if (geo::codec::featureGetNativeShieldCount((uint64_t)v8) || geo::codec::featureGetNativeShieldCount(v9))
                return geo::codec::roadFeatureCompareShields(v8, (const GeoCodecsRoadFeature *)v9, v35);
              if (geo::codec::featureGetNativeLabelCount((uint64_t)v8) || geo::codec::featureGetNativeLabelCount(v9))
                return geo::codec::roadFeatureCompareRoadNames(v8, (const GeoCodecsRoadFeature *)v9, v36);
              v16 = v8 == (geo::codec *)v9;
              if ((unint64_t)v8 > v9)
                v17 = 1;
              else
                v17 = -1;
              goto LABEL_13;
            }
            v15 = v33 >= v34;
            v16 = v33 == v34;
LABEL_10:
            if (v15)
              v17 = 1;
            else
              v17 = -1;
LABEL_13:
            if (v16)
              return 0;
            else
              return v17;
          }
          v30 = 0;
          v31 = v19 + 2;
          while (v29 - 1 != v30)
          {
            v32 = *v31;
            v31 += 2;
            ++v30;
            if (v32 == 189)
            {
              if (v30 < v29)
                goto LABEL_46;
              break;
            }
          }
        }
        LODWORD(v19) = 0;
        goto LABEL_52;
      }
      v26 = 0;
      v27 = v10 + 2;
      while (v25 - 1 != v26)
      {
        v28 = *v27;
        v27 += 2;
        ++v26;
        if (v28 == 189)
        {
          if (v26 < v25)
            goto LABEL_32;
          break;
        }
      }
    }
    LODWORD(v10) = 0;
    goto LABEL_42;
  }
  if (v18 == 12)
    return 1;
  else
    return 0xFFFFFFFFLL;
}

void geo::codec::featureGetNativeShield(uint64_t a1, unint64_t a2, _QWORD *a3, _QWORD *a4, _QWORD *a5)
{
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;

  if (a1)
  {
    v9 = *(std::__shared_weak_count **)(a1 + 8);
    if (v9)
    {
      v11 = std::__shared_weak_count::lock(v9);
      if (v11 && *(unsigned __int8 *)(a1 + 72) > a2 && *(_QWORD *)a1)
      {
        v12 = *(unsigned int *)(a1 + 60) + a2;
        v13 = *(_QWORD *)(*(_QWORD *)a1 + 1064);
        v14 = (_QWORD *)(v13 + 32 * v12);
        if (a3)
          *a3 = *v14;
        if (a5)
          *a5 = v14[1];
        if (a4)
          *a4 = *(_QWORD *)(v13 + 32 * v12 + 24);
LABEL_20:
        p_shared_owners = (unint64_t *)&v11->__shared_owners_;
        do
          v16 = __ldaxr(p_shared_owners);
        while (__stlxr(v16 - 1, p_shared_owners));
        if (!v16)
        {
          ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
          std::__shared_weak_count::__release_weak(v11);
        }
        return;
      }
    }
    else
    {
      v11 = 0;
    }
    if (a3)
      *a3 = 0;
    if (a4)
      *a4 = 0;
    if (a5)
      *a5 = 0;
    if (v11)
      goto LABEL_20;
  }
}

_QWORD *std::__hash_table<std::__hash_value_type<altitude::Tile *,unsigned int>,std::__unordered_map_hasher<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::hash<altitude::Tile *>,std::equal_to<altitude::Tile *>,true>,std::__unordered_map_equal<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::equal_to<altitude::Tile *>,std::hash<altitude::Tile *>,true>,std::allocator<std::__hash_value_type<altitude::Tile *,unsigned int>>>::find<altitude::Tile *>(_QWORD *a1, unint64_t a2)
{
  int8x8_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint8x8_t v6;
  unint64_t v7;
  _QWORD *v8;
  _QWORD *result;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;

  v2 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v2)
    return 0;
  v3 = 0x9DDFEA08EB382D69 * (((8 * a2) + 8) ^ HIDWORD(a2));
  v4 = 0x9DDFEA08EB382D69 * (HIDWORD(a2) ^ (v3 >> 47) ^ v3);
  v5 = 0x9DDFEA08EB382D69 * (v4 ^ (v4 >> 47));
  v6 = (uint8x8_t)vcnt_s8(v2);
  v6.i16[0] = vaddlv_u8(v6);
  if (v6.u32[0] > 1uLL)
  {
    v7 = v5;
    if (v5 >= *(_QWORD *)&v2)
      v7 = v5 % *(_QWORD *)&v2;
  }
  else
  {
    v7 = v5 & (*(_QWORD *)&v2 - 1);
  }
  v8 = *(_QWORD **)(*a1 + 8 * v7);
  if (!v8)
    return 0;
  result = (_QWORD *)*v8;
  if (*v8)
  {
    if (v6.u32[0] < 2uLL)
    {
      v10 = *(_QWORD *)&v2 - 1;
      while (1)
      {
        v12 = result[1];
        if (v12 == v5)
        {
          if (result[2] == a2)
            return result;
        }
        else if ((v12 & v10) != v7)
        {
          return 0;
        }
        result = (_QWORD *)*result;
        if (!result)
          return result;
      }
    }
    do
    {
      v11 = result[1];
      if (v11 == v5)
      {
        if (result[2] == a2)
          return result;
      }
      else
      {
        if (v11 >= *(_QWORD *)&v2)
          v11 %= *(_QWORD *)&v2;
        if (v11 != v7)
          return 0;
      }
      result = (_QWORD *)*result;
    }
    while (result);
  }
  return result;
}

void md::MapEngine::onLayoutOnlyTimerFired(id *this, double a2)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  id WeakRetained;
  BOOL v8;
  id v9;
  _QWORD v10[3];
  _QWORD *v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  md::MapEngine::runUpdatePhase((md::MapEngine *)this, a2, 1);
  md::MapEngine::_postRender(this, a2);
  v4 = *((_QWORD *)this[1] + 1);
  v10[0] = &off_1E42D4C78;
  v11 = v10;
  geo::TaskQueue::barrierSync(v4, v10);
  v5 = v11;
  if (v11 == v10)
  {
    v6 = 4;
    v5 = v10;
  }
  else
  {
    if (!v11)
      goto LABEL_6;
    v6 = 5;
  }
  (*(void (**)(void))(*v5 + 8 * v6))();
LABEL_6:
  WeakRetained = objc_loadWeakRetained(this + 106);
  v8 = WeakRetained == 0;

  if (!v8)
  {
    v9 = objc_loadWeakRetained(this + 106);
    objc_msgSend(v9, "didPresent");

  }
  md::MapEngine::updateRunLoopStatus((md::MapEngine *)this);
}

void sub_19F0F2730(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__emplace_unique_key_args<unsigned long,unsigned long const&>(uint64_t a1, unint64_t a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v7;
  uint8x8_t v8;
  _QWORD *v9;
  _QWORD *v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v14;
  float v15;
  float v16;
  _BOOL8 v17;
  unint64_t v18;
  unint64_t v19;
  size_t prime;
  unint64_t v21;
  uint8x8_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  unint64_t v27;

  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = a2;
      if (v7 <= a2)
        v3 = a2 % v7;
    }
    else
    {
      v3 = (v7 - 1) & a2;
    }
    v9 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      v10 = (_QWORD *)*v9;
      if (v10)
      {
        if (v8.u32[0] < 2uLL)
        {
          while (1)
          {
            v12 = v10[1];
            if (v12 == a2)
            {
              if (v10[2] == a2)
                return 0;
            }
            else if ((v12 & (v7 - 1)) != v3)
            {
              goto LABEL_23;
            }
            v10 = (_QWORD *)*v10;
            if (!v10)
              goto LABEL_23;
          }
        }
        do
        {
          v11 = v10[1];
          if (v11 == a2)
          {
            if (v10[2] == a2)
              return 0;
          }
          else
          {
            if (v11 >= v7)
              v11 %= v7;
            if (v11 != v3)
              break;
          }
          v10 = (_QWORD *)*v10;
        }
        while (v10);
      }
    }
  }
LABEL_23:
  v14 = operator new(0x18uLL);
  v14[1] = a2;
  v14[2] = a3;
  v15 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v16 = *(float *)(a1 + 32);
  if (!v7 || (float)(v16 * (float)v7) < v15)
  {
    v17 = 1;
    if (v7 >= 3)
      v17 = (v7 & (v7 - 1)) != 0;
    v18 = v17 | (2 * v7);
    v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19)
      prime = v19;
    else
      prime = v18;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v7 = *(_QWORD *)(a1 + 8);
    }
    if (prime > v7)
      goto LABEL_35;
    if (prime < v7)
    {
      v21 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v7 < 3 || (v22 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v22.i16[0] = vaddlv_u8(v22), v22.u32[0] > 1uLL))
      {
        v21 = std::__next_prime(v21);
      }
      else
      {
        v23 = 1 << -(char)__clz(v21 - 1);
        if (v21 >= 2)
          v21 = v23;
      }
      if (prime <= v21)
        prime = v21;
      if (prime < v7)
LABEL_35:
        std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>(a1, prime);
    }
    v7 = *(_QWORD *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= a2)
        v3 = a2 % v7;
      else
        v3 = a2;
    }
    else
    {
      v3 = (v7 - 1) & a2;
    }
  }
  v24 = *(_QWORD *)a1;
  v25 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v25)
  {
    *v14 = *v25;
LABEL_59:
    *v25 = v14;
    goto LABEL_60;
  }
  v26 = *(_QWORD *)(a1 + 16);
  *v14 = v26;
  *(_QWORD *)(a1 + 16) = v14;
  *(_QWORD *)(v24 + 8 * v3) = a1 + 16;
  if (v26)
  {
    v27 = *(_QWORD *)(v26 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v27 >= v7)
        v27 %= v7;
    }
    else
    {
      v27 &= v7 - 1;
    }
    v25 = (_QWORD *)(*(_QWORD *)a1 + 8 * v27);
    goto LABEL_59;
  }
LABEL_60:
  ++*(_QWORD *)(a1 + 24);
  return 1;
}

void gdc::tf::Executor::invokeNode(_QWORD *a1, uint64_t a2)
{
  _QWORD *v3;
  _QWORD *i;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t **v11;
  uint64_t v12;
  _QWORD *v13;
  void *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  _BYTE *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  std::ios_base *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  char *v36;
  _QWORD *v37;
  unint64_t v38;
  uint64_t v39;
  _OWORD *v40;
  char *v41;
  uint64_t v42;
  __int128 v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  size_t v50;
  uint8_t **p_dst;
  unint64_t v52;
  const void **v53;
  const void *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint8_t **v58;
  NSObject *log;
  uint8_t *__dst;
  size_t v61;
  int64_t v62;
  uint8_t buf[32];
  _DWORD v64[2];
  _QWORD v65[3];
  uint64_t v66;
  unint64_t v67;
  void *__p[2];
  __int128 v69;
  int v70;
  _QWORD v71[22];

  v3 = a1;
  v71[20] = *MEMORY[0x1E0C80C00];
  for (i = (_QWORD *)a1[3]; i; i = (_QWORD *)*i)
  {
    *(_QWORD *)buf = a2;
    v5 = i[6];
    if (!v5)
      goto LABEL_87;
    (*(void (**)(uint64_t, uint8_t *))(*(_QWORD *)v5 + 48))(v5, buf);
  }
  switch(*(_DWORD *)(a2 + 64))
  {
    case 0:
      break;
    case 1:
      v6 = *(_QWORD *)(a2 + 24);
      if (!v6)
        goto LABEL_87;
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 48))(v6);
      goto LABEL_13;
    case 2:
      v8 = *(_QWORD *)(a2 + 24);
      if (!v8)
        goto LABEL_87;
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v8 + 48))(v8, v3[18]);
LABEL_13:
      v10 = (char *)v3[16];
      v9 = v3[17];
      if ((unint64_t)v10 < v9)
      {
        *(_QWORD *)v10 = a2;
        v3[16] = v10 + 8;
        break;
      }
      v18 = (char *)v3[15];
      v19 = (v10 - v18) >> 3;
      v20 = v19 + 1;
      if ((unint64_t)(v19 + 1) >> 61)
        goto LABEL_89;
      v21 = v9 - (_QWORD)v18;
      if (v21 >> 2 > v20)
        v20 = v21 >> 2;
      if ((unint64_t)v21 >= 0x7FFFFFFFFFFFFFF8)
        v22 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v22 = v20;
      if (v22)
      {
        if (v22 >> 61)
          std::__throw_bad_array_new_length[abi:nn180100]();
        v23 = operator new(8 * v22);
      }
      else
      {
        v23 = 0;
      }
      v35 = &v23[8 * v19];
      v36 = &v23[8 * v22];
      *v35 = a2;
      v37 = v35 + 1;
      if (v10 == v18)
      {
        v18 = v10;
      }
      else
      {
        v38 = v10 - v18 - 8;
        if (v38 < 0x58)
          goto LABEL_93;
        if ((unint64_t)(v18 - v23) < 0x20)
          goto LABEL_93;
        v39 = (v38 >> 3) + 1;
        v40 = &v23[8 * v19 - 16];
        v41 = v10 - 16;
        v42 = v39 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v43 = *(_OWORD *)v41;
          *(v40 - 1) = *((_OWORD *)v41 - 1);
          *v40 = v43;
          v40 -= 2;
          v41 -= 32;
          v42 -= 4;
        }
        while (v42);
        v35 -= v39 & 0x3FFFFFFFFFFFFFFCLL;
        v10 -= 8 * (v39 & 0x3FFFFFFFFFFFFFFCLL);
        if (v39 != (v39 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_93:
          do
          {
            v44 = *((_QWORD *)v10 - 1);
            v10 -= 8;
            *--v35 = v44;
          }
          while (v10 != v18);
          v18 = (char *)v3[15];
        }
      }
      v3[15] = v35;
      v3[16] = v37;
      v3[17] = v36;
      if (v18)
        operator delete(v18);
      v3[16] = v37;
      break;
    case 3:
      v11 = *(uint64_t ***)a2;
      goto LABEL_26;
    case 4:
      memset(buf, 0, sizeof(buf));
      v64[0] = 1065353216;
      __dst = buf;
      v61 = a2 + 32;
      v12 = *(_QWORD *)(a2 + 24);
      if (!v12)
        goto LABEL_87;
      (*(void (**)(uint64_t, uint8_t **))(*(_QWORD *)v12 + 48))(v12, &__dst);
      gdc::tf::Executor::consumeGraph((uint64_t)v3, (uint64_t **)(a2 + 32));
      v13 = *(_QWORD **)&buf[16];
      if (*(_QWORD *)&buf[16])
      {
        do
        {
          v15 = (_QWORD *)*v13;
          v16 = v13[5];
          v13[5] = 0;
          if (v16)
            (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
          operator delete(v13);
          v13 = v15;
        }
        while (v15);
      }
      v14 = *(void **)buf;
      *(_QWORD *)buf = 0;
      if (v14)
        operator delete(v14);
      break;
    case 5:
      if (!v3[18])
      {
        if (GEOGetGeoDisplayCoreTaskflowLog::onceToken != -1)
          goto LABEL_88;
        goto LABEL_37;
      }
      *(_QWORD *)buf = 0;
      v17 = *(_QWORD *)(a2 + 24);
      if (!v17)
        goto LABEL_87;
      (*(void (**)(uint64_t))(*(_QWORD *)v17 + 48))(v17);
      v11 = *(uint64_t ***)buf;
      if (*(_QWORD *)buf)
LABEL_26:
        gdc::tf::Executor::consumeGraph((uint64_t)v3, v11);
      break;
    default:
      if (GEOGetGeoDisplayCoreTaskflowLog::onceToken != -1)
        dispatch_once(&GEOGetGeoDisplayCoreTaskflowLog::onceToken, &__block_literal_global_16_42072);
      v7 = GEOGetGeoDisplayCoreTaskflowLog::log;
      if (os_log_type_enabled((os_log_t)GEOGetGeoDisplayCoreTaskflowLog::log, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315650;
        *(_QWORD *)&buf[4] = "false";
        *(_WORD *)&buf[12] = 2080;
        *(_QWORD *)&buf[14] = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoDisplayCore/GeoDisplayCore/Executor.cpp";
        *(_WORD *)&buf[22] = 1024;
        *(_DWORD *)&buf[24] = 81;
        _os_log_impl(&dword_19F029000, v7, OS_LOG_TYPE_ERROR, "Unhandled node type: Assertion with expression - %s : Failed in file - %s line - %i", buf, 0x1Cu);
      }
      break;
  }
  while (1)
  {
    v3 = (_QWORD *)v3[9];
    if (!v3)
      break;
    while (1)
    {
      *(_QWORD *)buf = a2;
      v45 = v3[6];
      if (!v45)
        break;
      (*(void (**)(uint64_t, uint8_t *))(*(_QWORD *)v45 + 48))(v45, buf);
      v3 = (_QWORD *)*v3;
      if (!v3)
        return;
    }
LABEL_87:
    std::__throw_bad_function_call[abi:nn180100]();
LABEL_88:
    dispatch_once(&GEOGetGeoDisplayCoreTaskflowLog::onceToken, &__block_literal_global_16_42072);
LABEL_37:
    v24 = GEOGetGeoDisplayCoreTaskflowLog::log;
    if (os_log_type_enabled((os_log_t)GEOGetGeoDisplayCoreTaskflowLog::log, OS_LOG_TYPE_ERROR))
    {
      log = v24;
      v25 = MEMORY[0x1E0DE4FD0];
      v26 = MEMORY[0x1E0DE4FD0] + 104;
      v71[0] = MEMORY[0x1E0DE4FD0] + 104;
      v27 = MEMORY[0x1E0DE4FD0] + 64;
      v28 = (_QWORD *)MEMORY[0x1E0DE4F50];
      v29 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 16);
      v30 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 24);
      *(_QWORD *)&buf[16] = MEMORY[0x1E0DE4FD0] + 64;
      *(_QWORD *)buf = v29;
      *(_QWORD *)&buf[*(_QWORD *)(v29 - 24)] = v30;
      *(_QWORD *)&buf[8] = 0;
      v31 = (std::ios_base *)&buf[*(_QWORD *)(*(_QWORD *)buf - 24)];
      std::ios_base::init(v31, &buf[24]);
      v31[1].__vftable = 0;
      v31[1].__fmtflags_ = -1;
      v32 = v28[5];
      *(_QWORD *)&buf[16] = v28[4];
      *(_QWORD *)&buf[*(_QWORD *)(*(_QWORD *)&buf[16] - 24) + 16] = v32;
      *(_QWORD *)buf = v28[1];
      *(_QWORD *)&buf[*(_QWORD *)(*(_QWORD *)buf - 24)] = v28[6];
      v71[0] = v26;
      *(_QWORD *)buf = v25 + 24;
      *(_QWORD *)&buf[16] = v27;
      std::streambuf::basic_streambuf();
      v33 = MEMORY[0x1E0DE4FB8];
      *(_QWORD *)&buf[24] = MEMORY[0x1E0DE4FB8] + 16;
      *(_OWORD *)__p = 0u;
      v69 = 0u;
      v70 = 24;
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&buf[16], (uint64_t)"{ id:", 5);
      std::ostream::operator<<();
      if (*(char *)(a2 + 95) < 0)
        v34 = *(_QWORD *)(a2 + 80);
      else
        v34 = *(unsigned __int8 *)(a2 + 95);
      if (v34)
      {
        v46 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&buf[16], (uint64_t)", name:", 7);
        v47 = *(char *)(a2 + 95);
        if (v47 >= 0)
          v48 = a2 + 72;
        else
          v48 = *(_QWORD *)(a2 + 72);
        if (v47 >= 0)
          v49 = *(unsigned __int8 *)(a2 + 95);
        else
          v49 = *(_QWORD *)(a2 + 80);
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v46, v48, v49);
      }
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&buf[16], (uint64_t)" }", 2);
      if ((v70 & 0x10) != 0)
      {
        v52 = *((_QWORD *)&v69 + 1);
        if (*((_QWORD *)&v69 + 1) < v67)
        {
          *((_QWORD *)&v69 + 1) = v67;
          v52 = v67;
        }
        v53 = (const void **)&v66;
      }
      else
      {
        if ((v70 & 8) == 0)
        {
          v50 = 0;
          HIBYTE(v62) = 0;
          p_dst = &__dst;
          goto LABEL_81;
        }
        v53 = (const void **)v65;
        v52 = v65[2];
      }
      v54 = *v53;
      v50 = v52 - (_QWORD)*v53;
      if (v50 >= 0x7FFFFFFFFFFFFFF8)
LABEL_89:
        abort();
      if (v50 >= 0x17)
      {
        v55 = (v50 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v50 | 7) != 0x17)
          v55 = v50 | 7;
        v56 = v55 + 1;
        p_dst = (uint8_t **)operator new(v55 + 1);
        v61 = v50;
        v62 = v56 | 0x8000000000000000;
        __dst = (uint8_t *)p_dst;
LABEL_80:
        memmove(p_dst, v54, v50);
        goto LABEL_81;
      }
      HIBYTE(v62) = v52 - *(_BYTE *)v53;
      p_dst = &__dst;
      if (v50)
        goto LABEL_80;
LABEL_81:
      *((_BYTE *)p_dst + v50) = 0;
      *(_QWORD *)buf = *v28;
      v57 = v28[9];
      *(_QWORD *)&buf[*(_QWORD *)(*(_QWORD *)buf - 24)] = v28[8];
      *(_QWORD *)&buf[16] = v57;
      *(_QWORD *)&buf[24] = v33 + 16;
      if (SBYTE7(v69) < 0)
        operator delete(__p[0]);
      std::streambuf::~streambuf();
      std::iostream::~basic_iostream();
      MEMORY[0x1A1AF4D64](v71);
      v58 = &__dst;
      if (v62 < 0)
        v58 = (uint8_t **)__dst;
      *(_DWORD *)buf = 136315906;
      *(_QWORD *)&buf[4] = v58;
      *(_WORD *)&buf[12] = 2080;
      *(_QWORD *)&buf[14] = "false";
      *(_WORD *)&buf[22] = 2080;
      *(_QWORD *)&buf[24] = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoDisplayCore/GeoDisplayCore/Executor.cpp";
      LOWORD(v64[0]) = 1024;
      *(_DWORD *)((char *)v64 + 2) = 76;
      _os_log_impl(&dword_19F029000, log, OS_LOG_TYPE_ERROR, "No context provided to execute node %s: Assertion with expression - %s : Failed in file - %s line - %i", buf, 0x26u);
      if (SHIBYTE(v62) < 0)
        operator delete(__dst);
    }
  }
}

uint64_t gdc::Registry::storage<md::ls::RenderTargetToPrepare>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  unint64_t v16;

  v16 = 0x90024251D45E5EE8;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0x90024251D45E5EE8;
      if (*(_QWORD *)&v3 <= 0x90024251D45E5EE8)
        v5 = 0x90024251D45E5EE8 % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0x90024251D45E5EE8;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0x90024251D45E5EE8)
            {
              if (v7[2] == 0x90024251D45E5EE8)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0x90024251D45E5EE8)
          {
            if (v7[2] == 0x90024251D45E5EE8)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "md::ls::RenderTargetToPrepare]";
  *(_QWORD *)(v11 + 24) = 29;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E42B3B88;
  *(_QWORD *)(v11 + 8) = 0x90024251D45E5EE8;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0x90024251D45E5EE8, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0x90024251D45E5EE8;
  v15[1] = "md::ls::RenderTargetToPrepare]";
  v15[2] = 29;
  gdc::Registry::_registerStorageDataSignals(a1, 0x90024251D45E5EE8, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F0F333C(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void md::TextDataStore::textDataForZoom(_QWORD *a1, unsigned __int8 *a2, unsigned __int8 *a3, int a4, uint64_t a5)
{
  _QWORD *v5;
  unsigned __int8 *v7;
  _QWORD *v8;
  _QWORD *v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  char v15;
  uint64_t v16;
  const std::string::value_type *v17;
  std::__shared_weak_count *v18;
  int v19;
  uint64_t v20;
  unsigned __int8 *v21;
  uint64_t v22;
  uint64_t v23;
  const std::string::value_type *v24;
  unint64_t *p_shared_owners;
  unint64_t v26;
  uint64_t v27;
  unsigned __int8 v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t *v32;
  unint64_t v33;
  std::string *v34;
  std::string *v35;
  std::string *v36;
  unint64_t *v37;
  unint64_t v38;
  unsigned __int8 v39;
  unsigned __int8 v40;
  unsigned int v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  _QWORD *v45;
  unint64_t v46;
  unint64_t *v47;
  unint64_t v48;
  _QWORD *v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  _OWORD *v57;
  uint64_t v58;
  unint64_t *v59;
  unint64_t v60;
  _QWORD *v61;
  _QWORD *v62;
  __int128 v63;
  _QWORD *v64;
  uint64_t v65;
  std::__shared_weak_count *v66;
  unint64_t *v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  geo::read_write_lock *v71;
  const char *v72;
  malloc_zone_t *zone;
  uint64_t v74;
  geo::read_write_lock *v75;
  const char *v76;
  malloc_zone_t *v77;
  uint64_t v78;
  const std::string::value_type *v79;
  __int128 v81;
  __int128 v82;

  v5 = a1;
  if (a2 == a3)
  {
LABEL_5:
    *a1 = 0;
    a1[1] = 0;
    return;
  }
  v7 = a2;
  while (*v7 != a4)
  {
    v7 += 56;
    if (v7 == a3)
      goto LABEL_5;
  }
  v81 = 0uLL;
  v8 = (_QWORD *)*((_QWORD *)v7 + 3);
  v9 = (_QWORD *)*((_QWORD *)v7 + 4);
  if (v8 == v9)
  {
    v18 = 0;
    goto LABEL_37;
  }
  v10 = *(unsigned __int8 *)(a5 + 36);
  v11 = *(unsigned __int8 *)(a5 + 37);
  v12 = *(unsigned __int8 *)(a5 + 38);
  v13 = *(unsigned __int8 *)(a5 + 39);
  v14 = *(unsigned __int8 *)(a5 + 40);
  v15 = *(_BYTE *)(a5 + 23);
  if (v15 >= 0)
    v16 = *(unsigned __int8 *)(a5 + 23);
  else
    v16 = *(_QWORD *)(a5 + 8);
  if (v15 >= 0)
    v17 = (const std::string::value_type *)a5;
  else
    v17 = *(const std::string::value_type **)a5;
  while (1)
  {
    v20 = *v8;
    v21 = *(unsigned __int8 **)(*v8 + 16);
    if (v21[36] != v10 || v21[37] != v11 || v21[38] != v12 || v21[39] != v13 || v21[40] != v14)
      goto LABEL_16;
    v22 = v21[23];
    v23 = (v22 & 0x80u) == 0 ? v21[23] : *((_QWORD *)v21 + 1);
    if (v23 != v16)
      goto LABEL_16;
    if ((v22 & 0x80) == 0)
      break;
    v78 = v16;
    v79 = v17;
    v19 = memcmp(*(const void **)v21, v17, *((_QWORD *)v21 + 1));
    v16 = v78;
    v17 = v79;
    if (!v19)
      goto LABEL_31;
LABEL_16:
    v8 += 2;
    if (v8 == v9)
    {
      v18 = 0;
      v5 = a1;
      goto LABEL_37;
    }
  }
  if (v21[23])
  {
    v24 = v17;
    while (*v21 == *(unsigned __int8 *)v24)
    {
      ++v21;
      ++v24;
      if (!--v22)
        goto LABEL_31;
    }
    goto LABEL_16;
  }
LABEL_31:
  v18 = (std::__shared_weak_count *)v8[1];
  v5 = a1;
  if (v18)
  {
    p_shared_owners = (unint64_t *)&v18->__shared_owners_;
    do
      v26 = __ldxr(p_shared_owners);
    while (__stxr(v26 + 1, p_shared_owners));
  }
  *((_QWORD *)&v81 + 1) = v18;
  if (v20)
  {
LABEL_96:
    *v5 = v20;
    v5[1] = v18;
  }
  else
  {
LABEL_37:
    if (*(float *)(a5 + 28) != 0.0)
    {
      v27 = *(unsigned __int8 *)(a5 + 23);
      if ((v27 & 0x80u) != 0)
        v27 = *(_QWORD *)(a5 + 8);
      if (v27)
      {
        {
          v69 = operator new();
          mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v69, "VectorKitLabels", 0x5ED09DD50000000FLL);
        }
        v29 = mdm::Allocator::instance(void)::alloc;
        v30 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc
                                                                   + 16))(mdm::Allocator::instance(void)::alloc, 160, 8);
        *(_QWORD *)v30 = &off_1E42DB2B0;
        *(_QWORD *)(v30 + 8) = 0;
        *(_QWORD *)(v30 + 16) = 0;
        *(_QWORD *)(v30 + 24) = v29;
        *(_QWORD *)(v30 + 32) = *((_QWORD *)v7 + 1);
        v31 = *((_QWORD *)v7 + 2);
        *(_QWORD *)(v30 + 40) = v31;
        if (v31)
        {
          v32 = (unint64_t *)(v31 + 8);
          do
            v33 = __ldxr(v32);
          while (__stxr(v33 + 1, v32));
        }
        v34 = (std::string *)operator new(0x48uLL);
        v35 = v34;
        v34->__r_.__value_.__l.__size_ = 0;
        v34->__r_.__value_.__r.__words[2] = 0;
        v34->__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1E42DAD00;
        v36 = v34 + 1;
        if (*(char *)(a5 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(v34 + 1, *(const std::string::value_type **)a5, *(_QWORD *)(a5 + 8));
        }
        else
        {
          *(_OWORD *)&v36->__r_.__value_.__l.__data_ = *(_OWORD *)a5;
          v34[1].__r_.__value_.__r.__words[2] = *(_QWORD *)(a5 + 16);
        }
        *(_OWORD *)&v35[2].__r_.__value_.__l.__data_ = *(_OWORD *)(a5 + 24);
        LOWORD(v35[2].__r_.__value_.__r.__words[2]) = *(_WORD *)(a5 + 40);
        *(_QWORD *)(v30 + 48) = v36;
        *(_QWORD *)(v30 + 56) = v35;
        *(_QWORD *)(v30 + 64) = &off_1E42B4950;
        *(_QWORD *)(v30 + 72) = 0;
        *(_QWORD *)(v30 + 96) = 0;
        *(_QWORD *)(v30 + 104) = 0;
        *(_QWORD *)(v30 + 88) = 0;
        {
          v70 = operator new();
          *(_QWORD *)(v70 + 16) = 0x5ED09DD50000000FLL;
          *(_QWORD *)(v70 + 24) = "VectorKitLabels";
          *(_OWORD *)(v70 + 32) = xmmword_19FFB2E80;
          *(_QWORD *)v70 = &off_1E42B5668;
          *(_QWORD *)(v70 + 8) = "VectorKitLabels";
          *(_OWORD *)(v70 + 72) = 0u;
          *(_OWORD *)(v70 + 88) = 0u;
          *(_OWORD *)(v70 + 104) = 0u;
          *(_OWORD *)(v70 + 120) = 0u;
          *(_OWORD *)(v70 + 136) = 0u;
          *(_OWORD *)(v70 + 152) = 0u;
          *(_OWORD *)(v70 + 168) = 0u;
          *(_OWORD *)(v70 + 184) = 0u;
          *(_OWORD *)(v70 + 200) = 0u;
          *(_OWORD *)(v70 + 216) = 0u;
          *(_OWORD *)(v70 + 232) = 0u;
          *(_QWORD *)(v70 + 248) = 0;
          *(_OWORD *)(v70 + 56) = 0u;
          v71 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v70 + 56), 0);
          if ((_DWORD)v71)
            geo::read_write_lock::logFailure(v71, (uint64_t)"initialization", v72);
          zone = malloc_create_zone(0, 0);
          *(_QWORD *)(v70 + 48) = zone;
          malloc_set_zone_name(zone, "VectorKitLabels");
          *(_QWORD *)(v70 + 256) = os_log_create("com.apple.VectorKit", "Memory");
          mdm::Allocator::instance(void)::alloc = v70;
        }
        *(_QWORD *)(v30 + 112) = mdm::Allocator::instance(void)::alloc;
        *(_QWORD *)(v30 + 120) = 0;
        *(_QWORD *)(v30 + 128) = 0;
        *(_QWORD *)(v30 + 136) = 0;
        {
          v74 = operator new();
          *(_QWORD *)(v74 + 16) = 0x5ED09DD50000000FLL;
          *(_QWORD *)(v74 + 24) = "VectorKitLabels";
          *(_OWORD *)(v74 + 32) = xmmword_19FFB2E80;
          *(_QWORD *)v74 = &off_1E42B5668;
          *(_QWORD *)(v74 + 8) = "VectorKitLabels";
          *(_OWORD *)(v74 + 72) = 0u;
          *(_OWORD *)(v74 + 88) = 0u;
          *(_OWORD *)(v74 + 104) = 0u;
          *(_OWORD *)(v74 + 120) = 0u;
          *(_OWORD *)(v74 + 136) = 0u;
          *(_OWORD *)(v74 + 152) = 0u;
          *(_OWORD *)(v74 + 168) = 0u;
          *(_OWORD *)(v74 + 184) = 0u;
          *(_OWORD *)(v74 + 200) = 0u;
          *(_OWORD *)(v74 + 216) = 0u;
          *(_OWORD *)(v74 + 232) = 0u;
          *(_QWORD *)(v74 + 248) = 0;
          *(_OWORD *)(v74 + 56) = 0u;
          v75 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v74 + 56), 0);
          if ((_DWORD)v75)
            geo::read_write_lock::logFailure(v75, (uint64_t)"initialization", v76);
          v77 = malloc_create_zone(0, 0);
          *(_QWORD *)(v74 + 48) = v77;
          malloc_set_zone_name(v77, "VectorKitLabels");
          *(_QWORD *)(v74 + 256) = os_log_create("com.apple.VectorKit", "Memory");
          mdm::Allocator::instance(void)::alloc = v74;
        }
        *(_QWORD *)(v30 + 144) = mdm::Allocator::instance(void)::alloc;
        *(_BYTE *)(v30 + 152) = 1;
        *(_DWORD *)(v30 + 153) = 0;
        *(_BYTE *)(v30 + 157) = 0;
        do
          v41 = __ldaxr(&md::TextDataString::_totalLabelTextData);
        while (__stlxr(v41 + 1, &md::TextDataString::_totalLabelTextData));
        v42 = (std::__shared_weak_count *)*((_QWORD *)&v81 + 1);
        *(_QWORD *)&v82 = v30 + 32;
        *((_QWORD *)&v82 + 1) = v30;
        if (v42)
        {
          v43 = (unint64_t *)&v42->__shared_owners_;
          do
            v44 = __ldaxr(v43);
          while (__stlxr(v44 - 1, v43));
          if (!v44)
          {
            ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
            std::__shared_weak_count::__release_weak(v42);
          }
        }
        v45 = (_QWORD *)*((_QWORD *)v7 + 4);
        v46 = *((_QWORD *)v7 + 5);
        if ((unint64_t)v45 >= v46)
        {
          v50 = v5;
          v51 = *((_QWORD *)v7 + 3);
          v52 = ((uint64_t)v45 - v51) >> 4;
          v53 = v52 + 1;
          if ((unint64_t)(v52 + 1) >> 60)
            abort();
          v54 = v46 - v51;
          if (v54 >> 3 > v53)
            v53 = v54 >> 3;
          if ((unint64_t)v54 >= 0x7FFFFFFFFFFFFFF0)
            v55 = 0xFFFFFFFFFFFFFFFLL;
          else
            v55 = v53;
          if (v55)
          {
            v56 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)v7 + 6) + 16))(*((_QWORD *)v7 + 6), 16 * v55, 8);
            v57 = (_OWORD *)(v56 + 16 * v52);
            v58 = v56 + 16 * v55;
            if (v56)
            {
              *v57 = v82;
              if (*((_QWORD *)&v82 + 1))
              {
                v59 = (unint64_t *)(*((_QWORD *)&v82 + 1) + 8);
                do
                  v60 = __ldxr(v59);
                while (__stxr(v60 + 1, v59));
              }
            }
          }
          else
          {
            v58 = 0;
            v57 = (_OWORD *)(16 * v52);
          }
          v49 = v57 + 1;
          v61 = (_QWORD *)*((_QWORD *)v7 + 3);
          v62 = (_QWORD *)*((_QWORD *)v7 + 4);
          if (v62 == v61)
          {
            *((_QWORD *)v7 + 3) = v57;
            *((_QWORD *)v7 + 4) = v49;
            v65 = *((_QWORD *)v7 + 5);
            *((_QWORD *)v7 + 5) = v58;
          }
          else
          {
            do
            {
              v63 = *((_OWORD *)v62 - 1);
              v62 -= 2;
              *--v57 = v63;
              *v62 = 0;
              v62[1] = 0;
            }
            while (v62 != v61);
            v62 = (_QWORD *)*((_QWORD *)v7 + 3);
            v64 = (_QWORD *)*((_QWORD *)v7 + 4);
            *((_QWORD *)v7 + 3) = v57;
            *((_QWORD *)v7 + 4) = v49;
            v65 = *((_QWORD *)v7 + 5);
            *((_QWORD *)v7 + 5) = v58;
            while (v64 != v62)
            {
              v66 = (std::__shared_weak_count *)*(v64 - 1);
              if (v66)
              {
                v67 = (unint64_t *)&v66->__shared_owners_;
                do
                  v68 = __ldaxr(v67);
                while (__stlxr(v68 - 1, v67));
                if (!v68)
                {
                  ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
                  std::__shared_weak_count::__release_weak(v66);
                }
              }
              v64 -= 2;
            }
          }
          if (v62)
            (*(void (**)(_QWORD, _QWORD *, uint64_t))(**((_QWORD **)v7 + 6) + 40))(*((_QWORD *)v7 + 6), v62, v65 - (_QWORD)v62);
          v5 = v50;
        }
        else
        {
          if (v45)
          {
            *v45 = v30 + 32;
            v45[1] = v30;
            if (v30)
            {
              v47 = (unint64_t *)(v30 + 8);
              do
                v48 = __ldxr(v47);
              while (__stxr(v48 + 1, v47));
            }
          }
          v49 = v45 + 2;
        }
        *((_QWORD *)v7 + 4) = v49;
        v18 = (std::__shared_weak_count *)*((_QWORD *)&v82 + 1);
        v20 = v82;
        goto LABEL_96;
      }
    }
    *v5 = 0;
    v5[1] = 0;
    if (v18)
    {
      v37 = (unint64_t *)&v18->__shared_owners_;
      do
        v38 = __ldaxr(v37);
      while (__stlxr(v38 - 1, v37));
      if (!v38)
      {
        ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
        std::__shared_weak_count::__release_weak(v18);
      }
    }
  }
}

void sub_19F0F3AB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  std::__shared_weak_count *v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  void *v17;
  std::__shared_weak_count *shared_weak_owners;
  unint64_t *p_shared_owners;
  unint64_t v20;

  std::__shared_weak_count::~__shared_weak_count(v15);
  operator delete(v17);
  shared_weak_owners = (std::__shared_weak_count *)v13[1].__shared_weak_owners_;
  if (shared_weak_owners)
  {
    p_shared_owners = (unint64_t *)&shared_weak_owners->__shared_owners_;
    do
      v20 = __ldaxr(p_shared_owners);
    while (__stlxr(v20 - 1, p_shared_owners));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))shared_weak_owners->__on_zero_shared)(shared_weak_owners);
      std::__shared_weak_count::__release_weak(shared_weak_owners);
    }
  }
  std::__shared_weak_count::~__shared_weak_count(v13);
  (*(void (**)(uint64_t, std::__shared_weak_count *, uint64_t))(*(_QWORD *)v14 + 40))(v14, v13, 160);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  _Unwind_Resume(a1);
}

uint64_t md::PointLabelFeatureElement::updateText(uint64_t this, const md::PointLabelFeature *a2, int a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  int v9;
  const char *v10;
  const char *v11;
  const char *v12;
  _QWORD __dst[2];
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  *(_BYTE *)(this + 130) = -1;
  if (*(_QWORD *)(this + 72) < *((_QWORD *)a2 + 54))
    return this;
  v5 = this;
  if (!*(_BYTE *)(this + 136))
  {
    v11 = 0;
    v12 = 0;
    if (!a3
      || (geo::codec::featureGetLocalizedLabel(*(_QWORD *)this, 0, (unint64_t *)&v12, (unint64_t *)&v11),
          (v10 = v12) == 0)
      || !*v12)
    {
      geo::codec::featureGetNativeLabel(*(_QWORD *)v5, 0, &v12, &v11);
      v10 = v12;
    }
    md::StringWithLocaleImp<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>>::StringWithLocaleImp((uint64_t)__dst, v10, v11);
    this = md::PointLabelFeature::indexForTextEntry((uint64_t *)a2, (uint64_t)__dst);
    goto LABEL_15;
  }
  this = (*(uint64_t (**)(const md::PointLabelFeature *))(*(_QWORD *)a2 + 72))(a2);
  v6 = *(_QWORD *)(this + 48);
  if (0x4EC4EC4EC4EC4EC5 * ((*(_QWORD *)(this + 56) - v6) >> 3) <= (unint64_t)*(unsigned __int8 *)(v5 + 134))
    return this;
  if (!a3)
    goto LABEL_14;
  v7 = v6 + 104 * *(unsigned __int8 *)(v5 + 134);
  v8 = (_QWORD *)(v7 + 56);
  v9 = *(char *)(v7 + 79);
  if (v9 < 0)
  {
    if (v8[1])
      goto LABEL_7;
LABEL_14:
    md::StringWithLocaleImp<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>>::StringWithLocaleImp<std::string>(__dst, (_QWORD *)(v6 + 104 * *(unsigned __int8 *)(v5 + 134) + 8));
    this = md::PointLabelFeature::indexForTextEntry((uint64_t *)a2, (uint64_t)__dst);
    goto LABEL_15;
  }
  if (!(_BYTE)v9)
    goto LABEL_14;
LABEL_7:
  md::StringWithLocaleImp<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>>::StringWithLocaleImp<std::string>(__dst, v8);
  this = md::PointLabelFeature::indexForTextEntry((uint64_t *)a2, (uint64_t)__dst);
LABEL_15:
  *(_BYTE *)(v5 + 130) = this;
  if ((SHIBYTE(v17) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v14) & 0x80000000) == 0)
      return this;
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v15 + 40))(v15, __dst[0], v14 & 0x7FFFFFFFFFFFFFFFLL);
  }
  this = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v18 + 40))(v18, v16, v17 & 0x7FFFFFFFFFFFFFFFLL);
  if (SHIBYTE(v14) < 0)
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v15 + 40))(v15, __dst[0], v14 & 0x7FFFFFFFFFFFFFFFLL);
  return this;
}

void sub_19F0F3CDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  md::StringWithLocaleImp<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>>::~StringWithLocaleImp((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t md::PointLabelFeature::indexForTextEntry(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  unsigned __int8 *v5;
  unint64_t v6;
  unsigned __int8 v7;
  __int128 v8;
  uint64_t v9;
  _QWORD **v10;
  __int128 v11;

  v2 = *(unsigned __int8 *)(a2 + 23);
  if ((v2 & 0x80u) != 0)
    v2 = *(_QWORD *)(a2 + 8);
  if (v2)
  {
    v5 = (unsigned __int8 *)a1[68];
    v6 = a1[69];
    if (v5 == (unsigned __int8 *)v6)
    {
      v7 = 0;
      v6 = a1[68];
LABEL_11:
      if (v6 >= a1[70])
      {
        v9 = std::vector<md::StringWithLocaleImp<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>>,geo::StdAllocator<md::StringWithLocaleImp<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>>,mdm::Allocator>>::__emplace_back_slow_path<md::StringWithLocaleImp<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>> const&>(a1 + 68, (__int128 *)a2);
      }
      else
      {
        if (v6)
        {
          *(_QWORD *)(v6 + 24) = *(_QWORD *)(a2 + 24);
          if (*(char *)(a2 + 23) < 0)
          {
            std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>::__init_copy_ctor_external((_QWORD **)v6, *(void **)a2, *(_QWORD *)(a2 + 8));
          }
          else
          {
            v8 = *(_OWORD *)a2;
            *(_QWORD *)(v6 + 16) = *(_QWORD *)(a2 + 16);
            *(_OWORD *)v6 = v8;
          }
          v10 = (_QWORD **)(v6 + 32);
          *(_QWORD *)(v6 + 56) = *(_QWORD *)(a2 + 56);
          if (*(char *)(a2 + 55) < 0)
          {
            std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>::__init_copy_ctor_external(v10, *(void **)(a2 + 32), *(_QWORD *)(a2 + 40));
          }
          else
          {
            v11 = *(_OWORD *)(a2 + 32);
            *(_QWORD *)(v6 + 48) = *(_QWORD *)(a2 + 48);
            *(_OWORD *)v10 = v11;
          }
        }
        v9 = v6 + 64;
        a1[69] = v6 + 64;
      }
      a1[69] = v9;
    }
    else
    {
      v7 = 0;
      while ((md::StringWithLocaleImp<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>>::operator==(v5, (unsigned __int8 *)a2) & 1) == 0)
      {
        ++v7;
        v5 += 64;
        if (v5 == (unsigned __int8 *)v6)
        {
          if (v7 <= 0x64u)
            goto LABEL_11;
          return -1;
        }
      }
    }
  }
  else
  {
    return -1;
  }
  return v7;
}

void sub_19F0F3E24(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v2;

  if (*(char *)(v2 + 23) < 0)
    (*(void (**)(_QWORD, _QWORD, uint64_t))(**(_QWORD **)(v2 + 24) + 40))(*(_QWORD *)(v2 + 24), *(_QWORD *)v2, *(_QWORD *)(v2 + 16) & 0x7FFFFFFFFFFFFFFFLL);
  *(_QWORD *)(v1 + 552) = v2;
  _Unwind_Resume(exception_object);
}

float64x2_t std::__function::__func<md::LabelLineStore::updateLineSets(void)::$_1,std::allocator<md::LabelLineStore::updateLineSets(void)::$_1>,void ()(std::unique_ptr<md::LabelLineSegment> const&)>::operator()(uint64_t a1, unsigned __int16 **a2)
{
  float64x2_t *v2;
  unsigned __int16 *v3;
  uint64_t v4;
  float64x2_t v5;
  float64x2_t v6;
  uint64_t v7;
  md::LabelPoint *v8;
  unint64_t v9;
  float64x2_t *v10;
  float64x2_t result;
  float64x2_t v12;
  float64x2_t v13;
  float64x2_t v14;

  v2 = *(float64x2_t **)(a1 + 8);
  v3 = *a2;
  v4 = *((_QWORD *)*a2 + 3);
  if (v4 && *(_BYTE *)(v4 + 48))
  {
    v5 = *(float64x2_t *)(v4 + 16);
    v6 = *(float64x2_t *)(v4 + 32);
  }
  else
  {
    v7 = (*(uint64_t (**)(unsigned __int16 *))(*(_QWORD *)v3 + 56))(*a2);
    if (v3[23])
    {
      v8 = (md::LabelPoint *)v7;
      v9 = 0;
      v5 = (float64x2_t)vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
      v6 = (float64x2_t)vdupq_n_s64(0xFFEFFFFFFFFFFFFFLL);
      do
      {
        v13 = v6;
        v14 = v5;
        v10 = (float64x2_t *)md::LabelPoint::mercatorPoint(v8);
        v5 = vminnmq_f64(*v10, v14);
        v6 = vmaxnmq_f64(v13, *v10);
        ++v9;
        v8 = (md::LabelPoint *)((char *)v8 + 48);
      }
      while (v9 < v3[23]);
    }
    else
    {
      v5 = (float64x2_t)vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
      v6 = (float64x2_t)vdupq_n_s64(0xFFEFFFFFFFFFFFFFLL);
    }
  }
  result = vminnmq_f64(v5, *v2);
  v12 = vmaxnmq_f64(v2[1], v6);
  *v2 = result;
  v2[1] = v12;
  return result;
}

void md::LabelLineZSet::createLines(unsigned __int8 *a1, _QWORD *a2)
{
  unsigned __int8 *v2;
  unsigned __int8 *v3;
  md::LabelLineSegment **v4;
  __n128 v5;
  double v6;
  unsigned __int8 v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  __int128 v21;
  __int128 v22;
  int v23;
  __int128 v24;
  int v25;
  uint64_t v26;
  _QWORD *v27;
  unsigned __int8 v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  __int128 v38;
  __int128 v39;
  int v40;
  __int128 v41;
  int v42;
  uint64_t v43;
  const md::LabelLineSegment **v44;
  const md::LabelLineSegment **v45;
  uint64_t v46;
  std::__shared_weak_count *v47;
  unsigned __int8 *v48;
  uint64_t v49;
  const md::LabelLineSegment *v50;
  unsigned int v51;
  uint64_t *v53;
  std::__shared_weak_count *v54;
  std::__shared_weak_count *v55;
  std::__shared_weak_count *v56;
  uint64_t v57;
  unint64_t *p_shared_owners;
  unint64_t v59;
  uint64_t *v60;
  std::__shared_weak_count *v61;
  std::__shared_weak_count *v62;
  unint64_t *v63;
  unint64_t v64;
  const md::LabelLineSegment *v65;
  uint64_t v66;
  unint64_t v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  __int128 v72;
  __int128 v73;
  int v74;
  __int128 v75;
  int v76;
  uint64_t v77;
  double *v78;
  unint64_t *v79;
  unint64_t v80;
  uint64_t *v81;
  uint64_t *v82;
  unint64_t v83;
  uint64_t v84;
  unint64_t *v85;
  __n128 v86;
  uint64_t *v87;
  unint64_t v88;
  uint64_t v89;
  unsigned int v90;
  _BYTE *v91;
  _BYTE *v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t *v95;
  unint64_t v96;
  uint64_t v97;
  unsigned __int8 *v98;
  int v99;
  int v100;
  double v101;
  uint64_t v103;
  __int128 v104;
  int v105;
  uint64_t v106;
  long double v107;
  long double v108;
  long double v109;
  long double v110;
  long double v111;
  long double v112;
  long double v113;
  double v114;
  long double v115;
  double v116;
  __int16 v117;
  int v118;
  uint64_t v119;
  unint64_t v120;
  unint64_t v121;
  unsigned __int8 *v122;
  BOOL v123;
  const md::LabelPoint *v124;
  double v125;
  double v126;
  double v127;
  unint64_t v128;
  unint64_t v129;
  uint64_t v130;
  uint64_t v131;
  unint64_t v132;
  unint64_t v133;
  unint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  __int128 v142;
  __int128 v143;
  uint64_t v144;
  int v145;
  int v146;
  char v147;
  char v148;
  unsigned int v149;
  double v150;
  double v151;
  unint64_t v152;
  uint64_t v153;
  double v154;
  unint64_t v155;
  unsigned __int16 v156;
  unint64_t v157;
  unint64_t v158;
  uint64_t v159;
  uint64_t v160;
  unint64_t v161;
  unint64_t v162;
  char v163;
  unint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  __int128 v172;
  __int128 v173;
  uint64_t v174;
  uint64_t v175;
  __int128 v176;
  int v177;
  int v178;
  int v179;
  unint64_t v180;
  int v181;
  int v182;
  unsigned int v183;
  int v184;
  uint64_t v185;
  float *v186;
  uint64_t *v187;
  double v188;
  geo::codec *v189;
  uint64_t v190;
  uint64_t v191;
  unint64_t v192;
  uint64_t v193;
  unint64_t v194;
  uint64_t v195;
  int v196;
  char v197;
  uint64_t v198;
  double v199;
  int v200;
  unint64_t v201;
  uint64_t v202;
  double v203;
  double v204;
  md::LabelPoint *v205;
  const md::LabelPoint *v206;
  double v207;
  double v208;
  double v209;
  double v210;
  double v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  unint64_t v215;
  unint64_t v216;
  uint64_t v217;
  double v218;
  uint64_t v219;
  uint64_t v220;
  __int16 v221;
  _BYTE *v222;
  unint64_t v223;
  unint64_t v224;
  _BYTE *v225;
  unint64_t v226;
  double v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  unint64_t v231;
  unint64_t v232;
  uint64_t v233;
  double v234;
  uint64_t v235;
  uint64_t v236;
  __int16 v237;
  _BYTE *v238;
  unint64_t v239;
  unint64_t v240;
  _BYTE *v241;
  __int16 v242;
  unint64_t v243;
  unint64_t v244;
  unint64_t v245;
  unint64_t v246;
  unint64_t v247;
  uint64_t v248;
  unint64_t v249;
  unint64_t v250;
  unint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  __int128 v259;
  uint64_t v260;
  unint64_t v261;
  uint64_t v262;
  _BYTE *v263;
  unint64_t v264;
  _QWORD *v265;
  std::__shared_weak_count *v266;
  uint64_t v267;
  unint64_t *v268;
  unint64_t v269;
  int v270;
  unsigned __int8 *v271;
  unint64_t v272;
  uint64_t v273;
  __int128 v274;
  int v275;
  unint64_t v276;
  int v277;
  int v278;
  int v279;
  int v280;
  int v281;
  uint64_t v282;
  unsigned int v283;
  double v284;
  __int16 v285;
  uint64_t v286;
  int v287;
  uint64_t v288;
  double v289;
  unsigned __int8 *v290;
  BOOL v291;
  const md::LabelPoint *v292;
  double v293;
  double v294;
  double v295;
  double v296;
  double v297;
  double v298;
  md::LabelPoint *v299;
  double *v300;
  double *v301;
  double v302;
  double v303;
  _BOOL4 v304;
  _BOOL4 v305;
  BOOL v306;
  unint64_t v307;
  unint64_t v308;
  uint64_t v309;
  uint64_t v310;
  unint64_t v311;
  unint64_t v312;
  unint64_t v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  unint64_t v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  __int128 v322;
  __int128 v323;
  uint64_t v324;
  uint64_t v325;
  __int128 v326;
  int v327;
  uint64_t v328;
  unint64_t v329;
  unint64_t v330;
  unint64_t v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t v334;
  uint64_t v335;
  uint64_t v336;
  __int128 v337;
  __int128 v338;
  uint64_t v339;
  int v340;
  int v341;
  unint64_t v342;
  int v343;
  int v344;
  unsigned int v345;
  int v346;
  uint64_t v347;
  unint64_t *v348;
  unint64_t v349;
  unsigned __int8 v350;
  uint64_t *v351;
  unint64_t v352;
  char *v353;
  char *v354;
  uint64_t v355;
  uint64_t v356;
  uint64_t v357;
  unint64_t v358;
  uint64_t v359;
  char *v360;
  unint64_t v361;
  char *v362;
  char *v363;
  uint64_t v364;
  unint64_t v365;
  std::__shared_weak_count *v366;
  std::__shared_weak_count *v367;
  uint64_t v368;
  unsigned int v369;
  unint64_t *v370;
  unint64_t v371;
  unint64_t v372;
  unsigned int v373;
  uint64_t v374;
  uint64_t v375;
  unint64_t v376;
  uint64_t v377;
  uint64_t v378;
  char *v379;
  char *v380;
  unint64_t v381;
  uint64_t v382;
  char *v383;
  __n128 *v384;
  __n128 *v385;
  uint64_t v386;
  char *v387;
  uint64_t v388;
  uint64_t v389;
  _OWORD *v390;
  char *v391;
  uint64_t v392;
  __int128 v393;
  double *v394;
  char *v395;
  uint64_t v396;
  uint64_t v397;
  double v398;
  double v399;
  double v400;
  double v401;
  double v402;
  double *v403;
  unint64_t v404;
  unint64_t v405;
  unsigned __int16 v406;
  unint64_t v407;
  unint64_t v408;
  uint64_t v409;
  unint64_t v410;
  unint64_t v411;
  unint64_t v412;
  uint64_t v413;
  uint64_t v414;
  uint64_t v415;
  uint64_t v416;
  uint64_t v417;
  uint64_t v418;
  uint64_t v419;
  __int128 v420;
  uint64_t v421;
  _BYTE *v422;
  int v423;
  int64x2_t v424;
  __n128 v425;
  uint64_t v426;
  int8x8_t v427;
  float32x2_t v428;
  float64x2_t v433;
  uint64_t v434;
  uint64_t v435;
  uint64_t v436;
  unint64_t v437;
  unint64_t v438;
  uint64_t v439;
  double v440;
  uint64_t v441;
  uint64_t v442;
  __int16 v443;
  _BYTE *v444;
  unint64_t v445;
  unint64_t v446;
  _BYTE *v447;
  unint64_t v448;
  uint64_t v449;
  uint64_t v450;
  uint64_t v451;
  unint64_t v452;
  unint64_t v453;
  uint64_t v454;
  uint64_t v455;
  uint64_t v456;
  __int16 v457;
  _BYTE *v458;
  unint64_t v459;
  unint64_t v460;
  _BYTE *v461;
  __int16 v462;
  unint64_t v463;
  unint64_t v464;
  unint64_t v465;
  unint64_t v466;
  unint64_t v467;
  uint64_t v468;
  unint64_t v469;
  unint64_t v470;
  unint64_t v471;
  uint64_t v472;
  uint64_t v473;
  uint64_t v474;
  uint64_t v475;
  uint64_t v476;
  uint64_t v477;
  uint64_t v478;
  __int128 v479;
  uint64_t v480;
  unint64_t v481;
  unint64_t v482;
  unint64_t *v483;
  unint64_t v484;
  __int16 v485;
  uint64_t v486;
  uint64_t v487;
  geo::read_write_lock *v488;
  const char *v489;
  malloc_zone_t *v490;
  uint64_t v491;
  geo::read_write_lock *v492;
  const char *v493;
  malloc_zone_t *zone;
  uint64_t v495;
  geo::read_write_lock *v496;
  const char *v497;
  malloc_zone_t *v498;
  uint64_t *v499;
  uint64_t *v500;
  std::__shared_weak_count *v501;
  _BYTE *v503;
  unint64_t v504;
  uint64_t *v505;
  double v506;
  __n128 v507;
  unsigned __int8 *v508;
  unint64_t v509;
  uint64_t v510;
  std::__shared_weak_count *v511;
  _BYTE *v512;
  char v513;
  uint64_t *v514;
  _BOOL4 v515;
  float64x2_t v516;
  uint64_t v517;
  int v518;
  _BOOL4 v519;
  unint64_t v520;
  float64x2_t v521;
  unsigned __int16 v522;
  int v523;
  unint64_t v524;
  char v525;
  char v526;
  unint64_t v527;
  _DWORD *v528;
  char v529;
  int v530;
  uint64_t *v531;
  unint64_t v532;
  uint64_t v533;
  uint64_t v534;
  int v535;
  unint64_t v536;
  uint64_t *v537;
  float64x2_t v538;
  __n128 v539;
  __int128 v540;
  uint64_t v541;
  _BYTE v542[7];
  _BYTE v543[7];
  int v544;
  char v545;
  __n128 v546;
  __int128 v547;
  uint64_t v548;
  _BYTE v549[7];

  v2 = a1;
  v3 = a1 + 80;
  std::vector<std::unique_ptr<md::LabelLine,mdm::TypeDeleter<md::LabelLine>>,geo::StdAllocator<std::unique_ptr<md::LabelLine,mdm::TypeDeleter<md::LabelLine>>,mdm::Allocator>>::__base_destruct_at_end[abi:nn180100]((uint64_t)(a1 + 80), *((_QWORD **)a1 + 10));
  v4 = (md::LabelLineSegment **)*((_QWORD *)v3 - 8);
  if (v4 == *((md::LabelLineSegment ***)v3 - 7))
    return;
  v5.n128_f64[0] = md::LabelLineSegment::coincidentPointTolerance(*v4);
  v6 = v5.n128_f64[0];
  v546 = 0uLL;
  *(_QWORD *)&v547 = 0;
  v508 = v2;
  {
    v491 = operator new();
    *(_QWORD *)(v491 + 16) = 0x5ED09DD50000000FLL;
    *(_QWORD *)(v491 + 24) = "VectorKitLabels";
    *(_OWORD *)(v491 + 32) = xmmword_19FFB2E80;
    *(_QWORD *)v491 = &off_1E42B5668;
    *(_QWORD *)(v491 + 8) = "VectorKitLabels";
    *(_OWORD *)(v491 + 72) = 0u;
    *(_OWORD *)(v491 + 88) = 0u;
    *(_OWORD *)(v491 + 104) = 0u;
    *(_OWORD *)(v491 + 120) = 0u;
    *(_OWORD *)(v491 + 136) = 0u;
    *(_OWORD *)(v491 + 152) = 0u;
    *(_OWORD *)(v491 + 168) = 0u;
    *(_OWORD *)(v491 + 184) = 0u;
    *(_OWORD *)(v491 + 200) = 0u;
    *(_OWORD *)(v491 + 216) = 0u;
    *(_OWORD *)(v491 + 232) = 0u;
    *(_QWORD *)(v491 + 248) = 0;
    *(_OWORD *)(v491 + 56) = 0u;
    v492 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v491 + 56), 0);
    if ((_DWORD)v492)
      geo::read_write_lock::logFailure(v492, (uint64_t)"initialization", v493);
    zone = malloc_create_zone(0, 0);
    *(_QWORD *)(v491 + 48) = zone;
    malloc_set_zone_name(zone, "VectorKitLabels");
    *(_QWORD *)(v491 + 256) = os_log_create("com.apple.VectorKit", "Memory");
    mdm::Allocator::instance(void)::alloc = v491;
  }
  *((_QWORD *)&v547 + 1) = mdm::Allocator::instance(void)::alloc;
  v8 = *((_QWORD *)v2 + 7) - *((_QWORD *)v2 + 6);
  if (v8)
  {
    if ((unint64_t)v8 > 0xF0F0F0F0F0F0F08)
      abort();
    v9 = v8 >> 3;
    v10 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc
                                                                         + 16))(mdm::Allocator::instance(void)::alloc, 136 * (v8 >> 3), 8);
    v546.n128_u64[0] = (unint64_t)v10;
    v546.n128_u64[1] = (unint64_t)v10;
    *(_QWORD *)&v547 = &v10[17 * v9];
    v11 = (uint64_t *)*((_QWORD *)v2 + 6);
    v12 = (uint64_t *)*((_QWORD *)v2 + 7);
    if (v11 != v12)
    {
      do
      {
        v13 = *v11;
        if ((unint64_t)v10 >= (unint64_t)v547)
        {
          v14 = v546.n128_u64[1];
          v15 = v546.n128_u64[0];
          v16 = 0xF0F0F0F0F0F0F0F1 * ((uint64_t)(v546.n128_u64[1] - v546.n128_u64[0]) >> 3) + 1;
          if (v16 > 0x1E1E1E1E1E1E1E1)
            abort();
          if (0xE1E1E1E1E1E1E1E2 * ((uint64_t)(v547 - v546.n128_u64[0]) >> 3) > v16)
            v16 = 0xE1E1E1E1E1E1E1E2 * ((uint64_t)(v547 - v546.n128_u64[0]) >> 3);
          if (0xF0F0F0F0F0F0F0F1 * ((uint64_t)(v547 - v546.n128_u64[0]) >> 3) >= 0xF0F0F0F0F0F0F0)
            v17 = 0x1E1E1E1E1E1E1E1;
          else
            v17 = v16;
          if (v17)
          {
            v18 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)&v547 + 1) + 16))(*((_QWORD *)&v547 + 1), 136 * v17, 8);
            v10 = (_QWORD *)(v18 + 8 * ((uint64_t)(v546.n128_u64[1] - v546.n128_u64[0]) >> 3));
            v19 = v18 + 136 * v17;
            if (v18)
            {
              md::LabelLineStitchSegment::LabelLineStitchSegment(v10, v13);
              v14 = v546.n128_u64[1];
              v15 = v546.n128_u64[0];
            }
          }
          else
          {
            v10 = (_QWORD *)(8 * ((uint64_t)(v546.n128_u64[1] - v546.n128_u64[0]) >> 3));
            v19 = 0;
          }
          v20 = v10;
          if (v14 != v15)
          {
            do
            {
              v21 = *(_OWORD *)(v14 - 136);
              *(_OWORD *)(v20 - 15) = *(_OWORD *)(v14 - 120);
              *(_OWORD *)(v20 - 17) = v21;
              v22 = *(_OWORD *)(v14 - 104);
              *(v20 - 11) = *(_QWORD *)(v14 - 88);
              *(_OWORD *)(v20 - 13) = v22;
              *((_OWORD *)v20 - 5) = *(_OWORD *)(v14 - 80);
              v23 = *(_DWORD *)(v14 - 64);
              *(_DWORD *)((char *)v20 - 61) = *(_DWORD *)(v14 - 61);
              *((_DWORD *)v20 - 16) = v23;
              v24 = *(_OWORD *)(v14 - 56);
              *(v20 - 5) = *(_QWORD *)(v14 - 40);
              *(_OWORD *)(v20 - 7) = v24;
              *((_OWORD *)v20 - 2) = *(_OWORD *)(v14 - 32);
              v25 = *(_DWORD *)(v14 - 16);
              *(_DWORD *)((char *)v20 - 13) = *(_DWORD *)(v14 - 13);
              *((_DWORD *)v20 - 4) = v25;
              *((_WORD *)v20 - 4) = *(_WORD *)(v14 - 8);
              v20 -= 17;
              v14 -= 136;
            }
            while (v14 != v15);
            v15 = v546.n128_u64[0];
          }
          v26 = v547;
          v546.n128_u64[0] = (unint64_t)v20;
          *(_QWORD *)&v547 = v19;
          if (v15)
            (*(void (**)(_QWORD, unint64_t, unint64_t))(**((_QWORD **)&v547 + 1) + 40))(*((_QWORD *)&v547 + 1), v15, v26 - v15);
          v2 = v508;
        }
        else if (v10)
        {
          md::LabelLineStitchSegment::LabelLineStitchSegment(v10, *v11);
        }
        v10 += 17;
        v546.n128_u64[1] = (unint64_t)v10;
        ++v11;
      }
      while (v11 != v12);
      v27 = (_QWORD *)v546.n128_u64[0];
      if ((_QWORD *)v546.n128_u64[0] == v10)
        goto LABEL_30;
      md::LabelLineZSet::connectEntries(v2, 0, (uint64_t *)&v546, v6);
      v10 = v27;
    }
    if (v10)
    {
LABEL_30:
      v546.n128_u64[1] = (unint64_t)v10;
      (*(void (**)(_QWORD, _QWORD *, _QWORD))(**((_QWORD **)&v547 + 1) + 40))(*((_QWORD *)&v547 + 1), v10, v547 - (_QWORD)v10);
    }
  }
  v546 = 0uLL;
  *(_QWORD *)&v547 = 0;
  {
    v495 = operator new();
    *(_QWORD *)(v495 + 16) = 0x5ED09DD50000000FLL;
    *(_QWORD *)(v495 + 24) = "VectorKitLabels";
    *(_OWORD *)(v495 + 32) = xmmword_19FFB2E80;
    *(_QWORD *)v495 = &off_1E42B5668;
    *(_QWORD *)(v495 + 8) = "VectorKitLabels";
    *(_OWORD *)(v495 + 72) = 0u;
    *(_OWORD *)(v495 + 88) = 0u;
    *(_OWORD *)(v495 + 104) = 0u;
    *(_OWORD *)(v495 + 120) = 0u;
    *(_OWORD *)(v495 + 136) = 0u;
    *(_OWORD *)(v495 + 152) = 0u;
    *(_OWORD *)(v495 + 168) = 0u;
    *(_OWORD *)(v495 + 184) = 0u;
    *(_OWORD *)(v495 + 200) = 0u;
    *(_OWORD *)(v495 + 216) = 0u;
    *(_OWORD *)(v495 + 232) = 0u;
    *(_QWORD *)(v495 + 248) = 0;
    *(_OWORD *)(v495 + 56) = 0u;
    v496 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v495 + 56), 0);
    if ((_DWORD)v496)
      geo::read_write_lock::logFailure(v496, (uint64_t)"initialization", v497);
    v498 = malloc_create_zone(0, 0);
    *(_QWORD *)(v495 + 48) = v498;
    malloc_set_zone_name(v498, "VectorKitLabels");
    *(_QWORD *)(v495 + 256) = os_log_create("com.apple.VectorKit", "Memory");
    mdm::Allocator::instance(void)::alloc = v495;
    v2 = v508;
  }
  v29 = mdm::Allocator::instance(void)::alloc;
  *((_QWORD *)&v547 + 1) = mdm::Allocator::instance(void)::alloc;
  v30 = *((_QWORD *)v2 + 3) - *((_QWORD *)v2 + 2);
  if (v30)
  {
    if ((unint64_t)v30 > 0xF0F0F0F0F0F0F08)
      abort();
    v31 = v30 >> 3;
    v32 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc + 16))(mdm::Allocator::instance(void)::alloc, 136 * (v30 >> 3), 8);
    v33 = v32;
    v34 = v32 + 136 * v31;
    v35 = v546.n128_u64[1];
    v36 = v546.n128_u64[0];
    v37 = v32;
    if (v546.n128_u64[1] != v546.n128_u64[0])
    {
      do
      {
        v38 = *(_OWORD *)(v35 - 136);
        *(_OWORD *)(v37 - 120) = *(_OWORD *)(v35 - 120);
        *(_OWORD *)(v37 - 136) = v38;
        v39 = *(_OWORD *)(v35 - 104);
        *(_QWORD *)(v37 - 88) = *(_QWORD *)(v35 - 88);
        *(_OWORD *)(v37 - 104) = v39;
        *(_OWORD *)(v37 - 80) = *(_OWORD *)(v35 - 80);
        v40 = *(_DWORD *)(v35 - 64);
        *(_DWORD *)(v37 - 61) = *(_DWORD *)(v35 - 61);
        *(_DWORD *)(v37 - 64) = v40;
        v41 = *(_OWORD *)(v35 - 56);
        *(_QWORD *)(v37 - 40) = *(_QWORD *)(v35 - 40);
        *(_OWORD *)(v37 - 56) = v41;
        v5 = *(__n128 *)(v35 - 32);
        *(__n128 *)(v37 - 32) = v5;
        v42 = *(_DWORD *)(v35 - 16);
        *(_DWORD *)(v37 - 13) = *(_DWORD *)(v35 - 13);
        *(_DWORD *)(v37 - 16) = v42;
        *(_WORD *)(v37 - 8) = *(_WORD *)(v35 - 8);
        v37 -= 136;
        v35 -= 136;
      }
      while (v35 != v36);
      v35 = v36;
    }
    v546.n128_u64[0] = v37;
    v546.n128_u64[1] = v32;
    v43 = v547;
    *(_QWORD *)&v547 = v34;
    if (v35)
      (*(void (**)(uint64_t, unint64_t, unint64_t))(*(_QWORD *)v29 + 40))(v29, v35, v43 - v35);
  }
  else
  {
    v33 = 0;
    v37 = 0;
  }
  v44 = (const md::LabelLineSegment **)*((_QWORD *)v508 + 2);
  v45 = (const md::LabelLineSegment **)*((_QWORD *)v508 + 3);
  if (v44 != v45)
  {
    v46 = 0;
    v47 = 0;
    v48 = v508;
    while (1)
    {
      if (v48[2] != 1)
        goto LABEL_72;
      v50 = *v44;
      v51 = *((unsigned __int8 *)*v44 + 32);
      _ZF = v51 > 3 || v51 == 1;
      if (!v46)
        break;
      if (!_ZF)
      {
        v53 = (uint64_t *)*((_QWORD *)v50 + 2);
        if (v53)
        {
          v54 = (std::__shared_weak_count *)v53[1];
          if (v54)
          {
            v55 = std::__shared_weak_count::lock(v54);
            if (v55)
            {
              v56 = v55;
              v57 = *v53;
              p_shared_owners = (unint64_t *)&v55->__shared_owners_;
              do
                v59 = __ldaxr(p_shared_owners);
              while (__stlxr(v59 - 1, p_shared_owners));
              if (!v59)
              {
                ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
                std::__shared_weak_count::__release_weak(v56);
              }
              v48 = v508;
              if (v57 != v46)
                goto LABEL_44;
              goto LABEL_72;
            }
            v48 = v508;
          }
        }
      }
LABEL_44:
      if (++v44 == v45)
      {
        v33 = v546.n128_i64[1];
        v37 = v546.n128_u64[0];
        goto LABEL_97;
      }
    }
    if (!_ZF && (v60 = (uint64_t *)*((_QWORD *)v50 + 2)) != 0 && (v61 = (std::__shared_weak_count *)v60[1]) != 0)
    {
      v62 = std::__shared_weak_count::lock(v61);
      if (v62)
      {
        v46 = *v60;
        if (!v47)
          goto LABEL_71;
      }
      else
      {
        v46 = 0;
        if (!v47)
          goto LABEL_71;
      }
    }
    else
    {
      v46 = 0;
      v62 = 0;
      if (!v47)
      {
LABEL_71:
        v47 = v62;
        v48 = v508;
LABEL_72:
        if ((unint64_t)(*(uint64_t (**)(const md::LabelLineSegment *))(*(_QWORD *)*v44 + 16))(*v44) >= 2)
        {
          v65 = *v44;
          if (!*((_BYTE *)*v44 + 37))
          {
            v66 = v546.n128_i64[1];
            if (v546.n128_u64[1] >= (unint64_t)v547)
            {
              v67 = v546.n128_u64[0];
              v68 = 0xF0F0F0F0F0F0F0F1 * ((uint64_t)(v546.n128_u64[1] - v546.n128_u64[0]) >> 3) + 1;
              if (v68 > 0x1E1E1E1E1E1E1E1)
                abort();
              if (0xE1E1E1E1E1E1E1E2 * ((uint64_t)(v547 - v546.n128_u64[0]) >> 3) > v68)
                v68 = 0xE1E1E1E1E1E1E1E2 * ((uint64_t)(v547 - v546.n128_u64[0]) >> 3);
              if (0xF0F0F0F0F0F0F0F1 * ((uint64_t)(v547 - v546.n128_u64[0]) >> 3) >= 0xF0F0F0F0F0F0F0)
                v69 = 0x1E1E1E1E1E1E1E1;
              else
                v69 = v68;
              if (v69)
              {
                v70 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)&v547 + 1) + 16))(*((_QWORD *)&v547 + 1), 136 * v69, 8);
                v49 = v70 + 8 * ((uint64_t)(v66 - v67) >> 3);
                v534 = v70 + 136 * v69;
                if (v70)
                {
                  md::LabelLineStitchSegment::LabelLineStitchSegment((md::LabelLineStitchSegment *)(v70 + 8 * ((uint64_t)(v66 - v67) >> 3)), v65);
                  v66 = v546.n128_i64[1];
                  v67 = v546.n128_u64[0];
                }
              }
              else
              {
                v49 = 8 * ((uint64_t)(v546.n128_u64[1] - v546.n128_u64[0]) >> 3);
                v534 = 0;
              }
              v71 = v49;
              if (v66 != v67)
              {
                do
                {
                  v72 = *(_OWORD *)(v66 - 136);
                  *(_OWORD *)(v71 - 120) = *(_OWORD *)(v66 - 120);
                  *(_OWORD *)(v71 - 136) = v72;
                  v73 = *(_OWORD *)(v66 - 104);
                  *(_QWORD *)(v71 - 88) = *(_QWORD *)(v66 - 88);
                  *(_OWORD *)(v71 - 104) = v73;
                  *(_OWORD *)(v71 - 80) = *(_OWORD *)(v66 - 80);
                  v74 = *(_DWORD *)(v66 - 64);
                  *(_DWORD *)(v71 - 61) = *(_DWORD *)(v66 - 61);
                  *(_DWORD *)(v71 - 64) = v74;
                  v75 = *(_OWORD *)(v66 - 56);
                  *(_QWORD *)(v71 - 40) = *(_QWORD *)(v66 - 40);
                  *(_OWORD *)(v71 - 56) = v75;
                  v5 = *(__n128 *)(v66 - 32);
                  *(__n128 *)(v71 - 32) = v5;
                  v76 = *(_DWORD *)(v66 - 16);
                  *(_DWORD *)(v71 - 13) = *(_DWORD *)(v66 - 13);
                  *(_DWORD *)(v71 - 16) = v76;
                  *(_WORD *)(v71 - 8) = *(_WORD *)(v66 - 8);
                  v71 -= 136;
                  v66 -= 136;
                }
                while (v66 != v67);
                v67 = v546.n128_u64[0];
              }
              v77 = v547;
              v546.n128_u64[0] = v71;
              *(_QWORD *)&v547 = v534;
              v48 = v508;
              if (v67)
                (*(void (**)(_QWORD, unint64_t, unint64_t))(**((_QWORD **)&v547 + 1) + 40))(*((_QWORD *)&v547 + 1), v67, v77 - v67);
            }
            else
            {
              if (v546.n128_u64[1])
                md::LabelLineStitchSegment::LabelLineStitchSegment((md::LabelLineStitchSegment *)v546.n128_u64[1], *v44);
              v49 = v66;
              v48 = v508;
            }
            v546.n128_u64[1] = v49 + 136;
          }
        }
        goto LABEL_44;
      }
    }
    v63 = (unint64_t *)&v47->__shared_owners_;
    do
      v64 = __ldaxr(v63);
    while (__stlxr(v64 - 1, v63));
    if (!v64)
    {
      ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
      std::__shared_weak_count::__release_weak(v47);
    }
    goto LABEL_71;
  }
  v47 = 0;
LABEL_97:
  _ZF = v37 == v33;
  v78 = (double *)v508;
  if (!_ZF)
    md::LabelLineZSet::connectEntries(v508, 1, (uint64_t *)&v546, v6);
  if (v47)
  {
    v79 = (unint64_t *)&v47->__shared_owners_;
    do
      v80 = __ldaxr(v79);
    while (__stlxr(v80 - 1, v79));
    if (!v80)
    {
      ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
      std::__shared_weak_count::__release_weak(v47);
    }
  }
  if (v546.n128_u64[0])
  {
    v546.n128_u64[1] = v546.n128_u64[0];
    (*(void (**)(_QWORD, unint64_t, unint64_t))(**((_QWORD **)&v547 + 1) + 40))(*((_QWORD *)&v547 + 1), v546.n128_u64[0], v547 - v546.n128_u64[0]);
  }
  v81 = (uint64_t *)*((_QWORD *)v508 + 10);
  v82 = (uint64_t *)*((_QWORD *)v508 + 11);
  v83 = 126 - 2 * __clz(v82 - v81);
  if (v82 == v81)
    v84 = 0;
  else
    v84 = v83;
  v86.n128_f64[0] = std::__introsort<std::_ClassicAlgPolicy,md::LabelLineZSet::createLines(std::shared_ptr<md::LabelLineStore const> const&)::$_0 &,std::unique_ptr<md::LabelLine,mdm::TypeDeleter<md::LabelLine>> *,false>(v81, v82, v84, 1, v5);
  *((_QWORD *)v508 + 1) = 0;
  v87 = (uint64_t *)*((_QWORD *)v508 + 10);
  v499 = (uint64_t *)*((_QWORD *)v508 + 11);
  if (v87 != v499)
  {
    while (1)
    {
      v88 = 0;
      v500 = v87;
      v89 = *v87;
      v90 = *(unsigned __int8 *)v78;
      v91 = *(_BYTE **)(*v87 + 8);
      if (*(_BYTE **)(v89 + 16) == v91)
        v92 = 0;
      else
        v92 = v91;
      if (!v92[8])
        v88 = ((*(unsigned int (**)(_QWORD, __n128))(**(_QWORD **)v92 + 16))(*(_QWORD *)v92, v86) << 16)
            - 0x10000;
      v93 = *a2;
      v94 = *a2;
      v501 = (std::__shared_weak_count *)a2[1];
      if (v501)
      {
        v95 = (unint64_t *)&v501->__shared_owners_;
        do
          v96 = __ldxr(v95);
        while (__stxr(v96 + 1, v95));
        v94 = *a2;
      }
      v97 = *(unsigned int *)(v94 + 252);
      if (*(_QWORD *)(v89 + 16) == *(_QWORD *)(v89 + 8))
        v98 = 0;
      else
        v98 = *(unsigned __int8 **)(v89 + 8);
      v541 = 0;
      v86.n128_u64[1] = 0;
      v539 = 0u;
      v540 = 0u;
      *(_DWORD *)v542 = 2139095039;
      *(_WORD *)&v542[4] = 0;
      v542[6] = 0;
      if (v90 <= 0xA)
        v99 = 2;
      else
        v99 = 4;
      if (v90 > 0xC)
        v99 = 127;
      v535 = v99;
      v100 = *(unsigned __int8 *)(v94 + 290);
      v101 = 1.0;
      if (v93)
      {
        if ((_DWORD)v97 == *(_DWORD *)(v93 + 252)
          && v98 != 0
          && !(v88 >> 31)
          && (*(uint64_t (**)(_QWORD))(**(_QWORD **)v98 + 16))(*(_QWORD *)v98) > v88 >> 16)
        {
          v103 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)v98 + 24))(*(_QWORD *)v98, (uint64_t)(int)v88 >> 16);
          v86 = *(__n128 *)v103;
          v104 = *(_OWORD *)(v103 + 16);
          v539 = *(__n128 *)v103;
          v540 = v104;
          v541 = *(_QWORD *)(v103 + 32);
          v105 = *(_DWORD *)(v103 + 43);
          *(_DWORD *)v542 = *(_DWORD *)(v103 + 40);
          *(_DWORD *)&v542[3] = v105;
          if (!v100)
          {
            v106 = md::LabelPoint::mercatorPoint((md::LabelPoint *)&v539);
            v107 = exp(*(double *)(v106 + 8) * 6.28318531 + -3.14159265);
            v108 = atan(v107) * 114.591559 + -90.0;
            v109 = cos(v108 * 0.034906585) * -559.82 + 111132.92;
            v110 = v109 + cos(v108 * 0.0698131701) * 1.175;
            v111 = v110 + cos(v108 * 0.104719755) * -0.0023;
            v112 = v108 * 0.00872664626;
            v113 = tan(v108 * 0.00872664626 + 0.78103484);
            v114 = log(v113);
            v115 = tan(v112 + 0.789761487);
            v101 = fabs((log(v115) - v114) * 0.159154943) / v111;
          }
        }
      }
      v116 = 0.0;
      v517 = v93;
LABEL_143:
      v120 = WORD1(v88);
      v121 = SWORD1(v88);
LABEL_145:
      while (v93)
      {
        v122 = v98;
        v123 = (_DWORD)v97 != *(_DWORD *)(v93 + 252) || v98 == 0;
        if (v123
          || (v88 & 0x80000000) != 0
          || (*(uint64_t (**)(_QWORD))(**(_QWORD **)v98 + 16))(*(_QWORD *)v98) <= v120)
        {
          break;
        }
        v124 = (const md::LabelPoint *)(*(uint64_t (**)(_QWORD, unint64_t))(**(_QWORD **)v98 + 24))(*(_QWORD *)v98, v121);
        md::LabelPoint::vectorToPoint((md::LabelPoint *)&v539, v124, v100 != 0);
        v116 = sqrt(v125 * v125 + v126 * v126 + v127 * v127) + v116;
        if ((v88 & 0xFFFF0000) != 0)
        {
          if ((*(uint64_t (**)(_QWORD))(**(_QWORD **)v98 + 16))(*(_QWORD *)v98) > v121 || !v98[10])
            goto LABEL_177;
        }
        else if (!v98[9])
        {
          goto LABEL_177;
        }
        v128 = *(_QWORD *)(v89 + 80);
        v129 = *(_QWORD *)(v89 + 88);
        if (v128 >= v129)
        {
          v131 = *(_QWORD *)(v89 + 72);
          v132 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v128 - v131) >> 4);
          v133 = v132 + 1;
          if (v132 + 1 > 0x555555555555555)
            abort();
          v134 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v129 - v131) >> 4);
          if (2 * v134 > v133)
            v133 = 2 * v134;
          if (v134 >= 0x2AAAAAAAAAAAAAALL)
            v135 = 0x555555555555555;
          else
            v135 = v133;
          if (v135)
          {
            v136 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v89 + 96) + 16))(*(_QWORD *)(v89 + 96), 48 * v135, 8);
            v137 = v136 + 48 * v132;
            v138 = v136 + 48 * v135;
            if (v136)
            {
              *(_WORD *)v137 = 261;
              *(_BYTE *)(v137 + 2) = 0;
              *(double *)(v137 + 8) = v116;
              *(double *)(v137 + 16) = v116;
              *(_DWORD *)(v137 + 24) = v88;
              *(_QWORD *)(v137 + 28) = 0xFFFFFFFF00000000;
              *(_DWORD *)(v137 + 36) = 0;
              *(_BYTE *)(v137 + 40) = 1;
            }
          }
          else
          {
            v138 = 0;
            v137 = 48 * v132;
          }
          v140 = *(_QWORD *)(v89 + 72);
          v139 = *(_QWORD *)(v89 + 80);
          v141 = v137;
          if (v139 != v140)
          {
            do
            {
              v142 = *(_OWORD *)(v139 - 48);
              v143 = *(_OWORD *)(v139 - 16);
              *(_OWORD *)(v141 - 32) = *(_OWORD *)(v139 - 32);
              *(_OWORD *)(v141 - 16) = v143;
              *(_OWORD *)(v141 - 48) = v142;
              v141 -= 48;
              v139 -= 48;
            }
            while (v139 != v140);
            v139 = *(_QWORD *)(v89 + 72);
          }
          v130 = v137 + 48;
          *(_QWORD *)(v89 + 72) = v141;
          *(_QWORD *)(v89 + 80) = v137 + 48;
          v144 = *(_QWORD *)(v89 + 88);
          *(_QWORD *)(v89 + 88) = v138;
          if (v139)
            (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v89 + 96) + 40))(*(_QWORD *)(v89 + 96), v139, v144 - v139);
        }
        else
        {
          if (v128)
          {
            *(_WORD *)v128 = 261;
            *(_BYTE *)(v128 + 2) = 0;
            *(double *)(v128 + 8) = v116;
            *(double *)(v128 + 16) = v116;
            *(_DWORD *)(v128 + 24) = v88;
            *(_QWORD *)(v128 + 28) = 0xFFFFFFFF00000000;
            *(_DWORD *)(v128 + 36) = 0;
            *(_BYTE *)(v128 + 40) = 1;
          }
          v130 = v128 + 48;
        }
        *(_QWORD *)(v89 + 80) = v130;
LABEL_177:
        if ((_DWORD)v97 == *(_DWORD *)(v93 + 252)
          && (*(uint64_t (**)(_QWORD))(**(_QWORD **)v122 + 16))(*(_QWORD *)v122) > v120)
        {
          v145 = *(_DWORD *)(*(uint64_t (**)(_QWORD, unint64_t))(**(_QWORD **)v122 + 32))(*(_QWORD *)v122, v121);
        }
        else
        {
          LOBYTE(v145) = 127;
        }
        if ((_DWORD)v97 == *(_DWORD *)(v93 + 252)
          && (*(uint64_t (**)(_QWORD))(**(_QWORD **)v122 + 16))(*(_QWORD *)v122) > v120)
        {
          v146 = *(_DWORD *)(*(uint64_t (**)(_QWORD, unint64_t))(**(_QWORD **)v122 + 32))(*(_QWORD *)v122, v121) >> 8;
        }
        else
        {
          LOBYTE(v146) = 127;
        }
        if (*(_BYTE *)(v89 + 1) == 2)
        {
          if (v146 != 127)
            goto LABEL_187;
        }
        else if (v146 != 127)
        {
          v146 = (char)v146;
          if (v535 < (char)v145 || v535 >= v146)
          {
            if ((char)v145 - v146 >= 2)
            {
LABEL_187:
              v147 = 1;
              v148 = 3;
            }
            else
            {
              v147 = 0;
              v148 = 2;
            }
            if ((_DWORD)v97 == *(_DWORD *)(v93 + 252)
              && (*(uint64_t (**)(_QWORD))(**(_QWORD **)v122 + 16))(*(_QWORD *)v122) > v120
              && (v149 = HIBYTE(*(_DWORD *)(*(uint64_t (**)(_QWORD, unint64_t))(**(_QWORD **)v122 + 32))(*(_QWORD *)v122, v121))) != 0)
            {
              v150 = v101 * (float)((float)v149 * 0.1);
            }
            else
            {
              v150 = 0.0000001;
            }
            v151 = v116 - v150;
            v152 = md::LabelLine::coordinateAtOffset((md::LabelLine *)v89, v116 - v150);
            v153 = v97;
            v154 = v150 + v116;
            v155 = md::LabelLine::coordinateAtOffset((md::LabelLine *)v89, v154);
            v156 = v155;
            v157 = *(_QWORD *)(v89 + 80);
            v158 = *(_QWORD *)(v89 + 88);
            if (v157 >= v158)
            {
              v513 = v147;
              v160 = *(_QWORD *)(v89 + 72);
              v161 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v157 - v160) >> 4);
              v162 = v161 + 1;
              if (v161 + 1 > 0x555555555555555)
                abort();
              v163 = v148;
              v164 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v158 - v160) >> 4);
              if (2 * v164 > v162)
                v162 = 2 * v164;
              if (v164 >= 0x2AAAAAAAAAAAAAALL)
                v165 = 0x555555555555555;
              else
                v165 = v162;
              if (v165)
              {
                v504 = v155 >> 16;
                v509 = HIDWORD(v155);
                v166 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v89 + 96) + 16))(*(_QWORD *)(v89 + 96), 48 * v165, 8);
                v167 = v166 + 48 * v161;
                v168 = v166 + 48 * v165;
                if (v166)
                {
                  *(_BYTE *)v167 = v163;
                  *(_WORD *)(v167 + 1) = 257;
                  *(_DWORD *)(v167 + 3) = *(_DWORD *)v543;
                  *(_BYTE *)(v167 + 7) = v543[4];
                  *(double *)(v167 + 8) = v151;
                  *(double *)(v167 + 16) = v154;
                  *(_DWORD *)(v167 + 24) = (unsigned __int16)v152 | (WORD1(v152) << 16);
                  *(_DWORD *)(v167 + 28) = HIDWORD(v152);
                  *(_DWORD *)(v167 + 32) = v156 | ((unsigned __int16)v504 << 16);
                  *(_DWORD *)(v167 + 36) = v509;
                  *(_BYTE *)(v167 + 40) = v513;
                  *(_DWORD *)(v167 + 41) = v546.n128_u32[0];
                  *(_DWORD *)(v167 + 44) = *(unsigned __int32 *)((char *)v546.n128_u32 + 3);
                }
              }
              else
              {
                v168 = 0;
                v167 = 48 * v161;
              }
              v170 = *(_QWORD *)(v89 + 72);
              v169 = *(_QWORD *)(v89 + 80);
              v97 = v153;
              v121 = SWORD1(v88);
              v171 = v167;
              if (v169 == v170)
              {
                v120 = WORD1(v88);
              }
              else
              {
                v120 = WORD1(v88);
                do
                {
                  v172 = *(_OWORD *)(v169 - 48);
                  v173 = *(_OWORD *)(v169 - 16);
                  *(_OWORD *)(v171 - 32) = *(_OWORD *)(v169 - 32);
                  *(_OWORD *)(v171 - 16) = v173;
                  *(_OWORD *)(v171 - 48) = v172;
                  v171 -= 48;
                  v169 -= 48;
                }
                while (v169 != v170);
                v169 = *(_QWORD *)(v89 + 72);
              }
              v93 = v517;
              v159 = v167 + 48;
              *(_QWORD *)(v89 + 72) = v171;
              *(_QWORD *)(v89 + 80) = v167 + 48;
              v174 = *(_QWORD *)(v89 + 88);
              *(_QWORD *)(v89 + 88) = v168;
              if (v169)
                (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v89 + 96) + 40))(*(_QWORD *)(v89 + 96), v169, v174 - v169);
            }
            else
            {
              if (v157)
              {
                *(_BYTE *)v157 = v148;
                *(_WORD *)(v157 + 1) = 257;
                *(_DWORD *)(v157 + 3) = *(_DWORD *)v543;
                *(_BYTE *)(v157 + 7) = v543[4];
                *(double *)(v157 + 8) = v151;
                *(double *)(v157 + 16) = v154;
                *(_DWORD *)(v157 + 24) = (unsigned __int16)v152 | (WORD1(v152) << 16);
                *(_DWORD *)(v157 + 28) = HIDWORD(v152);
                *(_DWORD *)(v157 + 32) = (unsigned __int16)v155 | (WORD1(v155) << 16);
                *(_DWORD *)(v157 + 36) = HIDWORD(v155);
                *(_BYTE *)(v157 + 40) = v147;
                *(_DWORD *)(v157 + 41) = v546.n128_u32[0];
                *(_DWORD *)(v157 + 44) = *(unsigned __int32 *)((char *)v546.n128_u32 + 3);
              }
              v159 = v157 + 48;
              v97 = v153;
              v120 = WORD1(v88);
              v93 = v517;
              v121 = SWORD1(v88);
            }
            *(_QWORD *)(v89 + 80) = v159;
          }
        }
        v175 = (*(uint64_t (**)(_QWORD, unint64_t))(**(_QWORD **)v122 + 24))(*(_QWORD *)v122, v121);
        v98 = 0;
        v86 = *(__n128 *)v175;
        v176 = *(_OWORD *)(v175 + 16);
        v539 = *(__n128 *)v175;
        v540 = v176;
        v541 = *(_QWORD *)(v175 + 32);
        v177 = *(_DWORD *)(v175 + 43);
        *(_DWORD *)v542 = *(_DWORD *)(v175 + 40);
        *(_DWORD *)&v542[3] = v177;
        if ((_DWORD)v97 == *(_DWORD *)(v93 + 252))
        {
          v178 = 1;
          v179 = v120;
          LODWORD(v180) = (__int16)v88;
          while (1)
          {
            v181 = v122[8];
            if (v122[8])
              v182 = v178;
            else
              v182 = -v178;
            v183 = v182 + v179;
            if (v182 + v179 < 0)
            {
              v184 = v183 + 1;
            }
            else
            {
              if ((*(uint64_t (**)(_QWORD))(**(_QWORD **)v122 + 16))(*(_QWORD *)v122) > (unint64_t)v183)
              {
                v117 = v180;
                v118 = (unsigned __int16)v180 | ((unsigned __int16)v183 << 16);
                v119 = *(_QWORD *)(v89 + 8);
                if ((*(_QWORD *)(v89 + 16) - v119) >> 4 <= (unint64_t)v117)
                  v98 = 0;
                else
                  v98 = (unsigned __int8 *)(v119 + 16 * v117);
                LODWORD(v88) = v118;
                goto LABEL_143;
              }
              v184 = v183 - (*(uint64_t (**)(_QWORD))(**(_QWORD **)v122 + 16))(*(_QWORD *)v122);
              v181 = v122[8];
            }
            if (v181)
              v178 = v184;
            else
              v178 = -v184;
            v180 = (v180 + 1);
            v185 = *(_QWORD *)(v89 + 8);
            v122 = (unsigned __int8 *)(v185 + 16 * v180);
            if (!v185 || (*(_QWORD *)(v89 + 16) - v185) >> 4 <= v180)
            {
              v98 = 0;
              v121 = SWORD1(v88);
              goto LABEL_145;
            }
            v179 = 0;
            if (!*(_BYTE *)(v185 + 16 * v180 + 8))
              v179 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)v122 + 16))(*(_QWORD *)v122) - 1;
          }
        }
      }
      v186 = md::SignedDistanceFieldGenerator::_hypotCache + 129752;
      if (*(_BYTE *)v89)
      {
        if (*(_BYTE *)v89 != 3)
          goto LABEL_466;
        goto LABEL_346;
      }
      v187 = *(uint64_t **)(v89 + 8);
      v505 = *(uint64_t **)(v89 + 16);
      if (v187 == v505)
        goto LABEL_466;
      v188 = 0.0;
      while (2)
      {
        v189 = 0;
        v190 = *v187;
        v546.n128_u64[0] = 0;
        if (!*(_BYTE *)(v190 + 32))
          v189 = *(geo::codec **)(v190 + 16);
        v191 = geo::codec::roadFeatureCrossings(v189, (const GeoCodecsRoadFeature *)*(unsigned __int16 *)(v190 + 44), &v546, v85);
        v192 = v546.n128_u64[0];
        if (v546.n128_u64[0])
        {
          v193 = v191;
          v194 = 0;
          v518 = *(char *)(v190 + 36);
          v510 = v191;
          v514 = v187;
          do
          {
            v196 = *(char *)(v193 + 12 * v194 + 8);
            if (*(_BYTE *)(v89 + 1) == 2)
            {
              if (v196 != 127)
                goto LABEL_255;
            }
            else if (v535 < v518 || v535 >= v196)
            {
              if (v518 - 1 <= v196)
              {
                v529 = 0;
                v197 = 2;
              }
              else
              {
LABEL_255:
                v529 = 1;
                v197 = 3;
              }
              v525 = v197;
              v198 = v193 + 12 * v194;
              if (*(_BYTE *)(v198 + 9))
                v199 = v101 * (float)((float)*(unsigned __int8 *)(v198 + 9) * 0.1);
              else
                v199 = 0.0000001;
              v200 = *((unsigned __int8 *)v187 + 8);
              v201 = *(unsigned __int16 *)(v198 + 2);
              if ((unint64_t)*(unsigned __int16 *)(v190 + 46) - 1 <= v201)
              {
                if (v200)
                  v204 = *(double *)(v190 + 8);
                else
                  v204 = 0.0;
              }
              else
              {
                v202 = 0;
                v203 = *(float *)(v193 + 12 * v194 + 4);
                v204 = 0.0;
                do
                {
                  v205 = (md::LabelPoint *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v190 + 24))(v190, v202++);
                  v206 = (const md::LabelPoint *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v190 + 24))(v190, v202);
                  md::LabelPoint::vectorToPoint(v205, v206, *(unsigned __int8 *)(v190 + 33));
                  v86.n128_f64[0] = sqrt(v86.n128_f64[0] * v86.n128_f64[0] + v207 * v207 + v208 * v208);
                  if (v202 - 1 >= v201)
                    v209 = v203;
                  else
                    v209 = 1.0;
                  v204 = v204 + v86.n128_f64[0] * v209;
                }
                while (v202 - 1 != v201);
                if (!v200)
                  v204 = *(double *)(v190 + 8) - v204;
              }
              v210 = v204 + v188;
              v211 = v204 + v188 - v199;
              if (v211 <= 0.0)
              {
                v223 = 0;
                LOWORD(v224) = 0;
                LOWORD(v216) = 0;
                if (*(_QWORD *)(v89 + 16) == *(_QWORD *)(v89 + 8))
                  v225 = 0;
                else
                  v225 = *(_BYTE **)(v89 + 8);
                if (!v225[8])
                {
                  v223 = 0;
                  LOWORD(v216) = 0;
                  v224 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)v225 + 16))(*(_QWORD *)v225) + 0xFFFF;
                }
                goto LABEL_298;
              }
              v212 = *(_QWORD *)(v89 + 8);
              v213 = *(_QWORD *)(v89 + 16);
              v214 = v213 - v212;
              if (*(double *)(v89 + 104) <= v211)
              {
                v221 = ((unint64_t)v214 >> 4) - 1;
                v222 = (_BYTE *)(v212 + 16 * v221);
                if (v221 >= (unint64_t)(v214 >> 4))
                  v222 = 0;
                if (v222[8])
                  goto LABEL_295;
              }
              else
              {
                v215 = v214 >> 4;
                if (v213 != v212)
                {
                  v216 = 0;
                  if (v215 <= 1)
                    v217 = 1;
                  else
                    v217 = v214 >> 4;
                  v218 = 0.0;
                  v219 = *(_QWORD *)(v89 + 8);
                  while (1)
                  {
                    v220 = v215 <= v216 ? 0 : v219;
                    if (*(double *)(*(_QWORD *)v220 + 8) + v218 >= v211)
                      break;
                    ++v216;
                    v219 += 16;
                    v218 = *(double *)(*(_QWORD *)v220 + 8) + v218;
                    if (v217 == v216)
                      goto LABEL_283;
                  }
                  v224 = md::LabelLineSegment::coordinateAtOffset(*(md::LabelLineSegment **)v220, *(unsigned __int8 *)(v220 + 8), v211 - v218);
                  v223 = v224 & 0xFFFFFFFF00000000;
LABEL_298:
                  v227 = v210 + v199;
                  v522 = v224;
                  if (v227 <= 0.0)
                  {
                    v239 = 0;
                    LOWORD(v240) = 0;
                    LOWORD(v232) = 0;
                    if (*(_QWORD *)(v89 + 16) == *(_QWORD *)(v89 + 8))
                      v241 = 0;
                    else
                      v241 = *(_BYTE **)(v89 + 8);
                    if (!v241[8])
                    {
                      v242 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)v241 + 16))(*(_QWORD *)v241);
                      v239 = 0;
                      LOWORD(v232) = 0;
                      LOWORD(v240) = v242 - 1;
                    }
                  }
                  else
                  {
                    v228 = *(_QWORD *)(v89 + 8);
                    v229 = *(_QWORD *)(v89 + 16);
                    v230 = v229 - v228;
                    if (*(double *)(v89 + 104) <= v227)
                    {
                      v237 = ((unint64_t)v230 >> 4) - 1;
                      v238 = (_BYTE *)(v228 + 16 * v237);
                      if (v237 >= (unint64_t)(v230 >> 4))
                        v238 = 0;
                      if (v238[8])
                        goto LABEL_322;
                    }
                    else
                    {
                      v231 = v230 >> 4;
                      if (v229 != v228)
                      {
                        v232 = 0;
                        if (v231 <= 1)
                          v233 = 1;
                        else
                          v233 = v230 >> 4;
                        v234 = 0.0;
                        v235 = *(_QWORD *)(v89 + 8);
                        while (1)
                        {
                          v236 = v231 <= v232 ? 0 : v235;
                          if (*(double *)(*(_QWORD *)v236 + 8) + v234 >= v227)
                            break;
                          ++v232;
                          v235 += 16;
                          v234 = *(double *)(*(_QWORD *)v236 + 8) + v234;
                          if (v233 == v232)
                            goto LABEL_310;
                        }
                        v261 = md::LabelLineSegment::coordinateAtOffset(*(md::LabelLineSegment **)v236, *(unsigned __int8 *)(v236 + 8), v227 - v234);
                        LOWORD(v240) = v261;
                        v239 = v261 & 0xFFFFFFFF00000000;
                        goto LABEL_325;
                      }
LABEL_310:
                      v237 = ((unint64_t)v230 >> 4) - 1;
                      v238 = (_BYTE *)(v228 + 16 * v237);
                      if (v231 <= v237)
                        v238 = 0;
                      if (v238[8])
                      {
LABEL_322:
                        v243 = ((*(unsigned int (**)(_QWORD))(**(_QWORD **)v238 + 16))(*(_QWORD *)v238) << 16)
                             - 0x10000;
                        goto LABEL_324;
                      }
                    }
                    v243 = 0;
LABEL_324:
                    v239 = 0;
                    LOWORD(v232) = v243 | v237;
                    v240 = v243 >> 16;
                  }
LABEL_325:
                  v244 = HIDWORD(v223);
                  v245 = HIDWORD(v239);
                  v246 = *(_QWORD *)(v89 + 80);
                  v247 = *(_QWORD *)(v89 + 88);
                  if (v246 >= v247)
                  {
                    v248 = *(_QWORD *)(v89 + 72);
                    v249 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v246 - v248) >> 4);
                    v250 = v249 + 1;
                    if (v249 + 1 > 0x555555555555555)
LABEL_653:
                      abort();
                    v251 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v247 - v248) >> 4);
                    if (2 * v251 > v250)
                      v250 = 2 * v251;
                    if (v251 >= 0x2AAAAAAAAAAAAAALL)
                      v252 = 0x555555555555555;
                    else
                      v252 = v250;
                    if (v252)
                    {
                      v253 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v89 + 96) + 16))(*(_QWORD *)(v89 + 96), 48 * v252, 8);
                      v254 = v253 + 48 * v249;
                      v255 = v253 + 48 * v252;
                      if (v253)
                      {
                        *(_BYTE *)v254 = v525;
                        *(_WORD *)(v254 + 1) = 257;
                        *(_DWORD *)(v254 + 3) = v544;
                        *(_BYTE *)(v254 + 7) = v545;
                        *(double *)(v254 + 8) = v211;
                        *(double *)(v254 + 16) = v227;
                        *(_DWORD *)(v254 + 24) = (unsigned __int16)v216 | (v522 << 16);
                        *(_DWORD *)(v254 + 28) = v244;
                        *(_DWORD *)(v254 + 32) = (unsigned __int16)v232 | ((unsigned __int16)v240 << 16);
                        *(_DWORD *)(v254 + 36) = v245;
                        *(_BYTE *)(v254 + 40) = v529;
                        *(_DWORD *)(v254 + 41) = *(_DWORD *)v543;
                        *(_DWORD *)(v254 + 44) = *(_DWORD *)&v543[3];
                      }
                    }
                    else
                    {
                      v255 = 0;
                      v254 = 48 * v249;
                    }
                    v257 = *(_QWORD *)(v89 + 72);
                    v256 = *(_QWORD *)(v89 + 80);
                    v193 = v510;
                    v187 = v514;
                    v258 = v254;
                    if (v256 != v257)
                    {
                      do
                      {
                        v86 = *(__n128 *)(v256 - 48);
                        v259 = *(_OWORD *)(v256 - 16);
                        *(_OWORD *)(v258 - 32) = *(_OWORD *)(v256 - 32);
                        *(_OWORD *)(v258 - 16) = v259;
                        *(__n128 *)(v258 - 48) = v86;
                        v258 -= 48;
                        v256 -= 48;
                      }
                      while (v256 != v257);
                      v256 = *(_QWORD *)(v89 + 72);
                    }
                    v195 = v254 + 48;
                    *(_QWORD *)(v89 + 72) = v258;
                    *(_QWORD *)(v89 + 80) = v254 + 48;
                    v260 = *(_QWORD *)(v89 + 88);
                    *(_QWORD *)(v89 + 88) = v255;
                    if (v256)
                      (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v89 + 96) + 40))(*(_QWORD *)(v89 + 96), v256, v260 - v256);
                  }
                  else
                  {
                    if (v246)
                    {
                      *(_BYTE *)v246 = v525;
                      *(_WORD *)(v246 + 1) = 257;
                      *(_DWORD *)(v246 + 3) = v544;
                      *(_BYTE *)(v246 + 7) = v545;
                      *(double *)(v246 + 8) = v211;
                      *(double *)(v246 + 16) = v227;
                      *(_DWORD *)(v246 + 24) = (unsigned __int16)v216 | (v522 << 16);
                      *(_DWORD *)(v246 + 28) = v244;
                      *(_DWORD *)(v246 + 32) = (unsigned __int16)v232 | ((unsigned __int16)v240 << 16);
                      *(_DWORD *)(v246 + 36) = v245;
                      *(_BYTE *)(v246 + 40) = v529;
                      *(_DWORD *)(v246 + 41) = *(_DWORD *)v543;
                      *(_DWORD *)(v246 + 44) = *(_DWORD *)&v543[3];
                    }
                    v195 = v246 + 48;
                    v193 = v510;
                    v187 = v514;
                  }
                  *(_QWORD *)(v89 + 80) = v195;
                  v192 = v546.n128_u64[0];
                  goto LABEL_248;
                }
LABEL_283:
                v221 = ((unint64_t)v214 >> 4) - 1;
                v222 = (_BYTE *)(v212 + 16 * v221);
                if (v215 <= v221)
                  v222 = 0;
                if (v222[8])
                {
LABEL_295:
                  v226 = ((*(unsigned int (**)(_QWORD))(**(_QWORD **)v222 + 16))(*(_QWORD *)v222) << 16)
                       - 0x10000;
LABEL_297:
                  v223 = 0;
                  LOWORD(v216) = v226 | v221;
                  v224 = v226 >> 16;
                  goto LABEL_298;
                }
              }
              v226 = 0;
              goto LABEL_297;
            }
LABEL_248:
            ++v194;
          }
          while (v194 < v192);
        }
        v188 = *(double *)(v190 + 8) + v188;
        v187 += 2;
        v186 = md::SignedDistanceFieldGenerator::_hypotCache + 129752;
        if (v187 != v505)
          continue;
        break;
      }
      if (*(_BYTE *)v89 != 3)
        goto LABEL_466;
LABEL_346:
      v262 = *a2;
      v530 = *(unsigned __int8 *)(*a2 + 290);
      v548 = 0;
      v86.n128_u64[1] = 0;
      v546 = 0u;
      v547 = 0u;
      *(_DWORD *)v549 = 2139095039;
      *(_WORD *)&v549[4] = 0;
      v549[6] = 0;
      if (*(_QWORD *)(v89 + 16) == *(_QWORD *)(v89 + 8))
        v263 = 0;
      else
        v263 = *(_BYTE **)(v89 + 8);
      if (v263[8])
      {
        v264 = 0;
        v265 = a2;
      }
      else
      {
        v264 = ((*(unsigned int (**)(_QWORD))(**(_QWORD **)v263 + 16))(*(_QWORD *)v263) << 16) - 0x10000;
        v265 = a2;
        v262 = *a2;
      }
      v266 = (std::__shared_weak_count *)v265[1];
      v267 = v262;
      if (v266)
      {
        v268 = (unint64_t *)&v266->__shared_owners_;
        do
          v269 = __ldxr(v268);
        while (__stxr(v269 + 1, v268));
        v267 = *a2;
      }
      v270 = *(_DWORD *)(v267 + 252);
      if (*(_QWORD *)(v89 + 16) == *(_QWORD *)(v89 + 8))
        v271 = 0;
      else
        v271 = *(unsigned __int8 **)(v89 + 8);
      v511 = v266;
      if (v262
        && v270 == *(_DWORD *)(v262 + 252)
        && v271
        && !(v264 >> 31)
        && (v272 = v264 >> 16,
            (*(uint64_t (**)(_QWORD))(**(_QWORD **)v271 + 16))(*(_QWORD *)v271) > v264 >> 16))
      {
        v273 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)v271 + 24))(*(_QWORD *)v271, (uint64_t)(int)v264 >> 16);
        v86 = *(__n128 *)v273;
        v274 = *(_OWORD *)(v273 + 16);
        v546 = *(__n128 *)v273;
        v547 = v274;
        v548 = *(_QWORD *)(v273 + 32);
        v275 = *(_DWORD *)(v273 + 43);
        *(_DWORD *)v549 = *(_DWORD *)(v273 + 40);
        *(_DWORD *)&v549[3] = v275;
        if (v270 == *(_DWORD *)(v262 + 252))
        {
          LODWORD(v276) = 0;
          v277 = 1;
          while (1)
          {
            v278 = v271[8];
            if (v271[8])
              v279 = v277;
            else
              v279 = -v277;
            v280 = v279 + v272;
            if (v280 < 0)
            {
              v281 = v280 + 1;
            }
            else
            {
              if ((*(uint64_t (**)(_QWORD))(**(_QWORD **)v271 + 16))(*(_QWORD *)v271) > (unint64_t)v280)
              {
                v485 = v276;
                v283 = (unsigned __int16)v276 | ((unsigned __int16)v280 << 16);
                v486 = *(_QWORD *)(v89 + 8);
                if ((*(_QWORD *)(v89 + 16) - v486) >> 4 <= (unint64_t)v485)
                  v271 = 0;
                else
                  v271 = (unsigned __int8 *)(v486 + 16 * v485);
                goto LABEL_381;
              }
              v281 = v280 - (*(uint64_t (**)(_QWORD))(**(_QWORD **)v271 + 16))(*(_QWORD *)v271);
              v278 = v271[8];
            }
            if (v278)
              v277 = v281;
            else
              v277 = -v281;
            v282 = *(_QWORD *)(v89 + 8);
            if (!v282)
              break;
            v276 = (v276 + 1);
            if ((*(_QWORD *)(v89 + 16) - v282) >> 4 <= v276)
              break;
            LODWORD(v272) = 0;
            v271 = (unsigned __int8 *)(v282 + 16 * v276);
            if (!*(_BYTE *)(v282 + 16 * v276 + 8))
              LODWORD(v272) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)v271 + 16))(*(_QWORD *)v271) - 1;
          }
        }
        v271 = 0;
        v283 = v264;
      }
      else
      {
        v283 = v264;
        LODWORD(v264) = -1;
      }
LABEL_381:
      v526 = 0;
      v519 = 0;
      v515 = 0;
      v284 = 0.0;
LABEL_385:
      v287 = v264;
      LODWORD(v264) = v283;
      v536 = HIWORD(v283);
      v288 = SHIWORD(v283);
      v523 = (__int16)v283;
LABEL_387:
      v289 = v284;
      v186 = &md::SignedDistanceFieldGenerator::_hypotCache[32438];
      while (2)
      {
        if (v262)
        {
          v290 = v271;
          v291 = v270 != *(_DWORD *)(v262 + 252) || v271 == 0;
          if (!v291
            && (v264 & 0x80000000) == 0
            && (*(uint64_t (**)(_QWORD))(**(_QWORD **)v271 + 16))(*(_QWORD *)v271) > v536)
          {
            v292 = (const md::LabelPoint *)(*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)v271 + 24))(*(_QWORD *)v271, v288);
            md::LabelPoint::vectorToPoint((md::LabelPoint *)&v546, v292, v530 != 0);
            v294 = v293;
            v296 = v295;
            v298 = v297;
            v299 = (md::LabelPoint *)(*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)v271 + 24))(*(_QWORD *)v271, v288);
            v284 = sqrt(v294 * v294 + v296 * v296 + v298 * v298) + v289;
            v300 = (double *)md::LabelPoint::mercatorPoint(v299);
            v301 = (double *)md::LabelPoint::mercatorPoint((md::LabelPoint *)&v546);
            v302 = vabdd_f64(*v300, *v301);
            v303 = vabdd_f64(v300[1], v301[1]);
            v304 = v303 < 1.0e-15;
            v305 = v302 < 1.0e-15;
            if (v302 >= 1.0e-15 || v303 >= 1.0e-15)
            {
              v306 = v303 < 1.0e-15 || v302 < 1.0e-15;
              if (v306)
              {
                if ((v526 & 1) == 0 || ((v519 ^ (v302 < 1.0e-15)) & 1) == 0 && ((v515 ^ (v303 < 1.0e-15)) & 1) == 0)
                {
                  v526 = 1;
                  goto LABEL_430;
                }
                v307 = *(_QWORD *)(v89 + 80);
                v318 = *(_QWORD *)(v89 + 88);
                if (v307 < v318)
                {
                  if (v307)
                  {
                    *(_WORD *)v307 = 259;
                    *(_BYTE *)(v307 + 2) = 1;
                    *(double *)(v307 + 8) = v289;
                    *(double *)(v307 + 16) = v289;
                    *(_DWORD *)(v307 + 24) = v287;
                    *(_DWORD *)(v307 + 28) = 0;
                    *(_DWORD *)(v307 + 32) = v287;
                    *(_DWORD *)(v307 + 36) = 0;
                    *(_BYTE *)(v307 + 40) = 1;
                  }
                  goto LABEL_409;
                }
                v328 = *(_QWORD *)(v89 + 72);
                v329 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v307 - v328) >> 4);
                v330 = v329 + 1;
                if (v329 + 1 > 0x555555555555555)
                  abort();
                v331 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v318 - v328) >> 4);
                if (2 * v331 > v330)
                  v330 = 2 * v331;
                if (v331 >= 0x2AAAAAAAAAAAAAALL)
                  v330 = 0x555555555555555;
                if (v330)
                {
                  v527 = v329;
                  v520 = v330;
                  v332 = (*(uint64_t (**)(_QWORD, unint64_t, uint64_t))(**(_QWORD **)(v89 + 96) + 16))(*(_QWORD *)(v89 + 96), 48 * v330, 8);
                  v333 = v332 + 48 * v527;
                  v330 = v332 + 48 * v520;
                  if (v332)
                  {
                    *(_WORD *)v333 = 259;
                    *(_BYTE *)(v333 + 2) = 1;
                    *(double *)(v333 + 8) = v289;
                    *(double *)(v333 + 16) = v289;
                    *(_DWORD *)(v333 + 24) = v287;
                    *(_DWORD *)(v333 + 28) = 0;
                    *(_DWORD *)(v333 + 32) = v287;
                    *(_DWORD *)(v333 + 36) = 0;
                    *(_BYTE *)(v333 + 40) = 1;
                  }
                }
                else
                {
                  v333 = 48 * v329;
                }
                v335 = *(_QWORD *)(v89 + 72);
                v334 = *(_QWORD *)(v89 + 80);
                v336 = v333;
                if (v334 != v335)
                {
                  do
                  {
                    v337 = *(_OWORD *)(v334 - 48);
                    v338 = *(_OWORD *)(v334 - 16);
                    *(_OWORD *)(v336 - 32) = *(_OWORD *)(v334 - 32);
                    *(_OWORD *)(v336 - 16) = v338;
                    *(_OWORD *)(v336 - 48) = v337;
                    v336 -= 48;
                    v334 -= 48;
                  }
                  while (v334 != v335);
                  v334 = *(_QWORD *)(v89 + 72);
                }
                v309 = v333 + 48;
                *(_QWORD *)(v89 + 72) = v336;
                *(_QWORD *)(v89 + 80) = v333 + 48;
                v339 = *(_QWORD *)(v89 + 88);
                *(_QWORD *)(v89 + 88) = v330;
                if (v334)
                  (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v89 + 96) + 40))(*(_QWORD *)(v89 + 96), v334, v339 - v334);
              }
              else
              {
                v307 = *(_QWORD *)(v89 + 80);
                v308 = *(_QWORD *)(v89 + 88);
                if (v307 >= v308)
                {
                  v310 = *(_QWORD *)(v89 + 72);
                  v311 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v307 - v310) >> 4);
                  v312 = v311 + 1;
                  if (v311 + 1 > 0x555555555555555)
                    abort();
                  v313 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v308 - v310) >> 4);
                  if (2 * v313 > v312)
                    v312 = 2 * v313;
                  if (v313 >= 0x2AAAAAAAAAAAAAALL)
                    v314 = 0x555555555555555;
                  else
                    v314 = v312;
                  if (v314)
                  {
                    v315 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v89 + 96) + 16))(*(_QWORD *)(v89 + 96), 48 * v314, 8);
                    v316 = v315 + 48 * v311;
                    v317 = v315 + 48 * v314;
                    if (v315)
                    {
                      *(_WORD *)v316 = 263;
                      *(_BYTE *)(v316 + 2) = 1;
                      *(double *)(v316 + 8) = v289;
                      *(double *)(v316 + 16) = v284;
                      *(_DWORD *)(v316 + 24) = v287;
                      *(_DWORD *)(v316 + 28) = 0;
                      *(_DWORD *)(v316 + 32) = v264;
                      *(_DWORD *)(v316 + 36) = 0;
                      *(_BYTE *)(v316 + 40) = 1;
                    }
                  }
                  else
                  {
                    v317 = 0;
                    v316 = 48 * v311;
                  }
                  v320 = *(_QWORD *)(v89 + 72);
                  v319 = *(_QWORD *)(v89 + 80);
                  v321 = v316;
                  if (v319 != v320)
                  {
                    do
                    {
                      v322 = *(_OWORD *)(v319 - 48);
                      v323 = *(_OWORD *)(v319 - 16);
                      *(_OWORD *)(v321 - 32) = *(_OWORD *)(v319 - 32);
                      *(_OWORD *)(v321 - 16) = v323;
                      *(_OWORD *)(v321 - 48) = v322;
                      v321 -= 48;
                      v319 -= 48;
                    }
                    while (v319 != v320);
                    v319 = *(_QWORD *)(v89 + 72);
                  }
                  v309 = v316 + 48;
                  *(_QWORD *)(v89 + 72) = v321;
                  *(_QWORD *)(v89 + 80) = v316 + 48;
                  v324 = *(_QWORD *)(v89 + 88);
                  *(_QWORD *)(v89 + 88) = v317;
                  if (v319)
                    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v89 + 96) + 40))(*(_QWORD *)(v89 + 96), v319, v324 - v319);
                  v305 = 0;
                  v304 = 0;
                }
                else
                {
                  if (v307)
                  {
                    *(_WORD *)v307 = 263;
                    *(_BYTE *)(v307 + 2) = 1;
                    *(double *)(v307 + 8) = v289;
                    *(double *)(v307 + 16) = v284;
                    *(_DWORD *)(v307 + 24) = v287;
                    *(_DWORD *)(v307 + 28) = 0;
                    *(_DWORD *)(v307 + 32) = v264;
                    *(_DWORD *)(v307 + 36) = 0;
                    *(_BYTE *)(v307 + 40) = 1;
                  }
                  v305 = 0;
                  v304 = 0;
LABEL_409:
                  v309 = v307 + 48;
                }
              }
              *(_QWORD *)(v89 + 80) = v309;
              v526 = v306;
LABEL_430:
              v519 = v305;
              v515 = v304;
            }
            v325 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)v290 + 24))(*(_QWORD *)v290, v288);
            v186 = md::SignedDistanceFieldGenerator::_hypotCache + 129752;
            v271 = 0;
            v86 = *(__n128 *)v325;
            v326 = *(_OWORD *)(v325 + 16);
            v546 = *(__n128 *)v325;
            v547 = v326;
            v548 = *(_QWORD *)(v325 + 32);
            v327 = *(_DWORD *)(v325 + 43);
            *(_DWORD *)v549 = *(_DWORD *)(v325 + 40);
            *(_DWORD *)&v549[3] = v327;
            v287 = v264;
            v289 = v284;
            if (v270 == *(_DWORD *)(v262 + 252))
            {
              v340 = 1;
              v341 = v536;
              LODWORD(v342) = v523;
              while (1)
              {
                v343 = v290[8];
                if (v290[8])
                  v344 = v340;
                else
                  v344 = -v340;
                v345 = v344 + v341;
                if (v344 + v341 < 0)
                {
                  v346 = v345 + 1;
                }
                else
                {
                  if ((*(uint64_t (**)(_QWORD))(**(_QWORD **)v290 + 16))(*(_QWORD *)v290) > (unint64_t)v345)
                  {
                    v285 = v342;
                    v283 = (unsigned __int16)v342 | ((unsigned __int16)v345 << 16);
                    v286 = *(_QWORD *)(v89 + 8);
                    if ((*(_QWORD *)(v89 + 16) - v286) >> 4 <= (unint64_t)v285)
                      v271 = 0;
                    else
                      v271 = (unsigned __int8 *)(v286 + 16 * v285);
                    goto LABEL_385;
                  }
                  v346 = v345 - (*(uint64_t (**)(_QWORD))(**(_QWORD **)v290 + 16))(*(_QWORD *)v290);
                  v343 = v290[8];
                }
                if (v343)
                  v340 = v346;
                else
                  v340 = -v346;
                v342 = (v342 + 1);
                v347 = *(_QWORD *)(v89 + 8);
                v290 = (unsigned __int8 *)(v347 + 16 * v342);
                if (!v347 || (*(_QWORD *)(v89 + 16) - v347) >> 4 <= v342)
                {
                  v271 = 0;
                  v287 = v264;
                  goto LABEL_387;
                }
                v341 = 0;
                if (!*(_BYTE *)(v347 + 16 * v342 + 8))
                  v341 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)v290 + 16))(*(_QWORD *)v290) - 1;
              }
            }
            continue;
          }
        }
        break;
      }
      if (v511)
      {
        v348 = (unint64_t *)&v511->__shared_owners_;
        do
          v349 = __ldaxr(v348);
        while (__stlxr(v349 - 1, v348));
        if (!v349)
        {
          ((void (*)(std::__shared_weak_count *))v511->__on_zero_shared)(v511);
          std::__shared_weak_count::__release_weak(v511);
        }
      }
LABEL_466:
      if (*(_QWORD *)(v89 + 40) != *(_QWORD *)(v89 + 48))
      {
        {
          v487 = operator new();
          *(_QWORD *)(v487 + 16) = 0x5ED09DD50000000FLL;
          *(_QWORD *)(v487 + 24) = "VectorKitLabels";
          *(_OWORD *)(v487 + 32) = xmmword_19FFB2E80;
          *(_QWORD *)v487 = &off_1E42B5668;
          *(_QWORD *)(v487 + 8) = "VectorKitLabels";
          *(_OWORD *)(v487 + 72) = 0u;
          *(_OWORD *)(v487 + 88) = 0u;
          *(_OWORD *)(v487 + 104) = 0u;
          *(_OWORD *)(v487 + 120) = 0u;
          *(_OWORD *)(v487 + 136) = 0u;
          *(_OWORD *)(v487 + 152) = 0u;
          *(_OWORD *)(v487 + 168) = 0u;
          *(_OWORD *)(v487 + 184) = 0u;
          *(_OWORD *)(v487 + 200) = 0u;
          *(_OWORD *)(v487 + 216) = 0u;
          *(_OWORD *)(v487 + 232) = 0u;
          *(_QWORD *)(v487 + 248) = 0;
          *(_OWORD *)(v487 + 56) = 0u;
          v488 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v487 + 56), 0);
          if ((_DWORD)v488)
            geo::read_write_lock::logFailure(v488, (uint64_t)"initialization", v489);
          v490 = malloc_create_zone(0, 0);
          *(_QWORD *)(v487 + 48) = v490;
          malloc_set_zone_name(v490, "VectorKitLabels");
          *(_QWORD *)(v487 + 256) = os_log_create("com.apple.VectorKit", "Memory");
          v186 = &md::SignedDistanceFieldGenerator::_hypotCache[32438];
          mdm::Allocator::instance(void)::alloc = v487;
        }
        v351 = *(uint64_t **)(v89 + 40);
        v531 = *(uint64_t **)(v89 + 48);
        if (v351 != v531)
          break;
      }
LABEL_557:
      v78 = (double *)v508;
      if (*(_BYTE *)v89 == 2)
      {
        v422 = *(_BYTE **)(v89 + 8);
        v503 = *(_BYTE **)(v89 + 16);
        if (v422 != v503)
        {
          v86.n128_u64[0] = 0;
          v507 = v86;
          while (1)
          {
            v533 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v422 + 16) + 48);
            v506 = *(double *)(*(_QWORD *)v422 + 8);
            v528 = (_DWORD *)(*(_QWORD *)(v533 + 48) + 8 * *(unsigned __int16 *)(*(_QWORD *)v422 + 44));
            if (v528[1])
              break;
LABEL_560:
            v86.n128_u64[1] = v507.n128_u64[1];
            v86.n128_f64[0] = v506 + v507.n128_f64[0];
            v507 = v86;
            v422 += 16;
            if (v422 == v503)
              goto LABEL_639;
          }
          v423 = 0;
          v424 = vdupq_lane_s64(*(_QWORD *)(*(_QWORD *)v422 + 8), 0);
          v425 = (__n128)vdupq_lane_s64(v507.n128_i64[0], 0);
          v516 = (float64x2_t)v425;
          v521 = (float64x2_t)v424;
          v512 = v422;
          while (2)
          {
            v425.n128_u32[0] = 0;
            v424.i8[0] = v422[8];
            v427 = vdup_lane_s8(vceq_s8(*(int8x8_t *)v424.i8, (int8x8_t)v425.n128_u64[0]), 0);
            v428 = *(float32x2_t *)(*(_QWORD *)(v533 + 80) + 8 * (*v528 + v423));
            __asm { FMOV            V2.2S, #1.0 }
            v425 = (__n128)vcvtq_f64_f32((float32x2_t)vbsl_s8(v427, (int8x8_t)vrev64_s32((int32x2_t)vsub_f32(_D2, v428)), (int8x8_t)v428));
            v424.i64[0] = *(_QWORD *)&v521.f64[0];
            v433 = vmlaq_f64(v516, (float64x2_t)v425, v521);
            v538 = v433;
            if (v433.f64[0] <= 0.0)
            {
              v445 = 0;
              LOWORD(v446) = 0;
              LOWORD(v438) = 0;
              if (*(_QWORD *)(v89 + 16) == *(_QWORD *)(v89 + 8))
                v447 = 0;
              else
                v447 = *(_BYTE **)(v89 + 8);
              if (!v447[8])
              {
                v445 = 0;
                LOWORD(v438) = 0;
                LOWORD(v446) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)v447 + 16))(*(_QWORD *)v447) - 1;
                v433 = v538;
              }
              goto LABEL_592;
            }
            v434 = *(_QWORD *)(v89 + 8);
            v435 = *(_QWORD *)(v89 + 16);
            v436 = v435 - v434;
            if (*(double *)(v89 + 104) <= v433.f64[0])
            {
              v443 = ((unint64_t)v436 >> 4) - 1;
              v444 = (_BYTE *)(v434 + 16 * v443);
              if (v443 >= (unint64_t)(v436 >> 4))
                v444 = 0;
              if (v444[8])
                goto LABEL_589;
            }
            else
            {
              v437 = v436 >> 4;
              if (v435 != v434)
              {
                v438 = 0;
                if (v437 <= 1)
                  v439 = 1;
                else
                  v439 = v436 >> 4;
                v440 = 0.0;
                v441 = *(_QWORD *)(v89 + 8);
                while (1)
                {
                  v442 = v437 <= v438 ? 0 : v441;
                  *(double *)v424.i64 = *(double *)(*(_QWORD *)v442 + 8) + v440;
                  if (*(double *)v424.i64 >= v433.f64[0])
                    break;
                  ++v438;
                  v441 += 16;
                  v440 = *(double *)(*(_QWORD *)v442 + 8) + v440;
                  if (v439 == v438)
                    goto LABEL_577;
                }
                v481 = md::LabelLineSegment::coordinateAtOffset(*(md::LabelLineSegment **)v442, *(unsigned __int8 *)(v442 + 8), v433.f64[0] - v440);
                LOWORD(v446) = v481;
                v445 = v481 & 0xFFFFFFFF00000000;
                v433 = v538;
LABEL_592:
                v425.n128_u64[0] = *(_QWORD *)&v433.f64[1];
                if (v433.f64[1] <= 0.0)
                {
                  v459 = 0;
                  LOWORD(v460) = 0;
                  LOWORD(v453) = 0;
                  if (*(_QWORD *)(v89 + 16) == *(_QWORD *)(v89 + 8))
                    v461 = 0;
                  else
                    v461 = *(_BYTE **)(v89 + 8);
                  if (!v461[8])
                  {
                    v462 = (*(uint64_t (**)(_QWORD, __n128))(**(_QWORD **)v461 + 16))(*(_QWORD *)v461, v425);
                    v459 = 0;
                    LOWORD(v453) = 0;
                    LOWORD(v460) = v462 - 1;
                    v433 = v538;
                  }
                }
                else
                {
                  v424.i64[0] = *(_QWORD *)(v89 + 104);
                  v449 = *(_QWORD *)(v89 + 8);
                  v450 = *(_QWORD *)(v89 + 16);
                  v451 = v450 - v449;
                  if (*(double *)v424.i64 <= v433.f64[1])
                  {
                    v457 = ((unint64_t)v451 >> 4) - 1;
                    v458 = (_BYTE *)(v449 + 16 * v457);
                    if (v457 >= (unint64_t)(v451 >> 4))
                      v458 = 0;
                    if (v458[8])
                      goto LABEL_616;
                  }
                  else
                  {
                    v452 = v451 >> 4;
                    if (v450 != v449)
                    {
                      v453 = 0;
                      if (v452 <= 1)
                        v454 = 1;
                      else
                        v454 = v451 >> 4;
                      v424.i64[0] = 0;
                      v455 = *(_QWORD *)(v89 + 8);
                      while (1)
                      {
                        v456 = v452 <= v453 ? 0 : v455;
                        if (*(double *)(*(_QWORD *)v456 + 8) + *(double *)v424.i64 >= v433.f64[1])
                          break;
                        ++v453;
                        v455 += 16;
                        *(double *)v424.i64 = *(double *)(*(_QWORD *)v456 + 8) + *(double *)v424.i64;
                        if (v454 == v453)
                          goto LABEL_604;
                      }
                      v482 = md::LabelLineSegment::coordinateAtOffset(*(md::LabelLineSegment **)v456, *(unsigned __int8 *)(v456 + 8), v433.f64[1] - *(double *)v424.i64);
                      LOWORD(v460) = v482;
                      v459 = v482 & 0xFFFFFFFF00000000;
                      v433 = v538;
                      goto LABEL_619;
                    }
LABEL_604:
                    v457 = ((unint64_t)v451 >> 4) - 1;
                    v458 = (_BYTE *)(v449 + 16 * v457);
                    if (v452 <= v457)
                      v458 = 0;
                    if (v458[8])
                    {
LABEL_616:
                      v463 = ((*(unsigned int (**)(_QWORD, __n128))(**(_QWORD **)v458 + 16))(*(_QWORD *)v458, v425) << 16)- 0x10000;
                      v433 = v538;
                      goto LABEL_618;
                    }
                  }
                  v463 = 0;
LABEL_618:
                  v459 = 0;
                  LOWORD(v453) = v463 | v457;
                  v460 = v463 >> 16;
                }
LABEL_619:
                v464 = HIDWORD(v445);
                v465 = HIDWORD(v459);
                v466 = *(_QWORD *)(v89 + 80);
                v467 = *(_QWORD *)(v89 + 88);
                if (v466 >= v467)
                {
                  v468 = *(_QWORD *)(v89 + 72);
                  v469 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v466 - v468) >> 4);
                  v470 = v469 + 1;
                  if (v469 + 1 > 0x555555555555555)
                    goto LABEL_653;
                  v471 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v467 - v468) >> 4);
                  if (2 * v471 > v470)
                    v470 = 2 * v471;
                  if (v471 >= 0x2AAAAAAAAAAAAAALL)
                    v472 = 0x555555555555555;
                  else
                    v472 = v470;
                  if (v472)
                  {
                    v473 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, __n128))(**(_QWORD **)(v89 + 96) + 16))(*(_QWORD *)(v89 + 96), 48 * v472, 8, v425);
                    v474 = v473 + 48 * v469;
                    v475 = v473 + 48 * v472;
                    if (v473)
                    {
                      *(_WORD *)v474 = 263;
                      *(_BYTE *)(v474 + 2) = 1;
                      v425.n128_u32[1] = HIDWORD(v538.f64[0]);
                      *(float64x2_t *)(v474 + 8) = v538;
                      *(_DWORD *)(v474 + 24) = (unsigned __int16)v438 | ((unsigned __int16)v446 << 16);
                      *(_DWORD *)(v474 + 28) = v464;
                      *(_DWORD *)(v474 + 32) = (unsigned __int16)v453 | ((unsigned __int16)v460 << 16);
                      *(_DWORD *)(v474 + 36) = v465;
                      *(_BYTE *)(v474 + 40) = 1;
                    }
                  }
                  else
                  {
                    v475 = 0;
                    v474 = 48 * v469;
                  }
                  v477 = *(_QWORD *)(v89 + 72);
                  v476 = *(_QWORD *)(v89 + 80);
                  v78 = (double *)v508;
                  v422 = v512;
                  v478 = v474;
                  if (v476 != v477)
                  {
                    do
                    {
                      v425 = *(__n128 *)(v476 - 48);
                      v424 = *(int64x2_t *)(v476 - 32);
                      v479 = *(_OWORD *)(v476 - 16);
                      *(int64x2_t *)(v478 - 32) = v424;
                      *(_OWORD *)(v478 - 16) = v479;
                      *(__n128 *)(v478 - 48) = v425;
                      v478 -= 48;
                      v476 -= 48;
                    }
                    while (v476 != v477);
                    v476 = *(_QWORD *)(v89 + 72);
                  }
                  v426 = v474 + 48;
                  *(_QWORD *)(v89 + 72) = v478;
                  *(_QWORD *)(v89 + 80) = v474 + 48;
                  v480 = *(_QWORD *)(v89 + 88);
                  *(_QWORD *)(v89 + 88) = v475;
                  if (v476)
                    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v89 + 96) + 40))(*(_QWORD *)(v89 + 96), v476, v480 - v476);
                }
                else
                {
                  if (v466)
                  {
                    *(_WORD *)v466 = 263;
                    *(_BYTE *)(v466 + 2) = 1;
                    *(float64x2_t *)(v466 + 8) = v433;
                    *(_DWORD *)(v466 + 24) = (unsigned __int16)v438 | ((unsigned __int16)v446 << 16);
                    *(_DWORD *)(v466 + 28) = v464;
                    *(_DWORD *)(v466 + 32) = (unsigned __int16)v453 | ((unsigned __int16)v460 << 16);
                    *(_DWORD *)(v466 + 36) = v465;
                    *(_BYTE *)(v466 + 40) = 1;
                  }
                  v426 = v466 + 48;
                  v78 = (double *)v508;
                  v422 = v512;
                }
                *(_QWORD *)(v89 + 80) = v426;
                if (++v423 >= v528[1])
                  goto LABEL_560;
                continue;
              }
LABEL_577:
              v443 = ((unint64_t)v436 >> 4) - 1;
              v444 = (_BYTE *)(v434 + 16 * v443);
              if (v437 <= v443)
                v444 = 0;
              if (v444[8])
              {
LABEL_589:
                v448 = ((*(unsigned int (**)(_QWORD))(**(_QWORD **)v444 + 16))(*(_QWORD *)v444) << 16)
                     - 0x10000;
                v433 = v538;
LABEL_591:
                v445 = 0;
                LOWORD(v438) = v448 | v443;
                v446 = v448 >> 16;
                goto LABEL_592;
              }
            }
            break;
          }
          v448 = 0;
          goto LABEL_591;
        }
      }
LABEL_639:
      if (v501)
      {
        v483 = (unint64_t *)&v501->__shared_owners_;
        do
          v484 = __ldaxr(v483);
        while (__stlxr(v484 - 1, v483));
        if (!v484)
        {
          ((void (*)(std::__shared_weak_count *))v501->__on_zero_shared)(v501);
          std::__shared_weak_count::__release_weak(v501);
        }
      }
      v87 = v500 + 1;
      v86.n128_f64[0] = v78[1] + *(double *)(*v500 + 104);
      v78[1] = v86.n128_f64[0];
      if (v500 + 1 == v499)
        return;
    }
    v352 = 0;
    v353 = 0;
    v354 = 0;
    v355 = *((_QWORD *)v186 + 299);
    while (1)
    {
      v356 = *v351;
      v357 = (v353 - v354) >> 3;
      v358 = v357 + *(unsigned __int16 *)(*(_QWORD *)(*v351 + 16) + 40);
      v537 = v351;
      if (v358 <= (uint64_t)(v352 - (_QWORD)v354) >> 3)
      {
        v365 = v352;
        v360 = v353;
        goto LABEL_484;
      }
      if (v358 >> 61)
        abort();
      v359 = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)v355 + 16))(v355, 8 * v358, 8);
      v360 = (char *)(v359 + 8 * v357);
      if (v353 == v354)
      {
        v354 = (char *)(v359 + 8 * v357);
        v365 = v359 + 8 * v358;
        if (!v353)
          goto LABEL_484;
LABEL_483:
        (*(void (**)(uint64_t, char *, unint64_t))(*(_QWORD *)v355 + 40))(v355, v353, v352 - (_QWORD)v353);
        goto LABEL_484;
      }
      v361 = v353 - v354 - 8;
      if (v361 < 0x58 || (unint64_t)&v354[-v359] < 0x20)
        break;
      v389 = (v361 >> 3) + 1;
      v362 = &v353[-8 * (v389 & 0x3FFFFFFFFFFFFFFCLL)];
      v390 = (_OWORD *)(v359 + 8 * v357 - 16);
      v391 = v353 - 16;
      v392 = v389 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v393 = *(_OWORD *)v391;
        *(v390 - 1) = *((_OWORD *)v391 - 1);
        *v390 = v393;
        v390 -= 2;
        v391 -= 32;
        v392 -= 4;
      }
      while (v392);
      v363 = &v360[-8 * (v389 & 0x3FFFFFFFFFFFFFFCLL)];
      if (v389 != (v389 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_478;
LABEL_479:
      v353 = v354;
      v354 = v363;
      v365 = v359 + 8 * v358;
      if (v353)
        goto LABEL_483;
LABEL_484:
      v366 = *(std::__shared_weak_count **)(v356 + 8);
      if (v366)
      {
        v366 = std::__shared_weak_count::lock(v366);
        v367 = v366;
        if (v366)
          v366 = *(std::__shared_weak_count **)v356;
      }
      else
      {
        v367 = 0;
      }
      v368 = geo::codec::VectorTile::labelLineAttributes((geo::codec::VectorTile *)v366);
      v369 = *(_DWORD *)(*(_QWORD *)(v356 + 16) + 36);
      if (v367)
      {
        v370 = (unint64_t *)&v367->__shared_owners_;
        do
          v371 = __ldaxr(v370);
        while (__stlxr(v371 - 1, v370));
        if (!v371)
        {
          ((void (*)(std::__shared_weak_count *))v367->__on_zero_shared)(v367);
          std::__shared_weak_count::__release_weak(v367);
        }
      }
      if (*(_WORD *)(*(_QWORD *)(v356 + 16) + 40))
      {
        v372 = v365;
        v373 = 0;
        v374 = v368 + 24 * v369;
        v352 = v372;
        while (1)
        {
          if ((unint64_t)v360 < v352)
          {
            if (v360)
              *(_QWORD *)v360 = v374;
            v353 = v360 + 8;
            goto LABEL_496;
          }
          v375 = (v360 - v354) >> 3;
          v376 = v375 + 1;
          if ((unint64_t)(v375 + 1) >> 61)
            abort();
          if ((uint64_t)(v352 - (_QWORD)v354) >> 2 > v376)
            v376 = (uint64_t)(v352 - (_QWORD)v354) >> 2;
          v377 = v352 - (unint64_t)v354 >= 0x7FFFFFFFFFFFFFF8 ? 0x1FFFFFFFFFFFFFFFLL : v376;
          if (v377)
          {
            v378 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v355 + 16))(v355, 8 * v377, 8);
            v379 = (char *)(v378 + 8 * v375);
            v377 = v378 + 8 * v377;
            if (v378)
              *(_QWORD *)v379 = v374;
            v380 = (char *)(v360 - v354);
            if (v360 == v354)
            {
LABEL_517:
              v354 = v379;
              v353 = v379 + 8;
              if (!v360)
                goto LABEL_523;
LABEL_522:
              (*(void (**)(uint64_t, char *, unint64_t))(*(_QWORD *)v355 + 40))(v355, v360, v352 - (_QWORD)v360);
              goto LABEL_523;
            }
          }
          else
          {
            v379 = (char *)(8 * v375);
            v380 = (char *)(v360 - v354);
            if (v360 == v354)
              goto LABEL_517;
          }
          v381 = (unint64_t)(v380 - 8);
          if (v381 < 0x38 || (unint64_t)(v360 - v379) < 0x20)
            break;
          v382 = (v381 >> 3) + 1;
          v383 = &v360[-8 * (v382 & 0x3FFFFFFFFFFFFFFCLL)];
          v384 = (__n128 *)(v379 - 16);
          v385 = (__n128 *)(v360 - 16);
          v386 = v382 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v86 = *v385;
            v384[-1] = v385[-1];
            *v384 = v86;
            v384 -= 2;
            v385 -= 2;
            v386 -= 4;
          }
          while (v386);
          v387 = &v379[-8 * (v382 & 0x3FFFFFFFFFFFFFFCLL)];
          if (v382 != (v382 & 0x3FFFFFFFFFFFFFFCLL))
            goto LABEL_520;
LABEL_521:
          v360 = v354;
          v354 = v387;
          v353 = v379 + 8;
          if (v360)
            goto LABEL_522;
LABEL_523:
          v352 = v377;
LABEL_496:
          ++v373;
          v374 += 24;
          v360 = v353;
          if (v373 >= *(unsigned __int16 *)(*(_QWORD *)(v356 + 16) + 40))
            goto LABEL_471;
        }
        v383 = v360;
        v387 = v379;
        do
        {
LABEL_520:
          v388 = *((_QWORD *)v383 - 1);
          v383 -= 8;
          *((_QWORD *)v387 - 1) = v388;
          v387 -= 8;
        }
        while (v383 != v354);
        goto LABEL_521;
      }
      v352 = v365;
      v353 = v360;
LABEL_471:
      v351 = v537 + 1;
      if (v537 + 1 == v531)
      {
        if (v354 != v353)
        {
          v394 = (double *)(v89 + 104);
          v395 = v354;
          do
          {
            v397 = *(_QWORD *)v395;
            v398 = *(double *)(v89 + 120);
            v399 = *(double *)(v89 + 128) - v398;
            v400 = *(double *)(*(_QWORD *)v395 + 8) - v398;
            if (v399 <= 0.0)
            {
              v403 = v394;
              if (!*(_BYTE *)(v89 + 2))
                v403 = *(double **)(**(_QWORD **)(v89 + 40) + 16);
              v401 = *v403 * v400;
              v402 = *v403 * (*(double *)(v397 + 16) - v398);
            }
            else
            {
              v401 = *v394 * v400 / v399;
              v402 = *v394 * (*(double *)(v397 + 16) - v398) / v399;
            }
            v404 = md::LabelLine::coordinateAtOffset((md::LabelLine *)v89, v401);
            v405 = md::LabelLine::coordinateAtOffset((md::LabelLine *)v89, v402);
            v406 = v405;
            v407 = *(_QWORD *)(v89 + 80);
            v408 = *(_QWORD *)(v89 + 88);
            if (v407 >= v408)
            {
              v409 = *(_QWORD *)(v89 + 72);
              v410 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v407 - v409) >> 4);
              v411 = v410 + 1;
              if (v410 + 1 > 0x555555555555555)
                abort();
              v412 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v408 - v409) >> 4);
              if (2 * v412 > v411)
                v411 = 2 * v412;
              if (v412 >= 0x2AAAAAAAAAAAAAALL)
                v413 = 0x555555555555555;
              else
                v413 = v411;
              if (v413)
              {
                v524 = v405 >> 16;
                v532 = HIDWORD(v405);
                v414 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v89 + 96) + 16))(*(_QWORD *)(v89 + 96), 48 * v413, 8);
                v415 = v414 + 48 * v410;
                v416 = v414 + 48 * v413;
                if (v414)
                {
                  *(_WORD *)v415 = 263;
                  *(_BYTE *)(v415 + 2) = 1;
                  *(double *)(v415 + 8) = v401;
                  *(double *)(v415 + 16) = v402;
                  *(_DWORD *)(v415 + 24) = (unsigned __int16)v404 | (WORD1(v404) << 16);
                  *(_DWORD *)(v415 + 28) = HIDWORD(v404);
                  *(_DWORD *)(v415 + 32) = v406 | ((unsigned __int16)v524 << 16);
                  *(_DWORD *)(v415 + 36) = v532;
                  *(_BYTE *)(v415 + 40) = 1;
                }
              }
              else
              {
                v416 = 0;
                v415 = 48 * v410;
              }
              v394 = (double *)(v89 + 104);
              v418 = *(_QWORD *)(v89 + 72);
              v417 = *(_QWORD *)(v89 + 80);
              v419 = v415;
              if (v417 != v418)
              {
                do
                {
                  v86 = *(__n128 *)(v417 - 48);
                  v420 = *(_OWORD *)(v417 - 16);
                  *(_OWORD *)(v419 - 32) = *(_OWORD *)(v417 - 32);
                  *(_OWORD *)(v419 - 16) = v420;
                  *(__n128 *)(v419 - 48) = v86;
                  v419 -= 48;
                  v417 -= 48;
                }
                while (v417 != v418);
                v417 = *(_QWORD *)(v89 + 72);
              }
              v396 = v415 + 48;
              *(_QWORD *)(v89 + 72) = v419;
              *(_QWORD *)(v89 + 80) = v415 + 48;
              v421 = *(_QWORD *)(v89 + 88);
              *(_QWORD *)(v89 + 88) = v416;
              if (v417)
                (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v89 + 96) + 40))(*(_QWORD *)(v89 + 96), v417, v421 - v417);
            }
            else
            {
              if (v407)
              {
                *(_WORD *)v407 = 263;
                *(_BYTE *)(v407 + 2) = 1;
                *(double *)(v407 + 8) = v401;
                *(double *)(v407 + 16) = v402;
                *(_DWORD *)(v407 + 24) = (unsigned __int16)v404 | (WORD1(v404) << 16);
                *(_DWORD *)(v407 + 28) = HIDWORD(v404);
                *(_DWORD *)(v407 + 32) = (unsigned __int16)v405 | (WORD1(v405) << 16);
                *(_DWORD *)(v407 + 36) = HIDWORD(v405);
                *(_BYTE *)(v407 + 40) = 1;
              }
              v396 = v407 + 48;
            }
            *(_QWORD *)(v89 + 80) = v396;
            v395 += 8;
          }
          while (v395 != v353);
        }
        if (v354)
          (*(void (**)(uint64_t, char *, unint64_t))(*(_QWORD *)v355 + 40))(v355, v354, v352 - (_QWORD)v354);
        goto LABEL_557;
      }
    }
    v362 = v353;
    v363 = (char *)(v359 + 8 * v357);
    do
    {
LABEL_478:
      v364 = *((_QWORD *)v362 - 1);
      v362 -= 8;
      *((_QWORD *)v363 - 1) = v364;
      v363 -= 8;
    }
    while (v362 != v354);
    goto LABEL_479;
  }
}

void sub_19F0F6CA0(_Unwind_Exception *a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;

  (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v4 - 184) + 40))(*(_QWORD *)(v4 - 184), v3, 136 * v1);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v8 = *(_QWORD *)(v4 - 208);
  if (v8)
  {
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v4 - 184) + 40))(*(_QWORD *)(v4 - 184), v8, *(_QWORD *)(v4 - 192) - v8);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

double md::LabelLineSegment::coincidentPointTolerance(md::LabelLineSegment *this)
{
  unsigned int v2;
  BOOL v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  geo::codec::VectorTile *v7;
  char *v8;
  char v9;
  char *v10;
  char v11;
  int v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  double result;

  v2 = *((unsigned __int8 *)this + 32);
  v3 = v2 > 3 || v2 == 1;
  if (v3 || (v4 = *((_QWORD *)this + 2)) == 0)
  {
    v6 = 0;
    v7 = 0;
  }
  else
  {
    v5 = *(std::__shared_weak_count **)(v4 + 8);
    if (v5)
    {
      v6 = std::__shared_weak_count::lock(v5);
      if (v6)
      {
        v7 = *(geo::codec::VectorTile **)v4;
        goto LABEL_12;
      }
    }
    else
    {
      v6 = 0;
    }
    v7 = 0;
  }
LABEL_12:
  if (*((_BYTE *)this + 32) == 2)
  {
    if (v7)
    {
      v10 = (char *)geo::codec::VectorTile::transitVertices(v7);
      goto LABEL_20;
    }
LABEL_24:
    v9 = 12;
    goto LABEL_25;
  }
  if (*((_BYTE *)this + 32) || !v7)
    goto LABEL_24;
  v8 = (char *)geo::codec::VectorTile::lineVertices(v7);
  if (v8)
  {
    v9 = *v8;
    if (*v8)
      goto LABEL_25;
  }
  v10 = (char *)geo::codec::VectorTile::curveLineVertices(v7);
LABEL_20:
  v9 = 12;
  if (v10)
  {
    if (*v10)
      v9 = *v10;
    else
      v9 = 12;
  }
LABEL_25:
  v11 = *((_BYTE *)this + 35);
  v12 = *((unsigned __int8 *)this + 33);
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  result = 1.0 / (double)(unint64_t)(1 << (v11 + v9));
  if (v12)
    return result * 40075017.0;
  return result;
}

void sub_19F0F704C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t md::StringWithLocaleImp<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>>::operator==(unsigned __int8 *a1, unsigned __int8 *a2)
{
  uint64_t v2;
  size_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  unsigned __int8 *v9;
  unsigned __int8 *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  const void **v15;
  unsigned __int8 *v16;
  unsigned __int8 *v17;
  unsigned __int8 *v18;
  unsigned __int8 *v19;
  uint64_t v20;
  int v21;
  int v22;
  int v23;
  int v24;
  BOOL v26;
  uint64_t result;

  v2 = a2[23];
  v3 = *((_QWORD *)a2 + 1);
  if ((v2 & 0x80u) == 0)
    v4 = a2[23];
  else
    v4 = *((_QWORD *)a2 + 1);
  v5 = a1[23];
  v6 = (char)v5;
  if ((v5 & 0x80u) != 0)
    v5 = *((_QWORD *)a1 + 1);
  if (v4 != v5)
    return 0;
  if (v6 >= 0)
    v9 = a1;
  else
    v9 = *(unsigned __int8 **)a1;
  if ((v2 & 0x80) != 0)
  {
    if (memcmp(*(const void **)a2, v9, v3))
      return 0;
  }
  else if ((_DWORD)v2)
  {
    v10 = a2;
    while (*v10 == *v9)
    {
      ++v10;
      ++v9;
      if (!--v2)
        goto LABEL_17;
    }
    return 0;
  }
LABEL_17:
  v11 = a2[55];
  if ((v11 & 0x80u) == 0)
    v12 = a2[55];
  else
    v12 = *((_QWORD *)a2 + 5);
  v13 = a1[55];
  v14 = (char)v13;
  if ((v13 & 0x80u) != 0)
    v13 = *((_QWORD *)a1 + 5);
  if (v12 != v13)
    return 0;
  v15 = (const void **)(a2 + 32);
  v18 = (unsigned __int8 *)*((_QWORD *)a1 + 4);
  v17 = a1 + 32;
  v16 = v18;
  if (v14 >= 0)
    v19 = v17;
  else
    v19 = v16;
  if ((v11 & 0x80) != 0)
    return memcmp(*v15, v19, *((_QWORD *)a2 + 5)) == 0;
  if (!a2[55])
    return 1;
  v20 = v11 - 1;
  do
  {
    v22 = *(unsigned __int8 *)v15;
    v15 = (const void **)((char *)v15 + 1);
    v21 = v22;
    v24 = *v19++;
    v23 = v24;
    v26 = v20-- != 0;
    result = v21 == v23;
  }
  while (v21 == v23 && v26);
  return result;
}

uint64_t md::StringWithLocaleImp<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>>::StringWithLocaleImp(uint64_t a1, const char *a2, const char *a3)
{
  const char *v5;
  unsigned __int8 v6;
  uint64_t v7;
  size_t v8;
  size_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  unsigned __int8 v13;
  uint64_t v14;
  size_t v15;
  size_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;

  if (a2)
    v5 = a2;
  else
    v5 = "";
  {
    v21 = operator new();
    mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v21, "VectorKitLabels", 0x5ED09DD50000000FLL);
  }
  v7 = mdm::Allocator::instance(void)::alloc;
  *(_QWORD *)(a1 + 24) = mdm::Allocator::instance(void)::alloc;
  v8 = strlen(v5);
  if (v8 > 0x7FFFFFFFFFFFFFF7)
    abort();
  v9 = v8;
  if (v8 >= 0x17)
  {
    v11 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v8 | 7) != 0x17)
      v11 = v8 | 7;
    v12 = v11 + 1;
    v10 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v7 + 16))(v7, v11 + 1, 1);
    *(_QWORD *)(a1 + 8) = v9;
    *(_QWORD *)(a1 + 16) = v12 | 0x8000000000000000;
    *(_QWORD *)a1 = v10;
    goto LABEL_12;
  }
  *(_BYTE *)(a1 + 23) = v8;
  v10 = (void *)a1;
  if (v8)
LABEL_12:
    memmove(v10, v5, v9);
  *((_BYTE *)v10 + v9) = 0;
  if (!a3)
    a3 = "";
  {
    v22 = operator new();
    mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v22, "VectorKitLabels", 0x5ED09DD50000000FLL);
  }
  v14 = mdm::Allocator::instance(void)::alloc;
  *(_QWORD *)(a1 + 56) = mdm::Allocator::instance(void)::alloc;
  v15 = strlen(a3);
  if (v15 > 0x7FFFFFFFFFFFFFF7)
    abort();
  v16 = v15;
  if (v15 >= 0x17)
  {
    v18 = (v15 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v15 | 7) != 0x17)
      v18 = v15 | 7;
    v19 = v18 + 1;
    v17 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v14 + 16))(v14, v18 + 1, 1);
    *(_QWORD *)(a1 + 40) = v16;
    *(_QWORD *)(a1 + 48) = v19 | 0x8000000000000000;
    *(_QWORD *)(a1 + 32) = v17;
  }
  else
  {
    v17 = (void *)(a1 + 32);
    *(_BYTE *)(a1 + 55) = v15;
    if (!v15)
      goto LABEL_24;
  }
  memmove(v17, a3, v16);
LABEL_24:
  *((_BYTE *)v17 + v16) = 0;
  return a1;
}

void sub_19F0F73D4(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    (*(void (**)(_QWORD, _QWORD, uint64_t))(**(_QWORD **)(v1 + 24) + 40))(*(_QWORD *)(v1 + 24), *(_QWORD *)v1, *(_QWORD *)(v1 + 16) & 0x7FFFFFFFFFFFFFFFLL);
  _Unwind_Resume(exception_object);
}

_QWORD *geo::codec::vectorTileGetLocalizedLabel(_QWORD *result, unint64_t a2, uint64_t a3, unint64_t a4, unint64_t *a5, unint64_t *a6)
{
  _QWORD *v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  BOOL v14;
  BOOL v15;
  const void *v16;
  uint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t __key;

  if (a4 < a2 && (v8 = result) != 0 && (v9 = (unint64_t *)(result[131] + 24 * (a4 + a3)), (v10 = *v9) != 0))
  {
    v11 = v9[1];
    v12 = result[107];
    v13 = result[108];
    if (v12 <= v10)
    {
      v14 = v13 >= v10;
      v15 = v13 == v10;
    }
    else
    {
      v14 = 0;
      v15 = 0;
    }
    if (v15 || !v14)
      goto LABEL_21;
    v16 = (const void *)result[135];
    v17 = result[136];
    __key = v10 - v12;
    result = bsearch(&__key, v16, (v17 - (uint64_t)v16) >> 5, 0x20uLL, (int (__cdecl *)(const void *, const void *))geo::codec::compareSearchingLocalizationTableEntries);
    if (!result)
      goto LABEL_21;
    v18 = result[1];
    if (v18 == -1)
      goto LABEL_21;
    v19 = v8 + 127;
    v20 = 127;
    if ((result[3] & 1) == 0)
    {
      v20 = 113;
      v19 = v8 + 113;
    }
    v21 = v8[v20];
    if (v18 < v19[1] - v21 && v21)
    {
      v11 = result[2];
      if (a5)
        *a5 = v21 + v18;
    }
    else
    {
LABEL_21:
      if (a5)
        *a5 = v10;
    }
    if (a6)
      goto LABEL_24;
  }
  else
  {
    if (a5)
      *a5 = 0;
    if (a6)
    {
      v11 = 0;
LABEL_24:
      *a6 = v11;
    }
  }
  return result;
}

void *std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>::__init_copy_ctor_external(_QWORD **__dst, void *__src, unint64_t a3)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v5 = __dst;
  if (a3 > 0x16)
  {
    if (a3 >= 0x7FFFFFFFFFFFFFF8)
      abort();
    v6 = (a3 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a3 | 7) != 0x17)
      v6 = a3 | 7;
    v7 = v6 + 1;
    v8 = (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(*__dst[3] + 16))(__dst[3], v6 + 1, 1);
    v5[1] = a3;
    v5[2] = v7 | 0x8000000000000000;
    *v5 = v8;
    v5 = (_QWORD *)v8;
  }
  else
  {
    *((_BYTE *)__dst + 23) = a3;
  }
  return memmove(v5, __src, a3 + 1);
}

__n128 __Block_byref_object_copy__2(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = a2[3];
  a1[3] = result;
  a2[3].n128_u64[0] = 0;
  a2[3].n128_u64[1] = 0;
  return result;
}

void geo::linear_map<md::TileSelectionTileSetType,md::SceneTileSet,std::equal_to<md::TileSelectionTileSetType>,std::allocator<std::pair<md::TileSelectionTileSetType,md::SceneTileSet>>,std::vector<std::pair<md::TileSelectionTileSetType,md::SceneTileSet>>>::emplace<md::TileSelectionTileSetType&,md::SceneTileSet>(char **a1, __int16 a2, md::SceneTileSet *a3)
{
  char *v4;
  char *v5;
  char *v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  __int16 v18;
  char *v19;
  char *v20;
  gdc::LayerDataCollector *v21;
  _QWORD *v22;
  _QWORD *v23;
  void *v24;
  _QWORD *v25;
  _QWORD *v26;
  void *v27;
  uint64_t v29;
  void *v30;
  void *v31;
  void *v32;
  void *__p;
  gdc::LayerDataCollector *v34;
  char *v35;
  char *v36;
  __int128 v37;
  _QWORD *v38;

  md::SceneTileSet::SceneTileSet((md::SceneTileSet *)&v29, a3);
  v4 = *a1;
  v5 = a1[1];
  if (*a1 == v5)
  {
    v6 = *a1;
  }
  else
  {
    v6 = *a1;
    while (a2 != *(_WORD *)v6)
    {
      v6 += 112;
      if (v6 == v5)
        goto LABEL_8;
    }
  }
  if (v6 == v5)
  {
LABEL_8:
    v7 = (unint64_t)a1[2];
    if ((unint64_t)v5 < v7)
    {
      *(_WORD *)v5 = a2;
      md::SceneTileSet::SceneTileSet((md::SceneTileSet *)(v5 + 8), (const md::SceneTileSet *)&v29);
      a1[1] = v5 + 112;
      a1[1] = v5 + 112;
      goto LABEL_27;
    }
    v8 = 0x6DB6DB6DB6DB6DB7 * ((v5 - v4) >> 4);
    if ((unint64_t)(v8 + 1) > 0x249249249249249)
      abort();
    v9 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v7 - (_QWORD)v4) >> 4);
    v10 = 2 * v9;
    if (2 * v9 <= v8 + 1)
      v10 = v8 + 1;
    if (v9 >= 0x124924924924924)
      v11 = 0x249249249249249;
    else
      v11 = v10;
    v38 = a1 + 2;
    if (v11)
    {
      if (v11 > 0x249249249249249)
        std::__throw_bad_array_new_length[abi:nn180100]();
      v12 = (char *)operator new(112 * v11);
    }
    else
    {
      v12 = 0;
    }
    v13 = &v12[112 * v8];
    v35 = v12;
    v36 = v13;
    *(_QWORD *)&v37 = v13;
    *((_QWORD *)&v37 + 1) = &v12[112 * v11];
    *(_WORD *)v13 = a2;
    md::SceneTileSet::SceneTileSet((md::SceneTileSet *)(v13 + 8), (const md::SceneTileSet *)&v29);
    v14 = v36;
    v15 = (char *)(v37 + 112);
    *(_QWORD *)&v37 = v37 + 112;
    v17 = *a1;
    v16 = a1[1];
    if (v16 == *a1)
    {
      *a1 = v36;
      a1[1] = v15;
      a1[2] = (char *)*((_QWORD *)&v37 + 1);
      if (!v16)
        goto LABEL_26;
    }
    else
    {
      do
      {
        v18 = *((_WORD *)v16 - 56);
        v16 -= 112;
        *((_WORD *)v14 - 56) = v18;
        v14 -= 112;
        md::SceneTileSet::SceneTileSet((md::SceneTileSet *)(v14 + 8), (const md::SceneTileSet *)(v16 + 8));
      }
      while (v16 != v17);
      v16 = *a1;
      v19 = a1[1];
      *a1 = v14;
      v20 = (char *)v37;
      *(_OWORD *)(a1 + 1) = v37;
      v15 = v20;
      while (v19 != v16)
      {
        v19 -= 112;
        std::__destroy_at[abi:nn180100]<std::pair<md::TileSelectionTileSetType,md::SceneTileSet>,0>(v19);
      }
      if (!v16)
        goto LABEL_26;
    }
    operator delete(v16);
LABEL_26:
    a1[1] = v15;
  }
LABEL_27:
  v21 = v34;
  v34 = 0;
  if (v21)
  {
    gdc::LayerDataCollector::~LayerDataCollector(v21);
    MEMORY[0x1A1AF4E00]();
  }
  v22 = __p;
  if (__p)
  {
    do
    {
      v23 = (_QWORD *)*v22;
      operator delete(v22);
      v22 = v23;
    }
    while (v23);
  }
  v24 = v32;
  v32 = 0;
  if (v24)
    operator delete(v24);
  v25 = v31;
  if (v31)
  {
    do
    {
      v26 = (_QWORD *)*v25;
      operator delete(v25);
      v25 = v26;
    }
    while (v26);
  }
  v27 = v30;
  v30 = 0;
  if (v27)
    operator delete(v27);
}

void sub_19F0F7844(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::pair<md::TileSelectionTileSetType,md::SceneTileSet>>::~__split_buffer(v2 - 88);
  std::pair<md::TileSelectionTileSetType,md::SceneTileSet>::~pair((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t std::unordered_set<geo::QuadTile,geo::QuadTileHash,std::equal_to<geo::QuadTile>,std::allocator<geo::QuadTile>>::unordered_set(uint64_t a1, uint64_t a2)
{
  size_t prime;
  int8x8_t v5;
  BOOL v6;
  unint64_t v7;
  uint8x8_t v8;
  uint64_t v9;
  unsigned __int8 *i;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  prime = *(_QWORD *)(a2 + 8);
  if (prime == 1)
  {
    prime = 2;
LABEL_17:
    std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>(a1, prime);
    goto LABEL_18;
  }
  if ((prime & (prime - 1)) != 0)
  {
    prime = std::__next_prime(*(_QWORD *)(a2 + 8));
    v5 = *(int8x8_t *)(a1 + 8);
    v6 = prime >= *(_QWORD *)&v5;
    if (prime > *(_QWORD *)&v5)
      goto LABEL_17;
  }
  else
  {
    v5 = 0;
    v6 = 1;
    if (prime)
      goto LABEL_17;
  }
  if (!v6)
  {
    v7 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(_QWORD *)&v5 < 3uLL || (v8 = (uint8x8_t)vcnt_s8(v5), v8.i16[0] = vaddlv_u8(v8), v8.u32[0] > 1uLL))
    {
      v7 = std::__next_prime(v7);
    }
    else
    {
      v9 = 1 << -(char)__clz(v7 - 1);
      if (v7 >= 2)
        v7 = v9;
    }
    if (prime <= v7)
      prime = v7;
    if (prime < *(_QWORD *)&v5)
      goto LABEL_17;
  }
LABEL_18:
  for (i = *(unsigned __int8 **)(a2 + 16); i; i = *(unsigned __int8 **)i)
    std::__hash_table<geo::QuadTile,geo::QuadTileHash,std::equal_to<geo::QuadTile>,std::allocator<geo::QuadTile>>::__emplace_unique_key_args<geo::QuadTile,geo::QuadTile const&>(a1, i + 16, (uint64_t)(i + 16));
  return a1;
}

void sub_19F0F7990(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unordered_set<md::MuninJunction const*>::~unordered_set[abi:nn180100](v1);
  _Unwind_Resume(a1);
}

void gdc::LayerDataCollector::~LayerDataCollector(gdc::LayerDataCollector *this)
{
  _BYTE *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  _BYTE *v7;
  void *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  void *v19;

  v2 = (_BYTE *)*((_QWORD *)this + 8);
  if (v2)
  {
    do
    {
      if (v2[112])
        v2[112] = 0;
      v7 = *(_BYTE **)v2;
      v8 = (void *)*((_QWORD *)v2 + 4);
      if (v8 != *((void **)v2 + 6))
        free(v8);
      operator delete(v2);
      v2 = v7;
    }
    while (v7);
  }
  v3 = (void *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v3)
    operator delete(v3);
  v4 = *((_QWORD *)this + 3);
  if (v4)
  {
    v5 = *((_QWORD *)this + 4);
    v6 = (void *)*((_QWORD *)this + 3);
    if (v5 == v4)
      goto LABEL_30;
    while (1)
    {
      v10 = *(_QWORD *)(v5 - 24);
      if (!v10)
        goto LABEL_14;
      v11 = *(_QWORD *)(v5 - 16);
      v9 = *(void **)(v5 - 24);
      if (v11 != v10)
        break;
LABEL_13:
      *(_QWORD *)(v5 - 16) = v10;
      operator delete(v9);
LABEL_14:
      v5 -= 32;
      if (v5 == v4)
      {
        v6 = (void *)*((_QWORD *)this + 3);
LABEL_30:
        *((_QWORD *)this + 4) = v4;
        operator delete(v6);
        goto LABEL_31;
      }
    }
    while (1)
    {
      v12 = *(std::__shared_weak_count **)(v11 - 24);
      if (v12)
      {
        p_shared_owners = (unint64_t *)&v12->__shared_owners_;
        do
          v14 = __ldaxr(p_shared_owners);
        while (__stlxr(v14 - 1, p_shared_owners));
        if (!v14)
          break;
      }
      if (*(_BYTE *)(v11 - 48))
        goto LABEL_24;
LABEL_25:
      v15 = *(void **)(v11 - 128);
      if (v15 != *(void **)(v11 - 112))
        free(v15);
      v11 -= 144;
      if (v11 == v10)
      {
        v9 = *(void **)(v5 - 24);
        goto LABEL_13;
      }
    }
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
    if (!*(_BYTE *)(v11 - 48))
      goto LABEL_25;
LABEL_24:
    *(_BYTE *)(v11 - 48) = 0;
    goto LABEL_25;
  }
LABEL_31:
  v16 = *(_QWORD *)this;
  if (*(_QWORD *)this)
  {
    v17 = *((_QWORD *)this + 1);
    v18 = *(void **)this;
    if (v17 != v16)
    {
      do
      {
        if (*(_BYTE *)(v17 - 48))
          *(_BYTE *)(v17 - 48) = 0;
        v19 = *(void **)(v17 - 128);
        if (v19 != *(void **)(v17 - 112))
          free(v19);
        v17 -= 144;
      }
      while (v17 != v16);
      v18 = *(void **)this;
    }
    *((_QWORD *)this + 1) = v16;
    operator delete(v18);
  }
}

void std::vector<gdc::LayerDataRequestKeyPair>::reserve(uint64_t a1, unint64_t a2)
{
  char *v2;
  _BYTE *v4;
  uint64_t v5;
  char *v6;
  char *v7;
  char *v8;
  uint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  void *v13;

  v2 = *(char **)a1;
  if (0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 3) < a2)
  {
    if (a2 >= 0x222222222222223)
      abort();
    v4 = *(_BYTE **)(a1 + 8);
    v5 = 120 * a2;
    v6 = (char *)operator new(120 * a2);
    v7 = &v6[v5];
    v8 = &v6[v4 - v2];
    if (v4 == v2)
    {
      *(_QWORD *)a1 = v8;
      *(_QWORD *)(a1 + 8) = v8;
      *(_QWORD *)(a1 + 16) = v7;
    }
    else
    {
      v9 = 0;
      do
      {
        v10 = &v8[v9];
        v11 = &v4[v9];
        *((_QWORD *)v10 - 15) = *(_QWORD *)&v4[v9 - 120];
        *(v10 - 112) = v4[v9 - 112];
        gdc::LayerDataKey::LayerDataKey((uint64_t)&v8[v9 - 104], (uint64_t)&v4[v9 - 104]);
        *(v10 - 16) = 0;
        if (v4[v9 - 16])
        {
          *((_DWORD *)v10 - 3) = *((_DWORD *)v11 - 3);
          *(v10 - 16) = 1;
        }
        *((_QWORD *)v10 - 1) = *((_QWORD *)v11 - 1);
        v9 -= 120;
      }
      while (&v4[v9] != v2);
      v2 = *(char **)a1;
      v12 = *(char **)(a1 + 8);
      *(_QWORD *)a1 = &v8[v9];
      *(_QWORD *)(a1 + 8) = v8;
      *(_QWORD *)(a1 + 16) = v7;
      while (v12 != v2)
      {
        if (*(v12 - 16))
          *(v12 - 16) = 0;
        v13 = (void *)*((_QWORD *)v12 - 12);
        if (v13 != *((void **)v12 - 10))
          free(v13);
        v12 -= 120;
      }
    }
    if (v2)
      operator delete(v2);
  }
}

uint64_t md::MapTileData::estimatedCost(md::MapTileData *this)
{
  uint64_t v1;

  v1 = *((_QWORD *)this + 85);
  if (v1)
    return *(_QWORD *)(v1 + 40);
  else
    return 0;
}

void std::vector<gdc::LayerDataRequestKey>::__append(void **a1, unint64_t a2)
{
  _WORD *v4;
  _BYTE *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  _WORD *v11;
  char *v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t v18;
  char *v19;
  char *v20;
  char *v21;
  char *v22;
  void *v23;

  v4 = a1[1];
  v5 = a1[2];
  if (0x6DB6DB6DB6DB6DB7 * ((v5 - (_BYTE *)v4) >> 4) >= a2)
  {
    if (a2)
    {
      v11 = &v4[56 * a2];
      do
      {
        *(_BYTE *)v4 = 0;
        v4[4] = 0;
        *((_QWORD *)v4 + 2) = v4 + 24;
        *((_QWORD *)v4 + 3) = v4 + 24;
        *((_QWORD *)v4 + 4) = v4 + 24;
        *((_QWORD *)v4 + 5) = 32;
        *((_QWORD *)v4 + 13) = 0;
        *((_QWORD *)v4 + 10) = 0;
        *((_QWORD *)v4 + 11) = 0;
        *((_BYTE *)v4 + 96) = 0;
        v4 += 56;
      }
      while (v4 != v11);
      v4 = v11;
    }
    a1[1] = v4;
  }
  else
  {
    v6 = 0x6DB6DB6DB6DB6DB7 * (((char *)v4 - (_BYTE *)*a1) >> 4);
    v7 = v6 + a2;
    if (v6 + a2 > 0x249249249249249)
      abort();
    v8 = 0x6DB6DB6DB6DB6DB7 * ((v5 - (_BYTE *)*a1) >> 4);
    if (2 * v8 > v7)
      v7 = 2 * v8;
    if (v8 >= 0x124924924924924)
      v9 = 0x249249249249249;
    else
      v9 = v7;
    if (v9)
    {
      if (v9 > 0x249249249249249)
        std::__throw_bad_array_new_length[abi:nn180100]();
      v10 = (char *)operator new(112 * v9);
    }
    else
    {
      v10 = 0;
    }
    v12 = &v10[112 * v6];
    v13 = &v12[112 * a2];
    v14 = v12;
    do
    {
      *v14 = 0;
      *((_WORD *)v14 + 4) = 0;
      *((_QWORD *)v14 + 2) = v14 + 48;
      *((_QWORD *)v14 + 3) = v14 + 48;
      *((_QWORD *)v14 + 4) = v14 + 48;
      *((_QWORD *)v14 + 5) = 32;
      *((_QWORD *)v14 + 13) = 0;
      *((_QWORD *)v14 + 10) = 0;
      *((_QWORD *)v14 + 11) = 0;
      v14[96] = 0;
      v14 += 112;
    }
    while (v14 != v13);
    v15 = &v10[112 * v9];
    v17 = (char *)*a1;
    v16 = (char *)a1[1];
    if (v16 == *a1)
    {
      *a1 = v12;
      a1[1] = v13;
      a1[2] = v15;
    }
    else
    {
      v18 = 0;
      do
      {
        v19 = &v12[v18];
        v20 = &v16[v18];
        v12[v18 - 112] = v16[v18 - 112];
        gdc::LayerDataKey::LayerDataKey((uint64_t)&v12[v18 - 104], (uint64_t)&v16[v18 - 104]);
        v12[v18 - 16] = 0;
        if (v16[v18 - 16])
        {
          *((_DWORD *)v19 - 3) = *((_DWORD *)v20 - 3);
          *(v19 - 16) = 1;
        }
        *((_QWORD *)v19 - 1) = *((_QWORD *)v20 - 1);
        v18 -= 112;
      }
      while (&v16[v18] != v17);
      v21 = &v12[v18];
      v16 = (char *)*a1;
      v22 = (char *)a1[1];
      *a1 = v21;
      a1[1] = v13;
      a1[2] = v15;
      while (v22 != v16)
      {
        if (*(v22 - 16))
          *(v22 - 16) = 0;
        v23 = (void *)*((_QWORD *)v22 - 12);
        if (v23 != *((void **)v22 - 10))
          free(v23);
        v22 -= 112;
      }
    }
    if (v16)
      operator delete(v16);
  }
}

uint64_t md::DaVinciGroundTileData::estimatedCost(md::DaVinciGroundTileData *this)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t *i;
  uint64_t v6;
  uint64_t *v7;
  uint64_t *j;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t *k;
  uint64_t v16;
  uint64_t *v17;
  uint64_t *m;
  uint64_t v19;
  uint64_t *v20;
  uint64_t *n;
  uint64_t v22;
  uint64_t v23;

  v1 = (_QWORD *)*((_QWORD *)this + 134);
  v2 = (_QWORD *)*((_QWORD *)this + 135);
  if (v1 == v2)
  {
    v3 = 0;
  }
  else
  {
    v3 = 0;
    do
    {
      v4 = (uint64_t *)v1[1];
      for (i = (uint64_t *)v1[2];
            v4 != i;
            v3 = *(_QWORD *)(**(_QWORD **)(v6 + 64) + 48)
               + v3
               + *(_QWORD *)(*(_QWORD *)(v6 + 96) + 48)
               - (*(_QWORD *)(**(_QWORD **)(v6 + 64) + 40)
                + *(_QWORD *)(*(_QWORD *)(v6 + 96) + 40)))
      {
        v6 = *v4;
        v4 += 3;
      }
      v7 = (uint64_t *)v1[4];
      for (j = (uint64_t *)v1[5];
            v7 != j;
            v3 = *(_QWORD *)(**(_QWORD **)(v9 + 64) + 48)
               + v3
               + *(_QWORD *)(*(_QWORD *)(v9 + 96) + 48)
               - (*(_QWORD *)(**(_QWORD **)(v9 + 64) + 40)
                + *(_QWORD *)(*(_QWORD *)(v9 + 96) + 40)))
      {
        v9 = *v7;
        v7 += 4;
      }
      v1 += 7;
    }
    while (v1 != v2);
  }
  v10 = *((_QWORD *)this + 110);
  if (v10)
    v3 = *(_QWORD *)(v10 + 48) + v3 - *(_QWORD *)(v10 + 40);
  v11 = *((_QWORD *)this + 112);
  if (v11)
    v3 = *(_QWORD *)(v11 + 48) + v3 - *(_QWORD *)(v11 + 40);
  v12 = *((_QWORD *)this + 114);
  if (v12)
    v3 = *(_QWORD *)(v12 + 48) + v3 - *(_QWORD *)(v12 + 40);
  v13 = *((_QWORD *)this + 108);
  if (v13)
    v3 = *(_QWORD *)(v13 + 48) + v3 - *(_QWORD *)(v13 + 40);
  v14 = (uint64_t *)*((_QWORD *)this + 119);
  for (k = (uint64_t *)*((_QWORD *)this + 120);
        v14 != k;
        v3 = *(_QWORD *)(**(_QWORD **)(v16 + 64) + 48)
           + v3
           + *(_QWORD *)(*(_QWORD *)(v16 + 96) + 48)
           - (*(_QWORD *)(**(_QWORD **)(v16 + 64) + 40)
            + *(_QWORD *)(*(_QWORD *)(v16 + 96) + 40)))
  {
    v16 = *v14;
    v14 += 2;
  }
  v17 = (uint64_t *)*((_QWORD *)this + 122);
  for (m = (uint64_t *)*((_QWORD *)this + 123);
        v17 != m;
        v3 = *(_QWORD *)(**(_QWORD **)(v19 + 64) + 48)
           + v3
           + *(_QWORD *)(*(_QWORD *)(v19 + 96) + 48)
           - (*(_QWORD *)(**(_QWORD **)(v19 + 64) + 40)
            + *(_QWORD *)(*(_QWORD *)(v19 + 96) + 40)))
  {
    v19 = *v17;
    v17 += 2;
  }
  v20 = (uint64_t *)*((_QWORD *)this + 125);
  for (n = (uint64_t *)*((_QWORD *)this + 126);
        v20 != n;
        v3 = *(_QWORD *)(**(_QWORD **)(v22 + 64) + 48)
           + v3
           + *(_QWORD *)(*(_QWORD *)(v22 + 96) + 48)
           - (*(_QWORD *)(**(_QWORD **)(v22 + 64) + 40)
            + *(_QWORD *)(*(_QWORD *)(v22 + 96) + 40)))
  {
    v22 = *v20;
    v20 += 2;
  }
  v23 = *((_QWORD *)this + 163);
  if (v23)
    v3 += *(_QWORD *)(v23 + 80);
  return v3;
}

void md::DaVinciElevationRasterLayerDataSource::didProcessNewLayerData(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  int *v7;
  int v8;
  int v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;

  v2 = *(_QWORD *)(a1 + 752);
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 128);
    if (v3)
    {
      v4 = *(_QWORD **)(v3 + 24);
      if (v4)
      {
        v5 = *a2;
        v6 = a2[1];
        if (*a2 != v6)
        {
          do
          {
            v7 = *(int **)(v5 + 24);
            v8 = v7[1];
            v9 = *v7;
            LODWORD(v7) = 1 << *((_BYTE *)v7 + 8);
            v10 = 1.0 / (double)(int)v7;
            v11 = v10 * (double)v9;
            v12 = v10 * (double)((int)v7 + ~v8);
            v13 = v11 + v10;
            v14 = v12 + v10;
            md::MercatorTerrainHeightCache::invalidateRect(v4, &v11);
            v5 += 120;
          }
          while (v5 != v6);
        }
      }
    }
  }
}

unint64_t md::DaVinciCenterLineRoadsTileData::estimatedCost(md::DaVinciCenterLineRoadsTileData *this)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t *i;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *j;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t *k;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t *m;
  uint64_t v22;
  char v24;
  char **v25;
  char *v26;

  v2 = atomic_load(&md::DaVinciCenterLineRoadsTileData::estimatedCost(void)const::flag);
  if (v2 != -1)
  {
    v26 = &v24;
    v25 = &v26;
    std::__call_once(&md::DaVinciCenterLineRoadsTileData::estimatedCost(void)const::flag, &v25, (void (__cdecl *)(void *))std::__call_once_proxy[abi:nn180100]<std::tuple<md::DaVinciCenterLineRoadsTileData::estimatedCost(void)::$_0 &&>>);
  }
  v3 = *((_QWORD *)this + 93);
  if (!v3)
  {
LABEL_7:
    v7 = *((_QWORD *)this + 91);
    if (!v7)
      goto LABEL_10;
    goto LABEL_8;
  }
  v4 = *(uint64_t **)(v3 + 32);
  v5 = *(uint64_t **)(v3 + 40);
  if (v4 != v5)
  {
    v3 = 0;
    do
    {
      v6 = *v4++;
      v3 = *(_QWORD *)(**(_QWORD **)(v6 + 64) + 48)
         + v3
         + *(_QWORD *)(*(_QWORD *)(v6 + 96) + 48)
         - (*(_QWORD *)(**(_QWORD **)(v6 + 64) + 40)
          + *(_QWORD *)(*(_QWORD *)(v6 + 96) + 40));
    }
    while (v4 != v5);
    goto LABEL_7;
  }
  v3 = 0;
  v7 = *((_QWORD *)this + 91);
  if (!v7)
    goto LABEL_10;
LABEL_8:
  v8 = *(uint64_t **)(v7 + 32);
  for (i = *(uint64_t **)(v7 + 40);
        v8 != i;
        v3 = *(_QWORD *)(**(_QWORD **)(v10 + 64) + 48)
           + v3
           + *(_QWORD *)(*(_QWORD *)(v10 + 96) + 48)
           - (*(_QWORD *)(**(_QWORD **)(v10 + 64) + 40)
            + *(_QWORD *)(*(_QWORD *)(v10 + 96) + 40)))
  {
    v10 = *v8++;
  }
LABEL_10:
  v11 = *((_QWORD *)this + 90);
  if (v11)
  {
    v12 = *(uint64_t **)(v11 + 32);
    for (j = *(uint64_t **)(v11 + 40);
          v12 != j;
          v3 = *(_QWORD *)(**(_QWORD **)(v14 + 64) + 48)
             + v3
             + *(_QWORD *)(*(_QWORD *)(v14 + 96) + 48)
             - (*(_QWORD *)(**(_QWORD **)(v14 + 64) + 40)
              + *(_QWORD *)(*(_QWORD *)(v14 + 96) + 40)))
    {
      v14 = *v12++;
    }
  }
  v15 = *((_QWORD *)this + 92);
  if (v15)
  {
    v16 = *(uint64_t **)(v15 + 32);
    for (k = *(uint64_t **)(v15 + 40);
          v16 != k;
          v3 = *(_QWORD *)(**(_QWORD **)(v18 + 64) + 48)
             + v3
             + *(_QWORD *)(*(_QWORD *)(v18 + 96) + 48)
             - (*(_QWORD *)(**(_QWORD **)(v18 + 64) + 40)
              + *(_QWORD *)(*(_QWORD *)(v18 + 96) + 40)))
    {
      v18 = *v16++;
    }
  }
  v19 = *((_QWORD *)this + 102);
  if (v19)
  {
    v20 = *(uint64_t **)(v19 + 32);
    for (m = *(uint64_t **)(v19 + 40);
          v20 != m;
          v3 = *(_QWORD *)(**(_QWORD **)(v22 + 64) + 48)
             + v3
             + *(_QWORD *)(*(_QWORD *)(v22 + 96) + 48)
             - (*(_QWORD *)(**(_QWORD **)(v22 + 64) + 40)
              + *(_QWORD *)(*(_QWORD *)(v22 + 96) + 40)))
    {
      v22 = *v20++;
    }
  }
  return (unint64_t)(float)((float)((float)((float)(unint64_t)(10 * *((_QWORD *)this + 94)) * 30720.0)
                                         / (float)(unint64_t)md::DaVinciCenterLineRoadsTileData::estimatedCost(void)const::metalBufferCacheCountMaximum)
                                 + (float)v3);
}

uint64_t md::MaterialData::estimatedCost(md::MaterialData *this)
{
  return *((_QWORD *)this + 24);
}

void gdc::LayerDataSource::cancelAllLayerDataRequests(gdc::LayerDataSource *this)
{
  NSObject *v2;
  uint64_t **v3;
  uint64_t v4;
  NSObject *v5;
  std::string *p_buf;
  os_signpost_id_t v7;
  NSObject *v8;
  uint64_t *v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  unsigned __int8 *i;
  unsigned __int8 *j;
  unsigned __int8 *v19;
  _QWORD *v20;
  uint64_t v21;
  _BYTE *v22;
  uint64_t v23;
  uint64_t k;
  _BYTE *v25;
  uint64_t v26;
  uint64_t m;
  _BYTE *v28;
  void *v29;
  _BYTE *v30;
  void *v31;
  _BYTE *v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  void *v36;
  _BYTE *v37;
  void *v38;
  std::string buf;
  uint64_t v40;
  char v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  std::__shared_weak_count *v45;
  uint8_t v46[16];
  void *__p[2];
  int v48;
  uint64_t v49;

  v49 = *MEMORY[0x1E0C80C00];
  if (GEOGetGeoDisplayCoreResourceLoadingLog::onceToken != -1)
    dispatch_once(&GEOGetGeoDisplayCoreResourceLoadingLog::onceToken, &__block_literal_global_4_42058);
  v2 = GEOGetGeoDisplayCoreResourceLoadingLog::log;
  if (os_log_type_enabled((os_log_t)GEOGetGeoDisplayCoreResourceLoadingLog::log, OS_LOG_TYPE_DEBUG))
  {
    LOWORD(buf.__r_.__value_.__l.__data_) = 0;
    _os_log_impl(&dword_19F029000, v2, OS_LOG_TYPE_DEBUG, "cancelAllLayerDataRequests", (uint8_t *)&buf, 2u);
  }
  v3 = (uint64_t **)*((_QWORD *)this + 7);
  if (v3)
  {
    v4 = GEOGetGeoDisplayCoreResourceLoadingLog::onceToken;
    do
    {
      while (1)
      {
        if (v4 != -1)
          dispatch_once(&GEOGetGeoDisplayCoreResourceLoadingLog::onceToken, &__block_literal_global_4_42058);
        v5 = GEOGetGeoDisplayCoreResourceLoadingLog::log;
        if (os_log_type_enabled((os_log_t)GEOGetGeoDisplayCoreResourceLoadingLog::log, OS_LOG_TYPE_DEBUG))
        {
          gdc::LayerDataRequestKey::keysInt32Str(&buf, (unsigned __int16 *)v3[16]);
          if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            p_buf = &buf;
          else
            p_buf = (std::string *)buf.__r_.__value_.__r.__words[0];
          *(_DWORD *)v46 = 136315138;
          *(_QWORD *)&v46[4] = p_buf;
          _os_log_impl(&dword_19F029000, v5, OS_LOG_TYPE_DEBUG, "Cancelling layer data request: %s", v46, 0xCu);
          if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
            operator delete(buf.__r_.__value_.__l.__data_);
          if (GEOGetGeoDisplayCoreResourceLoadingLog::onceToken != -1)
            dispatch_once(&GEOGetGeoDisplayCoreResourceLoadingLog::onceToken, &__block_literal_global_4_42058);
        }
        v7 = v3[16][14];
        if (v7 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
        {
          v8 = GEOGetGeoDisplayCoreResourceLoadingLog::log;
          if (os_signpost_enabled((os_log_t)GEOGetGeoDisplayCoreResourceLoadingLog::log))
            break;
        }
        v4 = -1;
        v3 = (uint64_t **)*v3;
        if (!v3)
          goto LABEL_21;
      }
      LOWORD(buf.__r_.__value_.__l.__data_) = 0;
      _os_signpost_emit_with_name_impl(&dword_19F029000, v8, OS_SIGNPOST_INTERVAL_END, v7, "LayerDataRequest", "status=cancelled", (uint8_t *)&buf, 2u);
      v4 = GEOGetGeoDisplayCoreResourceLoadingLog::onceToken;
      v3 = (uint64_t **)*v3;
    }
    while (v3);
LABEL_21:
    v9 = (uint64_t *)*((_QWORD *)this + 7);
    *(_OWORD *)v46 = 0u;
    *(_OWORD *)__p = 0u;
    v48 = 1065353216;
    if (v9)
    {
      while (1)
      {
        buf.__r_.__value_.__s.__data_[0] = *((_BYTE *)v9 + 16);
        gdc::LayerDataKey::LayerDataKey((uint64_t)&buf.__r_.__value_.__l.__size_, (uint64_t)(v9 + 3));
        v41 = 0;
        if (*((_BYTE *)v9 + 112))
        {
          v42 = *((_DWORD *)v9 + 29);
          v41 = 1;
        }
        v10 = v9[16];
        v43 = v9[15];
        v44 = v10;
        v11 = (std::__shared_weak_count *)v9[17];
        v45 = v11;
        if (v11)
        {
          p_shared_owners = (unint64_t *)&v11->__shared_owners_;
          do
            v13 = __ldxr(p_shared_owners);
          while (__stxr(v13 + 1, p_shared_owners));
        }
        std::__hash_table<gdc::LayerDataRequestKey,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,std::allocator<gdc::LayerDataRequestKey>>::__emplace_unique_key_args<gdc::LayerDataRequestKey,gdc::LayerDataRequestKey const&>((uint64_t)v46, (unsigned __int8 *)&buf, (uint64_t)&buf);
        if (*(_BYTE *)(v44 + 209))
          std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__emplace_unique_key_args<unsigned long,unsigned long>((uint64_t)this + 160, *(_QWORD *)(v44 + 112), *(_QWORD *)(v44 + 112));
        v14 = v45;
        if (v45)
        {
          v15 = (unint64_t *)&v45->__shared_owners_;
          do
            v16 = __ldaxr(v15);
          while (__stlxr(v16 - 1, v15));
          if (!v16)
            break;
        }
        if (v41)
          goto LABEL_36;
LABEL_37:
        if (buf.__r_.__value_.__r.__words[2] != v40)
          free((void *)buf.__r_.__value_.__r.__words[2]);
        v9 = (uint64_t *)*v9;
        if (!v9)
          goto LABEL_42;
      }
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
      if (!v41)
        goto LABEL_37;
LABEL_36:
      v41 = 0;
      goto LABEL_37;
    }
  }
  else
  {
    *(_OWORD *)v46 = 0u;
    *(_OWORD *)__p = 0u;
    v48 = 1065353216;
  }
LABEL_42:
  for (i = (unsigned __int8 *)*((_QWORD *)this + 12); i; i = *(unsigned __int8 **)i)
    std::__hash_table<gdc::LayerDataRequestKey,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,std::allocator<gdc::LayerDataRequestKey>>::__emplace_unique_key_args<gdc::LayerDataRequestKey,gdc::LayerDataRequestKey const&>((uint64_t)v46, i + 16, (uint64_t)(i + 16));
  for (j = (unsigned __int8 *)*((_QWORD *)this + 17); j; j = *(unsigned __int8 **)j)
    std::__hash_table<gdc::LayerDataRequestKey,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,std::allocator<gdc::LayerDataRequestKey>>::__emplace_unique_key_args<gdc::LayerDataRequestKey,gdc::LayerDataRequestKey const&>((uint64_t)v46, j + 16, (uint64_t)(j + 16));
  v19 = (unsigned __int8 *)__p[0];
  if (__p[0])
  {
    v20 = (_QWORD *)*((_QWORD *)this + 59);
    do
    {
      *(_OWORD *)&buf.__r_.__value_.__l.__data_ = 0uLL;
      gdc::LayerDataRequestTracker::_processKey(v20, v19 + 16, (uint64_t *)&buf, 1);
      v19 = *(unsigned __int8 **)v19;
    }
    while (v19);
  }
  std::__hash_table<std::__hash_value_type<gdc::LayerDataRequestKey,std::shared_ptr<gdc::LayerDataRequest>>,std::__unordered_map_hasher<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::shared_ptr<gdc::LayerDataRequest>>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,true>,std::__unordered_map_equal<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::shared_ptr<gdc::LayerDataRequest>>,std::equal_to<gdc::LayerDataRequestKey>,gdc::LayerDataRequestKeyHash,true>,std::allocator<std::__hash_value_type<gdc::LayerDataRequestKey,std::shared_ptr<gdc::LayerDataRequest>>>>::clear((_QWORD *)this + 5);
  std::__hash_table<std::__hash_value_type<gdc::LayerDataRequestKey,std::shared_ptr<gdc::LayerDataRequest>>,std::__unordered_map_hasher<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::shared_ptr<gdc::LayerDataRequest>>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,true>,std::__unordered_map_equal<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::shared_ptr<gdc::LayerDataRequest>>,std::equal_to<gdc::LayerDataRequestKey>,gdc::LayerDataRequestKeyHash,true>,std::allocator<std::__hash_value_type<gdc::LayerDataRequestKey,std::shared_ptr<gdc::LayerDataRequest>>>>::clear((_QWORD *)this + 10);
  std::__hash_table<std::__hash_value_type<gdc::LayerDataRequestKey,std::shared_ptr<gdc::LayerDataRequest>>,std::__unordered_map_hasher<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::shared_ptr<gdc::LayerDataRequest>>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,true>,std::__unordered_map_equal<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::shared_ptr<gdc::LayerDataRequest>>,std::equal_to<gdc::LayerDataRequestKey>,gdc::LayerDataRequestKeyHash,true>,std::allocator<std::__hash_value_type<gdc::LayerDataRequestKey,std::shared_ptr<gdc::LayerDataRequest>>>>::clear((_QWORD *)this + 15);
  v21 = *((_QWORD *)this + 2);
  std::mutex::lock((std::mutex *)(v21 + 80));
  if (*(_QWORD *)(v21 + 168))
  {
    v22 = *(_BYTE **)(v21 + 160);
    if (!v22)
    {
LABEL_51:
      *(_QWORD *)(v21 + 160) = 0;
      v23 = *(_QWORD *)(v21 + 152);
      if (v23)
      {
        for (k = 0; k != v23; ++k)
          *(_QWORD *)(*(_QWORD *)(v21 + 144) + 8 * k) = 0;
      }
      *(_QWORD *)(v21 + 168) = 0;
      goto LABEL_55;
    }
    while (1)
    {
      v32 = *(_BYTE **)v22;
      v33 = (std::__shared_weak_count *)*((_QWORD *)v22 + 17);
      if (v33)
      {
        v34 = (unint64_t *)&v33->__shared_owners_;
        do
          v35 = __ldaxr(v34);
        while (__stlxr(v35 - 1, v34));
        if (!v35)
          break;
      }
      if (v22[112])
        goto LABEL_76;
LABEL_77:
      v36 = (void *)*((_QWORD *)v22 + 4);
      if (v36 != *((void **)v22 + 6))
        free(v36);
      operator delete(v22);
      v22 = v32;
      if (!v32)
        goto LABEL_51;
    }
    ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
    std::__shared_weak_count::__release_weak(v33);
    if (!v22[112])
      goto LABEL_77;
LABEL_76:
    v22[112] = 0;
    goto LABEL_77;
  }
LABEL_55:
  if (*(_QWORD *)(v21 + 208))
  {
    v25 = *(_BYTE **)(v21 + 200);
    if (v25)
    {
      do
      {
        if (v25[112])
          v25[112] = 0;
        v37 = *(_BYTE **)v25;
        v38 = (void *)*((_QWORD *)v25 + 4);
        if (v38 != *((void **)v25 + 6))
          free(v38);
        operator delete(v25);
        v25 = v37;
      }
      while (v37);
    }
    *(_QWORD *)(v21 + 200) = 0;
    v26 = *(_QWORD *)(v21 + 192);
    if (v26)
    {
      for (m = 0; m != v26; ++m)
        *(_QWORD *)(*(_QWORD *)(v21 + 184) + 8 * m) = 0;
    }
    *(_QWORD *)(v21 + 208) = 0;
  }
  std::mutex::unlock((std::mutex *)(v21 + 80));
  v28 = __p[0];
  if (__p[0])
  {
    do
    {
      if (v28[112])
        v28[112] = 0;
      v30 = *(_BYTE **)v28;
      v31 = (void *)*((_QWORD *)v28 + 4);
      if (v31 != *((void **)v28 + 6))
        free(v31);
      operator delete(v28);
      v28 = v30;
    }
    while (v30);
  }
  v29 = *(void **)v46;
  *(_QWORD *)v46 = 0;
  if (v29)
    operator delete(v29);
}

void std::__hash_table<std::__hash_value_type<gdc::LayerDataRequestKey,std::shared_ptr<gdc::LayerDataRequest>>,std::__unordered_map_hasher<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::shared_ptr<gdc::LayerDataRequest>>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,true>,std::__unordered_map_equal<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::shared_ptr<gdc::LayerDataRequest>>,std::equal_to<gdc::LayerDataRequestKey>,gdc::LayerDataRequestKeyHash,true>,std::allocator<std::__hash_value_type<gdc::LayerDataRequestKey,std::shared_ptr<gdc::LayerDataRequest>>>>::clear(_QWORD *a1)
{
  _BYTE *v2;
  uint64_t v3;
  uint64_t i;
  _BYTE *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  void *v9;

  if (!a1[3])
    return;
  v2 = (_BYTE *)a1[2];
  if (v2)
  {
    while (1)
    {
      v5 = *(_BYTE **)v2;
      v6 = (std::__shared_weak_count *)*((_QWORD *)v2 + 17);
      if (v6)
      {
        p_shared_owners = (unint64_t *)&v6->__shared_owners_;
        do
          v8 = __ldaxr(p_shared_owners);
        while (__stlxr(v8 - 1, p_shared_owners));
        if (!v8)
          break;
      }
      if (v2[112])
        goto LABEL_14;
LABEL_15:
      v9 = (void *)*((_QWORD *)v2 + 4);
      if (v9 != *((void **)v2 + 6))
        free(v9);
      operator delete(v2);
      v2 = v5;
      if (!v5)
        goto LABEL_3;
    }
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
    if (!v2[112])
      goto LABEL_15;
LABEL_14:
    v2[112] = 0;
    goto LABEL_15;
  }
LABEL_3:
  a1[2] = 0;
  v3 = a1[1];
  if (v3)
  {
    for (i = 0; i != v3; ++i)
      *(_QWORD *)(*a1 + 8 * i) = 0;
  }
  a1[3] = 0;
}

unsigned __int16 *geo::linear_map<unsigned short,std::unordered_set<gdc::LayerDataRequestKey,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,std::allocator<gdc::LayerDataRequestKey>>,std::equal_to<unsigned short>,std::allocator<std::pair<unsigned short,std::unordered_set<gdc::LayerDataRequestKey,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,std::allocator<gdc::LayerDataRequestKey>>>>,std::vector<std::pair<unsigned short,std::unordered_set<gdc::LayerDataRequestKey,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,std::allocator<gdc::LayerDataRequestKey>>>>>::operator[](_QWORD *a1, unsigned __int16 a2)
{
  char *v4;
  char *v5;
  char *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  _WORD *v14;
  char *v15;
  char *v16;
  char *v17;
  unint64_t v18;
  unint64_t v19;
  _WORD *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char *v26;
  char *v27;
  _BYTE *v28;
  _BYTE *v30;
  void *v31;
  _BYTE *v32;
  void *v33;
  _BYTE *v34;
  void *v35;
  void *__p[2];
  void *v37;
  uint64_t v38;
  int v39;
  char *v40;
  char *v41;
  char *v42;
  char *v43;
  _QWORD *v44;

  v4 = (char *)*a1;
  v5 = (char *)a1[1];
  v6 = (char *)*a1;
  if ((char *)*a1 != v5)
  {
    v6 = (char *)*a1;
    while (*(unsigned __int16 *)v6 != a2)
    {
      v6 += 48;
      if (v6 == v5)
        goto LABEL_7;
    }
  }
  if (v6 == v5)
  {
LABEL_7:
    __p[0] = 0;
    __p[1] = 0;
    v37 = 0;
    v38 = 0;
    v39 = 1065353216;
    v6 = v4;
    if (v4 != v5)
    {
      while (*(unsigned __int16 *)v6 != a2)
      {
        v6 += 48;
        if (v6 == v5)
          goto LABEL_12;
      }
    }
    if (v6 != v5)
      goto LABEL_39;
LABEL_12:
    v7 = a1[2];
    if ((unint64_t)v5 < v7)
    {
      *(_WORD *)v5 = a2;
      std::unordered_set<gdc::LayerDataRequestKey,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,std::allocator<gdc::LayerDataRequestKey>>::unordered_set((uint64_t)(v5 + 8), (uint64_t)__p);
      a1[1] = v5 + 48;
      v6 = v5;
LABEL_39:
      if (__p[0])
        operator delete(__p[0]);
      return (unsigned __int16 *)(v6 + 8);
    }
    v8 = 0xAAAAAAAAAAAAAAABLL * ((v5 - v4) >> 4);
    if (v8 + 1 > 0x555555555555555)
      abort();
    v9 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v7 - (_QWORD)v4) >> 4);
    v10 = 2 * v9;
    if (2 * v9 <= v8 + 1)
      v10 = v8 + 1;
    if (v9 >= 0x2AAAAAAAAAAAAAALL)
      v11 = 0x555555555555555;
    else
      v11 = v10;
    v44 = a1 + 2;
    if (v11)
    {
      if (v11 > 0x555555555555555)
        std::__throw_bad_array_new_length[abi:nn180100]();
      v12 = (char *)operator new(48 * v11);
    }
    else
    {
      v12 = 0;
    }
    v13 = &v12[48 * v8];
    v40 = v12;
    v41 = v13;
    v42 = v13;
    v43 = &v12[48 * v11];
    *(_WORD *)v13 = a2;
    std::unordered_set<gdc::LayerDataRequestKey,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,std::allocator<gdc::LayerDataRequestKey>>::unordered_set((uint64_t)(v13 + 8), (uint64_t)__p);
    v14 = v41;
    v15 = v42 + 48;
    v16 = (char *)*a1;
    v17 = (char *)a1[1];
    if (v17 == (char *)*a1)
    {
      v26 = (char *)a1[1];
    }
    else
    {
      v18 = 0;
      do
      {
        v20 = &v14[v18 / 2];
        v21 = &v17[v18];
        *(v20 - 24) = *(_WORD *)&v17[v18 - 48];
        v22 = *(_QWORD *)&v17[v18 - 40];
        *((_QWORD *)v21 - 5) = 0;
        *((_QWORD *)v20 - 5) = v22;
        *((_QWORD *)v20 - 4) = *(_QWORD *)&v17[v18 - 32];
        *((_QWORD *)v21 - 4) = 0;
        v23 = *(_QWORD *)&v17[v18 - 24];
        *(_QWORD *)&v14[v18 / 2 - 12] = v23;
        v24 = *(_QWORD *)&v17[v18 - 16];
        *((_QWORD *)v20 - 2) = v24;
        *((_DWORD *)v20 - 2) = *(_DWORD *)&v17[v18 - 8];
        if (v24)
        {
          v19 = *(_QWORD *)(v23 + 8);
          v25 = *((_QWORD *)v20 - 4);
          if ((v25 & (v25 - 1)) != 0)
          {
            if (v19 >= v25)
              v19 %= v25;
          }
          else
          {
            v19 &= v25 - 1;
          }
          *(_QWORD *)(v22 + 8 * v19) = &v14[v18 / 2 - 12];
          *(_QWORD *)&v17[v18 - 24] = 0;
          *(_QWORD *)&v17[v18 - 16] = 0;
        }
        v18 -= 48;
      }
      while (&v17[v18] != v16);
      v14 = (_WORD *)((char *)v14 + v18);
      v26 = (char *)*a1;
      v17 = (char *)a1[1];
    }
    *a1 = v14;
    a1[1] = v15;
    v27 = (char *)a1[2];
    a1[2] = v43;
    v43 = v27;
    v40 = v26;
    v41 = v26;
    if (v17 == v26)
    {
      if (!v17)
        goto LABEL_38;
    }
    else
    {
      do
      {
        v42 = v17 - 48;
        v30 = (_BYTE *)*((_QWORD *)v17 - 3);
        if (v30)
        {
          do
          {
            if (v30[112])
              v30[112] = 0;
            v32 = *(_BYTE **)v30;
            v33 = (void *)*((_QWORD *)v30 + 4);
            if (v33 != *((void **)v30 + 6))
              free(v33);
            operator delete(v30);
            v30 = v32;
          }
          while (v32);
        }
        v31 = (void *)*((_QWORD *)v17 - 5);
        *((_QWORD *)v17 - 5) = 0;
        if (v31)
          operator delete(v31);
        v17 = v42;
      }
      while (v42 != v26);
      v17 = v40;
      if (!v40)
        goto LABEL_38;
    }
    operator delete(v17);
LABEL_38:
    v28 = v37;
    a1[1] = v15;
    v6 = v15 - 48;
    if (v28)
    {
      do
      {
        if (v28[112])
          v28[112] = 0;
        v34 = *(_BYTE **)v28;
        v35 = (void *)*((_QWORD *)v28 + 4);
        if (v35 != *((void **)v28 + 6))
          free(v35);
        operator delete(v28);
        v28 = v34;
      }
      while (v34);
    }
    goto LABEL_39;
  }
  return (unsigned __int16 *)(v6 + 8);
}

void sub_19F0F8DA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20)
{
  std::__split_buffer<std::pair<unsigned short,std::unordered_set<gdc::LayerDataRequestKey,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,std::allocator<gdc::LayerDataRequestKey>>>>::~__split_buffer((uint64_t)&a20);
  std::pair<unsigned short,std::unordered_set<gdc::LayerDataRequestKey,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,std::allocator<gdc::LayerDataRequestKey>>>::~pair((uint64_t)&a14);
  std::unordered_set<gdc::LayerDataRequestKey,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,std::allocator<gdc::LayerDataRequestKey>>::~unordered_set[abi:nn180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::unordered_set<gdc::LayerDataRequestKey,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,std::allocator<gdc::LayerDataRequestKey>>::unordered_set(uint64_t a1, uint64_t a2)
{
  size_t prime;
  int8x8_t v5;
  BOOL v6;
  unint64_t v7;
  uint8x8_t v8;
  uint64_t v9;
  unsigned __int8 *i;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  prime = *(_QWORD *)(a2 + 8);
  if (prime == 1)
  {
    prime = 2;
LABEL_17:
    std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>(a1, prime);
    goto LABEL_18;
  }
  if ((prime & (prime - 1)) != 0)
  {
    prime = std::__next_prime(*(_QWORD *)(a2 + 8));
    v5 = *(int8x8_t *)(a1 + 8);
    v6 = prime >= *(_QWORD *)&v5;
    if (prime > *(_QWORD *)&v5)
      goto LABEL_17;
  }
  else
  {
    v5 = 0;
    v6 = 1;
    if (prime)
      goto LABEL_17;
  }
  if (!v6)
  {
    v7 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(_QWORD *)&v5 < 3uLL || (v8 = (uint8x8_t)vcnt_s8(v5), v8.i16[0] = vaddlv_u8(v8), v8.u32[0] > 1uLL))
    {
      v7 = std::__next_prime(v7);
    }
    else
    {
      v9 = 1 << -(char)__clz(v7 - 1);
      if (v7 >= 2)
        v7 = v9;
    }
    if (prime <= v7)
      prime = v7;
    if (prime < *(_QWORD *)&v5)
      goto LABEL_17;
  }
LABEL_18:
  for (i = *(unsigned __int8 **)(a2 + 16); i; i = *(unsigned __int8 **)i)
    std::__hash_table<gdc::LayerDataRequestKey,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,std::allocator<gdc::LayerDataRequestKey>>::__emplace_unique_key_args<gdc::LayerDataRequestKey,gdc::LayerDataRequestKey const&>(a1, i + 16, (uint64_t)(i + 16));
  return a1;
}

void sub_19F0F8EF8(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unordered_set<gdc::LayerDataRequestKey,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,std::allocator<gdc::LayerDataRequestKey>>::~unordered_set[abi:nn180100](v1);
  _Unwind_Resume(a1);
}

void md::SceneStateManager::clear(md::SceneStateManager *this)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t i;
  __int16 *v5;
  int v6;
  unsigned __int16 *v7;
  unsigned __int16 *v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t j;
  unsigned __int16 *v13;
  unsigned __int16 *v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t k;
  unsigned __int16 *v19;
  unsigned __int16 *v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t m;
  _QWORD *v25;
  void *v26;
  void *v27;
  uint64_t v28;
  uint64_t n;

  if (*((_QWORD *)this + 4))
  {
    v2 = (_QWORD *)*((_QWORD *)this + 3);
    if (v2)
    {
      do
      {
        v25 = (_QWORD *)*v2;
        v26 = (void *)v2[16];
        if (v26 != (void *)v2[18])
          free(v26);
        if (*((_BYTE *)v2 + 112))
          *((_BYTE *)v2 + 112) = 0;
        v27 = (void *)v2[4];
        if (v27 != (void *)v2[6])
          free(v27);
        operator delete(v2);
        v2 = v25;
      }
      while (v25);
    }
    *((_QWORD *)this + 3) = 0;
    v3 = *((_QWORD *)this + 2);
    if (v3)
    {
      for (i = 0; i != v3; ++i)
        *(_QWORD *)(*((_QWORD *)this + 1) + 8 * i) = 0;
    }
    *((_QWORD *)this + 4) = 0;
  }
  std::__hash_table<std::__hash_value_type<gdc::LayerDataWithWorld,std::shared_ptr<gdc::SubtileClipMask>>,std::__unordered_map_hasher<gdc::LayerDataWithWorld,std::__hash_value_type<gdc::LayerDataWithWorld,std::shared_ptr<gdc::SubtileClipMask>>,gdc::LayerDataWithWorldHash,std::equal_to<gdc::LayerDataWithWorld>,true>,std::__unordered_map_equal<gdc::LayerDataWithWorld,std::__hash_value_type<gdc::LayerDataWithWorld,std::shared_ptr<gdc::SubtileClipMask>>,std::equal_to<gdc::LayerDataWithWorld>,gdc::LayerDataWithWorldHash,true>,std::allocator<std::__hash_value_type<gdc::LayerDataWithWorld,std::shared_ptr<gdc::SubtileClipMask>>>>::clear((_QWORD *)this + 9);
  v5 = &md::TileSelectionTileSetTypeList;
  do
  {
    v6 = (unsigned __int16)*v5;
    v8 = (unsigned __int16 *)*((_QWORD *)this + 14);
    v7 = (unsigned __int16 *)*((_QWORD *)this + 15);
    if (v8 != v7)
    {
      while (v6 != *v8)
      {
        v8 += 56;
        if (v8 == v7)
        {
          v8 = (unsigned __int16 *)*((_QWORD *)this + 15);
          break;
        }
      }
    }
    v8[4] = 0;
    *((_BYTE *)v8 + 10) = 0;
    if (*((_QWORD *)v8 + 11))
    {
      v9 = (_QWORD *)*((_QWORD *)v8 + 10);
      if (v9)
      {
        do
        {
          v10 = (_QWORD *)*v9;
          operator delete(v9);
          v9 = v10;
        }
        while (v10);
      }
      *((_QWORD *)v8 + 10) = 0;
      v11 = *((_QWORD *)v8 + 9);
      if (v11)
      {
        for (j = 0; j != v11; ++j)
          *(_QWORD *)(*((_QWORD *)v8 + 8) + 8 * j) = 0;
      }
      *((_QWORD *)v8 + 11) = 0;
    }
    gdc::LayerDataCollector::clear(*((gdc::LayerDataCollector **)v8 + 13));
    v14 = (unsigned __int16 *)*((_QWORD *)this + 17);
    v13 = (unsigned __int16 *)*((_QWORD *)this + 18);
    if (v14 != v13)
    {
      while (v6 != *v14)
      {
        v14 += 56;
        if (v14 == v13)
        {
          v14 = (unsigned __int16 *)*((_QWORD *)this + 18);
          break;
        }
      }
    }
    v14[4] = 0;
    *((_BYTE *)v14 + 10) = 0;
    if (*((_QWORD *)v14 + 11))
    {
      v15 = (_QWORD *)*((_QWORD *)v14 + 10);
      if (v15)
      {
        do
        {
          v16 = (_QWORD *)*v15;
          operator delete(v15);
          v15 = v16;
        }
        while (v16);
      }
      *((_QWORD *)v14 + 10) = 0;
      v17 = *((_QWORD *)v14 + 9);
      if (v17)
      {
        for (k = 0; k != v17; ++k)
          *(_QWORD *)(*((_QWORD *)v14 + 8) + 8 * k) = 0;
      }
      *((_QWORD *)v14 + 11) = 0;
    }
    gdc::LayerDataCollector::clear(*((gdc::LayerDataCollector **)v14 + 13));
    v20 = (unsigned __int16 *)*((_QWORD *)this + 20);
    v19 = (unsigned __int16 *)*((_QWORD *)this + 21);
    if (v20 != v19)
    {
      while (v6 != *v20)
      {
        v20 += 56;
        if (v20 == v19)
        {
          v20 = (unsigned __int16 *)*((_QWORD *)this + 21);
          break;
        }
      }
    }
    v20[4] = 0;
    *((_BYTE *)v20 + 10) = 0;
    if (*((_QWORD *)v20 + 11))
    {
      v21 = (_QWORD *)*((_QWORD *)v20 + 10);
      if (v21)
      {
        do
        {
          v22 = (_QWORD *)*v21;
          operator delete(v21);
          v21 = v22;
        }
        while (v22);
      }
      *((_QWORD *)v20 + 10) = 0;
      v23 = *((_QWORD *)v20 + 9);
      if (v23)
      {
        for (m = 0; m != v23; ++m)
          *(_QWORD *)(*((_QWORD *)v20 + 8) + 8 * m) = 0;
      }
      *((_QWORD *)v20 + 11) = 0;
    }
    gdc::LayerDataCollector::clear(*((gdc::LayerDataCollector **)v20 + 13));
    ++v5;
  }
  while (v5 != (__int16 *)&unk_1A007D9DA);
  if (*((_QWORD *)this + 57))
  {
    std::__hash_table<std::__hash_value_type<md::TileSelectionTileSetType,std::unordered_map<unsigned short,std::unordered_map<geo::QuadTile,std::bitset<8ul>,geo::QuadTileHash,std::equal_to<geo::QuadTile>,std::allocator<std::pair<geo::QuadTile const,std::bitset<8ul>>>>>>,std::__unordered_map_hasher<md::TileSelectionTileSetType,std::__hash_value_type<md::TileSelectionTileSetType,std::unordered_map<unsigned short,std::unordered_map<geo::QuadTile,std::bitset<8ul>,geo::QuadTileHash,std::equal_to<geo::QuadTile>,std::allocator<std::pair<geo::QuadTile const,std::bitset<8ul>>>>>>,std::hash<md::TileSelectionTileSetType>,std::equal_to<md::TileSelectionTileSetType>,true>,std::__unordered_map_equal<md::TileSelectionTileSetType,std::__hash_value_type<md::TileSelectionTileSetType,std::unordered_map<unsigned short,std::unordered_map<geo::QuadTile,std::bitset<8ul>,geo::QuadTileHash,std::equal_to<geo::QuadTile>,std::allocator<std::pair<geo::QuadTile const,std::bitset<8ul>>>>>>,std::equal_to<md::TileSelectionTileSetType>,std::hash<md::TileSelectionTileSetType>,true>,std::allocator<std::__hash_value_type<md::TileSelectionTileSetType,std::unordered_map<unsigned short,std::unordered_map<geo::QuadTile,std::bitset<8ul>,geo::QuadTileHash,std::equal_to<geo::QuadTile>,std::allocator<std::pair<geo::QuadTile const,std::bitset<8ul>>>>>>>>::__deallocate_node(*((_QWORD **)this + 56));
    *((_QWORD *)this + 56) = 0;
    v28 = *((_QWORD *)this + 55);
    if (v28)
    {
      for (n = 0; n != v28; ++n)
        *(_QWORD *)(*((_QWORD *)this + 54) + 8 * n) = 0;
    }
    *((_QWORD *)this + 57) = 0;
  }
}

void gdc::LayerDataCollector::clear(gdc::LayerDataCollector *this)
{
  _BYTE *v2;
  uint64_t v3;
  uint64_t i;
  uint64_t v5;
  uint64_t j;
  void *v7;
  _BYTE *v8;
  void *v9;
  uint64_t v10;
  uint64_t k;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  void *v18;

  if (*((_QWORD *)this + 9))
  {
    v2 = (_BYTE *)*((_QWORD *)this + 8);
    if (v2)
    {
      do
      {
        if (v2[112])
          v2[112] = 0;
        v8 = *(_BYTE **)v2;
        v9 = (void *)*((_QWORD *)v2 + 4);
        if (v9 != *((void **)v2 + 6))
          free(v9);
        operator delete(v2);
        v2 = v8;
      }
      while (v8);
    }
    *((_QWORD *)this + 8) = 0;
    v3 = *((_QWORD *)this + 7);
    if (v3)
    {
      for (i = 0; i != v3; ++i)
        *(_QWORD *)(*((_QWORD *)this + 6) + 8 * i) = 0;
    }
    *((_QWORD *)this + 9) = 0;
  }
  v5 = *(_QWORD *)this;
  for (j = *((_QWORD *)this + 1); j != v5; j -= 144)
  {
    if (*(_BYTE *)(j - 48))
      *(_BYTE *)(j - 48) = 0;
    v7 = *(void **)(j - 128);
    if (v7 != *(void **)(j - 112))
      free(v7);
  }
  *((_QWORD *)this + 1) = v5;
  v10 = *((_QWORD *)this + 3);
  for (k = *((_QWORD *)this + 4); k != v10; k -= 32)
  {
    v13 = *(_QWORD *)(k - 24);
    if (v13)
    {
      v14 = *(_QWORD *)(k - 16);
      v12 = *(void **)(k - 24);
      if (v14 == v13)
      {
LABEL_21:
        *(_QWORD *)(k - 16) = v13;
        operator delete(v12);
        continue;
      }
      while (2)
      {
        v15 = *(std::__shared_weak_count **)(v14 - 24);
        if (!v15)
          goto LABEL_41;
        p_shared_owners = (unint64_t *)&v15->__shared_owners_;
        do
          v17 = __ldaxr(p_shared_owners);
        while (__stlxr(v17 - 1, p_shared_owners));
        if (!v17)
        {
          ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
          std::__shared_weak_count::__release_weak(v15);
          if (*(_BYTE *)(v14 - 48))
LABEL_33:
            *(_BYTE *)(v14 - 48) = 0;
        }
        else
        {
LABEL_41:
          if (*(_BYTE *)(v14 - 48))
            goto LABEL_33;
        }
        v18 = *(void **)(v14 - 128);
        if (v18 != *(void **)(v14 - 112))
          free(v18);
        v14 -= 144;
        if (v14 == v13)
        {
          v12 = *(void **)(k - 24);
          goto LABEL_21;
        }
        continue;
      }
    }
  }
  *((_QWORD *)this + 4) = v10;
}

uint64_t std::__split_buffer<std::pair<unsigned short,std::unordered_set<gdc::LayerDataRequestKey,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,std::allocator<gdc::LayerDataRequestKey>>>>::~__split_buffer(uint64_t a1)
{
  uint64_t v2;
  uint64_t i;
  _BYTE *v4;
  void *v5;
  _BYTE *v6;
  void *v7;

  v2 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v2; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 48;
    v4 = *(_BYTE **)(i - 24);
    if (v4)
    {
      do
      {
        if (v4[112])
          v4[112] = 0;
        v6 = *(_BYTE **)v4;
        v7 = (void *)*((_QWORD *)v4 + 4);
        if (v7 != *((void **)v4 + 6))
          free(v7);
        operator delete(v4);
        v4 = v6;
      }
      while (v6);
    }
    v5 = *(void **)(i - 40);
    *(_QWORD *)(i - 40) = 0;
    if (v5)
      operator delete(v5);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t md::DaVinciElevationRaster::estimatedCost(md::DaVinciElevationRaster *this)
{
  return 2 * (*(_QWORD *)(*((_QWORD *)this + 90) + 16) - **((_QWORD **)this + 90));
}

void md::MercatorTerrainHeightCache::invalidateRect(_QWORD *a1, double *a2)
{
  _QWORD *v2;
  _QWORD *v4;
  char *v5;
  char *v6;
  char *v7;
  _QWORD *v8;
  uint64_t v9;
  double v10;
  double v11;
  BOOL v12;
  BOOL v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  _BYTE *v17;
  char *v18;
  char *v19;
  unint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  _OWORD *v24;
  char *v25;
  uint64_t v26;
  __int128 v27;
  char *v28;
  uint64_t v29;
  id WeakRetained;
  void *__p;

  v2 = (_QWORD *)a1[2];
  if (!v2)
    return;
  v4 = a1;
  v5 = 0;
  v6 = 0;
  v7 = 0;
  do
  {
    v9 = v2[2];
    v10 = (*(double (**)(uint64_t))(*(_QWORD *)v9 + 56))(v9);
    if (v10 < *a2 || (v10 < a2[2] ? (v12 = v11 < a2[1]) : (v12 = 1), !v12 ? (v13 = v11 < a2[3]) : (v13 = 0), !v13))
    {
      v8 = (_QWORD *)*v2;
      goto LABEL_4;
    }
    v8 = (_QWORD *)*v2;
    std::__hash_table<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::__unordered_map_hasher<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,true>,std::__unordered_map_equal<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::equal_to<gdc::LayerDataRequestKey>,gdc::LayerDataRequestKeyHash,true>,std::allocator<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>>>::remove((uint64_t)&__p, v4, v2);
    if (__p)
      operator delete(__p);
    if (v6 < v7)
    {
      *(_QWORD *)v6 = v9;
      v6 += 8;
      goto LABEL_4;
    }
    v14 = (v6 - v5) >> 3;
    v15 = v14 + 1;
    if ((unint64_t)(v14 + 1) >> 61)
      abort();
    if ((v7 - v5) >> 2 > v15)
      v15 = (v7 - v5) >> 2;
    if ((unint64_t)(v7 - v5) >= 0x7FFFFFFFFFFFFFF8)
      v16 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v16 = v15;
    if (v16)
    {
      if (v16 >> 61)
        std::__throw_bad_array_new_length[abi:nn180100]();
      v17 = operator new(8 * v16);
    }
    else
    {
      v17 = 0;
    }
    v18 = &v17[8 * v14];
    *(_QWORD *)v18 = v9;
    v19 = v18 + 8;
    if (v6 != v5)
    {
      v20 = v6 - 8 - v5;
      if (v20 >= 0x168)
      {
        if (&v17[v6 - v5 - 8 - (v20 & 0xFFFFFFFFFFFFFFF8)] > &v17[v6 - v5 - 8])
        {
          v21 = v6;
        }
        else if (&v6[-(v20 & 0xFFFFFFFFFFFFFFF8) - 8] > v6 - 8)
        {
          v21 = v6;
        }
        else if ((unint64_t)(v5 - v17) >= 0x20)
        {
          v23 = (v20 >> 3) + 1;
          v21 = &v6[-8 * (v23 & 0x3FFFFFFFFFFFFFFCLL)];
          v24 = &v17[8 * v14 - 16];
          v25 = v6 - 16;
          v26 = v23 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v27 = *(_OWORD *)v25;
            *(v24 - 1) = *((_OWORD *)v25 - 1);
            *v24 = v27;
            v24 -= 2;
            v25 -= 32;
            v26 -= 4;
          }
          while (v26);
          v18 -= 8 * (v23 & 0x3FFFFFFFFFFFFFFCLL);
          if (v23 == (v23 & 0x3FFFFFFFFFFFFFFCLL))
            goto LABEL_32;
        }
        else
        {
          v21 = v6;
        }
      }
      else
      {
        v21 = v6;
      }
      do
      {
        v22 = *((_QWORD *)v21 - 1);
        v21 -= 8;
        *((_QWORD *)v18 - 1) = v22;
        v18 -= 8;
      }
      while (v21 != v5);
    }
LABEL_32:
    v7 = &v17[8 * v16];
    if (v5)
      operator delete(v5);
    v6 = v19;
    v5 = v18;
    v4 = a1;
LABEL_4:
    v2 = v8;
  }
  while (v8);
  if (v5 != v6)
  {
    v28 = v5;
    do
    {
      v29 = *(_QWORD *)v28;
      WeakRetained = objc_loadWeakRetained((id *)(*(_QWORD *)v28 + 64));
      objc_msgSend(WeakRetained, "anchorWorldPointDidChange:", v29);

      v28 += 8;
    }
    while (v28 != v6);
  }
  if (v5)
    operator delete(v5);
}

void sub_19F0F9680(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

unint64_t md::DaVinciMetaTileData::estimatedCost(md::DaVinciMetaTileData *this)
{
  return *((_QWORD *)this + 99)
       - *((_QWORD *)this + 97)
       + vcvtpd_u64_f64((double)(unint64_t)(*((_QWORD *)this + 96) << 6) * 0.125)
       + vcvtpd_u64_f64((double)(unint64_t)(*((_QWORD *)this + 93) << 6) * 0.125);
}

void __destroy_helper_block_ea8_56c51_ZTSNSt3__110shared_ptrIN3ggl17RenderTransactionEEE(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 64);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void __Block_byref_object_dispose__3(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 56);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void gms::ZoomablePropertyStore<gm::Matrix<float,2,1>>::getProperty(_QWORD *a1@<X0>, uint64_t a2@<X8>, float a3@<S0>)
{
  unsigned int v4;
  unsigned int v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  unint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  BOOL v13;
  unint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  BOOL v19;
  _QWORD *v20;
  BOOL v21;
  unsigned __int8 v22;
  _QWORD *v23;
  unint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  unint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  uint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  uint64_t v34;
  float v35;
  _QWORD *v36;
  unint64_t v37;
  _QWORD *v38;
  _QWORD *v39;
  _QWORD *v40;
  unint64_t v41;
  _QWORD *v42;
  _QWORD *v43;
  _QWORD *v44;
  unint64_t v45;
  _QWORD *v46;
  _QWORD *v47;
  uint64_t v48;
  _QWORD *v49;
  _QWORD *v50;
  BOOL v51;
  unint64_t v52;
  _QWORD *v53;
  _QWORD *v54;
  uint64_t v55;
  _QWORD *v56;
  _QWORD *v57;
  BOOL v58;
  unint64_t v59;
  _QWORD *v60;
  _QWORD *v61;
  _QWORD *v62;
  unint64_t v63;
  _QWORD *v64;
  _QWORD *v65;
  uint64_t v66;
  _QWORD *v67;
  _QWORD *v68;
  float v69;
  int v70;
  uint64_t v71;
  uint64_t v72;
  float v73;

  *(_BYTE *)a2 = 0;
  v4 = vcvtms_s32_f32(a3);
  if (v4 >= 0x17)
    v5 = 23;
  else
    v5 = v4;
  v6 = (_QWORD *)a1[5];
  v7 = a1 + 6;
  v8 = v6;
  if (v6 != a1 + 6)
  {
    v9 = 0;
    v10 = (_QWORD *)a1[5];
    do
    {
      v11 = (_QWORD *)v10[1];
      if (v11)
      {
        do
        {
          v12 = v11;
          v11 = (_QWORD *)*v11;
        }
        while (v11);
      }
      else
      {
        do
        {
          v12 = (_QWORD *)v10[2];
          v13 = *v12 == (_QWORD)v10;
          v10 = v12;
        }
        while (!v13);
      }
      ++v9;
      v10 = v12;
    }
    while (v12 != v7);
    v8 = (_QWORD *)a1[5];
    do
    {
      v14 = v9 >> 1;
      v15 = v8;
      if (v9 != 1)
      {
        v17 = v9 >> 1;
        v18 = v8;
        do
        {
          v20 = (_QWORD *)v18[1];
          if (v20)
          {
            do
            {
              v15 = v20;
              v20 = (_QWORD *)*v20;
            }
            while (v20);
          }
          else
          {
            do
            {
              v15 = (_QWORD *)v18[2];
              v13 = *v15 == (_QWORD)v18;
              v18 = v15;
            }
            while (!v13);
          }
          v18 = v15;
          v19 = v17-- <= 1;
        }
        while (!v19);
      }
      if (v5 >= *((unsigned __int8 *)v15 + 29))
      {
        v16 = (_QWORD *)v15[1];
        if (v16)
        {
          do
          {
            v8 = v16;
            v16 = (_QWORD *)*v16;
          }
          while (v16);
        }
        else
        {
          do
          {
            v8 = (_QWORD *)v15[2];
            v13 = *v8 == (_QWORD)v15;
            v15 = v8;
          }
          while (!v13);
        }
        v14 = v9 + ~v14;
      }
      v9 = v14;
    }
    while (v14);
  }
  if (v8 == v7 || (v5 >= *((unsigned __int8 *)v8 + 28) ? (v21 = v5 >= *((unsigned __int8 *)v8 + 29)) : (v21 = 1), v21))
    v8 = a1 + 6;
  v22 = v5 + 1;
  v23 = (_QWORD *)a1[5];
  if (v6 != v7)
  {
    v24 = 0;
    v25 = (_QWORD *)a1[5];
    do
    {
      v26 = (_QWORD *)v25[1];
      if (v26)
      {
        do
        {
          v27 = v26;
          v26 = (_QWORD *)*v26;
        }
        while (v26);
      }
      else
      {
        do
        {
          v27 = (_QWORD *)v25[2];
          v13 = *v27 == (_QWORD)v25;
          v25 = v27;
        }
        while (!v13);
      }
      ++v24;
      v25 = v27;
    }
    while (v27 != v7);
    v23 = (_QWORD *)a1[5];
    do
    {
      v28 = v24 >> 1;
      v29 = v23;
      if (v24 != 1)
      {
        v31 = v24 >> 1;
        v32 = v23;
        do
        {
          v33 = (_QWORD *)v32[1];
          if (v33)
          {
            do
            {
              v29 = v33;
              v33 = (_QWORD *)*v33;
            }
            while (v33);
          }
          else
          {
            do
            {
              v29 = (_QWORD *)v32[2];
              v13 = *v29 == (_QWORD)v32;
              v32 = v29;
            }
            while (!v13);
          }
          v32 = v29;
          v19 = v31-- <= 1;
        }
        while (!v19);
      }
      if (*((unsigned __int8 *)v29 + 29) <= v22)
      {
        v30 = (_QWORD *)v29[1];
        if (v30)
        {
          do
          {
            v23 = v30;
            v30 = (_QWORD *)*v30;
          }
          while (v30);
        }
        else
        {
          do
          {
            v23 = (_QWORD *)v29[2];
            v13 = *v23 == (_QWORD)v29;
            v29 = v23;
          }
          while (!v13);
        }
        v28 = v24 + ~v28;
      }
      v24 = v28;
    }
    while (v28);
  }
  if (v23 == v7
    || *((unsigned __int8 *)v23 + 28) > v22
    || *((unsigned __int8 *)v23 + 29) <= v22)
  {
    v23 = a1 + 6;
  }
  if (v8 != v7 && a1[7])
  {
    if (v23 == v7 || (v34 = a1[4]) == 0 || (v35 = a3 - (float)v5, v35 > 1.0) || v35 < 0.0)
    {
      if (v6 != v7)
      {
        v41 = 0;
        v42 = v6;
        do
        {
          v43 = (_QWORD *)v42[1];
          if (v43)
          {
            do
            {
              v44 = v43;
              v43 = (_QWORD *)*v43;
            }
            while (v43);
          }
          else
          {
            do
            {
              v44 = (_QWORD *)v42[2];
              v13 = *v44 == (_QWORD)v42;
              v42 = v44;
            }
            while (!v13);
          }
          ++v41;
          v42 = v44;
        }
        while (v44 != v7);
        do
        {
          v45 = v41 >> 1;
          v46 = v6;
          if (v41 != 1)
          {
            v48 = v41 >> 1;
            v49 = v6;
            do
            {
              v50 = (_QWORD *)v49[1];
              if (v50)
              {
                do
                {
                  v46 = v50;
                  v50 = (_QWORD *)*v50;
                }
                while (v50);
              }
              else
              {
                do
                {
                  v46 = (_QWORD *)v49[2];
                  v13 = *v46 == (_QWORD)v49;
                  v49 = v46;
                }
                while (!v13);
              }
              v49 = v46;
              v19 = v48-- <= 1;
            }
            while (!v19);
          }
          if (v5 >= *((unsigned __int8 *)v46 + 29))
          {
            v47 = (_QWORD *)v46[1];
            if (v47)
            {
              do
              {
                v6 = v47;
                v47 = (_QWORD *)*v47;
              }
              while (v47);
            }
            else
            {
              do
              {
                v6 = (_QWORD *)v46[2];
                v13 = *v6 == (_QWORD)v46;
                v46 = v6;
              }
              while (!v13);
            }
            v45 = v41 + ~v45;
          }
          v41 = v45;
        }
        while (v45);
      }
      if (v6 == v7
        || (v5 >= *((unsigned __int8 *)v6 + 28) ? (v51 = v5 >= *((unsigned __int8 *)v6 + 29)) : (v51 = 1), v51))
      {
        v6 = v7;
      }
      *(_BYTE *)a2 = 1;
      *(_QWORD *)(a2 + 4) = v6[4];
    }
    else
    {
      v36 = v6;
      if (v6 != v7)
      {
        v37 = 0;
        v38 = v6;
        do
        {
          v39 = (_QWORD *)v38[1];
          if (v39)
          {
            do
            {
              v40 = v39;
              v39 = (_QWORD *)*v39;
            }
            while (v39);
          }
          else
          {
            do
            {
              v40 = (_QWORD *)v38[2];
              v13 = *v40 == (_QWORD)v38;
              v38 = v40;
            }
            while (!v13);
          }
          ++v37;
          v38 = v40;
        }
        while (v40 != v7);
        v36 = v6;
        do
        {
          v52 = v37 >> 1;
          v53 = v36;
          if (v37 != 1)
          {
            v55 = v37 >> 1;
            v56 = v36;
            do
            {
              v57 = (_QWORD *)v56[1];
              if (v57)
              {
                do
                {
                  v53 = v57;
                  v57 = (_QWORD *)*v57;
                }
                while (v57);
              }
              else
              {
                do
                {
                  v53 = (_QWORD *)v56[2];
                  v13 = *v53 == (_QWORD)v56;
                  v56 = v53;
                }
                while (!v13);
              }
              v56 = v53;
              v19 = v55-- <= 1;
            }
            while (!v19);
          }
          if (v5 >= *((unsigned __int8 *)v53 + 29))
          {
            v54 = (_QWORD *)v53[1];
            if (v54)
            {
              do
              {
                v36 = v54;
                v54 = (_QWORD *)*v54;
              }
              while (v54);
            }
            else
            {
              do
              {
                v36 = (_QWORD *)v53[2];
                v13 = *v36 == (_QWORD)v53;
                v53 = v36;
              }
              while (!v13);
            }
            v52 = v37 + ~v52;
          }
          v37 = v52;
        }
        while (v52);
      }
      if (v36 == v7
        || (v5 >= *((unsigned __int8 *)v36 + 28) ? (v58 = v5 >= *((unsigned __int8 *)v36 + 29)) : (v58 = 1), v58))
      {
        v36 = v7;
      }
      v72 = v36[4];
      if (v6 != v7)
      {
        v59 = 0;
        v60 = v6;
        do
        {
          v61 = (_QWORD *)v60[1];
          if (v61)
          {
            do
            {
              v62 = v61;
              v61 = (_QWORD *)*v61;
            }
            while (v61);
          }
          else
          {
            do
            {
              v62 = (_QWORD *)v60[2];
              v13 = *v62 == (_QWORD)v60;
              v60 = v62;
            }
            while (!v13);
          }
          ++v59;
          v60 = v62;
        }
        while (v62 != v7);
        do
        {
          v63 = v59 >> 1;
          v64 = v6;
          if (v59 != 1)
          {
            v66 = v59 >> 1;
            v67 = v6;
            do
            {
              v68 = (_QWORD *)v67[1];
              if (v68)
              {
                do
                {
                  v64 = v68;
                  v68 = (_QWORD *)*v68;
                }
                while (v68);
              }
              else
              {
                do
                {
                  v64 = (_QWORD *)v67[2];
                  v13 = *v64 == (_QWORD)v67;
                  v67 = v64;
                }
                while (!v13);
              }
              v67 = v64;
              v19 = v66-- <= 1;
            }
            while (!v19);
          }
          if (*((unsigned __int8 *)v64 + 29) <= v22)
          {
            v65 = (_QWORD *)v64[1];
            if (v65)
            {
              do
              {
                v6 = v65;
                v65 = (_QWORD *)*v65;
              }
              while (v65);
            }
            else
            {
              do
              {
                v6 = (_QWORD *)v64[2];
                v13 = *v6 == (_QWORD)v64;
                v64 = v6;
              }
              while (!v13);
            }
            v63 = v59 + ~v63;
          }
          v59 = v63;
        }
        while (v63);
      }
      if (v6 == v7
        || *((unsigned __int8 *)v6 + 28) > v22
        || *((unsigned __int8 *)v6 + 29) <= v22)
      {
        v6 = v7;
      }
      v71 = v6[4];
      v73 = v35;
      v69 = (*(float (**)(uint64_t, float *, uint64_t *, uint64_t *))(*(_QWORD *)v34 + 48))(v34, &v73, &v72, &v71);
      *(_BYTE *)a2 = 1;
      *(float *)(a2 + 4) = v69;
      *(_DWORD *)(a2 + 8) = v70;
    }
  }
}

uint64_t gms::_BasicMaterial<ggl::Texture2D>::saturationRemapRange@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t (***v3)(_QWORD);
  uint64_t result;

  v3 = *(uint64_t (****)(_QWORD))(a1 + 192);
  if (v3)
    return (**v3)(v3);
  result = *(_QWORD *)(a1 + 72);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 504))(result);
  *a2 = 0;
  return result;
}

uint64_t gms::_BasicMaterial<ggl::Texture2D>::brightnessRemapRange@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t (***v3)(_QWORD);
  uint64_t result;

  v3 = *(uint64_t (****)(_QWORD))(a1 + 200);
  if (v3)
    return (**v3)(v3);
  result = *(_QWORD *)(a1 + 72);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 528))(result);
  *a2 = 0;
  return result;
}

_QWORD *gms::BasicMaterial<ggl::Texture2D>::saturationRemapRange@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, float a3@<S0>)
{
  float v6;
  uint64_t v7;
  _QWORD *result;
  uint64_t v9;
  float32x2_t v10;
  float v11;
  char v12[4];
  float32x2_t v13;
  char v14[4];
  float32x2_t v15;

  v6 = **(float **)(a1 + 48);
  if (v6 <= 0.00000011921)
  {
    v7 = *(_QWORD *)(a1 + 16);
    if (v7)
      return (_QWORD *)(*(uint64_t (**)(uint64_t, float))(*(_QWORD *)v7 + 504))(v7, a3);
  }
  if (v6 >= 1.0)
  {
    v7 = *(_QWORD *)(a1 + 32);
    if (v7)
      return (_QWORD *)(*(uint64_t (**)(uint64_t, float))(*(_QWORD *)v7 + 504))(v7, a3);
  }
  v11 = v6;
  v9 = *(_QWORD *)(a1 + 16);
  if (v9)
  {
    (*(void (**)(char *__return_ptr, float))(*(_QWORD *)v9 + 504))(v14, a3);
    result = *(_QWORD **)(a1 + 32);
    if (result)
      goto LABEL_8;
LABEL_12:
    v12[0] = 0;
    if (v14[0])
      goto LABEL_9;
    goto LABEL_13;
  }
  v14[0] = 0;
  result = *(_QWORD **)(a1 + 32);
  if (!result)
    goto LABEL_12;
LABEL_8:
  result = (*(_QWORD *(**)(char *__return_ptr, float))(*result + 504))(v12, a3);
  if (v14[0])
  {
LABEL_9:
    if (v12[0])
    {
      *(_BYTE *)a2 = 1;
      *(float32x2_t *)(a2 + 4) = vmla_n_f32(v15, vsub_f32(v13, v15), v11);
      return result;
    }
    v10 = v15;
    goto LABEL_16;
  }
LABEL_13:
  *(_BYTE *)a2 = 0;
  if (!v12[0])
    return result;
  v10 = v13;
LABEL_16:
  *(float32x2_t *)(a2 + 4) = v10;
  *(_BYTE *)a2 = 1;
  return result;
}

_QWORD *gms::BasicMaterial<ggl::Texture2D>::brightnessRemapRange@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, float a3@<S0>)
{
  float v6;
  uint64_t v7;
  _QWORD *result;
  uint64_t v9;
  float32x2_t v10;
  float v11;
  char v12[4];
  float32x2_t v13;
  char v14[4];
  float32x2_t v15;

  v6 = **(float **)(a1 + 48);
  if (v6 <= 0.00000011921)
  {
    v7 = *(_QWORD *)(a1 + 16);
    if (v7)
      return (_QWORD *)(*(uint64_t (**)(uint64_t, float))(*(_QWORD *)v7 + 528))(v7, a3);
  }
  if (v6 >= 1.0)
  {
    v7 = *(_QWORD *)(a1 + 32);
    if (v7)
      return (_QWORD *)(*(uint64_t (**)(uint64_t, float))(*(_QWORD *)v7 + 528))(v7, a3);
  }
  v11 = v6;
  v9 = *(_QWORD *)(a1 + 16);
  if (v9)
  {
    (*(void (**)(char *__return_ptr, float))(*(_QWORD *)v9 + 528))(v14, a3);
    result = *(_QWORD **)(a1 + 32);
    if (result)
      goto LABEL_8;
LABEL_12:
    v12[0] = 0;
    if (v14[0])
      goto LABEL_9;
    goto LABEL_13;
  }
  v14[0] = 0;
  result = *(_QWORD **)(a1 + 32);
  if (!result)
    goto LABEL_12;
LABEL_8:
  result = (*(_QWORD *(**)(char *__return_ptr, float))(*result + 528))(v12, a3);
  if (v14[0])
  {
LABEL_9:
    if (v12[0])
    {
      *(_BYTE *)a2 = 1;
      *(float32x2_t *)(a2 + 4) = vmla_n_f32(v15, vsub_f32(v13, v15), v11);
      return result;
    }
    v10 = v15;
    goto LABEL_16;
  }
LABEL_13:
  *(_BYTE *)a2 = 0;
  if (!v12[0])
    return result;
  v10 = v13;
LABEL_16:
  *(float32x2_t *)(a2 + 4) = v10;
  *(_BYTE *)a2 = 1;
  return result;
}

uint64_t gms::NonZoomablePropertyStore<gm::Matrix<float,2,1>>::getProperty@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_BYTE *)a2 = 0;
  if (*(_BYTE *)(result + 8))
  {
    *(_QWORD *)(a2 + 4) = *(_QWORD *)(result + 12);
    *(_BYTE *)a2 = 1;
  }
  return result;
}

float geo::Frustum<float>::calculateCorners(float *a1, float *a2)
{
  float v3;
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float result;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float v49;
  float v50;
  float v51;
  float v52;
  float v53;
  float v54;
  float v55;

  gm::Matrix<float,4,4>::inverted<int,void>(&v40, a2);
  v3 = v40;
  v4 = v41;
  v6 = v44;
  v5 = v45;
  v7 = v44 + v40;
  v8 = v52;
  v9 = v53;
  v10 = v45 + v41;
  v11 = v48;
  v12 = v49;
  v13 = v42;
  v14 = v43;
  v15 = v46;
  v16 = v47;
  v17 = v46 + v42;
  v18 = v54;
  v19 = v55;
  v20 = v47 + v43;
  v21 = v50;
  v22 = v51;
  v23 = 1.0 / (float)(v55 - (float)(v47 + v43));
  v24 = v23 * (float)(v53 - (float)(v45 + v41));
  v25 = v23 * (float)(v54 - (float)(v46 + v42));
  a1[24] = v23 * (float)(v52 - (float)(v44 + v40));
  a1[25] = v24;
  v26 = v8 + v11;
  v27 = v19 + v22;
  v28 = 1.0 / (float)((float)(v19 + v22) - v20);
  a1[26] = v25;
  a1[27] = v28 * (float)((float)(v8 + v11) - v7);
  a1[28] = v28 * (float)((float)(v9 + v12) - v10);
  a1[29] = v28 * (float)((float)(v18 + v21) - v17);
  v29 = 1.0 / (float)(v19 + (float)(v16 - v14));
  a1[30] = v29 * (float)(v8 + (float)(v6 - v3));
  a1[31] = v29 * (float)(v9 + (float)(v5 - v4));
  v30 = 1.0 / (float)(v27 + (float)(v16 - v14));
  a1[32] = v29 * (float)(v18 + (float)(v15 - v13));
  a1[33] = v30 * (float)((float)(v8 + v11) + (float)(v6 - v3));
  a1[34] = v30 * (float)((float)(v9 + v12) + (float)(v5 - v4));
  a1[35] = v30 * (float)((float)(v18 + v21) + (float)(v15 - v13));
  v31 = v3 - v6;
  v32 = v4 - v5;
  v33 = v13 - v15;
  v34 = v14 - v16;
  v35 = 1.0 / (float)(v19 + v34);
  a1[36] = v35 * (float)(v8 + v31);
  a1[37] = v35 * (float)(v9 + v32);
  v36 = 1.0 / (float)(v27 + v34);
  a1[38] = v35 * (float)(v18 + v33);
  a1[39] = v36 * (float)((float)(v8 + v11) + v31);
  a1[40] = v36 * (float)((float)(v9 + v12) + v32);
  a1[41] = v36 * (float)((float)(v18 + v21) + v33);
  v37 = 1.0 / (float)(v19 + v20);
  a1[42] = v37 * (float)(v8 + v7);
  a1[43] = v37 * (float)(v9 + v10);
  v38 = 1.0 / (float)(v27 + v20);
  a1[44] = v37 * (float)(v18 + v17);
  a1[45] = v38 * (float)(v26 + v7);
  result = v38 * (float)((float)(v18 + v21) + v17);
  a1[46] = v38 * (float)((float)(v9 + v12) + v10);
  a1[47] = result;
  return result;
}

float gm::Matrix<float,4,4>::inverted<int,void>(float *a1, float *a2)
{
  float v2;
  float v3;
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float result;

  v2 = a2[12];
  v3 = a2[13];
  v5 = a2[8];
  v4 = a2[9];
  v6 = a2[7];
  v7 = a2[11];
  v8 = v2;
  v10 = a2[5];
  v9 = a2[6];
  v11 = a2[4];
  v12 = a2[14];
  v13 = a2[15];
  v14 = a2[10];
  v16 = a2[3];
  v15 = v11;
  v18 = a2[1];
  v17 = a2[2];
  v19 = *a2;
  v20 = 1.0
      / (float)((float)((float)((float)((float)((float)((float)((float)((float)((float)(v4 * v2) - (float)(v3 * v5)) * v9)
                                                              + (float)((float)((float)(v10 * v5) - (float)(v11 * v4))
                                                                      * v12))
                                                      + (float)((float)((float)(v11 * v3) - (float)(v10 * v2)) * v14))
                                              * v16)
                                      + (float)((float)((float)((float)((float)(v18 * v11) * v12)
                                                              + (float)(v17 * (float)(v10 * v2)))
                                                      + (float)((float)(*a2 * v3) * v9))
                                              * v7))
                              + (float)((float)((float)((float)(v17 * (float)(v11 * v4))
                                                      + (float)((float)(v18 * v5) * v9))
                                              + (float)((float)(*a2 * v10) * v14))
                                      * v13))
                      + (float)((float)((float)((float)(v17 * (float)(v3 * v5)) + (float)((float)(v18 * v2) * v14))
                                      + (float)((float)(*a2 * v4) * v12))
                              * v6))
              - (float)((float)((float)((float)((float)((float)((float)(v13 * v17) * (float)(v10 * v5))
                                                      + (float)((float)(v6 * v17) * (float)(v4 * v2)))
                                              + (float)((float)(v7 * v12) * (float)(*a2 * v10)))
                                      + (float)((float)((float)(v17 * (float)(v11 * v3))
                                                      + (float)((float)(v18 * v2) * v9))
                                              * v7))
                              + (float)((float)((float)((float)(v18 * v5) * v12) + (float)((float)(*a2 * v3) * v14)) * v6))
                      + (float)((float)((float)((float)(v18 * v11) * v14) + (float)((float)(*a2 * v4) * v9)) * v13)));
  *a1 = (float)((float)((float)((float)((float)(v9 * v3) * v7)
                              + (float)((float)((float)(v12 * v4) - (float)(v14 * v3)) * v6))
                      + (float)((float)(v10 * v14) * v13))
              - (float)((float)(v13 * (float)(v9 * v4)) + (float)((float)(v10 * v12) * v7)))
      * v20;
  a1[1] = (float)((float)((float)((float)(v16 * (float)((float)(v14 * v3) - (float)(v12 * v4)))
                                + (float)((float)(v17 * v4) * v13))
                        + (float)((float)(v18 * v12) * v7))
                - (float)((float)((float)(v17 * v3) * v7) + (float)((float)(v18 * v14) * v13)))
        * v20;
  a1[2] = (float)((float)((float)((float)(v16 * (float)((float)(v10 * v12) - (float)(v9 * v3)))
                                + (float)((float)(v17 * v3) * v6))
                        + (float)((float)(v18 * v9) * v13))
                - (float)((float)((float)(v17 * v10) * v13) + (float)((float)(v18 * v12) * v6)))
        * v20;
  a1[3] = (float)((float)((float)((float)(v16 * (float)((float)(v9 * v4) - (float)(v10 * v14)))
                                + (float)((float)(v17 * v10) * v7))
                        + (float)((float)(v18 * v14) * v6))
                - (float)((float)((float)(v17 * v4) * v6) + (float)((float)(v18 * v9) * v7)))
        * v20;
  a1[4] = (float)((float)((float)((float)((float)(v8 * v14) - (float)(v5 * v12)) * v6)
                        + (float)((float)((float)(v5 * v9) - (float)(v11 * v14)) * v13))
                + (float)((float)((float)(v11 * v12) - (float)(v8 * v9)) * v7))
        * v20;
  a1[5] = (float)((float)((float)((float)((float)(v8 * v17) * v7)
                                + (float)((float)((float)(v5 * v12) - (float)(v8 * v14)) * v16))
                        + (float)((float)(v19 * v14) * v13))
                - (float)((float)((float)(v5 * v17) * v13) + (float)((float)(v19 * v12) * v7)))
        * v20;
  a1[6] = (float)((float)((float)((float)((float)(v8 * v9) - (float)(v11 * v12)) * v16)
                        + (float)((float)((float)(v11 * v17) - (float)(v19 * v9)) * v13))
                + (float)((float)((float)(v19 * v12) - (float)(v8 * v17)) * v6))
        * v20;
  a1[7] = (float)((float)((float)((float)((float)(v5 * v17) * v6)
                                + (float)((float)((float)(v11 * v14) - (float)(v5 * v9)) * v16))
                        + (float)((float)(v19 * v9) * v7))
                - (float)((float)((float)(v11 * v17) * v7) + (float)((float)(v19 * v14) * v6)))
        * v20;
  v21 = (float)(v5 * v3) - (float)(v8 * v4);
  v22 = v8 * v10;
  v23 = v11 * v3;
  v24 = v5 * v10;
  v25 = v11 * v4;
  v26 = (float)((float)((float)((float)((float)(v8 * v10) * v7) + (float)(v21 * v6)) + (float)((float)(v15 * v4) * v13))
              - (float)((float)((float)(v5 * v10) * v13) + (float)((float)(v15 * v3) * v7)))
      * v20;
  v27 = (float)(v8 * v4) - (float)(v5 * v3);
  v28 = v8 * v18;
  v29 = v19 * v3;
  v30 = v5 * v18;
  v31 = v19 * v4;
  a1[8] = v26;
  a1[9] = (float)((float)((float)(v27 * v16) + (float)((float)(v30 - v31) * v13)) + (float)((float)(v29 - v28) * v7))
        * v20;
  v32 = v15 * v18;
  v33 = v19 * v10;
  a1[10] = (float)((float)((float)((float)(v28 * v6) + (float)((float)(v23 - v22) * v16)) + (float)(v33 * v13))
                 - (float)((float)(v32 * v13) + (float)(v29 * v6)))
         * v20;
  a1[11] = (float)((float)((float)((float)(v24 - v25) * v16) + (float)((float)(v32 - v33) * v7))
                 + (float)((float)(v31 - v30) * v6))
         * v20;
  a1[12] = (float)((float)((float)(v27 * v9) + (float)((float)(v24 - v25) * v12)) + (float)((float)(v23 - v22) * v14))
         * v20;
  a1[13] = (float)((float)((float)((float)(v28 * v14) + (float)(v21 * v17)) + (float)(v31 * v12))
                 - (float)((float)(v30 * v12) + (float)(v29 * v14)))
         * v20;
  result = (float)((float)((float)((float)(v30 * v9) + (float)((float)(v25 - v24) * v17)) + (float)(v33 * v14))
                 - (float)((float)(v32 * v14) + (float)(v31 * v9)))
         * v20;
  a1[14] = (float)((float)((float)((float)(v22 - v23) * v17) + (float)((float)(v32 - v33) * v12))
                 + (float)((float)(v29 - v28) * v9))
         * v20;
  a1[15] = result;
  return result;
}

uint64_t gss::stringDecoder<gss::ScenePropertyID>(uint64_t *a1, uint64_t a2, unint64_t a3, uint64_t a4, _QWORD *a5, _QWORD *a6)
{
  int v11;
  _BOOL8 v12;
  void *v13;
  gss *v14;
  uint64_t v15;
  NSObject *v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  void *v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  NSObject *v26;
  _QWORD *v27;
  _QWORD *v28;
  _QWORD *v29;
  _QWORD *v30;
  _BYTE v32[7];
  void *v33[2];
  uint64_t v34;
  unsigned __int8 v35;
  _BYTE __p[28];
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  v11 = gss::idForIndex<gss::ScenePropertyID>(a4);
  v35 = v11;
  if (v11 == 88)
    return 1;
  v33[0] = 0;
  v33[1] = 0;
  v34 = 0;
  if (a3)
  {
    memset(__p, 0, 24);
    if ((geo::ibitstream::readString(a1, (std::string *)__p) & 1) != 0)
    {
      v13 = *(void **)__p;
      *(_DWORD *)v32 = *(_DWORD *)&__p[16];
      *(_DWORD *)&v32[3] = *(_DWORD *)&__p[19];
      if ((__p[23] & 0x80000000) != 0)
      {
        std::string::__init_copy_ctor_external((std::string *)__p, *(const std::string::value_type **)__p, *(std::string::size_type *)&__p[8]);
        *(_OWORD *)v33 = *(_OWORD *)__p;
        v34 = *(_QWORD *)&__p[16];
        operator delete(v13);
      }
      else
      {
        *(_DWORD *)&__p[16] = *(_DWORD *)v32;
        *(_DWORD *)&__p[19] = *(_DWORD *)&v32[3];
        *(_OWORD *)v33 = *(_OWORD *)__p;
        v34 = *(_QWORD *)&__p[16];
      }
      v21 = (void *)HIBYTE(v34);
      v22 = HIBYTE(v34);
      if (v34 < 0)
        v21 = v33[1];
      v23 = (a3 >> 3) - 1;
      v12 = v21 == (void *)v23;
      if (v21 == (void *)v23)
      {
        *(_WORD *)__p = v35;
        geo::intern_linear_map<gss::ScenePropertyID,unsigned char,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::insert<std::pair<gss::ScenePropertyID const,unsigned char> const*>(a2, __p, &__p[2]);
        v24 = geo::intern_pool<std::string,geo::StdAllocator<std::string,gss::Allocator>,std::vector<std::string,geo::StdAllocator<std::string,gss::Allocator>>>::emplace(*a5 + 352, (__int128 *)v33);
        v25 = geo::intern_linear_map<gss::ScenePropertyID,gss::StylePropertySetInternObject,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::operator[](a2 + 64, &v35);
        *(_BYTE *)v25 = 1;
        *(_QWORD *)(v25 + 8) = v24;
        v22 = HIBYTE(v34);
      }
      else
      {
        if (GEOGetGeoCSSStyleSheetLog_onceToken != -1)
          dispatch_once(&GEOGetGeoCSSStyleSheetLog_onceToken, &__block_literal_global);
        v26 = GEOGetGeoCSSStyleSheetLog_log;
        if (os_log_type_enabled((os_log_t)GEOGetGeoCSSStyleSheetLog_log, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)__p = 136315650;
          *(_QWORD *)&__p[4] = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StylePropertySet.cpp";
          *(_WORD *)&__p[12] = 1024;
          *(_DWORD *)&__p[14] = 490;
          *(_WORD *)&__p[18] = 2082;
          *(_QWORD *)&__p[20] = "String property was an unexpected length.";
          _os_log_impl(&dword_19F029000, v26, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", __p, 0x1Cu);
        }
        v27 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a6, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StylePropertySet.cpp", 86);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)":", 1);
        v28 = (_QWORD *)std::ostream::operator<<();
        v29 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)" STYL Parse Error Here: ", 24);
        v30 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)"String property was an unexpected length.", 41);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)"\n", 1);
      }
      if (v22 < 0)
        operator delete(v33[0]);
    }
    else
    {
      if ((__p[23] & 0x80000000) != 0)
        operator delete(*(void **)__p);
      if (GEOGetGeoCSSStyleSheetLog_onceToken != -1)
        dispatch_once(&GEOGetGeoCSSStyleSheetLog_onceToken, &__block_literal_global);
      v16 = GEOGetGeoCSSStyleSheetLog_log;
      if (os_log_type_enabled((os_log_t)GEOGetGeoCSSStyleSheetLog_log, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)__p = 136315650;
        *(_QWORD *)&__p[4] = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StylePropertySet.cpp";
        *(_WORD *)&__p[12] = 1024;
        *(_DWORD *)&__p[14] = 488;
        *(_WORD *)&__p[18] = 2082;
        *(_QWORD *)&__p[20] = "Could not read string.";
        _os_log_impl(&dword_19F029000, v16, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", __p, 0x1Cu);
      }
      v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a6, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StylePropertySet.cpp", 86);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)":", 1);
      v18 = (_QWORD *)std::ostream::operator<<();
      v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)" STYL Parse Error Here: ", 24);
      v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"Could not read string.", 22);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"\n", 1);
      return 0;
    }
  }
  else
  {
    *(_WORD *)__p = v11;
    v14 = (gss *)geo::intern_linear_map<gss::ScenePropertyID,unsigned char,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::insert<std::pair<gss::ScenePropertyID const,unsigned char> const*>(a2, __p, &__p[2]);
    gss::PropertySetDefaultStringValue(v14);
    v15 = geo::intern_linear_map<gss::ScenePropertyID,gss::StylePropertySetInternObject,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::operator[](a2 + 64, &v35);
    v12 = 1;
    *(_BYTE *)v15 = 1;
    *(_QWORD *)(v15 + 8) = &unk_1ECE65988;
  }
  return v12;
}

void sub_19F0FAA84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  void *v23;

  operator delete(v23);
  _Unwind_Resume(a1);
}

void gss::RenderStyleHelper<gss::PropertyID,std::string>::valueForKey(std::string *a1, unsigned int a2, int a3, unint64_t a4, BOOL *a5)
{
  uint64_t v9;
  float v10;
  unsigned int v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  __int128 v16;
  std::string::size_type v17;
  _QWORD *v18;
  unsigned __int8 v19;
  unsigned __int8 v20;

  if (a3 == 2)
  {
    v9 = *(_QWORD *)a4;
    if (*(_QWORD *)a4)
    {
      v10 = *(float *)v9;
      LODWORD(v9) = *(float *)v9 == 1.0;
      if (*(_BYTE *)(a4 + 10))
      {
        if (v10 != 0.0 && v10 != 1.0)
          goto LABEL_12;
      }
    }
    v9 = v9;
  }
  else
  {
    v9 = 1;
  }
  v12 = *(unsigned __int8 *)(a4 + v9 + 11);
  v10 = 0.0;
  if (v12 == 2)
  {
LABEL_12:
    v20 = 1;
    v19 = 1;
    v13 = gss::RenderStyle<gss::PropertyID>::styleValueForKey<std::string>(a4, a2, 0, &v20);
    v14 = gss::RenderStyle<gss::PropertyID>::styleValueForKey<std::string>(a4, a2, 1u, &v19);
    if (a5)
      *a5 = (v20 | v19) != 0;
    if (v10 >= 1.0)
      v15 = v14;
    else
      v15 = v13;
    if ((*((char *)v15 + 23) & 0x80000000) == 0)
    {
      v16 = *(_OWORD *)v15;
      v17 = v15[2];
LABEL_21:
      a1->__r_.__value_.__r.__words[2] = v17;
      *(_OWORD *)&a1->__r_.__value_.__l.__data_ = v16;
      return;
    }
    std::string::__init_copy_ctor_external(a1, (const std::string::value_type *)*v15, v15[1]);
    return;
  }
  v18 = gss::RenderStyle<gss::PropertyID>::styleValueForKey<std::string>(a4, a2, v12, a5);
  if ((*((char *)v18 + 23) & 0x80000000) == 0)
  {
    v16 = *(_OWORD *)v18;
    v17 = v18[2];
    goto LABEL_21;
  }
  std::string::__init_copy_ctor_external(a1, (const std::string::value_type *)*v18, v18[1]);
}

void *gss::RenderStyle<gss::PropertyID>::styleValueForKey<std::string>(unint64_t a1, unsigned int a2, unsigned int a3, _BYTE *a4)
{
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unsigned __int16 ***v10;
  unsigned __int16 **v11;
  uint64_t v12;
  unsigned __int16 *v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  unsigned __int16 *v17;
  unsigned __int16 *v18;
  unint64_t v19;
  unint64_t v20;
  unsigned __int16 *v21;
  unsigned __int16 *v22;
  unsigned int v23;
  unsigned __int16 ***v24;
  unsigned __int16 **v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int v29;
  uint64_t v30;
  unsigned __int16 *v31;
  unint64_t v32;
  unsigned int v33;
  unint64_t v34;
  uint64_t v35;
  unsigned __int16 *v36;
  unsigned __int16 *v37;
  unint64_t v38;
  unint64_t v39;
  unsigned __int16 *v40;
  unsigned __int16 *v41;
  unsigned int v42;
  uint64_t v44;
  unsigned __int16 *v45;
  uint64_t v46;
  unsigned int v47;
  unint64_t v48;
  uint64_t v49;
  unsigned __int16 *v50;
  uint64_t v51;
  unsigned __int16 *v52;
  unsigned __int16 *v53;
  unint64_t v54;
  unint64_t v55;
  unsigned __int16 *v56;
  unsigned __int16 *v57;
  unsigned int v58;
  unsigned __int16 *v59;
  unint64_t v60;
  unint64_t v61;
  unsigned __int16 *v62;
  unsigned __int16 *v63;
  unsigned int v64;

  v4 = *(_QWORD *)(a1 + 16 * a3 + 16);
  if (!v4)
  {
    if (a4)
      *a4 = 0;
    return gss::defaultValueForKey<gss::PropertyID,std::string>();
  }
  v5 = (char *)(a1 + 16 * a3);
  v6 = *((unsigned __int16 *)v5 + 28);
  if (!*((_WORD *)v5 + 28))
  {
LABEL_31:
    v24 = *(unsigned __int16 ****)(v4 + 72);
    if (v24)
    {
      v25 = *v24;
      v26 = *((unsigned __int16 *)v25 + 5);
      if (!*((_WORD *)v25 + 5))
      {
        LOWORD(v34) = 0;
        goto LABEL_66;
      }
      v27 = (uint64_t)*v25;
      if (!*((_BYTE *)v25 + 15))
      {
        v35 = 2 * v26;
        v36 = *v25;
        while (*v36 != a2)
        {
          ++v36;
          v35 -= 2;
          if (!v35)
          {
            v36 = (unsigned __int16 *)(v27 + 2 * v26);
            break;
          }
        }
        v34 = ((unint64_t)v36 - v27) >> 1;
LABEL_66:
        if ((_DWORD)v26 != (unsigned __int16)v34)
        {
          v44 = *((unsigned __int16 *)v25 + 37);
          if (*((_WORD *)v25 + 37))
          {
            v45 = v25[8];
            if (*((_BYTE *)v25 + 79))
            {
              if (v44 >= 0x1E)
              {
                v59 = v25[8];
                v60 = *((unsigned __int16 *)v25 + 37);
                do
                {
                  v61 = v60 >> 1;
                  v62 = &v59[v60 >> 1];
                  v64 = *v62;
                  v63 = v62 + 1;
                  v60 += ~(v60 >> 1);
                  if (v64 < a2)
                    v59 = v63;
                  else
                    v60 = v61;
                }
                while (v60);
                if (v59 == &v45[v44] || *v59 != a2)
                  return gss::PropertySetDefaultStringValue((gss *)a1);
                v48 = (unint64_t)((char *)v59 - (char *)v45) >> 1;
              }
              else
              {
                v46 = 0;
                while (1)
                {
                  v47 = v45[v46];
                  if (v47 >= a2)
                    break;
                  if (v44 == ++v46)
                    return gss::PropertySetDefaultStringValue((gss *)a1);
                }
                if (v47 == a2)
                  LOWORD(v48) = v46;
                else
                  LOWORD(v48) = *((_WORD *)v25 + 37);
              }
            }
            else
            {
              v51 = 2 * v44;
              v52 = v25[8];
              while (*v52 != a2)
              {
                ++v52;
                v51 -= 2;
                if (!v51)
                {
                  v52 = &v45[v44];
                  break;
                }
              }
              v48 = (unint64_t)((char *)v52 - (char *)v45) >> 1;
            }
          }
          else
          {
            LOWORD(v48) = 0;
          }
          if ((_DWORD)v44 == (unsigned __int16)v48)
            return gss::PropertySetDefaultStringValue((gss *)a1);
          return *(void **)((char *)&v25[8][8 * (unsigned __int16)v48 + 4] + *((unsigned __int16 *)v25 + 36));
        }
        goto LABEL_67;
      }
      if (v26 < 0x1E)
      {
        v28 = 0;
        while (1)
        {
          v29 = *(unsigned __int16 *)(v27 + 2 * v28);
          if (v29 >= a2)
            break;
          if (v26 == ++v28)
            goto LABEL_67;
        }
        if (v29 == a2)
          LOWORD(v34) = v28;
        else
          LOWORD(v34) = *((_WORD *)v25 + 5);
        goto LABEL_66;
      }
      v37 = *v25;
      v38 = *((unsigned __int16 *)v25 + 5);
      do
      {
        v39 = v38 >> 1;
        v40 = &v37[v38 >> 1];
        v42 = *v40;
        v41 = v40 + 1;
        v38 += ~(v38 >> 1);
        if (v42 < a2)
          v37 = v41;
        else
          v38 = v39;
      }
      while (v38);
      if (v37 != (unsigned __int16 *)(v27 + 2 * v26) && *v37 == a2)
      {
        v34 = ((unint64_t)v37 - v27) >> 1;
        goto LABEL_66;
      }
    }
LABEL_67:
    if (a4)
      *a4 = 0;
    return gss::defaultValueForKey<gss::PropertyID,std::string>();
  }
  v7 = *((_QWORD *)v5 + 6);
  v8 = v7 + 8 * v6;
  while (1)
  {
    v10 = *(unsigned __int16 ****)(*(_QWORD *)v7 + 72);
    if (v10)
    {
      v11 = *v10;
      v12 = *((unsigned __int16 *)v11 + 5);
      if (*((_WORD *)v11 + 5))
      {
        v13 = *v11;
        if (*((_BYTE *)v11 + 15))
        {
          if (v12 >= 0x1E)
          {
            v18 = *v11;
            v19 = *((unsigned __int16 *)v11 + 5);
            do
            {
              v20 = v19 >> 1;
              v21 = &v18[v19 >> 1];
              v23 = *v21;
              v22 = v21 + 1;
              a1 = v23;
              v19 += ~(v19 >> 1);
              if (v23 < a2)
                v18 = v22;
              else
                v19 = v20;
            }
            while (v19);
            if (v18 == &v13[v12] || *v18 != a2)
              goto LABEL_6;
            v9 = (unint64_t)((char *)v18 - (char *)v13) >> 1;
          }
          else
          {
            v14 = 0;
            while (1)
            {
              v15 = v13[v14];
              if (v15 >= a2)
                break;
              if (v12 == ++v14)
                goto LABEL_6;
            }
            LOWORD(v9) = v15 == a2 ? v14 : *((_WORD *)v11 + 5);
          }
        }
        else
        {
          v16 = 2 * v12;
          v17 = *v11;
          while (*v17 != a2)
          {
            ++v17;
            v16 -= 2;
            if (!v16)
            {
              v17 = &v13[v12];
              break;
            }
          }
          v9 = (unint64_t)((char *)v17 - (char *)v13) >> 1;
        }
      }
      else
      {
        LOWORD(v9) = 0;
      }
      if ((_DWORD)v12 != (unsigned __int16)v9)
        break;
    }
LABEL_6:
    v7 += 8;
    if (v7 == v8)
      goto LABEL_31;
  }
  v30 = *((unsigned __int16 *)v11 + 37);
  if (!*((_WORD *)v11 + 37))
    return gss::PropertySetDefaultStringValue((gss *)a1);
  v31 = v11[8];
  if (*((_BYTE *)v11 + 79))
  {
    if (v30 < 0x1E)
    {
      v32 = 0;
      while (1)
      {
        v33 = v31[v32];
        if (v33 >= a2)
          break;
        if (v30 == ++v32)
          return gss::PropertySetDefaultStringValue((gss *)a1);
      }
      if (v33 != a2)
        LOWORD(v32) = *((_WORD *)v11 + 37);
      goto LABEL_106;
    }
    v53 = v11[8];
    v54 = *((unsigned __int16 *)v11 + 37);
    do
    {
      v55 = v54 >> 1;
      v56 = &v53[v54 >> 1];
      v58 = *v56;
      v57 = v56 + 1;
      v54 += ~(v54 >> 1);
      if (v58 < a2)
        v53 = v57;
      else
        v54 = v55;
    }
    while (v54);
    if (v53 != &v31[v30] && *v53 == a2)
    {
      v32 = (unint64_t)((char *)v53 - (char *)v31) >> 1;
      goto LABEL_106;
    }
    return gss::PropertySetDefaultStringValue((gss *)a1);
  }
  else
  {
    v49 = 2 * v30;
    v50 = v11[8];
    while (*v50 != a2)
    {
      ++v50;
      v49 -= 2;
      if (!v49)
      {
        v50 = &v31[v30];
        break;
      }
    }
    v32 = (unint64_t)((char *)v50 - (char *)v31) >> 1;
LABEL_106:
    if ((_DWORD)v30 == (unsigned __int16)v32)
      return gss::PropertySetDefaultStringValue((gss *)a1);
    return *(void **)((char *)&v31[8 * (unsigned __int16)v32 + 4] + *((unsigned __int16 *)v11 + 36));
  }
}

void gss::RenderStyle<gss::PropertyID>::valueForKeyAtZ<std::string>(std::string *a1, unint64_t a2, unsigned int a3, unsigned int a4, int a5)
{
  uint64_t v9;
  float v10;
  unsigned int v12;
  char *v13;
  __int128 v14;
  char *v15;
  __int128 v16;
  char *v17;
  __int128 v18;
  std::string *p_p;
  char v20;
  char v21;
  std::string::size_type *p_size;
  std::string __p;
  std::string v24;
  char v25;
  char v26;

  if (a5 == 2)
  {
    v9 = *(_QWORD *)a2;
    if (*(_QWORD *)a2)
    {
      v10 = *(float *)v9;
      LODWORD(v9) = *(float *)v9 == 1.0;
      if (*(_BYTE *)(a2 + 10))
      {
        if (v10 != 0.0 && v10 != 1.0)
          goto LABEL_12;
      }
    }
    v9 = v9;
  }
  else
  {
    v9 = 1;
  }
  v12 = *(unsigned __int8 *)(a2 + v9 + 11);
  v10 = 0.0;
  if (v12 != 2)
  {
    v15 = (char *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<std::string>(a2, a3, a4, v12, 0);
    if (v15[23] < 0)
    {
      std::string::__init_copy_ctor_external(a1, *(const std::string::value_type **)v15, *((_QWORD *)v15 + 1));
    }
    else
    {
      v16 = *(_OWORD *)v15;
      a1->__r_.__value_.__r.__words[2] = *((_QWORD *)v15 + 2);
      *(_OWORD *)&a1->__r_.__value_.__l.__data_ = v16;
    }
    return;
  }
LABEL_12:
  v26 = 1;
  v25 = 1;
  v13 = (char *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<std::string>(a2, a3, a4, 0, &v26);
  if (v13[23] < 0)
  {
    std::string::__init_copy_ctor_external(&v24, *(const std::string::value_type **)v13, *((_QWORD *)v13 + 1));
  }
  else
  {
    v14 = *(_OWORD *)v13;
    v24.__r_.__value_.__r.__words[2] = *((_QWORD *)v13 + 2);
    *(_OWORD *)&v24.__r_.__value_.__l.__data_ = v14;
  }
  v17 = (char *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<std::string>(a2, a3, a4, 1u, &v25);
  if (v17[23] < 0)
  {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)v17, *((_QWORD *)v17 + 1));
  }
  else
  {
    v18 = *(_OWORD *)v17;
    __p.__r_.__value_.__r.__words[2] = *((_QWORD *)v17 + 2);
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v18;
  }
  if (v10 >= 1.0)
    p_p = &__p;
  else
    p_p = &v24;
  v20 = HIBYTE(v24.__r_.__value_.__r.__words[2]);
  v21 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  if (v10 >= 1.0)
    v20 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  if (v20 < 0)
  {
    p_size = &v24.__r_.__value_.__l.__size_;
    if (v10 >= 1.0)
      p_size = &__p.__r_.__value_.__l.__size_;
    std::string::__init_copy_ctor_external(a1, p_p->__r_.__value_.__l.__data_, *p_size);
    if ((*((_BYTE *)&__p.__r_.__value_.__s + 23) & 0x80) == 0)
    {
LABEL_27:
      if ((SHIBYTE(v24.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        return;
LABEL_33:
      operator delete(v24.__r_.__value_.__l.__data_);
      return;
    }
  }
  else
  {
    *(_OWORD *)&a1->__r_.__value_.__l.__data_ = *(_OWORD *)&p_p->__r_.__value_.__l.__data_;
    a1->__r_.__value_.__r.__words[2] = p_p->__r_.__value_.__r.__words[2];
    if ((v21 & 0x80) == 0)
      goto LABEL_27;
  }
  operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_33;
}

void *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<std::string>(unint64_t a1, unsigned int a2, unsigned int a3, unsigned int a4, _BYTE *a5)
{
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  gss **v15;
  unint64_t v16;
  gss *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  gss *v21;
  unint64_t v22;
  unint64_t v23;
  unsigned __int16 *v24;
  unsigned __int16 *v25;
  unsigned int v26;
  uint64_t *v27;
  uint64_t v28;
  unsigned int v29;
  uint64_t v30;
  unsigned __int16 **v31;
  unint64_t v32;
  unsigned __int16 *v33;
  uint64_t v34;
  unsigned int v35;
  uint64_t v36;
  unsigned __int16 *v37;
  unsigned int v38;
  unsigned int v39;
  uint64_t v40;
  unsigned __int16 **v41;
  unint64_t v42;
  unsigned __int16 *v43;
  uint64_t v44;
  unsigned int v45;
  unsigned __int16 *v46;
  unint64_t v47;
  unint64_t v48;
  unsigned __int16 *v49;
  unsigned __int16 *v50;
  unsigned int v51;
  uint64_t v52;
  unsigned __int16 **v53;
  unint64_t v54;
  unsigned __int16 *v55;
  uint64_t v56;
  unsigned int v57;
  unint64_t v58;
  unsigned __int16 v59;
  uint64_t v61;
  unsigned __int16 *v62;
  unsigned __int16 *v63;
  unint64_t v64;
  unint64_t v65;
  unsigned __int16 *v66;
  unsigned __int16 *v67;
  unsigned int v68;
  uint64_t v69;
  unsigned __int16 *v70;
  unsigned __int16 *v71;
  unint64_t v72;
  unint64_t v73;
  unsigned __int16 *v74;
  unsigned __int16 *v75;
  unsigned int v76;
  unsigned __int16 *v77;
  uint64_t v78;

  v5 = *(_QWORD *)(a1 + 16 * a4 + 16);
  if (!v5)
  {
    if (a5)
      *a5 = 0;
    return gss::defaultValueForKey<gss::PropertyID,std::string>();
  }
  v6 = (char *)(a1 + 16 * a4);
  v7 = *((unsigned __int16 *)v6 + 28);
  if (!*((_WORD *)v6 + 28))
  {
LABEL_30:
    v27 = *(uint64_t **)(v5 + 72);
    if (v27)
    {
      v28 = a3 >= 0x17 ? 23 : a3;
      v29 = *((unsigned __int8 *)v27 + v28 + 16);
      v30 = *v27;
      v31 = (unsigned __int16 **)(v30 + 80 * v29);
      v32 = *((unsigned __int16 *)v31 + 5);
      if (*((_WORD *)v31 + 5))
      {
        v33 = *v31;
        if (!*((_BYTE *)v31 + 15))
        {
          v36 = 2 * v32;
          v37 = *v31;
          while (*v37 != a2)
          {
            ++v37;
            v36 -= 2;
            if (!v36)
            {
              v37 = &v33[v32];
              break;
            }
          }
          if ((_DWORD)v32 == (unsigned __int16)((unint64_t)((char *)v37 - (char *)v33) >> 1))
            goto LABEL_81;
          goto LABEL_69;
        }
        if (v32 < 0x1E)
        {
          v34 = 0;
          while (1)
          {
            v35 = v33[v34];
            if (v35 >= a2)
              break;
            if (v32 == ++v34)
              goto LABEL_81;
          }
          if (v35 == a2)
            v59 = v34;
          else
            v59 = v32;
          if ((_DWORD)v32 == v59)
            goto LABEL_81;
LABEL_69:
          v52 = v30 + 80 * v29;
          v53 = (unsigned __int16 **)(v52 + 64);
          v54 = *(unsigned __int16 *)(v52 + 74);
          if (v54)
          {
            v55 = *v53;
            if (*(_BYTE *)(v30 + 80 * v29 + 79))
            {
              if (v54 >= 0x1E)
              {
                v63 = *v53;
                v64 = v54;
                do
                {
                  v65 = v64 >> 1;
                  v66 = &v63[v64 >> 1];
                  v68 = *v66;
                  v67 = v66 + 1;
                  a1 = ~(v64 >> 1);
                  v64 += a1;
                  if (v68 < a2)
                    v63 = v67;
                  else
                    v64 = v65;
                }
                while (v64);
                if (v63 == &v55[v54] || *v63 != a2)
                  return gss::PropertySetDefaultStringValue((gss *)a1);
                v58 = (unint64_t)((char *)v63 - (char *)v55) >> 1;
              }
              else
              {
                v56 = 0;
                while (1)
                {
                  v57 = v55[v56];
                  if (v57 >= a2)
                    break;
                  if (v54 == ++v56)
                    return gss::PropertySetDefaultStringValue((gss *)a1);
                }
                if (v57 == a2)
                  LOWORD(v58) = v56;
                else
                  LOWORD(v58) = v54;
              }
            }
            else
            {
              v61 = 2 * v54;
              v62 = *v53;
              while (*v62 != a2)
              {
                ++v62;
                v61 -= 2;
                if (!v61)
                {
                  v62 = &v55[v54];
                  break;
                }
              }
              v58 = (unint64_t)((char *)v62 - (char *)v55) >> 1;
            }
          }
          else
          {
            LOWORD(v58) = 0;
          }
          if ((_DWORD)v54 == (unsigned __int16)v58)
            return gss::PropertySetDefaultStringValue((gss *)a1);
          v77 = *v53;
          v78 = v30 + 80 * v29;
          return *(void **)((char *)&v77[8 * (unsigned __int16)v58 + 4] + *(unsigned __int16 *)(v78 + 72));
        }
        v46 = *v31;
        v47 = v32;
        do
        {
          v48 = v47 >> 1;
          v49 = &v46[v47 >> 1];
          v51 = *v49;
          v50 = v49 + 1;
          v47 += ~(v47 >> 1);
          if (v51 < a2)
            v46 = v50;
          else
            v47 = v48;
        }
        while (v47);
        if (v46 != &v33[v32]
          && *v46 == a2
          && (_DWORD)v32 != (unsigned __int16)((unint64_t)((char *)v46 - (char *)v33) >> 1))
        {
          goto LABEL_69;
        }
      }
    }
LABEL_81:
    if (a5)
      *a5 = 0;
    return gss::defaultValueForKey<gss::PropertyID,std::string>();
  }
  v8 = *((_QWORD *)v6 + 6);
  v9 = v8 + 8 * v7;
  while (1)
  {
    v11 = *(uint64_t **)(*(_QWORD *)v8 + 72);
    if (v11)
    {
      v14 = *v11;
      v13 = v11 + 2;
      v12 = v14;
      v15 = (gss **)(v14 + 80 * *((unsigned __int8 *)v13 + a3));
      v16 = *((unsigned __int16 *)v15 + 5);
      if (*((_WORD *)v15 + 5))
      {
        v17 = *v15;
        if (*((_BYTE *)v15 + 15))
        {
          if (v16 >= 0x1E)
          {
            v21 = *v15;
            v22 = v16;
            do
            {
              v23 = v22 >> 1;
              v24 = (unsigned __int16 *)((char *)v21 + 2 * (v22 >> 1));
              v26 = *v24;
              v25 = v24 + 1;
              v22 += ~(v22 >> 1);
              if (v26 < a2)
                v21 = (gss *)v25;
              else
                v22 = v23;
            }
            while (v22);
            a1 = (unint64_t)v17 + 2 * v16;
            if (v21 == (gss *)a1)
              goto LABEL_6;
            a1 = *(unsigned __int16 *)v21;
            if ((_DWORD)a1 != a2)
              goto LABEL_6;
            v10 = (unint64_t)(v21 - v17) >> 1;
          }
          else
          {
            v18 = 0;
            while (1)
            {
              a1 = *((unsigned __int16 *)v17 + v18);
              if (a1 >= a2)
                break;
              if (v16 == ++v18)
                goto LABEL_6;
            }
            LOWORD(v10) = (_DWORD)a1 == a2 ? v18 : (unsigned __int16)v16;
          }
        }
        else
        {
          v19 = 2 * v16;
          a1 = (unint64_t)v17 + 2 * v16;
          v20 = (char *)*v15;
          while (*(unsigned __int16 *)v20 != a2)
          {
            v20 += 2;
            v19 -= 2;
            if (!v19)
            {
              v20 = (char *)v17 + 2 * v16;
              break;
            }
          }
          v10 = (unint64_t)(v20 - (char *)v17) >> 1;
        }
        if ((_DWORD)v16 != (unsigned __int16)v10)
          break;
      }
    }
LABEL_6:
    v8 += 8;
    if (v8 == v9)
      goto LABEL_30;
  }
  if (a3 >= 0x17)
    v38 = 23;
  else
    v38 = a3;
  v39 = *((unsigned __int8 *)v13 + v38);
  v40 = v12 + 80 * v39;
  v41 = (unsigned __int16 **)(v40 + 64);
  v42 = *(unsigned __int16 *)(v40 + 74);
  if (!v42)
  {
    LOWORD(v58) = 0;
    goto LABEL_120;
  }
  v43 = *v41;
  if (!*(_BYTE *)(v12 + 80 * v39 + 79))
  {
    v69 = 2 * v42;
    v70 = *v41;
    while (*v70 != a2)
    {
      ++v70;
      v69 -= 2;
      if (!v69)
      {
        v70 = &v43[v42];
        break;
      }
    }
    v58 = (unint64_t)((char *)v70 - (char *)v43) >> 1;
LABEL_120:
    if ((_DWORD)v42 == (unsigned __int16)v58)
      return gss::PropertySetDefaultStringValue((gss *)a1);
    v77 = *v41;
    v78 = v12 + 80 * v39;
    return *(void **)((char *)&v77[8 * (unsigned __int16)v58 + 4] + *(unsigned __int16 *)(v78 + 72));
  }
  if (v42 < 0x1E)
  {
    v44 = 0;
    while (1)
    {
      v45 = v43[v44];
      if (v45 >= a2)
        break;
      if (v42 == ++v44)
        return gss::PropertySetDefaultStringValue((gss *)a1);
    }
    if (v45 == a2)
      LOWORD(v58) = v44;
    else
      LOWORD(v58) = v42;
    goto LABEL_120;
  }
  v71 = *v41;
  v72 = v42;
  do
  {
    v73 = v72 >> 1;
    v74 = &v71[v72 >> 1];
    v76 = *v74;
    v75 = v74 + 1;
    a1 = ~(v72 >> 1);
    v72 += a1;
    if (v76 < a2)
      v71 = v75;
    else
      v72 = v73;
  }
  while (v72);
  if (v71 != &v43[v42] && *v71 == a2)
  {
    v58 = (unint64_t)((char *)v71 - (char *)v43) >> 1;
    goto LABEL_120;
  }
  return gss::PropertySetDefaultStringValue((gss *)a1);
}

void *gss::defaultValueForKey<gss::PropertyID,std::string>()
{
  return &gss::defaultValueForKey<gss::PropertyID,std::string>(gss::PropertyID)::_defaultValue;
}

_QWORD *std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>::__assign_external(_QWORD *__dst, void *__src, size_t __len)
{
  unint64_t v6;
  _QWORD *v7;
  unint64_t v8;
  _QWORD *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;

  LODWORD(v6) = *((char *)__dst + 23);
  if ((v6 & 0x80000000) != 0)
  {
    v10 = __dst[2];
    v8 = (v10 & 0x7FFFFFFFFFFFFFFFLL) - 1;
    if (__len > v8)
    {
      v11 = 0x7FFFFFFFFFFFFFF7;
      if (0x7FFFFFFFFFFFFFF7 - (v10 & 0x7FFFFFFFFFFFFFFFLL) >= __len - v8)
      {
        v9 = (_QWORD *)*__dst;
        if (v8 > 0x3FFFFFFFFFFFFFF2)
        {
LABEL_15:
          v7 = (_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)__dst[3] + 16))(__dst[3], v11, 1);
          memmove(v7, __src, __len);
          if (v8 != 22)
            (*(void (**)(_QWORD, _QWORD *))(*(_QWORD *)__dst[3] + 40))(__dst[3], v9);
          __dst[2] = v11 | 0x8000000000000000;
          *__dst = v7;
LABEL_23:
          __dst[1] = __len;
          goto LABEL_24;
        }
LABEL_8:
        v12 = 2 * v8;
        if (__len > 2 * v8)
          v12 = __len;
        v13 = (v12 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v12 | 7) != 0x17)
          v13 = v12 | 7;
        if (v12 >= 0x17)
          v11 = v13 + 1;
        else
          v11 = 23;
        goto LABEL_15;
      }
LABEL_25:
      abort();
    }
    v6 = HIBYTE(v10);
    v7 = (_QWORD *)*__dst;
  }
  else
  {
    v7 = __dst;
    if (__len > 0x16)
    {
      if (__len - 0x7FFFFFFFFFFFFFF7 >= 0x800000000000001FLL)
      {
        v8 = 22;
        v9 = __dst;
        goto LABEL_8;
      }
      goto LABEL_25;
    }
  }
  if (__len)
  {
    memmove(v7, __src, __len);
    LOBYTE(v6) = *((_BYTE *)__dst + 23);
  }
  if ((v6 & 0x80) != 0)
    goto LABEL_23;
  *((_BYTE *)__dst + 23) = __len & 0x7F;
LABEL_24:
  *((_BYTE *)v7 + __len) = 0;
  return __dst;
}

uint64_t gss::dashPatternDecoder<gss::PropertyID>(gss::Allocator *a1, unint64_t a2, uint64_t a3, int a4, uint64_t *a5, _QWORD *a6)
{
  gss::Allocator *v12;
  gss::Allocator *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  unint64_t v22;
  _DWORD *v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _DWORD *v28;
  _DWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  float *v37;
  uint64_t v38;
  int v39;
  _BOOL8 v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char v46;
  uint64_t v47;
  char v48;
  int v49;
  char v50;
  unsigned int v51;
  float v52;
  float v53;
  gss::Allocator *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t *v57;
  unint64_t v58;
  uint64_t v59;
  _QWORD *v60;
  unint64_t *v61;
  uint64_t *v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t **v67;
  unint64_t v68;
  unint64_t v69;
  _QWORD *v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  unint64_t v75;
  char *v76;
  uint64_t **v77;
  unint64_t v78;
  _QWORD *v79;
  _QWORD *v80;
  char *v81;
  __int128 v82;
  uint64_t v83;
  NSObject *v84;
  _QWORD *v85;
  _QWORD *v86;
  _QWORD *v87;
  _QWORD *v88;
  unint64_t v89;
  unint64_t v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  unint64_t v94;
  unint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  __int128 v101;
  uint64_t v102;
  uint64_t v103;
  float v104;
  gss::Allocator *v105;
  _DWORD *v106;
  _DWORD *v107;
  uint64_t v108;
  unsigned __int16 v109;
  _QWORD *v110;
  _QWORD *v111;
  _BYTE buf[32];
  _QWORD *v113;
  uint64_t v114;

  v114 = *MEMORY[0x1E0C80C00];
  v105 = 0;
  v106 = 0;
  v107 = 0;
  v108 = gss::Allocator::instance(a1);
  v12 = (gss::Allocator *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v108 + 16))(v108, 8, 2);
  v13 = v12;
  v105 = v12;
  v107 = (_DWORD *)((char *)v12 + 8);
  if (v12)
    *(_DWORD *)v12 = 19661079;
  v14 = 0;
  *((_DWORD *)v12 + 1) = 19726616;
  v106 = (_DWORD *)((char *)v12 + 8);
  while (*(unsigned __int16 *)((char *)v12 + v14) != a4)
  {
    v14 += 4;
    if (v14 == 8)
    {
      v15 = 1;
      goto LABEL_109;
    }
  }
  v15 = 1;
  if (a3)
  {
    v101 = 0uLL;
    v102 = 0;
    v16 = gss::Allocator::instance(v12);
    v103 = v16;
    if ((a3 & 0xF) != 0)
    {
      if (GEOGetGeoCSSStyleSheetLog_onceToken != -1)
        dispatch_once(&GEOGetGeoCSSStyleSheetLog_onceToken, &__block_literal_global);
      v17 = GEOGetGeoCSSStyleSheetLog_log;
      if (os_log_type_enabled((os_log_t)GEOGetGeoCSSStyleSheetLog_log, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315650;
        *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StylePropertySet.cpp";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 584;
        *(_WORD *)&buf[18] = 2082;
        *(_QWORD *)&buf[20] = "Dash pattern had strange number of bits.";
        _os_log_impl(&dword_19F029000, v17, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
      }
      v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a6, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StylePropertySet.cpp", 86);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)":", 1);
      v19 = (_QWORD *)std::ostream::operator<<();
      v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)" STYL Parse Error Here: ", 24);
      v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"Dash pattern had strange number of bits.", 40);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)"\n", 1);
      goto LABEL_14;
    }
    v22 = a3 >> 4;
    v23 = (_DWORD *)*((_QWORD *)&v101 + 1);
    v24 = (uint64_t)(*((_QWORD *)&v101 + 1) - v101) >> 2;
    if (v22 <= v24)
    {
      if (v22 >= v24)
      {
LABEL_38:
        v37 = (float *)v101;
        if (a3 < 0x10)
        {
LABEL_53:
          v52 = 0.0;
          while (v37 != *((float **)&v101 + 1))
          {
            v53 = *v37++;
            v52 = v52 + v53;
          }
          v104 = v52;
          v109 = *(_WORD *)((char *)v13 + v14 + 2);
          *(_WORD *)buf = v109;
          buf[2] = 0;
          v54 = (gss::Allocator *)geo::intern_linear_map<gss::PropertyID,unsigned char,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::insert<std::pair<gss::PropertyID const,unsigned char> const*>(a2, (uint64_t)buf, (uint64_t)&buf[4]);
          v55 = *a5;
          v56 = *(_QWORD *)(*a5 + 392);
          if (*(_QWORD *)(*a5 + 384) == v56
            || (v57 = *(uint64_t **)(v56 - 16),
                v58 = v57[1],
                0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v58 - *v57) >> 3) == *(_DWORD *)(v55 + 408)))
          {
            v59 = gss::Allocator::instance(v54);
            v60 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v59 + 16))(v59, 64, 8);
            v60[1] = 0;
            v61 = v60 + 1;
            *v60 = &off_1E42E6728;
            v60[2] = 0;
            v60[3] = v59;
            v60[4] = 0;
            v62 = v60 + 4;
            v60[5] = 0;
            v60[6] = 0;
            v63 = gss::Allocator::instance((gss::Allocator *)v60);
            v60[7] = v63;
            v110 = v60 + 4;
            v111 = v60;
            v64 = *(unsigned int *)(v55 + 408);
            v65 = v60[4];
            if (0xCCCCCCCCCCCCCCCDLL * ((v60[6] - v65) >> 3) < v64)
            {
              v66 = v60[5];
              v113 = v60 + 7;
              *(_QWORD *)buf = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)v63 + 16))(v63, 40 * v64, 8);
              *(_QWORD *)&buf[8] = *(_QWORD *)buf + v66 - v65;
              *(_QWORD *)&buf[16] = *(_QWORD *)&buf[8];
              *(_QWORD *)&buf[24] = *(_QWORD *)buf + 40 * v64;
              std::vector<gss::DashPattern,geo::StdAllocator<gss::DashPattern,gss::Allocator>>::__swap_out_circular_buffer(v62, buf);
              std::__split_buffer<gss::DashPattern,geo::StdAllocator<gss::DashPattern,gss::Allocator> &>::~__split_buffer((uint64_t)buf);
            }
            v67 = *(uint64_t ***)(v55 + 392);
            v68 = *(_QWORD *)(v55 + 400);
            if ((unint64_t)v67 >= v68)
            {
              v71 = *(_QWORD *)(v55 + 384);
              v72 = ((uint64_t)v67 - v71) >> 4;
              v73 = v72 + 1;
              if ((unint64_t)(v72 + 1) >> 60)
                std::vector<double>::__throw_length_error[abi:ne180100]();
              v74 = v68 - v71;
              if (v74 >> 3 > v73)
                v73 = v74 >> 3;
              if ((unint64_t)v74 >= 0x7FFFFFFFFFFFFFF0)
                v75 = 0xFFFFFFFFFFFFFFFLL;
              else
                v75 = v73;
              if (v75 >> 60)
                std::__throw_bad_array_new_length[abi:ne180100]();
              v76 = (char *)operator new(16 * v75);
              v77 = (uint64_t **)&v76[16 * v72];
              *v77 = v62;
              v77[1] = v60;
              do
                v78 = __ldxr(v61);
              while (__stxr(v78 + 1, v61));
              v79 = *(_QWORD **)(v55 + 384);
              v80 = *(_QWORD **)(v55 + 392);
              if (v80 == v79)
              {
                v70 = v77 + 2;
                *(_QWORD *)(v55 + 384) = v77;
                *(_QWORD *)(v55 + 392) = v77 + 2;
                *(_QWORD *)(v55 + 400) = &v76[16 * v75];
              }
              else
              {
                v81 = &v76[16 * v72];
                do
                {
                  v82 = *((_OWORD *)v80 - 1);
                  v80 -= 2;
                  *((_OWORD *)v81 - 1) = v82;
                  v81 -= 16;
                  *v80 = 0;
                  v80[1] = 0;
                }
                while (v80 != v79);
                v80 = *(_QWORD **)(v55 + 384);
                v83 = *(_QWORD *)(v55 + 392);
                v70 = v77 + 2;
                *(_QWORD *)(v55 + 384) = v81;
                *(_QWORD *)(v55 + 392) = v77 + 2;
                *(_QWORD *)(v55 + 400) = &v76[16 * v75];
                while ((_QWORD *)v83 != v80)
                {
                  v83 -= 16;
                  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](v83);
                }
              }
              if (v80)
                operator delete(v80);
            }
            else
            {
              *v67 = v62;
              v67[1] = v60;
              do
                v69 = __ldxr(v61);
              while (__stxr(v69 + 1, v61));
              v70 = v67 + 2;
            }
            *(_QWORD *)(v55 + 392) = v70;
            do
              v89 = __ldaxr(v61);
            while (__stlxr(v89 - 1, v61));
            if (!v89)
            {
              (*(void (**)(_QWORD *))(*v60 + 16))(v60);
              std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v60);
            }
            v57 = *(uint64_t **)(*(_QWORD *)(v55 + 392) - 16);
            v58 = v57[1];
          }
          v90 = v57[2];
          if (v58 >= v90)
          {
            v93 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v58 - *v57) >> 3);
            v94 = v93 + 1;
            if (v93 + 1 > 0x666666666666666)
              std::vector<double>::__throw_length_error[abi:ne180100]();
            v95 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v90 - *v57) >> 3);
            if (2 * v95 > v94)
              v94 = 2 * v95;
            if (v95 >= 0x333333333333333)
              v96 = 0x666666666666666;
            else
              v96 = v94;
            v113 = v57 + 3;
            if (v96)
            {
              v97 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v57[3] + 16))(v57[3], 40 * v96, 8);
              v98 = v97 + 40 * v93;
              *(_QWORD *)buf = v97;
              *(_QWORD *)&buf[8] = v98;
              *(_QWORD *)&buf[24] = v97 + 40 * v96;
              if (v97)
              {
                *(_QWORD *)v98 = 0;
                *(_QWORD *)(v98 + 8) = 0;
                *(_QWORD *)(v98 + 16) = 0;
                *(_QWORD *)(v98 + 24) = v103;
                *(_OWORD *)v98 = v101;
                *(_QWORD *)(v98 + 16) = v102;
                v101 = 0uLL;
                v102 = 0;
                *(float *)(v97 + 40 * v93 + 32) = v104;
              }
            }
            else
            {
              v98 = 40 * v93;
              *(_QWORD *)buf = 0;
              *(_QWORD *)&buf[8] = 40 * v93;
              *(_QWORD *)&buf[24] = 0;
            }
            *(_QWORD *)&buf[16] = v98 + 40;
            std::vector<gss::DashPattern,geo::StdAllocator<gss::DashPattern,gss::Allocator>>::__swap_out_circular_buffer(v57, buf);
            v92 = v57[1];
            std::__split_buffer<gss::DashPattern,geo::StdAllocator<gss::DashPattern,gss::Allocator> &>::~__split_buffer((uint64_t)buf);
          }
          else
          {
            if (v58)
            {
              *(_QWORD *)v58 = 0;
              *(_QWORD *)(v58 + 8) = 0;
              *(_QWORD *)(v58 + 16) = 0;
              v91 = v103;
              *(_OWORD *)v58 = v101;
              *(_QWORD *)(v58 + 16) = v102;
              *(_QWORD *)(v58 + 24) = v91;
              v101 = 0uLL;
              v102 = 0;
              *(float *)(v58 + 32) = v104;
            }
            v92 = v58 + 40;
          }
          v57[1] = v92;
          v99 = geo::intern_linear_map<gss::PropertyID,gss::StylePropertySetInternObject,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::operator[](a2 + 64, &v109);
          *(_BYTE *)v99 = 2;
          *(_QWORD *)(v99 + 8) = v92 - 40;
          v15 = 1;
          goto LABEL_108;
        }
        v38 = 0;
        v39 = *((unsigned __int8 *)a1 + 24);
        v40 = *((_BYTE *)a1 + 24) != 0;
        v42 = *(_QWORD *)a1;
        v41 = *((_QWORD *)a1 + 1);
        v43 = *((_QWORD *)a1 + 2);
        if (v22 <= 1)
          v44 = 1;
        else
          v44 = v22;
        while (1)
        {
          *(_WORD *)buf = 0;
          v45 = v43 + 2;
          if (v41 < v43 + 2 + v40)
            break;
          if (v39)
          {
            v46 = 0;
            v47 = 0;
            do
            {
              v48 = v46;
              v45 = v43 + 1;
              if (v43 + 1 >= v41)
                v49 = 0;
              else
                v49 = *(unsigned __int8 *)(v42 + v43 + 1);
              v50 = ((v49 & (0xFFFF << (8 - v39))) >> (8 - v39)) | ((((1 << (8 - v39)) + 255) & *(unsigned __int8 *)(v42 + v43)) << v39);
              *((_QWORD *)a1 + 2) = v45;
              buf[v47] = v50;
              v46 = 1;
              v43 = v45;
              v47 = 1;
            }
            while ((v48 & 1) == 0);
            v51 = *(unsigned __int16 *)buf;
          }
          else
          {
            v51 = *(unsigned __int16 *)(v42 + v43);
            *((_QWORD *)a1 + 2) = v45;
          }
          v37[v38++] = (float)v51 * 0.25;
          v43 = v45;
          if (v38 == v44)
          {
            v37 = (float *)v101;
            goto LABEL_53;
          }
        }
        if (GEOGetGeoCSSStyleSheetLog_onceToken != -1)
          dispatch_once(&GEOGetGeoCSSStyleSheetLog_onceToken, &__block_literal_global);
        v84 = GEOGetGeoCSSStyleSheetLog_log;
        if (os_log_type_enabled((os_log_t)GEOGetGeoCSSStyleSheetLog_log, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315650;
          *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StylePropertySet.cpp";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 590;
          *(_WORD *)&buf[18] = 2082;
          *(_QWORD *)&buf[20] = "Could not read dash gap.";
          _os_log_impl(&dword_19F029000, v84, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
        }
        v85 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a6, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StylePropertySet.cpp", 86);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v85, (uint64_t)":", 1);
        v86 = (_QWORD *)std::ostream::operator<<();
        v87 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v86, (uint64_t)" STYL Parse Error Here: ", 24);
        v88 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v87, (uint64_t)"Could not read dash gap.", 24);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v88, (uint64_t)"\n", 1);
LABEL_14:
        v15 = 0;
LABEL_108:
        *(_QWORD *)buf = &v101;
        std::vector<float,geo::StdAllocator<float,gss::Allocator>>::__destroy_vector::operator()[abi:ne180100]((uint64_t **)buf);
        goto LABEL_109;
      }
      v34 = v101 + 4 * v22;
    }
    else
    {
      if (v22 - v24 > (v102 - *((_QWORD *)&v101 + 1)) >> 2)
      {
        v25 = (v102 - (uint64_t)v101) >> 1;
        if (v25 <= v22)
          v25 = a3 >> 4;
        if ((unint64_t)(v102 - v101) >= 0x7FFFFFFFFFFFFFFCLL)
          v26 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v26 = v25;
        v27 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v16 + 16))(v16, 4 * v26, 4);
        v28 = (_DWORD *)(v27 + 4 * v24);
        v29 = v28;
        v30 = 4 * v22 - 4 * v24;
        do
        {
          if (v29)
            *v29 = 0;
          ++v29;
          v30 -= 4;
        }
        while (v30);
        v32 = *((_QWORD *)&v101 + 1);
        v31 = v101;
        while (v32 != v31)
        {
          v33 = *(_DWORD *)(v32 - 4);
          v32 -= 4;
          *--v28 = v33;
        }
        *(_QWORD *)&v101 = v28;
        *((_QWORD *)&v101 + 1) = v27 + 4 * v22;
        v36 = v102;
        v102 = v27 + 4 * v26;
        if (v31)
          (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v103 + 40))(v103, v31, v36 - v31);
        goto LABEL_38;
      }
      v34 = *((_QWORD *)&v101 + 1) + 4 * (v22 - v24);
      v35 = 4 * v22 - 4 * v24;
      do
      {
        if (v23)
          *v23 = 0;
        ++v23;
        v35 -= 4;
      }
      while (v35);
    }
    *((_QWORD *)&v101 + 1) = v34;
    goto LABEL_38;
  }
LABEL_109:
  std::vector<std::pair<gss::StylePropertyIndex,gss::PropertyID>,geo::StdAllocator<std::pair<gss::StylePropertyIndex,gss::PropertyID>,gss::Allocator>>::__destroy_vector::operator()[abi:ne180100]((uint64_t)&v105);
  return v15;
}

void sub_19F0FC140(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

uint64_t gss::stringDecoder<gss::PropertyID>(uint64_t *a1, unint64_t a2, unint64_t a3, unsigned int a4, _QWORD *a5, _QWORD *a6)
{
  int v11;
  _BOOL8 v12;
  void *v13;
  gss *v14;
  uint64_t v15;
  NSObject *v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  void *v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  NSObject *v26;
  _QWORD *v27;
  _QWORD *v28;
  _QWORD *v29;
  _QWORD *v30;
  _BYTE v32[7];
  void *v33[2];
  uint64_t v34;
  unsigned __int16 v35;
  _BYTE __p[28];
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  v11 = gss::idForIndex<gss::PropertyID>(a4);
  v35 = v11;
  if (v11 == 482)
    return 1;
  v33[0] = 0;
  v33[1] = 0;
  v34 = 0;
  if (a3)
  {
    memset(__p, 0, 24);
    if ((geo::ibitstream::readString(a1, (std::string *)__p) & 1) != 0)
    {
      v13 = *(void **)__p;
      *(_DWORD *)v32 = *(_DWORD *)&__p[16];
      *(_DWORD *)&v32[3] = *(_DWORD *)&__p[19];
      if ((__p[23] & 0x80000000) != 0)
      {
        std::string::__init_copy_ctor_external((std::string *)__p, *(const std::string::value_type **)__p, *(std::string::size_type *)&__p[8]);
        *(_OWORD *)v33 = *(_OWORD *)__p;
        v34 = *(_QWORD *)&__p[16];
        operator delete(v13);
      }
      else
      {
        *(_DWORD *)&__p[16] = *(_DWORD *)v32;
        *(_DWORD *)&__p[19] = *(_DWORD *)&v32[3];
        *(_OWORD *)v33 = *(_OWORD *)__p;
        v34 = *(_QWORD *)&__p[16];
      }
      v21 = (void *)HIBYTE(v34);
      v22 = HIBYTE(v34);
      if (v34 < 0)
        v21 = v33[1];
      v23 = (a3 >> 3) - 1;
      v12 = v21 == (void *)v23;
      if (v21 == (void *)v23)
      {
        *(_WORD *)__p = v35;
        __p[2] = 0;
        geo::intern_linear_map<gss::PropertyID,unsigned char,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::insert<std::pair<gss::PropertyID const,unsigned char> const*>(a2, (uint64_t)__p, (uint64_t)&__p[4]);
        v24 = geo::intern_pool<std::string,geo::StdAllocator<std::string,gss::Allocator>,std::vector<std::string,geo::StdAllocator<std::string,gss::Allocator>>>::emplace(*a5 + 352, (__int128 *)v33);
        v25 = geo::intern_linear_map<gss::PropertyID,gss::StylePropertySetInternObject,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::operator[](a2 + 64, &v35);
        *(_BYTE *)v25 = 1;
        *(_QWORD *)(v25 + 8) = v24;
        v22 = HIBYTE(v34);
      }
      else
      {
        if (GEOGetGeoCSSStyleSheetLog_onceToken != -1)
          dispatch_once(&GEOGetGeoCSSStyleSheetLog_onceToken, &__block_literal_global);
        v26 = GEOGetGeoCSSStyleSheetLog_log;
        if (os_log_type_enabled((os_log_t)GEOGetGeoCSSStyleSheetLog_log, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)__p = 136315650;
          *(_QWORD *)&__p[4] = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StylePropertySet.cpp";
          *(_WORD *)&__p[12] = 1024;
          *(_DWORD *)&__p[14] = 490;
          *(_WORD *)&__p[18] = 2082;
          *(_QWORD *)&__p[20] = "String property was an unexpected length.";
          _os_log_impl(&dword_19F029000, v26, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", __p, 0x1Cu);
        }
        v27 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a6, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StylePropertySet.cpp", 86);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)":", 1);
        v28 = (_QWORD *)std::ostream::operator<<();
        v29 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)" STYL Parse Error Here: ", 24);
        v30 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)"String property was an unexpected length.", 41);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)"\n", 1);
      }
      if (v22 < 0)
        operator delete(v33[0]);
    }
    else
    {
      if ((__p[23] & 0x80000000) != 0)
        operator delete(*(void **)__p);
      if (GEOGetGeoCSSStyleSheetLog_onceToken != -1)
        dispatch_once(&GEOGetGeoCSSStyleSheetLog_onceToken, &__block_literal_global);
      v16 = GEOGetGeoCSSStyleSheetLog_log;
      if (os_log_type_enabled((os_log_t)GEOGetGeoCSSStyleSheetLog_log, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)__p = 136315650;
        *(_QWORD *)&__p[4] = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StylePropertySet.cpp";
        *(_WORD *)&__p[12] = 1024;
        *(_DWORD *)&__p[14] = 488;
        *(_WORD *)&__p[18] = 2082;
        *(_QWORD *)&__p[20] = "Could not read string.";
        _os_log_impl(&dword_19F029000, v16, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", __p, 0x1Cu);
      }
      v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a6, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StylePropertySet.cpp", 86);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)":", 1);
      v18 = (_QWORD *)std::ostream::operator<<();
      v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)" STYL Parse Error Here: ", 24);
      v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"Could not read string.", 22);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"\n", 1);
      return 0;
    }
  }
  else
  {
    *(_WORD *)__p = v11;
    __p[2] = 0;
    v14 = (gss *)geo::intern_linear_map<gss::PropertyID,unsigned char,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::insert<std::pair<gss::PropertyID const,unsigned char> const*>(a2, (uint64_t)__p, (uint64_t)&__p[4]);
    gss::PropertySetDefaultStringValue(v14);
    v15 = geo::intern_linear_map<gss::PropertyID,gss::StylePropertySetInternObject,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::operator[](a2 + 64, &v35);
    v12 = 1;
    *(_BYTE *)v15 = 1;
    *(_QWORD *)(v15 + 8) = &unk_1ECE65988;
  }
  return v12;
}

void sub_19F0FC5B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  void *v23;

  operator delete(v23);
  _Unwind_Resume(a1);
}

unint64_t geo::intern_linear_map<gss::PropertyID,gss::StylePropertySetInternObject,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::insert<std::pair<gss::PropertyID const,gss::StylePropertySetInternObject> const*>(unint64_t result, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;
  unsigned __int16 *v7;

  if (a2 != a3)
  {
    v3 = result;
    if (!*(_BYTE *)(result + 14))
    {
      v5 = a2;
      do
      {
        result = geo::intern_linear_map<gss::PropertyID,unsigned char,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::keyIndex((unsigned __int16 **)v3, (unsigned __int16 *)v5);
        if ((_DWORD)result == *(unsigned __int16 *)(v3 + 10))
        {
          result = geo::intern_linear_map<gss::PropertyID,gss::StylePropertySetInternObject,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::isSpaceAvailable((unsigned __int16 *)v3);
          if (!(_DWORD)result)
            return result;
          v6 = *(unsigned __int16 *)(v3 + 10);
          v7 = *(unsigned __int16 **)v3;
          *(_WORD *)(*(_QWORD *)v3 + 2 * v6) = *(_WORD *)v5;
          *(_OWORD *)((char *)&v7[8 * v6] + *(unsigned __int16 *)(v3 + 8)) = *(_OWORD *)(v5 + 8);
          ++*(_WORD *)(v3 + 10);
          *(_BYTE *)(v3 + 15) = 0;
        }
        v5 += 24;
      }
      while (v5 != a3);
    }
  }
  return result;
}

uint64_t geo::intern_linear_map<gss::PropertyID,gss::StylePropertySetInternObject,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::operator[](unint64_t a1, unsigned __int16 *a2)
{
  unsigned int v4;
  uint64_t v5;
  unsigned __int16 v7;
  char v8;
  uint64_t v9;
  uint64_t v10;

  v4 = geo::intern_linear_map<gss::PropertyID,unsigned char,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::keyIndex((unsigned __int16 **)a1, a2);
  if (v4 == *(unsigned __int16 *)(a1 + 10))
  {
    v7 = *a2;
    v8 = 0;
    v9 = 0;
    geo::intern_linear_map<gss::PropertyID,gss::StylePropertySetInternObject,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::insert<std::pair<gss::PropertyID const,gss::StylePropertySetInternObject> const*>(a1, (uint64_t)&v7, (uint64_t)&v10);
    v5 = *(unsigned __int16 *)(a1 + 10) - 1;
  }
  else
  {
    v5 = v4;
  }
  return *(_QWORD *)a1 + *(unsigned __int16 *)(a1 + 8) + 16 * v5;
}

uint64_t geo::intern_linear_map<gss::PropertyID,gss::StylePropertySetInternObject,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::isSpaceAvailable(unsigned __int16 *a1)
{
  int v1;
  unsigned int v3;
  __int16 v4;
  unsigned __int16 v5;
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t result;

  v1 = a1[5];
  if (v1 != a1[6])
    return 1;
  if (v1 == 0xFFFF)
    return 0;
  v3 = 2 * (v1 & 0x7FFF);
  if (v3 <= 4)
    v4 = 4;
  else
    v4 = v3;
  v5 = ((2 * v4) & 0xFFF8) + 8;
  v6 = gss::Allocator::instance((gss::Allocator *)a1);
  v7 = (char *)(*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v6 + 16))(v6, (unsigned __int16)(v5 + 16 * v4) & 0xFFF8, 1);
  v8 = v7;
  if (*(_QWORD *)a1)
  {
    if (a1[5])
    {
      v7 = (char *)memmove(v7, *(const void **)a1, 2 * a1[5]);
      if (a1[5])
        v7 = (char *)memmove(&v8[v5], (const void *)(*(_QWORD *)a1 + a1[4]), 16 * a1[5]);
    }
    v9 = gss::Allocator::instance((gss::Allocator *)v7);
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v9 + 40))(v9, *(_QWORD *)a1, a1[6]);
  }
  a1[6] = v4;
  *(_QWORD *)a1 = v8;
  result = 1;
  a1[4] = v5;
  return result;
}

{
  int v1;
  unsigned int v2;
  __int16 v3;

  v1 = a1[5];
  if (v1 != a1[6])
    return 1;
  if (v1 != 0xFFFF)
  {
    v2 = 2 * (v1 & 0x7FFF);
    if (v2 <= 4)
      v3 = 4;
    else
      v3 = v2;
    geo::intern_linear_map<gss::PropertyID,gss::StylePropertySetInternObject,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::reallocate((gss::Allocator *)a1, v3, 0);
    return 1;
  }
  return 0;
}

_WORD *geo::intern_linear_map<gss::PropertyID,gss::StylePropertySetInternObject,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::reallocate(gss::Allocator *a1, __int16 a2, int a3)
{
  uint64_t v6;
  unsigned __int16 v7;
  _WORD *result;
  _WORD *v9;
  gss::Allocator *v10;
  uint64_t v11;

  v6 = gss::Allocator::instance(a1);
  v7 = ((2 * a2) & 0xFFF8) + 8;
  result = (_WORD *)(*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v6 + 16))(v6, (unsigned __int16)(v7 + 16 * a2), 1);
  v9 = result;
  if (*(_QWORD *)a1)
  {
    geo::intern_linear_map<gss::PropertyID,gss::StylePropertySetInternObject,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::moveContent((uint64_t)a1, result, (_WORD *)((char *)result + v7), a3);
    v11 = gss::Allocator::instance(v10);
    result = (_WORD *)(*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v11 + 40))(v11, *(_QWORD *)a1, *((unsigned __int16 *)a1 + 6));
  }
  *((_WORD *)a1 + 6) = a2;
  *(_QWORD *)a1 = v9;
  *((_WORD *)a1 + 4) = v7;
  return result;
}

uint64_t geo::intern_pool<std::string,geo::StdAllocator<std::string,gss::Allocator>,std::vector<std::string,geo::StdAllocator<std::string,gss::Allocator>>>::emplace(uint64_t a1, __int128 *a2)
{
  uint64_t v4;
  uint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  int64x2_t *v8;
  unint64_t *v9;
  int64x2_t *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  __int128 v19;
  int64x2_t v20;
  uint64_t v21;
  int64x2_t **v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char *v29;
  int64x2_t **v30;
  unint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  char *v34;
  __int128 v35;
  uint64_t v36;
  _QWORD *v37;
  unint64_t *v38;
  unint64_t v39;
  unint64_t v40;
  __int128 v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  __int128 v49;
  uint64_t v50;
  uint64_t v51;
  __int128 v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v56;
  int64x2_t v57;
  uint64_t v58;
  uint64_t *v59;

  v4 = *(_QWORD *)(a1 + 8);
  if (*(_QWORD *)a1 == v4
    || (v5 = *(uint64_t **)(v4 - 16),
        v6 = v5[1],
        0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v6 - *v5) >> 3) == *(_DWORD *)(a1 + 24)))
  {
    v7 = gss::Allocator::instance((gss::Allocator *)a1);
    v8 = (int64x2_t *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v7 + 16))(v7, 64, 8);
    v8->i64[1] = 0;
    v9 = &v8->u64[1];
    v8->i64[0] = (uint64_t)&off_1E42E6798;
    v8[1].i64[0] = 0;
    v8[1].i64[1] = v7;
    v8[2].i64[0] = 0;
    v10 = v8 + 2;
    v8[2].i64[1] = 0;
    v8[3].i64[0] = 0;
    v11 = gss::Allocator::instance((gss::Allocator *)v8);
    v8[3].i64[1] = v11;
    v12 = *(unsigned int *)(a1 + 24);
    v13 = v8[2].i64[0];
    if (0xAAAAAAAAAAAAAAABLL * ((v8[3].i64[0] - v13) >> 3) < v12)
    {
      v14 = v8[2].i64[1];
      v59 = &v8[3].i64[1];
      v15 = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)v11 + 16))(v11, 24 * v12, 8);
      v16 = v8[2].i64[0];
      v17 = v8[2].u64[1];
      if (v17 == v16)
      {
        v20 = vdupq_n_s64(v17);
        v18 = v15 + 24 * ((v14 - v13) / 24);
      }
      else
      {
        v18 = v15 + 24 * ((v14 - v13) / 24);
        do
        {
          v19 = *(_OWORD *)(v17 - 24);
          *(_QWORD *)(v18 - 8) = *(_QWORD *)(v17 - 8);
          *(_OWORD *)(v18 - 24) = v19;
          v18 -= 24;
          *(_QWORD *)(v17 - 16) = 0;
          *(_QWORD *)(v17 - 8) = 0;
          *(_QWORD *)(v17 - 24) = 0;
          v17 -= 24;
        }
        while (v17 != v16);
        v20 = *v10;
      }
      v8[2].i64[0] = v18;
      v8[2].i64[1] = v15 + 24 * ((v14 - v13) / 24);
      v57 = v20;
      v21 = v8[3].i64[0];
      v8[3].i64[0] = v15 + 24 * v12;
      v58 = v21;
      v56 = v20.i64[0];
      std::__split_buffer<std::string,geo::StdAllocator<std::string,gss::Allocator> &>::~__split_buffer((uint64_t)&v56);
    }
    v22 = *(int64x2_t ***)(a1 + 8);
    v23 = *(_QWORD *)(a1 + 16);
    if ((unint64_t)v22 >= v23)
    {
      v25 = ((uint64_t)v22 - *(_QWORD *)a1) >> 4;
      v26 = v25 + 1;
      if ((unint64_t)(v25 + 1) >> 60)
        std::vector<double>::__throw_length_error[abi:ne180100]();
      v27 = v23 - *(_QWORD *)a1;
      if (v27 >> 3 > v26)
        v26 = v27 >> 3;
      if ((unint64_t)v27 >= 0x7FFFFFFFFFFFFFF0)
        v28 = 0xFFFFFFFFFFFFFFFLL;
      else
        v28 = v26;
      if (v28 >> 60)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v29 = (char *)operator new(16 * v28);
      v30 = (int64x2_t **)&v29[16 * v25];
      *v30 = v10;
      v30[1] = v8;
      do
        v31 = __ldxr(v9);
      while (__stxr(v31 + 1, v9));
      v33 = *(_QWORD **)a1;
      v32 = *(_QWORD **)(a1 + 8);
      if (v32 == *(_QWORD **)a1)
      {
        v37 = v30 + 2;
        *(_QWORD *)a1 = v30;
        *(_QWORD *)(a1 + 8) = v30 + 2;
        *(_QWORD *)(a1 + 16) = &v29[16 * v28];
      }
      else
      {
        v34 = &v29[16 * v25];
        do
        {
          v35 = *((_OWORD *)v32 - 1);
          v32 -= 2;
          *((_OWORD *)v34 - 1) = v35;
          v34 -= 16;
          *v32 = 0;
          v32[1] = 0;
        }
        while (v32 != v33);
        v33 = *(_QWORD **)a1;
        v36 = *(_QWORD *)(a1 + 8);
        v37 = v30 + 2;
        *(_QWORD *)a1 = v34;
        *(_QWORD *)(a1 + 8) = v30 + 2;
        *(_QWORD *)(a1 + 16) = &v29[16 * v28];
        while ((_QWORD *)v36 != v33)
        {
          v36 -= 16;
          std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](v36);
        }
      }
      if (v33)
        operator delete(v33);
      *(_QWORD *)(a1 + 8) = v37;
      if (!v8)
        goto LABEL_37;
    }
    else
    {
      *v22 = v10;
      v22[1] = v8;
      do
        v24 = __ldxr(v9);
      while (__stxr(v24 + 1, v9));
      *(_QWORD *)(a1 + 8) = v22 + 2;
    }
    v38 = &v8->u64[1];
    do
      v39 = __ldaxr(v38);
    while (__stlxr(v39 - 1, v38));
    if (!v39)
    {
      (*(void (**)(int64x2_t *))(v8->i64[0] + 16))(v8);
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v8);
    }
LABEL_37:
    v5 = *(uint64_t **)(*(_QWORD *)(a1 + 8) - 16);
    v6 = v5[1];
  }
  v40 = v5[2];
  if (v6 >= v40)
  {
    v43 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v6 - *v5) >> 3);
    v44 = v43 + 1;
    if (v43 + 1 > 0xAAAAAAAAAAAAAAALL)
      std::vector<double>::__throw_length_error[abi:ne180100]();
    v45 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v40 - *v5) >> 3);
    if (2 * v45 > v44)
      v44 = 2 * v45;
    if (v45 >= 0x555555555555555)
      v44 = 0xAAAAAAAAAAAAAAALL;
    v59 = v5 + 3;
    if (v44)
    {
      v46 = 3 * v44;
      v47 = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)v5[3] + 16))(v5[3], 24 * v44, 8);
      v48 = v47 + 24 * v43;
      v44 = v47 + 8 * v46;
      if (v47)
      {
        v49 = *a2;
        *(_QWORD *)(v48 + 16) = *((_QWORD *)a2 + 2);
        *(_OWORD *)v48 = v49;
        *((_QWORD *)a2 + 1) = 0;
        *((_QWORD *)a2 + 2) = 0;
        *(_QWORD *)a2 = 0;
      }
    }
    else
    {
      v48 = 24 * v43;
    }
    v42 = v48 + 24;
    v51 = *v5;
    v50 = v5[1];
    if (v50 == *v5)
    {
      v53 = v5[1];
    }
    else
    {
      do
      {
        v52 = *(_OWORD *)(v50 - 24);
        *(_QWORD *)(v48 - 8) = *(_QWORD *)(v50 - 8);
        *(_OWORD *)(v48 - 24) = v52;
        v48 -= 24;
        *(_QWORD *)(v50 - 16) = 0;
        *(_QWORD *)(v50 - 8) = 0;
        *(_QWORD *)(v50 - 24) = 0;
        v50 -= 24;
      }
      while (v50 != v51);
      v53 = *v5;
      v50 = v5[1];
    }
    *v5 = v48;
    v56 = v53;
    v57.i64[0] = v53;
    v5[1] = v42;
    v57.i64[1] = v50;
    v54 = v5[2];
    v5[2] = v44;
    v58 = v54;
    std::__split_buffer<std::string,geo::StdAllocator<std::string,gss::Allocator> &>::~__split_buffer((uint64_t)&v56);
  }
  else
  {
    if (v6)
    {
      v41 = *a2;
      *(_QWORD *)(v6 + 16) = *((_QWORD *)a2 + 2);
      *(_OWORD *)v6 = v41;
      *((_QWORD *)a2 + 1) = 0;
      *((_QWORD *)a2 + 2) = 0;
      *(_QWORD *)a2 = 0;
    }
    v42 = v6 + 24;
  }
  v5[1] = v42;
  return v42 - 24;
}

void sub_19F0FCD54(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::__split_buffer<std::string,geo::StdAllocator<std::string,gss::Allocator> &>::~__split_buffer(uint64_t a1)
{
  void **v2;
  void **v3;
  void **v4;

  v3 = *(void ***)(a1 + 8);
  v2 = *(void ***)(a1 + 16);
  if (v2 != v3)
  {
    do
    {
      v4 = v2 - 3;
      *(_QWORD *)(a1 + 16) = v2 - 3;
      if (*((char *)v2 - 1) < 0)
      {
        operator delete(*v4);
        v4 = *(void ***)(a1 + 16);
      }
      v2 = v4;
    }
    while (v4 != v3);
  }
  if (*(_QWORD *)a1)
    (*(void (**)(_QWORD, _QWORD, _QWORD))(***(_QWORD ***)(a1 + 32) + 40))(**(_QWORD **)(a1 + 32), *(_QWORD *)a1, *(_QWORD *)(a1 + 24) - *(_QWORD *)a1);
  return a1;
}

uint64_t *std::vector<gss::DashPattern,geo::StdAllocator<gss::DashPattern,gss::Allocator>>::__swap_out_circular_buffer(uint64_t *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = *result;
  v2 = result[1];
  v4 = a2[1];
  if (v2 != *result)
  {
    v5 = 0;
    do
    {
      v6 = v4 + v5;
      v7 = v2 + v5;
      *(_QWORD *)(v6 - 40) = 0;
      *(_QWORD *)(v6 - 32) = 0;
      *(_QWORD *)(v6 - 24) = 0;
      *(_QWORD *)(v6 - 16) = *(_QWORD *)(v2 + v5 - 16);
      *(_OWORD *)(v6 - 40) = *(_OWORD *)(v2 + v5 - 40);
      *(_QWORD *)(v6 - 24) = *(_QWORD *)(v2 + v5 - 24);
      *(_QWORD *)(v7 - 40) = 0;
      *(_QWORD *)(v7 - 32) = 0;
      *(_QWORD *)(v7 - 24) = 0;
      *(_DWORD *)(v6 - 8) = *(_DWORD *)(v2 + v5 - 8);
      v5 -= 40;
    }
    while (v2 + v5 != v3);
    v4 += v5;
  }
  a2[1] = v4;
  v8 = *result;
  *result = v4;
  a2[1] = v8;
  v9 = result[1];
  result[1] = a2[2];
  a2[2] = v9;
  v10 = result[2];
  result[2] = a2[3];
  a2[3] = v10;
  *a2 = a2[1];
  return result;
}

uint64_t std::__split_buffer<gss::DashPattern,geo::StdAllocator<gss::DashPattern,gss::Allocator> &>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;
  uint64_t *v4;
  uint64_t *v6;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    v4 = (uint64_t *)(i - 40);
    *(_QWORD *)(a1 + 16) = v4;
    v6 = v4;
    std::vector<float,geo::StdAllocator<float,gss::Allocator>>::__destroy_vector::operator()[abi:ne180100](&v6);
  }
  if (*(_QWORD *)a1)
    (*(void (**)(_QWORD, _QWORD, _QWORD))(***(_QWORD ***)(a1 + 32) + 40))(**(_QWORD **)(a1 + 32), *(_QWORD *)a1, *(_QWORD *)(a1 + 24) - *(_QWORD *)a1);
  return a1;
}

void *gss::PropertySetDefaultStringValue(gss *this)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)&_MergedGlobals_0);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&_MergedGlobals_0))
  {
    __cxa_atexit(MEMORY[0x1E0DE44D0], &unk_1ECE65988, &dword_19F029000);
    __cxa_guard_release(&_MergedGlobals_0);
  }
  return &unk_1ECE65988;
}

void gss::StyleSheet<gss::PropertyID>::decodeStyl(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, _QWORD *a7)
{
  uint64_t *v14;
  uint64_t v15;
  char v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unsigned int v20;
  unint64_t v21;
  unint64_t v22;
  unsigned int v23;
  NSObject *v24;
  _QWORD *v25;
  _QWORD *v26;
  const char *v27;
  uint64_t v28;
  NSObject *v29;
  _QWORD *v30;
  _QWORD *v31;
  _QWORD *v32;
  unint64_t v33;
  NSObject *v34;
  _QWORD *v35;
  _QWORD *v36;
  _QWORD *v37;
  uint64_t v38;
  int v39;
  int v40;
  unint64_t v41;
  NSObject *v42;
  _QWORD *v43;
  _QWORD *v44;
  _QWORD *v45;
  unint64_t v46;
  uint64_t v47;
  unsigned int v48;
  int v49;
  int v50;
  unint64_t v51;
  int v52;
  unint64_t v53;
  unint64_t v54;
  int v55;
  NSObject *v56;
  _QWORD *v57;
  _QWORD *v58;
  _QWORD *v59;
  unint64_t v60;
  unint64_t v61;
  NSObject *v62;
  _QWORD *v63;
  _QWORD *v64;
  uint64_t v65;
  char v66;
  int v67;
  unint64_t v68;
  int v69;
  unsigned int v70;
  unsigned int v71;
  unsigned int v72;
  int v73;
  int v74;
  unint64_t v75;
  unsigned int v76;
  unint64_t v77;
  unsigned int v78;
  unint64_t v79;
  char v80;
  int v81;
  int v82;
  NSObject *v83;
  _QWORD *v84;
  _QWORD *v85;
  NSObject *v86;
  _QWORD *v87;
  _QWORD *v88;
  uint64_t v89;
  char v90;
  uint64_t v91;
  NSObject *v92;
  _QWORD *v93;
  _QWORD *v94;
  _QWORD *v95;
  int v96;
  unint64_t v97;
  char v98;
  unint64_t v99;
  unint64_t v100;
  unsigned int v101;
  unint64_t v102;
  NSObject *v103;
  _QWORD *v104;
  _QWORD *v105;
  _QWORD *v106;
  char v107;
  int v108;
  int v109;
  int v110;
  uint64_t v111;
  uint64_t v112;
  unint64_t v113;
  unint64_t v114;
  char v115;
  unint64_t v116;
  unint64_t v117;
  unsigned int v118;
  unint64_t v119;
  uint64_t v120;
  int v121;
  uint64_t *v122;
  uint64_t **v123;
  uint64_t **v124;
  unsigned int v125;
  uint64_t v126;
  uint64_t *v127;
  int v128;
  unsigned int v129;
  uint64_t v130;
  uint64_t v131;
  unint64_t v132;
  unint64_t v133;
  char v134;
  unint64_t v135;
  unint64_t v136;
  unsigned int v137;
  unint64_t v138;
  uint64_t v139;
  int v140;
  uint64_t *v141;
  uint64_t **v142;
  uint64_t **v143;
  unsigned int v144;
  uint64_t v145;
  uint64_t *v146;
  NSObject *v147;
  _QWORD *v148;
  _QWORD *v149;
  _QWORD *v150;
  NSObject *v151;
  _QWORD *v152;
  _QWORD *v153;
  _QWORD *v154;
  NSObject *v155;
  _QWORD *v156;
  _QWORD *v157;
  _QWORD *v158;
  NSObject *v159;
  _QWORD *v160;
  _QWORD *v161;
  _QWORD *v162;
  geo::ibitstream *v163;
  char *v164;
  std::__shared_weak_count *v170;
  unint64_t *p_shared_owners;
  unint64_t v172;
  uint64_t v173;
  uint64_t *v174;
  uint64_t *v175;
  uint64_t v176;
  uint64_t v177;
  unint64_t v178;
  unint64_t v179;
  char v180;
  unint64_t v181;
  unint64_t v182;
  unsigned int v183;
  NSObject *v184;
  _QWORD *v185;
  _QWORD *v186;
  _QWORD *v187;
  NSObject *v188;
  _QWORD *v189;
  NSObject *v190;
  _QWORD *v191;
  _QWORD *v192;
  _QWORD *v193;
  NSObject *v194;
  _QWORD *v195;
  _QWORD *v196;
  _QWORD *v197;
  unint64_t v198;
  NSObject *v199;
  _QWORD *v200;
  _QWORD *v201;
  _QWORD *v202;
  NSObject *v203;
  _QWORD *v204;
  _QWORD *v205;
  _QWORD *v206;
  uint64_t v207;
  int v208;
  int v209;
  int v210;
  gss::Allocator *v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  _QWORD *v216;
  uint64_t *v217;
  int v218;
  uint64_t *v219;
  unsigned __int16 v220;
  uint64_t **v221;
  uint64_t *v222;
  uint64_t **v223;
  unsigned int v224;
  uint64_t **v225;
  uint64_t *v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  char v230;
  _QWORD *v231;
  char v232;
  uint64_t v233;
  unint64_t v234;
  uint64_t *v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  NSObject *v239;
  _QWORD *v240;
  _QWORD *v241;
  _QWORD *v242;
  NSObject *v243;
  _QWORD *v244;
  _QWORD *v245;
  _QWORD *v246;
  NSObject *v247;
  _QWORD *v248;
  uint64_t v249;
  _QWORD *v250;
  const char *v251;
  NSObject *v252;
  _QWORD *v253;
  _QWORD *v254;
  _QWORD *v255;
  NSObject *v256;
  _QWORD *v257;
  _QWORD *v258;
  NSObject *v259;
  _QWORD *v260;
  _QWORD *v261;
  _QWORD *v262;
  NSObject *v263;
  _QWORD *v264;
  _QWORD *v265;
  NSObject *v266;
  _QWORD *v267;
  _QWORD *v268;
  _QWORD *v269;
  uint64_t v270;
  uint64_t v271;
  NSObject *v272;
  _QWORD *v273;
  NSObject *v274;
  _QWORD *v275;
  _QWORD *v276;
  _QWORD *v277;
  NSObject *v278;
  _QWORD *v279;
  _QWORD *v280;
  _QWORD *v281;
  gss::Allocator **v282;
  int v283;
  uint64_t v284;
  int v285;
  uint64_t v286;
  unsigned __int16 v287;
  unsigned __int8 v288;
  int v289;
  uint64_t v290;
  uint64_t (***v291)();
  uint64_t v292;
  int v293;
  int v294;
  unsigned __int8 v295[8];
  uint64_t v296;
  int v297;
  BOOL v298;
  unsigned __int8 v299;
  unsigned __int8 v300;
  uint64_t **v301;
  uint64_t *v302;
  gss::Allocator *v303;
  uint64_t v304;
  unsigned __int8 v305;
  uint64_t **v306;
  uint64_t *v307;
  uint64_t v308;
  uint64_t v309;
  char v310;
  _QWORD **v311;
  _QWORD *v312;
  gss::Allocator *v313;
  uint64_t v314;
  uint64_t *v315;
  uint64_t v316;
  gss::Allocator *v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;
  unsigned __int16 v323;
  _BYTE buf[18];
  __int16 v325;
  _BYTE v326[12];
  uint64_t v327;

  v327 = *MEMORY[0x1E0C80C00];
  v312 = 0;
  v313 = (gss::Allocator *)gss::Allocator::instance((gss::Allocator *)a1);
  v314 = 0;
  v311 = &v312;
  v316 = 0;
  v317 = (gss::Allocator *)gss::Allocator::instance(v313);
  v318 = 0;
  v315 = &v316;
  v319 = a2;
  v320 = a3;
  v302 = 0;
  v303 = (gss::Allocator *)gss::Allocator::instance(v317);
  v304 = 0;
  v301 = &v302;
  v307 = 0;
  v308 = gss::Allocator::instance(v303);
  v309 = 0;
  v306 = &v307;
  v296 = a1;
  if ((gss::StylFile::parseHeader((uint64_t)&v311, a7) & 1) == 0)
  {
    GEOGetGeoCSSStyleSheetLog();
    v24 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleSheet.hpp";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 386;
      v325 = 2082;
      *(_QWORD *)v326 = "Could not decode STYL header.";
      _os_log_impl(&dword_19F029000, v24, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
    }

    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a7, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleSheet.hpp", 80);
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a7, (uint64_t)":", 1);
    v25 = (_QWORD *)std::ostream::operator<<();
    v26 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v25, (uint64_t)" STYL Parse Error Here: ", 24);
    v27 = "Could not decode STYL header.";
    v28 = 29;
    goto LABEL_107;
  }
  v14 = gss::StylFile::chapter(&v311, 1u);
  geo::ibitstream::readVarInt((uint64_t)&v321, v14);
  if (!(_BYTE)v321)
  {
    GEOGetGeoCSSStyleSheetLog();
    v29 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleSheet.hpp";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 414;
      v325 = 2082;
      *(_QWORD *)v326 = "Could not read stylesheet version.";
      _os_log_impl(&dword_19F029000, v29, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
    }

    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a7, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleSheet.hpp", 80);
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a7, (uint64_t)":", 1);
    v30 = (_QWORD *)std::ostream::operator<<();
    v31 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v30, (uint64_t)" STYL Parse Error Here: ", 24);
    v32 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v31, (uint64_t)"Could not read stylesheet version.", 34);
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v32, (uint64_t)"\n", 1);
    goto LABEL_104;
  }
  v297 = v322;
  v15 = *((unsigned __int8 *)v14 + 24);
  v16 = v15 + 1;
  v17 = v14[1];
  v18 = v14[2];
  v19 = v18 + ((unint64_t)(v15 + 1) >> 3);
  v20 = (v15 + 1) & 7;
  v21 = v18 + 1;
  if (v19 < v18 + 1)
  {
    if (*((_BYTE *)v14 + 24))
      v22 = v18 + 1;
    else
      v22 = v14[2];
    if (v17 < v22)
      goto LABEL_22;
    if (*((_BYTE *)v14 + 24))
    {
      if (v17 >= v21)
      {
        v23 = (((1 << (8 - v15)) - 1) & *(unsigned __int8 *)(*v14 + v18)) << v15;
        goto LABEL_33;
      }
      goto LABEL_21;
    }
    if (v17 >= v21)
    {
      LOBYTE(v23) = *(_BYTE *)(*v14 + v18);
      goto LABEL_33;
    }
LABEL_21:
    v14[2] = v19;
    *((_BYTE *)v14 + 24) = v20;
LABEL_22:
    GEOGetGeoCSSStyleSheetLog();
    v34 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v34, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleSheet.hpp";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 417;
      v325 = 2082;
      *(_QWORD *)v326 = "Could not read debug stylesheet flag.";
      _os_log_impl(&dword_19F029000, v34, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
    }

    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a7, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleSheet.hpp", 80);
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a7, (uint64_t)":", 1);
    v35 = (_QWORD *)std::ostream::operator<<();
    v36 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v35, (uint64_t)" STYL Parse Error Here: ", 24);
    v37 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v36, (uint64_t)"Could not read debug stylesheet flag.", 37);
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v37, (uint64_t)"\n", 1);
    goto LABEL_104;
  }
  if (v15 <= 7)
    v33 = v18 + 1;
  else
    v33 = v18 + 2;
  if (v17 < v33)
    goto LABEL_21;
  v38 = *v14;
  if (*((_BYTE *)v14 + 24))
  {
    v39 = *(unsigned __int8 *)(v38 + v18);
    if (v21 >= v17)
      v40 = 0;
    else
      v40 = *(unsigned __int8 *)(v38 + v21);
    v23 = ((v40 & (0xFFFF << (8 - v15))) >> (8 - v15)) | ((((1 << (8 - v15)) + 255) & v39) << v15);
    v14[2] = v21;
  }
  else
  {
    LOBYTE(v23) = *(_BYTE *)(v38 + v18);
  }
LABEL_33:
  v14[2] = v19;
  *((_BYTE *)v14 + 24) = v20;
  v298 = (v23 & 0x80) != 0;
  v41 = v19 + 2;
  if (!v20)
    v41 = v19 + 1;
  if (v17 < v41)
  {
    GEOGetGeoCSSStyleSheetLog();
    v42 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v42, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleSheet.hpp";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 420;
      v325 = 2082;
      *(_QWORD *)v326 = "Could not read number of modes.";
      _os_log_impl(&dword_19F029000, v42, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
    }

    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a7, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleSheet.hpp", 80);
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a7, (uint64_t)":", 1);
    v43 = (_QWORD *)std::ostream::operator<<();
    v44 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v43, (uint64_t)" STYL Parse Error Here: ", 24);
    v45 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v44, (uint64_t)"Could not read number of modes.", 31);
LABEL_103:
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v45, (uint64_t)"\n", 1);
    goto LABEL_104;
  }
  v46 = v19 + 1;
  v47 = *v14;
  v48 = *(unsigned __int8 *)(*v14 + v19);
  if (v20)
  {
    if (v46 >= v17)
      v49 = 0;
    else
      v49 = *(unsigned __int8 *)(v47 + v46);
    v48 = (((v49 & (0xFFFF << (8 - v20))) >> (8 - v20)) | ((((1 << (8 - v20)) - 1) & v48) << (v16 & 7)));
  }
  v14[2] = v46;
  if (!v48)
  {
LABEL_74:
    v60 = v46 + 2;
    v61 = v46 + 3;
    if (!v20)
      v61 = v46 + 2;
    if (v17 < v61)
    {
      GEOGetGeoCSSStyleSheetLog();
      v62 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v62, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315650;
        *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleSheet.hpp";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 441;
        v325 = 2082;
        *(_QWORD *)v326 = "Could not read number of attributes.";
        _os_log_impl(&dword_19F029000, v62, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
      }

      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a7, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleSheet.hpp", 80);
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a7, (uint64_t)":", 1);
      v63 = (_QWORD *)std::ostream::operator<<();
      v64 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v63, (uint64_t)" STYL Parse Error Here: ", 24);
      v45 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v64, (uint64_t)"Could not read number of attributes.", 36);
      goto LABEL_103;
    }
    v65 = *v14;
    if (v20)
    {
      v66 = 8 - v20;
      v67 = 0xFFFF << (8 - v20);
      v68 = v46 + 1;
      if (v46 + 1 >= v17)
        v69 = 0;
      else
        v69 = *(unsigned __int8 *)(v65 + v68);
      v71 = ((v69 & v67) >> v66) | ((((1 << (8 - v20)) - 1) & *(_BYTE *)(v65 + v46)) << v20);
      v14[2] = v68;
      v73 = *(unsigned __int8 *)(v65 + v68);
      if (v60 >= v17)
        v74 = 0;
      else
        v74 = *(unsigned __int8 *)(v65 + v60);
      v72 = ((v74 & v67) >> v66) | ((((1 << (8 - v20)) + 255) & v73) << v20);
      v70 = v20;
    }
    else
    {
      v70 = 0;
      v71 = *(unsigned __int16 *)(v65 + v46);
      v72 = v71 >> 8;
    }
    v14[2] = v60;
    v75 = v60 + ((v70 + 5) >> 3);
    v76 = (v70 + 5) & 7;
    v77 = v46 + 3;
    if (v75 >= v77)
    {
      if (v20 <= 3)
        v79 = v77;
      else
        v79 = v77 + 1;
      if (v17 < v79)
        goto LABEL_113;
      if (v20)
      {
        v80 = 8 - v20;
        v81 = *(unsigned __int8 *)(v65 + v60);
        if (v77 >= v17)
          v82 = 0;
        else
          v82 = *(unsigned __int8 *)(v65 + v77);
        v78 = ((v82 & (0xFFFF << v80)) >> v80) | ((((1 << v80) + 255) & v81) << v70);
        v14[2] = v77;
LABEL_119:
        v14[2] = v75;
        *((_BYTE *)v14 + 24) = v76;
        v96 = ((_BYTE)v70 + 5) & 7;
        v97 = v75 + ((v96 + 5) >> 3);
        v98 = (v96 + 5) & 7;
        v99 = v75 + 1;
        v292 = a6;
        if (v97 >= v75 + 1)
        {
          if (v76 <= 3)
            v102 = v75 + 1;
          else
            v102 = v75 + 2;
          if (v17 >= v102)
          {
            v290 = a5;
            if (v76)
            {
              v107 = 8 - v76;
              v108 = *(unsigned __int8 *)(v65 + v75);
              if (v99 >= v17)
                v109 = 0;
              else
                v109 = *(unsigned __int8 *)(v65 + v99);
              v101 = ((v109 & (0xFFFF << v107)) >> v107) | ((((1 << v107) + 255) & v108) << v96);
              v14[2] = v99;
LABEL_143:
              v14[2] = v97;
              *((_BYTE *)v14 + 24) = v98;
              v299 = (v78 >> 3) + 1;
              v300 = (v101 >> 3) + 1;
              v287 = v71 | (unsigned __int16)((_WORD)v72 << 8);
              if (v287)
              {
                v110 = 0;
                while (1)
                {
                  v293 = v110;
                  LODWORD(v321) = 0;
                  if (!gss::decodeAttributeEncoding(v14, &v321, v299, v300, a7))
                    break;
                  v111 = *((unsigned __int8 *)v14 + 24);
                  v113 = v14[1];
                  v112 = v14[2];
                  v114 = v112 + ((unint64_t)(v111 + 5) >> 3);
                  v115 = (v111 + 5) & 7;
                  v116 = v112 + 1;
                  a5 = v290;
                  a6 = v292;
                  if (v114 >= v112 + 1)
                  {
                    if (v111 <= 3)
                      v119 = v112 + 1;
                    else
                      v119 = v112 + 2;
                    if (v113 < v119)
                    {
LABEL_224:
                      v14[2] = v114;
                      *((_BYTE *)v14 + 24) = v115;
LABEL_225:
                      GEOGetGeoCSSStyleSheetLog();
                      v155 = objc_claimAutoreleasedReturnValue();
                      if (os_log_type_enabled(v155, OS_LOG_TYPE_ERROR))
                      {
                        *(_DWORD *)buf = 136315650;
                        *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleSheet.hpp";
                        *(_WORD *)&buf[12] = 1024;
                        *(_DWORD *)&buf[14] = 452;
                        v325 = 2082;
                        *(_QWORD *)v326 = "Could not read number of bits for attribute value.";
                        _os_log_impl(&dword_19F029000, v155, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
                      }

                      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a7, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleSheet.hpp", 80);
                      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a7, (uint64_t)":", 1);
                      v156 = (_QWORD *)std::ostream::operator<<();
                      v157 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v156, (uint64_t)" STYL Parse Error Here: ", 24);
                      v158 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v157, (uint64_t)"Could not read number of bits for attribute value.", 50);
                      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v158, (uint64_t)"\n", 1);
                      goto LABEL_104;
                    }
                    v120 = *v14;
                    if (*((_BYTE *)v14 + 24))
                    {
                      if (v116 >= v113)
                        v121 = 0;
                      else
                        v121 = *(unsigned __int8 *)(v120 + v116);
                      v118 = ((v121 & (0xFFFF << (8 - v111))) >> (8 - v111)) | ((((1 << (8 - v111)) + 255) & *(unsigned __int8 *)(v120 + v112)) << v111);
                      v14[2] = v116;
                    }
                    else
                    {
                      LOBYTE(v118) = *(_BYTE *)(v120 + v112);
                    }
                  }
                  else
                  {
                    if (*((_BYTE *)v14 + 24))
                      v117 = v112 + 1;
                    else
                      v117 = v14[2];
                    if (v113 < v117)
                      goto LABEL_225;
                    if (*((_BYTE *)v14 + 24))
                    {
                      if (v113 < v116)
                        goto LABEL_224;
                      v118 = (((1 << (8 - v111)) - 1) & *(unsigned __int8 *)(*v14 + v112)) << v111;
                    }
                    else
                    {
                      if (v113 < v116)
                        goto LABEL_224;
                      LOBYTE(v118) = *(_BYTE *)(*v14 + v112);
                    }
                  }
                  v14[2] = v114;
                  *((_BYTE *)v14 + 24) = v115;
                  v122 = v302;
                  v123 = &v302;
                  v124 = &v302;
                  if (v302)
                  {
                    while (1)
                    {
                      while (1)
                      {
                        v124 = (uint64_t **)v122;
                        v125 = *((_DWORD *)v122 + 7);
                        if (v321 >= v125)
                          break;
                        v122 = *v124;
                        v123 = v124;
                        if (!*v124)
                          goto LABEL_175;
                      }
                      if (v125 >= v321)
                        break;
                      v122 = v124[1];
                      if (!v122)
                      {
                        v123 = v124 + 1;
                        goto LABEL_175;
                      }
                    }
                    v126 = (uint64_t)v124;
                  }
                  else
                  {
LABEL_175:
                    v126 = (*(uint64_t (**)(gss::Allocator *, uint64_t, uint64_t))(*(_QWORD *)v303 + 16))(v303, 40, 8);
                    *(_DWORD *)(v126 + 28) = v321;
                    *(_BYTE *)(v126 + 32) = 0;
                    *(_QWORD *)v126 = 0;
                    *(_QWORD *)(v126 + 8) = 0;
                    *(_QWORD *)(v126 + 16) = v124;
                    *v123 = (uint64_t *)v126;
                    v127 = (uint64_t *)v126;
                    if (*v301)
                    {
                      v301 = (uint64_t **)*v301;
                      v127 = *v123;
                    }
                    std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(v302, v127);
                    ++v304;
                  }
                  *(_BYTE *)(v126 + 32) = (v118 >> 3) + 1;
                  v110 = v293 + 1;
                  if ((unsigned __int16)(v293 + 1) >= v287)
                    goto LABEL_178;
                }
                GEOGetGeoCSSStyleSheetLog();
                a5 = v290;
                a6 = v292;
                v151 = objc_claimAutoreleasedReturnValue();
                if (os_log_type_enabled(v151, OS_LOG_TYPE_ERROR))
                {
                  *(_DWORD *)buf = 136315650;
                  *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleSheet.hpp";
                  *(_WORD *)&buf[12] = 1024;
                  *(_DWORD *)&buf[14] = 450;
                  v325 = 2082;
                  *(_QWORD *)v326 = "Could not decode attribute.";
                  _os_log_impl(&dword_19F029000, v151, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
                }

                std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a7, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleSheet.hpp", 80);
                std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a7, (uint64_t)":", 1);
                v152 = (_QWORD *)std::ostream::operator<<();
                v153 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v152, (uint64_t)" STYL Parse Error Here: ", 24);
                v154 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v153, (uint64_t)"Could not decode attribute.", 27);
                std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v154, (uint64_t)"\n", 1);
                goto LABEL_104;
              }
LABEL_178:
              geo::ibitstream::readUIntBits(&v321, v14, 5u);
              if (!(_BYTE)v321)
              {
                GEOGetGeoCSSStyleSheetLog();
                a5 = v290;
                a6 = v292;
                v147 = objc_claimAutoreleasedReturnValue();
                if (os_log_type_enabled(v147, OS_LOG_TYPE_ERROR))
                {
                  *(_DWORD *)buf = 136315650;
                  *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleSheet.hpp";
                  *(_WORD *)&buf[12] = 1024;
                  *(_DWORD *)&buf[14] = 457;
                  v325 = 2082;
                  *(_QWORD *)v326 = "Could not read number of bits for property id.";
                  _os_log_impl(&dword_19F029000, v147, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
                }

                std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a7, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleSheet.hpp", 80);
                std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a7, (uint64_t)":", 1);
                v148 = (_QWORD *)std::ostream::operator<<();
                v149 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v148, (uint64_t)" STYL Parse Error Here: ", 24);
                v150 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v149, (uint64_t)"Could not read number of bits for property id.", 46);
                std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v150, (uint64_t)"\n", 1);
                goto LABEL_104;
              }
              v305 = BYTE4(v321) + 1;
              geo::ibitstream::readUIntBits(&v321, v14, (BYTE4(v321) + 1));
              a5 = v290;
              a6 = v292;
              if (!(_BYTE)v321)
              {
                GEOGetGeoCSSStyleSheetLog();
                v159 = objc_claimAutoreleasedReturnValue();
                if (os_log_type_enabled(v159, OS_LOG_TYPE_ERROR))
                {
                  *(_DWORD *)buf = 136315650;
                  *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleSheet.hpp";
                  *(_WORD *)&buf[12] = 1024;
                  *(_DWORD *)&buf[14] = 460;
                  v325 = 2082;
                  *(_QWORD *)v326 = "Could not read number of properties.";
                  _os_log_impl(&dword_19F029000, v159, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
                }

                std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a7, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleSheet.hpp", 80);
                std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a7, (uint64_t)":", 1);
                v160 = (_QWORD *)std::ostream::operator<<();
                v161 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v160, (uint64_t)" STYL Parse Error Here: ", 24);
                v162 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v161, (uint64_t)"Could not read number of properties.", 36);
                std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v162, (uint64_t)"\n", 1);
                goto LABEL_104;
              }
              v283 = HIDWORD(v321);
              if (HIDWORD(v321))
              {
                v128 = 0;
                while (1)
                {
                  v294 = v128;
                  geo::ibitstream::readUIntBits(&v321, v14, v305);
                  if (!(_BYTE)v321)
                    break;
                  v129 = HIDWORD(v321);
                  v130 = *((unsigned __int8 *)v14 + 24);
                  v132 = v14[1];
                  v131 = v14[2];
                  v133 = v131 + ((unint64_t)(v130 + 2) >> 3);
                  v134 = (v130 + 2) & 7;
                  v135 = v131 + 1;
                  if (v133 >= v131 + 1)
                  {
                    if (v130 <= 6)
                      v138 = v131 + 1;
                    else
                      v138 = v131 + 2;
                    if (v132 < v138)
                    {
LABEL_254:
                      v14[2] = v133;
                      *((_BYTE *)v14 + 24) = v134;
LABEL_255:
                      GEOGetGeoCSSStyleSheetLog();
                      v194 = objc_claimAutoreleasedReturnValue();
                      if (os_log_type_enabled(v194, OS_LOG_TYPE_ERROR))
                      {
                        *(_DWORD *)buf = 136315650;
                        *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleSheet.hpp";
                        *(_WORD *)&buf[12] = 1024;
                        *(_DWORD *)&buf[14] = 466;
                        v325 = 2082;
                        *(_QWORD *)v326 = "Could not read property size.";
                        _os_log_impl(&dword_19F029000, v194, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
                      }

                      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a7, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleSheet.hpp", 80);
                      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a7, (uint64_t)":", 1);
                      v195 = (_QWORD *)std::ostream::operator<<();
                      v196 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v195, (uint64_t)" STYL Parse Error Here: ", 24);
                      v197 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v196, (uint64_t)"Could not read property size.", 29);
                      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v197, (uint64_t)"\n", 1);
                      goto LABEL_104;
                    }
                    v139 = *v14;
                    if (*((_BYTE *)v14 + 24))
                    {
                      if (v135 >= v132)
                        v140 = 0;
                      else
                        v140 = *(unsigned __int8 *)(v139 + v135);
                      v137 = ((v140 & (0xFFFF << (8 - v130))) >> (8 - v130)) | ((((1 << (8 - v130)) + 255) & *(unsigned __int8 *)(v139 + v131)) << v130);
                      v14[2] = v135;
                    }
                    else
                    {
                      LOBYTE(v137) = *(_BYTE *)(v139 + v131);
                    }
                  }
                  else
                  {
                    if (*((_BYTE *)v14 + 24))
                      v136 = v131 + 1;
                    else
                      v136 = v14[2];
                    if (v132 < v136)
                      goto LABEL_255;
                    if (*((_BYTE *)v14 + 24))
                    {
                      if (v132 < v135)
                        goto LABEL_254;
                      v137 = (((1 << (8 - v130)) - 1) & *(unsigned __int8 *)(*v14 + v131)) << v130;
                    }
                    else
                    {
                      if (v132 < v135)
                        goto LABEL_254;
                      LOBYTE(v137) = *(_BYTE *)(*v14 + v131);
                    }
                  }
                  v14[2] = v133;
                  *((_BYTE *)v14 + 24) = v134;
                  v288 = v137;
                  if ((v137 & 0x80) == 0)
                  {
                    geo::ibitstream::readVarInt((uint64_t)&v321, v14);
                    if (!(_BYTE)v321)
                    {
                      GEOGetGeoCSSStyleSheetLog();
                      v203 = objc_claimAutoreleasedReturnValue();
                      if (os_log_type_enabled(v203, OS_LOG_TYPE_ERROR))
                      {
                        *(_DWORD *)buf = 136315650;
                        *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleSheet.hpp";
                        *(_WORD *)&buf[12] = 1024;
                        *(_DWORD *)&buf[14] = 470;
                        v325 = 2082;
                        *(_QWORD *)v326 = "Could not read property size.";
                        _os_log_impl(&dword_19F029000, v203, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
                      }

                      a6 = v292;
                      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a7, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleSheet.hpp", 80);
                      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a7, (uint64_t)":", 1);
                      v204 = (_QWORD *)std::ostream::operator<<();
                      v205 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v204, (uint64_t)" STYL Parse Error Here: ", 24);
                      v206 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v205, (uint64_t)"Could not read property size.", 29);
                      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v206, (uint64_t)"\n", 1);
                      goto LABEL_104;
                    }
                    v285 = v322;
                  }
                  v141 = v307;
                  v142 = &v307;
                  v143 = &v307;
                  if (v307)
                  {
                    while (1)
                    {
                      while (1)
                      {
                        v143 = (uint64_t **)v141;
                        v144 = *((_DWORD *)v141 + 7);
                        if (v129 >= v144)
                          break;
                        v141 = *v143;
                        v142 = v143;
                        if (!*v143)
                          goto LABEL_215;
                      }
                      if (v144 >= v129)
                        break;
                      v141 = v143[1];
                      if (!v141)
                      {
                        v142 = v143 + 1;
                        goto LABEL_215;
                      }
                    }
                    v145 = (uint64_t)v143;
                  }
                  else
                  {
LABEL_215:
                    v145 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v308 + 16))(v308, 40, 8);
                    *(_DWORD *)(v145 + 28) = v129;
                    *(_QWORD *)(v145 + 32) = 0;
                    *(_QWORD *)v145 = 0;
                    *(_QWORD *)(v145 + 8) = 0;
                    *(_QWORD *)(v145 + 16) = v143;
                    *v142 = (uint64_t *)v145;
                    v146 = (uint64_t *)v145;
                    if (*v306)
                    {
                      v306 = (uint64_t **)*v306;
                      v146 = *v142;
                    }
                    std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(v307, v146);
                    ++v309;
                  }
                  *(_BYTE *)(v145 + 32) = v288 >> 6;
                  *(_DWORD *)(v145 + 36) = v285;
                  v128 = v294 + 1;
                  a6 = v292;
                  if (v294 + 1 == v283)
                    goto LABEL_231;
                }
                GEOGetGeoCSSStyleSheetLog();
                v190 = objc_claimAutoreleasedReturnValue();
                if (os_log_type_enabled(v190, OS_LOG_TYPE_ERROR))
                {
                  *(_DWORD *)buf = 136315650;
                  *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleSheet.hpp";
                  *(_WORD *)&buf[12] = 1024;
                  *(_DWORD *)&buf[14] = 463;
                  v325 = 2082;
                  *(_QWORD *)v326 = "Could not read property id.";
                  _os_log_impl(&dword_19F029000, v190, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
                }

                a6 = v292;
                std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a7, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleSheet.hpp", 80);
                std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a7, (uint64_t)":", 1);
                v191 = (_QWORD *)std::ostream::operator<<();
                v192 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v191, (uint64_t)" STYL Parse Error Here: ", 24);
                v193 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v192, (uint64_t)"Could not read property id.", 27);
                std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v193, (uint64_t)"\n", 1);
                goto LABEL_104;
              }
LABEL_231:
              v163 = (geo::ibitstream *)gss::StylFile::chapter(&v311, 0xAu);
              v164 = (char *)operator new(0x168uLL);
              *((_QWORD *)v164 + 1) = 0;
              *((_QWORD *)v164 + 2) = 0;
              *(_QWORD *)v164 = &off_1E42E5B90;
              *(_OWORD *)(v164 + 40) = 0u;
              *(_OWORD *)(v164 + 56) = 0u;
              *(_OWORD *)(v164 + 72) = 0u;
              *(_OWORD *)(v164 + 88) = 0u;
              *(_OWORD *)(v164 + 104) = 0u;
              *(_OWORD *)(v164 + 120) = 0u;
              *(_OWORD *)(v164 + 136) = 0u;
              *(_OWORD *)(v164 + 152) = 0u;
              *(_OWORD *)(v164 + 168) = 0u;
              *(_OWORD *)(v164 + 184) = 0u;
              *(_OWORD *)(v164 + 200) = 0u;
              *(_OWORD *)(v164 + 216) = 0u;
              *(_OWORD *)(v164 + 232) = 0u;
              *(_OWORD *)(v164 + 248) = 0u;
              *(_OWORD *)(v164 + 24) = 0u;
              *(_OWORD *)(v164 + 264) = 0u;
              *(_OWORD *)(v164 + 280) = 0u;
              *(_OWORD *)(v164 + 296) = 0u;
              *(_OWORD *)(v164 + 312) = 0u;
              *((_DWORD *)v164 + 29) = 1065353216;
              __asm { FMOV            V0.4S, #1.0 }
              *(_QWORD *)(v164 + 108) = _Q0;
              __asm { FMOV            V0.2S, #1.0 }
              *((_QWORD *)v164 + 28) = _Q0;
              *(_QWORD *)(v164 + 236) = 0xBF8000003F800000;
              *(_OWORD *)(v164 + 284) = xmmword_19FFB4870;
              *(_OWORD *)(v164 + 300) = xmmword_19FFB4880;
              *((_DWORD *)v164 + 79) = 1096810496;
              *(_OWORD *)(v164 + 328) = xmmword_19FFB4890;
              *(_OWORD *)(v164 + 344) = xmmword_19FFB48A0;
              v170 = *(std::__shared_weak_count **)(a1 + 128);
              *(_QWORD *)(a1 + 120) = v164 + 24;
              *(_QWORD *)(a1 + 128) = v164;
              if (v170)
              {
                p_shared_owners = (unint64_t *)&v170->__shared_owners_;
                do
                  v172 = __ldaxr(p_shared_owners);
                while (__stlxr(v172 - 1, p_shared_owners));
                if (!v172)
                {
                  ((void (*)(std::__shared_weak_count *))v170->__on_zero_shared)(v170);
                  std::__shared_weak_count::__release_weak(v170);
                }
              }
              if ((gss::GlobalProperties::loadFromStylChapterBitstream(*(_QWORD *)(a1 + 120), v163, (uint64_t)&v296, a7) & 1) == 0)
              {
                GEOGetGeoCSSStyleSheetLog();
                v184 = objc_claimAutoreleasedReturnValue();
                if (os_log_type_enabled(v184, OS_LOG_TYPE_ERROR))
                {
                  *(_DWORD *)buf = 136315650;
                  *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleSheet.hpp";
                  *(_WORD *)&buf[12] = 1024;
                  *(_DWORD *)&buf[14] = 488;
                  v325 = 2082;
                  *(_QWORD *)v326 = "Could not decode global properties.";
                  _os_log_impl(&dword_19F029000, v184, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
                }

                std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a7, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleSheet.hpp", 80);
                std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a7, (uint64_t)":", 1);
                v185 = (_QWORD *)std::ostream::operator<<();
                v186 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v185, (uint64_t)" STYL Parse Error Here: ", 24);
                v187 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v186, (uint64_t)"Could not decode global properties.", 35);
                std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v187, (uint64_t)"\n", 1);
                GEOGetGeoCSSStyleSheetLog();
                v188 = objc_claimAutoreleasedReturnValue();
                if (os_log_type_enabled(v188, OS_LOG_TYPE_ERROR))
                {
                  *(_DWORD *)buf = 136315650;
                  *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleSheet.hpp";
                  *(_WORD *)&buf[12] = 1024;
                  *(_DWORD *)&buf[14] = 388;
                  v325 = 2082;
                  *(_QWORD *)v326 = "Could not decode global properties.";
                  _os_log_impl(&dword_19F029000, v188, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
                }

                std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a7, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleSheet.hpp", 80);
                std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a7, (uint64_t)":", 1);
                v189 = (_QWORD *)std::ostream::operator<<();
                v26 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v189, (uint64_t)" STYL Parse Error Here: ", 24);
                v27 = "Could not decode global properties.";
                v28 = 35;
                goto LABEL_107;
              }
              buf[0] = 1;
              v173 = *(_QWORD *)(v290 + 24);
              if (!v173)
                goto LABEL_361;
              (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v173 + 48))(v173, buf);
              v174 = gss::StylFile::chapter(&v311, 0x14u);
              *(_QWORD *)v295 = v174;
              v175 = v174;
              v176 = *((unsigned __int8 *)v174 + 24);
              v178 = v174[1];
              v177 = v174[2];
              v179 = v177 + ((unint64_t)(v176 + 5) >> 3);
              v180 = (v176 + 5) & 7;
              v181 = v177 + 1;
              if (v179 >= v177 + 1)
              {
                if (v176 <= 3)
                  v198 = v177 + 1;
                else
                  v198 = v177 + 2;
                if (v178 >= v198)
                {
                  v207 = *v174;
                  if (*((_BYTE *)v174 + 24))
                  {
                    v208 = *(unsigned __int8 *)(v207 + v177);
                    if (v181 >= v178)
                      v209 = 0;
                    else
                      v209 = *(unsigned __int8 *)(v207 + v181);
                    v183 = ((v209 & (0xFFFF << (8 - v176))) >> (8 - v176)) | ((((1 << (8 - v176)) + 255) & v208) << v176);
                    v174[2] = v181;
                  }
                  else
                  {
                    LOBYTE(v183) = *(_BYTE *)(v207 + v177);
                  }
LABEL_277:
                  v210 = v183 >> 3;
                  v174[2] = v179;
                  *((_BYTE *)v174 + 24) = v180;
                  v310 = v210 + 1;
                  v211 = (gss::Allocator *)geo::ibitstream::readUIntBits(&v321, v174, v210 + 1);
                  if ((_BYTE)v321)
                  {
                    v282 = (gss::Allocator **)(a1 + 144);
                    v284 = HIDWORD(v321);
                    if (HIWORD(v321) || *(_BYTE *)(a1 + 156) || HIDWORD(v321) <= *(unsigned __int16 *)(a1 + 154))
                    {
                      if (!HIDWORD(v321))
                      {
LABEL_319:
                        if ((gss::StyleSheet<gss::PropertyID>::decodeStyles(a1, &v311, (uint64_t)&v296, a4, a7) & 1) != 0)
                        {
                          v235 = gss::StylFile::chapter(&v311, 0x1Eu);
                          v236 = operator new();
                          *(_OWORD *)(v236 + 32) = 0u;
                          *(_OWORD *)(v236 + 48) = 0u;
                          *(_OWORD *)v236 = 0u;
                          *(_OWORD *)(v236 + 16) = 0u;
                          *(_DWORD *)(v236 + 64) = 1024;
                          v237 = *(_QWORD *)(a1 + 160);
                          *(_QWORD *)(a1 + 160) = v236;
                          if (v237)
                          {
                            v238 = gss::StyleMatchingTree<gss::CartoStyle<gss::PropertyID>>::~StyleMatchingTree(v237);
                            MEMORY[0x1A1AF4E00](v238, 0x1020C40FE16DC66);
                            v236 = *(_QWORD *)(a1 + 160);
                          }
                          if ((gss::StyleMatchingTree<gss::CartoStyle<gss::PropertyID>>::construct(v236, v235, (uint64_t)&v296, a1 + 64, a7) & 1) != 0)
                          {
                            v90 = 1;
                            a6 = v292;
LABEL_110:
                            buf[0] = v90;
                            v91 = *(_QWORD *)(a6 + 24);
                            if (!v91)
                              goto LABEL_361;
                            (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v91 + 48))(v91, buf);
                            std::__tree<std::__value_type<unsigned int,gss::PropertySize>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,gss::PropertySize>,std::less<unsigned int>,true>,geo::StdAllocator<std::__value_type<unsigned int,gss::PropertySize>,gss::Allocator>>::destroy((uint64_t)&v306, v307);
                            std::__tree<std::__value_type<unsigned int,gss::PropertySize>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,gss::PropertySize>,std::less<unsigned int>,true>,geo::StdAllocator<std::__value_type<unsigned int,gss::PropertySize>,gss::Allocator>>::destroy((uint64_t)&v301, v302);
                            std::__tree<std::__value_type<gss::StylFile::ChapterId,gss::StylChapter>,std::__map_value_compare<gss::StylFile::ChapterId,std::__value_type<gss::StylFile::ChapterId,gss::StylChapter>,std::less<gss::StylFile::ChapterId>,true>,geo::StdAllocator<std::__value_type<gss::StylFile::ChapterId,gss::StylChapter>,gss::Allocator>>::destroy((uint64_t)&v315, v316);
                            std::__tree<std::__value_type<gss::StylFile::ChapterId,gss::StylFile::ChapterDescriptor>,std::__map_value_compare<gss::StylFile::ChapterId,std::__value_type<gss::StylFile::ChapterId,gss::StylFile::ChapterDescriptor>,std::less<gss::StylFile::ChapterId>,true>,geo::StdAllocator<std::__value_type<gss::StylFile::ChapterId,gss::StylFile::ChapterDescriptor>,gss::Allocator>>::destroy((uint64_t)&v311, v312);
                            return;
                          }
                          GEOGetGeoCSSStyleSheetLog();
                          v266 = objc_claimAutoreleasedReturnValue();
                          if (os_log_type_enabled(v266, OS_LOG_TYPE_ERROR))
                          {
                            *(_DWORD *)buf = 136315650;
                            *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleSheet.hpp";
                            *(_WORD *)&buf[12] = 1024;
                            *(_DWORD *)&buf[14] = 658;
                            v325 = 2082;
                            *(_QWORD *)v326 = "Could not decode style matching tree.";
                            _os_log_impl(&dword_19F029000, v266, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
                          }

                          std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a7, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleSheet.hpp", 80);
                          std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a7, (uint64_t)":", 1);
                          v267 = (_QWORD *)std::ostream::operator<<();
                          v268 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v267, (uint64_t)" STYL Parse Error Here: ", 24);
                          v269 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v268, (uint64_t)"Could not decode style matching tree.", 37);
                          std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v269, (uint64_t)"\n", 1);
                          v270 = *(_QWORD *)(a1 + 160);
                          *(_QWORD *)(a1 + 160) = 0;
                          if (v270)
                          {
                            v271 = gss::StyleMatchingTree<gss::CartoStyle<gss::PropertyID>>::~StyleMatchingTree(v270);
                            MEMORY[0x1A1AF4E00](v271, 0x1020C40FE16DC66);
                          }
                          GEOGetGeoCSSStyleSheetLog();
                          v272 = objc_claimAutoreleasedReturnValue();
                          if (os_log_type_enabled(v272, OS_LOG_TYPE_ERROR))
                          {
                            *(_DWORD *)buf = 136315650;
                            *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleSheet.hpp";
                            *(_WORD *)&buf[12] = 1024;
                            *(_DWORD *)&buf[14] = 393;
                            v325 = 2082;
                            *(_QWORD *)v326 = "Could not decode style matching graph.";
                            _os_log_impl(&dword_19F029000, v272, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
                          }

                          a6 = v292;
                          std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a7, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleSheet.hpp", 80);
                          std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a7, (uint64_t)":", 1);
                          v273 = (_QWORD *)std::ostream::operator<<();
                          v250 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v273, (uint64_t)" STYL Parse Error Here: ", 24);
                          v251 = "Could not decode style matching graph.";
                          v249 = 38;
                        }
                        else
                        {
                          GEOGetGeoCSSStyleSheetLog();
                          v247 = objc_claimAutoreleasedReturnValue();
                          if (os_log_type_enabled(v247, OS_LOG_TYPE_ERROR))
                          {
                            *(_DWORD *)buf = 136315650;
                            *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleSheet.hpp";
                            *(_WORD *)&buf[12] = 1024;
                            *(_DWORD *)&buf[14] = 392;
                            v325 = 2082;
                            *(_QWORD *)v326 = "Could not decode styles.";
                            _os_log_impl(&dword_19F029000, v247, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
                          }

                          a6 = v292;
                          std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a7, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleSheet.hpp", 80);
                          std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a7, (uint64_t)":", 1);
                          v248 = (_QWORD *)std::ostream::operator<<();
                          v249 = 24;
                          v250 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v248, (uint64_t)" STYL Parse Error Here: ", 24);
                          v251 = "Could not decode styles.";
                        }
LABEL_346:
                        v265 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v250, (uint64_t)v251, v249);
                        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v265, (uint64_t)"\n", 1);
LABEL_109:
                        v90 = 0;
                        goto LABEL_110;
                      }
                    }
                    else
                    {
                      v211 = geo::intern_vector<std::shared_ptr<gss::ConditionalStyle<gss::PropertyID>>,geo::StdAllocator<std::shared_ptr<gss::ConditionalStyle<gss::PropertyID>>,gss::Allocator>>::reallocate(v282, HIDWORD(v321));
                    }
                    v286 = 0;
                    while (1)
                    {
                      v212 = gss::Allocator::instance(v211);
                      v213 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v212 + 16))(v212, 112, 8);
                      *(_QWORD *)v213 = &off_1E42E5BC8;
                      *(_QWORD *)(v213 + 8) = 0;
                      *(_QWORD *)(v213 + 16) = 0;
                      *(_QWORD *)(v213 + 24) = v212;
                      *(_QWORD *)(v213 + 32) = 0;
                      *(_QWORD *)(v213 + 40) = 0;
                      *(_QWORD *)(v213 + 48) = 0;
                      *(_BYTE *)(v213 + 47) = 1;
                      *(_QWORD *)(v213 + 55) = 0;
                      *(_BYTE *)(v213 + 63) = 1;
                      *(_QWORD *)(v213 + 64) = 0;
                      *(_QWORD *)(v213 + 71) = 0;
                      *(_BYTE *)(v213 + 79) = 1;
                      *(_QWORD *)(v213 + 80) = 0;
                      *(_QWORD *)(v213 + 87) = 0;
                      *(_BYTE *)(v213 + 95) = 1;
                      *(_QWORD *)(v213 + 96) = 0;
                      *(_QWORD *)(v213 + 103) = 0;
                      *(_BYTE *)(v213 + 111) = 1;
                      *(_QWORD *)buf = v213 + 32;
                      *(_QWORD *)&buf[8] = v213;
                      v214 = *(unsigned __int16 *)(a1 + 152);
                      if (v214 != 0xFFFF
                        && !*(_BYTE *)(a1 + 156)
                        && v214 >= *(unsigned __int16 *)(a1 + 154))
                      {
                        geo::intern_vector<std::shared_ptr<gss::ConditionalStyle<gss::PropertyID>>,geo::StdAllocator<std::shared_ptr<gss::ConditionalStyle<gss::PropertyID>>,gss::Allocator>>::reallocate(v282, v214 + 1);
                        v214 = *(unsigned __int16 *)(a1 + 152);
                      }
                      v215 = *(_QWORD *)(a1 + 144);
                      v216 = (_QWORD *)(v215 + 16 * v214);
                      *v216 = v213 + 32;
                      v216[1] = v213;
                      *(_WORD *)(a1 + 152) = v214 + 1;
                      v291 = *(uint64_t (****)())(v215 + 16 * v286);
                      geo::ibitstream::readUIntBits(&v321, *(uint64_t **)v295, v305);
                      if (!(_BYTE)v321)
                      {
                        GEOGetGeoCSSStyleSheetLog();
                        v274 = objc_claimAutoreleasedReturnValue();
                        if (os_log_type_enabled(v274, OS_LOG_TYPE_ERROR))
                        {
                          *(_DWORD *)buf = 136315650;
                          *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StylePropertySet.hpp";
                          *(_WORD *)&buf[12] = 1024;
                          *(_DWORD *)&buf[14] = 223;
                          v325 = 2082;
                          *(_QWORD *)v326 = "Could not read number of properties.";
                          _os_log_impl(&dword_19F029000, v274, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
                        }

                        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a7, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StylePropertySet.hpp", 86);
                        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a7, (uint64_t)":", 1);
                        v275 = (_QWORD *)std::ostream::operator<<();
                        v276 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v275, (uint64_t)" STYL Parse Error Here: ", 24);
                        v277 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v276, (uint64_t)"Could not read number of properties.", 36);
                        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v277, (uint64_t)"\n", 1);
                        goto LABEL_340;
                      }
                      v217 = *(uint64_t **)v295;
                      v289 = HIDWORD(v321);
                      if (HIDWORD(v321))
                        break;
LABEL_318:
                      v211 = (gss::Allocator *)gss::StylePropertySet<gss::PropertyID>::intern(v291, v296 + 232);
                      if (++v286 == v284)
                        goto LABEL_319;
                    }
                    v218 = 0;
                    while (1)
                    {
                      geo::ibitstream::readUIntBits(&v321, v217, v305);
                      if (!(_BYTE)v321)
                      {
                        GEOGetGeoCSSStyleSheetLog();
                        v252 = objc_claimAutoreleasedReturnValue();
                        if (os_log_type_enabled(v252, OS_LOG_TYPE_ERROR))
                        {
                          *(_DWORD *)buf = 136315650;
                          *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StylePropertySet.hpp";
                          *(_WORD *)&buf[12] = 1024;
                          *(_DWORD *)&buf[14] = 226;
                          v325 = 2082;
                          *(_QWORD *)v326 = "Could not read property index.";
                          _os_log_impl(&dword_19F029000, v252, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
                        }

                        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a7, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StylePropertySet.hpp", 86);
                        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a7, (uint64_t)":", 1);
                        v253 = (_QWORD *)std::ostream::operator<<();
                        v254 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v253, (uint64_t)" STYL Parse Error Here: ", 24);
                        v255 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v254, (uint64_t)"Could not read property index.", 30);
                        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v255, (uint64_t)"\n", 1);
                        goto LABEL_340;
                      }
                      v219 = v307;
                      if (!v307)
                        break;
                      v220 = WORD2(v321);
                      v221 = &v307;
                      do
                      {
                        v222 = v219;
                        v223 = v221;
                        v224 = *((_DWORD *)v219 + 7);
                        v225 = (uint64_t **)(v219 + 1);
                        if (v224 >= HIDWORD(v321))
                        {
                          v225 = (uint64_t **)v222;
                          v221 = (uint64_t **)v222;
                        }
                        v219 = *v225;
                      }
                      while (v219);
                      if (v221 == &v307)
                        break;
                      v226 = v224 >= HIDWORD(v321) ? v222 : (uint64_t *)v223;
                      if (HIDWORD(v321) < *((_DWORD *)v226 + 7))
                        break;
                      if (v224 >= HIDWORD(v321))
                        v223 = (uint64_t **)v222;
                      v227 = *((unsigned int *)v223 + 9);
                      switch(*((_BYTE *)v223 + 32))
                      {
                        case 0:
                          goto LABEL_310;
                        case 1:
                          v227 = (8 * v227);
                          goto LABEL_310;
                        case 2:
                          v227 = 1;
                          goto LABEL_310;
                        case 3:
                          geo::ibitstream::readVarInt((uint64_t)&v321, v217);
                          if (!(_BYTE)v321)
                          {
                            GEOGetGeoCSSStyleSheetLog();
                            v278 = objc_claimAutoreleasedReturnValue();
                            if (os_log_type_enabled(v278, OS_LOG_TYPE_ERROR))
                            {
                              *(_DWORD *)buf = 136315650;
                              *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/Sty"
                                                   "lePropertySet.hpp";
                              *(_WORD *)&buf[12] = 1024;
                              *(_DWORD *)&buf[14] = 242;
                              v325 = 2082;
                              *(_QWORD *)v326 = "Could not read size of variable sized property.";
                              _os_log_impl(&dword_19F029000, v278, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
                            }

                            std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a7, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StylePropertySet.hpp", 86);
                            std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a7, (uint64_t)":", 1);
                            v279 = (_QWORD *)std::ostream::operator<<();
                            v280 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v279, (uint64_t)" STYL Parse Error Here: ", 24);
                            v281 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v280, (uint64_t)"Could not read size of variable sized property.", 47);
                            std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v281, (uint64_t)"\n", 1);
                            goto LABEL_340;
                          }
                          v227 = 8 * v322;
                          v217 = *(uint64_t **)v295;
LABEL_310:
                          v228 = v217[2];
                          v229 = *((unsigned __int8 *)v217 + 24);
                          gss::propertyDecoderForIndex<gss::PropertyID>(v220, buf);
                          v321 = v227;
                          v323 = v220;
                          if (!*(_QWORD *)&v326[4])
                            goto LABEL_361;
                          v230 = (*(uint64_t (**)(_QWORD, uint64_t *, uint64_t (***)(), uint64_t *, unsigned __int16 *, uint64_t *, _QWORD *))(**(_QWORD **)&v326[4] + 48))(*(_QWORD *)&v326[4], v217, v291, &v321, &v323, &v296, a7);
                          v231 = *(_QWORD **)&v326[4];
                          if (*(_BYTE **)&v326[4] == buf)
                          {
                            v232 = v230;
                            v231 = buf;
                            v233 = 4;
                          }
                          else
                          {
                            if (!*(_QWORD *)&v326[4])
                              goto LABEL_316;
                            v232 = v230;
                            v233 = 5;
                          }
                          (*(void (**)(void))(*v231 + 8 * v233))();
                          v230 = v232;
LABEL_316:
                          v217 = *(uint64_t **)v295;
                          if ((v230 & 1) == 0)
                          {
                            GEOGetGeoCSSStyleSheetLog();
                            v256 = objc_claimAutoreleasedReturnValue();
                            if (os_log_type_enabled(v256, OS_LOG_TYPE_ERROR))
                            {
                              *(_DWORD *)buf = 136315650;
                              *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/Sty"
                                                   "lePropertySet.hpp";
                              *(_WORD *)&buf[12] = 1024;
                              *(_DWORD *)&buf[14] = 247;
                              v325 = 2082;
                              *(_QWORD *)v326 = "Could not decode property";
                              _os_log_impl(&dword_19F029000, v256, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
                            }

                            std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a7, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StylePropertySet.hpp", 86);
                            std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a7, (uint64_t)":", 1);
                            v257 = (_QWORD *)std::ostream::operator<<();
                            v258 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v257, (uint64_t)" STYL Parse Error Here: ", 24);
                            v246 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v258, (uint64_t)"Could not decode property", 25);
                            goto LABEL_339;
                          }
                          v234 = 8 * v228 + v227 + v229;
                          *(_QWORD *)(*(_QWORD *)v295 + 16) = v234 >> 3;
                          *(_BYTE *)(*(_QWORD *)v295 + 24) = v234 & 7;
                          if (++v218 == v289)
                            goto LABEL_318;
                          break;
                        default:
                          v227 = 0;
                          goto LABEL_310;
                      }
                    }
                    GEOGetGeoCSSStyleSheetLog();
                    v243 = objc_claimAutoreleasedReturnValue();
                    if (os_log_type_enabled(v243, OS_LOG_TYPE_ERROR))
                    {
                      *(_DWORD *)buf = 136315650;
                      *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StylePropertySet.hpp";
                      *(_WORD *)&buf[12] = 1024;
                      *(_DWORD *)&buf[14] = 228;
                      v325 = 2082;
                      *(_QWORD *)v326 = "Could not find size for property.";
                      _os_log_impl(&dword_19F029000, v243, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
                    }

                    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a7, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StylePropertySet.hpp", 86);
                    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a7, (uint64_t)":", 1);
                    v244 = (_QWORD *)std::ostream::operator<<();
                    v245 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v244, (uint64_t)" STYL Parse Error Here: ", 24);
                    v246 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v245, (uint64_t)"Could not find size for property.", 33);
LABEL_339:
                    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v246, (uint64_t)"\n", 1);
LABEL_340:
                    GEOGetGeoCSSStyleSheetLog();
                    v259 = objc_claimAutoreleasedReturnValue();
                    if (os_log_type_enabled(v259, OS_LOG_TYPE_ERROR))
                    {
                      *(_DWORD *)buf = 136315650;
                      *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleSheet.hpp";
                      *(_WORD *)&buf[12] = 1024;
                      *(_DWORD *)&buf[14] = 507;
                      v325 = 2082;
                      *(_QWORD *)v326 = "Could not decode property set.";
                      _os_log_impl(&dword_19F029000, v259, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
                    }

                    a6 = v292;
                    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a7, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleSheet.hpp", 80);
                    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a7, (uint64_t)":", 1);
                    v260 = (_QWORD *)std::ostream::operator<<();
                    v261 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v260, (uint64_t)" STYL Parse Error Here: ", 24);
                    v262 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v261, (uint64_t)"Could not decode property set.", 30);
                    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v262, (uint64_t)"\n", 1);
                  }
                  else
                  {
                    GEOGetGeoCSSStyleSheetLog();
                    v239 = objc_claimAutoreleasedReturnValue();
                    if (os_log_type_enabled(v239, OS_LOG_TYPE_ERROR))
                    {
                      *(_DWORD *)buf = 136315650;
                      *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleSheet.hpp";
                      *(_WORD *)&buf[12] = 1024;
                      *(_DWORD *)&buf[14] = 503;
                      v325 = 2082;
                      *(_QWORD *)v326 = "Could not read number of property sets.";
                      _os_log_impl(&dword_19F029000, v239, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
                    }

                    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a7, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleSheet.hpp", 80);
                    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a7, (uint64_t)":", 1);
                    v240 = (_QWORD *)std::ostream::operator<<();
                    v241 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v240, (uint64_t)" STYL Parse Error Here: ", 24);
                    v242 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v241, (uint64_t)"Could not read number of property sets.", 39);
                    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v242, (uint64_t)"\n", 1);
                    a6 = v292;
                  }
LABEL_343:
                  GEOGetGeoCSSStyleSheetLog();
                  v263 = objc_claimAutoreleasedReturnValue();
                  if (os_log_type_enabled(v263, OS_LOG_TYPE_ERROR))
                  {
                    *(_DWORD *)buf = 136315650;
                    *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleSheet.hpp";
                    *(_WORD *)&buf[12] = 1024;
                    *(_DWORD *)&buf[14] = 391;
                    v325 = 2082;
                    *(_QWORD *)v326 = "Could not decode property sets.";
                    _os_log_impl(&dword_19F029000, v263, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
                  }

                  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a7, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleSheet.hpp", 80);
                  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a7, (uint64_t)":", 1);
                  v264 = (_QWORD *)std::ostream::operator<<();
                  v250 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v264, (uint64_t)" STYL Parse Error Here: ", 24);
                  v251 = "Could not decode property sets.";
                  v249 = 31;
                  goto LABEL_346;
                }
              }
              else
              {
                if (*((_BYTE *)v174 + 24))
                  v182 = v177 + 1;
                else
                  v182 = v174[2];
                if (v178 < v182)
                  goto LABEL_263;
                if (*((_BYTE *)v174 + 24))
                {
                  v175 = v174;
                  if (v178 >= v181)
                  {
                    v183 = (((1 << (8 - v176)) - 1) & *(unsigned __int8 *)(*v174 + v177)) << v176;
                    goto LABEL_277;
                  }
                  goto LABEL_262;
                }
                v175 = v174;
                if (v178 >= v181)
                {
                  LOBYTE(v183) = *(_BYTE *)(*v174 + v177);
                  goto LABEL_277;
                }
              }
LABEL_262:
              v175[2] = v179;
              *((_BYTE *)v175 + 24) = v180;
LABEL_263:
              GEOGetGeoCSSStyleSheetLog();
              v199 = objc_claimAutoreleasedReturnValue();
              if (os_log_type_enabled(v199, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)buf = 136315650;
                *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleSheet.hpp";
                *(_WORD *)&buf[12] = 1024;
                *(_DWORD *)&buf[14] = 500;
                v325 = 2082;
                *(_QWORD *)v326 = "Could not read number of bits for property set index.";
                _os_log_impl(&dword_19F029000, v199, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
              }

              a6 = v292;
              std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a7, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleSheet.hpp", 80);
              std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a7, (uint64_t)":", 1);
              v200 = (_QWORD *)std::ostream::operator<<();
              v201 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v200, (uint64_t)" STYL Parse Error Here: ", 24);
              v202 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v201, (uint64_t)"Could not read number of bits for property set index.", 53);
              std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v202, (uint64_t)"\n", 1);
              goto LABEL_343;
            }
LABEL_140:
            LOBYTE(v101) = *(_BYTE *)(v65 + v75);
            goto LABEL_143;
          }
        }
        else
        {
          if (v76)
            v100 = v75 + 1;
          else
            v100 = v75;
          if (v17 < v100)
            goto LABEL_132;
          if (v76)
          {
            if (v17 >= v99)
            {
              v290 = a5;
              v101 = (((1 << (8 - v76)) - 1) & *(unsigned __int8 *)(v65 + v75)) << v96;
              goto LABEL_143;
            }
            goto LABEL_131;
          }
          v14[2] = v75;
          if (v17 >= v99)
          {
            v290 = a5;
            goto LABEL_140;
          }
        }
LABEL_131:
        v14[2] = v97;
        *((_BYTE *)v14 + 24) = v98;
LABEL_132:
        GEOGetGeoCSSStyleSheetLog();
        v103 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v103, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315650;
          *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleSheet.hpp";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 445;
          v325 = 2082;
          *(_QWORD *)v326 = "Could not read number of bits for client attribute.";
          _os_log_impl(&dword_19F029000, v103, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
        }

        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a7, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleSheet.hpp", 80);
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a7, (uint64_t)":", 1);
        v104 = (_QWORD *)std::ostream::operator<<();
        v105 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v104, (uint64_t)" STYL Parse Error Here: ", 24);
        v106 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v105, (uint64_t)"Could not read number of bits for client attribute.", 51);
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v106, (uint64_t)"\n", 1);
        goto LABEL_104;
      }
    }
    else
    {
      if (v20)
      {
        if (v17 >= v77)
        {
          v78 = (((1 << (8 - v20)) - 1) & *(unsigned __int8 *)(v65 + v60)) << v70;
          goto LABEL_119;
        }
LABEL_113:
        v14[2] = v75;
        *((_BYTE *)v14 + 24) = v76;
        GEOGetGeoCSSStyleSheetLog();
        v92 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v92, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315650;
          *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleSheet.hpp";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 444;
          v325 = 2082;
          *(_QWORD *)v326 = "Could not read number of bits for feature attribute.";
          _os_log_impl(&dword_19F029000, v92, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
        }

        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a7, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleSheet.hpp", 80);
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a7, (uint64_t)":", 1);
        v93 = (_QWORD *)std::ostream::operator<<();
        v94 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v93, (uint64_t)" STYL Parse Error Here: ", 24);
        v95 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v94, (uint64_t)"Could not read number of bits for feature attribute.", 52);
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v95, (uint64_t)"\n", 1);
        goto LABEL_104;
      }
      if (v17 < v77)
        goto LABEL_113;
    }
    LOBYTE(v78) = *(_BYTE *)(v65 + v60);
    goto LABEL_119;
  }
  v50 = 0;
  v17 = v14[1];
  while (1)
  {
    v51 = v46;
    v52 = v20;
    v46 += (v20 + 1) >> 3;
    LOBYTE(v20) = (v20 + 1) & 7;
    v53 = v51 + 1;
    if (v46 < v51 + 1)
      break;
    if (v17 < v53)
      goto LABEL_69;
    if (!v52)
      goto LABEL_61;
    if (v53 >= v17)
      v55 = 0;
    else
      v55 = *(unsigned __int8 *)(v47 + v53);
    LODWORD(v51) = ((v55 & (0xFFFF << (8 - v52))) >> (8 - v52)) | ((((1 << (8 - v52)) + 255) & *(unsigned __int8 *)(v47 + v51)) << v52);
    v14[2] = v53;
LABEL_64:
    v14[2] = v46;
    *((_BYTE *)v14 + 24) = v20;
    if (v50 == 2)
    {
      *(_BYTE *)(a1 + 137) = (v51 & 0x80) != 0;
    }
    else if (v50 == 1)
    {
      *(_BYTE *)(a1 + 138) = (v51 & 0x80) != 0;
    }
    else
    {
      if (v50)
      {
        GEOGetGeoCSSStyleSheetLog();
        v83 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v83, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315650;
          *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleSheet.hpp";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 435;
          v325 = 2082;
          *(_QWORD *)v326 = "Support specified for unknown map mode.";
          _os_log_impl(&dword_19F029000, v83, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
        }

        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a7, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleSheet.hpp", 80);
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a7, (uint64_t)":", 1);
        v84 = (_QWORD *)std::ostream::operator<<();
        v85 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v84, (uint64_t)" STYL Parse Error Here: ", 24);
        v45 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v85, (uint64_t)"Support specified for unknown map mode.", 39);
        goto LABEL_103;
      }
      *(_BYTE *)(a1 + 136) = (v51 & 0x80) != 0;
    }
    if (++v50 >= v48)
    {
      v46 = v14[2];
      v20 = *((unsigned __int8 *)v14 + 24);
      goto LABEL_74;
    }
  }
  if (v52)
    v54 = v51 + 1;
  else
    v54 = v51;
  if (v17 < v54)
    goto LABEL_70;
  if (v52)
  {
    if (v17 < v53)
      goto LABEL_69;
    LODWORD(v51) = (((1 << (8 - v52)) - 1) & *(unsigned __int8 *)(v47 + v51)) << v52;
    goto LABEL_64;
  }
  v14[2] = v51;
  if (v17 >= v53)
  {
LABEL_61:
    LOBYTE(v51) = *(_BYTE *)(v47 + v51);
    goto LABEL_64;
  }
LABEL_69:
  v14[2] = v46;
  *((_BYTE *)v14 + 24) = v20;
LABEL_70:
  GEOGetGeoCSSStyleSheetLog();
  v56 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v56, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 136315650;
    *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleSheet.hpp";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 423;
    v325 = 2082;
    *(_QWORD *)v326 = "Could not read mode support flag.";
    _os_log_impl(&dword_19F029000, v56, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
  }

  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a7, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleSheet.hpp", 80);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a7, (uint64_t)":", 1);
  v57 = (_QWORD *)std::ostream::operator<<();
  v58 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v57, (uint64_t)" STYL Parse Error Here: ", 24);
  v59 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v58, (uint64_t)"Could not read mode support flag.", 33);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v59, (uint64_t)"\n", 1);
LABEL_104:
  GEOGetGeoCSSStyleSheetLog();
  v86 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v86, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 136315650;
    *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleSheet.hpp";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 387;
    v325 = 2082;
    *(_QWORD *)v326 = "Could not decode stylesheet info.";
    _os_log_impl(&dword_19F029000, v86, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
  }

  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a7, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleSheet.hpp", 80);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a7, (uint64_t)":", 1);
  v87 = (_QWORD *)std::ostream::operator<<();
  v26 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v87, (uint64_t)" STYL Parse Error Here: ", 24);
  v27 = "Could not decode stylesheet info.";
  v28 = 33;
LABEL_107:
  v88 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v26, (uint64_t)v27, v28);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v88, (uint64_t)"\n", 1);
  buf[0] = 0;
  v89 = *(_QWORD *)(a5 + 24);
  if (v89)
  {
    (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v89 + 48))(v89, buf);
    goto LABEL_109;
  }
LABEL_361:
  std::__throw_bad_function_call[abi:nn180100]();
  __break(1u);
}

void sub_19F0FFCDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  gss::DecodingContext::~DecodingContext((gss::DecodingContext *)&a17);
  gss::StylFile::~StylFile((gss::StylFile *)&a30);
  _Unwind_Resume(a1);
}

uint64_t std::__tree<std::__value_type<gss::StylFile::ChapterId,gss::StylFile::ChapterDescriptor>,std::__map_value_compare<gss::StylFile::ChapterId,std::__value_type<gss::StylFile::ChapterId,gss::StylFile::ChapterDescriptor>,std::less<gss::StylFile::ChapterId>,true>,geo::StdAllocator<std::__value_type<gss::StylFile::ChapterId,gss::StylFile::ChapterDescriptor>,gss::Allocator>>::destroy(uint64_t result, _QWORD *a2)
{
  uint64_t v3;

  if (a2)
  {
    v3 = result;
    std::__tree<std::__value_type<gss::StylFile::ChapterId,gss::StylFile::ChapterDescriptor>,std::__map_value_compare<gss::StylFile::ChapterId,std::__value_type<gss::StylFile::ChapterId,gss::StylFile::ChapterDescriptor>,std::less<gss::StylFile::ChapterId>,true>,geo::StdAllocator<std::__value_type<gss::StylFile::ChapterId,gss::StylFile::ChapterDescriptor>,gss::Allocator>>::destroy(result, *a2);
    std::__tree<std::__value_type<gss::StylFile::ChapterId,gss::StylFile::ChapterDescriptor>,std::__map_value_compare<gss::StylFile::ChapterId,std::__value_type<gss::StylFile::ChapterId,gss::StylFile::ChapterDescriptor>,std::less<gss::StylFile::ChapterId>,true>,geo::StdAllocator<std::__value_type<gss::StylFile::ChapterId,gss::StylFile::ChapterDescriptor>,gss::Allocator>>::destroy(v3, a2[1]);
    return (*(uint64_t (**)(_QWORD, _QWORD *, uint64_t))(**(_QWORD **)(v3 + 16) + 40))(*(_QWORD *)(v3 + 16), a2, 64);
  }
  return result;
}

{
  uint64_t v3;

  if (a2)
  {
    v3 = result;
    std::__tree<std::__value_type<gss::StylFile::ChapterId,gss::StylFile::ChapterDescriptor>,std::__map_value_compare<gss::StylFile::ChapterId,std::__value_type<gss::StylFile::ChapterId,gss::StylFile::ChapterDescriptor>,std::less<gss::StylFile::ChapterId>,true>,geo::StdAllocator<std::__value_type<gss::StylFile::ChapterId,gss::StylFile::ChapterDescriptor>,gss::Allocator>>::destroy(result, *a2);
    std::__tree<std::__value_type<gss::StylFile::ChapterId,gss::StylFile::ChapterDescriptor>,std::__map_value_compare<gss::StylFile::ChapterId,std::__value_type<gss::StylFile::ChapterId,gss::StylFile::ChapterDescriptor>,std::less<gss::StylFile::ChapterId>,true>,geo::StdAllocator<std::__value_type<gss::StylFile::ChapterId,gss::StylFile::ChapterDescriptor>,gss::Allocator>>::destroy(v3, a2[1]);
    return (*(uint64_t (**)(_QWORD, _QWORD *, uint64_t))(**(_QWORD **)(v3 + 16) + 40))(*(_QWORD *)(v3 + 16), a2, 64);
  }
  return result;
}

uint64_t std::__tree<std::__value_type<gss::StylFile::ChapterId,gss::StylChapter>,std::__map_value_compare<gss::StylFile::ChapterId,std::__value_type<gss::StylFile::ChapterId,gss::StylChapter>,std::less<gss::StylFile::ChapterId>,true>,geo::StdAllocator<std::__value_type<gss::StylFile::ChapterId,gss::StylChapter>,gss::Allocator>>::destroy(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  if (a2)
  {
    v3 = result;
    std::__tree<std::__value_type<gss::StylFile::ChapterId,gss::StylChapter>,std::__map_value_compare<gss::StylFile::ChapterId,std::__value_type<gss::StylFile::ChapterId,gss::StylChapter>,std::less<gss::StylFile::ChapterId>,true>,geo::StdAllocator<std::__value_type<gss::StylFile::ChapterId,gss::StylChapter>,gss::Allocator>>::destroy(result, *(_QWORD *)a2);
    std::__tree<std::__value_type<gss::StylFile::ChapterId,gss::StylChapter>,std::__map_value_compare<gss::StylFile::ChapterId,std::__value_type<gss::StylFile::ChapterId,gss::StylChapter>,std::less<gss::StylFile::ChapterId>,true>,geo::StdAllocator<std::__value_type<gss::StylFile::ChapterId,gss::StylChapter>,gss::Allocator>>::destroy(v3, *(_QWORD *)(a2 + 8));
    v4 = *(_QWORD *)(a2 + 72);
    if (v4)
    {
      *(_QWORD *)(a2 + 80) = v4;
      (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a2 + 96) + 40))(*(_QWORD *)(a2 + 96), v4, *(_QWORD *)(a2 + 88) - v4);
    }
    return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 16) + 40))(*(_QWORD *)(v3 + 16), a2, 104);
  }
  return result;
}

uint64_t gss::StylFile::parseHeader(uint64_t a1, _QWORD *a2)
{
  unint64_t v4;
  uint64_t v5;
  NSObject *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  NSObject *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  NSObject *v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  gss::Allocator *v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t result;
  unsigned int v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int v34;
  __int128 v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  NSObject *v39;
  _QWORD *v40;
  _QWORD *v41;
  _QWORD *v42;
  NSObject *v43;
  _QWORD *v44;
  _QWORD *v45;
  _QWORD *v46;
  NSObject *v47;
  _QWORD *v48;
  _QWORD *v49;
  _QWORD *v50;
  NSObject *v51;
  _QWORD *v52;
  _QWORD *v53;
  _QWORD *v54;
  unsigned int v56;
  _BYTE buf[32];
  uint64_t v58;

  v58 = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD *)(a1 + 72);
  if (v4 < 4)
  {
    if (GEOGetGeoCSSStyleSheetLog_onceToken != -1)
      dispatch_once(&GEOGetGeoCSSStyleSheetLog_onceToken, &__block_literal_global);
    v11 = GEOGetGeoCSSStyleSheetLog_log;
    if (os_log_type_enabled((os_log_t)GEOGetGeoCSSStyleSheetLog_log, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StylFile.cpp";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 23;
      *(_WORD *)&buf[18] = 2082;
      *(_QWORD *)&buf[20] = "This is not a styl file - it's too short.";
      _os_log_impl(&dword_19F029000, v11, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
    }
    v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StylFile.cpp", 78);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)":", 1);
    v13 = (_QWORD *)std::ostream::operator<<();
    v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)" STYL Parse Error Here: ", 24);
    v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"This is not a styl file - it's too short.", 41);
  }
  else
  {
    v5 = *(_QWORD *)(a1 + 64);
    if (*(_DWORD *)v5 == 1280922707)
    {
      if (v4 >= 6)
      {
        v56 = *(unsigned __int16 *)(v5 + 4);
        if (!*(_WORD *)(v5 + 4))
          return 1;
        v24 = 0;
        v25 = (uint64_t *)(a1 + 8);
        v26 = 6;
        while (v4 >= v26 + 2)
        {
          if (v4 < v26 + 6)
          {
            if (GEOGetGeoCSSStyleSheetLog_onceToken != -1)
              dispatch_once(&GEOGetGeoCSSStyleSheetLog_onceToken, &__block_literal_global);
            v43 = GEOGetGeoCSSStyleSheetLog_log;
            if (os_log_type_enabled((os_log_t)GEOGetGeoCSSStyleSheetLog_log, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 136315650;
              *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StylFile.cpp";
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = 32;
              *(_WORD *)&buf[18] = 2082;
              *(_QWORD *)&buf[20] = "Could not read chapter start byte offset.";
              _os_log_impl(&dword_19F029000, v43, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
            }
            v44 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StylFile.cpp", 78);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v44, (uint64_t)":", 1);
            v45 = (_QWORD *)std::ostream::operator<<();
            v46 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v45, (uint64_t)" STYL Parse Error Here: ", 24);
            v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v46, (uint64_t)"Could not read chapter start byte offset.", 41);
            goto LABEL_19;
          }
          if (v4 < v26 + 10)
          {
            if (GEOGetGeoCSSStyleSheetLog_onceToken != -1)
              dispatch_once(&GEOGetGeoCSSStyleSheetLog_onceToken, &__block_literal_global);
            v47 = GEOGetGeoCSSStyleSheetLog_log;
            if (os_log_type_enabled((os_log_t)GEOGetGeoCSSStyleSheetLog_log, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 136315650;
              *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StylFile.cpp";
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = 34;
              *(_WORD *)&buf[18] = 2082;
              *(_QWORD *)&buf[20] = "Could not read chapter end byte offset.";
              _os_log_impl(&dword_19F029000, v47, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
            }
            v48 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StylFile.cpp", 78);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v48, (uint64_t)":", 1);
            v49 = (_QWORD *)std::ostream::operator<<();
            v50 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v49, (uint64_t)" STYL Parse Error Here: ", 24);
            v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v50, (uint64_t)"Could not read chapter end byte offset.", 39);
            goto LABEL_19;
          }
          v27 = v26 + 14;
          if (v4 < v26 + 14)
          {
            if (GEOGetGeoCSSStyleSheetLog_onceToken != -1)
              dispatch_once(&GEOGetGeoCSSStyleSheetLog_onceToken, &__block_literal_global);
            v51 = GEOGetGeoCSSStyleSheetLog_log;
            if (os_log_type_enabled((os_log_t)GEOGetGeoCSSStyleSheetLog_log, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 136315650;
              *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StylFile.cpp";
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = 36;
              *(_WORD *)&buf[18] = 2082;
              *(_QWORD *)&buf[20] = "Could not read chapter uncompressed length.";
              _os_log_impl(&dword_19F029000, v51, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
            }
            v52 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StylFile.cpp", 78);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v52, (uint64_t)":", 1);
            v53 = (_QWORD *)std::ostream::operator<<();
            v54 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v53, (uint64_t)" STYL Parse Error Here: ", 24);
            v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v54, (uint64_t)"Could not read chapter uncompressed length.", 43);
            goto LABEL_19;
          }
          v28 = *(unsigned __int16 *)(v5 + v26);
          v29 = *(unsigned int *)(v5 + v26 + 2);
          v30 = (uint64_t *)(a1 + 8);
          v31 = (uint64_t *)(a1 + 8);
          v32 = *(_QWORD *)(v5 + v26 + 6);
          v33 = *v25;
          if (*v25)
          {
            while (1)
            {
              while (1)
              {
                v31 = (uint64_t *)v33;
                v34 = *(unsigned __int16 *)(v33 + 32);
                if (v34 <= v28)
                  break;
                v33 = *v31;
                v30 = v31;
                if (!*v31)
                  goto LABEL_36;
              }
              if (v34 >= v28)
                break;
              v33 = v31[1];
              if (!v33)
              {
                v30 = v31 + 1;
                goto LABEL_36;
              }
            }
          }
          else
          {
LABEL_36:
            *(_QWORD *)&v35 = v32;
            *((_QWORD *)&v35 + 1) = HIDWORD(v32);
            v36 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 16) + 16))(*(_QWORD *)(a1 + 16), 64, 8);
            *(_WORD *)(v36 + 32) = v28;
            *(_QWORD *)(v36 + 40) = v29;
            *(_OWORD *)(v36 + 48) = v35;
            *(_QWORD *)v36 = 0;
            *(_QWORD *)(v36 + 8) = 0;
            *(_QWORD *)(v36 + 16) = v31;
            *v30 = v36;
            v37 = **(_QWORD **)a1;
            if (v37)
            {
              *(_QWORD *)a1 = v37;
              v38 = (uint64_t *)*v30;
            }
            else
            {
              v38 = (uint64_t *)v36;
            }
            std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 8), v38);
            ++*(_QWORD *)(a1 + 24);
          }
          ++v24;
          result = 1;
          v26 = v27;
          if (v24 >= v56)
            return result;
        }
        if (GEOGetGeoCSSStyleSheetLog_onceToken != -1)
          dispatch_once(&GEOGetGeoCSSStyleSheetLog_onceToken, &__block_literal_global);
        v39 = GEOGetGeoCSSStyleSheetLog_log;
        if (os_log_type_enabled((os_log_t)GEOGetGeoCSSStyleSheetLog_log, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315650;
          *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StylFile.cpp";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 31;
          *(_WORD *)&buf[18] = 2082;
          *(_QWORD *)&buf[20] = "Could not read chapter id.";
          _os_log_impl(&dword_19F029000, v39, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
        }
        v40 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StylFile.cpp", 78);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)":", 1);
        v41 = (_QWORD *)std::ostream::operator<<();
        v42 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v41, (uint64_t)" STYL Parse Error Here: ", 24);
        v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v42, (uint64_t)"Could not read chapter id.", 26);
      }
      else
      {
        if (GEOGetGeoCSSStyleSheetLog_onceToken != -1)
          dispatch_once(&GEOGetGeoCSSStyleSheetLog_onceToken, &__block_literal_global);
        v6 = GEOGetGeoCSSStyleSheetLog_log;
        if (os_log_type_enabled((os_log_t)GEOGetGeoCSSStyleSheetLog_log, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315650;
          *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StylFile.cpp";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 26;
          *(_WORD *)&buf[18] = 2082;
          *(_QWORD *)&buf[20] = "Could not read chapter count.";
          _os_log_impl(&dword_19F029000, v6, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
        }
        v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StylFile.cpp", 78);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)":", 1);
        v8 = (_QWORD *)std::ostream::operator<<();
        v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)" STYL Parse Error Here: ", 24);
        v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"Could not read chapter count.", 29);
      }
    }
    else
    {
      if (GEOGetGeoCSSStyleSheetLog_onceToken != -1)
        dispatch_once(&GEOGetGeoCSSStyleSheetLog_onceToken, &__block_literal_global);
      v15 = GEOGetGeoCSSStyleSheetLog_log;
      if (os_log_type_enabled((os_log_t)GEOGetGeoCSSStyleSheetLog_log, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315650;
        *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StylFile.cpp";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 24;
        *(_WORD *)&buf[18] = 2082;
        *(_QWORD *)&buf[20] = "This is not a styl file - the magic is missing.";
        _os_log_impl(&dword_19F029000, v15, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
      }
      v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StylFile.cpp", 78);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)":", 1);
      v17 = (_QWORD *)std::ostream::operator<<();
      v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)" STYL Parse Error Here: ", 24);
      v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)"This is not a styl file - the magic is missing.", 47);
    }
  }
LABEL_19:
  v19 = (gss::Allocator *)std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"\n", 1);
  *(_QWORD *)&buf[8] = 0;
  *(_QWORD *)&buf[16] = gss::Allocator::instance(v19);
  *(_QWORD *)&buf[24] = 0;
  *(_QWORD *)buf = &buf[8];
  v20 = a1 + 8;
  std::__tree<std::__value_type<gss::StylFile::ChapterId,gss::StylFile::ChapterDescriptor>,std::__map_value_compare<gss::StylFile::ChapterId,std::__value_type<gss::StylFile::ChapterId,gss::StylFile::ChapterDescriptor>,std::less<gss::StylFile::ChapterId>,true>,geo::StdAllocator<std::__value_type<gss::StylFile::ChapterId,gss::StylFile::ChapterDescriptor>,gss::Allocator>>::destroy(a1, *(_QWORD **)(a1 + 8));
  v21 = *(_QWORD **)&buf[8];
  *(_QWORD *)a1 = *(_QWORD *)buf;
  *(_QWORD *)(a1 + 8) = v21;
  v22 = *(_QWORD *)&buf[24];
  *(_QWORD *)(a1 + 24) = *(_QWORD *)&buf[24];
  if (v22)
  {
    v21[2] = v20;
    *(_QWORD *)buf = &buf[8];
    *(_QWORD *)&buf[8] = 0;
    *(_QWORD *)&buf[24] = 0;
    v21 = 0;
  }
  else
  {
    *(_QWORD *)a1 = v20;
  }
  std::__tree<std::__value_type<gss::StylFile::ChapterId,gss::StylFile::ChapterDescriptor>,std::__map_value_compare<gss::StylFile::ChapterId,std::__value_type<gss::StylFile::ChapterId,gss::StylFile::ChapterDescriptor>,std::less<gss::StylFile::ChapterId>,true>,geo::StdAllocator<std::__value_type<gss::StylFile::ChapterId,gss::StylFile::ChapterDescriptor>,gss::Allocator>>::destroy((uint64_t)buf, v21);
  return 0;
}

void sub_19F1007DC(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

_QWORD *gss::StylFile::chapter(_QWORD *a1, unsigned int a2)
{
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  unsigned int v6;
  BOOL v7;
  uint64_t *v8;
  uint64_t v9;
  _QWORD *v10;
  unsigned int v11;
  BOOL v12;
  uint64_t *v13;
  uint64_t v14;
  unsigned int v15;
  BOOL v16;
  uint64_t *v17;
  _QWORD v19[3];
  char v20;
  _QWORD v21[4];
  __int16 v22;
  uint64_t *v23;

  v22 = a2;
  v4 = a1 + 5;
  v3 = a1[5];
  if (!v3)
    goto LABEL_12;
  v5 = a1 + 5;
  do
  {
    v6 = *(unsigned __int16 *)(v3 + 32);
    v7 = v6 >= a2;
    if (v6 >= a2)
      v8 = (uint64_t *)v3;
    else
      v8 = (uint64_t *)(v3 + 8);
    if (v7)
      v5 = (_QWORD *)v3;
    v3 = *v8;
  }
  while (*v8);
  if (v5 == v4 || *((unsigned __int16 *)v5 + 16) > a2)
  {
LABEL_12:
    v9 = a1[1];
    if (!v9)
      goto LABEL_23;
    v10 = a1 + 1;
    do
    {
      v11 = *(unsigned __int16 *)(v9 + 32);
      v12 = v11 >= a2;
      if (v11 >= a2)
        v13 = (uint64_t *)v9;
      else
        v13 = (uint64_t *)(v9 + 8);
      if (v12)
        v10 = (_QWORD *)v9;
      v9 = *v13;
    }
    while (*v13);
    if (v10 != a1 + 1 && *((unsigned __int16 *)v10 + 16) <= a2)
    {
      gss::StylChapter::StylChapter((gss::StylChapter *)v19, (Bytef *)(a1[8] + v10[5]), v10[6] - v10[5], v10[7]);
      std::__tree<std::__value_type<gss::StylFile::ChapterId,gss::StylChapter>,std::__map_value_compare<gss::StylFile::ChapterId,std::__value_type<gss::StylFile::ChapterId,gss::StylChapter>,std::less<gss::StylFile::ChapterId>,true>,geo::StdAllocator<std::__value_type<gss::StylFile::ChapterId,gss::StylChapter>,gss::Allocator>>::__emplace_unique_key_args<gss::StylFile::ChapterId,gss::StylFile::ChapterId&,gss::StylChapter>(v4 - 1, a2, &v22, (uint64_t)v19);
      v23 = v21;
    }
    else
    {
LABEL_23:
      memset(v19, 0, sizeof(v19));
      v20 = 0;
      memset(v21, 0, 24);
      v21[3] = gss::Allocator::instance((gss::Allocator *)a1);
      std::__tree<std::__value_type<gss::StylFile::ChapterId,gss::StylChapter>,std::__map_value_compare<gss::StylFile::ChapterId,std::__value_type<gss::StylFile::ChapterId,gss::StylChapter>,std::less<gss::StylFile::ChapterId>,true>,geo::StdAllocator<std::__value_type<gss::StylFile::ChapterId,gss::StylChapter>,gss::Allocator>>::__emplace_unique_key_args<gss::StylFile::ChapterId,gss::StylFile::ChapterId&,gss::StylChapter>(v4 - 1, a2, &v22, (uint64_t)v19);
      v23 = v21;
    }
    std::vector<unsigned char,geo::StdAllocator<unsigned char,gss::Allocator>>::__destroy_vector::operator()[abi:ne180100](&v23);
    v14 = *v4;
    if (!*v4)
      goto LABEL_35;
    v5 = v4;
    do
    {
      v15 = *(unsigned __int16 *)(v14 + 32);
      v16 = v15 >= a2;
      if (v15 >= a2)
        v17 = (uint64_t *)v14;
      else
        v17 = (uint64_t *)(v14 + 8);
      if (v16)
        v5 = (_QWORD *)v14;
      v14 = *v17;
    }
    while (*v17);
    if (v5 == v4 || *((unsigned __int16 *)v5 + 16) > a2)
LABEL_35:
      v5 = v4;
  }
  return v5 + 5;
}

void sub_19F100964(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 - 40) = v1 + 32;
  std::vector<unsigned char,geo::StdAllocator<unsigned char,gss::Allocator>>::__destroy_vector::operator()[abi:ne180100]((uint64_t **)(v2 - 40));
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<std::__value_type<gss::StylFile::ChapterId,gss::StylChapter>,std::__map_value_compare<gss::StylFile::ChapterId,std::__value_type<gss::StylFile::ChapterId,gss::StylChapter>,std::less<gss::StylFile::ChapterId>,true>,geo::StdAllocator<std::__value_type<gss::StylFile::ChapterId,gss::StylChapter>,gss::Allocator>>::__emplace_unique_key_args<gss::StylFile::ChapterId,gss::StylFile::ChapterId&,gss::StylChapter>(uint64_t *result, unsigned __int16 a2, _WORD *a3, uint64_t a4)
{
  uint64_t *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;

  v6 = result;
  v8 = result + 1;
  v7 = result[1];
  if (v7)
  {
    while (1)
    {
      while (1)
      {
        v9 = (uint64_t *)v7;
        v10 = *(unsigned __int16 *)(v7 + 32);
        if (v10 <= a2)
          break;
        v7 = *v9;
        v8 = v9;
        if (!*v9)
          goto LABEL_9;
      }
      if (v10 >= a2)
        break;
      v7 = v9[1];
      if (!v7)
      {
        v8 = v9 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    v9 = result + 1;
LABEL_9:
    v11 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)result[2] + 16))(result[2], 104, 8);
    *(_WORD *)(v11 + 32) = *a3;
    *(_QWORD *)(v11 + 40) = *(_QWORD *)a4;
    *(_OWORD *)(v11 + 48) = *(_OWORD *)(a4 + 8);
    *(_BYTE *)(v11 + 64) = *(_BYTE *)(a4 + 24);
    *(_QWORD *)(v11 + 80) = 0;
    *(_QWORD *)(v11 + 88) = 0;
    *(_QWORD *)(v11 + 72) = 0;
    *(_QWORD *)(v11 + 96) = *(_QWORD *)(a4 + 56);
    *(_OWORD *)(v11 + 72) = *(_OWORD *)(a4 + 32);
    *(_QWORD *)(v11 + 88) = *(_QWORD *)(a4 + 48);
    *(_QWORD *)(a4 + 40) = 0;
    *(_QWORD *)(a4 + 48) = 0;
    *(_QWORD *)(a4 + 32) = 0;
    *(_QWORD *)v11 = 0;
    *(_QWORD *)(v11 + 8) = 0;
    *(_QWORD *)(v11 + 16) = v9;
    *v8 = v11;
    v12 = *(_QWORD *)*v6;
    if (v12)
    {
      *v6 = v12;
      v13 = (uint64_t *)*v8;
    }
    else
    {
      v13 = (uint64_t *)v11;
    }
    result = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)v6[1], v13);
    ++v6[3];
  }
  return result;
}

gss::StylChapter *gss::StylChapter::StylChapter(gss::StylChapter *this, Bytef *a2, uint64_t a3, uLong a4)
{
  uLong *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  *((_BYTE *)this + 24) = 0;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 4) = 0;
  v8 = (uLong *)((char *)this + 32);
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 6) = 0;
  v9 = gss::Allocator::instance(this);
  *((_QWORD *)this + 7) = v9;
  gss::StylChapter::decompress(v9, a2, a3, a4, v8);
  v10 = *((_QWORD *)this + 4);
  v11 = *((_QWORD *)this + 5) - v10;
  *(_QWORD *)this = v10;
  *((_QWORD *)this + 1) = v11;
  *((_QWORD *)this + 2) = 0;
  *((_BYTE *)this + 24) = 0;
  return this;
}

void sub_19F100B34(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::vector<unsigned char,geo::StdAllocator<unsigned char,gss::Allocator>>::__destroy_vector::operator()[abi:ne180100]((uint64_t **)va);
  _Unwind_Resume(a1);
}

void gss::StylChapter::decompress(uint64_t a1, Bytef *a2, uint64_t a3, uLong a4, uLong *a5)
{
  int v7;
  uLong v8;
  uLong v9;
  uLong v10;
  unsigned int v11;
  uLong v12;
  uLong v13;
  z_stream v14;

  if (!a3)
    goto LABEL_12;
  v14.next_in = a2;
  v14.avail_in = a3;
  v14.zalloc = 0;
  v14.zfree = 0;
  v14.total_out = 0;
  v7 = inflateInit_(&v14, "1.2.12", 112);
  v8 = *a5;
  v9 = a5[1];
  if (v7)
    goto LABEL_13;
  v10 = v9 - v8;
  if (a4 <= v10)
  {
    if (a4 < v10)
      a5[1] = v8 + a4;
  }
  else
  {
    std::vector<unsigned char,geo::StdAllocator<unsigned char,gss::Allocator>>::__append((uint64_t)a5, a4 - v10);
  }
  v11 = 0;
  while (!v11)
  {
    v12 = *a5;
    v14.next_out = (Bytef *)(*a5 + v14.total_out);
    v14.avail_out = *((_DWORD *)a5 + 2) - v12 - LODWORD(v14.total_out);
    v11 = inflate(&v14, 2);
    if (v11 >= 2)
      goto LABEL_12;
  }
  if (inflateEnd(&v14))
  {
LABEL_12:
    v8 = *a5;
    v9 = a5[1];
LABEL_13:
    if (v9 == v8)
      return;
    goto LABEL_14;
  }
  v13 = a5[1] - *a5;
  if (v14.total_out > v13)
  {
    std::vector<unsigned char,geo::StdAllocator<unsigned char,gss::Allocator>>::__append((uint64_t)a5, v14.total_out - v13);
    return;
  }
  if (v14.total_out < v13)
  {
    v8 = *a5 + v14.total_out;
LABEL_14:
    a5[1] = v8;
  }
}

uint64_t std::vector<unsigned char,geo::StdAllocator<unsigned char,gss::Allocator>>::__append(uint64_t result, unint64_t a2)
{
  unint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  _BYTE *v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  _BYTE *v11;
  _BYTE *v12;
  _BYTE *v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;

  v2 = a2;
  v3 = result;
  v4 = *(_BYTE **)(result + 8);
  v5 = *(_QWORD *)(result + 16);
  if (v5 - (uint64_t)v4 >= a2)
  {
    if (a2)
    {
      v10 = &v4[a2];
      do
      {
        if (v4)
          *v4 = 0;
        ++v4;
        --v2;
      }
      while (v2);
      v4 = v10;
    }
    *(_QWORD *)(result + 8) = v4;
  }
  else
  {
    v6 = &v4[-*(_QWORD *)result];
    v7 = (unint64_t)&v6[a2];
    if ((uint64_t)&v6[a2] < 0)
      std::vector<double>::__throw_length_error[abi:ne180100]();
    v8 = v5 - *(_QWORD *)result;
    if (2 * v8 > v7)
      v7 = 2 * v8;
    if (v8 >= 0x3FFFFFFFFFFFFFFFLL)
      v9 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
      result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(result + 24) + 16))(*(_QWORD *)(result + 24), v9, 1);
    else
      result = 0;
    v11 = &v6[result];
    v12 = &v6[result + v2];
    v13 = &v6[result];
    do
    {
      if (v13)
        *v13 = 0;
      ++v13;
      --v2;
    }
    while (v2);
    v15 = *(_QWORD *)v3;
    v14 = *(_QWORD *)(v3 + 8);
    if (v14 != *(_QWORD *)v3)
    {
      do
      {
        v16 = *(_BYTE *)--v14;
        *--v11 = v16;
      }
      while (v14 != v15);
      v14 = *(_QWORD *)v3;
    }
    *(_QWORD *)v3 = v11;
    *(_QWORD *)(v3 + 8) = v12;
    v17 = *(_QWORD *)(v3 + 16);
    *(_QWORD *)(v3 + 16) = result + v9;
    if (v14)
      return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 24) + 40))(*(_QWORD *)(v3 + 24), v14, v17 - v14);
  }
  return result;
}

void gss::StyleSheet<gss::PropertyID>::didFinishDecodingEverything(uint64_t a1, unsigned __int8 a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  size_t v19;
  __int128 *p_dst;
  unint64_t v21;
  unint64_t v22;
  const void **v23;
  const void *v24;
  uint64_t v25;
  uint64_t v26;
  void **v27;
  std::__shared_weak_count *v28;
  unint64_t *p_shared_owners;
  unint64_t v30;
  __int128 __dst;
  unint64_t v32;

  atomic_store(a2, (unsigned __int8 *)(a1 + 2787));
  LOBYTE(__dst) = a2;
  v5 = *(_QWORD *)(a3 + 24);
  if (!v5)
  {
    std::__throw_bad_function_call[abi:nn180100]();
    goto LABEL_46;
  }
  (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)v5 + 48))(v5, &__dst);
  std::mutex::lock((std::mutex *)(a1 + 2888));
  atomic_store(1u, (unsigned __int8 *)(a1 + 2786));
  std::promise<void>::set_value((std::promise<void> *)(a1 + 2800));
  v8 = *(uint64_t **)(a1 + 2960);
  if (!v8)
    goto LABEL_21;
  v9 = *v8;
  v10 = v8[1];
  if (*v8 == v10)
  {
    *(_QWORD *)(a1 + 2960) = 0;
    v12 = *v8;
    if (!*v8)
      goto LABEL_20;
LABEL_10:
    v13 = v8[1];
    v14 = v12;
    if (v13 == v12)
    {
LABEL_19:
      v8[1] = v12;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v8[3] + 40))(v8[3], v14, v8[2] - v14);
      goto LABEL_20;
    }
    while (1)
    {
      v17 = v13 - 32;
      v15 = *(_QWORD **)(v13 - 8);
      if ((_QWORD *)(v13 - 32) == v15)
      {
        v15 = (_QWORD *)(v13 - 32);
        v16 = 4;
      }
      else
      {
        if (!v15)
          goto LABEL_14;
        v16 = 5;
      }
      (*(void (**)(void))(*v15 + 8 * v16))();
LABEL_14:
      v13 = v17;
      if (v17 == v12)
      {
        v14 = *v8;
        goto LABEL_19;
      }
    }
  }
  do
  {
    LOBYTE(__dst) = a2;
    v11 = *(_QWORD *)(v9 + 24);
    if (!v11)
    {
      std::__throw_bad_function_call[abi:nn180100]();
      __break(1u);
      return;
    }
    (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)v11 + 48))(v11, &__dst);
    v9 += 32;
  }
  while (v9 != v10);
  v8 = *(uint64_t **)(a1 + 2960);
  *(_QWORD *)(a1 + 2960) = 0;
  if (!v8)
    goto LABEL_21;
  v12 = *v8;
  if (*v8)
    goto LABEL_10;
LABEL_20:
  MEMORY[0x1A1AF4E00](v8, 0x20C40DC1BFBCFLL);
LABEL_21:
  v18 = *(_DWORD *)(a4 + 104);
  if ((v18 & 0x10) != 0)
  {
    v21 = *(_QWORD *)(a4 + 96);
    v22 = *(_QWORD *)(a4 + 56);
    if (v21 < v22)
    {
      *(_QWORD *)(a4 + 96) = v22;
      v21 = v22;
    }
    v23 = (const void **)(a4 + 48);
  }
  else
  {
    if ((v18 & 8) == 0)
    {
      v19 = 0;
      HIBYTE(v32) = 0;
      p_dst = &__dst;
      goto LABEL_36;
    }
    v23 = (const void **)(a4 + 24);
    v21 = *(_QWORD *)(a4 + 40);
  }
  v24 = *v23;
  v19 = v21 - (_QWORD)*v23;
  if (v19 >= 0x7FFFFFFFFFFFFFF8)
LABEL_46:
    abort();
  if (v19 >= 0x17)
  {
    v25 = (v19 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v19 | 7) != 0x17)
      v25 = v19 | 7;
    v26 = v25 + 1;
    p_dst = (__int128 *)operator new(v25 + 1);
    *((_QWORD *)&__dst + 1) = v19;
    v32 = v26 | 0x8000000000000000;
    *(_QWORD *)&__dst = p_dst;
    goto LABEL_35;
  }
  HIBYTE(v32) = v21 - *(_BYTE *)v23;
  p_dst = &__dst;
  if (v19)
LABEL_35:
    memmove(p_dst, v24, v19);
LABEL_36:
  *((_BYTE *)p_dst + v19) = 0;
  v27 = (void **)(a1 + 2976);
  if (*(char *)(a1 + 2999) < 0)
    operator delete(*v27);
  *(_OWORD *)v27 = __dst;
  *(_QWORD *)(a1 + 2992) = v32;
  std::mutex::unlock((std::mutex *)(a1 + 2888));
  v28 = *(std::__shared_weak_count **)(a1 + 24);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  if (v28)
  {
    p_shared_owners = (unint64_t *)&v28->__shared_owners_;
    do
      v30 = __ldaxr(p_shared_owners);
    while (__stlxr(v30 - 1, p_shared_owners));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
}

void sub_19F101014(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<gss::StylesheetManager<gss::PropertyID>::addFinishedDecodingGlobalPropertiesCallback(std::function<void ()(std::shared_ptr<gss::StylesheetManager<gss::PropertyID>>,BOOL)>)::{lambda(BOOL)#1},std::allocator<gss::StylesheetManager<gss::PropertyID>::addFinishedDecodingGlobalPropertiesCallback(std::function<void ()(std::shared_ptr<gss::StylesheetManager<gss::PropertyID>>,BOOL)>)::{lambda(BOOL)#1}>,void ()(BOOL)>::operator()(_QWORD *a1, char *a2)
{
  char v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  char v12;

  v2 = *a2;
  v3 = (std::__shared_weak_count *)a1[6];
  v10 = a1[5];
  v11 = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }
  v12 = v2;
  v6 = a1[4];
  if (v6)
  {
    (*(void (**)(uint64_t, uint64_t *, char *))(*(_QWORD *)v6 + 48))(v6, &v10, &v12);
    v7 = v11;
    if (v11)
    {
      v8 = (unint64_t *)&v11->__shared_owners_;
      do
        v9 = __ldaxr(v8);
      while (__stlxr(v9 - 1, v8));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
  else
  {
    std::__throw_bad_function_call[abi:nn180100]();
    __break(1u);
  }
}

void sub_19F1010D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  unint64_t *p_shared_owners;
  unint64_t v13;

  if (a11)
  {
    p_shared_owners = (unint64_t *)&a11->__shared_owners_;
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))a11->__on_zero_shared)(a11);
      std::__shared_weak_count::__release_weak(a11);
    }
  }
  _Unwind_Resume(exception_object);
}

void std::__function::__func<gss::StylesheetManager<gss::PropertyID>::addFinishedDecodingCallback(std::function<void ()(std::shared_ptr<gss::StylesheetManager<gss::PropertyID>>,BOOL)>)::{lambda(BOOL)#1},std::allocator<gss::StylesheetManager<gss::PropertyID>::addFinishedDecodingCallback(std::function<void ()(std::shared_ptr<gss::StylesheetManager<gss::PropertyID>>,BOOL)>)::{lambda(BOOL)#1}>,void ()(BOOL)>::operator()(_QWORD *a1, char *a2)
{
  char v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  char v12;

  v2 = *a2;
  v3 = (std::__shared_weak_count *)a1[6];
  v10 = a1[5];
  v11 = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }
  v12 = v2;
  v6 = a1[4];
  if (v6)
  {
    (*(void (**)(uint64_t, uint64_t *, char *))(*(_QWORD *)v6 + 48))(v6, &v10, &v12);
    v7 = v11;
    if (v11)
    {
      v8 = (unint64_t *)&v11->__shared_owners_;
      do
        v9 = __ldaxr(v8);
      while (__stlxr(v9 - 1, v8));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
  else
  {
    std::__throw_bad_function_call[abi:nn180100]();
    __break(1u);
  }
}

void sub_19F101308(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  unint64_t *p_shared_owners;
  unint64_t v13;

  if (a11)
  {
    p_shared_owners = (unint64_t *)&a11->__shared_owners_;
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))a11->__on_zero_shared)(a11);
      std::__shared_weak_count::__release_weak(a11);
    }
  }
  _Unwind_Resume(exception_object);
}

void std::__function::__func<gss::StyleSheet<gss::ScenePropertyID>::construct(unsigned char const*,unsigned long,std::string const&,float,gss::TargetDisplay,BOOL,std::shared_ptr<std::unordered_map<std::string,int,std::hash<std::string>,std::equal_to<std::string>,geo::StdAllocator<std::pair<std::string const,int>,gss::Allocator>>> const&,std::shared_ptr<std::unordered_map<std::string,int,std::hash<std::string>,std::equal_to<std::string>,geo::StdAllocator<std::pair<std::string const,int>,gss::Allocator>>> const&,BOOL,BOOL,std::function<void ()(BOOL)>)::{lambda(void)#1}::operator() const(void)::{lambda(BOOL)#1},std::allocator<gss::StyleSheet<gss::ScenePropertyID>::construct(unsigned char const*,unsigned long,std::string const&,float,gss::TargetDisplay,BOOL,std::shared_ptr<std::unordered_map<std::string,int,std::hash<std::string>,std::equal_to<std::string>,geo::StdAllocator<std::pair<std::string const,int>,gss::Allocator>>> const&,std::shared_ptr<std::unordered_map<std::string,int,std::hash<std::string>,std::equal_to<std::string>,geo::StdAllocator<std::pair<std::string const,int>,gss::Allocator>>> const&,BOOL,BOOL,std::function<void ()(BOOL)>)::{lambda(void)#1}::operator() const(void)::{lambda(BOOL)#1}>,void ()(BOOL)>::operator()(uint64_t a1, unsigned __int8 *a2)
{
  gss::StyleSheet<gss::ScenePropertyID>::didFinishDecodingGlobalProperties(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 16), *a2);
}

void std::__function::__func<gss::StyleSheet<gss::ScenePropertyID>::construct(unsigned char const*,unsigned long,std::string const&,float,gss::TargetDisplay,BOOL,std::shared_ptr<std::unordered_map<std::string,int,std::hash<std::string>,std::equal_to<std::string>,geo::StdAllocator<std::pair<std::string const,int>,gss::Allocator>>> const&,std::shared_ptr<std::unordered_map<std::string,int,std::hash<std::string>,std::equal_to<std::string>,geo::StdAllocator<std::pair<std::string const,int>,gss::Allocator>>> const&,BOOL,BOOL,std::function<void ()(BOOL)>)::{lambda(void)#1}::operator() const(void)::{lambda(BOOL)#2},std::allocator<gss::StyleSheet<gss::ScenePropertyID>::construct(unsigned char const*,unsigned long,std::string const&,float,gss::TargetDisplay,BOOL,std::shared_ptr<std::unordered_map<std::string,int,std::hash<std::string>,std::equal_to<std::string>,geo::StdAllocator<std::pair<std::string const,int>,gss::Allocator>>> const&,std::shared_ptr<std::unordered_map<std::string,int,std::hash<std::string>,std::equal_to<std::string>,geo::StdAllocator<std::pair<std::string const,int>,gss::Allocator>>> const&,BOOL,BOOL,std::function<void ()(BOOL)>)::{lambda(void)#1}::operator() const(void)::{lambda(BOOL)#2}>,void ()(BOOL)>::operator()(_QWORD *a1, unsigned __int8 *a2)
{
  gss::StyleSheet<gss::ScenePropertyID>::didFinishDecodingEverything(*(_QWORD *)(a1[1] + 16), *a2, a1[2], a1[3]);
}

void std::__function::__func<gss::StyleSheet<gss::PropertyID>::construct(unsigned char const*,unsigned long,std::string const&,float,gss::TargetDisplay,BOOL,std::shared_ptr<std::unordered_map<std::string,int,std::hash<std::string>,std::equal_to<std::string>,geo::StdAllocator<std::pair<std::string const,int>,gss::Allocator>>> const&,std::shared_ptr<std::unordered_map<std::string,int,std::hash<std::string>,std::equal_to<std::string>,geo::StdAllocator<std::pair<std::string const,int>,gss::Allocator>>> const&,BOOL,BOOL,std::function<void ()(BOOL)>)::{lambda(void)#1}::operator() const(void)::{lambda(BOOL)#1},std::allocator<gss::StyleSheet<gss::PropertyID>::construct(unsigned char const*,unsigned long,std::string const&,float,gss::TargetDisplay,BOOL,std::shared_ptr<std::unordered_map<std::string,int,std::hash<std::string>,std::equal_to<std::string>,geo::StdAllocator<std::pair<std::string const,int>,gss::Allocator>>> const&,std::shared_ptr<std::unordered_map<std::string,int,std::hash<std::string>,std::equal_to<std::string>,geo::StdAllocator<std::pair<std::string const,int>,gss::Allocator>>> const&,BOOL,BOOL,std::function<void ()(BOOL)>)::{lambda(void)#1}::operator() const(void)::{lambda(BOOL)#1}>,void ()(BOOL)>::operator()(uint64_t a1, unsigned __int8 *a2)
{
  gss::StyleSheet<gss::PropertyID>::didFinishDecodingGlobalProperties(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 16), *a2);
}

void std::__function::__func<gss::StyleSheet<gss::PropertyID>::construct(unsigned char const*,unsigned long,std::string const&,float,gss::TargetDisplay,BOOL,std::shared_ptr<std::unordered_map<std::string,int,std::hash<std::string>,std::equal_to<std::string>,geo::StdAllocator<std::pair<std::string const,int>,gss::Allocator>>> const&,std::shared_ptr<std::unordered_map<std::string,int,std::hash<std::string>,std::equal_to<std::string>,geo::StdAllocator<std::pair<std::string const,int>,gss::Allocator>>> const&,BOOL,BOOL,std::function<void ()(BOOL)>)::{lambda(void)#1}::operator() const(void)::{lambda(BOOL)#2},std::allocator<gss::StyleSheet<gss::PropertyID>::construct(unsigned char const*,unsigned long,std::string const&,float,gss::TargetDisplay,BOOL,std::shared_ptr<std::unordered_map<std::string,int,std::hash<std::string>,std::equal_to<std::string>,geo::StdAllocator<std::pair<std::string const,int>,gss::Allocator>>> const&,std::shared_ptr<std::unordered_map<std::string,int,std::hash<std::string>,std::equal_to<std::string>,geo::StdAllocator<std::pair<std::string const,int>,gss::Allocator>>> const&,BOOL,BOOL,std::function<void ()(BOOL)>)::{lambda(void)#1}::operator() const(void)::{lambda(BOOL)#2}>,void ()(BOOL)>::operator()(_QWORD *a1, unsigned __int8 *a2)
{
  gss::StyleSheet<gss::PropertyID>::didFinishDecodingEverything(*(_QWORD *)(a1[1] + 16), *a2, a1[2], a1[3]);
}

void std::__function::__func<std::shared_ptr<gss::StyleSheet<gss::ScenePropertyID>> md::StyleSheetExtension::initWithName<gss::ScenePropertyID>(std::string const&,float,gss::TargetDisplay,md::StylesheetVendor &,VKResourceManager *,BOOL)::{lambda(BOOL)#1},std::allocator<std::shared_ptr<gss::StyleSheet<gss::ScenePropertyID>> md::StyleSheetExtension::initWithName<gss::ScenePropertyID>(std::string const&,float,gss::TargetDisplay,md::StylesheetVendor &,VKResourceManager *,BOOL)::{lambda(BOOL)#1}>,void ()(BOOL)>::operator()(uint64_t a1, _BYTE *a2)
{
  NSObject *v3;
  _QWORD *v4;
  uint64_t v5;
  int v6;
  _QWORD *v7;
  __int16 v8;
  uint64_t v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  if (!*a2)
  {
    if (GEOGetVectorKitResourceLoadingLog_onceToken != -1)
      dispatch_once(&GEOGetVectorKitResourceLoadingLog_onceToken, &__block_literal_global_19_11788);
    v3 = (id)GEOGetVectorKitResourceLoadingLog_log;
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      v4 = (_QWORD *)(a1 + 32);
      if (*(char *)(a1 + 55) < 0)
        v4 = (_QWORD *)*v4;
      v5 = objc_msgSend(objc_retainAutorelease(*(id *)(a1 + 56)), "UTF8String");
      v6 = 136315394;
      v7 = v4;
      v8 = 2080;
      v9 = v5;
      _os_log_impl(&dword_19F029000, v3, OS_LOG_TYPE_ERROR, "Failed to decode stylesheet %s %s", (uint8_t *)&v6, 0x16u);
    }

  }
}

void sub_19F1014A0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void std::__function::__func<std::shared_ptr<gss::StyleSheet<gss::PropertyID>> md::StyleSheetExtension::initWithName<gss::PropertyID>(std::string const&,float,gss::TargetDisplay,md::StylesheetVendor &,VKResourceManager *,BOOL)::{lambda(BOOL)#1},std::allocator<std::shared_ptr<gss::StyleSheet<gss::PropertyID>> md::StyleSheetExtension::initWithName<gss::PropertyID>(std::string const&,float,gss::TargetDisplay,md::StylesheetVendor &,VKResourceManager *,BOOL)::{lambda(BOOL)#1}>,void ()(BOOL)>::operator()(uint64_t a1, _BYTE *a2)
{
  NSObject *v3;
  _QWORD *v4;
  uint64_t v5;
  int v6;
  _QWORD *v7;
  __int16 v8;
  uint64_t v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  if (!*a2)
  {
    if (GEOGetVectorKitResourceLoadingLog_onceToken != -1)
      dispatch_once(&GEOGetVectorKitResourceLoadingLog_onceToken, &__block_literal_global_19_11788);
    v3 = (id)GEOGetVectorKitResourceLoadingLog_log;
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      v4 = (_QWORD *)(a1 + 32);
      if (*(char *)(a1 + 55) < 0)
        v4 = (_QWORD *)*v4;
      v5 = objc_msgSend(objc_retainAutorelease(*(id *)(a1 + 56)), "UTF8String");
      v6 = 136315394;
      v7 = v4;
      v8 = 2080;
      v9 = v5;
      _os_log_impl(&dword_19F029000, v3, OS_LOG_TYPE_ERROR, "Failed to decode stylesheet %s %s", (uint8_t *)&v6, 0x16u);
    }

  }
}

void sub_19F1015B8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void gss::StyleSheet<gss::ScenePropertyID>::didFinishDecodingGlobalProperties(uint64_t a1, unsigned __int8 a2)
{
  std::mutex *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int8 v15;

  v4 = (std::mutex *)(a1 + 2824);
  std::mutex::lock((std::mutex *)(a1 + 2824));
  atomic_store(a2, (unsigned __int8 *)(a1 + 2785));
  atomic_store(1u, (unsigned __int8 *)(a1 + 2784));
  std::promise<void>::set_value((std::promise<void> *)(a1 + 2792));
  v5 = *(uint64_t **)(a1 + 2952);
  if (v5)
  {
    v6 = *v5;
    v7 = v5[1];
    if (*v5 == v7)
    {
      *(_QWORD *)(a1 + 2952) = 0;
      v9 = *v5;
      if (!*v5)
        goto LABEL_19;
      goto LABEL_9;
    }
    while (1)
    {
      v15 = a2;
      v8 = *(_QWORD *)(v6 + 24);
      if (!v8)
        break;
      (*(void (**)(uint64_t, unsigned __int8 *))(*(_QWORD *)v8 + 48))(v8, &v15);
      v6 += 32;
      if (v6 == v7)
      {
        v5 = *(uint64_t **)(a1 + 2952);
        *(_QWORD *)(a1 + 2952) = 0;
        if (!v5)
          goto LABEL_20;
        v9 = *v5;
        if (!*v5)
        {
LABEL_19:
          MEMORY[0x1A1AF4E00](v5, 0x20C40DC1BFBCFLL);
          goto LABEL_20;
        }
LABEL_9:
        v10 = v5[1];
        v11 = v9;
        if (v10 == v9)
        {
LABEL_18:
          v5[1] = v9;
          (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v5[3] + 40))(v5[3], v11, v5[2] - v11);
          goto LABEL_19;
        }
        while (2)
        {
          v14 = v10 - 32;
          v12 = *(_QWORD **)(v10 - 8);
          if ((_QWORD *)(v10 - 32) != v12)
          {
            if (v12)
            {
              v13 = 5;
LABEL_12:
              (*(void (**)(void))(*v12 + 8 * v13))();
            }
            v10 = v14;
            if (v14 == v9)
            {
              v11 = *v5;
              goto LABEL_18;
            }
            continue;
          }
          break;
        }
        v12 = (_QWORD *)(v10 - 32);
        v13 = 4;
        goto LABEL_12;
      }
    }
    std::__throw_bad_function_call[abi:nn180100]();
    __break(1u);
  }
  else
  {
LABEL_20:
    std::mutex::unlock(v4);
  }
}

void sub_19F101720(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void gss::StyleSheet<gss::ScenePropertyID>::didFinishDecodingEverything(uint64_t a1, unsigned __int8 a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  size_t v19;
  __int128 *p_dst;
  unint64_t v21;
  unint64_t v22;
  const void **v23;
  const void *v24;
  uint64_t v25;
  uint64_t v26;
  void **v27;
  std::__shared_weak_count *v28;
  unint64_t *p_shared_owners;
  unint64_t v30;
  __int128 __dst;
  unint64_t v32;

  atomic_store(a2, (unsigned __int8 *)(a1 + 2787));
  LOBYTE(__dst) = a2;
  v5 = *(_QWORD *)(a3 + 24);
  if (!v5)
  {
    std::__throw_bad_function_call[abi:nn180100]();
    goto LABEL_46;
  }
  (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)v5 + 48))(v5, &__dst);
  std::mutex::lock((std::mutex *)(a1 + 2888));
  atomic_store(1u, (unsigned __int8 *)(a1 + 2786));
  std::promise<void>::set_value((std::promise<void> *)(a1 + 2800));
  v8 = *(uint64_t **)(a1 + 2960);
  if (!v8)
    goto LABEL_21;
  v9 = *v8;
  v10 = v8[1];
  if (*v8 == v10)
  {
    *(_QWORD *)(a1 + 2960) = 0;
    v12 = *v8;
    if (!*v8)
      goto LABEL_20;
LABEL_10:
    v13 = v8[1];
    v14 = v12;
    if (v13 == v12)
    {
LABEL_19:
      v8[1] = v12;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v8[3] + 40))(v8[3], v14, v8[2] - v14);
      goto LABEL_20;
    }
    while (1)
    {
      v17 = v13 - 32;
      v15 = *(_QWORD **)(v13 - 8);
      if ((_QWORD *)(v13 - 32) == v15)
      {
        v15 = (_QWORD *)(v13 - 32);
        v16 = 4;
      }
      else
      {
        if (!v15)
          goto LABEL_14;
        v16 = 5;
      }
      (*(void (**)(void))(*v15 + 8 * v16))();
LABEL_14:
      v13 = v17;
      if (v17 == v12)
      {
        v14 = *v8;
        goto LABEL_19;
      }
    }
  }
  do
  {
    LOBYTE(__dst) = a2;
    v11 = *(_QWORD *)(v9 + 24);
    if (!v11)
    {
      std::__throw_bad_function_call[abi:nn180100]();
      __break(1u);
      return;
    }
    (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)v11 + 48))(v11, &__dst);
    v9 += 32;
  }
  while (v9 != v10);
  v8 = *(uint64_t **)(a1 + 2960);
  *(_QWORD *)(a1 + 2960) = 0;
  if (!v8)
    goto LABEL_21;
  v12 = *v8;
  if (*v8)
    goto LABEL_10;
LABEL_20:
  MEMORY[0x1A1AF4E00](v8, 0x20C40DC1BFBCFLL);
LABEL_21:
  v18 = *(_DWORD *)(a4 + 104);
  if ((v18 & 0x10) != 0)
  {
    v21 = *(_QWORD *)(a4 + 96);
    v22 = *(_QWORD *)(a4 + 56);
    if (v21 < v22)
    {
      *(_QWORD *)(a4 + 96) = v22;
      v21 = v22;
    }
    v23 = (const void **)(a4 + 48);
  }
  else
  {
    if ((v18 & 8) == 0)
    {
      v19 = 0;
      HIBYTE(v32) = 0;
      p_dst = &__dst;
      goto LABEL_36;
    }
    v23 = (const void **)(a4 + 24);
    v21 = *(_QWORD *)(a4 + 40);
  }
  v24 = *v23;
  v19 = v21 - (_QWORD)*v23;
  if (v19 >= 0x7FFFFFFFFFFFFFF8)
LABEL_46:
    abort();
  if (v19 >= 0x17)
  {
    v25 = (v19 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v19 | 7) != 0x17)
      v25 = v19 | 7;
    v26 = v25 + 1;
    p_dst = (__int128 *)operator new(v25 + 1);
    *((_QWORD *)&__dst + 1) = v19;
    v32 = v26 | 0x8000000000000000;
    *(_QWORD *)&__dst = p_dst;
    goto LABEL_35;
  }
  HIBYTE(v32) = v21 - *(_BYTE *)v23;
  p_dst = &__dst;
  if (v19)
LABEL_35:
    memmove(p_dst, v24, v19);
LABEL_36:
  *((_BYTE *)p_dst + v19) = 0;
  v27 = (void **)(a1 + 2976);
  if (*(char *)(a1 + 2999) < 0)
    operator delete(*v27);
  *(_OWORD *)v27 = __dst;
  *(_QWORD *)(a1 + 2992) = v32;
  std::mutex::unlock((std::mutex *)(a1 + 2888));
  v28 = *(std::__shared_weak_count **)(a1 + 24);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  if (v28)
  {
    p_shared_owners = (unint64_t *)&v28->__shared_owners_;
    do
      v30 = __ldaxr(p_shared_owners);
    while (__stlxr(v30 - 1, p_shared_owners));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
}

void sub_19F1019D8(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void gss::StyleSheet<gss::PropertyID>::didFinishDecodingGlobalProperties(uint64_t a1, unsigned __int8 a2)
{
  std::mutex *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int8 v15;

  v4 = (std::mutex *)(a1 + 2824);
  std::mutex::lock((std::mutex *)(a1 + 2824));
  atomic_store(a2, (unsigned __int8 *)(a1 + 2785));
  atomic_store(1u, (unsigned __int8 *)(a1 + 2784));
  std::promise<void>::set_value((std::promise<void> *)(a1 + 2792));
  v5 = *(uint64_t **)(a1 + 2952);
  if (v5)
  {
    v6 = *v5;
    v7 = v5[1];
    if (*v5 == v7)
    {
      *(_QWORD *)(a1 + 2952) = 0;
      v9 = *v5;
      if (!*v5)
        goto LABEL_19;
      goto LABEL_9;
    }
    while (1)
    {
      v15 = a2;
      v8 = *(_QWORD *)(v6 + 24);
      if (!v8)
        break;
      (*(void (**)(uint64_t, unsigned __int8 *))(*(_QWORD *)v8 + 48))(v8, &v15);
      v6 += 32;
      if (v6 == v7)
      {
        v5 = *(uint64_t **)(a1 + 2952);
        *(_QWORD *)(a1 + 2952) = 0;
        if (!v5)
          goto LABEL_20;
        v9 = *v5;
        if (!*v5)
        {
LABEL_19:
          MEMORY[0x1A1AF4E00](v5, 0x20C40DC1BFBCFLL);
          goto LABEL_20;
        }
LABEL_9:
        v10 = v5[1];
        v11 = v9;
        if (v10 == v9)
        {
LABEL_18:
          v5[1] = v9;
          (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v5[3] + 40))(v5[3], v11, v5[2] - v11);
          goto LABEL_19;
        }
        while (2)
        {
          v14 = v10 - 32;
          v12 = *(_QWORD **)(v10 - 8);
          if ((_QWORD *)(v10 - 32) != v12)
          {
            if (v12)
            {
              v13 = 5;
LABEL_12:
              (*(void (**)(void))(*v12 + 8 * v13))();
            }
            v10 = v14;
            if (v14 == v9)
            {
              v11 = *v5;
              goto LABEL_18;
            }
            continue;
          }
          break;
        }
        v12 = (_QWORD *)(v10 - 32);
        v13 = 4;
        goto LABEL_12;
      }
    }
    std::__throw_bad_function_call[abi:nn180100]();
    __break(1u);
  }
  else
  {
LABEL_20:
    std::mutex::unlock(v4);
  }
}

void sub_19F101B4C(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void std::vector<md::StyleManagerEvent>::insert(uint64_t a1, char *__src, char *a3)
{
  char *v3;
  char *v6;
  unint64_t v7;
  char *v8;
  _BYTE *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  size_t v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t v18;
  size_t v19;
  char *v20;
  char *v21;
  unint64_t v22;
  char *v23;
  char *v24;
  char *v25;
  unint64_t v26;
  __int128 v27;
  char v28;
  _BYTE *v29;
  uint64_t v30;

  v3 = a3;
  v6 = *(char **)(a1 + 8);
  v7 = *(_QWORD *)(a1 + 16);
  if ((unint64_t)v6 < v7)
  {
    if (__src == v6)
    {
      *__src = *a3;
      *(_QWORD *)(a1 + 8) = __src + 1;
    }
    else
    {
      v8 = __src + 1;
      if (v6)
      {
        *v6 = *(v6 - 1);
        v9 = v6 + 1;
      }
      else
      {
        v9 = 0;
      }
      *(_QWORD *)(a1 + 8) = v9;
      if (v6 != v8)
        memmove(__src + 1, __src, v6 - v8);
      if (__src <= v3 && *(_QWORD *)(a1 + 8) > (unint64_t)v3)
        ++v3;
      *__src = *v3;
    }
    return;
  }
  v10 = *(char **)a1;
  v11 = (uint64_t)&v6[-*(_QWORD *)a1 + 1];
  if (v11 < 0)
    abort();
  v12 = __src - v10;
  v13 = v7 - (_QWORD)v10;
  if (2 * v13 > v11)
    v11 = 2 * v13;
  if (v13 >= 0x3FFFFFFFFFFFFFFFLL)
    v14 = 0x7FFFFFFFFFFFFFFFLL;
  else
    v14 = v11;
  if (v14)
    v15 = (char *)operator new(v14);
  else
    v15 = 0;
  v16 = &v15[v12];
  v17 = &v15[v14];
  if (v12 == v14)
  {
    if (v12 < 1)
    {
      if ((unint64_t)(2 * v12) <= 1)
        v19 = 1;
      else
        v19 = 2 * v12;
      v20 = (char *)operator new(v19);
      v16 = &v20[v19 >> 2];
      v17 = &v20[v19];
      if (v15)
      {
        operator delete(v15);
        v10 = *(char **)a1;
      }
    }
    else
    {
      if (v12 + 1 >= 0)
        v18 = v12 + 1;
      else
        v18 = v12 + 2;
      v16 -= v18 >> 1;
    }
  }
  *v16 = *v3;
  v21 = v16 + 1;
  if (v10 != __src)
  {
    v22 = __src - v10;
    if ((unint64_t)(__src - v10) < 0x20)
    {
      v23 = __src;
    }
    else if ((unint64_t)(__src - v16) < 0x20)
    {
      v23 = __src;
    }
    else
    {
      v23 = &__src[-(v22 & 0xFFFFFFFFFFFFFFE0)];
      v24 = __src - 16;
      v25 = v16 - 16;
      v26 = v22 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        v27 = *(_OWORD *)v24;
        *((_OWORD *)v25 - 1) = *((_OWORD *)v24 - 1);
        *(_OWORD *)v25 = v27;
        v24 -= 32;
        v25 -= 32;
        v26 -= 32;
      }
      while (v26);
      v16 -= v22 & 0xFFFFFFFFFFFFFFE0;
      if (v22 == (v22 & 0xFFFFFFFFFFFFFFE0))
        goto LABEL_43;
    }
    do
    {
      v28 = *--v23;
      *--v16 = v28;
    }
    while (v23 != v10);
  }
LABEL_43:
  v29 = *(_BYTE **)(a1 + 8);
  v30 = v29 - __src;
  if (v29 != __src)
  {
    memmove(v21, __src, v29 - __src);
    v10 = *(char **)a1;
  }
  *(_QWORD *)a1 = v16;
  *(_QWORD *)(a1 + 8) = &v21[v30];
  *(_QWORD *)(a1 + 16) = v17;
  if (v10)
    operator delete(v10);
}

void sub_19F101DB4(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

void md::LabelLineSegment::createPointList(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  _BOOL4 v6;
  uint64_t v7;
  unsigned int v8;
  double *v9;
  double v10;
  double v11;
  __double2 v12;
  double v13;
  __double2 v14;
  unsigned __int8 *v15;
  int v16;
  int v17;
  float *v18;
  float *v19;
  uint64_t v20;
  uint64_t v21;
  double *v22;
  double v23;
  double v24;
  float *v25;
  double v26;
  double v27;
  long double v28;
  long double v29;
  __double2 v30;
  double v31;
  __double2 v32;
  double v33;
  double v34;
  double v35;
  double v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float *v41;
  double v42;
  double v43;
  uint64_t v44;
  double v45;
  double v46;
  double v47;
  double v48;
  float v49;
  double v50;
  double v51;
  double v52;
  double v53;
  double v54;
  uint64_t v55;
  uint64_t v56;
  float *v57;
  uint64_t v58;
  float *v59;
  float v60;
  float v61;
  float v62;
  float *v63;
  float v64;
  long double v65;
  long double v66;
  float64x2_t v67;
  double v73;
  float v74;
  float v75;
  uint64_t v76;
  double v77;
  uint64_t v78;
  double *v79;
  unint64_t v81;
  long double v82;
  long double v83;
  float64x2_t v84;
  double v85;
  float v86;
  float v87;
  uint64_t v88;
  double v89;
  float64x2_t *v90;
  float64x2_t v91;
  double v92;
  __double2 v93;
  double v94;
  __double2 v95;
  double *v96;
  double v97;
  double v98;
  double v99;
  double v100;
  double v101;
  int *v102;
  float32x2_t *v103;
  float *v104;
  unint64_t v105;
  int *v106;
  double v107;
  double v108;
  double v109;
  float32x2_t v110;
  float v111;
  double *v112;
  double v113;
  double v114;
  double v115;
  double v116;
  double v117;
  double v118;
  uint64_t v119;
  uint64_t v120;
  std::__shared_weak_count *v121;
  unint64_t *p_shared_owners;
  unint64_t v123;
  int v124;
  float v125;
  float v126;
  double v127;
  long double __x;
  double __xa;
  double v130;
  _BOOL4 v131;
  double v132;
  float64x2_t v133;
  float v134;
  float *v135;
  float *v136;
  float v137;
  double v138;
  double v139;
  float64_t v140;
  float64_t v141;
  int32x2_t v142;
  char v143;
  char v144;
  double __b;
  double v146;

  if (*(unsigned __int16 *)(a1 + 46) < 2u)
    return;
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
  v5 = *(unsigned __int16 *)(a1 + 46);
  if (v5 <= 0xA)
  {
    v6 = *(_QWORD *)(a1 + 24) != 0;
    v7 = *(_QWORD *)(a2 + 48);
    if (v7)
    {
LABEL_4:
      v131 = v6;
      if (*(_WORD *)(a1 + 46))
      {
        v8 = *(_DWORD *)(a2 + 56);
        v9 = (double *)(v7 + 24 * v8);
        v10 = *v9;
        if (*(_BYTE *)(a1 + 33))
        {
          v11 = v9[1] * 0.0174532925;
          v12 = __sincos_stret(v10 * 0.0174532925);
          v13 = 6378137.0 / sqrt(v12.__sinval * v12.__sinval * -0.00669437999 + 1.0);
          v14 = __sincos_stret(v11);
          *(double *)v4 = v13 * v12.__cosval * v14.__cosval;
          *(double *)(v4 + 8) = v13 * v12.__cosval * v14.__sinval;
          *(double *)(v4 + 16) = v12.__sinval * 0.99330562 * v13;
          *(_BYTE *)(v4 + 44) = 1;
        }
        else
        {
          v140 = v9[1];
          v65 = tan(v10 * 0.00872664626 + 0.785398163);
          v66 = log(v65);
          v67.f64[0] = v140;
          v67.f64[1] = v66;
          __asm { FMOV            V1.2D, #0.5 }
          *(float64x2_t *)(v4 + 24) = vmlaq_f64(_Q1, (float64x2_t)xmmword_19FFB32D0, v67);
          *(_WORD *)(v4 + 45) = 257;
        }
        v73 = *(double *)(v7 + 24 * v8 + 16);
        v74 = v73;
        _ZF = v73 == 1.79769313e308;
        v75 = 3.4028e38;
        if (!_ZF)
          v75 = v74;
        *(float *)(v4 + 40) = v75;
        v76 = md::LabelPoint::mercatorPoint((md::LabelPoint *)v4);
        v77 = *(double *)(v76 + 8);
        v27 = fmin(*(double *)v76, 1.79769313e308);
        v26 = fmax(*(double *)v76, -1.79769313e308);
        v23 = fmin(v77, 1.79769313e308);
        v24 = fmax(v77, -1.79769313e308);
        if (*(unsigned __int16 *)(a1 + 46) >= 2u)
        {
          v78 = v4 + 48;
          v79 = (double *)(v7 + 24 * v8 + 24);
          __asm { FMOV            V0.2D, #0.5 }
          v133 = _Q0;
          v81 = 1;
          do
          {
            if (*(_BYTE *)(a1 + 33))
            {
              v92 = v79[1] * 0.0174532925;
              v93 = __sincos_stret(*v79 * 0.0174532925);
              v94 = 6378137.0 / sqrt(v93.__sinval * v93.__sinval * -0.00669437999 + 1.0);
              v95 = __sincos_stret(v92);
              *(double *)v78 = v94 * v93.__cosval * v95.__cosval;
              *(double *)(v78 + 8) = v94 * v93.__cosval * v95.__sinval;
              *(double *)(v78 + 16) = v93.__sinval * 0.99330562 * v94;
              *(_BYTE *)(v78 + 44) = 1;
            }
            else
            {
              v141 = v79[1];
              v82 = tan(*v79 * 0.00872664626 + 0.785398163);
              v83 = log(v82);
              v84.f64[0] = v141;
              v84.f64[1] = v83;
              *(float64x2_t *)(v78 + 24) = vmlaq_f64(v133, (float64x2_t)xmmword_19FFB32D0, v84);
              *(_WORD *)(v78 + 45) = 257;
            }
            v85 = v79[2];
            v86 = v85;
            _ZF = v85 == 1.79769313e308;
            v87 = 3.4028e38;
            if (!_ZF)
              v87 = v86;
            *(float *)(v78 + 40) = v87;
            v88 = md::LabelPoint::mercatorPoint((md::LabelPoint *)v78);
            v89 = *(double *)(v88 + 8);
            v27 = fmin(*(double *)v88, v27);
            v26 = fmax(v26, *(double *)v88);
            v23 = fmin(v89, v23);
            v24 = fmax(v24, v89);
            v90 = (float64x2_t *)md::LabelPoint::mercatorPoint((md::LabelPoint *)(v78 - 48));
            v91 = vsubq_f64(*v90, *(float64x2_t *)md::LabelPoint::mercatorPoint((md::LabelPoint *)v78));
            *(double *)(a1 + 8) = sqrt(vaddvq_f64(vmulq_f64(v91, v91))) + *(double *)(a1 + 8);
            ++v81;
            v78 += 48;
            v79 += 3;
          }
          while (v81 < *(unsigned __int16 *)(a1 + 46));
        }
        goto LABEL_77;
      }
LABEL_36:
      v26 = -1.79769313e308;
      v27 = 1.79769313e308;
      v23 = 1.79769313e308;
      v24 = -1.79769313e308;
      goto LABEL_77;
    }
  }
  else
  {
    v6 = 1;
    v7 = *(_QWORD *)(a2 + 48);
    if (v7)
      goto LABEL_4;
  }
  v15 = *(unsigned __int8 **)(a2 + 24);
  if (!v15 || (v16 = *v15, v16 == 255))
  {
    v131 = v6;
    if (!*(_WORD *)(a1 + 46))
      goto LABEL_36;
    v56 = *(_QWORD *)(a2 + 32);
    v57 = *(float **)(a2 + 40);
    v58 = *(unsigned int *)(a2 + 56);
    v59 = (float *)(v56 + 8 * v58);
    v60 = *v59;
    v61 = v59[1];
    v62 = *(float *)(a2 + 64);
    if (fabsf(v62) <= 0.00000011921)
    {
      if ((_DWORD)v5 != 1)
        goto LABEL_52;
      v62 = *(float *)(a2 + 68);
      if (fabsf(v62) <= 0.00000011921)
        goto LABEL_52;
      v64 = (float)(*(v59 - 2) - v60) * v62;
      v63 = v59 - 1;
    }
    else
    {
      v63 = v59 + 3;
      v64 = (float)(v59[2] - v60) * v62;
    }
    v60 = v64 + v60;
    v61 = v61 + (float)((float)(*v63 - v61) * v62);
LABEL_52:
    v96 = *(double **)(a2 + 16);
    v97 = v96[2];
    if (v97 >= *v96 && (v98 = v96[3], v99 = v96[1], v98 >= v99))
    {
      v100 = *v96 + (v97 - *v96) * v60;
      v101 = v99 + (v98 - v99) * v61;
    }
    else
    {
      memset_pattern16(&__b, &unk_19FFB63B0, 0x10uLL);
      v100 = __b;
      v101 = v146;
    }
    *(double *)(v4 + 24) = v100;
    *(double *)(v4 + 32) = v101;
    *(_WORD *)(v4 + 45) = 257;
    if (v57)
    {
      v102 = &md::kNoLabelElevation;
      if (*v57 != 3.4028e38)
        v102 = (int *)v57;
    }
    else
    {
      v102 = &md::kNoLabelElevation;
    }
    *(_DWORD *)(v4 + 40) = *v102;
    v27 = fmin(v100, 1.79769313e308);
    v26 = fmax(v100, -1.79769313e308);
    v23 = fmin(v101, 1.79769313e308);
    v24 = fmax(v101, -1.79769313e308);
    if (v5 >= 2)
    {
      v103 = (float32x2_t *)(v56 + 8 * v58 + 8);
      v104 = v57 + 1;
      v105 = 1;
      do
      {
        v110 = *v103;
        if (v105 == v5 - 1)
        {
          v111 = *(float *)(a2 + 68);
          if (fabsf(v111) > 0.00000011921)
            v110 = vmla_n_f32(v110, vsub_f32(v103[-1], v110), v111);
        }
        v112 = *(double **)(a2 + 16);
        v113 = v112[2];
        if (v113 >= *v112 && (v114 = v112[3], v115 = v112[1], v114 >= v115))
        {
          v118 = v110.f32[1];
          v116 = *v112 + (v113 - *v112) * v110.f32[0];
          v117 = v115 + (v114 - v115) * v118;
        }
        else
        {
          memset_pattern16(&__b, &unk_19FFB63B0, 0x10uLL);
          v116 = __b;
          v117 = v146;
        }
        *(double *)(v4 + 72) = v116;
        *(double *)(v4 + 80) = v117;
        *(_WORD *)(v4 + 93) = 257;
        if (v57)
        {
          if (*v104 == 3.4028e38)
            v106 = &md::kNoLabelElevation;
          else
            v106 = (int *)v104;
        }
        else
        {
          v106 = &md::kNoLabelElevation;
        }
        *(_DWORD *)(v4 + 88) = *v106;
        v27 = fmin(v116, v27);
        v26 = fmax(v26, v116);
        v23 = fmin(v117, v23);
        v24 = fmax(v24, v117);
        md::LabelPoint::vectorToPoint((md::LabelPoint *)v4, (const md::LabelPoint *)(v4 + 48), *(unsigned __int8 *)(a1 + 33));
        *(double *)(a1 + 8) = sqrt(v107 * v107 + v108 * v108 + v109 * v109) + *(double *)(a1 + 8);
        ++v105;
        v5 = *(unsigned __int16 *)(a1 + 46);
        ++v103;
        ++v104;
        v4 += 48;
      }
      while (v105 < v5);
    }
LABEL_77:
    if (!v131)
      return;
    goto LABEL_78;
  }
  v142 = vrev64_s32(*(int32x2_t *)(v15 + 4));
  v17 = v15[1];
  v143 = v17;
  v144 = v16;
  if ((_DWORD)v5)
  {
    v18 = *(float **)(a2 + 40);
    v19 = (float *)(*(_QWORD *)(a2 + 32) + 8 * *(unsigned int *)(a2 + 56));
    v135 = v19 + 3;
    v134 = *(float *)(a2 + 64);
    v137 = fabsf(v134);
    v125 = *(float *)(a2 + 68);
    v126 = fabsf(v125);
    v20 = 0;
    v21 = 48 * v5;
    v127 = sqrt(ldexp(2.0943951, -2 * v17) * 4.0538689e13);
    v22 = *(double **)(a2 + 16);
    v23 = 1.79769313e308;
    v24 = -1.79769313e308;
    v136 = v19;
    v25 = v18;
    v26 = -1.79769313e308;
    v27 = 1.79769313e308;
    while (1)
    {
      v37 = *v19;
      v38 = v19[1];
      if (!v20 && v137 > 0.00000011921)
        break;
      if (v21 - 48 == v20 && v126 > 0.00000011921)
      {
        v39 = v125;
        v40 = (float)(*(v19 - 2) - v37) * v125;
        v41 = v19 - 1;
        goto LABEL_21;
      }
LABEL_22:
      v42 = v37;
      v43 = v38;
      v44 = v4 + v20;
      v36 = geo::S2CellCoordinates::xyzFromTileLocalST<double>((uint64_t)&v142, v37, v38) * 6378137.0;
      *(double *)v44 = v36;
      *(double *)(v44 + 8) = v45 * 6378137.0;
      v47 = v46 * 6356752.31;
      *(double *)(v44 + 16) = v47;
      *(_BYTE *)(v44 + 44) = 1;
      v138 = v47;
      v139 = v45 * 6378137.0;
      if (!v18 || *v25 == 3.4028e38)
        v48 = 3.40282347e38;
      else
        v48 = v127 * *v25;
      v49 = v48;
      *(float *)(v44 + 40) = v49;
      v50 = v22[2];
      if (v50 >= *v22 && (v51 = v22[3], v52 = v22[1], v51 >= v52))
      {
        v54 = *v22 + (v50 - *v22) * v42;
        v53 = v52 + (v51 - v52) * v43;
        if (v20)
        {
LABEL_31:
          v55 = v4 + v20;
          if (*(_BYTE *)(v4 + v20 - 4))
          {
            v33 = *(double *)(v55 - 48);
            v34 = *(double *)(v55 - 40);
            v35 = *(double *)(v55 - 32);
          }
          else
          {
            v132 = v36;
            __x = *(double *)(v55 - 24) * 6.28318531;
            v28 = exp(*(double *)(v55 - 16) * 6.28318531 + -3.14159265);
            v130 = atan(v28) * 2.0 + -1.57079633;
            v29 = fmod(__x, 6.28318531);
            __xa = fmod(v29 + 6.28318531, 6.28318531) + -3.14159265;
            v30 = __sincos_stret(v130);
            v31 = 6378137.0 / sqrt(v30.__sinval * v30.__sinval * -0.00669437999 + 1.0);
            v32 = __sincos_stret(__xa);
            v33 = v31 * v30.__cosval * v32.__cosval;
            v34 = v31 * v30.__cosval * v32.__sinval;
            *(double *)(v55 - 48) = v33;
            *(double *)(v55 - 40) = v34;
            v35 = v30.__sinval * 0.99330562 * v31;
            v36 = v132;
            *(double *)(v55 - 32) = v35;
            *(_BYTE *)(v55 - 4) = 1;
          }
          *(double *)(a1 + 8) = sqrt((v33 - v36) * (v33 - v36) + (v34 - v139) * (v34 - v139) + (v35 - v138)
                                                                                             * (v35 - v138))
                              + *(double *)(a1 + 8);
        }
      }
      else
      {
        memset_pattern16(&__b, &unk_19FFB63B0, 0x10uLL);
        v54 = __b;
        v53 = v146;
        if (v20)
          goto LABEL_31;
      }
      v27 = fmin(v54, v27);
      v26 = fmax(v26, v54);
      v23 = fmin(v53, v23);
      v24 = fmax(v24, v53);
      v20 += 48;
      ++v25;
      v19 += 2;
      if (v21 == v20)
        goto LABEL_78;
    }
    v39 = v134;
    v40 = (float)(v136[2] - v37) * v134;
    v41 = v135;
LABEL_21:
    v37 = v40 + v37;
    v38 = v38 + (float)((float)(*v41 - v38) * v39);
    goto LABEL_22;
  }
  v26 = -1.79769313e308;
  v27 = 1.79769313e308;
  v23 = 1.79769313e308;
  v24 = -1.79769313e308;
LABEL_78:
  v119 = *(_QWORD *)(a1 + 24);
  if (!v119)
  {
    v119 = operator new();
    *(_QWORD *)(v119 + 48) = 0;
    *(_OWORD *)v119 = 0u;
    *(int64x2_t *)(v119 + 16) = vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
    *(int64x2_t *)(v119 + 32) = vdupq_n_s64(0xFFEFFFFFFFFFFFFFLL);
    *(_BYTE *)(v119 + 48) = 1;
    v120 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 24) = v119;
    if (v120)
    {
      v121 = *(std::__shared_weak_count **)(v120 + 8);
      if (v121)
      {
        p_shared_owners = (unint64_t *)&v121->__shared_owners_;
        do
          v123 = __ldaxr(p_shared_owners);
        while (__stlxr(v123 - 1, p_shared_owners));
        if (!v123)
        {
          ((void (*)(std::__shared_weak_count *))v121->__on_zero_shared)(v121);
          std::__shared_weak_count::__release_weak(v121);
        }
      }
      MEMORY[0x1A1AF4E00](v120, 0x1020C40457A241BLL);
      v119 = *(_QWORD *)(a1 + 24);
    }
  }
  v124 = *(unsigned __int8 *)(v119 + 48);
  *(double *)(v119 + 16) = v27;
  *(double *)(v119 + 24) = v23;
  *(double *)(v119 + 32) = v26;
  *(double *)(v119 + 40) = v24;
  if (!v124)
    *(_BYTE *)(v119 + 48) = 1;
}

void md::LabelLineSegment::computeRadiusOfCurvature(float *a1, unsigned int a2, double *a3, uint64_t a4)
{
  double v7;
  double v8;
  uint64_t v9;
  size_t v10;
  size_t v11;
  float *v12;
  uint64_t v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  unint64_t v19;
  unint64_t v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float *v26;
  BOOL v27;
  double v28;
  float32x2_t v29;
  float v30;
  float v31;
  unint64_t v32;
  float *v33;
  float *v34;
  float v35;
  float v36;
  uint64_t v37;
  double v38;
  float32x2_t v39;
  float32x2_t v40;
  float32x2_t v41;
  float v42;
  _QWORD v43[2];

  v43[1] = *MEMORY[0x1E0C80C00];
  if (a2 >= 3)
  {
    v7 = a3[2];
    v8 = *a3;
    v9 = a2;
    v10 = 8 * (a2 + 2);
    if (a2 > 0x1FF0)
    {
      v12 = (float *)malloc_type_malloc(v10, 0x100004000313F17uLL);
    }
    else
    {
      MEMORY[0x1E0C80A78](a1);
      v12 = (float *)((char *)v43 - ((v11 + 15) & 0xFFFFFFFF0));
      bzero(v12, v11);
    }
    v13 = 0;
    v14 = a1[2] - *a1;
    v15 = a1[3] - a1[1];
    v16 = 1.0 / sqrtf((float)(v14 * v14) + (float)(v15 * v15));
    v17 = v16 * v14;
    v18 = v16 * v15;
    *v12 = v17;
    v12[1] = v18;
    v12[2] = v17;
    v12[3] = v18;
    v19 = a2 - 1;
    v20 = v19 - 1;
    v21 = v17;
    v22 = v18;
    do
    {
      v29 = vsub_f32(*(float32x2_t *)&a1[v13 + 4], *(float32x2_t *)&a1[v13 + 2]);
      v30 = vaddv_f32(vmul_f32(v29, v29));
      if (v30 > 0.00000011921)
      {
        v31 = sqrtf(v30);
        v21 = v29.f32[0] / v31;
        v22 = v29.f32[1] / v31;
      }
      v23 = v21 + (float)((float)(v17 - v21) * 0.5);
      v24 = v22 + (float)((float)(v18 - v22) * 0.5);
      v25 = 1.0 / sqrtf((float)(v23 * v23) + (float)(v24 * v24));
      v26 = &v12[v13];
      v26[4] = v25 * v23;
      v26[5] = v25 * v24;
      v27 = (float)((float)(v21 * v17) + (float)(v22 * v18)) < 0.7071;
      v28 = 0.00000011920929;
      if (!v27)
        v28 = 0.0;
      *(double *)(a4 + 8 + v13 * 4) = v28;
      v13 += 2;
      v18 = v22;
      v17 = v21;
      --v20;
    }
    while (v20);
    v32 = 0;
    v33 = &v12[2 * v9];
    *v33 = v21;
    v33[1] = v22;
    v34 = &v12[2 * a2 + 2];
    *v34 = v21;
    v34[1] = v22;
    v35 = 1.0;
    v36 = 0.0;
    v37 = 2;
    while (1)
    {
      if (v32 >= v19)
      {
        v40 = *(float32x2_t *)&v12[v37 + 2];
        v41 = vsub_f32(v40, *(float32x2_t *)&v12[v37]);
        v40.i32[0] = 1.0;
      }
      else
      {
        v39 = vsub_f32(*(float32x2_t *)&a1[v37], *(float32x2_t *)&a1[v37 - 2]);
        v40 = vmul_f32(v39, v39);
        v40.f32[0] = sqrtf(vaddv_f32(v40));
        v41 = vsub_f32(*(float32x2_t *)&v12[v37 + 2], *(float32x2_t *)&v12[v37]);
        if (v40.f32[0] <= 0.00000011921)
          goto LABEL_20;
      }
      v41 = vdiv_f32(v41, (float32x2_t)vdup_lane_s32((int32x2_t)v40, 0));
LABEL_20:
      v42 = sqrtf(vaddv_f32(vmul_f32(v41, v41)));
      if (*(double *)(a4 + 8 * v32) == 0.0)
      {
        if (v40.f32[0] >= v35)
          v36 = v42;
        if (v36 > 0.00000011921)
          v38 = (v7 - v8) / v36;
        else
          v38 = 1.79769313e308;
        *(double *)(a4 + 8 * v32) = v38;
      }
      ++v32;
      v37 += 2;
      v36 = v42;
      v35 = v40.f32[0];
      if (v9 == v32)
      {
        if (a2 >= 0x1FF1)
          free(v12);
        return;
      }
    }
  }
}

void md::LabelLineZSet::connectEntries(unsigned __int8 *a1, int a2, uint64_t *a3, double a4)
{
  uint64_t v7;
  double v8;
  unsigned __int8 v9;
  uint64_t v10;
  uint64_t v11;
  double v12;
  uint64_t v13;
  uint64_t v14;
  _WORD *v15;
  unint64_t v16;
  char *v17;
  char *v18;
  unint64_t v19;
  unint64_t v20;
  _WORD *v21;
  int v22;
  uint64_t *v23;
  md::LabelPoint *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  unsigned __int8 v29;
  int v30;
  unint64_t v31;
  uint64_t v32;
  double v33;
  unint64_t v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  uint64_t v43;
  uint64_t *v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  int v49;
  uint64_t v50;
  _BOOL4 v51;
  const md::LabelPoint *v52;
  const md::LabelPoint *v53;
  const md::LabelPoint *v54;
  double v55;
  double v56;
  double v57;
  double v58;
  uint64_t v59;
  unint64_t v60;
  unint64_t v61;
  char *v62;
  unint64_t *v63;
  char *v64;
  char *v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  unint64_t v71;
  _WORD *v72;
  _BYTE *v73;
  int v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  _WORD *v79;
  uint64_t v80;
  uint64_t v81;
  double *v82;
  double *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  unint64_t v89;
  char *v90;
  char *v91;
  char *v92;
  char *v93;
  char *i;
  uint64_t v95;
  uint64_t v96;
  _WORD *v97;
  _WORD *v98;
  int v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  unsigned __int8 *v107;
  BOOL v108;
  unsigned __int8 *v109;
  unsigned __int8 *v110;
  _BOOL4 isWithinEpsilon;
  uint64_t v112;
  uint64_t v113;
  unint64_t v114;
  float v115;
  unsigned __int8 *v116;
  uint64_t v117;
  unsigned __int8 *v118;
  float v119;
  float v120;
  float v121;
  float v122;
  float v123;
  float v124;
  float v125;
  float v126;
  BOOL v127;
  float v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  int v135;
  uint64_t v136;
  uint64_t v137;
  unsigned __int8 v138;
  uint64_t v139;
  _QWORD *v140;
  unsigned __int8 v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  unint64_t v146;
  unint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  unint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  unint64_t v158;
  unint64_t v159;
  unint64_t v160;
  unsigned __int8 *v161;
  unint64_t v162;
  uint64_t v163;
  uint64_t *v164;
  uint64_t v165;
  unint64_t v166;
  unint64_t v167;
  _BYTE *v168;
  int v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  _OWORD *v173;
  __int128 *v174;
  uint64_t v175;
  __int128 v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  __int128 *v182;
  __int128 *v183;
  unint64_t v184;
  uint64_t v185;
  uint64_t v186;
  _QWORD *v187;
  unint64_t v188;
  _QWORD *v189;
  uint64_t v190;
  unint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  _QWORD *v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  unint64_t v200;
  _QWORD *v201;
  uint64_t v202;
  _OWORD *v203;
  __int128 *v204;
  uint64_t v205;
  __int128 v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  char *v210;
  char *v211;
  uint64_t v212;
  unint64_t v213;
  uint64_t v214;
  uint64_t v215;
  __int128 *v216;
  uint64_t v217;
  uint64_t v218;
  unint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  char *v224;
  char *v225;
  _OWORD *v226;
  _OWORD *v227;
  uint64_t v228;
  _OWORD *v229;
  _OWORD *v230;
  __int128 *v231;
  __int128 *v232;
  _OWORD *v233;
  __int128 *j;
  __int128 v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  _OWORD *v239;
  _OWORD *v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t *v243;
  uint64_t *v244;
  uint64_t v245;
  uint64_t v246;
  _BYTE *v247;
  int v248;
  uint64_t k;
  int v250;
  uint64_t v251;
  _BYTE *v252;
  int v253;
  uint64_t v254;
  int v255;
  unint64_t v256;
  double v257;
  uint64_t v258;
  uint64_t *v259;
  uint64_t v260;
  double v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  double v265;
  double v266;
  double v267;
  double v268;
  uint64_t *v269;
  unint64_t v270;
  _QWORD *v271;
  uint64_t v272;
  uint64_t v273;
  unint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t *v278;
  uint64_t v279;
  char *v280;
  char *v281;
  unint64_t v282;
  char *v283;
  uint64_t v284;
  unint64_t v285;
  uint64_t v286;
  uint64_t *v287;
  char *v288;
  uint64_t v289;
  __int128 v290;
  __int128 v291;
  uint64_t v292;
  char *v293;
  unsigned __int8 v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  geo::read_write_lock *v301;
  const char *v302;
  malloc_zone_t *v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  unsigned __int8 v307;
  uint64_t v308;
  int v309;
  uint64_t v310;
  geo::read_write_lock *v311;
  const char *v312;
  malloc_zone_t *zone;
  int v314;
  uint64_t v315;
  geo::read_write_lock *v316;
  const char *v317;
  malloc_zone_t *v318;
  int v319;
  uint64_t v320;
  geo::read_write_lock *v321;
  const char *v322;
  malloc_zone_t *v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t m;
  uint64_t v327;
  uint64_t v328;
  uint64_t *v329;
  uint64_t v330;
  int v331;
  char *v332;
  char *v333;
  __int128 **v334;
  _QWORD *v335;
  _QWORD *v336;
  md::LabelPoint *v337;
  uint64_t v338;
  uint64_t v339;
  uint64_t v340;
  uint64_t v341;
  uint64_t v342;
  uint64_t v343;
  uint64_t v344;
  int v345;
  unint64_t v346;
  float v347;
  unint64_t v348;
  float v349;

  v7 = (uint64_t)a1;
  v8 = ldexp(1.0, *a1);
  v339 = 0;
  v340 = 0;
  v341 = 0;
  {
    v328 = operator new();
    mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v328, "VectorKitLabels", 0x5ED09DD50000000FLL);
  }
  v342 = mdm::Allocator::instance(void)::alloc;
  v329 = a3;
  v11 = *a3;
  v10 = a3[1];
  v331 = a2;
  v338 = v7;
  if (v11 != v10)
  {
    v12 = 0.001 / v8;
    do
    {
      md::LabelLineZSet::connectedSegmentInsert(v7, &v339, v11, 1, a4);
      md::LabelLineZSet::connectedSegmentInsert(v7, &v339, v11, 0, a4);
      v11 += 136;
    }
    while (v11 != v10);
    v13 = v339;
    v14 = v340;
    if (v339 != v340)
    {
      v330 = v340;
      do
      {
        v15 = *(_WORD **)(v13 + 48);
        v16 = *(_QWORD *)(v13 + 56);
        if (v16 - (unint64_t)v15 >= 0x20)
        {
          if (a2)
          {
            v17 = 0;
            v18 = 0;
            v332 = 0;
            v19 = 0;
            while (1)
            {
              v21 = &v15[8 * v19];
              if (*((_BYTE *)v21 + 9))
              {
                v20 = v19 + 1;
                goto LABEL_12;
              }
              v22 = *((unsigned __int8 *)v21 + 8);
              v23 = *(uint64_t **)v21;
              v24 = (md::LabelPoint *)(v23 + 4);
              v25 = *v23;
              if (!v22)
                v24 = (md::LabelPoint *)(v23 + 10);
              v337 = v24;
              v26 = v338;
              if (!v25)
              {
                v27 = v23[1];
                if (!v27)
                  goto LABEL_23;
                if (v22)
                  v28 = *(uint64_t **)(v27 + 24);
                else
                  v28 = (uint64_t *)(*(_QWORD *)(v27 + 32) - 16);
                v25 = *v28;
              }
              v29 = *(_BYTE *)(v25 + 38);
              if (v29 == 0xFF)
LABEL_23:
                v29 = 101;
              v20 = v19 + 1;
              if (v19 + 1 >= (uint64_t)(v16 - (_QWORD)v15) >> 4)
                goto LABEL_12;
              v333 = v17;
              v30 = 0;
              v31 = 0;
              v32 = 16 * v19;
              v33 = 1.79769313e308;
              v34 = v19 + 1;
              do
              {
                if (!HIBYTE(v15[(unint64_t)v32 / 2 + 12]))
                {
                  v35 = md::LabelLineStitchSegment::direction(*(md::LabelLineStitchSegment **)&v15[8 * v19], LOBYTE(v15[8 * v19 + 4]), *(unsigned __int8 *)(v26 + 4));
                  v37 = v36;
                  v39 = v38;
                  v40 = md::LabelLineStitchSegment::direction(*(md::LabelLineStitchSegment **)(*(_QWORD *)(v13 + 48) + v32 + 16), *(unsigned __int8 *)(*(_QWORD *)(v13 + 48) + v32 + 24), *(unsigned __int8 *)(v26 + 4));
                  if ((float)((float)((float)(v40 * v35) + (float)(v41 * v37)) + (float)(v42 * v39)) <= 0.0)
                  {
                    v43 = *(_QWORD *)(v13 + 48) + v32;
                    v44 = *(uint64_t **)(v43 + 16);
                    v45 = *(unsigned __int8 *)(v43 + 24);
                    v46 = *v44;
                    if (*v44)
                      goto LABEL_37;
                    v47 = v44[1];
                    if (v47)
                    {
                      if (v45)
                        v48 = *(uint64_t **)(v47 + 24);
                      else
                        v48 = (uint64_t *)(*(_QWORD *)(v47 + 32) - 16);
                      v46 = *v48;
LABEL_37:
                      v49 = *(unsigned __int8 *)(v46 + 38);
                    }
                    else
                    {
                      v49 = 255;
                    }
                    if ((v30 & (v49 != v29)) != 0)
                    {
                      v30 = 1;
                      goto LABEL_27;
                    }
                    v50 = v26;
                    v51 = v49 != v29;
                    v52 = (const md::LabelPoint *)(v44 + 4);
                    v53 = (const md::LabelPoint *)(v44 + 10);
                    if (v45)
                      v54 = v52;
                    else
                      v54 = v53;
                    md::LabelPoint::vectorToPoint(v337, v54, *(unsigned __int8 *)(v50 + 4));
                    v58 = v55 * v55 + v56 * v56 + v57 * v57;
                    if (((v30 | v51) & 1) != 0)
                    {
                      if (v58 >= v33)
                        goto LABEL_47;
                    }
                    else
                    {
                      v30 = 1;
                    }
                    v31 = v34;
                    v33 = v58;
LABEL_47:
                    v26 = v338;
                  }
                }
LABEL_27:
                ++v34;
                v15 = *(_WORD **)(v13 + 48);
                v16 = *(_QWORD *)(v13 + 56);
                v32 += 16;
              }
              while (v34 < (uint64_t)(v16 - (_QWORD)v15) >> 4);
              if (!v31)
              {
                v17 = v333;
                goto LABEL_12;
              }
              HIBYTE(v15[8 * v19 + 4]) = 1;
              HIBYTE(v15[8 * v31 + 4]) = 1;
              v17 = v333;
              if (v18 < v332)
              {
                *(_QWORD *)v18 = v19;
                *((_QWORD *)v18 + 1) = v31;
                v18 += 16;
                goto LABEL_67;
              }
              v59 = (v18 - v333) >> 4;
              v60 = v59 + 1;
              if ((unint64_t)(v59 + 1) >> 60)
                abort();
              if ((v332 - v333) >> 3 > v60)
                v60 = (v332 - v333) >> 3;
              if ((unint64_t)(v332 - v333) >= 0x7FFFFFFFFFFFFFF0)
                v61 = 0xFFFFFFFFFFFFFFFLL;
              else
                v61 = v60;
              if (v61 >> 60)
                goto LABEL_422;
              v62 = (char *)operator new(16 * v61);
              v63 = (unint64_t *)&v62[16 * v59];
              *v63 = v19;
              v63[1] = v31;
              if (v18 == v333)
              {
                v65 = &v62[16 * v59];
              }
              else
              {
                v64 = &v62[16 * v59];
                do
                {
                  v65 = v64 - 16;
                  *((_OWORD *)v64 - 1) = *((_OWORD *)v18 - 1);
                  v18 -= 16;
                  v64 -= 16;
                }
                while (v18 != v333);
              }
              v332 = &v62[16 * v61];
              v18 = (char *)(v63 + 2);
              if (v333)
                operator delete(v333);
              v17 = v65;
LABEL_67:
              v15 = *(_WORD **)(v13 + 48);
              v16 = *(_QWORD *)(v13 + 56);
LABEL_12:
              v19 = v20;
              if (v20 >= ((uint64_t)(v16 - (_QWORD)v15) >> 4) - 1)
                goto LABEL_110;
            }
          }
          v66 = 126 - 2 * __clz((uint64_t)(v16 - (_QWORD)v15) >> 4);
          if ((_WORD *)v16 == v15)
            v67 = 0;
          else
            v67 = v66;
          std::__introsort<std::_ClassicAlgPolicy,md::LabelLineZSet::connectTileLabelLineSegments(std::vector<md::SegmentConnectionEntry,geo::StdAllocator<md::SegmentConnectionEntry,mdm::Allocator>> &,double,std::vector<std::pair<unsigned long,unsigned long>> &)::$_0 &,md::SegmentConnectionEntry*,false>(v15, v16, v67, 1);
          v15 = *(_WORD **)(v13 + 48);
          v68 = *(_QWORD *)(v13 + 56);
          if (v68 - (_QWORD)v15 != 16)
          {
            v17 = 0;
            v18 = 0;
            v69 = 0;
            v70 = 0;
            do
            {
              v72 = &v15[8 * v70];
              v74 = *((unsigned __int8 *)v72 + 9);
              v73 = (char *)v72 + 9;
              if (v74)
              {
                v71 = v70 + 1;
              }
              else
              {
                v75 = (v68 - (uint64_t)v15) >> 4;
                v71 = v70 + 1;
                if (v70 + 1 < v75)
                {
                  v76 = 8 * v70;
                  v77 = v70 - v75;
                  v78 = 1;
                  while (1)
                  {
                    v79 = &v15[v76];
                    if (!HIBYTE(v15[v76 + 12]) && LOBYTE(v15[8 * v70 + 4]) != *((unsigned __int8 *)v79 + 24))
                    {
                      v80 = *(_QWORD *)(*(_QWORD *)&v15[8 * v70] + 8);
                      v81 = *(_QWORD *)(*((_QWORD *)v79 + 2) + 8);
                      if (*(_BYTE *)(v80 + 60)
                        || *(_BYTE *)(v81 + 60)
                        || *(_QWORD *)(*(_QWORD *)(v80 + 16) + 24) == *(_QWORD *)(*(_QWORD *)(v81 + 16) + 24))
                      {
                        v82 = *(double **)(v80 + 16);
                        v83 = *(double **)(v81 + 16);
                        if (vabdd_f64(*v82, *v83) <= v12)
                        {
                          v84 = LOBYTE(v15[8 * v70 + 4]) ? 8 : 16;
                          v85 = *((_BYTE *)v79 + 24) ? 8 : 16;
                          if (vabdd_f64(*(double *)((char *)v82 + v84), *(double *)((char *)v83 + v85)) <= v12 / *v82)
                            break;
                        }
                      }
                    }
                    ++v78;
                    v76 += 8;
                    if (!(v77 + v78))
                      goto LABEL_74;
                  }
                  v86 = v70 + v78;
                  *v73 = 1;
                  *((_BYTE *)v79 + 25) = 1;
                  if (v18 >= v69)
                  {
                    v87 = (v18 - v17) >> 4;
                    v88 = v87 + 1;
                    if ((unint64_t)(v87 + 1) >> 60)
                      abort();
                    if ((v69 - v17) >> 3 > v88)
                      v88 = (v69 - v17) >> 3;
                    if ((unint64_t)(v69 - v17) >= 0x7FFFFFFFFFFFFFF0)
                      v89 = 0xFFFFFFFFFFFFFFFLL;
                    else
                      v89 = v88;
                    if (v89 >> 60)
LABEL_422:
                      std::__throw_bad_array_new_length[abi:nn180100]();
                    v90 = (char *)operator new(16 * v89);
                    v91 = &v90[16 * v87];
                    *(_QWORD *)v91 = v70;
                    *((_QWORD *)v91 + 1) = v86;
                    if (v18 == v17)
                    {
                      v93 = &v90[16 * v87];
                    }
                    else
                    {
                      v92 = &v90[16 * v87];
                      do
                      {
                        v93 = v92 - 16;
                        *((_OWORD *)v92 - 1) = *((_OWORD *)v18 - 1);
                        v18 -= 16;
                        v92 -= 16;
                      }
                      while (v18 != v17);
                    }
                    v69 = &v90[16 * v89];
                    v18 = v91 + 16;
                    if (v17)
                      operator delete(v17);
                    v17 = v93;
                  }
                  else
                  {
                    *(_QWORD *)v18 = v70;
                    *((_QWORD *)v18 + 1) = v86;
                    v18 += 16;
                  }
                  v15 = *(_WORD **)(v13 + 48);
                  v68 = *(_QWORD *)(v13 + 56);
                }
              }
LABEL_74:
              v70 = v71;
            }
            while (v71 < ((v68 - (uint64_t)v15) >> 4) - 1);
LABEL_110:
            for (i = v17; i != v18; *(_QWORD *)(v100 + v103) = v101)
            {
              v95 = *(_QWORD *)i;
              v96 = *((_QWORD *)i + 1);
              i += 16;
              v97 = &v15[8 * v95];
              v98 = &v15[8 * v96];
              v99 = *((unsigned __int8 *)v97 + 8);
              v100 = *(_QWORD *)v98;
              v101 = *(_QWORD *)v97;
              if (v99)
                v102 = 16;
              else
                v102 = 24;
              *(_QWORD *)(v101 + v102) = v100;
              if (*((_BYTE *)v98 + 8))
                v103 = 16;
              else
                v103 = 24;
            }
            a2 = v331;
            v7 = v338;
            v14 = v330;
            if (v17)
              operator delete(v17);
          }
        }
        v13 += 80;
      }
      while (v13 != v14);
    }
  }
  v105 = *v329;
  v104 = v329[1];
  if (*v329 != v104)
  {
    while (1)
    {
      while (*(_BYTE *)(v105 + 129))
      {
        v105 += 136;
        if (v105 == v104)
          goto LABEL_414;
      }
      *(_WORD *)(v105 + 128) = 257;
      v106 = *(_QWORD *)(v105 + 24);
      v107 = (unsigned __int8 *)v105;
      if (!v106)
        goto LABEL_163;
      v108 = 0;
      v109 = (unsigned __int8 *)v105;
      while (1)
      {
        v107 = (unsigned __int8 *)v106;
        v110 = *(unsigned __int8 **)(v106 + 16);
        if (v110 == *((unsigned __int8 **)v107 + 3))
          break;
        isWithinEpsilon = v110 == v109;
        if (v107[129])
          goto LABEL_138;
LABEL_133:
        v107[128] = isWithinEpsilon;
        v107[129] = 1;
        v108 = !isWithinEpsilon;
        if (isWithinEpsilon)
          v113 = 24;
        else
          v113 = 16;
        v106 = *(_QWORD *)&v107[v113];
        v109 = v107;
        if (!v106)
          goto LABEL_163;
      }
      if (v108)
        v112 = 32;
      else
        v112 = 80;
      isWithinEpsilon = md::LabelPoint::isWithinEpsilon((md::LabelPoint *)&v109[v112], (const md::LabelPoint *)(v107 + 32), a4, *(unsigned __int8 *)(v7 + 4));
      if (!v107[129])
        goto LABEL_133;
LABEL_138:
      v114 = 0;
      v115 = -1.0;
      v107 = v109;
      v116 = v109;
      while (1)
      {
        if (v116[128])
          v117 = 24;
        else
          v117 = 16;
        v118 = *(unsigned __int8 **)&v116[v117];
        v119 = md::LabelLineStitchSegment::direction((md::LabelLineStitchSegment *)v116, v116[128] == 0, *(unsigned __int8 *)(v338 + 4));
        v121 = v120;
        v123 = v122;
        v348 = __PAIR64__(LODWORD(v120), LODWORD(v119));
        v349 = v122;
        v124 = md::LabelLineStitchSegment::direction((md::LabelLineStitchSegment *)v118, v118[128], *(unsigned __int8 *)(v338 + 4));
        v346 = __PAIR64__(LODWORD(v125), LODWORD(v124));
        v347 = v126;
        v344 = 0;
        v345 = 0;
        if (v348)
          v127 = 0;
        else
          v127 = LODWORD(v349) == 0;
        if (!v127)
        {
          v343 = 0;
          if (v346 || LODWORD(v347) != 0)
          {
            v129 = (float)((float)(v124 * v119) + (float)(v125 * v121)) + (float)(v126 * v123);
            if (v129 > v115)
              v107 = v116;
            v115 = fmaxf(v129, v115);
          }
        }
        if (v114 > 0x3E7)
          break;
        ++v114;
        v116 = v118;
        if (v118 == v109)
          goto LABEL_156;
      }
      v107 = v109;
LABEL_156:
      if (v107[128])
        v130 = 24;
      else
        v130 = 16;
      v131 = *(_QWORD *)&v107[v130];
      *(_QWORD *)&v107[v130] = 0;
      if (*(_BYTE *)(v131 + 128))
        v132 = 16;
      else
        v132 = 24;
      *(_QWORD *)(v131 + v132) = 0;
      v7 = v338;
LABEL_163:
      *(_BYTE *)(v105 + 129) = 1;
      if (*(_BYTE *)(v105 + 128))
        v133 = 16;
      else
        v133 = 24;
      v134 = *(_QWORD *)(v105 + v133);
      if (v134)
      {
        v135 = v331;
        do
        {
          v136 = v105;
          v105 = v134;
          v127 = *(_QWORD *)(v134 + 24) == v136;
          *(_BYTE *)(v134 + 128) = v127;
          *(_BYTE *)(v134 + 129) = 1;
          if (v127)
            v137 = 16;
          else
            v137 = 24;
          v134 = *(_QWORD *)(v105 + v137);
        }
        while (v134);
        if (!v107)
          goto LABEL_396;
      }
      else
      {
        v135 = v331;
      }
      {
        v308 = operator new();
        mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v308, "VectorKitLabels", 0x5ED09DD50000000FLL);
      }
      v139 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc
                                                                  + 16))(mdm::Allocator::instance(void)::alloc, 136, 8);
      *(_WORD *)v139 = *(_WORD *)(v7 + 2);
      *(_BYTE *)(v139 + 2) = v135;
      *(_QWORD *)(v139 + 8) = 0;
      v140 = (_QWORD *)(v139 + 8);
      *(_QWORD *)(v139 + 16) = 0;
      *(_QWORD *)(v139 + 24) = 0;
      if ((v141 & 1) == 0)
      {
        v140 = (_QWORD *)(v139 + 8);
        if (v309)
        {
          v310 = operator new();
          *(_QWORD *)(v310 + 16) = 0x5ED09DD50000000FLL;
          *(_QWORD *)(v310 + 24) = "VectorKitLabels";
          *(_OWORD *)(v310 + 32) = xmmword_19FFB2E80;
          *(_QWORD *)v310 = &off_1E42B5668;
          *(_QWORD *)(v310 + 8) = "VectorKitLabels";
          *(_OWORD *)(v310 + 72) = 0u;
          *(_OWORD *)(v310 + 88) = 0u;
          *(_OWORD *)(v310 + 104) = 0u;
          *(_OWORD *)(v310 + 120) = 0u;
          *(_OWORD *)(v310 + 136) = 0u;
          *(_OWORD *)(v310 + 152) = 0u;
          *(_OWORD *)(v310 + 168) = 0u;
          *(_OWORD *)(v310 + 184) = 0u;
          *(_OWORD *)(v310 + 200) = 0u;
          *(_OWORD *)(v310 + 216) = 0u;
          *(_OWORD *)(v310 + 232) = 0u;
          *(_QWORD *)(v310 + 248) = 0;
          *(_OWORD *)(v310 + 56) = 0u;
          v311 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v310 + 56), 0);
          if ((_DWORD)v311)
            geo::read_write_lock::logFailure(v311, (uint64_t)"initialization", v312);
          zone = malloc_create_zone(0, 0);
          *(_QWORD *)(v310 + 48) = zone;
          malloc_set_zone_name(zone, "VectorKitLabels");
          *(_QWORD *)(v310 + 256) = os_log_create("com.apple.VectorKit", "Memory");
          mdm::Allocator::instance(void)::alloc = v310;
          v135 = v331;
          v7 = v338;
          v140 = (_QWORD *)(v139 + 8);
        }
      }
      v142 = mdm::Allocator::instance(void)::alloc;
      *(_QWORD *)(v139 + 40) = 0;
      *(_QWORD *)(v139 + 32) = v142;
      *(_QWORD *)(v139 + 48) = 0;
      *(_QWORD *)(v139 + 56) = 0;
      if ((v142 & 1) == 0)
      {
        v335 = v140;
        v140 = v335;
        if (v314)
        {
          v315 = operator new();
          *(_QWORD *)(v315 + 16) = 0x5ED09DD50000000FLL;
          *(_QWORD *)(v315 + 24) = "VectorKitLabels";
          *(_OWORD *)(v315 + 32) = xmmword_19FFB2E80;
          *(_QWORD *)v315 = &off_1E42B5668;
          *(_QWORD *)(v315 + 8) = "VectorKitLabels";
          *(_OWORD *)(v315 + 72) = 0u;
          *(_OWORD *)(v315 + 88) = 0u;
          *(_OWORD *)(v315 + 104) = 0u;
          *(_OWORD *)(v315 + 120) = 0u;
          *(_OWORD *)(v315 + 136) = 0u;
          *(_OWORD *)(v315 + 152) = 0u;
          *(_OWORD *)(v315 + 168) = 0u;
          *(_OWORD *)(v315 + 184) = 0u;
          *(_OWORD *)(v315 + 200) = 0u;
          *(_OWORD *)(v315 + 216) = 0u;
          *(_OWORD *)(v315 + 232) = 0u;
          *(_QWORD *)(v315 + 248) = 0;
          *(_OWORD *)(v315 + 56) = 0u;
          v316 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v315 + 56), 0);
          if ((_DWORD)v316)
            geo::read_write_lock::logFailure(v316, (uint64_t)"initialization", v317);
          v318 = malloc_create_zone(0, 0);
          *(_QWORD *)(v315 + 48) = v318;
          malloc_set_zone_name(v318, "VectorKitLabels");
          *(_QWORD *)(v315 + 256) = os_log_create("com.apple.VectorKit", "Memory");
          mdm::Allocator::instance(void)::alloc = v315;
          v135 = v331;
          v7 = v338;
          v140 = v335;
        }
      }
      v143 = mdm::Allocator::instance(void)::alloc;
      *(_QWORD *)(v139 + 72) = 0;
      *(_QWORD *)(v139 + 64) = v143;
      *(_QWORD *)(v139 + 80) = 0;
      *(_QWORD *)(v139 + 88) = 0;
      if ((v143 & 1) == 0)
      {
        v336 = v140;
        v140 = v336;
        if (v319)
        {
          v320 = operator new();
          *(_QWORD *)(v320 + 16) = 0x5ED09DD50000000FLL;
          *(_QWORD *)(v320 + 24) = "VectorKitLabels";
          *(_OWORD *)(v320 + 32) = xmmword_19FFB2E80;
          *(_QWORD *)v320 = &off_1E42B5668;
          *(_QWORD *)(v320 + 8) = "VectorKitLabels";
          *(_OWORD *)(v320 + 72) = 0u;
          *(_OWORD *)(v320 + 88) = 0u;
          *(_OWORD *)(v320 + 104) = 0u;
          *(_OWORD *)(v320 + 120) = 0u;
          *(_OWORD *)(v320 + 136) = 0u;
          *(_OWORD *)(v320 + 152) = 0u;
          *(_OWORD *)(v320 + 168) = 0u;
          *(_OWORD *)(v320 + 184) = 0u;
          *(_OWORD *)(v320 + 200) = 0u;
          *(_OWORD *)(v320 + 216) = 0u;
          *(_OWORD *)(v320 + 232) = 0u;
          *(_QWORD *)(v320 + 248) = 0;
          *(_OWORD *)(v320 + 56) = 0u;
          v321 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v320 + 56), 0);
          if ((_DWORD)v321)
            geo::read_write_lock::logFailure(v321, (uint64_t)"initialization", v322);
          v323 = malloc_create_zone(0, 0);
          *(_QWORD *)(v320 + 48) = v323;
          malloc_set_zone_name(v323, "VectorKitLabels");
          *(_QWORD *)(v320 + 256) = os_log_create("com.apple.VectorKit", "Memory");
          mdm::Allocator::instance(void)::alloc = v320;
          v135 = v331;
          v7 = v338;
          v140 = v336;
        }
      }
      v144 = mdm::Allocator::instance(void)::alloc;
      *(_OWORD *)(v139 + 104) = 0u;
      *(_QWORD *)(v139 + 96) = v144;
      *(_OWORD *)(v139 + 120) = 0u;
      if (v135 != 1)
      {
        v145 = v139 + 40;
        if (v135)
          goto LABEL_301;
        v334 = (__int128 **)v140;
        v146 = 0;
        v147 = 0;
        v148 = v105;
        do
        {
          v147 += (uint64_t)(*(_QWORD *)(*(_QWORD *)(v148 + 8) + 32) - *(_QWORD *)(*(_QWORD *)(v148 + 8) + 24)) >> 4;
          ++v146;
          if (*(_BYTE *)(v148 + 128))
            v149 = 24;
          else
            v149 = 16;
          v148 = *(_QWORD *)(v148 + v149);
        }
        while (v148);
        v150 = *(_QWORD *)(v139 + 40);
        if (v146 <= (*(_QWORD *)(v139 + 56) - v150) >> 3)
          goto LABEL_219;
        if (v146 >> 61)
          goto LABEL_430;
        v151 = *(_QWORD *)(v139 + 48);
        v152 = (*(uint64_t (**)(_QWORD, unint64_t, uint64_t))(**(_QWORD **)(v139 + 64) + 16))(*(_QWORD *)(v139 + 64), 8 * v146, 8);
        v153 = v151 - v150;
        v154 = v152 + ((v151 - v150) & 0xFFFFFFFFFFFFFFF8);
        v156 = *(_QWORD *)(v139 + 40);
        v155 = *(_QWORD *)(v139 + 48);
        v157 = v155 - v156;
        if (v155 == v156)
        {
          v159 = v152 + ((v151 - v150) & 0xFFFFFFFFFFFFFFF8);
        }
        else
        {
          v158 = v157 - 8;
          if ((unint64_t)(v157 - 8) < 0x58)
          {
            v159 = v152 + ((v151 - v150) & 0xFFFFFFFFFFFFFFF8);
            goto LABEL_215;
          }
          v159 = v152 + ((v151 - v150) & 0xFFFFFFFFFFFFFFF8);
          if (v155 - ((v153 & 0xFFFFFFFFFFFFFFF8) + v152) < 0x20)
            goto LABEL_433;
          v171 = v153 >> 3;
          v172 = (v158 >> 3) + 1;
          v173 = (_OWORD *)(v152 + 8 * v171 - 16);
          v174 = (__int128 *)(v155 - 16);
          v175 = v172 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v176 = *v174;
            *(v173 - 1) = *(v174 - 1);
            *v173 = v176;
            v173 -= 2;
            v174 -= 2;
            v175 -= 4;
          }
          while (v175);
          v159 = v154 - 8 * (v172 & 0x3FFFFFFFFFFFFFFCLL);
          v155 -= 8 * (v172 & 0x3FFFFFFFFFFFFFFCLL);
          if (v172 != (v172 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_433:
            do
            {
LABEL_215:
              v177 = *(_QWORD *)(v155 - 8);
              v155 -= 8;
              *(_QWORD *)(v159 - 8) = v177;
              v159 -= 8;
            }
            while (v155 != v156);
          }
          v155 = *(_QWORD *)(v139 + 40);
        }
        *(_QWORD *)(v139 + 40) = v159;
        *(_QWORD *)(v139 + 48) = v154;
        v178 = *(_QWORD *)(v139 + 56);
        *(_QWORD *)(v139 + 56) = v152 + 8 * v146;
        if (v155)
          (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v139 + 64) + 40))(*(_QWORD *)(v139 + 64), v155, v178 - v155);
LABEL_219:
        v179 = *(_QWORD *)(v139 + 8);
        if (v147 <= (*(_QWORD *)(v139 + 24) - v179) >> 4)
          goto LABEL_230;
        if (v147 >> 60)
LABEL_430:
          abort();
        v180 = *(_QWORD *)(v139 + 16);
        v181 = (*(uint64_t (**)(_QWORD, unint64_t, uint64_t))(**(_QWORD **)(v139 + 32) + 16))(*(_QWORD *)(v139 + 32), 16 * v147, 8);
        v183 = *(__int128 **)(v139 + 8);
        v182 = *(__int128 **)(v139 + 16);
        v184 = v181 + ((v180 - v179) & 0xFFFFFFFFFFFFFFF0);
        if (v182 != v183)
        {
          do
          {
            *(_OWORD *)(v184 - 16) = *(v182 - 1);
            v184 -= 16;
            --v182;
          }
          while (v182 != v183);
          v182 = *v334;
        }
        *(_QWORD *)(v139 + 8) = v184;
        *(_QWORD *)(v139 + 16) = v181 + ((v180 - v179) & 0xFFFFFFFFFFFFFFF0);
        v185 = *(_QWORD *)(v139 + 24);
        *(_QWORD *)(v139 + 24) = v181 + 16 * v147;
        if (v182)
          (*(void (**)(_QWORD, __int128 *, uint64_t))(**(_QWORD **)(v139 + 32) + 40))(*(_QWORD *)(v139 + 32), v182, v185 - (_QWORD)v182);
LABEL_230:
        while (2)
        {
          v187 = *(_QWORD **)(v139 + 48);
          v188 = *(_QWORD *)(v139 + 56);
          if ((unint64_t)v187 < v188)
          {
            if (v187)
              *v187 = *(_QWORD *)(v105 + 8);
            v189 = v187 + 1;
            goto LABEL_257;
          }
          v190 = ((uint64_t)v187 - *(_QWORD *)v145) >> 3;
          v191 = v190 + 1;
          if ((unint64_t)(v190 + 1) >> 61)
            abort();
          v192 = v188 - *(_QWORD *)v145;
          if (v192 >> 2 > v191)
            v191 = v192 >> 2;
          if ((unint64_t)v192 >= 0x7FFFFFFFFFFFFFF8)
            v193 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v193 = v191;
          if (v193)
          {
            v194 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v139 + 64) + 16))(*(_QWORD *)(v139 + 64), 8 * v193, 8);
            v195 = (_QWORD *)(v194 + 8 * v190);
            v196 = v194 + 8 * v193;
            if (v194)
              *v195 = *(_QWORD *)(v105 + 8);
          }
          else
          {
            v196 = 0;
            v195 = (_QWORD *)(8 * v190);
          }
          v198 = *(_QWORD *)(v139 + 40);
          v197 = *(_QWORD *)(v139 + 48);
          v199 = v197 - v198;
          if (v197 == v198)
          {
            v201 = v195;
            goto LABEL_255;
          }
          v200 = v199 - 8;
          if ((unint64_t)(v199 - 8) < 0x38)
          {
            v201 = v195;
          }
          else
          {
            v201 = v195;
            if ((unint64_t)(v197 - (_QWORD)v195) >= 0x20)
            {
              v202 = (v200 >> 3) + 1;
              v203 = v195 - 2;
              v204 = (__int128 *)(v197 - 16);
              v205 = v202 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v206 = *v204;
                *(v203 - 1) = *(v204 - 1);
                *v203 = v206;
                v203 -= 2;
                v204 -= 2;
                v205 -= 4;
              }
              while (v205);
              v201 = &v195[-(v202 & 0x3FFFFFFFFFFFFFFCLL)];
              v197 -= 8 * (v202 & 0x3FFFFFFFFFFFFFFCLL);
              if (v202 == (v202 & 0x3FFFFFFFFFFFFFFCLL))
              {
LABEL_254:
                v197 = *(_QWORD *)v145;
LABEL_255:
                v189 = v195 + 1;
                *(_QWORD *)(v139 + 40) = v201;
                *(_QWORD *)(v139 + 48) = v195 + 1;
                v208 = *(_QWORD *)(v139 + 56);
                *(_QWORD *)(v139 + 56) = v196;
                if (v197)
                  (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v139 + 64) + 40))(*(_QWORD *)(v139 + 64), v197, v208 - v197);
LABEL_257:
                *(_QWORD *)(v139 + 48) = v189;
                v209 = *(_QWORD *)(v105 + 8);
                v211 = *(char **)(v209 + 24);
                v210 = *(char **)(v209 + 32);
                if (v210 - v211 >= 1)
                {
                  v212 = (v210 - v211) >> 4;
                  v214 = *(_QWORD *)(v139 + 8);
                  v213 = *(_QWORD *)(v139 + 16);
                  v215 = v213 - v214;
                  v216 = (__int128 *)(v214 + ((v213 - v214) & 0xFFFFFFFFFFFFFFF0));
                  v217 = *(_QWORD *)(v139 + 24);
                  if (v212 > (uint64_t)(v217 - v213) >> 4)
                  {
                    v218 = v215 >> 4;
                    v219 = (v215 >> 4) + v212;
                    if (v219 >> 60)
                      abort();
                    v220 = v217 - v214;
                    if (v220 >> 3 > v219)
                      v219 = v220 >> 3;
                    if ((unint64_t)v220 >= 0x7FFFFFFFFFFFFFF0)
                      v221 = 0xFFFFFFFFFFFFFFFLL;
                    else
                      v221 = v219;
                    if (v221)
                      v222 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v139 + 32) + 16))(*(_QWORD *)(v139 + 32), 16 * v221, 8);
                    else
                      v222 = 0;
                    v227 = (_OWORD *)(v222 + 16 * v218);
                    v228 = 16 * v212;
                    v229 = &v227[v212];
                    v230 = v227;
                    v145 = v139 + 40;
                    do
                    {
                      if (v230)
                        *v230 = *(_OWORD *)v211;
                      ++v230;
                      v211 += 16;
                      v228 -= 16;
                    }
                    while (v228);
                    v231 = *v334;
                    if (*v334 == v216)
                    {
                      v233 = v227;
                    }
                    else
                    {
                      v232 = v216;
                      do
                      {
                        v233 = v227 - 1;
                        *--v227 = *--v232;
                      }
                      while (v232 != v231);
                    }
                    for (j = *(__int128 **)(v139 + 16); v216 != j; ++v229)
                    {
                      v235 = *v216++;
                      *v229 = v235;
                    }
                    v236 = *(_QWORD *)(v139 + 8);
                    *(_QWORD *)(v139 + 8) = v233;
                    *(_QWORD *)(v139 + 16) = v229;
                    v237 = *(_QWORD *)(v139 + 24);
                    *(_QWORD *)(v139 + 24) = v222 + 16 * v221;
                    if (v236)
                      (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v139 + 32) + 40))(*(_QWORD *)(v139 + 32), v236, v237 - v236);
                    goto LABEL_226;
                  }
                  v223 = (uint64_t)(v213 - (_QWORD)v216) >> 4;
                  if (v223 >= v212)
                  {
                    v224 = &v211[16 * v212];
                    v226 = *(_OWORD **)(v139 + 16);
                    goto LABEL_290;
                  }
                  v224 = &v211[16 * v223];
                  if (v224 == v210)
                  {
                    v226 = *(_OWORD **)(v139 + 16);
                  }
                  else
                  {
                    v225 = &v211[16 * v223];
                    v226 = *(_OWORD **)(v139 + 16);
                    do
                    {
                      if (v226)
                        *v226 = *(_OWORD *)v225;
                      v225 += 16;
                      ++v226;
                    }
                    while (v225 != v210);
                  }
                  *(_QWORD *)(v139 + 16) = v226;
                  if ((uint64_t)(v213 - (_QWORD)v216) >= 1)
                  {
LABEL_290:
                    v238 = v212;
                    v239 = &v226[-v212];
                    v240 = v226;
                    while ((unint64_t)v239 < v213)
                    {
                      if (v240)
                        *v240 = *v239;
                      ++v239;
                      ++v240;
                    }
                    *(_QWORD *)(v139 + 16) = v240;
                    if (v226 != &v216[v238])
                      memmove(&v226[-(v226 - &v216[v238])], v216, (char *)v226 - (char *)&v216[v238] - 5);
                    if (v224 != v211)
                      memmove(v216, v211, v224 - v211 - 5);
                  }
                }
LABEL_226:
                if (*(_BYTE *)(v105 + 128))
                  v186 = 24;
                else
                  v186 = 16;
                v105 = *(_QWORD *)(v105 + v186);
                v7 = v338;
                if (!v105)
                {
                  v242 = *(_QWORD *)(v139 + 40);
                  v241 = *(_QWORD *)(v139 + 48);
                  if (v242 != v241)
                  {
                    *(_QWORD *)(v139 + 120) = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v242 + 16) + 8);
                    *(_QWORD *)(v139 + 128) = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v241 - 8) + 16) + 16);
                  }
                  goto LABEL_301;
                }
                continue;
              }
            }
          }
          break;
        }
        do
        {
          v207 = *(_QWORD *)(v197 - 8);
          v197 -= 8;
          *--v201 = v207;
        }
        while (v197 != v198);
        goto LABEL_254;
      }
      v160 = 0;
      v161 = (unsigned __int8 *)v105;
      v145 = v139 + 40;
      while (1)
      {
        v162 = v160;
        if (v161 == v107)
          break;
        if (v161[128])
          v163 = 24;
        else
          v163 = 16;
        v161 = *(unsigned __int8 **)&v161[v163];
        v160 = v162 + 1;
        if (!v161)
        {
          v164 = v140;
          goto LABEL_199;
        }
      }
      v164 = v140;
      ++v160;
LABEL_199:
      v165 = *(_QWORD *)(v139 + 8);
      v166 = (*(_QWORD *)(v139 + 16) - v165) >> 4;
      if (v160 > v166)
      {
        std::vector<md::LabelLineSegmentInfo,geo::StdAllocator<md::LabelLineSegmentInfo,mdm::Allocator>>::__append((uint64_t)v164, v160 - v166);
        v165 = *v164;
LABEL_204:
        v167 = v162 + 1;
        v168 = (_BYTE *)(v165 + 8);
        do
        {
          *((_QWORD *)v168 - 1) = *(_QWORD *)v105;
          v169 = *(unsigned __int8 *)(v105 + 128);
          *v168 = v169;
          v168 += 16;
          if (v169)
            v170 = 24;
          else
            v170 = 16;
          v105 = *(_QWORD *)(v105 + v170);
          --v167;
        }
        while (v167);
        goto LABEL_301;
      }
      if (v160 < v166)
        *(_QWORD *)(v139 + 16) = v165 + 16 * v160;
      if (v160)
        goto LABEL_204;
LABEL_301:
      v244 = *(uint64_t **)(v139 + 8);
      v243 = *(uint64_t **)(v139 + 16);
      v245 = (char *)v243 - (char *)v244;
      if (*(_BYTE *)(v139 + 1) != 4)
        break;
      if ((unint64_t)v245 >= 0x11)
      {
        v246 = 2;
        if ((unint64_t)(v245 >> 4) > 2)
          v246 = v245 >> 4;
        v247 = (char *)v244 + 26;
        v248 = *(_DWORD *)(*v244 + 40);
        for (k = v246 - 1; k; --k)
        {
          v250 = v248;
          v248 = *(_DWORD *)(*(_QWORD *)(v247 - 10) + 40);
          if (v250 != v248)
          {
            if (*(v247 - 18))
            {
              *(v247 - 16) = 1;
              if (*(v247 - 2))
                goto LABEL_313;
            }
            else
            {
              *(v247 - 17) = 1;
              if (*(v247 - 2))
              {
LABEL_313:
                *(v247 - 1) = 1;
                goto LABEL_307;
              }
            }
            *v247 = 1;
          }
LABEL_307:
          v247 += 16;
        }
      }
LABEL_326:
      if (v244 == v243)
      {
        v257 = 0.0;
        goto LABEL_335;
      }
      v256 = v245 - 16;
      v257 = 0.0;
      if (v256 <= 0xF)
        goto LABEL_332;
      v258 = (v256 >> 4) + 1;
      v259 = v244 + 2;
      v260 = v258 & 0x1FFFFFFFFFFFFFFELL;
      v261 = 0.0;
      do
      {
        v262 = *(v259 - 2);
        v263 = *v259;
        v259 += 4;
        v257 = *(double *)(v262 + 8) + v257;
        v261 = *(double *)(v263 + 8) + v261;
        v260 -= 2;
      }
      while (v260);
      v257 = v261 + v257;
      if (v258 != (v258 & 0x1FFFFFFFFFFFFFFELL))
      {
        v244 += 2 * (v258 & 0x1FFFFFFFFFFFFFFELL);
        do
        {
LABEL_332:
          v264 = *v244;
          v244 += 2;
          v257 = *(double *)(v264 + 8) + v257;
        }
        while (v244 != v243);
      }
LABEL_335:
      *(double *)(v139 + 104) = v257;
      if (v331)
      {
        v265 = v257 * 0.5;
      }
      else
      {
        v266 = *(double *)(v139 + 120);
        v267 = *(double *)(v139 + 128) - v266;
        v268 = 0.5 - v266;
        if (v267 <= 0.0)
        {
          if (!*(_BYTE *)(v139 + 2))
            v257 = **(double **)(**(_QWORD **)v145 + 16);
          v265 = v257 * v268;
        }
        else
        {
          v265 = v268 * v257 / v267;
        }
      }
      *(double *)(v139 + 112) = v265;
      v348 = v139;
      v269 = *(uint64_t **)(v7 + 88);
      v270 = *(_QWORD *)(v7 + 96);
      if ((unint64_t)v269 < v270)
      {
        if (v269)
        {
          *v269 = v139;
          v139 = 0;
        }
        v271 = v269 + 1;
        goto LABEL_387;
      }
      v272 = *(_QWORD *)(v7 + 80);
      v273 = ((uint64_t)v269 - v272) >> 3;
      v274 = v273 + 1;
      if ((unint64_t)(v273 + 1) >> 61)
        abort();
      v275 = v270 - v272;
      if (v275 >> 2 > v274)
        v274 = v275 >> 2;
      if ((unint64_t)v275 >= 0x7FFFFFFFFFFFFFF8)
        v276 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v276 = v274;
      if (v276)
      {
        v277 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v7 + 104) + 16))(*(_QWORD *)(v7 + 104), 8 * v276, 8);
        v278 = (uint64_t *)(v277 + 8 * v273);
        v279 = v277 + 8 * v276;
        if (v277)
        {
          v348 = 0;
          *v278 = v139;
        }
      }
      else
      {
        v279 = 0;
        v278 = (uint64_t *)(8 * v273);
      }
      v271 = v278 + 1;
      v280 = *(char **)(v7 + 80);
      v281 = *(char **)(v7 + 88);
      if (v281 != v280)
      {
        v282 = v281 - v280 - 8;
        if (v282 < 0x58)
        {
          v283 = *(char **)(v7 + 88);
          goto LABEL_366;
        }
        v285 = (v280 - v281 + 7) & 0xFFFFFFFFFFFFFFF8;
        if (&v281[v285] < (char *)v278 && (char *)v278 + v285 < v281)
        {
          v283 = *(char **)(v7 + 88);
          goto LABEL_366;
        }
        v286 = (v282 >> 3) + 1;
        v283 = &v281[-8 * (v286 & 0x3FFFFFFFFFFFFFFCLL)];
        v287 = v278 - 2;
        v288 = v281 - 32;
        v289 = v286 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v291 = *(_OWORD *)v288;
          v290 = *((_OWORD *)v288 + 1);
          *(_OWORD *)v288 = 0uLL;
          *((_OWORD *)v288 + 1) = 0uLL;
          v288 -= 32;
          *((_OWORD *)v287 - 1) = v291;
          *(_OWORD *)v287 = v290;
          v287 -= 4;
          v289 -= 4;
        }
        while (v289);
        v278 -= v286 & 0x3FFFFFFFFFFFFFFCLL;
        if (v286 != (v286 & 0x3FFFFFFFFFFFFFFCLL))
        {
          do
          {
LABEL_366:
            v292 = *((_QWORD *)v283 - 1);
            v283 -= 8;
            *(_QWORD *)v283 = 0;
            *--v278 = v292;
          }
          while (v283 != v280);
        }
        v293 = *(char **)(v7 + 80);
        v281 = *(char **)(v7 + 88);
        *(_QWORD *)(v7 + 80) = v278;
        *(_QWORD *)(v7 + 88) = v271;
        v284 = *(_QWORD *)(v7 + 96);
        *(_QWORD *)(v7 + 96) = v279;
        if (v281 != v293)
        {
          do
          {
            v296 = *((_QWORD *)v281 - 1);
            v281 -= 8;
            v295 = v296;
            *(_QWORD *)v281 = 0;
            if (v296)
            {
              v297 = *(_QWORD *)(v295 + 72);
              if (v297)
              {
                *(_QWORD *)(v295 + 80) = v297;
                (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v295 + 96) + 40))(*(_QWORD *)(v295 + 96), v297, *(_QWORD *)(v295 + 88) - v297);
              }
              v298 = *(_QWORD *)(v295 + 40);
              if (v298)
              {
                *(_QWORD *)(v295 + 48) = v298;
                (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v295 + 64) + 40))(*(_QWORD *)(v295 + 64), v298, *(_QWORD *)(v295 + 56) - v298);
              }
              v299 = *(_QWORD *)(v295 + 8);
              if (v299)
              {
                *(_QWORD *)(v295 + 16) = v299;
                (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v295 + 32) + 40))(*(_QWORD *)(v295 + 32), v299, *(_QWORD *)(v295 + 24) - v299);
              }
              {
                v300 = operator new();
                *(_QWORD *)(v300 + 16) = 0x5ED09DD50000000FLL;
                *(_QWORD *)(v300 + 24) = "VectorKitLabels";
                *(_OWORD *)(v300 + 32) = xmmword_19FFB2E80;
                *(_QWORD *)v300 = &off_1E42B5668;
                *(_QWORD *)(v300 + 8) = "VectorKitLabels";
                *(_OWORD *)(v300 + 72) = 0u;
                *(_OWORD *)(v300 + 88) = 0u;
                *(_OWORD *)(v300 + 104) = 0u;
                *(_OWORD *)(v300 + 120) = 0u;
                *(_OWORD *)(v300 + 136) = 0u;
                *(_OWORD *)(v300 + 152) = 0u;
                *(_OWORD *)(v300 + 168) = 0u;
                *(_OWORD *)(v300 + 184) = 0u;
                *(_OWORD *)(v300 + 200) = 0u;
                *(_OWORD *)(v300 + 216) = 0u;
                *(_OWORD *)(v300 + 232) = 0u;
                *(_QWORD *)(v300 + 248) = 0;
                *(_OWORD *)(v300 + 56) = 0u;
                v301 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v300 + 56), 0);
                if ((_DWORD)v301)
                  geo::read_write_lock::logFailure(v301, (uint64_t)"initialization", v302);
                v303 = malloc_create_zone(0, 0);
                *(_QWORD *)(v300 + 48) = v303;
                malloc_set_zone_name(v303, "VectorKitLabels");
                *(_QWORD *)(v300 + 256) = os_log_create("com.apple.VectorKit", "Memory");
                mdm::Allocator::instance(void)::alloc = v300;
              }
              (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc + 40))(mdm::Allocator::instance(void)::alloc, v295, 136);
            }
          }
          while (v281 != v293);
          v281 = v293;
          v7 = v338;
        }
        goto LABEL_384;
      }
      *(_QWORD *)(v7 + 80) = v278;
      *(_QWORD *)(v7 + 88) = v271;
      v284 = *(_QWORD *)(v7 + 96);
      *(_QWORD *)(v7 + 96) = v279;
LABEL_384:
      if (v281)
        (*(void (**)(_QWORD, char *, uint64_t))(**(_QWORD **)(v7 + 104) + 40))(*(_QWORD *)(v7 + 104), v281, v284 - (_QWORD)v281);
      v139 = v348;
LABEL_387:
      *(_QWORD *)(v7 + 88) = v271;
      v348 = 0;
      if (v139)
      {
        v304 = *(_QWORD *)(v139 + 72);
        if (v304)
        {
          *(_QWORD *)(v139 + 80) = v304;
          (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v139 + 96) + 40))(*(_QWORD *)(v139 + 96), v304, *(_QWORD *)(v139 + 88) - v304);
        }
        v305 = *(_QWORD *)(v139 + 40);
        if (v305)
        {
          *(_QWORD *)(v139 + 48) = v305;
          (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v139 + 64) + 40))(*(_QWORD *)(v139 + 64), v305, *(_QWORD *)(v139 + 56) - v305);
        }
        v306 = *(_QWORD *)(v139 + 8);
        if (v306)
        {
          *(_QWORD *)(v139 + 16) = v306;
          (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v139 + 32) + 40))(*(_QWORD *)(v139 + 32), v306, *(_QWORD *)(v139 + 24) - v306);
        }
        {
          v324 = operator new();
          mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v324, "VectorKitLabels", 0x5ED09DD50000000FLL);
        }
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc + 40))(mdm::Allocator::instance(void)::alloc, v139, 136);
      }
LABEL_396:
      v105 = *v329;
      v104 = v329[1];
      if (*v329 == v104)
        goto LABEL_414;
    }
    if ((unint64_t)v245 < 0x11)
      goto LABEL_326;
    v251 = 2;
    if ((unint64_t)(v245 >> 4) > 2)
      v251 = v245 >> 4;
    v252 = (char *)v244 + 26;
    v253 = *(unsigned __int8 *)(*v244 + 38);
    v254 = v251 - 1;
    while (1)
    {
      v255 = v253;
      v253 = *(unsigned __int8 *)(*(_QWORD *)(v252 - 10) + 38);
      if (v255 != v253)
      {
        if (*(v252 - 18))
        {
          *(v252 - 16) = 1;
          if (*(v252 - 2))
            goto LABEL_325;
        }
        else
        {
          *(v252 - 17) = 1;
          if (*(v252 - 2))
          {
LABEL_325:
            *(v252 - 1) = 1;
            goto LABEL_319;
          }
        }
        *v252 = 1;
      }
LABEL_319:
      v252 += 16;
      if (!--v254)
        goto LABEL_326;
    }
  }
LABEL_414:
  v325 = v339;
  if (v339)
  {
    for (m = v340; m != v325; m -= 80)
    {
      v327 = *(_QWORD *)(m - 32);
      if (v327)
      {
        *(_QWORD *)(m - 24) = v327;
        (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(m - 8) + 40))(*(_QWORD *)(m - 8), v327, *(_QWORD *)(m - 16) - v327);
      }
    }
    v340 = v325;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v342 + 40))(v342, v325, v341 - v325);
  }
}

void sub_19F10455C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
  uint64_t *v28;
  uint64_t v29;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v31 = *a9;
  if (*a9)
  {
    *(_QWORD *)(v29 + 80) = v31;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v29 + 96) + 40))(*(_QWORD *)(v29 + 96), v31, *(_QWORD *)(v29 + 88) - v31);
  }
  v32 = *a17;
  if (*a17)
  {
    *(_QWORD *)(v29 + 48) = v32;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v29 + 64) + 40))(*(_QWORD *)(v29 + 64), v32, *(_QWORD *)(v29 + 56) - v32);
  }
  v33 = *v28;
  if (*v28)
  {
    *(_QWORD *)(v29 + 16) = v33;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v29 + 32) + 40))(*(_QWORD *)(v29 + 32), v33, *(_QWORD *)(v29 + 24) - v33);
  }
  std::vector<md::SegmentConnectionPoint,geo::StdAllocator<md::SegmentConnectionPoint,mdm::Allocator>>::~vector[abi:nn180100](&a19);
  _Unwind_Resume(a1);
}

void md::LabelLineZSet::connectedSegmentInsert(uint64_t a1, uint64_t *a2, uint64_t a3, int a4, double a5)
{
  char v5;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  __int128 v44;
  int v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  int v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;

  v5 = a4;
  v8 = 80;
  if (a4)
    v8 = 32;
  v9 = a3 + v8;
  v10 = *a2;
  v11 = a2[1];
  if (*a2 == v11)
  {
LABEL_7:
    v14 = a2[2];
    if (v10 >= v14)
    {
      v18 = 0x333333333333333;
      v19 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v10 - *a2) >> 4);
      if (v19 + 1 > 0x333333333333333)
        goto LABEL_71;
      v20 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v14 - *a2) >> 4);
      v21 = 2 * v20;
      if (2 * v20 <= v19 + 1)
        v21 = v19 + 1;
      if (v20 < 0x199999999999999)
        v18 = v21;
      if (v18)
      {
        v22 = 80 * v18;
        v23 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2[3] + 16))(a2[3], 80 * v18, 8);
        v24 = v23 + 80 * v19;
        v25 = v23 + v22;
        if (v23)
        {
          v26 = *(_OWORD *)(v9 + 24);
          LODWORD(v71) = *(_DWORD *)(v9 + 40);
          *(_DWORD *)((char *)&v71 + 3) = *(_DWORD *)(v9 + 43);
          v27 = *(_QWORD *)(v9 + 16);
          *(_OWORD *)v24 = *(_OWORD *)v9;
          *(_QWORD *)(v24 + 16) = v27;
          *(_OWORD *)(v24 + 24) = v26;
          *(_DWORD *)(v24 + 40) = v71;
          *(_DWORD *)(v24 + 43) = *(_DWORD *)((char *)&v71 + 3);
          v28 = (_QWORD *)(v23 + 80 * v19);
          v29 = v28 + 9;
          v28[7] = 0;
          v28[8] = 0;
          v28[6] = 0;
          if ((v28 & 1) == 0)
          {
            v67 = v23 + 80 * v19;
            v24 = v67;
            if (v68)
            {
              v69 = operator new();
              mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v69, "VectorKitLabels", 0x5ED09DD50000000FLL);
              v24 = v67;
            }
          }
          *v29 = mdm::Allocator::instance(void)::alloc;
        }
      }
      else
      {
        v25 = 0;
        v24 = 16 * ((uint64_t)(v10 - *a2) >> 4);
      }
      v17 = v24 + 80;
      v39 = *a2;
      v40 = a2[1];
      if (v40 == *a2)
      {
        *a2 = v24;
        a2[1] = v17;
        v47 = a2[2];
        a2[2] = v25;
      }
      else
      {
        v41 = 0;
        do
        {
          v42 = v24 + v41;
          v43 = v40 + v41;
          v44 = *(_OWORD *)(v40 + v41 - 80);
          *(_QWORD *)(v42 - 64) = *(_QWORD *)(v40 + v41 - 64);
          *(_OWORD *)(v42 - 80) = v44;
          *(_OWORD *)(v42 - 56) = *(_OWORD *)(v40 + v41 - 56);
          v45 = *(_DWORD *)(v40 + v41 - 40);
          *(_DWORD *)(v42 - 37) = *(_DWORD *)(v40 + v41 - 37);
          *(_DWORD *)(v42 - 40) = v45;
          *(_QWORD *)(v42 - 24) = 0;
          *(_QWORD *)(v42 - 16) = 0;
          *(_QWORD *)(v42 - 32) = 0;
          *(_QWORD *)(v42 - 8) = *(_QWORD *)(v40 + v41 - 8);
          *(_OWORD *)(v42 - 32) = *(_OWORD *)(v40 + v41 - 32);
          *(_QWORD *)(v42 - 16) = *(_QWORD *)(v40 + v41 - 16);
          *(_QWORD *)(v43 - 32) = 0;
          *(_QWORD *)(v43 - 24) = 0;
          *(_QWORD *)(v43 - 16) = 0;
          v41 -= 80;
        }
        while (v40 + v41 != v39);
        v40 = *a2;
        v46 = a2[1];
        *a2 = v24 + v41;
        a2[1] = v17;
        v47 = a2[2];
        a2[2] = v25;
        while (v46 != v40)
        {
          v48 = *(_QWORD *)(v46 - 32);
          if (v48)
          {
            *(_QWORD *)(v46 - 24) = v48;
            (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v46 - 8) + 40))(*(_QWORD *)(v46 - 8), v48, *(_QWORD *)(v46 - 16) - v48);
          }
          v46 -= 80;
        }
      }
      if (v40)
        (*(void (**)(uint64_t, unint64_t, unint64_t))(*(_QWORD *)a2[3] + 40))(a2[3], v40, v47 - v40);
    }
    else
    {
      if (v10)
      {
        v15 = *(_OWORD *)(v9 + 24);
        LODWORD(v70) = *(_DWORD *)(v9 + 40);
        *(_DWORD *)((char *)&v70 + 3) = *(_DWORD *)(v9 + 43);
        v16 = *(_QWORD *)(v9 + 16);
        *(_OWORD *)v10 = *(_OWORD *)v9;
        *(_QWORD *)(v10 + 16) = v16;
        *(_OWORD *)(v10 + 24) = v15;
        *(_DWORD *)(v10 + 40) = v70;
        *(_DWORD *)(v10 + 43) = *(_DWORD *)((char *)&v70 + 3);
        *(_QWORD *)(v10 + 56) = 0;
        *(_QWORD *)(v10 + 64) = 0;
        *(_QWORD *)(v10 + 48) = 0;
        {
          v66 = operator new();
          mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v66, "VectorKitLabels", 0x5ED09DD50000000FLL);
        }
        *(_QWORD *)(v10 + 72) = mdm::Allocator::instance(void)::alloc;
      }
      v17 = v10 + 80;
    }
    a2[1] = v17;
    v49 = *(_QWORD *)(v17 - 24);
    v50 = *(_QWORD *)(v17 - 16);
    if (v49 >= v50)
    {
      v52 = *(_QWORD *)(v17 - 32);
      v53 = (uint64_t)(v49 - v52) >> 4;
      v54 = v53 + 1;
      if ((unint64_t)(v53 + 1) >> 60)
        goto LABEL_71;
      v55 = v50 - v52;
      if (v55 >> 3 > v54)
        v54 = v55 >> 3;
      if ((unint64_t)v55 >= 0x7FFFFFFFFFFFFFF0)
        v54 = 0xFFFFFFFFFFFFFFFLL;
      if (v54)
      {
        v56 = 16 * v54;
        v57 = (*(uint64_t (**)(_QWORD, unint64_t, uint64_t))(**(_QWORD **)(v17 - 8) + 16))(*(_QWORD *)(v17 - 8), 16 * v54, 8);
        v58 = v57 + 16 * v53;
        v54 = v57 + v56;
        if (v57)
        {
          *(_QWORD *)v58 = a3;
          *(_BYTE *)(v58 + 8) = v5;
          *(_BYTE *)(v58 + 9) = 0;
        }
      }
      else
      {
        v58 = 16 * v53;
      }
      v51 = v58 + 16;
      v60 = *(_QWORD *)(v17 - 32);
      v59 = *(_QWORD *)(v17 - 24);
      if (v59 != v60)
      {
        do
        {
          *(_OWORD *)(v58 - 16) = *(_OWORD *)(v59 - 16);
          v58 -= 16;
          v59 -= 16;
        }
        while (v59 != v60);
        v59 = *(_QWORD *)(v17 - 32);
      }
      *(_QWORD *)(v17 - 32) = v58;
      *(_QWORD *)(v17 - 24) = v51;
      v61 = *(_QWORD *)(v17 - 16);
      *(_QWORD *)(v17 - 16) = v54;
      if (v59)
        (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v17 - 8) + 40))(*(_QWORD *)(v17 - 8), v59, v61 - v59);
    }
    else
    {
      if (v49)
      {
        *(_QWORD *)v49 = a3;
        *(_BYTE *)(v49 + 8) = v5;
        *(_BYTE *)(v49 + 9) = 0;
      }
      v51 = v49 + 16;
    }
    *(_QWORD *)(v17 - 24) = v51;
    return;
  }
  while (!md::LabelPoint::isWithinEpsilon((md::LabelPoint *)v10, (const md::LabelPoint *)v9, a5, *(unsigned __int8 *)(a1 + 4)))
  {
    v10 += 80;
    if (v10 == v11)
    {
      v10 = a2[1];
      goto LABEL_7;
    }
  }
  v30 = *(_QWORD *)(v10 + 56);
  v31 = *(_QWORD *)(v10 + 64);
  if (v30 < v31)
  {
    if (v30)
    {
      *(_QWORD *)v30 = a3;
      *(_BYTE *)(v30 + 8) = v5;
      *(_BYTE *)(v30 + 9) = 0;
    }
    *(_QWORD *)(v10 + 56) = v30 + 16;
    return;
  }
  v32 = *(_QWORD *)(v10 + 48);
  v33 = (uint64_t)(v30 - v32) >> 4;
  v34 = v33 + 1;
  if ((unint64_t)(v33 + 1) >> 60)
LABEL_71:
    abort();
  v35 = v31 - v32;
  if (v35 >> 3 > v34)
    v34 = v35 >> 3;
  if ((unint64_t)v35 >= 0x7FFFFFFFFFFFFFF0)
    v34 = 0xFFFFFFFFFFFFFFFLL;
  if (v34)
  {
    v36 = 16 * v34;
    v37 = (*(uint64_t (**)(_QWORD, unint64_t, uint64_t))(**(_QWORD **)(v10 + 72) + 16))(*(_QWORD *)(v10 + 72), 16 * v34, 8);
    v38 = v37 + 16 * v33;
    v34 = v37 + v36;
    if (v37)
    {
      *(_QWORD *)v38 = a3;
      *(_BYTE *)(v38 + 8) = v5;
      *(_BYTE *)(v38 + 9) = 0;
    }
  }
  else
  {
    v38 = 16 * v33;
  }
  v62 = v38 + 16;
  v64 = *(_QWORD *)(v10 + 48);
  v63 = *(_QWORD *)(v10 + 56);
  if (v63 != v64)
  {
    do
    {
      *(_OWORD *)(v38 - 16) = *(_OWORD *)(v63 - 16);
      v38 -= 16;
      v63 -= 16;
    }
    while (v63 != v64);
    v63 = *(_QWORD *)(v10 + 48);
  }
  *(_QWORD *)(v10 + 48) = v38;
  *(_QWORD *)(v10 + 56) = v62;
  v65 = *(_QWORD *)(v10 + 64);
  *(_QWORD *)(v10 + 64) = v34;
  if (v63)
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v10 + 72) + 40))(*(_QWORD *)(v10 + 72), v63, v65 - v63);
  *(_QWORD *)(v10 + 56) = v62;
}

BOOL md::LabelPoint::isWithinEpsilon(md::LabelPoint *this, const md::LabelPoint *a2, double a3, int a4)
{
  double v7;
  uint64_t v8;
  uint64_t v9;
  double v10;
  double v11;
  long double v12;
  long double v13;
  double v14;
  long double v15;
  double v16;
  __double2 v17;
  double v18;
  __double2 v19;
  long double v20;
  long double v21;
  double v22;
  long double v23;
  double v24;
  __double2 v25;
  double v26;
  __double2 v27;

  if (a4)
  {
    if (*((_BYTE *)this + 44))
    {
      if (*((_BYTE *)a2 + 44))
      {
LABEL_4:
        v7 = *(double *)a2;
        goto LABEL_9;
      }
    }
    else
    {
      v12 = *((double *)this + 3) * 6.28318531;
      v13 = exp(*((double *)this + 4) * 6.28318531 + -3.14159265);
      v14 = atan(v13) * 2.0 + -1.57079633;
      v15 = fmod(v12, 6.28318531);
      v16 = fmod(v15 + 6.28318531, 6.28318531) + -3.14159265;
      v17 = __sincos_stret(v14);
      v18 = 6378137.0 / sqrt(v17.__sinval * v17.__sinval * -0.00669437999 + 1.0);
      v19 = __sincos_stret(v16);
      *(double *)this = v18 * v17.__cosval * v19.__cosval;
      *((double *)this + 1) = v18 * v17.__cosval * v19.__sinval;
      *((double *)this + 2) = v17.__sinval * 0.99330562 * v18;
      *((_BYTE *)this + 44) = 1;
      if (*((_BYTE *)a2 + 44))
        goto LABEL_4;
    }
    v20 = *((double *)a2 + 3) * 6.28318531;
    v21 = exp(*((double *)a2 + 4) * 6.28318531 + -3.14159265);
    v22 = atan(v21) * 2.0 + -1.57079633;
    v23 = fmod(v20, 6.28318531);
    v24 = fmod(v23 + 6.28318531, 6.28318531) + -3.14159265;
    v25 = __sincos_stret(v22);
    v26 = 6378137.0 / sqrt(v25.__sinval * v25.__sinval * -0.00669437999 + 1.0);
    v27 = __sincos_stret(v24);
    v7 = v26 * v25.__cosval * v27.__cosval;
    *(double *)a2 = v7;
    *((double *)a2 + 1) = v26 * v25.__cosval * v27.__sinval;
    *((double *)a2 + 2) = v25.__sinval * 0.99330562 * v26;
    *((_BYTE *)a2 + 44) = 1;
LABEL_9:
    if (vabdd_f64(*(double *)this, v7) >= a3 || vabdd_f64(*((double *)this + 1), *((double *)a2 + 1)) >= a3)
      return 0;
    v10 = *((double *)this + 2);
    v11 = *((double *)a2 + 2);
    return vabdd_f64(v10, v11) < a3;
  }
  v8 = md::LabelPoint::mercatorPoint(this);
  v9 = md::LabelPoint::mercatorPoint(a2);
  if (vabdd_f64(*(double *)v8, *(double *)v9) >= a3)
    return 0;
  v10 = *(double *)(v8 + 8);
  v11 = *(double *)(v9 + 8);
  return vabdd_f64(v10, v11) < a3;
}

uint64_t std::vector<md::LabelLineSegmentInfo,geo::StdAllocator<md::LabelLineSegmentInfo,mdm::Allocator>>::__append(uint64_t result, unint64_t a2)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v3 = result;
  v4 = *(_QWORD **)(result + 8);
  v5 = *(_QWORD *)(result + 16);
  if (a2 <= (v5 - (uint64_t)v4) >> 4)
  {
    if (a2)
    {
      v10 = 16 * a2;
      v11 = &v4[2 * a2];
      do
      {
        if (v4)
        {
          *v4 = 0;
          v4[1] = 0;
          *((_BYTE *)v4 + 8) = 1;
        }
        v4 += 2;
        v10 -= 16;
      }
      while (v10);
      v4 = v11;
    }
    *(_QWORD *)(result + 8) = v4;
  }
  else
  {
    v6 = ((uint64_t)v4 - *(_QWORD *)result) >> 4;
    v7 = v6 + a2;
    if ((v6 + a2) >> 60)
      abort();
    v8 = v5 - *(_QWORD *)result;
    if (v8 >> 3 > v7)
      v7 = v8 >> 3;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0)
      v9 = 0xFFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
      result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(result + 24) + 16))(*(_QWORD *)(result + 24), 16 * v9, 8);
    else
      result = 0;
    v12 = (_QWORD *)(result + 16 * v6);
    v13 = 16 * a2;
    v14 = &v12[2 * a2];
    v15 = v12;
    do
    {
      if (v15)
      {
        *v15 = 0;
        v15[1] = 0;
        *((_BYTE *)v15 + 8) = 1;
      }
      v15 += 2;
      v13 -= 16;
    }
    while (v13);
    v17 = *(_QWORD *)v3;
    v16 = *(_QWORD *)(v3 + 8);
    if (v16 != *(_QWORD *)v3)
    {
      do
      {
        *((_OWORD *)v12 - 1) = *(_OWORD *)(v16 - 16);
        v12 -= 2;
        v16 -= 16;
      }
      while (v16 != v17);
      v16 = *(_QWORD *)v3;
    }
    *(_QWORD *)v3 = v12;
    *(_QWORD *)(v3 + 8) = v14;
    v18 = *(_QWORD *)(v3 + 16);
    *(_QWORD *)(v3 + 16) = result + 16 * v9;
    if (v16)
      return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 24) + 40))(*(_QWORD *)(v3 + 24), v16, v18 - v16);
  }
  return result;
}

uint64_t md::LabelLineSegmentImpl::vertexInfos(md::LabelLineSegmentImpl *this)
{
  unint64_t v2;
  uint64_t result;
  _DWORD *v4;
  char *v5;
  char *v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  uint64_t v14;
  uint64_t v15;
  _DWORD *v16;
  _DWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  _OWORD *v24;
  __int128 *v25;
  uint64_t v26;
  __int128 v27;
  int v28;
  uint64_t v29;

  v2 = *((unsigned __int16 *)this + 23);
  v5 = (char *)this + 80;
  result = *((_QWORD *)this + 10);
  v4 = (_DWORD *)*((_QWORD *)v5 + 1);
  v6 = (char *)v4 - result;
  v7 = ((uint64_t)v4 - result) >> 2;
  v8 = v2 - v7;
  if (v2 <= v7)
  {
    if (v2 < v7)
      *((_QWORD *)this + 11) = result + 4 * v2;
  }
  else
  {
    v9 = *((_QWORD *)this + 12);
    if (v8 <= (v9 - (uint64_t)v4) >> 2)
    {
      v17 = &v4[v8];
      v18 = 4 * v2 - 4 * v7;
      do
      {
        if (v4)
          *v4 = 32639;
        ++v4;
        v18 -= 4;
      }
      while (v18);
      *((_QWORD *)this + 11) = v17;
    }
    else
    {
      v10 = (v9 - result) >> 1;
      if (v10 <= v2)
        v10 = v2;
      if ((unint64_t)(v9 - result) >= 0x7FFFFFFFFFFFFFFCLL)
        v11 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v11 = v10;
      v12 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 13) + 16))(*((_QWORD *)this + 13), 4 * v11, 1);
      v13 = (_DWORD *)(v12 + 4 * v7);
      v14 = v12 + 4 * v2;
      v15 = 4 * v2 - 4 * v7;
      v16 = v13;
      do
      {
        if (v16)
          *v16 = 32639;
        ++v16;
        v15 -= 4;
      }
      while (v15);
      v19 = v12 + 4 * v11;
      v21 = *((_QWORD *)this + 10);
      v20 = *((_QWORD *)this + 11);
      if (v20 != v21)
      {
        v22 = v20 - v21 - 4;
        if (v22 < 0x2C)
          goto LABEL_32;
        if ((unint64_t)(v20 - (_QWORD)&v6[v12]) < 0x20)
          goto LABEL_32;
        v23 = (v22 >> 2) + 1;
        v24 = (_OWORD *)(v12 + 4 * v7 - 16);
        v25 = (__int128 *)(v20 - 16);
        v26 = v23 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          v27 = *v25;
          *(v24 - 1) = *(v25 - 1);
          *v24 = v27;
          v24 -= 2;
          v25 -= 2;
          v26 -= 8;
        }
        while (v26);
        v13 -= v23 & 0x7FFFFFFFFFFFFFF8;
        v20 -= 4 * (v23 & 0x7FFFFFFFFFFFFFF8);
        if (v23 != (v23 & 0x7FFFFFFFFFFFFFF8))
        {
LABEL_32:
          do
          {
            v28 = *(_DWORD *)(v20 - 4);
            v20 -= 4;
            *--v13 = v28;
          }
          while (v20 != v21);
        }
        v20 = *((_QWORD *)this + 10);
      }
      *((_QWORD *)this + 10) = v13;
      *((_QWORD *)this + 11) = v14;
      v29 = *((_QWORD *)this + 12);
      *((_QWORD *)this + 12) = v19;
      if (v20)
        (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 13) + 40))(*((_QWORD *)this + 13), v20, v29 - v20);
    }
    return *((_QWORD *)this + 10);
  }
  return result;
}

uint64_t md::FixedLabelLineSegment<2ul>::points(uint64_t a1)
{
  return a1 + 48;
}

{
  return a1 + 48;
}

uint64_t md::FixedLabelLineSegment<2ul>::vertexInfos(uint64_t a1)
{
  return a1 + 144;
}

uint64_t md::FixedLabelLineSegment<3ul>::points(uint64_t a1)
{
  return a1 + 48;
}

{
  return a1 + 48;
}

uint64_t md::FixedLabelLineSegment<3ul>::vertexInfos(uint64_t a1)
{
  return a1 + 192;
}

uint64_t md::FixedLabelLineSegment<4ul>::points(uint64_t a1)
{
  return a1 + 48;
}

{
  return a1 + 48;
}

uint64_t md::FixedLabelLineSegment<4ul>::vertexInfos(uint64_t a1)
{
  return a1 + 240;
}

uint64_t md::FixedLabelLineSegment<5ul>::points(uint64_t a1)
{
  return a1 + 48;
}

{
  return a1 + 48;
}

uint64_t md::FixedLabelLineSegment<5ul>::vertexInfos(uint64_t a1)
{
  return a1 + 288;
}

char *geo::Pool<md::ElevatedPolygonRenderable>::allocateSlab(uint64_t **a1)
{
  char *result;
  char *v3;
  uint64_t *v4;
  uint64_t **v5;
  uint64_t **v6;
  unint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;
  char *v13;
  char *v14;

  result = (char *)malloc_type_malloc((size_t)a1[4], 0x160B39uLL);
  v3 = result;
  v5 = a1 + 1;
  v4 = a1[1];
  if (v4)
  {
    while (1)
    {
      while (1)
      {
        v6 = (uint64_t **)v4;
        v7 = v4[4];
        if ((unint64_t)result >= v7)
          break;
        v4 = *v6;
        v5 = v6;
        if (!*v6)
          goto LABEL_8;
      }
      if (v7 >= (unint64_t)result)
        break;
      v4 = v6[1];
      if (!v4)
      {
        v5 = v6 + 1;
        goto LABEL_8;
      }
    }
  }
  else
  {
    v6 = a1 + 1;
LABEL_8:
    v8 = (uint64_t *)operator new(0x28uLL);
    v8[4] = (uint64_t)v3;
    *v8 = 0;
    v8[1] = 0;
    v8[2] = (uint64_t)v6;
    *v5 = v8;
    v9 = (uint64_t *)**a1;
    if (v9)
    {
      *a1 = v9;
      v10 = *v5;
    }
    else
    {
      v10 = v8;
    }
    result = (char *)std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(a1[1], v10);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  v11 = a1[5];
  v12 = 464 * (_QWORD)a1[3] - 464;
  if ((v12 & 0x8000000000000000) == 0)
  {
    v13 = &v3[v12];
    do
    {
      *(_QWORD *)v13 = v11;
      v14 = v13 - 464;
      v11 = (uint64_t *)v13;
      v13 = v14;
    }
    while (v14 >= v3);
    v11 = (uint64_t *)(v14 + 464);
  }
  a1[5] = v11;
  return result;
}

char *geo::Pool<md::DaVinciGroundRenderable>::allocateSlab(uint64_t **a1)
{
  char *result;
  char *v3;
  uint64_t *v4;
  uint64_t **v5;
  uint64_t **v6;
  unint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;
  char *v13;
  char *v14;

  result = (char *)malloc_type_malloc((size_t)a1[4], 0x160B39uLL);
  v3 = result;
  v5 = a1 + 1;
  v4 = a1[1];
  if (v4)
  {
    while (1)
    {
      while (1)
      {
        v6 = (uint64_t **)v4;
        v7 = v4[4];
        if ((unint64_t)result >= v7)
          break;
        v4 = *v6;
        v5 = v6;
        if (!*v6)
          goto LABEL_8;
      }
      if (v7 >= (unint64_t)result)
        break;
      v4 = v6[1];
      if (!v4)
      {
        v5 = v6 + 1;
        goto LABEL_8;
      }
    }
  }
  else
  {
    v6 = a1 + 1;
LABEL_8:
    v8 = (uint64_t *)operator new(0x28uLL);
    v8[4] = (uint64_t)v3;
    *v8 = 0;
    v8[1] = 0;
    v8[2] = (uint64_t)v6;
    *v5 = v8;
    v9 = (uint64_t *)**a1;
    if (v9)
    {
      *a1 = v9;
      v10 = *v5;
    }
    else
    {
      v10 = v8;
    }
    result = (char *)std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(a1[1], v10);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  v11 = a1[5];
  v12 = 816 * (_QWORD)a1[3] - 816;
  if ((v12 & 0x8000000000000000) == 0)
  {
    v13 = &v3[v12];
    do
    {
      *(_QWORD *)v13 = v11;
      v14 = v13 - 816;
      v11 = (uint64_t *)v13;
      v13 = v14;
    }
    while (v14 >= v3);
    v11 = (uint64_t *)(v14 + 816);
  }
  a1[5] = v11;
  return result;
}

char *geo::Pool<md::MaterialRenderable>::allocateSlab(uint64_t **a1)
{
  char *result;
  char *v3;
  uint64_t *v4;
  uint64_t **v5;
  uint64_t **v6;
  unint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;
  char *v13;
  char *v14;

  result = (char *)malloc_type_malloc((size_t)a1[4], 0x160B39uLL);
  v3 = result;
  v5 = a1 + 1;
  v4 = a1[1];
  if (v4)
  {
    while (1)
    {
      while (1)
      {
        v6 = (uint64_t **)v4;
        v7 = v4[4];
        if ((unint64_t)result >= v7)
          break;
        v4 = *v6;
        v5 = v6;
        if (!*v6)
          goto LABEL_8;
      }
      if (v7 >= (unint64_t)result)
        break;
      v4 = v6[1];
      if (!v4)
      {
        v5 = v6 + 1;
        goto LABEL_8;
      }
    }
  }
  else
  {
    v6 = a1 + 1;
LABEL_8:
    v8 = (uint64_t *)operator new(0x28uLL);
    v8[4] = (uint64_t)v3;
    *v8 = 0;
    v8[1] = 0;
    v8[2] = (uint64_t)v6;
    *v5 = v8;
    v9 = (uint64_t *)**a1;
    if (v9)
    {
      *a1 = v9;
      v10 = *v5;
    }
    else
    {
      v10 = v8;
    }
    result = (char *)std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(a1[1], v10);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  v11 = a1[5];
  v12 = 408 * (_QWORD)a1[3] - 408;
  if ((v12 & 0x8000000000000000) == 0)
  {
    v13 = &v3[v12];
    do
    {
      *(_QWORD *)v13 = v11;
      v14 = v13 - 408;
      v11 = (uint64_t *)v13;
      v13 = v14;
    }
    while (v14 >= v3);
    v11 = (uint64_t *)(v14 + 408);
  }
  a1[5] = v11;
  return result;
}

void geo::Pool<geo::IntrusiveNode<gdc::tf::TaskData>>::disposeElements(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t **v4;
  uint64_t **v5;
  uint64_t *v6;
  unint64_t v7;
  uint64_t *v8;
  unint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  BOOL v12;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t *v18;
  uint64_t **v19;
  uint64_t *v20;
  uint64_t **v21;
  unint64_t v22;
  uint64_t **v23;
  void *v24;
  void *v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  _QWORD *v29;
  _QWORD *v30;
  uint64_t **v31;
  uint64_t *v32;
  uint64_t v33;
  char v34;

  v32 = 0;
  v33 = 0;
  v31 = &v32;
  v2 = *(_QWORD **)(a1 + 40);
  if (v2)
  {
    v3 = 0;
    do
    {
      v4 = &v32;
      v5 = &v32;
      if (v32)
      {
        v6 = v32;
        while (1)
        {
          while (1)
          {
            v5 = (uint64_t **)v6;
            v7 = v6[4];
            if ((unint64_t)v2 >= v7)
              break;
            v6 = *v5;
            v4 = v5;
            if (!*v5)
              goto LABEL_12;
          }
          if (v7 >= (unint64_t)v2)
            break;
          v6 = v5[1];
          if (!v6)
          {
            v4 = v5 + 1;
            goto LABEL_12;
          }
        }
      }
      else
      {
LABEL_12:
        v8 = (uint64_t *)operator new(0x28uLL);
        v8[4] = (uint64_t)v2;
        *v8 = 0;
        v8[1] = 0;
        v8[2] = (uint64_t)v5;
        *v4 = v8;
        if (*v31)
        {
          v31 = (uint64_t **)*v31;
          v8 = *v4;
        }
        std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(v32, v8);
        v3 = ++v33;
        v2 = *(_QWORD **)(a1 + 40);
      }
      v2 = (_QWORD *)*v2;
      *(_QWORD *)(a1 + 40) = v2;
    }
    while (v2);
  }
  else
  {
    v3 = 0;
  }
  v9 = *(_QWORD *)(a1 + 24);
  v10 = *(_QWORD **)a1;
  v11 = (_QWORD *)(a1 + 8);
  v12 = v3 == *(_QWORD *)(a1 + 16) * v9 || v10 == v11;
  if (v12 || v9 == 0)
  {
    if (v10 == v11)
      goto LABEL_54;
    goto LABEL_56;
  }
  v14 = 1;
  do
  {
    if (v14)
    {
      v15 = 0;
      v16 = v10[4];
      do
      {
        v17 = v16 + 152 * v15;
        v18 = v32;
        if (!v32)
          goto LABEL_39;
        v19 = &v32;
        do
        {
          v20 = v18;
          v21 = v19;
          v22 = v18[4];
          v23 = (uint64_t **)(v18 + 1);
          if (v22 >= v17)
          {
            v23 = (uint64_t **)v20;
            v19 = (uint64_t **)v20;
          }
          v18 = *v23;
        }
        while (v18);
        if (v19 == &v32)
          goto LABEL_39;
        if (v22 < v17)
          v20 = (uint64_t *)v21;
        if (v17 < v20[4])
        {
LABEL_39:
          v24 = *(void **)(v17 + 128);
          if (v24)
          {
            *(_QWORD *)(v17 + 136) = v24;
            operator delete(v24);
          }
          v25 = *(void **)(v17 + 104);
          if (v25)
          {
            *(_QWORD *)(v17 + 112) = v25;
            operator delete(v25);
          }
          if (*(char *)(v17 + 95) < 0)
            operator delete(*(void **)(v17 + 72));
          v26 = *(unsigned int *)(v17 + 64);
          if ((_DWORD)v26 != -1)
            ((void (*)(char *, unint64_t))off_1E42FB360[v26])(&v34, v16 + 152 * v15);
          *(_DWORD *)(v17 + 64) = -1;
          v9 = *(_QWORD *)(a1 + 24);
        }
        ++v15;
        v14 = v9;
      }
      while (v15 < v9);
    }
    v27 = (_QWORD *)v10[1];
    if (v27)
    {
      do
      {
        v28 = v27;
        v27 = (_QWORD *)*v27;
      }
      while (v27);
    }
    else
    {
      do
      {
        v28 = (_QWORD *)v10[2];
        v12 = *v28 == (_QWORD)v10;
        v10 = v28;
      }
      while (!v12);
    }
    v10 = v28;
  }
  while (v28 != v11);
  v10 = *(_QWORD **)a1;
  if (*(_QWORD **)a1 != v11)
  {
    do
    {
LABEL_56:
      free((void *)v10[4]);
      v29 = (_QWORD *)v10[1];
      if (v29)
      {
        do
        {
          v30 = v29;
          v29 = (_QWORD *)*v29;
        }
        while (v29);
      }
      else
      {
        do
        {
          v30 = (_QWORD *)v10[2];
          v12 = *v30 == (_QWORD)v10;
          v10 = v30;
        }
        while (!v12);
      }
      v10 = v30;
    }
    while (v30 != v11);
  }
LABEL_54:
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(_QWORD **)(a1 + 8));
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = v11;
  *(_QWORD *)(a1 + 40) = 0;
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(v32);
}

void sub_19F105784(_Unwind_Exception *a1)
{
  _QWORD *v1;

  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(v1);
  _Unwind_Resume(a1);
}

char *geo::Pool<geo::IntrusiveNode<gdc::tf::TaskData>>::allocateSlab(uint64_t **a1)
{
  char *result;
  char *v3;
  uint64_t *v4;
  uint64_t **v5;
  uint64_t **v6;
  unint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;
  char *v13;
  char *v14;

  result = (char *)malloc_type_malloc((size_t)a1[4], 0x160B39uLL);
  v3 = result;
  v5 = a1 + 1;
  v4 = a1[1];
  if (v4)
  {
    while (1)
    {
      while (1)
      {
        v6 = (uint64_t **)v4;
        v7 = v4[4];
        if ((unint64_t)result >= v7)
          break;
        v4 = *v6;
        v5 = v6;
        if (!*v6)
          goto LABEL_8;
      }
      if (v7 >= (unint64_t)result)
        break;
      v4 = v6[1];
      if (!v4)
      {
        v5 = v6 + 1;
        goto LABEL_8;
      }
    }
  }
  else
  {
    v6 = a1 + 1;
LABEL_8:
    v8 = (uint64_t *)operator new(0x28uLL);
    v8[4] = (uint64_t)v3;
    *v8 = 0;
    v8[1] = 0;
    v8[2] = (uint64_t)v6;
    *v5 = v8;
    v9 = (uint64_t *)**a1;
    if (v9)
    {
      *a1 = v9;
      v10 = *v5;
    }
    else
    {
      v10 = v8;
    }
    result = (char *)std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(a1[1], v10);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  v11 = a1[5];
  v12 = 152 * (_QWORD)a1[3] - 152;
  if ((v12 & 0x8000000000000000) == 0)
  {
    v13 = &v3[v12];
    v14 = &v3[v12];
    do
    {
      *(_QWORD *)v14 = v11;
      v14 -= 152;
      v11 = (uint64_t *)v13;
      v13 = v14;
    }
    while (v14 >= v3);
    v11 = (uint64_t *)(v14 + 152);
  }
  a1[5] = v11;
  return result;
}

BOOL esl::QuartzContext::drawLinearGradient(CGContextRef *a1, void **a2, float **a3, float *a4, float *a5)
{
  char *v5;
  char *v6;
  float *v8;
  float *v13;
  float *v14;
  double *v15;
  double v16;
  double *v17;
  double *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char *v23;
  double *v24;
  uint64_t v25;
  const __CFArray *Mutable;
  char *v27;
  char *v28;
  __CFArray *v29;
  CGGradient *v30;
  _BOOL8 v31;
  _QWORD v33[3];
  uint64_t v34;
  void *value;
  uint64_t (**v36)();
  CFArrayRef colors;
  void *__p;
  double *v39;
  double *v40;
  CGPoint v41;
  CGPoint v42;

  v5 = (char *)*a2;
  v6 = (char *)a2[1];
  if (*a2 != v6)
  {
    v8 = a3[1];
    if (*a3 != v8 && (v6 - v5) >> 5 == v8 - *a3)
    {
      while (((*(uint64_t (**)(char *))(*(_QWORD *)v5 + 48))(v5) & 1) != 0)
      {
        v5 += 32;
        if (v5 == v6)
        {
          if (!(*((unsigned int (**)(CGContextRef *))*a1 + 3))(a1))
            return 0;
          __p = 0;
          v39 = 0;
          v40 = 0;
          std::vector<double>::reserve(&__p, a3[1] - *a3);
          v13 = *a3;
          v14 = a3[1];
          if (*a3 != v14)
          {
            v15 = v39;
            do
            {
              v16 = *v13;
              if (v15 >= v40)
              {
                v18 = (double *)__p;
                v19 = ((char *)v15 - (_BYTE *)__p) >> 3;
                v20 = v19 + 1;
                if ((unint64_t)(v19 + 1) >> 61)
                  std::vector<double>::__throw_length_error[abi:ne180100]();
                v21 = (char *)v40 - (_BYTE *)__p;
                if (((char *)v40 - (_BYTE *)__p) >> 2 > v20)
                  v20 = v21 >> 2;
                if ((unint64_t)v21 >= 0x7FFFFFFFFFFFFFF8)
                  v22 = 0x1FFFFFFFFFFFFFFFLL;
                else
                  v22 = v20;
                if (v22)
                {
                  v23 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v40, v22);
                  v18 = (double *)__p;
                  v15 = v39;
                }
                else
                {
                  v23 = 0;
                }
                v24 = (double *)&v23[8 * v19];
                *v24 = v16;
                v17 = v24 + 1;
                while (v15 != v18)
                {
                  v25 = *((_QWORD *)v15-- - 1);
                  *((_QWORD *)v24-- - 1) = v25;
                }
                __p = v24;
                v39 = v17;
                v40 = (double *)&v23[8 * v22];
                if (v18)
                  operator delete(v18);
              }
              else
              {
                *v15 = v16;
                v17 = v15 + 1;
              }
              v39 = v17;
              ++v13;
              v15 = v17;
            }
            while (v13 != v14);
          }
          Mutable = CFArrayCreateMutable(0, ((_BYTE *)a2[1] - (_BYTE *)*a2) >> 5, 0);
          v36 = &off_1E42B48B0;
          colors = Mutable;
          if (Mutable)
          {
            v27 = (char *)*a2;
            v28 = (char *)a2[1];
            if (*a2 != v28)
            {
              do
              {
                v29 = colors;
                esl::QuartzColor::color(v27, &v34);
                CFArrayAppendValue(v29, value);
                geo::_retain_ptr<CGColor *,geo::_retain_cf<CGColor *>,geo::_release_cf,geo::_hash_cf,geo::_equal_cf>::~_retain_ptr(&v34);
                v27 += 32;
              }
              while (v27 != v28);
              v27 = (char *)*a2;
            }
            esl::QuartzColor::cgColorSpace((CGColorRef *)v27, &v34);
            if (value)
            {
              v30 = CGGradientCreateWithColors((CGColorSpaceRef)value, colors, (const CGFloat *)__p);
              v33[0] = &off_1E42B47D0;
              v33[1] = v30;
              v31 = v30 != 0;
              if (v30)
              {
                v41.x = *a4;
                v41.y = a4[1];
                v42.x = *a5;
                v42.y = a5[1];
                CGContextDrawLinearGradient(a1[1], v30, v41, v42, 3u);
              }
              geo::_retain_ptr<CGGradient *,geo::_retain_cf<CGGradient *>,geo::_release_cf,geo::_hash_cf,geo::_equal_cf>::~_retain_ptr(v33);
            }
            else
            {
              v31 = 0;
            }
            geo::_retain_ptr<CGColorSpace *,geo::_retain_cf<CGColorSpace *>,geo::_release_cf,geo::_hash_cf,geo::_equal_cf>::~_retain_ptr(&v34);
          }
          else
          {
            v31 = 0;
          }
          geo::_retain_ptr<__CFArray *,geo::_retain_cf<__CFArray *>,geo::_release_cf,geo::_hash_cf,geo::_equal_cf>::~_retain_ptr(&v36);
          if (__p)
          {
            v39 = (double *)__p;
            operator delete(__p);
          }
          return v31;
        }
      }
    }
  }
  return 0;
}

void sub_19F105B5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19)
{
  geo::_retain_ptr<CGGradient *,geo::_retain_cf<CGGradient *>,geo::_release_cf,geo::_hash_cf,geo::_equal_cf>::~_retain_ptr(&a9);
  geo::_retain_ptr<CGColorSpace *,geo::_retain_cf<CGColorSpace *>,geo::_release_cf,geo::_hash_cf,geo::_equal_cf>::~_retain_ptr(&a12);
  geo::_retain_ptr<__CFArray *,geo::_retain_cf<__CFArray *>,geo::_release_cf,geo::_hash_cf,geo::_equal_cf>::~_retain_ptr(&a15);
  if (__p)
  {
    a19 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void std::vector<double>::reserve(void **a1, unint64_t a2)
{
  uint64_t v3;
  _BYTE *v4;
  int64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  v4 = a1[2];
  v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - (_BYTE *)*a1) >> 3)
  {
    if (a2 >> 61)
      std::vector<double>::__throw_length_error[abi:ne180100]();
    v5 = (_BYTE *)a1[1] - (_BYTE *)*a1;
    v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(v3, a2);
    v7 = &v6[v5 & 0xFFFFFFFFFFFFFFF8];
    v9 = &v6[8 * v8];
    v10 = (char *)*a1;
    v11 = (char *)a1[1];
    v12 = v7;
    if (v11 != *a1)
    {
      v12 = v7;
      do
      {
        v13 = *((_QWORD *)v11 - 1);
        v11 -= 8;
        *((_QWORD *)v12 - 1) = v13;
        v12 -= 8;
      }
      while (v11 != v10);
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
      operator delete(v10);
  }
}

void sub_19F105CA8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19F105D04(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19F105DB8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void ___ZN2md9MapEngine12setNeedsTickERKNS_15NeedsLayoutInfoE_block_invoke(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  md::MapEngine **v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v2 = *(std::__shared_weak_count **)(a1 + 40);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(md::MapEngine ***)(a1 + 32);
      if (v5 && *v5)
        md::MapEngine::updateRunLoopStatus(*v5);
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_19F105FA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_19F106414(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,id location)
{
  void *v33;
  void *v34;

  _Unwind_Resume(a1);
}

void sub_19F10654C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void md::MapEngine::onRenderTimerFired(uint64_t a1, _QWORD *a2, double a3)
{
  int v6;
  unint64_t v7;
  unint64_t v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  double v16;
  double v17;
  NSObject *v18;
  uint64_t v19;
  double v20;
  double v21;
  NSObject *v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t *v25;
  uint64_t v26;
  void (***v27)(_QWORD, uint64_t, const char *);
  std::__shared_weak_count *v28;
  unint64_t *p_shared_owners;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  double v33;
  uint64_t v34;
  NSObject *v35;
  double v36;
  unsigned int v37;
  NSObject *v38;
  uint64_t v39;
  uint64_t v40;
  NSObject *v41;
  uint64_t v42;
  NSObject *v43;
  NSObject *v44;
  os_signpost_id_t v45;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep rep;
  _QWORD *v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  _QWORD v53[3];
  _QWORD *v54;
  _QWORD v55[3];
  _QWORD *v56;
  _BYTE buf[22];
  __int16 v58;
  double v59;
  __int16 v60;
  const char *v61;
  __int16 v62;
  const char *v63;
  __int16 v64;
  int v65;
  uint64_t v66;

  v66 = *MEMORY[0x1E0C80C00];
  v6 = *(unsigned __int8 *)(a1 + 98);
  *(_BYTE *)(a1 + 96) = v6 != (*(unsigned int (**)(_QWORD))(**(_QWORD **)(a1 + 88) + 24))(*(_QWORD *)(a1 + 88));
  *(_BYTE *)(a1 + 98) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 88) + 24))(*(_QWORD *)(a1 + 88));
  if (*(_QWORD *)(a1 + 824))
  {
    if (ggl::Performance::Counters::instance(void)::onceToken[0] != -1)
      dispatch_once(ggl::Performance::Counters::instance(void)::onceToken, &__block_literal_global_40952);
    v7 = atomic_load((unint64_t *)(*(_QWORD *)(ggl::Performance::Counters::instance(void)::counters + 32) + 64));
    v8 = *(_QWORD *)(a1 + 1296);
    if (v7 <= v8)
    {
      *(_QWORD *)(*(_QWORD *)(a1 + 896) + 384) = 0x3FF0000000000000;
      *(_QWORD *)(a1 + 1328) = 0;
    }
    else
    {
      v9 = fmaxf((float)((float)v7 - (float)v8) / (float)*(unint64_t *)(a1 + 1304), 0.0);
      if (v9 <= 1.0)
        v10 = (float)(v9 * 10.0) + -10.0;
      else
        v10 = 0.0;
      v11 = exp2f(v10);
      if (v11 == 1.0)
      {
        v12 = 0.05;
      }
      else
      {
        v13 = (float)(v11 * -0.95) + 1.0;
        v14 = fmaxf(v13, 0.05);
        v15 = fminf(v13, 0.05);
        if (v11 > 1.0)
          v12 = v15;
        else
          v12 = v14;
      }
      v16 = *(double *)(a1 + 1312);
      if (v16 > 0.0500000007)
        v12 = v16;
      v17 = v12;
      *(double *)(*(_QWORD *)(a1 + 896) + 384) = v12;
      if (vabdd_f64(*(double *)(a1 + 1328), v12) > 0.200000003 || *(_BYTE *)(a1 + 1320))
      {
        if (GEOGetVectorKitVKDefaultLog_onceToken != -1)
          dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_4_11772);
        v18 = (id)GEOGetVectorKitVKDefaultLog_log;
        if (os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
        {
          v19 = *(_QWORD *)(a1 + 1296);
          *(_DWORD *)buf = 134218496;
          *(_QWORD *)&buf[4] = v19;
          *(_WORD *)&buf[12] = 2048;
          *(_QWORD *)&buf[14] = v7;
          v58 = 2048;
          v59 = v17;
          _os_log_impl(&dword_19F029000, v18, OS_LOG_TYPE_INFO, "Exceeded Metal Buffer threshold of %llu with a count of %llu resources. Starting scaling cache down with the new cache size factor of %f", buf, 0x20u);
        }

        *(double *)(a1 + 1328) = v17;
      }
    }
    if (v7 <= *(_QWORD *)(a1 + 1288))
    {
      *(_DWORD *)(a1 + 1352) = -1;
      if (*(double *)(a1 + 1344) != 5.0)
      {
        if (GEOGetVectorKitVKDefaultLog_onceToken != -1)
          dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_4_11772);
        v35 = (id)GEOGetVectorKitVKDefaultLog_log;
        if (os_log_type_enabled(v35, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 134217984;
          *(_QWORD *)&buf[4] = v7;
          _os_log_impl(&dword_19F029000, v35, OS_LOG_TYPE_INFO, "Metal Buffer threshold no longer exceeded with current count of %llu buffer resources", buf, 0xCu);
        }

      }
      *(_QWORD *)(a1 + 1344) = 0x4014000000000000;
    }
    else
    {
      v20 = a3 - (double)*(uint64_t *)(a1 + 1336);
      v21 = *(double *)(a1 + 1344);
      if (v20 > v21)
      {
        *(double *)(a1 + 1344) = fmin(fmax(v21 + v21, 5.0), 900.0);
        if (GEOGetVectorKitVKDefaultLog_onceToken != -1)
          dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_4_11772);
        v22 = (id)GEOGetVectorKitVKDefaultLog_log;
        if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
        {
          v23 = *(_QWORD *)(a1 + 1288);
          *(_DWORD *)buf = 134219266;
          *(_QWORD *)&buf[4] = v23;
          *(_WORD *)&buf[12] = 2048;
          *(_QWORD *)&buf[14] = v7;
          v58 = 2048;
          v59 = v20;
          v60 = 2080;
          v61 = "false";
          v62 = 2080;
          v63 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/src/MDMapEngine.mm";
          v64 = 1024;
          v65 = 2214;
          _os_log_impl(&dword_19F029000, v22, OS_LOG_TYPE_ERROR, "Exceeded Metal Buffer threshold of %llu with a count of %llu resources, pruning resources now (Time since last prune:%f): Assertion with expression - %s : Failed in file - %s line - %i", buf, 0x3Au);
        }

        v24 = **(uint64_t ***)(a1 + 4512);
        if (v24 != *(uint64_t **)(*(_QWORD *)(a1 + 4512) + 8) && *v24 != 0x4BCD00F88A8100BELL)
        {
          v25 = v24 + 5;
          do
          {
            v26 = *v25;
            v25 += 5;
          }
          while (v26 != 0x4BCD00F88A8100BELL);
          v24 = v25 - 5;
        }
        v27 = (void (***)(_QWORD, uint64_t, const char *))v24[3];
        v28 = (std::__shared_weak_count *)v24[4];
        if (v28)
        {
          p_shared_owners = (unint64_t *)&v28->__shared_owners_;
          do
            v30 = __ldxr(p_shared_owners);
          while (__stxr(v30 + 1, p_shared_owners));
          do
            v31 = __ldaxr(p_shared_owners);
          while (__stlxr(v31 - 1, p_shared_owners));
          if (!v31)
          {
            ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
            std::__shared_weak_count::__release_weak(v28);
          }
        }
        (**v27)(v27, 2, "");
        v32 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
        *(_QWORD *)buf = &off_1E42D49F0;
        *(_QWORD *)&buf[8] = a1;
        v59 = COERCE_DOUBLE(buf);
        geo::TaskQueue::barrierSync(v32, buf);
        v33 = v59;
        if (*(_BYTE **)&v59 == buf)
        {
          v34 = 4;
          v33 = COERCE_DOUBLE(buf);
        }
        else
        {
          if (v59 == 0.0)
          {
LABEL_58:
            *(_QWORD *)(a1 + 1336) = (uint64_t)a3;
            *(_DWORD *)(a1 + 1352) = -1;
            goto LABEL_59;
          }
          v34 = 5;
        }
        (*(void (**)(void))(**(_QWORD **)&v33 + 8 * v34))();
        goto LABEL_58;
      }
      v36 = v21 - v20;
      v37 = ((v21 - v20) * 0.1);
      if (*(_DWORD *)(a1 + 1352) != v37)
      {
        if (GEOGetVectorKitVKDefaultLog_onceToken != -1)
          dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_4_11772);
        v38 = (id)GEOGetVectorKitVKDefaultLog_log;
        if (os_log_type_enabled(v38, OS_LOG_TYPE_INFO))
        {
          v39 = *(_QWORD *)(a1 + 1288);
          *(_DWORD *)buf = 134218752;
          *(_QWORD *)&buf[4] = v39;
          *(_WORD *)&buf[12] = 2048;
          *(_QWORD *)&buf[14] = v7;
          v58 = 2048;
          v59 = v36;
          v60 = 2048;
          v61 = *(const char **)&v20;
          _os_log_impl(&dword_19F029000, v38, OS_LOG_TYPE_INFO, "Exceeded Metal Buffer threshold of %llu with a count of %llu resources. Waiting %f seconds to prune resources. (Time since last prune:%f)", buf, 0x2Au);
        }

        *(_DWORD *)(a1 + 1352) = v37;
      }
    }
  }
LABEL_59:
  md::MapEngine::updateRunLoopStatus((md::MapEngine *)a1);
  v40 = *(_QWORD *)(a1 + 88);
  if (v40 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v40 + 24))(v40))
  {
    if (GEOGetVectorKitPerformanceLog_onceToken != -1)
      dispatch_once(&GEOGetVectorKitPerformanceLog_onceToken, &__block_literal_global_13_11780);
    v41 = (id)GEOGetVectorKitPerformanceLog_log;
    if (os_signpost_enabled(v41))
    {
      *(_WORD *)buf = 0;
      _os_signpost_emit_with_name_impl(&dword_19F029000, v41, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "DisplayLinkSkip", (const char *)&unk_1A0189141, buf, 2u);
    }

    v42 = a2[3];
    if (v42)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v42 + 48))(v42);
    }
    else
    {
      std::__throw_bad_function_call[abi:nn180100]();
      __break(1u);
    }
    return;
  }
  if (GEOGetVectorKitPerformanceLog_onceToken != -1)
    dispatch_once(&GEOGetVectorKitPerformanceLog_onceToken, &__block_literal_global_13_11780);
  v43 = (id)GEOGetVectorKitPerformanceLog_log;
  v44 = v43;
  v45 = *(_QWORD *)(a1 + 1216);
  if (v45 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v43))
  {
    *(_WORD *)buf = 0;
    _os_signpost_emit_with_name_impl(&dword_19F029000, v44, OS_SIGNPOST_INTERVAL_BEGIN, v45, "Frame", (const char *)&unk_1A0189141, buf, 2u);
  }

  rep = std::chrono::steady_clock::now().__d_.__rep_;
  v47 = operator new(0x18uLL);
  *v47 = &off_1E42D4BA0;
  v47[1] = a1;
  v47[2] = rep;
  v56 = v47;
  v48 = a2[3];
  if (!v48)
    goto LABEL_75;
  if ((_QWORD *)v48 != a2)
  {
    v48 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v48 + 16))(v48);
LABEL_75:
    v54 = (_QWORD *)v48;
    goto LABEL_77;
  }
  v54 = v53;
  (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, v53);
LABEL_77:
  md::MapEngine::renderScene(a1, v55, v53, a3);
  v49 = v54;
  if (v54 == v53)
  {
    v50 = 4;
    v49 = v53;
    goto LABEL_81;
  }
  if (v54)
  {
    v50 = 5;
LABEL_81:
    (*(void (**)(void))(*v49 + 8 * v50))();
  }
  v51 = v56;
  if (v56 == v55)
  {
    v52 = 4;
    v51 = v55;
  }
  else
  {
    if (!v56)
      return;
    v52 = 5;
  }
  (*(void (**)(void))(*v51 + 8 * v52))();
}

void sub_19F106D78(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, char *a20)
{
  char *v20;
  char *v22;
  uint64_t v23;

  v22 = a20;
  if (a20 == v20)
  {
    v23 = 4;
    v22 = &a17;
  }
  else
  {
    if (!a20)
      _Unwind_Resume(exception_object);
    v23 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v22 + 8 * v23))();
  _Unwind_Resume(exception_object);
}

void md::MapEngine::updateRunLoopStatus(md::MapEngine *this)
{
  double v2;
  double v3;
  char v4;
  double v5;
  unsigned __int8 v6;
  id WeakRetained;
  id v8;
  int v9;
  unint64_t *v10;
  unint64_t v11;
  int v12;
  void *v13;
  char v14;
  uint64_t v15;
  _QWORD *v16;
  int v17;
  int v18;
  unsigned int *v19;
  unsigned int v20;
  NSObject *v21;
  _BOOL4 v22;
  const char *v23;
  uint8_t *v24;
  unint64_t *v25;
  unint64_t v26;
  unsigned __int8 v27;
  __int16 v28;
  __int16 v29;

  objc_msgSend(*((id *)this + 105), "size");
  v4 = *((_BYTE *)this + 1177);
  if (v4)
    v4 = *((_BYTE *)this + 1178) == 0;
  if ((v4 & 1) != 0
    || *((_BYTE *)this + 1176)
    || (v5 = v3 * v2, (objc_msgSend(*((id *)this + 105), "hasRenderTarget") & 1) == 0) && *((_QWORD *)this + 150) != 1
    || v5 <= 0.0)
  {
    (*(void (**)(_QWORD, _QWORD))(**((_QWORD **)this + 13) + 48))(*((_QWORD *)this + 13), 0);
  }
  else
  {
    v6 = atomic_load((unsigned __int8 *)this + 1181);
    (*(void (**)(_QWORD, BOOL))(**((_QWORD **)this + 13) + 48))(*((_QWORD *)this + 13), (v6 & 1) == 0);
    if ((v6 & 1) == 0)
    {
      WeakRetained = objc_loadWeakRetained((id *)this + 106);

      if (WeakRetained
        && (v8 = objc_loadWeakRetained((id *)this + 106), v9 = objc_msgSend(v8, "wantsTimerTick"), v8, v9))
      {
        v10 = (unint64_t *)((char *)this + 1392);
        do
          v11 = __ldaxr(v10);
        while (__stlxr(v11 | 0x20, v10));
        v12 = 1;
      }
      else
      {
        v12 = 0;
      }
      if (md::AnimationManager::wantsTimerTick(*((md::AnimationManager **)this + 13)))
      {
        v25 = (unint64_t *)((char *)this + 1392);
        do
          v26 = __ldaxr(v25);
        while (__stlxr(v26 | 0x40, v25));
      }
      if (((v12 | md::AnimationManager::wantsTimerTick(*((md::AnimationManager **)this + 13))) & 1) != 0)
        goto LABEL_16;
      v27 = atomic_load((unsigned __int8 *)this + 1179);
      if ((v27 & 1) != 0)
        goto LABEL_16;
    }
  }
  +[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings");
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  v14 = objc_msgSend(v13, "layoutContinuously");

  if ((v14 & 1) != 0)
  {
LABEL_16:
    v16 = (_QWORD *)((char *)this + 88);
    v15 = *((_QWORD *)this + 11);
    if (!v15)
      goto LABEL_34;
    v17 = 1;
    v18 = 1;
    goto LABEL_22;
  }
  if (*((_BYTE *)this + 1160))
    md::MapEngine::setDisplayRate((uint64_t)this, *((_QWORD *)this + 146));
  v16 = (_QWORD *)((char *)this + 88);
  v15 = *((_QWORD *)this + 11);
  if (!v15)
    goto LABEL_34;
  v17 = 0;
  v18 = *((unsigned __int8 *)this + 1160);
LABEL_22:
  if (v18 == (*(unsigned int (**)(uint64_t))(*(_QWORD *)v15 + 24))(v15))
  {
    v19 = (unsigned int *)((char *)this + 912);
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 + 1, v19));
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)*v16 + 16))(*v16, v17 ^ 1u);
    if (GEOGetVectorKitPerformanceLog_onceToken != -1)
      dispatch_once(&GEOGetVectorKitPerformanceLog_onceToken, &__block_literal_global_13_11780);
    v21 = (id)GEOGetVectorKitPerformanceLog_log;
    v22 = os_signpost_enabled(v21);
    if (v17)
    {
      if (v22)
      {
        v29 = 0;
        v23 = "DisplayLinkUnpause";
        v24 = (uint8_t *)&v29;
LABEL_32:
        _os_signpost_emit_with_name_impl(&dword_19F029000, v21, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, v23, (const char *)&unk_1A0189141, v24, 2u);
      }
    }
    else if (v22)
    {
      v28 = 0;
      v23 = "DisplayLinkPause";
      v24 = (uint8_t *)&v28;
      goto LABEL_32;
    }

  }
LABEL_34:
  atomic_store(0, (unsigned __int8 *)this + 1180);
}

void sub_19F1070B0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t ggl::DisplayLink::paused(id *this)
{
  return objc_msgSend(this[9], "isPaused");
}

void md::AnimationManager::setEnabled(md::AnimationManager *this, int a2)
{
  uint64_t **v2;
  uint64_t *v3;
  float v4;
  double v5;

  if (*((unsigned __int8 *)this + 232) != a2)
  {
    *((_BYTE *)this + 232) = a2;
    v2 = (uint64_t **)*((_QWORD *)this + 26);
    if (a2)
    {
      for (; v2; v2 = (uint64_t **)*v2)
      {
        v3 = v2[3];
        objc_msgSend(v3, "frequency");
        v5 = 1.0 / v4;

        (*(void (**)(uint64_t *, double, double))(*v2[5] + 32))(v2[5], 0.0, v5);
      }
    }
    else
    {
      for (; v2; v2 = (uint64_t **)*v2)
        (*(void (**)(uint64_t *))(*v2[5] + 40))(v2[5]);
    }
  }
}

void sub_19F107170(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19F107208(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t ggl::SnapshotRunLoop::paused(ggl::SnapshotRunLoop *this)
{
  return *((unsigned __int8 *)this + 64);
}

uint64_t ggl::DisplayLink::setPaused(id *this, uint64_t a2)
{
  return objc_msgSend(this[9], "setPaused:", a2);
}

void md::LabelManager::updateDebugSettings(md::LabelManager *this)
{
  _BYTE *v2;
  _BOOL4 v3;
  uint64_t v4;
  const char *v5;
  const char *v6;
  size_t v7;
  size_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  md::LabelManager *v12;
  void *p_p;
  NSObject *v14;
  BOOL v15;
  __int16 v16;
  BOOL v17;
  __int16 v18;
  BOOL v19;
  __int16 v20;
  BOOL v21;
  __int16 v22;
  BOOL v23;
  int v24;
  BOOL v25;
  BOOL v26;
  BOOL v27;
  BOOL v28;
  int v29;
  int v30;
  char v31;
  float v32;
  unsigned int v33;
  char v34;
  int v35;
  int v36;
  int v37;
  int v38;
  void **v39;
  uint64_t v40;
  float *v41;
  uint64_t v42;
  float *v43;
  float v44;
  _QWORD *v46;
  unint64_t v47;
  int *v52;
  md::LabelManager *v53;
  int *v54;
  int v55;
  int v56;
  unsigned int v57;
  void **v58;
  uint64_t v59;
  id v60;
  id v61;
  _BYTE __dst[24];
  void *__p;
  md::LabelManager *v64;
  uint64_t v65;
  _QWORD v66[5];
  char v67;
  uint64_t v68;

  v68 = *MEMORY[0x1E0C80C00];
  v2 = (_BYTE *)*((_QWORD *)this + 483);
  v3 = *v2 != 0;
  if (!*v2)
    goto LABEL_39;
  *v2 = 0;
  v4 = *((_QWORD *)this + 481);
  v5 = (const char *)(v4 + 16);
  if (*(char *)(v4 + 39) < 0)
    v5 = *(const char **)v5;
  if (v5)
    v6 = v5;
  else
    v6 = "\n    {\n        default:false,\n    }\n    ";
  *((_BYTE *)this + 3860) = 0;
  *((_DWORD *)this + 964) = 0;
  v7 = strlen(v6);
  if (v7 >= 0x7FFFFFFFFFFFFFF8)
    abort();
  v8 = v7;
  if (v7 >= 0x17)
  {
    v10 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17)
      v10 = v7 | 7;
    v11 = v10 + 1;
    v9 = operator new(v10 + 1);
    *(_QWORD *)&__dst[8] = v8;
    *(_QWORD *)&__dst[16] = v11 | 0x8000000000000000;
    *(_QWORD *)__dst = v9;
  }
  else
  {
    __dst[23] = v7;
    v9 = __dst;
    if (!v7)
      goto LABEL_15;
  }
  memcpy(v9, v6, v8);
LABEL_15:
  v9[v8] = 0;
  md::StyleSettingsParser::StyleSettingsParser((uint64_t)&__p, (uint64_t)__dst);
  if ((__dst[23] & 0x80000000) != 0)
    operator delete(*(void **)__dst);
  v12 = (md::LabelManager *)HIBYTE(v65);
  if (v65 >= 0)
    p_p = &__p;
  else
    p_p = __p;
  if (v65 < 0)
    v12 = v64;
  *(_QWORD *)__dst = p_p;
  *(_QWORD *)&__dst[8] = v12;
  md::StyleSettingsParser::parseNode((uint64_t)&__p, (uint64_t)v66, (unsigned __int8 **)__dst);
  if (v67)
  {
    if (GEOGetVectorKitVKDefaultLog_onceToken != -1)
      dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_4_11772);
    v14 = (id)GEOGetVectorKitVKDefaultLog_log;
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)__dst = 136315138;
      *(_QWORD *)&__dst[4] = v6;
      _os_log_impl(&dword_19F029000, v14, OS_LOG_TYPE_ERROR, "LabelDebugSettings: unable to parse label hide options: %s", __dst, 0xCu);
    }

  }
  else
  {
    __dst[23] = 7;
    strcpy(__dst, "default");
    v15 = (unsigned __int16)md::StyleSettingsObjectNode::getValue<BOOL>((uint64_t)v66, (const void **)__dst) > 0x100u;
    *((_BYTE *)this + 3856) = v15;
    __dst[23] = 6;
    strcpy(__dst, "points");
    v16 = md::StyleSettingsObjectNode::getValue<BOOL>((uint64_t)v66, (const void **)__dst);
    v17 = v16 != 0;
    if ((v16 & 0xFF00) == 0)
      v17 = v15;
    *((_BYTE *)this + 3857) = v17;
    __dst[23] = 5;
    strcpy(__dst, "lines");
    v18 = md::StyleSettingsObjectNode::getValue<BOOL>((uint64_t)v66, (const void **)__dst);
    v19 = v18 != 0;
    if ((v18 & 0xFF00) == 0)
      v19 = v15;
    *((_BYTE *)this + 3858) = v19;
    __dst[23] = 17;
    strcpy(__dst, "physical-features");
    v20 = md::StyleSettingsObjectNode::getValue<BOOL>((uint64_t)v66, (const void **)__dst);
    v21 = v20 != 0;
    if ((v20 & 0xFF00) == 0)
      v21 = v15;
    *((_BYTE *)this + 3859) = v21;
    __dst[23] = 6;
    strcpy(__dst, "arrows");
    v22 = md::StyleSettingsObjectNode::getValue<BOOL>((uint64_t)v66, (const void **)__dst);
    v23 = v22 != 0;
    if ((v22 & 0xFF00) == 0)
      v23 = v15;
    *((_BYTE *)this + 3860) = v23;
  }
  v66[0] = &off_1E429F8B0;
  std::__tree<std::__value_type<std::string,std::unique_ptr<md::StyleSettingsNode>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<md::StyleSettingsNode>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<md::StyleSettingsNode>>>>::destroy((char *)v66[3]);
  if (SHIBYTE(v65) < 0)
    operator delete(__p);
LABEL_39:
  +[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings");
  v60 = (id)objc_claimAutoreleasedReturnValue();
  *((_BYTE *)this + 3608) = objc_msgSend(v60, "layoutContinuously");
  *((_BYTE *)this + 3609) = objc_msgSend(v60, "labelUpdateMapTilesContinuously");
  *((_BYTE *)this + 3610) = objc_msgSend(v60, "labelCollisionDisabled") ^ 1;
  *((_BYTE *)this + 3611) = objc_msgSend(v60, "labelCollideContinuously");
  atomic_store(objc_msgSend(v60, "labelTileDecodeEnabled"), (unsigned __int8 *)this + 3622);
  *((_BYTE *)this + 3646) = objc_msgSend(v60, "disableBackgroundLabelLayout");
  *((_BYTE *)this + 3616) = objc_msgSend(v60, "paintLabelRoadFeatures");
  *((_BYTE *)this + 3617) = objc_msgSend(v60, "paintLabelCounts");
  *((_BYTE *)this + 3618) = objc_msgSend(v60, "showClientStyleAttributes");
  *((_BYTE *)this + 3619) = objc_msgSend(v60, "showLabelsNavState");
  *((_BYTE *)this + 3620) = objc_msgSend(v60, "showFlexZoneRanges");
  *((_BYTE *)this + 3623) = objc_msgSend(v60, "paintLabelCollisionLines");
  *((_BYTE *)this + 3624) = *(_BYTE *)(*((_QWORD *)this + 42) + 157) ^ 1;
  *((_BYTE *)this + 3625) = objc_msgSend(v60, "textlessPOIsEnabled");
  objc_msgSend(v60, "textlessPOIsMinZoom");
  *((_DWORD *)this + 908) = v24;
  *((_BYTE *)this + 3626) = objc_msgSend(v60, "displayTextureAtlas");
  *((_WORD *)this + 1814) = objc_msgSend(v60, "textureAtlasPageIndex");
  *((_BYTE *)this + 3627) = objc_msgSend(v60, "textureAtlasIndex");
  if (objc_msgSend(v60, "labelFlipAlternatePositionsEnable"))
    *((_BYTE *)this + 3624) ^= 1u;
  v25 = (objc_msgSend(v60, "labelHideLineFeatures") & 1) != 0 || *((_BYTE *)this + 3858) != 0;
  *((_BYTE *)this + 3637) = v25;
  v26 = (objc_msgSend(v60, "labelHidePointFeatures") & 1) != 0 || *((_BYTE *)this + 3857) != 0;
  *((_BYTE *)this + 3638) = v26;
  v27 = (objc_msgSend(v60, "labelHidePhysicalFeatures") & 1) != 0 || *((_BYTE *)this + 3859) != 0;
  *((_BYTE *)this + 3639) = v27;
  v28 = (objc_msgSend(v60, "hideDirectionalArrows") & 1) != 0 || *((_BYTE *)this + 3860) != 0;
  *((_BYTE *)this + 3640) = v28;
  v29 = *((unsigned __int8 *)this + 3856);
  *((_BYTE *)this + 3636) = v29;
  if (*((_BYTE *)this + 3637) || *((_BYTE *)this + 3638))
  {
    v28 = 1;
  }
  else if (*((unsigned __int8 *)this + 3639) | v29)
  {
    v28 = 1;
  }
  *((_BYTE *)this + 3641) = v28;
  *((_BYTE *)this + 3621) = objc_msgSend(v60, "labelTransitLineCollisionEnabled");
  *((_BYTE *)this + 3642) = objc_msgSend(v60, "labelHighlightingVerboseLoggingEnabled");
  *((_BYTE *)this + 3643) = objc_msgSend(v60, "disableOverlayTextConsole");
  *((_BYTE *)this + 3644) = objc_msgSend(v60, "labelHighlightingTransitFeaturesOnly");
  *((_DWORD *)this + 912) = objc_msgSend(v60, "debugOverlayOffsetX");
  *((_DWORD *)this + 913) = objc_msgSend(v60, "debugOverlayOffsetY");
  *((_BYTE *)this + 3657) = objc_msgSend(v60, "showGRLDebugInfo");
  atomic_store(objc_msgSend(v60, "labelAllowDefaultStyle"), (unsigned __int8 *)this + 3658);
  atomic_store(objc_msgSend(v60, "labelUseDefaultStyle"), (unsigned __int8 *)this + 3659);
  *((_BYTE *)this + 3662) = objc_msgSend(v60, "labelAllowDefaultIcon");
  *((_BYTE *)this + 3663) = objc_msgSend(v60, "labelRingAnimationEnabled");
  *((_BYTE *)this + 3664) = objc_msgSend(v60, "labelDebugHoverLayers");
  *((_BYTE *)this + 3665) = objc_msgSend(v60, "labelShowPlaceholderIcons");
  atomic_store(*((_BYTE *)this + 3784), (unsigned __int8 *)this + 3660);
  atomic_store(*((_BYTE *)this + 3704), (unsigned __int8 *)this + 3661);
  *((_BYTE *)this + 3656) = objc_msgSend(v60, "enableLabelAnimationTuning");
  *((_BYTE *)this + 3686) = objc_msgSend(v60, "labelPOIUpdatesDisabled");
  if (objc_msgSend(v60, "shouldOverrideSuperSampleKernelSize"))
  {
    objc_msgSend(v60, "sdfGlyphSuperSampleKernelSize");
    v31 = 1;
  }
  else
  {
    v31 = 0;
    v30 = 0;
  }
  *((_DWORD *)this + 917) = v30;
  *((_BYTE *)this + 3672) = v31;
  if (objc_msgSend(v60, "shouldOverrideUpscaleFactor"))
  {
    objc_msgSend(v60, "sdfGlyphShaderUpscaleFactor");
    v33 = v32;
    v34 = 1;
  }
  else
  {
    v34 = 0;
    v33 = 0;
  }
  *((_DWORD *)this + 919) = v33;
  *((_BYTE *)this + 3680) = v34;
  *((_BYTE *)this + 3684) = objc_msgSend(v60, "shouldUseSDFGlyphs");
  *((_BYTE *)this + 3685) = objc_msgSend(v60, "shouldUseSDFSuperSampling");
  v35 = *((unsigned __int8 *)this + 3614);
  if (v35 != objc_msgSend(v60, "labelFacingCullDisabled"))
  {
    *((_BYTE *)this + 3614) = objc_msgSend(v60, "labelFacingCullDisabled");
    v3 = 1;
  }
  v36 = *((unsigned __int8 *)this + 3613);
  if (v36 != objc_msgSend(v60, "labelDedupingDisabled"))
  {
    *((_BYTE *)this + 3613) = objc_msgSend(v60, "labelDedupingDisabled");
    v3 = 1;
  }
  v37 = *((unsigned __int8 *)this + 3612);
  if (v37 != (objc_msgSend(v60, "labelOcclusionDisabled") ^ 1))
  {
    *((_BYTE *)this + 3612) = objc_msgSend(v60, "labelOcclusionDisabled") ^ 1;
    v3 = 1;
  }
  v38 = *((unsigned __int8 *)this + 3645);
  if (v38 == objc_msgSend(v60, "labelAutoOffsetRoadText"))
  {
    if (!v3)
      goto LABEL_77;
  }
  else
  {
    *((_BYTE *)this + 3645) = objc_msgSend(v60, "labelAutoOffsetRoadText");
  }
  __p = &off_1E42C9A28;
  v64 = this;
  v65 = 0;
  v66[0] = &__p;
  md::LabelManager::queueCommand(this, 19, 1, &__p);
  v39 = (void **)v66[0];
  if ((void **)v66[0] == &__p)
  {
    v40 = 4;
    v39 = &__p;
    goto LABEL_76;
  }
  if (v66[0])
  {
    v40 = 5;
LABEL_76:
    (*((void (**)(void))*v39 + v40))();
  }
LABEL_77:

  +[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings");
  v61 = (id)objc_claimAutoreleasedReturnValue();
  if ((objc_msgSend(v61, "labelHighlighting") & 1) == 0
    && (objc_msgSend(v61, "lockLabelHighlighting") & 1) == 0
    && !*((_BYTE *)this + 3643))
  {
    (*(void (**)(_QWORD))(**((_QWORD **)this + 30) + 272))(*((_QWORD *)this + 30));
  }
  (*(void (**)(_QWORD))(**((_QWORD **)this + 30) + 248))(*((_QWORD *)this + 30));
  v41 = (float *)((char *)this + 3668);
  v42 = *((_QWORD *)this + 41);
  v43 = (float *)(v42 + 1852);
  if (*((_BYTE *)this + 3672) && *(_BYTE *)(v42 + 1856))
  {
    if (*v41 == *v43)
      goto LABEL_89;
  }
  else if ((*((_BYTE *)this + 3672) != 0) == (*(_BYTE *)(v42 + 1856) != 0))
  {
    goto LABEL_89;
  }
  v44 = *v41;
  *(_BYTE *)(v42 + 1856) = *((_BYTE *)this + 3672);
  *v43 = v44;
  if (!*(_BYTE *)(v42 + 1856))
    v43 = (float *)&kDefaultSdfGlyphSuperSampleKernelSize;
  _S0 = *v43;
  v46 = *(_QWORD **)(v42 + 992);
  v47 = v46[1];
  __asm { FCVT            H0, S0 }
  *(_WORD *)(v46[9] + 16) = LOWORD(_S0);
  if (v46[8] > v47)
    v47 = v46[8];
  v46[7] = 0;
  v46[8] = v47;
LABEL_89:
  v52 = (int *)((char *)this + 3676);
  *(_BYTE *)(v42 + 1861) = *((_BYTE *)this + 3684);
  *(_BYTE *)(v42 + 1860) = *((_BYTE *)this + 3685);
  v53 = (md::LabelManager *)*((_QWORD *)this + 35);
  v54 = (int *)((char *)v53 + 68);
  if (*((_BYTE *)v53 + 72) && *((_BYTE *)this + 3680))
  {
    if (*v54 == *v52)
      goto LABEL_106;
  }
  else if ((*((_BYTE *)v53 + 72) != 0) == (*((_BYTE *)this + 3680) != 0))
  {
    goto LABEL_106;
  }
  v55 = *v52;
  *((_BYTE *)v53 + 72) = *((_BYTE *)this + 3680);
  *v54 = v55;
  if (!*((_BYTE *)v53 + 72))
    v54 = (int *)&kDefaultUpscaleFactor;
  v56 = *v54;
  v57 = atomic_load((unsigned int *)(*(_QWORD *)v53 + 104));
  if (v56 != v57)
  {
    __p = &off_1E42D0B38;
    v64 = v53;
    v66[0] = &__p;
    md::LabelGlyphImageLoader::queueCommand(v53, &__p);
    v58 = (void **)v66[0];
    if ((void **)v66[0] == &__p)
    {
      v59 = 4;
      v58 = &__p;
      goto LABEL_105;
    }
    if (v66[0])
    {
      v59 = 5;
LABEL_105:
      (*((void (**)(void))*v58 + v59))();
    }
  }
LABEL_106:

}

void sub_19F107C24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, char *a18)
{
  char *v18;
  char *v20;
  uint64_t v21;

  v20 = a18;
  if (a18 == v18)
  {
    v21 = 4;
    v20 = &a15;
  }
  else
  {
    if (!a18)
      goto LABEL_6;
    v21 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v20 + 8 * v21))();
LABEL_6:

  _Unwind_Resume(a1);
}

uint64_t md::CompositeLabeler::clearDebugHighlight(uint64_t this)
{
  uint64_t *v1;
  uint64_t *i;
  uint64_t v3;

  v1 = *(uint64_t **)(this + 8);
  for (i = *(uint64_t **)(this + 16); v1 != i; this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 272))(v3))
    v3 = *v1++;
  return this;
}

void md::StandardLabeler::clearDebugHighlight(md::StandardLabeler *this)
{
  _QWORD v1[2];
  _DWORD v2[4];
  uint64_t v3;
  uint64_t v4[2];

  v4[0] = 0;
  v4[1] = 0;
  v1[1] = 0;
  v2[0] = 0;
  v1[0] = 0;
  v2[3] = -1;
  *(_QWORD *)&v2[1] = -1;
  v3 = 0;
  md::StandardLabeler::setDebugHighlight((uint64_t)this, v4, v1);
}

void sub_19F107D1C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](v2 - 32);
  _Unwind_Resume(a1);
}

void md::StandardLabeler::setDebugHighlight(uint64_t a1, uint64_t *a2, _QWORD *a3)
{
  uint64_t v6;
  unsigned __int8 v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  unsigned __int8 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  NSObject *v30;
  void **v31;
  NSObject *v32;
  void **v33;
  void *__p[2];
  char v35;
  uint8_t buf[4];
  void **v37;
  uint64_t v38;

  v38 = *MEMORY[0x1E0C80C00];
  if (!*(_BYTE *)(*(_QWORD *)(a1 + 24) + 3644)
    || !*a3
    || (*(unsigned int (**)(_QWORD))(*(_QWORD *)*a3 + 264))(*a3) - 8 <= 5)
  {
    v6 = *(_QWORD *)(a1 + 184);
    if (v6 != *a2)
    {
      if (v6)
      {
        atomic_store(0, (unsigned __int8 *)(v6 + 1242));
        v7 = atomic_load((unsigned __int8 *)(v6 + 1242));
        if ((v7 & 1) == 0)
          *(_QWORD *)(v6 + 352) = 0;
      }
      v8 = *a2;
      v9 = a2[1];
      if (v9)
      {
        v10 = (unint64_t *)(v9 + 8);
        do
          v11 = __ldxr(v10);
        while (__stxr(v11 + 1, v10));
      }
      v12 = *(std::__shared_weak_count **)(a1 + 192);
      *(_QWORD *)(a1 + 184) = v8;
      *(_QWORD *)(a1 + 192) = v9;
      if (v12)
      {
        p_shared_owners = (unint64_t *)&v12->__shared_owners_;
        do
          v14 = __ldaxr(p_shared_owners);
        while (__stlxr(v14 - 1, p_shared_owners));
        if (!v14)
        {
          ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
          std::__shared_weak_count::__release_weak(v12);
        }
        v8 = *(_QWORD *)(a1 + 184);
      }
      if (v8)
      {
        atomic_store(1u, (unsigned __int8 *)(v8 + 1242));
        v15 = atomic_load((unsigned __int8 *)(v8 + 1242));
        if ((v15 & 1) == 0)
          *(_QWORD *)(v8 + 352) = 0;
      }
      v16 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 136);
      if (v16)
      {
        v17 = *(_QWORD *)(v16 + 24);
        if (v17)
        {
          __p[0] = *(void **)(a1 + 24);
          buf[0] = 9;
          (*(void (**)(uint64_t, void **, uint8_t *))(*(_QWORD *)v17 + 48))(v17, __p, buf);
        }
      }
    }
    v18 = *(_QWORD *)(a1 + 200);
    v19 = *a3;
    if (v18 != *a3
      || *(_DWORD *)(a1 + 216) != *((_DWORD *)a3 + 4)
      || *(_DWORD *)(a1 + 220) != *((_DWORD *)a3 + 5)
      || *(_DWORD *)(a1 + 224) != *((_DWORD *)a3 + 6)
      || *(_DWORD *)(a1 + 228) != *((_DWORD *)a3 + 7))
    {
      if (v18)
      {
        atomic_store(0, (unsigned __int8 *)(v18 + 139));
        v19 = *a3;
      }
      v20 = a3[1];
      if (v20)
      {
        v21 = (unint64_t *)(v20 + 8);
        do
          v22 = __ldxr(v21);
        while (__stxr(v22 + 1, v21));
      }
      v23 = *(std::__shared_weak_count **)(a1 + 208);
      *(_QWORD *)(a1 + 200) = v19;
      *(_QWORD *)(a1 + 208) = v20;
      if (v23)
      {
        v24 = (unint64_t *)&v23->__shared_owners_;
        do
          v25 = __ldaxr(v24);
        while (__stlxr(v25 - 1, v24));
        if (!v25)
        {
          ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
          std::__shared_weak_count::__release_weak(v23);
        }
      }
      *(_DWORD *)(a1 + 216) = *((_DWORD *)a3 + 4);
      v26 = *(_OWORD *)((char *)a3 + 20);
      *(_DWORD *)(a1 + 236) = *((_DWORD *)a3 + 9);
      *(_OWORD *)(a1 + 220) = v26;
      v27 = *(_QWORD *)(a1 + 200);
      if (v27)
        atomic_store(1u, (unsigned __int8 *)(v27 + 139));
      v28 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 136);
      if (v28)
      {
        v29 = *(_QWORD *)(v28 + 24);
        if (v29)
        {
          __p[0] = *(void **)(a1 + 24);
          buf[0] = 9;
          (*(void (**)(uint64_t, void **, uint8_t *))(*(_QWORD *)v29 + 48))(v29, __p, buf);
        }
      }
    }
    if (*(_QWORD *)(a1 + 184))
    {
      if (GEOGetVectorKitLabelHighlightLog(void)::onceToken != -1)
        dispatch_once(&GEOGetVectorKitLabelHighlightLog(void)::onceToken, &__block_literal_global_22313);
      v30 = (id)GEOGetVectorKitLabelHighlightLog(void)::log;
      if (os_log_type_enabled(v30, OS_LOG_TYPE_INFO))
      {
        md::Label::debugString((md::Label *)__p, *(md::LabelManager **)(a1 + 184), *(_QWORD *)(a1 + 24), 1);
        v31 = v35 >= 0 ? __p : (void **)__p[0];
        *(_DWORD *)buf = 136315138;
        v37 = v31;
        _os_log_impl(&dword_19F029000, v30, OS_LOG_TYPE_INFO, "\n%s", buf, 0xCu);
        if (v35 < 0)
          operator delete(__p[0]);
      }

    }
    if (*(_QWORD *)(a1 + 200))
    {
      if (GEOGetVectorKitLabelHighlightLog(void)::onceToken != -1)
        dispatch_once(&GEOGetVectorKitLabelHighlightLog(void)::onceToken, &__block_literal_global_22313);
      v32 = (id)GEOGetVectorKitLabelHighlightLog(void)::log;
      if (os_log_type_enabled(v32, OS_LOG_TYPE_INFO))
      {
        (*(void (**)(void **__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 200) + 448))(__p, *(_QWORD *)(a1 + 200), *(_QWORD *)(a1 + 24), a1 + 216, 1);
        if (v35 >= 0)
          v33 = __p;
        else
          v33 = (void **)__p[0];
        *(_DWORD *)buf = 136315138;
        v37 = v33;
        _os_log_impl(&dword_19F029000, v32, OS_LOG_TYPE_INFO, "\n%s", buf, 0xCu);
        if (v35 < 0)
          operator delete(__p[0]);
      }

    }
  }
}

void sub_19F108134(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void md::CompositeLabeler::updateDebugSettings(md::CompositeLabeler *this)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  id v5;

  v2 = (uint64_t *)*((_QWORD *)this + 1);
  v3 = (uint64_t *)*((_QWORD *)this + 2);
  while (v2 != v3)
  {
    v4 = *v2++;
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 248))(v4);
  }
  +[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings");
  v5 = (id)objc_claimAutoreleasedReturnValue();
  *((_BYTE *)this + 40) = objc_msgSend(v5, "labelerOutputIndex");

}

void sub_19F1081C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void md::MapNavLabeler::updateDebugSettings(md::MapNavLabeler *this)
{
  id v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  char v7;
  id v8;

  +[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings");
  v8 = (id)objc_claimAutoreleasedReturnValue();
  *((_BYTE *)this + 827) = objc_msgSend(v8, "disableRouteAnnotationLimit");
  v2 = *((id *)this + 7);
  objc_msgSend(v2, "setDebugDisableRoadSignLimit:", objc_msgSend(v8, "disableRoadSignLimit"));

  v3 = *((_QWORD *)this + 9);
  *(_BYTE *)(v3 + 232) = objc_msgSend(v8, "enableTrafficFeatureLabelDebugging");
  v4 = *((_QWORD *)this + 8);
  *(_BYTE *)(v4 + 249) = objc_msgSend(v8, "enableRouteLineLabelingDebugging");
  v5 = objc_msgSend(v8, "enableRoadSignArtworkDebugging");
  v6 = *((_QWORD *)this + 87);
  if (v5 != (*(_BYTE *)(v6 + 24) != 0))
  {
    v7 = objc_msgSend(v8, "enableRoadSignArtworkDebugging");
    *(_BYTE *)(v6 + 24) = v7;
    *(_BYTE *)(*(_QWORD *)(v6 + 16) + 80) = v7;
    (*(void (**)(md::MapNavLabeler *, uint64_t))(*(_QWORD *)this + 104))(this, 2);
  }

}

void sub_19F1082A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void md::MapStandardLabeler::updateDebugSettings(md::MapStandardLabeler *this)
{
  id v2;

  +[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings");
  v2 = (id)objc_claimAutoreleasedReturnValue();
  *((_BYTE *)this + 452) = objc_msgSend(v2, "enableTrafficFeatureLabelDebugging");

}

void sub_19F108308(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_19F1090D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7, uint64_t a8, char a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, _Unwind_Exception *exception_object)
{
  void *v15;
  void *v16;

  _Unwind_Resume(a1);
}

void sub_19F10925C()
{
  JUMPOUT(0x19F109264);
}

float pitchForZ(_QWORD *a1, double a2)
{
  unsigned int v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  BOOL v10;
  unint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  BOOL v17;
  unsigned int v18;
  unint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  unint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  BOOL v29;
  float result;
  _QWORD *v31;
  _QWORD *v32;

  v2 = vcvtmd_s64_f64(a2);
  v3 = a1 + 1;
  v4 = (_QWORD *)*a1;
  v5 = (_QWORD *)*a1;
  if ((_QWORD *)*a1 != a1 + 1)
  {
    v6 = 0;
    v7 = (_QWORD *)*a1;
    do
    {
      v8 = (_QWORD *)v7[1];
      if (v8)
      {
        do
        {
          v9 = v8;
          v8 = (_QWORD *)*v8;
        }
        while (v8);
      }
      else
      {
        do
        {
          v9 = (_QWORD *)v7[2];
          v10 = *v9 == (_QWORD)v7;
          v7 = v9;
        }
        while (!v10);
      }
      ++v6;
      v7 = v9;
    }
    while (v9 != v3);
    v5 = (_QWORD *)*a1;
    do
    {
      v11 = v6 >> 1;
      v12 = v5;
      if (v6 != 1)
      {
        v14 = v6 >> 1;
        v15 = v5;
        do
        {
          v16 = (_QWORD *)v15[1];
          if (v16)
          {
            do
            {
              v12 = v16;
              v16 = (_QWORD *)*v16;
            }
            while (v16);
          }
          else
          {
            do
            {
              v12 = (_QWORD *)v15[2];
              v10 = *v12 == (_QWORD)v15;
              v15 = v12;
            }
            while (!v10);
          }
          v15 = v12;
          v17 = v14-- <= 1;
        }
        while (!v17);
      }
      if (*((unsigned __int8 *)v12 + 33) <= v2)
      {
        v13 = (_QWORD *)v12[1];
        if (v13)
        {
          do
          {
            v5 = v13;
            v13 = (_QWORD *)*v13;
          }
          while (v13);
        }
        else
        {
          do
          {
            v5 = (_QWORD *)v12[2];
            v10 = *v5 == (_QWORD)v12;
            v12 = v5;
          }
          while (!v10);
        }
        v11 = v6 + ~v11;
      }
      v6 = v11;
    }
    while (v11);
  }
  if (v5 == v3 || (*((unsigned __int8 *)v5 + 32) <= v2 ? (v17 = *((unsigned __int8 *)v5 + 33) > v2) : (v17 = 0), !v17))
    v5 = a1 + 1;
  v18 = vcvtpd_s64_f64(a2);
  if (v4 != v3)
  {
    v19 = 0;
    v20 = (_QWORD *)*a1;
    do
    {
      v21 = (_QWORD *)v20[1];
      if (v21)
      {
        do
        {
          v22 = v21;
          v21 = (_QWORD *)*v21;
        }
        while (v21);
      }
      else
      {
        do
        {
          v22 = (_QWORD *)v20[2];
          v10 = *v22 == (_QWORD)v20;
          v20 = v22;
        }
        while (!v10);
      }
      ++v19;
      v20 = v22;
    }
    while (v22 != v3);
    do
    {
      v23 = v19 >> 1;
      v24 = v4;
      if (v19 != 1)
      {
        v26 = v19 >> 1;
        v27 = v4;
        do
        {
          v28 = (_QWORD *)v27[1];
          if (v28)
          {
            do
            {
              v24 = v28;
              v28 = (_QWORD *)*v28;
            }
            while (v28);
          }
          else
          {
            do
            {
              v24 = (_QWORD *)v27[2];
              v10 = *v24 == (_QWORD)v27;
              v27 = v24;
            }
            while (!v10);
          }
          v27 = v24;
          v17 = v26-- <= 1;
        }
        while (!v17);
      }
      if (*((unsigned __int8 *)v24 + 33) <= v18)
      {
        v25 = (_QWORD *)v24[1];
        if (v25)
        {
          do
          {
            v4 = v25;
            v25 = (_QWORD *)*v25;
          }
          while (v25);
        }
        else
        {
          do
          {
            v4 = (_QWORD *)v24[2];
            v10 = *v4 == (_QWORD)v24;
            v24 = v4;
          }
          while (!v10);
        }
        v23 = v19 + ~v23;
      }
      v19 = v23;
    }
    while (v23);
  }
  if (v4 == v3
    || (*((unsigned __int8 *)v4 + 32) <= v18 ? (v29 = *((unsigned __int8 *)v4 + 33) > v18) : (v29 = 0), !v29))
  {
    v4 = a1 + 1;
  }
  if (v5 != v3 || (result = 0.0, v4 != v3))
  {
    v10 = v4 == v3;
    v31 = v4 + 5;
    if (v10)
      v31 = a1 + 6;
    if (v5 == v3)
      v32 = v31;
    else
      v32 = v5 + 5;
    return *(double *)v32;
  }
  return result;
}

void sub_19F109750(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19F109BD0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void ggl::SnapshotRunLoop::setPaused(ggl::SnapshotRunLoop *this, char a2)
{
  std::__shared_weak_count *v3;
  uint64_t v4;
  unint64_t *p_shared_weak_owners;
  unint64_t v6;
  int v7;
  int64_t v8;
  dispatch_time_t v9;
  NSObject *v10;
  unint64_t *v11;
  unint64_t v12;
  _QWORD v13[5];
  std::__shared_weak_count *v14;

  *((_BYTE *)this + 64) = a2;
  if ((a2 & 1) == 0)
  {
    v4 = *((_QWORD *)this + 5);
    v3 = (std::__shared_weak_count *)*((_QWORD *)this + 6);
    if (v3)
    {
      p_shared_weak_owners = (unint64_t *)&v3->__shared_weak_owners_;
      do
        v6 = __ldxr(p_shared_weak_owners);
      while (__stxr(v6 + 1, p_shared_weak_owners));
    }
    v7 = *((unsigned __int8 *)this + 66);
    *((_BYTE *)this + 66) = 1;
    if (v7)
      v8 = 10000000;
    else
      v8 = 0;
    v9 = dispatch_time(0, v8);
    v10 = *((_QWORD *)this + 7);
    v13[0] = MEMORY[0x1E0C809B0];
    v13[1] = 3321888768;
    v13[2] = ___ZN3ggl15SnapshotRunLoop9setPausedEb_block_invoke;
    v13[3] = &__block_descriptor_48_ea8_32c57_ZTSNSt3__18weak_ptrIN3ggl7RunLoop18_RunLoopCallbackerEEE_e5_v8__0l;
    v13[4] = v4;
    v14 = v3;
    if (v3)
    {
      v11 = (unint64_t *)&v3->__shared_weak_owners_;
      do
        v12 = __ldxr(v11);
      while (__stxr(v12 + 1, v11));
    }
    dispatch_after(v9, v10, v13);
    if (v14)
      std::__shared_weak_count::__release_weak(v14);
    if (v3)
      std::__shared_weak_count::__release_weak(v3);
  }
}

void sub_19F109D54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_19F109E04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{

  _Unwind_Resume(a1);
}

void sub_19F109E80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_19F109F4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{

  _Unwind_Resume(a1);
}

void sub_19F10A0BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{

  _Unwind_Resume(a1);
}

void md::LabelPool::labelForCustomFeature(uint64_t *a1, uint64_t a2, uint64_t a3, _QWORD *a4, unsigned int *a5, int a6)
{
  unint64_t v11;
  unsigned int v12;
  std::mutex *v13;
  uint64_t **v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  _BOOL4 v18;
  BOOL v19;
  uint64_t *v20;
  unint64_t v21;
  _BOOL4 v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  unint64_t v27;
  unsigned int v28;
  _BOOL4 v29;
  BOOL v30;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  int v35;
  unint64_t *v36;
  unint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *p_shared_owners;
  unint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  _BOOL4 v46;
  BOOL v47;
  uint64_t *v48;
  unint64_t v49;
  _BOOL4 v50;
  _BOOL4 v51;
  uint64_t v52;
  unint64_t v53;
  unsigned int v54;
  _BOOL4 v55;
  _BOOL4 v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t *v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t *v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t *v67;
  unint64_t v68;
  std::__shared_weak_count *v69;
  unint64_t *v70;
  unint64_t v71;

  *a1 = 0;
  a1[1] = 0;
  v11 = *(_QWORD *)(*a4 + 72);
  v12 = *a5;
  v13 = (std::mutex *)(a2 + 480);
  std::mutex::lock((std::mutex *)(a2 + 480));
  v14 = (uint64_t **)(a2 + 552);
  v15 = *(_QWORD *)(a2 + 552);
  if (!v15)
    goto LABEL_16;
  v16 = a2 + 552;
  do
  {
    v17 = *(_QWORD *)(v15 + 32);
    v19 = v17 == v11;
    v18 = v17 < v11;
    if (v19)
      v18 = *(_DWORD *)(v15 + 40) < v12;
    v19 = !v18;
    if (v18)
      v20 = (uint64_t *)(v15 + 8);
    else
      v20 = (uint64_t *)v15;
    if (v19)
      v16 = v15;
    v15 = *v20;
  }
  while (*v20);
  if ((uint64_t **)v16 == v14)
    goto LABEL_16;
  v21 = *(_QWORD *)(v16 + 32);
  v19 = v11 == v21;
  v22 = v11 < v21;
  if (v19)
    v22 = v12 < *(_DWORD *)(v16 + 40);
  if (v22)
  {
LABEL_16:
    v23 = operator new(0x538uLL);
    v23[1] = 0;
    v23[2] = 0;
    *v23 = &off_1E42DDE70;
    v24 = md::Label::Label((uint64_t)(v23 + 3), a3, a4, a5);
    *a1 = v24;
    a1[1] = (uint64_t)v23;
    v25 = a2 + 552;
    v26 = *v14;
    if (*v14)
    {
      while (1)
      {
        while (1)
        {
          v25 = (uint64_t)v26;
          v27 = v26[4];
          v28 = *(_DWORD *)(v25 + 40);
          v29 = v12 < v28;
          if (v11 != v27)
            v29 = v11 < v27;
          if (!v29)
            break;
          v26 = *(uint64_t **)v25;
          v14 = (uint64_t **)v25;
          if (!*(_QWORD *)v25)
            goto LABEL_28;
        }
        v30 = v28 < v12;
        if (!(v11 == v27 ? v30 : v27 < v11))
          break;
        v26 = *(uint64_t **)(v25 + 8);
        if (!v26)
        {
          v14 = (uint64_t **)(v25 + 8);
          goto LABEL_28;
        }
      }
    }
    else
    {
LABEL_28:
      v32 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a2 + 560) + 16))(*(_QWORD *)(a2 + 560), 64, 8);
      *(_QWORD *)(v32 + 32) = v11;
      *(_DWORD *)(v32 + 40) = v12;
      *(_QWORD *)(v32 + 48) = 0;
      *(_QWORD *)(v32 + 56) = 0;
      *(_QWORD *)v32 = 0;
      *(_QWORD *)(v32 + 8) = 0;
      *(_QWORD *)(v32 + 16) = v25;
      *v14 = (uint64_t *)v32;
      v33 = **(_QWORD **)(a2 + 544);
      v34 = (uint64_t *)v32;
      if (v33)
      {
        *(_QWORD *)(a2 + 544) = v33;
        v34 = *v14;
      }
      std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a2 + 552), v34);
      ++*(_QWORD *)(a2 + 568);
      v24 = *a1;
      v23 = (_QWORD *)a1[1];
      if (!v23)
      {
        v35 = a6;
LABEL_36:
        v38 = *(std::__shared_weak_count **)(v32 + 56);
        *(_QWORD *)(v32 + 48) = v24;
        *(_QWORD *)(v32 + 56) = v23;
        if (v38)
        {
          p_shared_owners = (unint64_t *)&v38->__shared_owners_;
          do
            v40 = __ldaxr(p_shared_owners);
          while (__stlxr(v40 - 1, p_shared_owners));
          if (!v40)
          {
            ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
            std::__shared_weak_count::__release_weak(v38);
          }
        }
        ++*(_DWORD *)(a2 + 744);
        goto LABEL_42;
      }
      v25 = v32;
    }
    v35 = a6;
    v36 = v23 + 1;
    do
      v37 = __ldxr(v36);
    while (__stxr(v37 + 1, v36));
    v32 = v25;
    goto LABEL_36;
  }
  v59 = *(_QWORD *)(v16 + 48);
  v58 = *(_QWORD *)(v16 + 56);
  if (v58)
  {
    v60 = (unint64_t *)(v58 + 8);
    do
      v61 = __ldxr(v60);
    while (__stxr(v61 + 1, v60));
  }
  *a1 = v59;
  a1[1] = v58;
  v35 = a6;
LABEL_42:
  std::mutex::unlock(v13);
  if (!v35)
    return;
  v42 = (uint64_t *)(a2 + 232);
  v41 = *(_QWORD *)(a2 + 232);
  if (!v41)
  {
    v52 = a2 + 232;
LABEL_74:
    v62 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a2 + 240) + 16))(*(_QWORD *)(a2 + 240), 64, 8);
    *(_QWORD *)(v62 + 32) = v11;
    *(_DWORD *)(v62 + 40) = v12;
    *(_QWORD *)(v62 + 48) = 0;
    *(_QWORD *)(v62 + 56) = 0;
    *(_QWORD *)v62 = 0;
    *(_QWORD *)(v62 + 8) = 0;
    *(_QWORD *)(v62 + 16) = v52;
    *v42 = v62;
    v63 = **(_QWORD **)(a2 + 224);
    v64 = (uint64_t *)v62;
    if (v63)
    {
      *(_QWORD *)(a2 + 224) = v63;
      v64 = (uint64_t *)*v42;
    }
    std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a2 + 232), v64);
    ++*(_QWORD *)(a2 + 248);
    v66 = *a1;
    v65 = a1[1];
    if (!v65)
      goto LABEL_79;
    goto LABEL_77;
  }
  v43 = a2 + 232;
  v44 = *(_QWORD *)(a2 + 232);
  do
  {
    v45 = *(_QWORD *)(v44 + 32);
    v19 = v45 == v11;
    v46 = v45 < v11;
    if (v19)
      v46 = *(_DWORD *)(v44 + 40) < v12;
    v47 = !v46;
    if (v46)
      v48 = (uint64_t *)(v44 + 8);
    else
      v48 = (uint64_t *)v44;
    if (v47)
      v43 = v44;
    v44 = *v48;
  }
  while (*v48);
  if ((uint64_t *)v43 == v42)
    goto LABEL_66;
  v49 = *(_QWORD *)(v43 + 32);
  v50 = v12 < *(_DWORD *)(v43 + 40);
  v19 = v11 == v49;
  v51 = v11 < v49;
  if (!v19)
    v50 = v51;
  if (v50)
  {
LABEL_66:
    while (1)
    {
      while (1)
      {
        v52 = v41;
        v53 = *(_QWORD *)(v41 + 32);
        v54 = *(_DWORD *)(v52 + 40);
        v55 = v12 < v54;
        if (v11 != v53)
          v55 = v11 < v53;
        if (!v55)
          break;
        v41 = *(_QWORD *)v52;
        v42 = (uint64_t *)v52;
        if (!*(_QWORD *)v52)
          goto LABEL_74;
      }
      v56 = v54 < v12;
      v57 = v11 == v53 ? v56 : v53 < v11;
      if (v57 != 1)
        break;
      v41 = *(_QWORD *)(v52 + 8);
      if (!v41)
      {
        v42 = (uint64_t *)(v52 + 8);
        goto LABEL_74;
      }
    }
    v62 = v52;
    v66 = *a1;
    v65 = a1[1];
    if (!v65)
      goto LABEL_79;
LABEL_77:
    v67 = (unint64_t *)(v65 + 8);
    do
      v68 = __ldxr(v67);
    while (__stxr(v68 + 1, v67));
LABEL_79:
    v69 = *(std::__shared_weak_count **)(v62 + 56);
    *(_QWORD *)(v62 + 48) = v66;
    *(_QWORD *)(v62 + 56) = v65;
    if (v69)
    {
      v70 = (unint64_t *)&v69->__shared_owners_;
      do
        v71 = __ldaxr(v70);
      while (__stlxr(v71 - 1, v70));
      if (!v71)
      {
        ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
        std::__shared_weak_count::__release_weak(v69);
      }
    }
    if (!*(_BYTE *)(*a1 + 1253))
      *(_BYTE *)(*a1 + 1253) = 1;
    *(_BYTE *)(a2 + 758) = 1;
  }
}

void sub_19F10A524(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void md::StandardLabeler::startFrameLayout(md::StandardLabeler *this, const md::LayoutContext *a2, __n128 a3)
{
  float v3;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  char v8;
  uint64_t v9;
  int v10;
  BOOL v11;
  float v12;
  BOOL v13;
  _QWORD *v14;
  float v15;
  _QWORD *v16;
  char v17;
  md::Label **v18;
  md::Label **v19;
  md::Label *v20;

  v3 = a3.n128_f32[0];
  *((_DWORD *)this + 91) = 0;
  *((_DWORD *)this + 94) = a3.n128_u32[0];
  *((_WORD *)this + 185) = 0;
  v5 = *((_QWORD *)this + 4);
  v6 = *(_QWORD **)(v5 + 72);
  v7 = (_QWORD *)(v5 + 80);
  if (v6 != (_QWORD *)(v5 + 80))
  {
    v8 = 0;
    while (1)
    {
      v9 = v6[24];
      if (v9)
      {
        v10 = *(unsigned __int8 *)(v9 + 52);
        if ((v10 - 1) < 2)
        {
          v15 = *(float *)(v9 + 16);
          if (v15 < 1.0)
          {
            *(float *)(v9 + 16) = fminf((float)(v3 / *(float *)(v9 + 24)) + v15, 1.0);
            *(float *)(v9 + 20) = (*(float (**)(void))(v9 + 32))();
            if (*(float *)(v9 + 16) >= 1.0)
            {
              *(_DWORD *)(v9 + 16) = 1065353216;
              *(float *)(v9 + 20) = (*(float (**)(float))(v9 + 32))(1.0);
              *(_BYTE *)(v9 + 52) = 2;
              a3.n128_u64[0] = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v9 + 432) + 336);
              *(_QWORD *)(v9 + 104) = a3.n128_u64[0];
            }
          }
        }
        else
        {
          if (*(_BYTE *)(v9 + 52))
            v11 = v10 == 3;
          else
            v11 = 1;
          if (v11)
          {
            v12 = *(float *)(v9 + 16);
            if (v12 > 0.0)
            {
              *(float *)(v9 + 16) = fmaxf(v12 - (float)(v3 / *(float *)(v9 + 28)), 0.0);
              *(float *)(v9 + 20) = (*(float (**)(void))(v9 + 40))();
              if (*(float *)(v9 + 16) <= 0.0)
              {
                *(_DWORD *)(v9 + 16) = 0;
                *(float *)(v9 + 20) = (*(float (**)(float))(v9 + 40))(0.0);
                *(_BYTE *)(v9 + 52) = 0;
              }
            }
          }
        }
        v13 = (*(_BYTE *)(v9 + 52) & 0xFD) == 1;
        v14 = (_QWORD *)v6[1];
        if (!v14)
        {
          do
          {
LABEL_22:
            v16 = (_QWORD *)v6[2];
            v11 = *v16 == (_QWORD)v6;
            v6 = v16;
          }
          while (!v11);
          goto LABEL_3;
        }
      }
      else
      {
        v13 = 0;
        v14 = (_QWORD *)v6[1];
        if (!v14)
          goto LABEL_22;
      }
      do
      {
        v16 = v14;
        v14 = (_QWORD *)*v14;
      }
      while (v14);
LABEL_3:
      v8 |= v13;
      v6 = v16;
      if (v16 == v7)
      {
        v17 = *((_BYTE *)this + 370);
        goto LABEL_27;
      }
    }
  }
  v17 = 0;
  v8 = 0;
LABEL_27:
  *((_BYTE *)this + 370) = v17 | v8 & 1;
  v19 = (md::Label **)*((_QWORD *)this + 13);
  v18 = (md::Label **)*((_QWORD *)this + 14);
  while (v19 != v18)
  {
    v20 = *v19;
    v19 += 2;
    a3.n128_f32[0] = v3;
    md::Label::animate(v20, a3);
  }
}

uint64_t md::Label::animate(md::Label *this, __n128 a2)
{
  float v2;
  int v4;
  float v5;
  float v6;
  float v7;
  float (**v8)(float);
  float *v9;
  float v10;
  uint64_t v11;
  md::LabelAnimationTrack **v12;
  md::LabelAnimationTrack **v13;
  char v14;
  md::LabelAnimationTrack *v15;
  md::LabelAnimator *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t result;

  v2 = a2.n128_f32[0];
  v4 = *((unsigned __int8 *)this + 1072);
  if (v4 == 2)
  {
    if (vabds_f32(*((float *)this + 278), *((float *)this + 110)) < 0.4)
    {
      *((float *)this + 280) = fmaxf(fminf(*((float *)this + 280), 0.9) - (float)(a2.n128_f32[0] / *((float *)this + 283)), 0.0);
      a2.n128_f32[0] = (*((float (**)(void))this + 143))();
      *((_DWORD *)this + 281) = a2.n128_u32[0];
      if (*((float *)this + 280) > 0.0 && a2.n128_f32[0] > 0.1)
        goto LABEL_14;
      if (*((_QWORD *)this + 148) || *((_BYTE *)this + 1081))
        goto LABEL_14;
    }
    *((_DWORD *)this + 280) = 0;
    a2.n128_u32[0] = 0;
    v5 = (*((float (**)(__n128))this + 143))(a2);
    goto LABEL_13;
  }
  if (v4 != 1)
    goto LABEL_15;
  *((float *)this + 280) = fminf((float)(a2.n128_f32[0] / *((float *)this + 282)) + fmaxf(*((float *)this + 280), 0.1), 1.0);
  a2.n128_f32[0] = (*((float (**)(void))this + 142))();
  *((_DWORD *)this + 281) = a2.n128_u32[0];
  if ((*((float *)this + 280) >= 1.0 || a2.n128_f32[0] >= 0.9) && !*((_QWORD *)this + 148))
  {
    *((_DWORD *)this + 280) = 1065353216;
    a2.n128_u32[0] = 1.0;
    v5 = (*((float (**)(__n128))this + 142))(a2);
LABEL_13:
    *((float *)this + 281) = v5;
    md::Label::updateStateMachineForDisplay((uint64_t)this, 7, *((_BYTE *)this + 1073), 0);
  }
LABEL_14:
  v4 = *((unsigned __int8 *)this + 1072);
LABEL_15:
  if (v4 == 3)
    goto LABEL_18;
  if (v4 != 2)
  {
    if (v4 != 1)
      goto LABEL_25;
LABEL_18:
    v6 = *((float *)this + 288);
    v7 = 1.0;
    if (v6 < 1.0)
    {
      *((float *)this + 288) = fminf((float)(v2 / *((float *)this + 290)) + v6, 1.0);
      *((float *)this + 289) = (*((float (**)(void))this + 146))();
      if (*((float *)this + 288) >= 1.0)
      {
        v8 = (float (**)(float))((char *)this + 1168);
        v9 = (float *)((char *)this + 1156);
        *((_DWORD *)this + 288) = 1065353216;
LABEL_24:
        *v9 = (*v8)(v7);
        goto LABEL_25;
      }
    }
    goto LABEL_25;
  }
  v10 = *((float *)this + 288);
  if (v10 > 0.0)
  {
    v7 = 0.0;
    *((float *)this + 288) = fmaxf(v10 - (float)(v2 / *((float *)this + 291)), 0.0);
    *((float *)this + 289) = (*((float (**)(void))this + 147))();
    if (*((float *)this + 288) <= 0.0)
    {
      v8 = (float (**)(float))((char *)this + 1176);
      v9 = (float *)((char *)this + 1156);
      *((_DWORD *)this + 288) = 0;
      goto LABEL_24;
    }
  }
LABEL_25:
  v11 = *((_QWORD *)this + 148);
  if (!v11)
    goto LABEL_38;
  if (!*(_BYTE *)(v11 + 88))
  {
    if (!*(_BYTE *)(v11 + 90))
    {
LABEL_31:
      *(float *)(v11 + 20) = *(float *)(v11 + 20) + v2;
      v12 = *(md::LabelAnimationTrack ***)(v11 + 56);
      v13 = *(md::LabelAnimationTrack ***)(v11 + 64);
      if (v12 == v13)
        goto LABEL_35;
      v14 = 0;
      do
      {
        a2.n128_u32[0] = *(_DWORD *)(v11 + 20);
        md::LabelAnimationTrack::runAnimation(*v12, a2);
        v15 = *v12++;
        v14 |= *((_BYTE *)v15 + 40) == 0;
      }
      while (v12 != v13);
      if ((v14 & 1) == 0)
LABEL_35:
        *(_BYTE *)(v11 + 88) = 1;
      goto LABEL_36;
    }
    if (v2 >= 100.0 || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v11 + 8) + 1192) + 52) == 2)
    {
      *(_BYTE *)(v11 + 90) = 0;
      goto LABEL_31;
    }
  }
LABEL_36:
  v16 = (md::LabelAnimator *)*((_QWORD *)this + 148);
  if (*((_BYTE *)v16 + 88))
  {
    *((_QWORD *)this + 148) = 0;
    md::LabelAnimator::~LabelAnimator(v16);
    MEMORY[0x1A1AF4E00]();
    *((_BYTE *)this + 1106) = *((_BYTE *)this + 1108);
  }
LABEL_38:
  v17 = *((_QWORD *)this + 37);
  if (v17)
  {
    (*(void (**)(uint64_t, float))(*(_QWORD *)v17 + 616))(v17, v2);
    if ((*(unsigned int (**)(_QWORD))(**((_QWORD **)this + 37) + 688))(*((_QWORD *)this + 37))
      && ((*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 37) + 696))(*((_QWORD *)this + 37)) & 1) == 0)
    {
      if (*((_BYTE *)this + 1082))
      {
        *((_BYTE *)this + 1082) = 0;
        atomic_store(0, (unsigned __int8 *)this + 1243);
      }
      if (*((_BYTE *)this + 1081))
      {
        *((_BYTE *)this + 1081) = 0;
        atomic_store(0, (unsigned __int8 *)this + 1244);
        *((_DWORD *)this + 280) = 0;
        *((float *)this + 281) = (*((float (**)(float))this + 143))(0.0);
        md::Label::updateStateMachineForDisplay((uint64_t)this, 8, *((_BYTE *)this + 1073), 0);
      }
      v18 = *((_QWORD *)this + 37);
      *((_QWORD *)this + 37) = 0;
      if (v18)
        (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
      v19 = *((_QWORD *)this + 35);
      *((_QWORD *)this + 35) = 0;
      if (v19)
        (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
    }
  }
  else
  {
    v20 = *((_QWORD *)this + 34);
    if (v20)
      (*(void (**)(uint64_t, float))(*(_QWORD *)v20 + 616))(v20, v2);
  }
  result = *((_QWORD *)this + 38);
  if (result)
  {
    (*(void (**)(uint64_t, float))(*(_QWORD *)result + 616))(result, v2);
    result = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 38) + 696))(*((_QWORD *)this + 38));
    if ((result & 1) == 0)
    {
      result = *((_QWORD *)this + 38);
      *((_QWORD *)this + 38) = 0;
      if (result)
        return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
    }
  }
  return result;
}

void md::Label::updateStateMachineForDisplay(uint64_t a1, int a2, char a3, md::LabelManager *a4)
{
  uint64_t v5;
  char v6;
  int v7;
  int v8;
  int v9;
  uint64_t v10;
  int v11;
  unsigned __int8 v12;
  unsigned __int8 v13;
  uint64_t v14;
  float (*v15)(float);
  int v16;
  _BOOL4 v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned __int8 v22;
  uint64_t v23;
  uint64_t v24;
  unsigned __int8 v25;
  uint64_t v26;
  uint64_t v27;
  float v28;
  float v29;
  _BOOL4 v30;
  unsigned int v31;
  uint64_t v32;
  unsigned __int8 v33;
  uint64_t v34;
  uint64_t v35;
  unsigned __int8 v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;

  v5 = a1;
  if (a4
    && (*((_BYTE *)a4 + *(unsigned __int8 *)(a1 + 1211) + 3316) || !*((_BYTE *)a4 + 3382) || *(_BYTE *)(a1 + 1255)))
  {
    if (((0x27u >> (a2 - 3)) & 1) != 0)
      v6 = 0x80808050508uLL >> (8 * (a2 - 3));
    else
      v6 = a2;
    v7 = 1;
    if ((a2 - 3) <= 5)
      LOBYTE(a2) = v6;
  }
  else
  {
    v7 = 0;
  }
  v8 = *(unsigned __int8 *)(a1 + 1072);
  v9 = byte_1A007EA46[4 * a2 + *(char *)(a1 + 1072)];
  if (*(_BYTE *)(a1 + 1078))
  {
    if (v9 == 1)
    {
      v9 = 3;
      goto LABEL_16;
    }
    if (v9 == 2)
    {
      v9 = 0;
LABEL_16:
      *(_BYTE *)(a1 + 1078) = 0;
      goto LABEL_20;
    }
    if (v8 != v9)
      *(_BYTE *)(a1 + 1078) = 0;
  }
  if (v9 == 255)
  {
    v9 = v8;
    if (v8)
      goto LABEL_21;
    goto LABEL_25;
  }
LABEL_20:
  *(_BYTE *)(a1 + 1072) = v9;
  *(_BYTE *)(a1 + 1073) = a3;
  if (v9)
  {
LABEL_21:
    if (v9 == 3)
    {
      *(_DWORD *)(a1 + 1120) = 1065353216;
      *(float *)(a1 + 1124) = (*(float (**)(float))(a1 + 1136))(1.0);
      if (v7)
      {
        *(_DWORD *)(v5 + 1152) = 1065353216;
        *(float *)(v5 + 1156) = (*(float (**)(float))(v5 + 1168))(1.0);
      }
    }
    goto LABEL_33;
  }
LABEL_25:
  *(_DWORD *)(a1 + 1120) = 0;
  *(float *)(a1 + 1124) = (*(float (**)(float))(a1 + 1144))(0.0);
  *(_DWORD *)(v5 + 1152) = 0;
  *(float *)(v5 + 1156) = (*(float (**)(float))(v5 + 1176))(0.0);
  *(_BYTE *)(v5 + 1109) = 38;
  if (*(_BYTE *)(v5 + 1082))
  {
    *(_BYTE *)(v5 + 1082) = 0;
    atomic_store(0, (unsigned __int8 *)(v5 + 1243));
  }
  if (*(_BYTE *)(v5 + 1081))
  {
    *(_BYTE *)(v5 + 1081) = 0;
    atomic_store(0, (unsigned __int8 *)(v5 + 1244));
    *(_DWORD *)(v5 + 1120) = 0;
    *(float *)(v5 + 1124) = (*(float (**)(float))(v5 + 1144))(0.0);
    md::Label::updateStateMachineForDisplay(v5, 8, *(unsigned __int8 *)(v5 + 1073), 0);
  }
  v10 = *(_QWORD *)(v5 + 296);
  *(_QWORD *)(v5 + 296) = 0;
  if (v10)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  a1 = *(_QWORD *)(v5 + 280);
  *(_QWORD *)(v5 + 280) = 0;
  if (a1)
    a1 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 8))(a1);
LABEL_33:
  v11 = *(unsigned __int8 *)(v5 + 1072);
  if (v8 != 2 && v11 == 2)
  {
    *(_DWORD *)(v5 + 1112) = *(_DWORD *)(v5 + 440);
    goto LABEL_38;
  }
  if (v11 == 1)
  {
    md::Label::setupShowAnimation((md::Label *)v5);
    return;
  }
  if (v11 == 2)
  {
LABEL_38:
    v12 = atomic_load((unsigned __int8 *)(v5 + 1243));
    if ((v12 & 1) == 0)
    {
      v13 = atomic_load((unsigned __int8 *)(v5 + 1244));
      if ((v13 & 1) == 0)
      {
        v14 = *(_QWORD *)(v5 + 1192);
        v15 = EaseConstantOne;
        if (v14
          && (*(_BYTE *)(v14 + 52) & 0xFD) == 1
          && ((v16 = *(unsigned __int8 *)(v14 + 8), v16 == 2) || v16 == 4 && !*(_BYTE *)(v5 + 1209)))
        {
          *(_QWORD *)(v5 + 1144) = EaseQuadIn;
          *(_DWORD *)(v5 + 1132) = 1053609165;
          v18 = *(unsigned __int8 *)(v5 + 1077);
          v17 = *(_BYTE *)(v5 + 1077) == 0;
          if (!*(_BYTE *)(v5 + 1077))
            goto LABEL_67;
        }
        else
        {
          v17 = *(_BYTE *)(v5 + 1077) == 0;
          if (!*(_BYTE *)(v5 + 1077))
          {
            v18 = 1;
            goto LABEL_67;
          }
          *(_QWORD *)(v5 + 1144) = EaseConstantOne;
          *(_DWORD *)(v5 + 1132) = 897988541;
        }
        v18 = 0;
        *(_QWORD *)(v5 + 1176) = EaseConstantOne;
        *(_DWORD *)(v5 + 1164) = 897988541;
        if (!v17)
          goto LABEL_104;
LABEL_67:
        v27 = *(_QWORD *)(v5 + 1008);
        if (!v27 || (v28 = *(float *)(v27 + 12), v28 == 0.0))
        {
          v28 = 0.4;
          if (v18)
          {
LABEL_70:
            *(_QWORD *)(v5 + 1144) = EaseQuadIn;
            *(float *)(v5 + 1132) = fmaxf(v28, 0.000001);
            if (v17)
              goto LABEL_74;
            goto LABEL_104;
          }
        }
        else if (v18)
        {
          goto LABEL_70;
        }
        if (v17)
        {
LABEL_74:
          if (v27)
          {
            v29 = *(float *)(v27 + 20);
            v30 = v29 == 0.0;
            if (v29 != 0.0)
              v28 = *(float *)(v27 + 20);
            v31 = *(unsigned __int8 *)(v27 + 25);
          }
          else
          {
            v31 = 0;
            v30 = 1;
          }
          *(float *)(v5 + 1164) = v28;
          if (v31 <= 1)
            v31 = 1;
          switch(v31)
          {
            case 1u:
            case 6u:
              goto LABEL_102;
            case 2u:
              *(_QWORD *)(v5 + 1176) = EaseLinear;
              break;
            case 3u:
              *(_QWORD *)(v5 + 1176) = EaseQuadIn;
              break;
            case 4u:
              *(_QWORD *)(v5 + 1176) = EaseCubicIn;
              break;
            case 5u:
              if (v30)
              {
                v28 = v28 + v28;
                *(float *)(v5 + 1164) = v28;
              }
              *(_QWORD *)(v5 + 1176) = EaseBounceOut;
              break;
            case 7u:
              v15 = EaseConstantZero;
LABEL_102:
              *(_QWORD *)(v5 + 1176) = v15;
              *(_DWORD *)(v5 + 1164) = 897988541;
              v28 = 0.000001;
              break;
            default:
              break;
          }
          *(float *)(v5 + 1164) = fmaxf(v28, 0.000001);
        }
LABEL_104:
        *(float *)(v5 + 1124) = (*(float (**)(uint64_t, float))(v5 + 1144))(a1, *(float *)(v5 + 1120));
        *(float *)(v5 + 1156) = (*(float (**)(float))(v5 + 1176))(*(float *)(v5 + 1152));
        return;
      }
      v20 = *(_QWORD *)(v5 + 296);
      if (v20)
      {
        if (*(_BYTE *)(v5 + 1081))
          return;
        if (*(_BYTE *)(v5 + 1082))
        {
          *(_BYTE *)(v5 + 1082) = 0;
          atomic_store(0, (unsigned __int8 *)(v5 + 1243));
        }
        *(_QWORD *)(v5 + 296) = 0;
        (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
        v21 = *(_QWORD *)(v5 + 280);
        *(_QWORD *)(v5 + 280) = 0;
        if (v21)
          (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
      }
      *(_BYTE *)(v5 + 1081) = 1;
      {
        v40 = operator new();
        mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v40, "VectorKitLabels", 0x5ED09DD50000000FLL);
      }
      v23 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc
                                                                 + 16))(mdm::Allocator::instance(void)::alloc, 576, 8);
      bzero((void *)(v23 + 8), 0x238uLL);
      *(_DWORD *)(v23 + 8) = 1065353216;
      *(_QWORD *)(v23 + 24) = v23;
      *(_OWORD *)(v23 + 32) = 0u;
      *(_OWORD *)(v23 + 48) = 0u;
      *(_OWORD *)(v23 + 72) = xmmword_19FFB2E30;
      *(_QWORD *)(v23 + 64) = 0;
      *(_QWORD *)(v23 + 88) = 1065353216;
      *(_DWORD *)(v23 + 96) = 1065353216;
      *(_QWORD *)(v23 + 108) = 0;
      *(_QWORD *)(v23 + 100) = 0;
      *(_DWORD *)(v23 + 116) = 0;
      *(_OWORD *)(v23 + 120) = xmmword_19FFB2E30;
      *(_OWORD *)(v23 + 136) = xmmword_19FFB2E30;
      *(_OWORD *)(v23 + 152) = xmmword_19FFB2E30;
      *(_OWORD *)(v23 + 168) = xmmword_19FFB3480;
      *(_QWORD *)(v23 + 184) = 0;
      *(_QWORD *)(v23 + 192) = 0;
      *(_BYTE *)(v23 + 200) = 0;
      *(_OWORD *)(v23 + 232) = 0u;
      *(_OWORD *)(v23 + 248) = 0u;
      *(_OWORD *)(v23 + 257) = 0u;
      *(_OWORD *)(v23 + 280) = xmmword_19FFB3580;
      *(_OWORD *)(v23 + 296) = xmmword_19FFB3590;
      *(_OWORD *)(v23 + 312) = xmmword_19FFB2E30;
      *(_QWORD *)(v23 + 328) = 1065353216;
      *(_DWORD *)(v23 + 336) = 1065353216;
      *(_DWORD *)(v23 + 356) = 0;
      *(_QWORD *)(v23 + 340) = 0;
      *(_QWORD *)(v23 + 348) = 0;
      *(_OWORD *)(v23 + 360) = xmmword_19FFB2E30;
      *(_OWORD *)(v23 + 376) = xmmword_19FFB2E30;
      *(_OWORD *)(v23 + 392) = xmmword_19FFB2E30;
      *(_OWORD *)(v23 + 408) = xmmword_19FFB3480;
      *(_QWORD *)(v23 + 424) = 0;
      *(_QWORD *)(v23 + 432) = 0;
      *(_BYTE *)(v23 + 440) = 0;
      *(_OWORD *)(v23 + 472) = 0u;
      *(_OWORD *)(v23 + 488) = 0u;
      *(_OWORD *)(v23 + 497) = 0u;
      *(_OWORD *)(v23 + 520) = xmmword_19FFB3580;
      *(_DWORD *)(v23 + 536) = 1065353216;
      *(_WORD *)(v23 + 556) = 512;
      *(_QWORD *)(v23 + 540) = 0;
      *(_QWORD *)(v23 + 548) = 0;
      *(_BYTE *)(v23 + 562) = 0;
      *(_DWORD *)(v23 + 558) = 0;
      *(_WORD *)(v23 + 563) = -1;
      *(_QWORD *)v23 = off_1E428E118;
      v24 = *(_QWORD *)(v5 + 280);
      *(_QWORD *)(v5 + 280) = v23;
      if (v24)
        (*(void (**)(uint64_t))(*(_QWORD *)v24 + 8))(v24);
      {
        v41 = operator new();
        mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v41, "VectorKitLabels", 0x5ED09DD50000000FLL);
      }
      v26 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc
                                                                 + 16))(mdm::Allocator::instance(void)::alloc, 744, 8);
      md::AnimatedCrossFadeLabelPart::AnimatedCrossFadeLabelPart(v26, a4, (md::Label *)v5, 8, *(md::LabelPart **)(v5 + 272), *(md::LabelPart **)(v5 + 280), 0);
      goto LABEL_87;
    }
    v19 = *(_QWORD *)(v5 + 296);
    if (!v19)
    {
LABEL_82:
      {
        v38 = operator new();
        mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v38, "VectorKitLabels", 0x5ED09DD50000000FLL);
      }
      v34 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc
                                                                 + 16))(mdm::Allocator::instance(void)::alloc, 576, 8);
      bzero((void *)(v34 + 8), 0x238uLL);
      *(_DWORD *)(v34 + 8) = 1065353216;
      *(_QWORD *)(v34 + 24) = v34;
      *(_OWORD *)(v34 + 32) = 0u;
      *(_OWORD *)(v34 + 48) = 0u;
      *(_OWORD *)(v34 + 72) = xmmword_19FFB2E30;
      *(_QWORD *)(v34 + 64) = 0;
      *(_QWORD *)(v34 + 88) = 1065353216;
      *(_DWORD *)(v34 + 96) = 1065353216;
      *(_QWORD *)(v34 + 108) = 0;
      *(_QWORD *)(v34 + 100) = 0;
      *(_DWORD *)(v34 + 116) = 0;
      *(_OWORD *)(v34 + 120) = xmmword_19FFB2E30;
      *(_OWORD *)(v34 + 136) = xmmword_19FFB2E30;
      *(_OWORD *)(v34 + 152) = xmmword_19FFB2E30;
      *(_OWORD *)(v34 + 168) = xmmword_19FFB3480;
      *(_QWORD *)(v34 + 184) = 0;
      *(_QWORD *)(v34 + 192) = 0;
      *(_BYTE *)(v34 + 200) = 0;
      *(_OWORD *)(v34 + 232) = 0u;
      *(_OWORD *)(v34 + 248) = 0u;
      *(_OWORD *)(v34 + 257) = 0u;
      *(_OWORD *)(v34 + 280) = xmmword_19FFB3580;
      *(_OWORD *)(v34 + 296) = xmmword_19FFB3590;
      *(_OWORD *)(v34 + 312) = xmmword_19FFB2E30;
      *(_QWORD *)(v34 + 328) = 1065353216;
      *(_DWORD *)(v34 + 336) = 1065353216;
      *(_DWORD *)(v34 + 356) = 0;
      *(_QWORD *)(v34 + 340) = 0;
      *(_QWORD *)(v34 + 348) = 0;
      *(_OWORD *)(v34 + 360) = xmmword_19FFB2E30;
      *(_OWORD *)(v34 + 376) = xmmword_19FFB2E30;
      *(_OWORD *)(v34 + 392) = xmmword_19FFB2E30;
      *(_OWORD *)(v34 + 408) = xmmword_19FFB3480;
      *(_QWORD *)(v34 + 424) = 0;
      *(_QWORD *)(v34 + 432) = 0;
      *(_BYTE *)(v34 + 440) = 0;
      *(_OWORD *)(v34 + 472) = 0u;
      *(_OWORD *)(v34 + 488) = 0u;
      *(_OWORD *)(v34 + 497) = 0u;
      *(_OWORD *)(v34 + 520) = xmmword_19FFB3580;
      *(_DWORD *)(v34 + 536) = 1065353216;
      *(_WORD *)(v34 + 556) = 512;
      *(_QWORD *)(v34 + 540) = 0;
      *(_QWORD *)(v34 + 548) = 0;
      *(_BYTE *)(v34 + 562) = 0;
      *(_DWORD *)(v34 + 558) = 0;
      *(_WORD *)(v34 + 563) = -1;
      *(_QWORD *)v34 = off_1E428E118;
      v35 = *(_QWORD *)(v5 + 280);
      *(_QWORD *)(v5 + 280) = v34;
      if (v35)
        (*(void (**)(uint64_t))(*(_QWORD *)v35 + 8))(v35);
      *(_WORD *)(v5 + 1081) = 257;
      {
        v39 = operator new();
        mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v39, "VectorKitLabels", 0x5ED09DD50000000FLL);
      }
      v26 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc
                                                                 + 16))(mdm::Allocator::instance(void)::alloc, 744, 8);
      md::AnimatedCrossFadeLabelPart::AnimatedCrossFadeLabelPart(v26, a4, (md::Label *)v5, *(unsigned __int8 *)(v5 + 1289), *(md::LabelPart **)(v5 + 272), *(md::LabelPart **)(v5 + 280), 0);
LABEL_87:
      v37 = *(_QWORD *)(v5 + 296);
      *(_QWORD *)(v5 + 296) = v26;
      if (v37)
        (*(void (**)(uint64_t))(*(_QWORD *)v37 + 8))(v37);
      return;
    }
    if (*(_BYTE *)(v5 + 1082))
      return;
    if (*(_BYTE *)(v5 + 1081))
    {
      *(_BYTE *)(v5 + 1081) = 0;
      atomic_store(0, (unsigned __int8 *)(v5 + 1244));
      *(_DWORD *)(v5 + 1120) = 0;
      *(float *)(v5 + 1124) = (*(float (**)(float))(v5 + 1144))(0.0);
      md::Label::updateStateMachineForDisplay(v5, 8, *(unsigned __int8 *)(v5 + 1073), 0);
      v19 = *(_QWORD *)(v5 + 296);
      *(_QWORD *)(v5 + 296) = 0;
      if (!v19)
      {
LABEL_80:
        v32 = *(_QWORD *)(v5 + 280);
        *(_QWORD *)(v5 + 280) = 0;
        if (v32)
          (*(void (**)(uint64_t))(*(_QWORD *)v32 + 8))(v32);
        goto LABEL_82;
      }
    }
    else
    {
      *(_QWORD *)(v5 + 296) = 0;
    }
    (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
    goto LABEL_80;
  }
}

void sub_19F10B540(mdm::Allocator *a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = mdm::Allocator::instance(a1);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v3 + 40))(v3, v1, 744);
  _Unwind_Resume((_Unwind_Exception *)a1);
}

float EaseQuadOut(float a1)
{
  return (float)(2.0 - a1) * a1;
}

uint64_t md::CrossFadeLabelPart::isCrossFadeNode(md::CrossFadeLabelPart *this)
{
  return 1;
}

uint64_t md::StyleCrossFadeLabelPart::isCrossFading(md::StyleCrossFadeLabelPart *this)
{
  return *((unsigned __int8 *)this + 638);
}

uint64_t md::StyleCrossFadeLabelPart::animate(md::StyleCrossFadeLabelPart *this, float a2)
{
  float v2;

  v2 = *((float *)this + 158) + (float)(a2 * 2.5);
  *((float *)this + 158) = v2;
  if (v2 >= 1.0)
  {
    *((_DWORD *)this + 158) = 1065353216;
    *((_BYTE *)this + 638) = 0;
  }
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*((_QWORD *)this + 72) + 8) + 616))(*(_QWORD *)(*((_QWORD *)this + 72) + 8));
}

void md::Label::setupShowAnimation(md::Label *this)
{
  uint64_t v2;
  int v3;
  __int16 *v4;
  int v5;
  _BOOL4 v6;
  uint64_t v7;
  float v8;
  float v9;
  float v10;
  _BOOL4 v11;
  unsigned int v12;
  unsigned int v13;
  float (*v14)(float);
  __int16 v15;

  v15 = 0;
  v2 = *((_QWORD *)this + 149);
  if (v2 && (*(_BYTE *)(v2 + 52) & 0xFD) == 1)
  {
    v3 = *(unsigned __int8 *)(v2 + 8);
    if ((v3 - 2) < 3)
    {
      *((_QWORD *)this + 142) = EaseQuadOut;
      *((_DWORD *)this + 282) = 1053609165;
      v4 = (__int16 *)((char *)&v15 + 1);
      goto LABEL_7;
    }
    if (v3 == 1)
    {
      *((_QWORD *)this + 142) = EaseQuadOut;
      *((_DWORD *)this + 282) = 1053609165;
      HIBYTE(v15) = 1;
      *((_QWORD *)this + 146) = EaseCubicOut;
      *((_DWORD *)this + 290) = 1056964608;
      v4 = &v15;
LABEL_7:
      *(_BYTE *)v4 = 1;
      v5 = HIBYTE(v15) == 0;
      if (!*((_BYTE *)this + 1077))
        goto LABEL_8;
      goto LABEL_11;
    }
  }
  v5 = 1;
  if (!*((_BYTE *)this + 1077))
  {
LABEL_8:
    v6 = (_BYTE)v15 == 0;
    if ((v5 & 1) != 0)
      goto LABEL_17;
    goto LABEL_16;
  }
LABEL_11:
  if (v5)
  {
    *((_QWORD *)this + 142) = EaseConstantOne;
    *((_DWORD *)this + 282) = 897988541;
  }
  v5 = v15;
  if ((_BYTE)v15)
  {
    v6 = 0;
    v5 = 0;
  }
  else
  {
    v6 = 0;
    *((_QWORD *)this + 146) = EaseConstantOne;
    *((_DWORD *)this + 290) = 897988541;
    if ((v5 & 1) != 0)
      goto LABEL_17;
  }
LABEL_16:
  if (!v6)
    goto LABEL_42;
LABEL_17:
  v7 = *((_QWORD *)this + 126);
  if (!v7 || (v8 = *(float *)(v7 + 8), v8 == 0.0))
  {
    v8 = 0.4;
    if (v5)
    {
LABEL_20:
      *((_QWORD *)this + 142) = EaseQuadOut;
      *((float *)this + 282) = fmaxf(v8, 0.000001);
      if (!v6)
        goto LABEL_42;
      goto LABEL_24;
    }
  }
  else if (v5)
  {
    goto LABEL_20;
  }
  if (!v6)
    goto LABEL_42;
LABEL_24:
  v9 = v8 * 1.25;
  if (v7)
  {
    v10 = *(float *)(v7 + 16);
    v11 = v10 == 0.0;
    if (v10 != 0.0)
      v9 = *(float *)(v7 + 16);
    v12 = *(unsigned __int8 *)(v7 + 24);
  }
  else
  {
    v12 = 0;
    v11 = 1;
  }
  if (v12 <= 1)
    v12 = 1;
  v13 = v12 - 1;
  v14 = (float (*)(float))EaseLinear;
  switch(v13)
  {
    case 0u:
    case 5u:
      v14 = EaseConstantOne;
      goto LABEL_39;
    case 1u:
      goto LABEL_40;
    case 2u:
      v14 = EaseQuadOut;
      goto LABEL_40;
    case 3u:
      v14 = EaseCubicOut;
      goto LABEL_40;
    case 4u:
      if (v11)
      {
        v9 = v9 + v9;
        *((float *)this + 290) = v9;
      }
      v14 = EaseBounceOut;
      goto LABEL_40;
    case 6u:
      v14 = EaseConstantZero;
LABEL_39:
      v9 = 0.000001;
LABEL_40:
      *((_QWORD *)this + 146) = v14;
      break;
    default:
      break;
  }
  *((float *)this + 290) = fmaxf(v9, 0.000001);
LABEL_42:
  *((float *)this + 281) = (*((float (**)(float))this + 142))(*((float *)this + 280));
  *((float *)this + 289) = (*((float (**)(float))this + 146))(*((float *)this + 288));
}

float EaseConstantOne(float a1)
{
  return 1.0;
}

uint64_t md::UniLineLabelFeature::labelFeatureType(md::UniLineLabelFeature *this)
{
  return *((unsigned __int8 *)this + 448);
}

uint64_t md::LabelFeature::skewOffsettingVector()
{
  return 0;
}

void md::LabelFeature::skewOffsettingLimits(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

float md::LabelFeature::elevationOffset()
{
  return 0.0;
}

uint64_t md::LabelFeature::isRouteFeature(md::LabelFeature *this)
{
  return 0;
}

uint64_t md::LabelFeature::facingVector()
{
  return 0;
}

void md::LabelAnimationTrack::runAnimation(md::LabelAnimationTrack *this, __n128 a2)
{
  uint64_t v3;
  uint64_t v4;
  float v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;

  if (!*((_BYTE *)this + 40))
  {
    v4 = *(_QWORD *)this;
    v3 = *((_QWORD *)this + 1);
    if (*(_QWORD *)this != v3)
    {
      v5 = a2.n128_f32[0];
      v6 = *((unsigned int *)this + 8);
      v7 = (v3 - v4) >> 5;
      if (v7 <= v6)
      {
LABEL_7:
        if (*((_BYTE *)this + 41))
        {
          a2.n128_f32[0] = fmodf(v5, *(float *)(v3 - 28) + *(float *)(v3 - 32));
          LODWORD(v6) = 0;
          a2.n128_f32[0] = v5 - a2.n128_f32[0];
          *((_DWORD *)this + 9) = a2.n128_u32[0];
          *((_DWORD *)this + 8) = 0;
        }
        else
        {
          LODWORD(v6) = ((unint64_t)(v3 - v4) >> 5) - 1;
          *((_DWORD *)this + 8) = v6;
          *((_BYTE *)this + 40) = 1;
          a2.n128_u32[0] = *((_DWORD *)this + 9);
        }
      }
      else
      {
        a2.n128_u32[0] = *((_DWORD *)this + 9);
        while ((float)(*(float *)(v4 + 32 * v6 + 4) + *(float *)(v4 + 32 * v6)) <= (float)(v5 - a2.n128_f32[0]))
        {
          v6 = (v6 + 1);
          if (v7 <= v6)
            goto LABEL_7;
        }
        *((_DWORD *)this + 8) = v6;
      }
      v8 = v4 + 32 * v6;
      a2.n128_f32[0] = fminf(fmaxf(v5 - (float)(a2.n128_f32[0] + *(float *)v8), 0.0), *(float *)(v8 + 4))
                     / *(float *)(v8 + 4);
      *(_DWORD *)(v8 + 12) = a2.n128_u32[0];
      if (!*(_BYTE *)(v8 + 16))
        a2.n128_f32[0] = 1.0 - a2.n128_f32[0];
      *(float *)(v8 + 8) = (*(float (**)(__n128))(v8 + 24))(a2);
    }
  }
}

BOOL md::AnimatedCrossFadeLabelPart::isCrossFading(md::AnimatedCrossFadeLabelPart *this)
{
  return *((_BYTE *)this + 737) || *((_BYTE *)this + 728) == 0;
}

void md::AnimatedCrossFadeLabelPart::animate(md::AnimatedCrossFadeLabelPart *this, float a2)
{
  float v4;
  NSObject *v5;
  NSObject *v6;
  os_signpost_id_t v7;
  __n128 v8;
  md::LabelAnimationTrack **v9;
  md::LabelAnimationTrack **v10;
  char v11;
  md::LabelAnimationTrack *v12;
  uint8_t v13[16];

  v4 = *((float *)this + 158) + (float)(a2 * 2.5);
  *((float *)this + 158) = v4;
  if (v4 >= 1.0)
  {
    *((_DWORD *)this + 158) = 1065353216;
    *((_BYTE *)this + 737) = 0;
    if (*((_BYTE *)this + 738))
    {
      *((_BYTE *)this + 738) = 0;
      if (GEOGetVectorKitPerformanceLog_onceToken != -1)
        dispatch_once(&GEOGetVectorKitPerformanceLog_onceToken, &__block_literal_global_13_11780);
      v5 = (id)GEOGetVectorKitPerformanceLog_log;
      v6 = v5;
      v7 = *((unsigned __int8 *)this + 736);
      if (*((_BYTE *)this + 736) && os_signpost_enabled(v5))
      {
        *(_WORD *)v13 = 0;
        _os_signpost_emit_with_name_impl(&dword_19F029000, v6, OS_SIGNPOST_INTERVAL_END, v7, "LabelsPickAnimation", (const char *)&unk_1A0189141, v13, 2u);
      }

    }
  }
  (*(void (**)(_QWORD, float))(**(_QWORD **)(*((_QWORD *)this + 72) + 8) + 616))(*(_QWORD *)(*((_QWORD *)this + 72) + 8), a2);
  if (!*((_BYTE *)this + 728))
  {
    if (*((_BYTE *)this + 730))
    {
      if (a2 < 100.0 && *(_BYTE *)(*(_QWORD *)(*((_QWORD *)this + 81) + 1192) + 52) != 2)
        return;
      *((_BYTE *)this + 730) = 0;
    }
    *((float *)this + 165) = *((float *)this + 165) + a2;
    v9 = (md::LabelAnimationTrack **)*((_QWORD *)this + 87);
    v10 = (md::LabelAnimationTrack **)*((_QWORD *)this + 88);
    if (v9 == v10)
      goto LABEL_18;
    v11 = 0;
    do
    {
      v8.n128_u32[0] = *((_DWORD *)this + 165);
      md::LabelAnimationTrack::runAnimation(*v9, v8);
      v12 = *v9++;
      v11 |= *((_BYTE *)v12 + 40) == 0;
    }
    while (v9 != v10);
    if ((v11 & 1) == 0)
LABEL_18:
      *((_BYTE *)this + 728) = 1;
  }
}

uint64_t md::UniLineLabelFeature::externalFeature(md::UniLineLabelFeature *this)
{
  return *((_QWORD *)this + 57);
}

uint64_t md::UniLineLabelFeature::labelFeatureSubtype(md::UniLineLabelFeature *this)
{
  return *((unsigned __int8 *)this + 449);
}

uint64_t md::LineLabelFeature::labelTypeAtPosition(uint64_t a1, unsigned int *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  unsigned int v7;
  BOOL v8;
  uint64_t *v9;
  unint64_t v10;
  uint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  unint64_t *v16;
  unint64_t v17;

  v4 = *(_QWORD *)(a1 + 232);
  v2 = a1 + 232;
  v3 = v4;
  if (!v4)
    goto LABEL_12;
  v5 = *a2;
  v6 = v2;
  do
  {
    v7 = *(_DWORD *)(v3 + 32);
    v8 = v7 >= v5;
    if (v7 >= v5)
      v9 = (uint64_t *)v3;
    else
      v9 = (uint64_t *)(v3 + 8);
    if (v8)
      v6 = v3;
    v3 = *v9;
  }
  while (*v9);
  if (v6 != v2 && v5 >= *(_DWORD *)(v6 + 32))
  {
    v12 = *(_QWORD *)(v6 + 40);
    v13 = *(std::__shared_weak_count **)(v6 + 48);
    if (v13)
    {
      p_shared_owners = (unint64_t *)&v13->__shared_owners_;
      do
        v15 = __ldxr(p_shared_owners);
      while (__stxr(v15 + 1, p_shared_owners));
    }
    if (v12 && (*(_BYTE *)(v12 + 9) - 1) <= 7u)
    {
      v10 = 0x605030908070402uLL >> (8 * (*(_BYTE *)(v12 + 9) - 1));
      if (!v13)
        return v10;
    }
    else
    {
      LOBYTE(v10) = 0;
      if (!v13)
        return v10;
    }
    v16 = (unint64_t *)&v13->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  else
  {
LABEL_12:
    LOBYTE(v10) = 0;
  }
  return v10;
}

float EaseQuadIn(float a1)
{
  return a1 * a1;
}

uint64_t md::PointLabelFeature::labelTypeAtPosition()
{
  return 1;
}

uint64_t md::PointLabelFeature::labelFeatureType(md::PointLabelFeature *this)
{
  return 1;
}

uint64_t md::LabelFeature::labelFeatureSubtype(md::LabelFeature *this)
{
  return 0;
}

uint64_t md::LabelFeature::isOnMeshRoad(md::LabelFeature *this)
{
  return 0;
}

_BYTE *md::LabelStyle::updateZoomInvariantStyles(_BYTE *this)
{
  _BYTE *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;
  int v6;
  unint64_t *v7;
  unint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  unsigned __int8 v20;
  unsigned int v21;
  BOOL v22;
  uint64_t v23;
  unsigned int v24;
  int v25;
  unsigned int v26;
  unsigned int v27;
  int v28;
  uint64_t v29;
  unsigned int v30;
  int v31;
  int v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  unsigned int v36;
  int *v37;
  int v38;
  uint64_t v39;
  unsigned int v40;
  int *v41;
  int v42;
  uint64_t v43;
  unsigned int v44;
  int *v45;
  int v46;
  uint64_t v47;
  unsigned int v48;
  _QWORD *v49;
  char v50;
  uint64_t v51;
  std::__shared_weak_count *v52;
  float v53;
  uint64_t v54;
  uint64_t v55;
  unsigned __int8 v56;
  uint64_t v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  unint64_t *v61;
  unint64_t v62;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;
  _QWORD *v66;
  uint64_t v67;
  _QWORD *v68;
  uint64_t v69;
  _QWORD *v70;
  uint64_t v71;
  uint64_t (***v72)();
  uint64_t v73;
  uint64_t v74;
  std::__shared_weak_count *v75;
  _BYTE *v76;
  std::__shared_weak_count *v77;
  _QWORD v78[2];
  unsigned __int8 v79;
  char v80;
  _BYTE v81[24];
  _BYTE *v82;
  _BYTE v83[24];
  _BYTE *v84;
  _BYTE v85[24];
  _BYTE *v86;
  _QWORD v87[3];
  _QWORD *v88;
  _QWORD v89[3];
  _QWORD *v90;
  _QWORD v91[3];
  _QWORD *v92;
  _QWORD v93[3];
  _QWORD *v94;
  uint64_t (**v95)();
  std::__shared_weak_count *v96;
  uint64_t (***v97)();
  uint64_t v98;

  v98 = *MEMORY[0x1E0C80C00];
  if (!this[125])
  {
    v1 = this;
    this[125] = 1;
    this = *(_BYTE **)this;
    if (this)
    {
      v2 = (std::__shared_weak_count *)*((_QWORD *)v1 + 1);
      v95 = (uint64_t (**)())this;
      v96 = v2;
      if (v2)
      {
        p_shared_owners = (unint64_t *)&v2->__shared_owners_;
        do
          v4 = __ldxr(p_shared_owners);
        while (__stxr(v4 + 1, p_shared_owners));
        v77 = v2;
        do
          v5 = __ldxr(p_shared_owners);
        while (__stxr(v5 + 1, p_shared_owners));
      }
      else
      {
        v77 = 0;
      }
      v78[0] = 0;
      v78[1] = 0;
      v76 = this;
      v79 = 0;
      v6 = (*(uint64_t (**)(_BYTE *, _QWORD *))(*(_QWORD *)this + 48))(this, v78);
      v79 = v6;
      if (v2)
      {
        v7 = (unint64_t *)&v2->__shared_owners_;
        do
          v8 = __ldaxr(v7);
        while (__stlxr(v8 - 1, v7));
        if (!v8)
        {
          ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
          std::__shared_weak_count::__release_weak(v2);
        }
        v6 = v79;
      }
      if (!v6)
      {
        *((_WORD *)v1 + 56) = 0;
        *((_WORD *)v1 + 60) = 0;
        v1[122] = 0;
        *((_DWORD *)v1 + 27) = 1065353216;
        return (_BYTE *)gss::QueryableLocker<gss::PropertyID>::~QueryableLocker((uint64_t)&v76);
      }
      v95 = &off_1E42C8750;
      v96 = (std::__shared_weak_count *)&v76;
      v97 = &v95;
      v93[0] = &off_1E42C8798;
      v93[1] = &v76;
      v94 = v93;
      v91[0] = &off_1E42C87E0;
      v91[1] = &v76;
      v92 = v91;
      v89[0] = &off_1E42C8828;
      v89[1] = &v76;
      v90 = v89;
      v88 = v87;
      v87[0] = &off_1E42C8750;
      v87[1] = &v76;
      *((_WORD *)v1 + 56) = md::LabelStyle::getZoomRange((uint64_t)v87);
      v9 = v88;
      if (v88 == v87)
      {
        v10 = 4;
        v9 = v87;
      }
      else
      {
        if (!v88)
          goto LABEL_23;
        v10 = 5;
      }
      (*(void (**)(void))(*v9 + 8 * v10))();
LABEL_23:
      v11 = (uint64_t)v94;
      if (v94)
      {
        if (v94 == v93)
        {
          v86 = v85;
          (*(void (**)(_QWORD *, _BYTE *))(v93[0] + 24))(v93, v85);
LABEL_28:
          *((_WORD *)v1 + 57) = md::LabelStyle::getZoomRange((uint64_t)v85);
          v12 = v86;
          if (v86 == v85)
          {
            v13 = 4;
            v12 = v85;
          }
          else
          {
            if (!v86)
              goto LABEL_33;
            v13 = 5;
          }
          (*(void (**)(void))(*v12 + 8 * v13))();
LABEL_33:
          v14 = (uint64_t)v90;
          if (v90)
          {
            if (v90 == v89)
            {
              v84 = v83;
              (*(void (**)(_QWORD *, _BYTE *))(v89[0] + 24))(v89, v83);
LABEL_38:
              *((_WORD *)v1 + 58) = md::LabelStyle::getZoomRange((uint64_t)v83);
              v15 = v84;
              if (v84 == v83)
              {
                v16 = 4;
                v15 = v83;
              }
              else
              {
                if (!v84)
                  goto LABEL_43;
                v16 = 5;
              }
              (*(void (**)(void))(*v15 + 8 * v16))();
LABEL_43:
              v17 = (uint64_t)v92;
              if (v92)
              {
                if (v92 == v91)
                {
                  v82 = v81;
                  (*(void (**)(_QWORD *, _BYTE *))(v91[0] + 24))(v91, v81);
LABEL_48:
                  *((_WORD *)v1 + 59) = md::LabelStyle::getZoomRange((uint64_t)v81);
                  v18 = v82;
                  if (v82 == v81)
                  {
                    v19 = 4;
                    v18 = v81;
                  }
                  else
                  {
                    if (!v82)
                    {
LABEL_53:
                      v20 = 0;
                      do
                      {
                        v23 = *((_QWORD *)v76 + 3);
                        v24 = *(unsigned __int8 *)(v23 + 12);
                        if (v24 == 2)
                        {
                          LOBYTE(v74) = 1;
                          v80 = 1;
                          v25 = *(unsigned __int8 *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(v23, 0x7Bu, v20, 0, &v74);
                          gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(v23, 0x7Bu, v20, 1u, &v80);
                        }
                        else
                        {
                          v25 = *(unsigned __int8 *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(*((_QWORD *)v76 + 3), 0x7Bu, v20, v24, 0);
                        }
                        v21 = v20++;
                        if (v25)
                          v22 = 1;
                        else
                          v22 = v21 >= 0x17;
                      }
                      while (!v22);
                      v1[121] = v25 != 0;
                      v26 = *((unsigned __int16 *)v1 + 56);
                      if (v26 >> 8 >= 0x18)
                        v27 = 24;
                      else
                        v27 = v26 >> 8;
                      for (; v27 > v26; LOBYTE(v26) = v26 + 1)
                      {
                        v29 = *((_QWORD *)v76 + 3);
                        if (v26 >= 0x17u)
                          v30 = 23;
                        else
                          v30 = v26;
                        v31 = *(unsigned __int8 *)(v29 + 12);
                        if (v31 == 2)
                        {
                          LOBYTE(v74) = 1;
                          v80 = 1;
                          v32 = *(unsigned __int8 *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<BOOL>((unsigned __int16 *)v29, 0x5Bu, v30, 0, &v74);
                          gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<BOOL>((unsigned __int16 *)v29, 0x5Bu, v30, 1, &v80);
                          if (!v32)
                            continue;
                        }
                        else if (!*(_BYTE *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<BOOL>(*((unsigned __int16 **)v76 + 3), 0x5Bu, v30, v31, 0))
                        {
                          continue;
                        }
                        v33 = *((_QWORD *)v76 + 3);
                        v34 = *(unsigned __int8 *)(v33 + 12);
                        if (v34 == 2)
                        {
                          LOBYTE(v74) = 1;
                          v80 = 1;
                          v28 = *(unsigned __int8 *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<BOOL>((unsigned __int16 *)v33, 0x81u, v30, 0, &v74);
                          gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<BOOL>((unsigned __int16 *)v33, 0x81u, v30, 1, &v80);
                        }
                        else
                        {
                          v28 = *(unsigned __int8 *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<BOOL>(*((unsigned __int16 **)v76 + 3), 0x81u, v30, v34, 0);
                        }
                        if (v28)
                          goto LABEL_79;
                      }
                      LOBYTE(v26) = -4;
LABEL_79:
                      v1[120] = v26;
                      v35 = *((_QWORD *)v76 + 3);
                      v36 = *(unsigned __int8 *)(v35 + 12);
                      if (v36 == 2)
                      {
                        LOBYTE(v74) = 1;
                        v80 = 1;
                        v37 = (int *)gss::RenderStyle<gss::PropertyID>::styleValueForKey<unsigned int>(v35, 0x7Du, 0, &v74);
                        gss::RenderStyle<gss::PropertyID>::styleValueForKey<unsigned int>(v35, 0x7Du, 1u, &v80);
                        v38 = *v37;
                      }
                      else
                      {
                        v38 = *(_DWORD *)gss::RenderStyle<gss::PropertyID>::styleValueForKey<unsigned int>(*((_QWORD *)v76 + 3), 0x7Du, v36, 0);
                      }
                      v1[122] = v38;
                      v39 = *((_QWORD *)v76 + 3);
                      v40 = *(unsigned __int8 *)(v39 + 12);
                      if (v40 == 2)
                      {
                        LOBYTE(v74) = 1;
                        v80 = 1;
                        v41 = (int *)gss::RenderStyle<gss::PropertyID>::styleValueForKey<unsigned int>(v39, 0x158u, 0, &v74);
                        gss::RenderStyle<gss::PropertyID>::styleValueForKey<unsigned int>(v39, 0x158u, 1u, &v80);
                        v42 = *v41;
                      }
                      else
                      {
                        v42 = *(_DWORD *)gss::RenderStyle<gss::PropertyID>::styleValueForKey<unsigned int>(*((_QWORD *)v76 + 3), 0x158u, v40, 0);
                      }
                      v1[123] = v42;
                      v43 = *((_QWORD *)v76 + 3);
                      v44 = *(unsigned __int8 *)(v43 + 12);
                      if (v44 == 2)
                      {
                        LOBYTE(v74) = 1;
                        v80 = 1;
                        v45 = (int *)gss::RenderStyle<gss::PropertyID>::styleValueForKey<unsigned int>(v43, 0x1C6u, 0, &v74);
                        gss::RenderStyle<gss::PropertyID>::styleValueForKey<unsigned int>(v43, 0x1C6u, 1u, &v80);
                        v46 = *v45;
                      }
                      else
                      {
                        v46 = *(_DWORD *)gss::RenderStyle<gss::PropertyID>::styleValueForKey<unsigned int>(*((_QWORD *)v76 + 3), 0x1C6u, v44, 0);
                      }
                      v1[124] = v46;
                      v47 = *((_QWORD *)v76 + 3);
                      v48 = *(unsigned __int8 *)(v47 + 12);
                      if (v48 == 2)
                      {
                        LOBYTE(v74) = 1;
                        v80 = 1;
                        v49 = gss::RenderStyle<gss::PropertyID>::styleValueForKey<unsigned char>((_QWORD *)v47, 0, &v74);
                        gss::RenderStyle<gss::PropertyID>::styleValueForKey<unsigned char>((_QWORD *)v47, 1u, &v80);
                        v50 = *(_BYTE *)v49;
                      }
                      else
                      {
                        v50 = *(_BYTE *)gss::RenderStyle<gss::PropertyID>::styleValueForKey<unsigned char>(*((_QWORD **)v76 + 3), v48, 0);
                      }
                      v1[126] = v50;
                      v51 = *(_QWORD *)v1;
                      v74 = 0;
                      v75 = 0;
                      v52 = *(std::__shared_weak_count **)(v51 + 16);
                      v53 = 1.0;
                      if (v52)
                      {
                        v75 = std::__shared_weak_count::lock(v52);
                        if (v75)
                        {
                          v54 = *(_QWORD *)(v51 + 8);
                          v74 = v54;
                          if (v54)
                          {
                            if (v1[94] == 1)
                            {
                              v55 = *(_QWORD *)(v54 + 16);
                              v56 = atomic_load((unsigned __int8 *)(v55 + 2784));
                              if ((v56 & 1) == 0)
                                std::__assoc_sub_state::wait(*(std::__assoc_sub_state **)(v55 + 2808));
                              v57 = *(_QWORD *)(v55 + 120);
                              v58 = *(std::__shared_weak_count **)(v55 + 128);
                              if (v58)
                              {
                                v59 = (unint64_t *)&v58->__shared_owners_;
                                do
                                  v60 = __ldxr(v59);
                                while (__stxr(v60 + 1, v59));
                              }
                              if (v57)
                                v53 = *(float *)(v57 + 88);
                              else
                                v53 = 1.0;
                              if (v58)
                              {
                                v61 = (unint64_t *)&v58->__shared_owners_;
                                do
                                  v62 = __ldaxr(v61);
                                while (__stlxr(v62 - 1, v61));
                                if (!v62)
                                {
                                  ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
                                  std::__shared_weak_count::__release_weak(v58);
                                }
                              }
                            }
                          }
                        }
                      }
                      *((float *)v1 + 27) = v53;
                      v63 = v75;
                      if (v75)
                      {
                        v64 = (unint64_t *)&v75->__shared_owners_;
                        do
                          v65 = __ldaxr(v64);
                        while (__stlxr(v65 - 1, v64));
                        if (!v65)
                        {
                          ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
                          std::__shared_weak_count::__release_weak(v63);
                        }
                      }
                      v66 = v90;
                      if (v90 == v89)
                      {
                        v67 = 4;
                        v66 = v89;
                      }
                      else
                      {
                        if (!v90)
                          goto LABEL_118;
                        v67 = 5;
                      }
                      (*(void (**)(void))(*v66 + 8 * v67))();
LABEL_118:
                      v68 = v92;
                      if (v92 == v91)
                      {
                        v69 = 4;
                        v68 = v91;
                      }
                      else
                      {
                        if (!v92)
                          goto LABEL_123;
                        v69 = 5;
                      }
                      (*(void (**)(void))(*v68 + 8 * v69))();
LABEL_123:
                      v70 = v94;
                      if (v94 == v93)
                      {
                        v71 = 4;
                        v70 = v93;
                      }
                      else
                      {
                        if (!v94)
                        {
LABEL_128:
                          v72 = v97;
                          if (v97 == &v95)
                          {
                            v73 = 4;
                            v72 = &v95;
                            goto LABEL_132;
                          }
                          if (v97)
                          {
                            v73 = 5;
LABEL_132:
                            (*v72)[v73]();
                          }
                          return (_BYTE *)gss::QueryableLocker<gss::PropertyID>::~QueryableLocker((uint64_t)&v76);
                        }
                        v71 = 5;
                      }
                      (*(void (**)(void))(*v70 + 8 * v71))();
                      goto LABEL_128;
                    }
                    v19 = 5;
                  }
                  (*(void (**)(void))(*v18 + 8 * v19))();
                  goto LABEL_53;
                }
                v17 = (*(uint64_t (**)(_QWORD *))(*v92 + 16))(v92);
              }
              v82 = (_BYTE *)v17;
              goto LABEL_48;
            }
            v14 = (*(uint64_t (**)(void))(*v90 + 16))();
          }
          v84 = (_BYTE *)v14;
          goto LABEL_38;
        }
        v11 = (*(uint64_t (**)(_QWORD *))(*v94 + 16))(v94);
      }
      v86 = (_BYTE *)v11;
      goto LABEL_28;
    }
  }
  return this;
}

void sub_19F10C4F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34,uint64_t a35,uint64_t a36,char *a37)
{
  uint64_t v37;
  char *v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;

  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  v39 = a37;
  if (a37 == &a34)
  {
    v40 = 4;
    v39 = &a34;
  }
  else
  {
    if (!a37)
      goto LABEL_6;
    v40 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v39 + 8 * v40))();
LABEL_6:
  v41 = *(_QWORD **)(v37 - 176);
  if (v41 == (_QWORD *)(v37 - 200))
  {
    v42 = 4;
    v41 = (_QWORD *)(v37 - 200);
  }
  else
  {
    if (!v41)
      goto LABEL_11;
    v42 = 5;
  }
  (*(void (**)(void))(*v41 + 8 * v42))();
LABEL_11:
  v43 = *(_QWORD **)(v37 - 144);
  if (v43 == (_QWORD *)(v37 - 168))
  {
    v44 = 4;
    v43 = (_QWORD *)(v37 - 168);
  }
  else
  {
    if (!v43)
      goto LABEL_16;
    v44 = 5;
  }
  (*(void (**)(void))(*v43 + 8 * v44))();
LABEL_16:
  v45 = *(_QWORD **)(v37 - 112);
  if (v45 == (_QWORD *)(v37 - 136))
  {
    v46 = 4;
    v45 = (_QWORD *)(v37 - 136);
  }
  else
  {
    if (!v45)
      goto LABEL_21;
    v46 = 5;
  }
  (*(void (**)(void))(*v45 + 8 * v46))();
LABEL_21:
  gss::QueryableLocker<gss::PropertyID>::~QueryableLocker((uint64_t)&a12);
  _Unwind_Resume(a1);
}

uint64_t md::LabelStyle::getZoomRange(uint64_t a1)
{
  uint64_t v2;
  char v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  int v30;
  int v31;
  uint64_t v32;
  char v34;
  char v35;
  char v36;

  v34 = 0;
  v2 = *(_QWORD *)(a1 + 24);
  if (!v2)
    goto LABEL_85;
  if (((*(uint64_t (**)(uint64_t, char *))(*(_QWORD *)v2 + 48))(v2, &v34) & 1) != 0)
  {
    v3 = 0;
    v4 = 0;
    goto LABEL_73;
  }
  v34 = 1;
  v5 = *(_QWORD *)(a1 + 24);
  if (!v5)
    goto LABEL_85;
  if (((*(uint64_t (**)(uint64_t, char *))(*(_QWORD *)v5 + 48))(v5, &v34) & 1) != 0)
  {
    v3 = 0;
    v4 = 1;
    goto LABEL_73;
  }
  v34 = 2;
  v6 = *(_QWORD *)(a1 + 24);
  if (!v6)
    goto LABEL_85;
  if (((*(uint64_t (**)(uint64_t, char *))(*(_QWORD *)v6 + 48))(v6, &v34) & 1) != 0)
  {
    v3 = 0;
    v4 = 2;
    goto LABEL_73;
  }
  v34 = 3;
  v7 = *(_QWORD *)(a1 + 24);
  if (!v7)
    goto LABEL_85;
  if (((*(uint64_t (**)(uint64_t, char *))(*(_QWORD *)v7 + 48))(v7, &v34) & 1) != 0)
  {
    v3 = 0;
    v4 = 3;
    goto LABEL_73;
  }
  v34 = 4;
  v8 = *(_QWORD *)(a1 + 24);
  if (!v8)
    goto LABEL_85;
  if (((*(uint64_t (**)(uint64_t, char *))(*(_QWORD *)v8 + 48))(v8, &v34) & 1) != 0)
  {
    v3 = 0;
    v4 = 4;
    goto LABEL_73;
  }
  v34 = 5;
  v9 = *(_QWORD *)(a1 + 24);
  if (!v9)
    goto LABEL_85;
  if (((*(uint64_t (**)(uint64_t, char *))(*(_QWORD *)v9 + 48))(v9, &v34) & 1) != 0)
  {
    v3 = 0;
    v4 = 5;
    goto LABEL_73;
  }
  v34 = 6;
  v10 = *(_QWORD *)(a1 + 24);
  if (!v10)
    goto LABEL_85;
  if (((*(uint64_t (**)(uint64_t, char *))(*(_QWORD *)v10 + 48))(v10, &v34) & 1) != 0)
  {
    v3 = 0;
    v4 = 6;
    goto LABEL_73;
  }
  v34 = 7;
  v11 = *(_QWORD *)(a1 + 24);
  if (!v11)
    goto LABEL_85;
  if (((*(uint64_t (**)(uint64_t, char *))(*(_QWORD *)v11 + 48))(v11, &v34) & 1) != 0)
  {
    v3 = 0;
    v4 = 7;
    goto LABEL_73;
  }
  v34 = 8;
  v12 = *(_QWORD *)(a1 + 24);
  if (!v12)
    goto LABEL_85;
  if (((*(uint64_t (**)(uint64_t, char *))(*(_QWORD *)v12 + 48))(v12, &v34) & 1) != 0)
  {
    v3 = 0;
    v4 = 8;
    goto LABEL_73;
  }
  v34 = 9;
  v13 = *(_QWORD *)(a1 + 24);
  if (!v13)
    goto LABEL_85;
  if (((*(uint64_t (**)(uint64_t, char *))(*(_QWORD *)v13 + 48))(v13, &v34) & 1) != 0)
  {
    v3 = 0;
    v4 = 9;
    goto LABEL_73;
  }
  v34 = 10;
  v14 = *(_QWORD *)(a1 + 24);
  if (!v14)
    goto LABEL_85;
  if (((*(uint64_t (**)(uint64_t, char *))(*(_QWORD *)v14 + 48))(v14, &v34) & 1) != 0)
  {
    v3 = 0;
    v4 = 10;
    goto LABEL_73;
  }
  v34 = 11;
  v15 = *(_QWORD *)(a1 + 24);
  if (!v15)
    goto LABEL_85;
  if (((*(uint64_t (**)(uint64_t, char *))(*(_QWORD *)v15 + 48))(v15, &v34) & 1) != 0)
  {
    v3 = 0;
    v4 = 11;
    goto LABEL_73;
  }
  v34 = 12;
  v16 = *(_QWORD *)(a1 + 24);
  if (!v16)
    goto LABEL_85;
  if (((*(uint64_t (**)(uint64_t, char *))(*(_QWORD *)v16 + 48))(v16, &v34) & 1) != 0)
  {
    v3 = 0;
    v4 = 12;
    goto LABEL_73;
  }
  v34 = 13;
  v17 = *(_QWORD *)(a1 + 24);
  if (!v17)
    goto LABEL_85;
  if (((*(uint64_t (**)(uint64_t, char *))(*(_QWORD *)v17 + 48))(v17, &v34) & 1) != 0)
  {
    v3 = 0;
    v4 = 13;
    goto LABEL_73;
  }
  v34 = 14;
  v18 = *(_QWORD *)(a1 + 24);
  if (!v18)
    goto LABEL_85;
  if (((*(uint64_t (**)(uint64_t, char *))(*(_QWORD *)v18 + 48))(v18, &v34) & 1) != 0)
  {
    v3 = 0;
    v4 = 14;
    goto LABEL_73;
  }
  v34 = 15;
  v19 = *(_QWORD *)(a1 + 24);
  if (!v19)
    goto LABEL_85;
  if (((*(uint64_t (**)(uint64_t, char *))(*(_QWORD *)v19 + 48))(v19, &v34) & 1) != 0)
  {
    v3 = 0;
    v4 = 15;
    goto LABEL_73;
  }
  v34 = 16;
  v20 = *(_QWORD *)(a1 + 24);
  if (!v20)
    goto LABEL_85;
  if (((*(uint64_t (**)(uint64_t, char *))(*(_QWORD *)v20 + 48))(v20, &v34) & 1) != 0)
  {
    v3 = 0;
    v4 = 16;
    goto LABEL_73;
  }
  v34 = 17;
  v21 = *(_QWORD *)(a1 + 24);
  if (!v21)
    goto LABEL_85;
  if (((*(uint64_t (**)(uint64_t, char *))(*(_QWORD *)v21 + 48))(v21, &v34) & 1) != 0)
  {
    v3 = 0;
    v4 = 17;
    goto LABEL_73;
  }
  v34 = 18;
  v22 = *(_QWORD *)(a1 + 24);
  if (!v22)
    goto LABEL_85;
  if (((*(uint64_t (**)(uint64_t, char *))(*(_QWORD *)v22 + 48))(v22, &v34) & 1) != 0)
  {
    v3 = 0;
    v4 = 18;
    goto LABEL_73;
  }
  v34 = 19;
  v23 = *(_QWORD *)(a1 + 24);
  if (!v23)
    goto LABEL_85;
  if (((*(uint64_t (**)(uint64_t, char *))(*(_QWORD *)v23 + 48))(v23, &v34) & 1) != 0)
  {
    v3 = 0;
    v4 = 19;
    goto LABEL_73;
  }
  v34 = 20;
  v24 = *(_QWORD *)(a1 + 24);
  if (!v24)
    goto LABEL_85;
  if (((*(uint64_t (**)(uint64_t, char *))(*(_QWORD *)v24 + 48))(v24, &v34) & 1) != 0)
  {
    v3 = 0;
    v4 = 20;
    goto LABEL_73;
  }
  v34 = 21;
  v25 = *(_QWORD *)(a1 + 24);
  if (!v25)
    goto LABEL_85;
  if (((*(uint64_t (**)(uint64_t, char *))(*(_QWORD *)v25 + 48))(v25, &v34) & 1) != 0)
  {
    v3 = 0;
    v4 = 21;
    goto LABEL_73;
  }
  v34 = 22;
  v26 = *(_QWORD *)(a1 + 24);
  if (!v26)
    goto LABEL_85;
  if (((*(uint64_t (**)(uint64_t, char *))(*(_QWORD *)v26 + 48))(v26, &v34) & 1) != 0)
  {
    v3 = 0;
    v4 = 22;
    goto LABEL_73;
  }
  v34 = 23;
  v27 = *(_QWORD *)(a1 + 24);
  if (!v27)
  {
LABEL_85:
    std::__throw_bad_function_call[abi:nn180100]();
    goto LABEL_86;
  }
  if (!(*(unsigned int (**)(uint64_t, char *))(*(_QWORD *)v27 + 48))(v27, &v34))
  {
LABEL_86:
    v4 = 252;
    v30 = 252;
    return v4 | (v30 << 8);
  }
  v4 = 23;
  v3 = 1;
LABEL_73:
  v35 = 23;
  v28 = *(_QWORD *)(a1 + 24);
  if (!v28)
    goto LABEL_85;
  v29 = (*(uint64_t (**)(uint64_t, char *))(*(_QWORD *)v28 + 48))(v28, &v35);
  if (v29)
    v30 = -4;
  else
    v30 = 0;
  if (((v29 | v3) & 1) == 0)
  {
    v31 = 22;
    while (1)
    {
      v36 = v31;
      v32 = *(_QWORD *)(a1 + 24);
      if (!v32)
        break;
      if ((*(unsigned int (**)(uint64_t, char *))(*(_QWORD *)v32 + 48))(v32, &v36))
      {
        v30 = v31 + 1;
        return v4 | (v30 << 8);
      }
      if (v4 > --v31)
      {
        v30 = 0;
        return v4 | (v30 << 8);
      }
    }
    goto LABEL_85;
  }
  return v4 | (v30 << 8);
}

BOOL std::__function::__func<md::LabelStyle::updateZoomInvariantStyles(void)::$_3,std::allocator<md::LabelStyle::updateZoomInvariantStyles(void)::$_3>,BOOL ()(unsigned char)>::operator()(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v2;
  unsigned int v3;
  int v4;
  int v5;
  char v7;
  char v8;

  v2 = *(_QWORD *)(**(_QWORD **)(a1 + 8) + 24);
  if (*a2 >= 0x17u)
    v3 = 23;
  else
    v3 = *a2;
  v4 = *(unsigned __int8 *)(v2 + 12);
  if (v4 == 2)
  {
    v8 = 1;
    v7 = 1;
    v5 = *(unsigned __int8 *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<BOOL>((unsigned __int16 *)v2, 0x1CCu, v3, 0, &v8);
    gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<BOOL>((unsigned __int16 *)v2, 0x1CCu, v3, 1, &v7);
  }
  else
  {
    v5 = *(unsigned __int8 *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<BOOL>(*(unsigned __int16 **)(**(_QWORD **)(a1 + 8) + 24), 0x1CCu, v3, v4, 0);
  }
  return v5 != 0;
}

BOOL std::__function::__func<md::LabelStyle::updateZoomInvariantStyles(void)::$_0,std::allocator<md::LabelStyle::updateZoomInvariantStyles(void)::$_0>,BOOL ()(unsigned char)>::operator()(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v2;
  unsigned int v3;
  int v4;
  int v5;
  char v7;
  char v8;

  v2 = *(_QWORD *)(**(_QWORD **)(a1 + 8) + 24);
  if (*a2 >= 0x17u)
    v3 = 23;
  else
    v3 = *a2;
  v4 = *(unsigned __int8 *)(v2 + 12);
  if (v4 == 2)
  {
    v8 = 1;
    v7 = 1;
    v5 = *(unsigned __int8 *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<BOOL>((unsigned __int16 *)v2, 0x5Bu, v3, 0, &v8);
    gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<BOOL>((unsigned __int16 *)v2, 0x5Bu, v3, 1, &v7);
  }
  else
  {
    v5 = *(unsigned __int8 *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<BOOL>(*(unsigned __int16 **)(**(_QWORD **)(a1 + 8) + 24), 0x5Bu, v3, v4, 0);
  }
  return v5 != 0;
}

BOOL std::__function::__func<md::LabelStyle::updateZoomInvariantStyles(void)::$_1,std::allocator<md::LabelStyle::updateZoomInvariantStyles(void)::$_1>,BOOL ()(unsigned char)>::operator()(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v2;
  unsigned int v3;
  unsigned int v4;
  int v5;
  char v7;
  char v8;

  v2 = *(_QWORD *)(**(_QWORD **)(a1 + 8) + 24);
  if (*a2 >= 0x17u)
    v3 = 23;
  else
    v3 = *a2;
  v4 = *(unsigned __int8 *)(v2 + 12);
  if (v4 == 2)
  {
    v8 = 1;
    v7 = 1;
    v5 = *(unsigned __int8 *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(v2, 0x7Bu, v3, 0, &v8);
    gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(v2, 0x7Bu, v3, 1u, &v7);
  }
  else
  {
    v5 = *(unsigned __int8 *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(*(_QWORD *)(**(_QWORD **)(a1 + 8) + 24), 0x7Bu, v3, v4, 0);
  }
  return v5 != 0;
}

BOOL std::__function::__func<md::LabelStyle::updateZoomInvariantStyles(void)::$_2,std::allocator<md::LabelStyle::updateZoomInvariantStyles(void)::$_2>,BOOL ()(unsigned char)>::operator()(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v2;
  unsigned int v3;
  int v4;
  int v5;
  char v7;
  char v8;

  v2 = *(_QWORD *)(**(_QWORD **)(a1 + 8) + 24);
  if (*a2 >= 0x17u)
    v3 = 23;
  else
    v3 = *a2;
  v4 = *(unsigned __int8 *)(v2 + 12);
  if (v4 == 2)
  {
    v8 = 1;
    v7 = 1;
    v5 = *(unsigned __int8 *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<BOOL>((unsigned __int16 *)v2, 0x80u, v3, 0, &v8);
    gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<BOOL>((unsigned __int16 *)v2, 0x80u, v3, 1, &v7);
  }
  else
  {
    v5 = *(unsigned __int8 *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<BOOL>(*(unsigned __int16 **)(**(_QWORD **)(a1 + 8) + 24), 0x80u, v3, v4, 0);
  }
  return v5 != 0;
}

uint64_t std::__function::__func<md::LabelStyle::updateZoomInvariantStyles(void)::$_0,std::allocator<md::LabelStyle::updateZoomInvariantStyles(void)::$_0>,BOOL ()(unsigned char)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42C8750;
  a2[1] = v2;
  return result;
}

_QWORD *gss::RenderStyle<gss::PropertyID>::styleValueForKey<unsigned char>(_QWORD *result, unsigned int a2, _BYTE *a3)
{
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned __int16 *v12;
  unsigned __int16 *v13;
  unint64_t v14;
  uint64_t v15;
  unsigned int v16;
  unint64_t v17;
  unsigned __int16 *v18;
  unsigned __int16 *v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  unsigned __int16 *v24;
  uint64_t v25;
  unsigned int v26;
  unint64_t v27;
  uint64_t v28;
  unsigned __int16 *v29;
  unsigned int v30;
  uint64_t v31;
  unsigned __int16 *v32;
  unint64_t v33;
  unint64_t v34;
  unsigned __int16 *v35;
  unsigned __int16 *v36;
  unsigned int v37;
  int v38;
  unint64_t v39;
  unsigned int v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unsigned __int16 *v45;
  unsigned __int16 *v46;
  unsigned int v47;
  unint64_t v48;
  unint64_t v49;
  unsigned __int16 *v50;
  unsigned __int16 *v51;
  unsigned int v52;
  BOOL v53;

  v3 = result[2 * a2 + 2];
  if (!v3)
  {
    if (a3)
      *a3 = 0;
    return gss::defaultValueForKey<gss::PropertyID,unsigned char>(393);
  }
  v4 = (char *)&result[2 * a2];
  v5 = *((unsigned __int16 *)v4 + 28);
  if (*((_WORD *)v4 + 28))
  {
    v6 = *((_QWORD *)v4 + 6);
    v7 = v6 + 8 * v5;
    while (1)
    {
      v9 = *(uint64_t **)(*(_QWORD *)v6 + 72);
      if (!v9)
        goto LABEL_6;
      v10 = *v9;
      v11 = *(unsigned __int16 *)(v10 + 10);
      if (!*(_WORD *)(v10 + 10))
      {
        v8 = 0;
        goto LABEL_5;
      }
      v12 = *(unsigned __int16 **)v10;
      if (!*(_BYTE *)(v10 + 15))
        break;
      v13 = *(unsigned __int16 **)v10;
      v14 = *(unsigned __int16 *)(v10 + 10);
      if (v11 >= 0x1E)
      {
        do
        {
          v17 = v14 >> 1;
          v18 = &v13[v14 >> 1];
          v20 = *v18;
          v19 = v18 + 1;
          result = (_QWORD *)v20;
          v14 += ~(v14 >> 1);
          if (v20 < 0x189)
            v13 = v19;
          else
            v14 = v17;
        }
        while (v14);
        if (v13 == &v12[v11] || *v13 != 393)
          goto LABEL_6;
        goto LABEL_26;
      }
      v15 = 0;
      while (1)
      {
        v16 = v12[v15];
        if (v16 >= 0x189)
          break;
        if (v11 == ++v15)
          goto LABEL_6;
      }
      v8 = (unsigned __int16)v15;
      if (v16 != 393)
        v8 = *(unsigned __int16 *)(v10 + 10);
LABEL_5:
      if (v8 != (_DWORD)v11)
      {
        v27 = *(unsigned __int16 *)(v10 + 26);
        if (!*(_WORD *)(v10 + 26))
          return &gss::PropertySetValueHelper<gss::PropertyID,unsigned char>::value(gss::PropertyID,gss::StylePropertySet<gss::PropertyID> const&)::_defaultValue;
        v28 = *(_QWORD *)(v10 + 16);
        if (*(_BYTE *)(v10 + 31))
        {
          if (v27 < 0x1E)
          {
            v29 = 0;
            result = &gss::PropertySetValueHelper<gss::PropertyID,unsigned char>::value(gss::PropertyID,gss::StylePropertySet<gss::PropertyID> const&)::_defaultValue;
            while (1)
            {
              v30 = *(unsigned __int16 *)(v28 + 2 * (_QWORD)v29);
              if (v30 >= 0x189)
                break;
              v29 = (unsigned __int16 *)((char *)v29 + 1);
              if ((unsigned __int16 *)v27 == v29)
                return result;
            }
            LODWORD(v29) = (unsigned __int16)v29;
            if (v30 != 393)
              LODWORD(v29) = *(unsigned __int16 *)(v10 + 26);
            if (v29 < v27)
              return (_QWORD *)(v28 + *(unsigned __int16 *)(v10 + 24) + v29);
            return &gss::PropertySetValueHelper<gss::PropertyID,unsigned char>::value(gss::PropertyID,gss::StylePropertySet<gss::PropertyID> const&)::_defaultValue;
          }
          v29 = *(unsigned __int16 **)(v10 + 16);
          v43 = *(unsigned __int16 *)(v10 + 26);
          do
          {
            v44 = v43 >> 1;
            v45 = &v29[v43 >> 1];
            v47 = *v45;
            v46 = v45 + 1;
            v43 += ~(v43 >> 1);
            if (v47 < 0x189)
              v29 = v46;
            else
              v43 = v44;
          }
          while (v43);
          if (v29 == (unsigned __int16 *)(v28 + 2 * v27) || *v29 != 393)
            return &gss::PropertySetValueHelper<gss::PropertyID,unsigned char>::value(gss::PropertyID,gss::StylePropertySet<gss::PropertyID> const&)::_defaultValue;
        }
        else
        {
          v41 = 2 * v27;
          v29 = *(unsigned __int16 **)(v10 + 16);
          while (*v29 != 393)
          {
            ++v29;
            v41 -= 2;
            if (!v41)
            {
              LODWORD(v29) = v28 + 2 * v27;
              break;
            }
          }
        }
        LODWORD(v29) = (unsigned __int16)(((_DWORD)v29 - v28) >> 1);
        if (v29 < v27)
          return (_QWORD *)(v28 + *(unsigned __int16 *)(v10 + 24) + v29);
        return &gss::PropertySetValueHelper<gss::PropertyID,unsigned char>::value(gss::PropertyID,gss::StylePropertySet<gss::PropertyID> const&)::_defaultValue;
      }
LABEL_6:
      v6 += 8;
      if (v6 == v7)
        goto LABEL_29;
    }
    v21 = 2 * v11;
    v13 = *(unsigned __int16 **)v10;
    while (*v13 != 393)
    {
      ++v13;
      v21 -= 2;
      if (!v21)
      {
        LODWORD(v13) = (_DWORD)v12 + 2 * v11;
        break;
      }
    }
LABEL_26:
    v8 = (unsigned __int16)(((_DWORD)v13 - (_DWORD)v12) >> 1);
    goto LABEL_5;
  }
LABEL_29:
  v22 = *(uint64_t **)(v3 + 72);
  if (!v22)
    goto LABEL_60;
  v10 = *v22;
  v23 = *(unsigned __int16 *)(v10 + 10);
  if (!*(_WORD *)(v10 + 10))
    goto LABEL_60;
  v24 = *(unsigned __int16 **)v10;
  if (!*(_BYTE *)(v10 + 15))
  {
    v31 = 2 * v23;
    v32 = *(unsigned __int16 **)v10;
    while (*v32 != 393)
    {
      ++v32;
      v31 -= 2;
      if (!v31)
      {
        LODWORD(v32) = (_DWORD)v24 + 2 * v23;
        break;
      }
    }
LABEL_59:
    if ((unsigned __int16)(((_DWORD)v32 - (_DWORD)v24) >> 1) != (_DWORD)v23)
      goto LABEL_66;
    goto LABEL_60;
  }
  if (v23 >= 0x1E)
  {
    v32 = *(unsigned __int16 **)v10;
    v33 = *(unsigned __int16 *)(v10 + 10);
    do
    {
      v34 = v33 >> 1;
      v35 = &v32[v33 >> 1];
      v37 = *v35;
      v36 = v35 + 1;
      v33 += ~(v33 >> 1);
      if (v37 < 0x189)
        v32 = v36;
      else
        v33 = v34;
    }
    while (v33);
    if (v32 != &v24[v23] && *v32 == 393)
      goto LABEL_59;
LABEL_60:
    if (a3)
      *a3 = 0;
    return gss::defaultValueForKey<gss::PropertyID,unsigned char>(393);
  }
  v25 = 0;
  while (1)
  {
    v26 = v24[v25];
    if (v26 >= 0x189)
      break;
    if (v23 == ++v25)
      goto LABEL_60;
  }
  v38 = (unsigned __int16)v25;
  if (v26 != 393)
    v38 = *(unsigned __int16 *)(v10 + 10);
  if (v38 == (_DWORD)v23)
    goto LABEL_60;
LABEL_66:
  v39 = *(unsigned __int16 *)(v10 + 26);
  if (!*(_WORD *)(v10 + 26))
    return &gss::PropertySetValueHelper<gss::PropertyID,unsigned char>::value(gss::PropertyID,gss::StylePropertySet<gss::PropertyID> const&)::_defaultValue;
  v28 = *(_QWORD *)(v10 + 16);
  if (*(_BYTE *)(v10 + 31))
  {
    if (v39 < 0x1E)
    {
      v29 = 0;
      result = &gss::PropertySetValueHelper<gss::PropertyID,unsigned char>::value(gss::PropertyID,gss::StylePropertySet<gss::PropertyID> const&)::_defaultValue;
      while (1)
      {
        v40 = *(unsigned __int16 *)(v28 + 2 * (_QWORD)v29);
        if (v40 >= 0x189)
          break;
        v29 = (unsigned __int16 *)((char *)v29 + 1);
        if ((unsigned __int16 *)v39 == v29)
          return result;
      }
      LODWORD(v29) = (unsigned __int16)v29;
      if (v40 != 393)
        LODWORD(v29) = *(unsigned __int16 *)(v10 + 26);
      v53 = v29 >= v39;
      if ((_DWORD)v29 == (_DWORD)v39)
        return &gss::PropertySetValueHelper<gss::PropertyID,unsigned char>::value(gss::PropertyID,gss::StylePropertySet<gss::PropertyID> const&)::_defaultValue;
      goto LABEL_107;
    }
    v29 = *(unsigned __int16 **)(v10 + 16);
    v48 = *(unsigned __int16 *)(v10 + 26);
    do
    {
      v49 = v48 >> 1;
      v50 = &v29[v48 >> 1];
      v52 = *v50;
      v51 = v50 + 1;
      v48 += ~(v48 >> 1);
      if (v52 < 0x189)
        v29 = v51;
      else
        v48 = v49;
    }
    while (v48);
    if (v29 == (unsigned __int16 *)(v28 + 2 * v39) || *v29 != 393)
      return &gss::PropertySetValueHelper<gss::PropertyID,unsigned char>::value(gss::PropertyID,gss::StylePropertySet<gss::PropertyID> const&)::_defaultValue;
  }
  else
  {
    v42 = 2 * v39;
    v29 = *(unsigned __int16 **)(v10 + 16);
    while (*v29 != 393)
    {
      ++v29;
      v42 -= 2;
      if (!v42)
      {
        LODWORD(v29) = v28 + 2 * v39;
        break;
      }
    }
  }
  LODWORD(v29) = (unsigned __int16)(((_DWORD)v29 - v28) >> 1);
  v53 = v29 >= v39;
  if ((_DWORD)v29 == (_DWORD)v39)
    return &gss::PropertySetValueHelper<gss::PropertyID,unsigned char>::value(gss::PropertyID,gss::StylePropertySet<gss::PropertyID> const&)::_defaultValue;
LABEL_107:
  if (!v53)
    return (_QWORD *)(v28 + *(unsigned __int16 *)(v10 + 24) + v29);
  return result;
}

uint64_t std::__function::__func<md::LabelStyle::updateZoomInvariantStyles(void)::$_3,std::allocator<md::LabelStyle::updateZoomInvariantStyles(void)::$_3>,BOOL ()(unsigned char)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42C8828;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<md::LabelStyle::updateZoomInvariantStyles(void)::$_2,std::allocator<md::LabelStyle::updateZoomInvariantStyles(void)::$_2>,BOOL ()(unsigned char)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42C87E0;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<md::LabelStyle::updateZoomInvariantStyles(void)::$_1,std::allocator<md::LabelStyle::updateZoomInvariantStyles(void)::$_1>,BOOL ()(unsigned char)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42C8798;
  a2[1] = v2;
  return result;
}

void md::NullLabelPart::~NullLabelPart(void **this)
{
  unsigned __int8 v2;
  uint64_t v3;
  geo::read_write_lock *v4;
  const char *v5;
  malloc_zone_t *zone;

  *this = off_1E42AF8C0;
  free(this[59]);
  free(this[60]);
  free(this[62]);
  free(this[29]);
  free(this[30]);
  free(this[32]);
  {
    v3 = operator new();
    *(_QWORD *)(v3 + 16) = 0x5ED09DD50000000FLL;
    *(_QWORD *)(v3 + 24) = "VectorKitLabels";
    *(_OWORD *)(v3 + 32) = xmmword_19FFB2E80;
    *(_QWORD *)v3 = &off_1E42B5668;
    *(_QWORD *)(v3 + 8) = "VectorKitLabels";
    *(_OWORD *)(v3 + 72) = 0u;
    *(_OWORD *)(v3 + 88) = 0u;
    *(_OWORD *)(v3 + 104) = 0u;
    *(_OWORD *)(v3 + 120) = 0u;
    *(_OWORD *)(v3 + 136) = 0u;
    *(_OWORD *)(v3 + 152) = 0u;
    *(_OWORD *)(v3 + 168) = 0u;
    *(_OWORD *)(v3 + 184) = 0u;
    *(_OWORD *)(v3 + 200) = 0u;
    *(_OWORD *)(v3 + 216) = 0u;
    *(_OWORD *)(v3 + 232) = 0u;
    *(_QWORD *)(v3 + 248) = 0;
    *(_OWORD *)(v3 + 56) = 0u;
    v4 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v3 + 56), 0);
    if ((_DWORD)v4)
      geo::read_write_lock::logFailure(v4, (uint64_t)"initialization", v5);
    zone = malloc_create_zone(0, 0);
    *(_QWORD *)(v3 + 48) = zone;
    malloc_set_zone_name(zone, "VectorKitLabels");
    *(_QWORD *)(v3 + 256) = os_log_create("com.apple.VectorKit", "Memory");
    mdm::Allocator::instance(void)::alloc = v3;
  }
  (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc + 40))(mdm::Allocator::instance(void)::alloc, this, 576);
}

{
  *this = off_1E42AF8C0;
  free(this[59]);
  free(this[60]);
  free(this[62]);
  free(this[29]);
  free(this[30]);
  free(this[32]);
}

void md::CompositeLabelPart::~CompositeLabelPart(md::CompositeLabelPart *this)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  *(_QWORD *)this = off_1E4294028;
  if (*((_BYTE *)this + 628))
  {
    v2 = (_QWORD *)*((_QWORD *)this + 72);
    v3 = (_QWORD *)*((_QWORD *)this + 73);
    while (v2 != v3)
    {
      if (*v2)
        (*(void (**)(_QWORD))(*(_QWORD *)*v2 + 8))(*v2);
      ++v2;
    }
  }
  if (*((_BYTE *)this + 616))
    *((_BYTE *)this + 616) = 0;
  if (*((_BYTE *)this + 608))
    *((_BYTE *)this + 608) = 0;
  v4 = *((_QWORD *)this + 72);
  if (v4)
  {
    *((_QWORD *)this + 73) = v4;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 75) + 40))(*((_QWORD *)this + 75), v4, *((_QWORD *)this + 74) - v4);
  }
  *(_QWORD *)this = off_1E42AF8C0;
  free(*((void **)this + 59));
  free(*((void **)this + 60));
  free(*((void **)this + 62));
  free(*((void **)this + 29));
  free(*((void **)this + 30));
  free(*((void **)this + 32));
}

uint64_t md::CompositeLabelPart::animate(uint64_t this, float a2)
{
  uint64_t *v2;
  uint64_t *i;
  uint64_t v5;

  v2 = *(uint64_t **)(this + 576);
  for (i = *(uint64_t **)(this + 584);
        v2 != i;
        this = (*(uint64_t (**)(uint64_t, float))(*(_QWORD *)v5 + 616))(v5, a2))
  {
    v5 = *v2++;
  }
  return this;
}

void md::HorizontalTextLabelPart::~HorizontalTextLabelPart(md::HorizontalTextLabelPart *this)
{
  unsigned __int8 v2;
  uint64_t v3;
  geo::read_write_lock *v4;
  const char *v5;
  malloc_zone_t *zone;

  md::TextLabelPart::~TextLabelPart(this);
  {
    v3 = operator new();
    *(_QWORD *)(v3 + 16) = 0x5ED09DD50000000FLL;
    *(_QWORD *)(v3 + 24) = "VectorKitLabels";
    *(_OWORD *)(v3 + 32) = xmmword_19FFB2E80;
    *(_QWORD *)v3 = &off_1E42B5668;
    *(_QWORD *)(v3 + 8) = "VectorKitLabels";
    *(_OWORD *)(v3 + 72) = 0u;
    *(_OWORD *)(v3 + 88) = 0u;
    *(_OWORD *)(v3 + 104) = 0u;
    *(_OWORD *)(v3 + 120) = 0u;
    *(_OWORD *)(v3 + 136) = 0u;
    *(_OWORD *)(v3 + 152) = 0u;
    *(_OWORD *)(v3 + 168) = 0u;
    *(_OWORD *)(v3 + 184) = 0u;
    *(_OWORD *)(v3 + 200) = 0u;
    *(_OWORD *)(v3 + 216) = 0u;
    *(_OWORD *)(v3 + 232) = 0u;
    *(_QWORD *)(v3 + 248) = 0;
    *(_OWORD *)(v3 + 56) = 0u;
    v4 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v3 + 56), 0);
    if ((_DWORD)v4)
      geo::read_write_lock::logFailure(v4, (uint64_t)"initialization", v5);
    zone = malloc_create_zone(0, 0);
    *(_QWORD *)(v3 + 48) = zone;
    malloc_set_zone_name(zone, "VectorKitLabels");
    *(_QWORD *)(v3 + 256) = os_log_create("com.apple.VectorKit", "Memory");
    mdm::Allocator::instance(void)::alloc = v3;
  }
  (*(void (**)(uint64_t, md::HorizontalTextLabelPart *, uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc
                                                                          + 40))(mdm::Allocator::instance(void)::alloc, this, 1168);
}

void md::CaptionedIconLabelPart::~CaptionedIconLabelPart(md::CaptionedIconLabelPart *this)
{
  unsigned __int8 v2;
  uint64_t v3;
  geo::read_write_lock *v4;
  const char *v5;
  malloc_zone_t *zone;

  md::CaptionedIconLabelPart::~CaptionedIconLabelPart(this);
  {
    v3 = operator new();
    *(_QWORD *)(v3 + 16) = 0x5ED09DD50000000FLL;
    *(_QWORD *)(v3 + 24) = "VectorKitLabels";
    *(_OWORD *)(v3 + 32) = xmmword_19FFB2E80;
    *(_QWORD *)v3 = &off_1E42B5668;
    *(_QWORD *)(v3 + 8) = "VectorKitLabels";
    *(_OWORD *)(v3 + 72) = 0u;
    *(_OWORD *)(v3 + 88) = 0u;
    *(_OWORD *)(v3 + 104) = 0u;
    *(_OWORD *)(v3 + 120) = 0u;
    *(_OWORD *)(v3 + 136) = 0u;
    *(_OWORD *)(v3 + 152) = 0u;
    *(_OWORD *)(v3 + 168) = 0u;
    *(_OWORD *)(v3 + 184) = 0u;
    *(_OWORD *)(v3 + 200) = 0u;
    *(_OWORD *)(v3 + 216) = 0u;
    *(_OWORD *)(v3 + 232) = 0u;
    *(_QWORD *)(v3 + 248) = 0;
    *(_OWORD *)(v3 + 56) = 0u;
    v4 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v3 + 56), 0);
    if ((_DWORD)v4)
      geo::read_write_lock::logFailure(v4, (uint64_t)"initialization", v5);
    zone = malloc_create_zone(0, 0);
    *(_QWORD *)(v3 + 48) = zone;
    malloc_set_zone_name(zone, "VectorKitLabels");
    *(_QWORD *)(v3 + 256) = os_log_create("com.apple.VectorKit", "Memory");
    mdm::Allocator::instance(void)::alloc = v3;
  }
  (*(void (**)(uint64_t, md::CaptionedIconLabelPart *, uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc
                                                                         + 40))(mdm::Allocator::instance(void)::alloc, this, 968);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)this = off_1E429C6C0;
  v2 = *((_QWORD *)this + 114);
  *((_QWORD *)this + 114) = 0;
  if (v2)
    MEMORY[0x1A1AF4E00](v2, 0x1000C40AE2C30F4);
  v3 = *((_QWORD *)this + 113);
  *((_QWORD *)this + 113) = 0;
  if (v3)
    MEMORY[0x1A1AF4E00](v3, 0x1000C40AE2C30F4);
  v4 = *((_QWORD *)this + 112);
  *((_QWORD *)this + 112) = 0;
  if (v4)
    MEMORY[0x1A1AF4E00](v4, 0x1000C40AE2C30F4);
  v5 = *((_QWORD *)this + 111);
  *((_QWORD *)this + 111) = 0;
  if (v5)
    MEMORY[0x1A1AF4E00](v5, 0x1000C40AE2C30F4);
  v6 = *((_QWORD *)this + 100);
  if (v6)
  {
    *((_QWORD *)this + 101) = v6;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 103) + 40))(*((_QWORD *)this + 103), v6, *((_QWORD *)this + 102) - v6);
  }
  if (*((char *)this + 759) < 0)
    (*(void (**)(_QWORD, _QWORD, uint64_t))(**((_QWORD **)this + 95) + 40))(*((_QWORD *)this + 95), *((_QWORD *)this + 92), *((_QWORD *)this + 94) & 0x7FFFFFFFFFFFFFFFLL);
  md::CompositeLabelPart::~CompositeLabelPart(this);
}

void md::PointIconLabelPart::~PointIconLabelPart(md::PointIconLabelPart *this)
{
  uint64_t v2;
  unsigned __int8 v3;
  uint64_t v4;
  geo::read_write_lock *v5;
  const char *v6;
  malloc_zone_t *zone;

  *(_QWORD *)this = off_1E42956E8;
  v2 = *((_QWORD *)this + 104);
  *((_QWORD *)this + 104) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  if (*((char *)this + 791) < 0)
    (*(void (**)(_QWORD, _QWORD, uint64_t))(**((_QWORD **)this + 99) + 40))(*((_QWORD *)this + 99), *((_QWORD *)this + 96), *((_QWORD *)this + 98) & 0x7FFFFFFFFFFFFFFFLL);
  md::IconLabelPart::~IconLabelPart(this);
  {
    v4 = operator new();
    *(_QWORD *)(v4 + 16) = 0x5ED09DD50000000FLL;
    *(_QWORD *)(v4 + 24) = "VectorKitLabels";
    *(_OWORD *)(v4 + 32) = xmmword_19FFB2E80;
    *(_QWORD *)v4 = &off_1E42B5668;
    *(_QWORD *)(v4 + 8) = "VectorKitLabels";
    *(_OWORD *)(v4 + 72) = 0u;
    *(_OWORD *)(v4 + 88) = 0u;
    *(_OWORD *)(v4 + 104) = 0u;
    *(_OWORD *)(v4 + 120) = 0u;
    *(_OWORD *)(v4 + 136) = 0u;
    *(_OWORD *)(v4 + 152) = 0u;
    *(_OWORD *)(v4 + 168) = 0u;
    *(_OWORD *)(v4 + 184) = 0u;
    *(_OWORD *)(v4 + 200) = 0u;
    *(_OWORD *)(v4 + 216) = 0u;
    *(_OWORD *)(v4 + 232) = 0u;
    *(_QWORD *)(v4 + 248) = 0;
    *(_OWORD *)(v4 + 56) = 0u;
    v5 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v4 + 56), 0);
    if ((_DWORD)v5)
      geo::read_write_lock::logFailure(v5, (uint64_t)"initialization", v6);
    zone = malloc_create_zone(0, 0);
    *(_QWORD *)(v4 + 48) = zone;
    malloc_set_zone_name(zone, "VectorKitLabels");
    *(_QWORD *)(v4 + 256) = os_log_create("com.apple.VectorKit", "Memory");
    mdm::Allocator::instance(void)::alloc = v4;
  }
  (*(void (**)(uint64_t, md::PointIconLabelPart *, uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc
                                                                     + 40))(mdm::Allocator::instance(void)::alloc, this, 840);
}

{
  uint64_t v2;

  *(_QWORD *)this = off_1E42956E8;
  v2 = *((_QWORD *)this + 104);
  *((_QWORD *)this + 104) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  if (*((char *)this + 791) < 0)
    (*(void (**)(_QWORD, _QWORD, uint64_t))(**((_QWORD **)this + 99) + 40))(*((_QWORD *)this + 99), *((_QWORD *)this + 96), *((_QWORD *)this + 98) & 0x7FFFFFFFFFFFFFFFLL);
  md::IconLabelPart::~IconLabelPart(this);
}

void md::TextLabelPart::~TextLabelPart(md::TextLabelPart *this)
{
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;

  *(_QWORD *)this = off_1E428E890;
  v2 = (void *)*((_QWORD *)this + 117);
  if (v2)
  {
    *((_QWORD *)this + 118) = v2;
    operator delete(v2);
  }
  if (*((_BYTE *)this + 920))
    *((_BYTE *)this + 920) = 0;
  v3 = (void *)*((_QWORD *)this + 110);
  if (v3)
  {
    *((_QWORD *)this + 111) = v3;
    operator delete(v3);
  }
  if (*((_BYTE *)this + 856))
    *((_BYTE *)this + 856) = 0;
  v4 = *((_QWORD *)this + 106);
  *((_QWORD *)this + 106) = 0;
  if (v4)
    MEMORY[0x1A1AF4E00](v4, 0x1000C40AE2C30F4);
  v5 = *((_QWORD *)this + 105);
  *((_QWORD *)this + 105) = 0;
  if (v5)
    MEMORY[0x1A1AF4E00](v5, 0x1000C40AE2C30F4);
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 91);
  if (!v6)
    goto LABEL_17;
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  do
    v8 = __ldaxr(p_shared_owners);
  while (__stlxr(v8 - 1, p_shared_owners));
  if (!v8)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
    v9 = (std::__shared_weak_count *)*((_QWORD *)this + 77);
    if (!v9)
      goto LABEL_23;
  }
  else
  {
LABEL_17:
    v9 = (std::__shared_weak_count *)*((_QWORD *)this + 77);
    if (!v9)
      goto LABEL_23;
  }
  v10 = (unint64_t *)&v9->__shared_owners_;
  do
    v11 = __ldaxr(v10);
  while (__stlxr(v11 - 1, v10));
  if (!v11)
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
LABEL_23:
  v12 = (std::__shared_weak_count *)*((_QWORD *)this + 75);
  if (!v12)
    goto LABEL_27;
  v13 = (unint64_t *)&v12->__shared_owners_;
  do
    v14 = __ldaxr(v13);
  while (__stlxr(v14 - 1, v13));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
    v15 = (std::__shared_weak_count *)*((_QWORD *)this + 73);
    if (!v15)
      goto LABEL_33;
  }
  else
  {
LABEL_27:
    v15 = (std::__shared_weak_count *)*((_QWORD *)this + 73);
    if (!v15)
      goto LABEL_33;
  }
  v16 = (unint64_t *)&v15->__shared_owners_;
  do
    v17 = __ldaxr(v16);
  while (__stlxr(v17 - 1, v16));
  if (!v17)
  {
    ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
    std::__shared_weak_count::__release_weak(v15);
  }
LABEL_33:
  *(_QWORD *)this = off_1E42AF8C0;
  free(*((void **)this + 59));
  free(*((void **)this + 60));
  free(*((void **)this + 62));
  free(*((void **)this + 29));
  free(*((void **)this + 30));
  free(*((void **)this + 32));
}

{
  unsigned __int8 v2;
  uint64_t v3;
  geo::read_write_lock *v4;
  const char *v5;
  malloc_zone_t *zone;

  md::TextLabelPart::~TextLabelPart(this);
  {
    v3 = operator new();
    *(_QWORD *)(v3 + 16) = 0x5ED09DD50000000FLL;
    *(_QWORD *)(v3 + 24) = "VectorKitLabels";
    *(_OWORD *)(v3 + 32) = xmmword_19FFB2E80;
    *(_QWORD *)v3 = &off_1E42B5668;
    *(_QWORD *)(v3 + 8) = "VectorKitLabels";
    *(_OWORD *)(v3 + 72) = 0u;
    *(_OWORD *)(v3 + 88) = 0u;
    *(_OWORD *)(v3 + 104) = 0u;
    *(_OWORD *)(v3 + 120) = 0u;
    *(_OWORD *)(v3 + 136) = 0u;
    *(_OWORD *)(v3 + 152) = 0u;
    *(_OWORD *)(v3 + 168) = 0u;
    *(_OWORD *)(v3 + 184) = 0u;
    *(_OWORD *)(v3 + 200) = 0u;
    *(_OWORD *)(v3 + 216) = 0u;
    *(_OWORD *)(v3 + 232) = 0u;
    *(_QWORD *)(v3 + 248) = 0;
    *(_OWORD *)(v3 + 56) = 0u;
    v4 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v3 + 56), 0);
    if ((_DWORD)v4)
      geo::read_write_lock::logFailure(v4, (uint64_t)"initialization", v5);
    zone = malloc_create_zone(0, 0);
    *(_QWORD *)(v3 + 48) = zone;
    malloc_set_zone_name(zone, "VectorKitLabels");
    *(_QWORD *)(v3 + 256) = os_log_create("com.apple.VectorKit", "Memory");
    mdm::Allocator::instance(void)::alloc = v3;
  }
  (*(void (**)(uint64_t, md::TextLabelPart *, uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc + 40))(mdm::Allocator::instance(void)::alloc, this, 960);
}

void md::IconLabelPart::~IconLabelPart(md::IconLabelPart *this)
{
  uint64_t v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  *(_QWORD *)this = off_1E428D7E0;
  if (*((_BYTE *)this + 756))
    *((_BYTE *)this + 756) = 0;
  v2 = *((_QWORD *)this + 92);
  *((_QWORD *)this + 92) = 0;
  if (v2)
    MEMORY[0x1A1AF4E00](v2, 0x1000C40AE2C30F4);
  v3 = *((_QWORD *)this + 91);
  *((_QWORD *)this + 91) = 0;
  if (v3)
    MEMORY[0x1A1AF4E00](v3, 0x1000C40AE2C30F4);
  v4 = (std::__shared_weak_count *)*((_QWORD *)this + 81);
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  *(_QWORD *)this = off_1E42AF8C0;
  free(*((void **)this + 59));
  free(*((void **)this + 60));
  free(*((void **)this + 62));
  free(*((void **)this + 29));
  free(*((void **)this + 30));
  free(*((void **)this + 32));
}

{
  unsigned __int8 v2;
  uint64_t v3;
  geo::read_write_lock *v4;
  const char *v5;
  malloc_zone_t *zone;

  md::IconLabelPart::~IconLabelPart(this);
  {
    v3 = operator new();
    *(_QWORD *)(v3 + 16) = 0x5ED09DD50000000FLL;
    *(_QWORD *)(v3 + 24) = "VectorKitLabels";
    *(_OWORD *)(v3 + 32) = xmmword_19FFB2E80;
    *(_QWORD *)v3 = &off_1E42B5668;
    *(_QWORD *)(v3 + 8) = "VectorKitLabels";
    *(_OWORD *)(v3 + 72) = 0u;
    *(_OWORD *)(v3 + 88) = 0u;
    *(_OWORD *)(v3 + 104) = 0u;
    *(_OWORD *)(v3 + 120) = 0u;
    *(_OWORD *)(v3 + 136) = 0u;
    *(_OWORD *)(v3 + 152) = 0u;
    *(_OWORD *)(v3 + 168) = 0u;
    *(_OWORD *)(v3 + 184) = 0u;
    *(_OWORD *)(v3 + 200) = 0u;
    *(_OWORD *)(v3 + 216) = 0u;
    *(_OWORD *)(v3 + 232) = 0u;
    *(_QWORD *)(v3 + 248) = 0;
    *(_OWORD *)(v3 + 56) = 0u;
    v4 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v3 + 56), 0);
    if ((_DWORD)v4)
      geo::read_write_lock::logFailure(v4, (uint64_t)"initialization", v5);
    zone = malloc_create_zone(0, 0);
    *(_QWORD *)(v3 + 48) = zone;
    malloc_set_zone_name(zone, "VectorKitLabels");
    *(_QWORD *)(v3 + 256) = os_log_create("com.apple.VectorKit", "Memory");
    mdm::Allocator::instance(void)::alloc = v3;
  }
  (*(void (**)(uint64_t, md::IconLabelPart *, uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc + 40))(mdm::Allocator::instance(void)::alloc, this, 768);
}

uint64_t md::PointLabelFeature::externalPointFeature(md::PointLabelFeature *this)
{
  return *((_QWORD *)this + 63);
}

uint64_t md::LineTextWithAuxLabelPart::updateForDisplay(md::LineTextWithAuxLabelPart *this)
{
  int v2;
  uint64_t v3;

  v2 = *((unsigned __int8 *)this + 691);
  if (v2 != *((unsigned __int8 *)this + 659))
  {
    (*(void (**)(md::LineTextWithAuxLabelPart *, _QWORD))(*(_QWORD *)this + 104))(this, 0);
    v2 = *((unsigned __int8 *)this + 691);
  }
  if (v2)
  {
    (*(void (**)(_QWORD))(***((_QWORD ***)this + 72) + 112))(**((_QWORD **)this + 72));
    v3 = *((unsigned __int8 *)this + 657);
    *((_BYTE *)this + 689) = v3;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(***((_QWORD ***)this + 72) + 392))(**((_QWORD **)this + 72), 1, v3);
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(*((_QWORD *)this + 72) + 8) + 392))(*(_QWORD *)(*((_QWORD *)this + 72) + 8), 1, v3);
  }
  (*(void (**)(_QWORD))(**(_QWORD **)(*((_QWORD *)this + 72) + 8) + 112))(*(_QWORD *)(*((_QWORD *)this + 72) + 8));
  *((_DWORD *)this + 166) = *((_DWORD *)this + 158);
  return (*(uint64_t (**)(_QWORD, char *))(**((_QWORD **)this + 80) + 24))(*((_QWORD *)this + 80), (char *)this + 672);
}

uint64_t md::ArrowLabelPart::layoutAlongPath(uint64_t a1, int a2, uint64_t a3, float a4, float a5)
{
  uint64_t v8;
  float32x2_t *v9;
  double v10;
  float32x2_t *v11;
  float v12;
  unsigned __int8 *v13;
  int v14;
  int v15;
  char v16;
  unsigned __int8 *v17;
  int v18;
  int v19;
  int v20;
  float v21;
  float32x2_t v22;
  float32x2_t v23;
  uint64_t v24;
  float32x2_t v26;
  int v27;
  float32x2_t v28;
  float32_t v30;
  float32x2_t v31;
  __int32 v32;
  float32x2_t *v33;

  if (a2)
    v8 = 840;
  else
    v8 = 768;
  if (a2)
    v9 = (float32x2_t *)(a1 + 840);
  else
    v9 = (float32x2_t *)(a1 + 768);
  v10 = md::LabelPart::createHiker(&v33, a1, a2, *(_QWORD *)(a1 + v8), a3);
  v11 = v33;
  (*(void (**)(float32x2_t *, double))(*(_QWORD *)v33 + 88))(v33, v10);
  if (!v11[1].i8[1])
    goto LABEL_39;
  if (v9[8].i8[4])
  {
    v11[1].i8[3] = v9[8].i8[3];
    v11[1].i8[0] = 1;
    (*(void (**)(float32x2_t *, float32_t))(*(_QWORD *)v11 + 56))(v11, v9[7].f32[1]);
    (*(void (**)(float32x2_t *))(*(_QWORD *)v11 + 88))(v11);
    if (v11[1].i8[2])
      goto LABEL_39;
    (*(void (**)(float32x2_t *))(*(_QWORD *)v11 + 88))(v11);
    if (!v11[1].i8[1])
      goto LABEL_39;
    v12 = v9[6].f32[0];
  }
  else
  {
    v13 = *(unsigned __int8 **)(a1 + v8);
    v14 = (*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)v13 + 80))(v13);
    v15 = v13[45];
    if (v13[45])
      v16 = 1;
    else
      v16 = 2;
    if (v15 == 2)
      v16 = 0;
    if (v14)
      LOBYTE(v15) = v16;
    v11[1].i8[3] = v15 == 2;
    v11[1].i8[0] = 1;
    v17 = *(unsigned __int8 **)(a1 + v8);
    v18 = (*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)v17 + 80))(v17);
    v19 = v17[45];
    if (v17[45])
      v20 = 1;
    else
      v20 = 2;
    if (v19 == 2)
      v20 = 0;
    if (v18)
      v19 = v20;
    if (v19 == 1)
      (*(void (**)(float32x2_t *, float))(*(_QWORD *)v11 + 40))(v11, -v9[6].f32[0]);
    (*(void (**)(float32x2_t *))(*(_QWORD *)v11 + 88))(v11);
    if (!v11[1].i8[1])
      goto LABEL_39;
    v12 = v9[6].f32[0] + v9[6].f32[0];
  }
  (*(void (**)(float32x2_t *))(*(_QWORD *)v11 + 88))(v11);
  v31 = v11[2];
  v32 = v11[3].i32[0];
  (*(void (**)(float32x2_t *))(*(_QWORD *)v11 + 88))(v11);
  v21 = v11[3].f32[1];
  v22 = v11[4];
  (*(void (**)(float32x2_t *, float))(*(_QWORD *)v11 + 40))(v11, v12);
  (*(void (**)(float32x2_t *))(*(_QWORD *)v11 + 88))(v11);
  if (!v11[1].i8[1])
    goto LABEL_39;
  (*(void (**)(float32x2_t *))(*(_QWORD *)v11 + 88))(v11);
  (*(void (**)(float32x2_t *))(*(_QWORD *)v11 + 88))(v11);
  v23 = vmul_f32(v11[4], v22);
  if ((float)((float)(v23.f32[0] + (float)(v11[3].f32[1] * v21)) + v23.f32[1]) < 0.9)
  {
    v24 = 18;
    goto LABEL_40;
  }
  if (*(_QWORD *)&v31 == *(_QWORD *)&v11[2] && v32 == (unint64_t)v11[3].u32[0])
  {
LABEL_39:
    v24 = 9;
    goto LABEL_40;
  }
  v26 = vsub_f32(v11[2], v31);
  v9[3] = vmul_n_f32(v26, 1.0 / sqrtf(vaddv_f32(vmul_f32(v26, v26))));
  v27 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + v8) + 144))(*(_QWORD *)(a1 + v8));
  if (((v27 != 1) ^ (*(unsigned int (**)(_QWORD))(**(_QWORD **)(a1 + v8) + 160))(*(_QWORD *)(a1 + v8))) == (v11[1].i8[3] != 0))
    v28 = vneg_f32(v9[3]);
  else
    v28 = v9[3];
  v9[2] = v28;
  v30 = v11[2].f32[1] - a5;
  v9[5].f32[0] = v11[2].f32[0] - a4;
  v9[5].f32[1] = v30;
  v24 = 37;
LABEL_40:
  (*(void (**)(float32x2_t *))(*(_QWORD *)v11 + 8))(v11);
  return v24;
}

void sub_19F10E1E0(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t md::LineTextWithAuxLabelPart::layoutForDisplay(uint64_t a1, md::LabelManager *a2, md::LabelAnimator *a3, float32x2_t *a4, float32x2_t *a5, double a6, double a7, double a8, float64x2_t a9)
{
  uint64_t v14;
  float v15;
  float v16;
  float v17;
  float v18;
  int v19;
  unsigned __int8 *v20;
  int v21;
  __n128 v22;
  int v23;
  char v24;
  float v25;
  float v26;
  float v27;
  float32x2_t v28;
  _QWORD **v29;
  float32x2_t v30;
  float v31;
  uint64_t result;
  float32x2_t *v33;
  _QWORD *v34;
  float *v35;
  float32x2_t v36;
  __int32 v37;
  float32x2_t v38;
  float32x2_t v39;
  float32x2_t v40;
  float32x2_t v41;
  uint64_t v42;
  float32x2_t v43;
  __int128 v44;
  float32x2_t v45;
  float32x2_t v46;
  double v47;

  if (!*(_BYTE *)(a1 + 691))
  {
    v28 = (float32x2_t)vdup_n_s32(0x7F7FFFFFu);
    v29 = *(_QWORD ***)(a1 + 576);
    v30 = (float32x2_t)0x80000000800000;
    goto LABEL_26;
  }
  md::TextLabelPart::prepareQuadsForDisplay(**(md::TextLabelPart ***)(a1 + 576), a2, a3, a6, a7, a8, a9);
  v14 = **(_QWORD **)(a1 + 576);
  v15 = (*(float (**)(uint64_t, uint64_t))(*(_QWORD *)v14 + 336))(v14, 1);
  v16 = (*(float (**)(_QWORD, uint64_t))(**(_QWORD **)(*(_QWORD *)(a1 + 576) + 8) + 336))(*(_QWORD *)(*(_QWORD *)(a1 + 576) + 8), 1);
  v17 = *(float *)(a1 + 664) + v15;
  v18 = v17 + v16;
  v19 = *(unsigned __int8 *)(a1 + 689);
  v20 = *(unsigned __int8 **)(a1 + 672);
  v21 = (*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)v20 + 80))(v20);
  v23 = v20[45];
  if (v20[45])
    v24 = 1;
  else
    v24 = 2;
  if (v23 == 2)
    v24 = 0;
  if (v21)
    LOBYTE(v23) = v24;
  v25 = 0.0;
  if ((_BYTE)v23)
  {
    v22.n128_f32[0] = -v18;
    if (v19)
      v22.n128_f32[0] = 0.0;
    v26 = 0.5;
    if (!v19)
      v26 = -0.5;
    v27 = v26 * v18;
    if (v23 == 1)
      v25 = v27;
    if (v23 == 2)
      v18 = v22.n128_f32[0];
    else
      v18 = v25;
  }
  else if (!v19)
  {
    v18 = 0.0;
  }
  (*(void (**)(uint64_t, uint64_t, float, __n128))(*(_QWORD *)v14 + 384))(v14, 1, v18, v22);
  v31 = -v17;
  if (!v19)
    v31 = v17;
  (*(void (**)(_QWORD, uint64_t, float))(**(_QWORD **)(*(_QWORD *)(a1 + 576) + 8) + 384))(*(_QWORD *)(*(_QWORD *)(a1 + 576) + 8), 1, v18 + v31);
  result = (*(uint64_t (**)(_QWORD, md::LabelManager *, md::LabelAnimator *, float32x2_t *, float32x2_t *))(***(_QWORD ***)(a1 + 576) + 120))(**(_QWORD **)(a1 + 576), a2, a3, a4, a5);
  *(_BYTE *)(a1 + 688) = result;
  if ((_DWORD)result == 37)
  {
    v29 = *(_QWORD ***)(a1 + 576);
    v33 = (float32x2_t *)(*v29)[3];
    v28 = vminnm_f32(v33[39], (float32x2_t)vdup_n_s32(0x7F7FFFFFu));
    v30 = vmaxnm_f32(v33[40], (float32x2_t)0x80000000800000);
LABEL_26:
    result = (*(uint64_t (**)(_QWORD *, md::LabelManager *, md::LabelAnimator *, float32x2_t *, float32x2_t *))(*v29[1] + 120))(v29[1], a2, a3, a4, a5);
    if ((_DWORD)result == 37)
    {
      v34 = *(_QWORD **)(*(_QWORD *)(a1 + 576) + 8);
      v35 = (float *)v34[3];
      (*(void (**)(_QWORD *, uint64_t))(*v34 + 272))(v34, 1);
      v38.f32[0] = v35[80];
      v39.f32[0] = v35[78];
      v40 = (float32x2_t)vdup_n_s32(0x7F7FFFFFu);
      v41 = (float32x2_t)0x80000000800000;
      if (v38.f32[0] >= v39.f32[0] && v35[81] >= v35[79])
      {
        v36.i32[1] = v37;
        v39.f32[1] = v35[79];
        v40 = vadd_f32(v36, v39);
        v38.f32[1] = v35[81];
        v41 = vadd_f32(v36, v38);
      }
      md::CollisionObject::resetWithRects((void **)(a1 + 312), 1u);
      v42 = *(unsigned int *)(a1 + 488);
      v43 = vminnm_f32(v40, v28);
      *(float32x2_t *)&v44 = v43;
      *((float32x2_t *)&v44 + 1) = vmaxnm_f32(v30, v41);
      *(_OWORD *)(*(_QWORD *)(a1 + 472) + 16 * v42) = v44;
      *(_DWORD *)(a1 + 488) = v42 + 1;
      *(_QWORD *)&v44 = *(_QWORD *)(a1 + 312);
      v45 = vmaxnm_f32(*(float32x2_t *)(a1 + 320), *(float32x2_t *)((char *)&v44 + 8));
      *(float32x2_t *)(a1 + 312) = vminnm_f32(v43, *(float32x2_t *)&v44);
      *(float32x2_t *)(a1 + 320) = v45;
      v46 = *a5;
      v47 = COERCE_DOUBLE(vadd_f32(*a5, *a4));
      *(double *)(a1 + 520) = v47;
      *(double *)(a1 + 344) = v47;
      md::CollisionObject::setupShapeData(a1 + 312, v47, *(double *)&v46, *(double *)&v44);
      return 37;
    }
  }
  return result;
}

uint64_t md::LineTextWithAuxLabelPart::prepareForDisplay(md::LineTextWithAuxLabelPart *this, LabelManager *a2)
{
  int v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t (*v8)(void);

  v4 = *((unsigned __int8 *)this + 659);
  *((_BYTE *)this + 691) = v4;
  if (v4)
    (*(void (**)(_QWORD, LabelManager *))(***((_QWORD ***)this + 72) + 104))(**((_QWORD **)this + 72), a2);
  (*(void (**)(_QWORD, LabelManager *))(**(_QWORD **)(*((_QWORD *)this + 72) + 8) + 104))(*(_QWORD *)(*((_QWORD *)this + 72) + 8), a2);
  (*(void (**)(_QWORD, char *))(**((_QWORD **)this + 80) + 24))(*((_QWORD *)this + 80), (char *)this + 672);
  (*(void (**)(_QWORD, uint64_t, BOOL))(**(_QWORD **)(*((_QWORD *)this + 72) + 8) + 400))(*(_QWORD *)(*((_QWORD *)this + 72) + 8), 1, v4 != 0);
  v5 = *((_QWORD *)this + 72);
  if (v4)
  {
    v6 = *(_BYTE **)v5;
    v7 = *((unsigned __int8 *)this + 657);
    *((_BYTE *)this + 689) = v7;
    (*(void (**)(_BYTE *, uint64_t, uint64_t))(*(_QWORD *)v6 + 392))(v6, 1, v7);
    v6[1333] = *((_BYTE *)this + 712);
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(*((_QWORD *)this + 72) + 8) + 360))(*(_QWORD *)(*((_QWORD *)this + 72) + 8), 1, 1);
    v8 = *(uint64_t (**)(void))(**(_QWORD **)(*((_QWORD *)this + 72) + 8) + 392);
  }
  else
  {
    v8 = *(uint64_t (**)(void))(**(_QWORD **)(v5 + 8) + 360);
  }
  return v8();
}

uint64_t md::LineTextWithAuxLabelPart::layoutForStaging(uint64_t a1, uint64_t a2, float32x2_t *a3, float32x2_t *a4)
{
  uint64_t result;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  int v13;
  BOOL v15;
  char v16;
  double v17;
  _BYTE *v18;
  float v19;
  float v20;
  float v21;
  unsigned __int8 *v22;
  int v23;
  __n128 v24;
  __n128 v25;
  int v26;
  char v27;
  int8x16_t v28;
  int8x16_t v29;
  int v30;
  float32x2_t v31;
  float v32;
  int v33;
  float v34;
  float32x2_t v35;
  char v36;
  float v37;
  float32x2_t v44;
  float v45;
  char v46;
  char v47;
  int v48;
  uint64_t v49;
  float v50;
  float v51;
  float v52;
  float v53;
  int v54;
  unsigned __int8 *v55;
  int v56;
  __n128 v57;
  int v58;
  char v59;
  float v60;
  float v61;
  float v62;
  float v63;
  int v64;
  float32x2_t *v65;
  float32x2_t v66;
  float32x2_t v67;
  _QWORD *v68;
  float *v69;
  float32x2_t v70;
  __int32 v71;
  float32x2_t v72;
  float32x2_t v73;
  float32x2_t v74;
  float32x2_t v75;
  uint64_t v76;
  uint64_t v77;
  float32x2_t v78;
  __int128 v79;
  float32x2_t v80;
  float32x2_t v81;
  double v82;
  float32x2_t v83[3];
  _BYTE *v84;

  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 344))(a1);
  if ((_DWORD)result != 37)
    return result;
  v9 = **(_QWORD ***)(a1 + 576);
  v10 = *(_QWORD *)(a2 + 432);
  v11 = (int)*(float *)(*(_QWORD *)(a1 + 32) + 16);
  if ((*(unsigned int (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 640) + 168))(*(_QWORD *)(a1 + 640), v11))
  {
    if ((*(unsigned int (**)(_QWORD, uint64_t, double))(**(_QWORD **)(a1 + 640) + 176))(*(_QWORD *)(a1 + 640), v11, 1.0))
    {
      v12 = *(unsigned __int8 *)(a1 + 658);
      if (v12 != (*(unsigned int (**)(_QWORD))(**(_QWORD **)(a1 + 640) + 80))(*(_QWORD *)(a1 + 640)))
      {
        *(_BYTE *)(a1 + 658) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 640) + 80))(*(_QWORD *)(a1 + 640));
        v13 = *(unsigned __int8 *)(a1 + 714);
        if (*(_BYTE *)(a1 + 714))
        {
          _ZF = v13 == 2;
          v15 = v13 != 2;
          if (_ZF)
            v16 = 1;
          else
            v16 = 2;
          *(_BYTE *)(a1 + 714) = v16;
          *(_BYTE *)(a1 + 657) = v15;
        }
      }
    }
  }
  v17 = md::LabelPart::createHiker(&v84, (uint64_t)v9, 0, v9[134], v10);
  v18 = v84;
  (*(void (**)(_BYTE *, double))(*(_QWORD *)v84 + 88))(v84, v17);
  if (!v18[9])
    goto LABEL_21;
  v19 = (*(float (**)(_QWORD, _QWORD))(***(_QWORD ***)(a1 + 576) + 336))(**(_QWORD **)(a1 + 576), 0);
  v20 = *(float *)(a1 + 632);
  v21 = (*(float (**)(_QWORD, _QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 576) + 8) + 336))(*(_QWORD *)(*(_QWORD *)(a1 + 576) + 8), 0);
  memset(v83, 0, 12);
  v22 = *(unsigned __int8 **)(a1 + 640);
  v23 = (*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)v22 + 80))(v22);
  v26 = v22[45];
  if (v22[45])
    v27 = 1;
  else
    v27 = 2;
  if (v26 == 2)
    v27 = 0;
  if (v23)
    LOBYTE(v26) = v27;
  if ((md::CurvedTextLabelPart::findLineLayoutDirection((uint64_t)v18, 1, v26, (uint64_t)v83, (float)(v20 + v19) + v21, v24, v25) & 1) == 0)
  {
LABEL_21:
    (*(void (**)(_BYTE *))(*(_QWORD *)v18 + 8))(v18);
    return 9;
  }
  if (*((_BYTE *)v9 + 565))
  {
    v29.i64[0] = *(_QWORD *)(v10 + 432);
    v29.i32[2] = *(_DWORD *)(v10 + 440);
    v28.i64[0] = *(_QWORD *)(v10 + 444);
    v28.i32[2] = *(_DWORD *)(v10 + 452);
  }
  else
  {
    v28 = (int8x16_t)xmmword_19FFB3980;
    v29 = (int8x16_t)xmmword_19FFB3590;
  }
  v30 = *((unsigned __int8 *)v9 + 1455);
  if (!*(_BYTE *)(a1 + 714))
  {
    v37 = v83[0].f32[0];
    _S5 = v29.i32[2];
    _D1 = *(float32x2_t *)((char *)v83 + 4);
    __asm { FMLA            S2, S5, V1.S[1] }
    if (*((_BYTE *)v9 + 1455) && fabsf(_S2) < 0.70711)
    {
      *(_BYTE *)(a1 + 712) = 2;
      v44 = vmul_f32((float32x2_t)*(_OWORD *)&vextq_s8(v28, v28, 4uLL), _D1);
      _S2 = -(float)(vmlas_n_f32(v44.f32[0], v37, *(float *)v28.i32) + v44.f32[1]);
    }
    else
    {
      *(_BYTE *)(a1 + 712) = 1;
    }
    if (_S2 >= 0.0)
      v47 = 1;
    else
      v47 = 2;
    *(_BYTE *)(a1 + 714) = v47;
    *(_BYTE *)(a1 + 657) = _S2 < 0.0;
    goto LABEL_48;
  }
  v31 = vmul_f32(*(float32x2_t *)((char *)v83 + 4), (float32x2_t)*(_OWORD *)&vextq_s8(v29, v29, 4uLL));
  v32 = vmlas_n_f32(v31.f32[0], v83[0].f32[0], *(float *)v29.i32) + v31.f32[1];
  v33 = *(unsigned __int8 *)(a1 + 712);
  v34 = v32;
  if (v33 == 2)
  {
    v35 = vmul_f32((float32x2_t)*(_OWORD *)&vextq_s8(v28, v28, 4uLL), *(float32x2_t *)((char *)v83 + 4));
    v34 = -(float)(vmlas_n_f32(v35.f32[0], v83[0].f32[0], *(float *)v28.i32) + v35.f32[1]);
  }
  if (*(_BYTE *)(a1 + 714) == 1)
  {
    if (v34 >= -0.01)
      goto LABEL_36;
    v36 = 2;
  }
  else
  {
    if (v34 <= 0.01)
      goto LABEL_36;
    v36 = 1;
  }
  *(_BYTE *)(a1 + 715) = v36;
LABEL_36:
  if (v30)
  {
    v45 = fabsf(v32);
    if (v33 == 1)
    {
      if (v45 < 0.69711)
      {
        v46 = 2;
LABEL_47:
        *(_BYTE *)(a1 + 713) = v46;
      }
    }
    else if (v45 > 0.71711)
    {
      v46 = 1;
      goto LABEL_47;
    }
  }
LABEL_48:
  (*(void (**)(_BYTE *))(*(_QWORD *)v18 + 8))(v18);
  v48 = *(unsigned __int8 *)(a1 + 657);
  v49 = **(_QWORD **)(a1 + 576);
  v50 = (*(float (**)(uint64_t, _QWORD))(*(_QWORD *)v49 + 336))(v49, 0);
  v51 = (*(float (**)(_QWORD, _QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 576) + 8) + 336))(*(_QWORD *)(*(_QWORD *)(a1 + 576) + 8), 0);
  v52 = *(float *)(a1 + 632) + v50;
  v53 = v52 + v51;
  v54 = *(unsigned __int8 *)(a1 + 657);
  v55 = *(unsigned __int8 **)(a1 + 640);
  v56 = (*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)v55 + 80))(v55);
  v58 = v55[45];
  if (v55[45])
    v59 = 1;
  else
    v59 = 2;
  if (v58 == 2)
    v59 = 0;
  if (v56)
    LOBYTE(v58) = v59;
  v60 = 0.0;
  if ((_BYTE)v58)
  {
    v57.n128_f32[0] = -v53;
    if (v54)
      v57.n128_f32[0] = 0.0;
    v61 = 0.5;
    if (!v54)
      v61 = -0.5;
    v62 = v61 * v53;
    if (v58 == 1)
      v60 = v62;
    if (v58 == 2)
      v53 = v57.n128_f32[0];
    else
      v53 = v60;
  }
  else if (!v54)
  {
    v53 = 0.0;
  }
  (*(void (**)(uint64_t, _QWORD, float, __n128))(*(_QWORD *)v49 + 384))(v49, 0, v53, v57);
  v63 = -v52;
  if (!v54)
    v63 = v52;
  (*(void (**)(_QWORD, _QWORD, float))(**(_QWORD **)(*(_QWORD *)(a1 + 576) + 8) + 384))(*(_QWORD *)(*(_QWORD *)(a1 + 576) + 8), 0, v53 + v63);
  (*(void (**)(_QWORD *, _QWORD, BOOL))(*v9 + 392))(v9, 0, v48 != 0);
  *((_BYTE *)v9 + 1141) = *(_BYTE *)(a1 + 712);
  v64 = (*(uint64_t (**)(_QWORD *, uint64_t, float32x2_t *, float32x2_t *))(*v9 + 80))(v9, a2, a3, a4);
  *(_BYTE *)(a1 + 656) = v64;
  *(_BYTE *)(a1 + 659) = v64 == 37;
  if (v64 == 37)
  {
    v65 = (float32x2_t *)v9[3];
    v66 = vminnm_f32(v65[9], (float32x2_t)vdup_n_s32(0x7F7FFFFFu));
    v67 = vmaxnm_f32(v65[10], (float32x2_t)0x80000000800000);
    (*(void (**)(_QWORD, _QWORD, uint64_t))(**(_QWORD **)(*(_QWORD *)(a1 + 576) + 8) + 400))(*(_QWORD *)(*(_QWORD *)(a1 + 576) + 8), 0, 1);
    (*(void (**)(_QWORD, _QWORD, BOOL))(**(_QWORD **)(*(_QWORD *)(a1 + 576) + 8) + 392))(*(_QWORD *)(*(_QWORD *)(a1 + 576) + 8), 0, v48 != 0);
    (*(void (**)(_QWORD, _QWORD, uint64_t))(**(_QWORD **)(*(_QWORD *)(a1 + 576) + 8) + 360))(*(_QWORD *)(*(_QWORD *)(a1 + 576) + 8), 0, 1);
  }
  else
  {
    (*(void (**)(_QWORD, _QWORD, _QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 576) + 8) + 400))(*(_QWORD *)(*(_QWORD *)(a1 + 576) + 8), 0, 0);
    (*(void (**)(_QWORD, _QWORD, _QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 576) + 8) + 360))(*(_QWORD *)(*(_QWORD *)(a1 + 576) + 8), 0, 0);
    v66 = (float32x2_t)vdup_n_s32(0x7F7FFFFFu);
    v67 = (float32x2_t)0x80000000800000;
  }
  result = (*(uint64_t (**)(_QWORD, uint64_t, float32x2_t *, float32x2_t *))(**(_QWORD **)(*(_QWORD *)(a1 + 576)
                                                                                                  + 8)
                                                                                    + 80))(*(_QWORD *)(*(_QWORD *)(a1 + 576) + 8), a2, a3, a4);
  if ((_DWORD)result == 37)
  {
    v68 = *(_QWORD **)(*(_QWORD *)(a1 + 576) + 8);
    v69 = (float *)v68[3];
    (*(void (**)(_QWORD *, _QWORD))(*v68 + 272))(v68, 0);
    v72.f32[0] = v69[20];
    v73.f32[0] = v69[18];
    v74 = (float32x2_t)vdup_n_s32(0x7F7FFFFFu);
    v75 = (float32x2_t)0x80000000800000;
    if (v72.f32[0] >= v73.f32[0] && v69[21] >= v69[19])
    {
      v70.i32[1] = v71;
      v73.f32[1] = v69[19];
      v74 = vadd_f32(v70, v73);
      v72.f32[1] = v69[21];
      v75 = vadd_f32(v70, v72);
    }
    md::CollisionObject::resetWithRects((void **)(a1 + 72), 1u);
    v76 = *(_QWORD *)(a1 + 232);
    v77 = *(unsigned int *)(a1 + 248);
    *(_DWORD *)(a1 + 248) = v77 + 1;
    v78 = vminnm_f32(v74, v66);
    *(float32x2_t *)&v79 = v78;
    *((float32x2_t *)&v79 + 1) = vmaxnm_f32(v67, v75);
    *(_OWORD *)(v76 + 16 * v77) = v79;
    *(_QWORD *)&v79 = *(_QWORD *)(a1 + 72);
    v80 = vmaxnm_f32(*(float32x2_t *)(a1 + 80), *(float32x2_t *)((char *)&v79 + 8));
    *(float32x2_t *)(a1 + 72) = vminnm_f32(v78, *(float32x2_t *)&v79);
    *(float32x2_t *)(a1 + 80) = v80;
    v81 = *a4;
    v82 = COERCE_DOUBLE(vadd_f32(*a4, *a3));
    *(double *)(a1 + 280) = v82;
    *(double *)(a1 + 104) = v82;
    md::CollisionObject::setupShapeData(a1 + 72, v82, *(double *)&v81, *(double *)&v79);
    return 37;
  }
  return result;
}

void sub_19F10EC98(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t md::CompositeLabelPart::checkResourcesReady(md::CompositeLabelPart *this, LabelManager *a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t result;

  v2 = (_QWORD *)*((_QWORD *)this + 72);
  v3 = (_QWORD *)*((_QWORD *)this + 73);
  if (v2 == v3)
    return 37;
  while (1)
  {
    result = (*(uint64_t (**)(_QWORD, LabelManager *))(*(_QWORD *)*v2 + 344))(*v2, a2);
    if ((_DWORD)result != 37)
      break;
    if (++v2 == v3)
      return 37;
  }
  return result;
}

uint64_t md::MultipleShieldLabelPart::setLayoutInReverse(uint64_t result, int a2, char a3)
{
  uint64_t v3;

  v3 = result + 632;
  if (a2)
    v3 = result + 664;
  *(_BYTE *)(v3 + 29) = a3;
  return result;
}

uint64_t md::CurvedTextLabelPart::setLayoutInReverse(uint64_t result, int a2, char a3)
{
  uint64_t v3;

  v3 = result + 960;
  if (a2)
    v3 = result + 1152;
  *(_BYTE *)(v3 + 183) = a3;
  return result;
}

uint64_t md::MultipleShieldLabelPart::setUseExternalLayoutOptions(uint64_t result, int a2, char a3)
{
  uint64_t v3;

  v3 = result + 632;
  if (a2)
    v3 = result + 664;
  *(_BYTE *)(v3 + 30) = a3;
  return result;
}

uint64_t md::MultipleShieldLabelPart::setAlignment(uint64_t result, int a2, char a3)
{
  uint64_t v3;

  v3 = result + 632;
  if (a2)
    v3 = result + 664;
  *(_BYTE *)(v3 + 28) = a3;
  return result;
}

float md::MultipleShieldLabelPart::hikerWidth(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  unsigned int v6;
  float v7;
  uint64_t v8;
  uint64_t v9;

  v2 = *(_QWORD **)(a1 + 576);
  v3 = *(_QWORD **)(a1 + 584);
  if (v2 == v3)
    return 0.0;
  v6 = 0;
  v7 = 0.0;
  do
  {
    v8 = *v2;
    if ((*(unsigned int (**)(_QWORD, uint64_t))(*(_QWORD *)*v2 + 736))(*v2, a2))
    {
      ++v6;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v8 + 592))(v8, a2);
      v7 = (*(float (**)(uint64_t, uint64_t))(*(_QWORD *)v8 + 336))(v8, a2) + v7;
    }
    ++v2;
  }
  while (v2 != v3);
  if (v6 > 1)
  {
    v9 = a1 + 632;
    if ((_DWORD)a2)
      v9 = a1 + 664;
    return v7 + (float)(*(float *)(v9 + 16) * (float)(v6 - 1));
  }
  return v7;
}

float md::ShieldIconLabelPart::hikerWidth(uint64_t a1, int a2)
{
  float *v2;
  uint64_t v3;
  float v4;
  float v5;
  float v6;
  float v8;
  float v9;
  float v10;

  v2 = (float *)(a1 + 72);
  v3 = 312;
  if (a2)
    v2 = (float *)(a1 + 312);
  else
    v3 = 72;
  v4 = v2[2];
  v5 = *(float *)(a1 + v3);
  v6 = 0.0;
  if (v4 < v5)
    return fmaxf(0.0, 0.0);
  v8 = v2[3];
  v9 = v2[1];
  v10 = 0.0;
  if (v8 >= v9)
  {
    v6 = v4 - v5;
    v10 = v8 - v9;
  }
  return fmaxf(v6, v10);
}

uint64_t md::MultipleShieldLabelPart::setLayoutStartOffset(uint64_t result, int a2, float a3)
{
  uint64_t v3;

  v3 = result + 632;
  if (a2)
    v3 = result + 664;
  *(float *)(v3 + 20) = a3;
  return result;
}

uint64_t md::MultipleShieldLabelPart::placeShieldsOnPath(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, float32x2_t *a6, int8x16_t *a7)
{
  uint64_t v12;
  uint64_t v13;
  double v14;
  _BYTE *v15;
  uint64_t v16;
  __n128 v18;
  uint64_t v19;
  uint64_t v20;
  __int128 *v21;
  __int128 *v22;
  double v23;
  double v24;
  double v25;
  double v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  float32x4_t v31;
  float32x4_t v32;
  float *v33;
  float v34;
  void (*v35)(_BYTE *);
  float32x2_t v36;
  float32_t v37;
  uint64_t v38;
  float *v39;
  uint64_t v40;
  float v41;
  float32x4_t v42;
  int8x16_t v43;
  float v44;
  float32x4_t v45;
  float64x2_t v46;
  float64x2_t v47;
  float64x2_t v48;
  float64x2_t v49;
  float64x2_t v52;
  double v53;
  float64x2_t v54;
  double v55;
  float64x2_t v56;
  double v57;
  float64x2_t v58;
  double v59;
  float32x2_t v60;
  __int128 v61;
  __int128 v62;
  uint64_t v63;
  __int128 v64;
  __int128 v65;
  uint64_t v66;
  uint64_t v67;
  __int128 v68;
  uint64_t v69;
  uint64_t v70;
  _BYTE *v71;

  v12 = 664;
  if ((_DWORD)a2)
  {
    v13 = a1 + 664;
  }
  else
  {
    v12 = 632;
    v13 = a1 + 632;
  }
  v14 = md::LabelPart::createHiker(&v71, a1, a2, *(_QWORD *)(a1 + v12), a3);
  v15 = v71;
  (*(void (**)(_BYTE *, double))(*(_QWORD *)v71 + 88))(v71, v14);
  if (!v15[9])
    goto LABEL_7;
  if (*(_BYTE *)(v13 + 30))
  {
    v15[11] = *(_BYTE *)(v13 + 29);
    v15[8] = 1;
    (*(void (**)(_BYTE *, float))(*(_QWORD *)v15 + 56))(v15, *(float *)(v13 + 20));
    (*(void (**)(_BYTE *))(*(_QWORD *)v15 + 88))(v15);
    if (v15[10] || ((*(void (**)(_BYTE *))(*(_QWORD *)v15 + 88))(v15), !v15[9]))
    {
LABEL_7:
      v16 = 9;
LABEL_8:
      (*(void (**)(_BYTE *))(*(_QWORD *)v15 + 8))(v15);
      return v16;
    }
  }
  else
  {
    (*(void (**)(_BYTE *))(*(_QWORD *)v15 + 88))(v15);
    v15[11] = *((float *)v15 + 7) <= 0.0;
    v15[8] = 1;
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 336))(a1, a2);
    if (*(_BYTE *)(v13 + 28) == 2)
    {
      v18.n128_f32[0] = -v18.n128_f32[0];
    }
    else
    {
      if (*(_BYTE *)(v13 + 28))
        goto LABEL_17;
      v18.n128_f32[0] = v18.n128_f32[0] * -0.5;
    }
    (*(void (**)(_BYTE *, __n128))(*(_QWORD *)v15 + 32))(v15, v18);
  }
LABEL_17:
  if (*(_BYTE *)(a1 + 565))
  {
    v19 = *(_QWORD *)(a3 + 328);
    v20 = *(_QWORD *)(a1 + 16);
    v21 = (__int128 *)(v20 + 592);
    v22 = (__int128 *)(v20 + 408);
    if (!(_DWORD)a2)
      v22 = v21;
    v60 = *(float32x2_t *)(a3 + 328);
    v63 = v19;
    v61 = 0u;
    v66 = v19;
    v62 = 0u;
    v64 = 0u;
    v65 = 0u;
    v67 = 0;
    v68 = *v22;
    v69 = *((_QWORD *)v22 + 2);
    v70 = 0x3FF0000000000000;
    gm::operator*<double,4,4,4>(v52.f64, (double *)(a3 + 864), (double *)&v60);
    v23 = v53;
    v24 = v55;
    v25 = v57;
    v48 = v52;
    v49 = v54;
    v46 = v56;
    v47 = v58;
    v26 = v59;
  }
  else
  {
    v49 = (float64x2_t)xmmword_19FFB33A0;
    v47 = 0u;
    v48 = (float64x2_t)xmmword_19FFB32C0;
    v25 = 0.0;
    v26 = 1.0;
    v24 = 0.0;
    v23 = 0.0;
    v46 = 0u;
  }
  v27 = *(_QWORD *)(a1 + 584) - *(_QWORD *)(a1 + 576);
  if (!v27)
  {
    v16 = 37;
    goto LABEL_8;
  }
  v28 = 0;
  v29 = v27 >> 3;
  if (v29 <= 1)
    v30 = 1;
  else
    v30 = v29;
  do
  {
    v33 = *(float **)(*(_QWORD *)(a1 + 576) + 8 * v28);
    if (((*(uint64_t (**)(float *, uint64_t))(*(_QWORD *)v33 + 736))(v33, a2) & 1) != 0)
    {
      v34 = (*(float (**)(float *, uint64_t))(*(_QWORD *)v33 + 336))(v33, a2) * 0.5;
      (*(void (**)(_BYTE *, float))(*(_QWORD *)v15 + 40))(v15, v34);
      (*(void (**)(_BYTE *))(*(_QWORD *)v15 + 88))(v15);
      if (!v15[9])
        goto LABEL_7;
      (*(void (**)(_BYTE *))(*(_QWORD *)v15 + 88))(v15);
      if (v15[10])
        goto LABEL_7;
      v35 = *(void (**)(_BYTE *))(*(_QWORD *)v15 + 88);
      if (*(_BYTE *)(a1 + 565))
      {
        v35(v15);
        v36 = vcvt_f32_f64(vmulq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(v47, v48, *((float *)v15 + 4)), v49, *((float *)v15 + 5)), v46, *((float *)v15 + 6)), 1.0 / (v26 + v23 * *((float *)v15 + 4) + v24 * *((float *)v15 + 5) + v25 * *((float *)v15 + 6))));
      }
      else
      {
        v35(v15);
        v36 = *(float32x2_t *)(v15 + 16);
        (*(void (**)(_BYTE *))(*(_QWORD *)v15 + 88))(v15);
        v37 = -*((float *)v15 + 7);
        v60.i32[0] = *((_DWORD *)v15 + 8);
        v60.f32[1] = v37;
        (*(void (**)(float *, uint64_t, float32x2_t *))(*(_QWORD *)v33 + 168))(v33, a2, &v60);
      }
      v60 = vsub_f32(v36, *a6);
      v38 = *(_QWORD *)v33;
      if ((_DWORD)a2)
      {
        (*(void (**)(float *, uint64_t, uint64_t, float32x2_t *, float32x2_t *))(v38 + 120))(v33, a4, a5, a6, &v60);
      }
      else
      {
        v16 = (*(uint64_t (**)(float *, uint64_t, float32x2_t *, float32x2_t *))(v38 + 80))(v33, a4, a6, &v60);
        if ((_DWORD)v16 != 37)
          goto LABEL_8;
      }
      v39 = v33 + 18;
      v40 = 78;
      if ((_DWORD)a2)
        v39 = v33 + 78;
      else
        v40 = 18;
      v41 = v39[2];
      v42.f32[0] = v33[v40];
      v43 = (int8x16_t)xmmword_19FFB2E30;
      if (v41 >= v42.f32[0])
      {
        v44 = v39[3];
        v43 = (int8x16_t)xmmword_19FFB2E30;
        if (v44 >= v39[1])
        {
          *(float32x2_t *)v45.f32 = vsub_f32(v36, *a6);
          v45.i64[1] = v45.i64[0];
          v42.f32[1] = v39[1];
          v42.i64[1] = __PAIR64__(LODWORD(v44), LODWORD(v41));
          v43 = (int8x16_t)vaddq_f32(v42, v45);
        }
      }
      v31.i64[0] = v43.i64[0];
      v31.i64[1] = a7->i64[1];
      v32.i64[0] = a7->i64[0];
      v32.i64[1] = v43.i64[1];
      *a7 = vbslq_s8((int8x16_t)vcgtq_f32(v32, v31), v43, *a7);
      (*(void (**)(_BYTE *, float))(*(_QWORD *)v15 + 40))(v15, *(float *)(v13 + 16) + v34);
    }
    ++v28;
  }
  while (v30 != v28);
  v16 = 37;
  if (v15)
    goto LABEL_8;
  return v16;
}

void sub_19F10F3B4(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t md::CurvedTextLabelPart::placeGlyphsOnRoadPath(uint64_t a1, int a2, unsigned __int8 *a3, uint64_t a4, uint64_t a5, uint64_t a6, float a7, float a8)
{
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  float v23;
  BOOL v24;
  int v25;
  _BYTE *v26;
  float v27;
  float32x2_t *v28;
  unint64_t v29;
  float v30;
  float32x2_t *v31;
  unint64_t v32;
  float32x2_t v35;
  uint64_t v36;
  float *v37;
  int v38;
  int v39;
  int v40;
  int v41;
  float v42;
  float v43;
  float v44;
  float v45;
  unint64_t v46;
  char *v47;
  BOOL v48;
  float32x2_t v50;
  float v51;
  float v52;
  float v53;
  unsigned __int8 *v54;
  int v55;
  __n128 v56;
  __n128 v57;
  int v58;
  char v59;
  uint64_t v60;
  int v62;
  uint64_t v63;
  int v64;
  char v65;
  _BYTE *v66;
  unint64_t v67;
  uint64_t v68;
  int v69;
  uint64_t v70;
  int v71;

  v67 = __PAIR64__(LODWORD(a8), LODWORD(a7));
  if (a2)
  {
    v14 = *(_QWORD *)(a1 + 592);
    v17 = *(_QWORD *)(v14 + 32);
    v16 = (_QWORD *)(v14 + 32);
    v15 = v17;
    v19 = v16 + 1;
    v18 = v16[1];
    if (v17 != v18)
    {
      v20 = (uint64_t *)(a1 + 592);
      *(_DWORD *)(a6 + 3396) -= 1171354717 * ((unint64_t)(v18 - v15) >> 3);
      goto LABEL_6;
    }
  }
  else
  {
    v21 = *(_QWORD *)(a1 + 576);
    v22 = *(_QWORD *)(v21 + 32);
    v16 = (_QWORD *)(v21 + 32);
    v19 = v16 + 1;
    if (v22 != v16[1])
    {
      v20 = (uint64_t *)(a1 + 576);
LABEL_6:
      md::LabelPart::createHiker(&v66, a1, a2, *(_QWORD *)(a4 + 112), a5);
      v23 = *(float *)(a1 + 1400);
      v24 = v23 != 0.0;
      v25 = *a3;
      if (v25 == 103)
        v24 = 1;
      v26 = v66;
      v66[12] = v24;
      if (v23 != 0.0)
      {
        v27 = -(float)(v23 * *(float *)(a6 + 176));
        goto LABEL_10;
      }
      if (v25 == 103)
      {
        v38 = a3[3];
        if (v38 != 6)
        {
          v27 = 0.0;
          if (v38 != 2)
            goto LABEL_10;
          goto LABEL_51;
        }
      }
      else
      {
        if (v25 != 4)
        {
          if (v25 == 1)
          {
            if (*(_BYTE *)(*(_QWORD *)(a1 + 16) + 1269)
              && !*(_BYTE *)(md::LabelSettingsStyleCache::styleCaps(*(md::LabelSettingsStyleCache **)(*(_QWORD *)(a6 + 336) + 200))
                           + 2))
            {
              v37 = (float *)(a4 + 12);
            }
            else
            {
              v37 = (float *)(a4 + 8);
            }
            v27 = *v37;
            v62 = a3[3];
            if (v62 == 8)
            {
              v40 = *(unsigned __int8 *)(a1 + 1456);
LABEL_86:
              if (!v40)
                v27 = 0.0;
              goto LABEL_10;
            }
            if (v62 == 6)
              v27 = -v27;
          }
          else
          {
            v41 = a3[3];
            v27 = 0.0;
            if (v41 != 8)
            {
              v42 = fminf(fmaxf((float)(*(float *)a4 * 0.16667) + -2.1667, 0.0), 1.0);
              v43 = 14.0;
              if (v25 == 102)
                v43 = 12.0;
              v44 = 2.0;
              if (v25 == 102)
                v44 = 4.0;
              v45 = fmaxf(*(float *)(a4 + 24) + 1.0, *(float *)(a6 + 176) * (float)(v44 + (float)(v42 * v43)))
                  + (float)(*(float *)(a4 + 20) * 0.5);
              v27 = -v45;
              if (v41 != 6)
                v27 = v45;
            }
          }
LABEL_10:
          *(float *)(a4 + 4) = v27;
          (*(void (**)(_BYTE *))(*(_QWORD *)v26 + 64))(v26);
          (*(void (**)(_BYTE *))(*(_QWORD *)v26 + 88))(v26);
          if (v26[9])
          {
            v65 = 0;
            md::CurvedTextLabelPart::placeQuads(a1, a2, *v20, a5, a4, (uint64_t *)&v66, (float32x2_t *)&v67, &v65);
            if (!v65)
            {
              v36 = 13;
LABEL_81:
              (*(void (**)(_BYTE *))(*(_QWORD *)v26 + 8))(v26);
              return v36;
            }
            if (*(_BYTE *)(*(_QWORD *)(a1 + 16) + 1267))
            {
              v28 = *(float32x2_t **)(*v20 + 32);
              v29 = 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*(_QWORD *)(*v20 + 40) - (_QWORD)v28) >> 3);
              v30 = 1.0;
              if (v29 >= 2)
              {
                if (*(_BYTE *)(a1 + 1141) == 2)
                {
                  v31 = v28 + 18;
                  v32 = v29 - 1;
                  do
                  {
                    if (!*(_BYTE *)(*(_QWORD *)&v31[-7] + 59) && !*(_BYTE *)(*(_QWORD *)&v31[-18] + 59))
                    {
                      v70 = 0;
                      v71 = 0;
                      if (*(_QWORD *)((char *)&v31[-12] + 4) || v31[-11].i32[1] != 0)
                      {
                        v68 = 0;
                        if (*(_QWORD *)((char *)&v31[-1] + 4) || v31->i32[1] != 0)
                        {
                          v35 = vmul_f32(*v31, v31[-11]);
                          v30 = fminf(v30, (float)(v35.f32[0] + (float)(v31[-1].f32[1] * v31[-12].f32[1])) + v35.f32[1]);
                        }
                      }
                    }
                    v31 += 11;
                    --v32;
                  }
                  while (v32);
                }
                else
                {
                  v46 = v29 - 1;
                  v47 = (char *)&v28[17] + 4;
                  do
                  {
                    v70 = 0;
                    v71 = 0;
                    if (*((_QWORD *)v47 - 11))
                      v48 = 0;
                    else
                      v48 = *((unsigned int *)v47 - 20) == 0;
                    if (!v48)
                    {
                      v68 = 0;
                      if (*(_QWORD *)v47 || *((_DWORD *)v47 + 2) != 0)
                      {
                        v50 = vmul_f32(*(float32x2_t *)(v47 + 4), *(float32x2_t *)(v47 - 84));
                        v30 = fminf(v30, (float)(v50.f32[0] + (float)(*(float *)v47 * *((float *)v47 - 22))) + v50.f32[1]);
                      }
                    }
                    v47 += 88;
                    --v46;
                  }
                  while (v46);
                }
              }
              v51 = fminf(fmaxf(v30, 0.0), 1.0);
              v52 = 0.6;
              if ((unint64_t)(0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*v19 - *v16) >> 3)) < 4)
                v52 = 0.8;
              if (v51 < v52)
              {
                v36 = 18;
                goto LABEL_81;
              }
            }
            if (a2 | *(unsigned __int8 *)(a4 + 184) || *(_BYTE *)(a1 + 1457))
            {
              v36 = 37;
              goto LABEL_81;
            }
            v53 = (*(float (**)(uint64_t, _QWORD))(*(_QWORD *)a1 + 336))(a1, 0);
            v71 = 0;
            v70 = 0;
            (*(void (**)(_BYTE *))(*(_QWORD *)v26 + 16))(v26);
            v54 = *(unsigned __int8 **)(a1 + 1072);
            v55 = (*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)v54 + 80))(v54);
            v58 = v54[45];
            if (v54[45])
              v59 = 1;
            else
              v59 = 2;
            if (v58 == 2)
              v59 = 0;
            if (v55)
              LOBYTE(v58) = v59;
            if ((md::CurvedTextLabelPart::findLineLayoutDirection((uint64_t)v26, 0, v58, (uint64_t)&v70, v53, v56, v57) & 1) != 0)
            {
              v60 = v70;
              *(_DWORD *)(a1 + 1392) = v71;
              *(_QWORD *)(a1 + 1384) = v60;
              if (*(_BYTE *)(a1 + 565))
              {
                v68 = *(_QWORD *)(a5 + 96);
                v69 = *(_DWORD *)(a5 + 104);
                v63 = *(_QWORD *)(a5 + 84);
                v64 = *(_DWORD *)(a5 + 92);
              }
              else
              {
                v68 = *(_QWORD *)(a5 + 76);
                v69 = 0;
                v63 = *(_QWORD *)(a5 + 68);
                v64 = 0;
              }
              md::CurvedTextLabelPart::updateTextLayoutOptions(*(unsigned __int8 *)(a1 + 1455), (float *)&v68, (float *)&v63, (float *)&v70, *(_BYTE *)(a4 + 181), *(_BYTE *)(a4 + 176), (char *)(a1 + 1452), (char *)(a1 + 1454));
              v36 = 37;
              goto LABEL_81;
            }
          }
          v36 = 9;
          goto LABEL_81;
        }
        v39 = a3[3];
        if (v39 != 6)
        {
          if (v39 == 8)
          {
            v40 = *(unsigned __int8 *)(a1 + 1456);
            v27 = *(float *)(a4 + 8);
            goto LABEL_86;
          }
LABEL_51:
          v27 = *(float *)(a4 + 12);
          goto LABEL_10;
        }
      }
      v27 = -*(float *)(a4 + 12);
      goto LABEL_10;
    }
  }
  return 37;
}

void sub_19F10F9D0(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

void md::PolylinePixelHiker::~PolylinePixelHiker(md::PolylinePixelHiker *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;

  *(_QWORD *)this = &off_1E4295D68;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 69);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *((_QWORD *)this + 41) = &off_1E429D948;
  v5 = (std::__shared_weak_count *)*((_QWORD *)this + 48);
  if (v5)
  {
    v6 = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;

  *(_QWORD *)this = &off_1E4295D68;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 69);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *((_QWORD *)this + 41) = &off_1E429D948;
  v5 = (std::__shared_weak_count *)*((_QWORD *)this + 48);
  if (v5)
  {
    v6 = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
}

double md::LabelPart::createHiker(_QWORD *a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5)
{
  double v9;
  float64x2_t *v10;
  float64x2_t *v11;
  float64x2_t *v12;
  double v13;
  float64x2_t v14;
  uint64_t v15;
  uint64_t v16;
  float v17;
  double result;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  _BYTE v24[48];
  __int128 v25;
  __int128 v26;
  __int128 v27;
  float64x2_t v28;
  __int128 v29;

  *a1 = 0;
  if (*(_BYTE *)(a2 + 565))
  {
    v9 = 1.0 / *(double *)(a5 + 328);
    v10 = *(float64x2_t **)(a2 + 16);
    v11 = (float64x2_t *)((char *)v10 + 616);
    v12 = v10 + 60;
    if (!a3)
      v12 = v11;
    v13 = -(v9 * v12[1].f64[0]);
    v14 = vmulq_n_f64(*v12, -v9);
    *(double *)v24 = 1.0 / *(double *)(a5 + 328);
    *(double *)&v24[40] = v9;
    memset(&v24[8], 0, 32);
    v27 = *(unint64_t *)&v9;
    v25 = 0u;
    v26 = 0u;
    v28 = v14;
    *(double *)&v29 = v13;
    *((_QWORD *)&v29 + 1) = 0x3FF0000000000000;
    (*(void (**)(uint64_t *__return_ptr, uint64_t, BOOL, _BYTE *, _QWORD))(*(_QWORD *)a4 + 40))(&v23, a4, *(_BYTE *)(a5 + 8) == 0, v24, 0);
    v15 = v23;
  }
  else
  {
    (*(void (**)(_BYTE *__return_ptr, uint64_t, BOOL, uint64_t, uint64_t))(*(_QWORD *)a4 + 40))(v24, a4, *(_BYTE *)(a5 + 8) == 0, a5 + 864, 1);
    v15 = *(_QWORD *)v24;
  }
  *a1 = v15;
  v16 = *(_QWORD *)(a2 + 16);
  v17 = *(double *)(v16 + 232);
  result = v17;
  *(double *)(v15 + 56) = result;
  LODWORD(result) = *(_DWORD *)(a5 + 48);
  *(_DWORD *)(v15 + 52) = LODWORD(result);
  v19 = 992;
  if (!a3)
    v19 = 672;
  v20 = *(_QWORD *)(v16 + v19);
  if (v20)
  {
    if (!*(_BYTE *)(v20 + 208))
      md::GeocentricFrame::_updateMatrix((md::GeocentricFrame *)v20);
    *(_BYTE *)(v15 + 64) = 1;
    gm::operator*<double,4,4,4>((double *)v24, (double *)(v15 + 72), (double *)(v20 + 80));
    v21 = *(_OWORD *)&v24[16];
    *(_OWORD *)(v15 + 200) = *(_OWORD *)v24;
    *(_OWORD *)(v15 + 216) = v21;
    v22 = v25;
    *(_OWORD *)(v15 + 232) = *(_OWORD *)&v24[32];
    *(_OWORD *)(v15 + 248) = v22;
    *(_OWORD *)(v15 + 264) = v26;
    *(_OWORD *)(v15 + 280) = v27;
    *(float64x2_t *)(v15 + 296) = v28;
    result = *(double *)&v29;
    *(_OWORD *)(v15 + 312) = v29;
  }
  return result;
}

void sub_19F10FC60(_Unwind_Exception *a1)
{
  _QWORD *v1;

  *v1 = 0;
  _Unwind_Resume(a1);
}

void sub_19F10FC68(_Unwind_Exception *a1)
{
  _QWORD *v1;

  *v1 = 0;
  _Unwind_Resume(a1);
}

double md::PolylineLabelPlacement::createHiker@<D0>(uint64_t a1@<X0>, char a2@<W1>, _OWORD *a3@<X2>, char a4@<W3>, uint64_t *a5@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  __int128 v22;
  uint64_t v23;
  int v24;
  __int128 v25;
  __int128 v26;
  double v27;
  uint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  double result;

  v10 = operator new();
  v11 = v10;
  *(_BYTE *)(v10 + 8) = 1;
  v12 = v10 + 340;
  *(_DWORD *)(v10 + 9) = 0;
  *(_BYTE *)(v10 + 13) = a4;
  *(_QWORD *)(v10 + 24) = 0;
  *(_QWORD *)(v10 + 32) = 0;
  *(_QWORD *)(v10 + 16) = 0;
  *(_DWORD *)(v10 + 40) = 0;
  *(_DWORD *)(v10 + 52) = 1065353216;
  *(_QWORD *)(v10 + 44) = 1065353216;
  *(_QWORD *)(v10 + 56) = 0x3FF0000000000000;
  *(_BYTE *)(v10 + 64) = 0;
  *(_BYTE *)(v10 + 65) = a2;
  v13 = a3[5];
  *(_OWORD *)(v10 + 136) = a3[4];
  *(_OWORD *)(v10 + 152) = v13;
  v14 = a3[7];
  *(_OWORD *)(v10 + 168) = a3[6];
  *(_OWORD *)(v10 + 184) = v14;
  v15 = a3[1];
  *(_OWORD *)(v10 + 72) = *a3;
  *(_OWORD *)(v10 + 88) = v15;
  v16 = a3[3];
  *(_OWORD *)(v10 + 104) = a3[2];
  *(_OWORD *)(v10 + 120) = v16;
  *(_QWORD *)v10 = &off_1E4295D68;
  *(_WORD *)(v10 + 336) = *(_WORD *)(a1 + 8);
  *(_WORD *)(v10 + 338) = 0;
  *(_QWORD *)&v16 = *(_QWORD *)(a1 + 20);
  *(_QWORD *)(v10 + 340) = *(_QWORD *)(a1 + 12);
  *(_QWORD *)(v10 + 348) = v16;
  *(_QWORD *)(v10 + 360) = *(_QWORD *)(a1 + 32);
  *(_DWORD *)(v10 + 368) = *(_DWORD *)(a1 + 40);
  *(_WORD *)(v10 + 372) = *(_WORD *)(a1 + 44);
  *(_QWORD *)(v10 + 328) = &off_1E429D948;
  v17 = (uint64_t *)(v10 + 376);
  v18 = *(_QWORD *)(a1 + 48);
  v19 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(v10 + 376) = v18;
  *(_QWORD *)(v10 + 384) = v19;
  if (v19)
  {
    v20 = (unint64_t *)(v19 + 8);
    do
      v21 = __ldxr(v20);
    while (__stxr(v21 + 1, v20));
    v18 = *v17;
  }
  v22 = *(_OWORD *)(a1 + 64);
  *(_OWORD *)(v10 + 392) = v22;
  v23 = *(_QWORD *)(a1 + 80);
  *(_QWORD *)(v10 + 408) = v23;
  v24 = *(_DWORD *)(a1 + 88);
  *(_DWORD *)(v10 + 416) = v24;
  *(_DWORD *)(v10 + 424) = 0;
  *(_OWORD *)(v10 + 432) = *(_OWORD *)(a1 + 104);
  *(_QWORD *)(v10 + 448) = *(_QWORD *)(a1 + 120);
  *(_OWORD *)(v10 + 456) = *(_OWORD *)(a1 + 128);
  *(_DWORD *)(v10 + 472) = *(_DWORD *)(a1 + 144);
  *(_DWORD *)(v10 + 475) = *(_DWORD *)(a1 + 147);
  v25 = *(_OWORD *)(a1 + 152);
  *(_QWORD *)(v10 + 496) = *(_QWORD *)(a1 + 168);
  *(_OWORD *)(v10 + 480) = v25;
  v26 = *(_OWORD *)(a1 + 176);
  *(_OWORD *)(v10 + 504) = v26;
  *(_DWORD *)(v10 + 520) = *(_DWORD *)(a1 + 192);
  *(_DWORD *)(v10 + 523) = *(_DWORD *)(a1 + 195);
  *(_QWORD *)(v10 + 528) = *(_QWORD *)(a1 + 200);
  *(_DWORD *)(v10 + 536) = *(_DWORD *)(a1 + 208);
  LODWORD(v26) = *(_DWORD *)(a1 + 212);
  *(_DWORD *)(v10 + 540) = v26;
  if (!v18 || v24 != *(_DWORD *)(v18 + 252) || !*((_QWORD *)&v22 + 1) || (v23 & 0x80000000) != 0)
  {
    *(_QWORD *)&v27 = vmovl_u8(*(uint8x8_t *)&v26).u64[0];
    md::LabelLineResolvedPosition::moveOntoPathForZoom((md::LabelLineResolvedPosition *)(v10 + 376), LOBYTE(v27), v27);
    v18 = *v17;
  }
  *(_QWORD *)(v11 + 544) = v18;
  v28 = *(_QWORD *)(v11 + 384);
  *(_QWORD *)(v11 + 552) = v28;
  if (v28)
  {
    v29 = (unint64_t *)(v28 + 8);
    do
      v30 = __ldxr(v29);
    while (__stxr(v30 + 1, v29));
  }
  *(_OWORD *)(v11 + 560) = *(_OWORD *)(v12 + 52);
  *(_QWORD *)(v11 + 576) = *(_QWORD *)(v11 + 408);
  *(_DWORD *)(v11 + 584) = *(_DWORD *)(v11 + 416);
  result = 0.0;
  *(_OWORD *)(v11 + 592) = 0u;
  *(_OWORD *)(v11 + 608) = 0u;
  *(_OWORD *)(v11 + 624) = 0u;
  *(_OWORD *)(v11 + 640) = 0u;
  *(_DWORD *)(v11 + 632) = 2139095039;
  *(_OWORD *)(v11 + 656) = 0u;
  *(_OWORD *)(v11 + 672) = 0u;
  *(_DWORD *)(v11 + 680) = 2139095039;
  *(_OWORD *)(v11 + 688) = 0u;
  *(_OWORD *)(v11 + 704) = 0u;
  *(_QWORD *)(v11 + 760) = 0;
  *(_OWORD *)(v11 + 744) = 0u;
  *(_QWORD *)(v11 + 765) = 0;
  *a5 = v11;
  return result;
}

void sub_19F10FEE0(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  *(_QWORD *)(v1 + 328) = v2;
  v4 = *(std::__shared_weak_count **)(v1 + 384);
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  MEMORY[0x1A1AF4E00](v1, 0x10E1C4072222FA1);
  _Unwind_Resume(a1);
}

uint64_t md::PolylinePixelHiker::setPathOffset(uint64_t this, float a2)
{
  *(float *)(this + 760) = a2;
  return this;
}

uint64_t md::CurvedTextLabelPart::updateTextLayoutOptions(uint64_t result, float *a2, float *a3, float *a4, char a5, char a6, char *a7, char *a8)
{
  float v8;
  float v9;
  float v10;
  float v11;
  char v12;
  float v13;
  char v14;

  v8 = a4[1];
  v9 = a4[2];
  v10 = (float)((float)(*a4 * *a2) + (float)(v8 * a2[1])) + (float)(v9 * a2[2]);
  v11 = v10;
  if (a5 == 2)
    v11 = -(float)((float)((float)(*a3 * *a4) + (float)(a3[1] * v8)) + (float)(a3[2] * v9));
  if (a6 == 1)
  {
    if (v11 >= -0.01)
      goto LABEL_9;
    v12 = 2;
  }
  else
  {
    if (v11 <= 0.01)
      goto LABEL_9;
    v12 = 1;
  }
  *a8 = v12;
LABEL_9:
  if (!(_DWORD)result)
    return result;
  v13 = fabsf(v10);
  if (a5 == 1)
  {
    if (v13 >= 0.69711)
      return result;
    v14 = 2;
  }
  else
  {
    if (v13 <= 0.71711)
      return result;
    v14 = 1;
  }
  *a7 = v14;
  return result;
}

uint64_t md::CurvedTextLabelPart::setLayoutStartOffset(uint64_t result, int a2, float a3)
{
  uint64_t v3;

  v3 = result + 960;
  if (a2)
    v3 = result + 1152;
  if (*(float *)(v3 + 28) != a3)
  {
    *(float *)(v3 + 28) = a3;
    *(_BYTE *)(v3 + 179) = 1;
  }
  return result;
}

void md::TextLabelPart::pushToRenderModel(md::TextLabelPart *this, gdc::Registry **a2, float a3)
{
  gdc::Registry **v3;
  float v5;
  int v6;
  char *v7;
  unint64_t v8;
  char *v9;
  _BYTE *v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  char *v18;
  size_t v19;
  char *v20;
  char *v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  _WORD *v29;
  _BYTE *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  char v37;
  char *v38;
  void *v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  char *v43;
  char *v44;
  __int128 *v45;
  __int128 *v46;
  char *v47;
  __int128 v48;
  uint64_t v49;
  __int16 v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  uint64_t v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  char *v61;
  char *v62;
  char *v63;
  char *v64;
  char *v65;
  char *v66;
  char *v67;
  __int128 v68;
  __int128 v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  int v74;
  uint64_t v75;
  char v76;
  char *v77;
  char *v78;
  char v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  gdc::Registry *v85;
  _QWORD *v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t *v89;
  BOOL v90;
  uint64_t *v91;
  _QWORD *v92;
  char v93;
  uint64_t v94;
  uint64_t v95;
  _QWORD *v96;
  uint64_t *v97;
  uint64_t v98;
  unint64_t v99;
  unint64_t v100;
  uint64_t v101;
  uint64_t v102;
  unint64_t v103;
  unint64_t v104;
  unint64_t v105;
  unint64_t v106;
  char *v107;
  uint64_t v108;
  _QWORD *v109;
  uint64_t v110;
  char *v111;
  char *v112;
  uint64_t v113;
  char *v114;
  char *v115;
  uint64_t v116;
  char *v117;
  char *v118;
  char *v119;
  char *v120;
  uint64_t v121;
  char *v122;
  uint64_t v123;
  _QWORD *i;
  uint64_t v125;
  md::LabelRenderModel *v126;
  _DWORD *v127;
  unint64_t v128;
  void *v129;
  uint64_t v130;
  char v131;
  unint64_t v132;
  char *v133;
  void *v134;
  uint64_t v135;
  __int128 v136;
  _QWORD v137[16];
  unint64_t v138;
  uint64_t v139;
  __int16 v140;
  _QWORD v141[3];
  _QWORD *v142;
  uint64_t v143;

  v3 = a2;
  v143 = *MEMORY[0x1E0C80C00];
  if (*((_BYTE *)this + 920))
    a3 = *((float *)this + 231);
  v5 = *((float *)this + 190) * a3;
  *((float *)this + 138) = fmaxf(fminf(v5, 1.0), 0.0);
  if (v5 < 0.0039062)
  {
    *((_BYTE *)this + 873) = 0;
    return;
  }
  v6 = *((unsigned __int8 *)this + 867);
  *((_BYTE *)this + 873) = v6;
  if (!v6)
    return;
  v7 = (char *)v137;
  v134 = v137;
  v135 = (uint64_t)v137;
  *(_QWORD *)&v136 = v137;
  *((_QWORD *)&v136 + 1) = 8;
  v128 = (unsigned __int16)(*((_WORD *)this + 401) - *((_WORD *)this + 400));
  v8 = v128 + (unsigned __int16)(*((_WORD *)this + 403) - *((_WORD *)this + 402));
  v9 = (char *)*((_QWORD *)this + 111);
  v10 = (_BYTE *)*((_QWORD *)this + 110);
  v11 = (v9 - v10) >> 4;
  v12 = v8 - v11;
  v132 = v8;
  if (v8 <= v11)
  {
    if (v8 < v11)
      *((_QWORD *)this + 111) = &v10[16 * v8];
    *((_DWORD *)this + 226) = 0;
    if (!v8)
    {
      v35 = (char *)v137;
      goto LABEL_54;
    }
    v126 = (md::LabelRenderModel *)a2;
    v127 = (_DWORD *)((char *)this + 904);
  }
  else
  {
    v13 = *((_QWORD *)this + 112);
    if (v12 <= (v13 - (uint64_t)v9) >> 4)
    {
      bzero(v9, 16 * v12);
      *((_QWORD *)this + 111) = &v9[16 * v12];
    }
    else
    {
      v14 = v13 - (_QWORD)v10;
      v15 = v14 >> 3;
      if (v14 >> 3 <= v8)
        v15 = v128 + (unsigned __int16)(*((_WORD *)this + 403) - *((_WORD *)this + 402));
      if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF0)
        v16 = 0xFFFFFFFFFFFFFFFLL;
      else
        v16 = v15;
      if (v16 >> 60)
        goto LABEL_172;
      v17 = (char *)operator new(16 * v16);
      v18 = &v17[16 * v11];
      v19 = 16 * v12;
      v20 = &v17[16 * v16];
      bzero(v18, v19);
      v21 = &v18[v19];
      if (v9 != v10)
      {
        do
        {
          *((_OWORD *)v18 - 1) = *((_OWORD *)v9 - 1);
          v18 -= 16;
          v9 -= 16;
        }
        while (v9 != v10);
        v9 = (char *)*((_QWORD *)this + 110);
      }
      *((_QWORD *)this + 110) = v18;
      *((_QWORD *)this + 111) = v21;
      *((_QWORD *)this + 112) = v20;
      v8 = v132;
      if (v9)
        operator delete(v9);
    }
    v126 = (md::LabelRenderModel *)v3;
    v127 = (_DWORD *)((char *)this + 904);
    *((_DWORD *)this + 226) = 0;
  }
  v22 = 0;
  v23 = v128;
  do
  {
    v24 = *((_QWORD *)this + 74);
    v25 = v22 - v23;
    if (v22 >= v23)
    {
      v26 = (_QWORD *)(v24 + 96);
    }
    else
    {
      v26 = (_QWORD *)(v24 + 32);
      v25 = v22 + *((unsigned __int16 *)this + 400);
    }
    v27 = *v26 + 88 * v25;
    v28 = *((_QWORD *)this + 110);
    v29 = (_WORD *)(v28 + 16 * v22);
    *v29 = 0;
    v30 = (char *)v29 + 1;
    v31 = *(_QWORD *)v27;
    if (*(_QWORD *)v27)
    {
      if (*(_BYTE *)(v31 + 61))
      {
        v32 = *(_QWORD *)(v31 + 96);
        if (v32)
        {
          v7 = (char *)v134;
          if (v134 == (void *)v135
            || (v33 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v32 + 32) + 24))(*(_QWORD *)(v32 + 32)),
                v7 = (char *)v135,
                *(_QWORD *)(v135 - 16) != v33)
            || (v34 = *(_QWORD *)v27, *(unsigned __int8 *)(v135 - 2) != *(unsigned __int8 *)(*(_QWORD *)v27 + 60)))
          {
            v35 = (char *)v134;
            if (v7 - (_BYTE *)v134 == 4080)
              goto LABEL_53;
            v36 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v32 + 32) + 24))(*(_QWORD *)(v32 + 32));
            v37 = *(_BYTE *)(*(_QWORD *)v27 + 60);
            v39 = v134;
            v38 = (char *)v135;
            v40 = (v135 - (uint64_t)v134) >> 4;
            if (*((_QWORD *)&v136 + 1) < (unint64_t)(v40 + 1))
            {
              v131 = *(_BYTE *)(*(_QWORD *)v27 + 60);
              v129 = (void *)v136;
              v130 = (v135 - (uint64_t)v134) >> 4;
              v41 = (1 << -(char)__clz(*((_QWORD *)&v136 + 1) + 1));
              if (*((_QWORD *)&v136 + 1) >= 0xFFFFFFFFFFFFFFFELL)
                v41 = 1;
              if (v41 <= v40 + 1)
                v42 = v40 + 1;
              else
                v42 = v41;
              v43 = (char *)malloc_type_malloc(16 * v42, 0x1000040A0FC927FuLL);
              v44 = v43;
              v45 = (__int128 *)v134;
              v46 = (__int128 *)v135;
              if (v134 != (void *)v135)
              {
                v47 = v43;
                do
                {
                  v48 = *v45++;
                  *(_OWORD *)v47 = v48;
                  v47 += 16;
                }
                while (v45 != v46);
              }
              if (v39 != v129)
                free(v134);
              v38 = &v44[16 * v130];
              v134 = v44;
              v135 = (uint64_t)v38;
              *((_QWORD *)&v136 + 1) = v42;
              v23 = v128;
              v37 = v131;
            }
            *(_QWORD *)v38 = v36;
            *((_WORD *)v38 + 4) = 0;
            *((_WORD *)v38 + 5) = v22;
            *((_WORD *)v38 + 6) = 0;
            v38[14] = v37;
            v7 = (char *)(v135 + 16);
            v135 += 16;
            v34 = *(_QWORD *)v27;
            v8 = v132;
          }
          v49 = v28 + 16 * v22;
          *(_BYTE *)(v49 + 2) = (((_DWORD)v7 - (_DWORD)v134) >> 4) - 1;
          v50 = *((_WORD *)v7 - 4);
          *((_WORD *)v7 - 4) = v50 + 1;
          *(_WORD *)(v49 + 4) = v50;
          *((_WORD *)v7 - 2) = v22;
          *(_BYTE *)v49 = 1;
          *(_QWORD *)(v49 + 8) = v27;
          if (!*(_BYTE *)(v34 + 58))
          {
            *v30 = 1;
            ++*v127;
          }
        }
      }
    }
    ++v22;
  }
  while (v22 != v8);
  v35 = (char *)v134;
  v7 = (char *)v135;
LABEL_53:
  v3 = (gdc::Registry **)v126;
LABEL_54:
  v51 = (v7 - v35) >> 4;
  v52 = v51;
  v53 = *((_QWORD *)this + 118);
  v54 = *((_QWORD *)this + 117);
  v55 = 0xCCCCCCCCCCCCCCCDLL * ((v53 - v54) >> 3);
  v56 = v51 - v55;
  if (v51 > v55)
  {
    v57 = *((_QWORD *)this + 119);
    if (0xCCCCCCCCCCCCCCCDLL * ((v57 - v53) >> 3) >= v56)
    {
      v70 = v53 + 40 * v56;
      do
      {
        *(_QWORD *)v53 = 0;
        *(_QWORD *)(v53 + 8) = 0;
        *(_BYTE *)v53 = 1;
        *(_BYTE *)(v53 + 4) = 10;
        *(_WORD *)(v53 + 8) = 257;
        *(_QWORD *)(v53 + 16) = 0;
        *(_DWORD *)(v53 + 24) = 0;
        *(_WORD *)(v53 + 28) = 258;
        *(_QWORD *)(v53 + 30) = 0;
        *(_WORD *)(v53 + 38) = 0;
        v53 += 40;
      }
      while (v53 != v70);
      *((_QWORD *)this + 118) = v70;
LABEL_76:
      v71 = 0;
      v72 = 0;
      v73 = 16;
      do
      {
        v77 = (char *)v134;
        v78 = (char *)v134 + v71;
        if (*((_BYTE *)v134 + v71 + 14))
        {
          v79 = 3;
        }
        else if (*((_BYTE *)this + 866))
        {
          if (*((_BYTE *)this + 870))
            v79 = 6;
          else
            v79 = 5;
        }
        else
        {
          v79 = 1;
        }
        v80 = *((_QWORD *)this + 117);
        v81 = v80 + v73;
        *(_BYTE *)(v81 - 12) = v79;
        v82 = *((_QWORD *)v78 + 1);
        *(_DWORD *)(v81 + 16) = v82;
        *(_WORD *)(v80 + v73 + 20) = WORD2(v82);
        *(_BYTE *)(v81 - 16) = *((_BYTE *)this + 557);
        *(_BYTE *)(v81 - 14) = *((_BYTE *)this + 556);
        v83 = *((_QWORD *)this + 4);
        if (*(_BYTE *)(v83 + 78))
          v74 = *(_DWORD *)(v83 + 72);
        else
          v74 = 0;
        v75 = v80 + v73;
        *(_DWORD *)(v75 + 8) = v74;
        *(_BYTE *)(v75 - 7) = *((_BYTE *)this + 565) ^ 1;
        *(_BYTE *)(v75 - 15) = *((_BYTE *)this + 809);
        *(_BYTE *)(v75 - 8) = *(_BYTE *)(v83 + 77) ^ 1;
        *(_BYTE *)(v75 - 6) = *((float *)this + 189) > 0.0;
        if (*((_BYTE *)this + 808))
          v76 = v51;
        else
          v76 = v72;
        *(_BYTE *)(v75 - 13) = v76;
        *(_WORD *)(v75 - 10) = *((_WORD *)this + 279);
        ++v72;
        *(_QWORD *)v75 = *(_QWORD *)&v77[v71];
        v73 += 40;
        LOBYTE(v51) = v51 - 1;
        v71 += 16;
      }
      while (v52 != v72);
      v35 = (char *)v134;
      goto LABEL_92;
    }
    v58 = 0xCCCCCCCCCCCCCCCDLL * ((v57 - v54) >> 3);
    v59 = 0x999999999999999ALL * ((v57 - v54) >> 3);
    if (v59 <= v51)
      v59 = v51;
    if (v58 >= 0x333333333333333)
      v60 = 0x666666666666666;
    else
      v60 = v59;
    if (v60 <= 0x666666666666666)
    {
      v61 = (char *)operator new(40 * v60);
      v62 = &v61[40 * v55];
      v63 = &v61[40 * v51];
      v64 = v62;
      do
      {
        *(_QWORD *)v64 = 0;
        *((_QWORD *)v64 + 1) = 0;
        *v64 = 1;
        v64[4] = 10;
        *((_WORD *)v64 + 4) = 257;
        *((_QWORD *)v64 + 2) = 0;
        *((_DWORD *)v64 + 6) = 0;
        *((_WORD *)v64 + 14) = 258;
        *(_QWORD *)(v64 + 30) = 0;
        *((_WORD *)v64 + 19) = 0;
        v64 += 40;
      }
      while (v64 != v63);
      v65 = &v61[40 * v60];
      v66 = (char *)*((_QWORD *)this + 118);
      v67 = (char *)*((_QWORD *)this + 117);
      if (v66 != v67)
      {
        do
        {
          v68 = *(_OWORD *)(v66 - 40);
          v69 = *(_OWORD *)(v66 - 24);
          *((_QWORD *)v62 - 1) = *((_QWORD *)v66 - 1);
          *(_OWORD *)(v62 - 24) = v69;
          *(_OWORD *)(v62 - 40) = v68;
          v62 -= 40;
          v66 -= 40;
        }
        while (v66 != v67);
        v66 = (char *)*((_QWORD *)this + 117);
      }
      *((_QWORD *)this + 117) = v62;
      *((_QWORD *)this + 118) = v63;
      *((_QWORD *)this + 119) = v65;
      if (v66)
        operator delete(v66);
      goto LABEL_76;
    }
LABEL_172:
    std::__throw_bad_array_new_length[abi:nn180100]();
  }
  if (v51 < v55)
    *((_QWORD *)this + 118) = v54 + 40 * v51;
  if ((_BYTE)v51)
    goto LABEL_76;
LABEL_92:
  if (v35 != (char *)v136)
    free(v35);
  v84 = (char *)*((_QWORD *)this + 117);
  v133 = (char *)*((_QWORD *)this + 118);
  if (v84 != v133)
  {
    v85 = *v3;
    while (1)
    {
      v88 = gdc::Registry::create(v85);
      v134 = v84;
      v89 = (uint64_t *)gdc::Registry::storage<md::LabelRenderDescriptorComponent>((uint64_t)v85);
      gdc::ComponentStorageWrapper<md::ls::RegisterHandle>::emplace(v89, v88, &v134);
      LOBYTE(v140) = *((_BYTE *)this + 565);
      v90 = v140;
      if ((_BYTE)v140)
        v90 = *((_BYTE *)this + 866) != 0;
      HIBYTE(v140) = v90;
      v141[0] = &off_1E42CBB58;
      v141[1] = this;
      v142 = v141;
      v91 = (uint64_t *)gdc::Registry::storage<md::GlyphMeshDescriptor>((uint64_t)v85);
      v138 = v88;
      v92 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v91 + 4, (uint64_t)&v138);
      if ((v93 & 1) != 0)
        break;
      v94 = v91[10] + 40 * (((uint64_t)v92 - v91[7]) >> 3);
      *(_WORD *)v94 = v140;
      v95 = v94 + 8;
      v97 = (uint64_t *)(v94 + 32);
      v96 = *(_QWORD **)(v94 + 32);
      *(_QWORD *)(v94 + 32) = 0;
      if (v96 == (_QWORD *)(v94 + 8))
      {
        v96 = (_QWORD *)(v94 + 8);
        v98 = 4;
      }
      else
      {
        if (!v96)
          goto LABEL_121;
        v98 = 5;
      }
      (*(void (**)(void))(*v96 + 8 * v98))();
LABEL_121:
      if (v142)
      {
        if (v142 == v141)
        {
          *v97 = v95;
          (*(void (**)(_QWORD *, uint64_t))(*v142 + 24))(v142, v95);
        }
        else
        {
          *v97 = (uint64_t)v142;
          v142 = 0;
        }
      }
      else
      {
        *v97 = 0;
      }
      v108 = v91[31];
      if (v94 != v91[11])
      {
        v109 = (_QWORD *)v91[16];
        if (v109)
        {
          while (1)
          {
            v134 = &v138;
            v135 = 1;
            v139 = v108;
            v110 = v109[6];
            if (!v110)
              break;
            (*(void (**)(uint64_t, uint64_t *, void **))(*(_QWORD *)v110 + 48))(v110, &v139, &v134);
            v109 = (_QWORD *)*v109;
            if (!v109)
              goto LABEL_163;
          }
LABEL_170:
          std::__throw_bad_function_call[abi:nn180100]();
          __break(1u);
          goto LABEL_172;
        }
        goto LABEL_163;
      }
LABEL_160:
      for (i = (_QWORD *)v91[22]; i; i = (_QWORD *)*i)
      {
        v134 = &v138;
        v135 = 1;
        v139 = v108;
        v125 = i[6];
        if (!v125)
          goto LABEL_170;
        (*(void (**)(uint64_t, uint64_t *, void **))(*(_QWORD *)v125 + 48))(v125, &v139, &v134);
      }
LABEL_163:
      v86 = v142;
      if (v142 == v141)
      {
        v86 = v141;
        v87 = 4;
      }
      else
      {
        if (!v142)
          goto LABEL_98;
        v87 = 5;
      }
      (*(void (**)(void))(*v86 + 8 * v87))();
LABEL_98:
      v84 += 40;
      if (v84 == v133)
        return;
    }
    v99 = v91[12];
    v100 = v91[11];
    if (v100 < v99)
    {
      *(_WORD *)v100 = v140;
      v101 = (uint64_t)v142;
      if (!v142)
        goto LABEL_109;
      if (v142 == v141)
      {
        *(_QWORD *)(v100 + 32) = v100 + 8;
        (*(void (**)(_QWORD *))(*v142 + 24))(v142);
      }
      else
      {
        v101 = (*(uint64_t (**)(void))(*v142 + 16))();
LABEL_109:
        *(_QWORD *)(v100 + 32) = v101;
      }
      v113 = v100 + 40;
      v91[11] = v100 + 40;
LABEL_159:
      v91[11] = v113;
      v108 = v91[31];
      goto LABEL_160;
    }
    v102 = v91[10];
    v103 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v100 - v102) >> 3);
    v104 = v103 + 1;
    if (v103 + 1 > 0x666666666666666)
      abort();
    v105 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v99 - v102) >> 3);
    if (2 * v105 > v104)
      v104 = 2 * v105;
    if (v105 >= 0x333333333333333)
      v106 = 0x666666666666666;
    else
      v106 = v104;
    v137[0] = v91 + 12;
    if (v106)
    {
      if (v106 > 0x666666666666666)
        goto LABEL_172;
      v107 = (char *)operator new(40 * v106);
    }
    else
    {
      v107 = 0;
    }
    v111 = &v107[40 * v103];
    v134 = v107;
    v135 = (uint64_t)v111;
    *(_QWORD *)&v136 = v111;
    *((_QWORD *)&v136 + 1) = &v107[40 * v106];
    *(_WORD *)v111 = v140;
    if (v142)
    {
      if (v142 != v141)
      {
        *(_QWORD *)&v107[40 * v103 + 32] = (*(uint64_t (**)(void))(*v142 + 16))();
        goto LABEL_136;
      }
      *(_QWORD *)&v107[40 * v103 + 32] = v111 + 8;
      (*(void (**)(_QWORD *))(v141[0] + 24))(v141);
      v111 = (char *)v135;
      v112 = (char *)v136;
    }
    else
    {
      *(_QWORD *)&v107[40 * v103 + 32] = 0;
LABEL_136:
      v112 = &v107[40 * v103];
    }
    v113 = (uint64_t)(v112 + 40);
    *(_QWORD *)&v136 = v112 + 40;
    v114 = (char *)v91[10];
    v115 = (char *)v91[11];
    if (v115 == v114)
    {
      v91[10] = (uint64_t)v111;
      v91[11] = v113;
      v91[12] = *((_QWORD *)&v136 + 1);
LABEL_157:
      if (!v115)
        goto LABEL_159;
    }
    else
    {
      v116 = 0;
      do
      {
        v117 = &v111[v116];
        v118 = &v115[v116];
        *(_WORD *)&v111[v116 - 40] = *(_WORD *)&v115[v116 - 40];
        v119 = *(char **)&v115[v116 - 8];
        if (v119)
        {
          if (v118 - 32 == v119)
          {
            *((_QWORD *)v117 - 1) = v117 - 32;
            (*(void (**)(_QWORD))(**((_QWORD **)v118 - 1) + 24))(*((_QWORD *)v118 - 1));
          }
          else
          {
            *((_QWORD *)v117 - 1) = v119;
            *((_QWORD *)v118 - 1) = 0;
          }
        }
        else
        {
          *((_QWORD *)v117 - 1) = 0;
        }
        v116 -= 40;
      }
      while (&v115[v116] != v114);
      v115 = (char *)v91[10];
      v120 = (char *)v91[11];
      v91[10] = (uint64_t)&v111[v116];
      v121 = v136;
      *(_OWORD *)(v91 + 11) = v136;
      v113 = v121;
      if (v120 != v115)
      {
        while (1)
        {
          v122 = (char *)*((_QWORD *)v120 - 1);
          if (v120 - 32 == v122)
          {
            v122 = v120 - 32;
            v123 = 4;
          }
          else
          {
            if (!v122)
              goto LABEL_152;
            v123 = 5;
          }
          (*(void (**)(void))(*(_QWORD *)v122 + 8 * v123))();
LABEL_152:
          v120 -= 40;
          if (v120 == v115)
            goto LABEL_157;
        }
      }
      if (!v115)
        goto LABEL_159;
    }
    operator delete(v115);
    goto LABEL_159;
  }
}

void sub_19F110BA0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, void *a18)
{
  if (a16 != a18)
  {
    free(a16);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ta2::TextureAtlasRegion::texture(ta2::TextureAtlasRegion *this)
{
  uint64_t v1;

  v1 = *((_QWORD *)this + 3);
  if (v1)
    return *(_QWORD *)(v1 + 200);
  else
    return 0;
}

uint64_t md::CrossFadeLabelPart::pushToRenderModel(uint64_t result, uint64_t a2, float a3)
{
  uint64_t v5;
  unsigned int v6;
  BOOL v7;
  uint64_t v8;

  v5 = result;
  v6 = *(unsigned __int8 *)(result + 636);
  v7 = v6 > 0x25;
  v8 = (1 << v6) & 0x20000C0000;
  if (!v7 && v8 != 0)
    result = (*(uint64_t (**)(_QWORD, uint64_t, float))(***(_QWORD ***)(result + 576) + 128))(**(_QWORD **)(result + 576), a2, a3 - (float)(*(float *)(result + 632) * a3));
  if (*(_BYTE *)(v5 + 637) == 37)
    return (*(uint64_t (**)(_QWORD, uint64_t, float))(**(_QWORD **)(*(_QWORD *)(v5 + 576) + 8) + 128))(*(_QWORD *)(*(_QWORD *)(v5 + 576) + 8), a2, *(float *)(v5 + 632) * a3);
  return result;
}

void md::CurvedTextLabelPart::pushToRenderModel(md::CurvedTextLabelPart *this, gdc::Registry **a2, float a3)
{
  int v5;
  uint64_t v6;
  int v7;
  gdc::Registry *v8;
  unint64_t v9;
  uint64_t *v10;
  _QWORD *v11;
  uint64_t *v12;
  uint64_t v13;
  char *v14;
  _QWORD v15[3];
  _QWORD *v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  md::TextLabelPart::pushToRenderModel(this, a2, *((float *)this + 296) * a3);
  if (*((_BYTE *)this + 873))
  {
    v5 = *((_DWORD *)this + 226);
    if (v5)
    {
      if (*((float *)this + 197) > 0.0)
      {
        *((_BYTE *)this + 1353) = *((_BYTE *)this + 565) ^ 1;
        *((_WORD *)this + 688) = v5;
        *((_BYTE *)this + 1345) = *((_BYTE *)this + 809);
        *((_WORD *)this + 675) = *((_WORD *)this + 279);
        *((_BYTE *)this + 1346) = *((_BYTE *)this + 556);
        v6 = *((_QWORD *)this + 4);
        if (*(_BYTE *)(v6 + 78))
          v7 = *(_DWORD *)(v6 + 72);
        else
          v7 = 0;
        *((_DWORD *)this + 342) = v7;
        v8 = *a2;
        v9 = gdc::Registry::create(*a2);
        v14 = (char *)this + 1344;
        v10 = (uint64_t *)gdc::Registry::storage<md::LabelRenderDescriptorComponent>((uint64_t)v8);
        gdc::ComponentStorageWrapper<md::ls::RegisterHandle>::emplace(v10, v9, &v14);
        LOBYTE(v14) = *((_BYTE *)this + 565);
        v11 = v15;
        v15[0] = &off_1E4279FD8;
        v15[1] = this;
        v16 = v15;
        v12 = (uint64_t *)gdc::Registry::storage<md::ShadowMeshDescriptor>((uint64_t)v8);
        gdc::ComponentStorageWrapper<md::ShadowMeshDescriptor>::emplace(v12, v9, (uint64_t)&v14);
        if (v16 == v15)
        {
          v13 = 4;
        }
        else
        {
          if (!v16)
            return;
          v13 = 5;
          v11 = v16;
        }
        (*(void (**)(_QWORD *))(*v11 + 8 * v13))(v11);
      }
    }
  }
}

void sub_19F110E6C(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

void sub_19F110E78(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, _QWORD *a13)
{
  _QWORD *v13;
  uint64_t v15;

  if (a13 == v13)
  {
    v15 = 4;
  }
  else
  {
    if (!a13)
      _Unwind_Resume(exception_object);
    v15 = 5;
    v13 = a13;
  }
  (*(void (**)(_QWORD *))(*v13 + 8 * v15))(v13);
  _Unwind_Resume(exception_object);
}

uint64_t md::LabelPart::isFading(md::LabelPart *this)
{
  return 0;
}

uint64_t md::CaptionedIconLabelPart::animate(md::CaptionedIconLabelPart *this, float a2)
{
  uint64_t result;
  float v5;
  float v6;
  BOOL v7;
  float v8;
  float v9;

  result = (*(uint64_t (**)(md::CaptionedIconLabelPart *))(*(_QWORD *)this + 608))(this);
  if ((_DWORD)result)
  {
    v5 = 0.0;
    if (!*((_BYTE *)this + 732))
      v5 = 1.0;
    v6 = *((float *)this + 237);
    v7 = v6 < v5;
    v8 = fmaxf(v5, v6 - (float)(a2 * 5.0));
    v9 = fminf(v6 + (float)(a2 * 5.0), v5);
    if (!v7)
      v9 = v8;
    *((float *)this + 237) = v9;
  }
  return result;
}

BOOL md::CaptionedIconLabelPart::isFading(md::CaptionedIconLabelPart *this)
{
  float v1;

  if (!*((_BYTE *)this + 926))
    return 0;
  v1 = 0.0;
  if (!*((_BYTE *)this + 732))
    v1 = 1.0;
  return *((float *)this + 237) != v1;
}

float md::CaptionedIconLabelPart::pushToRenderModel(uint64_t a1, uint64_t a2, __n128 a3)
{
  float v3;
  float v6;
  uint64_t v7;
  float result;

  v3 = a3.n128_f32[0];
  if (*(_BYTE *)(a1 + 925))
    (*(void (**)(_QWORD, uint64_t, __n128))(***(_QWORD ***)(a1 + 576) + 128))(**(_QWORD **)(a1 + 576), a2, a3);
  if (*(_BYTE *)(a1 + 926) && !*(_BYTE *)(a1 + 732))
  {
    if (*(_BYTE *)(a1 + 952))
    {
      *(_BYTE *)(a1 + 952) = 0;
      *(_DWORD *)(a1 + 948) = 1065353216;
      v6 = 1.0;
    }
    else
    {
      v6 = *(float *)(a1 + 948);
    }
    v7 = *(_QWORD *)(*(_QWORD *)(a1 + 576) + 8 * *(unsigned __int8 *)(a1 + 925));
    (*(void (**)(uint64_t, uint64_t, float))(*(_QWORD *)v7 + 128))(v7, a2, v6 * v3);
  }
  result = fmaxf(fminf(v3, 1.0), 0.0);
  *(float *)(a1 + 552) = result;
  return result;
}

uint64_t md::PointIconLabelPart::pushToRenderModel(md::PointIconLabelPart *this, gdc::Registry **a2, float a3)
{
  uint64_t result;

  md::IconLabelPart::pushToRenderModel(this, a2, a3);
  result = *((_QWORD *)this + 104);
  if (result)
    return (*(uint64_t (**)(uint64_t, gdc::Registry **, float))(*(_QWORD *)result + 128))(result, a2, (float)(a3 * 0.25) * *((float *)this + 150));
  return result;
}

_QWORD *md::IconLabelPart::pushToRenderModel(md::IconLabelPart *this, gdc::Registry **a2, float a3)
{
  float v5;
  _QWORD *result;
  uint64_t v7;
  unsigned __int8 v8;
  id v9;
  uint64_t v10;
  int v11;
  gdc::Registry *v12;
  unint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t v16;
  char *v17;
  _BYTE v18[24];
  _BYTE *v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  if (*((_BYTE *)this + 756))
    a3 = *((float *)this + 190);
  v5 = *((float *)this + 150) * a3;
  result = (_QWORD *)(*(uint64_t (**)(md::IconLabelPart *, uint64_t))(*(_QWORD *)this + 736))(this, 1);
  if ((_DWORD)result)
  {
    if (!*((_BYTE *)this + 764) && !*((_BYTE *)this + 567))
    {
      *((_WORD *)this + 331) = *((_WORD *)this + 279);
      if (v5 >= 0.0039062)
      {
        v7 = *((_QWORD *)this + 80);
        if (v7)
        {
          v8 = atomic_load((unsigned __int8 *)(v7 + 143));
          if ((v8 & 1) != 0)
            v9 = *(id *)(v7 + 16);
          else
            v9 = 0;
          *((_QWORD *)this + 84) = objc_msgSend(v9, "texture");

        }
        else
        {
          *((_QWORD *)this + 84) = 0;
        }
        v10 = *((_QWORD *)this + 4);
        if (v10)
        {
          if (*(_BYTE *)(v10 + 78))
            v11 = *(_DWORD *)(v10 + 72);
          else
            v11 = 0;
          *((_DWORD *)this + 170) = v11;
        }
        v12 = *a2;
        v13 = gdc::Registry::create(*a2);
        v17 = (char *)this + 656;
        v14 = (uint64_t *)gdc::Registry::storage<md::LabelRenderDescriptorComponent>((uint64_t)v12);
        gdc::ComponentStorageWrapper<md::ls::RegisterHandle>::emplace(v14, v13, &v17);
        v19 = 0;
        LODWORD(v17) = 0;
        LOBYTE(v17) = *((_BYTE *)this + 565);
        (*(void (**)(md::IconLabelPart *, char **))(*(_QWORD *)this + 944))(this, &v17);
        v15 = (uint64_t *)gdc::Registry::storage<md::IconMeshDescriptor>((uint64_t)v12);
        gdc::ComponentStorageWrapper<md::IconMeshDescriptor>::emplace(v15, v13, (uint64_t)&v17);
        result = v19;
        if (v19 == v18)
        {
          v16 = 4;
          result = v18;
          goto LABEL_22;
        }
        if (v19)
        {
          v16 = 5;
LABEL_22:
          result = (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v16))();
        }
      }
    }
  }
  *((float *)this + 138) = fmaxf(fminf(v5, 1.0), 0.0);
  return result;
}

void sub_19F11124C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19F11125C(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

void sub_19F111268(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, _QWORD *a13)
{
  uint64_t v13;
  _QWORD *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == (_QWORD *)(v13 + 8))
  {
    v16 = 4;
    v15 = (_QWORD *)(v13 + 8);
  }
  else
  {
    if (!a13)
      _Unwind_Resume(exception_object);
    v16 = 5;
  }
  (*(void (**)(void))(*v15 + 8 * v16))();
  _Unwind_Resume(exception_object);
}

uint64_t md::ImageLabelPart::visible(uint64_t a1, int a2)
{
  uint64_t v2;

  v2 = a1 + 572;
  if (a2)
    v2 = a1 + 596;
  return *(unsigned __int8 *)(v2 + 21);
}

BOOL md::Label::isAnimating(md::Label *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v6;

  if (!*((_BYTE *)this + 1251))
    return 0;
  v2 = *((_QWORD *)this + 34);
  if (v2)
  {
    if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 704))(v2) & 1) != 0)
      return 1;
    if (!*((_BYTE *)this + 1251))
      return *((_QWORD *)this + 148) != 0;
    v3 = *((_QWORD *)this + 34);
    if (v3)
    {
      if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 608))(v3) & 1) != 0)
        return 1;
    }
  }
  v4 = *((_QWORD *)this + 37);
  if (v4 && ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 688))(v4) & 1) != 0 || *((_QWORD *)this + 38))
    return 1;
  v6 = *((unsigned __int8 *)this + 1072);
  if (v6 == 1)
  {
    if (*((float *)this + 280) < 1.0 || *((float *)this + 288) < 1.0)
      return 1;
    return *((_QWORD *)this + 148) != 0;
  }
  if (v6 == 3)
  {
    if (*((float *)this + 288) >= 1.0)
      return *((_QWORD *)this + 148) != 0;
    return 1;
  }
  if (v6 == 2 && *((float *)this + 280) > 0.0)
    return 1;
  return *((_QWORD *)this + 148) != 0;
}

uint64_t md::CompositeLabelPart::isAnimating(md::CompositeLabelPart *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  BOOL v5;

  v1 = *((_QWORD *)this + 72);
  v2 = *((_QWORD *)this + 73);
  if (v1 == v2)
    return 0;
  v3 = v1 + 8;
  do
  {
    result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v3 - 8) + 704))(*(_QWORD *)(v3 - 8));
    if ((result & 1) != 0)
      break;
    v5 = v3 == v2;
    v3 += 8;
  }
  while (!v5);
  return result;
}

uint64_t md::LabelPart::isAnimating(md::LabelPart *this)
{
  return 0;
}

uint64_t md::AnimatedCrossFadeLabelPart::isAnimating(md::AnimatedCrossFadeLabelPart *this)
{
  return (*(uint64_t (**)(md::AnimatedCrossFadeLabelPart *))(*(_QWORD *)this + 696))(this);
}

BOOL md::PolylineLabelPlacement::forward(md::PolylineLabelPlacement *this, double a2)
{
  md::LabelLineResolvedPosition *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v5 = *((_QWORD *)this + 6);
  v3 = (md::PolylineLabelPlacement *)((char *)this + 48);
  v4 = v5;
  if ((v5
     && *((_DWORD *)this + 22) == *(_DWORD *)(v4 + 252)
     && (v6 = *((_QWORD *)this + 9)) != 0
     && (*((__int16 *)this + 41) & 0x80000000) == 0
     || (md::LabelLineResolvedPosition::moveOntoPathForZoom(v3, *((unsigned __int8 *)this + 212), a2),
         (v7 = *((_QWORD *)this + 6)) != 0)
     && *((_DWORD *)this + 22) == *(_DWORD *)(v7 + 252)
     && (v6 = *((_QWORD *)this + 9)) != 0)
    && (*((__int16 *)this + 41) & 0x80000000) == 0)
  {
    return *(_BYTE *)(v6 + 8) != 0;
  }
  else
  {
    return 0;
  }
}

uint64_t md::PolylineLabelPlacement::travelDirection(md::PolylineLabelPlacement *this, double a2)
{
  uint64_t v2;
  md::LabelLinePosition *v3;

  v3 = (md::PolylineLabelPlacement *)((char *)this + 48);
  v2 = *((_QWORD *)this + 6);
  if (!v2 || *((_DWORD *)this + 22) != *(_DWORD *)(v2 + 252) || !*((_QWORD *)this + 9) || *((__int16 *)this + 41) < 0)
    md::LabelLineResolvedPosition::moveOntoPathForZoom((md::PolylineLabelPlacement *)((char *)this + 48), *((unsigned __int8 *)this + 212), a2);
  return md::LabelLinePosition::travelDirection(v3);
}

uint64_t md::MultipleShieldLabelPart::updateForDisplay(uint64_t this)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t *i;
  uint64_t v4;

  v1 = this;
  v2 = *(uint64_t **)(this + 576);
  for (i = *(uint64_t **)(this + 584); v2 != i; this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4))
    v4 = *v2++;
  *(_DWORD *)(v1 + 680) = *(_DWORD *)(v1 + 648);
  if (*(_BYTE *)(v1 + 696))
  {
    *(_BYTE *)(v1 + 696) = 0;
    return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v1 + 632) + 24))(*(_QWORD *)(v1 + 632), v1 + 664);
  }
  return this;
}

md::CrossFadeLabelPart *md::CrossFadeLabelPart::CrossFadeLabelPart(md::CrossFadeLabelPart *this, md::LabelPart *a2, md::LabelPart *a3, char a4)
{
  float *v6;
  unsigned __int8 v7;
  int v9;
  uint64_t v10;
  char v11;
  md::LabelPart *v12;

  *((_DWORD *)this + 2) = 1065353216;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = this;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((_QWORD *)this + 8) = 0;
  *(_OWORD *)((char *)this + 72) = xmmword_19FFB2E30;
  *((_QWORD *)this + 11) = 1065353216;
  *((_DWORD *)this + 24) = 1065353216;
  *(_OWORD *)((char *)this + 100) = 0u;
  *((_DWORD *)this + 29) = 0;
  *(_OWORD *)((char *)this + 120) = xmmword_19FFB2E30;
  *(_OWORD *)((char *)this + 136) = xmmword_19FFB2E30;
  *(_OWORD *)((char *)this + 152) = xmmword_19FFB2E30;
  *(_OWORD *)((char *)this + 168) = xmmword_19FFB3480;
  *((_BYTE *)this + 224) = 0;
  *((_BYTE *)this + 200) = 0;
  *(_OWORD *)((char *)this + 184) = 0u;
  *(_OWORD *)((char *)this + 257) = 0u;
  *(_OWORD *)((char *)this + 248) = 0u;
  *(_OWORD *)((char *)this + 232) = 0u;
  *(_OWORD *)((char *)this + 280) = xmmword_19FFB3580;
  *(_OWORD *)((char *)this + 296) = xmmword_19FFB3590;
  *(_OWORD *)((char *)this + 312) = xmmword_19FFB2E30;
  *((_QWORD *)this + 41) = 1065353216;
  *((_DWORD *)this + 84) = 1065353216;
  *((_DWORD *)this + 89) = 0;
  *(_OWORD *)((char *)this + 340) = 0u;
  *(_OWORD *)((char *)this + 360) = xmmword_19FFB2E30;
  *(_OWORD *)((char *)this + 376) = xmmword_19FFB2E30;
  *(_OWORD *)((char *)this + 392) = xmmword_19FFB2E30;
  *(_OWORD *)((char *)this + 408) = xmmword_19FFB3480;
  *((_BYTE *)this + 464) = 0;
  *(_OWORD *)((char *)this + 424) = 0u;
  *((_BYTE *)this + 440) = 0;
  *(_OWORD *)((char *)this + 497) = 0u;
  *(_OWORD *)((char *)this + 472) = 0u;
  *(_OWORD *)((char *)this + 488) = 0u;
  *(_OWORD *)((char *)this + 520) = xmmword_19FFB3580;
  *((_DWORD *)this + 134) = 1065353216;
  *(_OWORD *)((char *)this + 540) = 0u;
  *((_WORD *)this + 278) = 512;
  *((_BYTE *)this + 562) = 0;
  *(_DWORD *)((char *)this + 558) = 0;
  *(_WORD *)((char *)this + 563) = -1;
  *(_DWORD *)((char *)this + 565) = 0;
  *(_QWORD *)this = off_1E4294028;
  *((_OWORD *)this + 36) = 0u;
  *((_QWORD *)this + 74) = 0;
  v6 = &md::SignedDistanceFieldGenerator::_hypotCache[32438];
  if ((v7 & 1) == 0)
  {
    v12 = a2;
    v11 = a4;
    v6 = md::SignedDistanceFieldGenerator::_hypotCache + 129752;
    a4 = v11;
    a2 = v12;
    if (v9)
    {
      v10 = operator new();
      mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v10, "VectorKitLabels", 0x5ED09DD50000000FLL);
      v6 = md::SignedDistanceFieldGenerator::_hypotCache + 129752;
      a4 = v11;
      a2 = v12;
    }
  }
  *((_QWORD *)this + 75) = *((_QWORD *)v6 + 299);
  *((_BYTE *)this + 608) = 0;
  *((_BYTE *)this + 616) = 0;
  *(_WORD *)((char *)this + 629) = 0;
  *(_QWORD *)this = off_1E42943C0;
  *((_DWORD *)this + 158) = 0;
  *((_WORD *)this + 318) = 8224;
  *((_BYTE *)this + 628) = a4;
  md::CompositeLabelPart::addLabelPart((uint64_t)this, a2);
  md::CompositeLabelPart::addLabelPart((uint64_t)this, a3);
  return this;
}

void sub_19F1117B4(_Unwind_Exception *a1)
{
  md::CompositeLabelPart *v1;

  md::CompositeLabelPart::~CompositeLabelPart(v1);
  _Unwind_Resume(a1);
}

uint64_t md::PointIconLabelPart::PointIconLabelPart(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4, md::LabelStyle *a5, int a6)
{
  _QWORD *v11;
  uint64_t v12;
  uint64_t *v13;
  unsigned __int8 v14;
  uint64_t v15;
  __n128 v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  uint64_t v22;
  uint64_t v23;
  std::__shared_weak_count *v24;

  md::IconLabelPart::IconLabelPart(a1, a2);
  *v11 = off_1E42956E8;
  md::LabelIconStyleMonitor::LabelIconStyleMonitor((uint64_t)(v11 + 96), (uint64_t)a5);
  *(_DWORD *)(a1 + 824) = a6;
  *(_QWORD *)(a1 + 832) = 0;
  v12 = *((_QWORD *)a5 + 34);
  if (!v12)
  {
    v13 = md::LabelStyle::prepareStyleGroup<md::LabelPointStyleGroup>((uint64_t)a5);
    v12 = *v13;
    *((_QWORD *)a5 + 34) = *v13;
  }
  md::LabelStyle::namedIcon(&v23, a5, a3, a4, (void **)(v12 + 176), 1);
  if (v23)
  {
    {
      v22 = operator new();
      mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v22, "VectorKitLabels", 0x5ED09DD50000000FLL);
    }
    v15 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc + 16))(mdm::Allocator::instance(void)::alloc, 768, 8);
    v16.n128_f64[0] = md::IconLabelPart::IconLabelPart(v15, &v23);
    v17 = *(_QWORD *)(a1 + 832);
    *(_QWORD *)(a1 + 832) = v15;
    if (v17)
      (*(void (**)(uint64_t, double))(*(_QWORD *)v17 + 8))(v17, v16.n128_f64[0]);
    (*(void (**)(uint64_t, uint64_t, __n128))(*(_QWORD *)v15 + 808))(v15, 0xFFFFFFFFLL, v16);
  }
  v18 = v24;
  if (v24)
  {
    p_shared_owners = (unint64_t *)&v24->__shared_owners_;
    do
      v20 = __ldaxr(p_shared_owners);
    while (__stlxr(v20 - 1, p_shared_owners));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  return a1;
}

void sub_19F111960(_Unwind_Exception *a1)
{
  md::IconLabelPart *v1;

  md::IconLabelPart::~IconLabelPart(v1);
  _Unwind_Resume(a1);
}

void md::LabelStyle::namedIcon(uint64_t *a1, md::LabelStyle *a2, uint64_t a3, uint64_t a4, void **a5, int a6)
{
  void *v7;
  char *v11;
  unint64_t *v12;
  unsigned __int8 v13;
  uint64_t v14;
  grl *v15;
  int v16;
  uint64_t v17;
  unsigned int v18;
  int v19;
  grl *v20;
  int v21;
  int v22;
  int v23;
  uint64_t v24;
  uint64_t *v25;
  void **v26;
  char v27;
  void *v28;
  size_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *p_shared_owners;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  md::LabelImageKey *v40[3];
  std::__shared_weak_count *v41;

  v7 = (void *)*((unsigned __int8 *)a5 + 23);
  if ((char)v7 < 0)
    v7 = a5[1];
  if (!v7)
  {
    *a1 = 0;
    a1[1] = 0;
    return;
  }
  v11 = (char *)operator new(0x148uLL);
  *((_QWORD *)v11 + 1) = 0;
  v12 = (unint64_t *)(v11 + 8);
  *((_QWORD *)v11 + 2) = 0;
  *(_QWORD *)v11 = &off_1E42DB010;
  *(_OWORD *)(v11 + 24) = 0u;
  *(_OWORD *)(v11 + 40) = 0u;
  *((_QWORD *)v11 + 7) = 0;
  {
    v36 = operator new();
    mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v36, "VectorKitLabels", 0x5ED09DD50000000FLL);
  }
  v14 = mdm::Allocator::instance(void)::alloc;
  *((_QWORD *)v11 + 9) = 0;
  *((_QWORD *)v11 + 10) = 0;
  *((_QWORD *)v11 + 8) = v14;
  *((_WORD *)v11 + 44) = 0;
  *((_QWORD *)v11 + 12) = v11 + 128;
  *((_QWORD *)v11 + 13) = v11 + 128;
  *((_QWORD *)v11 + 14) = v11 + 128;
  *((_QWORD *)v11 + 15) = 2;
  v11[136] = 0;
  *(_DWORD *)(v11 + 137) = 16843008;
  v11[141] = 0;
  *((_QWORD *)v11 + 19) = 0;
  *((_QWORD *)v11 + 20) = 0;
  *((_QWORD *)v11 + 18) = 0;
  {
    v37 = operator new();
    mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v37, "VectorKitLabels", 0x5ED09DD50000000FLL);
  }
  *((_QWORD *)v11 + 21) = mdm::Allocator::instance(void)::alloc;
  *((_QWORD *)v11 + 22) = 0;
  *(_QWORD *)(v11 + 181) = 0;
  v11[192] = 4;
  *(_QWORD *)(v11 + 196) = 0;
  v11[204] = 0;
  *(_QWORD *)(v11 + 212) = 0xFFFF3F800000;
  *((_WORD *)v11 + 110) = 0;
  *((_DWORD *)v11 + 56) = 1065353216;
  *((_QWORD *)v11 + 40) = 0;
  *((_OWORD *)v11 + 15) = 0u;
  *((_OWORD *)v11 + 16) = 0u;
  *((_OWORD *)v11 + 17) = 0u;
  *((_QWORD *)v11 + 36) = 0;
  v40[2] = (md::LabelImageKey *)(v11 + 24);
  v41 = (std::__shared_weak_count *)v11;
  v11[136] = 4;
  *((float *)v11 + 20) = md::LabelStyle::iconContentScale(a2);
  v16 = *(unsigned __int8 *)(a3 + 3360);
  v17 = *((_QWORD *)a2 + 37);
  if (!v17)
  {
    v15 = (grl *)md::LabelStyle::prepareStyleGroup<md::LabelIconStyleGroup>((uint64_t)a2, 0);
    v17 = *(_QWORD *)v15;
    *((_QWORD *)a2 + 37) = *(_QWORD *)v15;
  }
  v18 = *(unsigned __int8 *)(v17 + 92) - 1;
  if (v18 > 8)
    v19 = 0;
  else
    v19 = dword_19FFB8A88[v18];
  v20 = (grl *)grl::SizeGroupMin(v15);
  v21 = (int)v20;
  v22 = grl::SizeGroupMax(v20);
  v23 = v19 + v16;
  if (v19 + v16 >= v22)
    v23 = v22;
  if (v23 <= v21)
    LOBYTE(v23) = v21;
  v11[192] = v23;
  v24 = *((_QWORD *)a2 + 37);
  if (!v24)
  {
    v25 = (uint64_t *)md::LabelStyle::prepareStyleGroup<md::LabelIconStyleGroup>((uint64_t)a2, 0);
    v24 = *v25;
    *((_QWORD *)a2 + 37) = *v25;
  }
  v11[220] = *(_BYTE *)(v24 + 96);
  *(_QWORD *)(v11 + 196) = *(_QWORD *)(v24 + 56);
  if (a6)
    *(_OWORD *)(v11 + 24) = *(_OWORD *)(a4 + 112);
  v26 = (void **)(v11 + 40);
  if (v11 + 40 != (char *)a5)
  {
    v27 = *((_BYTE *)a5 + 23);
    if (v11[63] < 0)
    {
      if (v27 >= 0)
        v28 = a5;
      else
        v28 = *a5;
      if (v27 >= 0)
        v29 = *((unsigned __int8 *)a5 + 23);
      else
        v29 = (size_t)a5[1];
      std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>::__assign_no_alias<false>(v26, v28, v29);
    }
    else if ((*((_BYTE *)a5 + 23) & 0x80) != 0)
    {
      std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>::__assign_no_alias<true>((_QWORD **)v26, *a5, (size_t)a5[1]);
    }
    else
    {
      *(_OWORD *)v26 = *(_OWORD *)a5;
      *((_QWORD *)v11 + 7) = a5[2];
    }
  }
  v30 = *(_QWORD *)(a3 + 264);
  v40[0] = (md::LabelImageKey *)(v11 + 24);
  v40[1] = (md::LabelImageKey *)v11;
  do
    v31 = __ldxr(v12);
  while (__stxr(v31 + 1, v12));
  md::LabelImageLoader::loadImage(a1, v30, v40);
  do
    v32 = __ldaxr(v12);
  while (__stlxr(v32 - 1, v12));
  if (v32)
  {
    v33 = v41;
    if (!v41)
      return;
  }
  else
  {
    (*(void (**)(char *))(*(_QWORD *)v11 + 16))(v11);
    std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v11);
    v33 = v41;
    if (!v41)
      return;
  }
  p_shared_owners = (unint64_t *)&v33->__shared_owners_;
  do
    v35 = __ldaxr(p_shared_owners);
  while (__stlxr(v35 - 1, p_shared_owners));
  if (!v35)
  {
    ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
    std::__shared_weak_count::__release_weak(v33);
  }
}

void sub_19F111D84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  _Unwind_Resume(a1);
}

uint64_t md::CompositeLabelPart::addLabelPart(uint64_t this, md::LabelPart *a2)
{
  uint64_t v3;
  _QWORD *v4;
  unint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _OWORD *v18;
  __int128 *v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;

  v3 = this;
  v4 = *(_QWORD **)(this + 584);
  v5 = *(_QWORD *)(this + 592);
  if ((unint64_t)v4 < v5)
  {
    if (v4)
      *v4 = a2;
    v6 = v4 + 1;
    goto LABEL_27;
  }
  v7 = *(_QWORD *)(this + 576);
  v8 = ((uint64_t)v4 - v7) >> 3;
  v9 = v8 + 1;
  if ((unint64_t)(v8 + 1) >> 61)
    abort();
  v10 = v5 - v7;
  if (v10 >> 2 > v9)
    v9 = v10 >> 2;
  if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8)
    v9 = 0x1FFFFFFFFFFFFFFFLL;
  if (v9)
  {
    v11 = 8 * v9;
    this = (*(uint64_t (**)(_QWORD, unint64_t, uint64_t))(**(_QWORD **)(this + 600) + 16))(*(_QWORD *)(this + 600), 8 * v9, 8);
    v12 = (_QWORD *)(this + 8 * v8);
    v9 = this + v11;
    if (this)
      *v12 = a2;
  }
  else
  {
    v12 = (_QWORD *)(8 * v8);
  }
  v6 = v12 + 1;
  v13 = *(_QWORD *)(v3 + 584);
  v14 = *(_QWORD *)(v3 + 576);
  if (v13 != v14)
  {
    v15 = v13 - v14 - 8;
    if (v15 < 0x38)
    {
      v17 = *(_QWORD *)(v3 + 584);
    }
    else if ((unint64_t)(v13 - (_QWORD)v12) < 0x20)
    {
      v17 = *(_QWORD *)(v3 + 584);
    }
    else
    {
      v16 = (v15 >> 3) + 1;
      v17 = v13 - 8 * (v16 & 0x3FFFFFFFFFFFFFFCLL);
      v18 = v12 - 2;
      v19 = (__int128 *)(v13 - 16);
      v20 = v16 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v21 = *v19;
        *(v18 - 1) = *(v19 - 1);
        *v18 = v21;
        v18 -= 2;
        v19 -= 2;
        v20 -= 4;
      }
      while (v20);
      v12 -= v16 & 0x3FFFFFFFFFFFFFFCLL;
      if (v16 == (v16 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_24;
    }
    do
    {
      v22 = *(_QWORD *)(v17 - 8);
      v17 -= 8;
      *--v12 = v22;
    }
    while (v17 != v14);
LABEL_24:
    v13 = *(_QWORD *)(v3 + 576);
  }
  *(_QWORD *)(v3 + 576) = v12;
  *(_QWORD *)(v3 + 584) = v6;
  v23 = *(_QWORD *)(v3 + 592);
  *(_QWORD *)(v3 + 592) = v9;
  if (v13)
    this = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 600) + 40))(*(_QWORD *)(v3 + 600), v13, v23 - v13);
LABEL_27:
  *(_QWORD *)(v3 + 584) = v6;
  *(_BYTE *)(v3 + 629) = 1;
  return this;
}

uint64_t md::CaptionedIconLabelPart::populatePlacement(uint64_t result, uint64_t a2, unsigned __int8 *a3, int a4)
{
  uint64_t v6;
  unsigned int v7;
  int v8;
  unsigned int v9;
  unsigned int v10;
  char v14;

  v6 = result;
  v7 = *a3;
  if (!*a3)
  {
    v7 = *(unsigned __int8 *)(result + 842);
    if (v7 <= 1)
      v7 = 1;
  }
  *(_BYTE *)a2 = v7;
  if (a3[3] == 9)
  {
    if (*(_BYTE *)(result + 845) == 9)
    {
      v8 = 0;
      if (*(_BYTE *)(result + 925))
        LOWORD(v9) = 6;
      else
        LOWORD(v9) = 8;
      if (*(_BYTE *)(result + 925))
        LOWORD(v10) = -64;
      else
        LOWORD(v10) = 0;
    }
    else
    {
      v8 = 0;
      v9 = *(unsigned __int16 *)(result + 845);
      v10 = v9 >> 8;
    }
  }
  else
  {
    v9 = *(unsigned __int16 *)(a3 + 3);
    v10 = v9 >> 8;
    v8 = a4 ^ 1;
  }
  if (v7 == 1 && v8 == 0 && *(_BYTE *)(result + 930) != 0 && (v10 & 0x1F) == 0)
  {
    result = v9;
    if (v9 <= 9u)
    {
      result = gss::LabelPositionToMask(v9);
      if ((result & 0x83) != 0)
        LOWORD(v9) = mirroredHorizontalPositions[v9];
    }
    if ((v9 & 0xF8) != 0)
      LOWORD(v10) = 0;
    else
      LOWORD(v10) = 32 * v9;
  }
  *(_WORD *)(a2 + 3) = v9 | (unsigned __int16)((_WORD)v10 << 8);
  if (v9 != 8)
  {
LABEL_34:
    v14 = a3[1];
    if (v14)
      goto LABEL_38;
    goto LABEL_35;
  }
  if (*(_BYTE *)(v6 + 925))
  {
    *(_WORD *)(a2 + 3) = -16378;
    goto LABEL_34;
  }
  *(_BYTE *)a2 = 1;
  v14 = a3[1];
  if (v14)
    goto LABEL_38;
LABEL_35:
  v14 = *(_BYTE *)(v6 + 843);
  if (!v14)
    v14 = 1;
LABEL_38:
  *(_BYTE *)(a2 + 1) = v14;
  return result;
}

double md::IconLabelPart::IconLabelPart(uint64_t a1, _QWORD *a2)
{
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  char v10;
  double result;

  *(_DWORD *)(a1 + 8) = 1065353216;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = a1;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_QWORD *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + 72) = xmmword_19FFB2E30;
  *(_QWORD *)(a1 + 88) = 1065353216;
  *(_DWORD *)(a1 + 96) = 1065353216;
  *(_QWORD *)(a1 + 108) = 0;
  *(_QWORD *)(a1 + 100) = 0;
  *(_DWORD *)(a1 + 116) = 0;
  *(_OWORD *)(a1 + 120) = xmmword_19FFB2E30;
  *(_OWORD *)(a1 + 136) = xmmword_19FFB2E30;
  *(_OWORD *)(a1 + 152) = xmmword_19FFB2E30;
  *(_OWORD *)(a1 + 168) = xmmword_19FFB3480;
  *(_BYTE *)(a1 + 224) = 0;
  *(_BYTE *)(a1 + 200) = 0;
  *(_QWORD *)(a1 + 184) = 0;
  *(_QWORD *)(a1 + 192) = 0;
  *(_OWORD *)(a1 + 257) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 280) = xmmword_19FFB3580;
  *(_OWORD *)(a1 + 296) = xmmword_19FFB3590;
  *(_OWORD *)(a1 + 312) = xmmword_19FFB2E30;
  *(_QWORD *)(a1 + 328) = 1065353216;
  *(_DWORD *)(a1 + 336) = 1065353216;
  *(_DWORD *)(a1 + 356) = 0;
  *(_QWORD *)(a1 + 340) = 0;
  *(_QWORD *)(a1 + 348) = 0;
  *(_OWORD *)(a1 + 360) = xmmword_19FFB2E30;
  *(_OWORD *)(a1 + 376) = xmmword_19FFB2E30;
  *(_OWORD *)(a1 + 392) = xmmword_19FFB2E30;
  *(_OWORD *)(a1 + 408) = xmmword_19FFB3480;
  *(_BYTE *)(a1 + 464) = 0;
  *(_QWORD *)(a1 + 424) = 0;
  *(_QWORD *)(a1 + 432) = 0;
  *(_BYTE *)(a1 + 440) = 0;
  *(_OWORD *)(a1 + 497) = 0u;
  *(_OWORD *)(a1 + 472) = 0u;
  *(_OWORD *)(a1 + 488) = 0u;
  *(_OWORD *)(a1 + 520) = xmmword_19FFB3580;
  *(_DWORD *)(a1 + 536) = 1065353216;
  *(_QWORD *)(a1 + 540) = 0;
  *(_QWORD *)(a1 + 548) = 0;
  *(_WORD *)(a1 + 556) = 512;
  *(_BYTE *)(a1 + 562) = 0;
  *(_DWORD *)(a1 + 558) = 0;
  *(_WORD *)(a1 + 563) = -1;
  *(_DWORD *)(a1 + 565) = 0;
  __asm { FMOV            V1.4S, #1.0 }
  *(_OWORD *)(a1 + 572) = _Q1;
  *(_DWORD *)(a1 + 588) = 1065353216;
  *(_WORD *)(a1 + 592) = 256;
  *(_BYTE *)(a1 + 594) = 0;
  *(_OWORD *)(a1 + 596) = _Q1;
  *(_DWORD *)(a1 + 612) = 1065353216;
  *(_WORD *)(a1 + 616) = 256;
  *(_BYTE *)(a1 + 618) = 0;
  *(_QWORD *)(a1 + 620) = 0;
  *(_DWORD *)(a1 + 628) = 257;
  *(_WORD *)(a1 + 632) = 1;
  *(_QWORD *)a1 = off_1E428D7E0;
  v7 = a2[1];
  *(_QWORD *)(a1 + 640) = *a2;
  *(_QWORD *)(a1 + 648) = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
    v10 = *(_BYTE *)(a1 + 557);
  }
  else
  {
    v10 = 2;
  }
  *(_DWORD *)(a1 + 662) = 16842752;
  *(_BYTE *)(a1 + 666) = 0;
  *(_QWORD *)(a1 + 672) = 0;
  *(_DWORD *)(a1 + 680) = 0;
  *(_WORD *)(a1 + 684) = 258;
  *(_QWORD *)(a1 + 686) = 0;
  *(_WORD *)(a1 + 694) = 0;
  *(_OWORD *)(a1 + 728) = 0uLL;
  *(_DWORD *)(a1 + 744) = 1065353216;
  *(_WORD *)(a1 + 764) = 0;
  *(_BYTE *)(a1 + 756) = 0;
  *(_QWORD *)(a1 + 748) = 0;
  result = 5.77662215e-275;
  *(_DWORD *)(a1 + 657) = 117440512;
  *(_WORD *)(a1 + 688) = 1;
  *(_BYTE *)(a1 + 656) = v10;
  return result;
}

float md::ArrowLabelPart::updateWithStyle(uint64_t **this, md::LabelManager *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  float v6;
  float result;

  md::ImageLabelPart::updateWithStyle((md::ImageLabelPart *)this, a2);
  v3 = *this[4];
  v4 = *(_QWORD *)(v3 + 264);
  if (!v4)
  {
    v5 = md::LabelStyle::prepareStyleGroup<md::LabelLineStyleGroup>(*this[4]);
    v4 = *v5;
    *(_QWORD *)(v3 + 264) = *v5;
  }
  v6 = *((float *)this + 147) * *(float *)(v4 + 48);
  *((float *)this + 205) = v6;
  result = *((float *)this + 228) * v6;
  *((float *)this + 204) = result;
  return result;
}

uint64_t *md::Label::createNextPart(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 v9;
  uint64_t *result;
  uint64_t v11;
  uint64_t *v12;
  int v13;
  int v14;
  unsigned __int8 v15;
  unsigned __int8 v16;
  char v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  int v21;
  unsigned __int8 v22;
  char v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned __int8 v30;
  int v31;
  char v32;
  unsigned __int8 v33;
  uint64_t v34;
  unsigned __int8 v35;
  char v36;
  uint64_t v37;
  int v38;
  char v39;
  _WORD v40[4];

  *(_BYTE *)(a1 + 1247) = 1;
  LOBYTE(v40[0]) = 1;
  memset((char *)v40 + 1, 0, 7);
  v6 = *(_QWORD *)(a1 + 264);
  if (v6 || (v6 = *(_QWORD *)(a1 + 272)) != 0)
    (*(void (**)(uint64_t, _WORD *))(*(_QWORD *)v6 + 432))(v6, v40);
  if (a3)
  {
    if (*(_BYTE *)(a3 + 8))
      LOBYTE(v40[0]) = *(_BYTE *)a3;
    if (*(_BYTE *)(a3 + 9))
      HIBYTE(v40[0]) = *(_BYTE *)(a3 + 1);
    if (*(_BYTE *)(a3 + 10))
      LOBYTE(v40[1]) = *(_BYTE *)(a3 + 2);
    if (*(_BYTE *)(a3 + 11))
      HIBYTE(v40[1]) = *(_BYTE *)(a3 + 3);
    v40[3] = *(_WORD *)(a3 + 6);
  }
  if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a2 + 168) + 32) + 24))(*(_QWORD *)(*(_QWORD *)(a2 + 168) + 32)))
    LOBYTE(v40[0]) = 0;
  v7 = *(_QWORD *)(a1 + 8);
  v8 = *(unsigned int *)(a1 + 48);
  v9 = atomic_load((unsigned __int8 *)(a1 + 1240));
  result = (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD, _QWORD, _QWORD))(*(_QWORD *)v7 + 552))(v7, v8, 0, v9 & 1, 0);
  v11 = *result;
  if (*result)
  {
    v12 = result;
    v13 = *(_DWORD *)(*(_QWORD *)(a1 + 8) + 132);
    *(_BYTE *)(a1 + 1214) = *(_BYTE *)(a1 + 404);
    v14 = *(_DWORD *)(a2 + 3312);
    *(_DWORD *)(a1 + 52) = v13;
    *(_DWORD *)(a1 + 56) = v14;
    *(_WORD *)(a1 + 1283) = 0;
    *(_BYTE *)(a1 + 1285) = 0;
    *(_BYTE *)(a1 + 1288) = 0;
    if (*(_BYTE *)(a1 + 1250))
    {
      *(_BYTE *)(a1 + 1250) = 0;
      *(_BYTE *)(a1 + 1287) = 4;
      v15 = atomic_load((unsigned __int8 *)(a1 + 1240));
      if ((v15 & 1) != 0)
      {
        if ((*(_BYTE *)(a1 + 1245)
           || (v22 = atomic_load((unsigned __int8 *)(a1 + 1240)), (v22 & 1) != 0)
           || *(_BYTE *)(a1 + 1245))
          && *(_BYTE *)(a1 + 822) != 1)
        {
          v23 = 4;
          v24 = 3;
        }
        else
        {
          v23 = 2;
          v24 = 1;
        }
        *(_BYTE *)(a1 + 1288) = v24;
        *(_BYTE *)(a1 + 1289) = v23;
        *(_BYTE *)(a1 + 833) = 1;
        goto LABEL_42;
      }
      v16 = atomic_load((unsigned __int8 *)(a1 + 1243));
      if ((v16 & 1) != 0)
      {
        *(_BYTE *)(a1 + 1285) = 1;
        *(_BYTE *)(a1 + 834) = 1;
        *(_BYTE *)(a1 + 1288) = *(_BYTE *)(a1 + 1289);
        goto LABEL_42;
      }
    }
    else
    {
      v18 = *(_QWORD *)(v11 + 296);
      if (!v18)
      {
        v19 = (uint64_t *)md::LabelStyle::prepareStyleGroup<md::LabelIconStyleGroup>(v11, 0);
        v18 = *v19;
        *(_QWORD *)(v11 + 296) = *v19;
      }
      if (*(_BYTE *)(v18 + 88) == 11)
      {
        v20 = *(_QWORD *)(a1 + 1192);
        if (v20)
        {
          if ((v21 = *(unsigned __int8 *)(v20 + 52), v21 == 1)
            || v21 == 2 && *(double *)(*(_QWORD *)(*(_QWORD *)v20 + 432) + 336) - *(double *)(v20 + 104) < 0.5
            || *(_BYTE *)(a1 + 1273))
          {
            if (*(_BYTE *)(a2 + 3663))
            {
              *(_WORD *)(a1 + 1287) = 2308;
LABEL_42:
              v25 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t, _WORD *))(**(_QWORD **)(a1 + 8) + 24))(*(_QWORD *)(a1 + 8), a2, a1, *v12, v40);
              v26 = *(_QWORD *)(a1 + 264);
              *(_QWORD *)(a1 + 264) = v25;
              if (v26)
              {
                (*(void (**)(uint64_t))(*(_QWORD *)v26 + 8))(v26);
                v25 = *(_QWORD *)(a1 + 264);
              }
              *(_BYTE *)(a1 + 1273) = 0;
              if (v25)
                goto LABEL_45;
              {
                v37 = operator new();
                mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v37, "VectorKitLabels", 0x5ED09DD50000000FLL);
              }
              v25 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc
                                                                         + 16))(mdm::Allocator::instance(void)::alloc, 576, 8);
              bzero((void *)(v25 + 8), 0x238uLL);
              *(_DWORD *)(v25 + 8) = 1065353216;
              *(_QWORD *)(v25 + 24) = v25;
              *(_OWORD *)(v25 + 32) = 0u;
              *(_OWORD *)(v25 + 48) = 0u;
              *(_OWORD *)(v25 + 72) = xmmword_19FFB2E30;
              *(_QWORD *)(v25 + 64) = 0;
              *(_QWORD *)(v25 + 88) = 1065353216;
              *(_DWORD *)(v25 + 96) = 1065353216;
              *(_QWORD *)(v25 + 108) = 0;
              *(_QWORD *)(v25 + 100) = 0;
              *(_DWORD *)(v25 + 116) = 0;
              *(_OWORD *)(v25 + 120) = xmmword_19FFB2E30;
              *(_OWORD *)(v25 + 136) = xmmword_19FFB2E30;
              *(_OWORD *)(v25 + 152) = xmmword_19FFB2E30;
              *(_OWORD *)(v25 + 168) = xmmword_19FFB3480;
              *(_QWORD *)(v25 + 184) = 0;
              *(_QWORD *)(v25 + 192) = 0;
              *(_BYTE *)(v25 + 200) = 0;
              *(_OWORD *)(v25 + 232) = 0u;
              *(_OWORD *)(v25 + 248) = 0u;
              *(_OWORD *)(v25 + 257) = 0u;
              *(_OWORD *)(v25 + 280) = xmmword_19FFB3580;
              *(_OWORD *)(v25 + 296) = xmmword_19FFB3590;
              *(_OWORD *)(v25 + 312) = xmmword_19FFB2E30;
              *(_QWORD *)(v25 + 328) = 1065353216;
              *(_DWORD *)(v25 + 336) = 1065353216;
              *(_DWORD *)(v25 + 356) = 0;
              *(_QWORD *)(v25 + 340) = 0;
              *(_QWORD *)(v25 + 348) = 0;
              *(_OWORD *)(v25 + 360) = xmmword_19FFB2E30;
              *(_OWORD *)(v25 + 376) = xmmword_19FFB2E30;
              *(_OWORD *)(v25 + 392) = xmmword_19FFB2E30;
              *(_OWORD *)(v25 + 408) = xmmword_19FFB3480;
              *(_QWORD *)(v25 + 424) = 0;
              *(_QWORD *)(v25 + 432) = 0;
              *(_BYTE *)(v25 + 440) = 0;
              *(_OWORD *)(v25 + 472) = 0u;
              *(_OWORD *)(v25 + 488) = 0u;
              *(_OWORD *)(v25 + 497) = 0u;
              *(_OWORD *)(v25 + 520) = xmmword_19FFB3580;
              *(_DWORD *)(v25 + 536) = 1065353216;
              *(_WORD *)(v25 + 556) = 512;
              *(_QWORD *)(v25 + 540) = 0;
              *(_QWORD *)(v25 + 548) = 0;
              *(_BYTE *)(v25 + 562) = 0;
              *(_DWORD *)(v25 + 558) = 0;
              *(_WORD *)(v25 + 563) = -1;
              *(_QWORD *)v25 = off_1E428E118;
              v34 = *(_QWORD *)(a1 + 264);
              *(_QWORD *)(a1 + 264) = v25;
              if (!v34
                || (result = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v34 + 8))(v34),
                    (v25 = *(_QWORD *)(a1 + 264)) != 0))
              {
LABEL_45:
                (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v25 + 16))(v25, a1);
                v27 = *(_QWORD *)(a1 + 272);
                if (v27)
                {
                  v28 = *(_QWORD *)(a1 + 264);
                  v29 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v27 + 424))(v27);
                  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v28 + 416))(v28, v29);
                }
                if (*(_BYTE *)(a1 + 1275) || (v30 = atomic_load((unsigned __int8 *)(a1 + 1240)), (v30 & 1) != 0))
                  (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 264) + 816))(*(_QWORD *)(a1 + 264), 3);
                (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 264) + 72))(*(_QWORD *)(a1 + 264), a2);
                result = (*(_QWORD *(**)(int *__return_ptr))(**(_QWORD **)(a1 + 264) + 528))(&v38);
                v31 = v38;
                *(_DWORD *)(a1 + 312) = v38;
                v32 = v39;
                *(_BYTE *)(a1 + 316) = v39;
                *(_DWORD *)(a1 + 317) = v31;
                *(_BYTE *)(a1 + 321) = v32;
              }
              return result;
            }
          }
        }
      }
      if (*(_BYTE *)(a2 + 3375))
      {
        v17 = 2;
        goto LABEL_33;
      }
      if (!*(_BYTE *)(a1 + 1245))
      {
        v35 = atomic_load((unsigned __int8 *)(a1 + 1240));
        if ((v35 & 1) != 0 && !*(_BYTE *)(a1 + 1245) && *(_BYTE *)(a1 + 822) != 1)
        {
          v17 = 1;
          *(_BYTE *)(a1 + 826) = 1;
          goto LABEL_33;
        }
      }
      if (*(_BYTE *)(a1 + 1295))
      {
        *(_WORD *)(a1 + 1287) = 1797;
        *(_BYTE *)(a1 + 1295) = 0;
        *(_BYTE *)(a1 + 480) = 1;
        *(_WORD *)(a1 + 1284) = 257;
        goto LABEL_42;
      }
      if (*(_DWORD *)(a1 + 1304) != -1 && !*(_BYTE *)(a1 + 1255))
      {
        *(_BYTE *)(a1 + 1287) = 4;
        if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 352))(*(_QWORD *)(a1 + 8)))
          v36 = 6;
        else
          v36 = 5;
        *(_BYTE *)(a1 + 1288) = v36;
        *(_BYTE *)(a1 + 1285) = 1;
        goto LABEL_42;
      }
    }
    v17 = 3;
LABEL_33:
    *(_BYTE *)(a1 + 1287) = v17;
    goto LABEL_42;
  }
  return result;
}

void md::CaptionedIconLabelPart::updateWithStyle(md::CaptionedIconLabelPart *this, md::LabelManager *a2, double a3)
{
  uint64_t *v5;
  uint64_t *v6;
  float v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  int v13;
  unsigned __int8 *v14;
  int v15;
  BOOL v16;
  unsigned int v17;
  char v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t *v22;
  float32x2_t v23;
  int32x4_t v24;
  unint64_t v25;
  char *v26;
  uint64_t v27;
  int v28;
  BOOL v29;
  char v30;

  v5 = (uint64_t *)*((_QWORD *)this + 72);
  v6 = (uint64_t *)*((_QWORD *)this + 73);
  if (v5 == v6)
  {
    v9 = (uint64_t *)*((_QWORD *)this + 4);
    v7 = *(float *)(*v9 + 172);
  }
  else
  {
    v7 = -3.4028e38;
    do
    {
      v8 = *v5++;
      (*(void (**)(uint64_t, md::LabelManager *))(*(_QWORD *)v8 + 72))(v8, a2);
      v7 = fmaxf(v7, (*(float (**)(uint64_t))(*(_QWORD *)v8 + 240))(v8));
    }
    while (v5 != v6);
    v9 = (uint64_t *)*((_QWORD *)this + 4);
  }
  *((float *)this + 42) = v7;
  if (*((_BYTE *)this + 926))
  {
    v10 = *v9;
    v11 = *(_QWORD *)(*v9 + 272);
    if (!v11)
    {
      v12 = md::LabelStyle::prepareStyleGroup<md::LabelPointStyleGroup>(*v9);
      v11 = *v12;
      *(_QWORD *)(v10 + 272) = *v12;
      v10 = *v9;
    }
    v13 = *(unsigned __int16 *)(v10 + 246);
    if (v13 != *((unsigned __int16 *)this + 425))
    {
      *((_WORD *)this + 425) = v13;
      if (*((_BYTE *)this + 921))
      {
        if (*((_BYTE *)this + 955))
        {
          md::CaptionedIconLabelPart::initAlternatePlacements((uint64_t)this);
          v14 = (unsigned __int8 *)*((_QWORD *)this + 100);
          v16 = v14 != *((unsigned __int8 **)this + 101)
             && *((unsigned __int8 *)this + 837) == *v14
             && *((unsigned __int8 *)this + 838) == v14[1]
             && (v15 = *((unsigned __int8 *)this + 840), v15 == v14[3])
             && (v15 != 10 || *((unsigned __int8 *)this + 841) == v14[4]);
          *((_BYTE *)this + 956) = v16;
          v10 = *v9;
        }
      }
    }
    v17 = *(unsigned __int8 *)(v10 + 244);
    *((_BYTE *)this + 845) = v17;
    if (v17 >= 8)
      v18 = 0;
    else
      v18 = 32 * v17;
    *((_BYTE *)this + 846) = v18;
    v19 = *v9;
    v20 = *(unsigned __int8 *)(*v9 + 249);
    if (v20 != *((unsigned __int8 *)this + 852))
      *((_BYTE *)this + 852) = v20;
    *((_BYTE *)this + 957) = *(_BYTE *)(v19 + 143);
    v21 = *(_QWORD *)(v19 + 296);
    if (!v21)
    {
      v22 = (uint64_t *)md::LabelStyle::prepareStyleGroup<md::LabelIconStyleGroup>(v19, 0);
      v21 = *v22;
      *(_QWORD *)(v19 + 296) = *v22;
      v19 = *v9;
    }
    LODWORD(a3) = *(_DWORD *)(v21 + 36);
    v23 = (float32x2_t)vdupq_lane_s32(*(int32x2_t *)&a3, 0).u64[0];
    v24 = (int32x4_t)vmulq_n_f32(*(float32x4_t *)(v11 + 24), *(float *)&a3);
    *(int32x4_t *)((char *)this + 632) = vuzp1q_s32((int32x4_t)vextq_s8((int8x16_t)v24, (int8x16_t)v24, 0xCuLL), v24);
    *((int32x2_t *)this + 81) = vrev64_s32((int32x2_t)vmul_f32(*(float32x2_t *)(v11 + 52), v23));
    *((_BYTE *)this + 794) = 0;
    if (*(_BYTE *)(v19 + 126))
    {
      v25 = 0;
      v26 = (char *)this + 792;
      v27 = 361;
      do
      {
        if (!*(_BYTE *)(v19 + 457))
          md::LabelStyle::prepareAlternateStyles((md::LabelStyle *)v19);
        if (*(_BYTE *)(v19 + v27 - 1))
        {
          v28 = *(unsigned __int8 *)(v19 + v27);
          v26[v25] = v28;
          if (*((_BYTE *)this + 794))
            v29 = 1;
          else
            v29 = v28 == 1;
          if (!v29)
          {
            *((_BYTE *)this + 794) = 1;
            *((_BYTE *)this + 795) = v25;
          }
        }
        else
        {
          v26[v25] = 0;
        }
        ++v25;
        v19 = *v9;
        v27 += 16;
      }
      while (v25 < *(unsigned __int8 *)(*v9 + 126));
    }
  }
  if (!*((_BYTE *)this + 945))
  {
    v30 = 2;
    switch(*(_BYTE *)(*v9 + 241))
    {
      case 0:
        v30 = 3;
        goto LABEL_45;
      case 1:
      case 3:
        goto LABEL_45;
      case 2:
        if (*((_BYTE *)a2 + 3610))
          v30 = 1;
        else
          v30 = 2;
LABEL_45:
        *((_BYTE *)this + 946) = v30;
        break;
      default:
        break;
    }
  }
  if (*((_BYTE *)a2 + 3625))
  {
    if (*(float *)(*((_QWORD *)a2 + 54) + 32) >= *((float *)a2 + 908))
      *((_BYTE *)this + 946) = 1;
  }
}

void md::CompositeLabelPart::updateWithStyle(md::CompositeLabelPart *this, LabelManager *a2)
{
  uint64_t *v3;
  uint64_t *v4;
  float v6;
  uint64_t v7;

  v3 = (uint64_t *)*((_QWORD *)this + 72);
  v4 = (uint64_t *)*((_QWORD *)this + 73);
  if (v3 == v4)
  {
    v6 = *(float *)(**((_QWORD **)this + 4) + 172);
  }
  else
  {
    v6 = -3.4028e38;
    do
    {
      v7 = *v3++;
      (*(void (**)(uint64_t, LabelManager *))(*(_QWORD *)v7 + 72))(v7, a2);
      v6 = fmaxf(v6, (*(float (**)(uint64_t))(*(_QWORD *)v7 + 240))(v7));
    }
    while (v3 != v4);
  }
  *((float *)this + 42) = v6;
}

float md::LabelPart::padding(md::LabelPart *this)
{
  return *((float *)this + 42);
}

float md::ImageLabelPart::padding(md::ImageLabelPart *this)
{
  return *((float *)this + 155);
}

void md::HorizontalTextLabelPart::updateWithStyle(uint64_t **this, md::LabelManager *a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  int v7;
  uint64_t v8;
  int v9;
  float *v10;
  int v11;
  uint64_t v12;
  uint64_t *v13;
  int *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  float v22;
  int v23;
  int v24;

  md::TextLabelPart::updateWithStyle((md::TextLabelPart *)this, a2);
  v3 = this[4];
  v4 = *v3;
  if (*(float *)(*v3 + 236) != 0.0)
  {
    if (*((_BYTE *)this + 562) == 11)
    {
      v5 = *(_QWORD *)(v4 + 312);
      if (!v5)
      {
        v6 = md::LabelStyle::prepareStyleGroup<md::LabelAnnotationStyleGroup>(*v3);
        v5 = *v6;
        *(_QWORD *)(v4 + 312) = *v6;
      }
      v7 = *((unsigned __int8 *)this + 1144);
      v8 = 16;
      if (!*((_BYTE *)this + 1144))
        v8 = 12;
      v9 = *(_DWORD *)(v5 + v8);
      v10 = (float *)(v5 + 8);
      v11 = *(_DWORD *)(v5 + 20);
    }
    else
    {
      v12 = *(_QWORD *)(v4 + 272);
      if (*((_BYTE *)this + 1144))
      {
        if (!v12)
        {
          v13 = md::LabelStyle::prepareStyleGroup<md::LabelPointStyleGroup>(*v3);
          v12 = *v13;
          *(_QWORD *)(v4 + 272) = *v13;
        }
        v14 = (int *)(v12 + 16);
      }
      else
      {
        if (!v12)
        {
          v15 = md::LabelStyle::prepareStyleGroup<md::LabelPointStyleGroup>(*v3);
          v12 = *v15;
          *(_QWORD *)(v4 + 272) = *v15;
        }
        v14 = (int *)(v12 + 12);
      }
      v9 = *v14;
      v16 = *v3;
      v17 = *(_QWORD *)(*v3 + 272);
      if (v17)
      {
        v11 = *(_DWORD *)(v17 + 20);
      }
      else
      {
        v18 = md::LabelStyle::prepareStyleGroup<md::LabelPointStyleGroup>(*v3);
        v19 = *v18;
        *(_QWORD *)(v16 + 272) = *v18;
        v20 = *v3;
        v17 = *(_QWORD *)(*v3 + 272);
        v11 = *(_DWORD *)(v19 + 20);
        if (!v17)
        {
          v21 = md::LabelStyle::prepareStyleGroup<md::LabelPointStyleGroup>(*v3);
          v17 = *v21;
          *(_QWORD *)(v20 + 272) = *v21;
        }
      }
      v10 = (float *)(v17 + 8);
      v7 = *((unsigned __int8 *)this + 1144);
    }
    v22 = *v10;
    v23 = *((_DWORD *)this + 287);
    if (v7)
      v24 = 8;
    else
      v24 = 18;
    if (v23 == 1)
      v23 = v24;
    *((_DWORD *)this + 287) = v9;
    if (v9 != 1)
      v24 = v9;
    if (v24 != v23)
      *((_BYTE *)this + 1027) = 1;
    if (*((_DWORD *)this + 288) != v11)
    {
      *((_DWORD *)this + 288) = v11;
      *((_BYTE *)this + 1027) = 1;
    }
    if (*((float *)this + 241) != v22)
    {
      *((float *)this + 241) = v22;
      *((_BYTE *)this + 1027) = 1;
    }
    *((_BYTE *)this + 1029) = *(_BYTE *)(*v3 + 240);
  }
}

float *md::CurvedTextLabelPart::updateWithStyle(md::CurvedTextLabelPart *this, md::LabelManager *a2)
{
  uint64_t *v4;
  float *result;
  _BOOL8 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  float v10;
  uint64_t v11;
  uint64_t v12;
  float v13;
  float v14;
  uint64_t v15;
  int v16;
  int v17;
  uint64_t v18;
  BOOL v19;
  float v20;

  md::TextLabelPart::updateWithStyle(this, a2);
  v4 = (uint64_t *)*((_QWORD *)this + 4);
  result = (float *)*v4;
  v6 = *((unsigned __int8 *)this + 864) == 1;
  v7 = *v4 + 280;
  if (*((_BYTE *)this + 864) == 1)
    v8 = 6;
  else
    v8 = 0;
  v9 = *(_QWORD *)(v7 + 8 * (*((_BYTE *)this + 864) == 1));
  if (v9)
  {
    if (vabds_f32(*(float *)(v9 + 8), result[26]) >= 0.01)
    {
      result = (float *)md::LabelStyle::updateStyleGroup<md::LabelTextStyleGroup>((uint64_t)result, v9, v8);
      v9 = *(_QWORD *)(v7 + 8 * v6);
    }
  }
  else
  {
    result = (float *)md::LabelStyle::prepareStyleGroup<md::LabelTextStyleGroup>((uint64_t)result, v8);
    v9 = (uint64_t)result;
    *(_QWORD *)(v7 + 8 * v6) = result;
  }
  v10 = *((float *)this + 157);
  if (v10 != 0.0)
  {
    v11 = *(_QWORD *)v9;
    v12 = *v4;
    v14 = *(float *)(*v4 + 148);
    v13 = *(float *)(*v4 + 152);
    *((float *)this + 244) = v13;
    *((_BYTE *)this + 1138) = *(_BYTE *)(v12 + 240);
    *((float *)this + 242) = v14 + (float)(v10 * 0.33);
    *((float *)this + 243) = (float)(*((float *)a2 + 44) * v13) + (float)(*(float *)(v11 + 100) * 0.33);
    v15 = *(_QWORD *)(v12 + 264);
    if (!v15)
    {
      result = (float *)md::LabelStyle::prepareStyleGroup<md::LabelLineStyleGroup>(v12);
      v15 = *(_QWORD *)result;
      *(_QWORD *)(v12 + 264) = *(_QWORD *)result;
      v12 = *v4;
    }
    *((_DWORD *)this + 287) = *(_DWORD *)(v15 + 52);
    v16 = *((unsigned __int8 *)this + 1455);
    v17 = *(unsigned __int8 *)(v12 + 248);
    if (v17 == 32 && (v18 = **(_QWORD **)(*((_QWORD *)this + 72) + 16), *(_BYTE *)(v18 + 128) == 2))
    {
      v19 = *(_BYTE *)(v18 + 130) != 0;
      *((_BYTE *)this + 1455) = v19;
      if (!v16)
      {
LABEL_18:
        if (!*((_BYTE *)this + 1457))
        {
          v20 = *(float *)(*((_QWORD *)this + 4) + 16);
          if (vabds_f32(v20, *((float *)this + 351)) > 0.5)
          {
            *((float *)this + 351) = v20;
            return (float *)(*(uint64_t (**)(md::CurvedTextLabelPart *))(*(_QWORD *)this + 552))(this);
          }
        }
        return result;
      }
    }
    else
    {
      v19 = 0;
      *((_BYTE *)this + 1455) = 0;
      if (!v16)
        goto LABEL_18;
    }
    if (!v19)
      *((_BYTE *)this + 1452) = v17;
    goto LABEL_18;
  }
  return result;
}

float md::TextLabelPart::updateWithStyle(md::TextLabelPart *this, md::LabelManager *a2)
{
  uint64_t *v4;
  int v5;
  _BOOL8 v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  uint64_t v25;
  _BOOL8 v26;
  uint64_t v27;
  uint64_t v28;
  float *v29;
  uint64_t v30;
  float v31;
  int v32;
  unsigned int v33;
  float v34;
  float *v35;
  float result;
  __int128 v37;

  v4 = (uint64_t *)*((_QWORD *)this + 4);
  if (*((_QWORD *)this + 76))
  {
    v5 = *((unsigned __int8 *)this + 864);
    v6 = v5 == 1;
    v7 = *v4 + 408;
    v8 = (uint64_t *)(v7 + 16 * v6);
    v9 = *v8;
    if (!*v8)
    {
      if (v5 == 1)
        v10 = 6;
      else
        v10 = 0;
      md::LabelStyle::prepareDisplayTextStyleGroup(&v37, *v4, v5 == 1, v10);
      v11 = v7 + 16 * v6;
      v12 = v37;
      v37 = 0uLL;
      v13 = *(std::__shared_weak_count **)(v11 + 8);
      *(_OWORD *)v11 = v12;
      if (v13)
      {
        p_shared_owners = (unint64_t *)&v13->__shared_owners_;
        do
          v15 = __ldaxr(p_shared_owners);
        while (__stlxr(v15 - 1, p_shared_owners));
        if (!v15)
        {
          ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
          std::__shared_weak_count::__release_weak(v13);
        }
      }
      v16 = (std::__shared_weak_count *)*((_QWORD *)&v37 + 1);
      if (*((_QWORD *)&v37 + 1))
      {
        v17 = (unint64_t *)(*((_QWORD *)&v37 + 1) + 8);
        do
          v18 = __ldaxr(v17);
        while (__stlxr(v18 - 1, v17));
        if (!v18)
        {
          ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
          std::__shared_weak_count::__release_weak(v16);
        }
      }
      v9 = *v8;
    }
    v19 = *(_QWORD *)(v7 + 16 * v6 + 8);
    if (v19)
    {
      v20 = (unint64_t *)(v19 + 8);
      do
        v21 = __ldxr(v20);
      while (__stxr(v21 + 1, v20));
    }
    *((_QWORD *)this + 76) = v9;
    v22 = (std::__shared_weak_count *)*((_QWORD *)this + 77);
    *((_QWORD *)this + 77) = v19;
    if (v22)
    {
      v23 = (unint64_t *)&v22->__shared_owners_;
      do
        v24 = __ldaxr(v23);
      while (__stlxr(v24 - 1, v23));
      if (!v24)
      {
        ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
        std::__shared_weak_count::__release_weak(v22);
      }
    }
  }
  v25 = *v4;
  v26 = *((unsigned __int8 *)this + 864) == 1;
  v27 = *v4 + 280;
  if (*((_BYTE *)this + 864) == 1)
    v28 = 6;
  else
    v28 = 0;
  v29 = *(float **)(v27 + 8 * (*((_BYTE *)this + 864) == 1));
  if (v29)
  {
    if (vabds_f32(v29[2], *(float *)(v25 + 104)) >= 0.01)
    {
      md::LabelStyle::updateStyleGroup<md::LabelTextStyleGroup>(v25, (uint64_t)v29, v28);
      v29 = *(float **)(v27 + 8 * v26);
    }
  }
  else
  {
    v29 = (float *)md::LabelStyle::prepareStyleGroup<md::LabelTextStyleGroup>(v25, v28);
    *(_QWORD *)(v27 + 8 * v26) = v29;
  }
  v30 = *(_QWORD *)v29;
  v31 = *(float *)(*(_QWORD *)v29 + 36);
  v32 = 0;
  *((float *)this + 164) = fminf(fmaxf(*((float *)a2 + 44) * *(float *)(*(_QWORD *)v29 + 32), 0.0), truncf(*(float *)(*(_QWORD *)(*((_QWORD *)a2 + 29) + 8) + 176)* (float)*(unsigned int *)(*((_QWORD *)a2 + 29) + 52)));
  *(_DWORD *)((char *)this + 710) = *(_DWORD *)(v30 + 16);
  if (*(_BYTE *)(*((_QWORD *)a2 + 54) + 10))
  {
    LOBYTE(v33) = 0;
  }
  else
  {
    v33 = *(unsigned __int8 *)(*v4 + 243);
    if (v33 >= 5)
      LOBYTE(v33) = 0;
  }
  *((_BYTE *)this + 697) = v33;
  v34 = truncf(*(float *)(*(_QWORD *)(*((_QWORD *)a2 + 29) + 8) + 176)* (float)*(unsigned int *)(*((_QWORD *)a2 + 29) + 52));
  *((float *)this + 165) = fminf(fmaxf(*((float *)a2 + 44) * v31, -v34), v34);
  *(_DWORD *)((char *)this + 706) = *(_DWORD *)(v30 + 20);
  *((float *)this + 161) = fminf(fmaxf(*(float *)(v30 + 104), 0.0), truncf(*(float *)(*(_QWORD *)(*((_QWORD *)a2 + 29) + 8) + 176)* (float)*(unsigned int *)(*((_QWORD *)a2 + 29) + 52)));
  *(_DWORD *)((char *)this + 702) = *(_DWORD *)(v30 + 12);
  *((float *)this + 166) = truncf(*(float *)(*(_QWORD *)(*((_QWORD *)a2 + 29) + 8) + 176)* (float)*(unsigned int *)(*((_QWORD *)a2 + 29) + 52));
  *((float *)this + 167) = fminf(fmaxf(*(float *)(v30 + 40), 0.0), 1.0);
  *((_DWORD *)this + 169) = *(_DWORD *)(v30 + 48);
  *((_DWORD *)this + 170) = *(_DWORD *)(v30 + 52);
  *((_DWORD *)this + 171) = *(_DWORD *)(v30 + 56);
  if (*((_BYTE *)this + 872))
    v32 = *(_DWORD *)(v30 + 96);
  *((_DWORD *)this + 156) = v32;
  *((_DWORD *)this + 168) = *(_DWORD *)(*v4 + 172);
  *((_BYTE *)this + 928) = *(_BYTE *)(v30 + 60);
  (*(void (**)(__int128 *__return_ptr, md::TextLabelPart *))(*(_QWORD *)this + 896))(&v37, this);
  *(_DWORD *)((char *)this + 698) = v37;
  (*(void (**)(__int128 *__return_ptr, md::TextLabelPart *, _QWORD, uint64_t *))(*(_QWORD *)this + 904))(&v37, this, *((unsigned __int8 *)this + 928), v4);
  *(_DWORD *)((char *)this + 714) = v37;
  if (*((_BYTE *)this + 856))
    v35 = (float *)((char *)this + 860);
  else
    v35 = (float *)(v30 + 100);
  *((float *)this + 157) = fmaxf(*v35, 0.0);
  *((_DWORD *)this + 42) = *((_DWORD *)this + 168);
  result = *(float *)(*v4 + 176);
  *((float *)this + 43) = result;
  return result;
}

uint64_t md::TextLabelPart::textColorForSource@<X0>(uint64_t result@<X0>, int a2@<W1>, uint64_t *a3@<X2>, _DWORD *a4@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  _DWORD *v7;
  _BOOL8 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = *a3;
  if (a2 == 4)
  {
    v6 = *(_QWORD *)(v5 + 272);
    if (!v6)
    {
      result = (uint64_t)md::LabelStyle::prepareStyleGroup<md::LabelPointStyleGroup>(*a3);
      v6 = *(_QWORD *)result;
      *(_QWORD *)(v5 + 272) = *(_QWORD *)result;
    }
    v7 = (_DWORD *)(v6 + 65);
  }
  else
  {
    v8 = *(unsigned __int8 *)(result + 864) == 1;
    v9 = v5 + 280;
    if (*(_BYTE *)(result + 864) == 1)
      v10 = 6;
    else
      v10 = 0;
    v11 = *(_QWORD *)(v9 + 8 * (*(_BYTE *)(result + 864) == 1));
    if (v11)
    {
      if (vabds_f32(*(float *)(v11 + 8), *(float *)(v5 + 104)) >= 0.01)
      {
        result = md::LabelStyle::updateStyleGroup<md::LabelTextStyleGroup>(v5, v11, v10);
        v11 = *(_QWORD *)(v9 + 8 * v8);
      }
    }
    else
    {
      result = md::LabelStyle::prepareStyleGroup<md::LabelTextStyleGroup>(v5, v10);
      v11 = result;
      *(_QWORD *)(v9 + 8 * v8) = result;
    }
    v7 = (_DWORD *)(*(_QWORD *)v11 + 8);
  }
  *a4 = *v7;
  return result;
}

uint64_t md::HorizontalTextLabelPart::textColorForSource@<X0>(uint64_t result@<X0>, int a2@<W1>, uint64_t *a3@<X2>, _DWORD *a4@<X8>)
{
  _DWORD *v5;
  uint64_t v6;
  uint64_t v7;
  _BOOL8 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if ((a2 - 5) <= 1)
  {
    if (*(_BYTE *)(result + 1166) && *(_BYTE *)(result + 1160))
    {
      v5 = (_DWORD *)(result + 1156);
      goto LABEL_18;
    }
    v6 = *a3;
    goto LABEL_10;
  }
  v6 = *a3;
  if (a2 != 4)
  {
LABEL_10:
    v8 = *(unsigned __int8 *)(result + 864) == 1;
    v9 = v6 + 280;
    if (*(_BYTE *)(result + 864) == 1)
      v10 = 6;
    else
      v10 = 0;
    v11 = *(_QWORD *)(v9 + 8 * (*(_BYTE *)(result + 864) == 1));
    if (v11)
    {
      if (vabds_f32(*(float *)(v11 + 8), *(float *)(v6 + 104)) >= 0.01)
      {
        result = md::LabelStyle::updateStyleGroup<md::LabelTextStyleGroup>(v6, v11, v10);
        v11 = *(_QWORD *)(v9 + 8 * v8);
      }
    }
    else
    {
      result = md::LabelStyle::prepareStyleGroup<md::LabelTextStyleGroup>(v6, v10);
      v11 = result;
      *(_QWORD *)(v9 + 8 * v8) = result;
    }
    v5 = (_DWORD *)(*(_QWORD *)v11 + 8);
    goto LABEL_18;
  }
  v7 = *(_QWORD *)(v6 + 272);
  if (!v7)
  {
    result = (uint64_t)md::LabelStyle::prepareStyleGroup<md::LabelPointStyleGroup>(*a3);
    v7 = *(_QWORD *)result;
    *(_QWORD *)(v6 + 272) = *(_QWORD *)result;
  }
  v5 = (_DWORD *)(v7 + 65);
LABEL_18:
  *a4 = *v5;
  return result;
}

uint64_t md::PointIconLabelPart::updateWithStyle(md::PointIconLabelPart *this, md::LabelManager *a2)
{
  uint64_t result;

  md::ImageLabelPart::updateWithStyle(this, a2);
  result = *((_QWORD *)this + 104);
  if (result)
    return (*(uint64_t (**)(uint64_t, md::LabelManager *))(*(_QWORD *)result + 72))(result, a2);
  return result;
}

uint64_t *md::ImageLabelPart::updateWithStyle(md::ImageLabelPart *this, md::LabelManager *a2)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  float v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t *result;
  float v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  float *v20;
  uint64_t v21;
  float v22;
  float v23;
  float v24;
  float v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v4 = (uint64_t *)*((_QWORD *)this + 4);
  v5 = *v4;
  v6 = *(_QWORD *)(*v4 + 296);
  if (!v6)
  {
    v7 = (uint64_t *)md::LabelStyle::prepareStyleGroup<md::LabelIconStyleGroup>(*v4, 0);
    v6 = *v7;
    *(_QWORD *)(v5 + 296) = *v7;
    v5 = *v4;
  }
  *((float *)this + 143) = (*(float (**)(md::ImageLabelPart *, uint64_t))(*(_QWORD *)this + 904))(this, v5);
  if (*((_BYTE *)this + 632))
    v8 = *(float *)(v6 + 16);
  else
    v8 = 1.0;
  *((float *)this + 144) = v8;
  *((_DWORD *)this + 145) = *(_DWORD *)(v6 + 20);
  v9 = *v4;
  if (*(_BYTE *)(*((_QWORD *)a2 + 54) + 10))
  {
    LOBYTE(v10) = 0;
  }
  else
  {
    v10 = *(unsigned __int8 *)(v9 + 243);
    if (v10 >= 5)
      LOBYTE(v10) = 0;
  }
  *((_BYTE *)this + 592) = v10;
  result = (uint64_t *)(*(uint64_t (**)(md::ImageLabelPart *, uint64_t))(*(_QWORD *)this + 896))(this, v9);
  *((_BYTE *)this + 594) = (_BYTE)result;
  v12 = *(float *)(v6 + 8);
  if (v12 != *((float *)this + 155))
  {
    *((float *)this + 155) = v12;
    *((_WORD *)this + 314) = 257;
  }
  v13 = *v4;
  v14 = *(_QWORD *)(*v4 + 296);
  if (!v14)
  {
    result = (uint64_t *)md::LabelStyle::prepareStyleGroup<md::LabelIconStyleGroup>(*v4, 0);
    v14 = *result;
    *(_QWORD *)(v13 + 296) = *result;
    v13 = *v4;
  }
  if (*(float *)(v14 + 12) != *((float *)this + 156))
  {
    v15 = *(_QWORD *)(v13 + 296);
    if (!v15)
    {
      result = (uint64_t *)md::LabelStyle::prepareStyleGroup<md::LabelIconStyleGroup>(v13, 0);
      v15 = *result;
      *(_QWORD *)(v13 + 296) = *result;
      v13 = *v4;
    }
    *((_DWORD *)this + 156) = *(_DWORD *)(v15 + 12);
    *((_WORD *)this + 314) = 257;
  }
  v16 = *(_QWORD *)(v13 + 296);
  if (!v16)
  {
    result = (uint64_t *)md::LabelStyle::prepareStyleGroup<md::LabelIconStyleGroup>(v13, 0);
    v16 = *result;
    *(_QWORD *)(v13 + 296) = *result;
    v13 = *v4;
  }
  if (*((unsigned __int8 *)this + 631) != *(unsigned __int8 *)(v16 + 95))
  {
    v17 = *(_QWORD *)(v13 + 296);
    if (!v17)
    {
      result = (uint64_t *)md::LabelStyle::prepareStyleGroup<md::LabelIconStyleGroup>(v13, 0);
      v17 = *result;
      *(_QWORD *)(v13 + 296) = *result;
      v13 = *v4;
    }
    *((_BYTE *)this + 631) = *(_BYTE *)(v17 + 95);
    *((_WORD *)this + 314) = 257;
  }
  v18 = *(_QWORD *)(v13 + 16);
  v19 = *((unsigned __int8 *)this + 562);
  switch(v19)
  {
    case 2:
      v24 = *(float *)(v18 + 20 * *(unsigned __int8 *)(v13 + 93) + 16);
      break;
    case 3:
      v25 = 1.0;
      goto LABEL_34;
    case 10:
      v20 = (float *)(v18 + 20 * *(unsigned __int8 *)(v13 + 93) + 8);
      v21 = *(_QWORD *)(v13 + 312);
      if (v21)
      {
        v22 = fminf(*(float *)(v21 + 40), *v20);
        v23 = *(float *)(v21 + 36);
      }
      else
      {
        result = md::LabelStyle::prepareStyleGroup<md::LabelAnnotationStyleGroup>(v13);
        v26 = *result;
        *(_QWORD *)(v13 + 312) = *result;
        v27 = *v4;
        v28 = *(_QWORD *)(*v4 + 312);
        v22 = fminf(*(float *)(v26 + 40), *v20);
        if (!v28)
        {
          result = md::LabelStyle::prepareStyleGroup<md::LabelAnnotationStyleGroup>(*v4);
          v28 = *result;
          *(_QWORD *)(v27 + 312) = *result;
        }
        v23 = *(float *)(v28 + 36);
      }
      goto LABEL_33;
    default:
      v24 = *(float *)(v18 + 20 * *(unsigned __int8 *)(v13 + 93) + 8);
      break;
  }
  v22 = *(float *)(v6 + 36);
  v23 = fminf(*(float *)(v6 + 40), v24);
LABEL_33:
  v25 = v23 * v22;
LABEL_34:
  if (v25 != *((float *)this + 147))
  {
    *((float *)this + 147) = v25;
    *((_BYTE *)this + 628) = 1;
  }
  return result;
}

float md::ImageLabelPart::styleBrightness(md::ImageLabelPart *this, const md::LabelStyle *a2)
{
  uint64_t v2;
  uint64_t *v4;

  v2 = *((_QWORD *)a2 + 37);
  if (!v2)
  {
    v4 = (uint64_t *)md::LabelStyle::prepareStyleGroup<md::LabelIconStyleGroup>((uint64_t)a2, 0);
    v2 = *v4;
    *((_QWORD *)a2 + 37) = *v4;
  }
  return *(float *)(v2 + 28);
}

uint64_t md::ImageLabelPart::styleLayer(uint64_t a1, uint64_t a2)
{
  return *(char *)(a2 + 240);
}

uint64_t md::CompositeLabelPart::setLabel(md::CompositeLabelPart *this, md::Label *a2)
{
  uint64_t result;
  uint64_t *v5;
  uint64_t *i;
  uint64_t v7;

  *((_QWORD *)this + 2) = a2;
  result = (*(uint64_t (**)(md::CompositeLabelPart *, char *))(*(_QWORD *)this + 24))(this, (char *)a2 + 376);
  v5 = (uint64_t *)*((_QWORD *)this + 72);
  for (i = (uint64_t *)*((_QWORD *)this + 73);
        v5 != i;
        result = (*(uint64_t (**)(uint64_t, md::Label *))(*(_QWORD *)v7 + 16))(v7, a2))
  {
    v7 = *v5++;
  }
  return result;
}

uint64_t md::LabelPart::setLabel(md::LabelPart *this, md::Label *a2)
{
  *((_QWORD *)this + 2) = a2;
  return (*(uint64_t (**)(md::LabelPart *, char *))(*(_QWORD *)this + 24))(this, (char *)a2 + 376);
}

_QWORD *md::CompositeLabelPart::setLabelLayoutState(_QWORD *result, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *i;
  uint64_t v5;

  result[4] = a2;
  v2 = (uint64_t *)result[72];
  for (i = (uint64_t *)result[73];
        v2 != i;
        result = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 24))(v5, a2))
  {
    v5 = *v2++;
  }
  return result;
}

uint64_t md::LabelPart::setLabelLayoutState(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 32) = a2;
  return result;
}

uint64_t md::IconLabelPart::setLabel(md::IconLabelPart *this, md::Label *a2)
{
  uint64_t result;

  *((_QWORD *)this + 2) = a2;
  result = (*(uint64_t (**)(md::IconLabelPart *, char *))(*(_QWORD *)this + 24))(this, (char *)a2 + 376);
  *((_BYTE *)this + 630) = *(_BYTE *)(*((_QWORD *)this + 2) + 1221);
  if (*(_BYTE *)(*((_QWORD *)this + 4) + 77))
    *((_BYTE *)this + 664) = 0;
  return result;
}

uint64_t md::UniLineLabelFeature::newRootPart(md::LabelFeature *a1, uint64_t a2, uint64_t a3, md::LabelStyle *a4, _BYTE *a5)
{
  uint64_t v5;
  unsigned int v6;
  _QWORD *v7;
  unsigned int v8;
  BOOL v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  std::__shared_weak_count *v21;

  v5 = *((_QWORD *)a1 + 29);
  if (!v5)
    goto LABEL_12;
  v6 = *(_DWORD *)(a3 + 48);
  v7 = (_QWORD *)((char *)a1 + 232);
  do
  {
    v8 = *(_DWORD *)(v5 + 32);
    v9 = v8 >= v6;
    if (v8 >= v6)
      v10 = (uint64_t *)v5;
    else
      v10 = (uint64_t *)(v5 + 8);
    if (v9)
      v7 = (_QWORD *)v5;
    v5 = *v10;
  }
  while (*v10);
  if (v7 == (_QWORD *)((char *)a1 + 232) || v6 < *((_DWORD *)v7 + 8))
  {
LABEL_12:
    v11 = 0;
    v20 = 0;
    v21 = 0;
    return v11;
  }
  v13 = v7[5];
  v14 = (std::__shared_weak_count *)v7[6];
  v20 = v13;
  v21 = v14;
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldxr(p_shared_owners);
    while (__stxr(v16 + 1, p_shared_owners));
  }
  if (!v13)
  {
LABEL_20:
    v11 = 0;
    if (!v14)
      return v11;
    goto LABEL_29;
  }
  switch(*(_BYTE *)(v13 + 9))
  {
    case 1:
      v17 = (uint64_t)md::UniLineLabelFeature::newTextPart(a1, a2, a3, (uint64_t)a4, a5, &v20);
      break;
    case 2:
      v17 = (uint64_t)md::UniLineLabelFeature::newTextAndShieldPart(a1, a2, a3, (uint64_t)a4, a5, &v20);
      break;
    case 3:
      v17 = md::UniLineLabelFeature::newShieldPart((uint64_t)a1, a2, a3, (uint64_t)a4, &v20);
      break;
    case 4:
    case 5:
      v17 = md::UniLineLabelFeature::newArrowPart(a2, a3, a4, &v20, *(_BYTE *)(v13 + 9) == 4);
      break;
    case 6:
      v17 = md::UniLineLabelFeature::newAnnotationPart((uint64_t *)a1, a2, a3, a5, &v20);
      break;
    case 7:
      v17 = (uint64_t)md::UniLineLabelFeature::newTextAndAnnotationPart(a1, a2, a3, (uint64_t)a4, a5, &v20);
      break;
    case 8:
      v17 = (uint64_t)md::UniLineLabelFeature::newTextAndTravelArrowPart(a1, a2, a3, a4, a5, &v20);
      break;
    default:
      goto LABEL_20;
  }
  v11 = v17;
  if (v14)
  {
LABEL_29:
    v18 = (unint64_t *)&v14->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  return v11;
}

void sub_19F113A24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t md::CaptionedIconLabelPart::initAlternatePlacements(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  char *v10;
  char *v11;
  int v12;
  int v13;
  BOOL v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  BOOL v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __int16 v28;
  uint64_t v29;
  uint64_t v30;
  int64x2_t *v31;
  unsigned __int8 *v32;
  int v33;
  unsigned __int8 *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  BOOL v38;
  char v39;
  char *v40;
  char *v41;
  int v42;
  int v43;
  BOOL v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unsigned __int8 v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  __int16 v58;
  uint64_t v59;
  unint64_t v60;
  int64x2_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  __int16 v66;
  uint64_t v67;

  *(_QWORD *)(this + 808) = *(_QWORD *)(this + 800);
  if (!*(_BYTE *)(this + 921))
    return this;
  v1 = this;
  if (*(_BYTE *)(this + 832) != 1)
    return this;
  v2 = *(unsigned __int8 *)(this + 840);
  if (v2 == 10)
    return this;
  v3 = gss::LabelPositionToMask(*(unsigned __int8 *)(this + 840));
  v4 = v3;
  v5 = *(unsigned __int16 *)(v1 + 850);
  if (v5 == 0x8000)
  {
    v5 = 170;
    if ((v3 & 0xAA) == 0)
    {
      if (*(_BYTE *)(v1 + 925) || *(_BYTE *)(v1 + 920))
        v5 = 255;
      else
        v5 = 0;
    }
  }
  v6 = *(unsigned __int8 *)(v1 + 837);
  if (v6 == 2)
    v7 = v5;
  else
    v7 = v5;
  if (*(unsigned __int8 *)(v1 + 832) != v6)
  {
    v8 = *(unsigned __int8 *)(v1 + 838);
    goto LABEL_19;
  }
  v8 = *(unsigned __int8 *)(v1 + 838);
  if (*(unsigned __int8 *)(v1 + 833) != v8)
    goto LABEL_19;
  v9 = *(unsigned __int8 *)(v1 + 835);
  if (v9 != *(unsigned __int8 *)(v1 + 840))
  {
    v8 = *(unsigned __int8 *)(v1 + 833);
    goto LABEL_19;
  }
  if (v9 != 10)
  {
    v8 = *(unsigned __int8 *)(v1 + 833);
    goto LABEL_45;
  }
  v8 = *(unsigned __int8 *)(v1 + 833);
  if (*(unsigned __int8 *)(v1 + 836) != *(unsigned __int8 *)(v1 + 841))
  {
LABEL_19:
    v10 = (char *)&diagonalDownLabelAnchors;
    switch(v8)
    {
      case 1:
      case 16:
        goto LABEL_25;
      case 4:
        v10 = (char *)&diagonalUpLabelAnchors;
        goto LABEL_21;
      case 8:
LABEL_21:
        v11 = &v10[2 * v2];
        v12 = *v11;
        v13 = v11[1];
        if (v12)
          v14 = v13 == 0;
        else
          v14 = 1;
        if (v14)
          break;
LABEL_25:
        v15 = *(_QWORD *)(v1 + 808);
        v16 = *(_QWORD *)(v1 + 816);
        if (v15 >= v16)
        {
          v17 = *(_QWORD *)(v1 + 800);
          v18 = 0xCCCCCCCCCCCCCCCDLL * (v15 - v17);
          v19 = v18 + 1;
          if (v18 + 1 >= 0x3333333333333334)
LABEL_96:
            abort();
          v20 = 0xCCCCCCCCCCCCCCCDLL * (v16 - v17);
          if (2 * v20 > v19)
            v19 = 2 * v20;
          v21 = v20 >= 0x1999999999999999;
          v22 = 0x3333333333333333;
          if (!v21)
            v22 = v19;
          if (v22)
          {
            v23 = 5 * v22;
            v24 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v1 + 824) + 16))(*(_QWORD *)(v1 + 824), 5 * v22, 1);
            v25 = v24 + 5 * v18;
            v22 = v24 + v23;
            if (v24)
            {
              *(_BYTE *)v25 = *(_BYTE *)(v1 + 837);
              *(_BYTE *)(v25 + 1) = *(_BYTE *)(v1 + 838);
              *(_BYTE *)(v25 + 2) = 0;
              *(_WORD *)(v25 + 3) = *(_WORD *)(v1 + 840);
            }
          }
          else
          {
            v25 = 5 * v18;
          }
          v2 = v25 + 5;
          v26 = *(_QWORD *)(v1 + 808);
          v27 = *(_QWORD *)(v1 + 800);
          if (v26 != v27)
          {
            do
            {
              v28 = *(_WORD *)(v26 - 5);
              v26 -= 5;
              *(_WORD *)(v25 - 5) = v28;
              v25 -= 5;
              *(_BYTE *)(v25 + 2) = 0;
              *(_WORD *)(v25 + 3) = *(_WORD *)(v26 + 3);
            }
            while (v26 != v27);
            v26 = *(_QWORD *)(v1 + 800);
          }
          *(_QWORD *)(v1 + 800) = v25;
          *(_QWORD *)(v1 + 808) = v2;
          v29 = *(_QWORD *)(v1 + 816);
          *(_QWORD *)(v1 + 816) = v22;
          if (v26)
            (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v1 + 824) + 40))(*(_QWORD *)(v1 + 824), v26, v29 - v26);
        }
        else
        {
          if (v15)
          {
            *(_BYTE *)v15 = v6;
            *(_BYTE *)(v15 + 1) = v8;
            *(_BYTE *)(v15 + 2) = 0;
            *(_WORD *)(v15 + 3) = *(_WORD *)(v1 + 840);
          }
          v2 = v15 + 5;
        }
        *(_QWORD *)(v1 + 808) = v2;
        v8 = *(unsigned __int8 *)(v1 + 838);
        break;
      default:
        break;
    }
  }
LABEL_45:
  v30 = 0;
  v31 = (int64x2_t *)(v1 + 808);
  v32 = (unsigned __int8 *)&horizontalPositionsInPreferredOrder;
  v33 = v7 & ~v4;
  if (v8 == 4)
    v32 = (unsigned __int8 *)&diagonalUpPositionsInPreferredOrder;
  if (v8 == 8)
    v34 = (unsigned __int8 *)&diagonalDownPositionsInPreferredOrder;
  else
    v34 = v32;
  v35 = (char *)&diagonalDownLabelAnchors;
  do
  {
    v37 = v34[v30];
    if (*(_BYTE *)(v1 + 930))
      v38 = v37 > 9;
    else
      v38 = 1;
    if (!v38)
      LODWORD(v37) = mirroredHorizontalPositions[v37];
    this = gss::LabelPositionToMask(v37);
    if ((v33 & this) != 0 && (_DWORD)v37 != *(unsigned __int8 *)(v1 + 847))
    {
      v39 = *(_BYTE *)(v1 + 838);
      v40 = v35;
      switch(v39)
      {
        case 1:
        case 16:
          goto LABEL_67;
        case 4:
          v40 = (char *)&diagonalUpLabelAnchors;
          goto LABEL_63;
        case 8:
LABEL_63:
          v41 = &v40[2 * v37];
          v42 = *v41;
          v43 = v41[1];
          if (v42)
            v44 = v43 == 0;
          else
            v44 = 1;
          if (v44)
            break;
LABEL_67:
          v45 = *(_QWORD *)(v1 + 808);
          v46 = *(_QWORD *)(v1 + 816);
          if (v45 >= v46)
          {
            v47 = *(_QWORD *)(v1 + 800);
            v48 = 0xCCCCCCCCCCCCCCCDLL * (v45 - v47);
            v49 = v48 + 1;
            if (v48 + 1 >= 0x3333333333333334)
              goto LABEL_96;
            if (0x999999999999999ALL * (v46 - v47) > v49)
              v49 = 0x999999999999999ALL * (v46 - v47);
            if (0xCCCCCCCCCCCCCCCDLL * (v46 - v47) >= 0x1999999999999999)
              v49 = 0x3333333333333333;
            if (v49)
            {
              v50 = v35;
              v51 = v2;
              v52 = 5 * v49;
              this = (*(uint64_t (**)(_QWORD, unint64_t, uint64_t))(**(_QWORD **)(v1 + 824) + 16))(*(_QWORD *)(v1 + 824), 5 * v49, 1);
              v53 = this + 5 * v48;
              v49 = this + v52;
              if (this)
              {
                v54 = *(_BYTE *)(v1 + 838);
                *(_BYTE *)v53 = *(_BYTE *)(v1 + 837);
                *(_WORD *)(v53 + 1) = v54;
                *(_WORD *)(v53 + 3) = v37;
              }
              v2 = v51;
              v35 = v50;
              v31 = (int64x2_t *)(v1 + 808);
            }
            else
            {
              v53 = v45 - v47;
            }
            v55 = *(_QWORD *)(v1 + 808);
            v56 = *(_QWORD *)(v1 + 800);
            v57 = v53;
            if (v55 != v56)
            {
              do
              {
                v58 = *(_WORD *)(v55 - 5);
                v55 -= 5;
                *(_WORD *)(v57 - 5) = v58;
                v57 -= 5;
                *(_BYTE *)(v57 + 2) = 0;
                *(_WORD *)(v57 + 3) = *(_WORD *)(v55 + 3);
              }
              while (v55 != v56);
              v55 = *(_QWORD *)(v1 + 800);
            }
            v36 = v53 + 5;
            *(_QWORD *)(v1 + 800) = v57;
            *(_QWORD *)(v1 + 808) = v53 + 5;
            v59 = *(_QWORD *)(v1 + 816);
            *(_QWORD *)(v1 + 816) = v49;
            if (v55)
              this = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v1 + 824) + 40))(*(_QWORD *)(v1 + 824), v55, v59 - v55);
          }
          else
          {
            if (v45)
            {
              *(_BYTE *)v45 = *(_BYTE *)(v1 + 837);
              *(_BYTE *)(v45 + 1) = v39;
              *(_BYTE *)(v45 + 2) = 0;
              *(_WORD *)(v45 + 3) = v37;
            }
            v36 = v45 + 5;
          }
          v31->i64[0] = v36;
          break;
        default:
          break;
      }
    }
    ++v30;
  }
  while (v30 != 9);
  v60 = *(_QWORD *)(v1 + 800);
  v61 = vsubq_s64(*v31, vdupq_n_s64(v60));
  v62 = 0xCCCCCCCCCCCCCCCDLL * v61.i64[0];
  if (0xCCCCCCCCCCCCCCCDLL * v61.i64[1] > 0xCCCCCCCCCCCCCCCDLL * v61.i64[0])
  {
    if (v31->i64[0] == v60)
    {
      v64 = v61.i64[0];
      v65 = v61.i64[0];
    }
    else
    {
      this = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v1 + 824) + 16))(*(_QWORD *)(v1 + 824), v61.i64[0], 1);
      v60 = *(_QWORD *)(v1 + 808);
      v63 = *(_QWORD *)(v1 + 800);
      v64 = this + 5 * v62;
      v65 = v64;
      if (v60 != v63)
      {
        do
        {
          v66 = *(_WORD *)(v60 - 5);
          v60 -= 5;
          *(_WORD *)(v65 - 5) = v66;
          v65 -= 5;
          *(_BYTE *)(v65 + 2) = 0;
          *(_WORD *)(v65 + 3) = *(_WORD *)(v60 + 3);
        }
        while (v60 != v63);
        v60 = *(_QWORD *)(v1 + 800);
      }
    }
    *(_QWORD *)(v1 + 800) = v65;
    *(_QWORD *)(v1 + 808) = v64;
    v67 = *(_QWORD *)(v1 + 816);
    *(_QWORD *)(v1 + 816) = v64;
    if (v60)
      return (*(uint64_t (**)(_QWORD, unint64_t, unint64_t))(**(_QWORD **)(v1 + 824) + 40))(*(_QWORD *)(v1 + 824), v60, v67 - v60);
  }
  return this;
}

md::BorderLabelPart *md::UniLineLabelFeature::newTextPart(md::LabelFeature *a1, uint64_t a2, uint64_t a3, uint64_t a4, _BYTE *a5, _QWORD *a6)
{
  float *v12;
  uint64_t v13;
  md::BorderLabelPart *v14;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  unint64_t v20;
  unsigned __int8 *v21;
  unsigned __int8 *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unsigned __int8 *v26;
  unsigned __int8 *v27;
  std::__shared_weak_count *v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  mdm::Allocator *v31;
  char v32;
  char v33;
  __int16 v34;
  uint64_t v35;
  double v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  unint64_t v44;
  unsigned __int8 *v45;
  unsigned __int8 *v46;
  uint64_t v47;
  std::__shared_weak_count *v48;
  unsigned __int8 v49;
  int v50;
  char v51;
  unsigned __int8 v52;
  __int16 v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  float v60;
  float v61;
  uint64_t v62;
  md::TextLabelPart *v63;
  int v64;
  float v65;
  mdm::Allocator *v66;
  uint64_t v67;
  int v68;
  mdm::Allocator *v69;
  uint64_t v70;
  unint64_t v71;
  std::__shared_weak_count *v72;
  unint64_t *v73;
  unint64_t v74;
  std::__shared_weak_count *v75;
  unint64_t *p_shared_owners;
  unint64_t v77;
  std::__shared_weak_count *v78;
  unint64_t *v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  char v83;
  md::TextLabelPart *v84;
  _BYTE v85[3];
  __int16 v86;
  _QWORD v87[2];
  uint64_t v88;
  std::__shared_weak_count *v89;
  uint64_t v90;
  std::__shared_weak_count *v91;
  uint64_t v92;
  std::__shared_weak_count *v93;

  v12 = *(float **)(a4 + 280);
  if (v12)
  {
    if (vabds_f32(v12[2], *(float *)(a4 + 104)) >= 0.01)
    {
      md::LabelStyle::updateStyleGroup<md::LabelTextStyleGroup>(a4, (uint64_t)v12, 0);
      v12 = *(float **)(a4 + 280);
    }
  }
  else
  {
    v12 = (float *)md::LabelStyle::prepareStyleGroup<md::LabelTextStyleGroup>(a4, 0);
    *(_QWORD *)(a4 + 280) = v12;
  }
  v13 = *(_QWORD *)v12;
  if (*(float *)(*(_QWORD *)v12 + 100) == 0.0)
    return 0;
  v16 = *((_QWORD *)a1 + 48);
  v17 = *((_QWORD *)a1 + 49);
  if (v16 == v17)
    return 0;
  v18 = *(_BYTE *)(a3 + 404);
  if (*((_BYTE *)a1 + 449) == 1)
  {
    if ((unint64_t)(v17 - v16) < 0x80)
      return 0;
    v83 = *(_BYTE *)(a3 + 404);
    v19 = *(_QWORD *)v12;
    if (vabds_f32(v12[2], *(float *)(a4 + 104)) >= 0.01)
    {
      md::LabelStyle::updateStyleGroup<md::LabelTextStyleGroup>(a4, (uint64_t)v12, 0);
      v19 = **(_QWORD **)(a4 + 280);
    }
    v20 = (*(uint64_t (**)(md::LabelFeature *))(*(_QWORD *)a1 + 488))(a1);
    v21 = (unsigned __int8 *)*((_QWORD *)a1 + 20);
    v22 = (unsigned __int8 *)*((_QWORD *)a1 + 21);
    if (v20 > 0x6DB6DB6DB6DB6DB7 * ((v22 - v21) >> 3))
    {
      md::LabelFeature::updateTextVector(a1);
      v21 = (unsigned __int8 *)*((_QWORD *)a1 + 20);
      v22 = (unsigned __int8 *)*((_QWORD *)a1 + 21);
    }
    v23 = v19 + 72;
    md::TextDataStore::textDataForZoom(&v92, v21, v22, 0, v19 + 72);
    v24 = v92;
    if (!v92)
    {
      v14 = 0;
      v42 = 1;
      goto LABEL_80;
    }
    v25 = (*(uint64_t (**)(md::LabelFeature *))(*(_QWORD *)a1 + 488))(a1);
    v26 = (unsigned __int8 *)*((_QWORD *)a1 + 20);
    v27 = (unsigned __int8 *)*((_QWORD *)a1 + 21);
    if (v25 > 0x6DB6DB6DB6DB6DB7 * ((v27 - v26) >> 3))
    {
      md::LabelFeature::updateTextVector(a1);
      v26 = (unsigned __int8 *)*((_QWORD *)a1 + 20);
      v27 = (unsigned __int8 *)*((_QWORD *)a1 + 21);
    }
    md::TextDataStore::textDataForZoom(&v90, v26, v27, 1, v23);
    if (!v90)
    {
      v14 = 0;
      v42 = 1;
LABEL_75:
      v75 = v91;
      if (v91)
      {
        p_shared_owners = (unint64_t *)&v91->__shared_owners_;
        do
          v77 = __ldaxr(p_shared_owners);
        while (__stlxr(v77 - 1, p_shared_owners));
        if (!v77)
        {
          ((void (*)(std::__shared_weak_count *))v75->__on_zero_shared)(v75);
          std::__shared_weak_count::__release_weak(v75);
        }
      }
LABEL_80:
      v78 = v93;
      if (v93)
      {
        v79 = (unint64_t *)&v93->__shared_owners_;
        do
          v80 = __ldaxr(v79);
        while (__stlxr(v80 - 1, v79));
        if (!v80)
        {
          ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
          std::__shared_weak_count::__release_weak(v78);
        }
      }
      if (!v42)
        return v14;
      return 0;
    }
    v82 = v90;
    v28 = (std::__shared_weak_count *)operator new(0xB0uLL);
    v28->__shared_owners_ = 0;
    v28->__shared_weak_owners_ = 0;
    v28->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DDF50;
    v88 = md::LabelText::LabelText((uint64_t)&v28[1], v24, (uint64_t)v93, v83);
    v89 = v28;
    v29 = (std::__shared_weak_count *)operator new(0xB0uLL);
    v29->__shared_owners_ = 0;
    v30 = (unint64_t *)&v29->__shared_owners_;
    v29->__shared_weak_owners_ = 0;
    v29->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DDF50;
    v31 = (mdm::Allocator *)md::LabelText::LabelText((uint64_t)&v29[1], v82, (uint64_t)v91, v83);
    v87[0] = v31;
    v87[1] = v29;
    if (*a5)
    {
      v32 = 0;
      v33 = 0;
      v34 = 9;
    }
    else
    {
      v32 = *(_BYTE *)(a3 + 317);
      v33 = *(_BYTE *)(a3 + 318);
      v34 = *(_WORD *)(a3 + 320);
    }
    v86 = v34;
    v85[0] = v32;
    v85[1] = v33;
    v85[2] = 0;
    v60 = *(float *)(a4 + 152);
    v61 = *(float *)(v13 + 100);
    v62 = mdm::Allocator::instance(v31);
    v63 = (md::TextLabelPart *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v62 + 16))(v62, 1488, 8);
    v64 = (*(uint64_t (**)(md::LabelFeature *))(*(_QWORD *)a1 + 264))(a1);
    v65 = (float)(v61 + v60) * 0.5;
    v66 = (mdm::Allocator *)md::CurvedTextLabelPart::CurvedTextLabelPart((uint64_t)v63, v64, &v88, a2, a3, a4, a6, (uint64_t)v85, -v65, a5, 0);
    if (v63)
    {
      v67 = mdm::Allocator::instance(v66);
      v84 = (md::TextLabelPart *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v67 + 16))(v67, 1488, 8);
      v68 = (*(uint64_t (**)(md::LabelFeature *))(*(_QWORD *)a1 + 264))(a1);
      v69 = (mdm::Allocator *)md::CurvedTextLabelPart::CurvedTextLabelPart((uint64_t)v84, v68, v87, a2, a3, a4, a6, (uint64_t)v85, v65, a5, 0);
      v70 = mdm::Allocator::instance(v69);
      v14 = (md::BorderLabelPart *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v70 + 16))(v70, 632, 8);
      md::BorderLabelPart::BorderLabelPart(v14, v63, v84);
      if (v14)
      {
        v42 = 0;
        do
LABEL_67:
          v71 = __ldaxr(v30);
        while (__stlxr(v71 - 1, v30));
        if (!v71)
        {
          ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
          std::__shared_weak_count::__release_weak(v29);
        }
        v72 = v89;
        if (v89)
        {
          v73 = (unint64_t *)&v89->__shared_owners_;
          do
            v74 = __ldaxr(v73);
          while (__stlxr(v74 - 1, v73));
          if (!v74)
          {
            ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
            std::__shared_weak_count::__release_weak(v72);
          }
        }
        goto LABEL_75;
      }
      (*(void (**)(md::TextLabelPart *))(*(_QWORD *)v63 + 8))(v63);
      if (v84)
        (*(void (**)(md::TextLabelPart *))(*(_QWORD *)v84 + 8))(v84);
    }
    v14 = 0;
    v42 = 1;
    goto LABEL_67;
  }
  if ((*(uint64_t (**)(_QWORD))(*(_QWORD *)*a6 + 200))(*a6))
  {
    v35 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a6 + 200))(*a6);
    v37 = v35;
    if (!*(_QWORD *)v35
      || *(_DWORD *)(v35 + 40) != *(_DWORD *)(*(_QWORD *)v35 + 252)
      || (v38 = *(uint64_t **)(v35 + 24)) == 0
      || *(__int16 *)(v35 + 34) < 0)
    {
      md::LabelLineResolvedPosition::moveOntoPathForZoom((md::LabelLineResolvedPosition *)v35, *(unsigned __int8 *)(v35 + 164), v36);
      if (!*(_QWORD *)v37)
        return 0;
      if (*(_DWORD *)(v37 + 40) != *(_DWORD *)(*(_QWORD *)v37 + 252))
        return 0;
      v38 = *(uint64_t **)(v37 + 24);
      if (!v38)
        return 0;
    }
    if (*(__int16 *)(v37 + 34) < 0)
      return 0;
    v39 = *v38;
    if (!v39)
      return 0;
    v40 = *(unsigned __int8 *)(v39 + 38);
    if (v40 == 255)
      return 0;
  }
  else
  {
    v40 = 0;
  }
  v41 = *(_QWORD *)(a4 + 280);
  if (v41)
  {
    if (vabds_f32(*(float *)(v41 + 8), *(float *)(a4 + 104)) >= 0.01)
    {
      md::LabelStyle::updateStyleGroup<md::LabelTextStyleGroup>(a4, v41, 0);
      v41 = *(_QWORD *)(a4 + 280);
    }
  }
  else
  {
    v41 = md::LabelStyle::prepareStyleGroup<md::LabelTextStyleGroup>(a4, 0);
    *(_QWORD *)(a4 + 280) = v41;
  }
  v43 = *(_QWORD *)v41;
  v44 = (*(uint64_t (**)(md::LabelFeature *))(*(_QWORD *)a1 + 488))(a1);
  v45 = (unsigned __int8 *)*((_QWORD *)a1 + 20);
  v46 = (unsigned __int8 *)*((_QWORD *)a1 + 21);
  if (v44 > 0x6DB6DB6DB6DB6DB7 * ((v46 - v45) >> 3))
  {
    md::LabelFeature::updateTextVector(a1);
    v45 = (unsigned __int8 *)*((_QWORD *)a1 + 20);
    v46 = (unsigned __int8 *)*((_QWORD *)a1 + 21);
  }
  md::TextDataStore::textDataForZoom(&v92, v45, v46, v40, v43 + 72);
  v47 = v92;
  if (v92)
  {
    v48 = (std::__shared_weak_count *)operator new(0xB0uLL);
    v48->__shared_owners_ = 0;
    v48->__shared_weak_owners_ = 0;
    v48->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DDF50;
    v90 = md::LabelText::LabelText((uint64_t)&v48[1], v47, (uint64_t)v93, v18);
    v91 = v48;
    {
      v81 = operator new();
      mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v81, "VectorKitLabels", 0x5ED09DD50000000FLL);
    }
    v14 = (md::BorderLabelPart *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc
                                                                                      + 16))(mdm::Allocator::instance(void)::alloc, 1488, 8);
    v50 = (*(uint64_t (**)(md::LabelFeature *))(*(_QWORD *)a1 + 264))(a1);
    if (*a5)
    {
      v51 = 0;
      v52 = 0;
      v53 = 9;
    }
    else
    {
      v51 = *(_BYTE *)(a3 + 317);
      v52 = *(_BYTE *)(a3 + 318);
      v53 = *(_WORD *)(a3 + 320);
    }
    *(_WORD *)((char *)&v88 + 3) = v53;
    LOBYTE(v88) = v51;
    *(_WORD *)((char *)&v88 + 1) = v52;
    md::CurvedTextLabelPart::CurvedTextLabelPart((uint64_t)v14, v50, &v90, a2, a3, a4, a6, (uint64_t)&v88, 0.0, a5, 0);
    (*(void (**)(md::BorderLabelPart *, uint64_t))(*(_QWORD *)v14 + 176))(v14, 5);
    v54 = v91;
    if (v91)
    {
      v55 = (unint64_t *)&v91->__shared_owners_;
      do
        v56 = __ldaxr(v55);
      while (__stlxr(v56 - 1, v55));
      if (!v56)
      {
        ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
        std::__shared_weak_count::__release_weak(v54);
      }
    }
  }
  else
  {
    v14 = 0;
  }
  v57 = v93;
  if (v93)
  {
    v58 = (unint64_t *)&v93->__shared_owners_;
    do
      v59 = __ldaxr(v58);
    while (__stlxr(v59 - 1, v58));
    if (!v59)
    {
      ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
      std::__shared_weak_count::__release_weak(v57);
    }
  }
  if (!v47)
    return 0;
  return v14;
}

void sub_19F1147A4(mdm::Allocator *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  va_list va;
  uint64_t v12;
  uint64_t v13;
  va_list va1;
  uint64_t v15;
  uint64_t v16;
  va_list va2;
  uint64_t v18;
  va_list va3;

  va_start(va3, a7);
  va_start(va2, a7);
  va_start(va1, a7);
  va_start(va, a7);
  v10 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v13 = va_arg(va2, _QWORD);
  v15 = va_arg(va2, _QWORD);
  va_copy(va3, va2);
  v16 = va_arg(va3, _QWORD);
  v18 = va_arg(va3, _QWORD);
  v9 = mdm::Allocator::instance(a1);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v9 + 40))(v9, v7, 632);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)va2);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)va3);
  _Unwind_Resume((_Unwind_Exception *)a1);
}

uint64_t md::ArrowLabelPart::styleLayer(md::ArrowLabelPart *this, const md::LabelStyle *a2)
{
  uint64_t v3;
  uint64_t *v4;
  char *v5;

  if (*((_BYTE *)this + 916))
  {
    v3 = *((_QWORD *)a2 + 33);
    if (!v3)
    {
      v4 = md::LabelStyle::prepareStyleGroup<md::LabelLineStyleGroup>((uint64_t)a2);
      v3 = *v4;
      *((_QWORD *)a2 + 33) = *v4;
    }
    v5 = (char *)(v3 + 63);
  }
  else
  {
    v5 = (char *)a2 + 240;
  }
  return *v5;
}

uint64_t md::CurvedTextLabelPart::placement@<X0>(uint64_t this@<X0>, uint64_t a2@<X8>)
{
  *(_WORD *)a2 = *(_WORD *)(this + 1458);
  *(_BYTE *)(a2 + 2) = 0;
  *(_WORD *)(a2 + 3) = *(_WORD *)(this + 1461);
  return this;
}

uint64_t md::CaptionedIconLabelPart::placement@<X0>(uint64_t this@<X0>, uint64_t a2@<X8>)
{
  *(_WORD *)a2 = *(_WORD *)(this + 832);
  *(_BYTE *)(a2 + 2) = 0;
  *(_WORD *)(a2 + 3) = *(_WORD *)(this + 835);
  return this;
}

uint64_t md::PointLabelFeature::isSummaryPOI(md::PointLabelFeature *this)
{
  return *((unsigned __int8 *)this + 650);
}

uint64_t md::TextLabelPart::isTextRTL(md::TextLabelPart *this)
{
  return *(unsigned __int8 *)(*(_QWORD *)(*((_QWORD *)this + 72) + 16) + 122);
}

float md::ShieldIconLabelPart::styleBrightness(uint64_t a1, uint64_t a2)
{
  return *(float *)(a2 + 108);
}

uint64_t *md::ShieldIconLabelPart::updateWithStyle(uint64_t **this, md::LabelManager *a2)
{
  uint64_t *result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = md::ImageLabelPart::updateWithStyle((md::ImageLabelPart *)this, a2);
  if (!*((_BYTE *)a2 + 3035) && *((unsigned __int8 *)this[2] + 1210) - 2 < 8)
    goto LABEL_8;
  v5 = *this[4];
  v6 = *(_QWORD *)(v5 + 264);
  if (!v6)
  {
    result = md::LabelStyle::prepareStyleGroup<md::LabelLineStyleGroup>(*this[4]);
    v6 = *result;
    *(_QWORD *)(v5 + 264) = *result;
  }
  if (*((_BYTE *)this[2] + 1274) || *(_BYTE *)(v6 + 56))
    v7 = *(_BYTE *)(v6 + 58) != 0;
  else
LABEL_8:
    v7 = 0;
  *((_BYTE *)this + 593) = v7;
  return result;
}

void md::LineTextWithAuxLabelPart::updateWithStyle(md::LineTextWithAuxLabelPart *this, md::LabelManager *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  float v9;
  uint64_t v10;

  v4 = **((_QWORD **)this + 4);
  v5 = *(_QWORD *)(v4 + 264);
  if (!v5)
  {
    v6 = md::LabelStyle::prepareStyleGroup<md::LabelLineStyleGroup>(**((_QWORD **)this + 4));
    v5 = *v6;
    *(_QWORD *)(v4 + 264) = *v6;
  }
  *((_DWORD *)this + 158) = *(_DWORD *)(v5 + 40);
  v7 = (uint64_t *)*((_QWORD *)this + 72);
  v8 = (uint64_t *)*((_QWORD *)this + 73);
  if (v7 == v8)
  {
    v9 = *(float *)(**((_QWORD **)this + 4) + 172);
  }
  else
  {
    v9 = -3.4028e38;
    do
    {
      v10 = *v7++;
      (*(void (**)(uint64_t, md::LabelManager *))(*(_QWORD *)v10 + 72))(v10, a2);
      v9 = fmaxf(v9, (*(float (**)(uint64_t))(*(_QWORD *)v10 + 240))(v10));
    }
    while (v7 != v8);
  }
  *((float *)this + 42) = v9;
}

float md::MultipleShieldLabelPart::updateWithStyle(md::MultipleShieldLabelPart *this, md::LabelManager *a2)
{
  uint64_t *v4;
  uint64_t *v5;
  float v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  float result;

  v4 = (uint64_t *)*((_QWORD *)this + 72);
  v5 = (uint64_t *)*((_QWORD *)this + 73);
  if (v4 == v5)
  {
    v8 = (uint64_t *)*((_QWORD *)this + 4);
    v9 = *v8;
    v6 = *(float *)(*v8 + 172);
  }
  else
  {
    v6 = -3.4028e38;
    do
    {
      v7 = *v4++;
      (*(void (**)(uint64_t, md::LabelManager *))(*(_QWORD *)v7 + 72))(v7, a2);
      v6 = fmaxf(v6, (*(float (**)(uint64_t))(*(_QWORD *)v7 + 240))(v7));
    }
    while (v4 != v5);
    v8 = (uint64_t *)*((_QWORD *)this + 4);
    v9 = *v8;
  }
  *((float *)this + 42) = v6;
  v10 = *(_QWORD *)(v9 + 264);
  if (!v10)
  {
    v11 = md::LabelStyle::prepareStyleGroup<md::LabelLineStyleGroup>(v9);
    v10 = *v11;
    *(_QWORD *)(v9 + 264) = *v11;
    v9 = *v8;
  }
  *((float *)this + 162) = *((float *)a2 + 44) * *(float *)(v10 + 36);
  result = *(float *)(v9 + 172);
  *((float *)this + 42) = result;
  return result;
}

double md::LabelPart::placement@<D0>(uint64_t a1@<X8>)
{
  double result;

  result = 2.48104034e-265;
  *(_DWORD *)a1 = 150994944;
  *(_BYTE *)(a1 + 4) = 0;
  return result;
}

uint64_t md::LabelCollider::collideItems(uint64_t this, md::LabelCollisionItemBase **a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  md::LabelCollisionItemBase *v5;
  uint64_t v6;
  float *v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  BOOL v35;
  uint64_t v36;
  uint64_t v37;
  unsigned __int8 v38;
  char v39;
  uint64_t v40;
  uint64_t v41;
  float32x2_t *v42;
  float32x2_t v43;
  float32x2_t v44;
  int32x2_t v45;
  float v46;
  float32x2_t v47;
  float32x2_t v48;
  float32x2_t v49;
  int32x2_t v50;
  __int128 v51;
  int32x2_t v52;
  float v53;
  float v54;
  __int128 v55;
  uint64_t v56;
  float **v58;
  uint64_t v59;
  float v60;
  float v61;
  float v62;
  float v63;
  float v64;
  BOOL v65;
  float v66;
  BOOL v67;
  float v68;
  float *v70;
  float v71;
  float v72;
  float v73;
  float v74;
  float v75;
  float v76;
  int v78;
  int v79;
  char v80;
  int v81;
  int v82;
  int v83;
  int v84;
  float32x2_t v85;
  float32x2_t v86;
  uint64_t v87;
  BOOL v88;
  int v89;
  uint64_t *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  int v95;
  uint64_t v96;
  int v97;
  void **v98;
  unint64_t v99;
  unint64_t v100;
  unint64_t v101;
  int v103;
  unint64_t v104;
  void *v105;
  unint64_t *v108;
  int *v109;
  float32x2_t v110;
  float32x2_t v111;
  __int16 v112;
  float *v113;
  __int128 v114;
  uint64_t v115;

  if (a3)
  {
    v3 = (_QWORD *)this;
    v4 = 0;
    v108 = (unint64_t *)(this + 112);
    v109 = (int *)(this + 96);
    do
    {
      v5 = a2[v4];
      v6 = (*(uint64_t (**)(md::LabelCollisionItemBase *))(*(_QWORD *)v5 + 104))(v5);
      if (v6)
      {
        v7 = (float *)v6;
        this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 120))(v6);
        if ((this & 1) != 0)
          goto LABEL_4;
        v8 = v7[6];
        v9 = v7[2];
        if (v8 == 1.0)
        {
          v18 = v7[3];
        }
        else
        {
          v10 = v7[7];
          v11 = fabsf(v9 * v8);
          v12 = fabsf(v10 * v9);
          v13 = v7[3];
          v14 = -(float)(v10 * v13);
          v15 = v13 * v8;
          v16 = fabsf(v14);
          v17 = fabsf(v15);
          v9 = v16 + v11;
          v18 = v17 + v12;
        }
        v19 = v7[4];
        v20 = v7[5];
        v21 = v19 + v9;
        v22 = v20 + v18;
        v24 = *((float *)v3 + 8);
        v23 = *((float *)v3 + 9);
        v25 = v19 - (float)(v9 + v23);
        v26 = *((float *)v3 + 10);
        v27 = (float)(v20 - (float)(v18 + v26)) * v24;
        v28 = (float)(v22 - v26) * v24;
        v29 = (int)(float)(v24 * (float)(v21 - v23));
        v30 = *((_DWORD *)v3 + 12);
        v31 = *((_DWORD *)v3 + 11);
        if (v31 - 1 < v29)
          v29 = v31 - 1;
        v32 = (int)(float)(v24 * v25) & ~((int)(float)(v24 * v25) >> 31);
        v33 = (int)v27 & ~((int)v27 >> 31);
        v34 = v30 - 1;
        if (v30 - 1 >= (int)v28)
          v34 = (int)v28;
        v35 = v33 <= v34 && v32 <= v29;
        if (v35)
        {
          v87 = v3[7] + 24 * (v32 + v33 * v31);
          do
          {
            v89 = (int)(float)(v24 * v25) & ~((int)(float)(v24 * v25) >> 31);
            v90 = (uint64_t *)v87;
            do
            {
              v92 = *v90;
              if (*v90)
              {
                v93 = 0;
                v94 = v90[2];
                while (*(float **)(v94 + 8 * v93) != v7)
                {
                  if (v92 == ++v93)
                    goto LABEL_79;
                }
                v91 = v92 - 1;
                *(_QWORD *)(v94 + 8 * v93) = *(_QWORD *)(v94 + 8 * v91);
                *v90 = v91;
              }
LABEL_79:
              v90 += 3;
              v88 = v89++ == v29;
            }
            while (!v88);
            v87 += 24 * v31;
            v88 = v33++ == v34;
          }
          while (!v88);
        }
      }
      v112 = 256;
      v113 = 0;
      v36 = (*(uint64_t (**)(md::LabelCollisionItemBase *))(*(_QWORD *)v5 + 88))(v5);
      if (v36)
      {
        v37 = v36;
        v38 = (*(uint64_t (**)(md::LabelCollisionItemBase *))(*(_QWORD *)v5 + 96))(v5);
        if ((*(unsigned int (**)(uint64_t, _QWORD))(*(_QWORD *)v37 + 24))(v37, v38))
        {
          LOBYTE(v112) = 1;
          this = (*(uint64_t (**)(md::LabelCollisionItemBase *, __int16 *))(*(_QWORD *)v5 + 72))(v5, &v112);
          goto LABEL_4;
        }
      }
      v39 = (*(uint64_t (**)(md::LabelCollisionItemBase *))(*(_QWORD *)v5 + 112))(v5);
      v40 = (*(uint64_t (**)(md::LabelCollisionItemBase *, _QWORD, _QWORD *))(*(_QWORD *)v5 + 56))(v5, *v3, v3);
      if (v40)
      {
        LODWORD(v41) = 0;
        do
        {
          v42 = (float32x2_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v40 + 16))(v40);
          v43 = *v42;
          v44 = v42[1];
          v113 = 0;
          v45 = vcgt_f32(v43, v44);
          if (((v45.i32[0] | v45.i32[1]) & 1) != 0
            || *((_BYTE *)v3 + 92)
            && (v43.f32[0] < *((float *)v3 + 3)
             || v44.f32[0] > *((float *)v3 + 5)
             || v43.f32[1] < *((float *)v3 + 4)
             || v44.f32[1] > *((float *)v3 + 6)))
          {
            goto LABEL_65;
          }
          v46 = *((float *)v3 + 8);
          v47 = vmul_f32(vsub_f32(v44, v43), (float32x2_t)0x3F0000003F000000);
          v48 = vadd_f32(v47, v43);
          v49 = *(float32x2_t *)((char *)v3 + 36);
          v50 = vcvt_s32_f32(vmul_n_f32(vsub_f32(vadd_f32(v48, v47), v49), v46));
          *(int32x2_t *)&v51 = vmax_s32(vcvt_s32_f32(vmul_n_f32(vsub_f32(v43, v49), v46)), 0);
          *((int32x2_t *)&v51 + 1) = vmin_s32(vadd_s32(*(int32x2_t *)((char *)v3 + 44), (int32x2_t)-1), v50);
          v52 = vcgt_s32(*(int32x2_t *)&v51, *(int32x2_t *)((char *)&v51 + 8));
          *((_OWORD *)v3 + 6) = v51;
          if ((vorr_s8((int8x8_t)v52, (int8x8_t)vdup_lane_s32(v52, 1)).u32[0] & 1) != 0)
          {
LABEL_65:
            HIBYTE(v112) = 1;
            break;
          }
          v110 = v48;
          v111 = v47;
          md::LabelCollider::getGridItems((uint64_t)v3, v109, v5, v108);
          v54 = v110.f32[0];
          v53 = v111.f32[0];
          *(float32x2_t *)&v55 = v111;
          *((float32x2_t *)&v55 + 1) = v110;
          v114 = v55;
          v115 = 1065353216;
          HIBYTE(v112) = 0;
          v56 = v3[14];
          if (!v56)
            goto LABEL_71;
          if (v111.f32[1] <= 0.0 || v111.f32[0] <= 0.0)
            goto LABEL_71;
          v58 = (float **)v3[16];
          v59 = 8 * v56;
          while (1)
          {
            v70 = *v58;
            v71 = (*v58)[2];
            if (v71 > 0.0)
            {
              v72 = v70[3];
              if (v72 > 0.0)
              {
                v73 = v54 - v70[4];
                v74 = v110.f32[1] - v70[5];
                v75 = fabsf(v73);
                v76 = fabsf(v74);
                if (*((_QWORD *)v70 + 3) == v115)
                {
                  if (v75 > (float)(v71 + v53) || v76 > (float)(v111.f32[1] + v72))
                    goto LABEL_56;
                }
                else
                {
                  v60 = v70[6];
                  v61 = v70[7];
                  v62 = fabsf((float)(v60 * v73) + (float)(v61 * v74));
                  v63 = fabsf(-(float)((float)(v61 * v73) - (float)(v60 * v74)));
                  v64 = (float)(fabsf(-(float)(v61 * v53)) + v72) + fabsf(v60 * v111.f32[1]);
                  v65 = v62 <= (float)((float)(fabsf(v60 * v53) + v71) + fabsf(v61 * v111.f32[1])) && v63 <= v64;
                  v66 = (float)(fabsf(v60 * v71) + v53) + fabsf(-(float)(v72 * v61));
                  v67 = v65 && v75 <= v66;
                  v68 = (float)(fabsf(v61 * v71) + v111.f32[1]) + fabsf(v60 * v72);
                  if (!v67 || v76 > v68)
                    goto LABEL_56;
                }
                v78 = (*(uint64_t (**)(uint64_t, float *))(*(_QWORD *)v40 + 24))(v40, *v58);
                v54 = v110.f32[0];
                v53 = v111.f32[0];
                if (v78)
                  break;
              }
            }
LABEL_56:
            ++v58;
            v59 -= 8;
            if (!v59)
            {
              v79 = HIBYTE(v112);
              goto LABEL_58;
            }
          }
          v79 = 1;
          HIBYTE(v112) = 1;
          v113 = v70;
LABEL_58:
          if (v79)
            v80 = v39;
          else
            v80 = 1;
          if ((v80 & 1) != 0)
            goto LABEL_67;
          v41 = (v41 + 1);
          v40 = (*(uint64_t (**)(md::LabelCollisionItemBase *, uint64_t, __int16 *, _QWORD, _QWORD *))(*(_QWORD *)v5 + 64))(v5, v41, &v112, *v3, v3);
        }
        while (v40);
      }
      v79 = HIBYTE(v112);
LABEL_67:
      if (v79
        && (*(unsigned int (**)(md::LabelCollisionItemBase *))(*(_QWORD *)v5 + 32))(v5)
        && (*(unsigned int (**)(md::LabelCollisionItemBase *))(*(_QWORD *)v5 + 40))(v5))
      {
        v40 = (*(uint64_t (**)(md::LabelCollisionItemBase *, _QWORD, _QWORD *))(*(_QWORD *)v5 + 56))(v5, *v3, v3);
        HIBYTE(v112) = 0;
        v113 = 0;
      }
LABEL_71:
      this = (*(uint64_t (**)(md::LabelCollisionItemBase *, __int16 *))(*(_QWORD *)v5 + 72))(v5, &v112);
      if (HIBYTE(v112))
        goto LABEL_4;
      *((_DWORD *)v5 + 10) = 0;
      v81 = *((_DWORD *)v3 + 25);
      v82 = *((_DWORD *)v3 + 27);
      if (v81 > v82)
        goto LABEL_74;
      v83 = *((_DWORD *)v3 + 24);
      v84 = *((_DWORD *)v3 + 26);
      if (v83 > v84)
        goto LABEL_74;
      v95 = *((_DWORD *)v3 + 11);
      v96 = v3[7] + 24 * (v83 + v95 * v81);
      do
      {
        if (*v109 > v84)
          goto LABEL_86;
        v97 = *v109 - 1;
        v98 = (void **)(v96 + 16);
        do
        {
          v99 = (unint64_t)*(v98 - 2);
          v100 = (unint64_t)*(v98 - 1);
          v101 = (2 * v99) | 1;
          if (v99 < v100 || v100 >= v101)
            goto LABEL_95;
          v103 = 20;
          if (v101 > 0x14)
            v103 = v101;
          v104 = (1 << -__clz(v103 - 1));
          v105 = malloc_type_realloc(*v98, 8 * v104, 0x2004093837F09uLL);
          if (v105)
          {
            *(v98 - 1) = (void *)v104;
            *v98 = v105;
            v99 = (unint64_t)*(v98 - 2);
LABEL_95:
            *((_QWORD *)*v98 + v99) = v5;
            *(v98 - 2) = (void *)(v99 + 1);
          }
          v84 = *((_DWORD *)v3 + 26);
          ++v97;
          v98 += 3;
        }
        while (v97 < v84);
        v95 = *((_DWORD *)v3 + 11);
        v82 = *((_DWORD *)v3 + 27);
LABEL_86:
        v96 += 24 * v95;
        v35 = v81++ < v82;
      }
      while (v35);
LABEL_74:
      this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v40 + 16))(v40);
      v85 = vmul_f32(vsub_f32(*(float32x2_t *)(this + 8), *(float32x2_t *)this), (float32x2_t)0x3F0000003F000000);
      v86 = vadd_f32(v85, *(float32x2_t *)this);
      *((float32x2_t *)v5 + 1) = v85;
      *((float32x2_t *)v5 + 2) = v86;
      *((_QWORD *)v5 + 3) = 1065353216;
LABEL_4:
      ++v4;
    }
    while (v4 != a3);
  }
  return this;
}

uint64_t md::LabelCollider::collideCandidate(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4)
{
  float32x2_t *v8;
  float32x2_t v9;
  float32x2_t v10;
  int32x2_t v11;
  float v12;
  float32x2_t v13;
  float32x2_t v14;
  float32x2_t v15;
  __int128 v16;
  int32x2_t v17;
  int32x2_t v18;
  uint64_t result;
  __int128 v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  float32x2_t v25;
  float32x2_t v26;
  __int128 v27;
  uint64_t v28;

  v8 = (float32x2_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 16))(a3);
  v9 = *v8;
  v10 = v8[1];
  *(_QWORD *)(a4 + 8) = 0;
  v11 = vcgt_f32(v9, v10);
  if (((v11.i32[0] | v11.i32[1]) & 1) != 0
    || *(_BYTE *)(a1 + 92)
    && (v9.f32[0] < *(float *)(a1 + 12)
     || v10.f32[0] > *(float *)(a1 + 20)
     || v9.f32[1] < *(float *)(a1 + 16)
     || v10.f32[1] > *(float *)(a1 + 24)))
  {
    goto LABEL_8;
  }
  v12 = *(float *)(a1 + 32);
  v13 = vmul_f32(vsub_f32(v10, v9), (float32x2_t)0x3F0000003F000000);
  v14 = vadd_f32(v13, v9);
  v15 = *(float32x2_t *)(a1 + 36);
  *(int32x2_t *)&v16 = vmax_s32(vcvt_s32_f32(vmul_n_f32(vsub_f32(v9, v15), v12)), 0);
  v17 = vmin_s32(vadd_s32(*(int32x2_t *)(a1 + 44), (int32x2_t)-1), vcvt_s32_f32(vmul_n_f32(vsub_f32(vadd_f32(v14, v13), v15), v12)));
  v18 = vcgt_s32(*(int32x2_t *)&v16, v17);
  *((int32x2_t *)&v16 + 1) = v17;
  *(_OWORD *)(a1 + 96) = v16;
  if ((vorr_s8((int8x8_t)v18, (int8x8_t)vdup_lane_s32(v18, 1)).u32[0] & 1) != 0)
  {
LABEL_8:
    result = 0;
    *(_BYTE *)(a4 + 1) = 1;
  }
  else
  {
    v25 = v13;
    v26 = v14;
    md::LabelCollider::getGridItems(a1, (int *)(a1 + 96), a2, (unint64_t *)(a1 + 112));
    *(float32x2_t *)&v20 = v25;
    *((float32x2_t *)&v20 + 1) = v26;
    v27 = v20;
    v28 = 1065353216;
    *(_BYTE *)(a4 + 1) = 0;
    v21 = *(_QWORD *)(a1 + 112);
    if (v21)
    {
      v22 = *(uint64_t **)(a1 + 128);
      v23 = 8 * v21;
      while (1)
      {
        v24 = *v22;
        if (gm::OBRect<float>::intersectsUsingInset((float *)(*v22 + 8), (float *)&v27))
        {
          if ((*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)a3 + 24))(a3, v24))
            break;
        }
        ++v22;
        v23 -= 8;
        if (!v23)
          return 1;
      }
      *(_BYTE *)(a4 + 1) = 1;
      *(_QWORD *)(a4 + 8) = v24;
    }
    return 1;
  }
  return result;
}

BOOL gm::OBRect<float>::intersectsUsingInset(float *a1, float *a2)
{
  float v2;
  float v3;
  uint64_t v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v19;

  v2 = *a1;
  if (*a1 <= 0.0)
    return 0;
  v3 = a1[1];
  v4 = 0;
  if (v3 > 0.0)
  {
    v5 = *a2;
    if (*a2 > 0.0)
    {
      v6 = a2[1];
      if (v6 > 0.0)
      {
        v7 = a2[2] - a1[2];
        v8 = a2[3] - a1[3];
        if (*((_QWORD *)a1 + 2) == *((_QWORD *)a2 + 2))
        {
          if (fabsf(v7) > (float)(v5 + v2))
            return 0;
          v19 = fabsf(v8);
        }
        else
        {
          v9 = a2[4];
          v10 = a2[5];
          v11 = a1[4];
          v12 = a1[5];
          v13 = -(float)(v10 * v6);
          if (fabsf((float)(v11 * v7) + (float)(v12 * v8)) > (float)((float)(fabsf((float)(v11 * (float)(v9 * v5))+ (float)(v12 * (float)(v10 * v5)))+ v2)+ fabsf((float)(v13 * v11)+ (float)((float)(v6 * v9) * v12))))return 0;
          if (fabsf(-(float)((float)(v12 * v7) - (float)(v11 * v8))) > (float)((float)(fabsf(-(float)((float)(v12 * (float)(v9 * v5)) - (float)((float)(v10 * v5) * v11)))
                                                                                      + v3)
                                                                              + fabsf(-(float)((float)(v13 * v12)
                                                                                             - (float)((float)(v6 * v9) * v11)))))
            return 0;
          v14 = v11 * v2;
          v15 = v12 * v2;
          v16 = -(float)(v3 * v12);
          v17 = v11 * v3;
          if (fabsf((float)(v9 * v7) + (float)(v10 * v8)) > (float)((float)(fabsf((float)(v14 * v9) + (float)(v15 * v10))
                                                                           + v5)
                                                                   + fabsf((float)(v17 * v10) + (float)(v16 * v9))))
            return 0;
          v19 = fabsf(-(float)((float)(v10 * v7) - (float)(v9 * v8)));
          v6 = fabsf(-(float)((float)(v14 * v10) - (float)(v15 * v9))) + v6;
          v3 = fabsf(-(float)((float)(v16 * v10) - (float)(v17 * v9)));
        }
        return v19 <= (float)(v6 + v3);
      }
    }
  }
  return v4;
}

uint64_t `non-virtual thunk to'md::Label::collisionBounds(md::Label *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 31) + 248))(*((_QWORD *)this + 31));
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,md::LabelCollider::getGridItems(gm::Box<int,2> const&,md::LabelCollidableItem const&,md::SimpleBuffer<md::LabelCollidableItem*,20ul> &)::$_0 &,md::LabelCollidableItem**,false>(uint64_t result, unint64_t *a2, uint64_t a3, char a4)
{
  unint64_t *v7;
  unint64_t *v8;
  unint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  unsigned int v15;
  unint64_t v16;
  unint64_t v17;
  unsigned int v18;
  unsigned int v19;
  BOOL v20;
  _BOOL4 v21;
  unint64_t v22;
  unint64_t v23;
  unsigned int v24;
  unsigned int v25;
  BOOL v26;
  _BOOL4 v27;
  unint64_t v28;
  unsigned int v29;
  unsigned int v30;
  _BOOL4 v31;
  unint64_t v32;
  unsigned int v33;
  unsigned int v34;
  _BOOL4 v35;
  unsigned int v36;
  _BOOL4 v37;
  unint64_t *v38;
  unint64_t *v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unsigned int v43;
  unsigned int v44;
  BOOL v45;
  BOOL v46;
  unint64_t v47;
  unsigned int v48;
  _BOOL4 v49;
  unint64_t v50;
  unsigned int v51;
  unsigned int v52;
  _BOOL4 v53;
  unsigned int v54;
  _BOOL4 v55;
  unint64_t v56;
  unsigned int v57;
  _BOOL4 v58;
  unint64_t *v59;
  unint64_t *v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  unsigned int v64;
  unsigned int v65;
  BOOL v66;
  BOOL v67;
  unint64_t v68;
  unsigned int v69;
  _BOOL4 v70;
  unint64_t v71;
  unsigned int v72;
  unsigned int v73;
  _BOOL4 v74;
  unint64_t v75;
  unsigned int v76;
  _BOOL4 v77;
  unint64_t v78;
  unint64_t v79;
  unsigned int v80;
  unsigned int v81;
  BOOL v82;
  unint64_t v83;
  unsigned int v84;
  _BOOL4 v85;
  _BOOL4 v86;
  BOOL v87;
  unint64_t v88;
  unint64_t v89;
  unsigned int v90;
  unint64_t v91;
  unsigned int v92;
  BOOL v93;
  BOOL v94;
  unint64_t *v95;
  unint64_t *v96;
  unint64_t v97;
  unint64_t v98;
  unsigned int v99;
  BOOL v100;
  BOOL v101;
  unint64_t *v102;
  unint64_t v103;
  unsigned int v104;
  _BOOL4 v105;
  _BOOL4 v106;
  unint64_t v107;
  unsigned int v108;
  BOOL v109;
  BOOL v110;
  unint64_t v111;
  unint64_t *v112;
  unint64_t *v113;
  unint64_t v114;
  unsigned int v115;
  BOOL v116;
  BOOL v117;
  unint64_t v118;
  unsigned int v119;
  _BOOL4 v120;
  _BOOL4 v121;
  BOOL v122;
  unsigned int v123;
  BOOL v124;
  BOOL v125;
  unint64_t v126;
  unsigned int v127;
  BOOL v128;
  BOOL v129;
  unint64_t *v130;
  unsigned int v131;
  _BOOL4 v132;
  _BOOL4 v133;
  unint64_t *v134;
  unint64_t v135;
  unsigned int v136;
  BOOL v137;
  BOOL v138;
  unint64_t v139;
  unint64_t v140;
  unint64_t v141;
  unsigned int v142;
  _BOOL4 v143;
  _BOOL4 v144;
  unint64_t v145;
  unsigned int v146;
  BOOL v147;
  BOOL v148;
  unint64_t *v149;
  unint64_t v150;
  unsigned int v151;
  unsigned int v152;
  _BOOL4 v153;
  unint64_t v154;
  unint64_t v155;
  unsigned int v156;
  unsigned int v157;
  BOOL v158;
  unint64_t v159;
  unsigned int v160;
  _BOOL4 v161;
  unint64_t *v162;
  unint64_t *v163;
  unint64_t *v164;
  unint64_t v165;
  unsigned int v166;
  unsigned int v167;
  _BOOL4 v168;
  unint64_t v169;
  unint64_t v170;
  unsigned int v171;
  unsigned int v172;
  _BOOL4 v173;
  unint64_t v174;
  unsigned int v175;
  _BOOL4 v176;
  unint64_t v177;
  unsigned int v178;
  _BOOL4 v179;
  unint64_t *v180;
  BOOL v181;
  char v182;
  uint64_t v183;
  unint64_t *v184;
  unint64_t *v185;
  unint64_t v186;
  unint64_t v187;
  unsigned int v188;
  unsigned int v189;
  _BOOL4 v190;
  uint64_t v191;
  uint64_t v192;
  unsigned int v193;
  BOOL v194;
  BOOL v195;
  int64_t v196;
  int64_t v197;
  BOOL v198;
  uint64_t v199;
  unint64_t *v200;
  unint64_t v201;
  unint64_t v202;
  unsigned int v203;
  unsigned int v204;
  _BOOL4 v205;
  unint64_t *v206;
  unint64_t v207;
  unsigned int v208;
  unsigned int v209;
  BOOL v210;
  unsigned int v211;
  _BOOL4 v212;
  int v213;
  unint64_t *v214;
  uint64_t v215;
  unint64_t v216;
  unsigned int v217;
  unsigned int v218;
  _BOOL4 v219;
  uint64_t v220;
  uint64_t v221;
  unint64_t v222;
  unint64_t *v223;
  unint64_t *v224;
  unint64_t *v225;
  unint64_t v226;
  unint64_t v227;
  uint64_t v228;
  uint64_t v229;
  unint64_t v230;
  unsigned int v231;
  unsigned int v232;
  uint64_t v233;
  unint64_t v234;
  unint64_t *v235;
  unint64_t v236;
  unint64_t v237;
  unsigned int v238;
  unsigned int v239;
  _BOOL4 v240;
  unint64_t *v241;
  unsigned int v242;
  BOOL v243;
  BOOL v244;
  unint64_t v245;
  unint64_t v246;
  unsigned int v247;
  unsigned int v248;
  _BOOL4 v249;
  unint64_t v250;
  unint64_t v251;
  unsigned int v252;
  unsigned int v253;
  _BOOL4 v254;
  unint64_t *v255;
  unsigned int v256;
  BOOL v257;
  unsigned int v258;
  _BOOL4 v259;

  v7 = (unint64_t *)result;
LABEL_2:
  v8 = a2 - 1;
  v9 = v7;
  while (2)
  {
    v7 = v9;
    v10 = (char *)a2 - (char *)v9;
    v11 = a2 - v9;
    switch(v11)
    {
      case 0:
      case 1:
        return result;
      case 2:
        v150 = *v9;
        v151 = *(unsigned __int8 *)(*v8 + 52);
        v152 = *(unsigned __int8 *)(*v9 + 52);
        v181 = v151 == v152;
        v153 = v151 < v152;
        if (v181)
          v153 = *v8 < *v9;
        if (v153)
        {
          *v9 = *v8;
          *v8 = v150;
        }
        return result;
      case 3:
        v154 = *v9;
        v155 = v9[1];
        v156 = *(unsigned __int8 *)(v155 + 52);
        v157 = *(unsigned __int8 *)(*v9 + 52);
        v158 = v156 < v157;
        if (v156 == v157)
          v158 = v155 < *v9;
        v159 = *v8;
        v160 = *(unsigned __int8 *)(*v8 + 52);
        v181 = v160 == v156;
        v161 = v160 < v156;
        if (v181)
          v161 = *v8 < v155;
        if (v158)
        {
          if (v161)
          {
            *v9 = v159;
LABEL_276:
            *v8 = v154;
            return result;
          }
          *v9 = v155;
          v9[1] = v154;
          v258 = *(unsigned __int8 *)(*v8 + 52);
          v181 = v258 == v157;
          v259 = v258 < v157;
          if (v181)
            v259 = *v8 < v154;
          if (v259)
          {
            v9[1] = *v8;
            goto LABEL_276;
          }
        }
        else if (v161)
        {
          v9[1] = v159;
          *v8 = v155;
          v246 = *v9;
          v245 = v9[1];
          v247 = *(unsigned __int8 *)(v245 + 52);
          v248 = *(unsigned __int8 *)(*v9 + 52);
          v181 = v247 == v248;
          v249 = v247 < v248;
          if (v181)
            v249 = v245 < *v9;
          if (v249)
          {
            *v9 = v245;
            v9[1] = v246;
          }
        }
        return result;
      case 4:
        return (uint64_t)std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,md::LabelCollider::getGridItems(gm::Box<int,2> const&,md::LabelCollidableItem const&,md::SimpleBuffer<md::LabelCollidableItem*,20ul> &)::$_0 &,md::LabelCollidableItem**>(v9, v9 + 1, v9 + 2, a2 - 1);
      case 5:
        v162 = v9 + 1;
        v163 = v9 + 2;
        v164 = v9 + 3;
        result = (uint64_t)std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,md::LabelCollider::getGridItems(gm::Box<int,2> const&,md::LabelCollidableItem const&,md::SimpleBuffer<md::LabelCollidableItem*,20ul> &)::$_0 &,md::LabelCollidableItem**>(v9, v9 + 1, v9 + 2, v9 + 3);
        v165 = v9[3];
        v166 = *(unsigned __int8 *)(*v8 + 52);
        v167 = *(unsigned __int8 *)(v165 + 52);
        v181 = v166 == v167;
        v168 = v166 < v167;
        if (v181)
          v168 = *v8 < v165;
        if (v168)
        {
          *v164 = *v8;
          *v8 = v165;
          v169 = *v164;
          v170 = *v163;
          v171 = *(unsigned __int8 *)(*v164 + 52);
          v172 = *(unsigned __int8 *)(*v163 + 52);
          v181 = v171 == v172;
          v173 = v171 < v172;
          if (v181)
            v173 = *v164 < *v163;
          if (v173)
          {
            *v163 = v169;
            *v164 = v170;
            v174 = *v162;
            v175 = *(unsigned __int8 *)(*v162 + 52);
            v181 = v171 == v175;
            v176 = v171 < v175;
            if (v181)
              v176 = v169 < *v162;
            if (v176)
            {
              v9[1] = v169;
              v9[2] = v174;
              v177 = *v9;
              v178 = *(unsigned __int8 *)(*v9 + 52);
              v181 = v171 == v178;
              v179 = v171 < v178;
              if (v181)
                v179 = v169 < *v9;
              if (v179)
              {
                *v9 = v169;
                v9[1] = v177;
              }
            }
          }
        }
        return result;
      default:
        if (v10 > 191)
        {
          if (!a3)
          {
            if (v9 != a2)
            {
              v196 = (unint64_t)(v11 - 2) >> 1;
              v197 = v196;
              do
              {
                if (v196 >= v197)
                {
                  v199 = (2 * v197) | 1;
                  v200 = &v9[v199];
                  v201 = *v200;
                  if (2 * v197 + 2 < v11)
                  {
                    v202 = v200[1];
                    v203 = *(unsigned __int8 *)(v201 + 52);
                    v204 = *(unsigned __int8 *)(v202 + 52);
                    v181 = v203 == v204;
                    v205 = v203 < v204;
                    if (v181)
                      v205 = v201 < v202;
                    if (v205)
                    {
                      v201 = v200[1];
                      ++v200;
                      v199 = 2 * v197 + 2;
                    }
                  }
                  v206 = &v9[v197];
                  v207 = *v206;
                  v208 = *(unsigned __int8 *)(v201 + 52);
                  v209 = *(unsigned __int8 *)(*v206 + 52);
                  result = v201 < *v206;
                  v181 = v208 == v209;
                  v210 = v208 < v209;
                  if (v181)
                    v210 = v201 < *v206;
                  if (!v210)
                  {
                    do
                    {
                      v214 = v200;
                      *v206 = v201;
                      if (v196 < v199)
                        break;
                      result = (2 * v199) | 1;
                      v200 = &v9[result];
                      v215 = 2 * v199 + 2;
                      v201 = *v200;
                      if (v215 < v11)
                      {
                        v216 = v200[1];
                        v217 = *(unsigned __int8 *)(v201 + 52);
                        v218 = *(unsigned __int8 *)(v216 + 52);
                        v181 = v217 == v218;
                        v219 = v217 < v218;
                        if (v181)
                          v219 = v201 < v216;
                        if (v219)
                        {
                          v201 = v200[1];
                          ++v200;
                          result = v215;
                        }
                      }
                      v211 = *(unsigned __int8 *)(v201 + 52);
                      v181 = v211 == v209;
                      v212 = v211 < v209;
                      v213 = v181 ? v201 < v207 : v212;
                      v206 = v214;
                      v199 = result;
                    }
                    while (v213 != 1);
                    *v214 = v207;
                  }
                }
                v198 = v197-- <= 0;
              }
              while (!v198);
              v220 = (unint64_t)v10 >> 3;
              do
              {
                v221 = 0;
                v222 = *v9;
                v223 = v9;
                do
                {
                  v224 = &v223[v221];
                  v227 = v224[1];
                  v225 = v224 + 1;
                  v226 = v227;
                  v228 = (2 * v221) | 1;
                  v229 = 2 * v221 + 2;
                  if (v229 < v220)
                  {
                    v230 = v225[1];
                    v231 = *(unsigned __int8 *)(v226 + 52);
                    v232 = *(unsigned __int8 *)(v230 + 52);
                    v181 = v231 == v232;
                    LODWORD(result) = v231 < v232;
                    result = v181 ? v226 < v230 : result;
                    if ((_DWORD)result)
                    {
                      v226 = v225[1];
                      ++v225;
                      v228 = v229;
                    }
                  }
                  *v223 = v226;
                  v223 = v225;
                  v221 = v228;
                }
                while (v228 <= (uint64_t)((unint64_t)(v220 - 2) >> 1));
                if (v225 == --a2)
                {
                  *v225 = v222;
                }
                else
                {
                  *v225 = *a2;
                  *a2 = v222;
                  v233 = (char *)v225 - (char *)v9 + 8;
                  if (v233 >= 9)
                  {
                    v234 = (((unint64_t)v233 >> 3) - 2) >> 1;
                    v235 = &v9[v234];
                    v236 = *v235;
                    v237 = *v225;
                    v238 = *(unsigned __int8 *)(*v235 + 52);
                    v239 = *(unsigned __int8 *)(*v225 + 52);
                    v181 = v238 == v239;
                    v240 = v238 < v239;
                    if (v181)
                      v240 = *v235 < *v225;
                    if (v240)
                    {
                      do
                      {
                        v241 = v235;
                        *v225 = v236;
                        if (!v234)
                          break;
                        v234 = (v234 - 1) >> 1;
                        v235 = &v9[v234];
                        v236 = *v235;
                        v242 = *(unsigned __int8 *)(*v235 + 52);
                        v243 = *v235 < v237;
                        v181 = v242 == v239;
                        v244 = v242 < v239;
                        if (!v181)
                          v243 = v244;
                        v225 = v241;
                      }
                      while (v243);
                      *v241 = v237;
                    }
                  }
                }
                v198 = v220-- <= 2;
              }
              while (!v198);
            }
            return result;
          }
          v12 = (unint64_t)v11 >> 1;
          v13 = &v9[(unint64_t)v11 >> 1];
          v14 = *v8;
          v15 = *(unsigned __int8 *)(*v8 + 52);
          if ((unint64_t)v10 >= 0x401)
          {
            v16 = *v13;
            v17 = *v9;
            v18 = *(unsigned __int8 *)(*v13 + 52);
            v19 = *(unsigned __int8 *)(*v9 + 52);
            v20 = *v13 < *v9;
            if (v18 != v19)
              v20 = v18 < v19;
            v181 = v15 == v18;
            v21 = v15 < v18;
            if (v181)
              v21 = v14 < v16;
            if (v20)
            {
              if (v21)
              {
                *v9 = v14;
LABEL_35:
                *v8 = v17;
                goto LABEL_36;
              }
              *v9 = v16;
              *v13 = v17;
              v36 = *(unsigned __int8 *)(*v8 + 52);
              v181 = v36 == v19;
              v37 = v36 < v19;
              if (v181)
                v37 = *v8 < v17;
              if (v37)
              {
                *v13 = *v8;
                goto LABEL_35;
              }
            }
            else if (v21)
            {
              *v13 = v14;
              *v8 = v16;
              v28 = *v9;
              v29 = *(unsigned __int8 *)(*v13 + 52);
              v30 = *(unsigned __int8 *)(*v9 + 52);
              v181 = v29 == v30;
              v31 = v29 < v30;
              if (v181)
                v31 = *v13 < *v9;
              if (v31)
              {
                *v9 = *v13;
                *v13 = v28;
              }
            }
LABEL_36:
            v38 = &v9[v12];
            v41 = *(v38 - 1);
            v39 = v38 - 1;
            v40 = v41;
            v42 = v9[1];
            v43 = *(unsigned __int8 *)(v41 + 52);
            v44 = *(unsigned __int8 *)(v42 + 52);
            v45 = v41 < v42;
            v46 = v43 < v44;
            if (v43 == v44)
              v46 = v45;
            v47 = *(a2 - 2);
            v48 = *(unsigned __int8 *)(v47 + 52);
            v181 = v48 == v43;
            v49 = v48 < v43;
            if (v181)
              v49 = v47 < v40;
            if (v46)
            {
              if (v49)
              {
                v9[1] = v47;
LABEL_57:
                *(a2 - 2) = v42;
                goto LABEL_58;
              }
              v9[1] = v40;
              *v39 = v42;
              v56 = *(a2 - 2);
              v57 = *(unsigned __int8 *)(v56 + 52);
              v181 = v57 == v44;
              v58 = v57 < v44;
              if (v181)
                v58 = v56 < v42;
              if (v58)
              {
                *v39 = v56;
                goto LABEL_57;
              }
            }
            else if (v49)
            {
              *v39 = v47;
              *(a2 - 2) = v40;
              v50 = v9[1];
              v51 = *(unsigned __int8 *)(*v39 + 52);
              v52 = *(unsigned __int8 *)(v50 + 52);
              v181 = v51 == v52;
              v53 = v51 < v52;
              if (v181)
                v53 = *v39 < v50;
              if (v53)
              {
                v9[1] = *v39;
                *v39 = v50;
              }
            }
LABEL_58:
            v59 = &v9[v12];
            v62 = v59[1];
            v60 = v59 + 1;
            v61 = v62;
            v63 = v9[2];
            v64 = *(unsigned __int8 *)(v62 + 52);
            v65 = *(unsigned __int8 *)(v63 + 52);
            v66 = v62 < v63;
            v67 = v64 < v65;
            if (v64 == v65)
              v67 = v66;
            v68 = *(a2 - 3);
            v69 = *(unsigned __int8 *)(v68 + 52);
            v181 = v69 == v64;
            v70 = v69 < v64;
            if (v181)
              v70 = v68 < v61;
            if (v67)
            {
              if (v70)
              {
                v9[2] = v68;
LABEL_74:
                *(a2 - 3) = v63;
                goto LABEL_75;
              }
              v9[2] = v61;
              *v60 = v63;
              v75 = *(a2 - 3);
              v76 = *(unsigned __int8 *)(v75 + 52);
              v181 = v76 == v65;
              v77 = v76 < v65;
              if (v181)
                v77 = v75 < v63;
              if (v77)
              {
                *v60 = v75;
                goto LABEL_74;
              }
            }
            else if (v70)
            {
              *v60 = v68;
              *(a2 - 3) = v61;
              v71 = v9[2];
              v72 = *(unsigned __int8 *)(*v60 + 52);
              v73 = *(unsigned __int8 *)(v71 + 52);
              v181 = v72 == v73;
              v74 = v72 < v73;
              if (v181)
                v74 = *v60 < v71;
              if (v74)
              {
                v9[2] = *v60;
                *v60 = v71;
              }
            }
LABEL_75:
            v78 = *v13;
            v79 = *v39;
            v80 = *(unsigned __int8 *)(*v13 + 52);
            v81 = *(unsigned __int8 *)(*v39 + 52);
            if (v80 == v81)
              v82 = *v13 < *v39;
            else
              v82 = v80 < v81;
            v83 = *v60;
            v84 = *(unsigned __int8 *)(*v60 + 52);
            result = *v60 < v78;
            v181 = v84 == v80;
            v85 = v84 < v80;
            if (v181)
              v85 = *v60 < v78;
            if (v82)
            {
              if (!v85)
              {
                *v39 = v78;
                *v13 = v79;
                v86 = v84 == v81 ? v83 < v79 : v84 < v81;
                v39 = v13;
                v78 = v83;
                if (!v86)
                {
                  v78 = v79;
LABEL_93:
                  v88 = *v9;
                  *v9 = v78;
                  *v13 = v88;
                  goto LABEL_94;
                }
              }
            }
            else
            {
              if (!v85)
                goto LABEL_93;
              *v13 = v83;
              *v60 = v78;
              if (v84 == v81)
                v87 = v83 < v79;
              else
                v87 = v84 < v81;
              v60 = v13;
              v78 = v79;
              if (!v87)
              {
                v78 = v83;
                goto LABEL_93;
              }
            }
            *v39 = v83;
            *v60 = v79;
            goto LABEL_93;
          }
          v22 = *v9;
          v23 = *v13;
          v24 = *(unsigned __int8 *)(*v9 + 52);
          v25 = *(unsigned __int8 *)(*v13 + 52);
          v26 = *v9 < *v13;
          if (v24 != v25)
            v26 = v24 < v25;
          v181 = v15 == v24;
          v27 = v15 < v24;
          if (v181)
            v27 = v14 < v22;
          if (v26)
          {
            if (v27)
            {
              *v13 = v14;
LABEL_52:
              *v8 = v23;
              goto LABEL_94;
            }
            *v13 = v22;
            *v9 = v23;
            v54 = *(unsigned __int8 *)(*v8 + 52);
            v181 = v54 == v25;
            v55 = v54 < v25;
            if (v181)
              v55 = *v8 < v23;
            if (v55)
            {
              *v9 = *v8;
              goto LABEL_52;
            }
          }
          else if (v27)
          {
            *v9 = v14;
            *v8 = v22;
            v32 = *v13;
            v33 = *(unsigned __int8 *)(*v9 + 52);
            v34 = *(unsigned __int8 *)(*v13 + 52);
            v181 = v33 == v34;
            v35 = v33 < v34;
            if (v181)
              v35 = *v9 < *v13;
            if (v35)
            {
              *v13 = *v9;
              *v9 = v32;
            }
          }
LABEL_94:
          --a3;
          v89 = *v9;
          if ((a4 & 1) == 0)
          {
            v91 = *(v9 - 1);
            v92 = *(unsigned __int8 *)(v91 + 52);
            v90 = *(unsigned __int8 *)(v89 + 52);
            v93 = v91 < v89;
            v181 = v92 == v90;
            v94 = v92 < v90;
            if (!v181)
              v93 = v94;
            if (v93)
              goto LABEL_99;
            v123 = *(unsigned __int8 *)(*v8 + 52);
            v124 = v89 < *v8;
            v181 = v90 == v123;
            v125 = v90 < v123;
            if (!v181)
              v124 = v125;
            if (v124)
            {
              do
              {
                v126 = v9[1];
                ++v9;
                v127 = *(unsigned __int8 *)(v126 + 52);
                v128 = v89 < v126;
                v181 = v90 == v127;
                v129 = v90 < v127;
                if (!v181)
                  v128 = v129;
              }
              while (!v128);
            }
            else
            {
              v130 = v9 + 1;
              do
              {
                v9 = v130;
                if (v130 >= a2)
                  break;
                ++v130;
                v131 = *(unsigned __int8 *)(*v9 + 52);
                v132 = v89 < *v9;
                v181 = v90 == v131;
                v133 = v90 < v131;
                if (!v181)
                  v132 = v133;
              }
              while (!v132);
            }
            v134 = a2;
            if (v9 < a2)
            {
              v134 = a2;
              do
              {
                v135 = *--v134;
                v136 = *(unsigned __int8 *)(v135 + 52);
                v137 = v89 < v135;
                v181 = v90 == v136;
                v138 = v90 < v136;
                if (!v181)
                  v137 = v138;
              }
              while (v137);
            }
            if (v9 < v134)
            {
              v139 = *v9;
              v140 = *v134;
              do
              {
                *v9 = v140;
                *v134 = v139;
                do
                {
                  v141 = v9[1];
                  ++v9;
                  v139 = v141;
                  v142 = *(unsigned __int8 *)(v141 + 52);
                  v143 = v89 < v141;
                  v181 = v90 == v142;
                  v144 = v90 < v142;
                  if (v181)
                    v144 = v143;
                }
                while (!v144);
                do
                {
                  v145 = *--v134;
                  v140 = v145;
                  v146 = *(unsigned __int8 *)(v145 + 52);
                  v147 = v89 < v145;
                  v181 = v90 == v146;
                  v148 = v90 < v146;
                  if (v181)
                    v148 = v147;
                }
                while (v148);
              }
              while (v9 < v134);
            }
            v149 = v9 - 1;
            if (v9 - 1 != v7)
              *v7 = *v149;
            a4 = 0;
            *v149 = v89;
            continue;
          }
          v90 = *(unsigned __int8 *)(v89 + 52);
LABEL_99:
          v95 = v9;
          do
          {
            v96 = v95;
            v98 = v95[1];
            ++v95;
            v97 = v98;
            v99 = *(unsigned __int8 *)(v98 + 52);
            v100 = v98 < v89;
            v181 = v99 == v90;
            v101 = v99 < v90;
            if (v181)
              v101 = v100;
          }
          while (v101);
          v102 = a2;
          if (v96 == v9)
          {
            v102 = a2;
            do
            {
              if (v95 >= v102)
                break;
              v107 = *--v102;
              v108 = *(unsigned __int8 *)(v107 + 52);
              v109 = v107 < v89;
              v181 = v108 == v90;
              v110 = v108 < v90;
              if (!v181)
                v109 = v110;
            }
            while (!v109);
          }
          else
          {
            do
            {
              v103 = *--v102;
              v104 = *(unsigned __int8 *)(v103 + 52);
              v105 = v103 < v89;
              v181 = v104 == v90;
              v106 = v104 < v90;
              if (!v181)
                v105 = v106;
            }
            while (!v105);
          }
          if (v95 < v102)
          {
            v111 = *v102;
            v112 = v95;
            v113 = v102;
            do
            {
              *v112 = v111;
              *v113 = v97;
              do
              {
                v96 = v112;
                v114 = v112[1];
                ++v112;
                v97 = v114;
                v115 = *(unsigned __int8 *)(v114 + 52);
                v116 = v114 < v89;
                v181 = v115 == v90;
                v117 = v115 < v90;
                if (v181)
                  v117 = v116;
              }
              while (v117);
              do
              {
                v118 = *--v113;
                v111 = v118;
                v119 = *(unsigned __int8 *)(v118 + 52);
                v120 = v118 < v89;
                v181 = v119 == v90;
                v121 = v119 < v90;
                if (v181)
                  v121 = v120;
              }
              while (!v121);
            }
            while (v112 < v113);
          }
          if (v96 != v9)
            *v9 = *v96;
          *v96 = v89;
          if (v95 < v102)
            goto LABEL_128;
          v122 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,md::LabelCollider::getGridItems(gm::Box<int,2> const&,md::LabelCollidableItem const&,md::SimpleBuffer<md::LabelCollidableItem*,20ul> &)::$_0 &,md::LabelCollidableItem**>(v9, v96);
          v9 = v96 + 1;
          result = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,md::LabelCollider::getGridItems(gm::Box<int,2> const&,md::LabelCollidableItem const&,md::SimpleBuffer<md::LabelCollidableItem*,20ul> &)::$_0 &,md::LabelCollidableItem**>(v96 + 1, a2);
          if (!(_DWORD)result)
          {
            if (v122)
              continue;
LABEL_128:
            result = std::__introsort<std::_ClassicAlgPolicy,md::LabelCollider::getGridItems(gm::Box<int,2> const&,md::LabelCollidableItem const&,md::SimpleBuffer<md::LabelCollidableItem*,20ul> &)::$_0 &,md::LabelCollidableItem**,false>(v7, v96, a3, a4 & 1);
            a4 = 0;
            v9 = v96 + 1;
            continue;
          }
          a2 = v96;
          if (v122)
            return result;
          goto LABEL_2;
        }
        v180 = v9 + 1;
        v181 = v9 == a2 || v180 == a2;
        v182 = v181;
        if ((a4 & 1) != 0)
        {
          if ((v182 & 1) == 0)
          {
            v183 = 8;
            v184 = v9;
            do
            {
              v187 = *v184;
              v186 = v184[1];
              v184 = v180;
              v188 = *(unsigned __int8 *)(v186 + 52);
              v189 = *(unsigned __int8 *)(v187 + 52);
              v181 = v188 == v189;
              v190 = v188 < v189;
              if (v181)
                v190 = v186 < v187;
              if (v190)
              {
                v191 = v183;
                do
                {
                  *(unint64_t *)((char *)v9 + v191) = v187;
                  v192 = v191 - 8;
                  if (v191 == 8)
                  {
                    v185 = v9;
                    goto LABEL_198;
                  }
                  v187 = *(unint64_t *)((char *)v9 + v191 - 16);
                  v193 = *(unsigned __int8 *)(v187 + 52);
                  v194 = v186 < v187;
                  v181 = v188 == v193;
                  v195 = v188 < v193;
                  if (!v181)
                    v194 = v195;
                  v191 = v192;
                }
                while (v194);
                v185 = (unint64_t *)((char *)v9 + v192);
LABEL_198:
                *v185 = v186;
              }
              v180 = v184 + 1;
              v183 += 8;
            }
            while (v184 + 1 != a2);
          }
        }
        else if ((v182 & 1) == 0)
        {
          do
          {
            v251 = *v7;
            v250 = v7[1];
            v7 = v180;
            v252 = *(unsigned __int8 *)(v250 + 52);
            v253 = *(unsigned __int8 *)(v251 + 52);
            v181 = v252 == v253;
            v254 = v252 < v253;
            if (v181)
              v254 = v250 < v251;
            if (v254)
            {
              v255 = v7;
              do
              {
                *v255 = v251;
                v251 = *(v255 - 2);
                v256 = *(unsigned __int8 *)(v251 + 52);
                v181 = v252 == v256;
                v257 = v252 < v256;
                if (v181)
                  v257 = v250 < v251;
                --v255;
              }
              while (v257);
              *v255 = v250;
            }
            v180 = v7 + 1;
          }
          while (v7 + 1 != a2);
        }
        return result;
    }
  }
}

uint64_t md::LabelCollisionItem::placementCandidate(md::LabelCollisionItem *this, md::LabelManager *a2, md::LabelCollider *a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  char v11;
  char v12;
  __int16 v13;
  uint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  char v30;

  v3 = *((_QWORD *)this + 7);
  if (*((_BYTE *)this + 64) == 1)
    return *(_QWORD *)(v3 + 344);
  v7 = *(_QWORD *)(v3 + 288);
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 440))(v7);
  if (!*((_BYTE *)a2 + 3624)
    || (*(unsigned int (**)(_QWORD))(**(_QWORD **)(*((_QWORD *)a2 + 21) + 32) + 8))(*(_QWORD *)(*((_QWORD *)a2 + 21) + 32)))
  {
    return v3 + 40;
  }
  v8 = *(_QWORD *)(v3 + 264);
  v9 = *(_QWORD *)(v3 + 288);
  v10 = !v8 || v9 == v8;
  if (!v10
    || ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 544))(v9) & 1) == 0
    && ((*(uint64_t (**)(_QWORD))(**(_QWORD **)(v3 + 288) + 560))(*(_QWORD *)(v3 + 288)) & 1) == 0)
  {
    return v3 + 40;
  }
  v29 = 150994944;
  v30 = 0;
  if (!(*(unsigned int (**)(_QWORD, md::LabelManager *, md::LabelCollider *, _QWORD, int *))(**(_QWORD **)(v3 + 288) + 568))(*(_QWORD *)(v3 + 288), a2, a3, *(_QWORD *)(v3 + 328), &v29))return v3 + 40;
  v11 = *(_BYTE *)(v3 + 312);
  v12 = *(_BYTE *)(v3 + 313);
  v13 = *(_WORD *)(v3 + 315);
  *(_BYTE *)(v3 + 321) = v30;
  *(_DWORD *)(v3 + 317) = v29;
  (*(void (**)(uint64_t *__return_ptr))(**(_QWORD **)(v3 + 288) + 600))(&v28);
  v14 = v28;
  v28 = 0;
  v15 = *(_QWORD *)(v3 + 1232);
  *(_QWORD *)(v3 + 1232) = v14;
  if (v15)
  {
    v16 = *(std::__shared_weak_count **)(v15 + 8);
    if (v16)
    {
      p_shared_owners = (unint64_t *)&v16->__shared_owners_;
      do
        v18 = __ldaxr(p_shared_owners);
      while (__stlxr(v18 - 1, p_shared_owners));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
    MEMORY[0x1A1AF4E00](v15, 0x20C40A4A59CD2);
    v19 = v28;
    v28 = 0;
    if (v19)
    {
      v20 = *(std::__shared_weak_count **)(v19 + 8);
      if (v20)
      {
        v21 = (unint64_t *)&v20->__shared_owners_;
        do
          v22 = __ldaxr(v21);
        while (__stlxr(v22 - 1, v21));
        if (!v22)
        {
          ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
          std::__shared_weak_count::__release_weak(v20);
        }
      }
      MEMORY[0x1A1AF4E00](v19, 0x20C40A4A59CD2);
    }
  }
  if (*(_QWORD *)(v3 + 288))
  {
    *(_QWORD *)(v3 + 288) = 0;
    *(_BYTE *)(v3 + 1247) = 1;
  }
  LOWORD(v28) = 257;
  BYTE2(v28) = 1;
  md::Label::layoutForStaging((md::Label *)v3, (uint64_t)a2, 0, &v28);
  v23 = *(_QWORD *)(v3 + 1232);
  *(_QWORD *)(v3 + 1232) = 0;
  if (v23)
  {
    v24 = *(std::__shared_weak_count **)(v23 + 8);
    if (v24)
    {
      v25 = (unint64_t *)&v24->__shared_owners_;
      do
        v26 = __ldaxr(v25);
      while (__stlxr(v26 - 1, v25));
      if (!v26)
      {
        ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
        std::__shared_weak_count::__release_weak(v24);
      }
    }
    MEMORY[0x1A1AF4E00](v23, 0x20C40A4A59CD2);
  }
  if (!*(_BYTE *)(v3 + 1290))
  {
    if (!*(_BYTE *)(v3 + 1246))
      goto LABEL_45;
    *(_BYTE *)(v3 + 317) = v11;
    *(_BYTE *)(v3 + 318) = v12;
    *(_BYTE *)(v3 + 319) = 0;
    *(_WORD *)(v3 + 320) = v13;
    LOWORD(v28) = 257;
    BYTE2(v28) = 1;
    md::Label::layoutForStaging((md::Label *)v3, (uint64_t)a2, 0, &v28);
    if (!*(_BYTE *)(v3 + 1290))
      goto LABEL_45;
  }
  v27 = *(_QWORD *)(v3 + 288);
  if (v27)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v27 + 440))(v27);
    if (!*(_BYTE *)(v3 + 1290))
LABEL_45:
      v3 = 0;
  }
  if (v3)
    return v3 + 40;
  else
    return 0;
}

uint64_t md::IconLabelPart::layoutForDisplay(uint64_t a1, uint64_t a2, uint64_t a3, float32x2_t *a4, float32x2_t *a5, double a6, double a7, double a8)
{
  uint64_t v12;
  uint64_t v13;
  float v15;
  uint64_t v16;
  unint64_t v17;
  float32x2_t *v18;
  float32x2_t *v19;
  int v20;
  BOOL v21;
  float32x2_t v22;
  float v23;
  float32x2_t v24;
  float32x2_t v25;
  float32x2_t v26;
  float32x2_t v27;
  float32x2_t v28;
  float32x2_t v29;
  float32x2_t v30;
  __int32 v31;
  float32x2_t v32;
  uint64_t v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  double v43;
  double v44;
  uint64_t v45;
  __n128 v46;
  float32x4_t v47;
  float v48;
  double v49;
  double v50;
  double v51;
  float32x4_t v52;
  float v53;
  float v54;
  float v55;
  float v56;
  float v57;
  float v58;
  float v59;
  float v60;
  float v61;
  float v62;
  float v63;
  float v64;
  float v65;
  float v66;
  float v67;
  __float2 v68;
  float v69;
  float v70;
  float v71;
  float v72;
  float v73;
  float v74;
  float v75;
  float v76;
  float v77;
  int v78;

  *(_DWORD *)(a1 + 544) = a5->i32[0];
  *(_DWORD *)(a1 + 548) = a5->i32[1];
  if (*(_BYTE *)(a1 + 756))
    *(_BYTE *)(a1 + 756) = 0;
  *(_QWORD *)(a1 + 744) = 1065353216;
  v12 = *(_QWORD *)(a1 + 16);
  if (v12)
    v13 = *(_QWORD *)(v12 + 1184);
  else
    v13 = 0;
  if (v13)
    a3 = v13;
  v15 = 1.0;
  if (a3)
  {
    v21 = v13 == 0;
    v16 = 563;
    if (!v21)
      v16 = 564;
    v17 = *(unsigned __int8 *)(a1 + v16);
    v19 = *(float32x2_t **)(a3 + 24);
    v18 = *(float32x2_t **)(a3 + 32);
    if (0x8E38E38E38E38E39 * (((char *)v18 - (char *)v19) >> 4) <= v17)
    {
      v20 = *(unsigned __int8 *)(a3 + 89);
      v21 = v19 == v18 || v20 == 0;
      if (v21)
        goto LABEL_43;
    }
    else
    {
      v19 += 18 * v17;
    }
    if (v19)
    {
      v22 = v19[9];
      if (v22)
      {
        v23 = fmaxf(fminf(v19[10].f32[0]+ (float)(*(float *)(**(_QWORD **)&v22 + 32 * *(unsigned int *)(*(_QWORD *)&v22 + 32) + 8)* (float)(v19[10].f32[1] - v19[10].f32[0])), 1.0), 0.0);
        *(_BYTE *)(a1 + 756) = 1;
        *(float *)(a1 + 760) = v23;
      }
      v24 = v19[7];
      if (v24)
      {
        v15 = fmaxf(v19[8].f32[0]+ (float)(*(float *)(**(_QWORD **)&v24 + 32 * *(unsigned int *)(*(_QWORD *)&v24 + 32) + 8)* (float)(v19[8].f32[1] - v19[8].f32[0])), 0.0);
        *(float *)(a1 + 744) = v15;
      }
      v25 = *v19;
      v26 = v19[1];
      if (*v19 != *(_QWORD *)&v26)
      {
        v27 = *v19;
        while (*(_BYTE *)(*(_QWORD *)&v27 + 16) != 2)
        {
          *(_QWORD *)&v27 += 24;
          if (*(_QWORD *)&v27 == *(_QWORD *)&v26)
            goto LABEL_32;
        }
        do
        {
          if (*(_BYTE *)(*(_QWORD *)&v25 + 16) == 2)
          {
            v15 = *(float *)(*(_QWORD *)&v25 + 8)
                + (float)(*(float *)(***(_QWORD ***)&v25 + 32 * *(unsigned int *)(**(_QWORD **)&v25 + 32) + 8)
                        * (float)(*(float *)(*(_QWORD *)&v25 + 12) - *(float *)(*(_QWORD *)&v25 + 8)));
            goto LABEL_32;
          }
          *(_QWORD *)&v25 += 24;
        }
        while (*(_QWORD *)&v25 != *(_QWORD *)&v26);
        v15 = 1.0;
      }
LABEL_32:
      v28 = v19[11];
      if (v28)
      {
        v29 = vneg_f32(vmla_n_f32(v19[12], vsub_f32(v19[13], v19[12]), *(float *)(**(_QWORD **)&v28 + 32 * *(unsigned int *)(*(_QWORD *)&v28 + 32) + 8)));
        v30.f32[0] = (*(float (**)(uint64_t))(*(_QWORD *)a1 + 304))(a1);
        v30.i32[1] = v31;
        *(float32x2_t *)(a1 + 544) = vneg_f32(vmla_n_f32(v29, v30, *(float *)(a1 + 744)));
      }
      v32 = v19[15];
      if (v32)
      {
        v33 = **(_QWORD **)&v32 + 32 * *(unsigned int *)(*(_QWORD *)&v32 + 32);
        v34 = *(float *)(v33 + 8);
        v35 = v19[17].f32[0];
        if (v35 == 0.0)
        {
          v36 = v19[16].f32[0] + (float)((float)(v19[16].f32[1] - v19[16].f32[0]) * v34);
        }
        else
        {
          v37 = *(float *)(v33 + 12);
          if (v37 <= 0.0)
          {
            v36 = v19[16].f32[0];
          }
          else if (v37 >= 1.0)
          {
            v36 = v19[16].f32[1];
          }
          else
          {
            v36 = v35 * v34;
          }
        }
        *(float *)(a1 + 748) = v36;
      }
    }
  }
LABEL_43:
  v38 = *(float *)(*(_QWORD *)(a1 + 32) + 68);
  *(float *)(a1 + 416) = v38;
  *(_DWORD *)(a1 + 352) = a4->i32[0];
  *(_DWORD *)(a1 + 356) = a4->i32[1];
  *(_BYTE *)(a1 + 510) = fabsf(v38 + -1.0) > 0.000001;
  *(float *)(a1 + 420) = v15;
  v39 = *(float *)(a2 + 904);
  *(float *)(a1 + 536) = v39;
  LODWORD(a8) = *(_DWORD *)(a2 + 908);
  *(_DWORD *)(a1 + 540) = LODWORD(a8);
  v40 = *(float *)(a1 + 528);
  v41 = v40 * *(float *)&a8;
  v42 = *(float *)(a1 + 532);
  *(float *)&a8 = -(float)((float)(v42 * *(float *)&a8) - (float)(v40 * v39));
  *(_DWORD *)(a1 + 328) = LODWORD(a8);
  *(float *)(a1 + 332) = v41 + (float)(v42 * v39);
  *(_BYTE *)(a1 + 508) = fabsf(*(float *)&a8 + -1.0) > 0.000001;
  v43 = *(double *)a5;
  v44 = COERCE_DOUBLE(vadd_f32(*a5, *a4));
  *(double *)(a1 + 520) = v44;
  *(double *)(a1 + 344) = v44;
  md::CollisionObject::setupShapeData(a1 + 312, v44, v43, a8);
  v45 = *(_QWORD *)(a1 + 16);
  if (v45)
  {
    *(float *)(a1 + 744) = *(float *)(a1 + 744) * *(float *)(v45 + 1156);
    *(_DWORD *)(a1 + 608) = *(_DWORD *)(v45 + 1300);
    *(_BYTE *)(a1 + 764) = *(_BYTE *)(v45 + 1079);
  }
  v53 = (*(float (**)(uint64_t))(*(_QWORD *)a1 + 920))(a1);
  v54 = v46.n128_f32[0];
  v55 = v47.f32[0];
  v56 = v48;
  v57 = *(float *)(a1 + 612);
  if (v57 == 1.0)
  {
    if (*(_BYTE *)(a1 + 565))
    {
LABEL_47:
      *(float *)(a1 + 696) = v53;
      *(float *)(a1 + 700) = v54;
      *(float *)(a1 + 704) = v55;
      *(float *)(a1 + 708) = v54;
      *(float *)(a1 + 712) = v55;
      *(float *)(a1 + 716) = v56;
      *(float *)(a1 + 720) = v53;
      *(float *)(a1 + 724) = v56;
LABEL_48:
      v47.i32[0] = *(_DWORD *)(a1 + 744);
      v46.n128_u64[0] = *(_QWORD *)(a1 + 328);
      md::IconLabelPart::generateModelMatrix(*(__int128 **)(a1 + 728), *(_QWORD *)(a1 + 48), *(unsigned __int8 *)(a1 + 508), (float32x2_t *)(a1 + 544), *(float *)(a1 + 748), v46, v47, *(float *)(*(_QWORD *)(a1 + 32) + 68), v49, v50, v51, v52);
      *(_QWORD *)(a1 + 424) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 144))(a1);
      return 37;
    }
  }
  else
  {
    v53 = v53 * v57;
    v54 = v46.n128_f32[0] * v57;
    v55 = v47.f32[0] * v57;
    v56 = v48 * v57;
    if (*(_BYTE *)(a1 + 565))
      goto LABEL_47;
  }
  v58 = *(float *)(*(_QWORD *)(a1 + 32) + 68);
  *(float *)&v50 = *(float *)(a1 + 744) * v58;
  LODWORD(v49) = a4->i32[1];
  *(float *)&v51 = fabsf(*(float *)&v50 + -1.0);
  v52.i32[0] = 897988541;
  if (*(float *)&v51 > 0.000001)
  {
    v53 = *(float *)&v50 * v53;
    v54 = *(float *)&v50 * v54;
    v55 = *(float *)&v50 * v55;
    v56 = *(float *)&v50 * v56;
  }
  v59 = a4->f32[0] + (float)(*(float *)(a1 + 544) * v58);
  v60 = *(float *)&v49 + (float)(*(float *)(a1 + 548) * v58);
  v61 = *(float *)(a1 + 748);
  if (!*(_BYTE *)(a1 + 508) && v61 == 0.0)
  {
    v62 = 3.4028e38;
    v63 = -3.4028e38;
    if (v55 < v53)
    {
      v64 = -3.4028e38;
      v65 = 3.4028e38;
      if (!*(_BYTE *)(a2 + 3028))
        goto LABEL_68;
    }
    else
    {
      v64 = -3.4028e38;
      v65 = 3.4028e38;
      if (v56 >= v54)
      {
        v65 = v53 + v59;
        v62 = v54 + v60;
        v64 = v55 + v59;
        v63 = v56 + v60;
      }
      if (!*(_BYTE *)(a2 + 3028))
      {
LABEL_68:
        *(float *)(a1 + 696) = v65;
        *(float *)(a1 + 700) = v62;
        *(float *)(a1 + 704) = v64;
        *(float *)(a1 + 708) = v62;
        *(float *)(a1 + 712) = v64;
        *(float *)(a1 + 716) = v63;
        v78 = *(unsigned __int8 *)(a1 + 565);
        *(float *)(a1 + 720) = v65;
        *(float *)(a1 + 724) = v63;
        if (!v78)
          return 37;
        goto LABEL_48;
      }
    }
    v75 = v64;
    v76 = v65;
    if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a2 + 168) + 32) + 8))(*(_QWORD *)(*(_QWORD *)(a2 + 168) + 32)) & 1) != 0)
    {
      v65 = v76;
      v64 = v75;
    }
    else
    {
      v65 = v76;
      v64 = v75;
      if (v75 >= v76 && v63 >= v62)
      {
        v77 = v63 - v62;
        v62 = roundf(v62);
        v65 = roundf(v76);
        v64 = (float)(v75 - v76) + v65;
        v63 = v77 + v62;
      }
    }
    goto LABEL_68;
  }
  v66 = *(float *)(a1 + 328);
  v67 = *(float *)(a1 + 332);
  if (v61 != 0.0)
  {
    v68 = __sincosf_stret(v61);
    v69 = v68.__sinval * v66;
    v66 = -(float)((float)(v68.__sinval * v67) - (float)(v68.__cosval * v66));
    v67 = v69 + (float)(v68.__cosval * v67);
  }
  v70 = v59 + (float)(v66 * v53);
  v71 = v60 + (float)(v66 * v54);
  *(float *)(a1 + 696) = v70 - (float)(v54 * v67);
  *(float *)(a1 + 700) = v71 + (float)(v67 * v53);
  v72 = v59 + (float)(v66 * v55);
  *(float *)(a1 + 704) = v72 - (float)(v54 * v67);
  *(float *)(a1 + 708) = v71 + (float)(v67 * v55);
  v73 = v72 - (float)(v56 * v67);
  v74 = v60 + (float)(v66 * v56);
  *(float *)(a1 + 712) = v73;
  *(float *)(a1 + 716) = v74 + (float)(v67 * v55);
  *(float *)(a1 + 720) = v70 - (float)(v56 * v67);
  *(float *)(a1 + 724) = v74 + (float)(v67 * v53);
  return 37;
}

uint64_t `non-virtual thunk to'md::MapNavLabeler::isNavActive(md::MapNavLabeler *this)
{
  return *((unsigned __int8 *)this + 120);
}

uint64_t md::CaptionedIconLabelPart::layoutForDisplay(uint64_t a1, uint64_t a2, uint64_t a3, float32x2_t *a4)
{
  float64x2_t *v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  int v14;
  unsigned __int8 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  float v20;
  uint64_t v21;
  uint64_t v22;
  std::__shared_weak_count *v23;
  std::__shared_weak_count *v24;
  std::__shared_weak_count *v25;
  BOOL v26;
  uint64_t v27;
  uint64_t v28;
  __int128 v29;
  float v30;
  unint64_t *p_shared_owners;
  int v32;
  unint64_t v33;
  int v34;
  unint64_t *v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  double v39;
  double v40;
  double v41;
  float v42;
  double v43;
  double v44;
  double v45;
  double v46;
  double v47;
  double v48;
  double v49;
  _QWORD *v50;
  uint64_t result;
  _DWORD *v52;
  _QWORD *v53;
  _QWORD *v54;
  uint64_t v55;
  float *v56;
  float v57;
  float v58;
  float v59;
  float v60;
  float v61;
  float v62;
  float v63;
  float v64;
  float *v65;
  float v66;
  unsigned int v67;
  float32x2_t v68;
  float32x2_t v69;
  float32x2_t v70;
  float32x2_t v71;
  float v72;
  float *v73;
  float v74;
  float v75;
  float v76;
  float v77;
  float v78;
  int8x16_t *v79;
  int8x16_t *v80;
  float32x4_t v81;
  float32x4_t v82;
  float v83;
  float v84;
  float32x2_t v85;
  float32x2_t v86;
  double v87[3];
  __int128 v88;
  __int128 v89;
  uint64_t v90;
  _BYTE v91[7];

  v8 = (float64x2_t *)(a2 + 440);
  v9 = *(unsigned __int8 *)(a2 + 458);
  v85 = 0;
  v10 = *(_QWORD *)(a1 + 16);
  v11 = *(_QWORD *)(v10 + 1184);
  if (!v11)
    goto LABEL_49;
  v12 = *(char **)(v11 + 24);
  v13 = *(char **)(v11 + 32);
  if (0x8E38E38E38E38E39 * ((v13 - v12) >> 4) <= *(unsigned __int8 *)(a1 + 564))
  {
    v14 = *(unsigned __int8 *)(v11 + 89);
    if (v12 == v13 || v14 == 0)
      goto LABEL_49;
  }
  else
  {
    v12 += 144 * *(unsigned __int8 *)(a1 + 564);
  }
  if (v12)
  {
    if (*(_BYTE *)(v10 + 1104))
    {
      v16 = atomic_load((unsigned __int8 *)(v10 + 1240));
      if ((v16 & 1) == 0)
      {
        v17 = *(_QWORD *)v12;
        v18 = *((_QWORD *)v12 + 1);
        if (v17 != v18)
        {
          v19 = v17;
          while (*(_BYTE *)(v19 + 16) != 1)
          {
            v19 += 24;
            if (v19 == v18)
              goto LABEL_49;
          }
          while (*(_BYTE *)(v17 + 16) != 1)
          {
            v17 += 24;
            if (v17 == v18)
            {
              v20 = 1.0;
              goto LABEL_21;
            }
          }
          v20 = *(float *)(v17 + 8)
              + (float)(*(float *)(**(_QWORD **)v17 + 32 * *(unsigned int *)(*(_QWORD *)v17 + 32) + 8)
                      * (float)(*(float *)(v17 + 12) - *(float *)(v17 + 8)));
          if (v20 == 0.0)
            goto LABEL_49;
LABEL_21:
          v84 = v20;
          v90 = 0;
          v88 = 0u;
          v89 = 0u;
          *(_DWORD *)v91 = 2139095039;
          *(_WORD *)&v91[4] = 0;
          v91[6] = 0;
          v21 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 16) + 8) + 72))(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 8));
          if (v21)
          {
            v22 = v21;
            v23 = *(std::__shared_weak_count **)(v21 + 304);
            if (v23)
            {
              if (v23->__shared_owners_ != -1)
              {
                v24 = std::__shared_weak_count::lock(v23);
                v25 = v24;
                if (v24)
                  v26 = *(_QWORD *)(v22 + 296) == 0;
                else
                  v26 = 1;
                if (v26)
                {
                  if (!v24)
                    goto LABEL_49;
                }
                else
                {
                  v27 = *(_QWORD *)(v22 + 288);
                  if (v27)
                  {
                    v28 = *(_QWORD *)(v27 + 72);
                    if (v28)
                    {
                      v29 = *(_OWORD *)(v28 + 32);
                      v88 = *(_OWORD *)(v28 + 16);
                      v89 = v29;
                      v90 = *(_QWORD *)(v28 + 48);
                      *(_DWORD *)&v91[3] = *(_DWORD *)(v28 + 59);
                      *(_DWORD *)v91 = *(_DWORD *)(v28 + 56);
                      v30 = *(float *)(v28 + 64);
                      p_shared_owners = (unint64_t *)&v24->__shared_owners_;
                      v32 = *(unsigned __int8 *)(v28 + 68);
                      do
                        v33 = __ldaxr(p_shared_owners);
                      while (__stlxr(v33 - 1, p_shared_owners));
                      if (v33)
                      {
LABEL_42:
                        v37 = *(_QWORD *)(a1 + 16);
                        v38 = *(_QWORD *)(a2 + 232);
                        v39 = *(double *)(v38 + 56);
                        v40 = *(double *)(v37 + 984) / v39;
                        if (*(_BYTE *)(v22 + 237) || *(_QWORD *)(v22 + 248))
                        {
                          v41 = v40 * *(float *)(a2 + 488);
                          v42 = *(float *)(v37 + 1056);
                        }
                        else
                        {
                          if (*(_BYTE *)(v38 + 30))
                          {
                            v41 = v40 * *(float *)(a2 + 488);
                          }
                          else
                          {
                            v83 = v40;
                            if (*(float *)v91 != 3.4028e38)
                              v83 = *(float *)v91;
                            v41 = (float)(v83 * *(float *)(a2 + 488));
                          }
                          v42 = 0.0;
                          if (v32)
                            v42 = v30;
                        }
                        v43 = v41 + (float)(*(float *)(a2 + 1624) * v42);
                        if (*(_BYTE *)(a2 + 448))
                        {
                          v44 = v43 * v39;
                          v45 = *(double *)md::LabelPoint::mercatorPoint((md::LabelPoint *)&v88);
                          v46 = *(double *)(md::LabelPoint::mercatorPoint((md::LabelPoint *)&v88) + 8);
                        }
                        else
                        {
                          md::LabelPoint::geocentricPoint((md::LabelPoint *)&v88);
                          v47 = md::LabelPoint::geocentricNormal((md::LabelPoint *)&v88);
                          v45 = *(double *)&v88 + v47 * v43;
                          v46 = *((double *)&v88 + 1) + v48 * v43;
                          v44 = *(double *)&v89 + v49 * v43;
                        }
                        v87[0] = v45;
                        v87[1] = v46;
                        v87[2] = v44;
                        md::LabelLayoutContext::projectPointToPixel(v8, v87, &v86);
                        v85 = vmla_n_f32(v85, vsub_f32(v86, *a4), v84);
                        goto LABEL_49;
                      }
                      v34 = 1;
LABEL_41:
                      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
                      std::__shared_weak_count::__release_weak(v25);
                      if (!v34)
                        goto LABEL_49;
                      goto LABEL_42;
                    }
                  }
                }
                v35 = (unint64_t *)&v24->__shared_owners_;
                do
                  v36 = __ldaxr(v35);
                while (__stlxr(v36 - 1, v35));
                if (v36)
                  goto LABEL_49;
                v34 = 0;
                v32 = 0;
                v30 = 0.0;
                goto LABEL_41;
              }
            }
          }
        }
      }
    }
  }
LABEL_49:
  if (*(_BYTE *)(a1 + 565))
    md::CaptionedIconLabelPart::generateModelMatrix(a1, *(_OWORD **)(a1 + 888), *(_OWORD **)(a1 + 904), (uint64_t)v8, (double *)(*(_QWORD *)(a1 + 16) + 408), *(float *)(*(_QWORD *)(a1 + 32) + 72), *(float *)(*(_QWORD *)(a1 + 32) + 68));
  if (*(_BYTE *)(a1 + 925))
  {
    if (!*(_BYTE *)(a1 + 926) || *(_BYTE *)(a1 + 732))
    {
      v50 = **(_QWORD ***)(a1 + 576);
      result = (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t, float32x2_t *, float32x2_t *))(*v50 + 120))(v50, a2, a3, a4, &v85);
      goto LABEL_55;
    }
    v53 = *(_QWORD **)(a1 + 576);
    v55 = *v53;
    v54 = (_QWORD *)v53[1];
    result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, float32x2_t *, float32x2_t *))(*(_QWORD *)*v53 + 120))(*v53, a2, a3, a4, &v85);
    if ((_DWORD)result != 37)
      return result;
    *(float32x2_t *)&v88 = vadd_f32(*(float32x2_t *)(a1 + 708), v85);
    result = (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t, float32x2_t *, __int128 *))(*v54 + 120))(v54, a2, a3, a4, &v88);
    if ((_DWORD)result != 37)
      return result;
    v56 = *(float **)(v55 + 24);
    v57 = v56[96];
    v58 = v56[94];
    if (v57 >= v58 && (v59 = v56[97], v60 = v56[95], v59 >= v60))
    {
      v72 = a4->f32[1];
      v64 = v58 - a4->f32[0];
      v61 = v60 - v72;
      v63 = v57 - a4->f32[0];
      v62 = v59 - v72;
    }
    else
    {
      v61 = 3.4028e38;
      v62 = -3.4028e38;
      v63 = -3.4028e38;
      v64 = 3.4028e38;
    }
    *(_QWORD *)&v88 = __PAIR64__(LODWORD(v61), LODWORD(v64));
    result = 16;
    *((_QWORD *)&v88 + 1) = __PAIR64__(LODWORD(v62), LODWORD(v63));
    if (v63 < v64 || v62 < v61)
      return result;
    v73 = (float *)v54[3];
    if (v73[80] >= v73[78] && v73[81] >= v73[79])
    {
      v74 = md::CaptionedIconLabelPart::textOriginOffsetForPosition(a1, 1, *(unsigned __int8 *)(a1 + 847), *(unsigned __int8 *)(a1 + 855), *(unsigned __int8 *)(a1 + 848), (float *)&v88, v73 + 78, (uint64_t)v54);
      if (v9)
      {
        v76 = *(float *)(a2 + 904);
        v77 = *(float *)(a2 + 908);
        v78 = v77 * v75;
        v75 = (float)(v76 * v75) + (float)(v77 * v74);
        v74 = -(float)(v78 - (float)(v76 * v74));
      }
      if (vabds_f32(v74, *(float *)(a1 + 708)) >= 0.1 || vabds_f32(v75, *(float *)(a1 + 712)) >= 0.1)
      {
        *(float *)(a1 + 708) = v74;
        *(float *)(a1 + 712) = v75;
        *(float *)v87 = v85.f32[0] + v74;
        *((float *)v87 + 1) = v85.f32[1] + v75;
        (*(void (**)(_QWORD *, uint64_t, uint64_t, float32x2_t *, double *))(*v54 + 120))(v54, a2, a3, a4, v87);
      }
      v79 = (int8x16_t *)(*(_QWORD *)(v55 + 24) + 392);
      v80 = (int8x16_t *)(v54[3] + 392);
      v81.i64[0] = v80->i64[0];
      v81.i64[1] = *(_QWORD *)(*(_QWORD *)(v55 + 24) + 400);
      v82.i64[0] = v79->i64[0];
      v82.i64[1] = *(_QWORD *)(v54[3] + 400);
      *(int8x16_t *)(a1 + 392) = vbslq_s8((int8x16_t)vcgtq_f32(v82, v81), *v80, *v79);
      goto LABEL_57;
    }
    return 14;
  }
  if (!*(_BYTE *)(a1 + 926) || *(_BYTE *)(a1 + 732))
    return 14;
  v50 = **(_QWORD ***)(a1 + 576);
  *(_QWORD *)&v88 = 0;
  (*(void (**)(_QWORD *, uint64_t, uint64_t, float32x2_t *, __int128 *))(*v50 + 120))(v50, a2, a3, a4, &v88);
  v65 = (float *)(v50[3] + 312);
  v88 = 0uLL;
  v66 = md::CaptionedIconLabelPart::textOriginOffsetForPosition(a1, 1, *(unsigned __int8 *)(a1 + 847), *(unsigned __int8 *)(a1 + 855), *(unsigned __int8 *)(a1 + 848), (float *)&v88, v65, (uint64_t)v50);
  v68 = (float32x2_t)__PAIR64__(v67, LODWORD(v66));
  if (v9)
  {
    v69 = *(float32x2_t *)(a2 + 904);
    v70 = vmul_n_f32(v69, v66);
    v71 = (float32x2_t)vrev64_s32((int32x2_t)vmul_lane_f32(v69, v68, 1));
    v68.i32[0] = vsub_f32(v70, v71).u32[0];
    v68.i32[1] = vadd_f32(v70, v71).i32[1];
  }
  *(float32x2_t *)&v87[0] = vadd_f32(v85, v68);
  result = (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t, float32x2_t *, double *))(*v50 + 120))(v50, a2, a3, a4, v87);
LABEL_55:
  if ((_DWORD)result == 37)
  {
    v52 = (_DWORD *)v50[3];
    *(_DWORD *)(a1 + 392) = v52[98];
    *(_DWORD *)(a1 + 396) = v52[99];
    *(_DWORD *)(a1 + 400) = v52[100];
    *(_DWORD *)(a1 + 404) = v52[101];
LABEL_57:
    *(_DWORD *)(a1 + 520) = a4->i32[0];
    *(_DWORD *)(a1 + 524) = a4->i32[1];
    *(_QWORD *)(a1 + 424) = *(_QWORD *)(a1 + 888);
    return 37;
  }
  return result;
}

uint64_t md::CaptionedIconLabelPart::layoutForStaging(uint64_t a1, uint64_t a2, float *a3)
{
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  _DWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  int v16;
  void *v17;
  unsigned __int8 *v18;
  int v19;
  _QWORD *v20;
  unsigned __int8 v21;
  uint64_t v22;
  uint64_t v23;
  float v24;
  float v25;
  float v26;
  float v27;
  int v29;
  unsigned __int8 *v30;
  unsigned __int8 *v31;
  int v32;
  uint64_t v33;
  float *v34;
  float v35;
  float v36;
  float32x2_t *v37;
  float32x2_t v38;
  float32x2_t v39;
  float32x2_t v40;
  uint64_t v41;
  _DWORD *v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v48;
  float v49;
  float v50;
  float v51;
  float v52;
  uint64_t v54;
  float *v55;
  float v56;
  float v57;
  float v58;
  float v59;
  float v60;
  float v61;
  float v62;
  float v63;
  float *v64;
  float *v65;
  char v66;
  float *v67;
  float v68;
  float v69;
  float v70;
  float v71;
  float v72;
  float v73;
  float v74;
  float v75;
  int8x16_t *v76;
  int8x16_t *v77;
  float32x4_t v78;
  float32x4_t v79;
  unint64_t v80;
  unint64_t v81;

  v6 = *(_QWORD *)(a2 + 432);
  v7 = *(unsigned __int8 *)(v6 + 18);
  if (*(_BYTE *)(a1 + 565) && *(_BYTE *)(a1 + 566))
    md::CaptionedIconLabelPart::generateModelMatrix(a1, *(_OWORD **)(a1 + 896), *(_OWORD **)(a1 + 912), v6, (double *)(*(_QWORD *)(a1 + 16) + 592), *(float *)(*(_QWORD *)(a1 + 32) + 24), *(float *)(*(_QWORD *)(a1 + 32) + 20));
  if (!*(_BYTE *)(a1 + 925))
  {
    if (*(_BYTE *)(a1 + 926) && *(_BYTE *)(a1 + 946) != 3)
    {
      v20 = **(_QWORD ***)(a1 + 576);
      if (*(_BYTE *)(a1 + 927))
      {
        v21 = *(_BYTE *)(a1 + 928);
        if (v21)
        {
          if (*(_BYTE *)(a1 + 930))
            v21 = 2;
          else
            v21 = 1;
        }
      }
      else
      {
        v29 = *(unsigned __int8 *)(a1 + 848);
        v30 = (unsigned __int8 *)&horizontalLabelAnchors;
        if (v29 == 4)
          v30 = (unsigned __int8 *)&diagonalUpLabelAnchors;
        if (v29 == 8)
          v31 = (unsigned __int8 *)&diagonalDownLabelAnchors;
        else
          v31 = v30;
        v32 = v31[2 * *(unsigned __int8 *)(a1 + 847)];
        if (v32 == 1)
          v21 = 1;
        else
          v21 = 2 * (v32 == 2);
      }
      v33 = v21;
      (*(void (**)(_QWORD, _QWORD, uint64_t))(*v20 + 352))(**(_QWORD **)(a1 + 576), 0, v33);
      (*(void (**)(_QWORD *, _QWORD, uint64_t))(*v20 + 360))(v20, 0, v33);
      v80 = 0;
      (*(void (**)(_QWORD *, uint64_t, float *, unint64_t *))(*v20 + 80))(v20, a2, a3, &v80);
      v34 = (float *)(v20[3] + 72);
      v80 = 0;
      v81 = 0;
      v35 = md::CaptionedIconLabelPart::textOriginOffsetForPosition(a1, 0, *(unsigned __int8 *)(a1 + 847), *(unsigned __int8 *)(a1 + 855), *(unsigned __int8 *)(a1 + 848), (float *)&v80, v34, (uint64_t)v20);
      v37 = (float32x2_t *)(a1 + 656);
      *(float *)(a1 + 656) = v35;
      *(float *)(a1 + 660) = v36;
      if (v7)
      {
        v38 = *(float32x2_t *)(v6 + 464);
        v39 = vmul_n_f32(v38, v35);
        v40 = (float32x2_t)vrev64_s32((int32x2_t)vmul_n_f32(v38, v36));
        v38.i32[0] = vsub_f32(v39, v40).u32[0];
        v38.i32[1] = vadd_f32(v39, v40).i32[1];
        *v37 = v38;
      }
      v41 = (*(uint64_t (**)(_QWORD *, uint64_t, float *, float32x2_t *))(*v20 + 80))(v20, a2, a3, v37);
      if ((_DWORD)v41 != 37)
        return v41;
      v42 = (_DWORD *)(*(uint64_t (**)(_QWORD *))(*v20 + 248))(v20);
      *(_DWORD *)(a1 + 152) = *v42;
      *(_DWORD *)(a1 + 156) = v42[1];
      *(_DWORD *)(a1 + 160) = v42[2];
      *(_DWORD *)(a1 + 164) = v42[3];
      v43 = (*(float (**)(_QWORD *))(*v20 + 264))(v20);
      if (v45 < v43 || v46 < v44)
      {
        v50 = 3.4028e38;
        v52 = -3.4028e38;
        v51 = -3.4028e38;
        v49 = 3.4028e38;
      }
      else
      {
        v48 = a3[1];
        v49 = v43 - *a3;
        v50 = v44 - v48;
        v51 = v45 - *a3;
        v52 = v46 - v48;
      }
      *(float *)(a1 + 664) = v49;
      *(float *)(a1 + 668) = v50;
      *(float *)(a1 + 672) = v51;
      *(float *)(a1 + 676) = v52;
      goto LABEL_64;
    }
    return 14;
  }
  if (!*(_BYTE *)(a1 + 926) || *(_BYTE *)(a1 + 946) == 3)
  {
    v8 = **(_QWORD **)(a1 + 576);
    v80 = 0;
    v9 = (*(uint64_t (**)(uint64_t, uint64_t, float *, unint64_t *))(*(_QWORD *)v8 + 80))(v8, a2, a3, &v80);
    if ((_DWORD)v9 != 37)
      return v9;
    v10 = (_DWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 248))(v8);
    *(_DWORD *)(a1 + 152) = *v10;
    *(_DWORD *)(a1 + 156) = v10[1];
    *(_DWORD *)(a1 + 160) = v10[2];
    *(_DWORD *)(a1 + 164) = v10[3];
    goto LABEL_64;
  }
  v11 = *(_QWORD *)(a1 + 576);
  v13 = *(_QWORD **)v11;
  v12 = *(_QWORD **)(v11 + 8);
  v80 = 0;
  v14 = (*(uint64_t (**)(_QWORD *, uint64_t, float *, unint64_t *))(*v13 + 80))(v13, a2, a3, &v80);
  v9 = v14;
  if ((_DWORD)v14 == 37 || (_DWORD)v14 == 15)
  {
    v16 = *(unsigned __int8 *)(a1 + 848);
    if (!*(_BYTE *)(a1 + 925) && *(_BYTE *)(a1 + 927))
      goto LABEL_33;
    v17 = &horizontalLabelAnchors;
    if (v16 == 4)
      v17 = &diagonalUpLabelAnchors;
    v18 = (unsigned __int8 *)(v16 == 8 ? &diagonalDownLabelAnchors : v17);
    v19 = v18[2 * *(unsigned __int8 *)(a1 + 847)];
    if (v19 != 1 && v19 != 2)
    {
      LOBYTE(v19) = *(_BYTE *)(a1 + 927);
      if ((_BYTE)v19)
      {
LABEL_33:
        LOBYTE(v19) = *(_BYTE *)(a1 + 928);
        if ((_BYTE)v19)
        {
          if (*(_BYTE *)(a1 + 930))
            LOBYTE(v19) = 2;
          else
            LOBYTE(v19) = 1;
        }
      }
    }
    v22 = v19;
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(*v12 + 352))(v12, 0, v22);
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(*v12 + 360))(v12, 0, v22);
    v23 = (*(uint64_t (**)(_QWORD *, uint64_t, float *, uint64_t))(*v12 + 80))(v12, a2, a3, a1 + 656);
    if ((_DWORD)v9 == 37)
    {
      v9 = v23;
      if ((_DWORD)v23 == 37)
      {
        v24 = (*(float (**)(_QWORD *))(*v13 + 264))(v13);
        if (v26 < v24 || v27 < v25)
        {
          v61 = 3.4028e38;
          v63 = -3.4028e38;
          v62 = -3.4028e38;
          v60 = 3.4028e38;
        }
        else
        {
          v59 = a3[1];
          v60 = v24 - *a3;
          v61 = v25 - v59;
          v62 = v26 - *a3;
          v63 = v27 - v59;
        }
        v80 = __PAIR64__(LODWORD(v61), LODWORD(v60));
        v9 = 16;
        v81 = __PAIR64__(LODWORD(v63), LODWORD(v62));
        if (v62 >= v60 && v63 >= v61)
        {
          v64 = (float *)v12[3];
          if (v64[20] >= v64[18] && v64[21] >= v64[19])
          {
            v65 = v64 + 18;
            if (!*(_BYTE *)(a1 + 854))
            {
              v66 = *(_BYTE *)(a1 + 853);
              if (!v66)
              {
                v67 = (float *)v13[3];
                v68 = v67[20];
                v69 = v67[18];
                v70 = 0.0;
                if (v68 >= v69)
                {
                  v70 = v68 - v69;
                  if (v67[21] < v67[19])
                    v70 = 0.0;
                }
                if (v70 <= (float)(*(float *)(a2 + 176) * 14.1))
                  v66 = 1;
                else
                  v66 = 2;
              }
              *(_BYTE *)(a1 + 854) = v66;
            }
            v71 = md::CaptionedIconLabelPart::textOriginOffsetForPosition(a1, 0, *(unsigned __int8 *)(a1 + 847), *(unsigned __int8 *)(a1 + 855), *(unsigned __int8 *)(a1 + 848), (float *)&v80, v65, (uint64_t)v12);
            if (v7)
            {
              v73 = *(float *)(v6 + 464);
              v74 = *(float *)(v6 + 468);
              v75 = v74 * v72;
              v72 = (float)(v73 * v72) + (float)(v74 * v71);
              v71 = -(float)(v75 - (float)(v73 * v71));
            }
            if (vabds_f32(v71, *(float *)(a1 + 656)) >= 0.1 || vabds_f32(v72, *(float *)(a1 + 660)) >= 0.1)
            {
              *(float *)(a1 + 656) = v71;
              *(float *)(a1 + 660) = v72;
              (*(void (**)(_QWORD *, uint64_t, float *, uint64_t))(*v12 + 80))(v12, a2, a3, a1 + 656);
            }
            v76 = (int8x16_t *)(*(uint64_t (**)(_QWORD *))(*v13 + 248))(v13);
            v77 = (int8x16_t *)(*(uint64_t (**)(_QWORD *))(*v12 + 248))(v12);
            v78.i64[0] = v77->i64[0];
            v78.i64[1] = v76->i64[1];
            v79.i64[0] = v76->i64[0];
            v79.i64[1] = v77->i64[1];
            *(int8x16_t *)(a1 + 152) = vbslq_s8((int8x16_t)vcgtq_f32(v79, v78), *v77, *v76);
LABEL_64:
            *(float *)(a1 + 280) = *a3;
            *(float *)(a1 + 284) = a3[1];
            *(_BYTE *)(a1 + 959) = *(_BYTE *)(a1 + 960)
                                && *(_BYTE *)(a1 + 926)
                                && *(_BYTE *)(a1 + 946) != 3
                                && ((v54 = *(_QWORD *)(*(_QWORD *)(a1 + 576) + 8 * *(unsigned __int8 *)(a1 + 925)),
                                     v55 = *(float **)(a2 + 432),
                                     (*(float (**)(uint64_t))(*(_QWORD *)v54 + 264))(v54) < v55[284])
                                 || v57 > v55[286]
                                 || v56 < v55[285]
                                 || v58 > v55[287]);
            *(_QWORD *)(a1 + 184) = *(_QWORD *)(a1 + 896);
            return 37;
          }
          return 14;
        }
      }
    }
  }
  return v9;
}

float md::CaptionedIconLabelPart::textOriginOffsetForPosition(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5, float *a6, float *a7, uint64_t a8)
{
  float *v14;
  unsigned __int8 *v15;
  unsigned __int8 *v16;
  int v17;
  int v18;
  char v19;
  int v21;
  BOOL v22;
  char v23;
  char v24;
  float v25;
  float v26;
  char *v27;
  unsigned __int8 *v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  int v34;
  int v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;

  if ((_DWORD)a2)
    v14 = (float *)(a1 + 684);
  else
    v14 = (float *)(a1 + 632);
  if (a5 == 4)
  {
    v15 = (unsigned __int8 *)&diagonalUpIconLabelAnchors + 2 * a3;
  }
  else if (a5 == 8)
  {
    v15 = (unsigned __int8 *)&diagonalDownIconLabelAnchors + 2 * a3;
  }
  else
  {
    if (a4)
    {
      v16 = (unsigned __int8 *)&perpendicularIconLabelAnchors + 2 * a3;
      v17 = *v16;
      v18 = v16[1];
      v19 = gss::LabelPositionToMask(a3);
      if (v17 == 3 || v18 == 3)
        goto LABEL_30;
LABEL_13:
      v21 = 0;
LABEL_36:
      v14 += 5;
      goto LABEL_37;
    }
    v15 = (unsigned __int8 *)&iconLabelAnchors + 2 * a3;
  }
  v17 = *v15;
  v22 = v17 == 3 || v15[1] == 3;
  v23 = v22;
  if (!v22 && (a4 & 1) == 0 && *(_BYTE *)(a1 + 854) == 2)
  {
    if (v17 == 1)
      v17 = 2;
    else
      v17 = 1;
    v24 = gss::LabelPositionToMask(a3);
    if ((v24 & 0xE) != 0 || (v24 & 0xE0) != 0)
      v21 = 1;
    else
      v21 = 1;
    goto LABEL_36;
  }
  v19 = gss::LabelPositionToMask(a3);
  if ((v23 & 1) == 0)
    goto LABEL_13;
LABEL_30:
  if ((v19 & 0xE) != 0 || (v19 & 0xE0) != 0)
  {
    if ((v19 & 0x38) != 0)
    {
LABEL_33:
      v21 = 0;
      goto LABEL_37;
    }
  }
  else if ((v19 & 0x38) != 0)
  {
    goto LABEL_33;
  }
  if ((v19 & 0x83) != 0)
  {
    v21 = 0;
    ++v14;
LABEL_37:
    v25 = *v14;
    if (v17 != 3)
      goto LABEL_38;
LABEL_47:
    v26 = (float)(a6[2] + *a6) * 0.5;
    goto LABEL_48;
  }
  v21 = 0;
  v25 = 0.0;
  if (v17 == 3)
    goto LABEL_47;
LABEL_38:
  if (v17 == 2)
  {
    v26 = a6[2] + v25;
  }
  else
  {
    v26 = 0.0;
    if (v17 == 1)
      v26 = *a6 - v25;
  }
LABEL_48:
  if (v21)
    v27 = (char *)&horizontalAlignWithIconLabelAnchors;
  else
    v27 = (char *)&horizontalLabelAnchors;
  v28 = (unsigned __int8 *)&v27[2 * a3];
  v29 = 1.0;
  v30 = 0.0;
  v31 = -0.57358;
  if (a5 == 8)
    v28 = (unsigned __int8 *)&diagonalDownLabelAnchors + 2 * a3;
  else
    v31 = 0.0;
  if (a5 == 8)
    v29 = 0.81915;
  if (a5 == 4)
  {
    v28 = (unsigned __int8 *)&diagonalUpLabelAnchors + 2 * a3;
    v32 = 0.57358;
  }
  else
  {
    v32 = v31;
  }
  if (a5 == 4)
    v33 = 0.81915;
  else
    v33 = v29;
  v34 = *v28;
  v35 = v28[1];
  if (v34 == 2)
  {
    v36 = a7[2] - *a7;
    v37 = -0.5;
  }
  else
  {
    if (v34 != 1)
      goto LABEL_67;
    v36 = a7[2] - *a7;
    v37 = 0.5;
  }
  v30 = v36 * v37;
LABEL_67:
  switch(v35)
  {
    case 4:
      v38 = a7[1] - a7[3];
      v39 = -(float)((*(float (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a8 + 328))(a8, a2, a3)
                   + (float)(v38 * 0.5));
      break;
    case 5:
      v40 = a7[3] - a7[1];
      v41 = 0.5;
      goto LABEL_75;
    case 6:
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a8 + 328))(a8, a2, a3);
      goto LABEL_74;
    case 7:
      v42 = a7[1] - a7[3];
      v43 = (*(float (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a8 + 320))(a8, a2, a3);
      goto LABEL_77;
    case 8:
      v40 = a7[3] - a7[1];
LABEL_74:
      v41 = -0.5;
LABEL_75:
      v39 = v40 * v41;
      break;
    case 9:
      v42 = a7[1] - a7[3];
      v43 = (*(float (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a8 + 312))(a8, a2, a3);
LABEL_77:
      v39 = v43 + (float)(v42 * 0.5);
      break;
    default:
      v39 = 0.0;
      break;
  }
  v44 = -(float)((float)(v39 * v32) - (float)(v30 * v33));
  if (v33 == 1.0)
    v44 = v30;
  return v44 + v26;
}

uint64_t md::IconLabelPart::layoutForStaging(uint64_t a1, uint64_t a2, float32x2_t *a3, float32x2_t *a4)
{
  uint64_t v8;
  float v9;
  uint64_t v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  double v16;
  double v17;
  double v18;
  __n128 v19;
  float32x4_t v20;
  double v21;
  double v22;
  double v23;
  float32x4_t v24;
  __int128 *v25;
  uint64_t v26;

  v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 344))(a1);
  if ((_DWORD)v8 == 37)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a1 + 592))(a1, 0);
    v9 = *(float *)(*(_QWORD *)(a1 + 32) + 20);
    *(float *)(a1 + 176) = v9;
    *(_DWORD *)(a1 + 112) = a3->i32[0];
    *(_DWORD *)(a1 + 116) = a3->i32[1];
    *(_BYTE *)(a1 + 270) = fabsf(v9 + -1.0) > 0.000001;
    v10 = *(_QWORD *)(a2 + 432);
    v11 = *(float *)(v10 + 464);
    *(float *)(a1 + 296) = v11;
    v12 = *(float *)(v10 + 468);
    *(float *)(a1 + 300) = v12;
    v13 = *(float *)(a1 + 288);
    v14 = v13 * v12;
    v15 = *(float *)(a1 + 292);
    *(float *)&v16 = -(float)((float)(v15 * v12) - (float)(v13 * v11));
    *(_DWORD *)(a1 + 88) = LODWORD(v16);
    *(float *)(a1 + 92) = v14 + (float)(v15 * v11);
    *(_BYTE *)(a1 + 268) = fabsf(*(float *)&v16 + -1.0) > 0.000001;
    *(_DWORD *)(a1 + 304) = a4->i32[0];
    *(_DWORD *)(a1 + 308) = a4->i32[1];
    v17 = *(double *)a4;
    v18 = COERCE_DOUBLE(vadd_f32(*a4, *a3));
    *(double *)(a1 + 280) = v18;
    *(double *)(a1 + 104) = v18;
    md::CollisionObject::setupShapeData(a1 + 72, v18, v17, v16);
    if (*(_BYTE *)(a1 + 565))
    {
      if (*(_BYTE *)(a1 + 566))
      {
        v25 = *(__int128 **)(a1 + 736);
        if (!v25)
        {
          v25 = (__int128 *)operator new();
          v26 = *(_QWORD *)(a1 + 736);
          *(_QWORD *)(a1 + 736) = v25;
          if (v26)
          {
            MEMORY[0x1A1AF4E00](v26, 0x1000C40AE2C30F4);
            v25 = *(__int128 **)(a1 + 736);
          }
        }
        v19.n128_u64[0] = *(_QWORD *)(a1 + 88);
        v20.i32[0] = 1.0;
        md::IconLabelPart::generateModelMatrix(v25, *(_QWORD *)(a1 + 40), *(unsigned __int8 *)(a1 + 268), (float32x2_t *)(a1 + 304), 0.0, v19, v20, *(float *)(*(_QWORD *)(a1 + 32) + 20), v21, v22, v23, v24);
        *(_QWORD *)(a1 + 184) = *(_QWORD *)(a1 + 736);
      }
    }
  }
  return v8;
}

uint64_t md::IconLabelPart::checkResourcesReady(md::IconLabelPart *this, LabelManager *a2)
{
  uint64_t v2;
  unsigned __int8 v3;
  unsigned __int8 v5;

  v2 = *((_QWORD *)this + 80);
  if (!v2)
    return 37;
  v3 = atomic_load((unsigned __int8 *)(v2 + 142));
  if ((v3 & 1) == 0)
    return 15;
  v5 = atomic_load((unsigned __int8 *)(*((_QWORD *)this + 80) + 143));
  if ((v5 & 1) != 0)
    return 37;
  else
    return 16;
}

uint64_t md::HorizontalTextLabelPart::setTextAlignment(uint64_t result, int a2, int a3)
{
  uint64_t v3;

  v3 = result + 960;
  if (a2)
    v3 = result + 1032;
  if (*(unsigned __int8 *)(v3 + 66) != a3)
  {
    *(_BYTE *)(v3 + 66) = a3;
    *(_BYTE *)(v3 + 67) = 1;
  }
  return result;
}

void md::IconLabelPart::updateCollisionObject(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  unsigned __int8 v5;
  unsigned __int8 v6;
  double v7;
  float v8;
  float v9;
  float v10;

  if (!a2)
  {
    v3 = a1 + 640;
    v4 = *(_QWORD *)(a1 + 640);
    if (!v4)
      goto LABEL_15;
    v5 = atomic_load((unsigned __int8 *)(v4 + 143));
    if ((v5 & 1) == 0)
      return;
    if (!*(_QWORD *)v3 || (v6 = atomic_load((unsigned __int8 *)(*(_QWORD *)v3 + 143)), (v6 & 1) != 0))
    {
LABEL_15:
      if (*(_BYTE *)(a1 + 629))
      {
        *(_BYTE *)(a1 + 629) = 0;
        v7 = (*(double (**)(uint64_t, _QWORD))(*(_QWORD *)a1 + 936))(a1, *(_QWORD *)(a1 + 640));
        *(float *)&v7 = 0.5 - (float)(fminf(v10 - v9, v8 - *(float *)&v7) * 0.5);
        *(float32x2_t *)(a1 + 168) = vmaxnm_f32(*(float32x2_t *)(a1 + 620), (float32x2_t)vdup_lane_s32(*(int32x2_t *)&v7, 0));
        *(_BYTE *)(a1 + 271) = *(_BYTE *)(a1 + 631);
        *(_BYTE *)(a1 + 272) = *(_BYTE *)(a1 + 630);
      }
    }
    if (*(_BYTE *)(a1 + 628) || *(float *)(a1 + 80) < *(float *)(a1 + 72) || *(float *)(a1 + 84) < *(float *)(a1 + 76))
    {
      *(_BYTE *)(a1 + 628) = 0;
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)a1 + 912))(a1, 0, v3, a1 + 72);
    }
  }
}

uint64_t md::PointIconLabelPart::layoutForStaging(uint64_t a1, uint64_t a2, float32x2_t *a3, float32x2_t *a4)
{
  uint64_t v8;

  v8 = *(_QWORD *)(a1 + 832);
  if (v8)
    (*(void (**)(uint64_t, uint64_t, float32x2_t *, float32x2_t *))(*(_QWORD *)v8 + 80))(v8, a2, a3, a4);
  return md::IconLabelPart::layoutForStaging(a1, a2, a3, a4);
}

float md::HorizontalTextLabelPart::bottomAlignInset(uint64_t a1, int a2)
{
  uint64_t v2;

  v2 = a1 + 960;
  if (a2)
    v2 = a1 + 1032;
  return *(float *)(v2 + 32);
}

double md::IconLabelPart::meshRect(md::IconLabelPart *this)
{
  int v1;
  float32x2_t *v2;
  unsigned __int8 v3;
  double result;
  float32x4_t v5;

  v1 = *((unsigned __int8 *)this + 562);
  v2 = (float32x2_t *)*((_QWORD *)this + 80);
  v3 = atomic_load((unsigned __int8 *)&v2[18]);
  if (v1 == 1)
  {
    if ((v3 & 1) != 0)
    {
      LODWORD(result) = v2[6].i32[0];
      return result;
    }
    goto LABEL_5;
  }
  if ((v3 & 1) == 0)
  {
LABEL_5:
    LODWORD(result) = 2139095039;
    return result;
  }
  *(float32x2_t *)v5.f32 = vmaxnm_f32(vsub_f32(v2[7], v2[6]), 0);
  v5.i64[1] = v5.i64[0];
  *(_QWORD *)&result = vmulq_f32(v5, (float32x4_t)xmmword_19FFB5F30).u64[0];
  return result;
}

uint64_t md::PointIconLabelPart::layoutForDisplay(uint64_t a1, uint64_t a2, uint64_t a3, float32x2_t *a4, float32x2_t *a5, double a6, double a7, double a8)
{
  uint64_t v13;

  v13 = *(_QWORD *)(a1 + 832);
  if (v13)
    a6 = (*(double (**)(uint64_t, uint64_t, uint64_t, float32x2_t *, float32x2_t *))(*(_QWORD *)v13 + 120))(v13, a2, a3, a4, a5);
  md::IconLabelPart::layoutForDisplay(a1, a2, a3, a4, a5, a6, a7, a8);
  return 37;
}

uint64_t md::LabelCollisionItem::dedupingGroup(md::LabelCollisionItem *this)
{
  return *(_QWORD *)(*((_QWORD *)this + 7) + 24);
}

uint64_t md::Label::setCollisionResult(uint64_t a1, uint64_t a2)
{
  int v4;
  uint64_t v5;
  int v6;
  uint64_t result;
  unsigned __int8 v8;

  *(_QWORD *)(a1 + 352) = *(_QWORD *)(a2 + 8);
  v4 = *(unsigned __int8 *)(a2 + 1);
  v5 = *(_QWORD *)(a1 + 24);
  if (v5)
  {
    if (*(_BYTE *)(a2 + 1))
    {
      if (*(_BYTE *)a2)
        *(_BYTE *)(a1 + 821) = 21;
    }
    else
    {
      (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v5 + 32))(v5, a1, 0);
    }
  }
  v6 = v4 ^ 1;
  if (*(_BYTE *)(a1 + 1285) && *(_QWORD *)(a1 + 288) == *(_QWORD *)(a1 + 264))
  {
    *(_BYTE *)(a1 + 1285) = 0;
    *(_BYTE *)(a1 + 1250) = 0;
  }
  if (*(unsigned __int8 *)(a1 + 1291) != v6)
  {
    *(_BYTE *)(a1 + 1291) = v6;
    if (!v4)
    {
      if (*(_BYTE *)(a1 + 1290))
        md::Label::updateStateMachineForStaging(a1, 4, 37);
    }
  }
  result = *(_QWORD *)(a1 + 288);
  if (result)
    result = (*(uint64_t (**)(uint64_t, BOOL))(*(_QWORD *)result + 448))(result, v4 == 0);
  if (!*(_BYTE *)(a1 + 1291))
  {
    if (*(_BYTE *)a2)
      v8 = 21;
    else
      v8 = 20;
    if (*(_BYTE *)(a1 + 820) == 2 || *(unsigned __int8 *)(a1 + 821) != v8)
      return md::Label::updateStateMachineForStaging(a1, 6, v8);
  }
  return result;
}

uint64_t md::LabelCollisionItem::setCollisionResult(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  *(_BYTE *)(a1 + 65) = *(_BYTE *)(a2 + 1);
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 112))(a1);
  if (!(_DWORD)result || *(_BYTE *)(a1 + 65))
    return md::Label::setCollisionResult(*(_QWORD *)(a1 + 56), a2);
  return result;
}

BOOL md::LabelCollisionItem::isReserveSpaceItem(md::LabelCollisionItem *this)
{
  return *((_BYTE *)this + 64) == 1;
}

uint64_t md::LabelCollisionItem::reserveSpaceItem(md::LabelCollisionItem *this)
{
  uint64_t v2;

  if (*((_BYTE *)this + 64))
    return 0;
  v2 = *((_QWORD *)this + 7);
  if (*(_BYTE *)(v2 + 1247))
    md::Label::updateReserveSpaceCollisionItem(*((md::Label **)this + 7));
  return *(_QWORD *)(v2 + 336);
}

void md::IconLabelPart::prepareCollisionObject(uint64_t a1, int a2, _QWORD *a3, uint64_t a4)
{
  uint64_t v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  BOOL v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  uint64_t v20;
  float *v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  uint64_t v30;
  unsigned int v31;
  float *v32;
  float v33;
  float v34;
  float v35;

  v5 = 612;
  if (!a2)
    v5 = 588;
  v6 = *(float *)(a1 + v5);
  v7 = (*(float (**)(uint64_t, _QWORD))(*(_QWORD *)a1 + 936))(a1, *a3);
  v11 = v6 == 1.0;
  v12 = v9 * v6;
  v13 = v10 * v6;
  if (v6 == 1.0)
    v14 = v7;
  else
    v14 = v7 * v6;
  if (v6 == 1.0)
    v15 = v8;
  else
    v15 = v8 * v6;
  if (v11)
    v16 = v9;
  else
    v16 = v12;
  if (v11)
    v17 = v10;
  else
    v17 = v13;
  v18 = v17 - v15;
  v19 = v16 - v14;
  if (vabds_f32(v17 - v15, v16 - v14) <= 5.0)
  {
    v27 = v14 + (float)(v19 * 0.5);
    v28 = v15 + (float)(v18 * 0.5);
    v29 = fmaxf(v19, v18) * 0.5;
    md::CollisionObject::resetWithCircles((void **)a4, 1u);
    v30 = *(_QWORD *)(a4 + 168);
    v31 = *(_DWORD *)(a4 + 176);
    *(_DWORD *)(a4 + 176) = v31 + 1;
    v32 = (float *)(v30 + 12 * v31);
    *v32 = v27;
    v32[1] = v28;
    v32[2] = v29;
    if (v29 == 0.0)
      return;
    v33 = *(float *)(a4 + 12);
    v34 = fmaxf(*(float *)(a4 + 8), v29 + v27);
    v35 = fminf(v28 - v29, *(float *)(a4 + 4));
    *(float *)a4 = fminf(v27 - v29, *(float *)a4);
    *(float *)(a4 + 4) = v35;
    v26 = fmaxf(v33, v29 + v28);
    *(float *)(a4 + 8) = v34;
  }
  else
  {
    md::CollisionObject::resetWithRects((void **)a4, 1u);
    v20 = *(unsigned int *)(a4 + 176);
    v21 = (float *)(*(_QWORD *)(a4 + 160) + 16 * v20);
    *v21 = v14;
    v21[1] = v15;
    v21[2] = v16;
    v21[3] = v17;
    v22 = fminf(v14, *(float *)a4);
    v23 = *(float *)(a4 + 12);
    v24 = fmaxf(*(float *)(a4 + 8), v16);
    v25 = fminf(v15, *(float *)(a4 + 4));
    *(_DWORD *)(a4 + 176) = v20 + 1;
    *(float *)a4 = v22;
    *(float *)(a4 + 4) = v25;
    v26 = fmaxf(v23, v17);
    *(float *)(a4 + 8) = v24;
  }
  *(float *)(a4 + 12) = v26;
}

double md::IconLabelPart::collisionBounds(md::IconLabelPart *this, const LabelIcon *a2)
{
  int v2;
  unsigned __int8 v3;
  double result;
  float32x4_t v5;

  v2 = *((unsigned __int8 *)this + 562);
  v3 = atomic_load((unsigned __int8 *)a2 + 144);
  if (v2 == 1)
  {
    if ((v3 & 1) != 0)
    {
      LODWORD(result) = *((_DWORD *)a2 + 16);
      return result;
    }
    goto LABEL_5;
  }
  if ((v3 & 1) == 0)
  {
LABEL_5:
    LODWORD(result) = 2139095039;
    return result;
  }
  *(float32x2_t *)v5.f32 = vmaxnm_f32(vsub_f32(*(float32x2_t *)((char *)a2 + 72), *(float32x2_t *)((char *)a2 + 64)), 0);
  v5.i64[1] = v5.i64[0];
  *(_QWORD *)&result = vmulq_f32(v5, (float32x4_t)xmmword_19FFB5F30).u64[0];
  return result;
}

uint64_t md::LabelPart::shouldSnapToVisiblePlacement(md::LabelPart *this)
{
  return 0;
}

uint64_t md::CaptionedIconLabelPart::shouldSnapToVisiblePlacement(md::CaptionedIconLabelPart *this)
{
  return *((unsigned __int8 *)this + 959);
}

BOOL md::CaptionedIconLabelPart::shouldSnapToDefaultPlacement(md::CaptionedIconLabelPart *this)
{
  return *((_BYTE *)this + 956) && *((_BYTE *)this + 957) != 0;
}

uint64_t md::CaptionedIconLabelPart::collisionWillStart(uint64_t this)
{
  _BYTE *v1;
  uint64_t *v2;
  uint64_t *i;
  uint64_t v4;
  BOOL v5;

  v1 = (_BYTE *)this;
  v2 = *(uint64_t **)(this + 576);
  for (i = *(uint64_t **)(this + 584); v2 != i; this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 440))(v4))
    v4 = *v2++;
  v5 = v1[946] == 3 || v1[954] != 0;
  v1[953] = v5;
  v1[931] = 0;
  return this;
}

uint64_t md::CaptionedIconLabelPart::setCollisionResult(uint64_t this, uint64_t a2)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t *i;
  uint64_t v6;
  char v7;

  v3 = this;
  v4 = *(uint64_t **)(this + 576);
  for (i = *(uint64_t **)(this + 584);
        v4 != i;
        this = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 448))(v6, a2))
  {
    v6 = *v4++;
  }
  if ((_DWORD)a2)
  {
    v7 = *(_BYTE *)(v3 + 953);
    *(_BYTE *)(v3 + 680) = v7;
    if (*(_BYTE *)(*(_QWORD *)(v3 + 16) + 1260))
      *(_BYTE *)(v3 + 954) = v7;
  }
  return this;
}

uint64_t md::CurvedTextLabelPart::shouldSnapToDefaultPlacement(md::CurvedTextLabelPart *this)
{
  return *((unsigned __int8 *)this + 1467);
}

uint64_t `non-virtual thunk to'md::Label::collidesWithItem(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(**(_QWORD **)(a1 + 248) + 456))(*(_QWORD *)(a1 + 248), a2, 0);
}

uint64_t md::LabelCollisionItem::isAlwaysVisible(md::LabelCollisionItem *this)
{
  return *(unsigned __int8 *)(*((_QWORD *)this + 7) + 1246);
}

uint64_t md::LabelCollisionItem::nextPlacementCandidate(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  char v18;
  char v19;
  __int16 v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v27;
  int v28;
  char v29;

  v8 = *(_QWORD *)(a1 + 56);
  if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(v8 + 288) + 536))(*(_QWORD *)(v8 + 288)))
  {
    v28 = 150994944;
    v29 = 0;
    if ((*(unsigned int (**)(_QWORD, uint64_t, uint64_t, _QWORD, uint64_t, int *))(**(_QWORD **)(v8 + 288)
                                                                                          + 576))(*(_QWORD *)(v8 + 288), a4, a5, *(_QWORD *)(v8 + 328), a3, &v28))
    {
      if (__PAIR64__(BYTE1(v28), v28) != __PAIR64__(*(unsigned __int8 *)(v8 + 313), *(unsigned __int8 *)(v8 + 312))|| HIBYTE(v28) != *(unsigned __int8 *)(v8 + 315)|| HIBYTE(v28) == 10 && v29 != *(_BYTE *)(v8 + 316))
      {
        (*(void (**)(uint64_t *__return_ptr))(**(_QWORD **)(v8 + 288) + 600))(&v27);
        v9 = v27;
        v27 = 0;
        v10 = *(_QWORD *)(v8 + 1232);
        *(_QWORD *)(v8 + 1232) = v9;
        if (v10)
        {
          v11 = *(std::__shared_weak_count **)(v10 + 8);
          if (v11)
          {
            p_shared_owners = (unint64_t *)&v11->__shared_owners_;
            do
              v13 = __ldaxr(p_shared_owners);
            while (__stlxr(v13 - 1, p_shared_owners));
            if (!v13)
            {
              ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
              std::__shared_weak_count::__release_weak(v11);
            }
          }
          MEMORY[0x1A1AF4E00](v10, 0x20C40A4A59CD2);
          v14 = v27;
          v27 = 0;
          if (v14)
          {
            v15 = *(std::__shared_weak_count **)(v14 + 8);
            if (v15)
            {
              v16 = (unint64_t *)&v15->__shared_owners_;
              do
                v17 = __ldaxr(v16);
              while (__stlxr(v17 - 1, v16));
              if (!v17)
              {
                ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
                std::__shared_weak_count::__release_weak(v15);
              }
            }
            MEMORY[0x1A1AF4E00](v14, 0x20C40A4A59CD2);
          }
        }
        (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)(v8 + 288) + 448))(*(_QWORD *)(v8 + 288), 0);
        if (*(_QWORD *)(v8 + 288))
        {
          *(_QWORD *)(v8 + 288) = 0;
          *(_BYTE *)(v8 + 1247) = 1;
        }
        v18 = *(_BYTE *)(v8 + 312);
        v19 = *(_BYTE *)(v8 + 313);
        v20 = *(_WORD *)(v8 + 315);
        *(_BYTE *)(v8 + 321) = v29;
        *(_DWORD *)(v8 + 317) = v28;
        LOWORD(v27) = 257;
        BYTE2(v27) = 1;
        md::Label::layoutForStaging((md::Label *)v8, a4, 0, &v27);
        v21 = *(_QWORD *)(v8 + 1232);
        *(_QWORD *)(v8 + 1232) = 0;
        if (v21)
        {
          v22 = *(std::__shared_weak_count **)(v21 + 8);
          if (v22)
          {
            v23 = (unint64_t *)&v22->__shared_owners_;
            do
              v24 = __ldaxr(v23);
            while (__stlxr(v24 - 1, v23));
            if (!v24)
            {
              ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
              std::__shared_weak_count::__release_weak(v22);
            }
          }
          MEMORY[0x1A1AF4E00](v21, 0x20C40A4A59CD2);
        }
        if (!*(_BYTE *)(v8 + 1290))
        {
          if (!*(_BYTE *)(v8 + 1246))
            return 0;
          *(_BYTE *)(v8 + 317) = v18;
          *(_BYTE *)(v8 + 318) = v19;
          *(_BYTE *)(v8 + 319) = 0;
          *(_WORD *)(v8 + 320) = v20;
          LOWORD(v27) = 257;
          BYTE2(v27) = 1;
          md::Label::layoutForStaging((md::Label *)v8, a4, 0, &v27);
          if (!*(_BYTE *)(v8 + 1290))
            return 0;
        }
        v25 = *(_QWORD *)(v8 + 288);
        if (v25)
          (*(void (**)(uint64_t))(*(_QWORD *)v25 + 440))(v25);
      }
      return v8 + 40;
    }
  }
  return 0;
}

BOOL md::CaptionedIconLabelPart::supportsAlternatePlacements(uint64_t a1, unsigned int a2)
{
  if (a2 > 1 || !*(_BYTE *)(a1 + 926))
    return 0;
  if (*(_QWORD *)(a1 + 800) != *(_QWORD *)(a1 + 808))
    return 1;
  if (*(_BYTE *)(a1 + 946) == 1)
    return 1;
  return *(_BYTE *)(a1 + 794) != 0;
}

uint64_t md::LabelPartPlacementCandidate::collidesWithItem(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(**(_QWORD **)(a1 + 8) + 456))(*(_QWORD *)(a1 + 8), a2, *(unsigned __int8 *)(a1 + 16));
}

uint64_t md::LabelPartPlacementCandidate::collisionBounds(md::LabelPartPlacementCandidate *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 248))(*((_QWORD *)this + 1));
}

uint64_t md::CaptionedIconLabelPart::findAlternatePlacement(md::CaptionedIconLabelPart *a1, uint64_t a2, md::LabelCollider *a3, md::LabelCollidableItem *a4, uint64_t a5, uint64_t a6)
{
  char v11;
  int v12;
  int v13;

  if ((md::CaptionedIconLabelPart::collideIconPart(a1, *(const md::LabelManager **)(a2 + 432), a3, a4) & 1) == 0)
  {
    if (*(_BYTE *)(a2 + 3624))
    {
      if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a2 + 168) + 32) + 8))(*(_QWORD *)(*(_QWORD *)(a2 + 168) + 32)) & 1) == 0)
      {
        v11 = (*(uint64_t (**)(md::CaptionedIconLabelPart *))(*(_QWORD *)a1 + 560))(a1);
        if (md::CaptionedIconLabelPart::tryAlternatePlacements((uint64_t)a1, v11, 0, 0, a2, (uint64_t)a3, a4, a6))
          return 1;
      }
    }
    v12 = *((unsigned __int8 *)a1 + 946);
    if (v12 == 1)
      goto LABEL_10;
    if (v12 == 2)
    {
      if (*(_BYTE *)(*((_QWORD *)a1 + 2) + 1246))
      {
LABEL_11:
        v13 = *((_DWORD *)a1 + 208);
        *(_BYTE *)(a6 + 4) = *((_BYTE *)a1 + 836);
        *(_DWORD *)a6 = v13;
        return 1;
      }
      if (*((_BYTE *)a1 + 794))
      {
        (*(void (**)(_QWORD, _QWORD))(***((_QWORD ***)a1 + 72) + 216))(**((_QWORD **)a1 + 72), *((unsigned __int8 *)a1 + 795));
LABEL_10:
        *((_BYTE *)a1 + 953) = 1;
        goto LABEL_11;
      }
    }
  }
  return 0;
}

uint64_t md::CaptionedIconLabelPart::collideIconPart(md::CaptionedIconLabelPart *this, const md::LabelManager *a2, md::LabelCollider *a3, md::LabelCollidableItem *a4)
{
  uint64_t v5;
  _QWORD *v7;
  uint64_t v8;
  float v10;
  float v11;
  float v12;
  int v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  char v25;
  char v26;
  _QWORD v27[2];
  char v28;

  if (*((_BYTE *)this + 931))
    return *((unsigned __int8 *)this + 932);
  *((_BYTE *)this + 931) = 1;
  if (!*((_BYTE *)this + 925) || (v5 = *((_QWORD *)this + 2), *(_BYTE *)(v5 + 1259)))
  {
    *((_BYTE *)this + 932) = 0;
    *(_OWORD *)((char *)this + 872) = 0u;
    return *((unsigned __int8 *)this + 932);
  }
  v7 = (_QWORD *)*((_QWORD *)this + 72);
  v8 = *v7;
  if (*(_BYTE *)(v5 + 1246))
  {
    if ((*(float (**)(_QWORD, const md::LabelManager *, md::LabelCollider *, md::LabelCollidableItem *))(*(_QWORD *)v8 + 264))(*v7, a2, a3, a4) < *((float *)a2 + 276)|| v11 > *((float *)a2 + 278)|| v10 < *((float *)a2 + 277)|| v12 > *((float *)a2 + 279))
    {
      *((_BYTE *)this + 932) = 1;
      return *((unsigned __int8 *)this + 932);
    }
    *((_BYTE *)this + 932) = 0;
    goto LABEL_15;
  }
  v27[0] = &off_1E42A3CE8;
  v27[1] = v8;
  v28 = 0;
  v26 = 1;
  v13 = md::LabelCollider::collideCandidate((uint64_t)a3, a4, (uint64_t)v27, (uint64_t)&v25) ^ 1;
  if (v26)
    v13 = 1;
  *((_BYTE *)this + 932) = v13;
  if (!v13)
  {
LABEL_15:
    v14 = (*(float (**)(uint64_t))(*(_QWORD *)v8 + 264))(v8);
    if (v16 < v14 || v17 < v15)
    {
      v22 = 3.4028e38;
      v24 = -3.4028e38;
      v23 = -3.4028e38;
      v20 = 3.4028e38;
    }
    else
    {
      v19 = *((float *)this + 70);
      v20 = v14 - v19;
      v21 = *((float *)this + 71);
      v22 = v15 - v21;
      v23 = v16 - v19;
      v24 = v17 - v21;
    }
    *((float *)this + 218) = v20;
    *((float *)this + 219) = v22;
    *((float *)this + 220) = v23;
    *((float *)this + 221) = v24;
  }
  return *((unsigned __int8 *)this + 932);
}

uint64_t md::LabelPart::shouldSnapToDefaultPlacement(md::LabelPart *this)
{
  return 0;
}

BOOL md::CurvedTextLabelPart::supportsAlternatePlacements(uint64_t a1, unsigned int a2, uint64_t a3)
{
  _BOOL8 result;
  unsigned __int8 *v5;
  int v6;
  uint64_t v8;
  uint64_t v9;
  char v10[4];
  float32x2_t v11;

  result = 0;
  if (a2 <= 1 && *(_BYTE *)(a1 + 1468) == 2)
  {
    if (*(_BYTE *)(a1 + 1461) != 8)
      return 0;
    v5 = *(unsigned __int8 **)(a3 + 8);
    v6 = v5[52];
    if ((v6 & 0xFFFFFFFD) != 1)
      return 0;
    if (v6 != 3 || *(_BYTE *)(a3 + 1) == 0)
      return 1;
    (*(void (**)(char *__return_ptr))(*(_QWORD *)v5 + 48))(v10);
    if (!v10[0])
      return 1;
    v8 = *(_QWORD *)(a1 + 1008);
    v9 = 24;
    if (!*(_BYTE *)(v8 + 197))
      v9 = 16;
    return fabsf(vaddv_f32(vmul_f32(*(float32x2_t *)(v8 + v9), v11))) >= 0.8;
  }
  return result;
}

void md::IconLabelPart::generateModelMatrix(__int128 *a1, uint64_t a2, int a3, float32x2_t *a4, float a5, __n128 a6, float32x4_t a7, float a8, double a9, double a10, double a11, float32x4_t a12)
{
  float v15;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __float2 v25;
  float32x2_t v26;
  float64x2_t v27;
  double v28;
  float64x2_t v34;
  double v35;
  float64x2_t v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __n128 v41;
  float32x4_t v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  float64x2_t v49;
  __int128 v50;
  float64x2_t v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  float64x2_t v57;
  __int128 v58;

  if (a1)
  {
    if (a2)
      a8 = 1.0;
    v15 = a8 * a7.f32[0];
    a12.f32[0] = fabsf((float)(a8 * a7.f32[0]) + -1.0);
    if (a5 != 0.0)
      a3 = 1;
    v51.f64[0] = 0.0;
    if (*(_QWORD *)a4 || (a3 & 1) != 0 || a12.f32[0] > 0.000001)
    {
      if (a3)
      {
        if (a5 != 0.0)
        {
          v41 = a6;
          v42 = a12;
          v25 = __sincosf_stret(a5);
          a7.i64[1] = v41.n128_i64[1];
          a12 = v42;
          v26 = (float32x2_t)vrev64_s32((int32x2_t)vmul_n_f32((float32x2_t)v41.n128_u64[0], v25.__sinval));
          *(float32x2_t *)a7.f32 = vmul_n_f32((float32x2_t)v41.n128_u64[0], v25.__cosval);
          a6.n128_u32[0] = vsub_f32(*(float32x2_t *)a7.f32, v26).u32[0];
          a6.n128_u32[1] = vadd_f32(*(float32x2_t *)&a7, v26).u32[1];
        }
        v27 = vcvtq_f64_f32((float32x2_t)a6.n128_u64[0]);
        v28 = (float)-a6.n128_f32[1];
      }
      else
      {
        v27 = (float64x2_t)xmmword_19FFB32C0;
        v28 = 0.0;
      }
      a7.i32[0] = 897988541;
      __asm { FMOV            V6.2D, #1.0 }
      v34 = (float64x2_t)vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vcgtq_f32(a12, a7), 0), (int8x16_t)vdupq_lane_s64(COERCE__INT64(v15), 0), _Q6);
      v35 = 1.0;
      if (a12.f32[0] > 0.000001)
        v35 = v15;
      v36 = vmulq_f64(v27, v34);
      *(double *)&v53 = v28 * v35;
      *((_QWORD *)&v53 + 1) = *(_QWORD *)&v36.f64[0];
      v56 = *(unint64_t *)&v35;
      v51 = v36;
      v52 = 0u;
      v54 = 0u;
      v55 = 0u;
      v57 = vcvtq_f64_f32(*a4);
      v58 = xmmword_19FFB33A0;
      if (a2)
      {
        gm::operator*<double,4,4,4>((double *)&v43, (double *)a2, v51.f64);
      }
      else
      {
        v47 = v55;
        v48 = v56;
        v49 = v57;
        v50 = v58;
        v43 = (__int128)v51;
        v44 = v52;
        v45 = v53;
        v46 = v54;
      }
      v37 = v44;
      *a1 = v43;
      a1[1] = v37;
      v38 = v46;
      a1[2] = v45;
      a1[3] = v38;
      v39 = v48;
      a1[4] = v47;
      a1[5] = v39;
      v40 = v50;
      a1[6] = (__int128)v49;
      a1[7] = v40;
    }
    else
    {
      if (a2)
      {
        v17 = *(_OWORD *)a2;
        v18 = *(_OWORD *)(a2 + 16);
        v19 = *(_OWORD *)(a2 + 32);
        v20 = *(_OWORD *)(a2 + 48);
        v21 = *(_OWORD *)(a2 + 64);
        v22 = *(_OWORD *)(a2 + 80);
        v23 = *(_OWORD *)(a2 + 96);
        v24 = *(_OWORD *)(a2 + 112);
      }
      else
      {
        v19 = xmmword_19FFB33A0;
        v17 = xmmword_19FFB32C0;
        v18 = 0uLL;
        v20 = 0uLL;
        v21 = 0uLL;
        v22 = xmmword_19FFB32C0;
        v23 = 0uLL;
        v24 = xmmword_19FFB33A0;
      }
      *a1 = v17;
      a1[1] = v18;
      a1[2] = v19;
      a1[3] = v20;
      a1[4] = v21;
      a1[5] = v22;
      a1[6] = v23;
      a1[7] = v24;
    }
  }
}

void md::DaVinciMaterialResourceDecoder::decode(const gdc::ResourceKey *a1@<X1>, const gdc::RawResourceSourceData *a2@<X2>, uint64_t *a3@<X8>)
{
  uint64_t v7;
  geo::codec::Allocator *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  _QWORD v18[2];
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  int8x8_t v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  int v28;
  __int128 v29;
  __int128 v30;
  int v31;
  __int128 v32;
  __int128 v33;
  int v34;
  __int128 v35;
  __int128 v36;
  int v37;
  __int128 v38;
  __int128 v39;
  int v40;
  __int128 v41;
  __int128 v42;
  int v43;
  __int128 v44;
  __int128 v45;
  int v46;
  __int128 v47;
  __int128 v48;
  int v49;
  __int128 v50;
  __int128 v51;
  int v52;
  __int128 v53;
  __int128 v54;
  int v55;
  __int16 v56;
  __int128 v57;
  __int128 v58;
  int v59;
  int v60;
  __int128 v61;
  uint64_t v62;
  uint64_t v63;
  _QWORD v64[3];
  char v65;

  if (*(_QWORD *)a2)
  {
    v7 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)a2 + 32))(*(_QWORD *)a2);
    v8 = (geo::codec::Allocator *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)a2 + 24))(*(_QWORD *)a2);
    v64[0] = v7;
    v64[1] = v8;
    v64[2] = 0;
    v65 = 0;
    v22.i16[0] = 0;
    v23 = 0u;
    v24 = 0u;
    v25 = 0u;
    v26 = 0u;
    v27 = 0u;
    v28 = 1065353216;
    v29 = 0u;
    v30 = 0u;
    v32 = 0u;
    v33 = 0u;
    v31 = 1065353216;
    v34 = 1065353216;
    v35 = 0u;
    v36 = 0u;
    v39 = 0u;
    v38 = 0u;
    v37 = 1065353216;
    v40 = 1065353216;
    v41 = 0u;
    v42 = 0u;
    v43 = 1065353216;
    v44 = 0u;
    v45 = 0u;
    v46 = 1065353216;
    v47 = 0u;
    v48 = 0u;
    v49 = 1065353216;
    v50 = 0u;
    v51 = 0u;
    v52 = 1065353216;
    v53 = 0u;
    v54 = 0u;
    v55 = 1065353216;
    v56 = 0;
    v57 = 0u;
    v58 = 0u;
    v59 = 0;
    v60 = 1065353216;
    v62 = 0;
    v61 = 0u;
    v63 = geo::codec::Allocator::instance(v8);
    if (geo::codec::MaterialSheet::decodeExternalMaterial((geo::codec::MaterialSheet *)&v22, (geo::ibitstream *)v64))
    {
      md::DaVinciMaterialResourceDecoder::translateFromCodec((md::DaVinciMaterialResourceDecoder *)v18, &v22, **((_QWORD **)a1 + 1));
      v9 = (char *)operator new(0xE0uLL);
      *((_QWORD *)v9 + 1) = 0;
      *((_QWORD *)v9 + 2) = 0;
      *(_QWORD *)v9 = &off_1E42DCC80;
      v10 = v21;
      v11 = gdc::Resource::Resource((uint64_t)(v9 + 24), (uint64_t)a1);
      v12 = (std::__shared_weak_count *)v18[1];
      *((_QWORD *)v9 + 21) = v18[0];
      *((_QWORD *)v9 + 22) = v12;
      if (v12)
      {
        p_shared_owners = (unint64_t *)&v12->__shared_owners_;
        do
          v14 = __ldxr(p_shared_owners);
        while (__stxr(v14 + 1, p_shared_owners));
      }
      *(_OWORD *)(v9 + 184) = v19;
      v15 = v20;
      v20 = 0;
      v19 = 0uLL;
      *((_QWORD *)v9 + 25) = v15;
      *((_QWORD *)v9 + 26) = v10;
      *((_QWORD *)v9 + 27) = **((_QWORD **)a1 + 1);
      *a3 = v11;
      a3[1] = (uint64_t)v9;
      if (v12)
      {
        v16 = (unint64_t *)&v12->__shared_owners_;
        do
          v17 = __ldaxr(v16);
        while (__stlxr(v17 - 1, v16));
        if (!v17)
        {
          ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
          std::__shared_weak_count::__release_weak(v12);
        }
      }
    }
    else
    {
      *a3 = 0;
      a3[1] = 0;
    }
    geo::codec::MaterialSheet::~MaterialSheet((geo::codec::MaterialSheet *)&v22);
  }
  else
  {
    *a3 = 0;
    a3[1] = 0;
  }
}

void sub_19F1190DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  md::DecodedMaterialSheetResult::~DecodedMaterialSheetResult((md::DecodedMaterialSheetResult *)&a9);
  geo::codec::MaterialSheet::~MaterialSheet((geo::codec::MaterialSheet *)&a15);
  _Unwind_Resume(a1);
}

uint64_t gdc::DataObject::bytes(id *this)
{
  return objc_msgSend(objc_retainAutorelease(this[2]), "bytes");
}

{
  return objc_msgSend(objc_retainAutorelease(this[2]), "bytes");
}

void geo::codec::MaterialSheet::~MaterialSheet(geo::codec::MaterialSheet *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  void *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;

  v2 = *((_QWORD *)this + 64);
  if (v2)
  {
    v3 = *((_QWORD *)this + 65);
    v4 = *((_QWORD *)this + 64);
    if (v3 != v2)
    {
      v5 = *((_QWORD *)this + 65);
      do
      {
        v7 = *(_QWORD *)(v5 - 40);
        v5 -= 40;
        v6 = v7;
        if (v7)
        {
          *(_QWORD *)(v3 - 32) = v6;
          (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 - 16) + 40))(*(_QWORD *)(v3 - 16), v6, *(_QWORD *)(v3 - 24) - v6);
        }
        v3 = v5;
      }
      while (v5 != v2);
      v4 = *((_QWORD *)this + 64);
    }
    *((_QWORD *)this + 65) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 67) + 40))(*((_QWORD *)this + 67), v4, *((_QWORD *)this + 66) - v4);
  }
  geo::codec::MaterialSheet::Material::~Material((geo::codec::MaterialSheet *)((char *)this + 56));
  v8 = *((_QWORD *)this + 4);
  if (v8)
  {
    v9 = *((_QWORD *)this + 5);
    v10 = (void *)*((_QWORD *)this + 4);
    if (v9 != v8)
    {
      v11 = *((_QWORD *)this + 5);
      do
      {
        v13 = *(void **)(v11 - 24);
        v11 -= 24;
        v12 = v13;
        if (v13)
        {
          *(_QWORD *)(v9 - 16) = v12;
          operator delete(v12);
        }
        v9 = v11;
      }
      while (v11 != v8);
      v10 = (void *)*((_QWORD *)this + 4);
    }
    *((_QWORD *)this + 5) = v8;
    operator delete(v10);
  }
  v14 = *((_QWORD *)this + 1);
  if (v14)
  {
    v15 = *((_QWORD *)this + 2);
    v16 = (void *)*((_QWORD *)this + 1);
    if (v15 != v14)
    {
      do
        geo::codec::MaterialSheet::Material::~Material((geo::codec::MaterialSheet::Material *)(v15 - 456));
      while (v15 != v14);
      v16 = (void *)*((_QWORD *)this + 1);
    }
    *((_QWORD *)this + 2) = v14;
    operator delete(v16);
  }
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  void *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;

  v2 = *((_QWORD *)this + 64);
  if (v2)
  {
    v3 = *((_QWORD *)this + 65);
    v4 = *((_QWORD *)this + 64);
    if (v3 != v2)
    {
      v5 = *((_QWORD *)this + 65);
      do
      {
        v7 = *(_QWORD *)(v5 - 40);
        v5 -= 40;
        v6 = v7;
        if (v7)
        {
          *(_QWORD *)(v3 - 32) = v6;
          (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 - 16) + 40))(*(_QWORD *)(v3 - 16), v6, *(_QWORD *)(v3 - 24) - v6);
        }
        v3 = v5;
      }
      while (v5 != v2);
      v4 = *((_QWORD *)this + 64);
    }
    *((_QWORD *)this + 65) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 67) + 40))(*((_QWORD *)this + 67), v4, *((_QWORD *)this + 66) - v4);
  }
  geo::codec::MaterialSheet::Material::~Material((geo::codec::MaterialSheet *)((char *)this + 56));
  v8 = *((_QWORD *)this + 4);
  if (v8)
  {
    v9 = *((_QWORD *)this + 5);
    v10 = (void *)*((_QWORD *)this + 4);
    if (v9 != v8)
    {
      v11 = *((_QWORD *)this + 5);
      do
      {
        v13 = *(void **)(v11 - 24);
        v11 -= 24;
        v12 = v13;
        if (v13)
        {
          *(_QWORD *)(v9 - 16) = v12;
          operator delete(v12);
        }
        v9 = v11;
      }
      while (v11 != v8);
      v10 = (void *)*((_QWORD *)this + 4);
    }
    *((_QWORD *)this + 5) = v8;
    operator delete(v10);
  }
  v14 = *((_QWORD *)this + 1);
  if (v14)
  {
    v15 = *((_QWORD *)this + 2);
    v16 = (void *)*((_QWORD *)this + 1);
    if (v15 != v14)
    {
      do
        geo::codec::MaterialSheet::Material::~Material((geo::codec::MaterialSheet::Material *)(v15 - 456));
      while (v15 != v14);
      v16 = (void *)*((_QWORD *)this + 1);
    }
    *((_QWORD *)this + 2) = v14;
    operator delete(v16);
  }
}

geo::codec::MaterialSheet::Material *geo::codec::MaterialSheet::Material::Material(geo::codec::MaterialSheet::Material *this, const geo::codec::MaterialSheet::Material *a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  geo::codec::MaterialSheet::Material *v6;
  size_t prime;
  unint64_t v8;
  uint8x8_t v9;
  uint64_t ***v10;
  uint64_t **v11;
  unint64_t v12;
  uint64_t *v13;
  _QWORD *v14;
  uint64_t v15;
  int64_t v16;
  unint64_t v17;
  char *v18;
  float v19;
  float v20;
  _BOOL8 v21;
  unint64_t v22;
  unint64_t v23;
  size_t v24;
  unint64_t v25;
  uint8x8_t v26;
  uint64_t v27;
  _QWORD *v28;
  unint64_t v29;
  _QWORD *v30;
  size_t v31;
  uint64_t *v32;
  _QWORD *v33;
  unint64_t v34;
  uint8x8_t v35;
  uint64_t ***v36;
  uint64_t **v37;
  unint64_t v38;
  uint64_t *v39;
  _QWORD *v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  float v44;
  float v45;
  _BOOL8 v46;
  unint64_t v47;
  unint64_t v48;
  size_t v49;
  unint64_t v50;
  uint8x8_t v51;
  uint64_t v52;
  _QWORD *v53;
  unint64_t v54;
  size_t v55;
  uint64_t *v56;
  _QWORD *v57;
  uint8x8_t v58;
  uint64_t ***v59;
  uint64_t **v60;
  unint64_t v61;
  uint64_t *v62;
  _QWORD *v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  size_t v67;
  float v68;
  float v69;
  _BOOL8 v70;
  unint64_t v71;
  unint64_t v72;
  size_t v73;
  unint64_t v74;
  uint8x8_t v75;
  uint64_t v76;
  _QWORD *v77;
  unint64_t v78;
  _QWORD *v79;
  size_t v80;
  uint64_t *v81;
  _QWORD *v82;
  uint8x8_t v83;
  uint64_t ***v84;
  uint64_t **v85;
  unint64_t v86;
  uint64_t *v87;
  _QWORD *v88;
  uint64_t v89;
  size_t v90;
  char *v91;
  size_t v92;
  float v93;
  float v94;
  _BOOL8 v95;
  unint64_t v96;
  unint64_t v97;
  size_t v98;
  unint64_t v99;
  uint8x8_t v100;
  uint64_t v101;
  _QWORD *v102;
  unint64_t v103;
  size_t v104;
  unint64_t v105;
  _QWORD *v106;
  unint64_t v107;
  uint8x8_t v108;
  uint64_t ***v109;
  uint64_t **v110;
  unint64_t v111;
  uint64_t *v112;
  _QWORD *v113;
  uint64_t v114;
  uint64_t v115;
  char *v116;
  size_t v117;
  float v118;
  float v119;
  _BOOL8 v120;
  unint64_t v121;
  unint64_t v122;
  size_t v123;
  unint64_t v124;
  uint8x8_t v125;
  uint64_t v126;
  _QWORD *v127;
  unint64_t v128;
  _QWORD *v129;
  size_t v130;
  uint64_t *v131;
  _QWORD *v132;
  unint64_t v133;
  uint8x8_t v134;
  uint64_t ***v135;
  uint64_t **v136;
  unint64_t v137;
  uint64_t *v138;
  _QWORD *v139;
  uint64_t v140;
  size_t v141;
  char *v142;
  size_t v143;
  float v144;
  float v145;
  _BOOL8 v146;
  unint64_t v147;
  unint64_t v148;
  size_t v149;
  unint64_t v150;
  uint8x8_t v151;
  uint64_t v152;
  _QWORD *v153;
  unint64_t v154;
  _QWORD *v155;
  size_t v156;
  uint64_t *v157;
  unint64_t v158;
  unint64_t v159;
  uint8x8_t v160;
  uint64_t ***v161;
  uint64_t **v162;
  unint64_t v163;
  uint64_t *v164;
  _QWORD *v165;
  uint64_t v166;
  int64_t v167;
  char *v168;
  size_t v169;
  float v170;
  float v171;
  _BOOL8 v172;
  unint64_t v173;
  unint64_t v174;
  size_t v175;
  unint64_t v176;
  uint8x8_t v177;
  uint64_t v178;
  _QWORD *v179;
  unint64_t v180;
  size_t v181;
  uint64_t *v182;
  unint64_t v183;
  unint64_t v184;
  uint8x8_t v185;
  uint64_t ***v186;
  uint64_t **v187;
  unint64_t v188;
  uint64_t *v189;
  _QWORD *v190;
  char *v191;
  char *v192;
  int64_t v193;
  unint64_t v194;
  char *v195;
  float v196;
  float v197;
  _BOOL8 v198;
  unint64_t v199;
  unint64_t v200;
  size_t v201;
  unint64_t v202;
  uint8x8_t v203;
  uint64_t v204;
  _QWORD *v205;
  unint64_t v206;
  size_t v207;
  uint64_t *v208;
  unint64_t v209;
  unint64_t v210;
  uint8x8_t v211;
  uint64_t ***v212;
  uint64_t **v213;
  unint64_t v214;
  uint64_t *v215;
  _QWORD *v216;
  char *v217;
  char *v218;
  int64_t v219;
  unint64_t v220;
  char *v221;
  float v222;
  float v223;
  _BOOL8 v224;
  unint64_t v225;
  unint64_t v226;
  size_t v227;
  unint64_t v228;
  uint8x8_t v229;
  uint64_t v230;
  _QWORD *v231;
  unint64_t v232;
  _QWORD *v233;
  size_t v234;
  uint64_t *v235;
  _QWORD *v236;
  unint64_t v237;
  unint64_t v238;
  uint8x8_t v239;
  uint64_t ***v240;
  uint64_t **v241;
  unint64_t v242;
  uint64_t *v243;
  _QWORD *v244;
  _BYTE *v245;
  _BYTE *v246;
  uint64_t v247;
  char *v248;
  size_t v249;
  float v250;
  float v251;
  _BOOL8 v252;
  unint64_t v253;
  unint64_t v254;
  size_t v255;
  unint64_t v256;
  uint8x8_t v257;
  uint64_t v258;
  _QWORD *v259;
  unint64_t v260;
  uint64_t *v261;
  size_t v262;
  uint64_t *v263;
  _QWORD *v264;
  unint64_t v265;
  unint64_t v266;
  uint8x8_t v267;
  uint64_t ***v268;
  uint64_t **v269;
  unint64_t v270;
  uint64_t *v271;
  _QWORD *v272;
  float v273;
  float v274;
  _BOOL8 v275;
  unint64_t v276;
  unint64_t v277;
  size_t v278;
  unint64_t v279;
  uint8x8_t v280;
  uint64_t v281;
  uint64_t v282;
  _QWORD *v283;
  unint64_t v284;
  int8x8_t v286;
  BOOL v287;
  BOOL v288;
  BOOL v289;
  BOOL v290;
  BOOL v291;
  BOOL v292;
  BOOL v293;
  BOOL v294;
  BOOL v295;
  BOOL v296;
  BOOL v297;
  unint64_t v298;
  uint8x8_t v299;
  uint64_t v300;
  unint64_t v301;
  uint8x8_t v302;
  uint64_t v303;
  unint64_t v304;
  uint8x8_t v305;
  uint64_t v306;
  unint64_t v307;
  uint8x8_t v308;
  uint64_t v309;
  unint64_t v310;
  uint8x8_t v311;
  uint64_t v312;
  unint64_t v313;
  uint8x8_t v314;
  uint64_t v315;
  unint64_t v316;
  uint8x8_t v317;
  uint64_t v318;
  unint64_t v319;
  uint8x8_t v320;
  uint64_t v321;
  unint64_t v322;
  uint8x8_t v323;
  uint64_t v324;
  unint64_t v325;
  uint8x8_t v326;
  uint64_t v327;
  unint64_t v328;
  uint8x8_t v329;
  uint64_t v330;
  _QWORD *v332;
  _QWORD *v334;
  _QWORD *v335;
  _QWORD *v336;
  uint64_t *v337;
  _QWORD *v338;
  _QWORD *v339;
  _QWORD *v340;
  _QWORD *v341;
  _QWORD *v342;
  _QWORD *v343;
  _QWORD *v344;
  _QWORD *v345;
  _QWORD *v346;
  _QWORD *v347;
  _QWORD *v348;
  _QWORD *v349;
  _QWORD *v350;
  _QWORD *v351;

  v6 = this;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
  prime = *((_QWORD *)a2 + 1);
  if (prime == 1)
  {
    prime = 2;
LABEL_3:
    std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>((uint64_t)v6, prime);
    goto LABEL_4;
  }
  if ((prime & (prime - 1)) != 0)
  {
    prime = std::__next_prime(prime);
    v286 = *(int8x8_t *)((char *)v6 + 8);
    v287 = prime >= *(_QWORD *)&v286;
    if (prime > *(_QWORD *)&v286)
      goto LABEL_3;
  }
  else
  {
    v286 = 0;
    v287 = 1;
    if (prime)
      goto LABEL_3;
  }
  if (!v287)
  {
    v298 = vcvtps_u32_f32((float)*((unint64_t *)v6 + 3) / *((float *)v6 + 8));
    if (*(_QWORD *)&v286 < 3uLL || (v299 = (uint8x8_t)vcnt_s8(v286), v299.i16[0] = vaddlv_u8(v299), v299.u32[0] > 1uLL))
    {
      v298 = std::__next_prime(v298);
    }
    else
    {
      v300 = 1 << -(char)__clz(v298 - 1);
      if (v298 >= 2)
        v298 = v300;
    }
    if (prime <= v298)
      prime = v298;
    if (prime < *(_QWORD *)&v286)
      goto LABEL_3;
  }
LABEL_4:
  v8 = *((_QWORD *)a2 + 2);
  if (v8)
  {
    v4 = *((_QWORD *)v6 + 1);
    do
    {
      v5 = *(unsigned __int8 *)(v8 + 16);
      if (v4)
      {
        v9 = (uint8x8_t)vcnt_s8((int8x8_t)v4);
        v9.i16[0] = vaddlv_u8(v9);
        if (v9.u32[0] > 1uLL)
        {
          v2 = *(unsigned __int8 *)(v8 + 16);
          if (v4 <= v5)
            v2 = v5 % v4;
        }
        else
        {
          v2 = ((_DWORD)v4 - 1) & v5;
        }
        v10 = *(uint64_t ****)(*(_QWORD *)v6 + 8 * v2);
        if (v10)
        {
          v11 = *v10;
          if (v11)
          {
            if (v9.u32[0] < 2uLL)
            {
              while (1)
              {
                v13 = v11[1];
                if (v13 == (uint64_t *)v5)
                {
                  if (*((unsigned __int8 *)v11 + 16) == (_DWORD)v5)
                    goto LABEL_68;
                }
                else if (((unint64_t)v13 & (v4 - 1)) != v2)
                {
                  goto LABEL_26;
                }
                v11 = (uint64_t **)*v11;
                if (!v11)
                  goto LABEL_26;
              }
            }
            do
            {
              v12 = (unint64_t)v11[1];
              if (v12 == v5)
              {
                if (*((unsigned __int8 *)v11 + 16) == (_DWORD)v5)
                  goto LABEL_68;
              }
              else
              {
                if (v12 >= v4)
                  v12 %= v4;
                if (v12 != v2)
                  break;
              }
              v11 = (uint64_t **)*v11;
            }
            while (v11);
          }
        }
      }
LABEL_26:
      v14 = operator new(0x30uLL);
      v342 = v14;
      *v14 = 0;
      v14[1] = v5;
      *((_BYTE *)v14 + 16) = *(_BYTE *)(v8 + 16);
      v14[4] = 0;
      v14[5] = 0;
      v14[3] = 0;
      v15 = *(_QWORD *)(v8 + 24);
      v3 = *(_QWORD *)(v8 + 32);
      v16 = v3 - v15;
      if (v3 != v15)
      {
        v17 = 0xCCCCCCCCCCCCCCCDLL * (v16 >> 2);
        if (v17 >= 0xCCCCCCCCCCCCCCDLL)
          abort();
        v18 = (char *)operator new(v16);
        v14[3] = v18;
        v14[4] = v18;
        v14[5] = &v18[20 * v17];
        do
        {
          *(_WORD *)v18 = *(_WORD *)v15;
          *(_OWORD *)(v18 + 4) = *(_OWORD *)(v15 + 4);
          v18 += 20;
          v15 += 20;
        }
        while (v15 != v3);
        v14[4] = v18;
      }
      v19 = (float)(unint64_t)(*((_QWORD *)v6 + 3) + 1);
      v20 = *((float *)v6 + 8);
      if (!v4 || (float)(v20 * (float)v4) < v19)
      {
        v21 = (v4 & (v4 - 1)) != 0;
        if (v4 < 3)
          v21 = 1;
        v22 = v21 | (2 * v4);
        v23 = vcvtps_u32_f32(v19 / v20);
        if (v22 <= v23)
          v24 = v23;
        else
          v24 = v22;
        if (v24 == 1)
        {
          v24 = 2;
        }
        else if ((v24 & (v24 - 1)) != 0)
        {
          v24 = std::__next_prime(v24);
          v4 = *((_QWORD *)v6 + 1);
        }
        if (v24 > v4)
          goto LABEL_43;
        if (v24 < v4)
        {
          v25 = vcvtps_u32_f32((float)*((unint64_t *)v6 + 3) / *((float *)v6 + 8));
          if (v4 < 3 || (v26 = (uint8x8_t)vcnt_s8((int8x8_t)v4), v26.i16[0] = vaddlv_u8(v26), v26.u32[0] > 1uLL))
          {
            v25 = std::__next_prime(v25);
          }
          else
          {
            v27 = 1 << -(char)__clz(v25 - 1);
            if (v25 >= 2)
              v25 = v27;
          }
          if (v24 <= v25)
            v24 = v25;
          if (v24 < v4)
LABEL_43:
            std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>((uint64_t)v6, v24);
        }
        v4 = *((_QWORD *)v6 + 1);
        if ((v4 & (v4 - 1)) != 0)
        {
          if (v4 <= v5)
            v2 = v5 % v4;
          else
            v2 = v5;
        }
        else
        {
          v2 = ((_DWORD)v4 - 1) & v5;
        }
      }
      v28 = *(_QWORD **)(*(_QWORD *)v6 + 8 * v2);
      if (v28)
      {
        *v342 = *v28;
        *v28 = v342;
      }
      else
      {
        *v342 = *((_QWORD *)v6 + 2);
        *((_QWORD *)v6 + 2) = v342;
        *(_QWORD *)(*(_QWORD *)v6 + 8 * v2) = (char *)v6 + 16;
        if (*v342)
        {
          v29 = *(_QWORD *)(*v342 + 8);
          if ((v4 & (v4 - 1)) != 0)
          {
            if (v29 >= v4)
              v29 %= v4;
          }
          else
          {
            v29 &= v4 - 1;
          }
          *(_QWORD *)(*(_QWORD *)v6 + 8 * v29) = v342;
        }
      }
      ++*((_QWORD *)v6 + 3);
LABEL_68:
      v8 = *(_QWORD *)v8;
    }
    while (v8);
  }
  *(_OWORD *)((char *)v6 + 40) = 0u;
  v30 = (_QWORD *)((char *)v6 + 40);
  *(_OWORD *)((char *)v6 + 56) = 0u;
  *((_DWORD *)v6 + 18) = *((_DWORD *)a2 + 18);
  v31 = *((_QWORD *)a2 + 6);
  if (v31 == 1)
  {
    v31 = 2;
LABEL_71:
    std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>((uint64_t)v6 + 40, v31);
    goto LABEL_72;
  }
  if ((v31 & (v31 - 1)) != 0)
  {
    v31 = std::__next_prime(v31);
    v8 = *((_QWORD *)v6 + 6);
    v288 = v31 >= v8;
    if (v31 > v8)
      goto LABEL_71;
  }
  else
  {
    v8 = 0;
    v288 = 1;
    if (v31)
      goto LABEL_71;
  }
  if (!v288)
  {
    v301 = vcvtps_u32_f32((float)*((unint64_t *)v6 + 8) / *((float *)v6 + 18));
    if (v8 < 3 || (v302 = (uint8x8_t)vcnt_s8((int8x8_t)v8), v302.i16[0] = vaddlv_u8(v302), v302.u32[0] > 1uLL))
    {
      v301 = std::__next_prime(v301);
    }
    else
    {
      v303 = 1 << -(char)__clz(v301 - 1);
      if (v301 >= 2)
        v301 = v303;
    }
    if (v31 <= v301)
      v31 = v301;
    if (v31 < v8)
      goto LABEL_71;
  }
LABEL_72:
  v32 = (uint64_t *)*((_QWORD *)a2 + 7);
  if (v32)
  {
    v33 = (_QWORD *)((char *)v6 + 56);
    v34 = *((_QWORD *)v6 + 6);
    do
    {
      v3 = *((unsigned __int8 *)v32 + 16);
      if (v34)
      {
        v35 = (uint8x8_t)vcnt_s8((int8x8_t)v34);
        v35.i16[0] = vaddlv_u8(v35);
        if (v35.u32[0] > 1uLL)
        {
          v4 = *((unsigned __int8 *)v32 + 16);
          if (v34 <= v3)
            v4 = v3 % v34;
        }
        else
        {
          v4 = ((_DWORD)v34 - 1) & v3;
        }
        v36 = *(uint64_t ****)(*v30 + 8 * v4);
        if (v36)
        {
          v37 = *v36;
          if (v37)
          {
            if (v35.u32[0] < 2uLL)
            {
              while (1)
              {
                v39 = v37[1];
                if (v39 == (uint64_t *)v3)
                {
                  if (*((unsigned __int8 *)v37 + 16) == (_DWORD)v3)
                    goto LABEL_137;
                }
                else if (((unint64_t)v39 & (v34 - 1)) != v4)
                {
                  goto LABEL_94;
                }
                v37 = (uint64_t **)*v37;
                if (!v37)
                  goto LABEL_94;
              }
            }
            do
            {
              v38 = (unint64_t)v37[1];
              if (v38 == v3)
              {
                if (*((unsigned __int8 *)v37 + 16) == (_DWORD)v3)
                  goto LABEL_137;
              }
              else
              {
                if (v38 >= v34)
                  v38 %= v34;
                if (v38 != v4)
                  break;
              }
              v37 = (uint64_t **)*v37;
            }
            while (v37);
          }
        }
      }
LABEL_94:
      v40 = operator new(0x30uLL);
      v343 = v40;
      *v40 = 0;
      v40[1] = v3;
      *((_BYTE *)v40 + 16) = *((_BYTE *)v32 + 16);
      v40[4] = 0;
      v40[5] = 0;
      v40[3] = 0;
      v5 = v32[3];
      v41 = v32[4];
      v8 = v41 - v5;
      if (v41 != v5)
      {
        if ((v8 & 0x8000000000000000) != 0)
          abort();
        v42 = (char *)operator new(v41 - v5);
        v40[3] = v42;
        v40[4] = v42;
        v40[5] = &v42[16 * ((uint64_t)v8 >> 4)];
        do
        {
          *(_WORD *)v42 = *(_WORD *)v5;
          v43 = *(_QWORD *)(v5 + 4);
          *((_DWORD *)v42 + 3) = *(_DWORD *)(v5 + 12);
          *(_QWORD *)(v42 + 4) = v43;
          v42 += 16;
          v5 += 16;
        }
        while (v5 != v41);
        v40[4] = v42;
      }
      v44 = (float)(unint64_t)(*((_QWORD *)v6 + 8) + 1);
      v45 = *((float *)v6 + 18);
      if (v34 && (float)(v45 * (float)v34) >= v44)
      {
        v30 = (_QWORD *)((char *)v6 + 40);
      }
      else
      {
        v46 = (v34 & (v34 - 1)) != 0;
        if (v34 < 3)
          v46 = 1;
        v47 = v46 | (2 * v34);
        v48 = vcvtps_u32_f32(v44 / v45);
        if (v47 <= v48)
          v49 = v48;
        else
          v49 = v47;
        v30 = (_QWORD *)((char *)v6 + 40);
        if (v49 == 1)
        {
          v49 = 2;
        }
        else if ((v49 & (v49 - 1)) != 0)
        {
          v49 = std::__next_prime(v49);
          v34 = *((_QWORD *)v6 + 6);
        }
        if (v49 > v34)
          goto LABEL_112;
        if (v49 < v34)
        {
          v50 = vcvtps_u32_f32((float)*((unint64_t *)v6 + 8) / *((float *)v6 + 18));
          if (v34 < 3 || (v51 = (uint8x8_t)vcnt_s8((int8x8_t)v34), v51.i16[0] = vaddlv_u8(v51), v51.u32[0] > 1uLL))
          {
            v50 = std::__next_prime(v50);
          }
          else
          {
            v52 = 1 << -(char)__clz(v50 - 1);
            if (v50 >= 2)
              v50 = v52;
          }
          if (v49 <= v50)
            v49 = v50;
          if (v49 < v34)
LABEL_112:
            std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>((uint64_t)v6 + 40, v49);
        }
        v34 = *((_QWORD *)v6 + 6);
        if ((v34 & (v34 - 1)) != 0)
        {
          if (v34 <= v3)
            v4 = v3 % v34;
          else
            v4 = v3;
        }
        else
        {
          v4 = ((_DWORD)v34 - 1) & v3;
        }
      }
      v53 = *(_QWORD **)(*v30 + 8 * v4);
      if (v53)
      {
        *v343 = *v53;
        *v53 = v343;
      }
      else
      {
        *v343 = *v33;
        *v33 = v343;
        *(_QWORD *)(*v30 + 8 * v4) = v33;
        if (*v343)
        {
          v54 = *(_QWORD *)(*v343 + 8);
          if ((v34 & (v34 - 1)) != 0)
          {
            if (v54 >= v34)
              v54 %= v34;
          }
          else
          {
            v54 &= v34 - 1;
          }
          *(_QWORD *)(*v30 + 8 * v54) = v343;
        }
      }
      ++*((_QWORD *)v6 + 8);
LABEL_137:
      v32 = (uint64_t *)*v32;
    }
    while (v32);
  }
  *((_OWORD *)v6 + 5) = 0u;
  *((_OWORD *)v6 + 6) = 0u;
  *((_DWORD *)v6 + 28) = *((_DWORD *)a2 + 28);
  v55 = *((_QWORD *)a2 + 11);
  v341 = (_QWORD *)((char *)v6 + 80);
  if (v55 == 1)
  {
    v55 = 2;
LABEL_140:
    std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>((uint64_t)v6 + 80, v55);
    goto LABEL_141;
  }
  if ((v55 & (v55 - 1)) != 0)
  {
    v55 = std::__next_prime(v55);
    v8 = *((_QWORD *)v6 + 11);
    v289 = v55 >= v8;
    if (v55 > v8)
      goto LABEL_140;
  }
  else
  {
    v8 = 0;
    v289 = 1;
    if (v55)
      goto LABEL_140;
  }
  if (!v289)
  {
    v304 = vcvtps_u32_f32((float)*((unint64_t *)v6 + 13) / *((float *)v6 + 28));
    if (v8 < 3 || (v305 = (uint8x8_t)vcnt_s8((int8x8_t)v8), v305.i16[0] = vaddlv_u8(v305), v305.u32[0] > 1uLL))
    {
      v304 = std::__next_prime(v304);
    }
    else
    {
      v306 = 1 << -(char)__clz(v304 - 1);
      if (v304 >= 2)
        v304 = v306;
    }
    if (v55 <= v304)
      v55 = v304;
    if (v55 < v8)
      goto LABEL_140;
  }
LABEL_141:
  v56 = (uint64_t *)*((_QWORD *)a2 + 12);
  if (v56)
  {
    v57 = (_QWORD *)((char *)v6 + 96);
    v4 = *((_QWORD *)v6 + 11);
    do
    {
      v5 = *((unsigned __int8 *)v56 + 16);
      if (v4)
      {
        v58 = (uint8x8_t)vcnt_s8((int8x8_t)v4);
        v58.i16[0] = vaddlv_u8(v58);
        if (v58.u32[0] > 1uLL)
        {
          v3 = *((unsigned __int8 *)v56 + 16);
          if (v4 <= v5)
            v3 = v5 % v4;
        }
        else
        {
          v3 = ((_DWORD)v4 - 1) & v5;
        }
        v59 = *(uint64_t ****)(*v341 + 8 * v3);
        if (v59)
        {
          v60 = *v59;
          if (v60)
          {
            if (v58.u32[0] < 2uLL)
            {
              while (1)
              {
                v62 = v60[1];
                if (v62 == (uint64_t *)v5)
                {
                  if (*((unsigned __int8 *)v60 + 16) == (_DWORD)v5)
                    goto LABEL_203;
                }
                else if (((unint64_t)v62 & (v4 - 1)) != v3)
                {
                  goto LABEL_163;
                }
                v60 = (uint64_t **)*v60;
                if (!v60)
                  goto LABEL_163;
              }
            }
            do
            {
              v61 = (unint64_t)v60[1];
              if (v61 == v5)
              {
                if (*((unsigned __int8 *)v60 + 16) == (_DWORD)v5)
                  goto LABEL_203;
              }
              else
              {
                if (v61 >= v4)
                  v61 %= v4;
                if (v61 != v3)
                  break;
              }
              v60 = (uint64_t **)*v60;
            }
            while (v60);
          }
        }
      }
LABEL_163:
      v63 = operator new(0x30uLL);
      v344 = v63;
      *v63 = 0;
      v63[1] = v5;
      *((_BYTE *)v63 + 16) = *((_BYTE *)v56 + 16);
      v63[4] = 0;
      v63[5] = 0;
      v63[3] = 0;
      v8 = v56[3];
      v64 = v56[4];
      v65 = v64 - v8;
      if (v64 != v8)
      {
        if (v65 < 0)
          abort();
        v66 = (char *)operator new(v64 - v8);
        v63[3] = v66;
        v63[4] = v66;
        v63[5] = &v66[8 * (v65 >> 3)];
        v67 = v65 & 0xFFFFFFFFFFFFFFF8;
        memcpy(v66, (const void *)v8, v67);
        v63[4] = &v66[v67];
      }
      v68 = (float)(unint64_t)(*((_QWORD *)v6 + 13) + 1);
      v69 = *((float *)v6 + 28);
      if (!v4 || (float)(v69 * (float)v4) < v68)
      {
        v70 = (v4 & (v4 - 1)) != 0;
        if (v4 < 3)
          v70 = 1;
        v71 = v70 | (2 * v4);
        v72 = vcvtps_u32_f32(v68 / v69);
        if (v71 <= v72)
          v73 = v72;
        else
          v73 = v71;
        if (v73 == 1)
        {
          v73 = 2;
        }
        else if ((v73 & (v73 - 1)) != 0)
        {
          v73 = std::__next_prime(v73);
          v4 = *((_QWORD *)v6 + 11);
        }
        if (v73 > v4)
          goto LABEL_178;
        if (v73 < v4)
        {
          v74 = vcvtps_u32_f32((float)*((unint64_t *)v6 + 13) / *((float *)v6 + 28));
          if (v4 < 3 || (v75 = (uint8x8_t)vcnt_s8((int8x8_t)v4), v75.i16[0] = vaddlv_u8(v75), v75.u32[0] > 1uLL))
          {
            v74 = std::__next_prime(v74);
          }
          else
          {
            v76 = 1 << -(char)__clz(v74 - 1);
            if (v74 >= 2)
              v74 = v76;
          }
          if (v73 <= v74)
            v73 = v74;
          if (v73 < v4)
LABEL_178:
            std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>((uint64_t)v341, v73);
        }
        v4 = *((_QWORD *)v6 + 11);
        if ((v4 & (v4 - 1)) != 0)
        {
          if (v4 <= v5)
            v3 = v5 % v4;
          else
            v3 = v5;
        }
        else
        {
          v3 = ((_DWORD)v4 - 1) & v5;
        }
      }
      v77 = *(_QWORD **)(*v341 + 8 * v3);
      if (v77)
      {
        *v344 = *v77;
        *v77 = v344;
      }
      else
      {
        *v344 = *v57;
        *v57 = v344;
        *(_QWORD *)(*v341 + 8 * v3) = v57;
        if (*v344)
        {
          v78 = *(_QWORD *)(*v344 + 8);
          if ((v4 & (v4 - 1)) != 0)
          {
            if (v78 >= v4)
              v78 %= v4;
          }
          else
          {
            v78 &= v4 - 1;
          }
          *(_QWORD *)(*v341 + 8 * v78) = v344;
        }
      }
      ++*((_QWORD *)v6 + 13);
LABEL_203:
      v56 = (uint64_t *)*v56;
    }
    while (v56);
  }
  *(_OWORD *)((char *)v6 + 120) = 0u;
  v79 = (_QWORD *)((char *)v6 + 120);
  *(_OWORD *)((char *)v6 + 136) = 0u;
  *((_DWORD *)v6 + 38) = *((_DWORD *)a2 + 38);
  v80 = *((_QWORD *)a2 + 16);
  v332 = (_QWORD *)((char *)v6 + 120);
  if (v80 == 1)
  {
    v80 = 2;
LABEL_206:
    std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>((uint64_t)v6 + 120, v80);
    goto LABEL_207;
  }
  if ((v80 & (v80 - 1)) != 0)
  {
    v80 = std::__next_prime(v80);
    v8 = *((_QWORD *)v6 + 16);
    v290 = v80 >= v8;
    if (v80 > v8)
      goto LABEL_206;
  }
  else
  {
    v8 = 0;
    v290 = 1;
    if (v80)
      goto LABEL_206;
  }
  if (!v290)
  {
    v307 = vcvtps_u32_f32((float)*((unint64_t *)v6 + 18) / *((float *)v6 + 38));
    if (v8 < 3 || (v308 = (uint8x8_t)vcnt_s8((int8x8_t)v8), v308.i16[0] = vaddlv_u8(v308), v308.u32[0] > 1uLL))
    {
      v307 = std::__next_prime(v307);
    }
    else
    {
      v309 = 1 << -(char)__clz(v307 - 1);
      if (v307 >= 2)
        v307 = v309;
    }
    if (v80 <= v307)
      v80 = v307;
    if (v80 < v8)
      goto LABEL_206;
  }
LABEL_207:
  v81 = (uint64_t *)*((_QWORD *)a2 + 17);
  if (v81)
  {
    v82 = (_QWORD *)((char *)v6 + 136);
    v5 = *((_QWORD *)v6 + 16);
    do
    {
      v3 = *((unsigned __int8 *)v81 + 16);
      if (v5)
      {
        v83 = (uint8x8_t)vcnt_s8((int8x8_t)v5);
        v83.i16[0] = vaddlv_u8(v83);
        if (v83.u32[0] > 1uLL)
        {
          v4 = *((unsigned __int8 *)v81 + 16);
          if (v5 <= v3)
            v4 = v3 % v5;
        }
        else
        {
          v4 = ((_DWORD)v5 - 1) & v3;
        }
        v84 = *(uint64_t ****)(*v79 + 8 * v4);
        if (v84)
        {
          v85 = *v84;
          if (v85)
          {
            if (v83.u32[0] < 2uLL)
            {
              while (1)
              {
                v87 = v85[1];
                if (v87 == (uint64_t *)v3)
                {
                  if (*((unsigned __int8 *)v85 + 16) == (_DWORD)v3)
                    goto LABEL_269;
                }
                else if (((unint64_t)v87 & (v5 - 1)) != v4)
                {
                  goto LABEL_229;
                }
                v85 = (uint64_t **)*v85;
                if (!v85)
                  goto LABEL_229;
              }
            }
            do
            {
              v86 = (unint64_t)v85[1];
              if (v86 == v3)
              {
                if (*((unsigned __int8 *)v85 + 16) == (_DWORD)v3)
                  goto LABEL_269;
              }
              else
              {
                if (v86 >= v5)
                  v86 %= v5;
                if (v86 != v4)
                  break;
              }
              v85 = (uint64_t **)*v85;
            }
            while (v85);
          }
        }
      }
LABEL_229:
      v88 = operator new(0x30uLL);
      v345 = v88;
      *v88 = 0;
      v88[1] = v3;
      *((_BYTE *)v88 + 16) = *((_BYTE *)v81 + 16);
      v88[4] = 0;
      v88[5] = 0;
      v88[3] = 0;
      v8 = v81[3];
      v89 = v81[4];
      v90 = v89 - v8;
      if (v89 != v8)
      {
        if (0xAAAAAAAAAAAAAAABLL * v90 >= 0x5555555555555556)
          abort();
        v91 = (char *)operator new(v90);
        v88[3] = v91;
        v88[4] = v91;
        v88[5] = &v91[v90];
        v92 = 3 * ((v90 - 3) / 3) + 3;
        memcpy(v91, (const void *)v8, v92);
        v88[4] = &v91[v92];
        v6 = this;
        v79 = v332;
      }
      v93 = (float)(unint64_t)(*((_QWORD *)v6 + 18) + 1);
      v94 = *((float *)v6 + 38);
      if (!v5 || (float)(v94 * (float)v5) < v93)
      {
        v95 = (v5 & (v5 - 1)) != 0;
        if (v5 < 3)
          v95 = 1;
        v96 = v95 | (2 * v5);
        v97 = vcvtps_u32_f32(v93 / v94);
        if (v96 <= v97)
          v98 = v97;
        else
          v98 = v96;
        if (v98 == 1)
        {
          v98 = 2;
        }
        else if ((v98 & (v98 - 1)) != 0)
        {
          v98 = std::__next_prime(v98);
          v5 = *((_QWORD *)v6 + 16);
        }
        if (v98 > v5)
          goto LABEL_244;
        if (v98 < v5)
        {
          v99 = vcvtps_u32_f32((float)*((unint64_t *)v6 + 18) / *((float *)v6 + 38));
          if (v5 < 3 || (v100 = (uint8x8_t)vcnt_s8((int8x8_t)v5), v100.i16[0] = vaddlv_u8(v100), v100.u32[0] > 1uLL))
          {
            v99 = std::__next_prime(v99);
          }
          else
          {
            v101 = 1 << -(char)__clz(v99 - 1);
            if (v99 >= 2)
              v99 = v101;
          }
          if (v98 <= v99)
            v98 = v99;
          if (v98 < v5)
LABEL_244:
            std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>((uint64_t)v79, v98);
        }
        v5 = *((_QWORD *)v6 + 16);
        if ((v5 & (v5 - 1)) != 0)
        {
          if (v5 <= v3)
            v4 = v3 % v5;
          else
            v4 = v3;
        }
        else
        {
          v4 = ((_DWORD)v5 - 1) & v3;
        }
      }
      v102 = *(_QWORD **)(*v79 + 8 * v4);
      if (v102)
      {
        *v345 = *v102;
        *v102 = v345;
      }
      else
      {
        *v345 = *v82;
        *v82 = v345;
        *(_QWORD *)(*v79 + 8 * v4) = v82;
        if (*v345)
        {
          v103 = *(_QWORD *)(*v345 + 8);
          if ((v5 & (v5 - 1)) != 0)
          {
            if (v103 >= v5)
              v103 %= v5;
          }
          else
          {
            v103 &= v5 - 1;
          }
          *(_QWORD *)(*v79 + 8 * v103) = v345;
        }
      }
      ++*((_QWORD *)v6 + 18);
LABEL_269:
      v81 = (uint64_t *)*v81;
    }
    while (v81);
  }
  *((_OWORD *)v6 + 10) = 0u;
  *((_OWORD *)v6 + 11) = 0u;
  *((_DWORD *)v6 + 48) = *((_DWORD *)a2 + 48);
  v104 = *((_QWORD *)a2 + 21);
  v340 = (_QWORD *)((char *)v6 + 160);
  if (v104 == 1)
  {
    v104 = 2;
LABEL_272:
    std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>((uint64_t)v6 + 160, v104);
    goto LABEL_273;
  }
  if ((v104 & (v104 - 1)) != 0)
  {
    v104 = std::__next_prime(v104);
    v8 = *((_QWORD *)v6 + 21);
    v291 = v104 >= v8;
    if (v104 > v8)
      goto LABEL_272;
  }
  else
  {
    v8 = 0;
    v291 = 1;
    if (v104)
      goto LABEL_272;
  }
  if (!v291)
  {
    v310 = vcvtps_u32_f32((float)*((unint64_t *)v6 + 23) / *((float *)v6 + 48));
    if (v8 < 3 || (v311 = (uint8x8_t)vcnt_s8((int8x8_t)v8), v311.i16[0] = vaddlv_u8(v311), v311.u32[0] > 1uLL))
    {
      v310 = std::__next_prime(v310);
    }
    else
    {
      v312 = 1 << -(char)__clz(v310 - 1);
      if (v310 >= 2)
        v310 = v312;
    }
    if (v104 <= v310)
      v104 = v310;
    if (v104 < v8)
      goto LABEL_272;
  }
LABEL_273:
  v105 = *((_QWORD *)a2 + 22);
  if (v105)
  {
    v106 = (_QWORD *)((char *)v6 + 176);
    v107 = *((_QWORD *)v6 + 21);
    do
    {
      v5 = *(unsigned __int8 *)(v105 + 16);
      if (v107)
      {
        v108 = (uint8x8_t)vcnt_s8((int8x8_t)v107);
        v108.i16[0] = vaddlv_u8(v108);
        if (v108.u32[0] > 1uLL)
        {
          v3 = *(unsigned __int8 *)(v105 + 16);
          if (v107 <= v5)
            v3 = v5 % v107;
        }
        else
        {
          v3 = ((_DWORD)v107 - 1) & v5;
        }
        v109 = *(uint64_t ****)(*v340 + 8 * v3);
        if (v109)
        {
          v110 = *v109;
          if (v110)
          {
            if (v108.u32[0] < 2uLL)
            {
              while (1)
              {
                v112 = v110[1];
                if (v112 == (uint64_t *)v5)
                {
                  if (*((unsigned __int8 *)v110 + 16) == (_DWORD)v5)
                    goto LABEL_335;
                }
                else if (((unint64_t)v112 & (v107 - 1)) != v3)
                {
                  goto LABEL_295;
                }
                v110 = (uint64_t **)*v110;
                if (!v110)
                  goto LABEL_295;
              }
            }
            do
            {
              v111 = (unint64_t)v110[1];
              if (v111 == v5)
              {
                if (*((unsigned __int8 *)v110 + 16) == (_DWORD)v5)
                  goto LABEL_335;
              }
              else
              {
                if (v111 >= v107)
                  v111 %= v107;
                if (v111 != v3)
                  break;
              }
              v110 = (uint64_t **)*v110;
            }
            while (v110);
          }
        }
      }
LABEL_295:
      v113 = operator new(0x30uLL);
      v346 = v113;
      *v113 = 0;
      v113[1] = v5;
      *((_BYTE *)v113 + 16) = *(_BYTE *)(v105 + 16);
      v113[4] = 0;
      v113[5] = 0;
      v113[3] = 0;
      v8 = *(_QWORD *)(v105 + 24);
      v114 = *(_QWORD *)(v105 + 32);
      v115 = v114 - v8;
      if (v114 != v8)
      {
        if (v115 < 0)
          abort();
        v116 = (char *)operator new(v114 - v8);
        v113[3] = v116;
        v113[4] = v116;
        v113[5] = &v116[8 * (v115 >> 3)];
        v117 = v115 & 0xFFFFFFFFFFFFFFF8;
        memcpy(v116, (const void *)v8, v117);
        v113[4] = &v116[v117];
      }
      v118 = (float)(unint64_t)(*((_QWORD *)v6 + 23) + 1);
      v119 = *((float *)v6 + 48);
      if (!v107 || (float)(v119 * (float)v107) < v118)
      {
        v120 = (v107 & (v107 - 1)) != 0;
        if (v107 < 3)
          v120 = 1;
        v121 = v120 | (2 * v107);
        v122 = vcvtps_u32_f32(v118 / v119);
        if (v121 <= v122)
          v123 = v122;
        else
          v123 = v121;
        if (v123 == 1)
        {
          v123 = 2;
        }
        else if ((v123 & (v123 - 1)) != 0)
        {
          v123 = std::__next_prime(v123);
          v107 = *((_QWORD *)v6 + 21);
        }
        if (v123 > v107)
          goto LABEL_310;
        if (v123 < v107)
        {
          v124 = vcvtps_u32_f32((float)*((unint64_t *)v6 + 23) / *((float *)v6 + 48));
          if (v107 < 3
            || (v125 = (uint8x8_t)vcnt_s8((int8x8_t)v107), v125.i16[0] = vaddlv_u8(v125), v125.u32[0] > 1uLL))
          {
            v124 = std::__next_prime(v124);
          }
          else
          {
            v126 = 1 << -(char)__clz(v124 - 1);
            if (v124 >= 2)
              v124 = v126;
          }
          if (v123 <= v124)
            v123 = v124;
          if (v123 < v107)
LABEL_310:
            std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>((uint64_t)v340, v123);
        }
        v107 = *((_QWORD *)v6 + 21);
        if ((v107 & (v107 - 1)) != 0)
        {
          if (v107 <= v5)
            v3 = v5 % v107;
          else
            v3 = v5;
        }
        else
        {
          v3 = ((_DWORD)v107 - 1) & v5;
        }
      }
      v127 = *(_QWORD **)(*v340 + 8 * v3);
      if (v127)
      {
        *v346 = *v127;
        *v127 = v346;
      }
      else
      {
        *v346 = *v106;
        *v106 = v346;
        *(_QWORD *)(*v340 + 8 * v3) = v106;
        if (*v346)
        {
          v128 = *(_QWORD *)(*v346 + 8);
          if ((v107 & (v107 - 1)) != 0)
          {
            if (v128 >= v107)
              v128 %= v107;
          }
          else
          {
            v128 &= v107 - 1;
          }
          *(_QWORD *)(*v340 + 8 * v128) = v346;
        }
      }
      ++*((_QWORD *)v6 + 23);
LABEL_335:
      v105 = *(_QWORD *)v105;
    }
    while (v105);
  }
  *(_OWORD *)((char *)v6 + 200) = 0u;
  v129 = (_QWORD *)((char *)v6 + 200);
  *(_OWORD *)((char *)v6 + 216) = 0u;
  *((_DWORD *)v6 + 58) = *((_DWORD *)a2 + 58);
  v130 = *((_QWORD *)a2 + 26);
  if (v130 == 1)
  {
    v130 = 2;
LABEL_338:
    std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>((uint64_t)v6 + 200, v130);
    goto LABEL_339;
  }
  if ((v130 & (v130 - 1)) != 0)
  {
    v130 = std::__next_prime(v130);
    v8 = *((_QWORD *)v6 + 26);
    v292 = v130 >= v8;
    if (v130 > v8)
      goto LABEL_338;
  }
  else
  {
    v8 = 0;
    v292 = 1;
    if (v130)
      goto LABEL_338;
  }
  if (!v292)
  {
    v313 = vcvtps_u32_f32((float)*((unint64_t *)v6 + 28) / *((float *)v6 + 58));
    if (v8 < 3 || (v314 = (uint8x8_t)vcnt_s8((int8x8_t)v8), v314.i16[0] = vaddlv_u8(v314), v314.u32[0] > 1uLL))
    {
      v313 = std::__next_prime(v313);
    }
    else
    {
      v315 = 1 << -(char)__clz(v313 - 1);
      if (v313 >= 2)
        v313 = v315;
    }
    if (v130 <= v313)
      v130 = v313;
    if (v130 < v8)
      goto LABEL_338;
  }
LABEL_339:
  v131 = (uint64_t *)*((_QWORD *)a2 + 27);
  if (v131)
  {
    v132 = (_QWORD *)((char *)v6 + 216);
    v5 = *((_QWORD *)v6 + 26);
    do
    {
      v133 = *((unsigned __int8 *)v131 + 16);
      if (v5)
      {
        v134 = (uint8x8_t)vcnt_s8((int8x8_t)v5);
        v134.i16[0] = vaddlv_u8(v134);
        if (v134.u32[0] > 1uLL)
        {
          v105 = *((unsigned __int8 *)v131 + 16);
          if (v5 <= v133)
            v105 = v133 % v5;
        }
        else
        {
          v105 = ((_DWORD)v5 - 1) & v133;
        }
        v135 = *(uint64_t ****)(*v129 + 8 * v105);
        if (v135)
        {
          v136 = *v135;
          if (v136)
          {
            if (v134.u32[0] < 2uLL)
            {
              while (1)
              {
                v138 = v136[1];
                if (v138 == (uint64_t *)v133)
                {
                  if (*((unsigned __int8 *)v136 + 16) == (_DWORD)v133)
                    goto LABEL_402;
                }
                else if (((unint64_t)v138 & (v5 - 1)) != v105)
                {
                  goto LABEL_361;
                }
                v136 = (uint64_t **)*v136;
                if (!v136)
                  goto LABEL_361;
              }
            }
            do
            {
              v137 = (unint64_t)v136[1];
              if (v137 == v133)
              {
                if (*((unsigned __int8 *)v136 + 16) == (_DWORD)v133)
                  goto LABEL_402;
              }
              else
              {
                if (v137 >= v5)
                  v137 %= v5;
                if (v137 != v105)
                  break;
              }
              v136 = (uint64_t **)*v136;
            }
            while (v136);
          }
        }
      }
LABEL_361:
      v139 = operator new(0x30uLL);
      v347 = v139;
      *v139 = 0;
      v139[1] = v133;
      *((_BYTE *)v139 + 16) = *((_BYTE *)v131 + 16);
      v139[4] = 0;
      v139[5] = 0;
      v139[3] = 0;
      v8 = v131[3];
      v140 = v131[4];
      v337 = v131;
      v141 = v140 - v8;
      if (v140 != v8)
      {
        if (0xAAAAAAAAAAAAAAABLL * v141 >= 0x5555555555555556)
          abort();
        v142 = (char *)operator new(v141);
        v139[3] = v142;
        v139[4] = v142;
        v139[5] = &v142[v141];
        v143 = 3 * ((v141 - 3) / 3) + 3;
        memcpy(v142, (const void *)v8, v143);
        v139[4] = &v142[v143];
        v129 = (_QWORD *)((char *)v6 + 200);
      }
      v144 = (float)(unint64_t)(*((_QWORD *)v6 + 28) + 1);
      v145 = *((float *)v6 + 58);
      if (v5 && (float)(v145 * (float)v5) >= v144)
      {
        v131 = v337;
      }
      else
      {
        v146 = (v5 & (v5 - 1)) != 0;
        if (v5 < 3)
          v146 = 1;
        v147 = v146 | (2 * v5);
        v148 = vcvtps_u32_f32(v144 / v145);
        if (v147 <= v148)
          v149 = v148;
        else
          v149 = v147;
        v131 = v337;
        if (v149 == 1)
        {
          v149 = 2;
        }
        else if ((v149 & (v149 - 1)) != 0)
        {
          v149 = std::__next_prime(v149);
          v5 = *((_QWORD *)v6 + 26);
        }
        if (v149 > v5)
          goto LABEL_377;
        if (v149 < v5)
        {
          v150 = vcvtps_u32_f32((float)*((unint64_t *)v6 + 28) / *((float *)v6 + 58));
          if (v5 < 3 || (v151 = (uint8x8_t)vcnt_s8((int8x8_t)v5), v151.i16[0] = vaddlv_u8(v151), v151.u32[0] > 1uLL))
          {
            v150 = std::__next_prime(v150);
          }
          else
          {
            v152 = 1 << -(char)__clz(v150 - 1);
            if (v150 >= 2)
              v150 = v152;
          }
          if (v149 <= v150)
            v149 = v150;
          if (v149 < v5)
LABEL_377:
            std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>((uint64_t)v129, v149);
        }
        v5 = *((_QWORD *)v6 + 26);
        if ((v5 & (v5 - 1)) != 0)
        {
          if (v5 <= v133)
            v105 = v133 % v5;
          else
            v105 = v133;
        }
        else
        {
          v105 = ((_DWORD)v5 - 1) & v133;
        }
      }
      v153 = *(_QWORD **)(*v129 + 8 * v105);
      if (v153)
      {
        *v347 = *v153;
        *v153 = v347;
      }
      else
      {
        *v347 = *v132;
        *v132 = v347;
        *(_QWORD *)(*v129 + 8 * v105) = v132;
        if (*v347)
        {
          v154 = *(_QWORD *)(*v347 + 8);
          if ((v5 & (v5 - 1)) != 0)
          {
            if (v154 >= v5)
              v154 %= v5;
          }
          else
          {
            v154 &= v5 - 1;
          }
          *(_QWORD *)(*v129 + 8 * v154) = v347;
        }
      }
      ++*((_QWORD *)v6 + 28);
LABEL_402:
      v131 = (uint64_t *)*v131;
    }
    while (v131);
  }
  *((_OWORD *)v6 + 15) = 0u;
  *((_OWORD *)v6 + 16) = 0u;
  v155 = (_QWORD *)((char *)v6 + 240);
  *((_DWORD *)v6 + 68) = *((_DWORD *)a2 + 68);
  v156 = *((_QWORD *)a2 + 31);
  if (v156 == 1)
  {
    v156 = 2;
LABEL_405:
    std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>((uint64_t)v6 + 240, v156);
    goto LABEL_406;
  }
  if ((v156 & (v156 - 1)) != 0)
  {
    v156 = std::__next_prime(v156);
    v8 = *((_QWORD *)v6 + 31);
    v293 = v156 >= v8;
    if (v156 > v8)
      goto LABEL_405;
  }
  else
  {
    v8 = 0;
    v293 = 1;
    if (v156)
      goto LABEL_405;
  }
  if (!v293)
  {
    v316 = vcvtps_u32_f32((float)*((unint64_t *)v6 + 33) / *((float *)v6 + 68));
    if (v8 < 3 || (v317 = (uint8x8_t)vcnt_s8((int8x8_t)v8), v317.i16[0] = vaddlv_u8(v317), v317.u32[0] > 1uLL))
    {
      v316 = std::__next_prime(v316);
    }
    else
    {
      v318 = 1 << -(char)__clz(v316 - 1);
      if (v316 >= 2)
        v316 = v318;
    }
    if (v156 <= v316)
      v156 = v316;
    if (v156 < v8)
      goto LABEL_405;
  }
LABEL_406:
  v157 = (uint64_t *)*((_QWORD *)a2 + 32);
  if (v157)
  {
    v338 = (_QWORD *)((char *)v6 + 256);
    v158 = *((_QWORD *)v6 + 31);
    do
    {
      v159 = *((unsigned __int8 *)v157 + 16);
      if (v158)
      {
        v160 = (uint8x8_t)vcnt_s8((int8x8_t)v158);
        v160.i16[0] = vaddlv_u8(v160);
        if (v160.u32[0] > 1uLL)
        {
          v5 = *((unsigned __int8 *)v157 + 16);
          if (v158 <= v159)
            v5 = v159 % v158;
        }
        else
        {
          v5 = ((_DWORD)v158 - 1) & v159;
        }
        v161 = *(uint64_t ****)(*v155 + 8 * v5);
        if (v161)
        {
          v162 = *v161;
          if (v162)
          {
            if (v160.u32[0] < 2uLL)
            {
              while (1)
              {
                v164 = v162[1];
                if (v164 == (uint64_t *)v159)
                {
                  if (*((unsigned __int8 *)v162 + 16) == (_DWORD)v159)
                    goto LABEL_468;
                }
                else if (((unint64_t)v164 & (v158 - 1)) != v5)
                {
                  goto LABEL_428;
                }
                v162 = (uint64_t **)*v162;
                if (!v162)
                  goto LABEL_428;
              }
            }
            do
            {
              v163 = (unint64_t)v162[1];
              if (v163 == v159)
              {
                if (*((unsigned __int8 *)v162 + 16) == (_DWORD)v159)
                  goto LABEL_468;
              }
              else
              {
                if (v163 >= v158)
                  v163 %= v158;
                if (v163 != v5)
                  break;
              }
              v162 = (uint64_t **)*v162;
            }
            while (v162);
          }
        }
      }
LABEL_428:
      v165 = operator new(0x30uLL);
      v348 = v165;
      *v165 = 0;
      v165[1] = v159;
      *((_BYTE *)v165 + 16) = *((_BYTE *)v157 + 16);
      v165[4] = 0;
      v165[5] = 0;
      v165[3] = 0;
      v8 = v157[3];
      v166 = v157[4];
      v167 = v166 - v8;
      if (v166 != v8)
      {
        if (0xAAAAAAAAAAAAAAABLL * (v167 >> 2) >= 0x1555555555555556)
          abort();
        v168 = (char *)operator new(v167);
        v165[3] = v168;
        v165[4] = v168;
        v165[5] = &v168[4 * (v167 >> 2)];
        v169 = 12 * ((v167 - 12) / 0xCuLL) + 12;
        memcpy(v168, (const void *)v8, v169);
        v165[4] = &v168[v169];
        v155 = (_QWORD *)((char *)v6 + 240);
      }
      v170 = (float)(unint64_t)(*((_QWORD *)v6 + 33) + 1);
      v171 = *((float *)v6 + 68);
      if (!v158 || (float)(v171 * (float)v158) < v170)
      {
        v172 = (v158 & (v158 - 1)) != 0;
        if (v158 < 3)
          v172 = 1;
        v173 = v172 | (2 * v158);
        v174 = vcvtps_u32_f32(v170 / v171);
        if (v173 <= v174)
          v175 = v174;
        else
          v175 = v173;
        if (v175 == 1)
        {
          v175 = 2;
        }
        else if ((v175 & (v175 - 1)) != 0)
        {
          v175 = std::__next_prime(v175);
          v158 = *((_QWORD *)v6 + 31);
        }
        if (v175 > v158)
          goto LABEL_443;
        if (v175 < v158)
        {
          v176 = vcvtps_u32_f32((float)*((unint64_t *)v6 + 33) / *((float *)v6 + 68));
          if (v158 < 3
            || (v177 = (uint8x8_t)vcnt_s8((int8x8_t)v158), v177.i16[0] = vaddlv_u8(v177), v177.u32[0] > 1uLL))
          {
            v176 = std::__next_prime(v176);
          }
          else
          {
            v178 = 1 << -(char)__clz(v176 - 1);
            if (v176 >= 2)
              v176 = v178;
          }
          if (v175 <= v176)
            v175 = v176;
          if (v175 < v158)
LABEL_443:
            std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>((uint64_t)v155, v175);
        }
        v158 = *((_QWORD *)v6 + 31);
        if ((v158 & (v158 - 1)) != 0)
        {
          if (v158 <= v159)
            v5 = v159 % v158;
          else
            v5 = v159;
        }
        else
        {
          v5 = ((_DWORD)v158 - 1) & v159;
        }
      }
      v179 = *(_QWORD **)(*v155 + 8 * v5);
      if (v179)
      {
        *v348 = *v179;
        *v179 = v348;
      }
      else
      {
        *v348 = *v338;
        *v338 = v348;
        *(_QWORD *)(*v155 + 8 * v5) = v338;
        if (*v348)
        {
          v180 = *(_QWORD *)(*v348 + 8);
          if ((v158 & (v158 - 1)) != 0)
          {
            if (v180 >= v158)
              v180 %= v158;
          }
          else
          {
            v180 &= v158 - 1;
          }
          *(_QWORD *)(*v155 + 8 * v180) = v348;
        }
      }
      ++*((_QWORD *)v6 + 33);
LABEL_468:
      v157 = (uint64_t *)*v157;
    }
    while (v157);
  }
  *(_OWORD *)((char *)v6 + 280) = 0u;
  *(_OWORD *)((char *)v6 + 296) = 0u;
  *((_DWORD *)v6 + 78) = *((_DWORD *)a2 + 78);
  v181 = *((_QWORD *)a2 + 36);
  if (v181 == 1)
  {
    v181 = 2;
LABEL_471:
    std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>((uint64_t)v6 + 280, v181);
    goto LABEL_472;
  }
  if ((v181 & (v181 - 1)) != 0)
  {
    v181 = std::__next_prime(*((_QWORD *)a2 + 36));
    v8 = *((_QWORD *)v6 + 36);
    v294 = v181 >= v8;
    if (v181 > v8)
      goto LABEL_471;
  }
  else
  {
    v8 = 0;
    v294 = 1;
    if (v181)
      goto LABEL_471;
  }
  if (!v294)
  {
    v319 = vcvtps_u32_f32((float)*((unint64_t *)v6 + 38) / *((float *)v6 + 78));
    if (v8 < 3 || (v320 = (uint8x8_t)vcnt_s8((int8x8_t)v8), v320.i16[0] = vaddlv_u8(v320), v320.u32[0] > 1uLL))
    {
      v319 = std::__next_prime(v319);
    }
    else
    {
      v321 = 1 << -(char)__clz(v319 - 1);
      if (v319 >= 2)
        v319 = v321;
    }
    if (v181 <= v319)
      v181 = v319;
    if (v181 < v8)
      goto LABEL_471;
  }
LABEL_472:
  v339 = (_QWORD *)((char *)v6 + 280);
  v182 = (uint64_t *)*((_QWORD *)a2 + 37);
  if (v182)
  {
    v335 = (_QWORD *)((char *)v6 + 296);
    do
    {
      v183 = *((unsigned __int8 *)v182 + 16);
      v184 = *((_QWORD *)v6 + 36);
      if (v184)
      {
        v185 = (uint8x8_t)vcnt_s8((int8x8_t)v184);
        v185.i16[0] = vaddlv_u8(v185);
        if (v185.u32[0] > 1uLL)
        {
          v5 = *((unsigned __int8 *)v182 + 16);
          if (v184 <= v183)
            v5 = v183 % v184;
        }
        else
        {
          v5 = ((_DWORD)v184 - 1) & v183;
        }
        v186 = *(uint64_t ****)(*v339 + 8 * v5);
        if (v186)
        {
          v187 = *v186;
          if (v187)
          {
            if (v185.u32[0] < 2uLL)
            {
              while (1)
              {
                v189 = v187[1];
                if (v189 == (uint64_t *)v183)
                {
                  if (*((unsigned __int8 *)v187 + 16) == (_DWORD)v183)
                    goto LABEL_536;
                }
                else if (((unint64_t)v189 & (v184 - 1)) != v5)
                {
                  goto LABEL_494;
                }
                v187 = (uint64_t **)*v187;
                if (!v187)
                  goto LABEL_494;
              }
            }
            do
            {
              v188 = (unint64_t)v187[1];
              if (v188 == v183)
              {
                if (*((unsigned __int8 *)v187 + 16) == (_DWORD)v183)
                  goto LABEL_536;
              }
              else
              {
                if (v188 >= v184)
                  v188 %= v184;
                if (v188 != v5)
                  break;
              }
              v187 = (uint64_t **)*v187;
            }
            while (v187);
          }
        }
      }
LABEL_494:
      v190 = operator new(0x30uLL);
      v349 = v190;
      *v190 = 0;
      v190[1] = v183;
      *((_BYTE *)v190 + 16) = *((_BYTE *)v182 + 16);
      v190[4] = 0;
      v190[5] = 0;
      v190[3] = 0;
      v191 = (char *)v182[3];
      v192 = (char *)v182[4];
      v193 = v192 - v191;
      if (v192 != v191)
      {
        v194 = 0xAAAAAAAAAAAAAAABLL * (v193 >> 4);
        if (v194 > 0x555555555555555)
          abort();
        v195 = (char *)operator new(v193);
        v190[3] = v195;
        v190[4] = v195;
        v190[5] = &v195[48 * v194];
        v8 = (unint64_t)v195;
        do
        {
          *(_WORD *)v8 = *(_WORD *)v191;
          std::unordered_map<float,geo::Color<float,4,(geo::ColorSpace)0>>::unordered_map(v8 + 8, (uint64_t)(v191 + 8));
          v191 += 48;
          v8 += 48;
        }
        while (v191 != v192);
        v190[4] = v8;
      }
      v196 = (float)(unint64_t)(*((_QWORD *)v6 + 38) + 1);
      v197 = *((float *)v6 + 78);
      if (!v184 || (float)(v197 * (float)v184) < v196)
      {
        v198 = (v184 & (v184 - 1)) != 0;
        if (v184 < 3)
          v198 = 1;
        v199 = v198 | (2 * v184);
        v200 = vcvtps_u32_f32(v196 / v197);
        if (v199 <= v200)
          v201 = v200;
        else
          v201 = v199;
        if (v201 == 1)
        {
          v201 = 2;
        }
        else if ((v201 & (v201 - 1)) != 0)
        {
          v201 = std::__next_prime(v201);
        }
        v8 = *((_QWORD *)v6 + 36);
        if (v201 > v8)
          goto LABEL_511;
        if (v201 < v8)
        {
          v202 = vcvtps_u32_f32((float)*((unint64_t *)v6 + 38) / *((float *)v6 + 78));
          if (v8 < 3 || (v203 = (uint8x8_t)vcnt_s8((int8x8_t)v8), v203.i16[0] = vaddlv_u8(v203), v203.u32[0] > 1uLL))
          {
            v202 = std::__next_prime(v202);
          }
          else
          {
            v204 = 1 << -(char)__clz(v202 - 1);
            if (v202 >= 2)
              v202 = v204;
          }
          if (v201 <= v202)
            v201 = v202;
          if (v201 < v8)
LABEL_511:
            std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>((uint64_t)v339, v201);
        }
        v184 = *((_QWORD *)v6 + 36);
        if ((v184 & (v184 - 1)) != 0)
        {
          if (v184 <= v183)
            v5 = v183 % v184;
          else
            v5 = v183;
        }
        else
        {
          v5 = ((_DWORD)v184 - 1) & v183;
        }
      }
      v205 = *(_QWORD **)(*v339 + 8 * v5);
      if (v205)
      {
        *v349 = *v205;
        *v205 = v349;
      }
      else
      {
        *v349 = *v335;
        *v335 = v349;
        *(_QWORD *)(*v339 + 8 * v5) = v335;
        if (*v349)
        {
          v206 = *(_QWORD *)(*v349 + 8);
          if ((v184 & (v184 - 1)) != 0)
          {
            if (v206 >= v184)
              v206 %= v184;
          }
          else
          {
            v206 &= v184 - 1;
          }
          *(_QWORD *)(*v339 + 8 * v206) = v349;
        }
      }
      ++*((_QWORD *)v6 + 38);
LABEL_536:
      v182 = (uint64_t *)*v182;
    }
    while (v182);
  }
  *((_OWORD *)v6 + 20) = 0u;
  *((_OWORD *)v6 + 21) = 0u;
  *((_DWORD *)v6 + 88) = *((_DWORD *)a2 + 88);
  v207 = *((_QWORD *)a2 + 41);
  if (v207 == 1)
  {
    v207 = 2;
LABEL_539:
    std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>((uint64_t)v6 + 320, v207);
    goto LABEL_540;
  }
  if ((v207 & (v207 - 1)) != 0)
  {
    v207 = std::__next_prime(*((_QWORD *)a2 + 41));
    v8 = *((_QWORD *)v6 + 41);
    v295 = v207 >= v8;
    if (v207 > v8)
      goto LABEL_539;
  }
  else
  {
    v8 = 0;
    v295 = 1;
    if (v207)
      goto LABEL_539;
  }
  if (!v295)
  {
    v322 = vcvtps_u32_f32((float)*((unint64_t *)v6 + 43) / *((float *)v6 + 88));
    if (v8 < 3 || (v323 = (uint8x8_t)vcnt_s8((int8x8_t)v8), v323.i16[0] = vaddlv_u8(v323), v323.u32[0] > 1uLL))
    {
      v322 = std::__next_prime(v322);
    }
    else
    {
      v324 = 1 << -(char)__clz(v322 - 1);
      if (v322 >= 2)
        v322 = v324;
    }
    if (v207 <= v322)
      v207 = v322;
    if (v207 < v8)
      goto LABEL_539;
  }
LABEL_540:
  v336 = (_QWORD *)((char *)v6 + 320);
  v208 = (uint64_t *)*((_QWORD *)a2 + 42);
  if (v208)
  {
    v334 = (_QWORD *)((char *)v6 + 336);
    do
    {
      v209 = *((unsigned __int8 *)v208 + 16);
      v210 = *((_QWORD *)v6 + 41);
      if (v210)
      {
        v211 = (uint8x8_t)vcnt_s8((int8x8_t)v210);
        v211.i16[0] = vaddlv_u8(v211);
        if (v211.u32[0] > 1uLL)
        {
          v5 = *((unsigned __int8 *)v208 + 16);
          if (v210 <= v209)
            v5 = v209 % v210;
        }
        else
        {
          v5 = ((_DWORD)v210 - 1) & v209;
        }
        v212 = *(uint64_t ****)(*v336 + 8 * v5);
        if (v212)
        {
          v213 = *v212;
          if (v213)
          {
            if (v211.u32[0] < 2uLL)
            {
              while (1)
              {
                v215 = v213[1];
                if (v215 == (uint64_t *)v209)
                {
                  if (*((unsigned __int8 *)v213 + 16) == (_DWORD)v209)
                    goto LABEL_604;
                }
                else if (((unint64_t)v215 & (v210 - 1)) != v5)
                {
                  goto LABEL_562;
                }
                v213 = (uint64_t **)*v213;
                if (!v213)
                  goto LABEL_562;
              }
            }
            do
            {
              v214 = (unint64_t)v213[1];
              if (v214 == v209)
              {
                if (*((unsigned __int8 *)v213 + 16) == (_DWORD)v209)
                  goto LABEL_604;
              }
              else
              {
                if (v214 >= v210)
                  v214 %= v210;
                if (v214 != v5)
                  break;
              }
              v213 = (uint64_t **)*v213;
            }
            while (v213);
          }
        }
      }
LABEL_562:
      v216 = operator new(0x30uLL);
      v350 = v216;
      *v216 = 0;
      v216[1] = v209;
      *((_BYTE *)v216 + 16) = *((_BYTE *)v208 + 16);
      v216[4] = 0;
      v216[5] = 0;
      v216[3] = 0;
      v218 = (char *)v208[3];
      v217 = (char *)v208[4];
      v219 = v217 - v218;
      if (v217 != v218)
      {
        v220 = 0xAAAAAAAAAAAAAAABLL * (v219 >> 4);
        if (v220 > 0x555555555555555)
          abort();
        v221 = (char *)operator new(v219);
        v216[3] = v221;
        v216[4] = v221;
        v216[5] = &v221[48 * v220];
        v8 = (unint64_t)v221;
        do
        {
          *(_WORD *)v8 = *(_WORD *)v218;
          std::unordered_map<float,geo::Color<float,3,(geo::ColorSpace)0>>::unordered_map(v8 + 8, (uint64_t)(v218 + 8));
          v218 += 48;
          v8 += 48;
        }
        while (v218 != v217);
        v216[4] = v8;
      }
      v222 = (float)(unint64_t)(*((_QWORD *)v6 + 43) + 1);
      v223 = *((float *)v6 + 88);
      if (!v210 || (float)(v223 * (float)v210) < v222)
      {
        v224 = (v210 & (v210 - 1)) != 0;
        if (v210 < 3)
          v224 = 1;
        v225 = v224 | (2 * v210);
        v226 = vcvtps_u32_f32(v222 / v223);
        if (v225 <= v226)
          v227 = v226;
        else
          v227 = v225;
        if (v227 == 1)
        {
          v227 = 2;
        }
        else if ((v227 & (v227 - 1)) != 0)
        {
          v227 = std::__next_prime(v227);
        }
        v8 = *((_QWORD *)v6 + 41);
        if (v227 > v8)
          goto LABEL_579;
        if (v227 < v8)
        {
          v228 = vcvtps_u32_f32((float)*((unint64_t *)v6 + 43) / *((float *)v6 + 88));
          if (v8 < 3 || (v229 = (uint8x8_t)vcnt_s8((int8x8_t)v8), v229.i16[0] = vaddlv_u8(v229), v229.u32[0] > 1uLL))
          {
            v228 = std::__next_prime(v228);
          }
          else
          {
            v230 = 1 << -(char)__clz(v228 - 1);
            if (v228 >= 2)
              v228 = v230;
          }
          if (v227 <= v228)
            v227 = v228;
          if (v227 < v8)
LABEL_579:
            std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>((uint64_t)v336, v227);
        }
        v210 = *((_QWORD *)v6 + 41);
        if ((v210 & (v210 - 1)) != 0)
        {
          if (v210 <= v209)
            v5 = v209 % v210;
          else
            v5 = v209;
        }
        else
        {
          v5 = ((_DWORD)v210 - 1) & v209;
        }
      }
      v231 = *(_QWORD **)(*v336 + 8 * v5);
      if (v231)
      {
        *v350 = *v231;
        *v231 = v350;
      }
      else
      {
        *v350 = *v334;
        *v334 = v350;
        *(_QWORD *)(*v336 + 8 * v5) = v334;
        if (*v350)
        {
          v232 = *(_QWORD *)(*v350 + 8);
          if ((v210 & (v210 - 1)) != 0)
          {
            if (v232 >= v210)
              v232 %= v210;
          }
          else
          {
            v232 &= v210 - 1;
          }
          *(_QWORD *)(*v336 + 8 * v232) = v350;
        }
      }
      ++*((_QWORD *)v6 + 43);
LABEL_604:
      v208 = (uint64_t *)*v208;
    }
    while (v208);
  }
  v233 = (_QWORD *)((char *)v6 + 360);
  *(_OWORD *)((char *)v6 + 360) = 0u;
  *(_OWORD *)((char *)v6 + 376) = 0u;
  *((_DWORD *)v6 + 98) = *((_DWORD *)a2 + 98);
  v234 = *((_QWORD *)a2 + 46);
  if (v234 == 1)
  {
    v234 = 2;
LABEL_607:
    std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>((uint64_t)v6 + 360, v234);
    goto LABEL_608;
  }
  if ((v234 & (v234 - 1)) != 0)
  {
    v234 = std::__next_prime(v234);
    v8 = *((_QWORD *)v6 + 46);
    v296 = v234 >= v8;
    if (v234 > v8)
      goto LABEL_607;
  }
  else
  {
    v8 = 0;
    v296 = 1;
    if (v234)
      goto LABEL_607;
  }
  if (!v296)
  {
    v325 = vcvtps_u32_f32((float)*((unint64_t *)v6 + 48) / *((float *)v6 + 98));
    if (v8 < 3 || (v326 = (uint8x8_t)vcnt_s8((int8x8_t)v8), v326.i16[0] = vaddlv_u8(v326), v326.u32[0] > 1uLL))
    {
      v325 = std::__next_prime(v325);
    }
    else
    {
      v327 = 1 << -(char)__clz(v325 - 1);
      if (v325 >= 2)
        v325 = v327;
    }
    if (v234 <= v325)
      v234 = v325;
    if (v234 < v8)
      goto LABEL_607;
  }
LABEL_608:
  v235 = (uint64_t *)*((_QWORD *)a2 + 47);
  if (v235)
  {
    v236 = (_QWORD *)((char *)v6 + 376);
    v237 = *((_QWORD *)v6 + 46);
    do
    {
      v238 = *((unsigned __int8 *)v235 + 16);
      if (v237)
      {
        v239 = (uint8x8_t)vcnt_s8((int8x8_t)v237);
        v239.i16[0] = vaddlv_u8(v239);
        if (v239.u32[0] > 1uLL)
        {
          v8 = *((unsigned __int8 *)v235 + 16);
          if (v237 <= v238)
            v8 = v238 % v237;
        }
        else
        {
          v8 = ((_DWORD)v237 - 1) & v238;
        }
        v240 = *(uint64_t ****)(*v233 + 8 * v8);
        if (v240)
        {
          v241 = *v240;
          if (v241)
          {
            if (v239.u32[0] < 2uLL)
            {
              while (1)
              {
                v243 = v241[1];
                if (v243 == (uint64_t *)v238)
                {
                  if (*((unsigned __int8 *)v241 + 16) == (_DWORD)v238)
                    goto LABEL_671;
                }
                else if (((unint64_t)v243 & (v237 - 1)) != v8)
                {
                  goto LABEL_630;
                }
                v241 = (uint64_t **)*v241;
                if (!v241)
                  goto LABEL_630;
              }
            }
            do
            {
              v242 = (unint64_t)v241[1];
              if (v242 == v238)
              {
                if (*((unsigned __int8 *)v241 + 16) == (_DWORD)v238)
                  goto LABEL_671;
              }
              else
              {
                if (v242 >= v237)
                  v242 %= v237;
                if (v242 != v8)
                  break;
              }
              v241 = (uint64_t **)*v241;
            }
            while (v241);
          }
        }
      }
LABEL_630:
      v244 = operator new(0x30uLL);
      v351 = v244;
      *v244 = 0;
      v244[1] = v238;
      *((_BYTE *)v244 + 16) = *((_BYTE *)v235 + 16);
      v244[4] = 0;
      v244[5] = 0;
      v244[3] = 0;
      v246 = (_BYTE *)v235[3];
      v245 = (_BYTE *)v235[4];
      v247 = v245 - v246;
      if (v245 != v246)
      {
        if (v247 < 0)
          abort();
        v248 = (char *)operator new(v245 - v246);
        v244[3] = v248;
        v244[4] = v248;
        v244[5] = &v248[16 * (v247 >> 4)];
        v249 = v247 & 0xFFFFFFFFFFFFFFF0;
        memcpy(v248, v246, v249);
        v244[4] = &v248[v249];
      }
      v250 = (float)(unint64_t)(*((_QWORD *)v6 + 48) + 1);
      v251 = *((float *)v6 + 98);
      if (v237 && (float)(v251 * (float)v237) >= v250)
      {
        v233 = (_QWORD *)((char *)v6 + 360);
      }
      else
      {
        v252 = (v237 & (v237 - 1)) != 0;
        if (v237 < 3)
          v252 = 1;
        v253 = v252 | (2 * v237);
        v254 = vcvtps_u32_f32(v250 / v251);
        if (v253 <= v254)
          v255 = v254;
        else
          v255 = v253;
        v233 = (_QWORD *)((char *)v6 + 360);
        if (v255 == 1)
        {
          v255 = 2;
        }
        else if ((v255 & (v255 - 1)) != 0)
        {
          v255 = std::__next_prime(v255);
          v237 = *((_QWORD *)v6 + 46);
        }
        if (v255 > v237)
          goto LABEL_646;
        if (v255 < v237)
        {
          v256 = vcvtps_u32_f32((float)*((unint64_t *)v6 + 48) / *((float *)v6 + 98));
          if (v237 < 3
            || (v257 = (uint8x8_t)vcnt_s8((int8x8_t)v237), v257.i16[0] = vaddlv_u8(v257), v257.u32[0] > 1uLL))
          {
            v256 = std::__next_prime(v256);
          }
          else
          {
            v258 = 1 << -(char)__clz(v256 - 1);
            if (v256 >= 2)
              v256 = v258;
          }
          if (v255 <= v256)
            v255 = v256;
          if (v255 < v237)
LABEL_646:
            std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>((uint64_t)v6 + 360, v255);
        }
        v237 = *((_QWORD *)v6 + 46);
        if ((v237 & (v237 - 1)) != 0)
        {
          if (v237 <= v238)
            v8 = v238 % v237;
          else
            v8 = v238;
        }
        else
        {
          v8 = ((_DWORD)v237 - 1) & v238;
        }
      }
      v259 = *(_QWORD **)(*v233 + 8 * v8);
      if (v259)
      {
        *v351 = *v259;
        *v259 = v351;
      }
      else
      {
        *v351 = *v236;
        *v236 = v351;
        *(_QWORD *)(*v233 + 8 * v8) = v236;
        if (*v351)
        {
          v260 = *(_QWORD *)(*v351 + 8);
          if ((v237 & (v237 - 1)) != 0)
          {
            if (v260 >= v237)
              v260 %= v237;
          }
          else
          {
            v260 &= v237 - 1;
          }
          *(_QWORD *)(*v233 + 8 * v260) = v351;
        }
      }
      ++*((_QWORD *)v6 + 48);
LABEL_671:
      v235 = (uint64_t *)*v235;
    }
    while (v235);
  }
  *((_QWORD *)v6 + 50) = *((_QWORD *)a2 + 50);
  v261 = (uint64_t *)((char *)v6 + 408);
  *(_OWORD *)((char *)v6 + 408) = 0u;
  *(_OWORD *)((char *)v6 + 424) = 0u;
  *((_DWORD *)v6 + 110) = *((_DWORD *)a2 + 110);
  v262 = *((_QWORD *)a2 + 52);
  if (v262 == 1)
  {
    v262 = 2;
LABEL_674:
    std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>((uint64_t)v6 + 408, v262);
    goto LABEL_675;
  }
  if ((v262 & (v262 - 1)) != 0)
  {
    v262 = std::__next_prime(*((_QWORD *)a2 + 52));
    v8 = *((_QWORD *)v6 + 52);
    v297 = v262 >= v8;
    if (v262 > v8)
      goto LABEL_674;
  }
  else
  {
    v8 = 0;
    v297 = 1;
    if (v262)
      goto LABEL_674;
  }
  if (!v297)
  {
    v328 = vcvtps_u32_f32((float)*((unint64_t *)v6 + 54) / *((float *)v6 + 110));
    if (v8 < 3 || (v329 = (uint8x8_t)vcnt_s8((int8x8_t)v8), v329.i16[0] = vaddlv_u8(v329), v329.u32[0] > 1uLL))
    {
      v328 = std::__next_prime(v328);
    }
    else
    {
      v330 = 1 << -(char)__clz(v328 - 1);
      if (v328 >= 2)
        v328 = v330;
    }
    if (v262 <= v328)
      v262 = v328;
    if (v262 < v8)
      goto LABEL_674;
  }
LABEL_675:
  v263 = (uint64_t *)*((_QWORD *)a2 + 53);
  if (v263)
  {
    v264 = (_QWORD *)((char *)v6 + 424);
    v265 = *((_QWORD *)v6 + 52);
    do
    {
      v266 = *((unsigned __int8 *)v263 + 16);
      if (v265)
      {
        v267 = (uint8x8_t)vcnt_s8((int8x8_t)v265);
        v267.i16[0] = vaddlv_u8(v267);
        if (v267.u32[0] > 1uLL)
        {
          v8 = *((unsigned __int8 *)v263 + 16);
          if (v265 <= v266)
            v8 = v266 % v265;
        }
        else
        {
          v8 = ((_DWORD)v265 - 1) & v266;
        }
        v268 = *(uint64_t ****)(*v261 + 8 * v8);
        if (v268)
        {
          v269 = *v268;
          if (v269)
          {
            if (v267.u32[0] < 2uLL)
            {
              while (1)
              {
                v271 = v269[1];
                if (v271 == (uint64_t *)v266)
                {
                  if (*((unsigned __int8 *)v269 + 16) == (_DWORD)v266)
                    goto LABEL_735;
                }
                else if (((unint64_t)v271 & (v265 - 1)) != v8)
                {
                  goto LABEL_697;
                }
                v269 = (uint64_t **)*v269;
                if (!v269)
                  goto LABEL_697;
              }
            }
            do
            {
              v270 = (unint64_t)v269[1];
              if (v270 == v266)
              {
                if (*((unsigned __int8 *)v269 + 16) == (_DWORD)v266)
                  goto LABEL_735;
              }
              else
              {
                if (v270 >= v265)
                  v270 %= v265;
                if (v270 != v8)
                  break;
              }
              v269 = (uint64_t **)*v269;
            }
            while (v269);
          }
        }
      }
LABEL_697:
      v272 = operator new(0x18uLL);
      *v272 = 0;
      v272[1] = v266;
      *((_WORD *)v272 + 8) = *((_WORD *)v263 + 8);
      v273 = (float)(unint64_t)(*((_QWORD *)v6 + 54) + 1);
      v274 = *((float *)v6 + 110);
      if (!v265 || (float)(v274 * (float)v265) < v273)
      {
        v275 = (v265 & (v265 - 1)) != 0;
        if (v265 < 3)
          v275 = 1;
        v276 = v275 | (2 * v265);
        v277 = vcvtps_u32_f32(v273 / v274);
        if (v276 <= v277)
          v278 = v277;
        else
          v278 = v276;
        if (v278 == 1)
        {
          v278 = 2;
        }
        else if ((v278 & (v278 - 1)) != 0)
        {
          v278 = std::__next_prime(v278);
          v265 = *((_QWORD *)v6 + 52);
        }
        if (v278 > v265)
          goto LABEL_709;
        if (v278 < v265)
        {
          v279 = vcvtps_u32_f32((float)*((unint64_t *)v6 + 54) / *((float *)v6 + 110));
          if (v265 < 3
            || (v280 = (uint8x8_t)vcnt_s8((int8x8_t)v265), v280.i16[0] = vaddlv_u8(v280), v280.u32[0] > 1uLL))
          {
            v279 = std::__next_prime(v279);
          }
          else
          {
            v281 = 1 << -(char)__clz(v279 - 1);
            if (v279 >= 2)
              v279 = v281;
          }
          if (v278 <= v279)
            v278 = v279;
          if (v278 < v265)
LABEL_709:
            std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>((uint64_t)v6 + 408, v278);
        }
        v265 = *((_QWORD *)v6 + 52);
        if ((v265 & (v265 - 1)) != 0)
        {
          if (v265 <= v266)
            v8 = v266 % v265;
          else
            v8 = v266;
        }
        else
        {
          v8 = ((_DWORD)v265 - 1) & v266;
        }
      }
      v282 = *v261;
      v283 = *(_QWORD **)(*v261 + 8 * v8);
      if (v283)
      {
        *v272 = *v283;
      }
      else
      {
        *v272 = *v264;
        *v264 = v272;
        *(_QWORD *)(v282 + 8 * v8) = v264;
        if (!*v272)
          goto LABEL_734;
        v284 = *(_QWORD *)(*v272 + 8);
        if ((v265 & (v265 - 1)) != 0)
        {
          if (v284 >= v265)
            v284 %= v265;
        }
        else
        {
          v284 &= v265 - 1;
        }
        v283 = (_QWORD *)(*v261 + 8 * v284);
      }
      *v283 = v272;
LABEL_734:
      ++*((_QWORD *)v6 + 54);
LABEL_735:
      v263 = (uint64_t *)*v263;
    }
    while (v263);
  }
  *((_WORD *)v6 + 224) = *((_WORD *)a2 + 224);
  return v6;
}

{
  uint64_t v4;

  v4 = std::unordered_map<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,geo::Color<float,4,(geo::ColorSpace)2>>>>::unordered_map((uint64_t)this, (uint64_t)a2)+ 40;
  std::unordered_map<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,geo::Color<float,3,(geo::ColorSpace)2>>>>::unordered_map(v4, (uint64_t)a2 + 40);
  std::unordered_map<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,float>>>::unordered_map((uint64_t)this + 80, (uint64_t)a2 + 80);
  std::unordered_map<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,unsigned char>>>::unordered_map((uint64_t)this + 120, (uint64_t)a2 + 120);
  std::unordered_map<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,int>>>::unordered_map((uint64_t)this + 160, (uint64_t)a2 + 160);
  std::unordered_map<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,BOOL>>>::unordered_map((uint64_t)this + 200, (uint64_t)a2 + 200);
  std::unordered_map<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,gm::Matrix<float,2,1>>>>::unordered_map((uint64_t)this + 240, (uint64_t)a2 + 240);
  std::unordered_map<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,std::unordered_map<float,geo::Color<float,4,(geo::ColorSpace)0>>>>>::unordered_map((uint64_t)this + 280, (uint64_t)a2 + 280);
  std::unordered_map<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,std::unordered_map<float,geo::Color<float,3,(geo::ColorSpace)0>>>>>::unordered_map((uint64_t)this + 320, (uint64_t)a2 + 320);
  std::unordered_map<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,gm::Matrix<float,3,1>>>>::unordered_map((uint64_t)this + 360, (uint64_t)a2 + 360);
  *((_QWORD *)this + 50) = *((_QWORD *)a2 + 50);
  std::unordered_map<unsigned char,BOOL>::unordered_map((uint64_t)this + 408, (uint64_t)a2 + 408);
  *((_WORD *)this + 224) = *((_WORD *)a2 + 224);
  return this;
}

void sub_19F11C074(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, md::MeshRenderableContext *a9, md::MeshRenderableContext *a10, md::MeshRenderableContext *a11, md::MeshRenderableContext *a12, md::MeshRenderableContext *a13, uint64_t a14, md::MeshRenderableContext *a15, uint64_t a16, uint64_t a17, md::MeshRenderableContext *a18, md::MeshRenderableContext *a19, char a20)
{
  uint64_t v20;

  std::unordered_set<md::MuninJunction const*>::~unordered_set[abi:nn180100](v20);
  md::MeshRenderableContext::~MeshRenderableContext(a15);
  std::__hash_table<std::__hash_value_type<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,std::unordered_map<float,geo::Color<float,3,(geo::ColorSpace)0>>>>>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,std::unordered_map<float,geo::Color<float,3,(geo::ColorSpace)0>>>>>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,std::unordered_map<float,geo::Color<float,3,(geo::ColorSpace)0>>>>>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,std::unordered_map<float,geo::Color<float,3,(geo::ColorSpace)0>>>>>>>::~__hash_table(a16);
  std::__hash_table<std::__hash_value_type<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,std::unordered_map<float,geo::Color<float,3,(geo::ColorSpace)0>>>>>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,std::unordered_map<float,geo::Color<float,3,(geo::ColorSpace)0>>>>>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,std::unordered_map<float,geo::Color<float,3,(geo::ColorSpace)0>>>>>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,std::unordered_map<float,geo::Color<float,3,(geo::ColorSpace)0>>>>>>>::~__hash_table(a17);
  md::MeshRenderableContext::~MeshRenderableContext(a9);
  md::MeshRenderableContext::~MeshRenderableContext(a10);
  md::MeshRenderableContext::~MeshRenderableContext(a18);
  md::MeshRenderableContext::~MeshRenderableContext(a12);
  md::MeshRenderableContext::~MeshRenderableContext(a19);
  md::MeshRenderableContext::~MeshRenderableContext(a13);
  md::MeshRenderableContext::~MeshRenderableContext(a11);
  _Unwind_Resume(a1);
}

void sub_19F11C464(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, md::MeshRenderableContext *a10)
{
  md::MeshRenderableContext *v10;
  md::MeshRenderableContext *v11;
  md::MeshRenderableContext *v12;
  md::MeshRenderableContext *v13;
  md::MeshRenderableContext *v14;
  md::MeshRenderableContext *v15;
  md::MeshRenderableContext *v16;
  uint64_t v17;
  uint64_t v18;

  md::MeshRenderableContext::~MeshRenderableContext(v11);
  std::__hash_table<std::__hash_value_type<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,std::unordered_map<float,geo::Color<float,3,(geo::ColorSpace)0>>>>>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,std::unordered_map<float,geo::Color<float,3,(geo::ColorSpace)0>>>>>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,std::unordered_map<float,geo::Color<float,3,(geo::ColorSpace)0>>>>>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,std::unordered_map<float,geo::Color<float,3,(geo::ColorSpace)0>>>>>>>::~__hash_table(v18);
  std::__hash_table<std::__hash_value_type<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,std::unordered_map<float,geo::Color<float,3,(geo::ColorSpace)0>>>>>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,std::unordered_map<float,geo::Color<float,3,(geo::ColorSpace)0>>>>>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,std::unordered_map<float,geo::Color<float,3,(geo::ColorSpace)0>>>>>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,std::unordered_map<float,geo::Color<float,3,(geo::ColorSpace)0>>>>>>>::~__hash_table(v17);
  md::MeshRenderableContext::~MeshRenderableContext(v16);
  md::MeshRenderableContext::~MeshRenderableContext(v15);
  md::MeshRenderableContext::~MeshRenderableContext(v14);
  md::MeshRenderableContext::~MeshRenderableContext(v13);
  md::MeshRenderableContext::~MeshRenderableContext(v12);
  md::MeshRenderableContext::~MeshRenderableContext(a10);
  md::MeshRenderableContext::~MeshRenderableContext(v10);
  _Unwind_Resume(a1);
}

void sub_19F11C4E0()
{
  JUMPOUT(0x19F11C4B0);
}

void sub_19F11C4E8()
{
  JUMPOUT(0x19F11C4B8);
}

void sub_19F11C4F0()
{
  JUMPOUT(0x19F11C4C0);
}

void sub_19F11C4F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, md::MeshRenderableContext *a10)
{
  md::MeshRenderableContext *v10;

  md::MeshRenderableContext::~MeshRenderableContext(a10);
  md::MeshRenderableContext::~MeshRenderableContext(v10);
  _Unwind_Resume(a1);
}

void sub_19F11C514(_Unwind_Exception *a1)
{
  md::MeshRenderableContext *v1;

  md::MeshRenderableContext::~MeshRenderableContext(v1);
  _Unwind_Resume(a1);
}

uint64_t std::unordered_map<unsigned char,BOOL>::unordered_map(uint64_t a1, uint64_t a2)
{
  size_t prime;
  int8x8_t v5;
  BOOL v6;
  unint64_t v7;
  uint8x8_t v8;
  uint64_t v9;
  unsigned __int8 *i;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  prime = *(_QWORD *)(a2 + 8);
  if (prime == 1)
  {
    prime = 2;
LABEL_17:
    std::__hash_table<std::__hash_value_type<char const*,DebugChapterInfo>,std::__unordered_map_hasher<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::hash<char const*>,std::equal_to<char const*>,true>,std::__unordered_map_equal<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::equal_to<char const*>,std::hash<char const*>,true>,std::allocator<std::__hash_value_type<char const*,DebugChapterInfo>>>::__do_rehash<true>(a1, prime);
    goto LABEL_18;
  }
  if ((prime & (prime - 1)) != 0)
  {
    prime = std::__next_prime(*(_QWORD *)(a2 + 8));
    v5 = *(int8x8_t *)(a1 + 8);
    v6 = prime >= *(_QWORD *)&v5;
    if (prime > *(_QWORD *)&v5)
      goto LABEL_17;
  }
  else
  {
    v5 = 0;
    v6 = 1;
    if (prime)
      goto LABEL_17;
  }
  if (!v6)
  {
    v7 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(_QWORD *)&v5 < 3uLL || (v8 = (uint8x8_t)vcnt_s8(v5), v8.i16[0] = vaddlv_u8(v8), v8.u32[0] > 1uLL))
    {
      v7 = std::__next_prime(v7);
    }
    else
    {
      v9 = 1 << -(char)__clz(v7 - 1);
      if (v7 >= 2)
        v7 = v9;
    }
    if (prime <= v7)
      prime = v7;
    if (prime < *(_QWORD *)&v5)
      goto LABEL_17;
  }
LABEL_18:
  for (i = *(unsigned __int8 **)(a2 + 16); i; i = *(unsigned __int8 **)i)
    std::__hash_table<std::__hash_value_type<unsigned char,BOOL>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,BOOL>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,BOOL>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,BOOL>>>::__emplace_unique_key_args<unsigned char,std::pair<unsigned char const,BOOL> const&>(a1, i + 16, (_WORD *)i + 8);
  return a1;
}

void sub_19F11C640(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unordered_set<md::MuninJunction const*>::~unordered_set[abi:nn180100](v1);
  _Unwind_Resume(a1);
}

void sub_19F11C654(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unordered_set<md::MuninJunction const*>::~unordered_set[abi:nn180100](v1);
  _Unwind_Resume(a1);
}

uint64_t **std::__hash_table<std::__hash_value_type<unsigned char,BOOL>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,BOOL>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,BOOL>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,BOOL>>>::__emplace_unique_key_args<unsigned char,std::pair<unsigned char const,BOOL> const&>(uint64_t a1, unsigned __int8 *a2, _WORD *a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  uint64_t ***v9;
  uint64_t **v10;
  unint64_t v11;
  uint64_t *v12;
  _QWORD *v14;
  float v15;
  float v16;
  _BOOL8 v17;
  unint64_t v18;
  unint64_t v19;
  size_t prime;
  unint64_t v21;
  uint8x8_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  unint64_t v26;

  v6 = *a2;
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = *a2;
      if (v7 <= v6)
        v3 = v6 % v7;
    }
    else
    {
      v3 = ((_DWORD)v7 - 1) & v6;
    }
    v9 = *(uint64_t ****)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      v10 = *v9;
      if (*v9)
      {
        if (v8.u32[0] < 2uLL)
        {
          while (1)
          {
            v12 = v10[1];
            if (v12 == (uint64_t *)v6)
            {
              if (*((unsigned __int8 *)v10 + 16) == (_DWORD)v6)
                return v10;
            }
            else if (((unint64_t)v12 & (v7 - 1)) != v3)
            {
              goto LABEL_23;
            }
            v10 = (uint64_t **)*v10;
            if (!v10)
              goto LABEL_23;
          }
        }
        do
        {
          v11 = (unint64_t)v10[1];
          if (v11 == v6)
          {
            if (*((unsigned __int8 *)v10 + 16) == (_DWORD)v6)
              return v10;
          }
          else
          {
            if (v11 >= v7)
              v11 %= v7;
            if (v11 != v3)
              break;
          }
          v10 = (uint64_t **)*v10;
        }
        while (v10);
      }
    }
  }
LABEL_23:
  v14 = operator new(0x18uLL);
  *v14 = 0;
  v14[1] = v6;
  *((_WORD *)v14 + 8) = *a3;
  v15 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v16 = *(float *)(a1 + 32);
  if (v7 && (float)(v16 * (float)v7) >= v15)
  {
    v6 = v3;
  }
  else
  {
    v17 = 1;
    if (v7 >= 3)
      v17 = (v7 & (v7 - 1)) != 0;
    v18 = v17 | (2 * v7);
    v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19)
      prime = v19;
    else
      prime = v18;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v7 = *(_QWORD *)(a1 + 8);
    }
    if (prime > v7)
      goto LABEL_36;
    if (prime < v7)
    {
      v21 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v7 < 3 || (v22 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v22.i16[0] = vaddlv_u8(v22), v22.u32[0] > 1uLL))
      {
        v21 = std::__next_prime(v21);
      }
      else
      {
        v23 = 1 << -(char)__clz(v21 - 1);
        if (v21 >= 2)
          v21 = v23;
      }
      if (prime <= v21)
        prime = v21;
      if (prime < v7)
LABEL_36:
        std::__hash_table<std::__hash_value_type<char const*,DebugChapterInfo>,std::__unordered_map_hasher<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::hash<char const*>,std::equal_to<char const*>,true>,std::__unordered_map_equal<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::equal_to<char const*>,std::hash<char const*>,true>,std::allocator<std::__hash_value_type<char const*,DebugChapterInfo>>>::__do_rehash<true>(a1, prime);
    }
    v7 = *(_QWORD *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6)
        v6 %= v7;
    }
    else
    {
      v6 = ((_DWORD)v7 - 1) & v6;
    }
  }
  v24 = *(_QWORD *)a1;
  v25 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v6);
  if (v25)
  {
    *v14 = *v25;
LABEL_59:
    *v25 = v14;
    goto LABEL_60;
  }
  *v14 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v14;
  *(_QWORD *)(v24 + 8 * v6) = a1 + 16;
  if (*v14)
  {
    v26 = *(_QWORD *)(*v14 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v26 >= v7)
        v26 %= v7;
    }
    else
    {
      v26 &= v7 - 1;
    }
    v25 = (_QWORD *)(*(_QWORD *)a1 + 8 * v26);
    goto LABEL_59;
  }
LABEL_60:
  ++*(_QWORD *)(a1 + 24);
  return (uint64_t **)v14;
}

void sub_19F11C954(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__hash_table<std::__hash_value_type<char const*,DebugChapterInfo>,std::__unordered_map_hasher<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::hash<char const*>,std::equal_to<char const*>,true>,std::__unordered_map_equal<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::equal_to<char const*>,std::hash<char const*>,true>,std::allocator<std::__hash_value_type<char const*,DebugChapterInfo>>>::__do_rehash<true>(uint64_t a1, unint64_t a2)
{
  void *v4;
  void *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  _QWORD *v16;
  uint64_t v17;
  unint64_t v18;

  if (!a2)
  {
    v15 = *(void **)a1;
    *(_QWORD *)a1 = 0;
    if (v15)
      operator delete(v15);
    *(_QWORD *)(a1 + 8) = 0;
    return;
  }
  if (a2 >> 61)
    std::__throw_bad_array_new_length[abi:ne180100]();
  v4 = operator new(8 * a2);
  v5 = *(void **)a1;
  *(_QWORD *)a1 = v4;
  if (v5)
    operator delete(v5);
  v6 = 0;
  *(_QWORD *)(a1 + 8) = a2;
  do
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v6++) = 0;
  while (a2 != v6);
  v8 = a1 + 16;
  v7 = *(_QWORD **)(a1 + 16);
  if (v7)
  {
    v9 = v7[1];
    v10 = a2 - 1;
    if ((a2 & (a2 - 1)) == 0)
    {
      v11 = v9 & v10;
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v11) = v8;
      while (1)
      {
        v12 = (_QWORD *)*v7;
        if (!*v7)
          break;
        v13 = v12[1] & v10;
        if (v13 == v11)
        {
          v7 = (_QWORD *)*v7;
        }
        else if (*(_QWORD *)(*(_QWORD *)a1 + 8 * v13))
        {
          *v7 = *v12;
          v14 = 8 * v13;
          *v12 = **(_QWORD **)(*(_QWORD *)a1 + v14);
          **(_QWORD **)(*(_QWORD *)a1 + v14) = v12;
        }
        else
        {
          *(_QWORD *)(*(_QWORD *)a1 + 8 * v13) = v7;
          v7 = v12;
          v11 = v13;
        }
      }
      return;
    }
    if (v9 >= a2)
      v9 %= a2;
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v9) = v8;
    v16 = (_QWORD *)*v7;
    if (*v7)
    {
      while (1)
      {
        v18 = v16[1];
        if (v18 >= a2)
          v18 %= a2;
        if (v18 == v9)
          goto LABEL_25;
        if (*(_QWORD *)(*(_QWORD *)a1 + 8 * v18))
        {
          *v7 = *v16;
          v17 = 8 * v18;
          *v16 = **(_QWORD **)(*(_QWORD *)a1 + v17);
          **(_QWORD **)(*(_QWORD *)a1 + v17) = v16;
          v16 = v7;
LABEL_25:
          v7 = v16;
          v16 = (_QWORD *)*v16;
          if (!v16)
            return;
        }
        else
        {
          *(_QWORD *)(*(_QWORD *)a1 + 8 * v18) = v7;
          v7 = v16;
          v16 = (_QWORD *)*v16;
          v9 = v18;
          if (!v16)
            return;
        }
      }
    }
  }
}

uint64_t std::unordered_map<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,int>>>::unordered_map(uint64_t a1, uint64_t a2)
{
  size_t prime;
  int8x8_t v5;
  BOOL v6;
  unint64_t v7;
  uint8x8_t v8;
  uint64_t v9;
  unsigned __int8 *i;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  prime = *(_QWORD *)(a2 + 8);
  if (prime == 1)
  {
    prime = 2;
LABEL_17:
    std::__hash_table<std::__hash_value_type<char const*,DebugChapterInfo>,std::__unordered_map_hasher<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::hash<char const*>,std::equal_to<char const*>,true>,std::__unordered_map_equal<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::equal_to<char const*>,std::hash<char const*>,true>,std::allocator<std::__hash_value_type<char const*,DebugChapterInfo>>>::__do_rehash<true>(a1, prime);
    goto LABEL_18;
  }
  if ((prime & (prime - 1)) != 0)
  {
    prime = std::__next_prime(*(_QWORD *)(a2 + 8));
    v5 = *(int8x8_t *)(a1 + 8);
    v6 = prime >= *(_QWORD *)&v5;
    if (prime > *(_QWORD *)&v5)
      goto LABEL_17;
  }
  else
  {
    v5 = 0;
    v6 = 1;
    if (prime)
      goto LABEL_17;
  }
  if (!v6)
  {
    v7 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(_QWORD *)&v5 < 3uLL || (v8 = (uint8x8_t)vcnt_s8(v5), v8.i16[0] = vaddlv_u8(v8), v8.u32[0] > 1uLL))
    {
      v7 = std::__next_prime(v7);
    }
    else
    {
      v9 = 1 << -(char)__clz(v7 - 1);
      if (v7 >= 2)
        v7 = v9;
    }
    if (prime <= v7)
      prime = v7;
    if (prime < *(_QWORD *)&v5)
      goto LABEL_17;
  }
LABEL_18:
  for (i = *(unsigned __int8 **)(a2 + 16); i; i = *(unsigned __int8 **)i)
    std::__hash_table<std::__hash_value_type<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,int>>>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,int>>>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,int>>>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,int>>>>>::__emplace_unique_key_args<unsigned char,std::pair<unsigned char const,std::vector<std::pair<gm::Range<unsigned char>,int>>> const&>(a1, i + 16, (char *)i + 16);
  return a1;
}

void sub_19F11CC2C(_Unwind_Exception *a1)
{
  md::MeshRenderableContext *v1;

  md::MeshRenderableContext::~MeshRenderableContext(v1);
  _Unwind_Resume(a1);
}

void sub_19F11CC40(_Unwind_Exception *a1)
{
  md::MeshRenderableContext *v1;

  md::MeshRenderableContext::~MeshRenderableContext(v1);
  _Unwind_Resume(a1);
}

uint64_t std::unordered_map<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,gm::Matrix<float,3,1>>>>::unordered_map(uint64_t a1, uint64_t a2)
{
  size_t prime;
  int8x8_t v5;
  BOOL v6;
  unint64_t v7;
  uint8x8_t v8;
  uint64_t v9;
  unsigned __int8 *i;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  prime = *(_QWORD *)(a2 + 8);
  if (prime == 1)
  {
    prime = 2;
LABEL_17:
    std::__hash_table<std::__hash_value_type<char const*,DebugChapterInfo>,std::__unordered_map_hasher<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::hash<char const*>,std::equal_to<char const*>,true>,std::__unordered_map_equal<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::equal_to<char const*>,std::hash<char const*>,true>,std::allocator<std::__hash_value_type<char const*,DebugChapterInfo>>>::__do_rehash<true>(a1, prime);
    goto LABEL_18;
  }
  if ((prime & (prime - 1)) != 0)
  {
    prime = std::__next_prime(*(_QWORD *)(a2 + 8));
    v5 = *(int8x8_t *)(a1 + 8);
    v6 = prime >= *(_QWORD *)&v5;
    if (prime > *(_QWORD *)&v5)
      goto LABEL_17;
  }
  else
  {
    v5 = 0;
    v6 = 1;
    if (prime)
      goto LABEL_17;
  }
  if (!v6)
  {
    v7 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(_QWORD *)&v5 < 3uLL || (v8 = (uint8x8_t)vcnt_s8(v5), v8.i16[0] = vaddlv_u8(v8), v8.u32[0] > 1uLL))
    {
      v7 = std::__next_prime(v7);
    }
    else
    {
      v9 = 1 << -(char)__clz(v7 - 1);
      if (v7 >= 2)
        v7 = v9;
    }
    if (prime <= v7)
      prime = v7;
    if (prime < *(_QWORD *)&v5)
      goto LABEL_17;
  }
LABEL_18:
  for (i = *(unsigned __int8 **)(a2 + 16); i; i = *(unsigned __int8 **)i)
    std::__hash_table<std::__hash_value_type<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,gm::Matrix<float,3,1>>>>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,gm::Matrix<float,3,1>>>>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,gm::Matrix<float,3,1>>>>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,gm::Matrix<float,3,1>>>>>>::__emplace_unique_key_args<unsigned char,std::pair<unsigned char const,std::vector<std::pair<gm::Range<unsigned char>,gm::Matrix<float,3,1>>>> const&>(a1, i + 16, (char *)i + 16);
  return a1;
}

void sub_19F11CD6C(_Unwind_Exception *a1)
{
  md::MeshRenderableContext *v1;

  md::MeshRenderableContext::~MeshRenderableContext(v1);
  _Unwind_Resume(a1);
}

void sub_19F11CD80(_Unwind_Exception *a1)
{
  md::MeshRenderableContext *v1;

  md::MeshRenderableContext::~MeshRenderableContext(v1);
  _Unwind_Resume(a1);
}

uint64_t std::unordered_map<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,std::unordered_map<float,geo::Color<float,3,(geo::ColorSpace)0>>>>>::unordered_map(uint64_t a1, uint64_t a2)
{
  size_t prime;
  int8x8_t v5;
  BOOL v6;
  unint64_t v7;
  uint8x8_t v8;
  uint64_t v9;
  unsigned __int8 *i;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  prime = *(_QWORD *)(a2 + 8);
  if (prime == 1)
  {
    prime = 2;
LABEL_17:
    std::__hash_table<std::__hash_value_type<char const*,DebugChapterInfo>,std::__unordered_map_hasher<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::hash<char const*>,std::equal_to<char const*>,true>,std::__unordered_map_equal<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::equal_to<char const*>,std::hash<char const*>,true>,std::allocator<std::__hash_value_type<char const*,DebugChapterInfo>>>::__do_rehash<true>(a1, prime);
    goto LABEL_18;
  }
  if ((prime & (prime - 1)) != 0)
  {
    prime = std::__next_prime(*(_QWORD *)(a2 + 8));
    v5 = *(int8x8_t *)(a1 + 8);
    v6 = prime >= *(_QWORD *)&v5;
    if (prime > *(_QWORD *)&v5)
      goto LABEL_17;
  }
  else
  {
    v5 = 0;
    v6 = 1;
    if (prime)
      goto LABEL_17;
  }
  if (!v6)
  {
    v7 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(_QWORD *)&v5 < 3uLL || (v8 = (uint8x8_t)vcnt_s8(v5), v8.i16[0] = vaddlv_u8(v8), v8.u32[0] > 1uLL))
    {
      v7 = std::__next_prime(v7);
    }
    else
    {
      v9 = 1 << -(char)__clz(v7 - 1);
      if (v7 >= 2)
        v7 = v9;
    }
    if (prime <= v7)
      prime = v7;
    if (prime < *(_QWORD *)&v5)
      goto LABEL_17;
  }
LABEL_18:
  for (i = *(unsigned __int8 **)(a2 + 16); i; i = *(unsigned __int8 **)i)
    std::__hash_table<std::__hash_value_type<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,std::unordered_map<float,geo::Color<float,3,(geo::ColorSpace)0>>>>>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,std::unordered_map<float,geo::Color<float,3,(geo::ColorSpace)0>>>>>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,std::unordered_map<float,geo::Color<float,3,(geo::ColorSpace)0>>>>>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,std::unordered_map<float,geo::Color<float,3,(geo::ColorSpace)0>>>>>>>::__emplace_unique_key_args<unsigned char,std::pair<unsigned char const,std::vector<std::pair<gm::Range<unsigned char>,std::unordered_map<float,geo::Color<float,3,(geo::ColorSpace)0>>>>> const&>(a1, i + 16, (uint64_t)(i + 16));
  return a1;
}

void sub_19F11CEAC(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<std::__hash_value_type<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,std::unordered_map<float,geo::Color<float,3,(geo::ColorSpace)0>>>>>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,std::unordered_map<float,geo::Color<float,3,(geo::ColorSpace)0>>>>>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,std::unordered_map<float,geo::Color<float,3,(geo::ColorSpace)0>>>>>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,std::unordered_map<float,geo::Color<float,3,(geo::ColorSpace)0>>>>>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

void sub_19F11CEC0(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<std::__hash_value_type<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,std::unordered_map<float,geo::Color<float,3,(geo::ColorSpace)0>>>>>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,std::unordered_map<float,geo::Color<float,3,(geo::ColorSpace)0>>>>>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,std::unordered_map<float,geo::Color<float,3,(geo::ColorSpace)0>>>>>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,std::unordered_map<float,geo::Color<float,3,(geo::ColorSpace)0>>>>>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

uint64_t std::unordered_map<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,unsigned char>>>::unordered_map(uint64_t a1, uint64_t a2)
{
  size_t prime;
  int8x8_t v5;
  BOOL v6;
  unint64_t v7;
  uint8x8_t v8;
  uint64_t v9;
  unsigned __int8 *i;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  prime = *(_QWORD *)(a2 + 8);
  if (prime == 1)
  {
    prime = 2;
LABEL_17:
    std::__hash_table<std::__hash_value_type<char const*,DebugChapterInfo>,std::__unordered_map_hasher<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::hash<char const*>,std::equal_to<char const*>,true>,std::__unordered_map_equal<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::equal_to<char const*>,std::hash<char const*>,true>,std::allocator<std::__hash_value_type<char const*,DebugChapterInfo>>>::__do_rehash<true>(a1, prime);
    goto LABEL_18;
  }
  if ((prime & (prime - 1)) != 0)
  {
    prime = std::__next_prime(*(_QWORD *)(a2 + 8));
    v5 = *(int8x8_t *)(a1 + 8);
    v6 = prime >= *(_QWORD *)&v5;
    if (prime > *(_QWORD *)&v5)
      goto LABEL_17;
  }
  else
  {
    v5 = 0;
    v6 = 1;
    if (prime)
      goto LABEL_17;
  }
  if (!v6)
  {
    v7 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(_QWORD *)&v5 < 3uLL || (v8 = (uint8x8_t)vcnt_s8(v5), v8.i16[0] = vaddlv_u8(v8), v8.u32[0] > 1uLL))
    {
      v7 = std::__next_prime(v7);
    }
    else
    {
      v9 = 1 << -(char)__clz(v7 - 1);
      if (v7 >= 2)
        v7 = v9;
    }
    if (prime <= v7)
      prime = v7;
    if (prime < *(_QWORD *)&v5)
      goto LABEL_17;
  }
LABEL_18:
  for (i = *(unsigned __int8 **)(a2 + 16); i; i = *(unsigned __int8 **)i)
    std::__hash_table<std::__hash_value_type<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,unsigned char>>>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,unsigned char>>>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,unsigned char>>>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,unsigned char>>>>>::__emplace_unique_key_args<unsigned char,std::pair<unsigned char const,std::vector<std::pair<gm::Range<unsigned char>,unsigned char>>> const&>(a1, i + 16, (char *)i + 16);
  return a1;
}

void sub_19F11CFEC(_Unwind_Exception *a1)
{
  md::MeshRenderableContext *v1;

  md::MeshRenderableContext::~MeshRenderableContext(v1);
  _Unwind_Resume(a1);
}

void sub_19F11D000(_Unwind_Exception *a1)
{
  md::MeshRenderableContext *v1;

  md::MeshRenderableContext::~MeshRenderableContext(v1);
  _Unwind_Resume(a1);
}

uint64_t std::unordered_map<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,geo::Color<float,4,(geo::ColorSpace)2>>>>::unordered_map(uint64_t a1, uint64_t a2)
{
  size_t prime;
  int8x8_t v5;
  BOOL v6;
  unint64_t v7;
  uint8x8_t v8;
  uint64_t v9;
  unsigned __int8 *i;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  prime = *(_QWORD *)(a2 + 8);
  if (prime == 1)
  {
    prime = 2;
LABEL_17:
    std::__hash_table<std::__hash_value_type<char const*,DebugChapterInfo>,std::__unordered_map_hasher<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::hash<char const*>,std::equal_to<char const*>,true>,std::__unordered_map_equal<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::equal_to<char const*>,std::hash<char const*>,true>,std::allocator<std::__hash_value_type<char const*,DebugChapterInfo>>>::__do_rehash<true>(a1, prime);
    goto LABEL_18;
  }
  if ((prime & (prime - 1)) != 0)
  {
    prime = std::__next_prime(*(_QWORD *)(a2 + 8));
    v5 = *(int8x8_t *)(a1 + 8);
    v6 = prime >= *(_QWORD *)&v5;
    if (prime > *(_QWORD *)&v5)
      goto LABEL_17;
  }
  else
  {
    v5 = 0;
    v6 = 1;
    if (prime)
      goto LABEL_17;
  }
  if (!v6)
  {
    v7 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(_QWORD *)&v5 < 3uLL || (v8 = (uint8x8_t)vcnt_s8(v5), v8.i16[0] = vaddlv_u8(v8), v8.u32[0] > 1uLL))
    {
      v7 = std::__next_prime(v7);
    }
    else
    {
      v9 = 1 << -(char)__clz(v7 - 1);
      if (v7 >= 2)
        v7 = v9;
    }
    if (prime <= v7)
      prime = v7;
    if (prime < *(_QWORD *)&v5)
      goto LABEL_17;
  }
LABEL_18:
  for (i = *(unsigned __int8 **)(a2 + 16); i; i = *(unsigned __int8 **)i)
    std::__hash_table<std::__hash_value_type<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,geo::Color<float,4,(geo::ColorSpace)2>>>>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,geo::Color<float,4,(geo::ColorSpace)2>>>>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,geo::Color<float,4,(geo::ColorSpace)2>>>>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,geo::Color<float,4,(geo::ColorSpace)2>>>>>>::__emplace_unique_key_args<unsigned char,std::pair<unsigned char const,std::vector<std::pair<gm::Range<unsigned char>,geo::Color<float,4,(geo::ColorSpace)2>>>> const&>(a1, i + 16, (char *)i + 16);
  return a1;
}

void sub_19F11D12C(_Unwind_Exception *a1)
{
  md::MeshRenderableContext *v1;

  md::MeshRenderableContext::~MeshRenderableContext(v1);
  _Unwind_Resume(a1);
}

void sub_19F11D140(_Unwind_Exception *a1)
{
  md::MeshRenderableContext *v1;

  md::MeshRenderableContext::~MeshRenderableContext(v1);
  _Unwind_Resume(a1);
}

uint64_t std::unordered_map<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,gm::Matrix<float,2,1>>>>::unordered_map(uint64_t a1, uint64_t a2)
{
  size_t prime;
  int8x8_t v5;
  BOOL v6;
  unint64_t v7;
  uint8x8_t v8;
  uint64_t v9;
  unsigned __int8 *i;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  prime = *(_QWORD *)(a2 + 8);
  if (prime == 1)
  {
    prime = 2;
LABEL_17:
    std::__hash_table<std::__hash_value_type<char const*,DebugChapterInfo>,std::__unordered_map_hasher<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::hash<char const*>,std::equal_to<char const*>,true>,std::__unordered_map_equal<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::equal_to<char const*>,std::hash<char const*>,true>,std::allocator<std::__hash_value_type<char const*,DebugChapterInfo>>>::__do_rehash<true>(a1, prime);
    goto LABEL_18;
  }
  if ((prime & (prime - 1)) != 0)
  {
    prime = std::__next_prime(*(_QWORD *)(a2 + 8));
    v5 = *(int8x8_t *)(a1 + 8);
    v6 = prime >= *(_QWORD *)&v5;
    if (prime > *(_QWORD *)&v5)
      goto LABEL_17;
  }
  else
  {
    v5 = 0;
    v6 = 1;
    if (prime)
      goto LABEL_17;
  }
  if (!v6)
  {
    v7 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(_QWORD *)&v5 < 3uLL || (v8 = (uint8x8_t)vcnt_s8(v5), v8.i16[0] = vaddlv_u8(v8), v8.u32[0] > 1uLL))
    {
      v7 = std::__next_prime(v7);
    }
    else
    {
      v9 = 1 << -(char)__clz(v7 - 1);
      if (v7 >= 2)
        v7 = v9;
    }
    if (prime <= v7)
      prime = v7;
    if (prime < *(_QWORD *)&v5)
      goto LABEL_17;
  }
LABEL_18:
  for (i = *(unsigned __int8 **)(a2 + 16); i; i = *(unsigned __int8 **)i)
    std::__hash_table<std::__hash_value_type<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,gm::Matrix<float,2,1>>>>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,gm::Matrix<float,2,1>>>>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,gm::Matrix<float,2,1>>>>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,gm::Matrix<float,2,1>>>>>>::__emplace_unique_key_args<unsigned char,std::pair<unsigned char const,std::vector<std::pair<gm::Range<unsigned char>,gm::Matrix<float,2,1>>>> const&>(a1, i + 16, (char *)i + 16);
  return a1;
}

void sub_19F11D26C(_Unwind_Exception *a1)
{
  md::MeshRenderableContext *v1;

  md::MeshRenderableContext::~MeshRenderableContext(v1);
  _Unwind_Resume(a1);
}

void sub_19F11D280(_Unwind_Exception *a1)
{
  md::MeshRenderableContext *v1;

  md::MeshRenderableContext::~MeshRenderableContext(v1);
  _Unwind_Resume(a1);
}

uint64_t std::unordered_map<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,BOOL>>>::unordered_map(uint64_t a1, uint64_t a2)
{
  size_t prime;
  int8x8_t v5;
  BOOL v6;
  unint64_t v7;
  uint8x8_t v8;
  uint64_t v9;
  unsigned __int8 *i;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  prime = *(_QWORD *)(a2 + 8);
  if (prime == 1)
  {
    prime = 2;
LABEL_17:
    std::__hash_table<std::__hash_value_type<char const*,DebugChapterInfo>,std::__unordered_map_hasher<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::hash<char const*>,std::equal_to<char const*>,true>,std::__unordered_map_equal<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::equal_to<char const*>,std::hash<char const*>,true>,std::allocator<std::__hash_value_type<char const*,DebugChapterInfo>>>::__do_rehash<true>(a1, prime);
    goto LABEL_18;
  }
  if ((prime & (prime - 1)) != 0)
  {
    prime = std::__next_prime(*(_QWORD *)(a2 + 8));
    v5 = *(int8x8_t *)(a1 + 8);
    v6 = prime >= *(_QWORD *)&v5;
    if (prime > *(_QWORD *)&v5)
      goto LABEL_17;
  }
  else
  {
    v5 = 0;
    v6 = 1;
    if (prime)
      goto LABEL_17;
  }
  if (!v6)
  {
    v7 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(_QWORD *)&v5 < 3uLL || (v8 = (uint8x8_t)vcnt_s8(v5), v8.i16[0] = vaddlv_u8(v8), v8.u32[0] > 1uLL))
    {
      v7 = std::__next_prime(v7);
    }
    else
    {
      v9 = 1 << -(char)__clz(v7 - 1);
      if (v7 >= 2)
        v7 = v9;
    }
    if (prime <= v7)
      prime = v7;
    if (prime < *(_QWORD *)&v5)
      goto LABEL_17;
  }
LABEL_18:
  for (i = *(unsigned __int8 **)(a2 + 16); i; i = *(unsigned __int8 **)i)
    std::__hash_table<std::__hash_value_type<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,BOOL>>>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,BOOL>>>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,BOOL>>>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,BOOL>>>>>::__emplace_unique_key_args<unsigned char,std::pair<unsigned char const,std::vector<std::pair<gm::Range<unsigned char>,BOOL>>> const&>(a1, i + 16, (char *)i + 16);
  return a1;
}

void sub_19F11D3AC(_Unwind_Exception *a1)
{
  md::MeshRenderableContext *v1;

  md::MeshRenderableContext::~MeshRenderableContext(v1);
  _Unwind_Resume(a1);
}

void sub_19F11D3C0(_Unwind_Exception *a1)
{
  md::MeshRenderableContext *v1;

  md::MeshRenderableContext::~MeshRenderableContext(v1);
  _Unwind_Resume(a1);
}

uint64_t std::unordered_map<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,std::unordered_map<float,geo::Color<float,4,(geo::ColorSpace)0>>>>>::unordered_map(uint64_t a1, uint64_t a2)
{
  size_t prime;
  int8x8_t v5;
  BOOL v6;
  unint64_t v7;
  uint8x8_t v8;
  uint64_t v9;
  unsigned __int8 *i;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  prime = *(_QWORD *)(a2 + 8);
  if (prime == 1)
  {
    prime = 2;
LABEL_17:
    std::__hash_table<std::__hash_value_type<char const*,DebugChapterInfo>,std::__unordered_map_hasher<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::hash<char const*>,std::equal_to<char const*>,true>,std::__unordered_map_equal<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::equal_to<char const*>,std::hash<char const*>,true>,std::allocator<std::__hash_value_type<char const*,DebugChapterInfo>>>::__do_rehash<true>(a1, prime);
    goto LABEL_18;
  }
  if ((prime & (prime - 1)) != 0)
  {
    prime = std::__next_prime(*(_QWORD *)(a2 + 8));
    v5 = *(int8x8_t *)(a1 + 8);
    v6 = prime >= *(_QWORD *)&v5;
    if (prime > *(_QWORD *)&v5)
      goto LABEL_17;
  }
  else
  {
    v5 = 0;
    v6 = 1;
    if (prime)
      goto LABEL_17;
  }
  if (!v6)
  {
    v7 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(_QWORD *)&v5 < 3uLL || (v8 = (uint8x8_t)vcnt_s8(v5), v8.i16[0] = vaddlv_u8(v8), v8.u32[0] > 1uLL))
    {
      v7 = std::__next_prime(v7);
    }
    else
    {
      v9 = 1 << -(char)__clz(v7 - 1);
      if (v7 >= 2)
        v7 = v9;
    }
    if (prime <= v7)
      prime = v7;
    if (prime < *(_QWORD *)&v5)
      goto LABEL_17;
  }
LABEL_18:
  for (i = *(unsigned __int8 **)(a2 + 16); i; i = *(unsigned __int8 **)i)
    std::__hash_table<std::__hash_value_type<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,std::unordered_map<float,geo::Color<float,4,(geo::ColorSpace)0>>>>>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,std::unordered_map<float,geo::Color<float,4,(geo::ColorSpace)0>>>>>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,std::unordered_map<float,geo::Color<float,4,(geo::ColorSpace)0>>>>>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,std::unordered_map<float,geo::Color<float,4,(geo::ColorSpace)0>>>>>>>::__emplace_unique_key_args<unsigned char,std::pair<unsigned char const,std::vector<std::pair<gm::Range<unsigned char>,std::unordered_map<float,geo::Color<float,4,(geo::ColorSpace)0>>>>> const&>(a1, i + 16, (uint64_t)(i + 16));
  return a1;
}

void sub_19F11D4EC(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<std::__hash_value_type<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,std::unordered_map<float,geo::Color<float,3,(geo::ColorSpace)0>>>>>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,std::unordered_map<float,geo::Color<float,3,(geo::ColorSpace)0>>>>>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,std::unordered_map<float,geo::Color<float,3,(geo::ColorSpace)0>>>>>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,std::unordered_map<float,geo::Color<float,3,(geo::ColorSpace)0>>>>>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

void sub_19F11D500(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<std::__hash_value_type<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,std::unordered_map<float,geo::Color<float,3,(geo::ColorSpace)0>>>>>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,std::unordered_map<float,geo::Color<float,3,(geo::ColorSpace)0>>>>>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,std::unordered_map<float,geo::Color<float,3,(geo::ColorSpace)0>>>>>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,std::unordered_map<float,geo::Color<float,3,(geo::ColorSpace)0>>>>>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

void geo::codec::MaterialSheet::Material::~Material(geo::codec::MaterialSheet::Material *this)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;
  _QWORD *v5;
  void *v6;
  _QWORD *v7;
  void *v8;
  _QWORD *v9;
  void *v10;
  _QWORD *v11;
  void *v12;
  _QWORD *v13;
  void *v14;
  _QWORD *v15;
  void *v16;
  _QWORD *v17;
  void *v18;
  _QWORD *v19;
  void *v20;
  _QWORD *v21;
  void *v22;
  _QWORD *v23;
  void *v24;
  _QWORD *v25;
  void *v26;
  _QWORD *v27;
  void *v28;
  _QWORD *v29;
  void *v30;
  _QWORD *v31;
  void *v32;
  _QWORD *v33;
  void *v34;
  _QWORD *v35;
  void *v36;

  v2 = (_QWORD *)*((_QWORD *)this + 53);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = (void *)*((_QWORD *)this + 51);
  *((_QWORD *)this + 51) = 0;
  if (v4)
    operator delete(v4);
  v5 = (_QWORD *)*((_QWORD *)this + 47);
  if (v5)
  {
    do
    {
      v21 = (_QWORD *)*v5;
      v22 = (void *)v5[3];
      if (v22)
      {
        v5[4] = v22;
        operator delete(v22);
      }
      operator delete(v5);
      v5 = v21;
    }
    while (v21);
  }
  v6 = (void *)*((_QWORD *)this + 45);
  *((_QWORD *)this + 45) = 0;
  if (v6)
    operator delete(v6);
  std::__hash_table<std::__hash_value_type<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,std::unordered_map<float,geo::Color<float,3,(geo::ColorSpace)0>>>>>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,std::unordered_map<float,geo::Color<float,3,(geo::ColorSpace)0>>>>>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,std::unordered_map<float,geo::Color<float,3,(geo::ColorSpace)0>>>>>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,std::unordered_map<float,geo::Color<float,3,(geo::ColorSpace)0>>>>>>>::~__hash_table((uint64_t)this + 320);
  std::__hash_table<std::__hash_value_type<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,std::unordered_map<float,geo::Color<float,3,(geo::ColorSpace)0>>>>>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,std::unordered_map<float,geo::Color<float,3,(geo::ColorSpace)0>>>>>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,std::unordered_map<float,geo::Color<float,3,(geo::ColorSpace)0>>>>>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,std::unordered_map<float,geo::Color<float,3,(geo::ColorSpace)0>>>>>>>::~__hash_table((uint64_t)this + 280);
  v7 = (_QWORD *)*((_QWORD *)this + 32);
  if (v7)
  {
    do
    {
      v23 = (_QWORD *)*v7;
      v24 = (void *)v7[3];
      if (v24)
      {
        v7[4] = v24;
        operator delete(v24);
      }
      operator delete(v7);
      v7 = v23;
    }
    while (v23);
  }
  v8 = (void *)*((_QWORD *)this + 30);
  *((_QWORD *)this + 30) = 0;
  if (v8)
    operator delete(v8);
  v9 = (_QWORD *)*((_QWORD *)this + 27);
  if (v9)
  {
    do
    {
      v25 = (_QWORD *)*v9;
      v26 = (void *)v9[3];
      if (v26)
      {
        v9[4] = v26;
        operator delete(v26);
      }
      operator delete(v9);
      v9 = v25;
    }
    while (v25);
  }
  v10 = (void *)*((_QWORD *)this + 25);
  *((_QWORD *)this + 25) = 0;
  if (v10)
    operator delete(v10);
  v11 = (_QWORD *)*((_QWORD *)this + 22);
  if (v11)
  {
    do
    {
      v27 = (_QWORD *)*v11;
      v28 = (void *)v11[3];
      if (v28)
      {
        v11[4] = v28;
        operator delete(v28);
      }
      operator delete(v11);
      v11 = v27;
    }
    while (v27);
  }
  v12 = (void *)*((_QWORD *)this + 20);
  *((_QWORD *)this + 20) = 0;
  if (v12)
    operator delete(v12);
  v13 = (_QWORD *)*((_QWORD *)this + 17);
  if (v13)
  {
    do
    {
      v29 = (_QWORD *)*v13;
      v30 = (void *)v13[3];
      if (v30)
      {
        v13[4] = v30;
        operator delete(v30);
      }
      operator delete(v13);
      v13 = v29;
    }
    while (v29);
  }
  v14 = (void *)*((_QWORD *)this + 15);
  *((_QWORD *)this + 15) = 0;
  if (v14)
    operator delete(v14);
  v15 = (_QWORD *)*((_QWORD *)this + 12);
  if (v15)
  {
    do
    {
      v31 = (_QWORD *)*v15;
      v32 = (void *)v15[3];
      if (v32)
      {
        v15[4] = v32;
        operator delete(v32);
      }
      operator delete(v15);
      v15 = v31;
    }
    while (v31);
  }
  v16 = (void *)*((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v16)
    operator delete(v16);
  v17 = (_QWORD *)*((_QWORD *)this + 7);
  if (v17)
  {
    do
    {
      v33 = (_QWORD *)*v17;
      v34 = (void *)v17[3];
      if (v34)
      {
        v17[4] = v34;
        operator delete(v34);
      }
      operator delete(v17);
      v17 = v33;
    }
    while (v33);
  }
  v18 = (void *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v18)
    operator delete(v18);
  v19 = (_QWORD *)*((_QWORD *)this + 2);
  if (v19)
  {
    do
    {
      v35 = (_QWORD *)*v19;
      v36 = (void *)v19[3];
      if (v36)
      {
        v19[4] = v36;
        operator delete(v36);
      }
      operator delete(v19);
      v19 = v35;
    }
    while (v35);
  }
  v20 = *(void **)this;
  *(_QWORD *)this = 0;
  if (v20)
    operator delete(v20);
}

uint64_t std::__hash_table<std::__hash_value_type<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,std::unordered_map<float,geo::Color<float,3,(geo::ColorSpace)0>>>>>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,std::unordered_map<float,geo::Color<float,3,(geo::ColorSpace)0>>>>>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,std::unordered_map<float,geo::Color<float,3,(geo::ColorSpace)0>>>>>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,std::unordered_map<float,geo::Color<float,3,(geo::ColorSpace)0>>>>>>>::~__hash_table(uint64_t a1)
{
  _QWORD *v2;
  void *v3;
  void *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  void *v11;

  v2 = *(_QWORD **)(a1 + 16);
  if (v2)
  {
    do
    {
      v6 = (_QWORD *)*v2;
      v7 = v2[3];
      if (v7)
      {
        v8 = v2[4];
        v5 = (void *)v2[3];
        if (v8 != v7)
        {
          do
          {
            v9 = *(_QWORD **)(v8 - 24);
            if (v9)
            {
              do
              {
                v10 = (_QWORD *)*v9;
                operator delete(v9);
                v9 = v10;
              }
              while (v10);
            }
            v11 = *(void **)(v8 - 40);
            *(_QWORD *)(v8 - 40) = 0;
            if (v11)
              operator delete(v11);
            v8 -= 48;
          }
          while (v8 != v7);
          v5 = (void *)v2[3];
        }
        v2[4] = v7;
        operator delete(v5);
      }
      operator delete(v2);
      v2 = v6;
    }
    while (v6);
  }
  v3 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v3)
    operator delete(v3);
  return a1;
}

uint64_t std::unordered_map<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,float>>>::unordered_map(uint64_t a1, uint64_t a2)
{
  size_t prime;
  int8x8_t v5;
  BOOL v6;
  unint64_t v7;
  uint8x8_t v8;
  uint64_t v9;
  unsigned __int8 *i;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  prime = *(_QWORD *)(a2 + 8);
  if (prime == 1)
  {
    prime = 2;
LABEL_17:
    std::__hash_table<std::__hash_value_type<char const*,DebugChapterInfo>,std::__unordered_map_hasher<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::hash<char const*>,std::equal_to<char const*>,true>,std::__unordered_map_equal<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::equal_to<char const*>,std::hash<char const*>,true>,std::allocator<std::__hash_value_type<char const*,DebugChapterInfo>>>::__do_rehash<true>(a1, prime);
    goto LABEL_18;
  }
  if ((prime & (prime - 1)) != 0)
  {
    prime = std::__next_prime(*(_QWORD *)(a2 + 8));
    v5 = *(int8x8_t *)(a1 + 8);
    v6 = prime >= *(_QWORD *)&v5;
    if (prime > *(_QWORD *)&v5)
      goto LABEL_17;
  }
  else
  {
    v5 = 0;
    v6 = 1;
    if (prime)
      goto LABEL_17;
  }
  if (!v6)
  {
    v7 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(_QWORD *)&v5 < 3uLL || (v8 = (uint8x8_t)vcnt_s8(v5), v8.i16[0] = vaddlv_u8(v8), v8.u32[0] > 1uLL))
    {
      v7 = std::__next_prime(v7);
    }
    else
    {
      v9 = 1 << -(char)__clz(v7 - 1);
      if (v7 >= 2)
        v7 = v9;
    }
    if (prime <= v7)
      prime = v7;
    if (prime < *(_QWORD *)&v5)
      goto LABEL_17;
  }
LABEL_18:
  for (i = *(unsigned __int8 **)(a2 + 16); i; i = *(unsigned __int8 **)i)
    std::__hash_table<std::__hash_value_type<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,float>>>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,float>>>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,float>>>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,float>>>>>::__emplace_unique_key_args<unsigned char,std::pair<unsigned char const,std::vector<std::pair<gm::Range<unsigned char>,float>>> const&>(a1, i + 16, (char *)i + 16);
  return a1;
}

void sub_19F11D948(_Unwind_Exception *a1)
{
  md::MeshRenderableContext *v1;

  md::MeshRenderableContext::~MeshRenderableContext(v1);
  _Unwind_Resume(a1);
}

void sub_19F11D95C(_Unwind_Exception *a1)
{
  md::MeshRenderableContext *v1;

  md::MeshRenderableContext::~MeshRenderableContext(v1);
  _Unwind_Resume(a1);
}

uint64_t std::unordered_map<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,geo::Color<float,3,(geo::ColorSpace)2>>>>::unordered_map(uint64_t a1, uint64_t a2)
{
  size_t prime;
  int8x8_t v5;
  BOOL v6;
  unint64_t v7;
  uint8x8_t v8;
  uint64_t v9;
  unsigned __int8 *i;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  prime = *(_QWORD *)(a2 + 8);
  if (prime == 1)
  {
    prime = 2;
LABEL_17:
    std::__hash_table<std::__hash_value_type<char const*,DebugChapterInfo>,std::__unordered_map_hasher<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::hash<char const*>,std::equal_to<char const*>,true>,std::__unordered_map_equal<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::equal_to<char const*>,std::hash<char const*>,true>,std::allocator<std::__hash_value_type<char const*,DebugChapterInfo>>>::__do_rehash<true>(a1, prime);
    goto LABEL_18;
  }
  if ((prime & (prime - 1)) != 0)
  {
    prime = std::__next_prime(*(_QWORD *)(a2 + 8));
    v5 = *(int8x8_t *)(a1 + 8);
    v6 = prime >= *(_QWORD *)&v5;
    if (prime > *(_QWORD *)&v5)
      goto LABEL_17;
  }
  else
  {
    v5 = 0;
    v6 = 1;
    if (prime)
      goto LABEL_17;
  }
  if (!v6)
  {
    v7 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(_QWORD *)&v5 < 3uLL || (v8 = (uint8x8_t)vcnt_s8(v5), v8.i16[0] = vaddlv_u8(v8), v8.u32[0] > 1uLL))
    {
      v7 = std::__next_prime(v7);
    }
    else
    {
      v9 = 1 << -(char)__clz(v7 - 1);
      if (v7 >= 2)
        v7 = v9;
    }
    if (prime <= v7)
      prime = v7;
    if (prime < *(_QWORD *)&v5)
      goto LABEL_17;
  }
LABEL_18:
  for (i = *(unsigned __int8 **)(a2 + 16); i; i = *(unsigned __int8 **)i)
    std::__hash_table<std::__hash_value_type<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,geo::Color<float,3,(geo::ColorSpace)2>>>>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,geo::Color<float,3,(geo::ColorSpace)2>>>>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,geo::Color<float,3,(geo::ColorSpace)2>>>>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,geo::Color<float,3,(geo::ColorSpace)2>>>>>>::__emplace_unique_key_args<unsigned char,std::pair<unsigned char const,std::vector<std::pair<gm::Range<unsigned char>,geo::Color<float,3,(geo::ColorSpace)2>>>> const&>(a1, i + 16, (char *)i + 16);
  return a1;
}

void sub_19F11DA88(_Unwind_Exception *a1)
{
  md::MeshRenderableContext *v1;

  md::MeshRenderableContext::~MeshRenderableContext(v1);
  _Unwind_Resume(a1);
}

void sub_19F11DA9C(_Unwind_Exception *a1)
{
  md::MeshRenderableContext *v1;

  md::MeshRenderableContext::~MeshRenderableContext(v1);
  _Unwind_Resume(a1);
}

uint64_t **std::__hash_table<std::__hash_value_type<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,geo::Color<float,3,(geo::ColorSpace)2>>>>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,geo::Color<float,3,(geo::ColorSpace)2>>>>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,geo::Color<float,3,(geo::ColorSpace)2>>>>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,geo::Color<float,3,(geo::ColorSpace)2>>>>>>::__emplace_unique_key_args<unsigned char,std::pair<unsigned char const,std::vector<std::pair<gm::Range<unsigned char>,geo::Color<float,3,(geo::ColorSpace)2>>>> const&>(uint64_t a1, unsigned __int8 *a2, char *a3)
{
  unint64_t v3;
  unint64_t v5;
  unint64_t v6;
  uint8x8_t v7;
  uint64_t ***v8;
  uint64_t **result;
  unint64_t v10;
  uint64_t *v11;
  float v12;
  float v13;
  _QWORD *v14;
  _BOOL8 v15;
  unint64_t v16;
  unint64_t v17;
  size_t prime;
  int8x8_t v19;
  unint64_t v20;
  uint8x8_t v21;
  uint64_t v22;
  unint64_t v23;
  _QWORD v24[3];

  v5 = *a2;
  v6 = *(_QWORD *)(a1 + 8);
  if (v6)
  {
    v7 = (uint8x8_t)vcnt_s8((int8x8_t)v6);
    v7.i16[0] = vaddlv_u8(v7);
    if (v7.u32[0] > 1uLL)
    {
      v3 = *a2;
      if (v6 <= v5)
        v3 = v5 % v6;
    }
    else
    {
      v3 = ((_DWORD)v6 - 1) & v5;
    }
    v8 = *(uint64_t ****)(*(_QWORD *)a1 + 8 * v3);
    if (v8)
    {
      result = *v8;
      if (*v8)
      {
        if (v7.u32[0] < 2uLL)
        {
          while (1)
          {
            v11 = result[1];
            if (v11 == (uint64_t *)v5)
            {
              if (*((unsigned __int8 *)result + 16) == (_DWORD)v5)
                return result;
            }
            else if (((unint64_t)v11 & (v6 - 1)) != v3)
            {
              goto LABEL_23;
            }
            result = (uint64_t **)*result;
            if (!result)
              goto LABEL_23;
          }
        }
        do
        {
          v10 = (unint64_t)result[1];
          if (v10 == v5)
          {
            if (*((unsigned __int8 *)result + 16) == (_DWORD)v5)
              return result;
          }
          else
          {
            if (v10 >= v6)
              v10 %= v6;
            if (v10 != v3)
              break;
          }
          result = (uint64_t **)*result;
        }
        while (result);
      }
    }
  }
LABEL_23:
  std::__hash_table<std::__hash_value_type<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,geo::Color<float,3,(geo::ColorSpace)2>>>>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,geo::Color<float,3,(geo::ColorSpace)2>>>>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,geo::Color<float,3,(geo::ColorSpace)2>>>>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,geo::Color<float,3,(geo::ColorSpace)2>>>>>>::__construct_node_hash<std::pair<unsigned char const,std::vector<std::pair<gm::Range<unsigned char>,geo::Color<float,3,(geo::ColorSpace)2>>>> const&>(a1, *a2, a3, (uint64_t)v24);
  v12 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v13 = *(float *)(a1 + 32);
  if (!v6 || (float)(v13 * (float)v6) < v12)
  {
    v15 = 1;
    if (v6 >= 3)
      v15 = (v6 & (v6 - 1)) != 0;
    v16 = v15 | (2 * v6);
    v17 = vcvtps_u32_f32(v12 / v13);
    if (v16 <= v17)
      prime = v17;
    else
      prime = v16;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
    }
    v19 = *(int8x8_t *)(a1 + 8);
    if (prime > *(_QWORD *)&v19)
      goto LABEL_37;
    if (prime < *(_QWORD *)&v19)
    {
      v20 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(_QWORD *)&v19 < 3uLL || (v21 = (uint8x8_t)vcnt_s8(v19), v21.i16[0] = vaddlv_u8(v21), v21.u32[0] > 1uLL))
      {
        v20 = std::__next_prime(v20);
      }
      else
      {
        v22 = 1 << -(char)__clz(v20 - 1);
        if (v20 >= 2)
          v20 = v22;
      }
      if (prime <= v20)
        prime = v20;
      if (prime < *(_QWORD *)&v19)
LABEL_37:
        std::__hash_table<std::__hash_value_type<char const*,DebugChapterInfo>,std::__unordered_map_hasher<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::hash<char const*>,std::equal_to<char const*>,true>,std::__unordered_map_equal<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::equal_to<char const*>,std::hash<char const*>,true>,std::allocator<std::__hash_value_type<char const*,DebugChapterInfo>>>::__do_rehash<true>(a1, prime);
    }
    v6 = *(_QWORD *)(a1 + 8);
    if ((v6 & (v6 - 1)) != 0)
    {
      if (v6 <= v5)
      {
        v3 = v5 % v6;
        v14 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v5 % v6));
        if (v14)
          goto LABEL_26;
      }
      else
      {
        v3 = v5;
        v14 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v5);
        if (v14)
          goto LABEL_26;
      }
    }
    else
    {
      v3 = ((_DWORD)v6 - 1) & v5;
      v14 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
      if (v14)
        goto LABEL_26;
    }
LABEL_50:
    *(_QWORD *)v24[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v24[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v3) = a1 + 16;
    if (*(_QWORD *)v24[0])
    {
      v23 = *(_QWORD *)(*(_QWORD *)v24[0] + 8);
      if ((v6 & (v6 - 1)) != 0)
      {
        if (v23 >= v6)
          v23 %= v6;
      }
      else
      {
        v23 &= v6 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v23) = v24[0];
    }
    goto LABEL_61;
  }
  v14 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (!v14)
    goto LABEL_50;
LABEL_26:
  *(_QWORD *)v24[0] = *v14;
  *v14 = v24[0];
LABEL_61:
  result = (uint64_t **)v24[0];
  ++*(_QWORD *)(a1 + 24);
  return result;
}

void sub_19F11DDC8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<gdc::Registry *,std::vector<gdc::Entity>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<gdc::Registry *,std::vector<gdc::Entity>>,void *>>>>::~unique_ptr[abi:nn180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t **std::__hash_table<std::__hash_value_type<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,geo::Color<float,4,(geo::ColorSpace)2>>>>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,geo::Color<float,4,(geo::ColorSpace)2>>>>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,geo::Color<float,4,(geo::ColorSpace)2>>>>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,geo::Color<float,4,(geo::ColorSpace)2>>>>>>::__emplace_unique_key_args<unsigned char,std::pair<unsigned char const,std::vector<std::pair<gm::Range<unsigned char>,geo::Color<float,4,(geo::ColorSpace)2>>>> const&>(uint64_t a1, unsigned __int8 *a2, char *a3)
{
  unint64_t v3;
  unint64_t v5;
  unint64_t v6;
  uint8x8_t v7;
  uint64_t ***v8;
  uint64_t **result;
  unint64_t v10;
  uint64_t *v11;
  float v12;
  float v13;
  _QWORD *v14;
  _BOOL8 v15;
  unint64_t v16;
  unint64_t v17;
  size_t prime;
  int8x8_t v19;
  unint64_t v20;
  uint8x8_t v21;
  uint64_t v22;
  unint64_t v23;
  _QWORD v24[3];

  v5 = *a2;
  v6 = *(_QWORD *)(a1 + 8);
  if (v6)
  {
    v7 = (uint8x8_t)vcnt_s8((int8x8_t)v6);
    v7.i16[0] = vaddlv_u8(v7);
    if (v7.u32[0] > 1uLL)
    {
      v3 = *a2;
      if (v6 <= v5)
        v3 = v5 % v6;
    }
    else
    {
      v3 = ((_DWORD)v6 - 1) & v5;
    }
    v8 = *(uint64_t ****)(*(_QWORD *)a1 + 8 * v3);
    if (v8)
    {
      result = *v8;
      if (*v8)
      {
        if (v7.u32[0] < 2uLL)
        {
          while (1)
          {
            v11 = result[1];
            if (v11 == (uint64_t *)v5)
            {
              if (*((unsigned __int8 *)result + 16) == (_DWORD)v5)
                return result;
            }
            else if (((unint64_t)v11 & (v6 - 1)) != v3)
            {
              goto LABEL_23;
            }
            result = (uint64_t **)*result;
            if (!result)
              goto LABEL_23;
          }
        }
        do
        {
          v10 = (unint64_t)result[1];
          if (v10 == v5)
          {
            if (*((unsigned __int8 *)result + 16) == (_DWORD)v5)
              return result;
          }
          else
          {
            if (v10 >= v6)
              v10 %= v6;
            if (v10 != v3)
              break;
          }
          result = (uint64_t **)*result;
        }
        while (result);
      }
    }
  }
LABEL_23:
  std::__hash_table<std::__hash_value_type<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,geo::Color<float,4,(geo::ColorSpace)2>>>>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,geo::Color<float,4,(geo::ColorSpace)2>>>>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,geo::Color<float,4,(geo::ColorSpace)2>>>>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,geo::Color<float,4,(geo::ColorSpace)2>>>>>>::__construct_node_hash<std::pair<unsigned char const,std::vector<std::pair<gm::Range<unsigned char>,geo::Color<float,4,(geo::ColorSpace)2>>>> const&>(a1, *a2, a3, (uint64_t)v24);
  v12 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v13 = *(float *)(a1 + 32);
  if (!v6 || (float)(v13 * (float)v6) < v12)
  {
    v15 = 1;
    if (v6 >= 3)
      v15 = (v6 & (v6 - 1)) != 0;
    v16 = v15 | (2 * v6);
    v17 = vcvtps_u32_f32(v12 / v13);
    if (v16 <= v17)
      prime = v17;
    else
      prime = v16;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
    }
    v19 = *(int8x8_t *)(a1 + 8);
    if (prime > *(_QWORD *)&v19)
      goto LABEL_37;
    if (prime < *(_QWORD *)&v19)
    {
      v20 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(_QWORD *)&v19 < 3uLL || (v21 = (uint8x8_t)vcnt_s8(v19), v21.i16[0] = vaddlv_u8(v21), v21.u32[0] > 1uLL))
      {
        v20 = std::__next_prime(v20);
      }
      else
      {
        v22 = 1 << -(char)__clz(v20 - 1);
        if (v20 >= 2)
          v20 = v22;
      }
      if (prime <= v20)
        prime = v20;
      if (prime < *(_QWORD *)&v19)
LABEL_37:
        std::__hash_table<std::__hash_value_type<char const*,DebugChapterInfo>,std::__unordered_map_hasher<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::hash<char const*>,std::equal_to<char const*>,true>,std::__unordered_map_equal<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::equal_to<char const*>,std::hash<char const*>,true>,std::allocator<std::__hash_value_type<char const*,DebugChapterInfo>>>::__do_rehash<true>(a1, prime);
    }
    v6 = *(_QWORD *)(a1 + 8);
    if ((v6 & (v6 - 1)) != 0)
    {
      if (v6 <= v5)
      {
        v3 = v5 % v6;
        v14 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v5 % v6));
        if (v14)
          goto LABEL_26;
      }
      else
      {
        v3 = v5;
        v14 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v5);
        if (v14)
          goto LABEL_26;
      }
    }
    else
    {
      v3 = ((_DWORD)v6 - 1) & v5;
      v14 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
      if (v14)
        goto LABEL_26;
    }
LABEL_50:
    *(_QWORD *)v24[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v24[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v3) = a1 + 16;
    if (*(_QWORD *)v24[0])
    {
      v23 = *(_QWORD *)(*(_QWORD *)v24[0] + 8);
      if ((v6 & (v6 - 1)) != 0)
      {
        if (v23 >= v6)
          v23 %= v6;
      }
      else
      {
        v23 &= v6 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v23) = v24[0];
    }
    goto LABEL_61;
  }
  v14 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (!v14)
    goto LABEL_50;
LABEL_26:
  *(_QWORD *)v24[0] = *v14;
  *v14 = v24[0];
LABEL_61:
  result = (uint64_t **)v24[0];
  ++*(_QWORD *)(a1 + 24);
  return result;
}

void sub_19F11E0F4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<gdc::Registry *,std::vector<gdc::Entity>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<gdc::Registry *,std::vector<gdc::Entity>>,void *>>>>::~unique_ptr[abi:nn180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *std::__hash_table<std::__hash_value_type<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,geo::Color<float,3,(geo::ColorSpace)2>>>>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,geo::Color<float,3,(geo::ColorSpace)2>>>>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,geo::Color<float,3,(geo::ColorSpace)2>>>>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,geo::Color<float,3,(geo::ColorSpace)2>>>>>>::__construct_node_hash<std::pair<unsigned char const,std::vector<std::pair<gm::Range<unsigned char>,geo::Color<float,3,(geo::ColorSpace)2>>>> const&>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  _QWORD *result;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  unint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;

  v7 = a1 + 16;
  result = operator new(0x30uLL);
  *(_QWORD *)a4 = result;
  *(_QWORD *)(a4 + 8) = v7;
  *(_BYTE *)(a4 + 16) = 0;
  *result = 0;
  result[1] = a2;
  v9 = *a3;
  result[3] = 0;
  *((_BYTE *)result + 16) = v9;
  result[4] = 0;
  result[5] = 0;
  v10 = *((_QWORD *)a3 + 1);
  v11 = *((_QWORD *)a3 + 2);
  v12 = v11 - v10;
  if (v11 != v10)
  {
    v13 = result;
    if (v12 < 0)
      std::vector<double>::__throw_length_error[abi:ne180100]();
    result = operator new(v11 - v10);
    v14 = 0;
    v13[3] = result;
    v13[4] = result;
    v13[5] = &result[2 * (v12 >> 4)];
    do
    {
      v15 = v10 + v14;
      v16 = (char *)&result[v14 / 8];
      *(_WORD *)v16 = *(_WORD *)(v10 + v14);
      v17 = *(_QWORD *)(v10 + v14 + 4);
      *((_DWORD *)v16 + 3) = *(_DWORD *)(v10 + v14 + 12);
      *(_QWORD *)(v16 + 4) = v17;
      v14 += 16;
    }
    while (v15 + 16 != v11);
    v13[4] = &result[v14 / 8];
  }
  *(_BYTE *)(a4 + 16) = 1;
  return result;
}

void sub_19F11E1E4(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  void **v3;
  void *v5;

  v5 = *v3;
  if (*v3)
  {
    *(_QWORD *)(v2 + 32) = v5;
    operator delete(v5);
  }
  std::unique_ptr<std::__hash_node<std::__hash_value_type<gdc::Registry *,std::vector<gdc::Entity>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<gdc::Registry *,std::vector<gdc::Entity>>,void *>>>>::~unique_ptr[abi:nn180100](v1);
  _Unwind_Resume(a1);
}

int64_t std::__hash_table<std::__hash_value_type<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,geo::Color<float,4,(geo::ColorSpace)2>>>>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,geo::Color<float,4,(geo::ColorSpace)2>>>>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,geo::Color<float,4,(geo::ColorSpace)2>>>>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,geo::Color<float,4,(geo::ColorSpace)2>>>>>>::__construct_node_hash<std::pair<unsigned char const,std::vector<std::pair<gm::Range<unsigned char>,geo::Color<float,4,(geo::ColorSpace)2>>>> const&>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  _QWORD *v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  int64_t result;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v7 = a1 + 16;
  v8 = operator new(0x30uLL);
  *(_QWORD *)a4 = v8;
  *(_QWORD *)(a4 + 8) = v7;
  *(_BYTE *)(a4 + 16) = 0;
  *v8 = 0;
  v8[1] = a2;
  v9 = *a3;
  v8[3] = 0;
  *((_BYTE *)v8 + 16) = v9;
  v8[4] = 0;
  v8[5] = 0;
  v11 = *((_QWORD *)a3 + 1);
  v10 = *((_QWORD *)a3 + 2);
  result = v10 - v11;
  if (v10 != v11)
  {
    v13 = 0xCCCCCCCCCCCCCCCDLL * (result >> 2);
    if (v13 >= 0xCCCCCCCCCCCCCCDLL)
      std::vector<double>::__throw_length_error[abi:ne180100]();
    result = (int64_t)operator new(result);
    v14 = 0;
    v8[3] = result;
    v8[4] = result;
    v8[5] = result + 20 * v13;
    do
    {
      v15 = v11 + v14;
      v16 = result + v14;
      *(_WORD *)v16 = *(_WORD *)(v11 + v14);
      *(_OWORD *)(v16 + 4) = *(_OWORD *)(v11 + v14 + 4);
      v14 += 20;
    }
    while (v15 + 20 != v10);
    v8[4] = result + v14;
  }
  *(_BYTE *)(a4 + 16) = 1;
  return result;
}

void sub_19F11E2F8(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  void **v3;
  void *v5;

  v5 = *v3;
  if (*v3)
  {
    *(_QWORD *)(v2 + 32) = v5;
    operator delete(v5);
  }
  std::unique_ptr<std::__hash_node<std::__hash_value_type<gdc::Registry *,std::vector<gdc::Entity>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<gdc::Registry *,std::vector<gdc::Entity>>,void *>>>>::~unique_ptr[abi:nn180100](v1);
  _Unwind_Resume(a1);
}

uint64_t **std::__hash_table<std::__hash_value_type<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,gm::Matrix<float,3,1>>>>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,gm::Matrix<float,3,1>>>>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,gm::Matrix<float,3,1>>>>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,gm::Matrix<float,3,1>>>>>>::__emplace_unique_key_args<unsigned char,std::pair<unsigned char const,std::vector<std::pair<gm::Range<unsigned char>,gm::Matrix<float,3,1>>>> const&>(uint64_t a1, unsigned __int8 *a2, char *a3)
{
  unint64_t v3;
  unint64_t v5;
  unint64_t v6;
  uint8x8_t v7;
  uint64_t ***v8;
  uint64_t **result;
  unint64_t v10;
  uint64_t *v11;
  float v12;
  float v13;
  _QWORD *v14;
  _BOOL8 v15;
  unint64_t v16;
  unint64_t v17;
  size_t prime;
  int8x8_t v19;
  unint64_t v20;
  uint8x8_t v21;
  uint64_t v22;
  unint64_t v23;
  _QWORD v24[3];

  v5 = *a2;
  v6 = *(_QWORD *)(a1 + 8);
  if (v6)
  {
    v7 = (uint8x8_t)vcnt_s8((int8x8_t)v6);
    v7.i16[0] = vaddlv_u8(v7);
    if (v7.u32[0] > 1uLL)
    {
      v3 = *a2;
      if (v6 <= v5)
        v3 = v5 % v6;
    }
    else
    {
      v3 = ((_DWORD)v6 - 1) & v5;
    }
    v8 = *(uint64_t ****)(*(_QWORD *)a1 + 8 * v3);
    if (v8)
    {
      result = *v8;
      if (*v8)
      {
        if (v7.u32[0] < 2uLL)
        {
          while (1)
          {
            v11 = result[1];
            if (v11 == (uint64_t *)v5)
            {
              if (*((unsigned __int8 *)result + 16) == (_DWORD)v5)
                return result;
            }
            else if (((unint64_t)v11 & (v6 - 1)) != v3)
            {
              goto LABEL_23;
            }
            result = (uint64_t **)*result;
            if (!result)
              goto LABEL_23;
          }
        }
        do
        {
          v10 = (unint64_t)result[1];
          if (v10 == v5)
          {
            if (*((unsigned __int8 *)result + 16) == (_DWORD)v5)
              return result;
          }
          else
          {
            if (v10 >= v6)
              v10 %= v6;
            if (v10 != v3)
              break;
          }
          result = (uint64_t **)*result;
        }
        while (result);
      }
    }
  }
LABEL_23:
  std::__hash_table<std::__hash_value_type<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,gm::Matrix<float,3,1>>>>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,gm::Matrix<float,3,1>>>>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,gm::Matrix<float,3,1>>>>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,gm::Matrix<float,3,1>>>>>>::__construct_node_hash<std::pair<unsigned char const,std::vector<std::pair<gm::Range<unsigned char>,gm::Matrix<float,3,1>>>> const&>(a1, *a2, a3, (uint64_t)v24);
  v12 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v13 = *(float *)(a1 + 32);
  if (!v6 || (float)(v13 * (float)v6) < v12)
  {
    v15 = 1;
    if (v6 >= 3)
      v15 = (v6 & (v6 - 1)) != 0;
    v16 = v15 | (2 * v6);
    v17 = vcvtps_u32_f32(v12 / v13);
    if (v16 <= v17)
      prime = v17;
    else
      prime = v16;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
    }
    v19 = *(int8x8_t *)(a1 + 8);
    if (prime > *(_QWORD *)&v19)
      goto LABEL_37;
    if (prime < *(_QWORD *)&v19)
    {
      v20 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(_QWORD *)&v19 < 3uLL || (v21 = (uint8x8_t)vcnt_s8(v19), v21.i16[0] = vaddlv_u8(v21), v21.u32[0] > 1uLL))
      {
        v20 = std::__next_prime(v20);
      }
      else
      {
        v22 = 1 << -(char)__clz(v20 - 1);
        if (v20 >= 2)
          v20 = v22;
      }
      if (prime <= v20)
        prime = v20;
      if (prime < *(_QWORD *)&v19)
LABEL_37:
        std::__hash_table<std::__hash_value_type<char const*,DebugChapterInfo>,std::__unordered_map_hasher<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::hash<char const*>,std::equal_to<char const*>,true>,std::__unordered_map_equal<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::equal_to<char const*>,std::hash<char const*>,true>,std::allocator<std::__hash_value_type<char const*,DebugChapterInfo>>>::__do_rehash<true>(a1, prime);
    }
    v6 = *(_QWORD *)(a1 + 8);
    if ((v6 & (v6 - 1)) != 0)
    {
      if (v6 <= v5)
      {
        v3 = v5 % v6;
        v14 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v5 % v6));
        if (v14)
          goto LABEL_26;
      }
      else
      {
        v3 = v5;
        v14 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v5);
        if (v14)
          goto LABEL_26;
      }
    }
    else
    {
      v3 = ((_DWORD)v6 - 1) & v5;
      v14 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
      if (v14)
        goto LABEL_26;
    }
LABEL_50:
    *(_QWORD *)v24[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v24[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v3) = a1 + 16;
    if (*(_QWORD *)v24[0])
    {
      v23 = *(_QWORD *)(*(_QWORD *)v24[0] + 8);
      if ((v6 & (v6 - 1)) != 0)
      {
        if (v23 >= v6)
          v23 %= v6;
      }
      else
      {
        v23 &= v6 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v23) = v24[0];
    }
    goto LABEL_61;
  }
  v14 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (!v14)
    goto LABEL_50;
LABEL_26:
  *(_QWORD *)v24[0] = *v14;
  *v14 = v24[0];
LABEL_61:
  result = (uint64_t **)v24[0];
  ++*(_QWORD *)(a1 + 24);
  return result;
}

void sub_19F11E634(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<gdc::Registry *,std::vector<gdc::Entity>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<gdc::Registry *,std::vector<gdc::Entity>>,void *>>>>::~unique_ptr[abi:nn180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *std::__hash_table<std::__hash_value_type<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,gm::Matrix<float,3,1>>>>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,gm::Matrix<float,3,1>>>>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,gm::Matrix<float,3,1>>>>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,gm::Matrix<float,3,1>>>>>>::__construct_node_hash<std::pair<unsigned char const,std::vector<std::pair<gm::Range<unsigned char>,gm::Matrix<float,3,1>>>> const&>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  _QWORD *result;
  char v9;
  _BYTE *v10;
  _BYTE *v11;
  uint64_t v12;
  _QWORD *v13;
  char *v14;

  v7 = a1 + 16;
  result = operator new(0x30uLL);
  *(_QWORD *)a4 = result;
  *(_QWORD *)(a4 + 8) = v7;
  *(_BYTE *)(a4 + 16) = 0;
  *result = 0;
  result[1] = a2;
  v9 = *a3;
  result[3] = 0;
  *((_BYTE *)result + 16) = v9;
  result[4] = 0;
  result[5] = 0;
  v11 = (_BYTE *)*((_QWORD *)a3 + 1);
  v10 = (_BYTE *)*((_QWORD *)a3 + 2);
  v12 = v10 - v11;
  if (v10 != v11)
  {
    v13 = result;
    if (v12 < 0)
      std::vector<double>::__throw_length_error[abi:ne180100]();
    v14 = (char *)operator new(v10 - v11);
    v13[3] = v14;
    v13[4] = v14;
    v13[5] = &v14[16 * (v12 >> 4)];
    result = memcpy(v14, v11, v12 & 0xFFFFFFFFFFFFFFF0);
    v13[4] = &v14[v12 & 0xFFFFFFFFFFFFFFF0];
  }
  *(_BYTE *)(a4 + 16) = 1;
  return result;
}

void sub_19F11E704(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  void **v3;
  void *v5;

  v5 = *v3;
  if (*v3)
  {
    *(_QWORD *)(v2 + 32) = v5;
    operator delete(v5);
  }
  std::unique_ptr<std::__hash_node<std::__hash_value_type<gdc::Registry *,std::vector<gdc::Entity>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<gdc::Registry *,std::vector<gdc::Entity>>,void *>>>>::~unique_ptr[abi:nn180100](v1);
  _Unwind_Resume(a1);
}

BOOL geo::codec::MaterialSheet::decodeExternalMaterial(geo::codec::MaterialSheet *this, geo::ibitstream *a2)
{
  BOOL Bytes;
  void *v5;
  void *v6;
  unsigned int v7;
  _BOOL8 v8;
  void *v10;
  void *v11;
  uint64_t v12;
  void *__p;
  unint64_t v14;
  uint64_t v15;

  v10 = 0;
  v11 = 0;
  v12 = 0;
  __p = 0;
  v14 = 0;
  v15 = 0;
  Bytes = geo::ibitstream::readBytes((uint64_t *)a2, (uint64_t)&__p, 4uLL);
  v5 = __p;
  if (Bytes)
  {
    std::vector<unsigned char>::__assign_with_size[abi:ne180100]<unsigned char *,unsigned char *>(&v10, (char *)__p, (char *)v14, v14 - (_QWORD)__p);
    if (v5)
      operator delete(v5);
    v6 = v10;
    if (*(_BYTE *)v10 != 68)
    {
      v8 = 0;
      goto LABEL_18;
    }
    if (*((_BYTE *)v10 + 1) == 118 && *((_BYTE *)v10 + 2) == 77 && *((_BYTE *)v10 + 3) == 116)
    {
      geo::ibitstream::readUInt32((uint64_t *)a2, (uint64_t)&__p);
      if ((_BYTE)__p)
      {
        v7 = HIDWORD(__p);
        if (HIDWORD(__p) >= 0x13)
        {
          geo::ibitstream::readUInt64((uint64_t *)a2, (uint64_t)&__p);
          if ((_BYTE)__p)
          {
            v8 = geo::codec::MaterialSheet::decodeMaterial(this, a2, v7, v14);
            goto LABEL_15;
          }
        }
      }
    }
  }
  else if (__p)
  {
    v14 = (unint64_t)__p;
    operator delete(__p);
  }
  v8 = 0;
LABEL_15:
  v6 = v10;
  if (!v10)
    return v8;
LABEL_18:
  v11 = v6;
  operator delete(v6);
  return v8;
}

void sub_19F11E864(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t *geo::ibitstream::readUInt32@<X0>(uint64_t *this@<X0>, uint64_t a2@<X8>)
{
  unint64_t v2;
  uint64_t v3;
  char v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  unsigned int v11;
  int v12;
  int v13;

  v13 = 0;
  v2 = this[1];
  v3 = this[2];
  v4 = *((_BYTE *)this + 24);
  v5 = v3 + 5;
  if (!v4)
    v5 = v3 + 4;
  if (v2 >= v5)
  {
    v6 = *this;
    if (*((_BYTE *)this + 24))
    {
      v7 = 0;
      v8 = v6 + v3;
      v9 = v3 + 1;
      do
      {
        if (v9 + v7 >= v2)
          v10 = 0;
        else
          v10 = *(unsigned __int8 *)(v8 + v7 + 1);
        v11 = ((v10 & (0xFFFF << (8 - v4))) >> (8 - v4)) | ((((1 << (8 - v4)) + 255) & *(unsigned __int8 *)(v8 + v7)) << v4);
        this[2] = v9 + v7;
        *((_BYTE *)&v13 + v7++) = v11;
      }
      while (v7 != 4);
      v12 = v13;
    }
    else
    {
      v12 = *(_DWORD *)(v6 + v3);
      this[2] = v3 + 4;
    }
    *(_BYTE *)a2 = 1;
    *(_DWORD *)(a2 + 4) = v12;
  }
  else
  {
    *(_BYTE *)a2 = 0;
  }
  return this;
}

BOOL geo::ibitstream::readBytes(uint64_t *a1, uint64_t a2, size_t __n)
{
  size_t v3;
  char *v6;
  char *v7;
  unint64_t v8;
  size_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  size_t v13;
  char *v14;
  char *v15;
  char *v16;
  unint64_t v17;
  char *v18;
  char *v19;
  unint64_t v20;
  __int128 v21;
  char *v22;
  char *v23;
  unint64_t v24;
  uint64_t v25;
  char *v26;
  char v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  char *v31;
  unsigned int v32;
  unsigned __int8 v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  v3 = __n;
  v7 = *(char **)a2;
  v6 = *(char **)(a2 + 8);
  v8 = (unint64_t)&v6[-*(_QWORD *)a2];
  v9 = __n - v8;
  if (__n > v8)
  {
    v10 = *(_QWORD *)(a2 + 16);
    if (v10 - (uint64_t)v6 >= v9)
    {
      bzero(*(void **)(a2 + 8), __n - v8);
      *(_QWORD *)(a2 + 8) = &v6[v9];
      goto LABEL_31;
    }
    if ((__n & 0x8000000000000000) != 0)
      std::vector<double>::__throw_length_error[abi:ne180100]();
    v11 = v10 - (_QWORD)v7;
    v12 = 2 * v11;
    if (2 * v11 <= __n)
      v12 = __n;
    if (v11 >= 0x3FFFFFFFFFFFFFFFLL)
      v13 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v13 = v12;
    v14 = (char *)operator new(v13);
    v15 = &v14[v8];
    v16 = &v14[v13];
    bzero(&v14[v8], v9);
    if (v6 == v7)
      goto LABEL_29;
    if (v8 >= 8 && (unint64_t)(v7 - v14) >= 0x20)
    {
      if (v8 < 0x20)
      {
        v17 = 0;
        goto LABEL_21;
      }
      v17 = v8 & 0xFFFFFFFFFFFFFFE0;
      v18 = v6 - 16;
      v19 = &v14[v6 - 16 - v7];
      v20 = v8 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        v21 = *(_OWORD *)v18;
        *((_OWORD *)v19 - 1) = *((_OWORD *)v18 - 1);
        *(_OWORD *)v19 = v21;
        v19 -= 32;
        v18 -= 32;
        v20 -= 32;
      }
      while (v20);
      if (v8 == v17)
        goto LABEL_28;
      if ((v8 & 0x18) != 0)
      {
LABEL_21:
        v15 -= v8 & 0xFFFFFFFFFFFFFFF8;
        v22 = &v6[-v17 - 8];
        v23 = (char *)(v22 - v7);
        v24 = v17 - (v8 & 0xFFFFFFFFFFFFFFF8);
        do
        {
          v25 = *(_QWORD *)v22;
          v22 -= 8;
          *(_QWORD *)&v23[(_QWORD)v14] = v25;
          v23 -= 8;
          v24 += 8;
        }
        while (v24);
        v6 -= v8 & 0xFFFFFFFFFFFFFFF8;
        if (v8 == (v8 & 0xFFFFFFFFFFFFFFF8))
          goto LABEL_28;
        goto LABEL_26;
      }
      v15 -= v17;
      v6 -= v17;
    }
LABEL_26:
    v26 = v15 - 1;
    do
    {
      v27 = *--v6;
      *v26-- = v27;
    }
    while (v6 != v7);
LABEL_28:
    v6 = v7;
    v15 = v14;
LABEL_29:
    *(_QWORD *)a2 = v15;
    *(_QWORD *)(a2 + 8) = &v14[v3];
    *(_QWORD *)(a2 + 16) = v16;
    if (v6)
      operator delete(v6);
    goto LABEL_31;
  }
  if (__n < v8)
    *(_QWORD *)(a2 + 8) = &v7[__n];
LABEL_31:
  v29 = a1[1];
  v28 = a1[2];
  if (*((_BYTE *)a1 + 24))
    v30 = v28 + v3 + 1;
  else
    v30 = v28 + v3;
  if (v29 >= v30)
  {
    v31 = *(char **)a2;
    if (*((_BYTE *)a1 + 24))
    {
      for (; v3; --v3)
      {
        v35 = a1[2];
        v36 = v35 + 1;
        v37 = *a1;
        if (v35 + 1 < (unint64_t)a1[1])
          v32 = *(unsigned __int8 *)(v37 + v36);
        else
          v32 = 0;
        v33 = *(_BYTE *)(v37 + v35);
        v34 = *((_BYTE *)a1 + 24);
        a1[2] = v36;
        *v31++ = ((((1 << (8 - v34)) - 1) & v33) << v34) | (((0xFFFF << (8 - v34)) & v32) >> (8 - v34));
      }
    }
    else
    {
      memcpy(v31, (const void *)(*a1 + v28), v3);
      a1[2] += v3;
    }
  }
  return v29 >= v30;
}

uint64_t **std::__hash_table<std::__hash_value_type<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,BOOL>>>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,BOOL>>>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,BOOL>>>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,BOOL>>>>>::__emplace_unique_key_args<unsigned char,std::pair<unsigned char const,std::vector<std::pair<gm::Range<unsigned char>,BOOL>>> const&>(uint64_t a1, unsigned __int8 *a2, char *a3)
{
  unint64_t v3;
  unint64_t v5;
  unint64_t v6;
  uint8x8_t v7;
  uint64_t ***v8;
  uint64_t **result;
  unint64_t v10;
  uint64_t *v11;
  float v12;
  float v13;
  _QWORD *v14;
  _BOOL8 v15;
  unint64_t v16;
  unint64_t v17;
  size_t prime;
  int8x8_t v19;
  unint64_t v20;
  uint8x8_t v21;
  uint64_t v22;
  unint64_t v23;
  _QWORD v24[3];

  v5 = *a2;
  v6 = *(_QWORD *)(a1 + 8);
  if (v6)
  {
    v7 = (uint8x8_t)vcnt_s8((int8x8_t)v6);
    v7.i16[0] = vaddlv_u8(v7);
    if (v7.u32[0] > 1uLL)
    {
      v3 = *a2;
      if (v6 <= v5)
        v3 = v5 % v6;
    }
    else
    {
      v3 = ((_DWORD)v6 - 1) & v5;
    }
    v8 = *(uint64_t ****)(*(_QWORD *)a1 + 8 * v3);
    if (v8)
    {
      result = *v8;
      if (*v8)
      {
        if (v7.u32[0] < 2uLL)
        {
          while (1)
          {
            v11 = result[1];
            if (v11 == (uint64_t *)v5)
            {
              if (*((unsigned __int8 *)result + 16) == (_DWORD)v5)
                return result;
            }
            else if (((unint64_t)v11 & (v6 - 1)) != v3)
            {
              goto LABEL_23;
            }
            result = (uint64_t **)*result;
            if (!result)
              goto LABEL_23;
          }
        }
        do
        {
          v10 = (unint64_t)result[1];
          if (v10 == v5)
          {
            if (*((unsigned __int8 *)result + 16) == (_DWORD)v5)
              return result;
          }
          else
          {
            if (v10 >= v6)
              v10 %= v6;
            if (v10 != v3)
              break;
          }
          result = (uint64_t **)*result;
        }
        while (result);
      }
    }
  }
LABEL_23:
  std::__hash_table<std::__hash_value_type<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,BOOL>>>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,BOOL>>>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,BOOL>>>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,BOOL>>>>>::__construct_node_hash<std::pair<unsigned char const,std::vector<std::pair<gm::Range<unsigned char>,BOOL>>> const&>(a1, *a2, a3, (uint64_t)v24);
  v12 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v13 = *(float *)(a1 + 32);
  if (!v6 || (float)(v13 * (float)v6) < v12)
  {
    v15 = 1;
    if (v6 >= 3)
      v15 = (v6 & (v6 - 1)) != 0;
    v16 = v15 | (2 * v6);
    v17 = vcvtps_u32_f32(v12 / v13);
    if (v16 <= v17)
      prime = v17;
    else
      prime = v16;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
    }
    v19 = *(int8x8_t *)(a1 + 8);
    if (prime > *(_QWORD *)&v19)
      goto LABEL_37;
    if (prime < *(_QWORD *)&v19)
    {
      v20 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(_QWORD *)&v19 < 3uLL || (v21 = (uint8x8_t)vcnt_s8(v19), v21.i16[0] = vaddlv_u8(v21), v21.u32[0] > 1uLL))
      {
        v20 = std::__next_prime(v20);
      }
      else
      {
        v22 = 1 << -(char)__clz(v20 - 1);
        if (v20 >= 2)
          v20 = v22;
      }
      if (prime <= v20)
        prime = v20;
      if (prime < *(_QWORD *)&v19)
LABEL_37:
        std::__hash_table<std::__hash_value_type<char const*,DebugChapterInfo>,std::__unordered_map_hasher<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::hash<char const*>,std::equal_to<char const*>,true>,std::__unordered_map_equal<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::equal_to<char const*>,std::hash<char const*>,true>,std::allocator<std::__hash_value_type<char const*,DebugChapterInfo>>>::__do_rehash<true>(a1, prime);
    }
    v6 = *(_QWORD *)(a1 + 8);
    if ((v6 & (v6 - 1)) != 0)
    {
      if (v6 <= v5)
      {
        v3 = v5 % v6;
        v14 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v5 % v6));
        if (v14)
          goto LABEL_26;
      }
      else
      {
        v3 = v5;
        v14 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v5);
        if (v14)
          goto LABEL_26;
      }
    }
    else
    {
      v3 = ((_DWORD)v6 - 1) & v5;
      v14 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
      if (v14)
        goto LABEL_26;
    }
LABEL_50:
    *(_QWORD *)v24[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v24[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v3) = a1 + 16;
    if (*(_QWORD *)v24[0])
    {
      v23 = *(_QWORD *)(*(_QWORD *)v24[0] + 8);
      if ((v6 & (v6 - 1)) != 0)
      {
        if (v23 >= v6)
          v23 %= v6;
      }
      else
      {
        v23 &= v6 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v23) = v24[0];
    }
    goto LABEL_61;
  }
  v14 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (!v14)
    goto LABEL_50;
LABEL_26:
  *(_QWORD *)v24[0] = *v14;
  *v14 = v24[0];
LABEL_61:
  result = (uint64_t **)v24[0];
  ++*(_QWORD *)(a1 + 24);
  return result;
}

void sub_19F11EF28(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<gdc::Registry *,std::vector<gdc::Entity>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<gdc::Registry *,std::vector<gdc::Entity>>,void *>>>>::~unique_ptr[abi:nn180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *std::__hash_table<std::__hash_value_type<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,BOOL>>>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,BOOL>>>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,BOOL>>>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,BOOL>>>>>::__construct_node_hash<std::pair<unsigned char const,std::vector<std::pair<gm::Range<unsigned char>,BOOL>>> const&>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  _QWORD *result;
  char v9;
  _BYTE *v10;
  _BYTE *v11;
  size_t v12;
  _QWORD *v13;
  char *v14;

  v7 = a1 + 16;
  result = operator new(0x30uLL);
  *(_QWORD *)a4 = result;
  *(_QWORD *)(a4 + 8) = v7;
  *(_BYTE *)(a4 + 16) = 0;
  *result = 0;
  result[1] = a2;
  v9 = *a3;
  result[3] = 0;
  *((_BYTE *)result + 16) = v9;
  result[4] = 0;
  result[5] = 0;
  v11 = (_BYTE *)*((_QWORD *)a3 + 1);
  v10 = (_BYTE *)*((_QWORD *)a3 + 2);
  v12 = v10 - v11;
  if (v10 != v11)
  {
    v13 = result;
    if (0xAAAAAAAAAAAAAAABLL * v12 >= 0x5555555555555556)
      std::vector<double>::__throw_length_error[abi:ne180100]();
    v14 = (char *)operator new(v12);
    v13[3] = v14;
    v13[4] = v14;
    v13[5] = &v14[v12];
    result = memcpy(v14, v11, 3 * ((v12 - 3) / 3) + 3);
    v13[4] = &v14[3 * ((v12 - 3) / 3) + 3];
  }
  *(_BYTE *)(a4 + 16) = 1;
  return result;
}

void sub_19F11F030(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  void **v3;
  void *v5;

  v5 = *v3;
  if (*v3)
  {
    *(_QWORD *)(v2 + 32) = v5;
    operator delete(v5);
  }
  std::unique_ptr<std::__hash_node<std::__hash_value_type<gdc::Registry *,std::vector<gdc::Entity>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<gdc::Registry *,std::vector<gdc::Entity>>,void *>>>>::~unique_ptr[abi:nn180100](v1);
  _Unwind_Resume(a1);
}

uint64_t **std::__hash_table<std::__hash_value_type<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,int>>>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,int>>>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,int>>>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,int>>>>>::__emplace_unique_key_args<unsigned char,std::pair<unsigned char const,std::vector<std::pair<gm::Range<unsigned char>,int>>> const&>(uint64_t a1, unsigned __int8 *a2, char *a3)
{
  unint64_t v3;
  unint64_t v5;
  unint64_t v6;
  uint8x8_t v7;
  uint64_t ***v8;
  uint64_t **result;
  unint64_t v10;
  uint64_t *v11;
  float v12;
  float v13;
  _QWORD *v14;
  _BOOL8 v15;
  unint64_t v16;
  unint64_t v17;
  size_t prime;
  int8x8_t v19;
  unint64_t v20;
  uint8x8_t v21;
  uint64_t v22;
  unint64_t v23;
  _QWORD v24[3];

  v5 = *a2;
  v6 = *(_QWORD *)(a1 + 8);
  if (v6)
  {
    v7 = (uint8x8_t)vcnt_s8((int8x8_t)v6);
    v7.i16[0] = vaddlv_u8(v7);
    if (v7.u32[0] > 1uLL)
    {
      v3 = *a2;
      if (v6 <= v5)
        v3 = v5 % v6;
    }
    else
    {
      v3 = ((_DWORD)v6 - 1) & v5;
    }
    v8 = *(uint64_t ****)(*(_QWORD *)a1 + 8 * v3);
    if (v8)
    {
      result = *v8;
      if (*v8)
      {
        if (v7.u32[0] < 2uLL)
        {
          while (1)
          {
            v11 = result[1];
            if (v11 == (uint64_t *)v5)
            {
              if (*((unsigned __int8 *)result + 16) == (_DWORD)v5)
                return result;
            }
            else if (((unint64_t)v11 & (v6 - 1)) != v3)
            {
              goto LABEL_23;
            }
            result = (uint64_t **)*result;
            if (!result)
              goto LABEL_23;
          }
        }
        do
        {
          v10 = (unint64_t)result[1];
          if (v10 == v5)
          {
            if (*((unsigned __int8 *)result + 16) == (_DWORD)v5)
              return result;
          }
          else
          {
            if (v10 >= v6)
              v10 %= v6;
            if (v10 != v3)
              break;
          }
          result = (uint64_t **)*result;
        }
        while (result);
      }
    }
  }
LABEL_23:
  std::__hash_table<std::__hash_value_type<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,int>>>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,int>>>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,int>>>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,int>>>>>::__construct_node_hash<std::pair<unsigned char const,std::vector<std::pair<gm::Range<unsigned char>,int>>> const&>(a1, *a2, a3, (uint64_t)v24);
  v12 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v13 = *(float *)(a1 + 32);
  if (!v6 || (float)(v13 * (float)v6) < v12)
  {
    v15 = 1;
    if (v6 >= 3)
      v15 = (v6 & (v6 - 1)) != 0;
    v16 = v15 | (2 * v6);
    v17 = vcvtps_u32_f32(v12 / v13);
    if (v16 <= v17)
      prime = v17;
    else
      prime = v16;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
    }
    v19 = *(int8x8_t *)(a1 + 8);
    if (prime > *(_QWORD *)&v19)
      goto LABEL_37;
    if (prime < *(_QWORD *)&v19)
    {
      v20 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(_QWORD *)&v19 < 3uLL || (v21 = (uint8x8_t)vcnt_s8(v19), v21.i16[0] = vaddlv_u8(v21), v21.u32[0] > 1uLL))
      {
        v20 = std::__next_prime(v20);
      }
      else
      {
        v22 = 1 << -(char)__clz(v20 - 1);
        if (v20 >= 2)
          v20 = v22;
      }
      if (prime <= v20)
        prime = v20;
      if (prime < *(_QWORD *)&v19)
LABEL_37:
        std::__hash_table<std::__hash_value_type<char const*,DebugChapterInfo>,std::__unordered_map_hasher<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::hash<char const*>,std::equal_to<char const*>,true>,std::__unordered_map_equal<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::equal_to<char const*>,std::hash<char const*>,true>,std::allocator<std::__hash_value_type<char const*,DebugChapterInfo>>>::__do_rehash<true>(a1, prime);
    }
    v6 = *(_QWORD *)(a1 + 8);
    if ((v6 & (v6 - 1)) != 0)
    {
      if (v6 <= v5)
      {
        v3 = v5 % v6;
        v14 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v5 % v6));
        if (v14)
          goto LABEL_26;
      }
      else
      {
        v3 = v5;
        v14 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v5);
        if (v14)
          goto LABEL_26;
      }
    }
    else
    {
      v3 = ((_DWORD)v6 - 1) & v5;
      v14 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
      if (v14)
        goto LABEL_26;
    }
LABEL_50:
    *(_QWORD *)v24[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v24[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v3) = a1 + 16;
    if (*(_QWORD *)v24[0])
    {
      v23 = *(_QWORD *)(*(_QWORD *)v24[0] + 8);
      if ((v6 & (v6 - 1)) != 0)
      {
        if (v23 >= v6)
          v23 %= v6;
      }
      else
      {
        v23 &= v6 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v23) = v24[0];
    }
    goto LABEL_61;
  }
  v14 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (!v14)
    goto LABEL_50;
LABEL_26:
  *(_QWORD *)v24[0] = *v14;
  *v14 = v24[0];
LABEL_61:
  result = (uint64_t **)v24[0];
  ++*(_QWORD *)(a1 + 24);
  return result;
}

void sub_19F11F36C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<gdc::Registry *,std::vector<gdc::Entity>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<gdc::Registry *,std::vector<gdc::Entity>>,void *>>>>::~unique_ptr[abi:nn180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *std::__hash_table<std::__hash_value_type<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,int>>>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,int>>>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,int>>>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,int>>>>>::__construct_node_hash<std::pair<unsigned char const,std::vector<std::pair<gm::Range<unsigned char>,int>>> const&>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  _QWORD *result;
  char v9;
  _BYTE *v10;
  _BYTE *v11;
  uint64_t v12;
  _QWORD *v13;
  char *v14;

  v7 = a1 + 16;
  result = operator new(0x30uLL);
  *(_QWORD *)a4 = result;
  *(_QWORD *)(a4 + 8) = v7;
  *(_BYTE *)(a4 + 16) = 0;
  *result = 0;
  result[1] = a2;
  v9 = *a3;
  result[3] = 0;
  *((_BYTE *)result + 16) = v9;
  result[4] = 0;
  result[5] = 0;
  v11 = (_BYTE *)*((_QWORD *)a3 + 1);
  v10 = (_BYTE *)*((_QWORD *)a3 + 2);
  v12 = v10 - v11;
  if (v10 != v11)
  {
    v13 = result;
    if (v12 < 0)
      std::vector<double>::__throw_length_error[abi:ne180100]();
    v14 = (char *)operator new(v10 - v11);
    v13[3] = v14;
    v13[4] = v14;
    v13[5] = &v14[8 * (v12 >> 3)];
    result = memcpy(v14, v11, v12 & 0xFFFFFFFFFFFFFFF8);
    v13[4] = &v14[v12 & 0xFFFFFFFFFFFFFFF8];
  }
  *(_BYTE *)(a4 + 16) = 1;
  return result;
}

void sub_19F11F43C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  void **v3;
  void *v5;

  v5 = *v3;
  if (*v3)
  {
    *(_QWORD *)(v2 + 32) = v5;
    operator delete(v5);
  }
  std::unique_ptr<std::__hash_node<std::__hash_value_type<gdc::Registry *,std::vector<gdc::Entity>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<gdc::Registry *,std::vector<gdc::Entity>>,void *>>>>::~unique_ptr[abi:nn180100](v1);
  _Unwind_Resume(a1);
}

uint64_t **std::__hash_table<std::__hash_value_type<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,gm::Matrix<float,2,1>>>>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,gm::Matrix<float,2,1>>>>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,gm::Matrix<float,2,1>>>>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,gm::Matrix<float,2,1>>>>>>::__emplace_unique_key_args<unsigned char,std::pair<unsigned char const,std::vector<std::pair<gm::Range<unsigned char>,gm::Matrix<float,2,1>>>> const&>(uint64_t a1, unsigned __int8 *a2, char *a3)
{
  unint64_t v3;
  unint64_t v5;
  unint64_t v6;
  uint8x8_t v7;
  uint64_t ***v8;
  uint64_t **result;
  unint64_t v10;
  uint64_t *v11;
  float v12;
  float v13;
  _QWORD *v14;
  _BOOL8 v15;
  unint64_t v16;
  unint64_t v17;
  size_t prime;
  int8x8_t v19;
  unint64_t v20;
  uint8x8_t v21;
  uint64_t v22;
  unint64_t v23;
  _QWORD v24[3];

  v5 = *a2;
  v6 = *(_QWORD *)(a1 + 8);
  if (v6)
  {
    v7 = (uint8x8_t)vcnt_s8((int8x8_t)v6);
    v7.i16[0] = vaddlv_u8(v7);
    if (v7.u32[0] > 1uLL)
    {
      v3 = *a2;
      if (v6 <= v5)
        v3 = v5 % v6;
    }
    else
    {
      v3 = ((_DWORD)v6 - 1) & v5;
    }
    v8 = *(uint64_t ****)(*(_QWORD *)a1 + 8 * v3);
    if (v8)
    {
      result = *v8;
      if (*v8)
      {
        if (v7.u32[0] < 2uLL)
        {
          while (1)
          {
            v11 = result[1];
            if (v11 == (uint64_t *)v5)
            {
              if (*((unsigned __int8 *)result + 16) == (_DWORD)v5)
                return result;
            }
            else if (((unint64_t)v11 & (v6 - 1)) != v3)
            {
              goto LABEL_23;
            }
            result = (uint64_t **)*result;
            if (!result)
              goto LABEL_23;
          }
        }
        do
        {
          v10 = (unint64_t)result[1];
          if (v10 == v5)
          {
            if (*((unsigned __int8 *)result + 16) == (_DWORD)v5)
              return result;
          }
          else
          {
            if (v10 >= v6)
              v10 %= v6;
            if (v10 != v3)
              break;
          }
          result = (uint64_t **)*result;
        }
        while (result);
      }
    }
  }
LABEL_23:
  std::__hash_table<std::__hash_value_type<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,gm::Matrix<float,2,1>>>>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,gm::Matrix<float,2,1>>>>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,gm::Matrix<float,2,1>>>>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,gm::Matrix<float,2,1>>>>>>::__construct_node_hash<std::pair<unsigned char const,std::vector<std::pair<gm::Range<unsigned char>,gm::Matrix<float,2,1>>>> const&>(a1, *a2, a3, (uint64_t)v24);
  v12 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v13 = *(float *)(a1 + 32);
  if (!v6 || (float)(v13 * (float)v6) < v12)
  {
    v15 = 1;
    if (v6 >= 3)
      v15 = (v6 & (v6 - 1)) != 0;
    v16 = v15 | (2 * v6);
    v17 = vcvtps_u32_f32(v12 / v13);
    if (v16 <= v17)
      prime = v17;
    else
      prime = v16;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
    }
    v19 = *(int8x8_t *)(a1 + 8);
    if (prime > *(_QWORD *)&v19)
      goto LABEL_37;
    if (prime < *(_QWORD *)&v19)
    {
      v20 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(_QWORD *)&v19 < 3uLL || (v21 = (uint8x8_t)vcnt_s8(v19), v21.i16[0] = vaddlv_u8(v21), v21.u32[0] > 1uLL))
      {
        v20 = std::__next_prime(v20);
      }
      else
      {
        v22 = 1 << -(char)__clz(v20 - 1);
        if (v20 >= 2)
          v20 = v22;
      }
      if (prime <= v20)
        prime = v20;
      if (prime < *(_QWORD *)&v19)
LABEL_37:
        std::__hash_table<std::__hash_value_type<char const*,DebugChapterInfo>,std::__unordered_map_hasher<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::hash<char const*>,std::equal_to<char const*>,true>,std::__unordered_map_equal<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::equal_to<char const*>,std::hash<char const*>,true>,std::allocator<std::__hash_value_type<char const*,DebugChapterInfo>>>::__do_rehash<true>(a1, prime);
    }
    v6 = *(_QWORD *)(a1 + 8);
    if ((v6 & (v6 - 1)) != 0)
    {
      if (v6 <= v5)
      {
        v3 = v5 % v6;
        v14 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v5 % v6));
        if (v14)
          goto LABEL_26;
      }
      else
      {
        v3 = v5;
        v14 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v5);
        if (v14)
          goto LABEL_26;
      }
    }
    else
    {
      v3 = ((_DWORD)v6 - 1) & v5;
      v14 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
      if (v14)
        goto LABEL_26;
    }
LABEL_50:
    *(_QWORD *)v24[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v24[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v3) = a1 + 16;
    if (*(_QWORD *)v24[0])
    {
      v23 = *(_QWORD *)(*(_QWORD *)v24[0] + 8);
      if ((v6 & (v6 - 1)) != 0)
      {
        if (v23 >= v6)
          v23 %= v6;
      }
      else
      {
        v23 &= v6 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v23) = v24[0];
    }
    goto LABEL_61;
  }
  v14 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (!v14)
    goto LABEL_50;
LABEL_26:
  *(_QWORD *)v24[0] = *v14;
  *v14 = v24[0];
LABEL_61:
  result = (uint64_t **)v24[0];
  ++*(_QWORD *)(a1 + 24);
  return result;
}

void sub_19F11F778(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<gdc::Registry *,std::vector<gdc::Entity>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<gdc::Registry *,std::vector<gdc::Entity>>,void *>>>>::~unique_ptr[abi:nn180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *std::__hash_table<std::__hash_value_type<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,gm::Matrix<float,2,1>>>>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,gm::Matrix<float,2,1>>>>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,gm::Matrix<float,2,1>>>>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,gm::Matrix<float,2,1>>>>>>::__construct_node_hash<std::pair<unsigned char const,std::vector<std::pair<gm::Range<unsigned char>,gm::Matrix<float,2,1>>>> const&>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  _QWORD *result;
  char v9;
  _BYTE *v10;
  _BYTE *v11;
  int64_t v12;
  _QWORD *v13;
  char *v14;

  v7 = a1 + 16;
  result = operator new(0x30uLL);
  *(_QWORD *)a4 = result;
  *(_QWORD *)(a4 + 8) = v7;
  *(_BYTE *)(a4 + 16) = 0;
  *result = 0;
  result[1] = a2;
  v9 = *a3;
  result[3] = 0;
  *((_BYTE *)result + 16) = v9;
  result[4] = 0;
  result[5] = 0;
  v11 = (_BYTE *)*((_QWORD *)a3 + 1);
  v10 = (_BYTE *)*((_QWORD *)a3 + 2);
  v12 = v10 - v11;
  if (v10 != v11)
  {
    v13 = result;
    if (0xAAAAAAAAAAAAAAABLL * (v12 >> 2) >= 0x1555555555555556)
      std::vector<double>::__throw_length_error[abi:ne180100]();
    v14 = (char *)operator new(v12);
    v13[3] = v14;
    v13[4] = v14;
    v13[5] = &v14[4 * (v12 >> 2)];
    result = memcpy(v14, v11, 12 * ((v12 - 12) / 0xCuLL) + 12);
    v13[4] = &v14[12 * ((v12 - 12) / 0xCuLL) + 12];
  }
  *(_BYTE *)(a4 + 16) = 1;
  return result;
}

void sub_19F11F888(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  void **v3;
  void *v5;

  v5 = *v3;
  if (*v3)
  {
    *(_QWORD *)(v2 + 32) = v5;
    operator delete(v5);
  }
  std::unique_ptr<std::__hash_node<std::__hash_value_type<gdc::Registry *,std::vector<gdc::Entity>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<gdc::Registry *,std::vector<gdc::Entity>>,void *>>>>::~unique_ptr[abi:nn180100](v1);
  _Unwind_Resume(a1);
}

uint64_t **std::__hash_table<std::__hash_value_type<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,float>>>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,float>>>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,float>>>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,float>>>>>::__emplace_unique_key_args<unsigned char,std::pair<unsigned char const,std::vector<std::pair<gm::Range<unsigned char>,float>>> const&>(uint64_t a1, unsigned __int8 *a2, char *a3)
{
  unint64_t v3;
  unint64_t v5;
  unint64_t v6;
  uint8x8_t v7;
  uint64_t ***v8;
  uint64_t **result;
  unint64_t v10;
  uint64_t *v11;
  float v12;
  float v13;
  _QWORD *v14;
  _BOOL8 v15;
  unint64_t v16;
  unint64_t v17;
  size_t prime;
  int8x8_t v19;
  unint64_t v20;
  uint8x8_t v21;
  uint64_t v22;
  unint64_t v23;
  _QWORD v24[3];

  v5 = *a2;
  v6 = *(_QWORD *)(a1 + 8);
  if (v6)
  {
    v7 = (uint8x8_t)vcnt_s8((int8x8_t)v6);
    v7.i16[0] = vaddlv_u8(v7);
    if (v7.u32[0] > 1uLL)
    {
      v3 = *a2;
      if (v6 <= v5)
        v3 = v5 % v6;
    }
    else
    {
      v3 = ((_DWORD)v6 - 1) & v5;
    }
    v8 = *(uint64_t ****)(*(_QWORD *)a1 + 8 * v3);
    if (v8)
    {
      result = *v8;
      if (*v8)
      {
        if (v7.u32[0] < 2uLL)
        {
          while (1)
          {
            v11 = result[1];
            if (v11 == (uint64_t *)v5)
            {
              if (*((unsigned __int8 *)result + 16) == (_DWORD)v5)
                return result;
            }
            else if (((unint64_t)v11 & (v6 - 1)) != v3)
            {
              goto LABEL_23;
            }
            result = (uint64_t **)*result;
            if (!result)
              goto LABEL_23;
          }
        }
        do
        {
          v10 = (unint64_t)result[1];
          if (v10 == v5)
          {
            if (*((unsigned __int8 *)result + 16) == (_DWORD)v5)
              return result;
          }
          else
          {
            if (v10 >= v6)
              v10 %= v6;
            if (v10 != v3)
              break;
          }
          result = (uint64_t **)*result;
        }
        while (result);
      }
    }
  }
LABEL_23:
  std::__hash_table<std::__hash_value_type<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,float>>>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,float>>>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,float>>>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,float>>>>>::__construct_node_hash<std::pair<unsigned char const,std::vector<std::pair<gm::Range<unsigned char>,float>>> const&>(a1, *a2, a3, (uint64_t)v24);
  v12 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v13 = *(float *)(a1 + 32);
  if (!v6 || (float)(v13 * (float)v6) < v12)
  {
    v15 = 1;
    if (v6 >= 3)
      v15 = (v6 & (v6 - 1)) != 0;
    v16 = v15 | (2 * v6);
    v17 = vcvtps_u32_f32(v12 / v13);
    if (v16 <= v17)
      prime = v17;
    else
      prime = v16;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
    }
    v19 = *(int8x8_t *)(a1 + 8);
    if (prime > *(_QWORD *)&v19)
      goto LABEL_37;
    if (prime < *(_QWORD *)&v19)
    {
      v20 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(_QWORD *)&v19 < 3uLL || (v21 = (uint8x8_t)vcnt_s8(v19), v21.i16[0] = vaddlv_u8(v21), v21.u32[0] > 1uLL))
      {
        v20 = std::__next_prime(v20);
      }
      else
      {
        v22 = 1 << -(char)__clz(v20 - 1);
        if (v20 >= 2)
          v20 = v22;
      }
      if (prime <= v20)
        prime = v20;
      if (prime < *(_QWORD *)&v19)
LABEL_37:
        std::__hash_table<std::__hash_value_type<char const*,DebugChapterInfo>,std::__unordered_map_hasher<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::hash<char const*>,std::equal_to<char const*>,true>,std::__unordered_map_equal<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::equal_to<char const*>,std::hash<char const*>,true>,std::allocator<std::__hash_value_type<char const*,DebugChapterInfo>>>::__do_rehash<true>(a1, prime);
    }
    v6 = *(_QWORD *)(a1 + 8);
    if ((v6 & (v6 - 1)) != 0)
    {
      if (v6 <= v5)
      {
        v3 = v5 % v6;
        v14 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v5 % v6));
        if (v14)
          goto LABEL_26;
      }
      else
      {
        v3 = v5;
        v14 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v5);
        if (v14)
          goto LABEL_26;
      }
    }
    else
    {
      v3 = ((_DWORD)v6 - 1) & v5;
      v14 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
      if (v14)
        goto LABEL_26;
    }
LABEL_50:
    *(_QWORD *)v24[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v24[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v3) = a1 + 16;
    if (*(_QWORD *)v24[0])
    {
      v23 = *(_QWORD *)(*(_QWORD *)v24[0] + 8);
      if ((v6 & (v6 - 1)) != 0)
      {
        if (v23 >= v6)
          v23 %= v6;
      }
      else
      {
        v23 &= v6 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v23) = v24[0];
    }
    goto LABEL_61;
  }
  v14 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (!v14)
    goto LABEL_50;
LABEL_26:
  *(_QWORD *)v24[0] = *v14;
  *v14 = v24[0];
LABEL_61:
  result = (uint64_t **)v24[0];
  ++*(_QWORD *)(a1 + 24);
  return result;
}

void sub_19F11FBC4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<gdc::Registry *,std::vector<gdc::Entity>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<gdc::Registry *,std::vector<gdc::Entity>>,void *>>>>::~unique_ptr[abi:nn180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t **std::__hash_table<std::__hash_value_type<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,unsigned char>>>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,unsigned char>>>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,unsigned char>>>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,unsigned char>>>>>::__emplace_unique_key_args<unsigned char,std::pair<unsigned char const,std::vector<std::pair<gm::Range<unsigned char>,unsigned char>>> const&>(uint64_t a1, unsigned __int8 *a2, char *a3)
{
  unint64_t v3;
  unint64_t v5;
  unint64_t v6;
  uint8x8_t v7;
  uint64_t ***v8;
  uint64_t **result;
  unint64_t v10;
  uint64_t *v11;
  float v12;
  float v13;
  _QWORD *v14;
  _BOOL8 v15;
  unint64_t v16;
  unint64_t v17;
  size_t prime;
  int8x8_t v19;
  unint64_t v20;
  uint8x8_t v21;
  uint64_t v22;
  unint64_t v23;
  _QWORD v24[3];

  v5 = *a2;
  v6 = *(_QWORD *)(a1 + 8);
  if (v6)
  {
    v7 = (uint8x8_t)vcnt_s8((int8x8_t)v6);
    v7.i16[0] = vaddlv_u8(v7);
    if (v7.u32[0] > 1uLL)
    {
      v3 = *a2;
      if (v6 <= v5)
        v3 = v5 % v6;
    }
    else
    {
      v3 = ((_DWORD)v6 - 1) & v5;
    }
    v8 = *(uint64_t ****)(*(_QWORD *)a1 + 8 * v3);
    if (v8)
    {
      result = *v8;
      if (*v8)
      {
        if (v7.u32[0] < 2uLL)
        {
          while (1)
          {
            v11 = result[1];
            if (v11 == (uint64_t *)v5)
            {
              if (*((unsigned __int8 *)result + 16) == (_DWORD)v5)
                return result;
            }
            else if (((unint64_t)v11 & (v6 - 1)) != v3)
            {
              goto LABEL_23;
            }
            result = (uint64_t **)*result;
            if (!result)
              goto LABEL_23;
          }
        }
        do
        {
          v10 = (unint64_t)result[1];
          if (v10 == v5)
          {
            if (*((unsigned __int8 *)result + 16) == (_DWORD)v5)
              return result;
          }
          else
          {
            if (v10 >= v6)
              v10 %= v6;
            if (v10 != v3)
              break;
          }
          result = (uint64_t **)*result;
        }
        while (result);
      }
    }
  }
LABEL_23:
  std::__hash_table<std::__hash_value_type<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,unsigned char>>>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,unsigned char>>>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,unsigned char>>>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,unsigned char>>>>>::__construct_node_hash<std::pair<unsigned char const,std::vector<std::pair<gm::Range<unsigned char>,unsigned char>>> const&>(a1, *a2, a3, (uint64_t)v24);
  v12 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v13 = *(float *)(a1 + 32);
  if (!v6 || (float)(v13 * (float)v6) < v12)
  {
    v15 = 1;
    if (v6 >= 3)
      v15 = (v6 & (v6 - 1)) != 0;
    v16 = v15 | (2 * v6);
    v17 = vcvtps_u32_f32(v12 / v13);
    if (v16 <= v17)
      prime = v17;
    else
      prime = v16;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
    }
    v19 = *(int8x8_t *)(a1 + 8);
    if (prime > *(_QWORD *)&v19)
      goto LABEL_37;
    if (prime < *(_QWORD *)&v19)
    {
      v20 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(_QWORD *)&v19 < 3uLL || (v21 = (uint8x8_t)vcnt_s8(v19), v21.i16[0] = vaddlv_u8(v21), v21.u32[0] > 1uLL))
      {
        v20 = std::__next_prime(v20);
      }
      else
      {
        v22 = 1 << -(char)__clz(v20 - 1);
        if (v20 >= 2)
          v20 = v22;
      }
      if (prime <= v20)
        prime = v20;
      if (prime < *(_QWORD *)&v19)
LABEL_37:
        std::__hash_table<std::__hash_value_type<char const*,DebugChapterInfo>,std::__unordered_map_hasher<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::hash<char const*>,std::equal_to<char const*>,true>,std::__unordered_map_equal<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::equal_to<char const*>,std::hash<char const*>,true>,std::allocator<std::__hash_value_type<char const*,DebugChapterInfo>>>::__do_rehash<true>(a1, prime);
    }
    v6 = *(_QWORD *)(a1 + 8);
    if ((v6 & (v6 - 1)) != 0)
    {
      if (v6 <= v5)
      {
        v3 = v5 % v6;
        v14 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v5 % v6));
        if (v14)
          goto LABEL_26;
      }
      else
      {
        v3 = v5;
        v14 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v5);
        if (v14)
          goto LABEL_26;
      }
    }
    else
    {
      v3 = ((_DWORD)v6 - 1) & v5;
      v14 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
      if (v14)
        goto LABEL_26;
    }
LABEL_50:
    *(_QWORD *)v24[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v24[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v3) = a1 + 16;
    if (*(_QWORD *)v24[0])
    {
      v23 = *(_QWORD *)(*(_QWORD *)v24[0] + 8);
      if ((v6 & (v6 - 1)) != 0)
      {
        if (v23 >= v6)
          v23 %= v6;
      }
      else
      {
        v23 &= v6 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v23) = v24[0];
    }
    goto LABEL_61;
  }
  v14 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (!v14)
    goto LABEL_50;
LABEL_26:
  *(_QWORD *)v24[0] = *v14;
  *v14 = v24[0];
LABEL_61:
  result = (uint64_t **)v24[0];
  ++*(_QWORD *)(a1 + 24);
  return result;
}

void sub_19F11FEF0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<gdc::Registry *,std::vector<gdc::Entity>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<gdc::Registry *,std::vector<gdc::Entity>>,void *>>>>::~unique_ptr[abi:nn180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_ea8_40c27_ZTSNSt3__18functionIFvbEEE(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = *(_QWORD *)(a2 + 64);
  if (result)
  {
    if (result == a2 + 40)
    {
      *(_QWORD *)(a1 + 64) = a1 + 40;
      return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a2 + 64) + 24))(*(_QWORD *)(a2 + 64), a1 + 40);
    }
    else
    {
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 16))(result);
      *(_QWORD *)(a1 + 64) = result;
    }
  }
  else
  {
    *(_QWORD *)(a1 + 64) = 0;
  }
  return result;
}

void sub_19F1201DC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19F1201EC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19F120270(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19F1202CC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19F12038C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19F120530(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19F1205A8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19F120618(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t geo::View<double>::View(uint64_t a1, __int128 *a2, double *a3, __int128 *a4, _WORD *a5, int a6, double a7)
{
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  double v38;
  double v39;
  double v40;
  double v41;
  double v42;
  double v43;
  double v44;
  double v45;
  double v46;
  double v47;
  unint64_t v48;
  double v50[16];

  v11 = *a2;
  *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
  *(_OWORD *)a1 = v11;
  v12 = *(__int128 *)((char *)a2 + 24);
  *(_QWORD *)(a1 + 40) = *((_QWORD *)a2 + 5);
  *(_OWORD *)(a1 + 24) = v12;
  *(_QWORD *)(a1 + 48) = *((_QWORD *)a2 + 6);
  v13 = *(_OWORD *)a3;
  v14 = *((_OWORD *)a3 + 1);
  v15 = *((_OWORD *)a3 + 2);
  *(_OWORD *)(a1 + 104) = *((_OWORD *)a3 + 3);
  *(_OWORD *)(a1 + 88) = v15;
  *(_OWORD *)(a1 + 72) = v14;
  *(_OWORD *)(a1 + 56) = v13;
  v16 = *((_OWORD *)a3 + 4);
  v17 = *((_OWORD *)a3 + 5);
  v18 = *((_OWORD *)a3 + 6);
  *(_OWORD *)(a1 + 168) = *((_OWORD *)a3 + 7);
  *(_OWORD *)(a1 + 152) = v18;
  *(_OWORD *)(a1 + 136) = v17;
  *(_OWORD *)(a1 + 120) = v16;
  v19 = a4[6];
  v20 = a4[7];
  v21 = a4[5];
  *(_OWORD *)(a1 + 248) = a4[4];
  *(_OWORD *)(a1 + 280) = v19;
  *(_OWORD *)(a1 + 296) = v20;
  *(_OWORD *)(a1 + 264) = v21;
  v22 = *a4;
  v23 = a4[1];
  v24 = a4[2];
  *(_OWORD *)(a1 + 232) = a4[3];
  *(_OWORD *)(a1 + 216) = v24;
  *(_OWORD *)(a1 + 200) = v23;
  *(_OWORD *)(a1 + 184) = v22;
  *(_QWORD *)&v22 = *((_QWORD *)a2 + 4);
  *(_QWORD *)&v23 = *((_QWORD *)a2 + 5);
  *(_QWORD *)&v24 = *((_QWORD *)a2 + 6);
  v26 = *((double *)a2 + 2);
  v25 = *((double *)a2 + 3);
  v27 = *((double *)a2 + 1);
  v28 = -(*(double *)a2 * *(double *)&v23 - v26 * v25);
  v29 = -(v27 * v25 - *(double *)a2 * *(double *)&v22);
  v30 = -(v26 * *(double *)&v22 - v27 * *(double *)&v23) - (v26 * *(double *)&v22 - v27 * *(double *)&v23);
  v31 = v28 + v28;
  v32 = v29 + v29;
  v33 = -(v32 * v25 - (-(v27 - v30 * *(double *)&v23) - v31 * *(double *)&v24));
  v34 = -(*(double *)a2 + v30 * *(double *)&v24 + v31 * *(double *)&v23 - v32 * *(double *)&v22);
  v35 = -(v26 + v30 * *(double *)&v22 + v32 * *(double *)&v24 - v31 * v25);
  v36 = *(double *)&v22 * -2.0;
  v37 = -(*(double *)&v22 * (*(double *)&v22 * -2.0));
  v38 = 1.0 - (v37 - *(double *)&v23 * (*(double *)&v23 * -2.0));
  v39 = v25 * -2.0;
  *(double *)&v22 = -(*(double *)&v22 * (v25 * -2.0));
  v40 = *(double *)&v23 * -2.0 * *(double *)&v24;
  v41 = *(double *)&v22 - v40;
  v42 = -(*(double *)&v23 * (v25 * -2.0));
  v43 = *(double *)&v24 * v36;
  v44 = *(double *)&v24 * v36 - *(double *)&v23 * (v25 * -2.0);
  *(double *)&v22 = v40 + *(double *)&v22;
  v45 = v25 * -2.0 * v25 + 1.0;
  v46 = v45 - -(*(double *)&v23 * (*(double *)&v23 * -2.0));
  *(double *)&v23 = -(*(double *)&v23 * v36);
  *(double *)&v24 = *(double *)&v24 * v39;
  v50[0] = v38;
  *(_QWORD *)&v50[1] = v22;
  v50[4] = v41;
  v50[5] = v46;
  v50[8] = v44;
  v50[9] = *(double *)&v23 - *(double *)&v24;
  v50[2] = v42 - v43;
  v50[6] = *(double *)&v24 + *(double *)&v23;
  v50[10] = v45 - v37;
  v50[3] = 0.0;
  v50[7] = 0.0;
  v50[11] = 0.0;
  v50[12] = v34;
  v50[13] = v33;
  v50[14] = v35;
  v50[15] = 1.0;
  v47 = gm::operator*<double,4,4,4>((double *)(a1 + 312), a3, v50);
  *(double *)(a1 + 440) = a7;
  LOWORD(v47) = *a5;
  LOWORD(v48) = a5[1];
  *(double *)(a1 + 448) = (double)*(unint64_t *)&v47 / (double)v48;
  *(_DWORD *)(a1 + 456) = *(_DWORD *)a5;
  *(_DWORD *)(a1 + 460) = a6;
  return a1;
}

void gdc::Tiled::setZBoundsInMeters(unsigned __int8 *a1, double *a2, double *a3)
{
  int v6;
  double v7;
  uint64_t v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double *v14;
  double v15;
  double v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  double v21;
  double v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  double v26;
  double v27;
  __int128 v28;
  __int128 v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  double v38;
  double v39;
  double v40;
  double v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  NSObject *v45;
  int v46;
  int v47;
  int v48;
  double v49;
  double v50;
  _OWORD v51[8];
  double v52;
  double v53;
  double v54;
  double v55;
  double v56;
  double v57;
  double v58;
  uint64_t v59;
  double v60;
  double v61;
  double v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  _BYTE buf[96];
  __int128 v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;

  v72 = *MEMORY[0x1E0C80C00];
  v6 = 1 << a1[1];
  v7 = 1.0 / (double)v6;
  v8 = *((int *)a1 + 2);
  v9 = (double)(v6 + ~*((_DWORD *)a1 + 1));
  v10 = *a2;
  v11 = *a3;
  v12 = v7 * (double)v8;
  v13 = v7 * v9;
  *((double *)a1 + 54) = *a2;
  *((double *)a1 + 55) = v11;
  v14 = (double *)(a1 + 304);
  *((double *)a1 + 38) = v7;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 328) = 0u;
  *((double *)a1 + 43) = v7;
  *((_OWORD *)a1 + 22) = 0u;
  *((_OWORD *)a1 + 23) = 0u;
  *((double *)a1 + 48) = v7;
  *((_QWORD *)a1 + 49) = 0;
  *((double *)a1 + 50) = v12;
  *((double *)a1 + 51) = v7 * v9;
  *((_OWORD *)a1 + 26) = xmmword_19FFB33A0;
  *((double *)a1 + 16) = v12;
  *((double *)a1 + 17) = v7 * v9;
  *((double *)a1 + 18) = v10 * 0.0000000249532021;
  *((double *)a1 + 19) = v12 + v7;
  *((double *)a1 + 20) = v7 * v9 + v7;
  *((double *)a1 + 21) = v11 * 0.0000000249532021;
  v15 = v7 + (double)v8 * v7;
  v16 = v7 + v9 * v7;
  if (*a1 == 255)
  {
    v52 = v12;
    v53 = v13;
    v54 = v15;
    v55 = v16;
    gdc::GlobeTileUtils::boundsFromMercatorRect((uint64_t)buf, &v52, v10, v11);
    v22 = *(double *)&buf[40];
    v21 = *(double *)&buf[32];
    *((_QWORD *)a1 + 7) = *(_QWORD *)&buf[32];
    *((double *)a1 + 8) = v22;
    v23 = *(_QWORD *)buf;
    v24 = *(_QWORD *)&buf[8];
    *((_QWORD *)a1 + 3) = *(_QWORD *)buf;
    *((_QWORD *)a1 + 4) = v24;
    v25 = *(_OWORD *)&buf[16];
    *(_OWORD *)(a1 + 40) = *(_OWORD *)&buf[16];
    v27 = *(double *)&buf[56];
    v26 = *(double *)&buf[48];
    *((_QWORD *)a1 + 9) = *(_QWORD *)&buf[48];
    *((double *)a1 + 10) = v27;
    v28 = *(_OWORD *)&buf[64];
    *(_OWORD *)(a1 + 88) = *(_OWORD *)&buf[64];
    v29 = *(_OWORD *)&buf[80];
    *(_OWORD *)(a1 + 104) = *(_OWORD *)&buf[80];
    v30 = *(double *)&v69;
    *((_QWORD *)a1 + 15) = v69;
    memset(&buf[8], 0, 88);
    v69 = *((_OWORD *)a1 + 5);
    v70 = *((_QWORD *)a1 + 12);
    v71 = 0x3FF0000000000000;
    *(double *)buf = *(double *)&v29 - v27;
    *(double *)&buf[40] = *((double *)&v29 + 1) - *(double *)&v28;
    *(double *)&buf[80] = v30 - *((double *)&v28 + 1);
    v31 = v21 + v21;
    v32 = (v21 + v21) * v21;
    v33 = (v22 + v22) * v22;
    v34 = v21 * (*((double *)&v25 + 1) + *((double *)&v25 + 1));
    v35 = v26 * (v22 + v22);
    v36 = v22 * (*((double *)&v25 + 1) + *((double *)&v25 + 1));
    v37 = v26 * v31;
    v38 = v26 * v31 + v36;
    v39 = 1.0 - (*((double *)&v25 + 1) + *((double *)&v25 + 1)) * *((double *)&v25 + 1);
    v40 = v22 * v31;
    v41 = v26 * (*((double *)&v25 + 1) + *((double *)&v25 + 1));
    v52 = 1.0 - (v32 + v33);
    v53 = v35 + v34;
    v56 = v34 - v35;
    v57 = v39 - v33;
    v60 = v38;
    v61 = v40 - v41;
    v54 = v36 - v37;
    v58 = v41 + v40;
    v62 = v39 - v32;
    v55 = 0.0;
    v59 = 0;
    v63 = 0;
    v64 = v23;
    v65 = v24;
    v66 = v25;
    v67 = 0x3FF0000000000000;
    gm::operator*<double,4,4,4>((double *)v51, &v52, (double *)buf);
    v42 = v51[1];
    *((_OWORD *)a1 + 11) = v51[0];
    *((_OWORD *)a1 + 12) = v42;
    v43 = v51[3];
    *((_OWORD *)a1 + 13) = v51[2];
    *((_OWORD *)a1 + 14) = v43;
    v44 = v51[5];
    *((_OWORD *)a1 + 15) = v51[4];
    *((_OWORD *)a1 + 16) = v44;
    v17 = v51[7];
    *((_OWORD *)a1 + 17) = v51[6];
  }
  else
  {
    v52 = v12;
    v53 = v13;
    v54 = v15;
    v55 = v16;
    gdc::GlobeTileUtils::boundsFromMercatorRect((uint64_t)buf, &v52, v10, v11);
    v17 = xmmword_19FFB33A0;
    v18 = *(_OWORD *)&buf[48];
    *(_OWORD *)(a1 + 56) = *(_OWORD *)&buf[32];
    v19 = *(_OWORD *)&buf[16];
    *(_OWORD *)(a1 + 24) = *(_OWORD *)buf;
    *(_OWORD *)(a1 + 40) = v19;
    *(_OWORD *)(a1 + 72) = v18;
    v20 = *(_OWORD *)&buf[80];
    *(_OWORD *)(a1 + 88) = *(_OWORD *)&buf[64];
    *(_OWORD *)(a1 + 104) = v20;
    *((_QWORD *)a1 + 15) = v69;
    *((_QWORD *)a1 + 22) = 0x3FF0000000000000;
    *(_OWORD *)(a1 + 184) = 0u;
    *(_OWORD *)(a1 + 200) = 0u;
    *((_QWORD *)a1 + 27) = 0x3FF0000000000000;
    *((_OWORD *)a1 + 14) = 0u;
    *((_OWORD *)a1 + 15) = 0u;
    *((_QWORD *)a1 + 32) = 0x3FF0000000000000;
    *((_QWORD *)a1 + 33) = 0;
    *((_QWORD *)a1 + 34) = 0;
    *((_QWORD *)a1 + 35) = 0;
  }
  *((_OWORD *)a1 + 18) = v17;
  if (gm::Matrix<double,4,4>::determinant<int,void>(v14) == 0.0)
  {
    if (GEOGetGeoDisplayCoreDefaultLog::onceToken != -1)
      dispatch_once(&GEOGetGeoDisplayCoreDefaultLog::onceToken, &__block_literal_global_42051);
    v45 = GEOGetGeoDisplayCoreDefaultLog::log;
    if (os_log_type_enabled((os_log_t)GEOGetGeoDisplayCoreDefaultLog::log, OS_LOG_TYPE_ERROR))
    {
      v47 = *((_DWORD *)a1 + 1);
      v46 = *((_DWORD *)a1 + 2);
      v48 = a1[1];
      v49 = *a2;
      v50 = *a3;
      *(_DWORD *)buf = 67110914;
      *(_DWORD *)&buf[4] = v46;
      *(_WORD *)&buf[8] = 1024;
      *(_DWORD *)&buf[10] = v47;
      *(_WORD *)&buf[14] = 1024;
      *(_DWORD *)&buf[16] = v48;
      *(_WORD *)&buf[20] = 2048;
      *(double *)&buf[22] = v49;
      *(_WORD *)&buf[30] = 2048;
      *(double *)&buf[32] = v50;
      *(_WORD *)&buf[40] = 2080;
      *(_QWORD *)&buf[42] = "_transformData.mercatorMatrix.determinant() != 0";
      *(_WORD *)&buf[50] = 2080;
      *(_QWORD *)&buf[52] = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoDisplayCore/GeoDisplayCore/Tiled.cpp";
      *(_WORD *)&buf[60] = 1024;
      *(_DWORD *)&buf[62] = 89;
      _os_log_impl(&dword_19F029000, v45, OS_LOG_TYPE_ERROR, "Tile (x:%d y:%d level:%d) does not have an invertable matrix with zbounds min:%f max:%f: Assertion with expression - %s : Failed in file - %s line - %i", buf, 0x42u);
    }
  }
}

void sub_19F120D4C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19F120E80(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void VKCameraMakeGroundPoint(const VKCameraState *a1, CGPoint a2, double a3, double *a4)
{
  double y;
  double x;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  char v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;

  y = a2.y;
  x = a2.x;
  v8 = a4[3];
  v9 = a4[4];
  v11 = a4[5];
  v10 = a4[6];
  v12 = a4[7];
  v13 = tan(a4[8] * 0.5);
  v14 = 0;
  v15 = a4[2];
  if (v15 > 0.0)
  {
    v16 = v11 * (v13 * v12 + v13 * v12);
    v17 = v9 * -2.0 * (v13 * v12);
    v18 = v17 * v10;
    v19 = v13 * v12 + v17 * v9 - v16 * v11;
    v20 = -(v17 * v8 - v16 * v10);
    v21 = v18 + v16 * v8;
    v22 = v11 * -2.0 * v13;
    v23 = (v8 + v8) * v13;
    v24 = v23 * v10;
    v25 = v23 * v9 + v22 * v10;
    v26 = v13 + v22 * v11 - v23 * v8;
    v27 = x * 2.0 + -1.0;
    v28 = y * 2.0 + -1.0;
    v29 = v25 * v28 - (v11 * (v8 + v8) - v10 * (v9 * -2.0)) + v19 * v27;
    v30 = v9 * -2.0 * v11 + v10 * (v8 + v8) + v20 * v27 + v26 * v28;
    v31 = -(-(v24 - v22 * v9) * v28 - ((v8 + v8) * v8 + -1.0 - v9 * -2.0 * v9) - v21 * v27);
    v32 = 1.0 / sqrt(v30 * v30 + v31 * v31 + v29 * v29);
    v33 = v32 * v31;
    if (v33 < 0.0)
    {
      v34 = v32 * v30;
      v35 = v32 * v29;
      v36 = -v15 / v33;
      v37 = a4[1] + v34 * v36;
      a1->var0._translation._e[1] = *a4 + v35 * v36;
      a1->var0._translation._e[2] = v37;
      a1->var0._rotation._imaginary._e[0] = v15 + v36 * v33;
      v14 = 1;
    }
  }
  LOBYTE(a1->var0._translation._e[0]) = v14;
}

double gdc::GlobeTileUtils::boundsFromMercatorRect(uint64_t a1, double *a2, double a3, double a4)
{
  double v5;
  double v6;
  long double v7;
  long double v8;
  double v9;
  long double v10;
  double v11;
  __double2 v12;
  double v13;
  __double2 v14;
  double v15;
  long double v16;
  long double v17;
  double v18;
  double v19;
  __double2 v20;
  long double v21;
  __double2 v22;
  double sinval;
  double v24;
  double v25;
  __double2 v26;
  unint64_t v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  long double v38;
  long double v39;
  long double v40;
  float v41;
  unint64_t v42;
  double v43;
  double v44;
  uint64_t v45;
  long double v46;
  long double v47;
  __double2 v48;
  unint64_t v49;
  double v50;
  double v51;
  double v52;
  double v53;
  long double v54;
  long double v55;
  __double2 v56;
  double v57;
  double v58;
  double v59;
  double v60;
  double v61;
  double v62;
  double v63;
  double v64;
  double v65;
  double v66;
  double v67;
  double v68;
  double v69;
  double v70;
  double v71;
  double v72;
  double v73;
  double v74;
  double v75;
  double v76;
  double v77;
  double v78;
  double v79;
  double result;
  long double v81;
  long double v82;
  double v83;
  double v84;
  double v85;
  double v86;
  double v87;
  double v88;
  double v89;
  double v90;
  double v93;
  double v94;
  double v95;
  uint64_t v96;
  double v97;

  v5 = a2[1];
  v6 = a2[3];
  v83 = a2[2] - *a2;
  v84 = *a2;
  v89 = v6 - v5;
  v90 = v5;
  v7 = (*a2 + v83 * 0.5) * 6.28318531;
  v8 = exp((v5 + (v6 - v5) * 0.5) * 6.28318531 + -3.14159265);
  v9 = atan(v8) * 2.0 + -1.57079633;
  v10 = fmod(v7, 6.28318531);
  v11 = fmod(v10 + 6.28318531, 6.28318531) + -3.14159265;
  v12 = __sincos_stret(v9);
  v13 = 6378137.0 / sqrt(v12.__sinval * v12.__sinval * -0.00669437999 + 1.0);
  v14 = __sincos_stret(v11);
  v15 = v13 * v12.__cosval * v14.__cosval;
  v16 = v13 * v12.__cosval * v14.__sinval;
  v17 = v12.__sinval * 0.99330562 * v13;
  v18 = sqrt(v15 * v15 + v16 * v16);
  v19 = atan2(v17, v18 * 0.996647189);
  v93 = atan2(v16, v15);
  v20 = __sincos_stret(v19);
  v21 = atan2(v17 + v20.__sinval * v20.__sinval * 42841.3115 * v20.__sinval, v18 + v20.__cosval * v20.__cosval * -42697.6727 * v20.__cosval);
  v22 = __sincos_stret(v21 * 0.5);
  sinval = v22.__sinval;
  v24 = (sinval + sinval) * v22.__cosval;
  v25 = 1.0 - (sinval + sinval) * sinval;
  v26 = __sincos_stret(v93 * 0.5);
  v27 = 0;
  v28 = v26.__sinval / sqrt(v24 * v24 + v25 * v25);
  v29 = v28 * v24;
  v30 = v28 * v25;
  v31 = -(v26.__cosval * v22.__sinval);
  v32 = -(v30 * v22.__sinval - v29 * v22.__cosval);
  v33 = v29 * v22.__sinval + v30 * v22.__cosval;
  v34 = (v31 - v33 + v32 + v22.__cosval * v26.__cosval) * 0.5;
  v35 = (v33 + v22.__cosval * v26.__cosval - v26.__cosval * v22.__sinval - v32) * 0.5;
  v36 = (v33 - v31 + v32 + v22.__cosval * v26.__cosval) * 0.5;
  v37 = (v22.__cosval * v26.__cosval - (v32 - v26.__cosval * v22.__sinval + v33)) * 0.5;
  v38 = -(v17 * v35 - v16 * v36) - (v17 * v35 - v16 * v36);
  v39 = -(v15 * v36 - v17 * v34) - (v15 * v36 - v17 * v34);
  v40 = -(v16 * v34 - v15 * v35) - (v16 * v34 - v15 * v35);
  v82 = v16;
  v87 = -(v15 + v38 * v37 + v39 * v36 - v40 * v35);
  v88 = v16 - v38 * v36 + v39 * v37 + v40 * v34;
  v81 = v17;
  v85 = v37;
  v86 = -(v17 + v38 * v35 + v40 * v37 - v39 * v34);
  v41 = 0.5;
  v94 = -1.79769313e308;
  *(double *)&v96 = 1.79769313e308;
  *(double *)&v42 = -1.79769313e308;
  v43 = -1.79769313e308;
  v44 = 1.79769313e308;
  *(double *)&v45 = 1.79769313e308;
  do
  {
    v46 = fmod((v84 + v83 * (float)((float)v27 * v41)) * 6.28318531, 6.28318531);
    v47 = fmod(v46 + 6.28318531, 6.28318531);
    v48 = __sincos_stret(v47 + -3.14159265);
    v49 = 0;
    v50 = *(double *)&v42;
    v51 = *(double *)&v45;
    v52 = v94;
    v53 = *(double *)&v96;
    do
    {
      v95 = v51;
      v97 = v50;
      v54 = exp((v90 + v89 * (float)((float)v49 * 0.5)) * 6.28318531 + -3.14159265);
      v55 = atan(v54);
      v56 = __sincos_stret(v55 * 2.0 + -1.57079633);
      v57 = 6378137.0 / sqrt(v56.__sinval * v56.__sinval * -0.00669437999 + 1.0);
      v58 = (v57 + a3) * v56.__cosval;
      v59 = v58 * v48.__cosval;
      v60 = v58 * v48.__sinval;
      v61 = v57 * 0.99330562;
      v62 = (v57 + a4) * v56.__cosval;
      v63 = (v57 * 0.99330562 + a3) * v56.__sinval;
      v64 = v62 * v48.__cosval;
      v65 = v62 * v48.__sinval;
      v66 = (v61 + a4) * v56.__sinval;
      v67 = -(v63 * v35 - v60 * v36) - (v63 * v35 - v60 * v36);
      v68 = -(v59 * v36 - v63 * v34) - (v59 * v36 - v63 * v34);
      v69 = -(v60 * v34 - v59 * v35) - (v60 * v34 - v59 * v35);
      v70 = v63 + v86 + v67 * v35 + v69 * v85;
      v71 = v59 + v87 + v67 * v85 + v68 * v36 - v69 * v35;
      v72 = v60 - v88 + v68 * v85 + v69 * v34 - v67 * v36;
      v73 = -(v66 * v35 - v65 * v36) - (v66 * v35 - v65 * v36);
      v74 = -(v64 * v36 - v66 * v34) - (v64 * v36 - v66 * v34);
      v75 = -(v65 * v34 - v64 * v35) - (v65 * v34 - v64 * v35);
      v76 = v70 - v68 * v34;
      v77 = v64 + v87 + v73 * v85 + v74 * v36 - v75 * v35;
      v78 = v65 - v88 + v74 * v85 + v75 * v34 - v73 * v36;
      v79 = v66 + v86 + v73 * v35 + v75 * v85 - v74 * v34;
      v53 = fmin(v77, fmin(v71, v53));
      v43 = fmax(fmax(v43, v71), v77);
      v44 = fmin(v78, fmin(v72, v44));
      v52 = fmax(fmax(v52, v72), v78);
      v51 = fmin(v79, fmin(v76, v95));
      v50 = fmax(fmax(v97, v76), v79);
      ++v49;
    }
    while (v49 != 3);
    v94 = v52;
    *(double *)&v96 = v53;
    *(double *)&v45 = v51;
    *(double *)&v42 = v50;
    ++v27;
    v41 = 0.5;
  }
  while (v27 != 3);
  *(double *)a1 = v15;
  *(long double *)(a1 + 8) = v82;
  *(long double *)(a1 + 16) = v81;
  *(double *)(a1 + 24) = v34;
  *(double *)(a1 + 32) = v35;
  *(double *)(a1 + 40) = v36;
  *(double *)(a1 + 48) = v85;
  *(double *)(a1 + 56) = *(double *)&v96;
  *(double *)(a1 + 64) = v44;
  *(double *)(a1 + 72) = *(double *)&v45;
  result = v94;
  *(double *)(a1 + 80) = v43;
  *(double *)(a1 + 88) = v94;
  *(double *)(a1 + 96) = *(double *)&v42;
  return result;
}

double *gm::quaternionFromRotationMatrix<double>(double *result, double *a2)
{
  double v2;
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  BOOL v11;
  BOOL v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;

  v2 = *a2;
  v3 = a2[4];
  v4 = v3 + *a2;
  v5 = a2[8];
  if (v4 + v5 <= 0.0)
  {
    if (v2 > v3)
    {
      v11 = v2 == v5;
      v12 = v2 < v5;
    }
    else
    {
      v11 = 1;
      v12 = 0;
    }
    if (v12 || v11)
    {
      if (v3 <= v5)
      {
        v18 = sqrt(v5 + 1.0 - v4);
        v19 = 1.0 / (v18 + v18);
        v7 = (a2[2] + a2[6]) * v19;
        v8 = (a2[5] + a2[7]) * v19;
        v9 = v18 * 0.5;
        v10 = (a2[1] - a2[3]) * v19;
      }
      else
      {
        v13 = sqrt(v3 + 1.0 - (v2 + v5));
        v14 = 1.0 / (v13 + v13);
        v8 = v13 * 0.5;
        v7 = (a2[1] + a2[3]) * v14;
        v9 = (a2[5] + a2[7]) * v14;
        v10 = (a2[6] - a2[2]) * v14;
      }
    }
    else
    {
      v15 = sqrt(v2 + 1.0 - (v3 + v5));
      v16 = v15 + v15;
      v7 = v15 * 0.5;
      v17 = 1.0 / v16;
      v8 = (a2[1] + a2[3]) * (1.0 / v16);
      v9 = (a2[2] + a2[6]) * v17;
      v10 = (a2[5] - a2[7]) * v17;
    }
  }
  else
  {
    v6 = 0.5 / sqrt(v4 + v5 + 1.0);
    v7 = (a2[5] - a2[7]) * v6;
    v8 = (a2[6] - a2[2]) * v6;
    v9 = (a2[1] - a2[3]) * v6;
    v10 = 0.25 / v6;
  }
  *result = v7;
  result[1] = v8;
  result[2] = v9;
  result[3] = v10;
  return result;
}

void sub_19F1216D8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19F121770(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void gdc::LayerDataSource::populateLoadMetadataListFromMap(uint64_t a1, uint64_t a2, void **a3)
{
  uint64_t v4;
  _QWORD *v5;
  char *v6;
  __int128 v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  char *v16;
  char *v17;
  char *v18;
  __int128 v19;
  char *v20;
  __int128 v22;
  uint64_t v23;

  if (a1 != a2)
  {
    v4 = a1;
    do
    {
      v5 = *(_QWORD **)(v4 + 24);
      if (v5)
      {
        v6 = (char *)a3[1];
        do
        {
          v9 = v5[14];
          v22 = *(_OWORD *)(v9 + 120);
          v23 = *(_QWORD *)(v9 + 136);
          v10 = (unint64_t)a3[2];
          if ((unint64_t)v6 < v10)
          {
            v7 = *(_OWORD *)(v9 + 120);
            *((_QWORD *)v6 + 2) = *(_QWORD *)(v9 + 136);
            *(_OWORD *)v6 = v7;
            v8 = v6 + 24;
          }
          else
          {
            v11 = (char *)*a3;
            v12 = 0xAAAAAAAAAAAAAAABLL * ((v6 - (_BYTE *)*a3) >> 3);
            v13 = v12 + 1;
            if (v12 + 1 > 0xAAAAAAAAAAAAAAALL)
              abort();
            v14 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v10 - (_QWORD)v11) >> 3);
            if (2 * v14 > v13)
              v13 = 2 * v14;
            if (v14 >= 0x555555555555555)
              v15 = 0xAAAAAAAAAAAAAAALL;
            else
              v15 = v13;
            if (v15)
            {
              if (v15 > 0xAAAAAAAAAAAAAAALL)
                std::__throw_bad_array_new_length[abi:nn180100]();
              v16 = (char *)operator new(24 * v15);
            }
            else
            {
              v16 = 0;
            }
            v17 = &v16[24 * v12];
            *(_OWORD *)v17 = v22;
            *((_QWORD *)v17 + 2) = v23;
            v18 = v17;
            if (v6 != v11)
            {
              do
              {
                v19 = *(_OWORD *)(v6 - 24);
                *((_QWORD *)v18 - 1) = *((_QWORD *)v6 - 1);
                *(_OWORD *)(v18 - 24) = v19;
                v18 -= 24;
                v6 -= 24;
              }
              while (v6 != v11);
              v6 = (char *)*a3;
            }
            v20 = &v16[24 * v15];
            v8 = v17 + 24;
            *a3 = v18;
            a3[1] = v17 + 24;
            a3[2] = v20;
            if (v6)
              operator delete(v6);
          }
          a3[1] = v8;
          v5 = (_QWORD *)*v5;
          v6 = v8;
        }
        while (v5);
      }
      v4 += 48;
    }
    while (v4 != a2);
  }
}

void sub_19F121A70(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19F121B7C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19F122B10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_19F122C38(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void md::FontGlyphCache::doPopulateQuads(uint64_t a1, uint64_t *a2, int a3, uint64_t **a4, uint64_t a5, int a6, float a7, float a8, float a9, double a10, float a11)
{
  unint64_t *v11;
  unsigned __int8 v13;
  int k;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t i;
  std::__shared_weak_count *v39;
  unint64_t *p_shared_owners;
  unint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  uint64_t j;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  unint64_t v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  unint64_t v68;
  unint64_t v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  std::__shared_weak_count *v73;
  unint64_t *v74;
  unint64_t v75;
  uint64_t *v76;
  unsigned int v77;
  unint64_t v78;
  uint64_t v79;
  double v80;
  unint64_t v81;
  CGFont *v82;
  int UnitsPerEm;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  float v87;
  float v88;
  float *v89;
  double *v90;
  float v91;
  float v92;
  float *v93;
  uint64_t v94;
  unint64_t v95;
  uint64_t v96;
  unint64_t *v97;
  unint64_t v98;
  uint64_t *v99;
  uint64_t *v100;
  uint64_t *v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t *v104;
  unint64_t v105;
  unint64_t v106;
  std::__shared_weak_count *v107;
  unint64_t *v108;
  unint64_t v109;
  int v110;
  unsigned __int8 v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  __n128 v116;
  unint64_t *v117;
  unint64_t v118;
  uint64_t *v119;
  uint64_t v120;
  unint64_t v121;
  unint64_t v122;
  unint64_t v123;
  uint64_t v124;
  unint64_t v125;
  unint64_t v126;
  unint64_t v127;
  uint8x8_t v128;
  float **v129;
  float *v130;
  unint64_t v131;
  uint64_t v132;
  uint64_t v133;
  float v134;
  _BOOL8 v135;
  unint64_t v136;
  unint64_t v137;
  size_t prime;
  uint64_t *v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  _QWORD *v143;
  size_t v144;
  size_t v145;
  size_t v146;
  _QWORD *m;
  size_t v148;
  uint64_t v149;
  unint64_t v150;
  uint64_t v151;
  _QWORD *v152;
  uint64_t v153;
  size_t v154;
  uint64_t *v155;
  unint64_t v156;
  _QWORD *v157;
  unint64_t v158;
  unint64_t v159;
  unint64_t v160;
  unint64_t v161;
  unint64_t v162;
  _QWORD *v163;
  _QWORD *v164;
  unint64_t v165;
  uint64_t v166;
  _QWORD *v167;
  float v168;
  float v169;
  _BOOL8 v170;
  unint64_t v171;
  unint64_t v172;
  size_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  _QWORD *v177;
  size_t v178;
  size_t v179;
  size_t v180;
  _QWORD *n;
  size_t v182;
  uint64_t v183;
  uint64_t v184;
  unint64_t v185;
  uint8x8_t v186;
  uint64_t v187;
  _QWORD *v188;
  uint64_t v189;
  size_t v190;
  uint64_t v191;
  _QWORD *v192;
  unint64_t v193;
  const void *v194;
  uint64_t v195;
  float32x2_t v196;
  unint64_t *v197;
  unint64_t v198;
  std::__shared_weak_count *v199;
  unint64_t *v200;
  unint64_t v201;
  float *v202;
  double *v203;
  float v204;
  float v205;
  std::__shared_weak_count *v206;
  unint64_t *v207;
  unint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  geo::read_write_lock *v212;
  const char *v213;
  malloc_zone_t *zone;
  uint64_t v215;
  _QWORD *v217;
  uint64_t *v218;
  int v219;
  unsigned int v220;
  unint64_t *v221;
  uint64_t *v222;
  double v223;
  int v224;
  int v225;
  _QWORD *v226;
  unsigned int v227;
  unint64_t v228;
  unint64_t *v229;
  CGFont *cf;
  CGRect bboxes;
  _BYTE v232[24];
  std::__shared_weak_count *v233;
  CGGlyph glyphs;
  unsigned __int16 v235;

  v11 = (unint64_t *)a2;
  if (a7 <= 0.0 || a8 <= 0.0)
  {
    v37 = *a2;
    for (i = a2[1]; ; i -= 88)
    {
      if (i == v37)
      {
LABEL_45:
        v11[1] = v37;
        return;
      }
      v39 = *(std::__shared_weak_count **)(i - 64);
      if (!v39)
        goto LABEL_24;
      p_shared_owners = (unint64_t *)&v39->__shared_owners_;
      do
        v41 = __ldaxr(p_shared_owners);
      while (__stlxr(v41 - 1, p_shared_owners));
      if (!v41)
      {
        ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
        std::__shared_weak_count::__release_weak(v39);
        v42 = *(std::__shared_weak_count **)(i - 80);
        if (!v42)
          continue;
      }
      else
      {
LABEL_24:
        v42 = *(std::__shared_weak_count **)(i - 80);
        if (!v42)
          continue;
      }
      v43 = (unint64_t *)&v42->__shared_owners_;
      do
        v44 = __ldaxr(v43);
      while (__stlxr(v44 - 1, v43));
      if (!v44)
      {
        ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
        std::__shared_weak_count::__release_weak(v42);
      }
    }
  }
  v13 = atomic_load((unsigned __int8 *)*a4 + 125);
  if ((v13 & 1) == 0 || (*a4)[7] == (*a4)[8])
  {
    v37 = *a2;
    for (j = a2[1]; ; j -= 88)
    {
      if (j == v37)
        goto LABEL_45;
      v46 = *(std::__shared_weak_count **)(j - 64);
      if (!v46)
        goto LABEL_38;
      v47 = (unint64_t *)&v46->__shared_owners_;
      do
        v48 = __ldaxr(v47);
      while (__stlxr(v48 - 1, v47));
      if (!v48)
      {
        ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
        std::__shared_weak_count::__release_weak(v46);
        v49 = *(std::__shared_weak_count **)(j - 80);
        if (!v49)
          continue;
      }
      else
      {
LABEL_38:
        v49 = *(std::__shared_weak_count **)(j - 80);
        if (!v49)
          continue;
      }
      v50 = (unint64_t *)&v49->__shared_owners_;
      do
        v51 = __ldaxr(v50);
      while (__stlxr(v51 - 1, v50));
      if (!v51)
      {
        ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
        std::__shared_weak_count::__release_weak(v49);
      }
    }
  }
  k = a3;
  v21 = **a4;
  v224 = *(unsigned __int8 *)(v21 + 132);
  v225 = *(unsigned __int8 *)(v21 + 131);
  v222 = *a4;
  v22 = 0xAAAAAAAAAAAAAAABLL * ((v222[8] - v222[7]) >> 3);
  v23 = *a2;
  v24 = a2[1];
  v25 = 0x2E8BA2E8BA2E8BA3 * ((v24 - *a2) >> 3);
  v26 = v22 - v25;
  if (v22 <= v25)
  {
    if (v22 < v25)
    {
      v52 = v23 - 0x5555555555555538 * ((v222[8] - v222[7]) >> 3);
      while (v24 != v52)
      {
        v53 = *(std::__shared_weak_count **)(v24 - 64);
        if (v53)
        {
          v54 = (unint64_t *)&v53->__shared_owners_;
          do
            v55 = __ldaxr(v54);
          while (__stlxr(v55 - 1, v54));
          if (!v55)
          {
            ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
            std::__shared_weak_count::__release_weak(v53);
          }
        }
        v56 = *(std::__shared_weak_count **)(v24 - 80);
        if (v56)
        {
          v57 = (unint64_t *)&v56->__shared_owners_;
          do
            v58 = __ldaxr(v57);
          while (__stlxr(v58 - 1, v57));
          if (!v58)
          {
            ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
            std::__shared_weak_count::__release_weak(v56);
          }
        }
        v24 -= 88;
      }
      v11[1] = v52;
    }
  }
  else
  {
    v27 = a2[2];
    if (0x2E8BA2E8BA2E8BA3 * ((v27 - v24) >> 3) >= v26)
    {
      v59 = v24 + 88 * v26;
      v60 = -8 * ((v24 - *a2) >> 3) - 0x5555555555555538 * ((v222[8] - v222[7]) >> 3);
      do
      {
        if (v24)
        {
          *(_OWORD *)(v24 + 48) = 0uLL;
          *(_OWORD *)(v24 + 64) = 0uLL;
          *(_QWORD *)(v24 + 80) = 0;
          *(_OWORD *)(v24 + 16) = 0uLL;
          *(_OWORD *)(v24 + 32) = 0uLL;
          *(_OWORD *)v24 = 0uLL;
          *(_DWORD *)(v24 + 72) = 1065353216;
          *(_QWORD *)(v24 + 76) = 0;
          *(_BYTE *)(v24 + 84) = 0;
        }
        v24 += 88;
        v60 -= 88;
      }
      while (v60);
      a2[1] = v59;
    }
    else
    {
      if (v22 > 0x2E8BA2E8BA2E8BALL)
        abort();
      v29 = 0x2E8BA2E8BA2E8BA3 * ((v27 - v23) >> 3);
      v30 = 2 * v29;
      if (2 * v29 <= v22)
        v30 = 0xAAAAAAAAAAAAAAABLL * ((v222[8] - v222[7]) >> 3);
      if (v29 >= 0x1745D1745D1745DLL)
        v31 = 0x2E8BA2E8BA2E8BALL;
      else
        v31 = v30;
      v32 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2[3] + 16))(a2[3], 88 * v31, 8);
      v33 = v32 + 88 * v25;
      v34 = v32 + 88 * v22;
      v35 = 88 * v22 - 88 * v25;
      v36 = v33;
      do
      {
        if (v36)
        {
          *(_OWORD *)(v36 + 48) = 0uLL;
          *(_OWORD *)(v36 + 64) = 0uLL;
          *(_QWORD *)(v36 + 80) = 0;
          *(_OWORD *)(v36 + 16) = 0uLL;
          *(_OWORD *)(v36 + 32) = 0uLL;
          *(_OWORD *)v36 = 0uLL;
          *(_DWORD *)(v36 + 72) = 1065353216;
          *(_QWORD *)(v36 + 76) = 0;
          *(_BYTE *)(v36 + 84) = 0;
        }
        v36 += 88;
        v35 -= 88;
      }
      while (v35);
      v61 = v32 + 88 * v31;
      v62 = *v11;
      v63 = v11[1];
      if (v63 == *v11)
      {
        *v11 = v33;
        v11[1] = v34;
        v69 = v11[2];
        v11[2] = v61;
        k = a3;
      }
      else
      {
        do
        {
          v64 = *(_OWORD *)(v63 - 88);
          v63 -= 88;
          *(_OWORD *)(v33 - 88) = v64;
          v33 -= 88;
          *(_QWORD *)v63 = 0;
          *(_QWORD *)(v63 + 8) = 0;
          *(_OWORD *)(v33 + 16) = *(_OWORD *)(v63 + 16);
          *(_QWORD *)(v63 + 16) = 0;
          *(_QWORD *)(v63 + 24) = 0;
          v65 = *(_OWORD *)(v63 + 32);
          v66 = *(_OWORD *)(v63 + 48);
          v67 = *(_OWORD *)(v63 + 64);
          *(_QWORD *)(v33 + 77) = *(_QWORD *)(v63 + 77);
          *(_OWORD *)(v33 + 48) = v66;
          *(_OWORD *)(v33 + 64) = v67;
          *(_OWORD *)(v33 + 32) = v65;
        }
        while (v63 != v62);
        v63 = *v11;
        v68 = v11[1];
        *v11 = v33;
        v11[1] = v34;
        v69 = v11[2];
        v11[2] = v61;
        for (k = a3; v68 != v63; v68 -= 88)
        {
          v70 = *(std::__shared_weak_count **)(v68 - 64);
          if (v70)
          {
            v71 = (unint64_t *)&v70->__shared_owners_;
            do
              v72 = __ldaxr(v71);
            while (__stlxr(v72 - 1, v71));
            if (!v72)
            {
              ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
              std::__shared_weak_count::__release_weak(v70);
            }
          }
          v73 = *(std::__shared_weak_count **)(v68 - 80);
          if (v73)
          {
            v74 = (unint64_t *)&v73->__shared_owners_;
            do
              v75 = __ldaxr(v74);
            while (__stlxr(v75 - 1, v74));
            if (!v75)
            {
              ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
              std::__shared_weak_count::__release_weak(v73);
            }
          }
        }
      }
      if (v63)
        (*(void (**)(unint64_t, unint64_t, unint64_t))(*(_QWORD *)v11[3] + 40))(v11[3], v63, v69 - v63);
    }
  }
  v235 = 0;
  v76 = v222;
  if (v222[8] != v222[7])
  {
    v77 = 0;
    v78 = 0;
    v79 = v222[7];
    v80 = a11;
    v226 = (_QWORD *)(a1 + 32);
    v217 = (_QWORD *)(a1 + 112);
    v218 = (uint64_t *)(a1 + 56);
    v221 = v11;
    v219 = k;
    v220 = a5;
LABEL_89:
    v82 = *(CGFont **)(v79 + 24 * v78 + 8);
    LOWORD(bboxes.origin.x) = 32;
    CGFontGetGlyphsForUnichars();
    cf = v82;
    UnitsPerEm = CGFontGetUnitsPerEm(v82);
    v84 = v76[8];
    v79 = v76[7];
    v81 = 0xAAAAAAAAAAAAAAABLL * ((v84 - v79) >> 3);
    if (v78 >= v81)
      goto LABEL_88;
    v223 = 1.0 / (float)((float)UnitsPerEm * (float)(1.0 / a8));
    v85 = v76[7];
    while (1)
    {
      v79 = v85;
      v86 = v85 + 24 * v78;
      if (*(CGFont **)(v86 + 8) != cf)
      {
        v81 = 0xAAAAAAAAAAAAAAABLL * ((v84 - v85) >> 3);
LABEL_88:
        if (v78 >= v81)
          return;
        goto LABEL_89;
      }
      if (!v225)
        break;
      if (v78)
        goto LABEL_100;
LABEL_101:
      v87 = (float)v77 * a9;
      v228 = *v11;
      v229 = (unint64_t *)(*v11 + 88 * v78);
      if (*(_BYTE *)(v85 + 24 * v78 + 16))
        v88 = a7 * 0.83;
      else
        v88 = a7;
      if ((a5 & 1) != 0 || !*v229 || !*(_BYTE *)(*v229 + 61))
      {
        glyphs = 0;
        glyphs = *(_WORD *)v86;
        *(_DWORD *)&v232[20] = 0;
        v233 = 0;
        *(_QWORD *)v232 = cf;
        *(float *)&v232[8] = a8;
        *(_QWORD *)&v232[12] = glyphs;
        v93 = std::__hash_table<std::__hash_value_type<GlyphCacheKey,std::__list_iterator<md::FontGlyphCache::CachedItem,void *>>,std::__unordered_map_hasher<GlyphCacheKey,std::__hash_value_type<GlyphCacheKey,std::__list_iterator<md::FontGlyphCache::CachedItem,void *>>,std::hash<GlyphCacheKey>,std::equal_to<GlyphCacheKey>,true>,std::__unordered_map_equal<GlyphCacheKey,std::__hash_value_type<GlyphCacheKey,std::__list_iterator<md::FontGlyphCache::CachedItem,void *>>,std::equal_to<GlyphCacheKey>,std::hash<GlyphCacheKey>,true>,geo::StdAllocator<std::__hash_value_type<GlyphCacheKey,std::__list_iterator<md::FontGlyphCache::CachedItem,void *>>,mdm::Allocator>>::find<GlyphCacheKey>(v226, (float *)v232);
        v227 = v77;
        if (v93)
        {
          ++*(_DWORD *)(a1 + 144);
          v94 = *((_QWORD *)v93 + 4);
          v95 = *(_QWORD *)(v94 + 32);
          v96 = *(_QWORD *)(v94 + 40);
          if (v96)
          {
            v97 = (unint64_t *)(v96 + 8);
            do
              v98 = __ldxr(v97);
            while (__stxr(v98 + 1, v97));
          }
          *(_QWORD *)&v232[16] = v95;
          v233 = (std::__shared_weak_count *)v96;
          atomic_store(*(_DWORD *)(a1 + 160), (unsigned int *)(v95 + 52));
          v99 = *(uint64_t **)(a1 + 8);
          v100 = (uint64_t *)*((_QWORD *)v93 + 4);
          if (v99 != v100)
          {
            v101 = (uint64_t *)v100[1];
            if (v101 != v99)
            {
              v102 = *v100;
              *(_QWORD *)(v102 + 8) = v101;
              *(_QWORD *)v100[1] = v102;
              v103 = *v99;
              *(_QWORD *)(v103 + 8) = v100;
              *v100 = v103;
              *v99 = (uint64_t)v100;
              v100[1] = (uint64_t)v99;
            }
          }
          if (k)
            goto LABEL_117;
LABEL_305:
          if (v96)
          {
            v197 = (unint64_t *)(v96 + 8);
            do
              v198 = __ldxr(v197);
            while (__stxr(v198 + 1, v197));
          }
          v199 = (std::__shared_weak_count *)v229[1];
          *v229 = v95;
          v229[1] = v96;
          v77 = v227;
          if (v199)
          {
            v200 = (unint64_t *)&v199->__shared_owners_;
            do
              v201 = __ldaxr(v200);
            while (__stlxr(v201 - 1, v200));
            if (!v201)
            {
              ((void (*)(std::__shared_weak_count *))v199->__on_zero_shared)(v199);
              std::__shared_weak_count::__release_weak(v199);
            }
          }
          v202 = (float *)(v228 + 88 * v78);
          v202[20] = v88;
          v203 = (double *)(v76[11] + 16 * v78);
          v204 = v87 + *v203 * a10;
          v205 = v203[1] * v80;
          v202[8] = v204;
          v202[9] = v205;
          goto LABEL_314;
        }
        ++*(_DWORD *)(a1 + 148);
        v110 = *(unsigned __int8 *)(a1 + 164);
        if (v110)
        {
          {
            v211 = operator new();
            *(_QWORD *)(v211 + 16) = 0x5ED09DD50000000FLL;
            *(_QWORD *)(v211 + 24) = "VectorKitLabels";
            *(_OWORD *)(v211 + 32) = xmmword_19FFB2E80;
            *(_QWORD *)v211 = &off_1E42B5668;
            *(_QWORD *)(v211 + 8) = "VectorKitLabels";
            *(_OWORD *)(v211 + 72) = 0u;
            *(_OWORD *)(v211 + 88) = 0u;
            *(_OWORD *)(v211 + 104) = 0u;
            *(_OWORD *)(v211 + 120) = 0u;
            *(_OWORD *)(v211 + 136) = 0u;
            *(_OWORD *)(v211 + 152) = 0u;
            *(_OWORD *)(v211 + 168) = 0u;
            *(_OWORD *)(v211 + 184) = 0u;
            *(_OWORD *)(v211 + 200) = 0u;
            *(_OWORD *)(v211 + 216) = 0u;
            *(_OWORD *)(v211 + 232) = 0u;
            *(_QWORD *)(v211 + 248) = 0;
            *(_OWORD *)(v211 + 56) = 0u;
            v212 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v211 + 56), 0);
            if ((_DWORD)v212)
              geo::read_write_lock::logFailure(v212, (uint64_t)"initialization", v213);
            zone = malloc_create_zone(0, 0);
            *(_QWORD *)(v211 + 48) = zone;
            malloc_set_zone_name(zone, "VectorKitLabels");
            *(_QWORD *)(v211 + 256) = os_log_create("com.apple.VectorKit", "Memory");
            mdm::Allocator::instance(void)::alloc = v211;
          }
          v112 = mdm::Allocator::instance(void)::alloc;
          v96 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc
                                                                     + 16))(mdm::Allocator::instance(void)::alloc, 144, 8);
          *(_QWORD *)v96 = &off_1E42DB0B8;
          *(_QWORD *)(v96 + 8) = 0;
          *(_QWORD *)(v96 + 16) = 0;
          *(_QWORD *)(v96 + 24) = v112;
          *(_QWORD *)(v96 + 32) = &off_1E428F0C0;
          v95 = v96 + 32;
          *(_OWORD *)(v96 + 72) = 0u;
          *(_OWORD *)(v96 + 88) = 0u;
          *(_OWORD *)(v96 + 104) = 0u;
          *(_OWORD *)(v96 + 120) = 0u;
          *(_OWORD *)(v96 + 56) = 0u;
          *(_QWORD *)(v96 + 40) = &off_1E42B4830;
          *(_QWORD *)(v96 + 48) = 0;
          *(_QWORD *)(v96 + 80) = 0;
          *(_QWORD *)(v96 + 86) = 0;
          *(_OWORD *)(v96 + 96) = 0u;
          *(_OWORD *)(v96 + 112) = 0u;
          *(_QWORD *)(v96 + 128) = 0;
          *(_QWORD *)(v96 + 136) = 0;
          *(_DWORD *)(v96 + 136) = 1065353216;
          *(_BYTE *)(v96 + 141) = 0;
        }
        else
        {
          {
            v215 = operator new();
            mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v215, "VectorKitLabels", 0x5ED09DD50000000FLL);
          }
          v113 = mdm::Allocator::instance(void)::alloc;
          v96 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc
                                                                     + 16))(mdm::Allocator::instance(void)::alloc, 96, 8);
          *(_QWORD *)v96 = &off_1E42DDF18;
          *(_QWORD *)(v96 + 8) = 0;
          *(_QWORD *)(v96 + 16) = 0;
          *(_QWORD *)(v96 + 24) = v113;
          *(_QWORD *)(v96 + 32) = &off_1E42AF778;
          v95 = v96 + 32;
          *(_OWORD *)(v96 + 72) = 0u;
          *(_OWORD *)(v96 + 56) = 0u;
          *(_QWORD *)(v96 + 40) = &off_1E42B4830;
          *(_QWORD *)(v96 + 48) = 0;
          *(_QWORD *)(v96 + 80) = 0;
          *(_QWORD *)(v96 + 88) = 0;
          *(_QWORD *)(v96 + 86) = 0;
        }
        *(_QWORD *)&v232[16] = v95;
        v233 = (std::__shared_weak_count *)v96;
        v114 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 24) + 16))(*(_QWORD *)(a1 + 24), 48, 8);
        v115 = v114;
        *(_QWORD *)v114 = 0;
        *(_QWORD *)(v114 + 8) = 0;
        v116 = *(__n128 *)v232;
        *(_OWORD *)(v114 + 16) = *(_OWORD *)v232;
        *(_QWORD *)(v114 + 32) = v95;
        *(_QWORD *)(v114 + 40) = v96;
        v117 = (unint64_t *)(v96 + 8);
        do
          v118 = __ldxr(v117);
        while (__stxr(v118 + 1, v117));
        *(_QWORD *)v114 = a1;
        v119 = *(uint64_t **)(a1 + 8);
        *(_QWORD *)(v114 + 8) = v119;
        *v119 = v114;
        v120 = *(_QWORD *)(a1 + 16) + 1;
        *(_QWORD *)(a1 + 8) = v114;
        *(_QWORD *)(a1 + 16) = v120;
        v121 = 0x9DDFEA08EB382D69 * (((8 * *(_DWORD *)v232) + 8) ^ HIDWORD(*(_QWORD *)v232));
        v122 = 0x9DDFEA08EB382D69 * (HIDWORD(*(_QWORD *)v232) ^ (v121 >> 47) ^ v121);
        v123 = v122 ^ (v122 >> 47);
        v116.n128_u32[0] = *(_DWORD *)&v232[8];
        v124 = *(unsigned int *)&v232[8] - 0x61C8864680B583EBLL;
        if (*(float *)&v232[8] == 0.0)
          v124 = 0x9E3779B97F4A7C15;
        v125 = (v124 + 0x77FA823ACE0B5A40 * v123 + ((0x9DDFEA08EB382D69 * v123) >> 2)) ^ (0x9DDFEA08EB382D69 * v123);
        v126 = (*(unsigned __int16 *)&v232[12] - 0x61C8864680B583EBLL + (v125 << 6) + (v125 >> 2)) ^ v125;
        v127 = *(_QWORD *)(a1 + 40);
        if (v127)
        {
          v128 = (uint8x8_t)vcnt_s8((int8x8_t)v127);
          v128.i16[0] = vaddlv_u8(v128);
          if (v128.u32[0] > 1uLL)
          {
            a5 = (*(unsigned __int16 *)&v232[12] - 0x61C8864680B583EBLL + (v125 << 6) + (v125 >> 2)) ^ v125;
            if (v126 >= v127)
              a5 = v126 % v127;
          }
          else
          {
            a5 = v126 & (v127 - 1);
          }
          v129 = *(float ***)(*v226 + 8 * a5);
          if (v129)
          {
            v130 = *v129;
            if (v130)
            {
              if (v128.u32[0] < 2uLL)
              {
                while (1)
                {
                  v132 = *((_QWORD *)v130 + 1);
                  if (v132 == v126)
                  {
                    if (*((_QWORD *)v130 + 2) == *(_QWORD *)v232
                      && v130[6] == *(float *)&v232[8]
                      && *((unsigned __int16 *)v130 + 14) == *(unsigned __int16 *)&v232[12])
                    {
                      goto LABEL_219;
                    }
                  }
                  else if ((v132 & (v127 - 1)) != a5)
                  {
                    goto LABEL_160;
                  }
                  v130 = *(float **)v130;
                  if (!v130)
                    goto LABEL_160;
                }
              }
              do
              {
                v131 = *((_QWORD *)v130 + 1);
                if (v131 == v126)
                {
                  if (*((_QWORD *)v130 + 2) == *(_QWORD *)v232
                    && v130[6] == *(float *)&v232[8]
                    && *((unsigned __int16 *)v130 + 14) == *(unsigned __int16 *)&v232[12])
                  {
                    goto LABEL_219;
                  }
                }
                else
                {
                  if (v131 >= v127)
                    v131 %= v127;
                  if (v131 != a5)
                    break;
                }
                v130 = *(float **)v130;
              }
              while (v130);
            }
          }
        }
LABEL_160:
        v133 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, __n128))(**(_QWORD **)(a1 + 64) + 16))(*(_QWORD *)(a1 + 64), 40, 8, v116);
        *(_QWORD *)v133 = 0;
        *(_QWORD *)(v133 + 8) = v126;
        v116 = *(__n128 *)v232;
        *(_OWORD *)(v133 + 16) = *(_OWORD *)v232;
        *(_QWORD *)(v133 + 32) = v115;
        v116.n128_f32[0] = (float)(unint64_t)(*(_QWORD *)(a1 + 72) + 1);
        v134 = *(float *)(a1 + 80);
        if (!v127 || (float)(v134 * (float)v127) < v116.n128_f32[0])
        {
          v135 = (v127 & (v127 - 1)) != 0;
          if (v127 < 3)
            v135 = 1;
          v136 = v135 | (2 * v127);
          v116.n128_f32[0] = v116.n128_f32[0] / v134;
          v137 = vcvtps_u32_f32(v116.n128_f32[0]);
          if (v136 <= v137)
            prime = v137;
          else
            prime = v136;
          if (prime == 1)
          {
            prime = 2;
            v139 = (uint64_t *)(a1 + 32);
          }
          else
          {
            v139 = (uint64_t *)(a1 + 32);
            if ((prime & (prime - 1)) != 0)
              prime = std::__next_prime(prime);
          }
          v127 = *(_QWORD *)(a1 + 40);
          if (prime > v127)
          {
LABEL_172:
            v140 = (*(uint64_t (**)(_QWORD, size_t, uint64_t))(**(_QWORD **)(a1 + 48) + 16))(*(_QWORD *)(a1 + 48), 8 * prime, 8);
            v141 = *v139;
            *v139 = v140;
            if (v141)
              (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 48) + 40))(*(_QWORD *)(a1 + 48), v141, 8 * *(_QWORD *)(a1 + 40));
            v142 = 0;
            *(_QWORD *)(a1 + 40) = prime;
            do
              *(_QWORD *)(*v139 + 8 * v142++) = 0;
            while (prime != v142);
            v143 = (_QWORD *)*v218;
            if (!*v218)
              goto LABEL_195;
            v144 = v143[1];
            v145 = prime - 1;
            if ((prime & (prime - 1)) == 0)
            {
              v146 = v144 & v145;
              *(_QWORD *)(*v139 + 8 * v146) = v218;
              for (m = (_QWORD *)*v143; *v143; m = (_QWORD *)*v143)
              {
                v148 = m[1] & v145;
                if (v148 == v146)
                {
                  v143 = m;
                }
                else if (*(_QWORD *)(*v139 + 8 * v148))
                {
                  *v143 = *m;
                  v149 = 8 * v148;
                  *m = **(_QWORD **)(*v139 + v149);
                  **(_QWORD **)(*v139 + v149) = m;
                }
                else
                {
                  *(_QWORD *)(*v139 + 8 * v148) = v143;
                  v143 = m;
                  v146 = v148;
                }
              }
              goto LABEL_195;
            }
            if (v144 >= prime)
              v144 %= prime;
            *(_QWORD *)(*v139 + 8 * v144) = v218;
            v152 = (_QWORD *)*v143;
            if (!*v143)
            {
LABEL_195:
              v127 = prime;
              goto LABEL_196;
            }
            while (2)
            {
              v154 = v152[1];
              if (v154 >= prime)
                v154 %= prime;
              if (v154 != v144)
              {
                if (!*(_QWORD *)(*v139 + 8 * v154))
                {
                  *(_QWORD *)(*v139 + 8 * v154) = v143;
LABEL_200:
                  v143 = v152;
                  v152 = (_QWORD *)*v152;
                  v144 = v154;
                  if (!v152)
                    goto LABEL_195;
                  continue;
                }
                *v143 = *v152;
                v153 = 8 * v154;
                *v152 = **(_QWORD **)(*v139 + v153);
                **(_QWORD **)(*v139 + v153) = v152;
                v152 = v143;
              }
              break;
            }
            v154 = v144;
            goto LABEL_200;
          }
          if (prime < v127)
          {
            v150 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 72) / *(float *)(a1 + 80));
            if (v127 < 3
              || (v116.n128_u64[0] = (unint64_t)vcnt_s8((int8x8_t)v127),
                  v116.n128_u16[0] = vaddlv_u8((uint8x8_t)v116.n128_u64[0]),
                  v116.n128_u32[0] > 1uLL))
            {
              v150 = std::__next_prime(v150);
            }
            else
            {
              v151 = 1 << -(char)__clz(v150 - 1);
              if (v150 >= 2)
                v150 = v151;
            }
            if (prime <= v150)
              prime = v150;
            if (prime >= v127)
            {
              v127 = *(_QWORD *)(a1 + 40);
            }
            else
            {
              if (prime)
                goto LABEL_172;
              v209 = *v139;
              *v139 = 0;
              if (v209)
                (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 48) + 40))(*(_QWORD *)(a1 + 48), v209, 8 * *(_QWORD *)(a1 + 40));
              v127 = 0;
              *(_QWORD *)(a1 + 40) = 0;
            }
          }
LABEL_196:
          if ((v127 & (v127 - 1)) != 0)
          {
            if (v126 >= v127)
              a5 = v126 % v127;
            else
              a5 = v126;
          }
          else
          {
            a5 = (v127 - 1) & v126;
          }
        }
        v155 = *(uint64_t **)(*v226 + 8 * a5);
        if (v155)
        {
          *(_QWORD *)v133 = *v155;
          goto LABEL_217;
        }
        *(_QWORD *)v133 = *v218;
        *v218 = v133;
        *(_QWORD *)(*v226 + 8 * a5) = v218;
        if (*(_QWORD *)v133)
        {
          v156 = *(_QWORD *)(*(_QWORD *)v133 + 8);
          if ((v127 & (v127 - 1)) != 0)
          {
            v157 = (_QWORD *)(a1 + 32);
            if (v156 >= v127)
              v156 %= v127;
          }
          else
          {
            v156 &= v127 - 1;
            v157 = (_QWORD *)(a1 + 32);
          }
          v155 = (uint64_t *)(*v157 + 8 * v156);
LABEL_217:
          *v155 = v133;
        }
        ++*(_QWORD *)(a1 + 72);
        v115 = *(_QWORD *)(a1 + 8);
LABEL_219:
        v158 = 0x9DDFEA08EB382D69 * (((8 * v95) + 8) ^ HIDWORD(v95));
        v159 = 0x9DDFEA08EB382D69 * (HIDWORD(v95) ^ (v158 >> 47) ^ v158);
        v160 = v159 ^ (v159 >> 47);
        v161 = 0x9DDFEA08EB382D69 * v160;
        v162 = *(_QWORD *)(a1 + 96);
        if (v162)
        {
          v116.n128_u64[0] = (unint64_t)vcnt_s8((int8x8_t)v162);
          v116.n128_u16[0] = vaddlv_u8((uint8x8_t)v116.n128_u64[0]);
          if (v116.n128_u32[0] > 1uLL)
          {
            v126 = 0x9DDFEA08EB382D69 * v160;
            if (v161 >= v162)
              v126 = v161 % v162;
          }
          else
          {
            v126 = v161 & (v162 - 1);
          }
          v163 = *(_QWORD **)(*(_QWORD *)(a1 + 88) + 8 * v126);
          if (v163)
          {
            v164 = (_QWORD *)*v163;
            if (v164)
            {
              if (v116.n128_u32[0] < 2uLL)
              {
                while (1)
                {
                  v166 = v164[1];
                  if (v166 == v161)
                  {
                    if (v164[2] == v95)
                      goto LABEL_298;
                  }
                  else if ((v166 & (v162 - 1)) != v126)
                  {
                    goto LABEL_239;
                  }
                  v164 = (_QWORD *)*v164;
                  if (!v164)
                    goto LABEL_239;
                }
              }
              do
              {
                v165 = v164[1];
                if (v165 == v161)
                {
                  if (v164[2] == v95)
                    goto LABEL_298;
                }
                else
                {
                  if (v165 >= v162)
                    v165 %= v162;
                  if (v165 != v126)
                    break;
                }
                v164 = (_QWORD *)*v164;
              }
              while (v164);
            }
          }
        }
LABEL_239:
        v167 = (_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t, uint64_t, __n128))(**(_QWORD **)(a1 + 120) + 16))(*(_QWORD *)(a1 + 120), 32, 8, v116);
        *v167 = 0;
        v167[1] = v161;
        v167[2] = v95;
        v167[3] = v115;
        v168 = (float)(unint64_t)(*(_QWORD *)(a1 + 128) + 1);
        v169 = *(float *)(a1 + 136);
        if (!v162 || (float)(v169 * (float)v162) < v168)
        {
          v170 = (v162 & (v162 - 1)) != 0;
          if (v162 < 3)
            v170 = 1;
          v171 = v170 | (2 * v162);
          v172 = vcvtps_u32_f32(v168 / v169);
          if (v171 <= v172)
            v173 = v172;
          else
            v173 = v171;
          if (v173 == 1)
          {
            v173 = 2;
          }
          else if ((v173 & (v173 - 1)) != 0)
          {
            v173 = std::__next_prime(v173);
          }
          v162 = *(_QWORD *)(a1 + 96);
          if (v173 > v162)
          {
LABEL_251:
            v174 = (*(uint64_t (**)(_QWORD, size_t, uint64_t))(**(_QWORD **)(a1 + 104) + 16))(*(_QWORD *)(a1 + 104), 8 * v173, 8);
            v175 = *(_QWORD *)(a1 + 88);
            *(_QWORD *)(a1 + 88) = v174;
            if (v175)
              (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 104) + 40))(*(_QWORD *)(a1 + 104), v175, 8 * *(_QWORD *)(a1 + 96));
            v176 = 0;
            *(_QWORD *)(a1 + 96) = v173;
            do
              *(_QWORD *)(*(_QWORD *)(a1 + 88) + 8 * v176++) = 0;
            while (v173 != v176);
            v177 = (_QWORD *)*v217;
            if (!*v217)
              goto LABEL_274;
            v178 = v177[1];
            v179 = v173 - 1;
            if ((v173 & (v173 - 1)) == 0)
            {
              v180 = v178 & v179;
              *(_QWORD *)(*(_QWORD *)(a1 + 88) + 8 * v180) = v217;
              for (n = (_QWORD *)*v177; *v177; n = (_QWORD *)*v177)
              {
                v182 = n[1] & v179;
                if (v182 == v180)
                {
                  v177 = n;
                }
                else
                {
                  v183 = *(_QWORD *)(a1 + 88);
                  if (*(_QWORD *)(v183 + 8 * v182))
                  {
                    *v177 = *n;
                    v184 = 8 * v182;
                    *n = **(_QWORD **)(*(_QWORD *)(a1 + 88) + v184);
                    **(_QWORD **)(*(_QWORD *)(a1 + 88) + v184) = n;
                  }
                  else
                  {
                    *(_QWORD *)(v183 + 8 * v182) = v177;
                    v177 = n;
                    v180 = v182;
                  }
                }
              }
              goto LABEL_274;
            }
            if (v178 >= v173)
              v178 %= v173;
            *(_QWORD *)(*(_QWORD *)(a1 + 88) + 8 * v178) = v217;
            v188 = (_QWORD *)*v177;
            if (!*v177)
            {
LABEL_274:
              v162 = v173;
              goto LABEL_275;
            }
            while (2)
            {
              v190 = v188[1];
              if (v190 >= v173)
                v190 %= v173;
              if (v190 != v178)
              {
                v191 = *(_QWORD *)(a1 + 88);
                if (!*(_QWORD *)(v191 + 8 * v190))
                {
                  *(_QWORD *)(v191 + 8 * v190) = v177;
LABEL_279:
                  v177 = v188;
                  v188 = (_QWORD *)*v188;
                  v178 = v190;
                  if (!v188)
                    goto LABEL_274;
                  continue;
                }
                *v177 = *v188;
                v189 = 8 * v190;
                *v188 = **(_QWORD **)(*(_QWORD *)(a1 + 88) + v189);
                **(_QWORD **)(*(_QWORD *)(a1 + 88) + v189) = v188;
                v188 = v177;
              }
              break;
            }
            v190 = v178;
            goto LABEL_279;
          }
          if (v173 < v162)
          {
            v185 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 128) / *(float *)(a1 + 136));
            if (v162 < 3
              || (v186 = (uint8x8_t)vcnt_s8((int8x8_t)v162), v186.i16[0] = vaddlv_u8(v186), v186.u32[0] > 1uLL))
            {
              v185 = std::__next_prime(v185);
            }
            else
            {
              v187 = 1 << -(char)__clz(v185 - 1);
              if (v185 >= 2)
                v185 = v187;
            }
            if (v173 <= v185)
              v173 = v185;
            if (v173 >= v162)
            {
              v162 = *(_QWORD *)(a1 + 96);
            }
            else
            {
              if (v173)
                goto LABEL_251;
              v210 = *(_QWORD *)(a1 + 88);
              *(_QWORD *)(a1 + 88) = 0;
              if (v210)
                (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 104) + 40))(*(_QWORD *)(a1 + 104), v210, 8 * *(_QWORD *)(a1 + 96));
              v162 = 0;
              *(_QWORD *)(a1 + 96) = 0;
            }
          }
LABEL_275:
          if ((v162 & (v162 - 1)) != 0)
          {
            if (v161 >= v162)
              v126 = v161 % v162;
            else
              v126 = v161;
          }
          else
          {
            v126 = (v162 - 1) & v161;
          }
        }
        v192 = *(_QWORD **)(*(_QWORD *)(a1 + 88) + 8 * v126);
        if (v192)
        {
          *v167 = *v192;
          goto LABEL_296;
        }
        *v167 = *(_QWORD *)(a1 + 112);
        *(_QWORD *)(a1 + 112) = v167;
        *(_QWORD *)(*(_QWORD *)(a1 + 88) + 8 * v126) = v217;
        if (*v167)
        {
          v193 = *(_QWORD *)(*v167 + 8);
          if ((v162 & (v162 - 1)) != 0)
          {
            if (v193 >= v162)
              v193 %= v162;
          }
          else
          {
            v193 &= v162 - 1;
          }
          v192 = (_QWORD *)(*(_QWORD *)(a1 + 88) + 8 * v193);
LABEL_296:
          *v192 = v167;
        }
        ++*(_QWORD *)(a1 + 128);
LABEL_298:
        ++*(_DWORD *)(a1 + 152);
        atomic_store(*(_DWORD *)(a1 + 160), (unsigned int *)(v95 + 52));
        *(_WORD *)(v95 + 56) = glyphs;
        v194 = *(const void **)(v95 + 16);
        v11 = v221;
        v76 = v222;
        k = v219;
        a5 = v220;
        if (cf)
          CFRetain(cf);
        *(_QWORD *)(v95 + 16) = cf;
        if (v194)
          CFRelease(v194);
        *(float *)(v95 + 48) = a8;
        v195 = v79 + 24 * v78;
        *(_BYTE *)(v95 + 60) = *(_BYTE *)(v195 + 17);
        *(_BYTE *)(v95 + 59) = *(_BYTE *)(v195 + 18);
        if (glyphs == v235)
          *(_BYTE *)(v95 + 58) = 1;
        CGFontGetGlyphBBoxes(cf, &glyphs, 1uLL, &bboxes);
        v196 = vcvt_f32_f64(vmulq_n_f64(vaddq_f64((float64x2_t)bboxes.size, (float64x2_t)bboxes.origin), v223));
        *(float32x2_t *)(v95 + 32) = vcvt_f32_f64(vmulq_n_f64((float64x2_t)bboxes.origin, v223));
        *(float32x2_t *)(v95 + 40) = v196;
        *(_BYTE *)(v95 + 61) = 1;
        if (!v219)
          goto LABEL_305;
LABEL_117:
        if (v96)
        {
          v104 = (unint64_t *)(v96 + 8);
          do
            v105 = __ldxr(v104);
          while (__stxr(v105 + 1, v104));
        }
        v106 = v228 + 88 * v78;
        *(_QWORD *)(v106 + 16) = v95;
        v107 = *(std::__shared_weak_count **)(v106 + 24);
        *(_QWORD *)(v106 + 24) = v96;
        v77 = v227;
        if (v107)
        {
          v108 = (unint64_t *)&v107->__shared_owners_;
          do
            v109 = __ldaxr(v108);
          while (__stlxr(v109 - 1, v108));
          if (!v109)
          {
            ((void (*)(std::__shared_weak_count *))v107->__on_zero_shared)(v107);
            std::__shared_weak_count::__release_weak(v107);
          }
        }
LABEL_314:
        v206 = v233;
        if (v233)
        {
          v207 = (unint64_t *)&v233->__shared_owners_;
          do
            v208 = __ldaxr(v207);
          while (__stlxr(v208 - 1, v207));
          if (!v208)
          {
            ((void (*)(std::__shared_weak_count *))v206->__on_zero_shared)(v206);
            std::__shared_weak_count::__release_weak(v206);
          }
        }
        v85 = v76[7];
        v84 = v76[8];
        goto LABEL_92;
      }
      if (a6)
      {
        v89 = (float *)(v228 + 88 * v78);
        v89[20] = v88;
        v90 = (double *)(v76[11] + 16 * v78);
        v91 = v87 + *v90 * a10;
        v92 = v90[1] * v80;
        v89[8] = v91;
        v89[9] = v92;
      }
LABEL_92:
      ++v78;
      v81 = 0xAAAAAAAAAAAAAAABLL * ((v84 - v85) >> 3);
      if (v78 >= v81)
      {
        v79 = v85;
        goto LABEL_88;
      }
    }
    if (!v224 || !v78 || !*(_BYTE *)(v85 + 24 * v78 + 19))
      goto LABEL_101;
LABEL_100:
    ++v77;
    goto LABEL_101;
  }
}

void sub_19F124368(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a31);
  _Unwind_Resume(a1);
}

float *std::__hash_table<std::__hash_value_type<GlyphCacheKey,std::__list_iterator<md::FontGlyphCache::CachedItem,void *>>,std::__unordered_map_hasher<GlyphCacheKey,std::__hash_value_type<GlyphCacheKey,std::__list_iterator<md::FontGlyphCache::CachedItem,void *>>,std::hash<GlyphCacheKey>,std::equal_to<GlyphCacheKey>,true>,std::__unordered_map_equal<GlyphCacheKey,std::__hash_value_type<GlyphCacheKey,std::__list_iterator<md::FontGlyphCache::CachedItem,void *>>,std::equal_to<GlyphCacheKey>,std::hash<GlyphCacheKey>,true>,geo::StdAllocator<std::__hash_value_type<GlyphCacheKey,std::__list_iterator<md::FontGlyphCache::CachedItem,void *>>,mdm::Allocator>>::find<GlyphCacheKey>(_QWORD *a1, float *a2)
{
  float v2;
  uint64_t v3;
  int8x8_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  uint64_t v13;
  float **v14;
  float *result;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;

  v2 = a2[2];
  if (v2 == 0.0)
    v3 = 0x9E3779B97F4A7C15;
  else
    v3 = LODWORD(v2) - 0x61C8864680B583EBLL;
  v4 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v4)
    return 0;
  v5 = *(_QWORD *)a2;
  v6 = HIDWORD(*(_QWORD *)a2);
  v7 = 0x9DDFEA08EB382D69 * ((8 * *(_QWORD *)a2 + 8) ^ v6);
  v8 = (0x9DDFEA08EB382D69 * (v6 ^ (v7 >> 47) ^ v7)) ^ ((0x9DDFEA08EB382D69 * (v6 ^ (v7 >> 47) ^ v7)) >> 47);
  v9 = (v3 + 0x77FA823ACE0B5A40 * v8 + ((0x9DDFEA08EB382D69 * v8) >> 2)) ^ (0x9DDFEA08EB382D69 * v8);
  v10 = *((unsigned __int16 *)a2 + 6);
  v11 = (v10 + (v9 << 6) + (v9 >> 2) - 0x61C8864680B583EBLL) ^ v9;
  v12 = (uint8x8_t)vcnt_s8(v4);
  v12.i16[0] = vaddlv_u8(v12);
  if (v12.u32[0] > 1uLL)
  {
    v13 = (v10 + (v9 << 6) + (v9 >> 2) - 0x61C8864680B583EBLL) ^ v9;
    if (v11 >= *(_QWORD *)&v4)
      v13 = v11 % *(_QWORD *)&v4;
  }
  else
  {
    v13 = v11 & (*(_QWORD *)&v4 - 1);
  }
  v14 = *(float ***)(*a1 + 8 * v13);
  if (!v14)
    return 0;
  result = *v14;
  if (*v14)
  {
    if (v12.u32[0] < 2uLL)
    {
      v16 = *(_QWORD *)&v4 - 1;
      while (1)
      {
        v18 = *((_QWORD *)result + 1);
        if (v18 == v11)
        {
          if (*((_QWORD *)result + 2) == v5 && result[6] == v2 && *((unsigned __int16 *)result + 14) == (_DWORD)v10)
            return result;
        }
        else if ((v18 & v16) != v13)
        {
          return 0;
        }
        result = *(float **)result;
        if (!result)
          return result;
      }
    }
    do
    {
      v17 = *((_QWORD *)result + 1);
      if (v17 == v11)
      {
        if (*((_QWORD *)result + 2) == v5 && result[6] == v2 && *((unsigned __int16 *)result + 14) == (_DWORD)v10)
          return result;
      }
      else
      {
        if (v17 >= *(_QWORD *)&v4)
          v17 %= *(_QWORD *)&v4;
        if (v17 != v13)
          return 0;
      }
      result = *(float **)result;
    }
    while (result);
  }
  return result;
}

void std::__function::__func<md::LogicManager::runLogicBefore(md::LayoutContext const&,gdc::Context &)::$_2,std::allocator<md::LogicManager::runLogicBefore(md::LayoutContext const&,gdc::Context &)::$_2>,void ()(md::LogicBase *)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  int8x8_t v3;
  unint64_t v4;
  uint8x8_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t **v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;

  if (!*(_BYTE *)(*(_QWORD *)a2 + 56))
  {
    v2 = *(uint64_t **)(a1 + 8);
    v3 = (int8x8_t)v2[1];
    if (v3)
    {
      v4 = *(_QWORD *)(*(_QWORD *)a2 + 32);
      v5 = (uint8x8_t)vcnt_s8(v3);
      v5.i16[0] = vaddlv_u8(v5);
      if (v5.u32[0] > 1uLL)
      {
        v6 = *(_QWORD *)(*(_QWORD *)a2 + 32);
        if (v4 >= *(_QWORD *)&v3)
          v6 = v4 % *(_QWORD *)&v3;
      }
      else
      {
        v6 = (*(_QWORD *)&v3 - 1) & v4;
      }
      v7 = *v2;
      v8 = *(uint64_t ***)(*v2 + 8 * v6);
      if (v8)
      {
        v9 = *v8;
        if (*v8)
        {
          v10 = *(_QWORD *)&v3 - 1;
          if (v5.u32[0] < 2uLL)
          {
            while (1)
            {
              v11 = v9[1];
              if (v11 == v4)
              {
                if (v9[2] == v4)
                  goto LABEL_24;
              }
              else if ((v11 & v10) != v6)
              {
                return;
              }
              v9 = (uint64_t *)*v9;
              if (!v9)
                return;
            }
          }
          do
          {
            v12 = v9[1];
            if (v12 == v4)
            {
              if (v9[2] == v4)
              {
LABEL_24:
                if (v5.u32[0] > 1uLL)
                {
                  if (v4 >= *(_QWORD *)&v3)
                    v4 %= *(_QWORD *)&v3;
                }
                else
                {
                  v4 &= v10;
                }
                v13 = *(uint64_t **)(v7 + 8 * v4);
                do
                {
                  v14 = v13;
                  v13 = (uint64_t *)*v13;
                }
                while (v13 != v9);
                if (v14 == v2 + 2)
                  goto LABEL_41;
                v15 = v14[1];
                if (v5.u32[0] > 1uLL)
                {
                  if (v15 >= *(_QWORD *)&v3)
                    v15 %= *(_QWORD *)&v3;
                }
                else
                {
                  v15 &= v10;
                }
                if (v15 != v4)
                {
LABEL_41:
                  if (!*v9)
                    goto LABEL_42;
                  v16 = *(_QWORD *)(*v9 + 8);
                  if (v5.u32[0] > 1uLL)
                  {
                    if (v16 >= *(_QWORD *)&v3)
                      v16 %= *(_QWORD *)&v3;
                  }
                  else
                  {
                    v16 &= v10;
                  }
                  if (v16 != v4)
LABEL_42:
                    *(_QWORD *)(v7 + 8 * v4) = 0;
                }
                v17 = *v9;
                if (*v9)
                {
                  v18 = *(_QWORD *)(v17 + 8);
                  if (v5.u32[0] > 1uLL)
                  {
                    if (v18 >= *(_QWORD *)&v3)
                      v18 %= *(_QWORD *)&v3;
                  }
                  else
                  {
                    v18 &= v10;
                  }
                  if (v18 != v4)
                  {
                    *(_QWORD *)(*v2 + 8 * v18) = v14;
                    v17 = *v9;
                  }
                }
                *v14 = v17;
                *v9 = 0;
                --v2[3];
                v19 = v9[5];
                v9[5] = 0;
                if (v19)
                  (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
                operator delete(v9);
                return;
              }
            }
            else
            {
              if (v12 >= *(_QWORD *)&v3)
                v12 %= *(_QWORD *)&v3;
              if (v12 != v6)
                return;
            }
            v9 = (uint64_t *)*v9;
          }
          while (v9);
        }
      }
    }
  }
}

uint64_t md::LogicBase::setFrequency(uint64_t this, uint64_t a2)
{
  *(_QWORD *)(this + 64) = a2;
  return this;
}

uint64_t md::Logic<md::SkyLogic,md::SkyLogicContext,md::LogicDependencies<gdc::TypeList<md::CameraContext,md::StyleLogicContext>,gdc::TypeList<>>>::_runBeforeLayout(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[3];

  if (*(_QWORD *)(a3 + 8) == 0x7C7EC6C7C111B0D0)
  {
    v3 = *(_QWORD *)(a3 + 32);
    if (v3)
    {
      v5 = result;
      v7[0] = md::LogicDependencies<gdc::TypeList<md::CameraContext,md::StyleLogicContext>,gdc::TypeList<>>::buildRequiredTuple<md::CameraContext,md::StyleLogicContext>(**(_QWORD **)(a2 + 8), *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8));
      v7[1] = v6;
      return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD *, uint64_t))(*(_QWORD *)v5 + 144))(v5, a2, v7, v3);
    }
  }
  return result;
}

_QWORD *md::SkyLogic::runBeforeLayout(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  __int8 *v14;
  __int8 *v15;
  uint64_t v16;
  float v17;
  float v18;
  uint16x4_t v19;
  std::__shared_weak_count *v20;
  unint64_t *p_shared_owners;
  unint64_t v22;
  unint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  float v26;
  float32x4_t v27;
  unsigned __int8 v28;
  unsigned __int8 v29;
  _QWORD *result;
  uint64_t v31;
  float32x4_t v32;
  uint16x4_t v33[2];
  uint16x4_t v34;
  std::__shared_weak_count *v35;
  _QWORD v36[2];
  unsigned __int8 v37;
  _QWORD v38[3];
  _QWORD *v39;
  _QWORD v40[3];
  _QWORD *v41;
  _QWORD v42[3];
  _QWORD *v43;
  _QWORD v44[3];
  _QWORD *v45;
  uint64_t v46;

  v46 = *MEMORY[0x1E0C80C00];
  v42[0] = &off_1E42D4720;
  v42[1] = a2;
  v43 = v42;
  v40[0] = &off_1E42D4768;
  v40[1] = a2;
  v41 = v40;
  v45 = v44;
  v44[0] = &off_1E42D4768;
  v44[1] = a2;
  _ZNSt3__110__function6__funcIZN2md8SkyLogic15runBeforeLayoutERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_13CameraContextENS2_17StyleLogicContextEEEENS9_IJEEEEE20ResolvedDependenciesERNS2_15SkyLogicContextEE3__0NS_9allocatorISK_EEFvvEEclEv((uint64_t)v42);
  v7 = v41;
  if (v41 == v40)
  {
    v8 = 4;
    v7 = v40;
  }
  else
  {
    if (!v41)
      goto LABEL_6;
    v8 = 5;
  }
  (*(void (**)(void))(*v7 + 8 * v8))();
LABEL_6:
  v9 = v43;
  if (v43 == v42)
  {
    v10 = 4;
    v9 = v42;
  }
  else
  {
    if (!v43)
      goto LABEL_11;
    v10 = 5;
  }
  (*(void (**)(void))(*v9 + 8 * v10))();
LABEL_11:
  v12 = *a3;
  v11 = a3[1];
  if (!*(_BYTE *)(v11 + 82))
    goto LABEL_21;
  v38[0] = &off_1E42D47B0;
  v38[1] = a1;
  v13 = v38;
  v38[2] = v11;
  v39 = v38;
  v14 = *(__int8 **)(v11 + 48);
  v15 = *(__int8 **)(v11 + 56);
  if (v14 == v15)
  {
    v16 = 4;
LABEL_20:
    (*(void (**)(void))(*v13 + 8 * v16))();
    goto LABEL_21;
  }
  do
  {
    v34.i8[0] = *v14;
    if (!v39)
    {
      std::__throw_bad_function_call[abi:nn180100]();
      goto LABEL_50;
    }
    (*(void (**)(_QWORD *, uint16x4_t *))(*v39 + 48))(v39, &v34);
    ++v14;
  }
  while (v14 != v15);
  v13 = v39;
  if (v39 == v38)
  {
    v16 = 4;
    v13 = v38;
    goto LABEL_20;
  }
  if (v39)
  {
    v16 = 5;
    goto LABEL_20;
  }
LABEL_21:
  v17 = *(float *)(v12 + 3076);
  v18 = *(float *)(v12 + 3080);
  v19 = *(uint16x4_t *)(a1 + 120);
  v20 = *(std::__shared_weak_count **)(a1 + 128);
  v33[0] = v19;
  v33[1] = (uint16x4_t)v20;
  if (v20)
  {
    p_shared_owners = (unint64_t *)&v20->__shared_owners_;
    do
      v22 = __ldxr(p_shared_owners);
    while (__stxr(v22 + 1, p_shared_owners));
    v35 = v20;
    do
      v23 = __ldxr(p_shared_owners);
    while (__stxr(v23 + 1, p_shared_owners));
  }
  else
  {
    v35 = 0;
  }
  v36[0] = 0;
  v36[1] = 0;
  v34 = v19;
  v37 = 0;
  if (v19)
    v19.i32[0] = (*(uint64_t (**)(uint16x4_t, _QWORD *))(**(_QWORD **)&v19 + 48))(v19, v36);
  v37 = v19.i8[0];
  if (v20)
  {
    v24 = (unint64_t *)&v20->__shared_owners_;
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
    v19.i32[0] = v37;
  }
  if (v19.i32[0])
  {
    v26 = fminf(fmaxf(fmaxf(v18 + v17, 1.0), 0.0), 23.0);
    gss::RenderStyle<gss::PropertyID>::sampledValueForKeyAtZ<geo::Color<unsigned short,4,(geo::ColorSpace)0>>((unint64_t *)v33, *(_QWORD *)(*(_QWORD *)&v34 + 24), 0x5Cu, 2u, v26);
    v32 = (float32x4_t)vdupq_n_s32(0x37800080u);
    *(float32x4_t *)(a1 + 136) = vmulq_f32(vcvtq_f32_u32(vmovl_u16(v33[0])), v32);
    gss::RenderStyle<gss::PropertyID>::sampledValueForKeyAtZ<geo::Color<unsigned short,4,(geo::ColorSpace)0>>((unint64_t *)v33, *(_QWORD *)(*(_QWORD *)&v34 + 24), 0xEEu, 2u, v26);
    v27 = vmulq_f32(vcvtq_f32_u32(vmovl_u16(v33[0])), v32);
  }
  else
  {
    if ((v28 & 1) == 0
    {
      geo::Color<float,4,(geo::ColorSpace)0>::Color<(geo::ColorSpace)2,int,void>((uint64_t)&md::SkyLogic::defaultDayFillColor(void)::skyDayDefaultFillColor, (uint64_t)&md::kSkyDayDefaultFillColor);
    }
    *(_OWORD *)(a1 + 136) = md::SkyLogic::defaultDayFillColor(void)::skyDayDefaultFillColor;
    if ((v29 & 1) == 0)
    {
      {
        geo::Color<float,4,(geo::ColorSpace)0>::Color<(geo::ColorSpace)2,int,void>((uint64_t)&md::SkyLogic::defaultDayHorizonColor(void)::skyDayDefaultHorizonColor, (uint64_t)&md::kSkyDayDefaultHorizonColor);
      }
    }
    v27 = (float32x4_t)md::SkyLogic::defaultDayHorizonColor(void)::skyDayDefaultHorizonColor;
  }
  *(float32x4_t *)(a1 + 152) = v27;
  *(_DWORD *)a4 = *(_DWORD *)(a1 + 136);
  *(_DWORD *)(a4 + 4) = *(_DWORD *)(a1 + 140);
  *(_DWORD *)(a4 + 8) = *(_DWORD *)(a1 + 144);
  *(_DWORD *)(a4 + 12) = *(_DWORD *)(a1 + 148);
  *(_DWORD *)(a4 + 16) = *(_DWORD *)(a1 + 152);
  *(_DWORD *)(a4 + 20) = *(_DWORD *)(a1 + 156);
  *(_DWORD *)(a4 + 24) = *(_DWORD *)(a1 + 160);
  *(_DWORD *)(a4 + 28) = *(_DWORD *)(a1 + 164);
  *(_BYTE *)(a4 + 32) = *(_BYTE *)(a1 + 168);
  gss::QueryableLocker<gss::PropertyID>::~QueryableLocker((uint64_t)&v34);
  if (!v45)
  {
    std::__throw_bad_function_call[abi:nn180100]();
LABEL_50:
    __break(1u);
  }
  (*(void (**)(_QWORD *))(*v45 + 48))(v45);
  result = v45;
  if (v45 == v44)
  {
    v31 = 4;
    result = v44;
    return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v31))();
  }
  else if (v45)
  {
    v31 = 5;
    return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v31))();
  }
  return result;
}

void sub_19F124D00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v5;
  va_list va;

  va_start(va, a5);
  gss::QueryableLocker<gss::PropertyID>::~QueryableLocker((uint64_t)va);
  geo::ScopedFunctions::~ScopedFunctions((geo::ScopedFunctions *)(v5 - 104));
  _Unwind_Resume(a1);
}

uint64_t md::Logic<md::MapZoomLevelStyleLogic,md::MapZoomLevelStyleLogicContext,md::LogicDependencies<gdc::TypeList<md::CameraContext,md::StyleLogicContext>,gdc::TypeList<>>>::_runBeforeLayout(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[3];

  if (*(_QWORD *)(a3 + 8) == 0xF0AA2DB42EB710AFLL)
  {
    v3 = *(_QWORD *)(a3 + 32);
    if (v3)
    {
      v5 = result;
      v7[0] = md::LogicDependencies<gdc::TypeList<md::CameraContext,md::StyleLogicContext>,gdc::TypeList<>>::buildRequiredTuple<md::CameraContext,md::StyleLogicContext>(**(_QWORD **)(a2 + 8), *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8));
      v7[1] = v6;
      return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD *, uint64_t))(*(_QWORD *)v5 + 144))(v5, a2, v7, v3);
    }
  }
  return result;
}

uint64_t md::Logic<md::LoadingStatusLogic,md::LoadingStatusContext,md::LogicDependencies<gdc::TypeList<md::SceneContext>,gdc::TypeList<md::IdentifiedResourceContext>>>::_runBeforeLayout(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[2];

  if (*(_QWORD *)(a3 + 8) == 0x90B6813830DCB581)
  {
    v3 = *(_QWORD *)(a3 + 32);
    if (v3)
    {
      v5 = result;
      v7[0] = md::LogicDependencies<gdc::TypeList<md::SceneContext>,gdc::TypeList<md::IdentifiedResourceContext>>::resolveDependencies(**(_QWORD **)(a2 + 8), *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8));
      v7[1] = v6;
      return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD *, uint64_t))(*(_QWORD *)v5 + 144))(v5, a2, v7, v3);
    }
  }
  return result;
}

uint64_t md::Logic<md::LocalNorthLogic,md::LocalNorthLogicContext,md::LogicDependencies<gdc::TypeList<md::StyleLogicContext,md::SceneContext,md::CameraContext>,gdc::TypeList<>>>::_runBeforeLayout(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  _QWORD v6[4];

  if (*(_QWORD *)(a3 + 8) == 0xC81F81A7CB7767BBLL)
  {
    v3 = *(_QWORD *)(a3 + 32);
    if (v3)
    {
      v5 = result;
      md::LogicDependencies<gdc::TypeList<md::StyleLogicContext,md::SceneContext,md::CameraContext>,gdc::TypeList<>>::buildRequiredTuple<md::StyleLogicContext,md::SceneContext,md::CameraContext>(v6, **(_QWORD **)(a2 + 8), *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8));
      return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD *, uint64_t))(*(_QWORD *)v5 + 144))(v5, a2, v6, v3);
    }
  }
  return result;
}

uint64_t md::Logic<md::DebugDrawLogic,md::DebugDrawContext,md::LogicDependencies<gdc::TypeList<>,gdc::TypeList<>>>::_runBeforeLayout(uint64_t result, uint64_t a2, uint64_t a3)
{
  _BYTE v3[2];

  if (*(_QWORD *)(a3 + 8) == 0x3619066E3FB5F2CLL)
  {
    if (*(_QWORD *)(a3 + 32))
      return (*(uint64_t (**)(uint64_t, uint64_t, _BYTE *))(*(_QWORD *)result + 144))(result, a2, v3);
  }
  return result;
}

uint64_t md::Logic<md::StandardLogic,md::StandardLogicContext,md::LogicDependencies<gdc::TypeList<md::SceneContext,md::CameraContext>,gdc::TypeList<>>>::_runBeforeLayout(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[3];

  if (*(_QWORD *)(a3 + 8) == 0xFFA06A69D924B0E8)
  {
    v3 = *(_QWORD *)(a3 + 32);
    if (v3)
    {
      v5 = result;
      v7[0] = md::LogicDependencies<gdc::TypeList<md::SceneContext,md::CameraContext>,gdc::TypeList<>>::buildRequiredTuple<md::SceneContext,md::CameraContext>(**(_QWORD **)(a2 + 8), *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8));
      v7[1] = v6;
      return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD *, uint64_t))(*(_QWORD *)v5 + 144))(v5, a2, v7, v3);
    }
  }
  return result;
}

uint64_t md::Logic<md::LightingLogic,md::LightingLogicContext,md::LogicDependencies<gdc::TypeList<md::CameraContext,md::StyleLogicContext,md::SceneContext,md::ElevationContext>,gdc::TypeList<>>>::_runBeforeLayout(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  _QWORD v6[5];

  if (*(_QWORD *)(a3 + 8) == 0x41E8D6E445F4145)
  {
    v3 = *(_QWORD *)(a3 + 32);
    if (v3)
    {
      v5 = result;
      md::LogicDependencies<gdc::TypeList<md::CameraContext,md::StyleLogicContext,md::SceneContext,md::ElevationContext>,gdc::TypeList<>>::buildRequiredTuple<md::CameraContext,md::StyleLogicContext,md::SceneContext,md::ElevationContext>(v6, **(_QWORD **)(a2 + 8), *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8));
      return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD *, uint64_t))(*(_QWORD *)v5 + 144))(v5, a2, v6, v3);
    }
  }
  return result;
}

_QWORD *md::LogicDependencies<gdc::TypeList<md::CameraContext,md::StyleLogicContext,md::SceneContext,md::ElevationContext>,gdc::TypeList<>>::buildRequiredTuple<md::CameraContext,md::StyleLogicContext,md::SceneContext,md::ElevationContext>(_QWORD *result, uint64_t a2, unint64_t a3)
{
  uint8x8_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  if (!a3)
  {
    v5 = 0;
    v6 = 0;
    v7 = 0;
    goto LABEL_94;
  }
  v3 = (uint8x8_t)vcnt_s8((int8x8_t)a3);
  v3.i16[0] = vaddlv_u8(v3);
  if (v3.u32[0] > 1uLL)
  {
    v4 = 0x1AF456233693CD46;
    if (a3 <= 0x1AF456233693CD46)
      v4 = 0x1AF456233693CD46 % a3;
  }
  else
  {
    v4 = (a3 - 1) & 0x1AF456233693CD46;
  }
  v8 = *(_QWORD **)(a2 + 8 * v4);
  if (!v8)
    goto LABEL_25;
  v9 = (_QWORD *)*v8;
  if (!v9)
    goto LABEL_25;
  if (v3.u32[0] < 2uLL)
  {
    while (1)
    {
      v11 = v9[1];
      if (v11 == 0x1AF456233693CD46)
      {
        if (v9[2] == 0x1AF456233693CD46)
          goto LABEL_23;
      }
      else if ((v11 & (a3 - 1)) != v4)
      {
        goto LABEL_25;
      }
      v9 = (_QWORD *)*v9;
      if (!v9)
        goto LABEL_25;
    }
  }
  while (1)
  {
    v10 = v9[1];
    if (v10 == 0x1AF456233693CD46)
      break;
    if (v10 >= a3)
      v10 %= a3;
    if (v10 != v4)
      goto LABEL_25;
LABEL_12:
    v9 = (_QWORD *)*v9;
    if (!v9)
      goto LABEL_25;
  }
  if (v9[2] != 0x1AF456233693CD46)
    goto LABEL_12;
LABEL_23:
  v12 = v9[5];
  if (*(_QWORD *)(v12 + 8) == 0x1AF456233693CD46)
  {
    v6 = *(_QWORD *)(v12 + 32);
    goto LABEL_26;
  }
LABEL_25:
  v6 = 0;
LABEL_26:
  if (v3.u32[0] > 1uLL)
  {
    v13 = 0xE42D19AFCA302E68;
    if (a3 <= 0xE42D19AFCA302E68)
      v13 = 0xE42D19AFCA302E68 % a3;
  }
  else
  {
    v13 = (a3 - 1) & 0xE42D19AFCA302E68;
  }
  v14 = *(_QWORD **)(a2 + 8 * v13);
  if (!v14)
    goto LABEL_48;
  v15 = (_QWORD *)*v14;
  if (!v15)
    goto LABEL_48;
  if (v3.u32[0] < 2uLL)
  {
    while (1)
    {
      v17 = v15[1];
      if (v17 == 0xE42D19AFCA302E68)
      {
        if (v15[2] == 0xE42D19AFCA302E68)
          goto LABEL_46;
      }
      else if ((v17 & (a3 - 1)) != v13)
      {
        goto LABEL_48;
      }
      v15 = (_QWORD *)*v15;
      if (!v15)
        goto LABEL_48;
    }
  }
  while (2)
  {
    v16 = v15[1];
    if (v16 != 0xE42D19AFCA302E68)
    {
      if (v16 >= a3)
        v16 %= a3;
      if (v16 != v13)
        goto LABEL_48;
      goto LABEL_35;
    }
    if (v15[2] != 0xE42D19AFCA302E68)
    {
LABEL_35:
      v15 = (_QWORD *)*v15;
      if (!v15)
        goto LABEL_48;
      continue;
    }
    break;
  }
LABEL_46:
  v18 = v15[5];
  if (*(_QWORD *)(v18 + 8) == 0xE42D19AFCA302E68)
  {
    v7 = *(_QWORD *)(v18 + 32);
    goto LABEL_49;
  }
LABEL_48:
  v7 = 0;
LABEL_49:
  if (v3.u32[0] > 1uLL)
  {
    v19 = 0x99BED48DEFBBD82BLL;
    if (a3 <= 0x99BED48DEFBBD82BLL)
      v19 = 0x99BED48DEFBBD82BLL % a3;
  }
  else
  {
    v19 = (a3 - 1) & 0x99BED48DEFBBD82BLL;
  }
  v20 = *(_QWORD **)(a2 + 8 * v19);
  if (!v20)
    goto LABEL_71;
  v21 = (_QWORD *)*v20;
  if (!v21)
    goto LABEL_71;
  if (v3.u32[0] < 2uLL)
  {
    while (1)
    {
      v23 = v21[1];
      if (v23 == 0x99BED48DEFBBD82BLL)
      {
        if (v21[2] == 0x99BED48DEFBBD82BLL)
          goto LABEL_69;
      }
      else if ((v23 & (a3 - 1)) != v19)
      {
        goto LABEL_71;
      }
      v21 = (_QWORD *)*v21;
      if (!v21)
        goto LABEL_71;
    }
  }
  while (2)
  {
    v22 = v21[1];
    if (v22 != 0x99BED48DEFBBD82BLL)
    {
      if (v22 >= a3)
        v22 %= a3;
      if (v22 != v19)
        goto LABEL_71;
      goto LABEL_58;
    }
    if (v21[2] != 0x99BED48DEFBBD82BLL)
    {
LABEL_58:
      v21 = (_QWORD *)*v21;
      if (!v21)
        goto LABEL_71;
      continue;
    }
    break;
  }
LABEL_69:
  v24 = v21[5];
  if (*(_QWORD *)(v24 + 8) == 0x99BED48DEFBBD82BLL)
  {
    v5 = *(_QWORD *)(v24 + 32);
    goto LABEL_72;
  }
LABEL_71:
  v5 = 0;
LABEL_72:
  if (v3.u32[0] > 1uLL)
  {
    v25 = 0x8BD499FBD96FBB9ELL;
    if (a3 <= 0x8BD499FBD96FBB9ELL)
      v25 = 0x8BD499FBD96FBB9ELL % a3;
  }
  else
  {
    v25 = (a3 - 1) & 0x8BD499FBD96FBB9ELL;
  }
  v26 = *(_QWORD **)(a2 + 8 * v25);
  if (!v26)
    goto LABEL_94;
  v27 = (_QWORD *)*v26;
  if (!v27)
    goto LABEL_94;
  if (v3.u32[0] < 2uLL)
  {
    while (1)
    {
      v29 = v27[1];
      if (v29 == 0x8BD499FBD96FBB9ELL)
      {
        if (v27[2] == 0x8BD499FBD96FBB9ELL)
          goto LABEL_92;
      }
      else if ((v29 & (a3 - 1)) != v25)
      {
        goto LABEL_94;
      }
      v27 = (_QWORD *)*v27;
      if (!v27)
        goto LABEL_94;
    }
  }
  while (1)
  {
    v28 = v27[1];
    if (v28 == 0x8BD499FBD96FBB9ELL)
      break;
    if (v28 >= a3)
      v28 %= a3;
    if (v28 != v25)
      goto LABEL_94;
LABEL_81:
    v27 = (_QWORD *)*v27;
    if (!v27)
      goto LABEL_94;
  }
  if (v27[2] != 0x8BD499FBD96FBB9ELL)
    goto LABEL_81;
LABEL_92:
  v30 = v27[5];
  if (*(_QWORD *)(v30 + 8) != 0x8BD499FBD96FBB9ELL)
  {
LABEL_94:
    v31 = 0;
    goto LABEL_95;
  }
  v31 = *(_QWORD *)(v30 + 32);
LABEL_95:
  *result = v6;
  result[1] = v7;
  result[2] = v5;
  result[3] = v31;
  return result;
}

uint64_t md::Logic<md::GeometryLogic,md::GeometryContext,md::LogicDependencies<gdc::TypeList<>,gdc::TypeList<>>>::_runBeforeLayout(uint64_t result, uint64_t a2, uint64_t a3)
{
  _BYTE v3[2];

  if (*(_QWORD *)(a3 + 8) == 0x3070CB6B3C7F21D3)
  {
    if (*(_QWORD *)(a3 + 32))
      return (*(uint64_t (**)(uint64_t, uint64_t, _BYTE *))(*(_QWORD *)result + 144))(result, a2, v3);
  }
  return result;
}

uint64_t md::Logic<md::LabelsLogic,md::LabelsContext,md::LogicDependencies<gdc::TypeList<md::StyleLogicContext>,gdc::TypeList<md::MeshRenderableContext>>>::_runBeforeLayout(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[2];

  if (*(_QWORD *)(a3 + 8) == 0xA588623CD4116DAELL)
  {
    v3 = *(_QWORD *)(a3 + 32);
    if (v3)
    {
      v5 = result;
      v7[0] = md::LogicDependencies<gdc::TypeList<md::StyleLogicContext>,gdc::TypeList<md::MeshRenderableContext>>::resolveDependencies(**(_QWORD **)(a2 + 8), *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8));
      v7[1] = v6;
      return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD *, uint64_t))(*(_QWORD *)v5 + 144))(v5, a2, v7, v3);
    }
  }
  return result;
}

uint64_t md::Logic<md::AnchorLogic,md::AnchorContext,md::LogicDependencies<gdc::TypeList<md::CameraContext,md::ElevationContext>,gdc::TypeList<md::NavigationContext>>>::_runBeforeLayout(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  _QWORD v6[3];

  if (*(_QWORD *)(a3 + 8) == 0x63B6FE00C0848868)
  {
    v3 = *(_QWORD *)(a3 + 32);
    if (v3)
    {
      v5 = result;
      md::LogicDependencies<gdc::TypeList<md::CameraContext,md::ElevationContext>,gdc::TypeList<md::NavigationContext>>::resolveDependencies(v6, **(_QWORD **)(a2 + 8), *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8));
      return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD *, uint64_t))(*(_QWORD *)v5 + 144))(v5, a2, v6, v3);
    }
  }
  return result;
}

void md::MapZoomLevelStyleLogic::runBeforeLayout(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t *v3;
  uint64_t v5;
  _QWORD *v6;
  _BYTE *v7;
  _BYTE *v8;
  uint64_t v9;
  float v10;
  float v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  unsigned int v18;
  float v19;
  uint64_t v20;
  float v21;
  uint64_t v22;
  BOOL v24;
  BOOL v25;
  BOOL v26;
  std::__shared_weak_count *v27;
  uint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  uint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  void *v35;
  VKTimedAnimation *v36;
  void *v37;
  uint64_t v38;
  unint64_t *v39;
  unint64_t v40;
  unint64_t *v41;
  unint64_t v42;
  unint64_t *v43;
  unint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  unint64_t *v57;
  unint64_t v58;
  uint64_t v59;
  std::__shared_weak_count *v60;
  uint64_t v61;
  std::__shared_weak_count *v62;
  _QWORD v63[6];
  std::__shared_weak_count *v64;
  uint64_t v65;
  std::__shared_weak_count *v66;
  BOOL v67;
  _QWORD v68[6];
  std::__shared_weak_count *v69;
  uint64_t v70;
  std::__shared_weak_count *v71;
  _QWORD v72[3];
  _QWORD *v73;
  uint64_t v74;

  v74 = *MEMORY[0x1E0C80C00];
  v3 = (uint64_t *)a3[1];
  if (!*((_BYTE *)v3 + 82))
    return;
  v5 = *a3;
  v72[0] = &off_1E42D0EE0;
  v72[1] = a1;
  v6 = v72;
  v72[2] = v3;
  v73 = v72;
  v7 = (_BYTE *)v3[6];
  v8 = (_BYTE *)v3[7];
  if (v7 == v8)
  {
    v9 = 4;
    goto LABEL_10;
  }
  do
  {
    LOBYTE(v63[0]) = *v7;
    if (!v73)
    {
      std::__throw_bad_function_call[abi:nn180100]();
      __break(1u);
    }
    (*(void (**)(_QWORD *, _QWORD *))(*v73 + 48))(v73, v63);
    ++v7;
  }
  while (v7 != v8);
  v6 = v73;
  if (v73 == v72)
  {
    v9 = 4;
    v6 = v72;
    goto LABEL_10;
  }
  if (v73)
  {
    v9 = 5;
LABEL_10:
    (*(void (**)(void))(*v6 + 8 * v9))();
  }
  v10 = *(float *)(v5 + 3072);
  v11 = *(float *)(v5 + 3080);
  v13 = v3[4];
  v12 = (std::__shared_weak_count *)v3[5];
  v61 = v13;
  v62 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v15 = __ldxr(p_shared_owners);
    while (__stxr(v15 + 1, p_shared_owners));
  }
  if (v13 && !*(_QWORD *)(a1 + 128))
  {
    v18 = gss::ClientStyleState<gss::PropertyID>::sourceClientStyleAttribute(v13, 0x10036u);
    v19 = fmaxf(v11 + v10, 1.0);
    v20 = 148;
    if (*((_DWORD *)v3 + 22) == 5)
      v20 = 144;
    v21 = *(float *)(a1 + v20);
    if (v18 >= 0x10000)
    {
      v24 = v19 < (float)(v21 + -0.25) && v18 == 1;
      if ((_BYTE)v18)
        v25 = 1;
      else
        v25 = v19 < (float)(v21 + 0.25);
      if (!v25 || v24)
      {
        v26 = v19 >= v21;
        v28 = *v3;
        v27 = (std::__shared_weak_count *)v3[1];
        v59 = *v3;
        v60 = v27;
        if (v27)
        {
          v29 = (unint64_t *)&v27->__shared_owners_;
          do
            v30 = __ldxr(v29);
          while (__stxr(v30 + 1, v29));
        }
        if (v28)
        {
          v31 = *(_QWORD *)(v28 + 520);
          v32 = *(std::__shared_weak_count **)(v28 + 528);
          v70 = v31;
          v71 = v32;
          if (v32)
          {
            v33 = (unint64_t *)&v32->__shared_owners_;
            do
              v34 = __ldxr(v33);
            while (__stxr(v34 + 1, v33));
          }
          if (v31)
          {
            gss::ClientStyleState<gss::PropertyID>::setTargetClientStyleAttribute(v31, 0x10036u, v19 >= v21);
            v35 = *(void **)(a1 + 128);
            if (v35)
              objc_msgSend(v35, "stop", v59, v27, v61);
            v36 = -[VKTimedAnimation initWithDuration:]([VKTimedAnimation alloc], "initWithDuration:", 0.300000012);
            v37 = *(void **)(a1 + 128);
            *(_QWORD *)(a1 + 128) = v36;

            objc_msgSend(*(id *)(a1 + 128), "setTimingFunction:", VKAnimationCurveEaseOut);
            v38 = MEMORY[0x1E0C809B0];
            v68[0] = MEMORY[0x1E0C809B0];
            v68[1] = 3321888768;
            v68[2] = ___ZN2md22MapZoomLevelStyleLogic27beginMapZoomLevelTransitionENSt3__110shared_ptrIN3gss17StylesheetManagerINS3_10PropertyIDEEEEENS3_12MapZoomLevelE_block_invoke;
            v68[3] = &__block_descriptor_56_ea8_40c69_ZTSNSt3__110shared_ptrIN3gss16ClientStyleStateINS1_10PropertyIDEEEEE_e8_v12__0f8l;
            v68[4] = a1;
            v68[5] = v31;
            v69 = v32;
            if (v32)
            {
              v39 = (unint64_t *)&v32->__shared_owners_;
              do
                v40 = __ldxr(v39);
              while (__stxr(v40 + 1, v39));
            }
            objc_msgSend(*(id *)(a1 + 128), "setStepHandler:", v68, v59, v60);
            v63[0] = v38;
            v63[1] = 3321888768;
            v63[2] = ___ZN2md22MapZoomLevelStyleLogic27beginMapZoomLevelTransitionENSt3__110shared_ptrIN3gss17StylesheetManagerINS3_10PropertyIDEEEEENS3_12MapZoomLevelE_block_invoke_1;
            v63[3] = &__block_descriptor_73_ea8_40c70_ZTSNSt3__110shared_ptrIN3gss17StylesheetManagerINS1_10PropertyIDEEEEE56c69_ZTSNSt3__110shared_ptrIN3gss16ClientStyleStateINS1_10PropertyIDEEEEE_e8_v12__0B8l;
            v63[4] = a1;
            v63[5] = v28;
            v64 = v27;
            if (v27)
            {
              v41 = (unint64_t *)&v27->__shared_owners_;
              do
                v42 = __ldxr(v41);
              while (__stxr(v42 + 1, v41));
            }
            v67 = v26;
            v65 = v31;
            v66 = v32;
            if (v32)
            {
              v43 = (unint64_t *)&v32->__shared_owners_;
              do
                v44 = __ldxr(v43);
              while (__stxr(v44 + 1, v43));
            }
            objc_msgSend(*(id *)(a1 + 128), "setCompletionHandler:", v63);
            md::AnimationRunner::runAnimation(*(md::MapEngine ***)(a1 + 168), *(VKAnimation **)(a1 + 128));
            v45 = v66;
            if (v66)
            {
              v46 = (unint64_t *)&v66->__shared_owners_;
              do
                v47 = __ldaxr(v46);
              while (__stlxr(v47 - 1, v46));
              if (!v47)
              {
                ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
                std::__shared_weak_count::__release_weak(v45);
              }
            }
            v48 = v64;
            if (v64)
            {
              v49 = (unint64_t *)&v64->__shared_owners_;
              do
                v50 = __ldaxr(v49);
              while (__stlxr(v50 - 1, v49));
              if (!v50)
              {
                ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
                std::__shared_weak_count::__release_weak(v48);
              }
            }
            v51 = v69;
            if (v69)
            {
              v52 = (unint64_t *)&v69->__shared_owners_;
              do
                v53 = __ldaxr(v52);
              while (__stlxr(v53 - 1, v52));
              if (!v53)
              {
                ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
                std::__shared_weak_count::__release_weak(v51);
              }
            }
          }
          v54 = v71;
          if (v71)
          {
            v55 = (unint64_t *)&v71->__shared_owners_;
            do
              v56 = __ldaxr(v55);
            while (__stlxr(v56 - 1, v55));
            if (!v56)
            {
              ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
              std::__shared_weak_count::__release_weak(v54);
            }
          }
        }
        if (v27)
        {
          v57 = (unint64_t *)&v27->__shared_owners_;
          do
            v58 = __ldaxr(v57);
          while (__stlxr(v58 - 1, v57));
          if (!v58)
          {
            ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
            std::__shared_weak_count::__release_weak(v27);
          }
        }
      }
    }
    else
    {
      gss::ClientStyleState<gss::PropertyID>::setClientStyleAttribute(v13, 0x10036u, v19 >= v21);
      v22 = **(_QWORD **)(a1 + 160);
      if (v22)
      {
        LOBYTE(v63[0]) = 6;
        md::MapEngine::setNeedsTick(v22, v63);
      }
    }
  }
  if (v62)
  {
    v16 = (unint64_t *)&v62->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
      std::__shared_weak_count::__release_weak(v62);
    }
  }
}

void sub_19F125B4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  uint64_t v11;

  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](v11 - 152);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void sub_19F125BC4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;

  v3 = *(_QWORD **)(v1 - 112);
  if (v3 == (_QWORD *)(v1 - 136))
  {
    v4 = 4;
    v3 = (_QWORD *)(v1 - 136);
  }
  else
  {
    if (!v3)
      _Unwind_Resume(exception_object);
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
  _Unwind_Resume(exception_object);
}

uint64_t gss::ClientStyleState<gss::PropertyID>::sourceClientStyleAttribute(uint64_t a1, unsigned int a2)
{
  pthread_rwlock_t *v4;
  geo::read_write_lock *v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  _DWORD *v12;
  unint64_t v13;
  _DWORD *v14;
  unint64_t v15;
  unint64_t v16;
  unsigned int *v17;
  _DWORD *v18;
  unsigned int v19;
  int v20;
  int v21;
  int v22;
  geo::read_write_lock *v23;
  const char *v24;

  v4 = (pthread_rwlock_t *)(a1 + 16);
  v5 = (geo::read_write_lock *)pthread_rwlock_rdlock((pthread_rwlock_t *)(a1 + 16));
  if ((_DWORD)v5)
    geo::read_write_lock::logFailure(v5, (uint64_t)"read lock", v6);
  v7 = *(unsigned __int16 *)(a1 + 226);
  if (*(_WORD *)(a1 + 226))
  {
    v8 = *(_QWORD *)(a1 + 216);
    if (!*(_BYTE *)(a1 + 231))
    {
      v11 = 4 * v7;
      v12 = *(_DWORD **)(a1 + 216);
      while (*v12 != a2)
      {
        ++v12;
        v11 -= 4;
        if (!v11)
        {
          v12 = (_DWORD *)(v8 + 4 * v7);
          break;
        }
      }
      v13 = ((unint64_t)v12 - v8) >> 2;
      if ((_DWORD)v7 == (unsigned __int16)v13)
        goto LABEL_30;
      goto LABEL_25;
    }
    if (v7 < 0x1E)
    {
      v9 = 0;
      while (1)
      {
        v10 = *(_DWORD *)(v8 + 4 * v9);
        if (v10 >= a2)
          break;
        if (v7 == ++v9)
          goto LABEL_30;
      }
      if (v10 == a2)
        LOWORD(v13) = v9;
      else
        LOWORD(v13) = *(_WORD *)(a1 + 226);
      if ((_DWORD)v7 == (unsigned __int16)v13)
        goto LABEL_30;
LABEL_25:
      v20 = *(_WORD *)(*(_QWORD *)(a1 + 216) + *(unsigned __int16 *)(a1 + 224) + 2 * (unsigned __int16)v13) & 0xFF00;
      v21 = *(_WORD *)(*(_QWORD *)(a1 + 216)
                                      + *(unsigned __int16 *)(a1 + 224)
                                      + 2 * (unsigned __int16)v13);
      v22 = 0x10000;
      goto LABEL_31;
    }
    v14 = *(_DWORD **)(a1 + 216);
    v15 = *(unsigned __int16 *)(a1 + 226);
    do
    {
      v16 = v15 >> 1;
      v17 = &v14[v15 >> 1];
      v19 = *v17;
      v18 = v17 + 1;
      v15 += ~(v15 >> 1);
      if (v19 < a2)
        v14 = v18;
      else
        v15 = v16;
    }
    while (v15);
    if (v14 != (_DWORD *)(v8 + 4 * v7) && *v14 == a2)
    {
      v13 = ((unint64_t)v14 - v8) >> 2;
      if ((_DWORD)v7 != (unsigned __int16)v13)
        goto LABEL_25;
    }
  }
LABEL_30:
  v22 = 0;
  v21 = 0;
  v20 = 0;
LABEL_31:
  v23 = (geo::read_write_lock *)pthread_rwlock_unlock(v4);
  if ((_DWORD)v23)
    geo::read_write_lock::logFailure(v23, (uint64_t)"unlock", v24);
  return v21 | v22 | v20;
}

_QWORD *md::LoadingStatusLogic::runBeforeLayout(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  int v12;
  int v13;
  _QWORD *result;
  uint64_t v15;
  _QWORD block[5];
  _QWORD v17[5];
  _QWORD v18[3];
  _QWORD *v19;
  _QWORD v20[3];
  _QWORD *v21;
  _QWORD v22[3];
  _QWORD *v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v20[0] = &off_1E42CEF18;
  v20[1] = a2;
  v21 = v20;
  v18[0] = &off_1E42CEF60;
  v18[1] = a2;
  v19 = v18;
  v23 = v22;
  v22[0] = &off_1E42CEF60;
  v22[1] = a2;
  std::__function::__func<md::LoadingStatusLogic::runBeforeLayout(md::LayoutContext const&,md::LogicDependencies<gdc::TypeList<md::SceneContext>,gdc::TypeList<md::IdentifiedResourceContext>>::ResolvedDependencies const&,md::LoadingStatusContext &)::$_0,std::allocator<md::LoadingStatusLogic::runBeforeLayout(md::LayoutContext const&,md::LogicDependencies<gdc::TypeList<md::SceneContext>,gdc::TypeList<md::IdentifiedResourceContext>>::ResolvedDependencies const&,md::LoadingStatusContext &)::$_0>,void ()(void)>::operator()((uint64_t)v20);
  v6 = v19;
  if (v19 == v18)
  {
    v7 = 4;
    v6 = v18;
  }
  else
  {
    if (!v19)
      goto LABEL_6;
    v7 = 5;
  }
  (*(void (**)(void))(*v6 + 8 * v7))();
LABEL_6:
  v8 = v21;
  if (v21 == v20)
  {
    v9 = 4;
    v8 = v20;
  }
  else
  {
    if (!v21)
      goto LABEL_11;
    v9 = 5;
  }
  (*(void (**)(void))(*v8 + 8 * v9))();
LABEL_11:
  v10 = *(_QWORD *)(a3 + 8);
  v11 = md::SceneContext::sceneStatus(**(md::SceneContext ***)a3);
  v12 = v11;
  if (v10)
  {
    v13 = *(unsigned __int8 *)(v10 + 268);
    if (v11 < 2)
      goto LABEL_13;
  }
  else
  {
    v13 = 1;
    if (v11 < 2)
    {
LABEL_13:
      block[0] = MEMORY[0x1E0C809B0];
      block[1] = 3221225472;
      block[2] = ___ZN2md18LoadingStatusLogic15runBeforeLayoutERKNS_13LayoutContextERKNS_17LogicDependenciesIJN3gdc8TypeListIJNS_12SceneContextEEEENS6_IJNS_25IdentifiedResourceContextEEEEEE20ResolvedDependenciesERNS_20LoadingStatusContextE_block_invoke_1;
      block[3] = &__block_descriptor_40_e5_v8__0l;
      block[4] = a2;
      if (md::LoadingStatusLogic::runBeforeLayout(md::LayoutContext const&,md::LogicDependencies<gdc::TypeList<md::SceneContext>,gdc::TypeList<md::IdentifiedResourceContext>>::ResolvedDependencies const&,md::LoadingStatusContext &)::once != -1)
        dispatch_once(&md::LoadingStatusLogic::runBeforeLayout(md::LayoutContext const&,md::LogicDependencies<gdc::TypeList<md::SceneContext>,gdc::TypeList<md::IdentifiedResourceContext>>::ResolvedDependencies const&,md::LoadingStatusContext &)::once, block);
      goto LABEL_23;
    }
  }
  if (v11 != 2)
    goto LABEL_23;
  if (v13 == 2)
  {
    v12 = 1;
    goto LABEL_23;
  }
  if (v13 != 3)
  {
    v17[0] = MEMORY[0x1E0C809B0];
    v17[1] = 3221225472;
    v17[2] = ___ZN2md18LoadingStatusLogic15runBeforeLayoutERKNS_13LayoutContextERKNS_17LogicDependenciesIJN3gdc8TypeListIJNS_12SceneContextEEEENS6_IJNS_25IdentifiedResourceContextEEEEEE20ResolvedDependenciesERNS_20LoadingStatusContextE_block_invoke;
    v17[3] = &__block_descriptor_40_e5_v8__0l;
    v17[4] = a2;
    if (md::LoadingStatusLogic::runBeforeLayout(md::LayoutContext const&,md::LogicDependencies<gdc::TypeList<md::SceneContext>,gdc::TypeList<md::IdentifiedResourceContext>>::ResolvedDependencies const&,md::LoadingStatusContext &)::once != -1)
      dispatch_once(&md::LoadingStatusLogic::runBeforeLayout(md::LayoutContext const&,md::LogicDependencies<gdc::TypeList<md::SceneContext>,gdc::TypeList<md::IdentifiedResourceContext>>::ResolvedDependencies const&,md::LoadingStatusContext &)::once, v17);
LABEL_23:
    if (*(_BYTE *)(a1 + 128) && v12 != 3 && v12 != 4)
      goto LABEL_27;
    goto LABEL_26;
  }
  v12 = 4;
LABEL_26:
  gdc::LoadingStatusTracker::setSceneStatus(*(_QWORD *)(a1 + 120), v12);
LABEL_27:
  if (!v23)
  {
    std::__throw_bad_function_call[abi:nn180100]();
    __break(1u);
  }
  (*(void (**)(_QWORD *))(*v23 + 48))(v23);
  result = v23;
  if (v23 == v22)
  {
    v15 = 4;
    result = v22;
  }
  else
  {
    if (!v23)
      return result;
    v15 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v15))();
}

void sub_19F125FF8(_Unwind_Exception *a1)
{
  uint64_t v1;

  geo::ScopedFunctions::~ScopedFunctions((geo::ScopedFunctions *)(v1 - 88));
  _Unwind_Resume(a1);
}

void sub_19F12600C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,char *a23,char a24,uint64_t a25,uint64_t a26,char *a27)
{
  _QWORD *v27;
  uint64_t v28;
  _QWORD *v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;

  v30 = *(_QWORD **)(v28 - 64);
  if (v30 == v27)
  {
    v31 = 4;
    v30 = (_QWORD *)(v28 - 88);
  }
  else
  {
    if (!v30)
      goto LABEL_6;
    v31 = 5;
  }
  (*(void (**)(void))(*v30 + 8 * v31))();
LABEL_6:
  v32 = a23;
  if (a23 == &a20)
  {
    v33 = 4;
    v32 = &a20;
  }
  else
  {
    if (!a23)
      goto LABEL_11;
    v33 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v32 + 8 * v33))();
LABEL_11:
  v34 = a27;
  if (a27 == &a24)
  {
    v35 = 4;
    v34 = &a24;
  }
  else
  {
    if (!a27)
      goto LABEL_16;
    v35 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v34 + 8 * v35))();
LABEL_16:
  _Unwind_Resume(exception_object);
}

_QWORD *md::LocalNorthLogic::runBeforeLayout(uint64_t a1, uint64_t a2, uint64_t **a3, unint64_t *a4)
{
  __n128 v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t *v14;
  _QWORD *v15;
  _BYTE *v16;
  _BYTE *v17;
  uint64_t v18;
  double v19;
  long double v20;
  gss::Allocator *v21;
  uint64_t v22;
  unsigned __int8 v23;
  _WORD *v24;
  _WORD *v25;
  uint64_t *v26;
  _WORD *v27;
  double v28;
  double v29;
  uint64_t *v30;
  uint64_t *v31;
  uint64_t *v32;
  unsigned int v33;
  int v34;
  uint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *p_shared_owners;
  unint64_t v38;
  unsigned int v39;
  double v40;
  double v41;
  double v42;
  BOOL v43;
  unint64_t *v45;
  unint64_t v46;
  uint64_t *v47;
  uint64_t *v48;
  uint64_t v49;
  unsigned __int8 v50;
  _WORD *v51;
  _WORD *v52;
  uint64_t *v53;
  _WORD *v54;
  uint64_t *v55;
  uint64_t *v56;
  uint64_t *v57;
  uint64_t v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  unsigned int v62;
  double v63;
  double v64;
  double v65;
  BOOL v66;
  unint64_t *v68;
  unint64_t v69;
  uint64_t *v70;
  uint64_t *v71;
  BOOL v72;
  uint64_t v73;
  _QWORD *v74;
  _QWORD *v75;
  _QWORD *v76;
  uint64_t v77;
  gss::Allocator *v78;
  uint64_t v79;
  std::__shared_weak_count *v80;
  unint64_t *v81;
  unint64_t v82;
  std::__shared_weak_count *v83;
  unint64_t *v84;
  unint64_t v85;
  uint64_t v86;
  double v87;
  std::__shared_weak_count *v88;
  unint64_t *v89;
  std::__shared_weak_count *v90;
  std::__shared_weak_count *v91;
  std::__shared_weak_count *v92;
  std::__shared_weak_count *v93;
  std::__shared_weak_count *v94;
  unsigned __int8 v95;
  int v96;
  unint64_t *v97;
  unint64_t v98;
  uint64_t v99;
  _QWORD *result;
  uint64_t v101;
  unsigned __int8 v102;
  unint64_t *v103;
  unint64_t v104;
  unint64_t *v105;
  unint64_t v106;
  unint64_t v107;
  std::__shared_weak_count *v108;
  unint64_t *v109;
  unint64_t v110;
  unint64_t v111;
  unint64_t *v112;
  unint64_t v113;
  uint64_t v114;
  float *v115;
  float v116;
  BOOL v117;
  unsigned int v118;
  float *v119;
  float v120;
  unint64_t v121;
  unint64_t *v122;
  double v123;
  char v124;
  __n128 v125;
  __int128 v126;
  char *v127;
  uint64_t v128;
  unsigned __int8 v129;
  char v130;
  _QWORD v131[3];
  _QWORD *v132;
  _QWORD v133[3];
  _QWORD *v134;
  _QWORD v135[3];
  _QWORD *v136;
  _QWORD v137[3];
  _QWORD *v138;
  uint64_t v139;

  v139 = *MEMORY[0x1E0C80C00];
  v135[0] = &off_1E42CC4E8;
  v135[1] = a2;
  v136 = v135;
  v133[0] = &off_1E42CC530;
  v133[1] = a2;
  v134 = v133;
  v138 = v137;
  v137[0] = &off_1E42CC530;
  v137[1] = a2;
  _ZNSt3__110__function6__funcIZN2md15LocalNorthLogic15runBeforeLayoutERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_17StyleLogicContextENS2_12SceneContextENS2_13CameraContextEEEENS9_IJEEEEE20ResolvedDependenciesERNS2_22LocalNorthLogicContextEE3__0NS_9allocatorISL_EEFvvEEclEv((uint64_t)v135);
  v8 = v134;
  if (v134 == v133)
  {
    v9 = 4;
    v8 = v133;
  }
  else
  {
    if (!v134)
      goto LABEL_6;
    v9 = 5;
  }
  (*(void (**)(void))(*v8 + 8 * v9))();
LABEL_6:
  v10 = v136;
  if (v136 == v135)
  {
    v11 = 4;
    v10 = v135;
  }
  else
  {
    if (!v136)
      goto LABEL_11;
    v11 = 5;
  }
  (*(void (**)(void))(*v10 + 8 * v11))();
LABEL_11:
  v124 = 0;
  v12 = *a3;
  if (!*((_BYTE *)*a3 + 82))
    goto LABEL_144;
  v14 = a3[1];
  v13 = a3[2];
  v131[0] = &off_1E42CC578;
  v131[1] = &v124;
  v15 = v131;
  v132 = v131;
  v16 = (_BYTE *)v12[6];
  v17 = (_BYTE *)v12[7];
  if (v16 == v17)
  {
    v18 = 4;
LABEL_20:
    (*(void (**)(void))(*v15 + 8 * v18))();
    goto LABEL_21;
  }
  do
  {
    LOBYTE(v126) = *v16;
    if (!v132)
    {
      std::__throw_bad_function_call[abi:nn180100]();
      goto LABEL_193;
    }
    (*(void (**)(_QWORD *, __int128 *))(*v132 + 48))(v132, &v126);
    ++v16;
  }
  while (v16 != v17);
  v15 = v132;
  if (v132 == v131)
  {
    v18 = 4;
    v15 = v131;
    goto LABEL_20;
  }
  if (v132)
  {
    v18 = 5;
    goto LABEL_20;
  }
LABEL_21:
  v19 = *((double *)v13 + 2);
  v20 = tan(*((double *)v13 + 1) * 0.5 + 0.785398163);
  v7.n128_f64[0] = log(v20);
  v22 = *v14;
  if ((v23 & 1) == 0)
  {
    v121 = v7.n128_u64[0];
    v7.n128_u64[0] = v121;
    if ((_DWORD)v21)
    {
      qword_1ECE2F300 = 0;
      qword_1ECE2F2F8 = 0;
      md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet = (uint64_t)&qword_1ECE2F2F8;
      __cxa_atexit((void (*)(void *))std::set<gdc::LayerDataWithWorld>::~set[abi:nn180100], &md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet, &dword_19F029000);
      v7.n128_u64[0] = v121;
    }
  }
  v24 = *(_WORD **)(v22 + 48);
  v25 = *(_WORD **)(v22 + 56);
  v26 = &md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet;
  if (v24 != v25)
  {
    v27 = *(_WORD **)(v22 + 48);
    while (*v27 != 29)
    {
      v27 += 16;
      if (v27 == v25)
        goto LABEL_33;
    }
    if (v27 == v25)
    {
      v26 = &md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet;
    }
    else
    {
      while (*v24 != 29)
      {
        v24 += 16;
        if (v24 == v25)
        {
          v24 = *(_WORD **)(v22 + 56);
          break;
        }
      }
      v26 = (uint64_t *)(v24 + 4);
    }
  }
LABEL_33:
  v122 = a4;
  v28 = v19 * 0.159154943 + 0.5;
  v29 = v7.n128_f64[0] * 0.159154943 + 0.5;
  v32 = (uint64_t *)*v26;
  v31 = v26 + 1;
  v30 = v32;
  if (v32 != v31)
  {
    v33 = 0;
    v34 = -1;
    while (1)
    {
      v35 = v30[4];
      v36 = (std::__shared_weak_count *)v30[5];
      if (v36)
      {
        p_shared_owners = (unint64_t *)&v36->__shared_owners_;
        do
          v38 = __ldxr(p_shared_owners);
        while (__stxr(v38 + 1, p_shared_owners));
      }
      if (v35)
      {
        v39 = *(unsigned __int8 *)(v35 + 169);
        if (v33 < v39)
        {
          v40 = 1.0 / (double)(1 << v39);
          v41 = v40 * (double)*(int *)(v35 + 176);
          if (v28 >= v41)
          {
            v42 = v40 * (double)((1 << v39) + ~*(_DWORD *)(v35 + 172));
            v43 = v28 >= v41 + v40 || v29 < v42;
            if (!v43 && v29 < v42 + v40)
            {
              v34 = *(_DWORD *)(v35 + 716);
              v33 = *(unsigned __int8 *)(v35 + 169);
            }
          }
        }
      }
      if (!v36)
        goto LABEL_55;
      v45 = (unint64_t *)&v36->__shared_owners_;
      do
        v46 = __ldaxr(v45);
      while (__stlxr(v46 - 1, v45));
      if (!v46)
      {
        ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
        std::__shared_weak_count::__release_weak(v36);
        v47 = (uint64_t *)v30[1];
        if (!v47)
        {
          do
          {
LABEL_59:
            v48 = (uint64_t *)v30[2];
            v72 = *v48 == (_QWORD)v30;
            v30 = v48;
          }
          while (!v72);
          goto LABEL_35;
        }
      }
      else
      {
LABEL_55:
        v47 = (uint64_t *)v30[1];
        if (!v47)
          goto LABEL_59;
      }
      do
      {
        v48 = v47;
        v47 = (uint64_t *)*v47;
      }
      while (v47);
LABEL_35:
      v30 = v48;
      if (v48 == v31)
        goto LABEL_63;
    }
  }
  v33 = 0;
  v34 = -1;
LABEL_63:
  v49 = *v14;
  if ((v50 & 1) == 0)
  {
    if ((_DWORD)v21)
    {
      qword_1ECE2F300 = 0;
      qword_1ECE2F2F8 = 0;
      md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet = (uint64_t)&qword_1ECE2F2F8;
      __cxa_atexit((void (*)(void *))std::set<gdc::LayerDataWithWorld>::~set[abi:nn180100], &md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet, &dword_19F029000);
    }
  }
  v51 = *(_WORD **)(v49 + 48);
  v52 = *(_WORD **)(v49 + 56);
  v53 = &md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet;
  if (v51 != v52)
  {
    v54 = *(_WORD **)(v49 + 48);
    while (*v54 != 28)
    {
      v54 += 16;
      if (v54 == v52)
        goto LABEL_75;
    }
    if (v54 == v52)
    {
      v53 = &md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet;
    }
    else
    {
      while (*v51 != 28)
      {
        v51 += 16;
        if (v51 == v52)
        {
          v51 = *(_WORD **)(v49 + 56);
          break;
        }
      }
      v53 = (uint64_t *)(v51 + 4);
    }
  }
LABEL_75:
  v57 = (uint64_t *)*v53;
  v55 = v53 + 1;
  v56 = v57;
  if (v57 != v55)
  {
    while (2)
    {
      v58 = v56[4];
      v59 = (std::__shared_weak_count *)v56[5];
      if (v59)
      {
        v60 = (unint64_t *)&v59->__shared_owners_;
        do
          v61 = __ldxr(v60);
        while (__stxr(v61 + 1, v60));
      }
      if (v58)
      {
        v62 = *(unsigned __int8 *)(v58 + 169);
        if (v33 < v62)
        {
          v63 = 1.0 / (double)(1 << v62);
          v64 = v63 * (double)*(int *)(v58 + 176);
          if (v28 >= v64)
          {
            v65 = v63 * (double)((1 << v62) + ~*(_DWORD *)(v58 + 172));
            v66 = v28 >= v64 + v63 || v29 < v65;
            if (!v66 && v29 < v65 + v63)
            {
              v34 = *(_DWORD *)(v58 + 716);
              v33 = *(unsigned __int8 *)(v58 + 169);
            }
          }
        }
      }
      if (!v59)
        goto LABEL_97;
      v68 = (unint64_t *)&v59->__shared_owners_;
      do
        v69 = __ldaxr(v68);
      while (__stlxr(v69 - 1, v68));
      if (!v69)
      {
        ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
        std::__shared_weak_count::__release_weak(v59);
        v70 = (uint64_t *)v56[1];
        if (v70)
          goto LABEL_98;
      }
      else
      {
LABEL_97:
        v70 = (uint64_t *)v56[1];
        if (v70)
        {
          do
          {
LABEL_98:
            v71 = v70;
            v70 = (uint64_t *)*v70;
          }
          while (v70);
          goto LABEL_77;
        }
      }
      do
      {
        v71 = (uint64_t *)v56[2];
        v72 = *v71 == (_QWORD)v56;
        v56 = v71;
      }
      while (!v72);
LABEL_77:
      v56 = v71;
      if (v71 == v55)
        break;
      continue;
    }
  }
  v72 = v34 == *(_DWORD *)(a1 + 168) && v124 == 0;
  if (!v72)
  {
    *(_DWORD *)(a1 + 168) = v34;
    v73 = gss::Allocator::instance(v21);
    v74 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v73 + 16))(v73, 16, 4);
    v75 = v74;
    if (v74)
      *v74 = 0xF00000005;
    v74[1] = ((unint64_t)(unsigned __int16)v34 << 32) | 0x29;
    v126 = 0uLL;
    v127 = 0;
    v128 = v73;
    v76 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v73 + 16))(v73, 16, 4);
    *(_QWORD *)&v126 = v76;
    *((_QWORD *)&v126 + 1) = v76;
    v127 = (char *)(v76 + 2);
    if (v76)
      *v76 = *v75;
    v76[1] = v75[1];
    *((_QWORD *)&v126 + 1) = v76 + 2;
    gss::FeatureAttributeSet::sort((gss::FeatureAttributeSet *)&v126);
    if ((__int128 *)(a1 + 120) != &v126)
      std::vector<std::pair<gss::StyleAttribute,unsigned short>,geo::StdAllocator<std::pair<gss::StyleAttribute,unsigned short>,gss::Allocator>>::__assign_with_size[abi:nn180100]<std::pair<gss::StyleAttribute,unsigned short>*,std::pair<gss::StyleAttribute,unsigned short>*>((uint64_t *)(a1 + 120), v126, *((_QWORD **)&v126 + 1), (uint64_t)(*((_QWORD *)&v126 + 1) - v126) >> 3);
    if ((_QWORD)v126)
    {
      *((_QWORD *)&v126 + 1) = v126;
      (*(void (**)(uint64_t, _QWORD, char *))(*(_QWORD *)v128 + 40))(v128, v126, &v127[-v126]);
    }
    (*(void (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)v73 + 40))(v73, v75, 16);
    v77 = *v12;
    if (*v12)
    {
      *(_QWORD *)((char *)&v126 + 7) = 0;
      *(_QWORD *)&v126 = 0;
      HIBYTE(v126) = 1;
      gss::StylesheetManager<gss::PropertyID>::styleQueryForFeatureAttributes(v125.n128_u64, v77, (gss::FeatureAttributeSet *)(a1 + 120), (gss::QueryOverrides *)&v126);
      if (!BYTE14(v126) && (_QWORD)v126)
      {
        v79 = gss::Allocator::instance(v78);
        (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v79 + 40))(v79, v126, WORD6(v126));
      }
      v7 = v125;
      v125 = 0uLL;
      v80 = *(std::__shared_weak_count **)(a1 + 160);
      *(__n128 *)(a1 + 152) = v7;
      if (v80)
      {
        v81 = (unint64_t *)&v80->__shared_owners_;
        do
          v82 = __ldaxr(v81);
        while (__stlxr(v82 - 1, v81));
        if (!v82)
        {
          ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
          std::__shared_weak_count::__release_weak(v80);
        }
      }
      v83 = (std::__shared_weak_count *)v125.n128_u64[1];
      if (v125.n128_u64[1])
      {
        v84 = (unint64_t *)(v125.n128_u64[1] + 8);
        do
          v85 = __ldaxr(v84);
        while (__stlxr(v85 - 1, v84));
        if (!v85)
        {
          ((void (*)(std::__shared_weak_count *))v83->__on_zero_shared)(v83);
          std::__shared_weak_count::__release_weak(v83);
        }
      }
    }
  }
  v86 = *(_QWORD *)(a1 + 152);
  v87 = 0.0;
  if (v86)
  {
    v88 = *(std::__shared_weak_count **)(v86 + 16);
    v89 = v122;
    if (v88)
    {
      v90 = std::__shared_weak_count::lock(v88);
      if (v90)
      {
        v91 = v90;
        if (*(_QWORD *)(v86 + 8))
        {
          v92 = *(std::__shared_weak_count **)(v86 + 16);
          if (v92 && (v93 = std::__shared_weak_count::lock(v92)) != 0)
          {
            v94 = v93;
            v95 = atomic_load((unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v86 + 8) + 16) + 2786));
            v96 = v95 & 1;
            v97 = (unint64_t *)&v93->__shared_owners_;
            do
              v98 = __ldaxr(v97);
            while (__stlxr(v98 - 1, v97));
            if (!v98)
            {
              ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
              std::__shared_weak_count::__release_weak(v94);
            }
          }
          else
          {
            v102 = atomic_load((unsigned __int8 *)(MEMORY[0x10] + 2786));
            v96 = v102 & 1;
          }
          v103 = (unint64_t *)&v91->__shared_owners_;
          do
            v104 = __ldaxr(v103);
          while (__stlxr(v104 - 1, v103));
          if (v104)
          {
            if (v96)
            {
LABEL_162:
              v107 = *(_QWORD *)(a1 + 152);
              v108 = *(std::__shared_weak_count **)(a1 + 160);
              v125.n128_u64[0] = v107;
              v125.n128_u64[1] = (unint64_t)v108;
              if (v108)
              {
                v109 = (unint64_t *)&v108->__shared_owners_;
                do
                  v110 = __ldxr(v109);
                while (__stxr(v110 + 1, v109));
                *((_QWORD *)&v126 + 1) = v108;
                do
                  v111 = __ldxr(v109);
                while (__stxr(v111 + 1, v109));
              }
              else
              {
                *((_QWORD *)&v126 + 1) = 0;
              }
              v127 = 0;
              v128 = 0;
              *(_QWORD *)&v126 = v107;
              v129 = 0;
              if (v107)
                LODWORD(v107) = (*(uint64_t (**)(unint64_t, char **))(*(_QWORD *)v107 + 48))(v107, &v127);
              v129 = v107;
              if (v108)
              {
                v112 = (unint64_t *)&v108->__shared_owners_;
                do
                  v113 = __ldaxr(v112);
                while (__stlxr(v113 - 1, v112));
                if (!v113)
                {
                  ((void (*)(std::__shared_weak_count *))v108->__on_zero_shared)(v108);
                  std::__shared_weak_count::__release_weak(v108);
                }
                LODWORD(v107) = v129;
              }
              if ((_DWORD)v107)
              {
                v114 = *(_QWORD *)(v126 + 24);
                v115 = *(float **)v114;
                if (*(_QWORD *)v114
                  && (v116 = *v115, LODWORD(v115) = *v115 == 1.0, *(_BYTE *)(v114 + 10))
                  && (v116 != 0.0 ? (v117 = v116 == 1.0) : (v117 = 1), !v117)
                  || (v118 = *(unsigned __int8 *)(v114 + v115 + 11), v116 = 0.0, v118 == 2))
                {
                  v125.n128_u8[0] = 1;
                  v130 = 1;
                  v119 = (float *)gss::RenderStyle<gss::PropertyID>::styleValueForKey<float>(v114, 0x10Au, 0, &v125);
                  v120 = *v119
                       + (float)((float)(*(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKey<float>(v114, 0x10Au, 1u, &v130)- *v119)* v116);
                }
                else
                {
                  v120 = *(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKey<float>(*(_QWORD *)(v126 + 24), 0x10Au, v118, 0);
                }
                v87 = v120;
              }
              else
              {
                v87 = 0.0;
              }
              gss::QueryableLocker<gss::PropertyID>::~QueryableLocker((uint64_t)&v126);
            }
          }
          else
          {
            ((void (*)(std::__shared_weak_count *))v91->__on_zero_shared)(v91);
            std::__shared_weak_count::__release_weak(v91);
            if ((v96 & 1) != 0)
              goto LABEL_162;
          }
        }
        else
        {
          v105 = (unint64_t *)&v90->__shared_owners_;
          do
            v106 = __ldaxr(v105);
          while (__stlxr(v106 - 1, v105));
          if (!v106)
          {
            ((void (*)(std::__shared_weak_count *))v90->__on_zero_shared)(v90);
            std::__shared_weak_count::__release_weak(v91);
          }
        }
      }
    }
  }
  else
  {
    v89 = v122;
  }
  v7.n128_u64[0] = *v89;
  if (*(double *)v89 != v87)
  {
    *(double *)v89 = v87;
    v99 = *(_QWORD *)(a1 + 200);
    if (v99)
    {
      v123 = v87;
      (*(void (**)(uint64_t, double *, double))(*(_QWORD *)v99 + 48))(v99, &v123, v7.n128_f64[0]);
    }
  }
LABEL_144:
  if (!v138)
  {
    std::__throw_bad_function_call[abi:nn180100]();
LABEL_193:
    __break(1u);
  }
  (*(void (**)(_QWORD *, __n128))(*v138 + 48))(v138, v7);
  result = v138;
  if (v138 == v137)
  {
    v101 = 4;
    result = v137;
    return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v101))();
  }
  else if (v138)
  {
    v101 = 5;
    return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v101))();
  }
  return result;
}

