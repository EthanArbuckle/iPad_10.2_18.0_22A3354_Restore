uint64_t karo::AsyncRequestManagerTemplate<altitude::KeyPair<altitude::StampedTileKey>,karo::AsyncRequestManagerNoArgs>::requestT@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, unsigned int a5@<W4>, char a6@<W5>, uint64_t a7@<X6>, _QWORD *a8@<X8>)
{
  unsigned int *v16;
  unsigned int v17;
  unsigned int *v18;
  std::__shared_weak_count *v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  unsigned int *v22;
  unsigned int v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  unsigned int *v28;
  std::__shared_weak_count *v29;

  pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 40));
  if (!a3)
    a3 = *(_DWORD *)(a1 + 88) + 1;
  (*(void (**)(unsigned int **__return_ptr, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 96))(&v28, a1, a2, a7);
  v16 = v28;
  v17 = atomic_load(v28 + 4);
  if (v17 != (_DWORD)a4)
    (*(void (**)(unsigned int *, uint64_t))(*(_QWORD *)v28 + 24))(v28, a4);
  v16[45] = a3;
  v16[46] = a5;
  *((_BYTE *)v16 + 176) = a6;
  v18 = v28;
  v19 = v29;
  *a8 = &off_1E42C2D08;
  a8[1] = v18;
  a8[2] = v19;
  if (v19)
  {
    p_shared_owners = (unint64_t *)&v19->__shared_owners_;
    do
      v21 = __ldxr(p_shared_owners);
    while (__stxr(v21 + 1, p_shared_owners));
  }
  if (v18)
  {
    v22 = v18 + 32;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 + 1, v22));
  }
  v24 = v29;
  if (v29)
  {
    v25 = (unint64_t *)&v29->__shared_owners_;
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  return pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 40));
}

uint64_t karo::AsyncRequestManagerTemplate<altitude::KeyPair<altitude::StampedTileKey>,karo::AsyncRequestManagerNoArgs>::waitOnRequest(uint64_t a1, _DWORD *a2, unsigned int a3)
{
  _DWORD *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;

  pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 40));
  v6 = std::__tree<std::__value_type<altitude::KeyPair<altitude::StampedTileKey>,std::shared_ptr<karo::AsyncRequestManager::Request>>,std::__map_value_compare<altitude::KeyPair<altitude::StampedTileKey>,std::__value_type<altitude::KeyPair<altitude::StampedTileKey>,std::shared_ptr<karo::AsyncRequestManager::Request>>,std::less<altitude::KeyPair<altitude::StampedTileKey>>,true>,std::allocator<std::__value_type<altitude::KeyPair<altitude::StampedTileKey>,std::shared_ptr<karo::AsyncRequestManager::Request>>>>::find<altitude::KeyPair<altitude::StampedTileKey>>(a1 + 64, a2);
  if ((_DWORD *)(a1 + 72) == v6)
  {
    pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 40));
    return 0;
  }
  else
  {
    v8 = *((_QWORD *)v6 + 13);
    v7 = (std::__shared_weak_count *)*((_QWORD *)v6 + 14);
    if (v7)
    {
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v10 = __ldxr(p_shared_owners);
      while (__stxr(v10 + 1, p_shared_owners));
    }
    pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 40));
    if (v8)
    {
      karo::Job::waitToFinish((karo::Job *)v8, a3);
      pthread_mutex_lock(*(pthread_mutex_t **)(v8 + 152));
      v11 = *(_DWORD *)(v8 + 160) & 1;
      pthread_mutex_unlock(*(pthread_mutex_t **)(v8 + 152));
      if (!v7)
        return v11;
    }
    else
    {
      v11 = 0;
      if (!v7)
        return v11;
    }
    v12 = (unint64_t *)&v7->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  return v11;
}

void karo::AsyncRequestManagerTemplate<altitude::KeyPair<altitude::StampedTileKey>,karo::AsyncRequestManagerNoArgs>::getRequest(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t **a4@<X8>)
{
  _QWORD **v8;
  uint64_t **v9;
  uint64_t **v10;
  uint64_t *v11;
  uint64_t *v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  uint64_t *v16;
  uint64_t *v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  uint64_t **v25;
  char *v26;
  unsigned int v27;
  unsigned int v28;
  BOOL v29;
  unsigned int v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int v33;
  BOOL v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int v37;
  char *v38;
  __int128 v39;
  _QWORD *v40;
  uint64_t *v41;
  unint64_t *p_shared_owners;
  unint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t *v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t *v53;
  std::__shared_weak_count *v54;

  *a4 = 0;
  a4[1] = 0;
  v8 = (_QWORD **)(a1 + 8);
  v9 = (uint64_t **)std::__tree<std::__value_type<altitude::KeyPair<altitude::StampedTileKey>,std::shared_ptr<karo::AsyncRequestManager::Request>>,std::__map_value_compare<altitude::KeyPair<altitude::StampedTileKey>,std::__value_type<altitude::KeyPair<altitude::StampedTileKey>,std::shared_ptr<karo::AsyncRequestManager::Request>>,std::less<altitude::KeyPair<altitude::StampedTileKey>>,true>,std::allocator<std::__value_type<altitude::KeyPair<altitude::StampedTileKey>,std::shared_ptr<karo::AsyncRequestManager::Request>>>>::find<altitude::KeyPair<altitude::StampedTileKey>>((uint64_t)(a1 + 8), (_DWORD *)a2);
  v10 = v9;
  if (a1 + 9 != v9)
  {
    v12 = v9[13];
    v11 = v9[14];
    if (v11)
    {
      v13 = (unint64_t *)(v11 + 1);
      do
        v14 = __ldxr(v13);
      while (__stxr(v14 + 1, v13));
    }
    *a4 = v12;
    a4[1] = v11;
    return;
  }
  (*(void (**)(uint64_t **__return_ptr, _QWORD *, uint64_t, uint64_t))(*a1 + 64))(&v53, a1, a2, a3);
  v16 = v53;
  v15 = v54;
  *a4 = v53;
  a4[1] = (uint64_t *)v15;
  v17 = *v10;
  if (*v10)
  {
    v18 = *(_DWORD *)(a2 + 52);
    v19 = *(_DWORD *)(a2 + 56);
    v20 = *(_DWORD *)(a2 + 60);
    v21 = *(_DWORD *)(a2 + 64);
    v22 = *(_DWORD *)(a2 + 36);
    v23 = *(_DWORD *)(a2 + 40);
    v24 = *(_DWORD *)(a2 + 44);
    while (1)
    {
      v26 = (char *)v17;
      v27 = *((_DWORD *)v17 + 21);
      if (v18 == v27 && v19 == *((_DWORD *)v26 + 22) && v20 == *((_DWORD *)v26 + 23) && *((_DWORD *)v26 + 24) == v21)
      {
        v28 = *((_DWORD *)v26 + 17);
        v29 = v22 >= v28;
        if (v22 == v28 && (v30 = *((_DWORD *)v26 + 18), v29 = v23 >= v30, v23 == v30))
        {
          if (v24 >= *((_DWORD *)v26 + 19))
            goto LABEL_31;
        }
        else if (v29)
        {
          goto LABEL_31;
        }
LABEL_9:
        v17 = *(uint64_t **)v26;
        v25 = (uint64_t **)v26;
        if (!*(_QWORD *)v26)
          goto LABEL_48;
      }
      else
      {
        if (v18 < v27)
          goto LABEL_9;
        if (v18 <= v27)
        {
          v31 = *((_DWORD *)v26 + 22);
          if (v19 < v31)
            goto LABEL_9;
          if (v19 <= v31)
          {
            v32 = *((_DWORD *)v26 + 23);
            if (v20 < v32 || v20 <= v32 && v21 < *((_DWORD *)v26 + 24))
              goto LABEL_9;
          }
        }
        if (v18 != v27 || *((_DWORD *)v26 + 22) != v19 || *((_DWORD *)v26 + 23) != v20)
        {
LABEL_38:
          if (v27 >= v18)
          {
            if (v27 > v18)
              goto LABEL_51;
            v36 = *((_DWORD *)v26 + 22);
            if (v36 >= v19)
            {
              if (v36 > v19)
                goto LABEL_51;
              v37 = *((_DWORD *)v26 + 23);
              if (v37 >= v20 && (v37 > v20 || *((_DWORD *)v26 + 24) >= v21))
                goto LABEL_51;
            }
          }
          goto LABEL_45;
        }
LABEL_31:
        if (v21 != *((_DWORD *)v26 + 24))
          goto LABEL_38;
        v33 = *((_DWORD *)v26 + 17);
        v34 = v33 >= v22;
        if (v33 == v22)
        {
          v35 = *((_DWORD *)v26 + 18);
          v34 = v35 >= v23;
          if (v35 == v23)
            v34 = *((_DWORD *)v26 + 19) >= v24;
        }
        if (v34)
          goto LABEL_51;
LABEL_45:
        v25 = (uint64_t **)(v26 + 8);
        v17 = (uint64_t *)*((_QWORD *)v26 + 1);
        if (!v17)
          goto LABEL_48;
      }
    }
  }
  v26 = (char *)v10;
  v25 = v10;
LABEL_48:
  v38 = v26;
  v26 = (char *)operator new(0x78uLL);
  v39 = *(_OWORD *)(a2 + 16);
  *((_OWORD *)v26 + 2) = *(_OWORD *)a2;
  *((_OWORD *)v26 + 3) = v39;
  *((_OWORD *)v26 + 4) = *(_OWORD *)(a2 + 32);
  *((_DWORD *)v26 + 20) = *(_DWORD *)(a2 + 48);
  *(_OWORD *)(v26 + 84) = *(_OWORD *)(a2 + 52);
  *((_DWORD *)v26 + 25) = *(_DWORD *)(a2 + 68);
  *((_QWORD *)v26 + 13) = 0;
  *((_QWORD *)v26 + 14) = 0;
  *(_QWORD *)v26 = 0;
  *((_QWORD *)v26 + 1) = 0;
  *((_QWORD *)v26 + 2) = v38;
  *v25 = (uint64_t *)v26;
  v40 = (_QWORD *)**v8;
  v41 = (uint64_t *)v26;
  if (v40)
  {
    *v8 = v40;
    v41 = *v25;
  }
  std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*v10, v41);
  ++a1[10];
LABEL_51:
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v43 = __ldxr(p_shared_owners);
    while (__stxr(v43 + 1, p_shared_owners));
  }
  v44 = (std::__shared_weak_count *)*((_QWORD *)v26 + 14);
  *((_QWORD *)v26 + 13) = v16;
  *((_QWORD *)v26 + 14) = v15;
  if (v44)
  {
    v45 = (unint64_t *)&v44->__shared_owners_;
    do
      v46 = __ldaxr(v45);
    while (__stlxr(v46 - 1, v45));
    if (!v46)
    {
      ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
      std::__shared_weak_count::__release_weak(v44);
    }
  }
  v47 = a1[6];
  if (v47)
  {
    v48 = *a4;
    v49 = (std::__shared_weak_count *)a4[1];
    v53 = v48;
    v54 = v49;
    if (v49)
    {
      v50 = (unint64_t *)&v49->__shared_owners_;
      do
        v51 = __ldxr(v50);
      while (__stxr(v51 + 1, v50));
      karo::JobManager::queueJob(v47, &v53);
      do
        v52 = __ldaxr(v50);
      while (__stlxr(v52 - 1, v50));
      if (!v52)
      {
        ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
        std::__shared_weak_count::__release_weak(v49);
      }
    }
    else
    {
      karo::JobManager::queueJob(v47, &v53);
    }
  }
}

void altitude::GenericCacheNode<altitude::StampedTileKey,altitude::TrafficDynamicData>::requestCached(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  __int128 v10;
  int v11;
  int8x8_t v12;
  unint64_t v13;
  uint8x8_t v14;
  unint64_t v15;
  std::__shared_weak_count **v16;
  std::__shared_weak_count *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t shared_owners;
  std::__shared_weak_count *shared_weak_owners;
  uint64_t v22;
  unint64_t *p_shared_weak_owners;
  unint64_t v24;
  unint64_t *p_shared_owners;
  unint64_t v26;
  void *v27;
  std::__shared_weak_count *v28;
  _QWORD *v29;
  std::__shared_weak_count *v30;
  uint64_t v31;
  unint64_t *v32;
  unint64_t v33;
  std::__shared_weak_count *v34;
  int *i;
  _QWORD *v36;
  std::__shared_weak_count *v37;
  uint64_t v38;
  unint64_t *v39;
  unint64_t v40;
  std::__shared_weak_count *v41;
  uint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  unsigned int *v46;
  unsigned int v47;
  unsigned int v48;
  _QWORD *j;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  uint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  unsigned int *v57;
  unsigned int v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  unsigned int *v62;
  unsigned int v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  unint64_t *v67;
  unint64_t v68;
  std::__shared_weak_count *v69;
  std::__shared_weak_count *v70;
  std::__shared_weak_count *v71;
  uint64_t v72;
  unint64_t *v73;
  unint64_t v74;
  _QWORD *v75;
  void *v76;
  std::__shared_weak_count *v77;
  uint64_t v78;
  std::__shared_weak_count *v79;
  void *v80;
  int *v81;
  uint64_t v82;
  void (**v83)(karo::AsyncRequestManager::RequestHandle *__hidden);
  uint64_t v84;
  std::__shared_weak_count *v85;
  void *__p[2];
  __int128 v87;
  int v88;
  _OWORD v89[2];
  int v90;
  __int128 v91;
  __int128 v92;
  int v93;

  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 112))(a1) & 1) == 0)
  {
    *a5 = 0;
    a5[1] = 0;
    a5[3] = 0;
    a5[4] = 0;
    a5[2] = (uint64_t)&off_1E42C2D08;
    return;
  }
  (*(void (**)(void **__return_ptr, uint64_t, uint64_t))(*(_QWORD *)a1 + 144))(__p, a1, a2);
  v10 = *(_OWORD *)(a2 + 16);
  v89[0] = *(_OWORD *)a2;
  v89[1] = v10;
  v11 = *(_DWORD *)(a2 + 32);
  v91 = *(_OWORD *)__p;
  v92 = v87;
  v90 = v11;
  v93 = v88;
  pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 136));
  v12 = *(int8x8_t *)(a1 + 104);
  if (!*(_QWORD *)&v12)
    goto LABEL_45;
  v13 = ((unint64_t)v92 << 58) | ((unint64_t)(DWORD1(v92) & 0x1FFFFFFF) << 29) | DWORD2(v92) & 0x1FFFFFFF;
  v14 = (uint8x8_t)vcnt_s8(v12);
  v14.i16[0] = vaddlv_u8(v14);
  if (v14.u32[0] > 1uLL)
  {
    v15 = ((unint64_t)v92 << 58) | ((unint64_t)(DWORD1(v92) & 0x1FFFFFFF) << 29) | DWORD2(v92) & 0x1FFFFFFF;
    if (v13 >= *(_QWORD *)&v12)
      v15 = v13 % *(_QWORD *)&v12;
  }
  else
  {
    v15 = v13 & (*(_QWORD *)&v12 - 1);
  }
  v16 = *(std::__shared_weak_count ***)(*(_QWORD *)(a1 + 96) + 8 * v15);
  if (!v16)
    goto LABEL_45;
  v17 = *v16;
  if (!*v16)
  {
LABEL_46:
    pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 136));
    goto LABEL_47;
  }
  if (v14.u32[0] < 2uLL)
  {
    v18 = *(_QWORD *)&v12 - 1;
    while (1)
    {
      shared_owners = v17->__shared_owners_;
      if (shared_owners == v13)
      {
        if (LODWORD(v17[1].__shared_owners_) == (_DWORD)v92
          && *(uint64_t *)((char *)&v17[1].__shared_owners_ + 4) == *(_QWORD *)((char *)&v92 + 4)
          && HIDWORD(v92) == HIDWORD(v17[1].__shared_weak_owners_)
          && LODWORD(v17->__shared_weak_owners_) == (_DWORD)v91
          && *(uint64_t *)((char *)&v17->__shared_weak_owners_ + 4) == *(_QWORD *)((char *)&v91 + 4))
        {
          goto LABEL_31;
        }
      }
      else if ((shared_owners & v18) != v15)
      {
        goto LABEL_45;
      }
      v17 = (std::__shared_weak_count *)v17->__vftable;
      if (!v17)
        goto LABEL_46;
    }
  }
  while (1)
  {
    v19 = v17->__shared_owners_;
    if (v19 == v13)
      break;
    if (v19 >= *(_QWORD *)&v12)
      v19 %= *(_QWORD *)&v12;
    if (v19 != v15)
      goto LABEL_45;
LABEL_13:
    v17 = (std::__shared_weak_count *)v17->__vftable;
    if (!v17)
      goto LABEL_46;
  }
  if (LODWORD(v17[1].__shared_owners_) != (_DWORD)v92
    || *(uint64_t *)((char *)&v17[1].__shared_owners_ + 4) != *(_QWORD *)((char *)&v92 + 4)
    || HIDWORD(v92) != HIDWORD(v17[1].__shared_weak_owners_)
    || LODWORD(v17->__shared_weak_owners_) != (_DWORD)v91
    || *(uint64_t *)((char *)&v17->__shared_weak_owners_ + 4) != *(_QWORD *)((char *)&v91 + 4))
  {
    goto LABEL_13;
  }
LABEL_31:
  if (((*(uint64_t (**)(uint64_t, __int128 *, uint64_t *))(*(_QWORD *)a1 + 128))(a1, &v91, &v17->__shared_weak_owners_) & 1) == 0)
  {
    std::__hash_table<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::__unordered_map_hasher<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,true>,std::__unordered_map_equal<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::equal_to<gdc::LayerDataRequestKey>,gdc::LayerDataRequestKeyHash,true>,std::allocator<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>>>::remove((uint64_t)__p, (_QWORD *)(a1 + 96), v17);
    v27 = __p[0];
    if (__p[0])
    {
      if ((_BYTE)v87)
      {
        v28 = (std::__shared_weak_count *)*((_QWORD *)__p[0] + 8);
        if (v28)
          std::__shared_weak_count::__release_weak(v28);
      }
      operator delete(v27);
    }
    goto LABEL_45;
  }
  shared_weak_owners = (std::__shared_weak_count *)v17[2].__shared_weak_owners_;
  if (!shared_weak_owners)
  {
LABEL_45:
    v17 = 0;
    goto LABEL_46;
  }
  v22 = v17[2].__shared_owners_;
  p_shared_weak_owners = (unint64_t *)&shared_weak_owners->__shared_weak_owners_;
  do
    v24 = __ldxr(p_shared_weak_owners);
  while (__stxr(v24 + 1, p_shared_weak_owners));
  v17 = std::__shared_weak_count::lock(shared_weak_owners);
  std::__shared_weak_count::__release_weak(shared_weak_owners);
  if (!v17)
    goto LABEL_46;
  pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 136));
  if (v22)
  {
    *a5 = v22;
    a5[1] = (uint64_t)v17;
    p_shared_owners = (unint64_t *)&v17->__shared_owners_;
    do
      v26 = __ldxr(p_shared_owners);
    while (__stxr(v26 + 1, p_shared_owners));
    a5[3] = 0;
    a5[4] = 0;
    a5[2] = (uint64_t)&off_1E42C2D08;
    goto LABEL_95;
  }
LABEL_47:
  (*(void (**)(void (***__return_ptr)(karo::AsyncRequestManager::RequestHandle *__hidden), uint64_t, _OWORD *, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 80))(&v83, a1, v89, a3, a4, 300, 1, 0);
  if (karo::AsyncRequestManager::RequestHandle::getStatus((karo::AsyncRequestManager::RequestHandle *)&v83) != 4)
  {
    *a5 = 0;
    a5[1] = 0;
    v42 = v84;
    v43 = v85;
    a5[2] = (uint64_t)&off_1E42C2D08;
    a5[3] = v42;
    a5[4] = (uint64_t)v43;
    if (v43)
    {
      v44 = (unint64_t *)&v43->__shared_owners_;
      do
        v45 = __ldxr(v44);
      while (__stxr(v45 + 1, v44));
    }
    if (v42)
    {
      v46 = (unsigned int *)(v42 + 128);
      do
        v47 = __ldaxr(v46);
      while (__stlxr(v47 + 1, v46));
    }
    goto LABEL_86;
  }
  v80 = 0;
  v81 = 0;
  v82 = 0;
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t *, _OWORD *, void **))(*(_QWORD *)a1 + 136))(&v78, a1, &v84, v89, &v80);
  pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 136));
  v29 = std::__hash_table<std::__hash_value_type<altitude::StampedTileKey,std::weak_ptr<altitude::TrafficDynamicData>>,std::__unordered_map_hasher<altitude::StampedTileKey,std::__hash_value_type<altitude::StampedTileKey,std::weak_ptr<altitude::TrafficDynamicData>>,std::hash<altitude::StampedTileKey>,std::equal_to<altitude::StampedTileKey>,true>,std::__unordered_map_equal<altitude::StampedTileKey,std::__hash_value_type<altitude::StampedTileKey,std::weak_ptr<altitude::TrafficDynamicData>>,std::equal_to<altitude::StampedTileKey>,std::hash<altitude::StampedTileKey>,true>,std::allocator<std::__hash_value_type<altitude::StampedTileKey,std::weak_ptr<altitude::TrafficDynamicData>>>>::__emplace_unique_key_args<altitude::StampedTileKey,std::piecewise_construct_t const&,std::tuple<altitude::StampedTileKey const&>,std::tuple<>>((float *)(a1 + 96), (int *)&v91, (uint64_t)&v91);
  v31 = v78;
  v30 = v79;
  if (v79)
  {
    v32 = (unint64_t *)&v79->__shared_weak_owners_;
    do
      v33 = __ldxr(v32);
    while (__stxr(v33 + 1, v32));
  }
  v34 = (std::__shared_weak_count *)v29[8];
  v29[7] = v31;
  v29[8] = v30;
  if (v34)
    std::__shared_weak_count::__release_weak(v34);
  for (i = (int *)v80; i != v81; i += 9)
  {
    v36 = std::__hash_table<std::__hash_value_type<altitude::StampedTileKey,std::weak_ptr<altitude::TrafficDynamicData>>,std::__unordered_map_hasher<altitude::StampedTileKey,std::__hash_value_type<altitude::StampedTileKey,std::weak_ptr<altitude::TrafficDynamicData>>,std::hash<altitude::StampedTileKey>,std::equal_to<altitude::StampedTileKey>,true>,std::__unordered_map_equal<altitude::StampedTileKey,std::__hash_value_type<altitude::StampedTileKey,std::weak_ptr<altitude::TrafficDynamicData>>,std::equal_to<altitude::StampedTileKey>,std::hash<altitude::StampedTileKey>,true>,std::allocator<std::__hash_value_type<altitude::StampedTileKey,std::weak_ptr<altitude::TrafficDynamicData>>>>::__emplace_unique_key_args<altitude::StampedTileKey,std::piecewise_construct_t const&,std::tuple<altitude::StampedTileKey const&>,std::tuple<>>((float *)(a1 + 96), i, (uint64_t)i);
    v38 = v78;
    v37 = v79;
    if (v79)
    {
      v39 = (unint64_t *)&v79->__shared_weak_owners_;
      do
        v40 = __ldxr(v39);
      while (__stxr(v40 + 1, v39));
    }
    v41 = (std::__shared_weak_count *)v36[8];
    v36[7] = v38;
    v36[8] = v37;
    if (v41)
      std::__shared_weak_count::__release_weak(v41);
  }
  v48 = *(_DWORD *)(a1 + 144) + 1;
  *(_DWORD *)(a1 + 144) = v48;
  if (v48 > 0x14)
  {
    *(_DWORD *)(a1 + 144) = 0;
    for (j = *(_QWORD **)(a1 + 112); j; j = (_QWORD *)*j)
    {
      while (1)
      {
        v69 = (std::__shared_weak_count *)j[8];
        if (!v69)
          goto LABEL_111;
        v70 = std::__shared_weak_count::lock(v69);
        if (!v70)
          goto LABEL_111;
        v71 = v70;
        v72 = j[7];
        v73 = (unint64_t *)&v70->__shared_owners_;
        do
          v74 = __ldaxr(v73);
        while (__stlxr(v74 - 1, v73));
        if (v74)
          break;
        ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
        std::__shared_weak_count::__release_weak(v71);
        if (v72)
          goto LABEL_108;
LABEL_111:
        v75 = (_QWORD *)*j;
        std::__hash_table<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::__unordered_map_hasher<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,true>,std::__unordered_map_equal<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::equal_to<gdc::LayerDataRequestKey>,gdc::LayerDataRequestKeyHash,true>,std::allocator<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>>>::remove((uint64_t)__p, (_QWORD *)(a1 + 96), j);
        v76 = __p[0];
        if (__p[0])
        {
          if ((_BYTE)v87)
          {
            v77 = (std::__shared_weak_count *)*((_QWORD *)__p[0] + 8);
            if (v77)
              std::__shared_weak_count::__release_weak(v77);
          }
          operator delete(v76);
        }
        j = v75;
        if (!v75)
          goto LABEL_70;
      }
      if (!v72)
        goto LABEL_111;
LABEL_108:
      ;
    }
  }
LABEL_70:
  v50 = v79;
  *a5 = v78;
  a5[1] = (uint64_t)v50;
  if (v50)
  {
    v51 = (unint64_t *)&v50->__shared_owners_;
    do
      v52 = __ldxr(v51);
    while (__stxr(v52 + 1, v51));
  }
  v53 = v84;
  v54 = v85;
  a5[2] = (uint64_t)&off_1E42C2D08;
  a5[3] = v53;
  a5[4] = (uint64_t)v54;
  if (v54)
  {
    v55 = (unint64_t *)&v54->__shared_owners_;
    do
      v56 = __ldxr(v55);
    while (__stxr(v56 + 1, v55));
  }
  if (v53)
  {
    v57 = (unsigned int *)(v53 + 128);
    do
      v58 = __ldaxr(v57);
    while (__stlxr(v58 + 1, v57));
  }
  pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 136));
  v59 = v79;
  if (v79)
  {
    v60 = (unint64_t *)&v79->__shared_owners_;
    do
      v61 = __ldaxr(v60);
    while (__stlxr(v61 - 1, v60));
    if (!v61)
    {
      ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
      std::__shared_weak_count::__release_weak(v59);
    }
  }
  if (v80)
  {
    v81 = (int *)v80;
    operator delete(v80);
  }
LABEL_86:
  v83 = &off_1E42C2D08;
  if (v84)
  {
    v62 = (unsigned int *)(v84 + 128);
    do
      v63 = __ldaxr(v62);
    while (__stlxr(v63 - 1, v62));
  }
  v64 = v85;
  if (v85)
  {
    v65 = (unint64_t *)&v85->__shared_owners_;
    do
      v66 = __ldaxr(v65);
    while (__stlxr(v66 - 1, v65));
    if (!v66)
    {
      ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
      std::__shared_weak_count::__release_weak(v64);
    }
  }
  if (v17)
  {
LABEL_95:
    v67 = (unint64_t *)&v17->__shared_owners_;
    do
      v68 = __ldaxr(v67);
    while (__stlxr(v68 - 1, v67));
    if (!v68)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
}

BOOL altitude::TrafficCacheNode::hasDataAvailable(uint64_t a1, uint64_t a2)
{
  return altitude::GeoResourceManager::getTileIdWithDataForTileId(*(_QWORD *)(*(_QWORD *)(a1 + 160) + 32), (__int128 *)(a2 + 16), 12) != 0;
}

uint64_t altitude::GenericCacheNode<altitude::StampedTileKey,altitude::TrafficDynamicData>::clear(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t i;
  _QWORD *v6;
  std::__shared_weak_count *v7;

  pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 136));
  if (*(_QWORD *)(a1 + 120))
  {
    v2 = *(_QWORD **)(a1 + 112);
    if (v2)
    {
      do
      {
        v6 = (_QWORD *)*v2;
        v7 = (std::__shared_weak_count *)v2[8];
        if (v7)
          std::__shared_weak_count::__release_weak(v7);
        operator delete(v2);
        v2 = v6;
      }
      while (v6);
    }
    *(_QWORD *)(a1 + 112) = 0;
    v3 = *(_QWORD *)(a1 + 104);
    if (v3)
    {
      for (i = 0; i != v3; ++i)
        *(_QWORD *)(*(_QWORD *)(a1 + 96) + 8 * i) = 0;
    }
    *(_QWORD *)(a1 + 120) = 0;
  }
  return pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 136));
}

BOOL altitude::TrafficCacheNode::hasValidKey(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return *(_DWORD *)(a3 + 32) >= *(_DWORD *)(a1 + 168);
}

void altitude::TrafficCacheNode::fetchData(uint64_t a1@<X1>, _QWORD *a2@<X8>)
{
  std::__shared_weak_count *v3;
  _QWORD *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  unint64_t *v10;
  unint64_t v11;

  v4 = *(_QWORD **)a1;
  v3 = *(std::__shared_weak_count **)(a1 + 8);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  if (((*(uint64_t (**)(_QWORD *))(*v4 + 40))(v4) & 1) == 0)
  {
    *a2 = 0;
    a2[1] = 0;
    if (!v3)
      return;
    goto LABEL_11;
  }
  v7 = v4[36];
  *a2 = v4[35];
  a2[1] = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  if (v3)
  {
LABEL_11:
    v10 = (unint64_t *)&v3->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

uint64_t altitude::TrafficCacheNode::getCacheKeyForKey@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  __int128 v4;
  uint64_t result;
  uint64_t v6;

  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a3 = *(_OWORD *)a2;
  *(_OWORD *)(a3 + 16) = v4;
  *(_DWORD *)(a3 + 32) = *(_DWORD *)(a2 + 32);
  result = altitude::GeoResourceManager::getTileIdWithDataForTileId(*(_QWORD *)(*(_QWORD *)(a1 + 160) + 32), (__int128 *)(a3 + 16), 12);
  *(_QWORD *)(a3 + 16) = result;
  *(_QWORD *)(a3 + 24) = v6;
  *(_DWORD *)a3 = 12;
  return result;
}

_QWORD *std::__hash_table<std::__hash_value_type<altitude::StampedTileKey,std::weak_ptr<altitude::TrafficDynamicData>>,std::__unordered_map_hasher<altitude::StampedTileKey,std::__hash_value_type<altitude::StampedTileKey,std::weak_ptr<altitude::TrafficDynamicData>>,std::hash<altitude::StampedTileKey>,std::equal_to<altitude::StampedTileKey>,true>,std::__unordered_map_equal<altitude::StampedTileKey,std::__hash_value_type<altitude::StampedTileKey,std::weak_ptr<altitude::TrafficDynamicData>>,std::equal_to<altitude::StampedTileKey>,std::hash<altitude::StampedTileKey>,true>,std::allocator<std::__hash_value_type<altitude::StampedTileKey,std::weak_ptr<altitude::TrafficDynamicData>>>>::__emplace_unique_key_args<altitude::StampedTileKey,std::piecewise_construct_t const&,std::tuple<altitude::StampedTileKey const&>,std::tuple<>>(float *a1, int *a2, uint64_t a3)
{
  unint64_t v3;
  uint64_t v6;
  unsigned int v7;
  int v8;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  void **v12;
  _QWORD *v13;
  int v14;
  int v15;
  int v16;
  int v17;
  unint64_t v18;
  uint64_t v19;
  __int128 v20;
  float v21;
  float v22;
  _BOOL8 v23;
  unint64_t v24;
  unint64_t v25;
  size_t prime;
  void *v27;
  _QWORD *v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t *v31;
  size_t v32;
  size_t v33;
  size_t v34;
  _QWORD *i;
  size_t v36;
  uint64_t v37;
  unint64_t v38;
  uint8x8_t v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  size_t v43;
  _QWORD *v44;
  _QWORD *v45;
  unint64_t v46;
  _QWORD *v48;

  v6 = a2[4];
  v7 = a2[5];
  v8 = a2[6];
  v9 = (v6 << 58) | ((unint64_t)(v7 & 0x1FFFFFFF) << 29) | v8 & 0x1FFFFFFF;
  v10 = *((_QWORD *)a1 + 1);
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    if (v11.u32[0] > 1uLL)
    {
      v3 = (v6 << 58) | ((unint64_t)(v7 & 0x1FFFFFFF) << 29) | v8 & 0x1FFFFFFF;
      if (v9 >= v10)
        v3 = v9 % v10;
    }
    else
    {
      v3 = v9 & (v10 - 1);
    }
    v12 = *(void ***)(*(_QWORD *)a1 + 8 * v3);
    if (v12)
    {
      v13 = *v12;
      if (*v12)
      {
        v14 = a2[7];
        v15 = *a2;
        v16 = a2[1];
        v17 = a2[2];
        if (v11.u32[0] < 2uLL)
        {
          while (1)
          {
            v19 = v13[1];
            if (v19 == v9)
            {
              if (v13[4] == __PAIR64__(v7, v6)
                && *((_DWORD *)v13 + 10) == v8
                && v14 == *((_DWORD *)v13 + 11)
                && *((_DWORD *)v13 + 4) == v15
                && *((_DWORD *)v13 + 5) == v16
                && *((_DWORD *)v13 + 6) == v17)
              {
                return v13;
              }
            }
            else if ((v19 & (v10 - 1)) != v3)
            {
              goto LABEL_33;
            }
            v13 = (_QWORD *)*v13;
            if (!v13)
              goto LABEL_33;
          }
        }
        do
        {
          v18 = v13[1];
          if (v18 == v9)
          {
            if (v13[4] == __PAIR64__(v7, v6)
              && *((_DWORD *)v13 + 10) == v8
              && v14 == *((_DWORD *)v13 + 11)
              && *((_DWORD *)v13 + 4) == v15
              && *((_DWORD *)v13 + 5) == v16
              && *((_DWORD *)v13 + 6) == v17)
            {
              return v13;
            }
          }
          else
          {
            if (v18 >= v10)
              v18 %= v10;
            if (v18 != v3)
              break;
          }
          v13 = (_QWORD *)*v13;
        }
        while (v13);
      }
    }
  }
LABEL_33:
  v13 = operator new(0x48uLL);
  *v13 = 0;
  v13[1] = v9;
  v20 = *(_OWORD *)(a3 + 16);
  *((_OWORD *)v13 + 1) = *(_OWORD *)a3;
  *((_OWORD *)v13 + 2) = v20;
  *((_DWORD *)v13 + 12) = *(_DWORD *)(a3 + 32);
  v13[7] = 0;
  v13[8] = 0;
  v21 = (float)(unint64_t)(*((_QWORD *)a1 + 3) + 1);
  v22 = a1[8];
  if (!v10 || (float)(v22 * (float)v10) < v21)
  {
    v23 = 1;
    if (v10 >= 3)
      v23 = (v10 & (v10 - 1)) != 0;
    v24 = v23 | (2 * v10);
    v25 = vcvtps_u32_f32(v21 / v22);
    if (v24 <= v25)
      prime = v25;
    else
      prime = v24;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v10 = *((_QWORD *)a1 + 1);
    }
    if (prime <= v10)
    {
      if (prime >= v10)
        goto LABEL_70;
      v38 = vcvtps_u32_f32((float)*((unint64_t *)a1 + 3) / a1[8]);
      if (v10 < 3 || (v39 = (uint8x8_t)vcnt_s8((int8x8_t)v10), v39.i16[0] = vaddlv_u8(v39), v39.u32[0] > 1uLL))
      {
        v38 = std::__next_prime(v38);
      }
      else
      {
        v40 = 1 << -(char)__clz(v38 - 1);
        if (v38 >= 2)
          v38 = v40;
      }
      if (prime <= v38)
        prime = v38;
      if (prime >= v10)
      {
        v10 = *((_QWORD *)a1 + 1);
LABEL_70:
        if ((v10 & (v10 - 1)) != 0)
        {
          if (v9 >= v10)
            v3 = v9 % v10;
          else
            v3 = v9;
        }
        else
        {
          v3 = (v10 - 1) & v9;
        }
        goto LABEL_83;
      }
      if (!prime)
      {
        v48 = *(_QWORD **)a1;
        *(_QWORD *)a1 = 0;
        if (v48)
          operator delete(v48);
        v10 = 0;
        *((_QWORD *)a1 + 1) = 0;
        goto LABEL_70;
      }
    }
    if (prime >> 61)
      std::__throw_bad_array_new_length[abi:nn180100]();
    v27 = operator new(8 * prime);
    v28 = *(_QWORD **)a1;
    *(_QWORD *)a1 = v27;
    if (v28)
      operator delete(v28);
    v29 = 0;
    *((_QWORD *)a1 + 1) = prime;
    do
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v29++) = 0;
    while (prime != v29);
    v31 = (uint64_t *)(a1 + 4);
    v30 = (_QWORD *)*((_QWORD *)a1 + 2);
    if (!v30)
    {
LABEL_69:
      v10 = prime;
      goto LABEL_70;
    }
    v32 = v30[1];
    v33 = prime - 1;
    if ((prime & (prime - 1)) == 0)
    {
      v34 = v32 & v33;
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v34) = v31;
      for (i = (_QWORD *)*v30; *v30; i = (_QWORD *)*v30)
      {
        v36 = i[1] & v33;
        if (v36 == v34)
        {
          v30 = i;
        }
        else if (*(_QWORD *)(*(_QWORD *)a1 + 8 * v36))
        {
          *v30 = *i;
          v37 = 8 * v36;
          *i = **(_QWORD **)(*(_QWORD *)a1 + v37);
          **(_QWORD **)(*(_QWORD *)a1 + v37) = i;
        }
        else
        {
          *(_QWORD *)(*(_QWORD *)a1 + 8 * v36) = v30;
          v30 = i;
          v34 = v36;
        }
      }
      goto LABEL_69;
    }
    if (v32 >= prime)
      v32 %= prime;
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v32) = v31;
    v41 = (_QWORD *)*v30;
    if (!*v30)
      goto LABEL_69;
    while (1)
    {
      v43 = v41[1];
      if (v43 >= prime)
        v43 %= prime;
      if (v43 != v32)
      {
        if (!*(_QWORD *)(*(_QWORD *)a1 + 8 * v43))
        {
          *(_QWORD *)(*(_QWORD *)a1 + 8 * v43) = v30;
          goto LABEL_74;
        }
        *v30 = *v41;
        v42 = 8 * v43;
        *v41 = **(_QWORD **)(*(_QWORD *)a1 + v42);
        **(_QWORD **)(*(_QWORD *)a1 + v42) = v41;
        v41 = v30;
      }
      v43 = v32;
LABEL_74:
      v30 = v41;
      v41 = (_QWORD *)*v41;
      v32 = v43;
      if (!v41)
        goto LABEL_69;
    }
  }
LABEL_83:
  v44 = *(_QWORD **)a1;
  v45 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v45)
  {
    *v13 = *v45;
LABEL_91:
    *v45 = v13;
    goto LABEL_92;
  }
  *v13 = *((_QWORD *)a1 + 2);
  *((_QWORD *)a1 + 2) = v13;
  v44[v3] = a1 + 4;
  if (*v13)
  {
    v46 = *(_QWORD *)(*v13 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v46 >= v10)
        v46 %= v10;
    }
    else
    {
      v46 &= v10 - 1;
    }
    v45 = (_QWORD *)(*(_QWORD *)a1 + 8 * v46);
    goto LABEL_91;
  }
LABEL_92:
  ++*((_QWORD *)a1 + 3);
  return v13;
}

_DWORD *std::__tree<std::__value_type<altitude::KeyPair<altitude::StampedTileKey>,std::shared_ptr<karo::AsyncRequestManager::Request>>,std::__map_value_compare<altitude::KeyPair<altitude::StampedTileKey>,std::__value_type<altitude::KeyPair<altitude::StampedTileKey>,std::shared_ptr<karo::AsyncRequestManager::Request>>,std::less<altitude::KeyPair<altitude::StampedTileKey>>,true>,std::allocator<std::__value_type<altitude::KeyPair<altitude::StampedTileKey>,std::shared_ptr<karo::AsyncRequestManager::Request>>>>::find<altitude::KeyPair<altitude::StampedTileKey>>(uint64_t a1, _DWORD *a2)
{
  _DWORD *v2;
  uint64_t *v3;
  uint64_t *v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  _DWORD *v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  BOOL v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  BOOL v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;

  v4 = *(uint64_t **)(a1 + 8);
  v2 = (_DWORD *)(a1 + 8);
  v3 = v4;
  if (!v4)
    return v2;
  v6 = a2[13];
  v5 = a2[14];
  v8 = a2[15];
  v7 = a2[16];
  v10 = a2[9];
  v9 = a2[10];
  v11 = v2;
  v12 = a2[11];
  do
  {
    while (1)
    {
      v13 = *((_DWORD *)v3 + 21);
      if (v13 == v6 && *((_DWORD *)v3 + 22) == v5 && *((_DWORD *)v3 + 23) == v8 && v7 == *((_DWORD *)v3 + 24))
        break;
      if (v13 < v6)
        goto LABEL_3;
      if (v13 > v6)
        goto LABEL_21;
      v17 = *((_DWORD *)v3 + 22);
      if (v17 < v5)
        goto LABEL_3;
      if (v17 > v5)
        goto LABEL_21;
      v18 = *((_DWORD *)v3 + 23);
      if (v18 < v8)
        goto LABEL_3;
      if (v18 > v8)
        goto LABEL_21;
      v15 = *((_DWORD *)v3 + 24) >= v7;
LABEL_19:
      if (v15)
        goto LABEL_21;
LABEL_3:
      v3 = (uint64_t *)v3[1];
      if (!v3)
        goto LABEL_22;
    }
    v14 = *((_DWORD *)v3 + 17);
    v15 = v14 >= v10;
    if (v14 != v10)
      goto LABEL_19;
    v16 = *((_DWORD *)v3 + 18);
    v15 = v16 >= v9;
    if (v16 != v9)
      goto LABEL_19;
    if (*((_DWORD *)v3 + 19) < v12)
      goto LABEL_3;
LABEL_21:
    v11 = v3;
    v3 = (uint64_t *)*v3;
  }
  while (v3);
LABEL_22:
  if (v11 == v2)
    return v2;
  v19 = v11[21];
  if (v6 != v19 || v5 != v11[22] || v8 != v11[23] || v11[24] != v7)
  {
    if (v6 < v19)
      return v2;
    if (v6 > v19)
      return v11;
    v23 = v11[22];
    if (v5 < v23)
      return v2;
    if (v5 > v23)
      return v11;
    v24 = v11[23];
    if (v8 < v24)
      return v2;
    if (v8 > v24)
      return v11;
    v21 = v7 >= v11[24];
    goto LABEL_38;
  }
  v20 = v11[17];
  v21 = v10 >= v20;
  if (v10 != v20 || (v22 = v11[18], v21 = v9 >= v22, v9 != v22))
  {
LABEL_38:
    if (!v21)
      return v2;
    return v11;
  }
  if (v12 >= v11[19])
    return v11;
  return v2;
}

void std::__shared_ptr_pointer<altitude::TrafficCacheNodeJob *,std::shared_ptr<karo::AsyncRequestManager::Request>::__shared_ptr_default_delete<karo::AsyncRequestManager::Request,altitude::TrafficCacheNodeJob>,std::allocator<altitude::TrafficCacheNodeJob>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_pointer<altitude::TrafficCacheNodeJob *,std::shared_ptr<karo::AsyncRequestManager::Request>::__shared_ptr_default_delete<karo::AsyncRequestManager::Request,altitude::TrafficCacheNodeJob>,std::allocator<altitude::TrafficCacheNodeJob>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void altitude::TrafficCacheNodeJob::~TrafficCacheNodeJob(altitude::TrafficCacheNodeJob *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;

  *(_QWORD *)this = off_1E42C57F8;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 36);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *(_QWORD *)this = off_1E42C5768;
  if (*((char *)this + 223) < 0)
    operator delete(*((void **)this + 25));
  pthread_mutex_destroy(*((pthread_mutex_t **)this + 24));
  v5 = *((_QWORD *)this + 24);
  if (v5)
    MEMORY[0x1A1AF4E00](v5, 0x1000C40FA0F61DDLL);
  *((_QWORD *)this + 24) = 0;
  karo::Job::~Job(this);
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;

  *(_QWORD *)this = off_1E42C57F8;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 36);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *(_QWORD *)this = off_1E42C5768;
  if (*((char *)this + 223) < 0)
    operator delete(*((void **)this + 25));
  pthread_mutex_destroy(*((pthread_mutex_t **)this + 24));
  v5 = *((_QWORD *)this + 24);
  if (v5)
    MEMORY[0x1A1AF4E00](v5, 0x1000C40FA0F61DDLL);
  *((_QWORD *)this + 24) = 0;
  karo::Job::~Job(this);
  JUMPOUT(0x1A1AF4E00);
}

void altitude::TrafficCacheNodeJob::jobStep(altitude::TrafficCacheNodeJob *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  pthread_mutex_t **v5;
  int v6;
  const unsigned __int8 *v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t v11;
  zilch::TrafficDynamicTile *v12;
  zilch::TrafficDynamicTile *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  unsigned int v17;
  int v18;
  unsigned int v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  std::__shared_weak_count *v25;
  unint64_t *p_shared_owners;
  unint64_t v27;
  BOOL v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  unsigned int *v32;
  unsigned int v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  _QWORD v37[2];
  _BYTE v38[40];
  void (**v39)(karo::AsyncFileLoader::FileObject *__hidden);
  uint64_t v40;
  std::__shared_weak_count *v41;
  pthread_mutex_t **v42;
  std::__shared_weak_count *v43;

  v2 = *((_QWORD *)this + 29);
  v3 = *(unsigned int *)(*((_QWORD *)this + 1) + 88);
  v4 = atomic_load((unsigned int *)this + 4);
  (*(void (**)(void (***__return_ptr)(karo::AsyncFileLoader::FileObject *__hidden), uint64_t, char *, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v2 + 104))(&v39, v2, (char *)this + 240, v3, v4, 0xFFFFFFFFLL, 1);
  if (karo::AsyncRequestManager::RequestHandle::getStatus((karo::AsyncRequestManager::RequestHandle *)&v39) == 4)
  {
    v5 = v42;
    pthread_mutex_lock(v42[19]);
    v6 = *((_DWORD *)v5 + 40);
    pthread_mutex_unlock(v5[19]);
    if ((v6 & 1) != 0)
      v7 = (const unsigned __int8 *)(*(uint64_t (**)(pthread_mutex_t **))&(*v42)->__opaque[48])(v42);
    else
      v7 = 0;
    if ((*(uint64_t (**)(pthread_mutex_t **))&(*v42)->__opaque[40])(v42))
    {
      zilch::ReadBitstream::ReadBitstream((zilch::ReadBitstream *)v38, v7);
      v12 = (zilch::TrafficDynamicTile *)operator new();
      v13 = (zilch::TrafficDynamicTile *)zilch::TrafficDynamicTile::TrafficDynamicTile(v12);
      if (zilch::TrafficDynamicTile::decode(v13, (zilch::ReadBitstream *)v38))
      {
        (*(void (**)(altitude::TrafficCacheNodeJob *))(*(_QWORD *)this + 16))(this);
        v14 = MEMORY[0x1A1AF471C](v12);
        MEMORY[0x1A1AF4E00](v14, 0x1032C40278CF260);
      }
      else
      {
        v15 = operator new();
        *(_OWORD *)(v15 + 16) = 0u;
        *(_OWORD *)(v15 + 32) = 0u;
        *(_DWORD *)(v15 + 48) = 1065353216;
        v16 = (_QWORD *)operator new();
        v17 = 0;
        *v16 = &off_1E42E83D0;
        v16[1] = 0;
        v16[2] = 0;
        v16[3] = v12;
        *(_QWORD *)v15 = v12;
        *(_QWORD *)(v15 + 8) = v16;
        v18 = *((_DWORD *)this + 64);
        *(_QWORD *)(v15 + 56) = *((unsigned int *)this + 66) | ((unint64_t)*((unsigned int *)this + 65) << 32);
        *(_DWORD *)(v15 + 64) = v18;
        while (1)
        {
          v19 = v17;
          if (zilch::TrafficDynamicTile::flowCount(v12) <= (unint64_t)v17)
            break;
          v20 = (uint64_t *)zilch::TrafficDynamicTile::flow(v12);
          v21 = zilch::TrafficDynamicTile::flow(v12);
          v22 = *v20;
          v23 = operator new(0x20uLL);
          v23[2] = v22;
          v23[3] = v21;
          *v23 = 0;
          v23[1] = v22;
          std::__hash_table<std::__hash_value_type<unsigned long long,md::PolygonRouteAttributes>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,md::PolygonRouteAttributes>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,md::PolygonRouteAttributes>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,md::PolygonRouteAttributes>>>::__node_insert_multi(v15 + 16, v23);
          v17 = v19 + 1;
        }
        v24 = (_QWORD *)operator new();
        *v24 = &off_1E42E8A98;
        v24[1] = 0;
        v24[2] = 0;
        v24[3] = v15;
        v25 = (std::__shared_weak_count *)*((_QWORD *)this + 36);
        *((_QWORD *)this + 35) = v15;
        *((_QWORD *)this + 36) = v24;
        if (v25)
        {
          p_shared_owners = (unint64_t *)&v25->__shared_owners_;
          do
            v27 = __ldaxr(p_shared_owners);
          while (__stlxr(v27 - 1, p_shared_owners));
          if (!v27)
          {
            ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
            std::__shared_weak_count::__release_weak(v25);
          }
        }
        karo::Job::removeSubJob((pthread_mutex_t **)this, 1);
        pthread_mutex_lock(*((pthread_mutex_t **)this + 19));
        v28 = (*((_DWORD *)this + 40) & 2) == 0;
        pthread_mutex_unlock(*((pthread_mutex_t **)this + 19));
        *((_BYTE *)this + 225) = v28;
        pthread_mutex_lock(*((pthread_mutex_t **)this + 19));
        *((_DWORD *)this + 40) |= 1u;
        pthread_mutex_unlock(*((pthread_mutex_t **)this + 19));
      }
      goto LABEL_27;
    }
LABEL_16:
    (*(void (**)(altitude::TrafficCacheNodeJob *))(*(_QWORD *)this + 16))(this);
    goto LABEL_27;
  }
  if (!karo::AsyncRequestManager::RequestHandle::getStatus((karo::AsyncRequestManager::RequestHandle *)&v39))
    goto LABEL_16;
  v8 = v41;
  v37[0] = v40;
  v37[1] = v41;
  if (v41)
  {
    v9 = (unint64_t *)&v41->__shared_owners_;
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
    karo::Job::addBlockingSubJob((uint64_t *)this, v37, 1, 0);
    do
      v11 = __ldaxr(v9);
    while (__stlxr(v11 - 1, v9));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  else
  {
    karo::Job::addBlockingSubJob((uint64_t *)this, v37, 1, 0);
  }
LABEL_27:
  v39 = &off_1E42C2C18;
  v29 = v43;
  if (v43)
  {
    v30 = (unint64_t *)&v43->__shared_owners_;
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
  v39 = &off_1E42C2D08;
  if (v40)
  {
    v32 = (unsigned int *)(v40 + 128);
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
  }
  v34 = v41;
  if (v41)
  {
    v35 = (unint64_t *)&v41->__shared_owners_;
    do
      v36 = __ldaxr(v35);
    while (__stlxr(v36 - 1, v35));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      std::__shared_weak_count::__release_weak(v34);
    }
  }
}

uint64_t altitude::TrafficCacheNodeJob::succeeded(altitude::TrafficCacheNodeJob *this)
{
  return *((unsigned __int8 *)this + 225);
}

void std::__shared_ptr_pointer<altitude::TrafficDynamicData *,std::shared_ptr<altitude::TrafficDynamicData>::__shared_ptr_default_delete<altitude::TrafficDynamicData,altitude::TrafficDynamicData>,std::allocator<altitude::TrafficDynamicData>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_pointer<altitude::TrafficDynamicData *,std::shared_ptr<altitude::TrafficDynamicData>::__shared_ptr_default_delete<altitude::TrafficDynamicData,altitude::TrafficDynamicData>,std::allocator<altitude::TrafficDynamicData>>::__on_zero_shared(uint64_t result)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v1 = *(_QWORD **)(result + 24);
  if (v1)
  {
    v2 = (_QWORD *)v1[4];
    if (v2)
    {
      do
      {
        v3 = (_QWORD *)*v2;
        operator delete(v2);
        v2 = v3;
      }
      while (v3);
    }
    v4 = (void *)v1[2];
    v1[2] = 0;
    if (v4)
      operator delete(v4);
    v5 = (std::__shared_weak_count *)v1[1];
    if (v5)
    {
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    JUMPOUT(0x1A1AF4E00);
  }
  return result;
}

void altitude::GenericCacheNode<altitude::StampedTileKey,altitude::TrafficDynamicData>::~GenericCacheNode(karo::AsyncRequestManager *a1)
{
  uint64_t v2;
  _QWORD *v3;
  void *v4;
  _QWORD *v5;
  std::__shared_weak_count *v6;

  *(_QWORD *)a1 = off_1E42C4770;
  pthread_mutex_destroy(*((pthread_mutex_t **)a1 + 17));
  v2 = *((_QWORD *)a1 + 17);
  if (v2)
    MEMORY[0x1A1AF4E00](v2, 0x1000C40FA0F61DDLL);
  *((_QWORD *)a1 + 17) = 0;
  v3 = (_QWORD *)*((_QWORD *)a1 + 14);
  if (v3)
  {
    do
    {
      v5 = (_QWORD *)*v3;
      v6 = (std::__shared_weak_count *)v3[8];
      if (v6)
        std::__shared_weak_count::__release_weak(v6);
      operator delete(v3);
      v3 = v5;
    }
    while (v5);
  }
  v4 = (void *)*((_QWORD *)a1 + 12);
  *((_QWORD *)a1 + 12) = 0;
  if (v4)
    operator delete(v4);
  *(_QWORD *)a1 = off_1E42C3060;
  while (*((_QWORD *)a1 + 10))
    (*(void (**)(karo::AsyncRequestManager *, uint64_t))(*(_QWORD *)a1 + 48))(a1, *((_QWORD *)a1 + 8) + 32);
  std::__tree<std::__value_type<altitude::KeyPair<altitude::StampedTileKey>,std::shared_ptr<karo::AsyncRequestManager::Request>>,std::__map_value_compare<altitude::KeyPair<altitude::StampedTileKey>,std::__value_type<altitude::KeyPair<altitude::StampedTileKey>,std::shared_ptr<karo::AsyncRequestManager::Request>>,std::less<altitude::KeyPair<altitude::StampedTileKey>>,true>,std::allocator<std::__value_type<altitude::KeyPair<altitude::StampedTileKey>,std::shared_ptr<karo::AsyncRequestManager::Request>>>>::destroy(*((_QWORD **)a1 + 9));
  karo::AsyncRequestManager::~AsyncRequestManager(a1);
}

void std::__tree<std::__value_type<altitude::KeyPair<altitude::StampedTileKey>,std::shared_ptr<karo::AsyncRequestManager::Request>>,std::__map_value_compare<altitude::KeyPair<altitude::StampedTileKey>,std::__value_type<altitude::KeyPair<altitude::StampedTileKey>,std::shared_ptr<karo::AsyncRequestManager::Request>>,std::less<altitude::KeyPair<altitude::StampedTileKey>>,true>,std::allocator<std::__value_type<altitude::KeyPair<altitude::StampedTileKey>,std::shared_ptr<karo::AsyncRequestManager::Request>>>>::destroy(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  if (a1)
  {
    std::__tree<std::__value_type<altitude::KeyPair<altitude::StampedTileKey>,std::shared_ptr<karo::AsyncRequestManager::Request>>,std::__map_value_compare<altitude::KeyPair<altitude::StampedTileKey>,std::__value_type<altitude::KeyPair<altitude::StampedTileKey>,std::shared_ptr<karo::AsyncRequestManager::Request>>,std::less<altitude::KeyPair<altitude::StampedTileKey>>,true>,std::allocator<std::__value_type<altitude::KeyPair<altitude::StampedTileKey>,std::shared_ptr<karo::AsyncRequestManager::Request>>>>::destroy(*a1);
    std::__tree<std::__value_type<altitude::KeyPair<altitude::StampedTileKey>,std::shared_ptr<karo::AsyncRequestManager::Request>>,std::__map_value_compare<altitude::KeyPair<altitude::StampedTileKey>,std::__value_type<altitude::KeyPair<altitude::StampedTileKey>,std::shared_ptr<karo::AsyncRequestManager::Request>>,std::less<altitude::KeyPair<altitude::StampedTileKey>>,true>,std::allocator<std::__value_type<altitude::KeyPair<altitude::StampedTileKey>,std::shared_ptr<karo::AsyncRequestManager::Request>>>>::destroy(a1[1]);
    v2 = (std::__shared_weak_count *)a1[14];
    if (v2)
    {
      p_shared_owners = (unint64_t *)&v2->__shared_owners_;
      do
        v4 = __ldaxr(p_shared_owners);
      while (__stlxr(v4 - 1, p_shared_owners));
      if (!v4)
      {
        ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
        std::__shared_weak_count::__release_weak(v2);
      }
    }
    operator delete(a1);
  }
}

uint64_t altitude::GenericCacheNode<altitude::StampedTileKey,altitude::TrafficDynamicData>::hasValidKey()
{
  return 1;
}

__n128 altitude::GenericCacheNode<altitude::StampedTileKey,altitude::TrafficDynamicData>::getCacheKeyForKey@<Q0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a1;
  v3 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)a2 = *(_OWORD *)a1;
  *(_OWORD *)(a2 + 16) = v3;
  *(_DWORD *)(a2 + 32) = *(_DWORD *)(a1 + 32);
  return result;
}

void md::PolygonLogic::~PolygonLogic(md::PolygonLogic *this)
{
  *(_QWORD *)this = &off_1E428D468;
  md::Monitorable<md::ConfigValue<GEOConfigKeyBOOL,BOOL>>::~Monitorable((uint64_t)this + 216);
  md::Monitorable<md::ConfigValue<GEOConfigKeyDouble,double>>::~Monitorable((uint64_t)this + 136);
  *(_QWORD *)this = off_1E42AFC70;
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((_QWORD **)this + 13));
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((_QWORD **)this + 10));
}

{
  *(_QWORD *)this = &off_1E428D468;
  md::Monitorable<md::ConfigValue<GEOConfigKeyBOOL,BOOL>>::~Monitorable((uint64_t)this + 216);
  md::Monitorable<md::ConfigValue<GEOConfigKeyDouble,double>>::~Monitorable((uint64_t)this + 136);
  *(_QWORD *)this = off_1E42AFC70;
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((_QWORD **)this + 13));
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((_QWORD **)this + 10));
  JUMPOUT(0x1A1AF4E00);
}

uint64_t md::Logic<md::PolygonLogic,md::PolygonContext,md::LogicDependencies<gdc::TypeList<md::SettingsContext,md::SceneContext>,gdc::TypeList<>>>::_debugConsoleString@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _BYTE *a4@<X8>)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  _QWORD v8[3];

  if (*(_QWORD *)(a3 + 8) == 0x401D4CCE847AB1D1 && (v4 = *(_QWORD *)(a3 + 32)) != 0)
  {
    v6 = result;
    v8[0] = md::LogicDependencies<gdc::TypeList<md::SettingsContext,md::SceneContext>,gdc::TypeList<>>::buildRequiredTuple<md::SettingsContext,md::SceneContext>(**(_QWORD **)(a2 + 8), *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8));
    v8[1] = v7;
    return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD *, uint64_t))(*(_QWORD *)v6 + 160))(v6, a2, v8, v4);
  }
  else
  {
    a4[23] = 0;
    *a4 = 0;
  }
  return result;
}

uint64_t md::Logic<md::PolygonLogic,md::PolygonContext,md::LogicDependencies<gdc::TypeList<md::SettingsContext,md::SceneContext>,gdc::TypeList<>>>::frequency(uint64_t a1)
{
  return *(_QWORD *)(a1 + 64);
}

void md::Logic<md::PolygonLogic,md::PolygonContext,md::LogicDependencies<gdc::TypeList<md::SettingsContext,md::SceneContext>,gdc::TypeList<>>>::debugConsoleString(uint64_t a1@<X0>, gdc::DebugTreeNode *a2@<X8>)
{
  void *v3;
  uint64_t v4;
  void *v5;
  void *v6[2];
  char v7;
  void *v8;
  char v9;
  void **v10;
  void *__p;
  void *v12;
  uint64_t v13;

  v13 = 0;
  (*(void (**)(void **__return_ptr, uint64_t, uint64_t *))(*(_QWORD *)a1 + 56))(v6, a1, &v13);
  gdc::DebugTreeNode::toString(a2, (uint64_t)v6);
  v3 = __p;
  if (__p)
  {
    v4 = (uint64_t)v12;
    v5 = __p;
    if (v12 != __p)
    {
      do
      {
        v4 -= 80;
        std::__destroy_at[abi:nn180100]<gdc::DebugTreeProperty,0>(v4);
      }
      while ((void *)v4 != v3);
      v5 = __p;
    }
    v12 = v3;
    operator delete(v5);
  }
  std::vector<gdc::DebugTreeNode>::~vector[abi:nn180100](&v10);
  if ((v9 & 0x80000000) == 0)
  {
    if ((v7 & 0x80000000) == 0)
      return;
LABEL_10:
    operator delete(v6[0]);
    return;
  }
  operator delete(v8);
  if (v7 < 0)
    goto LABEL_10;
}

void _ZNSt3__110__function6__funcIZN2md12PolygonLogic15runBeforeLayoutERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_15SettingsContextENS2_12SceneContextEEEENS9_IJEEEEE20ResolvedDependenciesERNS2_14PolygonContextEE3__1NS_9allocatorISK_EEFvvEED0Ev()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *_ZNKSt3__110__function6__funcIZN2md12PolygonLogic15runBeforeLayoutERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_15SettingsContextENS2_12SceneContextEEEENS9_IJEEEEE20ResolvedDependenciesERNS2_14PolygonContextEE3__1NS_9allocatorISK_EEFvvEE7__cloneEv(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42CAAC0;
  result[1] = v3;
  return result;
}

void _ZNSt3__110__function6__funcIZN2md12PolygonLogic15runBeforeLayoutERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_15SettingsContextENS2_12SceneContextEEEENS9_IJEEEEE20ResolvedDependenciesERNS2_14PolygonContextEE3__0NS_9allocatorISK_EEFvvEED0Ev()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *_ZNKSt3__110__function6__funcIZN2md12PolygonLogic15runBeforeLayoutERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_15SettingsContextENS2_12SceneContextEEEENS9_IJEEEEE20ResolvedDependenciesERNS2_14PolygonContextEE3__0NS_9allocatorISK_EEFvvEE7__cloneEv(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42CAA78;
  result[1] = v3;
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZN2md12PolygonLogic15runBeforeLayoutERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_15SettingsContextENS2_12SceneContextEEEENS9_IJEEEEE20ResolvedDependenciesERNS2_14PolygonContextEE3__0NS_9allocatorISK_EEFvvEE7__cloneEPNS0_6__baseISN_EE(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42CAA78;
  a2[1] = v2;
  return result;
}

uint64_t md::LogicDependencies<gdc::TypeList<md::SettingsContext,md::SceneContext>,gdc::TypeList<>>::buildRequiredTuple<md::SettingsContext,md::SceneContext>(uint64_t a1, unint64_t a2)
{
  uint8x8_t v2;
  unint64_t v3;
  _QWORD *v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  unint64_t v14;
  uint64_t v15;

  if (!a2)
    return 0;
  v2 = (uint8x8_t)vcnt_s8((int8x8_t)a2);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    v3 = 0xC97B9E962ADF4AD4;
    if (a2 <= 0xC97B9E962ADF4AD4)
      v3 = 0xC97B9E962ADF4AD4 % a2;
  }
  else
  {
    v3 = (a2 - 1) & 0xC97B9E962ADF4AD4;
  }
  v5 = *(_QWORD **)(a1 + 8 * v3);
  if (!v5)
    goto LABEL_25;
  v6 = (_QWORD *)*v5;
  if (!v6)
    goto LABEL_25;
  if (v2.u32[0] < 2uLL)
  {
    while (1)
    {
      v8 = v6[1];
      if (v8 == 0xC97B9E962ADF4AD4)
      {
        if (v6[2] == 0xC97B9E962ADF4AD4)
          goto LABEL_23;
      }
      else if ((v8 & (a2 - 1)) != v3)
      {
        goto LABEL_25;
      }
      v6 = (_QWORD *)*v6;
      if (!v6)
        goto LABEL_25;
    }
  }
  while (1)
  {
    v7 = v6[1];
    if (v7 == 0xC97B9E962ADF4AD4)
      break;
    if (v7 >= a2)
      v7 %= a2;
    if (v7 != v3)
      goto LABEL_25;
LABEL_12:
    v6 = (_QWORD *)*v6;
    if (!v6)
      goto LABEL_25;
  }
  if (v6[2] != 0xC97B9E962ADF4AD4)
    goto LABEL_12;
LABEL_23:
  v9 = v6[5];
  if (*(_QWORD *)(v9 + 8) == 0xC97B9E962ADF4AD4)
  {
    v10 = *(_QWORD *)(v9 + 32);
    goto LABEL_26;
  }
LABEL_25:
  v10 = 0;
LABEL_26:
  if (v2.u32[0] > 1uLL)
  {
    v11 = 0x99BED48DEFBBD82BLL;
    if (a2 <= 0x99BED48DEFBBD82BLL)
      v11 = 0x99BED48DEFBBD82BLL % a2;
  }
  else
  {
    v11 = (a2 - 1) & 0x99BED48DEFBBD82BLL;
  }
  v12 = *(_QWORD **)(a1 + 8 * v11);
  if (!v12)
    return v10;
  v13 = (_QWORD *)*v12;
  if (!v13)
    return v10;
  if (v2.u32[0] < 2uLL)
  {
    while (1)
    {
      v15 = v13[1];
      if (v15 == 0x99BED48DEFBBD82BLL)
      {
        if (v13[2] == 0x99BED48DEFBBD82BLL)
          goto LABEL_46;
      }
      else if ((v15 & (a2 - 1)) != v11)
      {
        return v10;
      }
      v13 = (_QWORD *)*v13;
      if (!v13)
        return v10;
    }
  }
  while (2)
  {
    v14 = v13[1];
    if (v14 != 0x99BED48DEFBBD82BLL)
    {
      if (v14 >= a2)
        v14 %= a2;
      if (v14 != v11)
        return v10;
      goto LABEL_35;
    }
    if (v13[2] != 0x99BED48DEFBBD82BLL)
    {
LABEL_35:
      v13 = (_QWORD *)*v13;
      if (!v13)
        return v10;
      continue;
    }
    break;
  }
LABEL_46:
  if (*(_QWORD *)(v13[5] + 8) == 0x99BED48DEFBBD82BLL)
    return v10;
  return v10;
}

_QWORD *gdc::ManagedObjectHolder<md::PolygonContext>::~ManagedObjectHolder(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_1E42B0C58;
  v2 = a1[4];
  if (v2)
    MEMORY[0x1A1AF4E00](v2, 0x1000C4004CED998);
  return a1;
}

uint64_t gdc::ObjectHolder<md::PolygonContext>::extract@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 32);
  *(_QWORD *)(result + 32) = 0;
  *a2 = v2;
  return result;
}

void md::NavLabel::~NavLabel(md::NavLabel *this)
{
  md::NavLabel::~NavLabel(this);
  JUMPOUT(0x1A1AF4E00);
}

{
  uint64_t v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;

  *(_QWORD *)this = &off_1E42AF5A8;
  if (*((_BYTE *)this + 26))
  {
    v2 = *((_QWORD *)this + 1);
    if (v2)
      *(_BYTE *)(v2 + 285) = 1;
  }
  v3 = *((_QWORD *)this + 36);
  *((_QWORD *)this + 36) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (std::__shared_weak_count *)*((_QWORD *)this + 23);
  if (!v4)
    goto LABEL_10;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v6 = __ldaxr(p_shared_owners);
  while (__stlxr(v6 - 1, p_shared_owners));
  if (!v6)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
    v7 = (std::__shared_weak_count *)*((_QWORD *)this + 21);
    if (!v7)
      goto LABEL_16;
  }
  else
  {
LABEL_10:
    v7 = (std::__shared_weak_count *)*((_QWORD *)this + 21);
    if (!v7)
      goto LABEL_16;
  }
  v8 = (unint64_t *)&v7->__shared_owners_;
  do
    v9 = __ldaxr(v8);
  while (__stlxr(v9 - 1, v8));
  if (!v9)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
LABEL_16:
  v10 = (std::__shared_weak_count *)*((_QWORD *)this + 11);
  if (!v10)
    goto LABEL_20;
  v11 = (unint64_t *)&v10->__shared_owners_;
  do
    v12 = __ldaxr(v11);
  while (__stlxr(v12 - 1, v11));
  if (!v12)
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
    v13 = (std::__shared_weak_count *)*((_QWORD *)this + 9);
    if (!v13)
      goto LABEL_26;
  }
  else
  {
LABEL_20:
    v13 = (std::__shared_weak_count *)*((_QWORD *)this + 9);
    if (!v13)
      goto LABEL_26;
  }
  v14 = (unint64_t *)&v13->__shared_owners_;
  do
    v15 = __ldaxr(v14);
  while (__stlxr(v15 - 1, v14));
  if (!v15)
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
  }
LABEL_26:
  if (*((char *)this + 55) < 0)
  {
    (*(void (**)(_QWORD, _QWORD, uint64_t))(**((_QWORD **)this + 7) + 40))(*((_QWORD *)this + 7), *((_QWORD *)this + 4), *((_QWORD *)this + 6) & 0x7FFFFFFFFFFFFFFFLL);
    v16 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
    if (!v16)
      return;
  }
  else
  {
    v16 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
    if (!v16)
      return;
  }
  v17 = (unint64_t *)&v16->__shared_owners_;
  do
    v18 = __ldaxr(v17);
  while (__stlxr(v18 - 1, v17));
  if (!v18)
  {
    ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
    std::__shared_weak_count::__release_weak(v16);
  }
}

uint64_t md::NavLabel::type(md::NavLabel *this)
{
  return 5;
}

void md::NavLabel::worldPointForDisplay(md::NavLabel *this, const md::NavContext *a2)
{
  _QWORD *v3;
  uint64_t v4;
  __int128 v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  long double v12;
  long double v13;
  double v14;
  long double v15;
  double v16;
  _QWORD v17[3];
  __int128 v18;

  v3 = (_QWORD *)*((_QWORD *)this + 20);
  if (v3)
  {
    if (a2 && !v3[1])
    {
      v4 = **(_QWORD **)(*((_QWORD *)a2 + 4) + 144);
      (*(void (**)(_QWORD *__return_ptr))(*v3 + 64))(v17);
      md::AnchorManager::newAnchorAtCoordinate((unint64_t *)&v18, v4, (uint64_t)v17, 0);
      v5 = v18;
      v18 = 0uLL;
      v6 = (std::__shared_weak_count *)*((_QWORD *)this + 21);
      *((_OWORD *)this + 10) = v5;
      if (v6)
      {
        p_shared_owners = (unint64_t *)&v6->__shared_owners_;
        do
          v8 = __ldaxr(p_shared_owners);
        while (__stlxr(v8 - 1, p_shared_owners));
        if (!v8)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
      v9 = (std::__shared_weak_count *)*((_QWORD *)&v18 + 1);
      if (*((_QWORD *)&v18 + 1))
      {
        v10 = (unint64_t *)(*((_QWORD *)&v18 + 1) + 8);
        do
          v11 = __ldaxr(v10);
        while (__stlxr(v11 - 1, v10));
        if (!v11)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
      }
      v3 = (_QWORD *)*((_QWORD *)this + 20);
    }
    (*(void (**)(_QWORD *))(*v3 + 48))(v3);
  }
  else if (a2 && !*(_BYTE *)(*((_QWORD *)a2 + 3) + 8))
  {
    v12 = *((double *)this + 14) * 6.28318531;
    v13 = exp(*((double *)this + 15) * 6.28318531 + -3.14159265);
    v14 = atan(v13) * 2.0 + -1.57079633;
    v15 = fmod(v12, 6.28318531);
    v16 = fmod(v15 + 6.28318531, 6.28318531) + -3.14159265;
    __sincos_stret(v14);
    __sincos_stret(v16);
  }
}

void md::NavLabel::layoutForStagingWithNavContext(md::NavLabel *this, md::NavContext *a2)
{
  uint64_t v2;
  uint64_t v3;
  unsigned __int8 v4;
  float v7;
  _BYTE *v8;
  char v9;
  unsigned int v10;
  float v11;
  double v12;
  __int128 v13;
  double v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  double v21;
  double v22;
  unint64_t *v23;
  unint64_t v24;
  float *v25;
  unsigned int v26;
  uint64_t v27;
  unsigned int v28;
  float *v29;
  float v30;
  BOOL v31;
  unsigned int v32;
  int v33;
  int v34;
  char v35;
  unsigned int v36;
  BOOL v37;
  uint64_t v38;
  std::__shared_weak_count *v39;
  std::__shared_weak_count *v40;
  std::__shared_weak_count *v41;
  uint64_t v42;
  std::__shared_weak_count *v43;
  double v44;
  long double v45;
  long double v46;
  double v47;
  long double v48;
  double v49;
  __double2 v50;
  double v51;
  double v52;
  __double2 v53;
  float64x2_t *v54;
  float v55;
  unint64_t *v56;
  unint64_t v57;
  uint64_t v58;
  float *v59;
  float v60;
  BOOL v61;
  unsigned int v62;
  float *v63;
  float v64;
  _BYTE *v65;
  int v66;
  int v67;
  int v68;
  float *v69;
  BOOL v70;
  float v71;
  float v72;
  uint64_t v73;
  uint64_t v74;
  unsigned __int8 v75;
  int v76;
  float v77;
  float v78;
  float v79;
  float v80;
  float v81;
  float v82;
  float *v83;
  float v84;
  float v85;
  float v86;
  float v87;
  float v88;
  float v89;
  __int128 v90;
  double v91[2];
  unsigned __int8 v92;
  __int128 v93;
  double v94;
  std::__shared_weak_count *v95;
  std::__shared_weak_count *v96;

  v2 = *((_QWORD *)this + 36);
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 640);
    if (v3)
    {
      v4 = atomic_load((unsigned __int8 *)(v3 + 144));
      if ((v4 & 1) != 0)
      {
        *((_BYTE *)this + 299) = 0;
        v7 = 0.0;
        if (*((_BYTE *)this + 296))
        {
          if (!*((_QWORD *)this + 10))
          {
LABEL_7:
            if (*((_QWORD *)this + 8)
              && (*(unsigned int (**)(md::NavLabel *))(*(_QWORD *)this + 16))(this) == 4)
            {
              md::LabelStyle::setZoom(*((md::LabelStyle **)this + 8), v7);
              v8 = (_BYTE *)*((_QWORD *)this + 8);
              v9 = v8[240];
              LOBYTE(v10) = v8[112];
              v11 = (float)v10;
              if (v7 >= v11)
              {
                LOBYTE(v11) = v8[113];
                *((_BYTE *)this + 298) = v7 <= (float)LODWORD(v11);
              }
              else
              {
                *((_BYTE *)this + 298) = 0;
              }
            }
            else
            {
              if ((*(unsigned int (**)(md::NavLabel *))(*(_QWORD *)this + 16))(this) == 4
                || *((_QWORD *)this + 10) && !*((_QWORD *)this + 8))
              {
                (*(void (**)(md::NavLabel *))(*(_QWORD *)this + 16))(this);
              }
              v9 = 0;
              *((_BYTE *)this + 298) = 0;
            }
            goto LABEL_98;
          }
LABEL_6:
          if ((*(unsigned int (**)(md::NavLabel *))(*(_QWORD *)this + 16))(this) == 4)
            goto LABEL_7;
          v15 = *((_QWORD *)this + 10);
          v16 = (std::__shared_weak_count *)*((_QWORD *)this + 11);
          *(_QWORD *)&v93 = v15;
          *((_QWORD *)&v93 + 1) = v16;
          if (v16)
          {
            p_shared_owners = (unint64_t *)&v16->__shared_owners_;
            do
              v18 = __ldxr(p_shared_owners);
            while (__stxr(v18 + 1, p_shared_owners));
            *((_QWORD *)&v90 + 1) = v16;
            do
              v19 = __ldxr(p_shared_owners);
            while (__stxr(v19 + 1, p_shared_owners));
          }
          else
          {
            *((_QWORD *)&v90 + 1) = 0;
          }
          v91[0] = 0.0;
          v91[1] = 0.0;
          *(_QWORD *)&v90 = v15;
          v92 = 0;
          if (v15)
            LODWORD(v15) = (*(uint64_t (**)(uint64_t, double *))(*(_QWORD *)v15 + 48))(v15, v91);
          v92 = v15;
          if (v16)
          {
            v23 = (unint64_t *)&v16->__shared_owners_;
            do
              v24 = __ldaxr(v23);
            while (__stlxr(v24 - 1, v23));
            if (!v24)
            {
              ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
              std::__shared_weak_count::__release_weak(v16);
            }
            LODWORD(v15) = v92;
          }
          if (!(_DWORD)v15)
          {
            gss::QueryableLocker<gss::PropertyID>::~QueryableLocker((uint64_t)&v90);
            return;
          }
          *((_QWORD *)this + 12) = 0;
          v25 = (float *)((char *)this + 96);
          v26 = (int)v7;
          *((_BYTE *)this + 104) = 0;
          v27 = *(_QWORD *)(v90 + 24);
          if ((int)v7 >= 0x17)
            v28 = 23;
          else
            v28 = (int)v7;
          v29 = *(float **)v27;
          if (*(_QWORD *)v27
            && (v30 = *v29, LODWORD(v29) = *v29 == 1.0, *(_BYTE *)(v27 + 10))
            && (v30 != 0.0 ? (v31 = v30 == 1.0) : (v31 = 1), !v31)
            || (v32 = *(unsigned __int8 *)(v27 + v29 + 11), v30 = 0.0, v32 == 2))
          {
            LOBYTE(v93) = 1;
            LOBYTE(v95) = 1;
            v33 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(v27, 0x157u, v28, 0, &v93);
            v34 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(v27, 0x157u, v28, 1u, &v95);
            if (v30 < 1.0)
              LOBYTE(v34) = v33;
          }
          else
          {
            v34 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(*(_QWORD *)(v90 + 24), 0x157u, v28, v32, 0);
          }
          *((_BYTE *)this + 104) = v34;
          LOBYTE(v93) = 1;
          v35 = gss::RenderStyle<gss::PropertyID>::valueForKeyAtZ<int>(*(_QWORD *)(v90 + 24), 0x84u, v28, (BOOL *)&v93);
          if ((_BYTE)v93)
            v9 = v35;
          else
            v9 = 10;
          v36 = (*(uint64_t (**)(md::NavLabel *))(*(_QWORD *)this + 16))(this);
          if (v36 >= 3)
          {
            if (v36 == 3)
            {
              if (!*((_BYTE *)this + 296))
              {
                v37 = gss::QueryableLocker<gss::PropertyID>::valueAtZ<(gss::PropertyID)220>(*(_QWORD *)(v90 + 24), v26);
                goto LABEL_64;
              }
              goto LABEL_62;
            }
            if (v36 != 6)
            {
              *((_BYTE *)this + 298) = 0;
LABEL_65:
              v38 = *((_QWORD *)this + 10);
              v39 = *(std::__shared_weak_count **)(v38 + 16);
              if (v39 && (v40 = std::__shared_weak_count::lock(v39), (*((_QWORD *)&v93 + 1) = v40) != 0))
              {
                v41 = v40;
                *(_QWORD *)&v93 = *(_QWORD *)(v38 + 8);
                if ((_QWORD)v93)
                {
                  v42 = *((_QWORD *)this + 10);
                  v95 = 0;
                  v96 = 0;
                  v43 = *(std::__shared_weak_count **)(v42 + 16);
                  if (v43)
                  {
                    v96 = std::__shared_weak_count::lock(v43);
                    if (v96)
                    {
                      v43 = *(std::__shared_weak_count **)(v42 + 8);
                      v95 = v43;
                    }
                    else
                    {
                      v43 = v95;
                    }
                  }
                  *v25 = gss::StylesheetManager<gss::PropertyID>::shieldBrightnessForMapMode((uint64_t)v43);
                  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&v95);
                }
                else
                {
                  *v25 = 1.0;
                }
                v56 = (unint64_t *)&v41->__shared_owners_;
                do
                  v57 = __ldaxr(v56);
                while (__stlxr(v57 - 1, v56));
                if (!v57)
                {
                  ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
                  std::__shared_weak_count::__release_weak(v41);
                }
              }
              else
              {
                *v25 = 1.0;
              }
              v58 = *(_QWORD *)(v90 + 24);
              v59 = *(float **)v58;
              if (*(_QWORD *)v58
                && (v60 = *v59, LODWORD(v59) = *v59 == 1.0, *(_BYTE *)(v58 + 10))
                && (v60 != 0.0 ? (v61 = v60 == 1.0) : (v61 = 1), !v61)
                || (v62 = *(unsigned __int8 *)(v58 + v59 + 11), v60 = 0.0, v62 == 2))
              {
                LOBYTE(v93) = 1;
                LOBYTE(v95) = 1;
                v63 = (float *)gss::RenderStyle<gss::PropertyID>::styleValueForKey<float>(v58, 0xDEu, 0, &v93);
                v64 = *v63
                    + (float)((float)(*(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKey<float>(v58, 0xDEu, 1u, &v95)- *v63)* v60);
              }
              else
              {
                v64 = *(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKey<float>(*(_QWORD *)(v90 + 24), 0xDEu, v62, 0);
              }
              *((float *)this + 25) = v64;
              gss::QueryableLocker<gss::PropertyID>::~QueryableLocker((uint64_t)&v90);
LABEL_98:
              *(float32x2_t *)&v90 = vadd_f32(*(float32x2_t *)((char *)this + 256), *(float32x2_t *)((char *)this + 300));
              (*(void (**)(_QWORD, char *))(**((_QWORD **)this + 36) + 952))(*((_QWORD *)this + 36), (char *)this + 96);
              v65 = (_BYTE *)*((_QWORD *)this + 36);
              v65[556] = 4 * v9;
              (*(void (**)(_BYTE *, md::NavContext *, __int128 *, char *))(*(_QWORD *)v65 + 960))(v65, a2, &v90, (char *)this + 256);
              *((float *)this + 77) = (*(float (**)(_QWORD))(**((_QWORD **)this + 36) + 264))(*((_QWORD *)this + 36));
              *((_DWORD *)this + 78) = v66;
              *((_DWORD *)this + 79) = v67;
              *((_DWORD *)this + 80) = v68;
              if ((*(unsigned int (**)(md::NavLabel *))(*(_QWORD *)this + 16))(this) == 6)
              {
                v69 = (float *)*((_QWORD *)a2 + 4);
                if (v69[14] > *((float *)this + 77)
                  && v69[12] < *((float *)this + 79)
                  && v69[15] > *((float *)this + 78)
                  && v69[13] < *((float *)this + 80))
                {
                  v70 = 1;
LABEL_117:
                  *((_BYTE *)this + 299) = v70;
                  return;
                }
LABEL_116:
                v70 = 0;
                goto LABEL_117;
              }
              v71 = *((float *)this + 79) - *((float *)this + 77);
              v72 = *((float *)this + 71);
              v73 = *((_QWORD *)this + 36);
              v74 = *(_QWORD *)(v73 + 640);
              if (v74 && (v75 = atomic_load((unsigned __int8 *)(v74 + 143)), (v75 & 1) != 0))
                v76 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v73 + 640) + 24))(*(_QWORD *)(v73 + 640));
              else
                v76 = 0;
              v77 = v71 * 0.5;
              v78 = v71 * v72;
              v79 = *((float *)this + 77);
              v80 = *((float *)this + 79) - v79;
              v81 = *((float *)this + 78);
              v82 = *((float *)this + 80) - v81;
              v83 = (float *)*((_QWORD *)a2 + 4);
              v84 = v83[12];
              if (v76)
              {
                v85 = (float)(v79 + v77) + (float)(v80 * 0.5);
                if (v85 < v84)
                  goto LABEL_116;
                v86 = v83[14];
                if (v85 >= v86)
                  goto LABEL_116;
                v87 = v81 + (float)(v82 * 0.5);
                if (v87 < v83[13])
                  goto LABEL_116;
                v88 = v85 - v78;
              }
              else
              {
                v89 = (float)(v79 - v77) + (float)(v80 * 0.5);
                if (v89 < v84)
                  goto LABEL_116;
                v86 = v83[14];
                if (v89 >= v86)
                  goto LABEL_116;
                v87 = v81 + (float)(v82 * 0.5);
                if (v87 < v83[13])
                  goto LABEL_116;
                v88 = v89 + v78;
              }
              v70 = v87 < v83[15];
              if (v88 < v84)
                v70 = 0;
              if (v88 >= v86)
                v70 = 0;
              goto LABEL_117;
            }
          }
          if (!*((_BYTE *)this + 296))
          {
            v37 = gss::QueryableLocker<gss::PropertyID>::valueAtZ<(gss::PropertyID)221>(*(_QWORD *)(v90 + 24), v26);
            goto LABEL_64;
          }
LABEL_62:
          v37 = *((_BYTE *)this + 297) != 0;
LABEL_64:
          *((_BYTE *)this + 298) = v37;
          goto LABEL_65;
        }
        if (*((_QWORD *)this + 20))
        {
          v12 = *((double *)this + 19);
          v13 = *(_OWORD *)((char *)this + 136);
          v93 = v13;
          v14 = *((double *)&v13 + 1);
        }
        else
        {
          if (a2)
          {
            v20 = *((_QWORD *)a2 + 3);
            v21 = *(float *)(v20 + 48);
            *(_QWORD *)&v13 = *((_QWORD *)this + 14);
            v14 = *((double *)this + 15);
            v22 = *((double *)this + 16);
            if (*(_BYTE *)(v20 + 8))
            {
              v12 = v21 * (0.0000000249532021 * v22);
            }
            else
            {
              v44 = v22 * v21;
              v45 = *(double *)&v13 * 6.28318531;
              v46 = exp(v14 * 6.28318531 + -3.14159265);
              v47 = atan(v46) * 2.0 + -1.57079633;
              v48 = fmod(v45, 6.28318531);
              v49 = fmod(v48 + 6.28318531, 6.28318531) + -3.14159265;
              v50 = __sincos_stret(v47);
              v51 = 6378137.0 / sqrt(v50.__sinval * v50.__sinval * -0.00669437999 + 1.0);
              v52 = (v51 + v44) * v50.__cosval;
              v53 = __sincos_stret(v49);
              *(double *)&v13 = v52 * v53.__cosval;
              v14 = v52 * v53.__sinval;
              v12 = (v44 + v51 * 0.99330562) * v50.__sinval;
            }
          }
          else
          {
            *(_QWORD *)&v13 = 0;
            v14 = 0.0;
            v12 = 0.0;
          }
          *(_QWORD *)&v93 = v13;
          *((double *)&v93 + 1) = v14;
        }
        v94 = v12;
        v54 = (float64x2_t *)*((_QWORD *)a2 + 3);
        *(float32x2_t *)((char *)this + 300) = vcvt_f32_f64(vmulq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(v54[60], v54[54], *(double *)&v13), v54[56], v14), v54[58], v12), 1.0/ (v54[61].f64[1]+ v54[55].f64[1] * *(double *)&v13+ v54[57].f64[1] * v14+ v54[59].f64[1] * v12)));
        v90 = xmmword_19FFB34C0;
        v91[0] = 0.0;
        v92 = 0;
        LOBYTE(v95) = 0;
        BYTE4(v96) = 0;
        md::LabelLayoutContext::evaluateWorldPoint((uint64_t)v54, (uint64_t)&v93, (uint64_t)&v95, 1u, 0, (uint64_t)&v90, 1.0);
        if (!v92)
        {
          v7 = *(float *)&v90;
          v55 = v91[0];
          *((float *)this + 50) = v55;
          if (!*((_QWORD *)this + 10))
            goto LABEL_7;
          goto LABEL_6;
        }
      }
    }
  }
}

void sub_19FA87F90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a19);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  gss::QueryableLocker<gss::PropertyID>::~QueryableLocker((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void md::NavLabel::layoutForDisplayWithNavContext(float32x2_t *this, float64x2_t **a2)
{
  float32x2_t v2;
  uint64_t v3;
  unsigned __int8 v4;
  float32x2_t v7;
  double v8;
  double v9;
  double v10;
  float64x2_t *v11;
  float32_t v12;
  __int32 v13;
  __int32 v14;
  __int32 v15;
  double v16;
  _QWORD v17[2];
  double v18;
  __int128 v19;
  double v20;
  _BYTE v21[16];

  v2 = this[36];
  if (v2)
  {
    v3 = *(_QWORD *)(*(_QWORD *)&v2 + 640);
    if (v3)
    {
      v4 = atomic_load((unsigned __int8 *)(v3 + 144));
      if ((v4 & 1) != 0)
      {
        if (this[40].i8[4])
        {
          v7 = this[41];
        }
        else
        {
          md::NavLabel::worldPointForDisplay((md::NavLabel *)this, (const md::NavContext *)a2);
          *(double *)&v19 = v8;
          *((double *)&v19 + 1) = v9;
          v20 = v10;
          v11 = a2[3];
          v16 = v10;
          v7 = vcvt_f32_f64(vmulq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(v11[60], v11[54], v8), v11[56], v9), v11[58], v10), 1.0 / (v11[61].f64[1] + v11[55].f64[1] * v8 + v11[57].f64[1] * v9 + v11[59].f64[1] * v10)));
          this[41] = v7;
          v18 = 0.0;
          v21[0] = 0;
          v21[12] = 0;
          md::LabelLayoutContext::evaluateWorldPoint((uint64_t)v11, (uint64_t)&v19, (uint64_t)v21, 1u, 0, (uint64_t)v17, 1.0);
          *(_OWORD *)this[26].f32 = v19;
          *(double *)&this[28] = v16;
          v12 = v18;
          this[31].f32[0] = v12;
        }
        v17[0] = vadd_f32(this[32], v7);
        (*(void (**)(_QWORD, float64x2_t **, _QWORD *, float32x2_t *))(**(_QWORD **)&this[36] + 976))(*(_QWORD *)&this[36], a2, v17, this + 32);
        this[42].f32[0] = (*(float (**)(_QWORD))(**(_QWORD **)&this[36] + 256))(*(_QWORD *)&this[36]);
        this[42].i32[1] = v13;
        this[43].i32[0] = v14;
        this[43].i32[1] = v15;
      }
    }
  }
}

BOOL gss::QueryableLocker<gss::PropertyID>::valueAtZ<(gss::PropertyID)221>(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  float *v4;
  float v5;
  BOOL v6;
  int v7;
  char v8;
  char v9;
  char v11;
  char v12;

  if (a2 >= 0x17)
    v3 = 23;
  else
    v3 = a2;
  v4 = *(float **)a1;
  if (*(_QWORD *)a1
    && (v5 = *v4, LODWORD(v4) = *v4 == 1.0, *(_BYTE *)(a1 + 10))
    && (v5 != 0.0 ? (v6 = v5 == 1.0) : (v6 = 1), !v6)
    || (v7 = *(unsigned __int8 *)(a1 + v4 + 11), v5 = 0.0, v7 == 2))
  {
    v12 = 1;
    v11 = 1;
    v8 = *(_BYTE *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<BOOL>((unsigned __int16 *)a1, 0xDDu, v3, 0, &v12);
    v9 = *(_BYTE *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<BOOL>((unsigned __int16 *)a1, 0xDDu, v3, 1, &v11);
    if (v5 < 1.0)
      v9 = v8;
  }
  else
  {
    v9 = *(_BYTE *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<BOOL>((unsigned __int16 *)a1, 0xDDu, v3, v7, 0);
  }
  return v9 != 0;
}

BOOL gss::QueryableLocker<gss::PropertyID>::valueAtZ<(gss::PropertyID)220>(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  float *v4;
  float v5;
  BOOL v6;
  int v7;
  char v8;
  char v9;
  char v11;
  char v12;

  if (a2 >= 0x17)
    v3 = 23;
  else
    v3 = a2;
  v4 = *(float **)a1;
  if (*(_QWORD *)a1
    && (v5 = *v4, LODWORD(v4) = *v4 == 1.0, *(_BYTE *)(a1 + 10))
    && (v5 != 0.0 ? (v6 = v5 == 1.0) : (v6 = 1), !v6)
    || (v7 = *(unsigned __int8 *)(a1 + v4 + 11), v5 = 0.0, v7 == 2))
  {
    v12 = 1;
    v11 = 1;
    v8 = *(_BYTE *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<BOOL>((unsigned __int16 *)a1, 0xDCu, v3, 0, &v12);
    v9 = *(_BYTE *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<BOOL>((unsigned __int16 *)a1, 0xDCu, v3, 1, &v11);
    if (v5 < 1.0)
      v9 = v8;
  }
  else
  {
    v9 = *(_BYTE *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<BOOL>((unsigned __int16 *)a1, 0xDCu, v3, v7, 0);
  }
  return v9 != 0;
}

float gss::StylesheetManager<gss::PropertyID>::shieldBrightnessForMapMode(uint64_t a1)
{
  uint64_t v2;
  float v3;
  uint64_t v4;
  unsigned __int8 v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  unsigned __int8 v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  float v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  float v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  __int16 v29;

  v29 = 0;
  v2 = *(_QWORD *)(a1 + 520);
  v3 = 1.0;
  if (!v2)
    return v3;
  gss::ClientStyleState<gss::PropertyID>::queryNightMode(v2, (BOOL *)&v29 + 1, (BOOL *)&v29);
  if (!HIBYTE(v29))
  {
    if (!(_BYTE)v29)
      return v3;
    v10 = *(_QWORD *)(a1 + 16);
    v11 = atomic_load((unsigned __int8 *)(v10 + 2784));
    if ((v11 & 1) == 0)
      std::__assoc_sub_state::wait(*(std::__assoc_sub_state **)(v10 + 2808));
    v12 = *(_QWORD *)(v10 + 120);
    v13 = *(std::__shared_weak_count **)(v10 + 128);
    if (v13)
    {
      p_shared_owners = (unint64_t *)&v13->__shared_owners_;
      do
        v15 = __ldxr(p_shared_owners);
      while (__stxr(v15 + 1, p_shared_owners));
    }
    if (v12)
    {
      v16 = *(float *)(v12 + 92) + -1.0;
      if (!v13)
        return (float)(v16 * *(float *)(*(_QWORD *)(a1 + 520) + 256)) + 1.0;
    }
    else
    {
      v16 = 0.0;
      if (!v13)
        return (float)(v16 * *(float *)(*(_QWORD *)(a1 + 520) + 256)) + 1.0;
    }
    v24 = (unint64_t *)&v13->__shared_owners_;
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
    return (float)(v16 * *(float *)(*(_QWORD *)(a1 + 520) + 256)) + 1.0;
  }
  v4 = *(_QWORD *)(a1 + 16);
  v5 = atomic_load((unsigned __int8 *)(v4 + 2784));
  if (!(_BYTE)v29)
  {
    if ((v5 & 1) == 0)
      std::__assoc_sub_state::wait(*(std::__assoc_sub_state **)(v4 + 2808));
    v17 = *(_QWORD *)(v4 + 120);
    v18 = *(std::__shared_weak_count **)(v4 + 128);
    if (v18)
    {
      v19 = (unint64_t *)&v18->__shared_owners_;
      do
        v20 = __ldxr(v19);
      while (__stxr(v20 + 1, v19));
    }
    if (v17)
    {
      v21 = *(float *)(v17 + 92);
      if (!v18)
        return v21 + (float)((float)(1.0 - v21) * *(float *)(*(_QWORD *)(a1 + 520) + 256));
    }
    else
    {
      v21 = 1.0;
      if (!v18)
        return v21 + (float)((float)(1.0 - v21) * *(float *)(*(_QWORD *)(a1 + 520) + 256));
    }
    v26 = (unint64_t *)&v18->__shared_owners_;
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
    return v21 + (float)((float)(1.0 - v21) * *(float *)(*(_QWORD *)(a1 + 520) + 256));
  }
  if ((v5 & 1) == 0)
    std::__assoc_sub_state::wait(*(std::__assoc_sub_state **)(v4 + 2808));
  v6 = *(_QWORD *)(v4 + 120);
  v7 = *(std::__shared_weak_count **)(v4 + 128);
  if (v7)
  {
    v8 = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  if (v6)
  {
    v3 = *(float *)(v6 + 92);
    if (!v7)
      return v3;
  }
  else
  {
    v3 = 1.0;
    if (!v7)
      return v3;
  }
  v22 = (unint64_t *)&v7->__shared_owners_;
  do
    v23 = __ldaxr(v22);
  while (__stlxr(v23 - 1, v22));
  if (!v23)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
  return v3;
}

void ggl::FlyoverRoadStrokeProcedural::DefaultPipelineState::~DefaultPipelineState(ggl::FlyoverRoadStrokeProcedural::DefaultPipelineState *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  *(_QWORD *)this = &off_1E42B6760;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *(_QWORD *)this = &off_1E42B8A10;
  v5 = *((_QWORD *)this + 1);
  if (v5)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 16))(v5, *((_QWORD *)this + 3));
    *((_QWORD *)this + 3) = 3735927469;
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  *(_QWORD *)this = &off_1E42B6760;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *(_QWORD *)this = &off_1E42B8A10;
  v5 = *((_QWORD *)this + 1);
  if (v5)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 16))(v5, *((_QWORD *)this + 3));
    *((_QWORD *)this + 3) = 3735927469;
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void ggl::FlyoverRoadStrokeProcedural::DefaultPipelineSetup::~DefaultPipelineSetup(ggl::FlyoverRoadStrokeProcedural::DefaultPipelineSetup *this)
{
  ggl::PipelineSetup::~PipelineSetup(this);
  JUMPOUT(0x1A1AF4E00);
}

BOOL ggl::FlyoverRoadStrokeProcedural::DefaultPipelineSetup::constantDataIsEnabled(ggl::FlyoverRoadStrokeProcedural::DefaultPipelineSetup *this, unint64_t a2)
{
  return a2 < 5;
}

uint64_t ggl::FlyoverRoadStrokeProcedural::DefaultPipelineSetup::textureIsEnabled(ggl::FlyoverRoadStrokeProcedural::DefaultPipelineSetup *this)
{
  return 0;
}

_QWORD *ggl::FlyoverRoadStrokeProcedural::DefaultPipelineSetup::DefaultPipelineSetup(_QWORD *a1, uint64_t a2, std::__shared_weak_count *a3, uint64_t *a4, uint64_t *a5, uint64_t *a6, uint64_t *a7, uint64_t *a8)
{
  unint64_t *p_shared_owners;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t *v32;
  unint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t *v41;
  unint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t *v50;
  unint64_t v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t *v59;
  unint64_t v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;

  if (a3)
  {
    p_shared_owners = (unint64_t *)&a3->__shared_owners_;
    do
      v16 = __ldxr(p_shared_owners);
    while (__stxr(v16 + 1, p_shared_owners));
    ggl::PipelineSetup::PipelineSetup(a1, a2, (uint64_t)a3);
    v17 = (unint64_t *)&a3->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))a3->__on_zero_shared)(a3);
      std::__shared_weak_count::__release_weak(a3);
    }
  }
  else
  {
    ggl::PipelineSetup::PipelineSetup(a1, a2, 0);
  }
  *a1 = &off_1E42BB570;
  v19 = (uint64_t *)a1[8];
  v20 = *a4;
  v21 = a4[1];
  *v19 = *a4;
  v19[1] = 0;
  v22 = (_QWORD *)a1[20];
  if (v21)
  {
    v23 = (unint64_t *)(v21 + 8);
    do
      v24 = __ldxr(v23);
    while (__stxr(v24 + 1, v23));
  }
  v25 = (std::__shared_weak_count *)v22[1];
  *v22 = v20;
  v22[1] = v21;
  if (v25)
  {
    v26 = (unint64_t *)&v25->__shared_owners_;
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  v28 = a1[8];
  v29 = *a5;
  v30 = a5[1];
  *(_QWORD *)(v28 + 16) = *a5;
  *(_QWORD *)(v28 + 24) = 0;
  v31 = a1[20];
  if (v30)
  {
    v32 = (unint64_t *)(v30 + 8);
    do
      v33 = __ldxr(v32);
    while (__stxr(v33 + 1, v32));
  }
  v34 = *(std::__shared_weak_count **)(v31 + 24);
  *(_QWORD *)(v31 + 16) = v29;
  *(_QWORD *)(v31 + 24) = v30;
  if (v34)
  {
    v35 = (unint64_t *)&v34->__shared_owners_;
    do
      v36 = __ldaxr(v35);
    while (__stlxr(v36 - 1, v35));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      std::__shared_weak_count::__release_weak(v34);
    }
  }
  v37 = a1[8];
  v38 = *a6;
  v39 = a6[1];
  *(_QWORD *)(v37 + 32) = *a6;
  *(_QWORD *)(v37 + 40) = 0;
  v40 = a1[20];
  if (v39)
  {
    v41 = (unint64_t *)(v39 + 8);
    do
      v42 = __ldxr(v41);
    while (__stxr(v42 + 1, v41));
  }
  v43 = *(std::__shared_weak_count **)(v40 + 40);
  *(_QWORD *)(v40 + 32) = v38;
  *(_QWORD *)(v40 + 40) = v39;
  if (v43)
  {
    v44 = (unint64_t *)&v43->__shared_owners_;
    do
      v45 = __ldaxr(v44);
    while (__stlxr(v45 - 1, v44));
    if (!v45)
    {
      ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
      std::__shared_weak_count::__release_weak(v43);
    }
  }
  v46 = a1[8];
  v47 = *a7;
  v48 = a7[1];
  *(_QWORD *)(v46 + 48) = *a7;
  *(_QWORD *)(v46 + 56) = 0;
  v49 = a1[20];
  if (v48)
  {
    v50 = (unint64_t *)(v48 + 8);
    do
      v51 = __ldxr(v50);
    while (__stxr(v51 + 1, v50));
  }
  v52 = *(std::__shared_weak_count **)(v49 + 56);
  *(_QWORD *)(v49 + 48) = v47;
  *(_QWORD *)(v49 + 56) = v48;
  if (v52)
  {
    v53 = (unint64_t *)&v52->__shared_owners_;
    do
      v54 = __ldaxr(v53);
    while (__stlxr(v54 - 1, v53));
    if (!v54)
    {
      ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
      std::__shared_weak_count::__release_weak(v52);
    }
  }
  v55 = a1[8];
  v56 = *a8;
  v57 = a8[1];
  *(_QWORD *)(v55 + 64) = *a8;
  *(_QWORD *)(v55 + 72) = 0;
  v58 = a1[20];
  if (v57)
  {
    v59 = (unint64_t *)(v57 + 8);
    do
      v60 = __ldxr(v59);
    while (__stxr(v60 + 1, v59));
  }
  v61 = *(std::__shared_weak_count **)(v58 + 72);
  *(_QWORD *)(v58 + 64) = v56;
  *(_QWORD *)(v58 + 72) = v57;
  if (v61)
  {
    v62 = (unint64_t *)&v61->__shared_owners_;
    do
      v63 = __ldaxr(v62);
    while (__stlxr(v63 - 1, v62));
    if (!v63)
    {
      ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
      std::__shared_weak_count::__release_weak(v61);
    }
  }
  return a1;
}

void std::default_delete<geo::Cache<unsigned long,geo::_retain_ptr<VKRoadSignArtwork * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>,std::hash<unsigned long>,geo::LRUPolicy>>::operator()[abi:nn180100](_QWORD *a1)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t *v6;
  _QWORD *v7;
  _QWORD *v8;
  void *v9;

  if (a1[8])
  {
    v2 = a1 + 6;
    v3 = a1[6];
    v4 = (uint64_t *)a1[7];
    v5 = *v4;
    *(_QWORD *)(v5 + 8) = *(_QWORD *)(v3 + 8);
    **(_QWORD **)(v3 + 8) = v5;
    a1[8] = 0;
    if (v4 != a1 + 6)
    {
      do
      {
        v6 = (uint64_t *)v4[1];
        v4[3] = (uint64_t)&off_1E42B4D30;

        operator delete(v4);
        v4 = v6;
      }
      while (v6 != v2);
    }
  }
  v7 = (_QWORD *)a1[3];
  if (v7)
  {
    do
    {
      v8 = (_QWORD *)*v7;
      operator delete(v7);
      v7 = v8;
    }
    while (v8);
  }
  v9 = (void *)a1[1];
  a1[1] = 0;
  if (v9)
    operator delete(v9);
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *geo::Cache<unsigned long,std::shared_ptr<md::LabelIcon>,std::hash<unsigned long>,geo::LRUPolicy>::~Cache(_QWORD *a1)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  void *v8;
  uint64_t *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;

  if (a1[8])
  {
    v2 = a1 + 6;
    v3 = a1[6];
    v4 = (uint64_t *)a1[7];
    v5 = *v4;
    *(_QWORD *)(v5 + 8) = *(_QWORD *)(v3 + 8);
    **(_QWORD **)(v3 + 8) = v5;
    a1[8] = 0;
    if (v4 != a1 + 6)
    {
      do
      {
        v10 = (uint64_t *)v4[1];
        v11 = (std::__shared_weak_count *)v4[4];
        if (v11)
        {
          p_shared_owners = (unint64_t *)&v11->__shared_owners_;
          do
            v13 = __ldaxr(p_shared_owners);
          while (__stlxr(v13 - 1, p_shared_owners));
          if (!v13)
          {
            ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
            std::__shared_weak_count::__release_weak(v11);
          }
        }
        operator delete(v4);
        v4 = v10;
      }
      while (v10 != v2);
    }
  }
  v6 = (_QWORD *)a1[3];
  if (v6)
  {
    do
    {
      v7 = (_QWORD *)*v6;
      operator delete(v6);
      v6 = v7;
    }
    while (v7);
  }
  v8 = (void *)a1[1];
  a1[1] = 0;
  if (v8)
    operator delete(v8);
  return a1;
}

uint64_t geo::_retain_ptr<VKRoadSignArtwork * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>::~_retain_ptr(uint64_t a1)
{
  *(_QWORD *)a1 = &off_1E42B4D30;

  return a1;
}

void geo::_retain_ptr<VKRoadSignArtwork * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>::~_retain_ptr(uint64_t a1)
{
  *(_QWORD *)a1 = &off_1E42B4D30;

  JUMPOUT(0x1A1AF4E00);
}

void VKLabelNavArtworkCache::~VKLabelNavArtworkCache(VKLabelNavArtworkCache *this)
{
  std::__shared_weak_count *v2;
  uint64_t *v3;
  const void *v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;

  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 6);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = (uint64_t *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    v3[7] = (uint64_t)&off_1E42B47F0;
    v4 = (const void *)v3[8];
    if (v4)
      CFRelease(v4);
    v5 = (_QWORD *)v3[3];
    if (v5)
    {
      do
      {
        v6 = (_QWORD *)*v5;
        (*(void (**)(uint64_t))(*(_QWORD *)v3[4] + 40))(v3[4]);
        v5 = v6;
      }
      while (v6);
    }
    v7 = *v3;
    *v3 = 0;
    if (v7)
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v3[2] + 40))(v3[2], v7, 8 * v3[1]);
    MEMORY[0x1A1AF4E00](v3, 0x10A0C4047D11187);
  }
  v8 = (_QWORD *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v8)
  {
    v9 = geo::Cache<unsigned long,std::shared_ptr<md::LabelIcon>,std::hash<unsigned long>,geo::LRUPolicy>::~Cache(v8);
    MEMORY[0x1A1AF4E00](v9, 0x10A0C407D9D2971);
  }
  v10 = *(_QWORD **)this;
  *(_QWORD *)this = 0;
  if (v10)
    std::default_delete<geo::Cache<unsigned long,geo::_retain_ptr<VKRoadSignArtwork * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>,std::hash<unsigned long>,geo::LRUPolicy>>::operator()[abi:nn180100](v10);
}

id VKLabelNavArtworkCache::getRoadSignArtwork(VKLabelNavArtworkCache *this, NSString *a2, const RoadSignMetrics *a3, const RoadSignColoring *a4, const md::RoadSignTextMetrics *a5)
{
  NSString *v9;
  const RoadSignColoring *v10;
  uint64_t v11;
  id v12;
  id v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *p_shared_weak_owners;
  unint64_t v24;
  void *v25;
  std::__shared_weak_count *v26;
  unint64_t *p_shared_owners;
  unint64_t v28;
  id v29;
  uint64_t v30;
  uint64_t v32;
  std::__shared_weak_count *v33;
  uint64_t v34;
  std::__shared_weak_count *v35;
  __int128 v36[3];
  uint64_t v37;
  __int128 v38;
  uint64_t v39;
  uint64_t v40;
  __int128 v41;
  uint64_t v42;
  uint64_t v43;
  __int128 v44;
  __int16 v45;
  _OWORD v46[10];
  unint64_t RoadSignKey;

  v9 = a2;
  RoadSignKey = VKLabelNavArtworkCache::getRoadSignKey((VKLabelNavArtworkCache *)v9, 0, (double *)&a3->_orientation, (const RoadSignMetrics *)a5, (const md::RoadSignTextMetrics *)a4, v10);
  v11 = geo::LRUPolicy<unsigned long,geo::_retain_ptr<VKRoadSignArtwork * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>,std::hash<unsigned long>>::get(*(_QWORD *)this + 48, *(_QWORD *)(*(_QWORD *)this + 8), *(_QWORD *)(*(_QWORD *)this + 16), RoadSignKey);
  if (*(_QWORD *)this + 48 == v11)
  {
    v14 = *((_QWORD *)this + 2);
    v15 = *(_OWORD *)&a3->_horizontalMargin;
    v46[6] = *(_OWORD *)&a3->_signHeight;
    v46[7] = v15;
    v16 = *(_OWORD *)&a3->_glyphSize.height;
    v46[8] = *(_OWORD *)&a3->_cornerRadius;
    v46[9] = v16;
    v17 = *(_OWORD *)&a3->_arrowJoinCornerRadius;
    v46[2] = *(_OWORD *)&a3->_arrowLength;
    v46[3] = v17;
    v18 = *(_OWORD *)&a3->_strokeWeight;
    v46[4] = *(_OWORD *)&a3->_shadowOffset.height;
    v46[5] = v18;
    v19 = *(_OWORD *)&a3->_contentScale;
    v46[0] = *(_OWORD *)&a3->_orientation;
    v46[1] = v19;
    v20 = *((_OWORD *)a5 + 1);
    v36[0] = *(_OWORD *)a5;
    v36[1] = v20;
    v36[2] = *((_OWORD *)a5 + 2);
    v21 = *((_QWORD *)a5 + 10);
    v37 = *((_QWORD *)a5 + 6);
    v40 = v21;
    if (*((char *)a5 + 79) < 0)
    {
      std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>::__init_copy_ctor_external((_QWORD **)&v38, *((void **)a5 + 7), *((_QWORD *)a5 + 8));
    }
    else
    {
      v38 = *(_OWORD *)((char *)a5 + 56);
      v39 = *((_QWORD *)a5 + 9);
    }
    v43 = *((_QWORD *)a5 + 14);
    if (*((char *)a5 + 111) < 0)
    {
      std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>::__init_copy_ctor_external((_QWORD **)&v41, *((void **)a5 + 11), *((_QWORD *)a5 + 12));
    }
    else
    {
      v41 = *(_OWORD *)((char *)a5 + 88);
      v42 = *((_QWORD *)a5 + 13);
    }
    v44 = *(_OWORD *)((char *)a5 + 120);
    v45 = *((_WORD *)a5 + 68);
    v34 = 0;
    v35 = 0;
    v22 = (std::__shared_weak_count *)*((_QWORD *)this + 6);
    v32 = *((_QWORD *)this + 5);
    v33 = v22;
    if (v22)
    {
      p_shared_weak_owners = (unint64_t *)&v22->__shared_weak_owners_;
      do
        v24 = __ldxr(p_shared_weak_owners);
      while (__stxr(v24 + 1, p_shared_weak_owners));
    }
    md::RoadSignArtworkGenerator::generateRoadSignArtwork(v14, v9, (uint64_t)v46, v36, (uint64_t)a4, (double *)&v34, &v32);
    v25 = (void *)objc_claimAutoreleasedReturnValue();
    if (v33)
      std::__shared_weak_count::__release_weak(v33);
    v26 = v35;
    if (!v35)
      goto LABEL_20;
    p_shared_owners = (unint64_t *)&v35->__shared_owners_;
    do
      v28 = __ldaxr(p_shared_owners);
    while (__stlxr(v28 - 1, p_shared_owners));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
      if ((SHIBYTE(v42) & 0x80000000) == 0)
      {
LABEL_21:
        if ((SHIBYTE(v39) & 0x80000000) == 0)
        {
LABEL_22:
          v29 = v25;
          v30 = *(_QWORD *)this;
          v13 = v29;
          geo::Cache<unsigned long,geo::_retain_ptr<VKRoadSignArtwork * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>,std::hash<unsigned long>,geo::LRUPolicy>::insert(v30, &RoadSignKey, v13);

          goto LABEL_23;
        }
LABEL_26:
        (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v40 + 40))(v40, v38, v39 & 0x7FFFFFFFFFFFFFFFLL);
        goto LABEL_22;
      }
    }
    else
    {
LABEL_20:
      if ((SHIBYTE(v42) & 0x80000000) == 0)
        goto LABEL_21;
    }
    (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v43 + 40))(v43, v41, v42 & 0x7FFFFFFFFFFFFFFFLL);
    if ((SHIBYTE(v39) & 0x80000000) == 0)
      goto LABEL_22;
    goto LABEL_26;
  }
  v12 = *(id *)(v11 + 32);
  if (v12)
    v13 = v12;
  else
    v13 = 0;
LABEL_23:

  return v13;
}

void sub_19FA88F90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, char a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23)
{
  void *v23;

  if (SHIBYTE(a22) < 0)
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a23 + 40))(a23, a20, a22 & 0x7FFFFFFFFFFFFFFFLL);

  _Unwind_Resume(a1);
}

uint64_t VKLabelNavArtworkCache::getRoadSignKey(VKLabelNavArtworkCache *this, NSString *a2, double *a3, const RoadSignMetrics *a4, const md::RoadSignTextMetrics *a5, const RoadSignColoring *a6)
{
  VKLabelNavArtworkCache *v10;
  VKLabelNavArtworkCache *v11;
  unint64_t v12;
  uint64_t v13;
  double v14;
  double v15;
  double v16;
  double scale;
  double arrowWeight;
  double contentScale;
  double arrowLength;
  int shadowRadius_high;
  CGFloat width;
  unint64_t v23;
  double arrowJoinCornerRadius;
  unint64_t v25;
  double v26;
  double *p_innerStrokeWeight;
  double innerStrokeWeight;
  int v29;
  uint64_t *v30;
  unint64_t v31;
  unint64_t v32;
  double v33;
  unint64_t v34;
  unint64_t v35;
  double v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  double v42;
  uint64_t v43;
  unint64_t v44;
  double v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  double v50;
  uint64_t v51;
  unint64_t v52;
  double v53;
  unint64_t v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  double v58;
  uint64_t v59;
  unint64_t v60;
  double v61;
  uint64_t v62;
  unint64_t v63;
  double v64;
  uint64_t v65;
  unint64_t v66;
  double v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t v72;
  uint64_t v73;
  unint64_t v74;
  unint64_t v75;
  double v76;
  uint64_t v77;
  unint64_t v78;
  double v79;
  unint64_t v80;
  uint64_t v81;
  unint64_t v82;
  unint64_t v83;
  double v84;
  uint64_t v85;
  unint64_t v86;
  double v87;
  unint64_t v88;
  uint64_t v89;
  unint64_t v90;
  unint64_t v91;
  double v92;
  double v93;
  double v94;
  uint64_t v95;
  unint64_t v96;
  double v97;
  unint64_t v98;
  uint64_t v99;
  unint64_t v100;
  unint64_t v101;
  unint64_t v102;
  unint64_t v103;
  unint64_t v104;
  unint64_t v105;
  double v106;
  uint64_t v107;
  unint64_t v108;
  double v109;
  uint64_t v110;
  unint64_t v111;
  double v112;
  uint64_t v113;
  unint64_t v114;
  double v115;
  uint64_t v116;
  unint64_t v117;
  double v118;
  uint64_t v119;
  unint64_t v120;
  unint64_t v121;
  unint64_t v122;
  unint64_t v123;
  unint64_t v124;
  unint64_t v125;
  unint64_t v126;
  unint64_t v127;
  unint64_t v128;
  unint64_t v129;
  unint64_t v130;
  unint64_t v131;
  unint64_t v132;
  double v133;
  uint64_t v134;
  unint64_t v135;
  double v136;
  uint64_t v137;
  unint64_t v138;
  double v139;
  uint64_t v140;
  unint64_t v141;
  double v142;
  uint64_t v143;
  unint64_t v144;
  double v145;
  uint64_t v146;
  unint64_t v147;
  double v148;
  uint64_t v149;
  unint64_t v150;
  double v151;
  uint64_t v152;
  unint64_t v153;
  double v154;
  uint64_t v155;
  unint64_t v156;
  double v157;
  uint64_t v158;
  unint64_t v159;
  double v160;
  uint64_t v161;
  unint64_t v162;
  double v163;
  uint64_t v164;
  unint64_t v165;
  double v166;
  double v167;
  double v168;
  double v169;
  double v170;
  double v171;
  unint64_t v172;
  unint64_t v173;
  unint64_t v174;
  unint64_t v175;
  unint64_t v176;
  uint64_t v177;
  unint64_t v178;
  unint64_t v179;
  unint64_t v180;
  uint64_t v181;
  double arrowTipCornerRadius;
  double v184;
  double v185;
  double v186;
  double v187;
  double v188;
  double v189;
  double v190;
  double v191;
  double v192;
  double v193;
  double v194;
  double v195;
  double v196;
  double v197;

  v10 = this;
  v11 = v10;
  if (v10)
    v12 = -[VKLabelNavArtworkCache hash](v10, "hash");
  else
    v12 = 0;
  v13 = *(unsigned __int8 *)a3;
  v14 = a3[1];
  v15 = a3[2];
  v184 = a3[3];
  v185 = a3[4];
  v186 = a3[7];
  v187 = a3[8];
  v188 = a3[9];
  v189 = a3[10];
  v190 = a3[12];
  v191 = a3[13];
  v192 = a3[14];
  v193 = a3[15];
  v194 = a3[16];
  v195 = a3[17];
  v196 = a3[18];
  v197 = a3[19];
  v16 = *(double *)&a4->_orientation;
  scale = a4->_scale;
  contentScale = a4->_contentScale;
  arrowWeight = a4->_arrowWeight;
  arrowLength = a4->_arrowLength;
  arrowTipCornerRadius = a4->_arrowTipCornerRadius;
  shadowRadius_high = SHIBYTE(a4->_shadowRadius);
  if (shadowRadius_high >= 0)
    *(_QWORD *)&width = &a4->_shadowOffset;
  else
    width = a4->_shadowOffset.width;
  if (shadowRadius_high >= 0)
    v23 = HIBYTE(a4->_shadowRadius);
  else
    v23 = *(_QWORD *)&a4->_shadowOffset.height;
  arrowJoinCornerRadius = a4->_arrowJoinCornerRadius;
  v25 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:nn180100](*(uint64_t **)&width, v23);
  innerStrokeWeight = a4->_innerStrokeWeight;
  p_innerStrokeWeight = &a4->_innerStrokeWeight;
  v26 = innerStrokeWeight;
  v29 = *((char *)p_innerStrokeWeight + 23);
  if (v29 >= 0)
    v30 = (uint64_t *)p_innerStrokeWeight;
  else
    v30 = *(uint64_t **)&v26;
  if (v29 >= 0)
    v31 = *((unsigned __int8 *)p_innerStrokeWeight + 23);
  else
    v31 = *((_QWORD *)p_innerStrokeWeight + 1);
  v32 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:nn180100](v30, v31);
  if (!*(_BYTE *)a5)
  {
    v41 = 0;
    if (!*((_BYTE *)a5 + 3))
      goto LABEL_35;
    goto LABEL_26;
  }
  v33 = *((double *)a5 + 2);
  v34 = *((_QWORD *)a5 + 1) - 0x61C8864680B583EBLL;
  if (*((double *)a5 + 1) == 0.0)
    v34 = 0x9E3779B97F4A7C15;
  v35 = *(_QWORD *)&v33 - 0x61C8864680B583EBLL;
  if (v33 == 0.0)
    v35 = 0x9E3779B97F4A7C15;
  v36 = *((double *)a5 + 4);
  v37 = ((v34 >> 2) + (v34 << 6) + v35) ^ v34;
  v38 = *((_QWORD *)a5 + 3) - 0x61C8864680B583EBLL;
  if (*((double *)a5 + 3) == 0.0)
    v38 = 0x9E3779B97F4A7C15;
  v39 = ((v37 >> 2) + (v37 << 6) + v38) ^ v37;
  v40 = *(_QWORD *)&v36 - 0x61C8864680B583EBLL;
  if (v36 == 0.0)
    v40 = 0x9E3779B97F4A7C15;
  v41 = ((v39 >> 2) + (v39 << 6) + v40) ^ v39;
  if (*((_BYTE *)a5 + 3))
  {
LABEL_26:
    v42 = *((double *)a5 + 14);
    v43 = *((_QWORD *)a5 + 13) - 0x61C8864680B583EBLL;
    if (*((double *)a5 + 13) == 0.0)
      v43 = 0x9E3779B97F4A7C15;
    v44 = *(_QWORD *)&v42 - 0x61C8864680B583EBLL;
    if (v42 == 0.0)
      v44 = 0x9E3779B97F4A7C15;
    v45 = *((double *)a5 + 16);
    v46 = (((((v41 >> 2) + (v41 << 6) + v43) ^ v41) >> 2) + ((((v41 >> 2) + (v41 << 6) + v43) ^ v41) << 6) + v44) ^ ((v41 >> 2) + (v41 << 6) + v43) ^ v41;
    v47 = *((_QWORD *)a5 + 15) - 0x61C8864680B583EBLL;
    if (*((double *)a5 + 15) == 0.0)
      v47 = 0x9E3779B97F4A7C15;
    v48 = ((v46 >> 2) + (v46 << 6) + v47) ^ v46;
    v49 = *(_QWORD *)&v45 - 0x61C8864680B583EBLL;
    if (v45 == 0.0)
      v49 = 0x9E3779B97F4A7C15;
    v41 = ((v48 >> 2) + (v48 << 6) + v49) ^ v48;
  }
LABEL_35:
  if (*((_BYTE *)a5 + 4))
  {
    v50 = *((double *)a5 + 18);
    v51 = *((_QWORD *)a5 + 17) - 0x61C8864680B583EBLL;
    if (*((double *)a5 + 17) == 0.0)
      v51 = 0x9E3779B97F4A7C15;
    v52 = *(_QWORD *)&v50 - 0x61C8864680B583EBLL;
    if (v50 == 0.0)
      v52 = 0x9E3779B97F4A7C15;
    v53 = *((double *)a5 + 20);
    v54 = (((((v41 >> 2) + (v41 << 6) + v51) ^ v41) >> 2) + ((((v41 >> 2) + (v41 << 6) + v51) ^ v41) << 6) + v52) ^ ((v41 >> 2) + (v41 << 6) + v51) ^ v41;
    v55 = *((_QWORD *)a5 + 19) - 0x61C8864680B583EBLL;
    if (*((double *)a5 + 19) == 0.0)
      v55 = 0x9E3779B97F4A7C15;
    v56 = ((v54 >> 2) + (v54 << 6) + v55) ^ v54;
    v57 = *(_QWORD *)&v53 - 0x61C8864680B583EBLL;
    if (v53 == 0.0)
      v57 = 0x9E3779B97F4A7C15;
    v41 = ((v56 >> 2) + (v56 << 6) + v57) ^ v56;
  }
  if (*((_BYTE *)a5 + 1))
  {
    v58 = *((double *)a5 + 6);
    v59 = *((_QWORD *)a5 + 5) - 0x61C8864680B583EBLL;
    if (*((double *)a5 + 5) == 0.0)
      v59 = 0x9E3779B97F4A7C15;
    v60 = *(_QWORD *)&v58 - 0x61C8864680B583EBLL;
    if (v58 == 0.0)
      v60 = 0x9E3779B97F4A7C15;
    v61 = *((double *)a5 + 8);
    v62 = *((_QWORD *)a5 + 7) - 0x61C8864680B583EBLL;
    if (*((double *)a5 + 7) == 0.0)
      v62 = 0x9E3779B97F4A7C15;
    v63 = *(_QWORD *)&v61 - 0x61C8864680B583EBLL;
    if (v61 == 0.0)
      v63 = 0x9E3779B97F4A7C15;
    v64 = *((double *)a5 + 10);
    v65 = *((_QWORD *)a5 + 9) - 0x61C8864680B583EBLL;
    if (*((double *)a5 + 9) == 0.0)
      v65 = 0x9E3779B97F4A7C15;
    v66 = *(_QWORD *)&v64 - 0x61C8864680B583EBLL;
    if (v64 == 0.0)
      v66 = 0x9E3779B97F4A7C15;
    v67 = *((double *)a5 + 12);
    v68 = (((((v41 >> 2) + (v41 << 6) + v59) ^ v41) >> 2) + ((((v41 >> 2) + (v41 << 6) + v59) ^ v41) << 6) + v60) ^ ((v41 >> 2) + (v41 << 6) + v59) ^ v41;
    v69 = ((v68 >> 2) + (v68 << 6) + v62) ^ v68;
    v70 = ((v69 >> 2) + (v69 << 6) + v63) ^ v69;
    v71 = ((v70 >> 2) + (v70 << 6) + v65) ^ v70;
    v72 = ((v71 >> 2) + (v71 << 6) + v66) ^ v71;
    v73 = *((_QWORD *)a5 + 11) - 0x61C8864680B583EBLL;
    if (*((double *)a5 + 11) == 0.0)
      v73 = 0x9E3779B97F4A7C15;
    v74 = ((v72 >> 2) + (v72 << 6) + v73) ^ v72;
    v75 = *(_QWORD *)&v67 - 0x61C8864680B583EBLL;
    if (v67 == 0.0)
      v75 = 0x9E3779B97F4A7C15;
    v41 = ((v74 >> 2) + (v74 << 6) + v75) ^ v74;
  }
  if (*((_BYTE *)a5 + 5))
  {
    v76 = *((double *)a5 + 22);
    v77 = *((_QWORD *)a5 + 21) - 0x61C8864680B583EBLL;
    if (*((double *)a5 + 21) == 0.0)
      v77 = 0x9E3779B97F4A7C15;
    v78 = *(_QWORD *)&v76 - 0x61C8864680B583EBLL;
    if (v76 == 0.0)
      v78 = 0x9E3779B97F4A7C15;
    v79 = *((double *)a5 + 24);
    v80 = (((((v41 >> 2) + (v41 << 6) + v77) ^ v41) >> 2) + ((((v41 >> 2) + (v41 << 6) + v77) ^ v41) << 6) + v78) ^ ((v41 >> 2) + (v41 << 6) + v77) ^ v41;
    v81 = *((_QWORD *)a5 + 23) - 0x61C8864680B583EBLL;
    if (*((double *)a5 + 23) == 0.0)
      v81 = 0x9E3779B97F4A7C15;
    v82 = ((v80 >> 2) + (v80 << 6) + v81) ^ v80;
    v83 = *(_QWORD *)&v79 - 0x61C8864680B583EBLL;
    if (v79 == 0.0)
      v83 = 0x9E3779B97F4A7C15;
    v41 = ((v82 >> 2) + (v82 << 6) + v83) ^ v82;
  }
  if (*((_BYTE *)a5 + 6))
  {
    v84 = *((double *)a5 + 26);
    v85 = *((_QWORD *)a5 + 25) - 0x61C8864680B583EBLL;
    if (*((double *)a5 + 25) == 0.0)
      v85 = 0x9E3779B97F4A7C15;
    v86 = *(_QWORD *)&v84 - 0x61C8864680B583EBLL;
    if (v84 == 0.0)
      v86 = 0x9E3779B97F4A7C15;
    v87 = *((double *)a5 + 28);
    v88 = (((((v41 >> 2) + (v41 << 6) + v85) ^ v41) >> 2) + ((((v41 >> 2) + (v41 << 6) + v85) ^ v41) << 6) + v86) ^ ((v41 >> 2) + (v41 << 6) + v85) ^ v41;
    v89 = *((_QWORD *)a5 + 27) - 0x61C8864680B583EBLL;
    if (*((double *)a5 + 27) == 0.0)
      v89 = 0x9E3779B97F4A7C15;
    v90 = ((v88 >> 2) + (v88 << 6) + v89) ^ v88;
    v91 = *(_QWORD *)&v87 - 0x61C8864680B583EBLL;
    if (v87 == 0.0)
      v91 = 0x9E3779B97F4A7C15;
    v41 = ((v90 >> 2) + (v90 << 6) + v91) ^ v90;
  }
  v93 = p_innerStrokeWeight[4];
  v92 = p_innerStrokeWeight[5];
  if (*((_BYTE *)a5 + 7))
  {
    v94 = *((double *)a5 + 30);
    v95 = *((_QWORD *)a5 + 29) - 0x61C8864680B583EBLL;
    if (*((double *)a5 + 29) == 0.0)
      v95 = 0x9E3779B97F4A7C15;
    v96 = *(_QWORD *)&v94 - 0x61C8864680B583EBLL;
    if (v94 == 0.0)
      v96 = 0x9E3779B97F4A7C15;
    v97 = *((double *)a5 + 32);
    v98 = (((((v41 >> 2) + (v41 << 6) + v95) ^ v41) >> 2) + ((((v41 >> 2) + (v41 << 6) + v95) ^ v41) << 6) + v96) ^ ((v41 >> 2) + (v41 << 6) + v95) ^ v41;
    v99 = *((_QWORD *)a5 + 31) - 0x61C8864680B583EBLL;
    if (*((double *)a5 + 31) == 0.0)
      v99 = 0x9E3779B97F4A7C15;
    v100 = ((v98 >> 2) + (v98 << 6) + v99) ^ v98;
    v101 = *(_QWORD *)&v97 - 0x61C8864680B583EBLL;
    if (v97 == 0.0)
      v101 = 0x9E3779B97F4A7C15;
    v41 = ((v100 >> 2) + (v100 << 6) + v101) ^ v100;
  }
  if (*((_BYTE *)p_innerStrokeWeight + 49))
    v102 = 0x9E3779B97F4A7C16;
  else
    v102 = 0x9E3779B97F4A7C15;
  v103 = *(_QWORD *)&v16 - 0x61C8864680B583EBLL;
  if (v16 == 0.0)
    v103 = 0x9E3779B97F4A7C15;
  v104 = *(_QWORD *)&scale - 0x61C8864680B583EBLL;
  if (scale == 0.0)
    v104 = 0x9E3779B97F4A7C15;
  v105 = ((v103 >> 2) + (v103 << 6) + v104) ^ v103;
  v106 = round(v16 * contentScale * scale);
  v107 = *(_QWORD *)&v106 - 0x61C8864680B583EBLL;
  if (v106 == 0.0)
    v107 = 0x9E3779B97F4A7C15;
  v108 = (v107 + (v105 << 6) + (v105 >> 2)) ^ v105;
  v109 = round(v16 * arrowWeight * scale);
  v110 = *(_QWORD *)&v109 - 0x61C8864680B583EBLL;
  if (v109 == 0.0)
    v110 = 0x9E3779B97F4A7C15;
  v111 = (v110 + (v108 << 6) + (v108 >> 2)) ^ v108;
  v112 = round(v16 * arrowLength * scale);
  v113 = *(_QWORD *)&v112 - 0x61C8864680B583EBLL;
  if (v112 == 0.0)
    v113 = 0x9E3779B97F4A7C15;
  v114 = (v113 + (v111 << 6) + (v111 >> 2)) ^ v111;
  v115 = round(v16 * arrowTipCornerRadius * scale);
  v116 = *(_QWORD *)&v115 - 0x61C8864680B583EBLL;
  if (v115 == 0.0)
    v116 = 0x9E3779B97F4A7C15;
  v117 = (v116 + (v114 << 6) + (v114 >> 2)) ^ v114;
  v118 = round(v16 * arrowJoinCornerRadius * scale);
  v119 = *(_QWORD *)&v118 - 0x61C8864680B583EBLL;
  if (v118 == 0.0)
    v119 = 0x9E3779B97F4A7C15;
  v120 = (v119 + (v117 << 6) + (v117 >> 2)) ^ v117;
  v121 = (v25 - 0x61C8864680B583EBLL + (v120 << 6) + (v120 >> 2)) ^ v120;
  v122 = (v32 - 0x61C8864680B583EBLL + (v121 << 6) + (v121 >> 2)) ^ v121;
  v123 = *(_QWORD *)&v93 - 0x61C8864680B583EBLL;
  if (v93 == 0.0)
    v123 = 0x9E3779B97F4A7C15;
  v124 = (v123 + (v122 << 6) + (v122 >> 2)) ^ v122;
  v125 = *(_QWORD *)&v92 - 0x61C8864680B583EBLL;
  if (v92 == 0.0)
    v125 = 0x9E3779B97F4A7C15;
  v126 = (v125 + (v124 << 6) + (v124 >> 2)) ^ v124;
  v127 = (*((unsigned __int8 *)p_innerStrokeWeight + 48) - 0x61C8864680B583EBLL + (v126 << 6) + (v126 >> 2)) ^ v126;
  v128 = (v102 + (v127 << 6) + (v127 >> 2)) ^ v127;
  v129 = *(_QWORD *)&v14 - 0x61C8864680B583EBLL;
  if (v14 == 0.0)
    v129 = 0x9E3779B97F4A7C15;
  v131 = *(_QWORD *)&v15 - 0x61C8864680B583EBLL;
  if (v15 == 0.0)
    v131 = 0x9E3779B97F4A7C15;
  v130 = (((unint64_t)(v13 - 0x61C8864680B583EBLL) >> 2) + ((v13 - 0x61C8864680B583EBLL) << 6) + v129) ^ (v13 - 0x61C8864680B583EBLL);
  v132 = (v131 + (v130 << 6) + (v130 >> 2)) ^ v130;
  v133 = round(v14 * v184 * v15);
  v134 = *(_QWORD *)&v133 - 0x61C8864680B583EBLL;
  if (v133 == 0.0)
    v134 = 0x9E3779B97F4A7C15;
  v135 = (v134 + (v132 << 6) + (v132 >> 2)) ^ v132;
  v136 = round(v14 * v185 * v15);
  v137 = *(_QWORD *)&v136 - 0x61C8864680B583EBLL;
  if (v136 == 0.0)
    v137 = 0x9E3779B97F4A7C15;
  v138 = (v137 + (v135 << 6) + (v135 >> 2)) ^ v135;
  v139 = round(v15 * v14 * v186);
  v140 = *(_QWORD *)&v139 - 0x61C8864680B583EBLL;
  if (v139 == 0.0)
    v140 = 0x9E3779B97F4A7C15;
  v141 = (v140 + (v138 << 6) + (v138 >> 2)) ^ v138;
  v142 = round(v15 * v14 * v187);
  v143 = *(_QWORD *)&v142 - 0x61C8864680B583EBLL;
  if (v142 == 0.0)
    v143 = 0x9E3779B97F4A7C15;
  v144 = (v143 + (v141 << 6) + (v141 >> 2)) ^ v141;
  v145 = round(v14 * v188 * v15);
  v146 = *(_QWORD *)&v145 - 0x61C8864680B583EBLL;
  if (v145 == 0.0)
    v146 = 0x9E3779B97F4A7C15;
  v147 = (v146 + (v144 << 6) + (v144 >> 2)) ^ v144;
  v148 = round(v14 * v189 * v15);
  v149 = *(_QWORD *)&v148 - 0x61C8864680B583EBLL;
  if (v148 == 0.0)
    v149 = 0x9E3779B97F4A7C15;
  v150 = (v149 + (v147 << 6) + (v147 >> 2)) ^ v147;
  v151 = round(v14 * v190 * v15);
  v152 = *(_QWORD *)&v151 - 0x61C8864680B583EBLL;
  if (v151 == 0.0)
    v152 = 0x9E3779B97F4A7C15;
  v153 = (v152 + (v150 << 6) + (v150 >> 2)) ^ v150;
  v154 = round(v14 * v191 * v15);
  v155 = *(_QWORD *)&v154 - 0x61C8864680B583EBLL;
  if (v154 == 0.0)
    v155 = 0x9E3779B97F4A7C15;
  v156 = (v155 + (v153 << 6) + (v153 >> 2)) ^ v153;
  v157 = round(v14 * v192 * v15);
  v158 = *(_QWORD *)&v157 - 0x61C8864680B583EBLL;
  if (v157 == 0.0)
    v158 = 0x9E3779B97F4A7C15;
  v159 = (v158 + (v156 << 6) + (v156 >> 2)) ^ v156;
  v160 = round(v14 * v193 * v15);
  v161 = *(_QWORD *)&v160 - 0x61C8864680B583EBLL;
  if (v160 == 0.0)
    v161 = 0x9E3779B97F4A7C15;
  v162 = (v161 + (v159 << 6) + (v159 >> 2)) ^ v159;
  v163 = round(v14 * v194 * v15);
  v164 = *(_QWORD *)&v163 - 0x61C8864680B583EBLL;
  if (v163 == 0.0)
    v164 = 0x9E3779B97F4A7C15;
  v165 = (v164 + (v162 << 6) + (v162 >> 2)) ^ v162;
  v166 = ceil(v195 * v14);
  v167 = floor(v195 * v14);
  if (v14 < 1.0)
    v167 = v166;
  v168 = ceil(v196 * v14);
  v169 = floor(v196 * v14);
  if (v14 < 1.0)
    v169 = v168;
  v170 = ceil(v197 * v14);
  v171 = floor(v197 * v14);
  if (v14 < 1.0)
    v171 = v170;
  v172 = *(_QWORD *)&v167 - 0x61C8864680B583EBLL;
  if (v167 == 0.0)
    v172 = 0x9E3779B97F4A7C15;
  v173 = (v172 + (v165 << 6) + (v165 >> 2)) ^ v165;
  v174 = *(_QWORD *)&v169 - 0x61C8864680B583EBLL;
  if (v169 == 0.0)
    v174 = 0x9E3779B97F4A7C15;
  v175 = (v174 + (v173 << 6) + (v173 >> 2)) ^ v173;
  v176 = *(_QWORD *)&v171 - 0x61C8864680B583EBLL;
  if (v171 == 0.0)
    v176 = 0x9E3779B97F4A7C15;
  v177 = ((v176 + (v175 << 6) + (v175 >> 2)) ^ v175) - 0x61C8864680B583EBLL;
  v178 = ((unint64_t)&a2[8 * v12 - 0xC3910C8D016B07ELL].super.isa + (v12 >> 2) + 5) ^ v12;
  v179 = (v177 + (v178 << 6) + (v178 >> 2)) ^ v178;
  v180 = ((v179 << 6) - 0x61C8864680B583EBLL + (v179 >> 2) + v128) ^ v179;
  v181 = ((v180 << 6) - 0x61C8864680B583EBLL + (v180 >> 2) + v41) ^ v180;

  return v181;
}

void sub_19FA89A60(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t geo::LRUPolicy<unsigned long,geo::_retain_ptr<VKRoadSignArtwork * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>,std::hash<unsigned long>>::get(uint64_t result, uint64_t a2, unint64_t a3, unint64_t a4)
{
  uint8x8_t v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;

  if (a3)
  {
    v4 = (uint8x8_t)vcnt_s8((int8x8_t)a3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = a4;
      if (a4 >= a3)
        v5 = a4 % a3;
    }
    else
    {
      v5 = (a3 - 1) & a4;
    }
    v6 = *(_QWORD **)(a2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          while (1)
          {
            v9 = v7[1];
            if (v9 == a4)
            {
              if (v7[2] == a4)
                goto LABEL_22;
            }
            else if ((v9 & (a3 - 1)) != v5)
            {
              return result;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              return result;
          }
        }
        do
        {
          v8 = v7[1];
          if (v8 == a4)
          {
            if (v7[2] == a4)
            {
LABEL_22:
              v10 = *(uint64_t **)(result + 8);
              v11 = (uint64_t *)v7[3];
              if (v10 == v11)
                return *(_QWORD *)(result + 8);
              v12 = (uint64_t *)v11[1];
              if (v12 == v10)
                return *(_QWORD *)(result + 8);
              v13 = *v11;
              *(_QWORD *)(v13 + 8) = v12;
              *(_QWORD *)v11[1] = v13;
              v14 = *v10;
              *(_QWORD *)(v14 + 8) = v11;
              *v11 = v14;
              *v10 = (uint64_t)v11;
              v11[1] = (uint64_t)v10;
              return *(_QWORD *)(result + 8);
            }
          }
          else
          {
            if (v8 >= a3)
              v8 %= a3;
            if (v8 != v5)
              return result;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
  return result;
}

void geo::Cache<unsigned long,geo::_retain_ptr<VKRoadSignArtwork * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>,std::hash<unsigned long>,geo::LRUPolicy>::insert(uint64_t a1, unint64_t *a2, void *a3)
{
  unint64_t v3;
  void **v6;
  id v7;
  unint64_t v8;
  int8x8_t v9;
  uint8x8_t v10;
  unint64_t v11;
  _QWORD **v12;
  _QWORD *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  _QWORD *v19;
  id v20;
  _QWORD *v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint8x8_t v25;
  _QWORD *v26;
  _QWORD *v27;
  unint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  float v31;
  float v32;
  _BOOL8 v33;
  unint64_t v34;
  unint64_t v35;
  size_t prime;
  void *v37;
  void *v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  size_t v42;
  size_t v43;
  size_t v44;
  _QWORD *i;
  size_t v46;
  uint64_t v47;
  unint64_t v48;
  uint8x8_t v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  size_t v53;
  _QWORD *v54;
  _QWORD *v55;
  unint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t *v59;
  uint64_t v60;
  int8x8_t v61;
  uint8x8_t v62;
  unint64_t v63;
  _QWORD **v64;
  _QWORD *v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  void *v69;
  void *__p[3];

  v6 = (void **)(a1 + 8);
  v7 = a3;
  v8 = *a2;
  v9 = *(int8x8_t *)(a1 + 16);
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8(v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      v11 = *a2;
      if (v8 >= *(_QWORD *)&v9)
        v11 = v8 % *(_QWORD *)&v9;
    }
    else
    {
      v11 = (*(_QWORD *)&v9 - 1) & v8;
    }
    v12 = (_QWORD **)*((_QWORD *)*v6 + v11);
    if (v12)
    {
      v13 = *v12;
      if (*v12)
      {
        if (v10.u32[0] < 2uLL)
        {
          v14 = *(_QWORD *)&v9 - 1;
          while (1)
          {
            v16 = v13[1];
            if (v16 == v8)
            {
              if (v13[2] == v8)
                goto LABEL_22;
            }
            else if ((v16 & v14) != v11)
            {
              goto LABEL_25;
            }
            v13 = (_QWORD *)*v13;
            if (!v13)
              goto LABEL_25;
          }
        }
        do
        {
          v15 = v13[1];
          if (v15 == v8)
          {
            if (v13[2] == v8)
            {
LABEL_22:
              v17 = (uint64_t *)v13[3];
              v18 = *v17;
              *(_QWORD *)(v18 + 8) = v17[1];
              *(_QWORD *)v17[1] = v18;
              --*(_QWORD *)(a1 + 64);
              v17[3] = (uint64_t)&off_1E42B4D30;

              operator delete(v17);
              std::__hash_table<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::__unordered_map_hasher<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,true>,std::__unordered_map_equal<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::equal_to<gdc::LayerDataRequestKey>,gdc::LayerDataRequestKeyHash,true>,std::allocator<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>>>::remove((uint64_t)__p, v6, v13);
              if (__p[0])
                operator delete(__p[0]);
              v8 = *a2;
              break;
            }
          }
          else
          {
            if (v15 >= *(_QWORD *)&v9)
              v15 %= *(_QWORD *)&v9;
            if (v15 != v11)
              break;
          }
          v13 = (_QWORD *)*v13;
        }
        while (v13);
      }
    }
  }
LABEL_25:
  v19 = operator new(0x30uLL);
  v19[2] = v8;
  v19[3] = &off_1E42B4D30;
  v20 = v7;
  v19[4] = v20;
  v21 = *(_QWORD **)(a1 + 56);
  *v19 = a1 + 48;
  v19[1] = v21;
  *v21 = v19;
  v22 = *(_QWORD *)(a1 + 64) + 1;
  *(_QWORD *)(a1 + 56) = v19;
  *(_QWORD *)(a1 + 64) = v22;
  v23 = *a2;
  v24 = *(_QWORD *)(a1 + 16);
  if (v24)
  {
    v25 = (uint8x8_t)vcnt_s8((int8x8_t)v24);
    v25.i16[0] = vaddlv_u8(v25);
    if (v25.u32[0] > 1uLL)
    {
      v3 = *a2;
      if (v23 >= v24)
        v3 = v23 % v24;
    }
    else
    {
      v3 = (v24 - 1) & v23;
    }
    v26 = (_QWORD *)*((_QWORD *)*v6 + v3);
    if (v26)
    {
      v27 = (_QWORD *)*v26;
      if (v27)
      {
        if (v25.u32[0] < 2uLL)
        {
          while (1)
          {
            v29 = v27[1];
            if (v29 == v23)
            {
              if (v27[2] == v23)
                goto LABEL_129;
            }
            else if ((v29 & (v24 - 1)) != v3)
            {
              goto LABEL_46;
            }
            v27 = (_QWORD *)*v27;
            if (!v27)
              goto LABEL_46;
          }
        }
        do
        {
          v28 = v27[1];
          if (v28 == v23)
          {
            if (v27[2] == v23)
              goto LABEL_129;
          }
          else
          {
            if (v28 >= v24)
              v28 %= v24;
            if (v28 != v3)
              break;
          }
          v27 = (_QWORD *)*v27;
        }
        while (v27);
      }
    }
  }
LABEL_46:
  v30 = operator new(0x20uLL);
  *v30 = 0;
  v30[1] = v23;
  v30[2] = v23;
  v30[3] = v19;
  v31 = (float)(unint64_t)(*(_QWORD *)(a1 + 32) + 1);
  v32 = *(float *)(a1 + 40);
  if (!v24 || (float)(v32 * (float)v24) < v31)
  {
    v33 = 1;
    if (v24 >= 3)
      v33 = (v24 & (v24 - 1)) != 0;
    v34 = v33 | (2 * v24);
    v35 = vcvtps_u32_f32(v31 / v32);
    if (v34 <= v35)
      prime = v35;
    else
      prime = v34;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v24 = *(_QWORD *)(a1 + 16);
    }
    if (prime <= v24)
    {
      if (prime >= v24)
        goto LABEL_83;
      v48 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 32) / *(float *)(a1 + 40));
      if (v24 < 3 || (v49 = (uint8x8_t)vcnt_s8((int8x8_t)v24), v49.i16[0] = vaddlv_u8(v49), v49.u32[0] > 1uLL))
      {
        v48 = std::__next_prime(v48);
      }
      else
      {
        v50 = 1 << -(char)__clz(v48 - 1);
        if (v48 >= 2)
          v48 = v50;
      }
      if (prime <= v48)
        prime = v48;
      if (prime >= v24)
      {
        v24 = *(_QWORD *)(a1 + 16);
LABEL_83:
        if ((v24 & (v24 - 1)) != 0)
        {
          if (v23 >= v24)
            v3 = v23 % v24;
          else
            v3 = v23;
        }
        else
        {
          v3 = (v24 - 1) & v23;
        }
        goto LABEL_96;
      }
      if (!prime)
      {
        v69 = *v6;
        *v6 = 0;
        if (v69)
          operator delete(v69);
        v24 = 0;
        *(_QWORD *)(a1 + 16) = 0;
        goto LABEL_83;
      }
    }
    if (prime >> 61)
      std::__throw_bad_array_new_length[abi:nn180100]();
    v37 = operator new(8 * prime);
    v38 = *v6;
    *v6 = v37;
    if (v38)
      operator delete(v38);
    v39 = 0;
    *(_QWORD *)(a1 + 16) = prime;
    do
      *((_QWORD *)*v6 + v39++) = 0;
    while (prime != v39);
    v41 = a1 + 24;
    v40 = *(_QWORD **)(a1 + 24);
    if (!v40)
    {
LABEL_82:
      v24 = prime;
      goto LABEL_83;
    }
    v42 = v40[1];
    v43 = prime - 1;
    if ((prime & (prime - 1)) == 0)
    {
      v44 = v42 & v43;
      *((_QWORD *)*v6 + v44) = v41;
      for (i = (_QWORD *)*v40; *v40; i = (_QWORD *)*v40)
      {
        v46 = i[1] & v43;
        if (v46 == v44)
        {
          v40 = i;
        }
        else if (*((_QWORD *)*v6 + v46))
        {
          *v40 = *i;
          v47 = 8 * v46;
          *i = **(_QWORD **)((char *)*v6 + v47);
          **(_QWORD **)((char *)*v6 + v47) = i;
        }
        else
        {
          *((_QWORD *)*v6 + v46) = v40;
          v40 = i;
          v44 = v46;
        }
      }
      goto LABEL_82;
    }
    if (v42 >= prime)
      v42 %= prime;
    *((_QWORD *)*v6 + v42) = v41;
    v51 = (_QWORD *)*v40;
    if (!*v40)
      goto LABEL_82;
    while (1)
    {
      v53 = v51[1];
      if (v53 >= prime)
        v53 %= prime;
      if (v53 != v42)
      {
        if (!*((_QWORD *)*v6 + v53))
        {
          *((_QWORD *)*v6 + v53) = v40;
          goto LABEL_87;
        }
        *v40 = *v51;
        v52 = 8 * v53;
        *v51 = **(_QWORD **)((char *)*v6 + v52);
        **(_QWORD **)((char *)*v6 + v52) = v51;
        v51 = v40;
      }
      v53 = v42;
LABEL_87:
      v40 = v51;
      v51 = (_QWORD *)*v51;
      v42 = v53;
      if (!v51)
        goto LABEL_82;
    }
  }
LABEL_96:
  v54 = *v6;
  v55 = (_QWORD *)*((_QWORD *)*v6 + v3);
  if (v55)
  {
    *v30 = *v55;
LABEL_104:
    *v55 = v30;
    goto LABEL_105;
  }
  *v30 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v30;
  v54[v3] = a1 + 24;
  if (*v30)
  {
    v56 = *(_QWORD *)(*v30 + 8);
    if ((v24 & (v24 - 1)) != 0)
    {
      if (v56 >= v24)
        v56 %= v24;
    }
    else
    {
      v56 &= v24 - 1;
    }
    v55 = (char *)*v6 + 8 * v56;
    goto LABEL_104;
  }
LABEL_105:
  ++*(_QWORD *)(a1 + 32);
LABEL_129:
  while (1)
  {

    if (*(_QWORD *)(a1 + 64) <= *(_QWORD *)a1)
      break;
    v57 = *(_QWORD *)(a1 + 48);
    v58 = *(_QWORD *)(v57 + 16);
    v20 = *(id *)(v57 + 32);
    v59 = *(uint64_t **)(a1 + 48);
    v60 = *v59;
    *(_QWORD *)(v60 + 8) = v59[1];
    *(_QWORD *)v59[1] = v60;
    --*(_QWORD *)(a1 + 64);
    v59[3] = (uint64_t)&off_1E42B4D30;

    operator delete(v59);
    v61 = *(int8x8_t *)(a1 + 16);
    if (v61)
    {
      v62 = (uint8x8_t)vcnt_s8(v61);
      v62.i16[0] = vaddlv_u8(v62);
      if (v62.u32[0] > 1uLL)
      {
        v63 = v58;
        if (v58 >= *(_QWORD *)&v61)
          v63 = v58 % *(_QWORD *)&v61;
      }
      else
      {
        v63 = (*(_QWORD *)&v61 - 1) & v58;
      }
      v64 = (_QWORD **)*((_QWORD *)*v6 + v63);
      if (v64)
      {
        v65 = *v64;
        if (*v64)
        {
          if (v62.u32[0] < 2uLL)
          {
            v66 = *(_QWORD *)&v61 - 1;
            while (1)
            {
              v68 = v65[1];
              if (v68 == v58)
              {
                if (v65[2] == v58)
                  goto LABEL_127;
              }
              else if ((v68 & v66) != v63)
              {
                goto LABEL_129;
              }
              v65 = (_QWORD *)*v65;
              if (!v65)
                goto LABEL_129;
            }
          }
          while (1)
          {
            v67 = v65[1];
            if (v67 == v58)
              break;
            if (v67 >= *(_QWORD *)&v61)
              v67 %= *(_QWORD *)&v61;
            if (v67 != v63)
              goto LABEL_129;
LABEL_116:
            v65 = (_QWORD *)*v65;
            if (!v65)
              goto LABEL_129;
          }
          if (v65[2] != v58)
            goto LABEL_116;
LABEL_127:
          std::__hash_table<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::__unordered_map_hasher<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,true>,std::__unordered_map_equal<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::equal_to<gdc::LayerDataRequestKey>,gdc::LayerDataRequestKeyHash,true>,std::allocator<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>>>::remove((uint64_t)__p, v6, v65);
          if (__p[0])
            operator delete(__p[0]);
        }
      }
    }
  }
}

void sub_19FA8A29C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  operator delete(v2);

  _Unwind_Resume(a1);
}

uint64_t karo::media::SkyLoader::loadFromChunk(uint64_t a1, uint64_t a2, uint64_t a3, char **a4)
{
  unint64_t v6;
  unint64_t v7;
  char *v8;
  char *v9;
  int v10;
  int v11;
  int v12;
  unint64_t v13;
  char *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  char *v19;
  char *v20;
  char *v21;
  uint64_t v22;
  int v23;

  v6 = 0;
  v7 = a3 - 12;
  v8 = a4[1];
  do
  {
    v11 = *(_DWORD *)(a2 + v6);
    v10 = *(_DWORD *)(a2 + v6 + 4);
    v12 = *(_DWORD *)(a2 + v6 + 8);
    v13 = (unint64_t)a4[2];
    if ((unint64_t)v8 < v13)
    {
      *(_DWORD *)v8 = v11;
      *((_DWORD *)v8 + 1) = v10;
      v9 = v8 + 12;
      *((_DWORD *)v8 + 2) = v12;
    }
    else
    {
      v14 = *a4;
      v15 = 0xAAAAAAAAAAAAAAABLL * ((v8 - *a4) >> 2);
      v16 = v15 + 1;
      if (v15 + 1 > 0x1555555555555555)
        abort();
      v17 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v13 - (_QWORD)v14) >> 2);
      if (2 * v17 > v16)
        v16 = 2 * v17;
      if (v17 >= 0xAAAAAAAAAAAAAAALL)
        v18 = 0x1555555555555555;
      else
        v18 = v16;
      if (v18)
      {
        if (v18 > 0x1555555555555555)
          std::__throw_bad_array_new_length[abi:nn180100]();
        v19 = (char *)operator new(12 * v18);
      }
      else
      {
        v19 = 0;
      }
      v20 = &v19[12 * v15];
      *(_DWORD *)v20 = v11;
      *((_DWORD *)v20 + 1) = v10;
      *((_DWORD *)v20 + 2) = v12;
      v21 = v20;
      if (v8 != v14)
      {
        do
        {
          v22 = *(_QWORD *)(v8 - 12);
          v8 -= 12;
          v23 = *((_DWORD *)v8 + 2);
          *(_QWORD *)(v21 - 12) = v22;
          v21 -= 12;
          *((_DWORD *)v21 + 2) = v23;
        }
        while (v8 != v14);
        v8 = *a4;
      }
      v9 = v20 + 12;
      *a4 = v21;
      a4[1] = v20 + 12;
      a4[2] = &v19[12 * v18];
      if (v8)
        operator delete(v8);
    }
    a4[1] = v9;
    v6 += 12;
    v8 = v9;
  }
  while (v6 <= v7);
  return 1;
}

void md::mun::MuninOverlayRenderLayer::~MuninOverlayRenderLayer(md::mun::MuninOverlayRenderLayer *this)
{
  md::mun::MuninOverlayRenderLayer::~MuninOverlayRenderLayer(this);
  JUMPOUT(0x1A1AF4E00);
}

{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t *v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  void *v51;

  *(_QWORD *)this = &off_1E42ABD68;
  v2 = (_QWORD *)*((_QWORD *)this + 45);
  *((_QWORD *)this + 45) = 0;
  if (v2)
    std::default_delete<md::mun::TapAnnotation>::operator()[abi:nn180100](v2);
  v3 = (_QWORD *)*((_QWORD *)this + 44);
  *((_QWORD *)this + 44) = 0;
  if (v3)
  {
    v4 = v3[4];
    v3[4] = 0;
    if (v4)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    v5 = (std::__shared_weak_count *)v3[3];
    if (v5)
    {
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    v8 = (std::__shared_weak_count *)v3[1];
    if (v8)
    {
      v9 = (unint64_t *)&v8->__shared_owners_;
      do
        v10 = __ldaxr(v9);
      while (__stlxr(v10 - 1, v9));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
    MEMORY[0x1A1AF4E00](v3, 0x20C40769AC3DALL);
  }
  v11 = (void *)*((_QWORD *)this + 40);
  if (v11)
  {
    *((_QWORD *)this + 41) = v11;
    operator delete(v11);
  }
  v12 = *((_QWORD *)this + 39);
  *((_QWORD *)this + 39) = 0;
  if (v12)
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  v13 = *((_QWORD *)this + 38);
  *((_QWORD *)this + 38) = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v14 = *((_QWORD *)this + 37);
  *((_QWORD *)this + 37) = 0;
  if (v14)
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  v15 = (uint64_t *)*((_QWORD *)this + 29);
  *((_QWORD *)this + 29) = 0;
  if (v15)
  {
    v16 = (std::__shared_weak_count *)v15[3];
    if (v16)
    {
      v17 = (unint64_t *)&v16->__shared_owners_;
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
    v19 = v15[1];
    v15[1] = 0;
    if (v19)
      (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
    v20 = *v15;
    *v15 = 0;
    if (v20)
      (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
    MEMORY[0x1A1AF4E00](v15, 0x20C40DC1BFBCFLL);
  }
  v21 = (uint64_t *)*((_QWORD *)this + 21);
  *((_QWORD *)this + 21) = 0;
  if (v21)
  {
    v22 = (std::__shared_weak_count *)v21[3];
    if (v22)
    {
      v23 = (unint64_t *)&v22->__shared_owners_;
      do
        v24 = __ldaxr(v23);
      while (__stlxr(v24 - 1, v23));
      if (!v24)
      {
        ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
        std::__shared_weak_count::__release_weak(v22);
      }
    }
    v25 = v21[1];
    v21[1] = 0;
    if (v25)
      (*(void (**)(uint64_t))(*(_QWORD *)v25 + 8))(v25);
    v26 = *v21;
    *v21 = 0;
    if (v26)
      (*(void (**)(uint64_t))(*(_QWORD *)v26 + 8))(v26);
    MEMORY[0x1A1AF4E00](v21, 0x20C40DC1BFBCFLL);
  }
  v27 = (uint64_t *)*((_QWORD *)this + 20);
  *((_QWORD *)this + 20) = 0;
  if (v27)
  {
    v28 = (std::__shared_weak_count *)v27[3];
    if (v28)
    {
      v29 = (unint64_t *)&v28->__shared_owners_;
      do
        v30 = __ldaxr(v29);
      while (__stlxr(v30 - 1, v29));
      if (!v30)
      {
        ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
        std::__shared_weak_count::__release_weak(v28);
      }
    }
    v31 = v27[1];
    v27[1] = 0;
    if (v31)
      (*(void (**)(uint64_t))(*(_QWORD *)v31 + 8))(v31);
    v32 = *v27;
    *v27 = 0;
    if (v32)
      (*(void (**)(uint64_t))(*(_QWORD *)v32 + 8))(v32);
    MEMORY[0x1A1AF4E00](v27, 0x20C40DC1BFBCFLL);
  }
  v33 = (uint64_t *)*((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = 0;
  if (v33)
  {
    v34 = (std::__shared_weak_count *)v33[3];
    if (v34)
    {
      v35 = (unint64_t *)&v34->__shared_owners_;
      do
        v36 = __ldaxr(v35);
      while (__stlxr(v36 - 1, v35));
      if (!v36)
      {
        ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
        std::__shared_weak_count::__release_weak(v34);
      }
    }
    v37 = v33[1];
    v33[1] = 0;
    if (v37)
      (*(void (**)(uint64_t))(*(_QWORD *)v37 + 8))(v37);
    v38 = *v33;
    *v33 = 0;
    if (v38)
      (*(void (**)(uint64_t))(*(_QWORD *)v38 + 8))(v38);
    MEMORY[0x1A1AF4E00](v33, 0x20C40DC1BFBCFLL);
  }
  v39 = (uint64_t *)*((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = 0;
  if (v39)
  {
    v40 = (std::__shared_weak_count *)v39[3];
    if (v40)
    {
      v41 = (unint64_t *)&v40->__shared_owners_;
      do
        v42 = __ldaxr(v41);
      while (__stlxr(v42 - 1, v41));
      if (!v42)
      {
        ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
        std::__shared_weak_count::__release_weak(v40);
      }
    }
    v43 = v39[1];
    v39[1] = 0;
    if (v43)
      (*(void (**)(uint64_t))(*(_QWORD *)v43 + 8))(v43);
    v44 = *v39;
    *v39 = 0;
    if (v44)
      (*(void (**)(uint64_t))(*(_QWORD *)v44 + 8))(v44);
    MEMORY[0x1A1AF4E00](v39, 0x20C40DC1BFBCFLL);
  }
  v45 = (uint64_t *)*((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v45)
  {
    v46 = (std::__shared_weak_count *)v45[3];
    if (v46)
    {
      v47 = (unint64_t *)&v46->__shared_owners_;
      do
        v48 = __ldaxr(v47);
      while (__stlxr(v48 - 1, v47));
      if (!v48)
      {
        ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
        std::__shared_weak_count::__release_weak(v46);
      }
    }
    v49 = v45[1];
    v45[1] = 0;
    if (v49)
      (*(void (**)(uint64_t))(*(_QWORD *)v49 + 8))(v49);
    v50 = *v45;
    *v45 = 0;
    if (v50)
      (*(void (**)(uint64_t))(*(_QWORD *)v50 + 8))(v50);
    MEMORY[0x1A1AF4E00](v45, 0x20C40DC1BFBCFLL);
  }
  *(_QWORD *)this = off_1E428C468;
  v51 = (void *)*((_QWORD *)this + 1);
  if (v51)
  {
    *((_QWORD *)this + 2) = v51;
    operator delete(v51);
  }
}

void md::mun::MuninOverlayRenderLayer::layout(md::mun::MuninOverlayRenderLayer *this, const md::LayoutContext *a2)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v6;
  unint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  id *v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  md::mun::TapRenderResources *v30;
  _QWORD *v31;
  uint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *p_shared_owners;
  unint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  float64x2_t v41;
  float64x2_t v42;
  double v43;
  double v44;
  float v45;
  double v46;
  float v47;
  float v48;
  float v49;
  float v50;
  uint64_t v51;
  char v52;
  uint64_t v53;
  _QWORD *v54;
  ggl::CommandBuffer *v55;
  VKSharedResources *v56;
  __int128 v57;
  uint64_t v58;
  __int128 v59;
  uint64_t v60;
  uint64_t v61;

  v2 = (uint64_t *)*((_QWORD *)a2 + 1);
  v3 = (int8x8_t)v2[1];
  if (!*(_QWORD *)&v3)
    return;
  v6 = (uint8x8_t)vcnt_s8(v3);
  v6.i16[0] = vaddlv_u8(v6);
  if (v6.u32[0] > 1uLL)
  {
    v7 = 0xC83717EF586624DCLL;
    if (*(_QWORD *)&v3 <= 0xC83717EF586624DCLL)
      v7 = 0xC83717EF586624DCLL % *(_QWORD *)&v3;
  }
  else
  {
    v7 = (*(_QWORD *)&v3 - 1) & 0xC83717EF586624DCLL;
  }
  v8 = *v2;
  v9 = *(_QWORD **)(v8 + 8 * v7);
  if (!v9)
    goto LABEL_24;
  v10 = (_QWORD *)*v9;
  if (!v10)
    goto LABEL_24;
  if (v6.u32[0] < 2uLL)
  {
    while (1)
    {
      v12 = v10[1];
      if (v12 == 0xC83717EF586624DCLL)
      {
        if (v10[2] == 0xC83717EF586624DCLL)
          goto LABEL_22;
      }
      else if ((v12 & (*(_QWORD *)&v3 - 1)) != v7)
      {
        goto LABEL_24;
      }
      v10 = (_QWORD *)*v10;
      if (!v10)
        goto LABEL_24;
    }
  }
  while (1)
  {
    v11 = v10[1];
    if (v11 == 0xC83717EF586624DCLL)
      break;
    if (v11 >= *(_QWORD *)&v3)
      v11 %= *(_QWORD *)&v3;
    if (v11 != v7)
      goto LABEL_24;
LABEL_11:
    v10 = (_QWORD *)*v10;
    if (!v10)
      goto LABEL_24;
  }
  if (v10[2] != 0xC83717EF586624DCLL)
    goto LABEL_11;
LABEL_22:
  v13 = v10[5];
  if (*(_QWORD *)(v13 + 8) == 0xC83717EF586624DCLL)
  {
    v14 = *(_QWORD *)(v13 + 32);
    goto LABEL_25;
  }
LABEL_24:
  v14 = 0;
LABEL_25:
  if (v6.u32[0] > 1uLL)
  {
    v15 = 0xA60DDA5A69582425;
    if (*(_QWORD *)&v3 <= 0xA60DDA5A69582425)
      v15 = 0xA60DDA5A69582425 % *(_QWORD *)&v3;
  }
  else
  {
    v15 = (*(_QWORD *)&v3 - 1) & 0xA60DDA5A69582425;
  }
  v16 = *(_QWORD **)(v8 + 8 * v15);
  if (!v16)
    goto LABEL_47;
  v17 = (_QWORD *)*v16;
  if (!v17)
    goto LABEL_47;
  if (v6.u32[0] < 2uLL)
  {
    while (1)
    {
      v19 = v17[1];
      if (v19 == 0xA60DDA5A69582425)
      {
        if (v17[2] == 0xA60DDA5A69582425)
          goto LABEL_45;
      }
      else if ((v19 & (*(_QWORD *)&v3 - 1)) != v15)
      {
        goto LABEL_47;
      }
      v17 = (_QWORD *)*v17;
      if (!v17)
        goto LABEL_47;
    }
  }
  while (2)
  {
    v18 = v17[1];
    if (v18 != 0xA60DDA5A69582425)
    {
      if (v18 >= *(_QWORD *)&v3)
        v18 %= *(_QWORD *)&v3;
      if (v18 != v15)
        goto LABEL_47;
      goto LABEL_34;
    }
    if (v17[2] != 0xA60DDA5A69582425)
    {
LABEL_34:
      v17 = (_QWORD *)*v17;
      if (!v17)
        goto LABEL_47;
      continue;
    }
    break;
  }
LABEL_45:
  v20 = v17[5];
  if (*(_QWORD *)(v20 + 8) == 0xA60DDA5A69582425)
  {
    v21 = *(id **)(v20 + 32);
    goto LABEL_48;
  }
LABEL_47:
  v21 = 0;
LABEL_48:
  if (v6.u32[0] > 1uLL)
  {
    v22 = 0x1AF456233693CD46;
    if (*(_QWORD *)&v3 <= 0x1AF456233693CD46uLL)
      v22 = 0x1AF456233693CD46uLL % *(_QWORD *)&v3;
  }
  else
  {
    v22 = (*(_QWORD *)&v3 - 1) & 0x1AF456233693CD46;
  }
  v23 = *(_QWORD **)(v8 + 8 * v22);
  if (!v23)
    return;
  v24 = (_QWORD *)*v23;
  if (!v24)
    return;
  if (v6.u32[0] < 2uLL)
  {
    v25 = *(_QWORD *)&v3 - 1;
    while (1)
    {
      v27 = v24[1];
      if (v27 == 0x1AF456233693CD46)
      {
        if (v24[2] == 0x1AF456233693CD46)
          goto LABEL_68;
      }
      else if ((v27 & v25) != v22)
      {
        return;
      }
      v24 = (_QWORD *)*v24;
      if (!v24)
        return;
    }
  }
  while (2)
  {
    v26 = v24[1];
    if (v26 != 0x1AF456233693CD46)
    {
      if (v26 >= *(_QWORD *)&v3)
        v26 %= *(_QWORD *)&v3;
      if (v26 != v22)
        return;
      goto LABEL_57;
    }
    if (v24[2] != 0x1AF456233693CD46)
    {
LABEL_57:
      v24 = (_QWORD *)*v24;
      if (!v24)
        return;
      continue;
    }
    break;
  }
LABEL_68:
  v28 = v24[5];
  if (*(_QWORD *)(v28 + 8) == 0x1AF456233693CD46)
  {
    if (v14)
    {
      if (v21)
      {
        v29 = *(_QWORD *)(v28 + 32);
        if (v29)
        {
          v56 = (VKSharedResources *)*v21;
          if (!*((_QWORD *)this + 44))
          {
            v30 = (md::mun::TapRenderResources *)operator new();
            md::mun::TapRenderResources::TapRenderResources(v30, v56, (id *)a2);
            v31 = (_QWORD *)*((_QWORD *)this + 44);
            *((_QWORD *)this + 44) = v30;
            if (v31)
            {
              v32 = v31[4];
              v31[4] = 0;
              if (v32)
                (*(void (**)(uint64_t))(*(_QWORD *)v32 + 8))(v32);
              v33 = (std::__shared_weak_count *)v31[3];
              if (v33)
              {
                p_shared_owners = (unint64_t *)&v33->__shared_owners_;
                do
                  v35 = __ldaxr(p_shared_owners);
                while (__stlxr(v35 - 1, p_shared_owners));
                if (!v35)
                {
                  ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
                  std::__shared_weak_count::__release_weak(v33);
                }
              }
              v36 = (std::__shared_weak_count *)v31[1];
              if (v36)
              {
                v37 = (unint64_t *)&v36->__shared_owners_;
                do
                  v38 = __ldaxr(v37);
                while (__stlxr(v38 - 1, v37));
                if (!v38)
                {
                  ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
                  std::__shared_weak_count::__release_weak(v36);
                }
              }
              MEMORY[0x1A1AF4E00](v31, 0x20C40769AC3DALL);
            }
          }
          v39 = *(_QWORD *)(v14 + 64);
          v40 = (uint64_t *)*((_QWORD *)this + 45);
          if (v40)
          {
            if (!v39 || *(_QWORD *)(v39 + 72) != v40[12])
            {
              *((_QWORD *)this + 45) = 0;
              std::default_delete<md::mun::TapAnnotation>::operator()[abi:nn180100](v40);
            }
            goto LABEL_103;
          }
          if (v39)
          {
            v41 = vsubq_f64(*(float64x2_t *)(v29 + 504), *(float64x2_t *)(v39 + 8));
            v42 = vmulq_f64(v41, v41);
            v43 = sqrt(v42.f64[0]+ (*(double *)(v29 + 496) - *(double *)v39) * (*(double *)(v29 + 496) - *(double *)v39)+ v42.f64[1]);
            v44 = 0.0;
            v45 = 3.0;
            v46 = 10.0;
            if (v43 < 10.0)
            {
              v47 = 3.0;
              goto LABEL_99;
            }
            v46 = 120.0;
            if (v43 < 120.0)
            {
              v44 = 10.0;
              v47 = 20.0;
              goto LABEL_99;
            }
            v48 = 1.0;
            v47 = 200.0;
            v46 = 1200.0;
            if (v43 >= 1200.0)
            {
              v49 = 200.0;
            }
            else
            {
              v45 = 20.0;
              v44 = 120.0;
LABEL_99:
              v49 = v47;
              v50 = (v43 - v44) / (v46 - v44);
              v48 = fmaxf(v50, 0.0);
              v47 = v45;
            }
            v40 = (uint64_t *)operator new();
            v51 = *((_QWORD *)this + 44);
            v52 = *(_BYTE *)(v39 + 64);
            v53 = *(_QWORD *)(v39 + 88);
            v57 = *(_OWORD *)v39;
            v58 = *(_QWORD *)(v39 + 16);
            v59 = *(_OWORD *)(v39 + 24);
            v60 = *(_QWORD *)(v39 + 40);
            v61 = *(_QWORD *)(v39 + 48);
            md::LayoutContext::frameState(a2);
            md::mun::TapAnnotation::TapAnnotation(v40, v51, v52, v53, &v57, *(_QWORD *)(v39 + 72), v47 + (float)(v48 * (float)(v49 - v47)));
            v54 = (_QWORD *)*((_QWORD *)this + 45);
            *((_QWORD *)this + 45) = v40;
            if (v54)
              std::default_delete<md::mun::TapAnnotation>::operator()[abi:nn180100](v54);
LABEL_103:
            v55 = (ggl::CommandBuffer *)md::PassList::commandBufferForId(*(_QWORD **)(*(_QWORD *)(*((_QWORD *)this + 5) + 24) + 8), 0, 1u);
            md::mun::TapAnnotation::layout((md::mun::TapAnnotation *)v40, a2, v55);
          }
          md::mun::MuninOverlayRenderLayer::debugLayout(this, (uint64_t **)a2);

        }
      }
    }
  }
}

void sub_19FA8AA70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

md::mun::TapRenderResources *md::mun::TapRenderResources::TapRenderResources(md::mun::TapRenderResources *this, VKSharedResources *a2, id *a3)
{
  VKSharedResources *v5;
  __int128 *v6;
  uint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  char *v17;
  unsigned __int8 v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  __int128 v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  unint64_t *v36;
  unint64_t v37;
  ggl::VSSpriteShader *v39;
  unsigned __int8 v40;
  unsigned __int8 v41;
  unsigned __int8 v42;
  unsigned __int8 v43;
  unsigned __int8 v44;
  unsigned __int8 v45;
  __int16 v46;
  char v47;
  uint64_t v48;
  std::__shared_weak_count *v49;
  std::__shared_weak_count *v50;
  __int128 v51;
  __int128 v52;

  v5 = a2;
  *((_OWORD *)this + 1) = 0u;
  *(_OWORD *)this = 0u;
  *((_QWORD *)this + 4) = 0;
  v6 = (__int128 *)objc_msgSend(*a3, "format");
  v51 = *v6;
  v52 = v6[1];
  v7 = *(_QWORD *)(-[VKSharedResources device](v5, "device") + 24);
  v8 = *(_QWORD *)(v7 + 48);
  v9 = *(std::__shared_weak_count **)(v7 + 56);
  v50 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }
  v12 = *(_QWORD *)(v8 + 80);
  v14 = *(_QWORD *)(v12 + 176);
  v13 = *(std::__shared_weak_count **)(v12 + 184);
  v48 = v14;
  v49 = v13;
  if (v13)
  {
    v15 = (unint64_t *)&v13->__shared_owners_;
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }
  v17 = (char *)operator new(0x198uLL);
  *((_QWORD *)v17 + 1) = 0;
  *((_QWORD *)v17 + 2) = 0;
  *(_QWORD *)v17 = &off_1E42E5148;
  if ((v18 & 1) == 0)
  {
    if ((_DWORD)v39)
    {
      if ((v40 & 1) == 0)
      {
        if ((_DWORD)v39)
        {
          if ((v43 & 1) == 0
          {
            if ((v45 & 1) == 0
            {
              ggl::MeshTyped<ggl::VSCommon::Vertex>::attributesReflection(void)::r = (uint64_t)&ggl::VSCommon::vertexReflection;
            }
            ggl::MeshTyped<ggl::VSCommon::Vertex>::typedReflection(void)::r = (uint64_t)&ggl::MeshTyped<ggl::VSCommon::Vertex>::attributesReflection(void)::r;
            *(_QWORD *)algn_1EE577990 = 1;
          }
          ggl::VSSprite::PipelineSetup::typedReflection(void)::ref = (uint64_t)&ggl::MeshTyped<ggl::VSCommon::Vertex>::typedReflection(void)::r;
          *(_QWORD *)algn_1EE576F88 = &ggl::VSSprite::pipelineDataPipelineDeviceStructs(void)::ref;
          qword_1EE576F90 = 0;
          if ((v44 & 1) == 0
          {
            ggl::VSSprite::pipelineDataPipelineConstantStructs(void)::ref = (uint64_t)ggl::VSSprite::Sprite::reflection(void)::reflection;
          }
          qword_1EE576F98 = (uint64_t)&ggl::VSSprite::pipelineDataPipelineConstantStructs(void)::ref;
          unk_1EE576FA0 = xmmword_19FFB2DB0;
        }
      }
      ggl::VSSprite::PipelineState::typedReflection(void)::ref = (uint64_t)&ggl::VSSprite::PipelineSetup::typedReflection(void)::ref;
      ggl::VSSpriteShader::typedReflection(v39);
      qword_1EE577920 = (uint64_t)&ggl::VSSpriteShader::typedReflection(void)::ref;
      if ((v41 & 1) == 0
      {
        ggl::VSSprite::pipelineStatePipelineAttributeStructBinding(void)::attr = 0;
        unk_1EE577000 = 0;
        qword_1EE577008 = (uint64_t)"";
        dword_1EE577010 = 0;
        qword_1EE577018 = (uint64_t)&ggl::VSSprite::pipelineStatePipelineAttributeBinding_0(void)::attr;
        unk_1EE577020 = 2;
      }
      qword_1EE577928 = (uint64_t)&ggl::VSSprite::pipelineStatePipelineAttributeStructBinding(void)::attr;
      unk_1EE577930 = 1;
      qword_1EE577938 = 0;
      unk_1EE577940 = 2;
      qword_1EE577948 = (uint64_t)&ggl::VSSprite::pipelineStatePipelineDeviceStructBinding(void)::ref;
      unk_1EE577950 = 0;
      if ((v42 & 1) == 0
      {
        ggl::VSSprite::pipelineStatePipelineConstantStructBinding(void)::ref = 0;
        unk_1EE576FD0 = 0;
        qword_1EE576FD8 = (uint64_t)"sprite";
        dword_1EE576FE0 = 3;
        qword_1EE576FE8 = (uint64_t)&ggl::VSSprite::pipelineStatePipelineConstantSpriteBinding(void)::reflection;
        unk_1EE576FF0 = 3;
      }
      qword_1EE577958 = (uint64_t)&ggl::VSSprite::pipelineStatePipelineConstantStructBinding(void)::ref;
      unk_1EE577960 = 1;
    }
  }
  if (v49)
  {
    v19 = (unint64_t *)&v49->__shared_owners_;
    do
      v20 = __ldxr(v19);
    while (__stxr(v20 + 1, v19));
    *((_DWORD *)v17 + 14) = 0;
    *((_QWORD *)v17 + 5) = 0;
    *((_QWORD *)v17 + 6) = 0;
    *((_QWORD *)v17 + 3) = &off_1E42B6760;
    *((_QWORD *)v17 + 4) = 0;
    *((_QWORD *)v17 + 8) = &ggl::VSSprite::PipelineState::typedReflection(void)::ref;
    *((_QWORD *)v17 + 9) = v48;
    *((_QWORD *)v17 + 10) = v49;
    do
      v21 = __ldxr(v19);
    while (__stxr(v21 + 1, v19));
  }
  else
  {
    *((_DWORD *)v17 + 14) = 0;
    *((_QWORD *)v17 + 5) = 0;
    *((_QWORD *)v17 + 6) = 0;
    *((_QWORD *)v17 + 3) = &off_1E42B6760;
    *((_QWORD *)v17 + 4) = 0;
    *((_QWORD *)v17 + 8) = &ggl::VSSprite::PipelineState::typedReflection(void)::ref;
    *((_QWORD *)v17 + 9) = v48;
    *((_QWORD *)v17 + 10) = 0;
  }
  v17[136] = 0;
  *(_OWORD *)(v17 + 140) = xmmword_19FFB3060;
  *(_QWORD *)(v17 + 156) = 0;
  *(_QWORD *)(v17 + 172) = 0;
  *(_QWORD *)(v17 + 164) = 0;
  v17[184] = 0;
  *(_OWORD *)(v17 + 188) = xmmword_19FFB3060;
  *(_QWORD *)(v17 + 204) = 0;
  *(_QWORD *)(v17 + 220) = 0;
  *(_QWORD *)(v17 + 212) = 0;
  v17[232] = 0;
  *(_OWORD *)(v17 + 236) = xmmword_19FFB3060;
  *(_QWORD *)(v17 + 252) = 0;
  *(_QWORD *)(v17 + 268) = 0;
  *(_QWORD *)(v17 + 260) = 0;
  *(_OWORD *)(v17 + 280) = v51;
  *(_OWORD *)(v17 + 296) = v52;
  v17[312] = 0;
  *((_QWORD *)v17 + 48) = 0;
  *((_OWORD *)v17 + 22) = 0u;
  *((_OWORD *)v17 + 23) = 0u;
  *((_OWORD *)v17 + 20) = 0u;
  *((_OWORD *)v17 + 21) = 0u;
  *((_QWORD *)v17 + 49) = 0x100000001;
  v17[400] = 0;
  v17[88] = 1;
  *(_WORD *)(v17 + 89) = v46;
  v17[91] = v47;
  *(_OWORD *)(v17 + 92) = xmmword_19FFB35B0;
  *((_DWORD *)v17 + 27) = 7;
  *((_QWORD *)v17 + 14) = 0;
  *((_QWORD *)v17 + 15) = 0;
  *((_DWORD *)v17 + 32) = 0;
  v17[132] = 15;
  if (v49)
  {
    v22 = (unint64_t *)&v49->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
      std::__shared_weak_count::__release_weak(v49);
    }
  }
  *((_QWORD *)v17 + 3) = &off_1E42BCFE8;
  v24 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 2) = v17 + 24;
  *((_QWORD *)this + 3) = v17;
  if (v24)
  {
    v25 = (unint64_t *)&v24->__shared_owners_;
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  if (v49)
  {
    v27 = (unint64_t *)&v49->__shared_owners_;
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
      std::__shared_weak_count::__release_weak(v49);
    }
  }
  v29 = operator new();
  *(_DWORD *)(v29 + 32) = 0;
  *(_QWORD *)(v29 + 16) = 0;
  *(_QWORD *)(v29 + 24) = 0;
  *(_QWORD *)v29 = &off_1E42B5DE8;
  *(_QWORD *)(v29 + 8) = 0;
  *(_QWORD *)(v29 + 36) = 65537;
  *(_DWORD *)(v29 + 44) = 0;
  *(_QWORD *)(v29 + 48) = 1;
  *(_WORD *)(v29 + 56) = 0;
  *(_BYTE *)(v29 + 58) = 3;
  *(_QWORD *)(v29 + 67) = 0;
  *(_QWORD *)(v29 + 59) = 0;
  *(_BYTE *)(v29 + 75) = 0;
  *(_QWORD *)(v29 + 132) = 0;
  *(_QWORD *)(v29 + 124) = 0;
  *(_WORD *)(v29 + 188) = 257;
  *(_QWORD *)(v29 + 192) = 0;
  *(_QWORD *)(v29 + 200) = 0;
  *(_BYTE *)(v29 + 208) = 0;
  v30 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = v29;
  if (v30)
    (*(void (**)(uint64_t))(*(_QWORD *)v30 + 8))(v30);
  v31 = (char *)operator new(0x58uLL);
  *((_QWORD *)v31 + 1) = 0;
  *((_QWORD *)v31 + 2) = 0;
  *(_QWORD *)v31 = &off_1E42DED18;
  *((_QWORD *)v31 + 5) = 0;
  *((_QWORD *)v31 + 6) = 0;
  *((_QWORD *)v31 + 4) = 0;
  *((_DWORD *)v31 + 14) = 0;
  *((_QWORD *)v31 + 3) = &off_1E42B63B0;
  *(_QWORD *)&v32 = 0x100000001;
  *((_QWORD *)&v32 + 1) = 0x100000001;
  *(_OWORD *)(v31 + 60) = v32;
  *(_QWORD *)(v31 + 76) = 0x100000001;
  *((_DWORD *)v31 + 21) = 0;
  v33 = (std::__shared_weak_count *)*((_QWORD *)this + 1);
  *(_QWORD *)this = v31 + 24;
  *((_QWORD *)this + 1) = v31;
  if (v33)
  {
    v34 = (unint64_t *)&v33->__shared_owners_;
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 - 1, v34));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
      std::__shared_weak_count::__release_weak(v33);
    }
  }
  if (v50)
  {
    v36 = (unint64_t *)&v50->__shared_owners_;
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 - 1, v36));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
      std::__shared_weak_count::__release_weak(v50);
    }
  }

  return this;
}

void sub_19FA8B134(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v9;
  va_list va;

  va_start(va, a5);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)va);
  v9 = *(_QWORD *)(v5 + 32);
  *(_QWORD *)(v5 + 32) = 0;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](v7);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](v5);

  _Unwind_Resume(a1);
}

void std::default_delete<md::mun::TapAnnotation>::operator()[abi:nn180100](_QWORD *a1)
{
  uint64_t v2;
  uint64_t *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;

  v2 = a1[14];
  a1[14] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (uint64_t *)a1[13];
  a1[13] = 0;
  if (v3)
  {
    v4 = (std::__shared_weak_count *)v3[3];
    if (v4)
    {
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v6 = __ldaxr(p_shared_owners);
      while (__stlxr(v6 - 1, p_shared_owners));
      if (!v6)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
    v7 = v3[1];
    v3[1] = 0;
    if (v7)
      (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
    v8 = *v3;
    *v3 = 0;
    if (v8)
      (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
    MEMORY[0x1A1AF4E00](v3, 0x20C40DC1BFBCFLL);
  }
  v9 = (std::__shared_weak_count *)a1[4];
  if (v9)
  {
    v10 = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

uint64_t *md::mun::TapAnnotation::TapAnnotation(uint64_t *a1, uint64_t a2, char a3, uint64_t a4, __int128 *a5, uint64_t a6, float a7)
{
  __int128 v9;
  __int128 v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t shared_owners;
  unint64_t v16;
  std::__shared_weak_count_vtbl *v17;
  float v18;
  unint64_t shared_weak_owners;
  unint64_t v25;
  std::__shared_weak_count_vtbl *v26;
  std::__shared_weak_count *v27;
  std::__shared_weak_count *v28;
  _QWORD *v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  std::__shared_weak_count *v40;
  uint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  unint64_t *v45;
  unint64_t v46;
  std::__shared_weak_count **v47;
  std::__shared_weak_count **v48;
  unint64_t v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  unint64_t v59;
  int64x2_t *v60;
  uint64_t v61;
  _QWORD *v62;
  unint64_t *v63;
  unint64_t v64;
  _QWORD *v65;
  std::__shared_weak_count *v66;
  unint64_t *v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t *v71;
  unint64_t v72;
  unint64_t *v73;
  unint64_t v74;
  unint64_t *v75;
  unint64_t v76;
  std::__shared_weak_count *v78;
  std::__shared_weak_count *v79;
  uint64_t v80[2];
  _QWORD *v81;
  std::__shared_weak_count *v82;

  *a1 = a2;
  *((_BYTE *)a1 + 8) = a3;
  a1[2] = a4;
  a1[3] = 0;
  a1[4] = 0;
  v9 = *a5;
  a1[7] = *((_QWORD *)a5 + 2);
  *(_OWORD *)(a1 + 5) = v9;
  v10 = *(__int128 *)((char *)a5 + 24);
  a1[10] = *((_QWORD *)a5 + 5);
  *((_OWORD *)a1 + 4) = v10;
  *(_QWORD *)&v10 = *((_QWORD *)a5 + 6);
  *(_OWORD *)(a1 + 13) = 0u;
  a1[11] = v10;
  a1[12] = a6;
  *(_OWORD *)(a1 + 17) = 0u;
  *(_OWORD *)(a1 + 19) = 0u;
  *(_OWORD *)(a1 + 15) = 0u;
  a1[21] = 0x3FF0000000000000;
  v11 = (std::__shared_weak_count *)operator new(0xF8uLL);
  v11->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v11->__shared_owners_;
  v11->__shared_weak_owners_ = 0;
  v11->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E07C8;
  ggl::BufferData::BufferData((uint64_t)&v11[1], 32, 0, 0, 7, 4);
  v11[9].__shared_weak_owners_ = (uint64_t)"tap destination vertex data";
  v11[10].__vftable = (std::__shared_weak_count_vtbl *)&ggl::VSCommon::vertexReflection;
  v11[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B8520;
  v11[9].__shared_owners_ = (uint64_t)&unk_1E42B8540;
  v79 = v11;
  v13 = (std::__shared_weak_count *)operator new(0xF8uLL);
  v13->__shared_owners_ = 0;
  v14 = (unint64_t *)&v13->__shared_owners_;
  v13->__shared_weak_owners_ = 0;
  v13->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DF1E8;
  ggl::BufferData::BufferData((uint64_t)&v13[1], 2, 1, 0, 7, 6);
  LODWORD(v13[10].__vftable) = 0;
  v13[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B6B88;
  v13[1].__shared_owners_ = 2;
  v13[9].__shared_owners_ = (uint64_t)&unk_1E42B6BA8;
  v13[9].__shared_weak_owners_ = (uint64_t)"tap destination index data";
  v78 = v13;
  shared_owners = v11[1].__shared_owners_;
  v16 = (unint64_t)v11[3].__vftable - v11[2].__shared_weak_owners_;
  v17 = v11[4].__vftable;
  v18 = -(float)(a7 * 0.5);
  *(float *)&v17->~__shared_weak_count = v18;
  HIDWORD(v17->~__shared_weak_count) = 0;
  *(float *)&v17->~__shared_weak_count_0 = v18;
  v17->__on_zero_shared = (void (__cdecl *)(std::__shared_count *__hidden))0x3F80000000000000;
  __asm { FMOV            V2.2S, #1.0 }
  v17[1].~__shared_weak_count_0 = _D2;
  *(float *)&v17->__on_zero_shared_weak = a7 * 0.5;
  HIDWORD(v17->__on_zero_shared_weak) = 0;
  *(float *)&v17[1].~__shared_weak_count = v18;
  *(float *)&v17[1].__get_deleter = a7 * 0.5;
  HIDWORD(v17[1].__get_deleter) = 0;
  *(float *)&v17[1].__on_zero_shared_weak = a7 * 0.5;
  v17[2].~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))1065353216;
  *(float *)&v17[2].__on_zero_shared = v18;
  HIDWORD(v17[2].__on_zero_shared) = 0;
  *(float *)&v17[2].__get_deleter = a7 * 0.5;
  v17[2].__on_zero_shared_weak = 0;
  shared_weak_owners = v16 - v16 % shared_owners;
  if (shared_weak_owners)
  {
    if (v11[3].__shared_weak_owners_ > shared_weak_owners)
      shared_weak_owners = v11[3].__shared_weak_owners_;
    v11[3].__shared_owners_ = 0;
    v11[3].__shared_weak_owners_ = shared_weak_owners;
  }
  v25 = ((unint64_t)v13[3].__vftable - v13[2].__shared_weak_owners_) & 0xFFFFFFFFFFFFFFFELL;
  v26 = v13[4].__vftable;
  v26->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))0x2000200010000;
  LODWORD(v26->~__shared_weak_count_0) = 3;
  if (v13[3].__shared_weak_owners_ > v25)
    v25 = v13[3].__shared_weak_owners_;
  v13[3].__shared_owners_ = 0;
  v13[3].__shared_weak_owners_ = v25;
  v27 = (std::__shared_weak_count *)operator new(0xA8uLL);
  v28 = v27;
  v27->__shared_owners_ = 0;
  v27->__shared_weak_owners_ = 0;
  v27->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E5110;
  v29 = &v27[1].__vftable;
  v81 = &v11[1].__vftable;
  v82 = v11;
  do
    v30 = __ldxr(p_shared_owners);
  while (__stxr(v30 + 1, p_shared_owners));
  v80[0] = (uint64_t)&v13[1];
  v80[1] = (uint64_t)v13;
  do
    v31 = __ldxr(v14);
  while (__stxr(v31 + 1, v14));
  ggl::VSCommon::Mesh::Mesh((uint64_t)&v27[1], (uint64_t)"destination mesh", (uint64_t *)&v81, v80);
  do
    v32 = __ldaxr(v14);
  while (__stlxr(v32 - 1, v14));
  if (!v32)
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
  }
  v33 = v82;
  if (v82)
  {
    v34 = (unint64_t *)&v82->__shared_owners_;
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 - 1, v34));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
      std::__shared_weak_count::__release_weak(v33);
    }
  }
  v36 = operator new();
  v37 = *a1;
  v38 = (std::__shared_weak_count *)operator new(0xE8uLL);
  v38->__shared_owners_ = 0;
  v39 = (unint64_t *)&v38->__shared_owners_;
  v38->__shared_weak_owners_ = 0;
  v38->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E2DA0;
  v40 = v38 + 1;
  ggl::BufferData::BufferData((uint64_t)&v38[1], qword_1EE555E80, 2, 1, 6, 1);
  v38[9].__shared_owners_ = (uint64_t)ggl::VSSprite::Sprite::reflection(void)::reflection;
  v38[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B9F70;
  v41 = *(_QWORD *)(v37 + 16);
  v42 = *(std::__shared_weak_count **)(v37 + 24);
  if (v42)
  {
    v43 = (unint64_t *)&v42->__shared_owners_;
    do
      v44 = __ldxr(v43);
    while (__stxr(v44 + 1, v43));
    ggl::PipelineSetup::PipelineSetup((_QWORD *)v36, v41, (uint64_t)v42);
    v45 = (unint64_t *)&v42->__shared_owners_;
    do
      v46 = __ldaxr(v45);
    while (__stlxr(v46 - 1, v45));
    if (!v46)
    {
      ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
      std::__shared_weak_count::__release_weak(v42);
    }
  }
  else
  {
    ggl::PipelineSetup::PipelineSetup((_QWORD *)v36, v41, 0);
  }
  *(_QWORD *)v36 = &off_1E42BCFB8;
  v47 = *(std::__shared_weak_count ***)(v36 + 64);
  *v47 = v40;
  v47[1] = 0;
  v48 = *(std::__shared_weak_count ***)(v36 + 160);
  do
    v49 = __ldxr(v39);
  while (__stxr(v49 + 1, v39));
  v50 = v48[1];
  *v48 = v40;
  v48[1] = v38;
  if (v50)
  {
    v51 = (unint64_t *)&v50->__shared_owners_;
    do
      v52 = __ldaxr(v51);
    while (__stlxr(v52 - 1, v51));
    if (!v52)
    {
      ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
      std::__shared_weak_count::__release_weak(v50);
    }
  }
  **(_QWORD **)(v36 + 96) = 0;
  *(_QWORD *)(*(_QWORD *)(v36 + 96) + 8) = 0;
  do
    v53 = __ldaxr(v39);
  while (__stlxr(v53 - 1, v39));
  if (!v53)
  {
    ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
    std::__shared_weak_count::__release_weak(v38);
  }
  v54 = *(_QWORD *)a1[2];
  v55 = (*(_QWORD *)(a1[2] + 8) - v54) >> 4;
  v56 = *(_QWORD *)(v36 + 96);
  if ((*(_QWORD *)(v36 + 104) - v56) >> 3 < v55)
    v55 = (*(_QWORD *)(v36 + 104) - v56) >> 3;
  if (v55)
  {
    v57 = 0;
    v58 = 0;
    do
    {
      *(_QWORD *)(v56 + 8 * v58++) = *(_QWORD *)(v54 + v57);
      v54 = *(_QWORD *)a1[2];
      v59 = (*(_QWORD *)(a1[2] + 8) - v54) >> 4;
      v56 = *(_QWORD *)(v36 + 96);
      if ((*(_QWORD *)(v36 + 104) - v56) >> 3 < v59)
        v59 = (*(_QWORD *)(v36 + 104) - v56) >> 3;
      v57 += 16;
    }
    while (v58 < v59);
  }
  v60 = (int64x2_t *)operator new();
  v61 = *(_QWORD *)(*a1 + 32);
  v60->i64[0] = (uint64_t)&off_1E42B59B0;
  v60[1].i64[0] = (uint64_t)"";
  v60[1].i64[1] = v61;
  v60[2].i64[0] = v36;
  v60[2].i32[2] = 0;
  v60[3].i64[0] = 0;
  v60[3].i32[2] = 1065353216;
  v60[4].i64[0] = (uint64_t)v29;
  v60[4].i64[1] = 0;
  v60[5].i64[0] = 0;
  v60[5].i64[1] = 0;
  v60[6] = vdupq_n_s64(1uLL);
  v60[7].i64[0] = 0;
  v62 = (_QWORD *)operator new();
  *v62 = v60;
  v62[1] = v36;
  v62[2] = v29;
  v62[3] = v28;
  if (v28)
  {
    v63 = (unint64_t *)&v28->__shared_owners_;
    do
      v64 = __ldxr(v63);
    while (__stxr(v64 + 1, v63));
  }
  v65 = (_QWORD *)operator new();
  *v65 = &off_1E42E7D40;
  v65[1] = 0;
  v65[2] = 0;
  v65[3] = v62;
  v66 = (std::__shared_weak_count *)a1[4];
  a1[3] = (uint64_t)v62;
  a1[4] = (uint64_t)v65;
  if (v66)
  {
    v67 = (unint64_t *)&v66->__shared_owners_;
    do
      v68 = __ldaxr(v67);
    while (__stlxr(v68 - 1, v67));
    if (!v68)
    {
      ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
      std::__shared_weak_count::__release_weak(v66);
    }
  }
  v69 = operator new();
  *(_DWORD *)(v69 + 32) = 0;
  *(_QWORD *)(v69 + 16) = 0;
  *(_QWORD *)(v69 + 24) = 0;
  *(_QWORD *)v69 = &off_1E42B5DE8;
  *(_QWORD *)(v69 + 8) = 0;
  *(_QWORD *)(v69 + 36) = 65537;
  *(_DWORD *)(v69 + 44) = 0;
  *(_QWORD *)(v69 + 48) = 1;
  *(_WORD *)(v69 + 56) = 0;
  *(_BYTE *)(v69 + 58) = 3;
  *(_QWORD *)(v69 + 67) = 0;
  *(_QWORD *)(v69 + 59) = 0;
  *(_BYTE *)(v69 + 75) = 0;
  *(_QWORD *)(v69 + 132) = 0;
  *(_QWORD *)(v69 + 124) = 0;
  *(_WORD *)(v69 + 188) = 257;
  *(_QWORD *)(v69 + 192) = 0;
  *(_QWORD *)(v69 + 200) = 0;
  *(_BYTE *)(v69 + 208) = 0;
  v70 = a1[14];
  a1[14] = v69;
  if (v70)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v70 + 8))(v70);
    v69 = a1[14];
  }
  *(_BYTE *)(v69 + 58) = 0;
  if (v28)
  {
    v71 = (unint64_t *)&v28->__shared_owners_;
    do
      v72 = __ldaxr(v71);
    while (__stlxr(v72 - 1, v71));
    if (!v72)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
  if (v78)
  {
    v73 = (unint64_t *)&v78->__shared_owners_;
    do
      v74 = __ldaxr(v73);
    while (__stlxr(v74 - 1, v73));
    if (!v74)
    {
      ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
      std::__shared_weak_count::__release_weak(v78);
    }
  }
  if (v79)
  {
    v75 = (unint64_t *)&v79->__shared_owners_;
    do
      v76 = __ldaxr(v75);
    while (__stlxr(v76 - 1, v75));
    if (!v76)
    {
      ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
      std::__shared_weak_count::__release_weak(v79);
    }
  }
  return a1;
}

void sub_19FA8BA00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v3;
  uint64_t **v4;
  uint64_t v6;
  uint64_t v7;
  va_list va;
  uint64_t v9;
  uint64_t v10;
  va_list va1;
  uint64_t v12;
  va_list va2;

  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v7 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v10 = va_arg(va2, _QWORD);
  v12 = va_arg(va2, _QWORD);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)va2);
  v6 = *(_QWORD *)(v3 + 112);
  *(_QWORD *)(v3 + 112) = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  std::unique_ptr<ggl::Drawable>::~unique_ptr[abi:nn180100](v4);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](a3);
  _Unwind_Resume(a1);
}

void md::mun::TapAnnotation::layout(md::mun::TapAnnotation *this, const md::LayoutContext *a2, ggl::CommandBuffer *a3)
{
  _QWORD *v6;
  unint64_t v7;
  _QWORD *v8;
  unint64_t v9;
  id v10;
  _OWORD *v11;
  _QWORD *PointsDrawable;
  uint64_t *v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  int8x8_t v20;
  uint8x8_t v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  uint64_t v37;
  double v38;
  double v39;
  double v40;
  double v41;
  double v42;
  double v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float v49;
  float v50;
  float v51;
  float v52;
  float v53;
  float v54;
  float v55;
  float v56;
  float v57;
  float v58;
  float v59;
  uint64_t v60;
  _QWORD *v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  double v68;
  double v69;
  float v70;
  float v71;
  float v72;
  void *v73;
  uint64_t v74;
  uint64_t v75;
  double v76;
  __int128 v77;
  double v78;
  float v79;
  double v80;
  float v81;
  float v82;
  float v83;
  float v84;
  float v85;
  float v86;
  float v87;
  float v88;
  float v89;
  __int128 v90;
  double v91[12];
  __int128 v92;
  uint64_t v93;
  uint64_t v94;
  void *__p[2];
  double v96;
  double v97;
  double v98;
  double v99;
  double v100;
  double v101;
  double v102;
  double v103;
  double v104;
  double v105;
  double v106;
  double v107;
  double v108;
  double v109;

  if (!*((_QWORD *)this + 13))
  {
    v6 = (_QWORD *)*((_QWORD *)a2 + 1);
    v7 = v6[1];
    if ((v7 & (v7 - 1)) != 0)
    {
      v9 = 0xA60DDA5A69582425;
      if (v7 <= 0xA60DDA5A69582425)
        v9 = 0xA60DDA5A69582425 % v7;
      v8 = *(_QWORD **)(*v6 + 8 * v9);
      do
      {
        do
          v8 = (_QWORD *)*v8;
        while (v8[1] != 0xA60DDA5A69582425);
      }
      while (v8[2] != 0xA60DDA5A69582425);
    }
    else
    {
      v8 = *(_QWORD **)(*v6 + 8 * ((v7 - 1) & 0xA60DDA5A69582425));
      do
      {
        do
          v8 = (_QWORD *)*v8;
        while (v8[1] != 0xA60DDA5A69582425);
      }
      while (v8[2] != 0xA60DDA5A69582425);
    }
    v10 = **(id **)(v8[5] + 32);
    v11 = operator new(0x70uLL);
    *(_QWORD *)&v96 = v11 + 7;
    *v11 = xmmword_19FFB34C0;
    v11[1] = xmmword_19FFB3580;
    v11[2] = xmmword_19FFB50A0;
    v11[3] = xmmword_19FFB50B0;
    v11[4] = xmmword_19FFB3980;
    v11[5] = xmmword_19FFB3960;
    v11[6] = xmmword_19FFB2D90;
    __p[0] = v11;
    __p[1] = v11 + 7;
    v13 = (uint64_t *)*((_QWORD *)this + 13);
    *((_QWORD *)this + 13) = PointsDrawable;
    if (v13)
    {
      v14 = (std::__shared_weak_count *)v13[3];
      if (v14)
      {
        p_shared_owners = (unint64_t *)&v14->__shared_owners_;
        do
          v16 = __ldaxr(p_shared_owners);
        while (__stlxr(v16 - 1, p_shared_owners));
        if (!v16)
        {
          ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
          std::__shared_weak_count::__release_weak(v14);
        }
      }
      v17 = v13[1];
      v13[1] = 0;
      if (v17)
        (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
      v18 = *v13;
      *v13 = 0;
      if (v18)
        (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
      MEMORY[0x1A1AF4E00](v13, 0x20C40DC1BFBCFLL);
    }
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }

  }
  v19 = (_QWORD *)*((_QWORD *)a2 + 1);
  v20 = (int8x8_t)v19[1];
  if (!*(_QWORD *)&v20)
    goto LABEL_49;
  v21 = (uint8x8_t)vcnt_s8(v20);
  v21.i16[0] = vaddlv_u8(v21);
  if (v21.u32[0] > 1uLL)
  {
    v22 = 0x1AF456233693CD46;
    if (*(_QWORD *)&v20 <= 0x1AF456233693CD46uLL)
      v22 = 0x1AF456233693CD46uLL % *(_QWORD *)&v20;
  }
  else
  {
    v22 = (*(_QWORD *)&v20 - 1) & 0x1AF456233693CD46;
  }
  v23 = *(_QWORD **)(*v19 + 8 * v22);
  if (!v23)
    goto LABEL_49;
  v24 = (_QWORD *)*v23;
  if (!v24)
    goto LABEL_49;
  if (v21.u32[0] < 2uLL)
  {
    v25 = *(_QWORD *)&v20 - 1;
    while (1)
    {
      v27 = v24[1];
      if (v27 == 0x1AF456233693CD46)
      {
        if (v24[2] == 0x1AF456233693CD46)
          goto LABEL_47;
      }
      else if ((v27 & v25) != v22)
      {
        goto LABEL_49;
      }
      v24 = (_QWORD *)*v24;
      if (!v24)
        goto LABEL_49;
    }
  }
  while (1)
  {
    v26 = v24[1];
    if (v26 == 0x1AF456233693CD46)
      break;
    if (v26 >= *(_QWORD *)&v20)
      v26 %= *(_QWORD *)&v20;
    if (v26 != v22)
      goto LABEL_49;
LABEL_36:
    v24 = (_QWORD *)*v24;
    if (!v24)
      goto LABEL_49;
  }
  if (v24[2] != 0x1AF456233693CD46)
    goto LABEL_36;
LABEL_47:
  v28 = v24[5];
  if (*(_QWORD *)(v28 + 8) == 0x1AF456233693CD46)
  {
    v29 = *(_QWORD *)(v28 + 32);
    goto LABEL_50;
  }
LABEL_49:
  v29 = 0;
LABEL_50:
  v30 = *((double *)this + 9);
  v31 = *((double *)this + 10);
  v32 = *((double *)this + 11);
  v33 = v30 + v30;
  v34 = (v30 + v30) * v30;
  v35 = (v31 + v31) * v31;
  v37 = *((_QWORD *)this + 7);
  v36 = *((double *)this + 8);
  v38 = v36 + v36;
  v39 = (v36 + v36) * v30;
  v40 = (v31 + v31) * v32;
  v41 = v31 * (v36 + v36);
  v42 = 1.0 - (v36 + v36) * v36;
  v43 = v33 * v31;
  v91[0] = 1.0 - (v34 + v35);
  v91[1] = v40 + v39;
  v91[4] = v39 - v40;
  v91[5] = v42 - v35;
  v91[8] = v32 * v33 + v41;
  v91[9] = v43 - v32 * v38;
  v91[2] = v41 - v32 * v33;
  v91[6] = v32 * v38 + v43;
  v91[10] = v42 - v34;
  v91[3] = 0.0;
  v91[7] = 0.0;
  v91[11] = 0.0;
  v92 = *(_OWORD *)((char *)this + 40);
  v93 = v37;
  v94 = 0x3FF0000000000000;
  gm::operator*<double,4,4,4>((double *)__p, (double *)(v29 + 808), v91);
  v45 = *(double *)&__p[1];
  v46 = v96;
  v47 = v97;
  v48 = v98;
  v49 = v99;
  v50 = v100;
  v51 = v101;
  v52 = v102;
  v53 = v103;
  v54 = v104;
  v55 = v105;
  v56 = v106;
  v57 = v107;
  v58 = v108;
  v59 = v109;
  v60 = *((_QWORD *)this + 3);
  v61 = **(_QWORD ***)(*(_QWORD *)(v60 + 8) + 64);
  v62 = v61[1];
  if (v62)
    v63 = v61[9];
  else
    v63 = 0;
  v88 = *(double *)__p;
  v89 = *(double *)&__p[1];
  v44 = *(double *)__p;
  *(float *)v63 = v44;
  *(float *)(v63 + 4) = v45;
  v86 = v46;
  v87 = v47;
  *(float *)(v63 + 8) = v46;
  *(float *)(v63 + 12) = v47;
  v84 = v48;
  v85 = v49;
  *(float *)(v63 + 16) = v48;
  *(float *)(v63 + 20) = v49;
  v82 = v50;
  v83 = v51;
  *(float *)(v63 + 24) = v50;
  *(float *)(v63 + 28) = v51;
  *(float *)(v63 + 32) = v52;
  *(float *)(v63 + 36) = v53;
  v81 = v53;
  *(float *)(v63 + 40) = v54;
  *(float *)(v63 + 44) = v55;
  *(float *)(v63 + 48) = v56;
  *(float *)(v63 + 52) = v57;
  *(float *)(v63 + 56) = v58;
  *(float *)(v63 + 60) = v59;
  v64 = *((_QWORD *)this + 2);
  v65 = *(_QWORD *)(v64 + 88);
  v66 = *(_QWORD *)(v64 + 80)
      + vcvtad_u64_f64(fmin(fmax((*(double *)(v64 + 64) - *(double *)(v64 + 48)) / (*(double *)(v64 + 56) - *(double *)(v64 + 48)), 0.0), 1.0)* (double)(v65 - *(_QWORD *)(v64 + 80)));
  if (v66 >= v65)
    v66 = *(_QWORD *)(v64 + 88);
  v67 = *(unsigned int *)(v64 + 24);
  v68 = *(double *)(v64 + 32);
  v69 = *(double *)(v64 + 40);
  v70 = v68 * (double)(v66 % v67);
  v71 = v69 * (double)(v66 / v67 % *(unsigned int *)(v64 + 28));
  *(float *)(v63 + 72) = v70;
  *(float *)(v63 + 76) = v71;
  v72 = v68;
  *(float *)&v68 = v69;
  *(float *)(v63 + 64) = v72;
  *(_DWORD *)(v63 + 68) = LODWORD(v68);
  if (v63 && v62)
  {
    if (v61[8] > v62)
      v62 = v61[8];
    v61[7] = 0;
    v61[8] = v62;
  }
  ggl::CommandBuffer::pushRenderItem((uint64_t)a3, *(ggl::RenderItem **)v60);
  +[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings");
  v73 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v73, "muninDebugLayer"))
  {
    v74 = *((_QWORD *)this + 13);
    if (v74)
    {
      v75 = **(_QWORD **)(*(_QWORD *)(v74 + 8) + 64);
      __p[0] = 0;
      __p[1] = 0;
      v76 = *(double *)(v75 + 8);
      *(_QWORD *)&v77 = 0;
      *((_QWORD *)&v77 + 1) = v75;
      v78 = v76 == 0.0 ? 0.0 : *(double *)(v75 + 72);
      v79 = v89;
      v90 = v77;
      *(_OWORD *)__p = v77;
      v96 = 0.0;
      v97 = v76;
      v99 = v78;
      LOWORD(v98) = 1;
      **(float **)&v78 = v88;
      *(float *)(*(_QWORD *)&v78 + 4) = v79;
      *(float *)(*(_QWORD *)&v78 + 8) = v86;
      *(float *)(*(_QWORD *)&v78 + 12) = v87;
      *(float *)(*(_QWORD *)&v78 + 16) = v84;
      *(float *)(*(_QWORD *)&v78 + 20) = v85;
      *(float *)(*(_QWORD *)&v78 + 24) = v82;
      *(float *)(*(_QWORD *)&v78 + 28) = v83;
      *(float *)(*(_QWORD *)&v78 + 32) = v52;
      *(float *)(*(_QWORD *)&v78 + 36) = v81;
      *(float *)(*(_QWORD *)&v78 + 40) = v54;
      *(float *)(*(_QWORD *)&v78 + 44) = v55;
      *(float *)(*(_QWORD *)&v78 + 48) = v56;
      *(float *)(*(_QWORD *)&v78 + 52) = v57;
      *(float *)(*(_QWORD *)&v78 + 56) = v58;
      *(float *)(*(_QWORD *)&v78 + 60) = v59;
      ggl::CommandBuffer::pushRenderItem((uint64_t)a3, *(ggl::RenderItem **)v74);
      if (v76 != 0.0)
      {
        if ((_QWORD)v90 && *(_BYTE *)(*((_QWORD *)&v90 + 1) + 17) != 2)
          (*(void (**)(void))(*(_QWORD *)v90 + 64))();
        v80 = *(double *)(*((_QWORD *)&v90 + 1) + 64);
        if (*(_QWORD *)&v80 <= *(_QWORD *)&v76)
          v80 = v76;
        *(_QWORD *)(*((_QWORD *)&v90 + 1) + 56) = 0;
        *(double *)(*((_QWORD *)&v90 + 1) + 64) = v80;
      }
    }
  }

}

void sub_19FA8C188(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *__p,uint64_t a32)
{
  void *v32;

  ggl::BufferMemory::~BufferMemory((ggl::BufferMemory *)&__p);

  _Unwind_Resume(a1);
}

void md::mun::MuninOverlayRenderLayer::debugLayout(md::mun::MuninOverlayRenderLayer *this, uint64_t **a2)
{
  const md::LayoutContext *v2;
  uint64_t *v4;
  int8x8_t v5;
  uint8x8_t v6;
  unint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  id *v22;
  id v23;
  double v24;
  id v25;
  double v26;
  double v27;
  double v28;
  _QWORD *v29;
  int8x8_t v30;
  uint8x8_t v31;
  unint64_t v32;
  _QWORD *v33;
  _QWORD *v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  id *v39;
  id v40;
  uint64_t v41;
  std::string::size_type v42;
  std::string::size_type v43;
  unint64_t *v44;
  unint64_t v45;
  id v46;
  _OWORD *v47;
  uint64_t v48;
  std::__shared_weak_count *v49;
  unint64_t *p_shared_owners;
  unint64_t v51;
  _QWORD *v52;
  unint64_t *v53;
  unint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  _QWORD *v58;
  uint64_t v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  uint64_t v62;
  unint64_t v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  float64_t v76;
  _QWORD *v77;
  unint64_t *v78;
  _QWORD *v79;
  unint64_t *v80;
  unint64_t v81;
  unint64_t v82;
  std::__shared_weak_count *size;
  unint64_t *v84;
  unint64_t v85;
  _QWORD *v86;
  uint64_t v87;
  std::__shared_weak_count *v88;
  unint64_t *v89;
  int64x2_t *v90;
  uint64_t v91;
  _QWORD *v92;
  unint64_t v93;
  unint64_t v94;
  uint64_t *v95;
  std::__shared_weak_count *v96;
  unint64_t *v97;
  unint64_t v98;
  uint64_t v99;
  uint64_t v100;
  unint64_t v101;
  std::__shared_weak_count *v102;
  unint64_t *v103;
  unint64_t v104;
  std::__shared_weak_count *v105;
  unint64_t *v106;
  unint64_t v107;
  std::__shared_weak_count *v108;
  unint64_t *v109;
  unint64_t v110;
  std::__shared_weak_count *v111;
  unint64_t *v112;
  unint64_t v113;
  std::__shared_weak_count *v114;
  unint64_t *v115;
  unint64_t v116;
  std::__shared_weak_count *v117;
  unint64_t *v118;
  unint64_t v119;
  _QWORD *v120;
  _QWORD *PointsDrawable;
  uint64_t *v126;
  std::__shared_weak_count *v127;
  unint64_t *v128;
  unint64_t v129;
  uint64_t v130;
  uint64_t v131;
  _QWORD *v132;
  _QWORD *v133;
  uint64_t *v134;
  std::__shared_weak_count *v135;
  unint64_t *v136;
  unint64_t v137;
  uint64_t v138;
  uint64_t v139;
  std::__shared_weak_count *v140;
  unint64_t *v141;
  unint64_t v142;
  id v143;
  uint64_t v144;
  uint64_t v145;
  _QWORD *v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  unint64_t v151;
  uint64_t v152;
  unint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  _QWORD *v157;
  unint64_t v158;
  _QWORD *v159;
  unint64_t v160;
  double *v161;
  double v162;
  double v163;
  double v164;
  double v165;
  double v166;
  double v167;
  double v168;
  double v169;
  double v170;
  double v171;
  double v172;
  double v173;
  double v174;
  double v175;
  double v176;
  double v177;
  double v178;
  double v179;
  double v180;
  double v181;
  double v182;
  double v183;
  double v184;
  double v185;
  double v186;
  double v187;
  double v188;
  double v189;
  double v190;
  double v191;
  double v193;
  double v194;
  double v195;
  double v196;
  double v197;
  double v198;
  double v199;
  double v200;
  double v201;
  double v202;
  double v203;
  double v204;
  double v205;
  double v206;
  double v207;
  double v208;
  double v209;
  double v210;
  unint64_t v211;
  _QWORD *v212;
  unint64_t v213;
  double v214;
  id v215;
  double v216;
  double v217;
  double v218;
  double v219;
  uint64_t v220;
  std::__shared_weak_count *v221;
  unint64_t *v222;
  unint64_t v223;
  int v224;
  double v225;
  unint64_t *v226;
  unint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  _BYTE *v232;
  _BYTE *v233;
  void *v234;
  unint64_t v235;
  char *v236;
  _QWORD *v237;
  _QWORD *v238;
  char *v239;
  char *v240;
  unint64_t v241;
  char *v242;
  uint64_t v243;
  unint64_t v244;
  uint64_t v245;
  unint64_t v246;
  _BYTE *v247;
  _QWORD *v248;
  unint64_t v249;
  char *v250;
  uint64_t v251;
  uint64_t v252;
  _OWORD *v253;
  char *v254;
  uint64_t v255;
  __int128 v256;
  id v257;
  double v258;
  double v259;
  double v260;
  double v261;
  uint64_t v262;
  double v263;
  char *v264;
  double v265;
  pthread_rwlock_t *v266;
  geo::read_write_lock *v267;
  const char *v268;
  _QWORD *v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  _QWORD *v273;
  _QWORD *v274;
  char *v275;
  std::string::size_type v276;
  __int128 v277;
  uint64_t v278;
  __int128 v279;
  char *v280;
  __int128 *v281;
  __int128 *v282;
  unint64_t v283;
  unint64_t v284;
  char *v285;
  __int128 *v286;
  __int128 *v287;
  uint64_t v288;
  char *v289;
  __int128 v290;
  uint64_t v291;
  __int128 v292;
  __int128 v293;
  __int128 v294;
  __int128 v295;
  __int128 v296;
  __int128 v297;
  __int128 v298;
  __int128 v299;
  __int128 v300;
  _BYTE *v301;
  char *v302;
  char *v303;
  unint64_t v304;
  unint64_t v305;
  uint64_t v306;
  __int128 v307;
  unint64_t v308;
  char v309;
  uint64_t v310;
  uint64_t v311;
  void *v312;
  char *v313;
  __int128 v314;
  uint64_t v315;
  __int128 v316;
  __int128 v317;
  __int128 v318;
  __int128 v319;
  __int128 v320;
  __int128 v321;
  __int128 v322;
  __int128 v323;
  __int128 v324;
  char *v325;
  char *v326;
  unint64_t v327;
  size_t v328;
  char *v329;
  char *v330;
  unint64_t v331;
  char *v332;
  unint64_t v333;
  __int128 *v334;
  _OWORD *v335;
  unint64_t v336;
  __int128 v337;
  unint64_t v338;
  unint64_t v339;
  uint64_t *v340;
  char *v341;
  uint64_t v342;
  char v343;
  unint64_t v344;
  char *v345;
  __int128 *v346;
  _OWORD *v347;
  unint64_t v348;
  __int128 v349;
  unint64_t v350;
  unint64_t v351;
  uint64_t *v352;
  char *v353;
  uint64_t v354;
  char v355;
  uint64_t v356;
  uint64_t *v357;
  std::__shared_weak_count *v358;
  unint64_t *v359;
  unint64_t v360;
  uint64_t v361;
  uint64_t v362;
  uint64_t v363;
  uint64_t v364;
  float *v365;
  uint64_t v366;
  uint64_t v367;
  float *v368;
  unint64_t v369;
  float v370;
  unint64_t v371;
  unint64_t v372;
  unint64_t v373;
  unint64_t v374;
  double v375;
  double v376;
  double v377;
  double v378;
  double v379;
  double v380;
  double v381;
  double v382;
  double v383;
  double v384;
  float v385;
  float v386;
  float v387;
  double v388;
  double v389;
  double v390;
  float v391;
  float v392;
  float v393;
  float *v394;
  uint64_t v395;
  unint64_t v396;
  unint64_t v397;
  char *v398;
  char *v399;
  char *v400;
  uint64_t v401;
  int v402;
  uint64_t v403;
  unint64_t v404;
  uint64_t v405;
  int v406;
  geo::read_write_lock *v407;
  const char *v408;
  _QWORD *v409;
  uint64_t v410;
  _QWORD *v411;
  uint64_t *v412;
  std::__shared_weak_count *v413;
  unint64_t *v414;
  unint64_t v415;
  uint64_t v416;
  uint64_t v417;
  __int128 v418;
  unint64_t v419;
  uint64_t v420;
  uint64_t *v421;
  std::__shared_weak_count *v422;
  unint64_t *v423;
  unint64_t v424;
  uint64_t v425;
  uint64_t v426;
  uint64_t *v427;
  std::__shared_weak_count *v428;
  unint64_t *v429;
  unint64_t v430;
  uint64_t v431;
  uint64_t v432;
  std::string::size_type v433;
  uint64_t v434;
  _QWORD *v435;
  _QWORD *v436;
  uint64_t v437;
  std::string::size_type v438;
  void *v439;
  std::string::size_type v440;
  _QWORD *v441;
  _QWORD *v442;
  void *v443;
  double v444;
  double v445;
  double v446;
  double v447;
  double v448;
  double v449;
  double v450;
  double v451;
  double v452;
  double v453;
  double v454;
  uint64_t v455;
  uint64_t v456;
  _QWORD *v457;
  unint64_t v458;
  float32x4_t *v459;
  double v460;
  double v461;
  double v462;
  double v463;
  double v464;
  double v465;
  double v466;
  double v467;
  double v468;
  double v469;
  double v470;
  _QWORD *v471;
  unint64_t v472;
  _QWORD *v473;
  unint64_t v474;
  uint64_t v475;
  uint64_t v476;
  __int128 v477;
  unint64_t v478;
  uint64_t v479;
  uint64_t v480;
  uint64_t v481;
  unint64_t v482;
  __int128 v483;
  float32x4_t *v484;
  double v485;
  double v486;
  double v487;
  double v488;
  double v489;
  double v490;
  double v491;
  double v492;
  double v493;
  double v494;
  double v495;
  double v496;
  double v497;
  double v498;
  double v499;
  double v500;
  double v501;
  double v502;
  uint64_t v503;
  double v504;
  double v505;
  double v506;
  double v507;
  double v508;
  double v509;
  float32x4_t *v510;
  unint64_t v511;
  unint64_t v512;
  _QWORD *v513;
  int v514;
  int v515;
  unint64_t v516;
  unint64_t v517;
  uint64_t v518;
  uint64_t v519;
  unint64_t v520;
  __int128 v521;
  float32x4_t *v522;
  double v523;
  double v524;
  double v525;
  double v526;
  double v527;
  double v528;
  double v529;
  double v530;
  double v531;
  double v532;
  double v533;
  double v534;
  double v535;
  double v536;
  double v537;
  double v538;
  double v539;
  double v540;
  uint64_t v541;
  double v542;
  double v543;
  double v544;
  double v545;
  double v546;
  double v547;
  float32x4_t *v548;
  unint64_t v549;
  unint64_t v550;
  _QWORD *v551;
  int v552;
  int v553;
  unint64_t v554;
  unint64_t v555;
  uint64_t v556;
  uint64_t v557;
  unint64_t v558;
  __int128 v559;
  float32x4_t *v560;
  double v561;
  double v562;
  double v563;
  double v564;
  double v565;
  double v566;
  double v567;
  double v568;
  double v569;
  double v570;
  double v571;
  double v572;
  double v573;
  double v574;
  double v575;
  double v576;
  double v577;
  double v578;
  uint64_t v579;
  double v580;
  double v581;
  double v582;
  double v583;
  double v584;
  double v585;
  float32x4_t *v586;
  unint64_t v587;
  unint64_t v588;
  _QWORD *v589;
  int v590;
  int v591;
  unint64_t v592;
  unint64_t v593;
  uint64_t v594;
  unint64_t v595;
  __int128 v596;
  float32x4_t *v597;
  double v598;
  double v599;
  double v600;
  double v601;
  double v602;
  double v603;
  double v604;
  double v605;
  double v606;
  double v607;
  double v608;
  double v609;
  double v610;
  double v611;
  double v612;
  double v613;
  double v614;
  double v615;
  uint64_t v616;
  double v617;
  double v618;
  double v619;
  double v620;
  double v621;
  double v622;
  float32x4_t *v623;
  unint64_t v624;
  unint64_t v625;
  _QWORD *v626;
  int v627;
  int v628;
  unint64_t v629;
  unint64_t v630;
  ggl::DebugConsole *v631;
  float32x4_t *v632;
  id v633;
  double v634;
  double v635;
  double v636;
  double v637;
  id v638;
  double v639;
  double v640;
  float v641;
  float v642;
  uint64_t v643;
  std::__shared_weak_count *v644;
  unint64_t *v645;
  unint64_t v646;
  uint64_t v647;
  std::__shared_weak_count *v648;
  double v649;
  unint64_t *v650;
  unint64_t v651;
  char v652;
  float v653;
  int v654;
  float v655;
  unint64_t *v656;
  unint64_t v657;
  float v658;
  unint64_t *v659;
  unint64_t v660;
  std::string *v661;
  int32x2_t v662;
  __int128 v663;
  int8x16_t *v664;
  unint64_t v665;
  _QWORD *v666;
  unint64_t v667;
  std::string *v668;
  int32x2_t v669;
  __int128 v670;
  double v671;
  int8x16_t *v672;
  unint64_t v673;
  int v674;
  float v675;
  unint64_t v676;
  std::string *v677;
  int32x2_t v678;
  __int128 v679;
  int8x16_t *v680;
  unint64_t v681;
  std::string *v682;
  int32x2_t v683;
  __int128 v684;
  int8x16_t *v685;
  unint64_t v686;
  unint64_t v687;
  std::string *v688;
  int32x2_t v689;
  __int128 v690;
  int8x16_t *v691;
  unint64_t v692;
  std::string *v693;
  int32x2_t v694;
  __int128 v695;
  int8x16_t *v696;
  unint64_t v697;
  std::string *v698;
  double v699;
  __int128 v700;
  int8x16_t *v701;
  unint64_t v702;
  uint64_t v703;
  std::chrono::steady_clock::time_point v704;
  std::string *v705;
  double v706;
  __int128 v707;
  int8x16_t *v708;
  unint64_t v709;
  double v710;
  __int128 v711;
  uint64_t v712;
  uint64_t *v713;
  uint64_t v714;
  uint64_t v715;
  unint64_t v716;
  float v717;
  unsigned __int8 v718;
  int v719;
  int v720;
  unint64_t v721;
  int v722;
  int v723;
  int v724;
  uint64_t v727;
  int8x16_t *v728;
  unint64_t v729;
  unint64_t v730;
  std::string *v731;
  __int128 v732;
  std::string *v733;
  std::string::size_type v734;
  std::string *v735;
  std::string::size_type v736;
  std::string *v737;
  std::string::size_type v738;
  std::string *v739;
  std::string::size_type v740;
  std::string *v741;
  std::string::size_type v742;
  std::string *v743;
  std::string::size_type v744;
  char v745;
  const std::string::value_type *v746;
  std::string::size_type v747;
  int v748;
  std::string *v749;
  std::string::size_type v750;
  std::string *v751;
  std::string::size_type v752;
  char v753;
  uint64_t v754;
  int8x16_t *v755;
  unint64_t v756;
  uint64_t v757;
  uint64_t v758;
  uint64_t v759;
  uint64_t v760;
  uint64_t v761;
  float v762;
  float v763;
  void *v764;
  unint64_t v765;
  char *v766;
  _QWORD *v767;
  _QWORD *v768;
  char *v769;
  char *v770;
  unint64_t v771;
  char *v772;
  uint64_t v773;
  unint64_t v774;
  uint64_t v775;
  unint64_t v776;
  _BYTE *v777;
  _QWORD *v778;
  unint64_t v779;
  char *v780;
  uint64_t v781;
  uint64_t v782;
  _OWORD *v783;
  char *v784;
  uint64_t v785;
  __int128 v786;
  unint64_t *v787;
  unint64_t *v788;
  uint64_t v789;
  float v790;
  int v791;
  __int8 v792;
  double v793;
  int32x2_t v794;
  int8x16_t *v795;
  unint64_t v796;
  std::string *v797;
  double v798;
  __int128 v799;
  int8x16_t *v800;
  unint64_t v801;
  std::string *v802;
  double v803;
  __int128 v804;
  int8x16_t *v805;
  unint64_t v806;
  ggl::CommandBuffer *v807;
  _QWORD *v808;
  id *v809;
  uint64_t v810;
  unint64_t v811;
  float v812;
  md::mun::MuninOverlayRenderLayer *v813;
  std::string v814;
  std::string v815;
  unint64_t v816;
  __int16 v817;
  float32x4_t *v818;
  std::string v819;
  uint64_t v820;
  __int128 v821;
  __int128 v822;
  __int128 v823;
  __int128 v824;
  __int128 v825;
  uint64_t v826;
  uint64_t v827;
  std::string v828;
  uint64_t v829;
  double v830;
  double v831;
  double v832;
  uint64_t v833;
  double v834;
  double v835;
  double v836;
  uint64_t v837;
  std::string v838;
  uint64_t v839;
  std::string v840[5];
  _BYTE v841[24];
  __int128 v842;
  uint64_t v843;
  __int128 v844;
  __int128 v845;
  double v846;
  uint64_t v847;
  uint64_t v848;
  unint64_t v849;
  double v850;
  uint64_t v851;
  std::string v852;
  __int128 v853;
  double v854;
  double v855;
  __int128 v856;
  __int128 v857;
  __int128 v858;
  double v859;
  id v860;
  uint64_t v861;
  id v862[2];
  _BYTE __p[32];
  float64x2_t v864;
  float64x2_t v865;
  float64x2_t v866;
  float64x2_t v867;
  float64x2_t v868;
  float64x2_t v869;
  _BYTE v870[24];
  _BYTE *v871;
  uint64_t v872;

  v2 = (const md::LayoutContext *)a2;
  v872 = *MEMORY[0x1E0C80C00];
  v861 = 0;
  v4 = a2[1];
  v5 = (int8x8_t)v4[1];
  if (!*(_QWORD *)&v5)
    goto LABEL_47;
  v6 = (uint8x8_t)vcnt_s8(v5);
  v6.i16[0] = vaddlv_u8(v6);
  if (v6.u32[0] > 1uLL)
  {
    v7 = 0xC83717EF586624DCLL;
    if (*(_QWORD *)&v5 <= 0xC83717EF586624DCLL)
      v7 = 0xC83717EF586624DCLL % *(_QWORD *)&v5;
  }
  else
  {
    v7 = (*(_QWORD *)&v5 - 1) & 0xC83717EF586624DCLL;
  }
  v8 = *v4;
  v9 = *(_QWORD **)(v8 + 8 * v7);
  if (!v9)
    goto LABEL_24;
  v10 = (_QWORD *)*v9;
  if (!v10)
    goto LABEL_24;
  if (v6.u32[0] < 2uLL)
  {
    while (1)
    {
      v12 = v10[1];
      if (v12 == 0xC83717EF586624DCLL)
      {
        if (v10[2] == 0xC83717EF586624DCLL)
          goto LABEL_22;
      }
      else if ((v12 & (*(_QWORD *)&v5 - 1)) != v7)
      {
        goto LABEL_24;
      }
      v10 = (_QWORD *)*v10;
      if (!v10)
        goto LABEL_24;
    }
  }
  while (1)
  {
    v11 = v10[1];
    if (v11 == 0xC83717EF586624DCLL)
      break;
    if (v11 >= *(_QWORD *)&v5)
      v11 %= *(_QWORD *)&v5;
    if (v11 != v7)
      goto LABEL_24;
LABEL_11:
    v10 = (_QWORD *)*v10;
    if (!v10)
      goto LABEL_24;
  }
  if (v10[2] != 0xC83717EF586624DCLL)
    goto LABEL_11;
LABEL_22:
  v13 = v10[5];
  if (*(_QWORD *)(v13 + 8) == 0xC83717EF586624DCLL)
  {
    v14 = *(_QWORD *)(v13 + 32);
    goto LABEL_25;
  }
LABEL_24:
  v14 = 0;
LABEL_25:
  v861 = v14;
  if (v6.u32[0] > 1uLL)
  {
    v15 = 0xA60DDA5A69582425;
    if (*(_QWORD *)&v5 <= 0xA60DDA5A69582425)
      v15 = 0xA60DDA5A69582425 % *(_QWORD *)&v5;
  }
  else
  {
    v15 = (*(_QWORD *)&v5 - 1) & 0xA60DDA5A69582425;
  }
  v16 = *(_QWORD **)(v8 + 8 * v15);
  if (!v16)
    goto LABEL_47;
  v17 = (_QWORD *)*v16;
  if (!v17)
    goto LABEL_47;
  if (v6.u32[0] < 2uLL)
  {
    v18 = *(_QWORD *)&v5 - 1;
    while (1)
    {
      v20 = v17[1];
      if (v20 == 0xA60DDA5A69582425)
      {
        if (v17[2] == 0xA60DDA5A69582425)
          goto LABEL_45;
      }
      else if ((v20 & v18) != v15)
      {
        goto LABEL_47;
      }
      v17 = (_QWORD *)*v17;
      if (!v17)
        goto LABEL_47;
    }
  }
  while (2)
  {
    v19 = v17[1];
    if (v19 != 0xA60DDA5A69582425)
    {
      if (v19 >= *(_QWORD *)&v5)
        v19 %= *(_QWORD *)&v5;
      if (v19 != v15)
        goto LABEL_47;
      goto LABEL_34;
    }
    if (v17[2] != 0xA60DDA5A69582425)
    {
LABEL_34:
      v17 = (_QWORD *)*v17;
      if (!v17)
        goto LABEL_47;
      continue;
    }
    break;
  }
LABEL_45:
  v21 = v17[5];
  if (*(_QWORD *)(v21 + 8) == 0xA60DDA5A69582425)
  {
    v22 = *(id **)(v21 + 32);
    goto LABEL_48;
  }
LABEL_47:
  v22 = 0;
LABEL_48:
  +[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings");
  v860 = (id)objc_claimAutoreleasedReturnValue();
  v813 = this;
  if (!objc_msgSend(v860, "muninDebugLayer"))
    goto LABEL_614;
  v862[0] = *v22;
  v23 = *(id *)v2;
  objc_msgSend(v23, "size");
  v809 = (id *)v2;
  if (v24 == *((double *)this + 8))
  {
    v25 = *(id *)v2;
    objc_msgSend(v25, "size");
    v27 = v26;
    v28 = *((double *)this + 9);

    if (v27 == v28)
      goto LABEL_202;
  }
  else
  {

  }
  v29 = (_QWORD *)*((_QWORD *)v2 + 1);
  v30 = (int8x8_t)v29[1];
  if (!*(_QWORD *)&v30)
    goto LABEL_201;
  v31 = (uint8x8_t)vcnt_s8(v30);
  v31.i16[0] = vaddlv_u8(v31);
  if (v31.u32[0] > 1uLL)
  {
    v32 = 0xA60DDA5A69582425;
    if (*(_QWORD *)&v30 <= 0xA60DDA5A69582425)
      v32 = 0xA60DDA5A69582425 % *(_QWORD *)&v30;
  }
  else
  {
    v32 = (*(_QWORD *)&v30 - 1) & 0xA60DDA5A69582425;
  }
  v33 = *(_QWORD **)(*v29 + 8 * v32);
  if (!v33)
    goto LABEL_201;
  v34 = (_QWORD *)*v33;
  if (!v34)
    goto LABEL_201;
  if (v31.u32[0] < 2uLL)
  {
    v35 = *(_QWORD *)&v30 - 1;
    while (1)
    {
      v37 = v34[1];
      if (v37 == 0xA60DDA5A69582425)
      {
        if (v34[2] == 0xA60DDA5A69582425)
          goto LABEL_74;
      }
      else if ((v37 & v35) != v32)
      {
        goto LABEL_201;
      }
      v34 = (_QWORD *)*v34;
      if (!v34)
        goto LABEL_201;
    }
  }
  while (2)
  {
    v36 = v34[1];
    if (v36 != 0xA60DDA5A69582425)
    {
      if (v36 >= *(_QWORD *)&v30)
        v36 %= *(_QWORD *)&v30;
      if (v36 != v32)
        goto LABEL_201;
      goto LABEL_63;
    }
    if (v34[2] != 0xA60DDA5A69582425)
    {
LABEL_63:
      v34 = (_QWORD *)*v34;
      if (!v34)
        goto LABEL_201;
      continue;
    }
    break;
  }
LABEL_74:
  v38 = v34[5];
  if (*(_QWORD *)(v38 + 8) == 0xA60DDA5A69582425)
  {
    v39 = *(id **)(v38 + 32);
    if (v39)
    {
      v40 = *v39;
      v41 = *(_QWORD *)(objc_msgSend(v40, "device") + 24);
      v43 = *(_QWORD *)(v41 + 16);
      v42 = *(_QWORD *)(v41 + 24);
      v828.__r_.__value_.__r.__words[0] = v43;
      v828.__r_.__value_.__l.__size_ = v42;
      if (v42)
      {
        v44 = (unint64_t *)(v42 + 8);
        do
          v45 = __ldxr(v44);
        while (__stxr(v45 + 1, v44));
      }
      v46 = *(id *)v2;
      v47 = (_OWORD *)objc_msgSend(v46, "format");
      *(_OWORD *)&v840[0].__r_.__value_.__l.__data_ = *v47;
      *(_OWORD *)&v840[0].__r_.__value_.__r.__words[2] = v47[1];

      v48 = *(_QWORD *)(v43 + 80);
      v49 = *(std::__shared_weak_count **)(v48 + 400);
      *(_QWORD *)&v856 = *(_QWORD *)(v48 + 392);
      *((_QWORD *)&v856 + 1) = v49;
      if (v49)
      {
        p_shared_owners = (unint64_t *)&v49->__shared_owners_;
        do
          v51 = __ldxr(p_shared_owners);
        while (__stxr(v51 + 1, p_shared_owners));
      }
      v842 = 0uLL;
      LODWORD(v843) = 0;
      v841[0] = 1;
      *(_OWORD *)&v841[4] = xmmword_19FFB35B0;
      *(_DWORD *)&v841[20] = 7;
      BYTE4(v843) = 15;
      v52 = operator new(0x198uLL);
      v52[1] = 0;
      v52[2] = 0;
      *v52 = &off_1E42E4508;
      *(_OWORD *)__p = *(_OWORD *)&v840[0].__r_.__value_.__l.__data_;
      *(_OWORD *)&__p[16] = *(_OWORD *)&v840[0].__r_.__value_.__r.__words[2];
      v819.__r_.__value_.__r.__words[0] = ggl::Debug::BasePipelineState::BasePipelineState((uint64_t)(v52 + 3), &v856, (uint64_t)v841, __p);
      v819.__r_.__value_.__l.__size_ = (std::string::size_type)v52;
      if (v49)
      {
        v53 = (unint64_t *)&v49->__shared_owners_;
        do
          v54 = __ldaxr(v53);
        while (__stlxr(v54 - 1, v53));
        if (!v54)
        {
          ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
          std::__shared_weak_count::__release_weak(v49);
        }
      }
      v55 = operator new();
      v56 = operator new(0xE8uLL);
      v56[1] = 0;
      v56[2] = 0;
      *v56 = &off_1E42E2390;
      v57 = ggl::BufferData::BufferData((uint64_t)(v56 + 3), qword_1EE55CAC0, 2, 1, 6, 1);
      v56[28] = ggl::Debug::Style::reflection(void)::reflection;
      v56[3] = &off_1E42B9850;
      *(_QWORD *)v841 = v57;
      *(_QWORD *)&v841[8] = v56;
      v58 = operator new(0xE8uLL);
      v58[1] = 0;
      v58[2] = 0;
      *v58 = &off_1E42E2358;
      v59 = ggl::BufferData::BufferData((uint64_t)(v58 + 3), qword_1EE55CB00, 2, 1, 6, 1);
      v58[28] = ggl::Debug::View::reflection(void)::reflection;
      v58[3] = &off_1E42B9830;
      *(_QWORD *)__p = v59;
      *(_QWORD *)&__p[8] = v58;
      v60 = (std::__shared_weak_count *)operator new(0xE8uLL);
      v60->__shared_owners_ = 0;
      v61 = (unint64_t *)&v60->__shared_owners_;
      v60->__shared_weak_owners_ = 0;
      v60->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E22E8;
      v62 = ggl::BufferData::BufferData((uint64_t)&v60[1], qword_1EE54AFA0, 2, 1, 6, 1);
      v60[9].__shared_owners_ = (uint64_t)ggl::Tile::Transform::reflection(void)::reflection;
      v60[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B97F0;
      *(_QWORD *)&v856 = v62;
      *((_QWORD *)&v856 + 1) = v60;
      ggl::Debug::BasePipelineSetup::BasePipelineSetup((_QWORD *)v55, (uint64_t)v819.__r_.__value_.__l.__data_, (std::__shared_weak_count *)v819.__r_.__value_.__l.__size_, (uint64_t *)v841, (uint64_t *)__p, (uint64_t *)&v856);
      do
        v63 = __ldaxr(v61);
      while (__stlxr(v63 - 1, v61));
      if (!v63)
      {
        ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
        std::__shared_weak_count::__release_weak(v60);
      }
      v64 = *(std::__shared_weak_count **)&__p[8];
      if (*(_QWORD *)&__p[8])
      {
        v65 = (unint64_t *)(*(_QWORD *)&__p[8] + 8);
        do
          v66 = __ldaxr(v65);
        while (__stlxr(v66 - 1, v65));
        if (!v66)
        {
          ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
          std::__shared_weak_count::__release_weak(v64);
        }
      }
      v67 = *(std::__shared_weak_count **)&v841[8];
      if (*(_QWORD *)&v841[8])
      {
        v68 = (unint64_t *)(*(_QWORD *)&v841[8] + 8);
        do
          v69 = __ldaxr(v68);
        while (__stlxr(v69 - 1, v68));
        if (!v69)
        {
          ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
          std::__shared_weak_count::__release_weak(v67);
        }
      }
      v70 = **(_QWORD **)(v55 + 64);
      v864.f64[1] = 0.0;
      *(_QWORD *)&__p[8] = 0;
      *(_QWORD *)__p = 0;
      v71 = *(_QWORD *)(v70 + 8);
      *(_QWORD *)v841 = 0;
      *(_QWORD *)&v841[8] = v70;
      *(_QWORD *)&v841[16] = 0;
      *(_QWORD *)&v842 = v71;
      WORD4(v842) = 1;
      if (v71)
        v72 = *(_QWORD *)(v70 + 72);
      else
        v72 = 0;
      v843 = v72;
      ggl::BufferMemory::operator=((uint64_t *)__p, (uint64_t)v841);
      ggl::BufferMemory::~BufferMemory((ggl::BufferMemory *)v841);
      **(_OWORD **)&v864.f64[1] = xmmword_19FFB50C0;
      ggl::BufferMemory::~BufferMemory((ggl::BufferMemory *)__p);
      v73 = *(_QWORD *)(*(_QWORD *)(v55 + 64) + 16);
      v864.f64[1] = 0.0;
      *(_QWORD *)&__p[8] = 0;
      *(_QWORD *)__p = 0;
      v74 = *(_QWORD *)(v73 + 8);
      *(_QWORD *)v841 = 0;
      *(_QWORD *)&v841[8] = v73;
      *(_QWORD *)&v841[16] = 0;
      *(_QWORD *)&v842 = v74;
      WORD4(v842) = 1;
      if (v74)
        v75 = *(_QWORD *)(v73 + 72);
      else
        v75 = 0;
      v843 = v75;
      ggl::BufferMemory::operator=((uint64_t *)__p, (uint64_t)v841);
      ggl::BufferMemory::~BufferMemory((ggl::BufferMemory *)v841);
      v76 = v864.f64[1];
      **(_DWORD **)&v864.f64[1] = 1065353216;
      *(_QWORD *)(*(_QWORD *)&v76 + 12) = 0;
      *(_QWORD *)(*(_QWORD *)&v76 + 4) = 0;
      *(_DWORD *)(*(_QWORD *)&v76 + 20) = 1065353216;
      *(_QWORD *)(*(_QWORD *)&v76 + 24) = 0;
      *(_QWORD *)(*(_QWORD *)&v76 + 32) = 0;
      *(_DWORD *)(*(_QWORD *)&v76 + 40) = 1065353216;
      *(_QWORD *)(*(_QWORD *)&v76 + 52) = 0;
      *(_QWORD *)(*(_QWORD *)&v76 + 44) = 0;
      *(_DWORD *)(*(_QWORD *)&v76 + 60) = 1065353216;
      ggl::BufferMemory::~BufferMemory((ggl::BufferMemory *)__p);
      v77 = operator new(0xF8uLL);
      v77[1] = 0;
      v78 = v77 + 1;
      v77[2] = 0;
      *v77 = &off_1E42DF8B0;
      ggl::BufferData::BufferData((uint64_t)(v77 + 3), 16, 0, 0, 7, 4);
      v77[29] = "quad vertex data";
      v77[30] = &ggl::CommonMesh::bufferPos4Reflection;
      v77[3] = &off_1E42B7520;
      v77[28] = &unk_1E42B7540;
      *(_QWORD *)&v856 = v77 + 3;
      *((_QWORD *)&v856 + 1) = v77;
      v79 = operator new(0xF8uLL);
      v79[1] = 0;
      v80 = v79 + 1;
      v79[2] = 0;
      *v79 = &off_1E42DF1E8;
      ggl::BufferData::BufferData((uint64_t)(v79 + 3), 2, 1, 0, 7, 6);
      *((_DWORD *)v79 + 60) = 0;
      v79[3] = &off_1E42B6B88;
      v79[4] = 2;
      v79[28] = &unk_1E42B6BA8;
      v79[29] = "quad index data";
      v852.__r_.__value_.__r.__words[0] = (std::string::size_type)(v79 + 3);
      v852.__r_.__value_.__l.__size_ = (std::string::size_type)v79;
      (*(void (**)(std::string *__return_ptr))(**(_QWORD **)(objc_msgSend(v40, "device") + 8) + 24))(&v814);
      *(_QWORD *)v841 = MEMORY[0x1E0C809B0];
      *(_QWORD *)&v841[8] = 3321888768;
      *(_QWORD *)&v841[16] = ___ZN2md3mun23MuninOverlayRenderLayer20updateDebugDrawablesERKNS_13LayoutContextE_block_invoke;
      *(_QWORD *)&v842 = &__block_descriptor_64_ea8_32c80_ZTSNSt3__110shared_ptrIN3ggl15VertexDataTypedINS1_10CommonMesh10BufferPos4EEEEE48c51_ZTSNSt3__110shared_ptrIN3ggl14IndexDataTypedItEEEE_e30_v16__0__ResourceAccessor_____8l;
      *((_QWORD *)&v842 + 1) = v77 + 3;
      v843 = (uint64_t)v77;
      do
        v81 = __ldxr(v78);
      while (__stxr(v81 + 1, v78));
      *(_QWORD *)&v844 = v79 + 3;
      *((_QWORD *)&v844 + 1) = v79;
      do
        v82 = __ldxr(v80);
      while (__stxr(v82 + 1, v80));
      *(_QWORD *)&__p[24] = 0;
      *(_QWORD *)__p = &off_1E42C7118;
      *(_QWORD *)&__p[8] = MEMORY[0x1A1AF5730](v841);
      *(_QWORD *)&__p[24] = __p;
      *(_OWORD *)&v815.__r_.__value_.__l.__data_ = 0uLL;
      (*(void (**)(std::string::size_type, _BYTE *, std::string *))(*(_QWORD *)v814.__r_.__value_.__l.__data_
                                                                             + 16))(v814.__r_.__value_.__r.__words[0], __p, &v815);
      size = (std::__shared_weak_count *)v815.__r_.__value_.__l.__size_;
      if (v815.__r_.__value_.__l.__size_)
      {
        v84 = (unint64_t *)(v815.__r_.__value_.__l.__size_ + 8);
        do
          v85 = __ldaxr(v84);
        while (__stlxr(v85 - 1, v84));
        if (!v85)
        {
          ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
          std::__shared_weak_count::__release_weak(size);
        }
      }
      v86 = *(_QWORD **)&__p[24];
      if (*(_BYTE **)&__p[24] == __p)
      {
        v87 = 4;
        v86 = __p;
LABEL_120:
        (*(void (**)(void))(*v86 + 8 * v87))();
      }
      else if (*(_QWORD *)&__p[24])
      {
        v87 = 5;
        goto LABEL_120;
      }
      ggl::Loader::~Loader((ggl::Loader *)&v814);
      v88 = (std::__shared_weak_count *)operator new(0xA8uLL);
      v88->__shared_owners_ = 0;
      v89 = (unint64_t *)&v88->__shared_owners_;
      v88->__shared_weak_owners_ = 0;
      v88->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DE5E0;
      std::construct_at[abi:nn180100]<ggl::CommonMesh::Pos4Mesh,char const(&)[17],std::shared_ptr<ggl::VertexDataTyped<ggl::CommonMesh::BufferPos4>> &,std::shared_ptr<ggl::IndexDataTyped<unsigned short>> &,ggl::CommonMesh::Pos4Mesh*>((uint64_t)&v88[1], v856, *((std::__shared_weak_count **)&v856 + 1), (uint64_t *)&v852);
      *(_QWORD *)__p = v88 + 1;
      *(_QWORD *)&__p[8] = v88;
      v90 = (int64x2_t *)operator new();
      v91 = *((_QWORD *)this + 37);
      v90->i64[0] = (uint64_t)&off_1E42B59B0;
      v90[1].i64[0] = (uint64_t)"";
      v90[1].i64[1] = v91;
      v90[2].i64[0] = v55;
      v90[2].i32[2] = 0;
      v90[3].i64[0] = 0;
      v90[3].i32[2] = 1065353216;
      v90[4].i64[0] = (uint64_t)&v88[1];
      v90[4].i64[1] = 0;
      v90[5].i64[0] = 0;
      v90[5].i64[1] = 0;
      v90[6] = vdupq_n_s64(1uLL);
      v90[7].i64[0] = 0;
      v92 = (_QWORD *)operator new();
      do
        v93 = __ldxr(v89);
      while (__stxr(v93 + 1, v89));
      *v92 = v90;
      v92[1] = v55;
      v92[2] = v88 + 1;
      v92[3] = v88;
      do
        v94 = __ldxr(v89);
      while (__stxr(v94 + 1, v89));
      v95 = (uint64_t *)*((_QWORD *)this + 10);
      *((_QWORD *)this + 10) = v92;
      v2 = (const md::LayoutContext *)v809;
      if (v95)
      {
        v96 = (std::__shared_weak_count *)v95[3];
        if (v96)
        {
          v97 = (unint64_t *)&v96->__shared_owners_;
          do
            v98 = __ldaxr(v97);
          while (__stlxr(v98 - 1, v97));
          if (!v98)
          {
            ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
            std::__shared_weak_count::__release_weak(v96);
          }
        }
        v99 = v95[1];
        v95[1] = 0;
        if (v99)
          (*(void (**)(uint64_t))(*(_QWORD *)v99 + 8))(v99);
        v100 = *v95;
        *v95 = 0;
        if (v100)
          (*(void (**)(uint64_t))(*(_QWORD *)v100 + 8))(v100);
        MEMORY[0x1A1AF4E00](v95, 0x20C40DC1BFBCFLL);
      }
      do
        v101 = __ldaxr(v89);
      while (__stlxr(v101 - 1, v89));
      if (!v101)
      {
        ((void (*)(std::__shared_weak_count *))v88->__on_zero_shared)(v88);
        std::__shared_weak_count::__release_weak(v88);
      }
      v102 = *(std::__shared_weak_count **)&__p[8];
      if (*(_QWORD *)&__p[8])
      {
        v103 = (unint64_t *)(*(_QWORD *)&__p[8] + 8);
        do
          v104 = __ldaxr(v103);
        while (__stlxr(v104 - 1, v103));
        if (!v104)
        {
          ((void (*)(std::__shared_weak_count *))v102->__on_zero_shared)(v102);
          std::__shared_weak_count::__release_weak(v102);
        }
      }
      v105 = (std::__shared_weak_count *)*((_QWORD *)&v844 + 1);
      if (*((_QWORD *)&v844 + 1))
      {
        v106 = (unint64_t *)(*((_QWORD *)&v844 + 1) + 8);
        do
          v107 = __ldaxr(v106);
        while (__stlxr(v107 - 1, v106));
        if (!v107)
        {
          ((void (*)(std::__shared_weak_count *))v105->__on_zero_shared)(v105);
          std::__shared_weak_count::__release_weak(v105);
        }
      }
      v108 = (std::__shared_weak_count *)v843;
      if (v843)
      {
        v109 = (unint64_t *)(v843 + 8);
        do
          v110 = __ldaxr(v109);
        while (__stlxr(v110 - 1, v109));
        if (!v110)
        {
          ((void (*)(std::__shared_weak_count *))v108->__on_zero_shared)(v108);
          std::__shared_weak_count::__release_weak(v108);
        }
      }
      v111 = (std::__shared_weak_count *)v852.__r_.__value_.__l.__size_;
      if (v852.__r_.__value_.__l.__size_)
      {
        v112 = (unint64_t *)(v852.__r_.__value_.__l.__size_ + 8);
        do
          v113 = __ldaxr(v112);
        while (__stlxr(v113 - 1, v112));
        if (!v113)
        {
          ((void (*)(std::__shared_weak_count *))v111->__on_zero_shared)(v111);
          std::__shared_weak_count::__release_weak(v111);
        }
      }
      v114 = (std::__shared_weak_count *)*((_QWORD *)&v856 + 1);
      if (*((_QWORD *)&v856 + 1))
      {
        v115 = (unint64_t *)(*((_QWORD *)&v856 + 1) + 8);
        do
          v116 = __ldaxr(v115);
        while (__stlxr(v116 - 1, v115));
        if (!v116)
        {
          ((void (*)(std::__shared_weak_count *))v114->__on_zero_shared)(v114);
          std::__shared_weak_count::__release_weak(v114);
        }
      }
      v117 = (std::__shared_weak_count *)v819.__r_.__value_.__l.__size_;
      if (v819.__r_.__value_.__l.__size_)
      {
        v118 = (unint64_t *)(v819.__r_.__value_.__l.__size_ + 8);
        do
          v119 = __ldaxr(v118);
        while (__stlxr(v119 - 1, v118));
        if (!v119)
        {
          ((void (*)(std::__shared_weak_count *))v117->__on_zero_shared)(v117);
          std::__shared_weak_count::__release_weak(v117);
        }
      }
      v120 = operator new(0x1CuLL);
      *(_QWORD *)&__p[16] = (char *)v120 + 28;
      *(_OWORD *)v120 = xmmword_19FFB34C0;
      __asm { FMOV            V0.2S, #1.0 }
      v120[2] = _D0;
      *((_DWORD *)v120 + 6) = 1065353216;
      *(_QWORD *)__p = v120;
      *(_QWORD *)&__p[8] = (char *)v120 + 28;
      v126 = (uint64_t *)*((_QWORD *)this + 11);
      *((_QWORD *)this + 11) = PointsDrawable;
      if (v126)
      {
        v127 = (std::__shared_weak_count *)v126[3];
        if (v127)
        {
          v128 = (unint64_t *)&v127->__shared_owners_;
          do
            v129 = __ldaxr(v128);
          while (__stlxr(v129 - 1, v128));
          if (!v129)
          {
            ((void (*)(std::__shared_weak_count *))v127->__on_zero_shared)(v127);
            std::__shared_weak_count::__release_weak(v127);
          }
        }
        v130 = v126[1];
        v126[1] = 0;
        if (v130)
          (*(void (**)(uint64_t))(*(_QWORD *)v130 + 8))(v130);
        v131 = *v126;
        *v126 = 0;
        if (v131)
          (*(void (**)(uint64_t))(*(_QWORD *)v131 + 8))(v131);
        MEMORY[0x1A1AF4E00](v126, 0x20C40DC1BFBCFLL);
      }
      if (*(_QWORD *)__p)
      {
        *(_QWORD *)&__p[8] = *(_QWORD *)__p;
        operator delete(*(void **)__p);
      }
      v132 = operator new(0x1CuLL);
      *(_QWORD *)&__p[16] = (char *)v132 + 28;
      v132[1] = 0;
      v132[2] = 0;
      *v132 = 0;
      *((_DWORD *)v132 + 6) = 1065353216;
      *(_QWORD *)__p = v132;
      *(_QWORD *)&__p[8] = (char *)v132 + 28;
      v134 = (uint64_t *)*((_QWORD *)this + 29);
      *((_QWORD *)this + 29) = v133;
      if (v134)
      {
        v135 = (std::__shared_weak_count *)v134[3];
        if (v135)
        {
          v136 = (unint64_t *)&v135->__shared_owners_;
          do
            v137 = __ldaxr(v136);
          while (__stlxr(v137 - 1, v136));
          if (!v137)
          {
            ((void (*)(std::__shared_weak_count *))v135->__on_zero_shared)(v135);
            std::__shared_weak_count::__release_weak(v135);
          }
        }
        v138 = v134[1];
        v134[1] = 0;
        if (v138)
          (*(void (**)(uint64_t))(*(_QWORD *)v138 + 8))(v138);
        v139 = *v134;
        *v134 = 0;
        if (v139)
          (*(void (**)(uint64_t))(*(_QWORD *)v139 + 8))(v139);
        MEMORY[0x1A1AF4E00](v134, 0x20C40DC1BFBCFLL);
      }
      if (*(_QWORD *)__p)
      {
        *(_QWORD *)&__p[8] = *(_QWORD *)__p;
        operator delete(*(void **)__p);
      }
      v140 = (std::__shared_weak_count *)v828.__r_.__value_.__l.__size_;
      if (v828.__r_.__value_.__l.__size_)
      {
        v141 = (unint64_t *)(v828.__r_.__value_.__l.__size_ + 8);
        do
          v142 = __ldaxr(v141);
        while (__stlxr(v142 - 1, v141));
        if (!v142)
        {
          ((void (*)(std::__shared_weak_count *))v140->__on_zero_shared)(v140);
          std::__shared_weak_count::__release_weak(v140);
        }
      }

    }
  }
LABEL_201:
  v143 = *(id *)v2;
  objc_msgSend(v143, "size");
  *((_QWORD *)this + 8) = v144;
  *((_QWORD *)this + 9) = v145;

LABEL_202:
  v146 = *(_QWORD **)(*(_QWORD *)(*((_QWORD *)this + 6) + 24) + 8);
  v147 = v146[3];
  v148 = v146[4];
  v149 = v148 - v147;
  if (v148 == v147)
    goto LABEL_209;
  v150 = 0;
  v151 = v149 >> 3;
  while (1)
  {
    v152 = *(_QWORD *)(v147 + 8 * v150);
    if (!*(_BYTE *)v152)
    {
      v153 = *(_QWORD *)(v152 + 8);
      v154 = v146[15];
      if (v153 < (v146[16] - v154) >> 3)
        break;
    }
    if (++v150 >= v151)
      goto LABEL_209;
  }
  v155 = *(_QWORD *)(v154 + 8 * v153);
  if (!v155)
LABEL_209:
    v156 = 0;
  else
    v156 = *(_QWORD *)(*(_QWORD *)(v155 + 24) + 8);
  ggl::CommandBuffer::pushRenderItem(v156, **((ggl::RenderItem ***)this + 10));
  v157 = (_QWORD *)*((_QWORD *)v2 + 1);
  v158 = v157[1];
  if ((v158 & (v158 - 1)) != 0)
  {
    v160 = 0x1AF456233693CD46;
    if (v158 <= 0x1AF456233693CD46)
      v160 = 0x1AF456233693CD46 % v158;
    v159 = *(_QWORD **)(*v157 + 8 * v160);
    do
    {
      do
        v159 = (_QWORD *)*v159;
      while (v159[1] != 0x1AF456233693CD46);
    }
    while (v159[2] != 0x1AF456233693CD46);
  }
  else
  {
    v159 = *(_QWORD **)(*v157 + 8 * ((v158 - 1) & 0x1AF456233693CD46));
    do
    {
      do
        v159 = (_QWORD *)*v159;
      while (v159[1] != 0x1AF456233693CD46);
    }
    while (v159[2] != 0x1AF456233693CD46);
  }
  v161 = *(double **)(v159[5] + 32);
  v162 = v161[62];
  v163 = v161[63];
  v164 = v161[64];
  v165 = v161[65];
  v166 = v161[66];
  v167 = v161[67];
  v168 = v161[68];
  v169 = 1.0 / sqrt(v162 * v162 + v163 * v163 + v164 * v164);
  v170 = v169 * v162;
  v171 = v169 * v163;
  v172 = v169 * v164;
  v173 = v167 * (v165 + v165) + v168 * (v166 + v166);
  v174 = -(v168 * (v165 + v165) - (v166 + v166) * v167);
  v175 = 1.0 - ((v166 + v166) * v166 + (v165 + v165) * v165);
  v176 = -(v174 * v172 - v175 * v171);
  v177 = -(v170 * v175 - v173 * v172);
  v178 = -(v173 * v171 - v174 * v170);
  v179 = 1.0 / sqrt(v176 * v176 + v177 * v177 + v178 * v178);
  v180 = v179 * v176;
  v181 = v179 * v177;
  v182 = v179 * v178;
  v183 = -(v179 * v177 * v172 - v179 * v178 * v171);
  v184 = -(v179 * v178 * v170 - v180 * v172);
  v185 = -(v180 * v171 - v181 * v170);
  v186 = v184 + v180 + v172;
  if (v186 <= 0.0)
  {
    if (v180 <= v184 || v180 <= v172)
    {
      v193 = sqrt(v172 + 1.0 - (v184 + v180));
      v194 = 1.0 / (v193 + v193);
      v195 = (v182 + v170) * v194;
      v196 = v171 - (v180 * v171 - v181 * v170);
      v197 = v196 * v194;
      v198 = v193 * 0.5;
      v199 = (v181 - v183) * v194;
      v200 = sqrt(1.0 - (v172 + v180) + v184);
      v201 = 1.0 / (v200 + v200);
      v202 = (v183 + v181) * v201;
      v189 = v200 * 0.5;
      v203 = v196 * v201;
      v191 = (v170 - v182) * v201;
      if (v184 > v172)
        v188 = v202;
      else
        v188 = v195;
      if (v184 > v172)
      {
        v190 = v203;
      }
      else
      {
        v189 = v197;
        v190 = v198;
      }
      if (v184 <= v172)
        v191 = v199;
    }
    else
    {
      v204 = sqrt(v180 + 1.0 - (v172 + v184));
      v205 = v204 + v204;
      v188 = v204 * 0.5;
      v206 = v183 + v181;
      v207 = 1.0 / v205;
      v189 = v206 * (1.0 / v205);
      v190 = (v182 + v170) * v207;
      v191 = (v185 - v171) * v207;
    }
  }
  else
  {
    v187 = 0.5 / sqrt(v186 + 1.0);
    v188 = v187 * (v185 - v171);
    v189 = v187 * (v170 - v182);
    v190 = v187 * (v181 - v183);
    v191 = 0.25 / v187;
  }
  *(double *)&v856 = v162 + v170 * 100.0;
  *((double *)&v856 + 1) = v163 + v171 * 100.0;
  *(double *)&v857 = v164 + v172 * 100.0;
  *((double *)&v857 + 1) = v188;
  *(double *)&v858 = v189;
  *((double *)&v858 + 1) = v190;
  v859 = v191;
  v208 = -(*(double *)&v857 * v189 - *((double *)&v856 + 1) * v190)
       - (*(double *)&v857 * v189
        - *((double *)&v856 + 1) * v190);
  v209 = -(v190 * *(double *)&v856 - *(double *)&v857 * v188) - (v190 * *(double *)&v856 - *(double *)&v857 * v188);
  v210 = -(*((double *)&v856 + 1) * v188 - v189 * *(double *)&v856)
       - (*((double *)&v856 + 1) * v188
        - v189 * *(double *)&v856);
  *(double *)&v852.__r_.__value_.__l.__data_ = -(*(double *)&v856 + v209 * v190 + v208 * v191 - v210 * v189);
  *(double *)&v852.__r_.__value_.__l.__size_ = -(*((double *)&v856 + 1) + v209 * v191 + v210 * v188 - v208 * v190);
  *(double *)&v852.__r_.__value_.__r.__words[2] = -(*(double *)&v857 + v208 * v189 + v210 * v191 - v209 * v188);
  *(double *)&v853 = -v188;
  *((double *)&v853 + 1) = -v189;
  v854 = -v190;
  v855 = v191;
  v211 = v157[1];
  v807 = (ggl::CommandBuffer *)v156;
  if ((v211 & (v211 - 1)) != 0)
  {
    v213 = 0x1AF456233693CD46;
    if (v211 <= 0x1AF456233693CD46)
      v213 = 0x1AF456233693CD46 % v211;
    v212 = *(_QWORD **)(*v157 + 8 * v213);
    do
    {
      do
        v212 = (_QWORD *)*v212;
      while (v212[1] != 0x1AF456233693CD46);
    }
    while (v212[2] != 0x1AF456233693CD46);
  }
  else
  {
    v212 = *(_QWORD **)(*v157 + 8 * ((v211 - 1) & 0x1AF456233693CD46));
    do
    {
      do
        v212 = (_QWORD *)*v212;
      while (v212[1] != 0x1AF456233693CD46);
    }
    while (v212[2] != 0x1AF456233693CD46);
  }
  v214 = *(double *)(*(_QWORD *)(v212[5] + 32) + 480);
  v215 = *(id *)v2;
  objc_msgSend(v215, "size");
  v217 = v216;
  objc_msgSend(*(id *)v2, "size");
  v219 = v218;

  v220 = *((_QWORD *)v2 + 4);
  v221 = (std::__shared_weak_count *)*((_QWORD *)v2 + 5);
  if (v221)
  {
    v222 = (unint64_t *)&v221->__shared_owners_;
    do
      v223 = __ldxr(v222);
    while (__stxr(v223 + 1, v222));
  }
  v224 = *(unsigned __int8 *)(v220 + 72);
  *(double *)v841 = (v219 + v219) / (v217 * 190.0);
  *(_OWORD *)&v841[8] = 0u;
  v842 = 0u;
  v843 = 0x3F858ED2308158EDLL;
  v225 = v214 + -1.0;
  if (!v224)
    v225 = 1.0 - v214;
  v844 = 0uLL;
  v845 = 0uLL;
  v846 = v225 * -0.001;
  v848 = 0;
  v847 = 0;
  v849 = 0x8000000000000000;
  v850 = v214;
  v851 = 0x3FF0000000000000;
  if (v221)
  {
    v226 = (unint64_t *)&v221->__shared_owners_;
    do
      v227 = __ldaxr(v226);
    while (__stlxr(v227 - 1, v226));
    if (!v227)
    {
      ((void (*)(std::__shared_weak_count *))v221->__on_zero_shared)(v221);
      std::__shared_weak_count::__release_weak(v221);
    }
  }
  v229 = *(_QWORD *)(v861 + 40);
  v228 = *(_QWORD *)(v861 + 48);
  if (v229 != v228)
  {
    while (*(_BYTE *)v229 != 1)
    {
      v229 += 272;
      if (v229 == v228)
        goto LABEL_258;
    }
    if (*(_BYTE *)(v229 + 128))
    {
      v234 = (void *)*((_QWORD *)this + 40);
      *((_QWORD *)this + 41) = v234;
      v235 = 0x367D6E020E64C149 * ((uint64_t)(*(_QWORD *)(v229 + 144) - *(_QWORD *)(v229 + 136)) >> 3);
      if (v235 > (uint64_t)(*((_QWORD *)this + 42) - (_QWORD)v234) >> 3)
      {
        if (v235 >> 61)
          abort();
        v236 = (char *)operator new(0xB3EB701073260A48 * ((uint64_t)(*(_QWORD *)(v229 + 144) - *(_QWORD *)(v229 + 136)) >> 3));
        *((_QWORD *)this + 40) = v236;
        *((_QWORD *)this + 41) = v236;
        *((_QWORD *)this + 42) = &v236[8 * v235];
        if (v234)
          operator delete(v234);
      }
      v237 = *(_QWORD **)(v229 + 136);
      v238 = *(_QWORD **)(v229 + 144);
      if (v237 != v238)
      {
        v239 = (char *)*((_QWORD *)this + 41);
        while (1)
        {
          v241 = *((_QWORD *)this + 42);
          if ((unint64_t)v239 >= v241)
            break;
          *(_QWORD *)v239 = *v237;
          v240 = v239 + 8;
LABEL_271:
          *((_QWORD *)this + 41) = v240;
          v237 += 249;
          v239 = v240;
          if (v237 == v238)
            goto LABEL_392;
        }
        v242 = (char *)*((_QWORD *)this + 40);
        v243 = (v239 - v242) >> 3;
        v244 = v243 + 1;
        if ((unint64_t)(v243 + 1) >> 61)
          abort();
        v245 = v241 - (_QWORD)v242;
        if (v245 >> 2 > v244)
          v244 = v245 >> 2;
        if ((unint64_t)v245 >= 0x7FFFFFFFFFFFFFF8)
          v246 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v246 = v244;
        if (v246)
        {
          if (v246 >> 61)
LABEL_895:
            std::__throw_bad_array_new_length[abi:nn180100]();
          v247 = operator new(8 * v246);
        }
        else
        {
          v247 = 0;
        }
        v248 = &v247[8 * v243];
        *v248 = *v237;
        v240 = (char *)(v248 + 1);
        if (v239 == v242)
        {
          this = v813;
          goto LABEL_289;
        }
        v249 = v239 - 8 - v242;
        if (v249 < 0x168
          || &v247[v239 - v242 - 8 - (v249 & 0xFFFFFFFFFFFFFFF8)] > &v247[v239 - v242 - 8]
          || &v239[-(v249 & 0xFFFFFFFFFFFFFFF8) - 8] > v239 - 8
          || (unint64_t)(v242 - v247) < 0x20)
        {
          v250 = v239;
          this = v813;
        }
        else
        {
          v252 = (v249 >> 3) + 1;
          v250 = &v239[-8 * (v252 & 0x3FFFFFFFFFFFFFFCLL)];
          v253 = &v247[8 * v243 - 16];
          v254 = v239 - 16;
          v255 = v252 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v256 = *(_OWORD *)v254;
            *(v253 - 1) = *((_OWORD *)v254 - 1);
            *v253 = v256;
            v253 -= 2;
            v254 -= 32;
            v255 -= 4;
          }
          while (v255);
          v248 -= v252 & 0x3FFFFFFFFFFFFFFCLL;
          this = v813;
          if (v252 == (v252 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_289:
            *((_QWORD *)this + 40) = v248;
            *((_QWORD *)this + 41) = v240;
            *((_QWORD *)this + 42) = &v247[8 * v246];
            if (v242)
              operator delete(v242);
            goto LABEL_271;
          }
        }
        do
        {
          v251 = *((_QWORD *)v250 - 1);
          v250 -= 8;
          *--v248 = v251;
        }
        while (v250 != v242);
        goto LABEL_289;
      }
LABEL_392:
      v357 = (uint64_t *)*((_QWORD *)this + 12);
      *((_QWORD *)this + 12) = 0;
      v2 = (const md::LayoutContext *)v809;
      if (v357)
      {
        v358 = (std::__shared_weak_count *)v357[3];
        if (v358)
        {
          v359 = (unint64_t *)&v358->__shared_owners_;
          do
            v360 = __ldaxr(v359);
          while (__stlxr(v360 - 1, v359));
          if (!v360)
          {
            ((void (*)(std::__shared_weak_count *))v358->__on_zero_shared)(v358);
            std::__shared_weak_count::__release_weak(v358);
          }
        }
        v361 = v357[1];
        v357[1] = 0;
        if (v361)
          (*(void (**)(uint64_t))(*(_QWORD *)v361 + 8))(v361);
        v362 = *v357;
        *v357 = 0;
        if (v362)
          (*(void (**)(uint64_t))(*(_QWORD *)v362 + 8))(v362);
        MEMORY[0x1A1AF4E00](v357, 0x20C40DC1BFBCFLL);
      }
      v363 = *(_QWORD *)(v229 + 136);
      v364 = *(_QWORD *)(v229 + 144);
      if (v363 != v364)
      {
        v365 = 0;
        v366 = 0;
        memset(__p, 0, 24);
        v367 = v363;
        while (1)
        {
          v369 = 0x367D6E020E64C149 * ((uint64_t)(*(_QWORD *)(v229 + 144) - *(_QWORD *)(v229 + 136)) >> 3);
          v370 = (double)(3 * v366 % v369) / (double)(v369 - 1);
          v371 = *(_QWORD *)(v367 + 80);
          v372 = *(_QWORD *)(v363 + 80);
          v373 = v372 - v371;
          _CF = v371 >= v372;
          v374 = v371 - v372;
          if (v374 == 0 || !_CF)
            v374 = v373;
          v376 = *(double *)(v367 + 16);
          v375 = *(double *)(v367 + 24);
          v377 = *(double *)(v367 + 8);
          v378 = *(double *)&v852.__r_.__value_.__l.__data_ + v377;
          v379 = v376 * v854;
          v380 = -(v375 * *(double *)&v853 - v377 * v854);
          v381 = -(v377 * *((double *)&v853 + 1) - v376 * *(double *)&v853);
          if (v374 < 0xEA61)
          {
            v388 = -(v379 - v375 * *((double *)&v853 + 1)) - (v379 - v375 * *((double *)&v853 + 1));
            v389 = v380 + v380;
            v390 = v381 + v381;
            v391 = v378 + v388 * v855 + v390 * *((double *)&v853 + 1) - v389 * v854;
            v392 = *(double *)&v852.__r_.__value_.__l.__size_
                 + v376
                 + v388 * v854
                 + v389 * v855
                 - v390 * *(double *)&v853;
            v393 = *(double *)&v852.__r_.__value_.__r.__words[2]
                 + v375
                 - v388 * *((double *)&v853 + 1)
                 + v389 * *(double *)&v853
                 + v390 * v855;
            if ((unint64_t)v365 >= *(_QWORD *)&__p[16])
            {
              v394 = *(float **)__p;
              v395 = 0x6DB6DB6DB6DB6DB7 * (((uint64_t)v365 - *(_QWORD *)__p) >> 2);
              v396 = v395 + 1;
              if ((unint64_t)(v395 + 1) > 0x924924924924924)
                std::__throw_bad_array_new_length[abi:nn180100]();
              if (0xDB6DB6DB6DB6DB6ELL * ((uint64_t)(*(_QWORD *)&__p[16] - *(_QWORD *)__p) >> 2) > v396)
                v396 = 0xDB6DB6DB6DB6DB6ELL * ((uint64_t)(*(_QWORD *)&__p[16] - *(_QWORD *)__p) >> 2);
              if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)&__p[16] - *(_QWORD *)__p) >> 2)) >= 0x492492492492492)
                v397 = 0x924924924924924;
              else
                v397 = v396;
              if (v397 > 0x924924924924924)
                goto LABEL_895;
              v398 = (char *)operator new(28 * v397);
              v399 = &v398[28 * v395];
              *(float *)v399 = v391;
              *((float *)v399 + 1) = v392;
              *((float *)v399 + 2) = v393;
              *((_DWORD *)v399 + 3) = 0;
              *((float *)v399 + 4) = v370;
              *(_QWORD *)(v399 + 20) = 0x3F0000003F800000;
              v400 = v399;
              if (v365 != v394)
              {
                this = v813;
                do
                {
                  v401 = *(_QWORD *)(v365 - 7);
                  v365 -= 7;
                  v402 = *((_DWORD *)v365 + 2);
                  *(_QWORD *)(v400 - 28) = v401;
                  v400 -= 28;
                  *((_DWORD *)v400 + 2) = v402;
                  *(_OWORD *)(v400 + 12) = *(_OWORD *)(v365 + 3);
                }
                while (v365 != v394);
LABEL_434:
                v365 = v394;
LABEL_436:
                v368 = (float *)(v399 + 28);
                *(_QWORD *)__p = v400;
                *(_QWORD *)&__p[8] = v399 + 28;
                *(_QWORD *)&__p[16] = &v398[28 * v397];
                if (v365)
                  operator delete(v365);
                goto LABEL_406;
              }
LABEL_435:
              this = v813;
              goto LABEL_436;
            }
            *v365 = v391;
            v365[1] = v392;
            v365[2] = v393;
            v365[3] = 0.0;
            v365[4] = v370;
            v368 = v365 + 7;
            *(_QWORD *)(v365 + 5) = 0x3F0000003F800000;
          }
          else
          {
            v382 = -(v379 - v375 * *((double *)&v853 + 1)) - (v379 - v375 * *((double *)&v853 + 1));
            v383 = v380 + v380;
            v384 = v381 + v381;
            v385 = v378 + v382 * v855 + v384 * *((double *)&v853 + 1) - v383 * v854;
            v386 = *(double *)&v852.__r_.__value_.__l.__size_
                 + v376
                 + v382 * v854
                 + v383 * v855
                 - v384 * *(double *)&v853;
            v387 = *(double *)&v852.__r_.__value_.__r.__words[2]
                 + v375
                 - v382 * *((double *)&v853 + 1)
                 + v383 * *(double *)&v853
                 + v384 * v855;
            if ((unint64_t)v365 >= *(_QWORD *)&__p[16])
            {
              v394 = *(float **)__p;
              v403 = 0x6DB6DB6DB6DB6DB7 * (((uint64_t)v365 - *(_QWORD *)__p) >> 2);
              v404 = v403 + 1;
              if ((unint64_t)(v403 + 1) > 0x924924924924924)
                std::__throw_bad_array_new_length[abi:nn180100]();
              if (0xDB6DB6DB6DB6DB6ELL * ((uint64_t)(*(_QWORD *)&__p[16] - *(_QWORD *)__p) >> 2) > v404)
                v404 = 0xDB6DB6DB6DB6DB6ELL * ((uint64_t)(*(_QWORD *)&__p[16] - *(_QWORD *)__p) >> 2);
              if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)&__p[16] - *(_QWORD *)__p) >> 2)) >= 0x492492492492492)
                v397 = 0x924924924924924;
              else
                v397 = v404;
              if (v397 > 0x924924924924924)
                goto LABEL_895;
              v398 = (char *)operator new(28 * v397);
              v399 = &v398[28 * v403];
              *(float *)v399 = v385;
              *((float *)v399 + 1) = v386;
              *((float *)v399 + 2) = v387;
              *((_DWORD *)v399 + 3) = 1065353216;
              *((float *)v399 + 4) = v370;
              *(_QWORD *)(v399 + 20) = 0x3F00000000000000;
              v400 = v399;
              if (v365 != v394)
              {
                this = v813;
                do
                {
                  v405 = *(_QWORD *)(v365 - 7);
                  v365 -= 7;
                  v406 = *((_DWORD *)v365 + 2);
                  *(_QWORD *)(v400 - 28) = v405;
                  v400 -= 28;
                  *((_DWORD *)v400 + 2) = v406;
                  *(_OWORD *)(v400 + 12) = *(_OWORD *)(v365 + 3);
                }
                while (v365 != v394);
                goto LABEL_434;
              }
              goto LABEL_435;
            }
            *v365 = v385;
            v365[1] = v386;
            v365[2] = v387;
            v365[3] = 1.0;
            v365[4] = v370;
            v368 = v365 + 7;
            *(_QWORD *)(v365 + 5) = 0x3F00000000000000;
          }
LABEL_406:
          ++v366;
          *(_QWORD *)&__p[8] = v368;
          v363 = v367;
          v365 = v368;
          v367 += 1992;
          if (v367 == v364)
          {
            v2 = (const md::LayoutContext *)v809;
            v412 = (uint64_t *)*((_QWORD *)this + 12);
            *((_QWORD *)this + 12) = v411;
            if (v412)
            {
              v413 = (std::__shared_weak_count *)v412[3];
              if (v413)
              {
                v414 = (unint64_t *)&v413->__shared_owners_;
                do
                  v415 = __ldaxr(v414);
                while (__stlxr(v415 - 1, v414));
                if (!v415)
                {
                  ((void (*)(std::__shared_weak_count *))v413->__on_zero_shared)(v413);
                  std::__shared_weak_count::__release_weak(v413);
                }
              }
              v416 = v412[1];
              v412[1] = 0;
              if (v416)
                (*(void (**)(uint64_t))(*(_QWORD *)v416 + 8))(v416);
              v417 = *v412;
              *v412 = 0;
              if (v417)
                (*(void (**)(uint64_t))(*(_QWORD *)v417 + 8))(v417);
              MEMORY[0x1A1AF4E00](v412, 0x20C40DC1BFBCFLL);
            }
            v418 = v857;
            *(_OWORD *)((char *)this + 136) = v858;
            *((double *)this + 19) = v859;
            *(_OWORD *)((char *)this + 104) = v856;
            *(_OWORD *)((char *)this + 120) = v418;
            if (*(_QWORD *)__p)
            {
              *(_QWORD *)&__p[8] = *(_QWORD *)__p;
              operator delete(*(void **)__p);
            }
            break;
          }
        }
      }
    }
  }
LABEL_258:
  v230 = v861;
  v231 = *(_QWORD *)(v861 + 40);
  v232 = *(_BYTE **)(v861 + 48);
  if ((_BYTE *)v231 == v232)
  {
LABEL_517:
    v455 = *((_QWORD *)this + 11);
    v456 = *(_QWORD *)(*(_QWORD *)(v455 + 8) + 64);
    v457 = *(_QWORD **)v456;
    v458 = *(_QWORD *)(*(_QWORD *)v456 + 8);
    if (v458)
      v459 = (float32x4_t *)v457[9];
    else
      v459 = 0;
    v460 = *((double *)&v853 + 1);
    v461 = v854;
    v462 = v460 + v460;
    v463 = (v460 + v460) * v460;
    v464 = (v461 + v461) * v461;
    v465 = *(double *)&v853;
    v466 = (v465 + v465) * *((double *)&v853 + 1);
    v467 = (v461 + v461) * v855;
    v468 = v854 * (v465 + v465);
    v469 = 1.0 - (v465 + v465) * v465;
    *(double *)&v828.__r_.__value_.__l.__data_ = 1.0 - (v463 + v464);
    *(double *)&v828.__r_.__value_.__l.__size_ = v467 + v466;
    v830 = v466 - v467;
    v831 = v469 - v464;
    v470 = v855 * (v465 + v465);
    v834 = v855 * v462 + v468;
    v835 = v462 * v854 - v470;
    *(double *)&v828.__r_.__value_.__r.__words[2] = v468 - v855 * v462;
    v832 = v470 + v462 * v854;
    v836 = v469 - v463;
    v829 = 0;
    v833 = 0;
    v837 = 0;
    v838 = v852;
    v839 = 0x3FF0000000000000;
    gm::operator*<double,4,4,4>((double *)v840, (double *)v841, (double *)&v828);
    v471 = (_QWORD *)*((_QWORD *)v2 + 1);
    v472 = v471[1];
    if ((v472 & (v472 - 1)) != 0)
    {
      v474 = 0x1AF456233693CD46;
      if (v472 <= 0x1AF456233693CD46)
        v474 = 0x1AF456233693CD46 % v472;
      v473 = *(_QWORD **)(*v471 + 8 * v474);
      do
      {
        do
          v473 = (_QWORD *)*v473;
        while (v473[1] != 0x1AF456233693CD46);
      }
      while (v473[2] != 0x1AF456233693CD46);
    }
    else
    {
      v473 = *(_QWORD **)(*v471 + 8 * ((v472 - 1) & 0x1AF456233693CD46));
      do
      {
        do
          v473 = (_QWORD *)*v473;
        while (v473[1] != 0x1AF456233693CD46);
      }
      while (v473[2] != 0x1AF456233693CD46);
    }
    v475 = *(_QWORD *)(v473[5] + 32);
    v476 = *(_QWORD *)(v475 + 512);
    v477 = *(_OWORD *)(v475 + 496);
    *(_OWORD *)&v819.__r_.__value_.__l.__data_ = xmmword_19FFB32C0;
    v819.__r_.__value_.__r.__words[2] = 0;
    v820 = 0;
    v821 = xmmword_19FFB33A0;
    v822 = 0u;
    v823 = 0u;
    v824 = xmmword_19FFB32C0;
    v825 = v477;
    v826 = v476;
    v827 = 0x3FF0000000000000;
    gm::operator*<double,4,4,4>((double *)__p, (double *)v840, (double *)&v819);
    *v459 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*(float64x2_t *)__p), *(float64x2_t *)&__p[16]);
    v459[1] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v864), v865);
    v459[2] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v866), v867);
    v459[3] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v868), v869);
    if (v458)
    {
      v478 = v457[8];
      if (v478 <= v458)
        v478 = v458;
      v457[7] = 0;
      v457[8] = v478;
    }
    v479 = (uint64_t)v807;
    ggl::CommandBuffer::pushRenderItem((uint64_t)v807, *(ggl::RenderItem **)v455);
    v480 = *((_QWORD *)this + 20);
    if (v480)
    {
      v481 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v480 + 8) + 64) + 16);
      *(_OWORD *)&v815.__r_.__value_.__l.__data_ = 0uLL;
      v482 = *(_QWORD *)(v481 + 8);
      *(_QWORD *)&v483 = 0;
      *((_QWORD *)&v483 + 1) = v481;
      if (v482)
        v484 = *(float32x4_t **)(v481 + 72);
      else
        v484 = 0;
      *(_OWORD *)&v815.__r_.__value_.__l.__data_ = v483;
      v815.__r_.__value_.__r.__words[2] = 0;
      v816 = v482;
      v818 = v484;
      v817 = 1;
      v485 = *((double *)&v853 + 1);
      v486 = v854;
      v487 = v485 + v485;
      v488 = (v485 + v485) * v485;
      v489 = (v486 + v486) * v486;
      v490 = *(double *)&v853;
      v491 = v490 + v490;
      v492 = (v490 + v490) * *((double *)&v853 + 1);
      v493 = (v486 + v486) * v855;
      v494 = v854 * (v490 + v490);
      v495 = 1.0 - (v490 + v490) * v490;
      *(double *)&v828.__r_.__value_.__l.__data_ = 1.0 - (v488 + v489);
      *(double *)&v828.__r_.__value_.__l.__size_ = v493 + v492;
      v830 = v492 - v493;
      v831 = v495 - v489;
      v834 = v855 * v487 + v494;
      v835 = v487 * v854 - v855 * v491;
      *(double *)&v828.__r_.__value_.__r.__words[2] = v494 - v855 * v487;
      v832 = v855 * v491 + v487 * v854;
      v836 = v495 - v488;
      v829 = 0;
      v833 = 0;
      v837 = 0;
      v838 = v852;
      v839 = 0x3FF0000000000000;
      gm::operator*<double,4,4,4>((double *)v840, (double *)v841, (double *)&v828);
      v496 = *((double *)this + 26);
      v497 = *((double *)this + 27);
      v498 = *((double *)this + 28);
      v499 = v496 + v496;
      v500 = (v496 + v496) * v496;
      v501 = (v497 + v497) * v497;
      v503 = *((_QWORD *)this + 24);
      v502 = *((double *)this + 25);
      v504 = v502 + v502;
      v505 = (v502 + v502) * v496;
      v506 = (v497 + v497) * v498;
      v507 = v497 * (v502 + v502);
      v508 = 1.0 - (v502 + v502) * v502;
      v509 = v499 * v497;
      *(double *)&v819.__r_.__value_.__l.__data_ = 1.0 - (v500 + v501);
      *(double *)&v819.__r_.__value_.__l.__size_ = v506 + v505;
      *(double *)&v821 = v505 - v506;
      *((double *)&v821 + 1) = v508 - v501;
      *(double *)&v823 = v498 * v499 + v507;
      *((double *)&v823 + 1) = v509 - v498 * v504;
      *(double *)&v819.__r_.__value_.__r.__words[2] = v507 - v498 * v499;
      v822 = COERCE_UNSIGNED_INT64(v498 * v504 + v509);
      *(double *)&v824 = v508 - v500;
      v820 = 0;
      *((_QWORD *)&v824 + 1) = 0;
      v825 = *((_OWORD *)this + 11);
      v826 = v503;
      v827 = 0x3FF0000000000000;
      gm::operator*<double,4,4,4>((double *)__p, (double *)v840, (double *)&v819);
      v510 = v818;
      *v818 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*(float64x2_t *)__p), *(float64x2_t *)&__p[16]);
      v510[1] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v864), v865);
      v510[2] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v866), v867);
      v510[3] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v868), v869);
      ggl::CommandBuffer::pushRenderItem((uint64_t)v807, **((ggl::RenderItem ***)this + 20));
      v512 = v815.__r_.__value_.__r.__words[2];
      v511 = v816;
      if (v816 != v815.__r_.__value_.__r.__words[2])
      {
        v513 = (_QWORD *)v815.__r_.__value_.__l.__size_;
        v514 = v817;
        v515 = HIBYTE(v817);
        if (v815.__r_.__value_.__r.__words[0] && *(_BYTE *)(v815.__r_.__value_.__l.__size_ + 17) != 2)
          (*(void (**)(void))(*(_QWORD *)v815.__r_.__value_.__l.__data_ + 64))();
        if (v514 && !v515)
        {
          v517 = v513[7];
          v516 = v513[8];
          if (v516 == v517)
            v517 = v513[10] - v513[9];
          if (v512 < v517)
            v517 = v512;
          if (v516 <= v511)
            v516 = v511;
          if (v516 == v517)
            v516 = v517 + v513[10] - v513[9];
          v513[7] = v517;
          v513[8] = v516;
        }
      }
      v2 = (const md::LayoutContext *)v809;
      v479 = (uint64_t)v807;
    }
    v518 = *((_QWORD *)this + 21);
    if (v518)
    {
      v519 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v518 + 8) + 64) + 16);
      *(_OWORD *)&v815.__r_.__value_.__l.__data_ = 0uLL;
      v520 = *(_QWORD *)(v519 + 8);
      *(_QWORD *)&v521 = 0;
      *((_QWORD *)&v521 + 1) = v519;
      if (v520)
        v522 = *(float32x4_t **)(v519 + 72);
      else
        v522 = 0;
      *(_OWORD *)&v815.__r_.__value_.__l.__data_ = v521;
      v815.__r_.__value_.__r.__words[2] = 0;
      v816 = v520;
      v818 = v522;
      v817 = 1;
      v523 = *((double *)&v853 + 1);
      v524 = v854;
      v525 = v523 + v523;
      v526 = (v523 + v523) * v523;
      v527 = (v524 + v524) * v524;
      v528 = *(double *)&v853;
      v529 = v528 + v528;
      v530 = (v528 + v528) * *((double *)&v853 + 1);
      v531 = (v524 + v524) * v855;
      v532 = v854 * (v528 + v528);
      v533 = 1.0 - (v528 + v528) * v528;
      *(double *)&v828.__r_.__value_.__l.__data_ = 1.0 - (v526 + v527);
      *(double *)&v828.__r_.__value_.__l.__size_ = v531 + v530;
      v830 = v530 - v531;
      v831 = v533 - v527;
      v834 = v855 * v525 + v532;
      v835 = v525 * v854 - v855 * v529;
      *(double *)&v828.__r_.__value_.__r.__words[2] = v532 - v855 * v525;
      v832 = v855 * v529 + v525 * v854;
      v836 = v533 - v526;
      v829 = 0;
      v833 = 0;
      v837 = 0;
      v838 = v852;
      v839 = 0x3FF0000000000000;
      gm::operator*<double,4,4,4>((double *)v840, (double *)v841, (double *)&v828);
      v534 = *((double *)this + 26);
      v535 = *((double *)this + 27);
      v536 = *((double *)this + 28);
      v537 = v534 + v534;
      v538 = (v534 + v534) * v534;
      v539 = (v535 + v535) * v535;
      v541 = *((_QWORD *)this + 24);
      v540 = *((double *)this + 25);
      v542 = v540 + v540;
      v543 = (v540 + v540) * v534;
      v544 = (v535 + v535) * v536;
      v545 = v535 * (v540 + v540);
      v546 = 1.0 - (v540 + v540) * v540;
      v547 = v537 * v535;
      *(double *)&v819.__r_.__value_.__l.__data_ = 1.0 - (v538 + v539);
      *(double *)&v819.__r_.__value_.__l.__size_ = v544 + v543;
      *(double *)&v821 = v543 - v544;
      *((double *)&v821 + 1) = v546 - v539;
      *(double *)&v823 = v536 * v537 + v545;
      *((double *)&v823 + 1) = v547 - v536 * v542;
      *(double *)&v819.__r_.__value_.__r.__words[2] = v545 - v536 * v537;
      v822 = COERCE_UNSIGNED_INT64(v536 * v542 + v547);
      *(double *)&v824 = v546 - v538;
      v820 = 0;
      *((_QWORD *)&v824 + 1) = 0;
      v825 = *((_OWORD *)this + 11);
      v826 = v541;
      v827 = 0x3FF0000000000000;
      gm::operator*<double,4,4,4>((double *)__p, (double *)v840, (double *)&v819);
      v548 = v818;
      *v818 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*(float64x2_t *)__p), *(float64x2_t *)&__p[16]);
      v548[1] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v864), v865);
      v548[2] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v866), v867);
      v548[3] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v868), v869);
      ggl::CommandBuffer::pushRenderItem(v479, **((ggl::RenderItem ***)this + 21));
      v550 = v815.__r_.__value_.__r.__words[2];
      v549 = v816;
      if (v816 != v815.__r_.__value_.__r.__words[2])
      {
        v551 = (_QWORD *)v815.__r_.__value_.__l.__size_;
        v552 = v817;
        v553 = HIBYTE(v817);
        if (v815.__r_.__value_.__r.__words[0] && *(_BYTE *)(v815.__r_.__value_.__l.__size_ + 17) != 2)
          (*(void (**)(void))(*(_QWORD *)v815.__r_.__value_.__l.__data_ + 64))();
        if (v552 && !v553)
        {
          v555 = v551[7];
          v554 = v551[8];
          if (v554 == v555)
            v555 = v551[10] - v551[9];
          if (v550 < v555)
            v555 = v550;
          if (v554 <= v549)
            v554 = v549;
          if (v554 == v555)
            v554 = v555 + v551[10] - v551[9];
          v551[7] = v555;
          v551[8] = v554;
        }
      }
      v2 = (const md::LayoutContext *)v809;
      v479 = (uint64_t)v807;
    }
    v556 = *((_QWORD *)this + 12);
    if (v556)
    {
      v557 = **(_QWORD **)(*(_QWORD *)(v556 + 8) + 64);
      *(_OWORD *)&v815.__r_.__value_.__l.__data_ = 0uLL;
      v558 = *(_QWORD *)(v557 + 8);
      *(_QWORD *)&v559 = 0;
      *((_QWORD *)&v559 + 1) = v557;
      if (v558)
        v560 = *(float32x4_t **)(v557 + 72);
      else
        v560 = 0;
      *(_OWORD *)&v815.__r_.__value_.__l.__data_ = v559;
      v815.__r_.__value_.__r.__words[2] = 0;
      v816 = v558;
      v818 = v560;
      v817 = 1;
      v561 = *((double *)&v853 + 1);
      v562 = v854;
      v563 = v561 + v561;
      v564 = (v561 + v561) * v561;
      v565 = (v562 + v562) * v562;
      v566 = *(double *)&v853;
      v567 = v566 + v566;
      v568 = (v566 + v566) * *((double *)&v853 + 1);
      v569 = (v562 + v562) * v855;
      v570 = v854 * (v566 + v566);
      v571 = 1.0 - (v566 + v566) * v566;
      *(double *)&v828.__r_.__value_.__l.__data_ = 1.0 - (v564 + v565);
      *(double *)&v828.__r_.__value_.__l.__size_ = v569 + v568;
      v830 = v568 - v569;
      v831 = v571 - v565;
      v834 = v855 * v563 + v570;
      v835 = v563 * v854 - v855 * v567;
      *(double *)&v828.__r_.__value_.__r.__words[2] = v570 - v855 * v563;
      v832 = v855 * v567 + v563 * v854;
      v836 = v571 - v564;
      v829 = 0;
      v833 = 0;
      v837 = 0;
      v838 = v852;
      v839 = 0x3FF0000000000000;
      gm::operator*<double,4,4,4>((double *)v840, (double *)v841, (double *)&v828);
      v572 = *((double *)this + 17);
      v573 = *((double *)this + 18);
      v574 = *((double *)this + 19);
      v575 = v572 + v572;
      v576 = (v572 + v572) * v572;
      v577 = (v573 + v573) * v573;
      v579 = *((_QWORD *)this + 15);
      v578 = *((double *)this + 16);
      v580 = v578 + v578;
      v581 = (v578 + v578) * v572;
      v582 = (v573 + v573) * v574;
      v583 = v573 * (v578 + v578);
      v584 = 1.0 - (v578 + v578) * v578;
      v585 = v575 * v573;
      *(double *)&v819.__r_.__value_.__l.__data_ = 1.0 - (v576 + v577);
      *(double *)&v819.__r_.__value_.__l.__size_ = v582 + v581;
      *(double *)&v821 = v581 - v582;
      *((double *)&v821 + 1) = v584 - v577;
      *(double *)&v823 = v574 * v575 + v583;
      *((double *)&v823 + 1) = v585 - v574 * v580;
      *(double *)&v819.__r_.__value_.__r.__words[2] = v583 - v574 * v575;
      v822 = COERCE_UNSIGNED_INT64(v574 * v580 + v585);
      *(double *)&v824 = v584 - v576;
      v820 = 0;
      *((_QWORD *)&v824 + 1) = 0;
      v825 = *(_OWORD *)((char *)this + 104);
      v826 = v579;
      v827 = 0x3FF0000000000000;
      gm::operator*<double,4,4,4>((double *)__p, (double *)v840, (double *)&v819);
      v586 = v818;
      *v818 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*(float64x2_t *)__p), *(float64x2_t *)&__p[16]);
      v586[1] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v864), v865);
      v586[2] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v866), v867);
      v586[3] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v868), v869);
      ggl::CommandBuffer::pushRenderItem(v479, **((ggl::RenderItem ***)this + 12));
      v588 = v815.__r_.__value_.__r.__words[2];
      v587 = v816;
      if (v816 != v815.__r_.__value_.__r.__words[2])
      {
        v589 = (_QWORD *)v815.__r_.__value_.__l.__size_;
        v590 = v817;
        v591 = HIBYTE(v817);
        if (v815.__r_.__value_.__r.__words[0] && *(_BYTE *)(v815.__r_.__value_.__l.__size_ + 17) != 2)
          (*(void (**)(void))(*(_QWORD *)v815.__r_.__value_.__l.__data_ + 64))();
        if (v590 && !v591)
        {
          v593 = v589[7];
          v592 = v589[8];
          if (v592 == v593)
            v593 = v589[10] - v589[9];
          if (v588 < v593)
            v593 = v588;
          if (v592 <= v587)
            v592 = v587;
          if (v592 == v593)
            v592 = v593 + v589[10] - v589[9];
          v589[7] = v593;
          v589[8] = v592;
        }
      }
      v2 = (const md::LayoutContext *)v809;
      v479 = (uint64_t)v807;
    }
    if (*((double *)this + 30) * *((double *)this + 30)
       + *((double *)this + 31) * *((double *)this + 31)
       + *((double *)this + 32) * *((double *)this + 32) > 0.0)
    {
      v594 = **(_QWORD **)(*(_QWORD *)(*((_QWORD *)this + 29) + 8) + 64);
      *(_OWORD *)&v815.__r_.__value_.__l.__data_ = 0uLL;
      v595 = *(_QWORD *)(v594 + 8);
      *(_QWORD *)&v596 = 0;
      *((_QWORD *)&v596 + 1) = v594;
      v597 = v595 ? *(float32x4_t **)(v594 + 72) : 0;
      *(_OWORD *)&v815.__r_.__value_.__l.__data_ = v596;
      v815.__r_.__value_.__r.__words[2] = 0;
      v816 = v595;
      v818 = v597;
      v817 = 1;
      v598 = *((double *)&v853 + 1);
      v599 = v854;
      v600 = v598 + v598;
      v601 = (v598 + v598) * v598;
      v602 = (v599 + v599) * v599;
      v603 = *(double *)&v853;
      v604 = v603 + v603;
      v605 = (v603 + v603) * *((double *)&v853 + 1);
      v606 = (v599 + v599) * v855;
      v607 = v854 * (v603 + v603);
      v608 = 1.0 - (v603 + v603) * v603;
      *(double *)&v828.__r_.__value_.__l.__data_ = 1.0 - (v601 + v602);
      *(double *)&v828.__r_.__value_.__l.__size_ = v606 + v605;
      v830 = v605 - v606;
      v831 = v608 - v602;
      v834 = v855 * v600 + v607;
      v835 = v600 * v854 - v855 * v604;
      *(double *)&v828.__r_.__value_.__r.__words[2] = v607 - v855 * v600;
      v832 = v855 * v604 + v600 * v854;
      v836 = v608 - v601;
      v829 = 0;
      v833 = 0;
      v837 = 0;
      v838 = v852;
      v839 = 0x3FF0000000000000;
      gm::operator*<double,4,4,4>((double *)v840, (double *)v841, (double *)&v828);
      v609 = *((double *)this + 34);
      v610 = *((double *)this + 35);
      v611 = *((double *)this + 36);
      v612 = v609 + v609;
      v613 = (v609 + v609) * v609;
      v614 = (v610 + v610) * v610;
      v616 = *((_QWORD *)this + 32);
      v615 = *((double *)this + 33);
      v617 = v615 + v615;
      v618 = (v615 + v615) * v609;
      v619 = (v610 + v610) * v611;
      v620 = v610 * (v615 + v615);
      v621 = 1.0 - (v615 + v615) * v615;
      v622 = v612 * v610;
      *(double *)&v819.__r_.__value_.__l.__data_ = 1.0 - (v613 + v614);
      *(double *)&v819.__r_.__value_.__l.__size_ = v619 + v618;
      *(double *)&v821 = v618 - v619;
      *((double *)&v821 + 1) = v621 - v614;
      *(double *)&v823 = v611 * v612 + v620;
      *((double *)&v823 + 1) = v622 - v611 * v617;
      *(double *)&v819.__r_.__value_.__r.__words[2] = v620 - v611 * v612;
      v822 = COERCE_UNSIGNED_INT64(v611 * v617 + v622);
      *(double *)&v824 = v621 - v613;
      v820 = 0;
      *((_QWORD *)&v824 + 1) = 0;
      v825 = *((_OWORD *)this + 15);
      v826 = v616;
      v827 = 0x3FF0000000000000;
      gm::operator*<double,4,4,4>((double *)__p, (double *)v840, (double *)&v819);
      v623 = v818;
      *v818 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*(float64x2_t *)__p), *(float64x2_t *)&__p[16]);
      v623[1] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v864), v865);
      v623[2] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v866), v867);
      v623[3] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v868), v869);
      ggl::CommandBuffer::pushRenderItem(v479, **((ggl::RenderItem ***)this + 29));
      v625 = v815.__r_.__value_.__r.__words[2];
      v624 = v816;
      if (v816 != v815.__r_.__value_.__r.__words[2])
      {
        v626 = (_QWORD *)v815.__r_.__value_.__l.__size_;
        v627 = v817;
        v628 = HIBYTE(v817);
        if (v815.__r_.__value_.__r.__words[0] && *(_BYTE *)(v815.__r_.__value_.__l.__size_ + 17) != 2)
          (*(void (**)(void))(*(_QWORD *)v815.__r_.__value_.__l.__data_ + 64))();
        if (v627 && !v628)
        {
          v630 = v626[7];
          v629 = v626[8];
          if (v629 == v630)
            v630 = v626[10] - v626[9];
          if (v625 < v630)
            v630 = v625;
          if (v629 <= v624)
            v629 = v624;
          if (v629 == v630)
            v629 = v630 + v626[10] - v626[9];
          v626[7] = v630;
          v626[8] = v629;
        }
      }
    }

LABEL_614:
    if (!objc_msgSend(v860, "muninShowRigTransitionInfo", v807))
      goto LABEL_893;
    if (!*(_QWORD *)v2)
      goto LABEL_893;
    if ((objc_opt_respondsToSelector() & 1) == 0)
      goto LABEL_893;
    v631 = (ggl::DebugConsole *)objc_msgSend(*(id *)v2, "debugConsoleForId:", 17);
    v632 = (float32x4_t *)v631;
    if (!v631)
      goto LABEL_893;
    ggl::DebugConsole::begin(v631);
    v632[5].i64[0] = 0;
    v633 = *(id *)v2;
    objc_msgSend(v633, "sizeInPixels");
    v635 = v634;
    v637 = v636;

    v638 = *(id *)v2;
    objc_msgSend(v638, "contentScale");
    v640 = v639;

    v641 = v635;
    v643 = *((_QWORD *)v2 + 4);
    v644 = (std::__shared_weak_count *)*((_QWORD *)v2 + 5);
    if (v644)
    {
      v645 = (unint64_t *)&v644->__shared_owners_;
      do
        v646 = __ldxr(v645);
      while (__stxr(v646 + 1, v645));
      v647 = *((_QWORD *)v2 + 4);
      v648 = (std::__shared_weak_count *)*((_QWORD *)v2 + 5);
      v649 = *(double *)(v643 + 64);
      if (v648)
      {
        v650 = (unint64_t *)&v648->__shared_owners_;
        do
          v651 = __ldxr(v650);
        while (__stxr(v651 + 1, v650));
        v652 = 0;
      }
      else
      {
        v652 = 1;
      }
      v643 = v647;
    }
    else
    {
      v648 = 0;
      v649 = *(double *)(v643 + 64);
      v652 = 1;
    }
    v653 = v649;
    v654 = *(unsigned __int8 *)(v643 + 72);
    *(_OWORD *)&v841[4] = 0uLL;
    *(float *)v841 = 2.0 / v641;
    v642 = v637;
    *(float *)&v841[20] = -2.0 / v642;
    v655 = v653 + -1.0;
    if (!v654)
      v655 = 1.0 - v653;
    v842 = 0uLL;
    v843 = LODWORD(v655);
    *(float *)&v844 = (float)-v641 / v641;
    DWORD1(v844) = 1065353216;
    *((_QWORD *)&v844 + 1) = LODWORD(v653) | 0x3F80000000000000;
    if ((v652 & 1) == 0)
    {
      v656 = (unint64_t *)&v648->__shared_owners_;
      do
        v657 = __ldaxr(v656);
      while (__stlxr(v657 - 1, v656));
      if (!v657)
      {
        ((void (*)(std::__shared_weak_count *))v648->__on_zero_shared)(v648);
        std::__shared_weak_count::__release_weak(v648);
      }
    }
    v658 = v640;
    v812 = v658;
    if (v644)
    {
      v659 = (unint64_t *)&v644->__shared_owners_;
      do
        v660 = __ldaxr(v659);
      while (__stlxr(v660 - 1, v659));
      if (!v660)
      {
        ((void (*)(std::__shared_weak_count *))v644->__on_zero_shared)(v644);
        std::__shared_weak_count::__release_weak(v644);
      }
    }
    ggl::DebugConsole::setProjection((uint64_t)v632, v841);
    v632[1] = vmulq_n_f32((float32x4_t)xmmword_19FFB49D0, v812);
    v632[6].i32[0] = -1;
    v632[6].i32[1] = -16777216;
    std::to_string(v840, *(double *)(v861 + 144));
    v661 = std::string::insert(v840, 0, "Time step: ", 0xBuLL);
    v663 = *(_OWORD *)&v661->__r_.__value_.__l.__data_;
    *(_QWORD *)&__p[16] = *((_QWORD *)&v661->__r_.__value_.__l + 2);
    *(_OWORD *)__p = v663;
    v661->__r_.__value_.__l.__size_ = 0;
    v661->__r_.__value_.__r.__words[2] = 0;
    v661->__r_.__value_.__r.__words[0] = 0;
    v632->i64[1] = 0x42FA000043160000;
    if (__p[23] >= 0)
      v664 = (int8x16_t *)__p;
    else
      v664 = *(int8x16_t **)__p;
    if (__p[23] >= 0)
      v665 = __p[23];
    else
      v665 = *(_QWORD *)&__p[8];
    ggl::DebugConsole::drawString((uint64_t)v632, v664, v665, 4.57396907e14, v662);
    if ((__p[23] & 0x80000000) != 0)
      operator delete(*(void **)__p);
    if (SHIBYTE(v840[0].__r_.__value_.__r.__words[2]) < 0)
      operator delete(v840[0].__r_.__value_.__l.__data_);
    v666 = (_QWORD *)v861;
    v667 = *(_QWORD *)(v861 + 80);
    if (v667)
    {
      std::to_string(v840, v667);
      v668 = std::string::insert(v840, 0, "Src: ", 5uLL);
      v670 = *(_OWORD *)&v668->__r_.__value_.__l.__data_;
      *(_QWORD *)&__p[16] = *((_QWORD *)&v668->__r_.__value_.__l + 2);
      *(_OWORD *)__p = v670;
      v668->__r_.__value_.__l.__size_ = 0;
      v668->__r_.__value_.__r.__words[2] = 0;
      v668->__r_.__value_.__r.__words[0] = 0;
      v671 = COERCE_DOUBLE(vdup_n_s32(0x43160000u));
      *(double *)&v632->i64[1] = v671;
      if (__p[23] >= 0)
        v672 = (int8x16_t *)__p;
      else
        v672 = *(int8x16_t **)__p;
      if (__p[23] >= 0)
        v673 = __p[23];
      else
        v673 = *(_QWORD *)&__p[8];
      ggl::DebugConsole::drawString((uint64_t)v632, v672, v673, v671, v669);
      if ((__p[23] & 0x80000000) != 0)
        operator delete(*(void **)__p);
      if (SHIBYTE(v840[0].__r_.__value_.__r.__words[2]) < 0)
        operator delete(v840[0].__r_.__value_.__l.__data_);
      v666 = (_QWORD *)v861;
      *(float *)&v674 = 175.0;
    }
    else
    {
      *(float *)&v674 = 150.0;
    }
    v675 = *(float *)&v674;
    v676 = v666[12];
    if (v676 && v676 != v666[10])
    {
      std::to_string(v840, v676);
      v677 = std::string::insert(v840, 0, "Dst: ", 5uLL);
      v679 = *(_OWORD *)&v677->__r_.__value_.__l.__data_;
      *(_QWORD *)&__p[16] = *((_QWORD *)&v677->__r_.__value_.__l + 2);
      *(_OWORD *)__p = v679;
      v677->__r_.__value_.__l.__size_ = 0;
      v677->__r_.__value_.__r.__words[2] = 0;
      v677->__r_.__value_.__r.__words[0] = 0;
      v632->i32[2] = 1125515264;
      v632->f32[3] = v675;
      if (__p[23] >= 0)
        v680 = (int8x16_t *)__p;
      else
        v680 = *(int8x16_t **)__p;
      if (__p[23] >= 0)
        v681 = __p[23];
      else
        v681 = *(_QWORD *)&__p[8];
      ggl::DebugConsole::drawString((uint64_t)v632, v680, v681, *(double *)&v679, v678);
      if ((__p[23] & 0x80000000) != 0)
        operator delete(*(void **)__p);
      if (SHIBYTE(v840[0].__r_.__value_.__r.__words[2]) < 0)
        operator delete(v840[0].__r_.__value_.__l.__data_);
      std::to_string(v840, *(float *)(v861 + 120));
      v682 = std::string::insert(v840, 0, "Src -> Dst: ", 0xCuLL);
      v684 = *(_OWORD *)&v682->__r_.__value_.__l.__data_;
      *(_QWORD *)&__p[16] = *((_QWORD *)&v682->__r_.__value_.__l + 2);
      *(_OWORD *)__p = v684;
      v682->__r_.__value_.__l.__size_ = 0;
      v682->__r_.__value_.__r.__words[2] = 0;
      v682->__r_.__value_.__r.__words[0] = 0;
      v632->i32[2] = 1144750080;
      v632->f32[3] = v675;
      if (__p[23] >= 0)
        v685 = (int8x16_t *)__p;
      else
        v685 = *(int8x16_t **)__p;
      if (__p[23] >= 0)
        v686 = __p[23];
      else
        v686 = *(_QWORD *)&__p[8];
      ggl::DebugConsole::drawString((uint64_t)v632, v685, v686, *(double *)&v684, v683);
      if ((__p[23] & 0x80000000) != 0)
        operator delete(*(void **)__p);
      if (SHIBYTE(v840[0].__r_.__value_.__r.__words[2]) < 0)
        operator delete(v840[0].__r_.__value_.__l.__data_);
      v675 = v675 + 25.0;
      v666 = (_QWORD *)v861;
    }
    v687 = v666[14];
    if (v687 && v687 != v666[10])
    {
      std::to_string(v840, v687);
      v688 = std::string::insert(v840, 0, "Inc: ", 5uLL);
      v690 = *(_OWORD *)&v688->__r_.__value_.__l.__data_;
      *(_QWORD *)&__p[16] = *((_QWORD *)&v688->__r_.__value_.__l + 2);
      *(_OWORD *)__p = v690;
      v688->__r_.__value_.__l.__size_ = 0;
      v688->__r_.__value_.__r.__words[2] = 0;
      v688->__r_.__value_.__r.__words[0] = 0;
      v632->i32[2] = 1125515264;
      v632->f32[3] = v675;
      if (__p[23] >= 0)
        v691 = (int8x16_t *)__p;
      else
        v691 = *(int8x16_t **)__p;
      if (__p[23] >= 0)
        v692 = __p[23];
      else
        v692 = *(_QWORD *)&__p[8];
      ggl::DebugConsole::drawString((uint64_t)v632, v691, v692, *(double *)&v690, v689);
      if ((__p[23] & 0x80000000) != 0)
        operator delete(*(void **)__p);
      if (SHIBYTE(v840[0].__r_.__value_.__r.__words[2]) < 0)
        operator delete(v840[0].__r_.__value_.__l.__data_);
      std::to_string(v840, *(float *)(v861 + 124));
      v693 = std::string::insert(v840, 0, "Src -> Inc -> Dst: ", 0x13uLL);
      v695 = *(_OWORD *)&v693->__r_.__value_.__l.__data_;
      *(_QWORD *)&__p[16] = *((_QWORD *)&v693->__r_.__value_.__l + 2);
      *(_OWORD *)__p = v695;
      v693->__r_.__value_.__l.__size_ = 0;
      v693->__r_.__value_.__r.__words[2] = 0;
      v693->__r_.__value_.__r.__words[0] = 0;
      v632->i32[2] = 1144750080;
      v632->f32[3] = v675;
      if (__p[23] >= 0)
        v696 = (int8x16_t *)__p;
      else
        v696 = *(int8x16_t **)__p;
      if (__p[23] >= 0)
        v697 = __p[23];
      else
        v697 = *(_QWORD *)&__p[8];
      ggl::DebugConsole::drawString((uint64_t)v632, v696, v697, *(double *)&v695, v694);
      if ((__p[23] & 0x80000000) != 0)
        operator delete(*(void **)__p);
      if (SHIBYTE(v840[0].__r_.__value_.__r.__words[2]) < 0)
        operator delete(v840[0].__r_.__value_.__l.__data_);
      std::to_string(v840, *(float *)(v861 + 128));
      v698 = std::string::insert(v840, 0, "Crossfade: ", 0xBuLL);
      v700 = *(_OWORD *)&v698->__r_.__value_.__l.__data_;
      *(_QWORD *)&__p[16] = *((_QWORD *)&v698->__r_.__value_.__l + 2);
      *(_OWORD *)__p = v700;
      v698->__r_.__value_.__l.__size_ = 0;
      v698->__r_.__value_.__r.__words[2] = 0;
      v698->__r_.__value_.__r.__words[0] = 0;
      v632->i32[2] = 1144750080;
      v632->f32[3] = v675 + 25.0;
      if (__p[23] >= 0)
        v701 = (int8x16_t *)__p;
      else
        v701 = *(int8x16_t **)__p;
      if (__p[23] >= 0)
        v702 = __p[23];
      else
        v702 = *(_QWORD *)&__p[8];
      *(float *)&v699 = v675 + 25.0;
      ggl::DebugConsole::drawString((uint64_t)v632, v701, v702, v699, *(int32x2_t *)&v700);
      if ((__p[23] & 0x80000000) != 0)
        operator delete(*(void **)__p);
      if (SHIBYTE(v840[0].__r_.__value_.__r.__words[2]) < 0)
        operator delete(v840[0].__r_.__value_.__l.__data_);
      v675 = v675 + 50.0;
      v666 = (_QWORD *)v861;
    }
    v632[6].i32[0] = -1;
    v703 = v666[27];
    v704.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
    std::to_string(v840, (unint64_t)((double)((v704.__d_.__rep_ - *(_QWORD *)(v703 + 32)) / 1000) * 0.001));
    v705 = std::string::insert(v840, 0, "Time since tap (ms): ", 0x15uLL);
    v707 = *(_OWORD *)&v705->__r_.__value_.__l.__data_;
    *(_QWORD *)&__p[16] = *((_QWORD *)&v705->__r_.__value_.__l + 2);
    *(_OWORD *)__p = v707;
    v705->__r_.__value_.__l.__size_ = 0;
    v705->__r_.__value_.__r.__words[2] = 0;
    v705->__r_.__value_.__r.__words[0] = 0;
    v632->i32[2] = 1125515264;
    v632->f32[3] = v675 + 50.0;
    if (__p[23] >= 0)
      v708 = (int8x16_t *)__p;
    else
      v708 = *(int8x16_t **)__p;
    if (__p[23] >= 0)
      v709 = __p[23];
    else
      v709 = *(_QWORD *)&__p[8];
    *(float *)&v706 = v675 + 50.0;
    ggl::DebugConsole::drawString((uint64_t)v632, v708, v709, v706, *(int32x2_t *)&v707);
    if ((__p[23] & 0x80000000) != 0)
      operator delete(*(void **)__p);
    if (SHIBYTE(v840[0].__r_.__value_.__r.__words[2]) < 0)
      operator delete(v840[0].__r_.__value_.__l.__data_);
    v712 = v861;
    v713 = *(uint64_t **)(v861 + 216);
    if (*v713 == v713[1])
      goto LABEL_814;
    memset(__p, 0, 24);
    v714 = *v713;
    v715 = v713[1];
    if (*v713 == v715)
      goto LABEL_813;
    v716 = 0;
    LODWORD(v710) = 1120403456;
    v717 = v675 + 100.0;
    v718 = -1;
    v719 = 4;
    v720 = -1;
    while (1)
    {
      v721 = *(_QWORD *)v714;
      v722 = *(unsigned __int8 *)(v714 + 9);
      v723 = *(_DWORD *)(v714 + 16);
      v724 = *(_DWORD *)(v714 + 24);
      if (v716 == *(_QWORD *)v714)
      {
        _ZF = v722 == v718 && v723 == v720;
        if (_ZF && v724 == v719)
        {
          v721 = v716;
          goto LABEL_792;
        }
      }
      v727 = __p[23];
      if (__p[23] < 0)
        v727 = *(_QWORD *)&__p[8];
      if (v727)
      {
        v632->i32[2] = 1125515264;
        v632->f32[3] = v717;
        if (__p[23] >= 0)
          v728 = (int8x16_t *)__p;
        else
          v728 = *(int8x16_t **)__p;
        if (__p[23] >= 0)
          v729 = __p[23];
        else
          v729 = *(_QWORD *)&__p[8];
        ggl::DebugConsole::drawString((uint64_t)v632, v728, v729, v710, *(int32x2_t *)&v711);
        v717 = v717 + 25.0;
        v730 = *(_QWORD *)v714;
      }
      else
      {
        v730 = *(_QWORD *)v714;
      }
      std::to_string(&v852, v730);
      v731 = std::string::insert(&v852, 0, "Point: ", 7uLL);
      v732 = *(_OWORD *)&v731->__r_.__value_.__l.__data_;
      *(_QWORD *)&v857 = *((_QWORD *)&v731->__r_.__value_.__l + 2);
      v856 = v732;
      v731->__r_.__value_.__l.__size_ = 0;
      v731->__r_.__value_.__r.__words[2] = 0;
      v731->__r_.__value_.__r.__words[0] = 0;
      v733 = std::string::append((std::string *)&v856, " Lod: ", 6uLL);
      v734 = v733->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v819.__r_.__value_.__l.__data_ = *(_OWORD *)&v733->__r_.__value_.__l.__data_;
      v819.__r_.__value_.__r.__words[2] = v734;
      v733->__r_.__value_.__l.__size_ = 0;
      v733->__r_.__value_.__r.__words[2] = 0;
      v733->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v815, *(unsigned __int8 *)(v714 + 9));
      if ((v815.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v735 = &v815;
      else
        v735 = (std::string *)v815.__r_.__value_.__r.__words[0];
      if ((v815.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v736 = HIBYTE(v815.__r_.__value_.__r.__words[2]);
      else
        v736 = v815.__r_.__value_.__l.__size_;
      v737 = std::string::append(&v819, (const std::string::value_type *)v735, v736);
      v738 = v737->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v828.__r_.__value_.__l.__data_ = *(_OWORD *)&v737->__r_.__value_.__l.__data_;
      v828.__r_.__value_.__r.__words[2] = v738;
      v737->__r_.__value_.__l.__size_ = 0;
      v737->__r_.__value_.__r.__words[2] = 0;
      v737->__r_.__value_.__r.__words[0] = 0;
      v739 = std::string::append(&v828, " Priority: ", 0xBuLL);
      v740 = v739->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v840[0].__r_.__value_.__l.__data_ = *(_OWORD *)&v739->__r_.__value_.__l.__data_;
      v840[0].__r_.__value_.__r.__words[2] = v740;
      v739->__r_.__value_.__l.__size_ = 0;
      v739->__r_.__value_.__r.__words[2] = 0;
      v739->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v814, *(_DWORD *)(v714 + 16));
      if ((v814.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v741 = &v814;
      else
        v741 = (std::string *)v814.__r_.__value_.__r.__words[0];
      if ((v814.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v742 = HIBYTE(v814.__r_.__value_.__r.__words[2]);
      else
        v742 = v814.__r_.__value_.__l.__size_;
      v743 = std::string::append(v840, (const std::string::value_type *)v741, v742);
      v744 = v743->__r_.__value_.__r.__words[0];
      v862[0] = (id)v743->__r_.__value_.__l.__size_;
      *(id *)((char *)v862 + 7) = *(id *)((char *)&v743->__r_.__value_.__r.__words[1] + 7);
      v745 = HIBYTE(v743->__r_.__value_.__r.__words[2]);
      v743->__r_.__value_.__l.__size_ = 0;
      v743->__r_.__value_.__r.__words[2] = 0;
      v743->__r_.__value_.__r.__words[0] = 0;
      if ((__p[23] & 0x80000000) != 0)
        operator delete(*(void **)__p);
      *(_QWORD *)__p = v744;
      *(id *)&__p[8] = v862[0];
      *(id *)&__p[15] = *(id *)((char *)v862 + 7);
      __p[23] = v745;
      if (SHIBYTE(v814.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v814.__r_.__value_.__l.__data_);
        if ((SHIBYTE(v840[0].__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_771:
          if ((SHIBYTE(v828.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            goto LABEL_772;
          goto LABEL_780;
        }
      }
      else if ((SHIBYTE(v840[0].__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
        goto LABEL_771;
      }
      operator delete(v840[0].__r_.__value_.__l.__data_);
      if ((SHIBYTE(v828.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_772:
        if ((SHIBYTE(v815.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_773;
        goto LABEL_781;
      }
LABEL_780:
      operator delete(v828.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v815.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_773:
        if ((SHIBYTE(v819.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_774;
        goto LABEL_782;
      }
LABEL_781:
      operator delete(v815.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v819.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_774:
        if ((SBYTE7(v857) & 0x80000000) == 0)
          goto LABEL_775;
        goto LABEL_783;
      }
LABEL_782:
      operator delete(v819.__r_.__value_.__l.__data_);
      if ((SBYTE7(v857) & 0x80000000) == 0)
      {
LABEL_775:
        if (SHIBYTE(v852.__r_.__value_.__r.__words[2]) < 0)
          goto LABEL_784;
        goto LABEL_776;
      }
LABEL_783:
      operator delete((void *)v856);
      if (SHIBYTE(v852.__r_.__value_.__r.__words[2]) < 0)
LABEL_784:
        operator delete(v852.__r_.__value_.__l.__data_);
LABEL_776:
      switch(*(_DWORD *)(v714 + 24))
      {
        case 0:
          std::string::append((std::string *)__p, " Loading", 8uLL);
          v632[6].i32[0] = -1;
          break;
        case 1:
          std::string::append((std::string *)__p, " Complete", 9uLL);
          v748 = -16711936;
          goto LABEL_790;
        case 2:
          std::string::append((std::string *)__p, " Cancelled", 0xAuLL);
          v748 = -16711681;
          goto LABEL_790;
        case 3:
          v746 = " Missing";
          v747 = 8;
          goto LABEL_788;
        case 4:
          v746 = " Failed";
          v747 = 7;
LABEL_788:
          std::string::append((std::string *)__p, v746, v747);
          v748 = -16776961;
LABEL_790:
          v632[6].i32[0] = v748;
          break;
        default:
          break;
      }
      std::string::append((std::string *)__p, " Cam: ", 6uLL);
      v718 = v722;
      v720 = v723;
      v719 = v724;
LABEL_792:
      std::to_string(&v828, *(unsigned __int8 *)(v714 + 8));
      v749 = std::string::append(&v828, " ", 1uLL);
      v750 = v749->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v840[0].__r_.__value_.__l.__data_ = *(_OWORD *)&v749->__r_.__value_.__l.__data_;
      v840[0].__r_.__value_.__r.__words[2] = v750;
      v749->__r_.__value_.__l.__size_ = 0;
      v749->__r_.__value_.__r.__words[2] = 0;
      v749->__r_.__value_.__r.__words[0] = 0;
      if ((v840[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v751 = v840;
      else
        v751 = (std::string *)v840[0].__r_.__value_.__r.__words[0];
      if ((v840[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v752 = HIBYTE(v840[0].__r_.__value_.__r.__words[2]);
      else
        v752 = v840[0].__r_.__value_.__l.__size_;
      std::string::append((std::string *)__p, (const std::string::value_type *)v751, v752);
      if (SHIBYTE(v840[0].__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v840[0].__r_.__value_.__l.__data_);
        if (SHIBYTE(v828.__r_.__value_.__r.__words[2]) < 0)
          goto LABEL_800;
      }
      else if (SHIBYTE(v828.__r_.__value_.__r.__words[2]) < 0)
      {
LABEL_800:
        operator delete(v828.__r_.__value_.__l.__data_);
      }
      v714 += 32;
      v716 = v721;
      if (v714 == v715)
      {
        v753 = __p[23];
        v754 = *(_QWORD *)&__p[8];
        if (__p[23] >= 0)
          v754 = __p[23];
        if (v754)
        {
          v632->i32[2] = 1125515264;
          v632->f32[3] = v717;
          if (__p[23] >= 0)
            v755 = (int8x16_t *)__p;
          else
            v755 = *(int8x16_t **)__p;
          if (__p[23] >= 0)
            v756 = __p[23];
          else
            v756 = *(_QWORD *)&__p[8];
          ggl::DebugConsole::drawString((uint64_t)v632, v755, v756, v710, *(int32x2_t *)&v711);
          v753 = __p[23];
        }
        if (v753 < 0)
          operator delete(*(void **)__p);
LABEL_813:
        v712 = v861;
        this = v813;
LABEL_814:
        v632[6].i32[0] = -1;
        v758 = *(_QWORD *)(v712 + 40);
        v757 = *(_QWORD *)(v712 + 48);
        if (v758 != v757)
        {
          while (*(_BYTE *)v758 != 1)
          {
            v758 += 272;
            if (v758 == v757)
              goto LABEL_817;
          }
          if (*(_BYTE *)(v758 + 128))
          {
            v764 = (void *)*((_QWORD *)this + 40);
            *((_QWORD *)this + 41) = v764;
            v765 = 0x367D6E020E64C149 * ((uint64_t)(*(_QWORD *)(v758 + 144) - *(_QWORD *)(v758 + 136)) >> 3);
            if (v765 > (uint64_t)(*((_QWORD *)this + 42) - (_QWORD)v764) >> 3)
            {
              if (v765 >> 61)
                abort();
              v766 = (char *)operator new(0xB3EB701073260A48* ((uint64_t)(*(_QWORD *)(v758 + 144) - *(_QWORD *)(v758 + 136)) >> 3));
              *((_QWORD *)this + 40) = v766;
              *((_QWORD *)this + 41) = v766;
              *((_QWORD *)this + 42) = &v766[8 * v765];
              if (v764)
                operator delete(v764);
            }
            *((_QWORD *)this + 43) = 0;
            v767 = *(_QWORD **)(v758 + 136);
            v768 = *(_QWORD **)(v758 + 144);
            if (v767 != v768)
            {
              v769 = (char *)*((_QWORD *)this + 41);
              while (1)
              {
                v771 = *((_QWORD *)this + 42);
                if ((unint64_t)v769 >= v771)
                  break;
                *(_QWORD *)v769 = *v767;
                v770 = v769 + 8;
LABEL_829:
                *((_QWORD *)this + 41) = v770;
                v767 += 249;
                v769 = v770;
                if (v767 == v768)
                  goto LABEL_817;
              }
              v772 = (char *)*((_QWORD *)this + 40);
              v773 = (v769 - v772) >> 3;
              v774 = v773 + 1;
              if ((unint64_t)(v773 + 1) >> 61)
                abort();
              v775 = v771 - (_QWORD)v772;
              if (v775 >> 2 > v774)
                v774 = v775 >> 2;
              if ((unint64_t)v775 >= 0x7FFFFFFFFFFFFFF8)
                v776 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v776 = v774;
              if (v776)
              {
                if (v776 >> 61)
                  goto LABEL_895;
                v777 = operator new(8 * v776);
              }
              else
              {
                v777 = 0;
              }
              v778 = &v777[8 * v773];
              *v778 = *v767;
              v770 = (char *)(v778 + 1);
              if (v769 == v772)
              {
                this = v813;
                goto LABEL_847;
              }
              v779 = v769 - 8 - v772;
              if (v779 < 0x168
                || &v777[v769 - v772 - 8 - (v779 & 0xFFFFFFFFFFFFFFF8)] > &v777[v769 - v772 - 8]
                || &v769[-(v779 & 0xFFFFFFFFFFFFFFF8) - 8] > v769 - 8
                || (unint64_t)(v772 - v777) < 0x20)
              {
                v780 = v769;
                this = v813;
              }
              else
              {
                v782 = (v779 >> 3) + 1;
                v780 = &v769[-8 * (v782 & 0x3FFFFFFFFFFFFFFCLL)];
                v783 = &v777[8 * v773 - 16];
                v784 = v769 - 16;
                v785 = v782 & 0x3FFFFFFFFFFFFFFCLL;
                do
                {
                  v711 = *((_OWORD *)v784 - 1);
                  v786 = *(_OWORD *)v784;
                  *(v783 - 1) = v711;
                  *v783 = v786;
                  v783 -= 2;
                  v784 -= 32;
                  v785 -= 4;
                }
                while (v785);
                v778 -= v782 & 0x3FFFFFFFFFFFFFFCLL;
                this = v813;
                if (v782 == (v782 & 0x3FFFFFFFFFFFFFFCLL))
                {
LABEL_847:
                  *((_QWORD *)this + 40) = v778;
                  *((_QWORD *)this + 41) = v770;
                  *((_QWORD *)this + 42) = &v777[8 * v776];
                  if (v772)
                    operator delete(v772);
                  goto LABEL_829;
                }
              }
              do
              {
                v781 = *((_QWORD *)v780 - 1);
                v780 -= 8;
                *--v778 = v781;
              }
              while (v780 != v772);
              goto LABEL_847;
            }
          }
        }
LABEL_817:
        v759 = (uint64_t)(*((_QWORD *)this + 41) - *((_QWORD *)this + 40)) >> 3;
        v760 = *(_QWORD *)(v861 + 40);
        v761 = *(_QWORD *)(v861 + 48);
        v762 = 1.0;
        if (v760 == v761)
        {
LABEL_820:
          v763 = 1.0;
        }
        else
        {
          while (*(_BYTE *)v760 != 3)
          {
            v760 += 272;
            if (v760 == v761)
              goto LABEL_820;
          }
          v763 = 1.0;
          if (*(_BYTE *)(v760 + 168))
          {
            v759 = *(_QWORD *)(v760 + 256);
            v762 = *(float *)(v760 + 268);
            v763 = *(float *)(v760 + 264);
          }
        }
        v632->i64[1] = 0x4389800044B54000;
        ggl::DebugConsole::drawString((uint64_t)v632, (int8x16_t *)"Path:", 5uLL, 2.29683618e17, *(int32x2_t *)&v711);
        v787 = (unint64_t *)*((_QWORD *)this + 40);
        v788 = (unint64_t *)*((_QWORD *)this + 41);
        if (v787 == v788)
        {
          v790 = 300.0;
        }
        else
        {
          v789 = v759 + 1;
          v790 = 300.0;
          do
          {
            _CF = v789-- != 0;
            v791 = v789 != 0;
            if (!_CF)
              v791 = 0;
            v792 = v791 << 31 >> 31;
            v632[6].i8[0] = v792;
            v632[6].i8[1] = -1;
            v632[6].i8[2] = v792;
            v632[6].i8[3] = -1;
            std::to_string((std::string *)__p, *v787);
            v632->i32[2] = 1152729088;
            v632->f32[3] = v790;
            if (__p[23] >= 0)
              v795 = (int8x16_t *)__p;
            else
              v795 = *(int8x16_t **)__p;
            if (__p[23] >= 0)
              v796 = __p[23];
            else
              v796 = *(_QWORD *)&__p[8];
            ggl::DebugConsole::drawString((uint64_t)v632, v795, v796, v793, v794);
            if ((__p[23] & 0x80000000) != 0)
              operator delete(*(void **)__p);
            v790 = v790 + 25.0;
            ++v787;
          }
          while (v787 != v788);
        }
        v632[6].i32[0] = -1;
        std::to_string(v840, v763);
        v797 = std::string::insert(v840, 0, "Segment Fraction: ", 0x12uLL);
        v799 = *(_OWORD *)&v797->__r_.__value_.__l.__data_;
        *(_QWORD *)&__p[16] = *((_QWORD *)&v797->__r_.__value_.__l + 2);
        *(_OWORD *)__p = v799;
        v797->__r_.__value_.__l.__size_ = 0;
        v797->__r_.__value_.__r.__words[2] = 0;
        v797->__r_.__value_.__r.__words[0] = 0;
        v632->i32[2] = 1152729088;
        v632->f32[3] = v790 + 25.0;
        if (__p[23] >= 0)
          v800 = (int8x16_t *)__p;
        else
          v800 = *(int8x16_t **)__p;
        if (__p[23] >= 0)
          v801 = __p[23];
        else
          v801 = *(_QWORD *)&__p[8];
        *(float *)&v798 = v790 + 25.0;
        ggl::DebugConsole::drawString((uint64_t)v632, v800, v801, v798, *(int32x2_t *)&v799);
        if ((__p[23] & 0x80000000) != 0)
          operator delete(*(void **)__p);
        if (SHIBYTE(v840[0].__r_.__value_.__r.__words[2]) < 0)
          operator delete(v840[0].__r_.__value_.__l.__data_);
        std::to_string(v840, v762);
        v802 = std::string::insert(v840, 0, "Fraction: ", 0xAuLL);
        v804 = *(_OWORD *)&v802->__r_.__value_.__l.__data_;
        *(_QWORD *)&__p[16] = *((_QWORD *)&v802->__r_.__value_.__l + 2);
        *(_OWORD *)__p = v804;
        v802->__r_.__value_.__l.__size_ = 0;
        v802->__r_.__value_.__r.__words[2] = 0;
        v802->__r_.__value_.__r.__words[0] = 0;
        v632->i32[2] = 1152729088;
        v632->f32[3] = v790 + 50.0;
        if (__p[23] >= 0)
          v805 = (int8x16_t *)__p;
        else
          v805 = *(int8x16_t **)__p;
        if (__p[23] >= 0)
          v806 = __p[23];
        else
          v806 = *(_QWORD *)&__p[8];
        *(float *)&v803 = v790 + 50.0;
        ggl::DebugConsole::drawString((uint64_t)v632, v805, v806, v803, *(int32x2_t *)&v804);
        if ((__p[23] & 0x80000000) != 0)
          operator delete(*(void **)__p);
        if (SHIBYTE(v840[0].__r_.__value_.__r.__words[2]) < 0)
          operator delete(v840[0].__r_.__value_.__l.__data_);
        ggl::DebugConsole::end((uint64_t)v632);
LABEL_893:

        return;
      }
    }
  }
  v233 = *(_BYTE **)(v861 + 40);
  while (*v233 != 3)
  {
    v233 += 272;
    if (v233 == v232)
      goto LABEL_513;
  }
  v257 = *(id *)v2;
  objc_msgSend(v257, "size");
  v259 = v258;
  objc_msgSend(*(id *)v2, "size");
  v261 = v260;

  v262 = *(_QWORD *)(v861 + 232);
  v263 = v855;
  v264 = (char *)operator new(0x70uLL);
  *(_QWORD *)v264 = &off_1E42D40F0;
  v265 = v259 * 95.0 / v261;
  *((double *)v264 + 1) = -v265;
  *((_OWORD *)v264 + 1) = xmmword_19FFB50D0;
  *((double *)v264 + 4) = v265;
  *(_OWORD *)(v264 + 40) = xmmword_19FFB50E0;
  *(std::string *)(v264 + 56) = v852;
  *((_OWORD *)v264 + 5) = v853;
  *((double *)v264 + 12) = v854;
  *((double *)v264 + 13) = v263;
  *(_QWORD *)&__p[24] = v264;
  memset(v840, 0, 24);
  v266 = (pthread_rwlock_t *)(v262 + 96);
  v828.__r_.__value_.__r.__words[0] = v262 + 96;
  v267 = (geo::read_write_lock *)pthread_rwlock_rdlock((pthread_rwlock_t *)(v262 + 96));
  if ((_DWORD)v267)
    geo::read_write_lock::logFailure(v267, (uint64_t)"read lock", v268);
  v269 = *(_QWORD **)(v262 + 48);
  v808 = (_QWORD *)(v262 + 56);
  if (v269 == (_QWORD *)(v262 + 56))
  {
LABEL_440:
    v407 = (geo::read_write_lock *)pthread_rwlock_unlock(v266);
    if ((_DWORD)v407)
      geo::read_write_lock::logFailure(v407, (uint64_t)"unlock", v408);
    v409 = *(_QWORD **)&__p[24];
    if (*(_BYTE **)&__p[24] == __p)
    {
      v410 = 4;
      v409 = __p;
    }
    else
    {
      if (!*(_QWORD *)&__p[24])
        goto LABEL_460;
      v410 = 5;
    }
    (*(void (**)(void))(*v409 + 8 * v410))();
LABEL_460:
    v419 = 126
         - 2
         * __clz(0x63FB9AEB1FDCD759* ((uint64_t)(v840[0].__r_.__value_.__l.__size_ - v840[0].__r_.__value_.__r.__words[0]) >> 3));
    if (v840[0].__r_.__value_.__l.__size_ == v840[0].__r_.__value_.__r.__words[0])
      v420 = 0;
    else
      v420 = v419;
    std::__introsort<std::_ClassicAlgPolicy,md::mun::MuninOverlayRenderLayer::debugLayout(md::LayoutContext const&)::$_0 &,md::mun::CollectionPoint *,false>((uint64_t *)v840[0].__r_.__value_.__l.__data_, (uint64_t *)v840[0].__r_.__value_.__l.__size_, v420, 1);
    LODWORD(v864.f64[0]) = -2133507750;
    *(_OWORD *)__p = xmmword_1A007B794;
    *(_OWORD *)&__p[16] = unk_1A007B7A4;
    v421 = (uint64_t *)*((_QWORD *)this + 20);
    *((_QWORD *)this + 20) = 0;
    if (v421)
    {
      v422 = (std::__shared_weak_count *)v421[3];
      if (v422)
      {
        v423 = (unint64_t *)&v422->__shared_owners_;
        do
          v424 = __ldaxr(v423);
        while (__stlxr(v424 - 1, v423));
        if (!v424)
        {
          ((void (*)(std::__shared_weak_count *))v422->__on_zero_shared)(v422);
          std::__shared_weak_count::__release_weak(v422);
        }
      }
      v425 = v421[1];
      v421[1] = 0;
      if (v425)
        (*(void (**)(uint64_t))(*(_QWORD *)v425 + 8))(v425);
      v426 = *v421;
      *v421 = 0;
      if (v426)
        (*(void (**)(uint64_t))(*(_QWORD *)v426 + 8))(v426);
      MEMORY[0x1A1AF4E00](v421, 0x20C40DC1BFBCFLL);
    }
    v427 = (uint64_t *)*((_QWORD *)this + 21);
    *((_QWORD *)this + 21) = 0;
    if (v427)
    {
      v428 = (std::__shared_weak_count *)v427[3];
      if (v428)
      {
        v429 = (unint64_t *)&v428->__shared_owners_;
        do
          v430 = __ldaxr(v429);
        while (__stlxr(v430 - 1, v429));
        if (!v430)
        {
          ((void (*)(std::__shared_weak_count *))v428->__on_zero_shared)(v428);
          std::__shared_weak_count::__release_weak(v428);
        }
      }
      v431 = v427[1];
      v427[1] = 0;
      if (v431)
        (*(void (**)(uint64_t))(*(_QWORD *)v431 + 8))(v431);
      v432 = *v427;
      *v427 = 0;
      if (v432)
        (*(void (**)(uint64_t))(*(_QWORD *)v432 + 8))(v432);
      MEMORY[0x1A1AF4E00](v427, 0x20C40DC1BFBCFLL);
    }
    v433 = v840[0].__r_.__value_.__r.__words[0];
    if (v840[0].__r_.__value_.__r.__words[0] == v840[0].__r_.__value_.__l.__size_)
    {
LABEL_496:
      if (v433)
      {
        v438 = v840[0].__r_.__value_.__l.__size_;
        v439 = (void *)v433;
        if (v840[0].__r_.__value_.__l.__size_ != v433)
        {
          do
          {
            v440 = v438 - 1864;
            v441 = *(_QWORD **)(v438 - 1776);
            v442 = *(_QWORD **)(v438 - 1768);
            if (v441 != v442)
            {
              do
              {
                v443 = (void *)v441[31];
                if (v443 != (void *)v441[33])
                  free(v443);
                v441 += 36;
              }
              while (v441 != v442);
              v441 = *(_QWORD **)(v438 - 1776);
            }
            if (v441 != *(_QWORD **)(v438 - 1760))
              free(v441);
            v438 -= 1864;
          }
          while (v440 != v433);
          v439 = (void *)v840[0].__r_.__value_.__r.__words[0];
        }
        v840[0].__r_.__value_.__l.__size_ = v433;
        operator delete(v439);
      }
      v230 = v861;
      v231 = *(_QWORD *)(v861 + 40);
      v232 = *(_BYTE **)(v861 + 48);
LABEL_513:
      while ((_BYTE *)v231 != v232)
      {
        if (!*(_BYTE *)v231)
        {
          if (*(_BYTE *)(v231 + 8))
          {
            v444 = *(double *)(v231 + 80);
            v445 = *(double *)(v231 + 88);
            v447 = *(double *)(v231 + 96);
            v446 = *(double *)(v231 + 104);
            v448 = *(double *)(v231 + 112);
            v449 = *(double *)(v231 + 120);
            v450 = fmin(sqrt((v446 - v444) * (v446 - v444) + (v448 - v445) * (v448 - v445) + (v449 - v447) * (v449 - v447)), *(double *)(*(_QWORD *)(v230 + 224) + 16));
            v451 = v444 - v446;
            v452 = v445 - v448;
            v453 = v447 - v449;
            v454 = v450 / sqrt(v451 * v451 + v452 * v452 + v453 * v453);
            *((_QWORD *)this + 33) = 0;
            *((_QWORD *)this + 34) = 0;
            *((_QWORD *)this + 35) = 0;
            *((_QWORD *)this + 36) = 0x3FF0000000000000;
            *((double *)this + 30) = v446 + v454 * v451;
            *((double *)this + 31) = v448 + v454 * v452;
            *((double *)this + 32) = v449 + v454 * v453;
          }
          goto LABEL_517;
        }
        v231 += 272;
      }
      goto LABEL_517;
    }
    memset(&v828, 0, sizeof(v828));
    memset(&v819, 0, sizeof(v819));
    v815.__r_.__value_.__r.__words[0] = 0;
    v814.__r_.__value_.__r.__words[0] = 0;
    v434 = *(_QWORD *)(v861 + 232);
    v871 = 0;
    v435 = operator new(0x70uLL);
    *v435 = &off_1E42D4138;
    v435[1] = &v852;
    v435[2] = &v828;
    v435[3] = &v860;
    v435[4] = &v861;
    v435[5] = &v819;
    v435[6] = v840;
    v435[7] = &v815;
    v435[8] = &v814;
    v435[9] = __p;
    v435[10] = this;
    v435[11] = v2;
    v435[12] = v862;
    v435[13] = &v856;
    v871 = v435;
    md::mun::MuninMetadataContainer::navigationGraphAccessor(v434, (uint64_t)v870);
    v436 = v871;
    if (v871 == v870)
    {
      v437 = 4;
      v436 = v870;
    }
    else
    {
      if (!v871)
      {
LABEL_491:
        if (v819.__r_.__value_.__r.__words[0])
        {
          v819.__r_.__value_.__l.__size_ = v819.__r_.__value_.__r.__words[0];
          operator delete(v819.__r_.__value_.__l.__data_);
        }
        if (v828.__r_.__value_.__r.__words[0])
        {
          v828.__r_.__value_.__l.__size_ = v828.__r_.__value_.__r.__words[0];
          operator delete(v828.__r_.__value_.__l.__data_);
        }
        v433 = v840[0].__r_.__value_.__r.__words[0];
        goto LABEL_496;
      }
      v437 = 5;
    }
    (*(void (**)(void))(*v436 + 8 * v437))();
    goto LABEL_491;
  }
  while (1)
  {
    v270 = v269[4];
    v272 = *(_QWORD *)(v270 + 168);
    v271 = *(_QWORD *)(v270 + 176);
    v810 = v271;
    if (v272 != v271)
      break;
LABEL_304:
    v273 = (_QWORD *)v269[1];
    if (v273)
    {
      do
      {
        v274 = v273;
        v273 = (_QWORD *)*v273;
      }
      while (v273);
    }
    else
    {
      do
      {
        v274 = (_QWORD *)v269[2];
        _ZF = *v274 == (_QWORD)v269;
        v269 = v274;
      }
      while (!_ZF);
    }
    v269 = v274;
    if (v274 == v808)
    {
      v266 = (pthread_rwlock_t *)v828.__r_.__value_.__r.__words[0];
      goto LABEL_440;
    }
  }
LABEL_313:
  if (*(_QWORD *)&__p[24])
  {
    if (!(*(unsigned int (**)(_QWORD, uint64_t))(**(_QWORD **)&__p[24] + 48))(*(_QWORD *)&__p[24], v272))
      goto LABEL_312;
    v276 = v840[0].__r_.__value_.__l.__size_;
    if (v840[0].__r_.__value_.__l.__size_ >= v840[0].__r_.__value_.__r.__words[2])
    {
      v275 = std::vector<md::mun::CollectionPoint>::__push_back_slow_path<md::mun::CollectionPoint const&>((uint64_t *)v840, v272);
      goto LABEL_311;
    }
    *(_QWORD *)v840[0].__r_.__value_.__l.__size_ = *(_QWORD *)v272;
    v277 = *(_OWORD *)(v272 + 8);
    *(_QWORD *)(v276 + 24) = *(_QWORD *)(v272 + 24);
    *(_OWORD *)(v276 + 8) = v277;
    v278 = *(_QWORD *)(v272 + 32);
    *(_DWORD *)(v276 + 40) = *(_DWORD *)(v272 + 40);
    *(_QWORD *)(v276 + 32) = v278;
    *(_QWORD *)(v276 + 44) = *(_QWORD *)(v272 + 44);
    v279 = *(_OWORD *)(v272 + 56);
    *(_OWORD *)(v276 + 72) = *(_OWORD *)(v272 + 72);
    *(_OWORD *)(v276 + 56) = v279;
    v280 = (char *)(v276 + 120);
    *(_QWORD *)(v276 + 88) = v276 + 120;
    *(_QWORD *)(v276 + 96) = v276 + 120;
    *(_QWORD *)(v276 + 104) = v276 + 120;
    *(_QWORD *)(v276 + 112) = 6;
    v281 = *(__int128 **)(v272 + 88);
    v282 = *(__int128 **)(v272 + 96);
    v283 = 0x8E38E38E38E38E39 * (((char *)v282 - (char *)v281) >> 5);
    if (v283 < 7)
      goto LABEL_347;
    if (v283 <= 8)
      v284 = 8;
    else
      v284 = 0x8E38E38E38E38E39 * (((char *)v282 - (char *)v281) >> 5);
    v285 = (char *)malloc_type_malloc(288 * v284, 0x1010040C6D9B592uLL);
    v280 = v285;
    v286 = *(__int128 **)(v276 + 88);
    v287 = *(__int128 **)(v276 + 96);
    if (v286 == v287)
      goto LABEL_346;
    v288 = 0;
    v289 = v285;
    while (1)
    {
      v290 = *v286;
      *((_QWORD *)v289 + 2) = *((_QWORD *)v286 + 2);
      *(_OWORD *)v289 = v290;
      v291 = *((_QWORD *)v286 + 3);
      *((_DWORD *)v289 + 8) = *((_DWORD *)v286 + 8);
      *((_QWORD *)v289 + 3) = v291;
      *(_QWORD *)(v289 + 36) = *(_QWORD *)((char *)v286 + 36);
      v292 = *(__int128 *)((char *)v286 + 44);
      v293 = *(__int128 *)((char *)v286 + 60);
      v294 = *(__int128 *)((char *)v286 + 76);
      *(_OWORD *)(v289 + 92) = *(__int128 *)((char *)v286 + 92);
      *(_OWORD *)(v289 + 76) = v294;
      *(_OWORD *)(v289 + 60) = v293;
      *(_OWORD *)(v289 + 44) = v292;
      v295 = *(__int128 *)((char *)v286 + 108);
      v296 = *(__int128 *)((char *)v286 + 124);
      v297 = *(__int128 *)((char *)v286 + 140);
      *(_OWORD *)(v289 + 156) = *(__int128 *)((char *)v286 + 156);
      *(_OWORD *)(v289 + 140) = v297;
      *(_OWORD *)(v289 + 124) = v296;
      *(_OWORD *)(v289 + 108) = v295;
      v298 = *(__int128 *)((char *)v286 + 172);
      v299 = *(__int128 *)((char *)v286 + 188);
      v300 = *(__int128 *)((char *)v286 + 204);
      *(_OWORD *)(v289 + 220) = *(__int128 *)((char *)v286 + 220);
      *(_OWORD *)(v289 + 204) = v300;
      *(_OWORD *)(v289 + 188) = v299;
      *(_OWORD *)(v289 + 172) = v298;
      v301 = v289 + 280;
      *((_QWORD *)v289 + 31) = v289 + 280;
      v302 = (char *)*((_QWORD *)v286 + 31);
      *((_DWORD *)v289 + 59) = *((_DWORD *)v286 + 59);
      v289[240] = *((_BYTE *)v286 + 240);
      *((_QWORD *)v289 + 32) = v289 + 280;
      *((_QWORD *)v289 + 33) = v289 + 280;
      *((_QWORD *)v289 + 34) = *((_QWORD *)v286 + 34);
      if (v302 == *((char **)v286 + 33))
      {
        *((_QWORD *)v289 + 32) = &v301[*((_QWORD *)v286 + 32) - (_QWORD)v302];
        v303 = (char *)*((_QWORD *)v286 + 32);
        if (v302 != v303)
        {
          v304 = v303 - v302;
          if ((unint64_t)(v303 - v302) >= 8 && (unint64_t)(&v280[288 * v288 + 280] - v302) >= 0x20)
          {
            if (v304 < 0x20)
            {
              v305 = 0;
              goto LABEL_334;
            }
            v306 = 0;
            v305 = v304 & 0xFFFFFFFFFFFFFFE0;
            do
            {
              v307 = *(_OWORD *)&v302[v306 + 16];
              *(_OWORD *)&v289[v306 + 280] = *(_OWORD *)&v302[v306];
              *(_OWORD *)&v289[v306 + 296] = v307;
              v306 += 32;
            }
            while (v305 != v306);
            if (v304 == v305)
              goto LABEL_323;
            if ((v304 & 0x18) != 0)
            {
LABEL_334:
              v308 = v304 & 0xFFFFFFFFFFFFFFF8;
              v301 += v304 & 0xFFFFFFFFFFFFFFF8;
              do
              {
                *(_QWORD *)&v289[v305 + 280] = *(_QWORD *)&v302[v305];
                v305 += 8;
              }
              while (v308 != v305);
              if (v304 == v308)
                goto LABEL_323;
              v302 += v308;
            }
            else
            {
              v302 += v305;
              v301 += v305;
            }
          }
          do
          {
            v309 = *v302++;
            *v301++ = v309;
          }
          while (v302 != v303);
        }
      }
      else
      {
        *((_QWORD *)v289 + 31) = v302;
        *((_QWORD *)v289 + 32) = *((_QWORD *)v286 + 32);
        *(__int128 *)((char *)v286 + 248) = 0u;
        *(__int128 *)((char *)v286 + 264) = 0u;
      }
LABEL_323:
      v289 += 288;
      v286 += 18;
      ++v288;
      if (v286 == v287)
      {
        v310 = *(_QWORD *)(v276 + 88);
        v311 = *(_QWORD *)(v276 + 96);
        while (v310 != v311)
        {
          v312 = *(void **)(v310 + 248);
          if (v312 != *(void **)(v310 + 264))
            free(v312);
          v310 += 288;
        }
LABEL_346:
        *(_QWORD *)(v276 + 88) = v280;
        *(_QWORD *)(v276 + 96) = v280;
        *(_QWORD *)(v276 + 112) = v284;
        v283 = 0x8E38E38E38E38E39 * (((char *)v282 - (char *)v281) >> 5);
        this = v813;
LABEL_347:
        if (v281 == v282)
          goto LABEL_391;
        v811 = v283;
        while (2)
        {
          v314 = *v281;
          *((_QWORD *)v280 + 2) = *((_QWORD *)v281 + 2);
          *(_OWORD *)v280 = v314;
          v315 = *((_QWORD *)v281 + 3);
          *((_DWORD *)v280 + 8) = *((_DWORD *)v281 + 8);
          *((_QWORD *)v280 + 3) = v315;
          *(_QWORD *)(v280 + 36) = *(_QWORD *)((char *)v281 + 36);
          v316 = *(__int128 *)((char *)v281 + 44);
          v317 = *(__int128 *)((char *)v281 + 60);
          v318 = *(__int128 *)((char *)v281 + 76);
          *(_OWORD *)(v280 + 92) = *(__int128 *)((char *)v281 + 92);
          *(_OWORD *)(v280 + 76) = v318;
          *(_OWORD *)(v280 + 60) = v317;
          *(_OWORD *)(v280 + 44) = v316;
          v319 = *(__int128 *)((char *)v281 + 108);
          v320 = *(__int128 *)((char *)v281 + 124);
          v321 = *(__int128 *)((char *)v281 + 140);
          *(_OWORD *)(v280 + 156) = *(__int128 *)((char *)v281 + 156);
          *(_OWORD *)(v280 + 140) = v321;
          *(_OWORD *)(v280 + 124) = v320;
          *(_OWORD *)(v280 + 108) = v319;
          v322 = *(__int128 *)((char *)v281 + 172);
          v323 = *(__int128 *)((char *)v281 + 188);
          v324 = *(__int128 *)((char *)v281 + 204);
          *(_OWORD *)(v280 + 220) = *(__int128 *)((char *)v281 + 220);
          *(_OWORD *)(v280 + 204) = v324;
          *(_OWORD *)(v280 + 188) = v323;
          *(_OWORD *)(v280 + 172) = v322;
          *((_DWORD *)v280 + 59) = *((_DWORD *)v281 + 59);
          v280[240] = *((_BYTE *)v281 + 240);
          v313 = v280 + 280;
          *((_QWORD *)v280 + 31) = v280 + 280;
          *((_QWORD *)v280 + 32) = v280 + 280;
          *((_QWORD *)v280 + 33) = v280 + 280;
          *((_QWORD *)v280 + 34) = 2;
          v326 = (char *)*((_QWORD *)v281 + 31);
          v325 = (char *)*((_QWORD *)v281 + 32);
          v327 = v325 - v326;
          if ((unint64_t)(v325 - v326) < 3)
            goto LABEL_372;
          if (v327 <= 4)
            v328 = 4;
          else
            v328 = v325 - v326;
          v313 = (char *)malloc_type_malloc(v328, 0x100004077774924uLL);
          v329 = (char *)*((_QWORD *)v280 + 31);
          v330 = (char *)*((_QWORD *)v280 + 32);
          if (v329 == v330)
            goto LABEL_371;
          v331 = v330 - v329;
          if ((unint64_t)(v330 - v329) < 8)
          {
            v332 = v313;
            goto LABEL_370;
          }
          v332 = v313;
          if ((unint64_t)(v313 - v329) < 0x20)
            goto LABEL_370;
          if (v331 >= 0x20)
          {
            v333 = v331 & 0xFFFFFFFFFFFFFFE0;
            v334 = (__int128 *)(v329 + 16);
            v335 = v313 + 16;
            v336 = v331 & 0xFFFFFFFFFFFFFFE0;
            do
            {
              v337 = *v334;
              *(v335 - 1) = *(v334 - 1);
              *v335 = v337;
              v334 += 2;
              v335 += 2;
              v336 -= 32;
            }
            while (v336);
            if (v331 == v333)
              goto LABEL_371;
            if ((v331 & 0x18) != 0)
              goto LABEL_365;
            v329 += v333;
            v332 = &v313[v333];
            do
            {
LABEL_370:
              v343 = *v329++;
              *v332++ = v343;
            }
            while (v329 != v330);
            goto LABEL_371;
          }
          v333 = 0;
LABEL_365:
          v338 = v331 & 0xFFFFFFFFFFFFFFF8;
          v332 = &v313[v331 & 0xFFFFFFFFFFFFFFF8];
          v339 = v333 - (v331 & 0xFFFFFFFFFFFFFFF8);
          v340 = (uint64_t *)&v329[v333];
          v341 = &v313[v333];
          do
          {
            v342 = *v340++;
            *(_QWORD *)v341 = v342;
            v341 += 8;
            v339 += 8;
          }
          while (v339);
          if (v331 != v338)
          {
            v329 += v338;
            goto LABEL_370;
          }
LABEL_371:
          *((_QWORD *)v280 + 31) = v313;
          *((_QWORD *)v280 + 32) = v313;
          *((_QWORD *)v280 + 34) = v328;
LABEL_372:
          if (v326 == v325)
            goto LABEL_350;
          if (v327 < 8)
          {
            v345 = v313;
            goto LABEL_388;
          }
          if ((unint64_t)(v313 - v326) < 0x20)
          {
            v345 = v313;
            goto LABEL_388;
          }
          if (v327 >= 0x20)
          {
            v344 = v327 & 0xFFFFFFFFFFFFFFE0;
            v346 = (__int128 *)(v326 + 16);
            v347 = v313 + 16;
            v348 = v327 & 0xFFFFFFFFFFFFFFE0;
            do
            {
              v349 = *v346;
              *(v347 - 1) = *(v346 - 1);
              *v347 = v349;
              v346 += 2;
              v347 += 2;
              v348 -= 32;
            }
            while (v348);
            if (v327 == v344)
              goto LABEL_349;
            if ((v327 & 0x18) != 0)
              goto LABEL_383;
            v326 += v344;
            v345 = &v313[v344];
            do
            {
LABEL_388:
              v355 = *v326++;
              *v345++ = v355;
            }
            while (v326 != v325);
            goto LABEL_349;
          }
          v344 = 0;
LABEL_383:
          v350 = v327 & 0xFFFFFFFFFFFFFFF8;
          v345 = &v313[v327 & 0xFFFFFFFFFFFFFFF8];
          v351 = v344 - (v327 & 0xFFFFFFFFFFFFFFF8);
          v352 = (uint64_t *)&v326[v344];
          v353 = &v313[v344];
          do
          {
            v354 = *v352++;
            *(_QWORD *)v353 = v354;
            v353 += 8;
            v351 += 8;
          }
          while (v351);
          if (v327 != v350)
          {
            v326 += v350;
            goto LABEL_388;
          }
LABEL_349:
          v313 = (char *)*((_QWORD *)v280 + 32);
LABEL_350:
          *((_QWORD *)v280 + 32) = &v313[v327];
          v281 += 18;
          v280 += 288;
          if (v281 != v282)
            continue;
          break;
        }
        v280 = *(char **)(v276 + 96);
        this = v813;
        v283 = v811;
LABEL_391:
        *(_QWORD *)(v276 + 96) = &v280[288 * v283];
        v356 = *(_QWORD *)(v272 + 1848);
        *(_QWORD *)(v276 + 1853) = *(_QWORD *)(v272 + 1853);
        *(_QWORD *)(v276 + 1848) = v356;
        v275 = (char *)(v276 + 1864);
        v2 = (const md::LayoutContext *)v809;
        v271 = v810;
LABEL_311:
        v840[0].__r_.__value_.__l.__size_ = (std::string::size_type)v275;
LABEL_312:
        v272 += 1864;
        if (v272 == v271)
          goto LABEL_304;
        goto LABEL_313;
      }
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  __break(1u);
}

void sub_19FA90620(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void *a41)
{
  void *v41;
  void *v43;

  v43 = (void *)STACK[0x320];
  if (STACK[0x320])
  {
    STACK[0x328] = (unint64_t)v43;
    operator delete(v43);
  }
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a41);

  _Unwind_Resume(a1);
}

_QWORD *`anonymous namespace'::createPointsDrawable(id *a1, void *a2, uint64_t *a3, _QWORD *a4, float a5)
{
  uint64_t v9;
  std::__shared_weak_count *v10;
  uint64_t v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  __int128 *v14;
  __int128 v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  char *v21;
  unsigned __int8 v22;
  std::__shared_weak_count *v23;
  std::__shared_weak_count *v24;
  uint64_t *v25;
  unint64_t v26;
  unint64_t v27;
  __int128 v28;
  unint64_t *v29;
  unint64_t v30;
  int8x16_t v31;
  int8x16_t v32;
  int16x8_t v33;
  int32x4_t v34;
  int8x16_t v35;
  int8x16_t v36;
  int16x8_t v37;
  int32x4_t v38;
  int8x16_t v39;
  int32x4_t v40;
  int8x16_t v41;
  int32x4_t v42;
  int8x16_t v43;
  int8x16_t v44;
  int8x16_t v45;
  int8x16_t v46;
  int8x16_t v47;
  int8x16_t v48;
  int8x16_t v49;
  int8x16_t v50;
  int8x16_t v51;
  int16x8_t v52;
  int32x4_t v53;
  int8x16_t v54;
  int16x8_t v55;
  int32x4_t v56;
  int8x16_t v57;
  int32x4_t v58;
  int8x16_t v59;
  int32x4_t v60;
  int8x16_t v61;
  int8x16_t v62;
  int8x16_t v63;
  int8x16_t v64;
  int8x16_t v65;
  int8x16_t v66;
  int8x16_t v67;
  int8x16_t v68;
  int8x16_t v69;
  int8x16_t v70;
  int8x16_t v71;
  int8x16_t v72;
  int8x16_t v73;
  int8x16_t v74;
  int16x8_t v75;
  int32x4_t v76;
  int8x16_t v77;
  int16x8_t v78;
  int32x4_t v79;
  int8x16_t v80;
  int32x4_t v81;
  int8x16_t v82;
  int32x4_t v83;
  int8x16_t v84;
  int8x16_t v85;
  int8x16_t v86;
  int8x16_t v87;
  int8x16_t v88;
  int8x16_t v89;
  int16x8_t v90;
  int32x4_t v91;
  int8x16_t v92;
  int16x8_t v93;
  int32x4_t v94;
  int8x16_t v95;
  int32x4_t v96;
  int8x16_t v97;
  int32x4_t v98;
  int8x16_t v99;
  int8x16_t v100;
  int8x16_t v101;
  int8x16_t v102;
  uint64_t *v103;
  unint64_t v104;
  _QWORD *v105;
  _QWORD *v106;
  uint64_t v107;
  std::__shared_weak_count *v108;
  unint64_t *v109;
  std::__shared_weak_count *v110;
  uint64_t *v111;
  unint64_t v112;
  uint64_t *v113;
  unint64_t v114;
  _QWORD *v115;
  uint64_t v116;
  _QWORD *v117;
  uint64_t v118;
  unint64_t *v119;
  unint64_t v120;
  std::__shared_weak_count *v121;
  unint64_t *v122;
  unint64_t v123;
  uint64_t v124;
  uint64_t v125;
  unint64_t v126;
  std::__shared_weak_count *v127;
  unint64_t *v128;
  unint64_t v129;
  unint64_t v130;
  unint64_t *v131;
  unint64_t v132;
  _QWORD *v133;
  unint64_t v134;
  uint64_t v135;
  uint64_t v141;
  uint64_t v142;
  std::__shared_weak_count *v143;
  unint64_t *v144;
  uint64_t v145;
  uint64_t v146;
  std::__shared_weak_count *v147;
  uint64_t v148;
  unint64_t *v149;
  unint64_t v150;
  unint64_t v151;
  std::__shared_weak_count *v152;
  unint64_t *v153;
  unint64_t v154;
  __int128 *v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  std::__shared_weak_count *v161;
  unint64_t *v162;
  std::__shared_weak_count *v163;
  std::__shared_weak_count *v164;
  uint64_t *v165;
  unint64_t v166;
  std::__shared_weak_count *v167;
  _QWORD *v168;
  unint64_t *v169;
  unint64_t v170;
  unsigned __int8 v171;
  uint64_t p_shared_weak_owners;
  unsigned __int8 v173;
  uint64_t v174;
  unint64_t *v175;
  unint64_t v176;
  unint64_t *v177;
  unint64_t v178;
  std::__shared_weak_count *v179;
  unint64_t *v180;
  unint64_t v181;
  std::__shared_weak_count *v182;
  unint64_t *v183;
  unint64_t v184;
  std::__shared_weak_count *shared_owners;
  unint64_t *v186;
  unint64_t v187;
  std::__shared_weak_count *v188;
  unint64_t *v189;
  unint64_t v190;
  unint64_t *v191;
  unint64_t v192;
  int64x2_t *v193;
  uint64_t v194;
  _QWORD *v195;
  _QWORD *v196;
  unint64_t v197;
  unint64_t v198;
  unint64_t v199;
  std::__shared_weak_count *v200;
  unint64_t *v201;
  unint64_t v202;
  std::__shared_weak_count *v203;
  unint64_t *v204;
  unint64_t v205;
  std::__shared_weak_count *v206;
  unint64_t *v207;
  unint64_t v208;
  std::__shared_weak_count *v209;
  unint64_t *v210;
  unint64_t v211;
  std::__shared_weak_count *v212;
  uint64_t *v213;
  unint64_t v214;
  std::__shared_weak_count *v215;
  uint64_t *v216;
  unint64_t v217;
  std::__shared_weak_count *v218;
  unint64_t *v219;
  unint64_t v220;
  ggl::PointExtendedShader *v222;
  unsigned __int8 v223;
  unsigned __int8 v224;
  unsigned __int8 v225;
  unsigned __int8 v226;
  int v227;
  uint64_t v228;
  geo::read_write_lock *v229;
  const char *v230;
  malloc_zone_t *zone;
  int v232;
  uint64_t v233;
  geo::read_write_lock *v234;
  const char *v235;
  malloc_zone_t *v236;
  unsigned __int8 v237;
  unsigned __int8 v238;
  unsigned __int8 v239;
  uint64_t v240;
  uint64_t *v241;
  id v242;
  std::__shared_weak_count *v243;
  std::__shared_weak_count *v244;
  _QWORD v245[5];
  std::__shared_weak_count *v246;
  _QWORD *v247;
  std::__shared_weak_count *v248;
  _QWORD *v249;
  uint64_t v250;
  _QWORD *v251;
  std::__shared_weak_count *v252;
  std::__shared_weak_count *v253;
  std::__shared_weak_count *v254;
  char *v255;
  std::__shared_weak_count *v256;
  __int128 v257;
  __int128 v258;
  uint64_t v259;
  std::__shared_weak_count *v260;
  __int128 v261;
  __int128 v262;
  uint64_t v263;

  v263 = *MEMORY[0x1E0C80C00];
  v242 = a2;
  v9 = *(_QWORD *)(objc_msgSend(v242, "device") + 24);
  v11 = *(_QWORD *)(v9 + 16);
  v10 = *(std::__shared_weak_count **)(v9 + 24);
  v259 = v11;
  v260 = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v13 = __ldxr(p_shared_owners);
    while (__stxr(v13 + 1, p_shared_owners));
  }
  v14 = (__int128 *)objc_msgSend(*a1, "format");
  v15 = v14[1];
  v257 = *v14;
  v258 = v15;
  v16 = *(_QWORD *)(v11 + 80);
  v17 = *(std::__shared_weak_count **)(v16 + 1928);
  v18 = *(std::__shared_weak_count **)(v16 + 1936);
  v253 = v17;
  v254 = v18;
  if (v18)
  {
    v19 = (unint64_t *)&v18->__shared_owners_;
    do
      v20 = __ldxr(v19);
    while (__stxr(v20 + 1, v19));
  }
  v21 = (char *)operator new(0x198uLL);
  *((_QWORD *)v21 + 1) = 0;
  *((_QWORD *)v21 + 2) = 0;
  *(_QWORD *)v21 = &off_1E42E4658;
  v261 = v257;
  v262 = v258;
  if ((v22 & 1) == 0)
  {
    if ((_DWORD)v222)
    {
      if ((v223 & 1) == 0)
      {
        if ((_DWORD)v222)
        {
          if ((v237 & 1) == 0
          {
            if ((v239 & 1) == 0
            {
              ggl::MeshTyped<ggl::CommonMesh::BufferPos4,ggl::Point::ExtendedVbo>::attributesReflection(void)::r = (uint64_t)&ggl::CommonMesh::bufferPos4Reflection;
              *(_QWORD *)algn_1EE5879C8 = &ggl::Point::extendedVboReflection;
            }
            ggl::MeshTyped<ggl::CommonMesh::BufferPos4,ggl::Point::ExtendedVbo>::typedReflection(void)::r = (uint64_t)&ggl::MeshTyped<ggl::CommonMesh::BufferPos4,ggl::Point::ExtendedVbo>::attributesReflection(void)::r;
            unk_1EE5879B0 = 2;
          }
          ggl::Point::ExtendedPipelineSetup::typedReflection(void)::ref = (uint64_t)&ggl::MeshTyped<ggl::CommonMesh::BufferPos4,ggl::Point::ExtendedVbo>::typedReflection(void)::r;
          *(_QWORD *)algn_1EE587838 = &ggl::Point::pipelineDataExtendedPipelineDeviceStructs(void)::ref;
          qword_1EE587840 = 0;
          if ((v238 & 1) == 0
          {
            ggl::Point::pipelineDataExtendedPipelineConstantStructs(void)::ref = (uint64_t)ggl::Point::View::reflection(void)::reflection;
            *(_QWORD *)algn_1EE587998 = ggl::Tile::Transform::reflection(void)::reflection;
          }
          qword_1EE587848 = (uint64_t)&ggl::Point::pipelineDataExtendedPipelineConstantStructs(void)::ref;
          *(_OWORD *)algn_1EE587850 = xmmword_19FFB35C0;
        }
      }
      ggl::Point::ExtendedPipelineState::typedReflection(void)::ref = (uint64_t)&ggl::Point::ExtendedPipelineSetup::typedReflection(void)::ref;
      ggl::PointExtendedShader::typedReflection(v222);
      qword_1EE5877E0 = (uint64_t)&ggl::PointExtendedShader::typedReflection(void)::ref;
      if ((v224 & 1) == 0
      {
        ggl::Point::pipelineStateExtendedPipelineAttributeStructBinding(void)::attr = 0;
        *(_QWORD *)algn_1EE5878B8 = 0;
        qword_1EE5878C0 = (uint64_t)"";
        dword_1EE5878C8 = 0;
        qword_1EE5878D0 = (uint64_t)&ggl::Point::pipelineStateExtendedPipelineAttributeBinding_0(void)::attr;
        unk_1EE5878D8 = vdupq_n_s64(1uLL);
        qword_1EE5878E8 = 1;
        unk_1EE5878F0 = "";
        dword_1EE5878F8 = 0;
        qword_1EE587900 = (uint64_t)&ggl::Point::pipelineStateExtendedPipelineAttributeBinding_1(void)::attr;
        unk_1EE587908 = 2;
      }
      qword_1EE5877E8 = (uint64_t)&ggl::Point::pipelineStateExtendedPipelineAttributeStructBinding(void)::attr;
      unk_1EE5877F0 = 2;
      qword_1EE5877F8 = 0;
      unk_1EE587800 = 0;
      qword_1EE587808 = (uint64_t)&ggl::Point::pipelineStateExtendedPipelineDeviceStructBinding(void)::ref;
      unk_1EE587810 = 0;
      if ((v225 & 1) == 0
      {
        ggl::Point::pipelineStateExtendedPipelineConstantStructBinding(void)::ref = 0;
        *(_QWORD *)algn_1EE587928 = 0;
        qword_1EE587930 = (uint64_t)"view";
        dword_1EE587938 = 3;
        qword_1EE587940 = (uint64_t)&ggl::Point::pipelineStateExtendedPipelineConstantViewBinding(void)::reflection;
        unk_1EE587948 = xmmword_19FFB48D0;
        qword_1EE587958 = 1;
        unk_1EE587960 = "transform";
        dword_1EE587968 = 3;
        qword_1EE587970 = (uint64_t)&ggl::Point::pipelineStateExtendedPipelineConstantTransformBinding(void)::reflection;
        unk_1EE587978 = 10;
      }
      qword_1EE587818 = (uint64_t)&ggl::Point::pipelineStateExtendedPipelineConstantStructBinding(void)::ref;
      unk_1EE587820 = 2;
    }
  }
  v23 = v253;
  v24 = v254;
  if (v254)
  {
    v25 = &v254->__shared_owners_;
    do
      v26 = __ldxr((unint64_t *)v25);
    while (__stxr(v26 + 1, (unint64_t *)v25));
    *((_DWORD *)v21 + 14) = 0;
    *((_QWORD *)v21 + 5) = 0;
    *((_QWORD *)v21 + 6) = 0;
    *((_QWORD *)v21 + 3) = &off_1E42B6760;
    *((_QWORD *)v21 + 4) = 0;
    *((_QWORD *)v21 + 8) = &ggl::Point::ExtendedPipelineState::typedReflection(void)::ref;
    *((_QWORD *)v21 + 9) = v23;
    *((_QWORD *)v21 + 10) = v24;
    do
      v27 = __ldxr((unint64_t *)v25);
    while (__stxr(v27 + 1, (unint64_t *)v25));
  }
  else
  {
    *((_DWORD *)v21 + 14) = 0;
    *((_QWORD *)v21 + 5) = 0;
    *((_QWORD *)v21 + 6) = 0;
    *((_QWORD *)v21 + 3) = &off_1E42B6760;
    *((_QWORD *)v21 + 4) = 0;
    *((_QWORD *)v21 + 8) = &ggl::Point::ExtendedPipelineState::typedReflection(void)::ref;
    *((_QWORD *)v21 + 9) = v23;
    *((_QWORD *)v21 + 10) = 0;
  }
  v21[136] = 0;
  *(_OWORD *)(v21 + 140) = xmmword_19FFB3060;
  *(_QWORD *)(v21 + 156) = 0;
  *(_QWORD *)(v21 + 172) = 0;
  *(_QWORD *)(v21 + 164) = 0;
  v21[184] = 0;
  *(_OWORD *)(v21 + 188) = xmmword_19FFB3060;
  *(_QWORD *)(v21 + 204) = 0;
  *(_QWORD *)(v21 + 220) = 0;
  *(_QWORD *)(v21 + 212) = 0;
  v21[232] = 0;
  *(_OWORD *)(v21 + 236) = xmmword_19FFB3060;
  *(_QWORD *)(v21 + 252) = 0;
  *(_QWORD *)(v21 + 268) = 0;
  *(_QWORD *)(v21 + 260) = 0;
  v28 = v262;
  *(_OWORD *)(v21 + 280) = v261;
  *(_OWORD *)(v21 + 296) = v28;
  v21[312] = 0;
  *((_QWORD *)v21 + 48) = 0;
  *((_OWORD *)v21 + 22) = 0u;
  *((_OWORD *)v21 + 23) = 0u;
  *((_OWORD *)v21 + 20) = 0u;
  *((_OWORD *)v21 + 21) = 0u;
  *((_QWORD *)v21 + 49) = 0x100000001;
  v21[400] = 0;
  v21[88] = 1;
  *(_WORD *)(v21 + 89) = (_WORD)v251;
  v21[91] = BYTE2(v251);
  *(_OWORD *)(v21 + 92) = xmmword_19FFB35B0;
  *((_DWORD *)v21 + 27) = 7;
  *((_QWORD *)v21 + 14) = 0;
  *((_QWORD *)v21 + 15) = 0;
  *((_DWORD *)v21 + 32) = 0;
  v21[132] = 15;
  if (v24)
  {
    v29 = (unint64_t *)&v24->__shared_owners_;
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  v21[329] = 0;
  v31 = *(int8x16_t *)(v21 + 344);
  v32 = vceqzq_s8(*(int8x16_t *)(v21 + 328));
  v33 = vmovl_high_s8(v32);
  v34 = vmovl_s16(*(int16x4_t *)v33.i8);
  v35.i64[0] = v34.u32[0];
  v35.i64[1] = v34.u32[1];
  v36 = v35;
  v37 = vmovl_s8(*(int8x8_t *)v32.i8);
  v38 = vmovl_s16(*(int16x4_t *)v37.i8);
  *((_QWORD *)v21 + 3) = &off_1E42BBF98;
  v35.i64[0] = v38.u32[0];
  v35.i64[1] = v38.u32[1];
  v39 = v35;
  v40 = vmovl_high_s16(v33);
  v35.i64[0] = v40.u32[0];
  v35.i64[1] = v40.u32[1];
  v41 = v35;
  v42 = vmovl_high_s16(v37);
  v35.i64[0] = v42.u32[0];
  v35.i64[1] = v42.u32[1];
  v43 = v35;
  v35.i64[0] = v34.u32[2];
  v35.i64[1] = v34.u32[3];
  v44 = v35;
  v35.i64[0] = v38.u32[2];
  v35.i64[1] = v38.u32[3];
  v45 = v35;
  v35.i64[0] = v40.u32[2];
  v35.i64[1] = v40.u32[3];
  v46 = v35;
  v35.i64[0] = v42.u32[2];
  v35.i64[1] = v42.u32[3];
  v47 = vbicq_s8((int8x16_t)xmmword_19FFB3070, v35);
  v48 = vbicq_s8((int8x16_t)xmmword_19FFB3080, v46);
  v49 = vbicq_s8((int8x16_t)xmmword_19FFB3090, v45);
  v50 = vbicq_s8((int8x16_t)xmmword_19FFB30C0, v41);
  v51 = vceqzq_s8(v31);
  v52 = vmovl_high_s8(v51);
  v53 = vmovl_s16(*(int16x4_t *)v52.i8);
  v35.i64[0] = v53.u32[0];
  v35.i64[1] = v53.u32[1];
  v54 = v35;
  v55 = vmovl_s8(*(int8x8_t *)v51.i8);
  v56 = vmovl_s16(*(int16x4_t *)v55.i8);
  v35.i64[0] = v56.u32[0];
  v35.i64[1] = v56.u32[1];
  v57 = v35;
  v58 = vmovl_high_s16(v52);
  v35.i64[0] = v58.u32[0];
  v35.i64[1] = v58.u32[1];
  v59 = v35;
  v60 = vmovl_high_s16(v55);
  v35.i64[0] = v60.u32[0];
  v35.i64[1] = v60.u32[1];
  v61 = v35;
  v35.i64[0] = v53.u32[2];
  v35.i64[1] = v53.u32[3];
  v62 = v35;
  v35.i64[0] = v56.u32[2];
  v35.i64[1] = v56.u32[3];
  v63 = v35;
  v35.i64[0] = v58.u32[2];
  v35.i64[1] = v58.u32[3];
  v64 = v35;
  v35.i64[0] = v60.u32[2];
  v35.i64[1] = v60.u32[3];
  v65 = vbicq_s8((int8x16_t)xmmword_19FFB30F0, v64);
  v66 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3150, v54), vbicq_s8((int8x16_t)xmmword_19FFB30D0, v36));
  v67 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3140, v57), vbicq_s8((int8x16_t)xmmword_19FFB2DB0, v39));
  v68 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3130, v59), v50);
  v69 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3120, v61), vbicq_s8((int8x16_t)xmmword_19FFB30B0, v43));
  v70 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3110, v62), vbicq_s8((int8x16_t)xmmword_19FFB30A0, v44));
  v71 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3100, v63), v49);
  v72 = vorrq_s8(v65, v48);
  v73 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB30E0, v35), v47);
  v74 = vceqzq_s8(*(int8x16_t *)(v21 + 360));
  v75 = vmovl_s8(*(int8x8_t *)v74.i8);
  v76 = vmovl_high_s16(v75);
  v35.i64[0] = v76.i32[2];
  v35.i64[1] = v76.i32[3];
  v77 = v35;
  v78 = vmovl_high_s8(v74);
  v79 = vmovl_high_s16(v78);
  v35.i64[0] = v79.i32[2];
  v35.i64[1] = v79.i32[3];
  v80 = v35;
  v81 = vmovl_s16(*(int16x4_t *)v75.i8);
  v35.i64[0] = v81.i32[2];
  v35.i64[1] = v81.i32[3];
  v82 = v35;
  v83 = vmovl_s16(*(int16x4_t *)v78.i8);
  v35.i64[0] = v83.i32[2];
  v35.i64[1] = v83.i32[3];
  v84 = v35;
  v35.i64[0] = v76.i32[0];
  v35.i64[1] = v76.i32[1];
  v85 = v35;
  v35.i64[0] = v79.i32[0];
  v35.i64[1] = v79.i32[1];
  v86 = v35;
  v35.i64[0] = v81.i32[0];
  v35.i64[1] = v81.i32[1];
  v87 = v35;
  v35.i64[0] = v83.i32[0];
  v35.i64[1] = v83.i32[1];
  v88 = vbicq_s8((int8x16_t)xmmword_19FFB3160, v35);
  v89 = vceqzq_s8(*(int8x16_t *)(v21 + 376));
  v90 = vmovl_high_s8(v89);
  v91 = vmovl_s16(*(int16x4_t *)v90.i8);
  v35.i64[0] = v91.i32[0];
  v35.i64[1] = v91.i32[1];
  v92 = v35;
  v93 = vmovl_s8(*(int8x8_t *)v89.i8);
  v94 = vmovl_s16(*(int16x4_t *)v93.i8);
  v35.i64[0] = v94.i32[0];
  v35.i64[1] = v94.i32[1];
  v95 = v35;
  v96 = vmovl_high_s16(v90);
  v35.i64[0] = v96.i32[0];
  v35.i64[1] = v96.i32[1];
  v97 = v35;
  v98 = vmovl_high_s16(v93);
  v35.i64[0] = v98.i32[0];
  v35.i64[1] = v98.i32[1];
  v99 = v35;
  v35.i64[0] = v91.i32[2];
  v35.i64[1] = v91.i32[3];
  v100 = v35;
  v35.i64[0] = v94.i32[2];
  v35.i64[1] = v94.i32[3];
  v101 = v35;
  v35.i64[0] = v96.i32[2];
  v35.i64[1] = v96.i32[3];
  v102 = v35;
  v35.i64[0] = v98.i32[2];
  v35.i64[1] = v98.i32[3];
  *((_QWORD *)v21 + 40) = vaddvq_s64(vaddq_s64((int64x2_t)vorrq_s8(vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3240, v95), vbicq_s8((int8x16_t)xmmword_19FFB3170, v87)), v67), vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3250, v92), v88), v66)), vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3220, v99), vbicq_s8((int8x16_t)xmmword_19FFB3190, v85)), v69), vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3230, v97), vbicq_s8((int8x16_t)xmmword_19FFB3180, v86)),
                                               v68))),
                              (int64x2_t)vorrq_s8(vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3200, v101), vbicq_s8((int8x16_t)xmmword_19FFB31B0, v82)), v71), vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3210, v100), vbicq_s8((int8x16_t)xmmword_19FFB31A0, v84)), v70)), vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB31E0, v35), vbicq_s8((int8x16_t)xmmword_19FFB31D0, v77)), v73), vorrq_s8(vorrq_s8(
                                                 vbicq_s8((int8x16_t)xmmword_19FFB31F0, v102),
                                                 vbicq_s8((int8x16_t)xmmword_19FFB31C0, v80)),
                                               v72)))));
  v21[312] = 1;
  v255 = v21 + 24;
  v256 = (std::__shared_weak_count *)v21;
  if (v254)
  {
    v103 = &v254->__shared_owners_;
    do
      v104 = __ldaxr((unint64_t *)v103);
    while (__stlxr(v104 - 1, (unint64_t *)v103));
    if (!v104)
    {
      ((void (*)(std::__shared_weak_count *))v254->__on_zero_shared)(v254);
      std::__shared_weak_count::__release_weak(v254);
    }
  }
  v105 = (_QWORD *)operator new();
  v106 = operator new(0xE8uLL);
  v106[1] = 0;
  v106[2] = 0;
  *v106 = &off_1E42E2550;
  v107 = ggl::BufferData::BufferData((uint64_t)(v106 + 3), qword_1EE54B890, 2, 1, 6, 1);
  v106[28] = ggl::Point::View::reflection(void)::reflection;
  v106[3] = &off_1E42B9950;
  *(_QWORD *)&v261 = v107;
  *((_QWORD *)&v261 + 1) = v106;
  v108 = (std::__shared_weak_count *)operator new(0xE8uLL);
  v108->__shared_owners_ = 0;
  v109 = (unint64_t *)&v108->__shared_owners_;
  v108->__shared_weak_owners_ = 0;
  v108->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E22E8;
  v110 = v108 + 1;
  ggl::BufferData::BufferData((uint64_t)&v108[1], qword_1EE54AFA0, 2, 1, 6, 1);
  v108[9].__shared_owners_ = (uint64_t)ggl::Tile::Transform::reflection(void)::reflection;
  v108[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B97F0;
  if (v256)
  {
    v111 = &v256->__shared_owners_;
    do
      v112 = __ldxr((unint64_t *)v111);
    while (__stxr(v112 + 1, (unint64_t *)v111));
    ggl::PipelineSetup::PipelineSetup(v105, (uint64_t)v255, (uint64_t)v256);
    v113 = &v256->__shared_owners_;
    do
      v114 = __ldaxr((unint64_t *)v113);
    while (__stlxr(v114 - 1, (unint64_t *)v113));
    if (!v114)
    {
      ((void (*)(std::__shared_weak_count *))v256->__on_zero_shared)(v256);
      std::__shared_weak_count::__release_weak(v256);
    }
  }
  else
  {
    ggl::PipelineSetup::PipelineSetup(v105, (uint64_t)v255, 0);
  }
  *v105 = &off_1E42BBF68;
  v115 = (_QWORD *)v105[8];
  v116 = v261;
  *v115 = v261;
  v115[1] = 0;
  v117 = (_QWORD *)v105[20];
  v118 = *((_QWORD *)&v261 + 1);
  if (*((_QWORD *)&v261 + 1))
  {
    v119 = (unint64_t *)(*((_QWORD *)&v261 + 1) + 8);
    do
      v120 = __ldxr(v119);
    while (__stxr(v120 + 1, v119));
  }
  v121 = (std::__shared_weak_count *)v117[1];
  *v117 = v116;
  v117[1] = v118;
  if (v121)
  {
    v122 = (unint64_t *)&v121->__shared_owners_;
    do
      v123 = __ldaxr(v122);
    while (__stlxr(v123 - 1, v122));
    if (!v123)
    {
      ((void (*)(std::__shared_weak_count *))v121->__on_zero_shared)(v121);
      std::__shared_weak_count::__release_weak(v121);
    }
  }
  v124 = v105[8];
  *(_QWORD *)(v124 + 16) = v110;
  *(_QWORD *)(v124 + 24) = 0;
  v125 = v105[20];
  do
    v126 = __ldxr(v109);
  while (__stxr(v126 + 1, v109));
  v127 = *(std::__shared_weak_count **)(v125 + 24);
  *(_QWORD *)(v125 + 16) = v110;
  *(_QWORD *)(v125 + 24) = v108;
  if (v127)
  {
    v128 = (unint64_t *)&v127->__shared_owners_;
    do
      v129 = __ldaxr(v128);
    while (__stlxr(v129 - 1, v128));
    if (!v129)
    {
      ((void (*)(std::__shared_weak_count *))v127->__on_zero_shared)(v127);
      std::__shared_weak_count::__release_weak(v127);
    }
  }
  do
    v130 = __ldaxr(v109);
  while (__stlxr(v130 - 1, v109));
  if (!v130)
  {
    ((void (*)(std::__shared_weak_count *))v108->__on_zero_shared)(v108);
    std::__shared_weak_count::__release_weak(v108);
  }
  if (*((_QWORD *)&v261 + 1))
  {
    v131 = (unint64_t *)(*((_QWORD *)&v261 + 1) + 8);
    do
      v132 = __ldaxr(v131);
    while (__stlxr(v132 - 1, v131));
    if (!v132)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v261 + 1) + 16))(*((_QWORD *)&v261 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v261 + 1));
    }
  }
  v241 = a3;
  v133 = *(_QWORD **)v105[8];
  v134 = v133[1];
  v135 = v133[9];
  *(_DWORD *)v135 = 1065353216;
  *(_QWORD *)(v135 + 12) = 0;
  *(_QWORD *)(v135 + 4) = 0;
  *(_DWORD *)(v135 + 20) = 1065353216;
  *(_QWORD *)(v135 + 24) = 0;
  *(_QWORD *)(v135 + 32) = 0;
  *(_DWORD *)(v135 + 40) = 1065353216;
  *(_QWORD *)(v135 + 52) = 0;
  *(_QWORD *)(v135 + 44) = 0;
  *(_DWORD *)(v135 + 60) = 1065353216;
  __asm { FMOV            V0.4S, #1.0 }
  *(_OWORD *)(v135 + 80) = _Q0;
  *(float *)(v135 + 64) = a5;
  if (v133[8] > v134)
    v134 = v133[8];
  v133[7] = 0;
  v133[8] = v134;
  v141 = *a4;
  v142 = a4[1];
  v143 = (std::__shared_weak_count *)operator new(0xF8uLL);
  v143->__shared_owners_ = 0;
  v144 = (unint64_t *)&v143->__shared_owners_;
  v143->__shared_weak_owners_ = 0;
  v143->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DF8B0;
  ggl::BufferData::BufferData((uint64_t)&v143[1], 16, 0, 0, 7, 0x6DB6DB6DB6DB6DB7 * ((v142 - v141) >> 2));
  v143[9].__shared_weak_owners_ = (uint64_t)"points vertex positions";
  v143[10].__vftable = (std::__shared_weak_count_vtbl *)&ggl::CommonMesh::bufferPos4Reflection;
  v143[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B7520;
  v143[9].__shared_owners_ = (uint64_t)&unk_1E42B7540;
  v253 = v143 + 1;
  v254 = v143;
  v145 = *a4;
  v146 = a4[1];
  v147 = (std::__shared_weak_count *)operator new(0xF8uLL);
  v148 = (v146 - v145) >> 2;
  v147->__shared_owners_ = 0;
  v149 = (unint64_t *)&v147->__shared_owners_;
  v147->__shared_weak_owners_ = 0;
  v147->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E0448;
  ggl::BufferData::BufferData((uint64_t)&v147[1], 32, 0, 0, 7, 0x6DB6DB6DB6DB6DB7 * v148);
  v147[9].__shared_weak_owners_ = (uint64_t)"points vertex data";
  v147[10].__vftable = (std::__shared_weak_count_vtbl *)&ggl::Point::extendedVboReflection;
  v147[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B8120;
  v147[9].__shared_owners_ = (uint64_t)&unk_1E42B8140;
  v251 = &v147[1].__vftable;
  v252 = v147;
  (*(void (**)(uint64_t *__return_ptr))(**(_QWORD **)(objc_msgSend(v242, "device") + 8) + 24))(&v250);
  v245[0] = MEMORY[0x1E0C809B0];
  v245[1] = 3321888768;
  v245[2] = ___ZN12_GLOBAL__N_120createPointsDrawableERKN2md13LayoutContextEP17VKSharedResourcesRKNSt3__110unique_ptrIN3ggl11RenderStateENS6_14default_deleteIS9_EEEEfRKNS6_6vectorINS_15PointDescriptorENS6_9allocatorISG_EEEE_block_invoke;
  v245[3] = &__block_descriptor_72_ea8_32c80_ZTSNSt3__110shared_ptrIN3ggl15VertexDataTypedINS1_10CommonMesh10BufferPos4EEEEE48c75_ZTSNSt3__110shared_ptrIN3ggl15VertexDataTypedINS1_5Point11ExtendedVboEEEEE_e30_v16__0__ResourceAccessor_____8l;
  v245[4] = v143 + 1;
  v246 = v143;
  do
    v150 = __ldxr(v144);
  while (__stxr(v150 + 1, v144));
  v247 = &v147[1].__vftable;
  v248 = v147;
  do
    v151 = __ldxr(v149);
  while (__stxr(v151 + 1, v149));
  v249 = a4;
  *((_QWORD *)&v262 + 1) = 0;
  *(_QWORD *)&v261 = &off_1E42C7118;
  *((_QWORD *)&v261 + 1) = MEMORY[0x1A1AF5730](v245);
  *((_QWORD *)&v262 + 1) = &v261;
  v243 = 0;
  v244 = 0;
  (*(void (**)(uint64_t, __int128 *, std::__shared_weak_count **))(*(_QWORD *)v250 + 16))(v250, &v261, &v243);
  v152 = v244;
  if (v244)
  {
    v153 = (unint64_t *)&v244->__shared_owners_;
    do
      v154 = __ldaxr(v153);
    while (__stlxr(v154 - 1, v153));
    if (!v154)
    {
      ((void (*)(std::__shared_weak_count *))v152->__on_zero_shared)(v152);
      std::__shared_weak_count::__release_weak(v152);
    }
  }
  v155 = (__int128 *)*((_QWORD *)&v262 + 1);
  if (*((__int128 **)&v262 + 1) == &v261)
  {
    v156 = 4;
    v155 = &v261;
  }
  else
  {
    if (!*((_QWORD *)&v262 + 1))
      goto LABEL_72;
    v156 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v155 + 8 * v156))();
LABEL_72:
  if (v250)
  {
    v157 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v250 + 24))(v250);
    v158 = v250;
    v250 = 0;
    *(_QWORD *)&v261 = v158;
    (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)v157 + 48))(v157, &v261);
    v159 = v261;
    *(_QWORD *)&v261 = 0;
    if (v159)
      (*(void (**)(uint64_t))(*(_QWORD *)v159 + 8))(v159);
    v160 = v250;
    v250 = 0;
    if (v160)
      (*(void (**)(uint64_t))(*(_QWORD *)v160 + 8))(v160);
  }
  v161 = (std::__shared_weak_count *)operator new(0xA8uLL);
  v161->__shared_owners_ = 0;
  v162 = (unint64_t *)&v161->__shared_owners_;
  v161->__shared_weak_owners_ = 0;
  v161->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E45E8;
  v163 = v253;
  v164 = v254;
  if (v254)
  {
    v165 = &v254->__shared_owners_;
    do
      v166 = __ldxr((unint64_t *)v165);
    while (__stxr(v166 + 1, (unint64_t *)v165));
  }
  v168 = v251;
  v167 = v252;
  if (v252)
  {
    v169 = (unint64_t *)&v252->__shared_owners_;
    do
      v170 = __ldxr(v169);
    while (__stxr(v170 + 1, v169));
  }
  if ((v171 & 1) == 0
  {
    if ((v226 & 1) == 0
    {
      ggl::MeshTyped<ggl::CommonMesh::BufferPos4,ggl::Point::ExtendedVbo>::attributesReflection(void)::r = (uint64_t)&ggl::CommonMesh::bufferPos4Reflection;
      *(_QWORD *)algn_1EE5879C8 = &ggl::Point::extendedVboReflection;
    }
    ggl::MeshTyped<ggl::CommonMesh::BufferPos4,ggl::Point::ExtendedVbo>::typedReflection(void)::r = (uint64_t)&ggl::MeshTyped<ggl::CommonMesh::BufferPos4,ggl::Point::ExtendedVbo>::attributesReflection(void)::r;
    unk_1EE5879B0 = 2;
  }
  v161[3].__shared_weak_owners_ = 0;
  p_shared_weak_owners = (uint64_t)&v161[3].__shared_weak_owners_;
  v161[2].__shared_owners_ = 0;
  v161[2].__shared_weak_owners_ = 0;
  LODWORD(v161[3].__vftable) = 0;
  v161[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42BBC08;
  v161[1].__shared_owners_ = (uint64_t)"points mesh";
  v161[1].__shared_weak_owners_ = (uint64_t)&unk_1E42BBC28;
  v161[2].__vftable = 0;
  v161[3].__shared_owners_ = (uint64_t)&ggl::MeshTyped<ggl::CommonMesh::BufferPos4,ggl::Point::ExtendedVbo>::typedReflection(void)::r;
  v161[4].__vftable = 0;
  v161[4].__shared_owners_ = 0;
  if ((v173 & 1) == 0)
  {
    p_shared_weak_owners = (uint64_t)&v161[3].__shared_weak_owners_;
    if (v227)
    {
      v228 = operator new();
      *(_QWORD *)(v228 + 16) = 0xA3D02C1100000005;
      *(_QWORD *)(v228 + 24) = "GeoGL";
      *(_OWORD *)(v228 + 32) = xmmword_19FFB2DE0;
      *(_QWORD *)v228 = &off_1E42B5668;
      *(_QWORD *)(v228 + 8) = "GeoGL";
      *(_OWORD *)(v228 + 72) = 0u;
      *(_OWORD *)(v228 + 88) = 0u;
      *(_OWORD *)(v228 + 104) = 0u;
      *(_OWORD *)(v228 + 120) = 0u;
      *(_OWORD *)(v228 + 136) = 0u;
      *(_OWORD *)(v228 + 152) = 0u;
      *(_OWORD *)(v228 + 168) = 0u;
      *(_OWORD *)(v228 + 184) = 0u;
      *(_OWORD *)(v228 + 200) = 0u;
      *(_OWORD *)(v228 + 216) = 0u;
      *(_OWORD *)(v228 + 232) = 0u;
      *(_QWORD *)(v228 + 248) = 0;
      *(_OWORD *)(v228 + 56) = 0u;
      v229 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v228 + 56), 0);
      if ((_DWORD)v229)
        geo::read_write_lock::logFailure(v229, (uint64_t)"initialization", v230);
      zone = malloc_create_zone(0, 0);
      *(_QWORD *)(v228 + 48) = zone;
      malloc_set_zone_name(zone, "GeoGL");
      *(_QWORD *)(v228 + 256) = os_log_create("com.apple.VectorKit", "Memory");
      ggl::Allocator::instance(void)::alloc = v228;
      p_shared_weak_owners = (uint64_t)&v161[3].__shared_weak_owners_;
    }
  }
  v174 = ggl::Allocator::instance(void)::alloc;
  v161[6].__vftable = 0;
  v161[5].__vftable = 0;
  v161[5].__shared_owners_ = 0;
  v161[4].__shared_weak_owners_ = v174;
  if ((v174 & 1) == 0)
  {
    v240 = p_shared_weak_owners;
    p_shared_weak_owners = v240;
    if (v232)
    {
      v233 = operator new();
      *(_QWORD *)(v233 + 16) = 0xA3D02C1100000005;
      *(_QWORD *)(v233 + 24) = "GeoGL";
      *(_OWORD *)(v233 + 32) = xmmword_19FFB2DE0;
      *(_QWORD *)v233 = &off_1E42B5668;
      *(_QWORD *)(v233 + 8) = "GeoGL";
      *(_OWORD *)(v233 + 72) = 0u;
      *(_OWORD *)(v233 + 88) = 0u;
      *(_OWORD *)(v233 + 104) = 0u;
      *(_OWORD *)(v233 + 120) = 0u;
      *(_OWORD *)(v233 + 136) = 0u;
      *(_OWORD *)(v233 + 152) = 0u;
      *(_OWORD *)(v233 + 168) = 0u;
      *(_OWORD *)(v233 + 184) = 0u;
      *(_OWORD *)(v233 + 200) = 0u;
      *(_OWORD *)(v233 + 216) = 0u;
      *(_OWORD *)(v233 + 232) = 0u;
      *(_QWORD *)(v233 + 248) = 0;
      *(_OWORD *)(v233 + 56) = 0u;
      v234 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v233 + 56), 0);
      if ((_DWORD)v234)
        geo::read_write_lock::logFailure(v234, (uint64_t)"initialization", v235);
      v236 = malloc_create_zone(0, 0);
      *(_QWORD *)(v233 + 48) = v236;
      malloc_set_zone_name(v236, "GeoGL");
      *(_QWORD *)(v233 + 256) = os_log_create("com.apple.VectorKit", "Memory");
      ggl::Allocator::instance(void)::alloc = v233;
      p_shared_weak_owners = v240;
    }
  }
  v161[6].__shared_owners_ = ggl::Allocator::instance(void)::alloc;
  v161[6].__shared_weak_owners_ = 0;
  v161[5].__shared_weak_owners_ = (uint64_t)&v161[6];
  v161[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42BD1B8;
  v161[1].__shared_weak_owners_ = (uint64_t)&unk_1E42BD1D8;
  *(_QWORD *)&v261 = v163;
  *((_QWORD *)&v261 + 1) = v164;
  if (v164)
  {
    v175 = (unint64_t *)&v164->__shared_owners_;
    do
      v176 = __ldxr(v175);
    while (__stxr(v176 + 1, v175));
  }
  *(_QWORD *)&v262 = v168;
  *((_QWORD *)&v262 + 1) = v167;
  if (v167)
  {
    v177 = (unint64_t *)&v167->__shared_owners_;
    do
      v178 = __ldxr(v177);
    while (__stxr(v178 + 1, v177));
  }
  std::vector<std::shared_ptr<ggl::VertexData>,geo::StdAllocator<std::shared_ptr<ggl::VertexData>,ggl::Allocator>>::__assign_with_size[abi:nn180100]<std::shared_ptr<ggl::VertexData> const*,std::shared_ptr<ggl::VertexData> const*>(p_shared_weak_owners, (uint64_t *)&v261, &v263, 2uLL);
  v179 = (std::__shared_weak_count *)*((_QWORD *)&v262 + 1);
  if (*((_QWORD *)&v262 + 1))
  {
    v180 = (unint64_t *)(*((_QWORD *)&v262 + 1) + 8);
    do
      v181 = __ldaxr(v180);
    while (__stlxr(v181 - 1, v180));
    if (!v181)
    {
      ((void (*)(std::__shared_weak_count *))v179->__on_zero_shared)(v179);
      std::__shared_weak_count::__release_weak(v179);
    }
  }
  v182 = (std::__shared_weak_count *)*((_QWORD *)&v261 + 1);
  if (*((_QWORD *)&v261 + 1))
  {
    v183 = (unint64_t *)(*((_QWORD *)&v261 + 1) + 8);
    do
      v184 = __ldaxr(v183);
    while (__stlxr(v184 - 1, v183));
    if (!v184)
    {
      ((void (*)(std::__shared_weak_count *))v182->__on_zero_shared)(v182);
      std::__shared_weak_count::__release_weak(v182);
    }
  }
  shared_owners = (std::__shared_weak_count *)v161[5].__shared_owners_;
  v161[5].__vftable = 0;
  v161[5].__shared_owners_ = 0;
  if (shared_owners)
  {
    v186 = (unint64_t *)&shared_owners->__shared_owners_;
    do
      v187 = __ldaxr(v186);
    while (__stlxr(v187 - 1, v186));
    if (!v187)
    {
      ((void (*)(std::__shared_weak_count *))shared_owners->__on_zero_shared)(shared_owners);
      std::__shared_weak_count::__release_weak(shared_owners);
    }
  }
  v188 = v161 + 1;
  v161[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42BBED8;
  v161[1].__shared_weak_owners_ = (uint64_t)&unk_1E42BBEF8;
  if (v167)
  {
    v189 = (unint64_t *)&v167->__shared_owners_;
    do
      v190 = __ldaxr(v189);
    while (__stlxr(v190 - 1, v189));
    if (!v190)
    {
      ((void (*)(std::__shared_weak_count *))v167->__on_zero_shared)(v167);
      std::__shared_weak_count::__release_weak(v167);
    }
  }
  if (v164)
  {
    v191 = (unint64_t *)&v164->__shared_owners_;
    do
      v192 = __ldaxr(v191);
    while (__stlxr(v192 - 1, v191));
    if (!v192)
    {
      ((void (*)(std::__shared_weak_count *))v164->__on_zero_shared)(v164);
      std::__shared_weak_count::__release_weak(v164);
    }
  }
  v243 = v161 + 1;
  v244 = v161;
  v193 = (int64x2_t *)operator new();
  v194 = *v241;
  v193->i64[0] = (uint64_t)&off_1E42B59B0;
  v193[1].i64[0] = (uint64_t)"";
  v193[1].i64[1] = v194;
  v193[2].i64[0] = (uint64_t)v105;
  v193[2].i32[2] = 0;
  v193[3].i64[0] = 0;
  v193[3].i32[2] = 1065353216;
  v193[4].i64[0] = (uint64_t)v188;
  v193[4].i64[1] = 0;
  v193[5].i64[0] = 0;
  v193[5].i64[1] = 0;
  v193[6] = vdupq_n_s64(1uLL);
  v193[7].i64[0] = 0;
  v195 = (_QWORD *)operator new();
  v196 = v195;
  do
    v197 = __ldxr(v162);
  while (__stxr(v197 + 1, v162));
  *v195 = v193;
  v195[1] = v105;
  v195[2] = v188;
  v195[3] = v161;
  do
    v198 = __ldxr(v162);
  while (__stxr(v198 + 1, v162));
  do
    v199 = __ldaxr(v162);
  while (__stlxr(v199 - 1, v162));
  if (!v199)
  {
    ((void (*)(std::__shared_weak_count *))v161->__on_zero_shared)(v161);
    std::__shared_weak_count::__release_weak(v161);
  }
  v200 = v244;
  if (v244)
  {
    v201 = (unint64_t *)&v244->__shared_owners_;
    do
      v202 = __ldaxr(v201);
    while (__stlxr(v202 - 1, v201));
    if (!v202)
    {
      ((void (*)(std::__shared_weak_count *))v200->__on_zero_shared)(v200);
      std::__shared_weak_count::__release_weak(v200);
    }
  }
  v203 = v248;
  if (v248)
  {
    v204 = (unint64_t *)&v248->__shared_owners_;
    do
      v205 = __ldaxr(v204);
    while (__stlxr(v205 - 1, v204));
    if (!v205)
    {
      ((void (*)(std::__shared_weak_count *))v203->__on_zero_shared)(v203);
      std::__shared_weak_count::__release_weak(v203);
    }
  }
  v206 = v246;
  if (v246)
  {
    v207 = (unint64_t *)&v246->__shared_owners_;
    do
      v208 = __ldaxr(v207);
    while (__stlxr(v208 - 1, v207));
    if (!v208)
    {
      ((void (*)(std::__shared_weak_count *))v206->__on_zero_shared)(v206);
      std::__shared_weak_count::__release_weak(v206);
    }
  }
  v209 = v252;
  if (v252)
  {
    v210 = (unint64_t *)&v252->__shared_owners_;
    do
      v211 = __ldaxr(v210);
    while (__stlxr(v211 - 1, v210));
    if (!v211)
    {
      ((void (*)(std::__shared_weak_count *))v209->__on_zero_shared)(v209);
      std::__shared_weak_count::__release_weak(v209);
    }
  }
  v212 = v254;
  if (v254)
  {
    v213 = &v254->__shared_owners_;
    do
      v214 = __ldaxr((unint64_t *)v213);
    while (__stlxr(v214 - 1, (unint64_t *)v213));
    if (!v214)
    {
      ((void (*)(std::__shared_weak_count *))v212->__on_zero_shared)(v212);
      std::__shared_weak_count::__release_weak(v212);
    }
  }
  v215 = v256;
  if (v256)
  {
    v216 = &v256->__shared_owners_;
    do
      v217 = __ldaxr((unint64_t *)v216);
    while (__stlxr(v217 - 1, (unint64_t *)v216));
    if (!v217)
    {
      ((void (*)(std::__shared_weak_count *))v215->__on_zero_shared)(v215);
      std::__shared_weak_count::__release_weak(v215);
    }
  }
  v218 = v260;
  if (v260)
  {
    v219 = (unint64_t *)&v260->__shared_owners_;
    do
      v220 = __ldaxr(v219);
    while (__stlxr(v220 - 1, v219));
    if (!v220)
    {
      ((void (*)(std::__shared_weak_count *))v218->__on_zero_shared)(v218);
      std::__shared_weak_count::__release_weak(v218);
    }
  }

  return v196;
}

void sub_19FA91F9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,char a29,uint64_t a30,char a31)
{
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  (*(void (**)(uint64_t))(*(_QWORD *)v32 + 8))(v32);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](a11);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](a12);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a27);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a29);
  (*(void (**)(uint64_t))(*(_QWORD *)v31 + 8))(v31);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a31);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](v33 - 160);

  _Unwind_Resume(a1);
}

void std::__introsort<std::_ClassicAlgPolicy,md::mun::MuninOverlayRenderLayer::debugLayout(md::LayoutContext const&)::$_0 &,md::mun::CollectionPoint *,false>(uint64_t *a1, uint64_t *a2, uint64_t a3, char a4)
{
  uint64_t *v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t *v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t *v17;
  uint64_t *v18;
  unint64_t v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t *v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t *v25;
  uint64_t *v26;
  uint64_t *v27;
  uint64_t *v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t *v31;
  uint64_t *v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t *v35;
  uint64_t *v36;
  uint64_t *v37;
  char v38;
  BOOL v39;
  uint64_t *v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t *v43;
  uint64_t *v44;
  uint64_t *v45;
  uint64_t *v46;
  uint64_t *v47;
  uint64_t *v48;

void std::__function::__func<md::mun::MuninOverlayRenderLayer::debugLayout(md::LayoutContext const&)::$_2,std::allocator<md::mun::MuninOverlayRenderLayer::debugLayout(md::LayoutContext const&)::$_2>,void ()(md::mun::MuninNavigationGraph const*)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

__n128 std::__function::__func<md::mun::MuninOverlayRenderLayer::debugLayout(md::LayoutContext const&)::$_2,std::allocator<md::mun::MuninOverlayRenderLayer::debugLayout(md::LayoutContext const&)::$_2>,void ()(md::mun::MuninNavigationGraph const*)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x70uLL);
  *(_QWORD *)v2 = &off_1E42D4138;
  *(_OWORD *)(v2 + 56) = *(_OWORD *)(a1 + 56);
  *(_OWORD *)(v2 + 72) = *(_OWORD *)(a1 + 72);
  *(_OWORD *)(v2 + 88) = *(_OWORD *)(a1 + 88);
  *((_QWORD *)v2 + 13) = *(_QWORD *)(a1 + 104);
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  result = *(__n128 *)(a1 + 40);
  *(__n128 *)(v2 + 40) = result;
  return result;
}

__n128 std::__function::__func<md::mun::MuninOverlayRenderLayer::debugLayout(md::LayoutContext const&)::$_2,std::allocator<md::mun::MuninOverlayRenderLayer::debugLayout(md::LayoutContext const&)::$_2>,void ()(md::mun::MuninNavigationGraph const*)>::__clone(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __n128 result;
  __int128 v5;
  __int128 v6;

  *(_QWORD *)a2 = &off_1E42D4138;
  v2 = *(_OWORD *)(a1 + 8);
  v3 = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 40) = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(_OWORD *)(a2 + 8) = v2;
  result = *(__n128 *)(a1 + 56);
  v5 = *(_OWORD *)(a1 + 72);
  v6 = *(_OWORD *)(a1 + 88);
  *(_QWORD *)(a2 + 104) = *(_QWORD *)(a1 + 104);
  *(_OWORD *)(a2 + 88) = v6;
  *(_OWORD *)(a2 + 72) = v5;
  *(__n128 *)(a2 + 56) = result;
  return result;
}

double std::__function::__func<md::mun::MuninOverlayRenderLayer::debugLayout(md::LayoutContext const&)::$_2,std::allocator<md::mun::MuninOverlayRenderLayer::debugLayout(md::LayoutContext const&)::$_2>,void ()(md::mun::MuninNavigationGraph const*)>::operator()(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  __int128 v4;
  uint64_t v5;
  uint64_t **v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t *v9;
  int32x4_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v16;
  uint64_t *v17;
  _QWORD *MeshDrawable;
  uint64_t *v23;
  std::__shared_weak_count *v24;
  unint64_t *p_shared_owners;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t *v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  double result;
  float32x4_t v38;
  float32x4_t v39;
  _OWORD v40[2];
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;

  v43 = *a2;
  v3 = *(_QWORD *)(a1 + 80);
  v4 = *(_OWORD *)(a1 + 24);
  v40[0] = *(_OWORD *)(a1 + 8);
  v40[1] = v4;
  v5 = *(_QWORD *)(a1 + 40);
  v6 = *(uint64_t ***)(a1 + 48);
  v41 = &v43;
  v42 = v5;
  v7 = *v6;
  v8 = v6[1];
  if (*v6 != v8)
  {
    v9 = 0;
    v10 = vdupq_n_s32(0x3B808081u);
    v38 = (float32x4_t)v10;
    do
    {
      v11 = **(_QWORD **)(a1 + 56);
      if (!v11)
        goto LABEL_8;
      v12 = v7[10];
      v13 = *(_QWORD *)(v11 + 80);
      v14 = v13 - v12;
      _CF = v12 >= v13;
      v16 = v12 - v13;
      if (v16 == 0 || !_CF)
        v16 = v14;
      if (v16 >= 0xEA61)
LABEL_8:
        ++**(_QWORD **)(a1 + 64);
      v17 = v7;
      if (*v7 != *(_QWORD *)(**(_QWORD **)(a1 + 32) + 80))
      {
        v10.i32[0] = *(_DWORD *)(*(_QWORD *)(a1 + 72) + 4 * (**(_QWORD **)(a1 + 64) % 9uLL));
        v39 = vmulq_f32(vcvtq_f32_u32(vmovl_u16((uint16x4_t)*(_OWORD *)&vmovl_u8(*(uint8x8_t *)v10.i8))), v38);
        md::mun::MuninOverlayRenderLayer::debugLayout(md::LayoutContext const&)::$_2::operator() const(md::mun::MuninNavigationGraph const*)::{lambda(md::mun::CollectionPoint const&,geo::Color<float,4,(geo::ColorSpace)0> const&,BOOL)#1}::operator()((double **)v40, v7, (__int128 *)&v39, 0);
        **(_QWORD **)(a1 + 56) = v7;
        v17 = v9;
      }
      v7 += 233;
      v9 = v17;
    }
    while (v7 != v8);
    if (v17)
    {
      __asm { FMOV            V0.4S, #1.0 }
      v39 = _Q0;
      md::mun::MuninOverlayRenderLayer::debugLayout(md::LayoutContext const&)::$_2::operator() const(md::mun::MuninNavigationGraph const*)::{lambda(md::mun::CollectionPoint const&,geo::Color<float,4,(geo::ColorSpace)0> const&,BOOL)#1}::operator()((double **)v40, v17, (__int128 *)&v39, 1);
    }
  }
  v23 = *(uint64_t **)(v3 + 160);
  *(_QWORD *)(v3 + 160) = MeshDrawable;
  if (v23)
  {
    v24 = (std::__shared_weak_count *)v23[3];
    if (v24)
    {
      p_shared_owners = (unint64_t *)&v24->__shared_owners_;
      do
        v26 = __ldaxr(p_shared_owners);
      while (__stlxr(v26 - 1, p_shared_owners));
      if (!v26)
      {
        ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
        std::__shared_weak_count::__release_weak(v24);
      }
    }
    v27 = v23[1];
    v23[1] = 0;
    if (v27)
      (*(void (**)(uint64_t))(*(_QWORD *)v27 + 8))(v27);
    v28 = *v23;
    *v23 = 0;
    if (v28)
      (*(void (**)(uint64_t))(*(_QWORD *)v28 + 8))(v28);
    MEMORY[0x1A1AF4E00](v23, 0x20C40DC1BFBCFLL);
  }
  if (objc_msgSend(**(id **)(a1 + 24), "muninGraphConnections", *(_OWORD *)&v38))
  {
    v30 = *(uint64_t **)(v3 + 168);
    *(_QWORD *)(v3 + 168) = v29;
    if (v30)
    {
      v31 = (std::__shared_weak_count *)v30[3];
      if (v31)
      {
        v32 = (unint64_t *)&v31->__shared_owners_;
        do
          v33 = __ldaxr(v32);
        while (__stlxr(v33 - 1, v32));
        if (!v33)
        {
          ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
          std::__shared_weak_count::__release_weak(v31);
        }
      }
      v34 = v30[1];
      v30[1] = 0;
      if (v34)
        (*(void (**)(uint64_t))(*(_QWORD *)v34 + 8))(v34);
      v35 = *v30;
      *v30 = 0;
      if (v35)
        (*(void (**)(uint64_t))(*(_QWORD *)v35 + 8))(v35);
      MEMORY[0x1A1AF4E00](v30, 0x20C40DC1BFBCFLL);
    }
  }
  v36 = *(_QWORD *)(a1 + 104);
  *(_QWORD *)(v3 + 200) = *(_QWORD *)(v36 + 24);
  *(_QWORD *)(v3 + 208) = *(_QWORD *)(v36 + 32);
  *(_QWORD *)(v3 + 216) = *(_QWORD *)(v36 + 40);
  *(_QWORD *)(v3 + 224) = *(_QWORD *)(v36 + 48);
  *(_QWORD *)(v3 + 176) = *(_QWORD *)v36;
  *(_QWORD *)(v3 + 184) = *(_QWORD *)(v36 + 8);
  result = *(double *)(v36 + 16);
  *(double *)(v3 + 192) = result;
  return result;
}

void md::mun::MuninOverlayRenderLayer::debugLayout(md::LayoutContext const&)::$_2::operator() const(md::mun::MuninNavigationGraph const*)::{lambda(md::mun::CollectionPoint const&,geo::Color<float,4,(geo::ColorSpace)0> const&,BOOL)#1}::operator()(double **a1, uint64_t *a2, __int128 *a3, int a4)
{
  float **v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  unint64_t v34;
  float *v35;
  float *v36;
  float *v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  char *v42;
  float *v43;
  uint64_t v44;
  int v45;
  float v46;
  float v47;
  float v48;
  float **v49;
  float v50;
  float v51;
  float v52;
  float v53;
  unint64_t v54;
  float *v55;
  float *v56;
  float v57;
  float *v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  unint64_t v62;
  float v63;
  char *v64;
  float *v65;
  uint64_t v66;
  int v67;
  float v68;
  float v69;
  float v70;
  float v71;
  float v72;
  float v73;
  float v74;
  float v75;
  float v76;
  float v77;
  float v78;
  float **v79;
  float v80;
  float v81;
  float v82;
  unint64_t v83;
  float *v84;
  float *v85;
  float *v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  unint64_t v90;
  float v91;
  float v92;
  char *v93;
  float *v94;
  uint64_t v95;
  int v96;
  BOOL v97;
  uint64_t v98;
  unint64_t v99;
  geo::read_write_lock *v100;
  const char *v101;
  _QWORD *v102;
  unint64_t v103;
  geo::read_write_lock *v104;
  const char *v105;
  _QWORD *v106;
  float v107;
  uint64_t v108;
  uint64_t i;
  _QWORD *v110;
  int8x8_t v111;
  uint8x8_t v112;
  unint64_t v113;
  uint64_t ***v114;
  uint64_t **v115;
  uint64_t v116;
  unint64_t v117;
  uint64_t *v118;
  uint64_t v119;
  _QWORD *v120;
  _QWORD *v121;
  char *v122;
  double v123;
  double v124;
  double v125;
  double v126;
  double v127;
  double v128;
  double v129;
  double v130;
  double v131;
  double v132;
  double *v133;
  unint64_t v134;
  _DWORD *v135;
  _DWORD *v136;
  _DWORD *v137;
  uint64_t v138;
  unint64_t v139;
  uint64_t v140;
  unint64_t v141;
  char *v142;
  char *v143;
  char *v144;
  uint64_t v145;
  int v146;
  char *v147;
  double v148;
  double v149;
  double v150;
  double v151;
  double v152;
  double v153;
  double v154;
  float v155;
  float v156;
  float v157;
  void **v158;
  unint64_t v159;
  float *v160;
  float *v161;
  uint64_t v162;
  unint64_t v163;
  uint64_t v164;
  unint64_t v165;
  char *v166;
  char *v167;
  char *v168;
  uint64_t v169;
  int v170;
  char *v171;
  unint64_t v172;
  float v173;
  float v174;
  float v175;
  float v176;
  float v177;
  float v178;
  float v179;
  float v180;
  double v181;
  double v182;
  float v183;
  double v184;
  float v185;
  float v186;
  float v187;
  float v188;
  float v189;
  float v190;
  __int128 v191;
  __int128 v192;
  __int128 v193;
  __int128 v194;
  __int128 v195;

  v8 = (float **)a1[1];
  v9 = (*a1)[4];
  v10 = (*a1)[5];
  v11 = (*a1)[6];
  v13 = *((double *)a2 + 2);
  v12 = *((double *)a2 + 3);
  v14 = *((double *)a2 + 1);
  v15 = (*a1)[3];
  v16 = -(v13 * v10 - v12 * v9) - (v13 * v10 - v12 * v9);
  v17 = -(v12 * v15 - v14 * v10) - (v12 * v15 - v14 * v10);
  v18 = -(v14 * v9 - v13 * v15) - (v14 * v9 - v13 * v15);
  v19 = (*a1)[1] + v13 + v16 * v10 + v17 * v11 - v18 * v15;
  v20 = (*a1)[2] + v12 - v16 * v9 + v17 * v15 + v18 * v11;
  v21 = **a1 + v14 + v16 * v11 + v18 * v9 - v17 * v10;
  v22 = v19;
  *(float *)&v16 = v20;
  LODWORD(v20) = *((_DWORD *)a2 + 9);
  v23 = *((float *)a2 + 10);
  v185 = v23;
  v187 = -(float)(*(float *)&v20 * (float)(*(float *)&v20 + *(float *)&v20));
  *(float *)&v14 = (float)(1.0 - (float)(*(float *)&v20 * (float)(*(float *)&v20 + *(float *)&v20)))
                 - (float)((float)(v23 + v23) * v23);
  v176 = *((float *)a2 + 8);
  v179 = v176 + v176;
  v180 = *((float *)a2 + 11);
  v183 = *(float *)&v20 + *(float *)&v20;
  *(float *)&v20 = (float)((float)(v176 + v176) * *(float *)&v20) + (float)((float)(v23 + v23) * v180);
  v177 = v180 * v183;
  v178 = v23 * (float)(v176 + v176);
  *(float *)&v19 = v178 - (float)(v180 * v183);
  v24 = v15;
  v25 = v9;
  v26 = v10;
  v27 = v11;
  *(float *)&v9 = (float)-(float)((float)(*(float *)&v20 * v26) - (float)(*(float *)&v19 * v25))
                - (float)((float)(*(float *)&v20 * v26) - (float)(*(float *)&v19 * v25));
  *(float *)&v10 = (float)-(float)((float)(*(float *)&v19 * v24) - (float)(*(float *)&v14 * v26))
                 - (float)((float)(*(float *)&v19 * v24) - (float)(*(float *)&v14 * v26));
  *(float *)&v11 = (float)-(float)((float)(*(float *)&v14 * v25) - (float)(*(float *)&v20 * v24))
                 - (float)((float)(*(float *)&v14 * v25) - (float)(*(float *)&v20 * v24));
  v28 = (float)((float)(*(float *)&v14 + (float)(*(float *)&v11 * v25)) + (float)(*(float *)&v9 * v27))
      - (float)(*(float *)&v10 * v26);
  v29 = (float)((float)(*(float *)&v20 - (float)(*(float *)&v11 * v24)) + (float)(*(float *)&v9 * v26))
      + (float)(*(float *)&v10 * v27);
  v30 = (float)((float)(*(float *)&v19 + (float)(*(float *)&v11 * v27)) + (float)(*(float *)&v10 * v24))
      - (float)(*(float *)&v9 * v25);
  v31 = v21 - v28;
  v32 = v22 - v29;
  v189 = *(float *)&v16;
  v33 = *(float *)&v16 - v30;
  v191 = *a3;
  v35 = v8[1];
  v34 = (unint64_t)v8[2];
  if ((unint64_t)v35 >= v34)
  {
    v37 = *v8;
    v38 = ((char *)v35 - (char *)*v8) >> 5;
    v39 = v38 + 1;
    if ((unint64_t)(v38 + 1) >> 59)
      goto LABEL_133;
    v40 = v34 - (_QWORD)v37;
    if (v40 >> 4 > v39)
      v39 = v40 >> 4;
    if ((unint64_t)v40 >= 0x7FFFFFFFFFFFFFE0)
      v41 = 0x7FFFFFFFFFFFFFFLL;
    else
      v41 = v39;
    v173 = v22;
    if (v41)
    {
      v172 = __PAIR64__(LODWORD(v28), LODWORD(v29));
      v174 = v21;
      if (v41 >> 59)
        goto LABEL_134;
      v42 = (char *)operator new(32 * v41);
      v22 = v173;
      v21 = v174;
      v28 = *((float *)&v172 + 1);
      LODWORD(v29) = v172;
    }
    else
    {
      v42 = 0;
    }
    v43 = (float *)&v42[32 * v38];
    *v43 = v31;
    v43[1] = v32;
    v43[2] = v33;
    *((_OWORD *)v43 + 1) = *a3;
    v36 = v43 + 8;
    if (v35 != v37)
    {
      do
      {
        v44 = *((_QWORD *)v35 - 4);
        v35 -= 8;
        v45 = *((_DWORD *)v35 + 2);
        *((_QWORD *)v43 - 4) = v44;
        v43 -= 8;
        *((_DWORD *)v43 + 2) = v45;
        *((_OWORD *)v43 + 1) = *((_OWORD *)v35 + 1);
      }
      while (v35 != v37);
      v35 = *v8;
    }
    *v8 = v43;
    v8[1] = v36;
    v8[2] = (float *)&v42[32 * v41];
    if (v35)
    {
      v46 = v21;
      v47 = v28;
      v48 = v29;
      operator delete(v35);
      v29 = v48;
      v28 = v47;
      v21 = v46;
      v22 = v173;
    }
  }
  else
  {
    *v35 = v31;
    v35[1] = v32;
    v35[2] = v33;
    *((_OWORD *)v35 + 1) = v191;
    v36 = v35 + 8;
  }
  v8[1] = v36;
  v49 = (float **)a1[1];
  v50 = v28 + v21;
  v51 = v29 + v22;
  v52 = v30 + v189;
  v53 = v189;
  v192 = *a3;
  v55 = v49[1];
  v54 = (unint64_t)v49[2];
  if ((unint64_t)v55 >= v54)
  {
    v58 = *v49;
    v59 = ((char *)v55 - (char *)*v49) >> 5;
    v60 = v59 + 1;
    if ((unint64_t)(v59 + 1) >> 59)
      goto LABEL_133;
    v61 = v54 - (_QWORD)v58;
    if (v61 >> 4 > v60)
      v60 = v61 >> 4;
    if ((unint64_t)v61 >= 0x7FFFFFFFFFFFFFE0)
      v62 = 0x7FFFFFFFFFFFFFFLL;
    else
      v62 = v60;
    if (v62)
    {
      v175 = v21;
      if (v62 >> 59)
        goto LABEL_134;
      v63 = v22;
      v64 = (char *)operator new(32 * v62);
      v22 = v63;
      v21 = v175;
      v53 = v189;
    }
    else
    {
      v64 = 0;
    }
    v65 = (float *)&v64[32 * v59];
    *v65 = v50;
    v65[1] = v51;
    v65[2] = v52;
    *((_OWORD *)v65 + 1) = *a3;
    v56 = v65 + 8;
    if (v55 == v58)
    {
      v57 = v176;
    }
    else
    {
      v57 = v176;
      do
      {
        v66 = *((_QWORD *)v55 - 4);
        v55 -= 8;
        v67 = *((_DWORD *)v55 + 2);
        *((_QWORD *)v65 - 4) = v66;
        v65 -= 8;
        *((_DWORD *)v65 + 2) = v67;
        *((_OWORD *)v65 + 1) = *((_OWORD *)v55 + 1);
      }
      while (v55 != v58);
      v55 = *v49;
    }
    *v49 = v65;
    v49[1] = v56;
    v49[2] = (float *)&v64[32 * v62];
    if (v55)
    {
      v68 = v22;
      v69 = v21;
      operator delete(v55);
      v21 = v69;
      v22 = v68;
    }
  }
  else
  {
    *v55 = v50;
    v55[1] = v51;
    v55[2] = v52;
    *((_OWORD *)v55 + 1) = v192;
    v56 = v55 + 8;
    v57 = v176;
  }
  v70 = -(float)((float)(v180 * v179) - (float)(v183 * v185));
  v71 = (float)(1.0 - (float)(v179 * v57)) + v187;
  v72 = -(float)((float)(v71 * v24) - (float)((float)(v177 + v178) * v26));
  v73 = -(float)((float)((float)(v177 + v178) * v25) - (float)(v70 * v24));
  v74 = (float)-(float)((float)(v70 * v26) - (float)(v71 * v25)) - (float)((float)(v70 * v26) - (float)(v71 * v25));
  v75 = v72 + v72;
  v76 = v73 + v73;
  v77 = (float)((float)(v71 + (float)(v76 * v27)) + (float)(v75 * v24)) - (float)(v74 * v25);
  v78 = -(float)((float)((float)((float)(v74 * v26) - (float)((float)(v180 * v179) - (float)(v183 * v185)))
                       + (float)(v75 * v27))
               - (float)(v76 * v24));
  v49[1] = v56;
  v79 = (float **)a1[1];
  v80 = v21
      + (float)((float)-(float)((float)((float)((float)(v177 + v178) + (float)(v76 * v25)) + (float)(v74 * v27))
                              - (float)(v75 * v26))
              * 2.0);
  v81 = v22 + (float)(v78 * 2.0);
  v82 = v53 - (float)(v77 * 2.0);
  v193 = *a3;
  v84 = v79[1];
  v83 = (unint64_t)v79[2];
  v188 = v81;
  v190 = v80;
  v186 = v82;
  if ((unint64_t)v84 >= v83)
  {
    v86 = *v79;
    v87 = ((char *)v84 - (char *)*v79) >> 5;
    v88 = v87 + 1;
    if (!((unint64_t)(v87 + 1) >> 59))
    {
      v89 = v83 - (_QWORD)v86;
      if (v89 >> 4 > v88)
        v88 = v89 >> 4;
      if ((unint64_t)v89 >= 0x7FFFFFFFFFFFFFE0)
        v90 = 0x7FFFFFFFFFFFFFFLL;
      else
        v90 = v88;
      if (!v90)
      {
        v93 = 0;
        goto LABEL_49;
      }
      if (!(v90 >> 59))
      {
        v91 = v82;
        v92 = v81;
        v93 = (char *)operator new(32 * v90);
        v80 = v190;
        v81 = v92;
        v82 = v91;
LABEL_49:
        v94 = (float *)&v93[32 * v87];
        *v94 = v80;
        v94[1] = v81;
        v94[2] = v82;
        *((_OWORD *)v94 + 1) = *a3;
        v85 = v94 + 8;
        if (v84 != v86)
        {
          do
          {
            v95 = *((_QWORD *)v84 - 4);
            v84 -= 8;
            v96 = *((_DWORD *)v84 + 2);
            *((_QWORD *)v94 - 4) = v95;
            v94 -= 8;
            *((_DWORD *)v94 + 2) = v96;
            *((_OWORD *)v94 + 1) = *((_OWORD *)v84 + 1);
          }
          while (v84 != v86);
          v84 = *v79;
        }
        *v79 = v94;
        v79[1] = v85;
        v79[2] = (float *)&v93[32 * v90];
        if (v84)
          operator delete(v84);
        goto LABEL_54;
      }
LABEL_134:
      std::__throw_bad_array_new_length[abi:nn180100]();
    }
LABEL_133:
    abort();
  }
  *v84 = v80;
  v84[1] = v81;
  v84[2] = v82;
  *((_OWORD *)v84 + 1) = v193;
  v85 = v84 + 8;
LABEL_54:
  v79[1] = v85;
  if (objc_msgSend(*(id *)a1[2], "muninGraphConnections", v172))
    v97 = a4 == 0;
  else
    v97 = 1;
  if (v97)
    return;
  v98 = *(_QWORD *)(*(_QWORD *)a1[3] + 232);
  v99 = *a2;
  v100 = (geo::read_write_lock *)pthread_rwlock_rdlock((pthread_rwlock_t *)(v98 + 96));
  if ((_DWORD)v100)
    geo::read_write_lock::logFailure(v100, (uint64_t)"read lock", v101);
  v102 = *(_QWORD **)(v98 + 48);
  if (v102 == (_QWORD *)(v98 + 56))
  {
LABEL_61:
    v103 = 0;
    goto LABEL_62;
  }
  while (1)
  {
    v110 = (_QWORD *)v102[4];
    v111 = (int8x8_t)v110[25];
    if (v111)
    {
      v112 = (uint8x8_t)vcnt_s8(v111);
      v112.i16[0] = vaddlv_u8(v112);
      if (v112.u32[0] > 1uLL)
      {
        v113 = v99;
        if (*(_QWORD *)&v111 <= v99)
          v113 = v99 % *(_QWORD *)&v111;
      }
      else
      {
        v113 = (*(_QWORD *)&v111 - 1) & v99;
      }
      v114 = *(uint64_t ****)(v110[24] + 8 * v113);
      if (v114)
      {
        v115 = *v114;
        if (v115)
          break;
      }
    }
LABEL_90:
    v120 = (_QWORD *)v102[1];
    if (v120)
    {
      do
      {
        v121 = v120;
        v120 = (_QWORD *)*v120;
      }
      while (v120);
    }
    else
    {
      do
      {
        v121 = (_QWORD *)v102[2];
        v97 = *v121 == (_QWORD)v102;
        v102 = v121;
      }
      while (!v97);
    }
    v102 = v121;
    if (v121 == (_QWORD *)(v98 + 56))
      goto LABEL_61;
  }
  if (v112.u32[0] < 2uLL)
  {
    v116 = *(_QWORD *)&v111 - 1;
    while (1)
    {
      v118 = v115[1];
      if (v118 == (uint64_t *)v99)
      {
        if (v115[2] == (uint64_t *)v99)
          goto LABEL_89;
      }
      else if (((unint64_t)v118 & v116) != v113)
      {
        goto LABEL_90;
      }
      v115 = (uint64_t **)*v115;
      if (!v115)
        goto LABEL_90;
    }
  }
  while (1)
  {
    v117 = (unint64_t)v115[1];
    if (v117 == v99)
      break;
    if (v117 >= *(_QWORD *)&v111)
      v117 %= *(_QWORD *)&v111;
    if (v117 != v113)
      goto LABEL_90;
LABEL_78:
    v115 = (uint64_t **)*v115;
    if (!v115)
      goto LABEL_90;
  }
  if (v115[2] != (uint64_t *)v99)
    goto LABEL_78;
LABEL_89:
  v119 = v110[21];
  if (!v119)
    goto LABEL_90;
  v103 = v119 + 1864 * *((unsigned __int16 *)v115 + 12);
LABEL_62:
  v104 = (geo::read_write_lock *)pthread_rwlock_unlock((pthread_rwlock_t *)(v98 + 96));
  if ((_DWORD)v104)
    geo::read_write_lock::logFailure(v104, (uint64_t)"unlock", v105);
  v106 = std::__hash_table<std::__hash_value_type<md::mun::CollectionPoint const*,geo::small_vector<md::mun::CollectionPoint const*,6ul>>,std::__unordered_map_hasher<md::mun::CollectionPoint const*,std::__hash_value_type<md::mun::CollectionPoint const*,geo::small_vector<md::mun::CollectionPoint const*,6ul>>,std::hash<md::mun::CollectionPoint const*>,std::equal_to<md::mun::CollectionPoint const*>,true>,std::__unordered_map_equal<md::mun::CollectionPoint const*,std::__hash_value_type<md::mun::CollectionPoint const*,geo::small_vector<md::mun::CollectionPoint const*,6ul>>,std::equal_to<md::mun::CollectionPoint const*>,std::hash<md::mun::CollectionPoint const*>,true>,std::allocator<std::__hash_value_type<md::mun::CollectionPoint const*,geo::small_vector<md::mun::CollectionPoint const*,6ul>>>>::find<md::mun::CollectionPoint const*>((_QWORD *)(*(_QWORD *)a1[4] + 24), v103);
  v107 = v190;
  if (v106)
  {
    v108 = v106[3];
    for (i = v106[4]; v108 != i; v108 += 8)
    {
      v124 = (*a1)[4];
      v123 = (*a1)[5];
      v125 = (*a1)[6];
      v127 = *(double *)(*(_QWORD *)v108 + 16);
      v126 = *(double *)(*(_QWORD *)v108 + 24);
      v128 = *(double *)(*(_QWORD *)v108 + 8);
      v130 = **a1;
      v129 = (*a1)[1];
      v131 = (*a1)[2];
      v132 = (*a1)[3];
      v133 = a1[5];
      v194 = *a3;
      v135 = (_DWORD *)*((_QWORD *)v133 + 1);
      v134 = *((_QWORD *)v133 + 2);
      if ((unint64_t)v135 >= v134)
      {
        v137 = *(_DWORD **)v133;
        v138 = ((uint64_t)v135 - *(_QWORD *)v133) >> 5;
        v139 = v138 + 1;
        if ((unint64_t)(v138 + 1) >> 59)
          goto LABEL_133;
        v140 = v134 - (_QWORD)v137;
        if (v140 >> 4 > v139)
          v139 = v140 >> 4;
        if ((unint64_t)v140 >= 0x7FFFFFFFFFFFFFE0)
          v141 = 0x7FFFFFFFFFFFFFFLL;
        else
          v141 = v139;
        v184 = **a1;
        if (v141)
        {
          v181 = (*a1)[4];
          if (v141 >> 59)
            goto LABEL_134;
          v142 = (char *)operator new(32 * v141);
          v107 = v190;
          v124 = v181;
          v130 = v184;
        }
        else
        {
          v142 = 0;
        }
        v143 = &v142[32 * v138];
        *(float *)v143 = v107;
        *((float *)v143 + 1) = v188;
        *((float *)v143 + 2) = v186;
        *((_OWORD *)v143 + 1) = *a3;
        v144 = v143;
        if (v135 != v137)
        {
          do
          {
            v145 = *((_QWORD *)v135 - 4);
            v135 -= 8;
            v146 = v135[2];
            *((_QWORD *)v144 - 4) = v145;
            v144 -= 32;
            *((_DWORD *)v144 + 2) = v146;
            *((_OWORD *)v144 + 1) = *((_OWORD *)v135 + 1);
          }
          while (v135 != v137);
          v135 = *(_DWORD **)v133;
        }
        v147 = &v142[32 * v141];
        v136 = v143 + 32;
        *(_QWORD *)v133 = v144;
        *((_QWORD *)v133 + 1) = v143 + 32;
        *((_QWORD *)v133 + 2) = v147;
        if (v135)
        {
          v182 = v126;
          v148 = v124;
          operator delete(v135);
          v124 = v148;
          v126 = v182;
          v130 = v184;
          v107 = v190;
        }
      }
      else
      {
        *(float *)v135 = v107;
        *((float *)v135 + 1) = v188;
        *((float *)v135 + 2) = v186;
        *((_OWORD *)v135 + 1) = v194;
        v136 = v135 + 8;
      }
      v149 = -(v127 * v123 - v126 * v124) - (v127 * v123 - v126 * v124);
      v150 = -(v126 * v132 - v128 * v123) - (v126 * v132 - v128 * v123);
      v151 = -(v128 * v124 - v127 * v132) - (v128 * v124 - v127 * v132);
      v152 = v130 + v128 + v149 * v125 + v151 * v124 - v150 * v123;
      v153 = v129 + v127 + v149 * v123 + v150 * v125 - v151 * v132;
      v154 = v131 + v126 - v149 * v124 + v150 * v132 + v151 * v125;
      v155 = v152;
      v156 = v153;
      v157 = v154;
      *((_QWORD *)v133 + 1) = v136;
      v158 = (void **)a1[5];
      v195 = *a3;
      v160 = (float *)v158[1];
      v159 = (unint64_t)v158[2];
      if ((unint64_t)v160 < v159)
      {
        *v160 = v155;
        v160[1] = v156;
        v160[2] = v157;
        *((_OWORD *)v160 + 1) = v195;
        v122 = (char *)(v160 + 8);
      }
      else
      {
        v161 = (float *)*v158;
        v162 = ((char *)v160 - (_BYTE *)*v158) >> 5;
        v163 = v162 + 1;
        if ((unint64_t)(v162 + 1) >> 59)
          goto LABEL_133;
        v164 = v159 - (_QWORD)v161;
        if (v164 >> 4 > v163)
          v163 = v164 >> 4;
        if ((unint64_t)v164 >= 0x7FFFFFFFFFFFFFE0)
          v165 = 0x7FFFFFFFFFFFFFFLL;
        else
          v165 = v163;
        if (v165)
        {
          if (v165 >> 59)
            goto LABEL_134;
          v166 = (char *)operator new(32 * v165);
          v107 = v190;
        }
        else
        {
          v166 = 0;
        }
        v167 = &v166[32 * v162];
        *(float *)v167 = v155;
        *((float *)v167 + 1) = v156;
        *((float *)v167 + 2) = v157;
        *((_OWORD *)v167 + 1) = *a3;
        v168 = v167;
        if (v160 != v161)
        {
          do
          {
            v169 = *((_QWORD *)v160 - 4);
            v160 -= 8;
            v170 = *((_DWORD *)v160 + 2);
            *((_QWORD *)v168 - 4) = v169;
            v168 -= 32;
            *((_DWORD *)v168 + 2) = v170;
            *((_OWORD *)v168 + 1) = *((_OWORD *)v160 + 1);
          }
          while (v160 != v161);
          v160 = (float *)*v158;
        }
        v171 = &v166[32 * v165];
        v122 = v167 + 32;
        *v158 = v168;
        v158[1] = v167 + 32;
        v158[2] = v171;
        if (v160)
        {
          operator delete(v160);
          v107 = v190;
        }
      }
      v158[1] = v122;
    }
  }
}

_QWORD *`anonymous namespace'::createMeshDrawable(id *a1, void *a2, uint64_t *a3, _QWORD *a4)
{
  id v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  uint64_t v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  __int128 *v13;
  __int128 v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  uint64_t v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  _QWORD *v37;
  unint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  unint64_t v41;
  uint64_t v47;
  uint64_t v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  _QWORD *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  uint64_t v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  unsigned __int8 v67;
  uint64_t p_shared_weak_owners;
  unsigned __int8 v69;
  uint64_t v70;
  std::__shared_weak_count *v71;
  unint64_t *v72;
  unint64_t v73;
  std::__shared_weak_count *v74;
  unint64_t *v75;
  unint64_t v76;
  std::__shared_weak_count *v77;
  std::__shared_weak_count *shared_owners;
  unint64_t *v79;
  unint64_t v80;
  unint64_t *v81;
  unint64_t v82;
  int64x2_t *v83;
  uint64_t v84;
  _QWORD *v85;
  _QWORD *v86;
  unint64_t v87;
  unint64_t v88;
  unint64_t v89;
  std::__shared_weak_count *v90;
  unint64_t *v91;
  unint64_t v92;
  std::__shared_weak_count *v93;
  unint64_t *v94;
  unint64_t v95;
  std::__shared_weak_count *v96;
  unint64_t *v97;
  unint64_t v98;
  std::__shared_weak_count *v99;
  uint64_t *v100;
  unint64_t v101;
  std::__shared_weak_count *v102;
  unint64_t *v103;
  unint64_t v104;
  int v106;
  unsigned __int8 v107;
  uint64_t v108;
  int v109;
  int v110;
  uint64_t v111;
  geo::read_write_lock *v112;
  const char *v113;
  malloc_zone_t *zone;
  int v115;
  uint64_t v116;
  geo::read_write_lock *v117;
  const char *v118;
  malloc_zone_t *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  _QWORD v124[5];
  std::__shared_weak_count *v125;
  _QWORD *v126;
  uint64_t v127;
  std::__shared_weak_count *v128;
  std::__shared_weak_count *v129;
  uint64_t v130;
  std::__shared_weak_count *v131;
  __int128 v132;
  __int128 v133;
  uint64_t v134;
  std::__shared_weak_count *v135;
  _OWORD v136[2];
  _BYTE v137[20];
  int v138;
  _BYTE *v139;
  uint64_t v140;
  int v141;
  char v142;
  uint64_t v143;

  v143 = *MEMORY[0x1E0C80C00];
  v7 = a2;
  v8 = *(_QWORD *)(objc_msgSend(v7, "device") + 24);
  v10 = *(_QWORD *)(v8 + 16);
  v9 = *(std::__shared_weak_count **)(v8 + 24);
  v134 = v10;
  v135 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
  }
  v13 = (__int128 *)objc_msgSend(*a1, "format");
  v14 = v13[1];
  v132 = *v13;
  v133 = v14;
  v15 = *(_QWORD *)(v10 + 80);
  v16 = *(std::__shared_weak_count **)(v15 + 424);
  v128 = *(std::__shared_weak_count **)(v15 + 416);
  v129 = v16;
  if (v16)
  {
    v17 = (unint64_t *)&v16->__shared_owners_;
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
  }
  v139 = 0;
  v140 = 0;
  v141 = 0;
  v137[0] = 1;
  *(_OWORD *)&v137[4] = xmmword_19FFB35B0;
  v138 = 7;
  v142 = 15;
  v19 = (std::__shared_weak_count *)operator new(0x198uLL);
  v19->__shared_owners_ = 0;
  v19->__shared_weak_owners_ = 0;
  v19->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E4578;
  v136[0] = v132;
  v136[1] = v133;
  v130 = ggl::Debug::ExtendedPipelineState::ExtendedPipelineState((uint64_t)&v19[1], &v128, (uint64_t)v137, v136);
  v131 = v19;
  if (v16)
  {
    v20 = (unint64_t *)&v16->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  v22 = (_QWORD *)operator new();
  v23 = operator new(0xE8uLL);
  v23[1] = 0;
  v23[2] = 0;
  *v23 = &off_1E42E2390;
  v24 = ggl::BufferData::BufferData((uint64_t)(v23 + 3), qword_1EE55CAC0, 2, 1, 6, 1);
  v23[28] = ggl::Debug::Style::reflection(void)::reflection;
  v23[3] = &off_1E42B9850;
  *(_QWORD *)v137 = v24;
  *(_QWORD *)&v137[8] = v23;
  v25 = operator new(0xE8uLL);
  v25[1] = 0;
  v25[2] = 0;
  *v25 = &off_1E42E2358;
  v26 = ggl::BufferData::BufferData((uint64_t)(v25 + 3), qword_1EE55CB00, 2, 1, 6, 1);
  v25[28] = ggl::Debug::View::reflection(void)::reflection;
  v25[3] = &off_1E42B9830;
  *(_QWORD *)&v136[0] = v26;
  *((_QWORD *)&v136[0] + 1) = v25;
  v27 = (std::__shared_weak_count *)operator new(0xE8uLL);
  v27->__shared_owners_ = 0;
  v28 = (unint64_t *)&v27->__shared_owners_;
  v27->__shared_weak_owners_ = 0;
  v27->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E22E8;
  v29 = ggl::BufferData::BufferData((uint64_t)&v27[1], qword_1EE54AFA0, 2, 1, 6, 1);
  v27[9].__shared_owners_ = (uint64_t)ggl::Tile::Transform::reflection(void)::reflection;
  v27[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B97F0;
  v128 = (std::__shared_weak_count *)v29;
  v129 = v27;
  ggl::Debug::ExtendedPipelineSetup::ExtendedPipelineSetup(v22, v130, v131, (uint64_t *)v137, (uint64_t *)v136, (uint64_t *)&v128);
  do
    v30 = __ldaxr(v28);
  while (__stlxr(v30 - 1, v28));
  if (!v30)
  {
    ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
    std::__shared_weak_count::__release_weak(v27);
  }
  v31 = (std::__shared_weak_count *)*((_QWORD *)&v136[0] + 1);
  if (*((_QWORD *)&v136[0] + 1))
  {
    v32 = (unint64_t *)(*((_QWORD *)&v136[0] + 1) + 8);
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }
  v34 = *(std::__shared_weak_count **)&v137[8];
  if (*(_QWORD *)&v137[8])
  {
    v35 = (unint64_t *)(*(_QWORD *)&v137[8] + 8);
    do
      v36 = __ldaxr(v35);
    while (__stlxr(v36 - 1, v35));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      std::__shared_weak_count::__release_weak(v34);
    }
  }
  v37 = *(_QWORD **)(v22[8] + 16);
  v38 = v37[1];
  v39 = v37[9];
  *(_DWORD *)v39 = 1065353216;
  *(_QWORD *)(v39 + 12) = 0;
  *(_QWORD *)(v39 + 4) = 0;
  *(_DWORD *)(v39 + 20) = 1065353216;
  *(_QWORD *)(v39 + 24) = 0;
  *(_QWORD *)(v39 + 32) = 0;
  *(_DWORD *)(v39 + 40) = 1065353216;
  *(_QWORD *)(v39 + 52) = 0;
  *(_QWORD *)(v39 + 44) = 0;
  *(_DWORD *)(v39 + 60) = 1065353216;
  if (v37[8] > v38)
    v38 = v37[8];
  v37[7] = 0;
  v37[8] = v38;
  v40 = *(_QWORD **)v22[8];
  v41 = v40[1];
  __asm { FMOV            V0.4S, #1.0 }
  *(_OWORD *)v40[9] = _Q0;
  if (v40[8] > v41)
    v41 = v40[8];
  v40[7] = 0;
  v40[8] = v41;
  v48 = *a4;
  v47 = a4[1];
  v49 = (std::__shared_weak_count *)operator new(0xF8uLL);
  v49->__shared_owners_ = 0;
  v50 = (unint64_t *)&v49->__shared_owners_;
  v49->__shared_weak_owners_ = 0;
  v49->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E0368;
  ggl::BufferData::BufferData((uint64_t)&v49[1], 32, 0, 0, 7, (v47 - v48) >> 5);
  v49[9].__shared_weak_owners_ = (uint64_t)"mesh vertex data";
  v49[10].__vftable = (std::__shared_weak_count_vtbl *)&ggl::Debug::extendedVboReflection;
  v49[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B8060;
  v49[9].__shared_owners_ = (uint64_t)&unk_1E42B8080;
  *(_QWORD *)&v136[0] = v49 + 1;
  *((_QWORD *)&v136[0] + 1) = v49;
  (*(void (**)(uint64_t *__return_ptr))(**(_QWORD **)(objc_msgSend(v7, "device") + 8) + 24))(&v127);
  v124[0] = MEMORY[0x1E0C809B0];
  v124[1] = 3321888768;
  v124[2] = ___ZN12_GLOBAL__N_118createMeshDrawableERKN2md13LayoutContextEP17VKSharedResourcesRKNSt3__110unique_ptrIN3ggl11RenderStateENS6_14default_deleteIS9_EEEERKNS6_6vectorINS8_5Debug11ExtendedVboENS6_9allocatorISH_EEEE_block_invoke;
  v124[3] = &__block_descriptor_56_ea8_32c75_ZTSNSt3__110shared_ptrIN3ggl15VertexDataTypedINS1_5Debug11ExtendedVboEEEEE_e30_v16__0__ResourceAccessor_____8l;
  v124[4] = v49 + 1;
  v125 = v49;
  do
    v51 = __ldxr(v50);
  while (__stxr(v51 + 1, v50));
  v126 = a4;
  v139 = 0;
  *(_QWORD *)v137 = &off_1E42C7118;
  *(_QWORD *)&v137[8] = MEMORY[0x1A1AF5730](v124);
  v139 = v137;
  v128 = 0;
  v129 = 0;
  (*(void (**)(uint64_t, _BYTE *, std::__shared_weak_count **))(*(_QWORD *)v127 + 16))(v127, v137, &v128);
  v52 = v129;
  if (v129)
  {
    v53 = (unint64_t *)&v129->__shared_owners_;
    do
      v54 = __ldaxr(v53);
    while (__stlxr(v54 - 1, v53));
    if (!v54)
    {
      ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
      std::__shared_weak_count::__release_weak(v52);
    }
  }
  v55 = v139;
  if (v139 == v137)
  {
    v56 = 4;
    v55 = v137;
  }
  else
  {
    if (!v139)
      goto LABEL_42;
    v56 = 5;
  }
  (*(void (**)(void))(*v55 + 8 * v56))();
LABEL_42:
  if (v127)
  {
    v57 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v127 + 24))(v127);
    v58 = v127;
    v127 = 0;
    *(_QWORD *)v137 = v58;
    (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v57 + 48))(v57, v137);
    v59 = *(_QWORD *)v137;
    *(_QWORD *)v137 = 0;
    if (v59)
      (*(void (**)(uint64_t))(*(_QWORD *)v59 + 8))(v59);
    v60 = v127;
    v127 = 0;
    if (v60)
      (*(void (**)(uint64_t))(*(_QWORD *)v60 + 8))(v60);
  }
  v61 = (std::__shared_weak_count *)operator new(0xA8uLL);
  v61->__shared_owners_ = 0;
  v62 = (unint64_t *)&v61->__shared_owners_;
  v61->__shared_weak_owners_ = 0;
  v61->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E44D0;
  v64 = (std::__shared_weak_count *)*((_QWORD *)&v136[0] + 1);
  v63 = *(_QWORD *)&v136[0];
  if (*((_QWORD *)&v136[0] + 1))
  {
    v65 = (unint64_t *)(*((_QWORD *)&v136[0] + 1) + 8);
    do
      v66 = __ldxr(v65);
    while (__stxr(v66 + 1, v65));
  }
  if ((v67 & 1) == 0)
  {
    v121 = v63;
    v63 = v121;
    if (v106)
    {
      if ((v107 & 1) == 0
      {
        ggl::MeshTyped<ggl::Debug::ExtendedVbo>::attributesReflection(void)::r = (uint64_t)&ggl::Debug::extendedVboReflection;
      }
      ggl::MeshTyped<ggl::Debug::ExtendedVbo>::typedReflection(void)::r = (uint64_t)&ggl::MeshTyped<ggl::Debug::ExtendedVbo>::attributesReflection(void)::r;
      unk_1EE58B490 = 1;
      v63 = v121;
    }
  }
  v61[3].__shared_weak_owners_ = 0;
  p_shared_weak_owners = (uint64_t)&v61[3].__shared_weak_owners_;
  v61[2].__shared_owners_ = 0;
  v61[2].__shared_weak_owners_ = 0;
  LODWORD(v61[3].__vftable) = 0;
  v61[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42BBC08;
  v61[1].__shared_owners_ = (uint64_t)"triangle mesh";
  v61[1].__shared_weak_owners_ = (uint64_t)&unk_1E42BBC28;
  v61[2].__vftable = 0;
  v61[3].__shared_owners_ = (uint64_t)&ggl::MeshTyped<ggl::Debug::ExtendedVbo>::typedReflection(void)::r;
  v61[4].__vftable = 0;
  v61[4].__shared_owners_ = 0;
  if ((v69 & 1) == 0)
  {
    v108 = v63;
    v63 = v108;
    v110 = v109;
    p_shared_weak_owners = (uint64_t)&v61[3].__shared_weak_owners_;
    if (v110)
    {
      v122 = v108;
      v111 = operator new();
      *(_QWORD *)(v111 + 16) = 0xA3D02C1100000005;
      *(_QWORD *)(v111 + 24) = "GeoGL";
      *(_OWORD *)(v111 + 32) = xmmword_19FFB2DE0;
      *(_QWORD *)v111 = &off_1E42B5668;
      *(_QWORD *)(v111 + 8) = "GeoGL";
      *(_OWORD *)(v111 + 72) = 0u;
      *(_OWORD *)(v111 + 88) = 0u;
      *(_OWORD *)(v111 + 104) = 0u;
      *(_OWORD *)(v111 + 120) = 0u;
      *(_OWORD *)(v111 + 136) = 0u;
      *(_OWORD *)(v111 + 152) = 0u;
      *(_OWORD *)(v111 + 168) = 0u;
      *(_OWORD *)(v111 + 184) = 0u;
      *(_OWORD *)(v111 + 200) = 0u;
      *(_OWORD *)(v111 + 216) = 0u;
      *(_OWORD *)(v111 + 232) = 0u;
      *(_QWORD *)(v111 + 248) = 0;
      *(_OWORD *)(v111 + 56) = 0u;
      v112 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v111 + 56), 0);
      if ((_DWORD)v112)
        geo::read_write_lock::logFailure(v112, (uint64_t)"initialization", v113);
      zone = malloc_create_zone(0, 0);
      *(_QWORD *)(v111 + 48) = zone;
      malloc_set_zone_name(zone, "GeoGL");
      *(_QWORD *)(v111 + 256) = os_log_create("com.apple.VectorKit", "Memory");
      ggl::Allocator::instance(void)::alloc = v111;
      p_shared_weak_owners = (uint64_t)&v61[3].__shared_weak_owners_;
      v63 = v122;
    }
  }
  v70 = ggl::Allocator::instance(void)::alloc;
  v61[6].__vftable = 0;
  v71 = v61 + 6;
  v61[5].__vftable = 0;
  v61[5].__shared_owners_ = 0;
  v61[4].__shared_weak_owners_ = v70;
  if ((v70 & 1) == 0)
  {
    v120 = p_shared_weak_owners;
    v123 = v63;
    p_shared_weak_owners = v120;
    v63 = v123;
    if (v115)
    {
      v116 = operator new();
      *(_QWORD *)(v116 + 16) = 0xA3D02C1100000005;
      *(_QWORD *)(v116 + 24) = "GeoGL";
      *(_OWORD *)(v116 + 32) = xmmword_19FFB2DE0;
      *(_QWORD *)v116 = &off_1E42B5668;
      *(_QWORD *)(v116 + 8) = "GeoGL";
      *(_OWORD *)(v116 + 72) = 0u;
      *(_OWORD *)(v116 + 88) = 0u;
      *(_OWORD *)(v116 + 104) = 0u;
      *(_OWORD *)(v116 + 120) = 0u;
      *(_OWORD *)(v116 + 136) = 0u;
      *(_OWORD *)(v116 + 152) = 0u;
      *(_OWORD *)(v116 + 168) = 0u;
      *(_OWORD *)(v116 + 184) = 0u;
      *(_OWORD *)(v116 + 200) = 0u;
      *(_OWORD *)(v116 + 216) = 0u;
      *(_OWORD *)(v116 + 232) = 0u;
      *(_QWORD *)(v116 + 248) = 0;
      *(_OWORD *)(v116 + 56) = 0u;
      v117 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v116 + 56), 0);
      if ((_DWORD)v117)
        geo::read_write_lock::logFailure(v117, (uint64_t)"initialization", v118);
      v119 = malloc_create_zone(0, 0);
      *(_QWORD *)(v116 + 48) = v119;
      malloc_set_zone_name(v119, "GeoGL");
      *(_QWORD *)(v116 + 256) = os_log_create("com.apple.VectorKit", "Memory");
      ggl::Allocator::instance(void)::alloc = v116;
      p_shared_weak_owners = v120;
      v63 = v123;
      v71 = v61 + 6;
    }
  }
  v61[6].__shared_owners_ = ggl::Allocator::instance(void)::alloc;
  v61[6].__shared_weak_owners_ = 0;
  v61[5].__shared_weak_owners_ = (uint64_t)v71;
  v61[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42BDCF8;
  v61[1].__shared_weak_owners_ = (uint64_t)&unk_1E42BDD18;
  *(_QWORD *)v137 = v63;
  *(_QWORD *)&v137[8] = v64;
  if (v64)
  {
    v72 = (unint64_t *)&v64->__shared_owners_;
    do
      v73 = __ldxr(v72);
    while (__stxr(v73 + 1, v72));
  }
  std::vector<std::shared_ptr<ggl::VertexData>,geo::StdAllocator<std::shared_ptr<ggl::VertexData>,ggl::Allocator>>::__assign_with_size[abi:nn180100]<std::shared_ptr<ggl::VertexData> const*,std::shared_ptr<ggl::VertexData> const*>(p_shared_weak_owners, (uint64_t *)v137, (uint64_t *)&v137[16], 1uLL);
  v74 = *(std::__shared_weak_count **)&v137[8];
  if (*(_QWORD *)&v137[8])
  {
    v75 = (unint64_t *)(*(_QWORD *)&v137[8] + 8);
    do
      v76 = __ldaxr(v75);
    while (__stlxr(v76 - 1, v75));
    if (!v76)
    {
      ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
      std::__shared_weak_count::__release_weak(v74);
    }
  }
  v77 = v61 + 1;
  shared_owners = (std::__shared_weak_count *)v61[5].__shared_owners_;
  v61[5].__vftable = 0;
  v61[5].__shared_owners_ = 0;
  if (shared_owners)
  {
    v79 = (unint64_t *)&shared_owners->__shared_owners_;
    do
      v80 = __ldaxr(v79);
    while (__stlxr(v80 - 1, v79));
    if (!v80)
    {
      ((void (*)(std::__shared_weak_count *))shared_owners->__on_zero_shared)(shared_owners);
      std::__shared_weak_count::__release_weak(shared_owners);
    }
  }
  v61[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42BBCD8;
  v61[1].__shared_weak_owners_ = (uint64_t)&unk_1E42BBCF8;
  if (v64)
  {
    v81 = (unint64_t *)&v64->__shared_owners_;
    do
      v82 = __ldaxr(v81);
    while (__stlxr(v82 - 1, v81));
    if (!v82)
    {
      ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
      std::__shared_weak_count::__release_weak(v64);
    }
  }
  v128 = v61 + 1;
  v129 = v61;
  v83 = (int64x2_t *)operator new();
  v84 = *a3;
  v83->i64[0] = (uint64_t)&off_1E42B59B0;
  v83[1].i64[0] = (uint64_t)"";
  v83[1].i64[1] = v84;
  v83[2].i64[0] = (uint64_t)v22;
  v83[2].i32[2] = 0;
  v83[3].i64[0] = 0;
  v83[3].i32[2] = 1065353216;
  v83[4].i64[0] = (uint64_t)v77;
  v83[4].i64[1] = 0;
  v83[5].i64[0] = 0;
  v83[5].i64[1] = 0;
  v83[6] = vdupq_n_s64(1uLL);
  v83[7].i64[0] = 0;
  v85 = (_QWORD *)operator new();
  v86 = v85;
  do
    v87 = __ldxr(v62);
  while (__stxr(v87 + 1, v62));
  *v85 = v83;
  v85[1] = v22;
  v85[2] = v77;
  v85[3] = v61;
  do
    v88 = __ldxr(v62);
  while (__stxr(v88 + 1, v62));
  do
    v89 = __ldaxr(v62);
  while (__stlxr(v89 - 1, v62));
  if (!v89)
  {
    ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
    std::__shared_weak_count::__release_weak(v61);
  }
  v90 = v129;
  if (v129)
  {
    v91 = (unint64_t *)&v129->__shared_owners_;
    do
      v92 = __ldaxr(v91);
    while (__stlxr(v92 - 1, v91));
    if (!v92)
    {
      ((void (*)(std::__shared_weak_count *))v90->__on_zero_shared)(v90);
      std::__shared_weak_count::__release_weak(v90);
    }
  }
  v93 = v125;
  if (v125)
  {
    v94 = (unint64_t *)&v125->__shared_owners_;
    do
      v95 = __ldaxr(v94);
    while (__stlxr(v95 - 1, v94));
    if (!v95)
    {
      ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
      std::__shared_weak_count::__release_weak(v93);
    }
  }
  v96 = (std::__shared_weak_count *)*((_QWORD *)&v136[0] + 1);
  if (*((_QWORD *)&v136[0] + 1))
  {
    v97 = (unint64_t *)(*((_QWORD *)&v136[0] + 1) + 8);
    do
      v98 = __ldaxr(v97);
    while (__stlxr(v98 - 1, v97));
    if (!v98)
    {
      ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
      std::__shared_weak_count::__release_weak(v96);
    }
  }
  v99 = v131;
  if (v131)
  {
    v100 = &v131->__shared_owners_;
    do
      v101 = __ldaxr((unint64_t *)v100);
    while (__stlxr(v101 - 1, (unint64_t *)v100));
    if (!v101)
    {
      ((void (*)(std::__shared_weak_count *))v99->__on_zero_shared)(v99);
      std::__shared_weak_count::__release_weak(v99);
    }
  }
  v102 = v135;
  if (v135)
  {
    v103 = (unint64_t *)&v135->__shared_owners_;
    do
      v104 = __ldaxr(v103);
    while (__stlxr(v104 - 1, v103));
    if (!v104)
    {
      ((void (*)(std::__shared_weak_count *))v102->__on_zero_shared)(v102);
      std::__shared_weak_count::__release_weak(v102);
    }
  }

  return v86;
}

void sub_19FA9406C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,char a31)
{
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  (*(void (**)(uint64_t))(*(_QWORD *)v34 + 8))(v34);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a21);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](v33);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a31);
  (*(void (**)(uint64_t))(*(_QWORD *)v32 + 8))(v32);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a23);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a29);

  _Unwind_Resume(a1);
}

uint64_t ___ZN12_GLOBAL__N_118createMeshDrawableERKN2md13LayoutContextEP17VKSharedResourcesRKNSt3__110unique_ptrIN3ggl11RenderStateENS6_14default_deleteIS9_EEEERKNS6_6vectorINS8_5Debug11ExtendedVboENS6_9allocatorISH_EEEE_block_invoke(uint64_t result)
{
  _QWORD *v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  _DWORD *v10;
  _DWORD *v11;

  v1 = *(_QWORD **)(result + 32);
  v2 = v1[6] - v1[5];
  v3 = v2 / v1[1] * v1[1];
  v4 = v2 % v1[1];
  if (v2 == v4)
    v5 = 0;
  else
    v5 = v1[9];
  v6 = *(uint64_t **)(result + 48);
  v7 = *v6;
  v8 = v6[1] - *v6;
  if (v8)
  {
    v9 = v8 >> 5;
    if (v9 <= 1)
      v9 = 1;
    v10 = (_DWORD *)(v5 + 16);
    v11 = (_DWORD *)(v7 + 16);
    do
    {
      *(v10 - 4) = *(v11 - 4);
      *(v10 - 3) = *(v11 - 3);
      *(v10 - 2) = *(v11 - 2);
      *v10 = *v11;
      v10[1] = v11[1];
      v10[2] = v11[2];
      v10[3] = v11[3];
      v10 += 8;
      v11 += 8;
      --v9;
    }
    while (v9);
  }
  if (v5 && v2 != v4)
  {
    if (v1[8] > v3)
      v3 = v1[8];
    v1[7] = 0;
    v1[8] = v3;
  }
  return result;
}

void std::__shared_ptr_emplace<ggl::Debug::ExtendedMesh>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E44D0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::Debug::ExtendedMesh>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E44D0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<ggl::Debug::ExtendedMesh>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t __copy_helper_block_ea8_32c75_ZTSNSt3__110shared_ptrIN3ggl15VertexDataTypedINS1_5Debug11ExtendedVboEEEEE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(result + 40) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void __destroy_helper_block_ea8_32c75_ZTSNSt3__110shared_ptrIN3ggl15VertexDataTypedINS1_5Debug11ExtendedVboEEEEE(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

uint64_t ggl::VertexDataTyped<ggl::Debug::ExtendedVbo>::~VertexDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  return a1;
}

void ggl::VertexDataTyped<ggl::Debug::ExtendedVbo>::~VertexDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void `non-virtual thunk to'ggl::VertexDataTyped<ggl::Debug::ExtendedVbo>::~VertexDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)(a1 - 200) = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 - 72));
  v2 = *(_QWORD *)(a1 - 128);
  if (v2)
  {
    *(_QWORD *)(a1 - 120) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 - 104) + 40))(*(_QWORD *)(a1 - 104), v2, *(_QWORD *)(a1 - 112) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 - 168);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

{
  uint64_t v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  *(_QWORD *)(a1 - 200) = &off_1E42B5748;
  v2 = a1 - 200;
  std::mutex::~mutex((std::mutex *)(a1 - 72));
  v3 = *(_QWORD *)(v2 + 72);
  if (v3)
  {
    *(_QWORD *)(a1 - 120) = v3;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 - 104) + 40))(*(_QWORD *)(a1 - 104), v3, *(_QWORD *)(a1 - 112) - v3);
  }
  v4 = *(std::__shared_weak_count **)(a1 - 168);
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::Debug::ExtendedVbo>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E0368;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::Debug::ExtendedVbo>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E0368;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::Debug::ExtendedVbo>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::swap[abi:nn180100]<md::mun::CollectionPoint>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  __int128 v4;
  _BYTE *v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  _BYTE *v17;
  __int128 v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  _BYTE *v29;
  char *v30;
  char *v31;
  unint64_t v32;
  unint64_t v33;
  __int128 *v34;
  uint64_t *v35;
  unint64_t v36;
  __int128 v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t *v40;
  _QWORD *v41;
  uint64_t v42;
  char v43;
  uint64_t v44;
  __int128 v45;
  uint64_t v46;
  _BYTE v47[20];
  __int128 v48;
  __int128 v49;
  _BYTE *v50;
  _BYTE *v51;
  _BYTE *v52;
  uint64_t v53;
  _BYTE v54[280];
  _BYTE v55[16];
  uint64_t v56;
  _QWORD v57[2];

  v44 = *a1;
  v45 = *(_OWORD *)(a1 + 1);
  v3 = a1[4];
  v46 = a1[3];
  *(_QWORD *)v47 = v3;
  *(_DWORD *)&v47[8] = *((_DWORD *)a1 + 10);
  *(_QWORD *)&v47[12] = *(uint64_t *)((char *)a1 + 44);
  v4 = *(_OWORD *)(a1 + 9);
  v48 = *(_OWORD *)(a1 + 7);
  v49 = v4;
  v5 = v54;
  v50 = v54;
  v6 = a1[14];
  v7 = a1[11];
  v52 = v54;
  v53 = v6;
  if (v7 != a1[13])
  {
    v8 = (_BYTE *)a1[12];
    v50 = (_BYTE *)v7;
    v51 = v8;
    *(_OWORD *)(a1 + 11) = 0u;
    *(_OWORD *)(a1 + 13) = 0u;
    goto LABEL_3;
  }
  v14 = a1[12];
  v51 = &v54[v14 - v7];
  if (v14 != v7)
  {
    v15 = 0;
    v16 = &v56;
    v17 = v55;
    do
    {
      v18 = *(_OWORD *)v7;
      *((_QWORD *)v5 + 2) = *(_QWORD *)(v7 + 16);
      *(_OWORD *)v5 = v18;
      v19 = *(_QWORD *)(v7 + 24);
      *((_DWORD *)v5 + 8) = *(_DWORD *)(v7 + 32);
      *((_QWORD *)v5 + 3) = v19;
      *(_QWORD *)(v5 + 36) = *(_QWORD *)(v7 + 36);
      v20 = *(_OWORD *)(v7 + 44);
      v21 = *(_OWORD *)(v7 + 60);
      v22 = *(_OWORD *)(v7 + 76);
      *(_OWORD *)(v5 + 92) = *(_OWORD *)(v7 + 92);
      *(_OWORD *)(v5 + 76) = v22;
      *(_OWORD *)(v5 + 60) = v21;
      *(_OWORD *)(v5 + 44) = v20;
      v23 = *(_OWORD *)(v7 + 108);
      v24 = *(_OWORD *)(v7 + 124);
      v25 = *(_OWORD *)(v7 + 140);
      *(_OWORD *)(v5 + 156) = *(_OWORD *)(v7 + 156);
      *(_OWORD *)(v5 + 140) = v25;
      *(_OWORD *)(v5 + 124) = v24;
      *(_OWORD *)(v5 + 108) = v23;
      v26 = *(_OWORD *)(v7 + 172);
      v27 = *(_OWORD *)(v7 + 188);
      v28 = *(_OWORD *)(v7 + 204);
      *(_OWORD *)(v5 + 220) = *(_OWORD *)(v7 + 220);
      *(_OWORD *)(v5 + 204) = v28;
      *(_OWORD *)(v5 + 188) = v27;
      *(_OWORD *)(v5 + 172) = v26;
      v29 = v5 + 280;
      *((_QWORD *)v5 + 31) = v5 + 280;
      v30 = *(char **)(v7 + 248);
      *((_DWORD *)v5 + 59) = *(_DWORD *)(v7 + 236);
      v5[240] = *(_BYTE *)(v7 + 240);
      *((_QWORD *)v5 + 32) = v5 + 280;
      *((_QWORD *)v5 + 33) = v5 + 280;
      *((_QWORD *)v5 + 34) = *(_QWORD *)(v7 + 272);
      if (v30 == *(char **)(v7 + 264))
      {
        *((_QWORD *)v5 + 32) = &v29[*(_QWORD *)(v7 + 256) - (_QWORD)v30];
        v31 = *(char **)(v7 + 256);
        if (v30 != v31)
        {
          v32 = v31 - v30;
          if ((unint64_t)(v31 - v30) >= 8 && (unint64_t)(&v55[288 * v15] - v30) >= 0x20)
          {
            if (v32 < 0x20)
            {
              v33 = 0;
              goto LABEL_30;
            }
            v33 = v32 & 0xFFFFFFFFFFFFFFE0;
            v34 = (__int128 *)(v30 + 16);
            v35 = v16;
            v36 = v32 & 0xFFFFFFFFFFFFFFE0;
            do
            {
              v37 = *v34;
              *((_OWORD *)v35 - 1) = *(v34 - 1);
              *(_OWORD *)v35 = v37;
              v34 += 2;
              v35 += 4;
              v36 -= 32;
            }
            while (v36);
            if (v32 == v33)
              goto LABEL_19;
            if ((v32 & 0x18) != 0)
            {
LABEL_30:
              v38 = v32 & 0xFFFFFFFFFFFFFFF8;
              v29 += v32 & 0xFFFFFFFFFFFFFFF8;
              v39 = v33 - (v32 & 0xFFFFFFFFFFFFFFF8);
              v40 = (uint64_t *)&v30[v33];
              v41 = &v17[v33];
              do
              {
                v42 = *v40++;
                *v41++ = v42;
                v39 += 8;
              }
              while (v39);
              if (v32 == v38)
                goto LABEL_19;
              v30 += v38;
            }
            else
            {
              v30 += v33;
              v29 += v33;
            }
          }
          do
          {
            v43 = *v30++;
            *v29++ = v43;
          }
          while (v30 != v31);
        }
      }
      else
      {
        *((_QWORD *)v5 + 31) = v30;
        *((_QWORD *)v5 + 32) = *(_QWORD *)(v7 + 256);
        *(_OWORD *)(v7 + 248) = 0uLL;
        *(_OWORD *)(v7 + 264) = 0uLL;
      }
LABEL_19:
      v5 += 288;
      v7 += 288;
      ++v15;
      v16 += 36;
      v17 += 288;
    }
    while (v7 != v14);
  }
LABEL_3:
  v9 = a1 + 231;
  *(_QWORD *)((char *)v57 + 5) = *(uint64_t *)((char *)a1 + 1853);
  v57[0] = a1[231];
  *a1 = *a2;
  *((_DWORD *)a1 + 8) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a1 + 9) = *((_DWORD *)a2 + 9);
  *((_DWORD *)a1 + 10) = *((_DWORD *)a2 + 10);
  *((_DWORD *)a1 + 11) = *((_DWORD *)a2 + 11);
  a1[1] = a2[1];
  a1[2] = a2[2];
  a1[3] = a2[3];
  *((_DWORD *)a1 + 12) = *((_DWORD *)a2 + 12);
  a1[7] = a2[7];
  a1[8] = a2[8];
  a1[9] = a2[9];
  a1[10] = a2[10];
  if (a1 != a2)
    geo::small_vector_base<md::mun::PhotoInfo>::move((uint64_t)(a1 + 11), a2 + 11, (uint64_t)(a1 + 15));
  v10 = a2[231];
  *(_QWORD *)((char *)v9 + 5) = *(uint64_t *)((char *)a2 + 1853);
  *v9 = v10;
  *a2 = v44;
  *((_OWORD *)a2 + 2) = *(_OWORD *)v47;
  *(_OWORD *)(a2 + 1) = v45;
  a2[3] = v46;
  *((_DWORD *)a2 + 12) = *(_DWORD *)&v47[16];
  *(_OWORD *)(a2 + 7) = v48;
  *(_OWORD *)(a2 + 9) = v49;
  if (&v44 != a2)
    geo::small_vector_base<md::mun::PhotoInfo>::move((uint64_t)(a2 + 11), (uint64_t *)&v50, (uint64_t)(a2 + 15));
  a2[231] = v57[0];
  *(uint64_t *)((char *)a2 + 1853) = *(_QWORD *)((char *)v57 + 5);
  v11 = v50;
  v12 = v51;
  if (v50 != v51)
  {
    do
    {
      v13 = (void *)v11[31];
      if (v13 != (void *)v11[33])
        free(v13);
      v11 += 36;
    }
    while (v11 != v12);
    v11 = v50;
  }
  if (v11 != (_QWORD *)v52)
    free(v11);
}

void std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,md::mun::MuninOverlayRenderLayer::debugLayout(md::LayoutContext const&)::$_0 &,md::mun::CollectionPoint *>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t *v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t *v10;

  v7 = a1;
  v8 = a2[10];
  v9 = a3[10];
  if (v8 >= a1[10])
  {
    if (v9 < v8)
    {
      std::swap[abi:nn180100]<md::mun::CollectionPoint>(a2, a3);
      if (a2[10] < (unint64_t)v7[10])
      {
        a1 = v7;
        v10 = a2;
        goto LABEL_9;
      }
    }
  }
  else
  {
    if (v9 < v8)
    {
LABEL_5:
      v10 = a3;
LABEL_9:
      std::swap[abi:nn180100]<md::mun::CollectionPoint>(a1, v10);
      goto LABEL_10;
    }
    std::swap[abi:nn180100]<md::mun::CollectionPoint>(a1, a2);
    if (a3[10] < (unint64_t)a2[10])
    {
      a1 = a2;
      goto LABEL_5;
    }
  }
LABEL_10:
  if (a4[10] < (unint64_t)a3[10])
  {
    std::swap[abi:nn180100]<md::mun::CollectionPoint>(a3, a4);
    if (a3[10] < (unint64_t)a2[10])
    {
      std::swap[abi:nn180100]<md::mun::CollectionPoint>(a2, a3);
      if (a2[10] < (unint64_t)v7[10])
        std::swap[abi:nn180100]<md::mun::CollectionPoint>(v7, a2);
    }
  }
}

void std::__insertion_sort[abi:nn180100]<std::_ClassicAlgPolicy,md::mun::MuninOverlayRenderLayer::debugLayout(md::LayoutContext const&)::$_0 &,md::mun::CollectionPoint *>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t *v6;
  uint64_t v7;
  _QWORD *v8;
  _OWORD *v9;
  uint64_t *v10;
  uint64_t *v11;
  __int128 v12;
  uint64_t v13;
  __int128 *v14;
  _BYTE *v15;
  uint64_t v16;
  _QWORD *v17;
  _OWORD *v18;
  uint64_t *v19;
  uint64_t *v20;
  _QWORD *v21;
  _QWORD *v22;
  void *v23;
  _QWORD *v24;
  __int128 *v25;
  _QWORD *v26;
  uint64_t v27;
  __int128 *v28;
  uint64_t v29;
  _QWORD *v30;
  _OWORD *v31;
  __int128 v32;
  uint64_t v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  _BYTE *v43;
  char *v44;
  char *v45;
  unint64_t v46;
  unint64_t v47;
  __int128 *v48;
  _OWORD *v49;
  unint64_t v50;
  __int128 v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t *v54;
  _QWORD *v55;
  uint64_t v56;
  char v57;
  uint64_t v58;
  _QWORD *v59;
  _QWORD *v60;
  void *v61;
  __int128 *v62;
  uint64_t v63;
  _BYTE *v64;
  uint64_t *v65;
  _BYTE *v66;
  __int128 v67;
  uint64_t v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  _BYTE *v78;
  char *v79;
  char *v80;
  unint64_t v81;
  unint64_t v82;
  __int128 *v83;
  uint64_t *v84;
  unint64_t v85;
  __int128 v86;
  unint64_t v87;
  unint64_t v88;
  uint64_t *v89;
  _QWORD *v90;
  uint64_t v91;
  char v92;
  _QWORD *v94;
  uint64_t *v95;
  uint64_t v96;
  _QWORD *v97;
  uint64_t v98;
  __int128 v99;
  uint64_t v100;
  uint64_t v101;
  int v102;
  uint64_t v103;
  __int128 v104;
  __int128 v105;
  void *v106;
  _BYTE *v107;
  _BYTE *v108;
  uint64_t v109;
  _BYTE v110[280];
  _BYTE v111[16];
  uint64_t v112;
  _QWORD v113[15];

  if (a1 != a2)
  {
    v113[13] = v2;
    v113[14] = v3;
    v4 = a2;
    v6 = a1 + 233;
    if (a1 + 233 != a2)
    {
      v7 = 0;
      v8 = a1 + 283;
      v9 = a1 + 285;
      v94 = a1 + 283;
      v10 = a1;
      while (1)
      {
        v11 = v6;
        if (v10[243] < (unint64_t)v10[10])
          break;
LABEL_5:
        v6 = v11 + 233;
        ++v7;
        v9 = (_OWORD *)((char *)v9 + 1864);
        v8 += 233;
        v10 = v11;
        if (v11 + 233 == v4)
          return;
      }
      v98 = *v6;
      v99 = *((_OWORD *)v10 + 117);
      v100 = v10[236];
      v101 = v10[237];
      v102 = *((_DWORD *)v10 + 476);
      v103 = *(uint64_t *)((char *)v10 + 1908);
      v12 = *((_OWORD *)v10 + 121);
      v104 = *((_OWORD *)v10 + 120);
      v105 = v12;
      v106 = v110;
      v13 = v10[247];
      v108 = v110;
      v109 = v13;
      v14 = (__int128 *)v10[244];
      if (v14 != (__int128 *)v10[246])
      {
        v15 = (_BYTE *)v10[245];
        v106 = (void *)v10[244];
        v107 = v15;
        *((_OWORD *)v10 + 122) = 0u;
        *((_OWORD *)v10 + 123) = 0u;
        goto LABEL_9;
      }
      v62 = (__int128 *)v10[245];
      v107 = &v110[(char *)v62 - (char *)v14];
      if (v62 == v14)
      {
LABEL_9:
        v16 = 0;
        v96 = v7;
        v97 = &v94[233 * v7];
        v113[0] = v10[464];
        *(_QWORD *)((char *)v113 + 5) = *(uint64_t *)((char *)v10 + 3717);
        v17 = v8;
        v18 = v9;
        v95 = v11;
        v19 = v11;
        while (1)
        {
          v20 = v10;
          *v19 = *v10;
          *((_DWORD *)v19 + 8) = *((_DWORD *)v10 + 8);
          *((_DWORD *)v19 + 9) = *((_DWORD *)v10 + 9);
          *((_DWORD *)v19 + 10) = *((_DWORD *)v10 + 10);
          *((_DWORD *)v19 + 11) = *((_DWORD *)v10 + 11);
          v19[1] = v10[1];
          v19[2] = v10[2];
          v19[3] = v10[3];
          *((_DWORD *)v19 + 12) = *((_DWORD *)v10 + 12);
          v19[7] = v10[7];
          v19[8] = v10[8];
          v19[9] = v10[9];
          v19[10] = v10[10];
          v21 = (_QWORD *)v19[11];
          v22 = (_QWORD *)v19[12];
          if (v21 != v22)
          {
            do
            {
              v23 = (void *)v21[31];
              if (v23 != (void *)v21[33])
                free(v23);
              v21 += 36;
            }
            while (v21 != v22);
            v21 = (_QWORD *)v19[11];
          }
          if (v21 != (_QWORD *)v19[13])
            free(v21);
          v24 = v19 + 15;
          v19[13] = (uint64_t)(v19 + 15);
          v25 = (__int128 *)v20[11];
          if (v25 != (__int128 *)v20[13])
          {
            v19[11] = (uint64_t)v25;
            v19[12] = v20[12];
            *(_OWORD *)(v20 + 11) = 0u;
            *(_OWORD *)(v20 + 13) = 0u;
            goto LABEL_20;
          }
          v19[11] = (uint64_t)v24;
          v28 = (__int128 *)v20[12];
          v19[12] = (uint64_t)v24 + (char *)v28 - (char *)v25;
          if (v28 != v25)
            break;
LABEL_20:
          v19[14] = v20[14];
          v26 = v20 + 231;
          v19[231] = v20[231];
          *(uint64_t *)((char *)v19 + 1853) = *(uint64_t *)((char *)v20 + 1853);
          v27 = *((_QWORD *)&v105 + 1);
          if (v20 == a1)
          {
            v20 = a1;
LABEL_45:
            *v20 = v98;
            v20[4] = v101;
            *((_DWORD *)v20 + 10) = v102;
            *((_DWORD *)v20 + 11) = v103;
            *(_OWORD *)(v20 + 1) = v99;
            v20[3] = v100;
            *((_DWORD *)v20 + 12) = HIDWORD(v103);
            *(_OWORD *)(v20 + 7) = v104;
            v20[9] = v105;
            v20[10] = v27;
            if (v20 != &v98)
              geo::small_vector_base<md::mun::PhotoInfo>::move((uint64_t)(v20 + 11), (uint64_t *)&v106, (uint64_t)(v20 + 15));
            v58 = v113[0];
            *(_QWORD *)((char *)v26 + 5) = *(_QWORD *)((char *)v113 + 5);
            *v26 = v58;
            v60 = v106;
            v59 = v107;
            v7 = v96;
            if (v106 == v107)
            {
              v4 = a2;
            }
            else
            {
              do
              {
                v61 = (void *)v60[31];
                if (v61 != (void *)v60[33])
                  free(v61);
                v60 += 36;
              }
              while (v60 != v59);
              v60 = v106;
              v4 = a2;
            }
            if (v60 != (_QWORD *)v108)
              free(v60);
            v11 = v95;
            goto LABEL_5;
          }
          v10 = v20 - 233;
          ++v16;
          v18 = (_OWORD *)((char *)v18 - 1864);
          v17 -= 233;
          v19 = v20;
          if (*((_QWORD *)&v105 + 1) >= (unint64_t)*(v20 - 223))
            goto LABEL_45;
        }
        v29 = 0;
        v30 = v17;
        v31 = v18;
        while (1)
        {
          v32 = *v25;
          v24[2] = *((_QWORD *)v25 + 2);
          *(_OWORD *)v24 = v32;
          v33 = *((_QWORD *)v25 + 3);
          *((_DWORD *)v24 + 8) = *((_DWORD *)v25 + 8);
          v24[3] = v33;
          *(_QWORD *)((char *)v24 + 36) = *(_QWORD *)((char *)v25 + 36);
          v34 = *(__int128 *)((char *)v25 + 44);
          v35 = *(__int128 *)((char *)v25 + 60);
          v36 = *(__int128 *)((char *)v25 + 76);
          *(_OWORD *)((char *)v24 + 92) = *(__int128 *)((char *)v25 + 92);
          *(_OWORD *)((char *)v24 + 76) = v36;
          *(_OWORD *)((char *)v24 + 60) = v35;
          *(_OWORD *)((char *)v24 + 44) = v34;
          v37 = *(__int128 *)((char *)v25 + 108);
          v38 = *(__int128 *)((char *)v25 + 124);
          v39 = *(__int128 *)((char *)v25 + 140);
          *(_OWORD *)((char *)v24 + 156) = *(__int128 *)((char *)v25 + 156);
          *(_OWORD *)((char *)v24 + 140) = v39;
          *(_OWORD *)((char *)v24 + 124) = v38;
          *(_OWORD *)((char *)v24 + 108) = v37;
          v40 = *(__int128 *)((char *)v25 + 172);
          v41 = *(__int128 *)((char *)v25 + 188);
          v42 = *(__int128 *)((char *)v25 + 204);
          *(_OWORD *)((char *)v24 + 220) = *(__int128 *)((char *)v25 + 220);
          *(_OWORD *)((char *)v24 + 204) = v42;
          *(_OWORD *)((char *)v24 + 188) = v41;
          *(_OWORD *)((char *)v24 + 172) = v40;
          v43 = v24 + 35;
          v24[31] = v24 + 35;
          v44 = (char *)*((_QWORD *)v25 + 31);
          *((_DWORD *)v24 + 59) = *((_DWORD *)v25 + 59);
          *((_BYTE *)v24 + 240) = *((_BYTE *)v25 + 240);
          v24[32] = v24 + 35;
          v24[33] = v24 + 35;
          v24[34] = *((_QWORD *)v25 + 34);
          if (v44 == *((char **)v25 + 33))
          {
            v24[32] = &v43[*((_QWORD *)v25 + 32) - (_QWORD)v44];
            v45 = (char *)*((_QWORD *)v25 + 32);
            if (v44 != v45)
            {
              v46 = v45 - v44;
              if ((unint64_t)(v45 - v44) >= 8
                && (unint64_t)((char *)&v97[36 * v29 + -233 * v16] - v44) >= 0x20)
              {
                if (v46 < 0x20)
                {
                  v47 = 0;
                  goto LABEL_37;
                }
                v47 = v46 & 0xFFFFFFFFFFFFFFE0;
                v48 = (__int128 *)(v44 + 16);
                v49 = v31;
                v50 = v46 & 0xFFFFFFFFFFFFFFE0;
                do
                {
                  v51 = *v48;
                  *(v49 - 1) = *(v48 - 1);
                  *v49 = v51;
                  v48 += 2;
                  v49 += 2;
                  v50 -= 32;
                }
                while (v50);
                if (v46 == v47)
                  goto LABEL_26;
                if ((v46 & 0x18) != 0)
                {
LABEL_37:
                  v52 = v46 & 0xFFFFFFFFFFFFFFF8;
                  v43 += v46 & 0xFFFFFFFFFFFFFFF8;
                  v53 = v47 - (v46 & 0xFFFFFFFFFFFFFFF8);
                  v54 = (uint64_t *)&v44[v47];
                  v55 = (_QWORD *)((char *)v30 + v47);
                  do
                  {
                    v56 = *v54++;
                    *v55++ = v56;
                    v53 += 8;
                  }
                  while (v53);
                  if (v46 == v52)
                    goto LABEL_26;
                  v44 += v52;
                }
                else
                {
                  v44 += v47;
                  v43 += v47;
                }
              }
              do
              {
                v57 = *v44++;
                *v43++ = v57;
              }
              while (v44 != v45);
            }
          }
          else
          {
            v24[31] = v44;
            v24[32] = *((_QWORD *)v25 + 32);
            *(__int128 *)((char *)v25 + 248) = 0u;
            *(__int128 *)((char *)v25 + 264) = 0u;
          }
LABEL_26:
          v24 += 36;
          v25 += 18;
          ++v29;
          v31 += 18;
          v30 += 36;
          if (v25 == v28)
            goto LABEL_20;
        }
      }
      v63 = 0;
      v64 = v111;
      v65 = &v112;
      v66 = v110;
      while (1)
      {
        v67 = *v14;
        *((_QWORD *)v66 + 2) = *((_QWORD *)v14 + 2);
        *(_OWORD *)v66 = v67;
        v68 = *((_QWORD *)v14 + 3);
        *((_DWORD *)v66 + 8) = *((_DWORD *)v14 + 8);
        *((_QWORD *)v66 + 3) = v68;
        *(_QWORD *)(v66 + 36) = *(_QWORD *)((char *)v14 + 36);
        v69 = *(__int128 *)((char *)v14 + 44);
        v70 = *(__int128 *)((char *)v14 + 60);
        v71 = *(__int128 *)((char *)v14 + 76);
        *(_OWORD *)(v66 + 92) = *(__int128 *)((char *)v14 + 92);
        *(_OWORD *)(v66 + 76) = v71;
        *(_OWORD *)(v66 + 60) = v70;
        *(_OWORD *)(v66 + 44) = v69;
        v72 = *(__int128 *)((char *)v14 + 108);
        v73 = *(__int128 *)((char *)v14 + 124);
        v74 = *(__int128 *)((char *)v14 + 140);
        *(_OWORD *)(v66 + 156) = *(__int128 *)((char *)v14 + 156);
        *(_OWORD *)(v66 + 140) = v74;
        *(_OWORD *)(v66 + 124) = v73;
        *(_OWORD *)(v66 + 108) = v72;
        v75 = *(__int128 *)((char *)v14 + 172);
        v76 = *(__int128 *)((char *)v14 + 188);
        v77 = *(__int128 *)((char *)v14 + 204);
        *(_OWORD *)(v66 + 220) = *(__int128 *)((char *)v14 + 220);
        *(_OWORD *)(v66 + 204) = v77;
        *(_OWORD *)(v66 + 188) = v76;
        *(_OWORD *)(v66 + 172) = v75;
        v78 = v66 + 280;
        *((_QWORD *)v66 + 31) = v66 + 280;
        v79 = (char *)*((_QWORD *)v14 + 31);
        *((_DWORD *)v66 + 59) = *((_DWORD *)v14 + 59);
        v66[240] = *((_BYTE *)v14 + 240);
        *((_QWORD *)v66 + 32) = v66 + 280;
        *((_QWORD *)v66 + 33) = v66 + 280;
        *((_QWORD *)v66 + 34) = *((_QWORD *)v14 + 34);
        if (v79 == *((char **)v14 + 33))
        {
          *((_QWORD *)v66 + 32) = &v78[*((_QWORD *)v14 + 32) - (_QWORD)v79];
          v80 = (char *)*((_QWORD *)v14 + 32);
          if (v79 != v80)
          {
            v81 = v80 - v79;
            if ((unint64_t)(v80 - v79) >= 8 && (unint64_t)(&v111[288 * v63] - v79) >= 0x20)
            {
              if (v81 < 0x20)
              {
                v82 = 0;
                goto LABEL_67;
              }
              v82 = v81 & 0xFFFFFFFFFFFFFFE0;
              v83 = (__int128 *)(v79 + 16);
              v84 = v65;
              v85 = v81 & 0xFFFFFFFFFFFFFFE0;
              do
              {
                v86 = *v83;
                *((_OWORD *)v84 - 1) = *(v83 - 1);
                *(_OWORD *)v84 = v86;
                v83 += 2;
                v84 += 4;
                v85 -= 32;
              }
              while (v85);
              if (v81 == v82)
                goto LABEL_56;
              if ((v81 & 0x18) != 0)
              {
LABEL_67:
                v87 = v81 & 0xFFFFFFFFFFFFFFF8;
                v78 += v81 & 0xFFFFFFFFFFFFFFF8;
                v88 = v82 - (v81 & 0xFFFFFFFFFFFFFFF8);
                v89 = (uint64_t *)&v79[v82];
                v90 = &v64[v82];
                do
                {
                  v91 = *v89++;
                  *v90++ = v91;
                  v88 += 8;
                }
                while (v88);
                if (v81 == v87)
                  goto LABEL_56;
                v79 += v87;
              }
              else
              {
                v79 += v82;
                v78 += v82;
              }
            }
            do
            {
              v92 = *v79++;
              *v78++ = v92;
            }
            while (v79 != v80);
          }
        }
        else
        {
          *((_QWORD *)v66 + 31) = v79;
          *((_QWORD *)v66 + 32) = *((_QWORD *)v14 + 32);
          *(__int128 *)((char *)v14 + 248) = 0u;
          *(__int128 *)((char *)v14 + 264) = 0u;
        }
LABEL_56:
        v66 += 288;
        v14 += 18;
        ++v63;
        v65 += 36;
        v64 += 288;
        if (v14 == v62)
          goto LABEL_9;
      }
    }
  }
}

uint64_t *std::__insertion_sort_unguarded[abi:nn180100]<std::_ClassicAlgPolicy,md::mun::MuninOverlayRenderLayer::debugLayout(md::LayoutContext const&)::$_0 &,md::mun::CollectionPoint *>(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  _OWORD *v8;
  _QWORD *v9;
  __int128 v10;
  uint64_t v11;
  __int128 *v12;
  _BYTE *v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  _OWORD *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t *v20;
  _QWORD *v21;
  _QWORD *v22;
  void *v23;
  _QWORD *v24;
  __int128 *v25;
  __int128 *v26;
  uint64_t v27;
  _QWORD *v28;
  _OWORD *v29;
  __int128 v30;
  uint64_t v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  _BYTE *v41;
  char *v42;
  char *v43;
  unint64_t v44;
  unint64_t v45;
  __int128 *v46;
  _OWORD *v47;
  unint64_t v48;
  __int128 v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t *v52;
  _QWORD *v53;
  uint64_t v54;
  char v55;
  uint64_t v56;
  _QWORD *v57;
  _QWORD *v58;
  void *v59;
  __int128 *v60;
  uint64_t v61;
  _BYTE *v62;
  uint64_t *v63;
  _BYTE *v64;
  __int128 v65;
  uint64_t v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  _BYTE *v76;
  char *v77;
  char *v78;
  unint64_t v79;
  unint64_t v80;
  __int128 *v81;
  uint64_t *v82;
  unint64_t v83;
  __int128 v84;
  unint64_t v85;
  unint64_t v86;
  uint64_t *v87;
  _QWORD *v88;
  uint64_t v89;
  char v90;
  _QWORD *v92;
  _OWORD *v93;
  uint64_t v94;
  _QWORD *v95;
  uint64_t v96;
  __int128 v97;
  uint64_t v98;
  uint64_t v99;
  int v100;
  uint64_t v101;
  __int128 v102;
  __int128 v103;
  void *v104;
  _BYTE *v105;
  _BYTE *v106;
  uint64_t v107;
  _BYTE v108[280];
  _BYTE v109[16];
  uint64_t v110;
  _QWORD v111[15];

  if (result != a2)
  {
    v111[13] = v2;
    v111[14] = v3;
    v4 = a2;
    v5 = result + 233;
    if (result + 233 != a2)
    {
      v6 = 0;
      v7 = result + 283;
      v8 = result + 285;
      v92 = result + 283;
      while (1)
      {
        v9 = v5;
        if (result[243] >= (unint64_t)result[10])
          goto LABEL_5;
        v96 = *v5;
        v97 = *((_OWORD *)result + 117);
        v98 = result[236];
        v99 = result[237];
        v100 = *((_DWORD *)result + 476);
        v101 = *(uint64_t *)((char *)result + 1908);
        v10 = *((_OWORD *)result + 121);
        v102 = *((_OWORD *)result + 120);
        v103 = v10;
        v104 = v108;
        v11 = result[247];
        v106 = v108;
        v107 = v11;
        v12 = (__int128 *)result[244];
        if (v12 != (__int128 *)result[246])
        {
          v13 = (_BYTE *)result[245];
          v104 = (void *)result[244];
          v105 = v13;
          *((_OWORD *)result + 122) = 0u;
          *((_OWORD *)result + 123) = 0u;
          goto LABEL_9;
        }
        v60 = (__int128 *)result[245];
        v105 = &v108[(char *)v60 - (char *)v12];
        if (v60 != v12)
          break;
LABEL_9:
        v14 = 0;
        v93 = v8;
        v94 = v6;
        v15 = &v92[233 * v6];
        v111[0] = result[464];
        *(_QWORD *)((char *)v111 + 5) = *(uint64_t *)((char *)result + 3717);
        v16 = v7;
        v17 = v8;
        v95 = v9;
        v18 = v9;
        do
        {
          v20 = v18;
          v18 = result;
          *v20 = *result;
          *((_DWORD *)v20 + 8) = *((_DWORD *)result + 8);
          *((_DWORD *)v20 + 9) = *((_DWORD *)result + 9);
          *((_DWORD *)v20 + 10) = *((_DWORD *)result + 10);
          *((_DWORD *)v20 + 11) = *((_DWORD *)result + 11);
          v20[1] = result[1];
          v20[2] = result[2];
          v20[3] = result[3];
          *((_DWORD *)v20 + 12) = *((_DWORD *)result + 12);
          v20[7] = result[7];
          v20[8] = result[8];
          v20[9] = result[9];
          v20[10] = result[10];
          v22 = (_QWORD *)v20[11];
          v21 = (_QWORD *)v20[12];
          if (v22 != v21)
          {
            do
            {
              v23 = (void *)v22[31];
              if (v23 != (void *)v22[33])
                free(v23);
              v22 += 36;
            }
            while (v22 != v21);
            v22 = (_QWORD *)v20[11];
          }
          if (v22 != (_QWORD *)v20[13])
            free(v22);
          v24 = v20 + 15;
          v20[13] = (uint64_t)(v20 + 15);
          v25 = (__int128 *)v18[11];
          if (v25 == (__int128 *)v18[13])
          {
            v20[11] = (uint64_t)v24;
            v26 = (__int128 *)v18[12];
            v20[12] = (uint64_t)v24 + (char *)v26 - (char *)v25;
            if (v26 != v25)
            {
              v27 = 0;
              v28 = v16;
              v29 = v17;
              do
              {
                v30 = *v25;
                v24[2] = *((_QWORD *)v25 + 2);
                *(_OWORD *)v24 = v30;
                v31 = *((_QWORD *)v25 + 3);
                *((_DWORD *)v24 + 8) = *((_DWORD *)v25 + 8);
                v24[3] = v31;
                *(_QWORD *)((char *)v24 + 36) = *(_QWORD *)((char *)v25 + 36);
                v32 = *(__int128 *)((char *)v25 + 44);
                v33 = *(__int128 *)((char *)v25 + 60);
                v34 = *(__int128 *)((char *)v25 + 76);
                *(_OWORD *)((char *)v24 + 92) = *(__int128 *)((char *)v25 + 92);
                *(_OWORD *)((char *)v24 + 76) = v34;
                *(_OWORD *)((char *)v24 + 60) = v33;
                *(_OWORD *)((char *)v24 + 44) = v32;
                v35 = *(__int128 *)((char *)v25 + 108);
                v36 = *(__int128 *)((char *)v25 + 124);
                v37 = *(__int128 *)((char *)v25 + 140);
                *(_OWORD *)((char *)v24 + 156) = *(__int128 *)((char *)v25 + 156);
                *(_OWORD *)((char *)v24 + 140) = v37;
                *(_OWORD *)((char *)v24 + 124) = v36;
                *(_OWORD *)((char *)v24 + 108) = v35;
                v38 = *(__int128 *)((char *)v25 + 172);
                v39 = *(__int128 *)((char *)v25 + 188);
                v40 = *(__int128 *)((char *)v25 + 204);
                *(_OWORD *)((char *)v24 + 220) = *(__int128 *)((char *)v25 + 220);
                *(_OWORD *)((char *)v24 + 204) = v40;
                *(_OWORD *)((char *)v24 + 188) = v39;
                *(_OWORD *)((char *)v24 + 172) = v38;
                v41 = v24 + 35;
                v24[31] = v24 + 35;
                v42 = (char *)*((_QWORD *)v25 + 31);
                *((_DWORD *)v24 + 59) = *((_DWORD *)v25 + 59);
                *((_BYTE *)v24 + 240) = *((_BYTE *)v25 + 240);
                v24[32] = v24 + 35;
                v24[33] = v24 + 35;
                v24[34] = *((_QWORD *)v25 + 34);
                if (v42 == *((char **)v25 + 33))
                {
                  v24[32] = &v41[*((_QWORD *)v25 + 32) - (_QWORD)v42];
                  v43 = (char *)*((_QWORD *)v25 + 32);
                  if (v42 != v43)
                  {
                    v44 = v43 - v42;
                    if ((unint64_t)(v43 - v42) >= 8
                      && (unint64_t)((char *)&v15[36 * v27 + -233 * v14] - v42) >= 0x20)
                    {
                      if (v44 < 0x20)
                      {
                        v45 = 0;
                        goto LABEL_35;
                      }
                      v45 = v44 & 0xFFFFFFFFFFFFFFE0;
                      v46 = (__int128 *)(v42 + 16);
                      v47 = v29;
                      v48 = v44 & 0xFFFFFFFFFFFFFFE0;
                      do
                      {
                        v49 = *v46;
                        *(v47 - 1) = *(v46 - 1);
                        *v47 = v49;
                        v46 += 2;
                        v47 += 2;
                        v48 -= 32;
                      }
                      while (v48);
                      if (v44 == v45)
                        goto LABEL_24;
                      if ((v44 & 0x18) != 0)
                      {
LABEL_35:
                        v50 = v44 & 0xFFFFFFFFFFFFFFF8;
                        v41 += v44 & 0xFFFFFFFFFFFFFFF8;
                        v51 = v45 - (v44 & 0xFFFFFFFFFFFFFFF8);
                        v52 = (uint64_t *)&v42[v45];
                        v53 = (_QWORD *)((char *)v28 + v45);
                        do
                        {
                          v54 = *v52++;
                          *v53++ = v54;
                          v51 += 8;
                        }
                        while (v51);
                        if (v44 == v50)
                          goto LABEL_24;
                        v42 += v50;
                      }
                      else
                      {
                        v42 += v45;
                        v41 += v45;
                      }
                    }
                    do
                    {
                      v55 = *v42++;
                      *v41++ = v55;
                    }
                    while (v42 != v43);
                  }
                }
                else
                {
                  v24[31] = v42;
                  v24[32] = *((_QWORD *)v25 + 32);
                  *(__int128 *)((char *)v25 + 248) = 0u;
                  *(__int128 *)((char *)v25 + 264) = 0u;
                }
LABEL_24:
                v24 += 36;
                v25 += 18;
                ++v27;
                v29 += 18;
                v28 += 36;
              }
              while (v25 != v26);
            }
          }
          else
          {
            v20[11] = (uint64_t)v25;
            v20[12] = v18[12];
            *(_OWORD *)(v18 + 11) = 0u;
            *(_OWORD *)(v18 + 13) = 0u;
          }
          v20[14] = v18[14];
          v20[231] = v18[231];
          *(uint64_t *)((char *)v20 + 1853) = *(uint64_t *)((char *)v18 + 1853);
          result = v18 - 233;
          v19 = *((_QWORD *)&v103 + 1);
          ++v14;
          v17 = (_OWORD *)((char *)v17 - 1864);
          v16 -= 233;
        }
        while (*((_QWORD *)&v103 + 1) < (unint64_t)*(v18 - 223));
        *v18 = v96;
        v18[4] = v99;
        *((_DWORD *)v18 + 10) = v100;
        *((_DWORD *)v18 + 11) = v101;
        *(_OWORD *)(v18 + 1) = v97;
        v18[3] = v98;
        *((_DWORD *)v18 + 12) = HIDWORD(v101);
        *(_OWORD *)(v18 + 7) = v102;
        v18[9] = v103;
        v18[10] = v19;
        if (v18 != &v96)
          geo::small_vector_base<md::mun::PhotoInfo>::move((uint64_t)(v18 + 11), (uint64_t *)&v104, (uint64_t)(v18 + 15));
        v56 = v111[0];
        *(uint64_t *)((char *)v18 + 1853) = *(_QWORD *)((char *)v111 + 5);
        v18[231] = v56;
        v58 = v104;
        v57 = v105;
        if (v104 == v105)
        {
          v4 = a2;
          v8 = v93;
          v6 = v94;
        }
        else
        {
          v8 = v93;
          v6 = v94;
          do
          {
            v59 = (void *)v58[31];
            if (v59 != (void *)v58[33])
              free(v59);
            v58 += 36;
          }
          while (v58 != v57);
          v58 = v104;
          v4 = a2;
        }
        if (v58 != (_QWORD *)v106)
          free(v58);
        v9 = v95;
LABEL_5:
        v5 = v9 + 233;
        ++v6;
        v8 = (_OWORD *)((char *)v8 + 1864);
        v7 += 233;
        result = v9;
        if (v9 + 233 == v4)
          return result;
      }
      v61 = 0;
      v62 = v109;
      v63 = &v110;
      v64 = v108;
      while (1)
      {
        v65 = *v12;
        *((_QWORD *)v64 + 2) = *((_QWORD *)v12 + 2);
        *(_OWORD *)v64 = v65;
        v66 = *((_QWORD *)v12 + 3);
        *((_DWORD *)v64 + 8) = *((_DWORD *)v12 + 8);
        *((_QWORD *)v64 + 3) = v66;
        *(_QWORD *)(v64 + 36) = *(_QWORD *)((char *)v12 + 36);
        v67 = *(__int128 *)((char *)v12 + 44);
        v68 = *(__int128 *)((char *)v12 + 60);
        v69 = *(__int128 *)((char *)v12 + 76);
        *(_OWORD *)(v64 + 92) = *(__int128 *)((char *)v12 + 92);
        *(_OWORD *)(v64 + 76) = v69;
        *(_OWORD *)(v64 + 60) = v68;
        *(_OWORD *)(v64 + 44) = v67;
        v70 = *(__int128 *)((char *)v12 + 108);
        v71 = *(__int128 *)((char *)v12 + 124);
        v72 = *(__int128 *)((char *)v12 + 140);
        *(_OWORD *)(v64 + 156) = *(__int128 *)((char *)v12 + 156);
        *(_OWORD *)(v64 + 140) = v72;
        *(_OWORD *)(v64 + 124) = v71;
        *(_OWORD *)(v64 + 108) = v70;
        v73 = *(__int128 *)((char *)v12 + 172);
        v74 = *(__int128 *)((char *)v12 + 188);
        v75 = *(__int128 *)((char *)v12 + 204);
        *(_OWORD *)(v64 + 220) = *(__int128 *)((char *)v12 + 220);
        *(_OWORD *)(v64 + 204) = v75;
        *(_OWORD *)(v64 + 188) = v74;
        *(_OWORD *)(v64 + 172) = v73;
        v76 = v64 + 280;
        *((_QWORD *)v64 + 31) = v64 + 280;
        v77 = (char *)*((_QWORD *)v12 + 31);
        *((_DWORD *)v64 + 59) = *((_DWORD *)v12 + 59);
        v64[240] = *((_BYTE *)v12 + 240);
        *((_QWORD *)v64 + 32) = v64 + 280;
        *((_QWORD *)v64 + 33) = v64 + 280;
        *((_QWORD *)v64 + 34) = *((_QWORD *)v12 + 34);
        if (v77 == *((char **)v12 + 33))
        {
          *((_QWORD *)v64 + 32) = &v76[*((_QWORD *)v12 + 32) - (_QWORD)v77];
          v78 = (char *)*((_QWORD *)v12 + 32);
          if (v77 != v78)
          {
            v79 = v78 - v77;
            if ((unint64_t)(v78 - v77) >= 8 && (unint64_t)(&v109[288 * v61] - v77) >= 0x20)
            {
              if (v79 < 0x20)
              {
                v80 = 0;
                goto LABEL_64;
              }
              v80 = v79 & 0xFFFFFFFFFFFFFFE0;
              v81 = (__int128 *)(v77 + 16);
              v82 = v63;
              v83 = v79 & 0xFFFFFFFFFFFFFFE0;
              do
              {
                v84 = *v81;
                *((_OWORD *)v82 - 1) = *(v81 - 1);
                *(_OWORD *)v82 = v84;
                v81 += 2;
                v82 += 4;
                v83 -= 32;
              }
              while (v83);
              if (v79 == v80)
                goto LABEL_53;
              if ((v79 & 0x18) != 0)
              {
LABEL_64:
                v85 = v79 & 0xFFFFFFFFFFFFFFF8;
                v76 += v79 & 0xFFFFFFFFFFFFFFF8;
                v86 = v80 - (v79 & 0xFFFFFFFFFFFFFFF8);
                v87 = (uint64_t *)&v77[v80];
                v88 = &v62[v80];
                do
                {
                  v89 = *v87++;
                  *v88++ = v89;
                  v86 += 8;
                }
                while (v86);
                if (v79 == v85)
                  goto LABEL_53;
                v77 += v85;
              }
              else
              {
                v77 += v80;
                v76 += v80;
              }
            }
            do
            {
              v90 = *v77++;
              *v76++ = v90;
            }
            while (v77 != v78);
          }
        }
        else
        {
          *((_QWORD *)v64 + 31) = v77;
          *((_QWORD *)v64 + 32) = *((_QWORD *)v12 + 32);
          *(__int128 *)((char *)v12 + 248) = 0u;
          *(__int128 *)((char *)v12 + 264) = 0u;
        }
LABEL_53:
        v64 += 288;
        v12 += 18;
        ++v61;
        v63 += 36;
        v62 += 288;
        if (v12 == v60)
          goto LABEL_9;
      }
    }
  }
  return result;
}

void std::__partial_sort[abi:nn180100]<std::_ClassicAlgPolicy,md::mun::MuninOverlayRenderLayer::debugLayout(md::LayoutContext const&)::$_0 &,md::mun::CollectionPoint *,md::mun::CollectionPoint *>(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  int64_t v11;
  __int128 v13;
  uint64_t v14;
  __int128 *v15;
  __int128 *v16;
  _BYTE *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  __int128 *v32;
  __int128 *v33;
  uint64_t v34;
  _OWORD *v35;
  uint64_t v36;
  __int128 v37;
  uint64_t v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  _BYTE *v48;
  char *v49;
  char *v50;
  unint64_t v51;
  unint64_t v52;
  __int128 *v53;
  _OWORD *v54;
  unint64_t v55;
  __int128 v56;
  unint64_t v57;
  unint64_t v58;
  uint64_t *v59;
  _QWORD *v60;
  uint64_t v61;
  char v62;
  uint64_t *v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  unint64_t v67;
  __int128 v68;
  uint64_t v69;
  __int128 v70;
  __int128 *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  _QWORD *v76;
  _QWORD *v77;
  void *v78;
  __int128 *v79;
  uint64_t v80;
  _BYTE *v81;
  uint64_t *v82;
  _BYTE *v83;
  __int128 v84;
  uint64_t v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  _BYTE *v95;
  char *v96;
  char *v97;
  unint64_t v98;
  unint64_t v99;
  __int128 *v100;
  uint64_t *v101;
  unint64_t v102;
  __int128 v103;
  unint64_t v104;
  unint64_t v105;
  uint64_t *v106;
  _QWORD *v107;
  uint64_t v108;
  char v109;
  uint64_t v110;
  _QWORD *v111;
  _QWORD *v112;
  void *v113;
  __int128 *v114;
  uint64_t v115;
  _BYTE *v116;
  uint64_t *v117;
  _BYTE *v118;
  __int128 v119;
  uint64_t v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  _BYTE *v130;
  char *v131;
  char *v132;
  unint64_t v133;
  uint64_t v134;
  __int128 *v135;
  uint64_t *v136;
  unint64_t v137;
  __int128 v138;
  unint64_t v139;
  uint64_t v140;
  uint64_t *v141;
  _QWORD *v142;
  uint64_t v143;
  char v144;
  uint64_t *v145;
  uint64_t v146;
  __int128 v147;
  uint64_t v148;
  _BYTE v149[20];
  __int128 v150;
  __int128 v151;
  _BYTE *v152;
  _BYTE *v153;
  _BYTE *v154;
  uint64_t v155;
  _BYTE v156[280];
  _BYTE v157[16];
  uint64_t v158;
  _QWORD v159[2];
  uint64_t v160;
  __int128 v161;
  uint64_t v162;
  _BYTE v163[20];
  __int128 v164;
  __int128 v165;
  void *v166;
  _BYTE *v167;
  _BYTE *v168;
  uint64_t v169;
  _BYTE v170[280];
  _BYTE v171[16];
  uint64_t v172;
  _QWORD v173[3];

  v145 = a2;
  if ((uint64_t *)a1 != a2)
  {
    v5 = (uint64_t)a2 - a1;
    v6 = ((uint64_t)a2 - a1) / 1864;
    if ((uint64_t)a2 - a1 >= 1865)
    {
      v7 = (unint64_t)(v6 - 2) >> 1;
      v8 = v7 + 1;
      v9 = (uint64_t *)(a1 + 1864 * v7);
      do
      {
        std::__sift_down[abi:nn180100]<std::_ClassicAlgPolicy,md::mun::MuninOverlayRenderLayer::debugLayout(md::LayoutContext const&)::$_0 &,md::mun::CollectionPoint *>(a1, v6, v9);
        v9 -= 233;
        --v8;
      }
      while (v8);
    }
    if (v145 != a3)
    {
      v10 = v145;
      do
      {
        if ((unint64_t)v10[10] < *(_QWORD *)(a1 + 80))
        {
          std::swap[abi:nn180100]<md::mun::CollectionPoint>(v10, (uint64_t *)a1);
          std::__sift_down[abi:nn180100]<std::_ClassicAlgPolicy,md::mun::MuninOverlayRenderLayer::debugLayout(md::LayoutContext const&)::$_0 &,md::mun::CollectionPoint *>(a1, v6, (uint64_t *)a1);
        }
        v10 += 233;
      }
      while (v10 != a3);
    }
    if (v5 >= 1865)
    {
      v11 = v5 / 0x748uLL;
      while (1)
      {
        v146 = *(_QWORD *)a1;
        v147 = *(_OWORD *)(a1 + 8);
        v148 = *(_QWORD *)(a1 + 24);
        *(_QWORD *)v149 = *(_QWORD *)(a1 + 32);
        *(_DWORD *)&v149[8] = *(_DWORD *)(a1 + 40);
        *(_QWORD *)&v149[12] = *(_QWORD *)(a1 + 44);
        v13 = *(_OWORD *)(a1 + 72);
        v150 = *(_OWORD *)(a1 + 56);
        v151 = v13;
        v152 = v156;
        v15 = *(__int128 **)(a1 + 104);
        v14 = *(_QWORD *)(a1 + 112);
        v154 = v156;
        v155 = v14;
        v16 = *(__int128 **)(a1 + 88);
        if (v16 == v15)
          break;
        v17 = *(_BYTE **)(a1 + 96);
        v152 = *(_BYTE **)(a1 + 88);
        v153 = v17;
        *(_OWORD *)(a1 + 88) = 0u;
        *(_OWORD *)(a1 + 104) = 0u;
LABEL_15:
        v18 = 0;
        v159[0] = *(_QWORD *)(a1 + 1848);
        *(_QWORD *)((char *)v159 + 5) = *(_QWORD *)(a1 + 1853);
        v19 = a1;
        do
        {
          v22 = v19 + 1864 * v18 + 1864;
          v23 = 2 * v18;
          v18 = (2 * v18) | 1;
          v24 = v23 + 2;
          if (v23 + 2 < v11)
          {
            v25 = *(_QWORD *)(v22 + 80);
            v26 = *(_QWORD *)(v22 + 1944);
            v22 += 1864 * (v25 < v26);
            if (v25 < v26)
              v18 = v24;
          }
          *(_QWORD *)v19 = *(_QWORD *)v22;
          *(_DWORD *)(v19 + 32) = *(_DWORD *)(v22 + 32);
          *(_DWORD *)(v19 + 36) = *(_DWORD *)(v22 + 36);
          *(_DWORD *)(v19 + 40) = *(_DWORD *)(v22 + 40);
          *(_DWORD *)(v19 + 44) = *(_DWORD *)(v22 + 44);
          *(_QWORD *)(v19 + 8) = *(_QWORD *)(v22 + 8);
          *(_QWORD *)(v19 + 16) = *(_QWORD *)(v22 + 16);
          *(_QWORD *)(v19 + 24) = *(_QWORD *)(v22 + 24);
          *(_DWORD *)(v19 + 48) = *(_DWORD *)(v22 + 48);
          *(_QWORD *)(v19 + 56) = *(_QWORD *)(v22 + 56);
          *(_QWORD *)(v19 + 64) = *(_QWORD *)(v22 + 64);
          *(_QWORD *)(v19 + 72) = *(_QWORD *)(v22 + 72);
          *(_QWORD *)(v19 + 80) = *(_QWORD *)(v22 + 80);
          if (v19 != v22)
          {
            v27 = *(_QWORD **)(v19 + 88);
            v28 = *(_QWORD **)(v19 + 96);
            if (v27 != v28)
            {
              do
              {
                v29 = (void *)v27[31];
                if (v29 != (void *)v27[33])
                  free(v29);
                v27 += 36;
              }
              while (v27 != v28);
              v27 = *(_QWORD **)(v19 + 88);
            }
            if (v27 != *(_QWORD **)(v19 + 104))
              free(v27);
            v30 = v19 + 120;
            *(_QWORD *)(v19 + 104) = v19 + 120;
            v31 = *(_QWORD *)(v22 + 88);
            if (v31 == *(_QWORD *)(v22 + 104))
            {
              *(_QWORD *)(v19 + 88) = v30;
              v32 = *(__int128 **)(v22 + 88);
              *(_QWORD *)(v19 + 96) = v30 + *(_QWORD *)(v22 + 96) - (_QWORD)v32;
              v33 = *(__int128 **)(v22 + 96);
              if (v32 != v33)
              {
                v34 = 0;
                v35 = (_OWORD *)(v19 + 416);
                v36 = v19 + 400;
                do
                {
                  v37 = *v32;
                  *(_QWORD *)(v30 + 16) = *((_QWORD *)v32 + 2);
                  *(_OWORD *)v30 = v37;
                  v38 = *((_QWORD *)v32 + 3);
                  *(_DWORD *)(v30 + 32) = *((_DWORD *)v32 + 8);
                  *(_QWORD *)(v30 + 24) = v38;
                  *(_QWORD *)(v30 + 36) = *(_QWORD *)((char *)v32 + 36);
                  v39 = *(__int128 *)((char *)v32 + 44);
                  v40 = *(__int128 *)((char *)v32 + 60);
                  v41 = *(__int128 *)((char *)v32 + 76);
                  *(_OWORD *)(v30 + 92) = *(__int128 *)((char *)v32 + 92);
                  *(_OWORD *)(v30 + 76) = v41;
                  *(_OWORD *)(v30 + 60) = v40;
                  *(_OWORD *)(v30 + 44) = v39;
                  v42 = *(__int128 *)((char *)v32 + 108);
                  v43 = *(__int128 *)((char *)v32 + 124);
                  v44 = *(__int128 *)((char *)v32 + 140);
                  *(_OWORD *)(v30 + 156) = *(__int128 *)((char *)v32 + 156);
                  *(_OWORD *)(v30 + 140) = v44;
                  *(_OWORD *)(v30 + 124) = v43;
                  *(_OWORD *)(v30 + 108) = v42;
                  v45 = *(__int128 *)((char *)v32 + 172);
                  v46 = *(__int128 *)((char *)v32 + 188);
                  v47 = *(__int128 *)((char *)v32 + 204);
                  *(_OWORD *)(v30 + 220) = *(__int128 *)((char *)v32 + 220);
                  *(_OWORD *)(v30 + 204) = v47;
                  *(_OWORD *)(v30 + 188) = v46;
                  *(_OWORD *)(v30 + 172) = v45;
                  v48 = (_BYTE *)(v30 + 280);
                  *(_QWORD *)(v30 + 248) = v30 + 280;
                  v49 = (char *)*((_QWORD *)v32 + 31);
                  *(_DWORD *)(v30 + 236) = *((_DWORD *)v32 + 59);
                  *(_BYTE *)(v30 + 240) = *((_BYTE *)v32 + 240);
                  *(_QWORD *)(v30 + 256) = v30 + 280;
                  *(_QWORD *)(v30 + 264) = v30 + 280;
                  *(_QWORD *)(v30 + 272) = *((_QWORD *)v32 + 34);
                  if (v49 == *((char **)v32 + 33))
                  {
                    *(_QWORD *)(v30 + 256) = &v48[*((_QWORD *)v32 + 32) - (_QWORD)v49];
                    v50 = (char *)*((_QWORD *)v32 + 32);
                    if (v49 != v50)
                    {
                      v51 = v50 - v49;
                      if ((unint64_t)(v50 - v49) >= 8
                        && (unint64_t)(v19 + 400 + 288 * v34 - (_QWORD)v49) >= 0x20)
                      {
                        if (v51 < 0x20)
                        {
                          v52 = 0;
                          goto LABEL_46;
                        }
                        v52 = v51 & 0xFFFFFFFFFFFFFFE0;
                        v53 = (__int128 *)(v49 + 16);
                        v54 = v35;
                        v55 = v51 & 0xFFFFFFFFFFFFFFE0;
                        do
                        {
                          v56 = *v53;
                          *(v54 - 1) = *(v53 - 1);
                          *v54 = v56;
                          v53 += 2;
                          v54 += 2;
                          v55 -= 32;
                        }
                        while (v55);
                        if (v51 == v52)
                          goto LABEL_35;
                        if ((v51 & 0x18) != 0)
                        {
LABEL_46:
                          v57 = v51 & 0xFFFFFFFFFFFFFFF8;
                          v48 += v51 & 0xFFFFFFFFFFFFFFF8;
                          v58 = v52 - (v51 & 0xFFFFFFFFFFFFFFF8);
                          v59 = (uint64_t *)&v49[v52];
                          v60 = (_QWORD *)(v36 + v52);
                          do
                          {
                            v61 = *v59++;
                            *v60++ = v61;
                            v58 += 8;
                          }
                          while (v58);
                          if (v51 == v57)
                            goto LABEL_35;
                          v49 += v57;
                        }
                        else
                        {
                          v49 += v52;
                          v48 += v52;
                        }
                      }
                      do
                      {
                        v62 = *v49++;
                        *v48++ = v62;
                      }
                      while (v49 != v50);
                    }
                  }
                  else
                  {
                    *(_QWORD *)(v30 + 248) = v49;
                    *(_QWORD *)(v30 + 256) = *((_QWORD *)v32 + 32);
                    *(__int128 *)((char *)v32 + 248) = 0u;
                    *(__int128 *)((char *)v32 + 264) = 0u;
                  }
LABEL_35:
                  v30 += 288;
                  v32 += 18;
                  ++v34;
                  v35 += 18;
                  v36 += 288;
                }
                while (v32 != v33);
              }
            }
            else
            {
              *(_QWORD *)(v19 + 88) = v31;
              *(_QWORD *)(v19 + 96) = *(_QWORD *)(v22 + 96);
              *(_OWORD *)(v22 + 88) = 0u;
              *(_OWORD *)(v22 + 104) = 0u;
            }
            *(_QWORD *)(v19 + 112) = *(_QWORD *)(v22 + 112);
          }
          v20 = (uint64_t *)(v22 + 1848);
          v21 = *(_QWORD *)(v22 + 1848);
          *(_QWORD *)(v19 + 1853) = *(_QWORD *)(v22 + 1853);
          *(_QWORD *)(v19 + 1848) = v21;
          v19 = v22;
        }
        while (v18 <= (uint64_t)((unint64_t)(v11 - 2) >> 1));
        v63 = v145 - 233;
        if ((uint64_t *)v22 == v145 - 233)
        {
          *(_QWORD *)v22 = v146;
          *(_OWORD *)(v22 + 32) = *(_OWORD *)v149;
          *(_OWORD *)(v22 + 8) = v147;
          *(_QWORD *)(v22 + 24) = v148;
          *(_DWORD *)(v22 + 48) = *(_DWORD *)&v149[16];
          *(_OWORD *)(v22 + 56) = v150;
          *(_OWORD *)(v22 + 72) = v151;
          if ((uint64_t *)v22 != &v146)
            geo::small_vector_base<md::mun::PhotoInfo>::move(v22 + 88, (uint64_t *)&v152, v22 + 120);
          v110 = v159[0];
          *(_QWORD *)(v22 + 1853) = *(_QWORD *)((char *)v159 + 5);
          *v20 = v110;
          goto LABEL_99;
        }
        *(_QWORD *)v22 = *v63;
        *(_DWORD *)(v22 + 32) = *((_DWORD *)v145 - 458);
        *(_DWORD *)(v22 + 36) = *((_DWORD *)v145 - 457);
        *(_DWORD *)(v22 + 40) = *((_DWORD *)v145 - 456);
        *(_DWORD *)(v22 + 44) = *((_DWORD *)v145 - 455);
        *(_QWORD *)(v22 + 8) = *(v145 - 232);
        *(_QWORD *)(v22 + 16) = *(v145 - 231);
        *(_QWORD *)(v22 + 24) = *(v145 - 230);
        *(_DWORD *)(v22 + 48) = *((_DWORD *)v145 - 454);
        *(_QWORD *)(v22 + 56) = *(v145 - 226);
        *(_QWORD *)(v22 + 64) = *(v145 - 225);
        *(_QWORD *)(v22 + 72) = *(v145 - 224);
        *(_QWORD *)(v22 + 80) = *(v145 - 223);
        geo::small_vector_base<md::mun::PhotoInfo>::move(v22 + 88, v145 - 222, v22 + 120);
        v64 = *(v145 - 2);
        *(_QWORD *)(v22 + 1853) = *(uint64_t *)((char *)v145 - 11);
        *v20 = v64;
        *v63 = v146;
        *(_OWORD *)(v145 - 229) = *(_OWORD *)v149;
        *((_OWORD *)v145 - 116) = v147;
        *(v145 - 230) = v148;
        *((_DWORD *)v145 - 454) = *(_DWORD *)&v149[16];
        *((_OWORD *)v145 - 113) = v150;
        *((_OWORD *)v145 - 112) = v151;
        if (v63 != &v146)
          geo::small_vector_base<md::mun::PhotoInfo>::move((uint64_t)(v145 - 222), (uint64_t *)&v152, (uint64_t)(v145 - 218));
        *(v145 - 2) = v159[0];
        *(uint64_t *)((char *)v145 - 11) = *(_QWORD *)((char *)v159 + 5);
        v65 = v22 - a1 + 1864;
        if (v65 >= 1865)
        {
          v66 = (v65 / 0x748uLL - 2) >> 1;
          v67 = a1 + 1864 * v66;
          if (*(_QWORD *)(v67 + 80) < *(_QWORD *)(v22 + 80))
          {
            v160 = *(_QWORD *)v22;
            v68 = *(_OWORD *)(v22 + 8);
            v162 = *(_QWORD *)(v22 + 24);
            v161 = v68;
            v69 = *(_QWORD *)(v22 + 32);
            *(_DWORD *)&v163[8] = *(_DWORD *)(v22 + 40);
            *(_QWORD *)v163 = v69;
            *(_QWORD *)&v163[12] = *(_QWORD *)(v22 + 44);
            v70 = *(_OWORD *)(v22 + 72);
            v164 = *(_OWORD *)(v22 + 56);
            v165 = v70;
            v166 = v170;
            v168 = v170;
            v169 = *(_QWORD *)(v22 + 112);
            v71 = *(__int128 **)(v22 + 88);
            if (v71 != *(__int128 **)(v22 + 104))
            {
              v166 = *(void **)(v22 + 88);
              v167 = *(_BYTE **)(v22 + 96);
              *(_OWORD *)(v22 + 88) = 0u;
              *(_OWORD *)(v22 + 104) = 0u;
              goto LABEL_60;
            }
            v114 = *(__int128 **)(v22 + 96);
            v167 = &v170[(char *)v114 - (char *)v71];
            if (v114 == v71)
            {
LABEL_60:
              v72 = *v20;
              *(_QWORD *)((char *)v173 + 5) = *(_QWORD *)(v22 + 1853);
              v173[0] = v72;
              do
              {
                v73 = v67;
                *(_QWORD *)v22 = *(_QWORD *)v67;
                *(_DWORD *)(v22 + 32) = *(_DWORD *)(v67 + 32);
                *(_DWORD *)(v22 + 36) = *(_DWORD *)(v67 + 36);
                *(_DWORD *)(v22 + 40) = *(_DWORD *)(v67 + 40);
                *(_DWORD *)(v22 + 44) = *(_DWORD *)(v67 + 44);
                *(_QWORD *)(v22 + 8) = *(_QWORD *)(v67 + 8);
                *(_QWORD *)(v22 + 16) = *(_QWORD *)(v67 + 16);
                *(_QWORD *)(v22 + 24) = *(_QWORD *)(v67 + 24);
                *(_DWORD *)(v22 + 48) = *(_DWORD *)(v67 + 48);
                *(_QWORD *)(v22 + 56) = *(_QWORD *)(v67 + 56);
                *(_QWORD *)(v22 + 64) = *(_QWORD *)(v67 + 64);
                *(_QWORD *)(v22 + 72) = *(_QWORD *)(v67 + 72);
                *(_QWORD *)(v22 + 80) = *(_QWORD *)(v67 + 80);
                if (v22 != v67)
                  geo::small_vector_base<md::mun::PhotoInfo>::move(v22 + 88, (uint64_t *)(v67 + 88), v22 + 120);
                v74 = *(_QWORD *)(v73 + 1848);
                *(_QWORD *)(v22 + 1853) = *(_QWORD *)(v73 + 1853);
                *(_QWORD *)(v22 + 1848) = v74;
                v75 = *((_QWORD *)&v165 + 1);
                if (!v66)
                  break;
                v66 = (v66 - 1) >> 1;
                v67 = a1 + 1864 * v66;
                v22 = v73;
              }
              while (*(_QWORD *)(v67 + 80) < *((_QWORD *)&v165 + 1));
              *(_QWORD *)v73 = v160;
              *(_OWORD *)(v73 + 32) = *(_OWORD *)v163;
              *(_OWORD *)(v73 + 8) = v161;
              *(_QWORD *)(v73 + 24) = v162;
              *(_DWORD *)(v73 + 48) = *(_DWORD *)&v163[16];
              *(_OWORD *)(v73 + 56) = v164;
              *(_QWORD *)(v73 + 72) = v165;
              *(_QWORD *)(v73 + 80) = v75;
              if ((uint64_t *)v73 != &v160)
                geo::small_vector_base<md::mun::PhotoInfo>::move(v73 + 88, (uint64_t *)&v166, v73 + 120);
              *(_QWORD *)(v73 + 1848) = v173[0];
              *(_QWORD *)(v73 + 1853) = *(_QWORD *)((char *)v173 + 5);
              v76 = v166;
              v77 = v167;
              if (v166 != v167)
              {
                do
                {
                  v78 = (void *)v76[31];
                  if (v78 != (void *)v76[33])
                    free(v78);
                  v76 += 36;
                }
                while (v76 != v77);
                v76 = v166;
              }
              if (v76 != (_QWORD *)v168)
                free(v76);
              goto LABEL_99;
            }
            v115 = 0;
            v116 = v171;
            v117 = &v172;
            v118 = v170;
            while (2)
            {
              v119 = *v71;
              *((_QWORD *)v118 + 2) = *((_QWORD *)v71 + 2);
              *(_OWORD *)v118 = v119;
              v120 = *((_QWORD *)v71 + 3);
              *((_DWORD *)v118 + 8) = *((_DWORD *)v71 + 8);
              *((_QWORD *)v118 + 3) = v120;
              *(_QWORD *)(v118 + 36) = *(_QWORD *)((char *)v71 + 36);
              v121 = *(__int128 *)((char *)v71 + 44);
              v122 = *(__int128 *)((char *)v71 + 60);
              v123 = *(__int128 *)((char *)v71 + 76);
              *(_OWORD *)(v118 + 92) = *(__int128 *)((char *)v71 + 92);
              *(_OWORD *)(v118 + 76) = v123;
              *(_OWORD *)(v118 + 60) = v122;
              *(_OWORD *)(v118 + 44) = v121;
              v124 = *(__int128 *)((char *)v71 + 108);
              v125 = *(__int128 *)((char *)v71 + 124);
              v126 = *(__int128 *)((char *)v71 + 140);
              *(_OWORD *)(v118 + 156) = *(__int128 *)((char *)v71 + 156);
              *(_OWORD *)(v118 + 140) = v126;
              *(_OWORD *)(v118 + 124) = v125;
              *(_OWORD *)(v118 + 108) = v124;
              v127 = *(__int128 *)((char *)v71 + 172);
              v128 = *(__int128 *)((char *)v71 + 188);
              v129 = *(__int128 *)((char *)v71 + 204);
              *(_OWORD *)(v118 + 220) = *(__int128 *)((char *)v71 + 220);
              *(_OWORD *)(v118 + 204) = v129;
              *(_OWORD *)(v118 + 188) = v128;
              *(_OWORD *)(v118 + 172) = v127;
              v130 = v118 + 280;
              *((_QWORD *)v118 + 31) = v118 + 280;
              v131 = (char *)*((_QWORD *)v71 + 31);
              *((_DWORD *)v118 + 59) = *((_DWORD *)v71 + 59);
              v118[240] = *((_BYTE *)v71 + 240);
              *((_QWORD *)v118 + 32) = v118 + 280;
              *((_QWORD *)v118 + 33) = v118 + 280;
              *((_QWORD *)v118 + 34) = *((_QWORD *)v71 + 34);
              if (v131 != *((char **)v71 + 33))
              {
                *((_QWORD *)v118 + 31) = v131;
                *((_QWORD *)v118 + 32) = *((_QWORD *)v71 + 32);
                *(__int128 *)((char *)v71 + 248) = 0u;
                *(__int128 *)((char *)v71 + 264) = 0u;
                goto LABEL_110;
              }
              *((_QWORD *)v118 + 32) = &v130[*((_QWORD *)v71 + 32) - (_QWORD)v131];
              v132 = (char *)*((_QWORD *)v71 + 32);
              if (v131 != v132)
              {
                v133 = v132 - v131;
                if ((unint64_t)(v132 - v131) >= 8 && (unint64_t)(&v171[288 * v115] - v131) >= 0x20)
                {
                  if (v133 < 0x20)
                  {
                    v134 = 0;
LABEL_121:
                    v139 = v133 & 0xFFFFFFFFFFFFFFF8;
                    v130 += v133 & 0xFFFFFFFFFFFFFFF8;
                    v140 = v134 - (v133 & 0xFFFFFFFFFFFFFFF8);
                    v141 = (uint64_t *)&v131[v134];
                    v142 = &v116[v134];
                    do
                    {
                      v143 = *v141++;
                      *v142++ = v143;
                      v140 += 8;
                    }
                    while (v140);
                    if (v133 != v139)
                    {
                      v131 += v139;
                      goto LABEL_126;
                    }
                    goto LABEL_110;
                  }
                  v134 = v133 & 0xFFFFFFFFFFFFFFE0;
                  v135 = (__int128 *)(v131 + 16);
                  v136 = v117;
                  v137 = v133 & 0xFFFFFFFFFFFFFFE0;
                  do
                  {
                    v138 = *v135;
                    *((_OWORD *)v136 - 1) = *(v135 - 1);
                    *(_OWORD *)v136 = v138;
                    v135 += 2;
                    v136 += 4;
                    v137 -= 32;
                  }
                  while (v137);
                  if (v133 == v134)
                    goto LABEL_110;
                  if ((v133 & 0x18) != 0)
                    goto LABEL_121;
                  v131 += v134;
                  v130 += v134;
                }
                do
                {
LABEL_126:
                  v144 = *v131++;
                  *v130++ = v144;
                }
                while (v131 != v132);
              }
LABEL_110:
              v118 += 288;
              v71 += 18;
              ++v115;
              v117 += 36;
              v116 += 288;
              if (v71 == v114)
                goto LABEL_60;
              continue;
            }
          }
        }
LABEL_99:
        v111 = v152;
        v112 = v153;
        if (v152 != v153)
        {
          do
          {
            v113 = (void *)v111[31];
            if (v113 != (void *)v111[33])
              free(v113);
            v111 += 36;
          }
          while (v111 != v112);
          v111 = v152;
        }
        if (v111 != (_QWORD *)v154)
          free(v111);
        v145 -= 233;
        if (v11-- <= 2)
          return;
      }
      v79 = *(__int128 **)(a1 + 96);
      v153 = &v156[(char *)v79 - (char *)v16];
      if (v79 == v16)
        goto LABEL_15;
      v80 = 0;
      v81 = v157;
      v82 = &v158;
      v83 = v156;
      while (1)
      {
        v84 = *v16;
        *((_QWORD *)v83 + 2) = *((_QWORD *)v16 + 2);
        *(_OWORD *)v83 = v84;
        v85 = *((_QWORD *)v16 + 3);
        *((_DWORD *)v83 + 8) = *((_DWORD *)v16 + 8);
        *((_QWORD *)v83 + 3) = v85;
        *(_QWORD *)(v83 + 36) = *(_QWORD *)((char *)v16 + 36);
        v86 = *(__int128 *)((char *)v16 + 44);
        v87 = *(__int128 *)((char *)v16 + 60);
        v88 = *(__int128 *)((char *)v16 + 76);
        *(_OWORD *)(v83 + 92) = *(__int128 *)((char *)v16 + 92);
        *(_OWORD *)(v83 + 76) = v88;
        *(_OWORD *)(v83 + 60) = v87;
        *(_OWORD *)(v83 + 44) = v86;
        v89 = *(__int128 *)((char *)v16 + 108);
        v90 = *(__int128 *)((char *)v16 + 124);
        v91 = *(__int128 *)((char *)v16 + 140);
        *(_OWORD *)(v83 + 156) = *(__int128 *)((char *)v16 + 156);
        *(_OWORD *)(v83 + 140) = v91;
        *(_OWORD *)(v83 + 124) = v90;
        *(_OWORD *)(v83 + 108) = v89;
        v92 = *(__int128 *)((char *)v16 + 172);
        v93 = *(__int128 *)((char *)v16 + 188);
        v94 = *(__int128 *)((char *)v16 + 204);
        *(_OWORD *)(v83 + 220) = *(__int128 *)((char *)v16 + 220);
        *(_OWORD *)(v83 + 204) = v94;
        *(_OWORD *)(v83 + 188) = v93;
        *(_OWORD *)(v83 + 172) = v92;
        v95 = v83 + 280;
        *((_QWORD *)v83 + 31) = v83 + 280;
        v96 = (char *)*((_QWORD *)v16 + 31);
        *((_DWORD *)v83 + 59) = *((_DWORD *)v16 + 59);
        v83[240] = *((_BYTE *)v16 + 240);
        *((_QWORD *)v83 + 32) = v83 + 280;
        *((_QWORD *)v83 + 33) = v83 + 280;
        *((_QWORD *)v83 + 34) = *((_QWORD *)v16 + 34);
        if (v96 == *((char **)v16 + 33))
        {
          *((_QWORD *)v83 + 32) = &v95[*((_QWORD *)v16 + 32) - (_QWORD)v96];
          v97 = (char *)*((_QWORD *)v16 + 32);
          if (v96 != v97)
          {
            v98 = v97 - v96;
            if ((unint64_t)(v97 - v96) >= 8 && (unint64_t)(&v157[288 * v80] - v96) >= 0x20)
            {
              if (v98 < 0x20)
              {
                v99 = 0;
                goto LABEL_86;
              }
              v99 = v98 & 0xFFFFFFFFFFFFFFE0;
              v100 = (__int128 *)(v96 + 16);
              v101 = v82;
              v102 = v98 & 0xFFFFFFFFFFFFFFE0;
              do
              {
                v103 = *v100;
                *((_OWORD *)v101 - 1) = *(v100 - 1);
                *(_OWORD *)v101 = v103;
                v100 += 2;
                v101 += 4;
                v102 -= 32;
              }
              while (v102);
              if (v98 == v99)
                goto LABEL_75;
              if ((v98 & 0x18) != 0)
              {
LABEL_86:
                v104 = v98 & 0xFFFFFFFFFFFFFFF8;
                v95 += v98 & 0xFFFFFFFFFFFFFFF8;
                v105 = v99 - (v98 & 0xFFFFFFFFFFFFFFF8);
                v106 = (uint64_t *)&v96[v99];
                v107 = &v81[v99];
                do
                {
                  v108 = *v106++;
                  *v107++ = v108;
                  v105 += 8;
                }
                while (v105);
                if (v98 == v104)
                  goto LABEL_75;
                v96 += v104;
              }
              else
              {
                v96 += v99;
                v95 += v99;
              }
            }
            do
            {
              v109 = *v96++;
              *v95++ = v109;
            }
            while (v96 != v97);
          }
        }
        else
        {
          *((_QWORD *)v83 + 31) = v96;
          *((_QWORD *)v83 + 32) = *((_QWORD *)v16 + 32);
          *(__int128 *)((char *)v16 + 248) = 0u;
          *(__int128 *)((char *)v16 + 264) = 0u;
        }
LABEL_75:
        v83 += 288;
        v16 += 18;
        ++v80;
        v82 += 36;
        v81 += 288;
        if (v16 == v79)
          goto LABEL_15;
      }
    }
  }
}

uint64_t *std::__partition_with_equals_on_left[abi:nn180100]<std::_ClassicAlgPolicy,md::mun::CollectionPoint *,md::mun::MuninOverlayRenderLayer::debugLayout(md::LayoutContext const&)::$_0 &>(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  __int128 v4;
  _BYTE *v5;
  uint64_t v6;
  uint64_t v7;
  _OWORD *v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  unint64_t v13;
  uint64_t *v14;
  unint64_t v15;
  uint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  void *v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  _BYTE *v30;
  __int128 v31;
  uint64_t v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  _BYTE *v42;
  char *v43;
  char *v44;
  unint64_t v45;
  unint64_t v46;
  __int128 *v47;
  uint64_t *v48;
  unint64_t v49;
  __int128 v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t *v53;
  _QWORD *v54;
  uint64_t v55;
  char v56;
  uint64_t v57;
  __int128 v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  uint64_t v62;
  __int128 v63;
  __int128 v64;
  _BYTE *v65;
  _BYTE *v66;
  _BYTE *v67;
  uint64_t v68;
  _BYTE v69[280];
  _BYTE v70[16];
  uint64_t v71;
  _QWORD v72[2];

  v57 = *(_QWORD *)a1;
  v58 = *(_OWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 32);
  v59 = *(_QWORD *)(a1 + 24);
  v60 = v3;
  v61 = *(_DWORD *)(a1 + 40);
  v62 = *(_QWORD *)(a1 + 44);
  v4 = *(_OWORD *)(a1 + 72);
  v63 = *(_OWORD *)(a1 + 56);
  v64 = v4;
  v5 = v69;
  v65 = v69;
  v6 = *(_QWORD *)(a1 + 112);
  v8 = (_OWORD *)(a1 + 88);
  v7 = *(_QWORD *)(a1 + 88);
  v67 = v69;
  v68 = v6;
  if (v7 != *(_QWORD *)(a1 + 104))
  {
    v9 = *(_BYTE **)(a1 + 96);
    v65 = (_BYTE *)v7;
    v66 = v9;
    *v8 = 0u;
    *(_OWORD *)(a1 + 104) = 0u;
    goto LABEL_3;
  }
  v27 = *(_QWORD *)(a1 + 96);
  v66 = &v69[v27 - v7];
  if (v27 != v7)
  {
    v28 = 0;
    v29 = &v71;
    v30 = v70;
    do
    {
      v31 = *(_OWORD *)v7;
      *((_QWORD *)v5 + 2) = *(_QWORD *)(v7 + 16);
      *(_OWORD *)v5 = v31;
      v32 = *(_QWORD *)(v7 + 24);
      *((_DWORD *)v5 + 8) = *(_DWORD *)(v7 + 32);
      *((_QWORD *)v5 + 3) = v32;
      *(_QWORD *)(v5 + 36) = *(_QWORD *)(v7 + 36);
      v33 = *(_OWORD *)(v7 + 44);
      v34 = *(_OWORD *)(v7 + 60);
      v35 = *(_OWORD *)(v7 + 76);
      *(_OWORD *)(v5 + 92) = *(_OWORD *)(v7 + 92);
      *(_OWORD *)(v5 + 76) = v35;
      *(_OWORD *)(v5 + 60) = v34;
      *(_OWORD *)(v5 + 44) = v33;
      v36 = *(_OWORD *)(v7 + 108);
      v37 = *(_OWORD *)(v7 + 124);
      v38 = *(_OWORD *)(v7 + 140);
      *(_OWORD *)(v5 + 156) = *(_OWORD *)(v7 + 156);
      *(_OWORD *)(v5 + 140) = v38;
      *(_OWORD *)(v5 + 124) = v37;
      *(_OWORD *)(v5 + 108) = v36;
      v39 = *(_OWORD *)(v7 + 172);
      v40 = *(_OWORD *)(v7 + 188);
      v41 = *(_OWORD *)(v7 + 204);
      *(_OWORD *)(v5 + 220) = *(_OWORD *)(v7 + 220);
      *(_OWORD *)(v5 + 204) = v41;
      *(_OWORD *)(v5 + 188) = v40;
      *(_OWORD *)(v5 + 172) = v39;
      v42 = v5 + 280;
      *((_QWORD *)v5 + 31) = v5 + 280;
      v43 = *(char **)(v7 + 248);
      *((_DWORD *)v5 + 59) = *(_DWORD *)(v7 + 236);
      v5[240] = *(_BYTE *)(v7 + 240);
      *((_QWORD *)v5 + 32) = v5 + 280;
      *((_QWORD *)v5 + 33) = v5 + 280;
      *((_QWORD *)v5 + 34) = *(_QWORD *)(v7 + 272);
      if (v43 == *(char **)(v7 + 264))
      {
        *((_QWORD *)v5 + 32) = &v42[*(_QWORD *)(v7 + 256) - (_QWORD)v43];
        v44 = *(char **)(v7 + 256);
        if (v43 != v44)
        {
          v45 = v44 - v43;
          if ((unint64_t)(v44 - v43) >= 8 && (unint64_t)(&v70[288 * v28] - v43) >= 0x20)
          {
            if (v45 < 0x20)
            {
              v46 = 0;
              goto LABEL_45;
            }
            v46 = v45 & 0xFFFFFFFFFFFFFFE0;
            v47 = (__int128 *)(v43 + 16);
            v48 = v29;
            v49 = v45 & 0xFFFFFFFFFFFFFFE0;
            do
            {
              v50 = *v47;
              *((_OWORD *)v48 - 1) = *(v47 - 1);
              *(_OWORD *)v48 = v50;
              v47 += 2;
              v48 += 4;
              v49 -= 32;
            }
            while (v49);
            if (v45 == v46)
              goto LABEL_34;
            if ((v45 & 0x18) != 0)
            {
LABEL_45:
              v51 = v45 & 0xFFFFFFFFFFFFFFF8;
              v42 += v45 & 0xFFFFFFFFFFFFFFF8;
              v52 = v46 - (v45 & 0xFFFFFFFFFFFFFFF8);
              v53 = (uint64_t *)&v43[v46];
              v54 = &v30[v46];
              do
              {
                v55 = *v53++;
                *v54++ = v55;
                v52 += 8;
              }
              while (v52);
              if (v45 == v51)
                goto LABEL_34;
              v43 += v51;
            }
            else
            {
              v43 += v46;
              v42 += v46;
            }
          }
          do
          {
            v56 = *v43++;
            *v42++ = v56;
          }
          while (v43 != v44);
        }
      }
      else
      {
        *((_QWORD *)v5 + 31) = v43;
        *((_QWORD *)v5 + 32) = *(_QWORD *)(v7 + 256);
        *(_OWORD *)(v7 + 248) = 0uLL;
        *(_OWORD *)(v7 + 264) = 0uLL;
      }
LABEL_34:
      v5 += 288;
      v7 += 288;
      ++v28;
      v29 += 36;
      v30 += 288;
    }
    while (v7 != v27);
  }
LABEL_3:
  *(_QWORD *)((char *)v72 + 5) = *(_QWORD *)(a1 + 1853);
  v72[0] = *(_QWORD *)(a1 + 1848);
  v10 = *((_QWORD *)&v64 + 1);
  if (*((_QWORD *)&v64 + 1) >= (unint64_t)*(a2 - 223))
  {
    v14 = (uint64_t *)(a1 + 1864);
    do
    {
      v12 = v14;
      if (v14 >= a2)
        break;
      v15 = v14[10];
      v14 += 233;
    }
    while (*((_QWORD *)&v64 + 1) >= v15);
  }
  else
  {
    v11 = a1;
    do
    {
      v12 = (uint64_t *)(v11 + 1864);
      v13 = *(_QWORD *)(v11 + 1944);
      v11 += 1864;
    }
    while (*((_QWORD *)&v64 + 1) >= v13);
  }
  if (v12 >= a2)
  {
    v16 = a2;
  }
  else
  {
    do
    {
      v16 = a2 - 233;
      v17 = *(a2 - 223);
      a2 -= 233;
    }
    while (*((_QWORD *)&v64 + 1) < v17);
  }
  while (v12 < v16)
  {
    std::swap[abi:nn180100]<md::mun::CollectionPoint>(v12, v16);
    v10 = *((_QWORD *)&v64 + 1);
    do
    {
      v18 = v12[243];
      v12 += 233;
    }
    while (*((_QWORD *)&v64 + 1) >= v18);
    do
    {
      v19 = v16 - 223;
      v16 -= 233;
    }
    while (*((_QWORD *)&v64 + 1) < (unint64_t)*v19);
  }
  v20 = v12 - 233;
  if (v12 - 233 != (uint64_t *)a1)
  {
    *(_QWORD *)a1 = *v20;
    *(_DWORD *)(a1 + 32) = *((_DWORD *)v12 - 458);
    *(_DWORD *)(a1 + 36) = *((_DWORD *)v12 - 457);
    *(_DWORD *)(a1 + 40) = *((_DWORD *)v12 - 456);
    *(_DWORD *)(a1 + 44) = *((_DWORD *)v12 - 455);
    *(_QWORD *)(a1 + 8) = *(v12 - 232);
    *(_QWORD *)(a1 + 16) = *(v12 - 231);
    *(_QWORD *)(a1 + 24) = *(v12 - 230);
    *(_DWORD *)(a1 + 48) = *((_DWORD *)v12 - 454);
    *(_QWORD *)(a1 + 56) = *(v12 - 226);
    *(_QWORD *)(a1 + 64) = *(v12 - 225);
    *(_QWORD *)(a1 + 72) = *(v12 - 224);
    *(_QWORD *)(a1 + 80) = *(v12 - 223);
    geo::small_vector_base<md::mun::PhotoInfo>::move((uint64_t)v8, v12 - 222, a1 + 120);
    v21 = *(v12 - 2);
    *(_QWORD *)(a1 + 1853) = *(uint64_t *)((char *)v12 - 11);
    *(_QWORD *)(a1 + 1848) = v21;
    v10 = *((_QWORD *)&v64 + 1);
  }
  *v20 = v57;
  *(v12 - 229) = v60;
  *((_DWORD *)v12 - 456) = v61;
  *((_DWORD *)v12 - 455) = v62;
  *((_OWORD *)v12 - 116) = v58;
  *(v12 - 230) = v59;
  *((_DWORD *)v12 - 454) = HIDWORD(v62);
  *((_OWORD *)v12 - 113) = v63;
  *(v12 - 224) = v64;
  *(v12 - 223) = v10;
  if (v20 != &v57)
    geo::small_vector_base<md::mun::PhotoInfo>::move((uint64_t)(v12 - 222), (uint64_t *)&v65, (uint64_t)(v12 - 218));
  v22 = v72[0];
  *(uint64_t *)((char *)v12 - 11) = *(_QWORD *)((char *)v72 + 5);
  *(v12 - 2) = v22;
  v23 = v65;
  v24 = v66;
  if (v65 != v66)
  {
    do
    {
      v25 = (void *)v23[31];
      if (v25 != (void *)v23[33])
        free(v25);
      v23 += 36;
    }
    while (v23 != v24);
    v23 = v65;
  }
  if (v23 != (_QWORD *)v67)
    free(v23);
  return v12;
}

uint64_t *std::__partition_with_equals_on_right[abi:nn180100]<std::_ClassicAlgPolicy,md::mun::CollectionPoint *,md::mun::MuninOverlayRenderLayer::debugLayout(md::LayoutContext const&)::$_0 &>(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  __int128 v4;
  _BYTE *v5;
  uint64_t v6;
  uint64_t v7;
  _OWORD *v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t *v16;
  uint64_t *v17;
  unint64_t v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  void *v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  _BYTE *v30;
  __int128 v31;
  uint64_t v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  _BYTE *v42;
  char *v43;
  char *v44;
  unint64_t v45;
  unint64_t v46;
  __int128 *v47;
  uint64_t *v48;
  unint64_t v49;
  __int128 v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t *v53;
  _QWORD *v54;
  uint64_t v55;
  char v56;
  uint64_t v57;
  __int128 v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  uint64_t v62;
  __int128 v63;
  __int128 v64;
  _BYTE *v65;
  _BYTE *v66;
  _BYTE *v67;
  uint64_t v68;
  _BYTE v69[280];
  _BYTE v70[16];
  uint64_t v71;
  _QWORD v72[2];

  v57 = *(_QWORD *)a1;
  v58 = *(_OWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 32);
  v59 = *(_QWORD *)(a1 + 24);
  v60 = v3;
  v61 = *(_DWORD *)(a1 + 40);
  v62 = *(_QWORD *)(a1 + 44);
  v4 = *(_OWORD *)(a1 + 72);
  v63 = *(_OWORD *)(a1 + 56);
  v64 = v4;
  v5 = v69;
  v65 = v69;
  v6 = *(_QWORD *)(a1 + 112);
  v8 = (_OWORD *)(a1 + 88);
  v7 = *(_QWORD *)(a1 + 88);
  v67 = v69;
  v68 = v6;
  if (v7 == *(_QWORD *)(a1 + 104))
  {
    v27 = *(_QWORD *)(a1 + 96);
    v66 = &v69[v27 - v7];
    if (v27 == v7)
      goto LABEL_3;
    v28 = 0;
    v29 = &v71;
    v30 = v70;
    while (1)
    {
      v31 = *(_OWORD *)v7;
      *((_QWORD *)v5 + 2) = *(_QWORD *)(v7 + 16);
      *(_OWORD *)v5 = v31;
      v32 = *(_QWORD *)(v7 + 24);
      *((_DWORD *)v5 + 8) = *(_DWORD *)(v7 + 32);
      *((_QWORD *)v5 + 3) = v32;
      *(_QWORD *)(v5 + 36) = *(_QWORD *)(v7 + 36);
      v33 = *(_OWORD *)(v7 + 44);
      v34 = *(_OWORD *)(v7 + 60);
      v35 = *(_OWORD *)(v7 + 76);
      *(_OWORD *)(v5 + 92) = *(_OWORD *)(v7 + 92);
      *(_OWORD *)(v5 + 76) = v35;
      *(_OWORD *)(v5 + 60) = v34;
      *(_OWORD *)(v5 + 44) = v33;
      v36 = *(_OWORD *)(v7 + 108);
      v37 = *(_OWORD *)(v7 + 124);
      v38 = *(_OWORD *)(v7 + 140);
      *(_OWORD *)(v5 + 156) = *(_OWORD *)(v7 + 156);
      *(_OWORD *)(v5 + 140) = v38;
      *(_OWORD *)(v5 + 124) = v37;
      *(_OWORD *)(v5 + 108) = v36;
      v39 = *(_OWORD *)(v7 + 172);
      v40 = *(_OWORD *)(v7 + 188);
      v41 = *(_OWORD *)(v7 + 204);
      *(_OWORD *)(v5 + 220) = *(_OWORD *)(v7 + 220);
      *(_OWORD *)(v5 + 204) = v41;
      *(_OWORD *)(v5 + 188) = v40;
      *(_OWORD *)(v5 + 172) = v39;
      v42 = v5 + 280;
      *((_QWORD *)v5 + 31) = v5 + 280;
      v43 = *(char **)(v7 + 248);
      *((_DWORD *)v5 + 59) = *(_DWORD *)(v7 + 236);
      v5[240] = *(_BYTE *)(v7 + 240);
      *((_QWORD *)v5 + 32) = v5 + 280;
      *((_QWORD *)v5 + 33) = v5 + 280;
      *((_QWORD *)v5 + 34) = *(_QWORD *)(v7 + 272);
      if (v43 == *(char **)(v7 + 264))
      {
        *((_QWORD *)v5 + 32) = &v42[*(_QWORD *)(v7 + 256) - (_QWORD)v43];
        v44 = *(char **)(v7 + 256);
        if (v43 != v44)
        {
          v45 = v44 - v43;
          if ((unint64_t)(v44 - v43) >= 8 && (unint64_t)(&v70[288 * v28] - v43) >= 0x20)
          {
            if (v45 < 0x20)
            {
              v46 = 0;
              goto LABEL_44;
            }
            v46 = v45 & 0xFFFFFFFFFFFFFFE0;
            v47 = (__int128 *)(v43 + 16);
            v48 = v29;
            v49 = v45 & 0xFFFFFFFFFFFFFFE0;
            do
            {
              v50 = *v47;
              *((_OWORD *)v48 - 1) = *(v47 - 1);
              *(_OWORD *)v48 = v50;
              v47 += 2;
              v48 += 4;
              v49 -= 32;
            }
            while (v49);
            if (v45 == v46)
              goto LABEL_33;
            if ((v45 & 0x18) != 0)
            {
LABEL_44:
              v51 = v45 & 0xFFFFFFFFFFFFFFF8;
              v42 += v45 & 0xFFFFFFFFFFFFFFF8;
              v52 = v46 - (v45 & 0xFFFFFFFFFFFFFFF8);
              v53 = (uint64_t *)&v43[v46];
              v54 = &v30[v46];
              do
              {
                v55 = *v53++;
                *v54++ = v55;
                v52 += 8;
              }
              while (v52);
              if (v45 == v51)
                goto LABEL_33;
              v43 += v51;
            }
            else
            {
              v43 += v46;
              v42 += v46;
            }
          }
          do
          {
            v56 = *v43++;
            *v42++ = v56;
          }
          while (v43 != v44);
        }
      }
      else
      {
        *((_QWORD *)v5 + 31) = v43;
        *((_QWORD *)v5 + 32) = *(_QWORD *)(v7 + 256);
        *(_OWORD *)(v7 + 248) = 0uLL;
        *(_OWORD *)(v7 + 264) = 0uLL;
      }
LABEL_33:
      v5 += 288;
      v7 += 288;
      ++v28;
      v29 += 36;
      v30 += 288;
      if (v7 == v27)
        goto LABEL_3;
    }
  }
  v9 = *(_BYTE **)(a1 + 96);
  v65 = (_BYTE *)v7;
  v66 = v9;
  *v8 = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
LABEL_3:
  *(_QWORD *)((char *)v72 + 5) = *(_QWORD *)(a1 + 1853);
  v72[0] = *(_QWORD *)(a1 + 1848);
  v10 = *((_QWORD *)&v64 + 1);
  v11 = (uint64_t *)a1;
  do
  {
    v12 = v11;
    v11 += 233;
  }
  while ((unint64_t)v12[243] < *((_QWORD *)&v64 + 1));
  if (v12 == (uint64_t *)a1)
  {
    while (v11 < a2)
    {
      v13 = a2 - 233;
      v15 = *(a2 - 223);
      a2 -= 233;
      if (v15 < *((_QWORD *)&v64 + 1))
        goto LABEL_11;
    }
    v13 = a2;
  }
  else
  {
    do
    {
      v13 = a2 - 233;
      v14 = *(a2 - 223);
      a2 -= 233;
    }
    while (v14 >= *((_QWORD *)&v64 + 1));
  }
LABEL_11:
  v16 = v11;
  if (v11 < v13)
  {
    v17 = v13;
    do
    {
      std::swap[abi:nn180100]<md::mun::CollectionPoint>(v16, v17);
      v10 = *((_QWORD *)&v64 + 1);
      do
      {
        v18 = v16[243];
        v16 += 233;
      }
      while (v18 < *((_QWORD *)&v64 + 1));
      do
      {
        v19 = v17 - 223;
        v17 -= 233;
      }
      while ((unint64_t)*v19 >= *((_QWORD *)&v64 + 1));
    }
    while (v16 < v17);
  }
  v20 = v16 - 233;
  if (v16 - 233 != (uint64_t *)a1)
  {
    *(_QWORD *)a1 = *v20;
    *(_DWORD *)(a1 + 32) = *((_DWORD *)v16 - 458);
    *(_DWORD *)(a1 + 36) = *((_DWORD *)v16 - 457);
    *(_DWORD *)(a1 + 40) = *((_DWORD *)v16 - 456);
    *(_DWORD *)(a1 + 44) = *((_DWORD *)v16 - 455);
    *(_QWORD *)(a1 + 8) = *(v16 - 232);
    *(_QWORD *)(a1 + 16) = *(v16 - 231);
    *(_QWORD *)(a1 + 24) = *(v16 - 230);
    *(_DWORD *)(a1 + 48) = *((_DWORD *)v16 - 454);
    *(_QWORD *)(a1 + 56) = *(v16 - 226);
    *(_QWORD *)(a1 + 64) = *(v16 - 225);
    *(_QWORD *)(a1 + 72) = *(v16 - 224);
    *(_QWORD *)(a1 + 80) = *(v16 - 223);
    geo::small_vector_base<md::mun::PhotoInfo>::move((uint64_t)v8, v16 - 222, a1 + 120);
    v21 = *(v16 - 2);
    *(_QWORD *)(a1 + 1853) = *(uint64_t *)((char *)v16 - 11);
    *(_QWORD *)(a1 + 1848) = v21;
    v10 = *((_QWORD *)&v64 + 1);
  }
  *v20 = v57;
  *(v16 - 229) = v60;
  *((_DWORD *)v16 - 456) = v61;
  *((_DWORD *)v16 - 455) = v62;
  *((_OWORD *)v16 - 116) = v58;
  *(v16 - 230) = v59;
  *((_DWORD *)v16 - 454) = HIDWORD(v62);
  *((_OWORD *)v16 - 113) = v63;
  *(v16 - 224) = v64;
  *(v16 - 223) = v10;
  if (v20 != &v57)
    geo::small_vector_base<md::mun::PhotoInfo>::move((uint64_t)(v16 - 222), (uint64_t *)&v65, (uint64_t)(v16 - 218));
  v22 = v72[0];
  *(uint64_t *)((char *)v16 - 11) = *(_QWORD *)((char *)v72 + 5);
  *(v16 - 2) = v22;
  v23 = v65;
  v24 = v66;
  if (v65 != v66)
  {
    do
    {
      v25 = (void *)v23[31];
      if (v25 != (void *)v23[33])
        free(v25);
      v23 += 36;
    }
    while (v23 != v24);
    v23 = v65;
  }
  if (v23 != (_QWORD *)v67)
    free(v23);
  return v16 - 233;
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,md::mun::MuninOverlayRenderLayer::debugLayout(md::LayoutContext const&)::$_0 &,md::mun::CollectionPoint *>(uint64_t *a1, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t v4;
  _BOOL8 result;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t v20;
  int v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;
  _BYTE *v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  _QWORD *v38;
  _QWORD *v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  _BYTE *v43;
  uint64_t *v44;
  _BYTE *v45;
  __int128 v46;
  uint64_t v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  _BYTE *v57;
  char *v58;
  char *v59;
  unint64_t v60;
  unint64_t v61;
  __int128 *v62;
  uint64_t *v63;
  unint64_t v64;
  __int128 v65;
  unint64_t v66;
  unint64_t v67;
  uint64_t *v68;
  _QWORD *v69;
  uint64_t v70;
  char v71;
  uint64_t *v72;
  int v73;
  uint64_t v74;
  __int128 v75;
  uint64_t v76;
  _BYTE v77[12];
  uint64_t v78;
  __int128 v79;
  __int128 v80;
  _BYTE *v81;
  _BYTE *v82;
  _BYTE *v83;
  uint64_t v84;
  _BYTE v85[280];
  _BYTE v86[16];
  uint64_t v87;
  _QWORD v88[3];

  v2 = a2;
  v4 = 0x63FB9AEB1FDCD759 * (a2 - a1);
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      if (*(a2 - 223) < (unint64_t)a1[10])
      {
        v6 = a2 - 233;
        v7 = a1;
        goto LABEL_71;
      }
      return result;
    case 3:
      v8 = a1 + 233;
      v9 = a1[243];
      v11 = a2 - 223;
      v10 = *(a2 - 223);
      if (v9 < a1[10])
      {
        if (v10 >= v9)
        {
          std::swap[abi:nn180100]<md::mun::CollectionPoint>(a1, a1 + 233);
          if (*v11 >= (unint64_t)a1[243])
            return 1;
          v7 = a1 + 233;
        }
        else
        {
          v7 = a1;
        }
        v6 = v2 - 233;
        goto LABEL_71;
      }
      if (v10 < v9)
      {
        v17 = a1 + 233;
        v18 = a2 - 233;
        goto LABEL_19;
      }
      return result;
    case 4:
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,md::mun::MuninOverlayRenderLayer::debugLayout(md::LayoutContext const&)::$_0 &,md::mun::CollectionPoint *>(a1, a1 + 233, a1 + 466, a2 - 233);
      return 1;
    case 5:
      v8 = a1 + 233;
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,md::mun::MuninOverlayRenderLayer::debugLayout(md::LayoutContext const&)::$_0 &,md::mun::CollectionPoint *>(a1, a1 + 233, a1 + 466, a1 + 699);
      if (*(v2 - 223) < (unint64_t)a1[709])
      {
        std::swap[abi:nn180100]<md::mun::CollectionPoint>(a1 + 699, v2 - 233);
        if (a1[709] < (unint64_t)a1[476])
        {
          std::swap[abi:nn180100]<md::mun::CollectionPoint>(a1 + 466, a1 + 699);
          if (a1[476] < (unint64_t)a1[243])
          {
            v17 = a1 + 233;
            v18 = a1 + 466;
LABEL_19:
            std::swap[abi:nn180100]<md::mun::CollectionPoint>(v17, v18);
            if (a1[243] < (unint64_t)a1[10])
            {
              v7 = a1;
              v6 = v8;
LABEL_71:
              std::swap[abi:nn180100]<md::mun::CollectionPoint>(v7, v6);
            }
          }
        }
      }
      return 1;
    default:
      v12 = a1 + 466;
      v13 = a1[243];
      v14 = a1[476];
      if (v13 < a1[10])
      {
        v15 = a1;
        if (v14 >= v13)
        {
          std::swap[abi:nn180100]<md::mun::CollectionPoint>(a1, a1 + 233);
          if (a1[476] >= (unint64_t)a1[243])
            goto LABEL_25;
          v15 = a1 + 233;
        }
        v16 = a1 + 466;
        goto LABEL_24;
      }
      if (v14 < v13)
      {
        std::swap[abi:nn180100]<md::mun::CollectionPoint>(a1 + 233, a1 + 466);
        if (a1[243] < (unint64_t)a1[10])
        {
          v15 = a1;
          v16 = a1 + 233;
LABEL_24:
          std::swap[abi:nn180100]<md::mun::CollectionPoint>(v15, v16);
        }
      }
LABEL_25:
      v19 = a1 + 699;
      if (a1 + 699 != v2)
      {
        v20 = 0;
        v21 = 0;
        v22 = a1 + 697;
        v23 = 5576;
        v72 = v2;
        while (1)
        {
          if (v19[10] >= (unint64_t)v12[10])
            goto LABEL_28;
          v74 = *v19;
          v75 = *(_OWORD *)(v19 + 1);
          v24 = v19[4];
          v76 = v19[3];
          *(_QWORD *)v77 = v24;
          *(_DWORD *)&v77[8] = *((_DWORD *)v19 + 10);
          v78 = *(uint64_t *)((char *)v19 + 44);
          v25 = *(_OWORD *)(v19 + 9);
          v79 = *(_OWORD *)(v19 + 7);
          v80 = v25;
          v81 = v85;
          v26 = v19[14];
          v27 = v19[11];
          v83 = v85;
          v84 = v26;
          if (v27 == v19[13])
            break;
          v28 = (_BYTE *)v19[12];
          v81 = (_BYTE *)v27;
          v82 = v28;
          *(_OWORD *)(v19 + 11) = 0u;
          *(_OWORD *)(v19 + 13) = 0u;
LABEL_32:
          v73 = v21;
          v88[0] = v19[231];
          *(_QWORD *)((char *)v88 + 5) = *(uint64_t *)((char *)v19 + 1853);
          v29 = v23;
          v30 = v20;
          while (1)
          {
            v31 = (char *)a1 + v30;
            v32 = v29;
            *((_QWORD *)v31 + 699) = *(uint64_t *)((char *)a1 + v30 + 3728);
            *((_DWORD *)v31 + 1406) = *(_DWORD *)((char *)a1 + v30 + 3760);
            *(_QWORD *)(v31 + 5628) = *(uint64_t *)((char *)a1 + v30 + 3764);
            *((_DWORD *)v31 + 1409) = *(_DWORD *)((char *)a1 + v30 + 3772);
            *((_OWORD *)v31 + 350) = *(_OWORD *)((char *)a1 + v30 + 3736);
            *((_QWORD *)v31 + 702) = *(uint64_t *)((char *)a1 + v30 + 3752);
            *((_DWORD *)v31 + 1410) = *(_DWORD *)((char *)a1 + v30 + 3776);
            *((_QWORD *)v31 + 706) = *(uint64_t *)((char *)a1 + v30 + 3784);
            *((_QWORD *)v31 + 707) = *(uint64_t *)((char *)a1 + v30 + 3792);
            v33 = *(uint64_t *)((char *)a1 + v30 + 3800);
            *((_QWORD *)v31 + 709) = *(uint64_t *)((char *)a1 + v30 + 3808);
            *((_QWORD *)v31 + 708) = v33;
            geo::small_vector_base<md::mun::PhotoInfo>::move((uint64_t)v22 + v30 + 104, (uint64_t *)((char *)a1 + v30 + 3816), (uint64_t)v22 + v30 + 136);
            *((_QWORD *)v31 + 930) = *((_QWORD *)v31 + 697);
            *(_QWORD *)(v31 + 7445) = *(_QWORD *)(v31 + 5581);
            v34 = *((_QWORD *)&v80 + 1);
            if (v30 == -3728)
              break;
            v30 -= 1864;
            v29 = v32 - 1864;
            if (*((_QWORD *)&v80 + 1) >= *((_QWORD *)v31 + 243))
            {
              v35 = (uint64_t)v22 + v30 + 16;
              v36 = (uint64_t *)((char *)a1 + v32);
              goto LABEL_37;
            }
          }
          v36 = (uint64_t *)((char *)a1 + v32);
          v35 = (uint64_t)a1;
LABEL_37:
          *(_QWORD *)v35 = v74;
          *(_DWORD *)(v35 + 32) = *(_DWORD *)v77;
          *(_QWORD *)(v35 + 36) = *(_QWORD *)&v77[4];
          *(_DWORD *)(v35 + 44) = v78;
          *(_OWORD *)(v35 + 8) = v75;
          *(_QWORD *)(v35 + 24) = v76;
          *(_DWORD *)(v35 + 48) = HIDWORD(v78);
          v37 = *((_QWORD *)&v79 + 1);
          *(_QWORD *)(v35 + 56) = v79;
          *(_QWORD *)(v35 + 64) = v37;
          *(_QWORD *)(v35 + 72) = v80;
          *(_QWORD *)(v35 + 80) = v34;
          if ((uint64_t *)v35 != &v74)
            geo::small_vector_base<md::mun::PhotoInfo>::move(v35 + 88, (uint64_t *)&v81, v35 + 120);
          *v36 = v88[0];
          *(_QWORD *)((char *)v36 + 5) = *(_QWORD *)((char *)v88 + 5);
          v38 = v81;
          v39 = v82;
          if (v81 != v82)
          {
            do
            {
              v40 = (void *)v38[31];
              if (v40 != (void *)v38[33])
                free(v40);
              v38 += 36;
            }
            while (v38 != v39);
            v38 = v81;
          }
          v2 = v72;
          if (v38 != (_QWORD *)v83)
            free(v38);
          v21 = v73 + 1;
          if (v73 == 7)
            return v19 + 233 == v72;
LABEL_28:
          v12 = v19;
          v20 += 1864;
          v23 += 1864;
          v19 += 233;
          if (v19 == v2)
            return 1;
        }
        v41 = v19[12];
        v82 = &v85[v41 - v27];
        if (v41 == v27)
          goto LABEL_32;
        v42 = 0;
        v43 = v86;
        v44 = &v87;
        v45 = v85;
        while (1)
        {
          v46 = *(_OWORD *)v27;
          *((_QWORD *)v45 + 2) = *(_QWORD *)(v27 + 16);
          *(_OWORD *)v45 = v46;
          v47 = *(_QWORD *)(v27 + 24);
          *((_DWORD *)v45 + 8) = *(_DWORD *)(v27 + 32);
          *((_QWORD *)v45 + 3) = v47;
          *(_QWORD *)(v45 + 36) = *(_QWORD *)(v27 + 36);
          v48 = *(_OWORD *)(v27 + 44);
          v49 = *(_OWORD *)(v27 + 60);
          v50 = *(_OWORD *)(v27 + 76);
          *(_OWORD *)(v45 + 92) = *(_OWORD *)(v27 + 92);
          *(_OWORD *)(v45 + 76) = v50;
          *(_OWORD *)(v45 + 60) = v49;
          *(_OWORD *)(v45 + 44) = v48;
          v51 = *(_OWORD *)(v27 + 108);
          v52 = *(_OWORD *)(v27 + 124);
          v53 = *(_OWORD *)(v27 + 140);
          *(_OWORD *)(v45 + 156) = *(_OWORD *)(v27 + 156);
          *(_OWORD *)(v45 + 140) = v53;
          *(_OWORD *)(v45 + 124) = v52;
          *(_OWORD *)(v45 + 108) = v51;
          v54 = *(_OWORD *)(v27 + 172);
          v55 = *(_OWORD *)(v27 + 188);
          v56 = *(_OWORD *)(v27 + 204);
          *(_OWORD *)(v45 + 220) = *(_OWORD *)(v27 + 220);
          *(_OWORD *)(v45 + 204) = v56;
          *(_OWORD *)(v45 + 188) = v55;
          *(_OWORD *)(v45 + 172) = v54;
          v57 = v45 + 280;
          *((_QWORD *)v45 + 31) = v45 + 280;
          v58 = *(char **)(v27 + 248);
          *((_DWORD *)v45 + 59) = *(_DWORD *)(v27 + 236);
          v45[240] = *(_BYTE *)(v27 + 240);
          *((_QWORD *)v45 + 32) = v45 + 280;
          *((_QWORD *)v45 + 33) = v45 + 280;
          *((_QWORD *)v45 + 34) = *(_QWORD *)(v27 + 272);
          if (v58 == *(char **)(v27 + 264))
          {
            *((_QWORD *)v45 + 32) = &v57[*(_QWORD *)(v27 + 256) - (_QWORD)v58];
            v59 = *(char **)(v27 + 256);
            if (v58 != v59)
            {
              v60 = v59 - v58;
              if ((unint64_t)(v59 - v58) >= 8 && (unint64_t)(&v86[288 * v42] - v58) >= 0x20)
              {
                if (v60 < 0x20)
                {
                  v61 = 0;
                  goto LABEL_61;
                }
                v61 = v60 & 0xFFFFFFFFFFFFFFE0;
                v62 = (__int128 *)(v58 + 16);
                v63 = v44;
                v64 = v60 & 0xFFFFFFFFFFFFFFE0;
                do
                {
                  v65 = *v62;
                  *((_OWORD *)v63 - 1) = *(v62 - 1);
                  *(_OWORD *)v63 = v65;
                  v62 += 2;
                  v63 += 4;
                  v64 -= 32;
                }
                while (v64);
                if (v60 == v61)
                  goto LABEL_50;
                if ((v60 & 0x18) != 0)
                {
LABEL_61:
                  v66 = v60 & 0xFFFFFFFFFFFFFFF8;
                  v57 += v60 & 0xFFFFFFFFFFFFFFF8;
                  v67 = v61 - (v60 & 0xFFFFFFFFFFFFFFF8);
                  v68 = (uint64_t *)&v58[v61];
                  v69 = &v43[v61];
                  do
                  {
                    v70 = *v68++;
                    *v69++ = v70;
                    v67 += 8;
                  }
                  while (v67);
                  if (v60 == v66)
                    goto LABEL_50;
                  v58 += v66;
                }
                else
                {
                  v58 += v61;
                  v57 += v61;
                }
              }
              do
              {
                v71 = *v58++;
                *v57++ = v71;
              }
              while (v58 != v59);
            }
          }
          else
          {
            *((_QWORD *)v45 + 31) = v58;
            *((_QWORD *)v45 + 32) = *(_QWORD *)(v27 + 256);
            *(_OWORD *)(v27 + 248) = 0u;
            *(_OWORD *)(v27 + 264) = 0u;
          }
LABEL_50:
          v45 += 288;
          v27 += 288;
          ++v42;
          v44 += 36;
          v43 += 288;
          if (v27 == v41)
            goto LABEL_32;
        }
      }
      return 1;
  }
}

void std::__sift_down[abi:nn180100]<std::_ClassicAlgPolicy,md::mun::MuninOverlayRenderLayer::debugLayout(md::LayoutContext const&)::$_0 &,md::mun::CollectionPoint *>(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t *v6;
  int64_t v8;
  int64_t v10;
  uint64_t *v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  _BYTE *v32;
  __int128 v33;
  uint64_t v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  _BYTE *v44;
  char *v45;
  char *v46;
  unint64_t v47;
  unint64_t v48;
  __int128 *v49;
  uint64_t *v50;
  unint64_t v51;
  __int128 v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t *v55;
  _QWORD *v56;
  uint64_t v57;
  char v58;
  uint64_t v59;
  __int128 v60;
  uint64_t v61;
  uint64_t v62;
  int v63;
  uint64_t v64;
  __int128 v65;
  __int128 v66;
  _BYTE *v67;
  _BYTE *v68;
  _BYTE *v69;
  uint64_t v70;
  _BYTE v71[280];
  _BYTE v72[16];
  uint64_t v73;
  _QWORD v74[15];

  v5 = a2 - 2;
  if (a2 < 2)
    return;
  v74[13] = v3;
  v74[14] = v4;
  v6 = a3;
  v8 = v5 >> 1;
  if ((uint64_t)(v5 >> 1) < 0x63FB9AEB1FDCD759 * (((uint64_t)a3 - a1) >> 3))
    return;
  v10 = (0xC7F735D63FB9AEB2 * (((uint64_t)a3 - a1) >> 3)) | 1;
  v11 = (uint64_t *)(a1 + 1864 * v10);
  if ((uint64_t)(0xC7F735D63FB9AEB2 * (((uint64_t)a3 - a1) >> 3) + 2) < a2)
  {
    v12 = v11[10];
    v13 = v11[243];
    v11 += 233 * (v12 < v13);
    if (v12 < v13)
      v10 = 0xC7F735D63FB9AEB2 * (((uint64_t)a3 - a1) >> 3) + 2;
  }
  if (v11[10] < (unint64_t)a3[10])
    return;
  v59 = *a3;
  v60 = *(_OWORD *)(a3 + 1);
  v14 = a3[4];
  v61 = a3[3];
  v62 = v14;
  v63 = *((_DWORD *)a3 + 10);
  v64 = *(uint64_t *)((char *)a3 + 44);
  v65 = *(_OWORD *)(a3 + 7);
  v66 = *(_OWORD *)(a3 + 9);
  v15 = v71;
  v67 = v71;
  v16 = a3[14];
  v17 = a3[11];
  v69 = v71;
  v70 = v16;
  if (v17 != a3[13])
  {
    v18 = (_BYTE *)a3[12];
    v67 = (_BYTE *)v17;
    v68 = v18;
    *(_OWORD *)(a3 + 11) = 0u;
    *(_OWORD *)(a3 + 13) = 0u;
    goto LABEL_9;
  }
  v29 = a3[12];
  v68 = &v71[v29 - v17];
  if (v29 != v17)
  {
    v30 = 0;
    v31 = &v73;
    v32 = v72;
    do
    {
      v33 = *(_OWORD *)v17;
      *((_QWORD *)v15 + 2) = *(_QWORD *)(v17 + 16);
      *(_OWORD *)v15 = v33;
      v34 = *(_QWORD *)(v17 + 24);
      *((_DWORD *)v15 + 8) = *(_DWORD *)(v17 + 32);
      *((_QWORD *)v15 + 3) = v34;
      *(_QWORD *)(v15 + 36) = *(_QWORD *)(v17 + 36);
      v35 = *(_OWORD *)(v17 + 44);
      v36 = *(_OWORD *)(v17 + 60);
      v37 = *(_OWORD *)(v17 + 76);
      *(_OWORD *)(v15 + 92) = *(_OWORD *)(v17 + 92);
      *(_OWORD *)(v15 + 76) = v37;
      *(_OWORD *)(v15 + 60) = v36;
      *(_OWORD *)(v15 + 44) = v35;
      v38 = *(_OWORD *)(v17 + 108);
      v39 = *(_OWORD *)(v17 + 124);
      v40 = *(_OWORD *)(v17 + 140);
      *(_OWORD *)(v15 + 156) = *(_OWORD *)(v17 + 156);
      *(_OWORD *)(v15 + 140) = v40;
      *(_OWORD *)(v15 + 124) = v39;
      *(_OWORD *)(v15 + 108) = v38;
      v41 = *(_OWORD *)(v17 + 172);
      v42 = *(_OWORD *)(v17 + 188);
      v43 = *(_OWORD *)(v17 + 204);
      *(_OWORD *)(v15 + 220) = *(_OWORD *)(v17 + 220);
      *(_OWORD *)(v15 + 204) = v43;
      *(_OWORD *)(v15 + 188) = v42;
      *(_OWORD *)(v15 + 172) = v41;
      v44 = v15 + 280;
      *((_QWORD *)v15 + 31) = v15 + 280;
      v45 = *(char **)(v17 + 248);
      *((_DWORD *)v15 + 59) = *(_DWORD *)(v17 + 236);
      v15[240] = *(_BYTE *)(v17 + 240);
      *((_QWORD *)v15 + 32) = v15 + 280;
      *((_QWORD *)v15 + 33) = v15 + 280;
      *((_QWORD *)v15 + 34) = *(_QWORD *)(v17 + 272);
      if (v45 == *(char **)(v17 + 264))
      {
        *((_QWORD *)v15 + 32) = &v44[*(_QWORD *)(v17 + 256) - (_QWORD)v45];
        v46 = *(char **)(v17 + 256);
        if (v45 != v46)
        {
          v47 = v46 - v45;
          if ((unint64_t)(v46 - v45) >= 8 && (unint64_t)(&v72[288 * v30] - v45) >= 0x20)
          {
            if (v47 < 0x20)
            {
              v48 = 0;
              goto LABEL_44;
            }
            v48 = v47 & 0xFFFFFFFFFFFFFFE0;
            v49 = (__int128 *)(v45 + 16);
            v50 = v31;
            v51 = v47 & 0xFFFFFFFFFFFFFFE0;
            do
            {
              v52 = *v49;
              *((_OWORD *)v50 - 1) = *(v49 - 1);
              *(_OWORD *)v50 = v52;
              v49 += 2;
              v50 += 4;
              v51 -= 32;
            }
            while (v51);
            if (v47 == v48)
              goto LABEL_33;
            if ((v47 & 0x18) != 0)
            {
LABEL_44:
              v53 = v47 & 0xFFFFFFFFFFFFFFF8;
              v44 += v47 & 0xFFFFFFFFFFFFFFF8;
              v54 = v48 - (v47 & 0xFFFFFFFFFFFFFFF8);
              v55 = (uint64_t *)&v45[v48];
              v56 = &v32[v48];
              do
              {
                v57 = *v55++;
                *v56++ = v57;
                v54 += 8;
              }
              while (v54);
              if (v47 == v53)
                goto LABEL_33;
              v45 += v53;
            }
            else
            {
              v45 += v48;
              v44 += v48;
            }
          }
          do
          {
            v58 = *v45++;
            *v44++ = v58;
          }
          while (v45 != v46);
        }
      }
      else
      {
        *((_QWORD *)v15 + 31) = v45;
        *((_QWORD *)v15 + 32) = *(_QWORD *)(v17 + 256);
        *(_OWORD *)(v17 + 248) = 0uLL;
        *(_OWORD *)(v17 + 264) = 0uLL;
      }
LABEL_33:
      v15 += 288;
      v17 += 288;
      ++v30;
      v31 += 36;
      v32 += 288;
    }
    while (v17 != v29);
  }
LABEL_9:
  *(_QWORD *)((char *)v74 + 5) = *(uint64_t *)((char *)v6 + 1853);
  v74[0] = v6[231];
  while (1)
  {
    v20 = v11;
    *v6 = *v11;
    *((_DWORD *)v6 + 8) = *((_DWORD *)v11 + 8);
    *((_DWORD *)v6 + 9) = *((_DWORD *)v11 + 9);
    *((_DWORD *)v6 + 10) = *((_DWORD *)v11 + 10);
    *((_DWORD *)v6 + 11) = *((_DWORD *)v11 + 11);
    v6[1] = v11[1];
    v6[2] = v11[2];
    v6[3] = v11[3];
    *((_DWORD *)v6 + 12) = *((_DWORD *)v11 + 12);
    v6[7] = v11[7];
    v6[8] = v11[8];
    v6[9] = v11[9];
    v6[10] = v11[10];
    if (v6 != v11)
      geo::small_vector_base<md::mun::PhotoInfo>::move((uint64_t)(v6 + 11), v11 + 11, (uint64_t)(v6 + 15));
    v21 = v20[231];
    *(uint64_t *)((char *)v6 + 1853) = *(uint64_t *)((char *)v20 + 1853);
    v6[231] = v21;
    if (v8 < v10)
      break;
    v22 = (2 * v10) | 1;
    v11 = (uint64_t *)(a1 + 1864 * v22);
    if (2 * v10 + 2 < a2)
    {
      v23 = v11[10];
      v24 = v11[243];
      v11 += 233 * (v23 < v24);
      if (v23 < v24)
        v22 = 2 * v10 + 2;
    }
    v19 = *((_QWORD *)&v66 + 1);
    v6 = v20;
    v10 = v22;
    if ((unint64_t)v11[10] < *((_QWORD *)&v66 + 1))
      goto LABEL_19;
  }
  v19 = *((_QWORD *)&v66 + 1);
LABEL_19:
  *v20 = v59;
  v20[4] = v62;
  *((_DWORD *)v20 + 10) = v63;
  *((_DWORD *)v20 + 11) = v64;
  *(_OWORD *)(v20 + 1) = v60;
  v20[3] = v61;
  *((_DWORD *)v20 + 12) = HIDWORD(v64);
  *(_OWORD *)(v20 + 7) = v65;
  v20[9] = v66;
  v20[10] = v19;
  if (v20 != &v59)
    geo::small_vector_base<md::mun::PhotoInfo>::move((uint64_t)(v20 + 11), (uint64_t *)&v67, (uint64_t)(v20 + 15));
  v25 = v74[0];
  *(uint64_t *)((char *)v20 + 1853) = *(_QWORD *)((char *)v74 + 5);
  v20[231] = v25;
  v26 = v67;
  v27 = v68;
  if (v67 != v68)
  {
    do
    {
      v28 = (void *)v26[31];
      if (v28 != (void *)v26[33])
        free(v28);
      v26 += 36;
    }
    while (v26 != v27);
    v26 = v67;
  }
  if (v26 != (_QWORD *)v69)
    free(v26);
}

void std::__function::__func<md::mun::MuninOverlayRenderLayer::debugLayout(md::LayoutContext const&)::$_1,std::allocator<md::mun::MuninOverlayRenderLayer::debugLayout(md::LayoutContext const&)::$_1>,BOOL ()(md::mun::CollectionPoint const&)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

double std::__function::__func<md::mun::MuninOverlayRenderLayer::debugLayout(md::LayoutContext const&)::$_1,std::allocator<md::mun::MuninOverlayRenderLayer::debugLayout(md::LayoutContext const&)::$_1>,BOOL ()(md::mun::CollectionPoint const&)>::__clone(uint64_t a1)
{
  char *v2;
  double result;

  v2 = (char *)operator new(0x70uLL);
  *(_QWORD *)v2 = &off_1E42D40F0;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(v2 + 40) = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(v2 + 56) = *(_OWORD *)(a1 + 56);
  *((_QWORD *)v2 + 9) = *(_QWORD *)(a1 + 72);
  *((_OWORD *)v2 + 5) = *(_OWORD *)(a1 + 80);
  *((_QWORD *)v2 + 12) = *(_QWORD *)(a1 + 96);
  result = *(double *)(a1 + 104);
  *((double *)v2 + 13) = result;
  return result;
}

double std::__function::__func<md::mun::MuninOverlayRenderLayer::debugLayout(md::LayoutContext const&)::$_1,std::allocator<md::mun::MuninOverlayRenderLayer::debugLayout(md::LayoutContext const&)::$_1>,BOOL ()(md::mun::CollectionPoint const&)>::__clone(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  double result;

  *(_QWORD *)a2 = &off_1E42D40F0;
  v2 = *(_OWORD *)(a1 + 8);
  v3 = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 40) = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(_OWORD *)(a2 + 8) = v2;
  v4 = *(_OWORD *)(a1 + 56);
  *(_QWORD *)(a2 + 72) = *(_QWORD *)(a1 + 72);
  *(_OWORD *)(a2 + 56) = v4;
  v5 = *(_OWORD *)(a1 + 80);
  *(_QWORD *)(a2 + 96) = *(_QWORD *)(a1 + 96);
  *(_OWORD *)(a2 + 80) = v5;
  result = *(double *)(a1 + 104);
  *(double *)(a2 + 104) = result;
  return result;
}

BOOL std::__function::__func<md::mun::MuninOverlayRenderLayer::debugLayout(md::LayoutContext const&)::$_1,std::allocator<md::mun::MuninOverlayRenderLayer::debugLayout(md::LayoutContext const&)::$_1>,BOOL ()(md::mun::CollectionPoint const&)>::operator()(double *a1, double *a2)
{
  double v2;
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v14;
  double v15;
  _BOOL4 v16;

  v2 = a1[10];
  v3 = a1[11];
  v4 = a1[12];
  v5 = a1[13];
  v6 = a2[2];
  v7 = a2[3];
  v8 = a2[1];
  v9 = -(v6 * v4 - v7 * v3) - (v6 * v4 - v7 * v3);
  v10 = -(v7 * v2 - v8 * v4) - (v7 * v2 - v8 * v4);
  v11 = -(v8 * v3 - v6 * v2) - (v8 * v3 - v6 * v2);
  v12 = a1[7] + v8 + v9 * v5 + v11 * v3 - v10 * v4;
  if (v12 < a1[1])
    return 0;
  v14 = v7 - v9 * v3 + v10 * v2 + v11 * v5 + a1[9];
  v15 = v6 + v9 * v4 + v10 * v5 - v11 * v2 + a1[8];
  v16 = v12 < a1[4];
  if (v15 < a1[2])
    v16 = 0;
  if (v15 >= a1[5])
    v16 = 0;
  if (v14 < a1[3])
    v16 = 0;
  return v14 < a1[6] && v16;
}

unint64_t ___ZN12_GLOBAL__N_120createPointsDrawableERKN2md13LayoutContextEP17VKSharedResourcesRKNSt3__110unique_ptrIN3ggl11RenderStateENS6_14default_deleteIS9_EEEEfRKNS6_6vectorINS_15PointDescriptorENS6_9allocatorISG_EEEE_block_invoke(_QWORD *a1)
{
  _QWORD *v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  unint64_t result;
  _DWORD *v14;
  _DWORD *v15;
  uint64_t v16;
  uint64_t v17;
  int v18;

  v1 = (_QWORD *)a1[4];
  v2 = v1[6] - v1[5];
  v3 = v2 / v1[1] * v1[1];
  v4 = v2 % v1[1];
  if (v2 == v4)
    v5 = 0;
  else
    v5 = v1[9];
  v6 = (_QWORD *)a1[6];
  v7 = v6[6] - v6[5];
  v8 = v7 / v6[1] * v6[1];
  v9 = v7 % v6[1];
  if (v7 == v9)
    v10 = 0;
  else
    v10 = v6[9];
  v11 = (uint64_t *)a1[8];
  v12 = *v11;
  result = v11[1] - *v11;
  if (result)
  {
    result = (uint64_t)result / 28;
    if (result <= 1)
      result = 1;
    v14 = (_DWORD *)(v12 + 24);
    v15 = (_DWORD *)(v10 + 28);
    v16 = v5;
    do
    {
      v17 = *((_QWORD *)v14 - 3);
      *(_DWORD *)(v16 + 8) = *(v14 - 4);
      *(_QWORD *)v16 = v17;
      *(_DWORD *)(v16 + 12) = 1065353216;
      *(v15 - 7) = 1065353216;
      *(v15 - 3) = *(v14 - 3);
      *(v15 - 2) = *(v14 - 2);
      *(v15 - 1) = *(v14 - 1);
      v18 = *v14;
      v14 += 7;
      *v15 = v18;
      v15 += 8;
      v16 += 16;
      --result;
    }
    while (result);
  }
  if (v10 && v7 != v9)
  {
    if (v6[8] > v8)
      v8 = v6[8];
    v6[7] = 0;
    v6[8] = v8;
  }
  if (v5 && v2 != v4)
  {
    if (v1[8] > v3)
      v3 = v1[8];
    v1[7] = 0;
    v1[8] = v3;
  }
  return result;
}

void std::__shared_ptr_emplace<ggl::Point::ExtendedMesh>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E45E8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::Point::ExtendedMesh>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E45E8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<ggl::Point::ExtendedMesh>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

_QWORD *__copy_helper_block_ea8_32c80_ZTSNSt3__110shared_ptrIN3ggl15VertexDataTypedINS1_10CommonMesh10BufferPos4EEEEE48c75_ZTSNSt3__110shared_ptrIN3ggl15VertexDataTypedINS1_5Point11ExtendedVboEEEEE(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;

  v2 = a2[5];
  result[4] = a2[4];
  result[5] = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  v5 = a2[7];
  result[6] = a2[6];
  result[7] = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  return result;
}

void __destroy_helper_block_ea8_32c80_ZTSNSt3__110shared_ptrIN3ggl15VertexDataTypedINS1_10CommonMesh10BufferPos4EEEEE48c75_ZTSNSt3__110shared_ptrIN3ggl15VertexDataTypedINS1_5Point11ExtendedVboEEEEE(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;

  v2 = *(std::__shared_weak_count **)(a1 + 56);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = *(std::__shared_weak_count **)(a1 + 40);
    if (!v5)
      return;
  }
  else
  {
LABEL_5:
    v5 = *(std::__shared_weak_count **)(a1 + 40);
    if (!v5)
      return;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
}

void std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::Point::ExtendedVbo>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E0448;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::Point::ExtendedVbo>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E0448;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::Point::ExtendedVbo>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__shared_ptr_emplace<ggl::Point::ExtendedPipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E4658;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::Point::ExtendedPipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E4658;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<ggl::Point::ExtendedPipelineState>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t ___ZN2md3mun23MuninOverlayRenderLayer20updateDebugDrawablesERKNS_13LayoutContextE_block_invoke(uint64_t result)
{
  _QWORD *v1;
  unint64_t v2;
  unint64_t v3;
  _OWORD *v4;
  unint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;

  v1 = *(_QWORD **)(result + 32);
  v2 = v1[6] - v1[5];
  v3 = v1[1];
  v4 = (_OWORD *)v1[9];
  *v4 = xmmword_19FFB3990;
  v4[1] = xmmword_19FFB4A80;
  v4[2] = xmmword_19FFB3950;
  v4[3] = xmmword_19FFB4A90;
  v5 = v2 - v2 % v3;
  if (v5)
  {
    if (v1[8] > v5)
      v5 = v1[8];
    v1[7] = 0;
    v1[8] = v5;
  }
  v6 = *(_QWORD **)(result + 48);
  v7 = v6[6] - v6[5];
  v8 = v7 % v6[1];
  v9 = v6[9];
  *(_QWORD *)v9 = 0x2000200010000;
  *(_DWORD *)(v9 + 8) = 3;
  v10 = v7 - v8;
  if (v10)
  {
    if (v6[8] > v10)
      v10 = v6[8];
    v6[7] = 0;
    v6[8] = v10;
  }
  return result;
}

uint64_t std::construct_at[abi:nn180100]<ggl::CommonMesh::Pos4Mesh,char const(&)[17],std::shared_ptr<ggl::VertexDataTyped<ggl::CommonMesh::BufferPos4>> &,std::shared_ptr<ggl::IndexDataTyped<unsigned short>> &,ggl::CommonMesh::Pos4Mesh*>(uint64_t a1, uint64_t a2, std::__shared_weak_count *a3, uint64_t *a4)
{
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v15[2];
  uint64_t v16;
  std::__shared_weak_count *v17;

  v16 = a2;
  v17 = a3;
  if (a3)
  {
    p_shared_owners = (unint64_t *)&a3->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  v7 = (std::__shared_weak_count *)a4[1];
  v15[0] = *a4;
  v15[1] = (uint64_t)v7;
  if (v7)
  {
    v8 = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
    ggl::CommonMesh::Pos4Mesh::Pos4Mesh(a1, (uint64_t)"screen quad mesh", &v16, v15);
    do
      v10 = __ldaxr(v8);
    while (__stlxr(v10 - 1, v8));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  else
  {
    ggl::CommonMesh::Pos4Mesh::Pos4Mesh(a1, (uint64_t)"screen quad mesh", &v16, v15);
  }
  v11 = v17;
  if (v17)
  {
    v12 = (unint64_t *)&v17->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  return a1;
}

_QWORD *__copy_helper_block_ea8_32c80_ZTSNSt3__110shared_ptrIN3ggl15VertexDataTypedINS1_10CommonMesh10BufferPos4EEEEE48c51_ZTSNSt3__110shared_ptrIN3ggl14IndexDataTypedItEEEE(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;

  v2 = a2[5];
  result[4] = a2[4];
  result[5] = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  v5 = a2[7];
  result[6] = a2[6];
  result[7] = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  return result;
}

void __destroy_helper_block_ea8_32c80_ZTSNSt3__110shared_ptrIN3ggl15VertexDataTypedINS1_10CommonMesh10BufferPos4EEEEE48c51_ZTSNSt3__110shared_ptrIN3ggl14IndexDataTypedItEEEE(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;

  v2 = *(std::__shared_weak_count **)(a1 + 56);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = *(std::__shared_weak_count **)(a1 + 40);
    if (!v5)
      return;
  }
  else
  {
LABEL_5:
    v5 = *(std::__shared_weak_count **)(a1 + 40);
    if (!v5)
      return;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
}

void std::__shared_ptr_pointer<ggl::Drawable *,std::shared_ptr<ggl::Drawable>::__shared_ptr_default_delete<ggl::Drawable,ggl::Drawable>,std::allocator<ggl::Drawable>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_pointer<ggl::Drawable *,std::shared_ptr<ggl::Drawable>::__shared_ptr_default_delete<ggl::Drawable,ggl::Drawable>,std::allocator<ggl::Drawable>>::__on_zero_shared(uint64_t result)
{
  uint64_t *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = *(uint64_t **)(result + 24);
  if (v1)
  {
    v2 = (std::__shared_weak_count *)v1[3];
    if (v2)
    {
      p_shared_owners = (unint64_t *)&v2->__shared_owners_;
      do
        v4 = __ldaxr(p_shared_owners);
      while (__stlxr(v4 - 1, p_shared_owners));
      if (!v4)
      {
        ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
        std::__shared_weak_count::__release_weak(v2);
      }
    }
    v5 = v1[1];
    v1[1] = 0;
    if (v5)
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
    v6 = *v1;
    *v1 = 0;
    if (v6)
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
    JUMPOUT(0x1A1AF4E00);
  }
  return result;
}

uint64_t ggl::ConstantDataTyped<ggl::VSSprite::Sprite>::~ConstantDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  return a1;
}

void ggl::ConstantDataTyped<ggl::VSSprite::Sprite>::~ConstantDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::VSSprite::Sprite>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E2DA0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::VSSprite::Sprite>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E2DA0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::VSSprite::Sprite>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__shared_ptr_emplace<ggl::VSSprite::PipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E5148;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::VSSprite::PipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E5148;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<ggl::VSSprite::PipelineState>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void md::TransitLineSegment::addRibbons(unint64_t a1, _QWORD *a2, int a3, uint64x2_t *a4, uint64_t a5, _DWORD *a6)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t *v19;
  unint64_t v20;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  _QWORD *v27;
  int *v28;
  unint64_t v29;
  float *v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v37;
  uint64_t v38;
  float *v39;
  unint64_t v40;
  float *v41;
  uint64_t v42;
  float *v43;
  float v44;
  float v45;
  float v46;
  int8x8_t *v47;
  unint64_t v48;
  float32x2_t *v49;
  uint64_t v50;
  float32x2_t v51;
  float32x2_t v52;
  float32x2_t v53;
  float v54;
  float v55;
  unint64_t v56;
  unint64_t v57;
  unsigned __int8 v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  unsigned __int8 v62;
  uint64_t v63;
  uint64x2_t v64;
  uint64_t v65;
  unint64_t v66;
  int v67;
  unint64_t v68;
  unint64_t v69;
  float v70;
  uint64_t v71;
  uint64_t v72;
  float v73;
  int v74;
  uint64_t v75;
  float *v76;
  float32x2_t *v77;
  float32x2_t v78;
  float v79;
  float v80;
  float *v81;
  float v82;
  float v83;
  float v84;
  float v85;
  uint64_t v86;
  unsigned __int8 v87;
  uint64_t *v88;
  _QWORD *v89;
  uint64_t v90;
  _QWORD *v91;
  _QWORD *v92;
  uint64_t v93;
  void (***v94)(_QWORD, uint64_t);
  void (***v95)(_QWORD, uint64_t);
  unsigned __int8 v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t *v101;
  unint64_t v102;
  _QWORD *v103;
  uint64_t v104;
  uint64_t v105;
  unint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t *v110;
  uint64_t v111;
  char *v112;
  char *v113;
  unint64_t v114;
  unint64_t v115;
  unint64_t v116;
  char *v117;
  uint64_t v119;
  char *v120;
  uint64_t *v121;
  char *v122;
  uint64_t v123;
  __int128 v124;
  __int128 v125;
  uint64_t v126;
  char *v127;
  uint64_t v128;
  void (***v129)(_QWORD);
  void (***v130)(_QWORD);
  unsigned __int8 v131;
  uint64_t v132;
  unsigned __int8 v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  _QWORD *v138;
  float64x2_t v141;
  uint64_t v145;
  uint64x2_t v146;
  float32x2_t *v147;
  float *v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  void (***v152)(_QWORD);
  uint64_t v153;
  float *v154;
  uint64_t v155;
  uint64_t v156;
  unint64_t v157;
  float v158[2];
  float32x2_t v159;
  std::vector<unsigned int> __p;
  float *v161[4];

  v6 = a1;
  *(_DWORD *)(a1 + 32) = a3;
  v7 = *(_QWORD *)(*(_QWORD *)(a2[80] - 8) + 56);
  v8 = *(_QWORD *)(*(_QWORD *)(a2[80] - 8) + 64) - v7;
  if (v8)
  {
    v9 = v8 >> 3;
    if (v9 <= 1)
      v9 = 1;
    if (v9 >= 2)
    {
      v12 = 0;
      v13 = 0;
      v11 = v9 & 0xFFFFFFFFFFFFFFFELL;
      v14 = v7 + 8;
      v15 = v9 & 0xFFFFFFFFFFFFFFFELL;
      do
      {
        v12 = *(_QWORD *)(*(_QWORD *)(v14 - 8) + 16) + v12 - *(_QWORD *)(*(_QWORD *)(v14 - 8) + 8);
        v13 = *(_QWORD *)(*(_QWORD *)v14 + 16) + v13 - *(_QWORD *)(*(_QWORD *)v14 + 8);
        v14 += 16;
        v15 -= 2;
      }
      while (v15);
      v10 = v13 + v12;
      if (v9 == v11)
        goto LABEL_12;
    }
    else
    {
      v10 = 0;
      v11 = 0;
    }
    v16 = v9 - v11;
    v17 = (uint64_t *)(v7 + 8 * v11);
    do
    {
      v18 = *v17++;
      v10 = *(_QWORD *)(v18 + 16) + v10 - *(_QWORD *)(v18 + 8);
      --v16;
    }
    while (v16);
  }
  else
  {
    v10 = 0;
  }
LABEL_12:
  memset(v161, 0, 24);
  memset(&__p, 0, sizeof(__p));
  v19 = *(uint64_t **)(a1 + 8);
  if (!*(_DWORD *)(*v19 + 20))
    goto LABEL_134;
  v20 = 0;
  v138 = a2 + 79;
  __asm { FMOV            V0.2D, #0.5 }
  v141 = _Q0;
  do
  {
    v24 = v19[7];
    v157 = 0;
    v25 = geo::codec::transitLinkPoints(*v19, v20, &v157);
    v26 = v157;
    if (v157)
    {
      if (v157 >> 62)
        abort();
      v27 = (_QWORD *)v25;
      v28 = (int *)operator new(4 * v157);
      bzero(v28, 4 * v26);
      if (v26 < 2)
        goto LABEL_15;
      v150 = v10;
      v29 = v24 + 96 * v20;
      v30 = *(float **)(v6 + 8);
      v31 = *(float *)(v29 + 80);
      v32 = v30[54] - v31;
      v33 = v30[55] - v31;
      v34 = v30[56] - v31;
      v35 = v30[57] - v31;
      v154 = 0;
      v155 = 0;
      v156 = 0;
      if (v32 == v34 && v33 == v35)
      {
        v38 = 0;
        v39 = 0;
      }
      else
      {
        v37 = *(float *)(v6 + 28);
        if (vabds_f32(*(float *)(v6 + 20), v37) > 0.2)
        {
          addEasingPointsInRegion(v24 + 96 * v20, (uint64_t)&v154, v32, v33);
          v37 = *(float *)(v6 + 28);
        }
        if (vabds_f32(*(float *)(v6 + 24), v37) > 0.2)
          addEasingPointsInRegion(v24 + 96 * v20, (uint64_t)&v154, v34, v35);
        v26 = v157;
        v39 = v154;
        v38 = v155;
      }
      v40 = (v38 - (uint64_t)v39) >> 2;
      *a6 += v40;
      if (*(_BYTE *)(v29 + 32) == 2)
      {
        v41 = (float *)(v29 + 8);
        v42 = *(unsigned __int8 *)(v29 + 33);
        if (!*(_BYTE *)(a5 + v42))
        {
          v43 = (float *)&tileEdgeLinkStartNormals[v42];
          v44 = v43[1];
          v45 = (float)(*(float *)(v29 + 8) * *v43) + (float)(*(float *)(v29 + 12) * v44);
          if (v45 > 0.0)
          {
            v46 = 1.0 / v45;
            if (v46 < 4.0)
            {
              v158[0] = v46 * *v43;
              v158[1] = v46 * v44;
              v41 = v158;
            }
          }
        }
      }
      else
      {
        v47 = *(int8x8_t **)(v29 + 24);
        if (v47)
          v41 = (float *)md::TransitJunction::normalForLineSegment(v47, v6);
        else
          v41 = 0;
      }
      v148 = v41;
      v48 = v24 + 96 * v20;
      if (*(_BYTE *)(v48 + 72) == 2)
      {
        v49 = (float32x2_t *)(v48 + 48);
        v50 = *(unsigned __int8 *)(v48 + 73);
        if (!*(_BYTE *)(a5 + v50))
        {
          v51 = vneg_f32(tileEdgeLinkStartNormals[v50]);
          v52.i32[0] = v51.i32[0];
          v52.i32[1] = HIDWORD(*(_QWORD *)&tileEdgeLinkStartNormals[v50]);
          v53 = vmul_f32(*v49, v52);
          v54 = vsub_f32(v53, (float32x2_t)vdup_lane_s32((int32x2_t)v53, 1)).f32[0];
          if (v54 > 0.0)
          {
            v55 = 1.0 / v54;
            if (v55 < 4.0)
            {
              v159 = vmul_n_f32(v51, v55);
              v49 = &v159;
            }
          }
        }
      }
      else
      {
        v49 = *(float32x2_t **)(v48 + 64);
        if (v49)
          v49 = (float32x2_t *)md::TransitJunction::normalForLineSegment((int8x8_t *)v49, v6);
      }
      v147 = v49;
      v56 = *(unsigned int *)(v6 + 32);
      v57 = a4[4].u64[1];
      v145 = a4[5].i64[0];
      v146 = a4[3];
      {
        v134 = operator new();
        mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v134, "VectorKitLabels", 0x5ED09DD50000000FLL);
      }
      v59 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc
                                                                 + 16))(mdm::Allocator::instance(void)::alloc, 152, 8);
      v60 = v59;
      *(_OWORD *)(v59 + 49) = 0u;
      *(_OWORD *)(v59 + 40) = 0u;
      *(_OWORD *)(v59 + 24) = 0u;
      *(_OWORD *)(v59 + 8) = 0u;
      *(_QWORD *)v59 = off_1E42AF588;
      *(_QWORD *)(v59 + 80) = 0;
      *(_QWORD *)(v59 + 88) = 0;
      *(_QWORD *)(v59 + 72) = 0;
      v61 = v40 + v26;
      *(_QWORD *)(v59 + 56) = v61;
      if (v61)
      {
        *(_QWORD *)(v59 + 88) = v61;
        {
          v135 = operator new();
          mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v135, "VectorKitLabels", 0x5ED09DD50000000FLL);
        }
        v63 = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc
                                                                            + 16))(mdm::Allocator::instance(void)::alloc, 12 * v61, 8);
        *(_QWORD *)(v60 + 72) = v63;
        *(_BYTE *)(v60 + 64) = 1;
      }
      else
      {
        v63 = 0;
      }
      v64.i64[0] = v145 * (v56 % v57);
      v64.i64[1] = v56 / v57;
      *(_WORD *)(v60 + 96) = 0;
      *(_QWORD *)v60 = off_1E428EC50;
      *(float32x2_t *)(v60 + 100) = vcvt_f32_f64(vdivq_f64(vaddq_f64(vcvtq_f64_f32(vcvt_f32_f64(vcvtq_f64_u64(v64))), v141), vcvtq_f64_u64(v146)));
      *(_OWORD *)(v60 + 108) = xmmword_19FFB50F0;
      *(_DWORD *)(v60 + 124) = 2139095039;
      *(_WORD *)(v60 + 132) = 0;
      if (v148)
      {
        *(float *)(v60 + 136) = *v148;
        *(float *)(v60 + 140) = v148[1];
        *(_BYTE *)(v60 + 132) = 1;
      }
      v65 = v150;
      if (v147)
      {
        *(_DWORD *)(v60 + 144) = v147->i32[0];
        *(_DWORD *)(v60 + 148) = v147->i32[1];
        *(_BYTE *)(v60 + 133) = 1;
      }
      *(_WORD *)(v60 + 96) = 0;
      v66 = v24 + 96 * v20;
      *(_DWORD *)(v60 + 108) = *(_DWORD *)(v66 + 88);
      *(float *)(v60 + 112) = v32;
      *(float *)(v60 + 116) = v33;
      *(float *)(v60 + 120) = v34;
      *(float *)(v60 + 124) = v35;
      *(_DWORD *)(v60 + 128) = *(_DWORD *)(v66 + 84);
      v67 = *v28;
      *(_QWORD *)v63 = *v27;
      *(_DWORD *)(v63 + 8) = v67;
      v68 = v157;
      if (v157 >= 2)
      {
        v69 = 0;
        v70 = 0.0;
        v71 = 1;
        v72 = 1;
        do
        {
          v76 = (float *)&v27[v71];
          v77 = (float32x2_t *)&v27[v71 - 1];
          v78.f32[0] = *v76;
          v73 = v76[1];
          v79 = sqrtf((float)((float)(*v76 - v77->f32[0]) * (float)(*v76 - v77->f32[0]))+ (float)((float)(v73 - v77->f32[1]) * (float)(v73 - v77->f32[1])));
          v80 = v79 + v70;
          if (v69 < v40)
          {
            v81 = (float *)(v63 + 8 + 12 * v72);
            v82 = 1.0 / v79;
            while (1)
            {
              v83 = v39[v69];
              v78.f32[0] = *v76;
              if (v80 < v83)
                break;
              v84 = fminf(fmaxf((float)(v83 - v70) * v82, 0.0), 1.0);
              v85 = *(float *)&v28[v71 - 1] + (float)((float)(*(float *)&v28[v71] - *(float *)&v28[v71 - 1]) * v84);
              v78.f32[1] = v76[1];
              *((float32x2_t *)v81 - 1) = vmla_n_f32(*v77, vsub_f32(v78, *v77), v84);
              *v81 = v85;
              v81 += 3;
              ++v72;
              if (v40 == ++v69)
              {
                v78.f32[0] = *v76;
                v69 = v40;
                break;
              }
            }
            v73 = v76[1];
          }
          v74 = v28[v71];
          v75 = v63 + 12 * v72;
          *(_DWORD *)v75 = v78.i32[0];
          *(float *)(v75 + 4) = v73;
          *(_DWORD *)(v75 + 8) = v74;
          ++v72;
          ++v71;
          v70 = v80;
        }
        while (v71 != v68);
      }
      md::Ribbons::RibbonWriter<md::Ribbons::TransitRibbonDescriptor>::computeMeshSize(v60, v161, &__p);
      if ((unint64_t)(*(_QWORD *)(v60 + 16) + v150 - *(_QWORD *)(v60 + 8)) >= 0x10000)
      {
        v86 = operator new();
        *(_OWORD *)(v86 + 64) = 0u;
        *(_OWORD *)(v86 + 80) = 0u;
        *(_OWORD *)(v86 + 32) = 0u;
        *(_OWORD *)(v86 + 48) = 0u;
        *(_OWORD *)v86 = 0u;
        *(_OWORD *)(v86 + 16) = 0u;
        *(_BYTE *)(v86 + 48) = 1;
        *(_QWORD *)(v86 + 56) = 0;
        *(_QWORD *)(v86 + 64) = 0;
        *(_QWORD *)(v86 + 72) = 0;
        {
          v137 = operator new();
          mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v137, "VectorKitLabels", 0x5ED09DD50000000FLL);
        }
        *(_QWORD *)(v86 + 80) = mdm::Allocator::instance(void)::alloc;
        v153 = v86;
        v88 = (uint64_t *)a2[80];
        if ((unint64_t)v88 >= a2[81])
        {
          v89 = std::vector<std::unique_ptr<md::Ribbons::RibbonSection<md::Ribbons::TransitRibbonDescriptor>>>::__push_back_slow_path<std::unique_ptr<md::Ribbons::RibbonSection<md::Ribbons::TransitRibbonDescriptor>>>(v138, &v153);
          v90 = v153;
          a2[80] = v89;
          v153 = 0;
          if (v90)
          {
            v91 = *(_QWORD **)(v90 + 56);
            if (v91)
            {
              v92 = *(_QWORD **)(v90 + 64);
              v93 = *(_QWORD *)(v90 + 56);
              if (v92 != v91)
              {
                do
                {
                  v95 = (void (***)(_QWORD, uint64_t))*--v92;
                  v94 = v95;
                  *v92 = 0;
                  if (v95)
                  {
                    (**v94)(v94, v93);
                    if ((v96 & 1) == 0
                    {
                      v97 = operator new();
                      mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v97, "VectorKitLabels", 0x5ED09DD50000000FLL);
                    }
                    (*(void (**)(uint64_t, void (***)(_QWORD, uint64_t), uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc + 40))(mdm::Allocator::instance(void)::alloc, v94, 152);
                  }
                }
                while (v92 != v91);
                v93 = *(_QWORD *)(v90 + 56);
              }
              *(_QWORD *)(v90 + 64) = v91;
              (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v90 + 80) + 40))(*(_QWORD *)(v90 + 80), v93, *(_QWORD *)(v90 + 72) - v93);
            }
            MEMORY[0x1A1AF4E00](v90, 0x1020C4097AEC518);
          }
          v65 = 0;
        }
        else
        {
          v65 = 0;
          *v88 = v86;
          a2[80] = v88 + 1;
          v153 = 0;
        }
      }
      v151 = v65;
      v99 = *(_QWORD *)(v60 + 8);
      v98 = *(_QWORD *)(v60 + 16);
      v100 = *(_QWORD *)(a2[80] - 8);
      v152 = (void (***)(_QWORD))v60;
      v101 = *(uint64_t **)(v100 + 64);
      v102 = *(_QWORD *)(v100 + 72);
      if ((unint64_t)v101 < v102)
      {
        if (v101)
        {
          v152 = 0;
          *v101 = v60;
        }
        v103 = v101 + 1;
        goto LABEL_117;
      }
      v104 = *(_QWORD *)(v100 + 56);
      v105 = ((uint64_t)v101 - v104) >> 3;
      v106 = v105 + 1;
      if ((unint64_t)(v105 + 1) >> 61)
        abort();
      v107 = v102 - v104;
      if (v107 >> 2 > v106)
        v106 = v107 >> 2;
      if ((unint64_t)v107 >= 0x7FFFFFFFFFFFFFF8)
        v108 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v108 = v106;
      if (v108)
      {
        v109 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v100 + 80) + 16))(*(_QWORD *)(v100 + 80), 8 * v108, 8);
        v110 = (uint64_t *)(v109 + 8 * v105);
        v111 = v109 + 8 * v108;
        if (v109)
        {
          v152 = 0;
          *v110 = v60;
        }
      }
      else
      {
        v111 = 0;
        v110 = (uint64_t *)(8 * v105);
      }
      v103 = v110 + 1;
      v112 = *(char **)(v100 + 56);
      v113 = *(char **)(v100 + 64);
      if (v113 == v112)
      {
        *(_QWORD *)(v100 + 56) = v110;
        *(_QWORD *)(v100 + 64) = v103;
        v128 = *(_QWORD *)(v100 + 72);
        *(_QWORD *)(v100 + 72) = v111;
        if (!v113)
          goto LABEL_117;
        goto LABEL_116;
      }
      v114 = v113 - v112 - 8;
      v149 = v98;
      if (v114 > 0x57
        && ((v115 = (v112 - v113 + 7) & 0xFFFFFFFFFFFFFFF8,
             v116 = (unint64_t)&v113[v115],
             v117 = (char *)v110 + v115,
             v116 < (unint64_t)v110)
          ? (_CF = v117 >= v113)
          : (_CF = 1),
            _CF))
      {
        v119 = (v114 >> 3) + 1;
        v120 = &v113[-8 * (v119 & 0x3FFFFFFFFFFFFFFCLL)];
        v121 = v110 - 2;
        v122 = v113 - 32;
        v123 = v119 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v125 = *(_OWORD *)v122;
          v124 = *((_OWORD *)v122 + 1);
          *(_OWORD *)v122 = 0uLL;
          *((_OWORD *)v122 + 1) = 0uLL;
          v122 -= 32;
          *((_OWORD *)v121 - 1) = v125;
          *(_OWORD *)v121 = v124;
          v121 -= 4;
          v123 -= 4;
        }
        while (v123);
        v110 -= v119 & 0x3FFFFFFFFFFFFFFCLL;
        if (v119 == (v119 & 0x3FFFFFFFFFFFFFFCLL))
          goto LABEL_108;
      }
      else
      {
        v120 = *(char **)(v100 + 64);
      }
      do
      {
        v126 = *((_QWORD *)v120 - 1);
        v120 -= 8;
        *(_QWORD *)v120 = 0;
        *--v110 = v126;
      }
      while (v120 != v112);
LABEL_108:
      v113 = *(char **)(v100 + 56);
      v127 = *(char **)(v100 + 64);
      *(_QWORD *)(v100 + 56) = v110;
      *(_QWORD *)(v100 + 64) = v103;
      v128 = *(_QWORD *)(v100 + 72);
      *(_QWORD *)(v100 + 72) = v111;
      while (v127 != v113)
      {
        v130 = (void (***)(_QWORD))*((_QWORD *)v127 - 1);
        v127 -= 8;
        v129 = v130;
        *(_QWORD *)v127 = 0;
        if (v130)
        {
          (**v129)(v129);
          {
            v132 = operator new();
            mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v132, "VectorKitLabels", 0x5ED09DD50000000FLL);
          }
          (*(void (**)(uint64_t, void (***)(_QWORD), uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc
                                                                                  + 40))(mdm::Allocator::instance(void)::alloc, v129, 152);
        }
      }
      v98 = v149;
      if (!v113)
        goto LABEL_117;
LABEL_116:
      (*(void (**)(_QWORD, char *, uint64_t))(**(_QWORD **)(v100 + 80) + 40))(*(_QWORD *)(v100 + 80), v113, v128 - (_QWORD)v113);
LABEL_117:
      *(_QWORD *)(v100 + 64) = v103;
      v6 = a1;
      if (v152)
      {
        (**v152)(v152);
        {
          v136 = operator new();
          mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v136, "VectorKitLabels", 0x5ED09DD50000000FLL);
        }
        (*(void (**)(uint64_t, void (***)(_QWORD), uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc
                                                                                + 40))(mdm::Allocator::instance(void)::alloc, v152, 152);
      }
      if (v39)
        operator delete(v39);
      v10 = v98 + v151 - v99;
LABEL_15:
      operator delete(v28);
    }
    ++v20;
    v19 = *(uint64_t **)(v6 + 8);
  }
  while (v20 < *(unsigned int *)(*v19 + 20));
  if (__p.__begin_)
    operator delete(__p.__begin_);
LABEL_134:
  if (v161[0])
    operator delete(v161[0]);
}

void sub_19FA99880(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,int a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *__p)
{
  void *v35;
  uint64_t (***v36)(_QWORD);
  void *v37;
  uint64_t v38;
  mdm::Allocator *v40;
  uint64_t v41;
  void *v42;

  std::unique_ptr<md::Ribbons::RibbonSection<md::Ribbons::TransitRibbonDescriptor>>::~unique_ptr[abi:nn180100](&a28);
  v40 = (mdm::Allocator *)(**v36)(v36);
  v41 = mdm::Allocator::instance(v40);
  (*(void (**)(uint64_t, uint64_t (***)(_QWORD), uint64_t))(*(_QWORD *)v41 + 40))(v41, v36, 152);
  if (v37)
  {
    a30 = (uint64_t)v37;
    operator delete(v37);
  }
  operator delete(v35);
  if (__p)
  {
    operator delete(__p);
    v42 = *(void **)(v38 - 176);
    if (!v42)
LABEL_5:
      _Unwind_Resume(a1);
  }
  else
  {
    v42 = *(void **)(v38 - 176);
    if (!v42)
      goto LABEL_5;
  }
  operator delete(v42);
  _Unwind_Resume(a1);
}

void addEasingPointsInRegion(uint64_t a1, uint64_t a2, float a3, float a4)
{
  float v7;
  unint64_t v10;
  float *v11;
  float *v12;
  float *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  _BYTE *v19;
  float *v20;
  char *v21;
  unint64_t v22;
  uint64_t v23;
  _OWORD *v24;
  float *v25;
  uint64_t v26;
  __int128 v27;
  int v28;
  unint64_t v30;
  float *v31;
  float *v32;
  float *v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  _BYTE *v39;
  float *v40;
  char *v41;
  unint64_t v42;
  uint64_t v43;
  _OWORD *v44;
  float *v45;
  uint64_t v46;
  __int128 v47;
  int v48;

  v7 = *(float *)(a1 + 88) + -0.001;
  if (a3 > 0.001 && v7 > a3)
  {
    v11 = *(float **)(a2 + 8);
    v10 = *(_QWORD *)(a2 + 16);
    if ((unint64_t)v11 >= v10)
    {
      v13 = *(float **)a2;
      v14 = (uint64_t)v11 - *(_QWORD *)a2;
      v15 = v14 >> 2;
      v16 = (v14 >> 2) + 1;
      if (v16 >> 62)
        goto LABEL_54;
      v17 = v10 - (_QWORD)v13;
      if (v17 >> 1 > v16)
        v16 = v17 >> 1;
      if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFFCLL)
        v18 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v18 = v16;
      if (v18)
      {
        if (v18 >> 62)
          goto LABEL_55;
        v19 = operator new(4 * v18);
      }
      else
      {
        v19 = 0;
      }
      v20 = (float *)&v19[4 * v15];
      v21 = &v19[4 * v18];
      *v20 = a3;
      v12 = v20 + 1;
      if (v11 != v13)
      {
        v22 = (char *)v11 - (char *)v13 - 4;
        if (v22 < 0x2C)
          goto LABEL_58;
        if ((unint64_t)((char *)v11 - v19 - v14) < 0x20)
          goto LABEL_58;
        v23 = (v22 >> 2) + 1;
        v24 = &v19[4 * v15 - 16];
        v25 = v11 - 4;
        v26 = v23 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          v27 = *(_OWORD *)v25;
          *(v24 - 1) = *((_OWORD *)v25 - 1);
          *v24 = v27;
          v24 -= 2;
          v25 -= 8;
          v26 -= 8;
        }
        while (v26);
        v20 -= v23 & 0x7FFFFFFFFFFFFFF8;
        v11 -= v23 & 0x7FFFFFFFFFFFFFF8;
        if (v23 != (v23 & 0x7FFFFFFFFFFFFFF8))
        {
LABEL_58:
          do
          {
            v28 = *((_DWORD *)v11-- - 1);
            *((_DWORD *)v20-- - 1) = v28;
          }
          while (v11 != v13);
        }
      }
      *(_QWORD *)a2 = v20;
      *(_QWORD *)(a2 + 8) = v12;
      *(_QWORD *)(a2 + 16) = v21;
      if (v13)
        operator delete(v13);
    }
    else
    {
      *v11 = a3;
      v12 = v11 + 1;
    }
    *(_QWORD *)(a2 + 8) = v12;
    v7 = *(float *)(a1 + 88) + -0.001;
  }
  if (a4 > 0.001 && v7 > a4)
  {
    v31 = *(float **)(a2 + 8);
    v30 = *(_QWORD *)(a2 + 16);
    if ((unint64_t)v31 < v30)
    {
      *v31 = a4;
      v32 = v31 + 1;
LABEL_52:
      *(_QWORD *)(a2 + 8) = v32;
      return;
    }
    v33 = *(float **)a2;
    v34 = (uint64_t)v31 - *(_QWORD *)a2;
    v35 = v34 >> 2;
    v36 = (v34 >> 2) + 1;
    if (!(v36 >> 62))
    {
      v37 = v30 - (_QWORD)v33;
      if (v37 >> 1 > v36)
        v36 = v37 >> 1;
      if ((unint64_t)v37 >= 0x7FFFFFFFFFFFFFFCLL)
        v38 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v38 = v36;
      if (!v38)
      {
        v39 = 0;
LABEL_43:
        v40 = (float *)&v39[4 * v35];
        v41 = &v39[4 * v38];
        *v40 = a4;
        v32 = v40 + 1;
        if (v31 != v33)
        {
          v42 = (char *)v31 - (char *)v33 - 4;
          if (v42 < 0x2C)
            goto LABEL_59;
          if ((unint64_t)((char *)v31 - &v39[v34]) < 0x20)
            goto LABEL_59;
          v43 = (v42 >> 2) + 1;
          v44 = &v39[4 * v35 - 16];
          v45 = v31 - 4;
          v46 = v43 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            v47 = *(_OWORD *)v45;
            *(v44 - 1) = *((_OWORD *)v45 - 1);
            *v44 = v47;
            v44 -= 2;
            v45 -= 8;
            v46 -= 8;
          }
          while (v46);
          v40 -= v43 & 0x7FFFFFFFFFFFFFF8;
          v31 -= v43 & 0x7FFFFFFFFFFFFFF8;
          if (v43 != (v43 & 0x7FFFFFFFFFFFFFF8))
          {
LABEL_59:
            do
            {
              v48 = *((_DWORD *)v31-- - 1);
              *((_DWORD *)v40-- - 1) = v48;
            }
            while (v31 != v33);
          }
        }
        *(_QWORD *)a2 = v40;
        *(_QWORD *)(a2 + 8) = v32;
        *(_QWORD *)(a2 + 16) = v41;
        if (v33)
          operator delete(v33);
        goto LABEL_52;
      }
      if (!(v38 >> 62))
      {
        v39 = operator new(4 * v38);
        goto LABEL_43;
      }
LABEL_55:
      std::__throw_bad_array_new_length[abi:nn180100]();
    }
LABEL_54:
    abort();
  }
}

void md::Ribbons::RibbonWriter<md::Ribbons::TransitRibbonDescriptor>::computeMeshSize(uint64_t a1, float **a2, std::vector<unsigned int> *a3)
{
  unint64_t v5;
  unint64_t v6;
  float *v7;
  float *v8;
  float v9;
  uint64_t v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  unint64_t v18;
  float *v19;
  uint64_t v20;
  uint64_t v21;
  double v22;
  float v23;
  float v24;
  unint64_t v25;
  float v26;
  float v27;
  uint64_t v28;
  float *v29;
  float v30;
  float v31;
  float *v32;
  unint64_t v33;
  float v34;
  float v35;
  float v37;
  float v38;
  float v39;
  float v40;
  double v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;

  v50 = 1;
  md::Ribbons::RibbonWriter<md::Ribbons::DaVinciTrafficRibbonDescriptor>::eliminateDuplicates(a1, (uint64_t)a2, a3, (uint64_t *)&v50);
  v5 = v50;
  v6 = v50 - 2;
  if (v50 >= 2)
  {
    v7 = *a2;
    v8 = v7 + 3;
    v9 = *v7;
    v10 = 1;
    v49 = a1;
    while (1)
    {
      if (vabds_f32(*v8, v9) >= 1.0e-10)
      {
        v15 = v8[1] - v7[1];
        goto LABEL_9;
      }
      v11 = v7[1];
      v12 = v8[1];
      if (vabds_f32(v12, v11) >= 1.0e-10)
        break;
      ++v10;
      v8 += 3;
      if (v50 == v10)
      {
        v13 = 0.0;
        v14 = 1.0;
        goto LABEL_10;
      }
    }
    v15 = v12 - v11;
LABEL_9:
    v16 = *v8 - v9;
    v17 = 1.0 / sqrtf((float)(v16 * v16) + (float)(v15 * v15));
    v14 = v17 * v16;
    v13 = v17 * v15;
LABEL_10:
    v18 = v50 - 1;
    if (v50 - 1 >= 2)
    {
      v19 = v7 + 7;
      v20 = 1;
      v21 = 2;
      while (1)
      {
        v26 = v14;
        v27 = v13;
        v28 = v20 + 1;
        if (v20 + 1 < v5)
        {
          v29 = &v7[3 * v20];
          v30 = *v29;
          v31 = v29[1];
          v32 = v19;
          v33 = v6;
          while (1)
          {
            v34 = *(v32 - 1);
            v35 = vabds_f32(*v32, v31);
            if (vabds_f32(v34, v30) >= 1.0e-10 || v35 >= 1.0e-10)
              break;
            v32 += 3;
            if (!--v33)
              goto LABEL_26;
          }
          v37 = v34 - v30;
          v38 = *v32 - v31;
          v39 = 1.0 / sqrtf((float)(v37 * v37) + (float)(v38 * v38));
          v14 = v39 * v37;
          v13 = v39 * v38;
        }
LABEL_26:
        v40 = atan2f(v13, v14);
        v23 = v40 - atan2f(v27, v26);
        v41 = v23;
        if (v23 > 3.14159265)
        {
          v22 = -6.28318531;
        }
        else
        {
          if (v41 >= -3.14159265)
            goto LABEL_14;
          v22 = 6.28318531;
        }
        v23 = v41 + v22;
LABEL_14:
        v24 = fmaxf(ceilf(fabsf(v23) * 0.64377), 1.0);
        if ((unint64_t)v24 >= 2)
          v25 = 2 * (unint64_t)v24;
        else
          v25 = 2;
        v21 += v25;
        --v6;
        v19 += 3;
        v20 = v28;
        if (v28 == v18)
          goto LABEL_30;
      }
    }
    v21 = 2;
LABEL_30:
    v42 = 2;
    if (*(_BYTE *)(v49 + 96))
      v42 = 4;
    v43 = v42 + v21;
    if (*(_BYTE *)(v49 + 97))
      v43 += 2;
    if (v43 < 0x10000)
    {
      if (*(_BYTE *)(v49 + 96))
        v47 = -1;
      else
        v47 = 0;
      v48 = ((v43 + 2 * (v47 - (*(_BYTE *)(v49 + 97) != 0))) & 0xFFFFFFFFFFFFFFFELL) + *(_QWORD *)(v49 + 40);
      v44 = *(_QWORD *)(v49 + 8) + v43;
      v45 = 3 * v43 + *(_QWORD *)(v49 + 24) - 6;
      v46 = v48 - 2;
    }
    else
    {
      v44 = *(_QWORD *)(v49 + 8);
      v45 = *(_QWORD *)(v49 + 24);
      v46 = *(_QWORD *)(v49 + 40);
    }
    *(_QWORD *)(v49 + 16) = v44;
    *(_QWORD *)(v49 + 32) = v45;
    *(_QWORD *)(v49 + 48) = v46;
  }
}

void (****std::unique_ptr<md::TransitRibbon,mdm::TypeDeleter<md::TransitRibbon>>::~unique_ptr[abi:nn180100](void (****a1)(_QWORD)))(_QWORD)
{
  void (***v2)(_QWORD);
  unsigned __int8 v3;
  uint64_t v5;
  geo::read_write_lock *v6;
  const char *v7;
  malloc_zone_t *zone;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    (**v2)(v2);
    {
      v5 = operator new();
      *(_QWORD *)(v5 + 16) = 0x5ED09DD50000000FLL;
      *(_QWORD *)(v5 + 24) = "VectorKitLabels";
      *(_OWORD *)(v5 + 32) = xmmword_19FFB2E80;
      *(_QWORD *)v5 = &off_1E42B5668;
      *(_QWORD *)(v5 + 8) = "VectorKitLabels";
      *(_OWORD *)(v5 + 72) = 0u;
      *(_OWORD *)(v5 + 88) = 0u;
      *(_OWORD *)(v5 + 104) = 0u;
      *(_OWORD *)(v5 + 120) = 0u;
      *(_OWORD *)(v5 + 136) = 0u;
      *(_OWORD *)(v5 + 152) = 0u;
      *(_OWORD *)(v5 + 168) = 0u;
      *(_OWORD *)(v5 + 184) = 0u;
      *(_OWORD *)(v5 + 200) = 0u;
      *(_OWORD *)(v5 + 216) = 0u;
      *(_OWORD *)(v5 + 232) = 0u;
      *(_QWORD *)(v5 + 248) = 0;
      *(_OWORD *)(v5 + 56) = 0u;
      v6 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v5 + 56), 0);
      if ((_DWORD)v6)
        geo::read_write_lock::logFailure(v6, (uint64_t)"initialization", v7);
      zone = malloc_create_zone(0, 0);
      *(_QWORD *)(v5 + 48) = zone;
      malloc_set_zone_name(zone, "VectorKitLabels");
      *(_QWORD *)(v5 + 256) = os_log_create("com.apple.VectorKit", "Memory");
      mdm::Allocator::instance(void)::alloc = v5;
    }
    (*(void (**)(uint64_t, void (***)(_QWORD), uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc
                                                                            + 40))(mdm::Allocator::instance(void)::alloc, v2, 152);
  }
  return a1;
}

void md::TransitRibbon::~TransitRibbon(md::TransitRibbon *this)
{
  unsigned __int8 v2;
  uint64_t v3;
  geo::read_write_lock *v4;
  const char *v5;
  malloc_zone_t *zone;

  *(_QWORD *)this = off_1E42AF588;
  if (*((_BYTE *)this + 64))
  {
    {
      v3 = operator new();
      *(_QWORD *)(v3 + 16) = 0x5ED09DD50000000FLL;
      *(_QWORD *)(v3 + 24) = "VectorKitLabels";
      *(_OWORD *)(v3 + 32) = xmmword_19FFB2E80;
      *(_QWORD *)v3 = &off_1E42B5668;
      *(_QWORD *)(v3 + 8) = "VectorKitLabels";
      *(_OWORD *)(v3 + 72) = 0u;
      *(_OWORD *)(v3 + 88) = 0u;
      *(_OWORD *)(v3 + 104) = 0u;
      *(_OWORD *)(v3 + 120) = 0u;
      *(_OWORD *)(v3 + 136) = 0u;
      *(_OWORD *)(v3 + 152) = 0u;
      *(_OWORD *)(v3 + 168) = 0u;
      *(_OWORD *)(v3 + 184) = 0u;
      *(_OWORD *)(v3 + 200) = 0u;
      *(_OWORD *)(v3 + 216) = 0u;
      *(_OWORD *)(v3 + 232) = 0u;
      *(_QWORD *)(v3 + 248) = 0;
      *(_OWORD *)(v3 + 56) = 0u;
      v4 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v3 + 56), 0);
      if ((_DWORD)v4)
        geo::read_write_lock::logFailure(v4, (uint64_t)"initialization", v5);
      zone = malloc_create_zone(0, 0);
      *(_QWORD *)(v3 + 48) = zone;
      malloc_set_zone_name(zone, "VectorKitLabels");
      *(_QWORD *)(v3 + 256) = os_log_create("com.apple.VectorKit", "Memory");
      mdm::Allocator::instance(void)::alloc = v3;
    }
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)mdm::Allocator::instance(void)::alloc + 40))(mdm::Allocator::instance(void)::alloc, *((_QWORD *)this + 9), 0);
  }
}

{
  unsigned __int8 v2;
  uint64_t v3;
  geo::read_write_lock *v4;
  const char *v5;
  malloc_zone_t *zone;

  *(_QWORD *)this = off_1E42AF588;
  if (*((_BYTE *)this + 64))
  {
    {
      v3 = operator new();
      *(_QWORD *)(v3 + 16) = 0x5ED09DD50000000FLL;
      *(_QWORD *)(v3 + 24) = "VectorKitLabels";
      *(_OWORD *)(v3 + 32) = xmmword_19FFB2E80;
      *(_QWORD *)v3 = &off_1E42B5668;
      *(_QWORD *)(v3 + 8) = "VectorKitLabels";
      *(_OWORD *)(v3 + 72) = 0u;
      *(_OWORD *)(v3 + 88) = 0u;
      *(_OWORD *)(v3 + 104) = 0u;
      *(_OWORD *)(v3 + 120) = 0u;
      *(_OWORD *)(v3 + 136) = 0u;
      *(_OWORD *)(v3 + 152) = 0u;
      *(_OWORD *)(v3 + 168) = 0u;
      *(_OWORD *)(v3 + 184) = 0u;
      *(_OWORD *)(v3 + 200) = 0u;
      *(_OWORD *)(v3 + 216) = 0u;
      *(_OWORD *)(v3 + 232) = 0u;
      *(_QWORD *)(v3 + 248) = 0;
      *(_OWORD *)(v3 + 56) = 0u;
      v4 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v3 + 56), 0);
      if ((_DWORD)v4)
        geo::read_write_lock::logFailure(v4, (uint64_t)"initialization", v5);
      zone = malloc_create_zone(0, 0);
      *(_QWORD *)(v3 + 48) = zone;
      malloc_set_zone_name(zone, "VectorKitLabels");
      *(_QWORD *)(v3 + 256) = os_log_create("com.apple.VectorKit", "Memory");
      mdm::Allocator::instance(void)::alloc = v3;
    }
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)mdm::Allocator::instance(void)::alloc + 40))(mdm::Allocator::instance(void)::alloc, *((_QWORD *)this + 9), 0);
  }
  JUMPOUT(0x1A1AF4E00);
}

id md::TransitLineSegment::debugString(md::TransitLineSegment *this)
{
  void *v2;
  _QWORD *v3;
  _QWORD *v4;
  int LineDirection;
  uint64_t v6;

  objc_msgSend(MEMORY[0x1E0CB37A0], "string");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "appendFormat:", CFSTR("Mergetype=%i, mergedIndex=%i\n"), *((unsigned __int8 *)this + 52), *((unsigned int *)this + 10));
  objc_msgSend(v2, "appendFormat:", CFSTR("Offsets: Start=%.1f Middle=%.1f End=%.1f\n"), *((float *)this + 5), *((float *)this + 7), *((float *)this + 6));
  v3 = geo::codec::transitLinkGetFromNodeID(**((_QWORD **)this + 1), *((unsigned int *)this + 9));
  v4 = geo::codec::transitLinkGetToNodeID(**((_QWORD **)this + 1), *((unsigned int *)this + 9));
  LineDirection = geo::codec::transitLinkGetLineDirection(**((_QWORD ***)this + 1), *((unsigned int *)this + 9));
  if (LineDirection == 1)
    LODWORD(v6) = 80;
  else
    LODWORD(v6) = 66;
  if (LineDirection == 2)
    v6 = 78;
  else
    v6 = v6;
  objc_msgSend(v2, "appendFormat:", CFSTR("NodeID From=%llu To=%llu Dir=%c\n"), v3, v4, v6);
  return v2;
}

void sub_19FA9A44C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void ggl::FlyoverRoad::DefaultMesh::~DefaultMesh(ggl::FlyoverRoad::DefaultMesh *this)
{
  ggl::Mesh::~Mesh(this);
  JUMPOUT(0x1A1AF4E00);
}

void `non-virtual thunk to'ggl::FlyoverRoad::DefaultMesh::~DefaultMesh(ggl::FlyoverRoad::DefaultMesh *this)
{
  ggl::Mesh::~Mesh((ggl::FlyoverRoad::DefaultMesh *)((char *)this - 16));
}

{
  ggl::Mesh::~Mesh((ggl::FlyoverRoad::DefaultMesh *)((char *)this - 16));
  JUMPOUT(0x1A1AF4E00);
}

void ggl::MeshTyped<ggl::FlyoverRoad::Default>::~MeshTyped(ggl::Mesh *a1)
{
  ggl::Mesh::~Mesh(a1);
  JUMPOUT(0x1A1AF4E00);
}

void `non-virtual thunk to'ggl::MeshTyped<ggl::FlyoverRoad::Default>::~MeshTyped(uint64_t a1)
{
  ggl::Mesh::~Mesh((ggl::Mesh *)(a1 - 16));
}

{
  ggl::Mesh::~Mesh((ggl::Mesh *)(a1 - 16));
  JUMPOUT(0x1A1AF4E00);
}

void md::PolygonSection::initialize(uint64_t a1, _QWORD *a2, unint64_t a3)
{
  _QWORD *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  BOOL v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  BOOL v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  std::vector<unsigned int>::value_type __x;
  unint64_t v21;

  v21 = 0;
  v5 = geo::codec::multiSectionFeaturePoints(a2, a3, &v21);
  v6 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 8) = v5;
  v7 = v21;
  *(_QWORD *)(a1 + 88) = v21;
  v8 = (*(_QWORD *)(a1 + 24) - v6) >> 3;
  v9 = v7 >= v8;
  v10 = v7 - v8;
  if (v10 != 0 && v9)
  {
    std::vector<gm::Matrix<float,2,1>>::__append(a1 + 16, v10);
    v7 = *(_QWORD *)(a1 + 88);
  }
  else if (!v9)
  {
    *(_QWORD *)(a1 + 24) = v6 + 8 * v7;
  }
  v11 = *(_QWORD *)(a1 + 40);
  v12 = (*(_QWORD *)(a1 + 48) - v11) >> 3;
  v13 = v7 >= v12;
  v14 = v7 - v12;
  if (v14 != 0 && v13)
  {
    std::vector<gm::Matrix<float,2,1>>::__append(a1 + 40, v14);
    v7 = *(_QWORD *)(a1 + 88);
  }
  else if (!v13)
  {
    *(_QWORD *)(a1 + 48) = v11 + 8 * v7;
  }
  std::vector<BOOL>::resize(a1 + 64, v7);
  v15 = a2[5];
  *(_QWORD *)(a1 + 96) = v21;
  *(_QWORD *)(a1 + 104) = v15;
  v16 = *(_QWORD *)(a1 + 112);
  v17 = *(_QWORD *)(a1 + 120);
  v18 = *(_QWORD *)(a1 + 88);
  __x = 0;
  v19 = (v17 - v16) >> 2;
  if (v18 <= v19)
  {
    if (v18 < v19)
      *(_QWORD *)(a1 + 120) = v16 + 4 * v18;
  }
  else
  {
    std::vector<unsigned int>::__append((std::vector<unsigned int> *)(a1 + 112), v18 - v19, &__x);
  }
}

void md::PolygonSection::calculateTangentVectors(_QWORD *a1, _QWORD *a2, uint64_t a3, uint64_t a4, double a5, __n128 a6, __n128 a7)
{
  char *CharacteristicPointsForSection;
  unint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  unint64_t v15;
  int v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  float32x2_t v26;
  float32x2_t v27;
  float32x2_t v28;
  float32x2_t *GhostPoint;
  float32x2_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  NSObject *v36;
  float32x2_t v37;
  float32x2_t v38;
  NSObject *v39;
  _DWORD *v40;
  _DWORD *v41;
  float32x2_t *v42;
  __n128 v45;
  __n128 v46;
  uint8_t v47[16];
  uint8_t buf[8];
  unint64_t v49;

  if (a2)
  {
    v49 = 0;
    CharacteristicPointsForSection = geo::codec::polygonFeatureGetCharacteristicPointsForSection(a2, a4, (uint64_t *)&v49);
    if (CharacteristicPointsForSection)
    {
      a1[12] = 0;
      if (a1[11])
      {
        v9 = 0;
        v10 = 0;
        while (1)
        {
          v13 = v10 >> 6;
          if (v9 >= v49)
            break;
          v14 = &CharacteristicPointsForSection[100 * v9 + 12];
          v15 = v9;
          while (1)
          {
            v16 = *(_DWORD *)v14;
            v14 += 100;
            if (v10 == v16)
              break;
            if (v49 == ++v15)
              goto LABEL_12;
          }
          v11 = (_QWORD *)(a1[8] + 8 * v13);
          v12 = 1 << v10;
          if (!CharacteristicPointsForSection[100 * v15 + 28])
            goto LABEL_13;
          *v11 |= v12;
LABEL_7:
          ++v10;
          v9 = v15;
          if (v10 >= a1[11])
            goto LABEL_14;
        }
LABEL_12:
        v11 = (_QWORD *)(a1[8] + 8 * v13);
        v12 = 1 << v10;
        v15 = v9;
LABEL_13:
        *v11 &= ~v12;
        ++a1[12];
        goto LABEL_7;
      }
    }
  }
LABEL_14:
  v17 = a1[11];
  if (v17)
  {
    v18 = 0;
    v19 = a1[12];
    v20 = 4;
    v21 = a1[11];
    while (1)
    {
      v22 = (v21 + v18 - 1) % v21;
      v23 = v18 + 1;
      if (v18 + 1 == v21)
        v24 = 0;
      else
        v24 = v18 + 1;
      if (v19 == v17)
        goto LABEL_21;
      v31 = a1[8];
      v32 = *(_QWORD *)(v31 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8));
      v33 = *(_QWORD *)(v31 + ((v22 >> 3) & 0x1FFFFFFFFFFFFFF8)) & (1 << v22);
      v34 = v32 & (1 << v18);
      if (v34 || !v33)
        break;
      GhostPoint = (float32x2_t *)geo::codec::multiSectionFeatureGetGhostPoint(a3, a4, v18);
      if (!GhostPoint)
        goto LABEL_21;
      v35 = a1[1];
      v27 = *(float32x2_t *)(v35 + 8 * v18);
      v28 = vsub_f32(*(float32x2_t *)(v35 + 8 * v24), v27);
LABEL_23:
      v30 = *GhostPoint;
      a6.n128_u64[0] = (unint64_t)vmul_f32(v28, v28);
      a6.n128_f32[0] = sqrtf(vaddv_f32((float32x2_t)a6.n128_u64[0]));
      v46 = a6;
      if (a6.n128_f32[0] <= 0.00000011921)
      {
        if (GEOGetVectorKitVKDefaultLog_onceToken != -1)
          dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_4_11772);
        v36 = (id)GEOGetVectorKitVKDefaultLog_log;
        if (os_log_type_enabled(v36, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_19F029000, v36, OS_LOG_TYPE_ERROR, "Zero Length edge on polygon boundary", buf, 2u);
        }

      }
      else
      {
        *(float32x2_t *)(a1[2] + 8 * v18) = vdiv_f32(v28, (float32x2_t)vdup_lane_s32((int32x2_t)a6.n128_u64[0], 0));
      }
      v37 = vsub_f32(v27, v30);
      a7.n128_f32[0] = sqrtf(vaddv_f32(vmul_f32(v37, v37)));
      if (a7.n128_f32[0] <= 0.00000011921)
      {
        v45 = a7;
        if (GEOGetVectorKitVKDefaultLog_onceToken != -1)
          dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_4_11772);
        v39 = (id)GEOGetVectorKitVKDefaultLog_log;
        if (os_log_type_enabled(v39, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)v47 = 0;
          _os_log_impl(&dword_19F029000, v39, OS_LOG_TYPE_ERROR, "Zero Length edge on polygon boundary", v47, 2u);
        }

        a7 = v45;
        v38 = (float32x2_t)0x3F80000000000000;
        if (v46.n128_f32[0] > 0.00000011921)
          goto LABEL_43;
      }
      else
      {
        v38 = vdiv_f32(v37, (float32x2_t)vdup_lane_s32((int32x2_t)a7.n128_u64[0], 0));
        *(float32x2_t *)(a1[5] + 8 * v18) = v38;
        a6.n128_u64[1] = v46.n128_u64[1];
        if (v46.n128_f32[0] > 0.00000011921)
          goto LABEL_43;
      }
      *(float32x2_t *)(a1[2] + 8 * v18) = v38;
LABEL_43:
      if (a7.n128_f32[0] <= 0.00000011921)
      {
        v40 = (_DWORD *)(a1[2] + v20);
        v41 = (_DWORD *)(a1[5] + v20);
        *(v41 - 1) = *(v40 - 1);
        *v41 = *v40;
      }
      v21 = a1[11];
      v20 += 8;
      ++v18;
      if (v23 >= v21)
        return;
    }
    if (v34 && !v33 && (v42 = (float32x2_t *)geo::codec::multiSectionFeatureGetGhostPoint(a3, a4, v18)) != 0)
    {
      v25 = a1[1];
      v26 = *v42;
    }
    else
    {
LABEL_21:
      v25 = a1[1];
      v26 = *(float32x2_t *)(v25 + 8 * v24);
    }
    v27 = *(float32x2_t *)(v25 + 8 * v18);
    v28 = vsub_f32(v26, v27);
    GhostPoint = (float32x2_t *)(v25 + 8 * v22);
    goto LABEL_23;
  }
}

uint64_t md::PolygonSection::PolygonSection(uint64_t a1, _QWORD *a2, unint64_t a3)
{
  double v6;
  __n128 v7;
  __n128 v8;

  *(_QWORD *)a1 = &off_1E428FC30;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_DWORD *)(a1 + 136) = 0;
  md::PolygonSection::initialize(a1, a2, a3);
  md::PolygonSection::calculateTangentVectors((_QWORD *)a1, 0, (uint64_t)a2, a3, v6, v7, v8);
  return a1;
}

void sub_19FA9AA4C(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  v3 = (void *)v1[14];
  if (v3)
  {
    v1[15] = v3;
    operator delete(v3);
    v4 = (void *)v1[8];
    if (!v4)
    {
LABEL_3:
      v5 = (void *)v1[5];
      if (!v5)
        goto LABEL_4;
      goto LABEL_8;
    }
  }
  else
  {
    v4 = (void *)v1[8];
    if (!v4)
      goto LABEL_3;
  }
  operator delete(v4);
  v5 = (void *)v1[5];
  if (!v5)
  {
LABEL_4:
    v6 = (void *)v1[2];
    if (!v6)
      goto LABEL_5;
    goto LABEL_9;
  }
LABEL_8:
  v1[6] = v5;
  operator delete(v5);
  v6 = (void *)v1[2];
  if (!v6)
LABEL_5:
    _Unwind_Resume(exception_object);
LABEL_9:
  v1[3] = v6;
  operator delete(v6);
  _Unwind_Resume(exception_object);
}

_QWORD *md::PolygonSection::PolygonSection(uint64_t a1, _QWORD *a2, unint64_t a3)
{
  uint64_t v3;
  _QWORD *v5;
  double v6;
  __n128 v7;
  __n128 v8;
  unint64_t v9;
  _QWORD *v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unsigned int v14;
  uint64_t **v15;
  uint64_t **v16;
  uint64_t **v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t **v20;
  unsigned int v21;
  uint64_t *v22;
  unsigned int v23;
  _DWORD *v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  char *v29;
  unsigned int v30;
  unsigned int *v31;
  unsigned int v32;
  unint64_t v33;
  int v34;
  uint64_t **v35;
  uint64_t **v36;
  uint64_t *v37;
  unsigned int v38;
  uint64_t *v39;
  uint64_t *v40;
  BOOL v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  _BYTE *v45;
  int v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t *v52;
  uint64_t v53;
  unsigned int v54;
  unint64_t v56;
  unint64_t v57;
  uint64_t **v58;
  uint64_t **v59;
  uint64_t *v60;
  unsigned int v61;
  _DWORD *v62;
  uint64_t *v63;
  uint64_t v64;
  unint64_t v65;
  unsigned int v66;
  char v67;
  char *StrokeSpecifications;
  _QWORD *v69;
  _QWORD *v70;
  uint64_t *v71;
  uint64_t v72;
  unint64_t v73;

  v3 = a3;
  v5 = (_QWORD *)a1;
  *(_QWORD *)a1 = &off_1E428FC30;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_DWORD *)(a1 + 136) = 0;
  md::PolygonSection::initialize(a1, a2, a3);
  md::PolygonSection::calculateTangentVectors(v5, a2, (uint64_t)a2, v3, v6, v7, v8);
  v73 = 0;
  StrokeSpecifications = geo::codec::polygonFeatureGetStrokeSpecifications(a2, (uint64_t *)&v73);
  v9 = v73;
  if (!v73)
    return v5;
  v71 = 0;
  v72 = 0;
  v10 = operator new(0x28uLL);
  v11 = 0;
  *v10 = 0;
  v10[1] = 0;
  v10[2] = &v71;
  v70 = v10;
  v71 = v10;
  v12 = 1;
  *((_BYTE *)v10 + 24) = 1;
  v72 = 1;
  *((_DWORD *)v10 + 7) = 0;
  *((_DWORD *)v10 + 8) = 0;
  do
  {
    v13 = v9;
    v14 = *(_DWORD *)&StrokeSpecifications[16 * v11 + 12];
    v15 = &v71;
    v16 = &v71;
    if (v71)
    {
      v17 = &v71;
      v18 = v71;
      do
      {
        v19 = v18;
        v20 = v17;
        v21 = *((_DWORD *)v18 + 7);
        if (v21 >= v14)
          v17 = (uint64_t **)v18;
        else
          ++v18;
        v18 = (uint64_t *)*v18;
      }
      while (v18);
      if (v17 != &v71)
      {
        if (v21 < v14)
          v19 = (uint64_t *)v20;
        if (v14 >= *((_DWORD *)v19 + 7))
        {
          v9 = v13;
          goto LABEL_4;
        }
      }
      v22 = v71;
      while (1)
      {
        while (1)
        {
          v16 = (uint64_t **)v22;
          v23 = *((_DWORD *)v22 + 7);
          if (v14 >= v23)
            break;
          v22 = *v16;
          v15 = v16;
          if (!*v16)
            goto LABEL_21;
        }
        if (v23 >= v14)
          break;
        v22 = v16[1];
        if (!v22)
        {
          v15 = v16 + 1;
          goto LABEL_21;
        }
      }
      v26 = v12;
      v24 = v16;
      v9 = v13;
    }
    else
    {
LABEL_21:
      v24 = operator new(0x28uLL);
      v24[7] = v14;
      v24[8] = 0;
      *(_QWORD *)v24 = 0;
      *((_QWORD *)v24 + 1) = 0;
      *((_QWORD *)v24 + 2) = v16;
      *v15 = (uint64_t *)v24;
      v25 = (uint64_t *)v24;
      if (*v70)
      {
        v70 = (_QWORD *)*v70;
        v25 = *v15;
      }
      std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(v71, v25);
      v9 = v73;
      v26 = ++v72;
    }
    v24[8] = v12;
    v12 = v26;
LABEL_4:
    ++v11;
  }
  while (v11 < v9);
  if (v9)
  {
    v69 = v5;
    v27 = 0;
    v28 = 0;
    v66 = 0;
    v67 = 1;
    v64 = v3;
    do
    {
      v29 = &StrokeSpecifications[16 * v27];
      if (*((_DWORD *)v29 + 1) == v3)
      {
        v32 = *((_DWORD *)v29 + 2);
        v31 = (unsigned int *)(v29 + 8);
        v30 = v32;
        if ((v67 & 1) != 0)
        {
          v28 = *(_DWORD *)&StrokeSpecifications[16 * v27 + 12];
          v66 = v30;
        }
        else if (v66 < v30)
        {
          v65 = v9;
          v33 = v66;
          do
          {
            v35 = &v71;
            v36 = &v71;
            if (v71)
            {
              v37 = v71;
              while (1)
              {
                while (1)
                {
                  v36 = (uint64_t **)v37;
                  v38 = *((_DWORD *)v37 + 7);
                  if (v28 >= v38)
                    break;
                  v37 = *v36;
                  v35 = v36;
                  if (!*v36)
                    goto LABEL_46;
                }
                if (v38 >= v28)
                  break;
                v37 = v36[1];
                if (!v37)
                {
                  v35 = v36 + 1;
                  goto LABEL_46;
                }
              }
              v34 = *((_DWORD *)v36 + 8);
            }
            else
            {
LABEL_46:
              v39 = (uint64_t *)operator new(0x28uLL);
              *((_DWORD *)v39 + 7) = v28;
              *((_DWORD *)v39 + 8) = 0;
              *v39 = 0;
              v39[1] = 0;
              v39[2] = (uint64_t)v36;
              *v35 = v39;
              if (*v70)
              {
                v70 = (_QWORD *)*v70;
                v39 = *v35;
              }
              v40 = v71;
              v41 = v39 == v71;
              *((_BYTE *)v39 + 24) = v39 == v71;
              if (!v41)
              {
                do
                {
                  v42 = v39[2];
                  if (*(_BYTE *)(v42 + 24))
                    break;
                  v43 = *(uint64_t **)(v42 + 16);
                  v44 = *v43;
                  if (*v43 == v42)
                  {
                    v47 = v43[1];
                    if (!v47 || (v48 = *(unsigned __int8 *)(v47 + 24), v45 = (_BYTE *)(v47 + 24), v48))
                    {
                      if (*(uint64_t **)v42 == v39)
                      {
                        v49 = v39[2];
                      }
                      else
                      {
                        v49 = *(_QWORD *)(v42 + 8);
                        v50 = *(_QWORD *)v49;
                        *(_QWORD *)(v42 + 8) = *(_QWORD *)v49;
                        if (v50)
                        {
                          *(_QWORD *)(v50 + 16) = v42;
                          v43 = *(uint64_t **)(v42 + 16);
                        }
                        *(_QWORD *)(v49 + 16) = v43;
                        *(_QWORD *)(*(_QWORD *)(v42 + 16) + 8 * (**(_QWORD **)(v42 + 16) != v42)) = v49;
                        *(_QWORD *)v49 = v42;
                        *(_QWORD *)(v42 + 16) = v49;
                        v43 = *(uint64_t **)(v49 + 16);
                        v42 = *v43;
                      }
                      *(_BYTE *)(v49 + 24) = 1;
                      *((_BYTE *)v43 + 24) = 0;
                      v53 = *(_QWORD *)(v42 + 8);
                      *v43 = v53;
                      if (v53)
                        *(_QWORD *)(v53 + 16) = v43;
                      *(_QWORD *)(v42 + 16) = v43[2];
                      *(_QWORD *)(v43[2] + 8 * (*(_QWORD *)v43[2] != (_QWORD)v43)) = v42;
                      *(_QWORD *)(v42 + 8) = v43;
                      goto LABEL_36;
                    }
                  }
                  else if (!v44 || (v46 = *(unsigned __int8 *)(v44 + 24), v45 = (_BYTE *)(v44 + 24), v46))
                  {
                    if (*(uint64_t **)v42 == v39)
                    {
                      v51 = v39[1];
                      *(_QWORD *)v42 = v51;
                      if (v51)
                      {
                        *(_QWORD *)(v51 + 16) = v42;
                        v43 = *(uint64_t **)(v42 + 16);
                      }
                      v39[2] = (uint64_t)v43;
                      *(_QWORD *)(*(_QWORD *)(v42 + 16) + 8 * (**(_QWORD **)(v42 + 16) != v42)) = v39;
                      v39[1] = v42;
                      *(_QWORD *)(v42 + 16) = v39;
                      v43 = (uint64_t *)v39[2];
                    }
                    else
                    {
                      v39 = (uint64_t *)v39[2];
                    }
                    *((_BYTE *)v39 + 24) = 1;
                    *((_BYTE *)v43 + 24) = 0;
                    v42 = v43[1];
                    v52 = *(uint64_t **)v42;
                    v43[1] = *(_QWORD *)v42;
                    if (v52)
                      v52[2] = (uint64_t)v43;
                    *(_QWORD *)(v42 + 16) = v43[2];
                    *(_QWORD *)(v43[2] + 8 * (*(_QWORD *)v43[2] != (_QWORD)v43)) = v42;
                    *(_QWORD *)v42 = v43;
LABEL_36:
                    v43[2] = v42;
                    break;
                  }
                  *(_BYTE *)(v42 + 24) = 1;
                  v39 = v43;
                  *((_BYTE *)v43 + 24) = v43 == v40;
                  *v45 = 1;
                }
                while (v43 != v40);
              }
              v34 = 0;
              v72 = ++v12;
            }
            *(_DWORD *)(v69[14] + 4 * v33++) = v34;
          }
          while (v33 < *v31);
          v3 = v64;
          v9 = v65;
        }
        v67 ^= 1u;
      }
      ++v27;
    }
    while (v27 != v9);
    v5 = v69;
    v54 = v66;
    if ((v67 & 1) == 0)
    {
      v56 = v66;
      v57 = v69[11];
      while (v57 > v56)
      {
        v58 = &v71;
        v59 = &v71;
        if (v71)
        {
          v60 = v71;
          while (1)
          {
            while (1)
            {
              v59 = (uint64_t **)v60;
              v61 = *((_DWORD *)v60 + 7);
              if (v28 >= v61)
                break;
              v60 = *v59;
              v58 = v59;
              if (!*v59)
                goto LABEL_90;
            }
            if (v61 >= v28)
              break;
            v60 = v59[1];
            if (!v60)
            {
              v58 = v59 + 1;
              goto LABEL_90;
            }
          }
          v62 = v59;
        }
        else
        {
LABEL_90:
          v62 = operator new(0x28uLL);
          v62[7] = v28;
          v62[8] = 0;
          *(_QWORD *)v62 = 0;
          *((_QWORD *)v62 + 1) = 0;
          *((_QWORD *)v62 + 2) = v59;
          *v58 = (uint64_t *)v62;
          v63 = (uint64_t *)v62;
          if (*v70)
          {
            v70 = (_QWORD *)*v70;
            v63 = *v58;
          }
          std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(v71, v63);
          ++v72;
          v57 = v69[11];
        }
        *(_DWORD *)(v69[14] + 4 * v56) = v62[8];
        v56 = ++v54;
      }
    }
  }
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(v71);
  return v5;
}

void sub_19FA9B058(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(0);
  v3 = (void *)v1[14];
  if (v3)
  {
    v1[15] = v3;
    operator delete(v3);
  }
  v4 = (void *)v1[8];
  if (v4)
    operator delete(v4);
  v5 = (void *)v1[5];
  if (v5)
  {
    v1[6] = v5;
    operator delete(v5);
    v6 = (void *)v1[2];
    if (!v6)
LABEL_7:
      _Unwind_Resume(a1);
  }
  else
  {
    v6 = (void *)v1[2];
    if (!v6)
      goto LABEL_7;
  }
  v1[3] = v6;
  operator delete(v6);
  _Unwind_Resume(a1);
}

void md::BorderLabelPart::~BorderLabelPart(md::BorderLabelPart *this)
{
  unsigned __int8 v2;
  uint64_t v3;
  geo::read_write_lock *v4;
  const char *v5;
  malloc_zone_t *zone;

  md::CompositeLabelPart::~CompositeLabelPart(this);
  {
    v3 = operator new();
    *(_QWORD *)(v3 + 16) = 0x5ED09DD50000000FLL;
    *(_QWORD *)(v3 + 24) = "VectorKitLabels";
    *(_OWORD *)(v3 + 32) = xmmword_19FFB2E80;
    *(_QWORD *)v3 = &off_1E42B5668;
    *(_QWORD *)(v3 + 8) = "VectorKitLabels";
    *(_OWORD *)(v3 + 72) = 0u;
    *(_OWORD *)(v3 + 88) = 0u;
    *(_OWORD *)(v3 + 104) = 0u;
    *(_OWORD *)(v3 + 120) = 0u;
    *(_OWORD *)(v3 + 136) = 0u;
    *(_OWORD *)(v3 + 152) = 0u;
    *(_OWORD *)(v3 + 168) = 0u;
    *(_OWORD *)(v3 + 184) = 0u;
    *(_OWORD *)(v3 + 200) = 0u;
    *(_OWORD *)(v3 + 216) = 0u;
    *(_OWORD *)(v3 + 232) = 0u;
    *(_QWORD *)(v3 + 248) = 0;
    *(_OWORD *)(v3 + 56) = 0u;
    v4 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v3 + 56), 0);
    if ((_DWORD)v4)
      geo::read_write_lock::logFailure(v4, (uint64_t)"initialization", v5);
    zone = malloc_create_zone(0, 0);
    *(_QWORD *)(v3 + 48) = zone;
    malloc_set_zone_name(zone, "VectorKitLabels");
    *(_QWORD *)(v3 + 256) = os_log_create("com.apple.VectorKit", "Memory");
    mdm::Allocator::instance(void)::alloc = v3;
  }
  (*(void (**)(uint64_t, md::BorderLabelPart *, uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc
                                                                  + 40))(mdm::Allocator::instance(void)::alloc, this, 632);
}

char *md::BorderLabelPart::populateDebugNode(md::BorderLabelPart *this, gdc::DebugTreeNode *a2)
{
  char *result;
  uint64_t *v5;
  uint64_t *i;
  uint64_t v7;
  __int128 v8;
  char v9;

  v9 = 15;
  strcpy((char *)&v8, "BorderLabelPart");
  result = gdc::DebugTreeNode::createChildNode((uint64_t)a2, &v8);
  v5 = (uint64_t *)*((_QWORD *)this + 72);
  for (i = (uint64_t *)*((_QWORD *)this + 73);
        v5 != i;
        result = (char *)(*(uint64_t (**)(uint64_t, gdc::DebugTreeNode *))(*(_QWORD *)v7 + 800))(v7, a2))
  {
    v7 = *v5++;
  }
  return result;
}

void md::BorderLabelPart::debugCompositeClassName(char *a1@<X8>)
{
  a1[23] = 6;
  strcpy(a1, "Border");
}

md::BorderLabelPart *md::BorderLabelPart::BorderLabelPart(md::BorderLabelPart *this, md::TextLabelPart *a2, md::TextLabelPart *a3)
{
  float *v5;
  unsigned __int8 v6;
  int v8;
  uint64_t v9;
  md::TextLabelPart *v10;

  *((_DWORD *)this + 2) = 1065353216;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = this;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((_QWORD *)this + 8) = 0;
  *(_OWORD *)((char *)this + 72) = xmmword_19FFB2E30;
  *((_QWORD *)this + 11) = 1065353216;
  *((_DWORD *)this + 24) = 1065353216;
  *(_OWORD *)((char *)this + 100) = 0u;
  *((_DWORD *)this + 29) = 0;
  *(_OWORD *)((char *)this + 120) = xmmword_19FFB2E30;
  *(_OWORD *)((char *)this + 136) = xmmword_19FFB2E30;
  *(_OWORD *)((char *)this + 152) = xmmword_19FFB2E30;
  *(_OWORD *)((char *)this + 168) = xmmword_19FFB3480;
  *((_BYTE *)this + 224) = 0;
  *((_BYTE *)this + 200) = 0;
  *(_OWORD *)((char *)this + 184) = 0u;
  *(_OWORD *)((char *)this + 257) = 0u;
  *(_OWORD *)((char *)this + 248) = 0u;
  *(_OWORD *)((char *)this + 232) = 0u;
  *(_OWORD *)((char *)this + 280) = xmmword_19FFB3580;
  *(_OWORD *)((char *)this + 296) = xmmword_19FFB3590;
  *(_OWORD *)((char *)this + 312) = xmmword_19FFB2E30;
  *((_QWORD *)this + 41) = 1065353216;
  *((_DWORD *)this + 84) = 1065353216;
  *((_DWORD *)this + 89) = 0;
  *(_OWORD *)((char *)this + 340) = 0u;
  *(_OWORD *)((char *)this + 360) = xmmword_19FFB2E30;
  *(_OWORD *)((char *)this + 376) = xmmword_19FFB2E30;
  *(_OWORD *)((char *)this + 392) = xmmword_19FFB2E30;
  *(_OWORD *)((char *)this + 408) = xmmword_19FFB3480;
  *((_BYTE *)this + 464) = 0;
  *(_OWORD *)((char *)this + 424) = 0u;
  *((_BYTE *)this + 440) = 0;
  *(_OWORD *)((char *)this + 497) = 0u;
  *(_OWORD *)((char *)this + 472) = 0u;
  *(_OWORD *)((char *)this + 488) = 0u;
  *(_OWORD *)((char *)this + 520) = xmmword_19FFB3580;
  *((_DWORD *)this + 134) = 1065353216;
  *(_OWORD *)((char *)this + 540) = 0u;
  *((_WORD *)this + 278) = 512;
  *((_BYTE *)this + 562) = 0;
  *(_DWORD *)((char *)this + 558) = 0;
  *(_WORD *)((char *)this + 563) = -1;
  *(_DWORD *)((char *)this + 565) = 0;
  *(_QWORD *)this = off_1E4294028;
  *((_OWORD *)this + 36) = 0u;
  *((_QWORD *)this + 74) = 0;
  v5 = &md::SignedDistanceFieldGenerator::_hypotCache[32438];
  if ((v6 & 1) == 0)
  {
    v10 = a2;
    v5 = md::SignedDistanceFieldGenerator::_hypotCache + 129752;
    a2 = v10;
    if (v8)
    {
      v9 = operator new();
      mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v9, "VectorKitLabels", 0x5ED09DD50000000FLL);
      v5 = md::SignedDistanceFieldGenerator::_hypotCache + 129752;
      a2 = v10;
    }
  }
  *((_QWORD *)this + 75) = *((_QWORD *)v5 + 299);
  *((_BYTE *)this + 608) = 0;
  *((_BYTE *)this + 616) = 0;
  *((_WORD *)this + 314) = 1;
  *((_BYTE *)this + 630) = 0;
  *(_QWORD *)this = off_1E42901A8;
  md::CompositeLabelPart::addLabelPart((uint64_t)this, a2);
  md::CompositeLabelPart::addLabelPart((uint64_t)this, a3);
  return this;
}

void sub_19FA9B4D0(_Unwind_Exception *a1)
{
  md::CompositeLabelPart *v1;

  md::CompositeLabelPart::~CompositeLabelPart(v1);
  _Unwind_Resume(a1);
}

void md::TileSelectionLogic::~TileSelectionLogic(md::TileSelectionLogic *this)
{
  md::TileSelectionLogic::~TileSelectionLogic(this);
  JUMPOUT(0x1A1AF4E00);
}

{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  md::TileSelectionLogic *v5;
  uint64_t v6;
  md::TileSelectionLogic *v7;
  uint64_t v8;
  void *v9;
  void *v10;
  _QWORD *v11;
  _QWORD *v12;
  void *v13;

  *(_QWORD *)this = &off_1E4296590;
  v2 = (_QWORD *)*((_QWORD *)this + 52);
  *((_QWORD *)this + 52) = 0;
  if (v2)
  {
    v3 = (_QWORD *)v2[3];
    if (v3 == v2)
    {
      v4 = 4;
      v3 = v2;
    }
    else
    {
      if (!v3)
      {
LABEL_7:
        MEMORY[0x1A1AF4E00](v2, 0x1020C40E2194266);
        goto LABEL_8;
      }
      v4 = 5;
    }
    (*(void (**)(void))(*v3 + 8 * v4))();
    goto LABEL_7;
  }
LABEL_8:
  if (!*((_BYTE *)this + 408))
    goto LABEL_14;
  v5 = (md::TileSelectionLogic *)*((_QWORD *)this + 50);
  if (v5 == (md::TileSelectionLogic *)((char *)this + 376))
  {
    v6 = 4;
    v5 = (md::TileSelectionLogic *)((char *)this + 376);
  }
  else
  {
    if (!v5)
      goto LABEL_14;
    v6 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v5 + 8 * v6))();
LABEL_14:
  if (!*((_BYTE *)this + 368))
    goto LABEL_20;
  v7 = (md::TileSelectionLogic *)*((_QWORD *)this + 45);
  if (v7 == (md::TileSelectionLogic *)((char *)this + 336))
  {
    v8 = 4;
    v7 = (md::TileSelectionLogic *)((char *)this + 336);
  }
  else
  {
    if (!v7)
      goto LABEL_20;
    v8 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v7 + 8 * v8))();
LABEL_20:
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((_QWORD **)this + 37));
  v9 = (void *)*((_QWORD *)this + 33);
  if (v9)
  {
    *((_QWORD *)this + 34) = v9;
    operator delete(v9);
  }
  v10 = (void *)*((_QWORD *)this + 30);
  if (v10)
  {
    *((_QWORD *)this + 31) = v10;
    operator delete(v10);
  }
  v11 = (_QWORD *)*((_QWORD *)this + 27);
  if (v11)
  {
    do
    {
      v12 = (_QWORD *)*v11;
      operator delete(v11);
      v11 = v12;
    }
    while (v12);
  }
  v13 = (void *)*((_QWORD *)this + 25);
  *((_QWORD *)this + 25) = 0;
  if (v13)
    operator delete(v13);
  std::array<std::unique_ptr<gdc::TileSelector>,9ul>::~array((uint64_t *)this + 16);
  *(_QWORD *)this = off_1E42AFC70;
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((_QWORD **)this + 13));
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((_QWORD **)this + 10));
}

void md::TileSelectionLogic::didBecomeInactive(md::TileSelectionLogic *this)
{
  char *v2;

  v2 = (char *)this + 296;
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((_QWORD **)this + 37));
  *((_QWORD *)this + 37) = 0;
  *((_QWORD *)this + 38) = 0;
  *((_QWORD *)this + 36) = v2;
}

void md::TileSelectionLogic::createDebugNode(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  char *v6;
  uint64_t v7;
  void **v8;
  void **v9;
  void *v10;
  void **v11;
  void **v12;
  void *v13;
  void **v14;
  void **v15;
  void *v16;
  void **v17;
  void *v18[2];
  char v19;
  void *v20;
  char v21;
  void **v22;
  void *__p;
  void **v24;

  strcpy((char *)a3, "TileSelectionLogic");
  *(_WORD *)(a3 + 23) = 18;
  *(_OWORD *)(a3 + 47) = 0u;
  *(_OWORD *)(a3 + 63) = 0u;
  *(_OWORD *)(a3 + 79) = 0u;
  *(_BYTE *)(a3 + 95) = 0;
  v5 = a1 + 128;
  v6 = (char *)&md::TileSelectionTileSetTypeList;
  do
  {
    v7 = *(_QWORD *)(v5 + 8 * *(unsigned __int16 *)v6);
    if (!v7)
      goto LABEL_2;
    (*(void (**)(void **__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v7 + 24))(v18, v7, a2);
    gdc::DebugTreeNode::addChildNode((_QWORD *)a3, (__int128 *)v18);
    v8 = (void **)__p;
    if (__p)
    {
      v9 = v24;
      v10 = __p;
      if (v24 != __p)
      {
        do
        {
          v11 = (void **)*(v9 - 3);
          if (v11)
          {
            v12 = (void **)*(v9 - 2);
            v13 = *(v9 - 3);
            if (v12 != v11)
            {
              do
              {
                if (*((char *)v12 - 1) < 0)
                  operator delete(*(v12 - 3));
                v12 -= 3;
              }
              while (v12 != v11);
              v13 = *(v9 - 3);
            }
            *(v9 - 2) = v11;
            operator delete(v13);
          }
          v14 = (void **)*(v9 - 6);
          if (v14)
          {
            v15 = (void **)*(v9 - 5);
            v16 = *(v9 - 6);
            if (v15 != v14)
            {
              do
              {
                if (*((char *)v15 - 9) < 0)
                  operator delete(*(v15 - 4));
                v15 -= 8;
              }
              while (v15 != v14);
              v16 = *(v9 - 6);
            }
            *(v9 - 5) = v14;
            operator delete(v16);
          }
          v17 = v9 - 10;
          if (*((char *)v9 - 57) < 0)
            operator delete(*v17);
          v9 -= 10;
        }
        while (v17 != v8);
        v10 = __p;
      }
      v24 = v8;
      operator delete(v10);
    }
    std::vector<gdc::DebugTreeNode>::~vector[abi:nn180100](&v22);
    if (v21 < 0)
    {
      operator delete(v20);
      if ((v19 & 0x80000000) == 0)
        goto LABEL_2;
    }
    else if ((v19 & 0x80000000) == 0)
    {
      goto LABEL_2;
    }
    operator delete(v18[0]);
LABEL_2:
    v6 += 2;
  }
  while (v6 != &md::MapEngineSettingList);
}

void sub_19FA9B740(_Unwind_Exception *a1)
{
  gdc::DebugTreeNode *v1;

  gdc::DebugTreeNode::~DebugTreeNode(v1);
  _Unwind_Resume(a1);
}

void md::Logic<md::TileSelectionLogic,md::TileSelectionContext,md::LogicDependencies<gdc::TypeList<md::CameraContext,md::ElevationContext,md::StyleLogicContext>,gdc::TypeList<>>>::_allocateContext(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  uint64_t v5;
  void *v6;
  int64_t v7;
  char *v8;
  char *v9;
  void *v10;
  int64_t v11;
  char *v12;
  char *v13;
  _QWORD *v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  unint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  unint64_t v23;
  void *v24;
  void *v25;
  void *v26;
  _BYTE *v27;
  void *v28;
  _BYTE *v29;
  void *v30;
  unint64_t v31;
  void *v32;
  uint64_t v33;
  int v34;
  void *__p;
  unint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  int v39;
  __int128 v40;
  char v41;

  v4 = (_QWORD *)operator new();
  (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)a1 + 112))(&v26, a1);
  v5 = operator new();
  *(_QWORD *)v5 = 0;
  *(_QWORD *)(v5 + 8) = 0;
  *(_QWORD *)(v5 + 16) = 0;
  v6 = v26;
  v7 = v27 - (_BYTE *)v26;
  if (v27 != v26)
  {
    if (v7 < 0)
      abort();
    v8 = (char *)operator new(v27 - (_BYTE *)v26);
    *(_QWORD *)v5 = v8;
    *(_QWORD *)(v5 + 8) = v8;
    v9 = &v8[2 * (v7 >> 1)];
    *(_QWORD *)(v5 + 16) = v9;
    memcpy(v8, v6, v7);
    *(_QWORD *)(v5 + 8) = v9;
  }
  *(_QWORD *)(v5 + 24) = 0;
  *(_QWORD *)(v5 + 32) = 0;
  *(_QWORD *)(v5 + 40) = 0;
  v10 = v28;
  v11 = v29 - (_BYTE *)v28;
  if (v29 != v28)
  {
    if (v11 < 0)
      abort();
    v12 = (char *)operator new(v29 - (_BYTE *)v28);
    *(_QWORD *)(v5 + 24) = v12;
    *(_QWORD *)(v5 + 32) = v12;
    v13 = &v12[2 * (v11 >> 1)];
    *(_QWORD *)(v5 + 40) = v13;
    memcpy(v12, v10, v11);
    *(_QWORD *)(v5 + 32) = v13;
  }
  v14 = v30;
  v15 = v31;
  v30 = 0;
  v31 = 0;
  v17 = v32;
  v16 = v33;
  *(_QWORD *)(v5 + 64) = v32;
  *(_QWORD *)(v5 + 48) = v14;
  *(_QWORD *)(v5 + 56) = v15;
  *(_QWORD *)(v5 + 72) = v16;
  *(_DWORD *)(v5 + 80) = v34;
  if (v16)
  {
    v18 = v17[1];
    if ((v15 & (v15 - 1)) != 0)
    {
      if (v18 >= v15)
        v18 %= v15;
    }
    else
    {
      v18 &= v15 - 1;
    }
    v14[v18] = v5 + 64;
    v32 = 0;
    v33 = 0;
  }
  v19 = __p;
  v20 = v36;
  v21 = v37;
  v22 = v38;
  *(_QWORD *)(v5 + 104) = v37;
  __p = 0;
  v36 = 0;
  *(_QWORD *)(v5 + 88) = v19;
  *(_QWORD *)(v5 + 96) = v20;
  *(_QWORD *)(v5 + 112) = v22;
  *(_DWORD *)(v5 + 120) = v39;
  if (v22)
  {
    v23 = v21[1];
    if ((v20 & (v20 - 1)) != 0)
    {
      if (v23 >= v20)
        v23 %= v20;
    }
    else
    {
      v23 &= v20 - 1;
    }
    v21 = 0;
    v19[v23] = v5 + 104;
    v37 = 0;
    v38 = 0;
  }
  *(_OWORD *)(v5 + 128) = v40;
  *(_BYTE *)(v5 + 144) = v41;
  v4[2] = "md::TileSelectionContext]";
  v4[3] = 24;
  v4[4] = v5;
  *v4 = &off_1E42B1090;
  v4[1] = 0x64780CBD71DF7CF5;
  *a2 = v4;
  std::__hash_table<std::__hash_value_type<md::TileSelectionTileSetType,gdc::TileSelectionResults>,std::__unordered_map_hasher<md::TileSelectionTileSetType,std::__hash_value_type<md::TileSelectionTileSetType,gdc::TileSelectionResults>,std::hash<md::TileSelectionTileSetType>,std::equal_to<md::TileSelectionTileSetType>,true>,std::__unordered_map_equal<md::TileSelectionTileSetType,std::__hash_value_type<md::TileSelectionTileSetType,gdc::TileSelectionResults>,std::equal_to<md::TileSelectionTileSetType>,std::hash<md::TileSelectionTileSetType>,true>,std::allocator<std::__hash_value_type<md::TileSelectionTileSetType,gdc::TileSelectionResults>>>::__deallocate_node(v21);
  v24 = __p;
  __p = 0;
  if (v24)
    operator delete(v24);
  std::__hash_table<std::__hash_value_type<md::TileSelectionTileSetType,gdc::TileSelectionResults>,std::__unordered_map_hasher<md::TileSelectionTileSetType,std::__hash_value_type<md::TileSelectionTileSetType,gdc::TileSelectionResults>,std::hash<md::TileSelectionTileSetType>,std::equal_to<md::TileSelectionTileSetType>,true>,std::__unordered_map_equal<md::TileSelectionTileSetType,std::__hash_value_type<md::TileSelectionTileSetType,gdc::TileSelectionResults>,std::equal_to<md::TileSelectionTileSetType>,std::hash<md::TileSelectionTileSetType>,true>,std::allocator<std::__hash_value_type<md::TileSelectionTileSetType,gdc::TileSelectionResults>>>::__deallocate_node(v32);
  v25 = v30;
  v30 = 0;
  if (v25)
    operator delete(v25);
  if (v28)
  {
    v29 = v28;
    operator delete(v28);
  }
  if (v26)
  {
    v27 = v26;
    operator delete(v26);
  }
}

void sub_19FA9B9B8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  md::TileSelectionContext::~TileSelectionContext((md::TileSelectionContext *)va);
  MEMORY[0x1A1AF4E00](v2, 0x10F1C40B0038B9CLL);
  _Unwind_Resume(a1);
}

uint64_t md::Logic<md::TileSelectionLogic,md::TileSelectionContext,md::LogicDependencies<gdc::TypeList<md::CameraContext,md::ElevationContext,md::StyleLogicContext>,gdc::TypeList<>>>::_runBeforeLayoutAtVariableRate(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  _QWORD v6[4];

  if (*(_QWORD *)(a3 + 8) == 0x64780CBD71DF7CF5)
  {
    v3 = *(_QWORD *)(a3 + 32);
    if (v3)
    {
      v5 = result;
      md::LogicDependencies<gdc::TypeList<md::CameraContext,md::ElevationContext,md::StyleLogicContext>,gdc::TypeList<>>::buildRequiredTuple<md::CameraContext,md::ElevationContext,md::StyleLogicContext>(v6, **(_QWORD **)(a2 + 8), *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8));
      return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD *, uint64_t))(*(_QWORD *)v5 + 128))(v5, a2, v6, v3);
    }
  }
  return result;
}

uint64_t md::Logic<md::TileSelectionLogic,md::TileSelectionContext,md::LogicDependencies<gdc::TypeList<md::CameraContext,md::ElevationContext,md::StyleLogicContext>,gdc::TypeList<>>>::_runAfterLayoutAtVariableRate(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  _QWORD v6[4];

  if (*(_QWORD *)(a3 + 8) == 0x64780CBD71DF7CF5)
  {
    v3 = *(_QWORD *)(a3 + 32);
    if (v3)
    {
      v5 = result;
      md::LogicDependencies<gdc::TypeList<md::CameraContext,md::ElevationContext,md::StyleLogicContext>,gdc::TypeList<>>::buildRequiredTuple<md::CameraContext,md::ElevationContext,md::StyleLogicContext>(v6, **(_QWORD **)(a2 + 8), *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8));
      return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD *, uint64_t))(*(_QWORD *)v5 + 136))(v5, a2, v6, v3);
    }
  }
  return result;
}

uint64_t md::Logic<md::TileSelectionLogic,md::TileSelectionContext,md::LogicDependencies<gdc::TypeList<md::CameraContext,md::ElevationContext,md::StyleLogicContext>,gdc::TypeList<>>>::_runBeforeLayout(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  _QWORD v6[4];

  if (*(_QWORD *)(a3 + 8) == 0x64780CBD71DF7CF5)
  {
    v3 = *(_QWORD *)(a3 + 32);
    if (v3)
    {
      v5 = result;
      md::LogicDependencies<gdc::TypeList<md::CameraContext,md::ElevationContext,md::StyleLogicContext>,gdc::TypeList<>>::buildRequiredTuple<md::CameraContext,md::ElevationContext,md::StyleLogicContext>(v6, **(_QWORD **)(a2 + 8), *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8));
      return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD *, uint64_t))(*(_QWORD *)v5 + 144))(v5, a2, v6, v3);
    }
  }
  return result;
}

uint64_t md::Logic<md::TileSelectionLogic,md::TileSelectionContext,md::LogicDependencies<gdc::TypeList<md::CameraContext,md::ElevationContext,md::StyleLogicContext>,gdc::TypeList<>>>::_runAfterLayout(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  _QWORD v6[4];

  if (*(_QWORD *)(a3 + 8) == 0x64780CBD71DF7CF5)
  {
    v3 = *(_QWORD *)(a3 + 32);
    if (v3)
    {
      v5 = result;
      md::LogicDependencies<gdc::TypeList<md::CameraContext,md::ElevationContext,md::StyleLogicContext>,gdc::TypeList<>>::buildRequiredTuple<md::CameraContext,md::ElevationContext,md::StyleLogicContext>(v6, **(_QWORD **)(a2 + 8), *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8));
      return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD *, uint64_t))(*(_QWORD *)v5 + 152))(v5, a2, v6, v3);
    }
  }
  return result;
}

uint64_t md::Logic<md::TileSelectionLogic,md::TileSelectionContext,md::LogicDependencies<gdc::TypeList<md::CameraContext,md::ElevationContext,md::StyleLogicContext>,gdc::TypeList<>>>::_debugConsoleString@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _BYTE *a4@<X8>)
{
  uint64_t v4;
  uint64_t v6;
  _QWORD v7[4];

  if (*(_QWORD *)(a3 + 8) == 0x64780CBD71DF7CF5 && (v4 = *(_QWORD *)(a3 + 32)) != 0)
  {
    v6 = result;
    md::LogicDependencies<gdc::TypeList<md::CameraContext,md::ElevationContext,md::StyleLogicContext>,gdc::TypeList<>>::buildRequiredTuple<md::CameraContext,md::ElevationContext,md::StyleLogicContext>(v7, **(_QWORD **)(a2 + 8), *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8));
    return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD *, uint64_t))(*(_QWORD *)v6 + 160))(v6, a2, v7, v4);
  }
  else
  {
    a4[23] = 0;
    *a4 = 0;
  }
  return result;
}

double md::Logic<md::TileSelectionLogic,md::TileSelectionContext,md::LogicDependencies<gdc::TypeList<md::CameraContext,md::ElevationContext,md::StyleLogicContext>,gdc::TypeList<>>>::allocateContext@<D0>(uint64_t a1@<X8>)
{
  double result;

  result = 0.0;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_QWORD *)(a1 + 144) = 0;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 80) = 1065353216;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_DWORD *)(a1 + 120) = 1065353216;
  *(_BYTE *)(a1 + 136) = 0;
  return result;
}

uint64_t md::Logic<md::TileSelectionLogic,md::TileSelectionContext,md::LogicDependencies<gdc::TypeList<md::CameraContext,md::ElevationContext,md::StyleLogicContext>,gdc::TypeList<>>>::frequency(uint64_t a1)
{
  return *(_QWORD *)(a1 + 64);
}

_QWORD *md::TileSelectionLogic::runBeforeLayoutAtVariableRate(uint64_t a1, md::LayoutContext *a2, uint64_t *a3, uint64_t a4)
{
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  unsigned __int8 v18;
  uint64_t v19;
  unsigned __int8 v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *p_shared_owners;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unsigned __int8 v27;
  uint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  float v32;
  unint64_t v33;
  double v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  _QWORD *v45;
  BOOL v46;
  _QWORD *result;
  uint64_t v48;
  int v49[2];
  _QWORD v50[3];
  _QWORD *v51;
  _QWORD v52[3];
  _QWORD *v53;
  _QWORD v54[3];
  _QWORD *v55;
  uint64_t v56;

  v56 = *MEMORY[0x1E0C80C00];
  v52[0] = &off_1E42CF500;
  v52[1] = a2;
  v53 = v52;
  v50[0] = &off_1E42CF548;
  v50[1] = a2;
  v51 = v50;
  v55 = v54;
  v54[0] = &off_1E42CF548;
  v54[1] = a2;
  _ZNSt3__110__function6__funcIZN2md18TileSelectionLogic29runBeforeLayoutAtVariableRateERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_13CameraContextENS2_16ElevationContextENS2_17StyleLogicContextEEEENS9_IJEEEEE20ResolvedDependenciesERNS2_20TileSelectionContextEE3__0NS_9allocatorISL_EEFvvEEclEv((uint64_t)v52);
  v8 = v51;
  if (v51 == v50)
  {
    v9 = 4;
    v8 = v50;
  }
  else
  {
    if (!v51)
      goto LABEL_6;
    v9 = 5;
  }
  (*(void (**)(void))(*v8 + 8 * v9))();
LABEL_6:
  v10 = v53;
  if (v53 == v52)
  {
    v11 = 4;
    v10 = v52;
  }
  else
  {
    if (!v53)
      goto LABEL_11;
    v11 = 5;
  }
  (*(void (**)(void))(*v10 + 8 * v11))();
LABEL_11:
  v12 = *a3;
  v13 = a3[1];
  v14 = (_BYTE *)a3[2];
  *(_BYTE *)(a4 + 128) = 0;
  if (v14[82])
  {
    *(_QWORD *)v49 = v12;
    v15 = *(_QWORD **)(a1 + 288);
    v16 = (_QWORD *)(a1 + 296);
    if (v15 != (_QWORD *)(a1 + 296))
    {
      do
      {
        if (*((_BYTE *)v15 + 25))
        {
          if (*((_BYTE *)v15 + 25) != 5)
            goto LABEL_60;
          v17 = *(_QWORD *)v14;
          if (!*(_QWORD *)v14)
            goto LABEL_60;
        }
        else
        {
          *(_BYTE *)(a4 + 128) = 1;
          v17 = *(_QWORD *)v14;
          if (!*(_QWORD *)v14)
            goto LABEL_60;
        }
        v18 = atomic_load((unsigned __int8 *)(*(_QWORD *)(v17 + 16) + 2784));
        if ((v18 & 1) != 0)
        {
          v19 = *(_QWORD *)(*(_QWORD *)v14 + 16);
          if (v19)
          {
            v20 = atomic_load((unsigned __int8 *)(v19 + 2784));
            if ((v20 & 1) == 0)
              std::__assoc_sub_state::wait(*(std::__assoc_sub_state **)(v19 + 2808));
            v21 = *(_QWORD *)(v19 + 120);
            v22 = *(std::__shared_weak_count **)(v19 + 128);
            if (!v22)
              goto LABEL_29;
            p_shared_owners = (unint64_t *)&v22->__shared_owners_;
            do
              v24 = __ldxr(p_shared_owners);
            while (__stxr(v24 + 1, p_shared_owners));
            do
              v25 = __ldaxr(p_shared_owners);
            while (__stlxr(v25 - 1, p_shared_owners));
            if (!v25)
            {
              ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
              std::__shared_weak_count::__release_weak(v22);
              if (v21)
              {
LABEL_30:
                v26 = *(_QWORD *)(*(_QWORD *)v14 + 16);
                v27 = atomic_load((unsigned __int8 *)(v26 + 2784));
                if ((v27 & 1) == 0)
                  std::__assoc_sub_state::wait(*(std::__assoc_sub_state **)(v26 + 2808));
                v28 = *(_QWORD *)(v26 + 120);
                v29 = *(std::__shared_weak_count **)(v26 + 128);
                if (v29)
                {
                  v30 = (unint64_t *)&v29->__shared_owners_;
                  do
                    v31 = __ldxr(v30);
                  while (__stxr(v31 + 1, v30));
                  v32 = -*(float *)(v28 + 208);
                  do
                    v33 = __ldaxr(v30);
                  while (__stlxr(v33 - 1, v30));
                  if (!v33)
                  {
                    ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
                    std::__shared_weak_count::__release_weak(v29);
                  }
                }
                else
                {
                  v32 = -*(float *)(v28 + 208);
                }
                v34 = v32;
                v35 = *(_QWORD *)(a1 + 128);
                if (v35)
                  *(double *)(v35 + 16) = v34;
                v36 = *(_QWORD *)(a1 + 136);
                if (v36)
                  *(double *)(v36 + 16) = v34;
                v37 = *(_QWORD *)(a1 + 144);
                if (v37)
                  *(double *)(v37 + 16) = v34;
                v38 = *(_QWORD *)(a1 + 152);
                if (v38)
                  *(double *)(v38 + 16) = v34;
                v39 = *(_QWORD *)(a1 + 160);
                if (v39)
                  *(double *)(v39 + 16) = v34;
                v40 = *(_QWORD *)(a1 + 168);
                if (v40)
                  *(double *)(v40 + 16) = v34;
                v41 = *(_QWORD *)(a1 + 176);
                if (v41)
                  *(double *)(v41 + 16) = v34;
                v42 = *(_QWORD *)(a1 + 184);
                if (v42)
                  *(double *)(v42 + 16) = v34;
                v43 = *(_QWORD *)(a1 + 192);
                if (v43)
                  *(double *)(v43 + 16) = v34;
              }
            }
            else
            {
LABEL_29:
              if (v21)
                goto LABEL_30;
            }
          }
        }
LABEL_60:
        v44 = (_QWORD *)v15[1];
        if (v44)
        {
          do
          {
            v45 = v44;
            v44 = (_QWORD *)*v44;
          }
          while (v44);
        }
        else
        {
          do
          {
            v45 = (_QWORD *)v15[2];
            v46 = *v45 == (_QWORD)v15;
            v15 = v45;
          }
          while (!v46);
        }
        v15 = v45;
      }
      while (v45 != v16);
    }
    std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(_QWORD **)(a1 + 296));
    *(_QWORD *)(a1 + 296) = 0;
    *(_QWORD *)(a1 + 304) = 0;
    *(_QWORD *)(a1 + 288) = v16;
    v12 = *(_QWORD *)v49;
  }
  *(_BYTE *)(a1 + 316) = *(_BYTE *)v13;
  *(_DWORD *)(a1 + 320) = *(_DWORD *)(v13 + 20);
  *(_BYTE *)(a4 + 129) = *(_BYTE *)(a1 + 328);
  md::TileSelectionLogic::processActiveTileSelection(a1, a1 + 240, (uint64_t *)(a4 + 88), v12, a4, a2, v14);
  if (!v55)
  {
    std::__throw_bad_function_call[abi:nn180100]();
    __break(1u);
  }
  (*(void (**)(_QWORD *))(*v55 + 48))(v55);
  result = v55;
  if (v55 == v54)
  {
    v48 = 4;
    result = v54;
  }
  else
  {
    if (!v55)
      return result;
    v48 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v48))();
}

void sub_19FA9C0A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_list va;

  va_start(va, a10);
  geo::ScopedFunctions::~ScopedFunctions((geo::ScopedFunctions *)va);
  _Unwind_Resume(a1);
}

void sub_19FA9C13C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,char *a21)
{
  char *v22;
  uint64_t v23;

  v22 = a21;
  if (a21 == &a18)
  {
    v23 = 4;
    v22 = &a18;
  }
  else
  {
    if (!a21)
      goto LABEL_6;
    v23 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v22 + 8 * v23))();
LABEL_6:
  _Unwind_Resume(a1);
}

_QWORD *md::TileSelectionLogic::runBeforeLayout(_QWORD *a1, md::LayoutContext *a2, uint64_t *a3, uint64_t a4)
{
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t i;
  uint64_t v20;
  uint64_t j;
  _BYTE *v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  BOOL v26;
  unint64_t v27;
  _BYTE *v28;
  _BYTE *v29;
  unint64_t v30;
  unint64_t v31;
  BOOL v32;
  unint64_t v33;
  _BYTE *v34;
  _QWORD *result;
  uint64_t v36;
  char v37;
  _QWORD v38[3];
  _QWORD *v39;
  _QWORD v40[3];
  _QWORD *v41;
  _QWORD v42[3];
  _QWORD *v43;
  _QWORD v44[3];
  _QWORD *v45;
  uint64_t v46;

  v46 = *MEMORY[0x1E0C80C00];
  v42[0] = &off_1E42CF398;
  v42[1] = a2;
  v43 = v42;
  v40[0] = &off_1E42CF3E0;
  v40[1] = a2;
  v41 = v40;
  v45 = v44;
  v44[0] = &off_1E42CF3E0;
  v44[1] = a2;
  _ZNSt3__110__function6__funcIZN2md18TileSelectionLogic15runBeforeLayoutERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_13CameraContextENS2_16ElevationContextENS2_17StyleLogicContextEEEENS9_IJEEEEE20ResolvedDependenciesERNS2_20TileSelectionContextEE3__0NS_9allocatorISL_EEFvvEEclEv((uint64_t)v42);
  v8 = v41;
  if (v41 == v40)
  {
    v9 = 4;
    v8 = v40;
  }
  else
  {
    if (!v41)
      goto LABEL_6;
    v9 = 5;
  }
  (*(void (**)(void))(*v8 + 8 * v9))();
LABEL_6:
  v10 = v43;
  if (v43 == v42)
  {
    v11 = 4;
    v10 = v42;
  }
  else
  {
    if (!v43)
      goto LABEL_11;
    v11 = 5;
  }
  (*(void (**)(void))(*v10 + 8 * v11))();
LABEL_11:
  v12 = *a3;
  v13 = a3[2];
  if (!*(_BYTE *)(v13 + 82))
    goto LABEL_21;
  v38[0] = &off_1E42CF428;
  v38[1] = a1;
  v14 = v38;
  v39 = v38;
  v15 = *(char **)(v13 + 48);
  v16 = *(char **)(v13 + 56);
  if (v15 == v16)
  {
    v17 = 4;
  }
  else
  {
    do
    {
      v37 = *v15;
      if (!v39)
        goto LABEL_54;
      (*(void (**)(_QWORD *, char *))(*v39 + 48))(v39, &v37);
      ++v15;
    }
    while (v15 != v16);
    v14 = v39;
    if (v39 == v38)
    {
      v17 = 4;
      v14 = v38;
    }
    else
    {
      if (!v39)
        goto LABEL_21;
      v17 = 5;
    }
  }
  (*(void (**)(void))(*v14 + 8 * v17))();
LABEL_21:
  if (*(_QWORD *)(a4 + 112))
  {
    std::__hash_table<std::__hash_value_type<md::TileSelectionTileSetType,gdc::TileSelectionResults>,std::__unordered_map_hasher<md::TileSelectionTileSetType,std::__hash_value_type<md::TileSelectionTileSetType,gdc::TileSelectionResults>,std::hash<md::TileSelectionTileSetType>,std::equal_to<md::TileSelectionTileSetType>,true>,std::__unordered_map_equal<md::TileSelectionTileSetType,std::__hash_value_type<md::TileSelectionTileSetType,gdc::TileSelectionResults>,std::equal_to<md::TileSelectionTileSetType>,std::hash<md::TileSelectionTileSetType>,true>,std::allocator<std::__hash_value_type<md::TileSelectionTileSetType,gdc::TileSelectionResults>>>::__deallocate_node(*(_QWORD **)(a4 + 104));
    *(_QWORD *)(a4 + 104) = 0;
    v18 = *(_QWORD *)(a4 + 96);
    if (v18)
    {
      for (i = 0; i != v18; ++i)
        *(_QWORD *)(*(_QWORD *)(a4 + 88) + 8 * i) = 0;
    }
    *(_QWORD *)(a4 + 112) = 0;
  }
  if (*(_QWORD *)(a4 + 72))
  {
    std::__hash_table<std::__hash_value_type<md::TileSelectionTileSetType,gdc::TileSelectionResults>,std::__unordered_map_hasher<md::TileSelectionTileSetType,std::__hash_value_type<md::TileSelectionTileSetType,gdc::TileSelectionResults>,std::hash<md::TileSelectionTileSetType>,std::equal_to<md::TileSelectionTileSetType>,true>,std::__unordered_map_equal<md::TileSelectionTileSetType,std::__hash_value_type<md::TileSelectionTileSetType,gdc::TileSelectionResults>,std::equal_to<md::TileSelectionTileSetType>,std::hash<md::TileSelectionTileSetType>,true>,std::allocator<std::__hash_value_type<md::TileSelectionTileSetType,gdc::TileSelectionResults>>>::__deallocate_node(*(_QWORD **)(a4 + 64));
    *(_QWORD *)(a4 + 64) = 0;
    v20 = *(_QWORD *)(a4 + 56);
    if (v20)
    {
      for (j = 0; j != v20; ++j)
        *(_QWORD *)(*(_QWORD *)(a4 + 48) + 8 * j) = 0;
    }
    *(_QWORD *)(a4 + 72) = 0;
  }
  if ((_QWORD *)(a4 + 24) != a1 + 33)
  {
    v22 = (_BYTE *)a1[33];
    v23 = (uint64_t)(a1[34] - (_QWORD)v22) >> 1;
    v24 = *(_QWORD *)(a4 + 24);
    v25 = (*(_QWORD *)(a4 + 32) - v24) >> 1;
    v26 = v23 >= v25;
    v27 = v23 - v25;
    if (v27 != 0 && v26)
    {
      std::vector<md::TileSelectionTileSetType>::__append(a4 + 24, v27);
      v22 = (_BYTE *)a1[33];
    }
    else if (!v26)
    {
      *(_QWORD *)(a4 + 32) = v24 + 2 * v23;
    }
    v28 = (_BYTE *)a1[34];
    if (v28 != v22)
      memmove(*(void **)(a4 + 24), v22, v28 - v22);
  }
  if (a1 + 30 != (_QWORD *)a4)
  {
    v29 = (_BYTE *)a1[30];
    v30 = (uint64_t)(a1[31] - (_QWORD)v29) >> 1;
    v31 = (uint64_t)(*(_QWORD *)(a4 + 8) - *(_QWORD *)a4) >> 1;
    v32 = v30 >= v31;
    v33 = v30 - v31;
    if (v33 != 0 && v32)
    {
      std::vector<md::TileSelectionTileSetType>::__append(a4, v33);
      v29 = (_BYTE *)a1[30];
    }
    else if (!v32)
    {
      *(_QWORD *)(a4 + 8) = *(_QWORD *)a4 + 2 * v30;
    }
    v34 = (_BYTE *)a1[31];
    if (v34 != v29)
      memmove(*(void **)a4, v29, v34 - v29);
  }
  md::TileSelectionLogic::processActiveTileSelection((uint64_t)a1, (unint64_t)(a1 + 33), (uint64_t *)(a4 + 48), v12, a4, a2, (_BYTE *)v13);
  if (!v45)
  {
LABEL_54:
    std::__throw_bad_function_call[abi:nn180100]();
    __break(1u);
  }
  (*(void (**)(_QWORD *))(*v45 + 48))(v45);
  result = v45;
  if (v45 == v44)
  {
    v36 = 4;
    result = v44;
  }
  else
  {
    if (!v45)
      return result;
    v36 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v36))();
}

void sub_19FA9C4C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, char *a17, char a18, uint64_t a19, uint64_t a20,char *a21,char a22,uint64_t a23,uint64_t a24,char *a25)
{
  char *v25;
  char *v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;

  v27 = a25;
  if (a25 == v25)
  {
    v28 = 4;
    v27 = &a22;
  }
  else
  {
    if (!a25)
      goto LABEL_6;
    v28 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v27 + 8 * v28))();
LABEL_6:
  v29 = a17;
  if (a17 == &a14)
  {
    v30 = 4;
    v29 = &a14;
  }
  else
  {
    if (!a17)
      goto LABEL_11;
    v30 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v29 + 8 * v30))();
LABEL_11:
  v31 = a21;
  if (a21 == &a18)
  {
    v32 = 4;
    v31 = &a18;
  }
  else
  {
    if (!a21)
      goto LABEL_16;
    v32 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v31 + 8 * v32))();
LABEL_16:
  _Unwind_Resume(exception_object);
}

void sub_19FA9C588(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list v3;
  uint64_t v4;
  uint64_t v5;
  va_list va;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v5 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD *);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  v17 = va_arg(va1, _QWORD);
  v3 = (va_list)v9;
  if (v9 == (_QWORD *)va)
  {
    v4 = 4;
    va_copy(v3, va);
  }
  else
  {
    if (!v9)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
LABEL_6:
  geo::ScopedFunctions::~ScopedFunctions((geo::ScopedFunctions *)va1);
  _Unwind_Resume(a1);
}

void md::Logic<md::TileSelectionLogic,md::TileSelectionContext,md::LogicDependencies<gdc::TypeList<md::CameraContext,md::ElevationContext,md::StyleLogicContext>,gdc::TypeList<>>>::debugConsoleString(uint64_t a1@<X0>, gdc::DebugTreeNode *a2@<X8>)
{
  void *v3;
  uint64_t v4;
  void *v5;
  void *v6[2];
  char v7;
  void *v8;
  char v9;
  void **v10;
  void *__p;
  void *v12;
  uint64_t v13;

  v13 = 0;
  (*(void (**)(void **__return_ptr, uint64_t, uint64_t *))(*(_QWORD *)a1 + 56))(v6, a1, &v13);
  gdc::DebugTreeNode::toString(a2, (uint64_t)v6);
  v3 = __p;
  if (__p)
  {
    v4 = (uint64_t)v12;
    v5 = __p;
    if (v12 != __p)
    {
      do
      {
        v4 -= 80;
        std::__destroy_at[abi:nn180100]<gdc::DebugTreeProperty,0>(v4);
      }
      while ((void *)v4 != v3);
      v5 = __p;
    }
    v12 = v3;
    operator delete(v5);
  }
  std::vector<gdc::DebugTreeNode>::~vector[abi:nn180100](&v10);
  if ((v9 & 0x80000000) == 0)
  {
    if ((v7 & 0x80000000) == 0)
      return;
LABEL_10:
    operator delete(v6[0]);
    return;
  }
  operator delete(v8);
  if (v7 < 0)
    goto LABEL_10;
}

void _ZNSt3__110__function6__funcIZN2md18TileSelectionLogic15runBeforeLayoutERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_13CameraContextENS2_16ElevationContextENS2_17StyleLogicContextEEEENS9_IJEEEEE20ResolvedDependenciesERNS2_20TileSelectionContextEE3__0NS_9allocatorISL_EEFvvEEclEv(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  os_signpost_id_t v4;
  uint8_t v5[16];

  if (GEOGetVectorKitPerformanceLog_onceToken != -1)
    dispatch_once(&GEOGetVectorKitPerformanceLog_onceToken, &__block_literal_global_13_11780);
  v2 = (id)GEOGetVectorKitPerformanceLog_log;
  v3 = v2;
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 80);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)v5 = 0;
    _os_signpost_emit_with_name_impl(&dword_19F029000, v3, OS_SIGNPOST_INTERVAL_BEGIN, v4, "TileSelectionLogic", (const char *)&unk_1A0189141, v5, 2u);
  }

}

void std::__hash_table<std::__hash_value_type<md::TileSelectionTileSetType,gdc::TileSelectionResults>,std::__unordered_map_hasher<md::TileSelectionTileSetType,std::__hash_value_type<md::TileSelectionTileSetType,gdc::TileSelectionResults>,std::hash<md::TileSelectionTileSetType>,std::equal_to<md::TileSelectionTileSetType>,true>,std::__unordered_map_equal<md::TileSelectionTileSetType,std::__hash_value_type<md::TileSelectionTileSetType,gdc::TileSelectionResults>,std::equal_to<md::TileSelectionTileSetType>,std::hash<md::TileSelectionTileSetType>,true>,std::allocator<std::__hash_value_type<md::TileSelectionTileSetType,gdc::TileSelectionResults>>>::__deallocate_node(_QWORD *__p)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  void *v5;
  _QWORD *v6;
  _QWORD *v7;
  void *v8;

  if (__p)
  {
    v1 = __p;
    do
    {
      v2 = (_QWORD *)*v1;
      v3 = (_QWORD *)v1[12];
      if (v3)
      {
        do
        {
          v4 = (_QWORD *)*v3;
          operator delete(v3);
          v3 = v4;
        }
        while (v4);
      }
      v5 = (void *)v1[10];
      v1[10] = 0;
      if (v5)
        operator delete(v5);
      v6 = (_QWORD *)v1[6];
      if (v6)
      {
        do
        {
          v7 = (_QWORD *)*v6;
          operator delete(v6);
          v6 = v7;
        }
        while (v7);
      }
      v8 = (void *)v1[4];
      v1[4] = 0;
      if (v8)
        operator delete(v8);
      operator delete(v1);
      v1 = v2;
    }
    while (v2);
  }
}

void md::TileSelectionLogic::processActiveTileSelection(uint64_t a1, unint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5, md::LayoutContext *this, _BYTE *a7)
{
  uint64_t v11;
  double v12;
  double v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int16 *v16;
  unsigned __int16 *v17;
  unsigned __int16 *v18;
  unsigned int v19;
  double v21;
  double v22;
  uint64_t v23;
  uint64_t (***v24)();
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  _BOOL8 v32;
  unint64_t v33;
  char *v34;
  uint64_t v35;
  _BYTE *v36;
  unint64_t v37;
  uint64_t v38;
  char *v39;
  char *v40;
  __int128 *v41;
  char *v42;
  char *v43;
  __int128 v44;
  int v45;
  void *v46;
  unint64_t v47;
  unint64_t v48;
  int v49;
  void *v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  uint8x8_t v54;
  uint64_t ***v55;
  uint64_t **v56;
  unint64_t v57;
  uint64_t *v58;
  _QWORD *v59;
  _QWORD *v60;
  _QWORD *v61;
  unint64_t v62;
  _QWORD *v63;
  unint64_t v64;
  unint64_t v65;
  _QWORD *v66;
  void *v67;
  _QWORD *v68;
  unint64_t v69;
  unint64_t v70;
  float v71;
  float v72;
  _BOOL8 v73;
  unint64_t v74;
  unint64_t v75;
  size_t prime;
  void *v77;
  void *v78;
  uint64_t v79;
  _QWORD *v80;
  size_t v81;
  size_t v82;
  size_t v83;
  _QWORD *i;
  size_t v85;
  uint64_t v86;
  unint64_t v87;
  uint8x8_t v88;
  uint64_t v89;
  _QWORD *v90;
  uint64_t v91;
  size_t v92;
  uint64_t v93;
  _QWORD *v94;
  unint64_t v95;
  _QWORD *v96;
  _QWORD *v97;
  void *v98;
  _QWORD *v99;
  _QWORD *v100;
  void *v101;
  _QWORD *v102;
  _QWORD *v103;
  void *v104;
  _QWORD *v105;
  _QWORD *v106;
  void *v107;
  void *v108;
  NSObject *v109;
  unsigned __int16 *v110;
  unsigned __int16 *v111;
  unint64_t v112;
  const char *v113;
  size_t v114;
  _QWORD *v115;
  _BOOL4 v116;
  _BOOL4 v117;
  const char *v118;
  uint64_t v119;
  void *v120;
  uint64_t v121;
  char v122;
  size_t v123;
  uint64_t (***v124)();
  unint64_t v125;
  void **v126;
  void *v127;
  uint64_t v128;
  uint64_t v129;
  void *v130;
  uint64_t (***v131)();
  uint64_t v132;
  __int16 v133;
  uint64_t v137;
  float *v138;
  _QWORD *v139;
  uint64_t v140;
  os_log_t log;
  NSObject *loga;
  void *v143;
  void *v144;
  int64_t v145;
  void *v146;
  unint64_t v147;
  int v148;
  int v149;
  void *v150;
  unint64_t v151;
  void *v152;
  void *v153;
  int v154;
  void *v155;
  char *v156;
  _BYTE *v157;
  unint64_t v158;
  _BYTE v159[144];
  uint64_t v160;
  int v161;
  void *v162;
  uint64_t v163;
  void *v164;
  unint64_t v165;
  int v166;
  unint64_t v167;
  void *v168;
  unint64_t v169;
  void *__p;
  void *v171;
  int v172;
  char v173;
  unint64_t v174;
  int v175;
  uint64_t v176;
  uint8_t buf[4];
  uint64_t (***v178)();
  _QWORD v179[3];
  _QWORD *v180;
  _QWORD v181[3];
  _QWORD *v182;
  uint64_t (**__dst)();
  md::LayoutContext *v184;
  int64_t v185;
  void **p_dst;
  uint64_t v187;

  v187 = *MEMORY[0x1E0C80C00];
  md::LayoutContext::frameState(this);
  v12 = *(double *)(v11 + 88);
  if (a7[82])
  {
    if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)a7 + 16) + 60) == 1)
      v13 = 2.0;
    else
      v13 = 1.0;
  }
  else
  {
    v13 = 1.0;
  }
  v14 = a1;
  v15 = *(_QWORD *)(a1 + 416);
  v16 = *(unsigned __int16 **)a2;
  if (v15)
  {
    v17 = *(unsigned __int16 **)(a2 + 8);
    v18 = *(unsigned __int16 **)a2;
    if (v16 != v17)
    {
      v18 = *(unsigned __int16 **)a2;
      while (1)
      {
        v19 = *v18;
        if (v19 == 8)
          break;
        ++v18;
        if (v19 > 8 || v18 == v17)
          goto LABEL_20;
      }
    }
    if (v18 != v17)
    {
      v21 = *(double *)(v15 + 32);
      v22 = *(double *)(v15 + 40);
      if (vabdd_f64(v21, v22) > 25.0)
      {
        *(double *)(v15 + 32) = v22;
        gdc::GlobeTileSelector::purgeCache(*(_QWORD **)(a1 + 192));
        v21 = *(double *)(*(_QWORD *)(a1 + 416) + 32);
      }
      *(double *)(a5 + 136) = v21;
      *(_BYTE *)(a5 + 144) = 1;
      v16 = *(unsigned __int16 **)a2;
    }
  }
LABEL_20:
  v23 = *(_QWORD *)(a4 + 5584);
  if (!v23)
    v23 = a4;
  v140 = v23;
  v155 = v159;
  v156 = v159;
  v157 = v159;
  v158 = 9;
  log = *(os_log_t *)(a2 + 8);
  if (v16 != (unsigned __int16 *)log)
  {
    v137 = (uint64_t)(v12 * 1000.0);
    v138 = (float *)(a1 + 200);
    v139 = a3 + 2;
    while (1)
    {
      *(_WORD *)buf = *v16;
      v26 = *(unsigned __int16 *)buf;
      v27 = *(_QWORD *)(a1 + 128 + 8 * *(unsigned __int16 *)buf);
      if (!v27)
        goto LABEL_26;
      v181[0] = &off_1E4279E70;
      v181[1] = this;
      v182 = v181;
      v179[0] = &off_1E4279EB8;
      v179[1] = this;
      v180 = v179;
      p_dst = (void **)&__dst;
      __dst = &off_1E4279EB8;
      v184 = this;
      std::__function::__func<md::TileSelectionLogic::processActiveTileSelection(geo::linear_set<md::TileSelectionTileSetType,std::less<md::TileSelectionTileSetType>,std::allocator<md::TileSelectionTileSetType>,std::vector<md::TileSelectionTileSetType>> const&,std::unordered_map<md::TileSelectionTileSetType,gdc::TileSelectionResults> &,md::CameraContext const&,md::TileSelectionContext &,md::LayoutContext const&,md::StyleLogicContext const&)::$_0,std::allocator<md::TileSelectionLogic::processActiveTileSelection(geo::linear_set<md::TileSelectionTileSetType,std::less<md::TileSelectionTileSetType>,std::allocator<md::TileSelectionTileSetType>,std::vector<md::TileSelectionTileSetType>> const&,std::unordered_map<md::TileSelectionTileSetType,gdc::TileSelectionResults> &,md::CameraContext const&,md::TileSelectionContext &,md::LayoutContext const&,md::StyleLogicContext const&)::$_0>,void ()(void)>::operator()((uint64_t)v181);
      v28 = v180;
      if (v180 == v179)
      {
        v28 = v179;
        v29 = 4;
      }
      else
      {
        if (!v180)
          goto LABEL_33;
        v29 = 5;
      }
      (*(void (**)(void))(*v28 + 8 * v29))();
LABEL_33:
      v30 = v182;
      if (v182 == v181)
      {
        v30 = v181;
        v31 = 4;
      }
      else
      {
        if (!v182)
          goto LABEL_38;
        v31 = 5;
      }
      (*(void (**)(void))(*v30 + 8 * v31))();
LABEL_38:
      v32 = (_DWORD)v26 != 4 && *(_BYTE *)(v14 + 328) != 0;
      (*(void (**)(void **__return_ptr, uint64_t, uint64_t, _BOOL8, double))(*(_QWORD *)v27 + 16))(&v143, v27, v140, v32, v13);
      if ((v147 > 0x7F || (unint64_t)v153 >= 0x80)
        && v137
         - std::__hash_table<std::__hash_value_type<md::TileSelectionTileSetType,long long>,std::__unordered_map_hasher<md::TileSelectionTileSetType,std::__hash_value_type<md::TileSelectionTileSetType,long long>,std::hash<md::TileSelectionTileSetType>,std::equal_to<md::TileSelectionTileSetType>,true>,std::__unordered_map_equal<md::TileSelectionTileSetType,std::__hash_value_type<md::TileSelectionTileSetType,long long>,std::equal_to<md::TileSelectionTileSetType>,std::hash<md::TileSelectionTileSetType>,true>,std::allocator<std::__hash_value_type<md::TileSelectionTileSetType,long long>>>::__emplace_unique_key_args<md::TileSelectionTileSetType,std::piecewise_construct_t const&,std::tuple<md::TileSelectionTileSetType const&>,std::tuple<>>(v138, v26, buf)[3] >= 30001)
      {
        std::__hash_table<std::__hash_value_type<md::TileSelectionTileSetType,long long>,std::__unordered_map_hasher<md::TileSelectionTileSetType,std::__hash_value_type<md::TileSelectionTileSetType,long long>,std::hash<md::TileSelectionTileSetType>,std::equal_to<md::TileSelectionTileSetType>,true>,std::__unordered_map_equal<md::TileSelectionTileSetType,std::__hash_value_type<md::TileSelectionTileSetType,long long>,std::equal_to<md::TileSelectionTileSetType>,std::hash<md::TileSelectionTileSetType>,true>,std::allocator<std::__hash_value_type<md::TileSelectionTileSetType,long long>>>::__emplace_unique_key_args<md::TileSelectionTileSetType,std::piecewise_construct_t const&,std::tuple<md::TileSelectionTileSetType const&>,std::tuple<>>(v138, v26, buf)[3] = v137;
        if (v147 <= (unint64_t)v153)
          v33 = (unint64_t)v153;
        else
          v33 = v147;
        a2 = (unint64_t)v155;
        v34 = v156;
        v35 = (v156 - (_BYTE *)v155) >> 4;
        if (v158 < v35 + 1)
        {
          v36 = v157;
          v37 = (1 << -(char)__clz(v158 + 1));
          if (v158 >= 0xFFFFFFFFFFFFFFFELL)
            v37 = 1;
          if (v37 <= v35 + 1)
            v38 = v35 + 1;
          else
            v38 = v37;
          v39 = (char *)malloc_type_malloc(16 * v38, 0x100004030AC6366uLL);
          v40 = v39;
          v41 = (__int128 *)v155;
          v42 = v156;
          if (v155 != v156)
          {
            v43 = v39;
            do
            {
              v44 = *v41++;
              *(_OWORD *)v43 = v44;
              v43 += 16;
            }
            while (v41 != (__int128 *)v42);
          }
          if ((_BYTE *)a2 != v36)
            free(v155);
          v34 = &v40[16 * v35];
          v155 = v40;
          v158 = v38;
          v14 = a1;
        }
        *(_WORD *)v34 = v26;
        *((_QWORD *)v34 + 1) = v33;
        v156 = v34 + 16;
      }
      LOWORD(v160) = v26;
      v45 = (int)v143;
      v161 = (int)v143;
      v46 = v144;
      v47 = v145;
      v144 = 0;
      v145 = 0;
      v162 = v46;
      v163 = v47;
      v164 = v146;
      v165 = v147;
      v166 = v148;
      if (v147)
      {
        v48 = *((_QWORD *)v146 + 1);
        if ((v47 & (v47 - 1)) != 0)
        {
          if (v48 >= v47)
            v48 %= v47;
        }
        else
        {
          v48 &= v47 - 1;
        }
        *((_QWORD *)v46 + v48) = &v164;
        v146 = 0;
        v147 = 0;
      }
      v49 = v149;
      LODWORD(v167) = v149;
      v50 = v150;
      v51 = v151;
      v150 = 0;
      v151 = 0;
      v168 = v50;
      v169 = v51;
      __p = v152;
      v171 = v153;
      v172 = v154;
      if (v153)
      {
        v52 = *((_QWORD *)v152 + 1);
        if ((v51 & (v51 - 1)) != 0)
        {
          if (v52 >= v51)
            v52 %= v51;
        }
        else
        {
          v52 &= v51 - 1;
        }
        *((_QWORD *)v50 + v52) = &__p;
        v152 = 0;
        v153 = 0;
      }
      v53 = a3[1];
      if (v53)
      {
        v54 = (uint8x8_t)vcnt_s8((int8x8_t)v53);
        v54.i16[0] = vaddlv_u8(v54);
        if (v54.u32[0] > 1uLL)
        {
          a2 = v26;
          if (v53 <= v26)
            a2 = v26 % v53;
        }
        else
        {
          a2 = ((_DWORD)v53 - 1) & v26;
        }
        v55 = *(uint64_t ****)(*a3 + 8 * a2);
        if (v55)
        {
          v56 = *v55;
          if (v56)
          {
            if (v54.u32[0] < 2uLL)
            {
              while (1)
              {
                v58 = v56[1];
                if (v58 == (uint64_t *)v26)
                {
                  if (*((unsigned __int16 *)v56 + 8) == (_DWORD)v26)
                    goto LABEL_165;
                }
                else if (((unint64_t)v58 & (v53 - 1)) != a2)
                {
                  goto LABEL_92;
                }
                v56 = (uint64_t **)*v56;
                if (!v56)
                  goto LABEL_92;
              }
            }
            do
            {
              v57 = (unint64_t)v56[1];
              if (v57 == v26)
              {
                if (*((unsigned __int16 *)v56 + 8) == (_DWORD)v26)
                  goto LABEL_165;
              }
              else
              {
                if (v57 >= v53)
                  v57 %= v53;
                if (v57 != a2)
                  break;
              }
              v56 = (uint64_t **)*v56;
            }
            while (v56);
          }
        }
      }
LABEL_92:
      v59 = operator new(0x78uLL);
      v60 = v59;
      *v59 = 0;
      v59[1] = v26;
      *((_WORD *)v59 + 8) = v160;
      *((_DWORD *)v59 + 6) = v45;
      v61 = v162;
      v62 = v163;
      v162 = 0;
      v163 = 0;
      v59[4] = v61;
      v59[5] = v62;
      v63 = v164;
      v64 = v165;
      v59[6] = v164;
      v59[7] = v64;
      *((_DWORD *)v59 + 16) = v166;
      if (v64)
      {
        v65 = v63[1];
        if ((v62 & (v62 - 1)) != 0)
        {
          if (v65 >= v62)
            v65 %= v62;
        }
        else
        {
          v65 &= v62 - 1;
        }
        v61[v65] = v59 + 6;
        v164 = 0;
        v165 = 0;
      }
      v66 = __p;
      v67 = v171;
      v59[12] = __p;
      *((_DWORD *)v59 + 18) = v49;
      v68 = v168;
      v69 = v169;
      v168 = 0;
      v169 = 0;
      v59[10] = v68;
      v59[11] = v69;
      v59[13] = v67;
      *((_DWORD *)v59 + 28) = v172;
      if (v67)
      {
        v70 = v66[1];
        if ((v69 & (v69 - 1)) != 0)
        {
          if (v70 >= v69)
            v70 %= v69;
        }
        else
        {
          v70 &= v69 - 1;
        }
        v68[v70] = v59 + 12;
        __p = 0;
        v171 = 0;
      }
      v71 = (float)(unint64_t)(a3[3] + 1);
      v72 = *((float *)a3 + 8);
      if (v53 && (float)(v72 * (float)v53) >= v71)
      {
        v26 = a2;
        goto LABEL_155;
      }
      v73 = v53 < 3 || (v53 & (v53 - 1)) != 0;
      v74 = v73 | (2 * v53);
      v75 = vcvtps_u32_f32(v71 / v72);
      if (v74 <= v75)
        prime = v75;
      else
        prime = v74;
      if (prime == 1)
      {
        prime = 2;
      }
      else if ((prime & (prime - 1)) != 0)
      {
        prime = std::__next_prime(prime);
        v53 = a3[1];
      }
      if (prime > v53)
        goto LABEL_118;
      if (prime >= v53)
        goto LABEL_143;
      v87 = vcvtps_u32_f32((float)(unint64_t)a3[3] / *((float *)a3 + 8));
      if (v53 < 3 || (v88 = (uint8x8_t)vcnt_s8((int8x8_t)v53), v88.i16[0] = vaddlv_u8(v88), v88.u32[0] > 1uLL))
      {
        v87 = std::__next_prime(v87);
      }
      else
      {
        v89 = 1 << -(char)__clz(v87 - 1);
        if (v87 >= 2)
          v87 = v89;
      }
      if (prime <= v87)
        prime = v87;
      if (prime < v53)
      {
        if (!prime)
        {
          v108 = (void *)*a3;
          *a3 = 0;
          if (v108)
            operator delete(v108);
          v53 = 0;
          a3[1] = 0;
          goto LABEL_143;
        }
LABEL_118:
        if (prime >> 61)
          std::__throw_bad_array_new_length[abi:nn180100]();
        v77 = operator new(8 * prime);
        v78 = (void *)*a3;
        *a3 = (uint64_t)v77;
        if (v78)
          operator delete(v78);
        v79 = 0;
        a3[1] = prime;
        do
          *(_QWORD *)(*a3 + 8 * v79++) = 0;
        while (prime != v79);
        v80 = (_QWORD *)*v139;
        if (!*v139)
        {
LABEL_142:
          v53 = prime;
          goto LABEL_143;
        }
        v81 = v80[1];
        v82 = prime - 1;
        if ((prime & (prime - 1)) == 0)
        {
          v83 = v81 & v82;
          *(_QWORD *)(*a3 + 8 * v83) = v139;
          for (i = (_QWORD *)*v80; *v80; i = (_QWORD *)*v80)
          {
            v85 = i[1] & v82;
            if (v85 == v83)
            {
              v80 = i;
            }
            else if (*(_QWORD *)(*a3 + 8 * v85))
            {
              *v80 = *i;
              v86 = 8 * v85;
              *i = **(_QWORD **)(*a3 + v86);
              **(_QWORD **)(*a3 + v86) = i;
            }
            else
            {
              *(_QWORD *)(*a3 + 8 * v85) = v80;
              v80 = i;
              v83 = v85;
            }
          }
          goto LABEL_142;
        }
        if (v81 >= prime)
          v81 %= prime;
        *(_QWORD *)(*a3 + 8 * v81) = v139;
        v90 = (_QWORD *)*v80;
        if (!*v80)
          goto LABEL_142;
        while (2)
        {
          v92 = v90[1];
          if (v92 >= prime)
            v92 %= prime;
          if (v92 != v81)
          {
            if (!*(_QWORD *)(*a3 + 8 * v92))
            {
              *(_QWORD *)(*a3 + 8 * v92) = v80;
LABEL_147:
              v80 = v90;
              v90 = (_QWORD *)*v90;
              v81 = v92;
              if (!v90)
                goto LABEL_142;
              continue;
            }
            *v80 = *v90;
            v91 = 8 * v92;
            *v90 = **(_QWORD **)(*a3 + v91);
            **(_QWORD **)(*a3 + v91) = v90;
            v90 = v80;
          }
          break;
        }
        v92 = v81;
        goto LABEL_147;
      }
      v53 = a3[1];
LABEL_143:
      if ((v53 & (v53 - 1)) != 0)
      {
        if (v53 <= v26)
          v26 %= v53;
      }
      else
      {
        v26 = ((_DWORD)v53 - 1) & v26;
      }
LABEL_155:
      v93 = *a3;
      v94 = *(_QWORD **)(*a3 + 8 * v26);
      if (v94)
      {
        *v60 = *v94;
      }
      else
      {
        *v60 = *v139;
        *v139 = v60;
        *(_QWORD *)(v93 + 8 * v26) = v139;
        if (!*v60)
          goto LABEL_164;
        v95 = *(_QWORD *)(*v60 + 8);
        if ((v53 & (v53 - 1)) != 0)
        {
          if (v95 >= v53)
            v95 %= v53;
        }
        else
        {
          v95 &= v53 - 1;
        }
        v94 = (_QWORD *)(*a3 + 8 * v95);
      }
      *v94 = v60;
LABEL_164:
      ++a3[3];
LABEL_165:
      v96 = __p;
      if (__p)
      {
        do
        {
          v97 = (_QWORD *)*v96;
          operator delete(v96);
          v96 = v97;
        }
        while (v97);
      }
      v98 = v168;
      v168 = 0;
      if (v98)
        operator delete(v98);
      v99 = v164;
      if (v164)
      {
        do
        {
          v100 = (_QWORD *)*v99;
          operator delete(v99);
          v99 = v100;
        }
        while (v100);
      }
      v101 = v162;
      v162 = 0;
      if (v101)
        operator delete(v101);
      v102 = v152;
      if (v152)
      {
        do
        {
          v103 = (_QWORD *)*v102;
          operator delete(v102);
          v102 = v103;
        }
        while (v103);
      }
      v104 = v150;
      v150 = 0;
      if (v104)
        operator delete(v104);
      v105 = v146;
      if (v146)
      {
        do
        {
          v106 = (_QWORD *)*v105;
          operator delete(v105);
          v105 = v106;
        }
        while (v106);
      }
      v107 = v144;
      v144 = 0;
      if (v107)
        operator delete(v107);
      if (!p_dst)
      {
        std::__throw_bad_function_call[abi:nn180100]();
        __break(1u);
        return;
      }
      (*((void (**)(void **))*p_dst + 6))(p_dst);
      v24 = (uint64_t (***)())p_dst;
      if (p_dst == (void **)&__dst)
      {
        v24 = &__dst;
        v25 = 4;
      }
      else
      {
        if (!p_dst)
          goto LABEL_26;
        v25 = 5;
      }
      (*v24)[v25]();
LABEL_26:
      if (++v16 == (unsigned __int16 *)log)
      {
        if (v155 == v156)
          break;
        if (GEOGetVectorKitTileSelectionLogicLog::onceToken != -1)
          dispatch_once(&GEOGetVectorKitTileSelectionLogicLog::onceToken, &__block_literal_global_17213);
        v109 = (id)GEOGetVectorKitTileSelectionLogicLog::log;
        if (!os_log_type_enabled(v109, OS_LOG_TYPE_ERROR))
          goto LABEL_238;
        loga = v109;
        std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:nn180100]((uint64_t)&v160);
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v162, (uint64_t)"Detected large tile selections [", 32);
        v110 = (unsigned __int16 *)v155;
        v111 = (unsigned __int16 *)v156;
        if (v155 != v156)
        {
          do
          {
            std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v162, (uint64_t)"{", 1);
            v112 = *v110;
            v113 = "<Invalid>";
            if (v112 <= 8)
              v113 = off_1E42F6158[v112];
            v114 = strlen(v113);
            std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v162, (uint64_t)v113, v114);
            std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v162, (uint64_t)":", 1);
            v115 = (_QWORD *)std::ostream::operator<<();
            std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v115, (uint64_t)"}", 1);
            v116 = *v110 == *((unsigned __int16 *)v156 - 8);
            v117 = *((_QWORD *)v110 + 1) == *((_QWORD *)v156 - 1);
            if (v116 && v117)
              v118 = "]";
            else
              v118 = ", ";
            if (v116 && v117)
              v119 = 1;
            else
              v119 = 2;
            std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v162, (uint64_t)v118, v119);
            v110 += 8;
          }
          while (v110 != v111);
        }
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v162, (uint64_t)" with camera:\n", 14);
        md::CameraContext::toString((md::CameraContext *)&v143, (double *)a4);
        if (v145 >= 0)
          v120 = &v143;
        else
          v120 = v143;
        if (v145 >= 0)
          v121 = HIBYTE(v145);
        else
          v121 = (uint64_t)v144;
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v162, (uint64_t)v120, v121);
        v14 = a1;
        if (SHIBYTE(v145) < 0)
        {
          operator delete(v143);
          v122 = v175;
          if ((v175 & 0x10) == 0)
            goto LABEL_216;
        }
        else
        {
          v122 = v175;
          if ((v175 & 0x10) == 0)
          {
LABEL_216:
            if ((v122 & 8) == 0)
            {
              v123 = 0;
              HIBYTE(v185) = 0;
              v124 = &__dst;
LABEL_232:
              *((_BYTE *)v124 + v123) = 0;
              v160 = *MEMORY[0x1E0DE4F50];
              v130 = *(void **)(MEMORY[0x1E0DE4F50] + 72);
              *(uint64_t *)((char *)&v160 + *(_QWORD *)(v160 - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
              v162 = v130;
              v163 = MEMORY[0x1E0DE4FB8] + 16;
              if (v173 < 0)
                operator delete(v171);
              std::streambuf::~streambuf();
              std::iostream::~basic_iostream();
              MEMORY[0x1A1AF4D64](&v176);
              v131 = &__dst;
              if (v185 < 0)
                v131 = (uint64_t (***)())__dst;
              *(_DWORD *)buf = 136315138;
              v178 = v131;
              v109 = loga;
              _os_log_impl(&dword_19F029000, loga, OS_LOG_TYPE_ERROR, "%s", buf, 0xCu);
              if (SHIBYTE(v185) < 0)
                operator delete(__dst);
LABEL_238:

              break;
            }
            v126 = (void **)&v165;
            v125 = v167;
LABEL_223:
            v127 = *v126;
            v123 = v125 - (_QWORD)*v126;
            if (v123 >= 0x7FFFFFFFFFFFFFF8)
              abort();
            if (v123 >= 0x17)
            {
              v128 = (v123 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v123 | 7) != 0x17)
                v128 = v123 | 7;
              v129 = v128 + 1;
              v124 = (uint64_t (***)())operator new(v128 + 1);
              v184 = (md::LayoutContext *)v123;
              v185 = v129 | 0x8000000000000000;
              __dst = (uint64_t (**)())v124;
            }
            else
            {
              HIBYTE(v185) = v125 - *(_BYTE *)v126;
              v124 = &__dst;
              if (!v123)
                goto LABEL_231;
            }
            memmove(v124, v127, v123);
LABEL_231:
            v14 = a1;
            goto LABEL_232;
          }
        }
        v125 = v174;
        if (v174 < v169)
        {
          v174 = v169;
          v125 = v169;
        }
        v126 = &v168;
        goto LABEL_223;
      }
    }
  }
  *(_WORD *)(a5 + 130) = 0;
  md::LayoutContext::frameState(this);
  if (*(unsigned __int8 *)(v132 + 128) - 1 >= 3)
  {
    if (!*(_BYTE *)(v14 + 316))
      goto LABEL_244;
    v133 = 4;
  }
  else
  {
    v133 = 1;
  }
  *(_WORD *)(a5 + 130) = v133;
LABEL_244:
  if (v155 != v157)
    free(v155);
}

void sub_19FA9D5E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,char a59)
{
  if (a27 < 0)
    operator delete(__p);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a59);

  if (a37 != a39)
  {
    free(a37);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void std::__function::__func<md::TileSelectionLogic::processActiveTileSelection(geo::linear_set<md::TileSelectionTileSetType,std::less<md::TileSelectionTileSetType>,std::allocator<md::TileSelectionTileSetType>,std::vector<md::TileSelectionTileSetType>> const&,std::unordered_map<md::TileSelectionTileSetType,gdc::TileSelectionResults> &,md::CameraContext const&,md::TileSelectionContext &,md::LayoutContext const&,md::StyleLogicContext const&)::$_0,std::allocator<md::TileSelectionLogic::processActiveTileSelection(geo::linear_set<md::TileSelectionTileSetType,std::less<md::TileSelectionTileSetType>,std::allocator<md::TileSelectionTileSetType>,std::vector<md::TileSelectionTileSetType>> const&,std::unordered_map<md::TileSelectionTileSetType,gdc::TileSelectionResults> &,md::CameraContext const&,md::TileSelectionContext &,md::LayoutContext const&,md::StyleLogicContext const&)::$_0>,void ()(void)>::operator()(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  os_signpost_id_t v4;
  uint8_t v5[16];

  if (GEOGetVectorKitPerformanceLog_onceToken != -1)
    dispatch_once(&GEOGetVectorKitPerformanceLog_onceToken, &__block_literal_global_13_11780);
  v2 = (id)GEOGetVectorKitPerformanceLog_log;
  v3 = v2;
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 80);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)v5 = 0;
    _os_signpost_emit_with_name_impl(&dword_19F029000, v3, OS_SIGNPOST_INTERVAL_BEGIN, v4, "TileSelectionLogic", (const char *)&unk_1A0189141, v5, 2u);
  }

}

_QWORD *std::pair<md::TileSelectionTileSetType,gdc::TileSelectionResults>::~pair(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;
  _QWORD *v5;
  _QWORD *v6;
  void *v7;

  v2 = (_QWORD *)a1[10];
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = (void *)a1[8];
  a1[8] = 0;
  if (v4)
    operator delete(v4);
  v5 = (_QWORD *)a1[4];
  if (v5)
  {
    do
    {
      v6 = (_QWORD *)*v5;
      operator delete(v5);
      v5 = v6;
    }
    while (v6);
  }
  v7 = (void *)a1[2];
  a1[2] = 0;
  if (v7)
    operator delete(v7);
  return a1;
}

void gdc::TileSelectionResults::~TileSelectionResults(gdc::TileSelectionResults *this)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;
  _QWORD *v5;
  _QWORD *v6;
  void *v7;

  v2 = (_QWORD *)*((_QWORD *)this + 9);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = (void *)*((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v4)
    operator delete(v4);
  v5 = (_QWORD *)*((_QWORD *)this + 3);
  if (v5)
  {
    do
    {
      v6 = (_QWORD *)*v5;
      operator delete(v5);
      v5 = v6;
    }
    while (v6);
  }
  v7 = (void *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v7)
    operator delete(v7);
}

void std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<md::TileSelectionTileSetType,gdc::TileSelectionResults>,void *>>>::operator()[abi:nn180100](char a1, _QWORD *__p)
{
  _QWORD *v3;
  _QWORD *v4;
  void *v5;
  _QWORD *v6;
  _QWORD *v7;
  void *v8;

  if (a1)
  {
    v3 = (_QWORD *)__p[12];
    if (v3)
    {
      do
      {
        v4 = (_QWORD *)*v3;
        operator delete(v3);
        v3 = v4;
      }
      while (v4);
    }
    v5 = (void *)__p[10];
    __p[10] = 0;
    if (v5)
      operator delete(v5);
    v6 = (_QWORD *)__p[6];
    if (v6)
    {
      do
      {
        v7 = (_QWORD *)*v6;
        operator delete(v6);
        v6 = v7;
      }
      while (v7);
    }
    v8 = (void *)__p[4];
    __p[4] = 0;
    if (v8)
      operator delete(v8);
  }
  else if (!__p)
  {
    return;
  }
  operator delete(__p);
}

void std::__function::__func<md::TileSelectionLogic::processActiveTileSelection(geo::linear_set<md::TileSelectionTileSetType,std::less<md::TileSelectionTileSetType>,std::allocator<md::TileSelectionTileSetType>,std::vector<md::TileSelectionTileSetType>> const&,std::unordered_map<md::TileSelectionTileSetType,gdc::TileSelectionResults> &,md::CameraContext const&,md::TileSelectionContext &,md::LayoutContext const&,md::StyleLogicContext const&)::$_1,std::allocator<md::TileSelectionLogic::processActiveTileSelection(geo::linear_set<md::TileSelectionTileSetType,std::less<md::TileSelectionTileSetType>,std::allocator<md::TileSelectionTileSetType>,std::vector<md::TileSelectionTileSetType>> const&,std::unordered_map<md::TileSelectionTileSetType,gdc::TileSelectionResults> &,md::CameraContext const&,md::TileSelectionContext &,md::LayoutContext const&,md::StyleLogicContext const&)::$_1>,void ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::TileSelectionLogic::processActiveTileSelection(geo::linear_set<md::TileSelectionTileSetType,std::less<md::TileSelectionTileSetType>,std::allocator<md::TileSelectionTileSetType>,std::vector<md::TileSelectionTileSetType>> const&,std::unordered_map<md::TileSelectionTileSetType,gdc::TileSelectionResults> &,md::CameraContext const&,md::TileSelectionContext &,md::LayoutContext const&,md::StyleLogicContext const&)::$_1,std::allocator<md::TileSelectionLogic::processActiveTileSelection(geo::linear_set<md::TileSelectionTileSetType,std::less<md::TileSelectionTileSetType>,std::allocator<md::TileSelectionTileSetType>,std::vector<md::TileSelectionTileSetType>> const&,std::unordered_map<md::TileSelectionTileSetType,gdc::TileSelectionResults> &,md::CameraContext const&,md::TileSelectionContext &,md::LayoutContext const&,md::StyleLogicContext const&)::$_1>,void ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E4279EB8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<md::TileSelectionLogic::processActiveTileSelection(geo::linear_set<md::TileSelectionTileSetType,std::less<md::TileSelectionTileSetType>,std::allocator<md::TileSelectionTileSetType>,std::vector<md::TileSelectionTileSetType>> const&,std::unordered_map<md::TileSelectionTileSetType,gdc::TileSelectionResults> &,md::CameraContext const&,md::TileSelectionContext &,md::LayoutContext const&,md::StyleLogicContext const&)::$_1,std::allocator<md::TileSelectionLogic::processActiveTileSelection(geo::linear_set<md::TileSelectionTileSetType,std::less<md::TileSelectionTileSetType>,std::allocator<md::TileSelectionTileSetType>,std::vector<md::TileSelectionTileSetType>> const&,std::unordered_map<md::TileSelectionTileSetType,gdc::TileSelectionResults> &,md::CameraContext const&,md::TileSelectionContext &,md::LayoutContext const&,md::StyleLogicContext const&)::$_1>,void ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E4279EB8;
  a2[1] = v2;
  return result;
}

void std::__function::__func<md::TileSelectionLogic::processActiveTileSelection(geo::linear_set<md::TileSelectionTileSetType,std::less<md::TileSelectionTileSetType>,std::allocator<md::TileSelectionTileSetType>,std::vector<md::TileSelectionTileSetType>> const&,std::unordered_map<md::TileSelectionTileSetType,gdc::TileSelectionResults> &,md::CameraContext const&,md::TileSelectionContext &,md::LayoutContext const&,md::StyleLogicContext const&)::$_1,std::allocator<md::TileSelectionLogic::processActiveTileSelection(geo::linear_set<md::TileSelectionTileSetType,std::less<md::TileSelectionTileSetType>,std::allocator<md::TileSelectionTileSetType>,std::vector<md::TileSelectionTileSetType>> const&,std::unordered_map<md::TileSelectionTileSetType,gdc::TileSelectionResults> &,md::CameraContext const&,md::TileSelectionContext &,md::LayoutContext const&,md::StyleLogicContext const&)::$_1>,void ()(void)>::operator()(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  os_signpost_id_t v4;
  uint8_t v5[16];

  if (GEOGetVectorKitPerformanceLog_onceToken != -1)
    dispatch_once(&GEOGetVectorKitPerformanceLog_onceToken, &__block_literal_global_13_11780);
  v2 = (id)GEOGetVectorKitPerformanceLog_log;
  v3 = v2;
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 80);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)v5 = 0;
    _os_signpost_emit_with_name_impl(&dword_19F029000, v3, OS_SIGNPOST_INTERVAL_END, v4, "TileSelectionLogic", (const char *)&unk_1A0189141, v5, 2u);
  }

}

void std::__function::__func<md::TileSelectionLogic::processActiveTileSelection(geo::linear_set<md::TileSelectionTileSetType,std::less<md::TileSelectionTileSetType>,std::allocator<md::TileSelectionTileSetType>,std::vector<md::TileSelectionTileSetType>> const&,std::unordered_map<md::TileSelectionTileSetType,gdc::TileSelectionResults> &,md::CameraContext const&,md::TileSelectionContext &,md::LayoutContext const&,md::StyleLogicContext const&)::$_0,std::allocator<md::TileSelectionLogic::processActiveTileSelection(geo::linear_set<md::TileSelectionTileSetType,std::less<md::TileSelectionTileSetType>,std::allocator<md::TileSelectionTileSetType>,std::vector<md::TileSelectionTileSetType>> const&,std::unordered_map<md::TileSelectionTileSetType,gdc::TileSelectionResults> &,md::CameraContext const&,md::TileSelectionContext &,md::LayoutContext const&,md::StyleLogicContext const&)::$_0>,void ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::TileSelectionLogic::processActiveTileSelection(geo::linear_set<md::TileSelectionTileSetType,std::less<md::TileSelectionTileSetType>,std::allocator<md::TileSelectionTileSetType>,std::vector<md::TileSelectionTileSetType>> const&,std::unordered_map<md::TileSelectionTileSetType,gdc::TileSelectionResults> &,md::CameraContext const&,md::TileSelectionContext &,md::LayoutContext const&,md::StyleLogicContext const&)::$_0,std::allocator<md::TileSelectionLogic::processActiveTileSelection(geo::linear_set<md::TileSelectionTileSetType,std::less<md::TileSelectionTileSetType>,std::allocator<md::TileSelectionTileSetType>,std::vector<md::TileSelectionTileSetType>> const&,std::unordered_map<md::TileSelectionTileSetType,gdc::TileSelectionResults> &,md::CameraContext const&,md::TileSelectionContext &,md::LayoutContext const&,md::StyleLogicContext const&)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E4279E70;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<md::TileSelectionLogic::processActiveTileSelection(geo::linear_set<md::TileSelectionTileSetType,std::less<md::TileSelectionTileSetType>,std::allocator<md::TileSelectionTileSetType>,std::vector<md::TileSelectionTileSetType>> const&,std::unordered_map<md::TileSelectionTileSetType,gdc::TileSelectionResults> &,md::CameraContext const&,md::TileSelectionContext &,md::LayoutContext const&,md::StyleLogicContext const&)::$_0,std::allocator<md::TileSelectionLogic::processActiveTileSelection(geo::linear_set<md::TileSelectionTileSetType,std::less<md::TileSelectionTileSetType>,std::allocator<md::TileSelectionTileSetType>,std::vector<md::TileSelectionTileSetType>> const&,std::unordered_map<md::TileSelectionTileSetType,gdc::TileSelectionResults> &,md::CameraContext const&,md::TileSelectionContext &,md::LayoutContext const&,md::StyleLogicContext const&)::$_0>,void ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E4279E70;
  a2[1] = v2;
  return result;
}

void _ZNSt3__110__function6__funcIZN2md18TileSelectionLogic15runBeforeLayoutERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_13CameraContextENS2_16ElevationContextENS2_17StyleLogicContextEEEENS9_IJEEEEE20ResolvedDependenciesERNS2_20TileSelectionContextEE3__2NS_9allocatorISL_EEFvNS2_17StyleManagerEventEEED0Ev()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *_ZNKSt3__110__function6__funcIZN2md18TileSelectionLogic15runBeforeLayoutERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_13CameraContextENS2_16ElevationContextENS2_17StyleLogicContextEEEENS9_IJEEEEE20ResolvedDependenciesERNS2_20TileSelectionContextEE3__2NS_9allocatorISL_EEFvNS2_17StyleManagerEventEEE7__cloneEv(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42CF428;
  result[1] = v3;
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZN2md18TileSelectionLogic15runBeforeLayoutERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_13CameraContextENS2_16ElevationContextENS2_17StyleLogicContextEEEENS9_IJEEEEE20ResolvedDependenciesERNS2_20TileSelectionContextEE3__2NS_9allocatorISL_EEFvNS2_17StyleManagerEventEEE7__cloneEPNS0_6__baseISP_EE(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42CF428;
  a2[1] = v2;
  return result;
}

uint64_t *_ZNSt3__110__function6__funcIZN2md18TileSelectionLogic15runBeforeLayoutERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_13CameraContextENS2_16ElevationContextENS2_17StyleLogicContextEEEENS9_IJEEEEE20ResolvedDependenciesERNS2_20TileSelectionContextEE3__2NS_9allocatorISL_EEFvNS2_17StyleManagerEventEEEclEOSO_(uint64_t *result, unsigned __int8 *a2)
{
  uint64_t v2;
  unsigned int v3;
  uint64_t *v4;
  uint64_t **v5;
  uint64_t **v6;
  unsigned int v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t *v10;

  v2 = result[1];
  v3 = *a2;
  v4 = *(uint64_t **)(v2 + 296);
  if (v4)
  {
    while (1)
    {
      while (1)
      {
        v6 = (uint64_t **)v4;
        v7 = *((unsigned __int8 *)v4 + 25);
        if (v7 <= v3)
          break;
        v4 = *v6;
        v5 = v6;
        if (!*v6)
          goto LABEL_8;
      }
      if (v7 >= v3)
        break;
      v4 = v6[1];
      if (!v4)
      {
        v5 = v6 + 1;
        goto LABEL_8;
      }
    }
  }
  else
  {
    v5 = (uint64_t **)(v2 + 296);
    v6 = (uint64_t **)(v2 + 296);
LABEL_8:
    v8 = operator new(0x20uLL);
    v8[25] = v3;
    *(_QWORD *)v8 = 0;
    *((_QWORD *)v8 + 1) = 0;
    *((_QWORD *)v8 + 2) = v6;
    *v5 = (uint64_t *)v8;
    v9 = **(_QWORD **)(v2 + 288);
    if (v9)
    {
      *(_QWORD *)(v2 + 288) = v9;
      v10 = *v5;
    }
    else
    {
      v10 = (uint64_t *)v8;
    }
    result = std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v2 + 296), v10);
    ++*(_QWORD *)(v2 + 304);
  }
  return result;
}

void _ZNSt3__110__function6__funcIZN2md18TileSelectionLogic15runBeforeLayoutERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_13CameraContextENS2_16ElevationContextENS2_17StyleLogicContextEEEENS9_IJEEEEE20ResolvedDependenciesERNS2_20TileSelectionContextEE3__1NS_9allocatorISL_EEFvvEED0Ev()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *_ZNKSt3__110__function6__funcIZN2md18TileSelectionLogic15runBeforeLayoutERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_13CameraContextENS2_16ElevationContextENS2_17StyleLogicContextEEEENS9_IJEEEEE20ResolvedDependenciesERNS2_20TileSelectionContextEE3__1NS_9allocatorISL_EEFvvEE7__cloneEv(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42CF3E0;
  result[1] = v3;
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZN2md18TileSelectionLogic15runBeforeLayoutERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_13CameraContextENS2_16ElevationContextENS2_17StyleLogicContextEEEENS9_IJEEEEE20ResolvedDependenciesERNS2_20TileSelectionContextEE3__1NS_9allocatorISL_EEFvvEE7__cloneEPNS0_6__baseISO_EE(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42CF3E0;
  a2[1] = v2;
  return result;
}

void _ZNSt3__110__function6__funcIZN2md18TileSelectionLogic15runBeforeLayoutERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_13CameraContextENS2_16ElevationContextENS2_17StyleLogicContextEEEENS9_IJEEEEE20ResolvedDependenciesERNS2_20TileSelectionContextEE3__1NS_9allocatorISL_EEFvvEEclEv(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  os_signpost_id_t v4;
  uint8_t v5[16];

  if (GEOGetVectorKitPerformanceLog_onceToken != -1)
    dispatch_once(&GEOGetVectorKitPerformanceLog_onceToken, &__block_literal_global_13_11780);
  v2 = (id)GEOGetVectorKitPerformanceLog_log;
  v3 = v2;
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 80);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)v5 = 0;
    _os_signpost_emit_with_name_impl(&dword_19F029000, v3, OS_SIGNPOST_INTERVAL_END, v4, "TileSelectionLogic", (const char *)&unk_1A0189141, v5, 2u);
  }

}

void _ZNSt3__110__function6__funcIZN2md18TileSelectionLogic15runBeforeLayoutERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_13CameraContextENS2_16ElevationContextENS2_17StyleLogicContextEEEENS9_IJEEEEE20ResolvedDependenciesERNS2_20TileSelectionContextEE3__0NS_9allocatorISL_EEFvvEED0Ev()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *_ZNKSt3__110__function6__funcIZN2md18TileSelectionLogic15runBeforeLayoutERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_13CameraContextENS2_16ElevationContextENS2_17StyleLogicContextEEEENS9_IJEEEEE20ResolvedDependenciesERNS2_20TileSelectionContextEE3__0NS_9allocatorISL_EEFvvEE7__cloneEv(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42CF398;
  result[1] = v3;
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZN2md18TileSelectionLogic15runBeforeLayoutERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_13CameraContextENS2_16ElevationContextENS2_17StyleLogicContextEEEENS9_IJEEEEE20ResolvedDependenciesERNS2_20TileSelectionContextEE3__0NS_9allocatorISL_EEFvvEE7__cloneEPNS0_6__baseISO_EE(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42CF398;
  a2[1] = v2;
  return result;
}

void _ZNSt3__110__function6__funcIZN2md18TileSelectionLogic29runBeforeLayoutAtVariableRateERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_13CameraContextENS2_16ElevationContextENS2_17StyleLogicContextEEEENS9_IJEEEEE20ResolvedDependenciesERNS2_20TileSelectionContextEE3__0NS_9allocatorISL_EEFvvEEclEv(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  os_signpost_id_t v4;
  uint8_t v5[16];

  if (GEOGetVectorKitPerformanceLog_onceToken != -1)
    dispatch_once(&GEOGetVectorKitPerformanceLog_onceToken, &__block_literal_global_13_11780);
  v2 = (id)GEOGetVectorKitPerformanceLog_log;
  v3 = v2;
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 80);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)v5 = 0;
    _os_signpost_emit_with_name_impl(&dword_19F029000, v3, OS_SIGNPOST_INTERVAL_BEGIN, v4, "TileSelectionLogicVariableRate", (const char *)&unk_1A0189141, v5, 2u);
  }

}

void _ZNSt3__110__function6__funcIZN2md18TileSelectionLogic29runBeforeLayoutAtVariableRateERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_13CameraContextENS2_16ElevationContextENS2_17StyleLogicContextEEEENS9_IJEEEEE20ResolvedDependenciesERNS2_20TileSelectionContextEE3__1NS_9allocatorISL_EEFvvEED0Ev()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *_ZNKSt3__110__function6__funcIZN2md18TileSelectionLogic29runBeforeLayoutAtVariableRateERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_13CameraContextENS2_16ElevationContextENS2_17StyleLogicContextEEEENS9_IJEEEEE20ResolvedDependenciesERNS2_20TileSelectionContextEE3__1NS_9allocatorISL_EEFvvEE7__cloneEv(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42CF548;
  result[1] = v3;
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZN2md18TileSelectionLogic29runBeforeLayoutAtVariableRateERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_13CameraContextENS2_16ElevationContextENS2_17StyleLogicContextEEEENS9_IJEEEEE20ResolvedDependenciesERNS2_20TileSelectionContextEE3__1NS_9allocatorISL_EEFvvEE7__cloneEPNS0_6__baseISO_EE(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42CF548;
  a2[1] = v2;
  return result;
}

void _ZNSt3__110__function6__funcIZN2md18TileSelectionLogic29runBeforeLayoutAtVariableRateERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_13CameraContextENS2_16ElevationContextENS2_17StyleLogicContextEEEENS9_IJEEEEE20ResolvedDependenciesERNS2_20TileSelectionContextEE3__1NS_9allocatorISL_EEFvvEEclEv(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  os_signpost_id_t v4;
  uint8_t v5[16];

  if (GEOGetVectorKitPerformanceLog_onceToken != -1)
    dispatch_once(&GEOGetVectorKitPerformanceLog_onceToken, &__block_literal_global_13_11780);
  v2 = (id)GEOGetVectorKitPerformanceLog_log;
  v3 = v2;
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 80);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)v5 = 0;
    _os_signpost_emit_with_name_impl(&dword_19F029000, v3, OS_SIGNPOST_INTERVAL_END, v4, "TileSelectionLogicVariableRate", (const char *)&unk_1A0189141, v5, 2u);
  }

}

void _ZNSt3__110__function6__funcIZN2md18TileSelectionLogic29runBeforeLayoutAtVariableRateERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_13CameraContextENS2_16ElevationContextENS2_17StyleLogicContextEEEENS9_IJEEEEE20ResolvedDependenciesERNS2_20TileSelectionContextEE3__0NS_9allocatorISL_EEFvvEED0Ev()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *_ZNKSt3__110__function6__funcIZN2md18TileSelectionLogic29runBeforeLayoutAtVariableRateERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_13CameraContextENS2_16ElevationContextENS2_17StyleLogicContextEEEENS9_IJEEEEE20ResolvedDependenciesERNS2_20TileSelectionContextEE3__0NS_9allocatorISL_EEFvvEE7__cloneEv(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42CF500;
  result[1] = v3;
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZN2md18TileSelectionLogic29runBeforeLayoutAtVariableRateERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_13CameraContextENS2_16ElevationContextENS2_17StyleLogicContextEEEENS9_IJEEEEE20ResolvedDependenciesERNS2_20TileSelectionContextEE3__0NS_9allocatorISL_EEFvvEE7__cloneEPNS0_6__baseISO_EE(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42CF500;
  a2[1] = v2;
  return result;
}

_QWORD *md::LogicDependencies<gdc::TypeList<md::CameraContext,md::ElevationContext,md::StyleLogicContext>,gdc::TypeList<>>::buildRequiredTuple<md::CameraContext,md::ElevationContext,md::StyleLogicContext>(_QWORD *result, uint64_t a2, unint64_t a3)
{
  uint8x8_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  if (!a3)
  {
    v5 = 0;
    v6 = 0;
    goto LABEL_71;
  }
  v3 = (uint8x8_t)vcnt_s8((int8x8_t)a3);
  v3.i16[0] = vaddlv_u8(v3);
  if (v3.u32[0] > 1uLL)
  {
    v4 = 0x1AF456233693CD46;
    if (a3 <= 0x1AF456233693CD46)
      v4 = 0x1AF456233693CD46 % a3;
  }
  else
  {
    v4 = (a3 - 1) & 0x1AF456233693CD46;
  }
  v7 = *(_QWORD **)(a2 + 8 * v4);
  if (!v7)
    goto LABEL_25;
  v8 = (_QWORD *)*v7;
  if (!v8)
    goto LABEL_25;
  if (v3.u32[0] < 2uLL)
  {
    while (1)
    {
      v10 = v8[1];
      if (v10 == 0x1AF456233693CD46)
      {
        if (v8[2] == 0x1AF456233693CD46)
          goto LABEL_23;
      }
      else if ((v10 & (a3 - 1)) != v4)
      {
        goto LABEL_25;
      }
      v8 = (_QWORD *)*v8;
      if (!v8)
        goto LABEL_25;
    }
  }
  while (1)
  {
    v9 = v8[1];
    if (v9 == 0x1AF456233693CD46)
      break;
    if (v9 >= a3)
      v9 %= a3;
    if (v9 != v4)
      goto LABEL_25;
LABEL_12:
    v8 = (_QWORD *)*v8;
    if (!v8)
      goto LABEL_25;
  }
  if (v8[2] != 0x1AF456233693CD46)
    goto LABEL_12;
LABEL_23:
  v11 = v8[5];
  if (*(_QWORD *)(v11 + 8) == 0x1AF456233693CD46)
  {
    v6 = *(_QWORD *)(v11 + 32);
    goto LABEL_26;
  }
LABEL_25:
  v6 = 0;
LABEL_26:
  if (v3.u32[0] > 1uLL)
  {
    v12 = 0x8BD499FBD96FBB9ELL;
    if (a3 <= 0x8BD499FBD96FBB9ELL)
      v12 = 0x8BD499FBD96FBB9ELL % a3;
  }
  else
  {
    v12 = (a3 - 1) & 0x8BD499FBD96FBB9ELL;
  }
  v13 = *(_QWORD **)(a2 + 8 * v12);
  if (!v13)
    goto LABEL_48;
  v14 = (_QWORD *)*v13;
  if (!v14)
    goto LABEL_48;
  if (v3.u32[0] < 2uLL)
  {
    while (1)
    {
      v16 = v14[1];
      if (v16 == 0x8BD499FBD96FBB9ELL)
      {
        if (v14[2] == 0x8BD499FBD96FBB9ELL)
          goto LABEL_46;
      }
      else if ((v16 & (a3 - 1)) != v12)
      {
        goto LABEL_48;
      }
      v14 = (_QWORD *)*v14;
      if (!v14)
        goto LABEL_48;
    }
  }
  while (2)
  {
    v15 = v14[1];
    if (v15 != 0x8BD499FBD96FBB9ELL)
    {
      if (v15 >= a3)
        v15 %= a3;
      if (v15 != v12)
        goto LABEL_48;
      goto LABEL_35;
    }
    if (v14[2] != 0x8BD499FBD96FBB9ELL)
    {
LABEL_35:
      v14 = (_QWORD *)*v14;
      if (!v14)
        goto LABEL_48;
      continue;
    }
    break;
  }
LABEL_46:
  v17 = v14[5];
  if (*(_QWORD *)(v17 + 8) == 0x8BD499FBD96FBB9ELL)
  {
    v5 = *(_QWORD *)(v17 + 32);
    goto LABEL_49;
  }
LABEL_48:
  v5 = 0;
LABEL_49:
  if (v3.u32[0] > 1uLL)
  {
    v18 = 0xE42D19AFCA302E68;
    if (a3 <= 0xE42D19AFCA302E68)
      v18 = 0xE42D19AFCA302E68 % a3;
  }
  else
  {
    v18 = (a3 - 1) & 0xE42D19AFCA302E68;
  }
  v19 = *(_QWORD **)(a2 + 8 * v18);
  if (!v19)
    goto LABEL_71;
  v20 = (_QWORD *)*v19;
  if (!v20)
    goto LABEL_71;
  if (v3.u32[0] < 2uLL)
  {
    while (1)
    {
      v22 = v20[1];
      if (v22 == 0xE42D19AFCA302E68)
      {
        if (v20[2] == 0xE42D19AFCA302E68)
          goto LABEL_69;
      }
      else if ((v22 & (a3 - 1)) != v18)
      {
        goto LABEL_71;
      }
      v20 = (_QWORD *)*v20;
      if (!v20)
        goto LABEL_71;
    }
  }
  while (1)
  {
    v21 = v20[1];
    if (v21 == 0xE42D19AFCA302E68)
      break;
    if (v21 >= a3)
      v21 %= a3;
    if (v21 != v18)
      goto LABEL_71;
LABEL_58:
    v20 = (_QWORD *)*v20;
    if (!v20)
      goto LABEL_71;
  }
  if (v20[2] != 0xE42D19AFCA302E68)
    goto LABEL_58;
LABEL_69:
  v23 = v20[5];
  if (*(_QWORD *)(v23 + 8) != 0xE42D19AFCA302E68)
  {
LABEL_71:
    v24 = 0;
    goto LABEL_72;
  }
  v24 = *(_QWORD *)(v23 + 32);
LABEL_72:
  *result = v6;
  result[1] = v5;
  result[2] = v24;
  return result;
}

void md::TileSelectionContext::~TileSelectionContext(md::TileSelectionContext *this)
{
  void *v2;
  void *v3;
  void *v4;
  _QWORD *v5;

  std::__hash_table<std::__hash_value_type<md::TileSelectionTileSetType,gdc::TileSelectionResults>,std::__unordered_map_hasher<md::TileSelectionTileSetType,std::__hash_value_type<md::TileSelectionTileSetType,gdc::TileSelectionResults>,std::hash<md::TileSelectionTileSetType>,std::equal_to<md::TileSelectionTileSetType>,true>,std::__unordered_map_equal<md::TileSelectionTileSetType,std::__hash_value_type<md::TileSelectionTileSetType,gdc::TileSelectionResults>,std::equal_to<md::TileSelectionTileSetType>,std::hash<md::TileSelectionTileSetType>,true>,std::allocator<std::__hash_value_type<md::TileSelectionTileSetType,gdc::TileSelectionResults>>>::__deallocate_node(*((_QWORD **)this + 13));
  v2 = (void *)*((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = 0;
  if (v2)
    operator delete(v2);
  std::__hash_table<std::__hash_value_type<md::TileSelectionTileSetType,gdc::TileSelectionResults>,std::__unordered_map_hasher<md::TileSelectionTileSetType,std::__hash_value_type<md::TileSelectionTileSetType,gdc::TileSelectionResults>,std::hash<md::TileSelectionTileSetType>,std::equal_to<md::TileSelectionTileSetType>,true>,std::__unordered_map_equal<md::TileSelectionTileSetType,std::__hash_value_type<md::TileSelectionTileSetType,gdc::TileSelectionResults>,std::equal_to<md::TileSelectionTileSetType>,std::hash<md::TileSelectionTileSetType>,true>,std::allocator<std::__hash_value_type<md::TileSelectionTileSetType,gdc::TileSelectionResults>>>::__deallocate_node(*((_QWORD **)this + 8));
  v3 = (void *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v3)
    operator delete(v3);
  v4 = (void *)*((_QWORD *)this + 3);
  if (v4)
  {
    *((_QWORD *)this + 4) = v4;
    operator delete(v4);
  }
  v5 = *(_QWORD **)this;
  if (*(_QWORD *)this)
  {
    *((_QWORD *)this + 1) = v5;
    operator delete(v5);
  }
}

void gdc::ManagedObjectHolder<md::TileSelectionContext>::~ManagedObjectHolder(_QWORD *a1)
{
  gdc::ManagedObjectHolder<md::TileSelectionContext>::~ManagedObjectHolder(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t gdc::ObjectHolder<md::TileSelectionContext>::extract@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 32);
  *(_QWORD *)(result + 32) = 0;
  *a2 = v2;
  return result;
}

_QWORD *gdc::ManagedObjectHolder<md::TileSelectionContext>::~ManagedObjectHolder(_QWORD *a1)
{
  uint64_t v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  *a1 = &off_1E42B1090;
  v2 = a1[4];
  if (v2)
  {
    std::__hash_table<std::__hash_value_type<md::TileSelectionTileSetType,gdc::TileSelectionResults>,std::__unordered_map_hasher<md::TileSelectionTileSetType,std::__hash_value_type<md::TileSelectionTileSetType,gdc::TileSelectionResults>,std::hash<md::TileSelectionTileSetType>,std::equal_to<md::TileSelectionTileSetType>,true>,std::__unordered_map_equal<md::TileSelectionTileSetType,std::__hash_value_type<md::TileSelectionTileSetType,gdc::TileSelectionResults>,std::equal_to<md::TileSelectionTileSetType>,std::hash<md::TileSelectionTileSetType>,true>,std::allocator<std::__hash_value_type<md::TileSelectionTileSetType,gdc::TileSelectionResults>>>::__deallocate_node(*(_QWORD **)(v2 + 104));
    v3 = *(void **)(v2 + 88);
    *(_QWORD *)(v2 + 88) = 0;
    if (v3)
      operator delete(v3);
    std::__hash_table<std::__hash_value_type<md::TileSelectionTileSetType,gdc::TileSelectionResults>,std::__unordered_map_hasher<md::TileSelectionTileSetType,std::__hash_value_type<md::TileSelectionTileSetType,gdc::TileSelectionResults>,std::hash<md::TileSelectionTileSetType>,std::equal_to<md::TileSelectionTileSetType>,true>,std::__unordered_map_equal<md::TileSelectionTileSetType,std::__hash_value_type<md::TileSelectionTileSetType,gdc::TileSelectionResults>,std::equal_to<md::TileSelectionTileSetType>,std::hash<md::TileSelectionTileSetType>,true>,std::allocator<std::__hash_value_type<md::TileSelectionTileSetType,gdc::TileSelectionResults>>>::__deallocate_node(*(_QWORD **)(v2 + 64));
    v4 = *(void **)(v2 + 48);
    *(_QWORD *)(v2 + 48) = 0;
    if (v4)
      operator delete(v4);
    v5 = *(void **)(v2 + 24);
    if (v5)
    {
      *(_QWORD *)(v2 + 32) = v5;
      operator delete(v5);
    }
    v6 = *(void **)v2;
    if (*(_QWORD *)v2)
    {
      *(_QWORD *)(v2 + 8) = v6;
      operator delete(v6);
    }
    MEMORY[0x1A1AF4E00](v2, 0x10A0C40149C9738);
  }
  return a1;
}

uint64_t *std::array<std::unique_ptr<gdc::TileSelector>,9ul>::~array(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v2 = a1[8];
  a1[8] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = a1[7];
  a1[7] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = a1[6];
  a1[6] = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v5 = a1[5];
  a1[5] = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  v6 = a1[4];
  a1[4] = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  v7 = a1[3];
  a1[3] = 0;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  v8 = a1[2];
  a1[2] = 0;
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  v9 = a1[1];
  a1[1] = 0;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  v10 = *a1;
  *a1 = 0;
  if (v10)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  return a1;
}

void std::__function::__func<md::TileSelectionLogic::TileSelectionLogic(md::World *)::$_4,std::allocator<md::TileSelectionLogic::TileSelectionLogic(md::World *)::$_4>,geo::optional<gm::Range<double>> ()(geo::QuadTile const&)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::TileSelectionLogic::TileSelectionLogic(md::World *)::$_4,std::allocator<md::TileSelectionLogic::TileSelectionLogic(md::World *)::$_4>,geo::optional<gm::Range<double>> ()(geo::QuadTile const&)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42CF6B0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<md::TileSelectionLogic::TileSelectionLogic(md::World *)::$_4,std::allocator<md::TileSelectionLogic::TileSelectionLogic(md::World *)::$_4>,geo::optional<gm::Range<double>> ()(geo::QuadTile const&)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42CF6B0;
  a2[1] = v2;
  return result;
}

void std::__function::__func<md::TileSelectionLogic::TileSelectionLogic(md::World *)::$_4,std::allocator<md::TileSelectionLogic::TileSelectionLogic(md::World *)::$_4>,geo::optional<gm::Range<double>> ()(geo::QuadTile const&)>::operator()(uint64_t a1@<X0>, uint64_t a2@<X1>, md::TileSelectionLogic *a3@<X8>)
{
  md::TileSelectionLogic::_elevationBoundsForTile(a3, *(const QuadTile **)(a1 + 8), a2);
}

void md::TileSelectionLogic::_elevationBoundsForTile(md::TileSelectionLogic *this, const QuadTile *a2, uint64_t a3)
{
  uint64_t v5;
  int8x16_t v6;
  unsigned int v7;
  int8x16_t v8;
  unsigned int v9;
  unsigned int v10;
  int v11;
  std::__shared_weak_count *v12;
  int v13;
  int v14;
  char v15;
  int v16;
  int v17;
  unsigned int v18;
  char v19;
  int v20;
  int v21;
  int v22;
  unsigned __int16 v23;
  unsigned __int16 v24;
  int v25;
  int v26;
  unsigned int v27;
  float32x2_t v28;
  unsigned int v29;
  float v30;
  uint64_t v31;
  float v32;
  int v33;
  unsigned __int16 v34;
  unsigned __int16 v35;
  int v36;
  int v37;
  unint64_t *p_shared_owners;
  unint64_t v39;
  float64x2_t v40;
  int8x16_t v41;
  uint64_t v42;
  int8x16_t v43;

  if (!LOBYTE(a2[15]._xIdx))
  {
    if (!LOBYTE(a2[13]._yIdx))
    {
      *(_BYTE *)this = 1;
      *((_QWORD *)this + 1) = 0;
      *((_QWORD *)this + 2) = 0;
      return;
    }
    md::DaVinciGroundMetaData::queryMetaTileFromTile((md::DaVinciGroundMetaData *)&v42, *(const QuadTile **)(*(_QWORD *)&a2[5]._type + 320));
    if (v42 && (v10 = *(unsigned __int16 *)(v42 + 800), v10 != 1))
    {
      v13 = *(unsigned __int8 *)(v42 + 169);
      v14 = *(unsigned __int8 *)(a3 + 1) - v13;
      v15 = *(_BYTE *)(a3 + 1) - v13;
      if (v15)
      {
        v16 = *(_DWORD *)(a3 + 4) % (*(_DWORD *)(v42 + 172) << v14);
        v17 = *(_DWORD *)(a3 + 8) % (*(_DWORD *)(v42 + 176) << v14);
        v18 = *(unsigned __int8 *)(v42 + 724);
        v19 = v15 - v18;
        v20 = (unsigned __int16)v17 >> (v15 - v18);
        v21 = (unsigned __int16)v16 >> v19;
        if (v18 < v14)
          v22 = *(unsigned __int8 *)(v42 + 724);
        else
          v22 = v14;
        if (v18 < v14)
          v23 = v20;
        else
          v23 = v17;
        if (v18 < v14)
          v24 = v21;
        else
          v24 = v16;
        v25 = v18 - v22;
        if ((_BYTE)v18 == (_BYTE)v22)
        {
          v26 = 0;
          v27 = *(unsigned __int16 *)(v42 + 800);
        }
        else
        {
          v26 = 0;
          v27 = *(unsigned __int16 *)(v42 + 800);
          do
          {
            v26 += v27 * v27;
            v27 >>= 1;
            --v25;
          }
          while ((_BYTE)v25);
        }
        v29 = v26 + v23 + v27 * v24;
        v30 = *(float *)(v42 + 716);
        v31 = *(_QWORD *)(v42 + 776);
        LOBYTE(v7) = *(_BYTE *)(v31 + 2 * v29);
        v32 = *(float *)(v42 + 720) - v30;
        v28.f32[0] = v30 + (float)((float)((float)v7 * 0.0039216) * v32);
        if (v18 < v14)
          v33 = *(unsigned __int8 *)(v42 + 724);
        else
          v33 = v14;
        if (v18 < v14)
          v34 = v20;
        else
          v34 = v17;
        if (v18 < v14)
          v35 = v21;
        else
          v35 = v16;
        v36 = v18 - v33;
        if ((_BYTE)v18 == (_BYTE)v33)
        {
          v37 = 0;
        }
        else
        {
          v37 = 0;
          do
          {
            v37 += v10 * v10;
            v10 >>= 1;
            --v36;
          }
          while ((_BYTE)v36);
        }
        LOBYTE(v9) = *(_BYTE *)(v31 + 2 * (v37 + v34 + v10 * v35) + 1);
        v28.f32[1] = v30 + (float)((float)((float)v9 * 0.0039216) * v32);
      }
      else
      {
        v28 = *(float32x2_t *)(v42 + 716);
      }
      v11 = 0;
      v8 = (int8x16_t)vcvtq_f64_f32(v28);
      v12 = (std::__shared_weak_count *)v43.i64[0];
      if (!v43.i64[0])
        goto LABEL_46;
    }
    else
    {
      v11 = 1;
      v12 = (std::__shared_weak_count *)v43.i64[0];
      if (!v43.i64[0])
        goto LABEL_46;
    }
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v39 = __ldaxr(p_shared_owners);
    while (__stlxr(v39 - 1, p_shared_owners));
    if (!v39)
    {
      v41 = v8;
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
      v8 = v41;
      if (v11)
        goto LABEL_47;
      goto LABEL_49;
    }
LABEL_46:
    if (v11)
    {
LABEL_47:
      *(_BYTE *)this = 0;
      return;
    }
LABEL_49:
    *(_QWORD *)&v40.f64[1] = v8.i64[1];
    v40.f64[0] = 0.0;
    v6 = vbicq_s8(v8, (int8x16_t)vcgtq_f64((float64x2_t)v8.u64[0], v40));
    goto LABEL_50;
  }
  v5 = *(_QWORD *)&a2[15]._type;
  if (!v5)
  {
    std::__throw_bad_function_call[abi:nn180100]();
    JUMPOUT(0x19FA9E998);
  }
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v5 + 48))(&v42, v5, a3);
  if (!(_BYTE)v42)
    goto LABEL_47;
  v6 = v43;
LABEL_50:
  *(int8x16_t *)((char *)this + 8) = v6;
  *(_BYTE *)this = 1;
}

void std::__function::__func<md::TileSelectionLogic::TileSelectionLogic(md::World *)::$_3,std::allocator<md::TileSelectionLogic::TileSelectionLogic(md::World *)::$_3>,void ()(gdc::GlobeTileSelectorOptions &)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::TileSelectionLogic::TileSelectionLogic(md::World *)::$_3,std::allocator<md::TileSelectionLogic::TileSelectionLogic(md::World *)::$_3>,void ()(gdc::GlobeTileSelectorOptions &)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &unk_1E42CF668;
  return result;
}

void std::__function::__func<md::TileSelectionLogic::TileSelectionLogic(md::World *)::$_3,std::allocator<md::TileSelectionLogic::TileSelectionLogic(md::World *)::$_3>,void ()(gdc::GlobeTileSelectorOptions &)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &unk_1E42CF668;
}

void std::__function::__func<md::TileSelectionLogic::TileSelectionLogic(md::World *)::$_3,std::allocator<md::TileSelectionLogic::TileSelectionLogic(md::World *)::$_3>,void ()(gdc::GlobeTileSelectorOptions &)>::operator()(uint64_t a1, _BYTE *a2)
{
  void *v3;
  char v4;
  id v5;

  +[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  *a2 = 0;
  v5 = v3;
  if (objc_msgSend(v3, "daVinciCameraController"))
    v4 = objc_msgSend(v5, "daVinciBiasLatitudeGlobeTileSelection");
  else
    v4 = 1;
  a2[1] = v4;
  a2[2] = 20;

}

void sub_19FA9EA50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void std::__function::__func<md::GlobeGridBoundsProvider::boundsQuery(void)::{lambda(geo::QuadTile const&)#1},std::allocator<md::GlobeGridBoundsProvider::boundsQuery(void)::{lambda(geo::QuadTile const&)#1}>,geo::optional<gm::Range<double>> ()(geo::QuadTile const&)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::GlobeGridBoundsProvider::boundsQuery(void)::{lambda(geo::QuadTile const&)#1},std::allocator<md::GlobeGridBoundsProvider::boundsQuery(void)::{lambda(geo::QuadTile const&)#1}>,geo::optional<gm::Range<double>> ()(geo::QuadTile const&)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E427A9F8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<md::GlobeGridBoundsProvider::boundsQuery(void)::{lambda(geo::QuadTile const&)#1},std::allocator<md::GlobeGridBoundsProvider::boundsQuery(void)::{lambda(geo::QuadTile const&)#1}>,geo::optional<gm::Range<double>> ()(geo::QuadTile const&)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E427A9F8;
  a2[1] = v2;
  return result;
}

double std::__function::__func<md::GlobeGridBoundsProvider::boundsQuery(void)::{lambda(geo::QuadTile const&)#1},std::allocator<md::GlobeGridBoundsProvider::boundsQuery(void)::{lambda(geo::QuadTile const&)#1}>,geo::optional<gm::Range<double>> ()(geo::QuadTile const&)>::operator()@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  double result;
  _QWORD v6[3];

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(v2 + 24);
  if (!v3)
  {
    std::__throw_bad_function_call[abi:nn180100]();
    JUMPOUT(0x19FA9EB44);
  }
  (*(void (**)(_QWORD *__return_ptr))(*(_QWORD *)v3 + 48))(v6);
  if (LOBYTE(v6[0]))
    *(double *)(v2 + 40) = *(double *)(v2 + 40) + (*(double *)&v6[1] - *(double *)(v2 + 40)) * 0.1;
  result = *(double *)(v2 + 32);
  *(_BYTE *)a2 = 1;
  *(double *)(a2 + 8) = result;
  *(double *)(a2 + 16) = result;
  return result;
}

void std::__function::__func<md::TileSelectionLogic::TileSelectionLogic(md::World *)::$_2,std::allocator<md::TileSelectionLogic::TileSelectionLogic(md::World *)::$_2>,geo::optional<gm::Range<double>> ()(geo::QuadTile const&)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::TileSelectionLogic::TileSelectionLogic(md::World *)::$_2,std::allocator<md::TileSelectionLogic::TileSelectionLogic(md::World *)::$_2>,geo::optional<gm::Range<double>> ()(geo::QuadTile const&)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &unk_1E42CF620;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<md::TileSelectionLogic::TileSelectionLogic(md::World *)::$_2,std::allocator<md::TileSelectionLogic::TileSelectionLogic(md::World *)::$_2>,geo::optional<gm::Range<double>> ()(geo::QuadTile const&)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &unk_1E42CF620;
  a2[1] = v2;
  return result;
}

void std::__function::__func<md::TileSelectionLogic::TileSelectionLogic(md::World *)::$_2,std::allocator<md::TileSelectionLogic::TileSelectionLogic(md::World *)::$_2>,geo::optional<gm::Range<double>> ()(geo::QuadTile const&)>::operator()(uint64_t a1@<X0>, uint64_t a2@<X1>, md::TileSelectionLogic *a3@<X8>)
{
  md::TileSelectionLogic::_elevationBoundsForTile(a3, *(const QuadTile **)(a1 + 8), a2);
}

void std::__function::__func<md::TileSelectionLogic::TileSelectionLogic(md::World *)::$_1,std::allocator<md::TileSelectionLogic::TileSelectionLogic(md::World *)::$_1>,void ()(gdc::GlobeTileSelectorOptions &)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::TileSelectionLogic::TileSelectionLogic(md::World *)::$_1,std::allocator<md::TileSelectionLogic::TileSelectionLogic(md::World *)::$_1>,void ()(gdc::GlobeTileSelectorOptions &)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42CF5D8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<md::TileSelectionLogic::TileSelectionLogic(md::World *)::$_1,std::allocator<md::TileSelectionLogic::TileSelectionLogic(md::World *)::$_1>,void ()(gdc::GlobeTileSelectorOptions &)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42CF5D8;
  a2[1] = v2;
  return result;
}

void std::__function::__func<md::TileSelectionLogic::TileSelectionLogic(md::World *)::$_1,std::allocator<md::TileSelectionLogic::TileSelectionLogic(md::World *)::$_1>,void ()(gdc::GlobeTileSelectorOptions &)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t *v6;
  unsigned __int8 v7;
  unint64_t v8;
  unsigned int v9;
  int v10;
  unint64_t v11;
  BOOL v12;
  uint64_t v13;
  id v14;

  v3 = *(_QWORD *)(a1 + 8);
  +[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings");
  v14 = (id)objc_claimAutoreleasedReturnValue();
  *(_BYTE *)a2 = objc_msgSend(v14, "daVinciPitchedGlobeTileSelection");
  if (objc_msgSend(v14, "daVinciCameraController"))
    v4 = objc_msgSend(v14, "daVinciBiasLatitudeGlobeTileSelection");
  else
    v4 = 1;
  *(_BYTE *)(a2 + 1) = v4;
  *(_WORD *)(a2 + 3) = *(_WORD *)(v3 + 324);
  *(_WORD *)(a2 + 88) = *(_WORD *)(v3 + 326);
  std::__optional_storage_base<std::function<geo::optional<gm::Range<double>> ()(geo::QuadTile const&)>,false>::__assign_from[abi:nn180100]<std::__optional_copy_assign_base<std::function<geo::optional<gm::Range<double>> ()(geo::QuadTile const&)>,false> const&>((_QWORD *)(a2 + 8), v3 + 376);
  v5 = *(_QWORD *)(v3 + 120);
  if (*(_QWORD *)(v5 + 240))
  {
    *(_BYTE *)(a2 + 2) = 0;
    v6 = *(uint64_t **)(v5 + 232);
    if (v6)
    {
      v7 = 0;
      while (1)
      {
        v8 = *((unsigned int *)v6 + 4);
        if (!(_DWORD)v8)
          goto LABEL_8;
        if (v8 <= 0xFF)
          break;
        v10 = 0;
        if (v8 >= 0x101)
          goto LABEL_19;
LABEL_7:
        LODWORD(v8) = -v10 & ~(-v10 >> 31);
LABEL_8:
        v9 = *((_DWORD *)v6 + 6) + v8;
        if (v9 > v7)
          v7 = v9;
        v6 = (uint64_t *)*v6;
        if (!v6)
          goto LABEL_23;
      }
      v10 = 0;
      v11 = *((unsigned int *)v6 + 4);
      do
      {
        ++v10;
        v8 = 2 * v11;
        v12 = v11 >= 0x80;
        v11 *= 2;
      }
      while (!v12);
      if (v8 < 0x101)
        goto LABEL_7;
LABEL_19:
      v13 = 256;
      do
      {
        --v10;
        v13 *= 2;
      }
      while ((uint64_t)v8 > v13);
      goto LABEL_7;
    }
  }
  else
  {
    v7 = 25;
LABEL_23:
    *(_BYTE *)(a2 + 2) = v7;
  }

}

void sub_19FA9ED50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void std::__function::__func<md::TileSelectionLogic::TileSelectionLogic(md::World *)::$_0,std::allocator<md::TileSelectionLogic::TileSelectionLogic(md::World *)::$_0>,geo::optional<gm::Range<double>> ()(geo::QuadTile const&)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::TileSelectionLogic::TileSelectionLogic(md::World *)::$_0,std::allocator<md::TileSelectionLogic::TileSelectionLogic(md::World *)::$_0>,geo::optional<gm::Range<double>> ()(geo::QuadTile const&)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42CF590;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<md::TileSelectionLogic::TileSelectionLogic(md::World *)::$_0,std::allocator<md::TileSelectionLogic::TileSelectionLogic(md::World *)::$_0>,geo::optional<gm::Range<double>> ()(geo::QuadTile const&)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42CF590;
  a2[1] = v2;
  return result;
}

double std::__function::__func<md::TileSelectionLogic::TileSelectionLogic(md::World *)::$_0,std::allocator<md::TileSelectionLogic::TileSelectionLogic(md::World *)::$_0>,geo::optional<gm::Range<double>> ()(geo::QuadTile const&)>::operator()@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, double *a3@<X8>)
{
  uint64_t v4;
  double result;

  v4 = *(_QWORD *)(a1 + 8);
  md::TileSelectionLogic::_elevationBoundsForTile((md::TileSelectionLogic *)a3, (const QuadTile *)v4, a2);
  if (*(_BYTE *)a3)
  {
    result = a3[2] * *(float *)(v4 + 320);
    a3[2] = result;
  }
  return result;
}

_QWORD *md::TileSelectionLogic::configurationDidChange(md::TileSelectionLogic *this)
{
  __int128 v2;
  uint64_t v3;
  _QWORD *v4;
  __int16 *v5;
  __int16 *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  __int16 *v20;
  __int16 *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *v25;
  int v26;
  uint64_t v28;
  __int16 v29;
  _QWORD v30[3];
  _QWORD *v31;
  _QWORD v32[3];
  _QWORD *v33;
  __int128 v34;
  __int128 v35;
  int v36;
  uint8_t buf[8];
  uint64_t v38;

  v38 = *MEMORY[0x1E0C80C00];
  v36 = -1;
  *(_QWORD *)&v2 = -1;
  *((_QWORD *)&v2 + 1) = -1;
  v34 = v2;
  v35 = v2;
  v3 = *(_QWORD *)(*((_QWORD *)this + 15) + 24);
  v32[0] = &off_1E42CF470;
  v32[1] = &v34;
  v4 = v32;
  v32[2] = this;
  v33 = v32;
  v5 = *(__int16 **)(v3 + 8);
  v6 = *(__int16 **)(v3 + 16);
  if (v5 == v6)
  {
    v9 = 4;
  }
  else
  {
    do
    {
      v7 = *((_QWORD *)v5 + 1);
      v8 = *((_QWORD *)v5 + 2);
      v29 = *v5;
      *(_QWORD *)buf = v7;
      v28 = v8;
      if (!v33)
LABEL_62:
        std::__throw_bad_function_call[abi:nn180100]();
      (*(void (**)(_QWORD *, __int16 *, uint8_t *, uint64_t *))(*v33 + 48))(v33, &v29, buf, &v28);
      v5 += 12;
    }
    while (v5 != v6);
    v4 = v33;
    if (v33 == v32)
    {
      v9 = 4;
      v4 = v32;
    }
    else
    {
      if (!v33)
        goto LABEL_10;
      v9 = 5;
    }
  }
  (*(void (**)(_QWORD *))(*v4 + 8 * v9))(v4);
LABEL_10:
  if ((_DWORD)v34 == -1)
  {
    LODWORD(v34) = 256;
  }
  else
  {
    v10 = *((_QWORD *)this + 16);
    if (v10)
      *(_DWORD *)(v10 + 8) = v34;
  }
  if (DWORD1(v34) == -1)
  {
    DWORD1(v34) = 256;
  }
  else
  {
    v11 = *((_QWORD *)this + 17);
    if (v11)
      *(_DWORD *)(v11 + 8) = DWORD1(v34);
  }
  if (DWORD2(v34) == -1)
  {
    DWORD2(v34) = 256;
  }
  else
  {
    v12 = *((_QWORD *)this + 18);
    if (v12)
      *(_DWORD *)(v12 + 8) = DWORD2(v34);
  }
  if (HIDWORD(v34) == -1)
  {
    HIDWORD(v34) = 256;
  }
  else
  {
    v13 = *((_QWORD *)this + 19);
    if (v13)
      *(_DWORD *)(v13 + 8) = HIDWORD(v34);
  }
  if ((_DWORD)v35 == -1)
  {
    LODWORD(v35) = 256;
  }
  else
  {
    v14 = *((_QWORD *)this + 20);
    if (v14)
      *(_DWORD *)(v14 + 8) = v35;
  }
  if (DWORD1(v35) == -1)
  {
    DWORD1(v35) = 256;
  }
  else
  {
    v15 = *((_QWORD *)this + 21);
    if (v15)
      *(_DWORD *)(v15 + 8) = DWORD1(v35);
  }
  if (DWORD2(v35) == -1)
  {
    DWORD2(v35) = 256;
  }
  else
  {
    v16 = *((_QWORD *)this + 22);
    if (v16)
      *(_DWORD *)(v16 + 8) = DWORD2(v35);
  }
  if (HIDWORD(v35) == -1)
  {
    HIDWORD(v35) = 256;
  }
  else
  {
    v17 = *((_QWORD *)this + 23);
    if (v17)
      *(_DWORD *)(v17 + 8) = HIDWORD(v35);
  }
  if (v36 == -1)
  {
    v36 = 256;
  }
  else
  {
    v18 = *((_QWORD *)this + 24);
    if (v18)
      *(_DWORD *)(v18 + 8) = v36;
  }
  *((_DWORD *)this + 78) = -1;
  v30[0] = &off_1E42CF4B8;
  v30[1] = this;
  v19 = v30;
  v30[2] = &v34;
  v31 = v30;
  v21 = *(__int16 **)(v3 + 8);
  v20 = *(__int16 **)(v3 + 16);
  if (v21 == v20)
  {
    v24 = 4;
  }
  else
  {
    do
    {
      v22 = *((_QWORD *)v21 + 1);
      v23 = *((_QWORD *)v21 + 2);
      v29 = *v21;
      *(_QWORD *)buf = v22;
      v28 = v23;
      if (!v31)
        goto LABEL_62;
      (*(void (**)(_QWORD *, __int16 *, uint8_t *, uint64_t *))(*v31 + 48))(v31, &v29, buf, &v28);
      v21 += 12;
    }
    while (v21 != v20);
    v19 = v31;
    if (v31 == v30)
    {
      v24 = 4;
      v19 = v30;
    }
    else
    {
      if (!v31)
        goto LABEL_55;
      v24 = 5;
    }
  }
  (*(void (**)(_QWORD *))(*v19 + 8 * v24))(v19);
LABEL_55:
  if (*((_DWORD *)this + 78) == -1)
    *((_DWORD *)this + 78) = 1;
  if (GEOGetVectorKitVKDefaultLog_onceToken != -1)
    dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_4_11772);
  v25 = (id)GEOGetVectorKitVKDefaultLog_log;
  if (os_log_type_enabled(v25, OS_LOG_TYPE_DEBUG))
  {
    v26 = *((_DWORD *)this + 78);
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = v26;
    _os_log_impl(&dword_19F029000, v25, OS_LOG_TYPE_DEBUG, "Min visible zoom: %d", buf, 8u);
  }

  gdc::GlobeTileSelector::purgeCache(*((_QWORD **)this + 17));
  gdc::GlobeTileSelector::purgeCache(*((_QWORD **)this + 23));
  return gdc::GlobeTileSelector::purgeCache(*((_QWORD **)this + 24));
}

void std::__function::__func<md::TileSelectionLogic::configurationDidChange(void)::$_1,std::allocator<md::TileSelectionLogic::configurationDidChange(void)::$_1>,void ()(unsigned short,gdc::LayerDataSource *,gdc::DataKeyRequester *)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

__n128 std::__function::__func<md::TileSelectionLogic::configurationDidChange(void)::$_1,std::allocator<md::TileSelectionLogic::configurationDidChange(void)::$_1>,void ()(unsigned short,gdc::LayerDataSource *,gdc::DataKeyRequester *)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E42CF4B8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<md::TileSelectionLogic::configurationDidChange(void)::$_1,std::allocator<md::TileSelectionLogic::configurationDidChange(void)::$_1>,void ()(unsigned short,gdc::LayerDataSource *,gdc::DataKeyRequester *)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E42CF4B8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<md::TileSelectionLogic::configurationDidChange(void)::$_1,std::allocator<md::TileSelectionLogic::configurationDidChange(void)::$_1>,void ()(unsigned short,gdc::LayerDataSource *,gdc::DataKeyRequester *)>::operator()(uint64_t a1, unsigned __int16 *a2, uint64_t a3, _QWORD *a4)
{
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int8x8_t *v8;
  int8x8_t v9;
  uint8x8_t v10;
  unint64_t v11;
  uint64_t **v12;
  uint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  _BOOL4 v16;
  _BOOL4 v17;
  uint8x8_t v18;
  unint64_t v19;
  uint64_t ***v20;
  uint64_t **v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t *v24;
  unsigned int v25;
  unsigned int v26;
  NSObject *v27;
  double v28;
  const char *v29;
  int v30;
  int v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int v34;
  NSObject *v35;
  const char *v36;
  const char *v37;
  uint64_t v38;
  char v39;
  int v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  uint8_t buf[4];
  const char *v45;
  __int16 v46;
  double v47;
  __int16 v48;
  int v49;
  __int16 v50;
  int v51;
  __int16 v52;
  int v53;
  __int16 v54;
  int v55;
  uint64_t v56;

  v56 = *MEMORY[0x1E0C80C00];
  v5 = *a2;
  v6 = *a4;
  v7 = *(_QWORD *)(a1 + 8);
  (*(void (**)(uint64_t *__return_ptr, _QWORD))(*(_QWORD *)*a4 + 64))(&v43, *a4);
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)v6 + 48))(&v41, v6);
  v8 = *(int8x8_t **)(v7 + 120);
  v9 = v8[17];
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8(v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      v11 = v5;
      if (*(_QWORD *)&v9 <= v5)
        v11 = v5 % *(_QWORD *)&v9;
    }
    else
    {
      v11 = (v9.i32[0] - 1) & v5;
    }
    v12 = *(uint64_t ***)(*(_QWORD *)&v8[16] + 8 * v11);
    if (v12)
    {
      v13 = *v12;
      if (v13)
      {
        if (v10.u32[0] < 2uLL)
        {
          while (1)
          {
            v15 = v13[1];
            if (v15 == v5)
            {
              if (*((unsigned __int16 *)v13 + 8) == (_DWORD)v5)
                goto LABEL_68;
            }
            else if ((v15 & (*(_QWORD *)&v9 - 1)) != v11)
            {
              goto LABEL_21;
            }
            v13 = (uint64_t *)*v13;
            if (!v13)
              goto LABEL_21;
          }
        }
        do
        {
          v14 = v13[1];
          if (v14 == v5)
          {
            if (*((unsigned __int16 *)v13 + 8) == (_DWORD)v5)
            {
LABEL_68:
              v16 = *((_BYTE *)v13 + 18) == 0;
              if (!(_BYTE)v43)
                goto LABEL_69;
              goto LABEL_22;
            }
          }
          else
          {
            if (v14 >= *(_QWORD *)&v9)
              v14 %= *(_QWORD *)&v9;
            if (v14 != v11)
              break;
          }
          v13 = (uint64_t *)*v13;
        }
        while (v13);
      }
    }
  }
LABEL_21:
  v16 = 0;
  if (!(_BYTE)v43)
  {
LABEL_69:
    if (GEOGetVectorKitVKDefaultLog_onceToken != -1)
      dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_4_11772);
    v35 = (id)GEOGetVectorKitVKDefaultLog_log;
    if (os_log_type_enabled(v35, OS_LOG_TYPE_DEBUG))
    {
      if (v5 > 0x51)
        v36 = "<Invalid>";
      else
        v36 = off_1E42F61C0[v5];
      v37 = "n";
      if (v16)
        v37 = "y";
      *(_DWORD *)buf = 136315394;
      v45 = v36;
      v46 = 2080;
      v47 = *(double *)&v37;
      _os_log_impl(&dword_19F029000, v35, OS_LOG_TYPE_DEBUG, "Skipping Layer: %s, isRequired: %s", buf, 0x16u);
    }

    return;
  }
LABEL_22:
  if ((_BYTE)v41)
    v17 = v16;
  else
    v17 = 0;
  if (!v17)
    goto LABEL_69;
  if (!*(_QWORD *)&v9)
    goto LABEL_47;
  v18 = (uint8x8_t)vcnt_s8(v9);
  v18.i16[0] = vaddlv_u8(v18);
  if (v18.u32[0] > 1uLL)
  {
    v19 = v5;
    if (*(_QWORD *)&v9 <= v5)
      v19 = v5 % *(_QWORD *)&v9;
  }
  else
  {
    v19 = (v9.i32[0] - 1) & v5;
  }
  v20 = *(uint64_t ****)(*(_QWORD *)&v8[16] + 8 * v19);
  if (!v20 || (v21 = *v20) == 0)
  {
LABEL_46:
    v9 = 0;
    goto LABEL_47;
  }
  if (v18.u32[0] < 2uLL)
  {
    v22 = *(_QWORD *)&v9 - 1;
    while (1)
    {
      v24 = v21[1];
      if (v24 == (uint64_t *)v5)
      {
        if (*((unsigned __int16 *)v21 + 8) == (_DWORD)v5)
          goto LABEL_79;
      }
      else if (((unint64_t)v24 & v22) != v19)
      {
        goto LABEL_46;
      }
      v21 = (uint64_t **)*v21;
      if (!v21)
        goto LABEL_46;
    }
  }
  while (1)
  {
    v23 = (unint64_t)v21[1];
    if (v23 == v5)
      break;
    if (v23 >= *(_QWORD *)&v9)
      v23 %= *(_QWORD *)&v9;
    if (v23 != v19)
      goto LABEL_46;
LABEL_36:
    v21 = (uint64_t **)*v21;
    if (!v21)
      goto LABEL_46;
  }
  if (*((unsigned __int16 *)v21 + 8) != (_DWORD)v5)
    goto LABEL_36;
LABEL_79:
  v9 = (int8x8_t)*((unsigned __int16 *)v21 + 10);
LABEL_47:
  v25 = HIDWORD(v43);
  v26 = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 4 * *(_QWORD *)&v9);
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)v6 + 40))(&v38, v6);
  if (GEOGetVectorKitVKDefaultLog_onceToken != -1)
    dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_4_11772);
  v27 = (id)GEOGetVectorKitVKDefaultLog_log;
  if (os_log_type_enabled(v27, OS_LOG_TYPE_DEBUG))
  {
    v28 = log2((double)(v25 / v26));
    if (v5 > 0x51)
      v29 = "<Invalid>";
    else
      v29 = off_1E42F61C0[v5];
    if ((_BYTE)v38)
      v30 = HIDWORD(v38);
    else
      v30 = -1;
    if (v39)
      v31 = v40;
    else
      v31 = -1;
    *(_DWORD *)buf = 136316418;
    v45 = v29;
    v46 = 2048;
    v47 = v28;
    v48 = 1024;
    v49 = HIDWORD(v41);
    v50 = 1024;
    v51 = v42;
    v52 = 1024;
    v53 = v30;
    v54 = 1024;
    v55 = v31;
    _os_log_impl(&dword_19F029000, v27, OS_LOG_TYPE_DEBUG, "Layer: %s Tile Adjust: %f, Download: %d, %d, Visible: %d, %d", buf, 0x2Eu);
  }

  v32 = *(_DWORD *)(v7 + 312);
  v33 = HIDWORD(v41);
  if ((_BYTE)v38)
    v34 = HIDWORD(v38);
  else
    v34 = HIDWORD(v41);
  if (HIDWORD(v41) >= v34)
    v33 = v34;
  if (v33 < v32)
    v32 = v33;
  *(_DWORD *)(v7 + 312) = v32;
}

void std::__function::__func<md::TileSelectionLogic::configurationDidChange(void)::$_0,std::allocator<md::TileSelectionLogic::configurationDidChange(void)::$_0>,void ()(unsigned short,gdc::LayerDataSource *,gdc::DataKeyRequester *)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

__n128 std::__function::__func<md::TileSelectionLogic::configurationDidChange(void)::$_0,std::allocator<md::TileSelectionLogic::configurationDidChange(void)::$_0>,void ()(unsigned short,gdc::LayerDataSource *,gdc::DataKeyRequester *)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E42CF470;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<md::TileSelectionLogic::configurationDidChange(void)::$_0,std::allocator<md::TileSelectionLogic::configurationDidChange(void)::$_0>,void ()(unsigned short,gdc::LayerDataSource *,gdc::DataKeyRequester *)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E42CF470;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<md::TileSelectionLogic::configurationDidChange(void)::$_0,std::allocator<md::TileSelectionLogic::configurationDidChange(void)::$_0>,void ()(unsigned short,gdc::LayerDataSource *,gdc::DataKeyRequester *)>::operator()(uint64_t a1, unsigned __int16 *a2, uint64_t a3, uint64_t a4)
{
  unint64_t v5;
  uint64_t v6;
  int8x8_t *v7;
  int8x8_t v8;
  uint8x8_t v9;
  unint64_t v10;
  uint64_t ***v11;
  uint64_t **v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t *v15;
  unsigned int v16;
  NSObject *v17;
  const char *v18;
  const char *v19;
  unsigned int v20;
  uint64_t v21;
  NSObject *v22;
  const char *v23;
  uint64_t v24;
  uint8_t buf[4];
  const char *v26;
  __int16 v27;
  int v28;
  __int16 v29;
  const char *v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  v5 = *a2;
  v6 = *(_QWORD *)(a1 + 16);
  (*(void (**)(uint64_t *__return_ptr))(**(_QWORD **)a4 + 64))(&v24);
  if (!(_BYTE)v24)
    return;
  v7 = *(int8x8_t **)(v6 + 120);
  v8 = v7[17];
  if (!*(_QWORD *)&v8)
    goto LABEL_22;
  v9 = (uint8x8_t)vcnt_s8(v8);
  v9.i16[0] = vaddlv_u8(v9);
  if (v9.u32[0] > 1uLL)
  {
    v10 = v5;
    if (*(_QWORD *)&v8 <= v5)
      v10 = v5 % *(_QWORD *)&v8;
  }
  else
  {
    v10 = (v8.i32[0] - 1) & v5;
  }
  v11 = *(uint64_t ****)(*(_QWORD *)&v7[16] + 8 * v10);
  if (!v11 || (v12 = *v11) == 0)
  {
LABEL_22:
    v16 = 0;
    goto LABEL_23;
  }
  if (v9.u32[0] < 2uLL)
  {
    v13 = *(_QWORD *)&v8 - 1;
    while (1)
    {
      v15 = v12[1];
      if (v15 == (uint64_t *)v5)
      {
        if (*((unsigned __int16 *)v12 + 8) == (_DWORD)v5)
          goto LABEL_47;
      }
      else if (((unint64_t)v15 & v13) != v10)
      {
        goto LABEL_22;
      }
      v12 = (uint64_t **)*v12;
      if (!v12)
        goto LABEL_22;
    }
  }
  while (1)
  {
    v14 = (unint64_t)v12[1];
    if (v14 == v5)
      break;
    if (v14 >= *(_QWORD *)&v8)
      v14 %= *(_QWORD *)&v8;
    if (v14 != v10)
      goto LABEL_22;
LABEL_12:
    v12 = (uint64_t **)*v12;
    if (!v12)
      goto LABEL_22;
  }
  if (*((unsigned __int16 *)v12 + 8) != (_DWORD)v5)
    goto LABEL_12;
LABEL_47:
  v16 = *((unsigned __int16 *)v12 + 10);
LABEL_23:
  if (GEOGetVectorKitVKDefaultLog_onceToken != -1)
    dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_4_11772);
  v17 = (id)GEOGetVectorKitVKDefaultLog_log;
  if (os_log_type_enabled(v17, OS_LOG_TYPE_DEBUG))
  {
    if (v5 > 0x51)
      v18 = "<Invalid>";
    else
      v18 = off_1E42F61C0[v5];
    if (v16 > 8)
      v19 = "<Invalid>";
    else
      v19 = off_1E42F6158[v16];
    *(_DWORD *)buf = 136315650;
    v26 = v18;
    v27 = 1024;
    v28 = HIDWORD(v24);
    v29 = 2080;
    v30 = v19;
    _os_log_impl(&dword_19F029000, v17, OS_LOG_TYPE_DEBUG, "Layer %s wants grid size %d for tile selection set: %s", buf, 0x1Cu);
  }

  v20 = HIDWORD(v24);
  v21 = *(_QWORD *)(a1 + 8);
  if (HIDWORD(v24) < *(_DWORD *)(v21 + 4 * v16))
  {
    if (HIDWORD(v24) <= 0x7F)
    {
      if (GEOGetVectorKitVKDefaultLog_onceToken != -1)
        dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_4_11772);
      v22 = (id)GEOGetVectorKitVKDefaultLog_log;
      if (os_log_type_enabled(v22, OS_LOG_TYPE_DEBUG))
      {
        if (v5 > 0x51)
          v23 = "<Invalid>";
        else
          v23 = off_1E42F61C0[v5];
        *(_DWORD *)buf = 136315394;
        v26 = v23;
        v27 = 1024;
        v28 = HIDWORD(v24);
        _os_log_impl(&dword_19F029000, v22, OS_LOG_TYPE_DEBUG, "Layer %s wants grid size %d. This is probably a bug!", buf, 0x12u);
      }

      v20 = HIDWORD(v24);
      v21 = *(_QWORD *)(a1 + 8);
    }
    if (v20 <= 0x80)
      v20 = 128;
    *(_DWORD *)(v21 + 4 * v16) = v20;
  }
}

void altitude::OverlayRequestManager::~OverlayRequestManager(altitude::OverlayRequestManager *this)
{
  *(_QWORD *)this = off_1E42C3420;
  while (*((_QWORD *)this + 10))
    (*(void (**)(altitude::OverlayRequestManager *, uint64_t))(*(_QWORD *)this + 48))(this, *((_QWORD *)this + 8) + 32);
  std::__tree<std::__value_type<altitude::HeightFallbackRequestId,std::shared_ptr<karo::AsyncRequestManager::Request>>,std::__map_value_compare<altitude::HeightFallbackRequestId,std::__value_type<altitude::HeightFallbackRequestId,std::shared_ptr<karo::AsyncRequestManager::Request>>,std::less<altitude::HeightFallbackRequestId>,true>,std::allocator<std::__value_type<altitude::HeightFallbackRequestId,std::shared_ptr<karo::AsyncRequestManager::Request>>>>::destroy(*((_QWORD **)this + 9));
  karo::AsyncRequestManager::~AsyncRequestManager(this);
}

{
  *(_QWORD *)this = off_1E42C3420;
  while (*((_QWORD *)this + 10))
    (*(void (**)(altitude::OverlayRequestManager *, uint64_t))(*(_QWORD *)this + 48))(this, *((_QWORD *)this + 8) + 32);
  std::__tree<std::__value_type<altitude::HeightFallbackRequestId,std::shared_ptr<karo::AsyncRequestManager::Request>>,std::__map_value_compare<altitude::HeightFallbackRequestId,std::__value_type<altitude::HeightFallbackRequestId,std::shared_ptr<karo::AsyncRequestManager::Request>>,std::less<altitude::HeightFallbackRequestId>,true>,std::allocator<std::__value_type<altitude::HeightFallbackRequestId,std::shared_ptr<karo::AsyncRequestManager::Request>>>>::destroy(*((_QWORD **)this + 9));
  karo::AsyncRequestManager::~AsyncRequestManager(this);
  JUMPOUT(0x1A1AF4E00);
}

void sub_19FA9FA9C(_Unwind_Exception *a1)
{
  karo::AsyncRequestManager *v1;

  std::__tree<std::__value_type<altitude::HeightFallbackRequestId,std::shared_ptr<karo::AsyncRequestManager::Request>>,std::__map_value_compare<altitude::HeightFallbackRequestId,std::__value_type<altitude::HeightFallbackRequestId,std::shared_ptr<karo::AsyncRequestManager::Request>>,std::less<altitude::HeightFallbackRequestId>,true>,std::allocator<std::__value_type<altitude::HeightFallbackRequestId,std::shared_ptr<karo::AsyncRequestManager::Request>>>>::destroy(*((_QWORD **)v1 + 9));
  karo::AsyncRequestManager::~AsyncRequestManager(v1);
  _Unwind_Resume(a1);
}

void sub_19FA9FB24(_Unwind_Exception *a1)
{
  karo::AsyncRequestManager *v1;

  std::__tree<std::__value_type<altitude::HeightFallbackRequestId,std::shared_ptr<karo::AsyncRequestManager::Request>>,std::__map_value_compare<altitude::HeightFallbackRequestId,std::__value_type<altitude::HeightFallbackRequestId,std::shared_ptr<karo::AsyncRequestManager::Request>>,std::less<altitude::HeightFallbackRequestId>,true>,std::allocator<std::__value_type<altitude::HeightFallbackRequestId,std::shared_ptr<karo::AsyncRequestManager::Request>>>>::destroy(*((_QWORD **)v1 + 9));
  karo::AsyncRequestManager::~AsyncRequestManager(v1);
  _Unwind_Resume(a1);
}

uint64_t karo::AsyncRequestManagerTemplate<std::pair<altitude::TileKey,md::RasterOverlayLevel>,altitude::OverlayRequestArgs>::pruneRequests(uint64_t a1, int a2)
{
  uint64_t *v4;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  BOOL v9;
  uint64_t v10;
  int v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t *v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;

  pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 40));
  v4 = *(uint64_t **)(a1 + 64);
  if (v4 != (uint64_t *)(a1 + 72))
  {
    do
    {
      v6 = (uint64_t *)v4[1];
      v7 = v4;
      if (v6)
      {
        do
        {
          v8 = v6;
          v6 = (uint64_t *)*v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          v8 = (uint64_t *)v7[2];
          v9 = *v8 == (_QWORD)v7;
          v7 = v8;
        }
        while (!v9);
      }
      v10 = v4[9];
      if (atomic_load((unsigned int *)(v10 + 128)))
        *(_DWORD *)(v10 + 180) = a2;
      pthread_mutex_lock(*(pthread_mutex_t **)(v10 + 152));
      v12 = *(_DWORD *)(v10 + 160);
      pthread_mutex_unlock(*(pthread_mutex_t **)(v10 + 152));
      if ((v12 & 1) != 0 && *(_BYTE *)(v10 + 176) && *(_DWORD *)(v10 + 180) != a2
        || (a2 - *(_DWORD *)(v10 + 180)) > *(_DWORD *)(v10 + 184))
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v10 + 16))(v10);
        v13 = (uint64_t *)v4[1];
        v14 = v4;
        if (v13)
        {
          do
          {
            v15 = v13;
            v13 = (uint64_t *)*v13;
          }
          while (v13);
        }
        else
        {
          do
          {
            v15 = (uint64_t *)v14[2];
            v9 = *v15 == (_QWORD)v14;
            v14 = v15;
          }
          while (!v9);
        }
        if (*(uint64_t **)(a1 + 64) == v4)
          *(_QWORD *)(a1 + 64) = v15;
        v16 = *(uint64_t **)(a1 + 72);
        --*(_QWORD *)(a1 + 80);
        std::__tree_remove[abi:nn180100]<std::__tree_node_base<void *> *>(v16, v4);
        v17 = (std::__shared_weak_count *)v4[10];
        if (v17)
        {
          p_shared_owners = (unint64_t *)&v17->__shared_owners_;
          do
            v19 = __ldaxr(p_shared_owners);
          while (__stlxr(v19 - 1, p_shared_owners));
          if (!v19)
          {
            ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
            std::__shared_weak_count::__release_weak(v17);
          }
        }
        operator delete(v4);
      }
      v4 = v8;
    }
    while (v8 != (uint64_t *)(a1 + 72));
  }
  *(_DWORD *)(a1 + 88) = a2;
  return pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 40));
}

void sub_19FA9FCCC(_Unwind_Exception *a1)
{
  uint64_t v1;

  pthread_mutex_unlock(*(pthread_mutex_t **)(v1 + 40));
  _Unwind_Resume(a1);
}

uint64_t karo::AsyncRequestManagerTemplate<std::pair<altitude::TileKey,md::RasterOverlayLevel>,altitude::OverlayRequestArgs>::removeFromRequests(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t *v7;
  BOOL v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;

  pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 40));
  v4 = *(uint64_t **)(a1 + 64);
  if (v4 != (uint64_t *)(a1 + 72))
  {
    v5 = *(uint64_t **)(a1 + 64);
    while (1)
    {
      v6 = (uint64_t *)v5[1];
      if (v5[9] == a2)
        break;
      if (v6)
      {
        do
        {
          v7 = v6;
          v6 = (uint64_t *)*v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          v7 = (uint64_t *)v5[2];
          v8 = *v7 == (_QWORD)v5;
          v5 = v7;
        }
        while (!v8);
      }
      v5 = v7;
      if (v7 == (uint64_t *)(a1 + 72))
        return pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 40));
    }
    if (v6)
    {
      do
      {
        v9 = v6;
        v6 = (uint64_t *)*v6;
      }
      while (v6);
    }
    else
    {
      v10 = v5;
      do
      {
        v9 = (uint64_t *)v10[2];
        v8 = *v9 == (_QWORD)v10;
        v10 = v9;
      }
      while (!v8);
    }
    if (v4 == v5)
      *(_QWORD *)(a1 + 64) = v9;
    v11 = *(uint64_t **)(a1 + 72);
    --*(_QWORD *)(a1 + 80);
    std::__tree_remove[abi:nn180100]<std::__tree_node_base<void *> *>(v11, v5);
    v12 = (std::__shared_weak_count *)v5[10];
    if (v12)
    {
      p_shared_owners = (unint64_t *)&v12->__shared_owners_;
      do
        v14 = __ldaxr(p_shared_owners);
      while (__stlxr(v14 - 1, p_shared_owners));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
    operator delete(v5);
  }
  return pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 40));
}

uint64_t karo::AsyncRequestManagerTemplate<std::pair<altitude::TileKey,md::RasterOverlayLevel>,altitude::OverlayRequestArgs>::clearRequest(uint64_t a1, _DWORD *a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t *v7;
  char v8;
  int v9;
  BOOL v10;
  char v11;
  char v12;
  int v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t *v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;

  pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 40));
  v4 = *(_QWORD *)(a1 + 72);
  if (v4)
  {
    v5 = a2[8];
    v6 = a1 + 72;
    do
    {
      v8 = std::__synth_three_way[abi:nn180100]<altitude::TileKey,altitude::TileKey>((_DWORD *)(v4 + 32), a2);
      if (!v8)
      {
        v9 = *(_DWORD *)(v4 + 64);
        v10 = v9 == v5;
        if (v9 < v5)
          v11 = -1;
        else
          v11 = 1;
        if (v10)
          v8 = 0;
        else
          v8 = v11;
      }
      if (v8 >= 0)
        v7 = (uint64_t *)v4;
      else
        v7 = (uint64_t *)(v4 + 8);
      if (v8 >= 0)
        v6 = v4;
      v4 = *v7;
    }
    while (*v7);
    if (v6 != a1 + 72)
    {
      if ((v12 = std::__synth_three_way[abi:nn180100]<altitude::TileKey,altitude::TileKey>(a2, (_DWORD *)(v6 + 32))) == 0
        && ((v13 = *(_DWORD *)(v6 + 64), v5 < v13) ? (v12 = -1) : (v12 = 1), v5 == v13)
        || (v12 & 0x80) == 0)
      {
        (*(void (**)(_QWORD))(**(_QWORD **)(v6 + 72) + 16))(*(_QWORD *)(v6 + 72));
        v14 = *(_QWORD **)(v6 + 8);
        if (v14)
        {
          do
          {
            v15 = v14;
            v14 = (_QWORD *)*v14;
          }
          while (v14);
        }
        else
        {
          v16 = (_QWORD *)v6;
          do
          {
            v15 = (_QWORD *)v16[2];
            v10 = *v15 == (_QWORD)v16;
            v16 = v15;
          }
          while (!v10);
        }
        if (*(_QWORD *)(a1 + 64) == v6)
          *(_QWORD *)(a1 + 64) = v15;
        v17 = *(uint64_t **)(a1 + 72);
        --*(_QWORD *)(a1 + 80);
        std::__tree_remove[abi:nn180100]<std::__tree_node_base<void *> *>(v17, (uint64_t *)v6);
        v18 = *(std::__shared_weak_count **)(v6 + 80);
        if (v18)
        {
          p_shared_owners = (unint64_t *)&v18->__shared_owners_;
          do
            v20 = __ldaxr(p_shared_owners);
          while (__stlxr(v20 - 1, p_shared_owners));
          if (!v20)
          {
            ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
            std::__shared_weak_count::__release_weak(v18);
          }
        }
        operator delete((void *)v6);
      }
    }
  }
  return pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 40));
}

void sub_19FA9FF7C(_Unwind_Exception *a1)
{
  uint64_t v1;

  pthread_mutex_unlock(*(pthread_mutex_t **)(v1 + 40));
  _Unwind_Resume(a1);
}

void karo::AsyncRequestManagerTemplate<std::pair<altitude::TileKey,md::RasterOverlayLevel>,altitude::OverlayRequestArgs>::createAndQueueRequest(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t v9;
  _QWORD v10[2];

  (*(void (**)(uint64_t *__return_ptr))(*a1 + 64))(a2);
  v4 = a1[6];
  if (v4)
  {
    v5 = *a2;
    v6 = (std::__shared_weak_count *)a2[1];
    v10[0] = v5;
    v10[1] = v6;
    if (v6)
    {
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v8 = __ldxr(p_shared_owners);
      while (__stxr(v8 + 1, p_shared_owners));
      karo::JobManager::queueJob(v4, v10);
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
    else
    {
      karo::JobManager::queueJob(v4, v10);
    }
  }
}

_QWORD *altitude::OverlayRequestManager::createRequest@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  uint64_t v12;
  void *v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  void *v19;
  __int128 v20;
  _QWORD *result;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  _BYTE v26[128];
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v8 = operator new();
  v9 = *(_QWORD *)(a1 + 96);
  v10 = karo::Job::Job(v8, *(_QWORD *)(a1 + 32));
  *(_BYTE *)(v10 + 176) = 0;
  *(_QWORD *)(v10 + 180) = 0xFFFFFFFF00000000;
  *(_QWORD *)v10 = &off_1E428B348;
  *(_BYTE *)(v10 + 188) = 0;
  v11 = *(id *)a3;
  *(_QWORD *)(v8 + 192) = v11;
  *(_QWORD *)(v8 + 200) = 0;
  *(_DWORD *)(v8 + 208) = *(_DWORD *)(a3 + 16);
  *(_QWORD *)(v8 + 216) = *(_QWORD *)(a3 + 24);
  objc_msgSend(MEMORY[0x1E0C99DE8], "arrayWithCapacity:", objc_msgSend(v11, "count"));
  v12 = objc_claimAutoreleasedReturnValue();
  v13 = *(void **)(v8 + 200);
  *(_QWORD *)(v8 + 200) = v12;

  v24 = 0u;
  v25 = 0u;
  v22 = 0u;
  v23 = 0u;
  v14 = *(id *)(v8 + 192);
  v15 = objc_msgSend(v14, "countByEnumeratingWithState:objects:count:", &v22, v26, 16);
  if (v15)
  {
    v16 = *(_QWORD *)v23;
    do
    {
      v17 = 0;
      do
      {
        if (*(_QWORD *)v23 != v16)
          objc_enumerationMutation(v14);
        v18 = *(void **)(v8 + 200);
        objc_msgSend(*(id *)(*((_QWORD *)&v22 + 1) + 8 * v17), "delegate", (_QWORD)v22);
        v19 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v18, "addObject:", v19);

        ++v17;
      }
      while (v15 != v17);
      v15 = objc_msgSend(v14, "countByEnumeratingWithState:objects:count:", &v22, v26, 16);
    }
    while (v15);
  }

  v20 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(v8 + 224) = *(_OWORD *)a2;
  *(_OWORD *)(v8 + 240) = v20;
  *(_DWORD *)(v8 + 256) = *(_DWORD *)(a2 + 32);
  *(_QWORD *)(v8 + 264) = v9;
  *(_QWORD *)(v8 + 312) = 0;
  *(_QWORD *)(v8 + 320) = 0;
  *(_QWORD *)(v8 + 336) = 0;
  *(_QWORD *)(v8 + 344) = 0;
  *(_OWORD *)(v8 + 272) = 0u;
  *(_OWORD *)(v8 + 288) = 0u;
  *(_DWORD *)(v8 + 304) = 0;
  *(_QWORD *)(v8 + 328) = v8 + 336;
  *a4 = v8;
  result = (_QWORD *)operator new();
  *result = &off_1E42E68B0;
  result[1] = 0;
  result[2] = 0;
  result[3] = v8;
  a4[1] = (uint64_t)result;
  return result;
}

void sub_19FAA023C(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void sub_19FAA0258(_Unwind_Exception *a1)
{
  id *v1;
  void *v2;

  karo::Job::~Job((karo::Job *)v1);
  MEMORY[0x1A1AF4E00]();
  _Unwind_Resume(a1);
}

uint64_t karo::AsyncRequestManagerTemplate<std::pair<altitude::TileKey,md::RasterOverlayLevel>,altitude::OverlayRequestArgs>::requestT(uint64_t a1, uint64_t *a2, uint64_t a3, int a4)
{
  uint64_t v8;
  uint64_t v9;
  unsigned int *v10;
  int v11;
  unsigned int v12;
  char v13;
  unsigned int v14;
  _QWORD *v15;
  unsigned int *v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  unsigned int *v20;
  unsigned int v21;
  _QWORD *v22;
  std::__shared_weak_count *v23;
  unint64_t *p_shared_owners;
  unint64_t v25;
  unsigned int *v27;
  std::__shared_weak_count *v28;

  pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 40));
  if (!a4)
    a4 = *(_DWORD *)(a1 + 88) + 1;
  v8 = *a2;
  v9 = a2[1];
  if (*a2 != v9)
  {
    do
    {
      (*(void (**)(unsigned int **__return_ptr, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 96))(&v27, a1, v8, v8 + 40);
      v10 = v27;
      v11 = *(_DWORD *)(v8 + 72);
      v12 = *(_DWORD *)(v8 + 76);
      v13 = *(_BYTE *)(v8 + 80);
      v14 = atomic_load(v27 + 4);
      if (v14 != v11)
        (*(void (**)(unsigned int *))(*(_QWORD *)v27 + 24))(v27);
      v10[45] = a4;
      v10[46] = v12;
      *((_BYTE *)v10 + 176) = v13;
      v15 = *(_QWORD **)(a3 + 8);
      if ((unint64_t)v15 >= *(_QWORD *)(a3 + 16))
      {
        v22 = std::vector<karo::AsyncRequestManager::RequestHandle>::__emplace_back_slow_path<std::shared_ptr<karo::AsyncRequestManager::Request> &>((void **)a3, (uint64_t)v27, (uint64_t)v28);
      }
      else
      {
        *v15 = &off_1E42C2D08;
        v16 = v27;
        v15[1] = v27;
        v17 = (uint64_t)v28;
        v15[2] = v28;
        if (v17)
        {
          v18 = (unint64_t *)(v17 + 8);
          do
            v19 = __ldxr(v18);
          while (__stxr(v19 + 1, v18));
          v16 = (unsigned int *)v15[1];
        }
        if (v16)
        {
          v20 = v16 + 32;
          do
            v21 = __ldaxr(v20);
          while (__stlxr(v21 + 1, v20));
        }
        v22 = v15 + 3;
        *(_QWORD *)(a3 + 8) = v15 + 3;
      }
      *(_QWORD *)(a3 + 8) = v22;
      v23 = v28;
      if (v28)
      {
        p_shared_owners = (unint64_t *)&v28->__shared_owners_;
        do
          v25 = __ldaxr(p_shared_owners);
        while (__stlxr(v25 - 1, p_shared_owners));
        if (!v25)
        {
          ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
          std::__shared_weak_count::__release_weak(v23);
        }
      }
      v8 += 88;
    }
    while (v8 != v9);
  }
  return pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 40));
}

void sub_19FAA0440(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  pthread_mutex_unlock(*(pthread_mutex_t **)(v9 + 40));
  _Unwind_Resume(a1);
}

uint64_t karo::AsyncRequestManagerTemplate<std::pair<altitude::TileKey,md::RasterOverlayLevel>,altitude::OverlayRequestArgs>::requestT@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, unsigned int a5@<W4>, char a6@<W5>, uint64_t a7@<X6>, _QWORD *a8@<X8>)
{
  unsigned int *v16;
  unsigned int v17;
  unsigned int *v18;
  std::__shared_weak_count *v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  unsigned int *v22;
  unsigned int v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  unsigned int *v28;
  std::__shared_weak_count *v29;

  pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 40));
  if (!a3)
    a3 = *(_DWORD *)(a1 + 88) + 1;
  (*(void (**)(unsigned int **__return_ptr, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 96))(&v28, a1, a2, a7);
  v16 = v28;
  v17 = atomic_load(v28 + 4);
  if (v17 != (_DWORD)a4)
    (*(void (**)(unsigned int *, uint64_t))(*(_QWORD *)v28 + 24))(v28, a4);
  v16[45] = a3;
  v16[46] = a5;
  *((_BYTE *)v16 + 176) = a6;
  v18 = v28;
  v19 = v29;
  *a8 = &off_1E42C2D08;
  a8[1] = v18;
  a8[2] = v19;
  if (v19)
  {
    p_shared_owners = (unint64_t *)&v19->__shared_owners_;
    do
      v21 = __ldxr(p_shared_owners);
    while (__stxr(v21 + 1, p_shared_owners));
  }
  if (v18)
  {
    v22 = v18 + 32;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 + 1, v22));
  }
  v24 = v29;
  if (v29)
  {
    v25 = (unint64_t *)&v29->__shared_owners_;
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  return pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 40));
}

void sub_19FAA05A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  pthread_mutex_unlock(*(pthread_mutex_t **)(v9 + 40));
  _Unwind_Resume(a1);
}

uint64_t karo::AsyncRequestManagerTemplate<std::pair<altitude::TileKey,md::RasterOverlayLevel>,altitude::OverlayRequestArgs>::waitOnRequest(uint64_t a1, _DWORD *a2, unsigned int a3)
{
  pthread_mutex_t **v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t *v12;
  char v13;
  int v14;
  BOOL v15;
  char v16;
  char v17;
  int v18;
  std::__shared_weak_count *v19;
  karo::Job *v20;
  unint64_t *p_shared_owners;
  unint64_t v22;
  pthread_mutex_t **v23;
  pthread_mutex_t *v24;
  uint64_t v25;
  unint64_t *v26;
  unint64_t v27;

  v6 = (pthread_mutex_t **)(a1 + 40);
  pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 40));
  v9 = *(_QWORD *)(a1 + 72);
  v7 = a1 + 72;
  v8 = v9;
  if (!v9)
    goto LABEL_28;
  v10 = a2[8];
  v11 = v7;
  do
  {
    v13 = std::__synth_three_way[abi:nn180100]<altitude::TileKey,altitude::TileKey>((_DWORD *)(v8 + 32), a2);
    if (!v13)
    {
      v14 = *(_DWORD *)(v8 + 64);
      v15 = v14 == v10;
      if (v14 < v10)
        v16 = -1;
      else
        v16 = 1;
      if (v15)
        v13 = 0;
      else
        v13 = v16;
    }
    if (v13 >= 0)
      v12 = (uint64_t *)v8;
    else
      v12 = (uint64_t *)(v8 + 8);
    if (v13 >= 0)
      v11 = v8;
    v8 = *v12;
  }
  while (*v12);
  if (v11 == v7
    || ((v17 = std::__synth_three_way[abi:nn180100]<altitude::TileKey,altitude::TileKey>(a2, (_DWORD *)(v11 + 32))) != 0
     || ((v18 = *(_DWORD *)(v11 + 64), v10 < v18) ? (v17 = -1) : (v17 = 1), v10 != v18))
    && v17 < 0)
  {
LABEL_28:
    v19 = 0;
    v25 = 0;
LABEL_29:
    pthread_mutex_unlock(*v6);
    if (!v19)
      return v25;
    goto LABEL_30;
  }
  v20 = *(karo::Job **)(v11 + 72);
  v19 = *(std::__shared_weak_count **)(v11 + 80);
  if (v19)
  {
    p_shared_owners = (unint64_t *)&v19->__shared_owners_;
    do
      v22 = __ldxr(p_shared_owners);
    while (__stxr(v22 + 1, p_shared_owners));
  }
  pthread_mutex_unlock(*v6);
  if (v20)
  {
    karo::Job::waitToFinish(v20, a3);
    v24 = (pthread_mutex_t *)*((_QWORD *)v20 + 19);
    v23 = (pthread_mutex_t **)((char *)v20 + 152);
    pthread_mutex_lock(v24);
    v25 = (_BYTE)v23[1] & 1;
    v6 = v23;
    goto LABEL_29;
  }
  v25 = 0;
  if (!v19)
    return v25;
LABEL_30:
  v26 = (unint64_t *)&v19->__shared_owners_;
  do
    v27 = __ldaxr(v26);
  while (__stlxr(v27 - 1, v26));
  if (!v27)
  {
    ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
    std::__shared_weak_count::__release_weak(v19);
  }
  return v25;
}

void sub_19FAA074C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void karo::AsyncRequestManagerTemplate<std::pair<altitude::TileKey,md::RasterOverlayLevel>,altitude::OverlayRequestArgs>::getRequest(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t **v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t *v12;
  char v13;
  int v14;
  BOOL v15;
  char v16;
  char v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  __int128 v23;
  uint64_t *v24;
  _QWORD *v25;
  int v26;
  _DWORD *v27;
  char v28;
  int v29;
  char v30;
  __int128 v31;
  int v32;
  char *v33;
  __int128 v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  unint64_t *v38;
  unint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t *p_shared_owners;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  unint64_t v48;
  __int128 v49;
  __int128 v50;

  *a4 = 0;
  a4[1] = 0;
  v8 = (uint64_t **)(a1 + 72);
  v9 = *(_QWORD *)(a1 + 72);
  if (v9)
  {
    v10 = *(_DWORD *)(a2 + 32);
    v11 = a1 + 72;
    do
    {
      v13 = std::__synth_three_way[abi:nn180100]<altitude::TileKey,altitude::TileKey>((_DWORD *)(v9 + 32), (_DWORD *)a2);
      if (!v13)
      {
        v14 = *(_DWORD *)(v9 + 64);
        v15 = v14 == v10;
        if (v14 < v10)
          v16 = -1;
        else
          v16 = 1;
        if (v15)
          v13 = 0;
        else
          v13 = v16;
      }
      if (v13 >= 0)
        v12 = (uint64_t *)v9;
      else
        v12 = (uint64_t *)(v9 + 8);
      if (v13 >= 0)
        v11 = v9;
      v9 = *v12;
    }
    while (*v12);
    if ((uint64_t **)v11 != v8)
    {
      if ((v17 = std::__synth_three_way[abi:nn180100]<altitude::TileKey,altitude::TileKey>((_DWORD *)a2, (_DWORD *)(v11 + 32))) == 0&& ((v18 = *(_DWORD *)(v11 + 64), v10 < v18) ? (v17 = -1) : (v17 = 1), v10 == v18)|| (v17 & 0x80) == 0)
      {
        v20 = *(_QWORD *)(v11 + 72);
        v19 = *(_QWORD *)(v11 + 80);
        if (v19)
        {
          v21 = (unint64_t *)(v19 + 8);
          do
            v22 = __ldxr(v21);
          while (__stxr(v22 + 1, v21));
        }
        *a4 = v20;
        a4[1] = v19;
        return;
      }
    }
  }
  (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 64))(&v50, a1, a2, a3);
  v23 = v50;
  *(_OWORD *)a4 = v50;
  v24 = *v8;
  v25 = v8;
  if (*v8)
  {
    v26 = *(_DWORD *)(a2 + 32);
    v49 = v23;
    while (1)
    {
      while (1)
      {
        v25 = v24;
        v27 = v24 + 4;
        v28 = std::__synth_three_way[abi:nn180100]<altitude::TileKey,altitude::TileKey>((_DWORD *)a2, (_DWORD *)v24 + 8);
        if (!v28)
        {
          v29 = *((_DWORD *)v25 + 16);
          v28 = v26 < v29 ? -1 : 1;
          if (v26 == v29)
            break;
        }
        if ((v28 & 0x80) == 0)
          break;
        v24 = (uint64_t *)*v25;
        v8 = (uint64_t **)v25;
        if (!*v25)
          goto LABEL_43;
      }
      v30 = std::__synth_three_way[abi:nn180100]<altitude::TileKey,altitude::TileKey>(v27, (_DWORD *)a2);
      v31 = v49;
      if (!v30)
      {
        v32 = *((_DWORD *)v25 + 16);
        v30 = v32 < v26 ? -1 : 1;
        if (v32 == v26)
          break;
      }
      if ((v30 & 0x80) == 0)
        break;
      v8 = (uint64_t **)(v25 + 1);
      v24 = (uint64_t *)v25[1];
      if (!v24)
        goto LABEL_43;
    }
    v33 = (char *)v25;
    v37 = *((_QWORD *)&v49 + 1);
    if (!*((_QWORD *)&v49 + 1))
      goto LABEL_50;
  }
  else
  {
LABEL_43:
    v33 = (char *)operator new(0x58uLL);
    v34 = *(_OWORD *)(a2 + 16);
    *((_OWORD *)v33 + 2) = *(_OWORD *)a2;
    *((_OWORD *)v33 + 3) = v34;
    *((_DWORD *)v33 + 16) = *(_DWORD *)(a2 + 32);
    *((_QWORD *)v33 + 9) = 0;
    *((_QWORD *)v33 + 10) = 0;
    *(_QWORD *)v33 = 0;
    *((_QWORD *)v33 + 1) = 0;
    *((_QWORD *)v33 + 2) = v25;
    *v8 = (uint64_t *)v33;
    v35 = **(_QWORD **)(a1 + 64);
    v36 = (uint64_t *)v33;
    if (v35)
    {
      *(_QWORD *)(a1 + 64) = v35;
      v36 = *v8;
    }
    std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 72), v36);
    ++*(_QWORD *)(a1 + 80);
    v31 = *(_OWORD *)a4;
    v37 = a4[1];
    if (!v37)
      goto LABEL_50;
  }
  v38 = (unint64_t *)(v37 + 8);
  do
    v39 = __ldxr(v38);
  while (__stxr(v39 + 1, v38));
LABEL_50:
  v40 = (std::__shared_weak_count *)*((_QWORD *)v33 + 10);
  *(_OWORD *)(v33 + 72) = v31;
  if (v40)
  {
    p_shared_owners = (unint64_t *)&v40->__shared_owners_;
    do
      v42 = __ldaxr(p_shared_owners);
    while (__stlxr(v42 - 1, p_shared_owners));
    if (!v42)
    {
      ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
      std::__shared_weak_count::__release_weak(v40);
    }
  }
  v43 = *(_QWORD *)(a1 + 48);
  if (v43)
  {
    v44 = *a4;
    v45 = (std::__shared_weak_count *)a4[1];
    *(_QWORD *)&v50 = v44;
    *((_QWORD *)&v50 + 1) = v45;
    if (v45)
    {
      v46 = (unint64_t *)&v45->__shared_owners_;
      do
        v47 = __ldxr(v46);
      while (__stxr(v47 + 1, v46));
      karo::JobManager::queueJob(v43, &v50);
      do
        v48 = __ldaxr(v46);
      while (__stlxr(v48 - 1, v46));
      if (!v48)
      {
        ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
        std::__shared_weak_count::__release_weak(v45);
      }
    }
    else
    {
      karo::JobManager::queueJob(v43, &v50);
    }
  }
}

void sub_19FAA0A4C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t std::__synth_three_way[abi:nn180100]<altitude::TileKey,altitude::TileKey>(_DWORD *a1, _DWORD *a2)
{
  unsigned int v2;
  unsigned int v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;

  v2 = a1[4];
  v3 = a2[4];
  if (v2 == v3 && a1[5] == a2[5] && a1[6] == a2[6] && a2[7] == a1[7])
  {
    if (*a1 == *a2)
    {
      v4 = a1[1];
      v5 = a2[1];
      if (v4 == v5)
      {
        if (a1[2] < a2[2])
          return 255;
      }
      else if (v4 < v5)
      {
        return 255;
      }
    }
    else if (*a1 < *a2)
    {
      return 255;
    }
  }
  else
  {
    if (v2 < v3)
      return 255;
    if (v2 <= v3)
    {
      v7 = a1[5];
      v8 = a2[5];
      if (v7 < v8)
        return 255;
      if (v7 <= v8)
      {
        v9 = a1[6];
        v10 = a2[6];
        if (v9 < v10)
          return 255;
        if (v9 <= v10 && a1[7] < a2[7])
          return 255;
      }
    }
    if (v2 != v3 || a2[5] != a1[5] || a2[6] != a1[6])
      goto LABEL_33;
  }
  if (a1[7] == a2[7])
  {
    if (*a2 == *a1)
    {
      v11 = a2[1];
      v12 = a1[1];
      if (v11 == v12)
        return a2[2] < a1[2];
      if (v11 >= v12)
        return 0;
    }
    else if (*a2 >= *a1)
    {
      return 0;
    }
    return 1;
  }
LABEL_33:
  if (v3 < v2)
    return 1;
  if (v3 > v2)
    return 0;
  v13 = a2[5];
  v14 = a1[5];
  if (v13 < v14)
    return 1;
  if (v13 > v14)
    return 0;
  v15 = a2[6];
  v16 = a1[6];
  if (v15 < v16)
    return 1;
  if (v15 > v16)
    return 0;
  return a2[7] < a1[7];
}

void std::__shared_ptr_pointer<OverlayLoadJob *,std::shared_ptr<karo::AsyncRequestManager::Request>::__shared_ptr_default_delete<karo::AsyncRequestManager::Request,OverlayLoadJob>,std::allocator<OverlayLoadJob>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_pointer<OverlayLoadJob *,std::shared_ptr<karo::AsyncRequestManager::Request>::__shared_ptr_default_delete<karo::AsyncRequestManager::Request,OverlayLoadJob>,std::allocator<OverlayLoadJob>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void OverlayLoadJob::~OverlayLoadJob(OverlayLoadJob *this)
{
  OverlayLoadJob::~OverlayLoadJob(this);
  JUMPOUT(0x1A1AF4E00);
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  void *v11;

  *(_QWORD *)this = &off_1E428B348;
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((_QWORD **)this + 42));
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 40);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)*((_QWORD *)this + 37);
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)*((_QWORD *)this + 37);
    if (!v5)
      goto LABEL_11;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  v8 = (std::__shared_weak_count *)*((_QWORD *)this + 35);
  if (v8)
  {
    v9 = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  v11 = (void *)*((_QWORD *)this + 25);
  *((_QWORD *)this + 25) = 0;

  karo::Job::~Job(this);
}

void OverlayLoadJob::jobStep(OverlayLoadJob *this)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  int v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD **v27;
  uint64_t *v28;
  uint64_t *v29;
  char *v30;
  __int128 v31;
  uint64_t v32;
  _QWORD *v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  unint64_t v37;
  int v38;
  unsigned int *v39;
  unsigned int v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  unsigned int v47;
  char v48;
  int v49;
  int v50;
  void *v51;
  id v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t i;
  void *v56;
  char *v57;
  __int128 v58;
  std::__shared_weak_count *v59;
  unint64_t *p_shared_owners;
  unint64_t v61;
  id v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t j;
  void *v66;
  CGContext *v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  std::__shared_weak_count *v71;
  unint64_t *v72;
  unint64_t v73;
  unint64_t *v74;
  unint64_t v75;
  unint64_t *v76;
  unint64_t v77;
  unsigned int v78;
  int v79;
  int v80;
  unsigned int v81;
  int v82;
  uint64_t *v83;
  void (__cdecl *v84)(std::__shared_weak_count *__hidden);
  std::__shared_weak_count *v85;
  unint64_t *v86;
  __int128 v87;
  uint64_t v88;
  uint64_t v89;
  std::__shared_weak_count *v90;
  unint64_t *v91;
  unint64_t v92;
  int v93;
  unint64_t *v94;
  unint64_t v95;
  unint64_t v96;
  unint64_t *v97;
  unint64_t v98;
  std::__shared_weak_count *v99;
  unint64_t *v100;
  unint64_t v101;
  unint64_t v102;
  int v103;
  size_t v104;
  unint64_t v105;
  int v106;
  __int128 *p_dst;
  uint64_t v108;
  uint64_t v109;
  void **v110;
  std::__shared_weak_count *v111;
  unint64_t *v112;
  std::__shared_weak_count *v113;
  std::string *v114;
  int v115;
  const void *v116;
  unint64_t v117;
  std::__shared_weak_count *v118;
  unint64_t *v119;
  uint64_t v120;
  size_t v121;
  std::__shared_weak_count_vtbl *v122;
  unint64_t shared_weak_owners;
  uint64_t v124;
  unint64_t v125;
  std::__shared_weak_count *v126;
  unint64_t *v127;
  unint64_t v128;
  uint64_t OverlayElement;
  unint64_t v130;
  std::__shared_weak_count *v131;
  unint64_t *v132;
  unint64_t v133;
  unint64_t v134;
  __int128 v135;
  unint64_t v136;
  unint64_t v137;
  std::__shared_weak_count *v138;
  unint64_t *v139;
  unint64_t v140;
  void *v141;
  std::__shared_weak_count *v142;
  unint64_t *v143;
  unint64_t v144;
  std::__shared_weak_count *v145;
  unint64_t *v146;
  unint64_t v147;
  BOOL v148;
  int v149;
  void (__cdecl *v150)(std::__shared_weak_count *__hidden);
  char v151;
  uint64_t v152;
  __int128 v153;
  void *v154;
  char v155;
  uint64_t v156[2];
  char v157;
  unsigned int v158[4];
  void *v159[2];
  unsigned __int8 v160;
  __int128 v161;
  _BYTE v162[40];
  uint64_t v163;
  int v164;
  _BYTE v165[48];
  uint64_t v166;
  _WORD v167[26];
  int v168;
  int v169;
  char v170;
  __int128 v171;
  __int128 v172;
  __int128 v173;
  __int128 v174;
  __int128 v175;
  __int128 v176;
  __int128 v177;
  __int128 v178;
  __int128 v179;
  __int128 v180;
  __int128 v181;
  _QWORD v182[2];
  _QWORD v183[2];
  uint64_t v184;
  uint64_t v185;
  __int128 v186;
  __int128 __dst;
  __int128 v188;
  __int128 v189;
  __int128 v190;
  __int128 v191;
  __int128 v192;
  _QWORD v193[2];
  __int128 v194;
  uint64_t v195[2];
  _BYTE v196[128];
  _BYTE v197[128];
  _BYTE v198[128];
  uint64_t v199;

  v199 = *MEMORY[0x1E0C80C00];
  v2 = *((_QWORD *)this + 29);
  v194 = *((_OWORD *)this + 15);
  v193[1] = v2;
  v193[0] = 17;
  v151 = (*(uint64_t (**)(_QWORD, _QWORD *))(**((_QWORD **)this + 33) + 112))(*((_QWORD *)this + 33), v193);
  v3 = *((_DWORD *)this + 64) != 0;
  v4 = *((_DWORD *)this + 60);
  v6 = *((_DWORD *)this + 61);
  v5 = *((unsigned int *)this + 62);
  v189 = 0u;
  v190 = 0u;
  v191 = 0u;
  v192 = 0u;
  v7 = *((id *)this + 24);
  v8 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v189, v198, 16);
  if (v8)
  {
    v9 = *(_QWORD *)v190;
    v10 = v5 | ((unint64_t)((1 << v4) + ~v6) << 32);
    v11 = v4 | 0x200000000;
LABEL_3:
    v12 = 0;
    while (1)
    {
      if (*(_QWORD *)v190 != v9)
        objc_enumerationMutation(v7);
      v13 = *(void **)(*((_QWORD *)&v189 + 1) + 8 * v12);
      *(_QWORD *)&v161 = v10;
      *((_QWORD *)&v161 + 1) = v11;
      if (objc_msgSend(v13, "level") == v3 && (objc_msgSend(v13, "canDrawKey:", &v161) & 1) != 0)
        break;
      if (v8 == ++v12)
      {
        v8 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v189, v198, 16);
        if (v8)
          goto LABEL_3;
        goto LABEL_11;
      }
    }

    if ((v151 & 1) == 0)
      goto LABEL_52;
    if (*((_QWORD *)this + 34))
    {
LABEL_50:
      if (*(_QWORD *)karo::Job::getSubJob((pthread_mutex_t **)this, 1))
        return;
      if (!*((_QWORD *)this + 34))
        goto LABEL_202;
LABEL_52:
      v47 = *((_DWORD *)this + 60);
      if (v47 >= 0x1F)
        v48 = 31;
      else
        v48 = *((_DWORD *)this + 60);
      v49 = ~(-1 << v48) - *((_DWORD *)this + 61);
      v50 = *((_DWORD *)this + 62);
      LOBYTE(v184) = -1;
      BYTE1(v184) = v47;
      HIDWORD(v184) = v49;
      LODWORD(v185) = v50;
      v182[0] = v10;
      v182[1] = v11;
      v51 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", objc_msgSend(*((id *)this + 24), "count"));
      v180 = 0u;
      v181 = 0u;
      v178 = 0u;
      v179 = 0u;
      v52 = *((id *)this + 24);
      v53 = objc_msgSend(v52, "countByEnumeratingWithState:objects:count:", &v178, v197, 16);
      if (v53)
      {
        v54 = *(_QWORD *)v179;
        do
        {
          for (i = 0; i != v53; ++i)
          {
            if (*(_QWORD *)v179 != v54)
              objc_enumerationMutation(v52);
            v56 = *(void **)(*((_QWORD *)&v178 + 1) + 8 * i);
            if (objc_msgSend(v56, "level") == v3 && objc_msgSend(v56, "canDrawKey:", v182))
              objc_msgSend(v51, "addObject:", v56);
          }
          v53 = objc_msgSend(v52, "countByEnumeratingWithState:objects:count:", &v178, v197, 16);
        }
        while (v53);
      }

      if (objc_msgSend(v51, "count"))
      {
        v57 = (char *)operator new(0x48uLL);
        *((_QWORD *)v57 + 1) = 0;
        *((_QWORD *)v57 + 2) = 0;
        *(_QWORD *)v57 = &off_1E42DB978;
        v58 = 0uLL;
        *(_OWORD *)(v57 + 40) = 0u;
        *(_OWORD *)(v57 + 24) = 0u;
        *((_DWORD *)v57 + 14) = 512;
        *(_QWORD *)(v57 + 60) = 1065353216;
        v59 = (std::__shared_weak_count *)*((_QWORD *)this + 40);
        *((_QWORD *)this + 39) = v57 + 24;
        *((_QWORD *)this + 40) = v57;
        if (v59)
        {
          p_shared_owners = (unint64_t *)&v59->__shared_owners_;
          do
            v61 = __ldaxr(p_shared_owners);
          while (__stlxr(v61 - 1, p_shared_owners));
          if (!v61)
          {
            ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
            std::__shared_weak_count::__release_weak(v59);
            v58 = 0uLL;
          }
        }
        v176 = v58;
        v177 = v58;
        v174 = v58;
        v175 = v58;
        v62 = v51;
        v63 = objc_msgSend(v62, "countByEnumeratingWithState:objects:count:", &v174, v196, 16);
        if (v63)
        {
          v64 = *(_QWORD *)v175;
          do
          {
            for (j = 0; j != v63; ++j)
            {
              if (*(_QWORD *)v175 != v64)
                objc_enumerationMutation(v62);
              v66 = *(void **)(*((_QWORD *)&v174 + 1) + 8 * j);
              v67 = (CGContext *)md::RasterOverlayData::drawContext(*((md::RasterOverlayData **)this + 39));
              memset(v162, 0, 32);
              v161 = 0u;
              CGContextGetBaseCTM();
              CGContextSaveGState(v67);
              objc_msgSend(v66, "drawKey:inContext:", v182, v67);
              CGContextRestoreGState(v67);
              v171 = v161;
              v172 = *(_OWORD *)v162;
              v173 = *(_OWORD *)&v162[16];
              CGContextSetBaseCTM();
              v68 = objc_msgSend(v66, "blendMode");
            }
            v69 = v68;
            v63 = objc_msgSend(v62, "countByEnumeratingWithState:objects:count:", &v174, v196, 16);
          }
          while (v63);
        }
        else
        {
          v69 = 0;
        }

      }
      else
      {
        v69 = 0;
      }
      if (!*((_QWORD *)this + 39))
      {
        *((_BYTE *)this + 188) = 0;
        pthread_mutex_lock(*((pthread_mutex_t **)this + 19));
        *((_DWORD *)this + 40) |= 1u;
        pthread_mutex_unlock(*((pthread_mutex_t **)this + 19));

        return;
      }
      v70 = *((_QWORD *)this + 34);
      v71 = (std::__shared_weak_count *)*((_QWORD *)this + 35);
      if (v71)
      {
        v72 = (unint64_t *)&v71->__shared_owners_;
        do
          v73 = __ldxr(v72);
        while (__stxr(v73 + 1, v72));
        *(_QWORD *)&v161 = v70;
        *((_QWORD *)&v161 + 1) = v71;
        v74 = (unint64_t *)&v71->__shared_owners_;
        do
          v75 = __ldxr(v74);
        while (__stxr(v75 + 1, v74));
      }
      else
      {
        v161 = v70;
      }
      v163 = 0;
      memset(&v162[8], 0, 32);
      v164 = -1;
      memset(v165, 0, sizeof(v165));
      v166 = 0x3FF0000000000000;
      v167[24] = 255;
      v169 = 0;
      v168 = 0;
      v170 = 0;
      if (v71)
      {
        v76 = (unint64_t *)&v71->__shared_owners_;
        do
          v77 = __ldaxr(v76);
        while (__stlxr(v77 - 1, v76));
        if (!v77)
        {
          ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
          std::__shared_weak_count::__release_weak(v71);
        }
      }
      v78 = BYTE1(v184);
      if (*((_QWORD *)this + 34))
        v79 = 32;
      else
        v79 = 16;
      if (BYTE1(v184) == 1)
        v80 = 32;
      else
        v80 = v79;
      if (BYTE1(v184))
        v81 = v80;
      else
        v81 = 64;
      altitude::HeightMeshBuilder::buildHeightMesh((uint64_t)&v161, (const QuadTile *)&v184, v81, 3u, *(float *)(*((_QWORD *)this + 39) + 40));
      if ((unint64_t)(v69 - 1) < 0x11)
        v82 = v69;
      else
        v82 = 0;
      *((_DWORD *)this + 76) = v82;
      v158[0] = v78;
      v158[1] = ~(-1 << v78) - HIDWORD(v184);
      v158[2] = v185;
      v158[3] = 0;
      v157 = 12;
      strcpy((char *)v156, "/dtmoverlay/");
      v155 = 0;
      LOBYTE(v154) = 0;
      altitude::Tile::createTileName(v159, v158, v156, (uint64_t *)&v154);
      v152 = *((_QWORD *)this + 1);
      v83 = (uint64_t *)*((_QWORD *)this + 39);
      v84 = (void (__cdecl *)(std::__shared_weak_count *__hidden))*v83;
      if (!*v83)
      {
        v85 = (std::__shared_weak_count *)operator new(0x58uLL);
        v85->__shared_owners_ = 0;
        v86 = (unint64_t *)&v85->__shared_owners_;
        v85->__shared_weak_owners_ = 0;
        v85->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DED18;
        v85[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B63B0;
        v85[1].__shared_weak_owners_ = 0;
        v85[2].__vftable = 0;
        v85[1].__shared_owners_ = 0;
        LODWORD(v85[2].__shared_owners_) = 0;
        *(_QWORD *)&v87 = 0x100000001;
        *((_QWORD *)&v87 + 1) = 0x100000001;
        *(_OWORD *)((char *)&v85[2].__shared_owners_ + 4) = v87;
        *(std::__shared_weak_count_vtbl **)((char *)&v85[3].__vftable + 4) = (std::__shared_weak_count_vtbl *)0x100000001;
        HIDWORD(v85[3].__shared_owners_) = 0;
        v88 = operator new();
        v89 = v83[1];
        v90 = (std::__shared_weak_count *)v83[2];
        if (v90)
        {
          v91 = (unint64_t *)&v90->__shared_owners_;
          do
            v92 = __ldxr(v91);
          while (__stxr(v92 + 1, v91));
        }
        v93 = *(_DWORD *)(v89 + 12);
        *(_DWORD *)(v88 + 32) = 0;
        *(_QWORD *)(v88 + 16) = 0;
        *(_QWORD *)(v88 + 24) = 0;
        *(_QWORD *)(v88 + 56) = 0x100000001;
        *(_DWORD *)(v88 + 64) = 0;
        *(_DWORD *)(v88 + 68) = v93;
        *(_QWORD *)(v88 + 72) = 0x100000001;
        *(_QWORD *)(v88 + 88) = 0;
        *(_QWORD *)(v88 + 96) = 0;
        *(_QWORD *)(v88 + 80) = 0;
        *(_QWORD *)v88 = &off_1E42BE438;
        *(_QWORD *)(v88 + 8) = 0;
        *(_QWORD *)(v88 + 40) = &unk_1E42BE458;
        *(_QWORD *)(v88 + 48) = "";
        *(_DWORD *)(v88 + 104) = *(_DWORD *)(v89 + 8);
        *(_QWORD *)(v88 + 112) = v89;
        *(_QWORD *)(v88 + 120) = v90;
        if (v90)
        {
          v94 = (unint64_t *)&v90->__shared_owners_;
          do
            v95 = __ldxr(v94);
          while (__stxr(v95 + 1, v94));
        }
        *(_WORD *)(v88 + 128) = 0;
        *(_BYTE *)(v88 + 130) = 1;
        *(_QWORD *)(v88 + 136) = v85 + 1;
        *(_QWORD *)(v88 + 144) = v85;
        do
          v96 = __ldxr(v86);
        while (__stxr(v96 + 1, v86));
        *(_QWORD *)(v88 + 80) = *(_QWORD *)(v89 + 16);
        *v83 = v88;
        if (v90)
        {
          v97 = (unint64_t *)&v90->__shared_owners_;
          do
            v98 = __ldaxr(v97);
          while (__stlxr(v98 - 1, v97));
          if (!v98)
          {
            ((void (*)(std::__shared_weak_count *))v90->__on_zero_shared)(v90);
            std::__shared_weak_count::__release_weak(v90);
          }
        }
        v99 = (std::__shared_weak_count *)v83[2];
        v83[1] = 0;
        v83[2] = 0;
        if (v99)
        {
          v100 = (unint64_t *)&v99->__shared_owners_;
          do
            v101 = __ldaxr(v100);
          while (__stlxr(v101 - 1, v100));
          if (!v101)
          {
            ((void (*)(std::__shared_weak_count *))v99->__on_zero_shared)(v99);
            std::__shared_weak_count::__release_weak(v99);
          }
        }
        do
          v102 = __ldaxr(v86);
        while (__stlxr(v102 - 1, v86));
        if (!v102)
        {
          ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
          std::__shared_weak_count::__release_weak(v85);
        }
        v84 = (void (__cdecl *)(std::__shared_weak_count *__hidden))*v83;
      }
      v103 = (char)v160;
      if ((v160 & 0x80u) == 0)
        v104 = v160;
      else
        v104 = (size_t)v159[1];
      v105 = v104 + 8;
      if (v104 + 8 >= 0x7FFFFFFFFFFFFFF8)
        abort();
      v106 = *((_DWORD *)this + 76);
      if (v105 >= 0x17)
      {
        v108 = (v105 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v105 | 7) != 0x17)
          v108 = v105 | 7;
        v109 = v108 + 1;
        p_dst = (__int128 *)operator new(v108 + 1);
        *(_QWORD *)&v188 = v109 | 0x8000000000000000;
        *(_QWORD *)&__dst = p_dst;
        *((_QWORD *)&__dst + 1) = v104 + 8;
      }
      else
      {
        *(_QWORD *)&v188 = 0;
        __dst = 0uLL;
        p_dst = &__dst;
        BYTE7(v188) = v104 + 8;
        if (!v104)
          goto LABEL_145;
      }
      if (v103 >= 0)
        v110 = v159;
      else
        v110 = (void **)v159[0];
      memmove(p_dst, v110, v104);
LABEL_145:
      strcpy((char *)p_dst + v104, "/Element");
      v111 = (std::__shared_weak_count *)operator new(0xA8uLL);
      v111->__shared_owners_ = 0;
      v112 = (unint64_t *)&v111->__shared_owners_;
      v111->__shared_weak_owners_ = 0;
      v111->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E6140;
      v111[1].__vftable = (std::__shared_weak_count_vtbl *)off_1E42BE278;
      v113 = v111 + 1;
      v114 = (std::string *)&v111[1].__shared_owners_;
      v115 = SBYTE7(v188);
      if (SBYTE7(v188) < 0)
      {
        std::string::__init_copy_ctor_external(v114, (const std::string::value_type *)__dst, *((std::string::size_type *)&__dst + 1));
      }
      else
      {
        *(_OWORD *)&v114->__r_.__value_.__l.__data_ = __dst;
        v111[2].__vftable = (std::__shared_weak_count_vtbl *)v188;
      }
      v111[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42C4580;
      v111[2].__shared_owners_ = 0;
      LOBYTE(v111[2].__shared_weak_owners_) = 1;
      v111[3].std::__shared_count = 0u;
      *(_OWORD *)&v111[3].__shared_weak_owners_ = 0u;
      *(_OWORD *)&v111[4].__shared_owners_ = 0u;
      v111[5].std::__shared_count = 0u;
      v111[5].__shared_weak_owners_ = 0;
      LOBYTE(v111[6].__vftable) = 1;
      v111[6].__shared_owners_ = 0;
      v111[6].__shared_weak_owners_ = 0;
      if (v115 < 0)
        operator delete((void *)__dst);
      if (v84)
      {
        v149 = v106;
        v150 = v84;
        v116 = *(const void **)&v162[24];
        v117 = *(_QWORD *)&v162[32] - *(_QWORD *)&v162[24];
        v118 = (std::__shared_weak_count *)operator new(0xF8uLL);
        v118->__shared_owners_ = 0;
        v119 = (unint64_t *)&v118->__shared_owners_;
        v118->__shared_weak_owners_ = 0;
        v118->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DF1E8;
        v120 = (v117 >> 1);
        ggl::BufferData::BufferData((uint64_t)&v118[1], 2, 1, 0, 7, v120);
        LODWORD(v118[10].__vftable) = 0;
        v118[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B6B88;
        v118[1].__shared_owners_ = 2;
        v118[9].__shared_owners_ = (uint64_t)&unk_1E42B6BA8;
        v118[9].__shared_weak_owners_ = (uint64_t)"/render/tilebasic/indexdata";
        v121 = 2 * v120;
        if ((v117 >> 1))
        {
          v122 = v118[4].__vftable;
          memcpy(v122, v116, 2 * v120);
          if (v122)
          {
            shared_weak_owners = v118[3].__shared_weak_owners_;
            if (shared_weak_owners <= v121)
              shared_weak_owners = 2 * v120;
            v118[3].__shared_owners_ = 0;
            v118[3].__shared_weak_owners_ = shared_weak_owners;
          }
        }
        else
        {
          memcpy(0, v116, v121);
        }
        v124 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v152 + 8) + 40) + 48);
        *(_QWORD *)&__dst = v118 + 1;
        *((_QWORD *)&__dst + 1) = v118;
        do
          v125 = __ldxr(v119);
        while (__stxr(v125 + 1, v119));
        v126 = *(std::__shared_weak_count **)(v124 + 224);
        v195[0] = *(_QWORD *)(v124 + 216);
        v195[1] = (uint64_t)v126;
        if (v126)
        {
          v127 = (unint64_t *)&v126->__shared_owners_;
          do
            v128 = __ldxr(v127);
          while (__stxr(v128 + 1, v127));
          OverlayElement = altitude::Renderable::createOverlayElement(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v152 + 8) + 40) + 48), (uint64_t)v165, (uint64_t)v167, *(uint64_t *)&v162[8], *(std::__shared_weak_count **)&v162[16], (uint64_t *)&__dst, v195, v150, v149);
          do
            v130 = __ldaxr(v127);
          while (__stlxr(v130 - 1, v127));
          if (!v130)
          {
            ((void (*)(std::__shared_weak_count *))v126->__on_zero_shared)(v126);
            std::__shared_weak_count::__release_weak(v126);
          }
        }
        else
        {
          OverlayElement = altitude::Renderable::createOverlayElement(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v152 + 8) + 40) + 48), (uint64_t)v165, (uint64_t)v167, *(uint64_t *)&v162[8], *(std::__shared_weak_count **)&v162[16], (uint64_t *)&__dst, v195, v150, v149);
        }
        v131 = (std::__shared_weak_count *)*((_QWORD *)&__dst + 1);
        if (*((_QWORD *)&__dst + 1))
        {
          v132 = (unint64_t *)(*((_QWORD *)&__dst + 1) + 8);
          do
            v133 = __ldaxr(v132);
          while (__stlxr(v133 - 1, v132));
          if (!v133)
          {
            ((void (*)(std::__shared_weak_count *))v131->__on_zero_shared)(v131);
            std::__shared_weak_count::__release_weak(v131);
          }
        }
        do
          v134 = __ldaxr(v119);
        while (__stlxr(v134 - 1, v119));
        if (!v134)
        {
          ((void (*)(std::__shared_weak_count *))v118->__on_zero_shared)(v118);
          std::__shared_weak_count::__release_weak(v118);
        }
        v113 = v111 + 1;
        ((void (*)(std::__shared_weak_count *, uint64_t))v111[1].__on_zero_shared)(&v111[1], OverlayElement);
      }
      *(_QWORD *)&v135 = v113;
      *((_QWORD *)&v135 + 1) = v111;
      do
        v136 = __ldxr(v112);
      while (__stxr(v136 + 1, v112));
      do
        v137 = __ldaxr(v112);
      while (__stlxr(v137 - 1, v112));
      if (!v137)
      {
        v153 = v135;
        ((void (*)(std::__shared_weak_count *))v111->__on_zero_shared)(v111);
        std::__shared_weak_count::__release_weak(v111);
        v135 = v153;
      }
      v138 = (std::__shared_weak_count *)*((_QWORD *)this + 37);
      *((_OWORD *)this + 18) = v135;
      if (v138)
      {
        v139 = (unint64_t *)&v138->__shared_owners_;
        do
          v140 = __ldaxr(v139);
        while (__stlxr(v140 - 1, v139));
        if (!v140)
        {
          ((void (*)(std::__shared_weak_count *))v138->__on_zero_shared)(v138);
          std::__shared_weak_count::__release_weak(v138);
        }
      }
      if ((char)v160 < 0)
      {
        operator delete(v159[0]);
        if ((v155 & 0x80000000) == 0)
        {
LABEL_188:
          if ((v157 & 0x80000000) == 0)
            goto LABEL_189;
          goto LABEL_207;
        }
      }
      else if ((v155 & 0x80000000) == 0)
      {
        goto LABEL_188;
      }
      operator delete(v154);
      if ((v157 & 0x80000000) == 0)
      {
LABEL_189:
        v141 = *(void **)&v162[24];
        if (!*(_QWORD *)&v162[24])
          goto LABEL_191;
        goto LABEL_190;
      }
LABEL_207:
      operator delete((void *)v156[0]);
      v141 = *(void **)&v162[24];
      if (!*(_QWORD *)&v162[24])
      {
LABEL_191:
        v142 = *(std::__shared_weak_count **)&v162[16];
        if (*(_QWORD *)&v162[16])
        {
          v143 = (unint64_t *)(*(_QWORD *)&v162[16] + 8);
          do
            v144 = __ldaxr(v143);
          while (__stlxr(v144 - 1, v143));
          if (!v144)
          {
            ((void (*)(std::__shared_weak_count *))v142->__on_zero_shared)(v142);
            std::__shared_weak_count::__release_weak(v142);
          }
        }
        v145 = (std::__shared_weak_count *)*((_QWORD *)&v161 + 1);
        if (*((_QWORD *)&v161 + 1))
        {
          v146 = (unint64_t *)(*((_QWORD *)&v161 + 1) + 8);
          do
            v147 = __ldaxr(v146);
          while (__stlxr(v147 - 1, v146));
          if (!v147)
          {
            ((void (*)(std::__shared_weak_count *))v145->__on_zero_shared)(v145);
            std::__shared_weak_count::__release_weak(v145);
          }
        }

LABEL_202:
        pthread_mutex_lock(*((pthread_mutex_t **)this + 19));
        v148 = (*((_DWORD *)this + 40) & 2) == 0;
        pthread_mutex_unlock(*((pthread_mutex_t **)this + 19));
        *((_BYTE *)this + 188) = v148;
        goto LABEL_203;
      }
LABEL_190:
      *(_QWORD *)&v162[32] = v141;
      operator delete(v141);
      goto LABEL_191;
    }
    v14 = *((_QWORD *)this + 1);
    v15 = *((_QWORD *)this + 33);
    v16 = *(unsigned int *)(v14 + 88);
    v17 = atomic_load((unsigned int *)this + 4);
    (*(void (**)(__int128 *__return_ptr, uint64_t, _QWORD *, uint64_t, uint64_t))(*(_QWORD *)v15 + 104))(&v161, v15, v193, v16, v17);
    v18 = v161;
    if ((_QWORD)v161)
    {
      v19 = *((_QWORD *)&v161 + 1);
      if (*((_QWORD *)&v161 + 1))
      {
        v20 = (unint64_t *)(*((_QWORD *)&v161 + 1) + 8);
        do
          v21 = __ldxr(v20);
        while (__stxr(v21 + 1, v20));
      }
      v22 = (std::__shared_weak_count *)*((_QWORD *)this + 35);
      *((_QWORD *)this + 34) = v18;
      *((_QWORD *)this + 35) = v19;
      if (v22)
      {
        v23 = (unint64_t *)&v22->__shared_owners_;
        do
          v24 = __ldaxr(v23);
        while (__stlxr(v24 - 1, v23));
        if (!v24)
        {
          ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
          std::__shared_weak_count::__release_weak(v22);
        }
      }
      karo::Job::removeSubJob((pthread_mutex_t **)this, 1);
      v25 = *((_QWORD *)this + 33);
      v26 = *((_QWORD *)this + 34);
      v185 = 0;
      v184 = 0;
      v186 = *(_OWORD *)(v26 + 136);
      (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t *))(*(_QWORD *)v25 + 144))(&__dst, v25, &v184);
      DWORD1(__dst) = *(_DWORD *)(*((_QWORD *)this + 34) + 152);
      HIDWORD(__dst) = altitude::GeoResourceManager::getVersionForGEOType(v14, __dst, DWORD1(__dst));
      v27 = (_QWORD **)((char *)this + 328);
      v28 = std::__tree<altitude::TileKey>::__find_equal<altitude::TileKey>((uint64_t)this + 328, &v184, (unsigned int *)&__dst);
      if (!*v28)
      {
        v29 = v28;
        v30 = (char *)operator new(0x40uLL);
        v31 = v188;
        *(_OWORD *)(v30 + 28) = __dst;
        *(_OWORD *)(v30 + 44) = v31;
        v32 = v184;
        *(_QWORD *)v30 = 0;
        *((_QWORD *)v30 + 1) = 0;
        *((_QWORD *)v30 + 2) = v32;
        *v29 = (uint64_t)v30;
        v33 = (_QWORD *)**v27;
        if (v33)
        {
          *v27 = v33;
          v30 = (char *)*v29;
        }
        std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*((uint64_t **)this + 42), (uint64_t *)v30);
        ++*((_QWORD *)this + 43);
      }
LABEL_35:
      v38 = 1;
      goto LABEL_36;
    }
    if (karo::AsyncRequestManager::RequestHandle::getStatus((karo::AsyncRequestManager::RequestHandle *)v162))
    {
      v34 = *(std::__shared_weak_count **)&v162[16];
      v183[0] = *(_QWORD *)&v162[8];
      v183[1] = *(_QWORD *)&v162[16];
      if (*(_QWORD *)&v162[16])
      {
        v35 = (unint64_t *)(*(_QWORD *)&v162[16] + 8);
        do
          v36 = __ldxr(v35);
        while (__stxr(v36 + 1, v35));
        karo::Job::addBlockingSubJob((uint64_t *)this, v183, 1, 0);
        do
          v37 = __ldaxr(v35);
        while (__stlxr(v37 - 1, v35));
        if (!v37)
        {
          ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
          std::__shared_weak_count::__release_weak(v34);
        }
        goto LABEL_35;
      }
      v38 = 1;
      karo::Job::addBlockingSubJob((uint64_t *)this, v183, 1, 0);
    }
    else
    {
      karo::Job::removeSubJob((pthread_mutex_t **)this, 1);
      (*(void (**)(OverlayLoadJob *))(*(_QWORD *)this + 16))(this);
      v38 = 0;
    }
LABEL_36:
    *(_QWORD *)v162 = &off_1E42C2D08;
    if (*(_QWORD *)&v162[8])
    {
      v39 = (unsigned int *)(*(_QWORD *)&v162[8] + 128);
      do
        v40 = __ldaxr(v39);
      while (__stlxr(v40 - 1, v39));
    }
    v41 = *(std::__shared_weak_count **)&v162[16];
    if (*(_QWORD *)&v162[16])
    {
      v42 = (unint64_t *)(*(_QWORD *)&v162[16] + 8);
      do
        v43 = __ldaxr(v42);
      while (__stlxr(v43 - 1, v42));
      if (!v43)
      {
        ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
        std::__shared_weak_count::__release_weak(v41);
      }
    }
    v44 = (std::__shared_weak_count *)*((_QWORD *)&v161 + 1);
    if (*((_QWORD *)&v161 + 1))
    {
      v45 = (unint64_t *)(*((_QWORD *)&v161 + 1) + 8);
      do
        v46 = __ldaxr(v45);
      while (__stlxr(v46 - 1, v45));
      if (!v46)
      {
        ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
        std::__shared_weak_count::__release_weak(v44);
      }
    }
    if (!v38)
      goto LABEL_52;
    goto LABEL_50;
  }
LABEL_11:

  *((_BYTE *)this + 188) = 0;
LABEL_203:
  pthread_mutex_lock(*((pthread_mutex_t **)this + 19));
  *((_DWORD *)this + 40) |= 1u;
  pthread_mutex_unlock(*((pthread_mutex_t **)this + 19));
}

void sub_19FAA1C5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  std::pair<std::shared_ptr<altitude::GEOTileDataPrivate>,karo::AsyncRequestManager::RequestHandle>::~pair(&a31);
  _Unwind_Resume(a1);
}

void sub_19FAA1C78(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t OverlayLoadJob::succeeded(OverlayLoadJob *this)
{
  return *((unsigned __int8 *)this + 188);
}

void std::__shared_ptr_emplace<md::RasterOverlayData>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DB978;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<md::RasterOverlayData>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DB978;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_emplace<md::RasterOverlayData>::__on_zero_shared(_QWORD *a1)
{
  CGContext *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  v2 = (CGContext *)a1[6];
  if (v2)
    CGContextRelease(v2);
  v3 = a1[3];
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (std::__shared_weak_count *)a1[5];
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

void karo::StaticSphereTreeElement::~StaticSphereTreeElement(karo::StaticSphereTreeElement *this)
{
  JUMPOUT(0x1A1AF4E00);
}

void karo::StaticSphereTreeElement::build(uint64_t a1, _QWORD *a2, unint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6)
{
  unint64_t v6;
  unint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  int8x16_t *v11;
  float64x2_t v12;
  float64x2_t v13;
  unint64_t v14;
  uint64_t *v15;
  double v16;
  double v17;
  double v18;
  float64x2_t v19;
  float64x2_t v20;
  float64x2_t v21;
  float64x2_t v22;
  float64x2_t v23;
  float64x2_t v24;
  double v25;
  double v26;
  double v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  int8x16_t *v31;
  double v32;
  int v33;
  double v34;
  int8x16_t *v35;
  double v36;
  double v37;
  uint64_t v38;
  double v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  double v45;
  double v46;
  uint64_t v47;
  uint64_t v48;
  double v49;
  uint64_t v50;
  int8x16_t *v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  BOOL (*v56)(uint64_t, uint64_t);

  while (1)
  {
    *(_QWORD *)(a1 + 8) = a5;
    *(_QWORD *)(a1 + 16) = a6;
    if (a4 <= a3)
      break;
    v6 = a4;
    v7 = a3;
    v8 = a2;
    v9 = a1;
    v10 = *a2;
    v11 = (int8x16_t *)(*a2 + 8 * a3);
    v12 = *(float64x2_t *)(v11->i64[0] + 40);
    v13 = *(float64x2_t *)(v11->i64[0] + 56);
    if (a3 + 1 < a4)
    {
      v14 = ~a3 + a4;
      v15 = &v11->i64[1];
      while (1)
      {
        v20 = *(float64x2_t *)(*v15 + 40);
        v21 = vsubq_f64(v20, v12);
        v22 = vmulq_f64(v21, v21);
        v23 = vaddq_f64((float64x2_t)vdupq_laneq_s64((int64x2_t)v22, 1), v22);
        v19 = *(float64x2_t *)(*v15 + 56);
        v24 = vsubq_f64(v19, v13);
        v25 = sqrt(vmlaq_f64(v23, v24, v24).f64[0]);
        v26 = *(double *)(*v15 + 64);
        v27 = v25 + v26;
        if (v26 + v13.f64[1] >= v25)
        {
          if (v13.f64[1] >= v27)
          {
            v19 = v13;
            goto LABEL_5;
          }
          if (v26 >= v25 + v13.f64[1])
            goto LABEL_6;
        }
        v16 = fmin(v25 - v26, -v13.f64[1]);
        v17 = (fmax(v13.f64[1], v27) - v16) * 0.5;
        v18 = (v17 + v16) / v25;
        v19.f64[0] = v13.f64[0] + v18 * v24.f64[0];
        v12 = vmlaq_n_f64(v12, v21, v18);
        v19.f64[1] = v17;
LABEL_5:
        v20 = v12;
LABEL_6:
        ++v15;
        v13 = v19;
        v12 = v20;
        if (!--v14)
          goto LABEL_13;
      }
    }
    v19 = *(float64x2_t *)(v11->i64[0] + 56);
    v20 = *(float64x2_t *)(v11->i64[0] + 40);
LABEL_13:
    *(float64x2_t *)(v9 + 40) = v20;
    *(float64x2_t *)(v9 + 56) = v19;
    v28 = a4 - 1;
    v29 = a4 - a3;
    if (a4 == a3)
    {
      v56 = karo::elementLess<0>;
      std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(karo::StaticSphereTreeElement const*,karo::StaticSphereTreeElement const*),karo::StaticSphereTreeElement**,false>((uint64_t)v11, v11, (unsigned int (**)(uint64_t))&v56, 0, 1);
      v30 = 8 * v28;
      v31 = (int8x16_t *)(*v8 + 8 * v7);
      v32 = *(double *)(*(_QWORD *)(*v8 + 8 * v28) + 40) - *(double *)(v31->i64[0] + 40);
      if (v32 >= 0.0)
        v33 = 0;
      else
        v33 = -1;
      if (v32 >= 0.0)
        v34 = v32;
      else
        v34 = 0.0;
      v56 = karo::elementLess<1>;
      std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(karo::StaticSphereTreeElement const*,karo::StaticSphereTreeElement const*),karo::StaticSphereTreeElement**,false>((uint64_t)v31, v31, (unsigned int (**)(uint64_t))&v56, 0, 1);
      v35 = (int8x16_t *)(*v8 + 8 * v7);
      v36 = *(double *)(*(_QWORD *)(*v8 + v30) + 48) - *(double *)(v35->i64[0] + 48);
      if (v36 >= v34)
        v33 = 1;
      v37 = fmax(v36, v34);
      v56 = karo::elementLess<2>;
      std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(karo::StaticSphereTreeElement const*,karo::StaticSphereTreeElement const*),karo::StaticSphereTreeElement**,false>((uint64_t)v35, v35, (unsigned int (**)(uint64_t))&v56, 0, 1);
      v38 = *v8;
      v39 = *(double *)(*(_QWORD *)(*v8 + v30) + 56);
      v40 = *(_QWORD *)(*v8 + 8 * v7);
    }
    else
    {
      v41 = 8 * a4;
      v56 = karo::elementLess<0>;
      std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(karo::StaticSphereTreeElement const*,karo::StaticSphereTreeElement const*),karo::StaticSphereTreeElement**,false>((uint64_t)v11, (int8x16_t *)(v10 + 8 * a4), (unsigned int (**)(uint64_t))&v56, 126 - 2 * __clz((uint64_t)(v10 + 8 * a4 - (_QWORD)v11) >> 3), 1);
      v42 = *v8;
      v43 = 8 * v28;
      v44 = *v8 + 8 * v7;
      v45 = *(double *)(*(_QWORD *)(*v8 + 8 * v28) + 40) - *(double *)(*(_QWORD *)v44 + 40);
      if (v45 >= 0.0)
        v33 = 0;
      else
        v33 = -1;
      if (v45 >= 0.0)
        v46 = v45;
      else
        v46 = 0.0;
      v56 = karo::elementLess<1>;
      std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(karo::StaticSphereTreeElement const*,karo::StaticSphereTreeElement const*),karo::StaticSphereTreeElement**,false>(v44, (int8x16_t *)(v42 + v41), (unsigned int (**)(uint64_t))&v56, 126 - 2 * __clz((v42 + v41 - v44) >> 3), 1);
      v47 = *v8;
      v48 = *v8 + 8 * v7;
      v49 = *(double *)(*(_QWORD *)(*v8 + v43) + 48) - *(double *)(*(_QWORD *)v48 + 48);
      if (v49 >= v46)
        v33 = 1;
      v37 = fmax(v49, v46);
      v56 = karo::elementLess<2>;
      std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(karo::StaticSphereTreeElement const*,karo::StaticSphereTreeElement const*),karo::StaticSphereTreeElement**,false>(v48, (int8x16_t *)(v47 + v41), (unsigned int (**)(uint64_t))&v56, 126 - 2 * __clz((v47 + v41 - v48) >> 3), 1);
      v38 = *v8;
      v39 = *(double *)(*(_QWORD *)(*v8 + v43) + 56);
      v40 = *(_QWORD *)(*v8 + 8 * v7);
    }
    if (v39 - *(double *)(v40 + 56) >= v37)
    {
      v33 = 2;
    }
    else if (v33 < 0)
    {
      goto LABEL_40;
    }
    v50 = v38 + 8 * v7;
    v51 = (int8x16_t *)(v38 + 8 * v6);
    v56 = (BOOL (*)(uint64_t, uint64_t))off_1E42F3120[v33];
    v52 = 126 - 2 * __clz(((uint64_t)v51->i64 - v50) >> 3);
    if (v6 == v7)
      v53 = 0;
    else
      v53 = v52;
    std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(karo::StaticSphereTreeElement const*,karo::StaticSphereTreeElement const*),karo::StaticSphereTreeElement**,false>(v50, v51, (unsigned int (**)(uint64_t))&v56, v53, 1);
LABEL_40:
    v54 = (v29 >> 1);
    if ((v29 & 0x1FFFFFFFELL) == 2)
    {
      *(_QWORD *)(v9 + 24) = *(_QWORD *)(*v8 + 8 * v7);
    }
    else
    {
      karo::Pool<karo::StaticSphereTreeElement>::construct<>((uint64_t **)(*(_QWORD *)(v9 + 8) + 8));
      *(_QWORD *)(v9 + 24) = v55;
      if (!v55)
        goto LABEL_44;
    }
    karo::StaticSphereTreeElement::build();
LABEL_44:
    if ((_DWORD)v29 - (v29 >> 1) == 1)
    {
      a3 = v54 + v7;
      a1 = *(_QWORD *)(*v8 + 8 * (v54 + v7));
      *(_QWORD *)(v9 + 32) = a1;
      a5 = *(_QWORD *)(v9 + 8);
      a2 = v8;
      a4 = v54 + v7;
    }
    else
    {
      karo::Pool<karo::StaticSphereTreeElement>::construct<>((uint64_t **)(*(_QWORD *)(v9 + 8) + 8));
      *(_QWORD *)(v9 + 32) = a1;
      if (!a1)
        return;
      a3 = v54 + v7;
      a4 = v54 + v7 + v29 - (v29 >> 1);
      a5 = *(_QWORD *)(v9 + 8);
      a2 = v8;
    }
    a6 = v9;
  }
}

BOOL karo::elementLess<0>(uint64_t a1, uint64_t a2)
{
  return *(double *)(a1 + 40) < *(double *)(a2 + 40);
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(karo::StaticSphereTreeElement const*,karo::StaticSphereTreeElement const*),karo::StaticSphereTreeElement**,false>(uint64_t result, int8x16_t *a2, unsigned int (**a3)(uint64_t), uint64_t a4, char a5)
{
  int8x16_t *v7;
  int8x16_t *v8;
  uint64_t *v9;
  int8x16_t *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unsigned int (*v14)(uint64_t);
  char v15;
  int v16;
  uint64_t v17;
  char v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  char v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  char v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  unsigned int v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char v53;
  uint64_t *v54;
  int8x16_t *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t *v58;
  uint64_t v59;
  uint64_t v60;
  int8x16_t *v61;
  int8x16_t *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  BOOL v66;
  uint64_t v67;
  int8x16_t *v68;
  int8x16_t *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t *v74;
  uint64_t v75;
  char v76;
  uint64_t v77;
  int8x16_t *v78;
  uint64_t *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t *v85;
  BOOL v86;
  char v87;
  uint64_t v88;
  uint64_t *v89;
  uint64_t *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  int64_t v95;
  BOOL v96;
  uint64_t v97;
  uint64_t *v98;
  uint64_t *v99;
  uint64_t *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t *v107;
  uint64_t *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t *v113;
  unint64_t *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t *v117;
  uint64_t v118;
  unint64_t v119;
  uint64_t *v120;
  unint64_t v121;
  uint64_t *v122;
  uint64_t v123;
  uint64_t v124;
  int64_t v126;

  v7 = (int8x16_t *)result;
LABEL_2:
  v8 = a2;
  v9 = &a2[-1].i64[1];
  v10 = v7;
  while (2)
  {
    v7 = v10;
    v11 = (char *)v8 - (char *)v10;
    v12 = ((char *)v8 - (char *)v10) >> 3;
    switch(v12)
    {
      case 0:
      case 1:
        return result;
      case 2:
        result = ((uint64_t (*)(uint64_t, uint64_t))*a3)(*v9, v10->i64[0]);
        if ((_DWORD)result)
        {
          v75 = v10->i64[0];
          v10->i64[0] = *v9;
          goto LABEL_165;
        }
        return result;
      case 3:
        v76 = ((uint64_t (*)(uint64_t, uint64_t))*a3)(v10->i64[1], v10->i64[0]);
        result = ((uint64_t (*)(uint64_t, uint64_t))*a3)(*v9, v10->i64[1]);
        if ((v76 & 1) != 0)
        {
          v77 = v10->i64[0];
          if ((_DWORD)result)
          {
            v10->i64[0] = *v9;
            *v9 = v77;
          }
          else
          {
            v10->i64[0] = v10->i64[1];
            v10->i64[1] = v77;
            result = ((uint64_t (*)(uint64_t))*a3)(*v9);
            if ((_DWORD)result)
            {
              v75 = v10->i64[1];
              v10->i64[1] = *v9;
LABEL_165:
              *v9 = v75;
            }
          }
        }
        else if ((_DWORD)result)
        {
          v103 = v10->i64[1];
          v10->i64[1] = *v9;
          *v9 = v103;
          result = ((uint64_t (*)(uint64_t, uint64_t))*a3)(v10->i64[1], v10->i64[0]);
          goto LABEL_138;
        }
        return result;
      case 4:
        return std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(karo::StaticSphereTreeElement const*,karo::StaticSphereTreeElement const*),karo::StaticSphereTreeElement**>(v10, &v10->i64[1], (int8x16_t *)v10[1].i64, v9, a3);
      case 5:
        v78 = v10 + 1;
        v79 = &v10[1].i64[1];
        std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(karo::StaticSphereTreeElement const*,karo::StaticSphereTreeElement const*),karo::StaticSphereTreeElement**>(v10, &v10->i64[1], (int8x16_t *)v10[1].i64, &v10[1].i64[1], a3);
        result = ((uint64_t (*)(uint64_t, uint64_t))*a3)(*v9, v10[1].i64[1]);
        if ((_DWORD)result)
        {
          v80 = *v79;
          *v79 = *v9;
          *v9 = v80;
          result = ((uint64_t (*)(uint64_t, uint64_t))*a3)(*v79, v78->i64[0]);
          if ((_DWORD)result)
          {
            v81 = v78->i64[0];
            v78->i64[0] = *v79;
            *v79 = v81;
            result = ((uint64_t (*)(void))*a3)();
            if ((_DWORD)result)
            {
              v83 = v10->i64[1];
              v82 = v10[1].i64[0];
              v84 = v10->i64[0];
              v10->i64[1] = v82;
              v10[1].i64[0] = v83;
              result = ((uint64_t (*)(uint64_t, uint64_t))*a3)(v82, v84);
LABEL_138:
              if ((_DWORD)result)
                *v10 = vextq_s8(*v10, *v10, 8uLL);
            }
          }
        }
        return result;
      default:
        if (v11 <= 191)
        {
          v85 = &v10->i64[1];
          v86 = v10 == v8 || v85 == (uint64_t *)v8;
          v87 = v86;
          if ((a5 & 1) != 0)
          {
            if ((v87 & 1) == 0)
            {
              v88 = 0;
              v89 = (uint64_t *)v10;
              do
              {
                v92 = *v89;
                v91 = v89[1];
                v89 = v85;
                result = ((uint64_t (*)(uint64_t, uint64_t))*a3)(v91, v92);
                if ((_DWORD)result)
                {
                  v93 = *v89;
                  v94 = v88;
                  do
                  {
                    *(uint64_t *)((char *)&v10->i64[1] + v94) = *(uint64_t *)((char *)v10->i64 + v94);
                    if (!v94)
                    {
                      v90 = (uint64_t *)v10;
                      goto LABEL_113;
                    }
                    result = ((uint64_t (*)(uint64_t, _QWORD))*a3)(v93, *(uint64_t *)((char *)&v10->i64[-1] + v94));
                    v94 -= 8;
                  }
                  while ((result & 1) != 0);
                  v90 = (uint64_t *)((char *)&v10->i64[1] + v94);
LABEL_113:
                  *v90 = v93;
                }
                v85 = v89 + 1;
                v88 += 8;
              }
              while (v89 + 1 != (uint64_t *)a2);
            }
          }
          else if ((v87 & 1) == 0)
          {
            do
            {
              v105 = v7->i64[0];
              v104 = v7->i64[1];
              v7 = (int8x16_t *)v85;
              result = ((uint64_t (*)(uint64_t, uint64_t))*a3)(v104, v105);
              if ((_DWORD)result)
              {
                v106 = v7->i64[0];
                v107 = (uint64_t *)v7;
                do
                {
                  v108 = v107;
                  v109 = *--v107;
                  *v108 = v109;
                  result = ((uint64_t (*)(uint64_t, _QWORD))*a3)(v106, *(v108 - 2));
                }
                while ((result & 1) != 0);
                *v107 = v106;
              }
              v85 = &v7->i64[1];
            }
            while (&v7->u64[1] != (unint64_t *)a2);
          }
          return result;
        }
        if (!a4)
        {
          if (v10 != v8)
          {
            v95 = (unint64_t)(v12 - 2) >> 1;
            v126 = v95;
            do
            {
              if (v126 >= v95)
              {
                v97 = (2 * v95) | 1;
                v98 = &v7->i64[v97];
                if (2 * v95 + 2 < v12 && ((unsigned int (*)(uint64_t, uint64_t))*a3)(*v98, v98[1]))
                {
                  ++v98;
                  v97 = 2 * v95 + 2;
                }
                v99 = &v7->i64[v95];
                result = ((uint64_t (*)(uint64_t, uint64_t))*a3)(*v98, *v99);
                if ((result & 1) == 0)
                {
                  v124 = *v99;
                  do
                  {
                    v100 = v98;
                    *v99 = *v98;
                    if (v126 < v97)
                      break;
                    v101 = (2 * v97) | 1;
                    v98 = &v7->i64[v101];
                    v102 = 2 * v97 + 2;
                    if (v102 < v12 && ((unsigned int (*)(uint64_t, uint64_t))*a3)(*v98, v98[1]))
                    {
                      ++v98;
                      v101 = v102;
                    }
                    result = ((uint64_t (*)(uint64_t, uint64_t))*a3)(*v98, v124);
                    v99 = v100;
                    v97 = v101;
                  }
                  while (!(_DWORD)result);
                  *v100 = v124;
                }
              }
              v96 = v95-- <= 0;
            }
            while (!v96);
            v110 = (unint64_t)v11 >> 3;
            do
            {
              v111 = 0;
              v112 = v7->i64[0];
              v113 = (uint64_t *)v7;
              do
              {
                v114 = (unint64_t *)&v113[v111 + 1];
                v115 = (2 * v111) | 1;
                v116 = 2 * v111 + 2;
                if (v116 < v110)
                {
                  result = ((uint64_t (*)(uint64_t, uint64_t))*a3)(v113[v111 + 1], v113[v111 + 2]);
                  if ((_DWORD)result)
                  {
                    ++v114;
                    v115 = v116;
                  }
                }
                *v113 = *v114;
                v113 = (uint64_t *)v114;
                v111 = v115;
              }
              while (v115 <= (uint64_t)((unint64_t)(v110 - 2) >> 1));
              v117 = &a2[-1].i64[1];
              v86 = v114 == &a2[-1].u64[1];
              a2 = (int8x16_t *)((char *)a2 - 8);
              if (v86)
              {
                *v114 = v112;
              }
              else
              {
                *v114 = *v117;
                *v117 = v112;
                v118 = (char *)v114 - (char *)v7 + 8;
                if (v118 >= 9)
                {
                  v119 = (((unint64_t)v118 >> 3) - 2) >> 1;
                  v120 = &v7->i64[v119];
                  result = ((uint64_t (*)(uint64_t, unint64_t))*a3)(*v120, *v114);
                  if ((_DWORD)result)
                  {
                    v121 = *v114;
                    do
                    {
                      v122 = v120;
                      *v114 = *v120;
                      if (!v119)
                        break;
                      v119 = (v119 - 1) >> 1;
                      v120 = &v7->i64[v119];
                      result = ((uint64_t (*)(uint64_t, unint64_t))*a3)(*v120, v121);
                      v114 = (unint64_t *)v122;
                    }
                    while ((result & 1) != 0);
                    *v122 = v121;
                  }
                }
              }
              v96 = v110-- <= 2;
            }
            while (!v96);
          }
          return result;
        }
        v13 = (unint64_t)v12 >> 1;
        v14 = *a3;
        if ((unint64_t)v11 < 0x401)
        {
          v18 = ((uint64_t (*)(uint64_t, uint64_t))v14)(v7->i64[0], v7->i64[v13]);
          v19 = ((uint64_t (*)(uint64_t, uint64_t))*a3)(*v9, v7->i64[0]);
          if ((v18 & 1) != 0)
          {
            v20 = v7->i64[v13];
            if (v19)
            {
              v7->i64[v13] = *v9;
              *v9 = v20;
            }
            else
            {
              v7->i64[v13] = v7->i64[0];
              v7->i64[0] = v20;
              if ((*a3)(*v9))
              {
                v33 = v7->i64[0];
                v7->i64[0] = *v9;
                *v9 = v33;
              }
            }
          }
          else if (v19)
          {
            v23 = v7->i64[0];
            v7->i64[0] = *v9;
            *v9 = v23;
            if (((unsigned int (*)(uint64_t, uint64_t))*a3)(v7->i64[0], v7->i64[v13]))
            {
              v24 = v7->i64[v13];
              v7->i64[v13] = v7->i64[0];
              v7->i64[0] = v24;
            }
          }
        }
        else
        {
          v15 = ((uint64_t (*)(uint64_t, uint64_t))v14)(v7->i64[v13], v7->i64[0]);
          v16 = ((uint64_t (*)(uint64_t, uint64_t))*a3)(*v9, v7->i64[v13]);
          if ((v15 & 1) != 0)
          {
            v17 = v7->i64[0];
            if (v16)
            {
              v7->i64[0] = *v9;
              *v9 = v17;
            }
            else
            {
              v7->i64[0] = v7->i64[v13];
              v7->i64[v13] = v17;
              if ((*a3)(*v9))
              {
                v25 = v7->i64[v13];
                v7->i64[v13] = *v9;
                *v9 = v25;
              }
            }
          }
          else if (v16)
          {
            v21 = v7->i64[v13];
            v7->i64[v13] = *v9;
            *v9 = v21;
            if (((unsigned int (*)(uint64_t, uint64_t))*a3)(v7->i64[v13], v7->i64[0]))
            {
              v22 = v7->i64[0];
              v7->i64[0] = v7->i64[v13];
              v7->i64[v13] = v22;
            }
          }
          v26 = v13 - 1;
          v27 = v13 - 1;
          v28 = ((uint64_t (*)(uint64_t, uint64_t))*a3)(v7->i64[v27], v7->i64[1]);
          v29 = ((uint64_t (*)(uint64_t, uint64_t))*a3)(v8[-1].i64[0], v7->i64[v27]);
          v123 = a4;
          if ((v28 & 1) != 0)
          {
            v30 = v7->i64[1];
            if (v29)
            {
              v7->i64[1] = v8[-1].i64[0];
              v8[-1].i64[0] = v30;
            }
            else
            {
              v7->i64[1] = v7->i64[v27];
              v7->i64[v27] = v30;
              if ((*a3)(v8[-1].i64[0]))
              {
                v34 = v7->i64[v27];
                v7->i64[v27] = v8[-1].i64[0];
                v8[-1].i64[0] = v34;
              }
            }
          }
          else if (v29)
          {
            v31 = v7->i64[v27];
            v7->i64[v27] = v8[-1].i64[0];
            v8[-1].i64[0] = v31;
            if (((unsigned int (*)(uint64_t, uint64_t))*a3)(v7->i64[v27], v7->i64[1]))
            {
              v32 = v7->i64[1];
              v7->i64[1] = v7->i64[v27];
              v7->i64[v27] = v32;
            }
          }
          v35 = v13 + 1;
          v36 = v13 + 1;
          v37 = ((uint64_t (*)(uint64_t, uint64_t))*a3)(v7->i64[v36], v7[1].i64[0]);
          v38 = ((uint64_t (*)(uint64_t, uint64_t))*a3)(v8[-2].i64[1], v7->i64[v36]);
          if ((v37 & 1) != 0)
          {
            v39 = v7[1].i64[0];
            if (v38)
            {
              v7[1].i64[0] = v8[-2].i64[1];
              v8[-2].i64[1] = v39;
            }
            else
            {
              v7[1].i64[0] = v7->i64[v36];
              v7->i64[v36] = v39;
              if ((*a3)(v8[-2].i64[1]))
              {
                v42 = v7->i64[v36];
                v7->i64[v36] = v8[-2].i64[1];
                v8[-2].i64[1] = v42;
              }
            }
          }
          else if (v38)
          {
            v40 = v7->i64[v36];
            v7->i64[v36] = v8[-2].i64[1];
            v8[-2].i64[1] = v40;
            if (((unsigned int (*)(uint64_t, uint64_t))*a3)(v7->i64[v36], v7[1].i64[0]))
            {
              v41 = v7[1].i64[0];
              v7[1].i64[0] = v7->i64[v36];
              v7->i64[v36] = v41;
            }
          }
          v43 = ((uint64_t (*)(uint64_t, uint64_t))*a3)(v7->i64[v13], v7->i64[v26]);
          v44 = ((uint64_t (*)(uint64_t, uint64_t))*a3)(v7->i64[v35], v7->i64[v13]);
          if ((v43 & 1) != 0)
          {
            v45 = v7->i64[v26];
            if (v44)
            {
              v7->i64[v26] = v7->i64[v36];
              v7->i64[v36] = v45;
              v46 = v7->i64[v13];
              v9 = &a2[-1].i64[1];
            }
            else
            {
              v7->i64[v26] = v7->i64[v13];
              v7->i64[v13] = v45;
              v49 = (*a3)(v7->i64[v35]);
              v46 = v7->i64[v13];
              v9 = &a2[-1].i64[1];
              if (v49)
              {
                v50 = v7->i64[v36];
                v7->i64[v13] = v50;
                v7->i64[v36] = v46;
                v46 = v50;
              }
            }
            a4 = v123;
          }
          else
          {
            v46 = v7->i64[v13];
            a4 = v123;
            if (v44)
            {
              v7->i64[v13] = v7->i64[v36];
              v7->i64[v36] = v46;
              v47 = ((uint64_t (*)(void))*a3)();
              v46 = v7->i64[v13];
              if (v47)
              {
                v48 = v7->i64[v27];
                v7->i64[v27] = v46;
                v7->i64[v13] = v48;
                v46 = v48;
              }
            }
            v9 = &a2[-1].i64[1];
          }
          v51 = v7->i64[0];
          v7->i64[0] = v46;
          v7->i64[v13] = v51;
        }
        --a4;
        v52 = v7->i64[0];
        if ((a5 & 1) == 0)
        {
          v53 = ((uint64_t (*)(uint64_t, uint64_t))*a3)(v7[-1].i64[1], v7->i64[0]);
          v52 = v7->i64[0];
          if ((v53 & 1) == 0)
          {
            result = ((uint64_t (*)(uint64_t, uint64_t))*a3)(v7->i64[0], *v9);
            if ((result & 1) != 0)
            {
              v10 = v7;
              do
              {
                v67 = v10->i64[1];
                v10 = (int8x16_t *)((char *)v10 + 8);
                result = ((uint64_t (*)(uint64_t, uint64_t))*a3)(v52, v67);
              }
              while ((result & 1) == 0);
            }
            else
            {
              v68 = (int8x16_t *)&v7->u64[1];
              do
              {
                v10 = v68;
                if (v68 >= a2)
                  break;
                v68 = (int8x16_t *)((char *)v68 + 8);
                result = ((uint64_t (*)(uint64_t, uint64_t))*a3)(v52, v10->i64[0]);
              }
              while (!(_DWORD)result);
            }
            v8 = a2;
            v69 = a2;
            if (v10 < a2)
            {
              v69 = a2;
              do
              {
                v70 = v69[-1].i64[1];
                v69 = (int8x16_t *)((char *)v69 - 8);
                result = ((uint64_t (*)(uint64_t, uint64_t))*a3)(v52, v70);
              }
              while ((result & 1) != 0);
            }
            while (v10 < v69)
            {
              v71 = v10->i64[0];
              v10->i64[0] = v69->i64[0];
              v69->i64[0] = v71;
              do
              {
                v72 = v10->i64[1];
                v10 = (int8x16_t *)((char *)v10 + 8);
              }
              while (!((unsigned int (*)(uint64_t, uint64_t))*a3)(v52, v72));
              do
              {
                v73 = v69[-1].i64[1];
                v69 = (int8x16_t *)((char *)v69 - 8);
                result = ((uint64_t (*)(uint64_t, uint64_t))*a3)(v52, v73);
              }
              while ((result & 1) != 0);
            }
            v74 = &v10[-1].i64[1];
            if (&v10[-1].u64[1] != (unint64_t *)v7)
              v7->i64[0] = *v74;
            a5 = 0;
            *v74 = v52;
            continue;
          }
        }
        v54 = (uint64_t *)v7;
        do
        {
          v55 = (int8x16_t *)v54;
          v56 = v54[1];
          ++v54;
        }
        while ((((uint64_t (*)(uint64_t, uint64_t))*a3)(v56, v52) & 1) != 0);
        v57 = a4;
        v58 = (uint64_t *)v8;
        if (v55 == v7)
        {
          v58 = (uint64_t *)v8;
          do
          {
            if (v54 >= v58)
              break;
            v60 = *--v58;
          }
          while ((((uint64_t (*)(uint64_t, uint64_t))*a3)(v60, v52) & 1) == 0);
        }
        else
        {
          do
            v59 = *--v58;
          while (!((unsigned int (*)(uint64_t, uint64_t))*a3)(v59, v52));
        }
        if (v54 < v58)
        {
          v61 = (int8x16_t *)v54;
          v62 = (int8x16_t *)v58;
          do
          {
            v63 = v61->i64[0];
            v61->i64[0] = v62->i64[0];
            v62->i64[0] = v63;
            do
            {
              v55 = v61;
              v64 = v61->i64[1];
              v61 = (int8x16_t *)((char *)v61 + 8);
            }
            while ((((uint64_t (*)(uint64_t, uint64_t))*a3)(v64, v52) & 1) != 0);
            do
            {
              v65 = v62[-1].i64[1];
              v62 = (int8x16_t *)((char *)v62 - 8);
            }
            while (!((unsigned int (*)(uint64_t, uint64_t))*a3)(v65, v52));
          }
          while (v61 < v62);
        }
        if (v55 != v7)
          v7->i64[0] = v55->i64[0];
        v55->i64[0] = v52;
        v8 = a2;
        a4 = v57;
        if (v54 < v58)
        {
LABEL_71:
          result = std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(karo::StaticSphereTreeElement const*,karo::StaticSphereTreeElement const*),karo::StaticSphereTreeElement**,false>(v7, v55, a3, a4, a5 & 1);
          a5 = 0;
          v10 = (int8x16_t *)&v55->u64[1];
          continue;
        }
        v66 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(karo::StaticSphereTreeElement const*,karo::StaticSphereTreeElement const*),karo::StaticSphereTreeElement**>(v7, v55, a3);
        v10 = (int8x16_t *)&v55->u64[1];
        result = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(karo::StaticSphereTreeElement const*,karo::StaticSphereTreeElement const*),karo::StaticSphereTreeElement**>(&v55->i64[1], a2, a3);
        if (!(_DWORD)result)
        {
          if (v66)
            continue;
          goto LABEL_71;
        }
        a2 = v55;
        if (!v66)
          goto LABEL_2;
        return result;
    }
  }
}

BOOL karo::elementLess<1>(uint64_t a1, uint64_t a2)
{
  return *(double *)(a1 + 48) < *(double *)(a2 + 48);
}

BOOL karo::elementLess<2>(uint64_t a1, uint64_t a2)
{
  return *(double *)(a1 + 56) < *(double *)(a2 + 56);
}

uint64_t std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(karo::StaticSphereTreeElement const*,karo::StaticSphereTreeElement const*),karo::StaticSphereTreeElement**>(_QWORD *a1, _QWORD *a2, _QWORD *a3, _QWORD *a4, unsigned int (**a5)(_QWORD))
{
  char v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v10 = ((uint64_t (*)(_QWORD, _QWORD))*a5)(*a2, *a1);
  v11 = ((uint64_t (*)(_QWORD, _QWORD))*a5)(*a3, *a2);
  if ((v10 & 1) != 0)
  {
    v12 = *a1;
    if (v11)
    {
      *a1 = *a3;
      *a3 = v12;
    }
    else
    {
      *a1 = *a2;
      *a2 = v12;
      if ((*a5)(*a3))
      {
        v15 = *a2;
        *a2 = *a3;
        *a3 = v15;
      }
    }
  }
  else if (v11)
  {
    v13 = *a2;
    *a2 = *a3;
    *a3 = v13;
    if (((unsigned int (*)(_QWORD, _QWORD))*a5)(*a2, *a1))
    {
      v14 = *a1;
      *a1 = *a2;
      *a2 = v14;
    }
  }
  result = ((uint64_t (*)(_QWORD, _QWORD))*a5)(*a4, *a3);
  if ((_DWORD)result)
  {
    v17 = *a3;
    *a3 = *a4;
    *a4 = v17;
    result = ((uint64_t (*)(_QWORD, _QWORD))*a5)(*a3, *a2);
    if ((_DWORD)result)
    {
      v18 = *a2;
      *a2 = *a3;
      *a3 = v18;
      result = ((uint64_t (*)(_QWORD, _QWORD))*a5)(*a2, *a1);
      if ((_DWORD)result)
      {
        v19 = *a1;
        *a1 = *a2;
        *a2 = v19;
      }
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(karo::StaticSphereTreeElement const*,karo::StaticSphereTreeElement const*),karo::StaticSphereTreeElement**>(_QWORD *a1, _QWORD *a2, unsigned int (**a3)(uint64_t))
{
  uint64_t v6;
  _BOOL8 result;
  uint64_t v8;
  char v9;
  int v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  char v20;
  _QWORD *v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  int v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;

  v6 = a2 - a1;
  result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      if (((unsigned int (*)(_QWORD, _QWORD))*a3)(*(a2 - 1), *a1))
      {
        v8 = *a1;
        *a1 = *(a2 - 1);
        *(a2 - 1) = v8;
      }
      return 1;
    case 3:
      v9 = ((uint64_t (*)(_QWORD, _QWORD))*a3)(a1[1], *a1);
      v10 = ((uint64_t (*)(_QWORD, _QWORD))*a3)(*(a2 - 1), a1[1]);
      if ((v9 & 1) != 0)
      {
        v11 = *a1;
        if (v10)
        {
          *a1 = *(a2 - 1);
          *(a2 - 1) = v11;
        }
        else
        {
          *a1 = a1[1];
          a1[1] = v11;
          if ((*a3)(*(a2 - 1)))
          {
            v26 = a1[1];
            a1[1] = *(a2 - 1);
            *(a2 - 1) = v26;
          }
        }
      }
      else if (v10)
      {
        v24 = a1[1];
        a1[1] = *(a2 - 1);
        *(a2 - 1) = v24;
        v19 = ((uint64_t (*)(_QWORD, _QWORD))*a3)(a1[1], *a1);
LABEL_17:
        if (v19)
          *(int8x16_t *)a1 = vextq_s8(*(int8x16_t *)a1, *(int8x16_t *)a1, 8uLL);
      }
      return 1;
    case 4:
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(karo::StaticSphereTreeElement const*,karo::StaticSphereTreeElement const*),karo::StaticSphereTreeElement**>(a1, a1 + 1, a1 + 2, a2 - 1, a3);
      return 1;
    case 5:
      v12 = a1 + 2;
      v13 = a1 + 3;
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(karo::StaticSphereTreeElement const*,karo::StaticSphereTreeElement const*),karo::StaticSphereTreeElement**>(a1, a1 + 1, a1 + 2, a1 + 3, a3);
      if (!((unsigned int (*)(_QWORD, _QWORD))*a3)(*(a2 - 1), a1[3]))
        return 1;
      v14 = *v13;
      *v13 = *(a2 - 1);
      *(a2 - 1) = v14;
      if (!((unsigned int (*)(_QWORD, _QWORD))*a3)(*v13, *v12))
        return 1;
      v15 = *v12;
      *v12 = *v13;
      *v13 = v15;
      if (!((unsigned int (*)(void))*a3)())
        return 1;
      v17 = a1[1];
      v16 = a1[2];
      v18 = *a1;
      a1[1] = v16;
      a1[2] = v17;
      v19 = ((uint64_t (*)(uint64_t, uint64_t))*a3)(v16, v18);
      goto LABEL_17;
    default:
      v20 = ((uint64_t (*)(_QWORD, _QWORD))*a3)(a1[1], *a1);
      v21 = a1 + 2;
      v22 = ((uint64_t (*)(_QWORD, _QWORD))*a3)(a1[2], a1[1]);
      if ((v20 & 1) != 0)
      {
        v23 = *a1;
        if (v22)
        {
          *a1 = a1[2];
          a1[2] = v23;
        }
        else
        {
          v27 = a1[2];
          *a1 = a1[1];
          a1[1] = v23;
          if ((*a3)(v27))
            *(int8x16_t *)(a1 + 1) = vextq_s8(*(int8x16_t *)(a1 + 1), *(int8x16_t *)(a1 + 1), 8uLL);
        }
      }
      else if (v22)
      {
        v25 = a1[1];
        a1[1] = a1[2];
        a1[2] = v25;
        if (((unsigned int (*)(void))*a3)())
          *(int8x16_t *)a1 = vextq_s8(*(int8x16_t *)a1, *(int8x16_t *)a1, 8uLL);
      }
      v28 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v29 = 0;
      v30 = 0;
      break;
  }
  while (1)
  {
    if (((unsigned int (*)(_QWORD, _QWORD))*a3)(*v28, *v21))
    {
      v32 = *v28;
      v33 = v29;
      do
      {
        v34 = (char *)a1 + v33;
        *(_QWORD *)((char *)a1 + v33 + 24) = *(_QWORD *)((char *)a1 + v33 + 16);
        if (v33 == -16)
        {
          v31 = a1;
          goto LABEL_29;
        }
        v33 -= 8;
      }
      while ((((uint64_t (*)(uint64_t, _QWORD))*a3)(v32, *((_QWORD *)v34 + 1)) & 1) != 0);
      v31 = (_QWORD *)((char *)a1 + v33 + 24);
LABEL_29:
      *v31 = v32;
      if (++v30 == 8)
        return v28 + 1 == a2;
    }
    v21 = v28;
    v29 += 8;
    if (++v28 == a2)
      return 1;
  }
}

uint64_t md::Ribbons::RibbonBatch<md::Ribbons::DottedRouteLineRibbonDescriptor>::~RibbonBatch(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  malloc_zone_t *zone;
  void (***v11)(_QWORD, uint64_t);
  void (***v12)(_QWORD, uint64_t);
  unsigned __int8 v13;
  uint64_t v14;
  geo::read_write_lock *v15;
  const char *v16;
  _QWORD *v17;
  unint64_t v18;
  void (***v19)(void);
  void (**v20)(void);
  _QWORD **v21;
  _QWORD *v22;
  _QWORD *v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  void *v30;
  void *v31;
  _QWORD *v33;

  *(_QWORD *)a1 = &off_1E42AF1E8;
  v2 = *(_QWORD **)(a1 + 248);
  if (v2)
  {
    v3 = *(_QWORD **)(a1 + 256);
    v4 = *(void **)(a1 + 248);
    if (v3 != v2)
    {
      do
      {
        v7 = *--v3;
        v6 = v7;
        *v3 = 0;
        if (v7)
        {
          v8 = *(_QWORD **)(v6 + 56);
          if (v8)
          {
            v9 = *(_QWORD **)(v6 + 64);
            v5 = *(_QWORD *)(v6 + 56);
            if (v9 != v8)
            {
              do
              {
                v12 = (void (***)(_QWORD, uint64_t))*--v9;
                v11 = v12;
                *v9 = 0;
                if (v12)
                {
                  (**v11)(v11, v5);
                  {
                    v33 = v2;
                    v14 = operator new();
                    *(_QWORD *)(v14 + 16) = 0x5ED09DD50000000FLL;
                    *(_QWORD *)(v14 + 24) = "VectorKitLabels";
                    *(_OWORD *)(v14 + 32) = xmmword_19FFB2E80;
                    *(_QWORD *)v14 = &off_1E42B5668;
                    *(_QWORD *)(v14 + 8) = "VectorKitLabels";
                    *(_OWORD *)(v14 + 72) = 0u;
                    *(_OWORD *)(v14 + 88) = 0u;
                    *(_OWORD *)(v14 + 104) = 0u;
                    *(_OWORD *)(v14 + 120) = 0u;
                    *(_OWORD *)(v14 + 136) = 0u;
                    *(_OWORD *)(v14 + 152) = 0u;
                    *(_OWORD *)(v14 + 168) = 0u;
                    *(_OWORD *)(v14 + 184) = 0u;
                    *(_OWORD *)(v14 + 200) = 0u;
                    *(_OWORD *)(v14 + 216) = 0u;
                    *(_OWORD *)(v14 + 232) = 0u;
                    *(_QWORD *)(v14 + 248) = 0;
                    *(_OWORD *)(v14 + 56) = 0u;
                    v15 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v14 + 56), 0);
                    if ((_DWORD)v15)
                      geo::read_write_lock::logFailure(v15, (uint64_t)"initialization", v16);
                    zone = malloc_create_zone(0, 0);
                    *(_QWORD *)(v14 + 48) = zone;
                    malloc_set_zone_name(zone, "VectorKitLabels");
                    *(_QWORD *)(v14 + 256) = os_log_create("com.apple.VectorKit", "Memory");
                    mdm::Allocator::instance(void)::alloc = v14;
                    v2 = v33;
                  }
                  (*(void (**)(uint64_t, void (***)(_QWORD, uint64_t), uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc + 40))(mdm::Allocator::instance(void)::alloc, v11, 112);
                }
              }
              while (v9 != v8);
              v5 = *(_QWORD *)(v6 + 56);
            }
            *(_QWORD *)(v6 + 64) = v8;
            (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v6 + 80) + 40))(*(_QWORD *)(v6 + 80), v5, *(_QWORD *)(v6 + 72) - v5);
          }
          MEMORY[0x1A1AF4E00](v6, 0x1020C4010FC18DELL);
        }
      }
      while (v3 != v2);
      v4 = *(void **)(a1 + 248);
    }
    *(_QWORD *)(a1 + 256) = v2;
    operator delete(v4);
  }
  v17 = *(_QWORD **)(a1 + 224);
  do
  {
    if (v17[1])
    {
      v18 = 0;
      v19 = (void (***)(void))(v17 + 2);
      do
      {
        v20 = *v19;
        v19 += 15;
        (*v20)();
        ++v18;
      }
      while (v18 < v17[1]);
    }
    v17[1] = 0;
    v17 = (_QWORD *)*v17;
  }
  while (v17);
  v21 = *(_QWORD ***)(a1 + 224);
  *(_QWORD *)(a1 + 232) = v21;
  v22 = *v21;
  *v21 = 0;
  if (v22)
  {
    do
    {
      v23 = (_QWORD *)*v22;
      free(v22);
      v22 = v23;
    }
    while (v23);
    v21 = *(_QWORD ***)(a1 + 224);
  }
  free(v21);
  v24 = *(void **)(a1 + 200);
  if (v24)
  {
    *(_QWORD *)(a1 + 208) = v24;
    operator delete(v24);
  }
  v25 = *(_QWORD *)(a1 + 168);
  if (v25)
  {
    v26 = *(_QWORD *)(a1 + 176);
    v27 = *(_QWORD *)(a1 + 168);
    if (v26 != v25)
    {
      v28 = *(_QWORD *)(a1 + 176);
      do
      {
        v30 = *(void **)(v28 - 24);
        v28 -= 24;
        v29 = v30;
        if (v30)
        {
          *(_QWORD *)(v26 - 16) = v29;
          operator delete(v29);
        }
        v26 = v28;
      }
      while (v28 != v25);
      v27 = *(_QWORD *)(a1 + 168);
    }
    *(_QWORD *)(a1 + 176) = v25;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 192) + 40))(*(_QWORD *)(a1 + 192), v27, *(_QWORD *)(a1 + 184) - v27);
  }
  v31 = *(void **)(a1 + 144);
  if (v31)
  {
    *(_QWORD *)(a1 + 152) = v31;
    operator delete(v31);
  }
  *(_QWORD *)(a1 + 16) = &off_1E42B59B0;
  *(_QWORD *)(a1 + 32) = 3131955885;
  return a1;
}

void md::Ribbons::RibbonBatch<md::Ribbons::DottedRouteLineRibbonDescriptor>::~RibbonBatch(uint64_t a1)
{
  md::Ribbons::RibbonBatch<md::Ribbons::DottedRouteLineRibbonDescriptor>::~RibbonBatch(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t ggl::ConstantDataTyped<ggl::RouteLine::Style>::~ConstantDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  return a1;
}

void ggl::ConstantDataTyped<ggl::RouteLine::Style>::~ConstantDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::RouteLine::Style>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E2E48;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::RouteLine::Style>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E2E48;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::RouteLine::Style>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void md::DottedRouteLineBatch::~DottedRouteLineBatch(md::DottedRouteLineBatch *this)
{
  uint64_t v2;

  *(_QWORD *)this = &off_1E4298D08;
  v2 = *((_QWORD *)this + 36);
  *((_QWORD *)this + 36) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  md::Ribbons::RibbonBatch<md::Ribbons::DottedRouteLineRibbonDescriptor>::~RibbonBatch((uint64_t)this);
}

{
  uint64_t v2;

  *(_QWORD *)this = &off_1E4298D08;
  v2 = *((_QWORD *)this + 36);
  *((_QWORD *)this + 36) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  md::Ribbons::RibbonBatch<md::Ribbons::DottedRouteLineRibbonDescriptor>::~RibbonBatch((uint64_t)this);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t *std::unique_ptr<md::RibbonSection<md::Ribbons::DottedRouteLineRibbonDescriptor>>::~unique_ptr[abi:nn180100](uint64_t *a1)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  malloc_zone_t *zone;
  void (***v7)(_QWORD, uint64_t);
  void (***v8)(_QWORD, uint64_t);
  unsigned __int8 v9;
  uint64_t v10;
  geo::read_write_lock *v11;
  const char *v12;
  _QWORD *v14;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    v3 = *(_QWORD **)(v2 + 56);
    if (v3)
    {
      v4 = *(_QWORD **)(v2 + 64);
      v5 = *(_QWORD *)(v2 + 56);
      if (v4 != v3)
      {
        do
        {
          v8 = (void (***)(_QWORD, uint64_t))*--v4;
          v7 = v8;
          *v4 = 0;
          if (v8)
          {
            (**v7)(v7, v5);
            {
              v14 = v3;
              v10 = operator new();
              *(_QWORD *)(v10 + 16) = 0x5ED09DD50000000FLL;
              *(_QWORD *)(v10 + 24) = "VectorKitLabels";
              *(_OWORD *)(v10 + 32) = xmmword_19FFB2E80;
              *(_QWORD *)v10 = &off_1E42B5668;
              *(_QWORD *)(v10 + 8) = "VectorKitLabels";
              *(_OWORD *)(v10 + 72) = 0u;
              *(_OWORD *)(v10 + 88) = 0u;
              *(_OWORD *)(v10 + 104) = 0u;
              *(_OWORD *)(v10 + 120) = 0u;
              *(_OWORD *)(v10 + 136) = 0u;
              *(_OWORD *)(v10 + 152) = 0u;
              *(_OWORD *)(v10 + 168) = 0u;
              *(_OWORD *)(v10 + 184) = 0u;
              *(_OWORD *)(v10 + 200) = 0u;
              *(_OWORD *)(v10 + 216) = 0u;
              *(_OWORD *)(v10 + 232) = 0u;
              *(_QWORD *)(v10 + 248) = 0;
              *(_OWORD *)(v10 + 56) = 0u;
              v11 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v10 + 56), 0);
              if ((_DWORD)v11)
                geo::read_write_lock::logFailure(v11, (uint64_t)"initialization", v12);
              zone = malloc_create_zone(0, 0);
              *(_QWORD *)(v10 + 48) = zone;
              malloc_set_zone_name(zone, "VectorKitLabels");
              *(_QWORD *)(v10 + 256) = os_log_create("com.apple.VectorKit", "Memory");
              mdm::Allocator::instance(void)::alloc = v10;
              v3 = v14;
            }
            (*(void (**)(uint64_t, void (***)(_QWORD, uint64_t), uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc
                                                                                             + 40))(mdm::Allocator::instance(void)::alloc, v7, 112);
          }
        }
        while (v4 != v3);
        v5 = *(_QWORD *)(v2 + 56);
      }
      *(_QWORD *)(v2 + 64) = v3;
      (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v2 + 80) + 40))(*(_QWORD *)(v2 + 80), v5, *(_QWORD *)(v2 + 72) - v5);
    }
    MEMORY[0x1A1AF4E00](v2, 0x1020C4010FC18DELL);
  }
  return a1;
}

uint64_t md::RibbonLayer<md::Ribbons::DottedRouteLineRibbonDescriptor>::RibbonLayer(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t *a5, char *a6)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  float *v10;
  _QWORD *v11;
  uint64_t *v12;
  unsigned __int8 v13;
  unsigned __int8 v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t v17;
  __int128 v18;
  unsigned __int8 v19;
  _QWORD *v20;
  uint64_t v21;
  void *v22;
  unsigned __int8 v23;
  std::__shared_weak_count *v24;
  unint64_t *p_shared_owners;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  unint64_t *v38;
  unint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t *v47;
  unint64_t v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t *v53;
  _QWORD *v54;
  unsigned int v55;
  unsigned int v56;
  unint64_t v57;
  unint64_t v58;
  uint8x8_t v59;
  uint64_t *v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  unsigned __int8 v64;
  float v65;
  _BOOL8 v66;
  unint64_t v67;
  unint64_t v68;
  size_t prime;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  _QWORD **v73;
  size_t v74;
  size_t v75;
  size_t v76;
  _QWORD *i;
  size_t v78;
  uint64_t v79;
  unint64_t v80;
  uint8x8_t v81;
  uint64_t v82;
  _QWORD *v83;
  uint64_t v84;
  size_t v85;
  uint64_t *v86;
  unint64_t v87;
  _QWORD *v88;
  unint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  _QWORD *v97;
  uint64_t v98;
  uint64_t v99;
  _QWORD *v100;
  unint64_t v101;
  unint64_t v102;
  unint64_t v103;
  _QWORD *v104;
  uint64_t v105;
  _QWORD *v106;
  void (***v107)(_QWORD);
  void (***v108)(_QWORD);
  unsigned __int8 v109;
  uint64_t v110;
  unint64_t v111;
  uint64_t v112;
  _OWORD *v113;
  __int128 *v114;
  uint64_t v115;
  __int128 v116;
  __int128 v117;
  uint64_t v118;
  uint64_t v119;
  unint64_t v120;
  unint64_t v121;
  _BYTE *v122;
  uint64_t *v123;
  uint64_t *v124;
  unint64_t v125;
  uint64_t *v126;
  uint64_t v127;
  _OWORD *v128;
  uint64_t *v129;
  uint64_t v130;
  __int128 v131;
  uint64_t v132;
  uint64_t v133;
  unsigned __int8 v134;
  uint64_t *v135;
  uint64_t v136;
  unint64_t v137;
  uint64_t v138;
  unint64_t v139;
  unint64_t v140;
  char *v141;
  uint64_t *v142;
  unint64_t v143;
  unint64_t v144;
  uint64_t *v145;
  uint64_t *v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  _QWORD *v151;
  _QWORD *v152;
  void (***v153)(_QWORD, uint64_t);
  void (***v154)(_QWORD, uint64_t);
  unsigned __int8 v155;
  uint64_t v156;
  _QWORD *v157;
  _QWORD *v158;
  uint64_t v159;
  void (***v160)(_QWORD, uint64_t);
  void (***v161)(_QWORD, uint64_t);
  unsigned __int8 v162;
  uint64_t v163;
  uint64_t v164;
  void (***v165)(_QWORD);
  uint64_t v166;
  uint64_t v167;
  unsigned __int8 v168;
  uint64_t v169;
  uint64_t v170;
  int64_t v171;
  uint64_t v172;
  unint64_t v173;
  unint64_t v174;
  char *v175;
  uint64_t *v176;
  int64_t v177;
  unint64_t v178;
  uint64_t *v179;
  uint64_t *v180;
  uint64_t v181;
  unint64_t v182;
  unint64_t v183;
  unint64_t v184;
  unint64_t v185;
  char *v186;
  uint64_t *v187;
  uint64_t v188;
  __int128 v189;
  __int128 v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  _QWORD *v194;
  _QWORD *v195;
  malloc_zone_t *zone;
  void (***v197)(_QWORD, uint64_t);
  void (***v198)(_QWORD, uint64_t);
  unsigned __int8 v199;
  uint64_t v200;
  geo::read_write_lock *v201;
  const char *v202;
  _QWORD *v203;
  _QWORD *v204;
  uint64_t v205;
  void (***v206)(_QWORD, uint64_t);
  void (***v207)(_QWORD, uint64_t);
  unsigned __int8 v208;
  uint64_t v209;
  _QWORD *v210;
  unint64_t v211;
  _QWORD *v212;
  uint64_t v213;
  uint64_t v214;
  unint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  _QWORD *v219;
  uint64_t v220;
  _QWORD *v221;
  unint64_t v222;
  unint64_t v223;
  unint64_t v224;
  unint64_t v226;
  uint64_t v227;
  _QWORD *v228;
  _OWORD *v229;
  __int128 *v230;
  uint64_t v231;
  __int128 v232;
  __int128 v233;
  uint64_t v234;
  _QWORD *v235;
  uint64_t v236;
  void (***v237)(_QWORD);
  void (***v238)(_QWORD);
  unsigned __int8 v239;
  uint64_t v240;
  unsigned __int8 v241;
  uint64_t v242;
  uint64_t v243;
  unint64_t v244;
  unint64_t v245;
  unint64_t v246;
  unint64_t v247;
  char *v248;
  __int128 *v249;
  uint64_t v250;
  __int128 v251;
  __int128 v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  int8x16_t *v256;
  unint64_t v257;
  uint64_t v258;
  void **v259;
  uint64_t *v260;
  uint64_t v261;
  void *v262;
  unint64_t v263;
  _QWORD *v264;
  uint64_t v265;
  char *v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  unint64_t v270;
  char *v271;
  char *v272;
  char *v273;
  char *v274;
  char *v275;
  unint64_t v276;
  uint64_t v278;
  char *v279;
  char *v280;
  uint64_t v281;
  __int128 v282;
  __int128 v283;
  uint64_t v284;
  char *v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  _QWORD *v289;
  _QWORD *v290;
  void (***v291)(_QWORD, uint64_t);
  void (***v292)(_QWORD, uint64_t);
  unsigned __int8 v293;
  uint64_t v294;
  _QWORD *v295;
  _QWORD *v296;
  void (***v297)(_QWORD, uint64_t);
  void (***v298)(_QWORD, uint64_t);
  unsigned __int8 v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  void (***v305)(_QWORD, uint64_t);
  void (***v306)(_QWORD, uint64_t);
  unsigned __int8 v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  int v311;
  uint64_t v312;
  unsigned __int8 v313;
  unsigned __int8 v314;
  unsigned __int8 v315;
  int v316;
  char v317;
  void *v318;
  int64_t v319;
  _QWORD *v320;
  char *v321;
  _QWORD *v322;
  char *v323;
  char *v324;
  char *v325;
  int32x4_t v326;
  _QWORD *v327;
  _QWORD **v328;
  _QWORD **v329;
  char *v330;
  _QWORD *v331;
  uint64_t v332;
  char *v333;
  char *v334;
  char *v335;
  char *v336;
  uint64_t v337;
  uint64_t v338;
  _QWORD *v339;
  _QWORD *v340;
  unint64_t v341;
  unint64_t v342;
  unint64_t v343;
  unint64_t v344;
  char *v345;
  char *v346;
  char *v347;
  char *v348;
  uint64_t v349;
  int v350;
  char *v351;
  int64_t v352;
  unint64_t v353;
  unint64_t v354;
  unint64_t v355;
  char *v356;
  char *v357;
  size_t v358;
  char *v359;
  char *v360;
  unint64_t v361;
  char *v362;
  char *v363;
  unint64_t v364;
  char *v365;
  size_t v366;
  char *v367;
  uint64_t v368;
  char *v369;
  __int128 *v370;
  uint64_t v371;
  __int128 v372;
  int v373;
  char *v374;
  _DWORD *v375;
  uint64_t v376;
  char *v377;
  _DWORD *v378;
  uint64_t v379;
  _OWORD *v380;
  char *v381;
  unint64_t v382;
  int32x4_t *v383;
  unint64_t v384;
  int32x4_t v385;
  __int128 v386;
  __int128 v387;
  char *v388;
  uint64_t v389;
  uint64_t v390;
  unint64_t v391;
  char *v392;
  char *v393;
  unint64_t v394;
  unint64_t v395;
  unint64_t v396;
  char *v397;
  char *v398;
  char *v399;
  unint64_t v400;
  char *v401;
  uint64_t v402;
  uint64_t v403;
  char *v404;
  __int128 *v405;
  uint64_t v406;
  __int128 v407;
  gdc::GlobeTileGrid *v408;
  gdc::GlobeTileGrid *v409;
  gdc::GlobeTileGrid *v410;
  uint64_t v411;
  char *v412;
  uint64_t *v413;
  uint64_t *v414;
  uint64_t v415;
  unint64_t v416;
  uint64_t v417;
  gdc::GlobeTileGrid *v418;
  uint64_t v419;
  float *v420;
  unsigned int v421;
  float v422;
  unsigned int v423;
  unsigned int v424;
  float *v425;
  float v426;
  float v427;
  char *v429;
  unint64_t v430;
  unint64_t v431;
  uint64_t v432;
  uint64_t v433;
  unint64_t v434;
  std::__shared_weak_count *v435;
  unint64_t *v436;
  std::__shared_count v437;
  unsigned __int8 v438;
  std::__shared_weak_count *v439;
  unint64_t *v440;
  std::__shared_count v441;
  unsigned __int8 v442;
  uint64_t v443;
  unint64_t v444;
  unint64_t v445;
  unsigned __int8 v446;
  uint64_t v447;
  unsigned __int8 v448;
  uint64_t v449;
  unint64_t v450;
  std::__shared_weak_count *v451;
  unint64_t *v452;
  unint64_t v453;
  unint64_t v454;
  std::__shared_weak_count *v455;
  unint64_t *v456;
  unint64_t v457;
  unint64_t v458;
  unint64_t v459;
  unint64_t v460;
  uint64_t *v461;
  _QWORD *v462;
  uint64_t *v463;
  uint64_t v464;
  uint64_t v465;
  unint64_t v466;
  uint64_t v467;
  unint64_t v468;
  _BYTE *v469;
  uint64_t *v470;
  unint64_t v471;
  unint64_t v472;
  uint64_t v473;
  _OWORD *v474;
  uint64_t *v475;
  uint64_t v476;
  __int128 v477;
  uint64_t v478;
  uint64_t v479;
  unint64_t v480;
  uint64_t v481;
  uint64_t v482;
  uint64_t v483;
  uint64_t v484;
  uint64_t v485;
  uint64_t *v486;
  uint64_t v487;
  uint64_t v488;
  uint64_t v489;
  uint64_t v490;
  uint64_t v491;
  uint64_t v492;
  _QWORD *v493;
  _QWORD *v494;
  uint64_t v495;
  _QWORD *v496;
  uint64_t v497;
  uint64_t v498;
  uint64_t v499;
  uint64_t *v500;
  unint64_t v501;
  std::__shared_weak_count *v502;
  unint64_t *v503;
  unint64_t v504;
  _QWORD *v505;
  int v506;
  uint64_t v507;
  int v508;
  uint64_t v509;
  unsigned __int8 v510;
  int v511;
  uint64_t v512;
  geo::read_write_lock *v513;
  const char *v514;
  malloc_zone_t *v515;
  int v516;
  uint64_t v517;
  uint64_t v518;
  geo::read_write_lock *v519;
  const char *v520;
  malloc_zone_t *v521;
  uint64_t v522;
  unint64_t *v523;
  unint64_t v524;
  uint64_t v525;
  unint64_t *v526;
  unint64_t v527;
  uint64_t v528;
  uint64_t **v533;
  uint64_t **v534;
  uint64_t v535;
  uint64_t *v536;
  uint64_t v537;
  uint64_t v538;
  uint64_t v539;
  uint64_t v540;
  uint64_t v541;
  uint64_t v542;
  __int128 v543;
  unint64_t v544;
  unint64_t v545;
  unint64_t v546;
  uint64_t v547;
  uint64_t v548;
  uint64_t v549;
  uint64_t v550;
  uint64_t v551;
  __int128 v552;
  uint64_t v553;
  uint64_t v554;
  uint64_t *v555;
  _QWORD *v556;
  uint64_t *v557;
  uint64_t v558;
  uint64_t v559;
  uint64_t v560;
  uint64_t v561;
  uint64_t v562;
  unint64_t v563;
  unint64_t v564;
  std::vector<unsigned int>::pointer begin;
  unint64_t v566;
  char *v567;
  _DWORD *v568;
  unint64_t v569;
  _OWORD *v571;
  char *v572;
  BOOL v573;
  unint64_t v574;
  int32x4_t *v575;
  int32x4_t v576;
  unint64_t v577;
  int32x4_t v578;
  __int128 v579;
  __int128 v580;
  int *v581;
  char *v582;
  int v583;
  _QWORD *v584;
  float v585;
  unint64_t v586;
  uint64_t v587;
  float v588;
  float32x2_t v589;
  float v590;
  float32x2_t v591;
  float32x2_t v592;
  float v593;
  float v594;
  int v595;
  int v596;
  float v597;
  float v598;
  float v599;
  unint64_t v600;
  int v601;
  uint64_t v602;
  _WORD *v603;
  uint64_t v604;
  unint64_t v605;
  int16x4_t *v606;
  __int16 v607;
  int16x4_t v608;
  unint64_t v609;
  __int16 v610;
  __int16 v611;
  _WORD *v612;
  uint64_t v613;
  unint64_t v614;
  int64x2_t v615;
  int64x2_t v616;
  __int16 *v617;
  unint64_t v618;
  int64x2_t v619;
  int64x2_t v620;
  int64x2_t v621;
  int64x2_t v622;
  int64x2_t v623;
  int64x2_t v624;
  int64x2_t v625;
  int64x2_t v626;
  unint64_t v627;
  unint64_t v628;
  unsigned __int8 v629;
  _QWORD *v630;
  _QWORD *v631;
  _QWORD *v632;
  void (***v633)(_QWORD, _QWORD *);
  void (***v634)(_QWORD, _QWORD *);
  unsigned __int8 v635;
  uint64_t v636;
  unint64_t v637;
  unint64_t v638;
  _QWORD *v639;
  int v640;
  int v641;
  unint64_t v642;
  unint64_t v643;
  unint64_t v644;
  unint64_t v645;
  _QWORD *v646;
  int v647;
  int v648;
  unint64_t v649;
  unint64_t v650;
  uint64_t v651;
  uint64_t result;
  QuadTile *v653;
  gdc::GlobeTileGrid **v654;
  void **v655;
  _QWORD *v656;
  _QWORD *v659;
  _QWORD **v661;
  uint64_t *v662;
  char *v663;
  _QWORD *v664;
  char *v665;
  uint64_t v666;
  uint64_t v667;
  _QWORD *v669;
  uint64_t v670;
  uint64_t *v671;
  char *v672;
  char *v673;
  int64x2_t v674;
  uint64_t *v675;
  uint64_t v676;
  _QWORD *v677;
  uint64_t v678;
  size_t v679;
  unint64_t v680;
  uint64_t v681;
  char *v682;
  unint64_t v683;
  char *v684;
  uint64_t v685;
  char *v686;
  uint64_t **v688;
  uint64_t *v689;
  uint64_t *v690;
  uint64_t **v691;
  uint64_t *__p;
  uint64_t __pa;
  std::vector<unsigned int> v694;
  void *v695;
  std::__shared_weak_count *v696;
  uint64_t v697;
  __int128 v698;
  unint64_t v699;
  unint64_t v700;
  __int16 v701;
  uint64_t v702;
  __int128 v703;
  unint64_t v704;
  uint64_t v705;
  uint64_t v706;
  unint64_t v707;
  float v708;
  uint64_t v709;
  int16x8x2_t v710;

  v9 = a1;
  v709 = *MEMORY[0x1E0C80C00];
  v10 = md::SignedDistanceFieldGenerator::_hypotCache + 129752;
  if (a3)
  {
    v11 = a3;
    v12 = 0;
    v662 = 0;
    v671 = 0;
    while (1)
    {
      v703 = 0uLL;
      {
        v309 = operator new();
        *((_QWORD *)v10 + 299) = geo::MallocZoneAllocator::MallocZoneAllocator(v309, "VectorKitLabels", 0x5ED09DD50000000FLL);
      }
      v704 = *((_QWORD *)v10 + 299);
      v705 = 0;
      {
        v310 = operator new();
        *((_QWORD *)v10 + 299) = geo::MallocZoneAllocator::MallocZoneAllocator(v310, "VectorKitLabels", 0x5ED09DD50000000FLL);
      }
      v706 = *((_QWORD *)v10 + 299);
      v707 = 0;
      v708 = 1.0;
      v15 = (uint64_t *)v11[3];
      v6 = v11[4];
      v664 = v11;
      v16 = v12;
      if (v15 != (uint64_t *)v6)
        break;
LABEL_8:
      v17 = operator new();
      v18 = 0uLL;
      *(_OWORD *)(v17 + 144) = 0u;
      *(_QWORD *)v17 = &off_1E42AF1E8;
      *(_QWORD *)(v17 + 8) = 0;
      *(_QWORD *)(v17 + 64) = 0;
      *(_QWORD *)(v17 + 40) = 0;
      *(_QWORD *)(v17 + 48) = 0;
      *(_QWORD *)(v17 + 32) = "";
      *(_DWORD *)(v17 + 56) = 0;
      *(_DWORD *)(v17 + 72) = 1065353216;
      *(_OWORD *)(v17 + 80) = 0u;
      *(_OWORD *)(v17 + 96) = 0u;
      *(int64x2_t *)(v17 + 112) = vdupq_n_s64(1uLL);
      *(_QWORD *)(v17 + 128) = 0;
      *(_QWORD *)(v17 + 16) = &off_1E42AF548;
      *(_BYTE *)(v17 + 136) = 1;
      *(_OWORD *)(v17 + 160) = 0u;
      *(_OWORD *)(v17 + 176) = 0u;
      if ((v19 & 1) == 0)
      {
        v18 = 0uLL;
        if (v311)
        {
          v312 = operator new();
          ggl::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v312, "GeoGL", 0xA3D02C1100000005);
          v18 = 0uLL;
        }
      }
      *(_QWORD *)(v17 + 192) = ggl::Allocator::instance(void)::alloc;
      *(_OWORD *)(v17 + 200) = v18;
      *(_OWORD *)(v17 + 216) = v18;
      *(_QWORD *)(v17 + 232) = 0;
      *(_QWORD *)(v17 + 240) = 32;
      v20 = malloc_type_malloc(0xF10uLL, 0xB644C221uLL);
      *v20 = 0;
      v20[1] = 0;
      *(_QWORD *)(v17 + 224) = v20;
      *(_QWORD *)(v17 + 232) = v20;
      *(_QWORD *)(v17 + 256) = 0;
      *(_QWORD *)(v17 + 264) = 0;
      *(_QWORD *)(v17 + 248) = 0;
      *(_BYTE *)(v17 + 272) = 1;
      v21 = v664[2];
      *(_QWORD *)v17 = &off_1E4298D08;
      *(_QWORD *)(v17 + 280) = v21;
      *(_QWORD *)(v17 + 288) = 0;
      *(_BYTE *)(v17 + 296) = 0;
      +[VKSharedResourcesManager sharedResources](VKSharedResourcesManager, "sharedResources");
      v22 = (void *)objc_claimAutoreleasedReturnValue();
      *(_BYTE *)(v17 + 296) = *(_BYTE *)(objc_msgSend(v22, "gglDevice") + 20);

      v7 = operator new();
      if ((v23 & 1) == 0
      {
        if ((v313 & 1) == 0
        {
          if ((v315 & 1) == 0
          {
            ggl::MeshTyped<ggl::DottedRouteLine::DefaultVbo>::attributesReflection(void)::r = (uint64_t)&ggl::DottedRouteLine::defaultVboReflection;
          }
          ggl::MeshTyped<ggl::DottedRouteLine::DefaultVbo>::typedReflection(void)::r = (uint64_t)&ggl::MeshTyped<ggl::DottedRouteLine::DefaultVbo>::attributesReflection(void)::r;
          unk_1ECE30C48 = 1;
        }
        ggl::DottedRouteLine::BasePipelineSetup::typedReflection(void)::ref = (uint64_t)&ggl::MeshTyped<ggl::DottedRouteLine::DefaultVbo>::typedReflection(void)::r;
        unk_1ECE2FFA0 = &ggl::DottedRouteLine::pipelineDataBasePipelineDeviceStructs(void)::ref;
        qword_1ECE2FFA8 = 0;
        if ((v314 & 1) == 0
        {
          ggl::DottedRouteLine::pipelineDataBasePipelineConstantStructs(void)::ref = (uint64_t)ggl::Tile::View::reflection(void)::reflection;
          *(_QWORD *)algn_1ECE2FFD8 = ggl::Tile::Transform::reflection(void)::reflection;
          qword_1ECE2FFE0 = (uint64_t)ggl::RouteLine::Style::reflection(void)::reflection;
        }
        qword_1ECE2FFB0 = (uint64_t)&ggl::DottedRouteLine::pipelineDataBasePipelineConstantStructs(void)::ref;
        unk_1ECE2FFB8 = xmmword_19FFB3410;
        v10 = md::SignedDistanceFieldGenerator::_hypotCache + 129752;
        v9 = a1;
        v12 = v16;
      }
      ggl::PipelineSetup::PipelineSetup(v7, (uint64_t)&ggl::DottedRouteLine::BasePipelineSetup::typedReflection(void)::ref);
      *(_QWORD *)v7 = &off_1E42B7008;
      v24 = (std::__shared_weak_count *)operator new(0xE8uLL);
      v24->__shared_owners_ = 0;
      p_shared_owners = (unint64_t *)&v24->__shared_owners_;
      v24->__shared_weak_owners_ = 0;
      v24->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E2E48;
      v26 = ggl::BufferData::BufferData((uint64_t)&v24[1], qword_1EE572D18, 2, 1, 6, 1);
      v24[9].__shared_owners_ = (uint64_t)ggl::RouteLine::Style::reflection(void)::reflection;
      v24[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B9FD0;
      v27 = *(_QWORD *)(v7 + 64);
      *(_QWORD *)(v27 + 32) = v26;
      *(_QWORD *)(v27 + 40) = 0;
      v28 = *(_QWORD *)(v7 + 160);
      do
        v29 = __ldxr(p_shared_owners);
      while (__stxr(v29 + 1, p_shared_owners));
      v30 = *(std::__shared_weak_count **)(v28 + 40);
      *(_QWORD *)(v28 + 32) = v26;
      *(_QWORD *)(v28 + 40) = v24;
      if (v30)
      {
        v31 = (unint64_t *)&v30->__shared_owners_;
        do
          v32 = __ldaxr(v31);
        while (__stlxr(v32 - 1, v31));
        if (!v32)
        {
          ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
          std::__shared_weak_count::__release_weak(v30);
        }
      }
      do
        v33 = __ldaxr(p_shared_owners);
      while (__stlxr(v33 - 1, p_shared_owners));
      if (!v33)
      {
        ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
        std::__shared_weak_count::__release_weak(v24);
      }
      v34 = *(uint64_t **)(v7 + 64);
      v34[1] = 0;
      v35 = *a4;
      *v34 = *a4;
      v36 = *(_QWORD **)(v7 + 160);
      v37 = a4[1];
      if (v37)
      {
        v38 = (unint64_t *)(v37 + 8);
        do
          v39 = __ldxr(v38);
        while (__stxr(v39 + 1, v38));
      }
      v40 = (std::__shared_weak_count *)v36[1];
      *v36 = v35;
      v36[1] = v37;
      if (v40)
      {
        v41 = (unint64_t *)&v40->__shared_owners_;
        do
          v42 = __ldaxr(v41);
        while (__stlxr(v42 - 1, v41));
        if (!v42)
        {
          ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
          std::__shared_weak_count::__release_weak(v40);
        }
      }
      v43 = *(_QWORD *)(v7 + 64);
      *(_QWORD *)(v43 + 24) = 0;
      v44 = *a5;
      *(_QWORD *)(v43 + 16) = *a5;
      v45 = *(_QWORD *)(v7 + 160);
      v46 = a5[1];
      if (v46)
      {
        v47 = (unint64_t *)(v46 + 8);
        do
          v48 = __ldxr(v47);
        while (__stxr(v48 + 1, v47));
      }
      v49 = *(std::__shared_weak_count **)(v45 + 24);
      *(_QWORD *)(v45 + 16) = v44;
      *(_QWORD *)(v45 + 24) = v46;
      if (v49)
      {
        v50 = (unint64_t *)&v49->__shared_owners_;
        do
          v51 = __ldaxr(v50);
        while (__stlxr(v51 - 1, v50));
        if (!v51)
        {
          ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
          std::__shared_weak_count::__release_weak(v49);
        }
      }
      v52 = *(_QWORD *)(v17 + 288);
      *(_QWORD *)(v17 + 288) = v7;
      if (v52)
        (*(void (**)(uint64_t))(*(_QWORD *)v52 + 8))(v52);
      if (v671 < v662)
      {
        *v671 = v17;
        v53 = v671 + 1;
        goto LABEL_189;
      }
      v7 = (char *)v671 - (char *)v12;
      v6 = v671 - v12;
      v120 = v6 + 1;
      if ((unint64_t)(v6 + 1) >> 61)
        abort();
      if (((char *)v662 - (char *)v12) >> 2 > v120)
        v120 = ((char *)v662 - (char *)v12) >> 2;
      if ((unint64_t)((char *)v662 - (char *)v12) >= 0x7FFFFFFFFFFFFFF8)
        v121 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v121 = v120;
      if (v121)
      {
        if (v121 >> 61)
          goto LABEL_832;
        v122 = operator new(8 * v121);
      }
      else
      {
        v122 = 0;
      }
      v123 = (uint64_t *)&v122[8 * v6];
      *v123 = v17;
      v124 = v123 + 1;
      if (v671 != v12)
      {
        v125 = (char *)(v671 - 1) - (char *)v12;
        if (v125 >= 0x58)
        {
          if ((unint64_t)((char *)v12 - v122) >= 0x20)
          {
            v127 = (v125 >> 3) + 1;
            v126 = &v671[-(v127 & 0x3FFFFFFFFFFFFFFCLL)];
            v128 = &v122[8 * v6 - 16];
            v129 = v671 - 2;
            v130 = v127 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v131 = *(_OWORD *)v129;
              *(v128 - 1) = *((_OWORD *)v129 - 1);
              *v128 = v131;
              v128 -= 2;
              v129 -= 4;
              v130 -= 4;
            }
            while (v130);
            v123 -= v127 & 0x3FFFFFFFFFFFFFFCLL;
            if (v127 == (v127 & 0x3FFFFFFFFFFFFFFCLL))
              goto LABEL_186;
          }
          else
          {
            v126 = v671;
          }
        }
        else
        {
          v126 = v671;
        }
        do
        {
          v132 = *--v126;
          *--v123 = v132;
        }
        while (v126 != v12);
      }
LABEL_186:
      v662 = (uint64_t *)&v122[8 * v121];
      if (v12)
        operator delete(v12);
      v12 = v123;
      v53 = v124;
LABEL_189:
      v689 = v12;
      v671 = v53;
      v678 = v705;
      if (v705)
      {
        __p = 0;
        v684 = 0;
        v7 = 0;
        while (1)
        {
          v133 = operator new();
          *(_QWORD *)(v133 + 96) = 0;
          *(_OWORD *)(v133 + 64) = 0u;
          *(_OWORD *)(v133 + 80) = 0u;
          *(_OWORD *)(v133 + 32) = 0u;
          *(_OWORD *)(v133 + 48) = 0u;
          *(_OWORD *)v133 = 0u;
          *(_OWORD *)(v133 + 16) = 0u;
          *(_BYTE *)(v133 + 48) = 1;
          *(_QWORD *)(v133 + 56) = 0;
          *(_QWORD *)(v133 + 64) = 0;
          *(_QWORD *)(v133 + 72) = 0;
          {
            v253 = operator new();
            *((_QWORD *)v10 + 299) = geo::MallocZoneAllocator::MallocZoneAllocator(v253, "VectorKitLabels", 0x5ED09DD50000000FLL);
          }
          *(_QWORD *)(v133 + 80) = *((_QWORD *)v10 + 299);
          *(_DWORD *)(v133 + 96) = 0;
          *(_QWORD *)&v698 = v133;
          if (v7 < (unint64_t)v684)
          {
            *(_QWORD *)&v698 = 0;
            *(_QWORD *)v7 = v133;
            v135 = (uint64_t *)(v7 + 8);
            v136 = v698;
            if (!(_QWORD)v698)
              goto LABEL_241;
LABEL_229:
            v157 = *(_QWORD **)(v136 + 56);
            if (v157)
            {
              v158 = *(_QWORD **)(v136 + 64);
              v159 = *(_QWORD *)(v136 + 56);
              if (v158 != v157)
              {
                do
                {
                  v161 = (void (***)(_QWORD, uint64_t))*--v158;
                  v160 = v161;
                  *v158 = 0;
                  if (v161)
                  {
                    (**v160)(v160, v159);
                    if ((v162 & 1) == 0
                    {
                      v163 = operator new();
                      *((_QWORD *)v10 + 299) = geo::MallocZoneAllocator::MallocZoneAllocator(v163, "VectorKitLabels", 0x5ED09DD50000000FLL);
                    }
                    (*(void (**)(_QWORD, void (***)(_QWORD, uint64_t), uint64_t))(**((_QWORD **)v10 + 299) + 40))(*((_QWORD *)v10 + 299), v160, 112);
                  }
                }
                while (v158 != v157);
                v159 = *(_QWORD *)(v136 + 56);
              }
              *(_QWORD *)(v136 + 64) = v157;
              (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v136 + 80) + 40))(*(_QWORD *)(v136 + 80), v159, *(_QWORD *)(v136 + 72) - v159);
            }
            MEMORY[0x1A1AF4E00](v136, 0x1020C4010FC18DELL);
            goto LABEL_241;
          }
          v137 = v7 - (_QWORD)__p;
          v138 = (uint64_t)(v7 - (_QWORD)__p) >> 3;
          v139 = v138 + 1;
          if ((unint64_t)(v138 + 1) >> 61)
            abort();
          if ((v684 - (char *)__p) >> 2 > v139)
            v139 = (v684 - (char *)__p) >> 2;
          if ((unint64_t)(v684 - (char *)__p) >= 0x7FFFFFFFFFFFFFF8)
            v140 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v140 = v139;
          if (v140)
          {
            if (v140 >> 61)
              goto LABEL_832;
            v141 = (char *)operator new(8 * v140);
          }
          else
          {
            v141 = 0;
          }
          v142 = (uint64_t *)&v141[8 * v138];
          *(_QWORD *)&v698 = 0;
          *v142 = v133;
          v135 = v142 + 1;
          v143 = v7 - (_QWORD)__p;
          if ((uint64_t *)v7 == __p)
          {
            v12 = v689;
            goto LABEL_226;
          }
          v144 = v143 - 8;
          if (v143 - 8 < 0x138)
            break;
          v244 = v144 & 0xFFFFFFFFFFFFFFF8;
          if (v7 - 8 - (v144 & 0xFFFFFFFFFFFFFFF8) > v7 - 8 || &v141[v137 - 8 - v244] > &v141[v137 - 8])
            break;
          v245 = v144 >> 3;
          v146 = __p;
          if (v7 - 8 - 8 * v245 < (unint64_t)v142)
          {
            v246 = (unint64_t)&v141[v137 - v244 - 8];
            v145 = (uint64_t *)v7;
            if (v246 < v7)
              goto LABEL_209;
          }
          v247 = v245 + 1;
          v145 = (uint64_t *)(v7 - 8 * (v247 & 0x3FFFFFFFFFFFFFFCLL));
          v248 = &v141[8 * v138 - 16];
          v249 = (__int128 *)(v7 - 32);
          v250 = v247 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v252 = *v249;
            v251 = v249[1];
            *v249 = 0uLL;
            v249[1] = 0uLL;
            v249 -= 2;
            *((_OWORD *)v248 - 1) = v252;
            *(_OWORD *)v248 = v251;
            v248 -= 32;
            v250 -= 4;
          }
          while (v250);
          v142 -= v247 & 0x3FFFFFFFFFFFFFFCLL;
          v146 = __p;
          if (v247 != (v247 & 0x3FFFFFFFFFFFFFFCLL))
            goto LABEL_209;
LABEL_210:
          v12 = v689;
          do
          {
            v150 = *(_QWORD *)(v7 - 8);
            v7 -= 8;
            v149 = v150;
            *(_QWORD *)v7 = 0;
            if (v150)
            {
              v151 = *(_QWORD **)(v149 + 56);
              if (v151)
              {
                v152 = *(_QWORD **)(v149 + 64);
                v148 = *(_QWORD *)(v149 + 56);
                if (v152 != v151)
                {
                  do
                  {
                    v154 = (void (***)(_QWORD, uint64_t))*--v152;
                    v153 = v154;
                    *v152 = 0;
                    if (v154)
                    {
                      (**v153)(v153, v148);
                      if ((v155 & 1) == 0
                      {
                        v156 = operator new();
                        *((_QWORD *)v10 + 299) = geo::MallocZoneAllocator::MallocZoneAllocator(v156, "VectorKitLabels", 0x5ED09DD50000000FLL);
                      }
                      (*(void (**)(_QWORD, void (***)(_QWORD, uint64_t), uint64_t))(**((_QWORD **)v10 + 299) + 40))(*((_QWORD *)v10 + 299), v153, 112);
                    }
                  }
                  while (v152 != v151);
                  v148 = *(_QWORD *)(v149 + 56);
                }
                *(_QWORD *)(v149 + 64) = v151;
                (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v149 + 80) + 40))(*(_QWORD *)(v149 + 80), v148, *(_QWORD *)(v149 + 72) - v148);
                v9 = a1;
              }
              MEMORY[0x1A1AF4E00](v149, 0x1020C4010FC18DELL);
              v12 = v689;
            }
          }
          while ((uint64_t *)v7 != __p);
LABEL_226:
          v684 = &v141[8 * v140];
          if (__p)
            operator delete(__p);
          __p = v142;
          v136 = v698;
          if ((_QWORD)v698)
            goto LABEL_229;
LABEL_241:
          *(_DWORD *)(*(v135 - 1) + 96) = *(_DWORD *)(v678 + 16);
          v6 = *(_QWORD *)(v678 + 24);
          v681 = *(_QWORD *)(v678 + 32);
          if (v6 != v681)
          {
            v164 = 0;
            while (1)
            {
              v165 = *(void (****)(_QWORD))v6;
              v166 = *(_QWORD *)(*(_QWORD *)v6 + 88);
              if ((unint64_t)(v166 + v164) <= 0x5999)
              {
                v170 = *(v135 - 1);
                goto LABEL_306;
              }
              v167 = operator new();
              *(_QWORD *)(v167 + 96) = 0;
              *(_OWORD *)(v167 + 64) = 0u;
              *(_OWORD *)(v167 + 80) = 0u;
              *(_OWORD *)(v167 + 32) = 0u;
              *(_OWORD *)(v167 + 48) = 0u;
              *(_OWORD *)v167 = 0u;
              *(_OWORD *)(v167 + 16) = 0u;
              *(_BYTE *)(v167 + 48) = 1;
              *(_QWORD *)(v167 + 56) = 0;
              *(_QWORD *)(v167 + 64) = 0;
              *(_QWORD *)(v167 + 72) = 0;
              {
                v243 = operator new();
                *((_QWORD *)v10 + 299) = geo::MallocZoneAllocator::MallocZoneAllocator(v243, "VectorKitLabels", 0x5ED09DD50000000FLL);
              }
              *(_QWORD *)(v167 + 80) = *((_QWORD *)v10 + 299);
              *(_DWORD *)(v167 + 96) = 0;
              *(_QWORD *)&v698 = v167;
              if (v135 >= (uint64_t *)v684)
                break;
              *(_QWORD *)&v698 = 0;
              *v135++ = v167;
              v169 = v698;
              if ((_QWORD)v698)
                goto LABEL_293;
LABEL_305:
              v164 = 0;
              v170 = *(v135 - 1);
              *(_DWORD *)(v170 + 96) = *(_DWORD *)(v678 + 16);
              v165 = *(void (****)(_QWORD))v6;
              v166 = *(_QWORD *)(*(_QWORD *)v6 + 88);
LABEL_306:
              *(_QWORD *)v6 = 0;
              v210 = *(_QWORD **)(v170 + 64);
              v211 = *(_QWORD *)(v170 + 72);
              if ((unint64_t)v210 < v211)
              {
                if (v210)
                {
                  *v210 = v165;
                  v165 = 0;
                }
                v212 = v210 + 1;
                goto LABEL_343;
              }
              v213 = *(_QWORD *)(v170 + 56);
              v214 = ((uint64_t)v210 - v213) >> 3;
              v215 = v214 + 1;
              if ((unint64_t)(v214 + 1) >> 61)
                abort();
              v216 = v211 - v213;
              if (v216 >> 2 > v215)
                v215 = v216 >> 2;
              if ((unint64_t)v216 >= 0x7FFFFFFFFFFFFFF8)
                v217 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v217 = v215;
              if (v217)
              {
                v218 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v170 + 80) + 16))(*(_QWORD *)(v170 + 80), 8 * v217, 8);
                v219 = (_QWORD *)(v218 + 8 * v214);
                v220 = v218 + 8 * v217;
                if (v218)
                {
                  *v219 = v165;
                  v165 = 0;
                }
              }
              else
              {
                v220 = 0;
                v219 = (_QWORD *)(8 * v214);
              }
              v212 = v219 + 1;
              v221 = *(_QWORD **)(v170 + 56);
              v222 = *(_QWORD *)(v170 + 64);
              if ((_QWORD *)v222 == v221)
              {
                *(_QWORD *)(v170 + 56) = v219;
                *(_QWORD *)(v170 + 64) = v212;
                v236 = *(_QWORD *)(v170 + 72);
                *(_QWORD *)(v170 + 72) = v220;
                if (!v222)
                  goto LABEL_343;
                goto LABEL_342;
              }
              v223 = v222 - (_QWORD)v221 - 8;
              if (v223 <= 0x47
                || ((v224 = v223 >> 3, v222 - 8 * v224 - 8 < (unint64_t)v219)
                  ? (_CF = (unint64_t)&v219[-v224 - 1] >= v222)
                  : (_CF = 1),
                    !_CF))
              {
                v228 = *(_QWORD **)(v170 + 64);
                do
                {
LABEL_332:
                  v234 = *--v228;
                  *v228 = 0;
                  *--v219 = v234;
                }
                while (v228 != v221);
                goto LABEL_333;
              }
              v226 = v224 + 1;
              v227 = (v224 + 1) & 0x3FFFFFFFFFFFFFFCLL;
              v228 = (_QWORD *)(v222 - 8 * v227);
              v229 = v219 - 2;
              v230 = (__int128 *)(v222 - 32);
              v231 = v227;
              do
              {
                v233 = *v230;
                v232 = v230[1];
                *v230 = 0uLL;
                v230[1] = 0uLL;
                v230 -= 2;
                *(v229 - 1) = v233;
                *v229 = v232;
                v229 -= 2;
                v231 -= 4;
              }
              while (v231);
              v219 -= v227;
              if (v226 != v227)
                goto LABEL_332;
LABEL_333:
              v222 = *(_QWORD *)(v170 + 56);
              v235 = *(_QWORD **)(v170 + 64);
              *(_QWORD *)(v170 + 56) = v219;
              *(_QWORD *)(v170 + 64) = v212;
              v236 = *(_QWORD *)(v170 + 72);
              *(_QWORD *)(v170 + 72) = v220;
              if (v235 == (_QWORD *)v222)
              {
                v10 = md::SignedDistanceFieldGenerator::_hypotCache + 129752;
                if (!v222)
                  goto LABEL_343;
              }
              else
              {
                v676 = v236;
                do
                {
                  v238 = (void (***)(_QWORD))*--v235;
                  v237 = v238;
                  *v235 = 0;
                  if (v238)
                  {
                    (**v237)(v237);
                    if ((v239 & 1) == 0
                    {
                      v240 = operator new();
                      mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v240, "VectorKitLabels", 0x5ED09DD50000000FLL);
                    }
                    (*(void (**)(uint64_t, void (***)(_QWORD), uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc
                                                                                            + 40))(mdm::Allocator::instance(void)::alloc, v237, 112);
                  }
                }
                while (v235 != (_QWORD *)v222);
                v10 = &md::SignedDistanceFieldGenerator::_hypotCache[32438];
                v236 = v676;
                if (!v222)
                  goto LABEL_343;
              }
LABEL_342:
              (*(void (**)(_QWORD, unint64_t, unint64_t))(**(_QWORD **)(v170 + 80) + 40))(*(_QWORD *)(v170 + 80), v222, v236 - v222);
LABEL_343:
              *(_QWORD *)(v170 + 64) = v212;
              v9 = a1;
              v12 = v689;
              if (v165)
              {
                (**v165)(v165);
                {
                  v242 = operator new();
                  *((_QWORD *)v10 + 299) = geo::MallocZoneAllocator::MallocZoneAllocator(v242, "VectorKitLabels", 0x5ED09DD50000000FLL);
                }
                (*(void (**)(_QWORD, void (***)(_QWORD), uint64_t))(**((_QWORD **)v10 + 299) + 40))(*((_QWORD *)v10 + 299), v165, 112);
              }
              v164 += v166;
              v6 += 8;
              if (v6 == v681)
                goto LABEL_191;
            }
            v171 = (char *)v135 - (char *)__p;
            v172 = v135 - __p;
            v173 = v172 + 1;
            if ((unint64_t)(v172 + 1) >> 61)
              abort();
            if ((v684 - (char *)__p) >> 2 > v173)
              v173 = (v684 - (char *)__p) >> 2;
            if ((unint64_t)(v684 - (char *)__p) >= 0x7FFFFFFFFFFFFFF8)
              v174 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v174 = v173;
            if (v174)
            {
              if (v174 >> 61)
                goto LABEL_832;
              v175 = (char *)operator new(8 * v174);
            }
            else
            {
              v175 = 0;
            }
            v176 = (uint64_t *)&v175[8 * v172];
            *(_QWORD *)&v698 = 0;
            *v176 = v167;
            v675 = v176 + 1;
            v177 = (char *)v135 - (char *)__p;
            if (v135 != __p)
            {
              v178 = v177 - 8;
              if ((unint64_t)(v177 - 8) < 0x138
                || (v182 = v178 & 0xFFFFFFFFFFFFFFF8,
                    (uint64_t *)((char *)v135 - (v178 & 0xFFFFFFFFFFFFFFF8) - 8) > v135 - 1)
                || &v175[v171 - 8 - v182] > &v175[v171 - 8])
              {
                v179 = v135;
                v180 = __p;
                goto LABEL_264;
              }
              v183 = v178 >> 3;
              v180 = __p;
              if (&v135[-v183 - 1] < v176)
              {
                v184 = (unint64_t)&v175[v171 - v182 - 8];
                v179 = v135;
                if (v184 < (unint64_t)v135)
                  goto LABEL_847;
              }
              v185 = v183 + 1;
              v179 = &v135[-(v185 & 0x3FFFFFFFFFFFFFFCLL)];
              v186 = &v175[8 * v172 - 16];
              v187 = v135 - 4;
              v188 = v185 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v190 = *(_OWORD *)v187;
                v189 = *((_OWORD *)v187 + 1);
                *(_OWORD *)v187 = 0uLL;
                *((_OWORD *)v187 + 1) = 0uLL;
                v187 -= 4;
                *((_OWORD *)v186 - 1) = v190;
                *(_OWORD *)v186 = v189;
                v186 -= 32;
                v188 -= 4;
              }
              while (v188);
              v176 -= v185 & 0x3FFFFFFFFFFFFFFCLL;
              v180 = __p;
              if (v185 != (v185 & 0x3FFFFFFFFFFFFFFCLL))
              {
LABEL_847:
                do
                {
LABEL_264:
                  v181 = *--v179;
                  *v179 = 0;
                  *--v176 = v181;
                }
                while (v179 != v180);
              }
              do
              {
                v193 = *--v135;
                v192 = v193;
                *v135 = 0;
                if (v193)
                {
                  v194 = *(_QWORD **)(v192 + 56);
                  if (v194)
                  {
                    v195 = *(_QWORD **)(v192 + 64);
                    v191 = *(_QWORD *)(v192 + 56);
                    if (v195 != v194)
                    {
                      do
                      {
                        v198 = (void (***)(_QWORD, uint64_t))*--v195;
                        v197 = v198;
                        *v195 = 0;
                        if (v198)
                        {
                          (**v197)(v197, v191);
                          if ((v199 & 1) == 0
                          {
                            v200 = operator new();
                            *(_QWORD *)(v200 + 16) = 0x5ED09DD50000000FLL;
                            *(_QWORD *)(v200 + 24) = "VectorKitLabels";
                            *(_OWORD *)(v200 + 32) = xmmword_19FFB2E80;
                            *(_QWORD *)v200 = &off_1E42B5668;
                            *(_QWORD *)(v200 + 8) = "VectorKitLabels";
                            *(_OWORD *)(v200 + 72) = 0u;
                            *(_OWORD *)(v200 + 88) = 0u;
                            *(_OWORD *)(v200 + 104) = 0u;
                            *(_OWORD *)(v200 + 120) = 0u;
                            *(_OWORD *)(v200 + 136) = 0u;
                            *(_OWORD *)(v200 + 152) = 0u;
                            *(_OWORD *)(v200 + 168) = 0u;
                            *(_OWORD *)(v200 + 184) = 0u;
                            *(_OWORD *)(v200 + 200) = 0u;
                            *(_OWORD *)(v200 + 216) = 0u;
                            *(_OWORD *)(v200 + 232) = 0u;
                            *(_QWORD *)(v200 + 248) = 0;
                            v685 = v200;
                            *(_OWORD *)(v200 + 56) = 0u;
                            v201 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v200 + 56), 0);
                            if ((_DWORD)v201)
                              geo::read_write_lock::logFailure(v201, (uint64_t)"initialization", v202);
                            zone = malloc_create_zone(0, 0);
                            *(_QWORD *)(v685 + 48) = zone;
                            malloc_set_zone_name(zone, "VectorKitLabels");
                            *(_QWORD *)(v685 + 256) = os_log_create("com.apple.VectorKit", "Memory");
                            *((_QWORD *)v10 + 299) = v685;
                          }
                          (*(void (**)(_QWORD, void (***)(_QWORD, uint64_t), uint64_t))(**((_QWORD **)v10 + 299) + 40))(*((_QWORD *)v10 + 299), v197, 112);
                        }
                      }
                      while (v195 != v194);
                      v191 = *(_QWORD *)(v192 + 56);
                    }
                    *(_QWORD *)(v192 + 64) = v194;
                    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v192 + 80) + 40))(*(_QWORD *)(v192 + 80), v191, *(_QWORD *)(v192 + 72) - v191);
                  }
                  MEMORY[0x1A1AF4E00](v192, 0x1020C4010FC18DELL);
                }
              }
              while (v135 != __p);
            }
            v684 = &v175[8 * v174];
            if (__p)
              operator delete(__p);
            __p = v176;
            v135 = v675;
            v169 = v698;
            if (!(_QWORD)v698)
              goto LABEL_305;
LABEL_293:
            v203 = *(_QWORD **)(v169 + 56);
            if (v203)
            {
              v204 = *(_QWORD **)(v169 + 64);
              v205 = *(_QWORD *)(v169 + 56);
              if (v204 != v203)
              {
                do
                {
                  v207 = (void (***)(_QWORD, uint64_t))*--v204;
                  v206 = v207;
                  *v204 = 0;
                  if (v207)
                  {
                    (**v206)(v206, v205);
                    if ((v208 & 1) == 0
                    {
                      v209 = operator new();
                      *((_QWORD *)v10 + 299) = geo::MallocZoneAllocator::MallocZoneAllocator(v209, "VectorKitLabels", 0x5ED09DD50000000FLL);
                    }
                    (*(void (**)(_QWORD, void (***)(_QWORD, uint64_t), uint64_t))(**((_QWORD **)v10 + 299) + 40))(*((_QWORD *)v10 + 299), v206, 112);
                  }
                }
                while (v204 != v203);
                v205 = *(_QWORD *)(v169 + 56);
              }
              *(_QWORD *)(v169 + 64) = v203;
              (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v169 + 80) + 40))(*(_QWORD *)(v169 + 80), v205, *(_QWORD *)(v169 + 72) - v205);
            }
            MEMORY[0x1A1AF4E00](v169, 0x1020C4010FC18DELL);
            goto LABEL_305;
          }
LABEL_191:
          v7 = (unint64_t)v135;
          v53 = v671;
          v678 = *(_QWORD *)v678;
          if (!v678)
            goto LABEL_364;
        }
        v145 = (uint64_t *)v7;
        v146 = __p;
        do
        {
LABEL_209:
          v147 = *--v145;
          *v145 = 0;
          *--v142 = v147;
        }
        while (v145 != v146);
        goto LABEL_210;
      }
      v135 = 0;
      __p = 0;
LABEL_364:
      v254 = *(v53 - 1);
      v255 = *(_QWORD *)(v254 + 248);
      v256 = *(int8x16_t **)(v254 + 256);
      v257 = 126 - 2 * __clz(((uint64_t)v256->i64 - v255) >> 3);
      if (v256 == (int8x16_t *)v255)
        v258 = 0;
      else
        v258 = v257;
      std::__introsort<std::_ClassicAlgPolicy,md::RibbonLayer<md::Ribbons::DottedRouteLineRibbonDescriptor>::batch(std::unordered_map<md::DottedRouteLineBatchKey,std::vector<std::unique_ptr<md::DottedRouteLineRibbon,mdm::TypeDeleter<md::DottedRouteLineRibbon>>,geo::StdAllocator<std::unique_ptr<md::DottedRouteLineRibbon,mdm::TypeDeleter<md::DottedRouteLineRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DottedRouteLineBatchKey,std::vector<std::unique_ptr<md::DottedRouteLineRibbon,mdm::TypeDeleter<md::DottedRouteLineRibbon>>,geo::StdAllocator<std::unique_ptr<md::DottedRouteLineRibbon,mdm::TypeDeleter<md::DottedRouteLineRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DottedRouteLineRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DottedRouteLineRibbonDescriptor>> const)#1} &,std::default_delete<md::RibbonSection>*,false>(v255, v256, v258, 1);
      v259 = (void **)__p;
      if (__p == v135)
      {
        v260 = __p;
        if (!v135)
          goto LABEL_4;
      }
      else
      {
        do
        {
          v6 = *(v671 - 1);
          v262 = *v259;
          *v259 = 0;
          v695 = v262;
          v264 = *(_QWORD **)(v6 + 256);
          v263 = *(_QWORD *)(v6 + 264);
          if ((unint64_t)v264 >= v263)
          {
            v265 = *(_QWORD *)(v6 + 248);
            v266 = (char *)v264 - v265;
            v267 = ((uint64_t)v264 - v265) >> 3;
            if ((unint64_t)(v267 + 1) >> 61)
              abort();
            v268 = v263 - v265;
            v269 = v268 >> 2;
            if (v268 >> 2 <= (unint64_t)(v267 + 1))
              v269 = v267 + 1;
            if ((unint64_t)v268 >= 0x7FFFFFFFFFFFFFF8)
              v270 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v270 = v269;
            if (v270)
            {
              if (v270 >> 61)
                goto LABEL_832;
              v271 = (char *)operator new(8 * v270);
            }
            else
            {
              v271 = 0;
            }
            v272 = &v271[8 * v267];
            v273 = &v271[8 * v270];
            v695 = 0;
            *(_QWORD *)v272 = v262;
            v7 = (unint64_t)(v272 + 8);
            v274 = *(char **)(v6 + 248);
            v275 = *(char **)(v6 + 256);
            if (v275 == v274)
            {
              *(_QWORD *)(v6 + 248) = v272;
              *(_QWORD *)(v6 + 256) = v7;
              *(_QWORD *)(v6 + 264) = v273;
            }
            else
            {
              v276 = v275 - v274 - 8;
              if (v276 <= 0x77)
                goto LABEL_848;
              if (&v275[-(v276 & 0xFFFFFFFFFFFFFFF8) - 8] < v272
                && &v266[(_QWORD)v271 - (v276 & 0xFFFFFFFFFFFFFFF8) - 8] < v275)
              {
                goto LABEL_848;
              }
              v278 = (v276 >> 3) + 1;
              v279 = &v271[8 * v267 - 16];
              v280 = v275 - 32;
              v281 = v278 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v283 = *(_OWORD *)v280;
                v282 = *((_OWORD *)v280 + 1);
                *(_OWORD *)v280 = 0uLL;
                *((_OWORD *)v280 + 1) = 0uLL;
                v280 -= 32;
                *((_OWORD *)v279 - 1) = v283;
                *(_OWORD *)v279 = v282;
                v279 -= 32;
                v281 -= 4;
              }
              while (v281);
              v272 -= 8 * (v278 & 0x3FFFFFFFFFFFFFFCLL);
              v275 -= 8 * (v278 & 0x3FFFFFFFFFFFFFFCLL);
              if (v278 != (v278 & 0x3FFFFFFFFFFFFFFCLL))
              {
LABEL_848:
                do
                {
                  v284 = *((_QWORD *)v275 - 1);
                  v275 -= 8;
                  *(_QWORD *)v275 = 0;
                  *((_QWORD *)v272 - 1) = v284;
                  v272 -= 8;
                }
                while (v275 != v274);
              }
              v275 = *(char **)(v6 + 248);
              v285 = *(char **)(v6 + 256);
              *(_QWORD *)(v6 + 248) = v272;
              *(_QWORD *)(v6 + 256) = v7;
              *(_QWORD *)(v6 + 264) = v273;
              while (v285 != v275)
              {
                v288 = *((_QWORD *)v285 - 1);
                v285 -= 8;
                v287 = v288;
                *(_QWORD *)v285 = 0;
                if (v288)
                {
                  v289 = *(_QWORD **)(v287 + 56);
                  if (v289)
                  {
                    v290 = *(_QWORD **)(v287 + 64);
                    v286 = *(_QWORD *)(v287 + 56);
                    if (v290 != v289)
                    {
                      do
                      {
                        v292 = (void (***)(_QWORD, uint64_t))*--v290;
                        v291 = v292;
                        *v290 = 0;
                        if (v292)
                        {
                          (**v291)(v291, v286);
                          if ((v293 & 1) == 0
                          {
                            v294 = operator new();
                            mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v294, "VectorKitLabels", 0x5ED09DD50000000FLL);
                          }
                          (*(void (**)(uint64_t, void (***)(_QWORD, uint64_t), uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc + 40))(mdm::Allocator::instance(void)::alloc, v291, 112);
                        }
                      }
                      while (v290 != v289);
                      v286 = *(_QWORD *)(v287 + 56);
                    }
                    *(_QWORD *)(v287 + 64) = v289;
                    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v287 + 80) + 40))(*(_QWORD *)(v287 + 80), v286, *(_QWORD *)(v287 + 72) - v286);
                    v10 = md::SignedDistanceFieldGenerator::_hypotCache + 129752;
                  }
                  MEMORY[0x1A1AF4E00](v287, 0x1020C4010FC18DELL);
                  v9 = a1;
                }
              }
            }
            v12 = v689;
            if (v275)
              operator delete(v275);
          }
          else
          {
            v695 = 0;
            *v264 = v262;
            v7 = (unint64_t)(v264 + 1);
          }
          *(_QWORD *)(v6 + 256) = v7;
          v295 = v695;
          v695 = 0;
          if (v295)
          {
            v6 = v295[7];
            if (v6)
            {
              v296 = (_QWORD *)v295[8];
              v261 = v295[7];
              if (v296 != (_QWORD *)v6)
              {
                do
                {
                  v298 = (void (***)(_QWORD, uint64_t))*--v296;
                  v297 = v298;
                  *v296 = 0;
                  if (v298)
                  {
                    (**v297)(v297, v261);
                    if ((v299 & 1) == 0
                    {
                      v300 = operator new();
                      *((_QWORD *)v10 + 299) = geo::MallocZoneAllocator::MallocZoneAllocator(v300, "VectorKitLabels", 0x5ED09DD50000000FLL);
                    }
                    (*(void (**)(_QWORD, void (***)(_QWORD, uint64_t), uint64_t))(**((_QWORD **)v10 + 299) + 40))(*((_QWORD *)v10 + 299), v297, 112);
                  }
                }
                while (v296 != (_QWORD *)v6);
                v261 = v295[7];
              }
              v295[8] = v6;
              (*(void (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)v295[10] + 40))(v295[10], v261, v295[9] - v261);
            }
            MEMORY[0x1A1AF4E00](v295, 0x1020C4010FC18DELL);
          }
          ++v259;
        }
        while (v259 != (void **)v135);
        v260 = __p;
        if (!__p)
          goto LABEL_4;
        do
        {
          v303 = *--v135;
          v302 = v303;
          *v135 = 0;
          if (v303)
          {
            v304 = *(_QWORD *)(v302 + 56);
            if (v304)
            {
              v6 = *(_QWORD *)(v302 + 64);
              v301 = *(_QWORD *)(v302 + 56);
              if (v6 != v304)
              {
                do
                {
                  v306 = *(void (****)(_QWORD, uint64_t))(v6 - 8);
                  v6 -= 8;
                  v305 = v306;
                  *(_QWORD *)v6 = 0;
                  if (v306)
                  {
                    (**v305)(v305, v301);
                    if ((v307 & 1) == 0
                    {
                      v308 = operator new();
                      *((_QWORD *)v10 + 299) = geo::MallocZoneAllocator::MallocZoneAllocator(v308, "VectorKitLabels", 0x5ED09DD50000000FLL);
                    }
                    (*(void (**)(_QWORD, void (***)(_QWORD, uint64_t), uint64_t))(**((_QWORD **)v10 + 299) + 40))(*((_QWORD *)v10 + 299), v305, 112);
                  }
                }
                while (v6 != v304);
                v301 = *(_QWORD *)(v302 + 56);
              }
              *(_QWORD *)(v302 + 64) = v304;
              (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v302 + 80) + 40))(*(_QWORD *)(v302 + 80), v301, *(_QWORD *)(v302 + 72) - v301);
            }
            MEMORY[0x1A1AF4E00](v302, 0x1020C4010FC18DELL);
            v260 = __p;
          }
        }
        while (v135 != v260);
      }
      operator delete(v260);
LABEL_4:
      std::__hash_table<std::__hash_value_type<unsigned int,std::vector<std::unique_ptr<md::DottedRouteLineRibbon,mdm::TypeDeleter<md::DottedRouteLineRibbon>>,geo::StdAllocator<std::unique_ptr<md::DottedRouteLineRibbon,mdm::TypeDeleter<md::DottedRouteLineRibbon>>,mdm::Allocator>>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::vector<std::unique_ptr<md::DottedRouteLineRibbon,mdm::TypeDeleter<md::DottedRouteLineRibbon>>,geo::StdAllocator<std::unique_ptr<md::DottedRouteLineRibbon,mdm::TypeDeleter<md::DottedRouteLineRibbon>>,mdm::Allocator>>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::vector<std::unique_ptr<md::DottedRouteLineRibbon,mdm::TypeDeleter<md::DottedRouteLineRibbon>>,geo::StdAllocator<std::unique_ptr<md::DottedRouteLineRibbon,mdm::TypeDeleter<md::DottedRouteLineRibbon>>,mdm::Allocator>>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,geo::StdAllocator<std::__hash_value_type<unsigned int,std::vector<std::unique_ptr<md::DottedRouteLineRibbon,mdm::TypeDeleter<md::DottedRouteLineRibbon>>,geo::StdAllocator<std::unique_ptr<md::DottedRouteLineRibbon,mdm::TypeDeleter<md::DottedRouteLineRibbon>>,mdm::Allocator>>>,mdm::Allocator>>::~__hash_table((uint64_t *)&v703);
      v11 = (_QWORD *)*v664;
      if (!*v664)
        goto LABEL_459;
    }
    while (1)
    {
      v55 = ggl::CullingGrid::intersectedCellsForRibbon(*(_QWORD *)(*v15 + 88), *(_QWORD **)(*v15 + 72));
      v56 = v55;
      v57 = v55;
      v58 = *((_QWORD *)&v703 + 1);
      if (*((_QWORD *)&v703 + 1))
      {
        v59 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&v703 + 8));
        v59.i16[0] = vaddlv_u8(v59);
        if (v59.u32[0] > 1uLL)
        {
          v7 = v55;
          if (*((_QWORD *)&v703 + 1) <= (unint64_t)v55)
            v7 = (unint64_t)v55 % *((_QWORD *)&v703 + 1);
        }
        else
        {
          v7 = (DWORD2(v703) - 1) & v55;
        }
        v60 = *(uint64_t **)(v703 + 8 * v7);
        if (v60)
        {
          v61 = *v60;
          if (*v60)
          {
            if (v59.u32[0] < 2uLL)
            {
              while (1)
              {
                v63 = *(_QWORD *)(v61 + 8);
                if (v63 == v55)
                {
                  if (*(_DWORD *)(v61 + 16) == v55)
                    goto LABEL_122;
                }
                else if ((v63 & (*((_QWORD *)&v703 + 1) - 1)) != v7)
                {
                  goto LABEL_62;
                }
                v61 = *(_QWORD *)v61;
                if (!v61)
                  goto LABEL_62;
              }
            }
            do
            {
              v62 = *(_QWORD *)(v61 + 8);
              if (v62 == v55)
              {
                if (*(_DWORD *)(v61 + 16) == v55)
                  goto LABEL_122;
              }
              else
              {
                if (v62 >= *((_QWORD *)&v703 + 1))
                  v62 %= *((_QWORD *)&v703 + 1);
                if (v62 != v7)
                  break;
              }
              v61 = *(_QWORD *)v61;
            }
            while (v61);
          }
        }
      }
LABEL_62:
      v61 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v706 + 16))(v706, 56, 8);
      *(_QWORD *)&v698 = v61;
      *((_QWORD *)&v698 + 1) = &v706;
      *(_QWORD *)v61 = 0;
      *(_QWORD *)(v61 + 8) = v57;
      *(_DWORD *)(v61 + 16) = v56;
      *(_QWORD *)(v61 + 32) = 0;
      *(_QWORD *)(v61 + 40) = 0;
      *(_QWORD *)(v61 + 24) = 0;
      {
        v119 = operator new();
        mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v119, "VectorKitLabels", 0x5ED09DD50000000FLL);
      }
      *(_QWORD *)(v61 + 48) = mdm::Allocator::instance(void)::alloc;
      LOBYTE(v699) = 1;
      v65 = (float)(v707 + 1);
      if (!v58 || (float)(v708 * (float)v58) < v65)
        break;
LABEL_112:
      v86 = *(uint64_t **)(v703 + 8 * v7);
      if (v86)
      {
        *(_QWORD *)v61 = *v86;
LABEL_120:
        *v86 = v61;
        goto LABEL_121;
      }
      *(_QWORD *)v61 = v705;
      v705 = v61;
      *(_QWORD *)(v703 + 8 * v7) = &v705;
      if (*(_QWORD *)v61)
      {
        v87 = *(_QWORD *)(*(_QWORD *)v61 + 8);
        if ((v58 & (v58 - 1)) != 0)
        {
          if (v87 >= v58)
            v87 %= v58;
        }
        else
        {
          v87 &= v58 - 1;
        }
        v86 = (uint64_t *)(v703 + 8 * v87);
        goto LABEL_120;
      }
LABEL_121:
      ++v707;
LABEL_122:
      v88 = *(_QWORD **)(v61 + 32);
      v89 = *(_QWORD *)(v61 + 40);
      if ((unint64_t)v88 < v89)
      {
        if (v88)
        {
          v90 = *v15;
          *v15 = 0;
          *v88 = v90;
        }
        v54 = v88 + 1;
        goto LABEL_41;
      }
      v91 = *(_QWORD *)(v61 + 24);
      v92 = ((uint64_t)v88 - v91) >> 3;
      v93 = v92 + 1;
      if ((unint64_t)(v92 + 1) >> 61)
        abort();
      v94 = v89 - v91;
      if (v94 >> 2 > v93)
        v93 = v94 >> 2;
      if ((unint64_t)v94 >= 0x7FFFFFFFFFFFFFF8)
        v95 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v95 = v93;
      if (v95)
      {
        v96 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v61 + 48) + 16))(*(_QWORD *)(v61 + 48), 8 * v95, 8);
        v97 = (_QWORD *)(v96 + 8 * v92);
        v98 = v96 + 8 * v95;
        if (v96)
        {
          v99 = *v15;
          *v15 = 0;
          *v97 = v99;
        }
      }
      else
      {
        v98 = 0;
        v97 = (_QWORD *)(8 * v92);
      }
      v54 = v97 + 1;
      v100 = *(_QWORD **)(v61 + 24);
      v101 = *(_QWORD *)(v61 + 32);
      if ((_QWORD *)v101 != v100)
      {
        v102 = v101 - (_QWORD)v100 - 8;
        if (v102 > 0x47
          && ((v103 = v102 >> 3, v101 - 8 * v103 - 8 >= (unint64_t)v97)
           || (unint64_t)&v97[-v103 - 1] >= v101))
        {
          v111 = v103 + 1;
          v112 = (v103 + 1) & 0x3FFFFFFFFFFFFFFCLL;
          v104 = (_QWORD *)(v101 - 8 * v112);
          v113 = v97 - 2;
          v114 = (__int128 *)(v101 - 32);
          v115 = v112;
          do
          {
            v117 = *v114;
            v116 = v114[1];
            *v114 = 0uLL;
            v114[1] = 0uLL;
            v114 -= 2;
            *(v113 - 1) = v117;
            *v113 = v116;
            v113 -= 2;
            v115 -= 4;
          }
          while (v115);
          v97 -= v112;
          if (v111 == v112)
            goto LABEL_141;
        }
        else
        {
          v104 = *(_QWORD **)(v61 + 32);
        }
        do
        {
          v105 = *--v104;
          *v104 = 0;
          *--v97 = v105;
        }
        while (v104 != v100);
LABEL_141:
        v101 = *(_QWORD *)(v61 + 24);
        v106 = *(_QWORD **)(v61 + 32);
        *(_QWORD *)(v61 + 24) = v97;
        *(_QWORD *)(v61 + 32) = v54;
        v7 = *(_QWORD *)(v61 + 40);
        *(_QWORD *)(v61 + 40) = v98;
        while (v106 != (_QWORD *)v101)
        {
          v108 = (void (***)(_QWORD))*--v106;
          v107 = v108;
          *v106 = 0;
          if (v108)
          {
            (**v107)(v107);
            {
              v110 = operator new();
              mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v110, "VectorKitLabels", 0x5ED09DD50000000FLL);
            }
            (*(void (**)(uint64_t, void (***)(_QWORD), uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc
                                                                                    + 40))(mdm::Allocator::instance(void)::alloc, v107, 112);
          }
        }
        v12 = v16;
        if (!v101)
          goto LABEL_41;
LABEL_151:
        (*(void (**)(_QWORD, unint64_t, unint64_t))(**(_QWORD **)(v61 + 48) + 40))(*(_QWORD *)(v61 + 48), v101, v7 - v101);
        goto LABEL_41;
      }
      *(_QWORD *)(v61 + 24) = v97;
      *(_QWORD *)(v61 + 32) = v54;
      v7 = *(_QWORD *)(v61 + 40);
      *(_QWORD *)(v61 + 40) = v98;
      if (v101)
        goto LABEL_151;
LABEL_41:
      *(_QWORD *)(v61 + 32) = v54;
      ++v15;
      v10 = &md::SignedDistanceFieldGenerator::_hypotCache[32438];
      if (v15 == (uint64_t *)v6)
        goto LABEL_8;
    }
    v66 = (v58 & (v58 - 1)) != 0;
    if (v58 < 3)
      v66 = 1;
    v67 = v66 | (2 * v58);
    v68 = vcvtps_u32_f32(v65 / v708);
    if (v67 <= v68)
      prime = v68;
    else
      prime = v67;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
    }
    v58 = *((_QWORD *)&v703 + 1);
    if (prime <= *((_QWORD *)&v703 + 1))
    {
      if (prime >= *((_QWORD *)&v703 + 1))
        goto LABEL_99;
      v80 = vcvtps_u32_f32((float)v707 / v708);
      if (*((_QWORD *)&v703 + 1) < 3uLL
        || (v81 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&v703 + 8)), v81.i16[0] = vaddlv_u8(v81), v81.u32[0] > 1uLL))
      {
        v80 = std::__next_prime(v80);
      }
      else
      {
        v82 = 1 << -(char)__clz(v80 - 1);
        if (v80 >= 2)
          v80 = v82;
      }
      if (prime <= v80)
        prime = v80;
      if (prime >= v58)
      {
        v58 = *((_QWORD *)&v703 + 1);
LABEL_99:
        if ((v58 & (v58 - 1)) != 0)
        {
          if (v58 <= v57)
            v7 = v57 % v58;
          else
            v7 = v57;
        }
        else
        {
          v7 = ((_DWORD)v58 - 1) & v57;
        }
        goto LABEL_112;
      }
      if (!prime)
      {
        v118 = v703;
        *(_QWORD *)&v703 = 0;
        if (v118)
          (*(void (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)v704 + 40))(v704, v118, 8 * *((_QWORD *)&v703 + 1));
        v58 = 0;
        *((_QWORD *)&v703 + 1) = 0;
        goto LABEL_99;
      }
    }
    v70 = (*(uint64_t (**)(unint64_t, size_t, uint64_t))(*(_QWORD *)v704 + 16))(v704, 8 * prime, 8);
    v71 = v703;
    *(_QWORD *)&v703 = v70;
    if (v71)
      (*(void (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)v704 + 40))(v704, v71, 8 * *((_QWORD *)&v703 + 1));
    v72 = 0;
    *((_QWORD *)&v703 + 1) = prime;
    do
      *(_QWORD *)(v703 + 8 * v72++) = 0;
    while (prime != v72);
    v73 = (_QWORD **)v705;
    if (!v705)
    {
LABEL_98:
      v58 = prime;
      goto LABEL_99;
    }
    v74 = *(_QWORD *)(v705 + 8);
    v75 = prime - 1;
    if ((prime & (prime - 1)) == 0)
    {
      v76 = v74 & v75;
      *(_QWORD *)(v703 + 8 * v76) = &v705;
      for (i = *v73; *v73; i = *v73)
      {
        v78 = i[1] & v75;
        if (v78 == v76)
        {
          v73 = (_QWORD **)i;
        }
        else if (*(_QWORD *)(v703 + 8 * v78))
        {
          *v73 = (_QWORD *)*i;
          v79 = 8 * v78;
          *i = **(_QWORD **)(v703 + v79);
          **(_QWORD **)(v703 + v79) = i;
        }
        else
        {
          *(_QWORD *)(v703 + 8 * v78) = v73;
          v73 = (_QWORD **)i;
          v76 = v78;
        }
      }
      goto LABEL_98;
    }
    if (v74 >= prime)
      v74 %= prime;
    *(_QWORD *)(v703 + 8 * v74) = &v705;
    v83 = *v73;
    if (!*v73)
      goto LABEL_98;
    while (1)
    {
      v85 = v83[1];
      if (v85 >= prime)
        v85 %= prime;
      if (v85 != v74)
      {
        if (!*(_QWORD *)(v703 + 8 * v85))
        {
          *(_QWORD *)(v703 + 8 * v85) = v73;
          goto LABEL_103;
        }
        *v73 = (_QWORD *)*v83;
        v84 = 8 * v85;
        *v83 = **(_QWORD **)(v703 + v84);
        **(_QWORD **)(v703 + v84) = v83;
        v83 = v73;
      }
      v85 = v74;
LABEL_103:
      v73 = (_QWORD **)v83;
      v83 = (_QWORD *)*v83;
      v74 = v85;
      if (!v83)
        goto LABEL_98;
    }
  }
  v12 = 0;
  v671 = 0;
LABEL_459:
  v316 = a6[24];
  if (a6[24])
  {
    LOBYTE(v6) = a6[1];
    v317 = *a6;
    v8 = *(_QWORD *)(a6 + 4);
  }
  else
  {
    v317 = 0;
  }
  v318 = &unk_1ECE44000;
  *(_QWORD *)v9 = &off_1E42AF428;
  *(_QWORD *)(v9 + 8) = 0;
  *(_QWORD *)(v9 + 16) = 0;
  *(_QWORD *)(v9 + 24) = 0;
  v319 = (char *)v671 - (char *)v12;
  if (v671 == v12)
  {
    v656 = 0;
    v322 = 0;
  }
  else
  {
    if (v319 < 0)
      abort();
    v320 = operator new((char *)v671 - (char *)v12);
    *(_QWORD *)(v9 + 8) = v320;
    *(_QWORD *)(v9 + 16) = v320;
    v321 = (char *)&v320[v319 >> 3];
    *(_QWORD *)(v9 + 24) = v321;
    v322 = v320;
    memcpy(v320, v12, v319);
    v656 = v321;
    *(_QWORD *)(v9 + 16) = v321;
  }
  *(_OWORD *)(v9 + 32) = 0u;
  *(_QWORD *)(v9 + 72) = 0;
  v654 = (gdc::GlobeTileGrid **)(v9 + 72);
  v655 = (void **)(v9 + 32);
  *(_BYTE *)(v9 + 80) = 0;
  *(_BYTE *)(v9 + 104) = 0;
  *(_OWORD *)(v9 + 48) = 0u;
  *(_BYTE *)(v9 + 64) = 0;
  if (v316)
  {
    *(_BYTE *)(v9 + 80) = v317;
    *(_BYTE *)(v9 + 81) = v6;
    *(_QWORD *)(v9 + 84) = v8;
    *(_BYTE *)(v9 + 104) = 1;
  }
  v690 = v12;
  if (v322 == v656)
  {
    v429 = 0;
    v324 = 0;
    goto LABEL_599;
  }
  v653 = (QuadTile *)(v9 + 80);
  v323 = 0;
  v324 = 0;
  v325 = 0;
  v326.i64[0] = 0x400000004;
  v326.i64[1] = 0x400000004;
  while (2)
  {
    v659 = v322;
    v327 = (_QWORD *)*v322;
    v327[1] = v9;
    v329 = (_QWORD **)v327[31];
    v328 = (_QWORD **)v327[32];
    v661 = v328;
LABEL_474:
    if (v329 != v328)
    {
      v331 = *v329;
      v331[1] = **v329;
      v331[3] = v331[2];
      v331[5] = v331[4];
      v332 = v331[7];
      __pa = v331[8];
      v669 = v329;
      if (v332 == __pa)
        goto LABEL_548;
      v663 = v325;
      v665 = v324;
      v672 = v323;
      v682 = 0;
      v333 = 0;
      v334 = 0;
      v686 = 0;
      v335 = 0;
      v336 = 0;
      v677 = v331;
      while (1)
      {
        v340 = *(_QWORD **)v332;
        v341 = *(_QWORD *)(*(_QWORD *)v332 + 88);
        v342 = 0xAAAAAAAAAAAAAAABLL * ((v335 - v336) >> 2);
        v343 = v341 - v342;
        if (v341 <= v342)
        {
          if (v341 < v342)
            v335 = &v336[12 * v341];
        }
        else
        {
          if (0xAAAAAAAAAAAAAAABLL * ((v686 - v335) >> 2) >= v343)
          {
            v351 = &v335[12 * (12 * v343 / 0xC)];
          }
          else
          {
            if (v341 > 0x1555555555555555)
              abort();
            if (0x5555555555555556 * ((v686 - v336) >> 2) > v341)
              v341 = 0x5555555555555556 * ((v686 - v336) >> 2);
            if (0xAAAAAAAAAAAAAAABLL * ((v686 - v336) >> 2) >= 0xAAAAAAAAAAAAAAALL)
              v344 = 0x1555555555555555;
            else
              v344 = v341;
            if (v344 > 0x1555555555555555)
              goto LABEL_832;
            v345 = v333;
            v346 = (char *)operator new(12 * v344);
            v347 = &v346[4 * ((v335 - v336) >> 2)];
            if (v335 == v336)
            {
              v336 = &v346[4 * ((v335 - v336) >> 2)];
            }
            else
            {
              v348 = &v346[4 * ((v335 - v336) >> 2)];
              do
              {
                v349 = *(_QWORD *)(v335 - 12);
                v335 -= 12;
                v350 = *((_DWORD *)v335 + 2);
                *(_QWORD *)(v348 - 12) = v349;
                v348 -= 12;
                *((_DWORD *)v348 + 2) = v350;
              }
              while (v335 != v336);
              v335 = v336;
              v336 = v348;
            }
            v686 = &v346[12 * v344];
            v351 = &v347[12 * (12 * v343 / 0xC)];
            if (v335)
              operator delete(v335);
            v326.i64[0] = 0x400000004;
            v326.i64[1] = 0x400000004;
            v333 = v345;
          }
          v341 = v340[11];
          v335 = v351;
        }
        v352 = v333 - v334;
        v353 = (v333 - v334) >> 2;
        v354 = v341 - v353;
        if (v341 > v353)
          break;
        if (v341 < v353)
          v333 = &v334[4 * v341];
LABEL_531:
        v375 = (_DWORD *)v340[9];
        *(_DWORD *)v336 = *v375;
        *((_DWORD *)v336 + 1) = v375[1];
        *((_DWORD *)v336 + 2) = v375[2];
        *(_DWORD *)v334 = 0;
        if (v341 >= 2)
        {
          if (v341 < 9 || (_DWORD)v341 == 1)
            goto LABEL_533;
          v376 = 1;
          if (!((v341 - 2) >> 32))
          {
            v380 = v336 + 12;
            v381 = (char *)(v375 + 3);
            if (v336 + 12 >= (char *)&v375[3 * v341] || v381 >= &v336[12 * v341])
            {
              v379 = v341 - 1;
              v382 = (v341 - 1) & 0xFFFFFFFFFFFFFFFCLL;
              v383 = (int32x4_t *)(v334 + 4);
              v384 = v382;
              v385 = (int32x4_t)xmmword_19FFB5100;
              do
              {
                *v383++ = v385;
                v386 = *(_OWORD *)v381;
                v387 = *((_OWORD *)v381 + 2);
                v380[1] = *((_OWORD *)v381 + 1);
                v380[2] = v387;
                *v380 = v386;
                v380 += 3;
                v385 = vaddq_s32(v385, v326);
                v381 += 48;
                v384 -= 4;
              }
              while (v384);
              if (v379 != v382)
              {
                v376 = v382 | 1;
                goto LABEL_534;
              }
LABEL_537:
              if ((unint64_t)(4 * v379) < 0x10000)
              {
                v337 = v340[1] + 4 * v379;
                v338 = v340[3] + 6 * v379;
              }
              else
              {
                v337 = v340[1];
                v338 = v340[3];
              }
              v340[2] = v337;
              v340[4] = v338;
              v340[6] = v340[5];
              goto LABEL_479;
            }
LABEL_533:
            v376 = 1;
          }
LABEL_534:
          v377 = &v336[12 * v376 + 8];
          v378 = &v375[3 * v376 + 1];
          do
          {
            *(_DWORD *)&v334[4 * v376] = v376;
            ++v376;
            *((_DWORD *)v377 - 2) = *(v378 - 1);
            *((_DWORD *)v377 - 1) = *v378;
            *(_DWORD *)v377 = v378[1];
            v377 += 12;
            v378 += 3;
          }
          while (v341 != v376);
          v379 = v376 - 1;
          goto LABEL_537;
        }
LABEL_479:
        v339 = *(_QWORD **)v332;
        v332 += 8;
        v331[1] = v339[2] + v331[1] - v339[1];
        v331[3] = v339[4] + v331[3] - v339[3];
        v331[5] = v339[6] + v331[5] - v339[5];
        if (v332 == __pa)
        {
          operator delete(v334);
          operator delete(v336);
          v326.i64[0] = 0x400000004;
          v326.i64[1] = 0x400000004;
          v329 = (_QWORD **)v669;
          v323 = v672;
          v331 = (_QWORD *)*v669;
          v12 = v690;
          v325 = v663;
          v324 = v665;
LABEL_548:
          v9 = a1;
          if (v324 < v325)
          {
            *(_QWORD *)v324 = v331;
            v330 = v324 + 8;
          }
          else
          {
            v388 = v323;
            v389 = v324 - v323;
            v390 = v389 >> 3;
            v391 = (v389 >> 3) + 1;
            if (v391 >> 61)
              abort();
            v392 = v324;
            v393 = v388;
            v394 = v325 - v388;
            v395 = (v325 - v388) >> 2;
            if (v395 > v391)
              v391 = v395;
            if (v394 >= 0x7FFFFFFFFFFFFFF8)
              v396 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v396 = v391;
            if (v396)
            {
              if (!(v396 >> 61))
              {
                v397 = (char *)operator new(8 * v396);
                v326.i64[0] = 0x400000004;
                v326.i64[1] = 0x400000004;
                goto LABEL_559;
              }
LABEL_832:
              std::__throw_bad_array_new_length[abi:nn180100]();
            }
            v397 = 0;
LABEL_559:
            v398 = &v397[8 * v390];
            *(_QWORD *)v398 = v331;
            v330 = v398 + 8;
            v399 = v393;
            if (v392 != v393)
            {
              v400 = v392 - 8 - v393;
              if (v400 < 0x168)
              {
                v401 = v392;
                v399 = v393;
                goto LABEL_566;
              }
              if (&v397[v389 - 8 - (v400 & 0xFFFFFFFFFFFFFFF8)] > &v397[v389 - 8]
                || &v392[-(v400 & 0xFFFFFFFFFFFFFFF8) - 8] > v392 - 8
                || (unint64_t)(v392 - &v397[v389]) < 0x20)
              {
                v401 = v392;
                v399 = v393;
                goto LABEL_566;
              }
              v403 = (v400 >> 3) + 1;
              v401 = &v392[-8 * (v403 & 0x3FFFFFFFFFFFFFFCLL)];
              v404 = &v397[8 * v390 - 16];
              v405 = (__int128 *)(v392 - 16);
              v406 = v403 & 0x3FFFFFFFFFFFFFFCLL;
              v399 = v393;
              do
              {
                v407 = *v405;
                *((_OWORD *)v404 - 1) = *(v405 - 1);
                *(_OWORD *)v404 = v407;
                v404 -= 32;
                v405 -= 2;
                v406 -= 4;
              }
              while (v406);
              v398 -= 8 * (v403 & 0x3FFFFFFFFFFFFFFCLL);
              if (v403 != (v403 & 0x3FFFFFFFFFFFFFFCLL))
              {
                do
                {
LABEL_566:
                  v402 = *((_QWORD *)v401 - 1);
                  v401 -= 8;
                  *((_QWORD *)v398 - 1) = v402;
                  v398 -= 8;
                }
                while (v401 != v399);
              }
            }
            v325 = &v397[8 * v396];
            if (v399)
            {
              operator delete(v399);
              v326.i64[0] = 0x400000004;
              v326.i64[1] = 0x400000004;
            }
            v323 = v398;
            v329 = (_QWORD **)v669;
          }
          ++v329;
          v324 = v330;
          v328 = v661;
          goto LABEL_474;
        }
      }
      if (v354 <= (v682 - v333) >> 2)
      {
        v367 = v333;
        bzero(v333, 4 * v354);
        v333 = &v367[4 * v354];
LABEL_530:
        v341 = v340[11];
        v326.i64[0] = 0x400000004;
        v326.i64[1] = 0x400000004;
        goto LABEL_531;
      }
      if (v341 >> 62)
        abort();
      if ((v682 - v334) >> 1 > v341)
        v341 = (v682 - v334) >> 1;
      v355 = 0x3FFFFFFFFFFFFFFFLL;
      if ((unint64_t)(v682 - v334) < 0x7FFFFFFFFFFFFFFCLL)
        v355 = v341;
      if (v355 >> 62)
        goto LABEL_832;
      v356 = v333;
      v683 = v355;
      v357 = (char *)operator new(4 * v355);
      v358 = 4 * v354;
      v359 = v357;
      v360 = &v357[4 * v353];
      v679 = v358;
      bzero(v360, v358);
      if (v356 == v334)
      {
        v363 = v360;
        v364 = v683;
        v365 = v359;
        v366 = v679;
      }
      else
      {
        v361 = v356 - 4 - v334;
        if (v361 >= 0xBC)
        {
          v365 = v359;
          if (&v359[v352 - 4 - (v361 & 0xFFFFFFFFFFFFFFFCLL)] > &v359[v352 - 4])
          {
            v362 = v356;
            v363 = v360;
            v364 = v683;
            v366 = v679;
          }
          else
          {
            v366 = v679;
            if (&v356[-(v361 & 0xFFFFFFFFFFFFFFFCLL) - 4] <= v356 - 4
              && (unint64_t)(&v356[-v352] - v359) >= 0x20)
            {
              v368 = (v361 >> 2) + 1;
              v362 = &v356[-4 * (v368 & 0x7FFFFFFFFFFFFFF8)];
              v369 = &v359[4 * v353 - 16];
              v370 = (__int128 *)(v356 - 16);
              v371 = v368 & 0x7FFFFFFFFFFFFFF8;
              do
              {
                v372 = *v370;
                *((_OWORD *)v369 - 1) = *(v370 - 1);
                *(_OWORD *)v369 = v372;
                v369 -= 32;
                v370 -= 2;
                v371 -= 8;
              }
              while (v371);
              v363 = &v360[-4 * (v368 & 0x7FFFFFFFFFFFFFF8)];
              v364 = v683;
              if (v368 == (v368 & 0x7FFFFFFFFFFFFFF8))
                goto LABEL_527;
            }
            else
            {
              v362 = v356;
              v363 = v360;
              v364 = v683;
            }
          }
        }
        else
        {
          v362 = v356;
          v363 = v360;
          v364 = v683;
          v365 = v359;
          v366 = v679;
        }
        do
        {
          v373 = *((_DWORD *)v362 - 1);
          v362 -= 4;
          *((_DWORD *)v363 - 1) = v373;
          v363 -= 4;
        }
        while (v362 != v334);
      }
LABEL_527:
      v682 = &v365[4 * v364];
      v333 = &v360[v366];
      if (v334)
      {
        v374 = &v360[v366];
        operator delete(v334);
        v333 = v374;
      }
      v334 = v363;
      v331 = v677;
      goto LABEL_530;
    }
    v322 = v659 + 1;
    if (v659 + 1 != v656)
      continue;
    break;
  }
  if (!*(_BYTE *)(v9 + 64))
  {
    v318 = &unk_1ECE44000;
    goto LABEL_598;
  }
  v408 = (gdc::GlobeTileGrid *)operator new();
  v318 = &unk_1ECE44000;
  v409 = v408;
  if (!*(_BYTE *)(v9 + 104))
  {
    result = std::__throw_bad_optional_access[abi:nn180100]();
    __break(1u);
    return result;
  }
  gdc::GlobeTileGrid::GlobeTileGrid(v408, v653);
  v410 = *v654;
  *v654 = v409;
  if (v410)
  {
    v411 = *((_QWORD *)v410 + 323);
    if (v411)
      MEMORY[0x1A1AF4DE8](v411, 0x1000C8000313F17);
    MEMORY[0x1A1AF4E00](v410, 0x1020C4007FF0C4BLL);
    v409 = *v654;
  }
  *((_QWORD *)v409 + 323) = operator new[]();
  if (v323 != v324)
  {
    v412 = v323;
    do
    {
      v413 = *(uint64_t **)(*(_QWORD *)v412 + 56);
      v414 = *(uint64_t **)(*(_QWORD *)v412 + 64);
      while (v413 != v414)
      {
        v415 = *v413;
        if (!*(_QWORD *)(*v413 + 80))
        {
          v416 = *(_QWORD *)(v415 + 88);
          if (v416)
          {
            v417 = *(_QWORD *)(v415 + 72);
            v418 = *v654;
            v419 = *((_QWORD *)*v654 + 323);
            v420 = (float *)(v417 + 4);
            v421 = 1;
            do
            {
              v422 = *((float *)v418 + 648) * v420[1];
              v423 = vcvts_n_u32_f32(*(v420 - 1), 2uLL);
              if (v423 >= 3)
                v423 = 3;
              v424 = vcvts_n_u32_f32(*v420, 2uLL);
              if (v424 >= 3)
                v424 = 3;
              v425 = (float *)(v419 + 8 * (v423 | (4 * v424)));
              v426 = fminf(v422, *v425);
              v427 = fmaxf(v425[1], v422);
              *v425 = v426;
              v425[1] = v427;
              v420 += 3;
            }
            while (v416 > v421++);
          }
        }
        ++v413;
      }
      v412 += 8;
    }
    while (v412 != v324);
  }
  gdc::GlobeTileGrid::endBuildingHeightRange(*v654);
LABEL_598:
  v429 = v323;
LABEL_599:
  v430 = 0;
  v431 = 0;
  v432 = 0;
  v433 = 0;
  v673 = v429;
  v434 = (v324 - v429) >> 3;
  v680 = v434;
  do
  {
    if (v431 == v434
      || (unint64_t)(*(_QWORD *)(*(_QWORD *)&v673[8 * v431] + 8) + v433 - **(_QWORD **)&v673[8 * v431]) >= 0x10000)
    {
      v435 = (std::__shared_weak_count *)operator new(0xF8uLL);
      v435->__shared_owners_ = 0;
      v436 = (unint64_t *)&v435->__shared_owners_;
      v435->__shared_weak_owners_ = 0;
      v435[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B5748;
      v435->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DFE98;
      v435[1].__shared_owners_ = 64;
      LODWORD(v435[1].__shared_weak_owners_) = 1;
      v435[2].__vftable = 0;
      v435[2].__shared_owners_ = 0;
      v435[2].__shared_weak_owners_ = 0;
      v435[3].__vftable = (std::__shared_weak_count_vtbl *)(v433 << 6);
      v437 = (std::__shared_count)0;
      *(_OWORD *)&v435[3].__shared_owners_ = 0u;
      v435[4].std::__shared_count = 0u;
      v435[4].__shared_weak_owners_ = 0;
      if ((v438 & 1) == 0)
      {
        v437 = (std::__shared_count)0;
        if (v506)
        {
          v507 = operator new();
          *((_QWORD *)v318 + 495) = geo::MallocZoneAllocator::MallocZoneAllocator(v507, "GeoGL", 0xA3D02C1100000005);
          v437 = (std::__shared_count)0;
        }
      }
      v435[5].__vftable = (std::__shared_weak_count_vtbl *)*((_QWORD *)v318 + 495);
      v435[5].__shared_owners_ = 0;
      *((std::__shared_count *)v435 + 11) = v437;
      v435[8].std::__shared_count = v437;
      v435[8].__shared_weak_owners_ = 0;
      v435[9].__vftable = (std::__shared_weak_count_vtbl *)-1;
      *((std::__shared_count *)v435 + 10) = v437;
      v435[6].std::__shared_count = (std::__shared_count)xmmword_19FFB2DD0;
      LODWORD(v435[5].__shared_weak_owners_) = 0;
      v435[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B7B20;
      v435[9].__shared_weak_owners_ = (uint64_t)"BatchType/VData";
      v435[10].__vftable = (std::__shared_weak_count_vtbl *)&ggl::DottedRouteLine::defaultVboReflection;
      v435[9].__shared_owners_ = (uint64_t)&unk_1E42B7B40;
      *(_QWORD *)&v698 = v435 + 1;
      *((_QWORD *)&v698 + 1) = v435;
      v439 = (std::__shared_weak_count *)operator new(0xF8uLL);
      v439->__shared_owners_ = 0;
      v440 = (unint64_t *)&v439->__shared_owners_;
      v439->__shared_weak_owners_ = 0;
      v439[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B5748;
      v439->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DF1E8;
      v439[1].__shared_owners_ = 2;
      LODWORD(v439[1].__shared_weak_owners_) = 257;
      v439[2].__vftable = 0;
      v439[2].__shared_owners_ = 0;
      v439[2].__shared_weak_owners_ = 0;
      v439[3].__vftable = (std::__shared_weak_count_vtbl *)(2 * v432);
      v441 = (std::__shared_count)0;
      *(_OWORD *)&v439[3].__shared_owners_ = 0u;
      v439[4].std::__shared_count = 0u;
      v439[4].__shared_weak_owners_ = 0;
      if ((v442 & 1) == 0)
      {
        v441 = (std::__shared_count)0;
        if (v508)
        {
          v509 = operator new();
          *((_QWORD *)v318 + 495) = geo::MallocZoneAllocator::MallocZoneAllocator(v509, "GeoGL", 0xA3D02C1100000005);
          v441 = (std::__shared_count)0;
        }
      }
      v439[5].__vftable = (std::__shared_weak_count_vtbl *)*((_QWORD *)v318 + 495);
      v439[5].__shared_owners_ = 0;
      *((std::__shared_count *)v439 + 11) = v441;
      v439[8].std::__shared_count = v441;
      v439[8].__shared_weak_owners_ = 0;
      v439[9].__vftable = (std::__shared_weak_count_vtbl *)-1;
      *((std::__shared_count *)v439 + 10) = v441;
      v439[6].std::__shared_count = (std::__shared_count)xmmword_19FFB2DD0;
      LODWORD(v439[5].__shared_weak_owners_) = 0;
      LODWORD(v439[10].__vftable) = 0;
      v439[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B6B88;
      v439[1].__shared_owners_ = 2;
      v439[9].__shared_owners_ = (uint64_t)&unk_1E42B6BA8;
      v439[9].__shared_weak_owners_ = (uint64_t)"BatchType/IData";
      v695 = &v439[1];
      v696 = v439;
      v443 = operator new();
      do
        v444 = __ldxr(v436);
      while (__stxr(v444 + 1, v436));
      do
        v445 = __ldxr(v440);
      while (__stxr(v445 + 1, v440));
      if ((v446 & 1) == 0
      {
        if ((v510 & 1) == 0
        {
          ggl::MeshTyped<ggl::DottedRouteLine::DefaultVbo>::attributesReflection(void)::r = (uint64_t)&ggl::DottedRouteLine::defaultVboReflection;
        }
        ggl::MeshTyped<ggl::DottedRouteLine::DefaultVbo>::typedReflection(void)::r = (uint64_t)&ggl::MeshTyped<ggl::DottedRouteLine::DefaultVbo>::attributesReflection(void)::r;
        unk_1ECE30C48 = 1;
      }
      *(_QWORD *)(v443 + 32) = 0;
      *(_QWORD *)(v443 + 40) = 0;
      *(_DWORD *)(v443 + 48) = 0;
      *(_QWORD *)v443 = &off_1E42BBC08;
      *(_QWORD *)(v443 + 8) = "BatchType/Mesh";
      *(_QWORD *)(v443 + 16) = &unk_1E42BBC28;
      *(_QWORD *)(v443 + 24) = 0;
      *(_QWORD *)(v443 + 56) = &ggl::MeshTyped<ggl::DottedRouteLine::DefaultVbo>::typedReflection(void)::r;
      *(_QWORD *)(v443 + 64) = 0;
      v447 = v443 + 64;
      *(_QWORD *)(v443 + 72) = 0;
      *(_QWORD *)(v443 + 80) = 0;
      if ((v448 & 1) == 0)
      {
        v447 = v443 + 64;
        if (v511)
        {
          v512 = operator new();
          *(_QWORD *)(v512 + 16) = 0xA3D02C1100000005;
          *(_QWORD *)(v512 + 24) = "GeoGL";
          *(_OWORD *)(v512 + 32) = xmmword_19FFB2DE0;
          *(_QWORD *)v512 = &off_1E42B5668;
          *(_QWORD *)(v512 + 8) = "GeoGL";
          *(_OWORD *)(v512 + 72) = 0u;
          *(_OWORD *)(v512 + 88) = 0u;
          *(_OWORD *)(v512 + 104) = 0u;
          *(_OWORD *)(v512 + 120) = 0u;
          *(_OWORD *)(v512 + 136) = 0u;
          *(_OWORD *)(v512 + 152) = 0u;
          *(_OWORD *)(v512 + 168) = 0u;
          *(_OWORD *)(v512 + 184) = 0u;
          *(_OWORD *)(v512 + 200) = 0u;
          *(_OWORD *)(v512 + 216) = 0u;
          *(_OWORD *)(v512 + 232) = 0u;
          *(_QWORD *)(v512 + 248) = 0;
          *(_OWORD *)(v512 + 56) = 0u;
          v513 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v512 + 56), 0);
          if ((_DWORD)v513)
            geo::read_write_lock::logFailure(v513, (uint64_t)"initialization", v514);
          v515 = malloc_create_zone(0, 0);
          *(_QWORD *)(v512 + 48) = v515;
          malloc_set_zone_name(v515, "GeoGL");
          *(_QWORD *)(v512 + 256) = os_log_create("com.apple.VectorKit", "Memory");
          ggl::Allocator::instance(void)::alloc = v512;
          v447 = v443 + 64;
        }
      }
      v318 = &unk_1ECE44000;
      v449 = ggl::Allocator::instance(void)::alloc;
      *(_QWORD *)(v443 + 120) = 0;
      *(_QWORD *)(v443 + 96) = 0;
      *(_QWORD *)(v443 + 104) = 0;
      *(_QWORD *)(v443 + 88) = v449;
      if ((v449 & 1) == 0)
      {
        v666 = v447;
        v447 = v666;
        if (v516)
        {
          v517 = operator new();
          *(_QWORD *)(v517 + 16) = 0xA3D02C1100000005;
          *(_QWORD *)(v517 + 24) = "GeoGL";
          *(_OWORD *)(v517 + 32) = xmmword_19FFB2DE0;
          *(_QWORD *)v517 = &off_1E42B5668;
          *(_QWORD *)(v517 + 8) = "GeoGL";
          *(_OWORD *)(v517 + 72) = 0u;
          *(_OWORD *)(v517 + 88) = 0u;
          *(_OWORD *)(v517 + 104) = 0u;
          *(_OWORD *)(v517 + 120) = 0u;
          *(_OWORD *)(v517 + 136) = 0u;
          *(_OWORD *)(v517 + 152) = 0u;
          *(_OWORD *)(v517 + 168) = 0u;
          *(_OWORD *)(v517 + 184) = 0u;
          *(_OWORD *)(v517 + 200) = 0u;
          *(_OWORD *)(v517 + 216) = 0u;
          *(_OWORD *)(v517 + 232) = 0u;
          *(_QWORD *)(v517 + 248) = 0;
          v518 = v517;
          *(_OWORD *)(v517 + 56) = 0u;
          v519 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v517 + 56), 0);
          if ((_DWORD)v519)
            geo::read_write_lock::logFailure(v519, (uint64_t)"initialization", v520);
          v521 = malloc_create_zone(0, 0);
          *(_QWORD *)(v518 + 48) = v521;
          malloc_set_zone_name(v521, "GeoGL");
          *(_QWORD *)(v518 + 256) = os_log_create("com.apple.VectorKit", "Memory");
          ggl::Allocator::instance(void)::alloc = v518;
          v447 = v666;
        }
      }
      *(_QWORD *)(v443 + 128) = ggl::Allocator::instance(void)::alloc;
      *(_QWORD *)(v443 + 136) = 0;
      *(_QWORD *)(v443 + 112) = v443 + 120;
      *(_QWORD *)v443 = &off_1E42BD7B8;
      *(_QWORD *)(v443 + 16) = &unk_1E42BD7D8;
      *(_QWORD *)&v703 = v435 + 1;
      *((_QWORD *)&v703 + 1) = v435;
      v434 = v680;
      do
        v450 = __ldxr(v436);
      while (__stxr(v450 + 1, v436));
      std::vector<std::shared_ptr<ggl::VertexData>,geo::StdAllocator<std::shared_ptr<ggl::VertexData>,ggl::Allocator>>::__assign_with_size[abi:nn180100]<std::shared_ptr<ggl::VertexData> const*,std::shared_ptr<ggl::VertexData> const*>(v447, (uint64_t *)&v703, (uint64_t *)&v704, 1uLL);
      v451 = (std::__shared_weak_count *)*((_QWORD *)&v703 + 1);
      if (*((_QWORD *)&v703 + 1))
      {
        v452 = (unint64_t *)(*((_QWORD *)&v703 + 1) + 8);
        do
          v453 = __ldaxr(v452);
        while (__stlxr(v453 - 1, v452));
        if (!v453)
        {
          ((void (*)(std::__shared_weak_count *))v451->__on_zero_shared)(v451);
          std::__shared_weak_count::__release_weak(v451);
        }
      }
      do
        v454 = __ldxr(v440);
      while (__stxr(v454 + 1, v440));
      v455 = *(std::__shared_weak_count **)(v443 + 104);
      *(_QWORD *)(v443 + 96) = v439 + 1;
      *(_QWORD *)(v443 + 104) = v439;
      if (v455)
      {
        v456 = (unint64_t *)&v455->__shared_owners_;
        do
          v457 = __ldaxr(v456);
        while (__stlxr(v457 - 1, v456));
        if (!v457)
        {
          ((void (*)(std::__shared_weak_count *))v455->__on_zero_shared)(v455);
          std::__shared_weak_count::__release_weak(v455);
        }
      }
      *(_QWORD *)v443 = &off_1E42B7058;
      *(_QWORD *)(v443 + 16) = &unk_1E42B7078;
      do
        v458 = __ldaxr(v440);
      while (__stlxr(v458 - 1, v440));
      if (!v458)
      {
        ((void (*)(std::__shared_weak_count *))v439->__on_zero_shared)(v439);
        std::__shared_weak_count::__release_weak(v439);
      }
      do
        v459 = __ldaxr(v436);
      while (__stlxr(v459 - 1, v436));
      if (!v459)
      {
        ((void (*)(std::__shared_weak_count *))v435->__on_zero_shared)(v435);
        std::__shared_weak_count::__release_weak(v435);
      }
      v9 = a1;
      v461 = *(uint64_t **)(a1 + 40);
      v460 = *(_QWORD *)(a1 + 48);
      if ((unint64_t)v461 < v460)
      {
        *v461 = v443;
        v462 = v461 + 1;
        v12 = v690;
        goto LABEL_656;
      }
      v463 = (uint64_t *)*v655;
      v464 = (char *)v461 - (_BYTE *)*v655;
      v465 = v464 >> 3;
      v466 = (v464 >> 3) + 1;
      if (v466 >> 61)
        abort();
      v467 = v460 - (_QWORD)v463;
      if (v467 >> 2 > v466)
        v466 = v467 >> 2;
      if ((unint64_t)v467 >= 0x7FFFFFFFFFFFFFF8)
        v468 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v468 = v466;
      if (v468)
      {
        if (v468 >> 61)
          goto LABEL_832;
        v469 = operator new(8 * v468);
      }
      else
      {
        v469 = 0;
      }
      v470 = (uint64_t *)&v469[8 * v465];
      *v470 = v443;
      v462 = v470 + 1;
      if (v461 == v463)
      {
        v463 = v461;
        v9 = a1;
      }
      else
      {
        v471 = (char *)(v461 - 1) - (char *)v463;
        if (v471 < 0x58)
        {
          v9 = a1;
          goto LABEL_651;
        }
        v472 = (char *)v461 - &v469[v464];
        v9 = a1;
        if (v472 < 0x20)
          goto LABEL_849;
        v473 = (v471 >> 3) + 1;
        v474 = &v469[8 * v465 - 16];
        v475 = v461 - 2;
        v476 = v473 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v477 = *(_OWORD *)v475;
          *(v474 - 1) = *((_OWORD *)v475 - 1);
          *v474 = v477;
          v474 -= 2;
          v475 -= 4;
          v476 -= 4;
        }
        while (v476);
        v470 -= v473 & 0x3FFFFFFFFFFFFFFCLL;
        v461 -= v473 & 0x3FFFFFFFFFFFFFFCLL;
        if (v473 != (v473 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_849:
          do
          {
LABEL_651:
            v478 = *--v461;
            *--v470 = v478;
          }
          while (v461 != v463);
          v463 = (uint64_t *)*v655;
        }
      }
      *(_QWORD *)(v9 + 32) = v470;
      *(_QWORD *)(v9 + 40) = v462;
      *(_QWORD *)(v9 + 48) = &v469[8 * v468];
      if (v463)
        operator delete(v463);
      v12 = v690;
      v434 = v680;
LABEL_656:
      *(_QWORD *)(v9 + 40) = v462;
      if (v430 < v431)
      {
        v479 = 0;
        v480 = v430;
        do
        {
          v481 = *(_QWORD *)&v673[8 * v480];
          v482 = *(_QWORD *)(v481 + 32);
          v483 = v482 + v479;
          v484 = *(_QWORD *)(v481 + 40) + v479;
          *(_QWORD *)(v481 + 32) = v483;
          *(_QWORD *)(v481 + 40) = v484;
          v479 = v484 - v482;
          ++v480;
        }
        while (v431 != v480);
        v485 = 0;
        do
        {
          v486 = *(uint64_t **)&v673[8 * v430];
          v487 = *v486;
          v488 = *v486 + v485;
          v489 = v486[1] + v485;
          *v486 = v488;
          v486[1] = v489;
          v490 = v486[2];
          v491 = v490 + v479;
          v492 = v486[3] + v479;
          v486[2] = v491;
          v486[3] = v492;
          v486[11] = v443;
          v493 = (_QWORD *)v486[7];
          v494 = (_QWORD *)v486[8];
          if (v493 != v494)
          {
            v495 = v486[4];
            do
            {
              v496 = (_QWORD *)*v493++;
              v497 = v496[2] - v496[1];
              v496[1] = v488;
              v488 += v497;
              v498 = v496[4] - v496[3];
              v496[2] = v488;
              v496[3] = v491;
              v491 += v498;
              v499 = v496[6] - v496[5];
              v496[4] = v491;
              v496[5] = v495;
              v495 += v499;
              v496[6] = v495;
            }
            while (v493 != v494);
          }
          v485 = v489 - v487;
          v479 = v492 - v490;
          ++v430;
        }
        while (v430 != v431);
      }
      if (!v696)
        goto LABEL_669;
      v500 = &v696->__shared_owners_;
      do
        v501 = __ldaxr((unint64_t *)v500);
      while (__stlxr(v501 - 1, (unint64_t *)v500));
      if (!v501)
      {
        ((void (*)(std::__shared_weak_count *))v696->__on_zero_shared)(v696);
        std::__shared_weak_count::__release_weak(v696);
        v502 = (std::__shared_weak_count *)*((_QWORD *)&v698 + 1);
        if (*((_QWORD *)&v698 + 1))
          goto LABEL_670;
      }
      else
      {
LABEL_669:
        v502 = (std::__shared_weak_count *)*((_QWORD *)&v698 + 1);
        if (*((_QWORD *)&v698 + 1))
        {
LABEL_670:
          v503 = (unint64_t *)&v502->__shared_owners_;
          do
            v504 = __ldaxr(v503);
          while (__stlxr(v504 - 1, v503));
          if (!v504)
          {
            ((void (*)(std::__shared_weak_count *))v502->__on_zero_shared)(v502);
            std::__shared_weak_count::__release_weak(v502);
          }
        }
      }
      v433 = 0;
      v432 = 0;
      v430 = v431;
    }
    if (v431 < v434)
    {
      v505 = *(_QWORD **)&v673[8 * v431];
      v433 = v505[1] + v433 - *v505;
      v432 = v505[3] + v432 + v505[5] - (v505[2] + v505[4]);
    }
    ++v431;
  }
  while (v431 <= v434);
  if (v673)
    operator delete(v673);
  if (v12)
    operator delete(v12);
  *(_QWORD *)v9 = &off_1E428C900;
  *(_QWORD *)(v9 + 112) = *a4;
  v522 = a4[1];
  *(_QWORD *)(v9 + 120) = v522;
  if (v522)
  {
    v523 = (unint64_t *)(v522 + 8);
    do
      v524 = __ldxr(v523);
    while (__stxr(v524 + 1, v523));
  }
  *(_QWORD *)(v9 + 128) = *a5;
  v525 = a5[1];
  *(_QWORD *)(v9 + 136) = v525;
  if (v525)
  {
    v526 = (unint64_t *)(v525 + 8);
    do
      v527 = __ldxr(v526);
    while (__stxr(v527 + 1, v526));
  }
  *(_QWORD *)(v9 + 144) = 0;
  v528 = *(_QWORD *)(v9 + 8);
  v667 = *(_QWORD *)(v9 + 16);
  if (v528 != v667)
  {
    __asm
    {
      FMOV            V9.2S, #-1.0
      FMOV            V12.2S, #1.0
    }
    v674 = vdupq_n_s64(8uLL);
    do
    {
      v670 = v528;
      v534 = *(uint64_t ***)(*(_QWORD *)v528 + 248);
      v533 = *(uint64_t ***)(*(_QWORD *)v528 + 256);
      v688 = v533;
      while (v534 != v533)
      {
        v535 = 0;
        v536 = *v534;
        v537 = **(_QWORD **)((*v534)[11] + 64);
        v538 = **v534;
        v539 = (*v534)[1];
        v703 = 0uLL;
        v540 = *(_QWORD *)(v537 + 8);
        v541 = v540 * v538;
        v542 = v540 * v539;
        if (v540 * v539 != v540 * v538)
        {
          if (a2 && *(_BYTE *)(v537 + 17) != 2)
            v535 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 56))(a2, v537, v541, v540 * v539, 1, 1);
          else
            v535 = *(_QWORD *)(v537 + 72) + v541;
        }
        v691 = v534;
        *(_QWORD *)&v543 = a2;
        *((_QWORD *)&v543 + 1) = v537;
        v703 = v543;
        v704 = v541;
        v705 = v542;
        v707 = v535;
        LOWORD(v706) = 257;
        v544 = v536[2];
        v546 = v536[4];
        v545 = v536[5];
        if (v545 == v546)
        {
          v545 = v536[3];
        }
        else
        {
          if (v546 < v544)
            v544 = v536[4];
          if (v536[3] > v545)
            v545 = v536[3];
        }
        v547 = 0;
        v548 = *(_QWORD *)(v536[11] + 96);
        v698 = 0uLL;
        v549 = *(_QWORD *)(v548 + 8);
        v550 = v549 * v544;
        v551 = v549 * v545;
        if (v549 * v545 != v549 * v544)
        {
          if (a2 && *(_BYTE *)(v548 + 17) != 2)
            v547 = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 56))(a2, v548, v549 * v544, v551, 1, 1);
          else
            v547 = *(_QWORD *)(v548 + 72) + v550;
        }
        *(_QWORD *)&v552 = a2;
        *((_QWORD *)&v552 + 1) = v548;
        v698 = v552;
        v699 = v550;
        v700 = v551;
        v702 = v547;
        v701 = 257;
        v553 = v536[2];
        v554 = v536[4];
        v695 = 0;
        v696 = 0;
        v697 = 0;
        memset(&v694, 0, sizeof(v694));
        v555 = (uint64_t *)v536[7];
        v557 = (uint64_t *)v536[8];
        v556 = v536 + 7;
        if (v555 != v557)
        {
          v558 = v547 + 2 * v554 - 2 * v544;
          v559 = v547 + 2 * v553 - 2 * v544;
          while (1)
          {
            v561 = *v555;
            v562 = *(_QWORD *)(*v555 + 16);
            if (v562 != *(_QWORD *)(*v555 + 8))
              break;
            v560 = *(_QWORD *)(*v555 + 16);
LABEL_731:
            v535 += (v560 - v562) << 6;
            v559 += 2 * (*(_QWORD *)(v561 + 32) - *(_QWORD *)(v561 + 24));
            v558 += 2 * (*(_QWORD *)(v561 + 48) - *(_QWORD *)(v561 + 40));
            if (++v555 == v557)
              goto LABEL_782;
          }
          v563 = *(_QWORD *)(v561 + 88);
          v564 = 0xAAAAAAAAAAAAAAABLL * (((char *)v696 - (_BYTE *)v695) >> 2);
          if (v563 <= v564)
          {
            if (v563 < v564)
              v696 = (std::__shared_weak_count *)((char *)v695 + 12 * v563);
          }
          else
          {
            std::vector<gm::Matrix<float,3,1>>::__append((char **)&v695, v563 - v564);
            v563 = *(_QWORD *)(v561 + 88);
          }
          begin = v694.__begin_;
          v566 = v694.__end_ - v694.__begin_;
          if (v563 <= v566)
          {
            if (v563 < v566)
              v694.__end_ = &v694.__begin_[v563];
          }
          else
          {
            std::vector<unsigned int>::__append(&v694, v563 - v566);
            begin = v694.__begin_;
            v563 = *(_QWORD *)(v561 + 88);
          }
          v567 = (char *)v695;
          v568 = *(_DWORD **)(v561 + 72);
          *(_DWORD *)v695 = *v568;
          *((_DWORD *)v567 + 1) = v568[1];
          *((_DWORD *)v567 + 2) = v568[2];
          *begin = 0;
          if (v563 >= 2)
          {
            v569 = v563 - 1;
            if (v563 < 9
              || ((_DWORD)v563 != 1 ? (_ZF = (v563 - 2) >> 32 == 0) : (_ZF = 0),
                  !_ZF
               || ((v571 = v567 + 12, v572 = (char *)(v568 + 3), v567 + 12 < (char *)&v568[3 * v563])
                 ? (v573 = v572 >= &v567[12 * v563])
                 : (v573 = 1),
                   !v573)))
            {
              v574 = 1;
              goto LABEL_758;
            }
            v574 = v569 & 0xFFFFFFFFFFFFFFFCLL | 1;
            v575 = (int32x4_t *)(begin + 1);
            v576 = (int32x4_t)xmmword_19FFB5100;
            v577 = v569 & 0xFFFFFFFFFFFFFFFCLL;
            v578.i64[0] = 0x400000004;
            v578.i64[1] = 0x400000004;
            do
            {
              *v575++ = v576;
              v579 = *(_OWORD *)v572;
              v580 = *((_OWORD *)v572 + 2);
              v571[1] = *((_OWORD *)v572 + 1);
              v571[2] = v580;
              *v571 = v579;
              v571 += 3;
              v576 = vaddq_s32(v576, v578);
              v572 += 48;
              v577 -= 4;
            }
            while (v577);
            if (v569 != (v569 & 0xFFFFFFFFFFFFFFFCLL))
            {
LABEL_758:
              v581 = &v568[3 * v574 + 2];
              v582 = &v567[12 * v574 + 4];
              do
              {
                begin[v574] = v574;
                ++v574;
                *((_DWORD *)v582 - 1) = *(v581 - 2);
                *(_DWORD *)v582 = *(v581 - 1);
                v583 = *v581;
                v581 += 3;
                *((_DWORD *)v582 + 1) = v583;
                v582 += 12;
              }
              while (v563 != v574);
            }
            if (v563 >= 2)
            {
              v584 = v567 + 16;
              v585 = 0.0;
              v586 = v563 - 1;
              v587 = v535;
              do
              {
                v588 = *((float *)v584 - 4);
                v589 = *(float32x2_t *)((char *)v584 - 12);
                v590 = *((float *)v584 - 1);
                v591 = *(float32x2_t *)v584;
                v584 = (_QWORD *)((char *)v584 + 12);
                v592 = vsub_f32(v591, v589);
                v593 = sqrtf(vmul_f32(v592, v592).f32[0] + (float)((float)(v590 - v588) * (float)(v590 - v588)));
                *(float *)v587 = v588;
                *(float32x2_t *)(v587 + 4) = v589;
                *(float *)(v587 + 16) = v590;
                *(float32x2_t *)(v587 + 20) = v591;
                v594 = *(float *)(v561 + 100);
                *(float *)(v587 + 48) = v594 + v585;
                *(float *)(v587 + 52) = (float)(v593 + v585) + v594;
                v595 = (int)(float)((float)((float)((float)(v590 - v588) * 8191.9) / v593) + -0.5);
                v596 = (int)(float)((float)((float)(8191.9 * v592.f32[0]) / v593) + -0.5);
                *(_WORD *)(v587 + 32) = v595;
                *(_WORD *)(v587 + 34) = v596;
                *(float *)(v587 + 64) = v588;
                *(float32x2_t *)(v587 + 68) = v589;
                *(float *)(v587 + 80) = v590;
                *(float32x2_t *)(v587 + 84) = v591;
                v597 = *(float *)(v561 + 100);
                *(float *)(v587 + 112) = v597 + v585;
                *(float *)(v587 + 116) = (float)(v593 + v585) + v597;
                *(_WORD *)(v587 + 96) = v595;
                *(_WORD *)(v587 + 98) = v596;
                *(float *)(v587 + 128) = v588;
                *(float32x2_t *)(v587 + 132) = v589;
                *(float *)(v587 + 144) = v590;
                *(float32x2_t *)(v587 + 148) = v591;
                v598 = *(float *)(v561 + 100);
                *(float *)(v587 + 176) = v598 + v585;
                *(float *)(v587 + 180) = (float)(v593 + v585) + v598;
                *(_WORD *)(v587 + 160) = v595;
                *(_WORD *)(v587 + 162) = v596;
                *(float *)(v587 + 192) = v588;
                *(float32x2_t *)(v587 + 196) = v589;
                *(float *)(v587 + 208) = v590;
                *(float32x2_t *)(v587 + 212) = v591;
                v599 = *(float *)(v561 + 100);
                *(float *)(v587 + 240) = v599 + v585;
                *(float *)(v587 + 244) = (float)(v593 + v585) + v599;
                *(_WORD *)(v587 + 224) = v595;
                *(_WORD *)(v587 + 226) = v596;
                *(_QWORD *)(v587 + 40) = _D9;
                *(_QWORD *)(v587 + 104) = 0x3F800000BF800000;
                *(_QWORD *)(v587 + 168) = 0xBF8000003F800000;
                *(_QWORD *)(v587 + 232) = _D12;
                v587 += 256;
                v585 = v593 + v585;
                --v586;
              }
              while (v586);
              if (v563 >= 2)
              {
                v600 = *(_QWORD *)(v561 + 8);
                v601 = v600;
                if (v563 == 2)
                {
                  v602 = 1;
                  v603 = (_WORD *)v559;
LABEL_770:
                  v609 = v563 - v602;
                  do
                  {
                    *v603 = v601;
                    v603[1] = v601 + 1;
                    v610 = v601 + 2;
                    v603[2] = v601 + 2;
                    v603[3] = v601 + 1;
                    v611 = v601 + 3;
                    v601 += 4;
                    v603[4] = v611;
                    v603[5] = v610;
                    v603 += 6;
                    --v609;
                  }
                  while (v609);
                }
                else
                {
                  v604 = 0;
                  v605 = v569 & 0xFFFFFFFFFFFFFFFELL;
                  v606 = (int16x4_t *)(v559 + 14);
                  do
                  {
                    v606[-2].i16[1] = v600 + 4 * v604;
                    v607 = v600 + 4 * v604 + 5;
                    v606->i16[0] = v607;
                    v606->i16[1] = v600 + 4 * v604 + 6;
                    v606->i16[2] = v607;
                    v606->i16[3] = v600 + 4 * v604 + 7;
                    v608 = vadd_s16(vdup_n_s16((int)v600 + 4 * (int)v604), (int16x4_t)0x4000200030001);
                    v606[-2].i16[3] = v608.i16[2];
                    v606[-2].i16[2] = v608.i16[0];
                    v606[-1] = v608;
                    v606[1].i16[0] = v600 + 4 * v604 + 6;
                    v604 += 2;
                    v606 += 3;
                  }
                  while (v605 != v604);
                  if (v569 != v605)
                  {
                    v602 = v569 | 1;
                    v601 = 4 * (v569 & 0xFFFFFFFE) + v600;
                    v603 = (_WORD *)(v559 + 12 * (v569 & 0xFFFFFFFFFFFFFFFELL));
                    goto LABEL_770;
                  }
                }
                if (*(_QWORD *)(v561 + 48) != *(_QWORD *)(v561 + 40))
                {
                  if (v563 > 8)
                  {
                    v614 = v569 & 0xFFFFFFFFFFFFFFF8;
                    v615 = vdupq_n_s64(v600 + 65532);
                    v616 = vdupq_n_s64(v600);
                    v617 = (__int16 *)v558;
                    v618 = v569 & 0xFFFFFFFFFFFFFFF8;
                    v619 = (int64x2_t)xmmword_19FFB2DB0;
                    v620 = (int64x2_t)xmmword_19FFB3440;
                    v621 = (int64x2_t)xmmword_19FFB3430;
                    v622 = (int64x2_t)xmmword_19FFB3420;
                    v612 = (_WORD *)(v558 + 4 * (v569 & 0xFFFFFFFFFFFFFFF8));
                    do
                    {
                      v623 = vshlq_n_s64(v620, 2uLL);
                      v624 = vshlq_n_s64(v619, 2uLL);
                      v625 = vshlq_n_s64(v622, 2uLL);
                      v626 = vshlq_n_s64(v621, 2uLL);
                      v710.val[0] = vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vaddq_s64(v615, v624), (int32x4_t)vaddq_s64(v615, v623)), (int16x8_t)vuzp1q_s32((int32x4_t)vaddq_s64(v615, v626), (int32x4_t)vaddq_s64(v615, v625)));
                      v710.val[1] = vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vaddq_s64(v624, v616), (int32x4_t)vaddq_s64(v623, v616)), (int16x8_t)vuzp1q_s32((int32x4_t)vaddq_s64(v626, v616), (int32x4_t)vaddq_s64(v625, v616)));
                      vst2q_s16(v617, v710);
                      v617 += 16;
                      v621 = vaddq_s64(v621, v674);
                      v620 = vaddq_s64(v620, v674);
                      v619 = vaddq_s64(v619, v674);
                      v622 = vaddq_s64(v622, v674);
                      v618 -= 8;
                    }
                    while (v618);
                    if (v569 != v614)
                    {
                      v613 = v614 | 1;
                      goto LABEL_779;
                    }
                  }
                  else
                  {
                    v612 = (_WORD *)v558;
                    v613 = 1;
LABEL_779:
                    v627 = v563 - v613;
                    v628 = v600 + 4 * v613;
                    do
                    {
                      *v612 = v628 - 4;
                      v612[1] = v628;
                      v628 += 4;
                      v612 += 2;
                      --v627;
                    }
                    while (v627);
                  }
                }
              }
            }
          }
          v561 = *v555;
          v562 = *(_QWORD *)(*v555 + 8);
          v560 = *(_QWORD *)(*v555 + 16);
          goto LABEL_731;
        }
LABEL_782:
        {
          v651 = operator new();
          mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v651, "VectorKitLabels", 0x5ED09DD50000000FLL);
        }
        v630 = (_QWORD *)*v556;
        if (*v556)
        {
          v631 = (_QWORD *)v536[8];
          v632 = (_QWORD *)*v556;
          if (v631 != v630)
          {
            do
            {
              v634 = (void (***)(_QWORD, _QWORD *))*--v631;
              v633 = v634;
              *v631 = 0;
              if (v634)
              {
                (**v633)(v633, v632);
                {
                  v636 = operator new();
                  mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v636, "VectorKitLabels", 0x5ED09DD50000000FLL);
                }
                (*(void (**)(uint64_t, void (***)(_QWORD, _QWORD *), uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc
                                                                                                  + 40))(mdm::Allocator::instance(void)::alloc, v633, 112);
              }
            }
            while (v631 != v630);
            v632 = (_QWORD *)*v556;
          }
          v536[8] = (uint64_t)v630;
          (*(void (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)v536[10] + 40))(v536[10], v632, v536[9] - (_QWORD)v632);
          *v556 = 0;
          v536[8] = 0;
          v536[9] = 0;
        }
        *v556 = 0;
        v536[8] = 0;
        v536[9] = 0;
        if (v694.__begin_)
          operator delete(v694.__begin_);
        if (v695)
          operator delete(v695);
        if (v702)
        {
          v638 = v699;
          v637 = v700;
          if (v700 != v699)
          {
            v639 = (_QWORD *)*((_QWORD *)&v698 + 1);
            v640 = v701;
            v641 = HIBYTE(v701);
            if ((_QWORD)v698 && *(_BYTE *)(*((_QWORD *)&v698 + 1) + 17) != 2)
              (*(void (**)(_QWORD))(*(_QWORD *)v698 + 64))(v698);
            if (v640 && !v641)
            {
              v642 = v639[7];
              v643 = v639[8];
              if (v643 == v642)
                v642 = v639[10] - v639[9];
              if (v638 < v642)
                v642 = v638;
              if (v643 <= v637)
                v643 = v637;
              if (v643 == v642)
                v643 = v642 + v639[10] - v639[9];
              v639[7] = v642;
              v639[8] = v643;
            }
          }
        }
        if (v707)
        {
          v645 = v704;
          v644 = v705;
          if (v705 != v704)
          {
            v646 = (_QWORD *)*((_QWORD *)&v703 + 1);
            v647 = v706;
            v648 = BYTE1(v706);
            if ((_QWORD)v703 && *(_BYTE *)(*((_QWORD *)&v703 + 1) + 17) != 2)
              (*(void (**)(_QWORD))(*(_QWORD *)v703 + 64))(v703);
            if (v647 && !v648)
            {
              v649 = v646[7];
              v650 = v646[8];
              if (v650 == v649)
                v649 = v646[10] - v646[9];
              if (v645 < v649)
                v649 = v645;
              if (v650 <= v644)
                v650 = v644;
              if (v650 == v649)
                v650 = v649 + v646[10] - v646[9];
              v646[7] = v649;
              v646[8] = v650;
            }
          }
        }
        v534 = v691 + 1;
        v533 = v688;
      }
      v528 = v670 + 8;
    }
    while (v670 + 8 != v667);
  }
  return v9;
}

void sub_19FAA7918(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void **a9, uint64_t a10, uint64_t *a11, void **a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,void *a38,void *__p,uint64_t a40,void *a41,uint64_t a42,uint64_t a43,void *a44)
{
  uint64_t v44;
  void *v45;
  void *v47;
  void *v48;

  MEMORY[0x1A1AF4E00](v44, 0x1020C4007FF0C4BLL);
  if (v45)
    operator delete(v45);
  std::unique_ptr<gdc::GlobeTileGrid>::~unique_ptr[abi:nn180100](a11);
  v47 = *a12;
  if (*a12)
  {
    *(_QWORD *)(a37 + 40) = v47;
    operator delete(v47);
  }
  v48 = *a9;
  if (*a9)
  {
    *(_QWORD *)(a37 + 16) = v48;
    operator delete(v48);
    if (a38)
    {
LABEL_7:
      operator delete(a38);
      _Unwind_Resume(a1);
    }
  }
  else if (a38)
  {
    goto LABEL_7;
  }
  _Unwind_Resume(a1);
}

void md::DottedRouteLineLayer::~DottedRouteLineLayer(md::DottedRouteLineLayer *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;

  *(_QWORD *)this = &off_1E428C900;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 17);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)*((_QWORD *)this + 15);
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)*((_QWORD *)this + 15);
    if (!v5)
      goto LABEL_11;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  md::Ribbons::RibbonLayer<md::Ribbons::DottedRouteLineRibbonDescriptor>::~RibbonLayer(this);
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;

  *(_QWORD *)this = &off_1E428C900;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 17);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)*((_QWORD *)this + 15);
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)*((_QWORD *)this + 15);
    if (!v5)
      goto LABEL_11;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  md::Ribbons::RibbonLayer<md::Ribbons::DottedRouteLineRibbonDescriptor>::~RibbonLayer(this);
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *md::Ribbons::RibbonLayer<md::Ribbons::DottedRouteLineRibbonDescriptor>::~RibbonLayer(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;

  *a1 = &off_1E42AF428;
  v2 = (_QWORD *)a1[1];
  v3 = (_QWORD *)a1[2];
  while (v2 != v3)
  {
    if (*v2)
      (*(void (**)(_QWORD))(*(_QWORD *)*v2 + 8))(*v2);
    ++v2;
  }
  v4 = (_QWORD *)a1[4];
  v5 = (_QWORD *)a1[5];
  while (v4 != v5)
  {
    if (*v4)
      (*(void (**)(_QWORD))(*(_QWORD *)*v4 + 8))(*v4);
    ++v4;
  }
  v6 = a1[9];
  a1[9] = 0;
  if (v6)
  {
    v7 = *(_QWORD *)(v6 + 2584);
    if (v7)
      MEMORY[0x1A1AF4DE8](v7, 0x1000C8000313F17);
    MEMORY[0x1A1AF4E00](v6, 0x1020C4007FF0C4BLL);
  }
  v8 = (void *)a1[4];
  if (v8)
  {
    a1[5] = v8;
    operator delete(v8);
  }
  v9 = (void *)a1[1];
  if (v9)
  {
    a1[2] = v9;
    operator delete(v9);
  }
  return a1;
}

void md::Ribbons::RibbonLayer<md::Ribbons::DottedRouteLineRibbonDescriptor>::~RibbonLayer(_QWORD *a1)
{
  md::Ribbons::RibbonLayer<md::Ribbons::DottedRouteLineRibbonDescriptor>::~RibbonLayer(a1);
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *md::RibbonLayer<md::Ribbons::DottedRouteLineRibbonDescriptor>::~RibbonLayer(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;

  *a1 = &off_1E428C900;
  v2 = (std::__shared_weak_count *)a1[17];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)a1[15];
    if (!v5)
      return md::Ribbons::RibbonLayer<md::Ribbons::DottedRouteLineRibbonDescriptor>::~RibbonLayer(a1);
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[15];
    if (!v5)
      return md::Ribbons::RibbonLayer<md::Ribbons::DottedRouteLineRibbonDescriptor>::~RibbonLayer(a1);
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
  return md::Ribbons::RibbonLayer<md::Ribbons::DottedRouteLineRibbonDescriptor>::~RibbonLayer(a1);
}

void md::RibbonLayer<md::Ribbons::DottedRouteLineRibbonDescriptor>::~RibbonLayer(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;

  *a1 = &off_1E428C900;
  v2 = (std::__shared_weak_count *)a1[17];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)a1[15];
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[15];
    if (!v5)
      goto LABEL_11;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  md::Ribbons::RibbonLayer<md::Ribbons::DottedRouteLineRibbonDescriptor>::~RibbonLayer(a1);
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::DottedRouteLine::DefaultVbo>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DFE98;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::DottedRouteLine::DefaultVbo>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DFE98;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::DottedRouteLine::DefaultVbo>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,md::RibbonLayer<md::Ribbons::DottedRouteLineRibbonDescriptor>::batch(std::unordered_map<md::DottedRouteLineBatchKey,std::vector<std::unique_ptr<md::DottedRouteLineRibbon,mdm::TypeDeleter<md::DottedRouteLineRibbon>>,geo::StdAllocator<std::unique_ptr<md::DottedRouteLineRibbon,mdm::TypeDeleter<md::DottedRouteLineRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DottedRouteLineBatchKey,std::vector<std::unique_ptr<md::DottedRouteLineRibbon,mdm::TypeDeleter<md::DottedRouteLineRibbon>>,geo::StdAllocator<std::unique_ptr<md::DottedRouteLineRibbon,mdm::TypeDeleter<md::DottedRouteLineRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DottedRouteLineRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DottedRouteLineRibbonDescriptor>> const)#1} &,std::default_delete<md::RibbonSection>*,false>(uint64_t result, int8x16_t *a2, uint64_t a3, char a4)
{
  uint64_t *v5;
  int8x16_t *v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  int8x16_t *v14;
  int8x16_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  int v23;
  int v24;
  int v25;
  int v26;
  uint64_t v27;
  _BOOL8 v28;
  unsigned int v29;
  uint64_t *v30;
  uint64_t *v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  void (***v44)(_QWORD, uint64_t);
  void (***v45)(_QWORD, uint64_t);
  unsigned __int8 v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  _QWORD *v50;
  uint64_t v51;
  void (***v52)(_QWORD, uint64_t);
  void (***v53)(_QWORD, uint64_t);
  unsigned __int8 v54;
  uint64_t v55;
  BOOL v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t *v59;
  uint64_t *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  _BOOL8 v64;
  uint64_t v65;
  unsigned int v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t *v73;
  uint64_t v74;
  _QWORD *v75;
  uint64_t v76;
  _QWORD *v77;
  uint64_t v78;
  void (***v79)(_QWORD, uint64_t);
  void (***v80)(_QWORD, uint64_t);
  unsigned __int8 v81;
  uint64_t v82;
  uint64_t v83;
  _QWORD *v84;
  _QWORD *v85;
  uint64_t v86;
  void (***v87)(_QWORD, uint64_t);
  void (***v88)(_QWORD, uint64_t);
  unsigned __int8 v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  int8x16_t *v93;
  uint64_t v94;
  uint64_t v95;
  int8x16_t v96;
  int8x16_t *v97;
  BOOL v99;
  uint64_t *v100;
  uint64_t v101;
  uint64_t *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  int8x16_t *v106;
  _QWORD *v107;
  _QWORD *v108;
  uint64_t v109;
  malloc_zone_t *zone;
  void (***v111)(_QWORD, uint64_t);
  void (***v112)(_QWORD, uint64_t);
  unsigned __int8 v113;
  uint64_t v114;
  geo::read_write_lock *v115;
  const char *v116;
  unint64_t v117;
  uint64_t v118;
  uint64_t v119;
  int v120;
  int v121;
  int v122;
  int v123;
  unsigned int v124;
  unint64_t v125;
  uint64_t v126;
  uint64_t v127;
  _QWORD *v128;
  _QWORD *v129;
  malloc_zone_t *v130;
  void (***v131)(_QWORD, uint64_t);
  void (***v132)(_QWORD, uint64_t);
  unsigned __int8 v133;
  uint64_t v134;
  geo::read_write_lock *v135;
  const char *v136;
  int64_t v137;
  uint64_t v138;
  int64_t v139;
  uint64_t v140;
  uint64_t *v141;
  uint64_t v142;
  uint64_t v143;
  _BOOL4 v144;
  uint64_t v145;
  uint64_t *v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t *v150;
  uint64_t v151;
  _QWORD *v152;
  _QWORD *v153;
  uint64_t v154;
  void (***v155)(_QWORD, uint64_t);
  void (***v156)(_QWORD, uint64_t);
  unsigned __int8 v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  _QWORD *v161;
  _QWORD *v162;
  void (***v163)(_QWORD, uint64_t);
  void (***v164)(_QWORD, uint64_t);
  unsigned __int8 v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v170;
  uint64_t *v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t *v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  _QWORD *v180;
  _QWORD *v181;
  malloc_zone_t *v182;
  void (***v183)(_QWORD, uint64_t);
  void (***v184)(_QWORD, uint64_t);
  unsigned __int8 v185;
  uint64_t v186;
  geo::read_write_lock *v187;
  const char *v188;
  uint64_t *v189;
  uint64_t v190;
  uint64_t v191;
  _QWORD *v192;
  _QWORD *v193;
  uint64_t v194;
  void (***v195)(_QWORD, uint64_t);
  void (***v196)(_QWORD, uint64_t);
  unsigned __int8 v197;
  uint64_t v198;
  uint64_t v199;
  _QWORD *v200;
  _QWORD *v201;
  void (***v202)(_QWORD, uint64_t);
  void (***v203)(_QWORD, uint64_t);
  unsigned __int8 v204;
  uint64_t v205;
  uint64_t v206;
  _QWORD *v207;
  _QWORD *v208;
  uint64_t v209;
  void (***v210)(_QWORD, uint64_t);
  void (***v211)(_QWORD, uint64_t);
  unsigned __int8 v212;
  uint64_t v213;
  uint64_t v214;
  unint64_t v215;
  uint64_t *v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t *v219;
  uint64_t v220;
  _QWORD *v221;
  _QWORD *v222;
  uint64_t v223;
  void (***v224)(_QWORD, uint64_t);
  void (***v225)(_QWORD, uint64_t);
  unsigned __int8 v226;
  uint64_t v227;
  _QWORD *v228;
  void (***v229)(_QWORD, uint64_t);
  void (***v230)(_QWORD, uint64_t);
  unsigned __int8 v231;
  uint64_t v232;
  uint64_t v233;
  int8x16_t *v234;
  uint64_t *v235;
  uint64_t v236;
  uint64_t v237;
  unint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  int v242;
  unint64_t v243;
  uint64_t v244;
  _QWORD *v245;
  _QWORD *v246;
  malloc_zone_t *v247;
  void (***v248)(_QWORD, uint64_t);
  void (***v249)(_QWORD, uint64_t);
  unsigned __int8 v250;
  uint64_t v251;
  geo::read_write_lock *v252;
  const char *v253;
  _QWORD *v254;
  _QWORD *v255;
  malloc_zone_t *v256;
  void (***v257)(_QWORD, uint64_t);
  void (***v258)(_QWORD, uint64_t);
  unsigned __int8 v259;
  uint64_t v260;
  geo::read_write_lock *v261;
  const char *v262;
  uint64_t v263;
  uint64_t *v265;
  uint64_t v266;
  uint64_t v267;
  int64_t v268;
  uint64_t v269;
  _QWORD *v270;
  uint64_t v271;
  uint64_t *v272;
  int64_t v273;
  int8x16_t *v275;
  uint64_t v276;

  v275 = (int8x16_t *)result;
LABEL_2:
  v5 = (uint64_t *)v275;
  v265 = &a2[-1].i64[1];
  while (2)
  {
    v6 = (int8x16_t *)v5;
    v7 = (char *)a2 - (char *)v5;
    v8 = ((char *)a2 - (char *)v5) >> 3;
    v275 = v6;
    switch(v8)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        v91 = *v265;
        v92 = v6->i64[0];
        result = md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(*v265 + 96), v6->i64[0]);
        if ((_DWORD)result)
        {
          v6->i64[0] = v91;
          *v265 = v92;
        }
        return result;
      case 3uLL:
        return std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1} &,std::default_delete<md::RibbonSection>*>(v6->i64, &v6->i64[1], v265);
      case 4uLL:
        v93 = v6 + 1;
        std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1} &,std::default_delete<md::RibbonSection>*>(v6->i64, &v6->i64[1], v6[1].i64);
        v94 = *v265;
        v95 = v6[1].i64[0];
        result = md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(*v265 + 96), v95);
        if ((_DWORD)result)
        {
          v93->i64[0] = v94;
          *v265 = v95;
          result = md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(v93->i64[0] + 96), v6->i64[1]);
          if ((_DWORD)result)
          {
            v96 = *(int8x16_t *)((char *)v6 + 8);
            *(int8x16_t *)((char *)v6 + 8) = vextq_s8(v96, v96, 8uLL);
            result = md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(v96.i64[1] + 96), v6->i64[0]);
            if ((_DWORD)result)
              *v6 = vextq_s8(*v6, *v6, 8uLL);
          }
        }
        return result;
      case 5uLL:
        return std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1} &,std::default_delete<md::RibbonSection>*>(v6->i64, &v6->i64[1], v6[1].i64, &v6[1].i64[1], v265);
      default:
        if (v7 <= 191)
        {
          v97 = (int8x16_t *)&v6->u64[1];
          v99 = v6 == a2 || v97 == a2;
          if ((a4 & 1) != 0)
          {
            if (!v99)
            {
              v100 = (uint64_t *)v6;
              do
              {
                v102 = v100;
                v100 = (uint64_t *)v97;
                v104 = *v102;
                v103 = v102[1];
                result = md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(v103 + 96), *v102);
                if ((_DWORD)result)
                {
                  v105 = 0;
                  *v100 = 0;
                  v272 = v100;
                  while (1)
                  {
                    *v100 = v104;
                    v100 = v102;
                    *v102 = 0;
                    v106 = v275;
                    if (v105)
                    {
                      v107 = *(_QWORD **)(v105 + 56);
                      if (v107)
                      {
                        v108 = *(_QWORD **)(v105 + 64);
                        v109 = *(_QWORD *)(v105 + 56);
                        if (v108 != v107)
                        {
                          do
                          {
                            v112 = (void (***)(_QWORD, uint64_t))*--v108;
                            v111 = v112;
                            *v108 = 0;
                            if (v112)
                            {
                              (**v111)(v111, v109);
                              if ((v113 & 1) == 0
                              {
                                v114 = operator new();
                                *(_QWORD *)(v114 + 16) = 0x5ED09DD50000000FLL;
                                *(_QWORD *)(v114 + 24) = "VectorKitLabels";
                                *(_OWORD *)(v114 + 32) = xmmword_19FFB2E80;
                                *(_QWORD *)v114 = &off_1E42B5668;
                                *(_QWORD *)(v114 + 8) = "VectorKitLabels";
                                *(_OWORD *)(v114 + 72) = 0u;
                                *(_OWORD *)(v114 + 88) = 0u;
                                *(_OWORD *)(v114 + 104) = 0u;
                                *(_OWORD *)(v114 + 120) = 0u;
                                *(_OWORD *)(v114 + 136) = 0u;
                                *(_OWORD *)(v114 + 152) = 0u;
                                *(_OWORD *)(v114 + 168) = 0u;
                                *(_OWORD *)(v114 + 184) = 0u;
                                *(_OWORD *)(v114 + 200) = 0u;
                                *(_OWORD *)(v114 + 216) = 0u;
                                *(_OWORD *)(v114 + 232) = 0u;
                                *(_QWORD *)(v114 + 248) = 0;
                                v266 = v114;
                                *(_OWORD *)(v114 + 56) = 0u;
                                v115 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v114 + 56), 0);
                                if ((_DWORD)v115)
                                  geo::read_write_lock::logFailure(v115, (uint64_t)"initialization", v116);
                                zone = malloc_create_zone(0, 0);
                                *(_QWORD *)(v266 + 48) = zone;
                                malloc_set_zone_name(zone, "VectorKitLabels");
                                *(_QWORD *)(v266 + 256) = os_log_create("com.apple.VectorKit", "Memory");
                                mdm::Allocator::instance(void)::alloc = v266;
                              }
                              (*(void (**)(uint64_t, void (***)(_QWORD, uint64_t), uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc + 40))(mdm::Allocator::instance(void)::alloc, v111, 112);
                            }
                          }
                          while (v108 != v107);
                          v109 = *(_QWORD *)(v105 + 56);
                          v106 = v275;
                        }
                        *(_QWORD *)(v105 + 64) = v107;
                        (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v105 + 80) + 40))(*(_QWORD *)(v105 + 80), v109, *(_QWORD *)(v105 + 72) - v109);
                      }
                      result = MEMORY[0x1A1AF4E00](v105, 0x1020C4010FC18DELL);
                    }
                    if (v100 == (uint64_t *)v106)
                      break;
                    v117 = *(unsigned int *)(v103 + 96);
                    v118 = v117 & 0xF;
                    if ((v117 & 0xF000) != 0)
                      v119 = 3;
                    else
                      v119 = 0;
                    if ((v117 & 0xF00) != 0)
                      v119 = 2;
                    if ((v117 & 0xF0) != 0)
                      v119 = 1;
                    if ((v117 & 0xF) != 0)
                      v119 = 0;
                    v120 = ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v119];
                    v121 = ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[(unsigned __int16)v117 >> 12];
                    v122 = ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[(v117 >> 8) & 0xF];
                    v123 = ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v117 >> 4];
                    v124 = ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v118];
                    v102 = v100 - 1;
                    v104 = *(v100 - 1);
                    v125 = *(unsigned int *)(v104 + 96);
                    if ((v125 & 0xF000) != 0)
                      v126 = 3;
                    else
                      v126 = 0;
                    if ((v125 & 0xF00) != 0)
                      v126 = 2;
                    if ((v125 & 0xF0) != 0)
                      v126 = 1;
                    if ((v125 & 0xF) != 0)
                      v126 = 0;
                    if (((v121 << 12) | (v120 << 16) | (v122 << 8) | (16 * v123) | v124) >= ((ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[(unsigned __int16)v125 >> 12] << 12) | (ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v126] << 16) | (ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[(v125 >> 8) & 0xF] << 8) | (16 * ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v125 >> 4]) | ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v125 & 0xF]))
                      goto LABEL_214;
                    v105 = *v100;
                  }
                  v100 = (uint64_t *)v106;
LABEL_214:
                  v127 = *v100;
                  *v100 = v103;
                  v100 = v272;
                  if (v127)
                  {
                    v128 = *(_QWORD **)(v127 + 56);
                    if (v128)
                    {
                      v129 = *(_QWORD **)(v127 + 64);
                      v101 = *(_QWORD *)(v127 + 56);
                      if (v129 != v128)
                      {
                        do
                        {
                          v132 = (void (***)(_QWORD, uint64_t))*--v129;
                          v131 = v132;
                          *v129 = 0;
                          if (v132)
                          {
                            (**v131)(v131, v101);
                            if ((v133 & 1) == 0
                            {
                              v134 = operator new();
                              *(_QWORD *)(v134 + 16) = 0x5ED09DD50000000FLL;
                              *(_QWORD *)(v134 + 24) = "VectorKitLabels";
                              *(_OWORD *)(v134 + 32) = xmmword_19FFB2E80;
                              *(_QWORD *)v134 = &off_1E42B5668;
                              *(_QWORD *)(v134 + 8) = "VectorKitLabels";
                              *(_OWORD *)(v134 + 72) = 0u;
                              *(_OWORD *)(v134 + 88) = 0u;
                              *(_OWORD *)(v134 + 104) = 0u;
                              *(_OWORD *)(v134 + 120) = 0u;
                              *(_OWORD *)(v134 + 136) = 0u;
                              *(_OWORD *)(v134 + 152) = 0u;
                              *(_OWORD *)(v134 + 168) = 0u;
                              *(_OWORD *)(v134 + 184) = 0u;
                              *(_OWORD *)(v134 + 200) = 0u;
                              *(_OWORD *)(v134 + 216) = 0u;
                              *(_OWORD *)(v134 + 232) = 0u;
                              *(_QWORD *)(v134 + 248) = 0;
                              *(_OWORD *)(v134 + 56) = 0u;
                              v135 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v134 + 56), 0);
                              if ((_DWORD)v135)
                                geo::read_write_lock::logFailure(v135, (uint64_t)"initialization", v136);
                              v130 = malloc_create_zone(0, 0);
                              *(_QWORD *)(v134 + 48) = v130;
                              malloc_set_zone_name(v130, "VectorKitLabels");
                              *(_QWORD *)(v134 + 256) = os_log_create("com.apple.VectorKit", "Memory");
                              mdm::Allocator::instance(void)::alloc = v134;
                              v100 = v272;
                            }
                            (*(void (**)(uint64_t, void (***)(_QWORD, uint64_t), uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc + 40))(mdm::Allocator::instance(void)::alloc, v131, 112);
                          }
                        }
                        while (v129 != v128);
                        v101 = *(_QWORD *)(v127 + 56);
                      }
                      *(_QWORD *)(v127 + 64) = v128;
                      (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v127 + 80) + 40))(*(_QWORD *)(v127 + 80), v101, *(_QWORD *)(v127 + 72) - v101);
                    }
                    result = MEMORY[0x1A1AF4E00](v127, 0x1020C4010FC18DELL);
                  }
                }
                v97 = (int8x16_t *)(v100 + 1);
              }
              while (v100 + 1 != (uint64_t *)a2);
            }
          }
          else if (!v99)
          {
            do
            {
              v235 = (uint64_t *)v275;
              v234 = v97;
              v237 = v275->i64[0];
              v236 = v275->i64[1];
              v238 = *(unsigned int *)(v236 + 96);
              result = md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(v238, v275->i64[0]);
              v275 = v234;
              if ((_DWORD)result)
              {
                v239 = 0;
                v234->i64[0] = 0;
                do
                {
                  v234->i64[0] = v237;
                  v234 = (int8x16_t *)v235;
                  *v235 = 0;
                  if (v239)
                  {
                    v245 = *(_QWORD **)(v239 + 56);
                    if (v245)
                    {
                      v246 = *(_QWORD **)(v239 + 64);
                      v240 = *(_QWORD *)(v239 + 56);
                      if (v246 != v245)
                      {
                        do
                        {
                          v249 = (void (***)(_QWORD, uint64_t))*--v246;
                          v248 = v249;
                          *v246 = 0;
                          if (v249)
                          {
                            (**v248)(v248, v240);
                            if ((v250 & 1) == 0
                            {
                              v251 = operator new();
                              *(_QWORD *)(v251 + 16) = 0x5ED09DD50000000FLL;
                              *(_QWORD *)(v251 + 24) = "VectorKitLabels";
                              *(_OWORD *)(v251 + 32) = xmmword_19FFB2E80;
                              *(_QWORD *)v251 = &off_1E42B5668;
                              *(_QWORD *)(v251 + 8) = "VectorKitLabels";
                              *(_OWORD *)(v251 + 72) = 0u;
                              *(_OWORD *)(v251 + 88) = 0u;
                              *(_OWORD *)(v251 + 104) = 0u;
                              *(_OWORD *)(v251 + 120) = 0u;
                              *(_OWORD *)(v251 + 136) = 0u;
                              *(_OWORD *)(v251 + 152) = 0u;
                              *(_OWORD *)(v251 + 168) = 0u;
                              *(_OWORD *)(v251 + 184) = 0u;
                              *(_OWORD *)(v251 + 200) = 0u;
                              *(_OWORD *)(v251 + 216) = 0u;
                              *(_OWORD *)(v251 + 232) = 0u;
                              *(_QWORD *)(v251 + 248) = 0;
                              v269 = v251;
                              *(_OWORD *)(v251 + 56) = 0u;
                              v252 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v251 + 56), 0);
                              if ((_DWORD)v252)
                                geo::read_write_lock::logFailure(v252, (uint64_t)"initialization", v253);
                              v247 = malloc_create_zone(0, 0);
                              *(_QWORD *)(v269 + 48) = v247;
                              malloc_set_zone_name(v247, "VectorKitLabels");
                              *(_QWORD *)(v269 + 256) = os_log_create("com.apple.VectorKit", "Memory");
                              mdm::Allocator::instance(void)::alloc = v269;
                            }
                            (*(void (**)(uint64_t, void (***)(_QWORD, uint64_t), uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc + 40))(mdm::Allocator::instance(void)::alloc, v248, 112);
                          }
                        }
                        while (v246 != v245);
                        v240 = *(_QWORD *)(v239 + 56);
                      }
                      *(_QWORD *)(v239 + 64) = v245;
                      (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v239 + 80) + 40))(*(_QWORD *)(v239 + 80), v240, *(_QWORD *)(v239 + 72) - v240);
                    }
                    result = MEMORY[0x1A1AF4E00](v239, 0x1020C4010FC18DELL);
                    v238 = *(unsigned int *)(v236 + 96);
                  }
                  if ((v238 & 0xF000) != 0)
                    v241 = 3;
                  else
                    v241 = 0;
                  if ((v238 & 0xF00) != 0)
                    v241 = 2;
                  if ((v238 & 0xF0) != 0)
                    v241 = 1;
                  if ((v238 & 0xF) != 0)
                    v241 = 0;
                  v242 = ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v241];
                  v235 = &v234[-1].i64[1];
                  v237 = v234[-1].i64[1];
                  v243 = *(unsigned int *)(v237 + 96);
                  if ((v243 & 0xF000) != 0)
                    v244 = 3;
                  else
                    v244 = 0;
                  if ((v243 & 0xF00) != 0)
                    v244 = 2;
                  if ((v243 & 0xF0) != 0)
                    v244 = 1;
                  if ((v243 & 0xF) != 0)
                    v244 = 0;
                  v239 = v234->i64[0];
                }
                while (((ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[(unsigned __int16)v238 >> 12] << 12) | (v242 << 16) | (ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[(v238 >> 8) & 0xF] << 8) | (16 * ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v238 >> 4]) | ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v238 & 0xF]) < ((ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[(unsigned __int16)v243 >> 12] << 12) | (ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v244] << 16) | (ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[(v243 >> 8) & 0xF] << 8) | (16 * ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v243 >> 4]) | ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v243 & 0xF]));
                v234->i64[0] = v236;
                v234 = v275;
                if (v239)
                {
                  v254 = *(_QWORD **)(v239 + 56);
                  if (v254)
                  {
                    v255 = *(_QWORD **)(v239 + 64);
                    v233 = *(_QWORD *)(v239 + 56);
                    if (v255 != v254)
                    {
                      do
                      {
                        v258 = (void (***)(_QWORD, uint64_t))*--v255;
                        v257 = v258;
                        *v255 = 0;
                        if (v258)
                        {
                          (**v257)(v257, v233);
                          if ((v259 & 1) == 0
                          {
                            v260 = operator new();
                            *(_QWORD *)(v260 + 16) = 0x5ED09DD50000000FLL;
                            *(_QWORD *)(v260 + 24) = "VectorKitLabels";
                            *(_OWORD *)(v260 + 32) = xmmword_19FFB2E80;
                            *(_QWORD *)v260 = &off_1E42B5668;
                            *(_QWORD *)(v260 + 8) = "VectorKitLabels";
                            *(_OWORD *)(v260 + 72) = 0u;
                            *(_OWORD *)(v260 + 88) = 0u;
                            *(_OWORD *)(v260 + 104) = 0u;
                            *(_OWORD *)(v260 + 120) = 0u;
                            *(_OWORD *)(v260 + 136) = 0u;
                            *(_OWORD *)(v260 + 152) = 0u;
                            *(_OWORD *)(v260 + 168) = 0u;
                            *(_OWORD *)(v260 + 184) = 0u;
                            *(_OWORD *)(v260 + 200) = 0u;
                            *(_OWORD *)(v260 + 216) = 0u;
                            *(_OWORD *)(v260 + 232) = 0u;
                            *(_QWORD *)(v260 + 248) = 0;
                            *(_OWORD *)(v260 + 56) = 0u;
                            v261 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v260 + 56), 0);
                            if ((_DWORD)v261)
                              geo::read_write_lock::logFailure(v261, (uint64_t)"initialization", v262);
                            v256 = malloc_create_zone(0, 0);
                            *(_QWORD *)(v260 + 48) = v256;
                            malloc_set_zone_name(v256, "VectorKitLabels");
                            *(_QWORD *)(v260 + 256) = os_log_create("com.apple.VectorKit", "Memory");
                            mdm::Allocator::instance(void)::alloc = v260;
                          }
                          (*(void (**)(uint64_t, void (***)(_QWORD, uint64_t), uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc + 40))(mdm::Allocator::instance(void)::alloc, v257, 112);
                        }
                      }
                      while (v255 != v254);
                      v233 = *(_QWORD *)(v239 + 56);
                    }
                    *(_QWORD *)(v239 + 64) = v254;
                    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v239 + 80) + 40))(*(_QWORD *)(v239 + 80), v233, *(_QWORD *)(v239 + 72) - v233);
                  }
                  result = MEMORY[0x1A1AF4E00](v239, 0x1020C4010FC18DELL);
                  v234 = v275;
                }
              }
              v97 = (int8x16_t *)&v234->u64[1];
            }
            while (&v234->u64[1] != (unint64_t *)a2);
          }
          return result;
        }
        if (!a3)
        {
          if (v6 == a2)
            return result;
          v137 = (v8 - 2) >> 1;
          v273 = v137;
          do
          {
            v139 = v137;
            if (v273 >= v137)
            {
              v140 = (2 * v137) | 1;
              v141 = &v275->i64[v140];
              if (2 * v137 + 2 >= (uint64_t)v8)
              {
                v145 = *v141;
              }
              else
              {
                v142 = *v141;
                v143 = v141[1];
                v144 = md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(*v141 + 96), v143);
                if (v144)
                  v145 = v143;
                else
                  v145 = v142;
                if (v144)
                {
                  ++v141;
                  v140 = 2 * v139 + 2;
                }
              }
              v146 = &v275->i64[v139];
              v147 = *v146;
              result = md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(v145 + 96), *v146);
              if ((result & 1) == 0)
              {
                v268 = v139;
                *v146 = 0;
                v148 = *v141;
                do
                {
                  v150 = v141;
                  *v141 = 0;
                  v151 = *v146;
                  *v146 = v148;
                  if (v151)
                  {
                    v152 = *(_QWORD **)(v151 + 56);
                    if (v152)
                    {
                      v153 = *(_QWORD **)(v151 + 64);
                      v154 = *(_QWORD *)(v151 + 56);
                      if (v153 != v152)
                      {
                        do
                        {
                          v156 = (void (***)(_QWORD, uint64_t))*--v153;
                          v155 = v156;
                          *v153 = 0;
                          if (v156)
                          {
                            (**v155)(v155, v154);
                            if ((v157 & 1) == 0
                            {
                              v158 = operator new();
                              mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v158, "VectorKitLabels", 0x5ED09DD50000000FLL);
                            }
                            (*(void (**)(uint64_t, void (***)(_QWORD, uint64_t), uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc + 40))(mdm::Allocator::instance(void)::alloc, v155, 112);
                          }
                        }
                        while (v153 != v152);
                        v154 = *(_QWORD *)(v151 + 56);
                      }
                      *(_QWORD *)(v151 + 64) = v152;
                      (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v151 + 80) + 40))(*(_QWORD *)(v151 + 80), v154, *(_QWORD *)(v151 + 72) - v154);
                    }
                    result = MEMORY[0x1A1AF4E00](v151, 0x1020C4010FC18DELL);
                  }
                  if (v273 < v140)
                    break;
                  v159 = (2 * v140) | 1;
                  v141 = &v275->i64[v159];
                  v140 = 2 * v140 + 2;
                  if (v140 < (uint64_t)v8)
                  {
                    v148 = *v141;
                    v149 = v141[1];
                    if (md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(*v141 + 96), v149))
                    {
                      v148 = v149;
                      ++v141;
                    }
                    else
                    {
                      v140 = v159;
                    }
                  }
                  else
                  {
                    v148 = *v141;
                    v140 = v159;
                  }
                  result = md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(v148 + 96), v147);
                  v146 = v150;
                }
                while (!(_DWORD)result);
                v160 = *v150;
                *v150 = v147;
                v139 = v268;
                if (v160)
                {
                  v161 = *(_QWORD **)(v160 + 56);
                  if (v161)
                  {
                    v162 = *(_QWORD **)(v160 + 64);
                    v138 = *(_QWORD *)(v160 + 56);
                    if (v162 != v161)
                    {
                      do
                      {
                        v164 = (void (***)(_QWORD, uint64_t))*--v162;
                        v163 = v164;
                        *v162 = 0;
                        if (v164)
                        {
                          (**v163)(v163, v138);
                          if ((v165 & 1) == 0
                          {
                            v166 = operator new();
                            mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v166, "VectorKitLabels", 0x5ED09DD50000000FLL);
                          }
                          (*(void (**)(uint64_t, void (***)(_QWORD, uint64_t), uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc + 40))(mdm::Allocator::instance(void)::alloc, v163, 112);
                        }
                      }
                      while (v162 != v161);
                      v138 = *(_QWORD *)(v160 + 56);
                    }
                    *(_QWORD *)(v160 + 64) = v161;
                    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v160 + 80) + 40))(*(_QWORD *)(v160 + 80), v138, *(_QWORD *)(v160 + 72) - v138);
                  }
                  result = MEMORY[0x1A1AF4E00](v160, 0x1020C4010FC18DELL);
                }
              }
            }
            v137 = v139 - 1;
          }
          while (v139);
          v167 = (unint64_t)v7 >> 3;
          while (2)
          {
            if (v167 >= 2)
            {
              v170 = 0;
              v171 = (uint64_t *)v275;
              v172 = v275->i64[0];
              v275->i64[0] = 0;
              do
              {
                v174 = &v171[v170 + 1];
                v175 = (2 * v170) | 1;
                v170 = 2 * v170 + 2;
                if (v170 >= v167)
                {
                  v178 = *v174;
                  v170 = v175;
                }
                else
                {
                  v176 = *v174;
                  v177 = v174[1];
                  result = md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(*v174 + 96), v177);
                  if ((_DWORD)result)
                    v178 = v177;
                  else
                    v178 = v176;
                  if ((_DWORD)result)
                    ++v174;
                  else
                    v170 = v175;
                }
                *v174 = 0;
                v179 = *v171;
                *v171 = v178;
                if (v179)
                {
                  v180 = *(_QWORD **)(v179 + 56);
                  if (v180)
                  {
                    v181 = *(_QWORD **)(v179 + 64);
                    v173 = *(_QWORD *)(v179 + 56);
                    if (v181 != v180)
                    {
                      do
                      {
                        v184 = (void (***)(_QWORD, uint64_t))*--v181;
                        v183 = v184;
                        *v181 = 0;
                        if (v184)
                        {
                          (**v183)(v183, v173);
                          if ((v185 & 1) == 0
                          {
                            v186 = operator new();
                            *(_QWORD *)(v186 + 16) = 0x5ED09DD50000000FLL;
                            *(_QWORD *)(v186 + 24) = "VectorKitLabels";
                            *(_OWORD *)(v186 + 32) = xmmword_19FFB2E80;
                            *(_QWORD *)v186 = &off_1E42B5668;
                            *(_QWORD *)(v186 + 8) = "VectorKitLabels";
                            *(_OWORD *)(v186 + 72) = 0u;
                            *(_OWORD *)(v186 + 88) = 0u;
                            *(_OWORD *)(v186 + 104) = 0u;
                            *(_OWORD *)(v186 + 120) = 0u;
                            *(_OWORD *)(v186 + 136) = 0u;
                            *(_OWORD *)(v186 + 152) = 0u;
                            *(_OWORD *)(v186 + 168) = 0u;
                            *(_OWORD *)(v186 + 184) = 0u;
                            *(_OWORD *)(v186 + 200) = 0u;
                            *(_OWORD *)(v186 + 216) = 0u;
                            *(_OWORD *)(v186 + 232) = 0u;
                            *(_QWORD *)(v186 + 248) = 0;
                            *(_OWORD *)(v186 + 56) = 0u;
                            v187 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v186 + 56), 0);
                            if ((_DWORD)v187)
                              geo::read_write_lock::logFailure(v187, (uint64_t)"initialization", v188);
                            v182 = malloc_create_zone(0, 0);
                            *(_QWORD *)(v186 + 48) = v182;
                            malloc_set_zone_name(v182, "VectorKitLabels");
                            *(_QWORD *)(v186 + 256) = os_log_create("com.apple.VectorKit", "Memory");
                            mdm::Allocator::instance(void)::alloc = v186;
                          }
                          (*(void (**)(uint64_t, void (***)(_QWORD, uint64_t), uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc + 40))(mdm::Allocator::instance(void)::alloc, v183, 112);
                        }
                      }
                      while (v181 != v180);
                      v173 = *(_QWORD *)(v179 + 56);
                    }
                    *(_QWORD *)(v179 + 64) = v180;
                    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v179 + 80) + 40))(*(_QWORD *)(v179 + 80), v173, *(_QWORD *)(v179 + 72) - v173);
                  }
                  result = MEMORY[0x1A1AF4E00](v179, 0x1020C4010FC18DELL);
                }
                v171 = v174;
              }
              while (v170 <= (uint64_t)((unint64_t)(v167 - 2) >> 1));
              v189 = &a2[-1].i64[1];
              if (v174 == (uint64_t *)&a2[-1].u64[1])
              {
                v199 = *v174;
                *v174 = v172;
                if (v199)
                {
                  v200 = *(_QWORD **)(v199 + 56);
                  if (v200)
                  {
                    v201 = *(_QWORD **)(v199 + 64);
                    v168 = *(_QWORD *)(v199 + 56);
                    if (v201 == v200)
                      goto LABEL_275;
                    do
                    {
                      v203 = (void (***)(_QWORD, uint64_t))*--v201;
                      v202 = v203;
                      *v201 = 0;
                      if (v203)
                      {
                        (**v202)(v202, v168);
                        if ((v204 & 1) == 0
                        {
                          v205 = operator new();
                          mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v205, "VectorKitLabels", 0x5ED09DD50000000FLL);
                        }
                        (*(void (**)(uint64_t, void (***)(_QWORD, uint64_t), uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc + 40))(mdm::Allocator::instance(void)::alloc, v202, 112);
                      }
                    }
                    while (v201 != v200);
                    goto LABEL_274;
                  }
LABEL_276:
                  result = MEMORY[0x1A1AF4E00](v199, 0x1020C4010FC18DELL);
                }
              }
              else
              {
                v190 = *v189;
                *v189 = 0;
                v191 = *v174;
                *v174 = v190;
                if (v191)
                {
                  v192 = *(_QWORD **)(v191 + 56);
                  if (v192)
                  {
                    v193 = *(_QWORD **)(v191 + 64);
                    v194 = *(_QWORD *)(v191 + 56);
                    if (v193 != v192)
                    {
                      do
                      {
                        v196 = (void (***)(_QWORD, uint64_t))*--v193;
                        v195 = v196;
                        *v193 = 0;
                        if (v196)
                        {
                          (**v195)(v195, v194);
                          if ((v197 & 1) == 0
                          {
                            v198 = operator new();
                            mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v198, "VectorKitLabels", 0x5ED09DD50000000FLL);
                          }
                          (*(void (**)(uint64_t, void (***)(_QWORD, uint64_t), uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc + 40))(mdm::Allocator::instance(void)::alloc, v195, 112);
                        }
                      }
                      while (v193 != v192);
                      v194 = *(_QWORD *)(v191 + 56);
                    }
                    *(_QWORD *)(v191 + 64) = v192;
                    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v191 + 80) + 40))(*(_QWORD *)(v191 + 80), v194, *(_QWORD *)(v191 + 72) - v194);
                  }
                  result = MEMORY[0x1A1AF4E00](v191, 0x1020C4010FC18DELL);
                }
                v206 = *v189;
                *v189 = v172;
                if (v206)
                {
                  v207 = *(_QWORD **)(v206 + 56);
                  if (v207)
                  {
                    v208 = *(_QWORD **)(v206 + 64);
                    v209 = *(_QWORD *)(v206 + 56);
                    if (v208 != v207)
                    {
                      do
                      {
                        v211 = (void (***)(_QWORD, uint64_t))*--v208;
                        v210 = v211;
                        *v208 = 0;
                        if (v211)
                        {
                          (**v210)(v210, v209);
                          if ((v212 & 1) == 0
                          {
                            v213 = operator new();
                            mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v213, "VectorKitLabels", 0x5ED09DD50000000FLL);
                          }
                          (*(void (**)(uint64_t, void (***)(_QWORD, uint64_t), uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc + 40))(mdm::Allocator::instance(void)::alloc, v210, 112);
                        }
                      }
                      while (v208 != v207);
                      v209 = *(_QWORD *)(v206 + 56);
                    }
                    *(_QWORD *)(v206 + 64) = v207;
                    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v206 + 80) + 40))(*(_QWORD *)(v206 + 80), v209, *(_QWORD *)(v206 + 72) - v209);
                  }
                  result = MEMORY[0x1A1AF4E00](v206, 0x1020C4010FC18DELL);
                }
                v214 = (char *)(v174 + 1) - (char *)v275;
                if (v214 >= 9)
                {
                  v215 = (unint64_t)((v214 >> 3) - 2) >> 1;
                  v216 = &v275->i64[v215];
                  v217 = *v174;
                  result = md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(*v216 + 96), *v174);
                  if ((_DWORD)result)
                  {
                    *v174 = 0;
                    v218 = *v216;
                    do
                    {
                      v219 = v216;
                      *v216 = 0;
                      v220 = *v174;
                      *v174 = v218;
                      if (v220)
                      {
                        v221 = *(_QWORD **)(v220 + 56);
                        if (v221)
                        {
                          v222 = *(_QWORD **)(v220 + 64);
                          v223 = *(_QWORD *)(v220 + 56);
                          if (v222 != v221)
                          {
                            do
                            {
                              v225 = (void (***)(_QWORD, uint64_t))*--v222;
                              v224 = v225;
                              *v222 = 0;
                              if (v225)
                              {
                                (**v224)(v224, v223);
                                if ((v226 & 1) == 0
                                {
                                  v227 = operator new();
                                  mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v227, "VectorKitLabels", 0x5ED09DD50000000FLL);
                                }
                                (*(void (**)(uint64_t, void (***)(_QWORD, uint64_t), uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc + 40))(mdm::Allocator::instance(void)::alloc, v224, 112);
                              }
                            }
                            while (v222 != v221);
                            v223 = *(_QWORD *)(v220 + 56);
                          }
                          *(_QWORD *)(v220 + 64) = v221;
                          (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v220 + 80) + 40))(*(_QWORD *)(v220 + 80), v223, *(_QWORD *)(v220 + 72) - v223);
                        }
                        result = MEMORY[0x1A1AF4E00](v220, 0x1020C4010FC18DELL);
                      }
                      if (!v215)
                        break;
                      v215 = (v215 - 1) >> 1;
                      v216 = &v275->i64[v215];
                      v218 = *v216;
                      result = md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(*v216 + 96), v217);
                      v174 = v219;
                    }
                    while ((result & 1) != 0);
                    v199 = *v219;
                    *v219 = v217;
                    if (v199)
                    {
                      v200 = *(_QWORD **)(v199 + 56);
                      if (v200)
                      {
                        v228 = *(_QWORD **)(v199 + 64);
                        v168 = *(_QWORD *)(v199 + 56);
                        if (v228 == v200)
                        {
LABEL_275:
                          *(_QWORD *)(v199 + 64) = v200;
                          (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v199 + 80) + 40))(*(_QWORD *)(v199 + 80), v168, *(_QWORD *)(v199 + 72) - v168);
                          goto LABEL_276;
                        }
                        do
                        {
                          v230 = (void (***)(_QWORD, uint64_t))*--v228;
                          v229 = v230;
                          *v228 = 0;
                          if (v230)
                          {
                            (**v229)(v229, v168);
                            if ((v231 & 1) == 0
                            {
                              v232 = operator new();
                              mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v232, "VectorKitLabels", 0x5ED09DD50000000FLL);
                            }
                            (*(void (**)(uint64_t, void (***)(_QWORD, uint64_t), uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc + 40))(mdm::Allocator::instance(void)::alloc, v229, 112);
                          }
                        }
                        while (v228 != v200);
LABEL_274:
                        v168 = *(_QWORD *)(v199 + 56);
                        goto LABEL_275;
                      }
                      goto LABEL_276;
                    }
                  }
                }
              }
            }
            a2 = (int8x16_t *)((char *)a2 - 8);
            if ((unint64_t)v167-- <= 2)
              return result;
            continue;
          }
        }
        v9 = v8 >> 1;
        if ((unint64_t)v7 < 0x401)
        {
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1} &,std::default_delete<md::RibbonSection>*>(&v6->i64[v8 >> 1], v6->i64, v265);
        }
        else
        {
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1} &,std::default_delete<md::RibbonSection>*>(v6->i64, &v6->i64[v8 >> 1], v265);
          v10 = v9;
          v11 = &v6->i64[v9];
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1} &,std::default_delete<md::RibbonSection>*>(&v6->i64[1], v11 - 1, a2[-1].i64);
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1} &,std::default_delete<md::RibbonSection>*>(v6[1].i64, &v6->i64[v10 + 1], &a2[-2].i64[1]);
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1} &,std::default_delete<md::RibbonSection>*>(v11 - 1, &v6->i64[v8 >> 1], &v6->i64[v10 + 1]);
          v12 = v6->i64[0];
          v6->i64[0] = *v11;
          *v11 = v12;
        }
        v267 = a3 - 1;
        v13 = v6->i64[0];
        if ((a4 & 1) == 0
          && !md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(v6[-1].i64[1] + 96), v6->i64[0]))
        {
          v6->i64[0] = 0;
          v57 = *(unsigned int *)(v13 + 96);
          result = md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(v57, *v265);
          if ((result & 1) != 0)
          {
            v5 = (uint64_t *)v6;
            do
            {
              v58 = v5[1];
              ++v5;
              result = md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(v57, v58);
            }
            while ((result & 1) == 0);
          }
          else
          {
            v59 = &v6->i64[1];
            do
            {
              v5 = v59;
              if (v59 >= (uint64_t *)a2)
                break;
              ++v59;
              result = md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(v57, *v5);
            }
            while (!(_DWORD)result);
          }
          v60 = (uint64_t *)a2;
          if (v5 < (uint64_t *)a2)
          {
            v60 = (uint64_t *)a2;
            do
            {
              v61 = *--v60;
              result = md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(v57, v61);
            }
            while ((result & 1) != 0);
          }
          if (v5 < v60)
          {
            v62 = *v5;
            v63 = *v60;
            v64 = (v57 & 0xF) == 0;
            if ((v57 & 0xF000) != 0)
              v65 = 3;
            else
              v65 = 0;
            if ((v57 & 0xF00) != 0)
              v65 = 2;
            if (!(_BYTE)v57)
              v64 = v65;
            v66 = (ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[(unsigned __int16)v57 >> 12] << 12) | (ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v64] << 16) | (ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[(v57 >> 8) & 0xF] << 8) | (16 * ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v57 >> 4]) | ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v57 & 0xF];
            do
            {
              *v5 = v63;
              *v60 = v62;
              do
              {
                v67 = v5[1];
                ++v5;
                v62 = v67;
                v68 = *(unsigned int *)(v67 + 96);
                if ((v68 & 0xF000) != 0)
                  v69 = 3;
                else
                  v69 = 0;
                if ((v68 & 0xF00) != 0)
                  v69 = 2;
                if ((v68 & 0xF0) != 0)
                  v69 = 1;
                if ((v68 & 0xF) != 0)
                  v69 = 0;
              }
              while (v66 >= ((ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[(unsigned __int16)v68 >> 12] << 12) | (ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v69] << 16) | (ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[(v68 >> 8) & 0xF] << 8) | (16 * ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v68 >> 4]) | ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v68 & 0xF]));
              do
              {
                v70 = *--v60;
                v63 = v70;
                v71 = *(unsigned int *)(v70 + 96);
                if ((v71 & 0xF000) != 0)
                  v72 = 3;
                else
                  v72 = 0;
                if ((v71 & 0xF00) != 0)
                  v72 = 2;
                if ((v71 & 0xF0) != 0)
                  v72 = 1;
                if ((v71 & 0xF) != 0)
                  v72 = 0;
              }
              while (v66 < ((ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[(unsigned __int16)v71 >> 12] << 12) | (ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v72] << 16) | (ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[(v71 >> 8) & 0xF] << 8) | (16 * ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v71 >> 4]) | ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v71 & 0xF]));
            }
            while (v5 < v60);
          }
          v73 = v5 - 1;
          if (v5 - 1 != (uint64_t *)v6)
          {
            v74 = *v73;
            *v73 = 0;
            result = v6->i64[0];
            v6->i64[0] = v74;
            if (result)
            {
              v75 = *(_QWORD **)(result + 56);
              if (v75)
              {
                v76 = result;
                v77 = *(_QWORD **)(result + 64);
                v78 = *(_QWORD *)(result + 56);
                if (v77 != v75)
                {
                  v276 = result;
                  do
                  {
                    v80 = (void (***)(_QWORD, uint64_t))*--v77;
                    v79 = v80;
                    *v77 = 0;
                    if (v80)
                    {
                      (**v79)(v79, v78);
                      if ((v81 & 1) == 0
                      {
                        v82 = operator new();
                        mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v82, "VectorKitLabels", 0x5ED09DD50000000FLL);
                      }
                      (*(void (**)(uint64_t, void (***)(_QWORD, uint64_t), uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc + 40))(mdm::Allocator::instance(void)::alloc, v79, 112);
                    }
                  }
                  while (v77 != v75);
                  v76 = v276;
                  v78 = *(_QWORD *)(v276 + 56);
                }
                *(_QWORD *)(v76 + 64) = v75;
                (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v76 + 80) + 40))(*(_QWORD *)(v76 + 80), v78, *(_QWORD *)(v76 + 72) - v78);
                result = v76;
              }
              result = MEMORY[0x1A1AF4E00](result, 0x1020C4010FC18DELL);
            }
          }
          a4 = 0;
          v83 = *v73;
          *v73 = v13;
          a3 = v267;
          if (v83)
          {
            v84 = *(_QWORD **)(v83 + 56);
            if (v84)
            {
              v85 = *(_QWORD **)(v83 + 64);
              v86 = *(_QWORD *)(v83 + 56);
              if (v85 != v84)
              {
                do
                {
                  v88 = (void (***)(_QWORD, uint64_t))*--v85;
                  v87 = v88;
                  *v85 = 0;
                  if (v88)
                  {
                    (**v87)(v87, v86);
                    if ((v89 & 1) == 0
                    {
                      v90 = operator new();
                      mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v90, "VectorKitLabels", 0x5ED09DD50000000FLL);
                    }
                    (*(void (**)(uint64_t, void (***)(_QWORD, uint64_t), uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc + 40))(mdm::Allocator::instance(void)::alloc, v87, 112);
                  }
                }
                while (v85 != v84);
                v86 = *(_QWORD *)(v83 + 56);
              }
              *(_QWORD *)(v83 + 64) = v84;
              (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v83 + 80) + 40))(*(_QWORD *)(v83 + 80), v86, *(_QWORD *)(v83 + 72) - v86);
            }
            result = MEMORY[0x1A1AF4E00](v83, 0x1020C4010FC18DELL);
            a4 = 0;
          }
          continue;
        }
        v6->i64[0] = 0;
        v14 = v6;
        do
        {
          v15 = v14;
          v17 = v14->i64[1];
          v14 = (int8x16_t *)((char *)v14 + 8);
          v16 = v17;
        }
        while (md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(v17 + 96), v13));
        v18 = (uint64_t *)a2;
        if (v15 == v6)
        {
          v18 = (uint64_t *)a2;
          do
          {
            if (v14 >= (int8x16_t *)v18)
              break;
            v20 = *--v18;
          }
          while (!md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(v20 + 96), v13));
        }
        else
        {
          do
            v19 = *--v18;
          while (!md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(v19 + 96), v13));
        }
        if (v14 < (int8x16_t *)v18)
        {
          v21 = *v18;
          v22 = *(unsigned int *)(v13 + 96);
          v23 = ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[(unsigned __int16)v22 >> 12] << 12;
          v24 = ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[(v22 >> 8) & 0xF];
          v25 = ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v22 >> 4];
          v26 = ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v22 & 0xF];
          if ((v22 & 0xF000) != 0)
            v27 = 3;
          else
            v27 = 0;
          if ((v22 & 0xF00) != 0)
            v27 = 2;
          if (*(_DWORD *)(v13 + 96))
            v28 = (*(_DWORD *)(v13 + 96) & 0xF) == 0;
          else
            v28 = v27;
          v29 = v23 | (ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v28] << 16) | (v24 << 8) | (16 * v25) | v26;
          v30 = (uint64_t *)v14;
          v31 = v18;
          do
          {
            *v30 = v21;
            *v31 = v16;
            do
            {
              v32 = v30[1];
              ++v30;
              v16 = v32;
              v33 = *(unsigned int *)(v32 + 96);
              if ((v33 & 0xF000) != 0)
                v34 = 3;
              else
                v34 = 0;
              if ((v33 & 0xF00) != 0)
                v34 = 2;
              if ((v33 & 0xF0) != 0)
                v34 = 1;
              if ((v33 & 0xF) != 0)
                v34 = 0;
            }
            while (((ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[(unsigned __int16)v33 >> 12] << 12) | (ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v34] << 16) | (ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[(v33 >> 8) & 0xF] << 8) | (16 * ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v33 >> 4]) | ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v33 & 0xF]) < v29);
            v15 = (int8x16_t *)(v30 - 1);
            do
            {
              v35 = *--v31;
              v21 = v35;
              v36 = *(unsigned int *)(v35 + 96);
              if ((v36 & 0xF000) != 0)
                v37 = 3;
              else
                v37 = 0;
              if ((v36 & 0xF00) != 0)
                v37 = 2;
              if ((v36 & 0xF0) != 0)
                v37 = 1;
              if ((v36 & 0xF) != 0)
                v37 = 0;
            }
            while (((ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[(unsigned __int16)v36 >> 12] << 12) | (ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v37] << 16) | (ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[(v36 >> 8) & 0xF] << 8) | (16 * ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v36 >> 4]) | ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v36 & 0xF]) >= v29);
          }
          while (v30 < v31);
        }
        if (v15 != v6)
        {
          v38 = v15->i64[0];
          v15->i64[0] = 0;
          v39 = v6->i64[0];
          v6->i64[0] = v38;
          if (v39)
          {
            v40 = *(_QWORD **)(v39 + 56);
            if (v40)
            {
              v41 = v39;
              v42 = *(_QWORD **)(v39 + 64);
              v43 = *(_QWORD *)(v39 + 56);
              if (v42 != v40)
              {
                v263 = v39;
                v270 = *(_QWORD **)(v39 + 56);
                do
                {
                  v45 = (void (***)(_QWORD, uint64_t))*--v42;
                  v44 = v45;
                  *v42 = 0;
                  if (v45)
                  {
                    (**v44)(v44, v43);
                    if ((v46 & 1) == 0
                    {
                      v47 = operator new();
                      mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v47, "VectorKitLabels", 0x5ED09DD50000000FLL);
                    }
                    (*(void (**)(uint64_t, void (***)(_QWORD, uint64_t), uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc + 40))(mdm::Allocator::instance(void)::alloc, v44, 112);
                    v40 = v270;
                  }
                }
                while (v42 != v40);
                v41 = v263;
                v43 = *(_QWORD *)(v263 + 56);
              }
              *(_QWORD *)(v41 + 64) = v40;
              (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v41 + 80) + 40))(*(_QWORD *)(v41 + 80), v43, *(_QWORD *)(v41 + 72) - v43);
              v39 = v41;
            }
            MEMORY[0x1A1AF4E00](v39, 0x1020C4010FC18DELL);
          }
        }
        v48 = v15->i64[0];
        v15->i64[0] = v13;
        if (v48)
        {
          v49 = *(_QWORD **)(v48 + 56);
          if (v49)
          {
            v50 = *(_QWORD **)(v48 + 64);
            v51 = *(_QWORD *)(v48 + 56);
            if (v50 != v49)
            {
              v271 = v48;
              do
              {
                v53 = (void (***)(_QWORD, uint64_t))*--v50;
                v52 = v53;
                *v50 = 0;
                if (v53)
                {
                  (**v52)(v52, v51);
                  {
                    v55 = operator new();
                    mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v55, "VectorKitLabels", 0x5ED09DD50000000FLL);
                  }
                  (*(void (**)(uint64_t, void (***)(_QWORD, uint64_t), uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc + 40))(mdm::Allocator::instance(void)::alloc, v52, 112);
                }
              }
              while (v50 != v49);
              v48 = v271;
              v51 = *(_QWORD *)(v271 + 56);
            }
            *(_QWORD *)(v48 + 64) = v49;
            (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v48 + 80) + 40))(*(_QWORD *)(v48 + 80), v51, *(_QWORD *)(v48 + 72) - v51);
          }
          MEMORY[0x1A1AF4E00](v48, 0x1020C4010FC18DELL);
        }
        a3 = v267;
        if (v14 < (int8x16_t *)v18)
        {
LABEL_82:
          result = std::__introsort<std::_ClassicAlgPolicy,md::RibbonLayer<md::Ribbons::DottedRouteLineRibbonDescriptor>::batch(std::unordered_map<md::DottedRouteLineBatchKey,std::vector<std::unique_ptr<md::DottedRouteLineRibbon,mdm::TypeDeleter<md::DottedRouteLineRibbon>>,geo::StdAllocator<std::unique_ptr<md::DottedRouteLineRibbon,mdm::TypeDeleter<md::DottedRouteLineRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DottedRouteLineBatchKey,std::vector<std::unique_ptr<md::DottedRouteLineRibbon,mdm::TypeDeleter<md::DottedRouteLineRibbon>>,geo::StdAllocator<std::unique_ptr<md::DottedRouteLineRibbon,mdm::TypeDeleter<md::DottedRouteLineRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DottedRouteLineRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DottedRouteLineRibbonDescriptor>> const)#1} &,std::default_delete<md::RibbonSection>*,false>(v275, v15, v267, a4 & 1);
          a4 = 0;
          v5 = &v15->i64[1];
          continue;
        }
        v56 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,md::RibbonLayer<md::Ribbons::DottedRouteLineRibbonDescriptor>::batch(std::unordered_map<md::DottedRouteLineBatchKey,std::vector<std::unique_ptr<md::DottedRouteLineRibbon,mdm::TypeDeleter<md::DottedRouteLineRibbon>>,geo::StdAllocator<std::unique_ptr<md::DottedRouteLineRibbon,mdm::TypeDeleter<md::DottedRouteLineRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DottedRouteLineBatchKey,std::vector<std::unique_ptr<md::DottedRouteLineRibbon,mdm::TypeDeleter<md::DottedRouteLineRibbon>>,geo::StdAllocator<std::unique_ptr<md::DottedRouteLineRibbon,mdm::TypeDeleter<md::DottedRouteLineRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DottedRouteLineRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DottedRouteLineRibbonDescriptor>> const)#1} &,std::default_delete<md::RibbonSection>*>(v275, v15);
        v5 = &v15->i64[1];
        result = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,md::RibbonLayer<md::Ribbons::DottedRouteLineRibbonDescriptor>::batch(std::unordered_map<md::DottedRouteLineBatchKey,std::vector<std::unique_ptr<md::DottedRouteLineRibbon,mdm::TypeDeleter<md::DottedRouteLineRibbon>>,geo::StdAllocator<std::unique_ptr<md::DottedRouteLineRibbon,mdm::TypeDeleter<md::DottedRouteLineRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DottedRouteLineBatchKey,std::vector<std::unique_ptr<md::DottedRouteLineRibbon,mdm::TypeDeleter<md::DottedRouteLineRibbon>>,geo::StdAllocator<std::unique_ptr<md::DottedRouteLineRibbon,mdm::TypeDeleter<md::DottedRouteLineRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DottedRouteLineRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DottedRouteLineRibbonDescriptor>> const)#1} &,std::default_delete<md::RibbonSection>*>((int8x16_t *)&v15->u64[1], a2);
        if (!(_DWORD)result)
        {
          if (v56)
            continue;
          goto LABEL_82;
        }
        a2 = v15;
        if (!v56)
          goto LABEL_2;
        return result;
    }
  }
}

uint64_t *std::__hash_table<std::__hash_value_type<unsigned int,std::vector<std::unique_ptr<md::DottedRouteLineRibbon,mdm::TypeDeleter<md::DottedRouteLineRibbon>>,geo::StdAllocator<std::unique_ptr<md::DottedRouteLineRibbon,mdm::TypeDeleter<md::DottedRouteLineRibbon>>,mdm::Allocator>>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::vector<std::unique_ptr<md::DottedRouteLineRibbon,mdm::TypeDeleter<md::DottedRouteLineRibbon>>,geo::StdAllocator<std::unique_ptr<md::DottedRouteLineRibbon,mdm::TypeDeleter<md::DottedRouteLineRibbon>>,mdm::Allocator>>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::vector<std::unique_ptr<md::DottedRouteLineRibbon,mdm::TypeDeleter<md::DottedRouteLineRibbon>>,geo::StdAllocator<std::unique_ptr<md::DottedRouteLineRibbon,mdm::TypeDeleter<md::DottedRouteLineRibbon>>,mdm::Allocator>>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,geo::StdAllocator<std::__hash_value_type<unsigned int,std::vector<std::unique_ptr<md::DottedRouteLineRibbon,mdm::TypeDeleter<md::DottedRouteLineRibbon>>,geo::StdAllocator<std::unique_ptr<md::DottedRouteLineRibbon,mdm::TypeDeleter<md::DottedRouteLineRibbon>>,mdm::Allocator>>>,mdm::Allocator>>::~__hash_table(uint64_t *a1)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t *v4;
  _QWORD *v5;
  _QWORD *v6;
  malloc_zone_t *zone;
  void (***v8)(_QWORD, uint64_t);
  void (***v9)(_QWORD, uint64_t);
  unsigned __int8 v10;
  uint64_t v11;
  geo::read_write_lock *v12;
  const char *v13;
  uint64_t v14;
  uint64_t v16;

  v2 = (uint64_t *)a1[3];
  if (v2)
  {
    do
    {
      v4 = (uint64_t *)*v2;
      v5 = (_QWORD *)v2[3];
      if (v5)
      {
        v6 = (_QWORD *)v2[4];
        v3 = v2[3];
        if (v6 != v5)
        {
          do
          {
            v9 = (void (***)(_QWORD, uint64_t))*--v6;
            v8 = v9;
            *v6 = 0;
            if (v9)
            {
              (**v8)(v8, v3);
              {
                v11 = operator new();
                *(_QWORD *)(v11 + 16) = 0x5ED09DD50000000FLL;
                *(_QWORD *)(v11 + 24) = "VectorKitLabels";
                *(_OWORD *)(v11 + 32) = xmmword_19FFB2E80;
                *(_QWORD *)v11 = &off_1E42B5668;
                *(_QWORD *)(v11 + 8) = "VectorKitLabels";
                *(_OWORD *)(v11 + 72) = 0u;
                *(_OWORD *)(v11 + 88) = 0u;
                *(_OWORD *)(v11 + 104) = 0u;
                *(_OWORD *)(v11 + 120) = 0u;
                *(_OWORD *)(v11 + 136) = 0u;
                *(_OWORD *)(v11 + 152) = 0u;
                *(_OWORD *)(v11 + 168) = 0u;
                *(_OWORD *)(v11 + 184) = 0u;
                *(_OWORD *)(v11 + 200) = 0u;
                *(_OWORD *)(v11 + 216) = 0u;
                *(_OWORD *)(v11 + 232) = 0u;
                *(_QWORD *)(v11 + 248) = 0;
                v16 = v11;
                *(_OWORD *)(v11 + 56) = 0u;
                v12 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v11 + 56), 0);
                if ((_DWORD)v12)
                  geo::read_write_lock::logFailure(v12, (uint64_t)"initialization", v13);
                zone = malloc_create_zone(0, 0);
                *(_QWORD *)(v16 + 48) = zone;
                malloc_set_zone_name(zone, "VectorKitLabels");
                *(_QWORD *)(v16 + 256) = os_log_create("com.apple.VectorKit", "Memory");
                mdm::Allocator::instance(void)::alloc = v16;
              }
              (*(void (**)(uint64_t, void (***)(_QWORD, uint64_t), uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc
                                                                                               + 40))(mdm::Allocator::instance(void)::alloc, v8, 112);
            }
          }
          while (v6 != v5);
          v3 = v2[3];
        }
        v2[4] = (uint64_t)v5;
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v2[6] + 40))(v2[6], v3, v2[5] - v3);
      }
      (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(_QWORD *)a1[4] + 40))(a1[4], v2, 56);
      v2 = v4;
    }
    while (v4);
  }
  v14 = *a1;
  *a1 = 0;
  if (v14)
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1[2] + 40))(a1[2], v14, 8 * a1[1]);
  return a1;
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,md::RibbonLayer<md::Ribbons::DottedRouteLineRibbonDescriptor>::batch(std::unordered_map<md::DottedRouteLineBatchKey,std::vector<std::unique_ptr<md::DottedRouteLineRibbon,mdm::TypeDeleter<md::DottedRouteLineRibbon>>,geo::StdAllocator<std::unique_ptr<md::DottedRouteLineRibbon,mdm::TypeDeleter<md::DottedRouteLineRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DottedRouteLineBatchKey,std::vector<std::unique_ptr<md::DottedRouteLineRibbon,mdm::TypeDeleter<md::DottedRouteLineRibbon>>,geo::StdAllocator<std::unique_ptr<md::DottedRouteLineRibbon,mdm::TypeDeleter<md::DottedRouteLineRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DottedRouteLineRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DottedRouteLineRibbonDescriptor>> const)#1} &,std::default_delete<md::RibbonSection>*>(int8x16_t *a1, int8x16_t *a2)
{
  int8x16_t *v2;
  uint64_t v4;
  _BOOL8 result;
  uint64_t v6;
  uint64_t v7;
  uint64_t *i64;
  int8x16_t *v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int8x16_t *i;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  void (***v19)(_QWORD, uint64_t);
  void (***v20)(_QWORD, uint64_t);
  unsigned __int8 v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  void (***v26)(_QWORD, uint64_t);
  void (***v27)(_QWORD, uint64_t);
  unsigned __int8 v28;
  uint64_t v29;
  int8x16_t *v30;
  uint64_t v31;
  uint64_t v32;
  int8x16_t v33;
  int8x16_t *v34;
  int v35;

  v2 = a2;
  v4 = ((char *)a2 - (char *)a1) >> 3;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = a2[-1].i64[1];
      v7 = a1->i64[0];
      if (md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(v6 + 96), a1->i64[0]))
      {
        a1->i64[0] = v6;
        v2[-1].i64[1] = v7;
      }
      return 1;
    case 3:
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1} &,std::default_delete<md::RibbonSection>*>(a1->i64, &a1->i64[1], &a2[-1].i64[1]);
      return 1;
    case 4:
      v30 = a1 + 1;
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1} &,std::default_delete<md::RibbonSection>*>(a1->i64, &a1->i64[1], a1[1].i64);
      v31 = v2[-1].i64[1];
      v32 = a1[1].i64[0];
      if (md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(v31 + 96), v32))
      {
        v30->i64[0] = v31;
        v2[-1].i64[1] = v32;
        if (md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(v30->i64[0] + 96), a1->i64[1]))
        {
          v33 = *(int8x16_t *)((char *)a1 + 8);
          *(int8x16_t *)((char *)a1 + 8) = vextq_s8(v33, v33, 8uLL);
          if (md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(v33.i64[1] + 96), a1->i64[0]))
          {
            *a1 = vextq_s8(*a1, *a1, 8uLL);
          }
        }
      }
      return 1;
    case 5:
      std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1} &,std::default_delete<md::RibbonSection>*>(a1->i64, &a1->i64[1], a1[1].i64, &a1[1].i64[1], &a2[-1].i64[1]);
      return 1;
    default:
      i64 = a1[1].i64;
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1} &,std::default_delete<md::RibbonSection>*>(a1->i64, &a1->i64[1], a1[1].i64);
      v9 = (int8x16_t *)((char *)a1 + 24);
      if (&a1[1].u64[1] == (unint64_t *)v2)
        return 1;
      v10 = 0;
      v34 = v2;
      break;
  }
  while (1)
  {
    v12 = v9->i64[0];
    v13 = *i64;
    if (md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(v9->i64[0] + 96), *i64))
    {
      v35 = v10;
      v14 = 0;
      v9->i64[0] = 0;
      for (i = v9; ; v14 = i->i64[0])
      {
        i->i64[0] = v13;
        i = (int8x16_t *)i64;
        *i64 = 0;
        if (v14)
        {
          v16 = *(_QWORD **)(v14 + 56);
          if (v16)
          {
            v17 = *(_QWORD **)(v14 + 64);
            v18 = *(_QWORD *)(v14 + 56);
            if (v17 != v16)
            {
              do
              {
                v20 = (void (***)(_QWORD, uint64_t))*--v17;
                v19 = v20;
                *v17 = 0;
                if (v20)
                {
                  (**v19)(v19, v18);
                  {
                    v22 = operator new();
                    mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v22, "VectorKitLabels", 0x5ED09DD50000000FLL);
                  }
                  (*(void (**)(uint64_t, void (***)(_QWORD, uint64_t), uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc + 40))(mdm::Allocator::instance(void)::alloc, v19, 112);
                }
              }
              while (v17 != v16);
              v18 = *(_QWORD *)(v14 + 56);
            }
            *(_QWORD *)(v14 + 64) = v16;
            (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v14 + 80) + 40))(*(_QWORD *)(v14 + 80), v18, *(_QWORD *)(v14 + 72) - v18);
          }
          MEMORY[0x1A1AF4E00](v14, 0x1020C4010FC18DELL);
        }
        if (i == a1)
          break;
        i64 = &i[-1].i64[1];
        v13 = i[-1].i64[1];
        if (!md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(v12 + 96), v13))goto LABEL_30;
      }
      i = a1;
LABEL_30:
      v23 = i->i64[0];
      i->i64[0] = v12;
      v2 = v34;
      if (v23)
      {
        v24 = *(_QWORD **)(v23 + 56);
        if (v24)
        {
          v25 = *(_QWORD **)(v23 + 64);
          v11 = *(_QWORD *)(v23 + 56);
          if (v25 != v24)
          {
            do
            {
              v27 = (void (***)(_QWORD, uint64_t))*--v25;
              v26 = v27;
              *v25 = 0;
              if (v27)
              {
                (**v26)(v26, v11);
                {
                  v29 = operator new();
                  mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v29, "VectorKitLabels", 0x5ED09DD50000000FLL);
                }
                (*(void (**)(uint64_t, void (***)(_QWORD, uint64_t), uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc
                                                                                                 + 40))(mdm::Allocator::instance(void)::alloc, v26, 112);
              }
            }
            while (v25 != v24);
            v11 = *(_QWORD *)(v23 + 56);
          }
          *(_QWORD *)(v23 + 64) = v24;
          (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v23 + 80) + 40))(*(_QWORD *)(v23 + 80), v11, *(_QWORD *)(v23 + 72) - v11);
        }
        MEMORY[0x1A1AF4E00](v23, 0x1020C4010FC18DELL);
      }
      v10 = v35 + 1;
      if (v35 == 7)
        return &v9->u64[1] == (unint64_t *)v34;
    }
    i64 = (uint64_t *)v9;
    v9 = (int8x16_t *)((char *)v9 + 8);
    if (v9 == v2)
      return 1;
  }
}

uint64_t *std::unique_ptr<std::__hash_node<std::__hash_value_type<unsigned int,std::vector<std::unique_ptr<md::DottedRouteLineRibbon,mdm::TypeDeleter<md::DottedRouteLineRibbon>>,geo::StdAllocator<std::unique_ptr<md::DottedRouteLineRibbon,mdm::TypeDeleter<md::DottedRouteLineRibbon>>,mdm::Allocator>>>,void *>,std::__hash_node_destructor<geo::StdAllocator<std::__hash_node<std::__hash_value_type<unsigned int,std::vector<std::unique_ptr<md::DottedRouteLineRibbon,mdm::TypeDeleter<md::DottedRouteLineRibbon>>,geo::StdAllocator<std::unique_ptr<md::DottedRouteLineRibbon,mdm::TypeDeleter<md::DottedRouteLineRibbon>>,mdm::Allocator>>>,void *>,mdm::Allocator>>>::~unique_ptr[abi:nn180100](uint64_t *a1)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  void (***v6)(_QWORD, uint64_t);
  void (***v7)(_QWORD, uint64_t);
  unsigned __int8 v8;
  uint64_t v9;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (*((_BYTE *)a1 + 16))
    {
      v3 = *(_QWORD **)(v2 + 24);
      if (v3)
      {
        v4 = *(_QWORD **)(v2 + 32);
        v5 = *(_QWORD *)(v2 + 24);
        if (v4 != v3)
        {
          do
          {
            v7 = (void (***)(_QWORD, uint64_t))*--v4;
            v6 = v7;
            *v4 = 0;
            if (v7)
            {
              (**v6)(v6, v5);
              {
                v9 = operator new();
                mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v9, "VectorKitLabels", 0x5ED09DD50000000FLL);
              }
              (*(void (**)(uint64_t, void (***)(_QWORD, uint64_t), uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc
                                                                                               + 40))(mdm::Allocator::instance(void)::alloc, v6, 112);
            }
          }
          while (v4 != v3);
          v5 = *(_QWORD *)(v2 + 24);
        }
        *(_QWORD *)(v2 + 32) = v3;
        (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v2 + 48) + 40))(*(_QWORD *)(v2 + 48), v5, *(_QWORD *)(v2 + 40) - v5);
      }
    }
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)a1[1] + 40))(*(_QWORD *)a1[1], v2, 56);
  }
  return a1;
}

void ecs2::FlowDescriptor::~FlowDescriptor(ecs2::FlowDescriptor *this)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  void *v11;
  void *v12;

  v2 = *((_QWORD *)this + 9);
  if (v2)
  {
    v3 = *((_QWORD *)this + 10);
    v4 = (void *)*((_QWORD *)this + 9);
    if (v3 == v2)
    {
LABEL_13:
      *((_QWORD *)this + 10) = v2;
      operator delete(v4);
      goto LABEL_14;
    }
    while (1)
    {
      if (*(char *)(v3 - 1) < 0)
        operator delete(*(void **)(v3 - 24));
      v5 = *(_QWORD **)(v3 - 32);
      if ((_QWORD *)(v3 - 56) == v5)
      {
        v5 = (_QWORD *)(v3 - 56);
        v6 = 4;
      }
      else
      {
        if (!v5)
          goto LABEL_6;
        v6 = 5;
      }
      (*(void (**)(void))(*v5 + 8 * v6))();
LABEL_6:
      v3 -= 72;
      if (v3 == v2)
      {
        v4 = (void *)*((_QWORD *)this + 9);
        goto LABEL_13;
      }
    }
  }
LABEL_14:
  v7 = *((_QWORD *)this + 6);
  if (v7)
  {
    v8 = *((_QWORD *)this + 7);
    v9 = (void *)*((_QWORD *)this + 6);
    if (v8 != v7)
    {
      v10 = *((_QWORD *)this + 7);
      do
      {
        v12 = *(void **)(v10 - 24);
        v10 -= 24;
        v11 = v12;
        if (v12)
        {
          *(_QWORD *)(v8 - 16) = v11;
          operator delete(v11);
        }
        v8 = v10;
      }
      while (v10 != v7);
      v9 = (void *)*((_QWORD *)this + 6);
    }
    *((_QWORD *)this + 7) = v7;
    operator delete(v9);
  }
  if (*((_QWORD *)this + 3))
  {
    std::vector<ecs2::BucketDescriptor>::__clear[abi:nn180100]((uint64_t *)this + 3);
    operator delete(*((void **)this + 3));
  }
  if (*((char *)this + 23) < 0)
    operator delete(*(void **)this);
}

void ecs2::Flow::~Flow(ecs2::Flow *this)
{
  void *v2;
  gdc::Registry *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t **v6;
  uint64_t **v7;
  uint64_t *v8;
  unint64_t v9;
  uint64_t *v10;
  unint64_t v11;
  char *v12;
  char *v13;
  BOOL v14;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t *v20;
  uint64_t **v21;
  uint64_t *v22;
  uint64_t **v23;
  unint64_t v24;
  uint64_t **v25;
  _QWORD *v26;
  void *v27;
  _QWORD *v28;
  void *v29;
  _QWORD *v30;
  _QWORD *v31;
  void *v32;
  _QWORD *v33;
  _QWORD *v34;
  _QWORD *v35;
  void *v36;
  _QWORD *v37;
  _QWORD *v38;
  _QWORD *v39;
  void *v40;
  char *v41;
  char *v42;
  void *v43;
  uint64_t v44;
  uint64_t v45;
  void *v46;
  char *v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  void *v51;
  void *v52;
  uint64_t v53;
  uint64_t v54;
  void *v55;
  _QWORD *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  _QWORD *v60;
  uint64_t v61;
  char *v62;
  uint64_t **v63;
  uint64_t *v64;
  uint64_t v65;

  v2 = (void *)*((_QWORD *)this + 27);
  if (v2)
  {
    *((_QWORD *)this + 28) = v2;
    operator delete(v2);
  }
  v3 = (gdc::Registry *)*((_QWORD *)this + 24);
  *((_QWORD *)this + 24) = 0;
  if (v3)
  {
    gdc::Registry::~Registry(v3);
    MEMORY[0x1A1AF4E00]();
  }
  v64 = 0;
  v65 = 0;
  v63 = &v64;
  v4 = (_QWORD *)*((_QWORD *)this + 23);
  if (v4)
  {
    v5 = 0;
    do
    {
      v6 = &v64;
      v7 = &v64;
      if (v64)
      {
        v8 = v64;
        while (1)
        {
          while (1)
          {
            v7 = (uint64_t **)v8;
            v9 = v8[4];
            if ((unint64_t)v4 >= v9)
              break;
            v8 = *v7;
            v6 = v7;
            if (!*v7)
              goto LABEL_16;
          }
          if (v9 >= (unint64_t)v4)
            break;
          v8 = v7[1];
          if (!v8)
          {
            v6 = v7 + 1;
            goto LABEL_16;
          }
        }
      }
      else
      {
LABEL_16:
        v10 = (uint64_t *)operator new(0x28uLL);
        v10[4] = (uint64_t)v4;
        *v10 = 0;
        v10[1] = 0;
        v10[2] = (uint64_t)v7;
        *v6 = v10;
        if (*v63)
        {
          v63 = (uint64_t **)*v63;
          v10 = *v6;
        }
        std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(v64, v10);
        v5 = ++v65;
        v4 = (_QWORD *)*((_QWORD *)this + 23);
      }
      v4 = (_QWORD *)*v4;
      *((_QWORD *)this + 23) = v4;
    }
    while (v4);
  }
  else
  {
    v5 = 0;
  }
  v11 = *((_QWORD *)this + 21);
  v12 = (char *)*((_QWORD *)this + 18);
  v13 = (char *)this + 152;
  v14 = v5 == *((_QWORD *)this + 20) * v11 || v12 == v13;
  if (v14 || v11 == 0)
  {
    if (v12 == v13)
      goto LABEL_70;
    goto LABEL_76;
  }
  v16 = 1;
  v62 = (char *)this + 152;
  do
  {
    if (v16)
    {
      v17 = 0;
      v18 = *((_QWORD *)v12 + 4);
      do
      {
        v19 = (_QWORD *)(v18 + 248 * v17);
        v20 = v64;
        if (!v64)
          goto LABEL_43;
        v21 = &v64;
        do
        {
          v22 = v20;
          v23 = v21;
          v24 = v20[4];
          v25 = (uint64_t **)(v20 + 1);
          if (v24 >= (unint64_t)v19)
          {
            v25 = (uint64_t **)v22;
            v21 = (uint64_t **)v22;
          }
          v20 = *v25;
        }
        while (v20);
        if (v21 == &v64)
          goto LABEL_43;
        if (v24 < (unint64_t)v19)
          v22 = (uint64_t *)v23;
        if ((unint64_t)v19 < v22[4])
        {
LABEL_43:
          v26 = (_QWORD *)v19[28];
          if (v26)
          {
            do
            {
              v33 = (_QWORD *)*v26;
              v34 = (_QWORD *)v26[7];
              if (v34)
              {
                do
                {
                  v35 = (_QWORD *)*v34;
                  operator delete(v34);
                  v34 = v35;
                }
                while (v35);
              }
              v36 = (void *)v26[5];
              v26[5] = 0;
              if (v36)
                operator delete(v36);
              operator delete(v26);
              v26 = v33;
            }
            while (v33);
          }
          v27 = (void *)v19[26];
          v19[26] = 0;
          if (v27)
            operator delete(v27);
          v28 = (_QWORD *)v19[23];
          if (v28)
          {
            do
            {
              v37 = (_QWORD *)*v28;
              v38 = (_QWORD *)v28[7];
              if (v38)
              {
                do
                {
                  v39 = (_QWORD *)*v38;
                  operator delete(v38);
                  v38 = v39;
                }
                while (v39);
              }
              v40 = (void *)v28[5];
              v28[5] = 0;
              if (v40)
                operator delete(v40);
              operator delete(v28);
              v28 = v37;
            }
            while (v37);
          }
          v29 = (void *)v19[21];
          v19[21] = 0;
          if (v29)
            operator delete(v29);
          v30 = (_QWORD *)v19[18];
          if (v30)
          {
            do
            {
              v31 = (_QWORD *)*v30;
              operator delete(v30);
              v30 = v31;
            }
            while (v31);
          }
          v32 = (void *)v19[16];
          v19[16] = 0;
          if (v32)
            operator delete(v32);
          gdc::tf::Taskflow::~Taskflow((gdc::tf::Taskflow *)(v19 + 5));
          v11 = *((_QWORD *)this + 21);
        }
        ++v17;
        v16 = v11;
      }
      while (v17 < v11);
    }
    v41 = (char *)*((_QWORD *)v12 + 1);
    if (v41)
    {
      do
      {
        v42 = v41;
        v41 = *(char **)v41;
      }
      while (v41);
    }
    else
    {
      do
      {
        v42 = (char *)*((_QWORD *)v12 + 2);
        v14 = *(_QWORD *)v42 == (_QWORD)v12;
        v12 = v42;
      }
      while (!v14);
    }
    v12 = v42;
    v13 = (char *)this + 152;
  }
  while (v42 != v62);
  v12 = (char *)*((_QWORD *)this + 18);
  if (v12 != v62)
  {
    do
    {
LABEL_76:
      free(*((void **)v12 + 4));
      v47 = (char *)*((_QWORD *)v12 + 1);
      if (v47)
      {
        do
        {
          v48 = v47;
          v47 = *(char **)v47;
        }
        while (v47);
      }
      else
      {
        do
        {
          v48 = (char *)*((_QWORD *)v12 + 2);
          v14 = *(_QWORD *)v48 == (_QWORD)v12;
          v12 = v48;
        }
        while (!v14);
      }
      v12 = v48;
    }
    while (v48 != v13);
  }
LABEL_70:
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((_QWORD **)this + 19));
  *((_QWORD *)this + 19) = 0;
  *((_QWORD *)this + 20) = 0;
  *((_QWORD *)this + 18) = v13;
  *((_QWORD *)this + 23) = 0;
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(v64);
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((_QWORD **)this + 19));
  v43 = (void *)*((_QWORD *)this + 15);
  if (v43)
  {
    *((_QWORD *)this + 16) = v43;
    operator delete(v43);
  }
  v44 = *((_QWORD *)this + 12);
  if (v44)
  {
    v45 = *((_QWORD *)this + 13);
    v46 = (void *)*((_QWORD *)this + 12);
    if (v45 == v44)
      goto LABEL_118;
    while (1)
    {
      v49 = *(_QWORD *)(v45 - 24);
      if (v49)
        break;
LABEL_115:
      if (*(char *)(v45 - 25) < 0)
        operator delete(*(void **)(v45 - 48));
      v45 -= 64;
      if (v45 == v44)
      {
        v46 = (void *)*((_QWORD *)this + 12);
LABEL_118:
        *((_QWORD *)this + 13) = v44;
        operator delete(v46);
        goto LABEL_119;
      }
    }
    v50 = *(_QWORD *)(v45 - 16);
    v51 = *(void **)(v45 - 24);
    if (v50 == v49)
    {
LABEL_114:
      *(_QWORD *)(v45 - 16) = v49;
      operator delete(v51);
      goto LABEL_115;
    }
    while (1)
    {
      v53 = *(_QWORD *)(v50 - 24);
      if (!v53)
        goto LABEL_102;
      v54 = *(_QWORD *)(v50 - 16);
      v55 = *(void **)(v50 - 24);
      if (v54 != v53)
        break;
LABEL_101:
      *(_QWORD *)(v50 - 16) = v53;
      operator delete(v55);
LABEL_102:
      v58 = *(_QWORD *)(v50 - 48);
      if (!v58)
        goto LABEL_88;
      v59 = *(_QWORD *)(v50 - 40);
      v52 = *(void **)(v50 - 48);
      if (v59 != v58)
      {
        while (1)
        {
          if (*(char *)(v59 - 1) < 0)
            operator delete(*(void **)(v59 - 24));
          v60 = *(_QWORD **)(v59 - 32);
          if ((_QWORD *)(v59 - 56) == v60)
          {
            v60 = (_QWORD *)(v59 - 56);
            v61 = 4;
          }
          else
          {
            if (!v60)
              goto LABEL_107;
            v61 = 5;
          }
          (*(void (**)(void))(*v60 + 8 * v61))();
LABEL_107:
          v59 -= 64;
          if (v59 == v58)
          {
            v52 = *(void **)(v50 - 48);
            break;
          }
        }
      }
      *(_QWORD *)(v50 - 40) = v58;
      operator delete(v52);
LABEL_88:
      ecs2::ModuleBucketExecutionDescriptor::~ModuleBucketExecutionDescriptor((ecs2::ModuleBucketExecutionDescriptor *)(v50 - 120));
      v50 -= 128;
      if (v50 == v49)
      {
        v51 = *(void **)(v45 - 24);
        goto LABEL_114;
      }
    }
    while (1)
    {
      if (*(char *)(v54 - 1) < 0)
        operator delete(*(void **)(v54 - 24));
      v56 = *(_QWORD **)(v54 - 32);
      if ((_QWORD *)(v54 - 56) == v56)
      {
        v56 = (_QWORD *)(v54 - 56);
        v57 = 4;
      }
      else
      {
        if (!v56)
          goto LABEL_94;
        v57 = 5;
      }
      (*(void (**)(void))(*v56 + 8 * v57))();
LABEL_94:
      v54 -= 64;
      if (v54 == v53)
      {
        v55 = *(void **)(v50 - 24);
        goto LABEL_101;
      }
    }
  }
LABEL_119:
  ecs2::FlowDescriptor::~FlowDescriptor(this);
}

void sub_19FAAAEE8(_Unwind_Exception *a1)
{
  uint64_t v1;
  _QWORD *v2;

  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(v2);
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(_QWORD **)(v1 + 152));
  _Unwind_Resume(a1);
}

void **std::vector<std::function<ecs2::ModuleDescriptor ()(void)>>::~vector[abi:nn180100](void **a1)
{
  char *v2;
  char *v3;
  void *v4;
  char *v5;
  uint64_t v6;
  char *v7;

  v2 = (char *)*a1;
  if (*a1)
  {
    v3 = (char *)a1[1];
    v4 = *a1;
    if (v3 == v2)
    {
LABEL_11:
      a1[1] = v2;
      operator delete(v4);
      return a1;
    }
    while (1)
    {
      v7 = v3 - 32;
      v5 = (char *)*((_QWORD *)v3 - 1);
      if (v3 - 32 == v5)
      {
        v5 = v3 - 32;
        v6 = 4;
      }
      else
      {
        if (!v5)
          goto LABEL_6;
        v6 = 5;
      }
      (*(void (**)(void))(*(_QWORD *)v5 + 8 * v6))();
LABEL_6:
      v3 = v7;
      if (v7 == v2)
      {
        v4 = *a1;
        goto LABEL_11;
      }
    }
  }
  return a1;
}

void gdc::ResourceRequestRouter::~ResourceRequestRouter(gdc::ResourceRequestRouter *this)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  _QWORD *v6;
  uint64_t v7;
  void *v8;
  void *v9;

  v2 = (void *)*((_QWORD *)this + 31);
  if (v2)
  {
    *((_QWORD *)this + 32) = v2;
    operator delete(v2);
  }
  v3 = *((_QWORD *)this + 28);
  if (v3)
  {
    v4 = *((_QWORD *)this + 29);
    v5 = (void *)*((_QWORD *)this + 28);
    if (v4 == v3)
    {
LABEL_13:
      *((_QWORD *)this + 29) = v3;
      operator delete(v5);
      goto LABEL_14;
    }
    while (1)
    {
      v6 = *(_QWORD **)(v4 - 8);
      if ((_QWORD *)(v4 - 32) == v6)
      {
        v6 = (_QWORD *)(v4 - 32);
        v7 = 4;
      }
      else
      {
        if (!v6)
          goto LABEL_8;
        v7 = 5;
      }
      (*(void (**)(void))(*v6 + 8 * v7))();
LABEL_8:
      v4 -= 40;
      if (v4 == v3)
      {
        v5 = (void *)*((_QWORD *)this + 28);
        goto LABEL_13;
      }
    }
  }
LABEL_14:
  v8 = (void *)*((_QWORD *)this + 25);
  if (v8)
  {
    *((_QWORD *)this + 26) = v8;
    operator delete(v8);
  }
  v9 = (void *)*((_QWORD *)this + 22);
  if (v9)
  {
    *((_QWORD *)this + 23) = v9;
    operator delete(v9);
  }
  std::condition_variable::~condition_variable((std::condition_variable *)((char *)this + 112));
  std::condition_variable::~condition_variable((std::condition_variable *)((char *)this + 64));
  std::mutex::~mutex((std::mutex *)this);
}

void geo::linear_map<gdc::TypeInfo,std::shared_ptr<void>,std::equal_to<gdc::TypeInfo>,std::allocator<std::pair<gdc::TypeInfo,std::shared_ptr<void>>>,std::vector<std::pair<gdc::TypeInfo,std::shared_ptr<void>>>>::insert_or_assign(uint64_t a1, _QWORD *a2)
{
  unint64_t v2;
  char *v3;
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  __int128 v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;

  v3 = *(char **)a1;
  v2 = *(_QWORD *)(a1 + 8);
  if (*(_QWORD *)a1 != v2)
  {
    while (*a2 != *(_QWORD *)v3)
    {
      v3 += 40;
      if (v3 == (char *)v2)
        goto LABEL_14;
    }
  }
  if (v3 == (char *)v2)
  {
LABEL_14:
    if (v2 >= *(_QWORD *)(a1 + 16))
    {
      *(_QWORD *)(a1 + 8) = std::vector<std::pair<gdc::TypeInfo,std::shared_ptr<void>>>::__push_back_slow_path<std::pair<gdc::TypeInfo,std::shared_ptr<void>> const&>((char **)a1, (uint64_t)a2);
    }
    else
    {
      v12 = *(_OWORD *)a2;
      *(_QWORD *)(v2 + 16) = a2[2];
      *(_OWORD *)v2 = v12;
      v13 = a2[4];
      *(_QWORD *)(v2 + 24) = a2[3];
      *(_QWORD *)(v2 + 32) = v13;
      if (v13)
      {
        v14 = (unint64_t *)(v13 + 8);
        do
          v15 = __ldxr(v14);
        while (__stxr(v15 + 1, v14));
      }
      *(_QWORD *)(a1 + 8) = v2 + 40;
    }
  }
  else
  {
    v4 = *(_OWORD *)a2;
    *((_QWORD *)v3 + 2) = a2[2];
    *(_OWORD *)v3 = v4;
    v6 = a2[3];
    v5 = a2[4];
    if (v5)
    {
      v7 = (unint64_t *)(v5 + 8);
      do
        v8 = __ldxr(v7);
      while (__stxr(v8 + 1, v7));
    }
    v9 = (std::__shared_weak_count *)*((_QWORD *)v3 + 4);
    *((_QWORD *)v3 + 3) = v6;
    *((_QWORD *)v3 + 4) = v5;
    if (v9)
    {
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      do
        v11 = __ldaxr(p_shared_owners);
      while (__stlxr(v11 - 1, p_shared_owners));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
  }
}

gdc::ResourceRequestRouter **std::unique_ptr<gdc::ResourceRequestRouter>::~unique_ptr[abi:nn180100](gdc::ResourceRequestRouter **a1)
{
  gdc::ResourceRequestRouter *v2;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    gdc::ResourceRequestRouter::~ResourceRequestRouter(v2);
    MEMORY[0x1A1AF4E00]();
  }
  return a1;
}

md::FeatureFlagProvider **std::unique_ptr<md::FeatureFlagProvider>::~unique_ptr[abi:nn180100](md::FeatureFlagProvider **a1)
{
  md::FeatureFlagProvider *v2;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    md::FeatureFlagProvider::~FeatureFlagProvider(v2);
    MEMORY[0x1A1AF4E00]();
  }
  return a1;
}

void md::MapEngineSignals::ThreadSafeSignal<unsigned long>::~ThreadSafeSignal(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t i;
  _QWORD *v5;
  void *v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;

  std::mutex::lock((std::mutex *)a1);
  if (!*(_QWORD *)(a1 + 96))
    goto LABEL_7;
  v2 = *(_QWORD **)(a1 + 88);
  if (v2)
  {
    do
    {
      v12 = (_QWORD *)*v2;
      v10 = (_QWORD *)v2[6];
      if (v10 == v2 + 3)
      {
        v10 = v2 + 3;
        v11 = 4;
      }
      else
      {
        if (!v10)
          goto LABEL_19;
        v11 = 5;
      }
      (*(void (**)(void))(*v10 + 8 * v11))();
LABEL_19:
      operator delete(v2);
      v2 = v12;
    }
    while (v12);
  }
  *(_QWORD *)(a1 + 88) = 0;
  v3 = *(_QWORD *)(a1 + 80);
  if (v3)
  {
    for (i = 0; i != v3; ++i)
      *(_QWORD *)(*(_QWORD *)(a1 + 72) + 8 * i) = 0;
  }
  *(_QWORD *)(a1 + 96) = 0;
LABEL_7:
  std::mutex::unlock((std::mutex *)a1);
  v5 = *(_QWORD **)(a1 + 88);
  if (v5)
  {
    do
    {
      v9 = (_QWORD *)*v5;
      v7 = (_QWORD *)v5[6];
      if (v7 == v5 + 3)
      {
        v7 = v5 + 3;
        v8 = 4;
      }
      else
      {
        if (!v7)
          goto LABEL_13;
        v8 = 5;
      }
      (*(void (**)(void))(*v7 + 8 * v8))();
LABEL_13:
      operator delete(v5);
      v5 = v9;
    }
    while (v9);
  }
  v6 = *(void **)(a1 + 72);
  *(_QWORD *)(a1 + 72) = 0;
  if (v6)
    operator delete(v6);
  std::mutex::~mutex((std::mutex *)a1);
}

void sub_19FAAB304(_Unwind_Exception *a1)
{
  std::mutex *v1;

  gdc::Signal<unsigned long>::~Signal((uint64_t)&v1[1]);
  std::mutex::~mutex(v1);
  _Unwind_Resume(a1);
}

uint64_t *std::unique_ptr<md::MapEngineSignals>::~unique_ptr[abi:nn180100](uint64_t *a1)
{
  uint64_t v2;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    md::MapEngineSignals::ThreadSafeSignal<unsigned long>::~ThreadSafeSignal(v2);
    MEMORY[0x1A1AF4E00]();
  }
  return a1;
}

void md::VKMRenderResourcesStore::~VKMRenderResourcesStore(md::VKMRenderResourcesStore *this)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  _QWORD *v19;
  _QWORD *v20;
  void *v21;
  _QWORD *v22;
  _QWORD *v23;
  void *v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  _QWORD *v33;
  _QWORD *v34;
  void *v35;
  _QWORD *v36;
  _QWORD *v37;
  void *v38;
  void *v39;
  void *v40;
  void *v41;
  void *v42;
  _QWORD *v43;
  _QWORD *v44;
  void *v45;
  _QWORD *v46;
  _QWORD *v47;
  void *v48;
  void *v49;
  void *v50;
  void *v51;
  void *v52;
  _QWORD *v53;
  _QWORD *v54;
  void *v55;
  _QWORD *v56;
  _QWORD *v57;
  void *v58;
  void *v59;
  void *v60;
  void *v61;
  void *v62;
  _QWORD *v63;
  _QWORD *v64;
  void *v65;
  _QWORD *v66;
  _QWORD *v67;
  void *v68;
  void *v69;
  void *v70;
  void *v71;
  void *v72;
  _QWORD *v73;
  _QWORD *v74;
  void *v75;
  _QWORD *v76;
  _QWORD *v77;
  void *v78;
  void *v79;
  void *v80;
  void *v81;
  void *v82;
  _QWORD *v83;
  _QWORD *v84;
  void *v85;
  _QWORD *v86;
  _QWORD *v87;
  void *v88;
  void *v89;
  void *v90;
  void *v91;
  void *v92;
  _QWORD *v93;
  _QWORD *v94;
  void *v95;
  _QWORD *v96;
  _QWORD *v97;
  void *v98;
  void *v99;
  void *v100;
  void *v101;
  void *v102;
  _QWORD *v103;
  _QWORD *v104;
  void *v105;
  _QWORD *v106;
  _QWORD *v107;
  void *v108;
  void *v109;
  void *v110;
  void *v111;
  void *v112;
  _QWORD *v113;
  _QWORD *v114;
  void *v115;
  _QWORD *v116;
  _QWORD *v117;
  void *v118;
  void *v119;
  void *v120;
  void *v121;
  void *v122;
  _QWORD *v123;
  _QWORD *v124;
  void *v125;
  _QWORD *v126;
  _QWORD *v127;
  void *v128;
  _QWORD *v129;
  _QWORD *v130;
  void *v131;
  _QWORD *v132;
  _QWORD *v133;
  void *v134;
  _QWORD *v135;
  void *v136;
  void *v137;
  uint64_t v138;
  uint64_t v139;
  void *v140;
  _QWORD *v141;
  uint64_t v142;
  std::__shared_weak_count *v143;
  unint64_t *v144;
  unint64_t v145;
  void *v146;
  void *v147;
  _QWORD *v148;
  _QWORD *v149;
  void *v150;
  _QWORD *v151;
  _QWORD *v152;
  void *v153;
  _QWORD *v154;
  _QWORD *v155;
  void *v156;
  _QWORD *v157;
  _QWORD *v158;
  void *v159;
  _QWORD *v160;
  void *v161;
  void *v162;
  uint64_t v163;
  uint64_t v164;
  void *v165;
  _QWORD *v166;
  uint64_t v167;
  std::__shared_weak_count *v168;
  unint64_t *v169;
  unint64_t v170;
  void *v171;
  void *v172;
  _QWORD *v173;
  _QWORD *v174;
  void *v175;
  _QWORD *v176;
  _QWORD *v177;
  void *v178;
  _QWORD *v179;
  _QWORD *v180;
  void *v181;
  _QWORD *v182;
  _QWORD *v183;
  void *v184;
  _QWORD *v185;
  void *v186;
  void *v187;
  uint64_t v188;
  uint64_t v189;
  void *v190;
  _QWORD *v191;
  uint64_t v192;
  std::__shared_weak_count *v193;
  unint64_t *v194;
  unint64_t v195;
  void *v196;
  void *v197;
  _QWORD *v198;
  _QWORD *v199;
  void *v200;
  _QWORD *v201;
  _QWORD *v202;
  void *v203;
  _QWORD *v204;
  _QWORD *v205;
  void *v206;
  _QWORD *v207;
  _QWORD *v208;
  void *v209;
  _QWORD *v210;
  void *v211;
  void *v212;
  uint64_t v213;
  uint64_t v214;
  void *v215;
  _QWORD *v216;
  uint64_t v217;
  std::__shared_weak_count *v218;
  unint64_t *v219;
  unint64_t v220;
  void *v221;
  void *v222;
  _QWORD *v223;
  _QWORD *v224;
  void *v225;
  _QWORD *v226;
  _QWORD *v227;
  void *v228;
  _QWORD *v229;
  _QWORD *v230;
  void *v231;
  _QWORD *v232;
  _QWORD *v233;
  void *v234;
  _QWORD *v235;
  void *v236;
  void *v237;
  uint64_t v238;
  uint64_t v239;
  void *v240;
  _QWORD *v241;
  uint64_t v242;
  std::__shared_weak_count *v243;
  unint64_t *v244;
  unint64_t v245;
  void *v246;
  void *v247;
  _QWORD *v248;
  _QWORD *v249;
  void *v250;
  _QWORD *v251;
  _QWORD *v252;
  void *v253;
  void *v254;
  uint64_t v255;
  uint64_t v256;
  void *v257;
  std::__shared_weak_count *v258;
  unint64_t *v259;
  unint64_t v260;
  void *v261;
  void *v262;
  _QWORD *v263;
  _QWORD *v264;
  void *v265;
  _QWORD *v266;
  _QWORD *v267;
  void *v268;
  _QWORD *v269;
  _QWORD *v270;
  void *v271;
  _QWORD *v272;
  _QWORD *v273;
  void *v274;
  _QWORD *v275;
  void *v276;
  void *v277;
  uint64_t v278;
  uint64_t v279;
  void *v280;
  _QWORD *v281;
  uint64_t v282;
  std::__shared_weak_count *v283;
  unint64_t *v284;
  unint64_t v285;
  void *v286;
  void *v287;
  _QWORD *v288;
  _QWORD *v289;
  void *v290;
  _QWORD *v291;
  _QWORD *v292;
  void *v293;
  _QWORD *v294;
  _QWORD *v295;
  void *v296;
  _QWORD *v297;
  _QWORD *v298;
  void *v299;
  _QWORD *v300;
  void *v301;
  void *v302;
  uint64_t v303;
  uint64_t v304;
  void *v305;
  _QWORD *v306;
  uint64_t v307;
  std::__shared_weak_count *v308;
  unint64_t *v309;
  unint64_t v310;
  void *v311;
  void *v312;
  _QWORD *v313;
  _QWORD *v314;
  void *v315;
  _QWORD *v316;
  _QWORD *v317;
  void *v318;
  _QWORD *v319;
  _QWORD *v320;
  void *v321;
  _QWORD *v322;
  _QWORD *v323;
  void *v324;
  _QWORD *v325;
  void *v326;
  void *v327;
  uint64_t v328;
  uint64_t v329;
  void *v330;
  _QWORD *v331;
  uint64_t v332;
  std::__shared_weak_count *v333;
  unint64_t *v334;
  unint64_t v335;
  void *v336;
  void *v337;
  _QWORD *v338;
  _QWORD *v339;
  void *v340;
  _QWORD *v341;
  _QWORD *v342;
  void *v343;
  void *v344;
  uint64_t v345;
  uint64_t v346;
  void *v347;
  std::__shared_weak_count *v348;
  unint64_t *v349;
  unint64_t v350;
  void *v351;
  void *v352;
  _QWORD *v353;
  _QWORD *v354;
  void *v355;
  _QWORD *v356;
  _QWORD *v357;
  void *v358;
  _QWORD *v359;
  void *v360;
  void *v361;
  uint64_t v362;
  uint64_t v363;
  void *v364;
  _QWORD *v365;
  uint64_t v366;
  std::__shared_weak_count *v367;
  unint64_t *v368;
  unint64_t v369;
  void *v370;
  void *v371;
  _QWORD *v372;
  _QWORD *v373;
  void *v374;
  _QWORD *v375;
  _QWORD *v376;
  void *v377;
  void *v378;
  uint64_t v379;
  uint64_t v380;
  void *v381;
  std::__shared_weak_count *v382;
  unint64_t *v383;
  unint64_t v384;
  void *v385;
  void *v386;
  _QWORD *v387;
  _QWORD *v388;
  void *v389;
  _QWORD *v390;
  _QWORD *v391;
  void *v392;
  _QWORD *v393;
  void *v394;
  void *v395;
  uint64_t v396;
  uint64_t v397;
  void *v398;
  _QWORD *v399;
  uint64_t v400;
  std::__shared_weak_count *v401;
  unint64_t *v402;
  unint64_t v403;
  void *v404;
  void *v405;
  _QWORD *v406;
  _QWORD *v407;
  void *v408;
  _QWORD *v409;
  _QWORD *v410;
  void *v411;
  _QWORD *v412;
  void *v413;
  void *v414;
  uint64_t v415;
  uint64_t v416;
  void *v417;
  _QWORD *v418;
  uint64_t v419;
  std::__shared_weak_count *v420;
  unint64_t *v421;
  unint64_t v422;
  void *v423;
  void *v424;
  _QWORD *v425;
  _QWORD *v426;
  void *v427;
  _QWORD *v428;
  _QWORD *v429;
  void *v430;
  _QWORD *v431;
  void *v432;
  void *v433;
  uint64_t v434;
  uint64_t v435;
  void *v436;
  _QWORD *v437;
  uint64_t v438;
  std::__shared_weak_count *v439;
  unint64_t *v440;
  unint64_t v441;
  void *v442;
  void *v443;
  _QWORD *v444;
  _QWORD *v445;
  void *v446;
  _QWORD *v447;
  _QWORD *v448;
  void *v449;
  _QWORD *v450;
  void *v451;
  void *v452;
  uint64_t v453;
  uint64_t v454;
  void *v455;
  _QWORD *v456;
  uint64_t v457;
  std::__shared_weak_count *v458;
  unint64_t *v459;
  unint64_t v460;
  void *v461;
  void *v462;
  _QWORD *v463;
  _QWORD *v464;
  void *v465;
  _QWORD *v466;
  _QWORD *v467;
  void *v468;
  _QWORD *v469;
  void *v470;
  void *v471;
  uint64_t v472;
  uint64_t v473;
  void *v474;
  _QWORD *v475;
  uint64_t v476;
  std::__shared_weak_count *v477;
  unint64_t *v478;
  unint64_t v479;
  void *v480;
  void *v481;
  _QWORD *v482;
  _QWORD *v483;
  void *v484;
  _QWORD *v485;
  _QWORD *v486;
  void *v487;
  _QWORD *v488;
  void *v489;
  void *v490;
  uint64_t v491;
  uint64_t v492;
  void *v493;
  _QWORD *v494;
  uint64_t v495;
  std::__shared_weak_count *v496;
  unint64_t *v497;
  unint64_t v498;
  void *v499;
  void *v500;
  _QWORD *v501;
  _QWORD *v502;
  void *v503;
  _QWORD *v504;
  _QWORD *v505;
  void *v506;
  void *v507;
  uint64_t v508;
  uint64_t v509;
  void *v510;
  std::__shared_weak_count *v511;
  unint64_t *v512;
  unint64_t v513;
  void *v514;
  void *v515;
  _QWORD *v516;
  _QWORD *v517;
  void *v518;
  _QWORD *v519;
  _QWORD *v520;
  void *v521;
  void *v522;
  uint64_t v523;
  uint64_t v524;
  void *v525;
  std::__shared_weak_count *v526;
  unint64_t *v527;
  unint64_t v528;
  void *v529;
  void *v530;
  _QWORD *v531;
  _QWORD *v532;
  void *v533;
  _QWORD *v534;
  _QWORD *v535;
  void *v536;
  void *v537;
  uint64_t v538;
  uint64_t v539;
  void *v540;
  std::__shared_weak_count *v541;
  unint64_t *v542;
  unint64_t v543;
  void *v544;
  void *v545;
  _QWORD *v546;
  _QWORD *v547;
  void *v548;
  _QWORD *v549;
  _QWORD *v550;
  void *v551;
  void *v552;
  uint64_t v553;
  uint64_t v554;
  void *v555;
  std::__shared_weak_count *v556;
  unint64_t *v557;
  unint64_t v558;
  void *v559;
  void *v560;
  _QWORD *v561;
  _QWORD *v562;
  void *v563;
  _QWORD *v564;
  _QWORD *v565;
  void *v566;
  void *v567;
  uint64_t v568;
  uint64_t v569;
  void *v570;
  std::__shared_weak_count *v571;
  unint64_t *v572;
  unint64_t v573;
  void *v574;
  void *v575;
  _QWORD *v576;
  _QWORD *v577;
  void *v578;
  _QWORD *v579;
  _QWORD *v580;
  void *v581;
  _QWORD *v582;
  _QWORD *v583;
  void *v584;
  _QWORD *v585;
  _QWORD *v586;
  void *v587;
  _QWORD *v588;
  void *v589;
  void *v590;
  uint64_t v591;
  uint64_t v592;
  void *v593;
  _QWORD *v594;
  uint64_t v595;
  std::__shared_weak_count *v596;
  unint64_t *v597;
  unint64_t v598;
  void *v599;
  void *v600;
  _QWORD *v601;
  _QWORD *v602;
  void *v603;
  _QWORD *v604;
  _QWORD *v605;
  void *v606;
  _QWORD *v607;
  _QWORD *v608;
  void *v609;
  _QWORD *v610;
  _QWORD *v611;
  void *v612;
  _QWORD *v613;
  void *v614;
  void *v615;
  void *v616;
  void *v617;
  void *v618;
  _QWORD *v619;
  _QWORD *v620;
  void *v621;
  _QWORD *v622;
  _QWORD *v623;
  void *v624;
  _QWORD *v625;
  _QWORD *v626;
  void *v627;
  _QWORD *v628;
  _QWORD *v629;
  void *v630;
  _QWORD *v631;
  void *v632;
  void *v633;
  uint64_t v634;
  uint64_t v635;
  void *v636;
  _QWORD *v637;
  uint64_t v638;
  _QWORD *v639;
  uint64_t v640;
  std::__shared_weak_count *v641;
  unint64_t *v642;
  unint64_t v643;
  void *v644;
  void *v645;
  _QWORD *v646;
  _QWORD *v647;
  void *v648;
  _QWORD *v649;
  _QWORD *v650;
  void *v651;
  _QWORD *v652;
  _QWORD *v653;
  void *v654;
  _QWORD *v655;
  _QWORD *v656;
  void *v657;
  _QWORD *v658;
  void *v659;
  void *v660;
  void *v661;
  void *v662;
  void *v663;
  _QWORD *v664;
  _QWORD *v665;
  void *v666;
  _QWORD *v667;
  _QWORD *v668;
  void *v669;
  _QWORD *v670;
  _QWORD *v671;
  void *v672;
  _QWORD *v673;
  _QWORD *v674;
  void *v675;
  _QWORD *v676;
  void *v677;
  void *v678;
  uint64_t v679;
  uint64_t v680;
  void *v681;
  _QWORD *v682;
  uint64_t v683;
  _QWORD *v684;
  uint64_t v685;
  std::__shared_weak_count *v686;
  unint64_t *v687;
  unint64_t v688;
  void *v689;
  void *v690;
  _QWORD *v691;
  _QWORD *v692;
  void *v693;
  _QWORD *v694;
  _QWORD *v695;
  void *v696;
  _QWORD *v697;
  _QWORD *v698;
  void *v699;
  _QWORD *v700;
  _QWORD *v701;
  void *v702;
  _QWORD *v703;
  void *v704;
  void *v705;
  void *v706;
  void *v707;
  void *v708;
  _QWORD *v709;
  _QWORD *v710;
  void *v711;
  _QWORD *v712;
  _QWORD *v713;
  void *v714;
  _QWORD *v715;
  _QWORD *v716;
  void *v717;
  _QWORD *v718;
  _QWORD *v719;
  void *v720;
  _QWORD *v721;
  void *v722;
  void *v723;
  uint64_t v724;
  uint64_t v725;
  void *v726;
  _QWORD *v727;
  uint64_t v728;
  _QWORD *v729;
  uint64_t v730;
  std::__shared_weak_count *v731;
  unint64_t *v732;
  unint64_t v733;
  void *v734;
  void *v735;
  _QWORD *v736;
  _QWORD *v737;
  void *v738;
  _QWORD *v739;
  _QWORD *v740;
  void *v741;
  _QWORD *v742;
  _QWORD *v743;
  void *v744;
  _QWORD *v745;
  _QWORD *v746;
  void *v747;
  _QWORD *v748;
  void *v749;
  void *v750;
  void *v751;
  void *v752;
  void *v753;
  _QWORD *v754;
  _QWORD *v755;
  void *v756;
  _QWORD *v757;
  _QWORD *v758;
  void *v759;
  _QWORD *v760;
  void *v761;
  void *v762;
  void *v763;
  void *v764;
  void *v765;
  _QWORD *v766;
  _QWORD *v767;
  void *v768;
  _QWORD *v769;
  _QWORD *v770;
  void *v771;
  void *v772;
  uint64_t v773;
  uint64_t v774;
  void *v775;
  _QWORD *v776;
  uint64_t v777;
  _QWORD *v778;
  _QWORD *v779;
  _QWORD *v780;
  void *v781;
  std::__shared_weak_count *v782;
  unint64_t *v783;
  unint64_t v784;
  void *v785;
  void *v786;
  _QWORD *v787;
  _QWORD *v788;
  void *v789;
  _QWORD *v790;
  _QWORD *v791;
  void *v792;
  void *v793;
  void *v794;
  void *v795;
  void *v796;
  _QWORD *v797;
  _QWORD *v798;
  void *v799;
  _QWORD *v800;
  _QWORD *v801;
  void *v802;
  _QWORD *v803;
  uint64_t v804;
  uint64_t **v805;
  uint64_t **v806;
  uint64_t *v807;
  unint64_t v808;
  uint64_t *v809;
  unint64_t v810;
  char *v811;
  char *v812;
  BOOL v813;
  uint64_t v815;
  unint64_t v816;
  uint64_t v817;
  void (***v818)(_QWORD);
  uint64_t *v819;
  uint64_t **v820;
  uint64_t *v821;
  uint64_t **v822;
  unint64_t v823;
  uint64_t **v824;
  char *v825;
  char *v826;
  _QWORD *v827;
  void *v828;
  void *v829;
  _QWORD *v830;
  _QWORD *v831;
  void *v832;
  _QWORD *v833;
  _QWORD *v834;
  void *v835;
  _QWORD *v836;
  _QWORD *v837;
  void *v838;
  char *v839;
  char *v840;
  _QWORD *v841;
  void *v842;
  uint64_t **v843;
  uint64_t *v844;
  uint64_t v845;

  v2 = (_QWORD *)*((_QWORD *)this + 1330);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = (void *)*((_QWORD *)this + 1328);
  *((_QWORD *)this + 1328) = 0;
  if (v4)
    operator delete(v4);
  v5 = (std::__shared_weak_count *)*((_QWORD *)this + 1327);
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  v8 = (std::__shared_weak_count *)*((_QWORD *)this + 1324);
  if (v8)
  {
    v9 = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  v11 = *((_QWORD *)this + 1322);
  *((_QWORD *)this + 1322) = 0;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  v12 = (_QWORD *)*((_QWORD *)this + 1309);
  if (v12)
  {
    do
    {
      v13 = (_QWORD *)*v12;
      operator delete(v12);
      v12 = v13;
    }
    while (v13);
  }
  v14 = (void *)*((_QWORD *)this + 1307);
  *((_QWORD *)this + 1307) = 0;
  if (v14)
    operator delete(v14);
  v15 = (void *)*((_QWORD *)this + 1304);
  if (v15)
  {
    *((_QWORD *)this + 1305) = v15;
    operator delete(v15);
  }
  v16 = (void *)*((_QWORD *)this + 1301);
  if (v16)
  {
    *((_QWORD *)this + 1302) = v16;
    operator delete(v16);
  }
  v17 = (void *)*((_QWORD *)this + 1298);
  if (v17)
  {
    *((_QWORD *)this + 1299) = v17;
    operator delete(v17);
  }
  v18 = (void *)*((_QWORD *)this + 1295);
  if (v18)
  {
    *((_QWORD *)this + 1296) = v18;
    operator delete(v18);
  }
  v19 = (_QWORD *)*((_QWORD *)this + 1292);
  if (v19)
  {
    do
    {
      v20 = (_QWORD *)*v19;
      operator delete(v19);
      v19 = v20;
    }
    while (v20);
  }
  v21 = (void *)*((_QWORD *)this + 1290);
  *((_QWORD *)this + 1290) = 0;
  if (v21)
    operator delete(v21);
  v22 = (_QWORD *)*((_QWORD *)this + 1287);
  if (v22)
  {
    do
    {
      v23 = (_QWORD *)*v22;
      operator delete(v22);
      v22 = v23;
    }
    while (v23);
  }
  v24 = (void *)*((_QWORD *)this + 1285);
  *((_QWORD *)this + 1285) = 0;
  if (v24)
    operator delete(v24);
  v25 = (void *)*((_QWORD *)this + 1282);
  if (v25)
  {
    *((_QWORD *)this + 1283) = v25;
    operator delete(v25);
  }
  v26 = *((_QWORD *)this + 1279);
  if (v26)
  {
    v27 = *((_QWORD *)this + 1280);
    v28 = (void *)*((_QWORD *)this + 1279);
    if (v27 != v26)
    {
      do
      {
        v29 = *(void **)(v27 - 24);
        if (v29)
        {
          *(_QWORD *)(v27 - 16) = v29;
          operator delete(v29);
        }
        v30 = *(void **)(v27 - 48);
        if (v30)
        {
          *(_QWORD *)(v27 - 40) = v30;
          operator delete(v30);
        }
        v27 -= 56;
      }
      while (v27 != v26);
      v28 = (void *)*((_QWORD *)this + 1279);
    }
    *((_QWORD *)this + 1280) = v26;
    operator delete(v28);
  }
  v31 = (void *)*((_QWORD *)this + 1276);
  if (v31)
  {
    *((_QWORD *)this + 1277) = v31;
    operator delete(v31);
  }
  v32 = (void *)*((_QWORD *)this + 1273);
  if (v32)
  {
    *((_QWORD *)this + 1274) = v32;
    operator delete(v32);
  }
  v33 = (_QWORD *)*((_QWORD *)this + 1270);
  if (v33)
  {
    do
    {
      v34 = (_QWORD *)*v33;
      operator delete(v33);
      v33 = v34;
    }
    while (v34);
  }
  v35 = (void *)*((_QWORD *)this + 1268);
  *((_QWORD *)this + 1268) = 0;
  if (v35)
    operator delete(v35);
  v36 = (_QWORD *)*((_QWORD *)this + 1265);
  if (v36)
  {
    do
    {
      v37 = (_QWORD *)*v36;
      operator delete(v36);
      v36 = v37;
    }
    while (v37);
  }
  v38 = (void *)*((_QWORD *)this + 1263);
  *((_QWORD *)this + 1263) = 0;
  if (v38)
    operator delete(v38);
  v39 = (void *)*((_QWORD *)this + 1260);
  if (v39)
  {
    *((_QWORD *)this + 1261) = v39;
    operator delete(v39);
  }
  v40 = (void *)*((_QWORD *)this + 1257);
  if (v40)
  {
    *((_QWORD *)this + 1258) = v40;
    operator delete(v40);
  }
  v41 = (void *)*((_QWORD *)this + 1254);
  if (v41)
  {
    *((_QWORD *)this + 1255) = v41;
    operator delete(v41);
  }
  v42 = (void *)*((_QWORD *)this + 1251);
  if (v42)
  {
    *((_QWORD *)this + 1252) = v42;
    operator delete(v42);
  }
  v43 = (_QWORD *)*((_QWORD *)this + 1248);
  if (v43)
  {
    do
    {
      v44 = (_QWORD *)*v43;
      operator delete(v43);
      v43 = v44;
    }
    while (v44);
  }
  v45 = (void *)*((_QWORD *)this + 1246);
  *((_QWORD *)this + 1246) = 0;
  if (v45)
    operator delete(v45);
  v46 = (_QWORD *)*((_QWORD *)this + 1243);
  if (v46)
  {
    do
    {
      v47 = (_QWORD *)*v46;
      operator delete(v46);
      v46 = v47;
    }
    while (v47);
  }
  v48 = (void *)*((_QWORD *)this + 1241);
  *((_QWORD *)this + 1241) = 0;
  if (v48)
    operator delete(v48);
  v49 = (void *)*((_QWORD *)this + 1238);
  if (v49)
  {
    *((_QWORD *)this + 1239) = v49;
    operator delete(v49);
  }
  v50 = (void *)*((_QWORD *)this + 1235);
  if (v50)
  {
    *((_QWORD *)this + 1236) = v50;
    operator delete(v50);
  }
  v51 = (void *)*((_QWORD *)this + 1232);
  if (v51)
  {
    *((_QWORD *)this + 1233) = v51;
    operator delete(v51);
  }
  v52 = (void *)*((_QWORD *)this + 1229);
  if (v52)
  {
    *((_QWORD *)this + 1230) = v52;
    operator delete(v52);
  }
  v53 = (_QWORD *)*((_QWORD *)this + 1226);
  if (v53)
  {
    do
    {
      v54 = (_QWORD *)*v53;
      operator delete(v53);
      v53 = v54;
    }
    while (v54);
  }
  v55 = (void *)*((_QWORD *)this + 1224);
  *((_QWORD *)this + 1224) = 0;
  if (v55)
    operator delete(v55);
  v56 = (_QWORD *)*((_QWORD *)this + 1221);
  if (v56)
  {
    do
    {
      v57 = (_QWORD *)*v56;
      operator delete(v56);
      v56 = v57;
    }
    while (v57);
  }
  v58 = (void *)*((_QWORD *)this + 1219);
  *((_QWORD *)this + 1219) = 0;
  if (v58)
    operator delete(v58);
  v59 = (void *)*((_QWORD *)this + 1216);
  if (v59)
  {
    *((_QWORD *)this + 1217) = v59;
    operator delete(v59);
  }
  v60 = (void *)*((_QWORD *)this + 1213);
  if (v60)
  {
    *((_QWORD *)this + 1214) = v60;
    operator delete(v60);
  }
  v61 = (void *)*((_QWORD *)this + 1210);
  if (v61)
  {
    *((_QWORD *)this + 1211) = v61;
    operator delete(v61);
  }
  v62 = (void *)*((_QWORD *)this + 1207);
  if (v62)
  {
    *((_QWORD *)this + 1208) = v62;
    operator delete(v62);
  }
  v63 = (_QWORD *)*((_QWORD *)this + 1204);
  if (v63)
  {
    do
    {
      v64 = (_QWORD *)*v63;
      operator delete(v63);
      v63 = v64;
    }
    while (v64);
  }
  v65 = (void *)*((_QWORD *)this + 1202);
  *((_QWORD *)this + 1202) = 0;
  if (v65)
    operator delete(v65);
  v66 = (_QWORD *)*((_QWORD *)this + 1199);
  if (v66)
  {
    do
    {
      v67 = (_QWORD *)*v66;
      operator delete(v66);
      v66 = v67;
    }
    while (v67);
  }
  v68 = (void *)*((_QWORD *)this + 1197);
  *((_QWORD *)this + 1197) = 0;
  if (v68)
    operator delete(v68);
  v69 = (void *)*((_QWORD *)this + 1194);
  if (v69)
  {
    *((_QWORD *)this + 1195) = v69;
    operator delete(v69);
  }
  v70 = (void *)*((_QWORD *)this + 1191);
  if (v70)
  {
    *((_QWORD *)this + 1192) = v70;
    operator delete(v70);
  }
  v71 = (void *)*((_QWORD *)this + 1188);
  if (v71)
  {
    *((_QWORD *)this + 1189) = v71;
    operator delete(v71);
  }
  v72 = (void *)*((_QWORD *)this + 1185);
  if (v72)
  {
    *((_QWORD *)this + 1186) = v72;
    operator delete(v72);
  }
  v73 = (_QWORD *)*((_QWORD *)this + 1182);
  if (v73)
  {
    do
    {
      v74 = (_QWORD *)*v73;
      operator delete(v73);
      v73 = v74;
    }
    while (v74);
  }
  v75 = (void *)*((_QWORD *)this + 1180);
  *((_QWORD *)this + 1180) = 0;
  if (v75)
    operator delete(v75);
  v76 = (_QWORD *)*((_QWORD *)this + 1177);
  if (v76)
  {
    do
    {
      v77 = (_QWORD *)*v76;
      operator delete(v76);
      v76 = v77;
    }
    while (v77);
  }
  v78 = (void *)*((_QWORD *)this + 1175);
  *((_QWORD *)this + 1175) = 0;
  if (v78)
    operator delete(v78);
  v79 = (void *)*((_QWORD *)this + 1172);
  if (v79)
  {
    *((_QWORD *)this + 1173) = v79;
    operator delete(v79);
  }
  v80 = (void *)*((_QWORD *)this + 1169);
  if (v80)
  {
    *((_QWORD *)this + 1170) = v80;
    operator delete(v80);
  }
  v81 = (void *)*((_QWORD *)this + 1166);
  if (v81)
  {
    *((_QWORD *)this + 1167) = v81;
    operator delete(v81);
  }
  v82 = (void *)*((_QWORD *)this + 1163);
  if (v82)
  {
    *((_QWORD *)this + 1164) = v82;
    operator delete(v82);
  }
  v83 = (_QWORD *)*((_QWORD *)this + 1160);
  if (v83)
  {
    do
    {
      v84 = (_QWORD *)*v83;
      operator delete(v83);
      v83 = v84;
    }
    while (v84);
  }
  v85 = (void *)*((_QWORD *)this + 1158);
  *((_QWORD *)this + 1158) = 0;
  if (v85)
    operator delete(v85);
  v86 = (_QWORD *)*((_QWORD *)this + 1155);
  if (v86)
  {
    do
    {
      v87 = (_QWORD *)*v86;
      operator delete(v86);
      v86 = v87;
    }
    while (v87);
  }
  v88 = (void *)*((_QWORD *)this + 1153);
  *((_QWORD *)this + 1153) = 0;
  if (v88)
    operator delete(v88);
  v89 = (void *)*((_QWORD *)this + 1150);
  if (v89)
  {
    *((_QWORD *)this + 1151) = v89;
    operator delete(v89);
  }
  v90 = (void *)*((_QWORD *)this + 1147);
  if (v90)
  {
    *((_QWORD *)this + 1148) = v90;
    operator delete(v90);
  }
  v91 = (void *)*((_QWORD *)this + 1144);
  if (v91)
  {
    *((_QWORD *)this + 1145) = v91;
    operator delete(v91);
  }
  v92 = (void *)*((_QWORD *)this + 1141);
  if (v92)
  {
    *((_QWORD *)this + 1142) = v92;
    operator delete(v92);
  }
  v93 = (_QWORD *)*((_QWORD *)this + 1138);
  if (v93)
  {
    do
    {
      v94 = (_QWORD *)*v93;
      operator delete(v93);
      v93 = v94;
    }
    while (v94);
  }
  v95 = (void *)*((_QWORD *)this + 1136);
  *((_QWORD *)this + 1136) = 0;
  if (v95)
    operator delete(v95);
  v96 = (_QWORD *)*((_QWORD *)this + 1133);
  if (v96)
  {
    do
    {
      v97 = (_QWORD *)*v96;
      operator delete(v96);
      v96 = v97;
    }
    while (v97);
  }
  v98 = (void *)*((_QWORD *)this + 1131);
  *((_QWORD *)this + 1131) = 0;
  if (v98)
    operator delete(v98);
  v99 = (void *)*((_QWORD *)this + 1128);
  if (v99)
  {
    *((_QWORD *)this + 1129) = v99;
    operator delete(v99);
  }
  v100 = (void *)*((_QWORD *)this + 1125);
  if (v100)
  {
    *((_QWORD *)this + 1126) = v100;
    operator delete(v100);
  }
  v101 = (void *)*((_QWORD *)this + 1122);
  if (v101)
  {
    *((_QWORD *)this + 1123) = v101;
    operator delete(v101);
  }
  v102 = (void *)*((_QWORD *)this + 1119);
  if (v102)
  {
    *((_QWORD *)this + 1120) = v102;
    operator delete(v102);
  }
  v103 = (_QWORD *)*((_QWORD *)this + 1116);
  if (v103)
  {
    do
    {
      v104 = (_QWORD *)*v103;
      operator delete(v103);
      v103 = v104;
    }
    while (v104);
  }
  v105 = (void *)*((_QWORD *)this + 1114);
  *((_QWORD *)this + 1114) = 0;
  if (v105)
    operator delete(v105);
  v106 = (_QWORD *)*((_QWORD *)this + 1111);
  if (v106)
  {
    do
    {
      v107 = (_QWORD *)*v106;
      operator delete(v106);
      v106 = v107;
    }
    while (v107);
  }
  v108 = (void *)*((_QWORD *)this + 1109);
  *((_QWORD *)this + 1109) = 0;
  if (v108)
    operator delete(v108);
  v109 = (void *)*((_QWORD *)this + 1106);
  if (v109)
  {
    *((_QWORD *)this + 1107) = v109;
    operator delete(v109);
  }
  v110 = (void *)*((_QWORD *)this + 1103);
  if (v110)
  {
    *((_QWORD *)this + 1104) = v110;
    operator delete(v110);
  }
  v111 = (void *)*((_QWORD *)this + 1100);
  if (v111)
  {
    *((_QWORD *)this + 1101) = v111;
    operator delete(v111);
  }
  v112 = (void *)*((_QWORD *)this + 1097);
  if (v112)
  {
    *((_QWORD *)this + 1098) = v112;
    operator delete(v112);
  }
  v113 = (_QWORD *)*((_QWORD *)this + 1094);
  if (v113)
  {
    do
    {
      v114 = (_QWORD *)*v113;
      operator delete(v113);
      v113 = v114;
    }
    while (v114);
  }
  v115 = (void *)*((_QWORD *)this + 1092);
  *((_QWORD *)this + 1092) = 0;
  if (v115)
    operator delete(v115);
  v116 = (_QWORD *)*((_QWORD *)this + 1089);
  if (v116)
  {
    do
    {
      v117 = (_QWORD *)*v116;
      operator delete(v116);
      v116 = v117;
    }
    while (v117);
  }
  v118 = (void *)*((_QWORD *)this + 1087);
  *((_QWORD *)this + 1087) = 0;
  if (v118)
    operator delete(v118);
  v119 = (void *)*((_QWORD *)this + 1084);
  if (v119)
  {
    *((_QWORD *)this + 1085) = v119;
    operator delete(v119);
  }
  v120 = (void *)*((_QWORD *)this + 1081);
  if (v120)
  {
    *((_QWORD *)this + 1082) = v120;
    operator delete(v120);
  }
  v121 = (void *)*((_QWORD *)this + 1078);
  if (v121)
  {
    *((_QWORD *)this + 1079) = v121;
    operator delete(v121);
  }
  v122 = (void *)*((_QWORD *)this + 1075);
  if (v122)
  {
    *((_QWORD *)this + 1076) = v122;
    operator delete(v122);
  }
  v123 = (_QWORD *)*((_QWORD *)this + 1072);
  if (v123)
  {
    do
    {
      v124 = (_QWORD *)*v123;
      operator delete(v123);
      v123 = v124;
    }
    while (v124);
  }
  v125 = (void *)*((_QWORD *)this + 1070);
  *((_QWORD *)this + 1070) = 0;
  if (v125)
    operator delete(v125);
  v126 = (_QWORD *)*((_QWORD *)this + 1067);
  if (v126)
  {
    do
    {
      v127 = (_QWORD *)*v126;
      operator delete(v126);
      v126 = v127;
    }
    while (v127);
  }
  v128 = (void *)*((_QWORD *)this + 1065);
  *((_QWORD *)this + 1065) = 0;
  if (v128)
    operator delete(v128);
  v129 = (_QWORD *)*((_QWORD *)this + 1062);
  if (v129)
  {
    do
    {
      v130 = (_QWORD *)*v129;
      operator delete(v129);
      v129 = v130;
    }
    while (v130);
  }
  v131 = (void *)*((_QWORD *)this + 1060);
  *((_QWORD *)this + 1060) = 0;
  if (v131)
    operator delete(v131);
  v132 = (_QWORD *)*((_QWORD *)this + 1057);
  if (v132)
  {
    do
    {
      v133 = (_QWORD *)*v132;
      operator delete(v132);
      v132 = v133;
    }
    while (v133);
  }
  v134 = (void *)*((_QWORD *)this + 1055);
  *((_QWORD *)this + 1055) = 0;
  if (v134)
    operator delete(v134);
  v135 = (_QWORD *)*((_QWORD *)this + 1052);
  if (v135)
  {
    do
    {
      v141 = (_QWORD *)*v135;
      v142 = v135[3];
      v135[3] = 0;
      if (v142)
        (*(void (**)(uint64_t))(*(_QWORD *)v142 + 8))(v142);
      operator delete(v135);
      v135 = v141;
    }
    while (v141);
  }
  v136 = (void *)*((_QWORD *)this + 1050);
  *((_QWORD *)this + 1050) = 0;
  if (v136)
    operator delete(v136);
  v137 = (void *)*((_QWORD *)this + 1047);
  if (v137)
  {
    *((_QWORD *)this + 1048) = v137;
    operator delete(v137);
  }
  v138 = *((_QWORD *)this + 1044);
  if (v138)
  {
    v139 = *((_QWORD *)this + 1045);
    v140 = (void *)*((_QWORD *)this + 1044);
    if (v139 != v138)
    {
      do
      {
        v143 = *(std::__shared_weak_count **)(v139 - 8);
        if (v143)
        {
          v144 = (unint64_t *)&v143->__shared_owners_;
          do
            v145 = __ldaxr(v144);
          while (__stlxr(v145 - 1, v144));
          if (!v145)
          {
            ((void (*)(std::__shared_weak_count *))v143->__on_zero_shared)(v143);
            std::__shared_weak_count::__release_weak(v143);
          }
        }
        v139 -= 24;
      }
      while (v139 != v138);
      v140 = (void *)*((_QWORD *)this + 1044);
    }
    *((_QWORD *)this + 1045) = v138;
    operator delete(v140);
  }
  v146 = (void *)*((_QWORD *)this + 1041);
  if (v146)
  {
    *((_QWORD *)this + 1042) = v146;
    operator delete(v146);
  }
  v147 = (void *)*((_QWORD *)this + 1038);
  if (v147)
  {
    *((_QWORD *)this + 1039) = v147;
    operator delete(v147);
  }
  v148 = (_QWORD *)*((_QWORD *)this + 1035);
  if (v148)
  {
    do
    {
      v149 = (_QWORD *)*v148;
      operator delete(v148);
      v148 = v149;
    }
    while (v149);
  }
  v150 = (void *)*((_QWORD *)this + 1033);
  *((_QWORD *)this + 1033) = 0;
  if (v150)
    operator delete(v150);
  v151 = (_QWORD *)*((_QWORD *)this + 1030);
  if (v151)
  {
    do
    {
      v152 = (_QWORD *)*v151;
      operator delete(v151);
      v151 = v152;
    }
    while (v152);
  }
  v153 = (void *)*((_QWORD *)this + 1028);
  *((_QWORD *)this + 1028) = 0;
  if (v153)
    operator delete(v153);
  v154 = (_QWORD *)*((_QWORD *)this + 1025);
  if (v154)
  {
    do
    {
      v155 = (_QWORD *)*v154;
      operator delete(v154);
      v154 = v155;
    }
    while (v155);
  }
  v156 = (void *)*((_QWORD *)this + 1023);
  *((_QWORD *)this + 1023) = 0;
  if (v156)
    operator delete(v156);
  v157 = (_QWORD *)*((_QWORD *)this + 1020);
  if (v157)
  {
    do
    {
      v158 = (_QWORD *)*v157;
      operator delete(v157);
      v157 = v158;
    }
    while (v158);
  }
  v159 = (void *)*((_QWORD *)this + 1018);
  *((_QWORD *)this + 1018) = 0;
  if (v159)
    operator delete(v159);
  v160 = (_QWORD *)*((_QWORD *)this + 1015);
  if (v160)
  {
    do
    {
      v166 = (_QWORD *)*v160;
      v167 = v160[3];
      v160[3] = 0;
      if (v167)
        (*(void (**)(uint64_t))(*(_QWORD *)v167 + 8))(v167);
      operator delete(v160);
      v160 = v166;
    }
    while (v166);
  }
  v161 = (void *)*((_QWORD *)this + 1013);
  *((_QWORD *)this + 1013) = 0;
  if (v161)
    operator delete(v161);
  v162 = (void *)*((_QWORD *)this + 1010);
  if (v162)
  {
    *((_QWORD *)this + 1011) = v162;
    operator delete(v162);
  }
  v163 = *((_QWORD *)this + 1007);
  if (v163)
  {
    v164 = *((_QWORD *)this + 1008);
    v165 = (void *)*((_QWORD *)this + 1007);
    if (v164 != v163)
    {
      do
      {
        v168 = *(std::__shared_weak_count **)(v164 - 8);
        if (v168)
        {
          v169 = (unint64_t *)&v168->__shared_owners_;
          do
            v170 = __ldaxr(v169);
          while (__stlxr(v170 - 1, v169));
          if (!v170)
          {
            ((void (*)(std::__shared_weak_count *))v168->__on_zero_shared)(v168);
            std::__shared_weak_count::__release_weak(v168);
          }
        }
        v164 -= 24;
      }
      while (v164 != v163);
      v165 = (void *)*((_QWORD *)this + 1007);
    }
    *((_QWORD *)this + 1008) = v163;
    operator delete(v165);
  }
  v171 = (void *)*((_QWORD *)this + 1004);
  if (v171)
  {
    *((_QWORD *)this + 1005) = v171;
    operator delete(v171);
  }
  v172 = (void *)*((_QWORD *)this + 1001);
  if (v172)
  {
    *((_QWORD *)this + 1002) = v172;
    operator delete(v172);
  }
  v173 = (_QWORD *)*((_QWORD *)this + 998);
  if (v173)
  {
    do
    {
      v174 = (_QWORD *)*v173;
      operator delete(v173);
      v173 = v174;
    }
    while (v174);
  }
  v175 = (void *)*((_QWORD *)this + 996);
  *((_QWORD *)this + 996) = 0;
  if (v175)
    operator delete(v175);
  v176 = (_QWORD *)*((_QWORD *)this + 993);
  if (v176)
  {
    do
    {
      v177 = (_QWORD *)*v176;
      operator delete(v176);
      v176 = v177;
    }
    while (v177);
  }
  v178 = (void *)*((_QWORD *)this + 991);
  *((_QWORD *)this + 991) = 0;
  if (v178)
    operator delete(v178);
  v179 = (_QWORD *)*((_QWORD *)this + 988);
  if (v179)
  {
    do
    {
      v180 = (_QWORD *)*v179;
      operator delete(v179);
      v179 = v180;
    }
    while (v180);
  }
  v181 = (void *)*((_QWORD *)this + 986);
  *((_QWORD *)this + 986) = 0;
  if (v181)
    operator delete(v181);
  v182 = (_QWORD *)*((_QWORD *)this + 983);
  if (v182)
  {
    do
    {
      v183 = (_QWORD *)*v182;
      operator delete(v182);
      v182 = v183;
    }
    while (v183);
  }
  v184 = (void *)*((_QWORD *)this + 981);
  *((_QWORD *)this + 981) = 0;
  if (v184)
    operator delete(v184);
  v185 = (_QWORD *)*((_QWORD *)this + 978);
  if (v185)
  {
    do
    {
      v191 = (_QWORD *)*v185;
      v192 = v185[3];
      v185[3] = 0;
      if (v192)
        (*(void (**)(uint64_t))(*(_QWORD *)v192 + 8))(v192);
      operator delete(v185);
      v185 = v191;
    }
    while (v191);
  }
  v186 = (void *)*((_QWORD *)this + 976);
  *((_QWORD *)this + 976) = 0;
  if (v186)
    operator delete(v186);
  v187 = (void *)*((_QWORD *)this + 973);
  if (v187)
  {
    *((_QWORD *)this + 974) = v187;
    operator delete(v187);
  }
  v188 = *((_QWORD *)this + 970);
  if (v188)
  {
    v189 = *((_QWORD *)this + 971);
    v190 = (void *)*((_QWORD *)this + 970);
    if (v189 != v188)
    {
      do
      {
        v193 = *(std::__shared_weak_count **)(v189 - 8);
        if (v193)
        {
          v194 = (unint64_t *)&v193->__shared_owners_;
          do
            v195 = __ldaxr(v194);
          while (__stlxr(v195 - 1, v194));
          if (!v195)
          {
            ((void (*)(std::__shared_weak_count *))v193->__on_zero_shared)(v193);
            std::__shared_weak_count::__release_weak(v193);
          }
        }
        v189 -= 24;
      }
      while (v189 != v188);
      v190 = (void *)*((_QWORD *)this + 970);
    }
    *((_QWORD *)this + 971) = v188;
    operator delete(v190);
  }
  v196 = (void *)*((_QWORD *)this + 967);
  if (v196)
  {
    *((_QWORD *)this + 968) = v196;
    operator delete(v196);
  }
  v197 = (void *)*((_QWORD *)this + 964);
  if (v197)
  {
    *((_QWORD *)this + 965) = v197;
    operator delete(v197);
  }
  v198 = (_QWORD *)*((_QWORD *)this + 961);
  if (v198)
  {
    do
    {
      v199 = (_QWORD *)*v198;
      operator delete(v198);
      v198 = v199;
    }
    while (v199);
  }
  v200 = (void *)*((_QWORD *)this + 959);
  *((_QWORD *)this + 959) = 0;
  if (v200)
    operator delete(v200);
  v201 = (_QWORD *)*((_QWORD *)this + 956);
  if (v201)
  {
    do
    {
      v202 = (_QWORD *)*v201;
      operator delete(v201);
      v201 = v202;
    }
    while (v202);
  }
  v203 = (void *)*((_QWORD *)this + 954);
  *((_QWORD *)this + 954) = 0;
  if (v203)
    operator delete(v203);
  v204 = (_QWORD *)*((_QWORD *)this + 951);
  if (v204)
  {
    do
    {
      v205 = (_QWORD *)*v204;
      operator delete(v204);
      v204 = v205;
    }
    while (v205);
  }
  v206 = (void *)*((_QWORD *)this + 949);
  *((_QWORD *)this + 949) = 0;
  if (v206)
    operator delete(v206);
  v207 = (_QWORD *)*((_QWORD *)this + 946);
  if (v207)
  {
    do
    {
      v208 = (_QWORD *)*v207;
      operator delete(v207);
      v207 = v208;
    }
    while (v208);
  }
  v209 = (void *)*((_QWORD *)this + 944);
  *((_QWORD *)this + 944) = 0;
  if (v209)
    operator delete(v209);
  v210 = (_QWORD *)*((_QWORD *)this + 941);
  if (v210)
  {
    do
    {
      v216 = (_QWORD *)*v210;
      v217 = v210[3];
      v210[3] = 0;
      if (v217)
        (*(void (**)(uint64_t))(*(_QWORD *)v217 + 8))(v217);
      operator delete(v210);
      v210 = v216;
    }
    while (v216);
  }
  v211 = (void *)*((_QWORD *)this + 939);
  *((_QWORD *)this + 939) = 0;
  if (v211)
    operator delete(v211);
  v212 = (void *)*((_QWORD *)this + 936);
  if (v212)
  {
    *((_QWORD *)this + 937) = v212;
    operator delete(v212);
  }
  v213 = *((_QWORD *)this + 933);
  if (v213)
  {
    v214 = *((_QWORD *)this + 934);
    v215 = (void *)*((_QWORD *)this + 933);
    if (v214 != v213)
    {
      do
      {
        v218 = *(std::__shared_weak_count **)(v214 - 8);
        if (v218)
        {
          v219 = (unint64_t *)&v218->__shared_owners_;
          do
            v220 = __ldaxr(v219);
          while (__stlxr(v220 - 1, v219));
          if (!v220)
          {
            ((void (*)(std::__shared_weak_count *))v218->__on_zero_shared)(v218);
            std::__shared_weak_count::__release_weak(v218);
          }
        }
        v214 -= 24;
      }
      while (v214 != v213);
      v215 = (void *)*((_QWORD *)this + 933);
    }
    *((_QWORD *)this + 934) = v213;
    operator delete(v215);
  }
  v221 = (void *)*((_QWORD *)this + 930);
  if (v221)
  {
    *((_QWORD *)this + 931) = v221;
    operator delete(v221);
  }
  v222 = (void *)*((_QWORD *)this + 927);
  if (v222)
  {
    *((_QWORD *)this + 928) = v222;
    operator delete(v222);
  }
  v223 = (_QWORD *)*((_QWORD *)this + 924);
  if (v223)
  {
    do
    {
      v224 = (_QWORD *)*v223;
      operator delete(v223);
      v223 = v224;
    }
    while (v224);
  }
  v225 = (void *)*((_QWORD *)this + 922);
  *((_QWORD *)this + 922) = 0;
  if (v225)
    operator delete(v225);
  v226 = (_QWORD *)*((_QWORD *)this + 919);
  if (v226)
  {
    do
    {
      v227 = (_QWORD *)*v226;
      operator delete(v226);
      v226 = v227;
    }
    while (v227);
  }
  v228 = (void *)*((_QWORD *)this + 917);
  *((_QWORD *)this + 917) = 0;
  if (v228)
    operator delete(v228);
  v229 = (_QWORD *)*((_QWORD *)this + 914);
  if (v229)
  {
    do
    {
      v230 = (_QWORD *)*v229;
      operator delete(v229);
      v229 = v230;
    }
    while (v230);
  }
  v231 = (void *)*((_QWORD *)this + 912);
  *((_QWORD *)this + 912) = 0;
  if (v231)
    operator delete(v231);
  v232 = (_QWORD *)*((_QWORD *)this + 909);
  if (v232)
  {
    do
    {
      v233 = (_QWORD *)*v232;
      operator delete(v232);
      v232 = v233;
    }
    while (v233);
  }
  v234 = (void *)*((_QWORD *)this + 907);
  *((_QWORD *)this + 907) = 0;
  if (v234)
    operator delete(v234);
  v235 = (_QWORD *)*((_QWORD *)this + 904);
  if (v235)
  {
    do
    {
      v241 = (_QWORD *)*v235;
      v242 = v235[3];
      v235[3] = 0;
      if (v242)
        (*(void (**)(uint64_t))(*(_QWORD *)v242 + 8))(v242);
      operator delete(v235);
      v235 = v241;
    }
    while (v241);
  }
  v236 = (void *)*((_QWORD *)this + 902);
  *((_QWORD *)this + 902) = 0;
  if (v236)
    operator delete(v236);
  v237 = (void *)*((_QWORD *)this + 899);
  if (v237)
  {
    *((_QWORD *)this + 900) = v237;
    operator delete(v237);
  }
  v238 = *((_QWORD *)this + 896);
  if (v238)
  {
    v239 = *((_QWORD *)this + 897);
    v240 = (void *)*((_QWORD *)this + 896);
    if (v239 != v238)
    {
      do
      {
        v243 = *(std::__shared_weak_count **)(v239 - 8);
        if (v243)
        {
          v244 = (unint64_t *)&v243->__shared_owners_;
          do
            v245 = __ldaxr(v244);
          while (__stlxr(v245 - 1, v244));
          if (!v245)
          {
            ((void (*)(std::__shared_weak_count *))v243->__on_zero_shared)(v243);
            std::__shared_weak_count::__release_weak(v243);
          }
        }
        v239 -= 24;
      }
      while (v239 != v238);
      v240 = (void *)*((_QWORD *)this + 896);
    }
    *((_QWORD *)this + 897) = v238;
    operator delete(v240);
  }
  v246 = (void *)*((_QWORD *)this + 893);
  if (v246)
  {
    *((_QWORD *)this + 894) = v246;
    operator delete(v246);
  }
  v247 = (void *)*((_QWORD *)this + 890);
  if (v247)
  {
    *((_QWORD *)this + 891) = v247;
    operator delete(v247);
  }
  v248 = (_QWORD *)*((_QWORD *)this + 887);
  if (v248)
  {
    do
    {
      v249 = (_QWORD *)*v248;
      operator delete(v248);
      v248 = v249;
    }
    while (v249);
  }
  v250 = (void *)*((_QWORD *)this + 885);
  *((_QWORD *)this + 885) = 0;
  if (v250)
    operator delete(v250);
  v251 = (_QWORD *)*((_QWORD *)this + 882);
  if (v251)
  {
    do
    {
      v252 = (_QWORD *)*v251;
      operator delete(v251);
      v251 = v252;
    }
    while (v252);
  }
  v253 = (void *)*((_QWORD *)this + 880);
  *((_QWORD *)this + 880) = 0;
  if (v253)
    operator delete(v253);
  v254 = (void *)*((_QWORD *)this + 877);
  if (v254)
  {
    *((_QWORD *)this + 878) = v254;
    operator delete(v254);
  }
  v255 = *((_QWORD *)this + 874);
  if (v255)
  {
    v256 = *((_QWORD *)this + 875);
    v257 = (void *)*((_QWORD *)this + 874);
    if (v256 != v255)
    {
      do
      {
        v258 = *(std::__shared_weak_count **)(v256 - 8);
        if (v258)
        {
          v259 = (unint64_t *)&v258->__shared_owners_;
          do
            v260 = __ldaxr(v259);
          while (__stlxr(v260 - 1, v259));
          if (!v260)
          {
            ((void (*)(std::__shared_weak_count *))v258->__on_zero_shared)(v258);
            std::__shared_weak_count::__release_weak(v258);
          }
        }
        v256 -= 24;
      }
      while (v256 != v255);
      v257 = (void *)*((_QWORD *)this + 874);
    }
    *((_QWORD *)this + 875) = v255;
    operator delete(v257);
  }
  v261 = (void *)*((_QWORD *)this + 871);
  if (v261)
  {
    *((_QWORD *)this + 872) = v261;
    operator delete(v261);
  }
  v262 = (void *)*((_QWORD *)this + 868);
  if (v262)
  {
    *((_QWORD *)this + 869) = v262;
    operator delete(v262);
  }
  v263 = (_QWORD *)*((_QWORD *)this + 865);
  if (v263)
  {
    do
    {
      v264 = (_QWORD *)*v263;
      operator delete(v263);
      v263 = v264;
    }
    while (v264);
  }
  v265 = (void *)*((_QWORD *)this + 863);
  *((_QWORD *)this + 863) = 0;
  if (v265)
    operator delete(v265);
  v266 = (_QWORD *)*((_QWORD *)this + 860);
  if (v266)
  {
    do
    {
      v267 = (_QWORD *)*v266;
      operator delete(v266);
      v266 = v267;
    }
    while (v267);
  }
  v268 = (void *)*((_QWORD *)this + 858);
  *((_QWORD *)this + 858) = 0;
  if (v268)
    operator delete(v268);
  v269 = (_QWORD *)*((_QWORD *)this + 855);
  if (v269)
  {
    do
    {
      v270 = (_QWORD *)*v269;
      operator delete(v269);
      v269 = v270;
    }
    while (v270);
  }
  v271 = (void *)*((_QWORD *)this + 853);
  *((_QWORD *)this + 853) = 0;
  if (v271)
    operator delete(v271);
  v272 = (_QWORD *)*((_QWORD *)this + 850);
  if (v272)
  {
    do
    {
      v273 = (_QWORD *)*v272;
      operator delete(v272);
      v272 = v273;
    }
    while (v273);
  }
  v274 = (void *)*((_QWORD *)this + 848);
  *((_QWORD *)this + 848) = 0;
  if (v274)
    operator delete(v274);
  v275 = (_QWORD *)*((_QWORD *)this + 845);
  if (v275)
  {
    do
    {
      v281 = (_QWORD *)*v275;
      v282 = v275[3];
      v275[3] = 0;
      if (v282)
        (*(void (**)(uint64_t))(*(_QWORD *)v282 + 8))(v282);
      operator delete(v275);
      v275 = v281;
    }
    while (v281);
  }
  v276 = (void *)*((_QWORD *)this + 843);
  *((_QWORD *)this + 843) = 0;
  if (v276)
    operator delete(v276);
  v277 = (void *)*((_QWORD *)this + 840);
  if (v277)
  {
    *((_QWORD *)this + 841) = v277;
    operator delete(v277);
  }
  v278 = *((_QWORD *)this + 837);
  if (v278)
  {
    v279 = *((_QWORD *)this + 838);
    v280 = (void *)*((_QWORD *)this + 837);
    if (v279 != v278)
    {
      do
      {
        v283 = *(std::__shared_weak_count **)(v279 - 8);
        if (v283)
        {
          v284 = (unint64_t *)&v283->__shared_owners_;
          do
            v285 = __ldaxr(v284);
          while (__stlxr(v285 - 1, v284));
          if (!v285)
          {
            ((void (*)(std::__shared_weak_count *))v283->__on_zero_shared)(v283);
            std::__shared_weak_count::__release_weak(v283);
          }
        }
        v279 -= 24;
      }
      while (v279 != v278);
      v280 = (void *)*((_QWORD *)this + 837);
    }
    *((_QWORD *)this + 838) = v278;
    operator delete(v280);
  }
  v286 = (void *)*((_QWORD *)this + 834);
  if (v286)
  {
    *((_QWORD *)this + 835) = v286;
    operator delete(v286);
  }
  v287 = (void *)*((_QWORD *)this + 831);
  if (v287)
  {
    *((_QWORD *)this + 832) = v287;
    operator delete(v287);
  }
  v288 = (_QWORD *)*((_QWORD *)this + 828);
  if (v288)
  {
    do
    {
      v289 = (_QWORD *)*v288;
      operator delete(v288);
      v288 = v289;
    }
    while (v289);
  }
  v290 = (void *)*((_QWORD *)this + 826);
  *((_QWORD *)this + 826) = 0;
  if (v290)
    operator delete(v290);
  v291 = (_QWORD *)*((_QWORD *)this + 823);
  if (v291)
  {
    do
    {
      v292 = (_QWORD *)*v291;
      operator delete(v291);
      v291 = v292;
    }
    while (v292);
  }
  v293 = (void *)*((_QWORD *)this + 821);
  *((_QWORD *)this + 821) = 0;
  if (v293)
    operator delete(v293);
  v294 = (_QWORD *)*((_QWORD *)this + 818);
  if (v294)
  {
    do
    {
      v295 = (_QWORD *)*v294;
      operator delete(v294);
      v294 = v295;
    }
    while (v295);
  }
  v296 = (void *)*((_QWORD *)this + 816);
  *((_QWORD *)this + 816) = 0;
  if (v296)
    operator delete(v296);
  v297 = (_QWORD *)*((_QWORD *)this + 813);
  if (v297)
  {
    do
    {
      v298 = (_QWORD *)*v297;
      operator delete(v297);
      v297 = v298;
    }
    while (v298);
  }
  v299 = (void *)*((_QWORD *)this + 811);
  *((_QWORD *)this + 811) = 0;
  if (v299)
    operator delete(v299);
  v300 = (_QWORD *)*((_QWORD *)this + 808);
  if (v300)
  {
    do
    {
      v306 = (_QWORD *)*v300;
      v307 = v300[3];
      v300[3] = 0;
      if (v307)
        (*(void (**)(uint64_t))(*(_QWORD *)v307 + 8))(v307);
      operator delete(v300);
      v300 = v306;
    }
    while (v306);
  }
  v301 = (void *)*((_QWORD *)this + 806);
  *((_QWORD *)this + 806) = 0;
  if (v301)
    operator delete(v301);
  v302 = (void *)*((_QWORD *)this + 803);
  if (v302)
  {
    *((_QWORD *)this + 804) = v302;
    operator delete(v302);
  }
  v303 = *((_QWORD *)this + 800);
  if (v303)
  {
    v304 = *((_QWORD *)this + 801);
    v305 = (void *)*((_QWORD *)this + 800);
    if (v304 != v303)
    {
      do
      {
        v308 = *(std::__shared_weak_count **)(v304 - 8);
        if (v308)
        {
          v309 = (unint64_t *)&v308->__shared_owners_;
          do
            v310 = __ldaxr(v309);
          while (__stlxr(v310 - 1, v309));
          if (!v310)
          {
            ((void (*)(std::__shared_weak_count *))v308->__on_zero_shared)(v308);
            std::__shared_weak_count::__release_weak(v308);
          }
        }
        v304 -= 24;
      }
      while (v304 != v303);
      v305 = (void *)*((_QWORD *)this + 800);
    }
    *((_QWORD *)this + 801) = v303;
    operator delete(v305);
  }
  v311 = (void *)*((_QWORD *)this + 797);
  if (v311)
  {
    *((_QWORD *)this + 798) = v311;
    operator delete(v311);
  }
  v312 = (void *)*((_QWORD *)this + 794);
  if (v312)
  {
    *((_QWORD *)this + 795) = v312;
    operator delete(v312);
  }
  v313 = (_QWORD *)*((_QWORD *)this + 791);
  if (v313)
  {
    do
    {
      v314 = (_QWORD *)*v313;
      operator delete(v313);
      v313 = v314;
    }
    while (v314);
  }
  v315 = (void *)*((_QWORD *)this + 789);
  *((_QWORD *)this + 789) = 0;
  if (v315)
    operator delete(v315);
  v316 = (_QWORD *)*((_QWORD *)this + 786);
  if (v316)
  {
    do
    {
      v317 = (_QWORD *)*v316;
      operator delete(v316);
      v316 = v317;
    }
    while (v317);
  }
  v318 = (void *)*((_QWORD *)this + 784);
  *((_QWORD *)this + 784) = 0;
  if (v318)
    operator delete(v318);
  v319 = (_QWORD *)*((_QWORD *)this + 781);
  if (v319)
  {
    do
    {
      v320 = (_QWORD *)*v319;
      operator delete(v319);
      v319 = v320;
    }
    while (v320);
  }
  v321 = (void *)*((_QWORD *)this + 779);
  *((_QWORD *)this + 779) = 0;
  if (v321)
    operator delete(v321);
  v322 = (_QWORD *)*((_QWORD *)this + 776);
  if (v322)
  {
    do
    {
      v323 = (_QWORD *)*v322;
      operator delete(v322);
      v322 = v323;
    }
    while (v323);
  }
  v324 = (void *)*((_QWORD *)this + 774);
  *((_QWORD *)this + 774) = 0;
  if (v324)
    operator delete(v324);
  v325 = (_QWORD *)*((_QWORD *)this + 771);
  if (v325)
  {
    do
    {
      v331 = (_QWORD *)*v325;
      v332 = v325[3];
      v325[3] = 0;
      if (v332)
        (*(void (**)(uint64_t))(*(_QWORD *)v332 + 8))(v332);
      operator delete(v325);
      v325 = v331;
    }
    while (v331);
  }
  v326 = (void *)*((_QWORD *)this + 769);
  *((_QWORD *)this + 769) = 0;
  if (v326)
    operator delete(v326);
  v327 = (void *)*((_QWORD *)this + 766);
  if (v327)
  {
    *((_QWORD *)this + 767) = v327;
    operator delete(v327);
  }
  v328 = *((_QWORD *)this + 763);
  if (v328)
  {
    v329 = *((_QWORD *)this + 764);
    v330 = (void *)*((_QWORD *)this + 763);
    if (v329 != v328)
    {
      do
      {
        v333 = *(std::__shared_weak_count **)(v329 - 8);
        if (v333)
        {
          v334 = (unint64_t *)&v333->__shared_owners_;
          do
            v335 = __ldaxr(v334);
          while (__stlxr(v335 - 1, v334));
          if (!v335)
          {
            ((void (*)(std::__shared_weak_count *))v333->__on_zero_shared)(v333);
            std::__shared_weak_count::__release_weak(v333);
          }
        }
        v329 -= 24;
      }
      while (v329 != v328);
      v330 = (void *)*((_QWORD *)this + 763);
    }
    *((_QWORD *)this + 764) = v328;
    operator delete(v330);
  }
  v336 = (void *)*((_QWORD *)this + 760);
  if (v336)
  {
    *((_QWORD *)this + 761) = v336;
    operator delete(v336);
  }
  v337 = (void *)*((_QWORD *)this + 757);
  if (v337)
  {
    *((_QWORD *)this + 758) = v337;
    operator delete(v337);
  }
  v338 = (_QWORD *)*((_QWORD *)this + 754);
  if (v338)
  {
    do
    {
      v339 = (_QWORD *)*v338;
      operator delete(v338);
      v338 = v339;
    }
    while (v339);
  }
  v340 = (void *)*((_QWORD *)this + 752);
  *((_QWORD *)this + 752) = 0;
  if (v340)
    operator delete(v340);
  v341 = (_QWORD *)*((_QWORD *)this + 749);
  if (v341)
  {
    do
    {
      v342 = (_QWORD *)*v341;
      operator delete(v341);
      v341 = v342;
    }
    while (v342);
  }
  v343 = (void *)*((_QWORD *)this + 747);
  *((_QWORD *)this + 747) = 0;
  if (v343)
    operator delete(v343);
  v344 = (void *)*((_QWORD *)this + 744);
  if (v344)
  {
    *((_QWORD *)this + 745) = v344;
    operator delete(v344);
  }
  v345 = *((_QWORD *)this + 741);
  if (v345)
  {
    v346 = *((_QWORD *)this + 742);
    v347 = (void *)*((_QWORD *)this + 741);
    if (v346 != v345)
    {
      do
      {
        v348 = *(std::__shared_weak_count **)(v346 - 8);
        if (v348)
        {
          v349 = (unint64_t *)&v348->__shared_owners_;
          do
            v350 = __ldaxr(v349);
          while (__stlxr(v350 - 1, v349));
          if (!v350)
          {
            ((void (*)(std::__shared_weak_count *))v348->__on_zero_shared)(v348);
            std::__shared_weak_count::__release_weak(v348);
          }
        }
        v346 -= 24;
      }
      while (v346 != v345);
      v347 = (void *)*((_QWORD *)this + 741);
    }
    *((_QWORD *)this + 742) = v345;
    operator delete(v347);
  }
  v351 = (void *)*((_QWORD *)this + 738);
  if (v351)
  {
    *((_QWORD *)this + 739) = v351;
    operator delete(v351);
  }
  v352 = (void *)*((_QWORD *)this + 735);
  if (v352)
  {
    *((_QWORD *)this + 736) = v352;
    operator delete(v352);
  }
  v353 = (_QWORD *)*((_QWORD *)this + 732);
  if (v353)
  {
    do
    {
      v354 = (_QWORD *)*v353;
      operator delete(v353);
      v353 = v354;
    }
    while (v354);
  }
  v355 = (void *)*((_QWORD *)this + 730);
  *((_QWORD *)this + 730) = 0;
  if (v355)
    operator delete(v355);
  v356 = (_QWORD *)*((_QWORD *)this + 727);
  if (v356)
  {
    do
    {
      v357 = (_QWORD *)*v356;
      operator delete(v356);
      v356 = v357;
    }
    while (v357);
  }
  v358 = (void *)*((_QWORD *)this + 725);
  *((_QWORD *)this + 725) = 0;
  if (v358)
    operator delete(v358);
  v359 = (_QWORD *)*((_QWORD *)this + 722);
  if (v359)
  {
    do
    {
      v365 = (_QWORD *)*v359;
      v366 = v359[3];
      v359[3] = 0;
      if (v366)
        (*(void (**)(uint64_t))(*(_QWORD *)v366 + 8))(v366);
      operator delete(v359);
      v359 = v365;
    }
    while (v365);
  }
  v360 = (void *)*((_QWORD *)this + 720);
  *((_QWORD *)this + 720) = 0;
  if (v360)
    operator delete(v360);
  v361 = (void *)*((_QWORD *)this + 717);
  if (v361)
  {
    *((_QWORD *)this + 718) = v361;
    operator delete(v361);
  }
  v362 = *((_QWORD *)this + 714);
  if (v362)
  {
    v363 = *((_QWORD *)this + 715);
    v364 = (void *)*((_QWORD *)this + 714);
    if (v363 != v362)
    {
      do
      {
        v367 = *(std::__shared_weak_count **)(v363 - 8);
        if (v367)
        {
          v368 = (unint64_t *)&v367->__shared_owners_;
          do
            v369 = __ldaxr(v368);
          while (__stlxr(v369 - 1, v368));
          if (!v369)
          {
            ((void (*)(std::__shared_weak_count *))v367->__on_zero_shared)(v367);
            std::__shared_weak_count::__release_weak(v367);
          }
        }
        v363 -= 24;
      }
      while (v363 != v362);
      v364 = (void *)*((_QWORD *)this + 714);
    }
    *((_QWORD *)this + 715) = v362;
    operator delete(v364);
  }
  v370 = (void *)*((_QWORD *)this + 711);
  if (v370)
  {
    *((_QWORD *)this + 712) = v370;
    operator delete(v370);
  }
  v371 = (void *)*((_QWORD *)this + 708);
  if (v371)
  {
    *((_QWORD *)this + 709) = v371;
    operator delete(v371);
  }
  v372 = (_QWORD *)*((_QWORD *)this + 705);
  if (v372)
  {
    do
    {
      v373 = (_QWORD *)*v372;
      operator delete(v372);
      v372 = v373;
    }
    while (v373);
  }
  v374 = (void *)*((_QWORD *)this + 703);
  *((_QWORD *)this + 703) = 0;
  if (v374)
    operator delete(v374);
  v375 = (_QWORD *)*((_QWORD *)this + 700);
  if (v375)
  {
    do
    {
      v376 = (_QWORD *)*v375;
      operator delete(v375);
      v375 = v376;
    }
    while (v376);
  }
  v377 = (void *)*((_QWORD *)this + 698);
  *((_QWORD *)this + 698) = 0;
  if (v377)
    operator delete(v377);
  v378 = (void *)*((_QWORD *)this + 695);
  if (v378)
  {
    *((_QWORD *)this + 696) = v378;
    operator delete(v378);
  }
  v379 = *((_QWORD *)this + 692);
  if (v379)
  {
    v380 = *((_QWORD *)this + 693);
    v381 = (void *)*((_QWORD *)this + 692);
    if (v380 != v379)
    {
      do
      {
        v382 = *(std::__shared_weak_count **)(v380 - 8);
        if (v382)
        {
          v383 = (unint64_t *)&v382->__shared_owners_;
          do
            v384 = __ldaxr(v383);
          while (__stlxr(v384 - 1, v383));
          if (!v384)
          {
            ((void (*)(std::__shared_weak_count *))v382->__on_zero_shared)(v382);
            std::__shared_weak_count::__release_weak(v382);
          }
        }
        v380 -= 24;
      }
      while (v380 != v379);
      v381 = (void *)*((_QWORD *)this + 692);
    }
    *((_QWORD *)this + 693) = v379;
    operator delete(v381);
  }
  v385 = (void *)*((_QWORD *)this + 689);
  if (v385)
  {
    *((_QWORD *)this + 690) = v385;
    operator delete(v385);
  }
  v386 = (void *)*((_QWORD *)this + 686);
  if (v386)
  {
    *((_QWORD *)this + 687) = v386;
    operator delete(v386);
  }
  v387 = (_QWORD *)*((_QWORD *)this + 683);
  if (v387)
  {
    do
    {
      v388 = (_QWORD *)*v387;
      operator delete(v387);
      v387 = v388;
    }
    while (v388);
  }
  v389 = (void *)*((_QWORD *)this + 681);
  *((_QWORD *)this + 681) = 0;
  if (v389)
    operator delete(v389);
  v390 = (_QWORD *)*((_QWORD *)this + 678);
  if (v390)
  {
    do
    {
      v391 = (_QWORD *)*v390;
      operator delete(v390);
      v390 = v391;
    }
    while (v391);
  }
  v392 = (void *)*((_QWORD *)this + 676);
  *((_QWORD *)this + 676) = 0;
  if (v392)
    operator delete(v392);
  v393 = (_QWORD *)*((_QWORD *)this + 673);
  if (v393)
  {
    do
    {
      v399 = (_QWORD *)*v393;
      v400 = v393[3];
      v393[3] = 0;
      if (v400)
        (*(void (**)(uint64_t))(*(_QWORD *)v400 + 8))(v400);
      operator delete(v393);
      v393 = v399;
    }
    while (v399);
  }
  v394 = (void *)*((_QWORD *)this + 671);
  *((_QWORD *)this + 671) = 0;
  if (v394)
    operator delete(v394);
  v395 = (void *)*((_QWORD *)this + 668);
  if (v395)
  {
    *((_QWORD *)this + 669) = v395;
    operator delete(v395);
  }
  v396 = *((_QWORD *)this + 665);
  if (v396)
  {
    v397 = *((_QWORD *)this + 666);
    v398 = (void *)*((_QWORD *)this + 665);
    if (v397 != v396)
    {
      do
      {
        v401 = *(std::__shared_weak_count **)(v397 - 8);
        if (v401)
        {
          v402 = (unint64_t *)&v401->__shared_owners_;
          do
            v403 = __ldaxr(v402);
          while (__stlxr(v403 - 1, v402));
          if (!v403)
          {
            ((void (*)(std::__shared_weak_count *))v401->__on_zero_shared)(v401);
            std::__shared_weak_count::__release_weak(v401);
          }
        }
        v397 -= 24;
      }
      while (v397 != v396);
      v398 = (void *)*((_QWORD *)this + 665);
    }
    *((_QWORD *)this + 666) = v396;
    operator delete(v398);
  }
  v404 = (void *)*((_QWORD *)this + 662);
  if (v404)
  {
    *((_QWORD *)this + 663) = v404;
    operator delete(v404);
  }
  v405 = (void *)*((_QWORD *)this + 659);
  if (v405)
  {
    *((_QWORD *)this + 660) = v405;
    operator delete(v405);
  }
  v406 = (_QWORD *)*((_QWORD *)this + 656);
  if (v406)
  {
    do
    {
      v407 = (_QWORD *)*v406;
      operator delete(v406);
      v406 = v407;
    }
    while (v407);
  }
  v408 = (void *)*((_QWORD *)this + 654);
  *((_QWORD *)this + 654) = 0;
  if (v408)
    operator delete(v408);
  v409 = (_QWORD *)*((_QWORD *)this + 651);
  if (v409)
  {
    do
    {
      v410 = (_QWORD *)*v409;
      operator delete(v409);
      v409 = v410;
    }
    while (v410);
  }
  v411 = (void *)*((_QWORD *)this + 649);
  *((_QWORD *)this + 649) = 0;
  if (v411)
    operator delete(v411);
  v412 = (_QWORD *)*((_QWORD *)this + 646);
  if (v412)
  {
    do
    {
      v418 = (_QWORD *)*v412;
      v419 = v412[3];
      v412[3] = 0;
      if (v419)
        (*(void (**)(uint64_t))(*(_QWORD *)v419 + 8))(v419);
      operator delete(v412);
      v412 = v418;
    }
    while (v418);
  }
  v413 = (void *)*((_QWORD *)this + 644);
  *((_QWORD *)this + 644) = 0;
  if (v413)
    operator delete(v413);
  v414 = (void *)*((_QWORD *)this + 641);
  if (v414)
  {
    *((_QWORD *)this + 642) = v414;
    operator delete(v414);
  }
  v415 = *((_QWORD *)this + 638);
  if (v415)
  {
    v416 = *((_QWORD *)this + 639);
    v417 = (void *)*((_QWORD *)this + 638);
    if (v416 != v415)
    {
      do
      {
        v420 = *(std::__shared_weak_count **)(v416 - 8);
        if (v420)
        {
          v421 = (unint64_t *)&v420->__shared_owners_;
          do
            v422 = __ldaxr(v421);
          while (__stlxr(v422 - 1, v421));
          if (!v422)
          {
            ((void (*)(std::__shared_weak_count *))v420->__on_zero_shared)(v420);
            std::__shared_weak_count::__release_weak(v420);
          }
        }
        v416 -= 24;
      }
      while (v416 != v415);
      v417 = (void *)*((_QWORD *)this + 638);
    }
    *((_QWORD *)this + 639) = v415;
    operator delete(v417);
  }
  v423 = (void *)*((_QWORD *)this + 635);
  if (v423)
  {
    *((_QWORD *)this + 636) = v423;
    operator delete(v423);
  }
  v424 = (void *)*((_QWORD *)this + 632);
  if (v424)
  {
    *((_QWORD *)this + 633) = v424;
    operator delete(v424);
  }
  v425 = (_QWORD *)*((_QWORD *)this + 629);
  if (v425)
  {
    do
    {
      v426 = (_QWORD *)*v425;
      operator delete(v425);
      v425 = v426;
    }
    while (v426);
  }
  v427 = (void *)*((_QWORD *)this + 627);
  *((_QWORD *)this + 627) = 0;
  if (v427)
    operator delete(v427);
  v428 = (_QWORD *)*((_QWORD *)this + 624);
  if (v428)
  {
    do
    {
      v429 = (_QWORD *)*v428;
      operator delete(v428);
      v428 = v429;
    }
    while (v429);
  }
  v430 = (void *)*((_QWORD *)this + 622);
  *((_QWORD *)this + 622) = 0;
  if (v430)
    operator delete(v430);
  v431 = (_QWORD *)*((_QWORD *)this + 619);
  if (v431)
  {
    do
    {
      v437 = (_QWORD *)*v431;
      v438 = v431[3];
      v431[3] = 0;
      if (v438)
        (*(void (**)(uint64_t))(*(_QWORD *)v438 + 8))(v438);
      operator delete(v431);
      v431 = v437;
    }
    while (v437);
  }
  v432 = (void *)*((_QWORD *)this + 617);
  *((_QWORD *)this + 617) = 0;
  if (v432)
    operator delete(v432);
  v433 = (void *)*((_QWORD *)this + 614);
  if (v433)
  {
    *((_QWORD *)this + 615) = v433;
    operator delete(v433);
  }
  v434 = *((_QWORD *)this + 611);
  if (v434)
  {
    v435 = *((_QWORD *)this + 612);
    v436 = (void *)*((_QWORD *)this + 611);
    if (v435 != v434)
    {
      do
      {
        v439 = *(std::__shared_weak_count **)(v435 - 8);
        if (v439)
        {
          v440 = (unint64_t *)&v439->__shared_owners_;
          do
            v441 = __ldaxr(v440);
          while (__stlxr(v441 - 1, v440));
          if (!v441)
          {
            ((void (*)(std::__shared_weak_count *))v439->__on_zero_shared)(v439);
            std::__shared_weak_count::__release_weak(v439);
          }
        }
        v435 -= 24;
      }
      while (v435 != v434);
      v436 = (void *)*((_QWORD *)this + 611);
    }
    *((_QWORD *)this + 612) = v434;
    operator delete(v436);
  }
  v442 = (void *)*((_QWORD *)this + 608);
  if (v442)
  {
    *((_QWORD *)this + 609) = v442;
    operator delete(v442);
  }
  v443 = (void *)*((_QWORD *)this + 605);
  if (v443)
  {
    *((_QWORD *)this + 606) = v443;
    operator delete(v443);
  }
  v444 = (_QWORD *)*((_QWORD *)this + 602);
  if (v444)
  {
    do
    {
      v445 = (_QWORD *)*v444;
      operator delete(v444);
      v444 = v445;
    }
    while (v445);
  }
  v446 = (void *)*((_QWORD *)this + 600);
  *((_QWORD *)this + 600) = 0;
  if (v446)
    operator delete(v446);
  v447 = (_QWORD *)*((_QWORD *)this + 597);
  if (v447)
  {
    do
    {
      v448 = (_QWORD *)*v447;
      operator delete(v447);
      v447 = v448;
    }
    while (v448);
  }
  v449 = (void *)*((_QWORD *)this + 595);
  *((_QWORD *)this + 595) = 0;
  if (v449)
    operator delete(v449);
  v450 = (_QWORD *)*((_QWORD *)this + 592);
  if (v450)
  {
    do
    {
      v456 = (_QWORD *)*v450;
      v457 = v450[3];
      v450[3] = 0;
      if (v457)
        (*(void (**)(uint64_t))(*(_QWORD *)v457 + 8))(v457);
      operator delete(v450);
      v450 = v456;
    }
    while (v456);
  }
  v451 = (void *)*((_QWORD *)this + 590);
  *((_QWORD *)this + 590) = 0;
  if (v451)
    operator delete(v451);
  v452 = (void *)*((_QWORD *)this + 587);
  if (v452)
  {
    *((_QWORD *)this + 588) = v452;
    operator delete(v452);
  }
  v453 = *((_QWORD *)this + 584);
  if (v453)
  {
    v454 = *((_QWORD *)this + 585);
    v455 = (void *)*((_QWORD *)this + 584);
    if (v454 != v453)
    {
      do
      {
        v458 = *(std::__shared_weak_count **)(v454 - 8);
        if (v458)
        {
          v459 = (unint64_t *)&v458->__shared_owners_;
          do
            v460 = __ldaxr(v459);
          while (__stlxr(v460 - 1, v459));
          if (!v460)
          {
            ((void (*)(std::__shared_weak_count *))v458->__on_zero_shared)(v458);
            std::__shared_weak_count::__release_weak(v458);
          }
        }
        v454 -= 24;
      }
      while (v454 != v453);
      v455 = (void *)*((_QWORD *)this + 584);
    }
    *((_QWORD *)this + 585) = v453;
    operator delete(v455);
  }
  v461 = (void *)*((_QWORD *)this + 581);
  if (v461)
  {
    *((_QWORD *)this + 582) = v461;
    operator delete(v461);
  }
  v462 = (void *)*((_QWORD *)this + 578);
  if (v462)
  {
    *((_QWORD *)this + 579) = v462;
    operator delete(v462);
  }
  v463 = (_QWORD *)*((_QWORD *)this + 575);
  if (v463)
  {
    do
    {
      v464 = (_QWORD *)*v463;
      operator delete(v463);
      v463 = v464;
    }
    while (v464);
  }
  v465 = (void *)*((_QWORD *)this + 573);
  *((_QWORD *)this + 573) = 0;
  if (v465)
    operator delete(v465);
  v466 = (_QWORD *)*((_QWORD *)this + 570);
  if (v466)
  {
    do
    {
      v467 = (_QWORD *)*v466;
      operator delete(v466);
      v466 = v467;
    }
    while (v467);
  }
  v468 = (void *)*((_QWORD *)this + 568);
  *((_QWORD *)this + 568) = 0;
  if (v468)
    operator delete(v468);
  v469 = (_QWORD *)*((_QWORD *)this + 565);
  if (v469)
  {
    do
    {
      v475 = (_QWORD *)*v469;
      v476 = v469[3];
      v469[3] = 0;
      if (v476)
        (*(void (**)(uint64_t))(*(_QWORD *)v476 + 8))(v476);
      operator delete(v469);
      v469 = v475;
    }
    while (v475);
  }
  v470 = (void *)*((_QWORD *)this + 563);
  *((_QWORD *)this + 563) = 0;
  if (v470)
    operator delete(v470);
  v471 = (void *)*((_QWORD *)this + 560);
  if (v471)
  {
    *((_QWORD *)this + 561) = v471;
    operator delete(v471);
  }
  v472 = *((_QWORD *)this + 557);
  if (v472)
  {
    v473 = *((_QWORD *)this + 558);
    v474 = (void *)*((_QWORD *)this + 557);
    if (v473 != v472)
    {
      do
      {
        v477 = *(std::__shared_weak_count **)(v473 - 8);
        if (v477)
        {
          v478 = (unint64_t *)&v477->__shared_owners_;
          do
            v479 = __ldaxr(v478);
          while (__stlxr(v479 - 1, v478));
          if (!v479)
          {
            ((void (*)(std::__shared_weak_count *))v477->__on_zero_shared)(v477);
            std::__shared_weak_count::__release_weak(v477);
          }
        }
        v473 -= 24;
      }
      while (v473 != v472);
      v474 = (void *)*((_QWORD *)this + 557);
    }
    *((_QWORD *)this + 558) = v472;
    operator delete(v474);
  }
  v480 = (void *)*((_QWORD *)this + 554);
  if (v480)
  {
    *((_QWORD *)this + 555) = v480;
    operator delete(v480);
  }
  v481 = (void *)*((_QWORD *)this + 551);
  if (v481)
  {
    *((_QWORD *)this + 552) = v481;
    operator delete(v481);
  }
  v482 = (_QWORD *)*((_QWORD *)this + 548);
  if (v482)
  {
    do
    {
      v483 = (_QWORD *)*v482;
      operator delete(v482);
      v482 = v483;
    }
    while (v483);
  }
  v484 = (void *)*((_QWORD *)this + 546);
  *((_QWORD *)this + 546) = 0;
  if (v484)
    operator delete(v484);
  v485 = (_QWORD *)*((_QWORD *)this + 543);
  if (v485)
  {
    do
    {
      v486 = (_QWORD *)*v485;
      operator delete(v485);
      v485 = v486;
    }
    while (v486);
  }
  v487 = (void *)*((_QWORD *)this + 541);
  *((_QWORD *)this + 541) = 0;
  if (v487)
    operator delete(v487);
  v488 = (_QWORD *)*((_QWORD *)this + 538);
  if (v488)
  {
    do
    {
      v494 = (_QWORD *)*v488;
      v495 = v488[3];
      v488[3] = 0;
      if (v495)
        (*(void (**)(uint64_t))(*(_QWORD *)v495 + 8))(v495);
      operator delete(v488);
      v488 = v494;
    }
    while (v494);
  }
  v489 = (void *)*((_QWORD *)this + 536);
  *((_QWORD *)this + 536) = 0;
  if (v489)
    operator delete(v489);
  v490 = (void *)*((_QWORD *)this + 533);
  if (v490)
  {
    *((_QWORD *)this + 534) = v490;
    operator delete(v490);
  }
  v491 = *((_QWORD *)this + 530);
  if (v491)
  {
    v492 = *((_QWORD *)this + 531);
    v493 = (void *)*((_QWORD *)this + 530);
    if (v492 != v491)
    {
      do
      {
        v496 = *(std::__shared_weak_count **)(v492 - 8);
        if (v496)
        {
          v497 = (unint64_t *)&v496->__shared_owners_;
          do
            v498 = __ldaxr(v497);
          while (__stlxr(v498 - 1, v497));
          if (!v498)
          {
            ((void (*)(std::__shared_weak_count *))v496->__on_zero_shared)(v496);
            std::__shared_weak_count::__release_weak(v496);
          }
        }
        v492 -= 24;
      }
      while (v492 != v491);
      v493 = (void *)*((_QWORD *)this + 530);
    }
    *((_QWORD *)this + 531) = v491;
    operator delete(v493);
  }
  v499 = (void *)*((_QWORD *)this + 527);
  if (v499)
  {
    *((_QWORD *)this + 528) = v499;
    operator delete(v499);
  }
  v500 = (void *)*((_QWORD *)this + 524);
  if (v500)
  {
    *((_QWORD *)this + 525) = v500;
    operator delete(v500);
  }
  v501 = (_QWORD *)*((_QWORD *)this + 521);
  if (v501)
  {
    do
    {
      v502 = (_QWORD *)*v501;
      operator delete(v501);
      v501 = v502;
    }
    while (v502);
  }
  v503 = (void *)*((_QWORD *)this + 519);
  *((_QWORD *)this + 519) = 0;
  if (v503)
    operator delete(v503);
  v504 = (_QWORD *)*((_QWORD *)this + 516);
  if (v504)
  {
    do
    {
      v505 = (_QWORD *)*v504;
      operator delete(v504);
      v504 = v505;
    }
    while (v505);
  }
  v506 = (void *)*((_QWORD *)this + 514);
  *((_QWORD *)this + 514) = 0;
  if (v506)
    operator delete(v506);
  v507 = (void *)*((_QWORD *)this + 511);
  if (v507)
  {
    *((_QWORD *)this + 512) = v507;
    operator delete(v507);
  }
  v508 = *((_QWORD *)this + 508);
  if (v508)
  {
    v509 = *((_QWORD *)this + 509);
    v510 = (void *)*((_QWORD *)this + 508);
    if (v509 != v508)
    {
      do
      {
        v511 = *(std::__shared_weak_count **)(v509 - 8);
        if (v511)
        {
          v512 = (unint64_t *)&v511->__shared_owners_;
          do
            v513 = __ldaxr(v512);
          while (__stlxr(v513 - 1, v512));
          if (!v513)
          {
            ((void (*)(std::__shared_weak_count *))v511->__on_zero_shared)(v511);
            std::__shared_weak_count::__release_weak(v511);
          }
        }
        v509 -= 24;
      }
      while (v509 != v508);
      v510 = (void *)*((_QWORD *)this + 508);
    }
    *((_QWORD *)this + 509) = v508;
    operator delete(v510);
  }
  v514 = (void *)*((_QWORD *)this + 505);
  if (v514)
  {
    *((_QWORD *)this + 506) = v514;
    operator delete(v514);
  }
  v515 = (void *)*((_QWORD *)this + 502);
  if (v515)
  {
    *((_QWORD *)this + 503) = v515;
    operator delete(v515);
  }
  v516 = (_QWORD *)*((_QWORD *)this + 499);
  if (v516)
  {
    do
    {
      v517 = (_QWORD *)*v516;
      operator delete(v516);
      v516 = v517;
    }
    while (v517);
  }
  v518 = (void *)*((_QWORD *)this + 497);
  *((_QWORD *)this + 497) = 0;
  if (v518)
    operator delete(v518);
  v519 = (_QWORD *)*((_QWORD *)this + 494);
  if (v519)
  {
    do
    {
      v520 = (_QWORD *)*v519;
      operator delete(v519);
      v519 = v520;
    }
    while (v520);
  }
  v521 = (void *)*((_QWORD *)this + 492);
  *((_QWORD *)this + 492) = 0;
  if (v521)
    operator delete(v521);
  v522 = (void *)*((_QWORD *)this + 489);
  if (v522)
  {
    *((_QWORD *)this + 490) = v522;
    operator delete(v522);
  }
  v523 = *((_QWORD *)this + 486);
  if (v523)
  {
    v524 = *((_QWORD *)this + 487);
    v525 = (void *)*((_QWORD *)this + 486);
    if (v524 != v523)
    {
      do
      {
        v526 = *(std::__shared_weak_count **)(v524 - 8);
        if (v526)
        {
          v527 = (unint64_t *)&v526->__shared_owners_;
          do
            v528 = __ldaxr(v527);
          while (__stlxr(v528 - 1, v527));
          if (!v528)
          {
            ((void (*)(std::__shared_weak_count *))v526->__on_zero_shared)(v526);
            std::__shared_weak_count::__release_weak(v526);
          }
        }
        v524 -= 24;
      }
      while (v524 != v523);
      v525 = (void *)*((_QWORD *)this + 486);
    }
    *((_QWORD *)this + 487) = v523;
    operator delete(v525);
  }
  v529 = (void *)*((_QWORD *)this + 483);
  if (v529)
  {
    *((_QWORD *)this + 484) = v529;
    operator delete(v529);
  }
  v530 = (void *)*((_QWORD *)this + 480);
  if (v530)
  {
    *((_QWORD *)this + 481) = v530;
    operator delete(v530);
  }
  v531 = (_QWORD *)*((_QWORD *)this + 477);
  if (v531)
  {
    do
    {
      v532 = (_QWORD *)*v531;
      operator delete(v531);
      v531 = v532;
    }
    while (v532);
  }
  v533 = (void *)*((_QWORD *)this + 475);
  *((_QWORD *)this + 475) = 0;
  if (v533)
    operator delete(v533);
  v534 = (_QWORD *)*((_QWORD *)this + 472);
  if (v534)
  {
    do
    {
      v535 = (_QWORD *)*v534;
      operator delete(v534);
      v534 = v535;
    }
    while (v535);
  }
  v536 = (void *)*((_QWORD *)this + 470);
  *((_QWORD *)this + 470) = 0;
  if (v536)
    operator delete(v536);
  v537 = (void *)*((_QWORD *)this + 467);
  if (v537)
  {
    *((_QWORD *)this + 468) = v537;
    operator delete(v537);
  }
  v538 = *((_QWORD *)this + 464);
  if (v538)
  {
    v539 = *((_QWORD *)this + 465);
    v540 = (void *)*((_QWORD *)this + 464);
    if (v539 != v538)
    {
      do
      {
        v541 = *(std::__shared_weak_count **)(v539 - 8);
        if (v541)
        {
          v542 = (unint64_t *)&v541->__shared_owners_;
          do
            v543 = __ldaxr(v542);
          while (__stlxr(v543 - 1, v542));
          if (!v543)
          {
            ((void (*)(std::__shared_weak_count *))v541->__on_zero_shared)(v541);
            std::__shared_weak_count::__release_weak(v541);
          }
        }
        v539 -= 24;
      }
      while (v539 != v538);
      v540 = (void *)*((_QWORD *)this + 464);
    }
    *((_QWORD *)this + 465) = v538;
    operator delete(v540);
  }
  v544 = (void *)*((_QWORD *)this + 461);
  if (v544)
  {
    *((_QWORD *)this + 462) = v544;
    operator delete(v544);
  }
  v545 = (void *)*((_QWORD *)this + 458);
  if (v545)
  {
    *((_QWORD *)this + 459) = v545;
    operator delete(v545);
  }
  v546 = (_QWORD *)*((_QWORD *)this + 455);
  if (v546)
  {
    do
    {
      v547 = (_QWORD *)*v546;
      operator delete(v546);
      v546 = v547;
    }
    while (v547);
  }
  v548 = (void *)*((_QWORD *)this + 453);
  *((_QWORD *)this + 453) = 0;
  if (v548)
    operator delete(v548);
  v549 = (_QWORD *)*((_QWORD *)this + 450);
  if (v549)
  {
    do
    {
      v550 = (_QWORD *)*v549;
      operator delete(v549);
      v549 = v550;
    }
    while (v550);
  }
  v551 = (void *)*((_QWORD *)this + 448);
  *((_QWORD *)this + 448) = 0;
  if (v551)
    operator delete(v551);
  v552 = (void *)*((_QWORD *)this + 445);
  if (v552)
  {
    *((_QWORD *)this + 446) = v552;
    operator delete(v552);
  }
  v553 = *((_QWORD *)this + 442);
  if (v553)
  {
    v554 = *((_QWORD *)this + 443);
    v555 = (void *)*((_QWORD *)this + 442);
    if (v554 != v553)
    {
      do
      {
        v556 = *(std::__shared_weak_count **)(v554 - 8);
        if (v556)
        {
          v557 = (unint64_t *)&v556->__shared_owners_;
          do
            v558 = __ldaxr(v557);
          while (__stlxr(v558 - 1, v557));
          if (!v558)
          {
            ((void (*)(std::__shared_weak_count *))v556->__on_zero_shared)(v556);
            std::__shared_weak_count::__release_weak(v556);
          }
        }
        v554 -= 24;
      }
      while (v554 != v553);
      v555 = (void *)*((_QWORD *)this + 442);
    }
    *((_QWORD *)this + 443) = v553;
    operator delete(v555);
  }
  v559 = (void *)*((_QWORD *)this + 439);
  if (v559)
  {
    *((_QWORD *)this + 440) = v559;
    operator delete(v559);
  }
  v560 = (void *)*((_QWORD *)this + 436);
  if (v560)
  {
    *((_QWORD *)this + 437) = v560;
    operator delete(v560);
  }
  v561 = (_QWORD *)*((_QWORD *)this + 433);
  if (v561)
  {
    do
    {
      v562 = (_QWORD *)*v561;
      operator delete(v561);
      v561 = v562;
    }
    while (v562);
  }
  v563 = (void *)*((_QWORD *)this + 431);
  *((_QWORD *)this + 431) = 0;
  if (v563)
    operator delete(v563);
  v564 = (_QWORD *)*((_QWORD *)this + 428);
  if (v564)
  {
    do
    {
      v565 = (_QWORD *)*v564;
      operator delete(v564);
      v564 = v565;
    }
    while (v565);
  }
  v566 = (void *)*((_QWORD *)this + 426);
  *((_QWORD *)this + 426) = 0;
  if (v566)
    operator delete(v566);
  v567 = (void *)*((_QWORD *)this + 423);
  if (v567)
  {
    *((_QWORD *)this + 424) = v567;
    operator delete(v567);
  }
  v568 = *((_QWORD *)this + 420);
  if (v568)
  {
    v569 = *((_QWORD *)this + 421);
    v570 = (void *)*((_QWORD *)this + 420);
    if (v569 != v568)
    {
      do
      {
        v571 = *(std::__shared_weak_count **)(v569 - 8);
        if (v571)
        {
          v572 = (unint64_t *)&v571->__shared_owners_;
          do
            v573 = __ldaxr(v572);
          while (__stlxr(v573 - 1, v572));
          if (!v573)
          {
            ((void (*)(std::__shared_weak_count *))v571->__on_zero_shared)(v571);
            std::__shared_weak_count::__release_weak(v571);
          }
        }
        v569 -= 24;
      }
      while (v569 != v568);
      v570 = (void *)*((_QWORD *)this + 420);
    }
    *((_QWORD *)this + 421) = v568;
    operator delete(v570);
  }
  v574 = (void *)*((_QWORD *)this + 417);
  if (v574)
  {
    *((_QWORD *)this + 418) = v574;
    operator delete(v574);
  }
  v575 = (void *)*((_QWORD *)this + 414);
  if (v575)
  {
    *((_QWORD *)this + 415) = v575;
    operator delete(v575);
  }
  v576 = (_QWORD *)*((_QWORD *)this + 411);
  if (v576)
  {
    do
    {
      v577 = (_QWORD *)*v576;
      operator delete(v576);
      v576 = v577;
    }
    while (v577);
  }
  v578 = (void *)*((_QWORD *)this + 409);
  *((_QWORD *)this + 409) = 0;
  if (v578)
    operator delete(v578);
  v579 = (_QWORD *)*((_QWORD *)this + 406);
  if (v579)
  {
    do
    {
      v580 = (_QWORD *)*v579;
      operator delete(v579);
      v579 = v580;
    }
    while (v580);
  }
  v581 = (void *)*((_QWORD *)this + 404);
  *((_QWORD *)this + 404) = 0;
  if (v581)
    operator delete(v581);
  v582 = (_QWORD *)*((_QWORD *)this + 401);
  if (v582)
  {
    do
    {
      v583 = (_QWORD *)*v582;
      operator delete(v582);
      v582 = v583;
    }
    while (v583);
  }
  v584 = (void *)*((_QWORD *)this + 399);
  *((_QWORD *)this + 399) = 0;
  if (v584)
    operator delete(v584);
  v585 = (_QWORD *)*((_QWORD *)this + 396);
  if (v585)
  {
    do
    {
      v586 = (_QWORD *)*v585;
      operator delete(v585);
      v585 = v586;
    }
    while (v586);
  }
  v587 = (void *)*((_QWORD *)this + 394);
  *((_QWORD *)this + 394) = 0;
  if (v587)
    operator delete(v587);
  v588 = (_QWORD *)*((_QWORD *)this + 391);
  if (v588)
  {
    do
    {
      v594 = (_QWORD *)*v588;
      v595 = v588[3];
      v588[3] = 0;
      if (v595)
        (*(void (**)(uint64_t))(*(_QWORD *)v595 + 8))(v595);
      operator delete(v588);
      v588 = v594;
    }
    while (v594);
  }
  v589 = (void *)*((_QWORD *)this + 389);
  *((_QWORD *)this + 389) = 0;
  if (v589)
    operator delete(v589);
  v590 = (void *)*((_QWORD *)this + 386);
  if (v590)
  {
    *((_QWORD *)this + 387) = v590;
    operator delete(v590);
  }
  v591 = *((_QWORD *)this + 383);
  if (v591)
  {
    v592 = *((_QWORD *)this + 384);
    v593 = (void *)*((_QWORD *)this + 383);
    if (v592 != v591)
    {
      do
      {
        v596 = *(std::__shared_weak_count **)(v592 - 8);
        if (v596)
        {
          v597 = (unint64_t *)&v596->__shared_owners_;
          do
            v598 = __ldaxr(v597);
          while (__stlxr(v598 - 1, v597));
          if (!v598)
          {
            ((void (*)(std::__shared_weak_count *))v596->__on_zero_shared)(v596);
            std::__shared_weak_count::__release_weak(v596);
          }
        }
        v592 -= 24;
      }
      while (v592 != v591);
      v593 = (void *)*((_QWORD *)this + 383);
    }
    *((_QWORD *)this + 384) = v591;
    operator delete(v593);
  }
  v599 = (void *)*((_QWORD *)this + 380);
  if (v599)
  {
    *((_QWORD *)this + 381) = v599;
    operator delete(v599);
  }
  v600 = (void *)*((_QWORD *)this + 377);
  if (v600)
  {
    *((_QWORD *)this + 378) = v600;
    operator delete(v600);
  }
  v601 = (_QWORD *)*((_QWORD *)this + 374);
  if (v601)
  {
    do
    {
      v602 = (_QWORD *)*v601;
      operator delete(v601);
      v601 = v602;
    }
    while (v602);
  }
  v603 = (void *)*((_QWORD *)this + 372);
  *((_QWORD *)this + 372) = 0;
  if (v603)
    operator delete(v603);
  v604 = (_QWORD *)*((_QWORD *)this + 369);
  if (v604)
  {
    do
    {
      v605 = (_QWORD *)*v604;
      operator delete(v604);
      v604 = v605;
    }
    while (v605);
  }
  v606 = (void *)*((_QWORD *)this + 367);
  *((_QWORD *)this + 367) = 0;
  if (v606)
    operator delete(v606);
  v607 = (_QWORD *)*((_QWORD *)this + 364);
  if (v607)
  {
    do
    {
      v608 = (_QWORD *)*v607;
      operator delete(v607);
      v607 = v608;
    }
    while (v608);
  }
  v609 = (void *)*((_QWORD *)this + 362);
  *((_QWORD *)this + 362) = 0;
  if (v609)
    operator delete(v609);
  v610 = (_QWORD *)*((_QWORD *)this + 359);
  if (v610)
  {
    do
    {
      v611 = (_QWORD *)*v610;
      operator delete(v610);
      v610 = v611;
    }
    while (v611);
  }
  v612 = (void *)*((_QWORD *)this + 357);
  *((_QWORD *)this + 357) = 0;
  if (v612)
    operator delete(v612);
  v613 = (_QWORD *)*((_QWORD *)this + 354);
  if (v613)
  {
    do
    {
      v637 = (_QWORD *)*v613;
      v638 = v613[3];
      v613[3] = 0;
      if (v638)
        MEMORY[0x1A1AF4E00](v638, 0x1000C400CE834B2);
      operator delete(v613);
      v613 = v637;
    }
    while (v637);
  }
  v614 = (void *)*((_QWORD *)this + 352);
  *((_QWORD *)this + 352) = 0;
  if (v614)
    operator delete(v614);
  v615 = (void *)*((_QWORD *)this + 349);
  if (v615)
  {
    *((_QWORD *)this + 350) = v615;
    operator delete(v615);
  }
  v616 = (void *)*((_QWORD *)this + 346);
  if (v616)
  {
    *((_QWORD *)this + 347) = v616;
    operator delete(v616);
  }
  v617 = (void *)*((_QWORD *)this + 343);
  if (v617)
  {
    *((_QWORD *)this + 344) = v617;
    operator delete(v617);
  }
  v618 = (void *)*((_QWORD *)this + 340);
  if (v618)
  {
    *((_QWORD *)this + 341) = v618;
    operator delete(v618);
  }
  v619 = (_QWORD *)*((_QWORD *)this + 337);
  if (v619)
  {
    do
    {
      v620 = (_QWORD *)*v619;
      operator delete(v619);
      v619 = v620;
    }
    while (v620);
  }
  v621 = (void *)*((_QWORD *)this + 335);
  *((_QWORD *)this + 335) = 0;
  if (v621)
    operator delete(v621);
  v622 = (_QWORD *)*((_QWORD *)this + 332);
  if (v622)
  {
    do
    {
      v623 = (_QWORD *)*v622;
      operator delete(v622);
      v622 = v623;
    }
    while (v623);
  }
  v624 = (void *)*((_QWORD *)this + 330);
  *((_QWORD *)this + 330) = 0;
  if (v624)
    operator delete(v624);
  v625 = (_QWORD *)*((_QWORD *)this + 327);
  if (v625)
  {
    do
    {
      v626 = (_QWORD *)*v625;
      operator delete(v625);
      v625 = v626;
    }
    while (v626);
  }
  v627 = (void *)*((_QWORD *)this + 325);
  *((_QWORD *)this + 325) = 0;
  if (v627)
    operator delete(v627);
  v628 = (_QWORD *)*((_QWORD *)this + 322);
  if (v628)
  {
    do
    {
      v629 = (_QWORD *)*v628;
      operator delete(v628);
      v628 = v629;
    }
    while (v629);
  }
  v630 = (void *)*((_QWORD *)this + 320);
  *((_QWORD *)this + 320) = 0;
  if (v630)
    operator delete(v630);
  v631 = (_QWORD *)*((_QWORD *)this + 317);
  if (v631)
  {
    do
    {
      v639 = (_QWORD *)*v631;
      v640 = v631[3];
      v631[3] = 0;
      if (v640)
        (*(void (**)(uint64_t))(*(_QWORD *)v640 + 8))(v640);
      operator delete(v631);
      v631 = v639;
    }
    while (v639);
  }
  v632 = (void *)*((_QWORD *)this + 315);
  *((_QWORD *)this + 315) = 0;
  if (v632)
    operator delete(v632);
  v633 = (void *)*((_QWORD *)this + 312);
  if (v633)
  {
    *((_QWORD *)this + 313) = v633;
    operator delete(v633);
  }
  v634 = *((_QWORD *)this + 309);
  if (v634)
  {
    v635 = *((_QWORD *)this + 310);
    v636 = (void *)*((_QWORD *)this + 309);
    if (v635 != v634)
    {
      do
      {
        v641 = *(std::__shared_weak_count **)(v635 - 8);
        if (v641)
        {
          v642 = (unint64_t *)&v641->__shared_owners_;
          do
            v643 = __ldaxr(v642);
          while (__stlxr(v643 - 1, v642));
          if (!v643)
          {
            ((void (*)(std::__shared_weak_count *))v641->__on_zero_shared)(v641);
            std::__shared_weak_count::__release_weak(v641);
          }
        }
        v635 -= 24;
      }
      while (v635 != v634);
      v636 = (void *)*((_QWORD *)this + 309);
    }
    *((_QWORD *)this + 310) = v634;
    operator delete(v636);
  }
  v644 = (void *)*((_QWORD *)this + 306);
  if (v644)
  {
    *((_QWORD *)this + 307) = v644;
    operator delete(v644);
  }
  v645 = (void *)*((_QWORD *)this + 303);
  if (v645)
  {
    *((_QWORD *)this + 304) = v645;
    operator delete(v645);
  }
  v646 = (_QWORD *)*((_QWORD *)this + 300);
  if (v646)
  {
    do
    {
      v647 = (_QWORD *)*v646;
      operator delete(v646);
      v646 = v647;
    }
    while (v647);
  }
  v648 = (void *)*((_QWORD *)this + 298);
  *((_QWORD *)this + 298) = 0;
  if (v648)
    operator delete(v648);
  v649 = (_QWORD *)*((_QWORD *)this + 295);
  if (v649)
  {
    do
    {
      v650 = (_QWORD *)*v649;
      operator delete(v649);
      v649 = v650;
    }
    while (v650);
  }
  v651 = (void *)*((_QWORD *)this + 293);
  *((_QWORD *)this + 293) = 0;
  if (v651)
    operator delete(v651);
  v652 = (_QWORD *)*((_QWORD *)this + 290);
  if (v652)
  {
    do
    {
      v653 = (_QWORD *)*v652;
      operator delete(v652);
      v652 = v653;
    }
    while (v653);
  }
  v654 = (void *)*((_QWORD *)this + 288);
  *((_QWORD *)this + 288) = 0;
  if (v654)
    operator delete(v654);
  v655 = (_QWORD *)*((_QWORD *)this + 285);
  if (v655)
  {
    do
    {
      v656 = (_QWORD *)*v655;
      operator delete(v655);
      v655 = v656;
    }
    while (v656);
  }
  v657 = (void *)*((_QWORD *)this + 283);
  *((_QWORD *)this + 283) = 0;
  if (v657)
    operator delete(v657);
  v658 = (_QWORD *)*((_QWORD *)this + 280);
  if (v658)
  {
    do
    {
      v682 = (_QWORD *)*v658;
      v683 = v658[3];
      v658[3] = 0;
      if (v683)
        MEMORY[0x1A1AF4E00](v683, 0x1000C40B9F3BD1DLL);
      operator delete(v658);
      v658 = v682;
    }
    while (v682);
  }
  v659 = (void *)*((_QWORD *)this + 278);
  *((_QWORD *)this + 278) = 0;
  if (v659)
    operator delete(v659);
  v660 = (void *)*((_QWORD *)this + 275);
  if (v660)
  {
    *((_QWORD *)this + 276) = v660;
    operator delete(v660);
  }
  v661 = (void *)*((_QWORD *)this + 272);
  if (v661)
  {
    *((_QWORD *)this + 273) = v661;
    operator delete(v661);
  }
  v662 = (void *)*((_QWORD *)this + 269);
  if (v662)
  {
    *((_QWORD *)this + 270) = v662;
    operator delete(v662);
  }
  v663 = (void *)*((_QWORD *)this + 266);
  if (v663)
  {
    *((_QWORD *)this + 267) = v663;
    operator delete(v663);
  }
  v664 = (_QWORD *)*((_QWORD *)this + 263);
  if (v664)
  {
    do
    {
      v665 = (_QWORD *)*v664;
      operator delete(v664);
      v664 = v665;
    }
    while (v665);
  }
  v666 = (void *)*((_QWORD *)this + 261);
  *((_QWORD *)this + 261) = 0;
  if (v666)
    operator delete(v666);
  v667 = (_QWORD *)*((_QWORD *)this + 258);
  if (v667)
  {
    do
    {
      v668 = (_QWORD *)*v667;
      operator delete(v667);
      v667 = v668;
    }
    while (v668);
  }
  v669 = (void *)*((_QWORD *)this + 256);
  *((_QWORD *)this + 256) = 0;
  if (v669)
    operator delete(v669);
  v670 = (_QWORD *)*((_QWORD *)this + 253);
  if (v670)
  {
    do
    {
      v671 = (_QWORD *)*v670;
      operator delete(v670);
      v670 = v671;
    }
    while (v671);
  }
  v672 = (void *)*((_QWORD *)this + 251);
  *((_QWORD *)this + 251) = 0;
  if (v672)
    operator delete(v672);
  v673 = (_QWORD *)*((_QWORD *)this + 248);
  if (v673)
  {
    do
    {
      v674 = (_QWORD *)*v673;
      operator delete(v673);
      v673 = v674;
    }
    while (v674);
  }
  v675 = (void *)*((_QWORD *)this + 246);
  *((_QWORD *)this + 246) = 0;
  if (v675)
    operator delete(v675);
  v676 = (_QWORD *)*((_QWORD *)this + 243);
  if (v676)
  {
    do
    {
      v684 = (_QWORD *)*v676;
      v685 = v676[3];
      v676[3] = 0;
      if (v685)
        (*(void (**)(uint64_t))(*(_QWORD *)v685 + 8))(v685);
      operator delete(v676);
      v676 = v684;
    }
    while (v684);
  }
  v677 = (void *)*((_QWORD *)this + 241);
  *((_QWORD *)this + 241) = 0;
  if (v677)
    operator delete(v677);
  v678 = (void *)*((_QWORD *)this + 238);
  if (v678)
  {
    *((_QWORD *)this + 239) = v678;
    operator delete(v678);
  }
  v679 = *((_QWORD *)this + 235);
  if (v679)
  {
    v680 = *((_QWORD *)this + 236);
    v681 = (void *)*((_QWORD *)this + 235);
    if (v680 != v679)
    {
      do
      {
        v686 = *(std::__shared_weak_count **)(v680 - 8);
        if (v686)
        {
          v687 = (unint64_t *)&v686->__shared_owners_;
          do
            v688 = __ldaxr(v687);
          while (__stlxr(v688 - 1, v687));
          if (!v688)
          {
            ((void (*)(std::__shared_weak_count *))v686->__on_zero_shared)(v686);
            std::__shared_weak_count::__release_weak(v686);
          }
        }
        v680 -= 24;
      }
      while (v680 != v679);
      v681 = (void *)*((_QWORD *)this + 235);
    }
    *((_QWORD *)this + 236) = v679;
    operator delete(v681);
  }
  v689 = (void *)*((_QWORD *)this + 232);
  if (v689)
  {
    *((_QWORD *)this + 233) = v689;
    operator delete(v689);
  }
  v690 = (void *)*((_QWORD *)this + 229);
  if (v690)
  {
    *((_QWORD *)this + 230) = v690;
    operator delete(v690);
  }
  v691 = (_QWORD *)*((_QWORD *)this + 226);
  if (v691)
  {
    do
    {
      v692 = (_QWORD *)*v691;
      operator delete(v691);
      v691 = v692;
    }
    while (v692);
  }
  v693 = (void *)*((_QWORD *)this + 224);
  *((_QWORD *)this + 224) = 0;
  if (v693)
    operator delete(v693);
  v694 = (_QWORD *)*((_QWORD *)this + 221);
  if (v694)
  {
    do
    {
      v695 = (_QWORD *)*v694;
      operator delete(v694);
      v694 = v695;
    }
    while (v695);
  }
  v696 = (void *)*((_QWORD *)this + 219);
  *((_QWORD *)this + 219) = 0;
  if (v696)
    operator delete(v696);
  v697 = (_QWORD *)*((_QWORD *)this + 216);
  if (v697)
  {
    do
    {
      v698 = (_QWORD *)*v697;
      operator delete(v697);
      v697 = v698;
    }
    while (v698);
  }
  v699 = (void *)*((_QWORD *)this + 214);
  *((_QWORD *)this + 214) = 0;
  if (v699)
    operator delete(v699);
  v700 = (_QWORD *)*((_QWORD *)this + 211);
  if (v700)
  {
    do
    {
      v701 = (_QWORD *)*v700;
      operator delete(v700);
      v700 = v701;
    }
    while (v701);
  }
  v702 = (void *)*((_QWORD *)this + 209);
  *((_QWORD *)this + 209) = 0;
  if (v702)
    operator delete(v702);
  v703 = (_QWORD *)*((_QWORD *)this + 206);
  if (v703)
  {
    do
    {
      v727 = (_QWORD *)*v703;
      v728 = v703[3];
      v703[3] = 0;
      if (v728)
        MEMORY[0x1A1AF4E00](v728, 0x1000C40B4868423);
      operator delete(v703);
      v703 = v727;
    }
    while (v727);
  }
  v704 = (void *)*((_QWORD *)this + 204);
  *((_QWORD *)this + 204) = 0;
  if (v704)
    operator delete(v704);
  v705 = (void *)*((_QWORD *)this + 201);
  if (v705)
  {
    *((_QWORD *)this + 202) = v705;
    operator delete(v705);
  }
  v706 = (void *)*((_QWORD *)this + 198);
  if (v706)
  {
    *((_QWORD *)this + 199) = v706;
    operator delete(v706);
  }
  v707 = (void *)*((_QWORD *)this + 195);
  if (v707)
  {
    *((_QWORD *)this + 196) = v707;
    operator delete(v707);
  }
  v708 = (void *)*((_QWORD *)this + 192);
  if (v708)
  {
    *((_QWORD *)this + 193) = v708;
    operator delete(v708);
  }
  v709 = (_QWORD *)*((_QWORD *)this + 189);
  if (v709)
  {
    do
    {
      v710 = (_QWORD *)*v709;
      operator delete(v709);
      v709 = v710;
    }
    while (v710);
  }
  v711 = (void *)*((_QWORD *)this + 187);
  *((_QWORD *)this + 187) = 0;
  if (v711)
    operator delete(v711);
  v712 = (_QWORD *)*((_QWORD *)this + 184);
  if (v712)
  {
    do
    {
      v713 = (_QWORD *)*v712;
      operator delete(v712);
      v712 = v713;
    }
    while (v713);
  }
  v714 = (void *)*((_QWORD *)this + 182);
  *((_QWORD *)this + 182) = 0;
  if (v714)
    operator delete(v714);
  v715 = (_QWORD *)*((_QWORD *)this + 179);
  if (v715)
  {
    do
    {
      v716 = (_QWORD *)*v715;
      operator delete(v715);
      v715 = v716;
    }
    while (v716);
  }
  v717 = (void *)*((_QWORD *)this + 177);
  *((_QWORD *)this + 177) = 0;
  if (v717)
    operator delete(v717);
  v718 = (_QWORD *)*((_QWORD *)this + 174);
  if (v718)
  {
    do
    {
      v719 = (_QWORD *)*v718;
      operator delete(v718);
      v718 = v719;
    }
    while (v719);
  }
  v720 = (void *)*((_QWORD *)this + 172);
  *((_QWORD *)this + 172) = 0;
  if (v720)
    operator delete(v720);
  v721 = (_QWORD *)*((_QWORD *)this + 169);
  if (v721)
  {
    do
    {
      v729 = (_QWORD *)*v721;
      v730 = v721[3];
      v721[3] = 0;
      if (v730)
        (*(void (**)(uint64_t))(*(_QWORD *)v730 + 8))(v730);
      operator delete(v721);
      v721 = v729;
    }
    while (v729);
  }
  v722 = (void *)*((_QWORD *)this + 167);
  *((_QWORD *)this + 167) = 0;
  if (v722)
    operator delete(v722);
  v723 = (void *)*((_QWORD *)this + 164);
  if (v723)
  {
    *((_QWORD *)this + 165) = v723;
    operator delete(v723);
  }
  v724 = *((_QWORD *)this + 161);
  if (v724)
  {
    v725 = *((_QWORD *)this + 162);
    v726 = (void *)*((_QWORD *)this + 161);
    if (v725 != v724)
    {
      do
      {
        v731 = *(std::__shared_weak_count **)(v725 - 8);
        if (v731)
        {
          v732 = (unint64_t *)&v731->__shared_owners_;
          do
            v733 = __ldaxr(v732);
          while (__stlxr(v733 - 1, v732));
          if (!v733)
          {
            ((void (*)(std::__shared_weak_count *))v731->__on_zero_shared)(v731);
            std::__shared_weak_count::__release_weak(v731);
          }
        }
        v725 -= 24;
      }
      while (v725 != v724);
      v726 = (void *)*((_QWORD *)this + 161);
    }
    *((_QWORD *)this + 162) = v724;
    operator delete(v726);
  }
  v734 = (void *)*((_QWORD *)this + 158);
  if (v734)
  {
    *((_QWORD *)this + 159) = v734;
    operator delete(v734);
  }
  v735 = (void *)*((_QWORD *)this + 155);
  if (v735)
  {
    *((_QWORD *)this + 156) = v735;
    operator delete(v735);
  }
  v736 = (_QWORD *)*((_QWORD *)this + 152);
  if (v736)
  {
    do
    {
      v737 = (_QWORD *)*v736;
      operator delete(v736);
      v736 = v737;
    }
    while (v737);
  }
  v738 = (void *)*((_QWORD *)this + 150);
  *((_QWORD *)this + 150) = 0;
  if (v738)
    operator delete(v738);
  v739 = (_QWORD *)*((_QWORD *)this + 147);
  if (v739)
  {
    do
    {
      v740 = (_QWORD *)*v739;
      operator delete(v739);
      v739 = v740;
    }
    while (v740);
  }
  v741 = (void *)*((_QWORD *)this + 145);
  *((_QWORD *)this + 145) = 0;
  if (v741)
    operator delete(v741);
  v742 = (_QWORD *)*((_QWORD *)this + 142);
  if (v742)
  {
    do
    {
      v743 = (_QWORD *)*v742;
      operator delete(v742);
      v742 = v743;
    }
    while (v743);
  }
  v744 = (void *)*((_QWORD *)this + 140);
  *((_QWORD *)this + 140) = 0;
  if (v744)
    operator delete(v744);
  v745 = (_QWORD *)*((_QWORD *)this + 137);
  if (v745)
  {
    do
    {
      v746 = (_QWORD *)*v745;
      operator delete(v745);
      v745 = v746;
    }
    while (v746);
  }
  v747 = (void *)*((_QWORD *)this + 135);
  *((_QWORD *)this + 135) = 0;
  if (v747)
    operator delete(v747);
  v748 = (_QWORD *)*((_QWORD *)this + 132);
  if (v748)
  {
    do
    {
      v776 = (_QWORD *)*v748;
      v777 = v748[3];
      v748[3] = 0;
      if (v777)
        MEMORY[0x1A1AF4E00](v777, 0x10A0C4046FC076FLL);
      operator delete(v748);
      v748 = v776;
    }
    while (v776);
  }
  v749 = (void *)*((_QWORD *)this + 130);
  *((_QWORD *)this + 130) = 0;
  if (v749)
    operator delete(v749);
  v750 = (void *)*((_QWORD *)this + 127);
  if (v750)
  {
    *((_QWORD *)this + 128) = v750;
    operator delete(v750);
  }
  v751 = (void *)*((_QWORD *)this + 124);
  if (v751)
  {
    *((_QWORD *)this + 125) = v751;
    operator delete(v751);
  }
  v752 = (void *)*((_QWORD *)this + 121);
  if (v752)
  {
    *((_QWORD *)this + 122) = v752;
    operator delete(v752);
  }
  v753 = (void *)*((_QWORD *)this + 118);
  if (v753)
  {
    *((_QWORD *)this + 119) = v753;
    operator delete(v753);
  }
  v754 = (_QWORD *)*((_QWORD *)this + 115);
  if (v754)
  {
    do
    {
      v755 = (_QWORD *)*v754;
      operator delete(v754);
      v754 = v755;
    }
    while (v755);
  }
  v756 = (void *)*((_QWORD *)this + 113);
  *((_QWORD *)this + 113) = 0;
  if (v756)
    operator delete(v756);
  v757 = (_QWORD *)*((_QWORD *)this + 110);
  if (v757)
  {
    do
    {
      v758 = (_QWORD *)*v757;
      operator delete(v757);
      v757 = v758;
    }
    while (v758);
  }
  v759 = (void *)*((_QWORD *)this + 108);
  *((_QWORD *)this + 108) = 0;
  if (v759)
    operator delete(v759);
  v760 = (_QWORD *)*((_QWORD *)this + 105);
  if (v760)
  {
    do
    {
      v778 = (_QWORD *)*v760;
      v779 = (_QWORD *)v760[5];
      if (v779)
      {
        do
        {
          v780 = (_QWORD *)*v779;
          operator delete(v779);
          v779 = v780;
        }
        while (v780);
      }
      v781 = (void *)v760[3];
      v760[3] = 0;
      if (v781)
        operator delete(v781);
      operator delete(v760);
      v760 = v778;
    }
    while (v778);
  }
  v761 = (void *)*((_QWORD *)this + 103);
  *((_QWORD *)this + 103) = 0;
  if (v761)
    operator delete(v761);
  v762 = (void *)*((_QWORD *)this + 100);
  if (v762)
  {
    *((_QWORD *)this + 101) = v762;
    operator delete(v762);
  }
  v763 = (void *)*((_QWORD *)this + 97);
  if (v763)
  {
    *((_QWORD *)this + 98) = v763;
    operator delete(v763);
  }
  v764 = (void *)*((_QWORD *)this + 94);
  if (v764)
  {
    *((_QWORD *)this + 95) = v764;
    operator delete(v764);
  }
  v765 = (void *)*((_QWORD *)this + 91);
  if (v765)
  {
    *((_QWORD *)this + 92) = v765;
    operator delete(v765);
  }
  v766 = (_QWORD *)*((_QWORD *)this + 88);
  if (v766)
  {
    do
    {
      v767 = (_QWORD *)*v766;
      operator delete(v766);
      v766 = v767;
    }
    while (v767);
  }
  v768 = (void *)*((_QWORD *)this + 86);
  *((_QWORD *)this + 86) = 0;
  if (v768)
    operator delete(v768);
  v769 = (_QWORD *)*((_QWORD *)this + 83);
  if (v769)
  {
    do
    {
      v770 = (_QWORD *)*v769;
      operator delete(v769);
      v769 = v770;
    }
    while (v770);
  }
  v771 = (void *)*((_QWORD *)this + 81);
  *((_QWORD *)this + 81) = 0;
  if (v771)
    operator delete(v771);
  v772 = (void *)*((_QWORD *)this + 78);
  if (v772)
  {
    *((_QWORD *)this + 79) = v772;
    operator delete(v772);
  }
  v773 = *((_QWORD *)this + 75);
  if (v773)
  {
    v774 = *((_QWORD *)this + 76);
    v775 = (void *)*((_QWORD *)this + 75);
    if (v774 != v773)
    {
      do
      {
        v782 = *(std::__shared_weak_count **)(v774 - 8);
        if (v782)
        {
          v783 = (unint64_t *)&v782->__shared_owners_;
          do
            v784 = __ldaxr(v783);
          while (__stlxr(v784 - 1, v783));
          if (!v784)
          {
            ((void (*)(std::__shared_weak_count *))v782->__on_zero_shared)(v782);
            std::__shared_weak_count::__release_weak(v782);
          }
        }
        v774 -= 16;
      }
      while (v774 != v773);
      v775 = (void *)*((_QWORD *)this + 75);
    }
    *((_QWORD *)this + 76) = v773;
    operator delete(v775);
  }
  v785 = (void *)*((_QWORD *)this + 72);
  if (v785)
  {
    *((_QWORD *)this + 73) = v785;
    operator delete(v785);
  }
  v786 = (void *)*((_QWORD *)this + 69);
  if (v786)
  {
    *((_QWORD *)this + 70) = v786;
    operator delete(v786);
  }
  v787 = (_QWORD *)*((_QWORD *)this + 66);
  if (v787)
  {
    do
    {
      v788 = (_QWORD *)*v787;
      operator delete(v787);
      v787 = v788;
    }
    while (v788);
  }
  v789 = (void *)*((_QWORD *)this + 64);
  *((_QWORD *)this + 64) = 0;
  if (v789)
    operator delete(v789);
  v790 = (_QWORD *)*((_QWORD *)this + 61);
  if (v790)
  {
    do
    {
      v791 = (_QWORD *)*v790;
      operator delete(v790);
      v790 = v791;
    }
    while (v791);
  }
  v792 = (void *)*((_QWORD *)this + 59);
  *((_QWORD *)this + 59) = 0;
  if (v792)
    operator delete(v792);
  v793 = (void *)*((_QWORD *)this + 56);
  if (v793)
  {
    *((_QWORD *)this + 57) = v793;
    operator delete(v793);
  }
  v794 = (void *)*((_QWORD *)this + 53);
  if (v794)
  {
    *((_QWORD *)this + 54) = v794;
    operator delete(v794);
  }
  v795 = (void *)*((_QWORD *)this + 50);
  if (v795)
  {
    *((_QWORD *)this + 51) = v795;
    operator delete(v795);
  }
  v796 = (void *)*((_QWORD *)this + 47);
  if (v796)
  {
    *((_QWORD *)this + 48) = v796;
    operator delete(v796);
  }
  v797 = (_QWORD *)*((_QWORD *)this + 44);
  if (v797)
  {
    do
    {
      v798 = (_QWORD *)*v797;
      operator delete(v797);
      v797 = v798;
    }
    while (v798);
  }
  v799 = (void *)*((_QWORD *)this + 42);
  *((_QWORD *)this + 42) = 0;
  if (v799)
    operator delete(v799);
  v800 = (_QWORD *)*((_QWORD *)this + 39);
  if (v800)
  {
    do
    {
      v801 = (_QWORD *)*v800;
      operator delete(v800);
      v800 = v801;
    }
    while (v801);
  }
  v802 = (void *)*((_QWORD *)this + 37);
  *((_QWORD *)this + 37) = 0;
  if (v802)
    operator delete(v802);
  v844 = 0;
  v845 = 0;
  v843 = &v844;
  v803 = (_QWORD *)*((_QWORD *)this + 36);
  if (v803)
  {
    v804 = 0;
    do
    {
      v805 = &v844;
      v806 = &v844;
      if (v844)
      {
        v807 = v844;
        while (1)
        {
          while (1)
          {
            v806 = (uint64_t **)v807;
            v808 = v807[4];
            if ((unint64_t)v803 >= v808)
              break;
            v807 = *v806;
            v805 = v806;
            if (!*v806)
              goto LABEL_1286;
          }
          if (v808 >= (unint64_t)v803)
            break;
          v807 = v806[1];
          if (!v807)
          {
            v805 = v806 + 1;
            goto LABEL_1286;
          }
        }
      }
      else
      {
LABEL_1286:
        v809 = (uint64_t *)operator new(0x28uLL);
        v809[4] = (uint64_t)v803;
        *v809 = 0;
        v809[1] = 0;
        v809[2] = (uint64_t)v806;
        *v805 = v809;
        if (*v843)
        {
          v843 = (uint64_t **)*v843;
          v809 = *v805;
        }
        std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(v844, v809);
        v804 = ++v845;
        v803 = (_QWORD *)*((_QWORD *)this + 36);
      }
      v803 = (_QWORD *)*v803;
      *((_QWORD *)this + 36) = v803;
    }
    while (v803);
  }
  else
  {
    v804 = 0;
  }
  v810 = *((_QWORD *)this + 34);
  v811 = (char *)*((_QWORD *)this + 31);
  v812 = (char *)this + 256;
  v813 = v804 == *((_QWORD *)this + 33) * v810 || v811 == v812;
  if (v813 || v810 == 0)
  {
    if (v811 == v812)
      goto LABEL_1321;
    goto LABEL_1340;
  }
  v815 = 1;
  do
  {
    if (v815)
    {
      v816 = 0;
      v817 = *((_QWORD *)v811 + 4);
      do
      {
        v818 = (void (***)(_QWORD))(v817 + 120 * v816);
        v819 = v844;
        if (!v844)
          goto LABEL_1302;
        v820 = &v844;
        do
        {
          v821 = v819;
          v822 = v820;
          v823 = v819[4];
          v824 = (uint64_t **)(v819 + 1);
          if (v823 >= (unint64_t)v818)
          {
            v824 = (uint64_t **)v821;
            v820 = (uint64_t **)v821;
          }
          v819 = *v824;
        }
        while (v819);
        if (v820 == &v844)
          goto LABEL_1302;
        if (v823 < (unint64_t)v818)
          v821 = (uint64_t *)v822;
        if ((unint64_t)v818 < v821[4])
        {
LABEL_1302:
          (**v818)(v818);
          v810 = *((_QWORD *)this + 34);
        }
        ++v816;
        v815 = v810;
      }
      while (v816 < v810);
    }
    v825 = (char *)*((_QWORD *)v811 + 1);
    if (v825)
    {
      do
      {
        v826 = v825;
        v825 = *(char **)v825;
      }
      while (v825);
    }
    else
    {
      do
      {
        v826 = (char *)*((_QWORD *)v811 + 2);
        v813 = *(_QWORD *)v826 == (_QWORD)v811;
        v811 = v826;
      }
      while (!v813);
    }
    v811 = v826;
  }
  while (v826 != v812);
  v811 = (char *)*((_QWORD *)this + 31);
  if (v811 != v812)
  {
    do
    {
LABEL_1340:
      free(*((void **)v811 + 4));
      v839 = (char *)*((_QWORD *)v811 + 1);
      if (v839)
      {
        do
        {
          v840 = v839;
          v839 = *(char **)v839;
        }
        while (v839);
      }
      else
      {
        do
        {
          v840 = (char *)*((_QWORD *)v811 + 2);
          v813 = *(_QWORD *)v840 == (_QWORD)v811;
          v811 = v840;
        }
        while (!v813);
      }
      v811 = v840;
    }
    while (v840 != v812);
  }
LABEL_1321:
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((_QWORD **)this + 32));
  *((_QWORD *)this + 32) = 0;
  *((_QWORD *)this + 33) = 0;
  *((_QWORD *)this + 31) = v812;
  *((_QWORD *)this + 36) = 0;
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(v844);
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((_QWORD **)this + 32));
  v827 = (_QWORD *)*((_QWORD *)this + 28);
  if (v827)
  {
    do
    {
      v841 = (_QWORD *)*v827;
      v842 = (void *)v827[3];
      if (v842)
      {
        v827[4] = v842;
        operator delete(v842);
      }
      operator delete(v827);
      v827 = v841;
    }
    while (v841);
  }
  v828 = (void *)*((_QWORD *)this + 26);
  *((_QWORD *)this + 26) = 0;
  if (v828)
    operator delete(v828);
  v829 = (void *)*((_QWORD *)this + 23);
  if (v829)
  {
    *((_QWORD *)this + 24) = v829;
    operator delete(v829);
  }
  v830 = (_QWORD *)*((_QWORD *)this + 20);
  if (v830)
  {
    do
    {
      v831 = (_QWORD *)*v830;
      operator delete(v830);
      v830 = v831;
    }
    while (v831);
  }
  v832 = (void *)*((_QWORD *)this + 18);
  *((_QWORD *)this + 18) = 0;
  if (v832)
    operator delete(v832);
  v833 = (_QWORD *)*((_QWORD *)this + 15);
  if (v833)
  {
    do
    {
      v834 = (_QWORD *)*v833;
      operator delete(v833);
      v833 = v834;
    }
    while (v834);
  }
  v835 = (void *)*((_QWORD *)this + 13);
  *((_QWORD *)this + 13) = 0;
  if (v835)
    operator delete(v835);
  v836 = (_QWORD *)*((_QWORD *)this + 10);
  if (v836)
  {
    do
    {
      v837 = (_QWORD *)*v836;
      operator delete(v836);
      v836 = v837;
    }
    while (v837);
  }
  v838 = (void *)*((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v838)
    operator delete(v838);
}

void sub_19FAAE77C(_Unwind_Exception *a1)
{
  uint64_t v1;
  _QWORD *v2;

  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(v2);
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(_QWORD **)(v1 + 256));
  _Unwind_Resume(a1);
}

uint64_t md::data_array_cache<md::ls::ColorData,geo::handle<md::ls::ColorData>,md::MaterialKey,md::ls::ColorData,md::MaterialKeyHasher>::~data_array_cache(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;
  _QWORD *v5;
  _QWORD *v6;
  void *v7;
  _QWORD *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  _QWORD *v14;
  _QWORD *v15;
  void *v16;
  _QWORD *v17;
  _QWORD *v18;
  void *v19;
  _QWORD *v21;
  uint64_t v22;

  v2 = *(_QWORD **)(a1 + 272);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = *(void **)(a1 + 256);
  *(_QWORD *)(a1 + 256) = 0;
  if (v4)
    operator delete(v4);
  v5 = *(_QWORD **)(a1 + 232);
  if (v5)
  {
    do
    {
      v6 = (_QWORD *)*v5;
      operator delete(v5);
      v5 = v6;
    }
    while (v6);
  }
  v7 = *(void **)(a1 + 216);
  *(_QWORD *)(a1 + 216) = 0;
  if (v7)
    operator delete(v7);
  v8 = *(_QWORD **)(a1 + 192);
  if (v8)
  {
    do
    {
      v21 = (_QWORD *)*v8;
      v22 = v8[3];
      v8[3] = 0;
      if (v22)
        MEMORY[0x1A1AF4E00](v22, 0x1000C40A86A77D5);
      operator delete(v8);
      v8 = v21;
    }
    while (v21);
  }
  v9 = *(void **)(a1 + 176);
  *(_QWORD *)(a1 + 176) = 0;
  if (v9)
    operator delete(v9);
  v10 = *(void **)(a1 + 152);
  if (v10)
  {
    *(_QWORD *)(a1 + 160) = v10;
    operator delete(v10);
  }
  v11 = *(void **)(a1 + 128);
  if (v11)
  {
    *(_QWORD *)(a1 + 136) = v11;
    operator delete(v11);
  }
  v12 = *(void **)(a1 + 104);
  if (v12)
  {
    *(_QWORD *)(a1 + 112) = v12;
    operator delete(v12);
  }
  v13 = *(void **)(a1 + 80);
  if (v13)
  {
    *(_QWORD *)(a1 + 88) = v13;
    operator delete(v13);
  }
  v14 = *(_QWORD **)(a1 + 56);
  if (v14)
  {
    do
    {
      v15 = (_QWORD *)*v14;
      operator delete(v14);
      v14 = v15;
    }
    while (v15);
  }
  v16 = *(void **)(a1 + 40);
  *(_QWORD *)(a1 + 40) = 0;
  if (v16)
    operator delete(v16);
  v17 = *(_QWORD **)(a1 + 16);
  if (v17)
  {
    do
    {
      v18 = (_QWORD *)*v17;
      operator delete(v17);
      v17 = v18;
    }
    while (v18);
  }
  v19 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v19)
    operator delete(v19);
  return a1;
}

uint64_t md::data_array_cache<md::ls::ZIndex,geo::handle<md::ls::ZIndex>,md::MaterialKey,md::ls::ZIndex,md::MaterialKeyHasher>::~data_array_cache(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;
  _QWORD *v5;
  _QWORD *v6;
  void *v7;
  _QWORD *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  _QWORD *v14;
  _QWORD *v15;
  void *v16;
  _QWORD *v17;
  _QWORD *v18;
  void *v19;
  _QWORD *v21;
  uint64_t v22;

  v2 = *(_QWORD **)(a1 + 272);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = *(void **)(a1 + 256);
  *(_QWORD *)(a1 + 256) = 0;
  if (v4)
    operator delete(v4);
  v5 = *(_QWORD **)(a1 + 232);
  if (v5)
  {
    do
    {
      v6 = (_QWORD *)*v5;
      operator delete(v5);
      v5 = v6;
    }
    while (v6);
  }
  v7 = *(void **)(a1 + 216);
  *(_QWORD *)(a1 + 216) = 0;
  if (v7)
    operator delete(v7);
  v8 = *(_QWORD **)(a1 + 192);
  if (v8)
  {
    do
    {
      v21 = (_QWORD *)*v8;
      v22 = v8[3];
      v8[3] = 0;
      if (v22)
        MEMORY[0x1A1AF4E00](v22, 0x1000C4090D0E795);
      operator delete(v8);
      v8 = v21;
    }
    while (v21);
  }
  v9 = *(void **)(a1 + 176);
  *(_QWORD *)(a1 + 176) = 0;
  if (v9)
    operator delete(v9);
  v10 = *(void **)(a1 + 152);
  if (v10)
  {
    *(_QWORD *)(a1 + 160) = v10;
    operator delete(v10);
  }
  v11 = *(void **)(a1 + 128);
  if (v11)
  {
    *(_QWORD *)(a1 + 136) = v11;
    operator delete(v11);
  }
  v12 = *(void **)(a1 + 104);
  if (v12)
  {
    *(_QWORD *)(a1 + 112) = v12;
    operator delete(v12);
  }
  v13 = *(void **)(a1 + 80);
  if (v13)
  {
    *(_QWORD *)(a1 + 88) = v13;
    operator delete(v13);
  }
  v14 = *(_QWORD **)(a1 + 56);
  if (v14)
  {
    do
    {
      v15 = (_QWORD *)*v14;
      operator delete(v14);
      v14 = v15;
    }
    while (v15);
  }
  v16 = *(void **)(a1 + 40);
  *(_QWORD *)(a1 + 40) = 0;
  if (v16)
    operator delete(v16);
  v17 = *(_QWORD **)(a1 + 16);
  if (v17)
  {
    do
    {
      v18 = (_QWORD *)*v17;
      operator delete(v17);
      v17 = v18;
    }
    while (v18);
  }
  v19 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v19)
    operator delete(v19);
  return a1;
}

uint64_t md::data_array_cache<md::ls::MaterialVisibilityOptions,geo::handle<md::ls::MaterialVisibilityOptions>,md::MaterialKey,md::ls::MaterialVisibilityOptions,md::MaterialKeyHasher>::~data_array_cache(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;
  _QWORD *v5;
  _QWORD *v6;
  void *v7;
  _QWORD *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  _QWORD *v14;
  _QWORD *v15;
  void *v16;
  _QWORD *v17;
  _QWORD *v18;
  void *v19;
  _QWORD *v21;
  uint64_t v22;

  v2 = *(_QWORD **)(a1 + 272);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = *(void **)(a1 + 256);
  *(_QWORD *)(a1 + 256) = 0;
  if (v4)
    operator delete(v4);
  v5 = *(_QWORD **)(a1 + 232);
  if (v5)
  {
    do
    {
      v6 = (_QWORD *)*v5;
      operator delete(v5);
      v5 = v6;
    }
    while (v6);
  }
  v7 = *(void **)(a1 + 216);
  *(_QWORD *)(a1 + 216) = 0;
  if (v7)
    operator delete(v7);
  v8 = *(_QWORD **)(a1 + 192);
  if (v8)
  {
    do
    {
      v21 = (_QWORD *)*v8;
      v22 = v8[3];
      v8[3] = 0;
      if (v22)
        MEMORY[0x1A1AF4E00](v22, 0x1000C4033FC2DF1);
      operator delete(v8);
      v8 = v21;
    }
    while (v21);
  }
  v9 = *(void **)(a1 + 176);
  *(_QWORD *)(a1 + 176) = 0;
  if (v9)
    operator delete(v9);
  v10 = *(void **)(a1 + 152);
  if (v10)
  {
    *(_QWORD *)(a1 + 160) = v10;
    operator delete(v10);
  }
  v11 = *(void **)(a1 + 128);
  if (v11)
  {
    *(_QWORD *)(a1 + 136) = v11;
    operator delete(v11);
  }
  v12 = *(void **)(a1 + 104);
  if (v12)
  {
    *(_QWORD *)(a1 + 112) = v12;
    operator delete(v12);
  }
  v13 = *(void **)(a1 + 80);
  if (v13)
  {
    *(_QWORD *)(a1 + 88) = v13;
    operator delete(v13);
  }
  v14 = *(_QWORD **)(a1 + 56);
  if (v14)
  {
    do
    {
      v15 = (_QWORD *)*v14;
      operator delete(v14);
      v14 = v15;
    }
    while (v15);
  }
  v16 = *(void **)(a1 + 40);
  *(_QWORD *)(a1 + 40) = 0;
  if (v16)
    operator delete(v16);
  v17 = *(_QWORD **)(a1 + 16);
  if (v17)
  {
    do
    {
      v18 = (_QWORD *)*v17;
      operator delete(v17);
      v17 = v18;
    }
    while (v18);
  }
  v19 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v19)
    operator delete(v19);
  return a1;
}

uint64_t md::data_array_cache<md::MaterialIDStorage,geo::handle<md::MaterialIDStorage>,md::MaterialKey,std::shared_ptr<gms::Material<ggl::Texture2D>>,md::MaterialKeyHasher>::~data_array_cache(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;
  _QWORD *v5;
  _QWORD *v6;
  void *v7;
  _QWORD *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  _QWORD *v14;
  _QWORD *v15;
  void *v16;
  _QWORD *v17;
  _QWORD *v18;
  void *v19;
  _QWORD *v21;
  uint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *p_shared_owners;
  unint64_t v25;

  v2 = *(_QWORD **)(a1 + 272);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = *(void **)(a1 + 256);
  *(_QWORD *)(a1 + 256) = 0;
  if (v4)
    operator delete(v4);
  v5 = *(_QWORD **)(a1 + 232);
  if (v5)
  {
    do
    {
      v6 = (_QWORD *)*v5;
      operator delete(v5);
      v5 = v6;
    }
    while (v6);
  }
  v7 = *(void **)(a1 + 216);
  *(_QWORD *)(a1 + 216) = 0;
  if (v7)
    operator delete(v7);
  v8 = *(_QWORD **)(a1 + 192);
  if (v8)
  {
    do
    {
      v21 = (_QWORD *)*v8;
      v22 = v8[3];
      v8[3] = 0;
      if (v22)
      {
        v23 = *(std::__shared_weak_count **)(v22 + 8);
        if (v23)
        {
          p_shared_owners = (unint64_t *)&v23->__shared_owners_;
          do
            v25 = __ldaxr(p_shared_owners);
          while (__stlxr(v25 - 1, p_shared_owners));
          if (!v25)
          {
            ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
            std::__shared_weak_count::__release_weak(v23);
          }
        }
        MEMORY[0x1A1AF4E00](v22, 0x20C40A4A59CD2);
      }
      operator delete(v8);
      v8 = v21;
    }
    while (v21);
  }
  v9 = *(void **)(a1 + 176);
  *(_QWORD *)(a1 + 176) = 0;
  if (v9)
    operator delete(v9);
  v10 = *(void **)(a1 + 152);
  if (v10)
  {
    *(_QWORD *)(a1 + 160) = v10;
    operator delete(v10);
  }
  v11 = *(void **)(a1 + 128);
  if (v11)
  {
    *(_QWORD *)(a1 + 136) = v11;
    operator delete(v11);
  }
  v12 = *(void **)(a1 + 104);
  if (v12)
  {
    *(_QWORD *)(a1 + 112) = v12;
    operator delete(v12);
  }
  v13 = *(void **)(a1 + 80);
  if (v13)
  {
    *(_QWORD *)(a1 + 88) = v13;
    operator delete(v13);
  }
  v14 = *(_QWORD **)(a1 + 56);
  if (v14)
  {
    do
    {
      v15 = (_QWORD *)*v14;
      operator delete(v14);
      v14 = v15;
    }
    while (v15);
  }
  v16 = *(void **)(a1 + 40);
  *(_QWORD *)(a1 + 40) = 0;
  if (v16)
    operator delete(v16);
  v17 = *(_QWORD **)(a1 + 16);
  if (v17)
  {
    do
    {
      v18 = (_QWORD *)*v17;
      operator delete(v17);
      v17 = v18;
    }
    while (v18);
  }
  v19 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v19)
    operator delete(v19);
  return a1;
}

void std::default_delete<md::MapEngineSettings>::operator()[abi:nn180100](uint64_t a1)
{
  _QWORD *v2;
  void *v3;
  void *v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;

  v2 = *(_QWORD **)(a1 + 72);
  if (!v2)
  {
LABEL_2:
    v3 = *(void **)(a1 + 56);
    *(_QWORD *)(a1 + 56) = 0;
    if (v3)
      operator delete(v3);
    std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(_QWORD **)(a1 + 32));
    v4 = *(void **)a1;
    if (*(_QWORD *)a1)
    {
      *(_QWORD *)(a1 + 8) = v4;
      operator delete(v4);
    }
    JUMPOUT(0x1A1AF4E00);
  }
  while (1)
  {
    v7 = (_QWORD *)*v2;
    v5 = (_QWORD *)v2[6];
    if (v5 == v2 + 3)
    {
      v5 = v2 + 3;
      v6 = 4;
    }
    else
    {
      if (!v5)
        goto LABEL_9;
      v6 = 5;
    }
    (*(void (**)(void))(*v5 + 8 * v6))();
LABEL_9:
    operator delete(v2);
    v2 = v7;
    if (!v7)
      goto LABEL_2;
  }
}

md::VKMRenderResourcesStore **std::unique_ptr<md::VKMRenderResourcesStore>::~unique_ptr[abi:nn180100](md::VKMRenderResourcesStore **a1)
{
  md::VKMRenderResourcesStore *v2;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    md::VKMRenderResourcesStore::~VKMRenderResourcesStore(v2);
    MEMORY[0x1A1AF4E00]();
  }
  return a1;
}

uint64_t *std::unique_ptr<md::MaterialResourceStore>::~unique_ptr[abi:nn180100](uint64_t *a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    md::data_array_cache<md::ls::ColorData,geo::handle<md::ls::ColorData>,md::MaterialKey,md::ls::ColorData,md::MaterialKeyHasher>::~data_array_cache(v2 + 904);
    md::data_array_cache<md::ls::ZIndex,geo::handle<md::ls::ZIndex>,md::MaterialKey,md::ls::ZIndex,md::MaterialKeyHasher>::~data_array_cache(v2 + 608);
    md::data_array_cache<md::ls::MaterialVisibilityOptions,geo::handle<md::ls::MaterialVisibilityOptions>,md::MaterialKey,md::ls::MaterialVisibilityOptions,md::MaterialKeyHasher>::~data_array_cache(v2 + 312);
    md::data_array_cache<md::MaterialIDStorage,geo::handle<md::MaterialIDStorage>,md::MaterialKey,std::shared_ptr<gms::Material<ggl::Texture2D>>,md::MaterialKeyHasher>::~data_array_cache(v2 + 16);
    v3 = *(std::__shared_weak_count **)(v2 + 8);
    if (v3)
    {
      p_shared_owners = (unint64_t *)&v3->__shared_owners_;
      do
        v5 = __ldaxr(p_shared_owners);
      while (__stlxr(v5 - 1, p_shared_owners));
      if (!v5)
      {
        ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
        std::__shared_weak_count::__release_weak(v3);
      }
    }
    MEMORY[0x1A1AF4E00](v2, 0x10B0C40EBD1273DLL);
  }
  return a1;
}

uint64_t *std::unique_ptr<md::ConfigSettingProvider>::~unique_ptr[abi:nn180100](uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    v3 = md::Monitorable<md::ConfigValue<GEOConfigKeyDouble,double>>::~Monitorable(v2);
    MEMORY[0x1A1AF4E00](v3, 0x10A0C40A25DD1A6);
  }
  return a1;
}

uint64_t ___ZN2md9MapEngineC2Efffb16VKMapViewPurposeRKNSt3__110shared_ptrINS_11TaskContextEEE12VKMapPurposeNS2_10unique_ptrINS_16AnimationManagerENS2_14default_deleteISA_EEEERKN3geo10linear_mapINS_16MapEngineSettingExNS2_8equal_toISG_EENS2_9allocatorINS2_4pairISG_xEEEENS2_6vectorISL_SM_EEEEyP24GEOApplicationAuditToken_block_invoke(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  v1 = *(_QWORD *)(a1 + 32);
  result = GEOConfigGetUInteger();
  *(_QWORD *)(v1 + 1288) = result;
  return result;
}

uint64_t ___ZN2md9MapEngineC2Efffb16VKMapViewPurposeRKNSt3__110shared_ptrINS_11TaskContextEEE12VKMapPurposeNS2_10unique_ptrINS_16AnimationManagerENS2_14default_deleteISA_EEEERKN3geo10linear_mapINS_16MapEngineSettingExNS2_8equal_toISG_EENS2_9allocatorINS2_4pairISG_xEEEENS2_6vectorISL_SM_EEEEyP24GEOApplicationAuditToken_block_invoke_2(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  v1 = *(_QWORD *)(a1 + 32);
  result = GEOConfigGetUInteger();
  *(_QWORD *)(v1 + 1296) = result;
  return result;
}

uint64_t ___ZN2md9MapEngineC2Efffb16VKMapViewPurposeRKNSt3__110shared_ptrINS_11TaskContextEEE12VKMapPurposeNS2_10unique_ptrINS_16AnimationManagerENS2_14default_deleteISA_EEEERKN3geo10linear_mapINS_16MapEngineSettingExNS2_8equal_toISG_EENS2_9allocatorINS2_4pairISG_xEEEENS2_6vectorISL_SM_EEEEyP24GEOApplicationAuditToken_block_invoke_3(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  v1 = *(_QWORD *)(a1 + 32);
  result = GEOConfigGetUInteger();
  *(_QWORD *)(v1 + 1304) = result;
  return result;
}

uint64_t ___ZN2md9MapEngineC2Efffb16VKMapViewPurposeRKNSt3__110shared_ptrINS_11TaskContextEEE12VKMapPurposeNS2_10unique_ptrINS_16AnimationManagerENS2_14default_deleteISA_EEEERKN3geo10linear_mapINS_16MapEngineSettingExNS2_8equal_toISG_EENS2_9allocatorINS2_4pairISG_xEEEENS2_6vectorISL_SM_EEEEyP24GEOApplicationAuditToken_block_invoke_4(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v3;

  v1 = *(_QWORD *)(a1 + 32);
  result = GEOConfigGetDouble();
  *(_QWORD *)(v1 + 1312) = v3;
  return result;
}

uint64_t ___ZN2md9MapEngineC2Efffb16VKMapViewPurposeRKNSt3__110shared_ptrINS_11TaskContextEEE12VKMapPurposeNS2_10unique_ptrINS_16AnimationManagerENS2_14default_deleteISA_EEEERKN3geo10linear_mapINS_16MapEngineSettingExNS2_8equal_toISG_EENS2_9allocatorINS2_4pairISG_xEEEENS2_6vectorISL_SM_EEEEyP24GEOApplicationAuditToken_block_invoke_5(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  v1 = *(_QWORD *)(a1 + 32);
  result = GEOConfigGetBOOL();
  *(_BYTE *)(v1 + 1320) = result;
  return result;
}

_QWORD *md::MapEngine::updateForConfigurationAndMode(md::MapEngine *this, double a2)
{
  NSObject *v4;
  NSObject *v5;
  os_signpost_id_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned __int8 *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  long double *v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  int v28;
  void *v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unsigned int v43;
  void *v44;
  char v45;
  double v46;
  double v47;
  double v48;
  long double v49;
  long double v50;
  double v51;
  double v52;
  double v53;
  double v54;
  double v55;
  long double v56;
  long double v57;
  double v58;
  double v59;
  long double v60;
  double v61;
  double v62;
  double v63;
  long double v64;
  double v65;
  double v66;
  double v67;
  _BOOL4 v68;
  int v69;
  int v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  int v79;
  float v80;
  char v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  void *v90;
  float v91;
  float v92;
  float v93;
  int v94;
  int v95;
  float v96;
  float v97;
  float v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  NSObject *v103;
  int v104;
  int v105;
  double v106;
  _BOOL4 v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  float v112;
  char v113;
  int v114;
  BOOL v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  float v124;
  uint64_t *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  BOOL v131;
  int v132;
  unsigned __int8 *v133;
  NSObject *v134;
  uint64_t v135;
  unint64_t v136;
  const char *v137;
  char *v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  int v143;
  int v144;
  uint64_t v145;
  int v146;
  NSObject *v147;
  uint64_t v148;
  unint64_t v149;
  const char *v150;
  unint64_t v151;
  const char *v152;
  const char *v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t *v158;
  uint64_t *v159;
  uint64_t v160;
  std::__shared_weak_count *v161;
  uint64_t v162;
  unint64_t *p_shared_owners;
  unint64_t v164;
  unint64_t v165;
  uint64_t v166;
  int v167;
  uint64_t v168;
  double v169;
  double v170;
  double v171;
  double v172;
  double v173;
  long double v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  char v178;
  _QWORD *result;
  uint64_t v180;
  const QuadTile *v181;
  long double v182;
  long double v183;
  float64x2_t v184;
  double v190;
  __int16 v191;
  int v192;
  __int128 v193;
  uint64_t v194;
  __int128 v195;
  _QWORD v196[3];
  _QWORD *v197;
  _QWORD v198[3];
  _QWORD *v199;
  _QWORD v200[3];
  _QWORD *v201;
  _BYTE buf[22];
  __int16 v203;
  const char *v204;
  uint64_t v205;

  v205 = *MEMORY[0x1E0C80C00];
  v198[0] = &off_1E427CC00;
  v198[1] = this;
  v199 = v198;
  v200[0] = &off_1E427CC48;
  v196[0] = &off_1E427CC48;
  v196[1] = this;
  v197 = v196;
  v201 = v200;
  v200[1] = this;
  if (GEOGetVectorKitPerformanceLog_onceToken != -1)
    dispatch_once(&GEOGetVectorKitPerformanceLog_onceToken, &__block_literal_global_13_11780);
  v4 = (id)GEOGetVectorKitPerformanceLog_log;
  v5 = v4;
  v6 = *((_QWORD *)this + 152);
  if (v6 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v4))
  {
    *(_WORD *)buf = 0;
    _os_signpost_emit_with_name_impl(&dword_19F029000, v5, OS_SIGNPOST_INTERVAL_BEGIN, v6, "ApplyConfiguration", (const char *)&unk_1A0189141, buf, 2u);
  }

  v7 = v197;
  if (v197 == v196)
  {
    v8 = 4;
    v7 = v196;
  }
  else
  {
    if (!v197)
      goto LABEL_11;
    v8 = 5;
  }
  (*(void (**)(void))(*v7 + 8 * v8))();
LABEL_11:
  v9 = v199;
  if (v199 == v198)
  {
    v10 = 4;
    v9 = v198;
  }
  else
  {
    if (!v199)
      goto LABEL_16;
    v10 = 5;
  }
  (*(void (**)(void))(*v9 + 8 * v10))();
LABEL_16:
  v11 = *((_QWORD *)this + 151);
  v12 = (unsigned __int8 *)*((_QWORD *)this + 133);
  v13 = (uint64_t *)*((_QWORD *)this + 141);
  v14 = *v13;
  v15 = v13[1];
  v16 = *v13;
  if (*v13 != v15)
  {
    v16 = *v13;
    while (*(_BYTE *)v16 != 29)
    {
      v16 += 16;
      if (v16 == v15)
        goto LABEL_23;
    }
  }
  if (v16 == v15)
LABEL_23:
    v17 = 0;
  else
    v17 = *(_QWORD *)(v16 + 8);
  v18 = (long double *)(v12 + 8);
  if (v14 != v15)
  {
    while (*(_BYTE *)v14 != 20)
    {
      v14 += 16;
      if (v14 == v15)
        goto LABEL_30;
    }
  }
  if (v14 == v15)
LABEL_30:
    LODWORD(v19) = 0;
  else
    v19 = *(_QWORD *)(v14 + 8);
  v20 = *(_OWORD *)v18;
  *(_QWORD *)(v11 + 32) = *((_QWORD *)v12 + 3);
  *(_OWORD *)(v11 + 16) = v20;
  v22 = *v13;
  v21 = v13[1];
  if (v22 != v21)
  {
    while (*(_BYTE *)v22 != 38)
    {
      v22 += 16;
      if (v22 == v21)
        goto LABEL_37;
    }
  }
  if (v22 == v21)
LABEL_37:
    v194 = 0;
  else
    v194 = *(_QWORD *)(v22 + 8);
  +[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings");
  v23 = (void *)objc_claimAutoreleasedReturnValue();
  v24 = objc_msgSend(v23, "daVinciForceElevatedGround");

  if (v19 > 8 || ((1 << v19) & 0x121) == 0)
  {
    *(_BYTE *)(v11 + 42) = 0;
    *(_BYTE *)(v11 + 40) = 0;
    if (*(_DWORD *)(v11 + 112) != (_DWORD)v19)
    {
      v34 = *(_QWORD *)(v11 + 8);
      if (v34)
      {
        v35 = *(_QWORD *)(v34 + 32);
        v36 = *(_QWORD *)(v34 + 40);
        v37 = v35;
        if (v35 != v36)
        {
          v37 = v35;
          while (*(_WORD *)v37 != 27)
          {
            v37 += 16;
            if (v37 == v36)
              goto LABEL_68;
          }
        }
        if (v37 != v36)
        {
          v39 = *(_QWORD *)(v37 + 8);
          if (v39)
            *(_BYTE *)(v39 + 618) = 0;
        }
LABEL_68:
        v40 = v35;
        if (v35 != v36)
        {
          v40 = v35;
          while (*(_WORD *)v40 != 32)
          {
            v40 += 16;
            if (v40 == v36)
              goto LABEL_76;
          }
        }
        if (v40 != v36)
        {
          v41 = *(_QWORD *)(v40 + 8);
          if (v41)
            *(_BYTE *)(v41 + 618) = 0;
        }
LABEL_76:
        if (v35 != v36)
        {
          while (*(_WORD *)v35 != 30)
          {
            v35 += 16;
            if (v35 == v36)
              goto LABEL_83;
          }
        }
        if (v35 != v36)
        {
          v42 = *(_QWORD *)(v35 + 8);
          if (v42)
            *(_BYTE *)(v42 + 618) = 0;
        }
      }
LABEL_83:
      *(_DWORD *)(v11 + 112) = v19;
    }
    goto LABEL_253;
  }
  *(_DWORD *)(v11 + 112) = v19;
  v25 = 2;
  if ((v17 & 0xFFFFFFFFFFFFFFFDLL) != 1)
    v25 = v17;
  if (*(_BYTE *)(v11 + 136))
    v26 = v25;
  else
    v26 = v17;
  if ((_DWORD)v19 == 5 && !v194)
  {
    v27 = *(_OWORD *)v18;
    *(_QWORD *)(v11 + 32) = *((_QWORD *)v12 + 3);
    *(_OWORD *)(v11 + 16) = v27;
  }
  *(_BYTE *)(v11 + 86) = *(_BYTE *)(v11 + 80);
  *(_BYTE *)(v11 + 87) = *(_BYTE *)(v11 + 41);
  v28 = *v12;
  +[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings");
  v29 = (void *)objc_claimAutoreleasedReturnValue();
  v30 = objc_msgSend(v29, "shouldFreezeLayoutCamera");

  if ((v30 & 1) == 0)
  {
    if (!v26)
    {
LABEL_107:
      *(_BYTE *)(v11 + 40) = 0;
      goto LABEL_108;
    }
    if (v24)
    {
LABEL_105:
      *(_BYTE *)(v11 + 40) = 1;
LABEL_108:
      *(_BYTE *)(v11 + 42) = 0;
      goto LABEL_109;
    }
    v31 = *(_QWORD *)(v11 + 8);
    if (v31)
    {
      v32 = *(_QWORD *)(v31 + 40);
      v33 = *(_QWORD *)(v31 + 32);
      if (v33 != v32)
      {
        while (*(_WORD *)v33 != 27)
          v33 += 16;
      }
      (*(void (**)(_BYTE *__return_ptr))(**(_QWORD **)(v33 + 8) + 72))(buf);
      if (buf[0])
        v38 = *(_DWORD *)&buf[4];
      else
        v38 = 512;
    }
    else
    {
      v38 = 512;
    }
    *(_BYTE *)(v11 + 44) = 0;
    if ((v28 - 1) >= 3)
    {
      if (v28)
      {
        *(_BYTE *)(v11 + 43) = 0;
LABEL_106:
        if (v26 != 2)
        {
          v181 = *(const QuadTile **)v11;
          if (*(_QWORD *)v11)
          {
            v193 = *(_OWORD *)(v11 + 24);
            v182 = tan(*(double *)(v11 + 16) * 0.5 + 0.785398163);
            v183 = log(v182);
            *(_QWORD *)&v184.f64[0] = v193;
            v184.f64[1] = v183;
            __asm { FMOV            V1.2D, #0.5 }
            *(float64x2_t *)buf = vmlaq_f64(_Q1, (float64x2_t)vdupq_n_s64(0x3FC45F306DC9C883uLL), v184);
            md::DaVinciGroundMetaData::flagsForPoint((char *)&v195, v181, (double *)buf);
            v190 = a2 * 1000.0;
            if (!*(_BYTE *)(v11 + 104))
            {
              *(double *)(v11 + 96) = v190;
              *(_BYTE *)(v11 + 104) = 1;
            }
            if ((_BYTE)v195)
            {
              *(_WORD *)(v11 + 41) = 257;
              v191 = BYTE1(v195);
              v192 = (BYTE1(v195) >> 1) & 1;
              *(_BYTE *)(v11 + 40) = (BYTE1(v195) & 2) != 0;
              *(_BYTE *)(v11 + 43) = v192;
              *(_WORD *)(v11 + 45) = v191 | 0x100;
              *(double *)(v11 + 96) = v190;
              *(_BYTE *)(v11 + 104) = 1;
              *(_BYTE *)(v11 + 88) = 0;
              goto LABEL_109;
            }
            *(_BYTE *)(v11 + 88) = v190 - *(double *)(v11 + 96) > 2000.0;
          }
          *(_BYTE *)(v11 + 42) = 1;
          *(_WORD *)(v11 + 40) = 0;
          goto LABEL_109;
        }
        goto LABEL_107;
      }
      v53 = *((double *)v12 + 46);
      v52 = *((double *)v12 + 47);
      v54 = v52 * v53;
      if (v52 >= v53)
      {
        v58 = *((double *)v12 + 57);
      }
      else
      {
        if (v54 <= 0.0)
          v55 = 1.0;
        else
          v55 = v52 / v53;
        v56 = tan(*((double *)v12 + 57) * 0.5);
        v57 = atan(v55 * v56);
        v58 = v57 + v57;
      }
      v64 = tan(v58 * 0.5);
      v62 = v64 * v64 * ((double)(v38 * v38) * (4.0 * v53));
      v63 = v54 * v52;
    }
    else
    {
      v43 = v38;
      +[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings");
      v44 = (void *)objc_claimAutoreleasedReturnValue();
      v45 = objc_msgSend(v44, "daVinciCameraController");
      v46 = *((double *)v12 + 46);
      v47 = *((double *)v12 + 47);
      if (v47 >= v46)
      {
        v51 = *((double *)v12 + 57);
      }
      else
      {
        if (v47 * v46 <= 0.0)
          v48 = 1.0;
        else
          v48 = v47 / v46;
        v49 = tan(*((double *)v12 + 57) * 0.5);
        v50 = atan(v48 * v49);
        v51 = v50 + v50;
      }
      v59 = 1.0;
      if ((v45 & 1) == 0)
      {
        v60 = cos(*v18);
        v59 = 1.0 / v60 * (1.0 / v60);
      }
      v61 = tan(v51 * 0.5);

      v62 = v61 * (double)v43 * (v61 * (double)v43) * (v46 * (4.0 * v59));
      v63 = v47 * v47 * v46;
    }
    v65 = 9783.9397 / sqrt(v62 / v63);
    v66 = *((double *)v12 + 4);
    *(_BYTE *)(v11 + 44) = v66 > v65;
    *(_BYTE *)(v11 + 43) = 0;
    if (v66 > v65)
      goto LABEL_105;
    goto LABEL_106;
  }
LABEL_109:
  v67 = *(double *)(v11 + 216);
  v68 = v67 > 0.0 && *((double *)v12 + 5) * 57.2957795 <= v67;
  if (*(_BYTE *)(v11 + 81))
    v69 = v68;
  else
    v69 = 1;
  v70 = *(unsigned __int8 *)(v11 + 42);
  if (*(_BYTE *)(v11 + 42))
    v70 = *(unsigned __int8 *)(v11 + 87) != *(unsigned __int8 *)(v11 + 41);
  if (v26)
  {
    if (v24)
    {
      *(_BYTE *)(v11 + 80) = *(_BYTE *)(v11 + 40);
      *(_DWORD *)(v11 + 48) = 1065353216;
      v71 = *(_QWORD *)(v11 + 8);
      if (v71)
      {
        v72 = *(_QWORD *)(v71 + 32);
        v73 = *(_QWORD *)(v71 + 40);
        v74 = v72;
        if (v72 != v73)
        {
          v74 = v72;
          while (*(_WORD *)v74 != 27)
          {
            v74 += 16;
            if (v74 == v73)
              goto LABEL_176;
          }
        }
        if (v74 != v73)
        {
          v99 = *(_QWORD *)(v74 + 8);
          if (v99)
            *(_BYTE *)(v99 + 618) = 0;
        }
LABEL_176:
        v100 = v72;
        if (v72 != v73)
        {
          v100 = v72;
          while (*(_WORD *)v100 != 32)
          {
            v100 += 16;
            if (v100 == v73)
              goto LABEL_184;
          }
        }
        if (v100 != v73)
        {
          v101 = *(_QWORD *)(v100 + 8);
          if (v101)
            *(_BYTE *)(v101 + 618) = 0;
        }
LABEL_184:
        if (v72 != v73)
        {
          while (*(_WORD *)v72 != 30)
          {
            v72 += 16;
            if (v72 == v73)
              goto LABEL_191;
          }
        }
        if (v72 != v73)
        {
          v102 = *(_QWORD *)(v72 + 8);
          if (v102)
            *(_BYTE *)(v102 + 618) = 0;
        }
      }
LABEL_191:
      *(_DWORD *)(v11 + 76) = 0;
      goto LABEL_253;
    }
    if (v69 | v70)
    {
      v79 = *(unsigned __int8 *)(v11 + 40);
      *(_BYTE *)(v11 + 80) = v79;
      v80 = 1.0;
      if (!v79)
        v80 = 0.0;
      *(float *)(v11 + 72) = v80;
      *(float *)(v11 + 48) = v80;
      v81 = *(_BYTE *)(v11 + 43);
      v82 = *(_QWORD *)(v11 + 8);
      if (v82)
      {
        v83 = *(_QWORD *)(v82 + 32);
        v84 = *(_QWORD *)(v82 + 40);
        v85 = v83;
        if (v83 != v84)
        {
          v85 = v83;
          while (*(_WORD *)v85 != 27)
          {
            v85 += 16;
            if (v85 == v84)
              goto LABEL_204;
          }
        }
        if (v85 != v84)
        {
          v108 = *(_QWORD *)(v85 + 8);
          if (v108)
            *(_BYTE *)(v108 + 618) = v81 ^ 1;
        }
LABEL_204:
        v109 = v83;
        if (v83 != v84)
        {
          v109 = v83;
          while (*(_WORD *)v109 != 32)
          {
            v109 += 16;
            if (v109 == v84)
              goto LABEL_212;
          }
        }
        if (v109 != v84)
        {
          v110 = *(_QWORD *)(v109 + 8);
          if (v110)
            *(_BYTE *)(v110 + 618) = v81 ^ 1;
        }
LABEL_212:
        if (v83 != v84)
        {
          while (*(_WORD *)v83 != 30)
          {
            v83 += 16;
            if (v83 == v84)
              goto LABEL_219;
          }
        }
        if (v83 != v84)
        {
          v111 = *(_QWORD *)(v83 + 8);
          if (v111)
            *(_BYTE *)(v111 + 618) = v81 ^ 1;
        }
      }
LABEL_219:
      *(_BYTE *)(v11 + 82) = v81;
      *(_DWORD *)(v11 + 76) = 0;
      *(float *)(v11 + 72) = v80;
      goto LABEL_253;
    }
    +[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings");
    v90 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v90, "daVinciTransitionDuration");
    v92 = v91;
    if (*(_BYTE *)(v11 + 86))
      v93 = 1.0;
    else
      v93 = 0.0;
    v94 = *(unsigned __int8 *)(v11 + 40);
    if (v94 == *(unsigned __int8 *)(v11 + 84))
    {
      if (*(double *)(v11 + 64) > a2)
        goto LABEL_168;
LABEL_164:
      if (v94)
        v93 = 1.0;
      else
        v93 = 0.0;
      *(_BYTE *)(v11 + 85) |= v94;
LABEL_168:
      v95 = *(_DWORD *)(v11 + 76);
      if (v95)
      {
        v96 = a2 - *(double *)(v11 + 56);
        v97 = fminf(fmaxf(v96 / v92, 0.0), 1.0);
        v98 = 1.0 - v97;
        if (v95 >= 0)
          v98 = v97;
        *(float *)(v11 + 72) = v98;
        if (v97 >= 1.0)
          *(_DWORD *)(v11 + 76) = 0;
      }
      else
      {
        v112 = *(float *)(v11 + 72);
        if (v112 != v93)
        {
          v113 = *(_BYTE *)(v11 + 82);
          if (v112 < v93)
            v114 = 1;
          else
            v114 = -1;
          *(_DWORD *)(v11 + 76) = v114;
          *(double *)(v11 + 56) = a2;
          *(_BYTE *)(v11 + 83) = v113;
        }
      }
      if (*(_BYTE *)(v11 + 83))
      {
        v115 = 0;
        v116 = *(_QWORD *)(v11 + 8);
        if (!v116)
          goto LABEL_252;
      }
      else
      {
        v115 = *(_BYTE *)(v11 + 43) == 0;
        v116 = *(_QWORD *)(v11 + 8);
        if (!v116)
        {
LABEL_252:
          v124 = *(float *)(v11 + 72);
          *(float *)(v11 + 48) = v124;
          *(_BYTE *)(v11 + 80) = v124 > 0.0;
          *(_BYTE *)(v11 + 82) = *(_BYTE *)(v11 + 43);

          goto LABEL_253;
        }
      }
      v117 = *(_QWORD *)(v116 + 32);
      v118 = *(_QWORD *)(v116 + 40);
      v119 = v117;
      if (v117 != v118)
      {
        v119 = v117;
        while (*(_WORD *)v119 != 27)
        {
          v119 += 16;
          if (v119 == v118)
            goto LABEL_237;
        }
      }
      if (v119 != v118)
      {
        v120 = *(_QWORD *)(v119 + 8);
        if (v120)
          *(_BYTE *)(v120 + 618) = v115;
      }
LABEL_237:
      v121 = v117;
      if (v117 != v118)
      {
        v121 = v117;
        while (*(_WORD *)v121 != 32)
        {
          v121 += 16;
          if (v121 == v118)
            goto LABEL_245;
        }
      }
      if (v121 != v118)
      {
        v122 = *(_QWORD *)(v121 + 8);
        if (v122)
          *(_BYTE *)(v122 + 618) = v115;
      }
LABEL_245:
      if (v117 != v118)
      {
        while (*(_WORD *)v117 != 30)
        {
          v117 += 16;
          if (v117 == v118)
            goto LABEL_252;
        }
      }
      if (v117 != v118)
      {
        v123 = *(_QWORD *)(v117 + 8);
        if (v123)
          *(_BYTE *)(v123 + 618) = v115;
      }
      goto LABEL_252;
    }
    if (GEOGetVectorKitVKDefaultLog_onceToken != -1)
      dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_4_11772);
    v103 = (id)GEOGetVectorKitVKDefaultLog_log;
    if (os_log_type_enabled(v103, OS_LOG_TYPE_INFO))
    {
      v104 = *(unsigned __int8 *)(v11 + 84);
      v105 = *(unsigned __int8 *)(v11 + 40);
      *(_DWORD *)buf = 67109376;
      *(_DWORD *)&buf[4] = v104;
      *(_WORD *)&buf[8] = 1024;
      *(_DWORD *)&buf[10] = v105;
      _os_log_impl(&dword_19F029000, v103, OS_LOG_TYPE_INFO, "DaVinciTransitionManager: transition delay timer reset. Transition from %d to %d", buf, 0xEu);
    }

    v106 = a2 + 30.0;
    *(double *)(v11 + 64) = a2 + 30.0;
    if (*(_BYTE *)(v11 + 85))
      v107 = v19 != 5;
    else
      v107 = 1;
    if (v107 || v194 != 0)
    {
      v94 = *(unsigned __int8 *)(v11 + 40);
    }
    else
    {
      v94 = *(unsigned __int8 *)(v11 + 40);
      if (!*(_BYTE *)(v11 + 44) && *(_BYTE *)(v11 + 40))
      {
        v94 = 1;
LABEL_362:
        *(_BYTE *)(v11 + 84) = v94;
        if (v106 > a2)
          goto LABEL_168;
        goto LABEL_164;
      }
    }
    *(double *)(v11 + 64) = a2;
    v106 = a2;
    goto LABEL_362;
  }
  *(_BYTE *)(v11 + 80) = *(_BYTE *)(v11 + 40);
  *(_DWORD *)(v11 + 48) = 0;
  v75 = *(_QWORD *)(v11 + 8);
  if (v75)
  {
    v76 = *(_QWORD *)(v75 + 32);
    v77 = *(_QWORD *)(v75 + 40);
    v78 = v76;
    if (v76 != v77)
    {
      v78 = v76;
      while (*(_WORD *)v78 != 27)
      {
        v78 += 16;
        if (v78 == v77)
          goto LABEL_143;
      }
    }
    if (v78 != v77)
    {
      v86 = *(_QWORD *)(v78 + 8);
      if (v86)
        *(_BYTE *)(v86 + 618) = 0;
    }
LABEL_143:
    v87 = v76;
    if (v76 != v77)
    {
      v87 = v76;
      while (*(_WORD *)v87 != 32)
      {
        v87 += 16;
        if (v87 == v77)
          goto LABEL_151;
      }
    }
    if (v87 != v77)
    {
      v88 = *(_QWORD *)(v87 + 8);
      if (v88)
        *(_BYTE *)(v88 + 618) = 0;
    }
LABEL_151:
    if (v76 != v77)
    {
      while (*(_WORD *)v76 != 30)
      {
        v76 += 16;
        if (v76 == v77)
          goto LABEL_158;
      }
    }
    if (v76 != v77)
    {
      v89 = *(_QWORD *)(v76 + 8);
      if (v89)
        *(_BYTE *)(v89 + 618) = 0;
    }
  }
LABEL_158:
  *(_BYTE *)(v11 + 82) = 0;
  *(_DWORD *)(v11 + 76) = 0;
LABEL_253:
  v125 = (uint64_t *)*((_QWORD *)this + 141);
  v126 = *v125;
  v127 = v125[1];
  v128 = v126;
  if (v126 != v127)
  {
    v128 = v126;
    while (*(_BYTE *)v128 != 20)
    {
      v128 += 16;
      if (v128 == v127)
        goto LABEL_261;
    }
  }
  if (v128 == v127)
  {
LABEL_261:
    LODWORD(v129) = 0;
    if (v126 != v127)
    {
LABEL_262:
      while (*(_BYTE *)v126 != 22)
      {
        v126 += 16;
        if (v126 == v127)
          goto LABEL_267;
      }
    }
  }
  else
  {
    v129 = *(_QWORD *)(v128 + 8);
    if (v126 != v127)
      goto LABEL_262;
  }
  if (v126 == v127)
LABEL_267:
    v130 = 0;
  else
    v130 = *(_QWORD *)(v126 + 8);
  if (*((_BYTE *)this + 1241))
    v131 = v129 > 0xA;
  else
    v131 = 1;
  if (!v131 && (((1 << v129) & 0x418) != 0 || ((1 << v129) & 6) != 0 && v130))
  {
    *(_BYTE *)(*((_QWORD *)this + 112) + 377) = 1;
    v132 = 3;
  }
  else
  {
    *(_BYTE *)(*((_QWORD *)this + 112) + 377) = 0;
    v132 = 4;
    if (v129 <= 0xB)
    {
      if (((1 << v129) & 0x1E7) != 0)
      {
        if (v130)
          v132 = 3;
        else
          v132 = 0;
      }
      else if (((1 << v129) & 0x418) != 0)
      {
        v132 = 1;
      }
      else if ((_DWORD)v129 == 11)
      {
        v132 = 2;
      }
    }
  }
  v133 = (unsigned __int8 *)*((_QWORD *)this + 148);
  if (!v133 || v132 != v133[8])
  {
    if (GEOGetVectorKitVKDefaultLog_onceToken != -1)
      dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_4_11772);
    v134 = (id)GEOGetVectorKitVKDefaultLog_log;
    if (os_log_type_enabled(v134, OS_LOG_TYPE_INFO))
    {
      v135 = *((_QWORD *)this + 148);
      if (v135)
      {
        v136 = *(unsigned __int8 *)(v135 + 8);
        if (v136 > 4)
          v137 = "<Invalid>";
        else
          v137 = off_1E42FA030[v136];
      }
      else
      {
        v137 = "None";
      }
      v138 = off_1E42FA030[v132];
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = v137;
      *(_WORD *)&buf[12] = 2080;
      *(_QWORD *)&buf[14] = v138;
      _os_log_impl(&dword_19F029000, v134, OS_LOG_TYPE_INFO, "Transitioning configuration from '%s' to '%s'", buf, 0x16u);
    }

    v139 = *((_QWORD *)this + 149);
    if (v139)
    {
      (*(void (**)(uint64_t, md::MapEngine *, md::MapEngine *, _QWORD))(*(_QWORD *)v139 + 48))(v139, this, this, *((_QWORD *)this + 141));
      v140 = *((_QWORD *)this + 149);
      *((_QWORD *)this + 149) = 0;
      if (v140)
        (*(void (**)(uint64_t))(*(_QWORD *)v140 + 8))(v140);
    }
    v141 = *((_QWORD *)this + 148);
    if (v141)
      (*(void (**)(uint64_t, md::MapEngine *, md::MapEngine *, _QWORD))(*(_QWORD *)v141 + 48))(v141, this, this, *((_QWORD *)this + 141));
    __asm { BR              X10 }
  }
  v142 = (*(uint64_t (**)(unsigned __int8 *, md::MapEngine *))(*(_QWORD *)v133 + 72))(v133, this);
  v143 = (*(uint64_t (**)(_QWORD, md::MapEngine *))(**((_QWORD **)this + 148) + 88))(*((_QWORD *)this + 148), this);
  v144 = v143;
  v145 = *((_QWORD *)this + 149);
  if (!v145 || (*(unsigned __int8 *)(v145 + 48) != (_DWORD)v142 ? (v146 = 1) : (v146 = v143), v146 == 1))
  {
    (*(void (**)(__int128 *__return_ptr, _QWORD, uint64_t))(**((_QWORD **)this + 148) + 80))(&v195, *((_QWORD *)this + 148), v142);
    if (GEOGetVectorKitVKDefaultLog_onceToken != -1)
      dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_4_11772);
    v147 = (id)GEOGetVectorKitVKDefaultLog_log;
    if (os_log_type_enabled(v147, OS_LOG_TYPE_INFO))
    {
      v148 = *((_QWORD *)this + 149);
      if (v148)
      {
        v149 = *(unsigned __int8 *)(v148 + 48);
        if (v149 > 0x12)
          v150 = "<Invalid>";
        else
          v150 = off_1E42F3200[v149];
      }
      else
      {
        v150 = "None";
      }
      v151 = *(unsigned __int8 *)(v195 + 48);
      if (v151 > 0x12)
        v152 = "<Invalid>";
      else
        v152 = off_1E42F3200[v151];
      v153 = "NO";
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&buf[4] = v150;
      *(_WORD *)&buf[12] = 2080;
      if (v144)
        v153 = "YES";
      *(_QWORD *)&buf[14] = v152;
      v203 = 2080;
      v204 = v153;
      _os_log_impl(&dword_19F029000, v147, OS_LOG_TYPE_INFO, "Transitioning mode from '%s' to '%s' (force:%s)", buf, 0x20u);
    }

    v154 = *((_QWORD *)this + 149);
    if (v154)
    {
      (*(void (**)(uint64_t, md::MapEngine *, md::MapEngine *, _QWORD))(*(_QWORD *)v154 + 48))(v154, this, this, *((_QWORD *)this + 141));
      v155 = *((_QWORD *)this + 149);
      v156 = v195;
      *(_QWORD *)&v195 = 0;
      *((_QWORD *)this + 149) = v156;
      if (v155)
        (*(void (**)(uint64_t))(*(_QWORD *)v155 + 8))(v155);
    }
    else
    {
      v157 = v195;
      *(_QWORD *)&v195 = 0;
      *((_QWORD *)this + 149) = v157;
    }
    v158 = (uint64_t *)**((_QWORD **)this + 564);
    if (v158 != *(uint64_t **)(*((_QWORD *)this + 564) + 8) && *v158 != 0x25FDEB4E57A24DE1)
    {
      v159 = v158 + 5;
      do
      {
        v160 = *v159;
        v159 += 5;
      }
      while (v160 != 0x25FDEB4E57A24DE1);
      v158 = v159 - 5;
    }
    v162 = v158[3];
    v161 = (std::__shared_weak_count *)v158[4];
    if (v161)
    {
      p_shared_owners = (unint64_t *)&v161->__shared_owners_;
      do
        v164 = __ldxr(p_shared_owners);
      while (__stxr(v164 + 1, p_shared_owners));
      do
        v165 = __ldaxr(p_shared_owners);
      while (__stlxr(v165 - 1, p_shared_owners));
      if (!v165)
      {
        ((void (*)(std::__shared_weak_count *))v161->__on_zero_shared)(v161);
        std::__shared_weak_count::__release_weak(v161);
      }
    }
    v166 = *((_QWORD *)this + 149);
    v167 = *(unsigned __int8 *)(v166 + 48);
    *(_BYTE *)(v162 + 16) = v167;
    v168 = *((_QWORD *)this + 133);
    *(_BYTE *)v168 = *(_BYTE *)(v166 + 224);
    if (v167 == 18)
    {
      v169 = *(double *)(v166 + 56);
    }
    else
    {
      v171 = *(double *)(v168 + 368);
      v170 = *(double *)(v168 + 376);
      if (v170 >= v171)
      {
        v169 = 0.523598776;
      }
      else
      {
        v172 = v170 * v171;
        v173 = v171 * 0.267949192 / v170;
        if (v172 <= 0.0)
          v173 = 0.267949192;
        v174 = atan(v173);
        v169 = v174 + v174;
      }
    }
    *(double *)(v168 + 456) = v169;
    md::MapEngine::updateSettings(this, 1);
    (*(void (**)(_QWORD, md::MapEngine *, md::MapEngine *, _QWORD))(**((_QWORD **)this + 149) + 40))(*((_QWORD *)this + 149), this, this, *((_QWORD *)this + 141));
    if (*((_BYTE *)this + 4608))
      md::MapEngine::updateLogicsFrequency((uint64_t)this, *(_QWORD **)(*((_QWORD *)this + 135) + 8), kVariableLogicFrequency, 1);
    v175 = v195;
    *(_QWORD *)&v195 = 0;
    if (v175)
      (*(void (**)(uint64_t))(*(_QWORD *)v175 + 8))(v175);
  }
  md::MapEngine::updateSettings(this, 0);
  v176 = *((_QWORD *)this + 113);
  v177 = *((_QWORD *)this + 149);
  v178 = *(_BYTE *)(v177 + 225);
  LOBYTE(v177) = *(_BYTE *)(v177 + 224);
  *(_BYTE *)(v176 + 8) = v178;
  *(_BYTE *)(v176 + 9) = v177;
  if (!v201)
  {
    std::__throw_bad_function_call[abi:nn180100]();
    __break(1u);
  }
  (*(void (**)(_QWORD *))(*v201 + 48))(v201);
  result = v201;
  if (v201 == v200)
  {
    v180 = 4;
    result = v200;
  }
  else
  {
    if (!v201)
      return result;
    v180 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v180))();
}

void sub_19FAB0A84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  uint64_t v17;
  va_list va;

  va_start(va, a17);
  MEMORY[0x1A1AF4E00](v17, 0x10A1C40BEF108A7);
  geo::ScopedFunctions::~ScopedFunctions((geo::ScopedFunctions *)va);
  _Unwind_Resume(a1);
}

void std::__call_once_proxy[abi:nn180100]<std::tuple<md::MapEngine::MapEngine(float,float,float,BOOL,VKMapViewPurpose,std::shared_ptr<md::TaskContext> const&,VKMapPurpose,std::unique_ptr<md::AnimationManager>,geo::linear_map<md::MapEngineSetting,long long,std::equal_to<md::MapEngineSetting>,std::allocator<std::pair<md::MapEngineSetting,long long>>,std::vector<std::pair<md::MapEngineSetting,long long>>> const&,unsigned long long,GEOApplicationAuditToken *)::$_25 &&>>()
{
  id v0;

  +[VKPlatform sharedPlatform](VKPlatform, "sharedPlatform");
  v0 = (id)objc_claimAutoreleasedReturnValue();
  kVariableLogicFrequency = objc_msgSend(v0, "preferredFrequencyUpdate");

}

void sub_19FAB0D24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void md::MapEngine::updateLogicsFrequency(uint64_t a1, _QWORD *a2, uint64_t a3, char a4)
{
  uint64_t v4;
  char v5;
  int8x8_t v8;
  uint8x8_t v9;
  unint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  BOOL v21;
  NSObject *v22;
  NSObject *v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  uint64_t v27;
  _QWORD v28[3];
  _QWORD *v29;
  uint8_t buf[24];
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD *)(a1 + 1120);
  if (!v4)
    return;
  v5 = a4;
  v8 = (int8x8_t)a2[1];
  if (!*(_QWORD *)&v8)
    goto LABEL_30;
  v9 = (uint8x8_t)vcnt_s8(v8);
  v9.i16[0] = vaddlv_u8(v9);
  if (v9.u32[0] > 1uLL)
  {
    v10 = 0xE42D19AFCA302E68;
    if (*(_QWORD *)&v8 <= 0xE42D19AFCA302E68)
      v10 = 0xE42D19AFCA302E68 % *(_QWORD *)&v8;
  }
  else
  {
    v10 = (*(_QWORD *)&v8 - 1) & 0xE42D19AFCA302E68;
  }
  v11 = *(_QWORD **)(*a2 + 8 * v10);
  if (!v11)
    goto LABEL_30;
  v12 = (_QWORD *)*v11;
  if (!v12)
    goto LABEL_30;
  if (v9.u32[0] < 2uLL)
  {
    v13 = *(_QWORD *)&v8 - 1;
    v14 = 1;
    while (1)
    {
      v15 = v12[1];
      if (v15 == 0xE42D19AFCA302E68)
      {
        if (v12[2] == 0xE42D19AFCA302E68)
          goto LABEL_24;
      }
      else if ((v15 & v13) != v10)
      {
        goto LABEL_31;
      }
      v12 = (_QWORD *)*v12;
      if (!v12)
        goto LABEL_31;
    }
  }
  v14 = 1;
  while (1)
  {
    v16 = v12[1];
    if (v16 == 0xE42D19AFCA302E68)
      break;
    if (v16 >= *(_QWORD *)&v8)
      v16 %= *(_QWORD *)&v8;
    if (v16 != v10)
      goto LABEL_31;
LABEL_18:
    v12 = (_QWORD *)*v12;
    if (!v12)
      goto LABEL_31;
  }
  if (v12[2] != 0xE42D19AFCA302E68)
    goto LABEL_18;
LABEL_24:
  v17 = v12[5];
  if (*(_QWORD *)(v17 + 8) != 0xE42D19AFCA302E68 || (v18 = *(_QWORD *)(v17 + 32)) == 0 || *(_BYTE *)(v18 + 84) != 3)
  {
LABEL_30:
    v14 = 1;
    goto LABEL_31;
  }
  v14 = *(unsigned int *)(a1 + 4768);
  if (a4)
    a3 = *(unsigned int *)(a1 + 4768);
LABEL_31:
  if (*(_QWORD *)(a1 + 1200))
  {
    v19 = 1;
  }
  else
  {
    if (*(_BYTE *)(*(_QWORD *)(a1 + 1192) + 48) == 18)
      v14 = 1;
    v20 = a4;
    if ((a4 & 0xFE) == 0)
      v20 = 1;
    if (overwriteVariableRate)
      v21 = v14 == 1;
    else
      v21 = 1;
    if (v21)
    {
      v5 = a4;
    }
    else
    {
      a3 = overwriteVariableRate;
      v5 = v20;
    }
    if (v21)
      v19 = v14;
    else
      v19 = overwriteVariableRate;
  }
  if (*(_QWORD *)(v4 + 112) != v19)
  {
    if (GEOGetVectorKitVKDefaultLog_onceToken != -1)
      dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_4_11772);
    v22 = (id)GEOGetVectorKitVKDefaultLog_log;
    if (os_log_type_enabled(v22, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 134217984;
      *(_QWORD *)&buf[4] = v19;
      _os_log_impl(&dword_19F029000, v22, OS_LOG_TYPE_INFO, "[VLR] Update Logics Frequency to %zu", buf, 0xCu);
    }

  }
  *(_QWORD *)(v4 + 112) = v19;
  if (v5)
  {
    *(_QWORD *)(v4 + 96) = a3;
    *(_BYTE *)(v4 + 104) = v5;
    if (GEOGetVectorKitVKDefaultLog_onceToken != -1)
      dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_4_11772);
    v23 = (id)GEOGetVectorKitVKDefaultLog_log;
    if (os_log_type_enabled(v23, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 134217984;
      *(_QWORD *)&buf[4] = a3;
      _os_log_impl(&dword_19F029000, v23, OS_LOG_TYPE_INFO, "[VLR] Update nextResetFrequency to %zu", buf, 0xCu);
    }

  }
  v24 = *(_QWORD *)(a1 + 1120);
  v28[0] = &off_1E42F31C8;
  v28[1] = v19;
  v25 = v28;
  v29 = v28;
  v26 = *(_QWORD **)(v24 + 24);
  if (!v26)
  {
    v27 = 4;
LABEL_67:
    (*(void (**)(_QWORD *, _QWORD *))(*v25 + 8 * v27))(v25, a2);
    goto LABEL_68;
  }
  v25 = v28;
  do
  {
    *(_QWORD *)buf = v26[5];
    if (!v25)
    {
      std::__throw_bad_function_call[abi:nn180100]();
      __break(1u);
    }
    (*(void (**)(_QWORD *, uint8_t *))(*v25 + 48))(v25, buf);
    v26 = (_QWORD *)*v26;
    v25 = v29;
  }
  while (v26);
  if (v29 == v28)
  {
    v27 = 4;
    v25 = v28;
    goto LABEL_67;
  }
  if (v29)
  {
    v27 = 5;
    goto LABEL_67;
  }
LABEL_68:
  md::LogicManager::resetFrequencyCounter(*(md::LogicManager **)(a1 + 1120));
}

void sub_19FAB10C8(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

void sub_19FAB10D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t *a12)
{
  uint64_t *v13;
  uint64_t v14;

  v13 = a12;
  if (a12 == &a9)
  {
    v14 = 4;
    v13 = &a9;
  }
  else
  {
    if (!a12)
      goto LABEL_6;
    v14 = 5;
  }
  (*(void (**)(void))(*v13 + 8 * v14))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t md::Monitorable<md::ConfigValue<GEOConfigKeyInteger,int>>::~Monitorable(uint64_t a1)
{
  void *v2;
  _QWORD *v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  if (*(_QWORD *)(a1 + 24))
  {
    GEOConfigRemoveBlockListener();
    v2 = *(void **)(a1 + 24);
    *(_QWORD *)(a1 + 24) = 0;

  }
  atomic_store(0, *(unsigned __int8 **)(a1 + 32));
  v3 = *(_QWORD **)(a1 + 72);
  if (v3 == (_QWORD *)(a1 + 48))
  {
    v4 = 4;
    v3 = (_QWORD *)(a1 + 48);
    goto LABEL_7;
  }
  if (v3)
  {
    v4 = 5;
LABEL_7:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  v5 = *(std::__shared_weak_count **)(a1 + 40);
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }

  return a1;
}

void sub_19FAB11C4(_Unwind_Exception *a1)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;

  v3 = *(_QWORD **)(v1 + 72);
  if (v3 == (_QWORD *)(v1 + 48))
  {
    v4 = 4;
    v3 = (_QWORD *)(v1 + 48);
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](v1 + 32);

  _Unwind_Resume(a1);
}

uint64_t *std::unique_ptr<md::HomeQueueScheduler>::~unique_ptr[abi:nn180100](uint64_t *a1)
{
  uint64_t v2;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    std::condition_variable::~condition_variable((std::condition_variable *)(v2 + 240));
    std::mutex::~mutex((std::mutex *)(v2 + 176));

    std::deque<std::function<void ()(void)>>::~deque[abi:nn180100](v2 + 120);
    std::condition_variable::~condition_variable((std::condition_variable *)(v2 + 72));
    std::mutex::~mutex((std::mutex *)(v2 + 8));
    MEMORY[0x1A1AF4E00](v2, 0x10A0C40BCFC4640);
  }
  return a1;
}

uint64_t *std::unique_ptr<md::DaVinciTransitionManager>::~unique_ptr[abi:nn180100](uint64_t *a1)
{
  uint64_t v2;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    md::Monitorable<md::ConfigValue<GEOConfigKeyDouble,double>>::~Monitorable(v2 + 200);
    md::Monitorable<md::ConfigValue<GEOConfigKeyBOOL,BOOL>>::~Monitorable(v2 + 120);
    MEMORY[0x1A1AF4E00](v2, 0x10A0C4071554381);
  }
  return a1;
}

md::LayoutContext **std::unique_ptr<md::LayoutContext>::~unique_ptr[abi:nn180100](md::LayoutContext **a1)
{
  md::LayoutContext *v2;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    md::LayoutContext::~LayoutContext(v2);
    MEMORY[0x1A1AF4E00]();
  }
  return a1;
}

uint64_t *std::unique_ptr<md::ARContext>::~unique_ptr[abi:nn180100](uint64_t *a1)
{
  uint64_t v2;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {

    MEMORY[0x1A1AF4E00](v2, 0x1080C4006152ACDLL);
  }
  return a1;
}

uint64_t *std::unique_ptr<gdc::Context>::~unique_ptr[abi:nn180100](uint64_t *a1)
{
  uint64_t v2;
  _QWORD *v3;
  void *v4;
  _QWORD *v6;
  uint64_t v7;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    v3 = *(_QWORD **)(v2 + 16);
    if (v3)
    {
      do
      {
        v6 = (_QWORD *)*v3;
        v7 = v3[5];
        v3[5] = 0;
        if (v7)
          (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
        operator delete(v3);
        v3 = v6;
      }
      while (v6);
    }
    v4 = *(void **)v2;
    *(_QWORD *)v2 = 0;
    if (v4)
      operator delete(v4);
    MEMORY[0x1A1AF4E00](v2, 0x10A0C408EF24B1CLL);
  }
  return a1;
}

uint64_t *std::unique_ptr<md::MapDataAccess>::~unique_ptr[abi:nn180100](uint64_t *a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    v3 = *(std::__shared_weak_count **)(v2 + 24);
    if (v3)
    {
      p_shared_owners = (unint64_t *)&v3->__shared_owners_;
      do
        v5 = __ldaxr(p_shared_owners);
      while (__stlxr(v5 - 1, p_shared_owners));
      if (!v5)
      {
        ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
        std::__shared_weak_count::__release_weak(v3);
      }
    }
    MEMORY[0x1A1AF4E00](v2, 0x1020C408EAB821DLL);
  }
  return a1;
}

md::World **std::unique_ptr<md::World>::~unique_ptr[abi:nn180100](md::World **a1)
{
  md::World *v2;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    md::World::~World(v2);
    MEMORY[0x1A1AF4E00]();
  }
  return a1;
}

void std::__function::__func<md::MapEngine::MapEngine(float,float,float,BOOL,VKMapViewPurpose,std::shared_ptr<md::TaskContext> const&,VKMapPurpose,std::unique_ptr<md::AnimationManager>,geo::linear_map<md::MapEngineSetting,long long,std::equal_to<md::MapEngineSetting>,std::allocator<std::pair<md::MapEngineSetting,long long>>,std::vector<std::pair<md::MapEngineSetting,long long>>> const&,unsigned long long,GEOApplicationAuditToken *)::$_34,std::allocator<md::MapEngine::MapEngine(float,float,float,BOOL,VKMapViewPurpose,std::shared_ptr<md::TaskContext> const&,VKMapPurpose,std::unique_ptr<md::AnimationManager>,geo::linear_map<md::MapEngineSetting,long long,std::equal_to<md::MapEngineSetting>,std::allocator<std::pair<md::MapEngineSetting,long long>>,std::vector<std::pair<md::MapEngineSetting,long long>>> const&,unsigned long long,GEOApplicationAuditToken *)::$_34>,void ()(BOOL)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::MapEngine::MapEngine(float,float,float,BOOL,VKMapViewPurpose,std::shared_ptr<md::TaskContext> const&,VKMapPurpose,std::unique_ptr<md::AnimationManager>,geo::linear_map<md::MapEngineSetting,long long,std::equal_to<md::MapEngineSetting>,std::allocator<std::pair<md::MapEngineSetting,long long>>,std::vector<std::pair<md::MapEngineSetting,long long>>> const&,unsigned long long,GEOApplicationAuditToken *)::$_34,std::allocator<md::MapEngine::MapEngine(float,float,float,BOOL,VKMapViewPurpose,std::shared_ptr<md::TaskContext> const&,VKMapPurpose,std::unique_ptr<md::AnimationManager>,geo::linear_map<md::MapEngineSetting,long long,std::equal_to<md::MapEngineSetting>,std::allocator<std::pair<md::MapEngineSetting,long long>>,std::vector<std::pair<md::MapEngineSetting,long long>>> const&,unsigned long long,GEOApplicationAuditToken *)::$_34>,void ()(BOOL)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E427CFF0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<md::MapEngine::MapEngine(float,float,float,BOOL,VKMapViewPurpose,std::shared_ptr<md::TaskContext> const&,VKMapPurpose,std::unique_ptr<md::AnimationManager>,geo::linear_map<md::MapEngineSetting,long long,std::equal_to<md::MapEngineSetting>,std::allocator<std::pair<md::MapEngineSetting,long long>>,std::vector<std::pair<md::MapEngineSetting,long long>>> const&,unsigned long long,GEOApplicationAuditToken *)::$_34,std::allocator<md::MapEngine::MapEngine(float,float,float,BOOL,VKMapViewPurpose,std::shared_ptr<md::TaskContext> const&,VKMapPurpose,std::unique_ptr<md::AnimationManager>,geo::linear_map<md::MapEngineSetting,long long,std::equal_to<md::MapEngineSetting>,std::allocator<std::pair<md::MapEngineSetting,long long>>,std::vector<std::pair<md::MapEngineSetting,long long>>> const&,unsigned long long,GEOApplicationAuditToken *)::$_34>,void ()(BOOL)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E427CFF0;
  a2[1] = v2;
  return result;
}

void std::__function::__func<md::MapEngine::MapEngine(float,float,float,BOOL,VKMapViewPurpose,std::shared_ptr<md::TaskContext> const&,VKMapPurpose,std::unique_ptr<md::AnimationManager>,geo::linear_map<md::MapEngineSetting,long long,std::equal_to<md::MapEngineSetting>,std::allocator<std::pair<md::MapEngineSetting,long long>>,std::vector<std::pair<md::MapEngineSetting,long long>>> const&,unsigned long long,GEOApplicationAuditToken *)::$_34,std::allocator<md::MapEngine::MapEngine(float,float,float,BOOL,VKMapViewPurpose,std::shared_ptr<md::TaskContext> const&,VKMapPurpose,std::unique_ptr<md::AnimationManager>,geo::linear_map<md::MapEngineSetting,long long,std::equal_to<md::MapEngineSetting>,std::allocator<std::pair<md::MapEngineSetting,long long>>,std::vector<std::pair<md::MapEngineSetting,long long>>> const&,unsigned long long,GEOApplicationAuditToken *)::$_34>,void ()(BOOL)>::operator()(uint64_t a1)
{
  uint64_t v1;
  id v2;

  v1 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 8) + 4688);
  +[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings");
  v2 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "setLayoutContinuously:", v1);

}

void sub_19FAB15E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void std::__function::__func<md::MapEngine::updateLogicsFrequency(unsigned long,md::LayoutContext const&,std::optional<unsigned long>)::$_0,std::allocator<md::MapEngine::updateLogicsFrequency(unsigned long,md::LayoutContext const&,std::optional<unsigned long>)::$_0>,void ()(md::LogicBase *)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::MapEngine::updateLogicsFrequency(unsigned long,md::LayoutContext const&,std::optional<unsigned long>)::$_0,std::allocator<md::MapEngine::updateLogicsFrequency(unsigned long,md::LayoutContext const&,std::optional<unsigned long>)::$_0>,void ()(md::LogicBase *)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42F31C8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<md::MapEngine::updateLogicsFrequency(unsigned long,md::LayoutContext const&,std::optional<unsigned long>)::$_0,std::allocator<md::MapEngine::updateLogicsFrequency(unsigned long,md::LayoutContext const&,std::optional<unsigned long>)::$_0>,void ()(md::LogicBase *)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42F31C8;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<md::MapEngine::updateLogicsFrequency(unsigned long,md::LayoutContext const&,std::optional<unsigned long>)::$_0,std::allocator<md::MapEngine::updateLogicsFrequency(unsigned long,md::LayoutContext const&,std::optional<unsigned long>)::$_0>,void ()(md::LogicBase *)>::operator()(uint64_t a1, _QWORD *a2)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)*a2 + 48))(*a2, *(_QWORD *)(a1 + 8));
}

void std::__function::__func<md::MapEngine::MapEngine(float,float,float,BOOL,VKMapViewPurpose,std::shared_ptr<md::TaskContext> const&,VKMapPurpose,std::unique_ptr<md::AnimationManager>,geo::linear_map<md::MapEngineSetting,long long,std::equal_to<md::MapEngineSetting>,std::allocator<std::pair<md::MapEngineSetting,long long>>,std::vector<std::pair<md::MapEngineSetting,long long>>> const&,unsigned long long,GEOApplicationAuditToken *)::$_33,std::allocator<md::MapEngine::MapEngine(float,float,float,BOOL,VKMapViewPurpose,std::shared_ptr<md::TaskContext> const&,VKMapPurpose,std::unique_ptr<md::AnimationManager>,geo::linear_map<md::MapEngineSetting,long long,std::equal_to<md::MapEngineSetting>,std::allocator<std::pair<md::MapEngineSetting,long long>>,std::vector<std::pair<md::MapEngineSetting,long long>>> const&,unsigned long long,GEOApplicationAuditToken *)::$_33>,void ()(BOOL)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::MapEngine::MapEngine(float,float,float,BOOL,VKMapViewPurpose,std::shared_ptr<md::TaskContext> const&,VKMapPurpose,std::unique_ptr<md::AnimationManager>,geo::linear_map<md::MapEngineSetting,long long,std::equal_to<md::MapEngineSetting>,std::allocator<std::pair<md::MapEngineSetting,long long>>,std::vector<std::pair<md::MapEngineSetting,long long>>> const&,unsigned long long,GEOApplicationAuditToken *)::$_33,std::allocator<md::MapEngine::MapEngine(float,float,float,BOOL,VKMapViewPurpose,std::shared_ptr<md::TaskContext> const&,VKMapPurpose,std::unique_ptr<md::AnimationManager>,geo::linear_map<md::MapEngineSetting,long long,std::equal_to<md::MapEngineSetting>,std::allocator<std::pair<md::MapEngineSetting,long long>>,std::vector<std::pair<md::MapEngineSetting,long long>>> const&,unsigned long long,GEOApplicationAuditToken *)::$_33>,void ()(BOOL)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E427CFA8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<md::MapEngine::MapEngine(float,float,float,BOOL,VKMapViewPurpose,std::shared_ptr<md::TaskContext> const&,VKMapPurpose,std::unique_ptr<md::AnimationManager>,geo::linear_map<md::MapEngineSetting,long long,std::equal_to<md::MapEngineSetting>,std::allocator<std::pair<md::MapEngineSetting,long long>>,std::vector<std::pair<md::MapEngineSetting,long long>>> const&,unsigned long long,GEOApplicationAuditToken *)::$_33,std::allocator<md::MapEngine::MapEngine(float,float,float,BOOL,VKMapViewPurpose,std::shared_ptr<md::TaskContext> const&,VKMapPurpose,std::unique_ptr<md::AnimationManager>,geo::linear_map<md::MapEngineSetting,long long,std::equal_to<md::MapEngineSetting>,std::allocator<std::pair<md::MapEngineSetting,long long>>,std::vector<std::pair<md::MapEngineSetting,long long>>> const&,unsigned long long,GEOApplicationAuditToken *)::$_33>,void ()(BOOL)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E427CFA8;
  a2[1] = v2;
  return result;
}

void std::__function::__func<md::MapEngine::MapEngine(float,float,float,BOOL,VKMapViewPurpose,std::shared_ptr<md::TaskContext> const&,VKMapPurpose,std::unique_ptr<md::AnimationManager>,geo::linear_map<md::MapEngineSetting,long long,std::equal_to<md::MapEngineSetting>,std::allocator<std::pair<md::MapEngineSetting,long long>>,std::vector<std::pair<md::MapEngineSetting,long long>>> const&,unsigned long long,GEOApplicationAuditToken *)::$_33,std::allocator<md::MapEngine::MapEngine(float,float,float,BOOL,VKMapViewPurpose,std::shared_ptr<md::TaskContext> const&,VKMapPurpose,std::unique_ptr<md::AnimationManager>,geo::linear_map<md::MapEngineSetting,long long,std::equal_to<md::MapEngineSetting>,std::allocator<std::pair<md::MapEngineSetting,long long>>,std::vector<std::pair<md::MapEngineSetting,long long>>> const&,unsigned long long,GEOApplicationAuditToken *)::$_33>,void ()(BOOL)>::operator()(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  char v4;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(v1 + 1128);
  v3 = (_QWORD *)*(unsigned __int8 *)(v1 + 4608);
  v4 = 37;
  md::MapEngineSettings::set(v2, &v4, v3);
}

void std::__function::__func<md::MapEngine::MapEngine(float,float,float,BOOL,VKMapViewPurpose,std::shared_ptr<md::TaskContext> const&,VKMapPurpose,std::unique_ptr<md::AnimationManager>,geo::linear_map<md::MapEngineSetting,long long,std::equal_to<md::MapEngineSetting>,std::allocator<std::pair<md::MapEngineSetting,long long>>,std::vector<std::pair<md::MapEngineSetting,long long>>> const&,unsigned long long,GEOApplicationAuditToken *)::$_32,std::allocator<md::MapEngine::MapEngine(float,float,float,BOOL,VKMapViewPurpose,std::shared_ptr<md::TaskContext> const&,VKMapPurpose,std::unique_ptr<md::AnimationManager>,geo::linear_map<md::MapEngineSetting,long long,std::equal_to<md::MapEngineSetting>,std::allocator<std::pair<md::MapEngineSetting,long long>>,std::vector<std::pair<md::MapEngineSetting,long long>>> const&,unsigned long long,GEOApplicationAuditToken *)::$_32>,void ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::MapEngine::MapEngine(float,float,float,BOOL,VKMapViewPurpose,std::shared_ptr<md::TaskContext> const&,VKMapPurpose,std::unique_ptr<md::AnimationManager>,geo::linear_map<md::MapEngineSetting,long long,std::equal_to<md::MapEngineSetting>,std::allocator<std::pair<md::MapEngineSetting,long long>>,std::vector<std::pair<md::MapEngineSetting,long long>>> const&,unsigned long long,GEOApplicationAuditToken *)::$_32,std::allocator<md::MapEngine::MapEngine(float,float,float,BOOL,VKMapViewPurpose,std::shared_ptr<md::TaskContext> const&,VKMapPurpose,std::unique_ptr<md::AnimationManager>,geo::linear_map<md::MapEngineSetting,long long,std::equal_to<md::MapEngineSetting>,std::allocator<std::pair<md::MapEngineSetting,long long>>,std::vector<std::pair<md::MapEngineSetting,long long>>> const&,unsigned long long,GEOApplicationAuditToken *)::$_32>,void ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E427CF60;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<md::MapEngine::MapEngine(float,float,float,BOOL,VKMapViewPurpose,std::shared_ptr<md::TaskContext> const&,VKMapPurpose,std::unique_ptr<md::AnimationManager>,geo::linear_map<md::MapEngineSetting,long long,std::equal_to<md::MapEngineSetting>,std::allocator<std::pair<md::MapEngineSetting,long long>>,std::vector<std::pair<md::MapEngineSetting,long long>>> const&,unsigned long long,GEOApplicationAuditToken *)::$_32,std::allocator<md::MapEngine::MapEngine(float,float,float,BOOL,VKMapViewPurpose,std::shared_ptr<md::TaskContext> const&,VKMapPurpose,std::unique_ptr<md::AnimationManager>,geo::linear_map<md::MapEngineSetting,long long,std::equal_to<md::MapEngineSetting>,std::allocator<std::pair<md::MapEngineSetting,long long>>,std::vector<std::pair<md::MapEngineSetting,long long>>> const&,unsigned long long,GEOApplicationAuditToken *)::$_32>,void ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E427CF60;
  a2[1] = v2;
  return result;
}

void std::__function::__func<md::MapEngine::MapEngine(float,float,float,BOOL,VKMapViewPurpose,std::shared_ptr<md::TaskContext> const&,VKMapPurpose,std::unique_ptr<md::AnimationManager>,geo::linear_map<md::MapEngineSetting,long long,std::equal_to<md::MapEngineSetting>,std::allocator<std::pair<md::MapEngineSetting,long long>>,std::vector<std::pair<md::MapEngineSetting,long long>>> const&,unsigned long long,GEOApplicationAuditToken *)::$_32,std::allocator<md::MapEngine::MapEngine(float,float,float,BOOL,VKMapViewPurpose,std::shared_ptr<md::TaskContext> const&,VKMapPurpose,std::unique_ptr<md::AnimationManager>,geo::linear_map<md::MapEngineSetting,long long,std::equal_to<md::MapEngineSetting>,std::allocator<std::pair<md::MapEngineSetting,long long>>,std::vector<std::pair<md::MapEngineSetting,long long>>> const&,unsigned long long,GEOApplicationAuditToken *)::$_32>,void ()(void)>::operator()(uint64_t a1)
{
  md::AnimationManager::forceInstantAnimations(*(md::AnimationManager **)(*(_QWORD *)(a1 + 8) + 104), 0);
}

void std::__function::__func<md::MapEngine::MapEngine(float,float,float,BOOL,VKMapViewPurpose,std::shared_ptr<md::TaskContext> const&,VKMapPurpose,std::unique_ptr<md::AnimationManager>,geo::linear_map<md::MapEngineSetting,long long,std::equal_to<md::MapEngineSetting>,std::allocator<std::pair<md::MapEngineSetting,long long>>,std::vector<std::pair<md::MapEngineSetting,long long>>> const&,unsigned long long,GEOApplicationAuditToken *)::$_31,std::allocator<md::MapEngine::MapEngine(float,float,float,BOOL,VKMapViewPurpose,std::shared_ptr<md::TaskContext> const&,VKMapPurpose,std::unique_ptr<md::AnimationManager>,geo::linear_map<md::MapEngineSetting,long long,std::equal_to<md::MapEngineSetting>,std::allocator<std::pair<md::MapEngineSetting,long long>>,std::vector<std::pair<md::MapEngineSetting,long long>>> const&,unsigned long long,GEOApplicationAuditToken *)::$_31>,void ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::MapEngine::MapEngine(float,float,float,BOOL,VKMapViewPurpose,std::shared_ptr<md::TaskContext> const&,VKMapPurpose,std::unique_ptr<md::AnimationManager>,geo::linear_map<md::MapEngineSetting,long long,std::equal_to<md::MapEngineSetting>,std::allocator<std::pair<md::MapEngineSetting,long long>>,std::vector<std::pair<md::MapEngineSetting,long long>>> const&,unsigned long long,GEOApplicationAuditToken *)::$_31,std::allocator<md::MapEngine::MapEngine(float,float,float,BOOL,VKMapViewPurpose,std::shared_ptr<md::TaskContext> const&,VKMapPurpose,std::unique_ptr<md::AnimationManager>,geo::linear_map<md::MapEngineSetting,long long,std::equal_to<md::MapEngineSetting>,std::allocator<std::pair<md::MapEngineSetting,long long>>,std::vector<std::pair<md::MapEngineSetting,long long>>> const&,unsigned long long,GEOApplicationAuditToken *)::$_31>,void ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42D52F0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<md::MapEngine::MapEngine(float,float,float,BOOL,VKMapViewPurpose,std::shared_ptr<md::TaskContext> const&,VKMapPurpose,std::unique_ptr<md::AnimationManager>,geo::linear_map<md::MapEngineSetting,long long,std::equal_to<md::MapEngineSetting>,std::allocator<std::pair<md::MapEngineSetting,long long>>,std::vector<std::pair<md::MapEngineSetting,long long>>> const&,unsigned long long,GEOApplicationAuditToken *)::$_31,std::allocator<md::MapEngine::MapEngine(float,float,float,BOOL,VKMapViewPurpose,std::shared_ptr<md::TaskContext> const&,VKMapPurpose,std::unique_ptr<md::AnimationManager>,geo::linear_map<md::MapEngineSetting,long long,std::equal_to<md::MapEngineSetting>,std::allocator<std::pair<md::MapEngineSetting,long long>>,std::vector<std::pair<md::MapEngineSetting,long long>>> const&,unsigned long long,GEOApplicationAuditToken *)::$_31>,void ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42D52F0;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<md::MapEngine::MapEngine(float,float,float,BOOL,VKMapViewPurpose,std::shared_ptr<md::TaskContext> const&,VKMapPurpose,std::unique_ptr<md::AnimationManager>,geo::linear_map<md::MapEngineSetting,long long,std::equal_to<md::MapEngineSetting>,std::allocator<std::pair<md::MapEngineSetting,long long>>,std::vector<std::pair<md::MapEngineSetting,long long>>> const&,unsigned long long,GEOApplicationAuditToken *)::$_31,std::allocator<md::MapEngine::MapEngine(float,float,float,BOOL,VKMapViewPurpose,std::shared_ptr<md::TaskContext> const&,VKMapPurpose,std::unique_ptr<md::AnimationManager>,geo::linear_map<md::MapEngineSetting,long long,std::equal_to<md::MapEngineSetting>,std::allocator<std::pair<md::MapEngineSetting,long long>>,std::vector<std::pair<md::MapEngineSetting,long long>>> const&,unsigned long long,GEOApplicationAuditToken *)::$_31>,void ()(void)>::operator()(uint64_t a1)
{
  return md::MapEngine::logLayoutReasonsHistory(*(md::MapEngine **)(a1 + 8), 0);
}

void std::__function::__func<md::MapEngine::MapEngine(float,float,float,BOOL,VKMapViewPurpose,std::shared_ptr<md::TaskContext> const&,VKMapPurpose,std::unique_ptr<md::AnimationManager>,geo::linear_map<md::MapEngineSetting,long long,std::equal_to<md::MapEngineSetting>,std::allocator<std::pair<md::MapEngineSetting,long long>>,std::vector<std::pair<md::MapEngineSetting,long long>>> const&,unsigned long long,GEOApplicationAuditToken *)::$_30,std::allocator<md::MapEngine::MapEngine(float,float,float,BOOL,VKMapViewPurpose,std::shared_ptr<md::TaskContext> const&,VKMapPurpose,std::unique_ptr<md::AnimationManager>,geo::linear_map<md::MapEngineSetting,long long,std::equal_to<md::MapEngineSetting>,std::allocator<std::pair<md::MapEngineSetting,long long>>,std::vector<std::pair<md::MapEngineSetting,long long>>> const&,unsigned long long,GEOApplicationAuditToken *)::$_30>,void ()(gdc::SceneStatus)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::MapEngine::MapEngine(float,float,float,BOOL,VKMapViewPurpose,std::shared_ptr<md::TaskContext> const&,VKMapPurpose,std::unique_ptr<md::AnimationManager>,geo::linear_map<md::MapEngineSetting,long long,std::equal_to<md::MapEngineSetting>,std::allocator<std::pair<md::MapEngineSetting,long long>>,std::vector<std::pair<md::MapEngineSetting,long long>>> const&,unsigned long long,GEOApplicationAuditToken *)::$_30,std::allocator<md::MapEngine::MapEngine(float,float,float,BOOL,VKMapViewPurpose,std::shared_ptr<md::TaskContext> const&,VKMapPurpose,std::unique_ptr<md::AnimationManager>,geo::linear_map<md::MapEngineSetting,long long,std::equal_to<md::MapEngineSetting>,std::allocator<std::pair<md::MapEngineSetting,long long>>,std::vector<std::pair<md::MapEngineSetting,long long>>> const&,unsigned long long,GEOApplicationAuditToken *)::$_30>,void ()(gdc::SceneStatus)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E427CF18;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<md::MapEngine::MapEngine(float,float,float,BOOL,VKMapViewPurpose,std::shared_ptr<md::TaskContext> const&,VKMapPurpose,std::unique_ptr<md::AnimationManager>,geo::linear_map<md::MapEngineSetting,long long,std::equal_to<md::MapEngineSetting>,std::allocator<std::pair<md::MapEngineSetting,long long>>,std::vector<std::pair<md::MapEngineSetting,long long>>> const&,unsigned long long,GEOApplicationAuditToken *)::$_30,std::allocator<md::MapEngine::MapEngine(float,float,float,BOOL,VKMapViewPurpose,std::shared_ptr<md::TaskContext> const&,VKMapPurpose,std::unique_ptr<md::AnimationManager>,geo::linear_map<md::MapEngineSetting,long long,std::equal_to<md::MapEngineSetting>,std::allocator<std::pair<md::MapEngineSetting,long long>>,std::vector<std::pair<md::MapEngineSetting,long long>>> const&,unsigned long long,GEOApplicationAuditToken *)::$_30>,void ()(gdc::SceneStatus)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E427CF18;
  a2[1] = v2;
  return result;
}

void std::__function::__func<md::MapEngine::MapEngine(float,float,float,BOOL,VKMapViewPurpose,std::shared_ptr<md::TaskContext> const&,VKMapPurpose,std::unique_ptr<md::AnimationManager>,geo::linear_map<md::MapEngineSetting,long long,std::equal_to<md::MapEngineSetting>,std::allocator<std::pair<md::MapEngineSetting,long long>>,std::vector<std::pair<md::MapEngineSetting,long long>>> const&,unsigned long long,GEOApplicationAuditToken *)::$_30,std::allocator<md::MapEngine::MapEngine(float,float,float,BOOL,VKMapViewPurpose,std::shared_ptr<md::TaskContext> const&,VKMapPurpose,std::unique_ptr<md::AnimationManager>,geo::linear_map<md::MapEngineSetting,long long,std::equal_to<md::MapEngineSetting>,std::allocator<std::pair<md::MapEngineSetting,long long>>,std::vector<std::pair<md::MapEngineSetting,long long>>> const&,unsigned long long,GEOApplicationAuditToken *)::$_30>,void ()(gdc::SceneStatus)>::operator()(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v2;
  uint64_t v3;
  id WeakRetained;
  id v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  char v9;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *a2;
  WeakRetained = objc_loadWeakRetained((id *)(v2 + 848));

  if (WeakRetained)
  {
    v5 = objc_loadWeakRetained((id *)(v2 + 848));
    objc_msgSend(v5, "didUpdateSceneStatus:", v3);

  }
  if (*(_BYTE *)(v2 + 4608))
  {
    v6 = *(_QWORD *)(v2 + 1080);
    v7 = 1;
    if (v3 >= 2)
      v7 = kVariableLogicFrequency;
    v8 = 1;
  }
  else
  {
    v7 = 0;
    v8 = 0;
    v6 = *(_QWORD *)(v2 + 1080);
  }
  md::MapEngine::updateLogicsFrequency(v2, *(_QWORD **)(v6 + 8), v7, v8);
  if (*(_BYTE *)(*(_QWORD *)(v2 + 1192) + 48) == 18)
  {
    v9 = 3;
    md::MapEngine::setNeedsTick(v2, &v9);
  }
}

void sub_19FAB1934(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void std::__function::__func<md::MapEngine::MapEngine(float,float,float,BOOL,VKMapViewPurpose,std::shared_ptr<md::TaskContext> const&,VKMapPurpose,std::unique_ptr<md::AnimationManager>,geo::linear_map<md::MapEngineSetting,long long,std::equal_to<md::MapEngineSetting>,std::allocator<std::pair<md::MapEngineSetting,long long>>,std::vector<std::pair<md::MapEngineSetting,long long>>> const&,unsigned long long,GEOApplicationAuditToken *)::$_29,std::allocator<md::MapEngine::MapEngine(float,float,float,BOOL,VKMapViewPurpose,std::shared_ptr<md::TaskContext> const&,VKMapPurpose,std::unique_ptr<md::AnimationManager>,geo::linear_map<md::MapEngineSetting,long long,std::equal_to<md::MapEngineSetting>,std::allocator<std::pair<md::MapEngineSetting,long long>>,std::vector<std::pair<md::MapEngineSetting,long long>>> const&,unsigned long long,GEOApplicationAuditToken *)::$_29>,void ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::MapEngine::MapEngine(float,float,float,BOOL,VKMapViewPurpose,std::shared_ptr<md::TaskContext> const&,VKMapPurpose,std::unique_ptr<md::AnimationManager>,geo::linear_map<md::MapEngineSetting,long long,std::equal_to<md::MapEngineSetting>,std::allocator<std::pair<md::MapEngineSetting,long long>>,std::vector<std::pair<md::MapEngineSetting,long long>>> const&,unsigned long long,GEOApplicationAuditToken *)::$_29,std::allocator<md::MapEngine::MapEngine(float,float,float,BOOL,VKMapViewPurpose,std::shared_ptr<md::TaskContext> const&,VKMapPurpose,std::unique_ptr<md::AnimationManager>,geo::linear_map<md::MapEngineSetting,long long,std::equal_to<md::MapEngineSetting>,std::allocator<std::pair<md::MapEngineSetting,long long>>,std::vector<std::pair<md::MapEngineSetting,long long>>> const&,unsigned long long,GEOApplicationAuditToken *)::$_29>,void ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E427CED0;
  result[1] = v3;
  return result;
}

void std::__function::__func<md::MapEngine::MapEngine(float,float,float,BOOL,VKMapViewPurpose,std::shared_ptr<md::TaskContext> const&,VKMapPurpose,std::unique_ptr<md::AnimationManager>,geo::linear_map<md::MapEngineSetting,long long,std::equal_to<md::MapEngineSetting>,std::allocator<std::pair<md::MapEngineSetting,long long>>,std::vector<std::pair<md::MapEngineSetting,long long>>> const&,unsigned long long,GEOApplicationAuditToken *)::$_28,std::allocator<md::MapEngine::MapEngine(float,float,float,BOOL,VKMapViewPurpose,std::shared_ptr<md::TaskContext> const&,VKMapPurpose,std::unique_ptr<md::AnimationManager>,geo::linear_map<md::MapEngineSetting,long long,std::equal_to<md::MapEngineSetting>,std::allocator<std::pair<md::MapEngineSetting,long long>>,std::vector<std::pair<md::MapEngineSetting,long long>>> const&,unsigned long long,GEOApplicationAuditToken *)::$_28>,void ()(NSError *)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::MapEngine::MapEngine(float,float,float,BOOL,VKMapViewPurpose,std::shared_ptr<md::TaskContext> const&,VKMapPurpose,std::unique_ptr<md::AnimationManager>,geo::linear_map<md::MapEngineSetting,long long,std::equal_to<md::MapEngineSetting>,std::allocator<std::pair<md::MapEngineSetting,long long>>,std::vector<std::pair<md::MapEngineSetting,long long>>> const&,unsigned long long,GEOApplicationAuditToken *)::$_28,std::allocator<md::MapEngine::MapEngine(float,float,float,BOOL,VKMapViewPurpose,std::shared_ptr<md::TaskContext> const&,VKMapPurpose,std::unique_ptr<md::AnimationManager>,geo::linear_map<md::MapEngineSetting,long long,std::equal_to<md::MapEngineSetting>,std::allocator<std::pair<md::MapEngineSetting,long long>>,std::vector<std::pair<md::MapEngineSetting,long long>>> const&,unsigned long long,GEOApplicationAuditToken *)::$_28>,void ()(NSError *)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E427CE88;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<md::MapEngine::MapEngine(float,float,float,BOOL,VKMapViewPurpose,std::shared_ptr<md::TaskContext> const&,VKMapPurpose,std::unique_ptr<md::AnimationManager>,geo::linear_map<md::MapEngineSetting,long long,std::equal_to<md::MapEngineSetting>,std::allocator<std::pair<md::MapEngineSetting,long long>>,std::vector<std::pair<md::MapEngineSetting,long long>>> const&,unsigned long long,GEOApplicationAuditToken *)::$_28,std::allocator<md::MapEngine::MapEngine(float,float,float,BOOL,VKMapViewPurpose,std::shared_ptr<md::TaskContext> const&,VKMapPurpose,std::unique_ptr<md::AnimationManager>,geo::linear_map<md::MapEngineSetting,long long,std::equal_to<md::MapEngineSetting>,std::allocator<std::pair<md::MapEngineSetting,long long>>,std::vector<std::pair<md::MapEngineSetting,long long>>> const&,unsigned long long,GEOApplicationAuditToken *)::$_28>,void ()(NSError *)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E427CE88;
  a2[1] = v2;
  return result;
}

void std::__function::__func<md::MapEngine::MapEngine(float,float,float,BOOL,VKMapViewPurpose,std::shared_ptr<md::TaskContext> const&,VKMapPurpose,std::unique_ptr<md::AnimationManager>,geo::linear_map<md::MapEngineSetting,long long,std::equal_to<md::MapEngineSetting>,std::allocator<std::pair<md::MapEngineSetting,long long>>,std::vector<std::pair<md::MapEngineSetting,long long>>> const&,unsigned long long,GEOApplicationAuditToken *)::$_28,std::allocator<md::MapEngine::MapEngine(float,float,float,BOOL,VKMapViewPurpose,std::shared_ptr<md::TaskContext> const&,VKMapPurpose,std::unique_ptr<md::AnimationManager>,geo::linear_map<md::MapEngineSetting,long long,std::equal_to<md::MapEngineSetting>,std::allocator<std::pair<md::MapEngineSetting,long long>>,std::vector<std::pair<md::MapEngineSetting,long long>>> const&,unsigned long long,GEOApplicationAuditToken *)::$_28>,void ()(NSError *)>::operator()(uint64_t a1, id *a2)
{
  id *v3;
  id WeakRetained;
  id v5;
  void *v6;
  id v7;

  v7 = *a2;
  v3 = (id *)(*(_QWORD *)(a1 + 8) + 848);
  WeakRetained = objc_loadWeakRetained(v3);

  if (WeakRetained)
  {
    v5 = objc_loadWeakRetained(v3);
    v6 = v5;
    if (v7)
      objc_msgSend(v5, "didFinishLoadingDataWithError:");
    else
      objc_msgSend(v5, "didFinishLoadingData");

  }
}

void sub_19FAB1A78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void std::__function::__func<md::MapEngine::MapEngine(float,float,float,BOOL,VKMapViewPurpose,std::shared_ptr<md::TaskContext> const&,VKMapPurpose,std::unique_ptr<md::AnimationManager>,geo::linear_map<md::MapEngineSetting,long long,std::equal_to<md::MapEngineSetting>,std::allocator<std::pair<md::MapEngineSetting,long long>>,std::vector<std::pair<md::MapEngineSetting,long long>>> const&,unsigned long long,GEOApplicationAuditToken *)::$_27,std::allocator<md::MapEngine::MapEngine(float,float,float,BOOL,VKMapViewPurpose,std::shared_ptr<md::TaskContext> const&,VKMapPurpose,std::unique_ptr<md::AnimationManager>,geo::linear_map<md::MapEngineSetting,long long,std::equal_to<md::MapEngineSetting>,std::allocator<std::pair<md::MapEngineSetting,long long>>,std::vector<std::pair<md::MapEngineSetting,long long>>> const&,unsigned long long,GEOApplicationAuditToken *)::$_27>,void ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::MapEngine::MapEngine(float,float,float,BOOL,VKMapViewPurpose,std::shared_ptr<md::TaskContext> const&,VKMapPurpose,std::unique_ptr<md::AnimationManager>,geo::linear_map<md::MapEngineSetting,long long,std::equal_to<md::MapEngineSetting>,std::allocator<std::pair<md::MapEngineSetting,long long>>,std::vector<std::pair<md::MapEngineSetting,long long>>> const&,unsigned long long,GEOApplicationAuditToken *)::$_27,std::allocator<md::MapEngine::MapEngine(float,float,float,BOOL,VKMapViewPurpose,std::shared_ptr<md::TaskContext> const&,VKMapPurpose,std::unique_ptr<md::AnimationManager>,geo::linear_map<md::MapEngineSetting,long long,std::equal_to<md::MapEngineSetting>,std::allocator<std::pair<md::MapEngineSetting,long long>>,std::vector<std::pair<md::MapEngineSetting,long long>>> const&,unsigned long long,GEOApplicationAuditToken *)::$_27>,void ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E427CE40;
  result[1] = v3;
  return result;
}

void std::__function::__func<md::MapEngine::MapEngine(float,float,float,BOOL,VKMapViewPurpose,std::shared_ptr<md::TaskContext> const&,VKMapPurpose,std::unique_ptr<md::AnimationManager>,geo::linear_map<md::MapEngineSetting,long long,std::equal_to<md::MapEngineSetting>,std::allocator<std::pair<md::MapEngineSetting,long long>>,std::vector<std::pair<md::MapEngineSetting,long long>>> const&,unsigned long long,GEOApplicationAuditToken *)::$_26,std::allocator<md::MapEngine::MapEngine(float,float,float,BOOL,VKMapViewPurpose,std::shared_ptr<md::TaskContext> const&,VKMapPurpose,std::unique_ptr<md::AnimationManager>,geo::linear_map<md::MapEngineSetting,long long,std::equal_to<md::MapEngineSetting>,std::allocator<std::pair<md::MapEngineSetting,long long>>,std::vector<std::pair<md::MapEngineSetting,long long>>> const&,unsigned long long,GEOApplicationAuditToken *)::$_26>,void ()(long long)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::MapEngine::MapEngine(float,float,float,BOOL,VKMapViewPurpose,std::shared_ptr<md::TaskContext> const&,VKMapPurpose,std::unique_ptr<md::AnimationManager>,geo::linear_map<md::MapEngineSetting,long long,std::equal_to<md::MapEngineSetting>,std::allocator<std::pair<md::MapEngineSetting,long long>>,std::vector<std::pair<md::MapEngineSetting,long long>>> const&,unsigned long long,GEOApplicationAuditToken *)::$_26,std::allocator<md::MapEngine::MapEngine(float,float,float,BOOL,VKMapViewPurpose,std::shared_ptr<md::TaskContext> const&,VKMapPurpose,std::unique_ptr<md::AnimationManager>,geo::linear_map<md::MapEngineSetting,long long,std::equal_to<md::MapEngineSetting>,std::allocator<std::pair<md::MapEngineSetting,long long>>,std::vector<std::pair<md::MapEngineSetting,long long>>> const&,unsigned long long,GEOApplicationAuditToken *)::$_26>,void ()(long long)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E427CDF8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<md::MapEngine::MapEngine(float,float,float,BOOL,VKMapViewPurpose,std::shared_ptr<md::TaskContext> const&,VKMapPurpose,std::unique_ptr<md::AnimationManager>,geo::linear_map<md::MapEngineSetting,long long,std::equal_to<md::MapEngineSetting>,std::allocator<std::pair<md::MapEngineSetting,long long>>,std::vector<std::pair<md::MapEngineSetting,long long>>> const&,unsigned long long,GEOApplicationAuditToken *)::$_26,std::allocator<md::MapEngine::MapEngine(float,float,float,BOOL,VKMapViewPurpose,std::shared_ptr<md::TaskContext> const&,VKMapPurpose,std::unique_ptr<md::AnimationManager>,geo::linear_map<md::MapEngineSetting,long long,std::equal_to<md::MapEngineSetting>,std::allocator<std::pair<md::MapEngineSetting,long long>>,std::vector<std::pair<md::MapEngineSetting,long long>>> const&,unsigned long long,GEOApplicationAuditToken *)::$_26>,void ()(long long)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E427CDF8;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<md::MapEngine::MapEngine(float,float,float,BOOL,VKMapViewPurpose,std::shared_ptr<md::TaskContext> const&,VKMapPurpose,std::unique_ptr<md::AnimationManager>,geo::linear_map<md::MapEngineSetting,long long,std::equal_to<md::MapEngineSetting>,std::allocator<std::pair<md::MapEngineSetting,long long>>,std::vector<std::pair<md::MapEngineSetting,long long>>> const&,unsigned long long,GEOApplicationAuditToken *)::$_26,std::allocator<md::MapEngine::MapEngine(float,float,float,BOOL,VKMapViewPurpose,std::shared_ptr<md::TaskContext> const&,VKMapPurpose,std::unique_ptr<md::AnimationManager>,geo::linear_map<md::MapEngineSetting,long long,std::equal_to<md::MapEngineSetting>,std::allocator<std::pair<md::MapEngineSetting,long long>>,std::vector<std::pair<md::MapEngineSetting,long long>>> const&,unsigned long long,GEOApplicationAuditToken *)::$_26>,void ()(long long)>::operator()(uint64_t a1, _QWORD *a2)
{
  return md::World::setEnableGlobe(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 896) + 32), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 896) + 40), *a2 != 0);
}

void std::__function::__func<md::MapEngine::clearScene(void)::$_0,std::allocator<md::MapEngine::clearScene(void)::$_0>,void ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::MapEngine::clearScene(void)::$_0,std::allocator<md::MapEngine::clearScene(void)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42D49F0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<md::MapEngine::clearScene(void)::$_0,std::allocator<md::MapEngine::clearScene(void)::$_0>,void ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42D49F0;
  a2[1] = v2;
  return result;
}

void std::__function::__func<md::MapEngine::clearScene(void)::$_0,std::allocator<md::MapEngine::clearScene(void)::$_0>,void ()(void)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v9[3];
  _QWORD *v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(v2 + 1120);
  v4 = v9;
  v9[0] = &off_1E42CA880;
  v10 = v9;
  v5 = *(_QWORD **)(v3 + 24);
  if (v5)
  {
    v8 = v5[5];
    v4 = v9;
    while (1)
    {
      (*(void (**)(_QWORD *, uint64_t *))(*v4 + 48))(v4, &v8);
      v5 = (_QWORD *)*v5;
      v4 = v10;
      if (!v5)
        break;
      v8 = v5[5];
      if (!v10)
      {
        std::__throw_bad_function_call[abi:nn180100]();
        __break(1u);
        break;
      }
    }
    if (v4 == v9)
    {
      v6 = 4;
      v4 = v9;
    }
    else
    {
      if (!v4)
        goto LABEL_12;
      v6 = 5;
    }
  }
  else
  {
    v6 = 4;
  }
  (*(void (**)(_QWORD *, uint64_t))(*v4 + 8 * v6))(v4, a2);
LABEL_12:
  md::World::clearAllData(*(md::World **)(v2 + 896));
  (*(void (**)(_QWORD))(**(_QWORD **)(v2 + 872) + 40))(*(_QWORD *)(v2 + 872));
  v7 = **(_QWORD **)(v2 + 120);
  if (v7)
  {
    LOBYTE(v9[0]) = 5;
    md::MapEngine::setNeedsTick(v7, v9);
  }
}

void sub_19FAB1CE4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v14;
  uint64_t v15;

  v14 = a13;
  if (a13 == &a10)
  {
    v15 = 4;
    v14 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v15 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v14 + 8 * v15))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t md::MapEngine::createFlyoverRenderer(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  int8x8_t *v3;
  int8x8_t v4;
  uint8x8_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;

  if (!*(_QWORD *)(this + 864))
  {
    v1 = this;
    if (!*(_BYTE *)(this + 1241))
    {
      v2 = operator new();
      md::realistic::RealisticRenderer::RealisticRenderer(v2, *(_QWORD *)(v1 + 120), *(void **)(v1 + 840), (_QWORD *)(v1 + 8), (_QWORD *)v1, *(_QWORD *)(v1 + 32));
      this = *(_QWORD *)(v1 + 864);
      *(_QWORD *)(v1 + 864) = v2;
      if (this)
      {
        this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 8))(this);
        v2 = *(_QWORD *)(v1 + 864);
      }
      *(_QWORD *)(*(_QWORD *)(v1 + 896) + 264) = *(_QWORD *)(v2 + 128);
      v3 = *(int8x8_t **)(v1 + 1120);
      v4 = v3[2];
      if (v4)
      {
        v5 = (uint8x8_t)vcnt_s8(v4);
        v5.i16[0] = vaddlv_u8(v5);
        if (v5.u32[0] > 1uLL)
        {
          v6 = 0x79FE0BD9535D5C4DLL;
          if (*(_QWORD *)&v4 <= 0x79FE0BD9535D5C4DuLL)
            v6 = 0x79FE0BD9535D5C4DuLL % *(_QWORD *)&v4;
        }
        else
        {
          v6 = (*(_QWORD *)&v4 - 1) & 0x79FE0BD9535D5C4DLL;
        }
        v7 = *(_QWORD **)(*(_QWORD *)&v3[1] + 8 * v6);
        if (v7)
        {
          v8 = (_QWORD *)*v7;
          if (v8)
          {
            if (v5.u32[0] < 2uLL)
            {
              v9 = *(_QWORD *)&v4 - 1;
              while (1)
              {
                v11 = v8[1];
                if (v11 == 0x79FE0BD9535D5C4DLL)
                {
                  if (v8[2] == 0x79FE0BD9535D5C4DLL)
                    goto LABEL_27;
                }
                else if ((v11 & v9) != v6)
                {
                  return this;
                }
                v8 = (_QWORD *)*v8;
                if (!v8)
                  return this;
              }
            }
            do
            {
              v10 = v8[1];
              if (v10 == 0x79FE0BD9535D5C4DLL)
              {
                if (v8[2] == 0x79FE0BD9535D5C4DLL)
                {
LABEL_27:
                  this = v8[5];
                  if (this)
                    return md::AnchorLogic::setGlobe(this, *(altitude::GlobeView **)(*(_QWORD *)(v1 + 864) + 128));
                  return this;
                }
              }
              else
              {
                if (v10 >= *(_QWORD *)&v4)
                  v10 %= *(_QWORD *)&v4;
                if (v10 != v6)
                  return this;
              }
              v8 = (_QWORD *)*v8;
            }
            while (v8);
          }
        }
      }
    }
  }
  return this;
}

void sub_19FAB1EB8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AF4E00](v1, 0x10A1C405D6FF93FLL);
  _Unwind_Resume(a1);
}

void std::__function::__func<md::MapEngine::updateForConfigurationAndMode(double)::$_1,std::allocator<md::MapEngine::updateForConfigurationAndMode(double)::$_1>,void ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::MapEngine::updateForConfigurationAndMode(double)::$_1,std::allocator<md::MapEngine::updateForConfigurationAndMode(double)::$_1>,void ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E427CC48;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<md::MapEngine::updateForConfigurationAndMode(double)::$_1,std::allocator<md::MapEngine::updateForConfigurationAndMode(double)::$_1>,void ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E427CC48;
  a2[1] = v2;
  return result;
}

void std::__function::__func<md::MapEngine::updateForConfigurationAndMode(double)::$_1,std::allocator<md::MapEngine::updateForConfigurationAndMode(double)::$_1>,void ()(void)>::operator()(uint64_t a1)
{
  uint64_t v1;
  NSObject *v2;
  NSObject *v3;
  os_signpost_id_t v4;
  uint8_t v5[16];

  v1 = *(_QWORD *)(a1 + 8);
  if (GEOGetVectorKitPerformanceLog_onceToken != -1)
    dispatch_once(&GEOGetVectorKitPerformanceLog_onceToken, &__block_literal_global_13_11780);
  v2 = (id)GEOGetVectorKitPerformanceLog_log;
  v3 = v2;
  v4 = *(_QWORD *)(v1 + 1216);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)v5 = 0;
    _os_signpost_emit_with_name_impl(&dword_19F029000, v3, OS_SIGNPOST_INTERVAL_END, v4, "ApplyConfiguration", (const char *)&unk_1A0189141, v5, 2u);
  }

}

void std::__function::__func<md::MapEngine::updateForConfigurationAndMode(double)::$_0,std::allocator<md::MapEngine::updateForConfigurationAndMode(double)::$_0>,void ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::MapEngine::updateForConfigurationAndMode(double)::$_0,std::allocator<md::MapEngine::updateForConfigurationAndMode(double)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E427CC00;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<md::MapEngine::updateForConfigurationAndMode(double)::$_0,std::allocator<md::MapEngine::updateForConfigurationAndMode(double)::$_0>,void ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E427CC00;
  a2[1] = v2;
  return result;
}

void std::__function::__func<md::MapEngine::updateForConfigurationAndMode(double)::$_0,std::allocator<md::MapEngine::updateForConfigurationAndMode(double)::$_0>,void ()(void)>::operator()(uint64_t a1)
{
  uint64_t v1;
  NSObject *v2;
  NSObject *v3;
  os_signpost_id_t v4;
  uint8_t v5[16];

  v1 = *(_QWORD *)(a1 + 8);
  if (GEOGetVectorKitPerformanceLog_onceToken != -1)
    dispatch_once(&GEOGetVectorKitPerformanceLog_onceToken, &__block_literal_global_13_11780);
  v2 = (id)GEOGetVectorKitPerformanceLog_log;
  v3 = v2;
  v4 = *(_QWORD *)(v1 + 1216);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)v5 = 0;
    _os_signpost_emit_with_name_impl(&dword_19F029000, v3, OS_SIGNPOST_INTERVAL_BEGIN, v4, "ApplyConfiguration", (const char *)&unk_1A0189141, v5, 2u);
  }

}

void std::__shared_ptr_pointer<LayoutContextProviderWrapper *,std::shared_ptr<LayoutContextProviderWrapper>::__shared_ptr_default_delete<LayoutContextProviderWrapper,LayoutContextProviderWrapper>,std::allocator<LayoutContextProviderWrapper>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_pointer<LayoutContextProviderWrapper *,std::shared_ptr<LayoutContextProviderWrapper>::__shared_ptr_default_delete<LayoutContextProviderWrapper,LayoutContextProviderWrapper>,std::allocator<LayoutContextProviderWrapper>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 16))(result);
  return result;
}

uint64_t LayoutContextProviderWrapper::layoutContext(LayoutContextProviderWrapper *this)
{
  return *((_QWORD *)this + 1);
}

void LayoutContextProviderWrapper::~LayoutContextProviderWrapper(LayoutContextProviderWrapper *this)
{
  JUMPOUT(0x1A1AF4E00);
}

void std::__function::__func<md::MapEngine::MapEngine(float,float,float,BOOL,VKMapViewPurpose,std::shared_ptr<md::TaskContext> const&,VKMapPurpose,std::unique_ptr<md::AnimationManager>,geo::linear_map<md::MapEngineSetting,long long,std::equal_to<md::MapEngineSetting>,std::allocator<std::pair<md::MapEngineSetting,long long>>,std::vector<std::pair<md::MapEngineSetting,long long>>> const&,unsigned long long,GEOApplicationAuditToken *)::$_24,std::allocator<md::MapEngine::MapEngine(float,float,float,BOOL,VKMapViewPurpose,std::shared_ptr<md::TaskContext> const&,VKMapPurpose,std::unique_ptr<md::AnimationManager>,geo::linear_map<md::MapEngineSetting,long long,std::equal_to<md::MapEngineSetting>,std::allocator<std::pair<md::MapEngineSetting,long long>>,std::vector<std::pair<md::MapEngineSetting,long long>>> const&,unsigned long long,GEOApplicationAuditToken *)::$_24>,void ()(VKMuninAvailability)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::MapEngine::MapEngine(float,float,float,BOOL,VKMapViewPurpose,std::shared_ptr<md::TaskContext> const&,VKMapPurpose,std::unique_ptr<md::AnimationManager>,geo::linear_map<md::MapEngineSetting,long long,std::equal_to<md::MapEngineSetting>,std::allocator<std::pair<md::MapEngineSetting,long long>>,std::vector<std::pair<md::MapEngineSetting,long long>>> const&,unsigned long long,GEOApplicationAuditToken *)::$_24,std::allocator<md::MapEngine::MapEngine(float,float,float,BOOL,VKMapViewPurpose,std::shared_ptr<md::TaskContext> const&,VKMapPurpose,std::unique_ptr<md::AnimationManager>,geo::linear_map<md::MapEngineSetting,long long,std::equal_to<md::MapEngineSetting>,std::allocator<std::pair<md::MapEngineSetting,long long>>,std::vector<std::pair<md::MapEngineSetting,long long>>> const&,unsigned long long,GEOApplicationAuditToken *)::$_24>,void ()(VKMuninAvailability)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42D52A8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<md::MapEngine::MapEngine(float,float,float,BOOL,VKMapViewPurpose,std::shared_ptr<md::TaskContext> const&,VKMapPurpose,std::unique_ptr<md::AnimationManager>,geo::linear_map<md::MapEngineSetting,long long,std::equal_to<md::MapEngineSetting>,std::allocator<std::pair<md::MapEngineSetting,long long>>,std::vector<std::pair<md::MapEngineSetting,long long>>> const&,unsigned long long,GEOApplicationAuditToken *)::$_24,std::allocator<md::MapEngine::MapEngine(float,float,float,BOOL,VKMapViewPurpose,std::shared_ptr<md::TaskContext> const&,VKMapPurpose,std::unique_ptr<md::AnimationManager>,geo::linear_map<md::MapEngineSetting,long long,std::equal_to<md::MapEngineSetting>,std::allocator<std::pair<md::MapEngineSetting,long long>>,std::vector<std::pair<md::MapEngineSetting,long long>>> const&,unsigned long long,GEOApplicationAuditToken *)::$_24>,void ()(VKMuninAvailability)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42D52A8;
  a2[1] = v2;
  return result;
}

void std::__function::__func<md::MapEngine::MapEngine(float,float,float,BOOL,VKMapViewPurpose,std::shared_ptr<md::TaskContext> const&,VKMapPurpose,std::unique_ptr<md::AnimationManager>,geo::linear_map<md::MapEngineSetting,long long,std::equal_to<md::MapEngineSetting>,std::allocator<std::pair<md::MapEngineSetting,long long>>,std::vector<std::pair<md::MapEngineSetting,long long>>> const&,unsigned long long,GEOApplicationAuditToken *)::$_24,std::allocator<md::MapEngine::MapEngine(float,float,float,BOOL,VKMapViewPurpose,std::shared_ptr<md::TaskContext> const&,VKMapPurpose,std::unique_ptr<md::AnimationManager>,geo::linear_map<md::MapEngineSetting,long long,std::equal_to<md::MapEngineSetting>,std::allocator<std::pair<md::MapEngineSetting,long long>>,std::vector<std::pair<md::MapEngineSetting,long long>>> const&,unsigned long long,GEOApplicationAuditToken *)::$_24>,void ()(VKMuninAvailability)>::operator()(uint64_t a1, void **a2)
{
  uint64_t v3;
  void *v4;
  void *v5;
  void *v6;
  NSObject *v7;
  _QWORD block[4];
  id v9[2];
  id location;

  v3 = *(_QWORD *)(a1 + 8);
  v4 = *(void **)(v3 + 1104);
  if (v4)
  {
    v5 = *a2;
    objc_initWeak(&location, v4);
    v6 = **(void ***)(v3 + 8);
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 3221225472;
    block[2] = ___ZZN2md9MapEngineC1Efffb16VKMapViewPurposeRKNSt3__110shared_ptrINS_11TaskContextEEE12VKMapPurposeNS2_10unique_ptrINS_16AnimationManagerENS2_14default_deleteISA_EEEERKN3geo10linear_mapINS_16MapEngineSettingExNS2_8equal_toISG_EENS2_9allocatorINS2_4pairISG_xEEEENS2_6vectorISL_SM_EEEEyP24GEOApplicationAuditTokenENK4__24clE19VKMuninAvailability_block_invoke;
    block[3] = &unk_1E42F3198;
    v7 = v6;
    objc_copyWeak(v9, &location);
    v9[1] = v5;
    dispatch_async(v7, block);

    objc_destroyWeak(v9);
    objc_destroyWeak(&location);
  }
}

void ___ZZN2md9MapEngineC1Efffb16VKMapViewPurposeRKNSt3__110shared_ptrINS_11TaskContextEEE12VKMapPurposeNS2_10unique_ptrINS_16AnimationManagerENS2_14default_deleteISA_EEEERKN3geo10linear_mapINS_16MapEngineSettingExNS2_8equal_toISG_EENS2_9allocatorINS2_4pairISG_xEEEENS2_6vectorISL_SM_EEEEyP24GEOApplicationAuditTokenENK4__24clE19VKMuninAvailability_block_invoke(uint64_t a1)
{
  id WeakRetained;
  void *v3;
  id v4;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    v4 = WeakRetained;
    objc_msgSend(WeakRetained, "cameraDelegate");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "mapLayerMuninAvailabilityDidChange:", *(_QWORD *)(a1 + 40));

    WeakRetained = v4;
  }

}

void sub_19FAB22E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void std::__function::__func<md::MapEngine::MapEngine(float,float,float,BOOL,VKMapViewPurpose,std::shared_ptr<md::TaskContext> const&,VKMapPurpose,std::unique_ptr<md::AnimationManager>,geo::linear_map<md::MapEngineSetting,long long,std::equal_to<md::MapEngineSetting>,std::allocator<std::pair<md::MapEngineSetting,long long>>,std::vector<std::pair<md::MapEngineSetting,long long>>> const&,unsigned long long,GEOApplicationAuditToken *)::$_23,std::allocator<md::MapEngine::MapEngine(float,float,float,BOOL,VKMapViewPurpose,std::shared_ptr<md::TaskContext> const&,VKMapPurpose,std::unique_ptr<md::AnimationManager>,geo::linear_map<md::MapEngineSetting,long long,std::equal_to<md::MapEngineSetting>,std::allocator<std::pair<md::MapEngineSetting,long long>>,std::vector<std::pair<md::MapEngineSetting,long long>>> const&,unsigned long long,GEOApplicationAuditToken *)::$_23>,void ()(geo::Unit<geo::DegreeUnitDescription,double>)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::MapEngine::MapEngine(float,float,float,BOOL,VKMapViewPurpose,std::shared_ptr<md::TaskContext> const&,VKMapPurpose,std::unique_ptr<md::AnimationManager>,geo::linear_map<md::MapEngineSetting,long long,std::equal_to<md::MapEngineSetting>,std::allocator<std::pair<md::MapEngineSetting,long long>>,std::vector<std::pair<md::MapEngineSetting,long long>>> const&,unsigned long long,GEOApplicationAuditToken *)::$_23,std::allocator<md::MapEngine::MapEngine(float,float,float,BOOL,VKMapViewPurpose,std::shared_ptr<md::TaskContext> const&,VKMapPurpose,std::unique_ptr<md::AnimationManager>,geo::linear_map<md::MapEngineSetting,long long,std::equal_to<md::MapEngineSetting>,std::allocator<std::pair<md::MapEngineSetting,long long>>,std::vector<std::pair<md::MapEngineSetting,long long>>> const&,unsigned long long,GEOApplicationAuditToken *)::$_23>,void ()(geo::Unit<geo::DegreeUnitDescription,double>)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42D5260;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<md::MapEngine::MapEngine(float,float,float,BOOL,VKMapViewPurpose,std::shared_ptr<md::TaskContext> const&,VKMapPurpose,std::unique_ptr<md::AnimationManager>,geo::linear_map<md::MapEngineSetting,long long,std::equal_to<md::MapEngineSetting>,std::allocator<std::pair<md::MapEngineSetting,long long>>,std::vector<std::pair<md::MapEngineSetting,long long>>> const&,unsigned long long,GEOApplicationAuditToken *)::$_23,std::allocator<md::MapEngine::MapEngine(float,float,float,BOOL,VKMapViewPurpose,std::shared_ptr<md::TaskContext> const&,VKMapPurpose,std::unique_ptr<md::AnimationManager>,geo::linear_map<md::MapEngineSetting,long long,std::equal_to<md::MapEngineSetting>,std::allocator<std::pair<md::MapEngineSetting,long long>>,std::vector<std::pair<md::MapEngineSetting,long long>>> const&,unsigned long long,GEOApplicationAuditToken *)::$_23>,void ()(geo::Unit<geo::DegreeUnitDescription,double>)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42D5260;
  a2[1] = v2;
  return result;
}

void std::__function::__func<md::MapEngine::MapEngine(float,float,float,BOOL,VKMapViewPurpose,std::shared_ptr<md::TaskContext> const&,VKMapPurpose,std::unique_ptr<md::AnimationManager>,geo::linear_map<md::MapEngineSetting,long long,std::equal_to<md::MapEngineSetting>,std::allocator<std::pair<md::MapEngineSetting,long long>>,std::vector<std::pair<md::MapEngineSetting,long long>>> const&,unsigned long long,GEOApplicationAuditToken *)::$_23,std::allocator<md::MapEngine::MapEngine(float,float,float,BOOL,VKMapViewPurpose,std::shared_ptr<md::TaskContext> const&,VKMapPurpose,std::unique_ptr<md::AnimationManager>,geo::linear_map<md::MapEngineSetting,long long,std::equal_to<md::MapEngineSetting>,std::allocator<std::pair<md::MapEngineSetting,long long>>,std::vector<std::pair<md::MapEngineSetting,long long>>> const&,unsigned long long,GEOApplicationAuditToken *)::$_23>,void ()(geo::Unit<geo::DegreeUnitDescription,double>)>::operator()(uint64_t a1, double *a2)
{
  double v2;
  id WeakRetained;

  v2 = *a2;
  WeakRetained = objc_loadWeakRetained((id *)(*(_QWORD *)(a1 + 8) + 848));
  objc_msgSend(WeakRetained, "didUpdateVerticalYawTo:", v2);

}

void sub_19FAB23B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void std::__function::__func<md::MapEngine::MapEngine(float,float,float,BOOL,VKMapViewPurpose,std::shared_ptr<md::TaskContext> const&,VKMapPurpose,std::unique_ptr<md::AnimationManager>,geo::linear_map<md::MapEngineSetting,long long,std::equal_to<md::MapEngineSetting>,std::allocator<std::pair<md::MapEngineSetting,long long>>,std::vector<std::pair<md::MapEngineSetting,long long>>> const&,unsigned long long,GEOApplicationAuditToken *)::$_22,std::allocator<md::MapEngine::MapEngine(float,float,float,BOOL,VKMapViewPurpose,std::shared_ptr<md::TaskContext> const&,VKMapPurpose,std::unique_ptr<md::AnimationManager>,geo::linear_map<md::MapEngineSetting,long long,std::equal_to<md::MapEngineSetting>,std::allocator<std::pair<md::MapEngineSetting,long long>>,std::vector<std::pair<md::MapEngineSetting,long long>>> const&,unsigned long long,GEOApplicationAuditToken *)::$_22>,void ()(geo::Mercator2<double>,BOOL)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::MapEngine::MapEngine(float,float,float,BOOL,VKMapViewPurpose,std::shared_ptr<md::TaskContext> const&,VKMapPurpose,std::unique_ptr<md::AnimationManager>,geo::linear_map<md::MapEngineSetting,long long,std::equal_to<md::MapEngineSetting>,std::allocator<std::pair<md::MapEngineSetting,long long>>,std::vector<std::pair<md::MapEngineSetting,long long>>> const&,unsigned long long,GEOApplicationAuditToken *)::$_22,std::allocator<md::MapEngine::MapEngine(float,float,float,BOOL,VKMapViewPurpose,std::shared_ptr<md::TaskContext> const&,VKMapPurpose,std::unique_ptr<md::AnimationManager>,geo::linear_map<md::MapEngineSetting,long long,std::equal_to<md::MapEngineSetting>,std::allocator<std::pair<md::MapEngineSetting,long long>>,std::vector<std::pair<md::MapEngineSetting,long long>>> const&,unsigned long long,GEOApplicationAuditToken *)::$_22>,void ()(geo::Mercator2<double>,BOOL)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E427CDB0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<md::MapEngine::MapEngine(float,float,float,BOOL,VKMapViewPurpose,std::shared_ptr<md::TaskContext> const&,VKMapPurpose,std::unique_ptr<md::AnimationManager>,geo::linear_map<md::MapEngineSetting,long long,std::equal_to<md::MapEngineSetting>,std::allocator<std::pair<md::MapEngineSetting,long long>>,std::vector<std::pair<md::MapEngineSetting,long long>>> const&,unsigned long long,GEOApplicationAuditToken *)::$_22,std::allocator<md::MapEngine::MapEngine(float,float,float,BOOL,VKMapViewPurpose,std::shared_ptr<md::TaskContext> const&,VKMapPurpose,std::unique_ptr<md::AnimationManager>,geo::linear_map<md::MapEngineSetting,long long,std::equal_to<md::MapEngineSetting>,std::allocator<std::pair<md::MapEngineSetting,long long>>,std::vector<std::pair<md::MapEngineSetting,long long>>> const&,unsigned long long,GEOApplicationAuditToken *)::$_22>,void ()(geo::Mercator2<double>,BOOL)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E427CDB0;
  a2[1] = v2;
  return result;
}

void std::__function::__func<md::MapEngine::MapEngine(float,float,float,BOOL,VKMapViewPurpose,std::shared_ptr<md::TaskContext> const&,VKMapPurpose,std::unique_ptr<md::AnimationManager>,geo::linear_map<md::MapEngineSetting,long long,std::equal_to<md::MapEngineSetting>,std::allocator<std::pair<md::MapEngineSetting,long long>>,std::vector<std::pair<md::MapEngineSetting,long long>>> const&,unsigned long long,GEOApplicationAuditToken *)::$_22,std::allocator<md::MapEngine::MapEngine(float,float,float,BOOL,VKMapViewPurpose,std::shared_ptr<md::TaskContext> const&,VKMapPurpose,std::unique_ptr<md::AnimationManager>,geo::linear_map<md::MapEngineSetting,long long,std::equal_to<md::MapEngineSetting>,std::allocator<std::pair<md::MapEngineSetting,long long>>,std::vector<std::pair<md::MapEngineSetting,long long>>> const&,unsigned long long,GEOApplicationAuditToken *)::$_22>,void ()(geo::Mercator2<double>,BOOL)>::operator()(uint64_t a1, double *a2, unsigned __int8 *a3)
{
  double v3;
  double v4;
  int v5;
  id *v6;
  char v7;
  long double v8;
  double v9;
  long double v10;
  long double v11;
  id WeakRetained;
  id v13;

  v3 = *a2;
  v4 = a2[1];
  v5 = *a3;
  v6 = (id *)(*(_QWORD *)(a1 + 8) + 848);
  WeakRetained = objc_loadWeakRetained(v6);
  v7 = objc_opt_respondsToSelector();

  if ((v7 & 1) != 0)
  {
    v8 = exp(v4 * 6.28318531 + -3.14159265);
    v9 = atan(v8);
    v10 = fmod(v3 * 6.28318531, 6.28318531);
    v11 = fmod(v10 + 6.28318531, 6.28318531) * 57.2957795 + -180.0;
    v13 = objc_loadWeakRetained(v6);
    objc_msgSend(v13, "location:isInHikingContextualRegion:", v5 != 0, v9 * 114.591559 + -90.0, (double)v11);

  }
}

void sub_19FAB254C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{

  _Unwind_Resume(a1);
}

void std::__function::__func<md::MapEngine::MapEngine(float,float,float,BOOL,VKMapViewPurpose,std::shared_ptr<md::TaskContext> const&,VKMapPurpose,std::unique_ptr<md::AnimationManager>,geo::linear_map<md::MapEngineSetting,long long,std::equal_to<md::MapEngineSetting>,std::allocator<std::pair<md::MapEngineSetting,long long>>,std::vector<std::pair<md::MapEngineSetting,long long>>> const&,unsigned long long,GEOApplicationAuditToken *)::$_21,std::allocator<md::MapEngine::MapEngine(float,float,float,BOOL,VKMapViewPurpose,std::shared_ptr<md::TaskContext> const&,VKMapPurpose,std::unique_ptr<md::AnimationManager>,geo::linear_map<md::MapEngineSetting,long long,std::equal_to<md::MapEngineSetting>,std::allocator<std::pair<md::MapEngineSetting,long long>>,std::vector<std::pair<md::MapEngineSetting,long long>>> const&,unsigned long long,GEOApplicationAuditToken *)::$_21>,void ()(unsigned long long)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::MapEngine::MapEngine(float,float,float,BOOL,VKMapViewPurpose,std::shared_ptr<md::TaskContext> const&,VKMapPurpose,std::unique_ptr<md::AnimationManager>,geo::linear_map<md::MapEngineSetting,long long,std::equal_to<md::MapEngineSetting>,std::allocator<std::pair<md::MapEngineSetting,long long>>,std::vector<std::pair<md::MapEngineSetting,long long>>> const&,unsigned long long,GEOApplicationAuditToken *)::$_21,std::allocator<md::MapEngine::MapEngine(float,float,float,BOOL,VKMapViewPurpose,std::shared_ptr<md::TaskContext> const&,VKMapPurpose,std::unique_ptr<md::AnimationManager>,geo::linear_map<md::MapEngineSetting,long long,std::equal_to<md::MapEngineSetting>,std::allocator<std::pair<md::MapEngineSetting,long long>>,std::vector<std::pair<md::MapEngineSetting,long long>>> const&,unsigned long long,GEOApplicationAuditToken *)::$_21>,void ()(unsigned long long)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42D5218;
  result[1] = v3;
  return result;
}

uint64_t md::Logic<md::HillshadeLogic,md::HillshadeContext,md::LogicDependencies<gdc::TypeList<md::CameraContext,md::GeometryContext>,gdc::TypeList<>>>::_debugConsoleString@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _BYTE *a4@<X8>)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  _QWORD v8[3];

  if (*(_QWORD *)(a3 + 8) == 0xE719E07499A88BEBLL && (v4 = *(_QWORD *)(a3 + 32)) != 0)
  {
    v6 = result;
    v8[0] = md::LogicDependencies<gdc::TypeList<md::CameraContext,md::GeometryContext>,gdc::TypeList<>>::buildRequiredTuple<md::CameraContext,md::GeometryContext>(**(_QWORD **)(a2 + 8), *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8));
    v8[1] = v7;
    return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD *, uint64_t))(*(_QWORD *)v6 + 160))(v6, a2, v8, v4);
  }
  else
  {
    a4[23] = 0;
    *a4 = 0;
  }
  return result;
}

uint64_t md::Logic<md::HillshadeLogic,md::HillshadeContext,md::LogicDependencies<gdc::TypeList<md::CameraContext,md::GeometryContext>,gdc::TypeList<>>>::frequency(uint64_t a1)
{
  return *(_QWORD *)(a1 + 64);
}

void md::Logic<md::HillshadeLogic,md::HillshadeContext,md::LogicDependencies<gdc::TypeList<md::CameraContext,md::GeometryContext>,gdc::TypeList<>>>::debugConsoleString(uint64_t a1@<X0>, gdc::DebugTreeNode *a2@<X8>)
{
  void *v3;
  uint64_t v4;
  void *v5;
  void *v6[2];
  char v7;
  void *v8;
  char v9;
  void **v10;
  void *__p;
  void *v12;
  uint64_t v13;

  v13 = 0;
  (*(void (**)(void **__return_ptr, uint64_t, uint64_t *))(*(_QWORD *)a1 + 56))(v6, a1, &v13);
  gdc::DebugTreeNode::toString(a2, (uint64_t)v6);
  v3 = __p;
  if (__p)
  {
    v4 = (uint64_t)v12;
    v5 = __p;
    if (v12 != __p)
    {
      do
      {
        v4 -= 80;
        std::__destroy_at[abi:nn180100]<gdc::DebugTreeProperty,0>(v4);
      }
      while ((void *)v4 != v3);
      v5 = __p;
    }
    v12 = v3;
    operator delete(v5);
  }
  std::vector<gdc::DebugTreeNode>::~vector[abi:nn180100](&v10);
  if ((v9 & 0x80000000) == 0)
  {
    if ((v7 & 0x80000000) == 0)
      return;
LABEL_10:
    operator delete(v6[0]);
    return;
  }
  operator delete(v8);
  if (v7 < 0)
    goto LABEL_10;
}

uint64_t md::LogicDependencies<gdc::TypeList<md::CameraContext,md::GeometryContext>,gdc::TypeList<>>::buildRequiredTuple<md::CameraContext,md::GeometryContext>(uint64_t a1, unint64_t a2)
{
  uint8x8_t v2;
  uint64_t v3;
  _QWORD *v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  unint64_t v14;
  uint64_t v15;

  if (!a2)
    return 0;
  v2 = (uint8x8_t)vcnt_s8((int8x8_t)a2);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    v3 = 0x1AF456233693CD46;
    if (a2 <= 0x1AF456233693CD46)
      v3 = 0x1AF456233693CD46 % a2;
  }
  else
  {
    v3 = (a2 - 1) & 0x1AF456233693CD46;
  }
  v5 = *(_QWORD **)(a1 + 8 * v3);
  if (!v5)
    goto LABEL_25;
  v6 = (_QWORD *)*v5;
  if (!v6)
    goto LABEL_25;
  if (v2.u32[0] < 2uLL)
  {
    while (1)
    {
      v8 = v6[1];
      if (v8 == 0x1AF456233693CD46)
      {
        if (v6[2] == 0x1AF456233693CD46)
          goto LABEL_23;
      }
      else if ((v8 & (a2 - 1)) != v3)
      {
        goto LABEL_25;
      }
      v6 = (_QWORD *)*v6;
      if (!v6)
        goto LABEL_25;
    }
  }
  while (1)
  {
    v7 = v6[1];
    if (v7 == 0x1AF456233693CD46)
      break;
    if (v7 >= a2)
      v7 %= a2;
    if (v7 != v3)
      goto LABEL_25;
LABEL_12:
    v6 = (_QWORD *)*v6;
    if (!v6)
      goto LABEL_25;
  }
  if (v6[2] != 0x1AF456233693CD46)
    goto LABEL_12;
LABEL_23:
  v9 = v6[5];
  if (*(_QWORD *)(v9 + 8) == 0x1AF456233693CD46)
  {
    v10 = *(_QWORD *)(v9 + 32);
    goto LABEL_26;
  }
LABEL_25:
  v10 = 0;
LABEL_26:
  if (v2.u32[0] > 1uLL)
  {
    v11 = 0x3070CB6B3C7F21D3;
    if (a2 <= 0x3070CB6B3C7F21D3)
      v11 = 0x3070CB6B3C7F21D3 % a2;
  }
  else
  {
    v11 = (a2 - 1) & 0x3070CB6B3C7F21D3;
  }
  v12 = *(_QWORD **)(a1 + 8 * v11);
  if (!v12)
    return v10;
  v13 = (_QWORD *)*v12;
  if (!v13)
    return v10;
  if (v2.u32[0] < 2uLL)
  {
    while (1)
    {
      v15 = v13[1];
      if (v15 == 0x3070CB6B3C7F21D3)
      {
        if (v13[2] == 0x3070CB6B3C7F21D3)
          goto LABEL_46;
      }
      else if ((v15 & (a2 - 1)) != v11)
      {
        return v10;
      }
      v13 = (_QWORD *)*v13;
      if (!v13)
        return v10;
    }
  }
  while (2)
  {
    v14 = v13[1];
    if (v14 != 0x3070CB6B3C7F21D3)
    {
      if (v14 >= a2)
        v14 %= a2;
      if (v14 != v11)
        return v10;
      goto LABEL_35;
    }
    if (v13[2] != 0x3070CB6B3C7F21D3)
    {
LABEL_35:
      v13 = (_QWORD *)*v13;
      if (!v13)
        return v10;
      continue;
    }
    break;
  }
LABEL_46:
  if (*(_QWORD *)(v13[5] + 8) == 0x3070CB6B3C7F21D3)
    return v10;
  return v10;
}

_QWORD *gdc::ManagedObjectHolder<md::HillshadeContext>::~ManagedObjectHolder(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_1E42B0E10;
  v2 = a1[4];
  if (v2)
    MEMORY[0x1A1AF4E00](v2, 0xC400A2AC0F1);
  return a1;
}

uint64_t gdc::ObjectHolder<md::HillshadeContext>::extract@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 32);
  *(_QWORD *)(result + 32) = 0;
  *a2 = v2;
  return result;
}

void std::__function::__func<md::MapEngine::MapEngine(float,float,float,BOOL,VKMapViewPurpose,std::shared_ptr<md::TaskContext> const&,VKMapPurpose,std::unique_ptr<md::AnimationManager>,geo::linear_map<md::MapEngineSetting,long long,std::equal_to<md::MapEngineSetting>,std::allocator<std::pair<md::MapEngineSetting,long long>>,std::vector<std::pair<md::MapEngineSetting,long long>>> const&,unsigned long long,GEOApplicationAuditToken *)::$_20,std::allocator<md::MapEngine::MapEngine(float,float,float,BOOL,VKMapViewPurpose,std::shared_ptr<md::TaskContext> const&,VKMapPurpose,std::unique_ptr<md::AnimationManager>,geo::linear_map<md::MapEngineSetting,long long,std::equal_to<md::MapEngineSetting>,std::allocator<std::pair<md::MapEngineSetting,long long>>,std::vector<std::pair<md::MapEngineSetting,long long>>> const&,unsigned long long,GEOApplicationAuditToken *)::$_20>,void ()(VKNavigationPuckLocationTracingEvent *)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::MapEngine::MapEngine(float,float,float,BOOL,VKMapViewPurpose,std::shared_ptr<md::TaskContext> const&,VKMapPurpose,std::unique_ptr<md::AnimationManager>,geo::linear_map<md::MapEngineSetting,long long,std::equal_to<md::MapEngineSetting>,std::allocator<std::pair<md::MapEngineSetting,long long>>,std::vector<std::pair<md::MapEngineSetting,long long>>> const&,unsigned long long,GEOApplicationAuditToken *)::$_20,std::allocator<md::MapEngine::MapEngine(float,float,float,BOOL,VKMapViewPurpose,std::shared_ptr<md::TaskContext> const&,VKMapPurpose,std::unique_ptr<md::AnimationManager>,geo::linear_map<md::MapEngineSetting,long long,std::equal_to<md::MapEngineSetting>,std::allocator<std::pair<md::MapEngineSetting,long long>>,std::vector<std::pair<md::MapEngineSetting,long long>>> const&,unsigned long long,GEOApplicationAuditToken *)::$_20>,void ()(VKNavigationPuckLocationTracingEvent *)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42D51D0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<md::MapEngine::MapEngine(float,float,float,BOOL,VKMapViewPurpose,std::shared_ptr<md::TaskContext> const&,VKMapPurpose,std::unique_ptr<md::AnimationManager>,geo::linear_map<md::MapEngineSetting,long long,std::equal_to<md::MapEngineSetting>,std::allocator<std::pair<md::MapEngineSetting,long long>>,std::vector<std::pair<md::MapEngineSetting,long long>>> const&,unsigned long long,GEOApplicationAuditToken *)::$_20,std::allocator<md::MapEngine::MapEngine(float,float,float,BOOL,VKMapViewPurpose,std::shared_ptr<md::TaskContext> const&,VKMapPurpose,std::unique_ptr<md::AnimationManager>,geo::linear_map<md::MapEngineSetting,long long,std::equal_to<md::MapEngineSetting>,std::allocator<std::pair<md::MapEngineSetting,long long>>,std::vector<std::pair<md::MapEngineSetting,long long>>> const&,unsigned long long,GEOApplicationAuditToken *)::$_20>,void ()(VKNavigationPuckLocationTracingEvent *)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42D51D0;
  a2[1] = v2;
  return result;
}

void std::__function::__func<md::MapEngine::MapEngine(float,float,float,BOOL,VKMapViewPurpose,std::shared_ptr<md::TaskContext> const&,VKMapPurpose,std::unique_ptr<md::AnimationManager>,geo::linear_map<md::MapEngineSetting,long long,std::equal_to<md::MapEngineSetting>,std::allocator<std::pair<md::MapEngineSetting,long long>>,std::vector<std::pair<md::MapEngineSetting,long long>>> const&,unsigned long long,GEOApplicationAuditToken *)::$_20,std::allocator<md::MapEngine::MapEngine(float,float,float,BOOL,VKMapViewPurpose,std::shared_ptr<md::TaskContext> const&,VKMapPurpose,std::unique_ptr<md::AnimationManager>,geo::linear_map<md::MapEngineSetting,long long,std::equal_to<md::MapEngineSetting>,std::allocator<std::pair<md::MapEngineSetting,long long>>,std::vector<std::pair<md::MapEngineSetting,long long>>> const&,unsigned long long,GEOApplicationAuditToken *)::$_20>,void ()(VKNavigationPuckLocationTracingEvent *)>::operator()(uint64_t a1, id *a2)
{
  id *v3;
  id WeakRetained;
  char v5;
  id v6;
  id v7;

  v7 = *a2;
  v3 = (id *)(*(_QWORD *)(a1 + 8) + 848);
  WeakRetained = objc_loadWeakRetained(v3);
  v5 = objc_opt_respondsToSelector();

  if ((v5 & 1) != 0)
  {
    v6 = objc_loadWeakRetained(v3);
    objc_msgSend(v6, "puckLocationTracingEvent:", v7);

  }
}

void sub_19FAB2A54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void std::__function::__func<md::MapEngine::MapEngine(float,float,float,BOOL,VKMapViewPurpose,std::shared_ptr<md::TaskContext> const&,VKMapPurpose,std::unique_ptr<md::AnimationManager>,geo::linear_map<md::MapEngineSetting,long long,std::equal_to<md::MapEngineSetting>,std::allocator<std::pair<md::MapEngineSetting,long long>>,std::vector<std::pair<md::MapEngineSetting,long long>>> const&,unsigned long long,GEOApplicationAuditToken *)::$_19,std::allocator<md::MapEngine::MapEngine(float,float,float,BOOL,VKMapViewPurpose,std::shared_ptr<md::TaskContext> const&,VKMapPurpose,std::unique_ptr<md::AnimationManager>,geo::linear_map<md::MapEngineSetting,long long,std::equal_to<md::MapEngineSetting>,std::allocator<std::pair<md::MapEngineSetting,long long>>,std::vector<std::pair<md::MapEngineSetting,long long>>> const&,unsigned long long,GEOApplicationAuditToken *)::$_19>,BOOL ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::MapEngine::MapEngine(float,float,float,BOOL,VKMapViewPurpose,std::shared_ptr<md::TaskContext> const&,VKMapPurpose,std::unique_ptr<md::AnimationManager>,geo::linear_map<md::MapEngineSetting,long long,std::equal_to<md::MapEngineSetting>,std::allocator<std::pair<md::MapEngineSetting,long long>>,std::vector<std::pair<md::MapEngineSetting,long long>>> const&,unsigned long long,GEOApplicationAuditToken *)::$_19,std::allocator<md::MapEngine::MapEngine(float,float,float,BOOL,VKMapViewPurpose,std::shared_ptr<md::TaskContext> const&,VKMapPurpose,std::unique_ptr<md::AnimationManager>,geo::linear_map<md::MapEngineSetting,long long,std::equal_to<md::MapEngineSetting>,std::allocator<std::pair<md::MapEngineSetting,long long>>,std::vector<std::pair<md::MapEngineSetting,long long>>> const&,unsigned long long,GEOApplicationAuditToken *)::$_19>,BOOL ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42D5188;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<md::MapEngine::MapEngine(float,float,float,BOOL,VKMapViewPurpose,std::shared_ptr<md::TaskContext> const&,VKMapPurpose,std::unique_ptr<md::AnimationManager>,geo::linear_map<md::MapEngineSetting,long long,std::equal_to<md::MapEngineSetting>,std::allocator<std::pair<md::MapEngineSetting,long long>>,std::vector<std::pair<md::MapEngineSetting,long long>>> const&,unsigned long long,GEOApplicationAuditToken *)::$_19,std::allocator<md::MapEngine::MapEngine(float,float,float,BOOL,VKMapViewPurpose,std::shared_ptr<md::TaskContext> const&,VKMapPurpose,std::unique_ptr<md::AnimationManager>,geo::linear_map<md::MapEngineSetting,long long,std::equal_to<md::MapEngineSetting>,std::allocator<std::pair<md::MapEngineSetting,long long>>,std::vector<std::pair<md::MapEngineSetting,long long>>> const&,unsigned long long,GEOApplicationAuditToken *)::$_19>,BOOL ()(void)>::operator()(uint64_t a1)
{
  id *v1;
  id WeakRetained;
  char v3;
  id v4;
  uint64_t v5;

  v1 = (id *)(*(_QWORD *)(a1 + 8) + 848);
  WeakRetained = objc_loadWeakRetained(v1);
  v3 = objc_opt_respondsToSelector();

  if ((v3 & 1) == 0)
    return 1;
  v4 = objc_loadWeakRetained(v1);
  v5 = objc_msgSend(v4, "canChangeVenueFocus");

  return v5;
}

void sub_19FAB2B30(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void std::__function::__func<md::MapEngine::MapEngine(float,float,float,BOOL,VKMapViewPurpose,std::shared_ptr<md::TaskContext> const&,VKMapPurpose,std::unique_ptr<md::AnimationManager>,geo::linear_map<md::MapEngineSetting,long long,std::equal_to<md::MapEngineSetting>,std::allocator<std::pair<md::MapEngineSetting,long long>>,std::vector<std::pair<md::MapEngineSetting,long long>>> const&,unsigned long long,GEOApplicationAuditToken *)::$_18,std::allocator<md::MapEngine::MapEngine(float,float,float,BOOL,VKMapViewPurpose,std::shared_ptr<md::TaskContext> const&,VKMapPurpose,std::unique_ptr<md::AnimationManager>,geo::linear_map<md::MapEngineSetting,long long,std::equal_to<md::MapEngineSetting>,std::allocator<std::pair<md::MapEngineSetting,long long>>,std::vector<std::pair<md::MapEngineSetting,long long>>> const&,unsigned long long,GEOApplicationAuditToken *)::$_18>,void ()(BOOL)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::MapEngine::MapEngine(float,float,float,BOOL,VKMapViewPurpose,std::shared_ptr<md::TaskContext> const&,VKMapPurpose,std::unique_ptr<md::AnimationManager>,geo::linear_map<md::MapEngineSetting,long long,std::equal_to<md::MapEngineSetting>,std::allocator<std::pair<md::MapEngineSetting,long long>>,std::vector<std::pair<md::MapEngineSetting,long long>>> const&,unsigned long long,GEOApplicationAuditToken *)::$_18,std::allocator<md::MapEngine::MapEngine(float,float,float,BOOL,VKMapViewPurpose,std::shared_ptr<md::TaskContext> const&,VKMapPurpose,std::unique_ptr<md::AnimationManager>,geo::linear_map<md::MapEngineSetting,long long,std::equal_to<md::MapEngineSetting>,std::allocator<std::pair<md::MapEngineSetting,long long>>,std::vector<std::pair<md::MapEngineSetting,long long>>> const&,unsigned long long,GEOApplicationAuditToken *)::$_18>,void ()(BOOL)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42D5140;
  result[1] = v3;
  return result;
}

_QWORD *std::__function::__func<md::MapEngine::MapEngine(float,float,float,BOOL,VKMapViewPurpose,std::shared_ptr<md::TaskContext> const&,VKMapPurpose,std::unique_ptr<md::AnimationManager>,geo::linear_map<md::MapEngineSetting,long long,std::equal_to<md::MapEngineSetting>,std::allocator<std::pair<md::MapEngineSetting,long long>>,std::vector<std::pair<md::MapEngineSetting,long long>>> const&,unsigned long long,GEOApplicationAuditToken *)::$_18,std::allocator<md::MapEngine::MapEngine(float,float,float,BOOL,VKMapViewPurpose,std::shared_ptr<md::TaskContext> const&,VKMapPurpose,std::unique_ptr<md::AnimationManager>,geo::linear_map<md::MapEngineSetting,long long,std::equal_to<md::MapEngineSetting>,std::allocator<std::pair<md::MapEngineSetting,long long>>,std::vector<std::pair<md::MapEngineSetting,long long>>> const&,unsigned long long,GEOApplicationAuditToken *)::$_18>,void ()(BOOL)>::operator()(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  _QWORD *v5;
  unint64_t v6;
  md::LabelManager *v7;
  _QWORD *result;
  uint64_t v9;
  _QWORD v10[3];
  _QWORD *v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v2 = *a2;
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 1120);
  v4 = *(_QWORD *)(v3 + 16);
  if ((v4 & (v4 - 1)) != 0)
  {
    v6 = 0x20A1ED17D78F322BLL;
    if (v4 <= 0x20A1ED17D78F322BLL)
      v6 = 0x20A1ED17D78F322BLL % v4;
    v5 = *(_QWORD **)(*(_QWORD *)(v3 + 8) + 8 * v6);
    do
    {
      do
        v5 = (_QWORD *)*v5;
      while (v5[1] != 0x20A1ED17D78F322BLL);
    }
    while (v5[2] != 0x20A1ED17D78F322BLL);
  }
  else
  {
    v5 = *(_QWORD **)(*(_QWORD *)(v3 + 8) + 8 * ((v4 - 1) & 0x20A1ED17D78F322BLL));
    do
    {
      do
        v5 = (_QWORD *)*v5;
      while (v5[1] != 0x20A1ED17D78F322BLL);
    }
    while (v5[2] != 0x20A1ED17D78F322BLL);
  }
  v7 = *(md::LabelManager **)(v5[5] + 160);
  v10[0] = &off_1E42CA5F8;
  v10[1] = v7;
  v10[2] = v2;
  v11 = v10;
  md::LabelManager::queueCommand(v7, 50, 1, v10);
  result = v11;
  if (v11 == v10)
  {
    v9 = 4;
    result = v10;
  }
  else
  {
    if (!v11)
      return result;
    v9 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v9))();
}

void sub_19FAB2CD4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v14;
  uint64_t v15;

  v14 = a13;
  if (a13 == &a10)
  {
    v15 = 4;
    v14 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v15 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v14 + 8 * v15))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void std::__function::__func<md::MapEngine::MapEngine(float,float,float,BOOL,VKMapViewPurpose,std::shared_ptr<md::TaskContext> const&,VKMapPurpose,std::unique_ptr<md::AnimationManager>,geo::linear_map<md::MapEngineSetting,long long,std::equal_to<md::MapEngineSetting>,std::allocator<std::pair<md::MapEngineSetting,long long>>,std::vector<std::pair<md::MapEngineSetting,long long>>> const&,unsigned long long,GEOApplicationAuditToken *)::$_17,std::allocator<md::MapEngine::MapEngine(float,float,float,BOOL,VKMapViewPurpose,std::shared_ptr<md::TaskContext> const&,VKMapPurpose,std::unique_ptr<md::AnimationManager>,geo::linear_map<md::MapEngineSetting,long long,std::equal_to<md::MapEngineSetting>,std::allocator<std::pair<md::MapEngineSetting,long long>>,std::vector<std::pair<md::MapEngineSetting,long long>>> const&,unsigned long long,GEOApplicationAuditToken *)::$_17>,void ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::MapEngine::MapEngine(float,float,float,BOOL,VKMapViewPurpose,std::shared_ptr<md::TaskContext> const&,VKMapPurpose,std::unique_ptr<md::AnimationManager>,geo::linear_map<md::MapEngineSetting,long long,std::equal_to<md::MapEngineSetting>,std::allocator<std::pair<md::MapEngineSetting,long long>>,std::vector<std::pair<md::MapEngineSetting,long long>>> const&,unsigned long long,GEOApplicationAuditToken *)::$_17,std::allocator<md::MapEngine::MapEngine(float,float,float,BOOL,VKMapViewPurpose,std::shared_ptr<md::TaskContext> const&,VKMapPurpose,std::unique_ptr<md::AnimationManager>,geo::linear_map<md::MapEngineSetting,long long,std::equal_to<md::MapEngineSetting>,std::allocator<std::pair<md::MapEngineSetting,long long>>,std::vector<std::pair<md::MapEngineSetting,long long>>> const&,unsigned long long,GEOApplicationAuditToken *)::$_17>,void ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42D50F8;
  result[1] = v3;
  return result;
}

_QWORD *std::__function::__func<md::MapEngine::MapEngine(float,float,float,BOOL,VKMapViewPurpose,std::shared_ptr<md::TaskContext> const&,VKMapPurpose,std::unique_ptr<md::AnimationManager>,geo::linear_map<md::MapEngineSetting,long long,std::equal_to<md::MapEngineSetting>,std::allocator<std::pair<md::MapEngineSetting,long long>>,std::vector<std::pair<md::MapEngineSetting,long long>>> const&,unsigned long long,GEOApplicationAuditToken *)::$_17,std::allocator<md::MapEngine::MapEngine(float,float,float,BOOL,VKMapViewPurpose,std::shared_ptr<md::TaskContext> const&,VKMapPurpose,std::unique_ptr<md::AnimationManager>,geo::linear_map<md::MapEngineSetting,long long,std::equal_to<md::MapEngineSetting>,std::allocator<std::pair<md::MapEngineSetting,long long>>,std::vector<std::pair<md::MapEngineSetting,long long>>> const&,unsigned long long,GEOApplicationAuditToken *)::$_17>,void ()(void)>::operator()(_QWORD *result)
{
  uint64_t v1;
  unint64_t v2;
  _QWORD *v3;
  unint64_t v4;
  uint64_t v5;
  unsigned __int8 v6;
  uint64_t v7;
  char v8;
  uint64_t v9;

  v1 = *(_QWORD *)(result[1] + 1120);
  v2 = *(_QWORD *)(v1 + 16);
  if ((v2 & (v2 - 1)) != 0)
  {
    v4 = 0x20A1ED17D78F322BLL;
    if (v2 <= 0x20A1ED17D78F322BLL)
      v4 = 0x20A1ED17D78F322BLL % v2;
    v3 = *(_QWORD **)(*(_QWORD *)(v1 + 8) + 8 * v4);
    do
    {
      do
        v3 = (_QWORD *)*v3;
      while (v3[1] != 0x20A1ED17D78F322BLL);
    }
    while (v3[2] != 0x20A1ED17D78F322BLL);
  }
  else
  {
    v3 = *(_QWORD **)(*(_QWORD *)(v1 + 8) + 8 * ((v2 - 1) & 0x20A1ED17D78F322BLL));
    do
    {
      do
        v3 = (_QWORD *)*v3;
      while (v3[1] != 0x20A1ED17D78F322BLL);
    }
    while (v3[2] != 0x20A1ED17D78F322BLL);
  }
  v5 = *(_QWORD *)(v3[5] + 160);
  v6 = atomic_load((unsigned __int8 *)(v5 + 3058));
  if ((v6 & 1) != 0)
  {
    v7 = *(_QWORD *)(v5 + 136);
    if (v7)
    {
      result = *(_QWORD **)(v7 + 56);
      if (result)
      {
        v9 = v5;
        v8 = 9;
        return (_QWORD *)(*(uint64_t (**)(_QWORD *, uint64_t *, char *))(*result + 48))(result, &v9, &v8);
      }
    }
  }
  return result;
}

void std::__function::__func<md::MapEngine::MapEngine(float,float,float,BOOL,VKMapViewPurpose,std::shared_ptr<md::TaskContext> const&,VKMapPurpose,std::unique_ptr<md::AnimationManager>,geo::linear_map<md::MapEngineSetting,long long,std::equal_to<md::MapEngineSetting>,std::allocator<std::pair<md::MapEngineSetting,long long>>,std::vector<std::pair<md::MapEngineSetting,long long>>> const&,unsigned long long,GEOApplicationAuditToken *)::$_16,std::allocator<md::MapEngine::MapEngine(float,float,float,BOOL,VKMapViewPurpose,std::shared_ptr<md::TaskContext> const&,VKMapPurpose,std::unique_ptr<md::AnimationManager>,geo::linear_map<md::MapEngineSetting,long long,std::equal_to<md::MapEngineSetting>,std::allocator<std::pair<md::MapEngineSetting,long long>>,std::vector<std::pair<md::MapEngineSetting,long long>>> const&,unsigned long long,GEOApplicationAuditToken *)::$_16>,void ()(VKAnimation *)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::MapEngine::MapEngine(float,float,float,BOOL,VKMapViewPurpose,std::shared_ptr<md::TaskContext> const&,VKMapPurpose,std::unique_ptr<md::AnimationManager>,geo::linear_map<md::MapEngineSetting,long long,std::equal_to<md::MapEngineSetting>,std::allocator<std::pair<md::MapEngineSetting,long long>>,std::vector<std::pair<md::MapEngineSetting,long long>>> const&,unsigned long long,GEOApplicationAuditToken *)::$_16,std::allocator<md::MapEngine::MapEngine(float,float,float,BOOL,VKMapViewPurpose,std::shared_ptr<md::TaskContext> const&,VKMapPurpose,std::unique_ptr<md::AnimationManager>,geo::linear_map<md::MapEngineSetting,long long,std::equal_to<md::MapEngineSetting>,std::allocator<std::pair<md::MapEngineSetting,long long>>,std::vector<std::pair<md::MapEngineSetting,long long>>> const&,unsigned long long,GEOApplicationAuditToken *)::$_16>,void ()(VKAnimation *)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42D50B0;
  result[1] = v3;
  return result;
}

void std::__function::__func<md::MapEngine::MapEngine(float,float,float,BOOL,VKMapViewPurpose,std::shared_ptr<md::TaskContext> const&,VKMapPurpose,std::unique_ptr<md::AnimationManager>,geo::linear_map<md::MapEngineSetting,long long,std::equal_to<md::MapEngineSetting>,std::allocator<std::pair<md::MapEngineSetting,long long>>,std::vector<std::pair<md::MapEngineSetting,long long>>> const&,unsigned long long,GEOApplicationAuditToken *)::$_16,std::allocator<md::MapEngine::MapEngine(float,float,float,BOOL,VKMapViewPurpose,std::shared_ptr<md::TaskContext> const&,VKMapPurpose,std::unique_ptr<md::AnimationManager>,geo::linear_map<md::MapEngineSetting,long long,std::equal_to<md::MapEngineSetting>,std::allocator<std::pair<md::MapEngineSetting,long long>>,std::vector<std::pair<md::MapEngineSetting,long long>>> const&,unsigned long long,GEOApplicationAuditToken *)::$_16>,void ()(VKAnimation *)>::operator()(uint64_t a1, id *a2)
{
  id v3;
  md::MapEngine *v4;
  id v5;

  v3 = *a2;
  v4 = *(md::MapEngine **)(a1 + 8);
  v5 = v3;
  (*(void (**)(_QWORD *))(**((_QWORD **)v4 + 13) + 24))(*((_QWORD **)v4 + 13));
  md::MapEngine::updateRunLoopStatus(v4);

}

void sub_19FAB2F04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void std::__function::__func<md::MapEngine::MapEngine(float,float,float,BOOL,VKMapViewPurpose,std::shared_ptr<md::TaskContext> const&,VKMapPurpose,std::unique_ptr<md::AnimationManager>,geo::linear_map<md::MapEngineSetting,long long,std::equal_to<md::MapEngineSetting>,std::allocator<std::pair<md::MapEngineSetting,long long>>,std::vector<std::pair<md::MapEngineSetting,long long>>> const&,unsigned long long,GEOApplicationAuditToken *)::$_15,std::allocator<md::MapEngine::MapEngine(float,float,float,BOOL,VKMapViewPurpose,std::shared_ptr<md::TaskContext> const&,VKMapPurpose,std::unique_ptr<md::AnimationManager>,geo::linear_map<md::MapEngineSetting,long long,std::equal_to<md::MapEngineSetting>,std::allocator<std::pair<md::MapEngineSetting,long long>>,std::vector<std::pair<md::MapEngineSetting,long long>>> const&,unsigned long long,GEOApplicationAuditToken *)::$_15>,void ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::MapEngine::MapEngine(float,float,float,BOOL,VKMapViewPurpose,std::shared_ptr<md::TaskContext> const&,VKMapPurpose,std::unique_ptr<md::AnimationManager>,geo::linear_map<md::MapEngineSetting,long long,std::equal_to<md::MapEngineSetting>,std::allocator<std::pair<md::MapEngineSetting,long long>>,std::vector<std::pair<md::MapEngineSetting,long long>>> const&,unsigned long long,GEOApplicationAuditToken *)::$_15,std::allocator<md::MapEngine::MapEngine(float,float,float,BOOL,VKMapViewPurpose,std::shared_ptr<md::TaskContext> const&,VKMapPurpose,std::unique_ptr<md::AnimationManager>,geo::linear_map<md::MapEngineSetting,long long,std::equal_to<md::MapEngineSetting>,std::allocator<std::pair<md::MapEngineSetting,long long>>,std::vector<std::pair<md::MapEngineSetting,long long>>> const&,unsigned long long,GEOApplicationAuditToken *)::$_15>,void ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42D5068;
  result[1] = v3;
  return result;
}

_QWORD *std::__function::__func<md::MapEngine::MapEngine(float,float,float,BOOL,VKMapViewPurpose,std::shared_ptr<md::TaskContext> const&,VKMapPurpose,std::unique_ptr<md::AnimationManager>,geo::linear_map<md::MapEngineSetting,long long,std::equal_to<md::MapEngineSetting>,std::allocator<std::pair<md::MapEngineSetting,long long>>,std::vector<std::pair<md::MapEngineSetting,long long>>> const&,unsigned long long,GEOApplicationAuditToken *)::$_15,std::allocator<md::MapEngine::MapEngine(float,float,float,BOOL,VKMapViewPurpose,std::shared_ptr<md::TaskContext> const&,VKMapPurpose,std::unique_ptr<md::AnimationManager>,geo::linear_map<md::MapEngineSetting,long long,std::equal_to<md::MapEngineSetting>,std::allocator<std::pair<md::MapEngineSetting,long long>>,std::vector<std::pair<md::MapEngineSetting,long long>>> const&,unsigned long long,GEOApplicationAuditToken *)::$_15>,void ()(void)>::operator()(uint64_t a1)
{
  uint64_t v1;
  unint64_t v2;
  _QWORD *v3;
  unint64_t v4;
  md::LabelManager *v5;
  _QWORD *result;
  uint64_t v7;
  _QWORD v8[3];
  _QWORD *v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 1120);
  v2 = *(_QWORD *)(v1 + 16);
  if ((v2 & (v2 - 1)) != 0)
  {
    v4 = 0x20A1ED17D78F322BLL;
    if (v2 <= 0x20A1ED17D78F322BLL)
      v4 = 0x20A1ED17D78F322BLL % v2;
    v3 = *(_QWORD **)(*(_QWORD *)(v1 + 8) + 8 * v4);
    do
    {
      do
        v3 = (_QWORD *)*v3;
      while (v3[1] != 0x20A1ED17D78F322BLL);
    }
    while (v3[2] != 0x20A1ED17D78F322BLL);
  }
  else
  {
    v3 = *(_QWORD **)(*(_QWORD *)(v1 + 8) + 8 * ((v2 - 1) & 0x20A1ED17D78F322BLL));
    do
    {
      do
        v3 = (_QWORD *)*v3;
      while (v3[1] != 0x20A1ED17D78F322BLL);
    }
    while (v3[2] != 0x20A1ED17D78F322BLL);
  }
  v5 = *(md::LabelManager **)(v3[5] + 160);
  v8[0] = &off_1E42CA3B8;
  v8[1] = v5;
  v9 = v8;
  md::LabelManager::queueCommand(v5, 42, 1, v8);
  result = v9;
  if (v9 == v8)
  {
    v7 = 4;
    result = v8;
  }
  else
  {
    if (!v9)
      return result;
    v7 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v7))();
}

void sub_19FAB30AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v14;
  uint64_t v15;

  v14 = a13;
  if (a13 == &a10)
  {
    v15 = 4;
    v14 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v15 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v14 + 8 * v15))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void std::__function::__func<md::MapEngine::MapEngine(float,float,float,BOOL,VKMapViewPurpose,std::shared_ptr<md::TaskContext> const&,VKMapPurpose,std::unique_ptr<md::AnimationManager>,geo::linear_map<md::MapEngineSetting,long long,std::equal_to<md::MapEngineSetting>,std::allocator<std::pair<md::MapEngineSetting,long long>>,std::vector<std::pair<md::MapEngineSetting,long long>>> const&,unsigned long long,GEOApplicationAuditToken *)::$_14,std::allocator<md::MapEngine::MapEngine(float,float,float,BOOL,VKMapViewPurpose,std::shared_ptr<md::TaskContext> const&,VKMapPurpose,std::unique_ptr<md::AnimationManager>,geo::linear_map<md::MapEngineSetting,long long,std::equal_to<md::MapEngineSetting>,std::allocator<std::pair<md::MapEngineSetting,long long>>,std::vector<std::pair<md::MapEngineSetting,long long>>> const&,unsigned long long,GEOApplicationAuditToken *)::$_14>,void ()(md::Venue const*)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::MapEngine::MapEngine(float,float,float,BOOL,VKMapViewPurpose,std::shared_ptr<md::TaskContext> const&,VKMapPurpose,std::unique_ptr<md::AnimationManager>,geo::linear_map<md::MapEngineSetting,long long,std::equal_to<md::MapEngineSetting>,std::allocator<std::pair<md::MapEngineSetting,long long>>,std::vector<std::pair<md::MapEngineSetting,long long>>> const&,unsigned long long,GEOApplicationAuditToken *)::$_14,std::allocator<md::MapEngine::MapEngine(float,float,float,BOOL,VKMapViewPurpose,std::shared_ptr<md::TaskContext> const&,VKMapPurpose,std::unique_ptr<md::AnimationManager>,geo::linear_map<md::MapEngineSetting,long long,std::equal_to<md::MapEngineSetting>,std::allocator<std::pair<md::MapEngineSetting,long long>>,std::vector<std::pair<md::MapEngineSetting,long long>>> const&,unsigned long long,GEOApplicationAuditToken *)::$_14>,void ()(md::Venue const*)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42D5020;
  result[1] = v3;
  return result;
}

md::LabelManager *std::__function::__func<md::MapEngine::MapEngine(float,float,float,BOOL,VKMapViewPurpose,std::shared_ptr<md::TaskContext> const&,VKMapPurpose,std::unique_ptr<md::AnimationManager>,geo::linear_map<md::MapEngineSetting,long long,std::equal_to<md::MapEngineSetting>,std::allocator<std::pair<md::MapEngineSetting,long long>>,std::vector<std::pair<md::MapEngineSetting,long long>>> const&,unsigned long long,GEOApplicationAuditToken *)::$_14,std::allocator<md::MapEngine::MapEngine(float,float,float,BOOL,VKMapViewPurpose,std::shared_ptr<md::TaskContext> const&,VKMapPurpose,std::unique_ptr<md::AnimationManager>,geo::linear_map<md::MapEngineSetting,long long,std::equal_to<md::MapEngineSetting>,std::allocator<std::pair<md::MapEngineSetting,long long>>,std::vector<std::pair<md::MapEngineSetting,long long>>> const&,unsigned long long,GEOApplicationAuditToken *)::$_14>,void ()(md::Venue const*)>::operator()(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  _QWORD *v5;
  unint64_t v6;
  md::LabelManager *result;
  uint64_t v8;
  _QWORD v9[3];
  md::LabelManager *v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v2 = *a2;
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 1120);
  v4 = *(_QWORD *)(v3 + 16);
  if ((v4 & (v4 - 1)) != 0)
  {
    v6 = 0x20A1ED17D78F322BLL;
    if (v4 <= 0x20A1ED17D78F322BLL)
      v6 = 0x20A1ED17D78F322BLL % v4;
    v5 = *(_QWORD **)(*(_QWORD *)(v3 + 8) + 8 * v6);
    do
    {
      do
        v5 = (_QWORD *)*v5;
      while (v5[1] != 0x20A1ED17D78F322BLL);
    }
    while (v5[2] != 0x20A1ED17D78F322BLL);
  }
  else
  {
    v5 = *(_QWORD **)(*(_QWORD *)(v3 + 8) + 8 * ((v4 - 1) & 0x20A1ED17D78F322BLL));
    do
    {
      do
        v5 = (_QWORD *)*v5;
      while (v5[1] != 0x20A1ED17D78F322BLL);
    }
    while (v5[2] != 0x20A1ED17D78F322BLL);
  }
  result = *(md::LabelManager **)(v5[5] + 160);
  if (v2 || *((_BYTE *)result + 3570))
  {
    *((_BYTE *)result + 3570) = v2 != 0;
    v9[0] = &off_1E42C9E18;
    v9[1] = result;
    v9[2] = v2 != 0;
    v10 = (md::LabelManager *)v9;
    md::LabelManager::queueCommand(result, 51, 1, v9);
    result = v10;
    if (v10 == (md::LabelManager *)v9)
    {
      v8 = 4;
      result = (md::LabelManager *)v9;
    }
    else
    {
      if (!v10)
        return result;
      v8 = 5;
    }
    return (md::LabelManager *)(*(uint64_t (**)(void))(*(_QWORD *)result + 8 * v8))();
  }
  return result;
}

void sub_19FAB3298(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v14;
  uint64_t v15;

  v14 = a13;
  if (a13 == &a10)
  {
    v15 = 4;
    v14 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v15 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v14 + 8 * v15))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void std::__function::__func<md::MapEngine::MapEngine(float,float,float,BOOL,VKMapViewPurpose,std::shared_ptr<md::TaskContext> const&,VKMapPurpose,std::unique_ptr<md::AnimationManager>,geo::linear_map<md::MapEngineSetting,long long,std::equal_to<md::MapEngineSetting>,std::allocator<std::pair<md::MapEngineSetting,long long>>,std::vector<std::pair<md::MapEngineSetting,long long>>> const&,unsigned long long,GEOApplicationAuditToken *)::$_13,std::allocator<md::MapEngine::MapEngine(float,float,float,BOOL,VKMapViewPurpose,std::shared_ptr<md::TaskContext> const&,VKMapPurpose,std::unique_ptr<md::AnimationManager>,geo::linear_map<md::MapEngineSetting,long long,std::equal_to<md::MapEngineSetting>,std::allocator<std::pair<md::MapEngineSetting,long long>>,std::vector<std::pair<md::MapEngineSetting,long long>>> const&,unsigned long long,GEOApplicationAuditToken *)::$_13>,void ()(md::Venue const*,md::VenueBuilding const*)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::MapEngine::MapEngine(float,float,float,BOOL,VKMapViewPurpose,std::shared_ptr<md::TaskContext> const&,VKMapPurpose,std::unique_ptr<md::AnimationManager>,geo::linear_map<md::MapEngineSetting,long long,std::equal_to<md::MapEngineSetting>,std::allocator<std::pair<md::MapEngineSetting,long long>>,std::vector<std::pair<md::MapEngineSetting,long long>>> const&,unsigned long long,GEOApplicationAuditToken *)::$_13,std::allocator<md::MapEngine::MapEngine(float,float,float,BOOL,VKMapViewPurpose,std::shared_ptr<md::TaskContext> const&,VKMapPurpose,std::unique_ptr<md::AnimationManager>,geo::linear_map<md::MapEngineSetting,long long,std::equal_to<md::MapEngineSetting>,std::allocator<std::pair<md::MapEngineSetting,long long>>,std::vector<std::pair<md::MapEngineSetting,long long>>> const&,unsigned long long,GEOApplicationAuditToken *)::$_13>,void ()(md::Venue const*,md::VenueBuilding const*)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42D4FD8;
  result[1] = v3;
  return result;
}

void std::__function::__func<md::MapEngine::MapEngine(float,float,float,BOOL,VKMapViewPurpose,std::shared_ptr<md::TaskContext> const&,VKMapPurpose,std::unique_ptr<md::AnimationManager>,geo::linear_map<md::MapEngineSetting,long long,std::equal_to<md::MapEngineSetting>,std::allocator<std::pair<md::MapEngineSetting,long long>>,std::vector<std::pair<md::MapEngineSetting,long long>>> const&,unsigned long long,GEOApplicationAuditToken *)::$_13,std::allocator<md::MapEngine::MapEngine(float,float,float,BOOL,VKMapViewPurpose,std::shared_ptr<md::TaskContext> const&,VKMapPurpose,std::unique_ptr<md::AnimationManager>,geo::linear_map<md::MapEngineSetting,long long,std::equal_to<md::MapEngineSetting>,std::allocator<std::pair<md::MapEngineSetting,long long>>,std::vector<std::pair<md::MapEngineSetting,long long>>> const&,unsigned long long,GEOApplicationAuditToken *)::$_13>,void ()(md::Venue const*,md::VenueBuilding const*)>::operator()(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  id WeakRetained;

  v3 = *a2;
  v4 = *a3;
  WeakRetained = objc_loadWeakRetained((id *)(*(_QWORD *)(a1 + 8) + 848));
  objc_msgSend(WeakRetained, "nearestVenueDidChange:building:", v3, v4);

}

void sub_19FAB336C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void std::__function::__func<md::MapEngine::MapEngine(float,float,float,BOOL,VKMapViewPurpose,std::shared_ptr<md::TaskContext> const&,VKMapPurpose,std::unique_ptr<md::AnimationManager>,geo::linear_map<md::MapEngineSetting,long long,std::equal_to<md::MapEngineSetting>,std::allocator<std::pair<md::MapEngineSetting,long long>>,std::vector<std::pair<md::MapEngineSetting,long long>>> const&,unsigned long long,GEOApplicationAuditToken *)::$_12,std::allocator<md::MapEngine::MapEngine(float,float,float,BOOL,VKMapViewPurpose,std::shared_ptr<md::TaskContext> const&,VKMapPurpose,std::unique_ptr<md::AnimationManager>,geo::linear_map<md::MapEngineSetting,long long,std::equal_to<md::MapEngineSetting>,std::allocator<std::pair<md::MapEngineSetting,long long>>,std::vector<std::pair<md::MapEngineSetting,long long>>> const&,unsigned long long,GEOApplicationAuditToken *)::$_12>,void ()(VKARWalkingElevationRequestFailureInfo *)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::MapEngine::MapEngine(float,float,float,BOOL,VKMapViewPurpose,std::shared_ptr<md::TaskContext> const&,VKMapPurpose,std::unique_ptr<md::AnimationManager>,geo::linear_map<md::MapEngineSetting,long long,std::equal_to<md::MapEngineSetting>,std::allocator<std::pair<md::MapEngineSetting,long long>>,std::vector<std::pair<md::MapEngineSetting,long long>>> const&,unsigned long long,GEOApplicationAuditToken *)::$_12,std::allocator<md::MapEngine::MapEngine(float,float,float,BOOL,VKMapViewPurpose,std::shared_ptr<md::TaskContext> const&,VKMapPurpose,std::unique_ptr<md::AnimationManager>,geo::linear_map<md::MapEngineSetting,long long,std::equal_to<md::MapEngineSetting>,std::allocator<std::pair<md::MapEngineSetting,long long>>,std::vector<std::pair<md::MapEngineSetting,long long>>> const&,unsigned long long,GEOApplicationAuditToken *)::$_12>,void ()(VKARWalkingElevationRequestFailureInfo *)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42D4F90;
  result[1] = v3;
  return result;
}

void std::__function::__func<md::MapEngine::MapEngine(float,float,float,BOOL,VKMapViewPurpose,std::shared_ptr<md::TaskContext> const&,VKMapPurpose,std::unique_ptr<md::AnimationManager>,geo::linear_map<md::MapEngineSetting,long long,std::equal_to<md::MapEngineSetting>,std::allocator<std::pair<md::MapEngineSetting,long long>>,std::vector<std::pair<md::MapEngineSetting,long long>>> const&,unsigned long long,GEOApplicationAuditToken *)::$_12,std::allocator<md::MapEngine::MapEngine(float,float,float,BOOL,VKMapViewPurpose,std::shared_ptr<md::TaskContext> const&,VKMapPurpose,std::unique_ptr<md::AnimationManager>,geo::linear_map<md::MapEngineSetting,long long,std::equal_to<md::MapEngineSetting>,std::allocator<std::pair<md::MapEngineSetting,long long>>,std::vector<std::pair<md::MapEngineSetting,long long>>> const&,unsigned long long,GEOApplicationAuditToken *)::$_12>,void ()(VKARWalkingElevationRequestFailureInfo *)>::operator()(uint64_t a1, id *a2)
{
  id *v3;
  id WeakRetained;
  char v5;
  id v6;
  id v7;

  v7 = *a2;
  v3 = (id *)(*(_QWORD *)(a1 + 8) + 848);
  WeakRetained = objc_loadWeakRetained(v3);
  v5 = objc_opt_respondsToSelector();

  if ((v5 & 1) != 0)
  {
    v6 = objc_loadWeakRetained(v3);
    objc_msgSend(v6, "arWalkingElevationRequestFailure:", v7);

  }
}

void sub_19FAB3450(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void std::__function::__func<md::MapEngine::MapEngine(float,float,float,BOOL,VKMapViewPurpose,std::shared_ptr<md::TaskContext> const&,VKMapPurpose,std::unique_ptr<md::AnimationManager>,geo::linear_map<md::MapEngineSetting,long long,std::equal_to<md::MapEngineSetting>,std::allocator<std::pair<md::MapEngineSetting,long long>>,std::vector<std::pair<md::MapEngineSetting,long long>>> const&,unsigned long long,GEOApplicationAuditToken *)::$_11,std::allocator<md::MapEngine::MapEngine(float,float,float,BOOL,VKMapViewPurpose,std::shared_ptr<md::TaskContext> const&,VKMapPurpose,std::unique_ptr<md::AnimationManager>,geo::linear_map<md::MapEngineSetting,long long,std::equal_to<md::MapEngineSetting>,std::allocator<std::pair<md::MapEngineSetting,long long>>,std::vector<std::pair<md::MapEngineSetting,long long>>> const&,unsigned long long,GEOApplicationAuditToken *)::$_11>,void ()(VKARWalkingFeatureSet *)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::MapEngine::MapEngine(float,float,float,BOOL,VKMapViewPurpose,std::shared_ptr<md::TaskContext> const&,VKMapPurpose,std::unique_ptr<md::AnimationManager>,geo::linear_map<md::MapEngineSetting,long long,std::equal_to<md::MapEngineSetting>,std::allocator<std::pair<md::MapEngineSetting,long long>>,std::vector<std::pair<md::MapEngineSetting,long long>>> const&,unsigned long long,GEOApplicationAuditToken *)::$_11,std::allocator<md::MapEngine::MapEngine(float,float,float,BOOL,VKMapViewPurpose,std::shared_ptr<md::TaskContext> const&,VKMapPurpose,std::unique_ptr<md::AnimationManager>,geo::linear_map<md::MapEngineSetting,long long,std::equal_to<md::MapEngineSetting>,std::allocator<std::pair<md::MapEngineSetting,long long>>,std::vector<std::pair<md::MapEngineSetting,long long>>> const&,unsigned long long,GEOApplicationAuditToken *)::$_11>,void ()(VKARWalkingFeatureSet *)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42D4F48;
  result[1] = v3;
  return result;
}

void std::__function::__func<md::MapEngine::MapEngine(float,float,float,BOOL,VKMapViewPurpose,std::shared_ptr<md::TaskContext> const&,VKMapPurpose,std::unique_ptr<md::AnimationManager>,geo::linear_map<md::MapEngineSetting,long long,std::equal_to<md::MapEngineSetting>,std::allocator<std::pair<md::MapEngineSetting,long long>>,std::vector<std::pair<md::MapEngineSetting,long long>>> const&,unsigned long long,GEOApplicationAuditToken *)::$_11,std::allocator<md::MapEngine::MapEngine(float,float,float,BOOL,VKMapViewPurpose,std::shared_ptr<md::TaskContext> const&,VKMapPurpose,std::unique_ptr<md::AnimationManager>,geo::linear_map<md::MapEngineSetting,long long,std::equal_to<md::MapEngineSetting>,std::allocator<std::pair<md::MapEngineSetting,long long>>,std::vector<std::pair<md::MapEngineSetting,long long>>> const&,unsigned long long,GEOApplicationAuditToken *)::$_11>,void ()(VKARWalkingFeatureSet *)>::operator()(uint64_t a1, id *a2)
{
  id *v3;
  id WeakRetained;
  char v5;
  id v6;
  id v7;

  v7 = *a2;
  v3 = (id *)(*(_QWORD *)(a1 + 8) + 848);
  WeakRetained = objc_loadWeakRetained(v3);
  v5 = objc_opt_respondsToSelector();

  if ((v5 & 1) != 0)
  {
    v6 = objc_loadWeakRetained(v3);
    objc_msgSend(v6, "arWalkingFeatureSetStateDidUpdate:", v7);

  }
}

void sub_19FAB353C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void std::__function::__func<md::MapEngine::MapEngine(float,float,float,BOOL,VKMapViewPurpose,std::shared_ptr<md::TaskContext> const&,VKMapPurpose,std::unique_ptr<md::AnimationManager>,geo::linear_map<md::MapEngineSetting,long long,std::equal_to<md::MapEngineSetting>,std::allocator<std::pair<md::MapEngineSetting,long long>>,std::vector<std::pair<md::MapEngineSetting,long long>>> const&,unsigned long long,GEOApplicationAuditToken *)::$_10,std::allocator<md::MapEngine::MapEngine(float,float,float,BOOL,VKMapViewPurpose,std::shared_ptr<md::TaskContext> const&,VKMapPurpose,std::unique_ptr<md::AnimationManager>,geo::linear_map<md::MapEngineSetting,long long,std::equal_to<md::MapEngineSetting>,std::allocator<std::pair<md::MapEngineSetting,long long>>,std::vector<std::pair<md::MapEngineSetting,long long>>> const&,unsigned long long,GEOApplicationAuditToken *)::$_10>,void ()(VKARWalkingFeatureDidUpdateInfo *)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::MapEngine::MapEngine(float,float,float,BOOL,VKMapViewPurpose,std::shared_ptr<md::TaskContext> const&,VKMapPurpose,std::unique_ptr<md::AnimationManager>,geo::linear_map<md::MapEngineSetting,long long,std::equal_to<md::MapEngineSetting>,std::allocator<std::pair<md::MapEngineSetting,long long>>,std::vector<std::pair<md::MapEngineSetting,long long>>> const&,unsigned long long,GEOApplicationAuditToken *)::$_10,std::allocator<md::MapEngine::MapEngine(float,float,float,BOOL,VKMapViewPurpose,std::shared_ptr<md::TaskContext> const&,VKMapPurpose,std::unique_ptr<md::AnimationManager>,geo::linear_map<md::MapEngineSetting,long long,std::equal_to<md::MapEngineSetting>,std::allocator<std::pair<md::MapEngineSetting,long long>>,std::vector<std::pair<md::MapEngineSetting,long long>>> const&,unsigned long long,GEOApplicationAuditToken *)::$_10>,void ()(VKARWalkingFeatureDidUpdateInfo *)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42D4F00;
  result[1] = v3;
  return result;
}

void std::__function::__func<md::MapEngine::MapEngine(float,float,float,BOOL,VKMapViewPurpose,std::shared_ptr<md::TaskContext> const&,VKMapPurpose,std::unique_ptr<md::AnimationManager>,geo::linear_map<md::MapEngineSetting,long long,std::equal_to<md::MapEngineSetting>,std::allocator<std::pair<md::MapEngineSetting,long long>>,std::vector<std::pair<md::MapEngineSetting,long long>>> const&,unsigned long long,GEOApplicationAuditToken *)::$_10,std::allocator<md::MapEngine::MapEngine(float,float,float,BOOL,VKMapViewPurpose,std::shared_ptr<md::TaskContext> const&,VKMapPurpose,std::unique_ptr<md::AnimationManager>,geo::linear_map<md::MapEngineSetting,long long,std::equal_to<md::MapEngineSetting>,std::allocator<std::pair<md::MapEngineSetting,long long>>,std::vector<std::pair<md::MapEngineSetting,long long>>> const&,unsigned long long,GEOApplicationAuditToken *)::$_10>,void ()(VKARWalkingFeatureDidUpdateInfo *)>::operator()(uint64_t a1, id *a2)
{
  id *v3;
  id WeakRetained;
  char v5;
  id v6;
  id v7;

  v7 = *a2;
  v3 = (id *)(*(_QWORD *)(a1 + 8) + 848);
  WeakRetained = objc_loadWeakRetained(v3);
  v5 = objc_opt_respondsToSelector();

  if ((v5 & 1) != 0)
  {
    v6 = objc_loadWeakRetained(v3);
    objc_msgSend(v6, "activeARWalkingFeatureDidUpdate:", v7);

  }
}

void sub_19FAB3628(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void std::__function::__func<md::MapEngine::MapEngine(float,float,float,BOOL,VKMapViewPurpose,std::shared_ptr<md::TaskContext> const&,VKMapPurpose,std::unique_ptr<md::AnimationManager>,geo::linear_map<md::MapEngineSetting,long long,std::equal_to<md::MapEngineSetting>,std::allocator<std::pair<md::MapEngineSetting,long long>>,std::vector<std::pair<md::MapEngineSetting,long long>>> const&,unsigned long long,GEOApplicationAuditToken *)::$_9,std::allocator<md::MapEngine::MapEngine(float,float,float,BOOL,VKMapViewPurpose,std::shared_ptr<md::TaskContext> const&,VKMapPurpose,std::unique_ptr<md::AnimationManager>,geo::linear_map<md::MapEngineSetting,long long,std::equal_to<md::MapEngineSetting>,std::allocator<std::pair<md::MapEngineSetting,long long>>,std::vector<std::pair<md::MapEngineSetting,long long>>> const&,unsigned long long,GEOApplicationAuditToken *)::$_9>,void ()(md::MuninJunction const*,md::MuninRoadEdge const*,BOOL)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::MapEngine::MapEngine(float,float,float,BOOL,VKMapViewPurpose,std::shared_ptr<md::TaskContext> const&,VKMapPurpose,std::unique_ptr<md::AnimationManager>,geo::linear_map<md::MapEngineSetting,long long,std::equal_to<md::MapEngineSetting>,std::allocator<std::pair<md::MapEngineSetting,long long>>,std::vector<std::pair<md::MapEngineSetting,long long>>> const&,unsigned long long,GEOApplicationAuditToken *)::$_9,std::allocator<md::MapEngine::MapEngine(float,float,float,BOOL,VKMapViewPurpose,std::shared_ptr<md::TaskContext> const&,VKMapPurpose,std::unique_ptr<md::AnimationManager>,geo::linear_map<md::MapEngineSetting,long long,std::equal_to<md::MapEngineSetting>,std::allocator<std::pair<md::MapEngineSetting,long long>>,std::vector<std::pair<md::MapEngineSetting,long long>>> const&,unsigned long long,GEOApplicationAuditToken *)::$_9>,void ()(md::MuninJunction const*,md::MuninRoadEdge const*,BOOL)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42D4EB8;
  result[1] = v3;
  return result;
}

void std::__function::__func<md::MapEngine::MapEngine(float,float,float,BOOL,VKMapViewPurpose,std::shared_ptr<md::TaskContext> const&,VKMapPurpose,std::unique_ptr<md::AnimationManager>,geo::linear_map<md::MapEngineSetting,long long,std::equal_to<md::MapEngineSetting>,std::allocator<std::pair<md::MapEngineSetting,long long>>,std::vector<std::pair<md::MapEngineSetting,long long>>> const&,unsigned long long,GEOApplicationAuditToken *)::$_9,std::allocator<md::MapEngine::MapEngine(float,float,float,BOOL,VKMapViewPurpose,std::shared_ptr<md::TaskContext> const&,VKMapPurpose,std::unique_ptr<md::AnimationManager>,geo::linear_map<md::MapEngineSetting,long long,std::equal_to<md::MapEngineSetting>,std::allocator<std::pair<md::MapEngineSetting,long long>>,std::vector<std::pair<md::MapEngineSetting,long long>>> const&,unsigned long long,GEOApplicationAuditToken *)::$_9>,void ()(md::MuninJunction const*,md::MuninRoadEdge const*,BOOL)>::operator()(uint64_t a1, uint64_t *a2, uint64_t *a3, unsigned __int8 *a4)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  id *v7;
  char v8;
  id WeakRetained;
  id v10;

  v4 = *a2;
  v5 = *a3;
  v6 = *a4;
  v7 = (id *)(*(_QWORD *)(a1 + 8) + 848);
  WeakRetained = objc_loadWeakRetained(v7);
  v8 = objc_opt_respondsToSelector();

  if ((v8 & 1) != 0)
  {
    v10 = objc_loadWeakRetained(v7);
    objc_msgSend(v10, "muninJunctionDidChange:currentRoad:localize:", v4, v5, v6 != 0);

  }
}

void sub_19FAB3740(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{

  _Unwind_Resume(a1);
}

void std::__function::__func<md::MapEngine::MapEngine(float,float,float,BOOL,VKMapViewPurpose,std::shared_ptr<md::TaskContext> const&,VKMapPurpose,std::unique_ptr<md::AnimationManager>,geo::linear_map<md::MapEngineSetting,long long,std::equal_to<md::MapEngineSetting>,std::allocator<std::pair<md::MapEngineSetting,long long>>,std::vector<std::pair<md::MapEngineSetting,long long>>> const&,unsigned long long,GEOApplicationAuditToken *)::$_8,std::allocator<md::MapEngine::MapEngine(float,float,float,BOOL,VKMapViewPurpose,std::shared_ptr<md::TaskContext> const&,VKMapPurpose,std::unique_ptr<md::AnimationManager>,geo::linear_map<md::MapEngineSetting,long long,std::equal_to<md::MapEngineSetting>,std::allocator<std::pair<md::MapEngineSetting,long long>>,std::vector<std::pair<md::MapEngineSetting,long long>>> const&,unsigned long long,GEOApplicationAuditToken *)::$_8>,void ()(md::LabelManager *)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::MapEngine::MapEngine(float,float,float,BOOL,VKMapViewPurpose,std::shared_ptr<md::TaskContext> const&,VKMapPurpose,std::unique_ptr<md::AnimationManager>,geo::linear_map<md::MapEngineSetting,long long,std::equal_to<md::MapEngineSetting>,std::allocator<std::pair<md::MapEngineSetting,long long>>,std::vector<std::pair<md::MapEngineSetting,long long>>> const&,unsigned long long,GEOApplicationAuditToken *)::$_8,std::allocator<md::MapEngine::MapEngine(float,float,float,BOOL,VKMapViewPurpose,std::shared_ptr<md::TaskContext> const&,VKMapPurpose,std::unique_ptr<md::AnimationManager>,geo::linear_map<md::MapEngineSetting,long long,std::equal_to<md::MapEngineSetting>,std::allocator<std::pair<md::MapEngineSetting,long long>>,std::vector<std::pair<md::MapEngineSetting,long long>>> const&,unsigned long long,GEOApplicationAuditToken *)::$_8>,void ()(md::LabelManager *)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42D4E70;
  result[1] = v3;
  return result;
}

void std::__function::__func<md::MapEngine::MapEngine(float,float,float,BOOL,VKMapViewPurpose,std::shared_ptr<md::TaskContext> const&,VKMapPurpose,std::unique_ptr<md::AnimationManager>,geo::linear_map<md::MapEngineSetting,long long,std::equal_to<md::MapEngineSetting>,std::allocator<std::pair<md::MapEngineSetting,long long>>,std::vector<std::pair<md::MapEngineSetting,long long>>> const&,unsigned long long,GEOApplicationAuditToken *)::$_7,std::allocator<md::MapEngine::MapEngine(float,float,float,BOOL,VKMapViewPurpose,std::shared_ptr<md::TaskContext> const&,VKMapPurpose,std::unique_ptr<md::AnimationManager>,geo::linear_map<md::MapEngineSetting,long long,std::equal_to<md::MapEngineSetting>,std::allocator<std::pair<md::MapEngineSetting,long long>>,std::vector<std::pair<md::MapEngineSetting,long long>>> const&,unsigned long long,GEOApplicationAuditToken *)::$_7>,void ()(md::LabelManager *,std::shared_ptr<md::LabelMarker> const&)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::MapEngine::MapEngine(float,float,float,BOOL,VKMapViewPurpose,std::shared_ptr<md::TaskContext> const&,VKMapPurpose,std::unique_ptr<md::AnimationManager>,geo::linear_map<md::MapEngineSetting,long long,std::equal_to<md::MapEngineSetting>,std::allocator<std::pair<md::MapEngineSetting,long long>>,std::vector<std::pair<md::MapEngineSetting,long long>>> const&,unsigned long long,GEOApplicationAuditToken *)::$_7,std::allocator<md::MapEngine::MapEngine(float,float,float,BOOL,VKMapViewPurpose,std::shared_ptr<md::TaskContext> const&,VKMapPurpose,std::unique_ptr<md::AnimationManager>,geo::linear_map<md::MapEngineSetting,long long,std::equal_to<md::MapEngineSetting>,std::allocator<std::pair<md::MapEngineSetting,long long>>,std::vector<std::pair<md::MapEngineSetting,long long>>> const&,unsigned long long,GEOApplicationAuditToken *)::$_7>,void ()(md::LabelManager *,std::shared_ptr<md::LabelMarker> const&)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42D4E28;
  result[1] = v3;
  return result;
}

void std::__function::__func<md::MapEngine::MapEngine(float,float,float,BOOL,VKMapViewPurpose,std::shared_ptr<md::TaskContext> const&,VKMapPurpose,std::unique_ptr<md::AnimationManager>,geo::linear_map<md::MapEngineSetting,long long,std::equal_to<md::MapEngineSetting>,std::allocator<std::pair<md::MapEngineSetting,long long>>,std::vector<std::pair<md::MapEngineSetting,long long>>> const&,unsigned long long,GEOApplicationAuditToken *)::$_7,std::allocator<md::MapEngine::MapEngine(float,float,float,BOOL,VKMapViewPurpose,std::shared_ptr<md::TaskContext> const&,VKMapPurpose,std::unique_ptr<md::AnimationManager>,geo::linear_map<md::MapEngineSetting,long long,std::equal_to<md::MapEngineSetting>,std::allocator<std::pair<md::MapEngineSetting,long long>>,std::vector<std::pair<md::MapEngineSetting,long long>>> const&,unsigned long long,GEOApplicationAuditToken *)::$_7>,void ()(md::LabelManager *,std::shared_ptr<md::LabelMarker> const&)>::operator()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(*(_QWORD *)(a1 + 8) + 848));
  objc_msgSend(WeakRetained, "labelMarkerDidChangeState:", a3);

}

void sub_19FAB3838(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void std::__function::__func<md::MapEngine::MapEngine(float,float,float,BOOL,VKMapViewPurpose,std::shared_ptr<md::TaskContext> const&,VKMapPurpose,std::unique_ptr<md::AnimationManager>,geo::linear_map<md::MapEngineSetting,long long,std::equal_to<md::MapEngineSetting>,std::allocator<std::pair<md::MapEngineSetting,long long>>,std::vector<std::pair<md::MapEngineSetting,long long>>> const&,unsigned long long,GEOApplicationAuditToken *)::$_6,std::allocator<md::MapEngine::MapEngine(float,float,float,BOOL,VKMapViewPurpose,std::shared_ptr<md::TaskContext> const&,VKMapPurpose,std::unique_ptr<md::AnimationManager>,geo::linear_map<md::MapEngineSetting,long long,std::equal_to<md::MapEngineSetting>,std::allocator<std::pair<md::MapEngineSetting,long long>>,std::vector<std::pair<md::MapEngineSetting,long long>>> const&,unsigned long long,GEOApplicationAuditToken *)::$_6>,void ()(md::LabelManager *,std::shared_ptr<md::LabelMarker> const&)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::MapEngine::MapEngine(float,float,float,BOOL,VKMapViewPurpose,std::shared_ptr<md::TaskContext> const&,VKMapPurpose,std::unique_ptr<md::AnimationManager>,geo::linear_map<md::MapEngineSetting,long long,std::equal_to<md::MapEngineSetting>,std::allocator<std::pair<md::MapEngineSetting,long long>>,std::vector<std::pair<md::MapEngineSetting,long long>>> const&,unsigned long long,GEOApplicationAuditToken *)::$_6,std::allocator<md::MapEngine::MapEngine(float,float,float,BOOL,VKMapViewPurpose,std::shared_ptr<md::TaskContext> const&,VKMapPurpose,std::unique_ptr<md::AnimationManager>,geo::linear_map<md::MapEngineSetting,long long,std::equal_to<md::MapEngineSetting>,std::allocator<std::pair<md::MapEngineSetting,long long>>,std::vector<std::pair<md::MapEngineSetting,long long>>> const&,unsigned long long,GEOApplicationAuditToken *)::$_6>,void ()(md::LabelManager *,std::shared_ptr<md::LabelMarker> const&)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42D4DE0;
  result[1] = v3;
  return result;
}

void std::__function::__func<md::MapEngine::MapEngine(float,float,float,BOOL,VKMapViewPurpose,std::shared_ptr<md::TaskContext> const&,VKMapPurpose,std::unique_ptr<md::AnimationManager>,geo::linear_map<md::MapEngineSetting,long long,std::equal_to<md::MapEngineSetting>,std::allocator<std::pair<md::MapEngineSetting,long long>>,std::vector<std::pair<md::MapEngineSetting,long long>>> const&,unsigned long long,GEOApplicationAuditToken *)::$_6,std::allocator<md::MapEngine::MapEngine(float,float,float,BOOL,VKMapViewPurpose,std::shared_ptr<md::TaskContext> const&,VKMapPurpose,std::unique_ptr<md::AnimationManager>,geo::linear_map<md::MapEngineSetting,long long,std::equal_to<md::MapEngineSetting>,std::allocator<std::pair<md::MapEngineSetting,long long>>,std::vector<std::pair<md::MapEngineSetting,long long>>> const&,unsigned long long,GEOApplicationAuditToken *)::$_6>,void ()(md::LabelManager *,std::shared_ptr<md::LabelMarker> const&)>::operator()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(*(_QWORD *)(a1 + 8) + 848));
  objc_msgSend(WeakRetained, "selectedLabelMarkerWillDisappear:", a3);

}

void sub_19FAB38DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void std::__function::__func<md::MapEngine::MapEngine(float,float,float,BOOL,VKMapViewPurpose,std::shared_ptr<md::TaskContext> const&,VKMapPurpose,std::unique_ptr<md::AnimationManager>,geo::linear_map<md::MapEngineSetting,long long,std::equal_to<md::MapEngineSetting>,std::allocator<std::pair<md::MapEngineSetting,long long>>,std::vector<std::pair<md::MapEngineSetting,long long>>> const&,unsigned long long,GEOApplicationAuditToken *)::$_5,std::allocator<md::MapEngine::MapEngine(float,float,float,BOOL,VKMapViewPurpose,std::shared_ptr<md::TaskContext> const&,VKMapPurpose,std::unique_ptr<md::AnimationManager>,geo::linear_map<md::MapEngineSetting,long long,std::equal_to<md::MapEngineSetting>,std::allocator<std::pair<md::MapEngineSetting,long long>>,std::vector<std::pair<md::MapEngineSetting,long long>>> const&,unsigned long long,GEOApplicationAuditToken *)::$_5>,void ()(md::LabelManager *,std::shared_ptr<md::LabelMarker> const&)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::MapEngine::MapEngine(float,float,float,BOOL,VKMapViewPurpose,std::shared_ptr<md::TaskContext> const&,VKMapPurpose,std::unique_ptr<md::AnimationManager>,geo::linear_map<md::MapEngineSetting,long long,std::equal_to<md::MapEngineSetting>,std::allocator<std::pair<md::MapEngineSetting,long long>>,std::vector<std::pair<md::MapEngineSetting,long long>>> const&,unsigned long long,GEOApplicationAuditToken *)::$_5,std::allocator<md::MapEngine::MapEngine(float,float,float,BOOL,VKMapViewPurpose,std::shared_ptr<md::TaskContext> const&,VKMapPurpose,std::unique_ptr<md::AnimationManager>,geo::linear_map<md::MapEngineSetting,long long,std::equal_to<md::MapEngineSetting>,std::allocator<std::pair<md::MapEngineSetting,long long>>,std::vector<std::pair<md::MapEngineSetting,long long>>> const&,unsigned long long,GEOApplicationAuditToken *)::$_5>,void ()(md::LabelManager *,std::shared_ptr<md::LabelMarker> const&)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E427CD68;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<md::MapEngine::MapEngine(float,float,float,BOOL,VKMapViewPurpose,std::shared_ptr<md::TaskContext> const&,VKMapPurpose,std::unique_ptr<md::AnimationManager>,geo::linear_map<md::MapEngineSetting,long long,std::equal_to<md::MapEngineSetting>,std::allocator<std::pair<md::MapEngineSetting,long long>>,std::vector<std::pair<md::MapEngineSetting,long long>>> const&,unsigned long long,GEOApplicationAuditToken *)::$_5,std::allocator<md::MapEngine::MapEngine(float,float,float,BOOL,VKMapViewPurpose,std::shared_ptr<md::TaskContext> const&,VKMapPurpose,std::unique_ptr<md::AnimationManager>,geo::linear_map<md::MapEngineSetting,long long,std::equal_to<md::MapEngineSetting>,std::allocator<std::pair<md::MapEngineSetting,long long>>,std::vector<std::pair<md::MapEngineSetting,long long>>> const&,unsigned long long,GEOApplicationAuditToken *)::$_5>,void ()(md::LabelManager *,std::shared_ptr<md::LabelMarker> const&)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E427CD68;
  a2[1] = v2;
  return result;
}

void std::__function::__func<md::MapEngine::MapEngine(float,float,float,BOOL,VKMapViewPurpose,std::shared_ptr<md::TaskContext> const&,VKMapPurpose,std::unique_ptr<md::AnimationManager>,geo::linear_map<md::MapEngineSetting,long long,std::equal_to<md::MapEngineSetting>,std::allocator<std::pair<md::MapEngineSetting,long long>>,std::vector<std::pair<md::MapEngineSetting,long long>>> const&,unsigned long long,GEOApplicationAuditToken *)::$_5,std::allocator<md::MapEngine::MapEngine(float,float,float,BOOL,VKMapViewPurpose,std::shared_ptr<md::TaskContext> const&,VKMapPurpose,std::unique_ptr<md::AnimationManager>,geo::linear_map<md::MapEngineSetting,long long,std::equal_to<md::MapEngineSetting>,std::allocator<std::pair<md::MapEngineSetting,long long>>,std::vector<std::pair<md::MapEngineSetting,long long>>> const&,unsigned long long,GEOApplicationAuditToken *)::$_5>,void ()(md::LabelManager *,std::shared_ptr<md::LabelMarker> const&)>::operator()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(*(_QWORD *)(a1 + 8) + 848));
  objc_msgSend(WeakRetained, "selectedLabelMarkerDidCompleteLayout:", a3);

}

void sub_19FAB3998(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void std::__function::__func<md::MapEngine::MapEngine(float,float,float,BOOL,VKMapViewPurpose,std::shared_ptr<md::TaskContext> const&,VKMapPurpose,std::unique_ptr<md::AnimationManager>,geo::linear_map<md::MapEngineSetting,long long,std::equal_to<md::MapEngineSetting>,std::allocator<std::pair<md::MapEngineSetting,long long>>,std::vector<std::pair<md::MapEngineSetting,long long>>> const&,unsigned long long,GEOApplicationAuditToken *)::$_4,std::allocator<md::MapEngine::MapEngine(float,float,float,BOOL,VKMapViewPurpose,std::shared_ptr<md::TaskContext> const&,VKMapPurpose,std::unique_ptr<md::AnimationManager>,geo::linear_map<md::MapEngineSetting,long long,std::equal_to<md::MapEngineSetting>,std::allocator<std::pair<md::MapEngineSetting,long long>>,std::vector<std::pair<md::MapEngineSetting,long long>>> const&,unsigned long long,GEOApplicationAuditToken *)::$_4>,void ()(md::LabelManager const*,md::NeedsLayoutReason)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::MapEngine::MapEngine(float,float,float,BOOL,VKMapViewPurpose,std::shared_ptr<md::TaskContext> const&,VKMapPurpose,std::unique_ptr<md::AnimationManager>,geo::linear_map<md::MapEngineSetting,long long,std::equal_to<md::MapEngineSetting>,std::allocator<std::pair<md::MapEngineSetting,long long>>,std::vector<std::pair<md::MapEngineSetting,long long>>> const&,unsigned long long,GEOApplicationAuditToken *)::$_4,std::allocator<md::MapEngine::MapEngine(float,float,float,BOOL,VKMapViewPurpose,std::shared_ptr<md::TaskContext> const&,VKMapPurpose,std::unique_ptr<md::AnimationManager>,geo::linear_map<md::MapEngineSetting,long long,std::equal_to<md::MapEngineSetting>,std::allocator<std::pair<md::MapEngineSetting,long long>>,std::vector<std::pair<md::MapEngineSetting,long long>>> const&,unsigned long long,GEOApplicationAuditToken *)::$_4>,void ()(md::LabelManager const*,md::NeedsLayoutReason)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E427CD20;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<md::MapEngine::MapEngine(float,float,float,BOOL,VKMapViewPurpose,std::shared_ptr<md::TaskContext> const&,VKMapPurpose,std::unique_ptr<md::AnimationManager>,geo::linear_map<md::MapEngineSetting,long long,std::equal_to<md::MapEngineSetting>,std::allocator<std::pair<md::MapEngineSetting,long long>>,std::vector<std::pair<md::MapEngineSetting,long long>>> const&,unsigned long long,GEOApplicationAuditToken *)::$_4,std::allocator<md::MapEngine::MapEngine(float,float,float,BOOL,VKMapViewPurpose,std::shared_ptr<md::TaskContext> const&,VKMapPurpose,std::unique_ptr<md::AnimationManager>,geo::linear_map<md::MapEngineSetting,long long,std::equal_to<md::MapEngineSetting>,std::allocator<std::pair<md::MapEngineSetting,long long>>,std::vector<std::pair<md::MapEngineSetting,long long>>> const&,unsigned long long,GEOApplicationAuditToken *)::$_4>,void ()(md::LabelManager const*,md::NeedsLayoutReason)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E427CD20;
  a2[1] = v2;
  return result;
}

void std::__function::__func<md::MapEngine::MapEngine(float,float,float,BOOL,VKMapViewPurpose,std::shared_ptr<md::TaskContext> const&,VKMapPurpose,std::unique_ptr<md::AnimationManager>,geo::linear_map<md::MapEngineSetting,long long,std::equal_to<md::MapEngineSetting>,std::allocator<std::pair<md::MapEngineSetting,long long>>,std::vector<std::pair<md::MapEngineSetting,long long>>> const&,unsigned long long,GEOApplicationAuditToken *)::$_4,std::allocator<md::MapEngine::MapEngine(float,float,float,BOOL,VKMapViewPurpose,std::shared_ptr<md::TaskContext> const&,VKMapPurpose,std::unique_ptr<md::AnimationManager>,geo::linear_map<md::MapEngineSetting,long long,std::equal_to<md::MapEngineSetting>,std::allocator<std::pair<md::MapEngineSetting,long long>>,std::vector<std::pair<md::MapEngineSetting,long long>>> const&,unsigned long long,GEOApplicationAuditToken *)::$_4>,void ()(md::LabelManager const*,md::NeedsLayoutReason)>::operator()(uint64_t a1, uint64_t a2, char *a3)
{
  uint64_t v3;
  char v4;

  v3 = *(_QWORD *)(a1 + 8);
  v4 = *a3;
  md::MapEngine::setNeedsTick(v3, &v4);
}

void std::__function::__func<md::MapEngine::MapEngine(float,float,float,BOOL,VKMapViewPurpose,std::shared_ptr<md::TaskContext> const&,VKMapPurpose,std::unique_ptr<md::AnimationManager>,geo::linear_map<md::MapEngineSetting,long long,std::equal_to<md::MapEngineSetting>,std::allocator<std::pair<md::MapEngineSetting,long long>>,std::vector<std::pair<md::MapEngineSetting,long long>>> const&,unsigned long long,GEOApplicationAuditToken *)::$_3,std::allocator<md::MapEngine::MapEngine(float,float,float,BOOL,VKMapViewPurpose,std::shared_ptr<md::TaskContext> const&,VKMapPurpose,std::unique_ptr<md::AnimationManager>,geo::linear_map<md::MapEngineSetting,long long,std::equal_to<md::MapEngineSetting>,std::allocator<std::pair<md::MapEngineSetting,long long>>,std::vector<std::pair<md::MapEngineSetting,long long>>> const&,unsigned long long,GEOApplicationAuditToken *)::$_3>,void ()(md::LabelManager *,md::NeedsLayoutReason)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::MapEngine::MapEngine(float,float,float,BOOL,VKMapViewPurpose,std::shared_ptr<md::TaskContext> const&,VKMapPurpose,std::unique_ptr<md::AnimationManager>,geo::linear_map<md::MapEngineSetting,long long,std::equal_to<md::MapEngineSetting>,std::allocator<std::pair<md::MapEngineSetting,long long>>,std::vector<std::pair<md::MapEngineSetting,long long>>> const&,unsigned long long,GEOApplicationAuditToken *)::$_3,std::allocator<md::MapEngine::MapEngine(float,float,float,BOOL,VKMapViewPurpose,std::shared_ptr<md::TaskContext> const&,VKMapPurpose,std::unique_ptr<md::AnimationManager>,geo::linear_map<md::MapEngineSetting,long long,std::equal_to<md::MapEngineSetting>,std::allocator<std::pair<md::MapEngineSetting,long long>>,std::vector<std::pair<md::MapEngineSetting,long long>>> const&,unsigned long long,GEOApplicationAuditToken *)::$_3>,void ()(md::LabelManager *,md::NeedsLayoutReason)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E427CCD8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<md::MapEngine::MapEngine(float,float,float,BOOL,VKMapViewPurpose,std::shared_ptr<md::TaskContext> const&,VKMapPurpose,std::unique_ptr<md::AnimationManager>,geo::linear_map<md::MapEngineSetting,long long,std::equal_to<md::MapEngineSetting>,std::allocator<std::pair<md::MapEngineSetting,long long>>,std::vector<std::pair<md::MapEngineSetting,long long>>> const&,unsigned long long,GEOApplicationAuditToken *)::$_3,std::allocator<md::MapEngine::MapEngine(float,float,float,BOOL,VKMapViewPurpose,std::shared_ptr<md::TaskContext> const&,VKMapPurpose,std::unique_ptr<md::AnimationManager>,geo::linear_map<md::MapEngineSetting,long long,std::equal_to<md::MapEngineSetting>,std::allocator<std::pair<md::MapEngineSetting,long long>>,std::vector<std::pair<md::MapEngineSetting,long long>>> const&,unsigned long long,GEOApplicationAuditToken *)::$_3>,void ()(md::LabelManager *,md::NeedsLayoutReason)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E427CCD8;
  a2[1] = v2;
  return result;
}

void std::__function::__func<md::MapEngine::MapEngine(float,float,float,BOOL,VKMapViewPurpose,std::shared_ptr<md::TaskContext> const&,VKMapPurpose,std::unique_ptr<md::AnimationManager>,geo::linear_map<md::MapEngineSetting,long long,std::equal_to<md::MapEngineSetting>,std::allocator<std::pair<md::MapEngineSetting,long long>>,std::vector<std::pair<md::MapEngineSetting,long long>>> const&,unsigned long long,GEOApplicationAuditToken *)::$_3,std::allocator<md::MapEngine::MapEngine(float,float,float,BOOL,VKMapViewPurpose,std::shared_ptr<md::TaskContext> const&,VKMapPurpose,std::unique_ptr<md::AnimationManager>,geo::linear_map<md::MapEngineSetting,long long,std::equal_to<md::MapEngineSetting>,std::allocator<std::pair<md::MapEngineSetting,long long>>,std::vector<std::pair<md::MapEngineSetting,long long>>> const&,unsigned long long,GEOApplicationAuditToken *)::$_3>,void ()(md::LabelManager *,md::NeedsLayoutReason)>::operator()(uint64_t a1, uint64_t a2, char *a3)
{
  uint64_t v3;
  char v4;

  v3 = *(_QWORD *)(a1 + 8);
  v4 = *a3;
  md::MapEngine::setNeedsTick(v3, &v4);
}

uint64_t md::Logic<md::ARApplyWorldTransformUpdatesLogic,md::ARApplyWorldTransformUpdatesContext,md::LogicDependencies<gdc::TypeList<md::ARUpDirectionUpdatesContext,md::ARAnimationContext,md::ARRotateTowardsUserContext,md::LabelsExternalMeshContext>,gdc::TypeList<>>>::_allocateContext@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  uint64_t result;

  v4 = (_QWORD *)operator new();
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 112))(a1);
  result = operator new();
  v4[2] = "md::ARApplyWorldTransformUpdatesContext]";
  v4[3] = 39;
  v4[4] = result;
  *v4 = &off_1E42B1630;
  v4[1] = 0x61AAF6FADEFBCCACLL;
  *a2 = v4;
  return result;
}

void sub_19FAB3B78(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AF4E00](v1, 0x10F1C40B0038B9CLL);
  _Unwind_Resume(a1);
}

uint64_t md::Logic<md::ARApplyWorldTransformUpdatesLogic,md::ARApplyWorldTransformUpdatesContext,md::LogicDependencies<gdc::TypeList<md::ARUpDirectionUpdatesContext,md::ARAnimationContext,md::ARRotateTowardsUserContext,md::LabelsExternalMeshContext>,gdc::TypeList<>>>::_runBeforeLayoutAtVariableRate(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  _QWORD v6[5];

  if (*(_QWORD *)(a3 + 8) == 0x61AAF6FADEFBCCACLL)
  {
    v3 = *(_QWORD *)(a3 + 32);
    if (v3)
    {
      v5 = result;
      md::LogicDependencies<gdc::TypeList<md::ARUpDirectionUpdatesContext,md::ARAnimationContext,md::ARRotateTowardsUserContext,md::LabelsExternalMeshContext>,gdc::TypeList<>>::buildRequiredTuple<md::ARUpDirectionUpdatesContext,md::ARAnimationContext,md::ARRotateTowardsUserContext,md::LabelsExternalMeshContext>(v6, **(_QWORD **)(a2 + 8), *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8));
      return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD *, uint64_t))(*(_QWORD *)v5 + 128))(v5, a2, v6, v3);
    }
  }
  return result;
}

uint64_t md::Logic<md::ARApplyWorldTransformUpdatesLogic,md::ARApplyWorldTransformUpdatesContext,md::LogicDependencies<gdc::TypeList<md::ARUpDirectionUpdatesContext,md::ARAnimationContext,md::ARRotateTowardsUserContext,md::LabelsExternalMeshContext>,gdc::TypeList<>>>::_runAfterLayoutAtVariableRate(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  _QWORD v6[5];

  if (*(_QWORD *)(a3 + 8) == 0x61AAF6FADEFBCCACLL)
  {
    v3 = *(_QWORD *)(a3 + 32);
    if (v3)
    {
      v5 = result;
      md::LogicDependencies<gdc::TypeList<md::ARUpDirectionUpdatesContext,md::ARAnimationContext,md::ARRotateTowardsUserContext,md::LabelsExternalMeshContext>,gdc::TypeList<>>::buildRequiredTuple<md::ARUpDirectionUpdatesContext,md::ARAnimationContext,md::ARRotateTowardsUserContext,md::LabelsExternalMeshContext>(v6, **(_QWORD **)(a2 + 8), *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8));
      return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD *, uint64_t))(*(_QWORD *)v5 + 136))(v5, a2, v6, v3);
    }
  }
  return result;
}

uint64_t md::Logic<md::ARApplyWorldTransformUpdatesLogic,md::ARApplyWorldTransformUpdatesContext,md::LogicDependencies<gdc::TypeList<md::ARUpDirectionUpdatesContext,md::ARAnimationContext,md::ARRotateTowardsUserContext,md::LabelsExternalMeshContext>,gdc::TypeList<>>>::_runBeforeLayout(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  _QWORD v6[5];

  if (*(_QWORD *)(a3 + 8) == 0x61AAF6FADEFBCCACLL)
  {
    v3 = *(_QWORD *)(a3 + 32);
    if (v3)
    {
      v5 = result;
      md::LogicDependencies<gdc::TypeList<md::ARUpDirectionUpdatesContext,md::ARAnimationContext,md::ARRotateTowardsUserContext,md::LabelsExternalMeshContext>,gdc::TypeList<>>::buildRequiredTuple<md::ARUpDirectionUpdatesContext,md::ARAnimationContext,md::ARRotateTowardsUserContext,md::LabelsExternalMeshContext>(v6, **(_QWORD **)(a2 + 8), *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8));
      return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD *, uint64_t))(*(_QWORD *)v5 + 144))(v5, a2, v6, v3);
    }
  }
  return result;
}

uint64_t md::Logic<md::ARApplyWorldTransformUpdatesLogic,md::ARApplyWorldTransformUpdatesContext,md::LogicDependencies<gdc::TypeList<md::ARUpDirectionUpdatesContext,md::ARAnimationContext,md::ARRotateTowardsUserContext,md::LabelsExternalMeshContext>,gdc::TypeList<>>>::_runAfterLayout(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  _QWORD v6[5];

  if (*(_QWORD *)(a3 + 8) == 0x61AAF6FADEFBCCACLL)
  {
    v3 = *(_QWORD *)(a3 + 32);
    if (v3)
    {
      v5 = result;
      md::LogicDependencies<gdc::TypeList<md::ARUpDirectionUpdatesContext,md::ARAnimationContext,md::ARRotateTowardsUserContext,md::LabelsExternalMeshContext>,gdc::TypeList<>>::buildRequiredTuple<md::ARUpDirectionUpdatesContext,md::ARAnimationContext,md::ARRotateTowardsUserContext,md::LabelsExternalMeshContext>(v6, **(_QWORD **)(a2 + 8), *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8));
      return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD *, uint64_t))(*(_QWORD *)v5 + 152))(v5, a2, v6, v3);
    }
  }
  return result;
}

uint64_t md::Logic<md::ARApplyWorldTransformUpdatesLogic,md::ARApplyWorldTransformUpdatesContext,md::LogicDependencies<gdc::TypeList<md::ARUpDirectionUpdatesContext,md::ARAnimationContext,md::ARRotateTowardsUserContext,md::LabelsExternalMeshContext>,gdc::TypeList<>>>::_debugConsoleString@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _BYTE *a4@<X8>)
{
  uint64_t v4;
  uint64_t v6;
  _QWORD v7[5];

  if (*(_QWORD *)(a3 + 8) == 0x61AAF6FADEFBCCACLL && (v4 = *(_QWORD *)(a3 + 32)) != 0)
  {
    v6 = result;
    md::LogicDependencies<gdc::TypeList<md::ARUpDirectionUpdatesContext,md::ARAnimationContext,md::ARRotateTowardsUserContext,md::LabelsExternalMeshContext>,gdc::TypeList<>>::buildRequiredTuple<md::ARUpDirectionUpdatesContext,md::ARAnimationContext,md::ARRotateTowardsUserContext,md::LabelsExternalMeshContext>(v7, **(_QWORD **)(a2 + 8), *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8));
    return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD *, uint64_t))(*(_QWORD *)v6 + 160))(v6, a2, v7, v4);
  }
  else
  {
    a4[23] = 0;
    *a4 = 0;
  }
  return result;
}

uint64_t md::Logic<md::ARApplyWorldTransformUpdatesLogic,md::ARApplyWorldTransformUpdatesContext,md::LogicDependencies<gdc::TypeList<md::ARUpDirectionUpdatesContext,md::ARAnimationContext,md::ARRotateTowardsUserContext,md::LabelsExternalMeshContext>,gdc::TypeList<>>>::frequency(uint64_t a1)
{
  return *(_QWORD *)(a1 + 64);
}

void md::Logic<md::ARApplyWorldTransformUpdatesLogic,md::ARApplyWorldTransformUpdatesContext,md::LogicDependencies<gdc::TypeList<md::ARUpDirectionUpdatesContext,md::ARAnimationContext,md::ARRotateTowardsUserContext,md::LabelsExternalMeshContext>,gdc::TypeList<>>>::debugConsoleString(uint64_t a1@<X0>, gdc::DebugTreeNode *a2@<X8>)
{
  void *v3;
  uint64_t v4;
  void *v5;
  void *v6[2];
  char v7;
  void *v8;
  char v9;
  void **v10;
  void *__p;
  void *v12;
  uint64_t v13;

  v13 = 0;
  (*(void (**)(void **__return_ptr, uint64_t, uint64_t *))(*(_QWORD *)a1 + 56))(v6, a1, &v13);
  gdc::DebugTreeNode::toString(a2, (uint64_t)v6);
  v3 = __p;
  if (__p)
  {
    v4 = (uint64_t)v12;
    v5 = __p;
    if (v12 != __p)
    {
      do
      {
        v4 -= 80;
        std::__destroy_at[abi:nn180100]<gdc::DebugTreeProperty,0>(v4);
      }
      while ((void *)v4 != v3);
      v5 = __p;
    }
    v12 = v3;
    operator delete(v5);
  }
  std::vector<gdc::DebugTreeNode>::~vector[abi:nn180100](&v10);
  if ((v9 & 0x80000000) == 0)
  {
    if ((v7 & 0x80000000) == 0)
      return;
LABEL_10:
    operator delete(v6[0]);
    return;
  }
  operator delete(v8);
  if (v7 < 0)
    goto LABEL_10;
}

_QWORD *md::LogicDependencies<gdc::TypeList<md::ARUpDirectionUpdatesContext,md::ARAnimationContext,md::ARRotateTowardsUserContext,md::LabelsExternalMeshContext>,gdc::TypeList<>>::buildRequiredTuple<md::ARUpDirectionUpdatesContext,md::ARAnimationContext,md::ARRotateTowardsUserContext,md::LabelsExternalMeshContext>(_QWORD *result, uint64_t a2, unint64_t a3)
{
  uint8x8_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  if (!a3)
  {
    v5 = 0;
    v6 = 0;
    v7 = 0;
    goto LABEL_94;
  }
  v3 = (uint8x8_t)vcnt_s8((int8x8_t)a3);
  v3.i16[0] = vaddlv_u8(v3);
  if (v3.u32[0] > 1uLL)
  {
    v4 = 0x2BD4930A0600742;
    if (a3 <= 0x2BD4930A0600742)
      v4 = 0x2BD4930A0600742 % a3;
  }
  else
  {
    v4 = (a3 - 1) & 0x2BD4930A0600742;
  }
  v8 = *(_QWORD **)(a2 + 8 * v4);
  if (!v8)
    goto LABEL_25;
  v9 = (_QWORD *)*v8;
  if (!v9)
    goto LABEL_25;
  if (v3.u32[0] < 2uLL)
  {
    while (1)
    {
      v11 = v9[1];
      if (v11 == 0x2BD4930A0600742)
      {
        if (v9[2] == 0x2BD4930A0600742)
          goto LABEL_23;
      }
      else if ((v11 & (a3 - 1)) != v4)
      {
        goto LABEL_25;
      }
      v9 = (_QWORD *)*v9;
      if (!v9)
        goto LABEL_25;
    }
  }
  while (1)
  {
    v10 = v9[1];
    if (v10 == 0x2BD4930A0600742)
      break;
    if (v10 >= a3)
      v10 %= a3;
    if (v10 != v4)
      goto LABEL_25;
LABEL_12:
    v9 = (_QWORD *)*v9;
    if (!v9)
      goto LABEL_25;
  }
  if (v9[2] != 0x2BD4930A0600742)
    goto LABEL_12;
LABEL_23:
  v12 = v9[5];
  if (*(_QWORD *)(v12 + 8) == 0x2BD4930A0600742)
  {
    v6 = *(_QWORD *)(v12 + 32);
    goto LABEL_26;
  }
LABEL_25:
  v6 = 0;
LABEL_26:
  if (v3.u32[0] > 1uLL)
  {
    v13 = 0x148CB13E59522D82;
    if (a3 <= 0x148CB13E59522D82)
      v13 = 0x148CB13E59522D82 % a3;
  }
  else
  {
    v13 = (a3 - 1) & 0x148CB13E59522D82;
  }
  v14 = *(_QWORD **)(a2 + 8 * v13);
  if (!v14)
    goto LABEL_48;
  v15 = (_QWORD *)*v14;
  if (!v15)
    goto LABEL_48;
  if (v3.u32[0] < 2uLL)
  {
    while (1)
    {
      v17 = v15[1];
      if (v17 == 0x148CB13E59522D82)
      {
        if (v15[2] == 0x148CB13E59522D82)
          goto LABEL_46;
      }
      else if ((v17 & (a3 - 1)) != v13)
      {
        goto LABEL_48;
      }
      v15 = (_QWORD *)*v15;
      if (!v15)
        goto LABEL_48;
    }
  }
  while (2)
  {
    v16 = v15[1];
    if (v16 != 0x148CB13E59522D82)
    {
      if (v16 >= a3)
        v16 %= a3;
      if (v16 != v13)
        goto LABEL_48;
      goto LABEL_35;
    }
    if (v15[2] != 0x148CB13E59522D82)
    {
LABEL_35:
      v15 = (_QWORD *)*v15;
      if (!v15)
        goto LABEL_48;
      continue;
    }
    break;
  }
LABEL_46:
  v18 = v15[5];
  if (*(_QWORD *)(v18 + 8) == 0x148CB13E59522D82)
  {
    v7 = *(_QWORD *)(v18 + 32);
    goto LABEL_49;
  }
LABEL_48:
  v7 = 0;
LABEL_49:
  if (v3.u32[0] > 1uLL)
  {
    v19 = 0x9C174DEE01931CA6;
    if (a3 <= 0x9C174DEE01931CA6)
      v19 = 0x9C174DEE01931CA6 % a3;
  }
  else
  {
    v19 = (a3 - 1) & 0x9C174DEE01931CA6;
  }
  v20 = *(_QWORD **)(a2 + 8 * v19);
  if (!v20)
    goto LABEL_71;
  v21 = (_QWORD *)*v20;
  if (!v21)
    goto LABEL_71;
  if (v3.u32[0] < 2uLL)
  {
    while (1)
    {
      v23 = v21[1];
      if (v23 == 0x9C174DEE01931CA6)
      {
        if (v21[2] == 0x9C174DEE01931CA6)
          goto LABEL_69;
      }
      else if ((v23 & (a3 - 1)) != v19)
      {
        goto LABEL_71;
      }
      v21 = (_QWORD *)*v21;
      if (!v21)
        goto LABEL_71;
    }
  }
  while (2)
  {
    v22 = v21[1];
    if (v22 != 0x9C174DEE01931CA6)
    {
      if (v22 >= a3)
        v22 %= a3;
      if (v22 != v19)
        goto LABEL_71;
      goto LABEL_58;
    }
    if (v21[2] != 0x9C174DEE01931CA6)
    {
LABEL_58:
      v21 = (_QWORD *)*v21;
      if (!v21)
        goto LABEL_71;
      continue;
    }
    break;
  }
LABEL_69:
  v24 = v21[5];
  if (*(_QWORD *)(v24 + 8) == 0x9C174DEE01931CA6)
  {
    v5 = *(_QWORD *)(v24 + 32);
    goto LABEL_72;
  }
LABEL_71:
  v5 = 0;
LABEL_72:
  if (v3.u32[0] > 1uLL)
  {
    v25 = 0xF409241CDA31AF08;
    if (a3 <= 0xF409241CDA31AF08)
      v25 = 0xF409241CDA31AF08 % a3;
  }
  else
  {
    v25 = (a3 - 1) & 0xF409241CDA31AF08;
  }
  v26 = *(_QWORD **)(a2 + 8 * v25);
  if (!v26)
    goto LABEL_94;
  v27 = (_QWORD *)*v26;
  if (!v27)
    goto LABEL_94;
  if (v3.u32[0] < 2uLL)
  {
    while (1)
    {
      v29 = v27[1];
      if (v29 == 0xF409241CDA31AF08)
      {
        if (v27[2] == 0xF409241CDA31AF08)
          goto LABEL_92;
      }
      else if ((v29 & (a3 - 1)) != v25)
      {
        goto LABEL_94;
      }
      v27 = (_QWORD *)*v27;
      if (!v27)
        goto LABEL_94;
    }
  }
  while (1)
  {
    v28 = v27[1];
    if (v28 == 0xF409241CDA31AF08)
      break;
    if (v28 >= a3)
      v28 %= a3;
    if (v28 != v25)
      goto LABEL_94;
LABEL_81:
    v27 = (_QWORD *)*v27;
    if (!v27)
      goto LABEL_94;
  }
  if (v27[2] != 0xF409241CDA31AF08)
    goto LABEL_81;
LABEL_92:
  v30 = v27[5];
  if (*(_QWORD *)(v30 + 8) != 0xF409241CDA31AF08)
  {
LABEL_94:
    v31 = 0;
    goto LABEL_95;
  }
  v31 = *(_QWORD *)(v30 + 32);
LABEL_95:
  *result = v6;
  result[1] = v7;
  result[2] = v5;
  result[3] = v31;
  return result;
}

_QWORD *gdc::ManagedObjectHolder<md::ARApplyWorldTransformUpdatesContext>::~ManagedObjectHolder(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_1E42B1630;
  v2 = a1[4];
  if (v2)
    MEMORY[0x1A1AF4E00](v2, 0xC400A2AC0F1);
  return a1;
}

void gdc::ManagedObjectHolder<md::ARApplyWorldTransformUpdatesContext>::~ManagedObjectHolder(_QWORD *a1)
{
  uint64_t v1;

  *a1 = &off_1E42B1630;
  v1 = a1[4];
  if (v1)
    MEMORY[0x1A1AF4E00](v1, 0xC400A2AC0F1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t gdc::ObjectHolder<md::ARApplyWorldTransformUpdatesContext>::extract@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 32);
  *(_QWORD *)(result + 32) = 0;
  *a2 = v2;
  return result;
}

uint64_t md::Logic<md::ARUpDirectionUpdatesLogic,md::ARUpDirectionUpdatesContext,md::LogicDependencies<gdc::TypeList<md::ARAnimationContext>,gdc::TypeList<>>>::_allocateContext@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  uint64_t result;

  v4 = (_QWORD *)operator new();
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 112))(a1);
  result = operator new();
  v4[2] = "md::ARUpDirectionUpdatesContext]";
  v4[3] = 31;
  v4[4] = result;
  *v4 = &off_1E42B1360;
  v4[1] = 0x2BD4930A0600742;
  *a2 = v4;
  return result;
}

void sub_19FAB4438(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AF4E00](v1, 0x10F1C40B0038B9CLL);
  _Unwind_Resume(a1);
}

uint64_t md::Logic<md::ARUpDirectionUpdatesLogic,md::ARUpDirectionUpdatesContext,md::LogicDependencies<gdc::TypeList<md::ARAnimationContext>,gdc::TypeList<>>>::_runBeforeLayoutAtVariableRate(uint64_t result, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  int8x8_t v4;
  uint8x8_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  if (*(_QWORD *)(a3 + 8) != 0x2BD4930A0600742 || !*(_QWORD *)(a3 + 32))
    return result;
  v3 = *(_QWORD **)(a2 + 8);
  v4 = (int8x8_t)v3[1];
  if (!*(_QWORD *)&v4)
    goto LABEL_26;
  v5 = (uint8x8_t)vcnt_s8(v4);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    v6 = 0x148CB13E59522D82;
    if (*(_QWORD *)&v4 <= 0x148CB13E59522D82uLL)
      v6 = 0x148CB13E59522D82uLL % *(_QWORD *)&v4;
  }
  else
  {
    v6 = (*(_QWORD *)&v4 - 1) & 0x148CB13E59522D82;
  }
  v7 = *(_QWORD **)(*v3 + 8 * v6);
  if (!v7)
    goto LABEL_26;
  v8 = (_QWORD *)*v7;
  if (!v8)
    goto LABEL_26;
  if (v5.u32[0] < 2uLL)
  {
    v9 = *(_QWORD *)&v4 - 1;
    while (1)
    {
      v11 = v8[1];
      if (v11 == 0x148CB13E59522D82)
      {
        if (v8[2] == 0x148CB13E59522D82)
          goto LABEL_24;
      }
      else if ((v11 & v9) != v6)
      {
        goto LABEL_26;
      }
      v8 = (_QWORD *)*v8;
      if (!v8)
        goto LABEL_26;
    }
  }
  while (1)
  {
    v10 = v8[1];
    if (v10 == 0x148CB13E59522D82)
      break;
    if (v10 >= *(_QWORD *)&v4)
      v10 %= *(_QWORD *)&v4;
    if (v10 != v6)
      goto LABEL_26;
LABEL_13:
    v8 = (_QWORD *)*v8;
    if (!v8)
      goto LABEL_26;
  }
  if (v8[2] != 0x148CB13E59522D82)
    goto LABEL_13;
LABEL_24:
  v12 = v8[5];
  if (*(_QWORD *)(v12 + 8) == 0x148CB13E59522D82)
  {
    v13 = *(_QWORD *)(v12 + 32);
    goto LABEL_27;
  }
LABEL_26:
  v13 = 0;
LABEL_27:
  v14 = v13;
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 128))(result);
}

uint64_t md::Logic<md::ARUpDirectionUpdatesLogic,md::ARUpDirectionUpdatesContext,md::LogicDependencies<gdc::TypeList<md::ARAnimationContext>,gdc::TypeList<>>>::_runAfterLayoutAtVariableRate(uint64_t result, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  int8x8_t v4;
  uint8x8_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  if (*(_QWORD *)(a3 + 8) != 0x2BD4930A0600742 || !*(_QWORD *)(a3 + 32))
    return result;
  v3 = *(_QWORD **)(a2 + 8);
  v4 = (int8x8_t)v3[1];
  if (!*(_QWORD *)&v4)
    goto LABEL_26;
  v5 = (uint8x8_t)vcnt_s8(v4);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    v6 = 0x148CB13E59522D82;
    if (*(_QWORD *)&v4 <= 0x148CB13E59522D82uLL)
      v6 = 0x148CB13E59522D82uLL % *(_QWORD *)&v4;
  }
  else
  {
    v6 = (*(_QWORD *)&v4 - 1) & 0x148CB13E59522D82;
  }
  v7 = *(_QWORD **)(*v3 + 8 * v6);
  if (!v7)
    goto LABEL_26;
  v8 = (_QWORD *)*v7;
  if (!v8)
    goto LABEL_26;
  if (v5.u32[0] < 2uLL)
  {
    v9 = *(_QWORD *)&v4 - 1;
    while (1)
    {
      v11 = v8[1];
      if (v11 == 0x148CB13E59522D82)
      {
        if (v8[2] == 0x148CB13E59522D82)
          goto LABEL_24;
      }
      else if ((v11 & v9) != v6)
      {
        goto LABEL_26;
      }
      v8 = (_QWORD *)*v8;
      if (!v8)
        goto LABEL_26;
    }
  }
  while (1)
  {
    v10 = v8[1];
    if (v10 == 0x148CB13E59522D82)
      break;
    if (v10 >= *(_QWORD *)&v4)
      v10 %= *(_QWORD *)&v4;
    if (v10 != v6)
      goto LABEL_26;
LABEL_13:
    v8 = (_QWORD *)*v8;
    if (!v8)
      goto LABEL_26;
  }
  if (v8[2] != 0x148CB13E59522D82)
    goto LABEL_13;
LABEL_24:
  v12 = v8[5];
  if (*(_QWORD *)(v12 + 8) == 0x148CB13E59522D82)
  {
    v13 = *(_QWORD *)(v12 + 32);
    goto LABEL_27;
  }
LABEL_26:
  v13 = 0;
LABEL_27:
  v14 = v13;
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 136))(result);
}

uint64_t md::Logic<md::ARUpDirectionUpdatesLogic,md::ARUpDirectionUpdatesContext,md::LogicDependencies<gdc::TypeList<md::ARAnimationContext>,gdc::TypeList<>>>::_runBeforeLayout(uint64_t result, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  int8x8_t v4;
  uint8x8_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  if (*(_QWORD *)(a3 + 8) != 0x2BD4930A0600742 || !*(_QWORD *)(a3 + 32))
    return result;
  v3 = *(_QWORD **)(a2 + 8);
  v4 = (int8x8_t)v3[1];
  if (!*(_QWORD *)&v4)
    goto LABEL_26;
  v5 = (uint8x8_t)vcnt_s8(v4);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    v6 = 0x148CB13E59522D82;
    if (*(_QWORD *)&v4 <= 0x148CB13E59522D82uLL)
      v6 = 0x148CB13E59522D82uLL % *(_QWORD *)&v4;
  }
  else
  {
    v6 = (*(_QWORD *)&v4 - 1) & 0x148CB13E59522D82;
  }
  v7 = *(_QWORD **)(*v3 + 8 * v6);
  if (!v7)
    goto LABEL_26;
  v8 = (_QWORD *)*v7;
  if (!v8)
    goto LABEL_26;
  if (v5.u32[0] < 2uLL)
  {
    v9 = *(_QWORD *)&v4 - 1;
    while (1)
    {
      v11 = v8[1];
      if (v11 == 0x148CB13E59522D82)
      {
        if (v8[2] == 0x148CB13E59522D82)
          goto LABEL_24;
      }
      else if ((v11 & v9) != v6)
      {
        goto LABEL_26;
      }
      v8 = (_QWORD *)*v8;
      if (!v8)
        goto LABEL_26;
    }
  }
  while (1)
  {
    v10 = v8[1];
    if (v10 == 0x148CB13E59522D82)
      break;
    if (v10 >= *(_QWORD *)&v4)
      v10 %= *(_QWORD *)&v4;
    if (v10 != v6)
      goto LABEL_26;
LABEL_13:
    v8 = (_QWORD *)*v8;
    if (!v8)
      goto LABEL_26;
  }
  if (v8[2] != 0x148CB13E59522D82)
    goto LABEL_13;
LABEL_24:
  v12 = v8[5];
  if (*(_QWORD *)(v12 + 8) == 0x148CB13E59522D82)
  {
    v13 = *(_QWORD *)(v12 + 32);
    goto LABEL_27;
  }
LABEL_26:
  v13 = 0;
LABEL_27:
  v14 = v13;
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 144))(result);
}

uint64_t md::Logic<md::ARUpDirectionUpdatesLogic,md::ARUpDirectionUpdatesContext,md::LogicDependencies<gdc::TypeList<md::ARAnimationContext>,gdc::TypeList<>>>::_runAfterLayout(uint64_t result, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  int8x8_t v4;
  uint8x8_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  if (*(_QWORD *)(a3 + 8) != 0x2BD4930A0600742 || !*(_QWORD *)(a3 + 32))
    return result;
  v3 = *(_QWORD **)(a2 + 8);
  v4 = (int8x8_t)v3[1];
  if (!*(_QWORD *)&v4)
    goto LABEL_26;
  v5 = (uint8x8_t)vcnt_s8(v4);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    v6 = 0x148CB13E59522D82;
    if (*(_QWORD *)&v4 <= 0x148CB13E59522D82uLL)
      v6 = 0x148CB13E59522D82uLL % *(_QWORD *)&v4;
  }
  else
  {
    v6 = (*(_QWORD *)&v4 - 1) & 0x148CB13E59522D82;
  }
  v7 = *(_QWORD **)(*v3 + 8 * v6);
  if (!v7)
    goto LABEL_26;
  v8 = (_QWORD *)*v7;
  if (!v8)
    goto LABEL_26;
  if (v5.u32[0] < 2uLL)
  {
    v9 = *(_QWORD *)&v4 - 1;
    while (1)
    {
      v11 = v8[1];
      if (v11 == 0x148CB13E59522D82)
      {
        if (v8[2] == 0x148CB13E59522D82)
          goto LABEL_24;
      }
      else if ((v11 & v9) != v6)
      {
        goto LABEL_26;
      }
      v8 = (_QWORD *)*v8;
      if (!v8)
        goto LABEL_26;
    }
  }
  while (1)
  {
    v10 = v8[1];
    if (v10 == 0x148CB13E59522D82)
      break;
    if (v10 >= *(_QWORD *)&v4)
      v10 %= *(_QWORD *)&v4;
    if (v10 != v6)
      goto LABEL_26;
LABEL_13:
    v8 = (_QWORD *)*v8;
    if (!v8)
      goto LABEL_26;
  }
  if (v8[2] != 0x148CB13E59522D82)
    goto LABEL_13;
LABEL_24:
  v12 = v8[5];
  if (*(_QWORD *)(v12 + 8) == 0x148CB13E59522D82)
  {
    v13 = *(_QWORD *)(v12 + 32);
    goto LABEL_27;
  }
LABEL_26:
  v13 = 0;
LABEL_27:
  v14 = v13;
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 152))(result);
}

uint64_t md::Logic<md::ARUpDirectionUpdatesLogic,md::ARUpDirectionUpdatesContext,md::LogicDependencies<gdc::TypeList<md::ARAnimationContext>,gdc::TypeList<>>>::_debugConsoleString@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _BYTE *a4@<X8>)
{
  _QWORD *v4;
  int8x8_t v5;
  uint8x8_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  if (*(_QWORD *)(a3 + 8) != 0x2BD4930A0600742 || !*(_QWORD *)(a3 + 32))
  {
    a4[23] = 0;
    *a4 = 0;
    return result;
  }
  v4 = *(_QWORD **)(a2 + 8);
  v5 = (int8x8_t)v4[1];
  if (!*(_QWORD *)&v5)
    goto LABEL_27;
  v6 = (uint8x8_t)vcnt_s8(v5);
  v6.i16[0] = vaddlv_u8(v6);
  if (v6.u32[0] > 1uLL)
  {
    v7 = 0x148CB13E59522D82;
    if (*(_QWORD *)&v5 <= 0x148CB13E59522D82uLL)
      v7 = 0x148CB13E59522D82uLL % *(_QWORD *)&v5;
  }
  else
  {
    v7 = (*(_QWORD *)&v5 - 1) & 0x148CB13E59522D82;
  }
  v8 = *(_QWORD **)(*v4 + 8 * v7);
  if (!v8)
    goto LABEL_27;
  v9 = (_QWORD *)*v8;
  if (!v9)
    goto LABEL_27;
  if (v6.u32[0] < 2uLL)
  {
    v10 = *(_QWORD *)&v5 - 1;
    while (1)
    {
      v12 = v9[1];
      if (v12 == 0x148CB13E59522D82)
      {
        if (v9[2] == 0x148CB13E59522D82)
          goto LABEL_25;
      }
      else if ((v12 & v10) != v7)
      {
        goto LABEL_27;
      }
      v9 = (_QWORD *)*v9;
      if (!v9)
        goto LABEL_27;
    }
  }
  while (1)
  {
    v11 = v9[1];
    if (v11 == 0x148CB13E59522D82)
      break;
    if (v11 >= *(_QWORD *)&v5)
      v11 %= *(_QWORD *)&v5;
    if (v11 != v7)
      goto LABEL_27;
LABEL_14:
    v9 = (_QWORD *)*v9;
    if (!v9)
      goto LABEL_27;
  }
  if (v9[2] != 0x148CB13E59522D82)
    goto LABEL_14;
LABEL_25:
  v13 = v9[5];
  if (*(_QWORD *)(v13 + 8) == 0x148CB13E59522D82)
  {
    v14 = *(_QWORD *)(v13 + 32);
    goto LABEL_28;
  }
LABEL_27:
  v14 = 0;
LABEL_28:
  v15 = v14;
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 160))(result);
}

uint64_t md::Logic<md::ARUpDirectionUpdatesLogic,md::ARUpDirectionUpdatesContext,md::LogicDependencies<gdc::TypeList<md::ARAnimationContext>,gdc::TypeList<>>>::frequency(uint64_t a1)
{
  return *(_QWORD *)(a1 + 64);
}

void md::Logic<md::ARUpDirectionUpdatesLogic,md::ARUpDirectionUpdatesContext,md::LogicDependencies<gdc::TypeList<md::ARAnimationContext>,gdc::TypeList<>>>::debugConsoleString(uint64_t a1@<X0>, gdc::DebugTreeNode *a2@<X8>)
{
  void *v3;
  uint64_t v4;
  void *v5;
  void *v6[2];
  char v7;
  void *v8;
  char v9;
  void **v10;
  void *__p;
  void *v12;
  uint64_t v13;

  v13 = 0;
  (*(void (**)(void **__return_ptr, uint64_t, uint64_t *))(*(_QWORD *)a1 + 56))(v6, a1, &v13);
  gdc::DebugTreeNode::toString(a2, (uint64_t)v6);
  v3 = __p;
  if (__p)
  {
    v4 = (uint64_t)v12;
    v5 = __p;
    if (v12 != __p)
    {
      do
      {
        v4 -= 80;
        std::__destroy_at[abi:nn180100]<gdc::DebugTreeProperty,0>(v4);
      }
      while ((void *)v4 != v3);
      v5 = __p;
    }
    v12 = v3;
    operator delete(v5);
  }
  std::vector<gdc::DebugTreeNode>::~vector[abi:nn180100](&v10);
  if ((v9 & 0x80000000) == 0)
  {
    if ((v7 & 0x80000000) == 0)
      return;
LABEL_10:
    operator delete(v6[0]);
    return;
  }
  operator delete(v8);
  if (v7 < 0)
    goto LABEL_10;
}

_QWORD *gdc::ManagedObjectHolder<md::ARUpDirectionUpdatesContext>::~ManagedObjectHolder(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_1E42B1360;
  v2 = a1[4];
  if (v2)
    MEMORY[0x1A1AF4E00](v2, 0xC400A2AC0F1);
  return a1;
}

void gdc::ManagedObjectHolder<md::ARUpDirectionUpdatesContext>::~ManagedObjectHolder(_QWORD *a1)
{
  uint64_t v1;

  *a1 = &off_1E42B1360;
  v1 = a1[4];
  if (v1)
    MEMORY[0x1A1AF4E00](v1, 0xC400A2AC0F1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t gdc::ObjectHolder<md::ARUpDirectionUpdatesContext>::extract@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 32);
  *(_QWORD *)(result + 32) = 0;
  *a2 = v2;
  return result;
}

void md::CollectARMapDataLogic::~CollectARMapDataLogic(md::CollectARMapDataLogic *this)
{
  *(_QWORD *)this = off_1E42AFC70;
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((_QWORD **)this + 13));
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((_QWORD **)this + 10));
}

{
  *(_QWORD *)this = off_1E42AFC70;
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((_QWORD **)this + 13));
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((_QWORD **)this + 10));
  JUMPOUT(0x1A1AF4E00);
}

void std::__function::__func<md::MapEngine::MapEngine(float,float,float,BOOL,VKMapViewPurpose,std::shared_ptr<md::TaskContext> const&,VKMapPurpose,std::unique_ptr<md::AnimationManager>,geo::linear_map<md::MapEngineSetting,long long,std::equal_to<md::MapEngineSetting>,std::allocator<std::pair<md::MapEngineSetting,long long>>,std::vector<std::pair<md::MapEngineSetting,long long>>> const&,unsigned long long,GEOApplicationAuditToken *)::$_2,std::allocator<md::MapEngine::MapEngine(float,float,float,BOOL,VKMapViewPurpose,std::shared_ptr<md::TaskContext> const&,VKMapPurpose,std::unique_ptr<md::AnimationManager>,geo::linear_map<md::MapEngineSetting,long long,std::equal_to<md::MapEngineSetting>,std::allocator<std::pair<md::MapEngineSetting,long long>>,std::vector<std::pair<md::MapEngineSetting,long long>>> const&,unsigned long long,GEOApplicationAuditToken *)::$_2>,void ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::MapEngine::MapEngine(float,float,float,BOOL,VKMapViewPurpose,std::shared_ptr<md::TaskContext> const&,VKMapPurpose,std::unique_ptr<md::AnimationManager>,geo::linear_map<md::MapEngineSetting,long long,std::equal_to<md::MapEngineSetting>,std::allocator<std::pair<md::MapEngineSetting,long long>>,std::vector<std::pair<md::MapEngineSetting,long long>>> const&,unsigned long long,GEOApplicationAuditToken *)::$_2,std::allocator<md::MapEngine::MapEngine(float,float,float,BOOL,VKMapViewPurpose,std::shared_ptr<md::TaskContext> const&,VKMapPurpose,std::unique_ptr<md::AnimationManager>,geo::linear_map<md::MapEngineSetting,long long,std::equal_to<md::MapEngineSetting>,std::allocator<std::pair<md::MapEngineSetting,long long>>,std::vector<std::pair<md::MapEngineSetting,long long>>> const&,unsigned long long,GEOApplicationAuditToken *)::$_2>,void ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E427CC90;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<md::MapEngine::MapEngine(float,float,float,BOOL,VKMapViewPurpose,std::shared_ptr<md::TaskContext> const&,VKMapPurpose,std::unique_ptr<md::AnimationManager>,geo::linear_map<md::MapEngineSetting,long long,std::equal_to<md::MapEngineSetting>,std::allocator<std::pair<md::MapEngineSetting,long long>>,std::vector<std::pair<md::MapEngineSetting,long long>>> const&,unsigned long long,GEOApplicationAuditToken *)::$_2,std::allocator<md::MapEngine::MapEngine(float,float,float,BOOL,VKMapViewPurpose,std::shared_ptr<md::TaskContext> const&,VKMapPurpose,std::unique_ptr<md::AnimationManager>,geo::linear_map<md::MapEngineSetting,long long,std::equal_to<md::MapEngineSetting>,std::allocator<std::pair<md::MapEngineSetting,long long>>,std::vector<std::pair<md::MapEngineSetting,long long>>> const&,unsigned long long,GEOApplicationAuditToken *)::$_2>,void ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E427CC90;
  a2[1] = v2;
  return result;
}

void std::__function::__func<md::MapEngine::MapEngine(float,float,float,BOOL,VKMapViewPurpose,std::shared_ptr<md::TaskContext> const&,VKMapPurpose,std::unique_ptr<md::AnimationManager>,geo::linear_map<md::MapEngineSetting,long long,std::equal_to<md::MapEngineSetting>,std::allocator<std::pair<md::MapEngineSetting,long long>>,std::vector<std::pair<md::MapEngineSetting,long long>>> const&,unsigned long long,GEOApplicationAuditToken *)::$_2,std::allocator<md::MapEngine::MapEngine(float,float,float,BOOL,VKMapViewPurpose,std::shared_ptr<md::TaskContext> const&,VKMapPurpose,std::unique_ptr<md::AnimationManager>,geo::linear_map<md::MapEngineSetting,long long,std::equal_to<md::MapEngineSetting>,std::allocator<std::pair<md::MapEngineSetting,long long>>,std::vector<std::pair<md::MapEngineSetting,long long>>> const&,unsigned long long,GEOApplicationAuditToken *)::$_2>,void ()(void)>::operator()(uint64_t a1)
{
  uint64_t v1;
  char v2;

  v1 = **(_QWORD **)(*(_QWORD *)(a1 + 8) + 120);
  if (v1)
  {
    v2 = 3;
    md::MapEngine::setNeedsTick(v1, &v2);
  }
}

void std::__shared_ptr_emplace<gdc::Camera>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DE298;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<gdc::Camera>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DE298;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<gdc::Camera>::__on_zero_shared(uint64_t result)
{
  if (*(_BYTE *)(result + 376))
    *(_BYTE *)(result + 376) = 0;
  if (*(_BYTE *)(result + 360))
    *(_BYTE *)(result + 360) = 0;
  return result;
}

void std::__shared_ptr_pointer<md::RunLoopController *,std::shared_ptr<md::RunLoopController>::__shared_ptr_default_delete<md::RunLoopController,md::RunLoopController>,std::allocator<md::RunLoopController>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_pointer<md::RunLoopController *,std::shared_ptr<md::RunLoopController>::__shared_ptr_default_delete<md::RunLoopController,md::RunLoopController>,std::allocator<md::RunLoopController>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    JUMPOUT(0x1A1AF4E00);
  return result;
}

void std::__shared_ptr_pointer<md::ConfigSettingProvider *,std::shared_ptr<md::ConfigSettingProvider>::__shared_ptr_default_delete<md::ConfigSettingProvider,md::ConfigSettingProvider>,std::allocator<md::ConfigSettingProvider>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_pointer<md::ConfigSettingProvider *,std::shared_ptr<md::ConfigSettingProvider>::__shared_ptr_default_delete<md::ConfigSettingProvider,md::ConfigSettingProvider>,std::allocator<md::ConfigSettingProvider>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
  {
    md::Monitorable<md::ConfigValue<GEOConfigKeyDouble,double>>::~Monitorable(result);
    JUMPOUT(0x1A1AF4E00);
  }
  return result;
}

void std::__shared_ptr_pointer<md::RenderLayerProviderWrapper *,std::shared_ptr<md::RenderLayerProviderWrapper>::__shared_ptr_default_delete<md::RenderLayerProviderWrapper,md::RenderLayerProviderWrapper>,std::allocator<md::RenderLayerProviderWrapper>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_pointer<md::RenderLayerProviderWrapper *,std::shared_ptr<md::RenderLayerProviderWrapper>::__shared_ptr_default_delete<md::RenderLayerProviderWrapper,md::RenderLayerProviderWrapper>,std::allocator<md::RenderLayerProviderWrapper>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 96))(result);
  return result;
}

uint64_t *md::RenderLayerProviderWrapper::resetAllResources(md::RenderLayerProviderWrapper *this)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t i;
  _QWORD *v6;
  uint64_t v7;
  unint64_t v8;
  void (***v9)(void);
  void (**v10)(void);
  _QWORD *v11;
  void *v12;
  uint64_t *result;
  _QWORD *v14;
  uint64_t v15;
  unint64_t v16;
  void (***v17)(void);
  void (**v18)(void);

  v2 = *((_QWORD *)this + 1);
  if (*(_QWORD *)(v2 + 24))
  {
    v3 = *(_QWORD **)(v2 + 16);
    if (v3)
    {
      do
      {
        v11 = (_QWORD *)*v3;
        v12 = (void *)v3[4];
        if (v12)
        {
          v3[5] = v12;
          operator delete(v12);
        }
        operator delete(v3);
        v3 = v11;
      }
      while (v11);
    }
    *(_QWORD *)(v2 + 16) = 0;
    v4 = *(_QWORD *)(v2 + 8);
    if (v4)
    {
      for (i = 0; i != v4; ++i)
        *(_QWORD *)(*(_QWORD *)v2 + 8 * i) = 0;
    }
    *(_QWORD *)(v2 + 24) = 0;
  }
  md::DaVinciGroundRenderResources::resetPools((md::DaVinciGroundRenderResources *)(v2 + 40));
  ggl::FragmentedPool<ggl::RenderItem>::pushAll(*(uint64_t **)(v2 + 3920));
  ggl::FragmentedPool<ggl::RenderItem>::pushAll(*(uint64_t **)(v2 + 3944));
  ggl::FragmentedPool<ggl::RenderItem>::pushAll(*(uint64_t **)(v2 + 3968));
  ggl::FragmentedPool<ggl::RenderItem>::pushAll(*(uint64_t **)(v2 + 3992));
  ggl::FragmentedPool<ggl::RenderItem>::pushAll(*(uint64_t **)(v2 + 4016));
  ggl::FragmentedPool<ggl::RenderItem>::pushAll(*(uint64_t **)(v2 + 4024));
  ggl::FragmentedPool<ggl::RenderItem>::pushAll(*(uint64_t **)(v2 + 4032));
  ggl::FragmentedPool<ggl::RenderItem>::pushAll(*(uint64_t **)(v2 + 4040));
  ggl::FragmentedPool<ggl::RenderItem>::pushAll(*(uint64_t **)(v2 + 4048));
  v6 = *(_QWORD **)(v2 + 2800);
  if (v6)
  {
    do
    {
      if (v6[1])
      {
        v8 = 0;
        v9 = (void (***)(void))(v6 + 2);
        do
        {
          v10 = *v9;
          v9 += 15;
          (*v10)();
          ++v8;
        }
        while (v8 < v6[1]);
      }
      v6[1] = 0;
      v6 = (_QWORD *)*v6;
    }
    while (v6);
    v7 = *(_QWORD *)(v2 + 2800);
  }
  else
  {
    v7 = 0;
  }
  *(_QWORD *)(v2 + 2808) = v7;
  result = ggl::FragmentedPool<ggl::RenderItem>::pushAll(*(uint64_t **)(v2 + 4176));
  v14 = *(_QWORD **)(v2 + 4200);
  if (v14)
  {
    do
    {
      if (v14[1])
      {
        v16 = 0;
        v17 = (void (***)(void))(v14 + 2);
        do
        {
          v18 = *v17;
          v17 += 15;
          (*v18)();
          ++v16;
          result = (uint64_t *)v17;
        }
        while (v16 < v14[1]);
      }
      v14[1] = 0;
      v14 = (_QWORD *)*v14;
    }
    while (v14);
    v15 = *(_QWORD *)(v2 + 4200);
  }
  else
  {
    v15 = 0;
  }
  *(_QWORD *)(v2 + 4208) = v15;
  *((_QWORD *)this + 5) = *((_QWORD *)this + 4);
  return result;
}

id md::RenderLayerProviderWrapper::sharedResources(id *this)
{
  return this[3];
}

void md::RenderLayerProviderWrapper::addCommandBuffer(uint64_t a1, unint64_t a2, unsigned int a3, uint64_t a4)
{
  uint64_t *v5;
  _QWORD *v6;
  _QWORD *v7;
  unint64_t v8;
  char *v9;
  char *v10;
  _QWORD *v11;
  char *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  _BYTE *v17;
  _QWORD *v18;
  char *v19;
  unint64_t v20;
  uint64_t v21;
  _OWORD *v22;
  char *v23;
  uint64_t v24;
  __int128 v25;
  uint64_t v26;
  __int128 v27;

  v5 = *(uint64_t **)(a1 + 8);
  *(_QWORD *)&v27 = a2;
  *((_QWORD *)&v27 + 1) = a3;
  v6 = std::__hash_table<std::__hash_value_type<std::tuple<unsigned long,md::SceneLayer>,std::vector<ggl::CommandBuffer *>>,std::__unordered_map_hasher<std::tuple<unsigned long,md::SceneLayer>,std::__hash_value_type<std::tuple<unsigned long,md::SceneLayer>,std::vector<ggl::CommandBuffer *>>,md::TupleHash,std::equal_to<std::tuple<unsigned long,md::SceneLayer>>,true>,std::__unordered_map_equal<std::tuple<unsigned long,md::SceneLayer>,std::__hash_value_type<std::tuple<unsigned long,md::SceneLayer>,std::vector<ggl::CommandBuffer *>>,std::equal_to<std::tuple<unsigned long,md::SceneLayer>>,md::TupleHash,true>,std::allocator<std::__hash_value_type<std::tuple<unsigned long,md::SceneLayer>,std::vector<ggl::CommandBuffer *>>>>::__emplace_unique_key_args<std::tuple<unsigned long,md::SceneLayer>,std::piecewise_construct_t const&,std::tuple<std::tuple<unsigned long,md::SceneLayer>&&>,std::tuple<>>(v5, a2, a3, &v27);
  v7 = v6;
  v9 = (char *)v6[5];
  v8 = v6[6];
  v10 = v9;
  if ((unint64_t)v9 >= v8)
  {
    v12 = (char *)v6[4];
    v13 = (v9 - v12) >> 3;
    v14 = v13 + 1;
    if ((unint64_t)(v13 + 1) >> 61)
      abort();
    v15 = v8 - (_QWORD)v12;
    if (v15 >> 2 > v14)
      v14 = v15 >> 2;
    if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF8)
      v16 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v16 = v14;
    if (v16)
    {
      if (v16 >> 61)
        std::__throw_bad_array_new_length[abi:nn180100]();
      v17 = operator new(8 * v16);
    }
    else
    {
      v17 = 0;
    }
    v18 = &v17[8 * v13];
    v19 = &v17[8 * v16];
    *v18 = a4;
    v11 = v18 + 1;
    if (v9 == v12)
    {
      v12 = v9;
    }
    else
    {
      v20 = v9 - v12 - 8;
      if (v20 < 0x58)
        goto LABEL_29;
      if ((unint64_t)(v12 - v17) < 0x20)
        goto LABEL_29;
      v21 = (v20 >> 3) + 1;
      v10 = &v9[-8 * (v21 & 0x3FFFFFFFFFFFFFFCLL)];
      v22 = &v17[8 * v13 - 16];
      v23 = v9 - 16;
      v24 = v21 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v25 = *(_OWORD *)v23;
        *(v22 - 1) = *((_OWORD *)v23 - 1);
        *v22 = v25;
        v22 -= 2;
        v23 -= 32;
        v24 -= 4;
      }
      while (v24);
      v18 -= v21 & 0x3FFFFFFFFFFFFFFCLL;
      if (v21 != (v21 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_29:
        do
        {
          v26 = *((_QWORD *)v10 - 1);
          v10 -= 8;
          *--v18 = v26;
        }
        while (v10 != v12);
        v12 = (char *)v7[4];
      }
    }
    v7[4] = v18;
    v7[5] = v11;
    v7[6] = v19;
    if (v12)
      operator delete(v12);
  }
  else
  {
    *(_QWORD *)v9 = a4;
    v11 = v9 + 8;
  }
  v7[5] = v11;
}

uint64_t md::RenderLayerProviderWrapper::getCommandBuffer(uint64_t a1, unint64_t a2, unsigned int a3, unint64_t a4)
{
  unsigned __int8 v5;
  uint64_t *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t *v11;
  _QWORD *v12;
  uint64_t v13;
  __int128 v15;

  v5 = a3;
  v8 = *(uint64_t **)(a1 + 8);
  v9 = a3;
  *(_QWORD *)&v15 = a2;
  *((_QWORD *)&v15 + 1) = a3;
  v10 = std::__hash_table<std::__hash_value_type<std::tuple<unsigned long,md::SceneLayer>,std::vector<ggl::CommandBuffer *>>,std::__unordered_map_hasher<std::tuple<unsigned long,md::SceneLayer>,std::__hash_value_type<std::tuple<unsigned long,md::SceneLayer>,std::vector<ggl::CommandBuffer *>>,md::TupleHash,std::equal_to<std::tuple<unsigned long,md::SceneLayer>>,true>,std::__unordered_map_equal<std::tuple<unsigned long,md::SceneLayer>,std::__hash_value_type<std::tuple<unsigned long,md::SceneLayer>,std::vector<ggl::CommandBuffer *>>,std::equal_to<std::tuple<unsigned long,md::SceneLayer>>,md::TupleHash,true>,std::allocator<std::__hash_value_type<std::tuple<unsigned long,md::SceneLayer>,std::vector<ggl::CommandBuffer *>>>>::__emplace_unique_key_args<std::tuple<unsigned long,md::SceneLayer>,std::piecewise_construct_t const&,std::tuple<std::tuple<unsigned long,md::SceneLayer>&&>,std::tuple<>>(v8, a2, a3, &v15);
  if (v10[5] == v10[4])
    return 0;
  v11 = *(uint64_t **)(a1 + 8);
  *(_QWORD *)&v15 = a2;
  *((_QWORD *)&v15 + 1) = v9;
  v12 = std::__hash_table<std::__hash_value_type<std::tuple<unsigned long,md::SceneLayer>,std::vector<ggl::CommandBuffer *>>,std::__unordered_map_hasher<std::tuple<unsigned long,md::SceneLayer>,std::__hash_value_type<std::tuple<unsigned long,md::SceneLayer>,std::vector<ggl::CommandBuffer *>>,md::TupleHash,std::equal_to<std::tuple<unsigned long,md::SceneLayer>>,true>,std::__unordered_map_equal<std::tuple<unsigned long,md::SceneLayer>,std::__hash_value_type<std::tuple<unsigned long,md::SceneLayer>,std::vector<ggl::CommandBuffer *>>,std::equal_to<std::tuple<unsigned long,md::SceneLayer>>,md::TupleHash,true>,std::allocator<std::__hash_value_type<std::tuple<unsigned long,md::SceneLayer>,std::vector<ggl::CommandBuffer *>>>>::__emplace_unique_key_args<std::tuple<unsigned long,md::SceneLayer>,std::piecewise_construct_t const&,std::tuple<std::tuple<unsigned long,md::SceneLayer>&&>,std::tuple<>>(v11, a2, v5, &v15);
  v13 = v12[4];
  if (a4 >= (v12[5] - v13) >> 3)
    abort();
  return *(_QWORD *)(v13 + 8 * a4);
}

uint64_t md::RenderLayerProviderWrapper::legacyRenderResources(md::RenderLayerProviderWrapper *this)
{
  return *((_QWORD *)this + 1) + 40;
}

uint64_t md::RenderLayerProviderWrapper::legacyFlyoverRenderResources(md::RenderLayerProviderWrapper *this)
{
  return *((_QWORD *)this + 1) + 2800;
}

uint64_t md::RenderLayerProviderWrapper::legacyCartographicTiledRenderResources(md::RenderLayerProviderWrapper *this)
{
  return *((_QWORD *)this + 1) + 4072;
}

__n128 md::RenderLayerProviderWrapper::quantizedShadowMatrix@<Q0>(md::RenderLayerProviderWrapper *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __n128 result;
  __int128 v7;

  v2 = *((_QWORD *)this + 1);
  v3 = *(_OWORD *)(v2 + 4304);
  *(_OWORD *)(a2 + 64) = *(_OWORD *)(v2 + 4288);
  *(_OWORD *)(a2 + 80) = v3;
  v4 = *(_OWORD *)(v2 + 4336);
  *(_OWORD *)(a2 + 96) = *(_OWORD *)(v2 + 4320);
  *(_OWORD *)(a2 + 112) = v4;
  v5 = *(_OWORD *)(v2 + 4240);
  *(_OWORD *)a2 = *(_OWORD *)(v2 + 4224);
  *(_OWORD *)(a2 + 16) = v5;
  result = *(__n128 *)(v2 + 4256);
  v7 = *(_OWORD *)(v2 + 4272);
  *(__n128 *)(a2 + 32) = result;
  *(_OWORD *)(a2 + 48) = v7;
  return result;
}

double md::RenderLayerProviderWrapper::setQuantizedShadowMatrix(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  double result;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(v2 + 4224) = *(_QWORD *)a2;
  *(_QWORD *)(v2 + 4232) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(v2 + 4240) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(v2 + 4248) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(v2 + 4256) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(v2 + 4264) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(v2 + 4272) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(v2 + 4280) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(v2 + 4288) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(v2 + 4296) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(v2 + 4304) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(v2 + 4312) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(v2 + 4320) = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(v2 + 4328) = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(v2 + 4336) = *(_QWORD *)(a2 + 112);
  result = *(double *)(a2 + 120);
  *(double *)(v2 + 4344) = result;
  return result;
}

uint64_t md::RenderLayerProviderWrapper::getAllCommandBuffers(md::RenderLayerProviderWrapper *this)
{
  return *((_QWORD *)this + 1);
}

uint64_t md::RenderLayerProviderWrapper::mapPassID(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v3;

  if (a2 == 9)
  {
    v3 = 10;
    if (a3 == 4)
      v3 = 12;
    if (*(_BYTE *)(a1 + 56))
      return 9;
    else
      return v3;
  }
  return a2;
}

void md::RenderLayerProviderWrapper::~RenderLayerProviderWrapper(md::RenderLayerProviderWrapper *this)
{
  void *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)this = off_1E42A34D8;
  v2 = (void *)*((_QWORD *)this + 4);
  if (v2)
  {
    *((_QWORD *)this + 5) = v2;
    operator delete(v2);
  }

  v3 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

{
  void *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)this = off_1E42A34D8;
  v2 = (void *)*((_QWORD *)this + 4);
  if (v2)
  {
    *((_QWORD *)this + 5) = v2;
    operator delete(v2);
  }

  v3 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__hash_table<std::__hash_value_type<std::tuple<unsigned long,md::SceneLayer>,std::vector<ggl::CommandBuffer *>>,std::__unordered_map_hasher<std::tuple<unsigned long,md::SceneLayer>,std::__hash_value_type<std::tuple<unsigned long,md::SceneLayer>,std::vector<ggl::CommandBuffer *>>,md::TupleHash,std::equal_to<std::tuple<unsigned long,md::SceneLayer>>,true>,std::__unordered_map_equal<std::tuple<unsigned long,md::SceneLayer>,std::__hash_value_type<std::tuple<unsigned long,md::SceneLayer>,std::vector<ggl::CommandBuffer *>>,std::equal_to<std::tuple<unsigned long,md::SceneLayer>>,md::TupleHash,true>,std::allocator<std::__hash_value_type<std::tuple<unsigned long,md::SceneLayer>,std::vector<ggl::CommandBuffer *>>>>::__emplace_unique_key_args<std::tuple<unsigned long,md::SceneLayer>,std::piecewise_construct_t const&,std::tuple<std::tuple<unsigned long,md::SceneLayer>&&>,std::tuple<>>(uint64_t *a1, unint64_t a2, unsigned __int8 a3, _OWORD *a4)
{
  unint64_t v4;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  void **v10;
  _QWORD *v11;
  unint64_t v13;
  uint64_t v15;
  _QWORD *v16;
  float v17;
  float v18;
  _BOOL8 v19;
  unint64_t v20;
  unint64_t v21;
  size_t prime;
  void *v23;
  void *v24;
  uint64_t v25;
  _QWORD *v26;
  size_t v27;
  size_t v28;
  size_t v29;
  _QWORD *i;
  size_t v31;
  uint64_t v32;
  unint64_t v33;
  uint8x8_t v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  size_t v38;
  uint64_t v39;
  _QWORD *v40;
  unint64_t v41;
  void *v43;

  v7 = a3 ^ a2;
  v8 = a1[1];
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v4 = a3 ^ a2;
      if (v7 >= v8)
        v4 = v7 % v8;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
    v10 = *(void ***)(*a1 + 8 * v4);
    if (v10)
    {
      v11 = *v10;
      if (*v10)
      {
        if (v9.u32[0] < 2uLL)
        {
          while (1)
          {
            v15 = v11[1];
            if (v15 == v7)
            {
              if (v11[2] == a2 && *((unsigned __int8 *)v11 + 24) == a3)
                return v11;
            }
            else if ((v15 & (v8 - 1)) != v4)
            {
              goto LABEL_28;
            }
            v11 = (_QWORD *)*v11;
            if (!v11)
              goto LABEL_28;
          }
        }
        do
        {
          v13 = v11[1];
          if (v13 == v7)
          {
            if (v11[2] == a2 && *((unsigned __int8 *)v11 + 24) == a3)
              return v11;
          }
          else
          {
            if (v13 >= v8)
              v13 %= v8;
            if (v13 != v4)
              break;
          }
          v11 = (_QWORD *)*v11;
        }
        while (v11);
      }
    }
  }
LABEL_28:
  v16 = a1 + 2;
  v11 = operator new(0x38uLL);
  *v11 = 0;
  v11[1] = v7;
  *((_OWORD *)v11 + 1) = *a4;
  v11[5] = 0;
  v11[6] = 0;
  v11[4] = 0;
  v17 = (float)(unint64_t)(a1[3] + 1);
  v18 = *((float *)a1 + 8);
  if (!v8 || (float)(v18 * (float)v8) < v17)
  {
    v19 = 1;
    if (v8 >= 3)
      v19 = (v8 & (v8 - 1)) != 0;
    v20 = v19 | (2 * v8);
    v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21)
      prime = v21;
    else
      prime = v20;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v8 = a1[1];
    }
    if (prime <= v8)
    {
      if (prime >= v8)
        goto LABEL_65;
      v33 = vcvtps_u32_f32((float)(unint64_t)a1[3] / *((float *)a1 + 8));
      if (v8 < 3 || (v34 = (uint8x8_t)vcnt_s8((int8x8_t)v8), v34.i16[0] = vaddlv_u8(v34), v34.u32[0] > 1uLL))
      {
        v33 = std::__next_prime(v33);
      }
      else
      {
        v35 = 1 << -(char)__clz(v33 - 1);
        if (v33 >= 2)
          v33 = v35;
      }
      if (prime <= v33)
        prime = v33;
      if (prime >= v8)
      {
        v8 = a1[1];
LABEL_65:
        if ((v8 & (v8 - 1)) != 0)
        {
          if (v7 >= v8)
            v4 = v7 % v8;
          else
            v4 = v7;
        }
        else
        {
          v4 = (v8 - 1) & v7;
        }
        goto LABEL_78;
      }
      if (!prime)
      {
        v43 = (void *)*a1;
        *a1 = 0;
        if (v43)
          operator delete(v43);
        v8 = 0;
        a1[1] = 0;
        goto LABEL_65;
      }
    }
    if (prime >> 61)
      std::__throw_bad_array_new_length[abi:nn180100]();
    v23 = operator new(8 * prime);
    v24 = (void *)*a1;
    *a1 = (uint64_t)v23;
    if (v24)
      operator delete(v24);
    v25 = 0;
    a1[1] = prime;
    do
      *(_QWORD *)(*a1 + 8 * v25++) = 0;
    while (prime != v25);
    v26 = (_QWORD *)*v16;
    if (!*v16)
    {
LABEL_64:
      v8 = prime;
      goto LABEL_65;
    }
    v27 = v26[1];
    v28 = prime - 1;
    if ((prime & (prime - 1)) == 0)
    {
      v29 = v27 & v28;
      *(_QWORD *)(*a1 + 8 * v29) = v16;
      for (i = (_QWORD *)*v26; *v26; i = (_QWORD *)*v26)
      {
        v31 = i[1] & v28;
        if (v31 == v29)
        {
          v26 = i;
        }
        else if (*(_QWORD *)(*a1 + 8 * v31))
        {
          *v26 = *i;
          v32 = 8 * v31;
          *i = **(_QWORD **)(*a1 + v32);
          **(_QWORD **)(*a1 + v32) = i;
        }
        else
        {
          *(_QWORD *)(*a1 + 8 * v31) = v26;
          v26 = i;
          v29 = v31;
        }
      }
      goto LABEL_64;
    }
    if (v27 >= prime)
      v27 %= prime;
    *(_QWORD *)(*a1 + 8 * v27) = v16;
    v36 = (_QWORD *)*v26;
    if (!*v26)
      goto LABEL_64;
    while (1)
    {
      v38 = v36[1];
      if (v38 >= prime)
        v38 %= prime;
      if (v38 != v27)
      {
        if (!*(_QWORD *)(*a1 + 8 * v38))
        {
          *(_QWORD *)(*a1 + 8 * v38) = v26;
          goto LABEL_69;
        }
        *v26 = *v36;
        v37 = 8 * v38;
        *v36 = **(_QWORD **)(*a1 + v37);
        **(_QWORD **)(*a1 + v37) = v36;
        v36 = v26;
      }
      v38 = v27;
LABEL_69:
      v26 = v36;
      v36 = (_QWORD *)*v36;
      v27 = v38;
      if (!v36)
        goto LABEL_64;
    }
  }
LABEL_78:
  v39 = *a1;
  v40 = *(_QWORD **)(*a1 + 8 * v4);
  if (v40)
  {
    *v11 = *v40;
LABEL_86:
    *v40 = v11;
    goto LABEL_87;
  }
  *v11 = *v16;
  *v16 = v11;
  *(_QWORD *)(v39 + 8 * v4) = v16;
  if (*v11)
  {
    v41 = *(_QWORD *)(*v11 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v41 >= v8)
        v41 %= v8;
    }
    else
    {
      v41 &= v8 - 1;
    }
    v40 = (_QWORD *)(*a1 + 8 * v41);
    goto LABEL_86;
  }
LABEL_87:
  ++a1[3];
  return v11;
}

void sub_19FAB59C0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::tuple<unsigned long,md::SceneLayer>,std::vector<ggl::CommandBuffer *>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::tuple<unsigned long,md::SceneLayer>,std::vector<ggl::CommandBuffer *>>,void *>>>>::~unique_ptr[abi:nn180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::unique_ptr<std::__hash_node<std::__hash_value_type<std::tuple<unsigned long,md::SceneLayer>,std::vector<ggl::CommandBuffer *>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::tuple<unsigned long,md::SceneLayer>,std::vector<ggl::CommandBuffer *>>,void *>>>>::~unique_ptr[abi:nn180100](uint64_t a1)
{
  _QWORD *v2;
  void *v3;

  v2 = *(_QWORD **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
    {
      v3 = (void *)v2[4];
      if (v3)
      {
        v2[5] = v3;
        operator delete(v3);
      }
    }
    operator delete(v2);
  }
  return a1;
}

void std::__shared_ptr_pointer<md::MaterialResourceStore *,std::shared_ptr<md::MaterialResourceStore>::__shared_ptr_default_delete<md::MaterialResourceStore,md::MaterialResourceStore>,std::allocator<md::MaterialResourceStore>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_pointer<md::MaterialResourceStore *,std::shared_ptr<md::MaterialResourceStore>::__shared_ptr_default_delete<md::MaterialResourceStore,md::MaterialResourceStore>,std::allocator<md::MaterialResourceStore>>::__on_zero_shared(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = *(_QWORD *)(result + 24);
  if (v1)
  {
    md::data_array_cache<md::ls::ColorData,geo::handle<md::ls::ColorData>,md::MaterialKey,md::ls::ColorData,md::MaterialKeyHasher>::~data_array_cache(v1 + 904);
    md::data_array_cache<md::ls::ZIndex,geo::handle<md::ls::ZIndex>,md::MaterialKey,md::ls::ZIndex,md::MaterialKeyHasher>::~data_array_cache(v1 + 608);
    md::data_array_cache<md::ls::MaterialVisibilityOptions,geo::handle<md::ls::MaterialVisibilityOptions>,md::MaterialKey,md::ls::MaterialVisibilityOptions,md::MaterialKeyHasher>::~data_array_cache(v1 + 312);
    md::data_array_cache<md::MaterialIDStorage,geo::handle<md::MaterialIDStorage>,md::MaterialKey,std::shared_ptr<gms::Material<ggl::Texture2D>>,md::MaterialKeyHasher>::~data_array_cache(v1 + 16);
    v2 = *(std::__shared_weak_count **)(v1 + 8);
    if (v2)
    {
      p_shared_owners = (unint64_t *)&v2->__shared_owners_;
      do
        v4 = __ldaxr(p_shared_owners);
      while (__stlxr(v4 - 1, p_shared_owners));
      if (!v4)
      {
        ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
        std::__shared_weak_count::__release_weak(v2);
      }
    }
    JUMPOUT(0x1A1AF4E00);
  }
  return result;
}

void std::__shared_ptr_pointer<md::VKMRenderResourcesStore *,std::shared_ptr<md::VKMRenderResourcesStore>::__shared_ptr_default_delete<md::VKMRenderResourcesStore,md::VKMRenderResourcesStore>,std::allocator<md::VKMRenderResourcesStore>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

md::VKMRenderResourcesStore *std::__shared_ptr_pointer<md::VKMRenderResourcesStore *,std::shared_ptr<md::VKMRenderResourcesStore>::__shared_ptr_default_delete<md::VKMRenderResourcesStore,md::VKMRenderResourcesStore>,std::allocator<md::VKMRenderResourcesStore>>::__on_zero_shared(uint64_t a1)
{
  md::VKMRenderResourcesStore *result;

  result = *(md::VKMRenderResourcesStore **)(a1 + 24);
  if (result)
  {
    md::VKMRenderResourcesStore::~VKMRenderResourcesStore(result);
    JUMPOUT(0x1A1AF4E00);
  }
  return result;
}

void std::__shared_ptr_emplace<md::RenderLayerResources>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DC548;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<md::RenderLayerResources>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DC548;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_emplace<md::RenderLayerResources>::__on_zero_shared(_QWORD *a1)
{
  _QWORD *v2;
  void *v3;
  _QWORD *v4;
  void *v5;

  md::CartographicTiledRenderResources::~CartographicTiledRenderResources((md::CartographicTiledRenderResources *)(a1 + 512));
  md::FlyoverRenderResources::~FlyoverRenderResources((md::FlyoverRenderResources *)(a1 + 353));
  md::DaVinciGroundRenderResources::~DaVinciGroundRenderResources((md::DaVinciGroundRenderResources *)(a1 + 8));
  v2 = (_QWORD *)a1[5];
  if (v2)
  {
    do
    {
      v4 = (_QWORD *)*v2;
      v5 = (void *)v2[4];
      if (v5)
      {
        v2[5] = v5;
        operator delete(v5);
      }
      operator delete(v2);
      v2 = v4;
    }
    while (v4);
  }
  v3 = (void *)a1[3];
  a1[3] = 0;
  if (v3)
    operator delete(v3);
}

void md::CartographicTiledRenderResources::~CartographicTiledRenderResources(md::CartographicTiledRenderResources *this)
{
  _QWORD *v2;
  unint64_t v3;
  void (***v4)(void);
  void (**v5)(void);
  _QWORD **v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  uint64_t v22;

  v2 = (_QWORD *)*((_QWORD *)this + 16);
  do
  {
    if (v2[1])
    {
      v3 = 0;
      v4 = (void (***)(void))(v2 + 2);
      do
      {
        v5 = *v4;
        v4 += 15;
        (*v5)();
        ++v3;
      }
      while (v3 < v2[1]);
    }
    v2[1] = 0;
    v2 = (_QWORD *)*v2;
  }
  while (v2);
  v6 = (_QWORD **)*((_QWORD *)this + 16);
  *((_QWORD *)this + 17) = v6;
  v7 = *v6;
  *v6 = 0;
  if (v7)
  {
    do
    {
      v8 = (_QWORD *)*v7;
      free(v7);
      v7 = v8;
    }
    while (v8);
    v6 = (_QWORD **)*((_QWORD *)this + 16);
  }
  free(v6);
  v9 = *((_QWORD *)this + 13);
  *((_QWORD *)this + 13) = 0;
  if (v9)
  {
    v10 = ggl::FragmentedPool<ggl::BuildingFlat::CompressedMeshPipelineSetup>::~FragmentedPool(v9);
    MEMORY[0x1A1AF4E00](v10, 0x10A0C40D234DDC7);
  }
  v11 = (void *)*((_QWORD *)this + 10);
  if (v11)
  {
    *((_QWORD *)this + 11) = v11;
    operator delete(v11);
  }
  v12 = (void *)*((_QWORD *)this + 7);
  if (v12)
  {
    *((_QWORD *)this + 8) = v12;
    operator delete(v12);
  }
  v13 = (std::__shared_weak_count *)*((_QWORD *)this + 6);
  if (!v13)
    goto LABEL_20;
  p_shared_owners = (unint64_t *)&v13->__shared_owners_;
  do
    v15 = __ldaxr(p_shared_owners);
  while (__stlxr(v15 - 1, p_shared_owners));
  if (!v15)
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
    v16 = (std::__shared_weak_count *)*((_QWORD *)this + 4);
    if (!v16)
      goto LABEL_26;
  }
  else
  {
LABEL_20:
    v16 = (std::__shared_weak_count *)*((_QWORD *)this + 4);
    if (!v16)
      goto LABEL_26;
  }
  v17 = (unint64_t *)&v16->__shared_owners_;
  do
    v18 = __ldaxr(v17);
  while (__stlxr(v18 - 1, v17));
  if (!v18)
  {
    ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
    std::__shared_weak_count::__release_weak(v16);
  }
LABEL_26:
  v19 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v19)
  {
    v20 = (unint64_t *)&v19->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  v22 = *(_QWORD *)this;
  *(_QWORD *)this = 0;
  if (v22)
    (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
}

void md::MapEngine::runUpdatePhase(md::MapEngine *this, double a2, char a3)
{
  char *v4;
  unint64_t *v5;
  unint64_t v6;
  NSObject *v7;
  NSObject *v8;
  os_signpost_id_t v9;
  NSObject *v10;
  _BOOL4 v11;
  uint8_t *v12;
  NSObject *v13;
  _BOOL4 v14;
  NSObject *v15;
  uint64_t v16;
  uint8_t *v17;
  int v18;
  int v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  __int128 v33;
  char v34;
  uint64_t v35;
  unint64_t v36;
  md::LayoutContext *v37;
  uint64_t *v38;
  int8x8_t v39;
  uint8x8_t v40;
  unint64_t v41;
  uint64_t v42;
  float v43;
  uint64_t v44;
  _QWORD *v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  NSObject *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unsigned __int8 *v55;
  _BOOL4 v56;
  unint64_t v57;
  _QWORD *v58;
  float v59;
  _QWORD *v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  int v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  double v70;
  double v71;
  double v72;
  double v73;
  double v74;
  double v75;
  double v76;
  double v77;
  double v78;
  uint64_t v79;
  char v80;
  unsigned int v81;
  char *v82;
  char v83;
  __int128 v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  int v92;
  int v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  char v106;
  __int128 v107;
  __int128 v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  __int128 v114;
  uint64_t v115;
  int v116;
  int v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  int v125;
  int v126;
  void *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  int v133;
  int v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  _OWORD *v142;
  _OWORD *v143;
  __int128 v144;
  __int128 v145;
  __int128 v146;
  __int128 v147;
  int v148;
  uint64_t v149;
  char v150;
  __int128 v151;
  __int128 v152;
  int v153;
  char v154;
  id WeakRetained;
  BOOL v156;
  id v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  __int128 v161;
  __int128 v162;
  __int128 v163;
  __int128 v164;
  uint64_t v165;
  __int128 v166;
  int v167;
  int v168;
  __int128 v169;
  __int128 v170;
  __int128 v171;
  __int128 v172;
  __int128 v173;
  __int128 v174;
  __int128 v175;
  __int128 v176;
  uint64_t v177;
  __int128 v178;
  __int128 v179;
  __int128 v180;
  uint64_t v181;
  char v182;
  __int128 v183;
  __int128 v184;
  __int128 v185;
  __int128 v186;
  uint64_t v187;
  __int128 v188;
  uint64_t v189;
  uint64_t v190;
  int v191;
  char v192;
  int v193;
  char v194;
  NSObject *v195;
  NSObject *v196;
  os_signpost_id_t v197;
  _QWORD *v198;
  uint64_t v199;
  _QWORD *v200;
  uint64_t v201;
  uint64_t v202;
  _QWORD *v203;
  uint64_t v204;
  uint8_t *v205;
  uint64_t v206;
  uint64_t v207;
  BOOL v208;
  int v209;
  int v210;
  long double v211;
  long double v212;
  float64x2_t v213;
  char v219;
  uint64_t v220;
  uint64_t v221;
  __int128 *v222;
  _OWORD *v223;
  __int128 v224;
  __int128 v225;
  __int128 v226;
  __int128 v227;
  __int128 v228;
  __int128 v229;
  __int128 v230;
  __int128 v231;
  __int128 v232;
  int v233;
  __int128 v234;
  __int128 v235;
  __int128 v236;
  __int128 v237;
  __int128 v238;
  __int128 v239;
  __int128 v240;
  __int128 v241;
  __int128 v242;
  __int128 v243;
  __int128 v244;
  __int128 v245;
  __int128 v246;
  __int128 v247;
  __int128 v248;
  __int128 v249;
  __int128 v250;
  double v251;
  double v252;
  float v253;
  double v254;
  double v255;
  double v256;
  double v257;
  double v258;
  double v259;
  float v260;
  float v261;
  double v262;
  float v263;
  double v264;
  double v265;
  float v266;
  float v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  __int128 v272;
  __int128 v273;
  __int128 v274;
  __int128 v275;
  __int128 v276;
  __int128 v277;
  __int128 v278;
  __int128 v279;
  __int128 v280;
  __int128 v281;
  __int128 v282;
  __int128 v283;
  __int128 v284;
  __int128 v285;
  __int128 v286;
  __int128 v287;
  __int128 v288;
  __int128 v289;
  __int128 v290;
  __int128 v291;
  __int128 v292;
  __int128 v293;
  uint64_t v294;
  uint64_t v295;
  __int128 v296;
  __int128 v297;
  uint64_t v298;
  uint64_t v299;
  __int128 v300;
  __int128 v301;
  uint64_t v302;
  uint64_t v303;
  __int128 v304;
  __int128 v305;
  __int128 v306;
  __int128 v307;
  float v308;
  __int128 v309;
  __int128 v310;
  void *context;
  uint64_t v312;
  __int128 v313;
  unint64_t v314;
  uint64_t v315;
  int v316;
  float v317;
  float64_t v320;
  __int128 v321;
  int v322;
  __int128 v323;
  __int128 v324;
  __int128 v325;
  uint64_t v326;
  __int128 v327;
  int v328;
  _BYTE v329[7];
  _BYTE v330[24];
  _BYTE v331[7];
  __int16 v332;
  __int16 v333;
  char v334;
  uint64_t v335;
  uint64_t v336;
  _QWORD v337[3];
  _QWORD *v338;
  _QWORD v339[3];
  _QWORD *v340;
  _QWORD v341[3];
  _QWORD *v342;
  _QWORD v343[3];
  _QWORD *v344;
  _BYTE buf[32];
  __int128 v346;
  uint64_t v347;
  uint8_t v348[16];
  __int128 v349;
  __int128 v350;
  uint64_t v351;
  uint64_t v352;

  v352 = *MEMORY[0x1E0C80C00];
  v4 = (char *)this + 4360;
  v5 = (unint64_t *)((char *)this + 1392);
  do
    v6 = __ldaxr(v5);
  while (__stlxr(0, v5));
  if (GEOGetVectorKitPerformanceLog_onceToken != -1)
    dispatch_once(&GEOGetVectorKitPerformanceLog_onceToken, &__block_literal_global_13_11780);
  v7 = (id)GEOGetVectorKitPerformanceLog_log;
  v8 = v7;
  v9 = *((_QWORD *)this + 152);
  if (v9 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v7))
  {
    if (GEOGetVectorKitPerformanceLog_onceToken != -1)
      dispatch_once(&GEOGetVectorKitPerformanceLog_onceToken, &__block_literal_global_13_11780);
    v10 = (id)GEOGetVectorKitPerformanceLog_log;
    v11 = os_signpost_enabled(v10);

    if (v11)
    {
      stringForLayoutReasonsMask(v348, v6);
      if ((SBYTE7(v349) & 0x80u) == 0)
        v12 = v348;
      else
        v12 = *(uint8_t **)v348;
    }
    else
    {
      memset(v348, 0, sizeof(v348));
      v12 = v348;
      *(_QWORD *)&v349 = 0;
    }
    *(_DWORD *)buf = 136315138;
    *(_QWORD *)&buf[4] = v12;
    _os_signpost_emit_with_name_impl(&dword_19F029000, v8, OS_SIGNPOST_INTERVAL_BEGIN, v9, "LayoutScene", "LayoutReasons:%s", buf, 0xCu);
    if (SBYTE7(v349) < 0)
      operator delete(*(void **)v348);
  }

  if (*v4)
  {
    if (GEOGetVectorKitVKDefaultLog_onceToken != -1)
      dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_4_11772);
    v13 = (id)GEOGetVectorKitVKDefaultLog_log;
    v14 = os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG);

    if (v14)
    {
      if (GEOGetVectorKitVKDefaultLog_onceToken != -1)
        dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_4_11772);
      v15 = (id)GEOGetVectorKitVKDefaultLog_log;
      if (os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG))
      {
        v16 = *((_QWORD *)this + 175);
        stringForLayoutReasonsMask(v348, v6);
        v17 = (SBYTE7(v349) & 0x80u) == 0 ? v348 : *(uint8_t **)v348;
        *(_DWORD *)buf = 134218242;
        *(_QWORD *)&buf[4] = v16;
        *(_WORD *)&buf[12] = 2080;
        *(_QWORD *)&buf[14] = v17;
        _os_log_impl(&dword_19F029000, v15, OS_LOG_TYPE_DEBUG, "LayoutNumber:%llu LayoutReasons:%s", buf, 0x16u);
        if (SBYTE7(v349) < 0)
          operator delete(*(void **)v348);
      }

    }
  }
  else
  {
    v18 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 542) + 56))(*((_QWORD *)this + 542));
    v19 = md::MapEngine::logLayoutReasonsHistory(this, 0x3CuLL) | v18 ^ 1;
    if (*((_QWORD *)this + 150))
      v19 = 0;
    v20 = *((_QWORD *)this + 540);
    v21 = (char *)this + 24 * v20;
    *((_QWORD *)v21 + 176) = *((_QWORD *)this + 175);
    *((double *)v21 + 177) = a2;
    *((_QWORD *)v21 + 178) = v6;
    v22 = v20 + 1;
    v23 = ((unint64_t)(v20 + 1) * (unsigned __int128)0xECF56BE69C8FDE3uLL) >> 64;
    v24 = v22 - 121 * ((v23 + ((unint64_t)(v22 - v23) >> 1)) >> 6);
    *((_QWORD *)this + 540) = v24;
    if (*((_QWORD *)this + 539) == v24)
    {
      if (v24 == 120)
        v25 = 0;
      else
        v25 = v24 + 1;
      *((_QWORD *)this + 539) = v25;
    }
    if (v19)
      (*(void (**)(_QWORD, _QWORD, double))(**((_QWORD **)this + 542) + 24))(*((_QWORD *)this + 542), 0, 1.0);
  }
  ++*((_QWORD *)this + 175);
  v26 = *(_QWORD *)(*((_QWORD *)this + 1) + 8);
  v343[0] = &off_1E42D4A80;
  v343[1] = this;
  v344 = v343;
  geo::TaskQueue::barrierSync(v26, v343);
  v27 = v344;
  if (v344 == v343)
  {
    v28 = 4;
    v27 = v343;
  }
  else
  {
    if (!v344)
      goto LABEL_43;
    v28 = 5;
  }
  (*(void (**)(void))(*v27 + 8 * v28))();
LABEL_43:
  context = (void *)MEMORY[0x1A1AF555C]();
  atomic_store(0, (unsigned __int8 *)this + 1179);
  if (!*((_BYTE *)this + 96) && !*((_BYTE *)this + 97))
  {
    if ((v6 & 0x180A) == 0)
      goto LABEL_47;
    v50 = *((_QWORD *)this + 140);
    if (*(_BYTE *)(v50 + 104))
    {
      if (GEOGetVectorKitVKDefaultLog_onceToken != -1)
        dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_4_11772);
      v51 = (id)GEOGetVectorKitVKDefaultLog_log;
      if (os_log_type_enabled(v51, OS_LOG_TYPE_INFO))
      {
        if (!*(_BYTE *)(v50 + 104))
          goto LABEL_243;
        v52 = *(_QWORD *)(v50 + 96);
        *(_DWORD *)v348 = 134217984;
        *(_QWORD *)&v348[4] = v52;
        _os_log_impl(&dword_19F029000, v51, OS_LOG_TYPE_INFO, "[VLR] Apply _uponResetFrequency as logic frequency: %zu", v348, 0xCu);
      }

      if (*(_BYTE *)(v50 + 104))
      {
        *(_QWORD *)(v50 + 112) = *(_QWORD *)(v50 + 96);
        *(_BYTE *)(v50 + 104) = 0;
        goto LABEL_45;
      }
LABEL_243:
      std::__throw_bad_optional_access[abi:nn180100]();
      goto LABEL_244;
    }
  }
LABEL_45:
  md::LogicManager::resetFrequencyCounter(*((md::LogicManager **)this + 140));
  if (*((_BYTE *)this + 97))
    *((_BYTE *)this + 97) = 0;
LABEL_47:
  (*(void (**)(_QWORD, double))(**((_QWORD **)this + 13) + 16))(*((_QWORD *)this + 13), a2);
  md::MapEngine::updateForConfigurationAndMode(this, a2);
  v4[184] = 1;
  v4[185] = v4[186];
  v347 = 0;
  v346 = 0uLL;
  v29 = *((_OWORD *)this + 58);
  v30 = *((_OWORD *)this + 59);
  v31 = *((_OWORD *)this + 60);
  v351 = *((_QWORD *)this + 122);
  v349 = v30;
  v350 = v31;
  *(_OWORD *)v348 = v29;
  v32 = *((_QWORD *)this + 123);
  v33 = *((_OWORD *)this + 62);
  LODWORD(v30) = *((_DWORD *)this + 252);
  v34 = *((_BYTE *)this + 1012);
  v334 = *((_BYTE *)this + 1015);
  v333 = *(_WORD *)((char *)this + 1013);
  v35 = **(_QWORD **)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 109) + 24) + 16) + 136);
  v36 = atomic_load(*((unint64_t **)this + 153));
  v37 = (md::LayoutContext *)*((_QWORD *)this + 135);
  v38 = (uint64_t *)*((_QWORD *)v37 + 1);
  v39 = (int8x8_t)v38[1];
  v316 = v30;
  v314 = v36;
  v315 = v35;
  v313 = v33;
  v312 = v32;
  if (!*(_QWORD *)&v39)
  {
    v43 = 0.0;
LABEL_51:
    v317 = v43;
    goto LABEL_118;
  }
  v40 = (uint8x8_t)vcnt_s8(v39);
  v40.i16[0] = vaddlv_u8(v40);
  v41 = v40.u32[0];
  if (v40.u32[0] > 1uLL)
  {
    v317 = 0.0;
    v42 = 0x1AF456233693CD46;
    if (*(_QWORD *)&v39 <= 0x1AF456233693CD46uLL)
      v42 = 0x1AF456233693CD46uLL % *(_QWORD *)&v39;
  }
  else
  {
    v317 = 0.0;
    v42 = (*(_QWORD *)&v39 - 1) & 0x1AF456233693CD46;
  }
  v44 = *v38;
  v45 = *(_QWORD **)(*v38 + 8 * v42);
  if (!v45)
    goto LABEL_118;
  v46 = (_QWORD *)*v45;
  if (!*v45)
    goto LABEL_118;
  v47 = *(_QWORD *)&v39 - 1;
  if (v40.u32[0] < 2uLL)
  {
    while (1)
    {
      v48 = v46[1];
      if (v48 == 0x1AF456233693CD46)
      {
        if (v46[2] == 0x1AF456233693CD46)
          goto LABEL_79;
      }
      else if ((v48 & v47) != v42)
      {
        goto LABEL_118;
      }
      v46 = (_QWORD *)*v46;
      if (!v46)
        goto LABEL_118;
    }
  }
  while (1)
  {
    v49 = v46[1];
    if (v49 == 0x1AF456233693CD46)
      break;
    if (v49 >= *(_QWORD *)&v39)
      v49 %= *(_QWORD *)&v39;
    if (v49 != v42)
      goto LABEL_118;
LABEL_64:
    v46 = (_QWORD *)*v46;
    if (!v46)
      goto LABEL_118;
  }
  if (v46[2] != 0x1AF456233693CD46)
    goto LABEL_64;
LABEL_79:
  v53 = v46[5];
  if (*(_QWORD *)(v53 + 8) == 0x1AF456233693CD46)
  {
    v54 = *(_QWORD *)(v53 + 32);
    if (v54)
    {
      v55 = (unsigned __int8 *)*((_QWORD *)v37 + 9);
      if (v55)
        v56 = *v55 != 0;
      else
        v56 = 0;
      if (v40.u32[0] > 1uLL)
      {
        v57 = 0xE42D19AFCA302E68;
        if (*(_QWORD *)&v39 <= 0xE42D19AFCA302E68)
          v57 = 0xE42D19AFCA302E68 % *(_QWORD *)&v39;
      }
      else
      {
        v57 = v47 & 0xE42D19AFCA302E68;
      }
      v58 = *(_QWORD **)(v44 + 8 * v57);
      v59 = 0.0;
      if (v58)
      {
        v60 = (_QWORD *)*v58;
        if (v60)
        {
          if (v41 < 2)
          {
            while (1)
            {
              v61 = v60[1];
              if (v61 == 0xE42D19AFCA302E68)
              {
                if (v60[2] == 0xE42D19AFCA302E68)
                  goto LABEL_104;
              }
              else if ((v61 & v47) != v57)
              {
                goto LABEL_107;
              }
              v60 = (_QWORD *)*v60;
              if (!v60)
                goto LABEL_107;
            }
          }
          do
          {
            v62 = v60[1];
            if (v62 == 0xE42D19AFCA302E68)
            {
              if (v60[2] == 0xE42D19AFCA302E68)
              {
LABEL_104:
                v63 = v60[5];
                if (*(_QWORD *)(v63 + 8) == 0xE42D19AFCA302E68)
                {
                  v64 = *(_QWORD *)(v63 + 32);
                  if (v64)
                    v59 = *(float *)(v64 + 100);
                }
                break;
              }
            }
            else
            {
              if (v62 >= *(_QWORD *)&v39)
                v62 %= *(_QWORD *)&v39;
              if (v62 != v57)
                break;
            }
            v60 = (_QWORD *)*v60;
          }
          while (v60);
        }
      }
LABEL_107:
      v308 = v59;
      md::LayoutContext::frameState(v37);
      v66 = *(unsigned __int8 *)(v54 + 3784);
      v67 = 5544;
      v68 = 5536;
      if (v66 == 1)
        v68 = 5512;
      v69 = 5552;
      if (v66 == 1)
        v69 = 5528;
      v70 = *(double *)(v54 + v69);
      v71 = *(double *)(v54 + v68);
      if (v66 == 1)
        v67 = 5520;
      v72 = *(double *)(v54 + v67);
      v73 = *(double *)(v54 + 5208);
      v74 = *(double *)(v54 + 5216);
      v75 = v71 - *(double *)(v54 + 4288);
      v76 = v72 - *(double *)(v54 + 4296);
      v77 = v70 - *(double *)(v54 + 4304);
      v78 = v56 ? sqrt(v75 * v75 + v76 * v76 + v77 * v77) : v75 * v73 + v76 * v74 + v77 * *(double *)(v54 + 5224);
      v317 = 0.0;
      if (v78 >= *(double *)(v54 + 4760) && v78 <= *(double *)(v54 + 4768))
      {
        v251 = *(double *)(v54 + 5240) * v78;
        if (*(_BYTE *)(v54 + 3784))
        {
          v252 = *(double *)(v54 + 5224);
          if (*(_BYTE *)(v65 + 128) == 2)
          {
            v253 = log2(v251);
            v254 = *(double *)(v54 + 5576) + (float)(v308 - v253);
            v255 = sqrt(v71 * v71 + v72 * v72 + v70 * v70);
            if (v255 <= 0.001)
            {
              v257 = *(double *)(v54 + 5160);
              v258 = *(double *)(v54 + 5168);
              v259 = *(double *)(v54 + 5176);
            }
            else
            {
              v256 = 1.0 / v255;
              v257 = 1.0 / v255 * v71;
              v258 = v256 * v72;
              v259 = v256 * v70;
            }
            v260 = v254;
          }
          else
          {
            v263 = log2(v251 * 0.0000000249532021);
            v264 = sqrt(v71 * v71 + v72 * v72 + v70 * v70);
            if (v264 <= 0.001)
            {
              v257 = *(double *)(v54 + 5160);
              v258 = *(double *)(v54 + 5168);
              v259 = *(double *)(v54 + 5176);
            }
            else
            {
              v265 = 1.0 / v264;
              v257 = 1.0 / v264 * v71;
              v258 = v265 * v72;
              v259 = v265 * v70;
            }
            v260 = v308 - v263;
          }
          v262 = v257 * v73 + v258 * v74 + v259 * v252;
        }
        else
        {
          v261 = log2(v251);
          v260 = v308 - v261;
          v262 = v77 / sqrt(v75 * v75 + v76 * v76 + v77 * v77);
        }
        if (!v56)
        {
          v266 = v262 + 1.0;
          v267 = fminf(fmaxf(v266, 0.0), 1.0);
          if (v267 > 0.8)
            v260 = fmaxf(log2f(fmaxf(1.0 - v267, 0.01)) + v260, 0.0);
        }
        v43 = fmaxf(v260, 0.0);
        goto LABEL_51;
      }
    }
  }
LABEL_118:
  v79 = *((_QWORD *)this + 149);
  if (v79)
    v80 = *(_BYTE *)(v79 + 225);
  else
    v80 = 0;
  v81 = atomic_load((unsigned int *)this + 228);
  v82 = (char *)*((_QWORD *)this + 133);
  v83 = *v82;
  *(_DWORD *)v331 = *(_DWORD *)(v82 + 1);
  *(_DWORD *)&v331[3] = *((_DWORD *)v82 + 1);
  *(_OWORD *)v330 = *(_OWORD *)(v82 + 8);
  *(_QWORD *)&v330[16] = *((_QWORD *)v82 + 3);
  v84 = *((_OWORD *)v82 + 2);
  v86 = *((_QWORD *)v82 + 6);
  v85 = *((_QWORD *)v82 + 7);
  v87 = *((_QWORD *)v82 + 8);
  v88 = *((_QWORD *)v82 + 9);
  v89 = *((_OWORD *)v82 + 5);
  v90 = *((_OWORD *)v82 + 6);
  v91 = *((_OWORD *)v82 + 7);
  v347 = *((_QWORD *)v82 + 16);
  *(_OWORD *)&buf[16] = v90;
  v346 = v91;
  *(_OWORD *)buf = v89;
  v92 = v82[336];
  if (v82[336])
    v270 = *((_QWORD *)v82 + 43);
  v93 = v82[352];
  if (v82[352])
    v271 = *((_QWORD *)v82 + 45);
  v94 = *(_OWORD *)(v82 + 136);
  v95 = *(_OWORD *)(v82 + 152);
  v96 = *(_OWORD *)(v82 + 168);
  v97 = *(_OWORD *)(v82 + 184);
  v98 = *(_OWORD *)(v82 + 200);
  v99 = *(_OWORD *)(v82 + 216);
  v100 = *(_OWORD *)(v82 + 232);
  v101 = *(_OWORD *)(v82 + 248);
  v103 = *(_OWORD *)(v82 + 264);
  v102 = *(_OWORD *)(v82 + 280);
  v105 = *(_OWORD *)(v82 + 296);
  v104 = *(_OWORD *)(v82 + 312);
  v106 = v82[328];
  v108 = *((_OWORD *)v82 + 23);
  v107 = *((_OWORD *)v82 + 24);
  v110 = *((_QWORD *)v82 + 50);
  v109 = *((_QWORD *)v82 + 51);
  v112 = *((_QWORD *)v82 + 52);
  v111 = *((_QWORD *)v82 + 53);
  v327 = *((_OWORD *)v82 + 27);
  v328 = *((_DWORD *)v82 + 112);
  v113 = *((_QWORD *)v82 + 57);
  v114 = *((_OWORD *)v82 + 29);
  v115 = *((_QWORD *)v82 + 60);
  v116 = *((_DWORD *)v82 + 122);
  v117 = *((_DWORD *)v82 + 123);
  if ((a3 & 1) != 0)
  {
    v118 = 0;
  }
  else
  {
    v272 = *(_OWORD *)(v82 + 136);
    v274 = *(_OWORD *)(v82 + 152);
    v276 = *(_OWORD *)(v82 + 168);
    v278 = *(_OWORD *)(v82 + 184);
    v280 = *(_OWORD *)(v82 + 200);
    v282 = *(_OWORD *)(v82 + 216);
    v284 = *(_OWORD *)(v82 + 232);
    v286 = *(_OWORD *)(v82 + 248);
    v288 = *(_OWORD *)(v82 + 264);
    v290 = v84;
    v292 = *(_OWORD *)(v82 + 280);
    v294 = v86;
    v296 = *(_OWORD *)(v82 + 296);
    v298 = v85;
    v300 = *(_OWORD *)(v82 + 312);
    v268 = v87;
    v302 = v88;
    v304 = *((_OWORD *)v82 + 23);
    v306 = *((_OWORD *)v82 + 24);
    v119 = *((_QWORD *)v82 + 50);
    v120 = *((_QWORD *)v82 + 51);
    v121 = *((_QWORD *)v82 + 52);
    v122 = *((_QWORD *)v82 + 53);
    v123 = *((_QWORD *)v82 + 57);
    v309 = *((_OWORD *)v82 + 29);
    v124 = *((_QWORD *)v82 + 60);
    v125 = *((_DWORD *)v82 + 122);
    v126 = *((_DWORD *)v82 + 123);
    +[VKSharedResourcesManager sharedResources](VKSharedResourcesManager, "sharedResources");
    v127 = (void *)objc_claimAutoreleasedReturnValue();
    v118 = objc_msgSend(v127, "globalFrameStamp");

    v117 = v126;
    v116 = v125;
    v115 = v124;
    v107 = v306;
    v114 = v309;
    v113 = v123;
    v111 = v122;
    v112 = v121;
    v109 = v120;
    v110 = v119;
    v108 = v304;
    v88 = v302;
    v87 = v268;
    v104 = v300;
    v85 = v298;
    v105 = v296;
    v86 = v294;
    v84 = v290;
    v102 = v292;
    v101 = v286;
    v103 = v288;
    v99 = v282;
    v100 = v284;
    v97 = v278;
    v98 = v280;
    v95 = v274;
    v96 = v276;
    v94 = v272;
  }
  *((_WORD *)this + 508) = 0;
  if (!*((_QWORD *)this + 131))
  {
    v273 = v94;
    v275 = v95;
    v277 = v96;
    v279 = v97;
    v281 = v98;
    v283 = v99;
    v285 = v100;
    v287 = v101;
    v289 = v103;
    v291 = v84;
    v293 = v102;
    v295 = v86;
    v297 = v105;
    v299 = v85;
    v301 = v104;
    v303 = v88;
    v305 = v108;
    v307 = v107;
    v269 = v110;
    v128 = v109;
    v129 = v112;
    v130 = v111;
    v131 = v113;
    v310 = v114;
    v132 = v115;
    v133 = v116;
    v134 = v117;
    (*(void (**)(uint64_t *__return_ptr))(**(_QWORD **)(*((_QWORD *)this + 3) + 8) + 24))(&v335);
    v135 = v335;
    v335 = 0;
    v136 = *((_QWORD *)this + 131);
    *((_QWORD *)this + 131) = v135;
    if (v136)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v136 + 8))(v136);
      if (v335)
      {
        v137 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v335 + 24))(v335);
        v138 = v335;
        v335 = 0;
        v336 = v138;
        (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v137 + 48))(v137, &v336);
        v139 = v336;
        v336 = 0;
        if (v139)
          (*(void (**)(uint64_t))(*(_QWORD *)v139 + 8))(v139);
        v140 = v335;
        v335 = 0;
        if (v140)
          (*(void (**)(uint64_t))(*(_QWORD *)v140 + 8))(v140);
      }
    }
    v117 = v134;
    v116 = v133;
    v115 = v132;
    v107 = v307;
    v114 = v310;
    v113 = v131;
    v111 = v130;
    v112 = v129;
    v109 = v128;
    v110 = v269;
    v108 = v305;
    v88 = v303;
    v104 = v301;
    v85 = v299;
    v105 = v297;
    v86 = v295;
    v84 = v291;
    v102 = v293;
    v101 = v287;
    v103 = v289;
    v99 = v283;
    v100 = v285;
    v97 = v279;
    v98 = v281;
    v95 = v275;
    v96 = v277;
    v94 = v273;
  }
  v141 = *((_QWORD *)this + 135);
  v142 = (_OWORD *)(v141 + 360);
  v143 = (_OWORD *)(v141 + 96);
  if (*(_BYTE *)(v141 + 728))
  {
    v144 = v349;
    *v143 = *(_OWORD *)v348;
    *(_OWORD *)(v141 + 112) = v144;
    *(_OWORD *)(v141 + 128) = v350;
    *(_QWORD *)(v141 + 144) = v351;
    *(_QWORD *)(v141 + 152) = v312;
    *(_OWORD *)(v141 + 160) = v313;
    *(_DWORD *)(v141 + 176) = v316;
    *(_BYTE *)(v141 + 180) = v34;
    *(_WORD *)(v141 + 181) = v333;
    *(_BYTE *)(v141 + 183) = v334;
    *(double *)(v141 + 184) = a2;
    *(_QWORD *)(v141 + 192) = v315;
    *(_QWORD *)(v141 + 200) = v314;
    *(float *)(v141 + 208) = v317;
    *(_BYTE *)(v141 + 212) = v80;
    *(_BYTE *)(v141 + 213) = a3;
    *(_WORD *)(v141 + 214) = v332;
    *(_DWORD *)(v141 + 216) = v81;
    *(_BYTE *)(v141 + 224) = v83;
    *(_DWORD *)(v141 + 225) = *(_DWORD *)v331;
    *(_DWORD *)(v141 + 228) = *(_DWORD *)&v331[3];
    *(_OWORD *)(v141 + 232) = *(_OWORD *)v330;
    *(_QWORD *)(v141 + 248) = *(_QWORD *)&v330[16];
    *(_OWORD *)(v141 + 256) = v84;
    *(_QWORD *)(v141 + 272) = v86;
    *(_QWORD *)(v141 + 280) = v85;
    *(_QWORD *)(v141 + 288) = v87;
    *(_QWORD *)(v141 + 296) = v88;
    v145 = *(_OWORD *)buf;
    v146 = *(_OWORD *)&buf[16];
    v147 = v346;
    *(_QWORD *)(v141 + 352) = v347;
    *(_OWORD *)(v141 + 320) = v146;
    *(_OWORD *)(v141 + 336) = v147;
    *(_OWORD *)(v141 + 304) = v145;
    *v142 = v94;
    *(_OWORD *)(v141 + 376) = v95;
    *(_OWORD *)(v141 + 392) = v96;
    *(_OWORD *)(v141 + 408) = v97;
    *(_OWORD *)(v141 + 424) = v98;
    *(_OWORD *)(v141 + 440) = v99;
    *(_OWORD *)(v141 + 456) = v100;
    *(_OWORD *)(v141 + 472) = v101;
    *(_OWORD *)(v141 + 488) = v103;
    *(_OWORD *)(v141 + 504) = v102;
    *(_OWORD *)(v141 + 520) = v105;
    *(_OWORD *)(v141 + 536) = v104;
    *(_BYTE *)(v141 + 552) = v106;
    v148 = *(unsigned __int8 *)(v141 + 560);
    if (v92)
    {
      *(_QWORD *)(v141 + 568) = v270;
      v149 = v271;
      if (!v148)
      {
        v150 = 1;
        goto LABEL_147;
      }
    }
    else
    {
      v149 = v271;
      if (*(_BYTE *)(v141 + 560))
      {
        v150 = 0;
LABEL_147:
        *(_BYTE *)(v141 + 560) = v150;
      }
    }
    v153 = *(unsigned __int8 *)(v141 + 576);
    if (v93)
    {
      *(_QWORD *)(v141 + 584) = v149;
      if (!v153)
      {
        v154 = 1;
        goto LABEL_153;
      }
    }
    else if (*(_BYTE *)(v141 + 576))
    {
      v154 = 0;
LABEL_153:
      *(_BYTE *)(v141 + 576) = v154;
    }
    *(_OWORD *)(v141 + 592) = v108;
    *(_OWORD *)(v141 + 608) = v107;
    *(_QWORD *)(v141 + 624) = v110;
    *(_QWORD *)(v141 + 632) = v109;
    *(_QWORD *)(v141 + 640) = v112;
    *(_QWORD *)(v141 + 648) = v111;
    *(_OWORD *)(v141 + 656) = v327;
    *(_DWORD *)(v141 + 672) = v328;
    *(_QWORD *)(v141 + 680) = v113;
    *(_OWORD *)(v141 + 688) = v114;
    *(_QWORD *)(v141 + 704) = v115;
    *(_DWORD *)(v141 + 712) = v116;
    *(_DWORD *)(v141 + 716) = v117;
    *(_QWORD *)(v141 + 720) = v118;
  }
  else
  {
    v151 = v349;
    *v143 = *(_OWORD *)v348;
    *(_OWORD *)(v141 + 112) = v151;
    *(_OWORD *)(v141 + 128) = v350;
    *(_BYTE *)(v141 + 144) = v351;
    *(_QWORD *)(v141 + 152) = v312;
    *(_OWORD *)(v141 + 160) = v313;
    *(_DWORD *)(v141 + 176) = v316;
    *(_BYTE *)(v141 + 180) = v34;
    *(double *)(v141 + 184) = a2;
    *(_QWORD *)(v141 + 192) = v315;
    *(_QWORD *)(v141 + 200) = v314;
    *(float *)(v141 + 208) = v317;
    *(_BYTE *)(v141 + 212) = v80;
    *(_BYTE *)(v141 + 213) = a3;
    *(_WORD *)(v141 + 214) = v332;
    *(_DWORD *)(v141 + 216) = v81;
    *(_BYTE *)(v141 + 224) = v83;
    *(_QWORD *)(v141 + 232) = *(_QWORD *)v330;
    *(_OWORD *)(v141 + 240) = *(_OWORD *)&v330[8];
    *(_OWORD *)(v141 + 256) = v84;
    *(_QWORD *)(v141 + 272) = v86;
    *(_QWORD *)(v141 + 280) = v85;
    *(_QWORD *)(v141 + 288) = v87;
    *(_QWORD *)(v141 + 296) = v88;
    *(_QWORD *)(v141 + 352) = v347;
    v152 = v346;
    *(_OWORD *)(v141 + 320) = *(_OWORD *)&buf[16];
    *(_OWORD *)(v141 + 336) = v152;
    *(_OWORD *)(v141 + 304) = *(_OWORD *)buf;
    *v142 = v94;
    *(_OWORD *)(v141 + 376) = v95;
    *(_OWORD *)(v141 + 392) = v96;
    *(_OWORD *)(v141 + 408) = v97;
    *(_OWORD *)(v141 + 424) = v98;
    *(_OWORD *)(v141 + 440) = v99;
    *(_OWORD *)(v141 + 456) = v100;
    *(_OWORD *)(v141 + 472) = v101;
    *(_OWORD *)(v141 + 488) = v103;
    *(_OWORD *)(v141 + 504) = v102;
    *(_OWORD *)(v141 + 520) = v105;
    *(_OWORD *)(v141 + 536) = v104;
    *(_BYTE *)(v141 + 552) = v106;
    *(_DWORD *)(v141 + 556) = *(_DWORD *)&v329[3];
    *(_DWORD *)(v141 + 553) = *(_DWORD *)v329;
    *(_BYTE *)(v141 + 560) = 0;
    if (v92)
    {
      *(_QWORD *)(v141 + 568) = v270;
      *(_BYTE *)(v141 + 560) = 1;
    }
    *(_BYTE *)(v141 + 576) = 0;
    if (v93)
    {
      *(_QWORD *)(v141 + 584) = v271;
      *(_BYTE *)(v141 + 576) = 1;
    }
    *(_OWORD *)(v141 + 592) = v108;
    *(_OWORD *)(v141 + 608) = v107;
    *(_QWORD *)(v141 + 624) = v110;
    *(_QWORD *)(v141 + 632) = v109;
    *(_QWORD *)(v141 + 640) = v112;
    *(_QWORD *)(v141 + 648) = v111;
    *(_OWORD *)(v141 + 656) = v327;
    *(_DWORD *)(v141 + 672) = v328;
    *(_QWORD *)(v141 + 680) = v113;
    *(_OWORD *)(v141 + 688) = v114;
    *(_QWORD *)(v141 + 704) = v115;
    *(_DWORD *)(v141 + 712) = v116;
    *(_DWORD *)(v141 + 716) = v117;
    *(_QWORD *)(v141 + 720) = v118;
    *(_BYTE *)(v141 + 728) = 1;
  }
  WeakRetained = objc_loadWeakRetained((id *)this + 106);
  v156 = WeakRetained == 0;

  if (!v156)
  {
    v157 = objc_loadWeakRetained((id *)this + 106);
    objc_msgSend(v157, "willLayoutWithTimestamp:withContext:", *((_QWORD *)this + 135), a2);

    v159 = *((_QWORD *)this + 135);
    v160 = *((_QWORD *)this + 133);
    v161 = *(_OWORD *)(v160 + 8);
    v162 = *(_OWORD *)(v160 + 24);
    v163 = *(_OWORD *)(v160 + 40);
    v164 = *(_OWORD *)(v160 + 56);
    v165 = *(_QWORD *)(v160 + 72);
    v323 = *(_OWORD *)(v160 + 80);
    v324 = *(_OWORD *)(v160 + 96);
    v166 = *(_OWORD *)(v160 + 112);
    v325 = v166;
    v326 = *(_QWORD *)(v160 + 128);
    v167 = *(unsigned __int8 *)(v160 + 336);
    if (*(_BYTE *)(v160 + 336))
    {
      v158 = *(_QWORD *)(v160 + 344);
      v168 = *(unsigned __int8 *)(v160 + 352);
      if (*(_BYTE *)(v160 + 352))
        goto LABEL_158;
    }
    else
    {
      v168 = *(unsigned __int8 *)(v160 + 352);
      if (*(_BYTE *)(v160 + 352))
LABEL_158:
        *(_QWORD *)&v166 = *(_QWORD *)(v160 + 360);
    }
    v169 = *(_OWORD *)(v160 + 136);
    v170 = *(_OWORD *)(v160 + 152);
    v171 = *(_OWORD *)(v160 + 168);
    v172 = *(_OWORD *)(v160 + 184);
    v173 = *(_OWORD *)(v160 + 200);
    v174 = *(_OWORD *)(v160 + 216);
    v175 = *(_OWORD *)(v160 + 232);
    v176 = *(_OWORD *)(v160 + 248);
    v177 = *(_QWORD *)(v160 + 264);
    v178 = *(_OWORD *)(v160 + 272);
    v179 = *(_OWORD *)(v160 + 288);
    v180 = *(_OWORD *)(v160 + 304);
    v181 = *(_QWORD *)(v160 + 320);
    v182 = *(_BYTE *)(v160 + 328);
    v183 = *(_OWORD *)(v160 + 368);
    v184 = *(_OWORD *)(v160 + 384);
    v185 = *(_OWORD *)(v160 + 400);
    v186 = *(_OWORD *)(v160 + 416);
    v321 = *(_OWORD *)(v160 + 432);
    v322 = *(_DWORD *)(v160 + 448);
    if (*(_BYTE *)(v159 + 728))
    {
      v187 = *(_QWORD *)(v160 + 456);
      v188 = *(_OWORD *)(v160 + 464);
      v189 = *(_QWORD *)(v160 + 480);
      v190 = *(_QWORD *)(v160 + 488);
      *(_BYTE *)(v159 + 224) = *(_BYTE *)v160;
      *(_OWORD *)(v159 + 232) = v161;
      *(_OWORD *)(v159 + 248) = v162;
      *(_OWORD *)(v159 + 264) = v163;
      *(_OWORD *)(v159 + 280) = v164;
      *(_QWORD *)(v159 + 296) = v165;
      *(_OWORD *)(v159 + 304) = v323;
      *(_OWORD *)(v159 + 320) = v324;
      *(_OWORD *)(v159 + 336) = v325;
      *(_QWORD *)(v159 + 352) = v326;
      *(_OWORD *)(v159 + 360) = v169;
      *(_OWORD *)(v159 + 376) = v170;
      *(_OWORD *)(v159 + 392) = v171;
      *(_OWORD *)(v159 + 408) = v172;
      *(_OWORD *)(v159 + 424) = v173;
      *(_OWORD *)(v159 + 440) = v174;
      *(_OWORD *)(v159 + 456) = v175;
      *(_OWORD *)(v159 + 472) = v176;
      *(_QWORD *)(v159 + 488) = v177;
      *(_OWORD *)(v159 + 496) = v178;
      *(_OWORD *)(v159 + 512) = v179;
      *(_OWORD *)(v159 + 528) = v180;
      *(_QWORD *)(v159 + 544) = v181;
      *(_BYTE *)(v159 + 552) = v182;
      v191 = *(unsigned __int8 *)(v159 + 560);
      if (v167)
      {
        *(_QWORD *)(v159 + 568) = v158;
        if (!v191)
        {
          v192 = 1;
          goto LABEL_166;
        }
      }
      else if (*(_BYTE *)(v159 + 560))
      {
        v192 = 0;
LABEL_166:
        *(_BYTE *)(v159 + 560) = v192;
      }
      v193 = *(unsigned __int8 *)(v159 + 576);
      if (v168)
      {
        *(_QWORD *)(v159 + 584) = v166;
        if (!v193)
        {
          v194 = 1;
          goto LABEL_172;
        }
      }
      else if (*(_BYTE *)(v159 + 576))
      {
        v194 = 0;
LABEL_172:
        *(_BYTE *)(v159 + 576) = v194;
      }
      *(_OWORD *)(v159 + 592) = v183;
      *(_OWORD *)(v159 + 608) = v184;
      *(_OWORD *)(v159 + 624) = v185;
      *(_OWORD *)(v159 + 640) = v186;
      *(_OWORD *)(v159 + 656) = v321;
      *(_DWORD *)(v159 + 672) = v322;
      *(_QWORD *)(v159 + 680) = v187;
      *(_OWORD *)(v159 + 688) = v188;
      *(_QWORD *)(v159 + 704) = v189;
      *(_QWORD *)(v159 + 712) = v190;
    }
  }
  v341[0] = &off_1E42D4AC8;
  v341[1] = this;
  v342 = v341;
  v339[0] = &off_1E42D4B10;
  v339[1] = this;
  v340 = v339;
  *((_QWORD *)&v349 + 1) = v348;
  *(_QWORD *)v348 = &off_1E42D4B10;
  *(_QWORD *)&v348[8] = this;
  if (GEOGetVectorKitPerformanceLog_onceToken != -1)
    dispatch_once(&GEOGetVectorKitPerformanceLog_onceToken, &__block_literal_global_13_11780);
  v195 = (id)GEOGetVectorKitPerformanceLog_log;
  v196 = v195;
  v197 = *((_QWORD *)this + 152);
  if (v197 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v195))
  {
    *(_WORD *)buf = 0;
    _os_signpost_emit_with_name_impl(&dword_19F029000, v196, OS_SIGNPOST_INTERVAL_BEGIN, v197, "RunLogicBefore", (const char *)&unk_1A0189141, buf, 2u);
  }

  v198 = v340;
  if (v340 == v339)
  {
    v199 = 4;
    v198 = v339;
LABEL_183:
    (*(void (**)(void))(*v198 + 8 * v199))();
  }
  else if (v340)
  {
    v199 = 5;
    goto LABEL_183;
  }
  v200 = v342;
  if (v342 == v341)
  {
    v201 = 4;
    v200 = v341;
LABEL_188:
    (*(void (**)(void))(*v200 + 8 * v201))();
  }
  else if (v342)
  {
    v201 = 5;
    goto LABEL_188;
  }
  v202 = *(_QWORD *)(*((_QWORD *)this + 1) + 8);
  v337[0] = &off_1E42D4B58;
  v337[1] = this;
  v338 = v337;
  geo::TaskQueue::barrierSync(v202, v337);
  v203 = v338;
  if (v338 == v337)
  {
    v204 = 4;
    v203 = v337;
LABEL_193:
    (*(void (**)(void))(*v203 + 8 * v204))();
  }
  else if (v338)
  {
    v204 = 5;
    goto LABEL_193;
  }
  if (!*((_QWORD *)&v349 + 1))
  {
    std::__throw_bad_function_call[abi:nn180100]();
LABEL_244:
    __break(1u);
    return;
  }
  (*(void (**)(_QWORD))(**((_QWORD **)&v349 + 1) + 48))(*((_QWORD *)&v349 + 1));
  v205 = (uint8_t *)*((_QWORD *)&v349 + 1);
  if (*((uint8_t **)&v349 + 1) == v348)
  {
    v206 = 4;
    v205 = v348;
LABEL_199:
    (*(void (**)(void))(*(_QWORD *)v205 + 8 * v206))();
  }
  else if (*((_QWORD *)&v349 + 1))
  {
    v206 = 5;
    goto LABEL_199;
  }
  v207 = *((_QWORD *)this + 151);
  if (*(_DWORD *)(v207 + 76))
  {
    if (*(_BYTE *)(v207 + 42))
    {
      v208 = 1;
      goto LABEL_204;
    }
LABEL_208:
    v348[0] = 13;
    md::MapEngine::setNeedsTick((uint64_t)this, v348);
  }
  else
  {
    v209 = *(unsigned __int8 *)(v207 + 80);
    v210 = *(unsigned __int8 *)(v207 + 86);
    v208 = v209 != v210;
    if (*(_BYTE *)(v207 + 42))
    {
LABEL_204:
      v320 = *(double *)(v207 + 24);
      v211 = tan(*(double *)(v207 + 16) * 0.5 + 0.785398163);
      v212 = log(v211);
      v213.f64[0] = v320;
      v213.f64[1] = v212;
      __asm { FMOV            V1.2D, #0.5 }
      *(float64x2_t *)v348 = vmlaq_f64(_Q1, (float64x2_t)vdupq_n_s64(0x3FC45F306DC9C883uLL), v213);
      md::DaVinciGroundMetaData::flagsForPoint(buf, *(const QuadTile **)v207, (double *)v348);
      v219 = *(unsigned __int8 *)(v207 + 87) != buf[0] || v208;
      if ((v219 & 1) != 0)
        goto LABEL_208;
    }
    else if (v209 != v210)
    {
      goto LABEL_208;
    }
  }
  (*(void (**)(_QWORD, _QWORD))(**((_QWORD **)this + 109) + 24))(*((_QWORD *)this + 109), *((_QWORD *)this + 135));
  objc_autoreleasePoolPop(context);
  v220 = *((_QWORD *)this + 135);
  v221 = *((_QWORD *)this + 136);
  v222 = (__int128 *)(v220 + 96);
  v223 = (_OWORD *)(v221 + 96);
  if (*(unsigned __int8 *)(v221 + 728) == *(unsigned __int8 *)(v220 + 728))
  {
    if (*(_BYTE *)(v221 + 728))
    {
      v224 = *v222;
      v225 = *(_OWORD *)(v220 + 112);
      v226 = *(_OWORD *)(v220 + 144);
      *(_OWORD *)(v221 + 128) = *(_OWORD *)(v220 + 128);
      *(_OWORD *)(v221 + 144) = v226;
      *v223 = v224;
      *(_OWORD *)(v221 + 112) = v225;
      v227 = *(_OWORD *)(v220 + 160);
      v228 = *(_OWORD *)(v220 + 176);
      v229 = *(_OWORD *)(v220 + 192);
      *(_OWORD *)(v221 + 204) = *(_OWORD *)(v220 + 204);
      *(_OWORD *)(v221 + 176) = v228;
      *(_OWORD *)(v221 + 192) = v229;
      *(_OWORD *)(v221 + 160) = v227;
      gdc::Camera::operator=(v221 + 224, v220 + 224);
      *(_QWORD *)(v221 + 720) = *(_QWORD *)(v220 + 720);
    }
  }
  else if (*(_BYTE *)(v221 + 728))
  {
    if (*(_BYTE *)(v221 + 576))
      *(_BYTE *)(v221 + 576) = 0;
    if (*(_BYTE *)(v221 + 560))
      *(_BYTE *)(v221 + 560) = 0;
    *(_BYTE *)(v221 + 728) = 0;
  }
  else
  {
    v230 = *v222;
    v231 = *(_OWORD *)(v220 + 112);
    v232 = *(_OWORD *)(v220 + 128);
    *(_BYTE *)(v221 + 144) = *(_BYTE *)(v220 + 144);
    *(_OWORD *)(v221 + 112) = v231;
    *(_OWORD *)(v221 + 128) = v232;
    *v223 = v230;
    *(_QWORD *)(v221 + 152) = *(_QWORD *)(v220 + 152);
    *(_OWORD *)(v221 + 160) = *(_OWORD *)(v220 + 160);
    v233 = *(_DWORD *)(v220 + 176);
    *(_BYTE *)(v221 + 180) = *(_BYTE *)(v220 + 180);
    *(_DWORD *)(v221 + 176) = v233;
    v234 = *(_OWORD *)(v220 + 184);
    v235 = *(_OWORD *)(v220 + 200);
    *(_DWORD *)(v221 + 216) = *(_DWORD *)(v220 + 216);
    *(_OWORD *)(v221 + 200) = v235;
    *(_OWORD *)(v221 + 184) = v234;
    *(_BYTE *)(v221 + 224) = *(_BYTE *)(v220 + 224);
    *(_QWORD *)(v221 + 232) = *(_QWORD *)(v220 + 232);
    *(_OWORD *)(v221 + 240) = *(_OWORD *)(v220 + 240);
    *(_OWORD *)(v221 + 256) = *(_OWORD *)(v220 + 256);
    *(_QWORD *)(v221 + 272) = *(_QWORD *)(v220 + 272);
    *(_QWORD *)(v221 + 280) = *(_QWORD *)(v220 + 280);
    *(_QWORD *)(v221 + 288) = *(_QWORD *)(v220 + 288);
    *(_QWORD *)(v221 + 296) = *(_QWORD *)(v220 + 296);
    v236 = *(_OWORD *)(v220 + 304);
    v237 = *(_OWORD *)(v220 + 320);
    v238 = *(_OWORD *)(v220 + 336);
    *(_QWORD *)(v221 + 352) = *(_QWORD *)(v220 + 352);
    *(_OWORD *)(v221 + 320) = v237;
    *(_OWORD *)(v221 + 336) = v238;
    *(_OWORD *)(v221 + 304) = v236;
    v239 = *(_OWORD *)(v220 + 376);
    v240 = *(_OWORD *)(v220 + 392);
    v241 = *(_OWORD *)(v220 + 408);
    *(_OWORD *)(v221 + 424) = *(_OWORD *)(v220 + 424);
    *(_OWORD *)(v221 + 408) = v241;
    *(_OWORD *)(v221 + 392) = v240;
    *(_OWORD *)(v221 + 376) = v239;
    v242 = *(_OWORD *)(v220 + 440);
    v243 = *(_OWORD *)(v220 + 456);
    v244 = *(_OWORD *)(v220 + 472);
    *(_OWORD *)(v221 + 488) = *(_OWORD *)(v220 + 488);
    *(_OWORD *)(v221 + 472) = v244;
    *(_OWORD *)(v221 + 456) = v243;
    *(_OWORD *)(v221 + 440) = v242;
    v245 = *(_OWORD *)(v220 + 504);
    v246 = *(_OWORD *)(v220 + 520);
    v247 = *(_OWORD *)(v220 + 536);
    *(_QWORD *)(v221 + 552) = *(_QWORD *)(v220 + 552);
    *(_OWORD *)(v221 + 520) = v246;
    *(_OWORD *)(v221 + 536) = v247;
    *(_OWORD *)(v221 + 504) = v245;
    *(_OWORD *)(v221 + 360) = *(_OWORD *)(v220 + 360);
    *(_BYTE *)(v221 + 560) = 0;
    if (*(_BYTE *)(v220 + 560))
    {
      *(_QWORD *)(v221 + 568) = *(_QWORD *)(v220 + 568);
      *(_BYTE *)(v221 + 560) = 1;
    }
    *(_BYTE *)(v221 + 576) = 0;
    if (*(_BYTE *)(v220 + 576))
    {
      *(_QWORD *)(v221 + 584) = *(_QWORD *)(v220 + 584);
      *(_BYTE *)(v221 + 576) = 1;
    }
    *(_OWORD *)(v221 + 592) = *(_OWORD *)(v220 + 592);
    *(_OWORD *)(v221 + 608) = *(_OWORD *)(v220 + 608);
    v248 = *(_OWORD *)(v220 + 624);
    v249 = *(_OWORD *)(v220 + 640);
    v250 = *(_OWORD *)(v220 + 656);
    *(_DWORD *)(v221 + 672) = *(_DWORD *)(v220 + 672);
    *(_OWORD *)(v221 + 640) = v249;
    *(_OWORD *)(v221 + 656) = v250;
    *(_OWORD *)(v221 + 624) = v248;
    *(_QWORD *)(v221 + 680) = *(_QWORD *)(v220 + 680);
    *(_QWORD *)(v221 + 688) = *(_QWORD *)(v220 + 688);
    *(_QWORD *)(v221 + 696) = *(_QWORD *)(v220 + 696);
    *(_OWORD *)(v221 + 704) = *(_OWORD *)(v220 + 704);
    *(_QWORD *)(v221 + 720) = *(_QWORD *)(v220 + 720);
    *(_BYTE *)(v221 + 728) = 1;
  }
}

void sub_19FAB7460(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void md::MapEngine::_postRender(id *this, double a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  double *v11;
  double *v12;
  uint64_t v13;
  NSObject *v14;
  NSObject *v15;
  os_signpost_id_t v16;
  __int16 v17;
  _QWORD v18[3];
  double *v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v4 = objc_msgSend(this[105], "size");
  v6 = v5;
  v8 = v7;
  v9 = (void *)MEMORY[0x1A1AF555C](v4);
  v10 = *((_QWORD *)this[1] + 1);
  v11 = (double *)operator new(0x28uLL);
  *(_QWORD *)v11 = &off_1E42D4A38;
  *((_QWORD *)v11 + 1) = this;
  v11[2] = a2;
  *((_QWORD *)v11 + 3) = v6;
  *((_QWORD *)v11 + 4) = v8;
  v19 = v11;
  geo::TaskQueue::barrierSync(v10, v18);
  v12 = v19;
  if (v19 == (double *)v18)
  {
    v13 = 4;
    v12 = (double *)v18;
  }
  else
  {
    if (!v19)
      goto LABEL_6;
    v13 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v12 + 8 * v13))();
LABEL_6:
  if (GEOGetVectorKitPerformanceLog_onceToken != -1)
    dispatch_once(&GEOGetVectorKitPerformanceLog_onceToken, &__block_literal_global_13_11780);
  v14 = (id)GEOGetVectorKitPerformanceLog_log;
  v15 = v14;
  v16 = (os_signpost_id_t)this[152];
  if (v16 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v14))
  {
    v17 = 0;
    _os_signpost_emit_with_name_impl(&dword_19F029000, v15, OS_SIGNPOST_INTERVAL_END, v16, "LayoutScene", (const char *)&unk_1A0189141, (uint8_t *)&v17, 2u);
  }

  objc_autoreleasePoolPop(v9);
}

void sub_19FAB76C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      _Unwind_Resume(exception_object);
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
  _Unwind_Resume(exception_object);
}

void std::__function::__func<md::MapEngine::onLayoutOnlyTimerFired(double)::$_0,std::allocator<md::MapEngine::onLayoutOnlyTimerFired(double)::$_0>,void ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::MapEngine::onLayoutOnlyTimerFired(double)::$_0,std::allocator<md::MapEngine::onLayoutOnlyTimerFired(double)::$_0>,void ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E42D4C78;
  return result;
}

void std::__function::__func<md::MapEngine::onLayoutOnlyTimerFired(double)::$_0,std::allocator<md::MapEngine::onLayoutOnlyTimerFired(double)::$_0>,void ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E42D4C78;
}

void std::__function::__func<md::MapEngine::_postRender(double)::$_0,std::allocator<md::MapEngine::_postRender(double)::$_0>,void ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

__n128 std::__function::__func<md::MapEngine::_postRender(double)::$_0,std::allocator<md::MapEngine::_postRender(double)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x28uLL);
  *(_QWORD *)v2 = &off_1E42D4A38;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 std::__function::__func<md::MapEngine::_postRender(double)::$_0,std::allocator<md::MapEngine::_postRender(double)::$_0>,void ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E42D4A38;
  result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

_QWORD *std::__function::__func<md::MapEngine::_postRender(double)::$_0,std::allocator<md::MapEngine::_postRender(double)::$_0>,void ()(void)>::operator()(uint64_t a1, const Camera *a2)
{
  uint64_t v3;
  uint64_t v4;
  float v5;
  unint64_t v6;
  BOOL v7;
  uint64_t v8;
  unint64_t v9;
  double v10;
  gdc::LayerDataStore **v11;
  unsigned __int16 *v12;
  double v13;
  double v14;
  unsigned int v15;
  BOOL v16;
  uint64_t v17;
  NSObject *v19;
  NSObject *v20;
  os_signpost_id_t v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  md::LayoutContext *v27;
  _QWORD *v28;
  _QWORD *v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  const Camera *v34;
  float v35;
  unint64_t v36;
  BOOL v38;
  char v39;
  unsigned __int8 v40;
  _QWORD *v41;
  _QWORD *v42;
  _QWORD *v43;
  _QWORD *v44;
  int8x8_t v45;
  unint64_t v46;
  uint8x8_t v47;
  unint64_t v48;
  _QWORD *v49;
  _QWORD *v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  int8x8_t v55;
  unint64_t v56;
  uint8x8_t v57;
  unint64_t v58;
  _QWORD *v59;
  _QWORD *v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  unint64_t v65;
  NSObject *v66;
  uint8_t *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  _QWORD *result;
  uint64_t v72;
  uint8_t v73[16];
  _QWORD v74[3];
  _QWORD *v75;
  _QWORD v76[3];
  _QWORD *v77;
  _QWORD v78[3];
  _QWORD *v79;
  _QWORD v80[3];
  _QWORD *v81;
  _QWORD v82[3];
  _QWORD *v83;
  uint8_t buf[8];
  md::LayoutContext *v85;
  uint8_t *v86;
  uint64_t v87;

  v87 = *MEMORY[0x1E0C80C00];
  v3 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(v3 + 1120);
  if (!*(_BYTE *)(v4 + 82)
    || (v5 = gdc::DisplayZoomLevel::centerZoomLevel(*(gdc::DisplayZoomLevel **)(v3 + 1064), a2),
        v6 = *(_QWORD *)(v4 + 88),
        v6 == 1)
    || (v6 % *(_QWORD *)(v4 + 112) ? (v7 = v5 < 2.0) : (v7 = 1), v7))
  {
    v8 = *(_QWORD *)(v3 + 896);
    v9 = *(_QWORD *)(v8 + 312);
    v10 = 9.0;
    if (v9 >= 0x201)
      v10 = (double)(2 * (4 / (v9 >> 9))) + 1.0;
    v11 = *(gdc::LayerDataStore ***)(v8 + 80);
    v12 = *(unsigned __int16 **)(v8 + 88);
    if (v11 != (gdc::LayerDataStore **)v12)
    {
      if (v9 <= 0x200)
        v9 = 512;
      v13 = (double)((unint64_t)(v10 + *(double *)(a1 + 24) / (double)v9)
                   * (unint64_t)(v10 + *(double *)(a1 + 32) / (double)v9));
      do
      {
        v15 = *(unsigned __int16 *)v11 - 11;
        v16 = v15 > 0x3D;
        v17 = (1 << v15) & 0x3000000000000003;
        if (v16 || v17 == 0)
          v14 = 31457280.0;
        else
          v14 = 41943040.0;
        gdc::LayerDataStore::purge(v11[1], (unint64_t)(*(double *)(v8 + 384) * v13), (unint64_t)(v14 * *(double *)(v8 + 384)));
        v11 += 2;
      }
      while (v11 != (gdc::LayerDataStore **)v12);
    }
    gdc::ResourceManager::cleanupResources(*(gdc::ResourceManager **)(*(_QWORD *)(v8 + 24) + 56));
  }
  v76[0] = &off_1E42DA2E0;
  v76[1] = v3;
  v77 = v76;
  v78[0] = &off_1E42DA298;
  v74[0] = &off_1E42DA298;
  v74[1] = v3;
  v75 = v74;
  v79 = v78;
  v78[1] = v3;
  if (GEOGetVectorKitPerformanceLog_onceToken != -1)
    dispatch_once(&GEOGetVectorKitPerformanceLog_onceToken, &__block_literal_global_13_11780);
  v19 = (id)GEOGetVectorKitPerformanceLog_log;
  v20 = v19;
  v21 = *(_QWORD *)(v3 + 1216);
  if (v21 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v19))
  {
    *(_WORD *)buf = 0;
    _os_signpost_emit_with_name_impl(&dword_19F029000, v20, OS_SIGNPOST_INTERVAL_BEGIN, v21, "RunLogicAfter", (const char *)&unk_1A0189141, buf, 2u);
  }

  v22 = v75;
  if (v75 == v74)
  {
    v23 = 4;
    v22 = v74;
  }
  else
  {
    if (!v75)
      goto LABEL_32;
    v23 = 5;
  }
  (*(void (**)(void))(*v22 + 8 * v23))();
LABEL_32:
  v24 = v77;
  if (v77 == v76)
  {
    v25 = 4;
    v24 = v76;
  }
  else
  {
    if (!v77)
      goto LABEL_37;
    v25 = 5;
  }
  (*(void (**)(void))(*v24 + 8 * v25))();
LABEL_37:
  v26 = *(_QWORD *)(v3 + 1120);
  v27 = *(md::LayoutContext **)(v3 + 1088);
  v28 = *(_QWORD **)(v3 + 920);
  v82[0] = &off_1E42CA8C8;
  v82[1] = v27;
  v83 = v82;
  v80[0] = &off_1E42CA910;
  v80[1] = v27;
  v81 = v80;
  v86 = buf;
  *(_QWORD *)buf = &off_1E42CA910;
  v85 = v27;
  std::__function::__func<md::LogicManager::runLogicAfter(md::LayoutContext const&,gdc::Context &)::$_0,std::allocator<md::LogicManager::runLogicAfter(md::LayoutContext const&,gdc::Context &)::$_0>,void ()(void)>::operator()((uint64_t)v82);
  v29 = v81;
  if (v81 == v80)
  {
    v30 = 4;
    v29 = v80;
  }
  else
  {
    if (!v81)
      goto LABEL_42;
    v30 = 5;
  }
  (*(void (**)(void))(*v29 + 8 * v30))();
LABEL_42:
  v31 = v83;
  if (v83 == v82)
  {
    v32 = 4;
    v31 = v82;
  }
  else
  {
    if (!v83)
      goto LABEL_47;
    v32 = 5;
  }
  (*(void (**)(void))(*v31 + 8 * v32))();
LABEL_47:
  md::LayoutContext::frameState(v27);
  v35 = gdc::DisplayZoomLevel::centerZoomLevel((gdc::DisplayZoomLevel *)(v33 + 128), v34);
  if (*(_BYTE *)(v26 + 82))
  {
    v36 = *(_QWORD *)(v26 + 88);
    v38 = v36 == 1 || v36 % *(_QWORD *)(v26 + 112) == 0;
  }
  else
  {
    v38 = 1;
  }
  v39 = v35 < 2.0 || v38;
  {
    __cxa_atexit((void (*)(void *))std::vector<md::LogicBase *>::~vector[abi:nn180100], &md::LogicManager::executionOrder(void)const::empty, &dword_19F029000);
  }
  v41 = (_QWORD *)(v26 + 48);
  if (!*(_BYTE *)(v26 + 72))
    v41 = &md::LogicManager::executionOrder(void)const::empty;
  v42 = (_QWORD *)*v41;
  v43 = (_QWORD *)v41[1];
  if ((_QWORD *)*v41 != v43)
  {
    if ((v39 & 1) != 0)
    {
      do
      {
        v54 = (_QWORD *)*v42;
        if (*(_BYTE *)(*v42 + 56))
        {
          v55 = (int8x8_t)v28[1];
          if (v55)
          {
            v56 = v54[4];
            v57 = (uint8x8_t)vcnt_s8(v55);
            v57.i16[0] = vaddlv_u8(v57);
            if (v57.u32[0] > 1uLL)
            {
              v58 = v54[4];
              if (v56 >= *(_QWORD *)&v55)
                v58 = v56 % *(_QWORD *)&v55;
            }
            else
            {
              v58 = (*(_QWORD *)&v55 - 1) & v56;
            }
            v59 = *(_QWORD **)(*v28 + 8 * v58);
            if (v59)
            {
              v60 = (_QWORD *)*v59;
              if (v60)
              {
                if (v57.u32[0] < 2uLL)
                {
                  v61 = *(_QWORD *)&v55 - 1;
                  while (1)
                  {
                    v62 = v60[1];
                    if (v56 == v62)
                    {
                      if (v60[2] == v56)
                        goto LABEL_112;
                    }
                    else if ((v62 & v61) != v58)
                    {
                      goto LABEL_89;
                    }
                    v60 = (_QWORD *)*v60;
                    if (!v60)
                      goto LABEL_89;
                  }
                }
                do
                {
                  v63 = v60[1];
                  if (v56 == v63)
                  {
                    if (v60[2] == v56)
                    {
LABEL_112:
                      v64 = v60[5];
                      if (v64)
                      {
                        (*(void (**)(_QWORD *, md::LayoutContext *, _QWORD))(*v54 + 96))(v54, v27, v60[5]);
                        (*(void (**)(_QWORD, md::LayoutContext *, uint64_t))(*(_QWORD *)*v42 + 80))(*v42, v27, v64);
                      }
                      break;
                    }
                  }
                  else
                  {
                    if (v63 >= *(_QWORD *)&v55)
                      v63 %= *(_QWORD *)&v55;
                    if (v63 != v58)
                      break;
                  }
                  v60 = (_QWORD *)*v60;
                }
                while (v60);
              }
            }
          }
        }
LABEL_89:
        ++v42;
      }
      while (v42 != v43);
    }
    else
    {
      do
      {
        v44 = (_QWORD *)*v42;
        if (*(_BYTE *)(*v42 + 56))
        {
          v45 = (int8x8_t)v28[1];
          if (v45)
          {
            v46 = v44[4];
            v47 = (uint8x8_t)vcnt_s8(v45);
            v47.i16[0] = vaddlv_u8(v47);
            if (v47.u32[0] > 1uLL)
            {
              v48 = v44[4];
              if (v46 >= *(_QWORD *)&v45)
                v48 = v46 % *(_QWORD *)&v45;
            }
            else
            {
              v48 = (*(_QWORD *)&v45 - 1) & v46;
            }
            v49 = *(_QWORD **)(*v28 + 8 * v48);
            if (v49)
            {
              v50 = (_QWORD *)*v49;
              if (v50)
              {
                if (v47.u32[0] < 2uLL)
                {
                  v51 = *(_QWORD *)&v45 - 1;
                  while (1)
                  {
                    v53 = v50[1];
                    if (v46 == v53)
                    {
                      if (v50[2] == v46)
                        goto LABEL_87;
                    }
                    else if ((v53 & v51) != v48)
                    {
                      goto LABEL_64;
                    }
                    v50 = (_QWORD *)*v50;
                    if (!v50)
                      goto LABEL_64;
                  }
                }
                do
                {
                  v52 = v50[1];
                  if (v46 == v52)
                  {
                    if (v50[2] == v46)
                    {
LABEL_87:
                      if (v50[5])
                        (*(void (**)(_QWORD *, md::LayoutContext *))(*v44 + 96))(v44, v27);
                      break;
                    }
                  }
                  else
                  {
                    if (v52 >= *(_QWORD *)&v45)
                      v52 %= *(_QWORD *)&v45;
                    if (v52 != v48)
                      break;
                  }
                  v50 = (_QWORD *)*v50;
                }
                while (v50);
              }
            }
          }
        }
LABEL_64:
        ++v42;
      }
      while (v42 != v43);
    }
  }
  v65 = *(_QWORD *)(v26 + 88) + 1;
  *(_QWORD *)(v26 + 88) = v65;
  if (v65 > 0x78)
  {
    if (GEOGetVectorKitVKDefaultLog_onceToken != -1)
      dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_4_11772);
    v66 = (id)GEOGetVectorKitVKDefaultLog_log;
    if (os_log_type_enabled(v66, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)v73 = 0;
      _os_log_impl(&dword_19F029000, v66, OS_LOG_TYPE_DEBUG, "[VLR] Reset Frame Counter", v73, 2u);
    }

    *(_QWORD *)(v26 + 88) = 1;
  }
  if (!v86)
  {
LABEL_139:
    std::__throw_bad_function_call[abi:nn180100]();
    __break(1u);
    JUMPOUT(0x19FAB8068);
  }
  (*(void (**)(uint8_t *))(*(_QWORD *)v86 + 48))(v86);
  v67 = v86;
  if (v86 == buf)
  {
    v68 = 4;
    v67 = buf;
    goto LABEL_125;
  }
  if (v86)
  {
    v68 = 5;
LABEL_125:
    (*(void (**)(void))(*(_QWORD *)v67 + 8 * v68))();
  }
  v69 = *(_QWORD *)(v3 + 1136);
  if (*(_BYTE *)(v69 + 90))
  {
    if (*(_BYTE *)(v69 + 88))
    {
      *(_BYTE *)(v69 + 90) = 0;
      v70 = *(_QWORD *)(v69 + 216);
      if (v70)
      {
        buf[0] = *(_BYTE *)(v69 + 89);
        (*(void (**)(uint64_t, uint8_t *))(*(_QWORD *)v70 + 48))(v70, buf);
      }
    }
  }
  if (!v79)
    goto LABEL_139;
  (*(void (**)(_QWORD *))(*v79 + 48))(v79);
  result = v79;
  if (v79 == v78)
  {
    v72 = 4;
    result = v78;
  }
  else
  {
    if (!v79)
      return result;
    v72 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v72))();
}

void std::__function::__func<md::MapEngine::_postRender(double)::$_0::operator() const(void)::{lambda(void)#2},std::allocator<md::MapEngine::_postRender(double)::$_0::operator() const(void)::{lambda(void)#2}>,void ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::MapEngine::_postRender(double)::$_0::operator() const(void)::{lambda(void)#2},std::allocator<md::MapEngine::_postRender(double)::$_0::operator() const(void)::{lambda(void)#2}>,void ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42DA298;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<md::MapEngine::_postRender(double)::$_0::operator() const(void)::{lambda(void)#2},std::allocator<md::MapEngine::_postRender(double)::$_0::operator() const(void)::{lambda(void)#2}>,void ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42DA298;
  a2[1] = v2;
  return result;
}

void std::__function::__func<md::MapEngine::_postRender(double)::$_0::operator() const(void)::{lambda(void)#2},std::allocator<md::MapEngine::_postRender(double)::$_0::operator() const(void)::{lambda(void)#2}>,void ()(void)>::operator()(uint64_t a1)
{
  uint64_t v1;
  NSObject *v2;
  NSObject *v3;
  os_signpost_id_t v4;
  uint8_t v5[16];

  v1 = *(_QWORD *)(a1 + 8);
  if (GEOGetVectorKitPerformanceLog_onceToken != -1)
    dispatch_once(&GEOGetVectorKitPerformanceLog_onceToken, &__block_literal_global_13_11780);
  v2 = (id)GEOGetVectorKitPerformanceLog_log;
  v3 = v2;
  v4 = *(_QWORD *)(v1 + 1216);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)v5 = 0;
    _os_signpost_emit_with_name_impl(&dword_19F029000, v3, OS_SIGNPOST_INTERVAL_END, v4, "RunLogicAfter", (const char *)&unk_1A0189141, v5, 2u);
  }

}

void std::__function::__func<md::MapEngine::_postRender(double)::$_0::operator() const(void)::{lambda(void)#1},std::allocator<md::MapEngine::_postRender(double)::$_0::operator() const(void)::{lambda(void)#1}>,void ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::MapEngine::_postRender(double)::$_0::operator() const(void)::{lambda(void)#1},std::allocator<md::MapEngine::_postRender(double)::$_0::operator() const(void)::{lambda(void)#1}>,void ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42DA2E0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<md::MapEngine::_postRender(double)::$_0::operator() const(void)::{lambda(void)#1},std::allocator<md::MapEngine::_postRender(double)::$_0::operator() const(void)::{lambda(void)#1}>,void ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42DA2E0;
  a2[1] = v2;
  return result;
}

void std::__function::__func<md::MapEngine::_postRender(double)::$_0::operator() const(void)::{lambda(void)#1},std::allocator<md::MapEngine::_postRender(double)::$_0::operator() const(void)::{lambda(void)#1}>,void ()(void)>::operator()(uint64_t a1)
{
  uint64_t v1;
  NSObject *v2;
  NSObject *v3;
  os_signpost_id_t v4;
  uint8_t v5[16];

  v1 = *(_QWORD *)(a1 + 8);
  if (GEOGetVectorKitPerformanceLog_onceToken != -1)
    dispatch_once(&GEOGetVectorKitPerformanceLog_onceToken, &__block_literal_global_13_11780);
  v2 = (id)GEOGetVectorKitPerformanceLog_log;
  v3 = v2;
  v4 = *(_QWORD *)(v1 + 1216);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)v5 = 0;
    _os_signpost_emit_with_name_impl(&dword_19F029000, v3, OS_SIGNPOST_INTERVAL_BEGIN, v4, "RunLogicAfter", (const char *)&unk_1A0189141, v5, 2u);
  }

}

void std::__function::__func<md::MapEngine::runUpdatePhase(double,BOOL)::$_4,std::allocator<md::MapEngine::runUpdatePhase(double,BOOL)::$_4>,void ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::MapEngine::runUpdatePhase(double,BOOL)::$_4,std::allocator<md::MapEngine::runUpdatePhase(double,BOOL)::$_4>,void ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42D4B58;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<md::MapEngine::runUpdatePhase(double,BOOL)::$_4,std::allocator<md::MapEngine::runUpdatePhase(double,BOOL)::$_4>,void ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42D4B58;
  a2[1] = v2;
  return result;
}

_QWORD *std::__function::__func<md::MapEngine::runUpdatePhase(double,BOOL)::$_4,std::allocator<md::MapEngine::runUpdatePhase(double,BOOL)::$_4>,void ()(void)>::operator()(uint64_t a1)
{
  unint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  md::LayoutContext *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  const Camera *v14;
  float v15;
  unint64_t v16;
  BOOL v17;
  NSObject *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  std::ios_base *v23;
  unsigned __int8 v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  _QWORD *v28;
  unint64_t v29;
  int8x8_t v30;
  uint8x8_t v31;
  unint64_t v32;
  _QWORD *v33;
  _QWORD *v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint8x8_t v43;
  _QWORD **v44;
  _QWORD *v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  float v49;
  float v50;
  _BOOL8 v51;
  unint64_t v52;
  unint64_t v53;
  size_t prime;
  unint64_t v55;
  uint8x8_t v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  unint64_t v60;
  uint64_t v61;
  uint8x8_t v62;
  unint64_t v63;
  _QWORD *v64;
  _QWORD *v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  _BYTE *v69;
  uint64_t v70;
  size_t v71;
  void **p_dst;
  ggl::DebugConsole *v73;
  uint64_t v74;
  unint64_t v75;
  const void **v76;
  const void *v77;
  uint64_t v78;
  uint64_t v79;
  ggl::DebugConsole *v80;
  float32x2_t *v81;
  size_t v82;
  id v83;
  double v84;
  double v85;
  id v86;
  float v87;
  double v88;
  float v89;
  uint64_t v90;
  std::__shared_weak_count *v91;
  unint64_t *p_shared_owners;
  unint64_t v93;
  uint64_t v94;
  std::__shared_weak_count *v95;
  double v96;
  unint64_t *v97;
  unint64_t v98;
  char v99;
  float v100;
  int v101;
  float v102;
  unint64_t *v103;
  unint64_t v104;
  unint64_t *v105;
  unint64_t v106;
  unint64_t v107;
  void **v108;
  unint64_t v109;
  void **v110;
  unint64_t v111;
  int64x2_t v112;
  int8x16_t v113;
  int8x16_t v114;
  int64x2_t v115;
  int8x16_t *v116;
  int64x2_t v117;
  unint64_t v118;
  int64x2_t v119;
  int64x2_t v120;
  int64x2_t v121;
  int64x2_t v122;
  int64x2_t v123;
  int64x2_t v124;
  int64x2_t v125;
  int64x2_t v126;
  int64x2_t v127;
  int64x2_t v128;
  int64x2_t v129;
  int64x2_t v130;
  int64x2_t v131;
  uint8x16_t v132;
  uint16x8_t v133;
  uint16x8_t v134;
  uint32x4_t v135;
  int8x16_t v136;
  uint32x4_t v137;
  uint32x4_t v138;
  int8x16_t v139;
  uint32x4_t v140;
  int64x2_t v141;
  int64x2_t v142;
  uint8x16_t v143;
  uint16x8_t v144;
  uint16x8_t v145;
  uint32x4_t v146;
  uint32x4_t v147;
  uint32x4_t v148;
  uint32x4_t v149;
  unint64_t v150;
  int64x2_t v151;
  int64x2_t v152;
  unint64_t v153;
  int8x8_t *v154;
  int8x16_t v155;
  int64x2_t v156;
  int64x2_t v157;
  int8x8_t v158;
  uint16x8_t v159;
  uint32x4_t v160;
  int8x16_t v161;
  int64x2_t v162;
  int64x2_t v163;
  uint32x4_t v164;
  int64x2_t v165;
  unsigned __int8 *v166;
  int v167;
  uint64_t v168;
  float v169;
  uint64_t v170;
  float v171;
  id v172;
  float v173;
  float v174;
  double v175;
  unsigned int v176;
  int8x16_t *v177;
  size_t v178;
  double v179;
  int32x2_t v180;
  _QWORD *result;
  uint64_t v182;
  uint64_t v183;
  _QWORD *v184;
  int v185;
  void *v186;
  void **__dst;
  size_t v188;
  int64_t v189;
  uint8_t buf[8];
  uint64_t v191;
  _QWORD v192[3];
  uint64_t v193;
  unint64_t v194;
  void *v195[2];
  __int128 v196;
  int v197;
  uint64_t v198[19];
  float v199;
  float v200;
  unint64_t v201;
  _BYTE __p[20];
  float v203;
  uint64_t v204;
  uint64_t v205;
  float v206;
  int v207;
  float v208;
  int v209;
  float v210;
  int v211;
  _QWORD v212[3];
  _QWORD *v213;
  _QWORD v214[3];
  _QWORD *v215;
  _QWORD v216[3];
  _QWORD *v217;
  _QWORD v218[3];
  _QWORD *v219;
  uint64_t v220;

  v220 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD **)(a1 + 8);
  v3 = v2[140];
  v4 = (md::LayoutContext *)v2[135];
  v5 = v2[115];
  v216[0] = &off_1E42CA9A0;
  v216[1] = v4;
  v217 = v216;
  v214[0] = &off_1E42CA9E8;
  v214[1] = v4;
  v215 = v214;
  v219 = v218;
  v218[0] = &off_1E42CA9E8;
  v218[1] = v4;
  std::__function::__func<md::LogicManager::runLogicBefore(md::LayoutContext const&,gdc::Context &)::$_0,std::allocator<md::LogicManager::runLogicBefore(md::LayoutContext const&,gdc::Context &)::$_0>,void ()(void)>::operator()((uint64_t)v216);
  v6 = v215;
  if (v215 == v214)
  {
    v7 = 4;
    v6 = v214;
  }
  else
  {
    if (!v215)
      goto LABEL_6;
    v7 = 5;
  }
  (*(void (**)(void))(*v6 + 8 * v7))();
LABEL_6:
  v8 = v217;
  if (v217 == v216)
  {
    v9 = 4;
    v8 = v216;
  }
  else
  {
    if (!v217)
      goto LABEL_11;
    v9 = 5;
  }
  (*(void (**)(void))(*v8 + 8 * v9))();
LABEL_11:
  if (!*(_BYTE *)(v3 + 80))
    goto LABEL_24;
  v212[0] = &off_1E42CAA30;
  v212[1] = v5;
  v10 = v212;
  v213 = v212;
  v11 = *(_QWORD **)(v3 + 24);
  if (!v11)
  {
    v12 = 4;
    goto LABEL_22;
  }
  *(_QWORD *)buf = v11[5];
  while (1)
  {
    (*(void (**)(_QWORD *, uint8_t *))(*v10 + 48))(v10, buf);
    v11 = (_QWORD *)*v11;
    v10 = v213;
    if (!v11)
      break;
    *(_QWORD *)buf = v11[5];
    if (!v213)
    {
      std::__throw_bad_function_call[abi:nn180100]();
LABEL_254:
      __break(1u);
      JUMPOUT(0x19FAB955CLL);
    }
  }
  if (v213 == v212)
  {
    v12 = 4;
    v10 = v212;
    goto LABEL_22;
  }
  if (v213)
  {
    v12 = 5;
LABEL_22:
    (*(void (**)(void))(*v10 + 8 * v12))();
  }
  *(_BYTE *)(v3 + 80) = 0;
LABEL_24:
  +[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings");
  v186 = (void *)objc_claimAutoreleasedReturnValue();
  md::LayoutContext::frameState(v4);
  if (!*(_BYTE *)(v3 + 82)
    || (v15 = gdc::DisplayZoomLevel::centerZoomLevel((gdc::DisplayZoomLevel *)(v13 + 128), v14),
        v16 = *(_QWORD *)(v3 + 88),
        v16 == 1)
    || (v16 % *(_QWORD *)(v3 + 112) ? (v17 = v15 < 2.0) : (v17 = 1), v17))
  {
    if (GEOGetVectorKitVKDefaultLog_onceToken != -1)
      dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_4_11772);
    v18 = (id)GEOGetVectorKitVKDefaultLog_log;
    if (os_log_type_enabled(v18, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_19F029000, v18, OS_LOG_TYPE_DEBUG, "[VLR] Heavy Frame - Run Before", buf, 2u);
    }

    v185 = 1;
  }
  else
  {
    v185 = 0;
  }
  v19 = MEMORY[0x1E0DE4FE0];
  v20 = MEMORY[0x1E0DE4FE0] + 64;
  v21 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v22 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v198[0] = MEMORY[0x1E0DE4FE0] + 64;
  *(_QWORD *)buf = v21;
  *(_QWORD *)&buf[*(_QWORD *)(v21 - 24)] = v22;
  v23 = (std::ios_base *)&buf[*(_QWORD *)(*(_QWORD *)buf - 24)];
  std::ios_base::init(v23, &v191);
  v23[1].__vftable = 0;
  v23[1].__fmtflags_ = -1;
  *(_QWORD *)buf = v19 + 24;
  v198[0] = v20;
  std::streambuf::basic_streambuf();
  v191 = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)v195 = 0u;
  v196 = 0u;
  v197 = 16;
  {
    __cxa_atexit((void (*)(void *))std::vector<md::LogicBase *>::~vector[abi:nn180100], &md::LogicManager::executionOrder(void)const::empty, &dword_19F029000);
  }
  v25 = &md::LogicManager::executionOrder(void)const::empty;
  v183 = v3;
  if (*(_BYTE *)(v3 + 72))
    v25 = (_QWORD *)(v3 + 48);
  v26 = (_QWORD *)*v25;
  v27 = (_QWORD *)v25[1];
  if ((_QWORD *)*v25 == v27)
    goto LABEL_163;
  v184 = (_QWORD *)(v5 + 16);
  while (2)
  {
    v28 = (_QWORD *)*v26;
    if (!*(_BYTE *)(*v26 + 56))
      goto LABEL_42;
    v29 = v28[4];
    v30 = *(int8x8_t *)(v5 + 8);
    if (v30)
    {
      v31 = (uint8x8_t)vcnt_s8(v30);
      v31.i16[0] = vaddlv_u8(v31);
      if (v31.u32[0] > 1uLL)
      {
        v32 = v28[4];
        if (v29 >= *(_QWORD *)&v30)
          v32 = v29 % *(_QWORD *)&v30;
      }
      else
      {
        v32 = (*(_QWORD *)&v30 - 1) & v29;
      }
      v33 = *(_QWORD **)(*(_QWORD *)v5 + 8 * v32);
      if (v33)
      {
        v34 = (_QWORD *)*v33;
        if (v34)
        {
          if (v31.u32[0] < 2uLL)
          {
            v35 = *(_QWORD *)&v30 - 1;
            while (1)
            {
              v37 = v34[1];
              if (v29 == v37)
              {
                if (v34[2] == v29)
                  goto LABEL_65;
              }
              else if ((v37 & v35) != v32)
              {
                goto LABEL_66;
              }
              v34 = (_QWORD *)*v34;
              if (!v34)
                goto LABEL_66;
            }
          }
          do
          {
            v36 = v34[1];
            if (v29 == v36)
            {
              if (v34[2] == v29)
              {
LABEL_65:
                v38 = v34[5];
                if (v38)
                  goto LABEL_151;
                break;
              }
            }
            else
            {
              if (v36 >= *(_QWORD *)&v30)
                v36 %= *(_QWORD *)&v30;
              if (v36 != v32)
                break;
            }
            v34 = (_QWORD *)*v34;
          }
          while (v34);
        }
      }
    }
LABEL_66:
    (*(void (**)(_BYTE *__return_ptr))(*v28 + 64))(__p);
    v39 = *(_QWORD *)__p;
    v40 = *(_QWORD *)__p + 8;
    v41 = *(_QWORD *)(*(_QWORD *)__p + 8);
    v42 = *(_QWORD *)(v5 + 8);
    if (v42)
    {
      v43 = (uint8x8_t)vcnt_s8((int8x8_t)v42);
      v43.i16[0] = vaddlv_u8(v43);
      if (v43.u32[0] > 1uLL)
      {
        v1 = *(_QWORD *)(*(_QWORD *)__p + 8);
        if (v41 >= v42)
          v1 = v41 % v42;
      }
      else
      {
        v1 = (v42 - 1) & v41;
      }
      v44 = *(_QWORD ***)(*(_QWORD *)v5 + 8 * v1);
      if (v44)
      {
        v45 = *v44;
        if (*v44)
        {
          if (v43.u32[0] < 2uLL)
          {
            while (1)
            {
              v47 = v45[1];
              if (v47 == v41)
              {
                if (v45[2] == v41)
                  goto LABEL_125;
              }
              else if ((v47 & (v42 - 1)) != v1)
              {
                goto LABEL_86;
              }
              v45 = (_QWORD *)*v45;
              if (!v45)
                goto LABEL_86;
            }
          }
          do
          {
            v46 = v45[1];
            if (v46 == v41)
            {
              if (v45[2] == v41)
                goto LABEL_125;
            }
            else
            {
              if (v46 >= v42)
                v46 %= v42;
              if (v46 != v1)
                break;
            }
            v45 = (_QWORD *)*v45;
          }
          while (v45);
        }
      }
    }
LABEL_86:
    v45 = operator new(0x30uLL);
    *v45 = 0;
    v45[1] = v41;
    v48 = *(_QWORD *)(v40 + 16);
    *((_OWORD *)v45 + 1) = *(_OWORD *)v40;
    v45[4] = v48;
    v45[5] = 0;
    v49 = (float)(unint64_t)(*(_QWORD *)(v5 + 24) + 1);
    v50 = *(float *)(v5 + 32);
    if (!v42 || (float)(v50 * (float)v42) < v49)
    {
      v51 = v42 < 3 || (v42 & (v42 - 1)) != 0;
      v52 = v51 | (2 * v42);
      v53 = vcvtps_u32_f32(v49 / v50);
      if (v52 <= v53)
        prime = v53;
      else
        prime = v52;
      if (prime == 1)
      {
        prime = 2;
      }
      else if ((prime & (prime - 1)) != 0)
      {
        prime = std::__next_prime(prime);
        v42 = *(_QWORD *)(v5 + 8);
      }
      if (prime > v42)
        goto LABEL_99;
      if (prime < v42)
      {
        v55 = vcvtps_u32_f32((float)*(unint64_t *)(v5 + 24) / *(float *)(v5 + 32));
        if (v42 < 3 || (v56 = (uint8x8_t)vcnt_s8((int8x8_t)v42), v56.i16[0] = vaddlv_u8(v56), v56.u32[0] > 1uLL))
        {
          v55 = std::__next_prime(v55);
        }
        else
        {
          v57 = 1 << -(char)__clz(v55 - 1);
          if (v55 >= 2)
            v55 = v57;
        }
        if (prime <= v55)
          prime = v55;
        if (prime < v42)
LABEL_99:
          std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>(v5, prime);
      }
      v42 = *(_QWORD *)(v5 + 8);
      if ((v42 & (v42 - 1)) != 0)
      {
        if (v41 >= v42)
          v1 = v41 % v42;
        else
          v1 = v41;
      }
      else
      {
        v1 = (v42 - 1) & v41;
      }
    }
    v58 = *(_QWORD *)v5;
    v59 = *(_QWORD **)(*(_QWORD *)v5 + 8 * v1);
    if (v59)
    {
      *v45 = *v59;
    }
    else
    {
      *v45 = *v184;
      *v184 = v45;
      *(_QWORD *)(v58 + 8 * v1) = v184;
      if (!*v45)
        goto LABEL_124;
      v60 = *(_QWORD *)(*v45 + 8);
      if ((v42 & (v42 - 1)) != 0)
      {
        if (v60 >= v42)
          v60 %= v42;
      }
      else
      {
        v60 &= v42 - 1;
      }
      v59 = (_QWORD *)(*(_QWORD *)v5 + 8 * v60);
    }
    *v59 = v45;
LABEL_124:
    ++*(_QWORD *)(v5 + 24);
    v39 = *(_QWORD *)__p;
LABEL_125:
    *(_QWORD *)__p = 0;
    v61 = v45[5];
    v45[5] = v39;
    if (v61)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v61 + 8))(v61);
      v42 = *(_QWORD *)(v5 + 8);
    }
    if (!v42)
      goto LABEL_147;
    v62 = (uint8x8_t)vcnt_s8((int8x8_t)v42);
    v62.i16[0] = vaddlv_u8(v62);
    if (v62.u32[0] > 1uLL)
    {
      v63 = v29;
      if (v29 >= v42)
        v63 = v29 % v42;
    }
    else
    {
      v63 = (v42 - 1) & v29;
    }
    v64 = *(_QWORD **)(*(_QWORD *)v5 + 8 * v63);
    if (!v64 || (v65 = (_QWORD *)*v64) == 0)
    {
LABEL_147:
      v38 = 0;
      goto LABEL_148;
    }
    if (v62.u32[0] < 2uLL)
    {
      while (1)
      {
        v67 = v65[1];
        if (v29 == v67)
        {
          if (v65[2] == v29)
            goto LABEL_162;
        }
        else if ((v67 & (v42 - 1)) != v63)
        {
          goto LABEL_147;
        }
        v65 = (_QWORD *)*v65;
        if (!v65)
          goto LABEL_147;
      }
    }
    while (1)
    {
      v66 = v65[1];
      if (v29 == v66)
        break;
      if (v66 >= v42)
        v66 %= v42;
      if (v66 != v63)
        goto LABEL_147;
LABEL_137:
      v65 = (_QWORD *)*v65;
      if (!v65)
        goto LABEL_147;
    }
    if (v65[2] != v29)
      goto LABEL_137;
LABEL_162:
    v38 = v65[5];
LABEL_148:
    v68 = *(_QWORD *)__p;
    *(_QWORD *)__p = 0;
    if (v68)
      (*(void (**)(uint64_t))(*(_QWORD *)v68 + 8))(v68);
    v28 = (_QWORD *)*v26;
LABEL_151:
    (*(void (**)(_QWORD *, md::LayoutContext *, uint64_t))(*v28 + 88))(v28, v4, v38);
    if (v185)
      (*(void (**)(_QWORD, md::LayoutContext *, uint64_t))(*(_QWORD *)*v26 + 72))(*v26, v4, v38);
    if (objc_msgSend(v186, "isLogicConsoleEnabled:", *(_QWORD *)(*v26 + 8)))
    {
      (*(void (**)(_BYTE *__return_ptr, _QWORD, md::LayoutContext *, uint64_t))(*(_QWORD *)*v26 + 104))(__p, *v26, v4, v38);
      if (v203 >= 0.0)
        v69 = __p;
      else
        v69 = *(_BYTE **)__p;
      if (v203 >= 0.0)
        v70 = HIBYTE(v203);
      else
        v70 = *(_QWORD *)&__p[8];
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(buf, (uint64_t)v69, v70);
      if (SHIBYTE(v203) < 0)
        operator delete(*(void **)__p);
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(buf, (uint64_t)"\n", 1);
    }
LABEL_42:
    if (++v26 != v27)
      continue;
    break;
  }
LABEL_163:
  if (objc_msgSend(v186, "isAnyLogicConsoleEnabled"))
  {
    if ((v197 & 0x10) != 0)
    {
      v75 = *((_QWORD *)&v196 + 1);
      if (*((_QWORD *)&v196 + 1) < v194)
      {
        *((_QWORD *)&v196 + 1) = v194;
        v75 = v194;
      }
      v76 = (const void **)&v193;
    }
    else
    {
      if ((v197 & 8) == 0)
      {
        v71 = 0;
        HIBYTE(v189) = 0;
        p_dst = (void **)&__dst;
        goto LABEL_184;
      }
      v76 = (const void **)v192;
      v75 = v192[2];
    }
    v77 = *v76;
    v71 = v75 - (_QWORD)*v76;
    if (v71 >= 0x7FFFFFFFFFFFFFF8)
      abort();
    if (v71 >= 0x17)
    {
      v78 = (v71 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v71 | 7) != 0x17)
        v78 = v71 | 7;
      v79 = v78 + 1;
      p_dst = (void **)operator new(v78 + 1);
      v188 = v71;
      v189 = v79 | 0x8000000000000000;
      __dst = p_dst;
    }
    else
    {
      HIBYTE(v189) = v75 - *(_BYTE *)v76;
      p_dst = (void **)&__dst;
      if (!v71)
        goto LABEL_184;
    }
    memmove(p_dst, v77, v71);
LABEL_184:
    *((_BYTE *)p_dst + v71) = 0;
    if (*(_QWORD *)v4)
    {
      if ((objc_opt_respondsToSelector() & 1) != 0)
      {
        v80 = (ggl::DebugConsole *)objc_msgSend(*(id *)v4, "debugConsoleForId:", 19);
        v81 = (float32x2_t *)v80;
        if (v80)
        {
          ggl::DebugConsole::begin(v80);
          v81[10] = 0;
          v82 = HIBYTE(v189);
          if (v189 < 0)
            v82 = v188;
          if (v82)
          {
            v83 = *(id *)v4;
            objc_msgSend(v83, "size");
            v85 = v84;
            v86 = *(id *)v4;
            objc_msgSend(v86, "size");
            v87 = v85;
            v89 = v88;
            v90 = *((_QWORD *)v4 + 4);
            v91 = (std::__shared_weak_count *)*((_QWORD *)v4 + 5);
            if (v91)
            {
              p_shared_owners = (unint64_t *)&v91->__shared_owners_;
              do
                v93 = __ldxr(p_shared_owners);
              while (__stxr(v93 + 1, p_shared_owners));
              v94 = *((_QWORD *)v4 + 4);
              v95 = (std::__shared_weak_count *)*((_QWORD *)v4 + 5);
              v96 = *(double *)(v90 + 64);
              if (v95)
              {
                v97 = (unint64_t *)&v95->__shared_owners_;
                do
                  v98 = __ldxr(v97);
                while (__stxr(v98 + 1, v97));
                v99 = 0;
              }
              else
              {
                v99 = 1;
              }
              v90 = v94;
            }
            else
            {
              v95 = 0;
              v96 = *(double *)(v90 + 64);
              v99 = 1;
            }
            v100 = v96;
            v101 = *(unsigned __int8 *)(v90 + 72);
            *(_OWORD *)&__p[4] = 0uLL;
            *(float *)__p = 2.0 / v87;
            v203 = -2.0 / v89;
            v102 = v100 + -1.0;
            if (!v101)
              v102 = 1.0 - v100;
            v204 = 0;
            v205 = 0;
            v206 = v102;
            v207 = 0;
            v208 = (float)-v87 / v87;
            v209 = 1065353216;
            v210 = v100;
            v211 = 1065353216;
            if ((v99 & 1) == 0)
            {
              v103 = (unint64_t *)&v95->__shared_owners_;
              do
                v104 = __ldaxr(v103);
              while (__stlxr(v104 - 1, v103));
              if (!v104)
              {
                ((void (*)(std::__shared_weak_count *))v95->__on_zero_shared)(v95);
                std::__shared_weak_count::__release_weak(v95);
              }
            }
            if (v91)
            {
              v105 = (unint64_t *)&v91->__shared_owners_;
              do
                v106 = __ldaxr(v105);
              while (__stlxr(v106 - 1, v105));
              if (!v106)
              {
                ((void (*)(std::__shared_weak_count *))v91->__on_zero_shared)(v91);
                std::__shared_weak_count::__release_weak(v91);
              }
            }

            v107 = HIBYTE(v189);
            v108 = (void **)&__dst;
            if (v189 < 0)
            {
              v108 = __dst;
              v107 = v188;
            }
            if (v107)
            {
              if (v107 >= 8)
              {
                if (v107 >= 0x20)
                {
                  v112 = 0uLL;
                  v113.i64[0] = 0xA0A0A0A0A0A0A0ALL;
                  v113.i64[1] = 0xA0A0A0A0A0A0A0ALL;
                  v114 = (int8x16_t)vdupq_n_s64(1uLL);
                  v111 = v107 & 0xFFFFFFFFFFFFFFE0;
                  v115 = 0uLL;
                  v116 = (int8x16_t *)(v108 + 2);
                  v117 = 0uLL;
                  v118 = v107 & 0xFFFFFFFFFFFFFFE0;
                  v119 = 0uLL;
                  v120 = 0uLL;
                  v121 = 0uLL;
                  v122 = 0uLL;
                  v123 = 0uLL;
                  v124 = 0uLL;
                  v125 = 0uLL;
                  v126 = 0uLL;
                  v127 = 0uLL;
                  v128 = 0uLL;
                  v129 = 0uLL;
                  v130 = 0uLL;
                  v131 = 0uLL;
                  do
                  {
                    v132 = (uint8x16_t)vceqq_s8(v116[-1], v113);
                    v133 = vmovl_u8(*(uint8x8_t *)v132.i8);
                    v134 = vmovl_high_u8(v132);
                    v135 = vmovl_high_u16(v134);
                    v136.i64[0] = v135.u32[2];
                    v136.i64[1] = v135.u32[3];
                    v123 = vaddq_s64(v123, (int64x2_t)vandq_s8(v136, v114));
                    v137 = vmovl_high_u16(v133);
                    v138 = vmovl_u16(*(uint16x4_t *)v134.i8);
                    v136.i64[0] = v135.u32[0];
                    v136.i64[1] = v135.u32[1];
                    v122 = vaddq_s64(v122, (int64x2_t)vandq_s8(v136, v114));
                    v136.i64[0] = v138.u32[2];
                    v136.i64[1] = v138.u32[3];
                    v121 = vaddq_s64(v121, (int64x2_t)vandq_s8(v136, v114));
                    v136.i64[0] = v137.u32[2];
                    v136.i64[1] = v137.u32[3];
                    v119 = vaddq_s64(v119, (int64x2_t)vandq_s8(v136, v114));
                    v139 = *v116;
                    v116 += 2;
                    v140 = vmovl_u16(*(uint16x4_t *)v133.i8);
                    v136.i64[0] = v138.u32[0];
                    v136.i64[1] = v138.u32[1];
                    v120 = vaddq_s64(v120, (int64x2_t)vandq_s8(v136, v114));
                    v136.i64[0] = v140.u32[0];
                    v136.i64[1] = v140.u32[1];
                    v141 = (int64x2_t)vandq_s8(v136, v114);
                    v136.i64[0] = v140.u32[2];
                    v136.i64[1] = v140.u32[3];
                    v142 = (int64x2_t)vandq_s8(v136, v114);
                    v136.i64[0] = v137.u32[0];
                    v136.i64[1] = v137.u32[1];
                    v143 = (uint8x16_t)vceqq_s8(v139, v113);
                    v117 = vaddq_s64(v117, (int64x2_t)vandq_s8(v136, v114));
                    v144 = vmovl_u8(*(uint8x8_t *)v143.i8);
                    v145 = vmovl_high_u8(v143);
                    v115 = vaddq_s64(v115, v142);
                    v146 = vmovl_high_u16(v145);
                    v112 = vaddq_s64(v112, v141);
                    v136.i64[0] = v146.u32[2];
                    v136.i64[1] = v146.u32[3];
                    v131 = vaddq_s64(v131, (int64x2_t)vandq_s8(v136, v114));
                    v147 = vmovl_high_u16(v144);
                    v148 = vmovl_u16(*(uint16x4_t *)v145.i8);
                    v136.i64[0] = v146.u32[0];
                    v136.i64[1] = v146.u32[1];
                    v130 = vaddq_s64(v130, (int64x2_t)vandq_s8(v136, v114));
                    v136.i64[0] = v148.u32[2];
                    v136.i64[1] = v148.u32[3];
                    v129 = vaddq_s64(v129, (int64x2_t)vandq_s8(v136, v114));
                    v136.i64[0] = v147.u32[2];
                    v136.i64[1] = v147.u32[3];
                    v127 = vaddq_s64(v127, (int64x2_t)vandq_s8(v136, v114));
                    v136.i64[0] = v148.u32[0];
                    v136.i64[1] = v148.u32[1];
                    v128 = vaddq_s64(v128, (int64x2_t)vandq_s8(v136, v114));
                    v149 = vmovl_u16(*(uint16x4_t *)v144.i8);
                    v136.i64[0] = v147.u32[0];
                    v136.i64[1] = v147.u32[1];
                    v126 = vaddq_s64(v126, (int64x2_t)vandq_s8(v136, v114));
                    v136.i64[0] = v149.u32[2];
                    v136.i64[1] = v149.u32[3];
                    v125 = vaddq_s64(v125, (int64x2_t)vandq_s8(v136, v114));
                    v136.i64[0] = v149.u32[0];
                    v136.i64[1] = v149.u32[1];
                    v124 = vaddq_s64(v124, (int64x2_t)vandq_s8(v136, v114));
                    v118 -= 32;
                  }
                  while (v118);
                  v109 = vaddvq_s64(vaddq_s64(vaddq_s64(vaddq_s64(vaddq_s64(v124, v112), vaddq_s64(v128, v120)), vaddq_s64(vaddq_s64(v126, v117), vaddq_s64(v130, v122))), vaddq_s64(vaddq_s64(vaddq_s64(v125, v115), vaddq_s64(v129, v121)), vaddq_s64(vaddq_s64(v127, v119), vaddq_s64(v131, v123)))));
                  if (v107 == v111)
                    goto LABEL_232;
                  if ((v107 & 0x18) == 0)
                  {
                    v110 = (void **)((char *)v108 + v111);
                    goto LABEL_228;
                  }
                }
                else
                {
                  v109 = 0;
                  v111 = 0;
                }
                v150 = v107 & 0xFFFFFFFFFFFFFFF8;
                v151 = 0uLL;
                v152 = (int64x2_t)v109;
                v153 = v111 - (v107 & 0xFFFFFFFFFFFFFFF8);
                v154 = (int8x8_t *)((char *)v108 + v111);
                v155 = (int8x16_t)vdupq_n_s64(1uLL);
                v156 = 0uLL;
                v157 = 0uLL;
                do
                {
                  v158 = *v154++;
                  v159 = vmovl_u8((uint8x8_t)vceq_s8(v158, (int8x8_t)0xA0A0A0A0A0A0A0ALL));
                  v160 = vmovl_u16(*(uint16x4_t *)v159.i8);
                  v161.i64[0] = v160.u32[0];
                  v161.i64[1] = v160.u32[1];
                  v162 = (int64x2_t)vandq_s8(v161, v155);
                  v161.i64[0] = v160.u32[2];
                  v161.i64[1] = v160.u32[3];
                  v163 = (int64x2_t)vandq_s8(v161, v155);
                  v164 = vmovl_high_u16(v159);
                  v161.i64[0] = v164.u32[0];
                  v161.i64[1] = v164.u32[1];
                  v165 = (int64x2_t)vandq_s8(v161, v155);
                  v161.i64[0] = v164.u32[2];
                  v161.i64[1] = v164.u32[3];
                  v157 = vaddq_s64(v157, (int64x2_t)vandq_s8(v161, v155));
                  v156 = vaddq_s64(v156, v165);
                  v151 = vaddq_s64(v151, v163);
                  v152 = vaddq_s64(v152, v162);
                  v153 += 8;
                }
                while (v153);
                v109 = vaddvq_s64(vaddq_s64(vaddq_s64(v152, v156), vaddq_s64(v151, v157)));
                if (v107 != v150)
                {
                  v110 = (void **)((char *)v108 + v150);
                  goto LABEL_228;
                }
              }
              else
              {
                v109 = 0;
                v110 = v108;
LABEL_228:
                v166 = (unsigned __int8 *)v108 + v107;
                do
                {
                  v167 = *(unsigned __int8 *)v110;
                  v110 = (void **)((char *)v110 + 1);
                  if (v167 == 10)
                    ++v109;
                }
                while (v110 != (void **)v166);
              }
LABEL_232:
              if (v109)
              {
                ggl::DebugConsole::setProjection((uint64_t)v81, __p);
                v81[12].i32[0] = -16777216;
                md::LayoutContext::frameState(v4);
                v169 = *(float *)(v168 + 36);
                md::LayoutContext::frameState(v4);
                v171 = *(float *)(v170 + 32);
                v81[12].i32[0] = 0x80000000;
                v172 = *(id *)v4;
                objc_msgSend(v172, "size");
                v173 = v169 + 10.0;
                v174 = v171 + 50.0;
                *(float *)&v175 = v175;
                *(float *)&v176 = v174 + (float)(v81[3].f32[1] * (float)v109);
                v199 = v173;
                v200 = v174;
                v201 = __PAIR64__(v176, LODWORD(v175));
                v81[1].f32[0] = v173;
                v81[1].f32[1] = v174;
                ggl::DebugConsole::drawRectangleWithFill(v81, (float32x2_t *)&v201, *(float32_t *)&v175);

                v81[1].f32[0] = v173;
                v81[1].f32[1] = v174;
                v81[12].i32[0] = -1;
                if (v189 >= 0)
                  v177 = (int8x16_t *)&__dst;
                else
                  v177 = (int8x16_t *)__dst;
                v178 = strlen(v177->i8);
                ggl::DebugConsole::drawString((uint64_t)v81, v177, v178, v179, v180);
              }
            }
          }
          ggl::DebugConsole::end((uint64_t)v81);
        }
      }
    }
    if (SHIBYTE(v189) < 0)
      operator delete(__dst);
    *(_BYTE *)(v183 + 81) = 1;
  }
  else if (*(_BYTE *)(v183 + 81))
  {
    *(_BYTE *)(v183 + 81) = 0;
    if (*(_QWORD *)v4)
    {
      if ((objc_opt_respondsToSelector() & 1) != 0)
      {
        v73 = (ggl::DebugConsole *)objc_msgSend(*(id *)v4, "debugConsoleForId:", 19);
        v74 = (uint64_t)v73;
        if (v73)
        {
          ggl::DebugConsole::begin(v73);
          *(_QWORD *)(v74 + 80) = 0;
          ggl::DebugConsole::end(v74);
        }
      }
    }
  }
  *(_QWORD *)buf = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)&buf[*(_QWORD *)(*(_QWORD *)buf - 24)] = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  v191 = MEMORY[0x1E0DE4FB8] + 16;
  if (SBYTE7(v196) < 0)
    operator delete(v195[0]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1A1AF4D64](v198);

  if (!v219)
  {
    std::__throw_bad_function_call[abi:nn180100]();
    goto LABEL_254;
  }
  (*(void (**)(_QWORD *))(*v219 + 48))(v219);
  result = v219;
  if (v219 == v218)
  {
    v182 = 4;
    result = v218;
    return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v182))();
  }
  else if (v219)
  {
    v182 = 5;
    return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v182))();
  }
  return result;
}

void sub_19FAB956C(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

void std::__function::__func<md::MapEngine::runUpdatePhase(double,BOOL)::$_3,std::allocator<md::MapEngine::runUpdatePhase(double,BOOL)::$_3>,void ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::MapEngine::runUpdatePhase(double,BOOL)::$_3,std::allocator<md::MapEngine::runUpdatePhase(double,BOOL)::$_3>,void ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42D4B10;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<md::MapEngine::runUpdatePhase(double,BOOL)::$_3,std::allocator<md::MapEngine::runUpdatePhase(double,BOOL)::$_3>,void ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42D4B10;
  a2[1] = v2;
  return result;
}

void std::__function::__func<md::MapEngine::runUpdatePhase(double,BOOL)::$_3,std::allocator<md::MapEngine::runUpdatePhase(double,BOOL)::$_3>,void ()(void)>::operator()(uint64_t a1)
{
  uint64_t v1;
  NSObject *v2;
  NSObject *v3;
  os_signpost_id_t v4;
  uint8_t v5[16];

  v1 = *(_QWORD *)(a1 + 8);
  if (GEOGetVectorKitPerformanceLog_onceToken != -1)
    dispatch_once(&GEOGetVectorKitPerformanceLog_onceToken, &__block_literal_global_13_11780);
  v2 = (id)GEOGetVectorKitPerformanceLog_log;
  v3 = v2;
  v4 = *(_QWORD *)(v1 + 1216);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)v5 = 0;
    _os_signpost_emit_with_name_impl(&dword_19F029000, v3, OS_SIGNPOST_INTERVAL_END, v4, "RunLogicBefore", (const char *)&unk_1A0189141, v5, 2u);
  }

}

void std::__function::__func<md::MapEngine::runUpdatePhase(double,BOOL)::$_2,std::allocator<md::MapEngine::runUpdatePhase(double,BOOL)::$_2>,void ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::MapEngine::runUpdatePhase(double,BOOL)::$_2,std::allocator<md::MapEngine::runUpdatePhase(double,BOOL)::$_2>,void ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42D4AC8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<md::MapEngine::runUpdatePhase(double,BOOL)::$_2,std::allocator<md::MapEngine::runUpdatePhase(double,BOOL)::$_2>,void ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42D4AC8;
  a2[1] = v2;
  return result;
}

void std::__function::__func<md::MapEngine::runUpdatePhase(double,BOOL)::$_2,std::allocator<md::MapEngine::runUpdatePhase(double,BOOL)::$_2>,void ()(void)>::operator()(uint64_t a1)
{
  uint64_t v1;
  NSObject *v2;
  NSObject *v3;
  os_signpost_id_t v4;
  uint8_t v5[16];

  v1 = *(_QWORD *)(a1 + 8);
  if (GEOGetVectorKitPerformanceLog_onceToken != -1)
    dispatch_once(&GEOGetVectorKitPerformanceLog_onceToken, &__block_literal_global_13_11780);
  v2 = (id)GEOGetVectorKitPerformanceLog_log;
  v3 = v2;
  v4 = *(_QWORD *)(v1 + 1216);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)v5 = 0;
    _os_signpost_emit_with_name_impl(&dword_19F029000, v3, OS_SIGNPOST_INTERVAL_BEGIN, v4, "RunLogicBefore", (const char *)&unk_1A0189141, v5, 2u);
  }

}

void std::__function::__func<md::MapEngine::runUpdatePhase(double,BOOL)::$_1,std::allocator<md::MapEngine::runUpdatePhase(double,BOOL)::$_1>,void ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::MapEngine::runUpdatePhase(double,BOOL)::$_1,std::allocator<md::MapEngine::runUpdatePhase(double,BOOL)::$_1>,void ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42D4A80;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<md::MapEngine::runUpdatePhase(double,BOOL)::$_1,std::allocator<md::MapEngine::runUpdatePhase(double,BOOL)::$_1>,void ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42D4A80;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<md::MapEngine::runUpdatePhase(double,BOOL)::$_1,std::allocator<md::MapEngine::runUpdatePhase(double,BOOL)::$_1>,void ()(void)>::operator()(uint64_t result)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t i;
  uint64_t v4;
  uint64_t v5;
  uint64_t j;

  v1 = *(_QWORD **)(*(_QWORD *)(result + 8) + 896);
  v2 = v1[10];
  for (i = v1[11]; v2 != i; v2 += 16)
    *(_QWORD *)(*(_QWORD *)(v2 + 8) + 64) = *(_QWORD *)(v2 + 8);
  v4 = *(_QWORD *)(v1[3] + 56);
  v5 = *(_QWORD *)(v4 + 56);
  for (j = *(_QWORD *)(v4 + 64); v5 != j; v5 += 24)
    *(_QWORD *)(*(_QWORD *)(v5 + 8) + 408) = *(_QWORD *)(v5 + 8) + 344;
  return result;
}

void std::__function::__func<std::__bind<void (md::MapEngine::*)(double),md::MapEngine*,std::placeholders::__ph<1> const&>,std::allocator<std::__bind<void (md::MapEngine::*)(double),md::MapEngine*,std::placeholders::__ph<1> const&>>,void ()(double)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

__n128 std::__function::__func<std::__bind<void (md::MapEngine::*)(double),md::MapEngine*,std::placeholders::__ph<1> const&>,std::allocator<std::__bind<void (md::MapEngine::*)(double),md::MapEngine*,std::placeholders::__ph<1> const&>>,void ()(double)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E42C6D08;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<md::MapEngine::MapEngineDisplayLinkCaller,std::allocator<md::MapEngine::MapEngineDisplayLinkCaller>,void ()(double)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::MapEngine::MapEngineDisplayLinkCaller,std::allocator<md::MapEngine::MapEngineDisplayLinkCaller>,void ()(double)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E4275C58;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<md::MapEngine::MapEngineDisplayLinkCaller,std::allocator<md::MapEngine::MapEngineDisplayLinkCaller>,void ()(double)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E4275C58;
  a2[1] = v2;
  return result;
}

_QWORD *std::__function::__func<md::MapEngine::MapEngineDisplayLinkCaller,std::allocator<md::MapEngine::MapEngineDisplayLinkCaller>,void ()(double)>::operator()(uint64_t a1)
{
  md::MapEngine *v1;
  uint64_t v2;
  _QWORD *result;
  double v4;
  uint64_t v5;
  char v6;
  _QWORD v7[3];
  _QWORD *v8;
  int v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  v1 = *(md::MapEngine **)(a1 + 8);
  if (md::MapEngine::canRenderAsync(v1))
  {
    v2 = *((_QWORD *)v1 + 566);
    v9 = 0;
    result = (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)v2 + 16))(v2, v7);
    if (v9 != -1)
      return (_QWORD *)((uint64_t (*)(char *, _QWORD *))off_1E42F3138[v9])(&v6, v7);
  }
  else
  {
    v4 = CACurrentMediaTime();
    v7[0] = &off_1E427CBB8;
    v8 = v7;
    md::MapEngine::onRenderTimerFired((uint64_t)v1, v7, v4);
    result = v8;
    if (v8 == v7)
    {
      v5 = 4;
      result = v7;
    }
    else
    {
      if (!v8)
        return result;
      v5 = 5;
    }
    return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v5))();
  }
  return result;
}

void sub_19FAB9A3C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, __int16 a10, char a11, char a12, char a13, uint64_t a14, uint64_t a15, char *a16, uint64_t a17, int a18)
{
  char *v18;
  char *v20;
  uint64_t v21;

  v20 = a16;
  if (a16 == v18)
  {
    v21 = 4;
    v20 = &a13;
  }
  else
  {
    if (!a16)
      _Unwind_Resume(exception_object);
    v21 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v20 + 8 * v21))();
  _Unwind_Resume(exception_object);
}

uint64_t md::MapEngine::buildFrameRequest(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  unint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t (***v16)();
  uint64_t v17;
  uint64_t v19;
  uint64_t (**v20)();
  uint64_t v21;
  CFTimeInterval v22;
  uint64_t (***v23)();
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v6 = *(_QWORD *)(a1 + 4512);
  v7 = *(_QWORD **)v6;
  v8 = *(_QWORD **)(v6 + 8);
  if (v7 != v8)
  {
    while (*v7 != 0x8C3843AC816FCBCLL)
    {
      v7 += 5;
      if (v7 == v8)
        goto LABEL_12;
    }
  }
  if (v7 == v8)
  {
LABEL_12:
    v9 = 0;
  }
  else
  {
    v9 = v7[3];
    v10 = (std::__shared_weak_count *)v7[4];
    if (v10)
    {
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v12 = __ldxr(p_shared_owners);
      while (__stxr(v12 + 1, p_shared_owners));
      do
        v13 = __ldaxr(p_shared_owners);
      while (__stlxr(v13 - 1, p_shared_owners));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
  }
  LOBYTE(v20) = *(_QWORD *)(a1 + 1200) == 1;
  HIDWORD(v20) = a2;
  LOBYTE(v21) = BYTE4(a2);
  v22 = CACurrentMediaTime();
  objc_msgSend(*(id *)(a1 + 840), "renderSource");
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  LOBYTE(v23) = objc_msgSend(v14, "isDelayedRenderQueueConsumptionSupported") ^ 1;
  v15 = (*(uint64_t (**)(uint64_t, uint64_t (***)()))(*(_QWORD *)v9 + 16))(v9, &v20);

  if (*(_QWORD *)(a3 + 24))
    (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v9 + 64))(v9, v15, 0, a3);
  v19 = v15;
  objc_msgSend(*(id *)(a1 + 840), "prepareRenderTask:", &v19);
  if (!*(_QWORD *)(a1 + 1200))
  {
    v20 = &off_1E427CB70;
    v21 = a1;
    v23 = &v20;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t (***)()))(*(_QWORD *)v9 + 64))(v9, v15, 2, &v20);
    v16 = v23;
    if (v23 == &v20)
    {
      v17 = 4;
      v16 = &v20;
      goto LABEL_20;
    }
    if (v23)
    {
      v17 = 5;
LABEL_20:
      (*v16)[v17]();
    }
  }
  return v15;
}

void sub_19FAB9CA0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      _Unwind_Resume(exception_object);
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
  _Unwind_Resume(exception_object);
}

void std::__function::__func<md::MapEngine::buildFrameRequest(std::optional<unsigned int>,std::function<void ()(void)>)::$_0,std::allocator<md::MapEngine::buildFrameRequest(std::optional<unsigned int>,std::function<void ()(void)>)::$_0>,void ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::MapEngine::buildFrameRequest(std::optional<unsigned int>,std::function<void ()(void)>)::$_0,std::allocator<md::MapEngine::buildFrameRequest(std::optional<unsigned int>,std::function<void ()(void)>)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E427CB70;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<md::MapEngine::buildFrameRequest(std::optional<unsigned int>,std::function<void ()(void)>)::$_0,std::allocator<md::MapEngine::buildFrameRequest(std::optional<unsigned int>,std::function<void ()(void)>)::$_0>,void ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E427CB70;
  a2[1] = v2;
  return result;
}

void std::__function::__func<md::MapEngine::buildFrameRequest(std::optional<unsigned int>,std::function<void ()(void)>)::$_0,std::allocator<md::MapEngine::buildFrameRequest(std::optional<unsigned int>,std::function<void ()(void)>)::$_0>,void ()(void)>::operator()(uint64_t a1)
{
  id *v1;
  id WeakRetained;
  id v3;

  v1 = (id *)(*(_QWORD *)(a1 + 8) + 848);
  WeakRetained = objc_loadWeakRetained(v1);

  if (WeakRetained)
  {
    v3 = objc_loadWeakRetained(v1);
    objc_msgSend(v3, "didPresent");

  }
}

void sub_19FAB9DB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

_QWORD *std::__function::__func<md::MapEngine::_renderSceneAsync(double,std::function<void ()(void)>,std::function<void ()(void)>)::$_0,std::allocator<md::MapEngine::_renderSceneAsync(double,std::function<void ()(void)>,std::function<void ()(void)>)::$_0>,void ()(void)>::~__func(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  *a1 = &off_1E427CB28;
  v2 = a1 + 3;
  v3 = (_QWORD *)a1[6];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

void std::__function::__func<md::MapEngine::_renderSceneAsync(double,std::function<void ()(void)>,std::function<void ()(void)>)::$_0,std::allocator<md::MapEngine::_renderSceneAsync(double,std::function<void ()(void)>,std::function<void ()(void)>)::$_0>,void ()(void)>::~__func(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  *a1 = &off_1E427CB28;
  v1 = a1 + 3;
  v2 = (_QWORD *)a1[6];
  if (v2 == v1)
  {
    v3 = 4;
    v2 = v1;
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::MapEngine::_renderSceneAsync(double,std::function<void ()(void)>,std::function<void ()(void)>)::$_0,std::allocator<md::MapEngine::_renderSceneAsync(double,std::function<void ()(void)>,std::function<void ()(void)>)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  v2 = operator new(0x38uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *v2 = &off_1E427CB28;
  v2[1] = v3;
  *((_DWORD *)v2 + 4) = *(_DWORD *)(a1 + 16);
  v4 = *(_QWORD *)(a1 + 48);
  if (v4)
  {
    if (v4 == a1 + 24)
    {
      v2[6] = v2 + 3;
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
      return v2;
    }
    v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
  }
  v2[6] = v4;
  return v2;
}

void sub_19FAB9F14(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<md::MapEngine::_renderSceneAsync(double,std::function<void ()(void)>,std::function<void ()(void)>)::$_0,std::allocator<md::MapEngine::_renderSceneAsync(double,std::function<void ()(void)>,std::function<void ()(void)>)::$_0>,void ()(void)>::__clone(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)a2 = &off_1E427CB28;
  v3 = *(_QWORD *)(result + 8);
  *(_DWORD *)(a2 + 16) = *(_DWORD *)(result + 16);
  *(_QWORD *)(a2 + 8) = v3;
  v4 = *(_QWORD *)(result + 48);
  if (v4)
  {
    if (v4 == result + 24)
    {
      *(_QWORD *)(a2 + 48) = a2 + 24;
      return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(result + 48) + 24))(*(_QWORD *)(result + 48));
    }
    else
    {
      result = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v4 + 16))(*(_QWORD *)(result + 48));
      *(_QWORD *)(a2 + 48) = result;
    }
  }
  else
  {
    *(_QWORD *)(a2 + 48) = 0;
  }
  return result;
}

_QWORD *std::__function::__func<md::MapEngine::_renderSceneAsync(double,std::function<void ()(void)>,std::function<void ()(void)>)::$_0,std::allocator<md::MapEngine::_renderSceneAsync(double,std::function<void ()(void)>,std::function<void ()(void)>)::$_0>,void ()(void)>::destroy(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *result;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 24);
  result = *(_QWORD **)(a1 + 48);
  if (result == v1)
  {
    v3 = 4;
    result = v1;
  }
  else
  {
    if (!result)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

void std::__function::__func<md::MapEngine::_renderSceneAsync(double,std::function<void ()(void)>,std::function<void ()(void)>)::$_0,std::allocator<md::MapEngine::_renderSceneAsync(double,std::function<void ()(void)>,std::function<void ()(void)>)::$_0>,void ()(void)>::destroy_deallocate(char *__p)
{
  char *v2;
  char *v3;
  uint64_t v4;

  v2 = __p + 24;
  v3 = (char *)*((_QWORD *)__p + 6);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
  }
  operator delete(__p);
}

uint64_t std::__function::__func<md::MapEngine::_renderSceneAsync(double,std::function<void ()(void)>,std::function<void ()(void)>)::$_0,std::allocator<md::MapEngine::_renderSceneAsync(double,std::function<void ()(void)>,std::function<void ()(void)>)::$_0>,void ()(void)>::operator()(uint64_t a1)
{
  uint64_t v2;
  int v3;
  NSObject *v4;
  NSObject *v5;
  os_signpost_id_t v6;
  uint64_t v7;
  _Unwind_Exception *v9;
  _Unwind_Exception *v10;
  uint8_t v11[16];

  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 4536);
  v3 = *(_DWORD *)(a1 + 16);
  std::mutex::lock((std::mutex *)(v2 + 176));
  if (*(_BYTE *)(v2 + 292) && *(_DWORD *)(v2 + 288) == v3)
  {
    geo::concurrent_queue_base<std::function<void ()(void)>,geo::BasicStoragePolicy<std::function<void ()(void)>>>::close(v2);
    if (*(_BYTE *)(v2 + 292))
      *(_BYTE *)(v2 + 292) = 0;
    if (GEOGetVectorKitPerformanceLog_onceToken != -1)
      dispatch_once(&GEOGetVectorKitPerformanceLog_onceToken, &__block_literal_global_13_11780);
    v4 = (id)GEOGetVectorKitPerformanceLog_log;
    v5 = v4;
    v6 = *(_QWORD *)(v2 + 296);
    if (v6 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v4))
    {
      *(_WORD *)v11 = 0;
      _os_signpost_emit_with_name_impl(&dword_19F029000, v5, OS_SIGNPOST_INTERVAL_END, v6, "HomeQueueReservation", (const char *)&unk_1A0189141, v11, 2u);
    }

    std::mutex::unlock((std::mutex *)(v2 + 176));
    std::condition_variable::notify_one((std::condition_variable *)(v2 + 240));
  }
  else
  {
    std::mutex::unlock((std::mutex *)(v2 + 176));
  }
  v7 = *(_QWORD *)(a1 + 48);
  if (!v7)
  {
    std::__throw_bad_function_call[abi:nn180100]();
    v10 = v9;
    std::mutex::unlock((std::mutex *)(v2 + 176));
    _Unwind_Resume(v10);
  }
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 48))(v7);
}

void std::__function::__func<md::MapEngine::onRenderTimerFired(double,std::function<void ()(void)>)::$_0,std::allocator<md::MapEngine::onRenderTimerFired(double,std::function<void ()(void)>)::$_0>,void ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::MapEngine::onRenderTimerFired(double,std::function<void ()(void)>)::$_0,std::allocator<md::MapEngine::onRenderTimerFired(double,std::function<void ()(void)>)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;

  result = operator new(0x18uLL);
  v3 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  *result = &off_1E42D4BA0;
  result[1] = v3;
  result[2] = v4;
  return result;
}

uint64_t std::__function::__func<md::MapEngine::onRenderTimerFired(double,std::function<void ()(void)>)::$_0,std::allocator<md::MapEngine::onRenderTimerFired(double,std::function<void ()(void)>)::$_0>,void ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(result + 8);
  v3 = *(_QWORD *)(result + 16);
  *a2 = &off_1E42D4BA0;
  a2[1] = v2;
  a2[2] = v3;
  return result;
}

void std::__function::__func<md::MapEngine::onRenderTimerFired(double,std::function<void ()(void)>)::$_0,std::allocator<md::MapEngine::onRenderTimerFired(double,std::function<void ()(void)>)::$_0>,void ()(void)>::operator()(uint64_t a1)
{
  md::MapEngine *v1;
  double v2;
  NSObject *v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  NSObject *v8;
  NSObject *v9;
  os_signpost_id_t v10;
  int v11;
  double v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v1 = *(md::MapEngine **)(a1 + 8);
  v2 = (double)(std::chrono::steady_clock::now().__d_.__rep_ - *(_QWORD *)(a1 + 16)) * 0.000001;
  gdc::Statistics::addSampleValue(*((_QWORD *)v1 + 143), "Frame-time", 0x77E34BC70000000AuLL, v2);
  gdc::Statistics::addHistogramValue(*((_QWORD *)v1 + 143), "Frame-time", 0x77E34BC70000000AuLL, v2, 1.0);
  if (v2 > 16.6666667)
  {
    gdc::Statistics::addSampleValue(*((_QWORD *)v1 + 143), "Frame-drops", 0xCDB00E350000000BLL, 1.0);
    if (GEOGetVectorKitPerformanceLog_onceToken != -1)
      dispatch_once(&GEOGetVectorKitPerformanceLog_onceToken, &__block_literal_global_13_11780);
    v3 = (id)GEOGetVectorKitPerformanceLog_log;
    if (os_signpost_enabled(v3))
    {
      v11 = 134217984;
      v12 = v2;
      _os_signpost_emit_with_name_impl(&dword_19F029000, v3, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "FrameDrop", "frameTime=%f", (uint8_t *)&v11, 0xCu);
    }

  }
  if (*((_QWORD *)v1 + 103))
  {
    v4 = *((_QWORD *)v1 + 143);
    if (ggl::Performance::Counters::instance(void)::onceToken[0] != -1)
      dispatch_once(ggl::Performance::Counters::instance(void)::onceToken, &__block_literal_global_40952);
    v5 = atomic_load((unint64_t *)(*(_QWORD *)(ggl::Performance::Counters::instance(void)::counters + 32) + 24));
    gdc::Statistics::addSampleValue(v4, "Primitives", 0x4573984A0000000AuLL, (double)v5);
    v6 = *((_QWORD *)v1 + 143);
    if (ggl::Performance::Counters::instance(void)::onceToken[0] != -1)
      dispatch_once(ggl::Performance::Counters::instance(void)::onceToken, &__block_literal_global_40952);
    v7 = atomic_load((unint64_t *)(*(_QWORD *)(ggl::Performance::Counters::instance(void)::counters + 32) + 16));
    gdc::Statistics::addSampleValue(v6, "Draw-calls", 0x38B3D7050000000AuLL, (double)v7);
  }
  md::MapEngine::updateRunLoopStatus(v1);
  if (GEOGetVectorKitPerformanceLog_onceToken != -1)
    dispatch_once(&GEOGetVectorKitPerformanceLog_onceToken, &__block_literal_global_13_11780);
  v8 = (id)GEOGetVectorKitPerformanceLog_log;
  v9 = v8;
  v10 = *((_QWORD *)v1 + 152);
  if (v10 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v8))
  {
    LOWORD(v11) = 0;
    _os_signpost_emit_with_name_impl(&dword_19F029000, v9, OS_SIGNPOST_INTERVAL_END, v10, "Frame", (const char *)&unk_1A0189141, (uint8_t *)&v11, 2u);
  }

}

void std::__function::__func<md::MapEngine::onDisplayLinkFired(double)::$_0,std::allocator<md::MapEngine::onDisplayLinkFired(double)::$_0>,void ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::MapEngine::onDisplayLinkFired(double)::$_0,std::allocator<md::MapEngine::onDisplayLinkFired(double)::$_0>,void ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E427CBB8;
  return result;
}

void std::__function::__func<md::MapEngine::onDisplayLinkFired(double)::$_0,std::allocator<md::MapEngine::onDisplayLinkFired(double)::$_0>,void ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E427CBB8;
}

void std::__shared_ptr_emplace<ggl::DisplayLink>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DE810;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::DisplayLink>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DE810;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<ggl::DisplayLink>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__function::__func<md::MapEngine::MapEngine(float,float,float,BOOL,VKMapViewPurpose,std::shared_ptr<md::TaskContext> const&,VKMapPurpose,std::unique_ptr<md::AnimationManager>,geo::linear_map<md::MapEngineSetting,long long,std::equal_to<md::MapEngineSetting>,std::allocator<std::pair<md::MapEngineSetting,long long>>,std::vector<std::pair<md::MapEngineSetting,long long>>> const&,unsigned long long,GEOApplicationAuditToken *)::$_1,std::allocator<md::MapEngine::MapEngine(float,float,float,BOOL,VKMapViewPurpose,std::shared_ptr<md::TaskContext> const&,VKMapPurpose,std::unique_ptr<md::AnimationManager>,geo::linear_map<md::MapEngineSetting,long long,std::equal_to<md::MapEngineSetting>,std::allocator<std::pair<md::MapEngineSetting,long long>>,std::vector<std::pair<md::MapEngineSetting,long long>>> const&,unsigned long long,GEOApplicationAuditToken *)::$_1>,void ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::MapEngine::MapEngine(float,float,float,BOOL,VKMapViewPurpose,std::shared_ptr<md::TaskContext> const&,VKMapPurpose,std::unique_ptr<md::AnimationManager>,geo::linear_map<md::MapEngineSetting,long long,std::equal_to<md::MapEngineSetting>,std::allocator<std::pair<md::MapEngineSetting,long long>>,std::vector<std::pair<md::MapEngineSetting,long long>>> const&,unsigned long long,GEOApplicationAuditToken *)::$_1,std::allocator<md::MapEngine::MapEngine(float,float,float,BOOL,VKMapViewPurpose,std::shared_ptr<md::TaskContext> const&,VKMapPurpose,std::unique_ptr<md::AnimationManager>,geo::linear_map<md::MapEngineSetting,long long,std::equal_to<md::MapEngineSetting>,std::allocator<std::pair<md::MapEngineSetting,long long>>,std::vector<std::pair<md::MapEngineSetting,long long>>> const&,unsigned long long,GEOApplicationAuditToken *)::$_1>,void ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42D4D98;
  result[1] = v3;
  return result;
}

void std::__function::__func<md::MapEngine::MapEngine(float,float,float,BOOL,VKMapViewPurpose,std::shared_ptr<md::TaskContext> const&,VKMapPurpose,std::unique_ptr<md::AnimationManager>,geo::linear_map<md::MapEngineSetting,long long,std::equal_to<md::MapEngineSetting>,std::allocator<std::pair<md::MapEngineSetting,long long>>,std::vector<std::pair<md::MapEngineSetting,long long>>> const&,unsigned long long,GEOApplicationAuditToken *)::$_0,std::allocator<md::MapEngine::MapEngine(float,float,float,BOOL,VKMapViewPurpose,std::shared_ptr<md::TaskContext> const&,VKMapPurpose,std::unique_ptr<md::AnimationManager>,geo::linear_map<md::MapEngineSetting,long long,std::equal_to<md::MapEngineSetting>,std::allocator<std::pair<md::MapEngineSetting,long long>>,std::vector<std::pair<md::MapEngineSetting,long long>>> const&,unsigned long long,GEOApplicationAuditToken *)::$_0>,void ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::MapEngine::MapEngine(float,float,float,BOOL,VKMapViewPurpose,std::shared_ptr<md::TaskContext> const&,VKMapPurpose,std::unique_ptr<md::AnimationManager>,geo::linear_map<md::MapEngineSetting,long long,std::equal_to<md::MapEngineSetting>,std::allocator<std::pair<md::MapEngineSetting,long long>>,std::vector<std::pair<md::MapEngineSetting,long long>>> const&,unsigned long long,GEOApplicationAuditToken *)::$_0,std::allocator<md::MapEngine::MapEngine(float,float,float,BOOL,VKMapViewPurpose,std::shared_ptr<md::TaskContext> const&,VKMapPurpose,std::unique_ptr<md::AnimationManager>,geo::linear_map<md::MapEngineSetting,long long,std::equal_to<md::MapEngineSetting>,std::allocator<std::pair<md::MapEngineSetting,long long>>,std::vector<std::pair<md::MapEngineSetting,long long>>> const&,unsigned long long,GEOApplicationAuditToken *)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42D4D50;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<md::MapEngine::MapEngine(float,float,float,BOOL,VKMapViewPurpose,std::shared_ptr<md::TaskContext> const&,VKMapPurpose,std::unique_ptr<md::AnimationManager>,geo::linear_map<md::MapEngineSetting,long long,std::equal_to<md::MapEngineSetting>,std::allocator<std::pair<md::MapEngineSetting,long long>>,std::vector<std::pair<md::MapEngineSetting,long long>>> const&,unsigned long long,GEOApplicationAuditToken *)::$_0,std::allocator<md::MapEngine::MapEngine(float,float,float,BOOL,VKMapViewPurpose,std::shared_ptr<md::TaskContext> const&,VKMapPurpose,std::unique_ptr<md::AnimationManager>,geo::linear_map<md::MapEngineSetting,long long,std::equal_to<md::MapEngineSetting>,std::allocator<std::pair<md::MapEngineSetting,long long>>,std::vector<std::pair<md::MapEngineSetting,long long>>> const&,unsigned long long,GEOApplicationAuditToken *)::$_0>,void ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42D4D50;
  a2[1] = v2;
  return result;
}

uint64_t gdc::Signal<unsigned long>::~Signal(uint64_t a1)
{
  _QWORD *v2;
  void *v3;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;

  v2 = *(_QWORD **)(a1 + 24);
  if (v2)
  {
    do
    {
      v7 = (_QWORD *)*v2;
      v5 = (_QWORD *)v2[6];
      if (v5 == v2 + 3)
      {
        v5 = v2 + 3;
        v6 = 4;
      }
      else
      {
        if (!v5)
          goto LABEL_7;
        v6 = 5;
      }
      (*(void (**)(void))(*v5 + 8 * v6))();
LABEL_7:
      operator delete(v2);
      v2 = v7;
    }
    while (v7);
  }
  v3 = *(void **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (v3)
    operator delete(v3);
  return a1;
}

void std::__shared_ptr_pointer<md::MapEngineSignals *,std::shared_ptr<md::MapEngineSignals>::__shared_ptr_default_delete<md::MapEngineSignals,md::MapEngineSignals>,std::allocator<md::MapEngineSignals>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_pointer<md::MapEngineSignals *,std::shared_ptr<md::MapEngineSignals>::__shared_ptr_default_delete<md::MapEngineSignals,md::MapEngineSignals>,std::allocator<md::MapEngineSignals>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
  {
    md::MapEngineSignals::ThreadSafeSignal<unsigned long>::~ThreadSafeSignal(result);
    JUMPOUT(0x1A1AF4E00);
  }
  return result;
}

void std::__shared_ptr_pointer<md::NullFaultNotificationService *,std::shared_ptr<md::NullFaultNotificationService>::__shared_ptr_default_delete<md::NullFaultNotificationService,md::NullFaultNotificationService>,std::allocator<md::NullFaultNotificationService>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_pointer<md::NullFaultNotificationService *,std::shared_ptr<md::NullFaultNotificationService>::__shared_ptr_default_delete<md::NullFaultNotificationService,md::NullFaultNotificationService>,std::allocator<md::NullFaultNotificationService>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 16))(result);
  return result;
}

void md::NullFaultNotificationService::~NullFaultNotificationService(md::NullFaultNotificationService *this)
{
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_pointer<md::DefaultFaultNotificationService *,std::shared_ptr<md::DefaultFaultNotificationService>::__shared_ptr_default_delete<md::DefaultFaultNotificationService,md::DefaultFaultNotificationService>,std::allocator<md::DefaultFaultNotificationService>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_pointer<md::DefaultFaultNotificationService *,std::shared_ptr<md::DefaultFaultNotificationService>::__shared_ptr_default_delete<md::DefaultFaultNotificationService,md::DefaultFaultNotificationService>,std::allocator<md::DefaultFaultNotificationService>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 16))(result);
  return result;
}

void std::__shared_ptr_pointer<md::StandardRouteElevationSource *,std::shared_ptr<md::StandardRouteElevationSource>::__shared_ptr_default_delete<md::StandardRouteElevationSource,md::StandardRouteElevationSource>,std::allocator<md::StandardRouteElevationSource>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_pointer<md::StandardRouteElevationSource *,std::shared_ptr<md::StandardRouteElevationSource>::__shared_ptr_default_delete<md::StandardRouteElevationSource,md::StandardRouteElevationSource>,std::allocator<md::StandardRouteElevationSource>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void std::__shared_ptr_pointer<md::FlyoverRouteElevationSource *,std::shared_ptr<md::FlyoverRouteElevationSource>::__shared_ptr_default_delete<md::FlyoverRouteElevationSource,md::FlyoverRouteElevationSource>,std::allocator<md::FlyoverRouteElevationSource>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_pointer<md::FlyoverRouteElevationSource *,std::shared_ptr<md::FlyoverRouteElevationSource>::__shared_ptr_default_delete<md::FlyoverRouteElevationSource,md::FlyoverRouteElevationSource>,std::allocator<md::FlyoverRouteElevationSource>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void std::__shared_ptr_pointer<md::FeatureFlagProvider *,std::shared_ptr<md::FeatureFlagProvider>::__shared_ptr_default_delete<md::FeatureFlagProvider,md::FeatureFlagProvider>,std::allocator<md::FeatureFlagProvider>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

md::FeatureFlagProvider *std::__shared_ptr_pointer<md::FeatureFlagProvider *,std::shared_ptr<md::FeatureFlagProvider>::__shared_ptr_default_delete<md::FeatureFlagProvider,md::FeatureFlagProvider>,std::allocator<md::FeatureFlagProvider>>::__on_zero_shared(uint64_t a1)
{
  md::FeatureFlagProvider *result;

  result = *(md::FeatureFlagProvider **)(a1 + 24);
  if (result)
  {
    md::FeatureFlagProvider::~FeatureFlagProvider(result);
    JUMPOUT(0x1A1AF4E00);
  }
  return result;
}

void std::__shared_ptr_pointer<gdc::ResourceRequestRouter *,std::shared_ptr<gdc::ResourceRequestRouter>::__shared_ptr_default_delete<gdc::ResourceRequestRouter,gdc::ResourceRequestRouter>,std::allocator<gdc::ResourceRequestRouter>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

gdc::ResourceRequestRouter *std::__shared_ptr_pointer<gdc::ResourceRequestRouter *,std::shared_ptr<gdc::ResourceRequestRouter>::__shared_ptr_default_delete<gdc::ResourceRequestRouter,gdc::ResourceRequestRouter>,std::allocator<gdc::ResourceRequestRouter>>::__on_zero_shared(uint64_t a1)
{
  gdc::ResourceRequestRouter *result;

  result = *(gdc::ResourceRequestRouter **)(a1 + 24);
  if (result)
  {
    gdc::ResourceRequestRouter::~ResourceRequestRouter(result);
    JUMPOUT(0x1A1AF4E00);
  }
  return result;
}

void std::__shared_ptr_pointer<mre::GGLResourceStore *,std::shared_ptr<mre::GGLResourceStore>::__shared_ptr_default_delete<mre::GGLResourceStore,mre::GGLResourceStore>,std::allocator<mre::GGLResourceStore>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_pointer<mre::GGLResourceStore *,std::shared_ptr<mre::GGLResourceStore>::__shared_ptr_default_delete<mre::GGLResourceStore,mre::GGLResourceStore>,std::allocator<mre::GGLResourceStore>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 80))(result);
  return result;
}

void std::__shared_ptr_pointer<md::MapEngineCompatabilityServiceImpl *,std::shared_ptr<md::MapEngineCompatabilityServiceImpl>::__shared_ptr_default_delete<md::MapEngineCompatabilityServiceImpl,md::MapEngineCompatabilityServiceImpl>,std::allocator<md::MapEngineCompatabilityServiceImpl>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_pointer<md::MapEngineCompatabilityServiceImpl *,std::shared_ptr<md::MapEngineCompatabilityServiceImpl>::__shared_ptr_default_delete<md::MapEngineCompatabilityServiceImpl,md::MapEngineCompatabilityServiceImpl>,std::allocator<md::MapEngineCompatabilityServiceImpl>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void std::__shared_ptr_pointer<RendererPassListProviderWrapper *,std::shared_ptr<RendererPassListProviderWrapper>::__shared_ptr_default_delete<RendererPassListProviderWrapper,RendererPassListProviderWrapper>,std::allocator<RendererPassListProviderWrapper>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_pointer<RendererPassListProviderWrapper *,std::shared_ptr<RendererPassListProviderWrapper>::__shared_ptr_default_delete<RendererPassListProviderWrapper,RendererPassListProviderWrapper>,std::allocator<RendererPassListProviderWrapper>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 40))(result);
  return result;
}

uint64_t RendererPassListProviderWrapper::passList(RendererPassListProviderWrapper *this)
{
  return *(_QWORD *)(*((_QWORD *)this + 1) + 24);
}

uint64_t RendererPassListProviderWrapper::standardPassList(RendererPassListProviderWrapper *this)
{
  int v1;

  v1 = *((unsigned __int8 *)this + 17);
  if (v1 == 3 || v1 == 0)
    return *(_QWORD *)(*((_QWORD *)this + 1) + 24);
  else
    return 0;
}

uint64_t RendererPassListProviderWrapper::renderer(RendererPassListProviderWrapper *this)
{
  return *((_QWORD *)this + 1);
}

uint64_t RendererPassListProviderWrapper::mapEngineMode(RendererPassListProviderWrapper *this)
{
  return *((unsigned __int8 *)this + 16);
}

void RendererPassListProviderWrapper::~RendererPassListProviderWrapper(RendererPassListProviderWrapper *this)
{
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_pointer<md::MapEngineCallbackGraphService *,std::shared_ptr<md::MapEngineCallbackGraphService>::__shared_ptr_default_delete<md::MapEngineCallbackGraphService,md::MapEngineCallbackGraphService>,std::allocator<md::MapEngineCallbackGraphService>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_pointer<md::MapEngineCallbackGraphService *,std::shared_ptr<md::MapEngineCallbackGraphService>::__shared_ptr_default_delete<md::MapEngineCallbackGraphService,md::MapEngineCallbackGraphService>,std::allocator<md::MapEngineCallbackGraphService>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void std::__shared_ptr_pointer<md::MapEngineFrameService *,std::shared_ptr<md::MapEngineFrameService>::__shared_ptr_default_delete<md::MapEngineFrameService,md::MapEngineFrameService>,std::allocator<md::MapEngineFrameService>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_pointer<md::MapEngineFrameService *,std::shared_ptr<md::MapEngineFrameService>::__shared_ptr_default_delete<md::MapEngineFrameService,md::MapEngineFrameService>,std::allocator<md::MapEngineFrameService>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void std::__shared_ptr_pointer<std::atomic<unsigned long> *,std::shared_ptr<std::atomic<unsigned long>>::__shared_ptr_default_delete<std::atomic<unsigned long>,std::atomic<unsigned long>>,std::allocator<std::atomic<unsigned long>>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_pointer<std::atomic<unsigned long> *,std::shared_ptr<std::atomic<unsigned long>>::__shared_ptr_default_delete<std::atomic<unsigned long>,std::atomic<unsigned long>>,std::allocator<std::atomic<unsigned long>>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    JUMPOUT(0x1A1AF4E00);
  return result;
}

void std::__shared_ptr_emplace<gdc::ServiceLocator>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DE1B8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<gdc::ServiceLocator>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DE1B8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_emplace<gdc::ServiceLocator>::__on_zero_shared(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v1 = *(_QWORD *)(a1 + 24);
  if (v1)
  {
    v3 = *(_QWORD *)(a1 + 32);
    v4 = *(void **)(a1 + 24);
    if (v3 != v1)
    {
      do
      {
        v5 = *(std::__shared_weak_count **)(v3 - 8);
        if (v5)
        {
          p_shared_owners = (unint64_t *)&v5->__shared_owners_;
          do
            v7 = __ldaxr(p_shared_owners);
          while (__stlxr(v7 - 1, p_shared_owners));
          if (!v7)
          {
            ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
            std::__shared_weak_count::__release_weak(v5);
          }
        }
        v3 -= 40;
      }
      while (v3 != v1);
      v4 = *(void **)(a1 + 24);
    }
    *(_QWORD *)(a1 + 32) = v1;
    operator delete(v4);
  }
}

void std::__shared_ptr_emplace<md::MapEngine::AnalyticsInfo>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DDFF8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<md::MapEngine::AnalyticsInfo>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DDFF8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_emplace<gdc::Statistics>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DE148;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<gdc::Statistics>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DE148;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<gdc::Statistics>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t geo::_retain_ptr<VKCameraDelegateMediator * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>::~_retain_ptr(uint64_t a1)
{
  *(_QWORD *)a1 = &off_1E42B50F0;

  return a1;
}

void geo::_retain_ptr<VKCameraDelegateMediator * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>::~_retain_ptr(uint64_t a1)
{
  *(_QWORD *)a1 = &off_1E42B50F0;

  JUMPOUT(0x1A1AF4E00);
}

void gdc::tf::Taskflow::~Taskflow(gdc::tf::Taskflow *this)
{
  uint64_t v2;
  void *v3;
  _QWORD *v4;
  void *v5;
  _QWORD *v6;
  uint64_t v7;

  v2 = *((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v2)
  {
    geo::Pool<geo::IntrusiveNode<gdc::tf::TaskData>>::disposeElements(v2);
    std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(_QWORD **)(v2 + 8));
    MEMORY[0x1A1AF4E00](v2, 0x1020C407A7143E5);
  }
  v3 = (void *)*((_QWORD *)this + 7);
  if (v3)
  {
    *((_QWORD *)this + 8) = v3;
    operator delete(v3);
  }
  v4 = (_QWORD *)*((_QWORD *)this + 4);
  if (v4)
  {
    do
    {
      v6 = (_QWORD *)*v4;
      v7 = v4[5];
      v4[5] = 0;
      if (v7)
        (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
      operator delete(v4);
      v4 = v6;
    }
    while (v6);
  }
  v5 = (void *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v5)
    operator delete(v5);
}

void sub_19FABAD88(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8nn180100IOZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN3gdc2tf8TaskData6StaticENSB_17StaticWithContextENSB_12StaticModuleENSB_13DynamicModuleENSB_13ModuleFactoryEEEELNS0_6_TraitE1EE9__destroyB8nn180100EvEUlRT_E_JRNS0_6__baseILSI_1EJS8_SC_SD_SE_SF_SG_EEEEEEDcSK_DpT0_(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  uint64_t result;

  v2 = (_QWORD *)a2[3];
  if (v2 == a2)
    return (*(uint64_t (**)(_QWORD *))(*a2 + 32))(a2);
  if (v2)
    return (*(uint64_t (**)(_QWORD))(*(_QWORD *)a2[3] + 40))(a2[3]);
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2EEE10__dispatchB8nn180100IOZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN3gdc2tf8TaskData6StaticENSB_17StaticWithContextENSB_12StaticModuleENSB_13DynamicModuleENSB_13ModuleFactoryEEEELNS0_6_TraitE1EE9__destroyB8nn180100EvEUlRT_E_JRNS0_6__baseILSI_1EJS8_SC_SD_SE_SF_SG_EEEEEEDcSK_DpT0_(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  uint64_t result;

  v2 = (_QWORD *)a2[3];
  if (v2 == a2)
    return (*(uint64_t (**)(_QWORD *))(*a2 + 32))(a2);
  if (v2)
    return (*(uint64_t (**)(_QWORD))(*(_QWORD *)a2[3] + 40))(a2[3]);
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm4EEE10__dispatchB8nn180100IOZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN3gdc2tf8TaskData6StaticENSB_17StaticWithContextENSB_12StaticModuleENSB_13DynamicModuleENSB_13ModuleFactoryEEEELNS0_6_TraitE1EE9__destroyB8nn180100EvEUlRT_E_JRNS0_6__baseILSI_1EJS8_SC_SD_SE_SF_SG_EEEEEEDcSK_DpT0_(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  void *v4;
  _QWORD *v5;

  v3 = a2[7];
  a2[7] = 0;
  if (v3)
  {
    geo::Pool<geo::IntrusiveNode<gdc::tf::TaskData>>::disposeElements(v3);
    std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(_QWORD **)(v3 + 8));
    MEMORY[0x1A1AF4E00](v3, 0x1020C407A7143E5);
  }
  v4 = (void *)a2[4];
  if (v4)
  {
    a2[5] = v4;
    operator delete(v4);
  }
  v5 = (_QWORD *)a2[3];
  if (v5 == a2)
  {
    (*(void (**)(_QWORD *))(*a2 + 32))(a2);
  }
  else if (v5)
  {
    (*(void (**)(_QWORD))(*(_QWORD *)a2[3] + 40))(a2[3]);
  }
}

void sub_19FABAEA4(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm5EEE10__dispatchB8nn180100IOZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN3gdc2tf8TaskData6StaticENSB_17StaticWithContextENSB_12StaticModuleENSB_13DynamicModuleENSB_13ModuleFactoryEEEELNS0_6_TraitE1EE9__destroyB8nn180100EvEUlRT_E_JRNS0_6__baseILSI_1EJS8_SC_SD_SE_SF_SG_EEEEEEDcSK_DpT0_(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  uint64_t result;

  v2 = (_QWORD *)a2[3];
  if (v2 == a2)
    return (*(uint64_t (**)(_QWORD *))(*a2 + 32))(a2);
  if (v2)
    return (*(uint64_t (**)(_QWORD))(*(_QWORD *)a2[3] + 40))(a2[3]);
  return result;
}

void std::__function::__func<md::MeshRendererModule,std::allocator<md::MeshRendererModule>,ecs2::ModuleDescriptor ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::MeshRendererModule,std::allocator<md::MeshRendererModule>,ecs2::ModuleDescriptor ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E4275B80;
  return result;
}

void std::__function::__func<md::MeshRendererModule,std::allocator<md::MeshRendererModule>,ecs2::ModuleDescriptor ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E4275B80;
}

uint64_t std::__function::__func<md::MeshRendererModule,std::allocator<md::MeshRendererModule>,ecs2::ModuleDescriptor ()(void)>::operator()@<X0>(uint64_t a1@<X8>)
{
  return md::MeshRendererModule::operator()(a1);
}

void std::__function::__func<md::MapEngineFrameModule,std::allocator<md::MapEngineFrameModule>,ecs2::ModuleDescriptor ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::MapEngineFrameModule,std::allocator<md::MapEngineFrameModule>,ecs2::ModuleDescriptor ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E4275BC8;
  return result;
}

void std::__function::__func<md::MapEngineFrameModule,std::allocator<md::MapEngineFrameModule>,ecs2::ModuleDescriptor ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E4275BC8;
}

_QWORD *std::__function::__func<md::MapEngineFrameModule,std::allocator<md::MapEngineFrameModule>,ecs2::ModuleDescriptor ()(void)>::operator()@<X0>(uint64_t a1@<X8>)
{
  __int16 v1;
  char *v2;
  char *v3;
  char *v4;
  _QWORD *v5;
  _QWORD *v6;
  char *v7;
  char *v8;
  uint64_t v9;
  void **v10;
  void **v11;
  void *v12;
  void **v13;
  uint64_t v14;
  void **v15;
  void **v16;
  void *v17;
  void **v18;
  uint64_t v19;
  uint64_t v20;
  void **v21;
  void **v22;
  void *v23;
  void **v24;
  uint64_t v25;
  void **v26;
  void **v27;
  void *v28;
  void **v29;
  uint64_t v30;
  void **v31;
  void **v32;
  void *v33;
  void **v34;
  uint64_t v35;
  void **v36;
  void **v37;
  void *v38;
  void **v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  _QWORD *v44;
  _QWORD *v45;
  _QWORD *v46;
  _QWORD *v47;
  _QWORD *v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD *result;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD v60[3];
  _QWORD *v61;
  __int128 v62;
  uint64_t v63;
  __int16 v64;
  _QWORD v65[3];
  _QWORD *v66;
  _QWORD v67[3];
  _QWORD *v68;
  _QWORD v69[3];
  _QWORD *v70;
  __int128 v71;
  uint64_t v72;
  __int16 v73;
  _QWORD v74[3];
  _QWORD *v75;
  _QWORD v76[3];
  _QWORD *v77;
  _QWORD v78[3];
  _QWORD *v79;
  _BYTE v80[24];
  __int16 v81;
  _QWORD v82[3];
  _QWORD *v83;
  _QWORD v84[3];
  _QWORD *v85;
  _QWORD v86[3];
  _QWORD *v87;
  _BYTE v88[24];
  __int16 v89;
  char *v90;
  char *v91;
  char *v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  void *v96[2];
  void *v97[2];
  __int128 v98;
  __int16 v99;
  char *v100;
  char *v101;
  char *v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  void *v106[2];
  void *v107[2];
  __int128 v108;
  __int16 v109;
  char *v110;
  char *v111;
  char *v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  void *v116[2];
  uint64_t v117;
  void *__p;
  void **v119;
  char *v120;
  uint64_t v121;

  v121 = *MEMORY[0x1E0C80C00];
  v1 = gdc::FamilyInfo<ecs2::ModuleDescriptor,unsigned short>::Counter::nextId(void)::counter++;
  *(_WORD *)a1 = v1;
  strcpy((char *)(a1 + 8), "InteractiveFrameModule");
  *(_BYTE *)(a1 + 31) = 22;
  v89 = 1;
  v81 = -20212;
  v82[0] = &off_1E4275D78;
  v82[1] = 0;
  v83 = v82;
  v84[0] = &off_1E4282B10;
  v87 = v86;
  v85 = v84;
  v86[0] = &off_1E4282AC8;
  strcpy(v88, "PrepareFrameForRender");
  v88[23] = 21;
  v92 = 0;
  v90 = 0;
  v91 = 0;
  v2 = (char *)operator new(0x80uLL);
  v90 = v2;
  v91 = v2;
  v92 = v2 + 128;
  *(_WORD *)v2 = -20212;
  *((_QWORD *)v2 + 4) = v2 + 8;
  std::__function::__func<ecs2::ForwardToExecute<PrepareFrameForRender>,std::allocator<ecs2::ForwardToExecute<PrepareFrameForRender>>,void ()(ecs2::Runtime &)>::__clone((uint64_t)v82, (_QWORD *)v2 + 1);
  *((_QWORD *)v2 + 8) = v2 + 40;
  std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<PrepareFrameForRender>(PrepareFrameForRender &&)::{lambda(void)#1},std::allocator<PrepareFrameForRender &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<PrepareFrameForRender>(PrepareFrameForRender &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone((uint64_t)v84, (_QWORD *)v2 + 5);
  *((_QWORD *)v2 + 12) = v2 + 72;
  std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<PrepareFrameForRender>(PrepareFrameForRender &&)::{lambda(void)#2},std::allocator<PrepareFrameForRender &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<PrepareFrameForRender>(PrepareFrameForRender &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone((uint64_t)v86, (_QWORD *)v2 + 9);
  *(_OWORD *)(v2 + 104) = *(_OWORD *)v88;
  *((_QWORD *)v2 + 15) = *(_QWORD *)&v88[16];
  v91 = v2 + 128;
  v93 = 0u;
  v94 = 0u;
  v95 = 0u;
  *(_OWORD *)v96 = 0u;
  *(_OWORD *)v97 = 0u;
  v98 = 0u;
  v99 = 28;
  v73 = 12414;
  v74[0] = &off_1E4275D30;
  v74[1] = 0;
  v75 = v74;
  v76[0] = &off_1E4282A80;
  v79 = v78;
  v77 = v76;
  v78[0] = &off_1E4282A38;
  strcpy(v80, "PrepareFrameForEncode");
  v80[23] = 21;
  v101 = 0;
  v100 = 0;
  v102 = 0;
  v3 = (char *)operator new(0x80uLL);
  v100 = v3;
  v101 = v3;
  v102 = v3 + 128;
  *(_WORD *)v3 = 12414;
  *((_QWORD *)v3 + 4) = v3 + 8;
  std::__function::__func<ecs2::ForwardToExecute<PrepareFrameForEncode>,std::allocator<ecs2::ForwardToExecute<PrepareFrameForEncode>>,void ()(ecs2::Runtime &)>::__clone((uint64_t)v74, (_QWORD *)v3 + 1);
  *((_QWORD *)v3 + 8) = v3 + 40;
  std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<PrepareFrameForEncode>(PrepareFrameForEncode &&)::{lambda(void)#1},std::allocator<PrepareFrameForEncode &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<PrepareFrameForEncode>(PrepareFrameForEncode &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone((uint64_t)v76, (_QWORD *)v3 + 5);
  *((_QWORD *)v3 + 12) = v3 + 72;
  std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<PrepareFrameForEncode>(PrepareFrameForEncode &&)::{lambda(void)#2},std::allocator<PrepareFrameForEncode &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<PrepareFrameForEncode>(PrepareFrameForEncode &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone((uint64_t)v78, (_QWORD *)v3 + 9);
  *(_OWORD *)(v3 + 104) = *(_OWORD *)v80;
  *((_QWORD *)v3 + 15) = *(_QWORD *)&v80[16];
  v101 = v3 + 128;
  v103 = 0u;
  v104 = 0u;
  v105 = 0u;
  *(_OWORD *)v106 = 0u;
  *(_OWORD *)v107 = 0u;
  v108 = 0u;
  v109 = 32;
  v64 = -8552;
  v65[0] = &off_1E4275CA0;
  v65[1] = 0;
  v66 = v65;
  v67[0] = &off_1E42829F0;
  v68 = v67;
  v69[0] = &off_1E42829A8;
  v70 = v69;
  strcpy((char *)&v71, "CleanupEntities");
  HIBYTE(v72) = 15;
  v111 = 0;
  v110 = 0;
  v112 = 0;
  v4 = (char *)operator new(0x80uLL);
  v110 = v4;
  v111 = v4;
  v112 = v4 + 128;
  *(_WORD *)v4 = -8552;
  *((_QWORD *)v4 + 4) = v4 + 8;
  std::__function::__func<ecs2::ForwardToExecute<CleanupEntities>,std::allocator<ecs2::ForwardToExecute<CleanupEntities>>,void ()(ecs2::Runtime &)>::__clone((uint64_t)v65, (_QWORD *)v4 + 1);
  *((_QWORD *)v4 + 8) = v4 + 40;
  std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<CleanupEntities>(CleanupEntities &&)::{lambda(void)#1},std::allocator<CleanupEntities &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<CleanupEntities>(CleanupEntities &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone((uint64_t)v67, (_QWORD *)v4 + 5);
  *((_QWORD *)v4 + 12) = v4 + 72;
  std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<CleanupEntities>(CleanupEntities &&)::{lambda(void)#2},std::allocator<CleanupEntities &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<CleanupEntities>(CleanupEntities &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone((uint64_t)v69, (_QWORD *)v4 + 9);
  *(_OWORD *)(v4 + 104) = v71;
  *((_QWORD *)v4 + 15) = v72;
  v111 = v4 + 128;
  v113 = 0u;
  v114 = 0u;
  v115 = 0u;
  *(_OWORD *)v116 = 0u;
  v5 = v60;
  v60[0] = &off_1E4275CE8;
  v60[1] = 0;
  v61 = v60;
  strcpy((char *)&v62, "CleanupServices");
  HIBYTE(v63) = 15;
  v117 = 0;
  __p = 0;
  v119 = 0;
  v120 = 0;
  v6 = v69;
  v7 = (char *)operator new(0x40uLL);
  v120 = v7 + 64;
  *(_WORD *)v7 = -20033;
  *((_QWORD *)v7 + 1) = &off_1E4275CE8;
  *((_QWORD *)v7 + 4) = v7 + 8;
  *((_QWORD *)v7 + 2) = 0;
  *(_OWORD *)(v7 + 40) = v62;
  *((_QWORD *)v7 + 7) = v63;
  __p = v7;
  v119 = (void **)(v7 + 64);
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  v8 = (char *)operator new(0x180uLL);
  *(_QWORD *)(a1 + 32) = v8;
  *(_QWORD *)(a1 + 40) = v8;
  *(_QWORD *)(a1 + 48) = v8 + 384;
  ecs2::ModuleBucketDescriptor::ModuleBucketDescriptor((uint64_t)v8, (uint64_t)&v89);
  ecs2::ModuleBucketDescriptor::ModuleBucketDescriptor((uint64_t)(v8 + 128), (uint64_t)&v99);
  ecs2::ModuleBucketDescriptor::ModuleBucketDescriptor((uint64_t)(v8 + 256), (uint64_t)&v109);
  *(_QWORD *)(a1 + 40) = v8 + 384;
  v10 = (void **)__p;
  if (__p)
  {
    v11 = v119;
    v12 = __p;
    if (v119 == __p)
    {
LABEL_13:
      v119 = v10;
      operator delete(v12);
      goto LABEL_14;
    }
    while (1)
    {
      if (*((char *)v11 - 1) < 0)
        operator delete(*(v11 - 3));
      v13 = (void **)*(v11 - 4);
      if (v11 - 7 == v13)
      {
        v13 = v11 - 7;
        v14 = 4;
      }
      else
      {
        if (!v13)
          goto LABEL_6;
        v14 = 5;
      }
      (*((void (**)(void **, uint64_t))*v13 + v14))(v13, v9);
LABEL_6:
      v11 -= 8;
      if (v11 == v10)
      {
        v12 = __p;
        goto LABEL_13;
      }
    }
  }
LABEL_14:
  v15 = (void **)v116[0];
  if (!v116[0])
    goto LABEL_27;
  v16 = (void **)v116[1];
  v17 = v116[0];
  if (v116[1] != v116[0])
  {
    while (1)
    {
      if (*((char *)v16 - 1) < 0)
        operator delete(*(v16 - 3));
      v18 = (void **)*(v16 - 4);
      if (v16 - 7 == v18)
      {
        v18 = v16 - 7;
        v19 = 4;
      }
      else
      {
        if (!v18)
          goto LABEL_19;
        v19 = 5;
      }
      (*((void (**)(void **, uint64_t))*v18 + v19))(v18, v9);
LABEL_19:
      v16 -= 8;
      if (v16 == v15)
      {
        v17 = v116[0];
        break;
      }
    }
  }
  v116[1] = v15;
  operator delete(v17);
LABEL_27:
  ecs2::ModuleBucketExecutionDescriptor::~ModuleBucketExecutionDescriptor((ecs2::ModuleBucketExecutionDescriptor *)&v110);
  v21 = (void **)v107[1];
  if (!v107[1])
    goto LABEL_40;
  v22 = (void **)v108;
  v23 = v107[1];
  if ((void *)v108 != v107[1])
  {
    while (1)
    {
      if (*((char *)v22 - 1) < 0)
        operator delete(*(v22 - 3));
      v24 = (void **)*(v22 - 4);
      if (v22 - 7 == v24)
      {
        v24 = v22 - 7;
        v25 = 4;
      }
      else
      {
        if (!v24)
          goto LABEL_32;
        v25 = 5;
      }
      (*((void (**)(void **, uint64_t))*v24 + v25))(v24, v20);
LABEL_32:
      v22 -= 8;
      if (v22 == v21)
      {
        v23 = v107[1];
        break;
      }
    }
  }
  *(_QWORD *)&v108 = v21;
  operator delete(v23);
LABEL_40:
  v26 = (void **)v106[0];
  if (!v106[0])
    goto LABEL_53;
  v27 = (void **)v106[1];
  v28 = v106[0];
  if (v106[1] != v106[0])
  {
    while (1)
    {
      if (*((char *)v27 - 1) < 0)
        operator delete(*(v27 - 3));
      v29 = (void **)*(v27 - 4);
      if (v27 - 7 == v29)
      {
        v29 = v27 - 7;
        v30 = 4;
      }
      else
      {
        if (!v29)
          goto LABEL_45;
        v30 = 5;
      }
      (*((void (**)(void **, uint64_t))*v29 + v30))(v29, v20);
LABEL_45:
      v27 -= 8;
      if (v27 == v26)
      {
        v28 = v106[0];
        break;
      }
    }
  }
  v106[1] = v26;
  operator delete(v28);
LABEL_53:
  ecs2::ModuleBucketExecutionDescriptor::~ModuleBucketExecutionDescriptor((ecs2::ModuleBucketExecutionDescriptor *)&v100);
  v31 = (void **)v97[1];
  if (!v97[1])
    goto LABEL_66;
  v32 = (void **)v98;
  v33 = v97[1];
  if ((void *)v98 != v97[1])
  {
    while (1)
    {
      if (*((char *)v32 - 1) < 0)
        operator delete(*(v32 - 3));
      v34 = (void **)*(v32 - 4);
      if (v32 - 7 == v34)
      {
        v34 = v32 - 7;
        v35 = 4;
      }
      else
      {
        if (!v34)
          goto LABEL_58;
        v35 = 5;
      }
      (*((void (**)(void))*v34 + v35))();
LABEL_58:
      v32 -= 8;
      if (v32 == v31)
      {
        v33 = v97[1];
        break;
      }
    }
  }
  *(_QWORD *)&v98 = v31;
  operator delete(v33);
LABEL_66:
  v36 = (void **)v96[0];
  if (!v96[0])
    goto LABEL_79;
  v37 = (void **)v96[1];
  v38 = v96[0];
  if (v96[1] != v96[0])
  {
    while (1)
    {
      if (*((char *)v37 - 1) < 0)
        operator delete(*(v37 - 3));
      v39 = (void **)*(v37 - 4);
      if (v37 - 7 == v39)
      {
        v39 = v37 - 7;
        v40 = 4;
      }
      else
      {
        if (!v39)
          goto LABEL_71;
        v40 = 5;
      }
      (*((void (**)(void))*v39 + v40))();
LABEL_71:
      v37 -= 8;
      if (v37 == v36)
      {
        v38 = v96[0];
        break;
      }
    }
  }
  v96[1] = v36;
  operator delete(v38);
LABEL_79:
  ecs2::ModuleBucketExecutionDescriptor::~ModuleBucketExecutionDescriptor((ecs2::ModuleBucketExecutionDescriptor *)&v90);
  if (SHIBYTE(v63) < 0)
    operator delete((void *)v62);
  if (v61 == v60)
  {
    v41 = 4;
  }
  else
  {
    if (!v61)
      goto LABEL_86;
    v41 = 5;
    v5 = v61;
  }
  (*(void (**)(_QWORD *))(*v5 + 8 * v41))(v5);
LABEL_86:
  if (SHIBYTE(v72) < 0)
    operator delete((void *)v71);
  if (v70 == v69)
  {
    v42 = 4;
  }
  else
  {
    if (!v70)
      goto LABEL_93;
    v42 = 5;
    v6 = v70;
  }
  (*(void (**)(_QWORD *))(*v6 + 8 * v42))(v6);
LABEL_93:
  v43 = v67;
  if (v68 == v67)
  {
    v49 = 4;
    v45 = v84;
    v44 = v82;
    v47 = v76;
    v46 = v74;
    v48 = v78;
  }
  else
  {
    v45 = v84;
    v44 = v82;
    v47 = v76;
    v46 = v74;
    v48 = v78;
    if (!v68)
      goto LABEL_98;
    v49 = 5;
    v43 = v68;
  }
  (*(void (**)(void))(*v43 + 8 * v49))();
LABEL_98:
  v50 = v65;
  if (v66 == v65)
  {
    v51 = 4;
  }
  else
  {
    if (!v66)
      goto LABEL_103;
    v51 = 5;
    v50 = v66;
  }
  (*(void (**)(void))(*v50 + 8 * v51))();
LABEL_103:
  if ((v80[23] & 0x80000000) != 0)
    operator delete(*(void **)v80);
  if (v79 == v78)
  {
    v52 = 4;
  }
  else
  {
    if (!v79)
      goto LABEL_110;
    v52 = 5;
    v48 = v79;
  }
  (*(void (**)(_QWORD *))(*v48 + 8 * v52))(v48);
LABEL_110:
  if (v77 == v76)
  {
    v53 = 4;
  }
  else
  {
    if (!v77)
      goto LABEL_115;
    v53 = 5;
    v47 = v77;
  }
  (*(void (**)(_QWORD *))(*v47 + 8 * v53))(v47);
LABEL_115:
  if (v75 == v74)
  {
    v54 = 4;
  }
  else
  {
    if (!v75)
      goto LABEL_120;
    v54 = 5;
    v46 = v75;
  }
  (*(void (**)(_QWORD *))(*v46 + 8 * v54))(v46);
LABEL_120:
  if ((v88[23] & 0x80000000) != 0)
    operator delete(*(void **)v88);
  result = v86;
  if (v87 == v86)
  {
    v56 = 4;
  }
  else
  {
    if (!v87)
      goto LABEL_127;
    v56 = 5;
    result = v87;
  }
  result = (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v56))();
LABEL_127:
  if (v85 == v84)
  {
    v57 = 4;
  }
  else
  {
    if (!v85)
      goto LABEL_132;
    v57 = 5;
    v45 = v85;
  }
  result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v45 + 8 * v57))(v45);
LABEL_132:
  if (v83 == v82)
  {
    v58 = 4;
  }
  else
  {
    if (!v83)
      return result;
    v58 = 5;
    v44 = v83;
  }
  return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v44 + 8 * v58))(v44);
}

void sub_19FABB934(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ecs2::ModuleBucketExecutionDescriptor *a9, ecs2::ModuleBucketExecutionDescriptor *a10, uint64_t a11, _QWORD *a12, _QWORD *a13, uint64_t a14, _QWORD *a15, _QWORD *a16, _QWORD *a17, _QWORD *a18, _QWORD *a19, _QWORD *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,void *a45,uint64_t a46,int a47,__int16 a48,char a49,char a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  void *a64;
  char a69;
  uint64_t a72;
  uint64_t a73;
  _QWORD *v73;
  ecs2::ModuleBucketExecutionDescriptor *v74;
  unint64_t v75;
  _QWORD *v76;
  _QWORD *v77;
  unint64_t v79;
  void *v80;
  _QWORD *v81;
  uint64_t v82;
  unint64_t v83;
  unint64_t v84;
  void *v85;
  _QWORD *v86;
  uint64_t v87;
  unint64_t v88;
  unint64_t v89;
  void *v90;
  _QWORD *v91;
  uint64_t v92;
  unint64_t v93;
  unint64_t v94;
  void *v95;
  _QWORD *v96;
  uint64_t v97;
  unint64_t v98;
  unint64_t v99;
  void *v100;
  _QWORD *v101;
  uint64_t v102;
  unint64_t v103;
  unint64_t v104;
  void *v105;
  _QWORD *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;

  v77 = v76;
  v79 = STACK[0x390];
  v80 = (void *)v75;
  if (STACK[0x390] == v75)
  {
LABEL_12:
    STACK[0x390] = v75;
    operator delete(v80);
    v83 = STACK[0x370];
    if (!STACK[0x370])
    {
LABEL_25:
      ecs2::ModuleBucketExecutionDescriptor::~ModuleBucketExecutionDescriptor(v74);
      v88 = STACK[0x308];
      if (!STACK[0x308])
      {
LABEL_38:
        v93 = STACK[0x2F0];
        if (!STACK[0x2F0])
        {
LABEL_51:
          ecs2::ModuleBucketExecutionDescriptor::~ModuleBucketExecutionDescriptor(a9);
          v98 = STACK[0x288];
          if (!STACK[0x288])
          {
LABEL_64:
            v103 = STACK[0x270];
            if (!STACK[0x270])
              goto LABEL_77;
            v104 = STACK[0x278];
            v105 = (void *)STACK[0x270];
            if (STACK[0x278] == v103)
            {
LABEL_76:
              STACK[0x278] = v103;
              operator delete(v105);
LABEL_77:
              ecs2::ModuleBucketExecutionDescriptor::~ModuleBucketExecutionDescriptor(a10);
              if (a31 < 0)
                operator delete(a26);
              if ((_QWORD *)a25 == v73)
              {
                v108 = 4;
              }
              else
              {
                if (!a25)
                  goto LABEL_84;
                v108 = 5;
                v73 = (_QWORD *)a25;
              }
              (*(void (**)(_QWORD *))(*v73 + 8 * v108))(v73);
LABEL_84:
              if (a50 < 0)
                operator delete(a45);
              if ((_QWORD *)a44 == v76)
              {
                v109 = 4;
              }
              else
              {
                if (!a44)
                  goto LABEL_91;
                v109 = 5;
                v77 = (_QWORD *)a44;
              }
              (*(void (**)(_QWORD *))(*v77 + 8 * v109))(v77);
LABEL_91:
              if ((_QWORD *)a40 == a12)
              {
                v110 = 4;
              }
              else
              {
                if (!a40)
                  goto LABEL_96;
                v110 = 5;
                a12 = (_QWORD *)a40;
              }
              (*(void (**)(void))(*a12 + 8 * v110))();
LABEL_96:
              if ((_QWORD *)a36 == a13)
              {
                v111 = 4;
              }
              else
              {
                if (!a36)
                  goto LABEL_101;
                v111 = 5;
                a13 = (_QWORD *)a36;
              }
              (*(void (**)(void))(*a13 + 8 * v111))();
LABEL_101:
              if (a69 < 0)
                operator delete(a64);
              if ((_QWORD *)a63 == a15)
              {
                v112 = 4;
              }
              else
              {
                if (!a63)
                  goto LABEL_108;
                v112 = 5;
                a15 = (_QWORD *)a63;
              }
              (*(void (**)(void))(*a15 + 8 * v112))();
LABEL_108:
              if ((_QWORD *)a59 == a16)
              {
                v113 = 4;
              }
              else
              {
                if (!a59)
                  goto LABEL_113;
                v113 = 5;
                a16 = (_QWORD *)a59;
              }
              (*(void (**)(void))(*a16 + 8 * v113))();
LABEL_113:
              if ((_QWORD *)a55 == a17)
              {
                v114 = 4;
              }
              else
              {
                if (!a55)
                  goto LABEL_118;
                v114 = 5;
                a17 = (_QWORD *)a55;
              }
              (*(void (**)(void))(*a17 + 8 * v114))();
LABEL_118:
              if (SLOBYTE(STACK[0x21F]) < 0)
                operator delete((void *)STACK[0x208]);
              if ((_QWORD *)STACK[0x200] == a18)
              {
                v115 = 4;
              }
              else
              {
                if (!STACK[0x200])
                  goto LABEL_125;
                v115 = 5;
                a18 = (_QWORD *)STACK[0x200];
              }
              (*(void (**)(void))(*a18 + 8 * v115))();
LABEL_125:
              if ((_QWORD *)a73 == a19)
              {
                v116 = 4;
              }
              else
              {
                if (!a73)
                  goto LABEL_130;
                v116 = 5;
                a19 = (_QWORD *)a73;
              }
              (*(void (**)(void))(*a19 + 8 * v116))();
LABEL_130:
              if ((_QWORD *)a72 == a20)
              {
                v117 = 4;
              }
              else
              {
                if (!a72)
                  goto LABEL_135;
                v117 = 5;
                a20 = (_QWORD *)a72;
              }
              (*(void (**)(void))(*a20 + 8 * v117))();
LABEL_135:
              _Unwind_Resume(a1);
            }
            while (1)
            {
              if (*(char *)(v104 - 1) < 0)
                operator delete(*(void **)(v104 - 24));
              v106 = *(_QWORD **)(v104 - 32);
              if ((_QWORD *)(v104 - 56) == v106)
              {
                v106 = (_QWORD *)(v104 - 56);
                v107 = 4;
              }
              else
              {
                if (!v106)
                  goto LABEL_69;
                v107 = 5;
              }
              (*(void (**)(void))(*v106 + 8 * v107))();
LABEL_69:
              v104 -= 64;
              if (v104 == v103)
              {
                v105 = (void *)STACK[0x270];
                goto LABEL_76;
              }
            }
          }
          v99 = STACK[0x290];
          v100 = (void *)STACK[0x288];
          if (STACK[0x290] == v98)
          {
LABEL_63:
            STACK[0x290] = v98;
            operator delete(v100);
            goto LABEL_64;
          }
          while (1)
          {
            if (*(char *)(v99 - 1) < 0)
              operator delete(*(void **)(v99 - 24));
            v101 = *(_QWORD **)(v99 - 32);
            if ((_QWORD *)(v99 - 56) == v101)
            {
              v101 = (_QWORD *)(v99 - 56);
              v102 = 4;
            }
            else
            {
              if (!v101)
                goto LABEL_56;
              v102 = 5;
            }
            (*(void (**)(void))(*v101 + 8 * v102))();
LABEL_56:
            v99 -= 64;
            if (v99 == v98)
            {
              v100 = (void *)STACK[0x288];
              goto LABEL_63;
            }
          }
        }
        v94 = STACK[0x2F8];
        v95 = (void *)STACK[0x2F0];
        if (STACK[0x2F8] == v93)
        {
LABEL_50:
          STACK[0x2F8] = v93;
          operator delete(v95);
          goto LABEL_51;
        }
        while (1)
        {
          if (*(char *)(v94 - 1) < 0)
            operator delete(*(void **)(v94 - 24));
          v96 = *(_QWORD **)(v94 - 32);
          if ((_QWORD *)(v94 - 56) == v96)
          {
            v96 = (_QWORD *)(v94 - 56);
            v97 = 4;
          }
          else
          {
            if (!v96)
              goto LABEL_43;
            v97 = 5;
          }
          (*(void (**)(void))(*v96 + 8 * v97))();
LABEL_43:
          v94 -= 64;
          if (v94 == v93)
          {
            v95 = (void *)STACK[0x2F0];
            goto LABEL_50;
          }
        }
      }
      v89 = STACK[0x310];
      v90 = (void *)STACK[0x308];
      if (STACK[0x310] == v88)
      {
LABEL_37:
        STACK[0x310] = v88;
        operator delete(v90);
        goto LABEL_38;
      }
      while (1)
      {
        if (*(char *)(v89 - 1) < 0)
          operator delete(*(void **)(v89 - 24));
        v91 = *(_QWORD **)(v89 - 32);
        if ((_QWORD *)(v89 - 56) == v91)
        {
          v91 = (_QWORD *)(v89 - 56);
          v92 = 4;
        }
        else
        {
          if (!v91)
            goto LABEL_30;
          v92 = 5;
        }
        (*(void (**)(void))(*v91 + 8 * v92))();
LABEL_30:
        v89 -= 64;
        if (v89 == v88)
        {
          v90 = (void *)STACK[0x308];
          goto LABEL_37;
        }
      }
    }
    v84 = STACK[0x378];
    v85 = (void *)STACK[0x370];
    if (STACK[0x378] == v83)
    {
LABEL_24:
      STACK[0x378] = v83;
      operator delete(v85);
      goto LABEL_25;
    }
    while (1)
    {
      if (*(char *)(v84 - 1) < 0)
        operator delete(*(void **)(v84 - 24));
      v86 = *(_QWORD **)(v84 - 32);
      if ((_QWORD *)(v84 - 56) == v86)
      {
        v86 = (_QWORD *)(v84 - 56);
        v87 = 4;
      }
      else
      {
        if (!v86)
          goto LABEL_17;
        v87 = 5;
      }
      (*(void (**)(void))(*v86 + 8 * v87))();
LABEL_17:
      v84 -= 64;
      if (v84 == v83)
      {
        v85 = (void *)STACK[0x370];
        goto LABEL_24;
      }
    }
  }
  while (1)
  {
    if (*(char *)(v79 - 1) < 0)
      operator delete(*(void **)(v79 - 24));
    v81 = *(_QWORD **)(v79 - 32);
    if ((_QWORD *)(v79 - 56) == v81)
    {
      v81 = (_QWORD *)(v79 - 56);
      v82 = 4;
    }
    else
    {
      if (!v81)
        goto LABEL_5;
      v82 = 5;
    }
    (*(void (**)(void))(*v81 + 8 * v82))();
LABEL_5:
    v79 -= 64;
    if (v79 == v75)
    {
      v80 = (void *)STACK[0x388];
      goto LABEL_12;
    }
  }
}

void std::__function::__func<md::BuildFrameGraphModule,std::allocator<md::BuildFrameGraphModule>,ecs2::ModuleDescriptor ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::BuildFrameGraphModule,std::allocator<md::BuildFrameGraphModule>,ecs2::ModuleDescriptor ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E4275C10;
  return result;
}

void std::__function::__func<md::BuildFrameGraphModule,std::allocator<md::BuildFrameGraphModule>,ecs2::ModuleDescriptor ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E4275C10;
}

void std::__function::__func<md::BuildFrameGraphModule,std::allocator<md::BuildFrameGraphModule>,ecs2::ModuleDescriptor ()(void)>::operator()(uint64_t a1@<X8>)
{
  __int16 v1;
  char *v2;
  char *v3;
  char *v4;
  char *v5;
  char *v6;
  char *v7;
  char *v8;
  char *v9;
  char *v10;
  char *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  std::string *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  std::string *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  std::string *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  std::string *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  std::string *v31;
  _OWORD *v32;
  _QWORD *v33;
  _OWORD *v34;
  char *v35;
  _QWORD *v36;
  _QWORD *v37;
  char *v38;
  char *v39;
  _QWORD *v40;
  void **v41;
  _QWORD *v42;
  void **v43;
  void *v44;
  void **v45;
  uint64_t v46;
  void **v47;
  void **v48;
  void *v49;
  void **v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  uint64_t v54;
  void *v55;
  _QWORD *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  void *v60;
  _QWORD *v61;
  uint64_t v62;
  void **v63;
  void **v64;
  void *v65;
  void **v66;
  uint64_t v67;
  void **v68;
  void **v69;
  void *v70;
  void **v71;
  uint64_t v72;
  _QWORD *v73;
  _QWORD *v74;
  uint64_t v75;
  uint64_t v76;
  _QWORD *v77;
  uint64_t v78;
  _QWORD *v79;
  uint64_t v80;
  _QWORD *v81;
  uint64_t v82;
  _QWORD *v83;
  uint64_t v84;
  _QWORD *v85;
  uint64_t v86;
  _QWORD *v87;
  uint64_t v88;
  _QWORD *v89;
  uint64_t v90;
  _QWORD *v91;
  uint64_t v92;
  _QWORD *v93;
  uint64_t v94;
  _QWORD *v95;
  uint64_t v96;
  _QWORD *v97;
  uint64_t v98;
  _QWORD *v99;
  uint64_t v100;
  _QWORD *v101;
  uint64_t v102;
  _QWORD *v103;
  uint64_t v104;
  _QWORD *v105;
  uint64_t v106;
  _QWORD *v107;
  uint64_t v108;
  _QWORD *v109;
  uint64_t v110;
  _QWORD *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  void *v118;
  _QWORD v120[3];
  _QWORD *v121;
  _QWORD v122[3];
  _QWORD *v123;
  _QWORD v124[3];
  _QWORD *v125;
  void *v126;
  __int128 v127;
  __int16 v128;
  _QWORD v129[3];
  _QWORD *v130;
  _QWORD v131[3];
  _QWORD *v132;
  _QWORD v133[3];
  _QWORD *v134;
  void *v135;
  __int128 v136;
  __int16 v137;
  _QWORD v138[3];
  _QWORD *v139;
  _QWORD v140[3];
  _QWORD *v141;
  _QWORD v142[3];
  _QWORD *v143;
  _BYTE __s[24];
  __int16 v145;
  _QWORD v146[3];
  _QWORD *v147;
  _QWORD v148[3];
  _QWORD *v149;
  _QWORD v150[3];
  _QWORD *v151;
  _BYTE v152[24];
  __int16 v153;
  _QWORD v154[3];
  _QWORD *v155;
  _QWORD v156[3];
  _QWORD *v157;
  _QWORD v158[3];
  _QWORD *v159;
  _BYTE v160[24];
  __int16 v161;
  _QWORD v162[3];
  _QWORD *v163;
  _QWORD v164[3];
  _QWORD *v165;
  _QWORD v166[3];
  _QWORD *v167;
  _BYTE v168[24];
  __int16 v169;
  _QWORD v170[3];
  _QWORD *v171;
  _QWORD v172[3];
  _QWORD *v173;
  _QWORD v174[3];
  _QWORD *v175;
  _BYTE v176[24];
  __int16 v177;
  _QWORD v178[3];
  _QWORD *v179;
  _BYTE v180[24];
  __int16 v181;
  _QWORD v182[3];
  _QWORD *v183;
  _QWORD v184[3];
  _QWORD *v185;
  _QWORD v186[3];
  _QWORD *v187;
  void *v188;
  __int128 v189;
  __int16 v190;
  char *v191;
  char *v192;
  char *v193;
  __int128 v194;
  __int128 v195;
  __int128 v196;
  void *v197;
  void **v198;
  char *v199;
  void *v200;
  void **v201;
  uint64_t v202;
  __int16 v203;
  char *v204;
  char *v205;
  char *v206;
  _QWORD *v207;
  _QWORD *v208;
  _QWORD *v209;
  __int128 v210;
  __int128 v211;
  __int128 v212;
  __int128 v213;
  uint64_t v214;
  __int16 v215;
  char *v216;
  char *v217;
  char *v218;
  __int128 v219;
  __int128 v220;
  __int128 v221;
  void *v222[2];
  void *__p[2];
  __int128 v224;
  uint64_t v225;

  v225 = *MEMORY[0x1E0C80C00];
  v1 = gdc::FamilyInfo<ecs2::ModuleDescriptor,unsigned short>::Counter::nextId(void)::counter++;
  *(_WORD *)a1 = v1;
  *(_BYTE *)(a1 + 31) = 21;
  strcpy((char *)(a1 + 8), "BuildFrameGraphModule");
  v190 = 1;
  v2 = (char *)operator new(0x20uLL);
  strcpy(v2, "md::ita::PrepareBuildFrameGraph");
  v181 = 28850;
  v182[0] = &off_1E4276C60;
  v182[1] = 0;
  v183 = v182;
  v184[0] = &off_1E42847C0;
  v185 = v184;
  v186[0] = &off_1E4284778;
  v187 = v186;
  v188 = v2;
  v189 = xmmword_19FFB3D50;
  v192 = 0;
  v193 = 0;
  v191 = 0;
  v3 = (char *)operator new(0x80uLL);
  v191 = v3;
  v192 = v3;
  v193 = v3 + 128;
  *(_WORD *)v3 = 28850;
  *((_QWORD *)v3 + 4) = v3 + 8;
  std::__function::__func<ecs2::ForwardToExecute<md::ita::PrepareBuildFrameGraph>,std::allocator<ecs2::ForwardToExecute<md::ita::PrepareBuildFrameGraph>>,void ()(ecs2::Runtime &)>::__clone((uint64_t)v182, (_QWORD *)v3 + 1);
  *((_QWORD *)v3 + 8) = v3 + 40;
  std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareBuildFrameGraph>(md::ita::PrepareBuildFrameGraph &&)::{lambda(void)#1},std::allocator<md::ita::PrepareBuildFrameGraph &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareBuildFrameGraph>(md::ita::PrepareBuildFrameGraph &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone((uint64_t)v184, (_QWORD *)v3 + 5);
  *((_QWORD *)v3 + 12) = v3 + 72;
  std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareBuildFrameGraph>(md::ita::PrepareBuildFrameGraph &&)::{lambda(void)#2},std::allocator<md::ita::PrepareBuildFrameGraph &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareBuildFrameGraph>(md::ita::PrepareBuildFrameGraph &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone((uint64_t)v186, (_QWORD *)v3 + 9);
  std::string::__init_copy_ctor_external((std::string *)(v3 + 104), v2, 0x1FuLL);
  v192 = v3 + 128;
  v194 = 0u;
  v195 = 0u;
  v196 = 0u;
  v177 = -31267;
  v179 = v178;
  v178[0] = &off_1E4275E50;
  v178[1] = 0;
  strcpy(v180, "md::DetermineIfLegacy");
  v180[23] = 21;
  v199 = 0;
  v197 = 0;
  v198 = 0;
  v4 = (char *)operator new(0x40uLL);
  *((_QWORD *)v4 + 1) = &off_1E4275E50;
  *(_WORD *)v4 = -31267;
  *((_QWORD *)v4 + 4) = v4 + 8;
  *((_QWORD *)v4 + 2) = 0;
  *(_OWORD *)(v4 + 40) = *(_OWORD *)v180;
  *((_QWORD *)v4 + 7) = *(_QWORD *)&v180[16];
  v197 = v4;
  v198 = (void **)(v4 + 64);
  v199 = v4 + 64;
  v200 = 0;
  v202 = 0;
  v201 = 0;
  v203 = 2;
  v5 = (char *)operator new(0x28uLL);
  strcpy(v5, "md::ita::BuildSSAODOFCommonFrameGraph");
  v128 = -15987;
  v129[0] = &off_1E4277B48;
  v129[1] = 0;
  v130 = v129;
  v131[0] = &off_1E4286590;
  v132 = v131;
  v133[0] = &off_1E4286548;
  v134 = v133;
  v135 = v5;
  v136 = xmmword_19FFB3DF0;
  v6 = (char *)operator new(0x20uLL);
  strcpy(v6, "md::ita::BuildSSAOFrameGraph");
  v137 = 23685;
  v138[0] = &off_1E4276558;
  v138[1] = 0;
  v139 = v138;
  v140[0] = &off_1E42839B0;
  v141 = v140;
  v142[0] = &off_1E4283968;
  v143 = v142;
  *(_QWORD *)__s = v6;
  *(_OWORD *)&__s[8] = xmmword_19FFB3880;
  v7 = (char *)operator new(0x20uLL);
  strcpy(v7, "md::ita::BuildShadowFrameGraph");
  v145 = -5037;
  v146[0] = &off_1E4276870;
  v146[1] = 0;
  v147 = v146;
  v148[0] = &off_1E4283FE0;
  v149 = v148;
  v150[0] = &off_1E4283F98;
  v151 = v150;
  *(_QWORD *)v152 = v7;
  *(_OWORD *)&v152[8] = xmmword_19FFB3890;
  v8 = (char *)operator new(0x20uLL);
  strcpy(v8, "md::ita::BuildPrimaryFrameGraph");
  v153 = -835;
  v154[0] = &off_1E4276BD0;
  v154[1] = 0;
  v155 = v154;
  v156[0] = &off_1E42846A0;
  v157 = v156;
  v158[0] = &off_1E4284658;
  v159 = v158;
  *(_QWORD *)v160 = v8;
  *(_OWORD *)&v160[8] = xmmword_19FFB3D50;
  v9 = (char *)operator new(0x28uLL);
  strcpy(v9, "md::ita::BuildRouteLineFrameGraph");
  v161 = 24904;
  v163 = v162;
  v162[0] = &off_1E4277170;
  v162[1] = 0;
  v165 = v164;
  v164[0] = &off_1E42851E0;
  v167 = v166;
  v166[0] = &off_1E4285198;
  *(_QWORD *)v168 = v9;
  *(_OWORD *)&v168[8] = xmmword_19FFB3840;
  v10 = (char *)operator new(0x28uLL);
  strcpy(v10, "md::ita::EndFrameGraphPreparation");
  v169 = 25963;
  v171 = v170;
  v170[0] = &off_1E42771B8;
  v170[1] = 0;
  v173 = v172;
  v172[0] = &off_1E4285270;
  v175 = v174;
  v174[0] = &off_1E4285228;
  *(_QWORD *)v176 = v10;
  *(_OWORD *)&v176[8] = xmmword_19FFB3840;
  v205 = 0;
  v206 = 0;
  v204 = 0;
  v11 = (char *)operator new(0x300uLL);
  v204 = v11;
  v205 = v11;
  v206 = v11 + 768;
  *(_WORD *)v11 = -15987;
  *((_QWORD *)v11 + 4) = v11 + 8;
  std::__function::__func<ecs2::ForwardToExecute<md::ita::BuildSSAODOFCommonFrameGraph>,std::allocator<ecs2::ForwardToExecute<md::ita::BuildSSAODOFCommonFrameGraph>>,void ()(ecs2::Runtime &)>::__clone((uint64_t)v129, (_QWORD *)v11 + 1);
  *((_QWORD *)v11 + 8) = v11 + 40;
  std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::BuildSSAODOFCommonFrameGraph>(md::ita::BuildSSAODOFCommonFrameGraph &&)::{lambda(void)#1},std::allocator<md::ita::BuildSSAODOFCommonFrameGraph &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::BuildSSAODOFCommonFrameGraph>(md::ita::BuildSSAODOFCommonFrameGraph &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone((uint64_t)v131, (_QWORD *)v11 + 5);
  *((_QWORD *)v11 + 12) = v11 + 72;
  std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::BuildSSAODOFCommonFrameGraph>(md::ita::BuildSSAODOFCommonFrameGraph &&)::{lambda(void)#2},std::allocator<md::ita::BuildSSAODOFCommonFrameGraph &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::BuildSSAODOFCommonFrameGraph>(md::ita::BuildSSAODOFCommonFrameGraph &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone((uint64_t)v133, (_QWORD *)v11 + 9);
  std::string::__init_copy_ctor_external((std::string *)(v11 + 104), v5, 0x25uLL);
  v12 = v139;
  *((_WORD *)v11 + 64) = v137;
  if (!v12)
    goto LABEL_4;
  if (v12 != v138)
  {
    v12 = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v12 + 16))(v12);
LABEL_4:
    *((_QWORD *)v11 + 20) = v12;
    goto LABEL_6;
  }
  *((_QWORD *)v11 + 20) = v11 + 136;
  (*(void (**)(_QWORD *, char *))(v138[0] + 24))(v138, v11 + 136);
LABEL_6:
  v13 = (uint64_t)v141;
  if (!v141)
  {
LABEL_9:
    *((_QWORD *)v11 + 24) = v13;
    goto LABEL_11;
  }
  if (v141 != v140)
  {
    v13 = (*(uint64_t (**)(void))(*v141 + 16))();
    goto LABEL_9;
  }
  *((_QWORD *)v11 + 24) = v11 + 168;
  (*(void (**)(uint64_t, _QWORD *))(v140[0] + 24))((uint64_t)v140, (_QWORD *)v11 + 21);
LABEL_11:
  v14 = (uint64_t)v143;
  if (!v143)
  {
LABEL_14:
    *((_QWORD *)v11 + 28) = v14;
    goto LABEL_16;
  }
  if (v143 != v142)
  {
    v14 = (*(uint64_t (**)(void))(*v143 + 16))();
    goto LABEL_14;
  }
  *((_QWORD *)v11 + 28) = v11 + 200;
  (*(void (**)(uint64_t, _QWORD *))(v142[0] + 24))((uint64_t)v142, (_QWORD *)v11 + 25);
LABEL_16:
  v15 = (std::string *)(v11 + 232);
  if ((__s[23] & 0x80000000) != 0)
  {
    std::string::__init_copy_ctor_external(v15, *(const std::string::value_type **)__s, *(std::string::size_type *)&__s[8]);
  }
  else
  {
    *(_OWORD *)&v15->__r_.__value_.__l.__data_ = *(_OWORD *)__s;
    *((_QWORD *)v11 + 31) = *(_QWORD *)&__s[16];
  }
  *((_WORD *)v11 + 128) = v145;
  v16 = (uint64_t)v147;
  if (!v147)
    goto LABEL_22;
  if (v147 != v146)
  {
    v16 = (*(uint64_t (**)(void))(*v147 + 16))();
LABEL_22:
    *((_QWORD *)v11 + 36) = v16;
    goto LABEL_24;
  }
  *((_QWORD *)v11 + 36) = v11 + 264;
  (*(void (**)(uint64_t, _QWORD *))(v146[0] + 24))((uint64_t)v146, (_QWORD *)v11 + 33);
LABEL_24:
  v17 = (uint64_t)v149;
  if (!v149)
  {
LABEL_27:
    *((_QWORD *)v11 + 40) = v17;
    goto LABEL_29;
  }
  if (v149 != v148)
  {
    v17 = (*(uint64_t (**)(void))(*v149 + 16))();
    goto LABEL_27;
  }
  *((_QWORD *)v11 + 40) = v11 + 296;
  (*(void (**)(uint64_t, _QWORD *))(v148[0] + 24))((uint64_t)v148, (_QWORD *)v11 + 37);
LABEL_29:
  v18 = (uint64_t)v151;
  if (!v151)
  {
LABEL_32:
    *((_QWORD *)v11 + 44) = v18;
    goto LABEL_34;
  }
  if (v151 != v150)
  {
    v18 = (*(uint64_t (**)(void))(*v151 + 16))();
    goto LABEL_32;
  }
  *((_QWORD *)v11 + 44) = v11 + 328;
  (*(void (**)(uint64_t, _QWORD *))(v150[0] + 24))((uint64_t)v150, (_QWORD *)v11 + 41);
LABEL_34:
  v19 = (std::string *)(v11 + 360);
  if ((v152[23] & 0x80000000) != 0)
  {
    std::string::__init_copy_ctor_external(v19, *(const std::string::value_type **)v152, *(std::string::size_type *)&v152[8]);
  }
  else
  {
    *(_OWORD *)&v19->__r_.__value_.__l.__data_ = *(_OWORD *)v152;
    *((_QWORD *)v11 + 47) = *(_QWORD *)&v152[16];
  }
  *((_WORD *)v11 + 192) = v153;
  v20 = (uint64_t)v155;
  if (!v155)
    goto LABEL_40;
  if (v155 != v154)
  {
    v20 = (*(uint64_t (**)(void))(*v155 + 16))();
LABEL_40:
    *((_QWORD *)v11 + 52) = v20;
    goto LABEL_42;
  }
  *((_QWORD *)v11 + 52) = v11 + 392;
  (*(void (**)(uint64_t, _QWORD *))(v154[0] + 24))((uint64_t)v154, (_QWORD *)v11 + 49);
LABEL_42:
  v21 = (uint64_t)v157;
  if (!v157)
  {
LABEL_45:
    *((_QWORD *)v11 + 56) = v21;
    goto LABEL_47;
  }
  if (v157 != v156)
  {
    v21 = (*(uint64_t (**)(void))(*v157 + 16))();
    goto LABEL_45;
  }
  *((_QWORD *)v11 + 56) = v11 + 424;
  (*(void (**)(uint64_t, _QWORD *))(v156[0] + 24))((uint64_t)v156, (_QWORD *)v11 + 53);
LABEL_47:
  v22 = (uint64_t)v159;
  if (!v159)
  {
LABEL_50:
    *((_QWORD *)v11 + 60) = v22;
    goto LABEL_52;
  }
  if (v159 != v158)
  {
    v22 = (*(uint64_t (**)(void))(*v159 + 16))();
    goto LABEL_50;
  }
  *((_QWORD *)v11 + 60) = v11 + 456;
  (*(void (**)(uint64_t, _QWORD *))(v158[0] + 24))((uint64_t)v158, (_QWORD *)v11 + 57);
LABEL_52:
  v23 = (std::string *)(v11 + 488);
  if ((v160[23] & 0x80000000) != 0)
  {
    std::string::__init_copy_ctor_external(v23, *(const std::string::value_type **)v160, *(std::string::size_type *)&v160[8]);
  }
  else
  {
    *(_OWORD *)&v23->__r_.__value_.__l.__data_ = *(_OWORD *)v160;
    *((_QWORD *)v11 + 63) = *(_QWORD *)&v160[16];
  }
  *((_WORD *)v11 + 256) = v161;
  v24 = (uint64_t)v163;
  if (!v163)
    goto LABEL_58;
  if (v163 != v162)
  {
    v24 = (*(uint64_t (**)(void))(*v163 + 16))();
LABEL_58:
    *((_QWORD *)v11 + 68) = v24;
    goto LABEL_60;
  }
  *((_QWORD *)v11 + 68) = v11 + 520;
  (*(void (**)(uint64_t, _QWORD *))(v162[0] + 24))((uint64_t)v162, (_QWORD *)v11 + 65);
LABEL_60:
  v25 = (uint64_t)v165;
  if (!v165)
  {
LABEL_63:
    *((_QWORD *)v11 + 72) = v25;
    goto LABEL_65;
  }
  if (v165 != v164)
  {
    v25 = (*(uint64_t (**)(void))(*v165 + 16))();
    goto LABEL_63;
  }
  *((_QWORD *)v11 + 72) = v11 + 552;
  (*(void (**)(uint64_t, _QWORD *))(v164[0] + 24))((uint64_t)v164, (_QWORD *)v11 + 69);
LABEL_65:
  v26 = (uint64_t)v167;
  if (!v167)
  {
LABEL_68:
    *((_QWORD *)v11 + 76) = v26;
    goto LABEL_70;
  }
  if (v167 != v166)
  {
    v26 = (*(uint64_t (**)(void))(*v167 + 16))();
    goto LABEL_68;
  }
  *((_QWORD *)v11 + 76) = v11 + 584;
  (*(void (**)(uint64_t, _QWORD *))(v166[0] + 24))((uint64_t)v166, (_QWORD *)v11 + 73);
LABEL_70:
  v27 = (std::string *)(v11 + 616);
  if ((v168[23] & 0x80000000) != 0)
  {
    std::string::__init_copy_ctor_external(v27, *(const std::string::value_type **)v168, *(std::string::size_type *)&v168[8]);
  }
  else
  {
    *(_OWORD *)&v27->__r_.__value_.__l.__data_ = *(_OWORD *)v168;
    *((_QWORD *)v11 + 79) = *(_QWORD *)&v168[16];
  }
  *((_WORD *)v11 + 320) = v169;
  v28 = (uint64_t)v171;
  if (!v171)
    goto LABEL_76;
  if (v171 != v170)
  {
    v28 = (*(uint64_t (**)(void))(*v171 + 16))();
LABEL_76:
    *((_QWORD *)v11 + 84) = v28;
    goto LABEL_78;
  }
  *((_QWORD *)v11 + 84) = v11 + 648;
  (*(void (**)(uint64_t, _QWORD *))(v170[0] + 24))((uint64_t)v170, (_QWORD *)v11 + 81);
LABEL_78:
  v29 = (uint64_t)v173;
  if (!v173)
  {
LABEL_81:
    *((_QWORD *)v11 + 88) = v29;
    goto LABEL_83;
  }
  if (v173 != v172)
  {
    v29 = (*(uint64_t (**)(void))(*v173 + 16))();
    goto LABEL_81;
  }
  *((_QWORD *)v11 + 88) = v11 + 680;
  (*(void (**)(uint64_t, _QWORD *))(v172[0] + 24))((uint64_t)v172, (_QWORD *)v11 + 85);
LABEL_83:
  v30 = (uint64_t)v175;
  if (!v175)
  {
LABEL_86:
    *((_QWORD *)v11 + 92) = v30;
    goto LABEL_88;
  }
  if (v175 != v174)
  {
    v30 = (*(uint64_t (**)(void))(*v175 + 16))();
    goto LABEL_86;
  }
  *((_QWORD *)v11 + 92) = v11 + 712;
  (*(void (**)(uint64_t, _QWORD *))(v174[0] + 24))((uint64_t)v174, (_QWORD *)v11 + 89);
LABEL_88:
  v31 = (std::string *)(v11 + 744);
  if ((v176[23] & 0x80000000) != 0)
  {
    std::string::__init_copy_ctor_external(v31, *(const std::string::value_type **)v176, *(std::string::size_type *)&v176[8]);
  }
  else
  {
    *(_OWORD *)&v31->__r_.__value_.__l.__data_ = *(_OWORD *)v176;
    *((_QWORD *)v11 + 95) = *(_QWORD *)&v176[16];
  }
  v205 = v11 + 768;
  v32 = operator new(0x10uLL);
  *v32 = xmmword_19FFB2E40;
  v209 = 0;
  v207 = 0;
  v208 = 0;
  v33 = operator new(0x18uLL);
  v207 = v33;
  v209 = v33 + 3;
  v33[1] = 0;
  v33[2] = 0;
  *v33 = 0;
  v34 = operator new(0x10uLL);
  v33[1] = v34 + 1;
  v33[2] = v34 + 1;
  *v34 = *v32;
  *v33 = v34;
  v118 = v32;
  v210 = 0u;
  v211 = 0u;
  v212 = 0u;
  v213 = 0u;
  v208 = v33 + 3;
  v214 = 0;
  v215 = 31;
  v35 = (char *)operator new(0x28uLL);
  strcpy(v35, "md::ita::CleanUpFrameGraphResources");
  v120[0] = &off_1E42775F0;
  v120[1] = 0;
  v36 = v122;
  v121 = v120;
  v122[0] = &off_1E4285AE0;
  v37 = v124;
  v123 = v122;
  v124[0] = &off_1E4285A98;
  v125 = v124;
  v126 = v35;
  v127 = xmmword_19FFB3D60;
  v218 = 0;
  v216 = 0;
  v217 = 0;
  v38 = (char *)operator new(0x80uLL);
  v216 = v38;
  v217 = v38;
  v218 = v38 + 128;
  *(_WORD *)v38 = 9244;
  *((_QWORD *)v38 + 4) = v38 + 8;
  std::__function::__func<ecs2::ForwardToExecute<md::ita::CleanUpFrameGraphResources>,std::allocator<ecs2::ForwardToExecute<md::ita::CleanUpFrameGraphResources>>,void ()(ecs2::Runtime &)>::__clone((uint64_t)v120, (_QWORD *)v38 + 1);
  *((_QWORD *)v38 + 8) = v38 + 40;
  std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CleanUpFrameGraphResources>(md::ita::CleanUpFrameGraphResources &&)::{lambda(void)#1},std::allocator<md::ita::CleanUpFrameGraphResources &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CleanUpFrameGraphResources>(md::ita::CleanUpFrameGraphResources &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone((uint64_t)v122, (_QWORD *)v38 + 5);
  *((_QWORD *)v38 + 12) = v38 + 72;
  std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CleanUpFrameGraphResources>(md::ita::CleanUpFrameGraphResources &&)::{lambda(void)#2},std::allocator<md::ita::CleanUpFrameGraphResources &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CleanUpFrameGraphResources>(md::ita::CleanUpFrameGraphResources &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone((uint64_t)v124, (_QWORD *)v38 + 9);
  std::string::__init_copy_ctor_external((std::string *)(v38 + 104), v35, 0x23uLL);
  v217 = v38 + 128;
  v219 = 0u;
  v220 = 0u;
  v221 = 0u;
  *(_OWORD *)v222 = 0u;
  *(_OWORD *)__p = 0u;
  v224 = 0u;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  v39 = (char *)operator new(0x180uLL);
  *(_QWORD *)(a1 + 32) = v39;
  *(_QWORD *)(a1 + 40) = v39;
  *(_QWORD *)(a1 + 48) = v39 + 384;
  v40 = v186;
  ecs2::ModuleBucketDescriptor::ModuleBucketDescriptor((uint64_t)v39, (uint64_t)&v190);
  ecs2::ModuleBucketDescriptor::ModuleBucketDescriptor((uint64_t)(v39 + 128), (uint64_t)&v203);
  ecs2::ModuleBucketDescriptor::ModuleBucketDescriptor((uint64_t)(v39 + 256), (uint64_t)&v215);
  *(_QWORD *)(a1 + 40) = v39 + 384;
  v41 = (void **)__p[1];
  v42 = v178;
  if (__p[1])
  {
    v43 = (void **)v224;
    v44 = __p[1];
    if ((void *)v224 == __p[1])
    {
LABEL_103:
      *(_QWORD *)&v224 = v41;
      operator delete(v44);
      goto LABEL_104;
    }
    while (1)
    {
      if (*((char *)v43 - 1) < 0)
        operator delete(*(v43 - 3));
      v45 = (void **)*(v43 - 4);
      if (v43 - 7 == v45)
      {
        v45 = v43 - 7;
        v46 = 4;
      }
      else
      {
        if (!v45)
          goto LABEL_96;
        v46 = 5;
      }
      (*((void (**)(void **))*v45 + v46))(v45);
LABEL_96:
      v43 -= 8;
      if (v43 == v41)
      {
        v44 = __p[1];
        goto LABEL_103;
      }
    }
  }
LABEL_104:
  v47 = (void **)v222[0];
  if (!v222[0])
    goto LABEL_117;
  v48 = (void **)v222[1];
  v49 = v222[0];
  if (v222[1] != v222[0])
  {
    while (1)
    {
      if (*((char *)v48 - 1) < 0)
        operator delete(*(v48 - 3));
      v50 = (void **)*(v48 - 4);
      if (v48 - 7 == v50)
      {
        v50 = v48 - 7;
        v51 = 4;
      }
      else
      {
        if (!v50)
          goto LABEL_109;
        v51 = 5;
      }
      (*((void (**)(void **))*v50 + v51))(v50);
LABEL_109:
      v48 -= 8;
      if (v48 == v47)
      {
        v49 = v222[0];
        break;
      }
    }
  }
  v222[1] = v47;
  operator delete(v49);
LABEL_117:
  ecs2::ModuleBucketExecutionDescriptor::~ModuleBucketExecutionDescriptor((ecs2::ModuleBucketExecutionDescriptor *)&v216);
  v52 = v213;
  v53 = v184;
  if (!(_QWORD)v213)
    goto LABEL_130;
  v54 = *((_QWORD *)&v213 + 1);
  v55 = (void *)v213;
  if (*((_QWORD *)&v213 + 1) != (_QWORD)v213)
  {
    while (1)
    {
      if (*(char *)(v54 - 1) < 0)
        operator delete(*(void **)(v54 - 24));
      v56 = *(_QWORD **)(v54 - 32);
      if ((_QWORD *)(v54 - 56) == v56)
      {
        v56 = (_QWORD *)(v54 - 56);
        v57 = 4;
      }
      else
      {
        if (!v56)
          goto LABEL_122;
        v57 = 5;
      }
      (*(void (**)(_QWORD *))(*v56 + 8 * v57))(v56);
LABEL_122:
      v54 -= 64;
      if (v54 == v52)
      {
        v55 = (void *)v213;
        break;
      }
    }
  }
  *((_QWORD *)&v213 + 1) = v52;
  operator delete(v55);
LABEL_130:
  v58 = *((_QWORD *)&v211 + 1);
  if (!*((_QWORD *)&v211 + 1))
    goto LABEL_143;
  v59 = v212;
  v60 = (void *)*((_QWORD *)&v211 + 1);
  if ((_QWORD)v212 != *((_QWORD *)&v211 + 1))
  {
    while (1)
    {
      if (*(char *)(v59 - 1) < 0)
        operator delete(*(void **)(v59 - 24));
      v61 = *(_QWORD **)(v59 - 32);
      if ((_QWORD *)(v59 - 56) == v61)
      {
        v61 = (_QWORD *)(v59 - 56);
        v62 = 4;
      }
      else
      {
        if (!v61)
          goto LABEL_135;
        v62 = 5;
      }
      (*(void (**)(_QWORD *))(*v61 + 8 * v62))(v61);
LABEL_135:
      v59 -= 64;
      if (v59 == v58)
      {
        v60 = (void *)*((_QWORD *)&v211 + 1);
        break;
      }
    }
  }
  *(_QWORD *)&v212 = v58;
  operator delete(v60);
LABEL_143:
  ecs2::ModuleBucketExecutionDescriptor::~ModuleBucketExecutionDescriptor((ecs2::ModuleBucketExecutionDescriptor *)&v204);
  v63 = (void **)v200;
  if (!v200)
    goto LABEL_156;
  v64 = v201;
  v65 = v200;
  if (v201 != v200)
  {
    while (1)
    {
      if (*((char *)v64 - 1) < 0)
        operator delete(*(v64 - 3));
      v66 = (void **)*(v64 - 4);
      if (v64 - 7 == v66)
      {
        v66 = v64 - 7;
        v67 = 4;
      }
      else
      {
        if (!v66)
          goto LABEL_148;
        v67 = 5;
      }
      (*((void (**)(void))*v66 + v67))();
LABEL_148:
      v64 -= 8;
      if (v64 == v63)
      {
        v65 = v200;
        break;
      }
    }
  }
  v201 = v63;
  operator delete(v65);
LABEL_156:
  v68 = (void **)v197;
  if (!v197)
    goto LABEL_169;
  v69 = v198;
  v70 = v197;
  if (v198 != v197)
  {
    while (1)
    {
      if (*((char *)v69 - 1) < 0)
        operator delete(*(v69 - 3));
      v71 = (void **)*(v69 - 4);
      if (v69 - 7 == v71)
      {
        v71 = v69 - 7;
        v72 = 4;
      }
      else
      {
        if (!v71)
          goto LABEL_161;
        v72 = 5;
      }
      (*((void (**)(void))*v71 + v72))();
LABEL_161:
      v69 -= 8;
      if (v69 == v68)
      {
        v70 = v197;
        break;
      }
    }
  }
  v198 = v68;
  operator delete(v70);
LABEL_169:
  ecs2::ModuleBucketExecutionDescriptor::~ModuleBucketExecutionDescriptor((ecs2::ModuleBucketExecutionDescriptor *)&v191);
  if (SHIBYTE(v127) < 0)
    operator delete(v126);
  v73 = v129;
  v74 = v120;
  if (v125 == v124)
  {
    v75 = 4;
  }
  else
  {
    if (!v125)
      goto LABEL_176;
    v75 = 5;
    v37 = v125;
  }
  (*(void (**)(_QWORD *))(*v37 + 8 * v75))(v37);
LABEL_176:
  if (v123 == v122)
  {
    v76 = 4;
  }
  else
  {
    if (!v123)
      goto LABEL_181;
    v76 = 5;
    v36 = v123;
  }
  (*(void (**)(_QWORD *))(*v36 + 8 * v76))(v36);
LABEL_181:
  if (v121 == v120)
  {
    v78 = 4;
    v77 = v182;
  }
  else
  {
    v77 = v182;
    if (!v121)
      goto LABEL_186;
    v78 = 5;
    v74 = v121;
  }
  (*(void (**)(_QWORD *))(*v74 + 8 * v78))(v74);
LABEL_186:
  operator delete(v118);
  if ((v176[23] & 0x80000000) != 0)
    operator delete(*(void **)v176);
  v79 = v174;
  if (v175 == v174)
  {
    v80 = 4;
  }
  else
  {
    if (!v175)
      goto LABEL_193;
    v80 = 5;
    v79 = v175;
  }
  (*(void (**)(void))(*v79 + 8 * v80))();
LABEL_193:
  v81 = v172;
  if (v173 == v172)
  {
    v82 = 4;
  }
  else
  {
    if (!v173)
      goto LABEL_198;
    v82 = 5;
    v81 = v173;
  }
  (*(void (**)(void))(*v81 + 8 * v82))();
LABEL_198:
  v83 = v170;
  if (v171 == v170)
  {
    v84 = 4;
  }
  else
  {
    if (!v171)
      goto LABEL_203;
    v84 = 5;
    v83 = v171;
  }
  (*(void (**)(void))(*v83 + 8 * v84))();
LABEL_203:
  if ((v168[23] & 0x80000000) != 0)
    operator delete(*(void **)v168);
  v85 = v166;
  if (v167 == v166)
  {
    v86 = 4;
  }
  else
  {
    if (!v167)
      goto LABEL_210;
    v86 = 5;
    v85 = v167;
  }
  (*(void (**)(void))(*v85 + 8 * v86))();
LABEL_210:
  v87 = v164;
  if (v165 == v164)
  {
    v88 = 4;
  }
  else
  {
    if (!v165)
      goto LABEL_215;
    v88 = 5;
    v87 = v165;
  }
  (*(void (**)(void))(*v87 + 8 * v88))();
LABEL_215:
  v89 = v162;
  if (v163 == v162)
  {
    v90 = 4;
  }
  else
  {
    if (!v163)
      goto LABEL_220;
    v90 = 5;
    v89 = v163;
  }
  (*(void (**)(void))(*v89 + 8 * v90))();
LABEL_220:
  if ((v160[23] & 0x80000000) != 0)
    operator delete(*(void **)v160);
  v91 = v158;
  if (v159 == v158)
  {
    v92 = 4;
  }
  else
  {
    if (!v159)
      goto LABEL_227;
    v92 = 5;
    v91 = v159;
  }
  (*(void (**)(void))(*v91 + 8 * v92))();
LABEL_227:
  v93 = v156;
  if (v157 == v156)
  {
    v94 = 4;
  }
  else
  {
    if (!v157)
      goto LABEL_232;
    v94 = 5;
    v93 = v157;
  }
  (*(void (**)(void))(*v93 + 8 * v94))();
LABEL_232:
  v95 = v154;
  if (v155 == v154)
  {
    v96 = 4;
  }
  else
  {
    if (!v155)
      goto LABEL_237;
    v96 = 5;
    v95 = v155;
  }
  (*(void (**)(void))(*v95 + 8 * v96))();
LABEL_237:
  if ((v152[23] & 0x80000000) != 0)
    operator delete(*(void **)v152);
  v97 = v150;
  if (v151 == v150)
  {
    v98 = 4;
  }
  else
  {
    if (!v151)
      goto LABEL_244;
    v98 = 5;
    v97 = v151;
  }
  (*(void (**)(void))(*v97 + 8 * v98))();
LABEL_244:
  v99 = v148;
  if (v149 == v148)
  {
    v100 = 4;
  }
  else
  {
    if (!v149)
      goto LABEL_249;
    v100 = 5;
    v99 = v149;
  }
  (*(void (**)(void))(*v99 + 8 * v100))();
LABEL_249:
  v101 = v146;
  if (v147 == v146)
  {
    v102 = 4;
  }
  else
  {
    if (!v147)
      goto LABEL_254;
    v102 = 5;
    v101 = v147;
  }
  (*(void (**)(void))(*v101 + 8 * v102))();
LABEL_254:
  if ((__s[23] & 0x80000000) != 0)
    operator delete(*(void **)__s);
  v103 = v142;
  if (v143 == v142)
  {
    v104 = 4;
  }
  else
  {
    if (!v143)
      goto LABEL_261;
    v104 = 5;
    v103 = v143;
  }
  (*(void (**)(void))(*v103 + 8 * v104))();
LABEL_261:
  v105 = v140;
  if (v141 == v140)
  {
    v106 = 4;
  }
  else
  {
    if (!v141)
      goto LABEL_266;
    v106 = 5;
    v105 = v141;
  }
  (*(void (**)(void))(*v105 + 8 * v106))();
LABEL_266:
  v107 = v138;
  if (v139 == v138)
  {
    v108 = 4;
  }
  else
  {
    if (!v139)
      goto LABEL_271;
    v108 = 5;
    v107 = v139;
  }
  (*(void (**)(void))(*v107 + 8 * v108))();
LABEL_271:
  if (SHIBYTE(v136) < 0)
    operator delete(v135);
  v109 = v133;
  if (v134 == v133)
  {
    v110 = 4;
  }
  else
  {
    if (!v134)
      goto LABEL_278;
    v110 = 5;
    v109 = v134;
  }
  (*(void (**)(void))(*v109 + 8 * v110))();
LABEL_278:
  v111 = v131;
  if (v132 == v131)
  {
    v112 = 4;
  }
  else
  {
    if (!v132)
      goto LABEL_283;
    v112 = 5;
    v111 = v132;
  }
  (*(void (**)(void))(*v111 + 8 * v112))();
LABEL_283:
  if (v130 == v129)
  {
    v113 = 4;
  }
  else
  {
    if (!v130)
      goto LABEL_288;
    v113 = 5;
    v73 = v130;
  }
  (*(void (**)(_QWORD *))(*v73 + 8 * v113))(v73);
LABEL_288:
  if ((v180[23] & 0x80000000) != 0)
    operator delete(*(void **)v180);
  if (v179 == v178)
  {
    v114 = 4;
  }
  else
  {
    if (!v179)
      goto LABEL_295;
    v114 = 5;
    v42 = v179;
  }
  (*(void (**)(_QWORD *))(*v42 + 8 * v114))(v42);
LABEL_295:
  if (SHIBYTE(v189) < 0)
    operator delete(v188);
  if (v187 == v186)
  {
    v115 = 4;
  }
  else
  {
    if (!v187)
      goto LABEL_302;
    v115 = 5;
    v40 = v187;
  }
  (*(void (**)(_QWORD *))(*v40 + 8 * v115))(v40);
LABEL_302:
  if (v185 == v184)
  {
    v116 = 4;
  }
  else
  {
    if (!v185)
      goto LABEL_307;
    v116 = 5;
    v53 = v185;
  }
  (*(void (**)(_QWORD *))(*v53 + 8 * v116))(v53);
LABEL_307:
  if (v183 == v182)
  {
    v117 = 4;
  }
  else
  {
    if (!v183)
      return;
    v117 = 5;
    v77 = v183;
  }
  (*(void (**)(_QWORD *))(*v77 + 8 * v117))(v77);
}

void sub_19FABD540(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ecs2::ModuleBucketExecutionDescriptor *a9, void *a10, uint64_t a11, ecs2::ModuleBucketExecutionDescriptor *a12, uint64_t a13, uint64_t a14, uint64_t a15, _QWORD *a16, _QWORD *a17, _QWORD *a18, _QWORD *a19, _QWORD *a20,_QWORD *a21,_QWORD *a22,_QWORD *a23,_QWORD *a24,_QWORD *a25,uint64_t a26,_QWORD *a27,_QWORD *a28,_QWORD *a29,_QWORD *a30,_QWORD *a31,_QWORD *a32,_QWORD *a33,_QWORD *a34,_QWORD *a35,_QWORD *a36,_QWORD *a37,_QWORD *a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,void *a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  uint64_t a67;
  void *a68;
  char a72;
  _QWORD *v72;
  _QWORD *v73;
  unint64_t *v74;
  unint64_t v75;
  _QWORD *v77;
  uint64_t v78;
  _QWORD *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;

  v77 = *(_QWORD **)(v75 + 704);
  if (v77 == v73)
  {
    v78 = 4;
  }
  else
  {
    if (!v77)
      goto LABEL_6;
    v78 = 5;
    v73 = *(_QWORD **)(v75 + 704);
  }
  (*(void (**)(_QWORD *))(*v73 + 8 * v78))(v73);
LABEL_6:
  v79 = *(_QWORD **)(v75 + 672);
  if (v79 == v72)
  {
    v80 = 4;
  }
  else
  {
    if (!v79)
      goto LABEL_11;
    v80 = 5;
    v72 = *(_QWORD **)(v75 + 672);
  }
  (*(void (**)(_QWORD *))(*v72 + 8 * v80))(v72);
LABEL_11:
  STACK[0x5C0] = v75;
  if (SLOBYTE(STACK[0x46F]) < 0)
    operator delete((void *)STACK[0x458]);
  if ((_QWORD *)STACK[0x450] == a20)
  {
    v81 = 4;
  }
  else
  {
    if (!STACK[0x450])
      goto LABEL_18;
    v81 = 5;
    a20 = (_QWORD *)STACK[0x450];
  }
  (*(void (**)(void))(*a20 + 8 * v81))();
LABEL_18:
  if ((_QWORD *)STACK[0x430] == a21)
  {
    v82 = 4;
  }
  else
  {
    if (!STACK[0x430])
      goto LABEL_23;
    v82 = 5;
    a21 = (_QWORD *)STACK[0x430];
  }
  (*(void (**)(void))(*a21 + 8 * v82))();
LABEL_23:
  if ((_QWORD *)STACK[0x410] == a22)
  {
    v83 = 4;
  }
  else
  {
    if (!STACK[0x410])
      goto LABEL_28;
    v83 = 5;
    a22 = (_QWORD *)STACK[0x410];
  }
  (*(void (**)(void))(*a22 + 8 * v83))();
LABEL_28:
  if (SLOBYTE(STACK[0x3EF]) < 0)
    operator delete((void *)STACK[0x3D8]);
  if ((_QWORD *)STACK[0x3D0] == a23)
  {
    v84 = 4;
  }
  else
  {
    if (!STACK[0x3D0])
      goto LABEL_35;
    v84 = 5;
    a23 = (_QWORD *)STACK[0x3D0];
  }
  (*(void (**)(void))(*a23 + 8 * v84))();
LABEL_35:
  if ((_QWORD *)STACK[0x3B0] == a24)
  {
    v85 = 4;
  }
  else
  {
    if (!STACK[0x3B0])
      goto LABEL_40;
    v85 = 5;
    a24 = (_QWORD *)STACK[0x3B0];
  }
  (*(void (**)(void))(*a24 + 8 * v85))();
LABEL_40:
  if ((_QWORD *)STACK[0x390] == a25)
  {
    v86 = 4;
  }
  else
  {
    if (!STACK[0x390])
      goto LABEL_45;
    v86 = 5;
    a25 = (_QWORD *)STACK[0x390];
  }
  (*(void (**)(void))(*a25 + 8 * v86))();
LABEL_45:
  if (SLOBYTE(STACK[0x36F]) < 0)
    operator delete((void *)STACK[0x358]);
  if ((_QWORD *)STACK[0x350] == a27)
  {
    v87 = 4;
  }
  else
  {
    if (!STACK[0x350])
      goto LABEL_52;
    v87 = 5;
    a27 = (_QWORD *)STACK[0x350];
  }
  (*(void (**)(void))(*a27 + 8 * v87))();
LABEL_52:
  if ((_QWORD *)STACK[0x330] == a28)
  {
    v88 = 4;
  }
  else
  {
    if (!STACK[0x330])
      goto LABEL_57;
    v88 = 5;
    a28 = (_QWORD *)STACK[0x330];
  }
  (*(void (**)(void))(*a28 + 8 * v88))();
LABEL_57:
  if ((_QWORD *)STACK[0x310] == a29)
  {
    v89 = 4;
  }
  else
  {
    if (!STACK[0x310])
      goto LABEL_62;
    v89 = 5;
    a29 = (_QWORD *)STACK[0x310];
  }
  (*(void (**)(void))(*a29 + 8 * v89))();
LABEL_62:
  if (SLOBYTE(STACK[0x2EF]) < 0)
    operator delete((void *)STACK[0x2D8]);
  if ((_QWORD *)STACK[0x2D0] == a30)
  {
    v90 = 4;
  }
  else
  {
    if (!STACK[0x2D0])
      goto LABEL_69;
    v90 = 5;
    a30 = (_QWORD *)STACK[0x2D0];
  }
  (*(void (**)(void))(*a30 + 8 * v90))();
LABEL_69:
  if ((_QWORD *)STACK[0x2B0] == a31)
  {
    v91 = 4;
  }
  else
  {
    if (!STACK[0x2B0])
      goto LABEL_74;
    v91 = 5;
    a31 = (_QWORD *)STACK[0x2B0];
  }
  (*(void (**)(void))(*a31 + 8 * v91))();
LABEL_74:
  if ((_QWORD *)STACK[0x290] == a32)
  {
    v92 = 4;
  }
  else
  {
    if (!STACK[0x290])
      goto LABEL_79;
    v92 = 5;
    a32 = (_QWORD *)STACK[0x290];
  }
  (*(void (**)(void))(*a32 + 8 * v92))();
LABEL_79:
  if (SLOBYTE(STACK[0x26F]) < 0)
    operator delete((void *)STACK[0x258]);
  if ((_QWORD *)STACK[0x250] == a33)
  {
    v93 = 4;
  }
  else
  {
    if (!STACK[0x250])
      goto LABEL_86;
    v93 = 5;
    a33 = (_QWORD *)STACK[0x250];
  }
  (*(void (**)(void))(*a33 + 8 * v93))();
LABEL_86:
  if ((_QWORD *)STACK[0x230] == a34)
  {
    v94 = 4;
  }
  else
  {
    if (!STACK[0x230])
      goto LABEL_91;
    v94 = 5;
    a34 = (_QWORD *)STACK[0x230];
  }
  (*(void (**)(void))(*a34 + 8 * v94))();
LABEL_91:
  if ((_QWORD *)STACK[0x210] == a35)
  {
    v95 = 4;
  }
  else
  {
    if (!STACK[0x210])
      goto LABEL_96;
    v95 = 5;
    a35 = (_QWORD *)STACK[0x210];
  }
  (*(void (**)(void))(*a35 + 8 * v95))();
LABEL_96:
  if (a72 < 0)
    operator delete(a68);
  if ((_QWORD *)a67 == a37)
  {
    v96 = 4;
  }
  else
  {
    if (!a67)
      goto LABEL_103;
    v96 = 5;
    a37 = (_QWORD *)a67;
  }
  (*(void (**)(void))(*a37 + 8 * v96))();
LABEL_103:
  if ((_QWORD *)a63 == a38)
  {
    v97 = 4;
  }
  else
  {
    if (!a63)
      goto LABEL_108;
    v97 = 5;
    a38 = (_QWORD *)a63;
  }
  (*(void (**)(void))(*a38 + 8 * v97))();
LABEL_108:
  if ((_QWORD *)a59 == a36)
  {
    v98 = 4;
  }
  else
  {
    if (!a59)
      goto LABEL_113;
    v98 = 5;
    a36 = (_QWORD *)a59;
  }
  (*(void (**)(void))(*a36 + 8 * v98))();
LABEL_113:
  if (SLOBYTE(STACK[0x4AF]) < 0)
    operator delete((void *)STACK[0x498]);
  if ((_QWORD *)STACK[0x490] == a16)
  {
    v99 = 4;
  }
  else
  {
    if (!STACK[0x490])
      goto LABEL_120;
    v99 = 5;
    a16 = (_QWORD *)STACK[0x490];
  }
  (*(void (**)(void))(*a16 + 8 * v99))();
LABEL_120:
  if (SLOBYTE(STACK[0x52F]) < 0)
    operator delete((void *)STACK[0x518]);
  if ((_QWORD *)STACK[0x510] == a19)
  {
    v100 = 4;
  }
  else
  {
    if (!STACK[0x510])
      goto LABEL_127;
    v100 = 5;
    a19 = (_QWORD *)STACK[0x510];
  }
  (*(void (**)(void))(*a19 + 8 * v100))();
LABEL_127:
  if ((_QWORD *)STACK[0x4F0] == a17)
  {
    v101 = 4;
  }
  else
  {
    if (!STACK[0x4F0])
      goto LABEL_132;
    v101 = 5;
    a17 = (_QWORD *)STACK[0x4F0];
  }
  (*(void (**)(void))(*a17 + 8 * v101))();
LABEL_132:
  if ((_QWORD *)STACK[0x4D0] == a18)
  {
    v102 = 4;
  }
  else
  {
    if (!STACK[0x4D0])
      goto LABEL_137;
    v102 = 5;
    a18 = (_QWORD *)STACK[0x4D0];
  }
  (*(void (**)(void))(*a18 + 8 * v102))();
  do
  {
LABEL_137:
    ecs2::ModuleBucketLayoutDescriptor::{unnamed type#1}::~ModuleBucketLayoutDescriptor((void **)v74 - 6);
    ecs2::ModuleBucketExecutionDescriptor::~ModuleBucketExecutionDescriptor((ecs2::ModuleBucketExecutionDescriptor *)(v74 - 15));
    v74 -= 16;
  }
  while (v74 != &STACK[0x530]);
  if (*(char *)(a15 + 31) < 0)
    operator delete(*(void **)(a15 + 8));
  _Unwind_Resume(a1);
}

void std::__function::__func<md::LegacyLayoutModule,std::allocator<md::LegacyLayoutModule>,ecs2::ModuleDescriptor ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::LegacyLayoutModule,std::allocator<md::LegacyLayoutModule>,ecs2::ModuleDescriptor ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E4275B38;
  return result;
}

void std::__function::__func<md::LegacyLayoutModule,std::allocator<md::LegacyLayoutModule>,ecs2::ModuleDescriptor ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E4275B38;
}

void std::__function::__func<md::LegacyLayoutModule,std::allocator<md::LegacyLayoutModule>,ecs2::ModuleDescriptor ()(void)>::operator()(uint64_t a1@<X8>)
{
  __int16 v2;
  char *v3;
  char *v4;
  char *v5;
  char *v6;
  _QWORD *v7;
  _QWORD *v8;
  char *v9;
  void **v10;
  _QWORD *v11;
  void **v12;
  void *v13;
  void **v14;
  uint64_t v15;
  void **v16;
  void **v17;
  void *v18;
  void **v19;
  uint64_t v20;
  void **v21;
  void **v22;
  void *v23;
  void **v24;
  uint64_t v25;
  void **v26;
  void **v27;
  void *v28;
  void **v29;
  uint64_t v30;
  void **v31;
  void **v32;
  void *v33;
  void **v34;
  uint64_t v35;
  void **v36;
  void **v37;
  void *v38;
  void **v39;
  uint64_t v40;
  _QWORD *v41;
  _QWORD *v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  __int16 v62;
  _QWORD v63[3];
  _QWORD *v64;
  _QWORD v65[3];
  _QWORD *v66;
  _QWORD v67[3];
  _QWORD *v68;
  void *v69;
  __int128 v70;
  __int16 v71;
  _QWORD v72[3];
  _QWORD *v73;
  _QWORD v74[3];
  _QWORD *v75;
  _QWORD v76[3];
  _QWORD *v77;
  void *v78;
  __int128 v79;
  __int16 v80;
  _QWORD v81[3];
  _QWORD *v82;
  _QWORD v83[3];
  _QWORD *v84;
  _QWORD v85[3];
  _QWORD *v86;
  void *v87;
  __int128 v88;
  __int16 v89;
  _QWORD v90[3];
  _QWORD *v91;
  _QWORD v92[3];
  _QWORD *v93;
  _QWORD v94[3];
  _QWORD *v95;
  void *v96;
  __int128 v97;
  __int16 v98;
  char *v99;
  uint64_t v100;
  char *v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  void *v105[2];
  void *v106[2];
  __int128 v107;
  __int16 v108;
  char *v109;
  uint64_t v110;
  char *v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  void *v115[2];
  void *v116[2];
  __int128 v117;
  __int16 v118;
  char *v119;
  uint64_t v120;
  char *v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  void *v125[2];
  void *__p[2];
  __int128 v127;
  uint64_t v128;

  v128 = *MEMORY[0x1E0C80C00];
  v2 = gdc::FamilyInfo<ecs2::ModuleDescriptor,unsigned short>::Counter::nextId(void)::counter++;
  *(_WORD *)a1 = v2;
  *(_BYTE *)(a1 + 31) = 18;
  strcpy((char *)(a1 + 8), "LegacyLayoutModule");
  v98 = 2;
  v3 = (char *)operator new(0x20uLL);
  strcpy(v3, "md::ita::LegacyLayoutStartTask");
  v80 = 13110;
  v81[0] = &off_1E42769D8;
  v81[1] = 0;
  v82 = v81;
  v83[0] = &off_1E42842B0;
  v84 = v83;
  v85[0] = &off_1E4284268;
  v86 = v85;
  v87 = v3;
  v88 = xmmword_19FFB3890;
  v4 = (char *)operator new(0x28uLL);
  strcpy(v4, "md::ita::ReserveStencilRangeTask");
  v89 = 21272;
  v90[0] = &off_1E4276F78;
  v90[1] = 0;
  v91 = v90;
  v92[0] = &off_1E4284DF0;
  v93 = v92;
  v94[0] = &off_1E4284DA8;
  v95 = v94;
  v96 = v4;
  v97 = xmmword_19FFB3C00;
  v100 = 0;
  v101 = 0;
  v99 = 0;
  v99 = (char *)operator new(0x100uLL);
  v100 = (uint64_t)v99;
  v101 = v99 + 256;
  v100 = std::__uninitialized_allocator_copy[abi:nn180100]<std::allocator<ecs2::ExecutionTaskDescriptor>,ecs2::ExecutionTaskDescriptor const*,ecs2::ExecutionTaskDescriptor const*,ecs2::ExecutionTaskDescriptor*>((uint64_t)&v80, (uint64_t)&v98, (uint64_t)v99);
  v102 = 0u;
  v103 = 0u;
  v104 = 0u;
  *(_OWORD *)v105 = 0u;
  *(_OWORD *)v106 = 0u;
  v107 = 0u;
  v108 = 11;
  v5 = (char *)operator new(0x20uLL);
  strcpy(v5, "md::ita::LegacyLayoutTask");
  v71 = -28404;
  v72[0] = &off_1E4276120;
  v72[1] = 0;
  v73 = v72;
  v74[0] = &off_1E4283140;
  v75 = v74;
  v76[0] = &off_1E42830F8;
  v77 = v76;
  v78 = v5;
  v79 = xmmword_19FFB34B0;
  v111 = 0;
  v109 = 0;
  v110 = 0;
  v109 = (char *)operator new(0x80uLL);
  v110 = (uint64_t)v109;
  v111 = v109 + 128;
  v110 = std::__uninitialized_allocator_copy[abi:nn180100]<std::allocator<ecs2::ExecutionTaskDescriptor>,ecs2::ExecutionTaskDescriptor const*,ecs2::ExecutionTaskDescriptor const*,ecs2::ExecutionTaskDescriptor*>((uint64_t)&v71, (uint64_t)&v80, (uint64_t)v109);
  v112 = 0u;
  v113 = 0u;
  v114 = 0u;
  *(_OWORD *)v115 = 0u;
  *(_OWORD *)v116 = 0u;
  v117 = 0u;
  v118 = 27;
  v6 = (char *)operator new(0x20uLL);
  strcpy(v6, "md::ita::OnLayoutEndTask");
  v62 = -25883;
  v63[0] = &off_1E4276000;
  v63[1] = 0;
  v7 = v65;
  v64 = v63;
  v65[0] = &off_1E4282F00;
  v8 = v67;
  v66 = v65;
  v67[0] = &off_1E4282EB8;
  v68 = v67;
  v69 = v6;
  v70 = xmmword_19FFB3800;
  v121 = 0;
  v119 = 0;
  v120 = 0;
  v119 = (char *)operator new(0x80uLL);
  v120 = (uint64_t)v119;
  v121 = v119 + 128;
  v120 = std::__uninitialized_allocator_copy[abi:nn180100]<std::allocator<ecs2::ExecutionTaskDescriptor>,ecs2::ExecutionTaskDescriptor const*,ecs2::ExecutionTaskDescriptor const*,ecs2::ExecutionTaskDescriptor*>((uint64_t)&v62, (uint64_t)&v71, (uint64_t)v119);
  v122 = 0u;
  v123 = 0u;
  v124 = 0u;
  *(_OWORD *)v125 = 0u;
  *(_OWORD *)__p = 0u;
  v127 = 0u;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  v9 = (char *)operator new(0x180uLL);
  *(_QWORD *)(a1 + 32) = v9;
  *(_QWORD *)(a1 + 40) = v9;
  *(_QWORD *)(a1 + 48) = v9 + 384;
  ecs2::ModuleBucketDescriptor::ModuleBucketDescriptor((uint64_t)v9, (uint64_t)&v98);
  ecs2::ModuleBucketDescriptor::ModuleBucketDescriptor((uint64_t)(v9 + 128), (uint64_t)&v108);
  ecs2::ModuleBucketDescriptor::ModuleBucketDescriptor((uint64_t)(v9 + 256), (uint64_t)&v118);
  *(_QWORD *)(a1 + 40) = v9 + 384;
  v10 = (void **)__p[1];
  v11 = v85;
  if (__p[1])
  {
    v12 = (void **)v127;
    v13 = __p[1];
    if ((void *)v127 == __p[1])
    {
LABEL_13:
      *(_QWORD *)&v127 = v10;
      operator delete(v13);
      goto LABEL_14;
    }
    while (1)
    {
      if (*((char *)v12 - 1) < 0)
        operator delete(*(v12 - 3));
      v14 = (void **)*(v12 - 4);
      if (v12 - 7 == v14)
      {
        v14 = v12 - 7;
        v15 = 4;
      }
      else
      {
        if (!v14)
          goto LABEL_6;
        v15 = 5;
      }
      (*((void (**)(void))*v14 + v15))();
LABEL_6:
      v12 -= 8;
      if (v12 == v10)
      {
        v13 = __p[1];
        goto LABEL_13;
      }
    }
  }
LABEL_14:
  v16 = (void **)v125[0];
  if (!v125[0])
    goto LABEL_27;
  v17 = (void **)v125[1];
  v18 = v125[0];
  if (v125[1] != v125[0])
  {
    while (1)
    {
      if (*((char *)v17 - 1) < 0)
        operator delete(*(v17 - 3));
      v19 = (void **)*(v17 - 4);
      if (v17 - 7 == v19)
      {
        v19 = v17 - 7;
        v20 = 4;
      }
      else
      {
        if (!v19)
          goto LABEL_19;
        v20 = 5;
      }
      (*((void (**)(void))*v19 + v20))();
LABEL_19:
      v17 -= 8;
      if (v17 == v16)
      {
        v18 = v125[0];
        break;
      }
    }
  }
  v125[1] = v16;
  operator delete(v18);
LABEL_27:
  ecs2::ModuleBucketExecutionDescriptor::~ModuleBucketExecutionDescriptor((ecs2::ModuleBucketExecutionDescriptor *)&v119);
  v21 = (void **)v116[1];
  if (!v116[1])
    goto LABEL_40;
  v22 = (void **)v117;
  v23 = v116[1];
  if ((void *)v117 != v116[1])
  {
    while (1)
    {
      if (*((char *)v22 - 1) < 0)
        operator delete(*(v22 - 3));
      v24 = (void **)*(v22 - 4);
      if (v22 - 7 == v24)
      {
        v24 = v22 - 7;
        v25 = 4;
      }
      else
      {
        if (!v24)
          goto LABEL_32;
        v25 = 5;
      }
      (*((void (**)(void))*v24 + v25))();
LABEL_32:
      v22 -= 8;
      if (v22 == v21)
      {
        v23 = v116[1];
        break;
      }
    }
  }
  *(_QWORD *)&v117 = v21;
  operator delete(v23);
LABEL_40:
  v26 = (void **)v115[0];
  if (!v115[0])
    goto LABEL_53;
  v27 = (void **)v115[1];
  v28 = v115[0];
  if (v115[1] != v115[0])
  {
    while (1)
    {
      if (*((char *)v27 - 1) < 0)
        operator delete(*(v27 - 3));
      v29 = (void **)*(v27 - 4);
      if (v27 - 7 == v29)
      {
        v29 = v27 - 7;
        v30 = 4;
      }
      else
      {
        if (!v29)
          goto LABEL_45;
        v30 = 5;
      }
      (*((void (**)(void))*v29 + v30))();
LABEL_45:
      v27 -= 8;
      if (v27 == v26)
      {
        v28 = v115[0];
        break;
      }
    }
  }
  v115[1] = v26;
  operator delete(v28);
LABEL_53:
  ecs2::ModuleBucketExecutionDescriptor::~ModuleBucketExecutionDescriptor((ecs2::ModuleBucketExecutionDescriptor *)&v109);
  v31 = (void **)v106[1];
  if (!v106[1])
    goto LABEL_66;
  v32 = (void **)v107;
  v33 = v106[1];
  if ((void *)v107 != v106[1])
  {
    while (1)
    {
      if (*((char *)v32 - 1) < 0)
        operator delete(*(v32 - 3));
      v34 = (void **)*(v32 - 4);
      if (v32 - 7 == v34)
      {
        v34 = v32 - 7;
        v35 = 4;
      }
      else
      {
        if (!v34)
          goto LABEL_58;
        v35 = 5;
      }
      (*((void (**)(void))*v34 + v35))();
LABEL_58:
      v32 -= 8;
      if (v32 == v31)
      {
        v33 = v106[1];
        break;
      }
    }
  }
  *(_QWORD *)&v107 = v31;
  operator delete(v33);
LABEL_66:
  v36 = (void **)v105[0];
  if (!v105[0])
    goto LABEL_79;
  v37 = (void **)v105[1];
  v38 = v105[0];
  if (v105[1] != v105[0])
  {
    while (1)
    {
      if (*((char *)v37 - 1) < 0)
        operator delete(*(v37 - 3));
      v39 = (void **)*(v37 - 4);
      if (v37 - 7 == v39)
      {
        v39 = v37 - 7;
        v40 = 4;
      }
      else
      {
        if (!v39)
          goto LABEL_71;
        v40 = 5;
      }
      (*((void (**)(void))*v39 + v40))();
LABEL_71:
      v37 -= 8;
      if (v37 == v36)
      {
        v38 = v105[0];
        break;
      }
    }
  }
  v105[1] = v36;
  operator delete(v38);
LABEL_79:
  ecs2::ModuleBucketExecutionDescriptor::~ModuleBucketExecutionDescriptor((ecs2::ModuleBucketExecutionDescriptor *)&v99);
  if (SHIBYTE(v70) < 0)
    operator delete(v69);
  v42 = v83;
  v41 = v81;
  if (v68 == v67)
  {
    v43 = 4;
  }
  else
  {
    if (!v68)
      goto LABEL_86;
    v43 = 5;
    v8 = v68;
  }
  (*(void (**)(_QWORD *))(*v8 + 8 * v43))(v8);
LABEL_86:
  if (v66 == v65)
  {
    v45 = 4;
    v44 = v90;
  }
  else
  {
    v44 = v90;
    if (!v66)
      goto LABEL_91;
    v45 = 5;
    v7 = v66;
  }
  (*(void (**)(_QWORD *))(*v7 + 8 * v45))(v7);
LABEL_91:
  v46 = v63;
  if (v64 == v63)
  {
    v47 = 4;
  }
  else
  {
    if (!v64)
      goto LABEL_96;
    v47 = 5;
    v46 = v64;
  }
  (*(void (**)(void))(*v46 + 8 * v47))();
LABEL_96:
  if (SHIBYTE(v79) < 0)
    operator delete(v78);
  v48 = v76;
  if (v77 == v76)
  {
    v49 = 4;
  }
  else
  {
    if (!v77)
      goto LABEL_103;
    v49 = 5;
    v48 = v77;
  }
  (*(void (**)(void))(*v48 + 8 * v49))();
LABEL_103:
  v50 = v74;
  if (v75 == v74)
  {
    v51 = 4;
  }
  else
  {
    if (!v75)
      goto LABEL_108;
    v51 = 5;
    v50 = v75;
  }
  (*(void (**)(void))(*v50 + 8 * v51))();
LABEL_108:
  v52 = v72;
  if (v73 == v72)
  {
    v53 = 4;
  }
  else
  {
    if (!v73)
      goto LABEL_113;
    v53 = 5;
    v52 = v73;
  }
  (*(void (**)(void))(*v52 + 8 * v53))();
LABEL_113:
  if (SHIBYTE(v97) < 0)
    operator delete(v96);
  v54 = v94;
  if (v95 == v94)
  {
    v55 = 4;
  }
  else
  {
    if (!v95)
      goto LABEL_120;
    v55 = 5;
    v54 = v95;
  }
  (*(void (**)(void))(*v54 + 8 * v55))();
LABEL_120:
  v56 = v92;
  if (v93 == v92)
  {
    v57 = 4;
  }
  else
  {
    if (!v93)
      goto LABEL_125;
    v57 = 5;
    v56 = v93;
  }
  (*(void (**)(void))(*v56 + 8 * v57))();
LABEL_125:
  if (v91 == v90)
  {
    v58 = 4;
  }
  else
  {
    if (!v91)
      goto LABEL_130;
    v58 = 5;
    v44 = v91;
  }
  (*(void (**)(_QWORD *))(*v44 + 8 * v58))(v44);
LABEL_130:
  if (SHIBYTE(v88) < 0)
    operator delete(v87);
  if (v86 == v85)
  {
    v59 = 4;
  }
  else
  {
    if (!v86)
      goto LABEL_137;
    v59 = 5;
    v11 = v86;
  }
  (*(void (**)(_QWORD *))(*v11 + 8 * v59))(v11);
LABEL_137:
  if (v84 == v83)
  {
    v60 = 4;
  }
  else
  {
    if (!v84)
      goto LABEL_142;
    v60 = 5;
    v42 = v84;
  }
  (*(void (**)(_QWORD *))(*v42 + 8 * v60))(v42);
LABEL_142:
  if (v82 == v81)
  {
    v61 = 4;
  }
  else
  {
    if (!v82)
      return;
    v61 = 5;
    v41 = v82;
  }
  (*(void (**)(_QWORD *))(*v41 + 8 * v61))(v41);
}

void sub_19FABEDD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ecs2::ModuleBucketExecutionDescriptor *a10, _QWORD *a11, _QWORD *a12, _QWORD *a13, _QWORD *a14, _QWORD *a15, _QWORD *a16, _QWORD *a17, _QWORD *a18, _QWORD *a19, _QWORD *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,void *a53,uint64_t a54,int a55,__int16 a56,char a57,char a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  uint64_t a67;
  uint64_t a71;
  void *a72;
  char a73;
  ecs2::ModuleBucketExecutionDescriptor *v73;
  _QWORD *v74;
  _QWORD *v75;
  ecs2::ModuleBucketExecutionDescriptor *v76;
  unint64_t v78;
  unint64_t v79;
  void *v80;
  _QWORD *v81;
  uint64_t v82;
  unint64_t v83;
  unint64_t v84;
  void *v85;
  _QWORD *v86;
  uint64_t v87;
  unint64_t v88;
  unint64_t v89;
  void *v90;
  _QWORD *v91;
  uint64_t v92;
  unint64_t v93;
  unint64_t v94;
  void *v95;
  _QWORD *v96;
  uint64_t v97;
  unint64_t v98;
  unint64_t v99;
  void *v100;
  _QWORD *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;

  v78 = STACK[0x3B0];
  if (!STACK[0x3B0])
    goto LABEL_14;
  v79 = STACK[0x3B8];
  v80 = (void *)STACK[0x3B0];
  if (STACK[0x3B8] == v78)
  {
LABEL_13:
    STACK[0x3B8] = v78;
    operator delete(v80);
LABEL_14:
    ecs2::ModuleBucketExecutionDescriptor::~ModuleBucketExecutionDescriptor(v76);
    v83 = STACK[0x348];
    if (!STACK[0x348])
    {
LABEL_27:
      v88 = STACK[0x330];
      if (!STACK[0x330])
      {
LABEL_40:
        ecs2::ModuleBucketExecutionDescriptor::~ModuleBucketExecutionDescriptor(a10);
        v93 = STACK[0x2C8];
        if (!STACK[0x2C8])
        {
LABEL_53:
          v98 = STACK[0x2B0];
          if (!STACK[0x2B0])
            goto LABEL_66;
          v99 = STACK[0x2B8];
          v100 = (void *)STACK[0x2B0];
          if (STACK[0x2B8] == v98)
          {
LABEL_65:
            STACK[0x2B8] = v98;
            operator delete(v100);
LABEL_66:
            ecs2::ModuleBucketExecutionDescriptor::~ModuleBucketExecutionDescriptor(v73);
            if (a39 < 0)
              operator delete(a34);
            if ((_QWORD *)a33 == v75)
            {
              v103 = 4;
            }
            else
            {
              if (!a33)
                goto LABEL_73;
              v103 = 5;
              v75 = (_QWORD *)a33;
            }
            (*(void (**)(_QWORD *))(*v75 + 8 * v103))(v75);
LABEL_73:
            if ((_QWORD *)a29 == v74)
            {
              v104 = 4;
            }
            else
            {
              if (!a29)
                goto LABEL_78;
              v104 = 5;
              v74 = (_QWORD *)a29;
            }
            (*(void (**)(_QWORD *))(*v74 + 8 * v104))(v74);
LABEL_78:
            if ((_QWORD *)a25 == a11)
            {
              v105 = 4;
            }
            else
            {
              if (!a25)
                goto LABEL_83;
              v105 = 5;
              a11 = (_QWORD *)a25;
            }
            (*(void (**)(void))(*a11 + 8 * v105))();
LABEL_83:
            if (a58 < 0)
              operator delete(a53);
            if ((_QWORD *)a52 == a12)
            {
              v106 = 4;
            }
            else
            {
              if (!a52)
                goto LABEL_90;
              v106 = 5;
              a12 = (_QWORD *)a52;
            }
            (*(void (**)(void))(*a12 + 8 * v106))();
LABEL_90:
            if ((_QWORD *)a48 == a13)
            {
              v107 = 4;
            }
            else
            {
              if (!a48)
                goto LABEL_95;
              v107 = 5;
              a13 = (_QWORD *)a48;
            }
            (*(void (**)(void))(*a13 + 8 * v107))();
LABEL_95:
            if ((_QWORD *)a44 == a14)
            {
              v108 = 4;
            }
            else
            {
              if (!a44)
                goto LABEL_100;
              v108 = 5;
              a14 = (_QWORD *)a44;
            }
            (*(void (**)(void))(*a14 + 8 * v108))();
LABEL_100:
            if (SLOBYTE(STACK[0x25F]) < 0)
              operator delete((void *)STACK[0x248]);
            if ((_QWORD *)STACK[0x240] == a15)
            {
              v109 = 4;
            }
            else
            {
              if (!STACK[0x240])
                goto LABEL_107;
              v109 = 5;
              a15 = (_QWORD *)STACK[0x240];
            }
            (*(void (**)(void))(*a15 + 8 * v109))();
LABEL_107:
            if ((_QWORD *)STACK[0x220] == a16)
            {
              v110 = 4;
            }
            else
            {
              if (!STACK[0x220])
                goto LABEL_112;
              v110 = 5;
              a16 = (_QWORD *)STACK[0x220];
            }
            (*(void (**)(void))(*a16 + 8 * v110))();
LABEL_112:
            if ((_QWORD *)STACK[0x200] == a17)
            {
              v111 = 4;
            }
            else
            {
              if (!STACK[0x200])
                goto LABEL_117;
              v111 = 5;
              a17 = (_QWORD *)STACK[0x200];
            }
            (*(void (**)(void))(*a17 + 8 * v111))();
LABEL_117:
            if (a73 < 0)
              operator delete(a72);
            if ((_QWORD *)a71 == a18)
            {
              v112 = 4;
            }
            else
            {
              if (!a71)
                goto LABEL_124;
              v112 = 5;
              a18 = (_QWORD *)a71;
            }
            (*(void (**)(void))(*a18 + 8 * v112))();
LABEL_124:
            if ((_QWORD *)a67 == a19)
            {
              v113 = 4;
            }
            else
            {
              if (!a67)
                goto LABEL_129;
              v113 = 5;
              a19 = (_QWORD *)a67;
            }
            (*(void (**)(void))(*a19 + 8 * v113))();
LABEL_129:
            if ((_QWORD *)a63 == a20)
            {
              v114 = 4;
            }
            else
            {
              if (!a63)
                goto LABEL_134;
              v114 = 5;
              a20 = (_QWORD *)a63;
            }
            (*(void (**)(void))(*a20 + 8 * v114))();
LABEL_134:
            _Unwind_Resume(a1);
          }
          while (1)
          {
            if (*(char *)(v99 - 1) < 0)
              operator delete(*(void **)(v99 - 24));
            v101 = *(_QWORD **)(v99 - 32);
            if ((_QWORD *)(v99 - 56) == v101)
            {
              v101 = (_QWORD *)(v99 - 56);
              v102 = 4;
            }
            else
            {
              if (!v101)
                goto LABEL_58;
              v102 = 5;
            }
            (*(void (**)(void))(*v101 + 8 * v102))();
LABEL_58:
            v99 -= 64;
            if (v99 == v98)
            {
              v100 = (void *)STACK[0x2B0];
              goto LABEL_65;
            }
          }
        }
        v94 = STACK[0x2D0];
        v95 = (void *)STACK[0x2C8];
        if (STACK[0x2D0] == v93)
        {
LABEL_52:
          STACK[0x2D0] = v93;
          operator delete(v95);
          goto LABEL_53;
        }
        while (1)
        {
          if (*(char *)(v94 - 1) < 0)
            operator delete(*(void **)(v94 - 24));
          v96 = *(_QWORD **)(v94 - 32);
          if ((_QWORD *)(v94 - 56) == v96)
          {
            v96 = (_QWORD *)(v94 - 56);
            v97 = 4;
          }
          else
          {
            if (!v96)
              goto LABEL_45;
            v97 = 5;
          }
          (*(void (**)(void))(*v96 + 8 * v97))();
LABEL_45:
          v94 -= 64;
          if (v94 == v93)
          {
            v95 = (void *)STACK[0x2C8];
            goto LABEL_52;
          }
        }
      }
      v89 = STACK[0x338];
      v90 = (void *)STACK[0x330];
      if (STACK[0x338] == v88)
      {
LABEL_39:
        STACK[0x338] = v88;
        operator delete(v90);
        goto LABEL_40;
      }
      while (1)
      {
        if (*(char *)(v89 - 1) < 0)
          operator delete(*(void **)(v89 - 24));
        v91 = *(_QWORD **)(v89 - 32);
        if ((_QWORD *)(v89 - 56) == v91)
        {
          v91 = (_QWORD *)(v89 - 56);
          v92 = 4;
        }
        else
        {
          if (!v91)
            goto LABEL_32;
          v92 = 5;
        }
        (*(void (**)(void))(*v91 + 8 * v92))();
LABEL_32:
        v89 -= 64;
        if (v89 == v88)
        {
          v90 = (void *)STACK[0x330];
          goto LABEL_39;
        }
      }
    }
    v84 = STACK[0x350];
    v85 = (void *)STACK[0x348];
    if (STACK[0x350] == v83)
    {
LABEL_26:
      STACK[0x350] = v83;
      operator delete(v85);
      goto LABEL_27;
    }
    while (1)
    {
      if (*(char *)(v84 - 1) < 0)
        operator delete(*(void **)(v84 - 24));
      v86 = *(_QWORD **)(v84 - 32);
      if ((_QWORD *)(v84 - 56) == v86)
      {
        v86 = (_QWORD *)(v84 - 56);
        v87 = 4;
      }
      else
      {
        if (!v86)
          goto LABEL_19;
        v87 = 5;
      }
      (*(void (**)(void))(*v86 + 8 * v87))();
LABEL_19:
      v84 -= 64;
      if (v84 == v83)
      {
        v85 = (void *)STACK[0x348];
        goto LABEL_26;
      }
    }
  }
  while (1)
  {
    if (*(char *)(v79 - 1) < 0)
      operator delete(*(void **)(v79 - 24));
    v81 = *(_QWORD **)(v79 - 32);
    if ((_QWORD *)(v79 - 56) == v81)
    {
      v81 = (_QWORD *)(v79 - 56);
      v82 = 4;
    }
    else
    {
      if (!v81)
        goto LABEL_6;
      v82 = 5;
    }
    (*(void (**)(void))(*v81 + 8 * v82))();
LABEL_6:
    v79 -= 64;
    if (v79 == v78)
    {
      v80 = (void *)STACK[0x3B0];
      goto LABEL_13;
    }
  }
}

void std::__function::__func<md::EncodeModule,std::allocator<md::EncodeModule>,ecs2::ModuleDescriptor ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::EncodeModule,std::allocator<md::EncodeModule>,ecs2::ModuleDescriptor ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E4275AF0;
  return result;
}

void std::__function::__func<md::EncodeModule,std::allocator<md::EncodeModule>,ecs2::ModuleDescriptor ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E4275AF0;
}

_QWORD *std::__function::__func<md::EncodeModule,std::allocator<md::EncodeModule>,ecs2::ModuleDescriptor ()(void)>::operator()@<X0>(uint64_t a1@<X8>)
{
  __int16 v2;
  char *v3;
  char *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *result;
  uint64_t v12;
  _QWORD v13[3];
  _QWORD *v14;
  _QWORD v15[3];
  _QWORD *v16;
  _QWORD v17[3];
  _QWORD *v18;
  void *__p;
  __int128 v20;
  __int16 v21;
  _QWORD v22[3];
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v2 = gdc::FamilyInfo<ecs2::ModuleDescriptor,unsigned short>::Counter::nextId(void)::counter++;
  *(_WORD *)a1 = v2;
  *(_BYTE *)(a1 + 31) = 12;
  strcpy((char *)(a1 + 8), "EncodeModule");
  v21 = 29;
  v3 = (char *)operator new(0x20uLL);
  strcpy(v3, "md::erq::EncodeRenderQueue");
  v13[0] = &off_1E4275E98;
  v13[1] = 0;
  v14 = v13;
  v15[0] = &off_1E4282C30;
  v16 = v15;
  v17[0] = &off_1E4282BE8;
  v18 = v17;
  __p = v3;
  v20 = xmmword_19FFB3620;
  v4 = (char *)operator new(0x80uLL);
  v22[0] = v4;
  v22[2] = v4 + 128;
  *(_WORD *)v4 = -5093;
  *((_QWORD *)v4 + 4) = v4 + 8;
  std::__function::__func<ecs2::ForwardToExecute<md::erq::EncodeRenderQueue>,std::allocator<ecs2::ForwardToExecute<md::erq::EncodeRenderQueue>>,void ()(ecs2::Runtime &)>::__clone((uint64_t)v13, (_QWORD *)v4 + 1);
  *((_QWORD *)v4 + 8) = v4 + 40;
  std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::erq::EncodeRenderQueue>(md::erq::EncodeRenderQueue &&)::{lambda(void)#1},std::allocator<md::erq::EncodeRenderQueue &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::erq::EncodeRenderQueue>(md::erq::EncodeRenderQueue &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone((uint64_t)v15, (_QWORD *)v4 + 5);
  *((_QWORD *)v4 + 12) = v4 + 72;
  std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::erq::EncodeRenderQueue>(md::erq::EncodeRenderQueue &&)::{lambda(void)#2},std::allocator<md::erq::EncodeRenderQueue &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::erq::EncodeRenderQueue>(md::erq::EncodeRenderQueue &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone((uint64_t)v17, (_QWORD *)v4 + 9);
  std::string::__init_copy_ctor_external((std::string *)(v4 + 104), v3, 0x1AuLL);
  v22[1] = v4 + 128;
  v23 = 0u;
  v24 = 0u;
  v25 = 0u;
  v26 = 0u;
  v27 = 0u;
  v28 = 0u;
  v5 = operator new(0x80uLL);
  *(_QWORD *)(a1 + 32) = v5;
  v6 = v5 + 16;
  *(_QWORD *)(a1 + 48) = v5 + 16;
  *(_WORD *)v5 = 29;
  ecs2::ModuleBucketExecutionDescriptor::ModuleBucketExecutionDescriptor((ecs2::ModuleBucketExecutionDescriptor *)(v5 + 1), (const ecs2::ModuleBucketExecutionDescriptor *)v22);
  v5[11] = 0;
  v5[12] = 0;
  v5[10] = 0;
  std::vector<ecs2::UtlityTaskDescriptor>::__init_with_size[abi:nn180100]<ecs2::UtlityTaskDescriptor*,ecs2::UtlityTaskDescriptor*>(v5 + 10, 0, 0, 0);
  v5[13] = 0;
  v5[14] = 0;
  v5 += 13;
  v5[2] = 0;
  std::vector<ecs2::UtlityTaskDescriptor>::__init_with_size[abi:nn180100]<ecs2::UtlityTaskDescriptor*,ecs2::UtlityTaskDescriptor*>(v5, 0, 0, 0);
  *(_QWORD *)(a1 + 40) = v6;
  ecs2::ModuleBucketExecutionDescriptor::~ModuleBucketExecutionDescriptor((ecs2::ModuleBucketExecutionDescriptor *)v22);
  if (SHIBYTE(v20) < 0)
    operator delete(__p);
  v7 = v18;
  if (v18 == v17)
  {
    v8 = 4;
    v7 = v17;
  }
  else
  {
    if (!v18)
      goto LABEL_8;
    v8 = 5;
  }
  (*(void (**)(_QWORD *))(*v7 + 8 * v8))(v7);
LABEL_8:
  v9 = v16;
  if (v16 == v15)
  {
    v10 = 4;
    v9 = v15;
  }
  else
  {
    if (!v16)
      goto LABEL_13;
    v10 = 5;
  }
  (*(void (**)(_QWORD *))(*v9 + 8 * v10))(v9);
LABEL_13:
  result = v14;
  if (v14 == v13)
  {
    v12 = 4;
    result = v13;
  }
  else
  {
    if (!v14)
      return result;
    v12 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 8 * v12))(result);
}

uint64_t geo::_retain_ptr<_MapEngineRenderQueueSource * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>::~_retain_ptr(uint64_t a1)
{
  *(_QWORD *)a1 = &off_1E42B5230;

  return a1;
}

void geo::_retain_ptr<_MapEngineRenderQueueSource * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>::~_retain_ptr(uint64_t a1)
{
  *(_QWORD *)a1 = &off_1E42B5230;

  JUMPOUT(0x1A1AF4E00);
}

void std::__function::__func<md::MapEngine::~MapEngine()::$_0,std::allocator<md::MapEngine::~MapEngine()::$_0>,void ()(geo::_retain_ptr<VKOverlay * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc> const&,VKOverlayLevel)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::MapEngine::~MapEngine()::$_0,std::allocator<md::MapEngine::~MapEngine()::$_0>,void ()(geo::_retain_ptr<VKOverlay * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc> const&,VKOverlayLevel)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E42D5338;
  return result;
}

void std::__function::__func<md::MapEngine::~MapEngine()::$_0,std::allocator<md::MapEngine::~MapEngine()::$_0>,void ()(geo::_retain_ptr<VKOverlay * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc> const&,VKOverlayLevel)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E42D5338;
}

void std::__function::__func<md::MapEngine::~MapEngine()::$_0,std::allocator<md::MapEngine::~MapEngine()::$_0>,void ()(geo::_retain_ptr<VKOverlay * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc> const&,VKOverlayLevel)>::operator()(uint64_t a1, uint64_t a2)
{
  void *v3;

  objc_msgSend(*(id *)(a2 + 8), "customTileProvider");
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  if (v3)
    objc_msgSend(*(id *)(a2 + 8), "setRunLoopController:", 0);
}

void std::__function::__func<md::MapEngine::_produceRenderQueue(void)::$_0,std::allocator<md::MapEngine::_produceRenderQueue(void)::$_0>,void ()(unsigned long,double,ggl::RenderTransactionErrorStatus)>::destroy_deallocate(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;

  v2 = (std::__shared_weak_count *)__p[8];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = (std::__shared_weak_count *)__p[6];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  v4 = (std::__shared_weak_count *)__p[4];
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
  v5 = (std::__shared_weak_count *)__p[2];
  if (v5)
    std::__shared_weak_count::__release_weak(v5);
  operator delete(__p);
}

void std::__function::__func<md::MapEngine::_produceRenderQueue(void)::$_1,std::allocator<md::MapEngine::_produceRenderQueue(void)::$_1>,void ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::MapEngine::_produceRenderQueue(void)::$_1,std::allocator<md::MapEngine::_produceRenderQueue(void)::$_1>,void ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42D4C30;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<md::MapEngine::_produceRenderQueue(void)::$_1,std::allocator<md::MapEngine::_produceRenderQueue(void)::$_1>,void ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42D4C30;
  a2[1] = v2;
  return result;
}

void std::__function::__func<md::MapEngine::_produceRenderQueue(void)::$_1,std::allocator<md::MapEngine::_produceRenderQueue(void)::$_1>,void ()(void)>::operator()(uint64_t a1)
{
  uint64_t v1;
  NSObject *v2;
  NSObject *v3;
  os_signpost_id_t v4;
  uint8_t v5[16];

  v1 = *(_QWORD *)(a1 + 8);
  if (GEOGetVectorKitPerformanceLog_onceToken != -1)
    dispatch_once(&GEOGetVectorKitPerformanceLog_onceToken, &__block_literal_global_13_11780);
  v2 = (id)GEOGetVectorKitPerformanceLog_log;
  v3 = v2;
  v4 = *(_QWORD *)(v1 + 1216);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)v5 = 0;
    _os_signpost_emit_with_name_impl(&dword_19F029000, v3, OS_SIGNPOST_INTERVAL_END, v4, "RenderLayout", (const char *)&unk_1A0189141, v5, 2u);
  }

}

_QWORD *std::__function::__func<md::MapEngine::_produceRenderQueue(void)::$_0,std::allocator<md::MapEngine::_produceRenderQueue(void)::$_0>,void ()(unsigned long,double,ggl::RenderTransactionErrorStatus)>::~__func(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;

  *a1 = &off_1E42D4BE8;
  v2 = (std::__shared_weak_count *)a1[8];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  v4 = (std::__shared_weak_count *)a1[4];
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
  v5 = (std::__shared_weak_count *)a1[2];
  if (v5)
    std::__shared_weak_count::__release_weak(v5);
  return a1;
}

void std::__function::__func<md::MapEngine::_produceRenderQueue(void)::$_0,std::allocator<md::MapEngine::_produceRenderQueue(void)::$_0>,void ()(unsigned long,double,ggl::RenderTransactionErrorStatus)>::~__func(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;

  *a1 = &off_1E42D4BE8;
  v2 = (std::__shared_weak_count *)a1[8];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  v4 = (std::__shared_weak_count *)a1[4];
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
  v5 = (std::__shared_weak_count *)a1[2];
  if (v5)
    std::__shared_weak_count::__release_weak(v5);
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::MapEngine::_produceRenderQueue(void)::$_0,std::allocator<md::MapEngine::_produceRenderQueue(void)::$_0>,void ()(unsigned long,double,ggl::RenderTransactionErrorStatus)>::__clone(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;

  result = operator new(0x50uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_1E42D4BE8;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = a1[4];
  result[3] = a1[3];
  result[4] = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 16);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  v10 = a1[6];
  result[5] = a1[5];
  result[6] = v10;
  if (v10)
  {
    v11 = (unint64_t *)(v10 + 16);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  v13 = a1[8];
  result[7] = a1[7];
  result[8] = v13;
  if (v13)
  {
    v14 = (unint64_t *)(v13 + 16);
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }
  result[9] = a1[9];
  return result;
}

_QWORD *std::__function::__func<md::MapEngine::_produceRenderQueue(void)::$_0,std::allocator<md::MapEngine::_produceRenderQueue(void)::$_0>,void ()(unsigned long,double,ggl::RenderTransactionErrorStatus)>::__clone(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_1E42D4BE8;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = result[4];
  a2[3] = result[3];
  a2[4] = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 16);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v9 = result[6];
  a2[5] = result[5];
  a2[6] = v9;
  if (v9)
  {
    v10 = (unint64_t *)(v9 + 16);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  v12 = result[8];
  a2[7] = result[7];
  a2[8] = v12;
  if (v12)
  {
    v13 = (unint64_t *)(v12 + 16);
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }
  a2[9] = result[9];
  return result;
}

void std::__function::__func<md::MapEngine::_produceRenderQueue(void)::$_0,std::allocator<md::MapEngine::_produceRenderQueue(void)::$_0>,void ()(unsigned long,double,ggl::RenderTransactionErrorStatus)>::destroy(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;

  v2 = (std::__shared_weak_count *)a1[8];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  v4 = (std::__shared_weak_count *)a1[4];
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
  v5 = (std::__shared_weak_count *)a1[2];
  if (v5)
    std::__shared_weak_count::__release_weak(v5);
}

void std::__function::__func<md::MapEngine::_produceRenderQueue(void)::$_0,std::allocator<md::MapEngine::_produceRenderQueue(void)::$_0>,void ()(unsigned long,double,ggl::RenderTransactionErrorStatus)>::operator()(uint64_t a1, unint64_t *a2, double *a3, int *a4)
{
  unint64_t v5;
  double v6;
  int v7;
  void *v8;
  void *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  std::__shared_weak_count *v16;
  std::__shared_weak_count *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  std::__shared_weak_count *v22;
  std::__shared_weak_count *v23;
  unsigned __int8 *v24;
  unsigned __int8 v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  unsigned __int8 v31;
  unint64_t *v32;
  unint64_t v33;
  unint64_t *v34;
  unint64_t *v35;
  unint64_t v36;
  unint64_t *p_shared_owners;
  unint64_t v38;
  unint64_t *v39;
  unint64_t v40;
  unint64_t *v41;
  unint64_t v42;
  _QWORD v43[5];
  std::__shared_weak_count *v44;
  _QWORD v45[5];
  std::__shared_weak_count *v46;
  unint64_t v47;

  v5 = *a2;
  v6 = *a3;
  v7 = *a4;
  +[VKSharedResourcesManager sharedResourcesCreateIfNil:addResourceUser:](VKSharedResourcesManager, "sharedResourcesCreateIfNil:addResourceUser:", 0, 0);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = v8;
  if (v8)
    objc_msgSend(v8, "frameDidComplete:", *(_QWORD *)(a1 + 72));
  v10 = *(std::__shared_weak_count **)(a1 + 32);
  if (!v10)
  {
    v11 = 0;
    v13 = *(std::__shared_weak_count **)(a1 + 48);
    if (v13)
      goto LABEL_8;
LABEL_21:
    v14 = 0;
    v16 = *(std::__shared_weak_count **)(a1 + 64);
    if (v16)
      goto LABEL_12;
LABEL_22:
    v17 = 0;
    v21 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v21)
      goto LABEL_45;
    goto LABEL_23;
  }
  v11 = std::__shared_weak_count::lock(v10);
  if (v11)
  {
    v12 = *(_QWORD *)(a1 + 24);
    if (v12)
      gdc::Statistics::addSampleValue(v12, "GPU Frame-time", 0x4A6892FD0000000EuLL, v6 * 1000.0);
  }
  v13 = *(std::__shared_weak_count **)(a1 + 48);
  if (!v13)
    goto LABEL_21;
LABEL_8:
  v14 = std::__shared_weak_count::lock(v13);
  if (v14)
  {
    v15 = *(unint64_t **)(a1 + 40);
    if (v15)
      atomic_store(v5, v15);
  }
  v16 = *(std::__shared_weak_count **)(a1 + 64);
  if (!v16)
    goto LABEL_22;
LABEL_12:
  v17 = std::__shared_weak_count::lock(v16);
  if (!v17 || (v18 = *(_QWORD *)(a1 + 56)) == 0)
  {
LABEL_18:
    v21 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v21)
    {
LABEL_45:
      if (v17)
      {
        p_shared_owners = (unint64_t *)&v17->__shared_owners_;
        do
          v38 = __ldaxr(p_shared_owners);
        while (__stlxr(v38 - 1, p_shared_owners));
        if (!v38)
        {
          ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
          std::__shared_weak_count::__release_weak(v17);
        }
      }
      if (v14)
      {
        v39 = (unint64_t *)&v14->__shared_owners_;
        do
          v40 = __ldaxr(v39);
        while (__stlxr(v40 - 1, v39));
        if (!v40)
        {
          ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
          std::__shared_weak_count::__release_weak(v14);
        }
      }
      if (v11)
      {
        v41 = (unint64_t *)&v11->__shared_owners_;
        do
          v42 = __ldaxr(v41);
        while (__stlxr(v42 - 1, v41));
        if (!v42)
        {
          ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
          std::__shared_weak_count::__release_weak(v11);
        }
      }

      return;
    }
LABEL_23:
    v22 = std::__shared_weak_count::lock(v21);
    if (!v22)
      goto LABEL_45;
    v23 = v22;
    v24 = *(unsigned __int8 **)(a1 + 8);
    if (v24)
    {
      if (v7 != 1 || (v25 = atomic_load(v24), (v25 & 1) != 0))
      {
        v31 = atomic_load(v24);
        if ((v31 & 1) != 0)
        {
          atomic_store(0, v24);
          v43[0] = MEMORY[0x1E0C809B0];
          v43[1] = 3321888768;
          v43[2] = ___ZZN2md9MapEngine19_produceRenderQueueEvENK3__0clEmdN3ggl28RenderTransactionErrorStatusE_block_invoke_219;
          v43[3] = &__block_descriptor_48_ea8_32c56_ZTSNSt3__110shared_ptrIN2md9MapEngine13AnalyticsInfoEEE_e19___NSDictionary_8__0l;
          v43[4] = v24;
          v44 = v22;
          v32 = (unint64_t *)&v22->__shared_owners_;
          do
            v33 = __ldxr(v32);
          while (__stxr(v33 + 1, v32));
          vkAnalyticsSendEventLazy(v43);
          v28 = v44;
          if (v44)
          {
            v34 = (unint64_t *)&v44->__shared_owners_;
            do
              v30 = __ldaxr(v34);
            while (__stlxr(v30 - 1, v34));
LABEL_39:
            if (!v30)
            {
              ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
              std::__shared_weak_count::__release_weak(v28);
            }
          }
        }
      }
      else
      {
        atomic_store(1u, v24);
        v45[0] = MEMORY[0x1E0C809B0];
        v45[1] = 3321888768;
        v45[2] = ___ZZN2md9MapEngine19_produceRenderQueueEvENK3__0clEmdN3ggl28RenderTransactionErrorStatusE_block_invoke;
        v45[3] = &__block_descriptor_48_ea8_32c56_ZTSNSt3__110shared_ptrIN2md9MapEngine13AnalyticsInfoEEE_e19___NSDictionary_8__0l;
        v45[4] = v24;
        v46 = v22;
        v26 = (unint64_t *)&v22->__shared_owners_;
        do
          v27 = __ldxr(v26);
        while (__stxr(v27 + 1, v26));
        vkAnalyticsSendEventLazy(v45);
        v28 = v46;
        if (v46)
        {
          v29 = (unint64_t *)&v46->__shared_owners_;
          do
            v30 = __ldaxr(v29);
          while (__stlxr(v30 - 1, v29));
          goto LABEL_39;
        }
      }
    }
    v35 = (unint64_t *)&v23->__shared_owners_;
    do
      v36 = __ldaxr(v35);
    while (__stlxr(v36 - 1, v35));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
    goto LABEL_45;
  }
  std::mutex::lock(*(std::mutex **)(a1 + 56));
  v19 = *(_QWORD **)(v18 + 88);
  if (!v19)
  {
LABEL_17:
    std::mutex::unlock((std::mutex *)v18);
    goto LABEL_18;
  }
  while (1)
  {
    v47 = v5;
    v20 = v19[6];
    if (!v20)
      break;
    (*(void (**)(uint64_t, unint64_t *))(*(_QWORD *)v20 + 48))(v20, &v47);
    v19 = (_QWORD *)*v19;
    if (!v19)
      goto LABEL_17;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  __break(1u);
}

void sub_19FAC000C(_Unwind_Exception *a1)
{
  void *v1;
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count **v6;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;

  v8 = *v6;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  v11 = (unint64_t *)&v5->__shared_owners_;
  do
    v12 = __ldaxr(v11);
  while (__stlxr(v12 - 1, v11));
  if (!v12)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
  if (v4)
  {
    v13 = (unint64_t *)&v4->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  if (v3)
  {
    v15 = (unint64_t *)&v3->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  if (v2)
  {
    v17 = (unint64_t *)&v2->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }

  _Unwind_Resume(a1);
}

id ___ZZN2md9MapEngine19_produceRenderQueueEvENK3__0clEmdN3ggl28RenderTransactionErrorStatusE_block_invoke(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  void *v3;
  void *v4;
  _QWORD v6[3];
  _QWORD v7[4];

  v7[3] = *MEMORY[0x1E0C80C00];
  v7[0] = MEMORY[0x1E0C9AAB0];
  v6[0] = CFSTR("AccessRevoked");
  v6[1] = CFSTR("MapPurpose");
  v1 = a1 + 32;
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 8));
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v7[1] = v2;
  v6[2] = CFSTR("MapMode");
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", *(unsigned int *)(*(_QWORD *)v1 + 4));
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v7[2] = v3;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v7, v6, 3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  return v4;
}

void sub_19FAC0238(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  v3 = v2;

  _Unwind_Resume(a1);
}

id ___ZZN2md9MapEngine19_produceRenderQueueEvENK3__0clEmdN3ggl28RenderTransactionErrorStatusE_block_invoke_219(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  void *v3;
  void *v4;
  _QWORD v6[3];
  _QWORD v7[4];

  v7[3] = *MEMORY[0x1E0C80C00];
  v7[0] = MEMORY[0x1E0C9AAA0];
  v6[0] = CFSTR("AccessRevoked");
  v6[1] = CFSTR("MapPurpose");
  v1 = a1 + 32;
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 8));
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v7[1] = v2;
  v6[2] = CFSTR("MapMode");
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", *(unsigned int *)(*(_QWORD *)v1 + 4));
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v7[2] = v3;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v7, v6, 3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  return v4;
}

void sub_19FAC0350(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  v3 = v2;

  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_ea8_32c56_ZTSNSt3__110shared_ptrIN2md9MapEngine13AnalyticsInfoEEE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(result + 40) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void __destroy_helper_block_ea8_32c56_ZTSNSt3__110shared_ptrIN2md9MapEngine13AnalyticsInfoEEE(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

uint64_t md::MapEngine::renderSceneInContextSync(md::MapEngine *this, CGContext *a2, double a3)
{
  double v5;
  double v6;
  char v7;
  uint64_t result;
  double v9;
  unsigned __int8 v10;
  NSObject *v11;
  unsigned int v12;
  NSObject *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint8_t v17[16];
  CGContext *v18;
  _QWORD v19[3];
  _QWORD *v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v18 = a2;
  objc_msgSend(*((id *)this + 105), "size");
  v7 = *((_BYTE *)this + 1177);
  if (v7)
    v7 = *((_BYTE *)this + 1178) == 0;
  result = 0;
  if ((v7 & 1) == 0 && !*((_BYTE *)this + 1176))
  {
    v9 = v6 * v5;
    if ((objc_msgSend(*((id *)this + 105), "hasRenderTarget") & 1) != 0)
    {
      if (v9 <= 0.0)
        return 0;
LABEL_10:
      v10 = atomic_load((unsigned __int8 *)this + 1181);
      if ((v10 & 1) != 0)
        return 0;
      if (GEOGetVectorKitPerformanceLog_onceToken != -1)
        dispatch_once(&GEOGetVectorKitPerformanceLog_onceToken, &__block_literal_global_13_11780);
      v11 = (id)GEOGetVectorKitPerformanceLog_log;
      if (os_signpost_enabled(v11))
      {
        v12 = md::MapEngine::canRenderAsync(this);

        if (v12)
        {
          if (GEOGetVectorKitPerformanceLog_onceToken != -1)
            dispatch_once(&GEOGetVectorKitPerformanceLog_onceToken, &__block_literal_global_13_11780);
          v13 = (id)GEOGetVectorKitPerformanceLog_log;
          if (os_signpost_enabled(v13))
          {
            *(_WORD *)v17 = 0;
            _os_signpost_emit_with_name_impl(&dword_19F029000, v13, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "ForceSyncRender", (const char *)&unk_1A0189141, v17, 2u);
          }

        }
      }
      else
      {

      }
      md::HomeQueueScheduler::waitForSynchronization(*((md::HomeQueueScheduler **)this + 567), "BOOL md::MapEngine::renderSceneInContextSync(CGContext *, double)");
      atomic_store(1u, (unsigned __int8 *)this + 1181);
      md::MapEngine::runUpdatePhase(this, a3, 0);
      v14 = *(_QWORD *)(*((_QWORD *)this + 1) + 16);
      v19[0] = &off_1E42D4CC0;
      v19[1] = this;
      v19[2] = &v18;
      v20 = v19;
      geo::TaskQueue::barrierSync(v14, v19);
      v15 = v20;
      if (v20 == v19)
      {
        v16 = 4;
        v15 = v19;
      }
      else
      {
        if (!v20)
        {
LABEL_27:
          atomic_store(0, (unsigned __int8 *)this + 1181);
          return 1;
        }
        v16 = 5;
      }
      (*(void (**)(void))(*v15 + 8 * v16))();
      goto LABEL_27;
    }
    result = 0;
    if (*((_QWORD *)this + 150) == 1 && v9 > 0.0)
      goto LABEL_10;
  }
  return result;
}

void sub_19FAC0638(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19FAC0648(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char *a15)
{
  char *v15;
  char *v17;
  uint64_t v18;

  v17 = a15;
  if (a15 == v15)
  {
    v18 = 4;
    v17 = &a12;
  }
  else
  {
    if (!a15)
      _Unwind_Resume(exception_object);
    v18 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v17 + 8 * v18))();
  _Unwind_Resume(exception_object);
}

void std::__function::__func<md::MapEngine::renderSceneInContextSync(CGContext *,double)::$_0,std::allocator<md::MapEngine::renderSceneInContextSync(CGContext *,double)::$_0>,void ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

__n128 std::__function::__func<md::MapEngine::renderSceneInContextSync(CGContext *,double)::$_0,std::allocator<md::MapEngine::renderSceneInContextSync(CGContext *,double)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E42D4CC0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<md::MapEngine::renderSceneInContextSync(CGContext *,double)::$_0,std::allocator<md::MapEngine::renderSceneInContextSync(CGContext *,double)::$_0>,void ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E42D4CC0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<md::MapEngine::renderSceneInContextSync(CGContext *,double)::$_0,std::allocator<md::MapEngine::renderSceneInContextSync(CGContext *,double)::$_0>,void ()(void)>::operator()(uint64_t a1)
{
  return objc_msgSend(*(id *)(*(_QWORD *)(a1 + 8) + 824), "drawInContext:registry:", **(_QWORD **)(a1 + 16), *(_QWORD *)(a1 + 8) + 136);
}

_QWORD *md::MapEngine::prune(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *result;
  uint64_t v11;
  _QWORD v12[3];
  _QWORD *v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  objc_msgSend(*(id *)(a1 + 824), "didReceiveMemoryWarning");
  v4 = *(_QWORD *)(a1 + 856);
  if (v4)
  {
    if (*(_QWORD *)(a1 + 872) == v4)
      v5 = a2;
    else
      v5 = 2;
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v4 + 32))(v4, v5);
  }
  v6 = *(_QWORD *)(a1 + 864);
  if (v6)
  {
    if (*(_QWORD *)(a1 + 872) == v6)
      v7 = a2;
    else
      v7 = 2;
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 32))(v6, v7);
  }
  v8 = objc_msgSend(*(id *)(a1 + 840), "renderer");
  (*(void (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8);
  v9 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  v12[0] = &off_1E42D4D08;
  v12[1] = a1;
  v12[2] = a2;
  v13 = v12;
  geo::TaskQueue::barrierSync(v9, v12);
  result = v13;
  if (v13 == v12)
  {
    v11 = 4;
    result = v12;
  }
  else
  {
    if (!v13)
      return result;
    v11 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v11))();
}

void sub_19FAC081C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void std::__function::__func<md::MapEngine::prune(md::PruneLevel)::$_0,std::allocator<md::MapEngine::prune(md::PruneLevel)::$_0>,void ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

__n128 std::__function::__func<md::MapEngine::prune(md::PruneLevel)::$_0,std::allocator<md::MapEngine::prune(md::PruneLevel)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E42D4D08;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<md::MapEngine::prune(md::PruneLevel)::$_0,std::allocator<md::MapEngine::prune(md::PruneLevel)::$_0>,void ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E42D4D08;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<md::MapEngine::prune(md::PruneLevel)::$_0,std::allocator<md::MapEngine::prune(md::PruneLevel)::$_0>,void ()(void)>::operator()(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  gdc::LayerDataStore **v4;
  unsigned __int16 *i;
  double v6;
  unsigned int v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t (***v15)();
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t (**v19)();
  char v20;
  uint64_t (***v21)();
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(v2 + 896);
  v4 = *(gdc::LayerDataStore ***)(v3 + 80);
  for (i = *(unsigned __int16 **)(v3 + 88); v4 != (gdc::LayerDataStore **)i; v4 += 2)
  {
    v7 = *(unsigned __int16 *)v4 - 11;
    v8 = v7 > 0x3D;
    v9 = (1 << v7) & 0x3000000000000003;
    if (v8 || v9 == 0)
      v6 = 31457280.0;
    else
      v6 = 41943040.0;
    gdc::LayerDataStore::purge(v4[1], 0, (unint64_t)(v6 * *(double *)(v3 + 384)));
  }
  gdc::ResourceManager::cleanupResources(*(gdc::ResourceManager **)(*(_QWORD *)(v3 + 24) + 56));
  v13 = *(_QWORD *)(v2 + 1120);
  v14 = *(_BYTE *)(a1 + 16);
  v19 = &off_1E42CA958;
  v20 = v14;
  v15 = &v19;
  v21 = &v19;
  v16 = *(_QWORD **)(v13 + 24);
  if (v16)
  {
    v18 = v16[5];
    v15 = &v19;
    while (1)
    {
      ((void (*)(uint64_t (***)(), uint64_t *))(*v15)[6])(v15, &v18);
      v16 = (_QWORD *)*v16;
      v15 = v21;
      if (!v16)
        break;
      v18 = v16[5];
      if (!v21)
      {
        std::__throw_bad_function_call[abi:nn180100]();
        __break(1u);
        break;
      }
    }
    if (v15 == &v19)
    {
      v17 = 4;
      v15 = &v19;
    }
    else
    {
      if (!v15)
        return;
      v17 = 5;
    }
  }
  else
  {
    v17 = 4;
  }
  ((void (*)(uint64_t (***)(), uint64_t, uint64_t))(*v15)[v17])(v15, v11, v12);
}

void sub_19FAC0A44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v14;
  uint64_t v15;

  v14 = a13;
  if (a13 == &a10)
  {
    v15 = 4;
    v14 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v15 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v14 + 8 * v15))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

char *md::MapEngine::createDebugNode(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned __int8 v8;
  unsigned __int8 v9;
  char *ChildNode;
  void *v11;
  unsigned int v12;
  void *v13;
  uint64_t v14;
  void *v15;
  unsigned int v16;
  void *v17;
  unsigned int v18;
  uint64_t v19;
  char *v20;
  void *v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  char *v25;
  void *v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  _BOOL8 v33;
  char *i;
  uint64_t v35;
  const char *v36;
  size_t v37;
  size_t v38;
  _BYTE *v39;
  uint64_t v40;
  uint64_t v41;
  unsigned __int8 **v42;
  unsigned __int8 *v43;
  unsigned __int8 *v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  char *v48;
  unint64_t v49;
  const std::string::value_type *v50;
  int v51;
  const char *v52;
  const std::string::value_type *v53;
  uint64_t v54;
  uint64_t v55;
  void *v56;
  uint64_t v57;
  unint64_t v58;
  const std::string::value_type *v59;
  size_t v60;
  uint64_t v61;
  uint64_t *v62;
  const char *v63;
  unint64_t v64;
  const char *v65;
  size_t v66;
  size_t v67;
  __int128 *p_dst;
  uint64_t v69;
  uint64_t v70;
  int v71;
  std::string::size_type v72;
  unint64_t v73;
  const char *v74;
  size_t v75;
  std::string::size_type v76;
  void *v77;
  uint64_t v78;
  uint64_t v79;
  int v80;
  size_t v81;
  unint64_t v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  __int128 *v86;
  std::string *v87;
  std::string::size_type size;
  std::string *v89;
  std::string::size_type v90;
  std::string *v91;
  std::string::size_type v92;
  std::string *v93;
  std::string::size_type v94;
  std::string *v95;
  size_t v96;
  void *v97;
  int v98;
  void **v99;
  __int128 v100;
  __int128 v101;
  void **v102;
  void **v103;
  uint64_t v104;
  unint64_t v105;
  const char *v106;
  uint64_t v107;
  unint64_t v108;
  char *v109;
  char *v110;
  char *v111;
  void **v112;
  __int128 v113;
  __int128 v114;
  void **v115;
  uint64_t *v116;
  int v117;
  std::string::size_type v118;
  const void *v119;
  _BYTE *v120;
  uint64_t v121;
  uint64_t v122;
  std::string *v123;
  std::string::size_type v124;
  const std::string::value_type *v125;
  std::string::size_type v126;
  std::string *v127;
  size_t v128;
  void *v129;
  int v130;
  void **v131;
  __int128 v132;
  __int128 v133;
  void **v134;
  uint64_t v135;
  unint64_t v136;
  uint64_t v137;
  unint64_t v138;
  char *v139;
  char *v140;
  void **v141;
  __int128 v142;
  __int128 v143;
  unint64_t v144;
  const std::string::value_type *v145;
  void **v146;
  uint64_t v147;
  uint64_t v148;
  void *v149;
  uint64_t v150;
  uint64_t v151;
  void *v152;
  uint64_t v153;
  char *v154;
  _QWORD *v155;
  _QWORD *v156;
  uint64_t v157;
  size_t v158;
  size_t v159;
  void *v160;
  uint64_t v161;
  uint64_t v162;
  void *v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  void *v167;
  uint64_t v168;
  _QWORD *v169;
  _QWORD *v170;
  std::__shared_weak_count *v171;
  uint64_t v172;
  unint64_t *p_shared_owners;
  unint64_t v174;
  unint64_t v175;
  char *v176;
  uint64_t v177;
  uint64_t v178;
  void *v179;
  uint64_t v180;
  _QWORD *v181;
  _QWORD *v182;
  std::__shared_weak_count *v183;
  uint64_t v184;
  unint64_t *v185;
  unint64_t v186;
  unint64_t v187;
  size_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  void **v192;
  uint64_t v193;
  std::string::size_type v194;
  uint64_t v195;
  uint64_t v196;
  void *v197;
  char *v198;
  size_t v199;
  uint64_t v200;
  int v201;
  int v202;
  void **v203;
  uint64_t v204;
  std::string::size_type v205;
  uint64_t v206;
  uint64_t v207;
  void *v208;
  size_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  void **v213;
  uint64_t v214;
  std::string::size_type v215;
  uint64_t v216;
  uint64_t v217;
  void *v218;
  size_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  void **v223;
  uint64_t v224;
  std::string::size_type v225;
  uint64_t v226;
  uint64_t v227;
  void *v228;
  uint64_t v229;
  uint64_t v230;
  void *v231;
  unint64_t v232;
  char *result;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  std::ios_base *v238;
  _QWORD *v239;
  std::string *v240;
  std::string::size_type v241;
  size_t v242;
  _BYTE *v243;
  uint64_t v244;
  const void **v245;
  const void *v246;
  uint64_t v247;
  uint64_t v248;
  int v249;
  _QWORD *v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  char v259[32];
  __int128 v260;
  size_t v261;
  int v262;
  _BYTE __p[104];
  int v264;
  uint64_t v265[19];
  _QWORD v266[7];
  int v267;
  _QWORD v268[7];
  int v269;
  char v270[16];
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  int v275;
  char v276[16];
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  int v281;
  char v282[16];
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  int v287;
  char v288[16];
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  int v293;
  _QWORD v294[7];
  int v295;
  _QWORD v296[7];
  int v297;
  char v298[16];
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  int v303;
  _QWORD v304[7];
  int v305;
  _QWORD v306[7];
  int v307;
  _QWORD v308[7];
  int v309;
  _QWORD v310[7];
  int v311;
  _QWORD v312[7];
  int v313;
  _QWORD v314[7];
  int v315;
  std::string v316;
  std::string v317;
  std::string v318;
  _DWORD v319[2];
  std::string v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  int v324;
  std::string v325;
  __int128 __dst;
  int64_t v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t v330;
  int v331;
  void *v332;
  void **v333;
  char *v334;
  uint64_t v335;
  uint64_t v336;
  uint64_t v337;
  int v338;
  _BYTE v339[25];
  std::string v340;
  int v341;
  _QWORD v342[4];
  uint64_t v343;
  uint64_t v344;
  uint64_t v345;
  int v346;
  size_t __len[4];
  std::string v348;
  int v349;
  std::string v350;
  __int128 v351;
  __int128 v352;
  __int128 v353;
  __int128 v354;
  uint64_t v355;
  uint64_t v356;

  v3 = a2;
  v356 = *MEMORY[0x1E0C80C00];
  strcpy((char *)a1, "Map Engine");
  *(_WORD *)(a1 + 23) = 10;
  *(_OWORD *)(a1 + 47) = 0u;
  *(_OWORD *)(a1 + 63) = 0u;
  *(_OWORD *)(a1 + 79) = 0u;
  *(_BYTE *)(a1 + 95) = 0;
  v5 = *(unsigned __int8 *)(a2 + 1176);
  __p[23] = 9;
  strcpy(__p, "Is Hidden");
  v315 = 0;
  memset(&v314[4], 0, 24);
  v314[0] = v5;
  gdc::DebugTreeNode::addProperty(a1, (uint64_t)__p, (uint64_t)v314);
  v6 = *(unsigned __int8 *)(v3 + 1177);
  __p[23] = 16;
  strcpy(__p, "Is In Background");
  v313 = 0;
  memset(&v312[4], 0, 24);
  v312[0] = v6;
  gdc::DebugTreeNode::addProperty(a1, (uint64_t)__p, (uint64_t)v312);
  v7 = *(unsigned __int8 *)(v3 + 1178);
  __p[23] = 21;
  strcpy(__p, "Renders in Background");
  v311 = 0;
  memset(&v310[4], 0, 24);
  v310[0] = v7;
  gdc::DebugTreeNode::addProperty(a1, (uint64_t)__p, (uint64_t)v310);
  __p[23] = 12;
  strcpy(__p, "Needs Layout");
  v8 = atomic_load((unsigned __int8 *)(v3 + 1179));
  v309 = 0;
  memset(&v308[4], 0, 24);
  v308[0] = v8 & 1;
  gdc::DebugTreeNode::addProperty(a1, (uint64_t)__p, (uint64_t)v308);
  if ((__p[23] & 0x80000000) != 0)
    operator delete(*(void **)__p);
  __p[23] = 21;
  strcpy(__p, "Needs Run Loop Update");
  v9 = atomic_load((unsigned __int8 *)(v3 + 1180));
  v307 = 0;
  memset(&v306[4], 0, 24);
  v306[0] = v9 & 1;
  gdc::DebugTreeNode::addProperty(a1, (uint64_t)__p, (uint64_t)v306);
  if ((__p[23] & 0x80000000) != 0)
    operator delete(*(void **)__p);
  __p[23] = 13;
  strcpy(__p, "Render Target");
  v250 = (_QWORD *)a1;
  ChildNode = gdc::DebugTreeNode::createChildNode(a1, (__int128 *)__p);
  v11 = *(void **)(v3 + 840);
  if (v11)
  {
    __p[23] = 17;
    strcpy(__p, "Has Render Target");
    v12 = objc_msgSend(v11, "hasRenderTarget");
    v305 = 0;
    memset(&v304[4], 0, 24);
    v304[0] = v12;
    gdc::DebugTreeNode::addProperty(a1, (uint64_t)__p, (uint64_t)v304);
    v13 = *(void **)(v3 + 840);
    __p[23] = 13;
    strcpy(__p, "Content Scale");
    objc_msgSend(v13, "contentScale");
    v301 = 0;
    v300 = 0;
    v302 = 0;
    v303 = 2;
    v299 = v14;
    gdc::DebugTreeNode::addProperty(a1, (uint64_t)__p, (uint64_t)v298);
    v15 = *(void **)(v3 + 840);
    __p[23] = 12;
    strcpy(__p, "Multi Sample");
    v16 = objc_msgSend(v15, "multiSample");
    v297 = 0;
    memset(&v296[4], 0, 24);
    v296[0] = v16;
    gdc::DebugTreeNode::addProperty(a1, (uint64_t)__p, (uint64_t)v296);
    v17 = *(void **)(v3 + 840);
    __p[23] = 16;
    strcpy(__p, "Should Rasterize");
    v18 = objc_msgSend(v17, "shouldRasterize");
    v19 = v3;
    v295 = 0;
    memset(&v294[4], 0, 24);
    v294[0] = v18;
    gdc::DebugTreeNode::addProperty((uint64_t)v250, (uint64_t)__p, (uint64_t)v294);
    __p[23] = 11;
    strcpy(__p, "Size Points");
    v20 = gdc::DebugTreeNode::createChildNode((uint64_t)ChildNode, (__int128 *)__p);
    v21 = *(void **)(v19 + 840);
    __p[23] = 5;
    strcpy(__p, "Width");
    objc_msgSend(v21, "size");
    v291 = 0;
    v290 = 0;
    v292 = 0;
    v293 = 2;
    v289 = v22;
    gdc::DebugTreeNode::addProperty((uint64_t)v20, (uint64_t)__p, (uint64_t)v288);
    v23 = *(void **)(v19 + 840);
    __p[23] = 6;
    strcpy(__p, "Height");
    objc_msgSend(v23, "size");
    v285 = 0;
    v284 = 0;
    v286 = 0;
    v287 = 2;
    v283 = v24;
    gdc::DebugTreeNode::addProperty((uint64_t)v20, (uint64_t)__p, (uint64_t)v282);
    __p[23] = 11;
    strcpy(__p, "Size Pixels");
    v25 = gdc::DebugTreeNode::createChildNode((uint64_t)ChildNode, (__int128 *)__p);
    v26 = *(void **)(v19 + 840);
    __p[23] = 5;
    strcpy(__p, "Width");
    objc_msgSend(v26, "sizeInPixels");
    v3 = v19;
    v279 = 0;
    v278 = 0;
    v280 = 0;
    v281 = 2;
    v277 = v27;
    gdc::DebugTreeNode::addProperty((uint64_t)v25, (uint64_t)__p, (uint64_t)v276);
    v28 = *(void **)(v19 + 840);
    __p[23] = 6;
    strcpy(__p, "Height");
    objc_msgSend(v28, "sizeInPixels");
    v273 = 0;
    v272 = 0;
    v274 = 0;
    v275 = 2;
    v271 = v29;
    gdc::DebugTreeNode::addProperty((uint64_t)v25, (uint64_t)__p, (uint64_t)v270);
  }
  __p[23] = 19;
  strcpy(__p, "Map Engine Settings");
  v30 = gdc::DebugTreeNode::createChildNode((uint64_t)v250, (__int128 *)__p);
  v31 = *(_QWORD *)(v3 + 1128);
  v258 = v3;
  if (v31)
  {
    v32 = (uint64_t)v30;
    __p[23] = 18;
    strcpy(__p, "HasUpdatedSettings");
    v33 = *(_QWORD *)(v31 + 40) != 0;
    v269 = 0;
    memset(&v268[4], 0, 24);
    v268[0] = v33;
    gdc::DebugTreeNode::addProperty((uint64_t)v30, (uint64_t)__p, (uint64_t)v268);
    for (i = &md::MapEngineSettingList; i != md::NeedsLayoutReasonList; ++i)
    {
      v35 = *i;
      v36 = "<Invalid>";
      if (v35 <= 0x27)
        v36 = off_1E42F3308[v35];
      v37 = strlen(v36);
      if (v37 > 0x7FFFFFFFFFFFFFF7)
        abort();
      v38 = v37;
      if (v37 >= 0x17)
      {
        v40 = (v37 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v37 | 7) != 0x17)
          v40 = v37 | 7;
        v41 = v40 + 1;
        v39 = operator new(v40 + 1);
        *(_QWORD *)&__p[8] = v38;
        *(_QWORD *)&__p[16] = v41 | 0x8000000000000000;
        *(_QWORD *)__p = v39;
      }
      else
      {
        __p[23] = v37;
        v39 = __p;
        if (!v37)
          goto LABEL_20;
      }
      memcpy(v39, v36, v38);
LABEL_20:
      v39[v38] = 0;
      v3 = v258;
      v42 = *(unsigned __int8 ***)(v258 + 1128);
      v43 = *v42;
      v44 = v42[1];
      if (v43 != v44)
      {
        while ((_DWORD)v35 != *v43)
        {
          v43 += 16;
          if (v43 == v44)
            goto LABEL_26;
        }
      }
      if (v43 == v44)
LABEL_26:
        v45 = 0;
      else
        v45 = *((_QWORD *)v43 + 1);
      memset(&v266[4], 0, 24);
      v267 = 0;
      v266[0] = v45;
      gdc::DebugTreeNode::addProperty(v32, (uint64_t)__p, (uint64_t)v266);
      if ((__p[23] & 0x80000000) != 0)
        operator delete(*(void **)__p);
    }
  }
  v46 = *(_QWORD *)(v3 + 1184);
  v47 = v250;
  if (v46)
  {
    v48 = (char *)operator new(0x20uLL);
    strcpy(v48, "Map Engine Configuration");
    std::string::__init_copy_ctor_external((std::string *)__p, v48, 0x18uLL);
    __p[24] = 0;
    memset(&__p[47], 0, 49);
    operator delete(v48);
    HIBYTE(__len[2]) = 18;
    strcpy((char *)__len, "Configuration Type");
    v49 = *(unsigned __int8 *)(v46 + 8);
    v50 = "<Invalid>";
    if (v49 <= 4)
      v50 = off_1E42FA030[v49];
    *((_QWORD *)&v351 + 1) = 0;
    v352 = 0uLL;
    LODWORD(v353) = 4;
    std::string::__assign_external((std::string *)((char *)&v351 + 8), v50);
    gdc::DebugTreeNode::addProperty((uint64_t)__p, (uint64_t)__len, (uint64_t)&v350);
    if (SHIBYTE(v352) < 0)
      operator delete(*((void **)&v351 + 1));
    v51 = *(unsigned __int8 *)(v46 + 9);
    HIBYTE(v342[2]) = 13;
    strcpy((char *)v342, "Renderer Type");
    v52 = "Realistic";
    if (v51 != 1)
      v52 = "<Invalid>";
    if (v51)
      v53 = v52;
    else
      v53 = "Cartographic";
    memset(&v348, 0, sizeof(v348));
    v349 = 4;
    std::string::__assign_external(&v348, v53);
    gdc::DebugTreeNode::addProperty((uint64_t)__p, (uint64_t)v342, (uint64_t)__len);
    if (SHIBYTE(v348.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v348.__r_.__value_.__l.__data_);
    v47 = v250;
    gdc::DebugTreeNode::addChildNode(v250, (__int128 *)__p);
    v54 = *(_QWORD *)&__p[72];
    if (*(_QWORD *)&__p[72])
    {
      v55 = *(_QWORD *)&__p[80];
      v56 = *(void **)&__p[72];
      if (*(_QWORD *)&__p[80] != *(_QWORD *)&__p[72])
      {
        do
        {
          v55 -= 80;
          std::__destroy_at[abi:nn180100]<gdc::DebugTreeProperty,0>(v55);
        }
        while (v55 != v54);
        v56 = *(void **)&__p[72];
      }
      *(_QWORD *)&__p[80] = v54;
      operator delete(v56);
    }
    std::vector<gdc::DebugTreeNode>::~vector[abi:nn180100]((void ***)&__p[48]);
    if ((__p[47] & 0x80000000) != 0)
    {
      operator delete(*(void **)&__p[24]);
      if ((__p[23] & 0x80000000) == 0)
        goto LABEL_48;
    }
    else if ((__p[23] & 0x80000000) == 0)
    {
      goto LABEL_48;
    }
    operator delete(*(void **)__p);
  }
LABEL_48:
  v57 = *(_QWORD *)(v3 + 1192);
  if (!v57)
    goto LABEL_234;
  strcpy(__p, "Map Engine Mpde");
  *(_WORD *)&__p[23] = 15;
  memset(&__p[47], 0, 49);
  v58 = *(unsigned __int8 *)(v57 + 48);
  HIBYTE(__len[2]) = 4;
  strcpy((char *)__len, "Type");
  if (v58 > 0x12)
    v59 = "<Invalid>";
  else
    v59 = off_1E42F3200[v58];
  *((_QWORD *)&v351 + 1) = 0;
  v352 = 0uLL;
  LODWORD(v353) = 4;
  std::string::__assign_external((std::string *)((char *)&v351 + 8), v59);
  gdc::DebugTreeNode::addProperty((uint64_t)__p, (uint64_t)__len, (uint64_t)&v350);
  if (SHIBYTE(v352) < 0)
    operator delete(*((void **)&v351 + 1));
  v60 = *(unsigned __int8 *)(v57 + 49);
  HIBYTE(v342[2]) = 19;
  strcpy((char *)v342, "Animate Transitions");
  v349 = 0;
  memset(&v348, 0, sizeof(v348));
  __len[0] = v60;
  gdc::DebugTreeNode::addProperty((uint64_t)__p, (uint64_t)v342, (uint64_t)__len);
  v61 = *(unsigned int *)(v57 + 52);
  v339[23] = 16;
  strcpy(v339, "Default Max Zoom");
  v345 = 0;
  v344 = 0;
  v346 = 1;
  v343 = 0;
  v342[1] = v61;
  gdc::DebugTreeNode::addProperty((uint64_t)__p, (uint64_t)v339, (uint64_t)v342);
  v253 = v57;
  v62 = *(uint64_t **)(v57 + 96);
  v333 = 0;
  v332 = 0;
  v334 = 0;
  if (v62)
  {
    v63 = "<Invalid>";
    while (1)
    {
      v64 = *((unsigned __int16 *)v62 + 8);
      v65 = v63;
      if (v64 <= 0x51)
        v65 = off_1E42F61C0[v64];
      v66 = strlen(v65);
      if (v66 > 0x7FFFFFFFFFFFFFF7)
        abort();
      v67 = v66;
      if (v66 >= 0x17)
        break;
      HIBYTE(v327) = v66;
      p_dst = &__dst;
      if (v66)
        goto LABEL_67;
LABEL_68:
      *((_BYTE *)p_dst + v67) = 0;
      memset(&v320, 0, sizeof(v320));
      v71 = *((unsigned __int8 *)v62 + 18);
      if (!*((_BYTE *)v62 + 18))
      {
        *((_BYTE *)&v320.__r_.__value_.__s + 23) = 8;
        v72 = 0x6465726975716572;
        goto LABEL_74;
      }
      if (v71 == 1)
      {
        *((_BYTE *)&v320.__r_.__value_.__s + 23) = 8;
        v72 = 0x6C616E6F6974706FLL;
LABEL_74:
        v320.__r_.__value_.__r.__words[0] = v72;
        goto LABEL_75;
      }
      if (v71 == 2)
      {
        *((_BYTE *)&v320.__r_.__value_.__s + 23) = 7;
        qmemcpy(&v320, "allowed", 7);
      }
LABEL_75:
      v73 = *((unsigned __int16 *)v62 + 10);
      v74 = v63;
      if (v73 <= 8)
        v74 = off_1E42F6158[v73];
      v75 = strlen(v74);
      if (v75 > 0x7FFFFFFFFFFFFFF7)
        abort();
      v76 = v75;
      if (v75 >= 0x17)
      {
        v78 = (v75 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v75 | 7) != 0x17)
          v78 = v75 | 7;
        v79 = v78 + 1;
        v77 = operator new(v78 + 1);
        v325.__r_.__value_.__r.__words[2] = v79 | 0x8000000000000000;
        v325.__r_.__value_.__r.__words[0] = (std::string::size_type)v77;
        v325.__r_.__value_.__l.__size_ = v76;
LABEL_84:
        memcpy(v77, v74, v76);
        goto LABEL_85;
      }
      *((_BYTE *)&v325.__r_.__value_.__s + 23) = v75;
      v77 = &v325;
      if (v75)
        goto LABEL_84;
LABEL_85:
      *((_BYTE *)v77 + v76) = 0;
      v80 = SHIBYTE(v327);
      if (v327 >= 0)
        v81 = HIBYTE(v327);
      else
        v81 = *((_QWORD *)&__dst + 1);
      v82 = v81 + 1;
      if (v81 + 1 > 0x7FFFFFFFFFFFFFF7)
        abort();
      if (v82 >= 0x17)
      {
        v84 = (v82 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v82 | 7) != 0x17)
          v84 = v82 | 7;
        v85 = v84 + 1;
        v83 = (char *)operator new(v84 + 1);
        v316.__r_.__value_.__r.__words[2] = v85 | 0x8000000000000000;
        v316.__r_.__value_.__r.__words[0] = (std::string::size_type)v83;
        v316.__r_.__value_.__l.__size_ = v81 + 1;
      }
      else
      {
        memset(&v316, 0, sizeof(v316));
        v83 = (char *)&v316;
        *((_BYTE *)&v316.__r_.__value_.__s + 23) = v81 + 1;
        if (!v81)
          goto LABEL_99;
      }
      if (v80 >= 0)
        v86 = &__dst;
      else
        v86 = (__int128 *)__dst;
      memmove(v83, v86, v81);
LABEL_99:
      *(_WORD *)&v83[v81] = 32;
      if ((v320.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v87 = &v320;
      else
        v87 = (std::string *)v320.__r_.__value_.__r.__words[0];
      if ((v320.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(v320.__r_.__value_.__r.__words[2]);
      else
        size = v320.__r_.__value_.__l.__size_;
      v89 = std::string::append(&v316, (const std::string::value_type *)v87, size);
      v90 = v89->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v317.__r_.__value_.__l.__data_ = *(_OWORD *)&v89->__r_.__value_.__l.__data_;
      v317.__r_.__value_.__r.__words[2] = v90;
      v89->__r_.__value_.__l.__size_ = 0;
      v89->__r_.__value_.__r.__words[2] = 0;
      v89->__r_.__value_.__r.__words[0] = 0;
      v91 = std::string::append(&v317, " ", 1uLL);
      v92 = v91->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v318.__r_.__value_.__l.__data_ = *(_OWORD *)&v91->__r_.__value_.__l.__data_;
      v318.__r_.__value_.__r.__words[2] = v92;
      v91->__r_.__value_.__l.__size_ = 0;
      v91->__r_.__value_.__r.__words[2] = 0;
      v91->__r_.__value_.__r.__words[0] = 0;
      if ((v325.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v93 = &v325;
      else
        v93 = (std::string *)v325.__r_.__value_.__r.__words[0];
      if ((v325.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v94 = HIBYTE(v325.__r_.__value_.__r.__words[2]);
      else
        v94 = v325.__r_.__value_.__l.__size_;
      v95 = std::string::append(&v318, (const std::string::value_type *)v93, v94);
      v97 = (void *)v95->__r_.__value_.__r.__words[0];
      v96 = v95->__r_.__value_.__l.__size_;
      v319[0] = v95->__r_.__value_.__r.__words[2];
      *(_DWORD *)((char *)v319 + 3) = *(_DWORD *)((char *)&v95->__r_.__value_.__r.__words[2] + 3);
      v98 = SHIBYTE(v95->__r_.__value_.__r.__words[2]);
      v95->__r_.__value_.__r.__words[0] = 0;
      v95->__r_.__value_.__l.__size_ = 0;
      v95->__r_.__value_.__r.__words[2] = 0;
      memset(&v340, 0, sizeof(v340));
      v341 = 4;
      if (v98 < 0)
      {
        std::string::__assign_no_alias<true>(&v340, v97, v96);
      }
      else
      {
        v340.__r_.__value_.__r.__words[0] = (std::string::size_type)v97;
        v340.__r_.__value_.__l.__size_ = v96;
        LODWORD(v340.__r_.__value_.__r.__words[2]) = v319[0];
        *(_DWORD *)((char *)&v340.__r_.__value_.__r.__words[2] + 3) = *(_DWORD *)((char *)v319 + 3);
        *((_BYTE *)&v340.__r_.__value_.__s + 23) = v98;
      }
      v99 = v333;
      if (v333 >= (void **)v334)
      {
        v103 = (void **)v332;
        v104 = ((char *)v333 - (_BYTE *)v332) >> 6;
        v105 = v104 + 1;
        if ((unint64_t)(v104 + 1) >> 58)
          abort();
        v106 = v63;
        v107 = v334 - (_BYTE *)v332;
        if ((v334 - (_BYTE *)v332) >> 5 > v105)
          v105 = v107 >> 5;
        if ((unint64_t)v107 >= 0x7FFFFFFFFFFFFFC0)
          v108 = 0x3FFFFFFFFFFFFFFLL;
        else
          v108 = v105;
        if (v108 >> 58)
LABEL_408:
          std::__throw_bad_array_new_length[abi:nn180100]();
        v109 = (char *)operator new(v108 << 6);
        v110 = &v109[64 * v104];
        *(_OWORD *)v110 = *(_OWORD *)v339;
        v111 = &v109[64 * v108];
        *(_OWORD *)(v110 + 9) = *(_OWORD *)&v339[9];
        *(std::string *)(v110 + 32) = v340;
        *(_OWORD *)&v340.__r_.__value_.__l.__data_ = 0uLL;
        *((_DWORD *)v110 + 14) = v341;
        v102 = (void **)(v110 + 64);
        v340.__r_.__value_.__r.__words[2] = 0;
        if (v99 == v103)
        {
          v332 = v110;
          v333 = (void **)(v110 + 64);
          v334 = &v109[64 * v108];
          v63 = v106;
          if (!v99)
            goto LABEL_132;
        }
        else
        {
          v112 = v99;
          v63 = v106;
          do
          {
            v113 = *((_OWORD *)v112 - 4);
            *(_OWORD *)(v110 - 55) = *(_OWORD *)((char *)v112 - 55);
            *((_OWORD *)v110 - 4) = v113;
            v114 = *((_OWORD *)v112 - 2);
            *((_QWORD *)v110 - 2) = *(v112 - 2);
            *((_OWORD *)v110 - 2) = v114;
            *(v112 - 3) = 0;
            *(v112 - 2) = 0;
            *(v112 - 4) = 0;
            *((_DWORD *)v110 - 2) = *((_DWORD *)v112 - 2);
            v110 -= 64;
            v112 -= 8;
          }
          while (v112 != v103);
          v332 = v110;
          v333 = v102;
          v334 = v111;
          do
          {
            if (*((char *)v99 - 9) < 0)
              operator delete(*(v99 - 4));
            v99 -= 8;
          }
          while (v99 != v103);
          v99 = v103;
          if (!v103)
            goto LABEL_132;
        }
        operator delete(v99);
      }
      else
      {
        v100 = *(_OWORD *)v339;
        *(_OWORD *)((char *)v333 + 9) = *(_OWORD *)&v339[9];
        *(_OWORD *)v99 = v100;
        v101 = *(_OWORD *)&v340.__r_.__value_.__l.__data_;
        v99[6] = (void *)v340.__r_.__value_.__r.__words[2];
        *((_OWORD *)v99 + 2) = v101;
        memset(&v340, 0, sizeof(v340));
        *((_DWORD *)v99 + 14) = v341;
        v102 = v99 + 8;
      }
LABEL_132:
      v333 = v102;
      if (SHIBYTE(v340.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v340.__r_.__value_.__l.__data_);
        if (v98 < 0)
          goto LABEL_141;
LABEL_134:
        if ((SHIBYTE(v318.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_135;
LABEL_142:
        operator delete(v318.__r_.__value_.__l.__data_);
        if (SHIBYTE(v317.__r_.__value_.__r.__words[2]) < 0)
          goto LABEL_143;
LABEL_136:
        if ((SHIBYTE(v316.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_137;
LABEL_144:
        operator delete(v316.__r_.__value_.__l.__data_);
        if (SHIBYTE(v325.__r_.__value_.__r.__words[2]) < 0)
          goto LABEL_145;
LABEL_138:
        if ((SHIBYTE(v320.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_146;
LABEL_56:
        operator delete(v320.__r_.__value_.__l.__data_);
        if (v80 < 0)
          goto LABEL_147;
LABEL_57:
        v62 = (uint64_t *)*v62;
        if (!v62)
          goto LABEL_151;
      }
      else
      {
        if ((v98 & 0x80000000) == 0)
          goto LABEL_134;
LABEL_141:
        operator delete(v97);
        if (SHIBYTE(v318.__r_.__value_.__r.__words[2]) < 0)
          goto LABEL_142;
LABEL_135:
        if ((SHIBYTE(v317.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_136;
LABEL_143:
        operator delete(v317.__r_.__value_.__l.__data_);
        if (SHIBYTE(v316.__r_.__value_.__r.__words[2]) < 0)
          goto LABEL_144;
LABEL_137:
        if ((SHIBYTE(v325.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_138;
LABEL_145:
        operator delete(v325.__r_.__value_.__l.__data_);
        if (SHIBYTE(v320.__r_.__value_.__r.__words[2]) < 0)
          goto LABEL_56;
LABEL_146:
        if ((v80 & 0x80000000) == 0)
          goto LABEL_57;
LABEL_147:
        operator delete((void *)__dst);
        v62 = (uint64_t *)*v62;
        if (!v62)
        {
LABEL_151:
          v115 = (void **)v332;
          goto LABEL_153;
        }
      }
    }
    v69 = (v66 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v66 | 7) != 0x17)
      v69 = v66 | 7;
    v70 = v69 + 1;
    p_dst = (__int128 *)operator new(v69 + 1);
    v327 = v70 | 0x8000000000000000;
    *(_QWORD *)&__dst = p_dst;
    *((_QWORD *)&__dst + 1) = v67;
LABEL_67:
    memmove(p_dst, v65, v67);
    goto LABEL_68;
  }
  v115 = 0;
  v102 = 0;
LABEL_153:
  v339[23] = 12;
  strcpy(v339, "MapDataTypes");
  gdc::DebugTreeNode::addProperty((uint64_t)__p, (uint64_t)v339, (uint64_t *)&v332);
  for (; v102 != v115; v102 -= 8)
  {
    if (*((char *)v102 - 9) < 0)
      operator delete(*(v102 - 4));
  }
  v333 = v115;
  v116 = *(uint64_t **)(v253 + 200);
  if (v116)
  {
    while (1)
    {
      __dst = 0uLL;
      v327 = 0;
      v117 = *((unsigned __int8 *)v116 + 40);
      if (v117 == 2)
      {
        HIBYTE(v327) = 7;
        qmemcpy(&__dst, "allowed", 7);
      }
      else if (v117 == 1)
      {
        HIBYTE(v327) = 8;
        *(_QWORD *)&__dst = 0x6C616E6F6974706FLL;
      }
      else if (!*((_BYTE *)v116 + 40))
      {
        HIBYTE(v327) = 8;
        *(_QWORD *)&__dst = 0x6465726975716572;
      }
      v118 = v116[4];
      if (v118 > 0x7FFFFFFFFFFFFFF7)
        abort();
      v119 = (const void *)v116[3];
      if (v118 >= 0x17)
        break;
      *((_BYTE *)&v325.__r_.__value_.__s + 23) = v116[4];
      v120 = &v325;
      if (v118)
        goto LABEL_174;
LABEL_175:
      v120[v118] = 0;
      v123 = std::string::append(&v325, " ", 1uLL);
      v124 = v123->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v320.__r_.__value_.__l.__data_ = *(_OWORD *)&v123->__r_.__value_.__l.__data_;
      v320.__r_.__value_.__r.__words[2] = v124;
      v123->__r_.__value_.__l.__size_ = 0;
      v123->__r_.__value_.__r.__words[2] = 0;
      v123->__r_.__value_.__r.__words[0] = 0;
      if (v327 >= 0)
        v125 = (const std::string::value_type *)&__dst;
      else
        v125 = (const std::string::value_type *)__dst;
      if (v327 >= 0)
        v126 = HIBYTE(v327);
      else
        v126 = *((_QWORD *)&__dst + 1);
      v127 = std::string::append(&v320, v125, v126);
      v129 = (void *)v127->__r_.__value_.__r.__words[0];
      v128 = v127->__r_.__value_.__l.__size_;
      LODWORD(v318.__r_.__value_.__l.__data_) = v127->__r_.__value_.__r.__words[2];
      *(_DWORD *)((char *)v318.__r_.__value_.__r.__words + 3) = *(_DWORD *)((char *)&v127->__r_.__value_.__r.__words[2]
                                                                          + 3);
      v130 = SHIBYTE(v127->__r_.__value_.__r.__words[2]);
      v127->__r_.__value_.__r.__words[0] = 0;
      v127->__r_.__value_.__l.__size_ = 0;
      v127->__r_.__value_.__r.__words[2] = 0;
      memset(&v340, 0, sizeof(v340));
      v341 = 4;
      if (v130 < 0)
      {
        std::string::__assign_no_alias<true>(&v340, v129, v128);
      }
      else
      {
        v340.__r_.__value_.__r.__words[0] = (std::string::size_type)v129;
        v340.__r_.__value_.__l.__size_ = v128;
        LODWORD(v340.__r_.__value_.__r.__words[2]) = v318.__r_.__value_.__l.__data_;
        *(_DWORD *)((char *)&v340.__r_.__value_.__r.__words[2] + 3) = *(_DWORD *)((char *)v318.__r_.__value_.__r.__words
                                                                                + 3);
        *((_BYTE *)&v340.__r_.__value_.__s + 23) = v130;
      }
      v131 = v333;
      if (v333 >= (void **)v334)
      {
        v134 = (void **)v332;
        v135 = ((char *)v333 - (_BYTE *)v332) >> 6;
        v136 = v135 + 1;
        if ((unint64_t)(v135 + 1) >> 58)
          abort();
        v137 = v334 - (_BYTE *)v332;
        if ((v334 - (_BYTE *)v332) >> 5 > v136)
          v136 = v137 >> 5;
        if ((unint64_t)v137 >= 0x7FFFFFFFFFFFFFC0)
          v138 = 0x3FFFFFFFFFFFFFFLL;
        else
          v138 = v136;
        if (v138 >> 58)
          goto LABEL_408;
        v139 = (char *)operator new(v138 << 6);
        v140 = &v139[64 * v135];
        *(_OWORD *)v140 = *(_OWORD *)v339;
        *(_OWORD *)(v140 + 9) = *(_OWORD *)&v339[9];
        *(std::string *)(v140 + 32) = v340;
        *(_OWORD *)&v340.__r_.__value_.__l.__data_ = 0uLL;
        *((_DWORD *)v140 + 14) = v341;
        v115 = (void **)(v140 + 64);
        v340.__r_.__value_.__r.__words[2] = 0;
        if (v131 == v134)
        {
          v332 = v140;
          v333 = (void **)(v140 + 64);
          v334 = &v139[64 * v138];
          if (!v131)
            goto LABEL_202;
        }
        else
        {
          v141 = v131;
          do
          {
            v142 = *((_OWORD *)v141 - 4);
            *(_OWORD *)(v140 - 55) = *(_OWORD *)((char *)v141 - 55);
            *((_OWORD *)v140 - 4) = v142;
            v143 = *((_OWORD *)v141 - 2);
            *((_QWORD *)v140 - 2) = *(v141 - 2);
            *((_OWORD *)v140 - 2) = v143;
            *(v141 - 3) = 0;
            *(v141 - 2) = 0;
            *(v141 - 4) = 0;
            *((_DWORD *)v140 - 2) = *((_DWORD *)v141 - 2);
            v140 -= 64;
            v141 -= 8;
          }
          while (v141 != v134);
          v332 = v140;
          v333 = v115;
          v334 = &v139[64 * v138];
          do
          {
            if (*((char *)v131 - 9) < 0)
              operator delete(*(v131 - 4));
            v131 -= 8;
          }
          while (v131 != v134);
          v131 = v134;
          if (!v134)
            goto LABEL_202;
        }
        operator delete(v131);
      }
      else
      {
        v132 = *(_OWORD *)v339;
        *(_OWORD *)((char *)v333 + 9) = *(_OWORD *)&v339[9];
        *(_OWORD *)v131 = v132;
        v133 = *(_OWORD *)&v340.__r_.__value_.__l.__data_;
        v131[6] = (void *)v340.__r_.__value_.__r.__words[2];
        *((_OWORD *)v131 + 2) = v133;
        memset(&v340, 0, sizeof(v340));
        *((_DWORD *)v131 + 14) = v341;
        v115 = v131 + 8;
      }
LABEL_202:
      v333 = v115;
      if (SHIBYTE(v340.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v340.__r_.__value_.__l.__data_);
        if (v130 < 0)
          goto LABEL_208;
LABEL_204:
        if ((SHIBYTE(v320.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_205;
LABEL_209:
        operator delete(v320.__r_.__value_.__l.__data_);
        if (SHIBYTE(v325.__r_.__value_.__r.__words[2]) < 0)
          goto LABEL_159;
LABEL_210:
        if ((SHIBYTE(v327) & 0x80000000) == 0)
          goto LABEL_160;
LABEL_211:
        operator delete((void *)__dst);
        v116 = (uint64_t *)*v116;
        if (!v116)
          goto LABEL_215;
      }
      else
      {
        if ((v130 & 0x80000000) == 0)
          goto LABEL_204;
LABEL_208:
        operator delete(v129);
        if (SHIBYTE(v320.__r_.__value_.__r.__words[2]) < 0)
          goto LABEL_209;
LABEL_205:
        if ((SHIBYTE(v325.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_210;
LABEL_159:
        operator delete(v325.__r_.__value_.__l.__data_);
        if (SHIBYTE(v327) < 0)
          goto LABEL_211;
LABEL_160:
        v116 = (uint64_t *)*v116;
        if (!v116)
          goto LABEL_215;
      }
    }
    v121 = (v118 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v118 | 7) != 0x17)
      v121 = v118 | 7;
    v122 = v121 + 1;
    v120 = operator new(v121 + 1);
    v325.__r_.__value_.__r.__words[2] = v122 | 0x8000000000000000;
    v325.__r_.__value_.__r.__words[0] = (std::string::size_type)v120;
    v325.__r_.__value_.__l.__size_ = v118;
LABEL_174:
    memmove(v120, v119, v118);
    goto LABEL_175;
  }
LABEL_215:
  v339[23] = 6;
  strcpy(v339, "Logics");
  gdc::DebugTreeNode::addProperty((uint64_t)__p, (uint64_t)v339, (uint64_t *)&v332);
  HIBYTE(v327) = 10;
  strcpy((char *)&__dst, "World Type");
  v144 = *(unsigned __int8 *)(v253 + 225);
  if (v144 > 6)
    v145 = "<Invalid>";
  else
    v145 = off_1E42FB0E0[v144];
  v47 = v250;
  v3 = v258;
  memset(&v340, 0, sizeof(v340));
  v341 = 4;
  std::string::__assign_external(&v340, v145);
  gdc::DebugTreeNode::addProperty((uint64_t)__p, (uint64_t)&__dst, (uint64_t)v339);
  if (SHIBYTE(v340.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v340.__r_.__value_.__l.__data_);
  v146 = (void **)v332;
  if (v332)
  {
    while (v115 != v146)
    {
      if (*((char *)v115 - 9) < 0)
        operator delete(*(v115 - 4));
      v115 -= 8;
    }
    operator delete(v146);
  }
  gdc::DebugTreeNode::addChildNode(v250, (__int128 *)__p);
  v147 = *(_QWORD *)&__p[72];
  if (*(_QWORD *)&__p[72])
  {
    v148 = *(_QWORD *)&__p[80];
    v149 = *(void **)&__p[72];
    if (*(_QWORD *)&__p[80] != *(_QWORD *)&__p[72])
    {
      do
      {
        v148 -= 80;
        std::__destroy_at[abi:nn180100]<gdc::DebugTreeProperty,0>(v148);
      }
      while (v148 != v147);
      v149 = *(void **)&__p[72];
    }
    *(_QWORD *)&__p[80] = v147;
    operator delete(v149);
  }
  std::vector<gdc::DebugTreeNode>::~vector[abi:nn180100]((void ***)&__p[48]);
  if ((__p[47] & 0x80000000) != 0)
  {
    operator delete(*(void **)&__p[24]);
    if ((__p[23] & 0x80000000) == 0)
      goto LABEL_234;
  }
  else if ((__p[23] & 0x80000000) == 0)
  {
    goto LABEL_234;
  }
  operator delete(*(void **)__p);
LABEL_234:
  md::World::createDebugNode((uint64_t)__p, *(_QWORD **)(v3 + 896), a3);
  gdc::DebugTreeNode::addChildNode(v47, (__int128 *)__p);
  v150 = *(_QWORD *)&__p[72];
  if (*(_QWORD *)&__p[72])
  {
    v151 = *(_QWORD *)&__p[80];
    v152 = *(void **)&__p[72];
    if (*(_QWORD *)&__p[80] != *(_QWORD *)&__p[72])
    {
      do
      {
        v151 -= 80;
        std::__destroy_at[abi:nn180100]<gdc::DebugTreeProperty,0>(v151);
      }
      while (v151 != v150);
      v152 = *(void **)&__p[72];
    }
    *(_QWORD *)&__p[80] = v150;
    operator delete(v152);
  }
  std::vector<gdc::DebugTreeNode>::~vector[abi:nn180100]((void ***)&__p[48]);
  if ((__p[47] & 0x80000000) != 0)
  {
    operator delete(*(void **)&__p[24]);
    if ((__p[23] & 0x80000000) == 0)
      goto LABEL_241;
  }
  else if ((__p[23] & 0x80000000) == 0)
  {
    goto LABEL_241;
  }
  operator delete(*(void **)__p);
LABEL_241:
  v153 = *(_QWORD *)(v3 + 1120);
  strcpy(__p, "Logic Manager");
  *(_WORD *)&__p[23] = 13;
  memset(&__p[47], 0, 49);
  *((_BYTE *)&v350.__r_.__value_.__s + 23) = 6;
  strcpy((char *)&v350, "Logics");
  v154 = gdc::DebugTreeNode::createChildNode((uint64_t)__p, (__int128 *)&v350);
  memset(__len, 0, 24);
  *(_QWORD *)&v351 = 0;
  v155 = operator new(0x20uLL);
  *v155 = &off_1E42D8B40;
  v155[1] = a3;
  v155[2] = __len;
  v155[3] = v154;
  *(_QWORD *)&v351 = v155;
  v156 = *(_QWORD **)(v153 + 24);
  if (v156)
  {
    v342[0] = v156[5];
    while (1)
    {
      (*(void (**)(_QWORD *, _QWORD *))(*v155 + 48))(v155, v342);
      v156 = (_QWORD *)*v156;
      v155 = (_QWORD *)v351;
      if (!v156)
        break;
      v342[0] = v156[5];
      if (!(_QWORD)v351)
      {
        std::__throw_bad_function_call[abi:nn180100]();
        __break(1u);
      }
    }
    if ((std::string *)v351 == &v350)
    {
      v157 = 4;
      v155 = &v350;
      goto LABEL_254;
    }
    if (!(_QWORD)v351)
      goto LABEL_255;
  }
  v157 = 5;
LABEL_254:
  (*(void (**)(void))(*v155 + 8 * v157))();
LABEL_255:
  v158 = __len[0];
  if (__len[0])
  {
    v159 = __len[1];
    v160 = (void *)__len[0];
    if (__len[1] != __len[0])
    {
      do
      {
        if (*(char *)(v159 - 9) < 0)
          operator delete(*(void **)(v159 - 32));
        v159 -= 64;
      }
      while (v159 != v158);
      v160 = (void *)__len[0];
    }
    __len[1] = v158;
    operator delete(v160);
  }
  gdc::DebugTreeNode::addChildNode(v47, (__int128 *)__p);
  v161 = *(_QWORD *)&__p[72];
  if (*(_QWORD *)&__p[72])
  {
    v162 = *(_QWORD *)&__p[80];
    v163 = *(void **)&__p[72];
    if (*(_QWORD *)&__p[80] != *(_QWORD *)&__p[72])
    {
      do
      {
        v162 -= 80;
        std::__destroy_at[abi:nn180100]<gdc::DebugTreeProperty,0>(v162);
      }
      while (v162 != v161);
      v163 = *(void **)&__p[72];
    }
    *(_QWORD *)&__p[80] = v161;
    operator delete(v163);
  }
  std::vector<gdc::DebugTreeNode>::~vector[abi:nn180100]((void ***)&__p[48]);
  if ((__p[47] & 0x80000000) != 0)
  {
    operator delete(*(void **)&__p[24]);
    if ((__p[23] & 0x80000000) == 0)
    {
LABEL_270:
      v164 = *(_QWORD *)(v3 + 872);
      if (!v164)
        goto LABEL_281;
      goto LABEL_274;
    }
  }
  else if ((__p[23] & 0x80000000) == 0)
  {
    goto LABEL_270;
  }
  operator delete(*(void **)__p);
  v164 = *(_QWORD *)(v3 + 872);
  if (!v164)
    goto LABEL_281;
LABEL_274:
  (*(void (**)(_BYTE *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v164 + 48))(__p, v164, a3);
  gdc::DebugTreeNode::addChildNode(v47, (__int128 *)__p);
  v165 = *(_QWORD *)&__p[72];
  if (*(_QWORD *)&__p[72])
  {
    v166 = *(_QWORD *)&__p[80];
    v167 = *(void **)&__p[72];
    if (*(_QWORD *)&__p[80] != *(_QWORD *)&__p[72])
    {
      do
      {
        v166 -= 80;
        std::__destroy_at[abi:nn180100]<gdc::DebugTreeProperty,0>(v166);
      }
      while (v166 != v165);
      v167 = *(void **)&__p[72];
    }
    *(_QWORD *)&__p[80] = v165;
    operator delete(v167);
  }
  std::vector<gdc::DebugTreeNode>::~vector[abi:nn180100]((void ***)&__p[48]);
  if ((__p[47] & 0x80000000) != 0)
  {
    operator delete(*(void **)&__p[24]);
    if ((__p[23] & 0x80000000) == 0)
      goto LABEL_281;
  }
  else if ((__p[23] & 0x80000000) == 0)
  {
    goto LABEL_281;
  }
  operator delete(*(void **)__p);
LABEL_281:
  v168 = *(_QWORD *)(v3 + 4512);
  v169 = *(_QWORD **)v168;
  v170 = *(_QWORD **)(v168 + 8);
  if (v169 != v170)
  {
    while (*v169 != 0x41D4E9297E100630)
    {
      v169 += 5;
      if (v169 == v170)
        goto LABEL_308;
    }
  }
  if (v169 != v170)
  {
    v172 = v169[3];
    v171 = (std::__shared_weak_count *)v169[4];
    if (!v171)
      goto LABEL_291;
    p_shared_owners = (unint64_t *)&v171->__shared_owners_;
    do
      v174 = __ldxr(p_shared_owners);
    while (__stxr(v174 + 1, p_shared_owners));
    do
      v175 = __ldaxr(p_shared_owners);
    while (__stlxr(v175 - 1, p_shared_owners));
    if (!v175)
    {
      ((void (*)(std::__shared_weak_count *))v171->__on_zero_shared)(v171);
      std::__shared_weak_count::__release_weak(v171);
      if (!v172)
        goto LABEL_308;
    }
    else
    {
LABEL_291:
      if (!v172)
        goto LABEL_308;
    }
    memset(__p, 0, 96);
    v176 = (char *)operator new(0x19uLL);
    strcpy(v176, "VKMRenderResourcesStore");
    std::string::__assign_no_alias<true>(__p, v176, 0x17uLL);
    operator delete(v176);
    md::VKMRenderResourceStoreSerializer::serializeWith(__p, v172);
    gdc::DebugTreeNode::addChildNode(v47, (__int128 *)__p);
    v177 = *(_QWORD *)&__p[72];
    if (*(_QWORD *)&__p[72])
    {
      v178 = *(_QWORD *)&__p[80];
      v179 = *(void **)&__p[72];
      if (*(_QWORD *)&__p[80] != *(_QWORD *)&__p[72])
      {
        do
        {
          v178 -= 80;
          std::__destroy_at[abi:nn180100]<gdc::DebugTreeProperty,0>(v178);
        }
        while (v178 != v177);
        v179 = *(void **)&__p[72];
      }
      *(_QWORD *)&__p[80] = v177;
      operator delete(v179);
    }
    std::vector<gdc::DebugTreeNode>::~vector[abi:nn180100]((void ***)&__p[48]);
    if ((__p[47] & 0x80000000) != 0)
    {
      operator delete(*(void **)&__p[24]);
      if ((__p[23] & 0x80000000) == 0)
        goto LABEL_308;
    }
    else if ((__p[23] & 0x80000000) == 0)
    {
      goto LABEL_308;
    }
    operator delete(*(void **)__p);
  }
LABEL_308:
  v180 = *(_QWORD *)(v3 + 4512);
  v181 = *(_QWORD **)v180;
  v182 = *(_QWORD **)(v180 + 8);
  if (v181 != v182)
  {
    while (*v181 != 0x4EDAD23DFB014132)
    {
      v181 += 5;
      if (v181 == v182)
        goto LABEL_367;
    }
  }
  if (v181 == v182)
    goto LABEL_367;
  v184 = v181[3];
  v183 = (std::__shared_weak_count *)v181[4];
  if (!v183)
    goto LABEL_318;
  v185 = (unint64_t *)&v183->__shared_owners_;
  do
    v186 = __ldxr(v185);
  while (__stxr(v186 + 1, v185));
  do
    v187 = __ldaxr(v185);
  while (__stlxr(v187 - 1, v185));
  if (!v187)
  {
    ((void (*)(std::__shared_weak_count *))v183->__on_zero_shared)(v183);
    std::__shared_weak_count::__release_weak(v183);
    if (!v184)
      goto LABEL_367;
  }
  else
  {
LABEL_318:
    if (!v184)
      goto LABEL_367;
  }
  v355 = 0;
  v354 = 0u;
  v353 = 0u;
  v352 = 0u;
  v351 = 0u;
  strcpy((char *)&v350, "MaterialResourceStore");
  *((_BYTE *)&v350.__r_.__value_.__s + 23) = 21;
  memset(&__p[24], 0, 72);
  strcpy(__p, "_materialPtrItems");
  __p[23] = 17;
  HIBYTE(v342[2]) = 8;
  strcpy((char *)v342, "counters");
  v188 = *(unsigned int *)(v184 + 40);
  v349 = 1;
  memset(&v348, 0, sizeof(v348));
  __len[1] = v188;
  gdc::DebugTreeNode::addProperty((uint64_t)__p, (uint64_t)v342, (uint64_t)__len);
  v189 = *(unsigned int *)(v184 + 80);
  v339[23] = 16;
  strcpy(v339, "countersRetained");
  v345 = 0;
  v344 = 0;
  v346 = 1;
  v343 = 0;
  v342[1] = v189;
  gdc::DebugTreeNode::addProperty((uint64_t)__p, (uint64_t)v339, (uint64_t)v342);
  v191 = *(_QWORD *)(v184 + 144);
  v190 = *(_QWORD *)(v184 + 152);
  HIBYTE(v334) = 5;
  strcpy((char *)&v332, "items");
  v341 = 1;
  memset(&v340, 0, sizeof(v340));
  *(_QWORD *)&v339[8] = ((unint64_t)(v190 - v191) >> 3);
  gdc::DebugTreeNode::addProperty((uint64_t)__p, (uint64_t)&v332, (uint64_t)v339);
  v192 = (void **)*(unsigned int *)(v184 + 216);
  HIBYTE(v327) = 4;
  strcpy((char *)&__dst, "pool");
  v337 = 0;
  v336 = 0;
  v338 = 1;
  v335 = 0;
  v333 = v192;
  gdc::DebugTreeNode::addProperty((uint64_t)__p, (uint64_t)&__dst, (uint64_t)&v332);
  v193 = *(unsigned int *)(v184 + 256);
  *((_BYTE *)&v320.__r_.__value_.__s + 23) = 11;
  strcpy((char *)&v320, "keyToHandle");
  v330 = 0;
  v329 = 0;
  v331 = 1;
  v328 = 0;
  *((_QWORD *)&__dst + 1) = v193;
  gdc::DebugTreeNode::addProperty((uint64_t)__p, (uint64_t)&v320, (uint64_t)&__dst);
  v194 = *(unsigned int *)(v184 + 296);
  *((_BYTE *)&v325.__r_.__value_.__s + 23) = 11;
  strcpy((char *)&v325, "handleToKey");
  v323 = 0;
  v322 = 0;
  v324 = 1;
  v321 = 0;
  v320.__r_.__value_.__l.__size_ = v194;
  gdc::DebugTreeNode::addProperty((uint64_t)__p, (uint64_t)&v325, (uint64_t)&v320);
  gdc::DebugTreeNode::addChildNode(&v350, (__int128 *)__p);
  v195 = *(_QWORD *)&__p[72];
  if (*(_QWORD *)&__p[72])
  {
    v196 = *(_QWORD *)&__p[80];
    v197 = *(void **)&__p[72];
    if (*(_QWORD *)&__p[80] != *(_QWORD *)&__p[72])
    {
      do
      {
        v196 -= 80;
        std::__destroy_at[abi:nn180100]<gdc::DebugTreeProperty,0>(v196);
      }
      while (v196 != v195);
      v197 = *(void **)&__p[72];
    }
    *(_QWORD *)&__p[80] = v195;
    operator delete(v197);
  }
  std::vector<gdc::DebugTreeNode>::~vector[abi:nn180100]((void ***)&__p[48]);
  if ((__p[47] & 0x80000000) != 0)
  {
    operator delete(*(void **)&__p[24]);
    if ((__p[23] & 0x80000000) == 0)
      goto LABEL_326;
  }
  else if ((__p[23] & 0x80000000) == 0)
  {
    goto LABEL_326;
  }
  operator delete(*(void **)__p);
LABEL_326:
  memset(__p, 0, 96);
  v198 = (char *)operator new(0x20uLL);
  strcpy(v198, "_materialVisibilityOptions");
  std::string::__assign_no_alias<true>(__p, v198, 0x1AuLL);
  operator delete(v198);
  HIBYTE(v342[2]) = 8;
  strcpy((char *)v342, "counters");
  v199 = *(unsigned int *)(v184 + 336);
  v349 = 1;
  memset(&v348, 0, sizeof(v348));
  __len[1] = v199;
  gdc::DebugTreeNode::addProperty((uint64_t)__p, (uint64_t)v342, (uint64_t)__len);
  v200 = *(unsigned int *)(v184 + 376);
  v339[23] = 16;
  strcpy(v339, "countersRetained");
  v345 = 0;
  v344 = 0;
  v346 = 1;
  v343 = 0;
  v342[1] = v200;
  gdc::DebugTreeNode::addProperty((uint64_t)__p, (uint64_t)v339, (uint64_t)v342);
  v201 = *(_DWORD *)(v184 + 448);
  v202 = *(_DWORD *)(v184 + 440);
  HIBYTE(v334) = 5;
  strcpy((char *)&v332, "items");
  v341 = 1;
  memset(&v340, 0, sizeof(v340));
  *(_QWORD *)&v339[8] = (-1431655765 * (v201 - v202));
  gdc::DebugTreeNode::addProperty((uint64_t)__p, (uint64_t)&v332, (uint64_t)v339);
  v203 = (void **)*(unsigned int *)(v184 + 512);
  HIBYTE(v327) = 4;
  strcpy((char *)&__dst, "pool");
  v337 = 0;
  v336 = 0;
  v338 = 1;
  v335 = 0;
  v333 = v203;
  gdc::DebugTreeNode::addProperty((uint64_t)__p, (uint64_t)&__dst, (uint64_t)&v332);
  v204 = *(unsigned int *)(v184 + 552);
  *((_BYTE *)&v320.__r_.__value_.__s + 23) = 11;
  strcpy((char *)&v320, "keyToHandle");
  v330 = 0;
  v329 = 0;
  v331 = 1;
  v328 = 0;
  *((_QWORD *)&__dst + 1) = v204;
  gdc::DebugTreeNode::addProperty((uint64_t)__p, (uint64_t)&v320, (uint64_t)&__dst);
  v205 = *(unsigned int *)(v184 + 592);
  *((_BYTE *)&v325.__r_.__value_.__s + 23) = 11;
  strcpy((char *)&v325, "handleToKey");
  v323 = 0;
  v322 = 0;
  v324 = 1;
  v321 = 0;
  v320.__r_.__value_.__l.__size_ = v205;
  gdc::DebugTreeNode::addProperty((uint64_t)__p, (uint64_t)&v325, (uint64_t)&v320);
  gdc::DebugTreeNode::addChildNode(&v350, (__int128 *)__p);
  v206 = *(_QWORD *)&__p[72];
  if (*(_QWORD *)&__p[72])
  {
    v207 = *(_QWORD *)&__p[80];
    v208 = *(void **)&__p[72];
    if (*(_QWORD *)&__p[80] != *(_QWORD *)&__p[72])
    {
      do
      {
        v207 -= 80;
        std::__destroy_at[abi:nn180100]<gdc::DebugTreeProperty,0>(v207);
      }
      while (v207 != v206);
      v208 = *(void **)&__p[72];
    }
    *(_QWORD *)&__p[80] = v206;
    operator delete(v208);
  }
  std::vector<gdc::DebugTreeNode>::~vector[abi:nn180100]((void ***)&__p[48]);
  if ((__p[47] & 0x80000000) != 0)
  {
    operator delete(*(void **)&__p[24]);
    if ((__p[23] & 0x80000000) == 0)
      goto LABEL_333;
  }
  else if ((__p[23] & 0x80000000) == 0)
  {
    goto LABEL_333;
  }
  operator delete(*(void **)__p);
LABEL_333:
  memset(&__p[24], 0, 72);
  strcpy(__p, "_materialZIndex");
  __p[23] = 15;
  HIBYTE(v342[2]) = 8;
  strcpy((char *)v342, "counters");
  v209 = *(unsigned int *)(v184 + 632);
  v349 = 1;
  memset(&v348, 0, sizeof(v348));
  __len[1] = v209;
  gdc::DebugTreeNode::addProperty((uint64_t)__p, (uint64_t)v342, (uint64_t)__len);
  v210 = *(unsigned int *)(v184 + 672);
  v339[23] = 16;
  strcpy(v339, "countersRetained");
  v345 = 0;
  v344 = 0;
  v346 = 1;
  v343 = 0;
  v342[1] = v210;
  gdc::DebugTreeNode::addProperty((uint64_t)__p, (uint64_t)v339, (uint64_t)v342);
  v211 = *(_QWORD *)(v184 + 744);
  v212 = *(_QWORD *)(v184 + 736);
  HIBYTE(v334) = 5;
  strcpy((char *)&v332, "items");
  v341 = 1;
  memset(&v340, 0, sizeof(v340));
  *(_QWORD *)&v339[8] = ((unint64_t)(v211 - v212) >> 3);
  gdc::DebugTreeNode::addProperty((uint64_t)__p, (uint64_t)&v332, (uint64_t)v339);
  v213 = (void **)*(unsigned int *)(v184 + 808);
  HIBYTE(v327) = 4;
  strcpy((char *)&__dst, "pool");
  v337 = 0;
  v336 = 0;
  v338 = 1;
  v335 = 0;
  v333 = v213;
  gdc::DebugTreeNode::addProperty((uint64_t)__p, (uint64_t)&__dst, (uint64_t)&v332);
  v214 = *(unsigned int *)(v184 + 848);
  *((_BYTE *)&v320.__r_.__value_.__s + 23) = 11;
  strcpy((char *)&v320, "keyToHandle");
  v330 = 0;
  v329 = 0;
  v331 = 1;
  v328 = 0;
  *((_QWORD *)&__dst + 1) = v214;
  gdc::DebugTreeNode::addProperty((uint64_t)__p, (uint64_t)&v320, (uint64_t)&__dst);
  v215 = *(unsigned int *)(v184 + 888);
  *((_BYTE *)&v325.__r_.__value_.__s + 23) = 11;
  strcpy((char *)&v325, "handleToKey");
  v323 = 0;
  v322 = 0;
  v324 = 1;
  v321 = 0;
  v320.__r_.__value_.__l.__size_ = v215;
  gdc::DebugTreeNode::addProperty((uint64_t)__p, (uint64_t)&v325, (uint64_t)&v320);
  gdc::DebugTreeNode::addChildNode(&v350, (__int128 *)__p);
  v216 = *(_QWORD *)&__p[72];
  if (*(_QWORD *)&__p[72])
  {
    v217 = *(_QWORD *)&__p[80];
    v218 = *(void **)&__p[72];
    if (*(_QWORD *)&__p[80] != *(_QWORD *)&__p[72])
    {
      do
      {
        v217 -= 80;
        std::__destroy_at[abi:nn180100]<gdc::DebugTreeProperty,0>(v217);
      }
      while (v217 != v216);
      v218 = *(void **)&__p[72];
    }
    *(_QWORD *)&__p[80] = v216;
    operator delete(v218);
  }
  std::vector<gdc::DebugTreeNode>::~vector[abi:nn180100]((void ***)&__p[48]);
  if ((__p[47] & 0x80000000) != 0)
  {
    operator delete(*(void **)&__p[24]);
    if ((__p[23] & 0x80000000) == 0)
      goto LABEL_340;
LABEL_364:
    operator delete(*(void **)__p);
    goto LABEL_340;
  }
  if ((__p[23] & 0x80000000) != 0)
    goto LABEL_364;
LABEL_340:
  memset(&__p[24], 0, 72);
  strcpy(__p, "_colorData");
  __p[23] = 10;
  HIBYTE(v342[2]) = 8;
  strcpy((char *)v342, "counters");
  v219 = *(unsigned int *)(v184 + 928);
  v349 = 1;
  memset(&v348, 0, sizeof(v348));
  __len[1] = v219;
  gdc::DebugTreeNode::addProperty((uint64_t)__p, (uint64_t)v342, (uint64_t)__len);
  v220 = *(unsigned int *)(v184 + 968);
  v339[23] = 16;
  strcpy(v339, "countersRetained");
  v345 = 0;
  v344 = 0;
  v346 = 1;
  v343 = 0;
  v342[1] = v220;
  gdc::DebugTreeNode::addProperty((uint64_t)__p, (uint64_t)v339, (uint64_t)v342);
  v221 = *(_QWORD *)(v184 + 1040);
  v222 = *(_QWORD *)(v184 + 1032);
  HIBYTE(v334) = 5;
  strcpy((char *)&v332, "items");
  v341 = 1;
  memset(&v340, 0, sizeof(v340));
  *(_QWORD *)&v339[8] = -858993459 * ((unint64_t)(v221 - v222) >> 2);
  gdc::DebugTreeNode::addProperty((uint64_t)__p, (uint64_t)&v332, (uint64_t)v339);
  v223 = (void **)*(unsigned int *)(v184 + 1104);
  HIBYTE(v327) = 4;
  strcpy((char *)&__dst, "pool");
  v337 = 0;
  v336 = 0;
  v338 = 1;
  v335 = 0;
  v333 = v223;
  gdc::DebugTreeNode::addProperty((uint64_t)__p, (uint64_t)&__dst, (uint64_t)&v332);
  v224 = *(unsigned int *)(v184 + 1144);
  *((_BYTE *)&v320.__r_.__value_.__s + 23) = 11;
  strcpy((char *)&v320, "keyToHandle");
  v330 = 0;
  v329 = 0;
  v331 = 1;
  v328 = 0;
  *((_QWORD *)&__dst + 1) = v224;
  gdc::DebugTreeNode::addProperty((uint64_t)__p, (uint64_t)&v320, (uint64_t)&__dst);
  v225 = *(unsigned int *)(v184 + 1184);
  *((_BYTE *)&v325.__r_.__value_.__s + 23) = 11;
  strcpy((char *)&v325, "handleToKey");
  v323 = 0;
  v322 = 0;
  v324 = 1;
  v321 = 0;
  v320.__r_.__value_.__l.__size_ = v225;
  gdc::DebugTreeNode::addProperty((uint64_t)__p, (uint64_t)&v325, (uint64_t)&v320);
  gdc::DebugTreeNode::addChildNode(&v350, (__int128 *)__p);
  v226 = *(_QWORD *)&__p[72];
  v3 = v258;
  if (*(_QWORD *)&__p[72])
  {
    v227 = *(_QWORD *)&__p[80];
    v228 = *(void **)&__p[72];
    if (*(_QWORD *)&__p[80] != *(_QWORD *)&__p[72])
    {
      do
      {
        v227 -= 80;
        std::__destroy_at[abi:nn180100]<gdc::DebugTreeProperty,0>(v227);
      }
      while (v227 != v226);
      v228 = *(void **)&__p[72];
    }
    *(_QWORD *)&__p[80] = v226;
    operator delete(v228);
  }
  std::vector<gdc::DebugTreeNode>::~vector[abi:nn180100]((void ***)&__p[48]);
  if ((__p[47] & 0x80000000) != 0)
    operator delete(*(void **)&__p[24]);
  v47 = v250;
  if ((__p[23] & 0x80000000) != 0)
    operator delete(*(void **)__p);
  gdc::DebugTreeNode::addChildNode(v250, (__int128 *)&v350);
  v229 = v354;
  if ((_QWORD)v354)
  {
    v230 = *((_QWORD *)&v354 + 1);
    v231 = (void *)v354;
    if (*((_QWORD *)&v354 + 1) != (_QWORD)v354)
    {
      do
      {
        v230 -= 80;
        std::__destroy_at[abi:nn180100]<gdc::DebugTreeProperty,0>(v230);
      }
      while (v230 != v229);
      v231 = (void *)v354;
    }
    *((_QWORD *)&v354 + 1) = v229;
    operator delete(v231);
  }
  std::vector<gdc::DebugTreeNode>::~vector[abi:nn180100]((void ***)&v352 + 1);
  if (SBYTE7(v352) < 0)
  {
    operator delete((void *)v351);
    if ((SHIBYTE(v350.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_367;
  }
  else if ((SHIBYTE(v350.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_367;
  }
  operator delete(v350.__r_.__value_.__l.__data_);
LABEL_367:
  v232 = *(_QWORD *)(v3 + 4312);
  __p[23] = 19;
  strcpy(__p, "LayoutReasonHistory");
  result = gdc::DebugTreeNode::createChildNode((uint64_t)v47, (__int128 *)__p);
  v257 = (uint64_t)result;
  if (v232 != *(_QWORD *)(v3 + 4320))
  {
    v234 = v258 + 1408;
    v235 = *MEMORY[0x1E0DE4F60];
    v236 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
    v256 = MEMORY[0x1E0DE4FE0] + 64;
    v254 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
    v251 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
    v252 = MEMORY[0x1E0DE4FB8] + 16;
    while (1)
    {
      v265[0] = v256;
      *(_QWORD *)__p = v236;
      *(_QWORD *)&__p[*(_QWORD *)(v236 - 24)] = v254;
      v238 = (std::ios_base *)&__p[*(_QWORD *)(*(_QWORD *)__p - 24)];
      std::ios_base::init(v238, &__p[8]);
      v238[1].__vftable = 0;
      v238[1].__fmtflags_ = -1;
      *(_QWORD *)__p = MEMORY[0x1E0DE4FE0] + 24;
      v265[0] = MEMORY[0x1E0DE4FE0] + 64;
      std::streambuf::basic_streambuf();
      *(_QWORD *)&__p[8] = v252;
      memset(&__p[72], 0, 32);
      v264 = 16;
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(__p, (uint64_t)"(", 1);
      v239 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v239, (uint64_t)",", 1);
      stringForLayoutReasonsMask(&v350, *(_QWORD *)(v234 + 24 * v232 + 16));
      if ((v350.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v240 = &v350;
      else
        v240 = (std::string *)v350.__r_.__value_.__r.__words[0];
      if ((v350.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v241 = HIBYTE(v350.__r_.__value_.__r.__words[2]);
      else
        v241 = v350.__r_.__value_.__l.__size_;
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v239, (uint64_t)v240, v241);
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v239, (uint64_t)")", 1);
      if (SHIBYTE(v350.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v350.__r_.__value_.__l.__data_);
      std::to_string(&v350, *(_QWORD *)(v234 + 24 * v232));
      if ((v264 & 0x10) != 0)
      {
        v244 = *(_QWORD *)&__p[96];
        v245 = (const void **)&__p[48];
        if (*(_QWORD *)&__p[96] < *(_QWORD *)&__p[56])
        {
          *(_QWORD *)&__p[96] = *(_QWORD *)&__p[56];
          v244 = *(_QWORD *)&__p[56];
          v245 = (const void **)&__p[48];
        }
      }
      else
      {
        if ((v264 & 8) == 0)
        {
          v242 = 0;
          HIBYTE(__len[2]) = 0;
          v243 = __len;
          goto LABEL_393;
        }
        v244 = *(_QWORD *)&__p[40];
        v245 = (const void **)&__p[24];
      }
      v246 = *v245;
      v242 = v244 - (_QWORD)*v245;
      if (v242 > 0x7FFFFFFFFFFFFFF7)
        abort();
      if (v242 >= 0x17)
        break;
      HIBYTE(__len[2]) = v244 - *(_BYTE *)v245;
      v243 = __len;
      if (v242)
        goto LABEL_392;
LABEL_393:
      v243[v242] = 0;
      v260 = 0uLL;
      v261 = 0;
      v262 = 4;
      v249 = SHIBYTE(__len[2]);
      if (SHIBYTE(__len[2]) < 0)
      {
        std::string::__assign_no_alias<true>(&v260, (void *)__len[0], __len[1]);
      }
      else
      {
        v260 = *(_OWORD *)__len;
        v261 = __len[2];
      }
      gdc::DebugTreeNode::addProperty(v257, (uint64_t)&v350, (uint64_t)v259);
      if (SHIBYTE(v261) < 0)
      {
        operator delete((void *)v260);
        if ((v249 & 0x80000000) == 0)
        {
LABEL_398:
          if (SHIBYTE(v350.__r_.__value_.__r.__words[2]) < 0)
            goto LABEL_403;
          goto LABEL_399;
        }
      }
      else if ((v249 & 0x80000000) == 0)
      {
        goto LABEL_398;
      }
      operator delete((void *)__len[0]);
      if (SHIBYTE(v350.__r_.__value_.__r.__words[2]) < 0)
LABEL_403:
        operator delete(v350.__r_.__value_.__l.__data_);
LABEL_399:
      *(_QWORD *)__p = v235;
      *(_QWORD *)&__p[*(_QWORD *)(v235 - 24)] = v251;
      *(_QWORD *)&__p[8] = MEMORY[0x1E0DE4FB8] + 16;
      if ((__p[95] & 0x80000000) != 0)
        operator delete(*(void **)&__p[72]);
      v237 = ((v232 + 1) * (unsigned __int128)0xECF56BE69C8FDE3uLL) >> 64;
      v232 = v232 + 1 - 121 * ((v237 + ((v232 + 1 - v237) >> 1)) >> 6);
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      result = (char *)MEMORY[0x1A1AF4D64](v265);
      if (v232 == *(_QWORD *)(v258 + 4320))
        return result;
    }
    v247 = (v242 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v242 | 7) != 0x17)
      v247 = v242 | 7;
    v248 = v247 + 1;
    v243 = operator new(v247 + 1);
    __len[2] = v248 | 0x8000000000000000;
    __len[0] = (size_t)v243;
    __len[1] = v242;
LABEL_392:
    memmove(v243, v246, v242);
    goto LABEL_393;
  }
  return result;
}

void sub_19FAC33FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, gdc::DebugTreeNode *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  gdc::DebugTreeNode::~DebugTreeNode((gdc::DebugTreeNode *)&a31);
  gdc::DebugTreeNode::~DebugTreeNode(a11);
  _Unwind_Resume(a1);
}

uint64_t md::MapEngine::mapType(md::MapEngine *this, md::MapEngine *a2)
{
  if (this != a2)
  {
    while (*(_BYTE *)this != 20)
    {
      this = (md::MapEngine *)((char *)this + 16);
      if (this == a2)
        return 0;
    }
  }
  if (this == a2)
    return 0;
  else
    return *((unsigned int *)this + 2);
}

uint64_t md::MapEngineDeleter::operator()(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t result;
  _BYTE v5[40];
  int v6;
  uint8_t buf[4];
  uint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  if (GEOGetVectorKitVKDefaultLog_onceToken != -1)
    dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_4_11772);
  v2 = (id)GEOGetVectorKitVKDefaultLog_log;
  if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 134217984;
    v8 = a1;
    _os_log_impl(&dword_19F029000, v2, OS_LOG_TYPE_INFO, "[MapEngine:%p] destruction requested", buf, 0xCu);
  }

  atomic_store(1u, (unsigned __int8 *)(a1 + 1));
  v3 = *(_QWORD *)(a1 + 4528);
  v6 = 1;
  result = (*(uint64_t (**)(uint64_t, _BYTE *))(*(_QWORD *)v3 + 16))(v3, v5);
  if (v6 != -1)
    return ((uint64_t (*)(uint8_t *, _BYTE *))off_1E42F3138[v6])(buf, v5);
  return result;
}

void sub_19FAC37E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, int a15, char a16)
{
  if (a14 != -1)
  {
    ((void (*)(char *, uint64_t *))off_1E42F3138[a14])(&a16, &a9);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

__CFString *VKStringForAnnotationTrackingBehavior(unsigned __int8 *a1)
{
  __CFString *v2;

  if (a1)
  {
    objc_msgSend(MEMORY[0x1E0CB37A0], "stringWithString:", CFSTR("{\n"));
    v2 = (__CFString *)objc_claimAutoreleasedReturnValue();
    -[__CFString appendFormat:](v2, "appendFormat:", CFSTR("\tshouldZoomToFit: %i\n"), *a1);
    -[__CFString appendFormat:](v2, "appendFormat:", CFSTR("\tidealCenterCoordinateDistance: %.1f\n"), *((_QWORD *)a1 + 1));
    -[__CFString appendFormat:](v2, "appendFormat:", CFSTR("\tshouldPreserveUserSpecifiedZoomLevel: %i\n"), a1[16]);
    if (a1[17])
      -[__CFString appendFormat:](v2, "appendFormat:", CFSTR("\tresetAfterTracking: %i\n"), 1);
    -[__CFString appendString:](v2, "appendString:", CFSTR("}"));
  }
  else
  {
    v2 = CFSTR("<nil>");
  }
  return v2;
}

void sub_19FAC38EC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void md::FontOptions::debugString(_QWORD *a1, __int128 *a2, grl::FontManager *a3)
{
  id v4;
  const char *v5;
  unsigned __int8 v6;
  uint64_t v7;
  size_t v8;
  size_t v9;
  unsigned __int8 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t (**v16)();
  CFTypeRef cf;

  grl::FontManager::fontForKey(a3, a2, &v16, 0.0);
  if (cf)
  {
    objc_msgSend((id)cf, "description");
    v4 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
    v5 = (const char *)objc_msgSend(v4, "UTF8String");
    {
      v14 = operator new();
      mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v14, "VectorKitLabels", 0x5ED09DD50000000FLL);
    }
    v7 = mdm::Allocator::instance(void)::alloc;
    a1[3] = mdm::Allocator::instance(void)::alloc;
    v8 = strlen(v5);
    if (v8 >= 0x7FFFFFFFFFFFFFF8)
      abort();
    v9 = v8;
    if (v8 >= 0x17)
    {
      v11 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v8 | 7) != 0x17)
        v11 = v8 | 7;
      v12 = v11 + 1;
      v13 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v7 + 16))(v7, v11 + 1, 1);
      a1[1] = v9;
      a1[2] = v12 | 0x8000000000000000;
      *a1 = v13;
      a1 = (_QWORD *)v13;
    }
    else
    {
      *((_BYTE *)a1 + 23) = v8;
      if (!v8)
        goto LABEL_13;
    }
    memmove(a1, v5, v9);
LABEL_13:
    *((_BYTE *)a1 + v9) = 0;

    goto LABEL_14;
  }
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  {
    v15 = operator new();
    mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v15, "VectorKitLabels", 0x5ED09DD50000000FLL);
  }
  a1[3] = mdm::Allocator::instance(void)::alloc;
LABEL_14:
  v16 = &off_1E42B4950;
  if (cf)
    CFRelease(cf);
}

void sub_19FAC3AF4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, CFTypeRef cf)
{
  if (cf)
    CFRelease(cf);
  _Unwind_Resume(exception_object);
}

uint64_t getTopDepthPipelineSetupForGroup(uint64_t a1, void *a2, uint64_t a3)
{
  id v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  _DWORD *v19;
  int v20;
  int v21;
  int v22;
  unint64_t v23;
  uint64_t v25;
  uint64_t v26;

  v5 = a2;
  v6 = *(uint64_t **)a3;
  v7 = *(uint64_t **)(a1 + 64);
  v7[1] = 0;
  v8 = *v6;
  *v7 = *v6;
  v9 = *(_QWORD **)(a1 + 160);
  v10 = v6[1];
  if (v10)
  {
    v11 = (unint64_t *)(v10 + 8);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  v13 = (std::__shared_weak_count *)v9[1];
  *v9 = v8;
  v9[1] = v10;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  v16 = *(_QWORD *)(*(_QWORD *)(a1 + 64) + 16);
  v17 = *(_QWORD *)(v16 + 8);
  if (v17)
    v18 = *(_QWORD *)(v16 + 72);
  else
    v18 = 0;
  v26 = *(_QWORD *)(*(_QWORD *)(a1 + 64) + 16);
  *(_QWORD *)v18 = *(_QWORD *)(a3 + 76);
  v19 = (_DWORD *)objc_msgSend(v5, "origin", 0);
  *(_DWORD *)(v18 + 16) = *v19;
  *(_DWORD *)(v18 + 20) = v19[1];
  *(_DWORD *)(v18 + 24) = v19[2];
  objc_msgSend(v5, "size");
  *(_DWORD *)(v18 + 32) = v20;
  *(_DWORD *)(v18 + 36) = v21;
  *(_DWORD *)(v18 + 40) = v22;
  if (v17)
  {
    if (v25 && *(_BYTE *)(v26 + 17) != 2)
      (*(void (**)(void))(*(_QWORD *)v25 + 64))();
    v23 = *(_QWORD *)(v26 + 64);
    if (v23 <= v17)
      v23 = v17;
    *(_QWORD *)(v26 + 56) = 0;
    *(_QWORD *)(v26 + 64) = v23;
  }

  return a1;
}

void sub_19FAC3CA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  void *v3;
  va_list va;

  va_start(va, a3);
  ggl::BufferMemory::~BufferMemory((ggl::BufferMemory *)va);

  _Unwind_Resume(a1);
}

uint64_t getExtrusionDepthPipelineSetupForGroup(uint64_t a1, void *a2, uint64_t a3)
{
  id v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  _DWORD *v19;
  int v20;
  int v21;
  int v22;
  unint64_t v23;
  uint64_t v25;
  uint64_t v26;

  v5 = a2;
  v6 = *(uint64_t **)a3;
  v7 = *(uint64_t **)(a1 + 64);
  v7[1] = 0;
  v8 = *v6;
  *v7 = *v6;
  v9 = *(_QWORD **)(a1 + 160);
  v10 = v6[1];
  if (v10)
  {
    v11 = (unint64_t *)(v10 + 8);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  v13 = (std::__shared_weak_count *)v9[1];
  *v9 = v8;
  v9[1] = v10;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  v16 = *(_QWORD *)(*(_QWORD *)(a1 + 64) + 16);
  v17 = *(_QWORD *)(v16 + 8);
  if (v17)
    v18 = *(_QWORD *)(v16 + 72);
  else
    v18 = 0;
  v26 = *(_QWORD *)(*(_QWORD *)(a1 + 64) + 16);
  *(_QWORD *)v18 = *(_QWORD *)(a3 + 76);
  v19 = (_DWORD *)objc_msgSend(v5, "origin", 0);
  *(_DWORD *)(v18 + 16) = *v19;
  *(_DWORD *)(v18 + 20) = v19[1];
  *(_DWORD *)(v18 + 24) = v19[2];
  objc_msgSend(v5, "size");
  *(_DWORD *)(v18 + 32) = v20;
  *(_DWORD *)(v18 + 36) = v21;
  *(_DWORD *)(v18 + 40) = v22;
  if (v17)
  {
    if (v25 && *(_BYTE *)(v26 + 17) != 2)
      (*(void (**)(void))(*(_QWORD *)v25 + 64))();
    v23 = *(_QWORD *)(v26 + 64);
    if (v23 <= v17)
      v23 = v17;
    *(_QWORD *)(v26 + 56) = 0;
    *(_QWORD *)(v26 + 64) = v23;
  }

  return a1;
}

void sub_19FAC3E40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  void *v3;
  va_list va;

  va_start(va, a3);
  ggl::BufferMemory::~BufferMemory((ggl::BufferMemory *)va);

  _Unwind_Resume(a1);
}

uint64_t getPointyRoofDepthPipelineSetupForGroup(uint64_t a1, void *a2, uint64_t a3)
{
  id v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  _DWORD *v19;
  int v20;
  int v21;
  int v22;
  unint64_t v23;
  uint64_t v25;
  uint64_t v26;

  v5 = a2;
  v6 = *(uint64_t **)a3;
  v7 = *(uint64_t **)(a1 + 64);
  v7[1] = 0;
  v8 = *v6;
  *v7 = *v6;
  v9 = *(_QWORD **)(a1 + 160);
  v10 = v6[1];
  if (v10)
  {
    v11 = (unint64_t *)(v10 + 8);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  v13 = (std::__shared_weak_count *)v9[1];
  *v9 = v8;
  v9[1] = v10;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  v16 = *(_QWORD *)(*(_QWORD *)(a1 + 64) + 16);
  v17 = *(_QWORD *)(v16 + 8);
  if (v17)
    v18 = *(_QWORD *)(v16 + 72);
  else
    v18 = 0;
  v26 = *(_QWORD *)(*(_QWORD *)(a1 + 64) + 16);
  *(_QWORD *)v18 = *(_QWORD *)(a3 + 76);
  v19 = (_DWORD *)objc_msgSend(v5, "origin", 0);
  *(_DWORD *)(v18 + 16) = *v19;
  *(_DWORD *)(v18 + 20) = v19[1];
  *(_DWORD *)(v18 + 24) = v19[2];
  objc_msgSend(v5, "size");
  *(_DWORD *)(v18 + 32) = v20;
  *(_DWORD *)(v18 + 36) = v21;
  *(_DWORD *)(v18 + 40) = v22;
  if (v17)
  {
    if (v25 && *(_BYTE *)(v26 + 17) != 2)
      (*(void (**)(void))(*(_QWORD *)v25 + 64))();
    v23 = *(_QWORD *)(v26 + 64);
    if (v23 <= v17)
      v23 = v17;
    *(_QWORD *)(v26 + 56) = 0;
    *(_QWORD *)(v26 + 64) = v23;
  }

  return a1;
}

void sub_19FAC3FDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  void *v3;
  va_list va;

  va_start(va, a3);
  ggl::BufferMemory::~BufferMemory((ggl::BufferMemory *)va);

  _Unwind_Resume(a1);
}

uint64_t getExtrusionPipelineSetupForGroup(uint64_t a1, void *a2, uint64_t a3, float a4)
{
  id v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _DWORD *v21;
  int v22;
  int v23;
  int v24;
  unint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  unint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  unint64_t v31;
  _QWORD *v32;
  unint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t *v38;
  unint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  uint64_t v44;
  uint64_t v45;

  v7 = a2;
  v8 = *(uint64_t **)a3;
  v9 = *(_QWORD *)(a1 + 64);
  *(_QWORD *)(v9 + 24) = 0;
  v10 = *v8;
  *(_QWORD *)(v9 + 16) = *v8;
  v11 = *(_QWORD *)(a1 + 160);
  v12 = v8[1];
  if (v12)
  {
    v13 = (unint64_t *)(v12 + 8);
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }
  v15 = *(std::__shared_weak_count **)(v11 + 24);
  *(_QWORD *)(v11 + 16) = v10;
  *(_QWORD *)(v11 + 24) = v12;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v17 = __ldaxr(p_shared_owners);
    while (__stlxr(v17 - 1, p_shared_owners));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  **(_QWORD **)(a1 + 96) = *(_QWORD *)(a3 + 32);
  v18 = *(_QWORD *)(*(_QWORD *)(a1 + 64) + 32);
  v19 = *(_QWORD *)(v18 + 8);
  if (v19)
    v20 = *(_QWORD *)(v18 + 72);
  else
    v20 = 0;
  v45 = *(_QWORD *)(*(_QWORD *)(a1 + 64) + 32);
  *(_QWORD *)v20 = *(_QWORD *)(a3 + 76);
  v21 = (_DWORD *)objc_msgSend(v7, "origin", 0);
  *(_DWORD *)(v20 + 16) = *v21;
  *(_DWORD *)(v20 + 20) = v21[1];
  *(_DWORD *)(v20 + 24) = v21[2];
  objc_msgSend(v7, "size");
  *(_DWORD *)(v20 + 32) = v22;
  *(_DWORD *)(v20 + 36) = v23;
  *(_DWORD *)(v20 + 40) = v24;
  if (v19)
  {
    if (v44 && *(_BYTE *)(v45 + 17) != 2)
      (*(void (**)(void))(*(_QWORD *)v44 + 64))();
    v25 = *(_QWORD *)(v45 + 64);
    if (v25 <= v19)
      v25 = v19;
    *(_QWORD *)(v45 + 56) = 0;
    *(_QWORD *)(v45 + 64) = v25;
  }
  v26 = *(_QWORD **)(a1 + 64);
  v27 = (_QWORD *)v26[6];
  v28 = v27[1];
  if (v28)
    v29 = v27[9];
  else
    v29 = 0;
  *(_DWORD *)(v29 + 368) = *(_DWORD *)(a3 + 56);
  *(_DWORD *)(v29 + 372) = *(_DWORD *)(a3 + 60);
  *(_DWORD *)(v29 + 376) = *(_DWORD *)(a3 + 64);
  *(float *)(v29 + 356) = a4;
  if (v29 && v28)
  {
    if (v27[8] > v28)
      v28 = v27[8];
    v27[7] = 0;
    v27[8] = v28;
  }
  v30 = *(_QWORD **)(*(_QWORD *)(a3 + 40) + 8);
  v31 = v30[1];
  if ((v31 & (v31 - 1)) != 0)
  {
    v33 = 0x41E8D6E445F4145;
    if (v31 <= 0x41E8D6E445F4145)
      v33 = 0x41E8D6E445F4145 % v31;
    v32 = *(_QWORD **)(*v30 + 8 * v33);
    do
    {
      do
        v32 = (_QWORD *)*v32;
      while (v32[1] != 0x41E8D6E445F4145);
    }
    while (v32[2] != 0x41E8D6E445F4145);
  }
  else
  {
    v32 = *(_QWORD **)(*v30 + 8 * ((v31 - 1) & 0x41E8D6E445F4145));
    do
    {
      do
        v32 = (_QWORD *)*v32;
      while (v32[1] != 0x41E8D6E445F4145);
    }
    while (v32[2] != 0x41E8D6E445F4145);
  }
  v34 = *(uint64_t **)(v32[5] + 32);
  v26[11] = 0;
  v35 = *v34;
  v26[10] = *v34;
  v36 = *(_QWORD *)(a1 + 160);
  v37 = v34[1];
  if (v37)
  {
    v38 = (unint64_t *)(v37 + 8);
    do
      v39 = __ldxr(v38);
    while (__stxr(v39 + 1, v38));
  }
  v40 = *(std::__shared_weak_count **)(v36 + 88);
  *(_QWORD *)(v36 + 80) = v35;
  *(_QWORD *)(v36 + 88) = v37;
  if (v40)
  {
    v41 = (unint64_t *)&v40->__shared_owners_;
    do
      v42 = __ldaxr(v41);
    while (__stlxr(v42 - 1, v41));
    if (!v42)
    {
      ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
      std::__shared_weak_count::__release_weak(v40);
    }
  }

  return a1;
}

void sub_19FAC42E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  void *v3;
  va_list va;

  va_start(va, a3);
  ggl::BufferMemory::~BufferMemory((ggl::BufferMemory *)va);

  _Unwind_Resume(a1);
}

uint64_t getFoggedExtrusionPipelineSetupForGroup(uint64_t a1, void *a2, uint64_t a3, float a4)
{
  id v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _DWORD *v21;
  int v22;
  int v23;
  int v24;
  unint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  unint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  unint64_t v31;
  _QWORD *v32;
  unint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t *v38;
  unint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  uint64_t *v43;
  uint64_t *v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  unint64_t *v48;
  unint64_t v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  uint64_t v54;
  uint64_t v55;

  v7 = a2;
  v8 = *(uint64_t **)a3;
  v9 = *(_QWORD *)(a1 + 64);
  *(_QWORD *)(v9 + 24) = 0;
  v10 = *v8;
  *(_QWORD *)(v9 + 16) = *v8;
  v11 = *(_QWORD *)(a1 + 160);
  v12 = v8[1];
  if (v12)
  {
    v13 = (unint64_t *)(v12 + 8);
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }
  v15 = *(std::__shared_weak_count **)(v11 + 24);
  *(_QWORD *)(v11 + 16) = v10;
  *(_QWORD *)(v11 + 24) = v12;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v17 = __ldaxr(p_shared_owners);
    while (__stlxr(v17 - 1, p_shared_owners));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  **(_QWORD **)(a1 + 96) = *(_QWORD *)(a3 + 32);
  v18 = *(_QWORD *)(*(_QWORD *)(a1 + 64) + 32);
  v19 = *(_QWORD *)(v18 + 8);
  if (v19)
    v20 = *(_QWORD *)(v18 + 72);
  else
    v20 = 0;
  v55 = *(_QWORD *)(*(_QWORD *)(a1 + 64) + 32);
  *(_QWORD *)v20 = *(_QWORD *)(a3 + 76);
  v21 = (_DWORD *)objc_msgSend(v7, "origin", 0);
  *(_DWORD *)(v20 + 16) = *v21;
  *(_DWORD *)(v20 + 20) = v21[1];
  *(_DWORD *)(v20 + 24) = v21[2];
  objc_msgSend(v7, "size");
  *(_DWORD *)(v20 + 32) = v22;
  *(_DWORD *)(v20 + 36) = v23;
  *(_DWORD *)(v20 + 40) = v24;
  if (v19)
  {
    if (v54 && *(_BYTE *)(v55 + 17) != 2)
      (*(void (**)(void))(*(_QWORD *)v54 + 64))();
    v25 = *(_QWORD *)(v55 + 64);
    if (v25 <= v19)
      v25 = v19;
    *(_QWORD *)(v55 + 56) = 0;
    *(_QWORD *)(v55 + 64) = v25;
  }
  v26 = *(_QWORD **)(a1 + 64);
  v27 = (_QWORD *)v26[6];
  v28 = v27[1];
  if (v28)
    v29 = v27[9];
  else
    v29 = 0;
  *(_DWORD *)(v29 + 368) = *(_DWORD *)(a3 + 56);
  *(_DWORD *)(v29 + 372) = *(_DWORD *)(a3 + 60);
  *(_DWORD *)(v29 + 376) = *(_DWORD *)(a3 + 64);
  *(float *)(v29 + 356) = a4;
  if (v29 && v28)
  {
    if (v27[8] > v28)
      v28 = v27[8];
    v27[7] = 0;
    v27[8] = v28;
  }
  v30 = *(_QWORD **)(*(_QWORD *)(a3 + 40) + 8);
  v31 = v30[1];
  if ((v31 & (v31 - 1)) != 0)
  {
    v33 = 0x41E8D6E445F4145;
    if (v31 <= 0x41E8D6E445F4145)
      v33 = 0x41E8D6E445F4145 % v31;
    v32 = *(_QWORD **)(*v30 + 8 * v33);
    do
    {
      do
        v32 = (_QWORD *)*v32;
      while (v32[1] != 0x41E8D6E445F4145);
    }
    while (v32[2] != 0x41E8D6E445F4145);
  }
  else
  {
    v32 = *(_QWORD **)(*v30 + 8 * ((v31 - 1) & 0x41E8D6E445F4145));
    do
    {
      do
        v32 = (_QWORD *)*v32;
      while (v32[1] != 0x41E8D6E445F4145);
    }
    while (v32[2] != 0x41E8D6E445F4145);
  }
  v34 = *(uint64_t **)(v32[5] + 32);
  v26[11] = 0;
  v35 = *v34;
  v26[10] = *v34;
  v36 = *(_QWORD *)(a1 + 160);
  v37 = v34[1];
  if (v37)
  {
    v38 = (unint64_t *)(v37 + 8);
    do
      v39 = __ldxr(v38);
    while (__stxr(v39 + 1, v38));
  }
  v40 = *(std::__shared_weak_count **)(v36 + 88);
  *(_QWORD *)(v36 + 80) = v35;
  *(_QWORD *)(v36 + 88) = v37;
  if (v40)
  {
    v41 = (unint64_t *)&v40->__shared_owners_;
    do
      v42 = __ldaxr(v41);
    while (__stlxr(v42 - 1, v41));
    if (!v42)
    {
      ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
      std::__shared_weak_count::__release_weak(v40);
    }
  }
  v43 = *(uint64_t **)(a3 + 8);
  v44 = *(uint64_t **)(a1 + 64);
  v44[1] = 0;
  v45 = *v43;
  *v44 = *v43;
  v46 = *(_QWORD **)(a1 + 160);
  v47 = v43[1];
  if (v47)
  {
    v48 = (unint64_t *)(v47 + 8);
    do
      v49 = __ldxr(v48);
    while (__stxr(v49 + 1, v48));
  }
  v50 = (std::__shared_weak_count *)v46[1];
  *v46 = v45;
  v46[1] = v47;
  if (v50)
  {
    v51 = (unint64_t *)&v50->__shared_owners_;
    do
      v52 = __ldaxr(v51);
    while (__stlxr(v52 - 1, v51));
    if (!v52)
    {
      ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
      std::__shared_weak_count::__release_weak(v50);
    }
  }

  return a1;
}

void sub_19FAC4664(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  void *v3;
  va_list va;

  va_start(va, a3);
  ggl::BufferMemory::~BufferMemory((ggl::BufferMemory *)va);

  _Unwind_Resume(a1);
}

void submitRenderItems(void *a1, uint64_t a2, uint64_t *a3, _QWORD *a4)
{
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  unsigned __int8 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *v23;
  __int128 v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  _QWORD *v30;
  __int128 v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t **v35;
  uint64_t *v36;
  unsigned __int8 v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  _QWORD *v47;
  __int128 v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  _QWORD *v54;
  __int128 v55;
  int v56;
  uint64_t v57;
  uint64_t **v58;
  uint64_t *v59;
  unsigned __int8 v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t *v64;
  _QWORD *v65;
  uint64_t v66;
  uint64_t v67;
  _QWORD *v68;
  uint64_t v69;
  _QWORD *v70;
  __int128 v71;
  int v72;
  uint64_t v73;
  uint64_t v74;
  _QWORD *v75;
  uint64_t v76;
  _QWORD *v77;
  __int128 v78;
  int v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t **v82;
  uint64_t *v83;
  unsigned __int8 v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t *v88;
  _QWORD *v89;
  uint64_t v90;
  uint64_t v91;
  _QWORD *v92;
  uint64_t v93;
  _QWORD *v94;
  __int128 v95;
  int v96;
  uint64_t v97;
  uint64_t v98;
  _QWORD *v99;
  uint64_t v100;
  _QWORD *v101;
  __int128 v102;
  int v103;
  uint64_t v104;
  int64x2_t v105;
  int64x2_t v106;
  int64x2_t v107;
  uint64_t *v108;
  uint64_t *v109;
  uint64_t *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  int64x2_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t *v119;
  uint64_t v120;
  uint64_t v121;
  void *v122;
  _BYTE v123[24];
  _BYTE *v124;
  _BYTE v125[24];
  _BYTE *v126;
  _BYTE v127[24];
  _BYTE *v128;
  _BYTE v129[24];
  _BYTE *v130;
  _BYTE v131[36];
  _BYTE v132[36];
  __int128 v133;
  __int128 v134;
  int v135;
  uint64_t v136;

  v136 = *MEMORY[0x1E0C80C00];
  v7 = a1;
  v8 = a3[10];
  v9 = 688;
  if (!*((_BYTE *)a3 + 88))
    v9 = 672;
  v10 = 656;
  if (!*((_BYTE *)a3 + 88))
    v10 = 640;
  v118 = *(_QWORD *)(a2 + v10);
  v120 = *(_QWORD *)(a2 + v9);
  memset(&v132[4], 0, 32);
  memset(&v131[4], 0, 32);
  v115 = *a3;
  v11 = a3[1];
  if (!v11)
    v11 = a3[2];
  v111 = v11;
  v122 = v7;
  v12 = objc_msgSend(v7, "fillMeshes");
  v13 = *(uint64_t **)v12;
  v108 = *(uint64_t **)(v12 + 8);
  if (*(uint64_t **)v12 != v108)
  {
    v14 = 0;
    v105 = vdupq_n_s64(1uLL);
    while (1)
    {
      v15 = *((unsigned int *)a3 + 18);
      v16 = a4[3];
      if (!v16)
        goto LABEL_12;
      if ((_QWORD *)v16 != a4)
        break;
      v130 = v129;
      (*(void (**)(_QWORD *, _BYTE *))(*a4 + 24))(a4, v129);
LABEL_14:
      v17 = (uint64_t *)objc_msgSend(v122, "commitRangesToFillRenderItemBatcher:forMeshAtIndex:cullingMask:featureIdPredicate:", a2 + 784, v14, v15, v129, *(_OWORD *)&v105);
      v18 = v130;
      if (v130 == v129)
      {
        v18 = v129;
        v19 = 4;
        goto LABEL_18;
      }
      if (v130)
      {
        v19 = 5;
LABEL_18:
        (*(void (**)(void))(*v18 + 8 * v19))();
      }
      v20 = *v13;
      v133 = *(_OWORD *)v132;
      v134 = *(_OWORD *)&v132[16];
      v135 = *(_DWORD *)&v132[32];
      v21 = *(_QWORD **)(a2 + 872);
      v22 = v21[1];
      if (v22 == *(_QWORD *)(a2 + 880))
      {
        v21 = (_QWORD *)*v21;
        if (!v21)
        {
          v21 = malloc_type_malloc(120 * v22 + 16, 0xB644C221uLL);
          *v21 = 0;
          v21[1] = 0;
          **(_QWORD **)(a2 + 872) = v21;
        }
        *(_QWORD *)(a2 + 872) = v21;
        v22 = v21[1];
      }
      v23 = &v21[15 * v22];
      v21[1] = v22 + 1;
      v23[2] = &off_1E42B59B0;
      v23 += 2;
      v23[2] = "";
      v23[3] = v120;
      v23[5] = 0;
      v23[6] = 0;
      v23[4] = v115;
      *((_DWORD *)v23 + 14) = 1065353216;
      v24 = v134;
      v25 = v135;
      *(_OWORD *)((char *)v23 + 60) = v133;
      *((_DWORD *)v23 + 23) = v25;
      *(_OWORD *)((char *)v23 + 76) = v24;
      *((int64x2_t *)v23 + 6) = v105;
      v23[14] = 0;
      v23[8] = v20;
      v26 = *v17;
      v23[11] = *v17;
      v23[12] = (v17[1] - v26) >> 4;
      ggl::CommandBuffer::pushRenderItem(v8, (ggl::RenderItem *)v23);
      v27 = *v13;
      v133 = *(_OWORD *)v131;
      v134 = *(_OWORD *)&v131[16];
      v135 = *(_DWORD *)&v131[32];
      v28 = *(_QWORD **)(a2 + 872);
      v29 = v28[1];
      if (v29 == *(_QWORD *)(a2 + 880))
      {
        v28 = (_QWORD *)*v28;
        if (!v28)
        {
          v28 = malloc_type_malloc(120 * v29 + 16, 0xB644C221uLL);
          *v28 = 0;
          v28[1] = 0;
          **(_QWORD **)(a2 + 872) = v28;
        }
        *(_QWORD *)(a2 + 872) = v28;
        v29 = v28[1];
      }
      v30 = &v28[15 * v29];
      v28[1] = v29 + 1;
      v30[2] = &off_1E42B59B0;
      v30 += 2;
      v30[2] = "";
      v30[3] = v118;
      v30[5] = 0;
      v30[6] = 0;
      v30[4] = v111;
      *((_DWORD *)v30 + 14) = 1065353216;
      v31 = v134;
      v32 = v135;
      *(_OWORD *)((char *)v30 + 60) = v133;
      *((_DWORD *)v30 + 23) = v32;
      *(_OWORD *)((char *)v30 + 76) = v31;
      *((int64x2_t *)v30 + 6) = vdupq_n_s64(1uLL);
      v30[14] = 0;
      v30[8] = v27;
      v33 = *v17;
      v30[11] = *v17;
      v30[12] = (v17[1] - v33) >> 4;
      v30[6] = *((unsigned int *)a3 + 19) + (unint64_t)v14;
      ggl::CommandBuffer::pushRenderItem(v8, (ggl::RenderItem *)v30);
      ++v14;
      v13 += 2;
      if (v13 == v108)
        goto LABEL_28;
    }
    v16 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v16 + 16))(v16);
LABEL_12:
    v130 = (_BYTE *)v16;
    goto LABEL_14;
  }
LABEL_28:
  v116 = a3[3];
  v34 = a3[4];
  if (!v34)
    v34 = a3[5];
  v112 = v34;
  v35 = (uint64_t **)objc_msgSend(v122, "extrusionFillMeshVendor");
  v36 = *v35;
  v109 = v35[1];
  if (*(_QWORD *)(**(_QWORD **)(**v35 + 64) + 48) != *(_QWORD *)(**(_QWORD **)(**v35 + 64) + 40) && v36 != v35[1])
  {
    v38 = 0;
    v106 = vdupq_n_s64(1uLL);
    while (1)
    {
      v39 = *((unsigned int *)a3 + 18);
      v40 = a4[3];
      if (!v40)
        goto LABEL_38;
      if ((_QWORD *)v40 != a4)
        break;
      v128 = v127;
      (*(void (**)(_QWORD *, _BYTE *))(*a4 + 24))(a4, v127);
LABEL_40:
      v41 = (uint64_t *)objc_msgSend(v122, "commitRangesToExtrusionFillRenderItemBatcher:forMeshAtIndex:cullingMask:featureIdPredicate:", a2 + 784, v38, v39, v127, *(_OWORD *)&v106);
      v42 = v128;
      if (v128 == v127)
      {
        v42 = v127;
        v43 = 4;
        goto LABEL_44;
      }
      if (v128)
      {
        v43 = 5;
LABEL_44:
        (*(void (**)(void))(*v42 + 8 * v43))();
      }
      v44 = *v36;
      v133 = *(_OWORD *)v132;
      v134 = *(_OWORD *)&v132[16];
      v135 = *(_DWORD *)&v132[32];
      v45 = *(_QWORD **)(a2 + 872);
      v46 = v45[1];
      if (v46 == *(_QWORD *)(a2 + 880))
      {
        v45 = (_QWORD *)*v45;
        if (!v45)
        {
          v45 = malloc_type_malloc(120 * v46 + 16, 0xB644C221uLL);
          *v45 = 0;
          v45[1] = 0;
          **(_QWORD **)(a2 + 872) = v45;
        }
        *(_QWORD *)(a2 + 872) = v45;
        v46 = v45[1];
      }
      v47 = &v45[15 * v46];
      v45[1] = v46 + 1;
      v47[2] = &off_1E42B59B0;
      v47 += 2;
      v47[2] = "";
      v47[3] = v120;
      v47[5] = 0;
      v47[6] = 0;
      v47[4] = v116;
      *((_DWORD *)v47 + 14) = 1065353216;
      v48 = v134;
      v49 = v135;
      *(_OWORD *)((char *)v47 + 60) = v133;
      *((_DWORD *)v47 + 23) = v49;
      *(_OWORD *)((char *)v47 + 76) = v48;
      *((int64x2_t *)v47 + 6) = v106;
      v47[14] = 0;
      v47[8] = v44;
      v50 = *v41;
      v47[11] = *v41;
      v47[12] = (v41[1] - v50) >> 4;
      ggl::CommandBuffer::pushRenderItem(v8, (ggl::RenderItem *)v47);
      v51 = *v36;
      v133 = *(_OWORD *)v131;
      v134 = *(_OWORD *)&v131[16];
      v135 = *(_DWORD *)&v131[32];
      v52 = *(_QWORD **)(a2 + 872);
      v53 = v52[1];
      if (v53 == *(_QWORD *)(a2 + 880))
      {
        v52 = (_QWORD *)*v52;
        if (!v52)
        {
          v52 = malloc_type_malloc(120 * v53 + 16, 0xB644C221uLL);
          *v52 = 0;
          v52[1] = 0;
          **(_QWORD **)(a2 + 872) = v52;
        }
        *(_QWORD *)(a2 + 872) = v52;
        v53 = v52[1];
      }
      v54 = &v52[15 * v53];
      v52[1] = v53 + 1;
      v54[2] = &off_1E42B59B0;
      v54 += 2;
      v54[2] = "";
      v54[3] = v118;
      v54[5] = 0;
      v54[6] = 0;
      v54[4] = v112;
      *((_DWORD *)v54 + 14) = 1065353216;
      v55 = v134;
      v56 = v135;
      *(_OWORD *)((char *)v54 + 60) = v133;
      *((_DWORD *)v54 + 23) = v56;
      *(_OWORD *)((char *)v54 + 76) = v55;
      *((int64x2_t *)v54 + 6) = vdupq_n_s64(1uLL);
      v54[14] = 0;
      v54[8] = v51;
      v57 = *v41;
      v54[11] = *v41;
      v54[12] = (v41[1] - v57) >> 4;
      v54[6] = v38 + 2 * *((unsigned int *)a3 + 19);
      ggl::CommandBuffer::pushRenderItem(v8, (ggl::RenderItem *)v54);
      ++v38;
      if (++v36 == v109)
        goto LABEL_54;
    }
    v40 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v40 + 16))(v40);
LABEL_38:
    v128 = (_BYTE *)v40;
    goto LABEL_40;
  }
LABEL_54:
  v117 = a3[6];
  v113 = a3[7];
  v58 = (uint64_t **)objc_msgSend(v122, "pointyRoofFillMeshVendor");
  v59 = *v58;
  v110 = v58[1];
  if (*(_QWORD *)(**(_QWORD **)(**v58 + 64) + 48) != *(_QWORD *)(**(_QWORD **)(**v58 + 64) + 40) && v59 != v58[1])
  {
    v61 = 0;
    v107 = vdupq_n_s64(1uLL);
    while (1)
    {
      v62 = *((unsigned int *)a3 + 18);
      v63 = a4[3];
      if (!v63)
        goto LABEL_62;
      if ((_QWORD *)v63 != a4)
        break;
      v126 = v125;
      (*(void (**)(_QWORD *, _BYTE *))(*a4 + 24))(a4, v125);
LABEL_64:
      v64 = (uint64_t *)objc_msgSend(v122, "commitRangesToPointyRoofFillRenderItemBatcher:forMeshAtIndex:cullingMask:featureIdPredicate:", a2 + 784, v61, v62, v125, *(_OWORD *)&v107);
      v65 = v126;
      if (v126 == v125)
      {
        v65 = v125;
        v66 = 4;
        goto LABEL_68;
      }
      if (v126)
      {
        v66 = 5;
LABEL_68:
        (*(void (**)(void))(*v65 + 8 * v66))();
      }
      v67 = *v59;
      v133 = *(_OWORD *)v132;
      v134 = *(_OWORD *)&v132[16];
      v135 = *(_DWORD *)&v132[32];
      v68 = *(_QWORD **)(a2 + 872);
      v69 = v68[1];
      if (v69 == *(_QWORD *)(a2 + 880))
      {
        v68 = (_QWORD *)*v68;
        if (!v68)
        {
          v68 = malloc_type_malloc(120 * v69 + 16, 0xB644C221uLL);
          *v68 = 0;
          v68[1] = 0;
          **(_QWORD **)(a2 + 872) = v68;
        }
        *(_QWORD *)(a2 + 872) = v68;
        v69 = v68[1];
      }
      v70 = &v68[15 * v69];
      v68[1] = v69 + 1;
      v70[2] = &off_1E42B59B0;
      v70 += 2;
      v70[2] = "";
      v70[3] = v120;
      v70[5] = 0;
      v70[6] = 0;
      v70[4] = v117;
      *((_DWORD *)v70 + 14) = 1065353216;
      v71 = v134;
      v72 = v135;
      *(_OWORD *)((char *)v70 + 60) = v133;
      *((_DWORD *)v70 + 23) = v72;
      *(_OWORD *)((char *)v70 + 76) = v71;
      *((int64x2_t *)v70 + 6) = v107;
      v70[14] = 0;
      v70[8] = v67;
      v73 = *v64;
      v70[11] = *v64;
      v70[12] = (v64[1] - v73) >> 4;
      ggl::CommandBuffer::pushRenderItem(v8, (ggl::RenderItem *)v70);
      v74 = *v59;
      v133 = *(_OWORD *)v131;
      v134 = *(_OWORD *)&v131[16];
      v135 = *(_DWORD *)&v131[32];
      v75 = *(_QWORD **)(a2 + 872);
      v76 = v75[1];
      if (v76 == *(_QWORD *)(a2 + 880))
      {
        v75 = (_QWORD *)*v75;
        if (!v75)
        {
          v75 = malloc_type_malloc(120 * v76 + 16, 0xB644C221uLL);
          *v75 = 0;
          v75[1] = 0;
          **(_QWORD **)(a2 + 872) = v75;
        }
        *(_QWORD *)(a2 + 872) = v75;
        v76 = v75[1];
      }
      v77 = &v75[15 * v76];
      v75[1] = v76 + 1;
      v77[2] = &off_1E42B59B0;
      v77 += 2;
      v77[2] = "";
      v77[3] = v118;
      v77[5] = 0;
      v77[6] = 0;
      v77[4] = v113;
      *((_DWORD *)v77 + 14) = 1065353216;
      v78 = v134;
      v79 = v135;
      *(_OWORD *)((char *)v77 + 60) = v133;
      *((_DWORD *)v77 + 23) = v79;
      *(_OWORD *)((char *)v77 + 76) = v78;
      *((int64x2_t *)v77 + 6) = vdupq_n_s64(1uLL);
      v77[14] = 0;
      v77[8] = v74;
      v80 = *v64;
      v77[11] = *v64;
      v77[12] = (v64[1] - v80) >> 4;
      v77[6] = 3 * *((unsigned int *)a3 + 19) + v61;
      ggl::CommandBuffer::pushRenderItem(v8, (ggl::RenderItem *)v77);
      ++v61;
      if (++v59 == v110)
        goto LABEL_78;
    }
    v63 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v63 + 16))(v63);
LABEL_62:
    v126 = (_BYTE *)v63;
    goto LABEL_64;
  }
LABEL_78:
  if (*(_BYTE *)(a2 + 769))
  {
    v121 = *(_QWORD *)(a2 + 704);
    v81 = a3[8];
    v82 = (uint64_t **)objc_msgSend(v122, "extrusionStrokeMeshVendor");
    v83 = *v82;
    v119 = v82[1];
    if (*(_QWORD *)(**(_QWORD **)(**v82 + 64) + 48) != *(_QWORD *)(**(_QWORD **)(**v82 + 64) + 40) && v83 != v82[1])
    {
      v85 = 0;
      v114 = vdupq_n_s64(1uLL);
      while (1)
      {
        v86 = *((unsigned int *)a3 + 18);
        v87 = a4[3];
        if (!v87)
          goto LABEL_87;
        if ((_QWORD *)v87 != a4)
          break;
        v124 = v123;
        (*(void (**)(_QWORD *, _BYTE *))(*a4 + 24))(a4, v123);
LABEL_89:
        v88 = (uint64_t *)objc_msgSend(v122, "commitRangesToExtrusionStrokeRenderItemBatcher:forMeshAtIndex:cullingMask:featureIdPredicate:", a2 + 784, v85, v86, v123);
        v89 = v124;
        if (v124 == v123)
        {
          v89 = v123;
          v90 = 4;
          goto LABEL_93;
        }
        if (v124)
        {
          v90 = 5;
LABEL_93:
          (*(void (**)(void))(*v89 + 8 * v90))();
        }
        v91 = *v83;
        v133 = *(_OWORD *)v132;
        v134 = *(_OWORD *)&v132[16];
        v135 = *(_DWORD *)&v132[32];
        v92 = *(_QWORD **)(a2 + 872);
        v93 = v92[1];
        if (v93 == *(_QWORD *)(a2 + 880))
        {
          v92 = (_QWORD *)*v92;
          if (!v92)
          {
            v92 = malloc_type_malloc(120 * v93 + 16, 0xB644C221uLL);
            *v92 = 0;
            v92[1] = 0;
            **(_QWORD **)(a2 + 872) = v92;
          }
          *(_QWORD *)(a2 + 872) = v92;
          v93 = v92[1];
        }
        v94 = &v92[15 * v93];
        v92[1] = v93 + 1;
        v94[2] = &off_1E42B59B0;
        v94 += 2;
        v94[2] = "";
        v94[3] = v121;
        v94[5] = 0;
        v94[6] = 0;
        v94[4] = v81;
        *((_DWORD *)v94 + 14) = 1065353216;
        v95 = v134;
        v96 = v135;
        *(_OWORD *)((char *)v94 + 60) = v133;
        *((_DWORD *)v94 + 23) = v96;
        *(_OWORD *)((char *)v94 + 76) = v95;
        *((int64x2_t *)v94 + 6) = v114;
        v94[14] = 0;
        v94[8] = v91;
        v97 = *v88;
        v94[11] = *v88;
        v94[12] = (v88[1] - v97) >> 4;
        ggl::CommandBuffer::pushRenderItem(v8, (ggl::RenderItem *)v94);
        v98 = *v83;
        v133 = *(_OWORD *)v131;
        v134 = *(_OWORD *)&v131[16];
        v135 = *(_DWORD *)&v131[32];
        v99 = *(_QWORD **)(a2 + 872);
        v100 = v99[1];
        if (v100 == *(_QWORD *)(a2 + 880))
        {
          v99 = (_QWORD *)*v99;
          if (!v99)
          {
            v99 = malloc_type_malloc(120 * v100 + 16, 0xB644C221uLL);
            *v99 = 0;
            v99[1] = 0;
            **(_QWORD **)(a2 + 872) = v99;
          }
          *(_QWORD *)(a2 + 872) = v99;
          v100 = v99[1];
        }
        v101 = &v99[15 * v100];
        v99[1] = v100 + 1;
        v101[2] = &off_1E42B59B0;
        v101 += 2;
        v101[2] = "";
        v101[3] = v121;
        v101[5] = 0;
        v101[6] = 0;
        v101[4] = v81;
        *((_DWORD *)v101 + 14) = 1065353216;
        v102 = v134;
        v103 = v135;
        *(_OWORD *)((char *)v101 + 60) = v133;
        *((_DWORD *)v101 + 23) = v103;
        *(_OWORD *)((char *)v101 + 76) = v102;
        *((int64x2_t *)v101 + 6) = vdupq_n_s64(1uLL);
        v101[14] = 0;
        v101[8] = v98;
        v104 = *v88;
        v101[11] = *v88;
        v101[12] = (v88[1] - v104) >> 4;
        v101[6] = v85 + 4 * *((unsigned int *)a3 + 19);
        ggl::CommandBuffer::pushRenderItem(v8, (ggl::RenderItem *)v101);
        ++v85;
        if (++v83 == v119)
          goto LABEL_103;
      }
      v87 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v87 + 16))(v87);
LABEL_87:
      v124 = (_BYTE *)v87;
      goto LABEL_89;
    }
  }
LABEL_103:

}

void sub_19FAC52BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19)
{

  _Unwind_Resume(a1);
}

void md::BuildingRenderLayer::updateFadeParametersWithLayoutContext(md::BuildingRenderLayer *this, const md::LayoutContext *a2)
{
  uint64_t *v4;
  int8x8_t v5;
  uint8x8_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  unint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  unint64_t v16;
  uint64_t v17;
  gss::Allocator *v18;
  uint64_t v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t *p_shared_owners;
  unint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  unint64_t v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;
  float *v33;
  float v34;
  BOOL v35;
  unsigned int v36;
  float *v37;
  float v38;
  uint64_t v39;
  float *v40;
  float v41;
  BOOL v42;
  unsigned int v43;
  float *v44;
  float v45;
  uint64_t v46;
  float *v47;
  float v48;
  BOOL v49;
  unsigned int v50;
  float *v51;
  float v52;
  uint64_t v53;
  float *v54;
  float v55;
  BOOL v56;
  unsigned int v57;
  float *v58;
  float v59;
  uint64_t v60;
  float *v61;
  float v62;
  unsigned int v63;
  float *v64;
  float v65;
  float v66;
  float v67;
  float v68;
  double *v69;
  double v70;
  double v71;
  long double v72;
  long double v73;
  _QWORD *v74;
  unint64_t v75;
  _QWORD *v76;
  unint64_t v77;
  double *v78;
  double v79;
  double v80;
  double v81;
  double v82;
  double v83;
  double v84;
  double v85;
  double v86;
  uint64_t v87;
  float *v88;
  float v89;
  BOOL v90;
  unsigned int v91;
  float *v92;
  double v93;
  float v94;
  float v95;
  uint64_t v96;
  float *v97;
  float v98;
  BOOL v99;
  unsigned int v100;
  float *v101;
  float v102;
  float v103;
  float v104;
  float v105;
  float v106;
  unint64_t v107;
  std::__shared_weak_count *v108;
  unint64_t *v109;
  unint64_t v110;
  double v111;
  double v112;
  double v113;
  double v114;
  double v115;
  double v116;
  double v117;
  double v118;
  float v119;
  float v120;
  __int128 v121;
  __int128 v122;
  uint64_t v123;
  uint64_t v124;
  __int16 v125;
  uint64_t v126;
  __int128 v127;
  _QWORD v128[2];
  char v129;
  __int128 v130;
  char v131;
  char v132;

  v4 = (uint64_t *)*((_QWORD *)a2 + 1);
  v5 = (int8x8_t)v4[1];
  v6 = (uint8x8_t)vcnt_s8(v5);
  v6.i16[0] = vaddlv_u8(v6);
  if (v6.u32[0] >= 2uLL)
  {
    v10 = 0xC97B9E962ADF4AD4;
    if (*(_QWORD *)&v5 <= 0xC97B9E962ADF4AD4)
      v10 = 0xC97B9E962ADF4AD4 % *(_QWORD *)&v5;
    v8 = *v4;
    v9 = *(_QWORD **)(v8 + 8 * v10);
    do
    {
      do
        v9 = (_QWORD *)*v9;
      while (v9[1] != 0xC97B9E962ADF4AD4);
    }
    while (v9[2] != 0xC97B9E962ADF4AD4);
    v7 = *(_QWORD *)&v5 - 1;
  }
  else
  {
    v7 = *(_QWORD *)&v5 - 1;
    v8 = *v4;
    v9 = *(_QWORD **)(v8 + 8 * ((*(_QWORD *)&v5 - 1) & 0xC97B9E962ADF4AD4));
    do
    {
      do
        v9 = (_QWORD *)*v9;
      while (v9[1] != 0xC97B9E962ADF4AD4);
    }
    while (v9[2] != 0xC97B9E962ADF4AD4);
  }
  v11 = *(uint64_t **)(v9[5] + 32);
  v12 = *v11;
  v13 = v11[1];
  if (v12 != v13)
  {
    while (*(_BYTE *)v12 != 20)
    {
      v12 += 16;
      if (v12 == v13)
        goto LABEL_18;
    }
  }
  if (v12 == v13)
LABEL_18:
    v14 = 0;
  else
    v14 = *(unsigned int *)(v12 + 8);
  if (v6.u32[0] >= 2uLL)
  {
    v16 = 0xE42D19AFCA302E68;
    if (*(_QWORD *)&v5 <= 0xE42D19AFCA302E68)
      v16 = 0xE42D19AFCA302E68 % *(_QWORD *)&v5;
    v15 = *(_QWORD **)(v8 + 8 * v16);
    do
    {
      do
        v15 = (_QWORD *)*v15;
      while (v15[1] != 0xE42D19AFCA302E68);
    }
    while (v15[2] != 0xE42D19AFCA302E68);
  }
  else
  {
    v15 = *(_QWORD **)(v8 + 8 * (v7 & 0xE42D19AFCA302E68));
    do
    {
      do
        v15 = (_QWORD *)*v15;
      while (v15[1] != 0xE42D19AFCA302E68);
    }
    while (v15[2] != 0xE42D19AFCA302E68);
  }
  v17 = *(_QWORD *)(*(_QWORD *)(v15[5] + 32) + 16);
  v122 = 0uLL;
  v123 = 0;
  v124 = gss::Allocator::instance(this);
  *(_QWORD *)((char *)&v127 + 7) = 0;
  *(_QWORD *)&v127 = 0;
  HIBYTE(v127) = 1;
  gss::StylesheetManager<gss::ScenePropertyID>::styleQueryForFeatureAttributes((unint64_t *)&v130, v17, (gss::FeatureAttributeSet *)&v122, (gss::QueryOverrides *)&v127);
  if (!BYTE14(v127) && (_QWORD)v127)
  {
    v19 = gss::Allocator::instance(v18);
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v19 + 40))(v19, v127, WORD6(v127));
  }
  if ((_QWORD)v122)
  {
    *((_QWORD *)&v122 + 1) = v122;
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v124 + 40))(v124, v122, v123 - v122);
  }
  v21 = (std::__shared_weak_count *)*((_QWORD *)&v130 + 1);
  v20 = v130;
  v122 = v130;
  if (*((_QWORD *)&v130 + 1))
  {
    v22 = (unint64_t *)(*((_QWORD *)&v130 + 1) + 8);
    do
      v23 = __ldxr(v22);
    while (__stxr(v23 + 1, v22));
    *((_QWORD *)&v127 + 1) = v21;
    do
      v24 = __ldxr(v22);
    while (__stxr(v24 + 1, v22));
  }
  else
  {
    *((_QWORD *)&v127 + 1) = 0;
  }
  v128[0] = 0;
  v128[1] = 0;
  *(_QWORD *)&v127 = v20;
  v129 = 0;
  if (v20)
    LOBYTE(v20) = (*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)v20 + 48))(v20, v128);
  v129 = v20;
  if (v21)
  {
    p_shared_owners = (unint64_t *)&v21->__shared_owners_;
    do
      v26 = __ldaxr(p_shared_owners);
    while (__stlxr(v26 - 1, p_shared_owners));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  v27 = (uint64_t *)*((_QWORD *)this + 47);
  v28 = *v27;
  v122 = 0uLL;
  v29 = *(_QWORD *)(v28 + 8);
  *(_QWORD *)&v30 = 0;
  *((_QWORD *)&v30 + 1) = v28;
  v121 = v30;
  if (v29)
    v31 = *(_QWORD *)(v28 + 72);
  else
    v31 = 0;
  v122 = v30;
  v123 = 0;
  v124 = v29;
  v126 = v31;
  v125 = 1;
  if (!v129)
  {
    *((_BYTE *)v27 + 18) = 0;
    *(_DWORD *)(v31 + 8) = 1065353216;
    *(_DWORD *)v31 = 0;
    *(float *)(v31 + 4) = 1.0;
    if (!v29)
      goto LABEL_144;
    goto LABEL_138;
  }
  v32 = *(_QWORD *)(v127 + 24);
  v33 = *(float **)v32;
  if (*(_QWORD *)v32
    && (v34 = *v33, LODWORD(v33) = *v33 == 1.0, *(_BYTE *)(v32 + 10))
    && (v34 != 0.0 ? (v35 = v34 == 1.0) : (v35 = 1), !v35)
    || (v36 = *(unsigned __int8 *)(v32 + v33 + 11), v34 = 0.0, v36 == 2))
  {
    v132 = 1;
    v131 = 1;
    v37 = (float *)gss::RenderStyle<gss::ScenePropertyID>::styleValueForKey<float>(v32, 0x39u, 0, &v132);
    v38 = *v37
        + (float)((float)(*(float *)gss::RenderStyle<gss::ScenePropertyID>::styleValueForKey<float>(v32, 0x39u, 1u, &v131)- *v37)* v34);
  }
  else
  {
    v38 = *(float *)gss::RenderStyle<gss::ScenePropertyID>::styleValueForKey<float>(*(_QWORD *)(v127 + 24), 0x39u, v36, 0);
  }
  v39 = *(_QWORD *)(v127 + 24);
  v40 = *(float **)v39;
  if (*(_QWORD *)v39
    && (v41 = *v40, LODWORD(v40) = *v40 == 1.0, *(_BYTE *)(v39 + 10))
    && (v41 != 0.0 ? (v42 = v41 == 1.0) : (v42 = 1), !v42)
    || (v43 = *(unsigned __int8 *)(v39 + v40 + 11), v41 = 0.0, v43 == 2))
  {
    v132 = 1;
    v131 = 1;
    v44 = (float *)gss::RenderStyle<gss::ScenePropertyID>::styleValueForKey<float>(v39, 0x40u, 0, &v132);
    v45 = *v44
        + (float)((float)(*(float *)gss::RenderStyle<gss::ScenePropertyID>::styleValueForKey<float>(v39, 0x40u, 1u, &v131)- *v44)* v41);
  }
  else
  {
    v45 = *(float *)gss::RenderStyle<gss::ScenePropertyID>::styleValueForKey<float>(*(_QWORD *)(v127 + 24), 0x40u, v43, 0);
  }
  v46 = *(_QWORD *)(v127 + 24);
  v47 = *(float **)v46;
  if (*(_QWORD *)v46
    && (v48 = *v47, LODWORD(v47) = *v47 == 1.0, *(_BYTE *)(v46 + 10))
    && (v48 != 0.0 ? (v49 = v48 == 1.0) : (v49 = 1), !v49)
    || (v50 = *(unsigned __int8 *)(v46 + v47 + 11), v48 = 0.0, v50 == 2))
  {
    v132 = 1;
    v131 = 1;
    v51 = (float *)gss::RenderStyle<gss::ScenePropertyID>::styleValueForKey<float>(v46, 0x3Au, 0, &v132);
    v52 = *v51
        + (float)((float)(*(float *)gss::RenderStyle<gss::ScenePropertyID>::styleValueForKey<float>(v46, 0x3Au, 1u, &v131)- *v51)* v48);
  }
  else
  {
    v52 = *(float *)gss::RenderStyle<gss::ScenePropertyID>::styleValueForKey<float>(*(_QWORD *)(v127 + 24), 0x3Au, v50, 0);
  }
  v53 = *(_QWORD *)(v127 + 24);
  v54 = *(float **)v53;
  if (*(_QWORD *)v53
    && (v55 = *v54, LODWORD(v54) = *v54 == 1.0, *(_BYTE *)(v53 + 10))
    && (v55 != 0.0 ? (v56 = v55 == 1.0) : (v56 = 1), !v56)
    || (v57 = *(unsigned __int8 *)(v53 + v54 + 11), v55 = 0.0, v57 == 2))
  {
    v132 = 1;
    v131 = 1;
    v58 = (float *)gss::RenderStyle<gss::ScenePropertyID>::styleValueForKey<float>(v53, 0x41u, 0, &v132);
    v59 = *v58
        + (float)((float)(*(float *)gss::RenderStyle<gss::ScenePropertyID>::styleValueForKey<float>(v53, 0x41u, 1u, &v131)- *v58)* v55);
  }
  else
  {
    v59 = *(float *)gss::RenderStyle<gss::ScenePropertyID>::styleValueForKey<float>(*(_QWORD *)(v127 + 24), 0x41u, v57, 0);
  }
  v60 = *(_QWORD *)(v127 + 24);
  v61 = *(float **)v60;
  if (*(_QWORD *)v60 && (v62 = *v61, LODWORD(v61) = *v61 == 1.0, *(_BYTE *)(v60 + 10)) && v62 != 0.0 && v62 != 1.0
    || (v63 = *(unsigned __int8 *)(v60 + v61 + 11), v62 = 0.0, v63 == 2))
  {
    v132 = 1;
    v131 = 1;
    v64 = (float *)gss::RenderStyle<gss::ScenePropertyID>::styleValueForKey<float>(v60, 0x3Cu, 0, &v132);
    v65 = *v64
        + (float)((float)(*(float *)gss::RenderStyle<gss::ScenePropertyID>::styleValueForKey<float>(v60, 0x3Cu, 1u, &v131)- *v64)* v62);
  }
  else
  {
    v65 = *(float *)gss::RenderStyle<gss::ScenePropertyID>::styleValueForKey<float>(*(_QWORD *)(v127 + 24), 0x3Cu, v63, 0);
  }
  v66 = (float)(v45 * 2.0) + -1.0;
  v67 = -1.0;
  v68 = (float)(v65 * 2.0) + -1.0;
  if (v14 == 5)
  {
    md::LayoutContext::frameState(a2);
    v70 = v69[8];
    v71 = v69[9];
    v72 = tan(v69[7] * 0.5 + 0.785398163);
    v73 = log(v72);
    v74 = (_QWORD *)*((_QWORD *)a2 + 1);
    v75 = v74[1];
    v120 = v52;
    v117 = v71;
    v118 = v73;
    if ((v75 & (v75 - 1)) != 0)
    {
      v77 = 0x1AF456233693CD46;
      if (v75 <= 0x1AF456233693CD46)
        v77 = 0x1AF456233693CD46 % v75;
      v76 = *(_QWORD **)(*v74 + 8 * v77);
      do
      {
        do
          v76 = (_QWORD *)*v76;
        while (v76[1] != 0x1AF456233693CD46);
      }
      while (v76[2] != 0x1AF456233693CD46);
    }
    else
    {
      v76 = *(_QWORD **)(*v74 + 8 * ((v75 - 1) & 0x1AF456233693CD46));
      do
      {
        do
          v76 = (_QWORD *)*v76;
        while (v76[1] != 0x1AF456233693CD46);
      }
      while (v76[2] != 0x1AF456233693CD46);
    }
    v119 = v59;
    v78 = *(double **)(v76[5] + 32);
    v79 = v78[102];
    v80 = v78[106];
    v81 = v78[114];
    v82 = v78[110];
    v83 = v78[104];
    v84 = v78[108];
    v85 = v78[116];
    v86 = v78[112];
    v87 = *(_QWORD *)(v127 + 24);
    v88 = *(float **)v87;
    v115 = v83;
    v116 = v82;
    v113 = v81;
    v114 = v84;
    v111 = v85;
    v112 = v86;
    if (*(_QWORD *)v87
      && (v89 = *v88, LODWORD(v88) = *v88 == 1.0, *(_BYTE *)(v87 + 10))
      && (v89 != 0.0 ? (v90 = v89 == 1.0) : (v90 = 1), !v90)
      || (v91 = *(unsigned __int8 *)(v87 + v88 + 11), v89 = 0.0, v91 == 2))
    {
      v132 = 1;
      v131 = 1;
      v92 = (float *)gss::RenderStyle<gss::ScenePropertyID>::styleValueForKey<float>(v87, 0x3Bu, 0, &v132);
      v93 = v70;
      v94 = *v92
          + (float)((float)(*(float *)gss::RenderStyle<gss::ScenePropertyID>::styleValueForKey<float>(v87, 0x3Bu, 1u, &v131)- *v92)* v89);
    }
    else
    {
      v93 = v70;
      v94 = *(float *)gss::RenderStyle<gss::ScenePropertyID>::styleValueForKey<float>(v87, 0x3Bu, v91, 0);
    }
    v95 = v38;
    v96 = *(_QWORD *)(v127 + 24);
    v97 = *(float **)v96;
    if (*(_QWORD *)v96
      && (v98 = *v97, LODWORD(v97) = *v97 == 1.0, *(_BYTE *)(v96 + 10))
      && (v98 != 0.0 ? (v99 = v98 == 1.0) : (v99 = 1), !v99)
      || (v100 = *(unsigned __int8 *)(v96 + v97 + 11), v98 = 0.0, v100 == 2))
    {
      v132 = 1;
      v131 = 1;
      v101 = (float *)gss::RenderStyle<gss::ScenePropertyID>::styleValueForKey<float>(v96, 0x3Du, 0, &v132);
      v102 = *v101
           + (float)((float)(*(float *)gss::RenderStyle<gss::ScenePropertyID>::styleValueForKey<float>(v96, 0x3Du, 1u, &v131)- *v101)* v98);
    }
    else
    {
      v102 = *(float *)gss::RenderStyle<gss::ScenePropertyID>::styleValueForKey<float>(*(_QWORD *)(v127 + 24), 0x3Du, v100, 0);
    }
    v38 = v95;
    v103 = (v113 + v79 * (v93 * 0.159154943 + 0.5) + v80 * (v118 * 0.159154943 + 0.5) + v116 * v117)
         / (v111 + v115 * (v93 * 0.159154943 + 0.5) + v114 * (v118 * 0.159154943 + 0.5) + v112 * v117);
    v66 = fminf(fmaxf(v103 + (float)(v94 * 2.0), v66), (float)(v120 * 2.0) + -1.0);
    v68 = fminf(fmaxf(v103 + (float)(v102 * 2.0), (float)(v119 * 2.0) + -1.0), v68);
    v67 = -1.0;
  }
  v104 = 1.0;
  if (v66 < v68)
    v104 = v38;
  v105 = -2.0;
  if (v66 < v68)
  {
    v105 = v66;
    v67 = v68;
  }
  *(_BYTE *)(*((_QWORD *)this + 47) + 18) = v104 < 0.999;
  *(float *)(v31 + 8) = v104;
  v106 = (1.0 - v104) / (float)(v67 - v105);
  *(float *)v31 = v106;
  *(float *)(v31 + 4) = v104 - (float)(v105 * v106);
  if (v29)
  {
LABEL_138:
    if ((_QWORD)v121 && *(_BYTE *)(*((_QWORD *)&v121 + 1) + 17) != 2)
      (*(void (**)(void))(*(_QWORD *)v121 + 64))();
    v107 = *(_QWORD *)(*((_QWORD *)&v121 + 1) + 64);
    if (v107 <= v29)
      v107 = v29;
    *(_QWORD *)(*((_QWORD *)&v121 + 1) + 56) = 0;
    *(_QWORD *)(*((_QWORD *)&v121 + 1) + 64) = v107;
  }
LABEL_144:
  gss::QueryableLocker<gss::ScenePropertyID>::~QueryableLocker((uint64_t)&v127);
  v108 = (std::__shared_weak_count *)*((_QWORD *)&v130 + 1);
  if (*((_QWORD *)&v130 + 1))
  {
    v109 = (unint64_t *)(*((_QWORD *)&v130 + 1) + 8);
    do
      v110 = __ldaxr(v109);
    while (__stlxr(v110 - 1, v109));
    if (!v110)
    {
      ((void (*)(std::__shared_weak_count *))v108->__on_zero_shared)(v108);
      std::__shared_weak_count::__release_weak(v108);
    }
  }
}

void sub_19FAC5E40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  uint64_t v27;

  ggl::BufferMemory::~BufferMemory((ggl::BufferMemory *)&a21);
  gss::QueryableLocker<gss::ScenePropertyID>::~QueryableLocker((uint64_t)&a27);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](v27 - 152);
  _Unwind_Resume(a1);
}

void md::BuildingRenderLayer::layout3DBuildings(_QWORD *a1, uint64_t **a2, uint64_t a3, int8x8_t **a4, int a5, int a6)
{
  int8x8_t *v12;
  int8x8_t v13;
  uint8x8_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  float v23;
  float v24;
  float v25;
  uint8x8_t v26;
  uint64_t v27;
  int8x8_t v28;
  _QWORD *v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  _QWORD *v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  _QWORD *v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  _QWORD *v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  int8x8_t *v54;
  int8x8_t v55;
  float v56;
  uint8x8_t v57;
  uint64_t v58;
  _QWORD *v59;
  _QWORD *v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  _QWORD *v65;
  _QWORD *v66;
  uint64_t v67;
  uint64_t i;
  uint64_t *v69;
  uint64_t v70;
  float v71;
  float v72;
  float v73;
  _QWORD *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unsigned int v78;
  std::__shared_weak_count *v79;
  unint64_t *p_shared_owners;
  unint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  std::__shared_weak_count *v85;
  unint64_t *v86;
  unint64_t v87;
  __int128 v88;
  __int128 v89;
  float v90;
  float v91;
  float v92;
  double v93;
  double v94;
  double v95;
  double v96;
  float v97;
  _QWORD *v98;
  uint64_t v99;
  uint64_t v100;
  id v101;
  uint64_t v102;
  uint64_t v103;
  __n128 v104;
  uint64_t *v105;
  uint64_t *v106;
  char v107;
  uint64_t v108;
  std::__shared_weak_count *v109;
  unint64_t *v110;
  unint64_t v111;
  unint64_t v112;
  unint64_t *v113;
  unint64_t v114;
  unsigned __int16 *v115;
  unsigned int v116;
  float *v117;
  float v118;
  BOOL v119;
  int v120;
  char v121;
  char v122;
  char v123;
  std::__shared_weak_count *v124;
  unint64_t *v125;
  unint64_t v126;
  std::__shared_weak_count *v127;
  unint64_t *v128;
  unint64_t v129;
  uint64_t *v130;
  uint64_t *v131;
  int v132;
  char v133;
  uint64_t v134;
  std::__shared_weak_count *v135;
  unint64_t *v136;
  unint64_t v137;
  unint64_t v138;
  unint64_t *v139;
  unint64_t v140;
  unsigned __int16 *v141;
  unsigned int v142;
  float *v143;
  float v144;
  BOOL v145;
  int v146;
  char v147;
  char v148;
  char v149;
  std::__shared_weak_count *v150;
  unint64_t *v151;
  unint64_t v152;
  std::__shared_weak_count *v153;
  unint64_t *v154;
  unint64_t v155;
  int v156;
  uint64_t v157;
  int v158;
  id v159;
  uint64_t v160;
  _QWORD *v161;
  uint64_t v162;
  std::__shared_weak_count *v163;
  unint64_t *v164;
  unint64_t v165;
  std::__shared_weak_count *v166;
  unint64_t *v167;
  unint64_t v168;
  uint64_t *v169;
  uint64_t v170;
  uint64_t v171;
  _QWORD *v172;
  uint64_t v173;
  uint64_t *v174;
  _QWORD *v175;
  _QWORD *v176;
  id *v177;
  uint64_t v178;
  unsigned int v179;
  _QWORD *v180;
  void *v181;
  uint64_t v182;
  uint64_t v183;
  char v184;
  md::BuildingRenderLayer *v185;
  uint64_t v186;
  std::__shared_weak_count *v187;
  _OWORD *v188;
  _OWORD v189[4];
  uint64_t v190;
  std::__shared_weak_count *v191;
  uint64_t v192;
  std::__shared_weak_count *v193;
  __int128 v194;
  __int128 v195;
  uint64_t v196;
  int8x8_t **v197;
  uint64_t v198;
  float32x2_t v199;
  float v200;
  int v201;
  float v202;
  float v203;
  float v204;
  float v205;
  float v206;
  float v207;
  int v208;
  int v209;
  unsigned __int16 **v210;
  std::__shared_weak_count *v211;
  uint64_t v212;
  std::__shared_weak_count *v213;
  unsigned __int8 v214;
  char v215;
  _QWORD v216[3];
  _QWORD *v217;
  _QWORD v218[3];
  _QWORD *v219;
  _QWORD v220[3];
  _QWORD *v221;
  uint64_t v222;

  v222 = *MEMORY[0x1E0C80C00];
  v12 = a4[1];
  v13 = v12[1];
  if (!*(_QWORD *)&v13)
    goto LABEL_26;
  v14 = (uint8x8_t)vcnt_s8(v13);
  v14.i16[0] = vaddlv_u8(v14);
  if (v14.u32[0] > 1uLL)
  {
    v15 = 0x401D4CCE847AB1D1;
    if (*(_QWORD *)&v13 <= 0x401D4CCE847AB1D1uLL)
      v15 = 0x401D4CCE847AB1D1uLL % *(_QWORD *)&v13;
  }
  else
  {
    v15 = (*(_QWORD *)&v13 - 1) & 0x401D4CCE847AB1D1;
  }
  v16 = *(_QWORD **)(*(_QWORD *)v12 + 8 * v15);
  if (!v16)
    goto LABEL_26;
  v17 = (_QWORD *)*v16;
  if (!v17)
    goto LABEL_26;
  if (v14.u32[0] < 2uLL)
  {
    while (1)
    {
      v19 = v17[1];
      if (v19 == 0x401D4CCE847AB1D1)
      {
        if (v17[2] == 0x401D4CCE847AB1D1)
          goto LABEL_22;
      }
      else if ((v19 & (*(_QWORD *)&v13 - 1)) != v15)
      {
        goto LABEL_26;
      }
      v17 = (_QWORD *)*v17;
      if (!v17)
        goto LABEL_26;
    }
  }
  while (1)
  {
    v18 = v17[1];
    if (v18 == 0x401D4CCE847AB1D1)
      break;
    if (v18 >= *(_QWORD *)&v13)
      v18 %= *(_QWORD *)&v13;
    if (v18 != v15)
      goto LABEL_26;
LABEL_11:
    v17 = (_QWORD *)*v17;
    if (!v17)
      goto LABEL_26;
  }
  if (v17[2] != 0x401D4CCE847AB1D1)
    goto LABEL_11;
LABEL_22:
  v20 = v17[5];
  if (*(_QWORD *)(v20 + 8) == 0x401D4CCE847AB1D1)
  {
    v21 = *(_QWORD *)(v20 + 32);
    if (v21)
    {
      if (*(_BYTE *)(v21 + 16))
      {
        v22 = *(_QWORD *)(v21 + 8);
        goto LABEL_27;
      }
    }
  }
LABEL_26:
  v22 = 0;
LABEL_27:
  if (a5 != 1 || v22)
  {
    md::LayoutContext::zoomAtCentrePoint(a4[1]);
    v24 = 1.0;
    if (a6 != 1
      || ((v25 = fmaxf((float)(v23 * 2.0) + -31.0, 0.0), v25 <= 1.0) ? (v24 = 1.0 - v25) : (v24 = 0.0),
          v24 >= 0.00000011921))
    {
      if (v13)
      {
        v26 = (uint8x8_t)vcnt_s8(v13);
        v26.i16[0] = vaddlv_u8(v26);
        if (v26.u32[0] > 1uLL)
        {
          v27 = 0x7C7EC6C7C111B0D0;
          if (*(_QWORD *)&v13 <= 0x7C7EC6C7C111B0D0uLL)
            v27 = 0x7C7EC6C7C111B0D0uLL % *(_QWORD *)&v13;
        }
        else
        {
          v27 = (*(_QWORD *)&v13 - 1) & 0x7C7EC6C7C111B0D0;
        }
        v28 = *v12;
        v29 = *(_QWORD **)(*(_QWORD *)v12 + 8 * v27);
        if (v29)
        {
          v30 = (_QWORD *)*v29;
          if (*v29)
          {
            v31 = *(_QWORD *)&v13 - 1;
            if (v26.u32[0] < 2uLL)
            {
              while (1)
              {
                v32 = v30[1];
                if (v32 == 0x7C7EC6C7C111B0D0)
                {
                  if (v30[2] == 0x7C7EC6C7C111B0D0)
                    goto LABEL_55;
                }
                else if ((v32 & v31) != v27)
                {
                  return;
                }
                v30 = (_QWORD *)*v30;
                if (!v30)
                  return;
              }
            }
            while (1)
            {
              v33 = v30[1];
              if (v33 == 0x7C7EC6C7C111B0D0)
                break;
              if (v33 >= *(_QWORD *)&v13)
                v33 %= *(_QWORD *)&v13;
              if (v33 != v27)
                return;
LABEL_49:
              v30 = (_QWORD *)*v30;
              if (!v30)
                return;
            }
            if (v30[2] != 0x7C7EC6C7C111B0D0)
              goto LABEL_49;
LABEL_55:
            v34 = v30[5];
            if (*(_QWORD *)(v34 + 8) == 0x7C7EC6C7C111B0D0)
            {
              v35 = *(_QWORD *)(v34 + 32);
              if (v35)
              {
                if (v26.u32[0] > 1uLL)
                {
                  v36 = 0x41E8D6E445F4145;
                  if (*(_QWORD *)&v13 <= 0x41E8D6E445F4145uLL)
                    v36 = 0x41E8D6E445F4145uLL % *(_QWORD *)&v13;
                }
                else
                {
                  v36 = v31 & 0x41E8D6E445F4145;
                }
                v37 = *(_QWORD **)(*(_QWORD *)&v28 + 8 * v36);
                if (v37)
                {
                  v38 = (_QWORD *)*v37;
                  if (v38)
                  {
                    if (v26.u32[0] < 2uLL)
                    {
                      while (1)
                      {
                        v39 = v38[1];
                        if (v39 == 0x41E8D6E445F4145)
                        {
                          if (v38[2] == 0x41E8D6E445F4145)
                            goto LABEL_77;
                        }
                        else if ((v39 & v31) != v36)
                        {
                          return;
                        }
                        v38 = (_QWORD *)*v38;
                        if (!v38)
                          return;
                      }
                    }
                    while (1)
                    {
                      v40 = v38[1];
                      if (v40 == 0x41E8D6E445F4145)
                        break;
                      if (v40 >= *(_QWORD *)&v13)
                        v40 %= *(_QWORD *)&v13;
                      if (v40 != v36)
                        return;
LABEL_71:
                      v38 = (_QWORD *)*v38;
                      if (!v38)
                        return;
                    }
                    if (v38[2] != 0x41E8D6E445F4145)
                      goto LABEL_71;
LABEL_77:
                    v41 = v38[5];
                    if (*(_QWORD *)(v41 + 8) == 0x41E8D6E445F4145 && *(_QWORD *)(v41 + 32))
                    {
                      if (v26.u32[0] > 1uLL)
                      {
                        v42 = 0xA60DDA5A69582425;
                        if (*(_QWORD *)&v13 <= 0xA60DDA5A69582425)
                          v42 = 0xA60DDA5A69582425 % *(_QWORD *)&v13;
                      }
                      else
                      {
                        v42 = v31 & 0xA60DDA5A69582425;
                      }
                      v43 = *(_QWORD **)(*(_QWORD *)&v28 + 8 * v42);
                      if (v43)
                      {
                        v44 = (_QWORD *)*v43;
                        if (v44)
                        {
                          v185 = (md::BuildingRenderLayer *)a1;
                          v178 = v35;
                          if (v26.u32[0] < 2uLL)
                          {
                            while (1)
                            {
                              v45 = v44[1];
                              if (v45 == 0xA60DDA5A69582425)
                              {
                                if (v44[2] == 0xA60DDA5A69582425)
                                  goto LABEL_99;
                              }
                              else if ((v45 & v31) != v42)
                              {
                                return;
                              }
                              v44 = (_QWORD *)*v44;
                              if (!v44)
                                return;
                            }
                          }
                          while (1)
                          {
                            v46 = v44[1];
                            if (v46 == 0xA60DDA5A69582425)
                              break;
                            if (v46 >= *(_QWORD *)&v13)
                              v46 %= *(_QWORD *)&v13;
                            if (v46 != v42)
                              return;
LABEL_93:
                            v44 = (_QWORD *)*v44;
                            if (!v44)
                              return;
                          }
                          if (v44[2] != 0xA60DDA5A69582425)
                            goto LABEL_93;
LABEL_99:
                          v47 = v44[5];
                          if (*(_QWORD *)(v47 + 8) == 0xA60DDA5A69582425)
                          {
                            v177 = *(id **)(v47 + 32);
                            if (v177)
                            {
                              v173 = a3;
                              if (v26.u32[0] > 1uLL)
                              {
                                v48 = 0x1AF456233693CD46;
                                if (*(_QWORD *)&v13 <= 0x1AF456233693CD46uLL)
                                  v48 = 0x1AF456233693CD46uLL % *(_QWORD *)&v13;
                              }
                              else
                              {
                                v48 = v31 & 0x1AF456233693CD46;
                              }
                              v49 = *(_QWORD **)(*(_QWORD *)&v28 + 8 * v48);
                              if (!v49)
                                goto LABEL_123;
                              v50 = (_QWORD *)*v49;
                              if (!v50)
                                goto LABEL_123;
                              if (v26.u32[0] < 2uLL)
                              {
                                while (1)
                                {
                                  v51 = v50[1];
                                  if (v51 == 0x1AF456233693CD46)
                                  {
                                    if (v50[2] == 0x1AF456233693CD46)
                                      goto LABEL_121;
                                  }
                                  else if ((v51 & v31) != v48)
                                  {
                                    goto LABEL_123;
                                  }
                                  v50 = (_QWORD *)*v50;
                                  if (!v50)
                                    goto LABEL_123;
                                }
                              }
                              while (1)
                              {
                                v52 = v50[1];
                                if (v52 == 0x1AF456233693CD46)
                                  break;
                                if (v52 >= *(_QWORD *)&v13)
                                  v52 %= *(_QWORD *)&v13;
                                if (v52 != v48)
                                  goto LABEL_123;
LABEL_115:
                                v50 = (_QWORD *)*v50;
                                if (!v50)
                                  goto LABEL_123;
                              }
                              if (v50[2] != 0x1AF456233693CD46)
                                goto LABEL_115;
LABEL_121:
                              v53 = v50[5];
                              if (*(_QWORD *)(v53 + 8) != 0x1AF456233693CD46)
                              {
LABEL_123:
                                v171 = 0;
                                goto LABEL_124;
                              }
                              v171 = *(_QWORD *)(v53 + 32);
LABEL_124:
                              md::BuildingRenderLayer::updateFadeParametersWithLayoutContext((md::BuildingRenderLayer *)a1, (const md::LayoutContext *)a4);
                              v54 = a4[1];
                              v55 = v54[1];
                              v56 = 0.0;
                              if (!*(_QWORD *)&v55)
                                goto LABEL_148;
                              v57 = (uint8x8_t)vcnt_s8(v55);
                              v57.i16[0] = vaddlv_u8(v57);
                              if (v57.u32[0] > 1uLL)
                              {
                                v58 = 0x4927EB92E562CC46;
                                if (*(_QWORD *)&v55 <= 0x4927EB92E562CC46uLL)
                                  v58 = 0x4927EB92E562CC46uLL % *(_QWORD *)&v55;
                              }
                              else
                              {
                                v58 = (*(_QWORD *)&v55 - 1) & 0x4927EB92E562CC46;
                              }
                              v59 = *(_QWORD **)(*(_QWORD *)v54 + 8 * v58);
                              if (!v59)
                                goto LABEL_148;
                              v60 = (_QWORD *)*v59;
                              if (!v60)
                                goto LABEL_148;
                              if (v57.u32[0] < 2uLL)
                              {
                                v61 = *(_QWORD *)&v55 - 1;
                                while (1)
                                {
                                  v63 = v60[1];
                                  if (v63 == 0x4927EB92E562CC46)
                                  {
                                    if (v60[2] == 0x4927EB92E562CC46)
                                      goto LABEL_145;
                                  }
                                  else if ((v63 & v61) != v58)
                                  {
                                    goto LABEL_148;
                                  }
                                  v60 = (_QWORD *)*v60;
                                  if (!v60)
                                    goto LABEL_148;
                                }
                              }
                              while (2)
                              {
                                v62 = v60[1];
                                if (v62 != 0x4927EB92E562CC46)
                                {
                                  if (v62 >= *(_QWORD *)&v55)
                                    v62 %= *(_QWORD *)&v55;
                                  if (v62 != v58)
                                    goto LABEL_148;
                                  goto LABEL_134;
                                }
                                if (v60[2] != 0x4927EB92E562CC46)
                                {
LABEL_134:
                                  v60 = (_QWORD *)*v60;
                                  if (!v60)
                                    goto LABEL_148;
                                  continue;
                                }
                                break;
                              }
LABEL_145:
                              v64 = v60[5];
                              if (*(_QWORD *)(v64 + 8) == 0x4927EB92E562CC46)
                              {
                                v170 = *(_QWORD *)(v64 + 32);
                                if (v170)
                                {
                                  v56 = *(float *)(v170 + 280);
                                  goto LABEL_149;
                                }
                              }
LABEL_148:
                              v170 = 0;
LABEL_149:
                              v172 = a1 + 52;
                              if (a1[55])
                              {
                                v65 = (_QWORD *)a1[54];
                                if (v65)
                                {
                                  do
                                  {
                                    v66 = (_QWORD *)*v65;
                                    operator delete(v65);
                                    v65 = v66;
                                  }
                                  while (v66);
                                }
                                a1[54] = 0;
                                v67 = a1[53];
                                if (v67)
                                {
                                  for (i = 0; i != v67; ++i)
                                    *(_QWORD *)(*v172 + 8 * i) = 0;
                                }
                                a1[55] = 0;
                              }
                              v69 = *a2;
                              v169 = a2[1];
                              v70 = v173;
                              if (*a2 != v169)
                              {
                                v71 = 1.0 - v56;
                                v72 = fmaxf(*(float *)(v171 + 3080) + *(float *)(v171 + 3076), 1.0);
                                if (a6 == 1)
                                  v73 = 1.0;
                                else
                                  v73 = v71;
                                do
                                {
                                  v174 = v69;
                                  v76 = *v69;
                                  v77 = *(_QWORD *)(*v69 + 384);
                                  v194 = 0u;
                                  v195 = 0u;
                                  v196 = 0;
                                  v197 = a4;
                                  v198 = v70;
                                  v180 = (_QWORD *)v77;
                                  v78 = *(unsigned __int8 *)(v77 + 169);
                                  v205 = (float)v78;
                                  md::featureIdPredicate((uint64_t)v220, a5, a6, v78, v22, v170, (uint64_t)v172);
                                  md::FogInfo::updateFogUniformsWithLayoutContext((uint64_t *)(v76 + 496), (uint64_t)a4, (double *)(v76 + 88));
                                  v79 = *(std::__shared_weak_count **)(v76 + 504);
                                  v192 = *(_QWORD *)(v76 + 496);
                                  v193 = v79;
                                  if (v79)
                                  {
                                    p_shared_owners = (unint64_t *)&v79->__shared_owners_;
                                    do
                                      v81 = __ldxr(p_shared_owners);
                                    while (__stxr(v81 + 1, p_shared_owners));
                                  }
                                  v82 = v76 + 480;
                                  v83 = 216;
                                  if (a6 == 1)
                                    v83 = 480;
                                  else
                                    v82 = v76 + 216;
                                  v84 = *(_QWORD *)(v76 + v83);
                                  v85 = *(std::__shared_weak_count **)(v82 + 8);
                                  v190 = v84;
                                  v191 = v85;
                                  if (v85)
                                  {
                                    v86 = (unint64_t *)&v85->__shared_owners_;
                                    do
                                      v87 = __ldxr(v86);
                                    while (__stxr(v87 + 1, v86));
                                  }
                                  v188 = 0;
                                  v186 = 0;
                                  v187 = 0;
                                  ggl::ResourceAccessor::accessConstantData((uint64_t)&v210, 0, v84, 0);
                                  ggl::BufferMemory::operator=(&v186, (uint64_t)&v210);
                                  ggl::BufferMemory::~BufferMemory((ggl::BufferMemory *)&v210);
                                  v88 = v188[1];
                                  v189[0] = *v188;
                                  v189[1] = v88;
                                  v89 = v188[3];
                                  v189[2] = v188[2];
                                  v189[3] = v89;
                                  ggl::BufferMemory::~BufferMemory((ggl::BufferMemory *)&v186);
                                  v206 = v72;
                                  *(_QWORD *)&v194 = &v190;
                                  v209 = ggl::CullingGridWithHeight::intersectedCellsForView((uint64_t)(v180 + 93), (float *)v189);
                                  *((_QWORD *)&v194 + 1) = &v192;
                                  v90 = *(float *)(v76 + 404) * v24;
                                  v201 = *(_DWORD *)(v76 + 400);
                                  v202 = v90;
                                  v91 = *(float *)(v76 + 412);
                                  v203 = v91;
                                  if (a6 == 1)
                                  {
                                    v92 = *(float *)(v76 + 408);
                                  }
                                  else
                                  {
                                    if (!*(_BYTE *)(*((_QWORD *)v185 + 47) + 17))
                                    {
                                      v204 = 0.0;
                                      v203 = 0.0;
                                      goto LABEL_177;
                                    }
                                    v92 = *(float *)(v76 + 408) * v91;
                                  }
                                  v204 = v92;
LABEL_177:
                                  v93 = *(double *)(v171 + 496);
                                  v94 = *(double *)(v171 + 504);
                                  v95 = *(double *)(v171 + 512);
                                  v96 = 1.0
                                      / (*(double *)(v76 + 632)
                                       + *(double *)(v76 + 536) * v93
                                       + *(double *)(v76 + 568) * v94
                                       + *(double *)(v76 + 600) * v95);
                                  v97 = v96
                                      * (*(double *)(v76 + 624)
                                       + *(double *)(v76 + 528) * v93
                                       + *(double *)(v76 + 560) * v94
                                       + *(double *)(v76 + 592) * v95);
                                  v199 = vcvt_f32_f64(vmulq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(*(float64x2_t *)(v76 + 608), *(float64x2_t *)(v76 + 512), v93), *(float64x2_t *)(v76 + 544), v94), *(float64x2_t *)(v76 + 576), v95), v96));
                                  v200 = v97;
                                  v207 = v73;
                                  v208 = (v180[110] - v180[109]) >> 4;
                                  v98 = (_QWORD *)v180[90];
                                  v175 = (_QWORD *)v180[91];
                                  v99 = (uint64_t)v185;
                                  if (v98 == v175)
                                    goto LABEL_318;
                                  v179 = 0;
                                  while (2)
                                  {
                                    v176 = v98;
                                    v100 = *v98;
                                    v182 = v98[1];
                                    if (*v98 == v182)
                                      goto LABEL_179;
                                    do
                                    {
                                      v183 = v100;
                                      v101 = *(id *)(v100 + 8);
                                      v102 = objc_msgSend(v101, "styleQueriesForPointyRoofs:selected:", 0, a5 == 1);
                                      *(_QWORD *)&v195 = v102;
                                      v103 = objc_msgSend(v101, "styleQueriesForPointyRoofs:selected:", 1, a5 == 1);
                                      *((_QWORD *)&v195 + 1) = v103;
                                      v104.n128_f32[0] = v202;
                                      if (v202 <= 0.00000011921)
                                        goto LABEL_316;
                                      v181 = v101;
                                      v106 = *(uint64_t **)v102;
                                      v105 = *(uint64_t **)(v102 + 8);
                                      if (*(uint64_t **)v102 == v105)
                                      {
                                        v184 = 0;
                                        goto LABEL_237;
                                      }
                                      v184 = 0;
                                      do
                                      {
                                        v108 = *v106;
                                        v109 = (std::__shared_weak_count *)v106[1];
                                        v186 = *v106;
                                        v187 = v109;
                                        if (v109)
                                        {
                                          v110 = (unint64_t *)&v109->__shared_owners_;
                                          do
                                            v111 = __ldxr(v110);
                                          while (__stxr(v111 + 1, v110));
                                          v211 = v109;
                                          do
                                            v112 = __ldxr(v110);
                                          while (__stxr(v112 + 1, v110));
                                        }
                                        else
                                        {
                                          v211 = 0;
                                        }
                                        v210 = (unsigned __int16 **)v108;
                                        v212 = 0;
                                        v213 = 0;
                                        v214 = 0;
                                        if (v108)
                                          LODWORD(v108) = (*(uint64_t (**)(uint64_t, uint64_t *, __n128))(*(_QWORD *)v108 + 48))(v108, &v212, v104);
                                        v214 = v108;
                                        if (v109)
                                        {
                                          v113 = (unint64_t *)&v109->__shared_owners_;
                                          do
                                            v114 = __ldaxr(v113);
                                          while (__stlxr(v114 - 1, v113));
                                          if (!v114)
                                          {
                                            ((void (*)(std::__shared_weak_count *, __n128))v109->__on_zero_shared)(v109, v104);
                                            std::__shared_weak_count::__release_weak(v109);
                                          }
                                          LODWORD(v108) = v214;
                                        }
                                        if ((_DWORD)v108)
                                        {
                                          v115 = v210[3];
                                          v116 = (int)v206 >= 0x17 ? 23 : (int)v206;
                                          if ((v117 = *(float **)v115) != 0
                                            && (v118 = *v117, LODWORD(v117) = *v117 == 1.0, *((_BYTE *)v115 + 10))
                                            && (v118 != 0.0 ? (v119 = v118 == 1.0) : (v119 = 1), !v119)
                                            || (v120 = *((unsigned __int8 *)v115 + v117 + 11),
                                                v118 = 0.0,
                                                v120 == 2))
                                          {
                                            LOBYTE(v186) = 1;
                                            v215 = 1;
                                            v121 = *(_BYTE *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<BOOL>(v115, 0x5Bu, v116, 0, &v186);
                                            v122 = *(_BYTE *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<BOOL>(v115, 0x5Bu, v116, 1, &v215);
                                            if (v118 < 1.0)
                                              v122 = v121;
                                          }
                                          else
                                          {
                                            v122 = *(_BYTE *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<BOOL>(v210[3], 0x5Bu, v116, v120, 0);
                                          }
                                          v99 = (uint64_t)v185;
                                          if (v122)
                                          {
                                            v184 = 1;
                                            v123 = 1;
                                            if (!v214)
                                              goto LABEL_224;
LABEL_223:
                                            (*((void (**)(unsigned __int16 **))*v210 + 7))(v210);
                                            goto LABEL_224;
                                          }
                                        }
                                        v123 = 0;
                                        if (v214)
                                          goto LABEL_223;
LABEL_224:
                                        v124 = v213;
                                        if (v213)
                                        {
                                          v125 = (unint64_t *)&v213->__shared_owners_;
                                          do
                                            v126 = __ldaxr(v125);
                                          while (__stlxr(v126 - 1, v125));
                                          if (!v126)
                                          {
                                            ((void (*)(std::__shared_weak_count *))v124->__on_zero_shared)(v124);
                                            std::__shared_weak_count::__release_weak(v124);
                                          }
                                        }
                                        v127 = v211;
                                        if (v211)
                                        {
                                          v128 = (unint64_t *)&v211->__shared_owners_;
                                          do
                                            v129 = __ldaxr(v128);
                                          while (__stlxr(v129 - 1, v128));
                                          if (!v129)
                                          {
                                            ((void (*)(std::__shared_weak_count *))v127->__on_zero_shared)(v127);
                                            std::__shared_weak_count::__release_weak(v127);
                                          }
                                        }
                                        v106 += 2;
                                        if (v106 == v105)
                                          v107 = 1;
                                        else
                                          v107 = v123;
                                      }
                                      while ((v107 & 1) == 0);
                                      if ((v184 & 1) == 0)
                                      {
                                        v103 = *((_QWORD *)&v195 + 1);
LABEL_237:
                                        v130 = *(uint64_t **)v103;
                                        v131 = *(uint64_t **)(v103 + 8);
                                        if (*(uint64_t **)v103 == v131)
                                        {
                                          v132 = 0;
                                          goto LABEL_291;
                                        }
                                        while (2)
                                        {
                                          v134 = *v130;
                                          v135 = (std::__shared_weak_count *)v130[1];
                                          v186 = *v130;
                                          v187 = v135;
                                          if (v135)
                                          {
                                            v136 = (unint64_t *)&v135->__shared_owners_;
                                            do
                                              v137 = __ldxr(v136);
                                            while (__stxr(v137 + 1, v136));
                                            v211 = v135;
                                            do
                                              v138 = __ldxr(v136);
                                            while (__stxr(v138 + 1, v136));
                                          }
                                          else
                                          {
                                            v211 = 0;
                                          }
                                          v210 = (unsigned __int16 **)v134;
                                          v212 = 0;
                                          v213 = 0;
                                          v214 = 0;
                                          if (v134)
                                            LODWORD(v134) = (*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)v134 + 48))(v134, &v212);
                                          v214 = v134;
                                          if (v135)
                                          {
                                            v139 = (unint64_t *)&v135->__shared_owners_;
                                            do
                                              v140 = __ldaxr(v139);
                                            while (__stlxr(v140 - 1, v139));
                                            if (!v140)
                                            {
                                              ((void (*)(std::__shared_weak_count *))v135->__on_zero_shared)(v135);
                                              std::__shared_weak_count::__release_weak(v135);
                                            }
                                            LODWORD(v134) = v214;
                                          }
                                          if (!(_DWORD)v134)
                                            goto LABEL_277;
                                          v141 = v210[3];
                                          v142 = (int)v206 >= 0x17 ? 23 : (int)v206;
                                          if ((v143 = *(float **)v141) != 0
                                            && (v144 = *v143, LODWORD(v143) = *v143 == 1.0, *((_BYTE *)v141 + 10))
                                            && (v144 != 0.0 ? (v145 = v144 == 1.0) : (v145 = 1), !v145)
                                            || (v146 = *((unsigned __int8 *)v141 + v143 + 11),
                                                v144 = 0.0,
                                                v146 == 2))
                                          {
                                            LOBYTE(v186) = 1;
                                            v215 = 1;
                                            v147 = *(_BYTE *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<BOOL>(v141, 0x5Bu, v142, 0, &v186);
                                            v148 = *(_BYTE *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<BOOL>(v141, 0x5Bu, v142, 1, &v215);
                                            if (v144 < 1.0)
                                              v148 = v147;
                                          }
                                          else
                                          {
                                            v148 = *(_BYTE *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<BOOL>(v210[3], 0x5Bu, v142, v146, 0);
                                          }
                                          v99 = (uint64_t)v185;
                                          if (v148)
                                          {
                                            v184 = 1;
                                            v149 = 1;
                                            if (!v214)
                                              goto LABEL_279;
LABEL_278:
                                            (*((void (**)(unsigned __int16 **))*v210 + 7))(v210);
                                          }
                                          else
                                          {
LABEL_277:
                                            v149 = 0;
                                            if (v214)
                                              goto LABEL_278;
                                          }
LABEL_279:
                                          v150 = v213;
                                          if (v213)
                                          {
                                            v151 = (unint64_t *)&v213->__shared_owners_;
                                            do
                                              v152 = __ldaxr(v151);
                                            while (__stlxr(v152 - 1, v151));
                                            if (!v152)
                                            {
                                              ((void (*)(std::__shared_weak_count *))v150->__on_zero_shared)(v150);
                                              std::__shared_weak_count::__release_weak(v150);
                                            }
                                          }
                                          v153 = v211;
                                          if (v211)
                                          {
                                            v154 = (unint64_t *)&v211->__shared_owners_;
                                            do
                                              v155 = __ldaxr(v154);
                                            while (__stlxr(v155 - 1, v154));
                                            if (!v155)
                                            {
                                              ((void (*)(std::__shared_weak_count *))v153->__on_zero_shared)(v153);
                                              std::__shared_weak_count::__release_weak(v153);
                                            }
                                          }
                                          v130 += 2;
                                          if (v130 == v131)
                                            v133 = 1;
                                          else
                                            v133 = v149;
                                          if ((v133 & 1) != 0)
                                          {
                                            v132 = v184 & 1;
                                            goto LABEL_291;
                                          }
                                          continue;
                                        }
                                      }
                                      v132 = 1;
LABEL_291:
                                      v156 = v132 != 0;
                                      v101 = v181;
                                      if (a5 != 1)
                                      {
LABEL_294:
                                        if (!v156)
                                          goto LABEL_316;
                                        v157 = v180[109];
                                        if (v179 >= (unint64_t)((v180[110] - v157) >> 4))
                                          goto LABEL_316;
                                        v196 = *(_QWORD *)(v157 + 16 * v179);
                                        v158 = *(unsigned __int8 *)(*(_QWORD *)(v99 + 392) + 772);
                                        v159 = *v177;
                                        v160 = (uint64_t)v221;
                                        if (v158)
                                        {
                                          if (!v221)
                                            goto LABEL_300;
                                          if (v221 == v220)
                                          {
                                            v219 = v218;
                                            (*(void (**)(_QWORD *, _QWORD *))(v220[0] + 24))(v220, v218);
                                          }
                                          else
                                          {
                                            v160 = (*(uint64_t (**)(void))(*v221 + 16))();
LABEL_300:
                                            v219 = (_QWORD *)v160;
                                          }
                                          md::BuildingRenderLayer::generateSpecularRenderItemsForGroup(v99, v178, v159, v181, (uint64_t)&v194, v218);
                                          v161 = v219;
                                          if (v219 == v218)
                                          {
                                            v161 = v218;
                                            goto LABEL_313;
                                          }
LABEL_310:
                                          if (v161)
                                          {
                                            v162 = 5;
                                            goto LABEL_314;
                                          }
                                          goto LABEL_315;
                                        }
                                        if (v221)
                                        {
                                          if (v221 != v220)
                                          {
                                            v160 = (*(uint64_t (**)(void))(*v221 + 16))();
                                            goto LABEL_304;
                                          }
                                          v217 = v216;
                                          (*(void (**)(_QWORD *, _QWORD *))(v220[0] + 24))(v220, v216);
                                        }
                                        else
                                        {
LABEL_304:
                                          v217 = (_QWORD *)v160;
                                        }
                                        md::BuildingRenderLayer::generateDiffuseRenderItemsForGroup(v99, v178, v159, v181, (uint64_t)&v194, v216);
                                        v161 = v217;
                                        if (v217 != v216)
                                          goto LABEL_310;
                                        v161 = v216;
LABEL_313:
                                        v162 = 4;
LABEL_314:
                                        (*(void (**)(void))(*v161 + 8 * v162))();
LABEL_315:

                                        goto LABEL_316;
                                      }
                                      if (v132)
                                      {
                                        v156 = objc_msgSend(v181, "hasFeatureId:", v22);
                                        goto LABEL_294;
                                      }
LABEL_316:

                                      v100 = v183 + 24;
                                    }
                                    while (v183 + 24 != v182);
LABEL_179:
                                    ++v179;
                                    v98 = v176 + 3;
                                    if (v176 + 3 != v175)
                                      continue;
                                    break;
                                  }
LABEL_318:
                                  v163 = v191;
                                  if (v191)
                                  {
                                    v164 = (unint64_t *)&v191->__shared_owners_;
                                    do
                                      v165 = __ldaxr(v164);
                                    while (__stlxr(v165 - 1, v164));
                                    if (!v165)
                                    {
                                      ((void (*)(std::__shared_weak_count *))v163->__on_zero_shared)(v163);
                                      std::__shared_weak_count::__release_weak(v163);
                                    }
                                  }
                                  v166 = v193;
                                  if (v193)
                                  {
                                    v167 = (unint64_t *)&v193->__shared_owners_;
                                    do
                                      v168 = __ldaxr(v167);
                                    while (__stlxr(v168 - 1, v167));
                                    if (!v168)
                                    {
                                      ((void (*)(std::__shared_weak_count *))v166->__on_zero_shared)(v166);
                                      std::__shared_weak_count::__release_weak(v166);
                                    }
                                  }
                                  v74 = v221;
                                  if (v221 == v220)
                                  {
                                    v74 = v220;
                                    v75 = 4;
                                    goto LABEL_161;
                                  }
                                  if (v221)
                                  {
                                    v75 = 5;
LABEL_161:
                                    (*(void (**)(void))(*v74 + 8 * v75))();
                                  }
                                  v70 = v173;
                                  v69 = v174 + 1;
                                }
                                while (v174 + 1 != v169);
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}

void sub_19FAC7074(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,char a58,uint64_t a59,uint64_t a60,uint64_t a61)
{
  uint64_t v61;
  _QWORD *v63;
  uint64_t v64;

  v63 = *(_QWORD **)(v61 - 168);
  if (v63 == (_QWORD *)(v61 - 192))
  {
    v64 = 4;
    v63 = (_QWORD *)(v61 - 192);
  }
  else
  {
    if (!v63)
      _Unwind_Resume(exception_object);
    v64 = 5;
  }
  (*(void (**)(void))(*v63 + 8 * v64))();
  _Unwind_Resume(exception_object);
}

void md::BuildingRenderLayer::generateSpecularRenderItemsForGroup(uint64_t a1, uint64_t a2, void *a3, void *a4, uint64_t a5, _QWORD *a6)
{
  double v6;
  float v7;
  float v8;
  float v9;
  unsigned int v10;
  float v11;
  float v12;
  id v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t *v49;
  __int128 *v50;
  uint64_t v51;
  __int128 v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t *v57;
  __int128 *v58;
  uint64_t v59;
  __int128 v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t *v70;
  unint64_t v71;
  std::__shared_weak_count *v72;
  unint64_t *p_shared_owners;
  unint64_t v74;
  uint64_t *v75;
  uint64_t *v76;
  uint64_t v77;
  _QWORD *v78;
  uint64_t v79;
  unint64_t *v80;
  unint64_t v81;
  std::__shared_weak_count *v82;
  unint64_t *v83;
  unint64_t v84;
  uint64_t v85;
  unint64_t v86;
  __int128 v87;
  ggl::PipelineSetup *v88;
  _DWORD *v89;
  int v90;
  int v91;
  int v92;
  unint64_t v93;
  _QWORD *v94;
  _QWORD *v95;
  unint64_t v96;
  _DWORD *v97;
  _QWORD *v98;
  unint64_t v99;
  _QWORD *v100;
  unint64_t v101;
  uint64_t *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  unint64_t *v106;
  unint64_t v107;
  std::__shared_weak_count *v108;
  unint64_t *v109;
  unint64_t v110;
  uint64_t v111;
  float v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t *v117;
  unint64_t v118;
  uint64_t v119;
  uint64_t v120;
  unint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t *v130;
  unint64_t v131;
  uint64_t v132;
  uint64_t v133;
  unint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t *v138;
  uint64_t v139;
  uint64_t v140;
  unint64_t v141;
  _QWORD *v142;
  uint64_t v143;
  unint64_t v144;
  _QWORD *v145;
  uint64_t v146;
  uint64_t v147;
  unint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  unint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t *v157;
  __int128 *v158;
  uint64_t v159;
  __int128 v160;
  uint64_t v161;
  uint64_t v162;
  unint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  unint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t *v172;
  __int128 *v173;
  uint64_t v174;
  __int128 v175;
  uint64_t v176;
  unint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t *v180;
  __int128 *v181;
  uint64_t v182;
  __int128 v183;
  uint64_t v184;
  uint64_t v185;
  unint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t *v189;
  __int128 *v190;
  uint64_t v191;
  __int128 v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  int v197;
  id v198;
  uint64_t *v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  unint64_t *v204;
  unint64_t v205;
  std::__shared_weak_count *v206;
  unint64_t *v207;
  unint64_t v208;
  ggl::PipelineSetup *v209;
  uint64_t v210;
  unint64_t v211;
  __int128 v212;
  ggl::PipelineSetup *v213;
  _DWORD *v214;
  int v215;
  int v216;
  int v217;
  unint64_t v218;
  _QWORD *v219;
  _QWORD *v220;
  unint64_t v221;
  _DWORD *v222;
  _QWORD *v223;
  unint64_t v224;
  _QWORD *v225;
  unint64_t v226;
  uint64_t *v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  unint64_t *v231;
  unint64_t v232;
  std::__shared_weak_count *v233;
  unint64_t *v234;
  unint64_t v235;
  uint64_t *v236;
  uint64_t *v237;
  uint64_t v238;
  _QWORD *v239;
  uint64_t v240;
  unint64_t *v241;
  unint64_t v242;
  std::__shared_weak_count *v243;
  unint64_t *v244;
  unint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t FoggedExtrusionPipelineSetupForGroup;
  ggl::PipelineSetup *v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  int v253;
  id v254;
  uint64_t *v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  unint64_t *v260;
  unint64_t v261;
  std::__shared_weak_count *v262;
  unint64_t *v263;
  unint64_t v264;
  uint64_t v265;
  uint64_t v266;
  unint64_t v267;
  __int128 v268;
  ggl::PipelineSetup *v269;
  _DWORD *v270;
  int v271;
  int v272;
  int v273;
  unint64_t v274;
  _QWORD *v275;
  _QWORD *v276;
  unint64_t v277;
  _DWORD *v278;
  _QWORD *v279;
  unint64_t v280;
  _QWORD *v281;
  unint64_t v282;
  uint64_t *v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  unint64_t *v287;
  unint64_t v288;
  std::__shared_weak_count *v289;
  unint64_t *v290;
  unint64_t v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  _QWORD *v295;
  uint64_t v296;
  uint64_t v297;
  id v298;
  double v299;
  double v300;
  double v301;
  uint64_t v302;
  uint64_t *v303;
  uint64_t *v304;
  uint64_t v305;
  _QWORD *v306;
  uint64_t v307;
  unint64_t *v308;
  unint64_t v309;
  std::__shared_weak_count *v310;
  unint64_t *v311;
  unint64_t v312;
  uint64_t *v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  unint64_t *v318;
  unint64_t v319;
  std::__shared_weak_count *v320;
  unint64_t *v321;
  unint64_t v322;
  float v323;
  float v324;
  _QWORD *v325;
  unint64_t v326;
  __int128 v327;
  _QWORD *v328;
  uint64_t v329;
  _DWORD *v330;
  int v331;
  int v332;
  int v333;
  unint64_t v334;
  uint64_t **v335;
  uint64_t *v336;
  unsigned __int8 v341;
  uint64_t v342;
  uint64_t v343;
  std::__shared_weak_count *v344;
  unint64_t *v345;
  unint64_t v346;
  unint64_t v347;
  unint64_t *v348;
  unint64_t v349;
  uint64_t v350;
  unsigned int v351;
  float *v352;
  float v353;
  int v355;
  char v356;
  char v357;
  unsigned int v358;
  unsigned int v359;
  unsigned int v360;
  unsigned int v361;
  unsigned int v362;
  unsigned int v363;
  unsigned int v364;
  unsigned int v365;
  unsigned int v366;
  float v367;
  unsigned int v368;
  uint64_t v369;
  unsigned int v370;
  float *v371;
  float v372;
  unsigned int v373;
  float v374;
  unint64_t v375;
  uint64_t v376;
  uint64_t v377;
  _QWORD *v378;
  _QWORD *v379;
  uint64_t v380;
  _QWORD *v381;
  unint64_t v382;
  uint64_t v383;
  _QWORD *v384;
  unint64_t v385;
  uint64_t v386;
  uint64_t v387;
  unint64_t v388;
  uint64_t v389;
  unsigned int v390;
  float *v391;
  float v392;
  int v393;
  char v394;
  char v395;
  uint64_t v396;
  unsigned int v397;
  float *v398;
  float v399;
  unsigned int v400;
  float v401;
  uint64_t v402;
  unsigned int v403;
  float *v404;
  unsigned int v405;
  float v406;
  float v407;
  float v408;
  float v409;
  float v410;
  float v411;
  BOOL v412;
  unint64_t v413;
  uint64_t v414;
  float v415;
  float v416;
  float v417;
  float v418;
  float *v419;
  float v420;
  float v421;
  uint64_t v422;
  float v423;
  float v424;
  float v425;
  BOOL v426;
  unint64_t v427;
  uint64_t v428;
  float *v429;
  uint64_t v430;
  float v431;
  float v432;
  unint64_t v433;
  float *v434;
  unint64_t v435;
  float *v436;
  float v437;
  uint64_t v438;
  unsigned int v439;
  float *v440;
  float v441;
  unsigned int v442;
  float v443;
  uint64_t v444;
  unsigned int v445;
  float *v446;
  unsigned int v447;
  float v448;
  unint64_t v449;
  uint64_t v450;
  float32x2_t v451;
  float32x2_t *v452;
  uint64_t **v453;
  uint64_t *v454;
  unsigned __int8 v455;
  __int128 v456;
  __int128 v457;
  uint64_t v458;
  float v459;
  unint64_t v460;
  uint64_t v461;
  std::__shared_weak_count *v462;
  unint64_t *v463;
  unint64_t v464;
  unint64_t v465;
  unint64_t *v466;
  unint64_t v467;
  uint64_t v468;
  unsigned int v469;
  float *v470;
  float v471;
  BOOL v472;
  int v473;
  char v474;
  char v475;
  _BOOL4 v476;
  unint64_t v477;
  float *v478;
  unint64_t v479;
  uint64_t v480;
  uint64_t v481;
  unsigned int v482;
  float *v483;
  float v484;
  BOOL v485;
  unsigned int v486;
  float v487;
  float *v488;
  unsigned int v489;
  unsigned int v490;
  unsigned int v491;
  unsigned int v492;
  unsigned int v493;
  float v494;
  unsigned int v495;
  uint64_t v496;
  unsigned int v497;
  float *v498;
  float v499;
  unsigned int v500;
  float v501;
  uint64_t v502;
  unsigned int v503;
  float *v504;
  unsigned int v505;
  float v506;
  float v507;
  float v508;
  float v509;
  float v510;
  float v511;
  float v512;
  float v513;
  float v514;
  float v515;
  float v516;
  float v517;
  float *v518;
  uint64_t v519;
  float *v520;
  BOOL v521;
  unint64_t v522;
  uint64_t v523;
  _QWORD *v524;
  ggl::PipelineSetup *v525;
  ggl::PipelineSetup *v526;
  void *v527;
  ggl::PipelineSetup *v528;
  std::__shared_weak_count *v529;
  uint64_t v530;
  unint64_t *v531;
  unint64_t v532;
  std::__shared_weak_count *v533;
  unint64_t *v534;
  unint64_t v535;
  uint64_t v536;
  unint64_t *v537;
  unint64_t v538;
  unint64_t *v539;
  unint64_t *v540;
  unint64_t v541;
  uint64_t v542;
  _QWORD *v543;
  std::__shared_weak_count *v544;
  uint64_t v545;
  unint64_t *v546;
  unint64_t v547;
  std::__shared_weak_count *v548;
  unint64_t *v549;
  unint64_t v550;
  uint64_t v551;
  unint64_t *v552;
  unint64_t v553;
  unint64_t *v554;
  unint64_t *v555;
  unint64_t v556;
  uint64_t v557;
  _QWORD *v558;
  uint64_t v559;
  _QWORD *i;
  unint64_t v561;
  float v562;
  _BYTE *v563;
  id v564;
  uint64_t v565;
  ggl::PipelineSetup *v566;
  ggl::PipelineSetup *v567;
  _QWORD *v568;
  uint64_t PointyRoofDepthPipelineSetupForGroup;
  uint64_t v570;
  uint64_t v571;
  ggl::PipelineSetup *v572;
  id v573;
  ggl::PipelineSetup *v574;
  ggl::PipelineSetup *v575;
  float32x2_t v576;
  id v577;
  _QWORD *v578;
  _QWORD *v579;
  uint32x2_t v580;
  unsigned int v581;
  unsigned int v582;
  unsigned int v583;
  unsigned int v584;
  unsigned int v585;
  unsigned int v586;
  unsigned int v587;
  unsigned int v588;
  unsigned int v589;
  unsigned int v590;
  unsigned int v591;
  unsigned int v592;
  unsigned int v593;
  unsigned int v594;
  unsigned int v595;
  unsigned int v596;
  unsigned int v597;
  unsigned int v598;
  unsigned int v599;
  float v600;
  float v601;
  unsigned int v602;
  float v603;
  __int128 v604;
  _QWORD *v605;
  __int128 v606;
  uint64_t *v607;
  uint64_t *v608;
  uint64_t v609;
  float v610;
  uint64_t v611;
  __int128 v612;
  uint64_t v613;
  _QWORD *v614;
  __int128 v615;
  __int128 v616;
  _QWORD *v617;
  __int128 v618;
  char v619;
  uint64_t v620;
  uint64_t v621;
  __int128 v622;
  ggl::PipelineSetup *v623;
  uint64_t v624;
  ggl::PipelineSetup *v625;
  ggl::PipelineSetup *v626;
  uint64_t v627;
  ggl::PipelineSetup *v628;
  uint64_t v629;
  int32x2_t v630;
  uint64_t v631;
  BOOL v632;
  __int128 v633;
  uint64_t v634;
  unint64_t v635;
  __int16 v636;
  uint64_t v637;
  uint64_t v638;
  std::__shared_weak_count *v639;
  _QWORD v640[2];
  unsigned __int8 v641;
  unint64_t v642;
  char v643;
  _QWORD v644[3];
  _QWORD *v645;
  uint64_t v646;

  v646 = *MEMORY[0x1E0C80C00];
  v573 = a3;
  v18 = a4;
  v620 = a1;
  v19 = ggl::FragmentedPool<ggl::RenderItem>::pop(*(_QWORD *)(*(_QWORD *)(a1 + 392) + 496));
  getTopDepthPipelineSetupForGroup(v19, v18, a5);
  v20 = ggl::FragmentedPool<ggl::RenderItem>::pop(*(_QWORD *)(*(_QWORD *)(a1 + 392) + 488));
  getExtrusionDepthPipelineSetupForGroup(v20, v18, a5);
  v571 = v19;
  v21 = ggl::FragmentedPool<ggl::RenderItem>::pop(*(_QWORD *)(*(_QWORD *)(v620 + 392) + 504));
  PointyRoofDepthPipelineSetupForGroup = getPointyRoofDepthPipelineSetupForGroup(v21, v18, a5);
  v570 = v20;
  v22 = *(_QWORD *)(*(_QWORD *)(v620 + 392) + 584);
  v23 = *(_QWORD *)(v22 + 8);
  v621 = a5;
  if (v23 == *(_QWORD *)v22)
  {
    v35 = *(_QWORD *)(v22 + 88);
    if (!v35)
    {
LABEL_696:
      std::__throw_bad_function_call[abi:nn180100]();
LABEL_700:
      __break(1u);
      return;
    }
    v24 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v35 + 48))(v35);
    v25 = *(uint64_t **)(v22 + 40);
    v36 = *(_QWORD *)(v22 + 48);
    if ((unint64_t)v25 >= v36)
    {
      v38 = *(_QWORD *)(v22 + 32);
      v39 = ((uint64_t)v25 - v38) >> 3;
      v40 = v39 + 1;
      if (!((unint64_t)(v39 + 1) >> 61))
      {
        v41 = v36 - v38;
        if (v41 >> 2 > v40)
          v40 = v41 >> 2;
        if ((unint64_t)v41 >= 0x7FFFFFFFFFFFFFF8)
          v42 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v42 = v40;
        if (v42)
        {
          v43 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v22 + 56) + 16))(*(_QWORD *)(v22 + 56), 8 * v42, 8);
          v33 = (uint64_t *)(v43 + 8 * v39);
          v34 = v43 + 8 * v42;
          if (v43)
            *v33 = v24;
        }
        else
        {
          v34 = 0;
          v33 = (uint64_t *)(8 * v39);
        }
        v37 = v33 + 1;
        v53 = *(_QWORD *)(v22 + 32);
        v44 = *(_QWORD *)(v22 + 40);
        if (v44 == v53)
          goto LABEL_50;
        v54 = v44 - v53 - 8;
        if (v54 < 0x38)
        {
          v56 = *(_QWORD *)(v22 + 40);
        }
        else if ((unint64_t)(v44 - (_QWORD)v33) < 0x20)
        {
          v56 = *(_QWORD *)(v22 + 40);
        }
        else
        {
          v55 = (v54 >> 3) + 1;
          v56 = v44 - 8 * (v55 & 0x3FFFFFFFFFFFFFFCLL);
          v57 = v33 - 2;
          v58 = (__int128 *)(v44 - 16);
          v59 = v55 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v60 = *v58;
            *((_OWORD *)v57 - 1) = *(v58 - 1);
            *(_OWORD *)v57 = v60;
            v57 -= 4;
            v58 -= 2;
            v59 -= 4;
          }
          while (v59);
          v33 -= v55 & 0x3FFFFFFFFFFFFFFCLL;
          if (v55 == (v55 & 0x3FFFFFFFFFFFFFFCLL))
            goto LABEL_49;
        }
        do
        {
          v62 = *(_QWORD *)(v56 - 8);
          v56 -= 8;
          *--v33 = v62;
        }
        while (v56 != v53);
        goto LABEL_49;
      }
LABEL_698:
      abort();
    }
  }
  else
  {
    v24 = *(_QWORD *)(v23 - 8);
    *(_QWORD *)(v22 + 8) = v23 - 8;
    v25 = *(uint64_t **)(v22 + 40);
    v26 = *(_QWORD *)(v22 + 48);
    if ((unint64_t)v25 >= v26)
    {
      v27 = *(_QWORD *)(v22 + 32);
      v28 = ((uint64_t)v25 - v27) >> 3;
      v29 = v28 + 1;
      if (!((unint64_t)(v28 + 1) >> 61))
      {
        v30 = v26 - v27;
        if (v30 >> 2 > v29)
          v29 = v30 >> 2;
        if ((unint64_t)v30 >= 0x7FFFFFFFFFFFFFF8)
          v31 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v31 = v29;
        if (v31)
        {
          v32 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v22 + 56) + 16))(*(_QWORD *)(v22 + 56), 8 * v31, 8);
          v33 = (uint64_t *)(v32 + 8 * v28);
          v34 = v32 + 8 * v31;
          if (v32)
            *v33 = v24;
        }
        else
        {
          v34 = 0;
          v33 = (uint64_t *)(8 * v28);
        }
        v37 = v33 + 1;
        v45 = *(_QWORD *)(v22 + 32);
        v44 = *(_QWORD *)(v22 + 40);
        if (v44 == v45)
          goto LABEL_50;
        v46 = v44 - v45 - 8;
        if (v46 < 0x38)
        {
          v48 = *(_QWORD *)(v22 + 40);
        }
        else if ((unint64_t)(v44 - (_QWORD)v33) < 0x20)
        {
          v48 = *(_QWORD *)(v22 + 40);
        }
        else
        {
          v47 = (v46 >> 3) + 1;
          v48 = v44 - 8 * (v47 & 0x3FFFFFFFFFFFFFFCLL);
          v49 = v33 - 2;
          v50 = (__int128 *)(v44 - 16);
          v51 = v47 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v52 = *v50;
            *((_OWORD *)v49 - 1) = *(v50 - 1);
            *(_OWORD *)v49 = v52;
            v49 -= 4;
            v50 -= 2;
            v51 -= 4;
          }
          while (v51);
          v33 -= v47 & 0x3FFFFFFFFFFFFFFCLL;
          if (v47 == (v47 & 0x3FFFFFFFFFFFFFFCLL))
            goto LABEL_49;
        }
        do
        {
          v61 = *(_QWORD *)(v48 - 8);
          v48 -= 8;
          *--v33 = v61;
        }
        while (v48 != v45);
LABEL_49:
        v44 = *(_QWORD *)(v22 + 32);
LABEL_50:
        *(_QWORD *)(v22 + 32) = v33;
        *(_QWORD *)(v22 + 40) = v37;
        v63 = *(_QWORD *)(v22 + 48);
        *(_QWORD *)(v22 + 48) = v34;
        if (v44)
          (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v22 + 56) + 40))(*(_QWORD *)(v22 + 56), v44, v63 - v44);
        goto LABEL_52;
      }
      goto LABEL_698;
    }
  }
  if (v25)
    *v25 = v24;
  v37 = v25 + 1;
LABEL_52:
  *(_QWORD *)(v22 + 40) = v37;
  *(_QWORD *)&v622 = v24;
  v64 = *(_QWORD *)(v22 + 120);
  if (!v64)
    goto LABEL_696;
  (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)v64 + 48))(v64, &v622);
  v577 = v18;
  v65 = *(uint64_t **)v621;
  v66 = *(_QWORD *)(v24 + 64);
  *(_QWORD *)(v66 + 24) = 0;
  v67 = *v65;
  *(_QWORD *)(v66 + 16) = *v65;
  v68 = *(_QWORD *)(v24 + 160);
  v69 = v65[1];
  if (v69)
  {
    v70 = (unint64_t *)(v69 + 8);
    do
      v71 = __ldxr(v70);
    while (__stxr(v71 + 1, v70));
  }
  v72 = *(std::__shared_weak_count **)(v68 + 24);
  *(_QWORD *)(v68 + 16) = v67;
  *(_QWORD *)(v68 + 24) = v69;
  if (v72)
  {
    p_shared_owners = (unint64_t *)&v72->__shared_owners_;
    do
      v74 = __ldaxr(p_shared_owners);
    while (__stlxr(v74 - 1, p_shared_owners));
    if (!v74)
    {
      ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
      std::__shared_weak_count::__release_weak(v72);
    }
  }
  v75 = *(uint64_t **)(v621 + 8);
  v76 = *(uint64_t **)(v24 + 64);
  v76[1] = 0;
  v77 = *v75;
  *v76 = *v75;
  v78 = *(_QWORD **)(v24 + 160);
  v79 = v75[1];
  if (v79)
  {
    v80 = (unint64_t *)(v79 + 8);
    do
      v81 = __ldxr(v80);
    while (__stxr(v81 + 1, v80));
  }
  v82 = (std::__shared_weak_count *)v78[1];
  *v78 = v77;
  v78[1] = v79;
  if (v82)
  {
    v83 = (unint64_t *)&v82->__shared_owners_;
    do
      v84 = __ldaxr(v83);
    while (__stlxr(v84 - 1, v83));
    if (!v84)
    {
      ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
      std::__shared_weak_count::__release_weak(v82);
    }
  }
  v85 = *(_QWORD *)(*(_QWORD *)(v24 + 64) + 32);
  v622 = 0uLL;
  v86 = *(_QWORD *)(v85 + 8);
  *(_QWORD *)&v87 = 0;
  *((_QWORD *)&v87 + 1) = v85;
  if (v86)
    v88 = *(ggl::PipelineSetup **)(v85 + 72);
  else
    v88 = 0;
  v615 = v87;
  v622 = v87;
  v623 = 0;
  v624 = v86;
  v626 = v88;
  LOWORD(v625) = 1;
  *(_QWORD *)v88 = *(_QWORD *)(v621 + 76);
  v89 = (_DWORD *)objc_msgSend(v577, "origin");
  *((_DWORD *)v88 + 4) = *v89;
  *((_DWORD *)v88 + 5) = v89[1];
  *((_DWORD *)v88 + 6) = v89[2];
  objc_msgSend(v577, "size");
  *((_DWORD *)v88 + 8) = v90;
  *((_DWORD *)v88 + 9) = v91;
  *((_DWORD *)v88 + 10) = v92;
  v572 = (ggl::PipelineSetup *)v24;
  if (v86)
  {
    if ((_QWORD)v615 && *(_BYTE *)(*((_QWORD *)&v615 + 1) + 17) != 2)
      (*(void (**)(void))(*(_QWORD *)v615 + 64))();
    v93 = *(_QWORD *)(*((_QWORD *)&v615 + 1) + 64);
    if (v93 <= v86)
      v93 = v86;
    *(_QWORD *)(*((_QWORD *)&v615 + 1) + 56) = 0;
    *(_QWORD *)(*((_QWORD *)&v615 + 1) + 64) = v93;
  }
  v94 = *(_QWORD **)(v24 + 64);
  v95 = (_QWORD *)v94[6];
  v96 = v95[1];
  if (v96)
    v97 = (_DWORD *)v95[9];
  else
    v97 = 0;
  v568 = a6;
  v97[92] = *(_DWORD *)(v621 + 56);
  v97[93] = *(_DWORD *)(v621 + 60);
  v97[94] = *(_DWORD *)(v621 + 64);
  v97[89] = 1065353216;
  if (v97 && v96)
  {
    if (v95[8] > v96)
      v96 = v95[8];
    v95[7] = 0;
    v95[8] = v96;
  }
  v98 = *(_QWORD **)(*(_QWORD *)(v621 + 40) + 8);
  v99 = v98[1];
  if ((v99 & (v99 - 1)) != 0)
  {
    v101 = 0x41E8D6E445F4145;
    if (v99 <= 0x41E8D6E445F4145)
      v101 = 0x41E8D6E445F4145 % v99;
    v100 = *(_QWORD **)(*v98 + 8 * v101);
    do
    {
      do
        v100 = (_QWORD *)*v100;
      while (v100[1] != 0x41E8D6E445F4145);
    }
    while (v100[2] != 0x41E8D6E445F4145);
  }
  else
  {
    v100 = *(_QWORD **)(*v98 + 8 * ((v99 - 1) & 0x41E8D6E445F4145));
    do
    {
      do
        v100 = (_QWORD *)*v100;
      while (v100[1] != 0x41E8D6E445F4145);
    }
    while (v100[2] != 0x41E8D6E445F4145);
  }
  v102 = *(uint64_t **)(v100[5] + 32);
  v94[11] = 0;
  v103 = *v102;
  v94[10] = *v102;
  v104 = *(_QWORD *)(v24 + 160);
  v105 = v102[1];
  if (v105)
  {
    v106 = (unint64_t *)(v105 + 8);
    do
      v107 = __ldxr(v106);
    while (__stxr(v107 + 1, v106));
  }
  v108 = *(std::__shared_weak_count **)(v104 + 88);
  *(_QWORD *)(v104 + 80) = v103;
  *(_QWORD *)(v104 + 88) = v105;
  if (v108)
  {
    v109 = (unint64_t *)&v108->__shared_owners_;
    do
      v110 = __ldaxr(v109);
    while (__stlxr(v110 - 1, v109));
    if (!v110)
    {
      ((void (*)(std::__shared_weak_count *))v108->__on_zero_shared)(v108);
      std::__shared_weak_count::__release_weak(v108);
    }
  }

  v111 = *(_QWORD *)(v24 + 64);
  v609 = *(_QWORD *)(v111 + 48);
  v614 = *(_QWORD **)(v111 + 64);
  v112 = 1.0;
  if (!*(_BYTE *)(a2 + 32))
    v112 = 0.0;
  v610 = v112;
  v113 = *(_QWORD *)(v620 + 392);
  if (*(_BYTE *)(a2 + 32))
  {
    v114 = *(_QWORD *)(v113 + 576);
    v115 = *(_QWORD *)(v114 + 8);
    if (v115 != *(_QWORD *)v114)
    {
      v116 = *(_QWORD *)(v115 - 8);
      *(_QWORD *)(v114 + 8) = v115 - 8;
      v117 = *(uint64_t **)(v114 + 40);
      v118 = *(_QWORD *)(v114 + 48);
      if ((unint64_t)v117 >= v118)
      {
        v119 = *(_QWORD *)(v114 + 32);
        v120 = ((uint64_t)v117 - v119) >> 3;
        v121 = v120 + 1;
        if (!((unint64_t)(v120 + 1) >> 61))
        {
          v122 = v118 - v119;
          if (v122 >> 2 > v121)
            v121 = v122 >> 2;
          if ((unint64_t)v122 >= 0x7FFFFFFFFFFFFFF8)
            v123 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v123 = v121;
          if (v123)
          {
            v124 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v114 + 56) + 16))(*(_QWORD *)(v114 + 56), 8 * v123, 8);
            v125 = (uint64_t *)(v124 + 8 * v120);
            v126 = v124 + 8 * v123;
            if (v124)
              *v125 = v116;
          }
          else
          {
            v126 = 0;
            v125 = (uint64_t *)(8 * v120);
          }
          v142 = v125 + 1;
          v153 = *(_QWORD *)(v114 + 32);
          v152 = *(_QWORD *)(v114 + 40);
          if (v152 == v153)
            goto LABEL_202;
          v154 = v152 - v153 - 8;
          if (v154 < 0x38)
          {
            v156 = *(_QWORD *)(v114 + 40);
          }
          else if ((unint64_t)(v152 - (_QWORD)v125) < 0x20)
          {
            v156 = *(_QWORD *)(v114 + 40);
          }
          else
          {
            v155 = (v154 >> 3) + 1;
            v156 = v152 - 8 * (v155 & 0x3FFFFFFFFFFFFFFCLL);
            v157 = v125 - 2;
            v158 = (__int128 *)(v152 - 16);
            v159 = v155 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v160 = *v158;
              *((_OWORD *)v157 - 1) = *(v158 - 1);
              *(_OWORD *)v157 = v160;
              v157 -= 4;
              v158 -= 2;
              v159 -= 4;
            }
            while (v159);
            v125 -= v155 & 0x3FFFFFFFFFFFFFFCLL;
            if (v155 == (v155 & 0x3FFFFFFFFFFFFFFCLL))
              goto LABEL_201;
          }
          do
          {
            v184 = *(_QWORD *)(v156 - 8);
            v156 -= 8;
            *--v125 = v184;
          }
          while (v156 != v153);
LABEL_201:
          v152 = *(_QWORD *)(v114 + 32);
LABEL_202:
          *(_QWORD *)(v114 + 32) = v125;
          *(_QWORD *)(v114 + 40) = v142;
          v195 = *(_QWORD *)(v114 + 48);
          *(_QWORD *)(v114 + 48) = v126;
          if (v152)
            (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v114 + 56) + 40))(*(_QWORD *)(v114 + 56), v152, v195 - v152);
          goto LABEL_204;
        }
        goto LABEL_699;
      }
      goto LABEL_132;
    }
    v140 = *(_QWORD *)(v114 + 88);
    if (v140)
    {
      v116 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v140 + 48))(v140);
      v117 = *(uint64_t **)(v114 + 40);
      v141 = *(_QWORD *)(v114 + 48);
      if ((unint64_t)v117 >= v141)
      {
        v146 = *(_QWORD *)(v114 + 32);
        v147 = ((uint64_t)v117 - v146) >> 3;
        v148 = v147 + 1;
        if (!((unint64_t)(v147 + 1) >> 61))
        {
          v149 = v141 - v146;
          if (v149 >> 2 > v148)
            v148 = v149 >> 2;
          if ((unint64_t)v149 >= 0x7FFFFFFFFFFFFFF8)
            v150 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v150 = v148;
          if (v150)
          {
            v151 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v114 + 56) + 16))(*(_QWORD *)(v114 + 56), 8 * v150, 8);
            v125 = (uint64_t *)(v151 + 8 * v147);
            v126 = v151 + 8 * v150;
            if (v151)
              *v125 = v116;
          }
          else
          {
            v126 = 0;
            v125 = (uint64_t *)(8 * v147);
          }
          v142 = v125 + 1;
          v176 = *(_QWORD *)(v114 + 32);
          v152 = *(_QWORD *)(v114 + 40);
          if (v152 == v176)
            goto LABEL_202;
          v177 = v152 - v176 - 8;
          if (v177 < 0x38)
          {
            v179 = *(_QWORD *)(v114 + 40);
          }
          else if ((unint64_t)(v152 - (_QWORD)v125) < 0x20)
          {
            v179 = *(_QWORD *)(v114 + 40);
          }
          else
          {
            v178 = (v177 >> 3) + 1;
            v179 = v152 - 8 * (v178 & 0x3FFFFFFFFFFFFFFCLL);
            v180 = v125 - 2;
            v181 = (__int128 *)(v152 - 16);
            v182 = v178 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v183 = *v181;
              *((_OWORD *)v180 - 1) = *(v181 - 1);
              *(_OWORD *)v180 = v183;
              v180 -= 4;
              v181 -= 2;
              v182 -= 4;
            }
            while (v182);
            v125 -= v178 & 0x3FFFFFFFFFFFFFFCLL;
            if (v178 == (v178 & 0x3FFFFFFFFFFFFFFCLL))
              goto LABEL_201;
          }
          do
          {
            v194 = *(_QWORD *)(v179 - 8);
            v179 -= 8;
            *--v125 = v194;
          }
          while (v179 != v176);
          goto LABEL_201;
        }
LABEL_699:
        abort();
      }
LABEL_132:
      if (v117)
        *v117 = v116;
      v142 = v117 + 1;
LABEL_204:
      *(_QWORD *)(v114 + 40) = v142;
      *(_QWORD *)&v622 = v116;
      v196 = *(_QWORD *)(v114 + 120);
      if (v196)
      {
        (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)v196 + 48))(v196, &v622);
        v197 = **(_DWORD **)(v620 + 392);
        v198 = v577;
        v199 = *(uint64_t **)v621;
        v200 = *(_QWORD *)(v116 + 64);
        *(_QWORD *)(v200 + 24) = 0;
        v201 = *v199;
        *(_QWORD *)(v200 + 16) = *v199;
        v202 = *(_QWORD *)(v116 + 160);
        v203 = v199[1];
        if (v203)
        {
          v204 = (unint64_t *)(v203 + 8);
          do
            v205 = __ldxr(v204);
          while (__stxr(v205 + 1, v204));
        }
        v206 = *(std::__shared_weak_count **)(v202 + 24);
        *(_QWORD *)(v202 + 16) = v201;
        *(_QWORD *)(v202 + 24) = v203;
        if (v206)
        {
          v207 = (unint64_t *)&v206->__shared_owners_;
          do
            v208 = __ldaxr(v207);
          while (__stlxr(v208 - 1, v207));
          if (!v208)
          {
            ((void (*)(std::__shared_weak_count *))v206->__on_zero_shared)(v206);
            std::__shared_weak_count::__release_weak(v206);
          }
        }
        v209 = (ggl::PipelineSetup *)v116;
        v210 = *(_QWORD *)(*(_QWORD *)(v116 + 64) + 32);
        v622 = 0uLL;
        v211 = *(_QWORD *)(v210 + 8);
        *(_QWORD *)&v212 = 0;
        *((_QWORD *)&v212 + 1) = v210;
        if (v211)
          v213 = *(ggl::PipelineSetup **)(v210 + 72);
        else
          v213 = 0;
        v616 = v212;
        v622 = v212;
        v623 = 0;
        v624 = v211;
        v626 = v213;
        LOWORD(v625) = 1;
        *(_QWORD *)v213 = *(_QWORD *)(v621 + 76);
        v214 = (_DWORD *)objc_msgSend(v198, "origin");
        *((_DWORD *)v213 + 4) = *v214;
        *((_DWORD *)v213 + 5) = v214[1];
        *((_DWORD *)v213 + 6) = v214[2];
        objc_msgSend(v198, "size");
        *((_DWORD *)v213 + 8) = v215;
        *((_DWORD *)v213 + 9) = v216;
        *((_DWORD *)v213 + 10) = v217;
        if (v211)
        {
          if ((_QWORD)v616 && *(_BYTE *)(*((_QWORD *)&v616 + 1) + 17) != 2)
            (*(void (**)(void))(*(_QWORD *)v616 + 64))();
          v218 = *(_QWORD *)(*((_QWORD *)&v616 + 1) + 64);
          if (v218 <= v211)
            v218 = v211;
          *(_QWORD *)(*((_QWORD *)&v616 + 1) + 56) = 0;
          *(_QWORD *)(*((_QWORD *)&v616 + 1) + 64) = v218;
        }
        v219 = (_QWORD *)*((_QWORD *)v209 + 8);
        v220 = (_QWORD *)v219[6];
        v221 = v220[1];
        if (v221)
          v222 = (_DWORD *)v220[9];
        else
          v222 = 0;
        v222[92] = *(_DWORD *)(v621 + 56);
        v222[93] = *(_DWORD *)(v621 + 60);
        v222[94] = *(_DWORD *)(v621 + 64);
        v222[89] = v197;
        if (v222 && v221)
        {
          if (v220[8] > v221)
            v221 = v220[8];
          v220[7] = 0;
          v220[8] = v221;
        }
        v223 = *(_QWORD **)(*(_QWORD *)(v621 + 40) + 8);
        v224 = v223[1];
        if ((v224 & (v224 - 1)) != 0)
        {
          v226 = 0x41E8D6E445F4145;
          if (v224 <= 0x41E8D6E445F4145)
            v226 = 0x41E8D6E445F4145 % v224;
          v225 = *(_QWORD **)(*v223 + 8 * v226);
          do
          {
            do
              v225 = (_QWORD *)*v225;
            while (v225[1] != 0x41E8D6E445F4145);
          }
          while (v225[2] != 0x41E8D6E445F4145);
        }
        else
        {
          v225 = *(_QWORD **)(*v223 + 8 * ((v224 - 1) & 0x41E8D6E445F4145));
          do
          {
            do
              v225 = (_QWORD *)*v225;
            while (v225[1] != 0x41E8D6E445F4145);
          }
          while (v225[2] != 0x41E8D6E445F4145);
        }
        v227 = *(uint64_t **)(v225[5] + 32);
        v219[11] = 0;
        v228 = *v227;
        v219[10] = *v227;
        v229 = *((_QWORD *)v209 + 20);
        v230 = v227[1];
        if (v230)
        {
          v231 = (unint64_t *)(v230 + 8);
          do
            v232 = __ldxr(v231);
          while (__stxr(v232 + 1, v231));
        }
        v233 = *(std::__shared_weak_count **)(v229 + 88);
        *(_QWORD *)(v229 + 80) = v228;
        *(_QWORD *)(v229 + 88) = v230;
        if (v233)
        {
          v234 = (unint64_t *)&v233->__shared_owners_;
          do
            v235 = __ldaxr(v234);
          while (__stlxr(v235 - 1, v234));
          if (!v235)
          {
            ((void (*)(std::__shared_weak_count *))v233->__on_zero_shared)(v233);
            std::__shared_weak_count::__release_weak(v233);
          }
        }
        v236 = *(uint64_t **)(v621 + 8);
        v237 = (uint64_t *)*((_QWORD *)v209 + 8);
        v237[1] = 0;
        v238 = *v236;
        *v237 = *v236;
        v239 = (_QWORD *)*((_QWORD *)v209 + 20);
        v240 = v236[1];
        if (v240)
        {
          v241 = (unint64_t *)(v240 + 8);
          do
            v242 = __ldxr(v241);
          while (__stxr(v242 + 1, v241));
        }
        v243 = (std::__shared_weak_count *)v239[1];
        *v239 = v238;
        v239[1] = v240;
        if (v243)
        {
          v244 = (unint64_t *)&v243->__shared_owners_;
          do
            v245 = __ldaxr(v244);
          while (__stlxr(v245 - 1, v244));
          if (!v245)
          {
            ((void (*)(std::__shared_weak_count *))v243->__on_zero_shared)(v243);
            std::__shared_weak_count::__release_weak(v243);
          }
        }

        v246 = *((_QWORD *)v209 + 8);
        v617 = *(_QWORD **)(v246 + 48);
        v579 = *(_QWORD **)(v246 + 64);
        v247 = ggl::FragmentedPool<ggl::RenderItem>::pop(*(_QWORD *)(*(_QWORD *)(v620 + 392) + 528));
        FoggedExtrusionPipelineSetupForGroup = getFoggedExtrusionPipelineSetupForGroup(v247, v198, v621, **(float **)(v620 + 392));
        v566 = 0;
        v567 = (ggl::PipelineSetup *)FoggedExtrusionPipelineSetupForGroup;
        v249 = 0;
        goto LABEL_310;
      }
    }
LABEL_697:
    std::__throw_bad_function_call[abi:nn180100]();
    goto LABEL_700;
  }
  v127 = *(_QWORD *)(v113 + 560);
  v128 = *(_QWORD *)(v127 + 8);
  if (v128 == *(_QWORD *)v127)
  {
    v143 = *(_QWORD *)(v127 + 88);
    if (!v143)
      goto LABEL_697;
    v129 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v143 + 48))(v143);
    v130 = *(uint64_t **)(v127 + 40);
    v144 = *(_QWORD *)(v127 + 48);
    if ((unint64_t)v130 >= v144)
    {
      v161 = *(_QWORD *)(v127 + 32);
      v162 = ((uint64_t)v130 - v161) >> 3;
      v163 = v162 + 1;
      if ((unint64_t)(v162 + 1) >> 61)
        goto LABEL_699;
      v164 = v144 - v161;
      if (v164 >> 2 > v163)
        v163 = v164 >> 2;
      if ((unint64_t)v164 >= 0x7FFFFFFFFFFFFFF8)
        v165 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v165 = v163;
      if (v165)
      {
        v166 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v127 + 56) + 16))(*(_QWORD *)(v127 + 56), 8 * v165, 8);
        v138 = (uint64_t *)(v166 + 8 * v162);
        v139 = v166 + 8 * v165;
        if (v166)
          *v138 = v129;
      }
      else
      {
        v139 = 0;
        v138 = (uint64_t *)(8 * v162);
      }
      v145 = v138 + 1;
      v185 = *(_QWORD *)(v127 + 32);
      v167 = *(_QWORD *)(v127 + 40);
      if (v167 == v185)
        goto LABEL_262;
      v186 = v167 - v185 - 8;
      if (v186 < 0x38)
      {
        v188 = *(_QWORD *)(v127 + 40);
      }
      else if ((unint64_t)(v167 - (_QWORD)v138) < 0x20)
      {
        v188 = *(_QWORD *)(v127 + 40);
      }
      else
      {
        v187 = (v186 >> 3) + 1;
        v188 = v167 - 8 * (v187 & 0x3FFFFFFFFFFFFFFCLL);
        v189 = v138 - 2;
        v190 = (__int128 *)(v167 - 16);
        v191 = v187 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v192 = *v190;
          *((_OWORD *)v189 - 1) = *(v190 - 1);
          *(_OWORD *)v189 = v192;
          v189 -= 4;
          v190 -= 2;
          v191 -= 4;
        }
        while (v191);
        v138 -= v187 & 0x3FFFFFFFFFFFFFFCLL;
        if (v187 == (v187 & 0x3FFFFFFFFFFFFFFCLL))
          goto LABEL_261;
      }
      do
      {
        v250 = *(_QWORD *)(v188 - 8);
        v188 -= 8;
        *--v138 = v250;
      }
      while (v188 != v185);
      goto LABEL_261;
    }
  }
  else
  {
    v129 = *(_QWORD *)(v128 - 8);
    *(_QWORD *)(v127 + 8) = v128 - 8;
    v130 = *(uint64_t **)(v127 + 40);
    v131 = *(_QWORD *)(v127 + 48);
    if ((unint64_t)v130 >= v131)
    {
      v132 = *(_QWORD *)(v127 + 32);
      v133 = ((uint64_t)v130 - v132) >> 3;
      v134 = v133 + 1;
      if ((unint64_t)(v133 + 1) >> 61)
        goto LABEL_699;
      v135 = v131 - v132;
      if (v135 >> 2 > v134)
        v134 = v135 >> 2;
      if ((unint64_t)v135 >= 0x7FFFFFFFFFFFFFF8)
        v136 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v136 = v134;
      if (v136)
      {
        v137 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v127 + 56) + 16))(*(_QWORD *)(v127 + 56), 8 * v136, 8);
        v138 = (uint64_t *)(v137 + 8 * v133);
        v139 = v137 + 8 * v136;
        if (v137)
          *v138 = v129;
      }
      else
      {
        v139 = 0;
        v138 = (uint64_t *)(8 * v133);
      }
      v145 = v138 + 1;
      v168 = *(_QWORD *)(v127 + 32);
      v167 = *(_QWORD *)(v127 + 40);
      if (v167 == v168)
        goto LABEL_262;
      v169 = v167 - v168 - 8;
      if (v169 < 0x38)
      {
        v171 = *(_QWORD *)(v127 + 40);
      }
      else if ((unint64_t)(v167 - (_QWORD)v138) < 0x20)
      {
        v171 = *(_QWORD *)(v127 + 40);
      }
      else
      {
        v170 = (v169 >> 3) + 1;
        v171 = v167 - 8 * (v170 & 0x3FFFFFFFFFFFFFFCLL);
        v172 = v138 - 2;
        v173 = (__int128 *)(v167 - 16);
        v174 = v170 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v175 = *v173;
          *((_OWORD *)v172 - 1) = *(v173 - 1);
          *(_OWORD *)v172 = v175;
          v172 -= 4;
          v173 -= 2;
          v174 -= 4;
        }
        while (v174);
        v138 -= v170 & 0x3FFFFFFFFFFFFFFCLL;
        if (v170 == (v170 & 0x3FFFFFFFFFFFFFFCLL))
          goto LABEL_261;
      }
      do
      {
        v193 = *(_QWORD *)(v171 - 8);
        v171 -= 8;
        *--v138 = v193;
      }
      while (v171 != v168);
LABEL_261:
      v167 = *(_QWORD *)(v127 + 32);
LABEL_262:
      *(_QWORD *)(v127 + 32) = v138;
      *(_QWORD *)(v127 + 40) = v145;
      v251 = *(_QWORD *)(v127 + 48);
      *(_QWORD *)(v127 + 48) = v139;
      if (v167)
        (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v127 + 56) + 40))(*(_QWORD *)(v127 + 56), v167, v251 - v167);
      goto LABEL_264;
    }
  }
  if (v130)
    *v130 = v129;
  v145 = v130 + 1;
LABEL_264:
  *(_QWORD *)(v127 + 40) = v145;
  *(_QWORD *)&v622 = v129;
  v252 = *(_QWORD *)(v127 + 120);
  if (!v252)
    goto LABEL_697;
  (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)v252 + 48))(v252, &v622);
  v253 = **(_DWORD **)(v620 + 392);
  v254 = v577;
  v255 = *(uint64_t **)v621;
  v256 = *(_QWORD *)(v129 + 64);
  *(_QWORD *)(v256 + 24) = 0;
  v257 = *v255;
  *(_QWORD *)(v256 + 16) = *v255;
  v258 = *(_QWORD *)(v129 + 160);
  v259 = v255[1];
  if (v259)
  {
    v260 = (unint64_t *)(v259 + 8);
    do
      v261 = __ldxr(v260);
    while (__stxr(v261 + 1, v260));
  }
  v262 = *(std::__shared_weak_count **)(v258 + 24);
  *(_QWORD *)(v258 + 16) = v257;
  *(_QWORD *)(v258 + 24) = v259;
  if (v262)
  {
    v263 = (unint64_t *)&v262->__shared_owners_;
    do
      v264 = __ldaxr(v263);
    while (__stlxr(v264 - 1, v263));
    if (!v264)
    {
      ((void (*)(std::__shared_weak_count *))v262->__on_zero_shared)(v262);
      std::__shared_weak_count::__release_weak(v262);
    }
  }
  v265 = v129;
  v266 = *(_QWORD *)(*(_QWORD *)(v129 + 64) + 32);
  v622 = 0uLL;
  v267 = *(_QWORD *)(v266 + 8);
  *(_QWORD *)&v268 = 0;
  *((_QWORD *)&v268 + 1) = v266;
  if (v267)
    v269 = *(ggl::PipelineSetup **)(v266 + 72);
  else
    v269 = 0;
  v618 = v268;
  v622 = v268;
  v623 = 0;
  v624 = v267;
  v626 = v269;
  LOWORD(v625) = 1;
  *(_QWORD *)v269 = *(_QWORD *)(v621 + 76);
  v270 = (_DWORD *)objc_msgSend(v254, "origin");
  *((_DWORD *)v269 + 4) = *v270;
  *((_DWORD *)v269 + 5) = v270[1];
  *((_DWORD *)v269 + 6) = v270[2];
  objc_msgSend(v254, "size");
  *((_DWORD *)v269 + 8) = v271;
  *((_DWORD *)v269 + 9) = v272;
  *((_DWORD *)v269 + 10) = v273;
  if (v267)
  {
    if ((_QWORD)v618 && *(_BYTE *)(*((_QWORD *)&v618 + 1) + 17) != 2)
      (*(void (**)(void))(*(_QWORD *)v618 + 64))();
    v274 = *(_QWORD *)(*((_QWORD *)&v618 + 1) + 64);
    if (v274 <= v267)
      v274 = v267;
    *(_QWORD *)(*((_QWORD *)&v618 + 1) + 56) = 0;
    *(_QWORD *)(*((_QWORD *)&v618 + 1) + 64) = v274;
  }
  v249 = (ggl::PipelineSetup *)v265;
  v275 = *(_QWORD **)(v265 + 64);
  v276 = (_QWORD *)v275[6];
  v277 = v276[1];
  if (v277)
    v278 = (_DWORD *)v276[9];
  else
    v278 = 0;
  v278[92] = *(_DWORD *)(v621 + 56);
  v278[93] = *(_DWORD *)(v621 + 60);
  v278[94] = *(_DWORD *)(v621 + 64);
  v278[89] = v253;
  if (v278 && v277)
  {
    if (v276[8] > v277)
      v277 = v276[8];
    v276[7] = 0;
    v276[8] = v277;
  }
  v279 = *(_QWORD **)(*(_QWORD *)(v621 + 40) + 8);
  v280 = v279[1];
  if ((v280 & (v280 - 1)) != 0)
  {
    v282 = 0x41E8D6E445F4145;
    if (v280 <= 0x41E8D6E445F4145)
      v282 = 0x41E8D6E445F4145 % v280;
    v281 = *(_QWORD **)(*v279 + 8 * v282);
    do
    {
      do
        v281 = (_QWORD *)*v281;
      while (v281[1] != 0x41E8D6E445F4145);
    }
    while (v281[2] != 0x41E8D6E445F4145);
  }
  else
  {
    v281 = *(_QWORD **)(*v279 + 8 * ((v280 - 1) & 0x41E8D6E445F4145));
    do
    {
      do
        v281 = (_QWORD *)*v281;
      while (v281[1] != 0x41E8D6E445F4145);
    }
    while (v281[2] != 0x41E8D6E445F4145);
  }
  v283 = *(uint64_t **)(v281[5] + 32);
  v275[11] = 0;
  v284 = *v283;
  v275[10] = *v283;
  v285 = *(_QWORD *)(v265 + 160);
  v286 = v283[1];
  if (v286)
  {
    v287 = (unint64_t *)(v286 + 8);
    do
      v288 = __ldxr(v287);
    while (__stxr(v288 + 1, v287));
  }
  v289 = *(std::__shared_weak_count **)(v285 + 88);
  *(_QWORD *)(v285 + 80) = v284;
  *(_QWORD *)(v285 + 88) = v286;
  if (v289)
  {
    v290 = (unint64_t *)&v289->__shared_owners_;
    do
      v291 = __ldaxr(v290);
    while (__stlxr(v291 - 1, v290));
    if (!v291)
    {
      ((void (*)(std::__shared_weak_count *))v289->__on_zero_shared)(v289);
      std::__shared_weak_count::__release_weak(v289);
    }
  }

  v292 = *(_QWORD *)(v265 + 64);
  v617 = *(_QWORD **)(v292 + 48);
  v579 = *(_QWORD **)(v292 + 64);
  v293 = ggl::FragmentedPool<ggl::RenderItem>::pop(*(_QWORD *)(*(_QWORD *)(v620 + 392) + 512));
  FoggedExtrusionPipelineSetupForGroup = getExtrusionPipelineSetupForGroup(v293, v254, v621, **(float **)(v620 + 392));
  v566 = (ggl::PipelineSetup *)FoggedExtrusionPipelineSetupForGroup;
  v567 = 0;
  v209 = 0;
LABEL_310:
  v574 = v249;
  v575 = v209;
  v294 = *(_QWORD *)(FoggedExtrusionPipelineSetupForGroup + 64);
  v578 = *(_QWORD **)(v294 + 64);
  v295 = *(_QWORD **)(v294 + 48);
  v564 = v18;
  if (*(_BYTE *)(*(_QWORD *)(v620 + 392) + 769))
  {
    v296 = v621;
    v297 = objc_msgSend(v573, "alphaAtlas", v18);
    v298 = **(id **)(v621 + 40);
    objc_msgSend(v298, "sizeInPixels");
    v300 = v299;
    v6 = v301;

    v302 = ggl::FragmentedPool<ggl::RenderItem>::pop(*(_QWORD *)(*(_QWORD *)(v620 + 392) + 600));
    v303 = *(uint64_t **)v621;
    v304 = *(uint64_t **)(v302 + 64);
    v304[1] = 0;
    v305 = *v303;
    *v304 = *v303;
    v306 = *(_QWORD **)(v302 + 160);
    v307 = v303[1];
    if (v307)
    {
      v308 = (unint64_t *)(v307 + 8);
      do
        v309 = __ldxr(v308);
      while (__stxr(v309 + 1, v308));
    }
    v310 = (std::__shared_weak_count *)v306[1];
    *v306 = v305;
    v306[1] = v307;
    if (v310)
    {
      v311 = (unint64_t *)&v310->__shared_owners_;
      do
        v312 = __ldaxr(v311);
      while (__stlxr(v312 - 1, v311));
      if (!v312)
      {
        ((void (*)(std::__shared_weak_count *))v310->__on_zero_shared)(v310);
        std::__shared_weak_count::__release_weak(v310);
      }
    }
    v313 = *(uint64_t **)(v621 + 8);
    v314 = *(_QWORD *)(v302 + 64);
    *(_QWORD *)(v314 + 40) = 0;
    v315 = *v313;
    *(_QWORD *)(v314 + 32) = *v313;
    v316 = *(_QWORD *)(v302 + 160);
    v317 = v313[1];
    if (v317)
    {
      v318 = (unint64_t *)(v317 + 8);
      do
        v319 = __ldxr(v318);
      while (__stxr(v319 + 1, v318));
    }
    v320 = *(std::__shared_weak_count **)(v316 + 40);
    *(_QWORD *)(v316 + 32) = v315;
    *(_QWORD *)(v316 + 40) = v317;
    if (v320)
    {
      v321 = (unint64_t *)&v320->__shared_owners_;
      do
        v322 = __ldaxr(v321);
      while (__stlxr(v322 - 1, v321));
      if (!v322)
      {
        ((void (*)(std::__shared_weak_count *))v320->__on_zero_shared)(v320);
        std::__shared_weak_count::__release_weak(v320);
      }
    }
    **(_QWORD **)(v302 + 96) = *(_QWORD *)(v297 + 24);
    v565 = v302;
    v325 = *(_QWORD **)(*(_QWORD *)(v302 + 64) + 16);
    v622 = 0uLL;
    v326 = v325[1];
    *(_QWORD *)&v327 = 0;
    *((_QWORD *)&v327 + 1) = v325;
    v328 = v325;
    if (v326)
      v329 = v325[9];
    else
      v329 = 0;
    v612 = v327;
    v622 = v327;
    v623 = 0;
    v624 = v326;
    v626 = (ggl::PipelineSetup *)v329;
    LOWORD(v625) = 1;
    v323 = v300;
    *(float *)(v329 + 288) = v323;
    v324 = v6;
    *(float *)(v329 + 292) = v324;
    *(_DWORD *)(v329 + 336) = *(_DWORD *)(v621 + 80);
    *(_QWORD *)v329 = 0;
    *(_QWORD *)(v329 + 8) = 0;
    v330 = (_DWORD *)objc_msgSend(v577, "origin");
    *(_DWORD *)(v329 + 304) = *v330;
    *(_DWORD *)(v329 + 308) = v330[1];
    *(_DWORD *)(v329 + 312) = v330[2];
    objc_msgSend(v577, "size");
    *(_DWORD *)(v329 + 320) = v331;
    *(_DWORD *)(v329 + 324) = v332;
    *(_DWORD *)(v329 + 328) = v333;
    *(float *)(v329 + 340) = v610;
    if (v326)
    {
      if ((_QWORD)v612 && *(_BYTE *)(*((_QWORD *)&v612 + 1) + 17) != 2)
        (*(void (**)(void))(*(_QWORD *)v612 + 64))();
      v334 = *(_QWORD *)(*((_QWORD *)&v612 + 1) + 64);
      if (v334 <= v326)
        v334 = v326;
      *(_QWORD *)(*((_QWORD *)&v612 + 1) + 56) = 0;
      *(_QWORD *)(*((_QWORD *)&v612 + 1) + 64) = v334;
    }
  }
  else
  {
    v565 = 0;
    v328 = 0;
    v296 = v621;
  }
  v335 = *(uint64_t ***)(v296 + 16);
  v336 = *v335;
  __asm { FMOV            V0.2S, #1.0 }
  v613 = _D0;
  v607 = v335[1];
  if (*v335 == v607)
  {
    v611 = 0;
  }
  else
  {
    v605 = v328;
    v611 = 0;
    v341 = 0;
    v576 = (float32x2_t)vdup_n_s32(0x37800080u);
    v12 = 1.0;
    do
    {
      v343 = *v336;
      v344 = (std::__shared_weak_count *)v336[1];
      *(_QWORD *)&v633 = *v336;
      *((_QWORD *)&v633 + 1) = v344;
      if (v344)
      {
        v345 = (unint64_t *)&v344->__shared_owners_;
        do
          v346 = __ldxr(v345);
        while (__stxr(v346 + 1, v345));
        *((_QWORD *)&v622 + 1) = v344;
        do
          v347 = __ldxr(v345);
        while (__stxr(v347 + 1, v345));
      }
      else
      {
        *((_QWORD *)&v622 + 1) = 0;
      }
      *(_QWORD *)&v622 = v343;
      v623 = 0;
      v624 = 0;
      LOBYTE(v625) = 0;
      if (v343)
        LODWORD(v343) = (*(uint64_t (**)(uint64_t, ggl::PipelineSetup **))(*(_QWORD *)v343 + 48))(v343, &v623);
      LOBYTE(v625) = v343;
      if (v344)
      {
        v348 = (unint64_t *)&v344->__shared_owners_;
        do
          v349 = __ldaxr(v348);
        while (__stlxr(v349 - 1, v348));
        if (!v349)
        {
          ((void (*)(std::__shared_weak_count *))v344->__on_zero_shared)(v344);
          std::__shared_weak_count::__release_weak(v344);
        }
        LODWORD(v343) = v625;
      }
      if (!(_DWORD)v343)
        goto LABEL_399;
      v350 = *(_QWORD *)(v622 + 24);
      v351 = (int)*(float *)(v296 + 88) >= 0x17 ? 23 : (int)*(float *)(v296 + 88);
      if ((v352 = *(float **)v350) != 0
        && (v353 = *v352, LODWORD(v352) = *v352 == v12, *(_BYTE *)(v350 + 10))
        && (v353 != 0.0 ? (_ZF = v353 == v12) : (_ZF = 1), !_ZF)
        || (v355 = *(unsigned __int8 *)(v350 + v352 + 11), v353 = 0.0, v355 == 2))
      {
        LOBYTE(v633) = 1;
        LOBYTE(v638) = 1;
        v356 = *(_BYTE *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<BOOL>((unsigned __int16 *)v350, 0x5Bu, v351, 0, &v633);
        v357 = *(_BYTE *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<BOOL>((unsigned __int16 *)v350, 0x5Bu, v351, 1, &v638);
        if (v353 < v12)
          v357 = v356;
      }
      else
      {
        v357 = *(_BYTE *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<BOOL>(*(unsigned __int16 **)(v622 + 24), 0x5Bu, v351, v355, 0);
      }
      v296 = v621;
      if (v357)
      {
        if ((int)*(float *)(v621 + 88) >= 0x17)
          v358 = 23;
        else
          v358 = (int)*(float *)(v621 + 88);
        gss::RenderStyle<gss::PropertyID>::valueForKeyAtZ<geo::Color<unsigned short,4,(geo::ColorSpace)0>>((unint64_t *)&v633, *(_QWORD *)(v622 + 24), 0xA1u, v358, 2u, 0);
        LOWORD(v9) = WORD1(v633);
        LOWORD(v353) = v633;
        LOWORD(v6) = WORD3(v633);
        LOWORD(v11) = WORD2(v633);
        if ((int)*(float *)(v621 + 88) >= 0x17)
          v359 = 23;
        else
          v359 = (int)*(float *)(v621 + 88);
        gss::RenderStyle<gss::PropertyID>::valueForKeyAtZ<geo::Color<unsigned short,4,(geo::ColorSpace)0>>((unint64_t *)&v633, *(_QWORD *)(v622 + 24), 0xA0u, v359, 2u, 0);
        v602 = LODWORD(v353);
        LOWORD(v360) = v633;
        v593 = v360;
        LOWORD(v360) = WORD1(v633);
        v595 = v360;
        LOWORD(v360) = WORD2(v633);
        v597 = v360;
        v599 = LODWORD(v6);
        LOWORD(v10) = WORD3(v633);
        if ((int)*(float *)(v621 + 88) >= 0x17)
          v361 = 23;
        else
          v361 = (int)*(float *)(v621 + 88);
        gss::RenderStyle<gss::PropertyID>::valueForKeyAtZ<geo::Color<unsigned short,4,(geo::ColorSpace)0>>((unint64_t *)&v633, *(_QWORD *)(v622 + 24), 0xA3u, v361, 2u, 0);
        LOWORD(v8) = WORD1(v633);
        LOWORD(v353) = v633;
        LOWORD(v6) = WORD3(v633);
        LOWORD(v7) = WORD2(v633);
        if ((int)*(float *)(v621 + 88) >= 0x17)
          v362 = 23;
        else
          v362 = (int)*(float *)(v621 + 88);
        gss::RenderStyle<gss::PropertyID>::valueForKeyAtZ<geo::Color<unsigned short,4,(geo::ColorSpace)0>>((unint64_t *)&v633, *(_QWORD *)(v622 + 24), 3u, v362, 2u, 0);
        v583 = (unsigned __int16)v633;
        v363 = WORD1(v633);
        LOWORD(v364) = WORD2(v633);
        v584 = v364;
        LOWORD(v364) = WORD3(v633);
        v585 = v364;
        if ((int)*(float *)(v621 + 88) >= 0x17)
          v365 = 23;
        else
          v365 = (int)*(float *)(v621 + 88);
        gss::RenderStyle<gss::PropertyID>::valueForKeyAtZ<geo::Color<unsigned short,4,(geo::ColorSpace)0>>((unint64_t *)&v633, *(_QWORD *)(v622 + 24), 0x5Du, v365, 2u, 0);
        v589 = LODWORD(v9);
        v591 = LODWORD(v11);
        v580.i32[0] = (unsigned __int16)v633;
        v580.i32[1] = WORD1(v633);
        LOWORD(v366) = WORD2(v633);
        v582 = v366;
        v367 = *(float *)(v621 + 88);
        v368 = (int)v367;
        LOWORD(v367) = WORD3(v633);
        v581 = LODWORD(v367);
        v369 = *(_QWORD *)(v622 + 24);
        if (v368 >= 0x17)
          v370 = 23;
        else
          v370 = v368;
        v371 = *(float **)v369;
        v587 = LODWORD(v6);
        if (*(_QWORD *)v369
          && (v372 = *v371, LODWORD(v371) = *v371 == v12, *(_BYTE *)(v369 + 10))
          && v372 != 0.0
          && v372 != v12
          || (v373 = *(unsigned __int8 *)(v369 + v371 + 11), v372 = 0.0, v373 == 2))
        {
          LOBYTE(v633) = 1;
          LOBYTE(v638) = 1;
          v374 = *(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v369, 0x118u, v370, 0, &v633);
          *(float *)&v6 = v374
                        + (float)((float)(*(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v369, 0x118u, v370, 1u, &v638)- v374)* v372);
        }
        else
        {
          LODWORD(v6) = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v369, 0x118u, v370, v373, 0);
        }
        v389 = *(_QWORD *)(v622 + 24);
        if ((int)*(float *)(v621 + 88) >= 0x17)
          v390 = 23;
        else
          v390 = (int)*(float *)(v621 + 88);
        v391 = *(float **)v389;
        if (*(_QWORD *)v389
          && (v392 = *v391, LODWORD(v391) = *v391 == v12, *(_BYTE *)(v389 + 10))
          && v392 != 0.0
          && v392 != v12
          || (v393 = *(unsigned __int8 *)(v389 + v391 + 11), v392 = 0.0, v393 == 2))
        {
          LOBYTE(v633) = 1;
          LOBYTE(v638) = 1;
          v394 = *(_BYTE *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<BOOL>((unsigned __int16 *)v389, 0x138u, v390, 0, &v633);
          v395 = *(_BYTE *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<BOOL>((unsigned __int16 *)v389, 0x138u, v390, 1, &v638);
          if (v392 >= v12)
            v394 = v395;
        }
        else
        {
          v394 = *(_BYTE *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<BOOL>(*(unsigned __int16 **)(v622 + 24), 0x138u, v390, v393, 0);
        }
        v396 = *(_QWORD *)(v622 + 24);
        if ((int)*(float *)(v621 + 88) >= 0x17)
          v397 = 23;
        else
          v397 = (int)*(float *)(v621 + 88);
        v398 = *(float **)v396;
        if (*(_QWORD *)v396
          && (v399 = *v398, LODWORD(v398) = *v398 == v12, *(_BYTE *)(v396 + 10))
          && v399 != 0.0
          && v399 != v12
          || (v400 = *(unsigned __int8 *)(v396 + v398 + 11), v399 = 0.0, v400 == 2))
        {
          LOBYTE(v633) = 1;
          LOBYTE(v638) = 1;
          v401 = *(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v396, 0x14Au, v397, 0, &v633);
          v9 = v401
             + (float)((float)(*(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v396, 0x14Au, v397, 1u, &v638)- v401)* v399);
        }
        else
        {
          v9 = *(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(*(_QWORD *)(v622 + 24), 0x14Au, v397, v400, 0);
        }
        v402 = *(_QWORD *)(v622 + 24);
        if ((int)*(float *)(v621 + 88) >= 0x17)
          v403 = 23;
        else
          v403 = (int)*(float *)(v621 + 88);
        v404 = *(float **)v402;
        if (*(_QWORD *)v402
          && (v11 = *v404, LODWORD(v404) = *v404 == v12, *(_BYTE *)(v402 + 10))
          && v11 != 0.0
          && v11 != v12
          || (v405 = *(unsigned __int8 *)(v402 + v404 + 11), v11 = 0.0, v405 == 2))
        {
          LOBYTE(v633) = 1;
          LOBYTE(v638) = 1;
          v406 = *(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v402, 0x14Bu, v403, 0, &v633);
          v407 = v406
               + (float)((float)(*(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v402, 0x14Bu, v403, 1u, &v638)- v406)* v11);
        }
        else
        {
          v407 = *(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(*(_QWORD *)(v622 + 24), 0x14Bu, v403, v405, 0);
        }
        v408 = (float)v587 * 0.000015259;
        v409 = *(float *)(v621 + 76);
        v410 = *(float *)(v621 + 92);
        v411 = (float)(v408 + (float)(v409 * (float)((float)((float)v10 * 0.000015259) - v408)))
             * (float)(v410 * *(float *)(v621 + 72));
        v412 = v411 < 0.9999;
        v413 = v617[1];
        v12 = 1.0;
        if (v413)
          v414 = v617[9];
        else
          v414 = 0;
        v415 = (float)LODWORD(v353) * 0.000015259;
        v416 = (float)LODWORD(v8) * 0.000015259;
        v417 = (float)LODWORD(v7) * 0.000015259;
        v418 = *(float *)(v621 + 84);
        v419 = (float *)(v414 + 16 * v341);
        *v419 = (float)(v415 + (float)(v409 * (float)((float)((float)v593 * 0.000015259) - v415))) * v410;
        v419[1] = (float)(v416 + (float)(v409 * (float)((float)((float)v595 * 0.000015259) - v416))) * v410;
        v419[2] = (float)(v417 + (float)(v409 * (float)((float)((float)v597 * 0.000015259) - v417))) * v410;
        v419[3] = v411;
        if (*(float *)&v6 >= 0.0001)
          v420 = *(float *)&v6;
        else
          v420 = 1.0;
        if (*(float *)&v6 >= 0.0001)
          v421 = 1.0;
        else
          v421 = 0.0;
        v422 = v414 + 8 * v341;
        *(float *)(v422 + 256) = v420;
        *(float *)(v422 + 260) = v421;
        *(_DWORD *)(v414 + 4 * v341 + 320) = 1065353216;
        if (v414 && v413)
        {
          if (v617[8] > v413)
            v413 = v617[8];
          v617[7] = 0;
          v617[8] = v413;
        }
        v423 = *(float *)(v621 + 76);
        v424 = *(float *)(v621 + 92);
        v425 = (float)(v408 + (float)(v423 * (float)((float)((float)v599 * 0.000015259) - v408)))
             * (float)(v424 * *(float *)(v621 + 72));
        v426 = v425 < 0.9999;
        v427 = v295[1];
        if (v427)
          v428 = v295[9];
        else
          v428 = 0;
        v429 = (float *)(v428 + 16 * v341);
        *v429 = (float)(v415 + (float)(v423 * (float)((float)((float)v602 * 0.000015259) - v415))) * v424;
        v429[1] = (float)(v416 + (float)(v423 * (float)((float)((float)v589 * 0.000015259) - v416))) * v424;
        v429[2] = (float)(v417 + (float)(v423 * (float)((float)((float)v591 * 0.000015259) - v417))) * v424;
        v429[3] = v425;
        v430 = v428 + 8 * v341;
        *(float *)(v430 + 256) = v420;
        *(float *)(v430 + 260) = v421;
        v431 = 1.5;
        if (!v394)
          v431 = 0.0;
        *(float *)(v428 + 4 * v341 + 320) = v431;
        if (v428 && v427)
        {
          if (v295[8] > v427)
            v427 = v295[8];
          v295[7] = 0;
          v295[8] = v427;
        }
        v432 = v9 * 40075017.0 / ((double)(unint64_t)(1 << (int)v418) * v407);
        LOBYTE(v611) = v611 | v412;
        BYTE4(v611) |= v426;
        v433 = v579[1];
        v434 = (float *)(v579[9] + 8 * v341);
        *v434 = v432;
        v434[1] = 1.0 - v9;
        if (v579[8] > v433)
          v433 = v579[8];
        v579[7] = 0;
        v579[8] = v433;
        v435 = v578[1];
        v436 = (float *)(v578[9] + 8 * v341);
        *v436 = v432;
        v436[1] = 1.0 - v9;
        if (v578[8] > v435)
          v435 = v578[8];
        v578[7] = 0;
        v578[8] = v435;
        v296 = v621;
        if (*(_BYTE *)(*(_QWORD *)(v620 + 392) + 769))
        {
          v603 = *(float *)(v621 + 92);
          v437 = *(float *)(v621 + 72);
          v600 = *(float *)(v621 + 76);
          v438 = *(_QWORD *)(v622 + 24);
          v439 = (int)*(float *)(v621 + 88) >= 0x17 ? 23 : (int)*(float *)(v621 + 88);
          if ((v440 = *(float **)v438) != 0
            && (v441 = *v440, LODWORD(v440) = *v440 == 1.0, *(_BYTE *)(v438 + 10))
            && v441 != 0.0
            && v441 != 1.0
            || (v442 = *(unsigned __int8 *)(v438 + v440 + 11), v441 = 0.0, v442 == 2))
          {
            LOBYTE(v633) = 1;
            LOBYTE(v638) = 1;
            v443 = *(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v438, 2u, v439, 0, &v633);
            *(float *)&v6 = v443
                          + (float)((float)(*(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v438, 2u, v439, 1u, &v638)- v443)* v441);
          }
          else
          {
            LODWORD(v6) = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(*(_QWORD *)(v622 + 24), 2u, v439, v442, 0);
          }
          v444 = *(_QWORD *)(v622 + 24);
          v445 = (int)*(float *)(v621 + 88) >= 0x17 ? 23 : (int)*(float *)(v621 + 88);
          if ((v446 = *(float **)v444) != 0
            && (v7 = *v446, LODWORD(v446) = *v446 == 1.0, *(_BYTE *)(v444 + 10))
            && v7 != 0.0
            && v7 != 1.0
            || (v447 = *(unsigned __int8 *)(v444 + v446 + 11), v7 = 0.0, v447 == 2))
          {
            LOBYTE(v633) = 1;
            LOBYTE(v638) = 1;
            v8 = *(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v444, 0x61u, v445, 0, &v633);
            v448 = v8
                 + (float)((float)(*(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v444, 0x61u, v445, 1u, &v638)- v8)* v7);
          }
          else
          {
            v448 = *(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(*(_QWORD *)(v622 + 24), 0x61u, v445, v447, 0);
          }
          v449 = v605[1];
          v450 = v449 ? v605[9] : 0;
          v451 = vmul_f32(vcvt_f32_u32(v580), v576);
          *(float *)(v450 + 4 * v341 + 256) = (float)(v448 * 0.5)
                                              + (float)(*(float *)(v621 + 76) * (float)(*(float *)&v6 - v448));
          v452 = (float32x2_t *)(v450 + 16 * v341);
          v452[16] = vmul_n_f32(vmla_n_f32(v451, vsub_f32(vmul_f32(vcvt_f32_u32((uint32x2_t)__PAIR64__(v363, v583)), v576), v451), v600), v603);
          v452[17].f32[0] = (float)((float)((float)v582 * 0.000015259)
                                  + (float)(v600
                                          * (float)((float)((float)v584 * 0.000015259)
                                                  - (float)((float)v582 * 0.000015259))))
                          * v603;
          v452[17].f32[1] = (float)((float)((float)v581 * 0.000015259)
                                  + (float)(v600
                                          * (float)((float)((float)v585 * 0.000015259)
                                                  - (float)((float)v581 * 0.000015259))))
                          * (float)(v603 * v437);
          if (v450)
          {
            if (v449)
            {
              if (v605[8] > v449)
                v449 = v605[8];
              v605[7] = 0;
              v605[8] = v449;
            }
          }
        }
      }
      else
      {
LABEL_399:
        v375 = v617[1];
        if (v375)
        {
          v376 = v617[9];
          v377 = v341;
          v378 = (_QWORD *)(v376 + 16 * v341);
          *v378 = 0;
          v378[1] = 0;
          *(_QWORD *)(v376 + 8 * v341 + 256) = v613;
          v379 = v605;
          if (v376)
          {
            if (v617[8] > v375)
              v375 = v617[8];
            v617[7] = 0;
            v617[8] = v375;
          }
          v380 = v613;
        }
        else
        {
          v377 = v341;
          v381 = (_QWORD *)(16 * v341);
          *v381 = 0;
          v381[1] = 0;
          v380 = v613;
          *(_QWORD *)(8 * v341 + 0x100) = v613;
          v379 = v605;
        }
        v382 = v295[1];
        v383 = v295[9];
        v384 = (_QWORD *)(v383 + 16 * v377);
        *v384 = 0;
        v384[1] = 0;
        *(_QWORD *)(v383 + 8 * v377 + 256) = v380;
        if (v295[8] > v382)
          v382 = v295[8];
        v295[7] = 0;
        v295[8] = v382;
        if (*(_BYTE *)(*(_QWORD *)(v620 + 392) + 769))
        {
          v385 = v379[1];
          if (v385)
          {
            v386 = v379[9];
            *(_DWORD *)(v386 + 4 * v377 + 256) = 0;
            v387 = v386 + 16 * v377;
            *(_QWORD *)(v387 + 128) = 0;
            *(_QWORD *)(v387 + 136) = 0;
            v388 = v379[8];
            if (v388 <= v385)
              v388 = v385;
            v379[7] = 0;
            v379[8] = v388;
          }
          else
          {
            v342 = 16 * v377;
            *(_QWORD *)(v342 + 128) = 0;
            *(_QWORD *)(v342 + 136) = 0;
          }
        }
        v611 = 0x100000001;
      }
      ++v341;
      gss::QueryableLocker<gss::PropertyID>::~QueryableLocker((uint64_t)&v622);
      v336 += 2;
    }
    while (v336 != v607);
  }
  v453 = *(uint64_t ***)(v296 + 24);
  v454 = *v453;
  v608 = v453[1];
  if (*v453 != v608)
  {
    v619 = 0;
    v455 = 0;
    *(_QWORD *)&v456 = 0;
    *(_QWORD *)&v457 = 0;
    v458 = v609;
    *((_QWORD *)&v457 + 1) = v609;
    *((_QWORD *)&v456 + 1) = v614;
    v604 = v457;
    v606 = v456;
    v459 = 1.0;
    while (1)
    {
      v461 = *v454;
      v462 = (std::__shared_weak_count *)v454[1];
      *(_QWORD *)&v622 = *v454;
      *((_QWORD *)&v622 + 1) = v462;
      if (v462)
      {
        v463 = (unint64_t *)&v462->__shared_owners_;
        do
          v464 = __ldxr(v463);
        while (__stxr(v464 + 1, v463));
        v639 = v462;
        do
          v465 = __ldxr(v463);
        while (__stxr(v465 + 1, v463));
      }
      else
      {
        v639 = 0;
      }
      v638 = v461;
      v640[0] = 0;
      v640[1] = 0;
      v641 = 0;
      if (v461)
        LODWORD(v461) = (*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)v461 + 48))(v461, v640);
      v641 = v461;
      if (v462)
      {
        v466 = (unint64_t *)&v462->__shared_owners_;
        do
          v467 = __ldaxr(v466);
        while (__stlxr(v467 - 1, v466));
        if (!v467)
        {
          ((void (*)(std::__shared_weak_count *))v462->__on_zero_shared)(v462);
          std::__shared_weak_count::__release_weak(v462);
        }
        LODWORD(v461) = v641;
      }
      if ((_DWORD)v461)
      {
        v468 = *(_QWORD *)(v638 + 24);
        v469 = (int)*(float *)(v621 + 88) >= 0x17 ? 23 : (int)*(float *)(v621 + 88);
        if ((v470 = *(float **)v468) != 0
          && (v471 = *v470, LODWORD(v470) = *v470 == v459, *(_BYTE *)(v468 + 10))
          && (v471 != 0.0 ? (v472 = v471 == v459) : (v472 = 1), !v472)
          || (v473 = *(unsigned __int8 *)(v468 + v470 + 11), v471 = 0.0, v473 == 2))
        {
          LOBYTE(v622) = 1;
          LOBYTE(v633) = 1;
          v474 = *(_BYTE *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<BOOL>((unsigned __int16 *)v468, 0x5Bu, v469, 0, &v622);
          v475 = *(_BYTE *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<BOOL>((unsigned __int16 *)v468, 0x5Bu, v469, 1, &v633);
          if (v471 < v459)
            v475 = v474;
        }
        else
        {
          v475 = *(_BYTE *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<BOOL>(*(unsigned __int16 **)(v638 + 24), 0x5Bu, v469, v473, 0);
        }
        v476 = v475 != 0;
      }
      else
      {
        v476 = 0;
      }
      v622 = 0uLL;
      v477 = *(_QWORD *)(v458 + 8);
      v478 = v477 ? *(float **)(v458 + 72) : 0;
      v622 = v604;
      v623 = 0;
      v624 = v477;
      v626 = (ggl::PipelineSetup *)v478;
      LOWORD(v625) = 1;
      v633 = 0uLL;
      v479 = v614[1];
      v480 = v479 ? v614[9] : 0;
      v633 = v606;
      v634 = 0;
      v635 = v479;
      v637 = v480;
      v636 = 1;
      if (v476)
        break;
      v488 = &v478[4 * v455];
      *(_QWORD *)v488 = 0;
      *((_QWORD *)v488 + 1) = 0;
      *((_QWORD *)v488 + 16) = 0;
      *((_QWORD *)v488 + 17) = 0;
      *(_QWORD *)&v478[2 * v455 + 64] = 1065353216;
      v478[v455 + 80] = 1.0;
      v478[96] = v610;
      v619 = 1;
      if (v480 && v479)
        goto LABEL_598;
LABEL_601:
      v458 = v609;
      if (v477)
      {
        v460 = *(_QWORD *)(v609 + 64);
        if (v460 <= v477)
          v460 = v477;
        *(_QWORD *)(v609 + 56) = 0;
        *(_QWORD *)(v609 + 64) = v460;
      }
      ++v455;
      gss::QueryableLocker<gss::PropertyID>::~QueryableLocker((uint64_t)&v638);
      v454 += 2;
      if (v454 == v608)
        goto LABEL_604;
    }
    v481 = *(_QWORD *)(v638 + 24);
    if ((int)*(float *)(v621 + 88) >= 0x17)
      v482 = 23;
    else
      v482 = (int)*(float *)(v621 + 88);
    v483 = *(float **)v481;
    if (*(_QWORD *)v481
      && (v484 = *v483, LODWORD(v483) = *v483 == v459, *(_BYTE *)(v481 + 10))
      && (v484 != 0.0 ? (v485 = v484 == v459) : (v485 = 1), !v485)
      || (v486 = *(unsigned __int8 *)(v481 + v483 + 11), v484 = 0.0, v486 == 2))
    {
      LOBYTE(v642) = 1;
      v643 = 1;
      LODWORD(v6) = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v481, 0x118u, v482, 0, &v642);
      v487 = *(float *)&v6
           + (float)((float)(*(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v481, 0x118u, v482, 1u, &v643)- *(float *)&v6)* v484);
    }
    else
    {
      v487 = *(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(*(_QWORD *)(v638 + 24), 0x118u, v482, v486, 0);
    }
    v601 = v487;
    if ((int)*(float *)(v621 + 88) >= 0x17)
      v489 = 23;
    else
      v489 = (int)*(float *)(v621 + 88);
    gss::RenderStyle<gss::PropertyID>::valueForKeyAtZ<geo::Color<unsigned short,4,(geo::ColorSpace)0>>(&v642, *(_QWORD *)(v638 + 24), 0xA0u, v489, 2u, 0);
    LOWORD(v490) = WORD1(v642);
    LOWORD(v10) = v642;
    v598 = v490;
    LOWORD(v8) = HIWORD(v642);
    LOWORD(v7) = WORD2(v642);
    if ((int)*(float *)(v621 + 88) >= 0x17)
      v491 = 23;
    else
      v491 = (int)*(float *)(v621 + 88);
    gss::RenderStyle<gss::PropertyID>::valueForKeyAtZ<geo::Color<unsigned short,4,(geo::ColorSpace)0>>(&v642, *(_QWORD *)(v638 + 24), 0xA1u, v491, 2u, 0);
    LOWORD(v484) = WORD1(v642);
    LOWORD(v6) = v642;
    LOWORD(v11) = HIWORD(v642);
    LOWORD(v12) = WORD2(v642);
    if ((int)*(float *)(v621 + 88) >= 0x17)
      v492 = 23;
    else
      v492 = (int)*(float *)(v621 + 88);
    gss::RenderStyle<gss::PropertyID>::valueForKeyAtZ<geo::Color<unsigned short,4,(geo::ColorSpace)0>>(&v642, *(_QWORD *)(v638 + 24), 0xA3u, v492, 2u, 0);
    LOWORD(v493) = v642;
    v586 = v493;
    LOWORD(v493) = WORD1(v642);
    v590 = v493;
    LOWORD(v493) = WORD2(v642);
    v592 = v493;
    v594 = LODWORD(v7);
    v494 = *(float *)(v621 + 88);
    v495 = (int)v494;
    LOWORD(v494) = HIWORD(v642);
    v588 = LODWORD(v494);
    v496 = *(_QWORD *)(v638 + 24);
    if (v495 >= 0x17)
      v497 = 23;
    else
      v497 = v495;
    v498 = *(float **)v496;
    v596 = LODWORD(v8);
    if (*(_QWORD *)v496
      && (v499 = *v498, LODWORD(v498) = *v498 == v459, *(_BYTE *)(v496 + 10))
      && v499 != 0.0
      && v499 != v459
      || (v500 = *(unsigned __int8 *)(v496 + v498 + 11), v499 = 0.0, v500 == 2))
    {
      LOBYTE(v642) = 1;
      v643 = 1;
      v501 = *(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v496, 0x14Au, v497, 0, &v642);
      v7 = v501
         + (float)((float)(*(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v496, 0x14Au, v497, 1u, &v643)- v501)* v499);
    }
    else
    {
      v7 = *(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v496, 0x14Au, v497, v500, 0);
    }
    v502 = *(_QWORD *)(v638 + 24);
    if ((int)*(float *)(v621 + 88) >= 0x17)
      v503 = 23;
    else
      v503 = (int)*(float *)(v621 + 88);
    v504 = *(float **)v502;
    if (*(_QWORD *)v502
      && (v8 = *v504, LODWORD(v504) = *v504 == v459, *(_BYTE *)(v502 + 10))
      && v8 != 0.0
      && v8 != v459
      || (v505 = *(unsigned __int8 *)(v502 + v504 + 11), v8 = 0.0, v505 == 2))
    {
      LOBYTE(v642) = 1;
      v643 = 1;
      v506 = *(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v502, 0x14Bu, v503, 0, &v642);
      v507 = v506
           + (float)((float)(*(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v502, 0x14Bu, v503, 1u, &v643)- v506)* v8);
    }
    else
    {
      v507 = *(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(*(_QWORD *)(v638 + 24), 0x14Bu, v503, v505, 0);
    }
    v508 = (float)v586 * 0.000015259;
    v509 = (float)v590 * 0.000015259;
    v510 = (float)v592 * 0.000015259;
    v511 = (float)v588 * 0.000015259;
    v512 = v7 * 40075017.0 / ((double)(unint64_t)(1 << (int)*(float *)(v621 + 84)) * v507);
    v459 = 1.0;
    v513 = *(float *)(v621 + 76);
    v514 = *(float *)(v621 + 92);
    v515 = *(float *)(v621 + 72) * v514;
    v516 = v515 * (float)(v511 + (float)(v513 * (float)((float)((float)v596 * 0.000015259) - v511)));
    v517 = v515 * (float)(v511 + (float)(v513 * (float)((float)((float)LODWORD(v11) * 0.000015259) - v511)));
    v518 = &v478[4 * v455];
    *v518 = (float)(v508 + (float)(v513 * (float)((float)((float)v10 * 0.000015259) - v508))) * v514;
    v518[1] = (float)(v509 + (float)(v513 * (float)((float)((float)v598 * 0.000015259) - v509))) * v514;
    v518[2] = (float)(v510 + (float)(v513 * (float)((float)((float)v594 * 0.000015259) - v510))) * v514;
    v518[3] = v516;
    v518[32] = (float)(v508 + (float)(v513 * (float)((float)((float)LODWORD(v6) * 0.000015259) - v508))) * v514;
    v518[33] = (float)(v509 + (float)(v513 * (float)((float)((float)LODWORD(v484) * 0.000015259) - v509))) * v514;
    v518[34] = (float)(v510 + (float)(v513 * (float)((float)((float)LODWORD(v12) * 0.000015259) - v510))) * v514;
    v518[35] = v517;
    v519 = 2 * v455;
    *(int8x8_t *)&v478[v519 + 64] = vbsl_s8((int8x8_t)vcltz_s32(vshl_n_s32(vdup_n_s32(v601 < 0.0001), 0x1FuLL)), (int8x8_t)1065353216, (int8x8_t)__PAIR64__(HIDWORD(v613), LODWORD(v601)));
    v478[v455 + 80] = 1.0;
    v520 = (float *)(v480 + v519 * 4);
    *v520 = v512;
    v520[1] = 1.0 - v7;
    v521 = v516 < 0.9999;
    if (v517 < 0.9999)
      v521 = 1;
    v619 |= v521;
    v478[96] = v610;
    if (!v479)
      goto LABEL_601;
LABEL_598:
    v522 = v614[8];
    if (v522 <= v479)
      v522 = v479;
    v614[7] = 0;
    v614[8] = v522;
    goto LABEL_601;
  }
  v619 = 0;
LABEL_604:
  if ((v611 & 1) == 0)
  {
    v523 = v621;
    v525 = v567;
    v524 = v568;
    v526 = v572;
    v527 = v577;
    v528 = v566;
    if (v574)
      ggl::Flyover::FlyoverPipelineSetup::setState(v574, *(_QWORD *)(*(_QWORD *)(v620 + 392) + 216), *(std::__shared_weak_count **)(*(_QWORD *)(v620 + 392) + 224));
    if (v575)
    {
      v530 = *(_QWORD *)(*(_QWORD *)(v620 + 392) + 248);
      v529 = *(std::__shared_weak_count **)(*(_QWORD *)(v620 + 392) + 256);
      if (!v529)
        goto LABEL_616;
      goto LABEL_614;
    }
LABEL_636:
    if ((v611 & 0x100000000) != 0)
      goto LABEL_637;
    goto LABEL_644;
  }
  v523 = v621;
  v525 = v567;
  v524 = v568;
  v526 = v572;
  v527 = v577;
  v528 = v566;
  if (v574)
    ggl::Flyover::FlyoverPipelineSetup::setState(v574, *(_QWORD *)(*(_QWORD *)(v620 + 392) + 376), *(std::__shared_weak_count **)(*(_QWORD *)(v620 + 392) + 384));
  if (!v575)
    goto LABEL_636;
  v530 = *(_QWORD *)(*(_QWORD *)(v620 + 392) + 408);
  v529 = *(std::__shared_weak_count **)(*(_QWORD *)(v620 + 392) + 416);
  if (!v529)
    goto LABEL_616;
LABEL_614:
  v531 = (unint64_t *)&v529->__shared_owners_;
  do
    v532 = __ldxr(v531);
  while (__stxr(v532 + 1, v531));
LABEL_616:
  if (v530 && **(_QWORD **)(v530 + 40) == *((_QWORD *)v575 + 1))
  {
    v536 = *((_QWORD *)v575 + 2);
    if (v536 && v536 != v530)
      ggl::PipelineSetup::resetData((uint64_t)v575);
    if (v529)
    {
      v537 = (unint64_t *)&v529->__shared_owners_;
      do
        v538 = __ldxr(v537);
      while (__stxr(v538 + 1, v537));
    }
    v533 = (std::__shared_weak_count *)*((_QWORD *)v575 + 3);
    *((_QWORD *)v575 + 2) = v530;
    *((_QWORD *)v575 + 3) = v529;
    v523 = v621;
    if (!v533)
    {
LABEL_632:
      if (!v529)
        goto LABEL_636;
      goto LABEL_633;
    }
    v539 = (unint64_t *)&v533->__shared_owners_;
    do
      v535 = __ldaxr(v539);
    while (__stlxr(v535 - 1, v539));
  }
  else
  {
    v533 = (std::__shared_weak_count *)*((_QWORD *)v575 + 3);
    *((_QWORD *)v575 + 2) = 0;
    *((_QWORD *)v575 + 3) = 0;
    v523 = v621;
    if (!v533)
      goto LABEL_632;
    v534 = (unint64_t *)&v533->__shared_owners_;
    do
      v535 = __ldaxr(v534);
    while (__stlxr(v535 - 1, v534));
  }
  if (v535)
    goto LABEL_632;
  ((void (*)(std::__shared_weak_count *))v533->__on_zero_shared)(v533);
  std::__shared_weak_count::__release_weak(v533);
  if (!v529)
    goto LABEL_636;
LABEL_633:
  v540 = (unint64_t *)&v529->__shared_owners_;
  do
    v541 = __ldaxr(v540);
  while (__stlxr(v541 - 1, v540));
  if (v541)
    goto LABEL_636;
  ((void (*)(std::__shared_weak_count *))v529->__on_zero_shared)(v529);
  std::__shared_weak_count::__release_weak(v529);
  if ((v611 & 0x100000000) != 0)
  {
LABEL_637:
    if (v528)
      ggl::Flyover::FlyoverPipelineSetup::setState(v528, *(_QWORD *)(*(_QWORD *)(v620 + 392) + 280), *(std::__shared_weak_count **)(*(_QWORD *)(v620 + 392) + 288));
    if (v525)
    {
      v542 = *(_QWORD *)(v620 + 392) + 312;
LABEL_648:
      ggl::Flyover::FlyoverPipelineSetup::setState(v525, *(_QWORD *)v542, *(std::__shared_weak_count **)(v542 + 8));
      goto LABEL_649;
    }
    goto LABEL_649;
  }
LABEL_644:
  if (v528)
    ggl::Flyover::FlyoverPipelineSetup::setState(v528, *(_QWORD *)(*(_QWORD *)(v620 + 392) + 120), *(std::__shared_weak_count **)(*(_QWORD *)(v620 + 392) + 128));
  if (v525)
  {
    v542 = *(_QWORD *)(v620 + 392) + 152;
    goto LABEL_648;
  }
LABEL_649:
  v543 = *(_QWORD **)(v620 + 392);
  if ((v619 & 1) != 0)
  {
    if (!v526)
      goto LABEL_680;
    v545 = v543[53];
    v544 = (std::__shared_weak_count *)v543[54];
    if (!v544)
      goto LABEL_657;
LABEL_655:
    v546 = (unint64_t *)&v544->__shared_owners_;
    do
      v547 = __ldxr(v546);
    while (__stxr(v547 + 1, v546));
    goto LABEL_657;
  }
  if (!v526)
    goto LABEL_680;
  v545 = v543[33];
  v544 = (std::__shared_weak_count *)v543[34];
  if (v544)
    goto LABEL_655;
LABEL_657:
  if (v545 && **(_QWORD **)(v545 + 40) == *((_QWORD *)v526 + 1))
  {
    v551 = *((_QWORD *)v526 + 2);
    if (v551 && v551 != v545)
      ggl::PipelineSetup::resetData((uint64_t)v526);
    if (v544)
    {
      v552 = (unint64_t *)&v544->__shared_owners_;
      do
        v553 = __ldxr(v552);
      while (__stxr(v553 + 1, v552));
    }
    v548 = (std::__shared_weak_count *)*((_QWORD *)v526 + 3);
    *((_QWORD *)v526 + 2) = v545;
    *((_QWORD *)v526 + 3) = v544;
    v523 = v621;
    if (!v548)
      goto LABEL_674;
    v554 = (unint64_t *)&v548->__shared_owners_;
    do
      v550 = __ldaxr(v554);
    while (__stlxr(v550 - 1, v554));
    goto LABEL_672;
  }
  v548 = (std::__shared_weak_count *)*((_QWORD *)v526 + 3);
  *((_QWORD *)v526 + 2) = 0;
  *((_QWORD *)v526 + 3) = 0;
  v523 = v621;
  if (v548)
  {
    v549 = (unint64_t *)&v548->__shared_owners_;
    do
      v550 = __ldaxr(v549);
    while (__stlxr(v550 - 1, v549));
LABEL_672:
    if (!v550)
    {
      ((void (*)(std::__shared_weak_count *))v548->__on_zero_shared)(v548);
      std::__shared_weak_count::__release_weak(v548);
    }
  }
LABEL_674:
  if (v544)
  {
    v555 = (unint64_t *)&v544->__shared_owners_;
    do
      v556 = __ldaxr(v555);
    while (__stlxr(v556 - 1, v555));
    if (!v556)
    {
      ((void (*)(std::__shared_weak_count *))v544->__on_zero_shared)(v544);
      std::__shared_weak_count::__release_weak(v544);
    }
  }
  v543 = *(_QWORD **)(v620 + 392);
LABEL_680:
  *(_QWORD *)&v622 = v571;
  *((_QWORD *)&v622 + 1) = v574;
  v623 = v575;
  v624 = v570;
  v625 = v528;
  v626 = v525;
  v627 = PointyRoofDepthPipelineSetupForGroup;
  v628 = v526;
  v629 = v565;
  v630 = vrev64_s32(*(int32x2_t *)(v523 + 96));
  v631 = *(_QWORD *)(v523 + 48);
  v632 = *(float *)(v523 + 68) > 0.5;
  v557 = v524[3];
  if (!v557)
  {
LABEL_683:
    v645 = (_QWORD *)v557;
    goto LABEL_685;
  }
  if ((_QWORD *)v557 != v524)
  {
    v557 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v557 + 16))(v557);
    goto LABEL_683;
  }
  v645 = v644;
  (*(void (**)(_QWORD *, _QWORD *))(*v524 + 24))(v524, v644);
LABEL_685:
  submitRenderItems(v527, (uint64_t)v543, (uint64_t *)&v622, v644);
  v558 = v645;
  if (v645 == v644)
  {
    v559 = 4;
    v558 = v644;
    goto LABEL_689;
  }
  if (v645)
  {
    v559 = 5;
LABEL_689:
    (*(void (**)(void))(*v558 + 8 * v559))();
  }
  for (i = *(_QWORD **)(objc_msgSend(v527, "featureIds", v564) + 16); i; i = (_QWORD *)*i)
  {
    v561 = i[2];
    v562 = *(float *)(v621 + 84);
    v563 = operator new(0x20uLL);
    v563[24] = (int)v562;
    *(_QWORD *)v563 = 0;
    *((_QWORD *)v563 + 1) = ((v561 << 6) + (v561 >> 2) + (int)v562 - 0x61C8864680B583EBLL) ^ v561;
    *((_QWORD *)v563 + 2) = v561;
    if ((std::__hash_table<md::FeatureIdZoom,md::FeatureIdZoomHash,std::equal_to<md::FeatureIdZoom>,std::allocator<md::FeatureIdZoom>>::__node_insert_unique((_QWORD *)(v620 + 416), (uint64_t)v563) & 1) == 0)operator delete(v563);
  }

}

void sub_19FACA174(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,char a51)
{
  void *v51;
  void *v52;

  ggl::BufferMemory::~BufferMemory((ggl::BufferMemory *)&a51);

  _Unwind_Resume(a1);
}

void md::BuildingRenderLayer::generateDiffuseRenderItemsForGroup(uint64_t a1, uint64_t a2, void *a3, void *a4, uint64_t a5, _QWORD *a6)
{
  double v6;
  float v7;
  float v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  float v12;
  id v18;
  uint64_t v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t *v51;
  __int128 *v52;
  uint64_t v53;
  __int128 v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t *v59;
  __int128 *v60;
  uint64_t v61;
  __int128 v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t *v72;
  unint64_t v73;
  std::__shared_weak_count *v74;
  unint64_t *p_shared_owners;
  unint64_t v76;
  uint64_t *v77;
  uint64_t *v78;
  uint64_t v79;
  _QWORD *v80;
  uint64_t v81;
  unint64_t *v82;
  unint64_t v83;
  std::__shared_weak_count *v84;
  unint64_t *v85;
  unint64_t v86;
  uint64_t v87;
  unint64_t v88;
  __int128 v89;
  ggl::PipelineSetup *v90;
  _DWORD *v91;
  int v92;
  int v93;
  int v94;
  unint64_t v95;
  _QWORD *v96;
  _QWORD *v97;
  unint64_t v98;
  _DWORD *v99;
  _QWORD *v100;
  unint64_t v101;
  _QWORD *v102;
  unint64_t v103;
  uint64_t *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  unint64_t *v108;
  unint64_t v109;
  std::__shared_weak_count *v110;
  unint64_t *v111;
  unint64_t v112;
  uint64_t v113;
  float v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t *v119;
  unint64_t v120;
  uint64_t v121;
  uint64_t v122;
  unint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t *v132;
  unint64_t v133;
  uint64_t v134;
  uint64_t v135;
  unint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t *v140;
  uint64_t v141;
  uint64_t v142;
  unint64_t v143;
  _QWORD *v144;
  uint64_t v145;
  unint64_t v146;
  _QWORD *v147;
  uint64_t v148;
  uint64_t v149;
  unint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  unint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t *v159;
  __int128 *v160;
  uint64_t v161;
  __int128 v162;
  uint64_t v163;
  uint64_t v164;
  unint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  unint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t *v174;
  __int128 *v175;
  uint64_t v176;
  __int128 v177;
  uint64_t v178;
  unint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t *v182;
  __int128 *v183;
  uint64_t v184;
  __int128 v185;
  uint64_t v186;
  uint64_t v187;
  unint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t *v191;
  __int128 *v192;
  uint64_t v193;
  __int128 v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  double v199;
  id v200;
  uint64_t *v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  unint64_t *v206;
  unint64_t v207;
  std::__shared_weak_count *v208;
  unint64_t *v209;
  unint64_t v210;
  ggl::PipelineSetup *v211;
  uint64_t v212;
  unint64_t v213;
  __int128 v214;
  ggl::PipelineSetup *v215;
  _DWORD *v216;
  int v217;
  int v218;
  int v219;
  unint64_t v220;
  _QWORD *v221;
  _QWORD *v222;
  unint64_t v223;
  _DWORD *v224;
  _QWORD *v225;
  unint64_t v226;
  _QWORD *v227;
  unint64_t v228;
  uint64_t *v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  unint64_t *v233;
  unint64_t v234;
  std::__shared_weak_count *v235;
  unint64_t *v236;
  unint64_t v237;
  uint64_t *v238;
  uint64_t *v239;
  uint64_t v240;
  _QWORD *v241;
  uint64_t v242;
  unint64_t *v243;
  unint64_t v244;
  std::__shared_weak_count *v245;
  unint64_t *v246;
  unint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t FoggedExtrusionPipelineSetupForGroup;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  id v254;
  uint64_t *v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  unint64_t *v260;
  unint64_t v261;
  std::__shared_weak_count *v262;
  unint64_t *v263;
  unint64_t v264;
  uint64_t v265;
  unint64_t v266;
  __int128 v267;
  ggl::PipelineSetup *v268;
  _DWORD *v269;
  int v270;
  int v271;
  int v272;
  unint64_t v273;
  _QWORD *v274;
  _QWORD *v275;
  unint64_t v276;
  _DWORD *v277;
  _QWORD *v278;
  unint64_t v279;
  _QWORD *v280;
  unint64_t v281;
  uint64_t *v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  unint64_t *v286;
  unint64_t v287;
  std::__shared_weak_count *v288;
  unint64_t *v289;
  unint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  _QWORD *v294;
  uint64_t v295;
  uint64_t v296;
  id v297;
  double v298;
  double v299;
  uint64_t v300;
  uint64_t *v301;
  uint64_t *v302;
  uint64_t v303;
  _QWORD *v304;
  uint64_t v305;
  unint64_t *v306;
  unint64_t v307;
  std::__shared_weak_count *v308;
  unint64_t *v309;
  unint64_t v310;
  uint64_t *v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  unint64_t *v316;
  unint64_t v317;
  std::__shared_weak_count *v318;
  unint64_t *v319;
  unint64_t v320;
  float v321;
  float v322;
  _QWORD *v323;
  unint64_t v324;
  __int128 v325;
  _QWORD *v326;
  uint64_t v327;
  _QWORD *v328;
  _DWORD *v329;
  int v330;
  int v331;
  int v332;
  unint64_t v333;
  uint64_t **v334;
  uint64_t *v335;
  unsigned __int8 v336;
  uint64_t v337;
  uint64_t v338;
  std::__shared_weak_count *v339;
  unint64_t *v340;
  unint64_t v341;
  unint64_t v342;
  unint64_t *v343;
  unint64_t v344;
  uint64_t v345;
  unsigned int v346;
  _DWORD *v347;
  BOOL v348;
  int v349;
  char v350;
  char v351;
  unsigned int v352;
  unsigned int v353;
  unsigned int v354;
  unsigned int v355;
  unsigned int v356;
  unsigned int v357;
  unsigned int v358;
  unsigned int v359;
  unsigned int v360;
  float v361;
  unsigned int v362;
  uint64_t v363;
  unsigned int v364;
  float *v365;
  float v366;
  unsigned int v367;
  float v368;
  unint64_t v369;
  uint64_t v370;
  _QWORD *v371;
  _QWORD *v372;
  unint64_t v373;
  _QWORD *v374;
  _QWORD *v375;
  unint64_t v376;
  uint64_t v377;
  uint64_t v378;
  unint64_t v379;
  uint64_t v380;
  unsigned int v381;
  float *v382;
  float v383;
  unsigned int v384;
  float v385;
  float v386;
  float v387;
  float v388;
  float v389;
  float v390;
  float v391;
  float v392;
  float v393;
  float v394;
  float v395;
  float v396;
  BOOL v397;
  unint64_t v398;
  uint64_t v399;
  uint64_t v400;
  float *v401;
  float *v402;
  float v403;
  float v404;
  float v405;
  float v406;
  float v407;
  float v408;
  float v409;
  unint64_t v410;
  uint64_t v411;
  float *v412;
  float *v413;
  float v414;
  unint64_t v415;
  float *v416;
  unint64_t v417;
  float *v418;
  uint64_t v419;
  unsigned int v420;
  float *v421;
  float v422;
  unsigned int v423;
  float v424;
  uint64_t v425;
  unsigned int v426;
  float *v427;
  unsigned int v428;
  float v429;
  unint64_t v430;
  uint64_t v431;
  float32x2_t v432;
  float32x2_t *v433;
  uint64_t **v434;
  uint64_t *v435;
  unsigned __int8 v436;
  __int128 v437;
  __int128 v438;
  uint64_t v439;
  float v440;
  unint64_t v441;
  uint64_t v442;
  std::__shared_weak_count *v443;
  unint64_t *v444;
  unint64_t v445;
  unint64_t v446;
  unint64_t *v447;
  unint64_t v448;
  uint64_t v449;
  unsigned int v450;
  _DWORD *v451;
  BOOL v452;
  int v453;
  char v454;
  char v455;
  _BOOL4 v456;
  uint64_t v457;
  unint64_t v458;
  ggl::PipelineSetup *v459;
  unint64_t v460;
  uint64_t v461;
  unsigned int v462;
  unsigned int v463;
  unsigned int v464;
  unsigned int v465;
  unsigned int v466;
  float v467;
  unsigned int v468;
  uint64_t v469;
  unsigned int v470;
  float *v471;
  float v472;
  _QWORD *v473;
  unsigned int v474;
  float v475;
  uint64_t v476;
  unsigned int v477;
  float *v478;
  unsigned int v479;
  float v480;
  float v481;
  float v482;
  float v483;
  float v484;
  float v485;
  float v486;
  float v487;
  float v488;
  float v489;
  float v490;
  float v491;
  float *v492;
  float *v493;
  BOOL v494;
  unint64_t v495;
  _QWORD *v496;
  uint64_t v497;
  void *v498;
  ggl::PipelineSetup *v499;
  ggl::PipelineSetup *v500;
  ggl::PipelineSetup *v501;
  std::__shared_weak_count *v502;
  uint64_t v503;
  unint64_t *v504;
  unint64_t v505;
  std::__shared_weak_count *v506;
  unint64_t *v507;
  unint64_t v508;
  uint64_t v509;
  unint64_t *v510;
  unint64_t v511;
  unint64_t *v512;
  unint64_t *v513;
  unint64_t v514;
  uint64_t v515;
  _QWORD *v516;
  std::__shared_weak_count *v517;
  uint64_t v518;
  unint64_t *v519;
  unint64_t v520;
  std::__shared_weak_count *v521;
  unint64_t *v522;
  unint64_t v523;
  uint64_t v524;
  unint64_t *v525;
  unint64_t v526;
  unint64_t *v527;
  unint64_t *v528;
  unint64_t v529;
  uint64_t v530;
  _QWORD *v531;
  uint64_t v532;
  _QWORD *i;
  unint64_t v534;
  _BYTE *v535;
  float v536;
  id v537;
  uint64_t v538;
  ggl::PipelineSetup *v539;
  ggl::PipelineSetup *v540;
  _QWORD *v541;
  uint64_t PointyRoofDepthPipelineSetupForGroup;
  uint64_t v543;
  uint64_t v544;
  id v545;
  ggl::PipelineSetup *v546;
  ggl::PipelineSetup *v547;
  ggl::PipelineSetup *v548;
  float32x2_t v549;
  id v550;
  _QWORD *v551;
  _QWORD *v552;
  uint32x2_t v553;
  unsigned int v554;
  unsigned int v555;
  unsigned int v556;
  unsigned int v557;
  unsigned int v558;
  float v559;
  unsigned int v560;
  unsigned int v561;
  unsigned int v562;
  unsigned int v563;
  unsigned int v564;
  unsigned int v565;
  unsigned int v566;
  unsigned int v567;
  unsigned int v568;
  unsigned int v569;
  float v570;
  unsigned int v571;
  unsigned int v572;
  float v573;
  __int128 v574;
  _QWORD *v575;
  __int128 v576;
  uint64_t *v577;
  uint64_t *v578;
  uint64_t v579;
  float v580;
  uint64_t v581;
  __int128 v582;
  __int128 v583;
  __int128 v584;
  char v585;
  uint64_t v586;
  __int128 v587;
  uint64_t v588;
  uint64_t v589;
  __int128 v590;
  ggl::PipelineSetup *v591;
  uint64_t v592;
  ggl::PipelineSetup *v593;
  ggl::PipelineSetup *v594;
  uint64_t v595;
  ggl::PipelineSetup *v596;
  uint64_t v597;
  int32x2_t v598;
  uint64_t v599;
  BOOL v600;
  __int128 v601;
  uint64_t v602;
  unint64_t v603;
  __int16 v604;
  uint64_t v605;
  uint64_t v606;
  std::__shared_weak_count *v607;
  _QWORD v608[2];
  unsigned __int8 v609;
  unint64_t v610;
  char v611;
  _QWORD v612[3];
  _QWORD *v613;
  uint64_t v614;

  v614 = *MEMORY[0x1E0C80C00];
  v545 = a3;
  v18 = a4;
  v19 = a5;
  v20 = v18;
  v586 = a1;
  v21 = ggl::FragmentedPool<ggl::RenderItem>::pop(*(_QWORD *)(*(_QWORD *)(a1 + 392) + 496));
  getTopDepthPipelineSetupForGroup(v21, v20, v19);
  v22 = ggl::FragmentedPool<ggl::RenderItem>::pop(*(_QWORD *)(*(_QWORD *)(a1 + 392) + 488));
  getExtrusionDepthPipelineSetupForGroup(v22, v20, v19);
  v23 = ggl::FragmentedPool<ggl::RenderItem>::pop(*(_QWORD *)(*(_QWORD *)(v586 + 392) + 504));
  PointyRoofDepthPipelineSetupForGroup = getPointyRoofDepthPipelineSetupForGroup(v23, v20, v19);
  v543 = v22;
  v589 = v19;
  v24 = *(_QWORD *)(*(_QWORD *)(v586 + 392) + 544);
  v25 = *(_QWORD *)(v24 + 8);
  v544 = v21;
  if (v25 == *(_QWORD *)v24)
  {
    v37 = *(_QWORD *)(v24 + 88);
    if (!v37)
    {
LABEL_652:
      std::__throw_bad_function_call[abi:nn180100]();
LABEL_656:
      __break(1u);
      return;
    }
    v26 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v37 + 48))(v37);
    v27 = *(uint64_t **)(v24 + 40);
    v38 = *(_QWORD *)(v24 + 48);
    if ((unint64_t)v27 >= v38)
    {
      v40 = *(_QWORD *)(v24 + 32);
      v41 = ((uint64_t)v27 - v40) >> 3;
      v42 = v41 + 1;
      if (!((unint64_t)(v41 + 1) >> 61))
      {
        v43 = v38 - v40;
        if (v43 >> 2 > v42)
          v42 = v43 >> 2;
        if ((unint64_t)v43 >= 0x7FFFFFFFFFFFFFF8)
          v44 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v44 = v42;
        if (v44)
        {
          v45 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v24 + 56) + 16))(*(_QWORD *)(v24 + 56), 8 * v44, 8);
          v35 = (uint64_t *)(v45 + 8 * v41);
          v36 = v45 + 8 * v44;
          if (v45)
            *v35 = v26;
        }
        else
        {
          v36 = 0;
          v35 = (uint64_t *)(8 * v41);
        }
        v39 = v35 + 1;
        v55 = *(_QWORD *)(v24 + 32);
        v46 = *(_QWORD *)(v24 + 40);
        if (v46 == v55)
          goto LABEL_50;
        v56 = v46 - v55 - 8;
        if (v56 < 0x38)
        {
          v58 = *(_QWORD *)(v24 + 40);
        }
        else if ((unint64_t)(v46 - (_QWORD)v35) < 0x20)
        {
          v58 = *(_QWORD *)(v24 + 40);
        }
        else
        {
          v57 = (v56 >> 3) + 1;
          v58 = v46 - 8 * (v57 & 0x3FFFFFFFFFFFFFFCLL);
          v59 = v35 - 2;
          v60 = (__int128 *)(v46 - 16);
          v61 = v57 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v62 = *v60;
            *((_OWORD *)v59 - 1) = *(v60 - 1);
            *(_OWORD *)v59 = v62;
            v59 -= 4;
            v60 -= 2;
            v61 -= 4;
          }
          while (v61);
          v35 -= v57 & 0x3FFFFFFFFFFFFFFCLL;
          if (v57 == (v57 & 0x3FFFFFFFFFFFFFFCLL))
            goto LABEL_49;
        }
        do
        {
          v64 = *(_QWORD *)(v58 - 8);
          v58 -= 8;
          *--v35 = v64;
        }
        while (v58 != v55);
        goto LABEL_49;
      }
LABEL_654:
      abort();
    }
  }
  else
  {
    v26 = *(_QWORD *)(v25 - 8);
    *(_QWORD *)(v24 + 8) = v25 - 8;
    v27 = *(uint64_t **)(v24 + 40);
    v28 = *(_QWORD *)(v24 + 48);
    if ((unint64_t)v27 >= v28)
    {
      v29 = *(_QWORD *)(v24 + 32);
      v30 = ((uint64_t)v27 - v29) >> 3;
      v31 = v30 + 1;
      if (!((unint64_t)(v30 + 1) >> 61))
      {
        v32 = v28 - v29;
        if (v32 >> 2 > v31)
          v31 = v32 >> 2;
        if ((unint64_t)v32 >= 0x7FFFFFFFFFFFFFF8)
          v33 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v33 = v31;
        if (v33)
        {
          v34 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v24 + 56) + 16))(*(_QWORD *)(v24 + 56), 8 * v33, 8);
          v35 = (uint64_t *)(v34 + 8 * v30);
          v36 = v34 + 8 * v33;
          if (v34)
            *v35 = v26;
        }
        else
        {
          v36 = 0;
          v35 = (uint64_t *)(8 * v30);
        }
        v39 = v35 + 1;
        v47 = *(_QWORD *)(v24 + 32);
        v46 = *(_QWORD *)(v24 + 40);
        if (v46 == v47)
          goto LABEL_50;
        v48 = v46 - v47 - 8;
        if (v48 < 0x38)
        {
          v50 = *(_QWORD *)(v24 + 40);
        }
        else if ((unint64_t)(v46 - (_QWORD)v35) < 0x20)
        {
          v50 = *(_QWORD *)(v24 + 40);
        }
        else
        {
          v49 = (v48 >> 3) + 1;
          v50 = v46 - 8 * (v49 & 0x3FFFFFFFFFFFFFFCLL);
          v51 = v35 - 2;
          v52 = (__int128 *)(v46 - 16);
          v53 = v49 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v54 = *v52;
            *((_OWORD *)v51 - 1) = *(v52 - 1);
            *(_OWORD *)v51 = v54;
            v51 -= 4;
            v52 -= 2;
            v53 -= 4;
          }
          while (v53);
          v35 -= v49 & 0x3FFFFFFFFFFFFFFCLL;
          if (v49 == (v49 & 0x3FFFFFFFFFFFFFFCLL))
            goto LABEL_49;
        }
        do
        {
          v63 = *(_QWORD *)(v50 - 8);
          v50 -= 8;
          *--v35 = v63;
        }
        while (v50 != v47);
LABEL_49:
        v46 = *(_QWORD *)(v24 + 32);
LABEL_50:
        *(_QWORD *)(v24 + 32) = v35;
        *(_QWORD *)(v24 + 40) = v39;
        v65 = *(_QWORD *)(v24 + 48);
        *(_QWORD *)(v24 + 48) = v36;
        if (v46)
          (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v24 + 56) + 40))(*(_QWORD *)(v24 + 56), v46, v65 - v46);
        goto LABEL_52;
      }
      goto LABEL_654;
    }
  }
  if (v27)
    *v27 = v26;
  v39 = v27 + 1;
LABEL_52:
  *(_QWORD *)(v24 + 40) = v39;
  *(_QWORD *)&v590 = v26;
  v66 = *(_QWORD *)(v24 + 120);
  if (!v66)
    goto LABEL_652;
  (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)v66 + 48))(v66, &v590);
  v550 = v20;
  v67 = *(uint64_t **)v589;
  v68 = *(_QWORD *)(v26 + 64);
  *(_QWORD *)(v68 + 24) = 0;
  v69 = *v67;
  *(_QWORD *)(v68 + 16) = *v67;
  v70 = *(_QWORD *)(v26 + 160);
  v71 = v67[1];
  if (v71)
  {
    v72 = (unint64_t *)(v71 + 8);
    do
      v73 = __ldxr(v72);
    while (__stxr(v73 + 1, v72));
  }
  v74 = *(std::__shared_weak_count **)(v70 + 24);
  *(_QWORD *)(v70 + 16) = v69;
  *(_QWORD *)(v70 + 24) = v71;
  if (v74)
  {
    p_shared_owners = (unint64_t *)&v74->__shared_owners_;
    do
      v76 = __ldaxr(p_shared_owners);
    while (__stlxr(v76 - 1, p_shared_owners));
    if (!v76)
    {
      ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
      std::__shared_weak_count::__release_weak(v74);
    }
  }
  v77 = *(uint64_t **)(v589 + 8);
  v78 = *(uint64_t **)(v26 + 64);
  v78[1] = 0;
  v79 = *v77;
  *v78 = *v77;
  v80 = *(_QWORD **)(v26 + 160);
  v81 = v77[1];
  if (v81)
  {
    v82 = (unint64_t *)(v81 + 8);
    do
      v83 = __ldxr(v82);
    while (__stxr(v83 + 1, v82));
  }
  v84 = (std::__shared_weak_count *)v80[1];
  *v80 = v79;
  v80[1] = v81;
  if (v84)
  {
    v85 = (unint64_t *)&v84->__shared_owners_;
    do
      v86 = __ldaxr(v85);
    while (__stlxr(v86 - 1, v85));
    if (!v86)
    {
      ((void (*)(std::__shared_weak_count *))v84->__on_zero_shared)(v84);
      std::__shared_weak_count::__release_weak(v84);
    }
  }
  v87 = *(_QWORD *)(*(_QWORD *)(v26 + 64) + 32);
  v590 = 0uLL;
  v88 = *(_QWORD *)(v87 + 8);
  *(_QWORD *)&v89 = 0;
  *((_QWORD *)&v89 + 1) = v87;
  if (v88)
    v90 = *(ggl::PipelineSetup **)(v87 + 72);
  else
    v90 = 0;
  v587 = v89;
  v590 = v89;
  v591 = 0;
  v592 = v88;
  v594 = v90;
  LOWORD(v593) = 1;
  *(_QWORD *)v90 = *(_QWORD *)(v589 + 76);
  v91 = (_DWORD *)objc_msgSend(v550, "origin");
  *((_DWORD *)v90 + 4) = *v91;
  *((_DWORD *)v90 + 5) = v91[1];
  *((_DWORD *)v90 + 6) = v91[2];
  objc_msgSend(v550, "size");
  *((_DWORD *)v90 + 8) = v92;
  *((_DWORD *)v90 + 9) = v93;
  *((_DWORD *)v90 + 10) = v94;
  v548 = (ggl::PipelineSetup *)v26;
  if (v88)
  {
    if ((_QWORD)v587 && *(_BYTE *)(*((_QWORD *)&v587 + 1) + 17) != 2)
      (*(void (**)(void))(*(_QWORD *)v587 + 64))();
    v95 = *(_QWORD *)(*((_QWORD *)&v587 + 1) + 64);
    if (v95 <= v88)
      v95 = v88;
    *(_QWORD *)(*((_QWORD *)&v587 + 1) + 56) = 0;
    *(_QWORD *)(*((_QWORD *)&v587 + 1) + 64) = v95;
  }
  v96 = *(_QWORD **)(v26 + 64);
  v97 = (_QWORD *)v96[6];
  v98 = v97[1];
  if (v98)
    v99 = (_DWORD *)v97[9];
  else
    v99 = 0;
  v99[92] = *(_DWORD *)(v589 + 56);
  v99[93] = *(_DWORD *)(v589 + 60);
  v99[94] = *(_DWORD *)(v589 + 64);
  v99[89] = 1065353216;
  if (v99 && v98)
  {
    if (v97[8] > v98)
      v98 = v97[8];
    v97[7] = 0;
    v97[8] = v98;
  }
  v100 = *(_QWORD **)(*(_QWORD *)(v589 + 40) + 8);
  v101 = v100[1];
  if ((v101 & (v101 - 1)) != 0)
  {
    v103 = 0x41E8D6E445F4145;
    if (v101 <= 0x41E8D6E445F4145)
      v103 = 0x41E8D6E445F4145 % v101;
    v102 = *(_QWORD **)(*v100 + 8 * v103);
    do
    {
      do
        v102 = (_QWORD *)*v102;
      while (v102[1] != 0x41E8D6E445F4145);
    }
    while (v102[2] != 0x41E8D6E445F4145);
  }
  else
  {
    v102 = *(_QWORD **)(*v100 + 8 * ((v101 - 1) & 0x41E8D6E445F4145));
    do
    {
      do
        v102 = (_QWORD *)*v102;
      while (v102[1] != 0x41E8D6E445F4145);
    }
    while (v102[2] != 0x41E8D6E445F4145);
  }
  v104 = *(uint64_t **)(v102[5] + 32);
  v96[11] = 0;
  v105 = *v104;
  v96[10] = *v104;
  v106 = *(_QWORD *)(v26 + 160);
  v107 = v104[1];
  if (v107)
  {
    v108 = (unint64_t *)(v107 + 8);
    do
      v109 = __ldxr(v108);
    while (__stxr(v109 + 1, v108));
  }
  v110 = *(std::__shared_weak_count **)(v106 + 88);
  *(_QWORD *)(v106 + 80) = v105;
  *(_QWORD *)(v106 + 88) = v107;
  if (v110)
  {
    v111 = (unint64_t *)&v110->__shared_owners_;
    do
      v112 = __ldaxr(v111);
    while (__stlxr(v112 - 1, v111));
    if (!v112)
    {
      ((void (*)(std::__shared_weak_count *))v110->__on_zero_shared)(v110);
      std::__shared_weak_count::__release_weak(v110);
    }
  }

  v113 = *(_QWORD *)(v26 + 64);
  v588 = *(_QWORD *)(v113 + 48);
  v579 = *(_QWORD *)(v113 + 64);
  v114 = 1.0;
  if (!*(_BYTE *)(a2 + 32))
    v114 = 0.0;
  v580 = v114;
  v115 = *(_QWORD *)(v586 + 392);
  v541 = a6;
  if (*(_BYTE *)(a2 + 32))
  {
    v116 = *(_QWORD *)(v115 + 536);
    v117 = *(_QWORD *)(v116 + 8);
    if (v117 != *(_QWORD *)v116)
    {
      v118 = *(_QWORD *)(v117 - 8);
      *(_QWORD *)(v116 + 8) = v117 - 8;
      v119 = *(uint64_t **)(v116 + 40);
      v120 = *(_QWORD *)(v116 + 48);
      if ((unint64_t)v119 >= v120)
      {
        v121 = *(_QWORD *)(v116 + 32);
        v122 = ((uint64_t)v119 - v121) >> 3;
        v123 = v122 + 1;
        if (!((unint64_t)(v122 + 1) >> 61))
        {
          v124 = v120 - v121;
          if (v124 >> 2 > v123)
            v123 = v124 >> 2;
          if ((unint64_t)v124 >= 0x7FFFFFFFFFFFFFF8)
            v125 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v125 = v123;
          if (v125)
          {
            v126 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v116 + 56) + 16))(*(_QWORD *)(v116 + 56), 8 * v125, 8);
            v127 = (uint64_t *)(v126 + 8 * v122);
            v128 = v126 + 8 * v125;
            if (v126)
              *v127 = v118;
          }
          else
          {
            v128 = 0;
            v127 = (uint64_t *)(8 * v122);
          }
          v144 = v127 + 1;
          v155 = *(_QWORD *)(v116 + 32);
          v154 = *(_QWORD *)(v116 + 40);
          if (v154 == v155)
            goto LABEL_202;
          v156 = v154 - v155 - 8;
          if (v156 < 0x38)
          {
            v158 = *(_QWORD *)(v116 + 40);
          }
          else if ((unint64_t)(v154 - (_QWORD)v127) < 0x20)
          {
            v158 = *(_QWORD *)(v116 + 40);
          }
          else
          {
            v157 = (v156 >> 3) + 1;
            v158 = v154 - 8 * (v157 & 0x3FFFFFFFFFFFFFFCLL);
            v159 = v127 - 2;
            v160 = (__int128 *)(v154 - 16);
            v161 = v157 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v162 = *v160;
              *((_OWORD *)v159 - 1) = *(v160 - 1);
              *(_OWORD *)v159 = v162;
              v159 -= 4;
              v160 -= 2;
              v161 -= 4;
            }
            while (v161);
            v127 -= v157 & 0x3FFFFFFFFFFFFFFCLL;
            if (v157 == (v157 & 0x3FFFFFFFFFFFFFFCLL))
              goto LABEL_201;
          }
          do
          {
            v186 = *(_QWORD *)(v158 - 8);
            v158 -= 8;
            *--v127 = v186;
          }
          while (v158 != v155);
LABEL_201:
          v154 = *(_QWORD *)(v116 + 32);
LABEL_202:
          *(_QWORD *)(v116 + 32) = v127;
          *(_QWORD *)(v116 + 40) = v144;
          v197 = *(_QWORD *)(v116 + 48);
          *(_QWORD *)(v116 + 48) = v128;
          if (v154)
            (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v116 + 56) + 40))(*(_QWORD *)(v116 + 56), v154, v197 - v154);
          goto LABEL_204;
        }
        goto LABEL_655;
      }
      goto LABEL_132;
    }
    v142 = *(_QWORD *)(v116 + 88);
    if (v142)
    {
      v118 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v142 + 48))(v142);
      v119 = *(uint64_t **)(v116 + 40);
      v143 = *(_QWORD *)(v116 + 48);
      if ((unint64_t)v119 >= v143)
      {
        v148 = *(_QWORD *)(v116 + 32);
        v149 = ((uint64_t)v119 - v148) >> 3;
        v150 = v149 + 1;
        if (!((unint64_t)(v149 + 1) >> 61))
        {
          v151 = v143 - v148;
          if (v151 >> 2 > v150)
            v150 = v151 >> 2;
          if ((unint64_t)v151 >= 0x7FFFFFFFFFFFFFF8)
            v152 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v152 = v150;
          if (v152)
          {
            v153 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v116 + 56) + 16))(*(_QWORD *)(v116 + 56), 8 * v152, 8);
            v127 = (uint64_t *)(v153 + 8 * v149);
            v128 = v153 + 8 * v152;
            if (v153)
              *v127 = v118;
          }
          else
          {
            v128 = 0;
            v127 = (uint64_t *)(8 * v149);
          }
          v144 = v127 + 1;
          v178 = *(_QWORD *)(v116 + 32);
          v154 = *(_QWORD *)(v116 + 40);
          if (v154 == v178)
            goto LABEL_202;
          v179 = v154 - v178 - 8;
          if (v179 < 0x38)
          {
            v181 = *(_QWORD *)(v116 + 40);
          }
          else if ((unint64_t)(v154 - (_QWORD)v127) < 0x20)
          {
            v181 = *(_QWORD *)(v116 + 40);
          }
          else
          {
            v180 = (v179 >> 3) + 1;
            v181 = v154 - 8 * (v180 & 0x3FFFFFFFFFFFFFFCLL);
            v182 = v127 - 2;
            v183 = (__int128 *)(v154 - 16);
            v184 = v180 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v185 = *v183;
              *((_OWORD *)v182 - 1) = *(v183 - 1);
              *(_OWORD *)v182 = v185;
              v182 -= 4;
              v183 -= 2;
              v184 -= 4;
            }
            while (v184);
            v127 -= v180 & 0x3FFFFFFFFFFFFFFCLL;
            if (v180 == (v180 & 0x3FFFFFFFFFFFFFFCLL))
              goto LABEL_201;
          }
          do
          {
            v196 = *(_QWORD *)(v181 - 8);
            v181 -= 8;
            *--v127 = v196;
          }
          while (v181 != v178);
          goto LABEL_201;
        }
LABEL_655:
        abort();
      }
LABEL_132:
      if (v119)
        *v119 = v118;
      v144 = v119 + 1;
LABEL_204:
      *(_QWORD *)(v116 + 40) = v144;
      *(_QWORD *)&v590 = v118;
      v198 = *(_QWORD *)(v116 + 120);
      if (v198)
      {
        (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)v198 + 48))(v198, &v590);
        LODWORD(v199) = **(_DWORD **)(v586 + 392);
        v200 = v550;
        v201 = *(uint64_t **)v589;
        v202 = *(_QWORD *)(v118 + 64);
        *(_QWORD *)(v202 + 24) = 0;
        v203 = *v201;
        *(_QWORD *)(v202 + 16) = *v201;
        v204 = *(_QWORD *)(v118 + 160);
        v205 = v201[1];
        if (v205)
        {
          v206 = (unint64_t *)(v205 + 8);
          do
            v207 = __ldxr(v206);
          while (__stxr(v207 + 1, v206));
        }
        v208 = *(std::__shared_weak_count **)(v204 + 24);
        *(_QWORD *)(v204 + 16) = v203;
        *(_QWORD *)(v204 + 24) = v205;
        if (v208)
        {
          v209 = (unint64_t *)&v208->__shared_owners_;
          do
            v210 = __ldaxr(v209);
          while (__stlxr(v210 - 1, v209));
          if (!v210)
          {
            ((void (*)(std::__shared_weak_count *))v208->__on_zero_shared)(v208);
            std::__shared_weak_count::__release_weak(v208);
          }
        }
        v211 = (ggl::PipelineSetup *)v118;
        v212 = *(_QWORD *)(*(_QWORD *)(v118 + 64) + 32);
        v590 = 0uLL;
        v213 = *(_QWORD *)(v212 + 8);
        *(_QWORD *)&v214 = 0;
        *((_QWORD *)&v214 + 1) = v212;
        if (v213)
          v215 = *(ggl::PipelineSetup **)(v212 + 72);
        else
          v215 = 0;
        v582 = v214;
        v590 = v214;
        v591 = 0;
        v592 = v213;
        v594 = v215;
        LOWORD(v593) = 1;
        *(_QWORD *)v215 = *(_QWORD *)(v589 + 76);
        v216 = (_DWORD *)objc_msgSend(v200, "origin");
        *((_DWORD *)v215 + 4) = *v216;
        *((_DWORD *)v215 + 5) = v216[1];
        *((_DWORD *)v215 + 6) = v216[2];
        objc_msgSend(v200, "size");
        *((_DWORD *)v215 + 8) = v217;
        *((_DWORD *)v215 + 9) = v218;
        *((_DWORD *)v215 + 10) = v219;
        if (v213)
        {
          if ((_QWORD)v582 && *(_BYTE *)(*((_QWORD *)&v582 + 1) + 17) != 2)
            (*(void (**)(void))(*(_QWORD *)v582 + 64))();
          v220 = *(_QWORD *)(*((_QWORD *)&v582 + 1) + 64);
          if (v220 <= v213)
            v220 = v213;
          *(_QWORD *)(*((_QWORD *)&v582 + 1) + 56) = 0;
          *(_QWORD *)(*((_QWORD *)&v582 + 1) + 64) = v220;
        }
        v221 = (_QWORD *)*((_QWORD *)v211 + 8);
        v222 = (_QWORD *)v221[6];
        v223 = v222[1];
        if (v223)
          v224 = (_DWORD *)v222[9];
        else
          v224 = 0;
        v224[92] = *(_DWORD *)(v589 + 56);
        v224[93] = *(_DWORD *)(v589 + 60);
        v224[94] = *(_DWORD *)(v589 + 64);
        v224[89] = LODWORD(v199);
        if (v224 && v223)
        {
          if (v222[8] > v223)
            v223 = v222[8];
          v222[7] = 0;
          v222[8] = v223;
        }
        v225 = *(_QWORD **)(*(_QWORD *)(v589 + 40) + 8);
        v226 = v225[1];
        if ((v226 & (v226 - 1)) != 0)
        {
          v228 = 0x41E8D6E445F4145;
          if (v226 <= 0x41E8D6E445F4145)
            v228 = 0x41E8D6E445F4145 % v226;
          v227 = *(_QWORD **)(*v225 + 8 * v228);
          do
          {
            do
              v227 = (_QWORD *)*v227;
            while (v227[1] != 0x41E8D6E445F4145);
          }
          while (v227[2] != 0x41E8D6E445F4145);
        }
        else
        {
          v227 = *(_QWORD **)(*v225 + 8 * ((v226 - 1) & 0x41E8D6E445F4145));
          do
          {
            do
              v227 = (_QWORD *)*v227;
            while (v227[1] != 0x41E8D6E445F4145);
          }
          while (v227[2] != 0x41E8D6E445F4145);
        }
        v229 = *(uint64_t **)(v227[5] + 32);
        v221[11] = 0;
        v230 = *v229;
        v221[10] = *v229;
        v231 = *((_QWORD *)v211 + 20);
        v232 = v229[1];
        if (v232)
        {
          v233 = (unint64_t *)(v232 + 8);
          do
            v234 = __ldxr(v233);
          while (__stxr(v234 + 1, v233));
        }
        v235 = *(std::__shared_weak_count **)(v231 + 88);
        *(_QWORD *)(v231 + 80) = v230;
        *(_QWORD *)(v231 + 88) = v232;
        if (v235)
        {
          v236 = (unint64_t *)&v235->__shared_owners_;
          do
            v237 = __ldaxr(v236);
          while (__stlxr(v237 - 1, v236));
          if (!v237)
          {
            ((void (*)(std::__shared_weak_count *))v235->__on_zero_shared)(v235);
            std::__shared_weak_count::__release_weak(v235);
          }
        }
        v238 = *(uint64_t **)(v589 + 8);
        v239 = (uint64_t *)*((_QWORD *)v211 + 8);
        v239[1] = 0;
        v240 = *v238;
        *v239 = *v238;
        v241 = (_QWORD *)*((_QWORD *)v211 + 20);
        v242 = v238[1];
        if (v242)
        {
          v243 = (unint64_t *)(v242 + 8);
          do
            v244 = __ldxr(v243);
          while (__stxr(v244 + 1, v243));
        }
        v245 = (std::__shared_weak_count *)v241[1];
        *v241 = v240;
        v241[1] = v242;
        if (v245)
        {
          v246 = (unint64_t *)&v245->__shared_owners_;
          do
            v247 = __ldaxr(v246);
          while (__stlxr(v247 - 1, v246));
          if (!v247)
          {
            ((void (*)(std::__shared_weak_count *))v245->__on_zero_shared)(v245);
            std::__shared_weak_count::__release_weak(v245);
          }
        }

        v248 = *((_QWORD *)v211 + 8);
        v575 = *(_QWORD **)(v248 + 48);
        v552 = *(_QWORD **)(v248 + 64);
        v249 = ggl::FragmentedPool<ggl::RenderItem>::pop(*(_QWORD *)(*(_QWORD *)(v586 + 392) + 528));
        FoggedExtrusionPipelineSetupForGroup = getFoggedExtrusionPipelineSetupForGroup(v249, v200, v589, **(float **)(v586 + 392));
        v539 = 0;
        v540 = (ggl::PipelineSetup *)FoggedExtrusionPipelineSetupForGroup;
        v546 = 0;
        goto LABEL_310;
      }
    }
LABEL_653:
    std::__throw_bad_function_call[abi:nn180100]();
    goto LABEL_656;
  }
  v129 = *(_QWORD *)(v115 + 520);
  v130 = *(_QWORD *)(v129 + 8);
  if (v130 == *(_QWORD *)v129)
  {
    v145 = *(_QWORD *)(v129 + 88);
    if (!v145)
      goto LABEL_653;
    v131 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v145 + 48))(v145);
    v132 = *(uint64_t **)(v129 + 40);
    v146 = *(_QWORD *)(v129 + 48);
    if ((unint64_t)v132 >= v146)
    {
      v163 = *(_QWORD *)(v129 + 32);
      v164 = ((uint64_t)v132 - v163) >> 3;
      v165 = v164 + 1;
      if ((unint64_t)(v164 + 1) >> 61)
        goto LABEL_655;
      v166 = v146 - v163;
      if (v166 >> 2 > v165)
        v165 = v166 >> 2;
      if ((unint64_t)v166 >= 0x7FFFFFFFFFFFFFF8)
        v167 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v167 = v165;
      if (v167)
      {
        v168 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v129 + 56) + 16))(*(_QWORD *)(v129 + 56), 8 * v167, 8);
        v140 = (uint64_t *)(v168 + 8 * v164);
        v141 = v168 + 8 * v167;
        if (v168)
          *v140 = v131;
      }
      else
      {
        v141 = 0;
        v140 = (uint64_t *)(8 * v164);
      }
      v147 = v140 + 1;
      v187 = *(_QWORD *)(v129 + 32);
      v169 = *(_QWORD *)(v129 + 40);
      if (v169 == v187)
        goto LABEL_262;
      v188 = v169 - v187 - 8;
      if (v188 < 0x38)
      {
        v190 = *(_QWORD *)(v129 + 40);
      }
      else if ((unint64_t)(v169 - (_QWORD)v140) < 0x20)
      {
        v190 = *(_QWORD *)(v129 + 40);
      }
      else
      {
        v189 = (v188 >> 3) + 1;
        v190 = v169 - 8 * (v189 & 0x3FFFFFFFFFFFFFFCLL);
        v191 = v140 - 2;
        v192 = (__int128 *)(v169 - 16);
        v193 = v189 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v194 = *v192;
          *((_OWORD *)v191 - 1) = *(v192 - 1);
          *(_OWORD *)v191 = v194;
          v191 -= 4;
          v192 -= 2;
          v193 -= 4;
        }
        while (v193);
        v140 -= v189 & 0x3FFFFFFFFFFFFFFCLL;
        if (v189 == (v189 & 0x3FFFFFFFFFFFFFFCLL))
          goto LABEL_261;
      }
      do
      {
        v251 = *(_QWORD *)(v190 - 8);
        v190 -= 8;
        *--v140 = v251;
      }
      while (v190 != v187);
      goto LABEL_261;
    }
  }
  else
  {
    v131 = *(_QWORD *)(v130 - 8);
    *(_QWORD *)(v129 + 8) = v130 - 8;
    v132 = *(uint64_t **)(v129 + 40);
    v133 = *(_QWORD *)(v129 + 48);
    if ((unint64_t)v132 >= v133)
    {
      v134 = *(_QWORD *)(v129 + 32);
      v135 = ((uint64_t)v132 - v134) >> 3;
      v136 = v135 + 1;
      if ((unint64_t)(v135 + 1) >> 61)
        goto LABEL_655;
      v137 = v133 - v134;
      if (v137 >> 2 > v136)
        v136 = v137 >> 2;
      if ((unint64_t)v137 >= 0x7FFFFFFFFFFFFFF8)
        v138 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v138 = v136;
      if (v138)
      {
        v139 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v129 + 56) + 16))(*(_QWORD *)(v129 + 56), 8 * v138, 8);
        v140 = (uint64_t *)(v139 + 8 * v135);
        v141 = v139 + 8 * v138;
        if (v139)
          *v140 = v131;
      }
      else
      {
        v141 = 0;
        v140 = (uint64_t *)(8 * v135);
      }
      v147 = v140 + 1;
      v170 = *(_QWORD *)(v129 + 32);
      v169 = *(_QWORD *)(v129 + 40);
      if (v169 == v170)
        goto LABEL_262;
      v171 = v169 - v170 - 8;
      if (v171 < 0x38)
      {
        v173 = *(_QWORD *)(v129 + 40);
      }
      else if ((unint64_t)(v169 - (_QWORD)v140) < 0x20)
      {
        v173 = *(_QWORD *)(v129 + 40);
      }
      else
      {
        v172 = (v171 >> 3) + 1;
        v173 = v169 - 8 * (v172 & 0x3FFFFFFFFFFFFFFCLL);
        v174 = v140 - 2;
        v175 = (__int128 *)(v169 - 16);
        v176 = v172 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v177 = *v175;
          *((_OWORD *)v174 - 1) = *(v175 - 1);
          *(_OWORD *)v174 = v177;
          v174 -= 4;
          v175 -= 2;
          v176 -= 4;
        }
        while (v176);
        v140 -= v172 & 0x3FFFFFFFFFFFFFFCLL;
        if (v172 == (v172 & 0x3FFFFFFFFFFFFFFCLL))
          goto LABEL_261;
      }
      do
      {
        v195 = *(_QWORD *)(v173 - 8);
        v173 -= 8;
        *--v140 = v195;
      }
      while (v173 != v170);
LABEL_261:
      v169 = *(_QWORD *)(v129 + 32);
LABEL_262:
      *(_QWORD *)(v129 + 32) = v140;
      *(_QWORD *)(v129 + 40) = v147;
      v252 = *(_QWORD *)(v129 + 48);
      *(_QWORD *)(v129 + 48) = v141;
      if (v169)
        (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v129 + 56) + 40))(*(_QWORD *)(v129 + 56), v169, v252 - v169);
      goto LABEL_264;
    }
  }
  if (v132)
    *v132 = v131;
  v147 = v132 + 1;
LABEL_264:
  *(_QWORD *)(v129 + 40) = v147;
  v546 = (ggl::PipelineSetup *)v131;
  *(_QWORD *)&v590 = v131;
  v253 = *(_QWORD *)(v129 + 120);
  if (!v253)
    goto LABEL_653;
  (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)v253 + 48))(v253, &v590);
  LODWORD(v199) = **(_DWORD **)(v586 + 392);
  v254 = v550;
  v255 = *(uint64_t **)v589;
  v256 = *(_QWORD *)(v131 + 64);
  *(_QWORD *)(v256 + 24) = 0;
  v257 = *v255;
  *(_QWORD *)(v256 + 16) = *v255;
  v258 = *(_QWORD *)(v131 + 160);
  v259 = v255[1];
  if (v259)
  {
    v260 = (unint64_t *)(v259 + 8);
    do
      v261 = __ldxr(v260);
    while (__stxr(v261 + 1, v260));
  }
  v262 = *(std::__shared_weak_count **)(v258 + 24);
  *(_QWORD *)(v258 + 16) = v257;
  *(_QWORD *)(v258 + 24) = v259;
  if (v262)
  {
    v263 = (unint64_t *)&v262->__shared_owners_;
    do
      v264 = __ldaxr(v263);
    while (__stlxr(v264 - 1, v263));
    if (!v264)
    {
      ((void (*)(std::__shared_weak_count *))v262->__on_zero_shared)(v262);
      std::__shared_weak_count::__release_weak(v262);
    }
  }
  v265 = *(_QWORD *)(*((_QWORD *)v546 + 8) + 32);
  v590 = 0uLL;
  v266 = *(_QWORD *)(v265 + 8);
  *(_QWORD *)&v267 = 0;
  *((_QWORD *)&v267 + 1) = v265;
  if (v266)
    v268 = *(ggl::PipelineSetup **)(v265 + 72);
  else
    v268 = 0;
  v583 = v267;
  v590 = v267;
  v591 = 0;
  v592 = v266;
  v594 = v268;
  LOWORD(v593) = 1;
  *(_QWORD *)v268 = *(_QWORD *)(v589 + 76);
  v269 = (_DWORD *)objc_msgSend(v254, "origin");
  *((_DWORD *)v268 + 4) = *v269;
  *((_DWORD *)v268 + 5) = v269[1];
  *((_DWORD *)v268 + 6) = v269[2];
  objc_msgSend(v254, "size");
  *((_DWORD *)v268 + 8) = v270;
  *((_DWORD *)v268 + 9) = v271;
  *((_DWORD *)v268 + 10) = v272;
  if (v266)
  {
    if ((_QWORD)v583 && *(_BYTE *)(*((_QWORD *)&v583 + 1) + 17) != 2)
      (*(void (**)(void))(*(_QWORD *)v583 + 64))();
    v273 = *(_QWORD *)(*((_QWORD *)&v583 + 1) + 64);
    if (v273 <= v266)
      v273 = v266;
    *(_QWORD *)(*((_QWORD *)&v583 + 1) + 56) = 0;
    *(_QWORD *)(*((_QWORD *)&v583 + 1) + 64) = v273;
  }
  v274 = (_QWORD *)*((_QWORD *)v546 + 8);
  v275 = (_QWORD *)v274[6];
  v276 = v275[1];
  if (v276)
    v277 = (_DWORD *)v275[9];
  else
    v277 = 0;
  v277[92] = *(_DWORD *)(v589 + 56);
  v277[93] = *(_DWORD *)(v589 + 60);
  v277[94] = *(_DWORD *)(v589 + 64);
  v277[89] = LODWORD(v199);
  if (v277 && v276)
  {
    if (v275[8] > v276)
      v276 = v275[8];
    v275[7] = 0;
    v275[8] = v276;
  }
  v278 = *(_QWORD **)(*(_QWORD *)(v589 + 40) + 8);
  v279 = v278[1];
  if ((v279 & (v279 - 1)) != 0)
  {
    v281 = 0x41E8D6E445F4145;
    if (v279 <= 0x41E8D6E445F4145)
      v281 = 0x41E8D6E445F4145 % v279;
    v280 = *(_QWORD **)(*v278 + 8 * v281);
    do
    {
      do
        v280 = (_QWORD *)*v280;
      while (v280[1] != 0x41E8D6E445F4145);
    }
    while (v280[2] != 0x41E8D6E445F4145);
  }
  else
  {
    v280 = *(_QWORD **)(*v278 + 8 * ((v279 - 1) & 0x41E8D6E445F4145));
    do
    {
      do
        v280 = (_QWORD *)*v280;
      while (v280[1] != 0x41E8D6E445F4145);
    }
    while (v280[2] != 0x41E8D6E445F4145);
  }
  v282 = *(uint64_t **)(v280[5] + 32);
  v274[11] = 0;
  v283 = *v282;
  v274[10] = *v282;
  v284 = *((_QWORD *)v546 + 20);
  v285 = v282[1];
  if (v285)
  {
    v286 = (unint64_t *)(v285 + 8);
    do
      v287 = __ldxr(v286);
    while (__stxr(v287 + 1, v286));
  }
  v288 = *(std::__shared_weak_count **)(v284 + 88);
  *(_QWORD *)(v284 + 80) = v283;
  *(_QWORD *)(v284 + 88) = v285;
  if (v288)
  {
    v289 = (unint64_t *)&v288->__shared_owners_;
    do
      v290 = __ldaxr(v289);
    while (__stlxr(v290 - 1, v289));
    if (!v290)
    {
      ((void (*)(std::__shared_weak_count *))v288->__on_zero_shared)(v288);
      std::__shared_weak_count::__release_weak(v288);
    }
  }

  v291 = *((_QWORD *)v546 + 8);
  v575 = *(_QWORD **)(v291 + 48);
  v552 = *(_QWORD **)(v291 + 64);
  v292 = ggl::FragmentedPool<ggl::RenderItem>::pop(*(_QWORD *)(*(_QWORD *)(v586 + 392) + 512));
  FoggedExtrusionPipelineSetupForGroup = getExtrusionPipelineSetupForGroup(v292, v254, v589, **(float **)(v586 + 392));
  v539 = (ggl::PipelineSetup *)FoggedExtrusionPipelineSetupForGroup;
  v540 = 0;
  v211 = 0;
LABEL_310:
  v547 = v211;
  v293 = *(_QWORD *)(FoggedExtrusionPipelineSetupForGroup + 64);
  v551 = *(_QWORD **)(v293 + 64);
  v294 = *(_QWORD **)(v293 + 48);
  v537 = v20;
  if (*(_BYTE *)(*(_QWORD *)(v586 + 392) + 769))
  {
    v295 = v589;
    v296 = objc_msgSend(v545, "alphaAtlas", v20);
    v297 = **(id **)(v589 + 40);
    objc_msgSend(v297, "sizeInPixels");
    v199 = v298;
    v6 = v299;

    v300 = ggl::FragmentedPool<ggl::RenderItem>::pop(*(_QWORD *)(*(_QWORD *)(v586 + 392) + 600));
    v301 = *(uint64_t **)v589;
    v302 = *(uint64_t **)(v300 + 64);
    v302[1] = 0;
    v303 = *v301;
    *v302 = *v301;
    v304 = *(_QWORD **)(v300 + 160);
    v305 = v301[1];
    if (v305)
    {
      v306 = (unint64_t *)(v305 + 8);
      do
        v307 = __ldxr(v306);
      while (__stxr(v307 + 1, v306));
    }
    v308 = (std::__shared_weak_count *)v304[1];
    *v304 = v303;
    v304[1] = v305;
    if (v308)
    {
      v309 = (unint64_t *)&v308->__shared_owners_;
      do
        v310 = __ldaxr(v309);
      while (__stlxr(v310 - 1, v309));
      if (!v310)
      {
        ((void (*)(std::__shared_weak_count *))v308->__on_zero_shared)(v308);
        std::__shared_weak_count::__release_weak(v308);
      }
    }
    v311 = *(uint64_t **)(v589 + 8);
    v312 = *(_QWORD *)(v300 + 64);
    *(_QWORD *)(v312 + 40) = 0;
    v313 = *v311;
    *(_QWORD *)(v312 + 32) = *v311;
    v314 = *(_QWORD *)(v300 + 160);
    v315 = v311[1];
    if (v315)
    {
      v316 = (unint64_t *)(v315 + 8);
      do
        v317 = __ldxr(v316);
      while (__stxr(v317 + 1, v316));
    }
    v318 = *(std::__shared_weak_count **)(v314 + 40);
    *(_QWORD *)(v314 + 32) = v313;
    *(_QWORD *)(v314 + 40) = v315;
    if (v318)
    {
      v319 = (unint64_t *)&v318->__shared_owners_;
      do
        v320 = __ldaxr(v319);
      while (__stlxr(v320 - 1, v319));
      if (!v320)
      {
        ((void (*)(std::__shared_weak_count *))v318->__on_zero_shared)(v318);
        std::__shared_weak_count::__release_weak(v318);
      }
    }
    **(_QWORD **)(v300 + 96) = *(_QWORD *)(v296 + 24);
    v538 = v300;
    v323 = *(_QWORD **)(*(_QWORD *)(v300 + 64) + 16);
    v590 = 0uLL;
    v324 = v323[1];
    *(_QWORD *)&v325 = 0;
    *((_QWORD *)&v325 + 1) = v323;
    v326 = v323;
    if (v324)
      v327 = v323[9];
    else
      v327 = 0;
    v584 = v325;
    v590 = v325;
    v591 = 0;
    v592 = v324;
    v594 = (ggl::PipelineSetup *)v327;
    LOWORD(v593) = 1;
    v321 = v199;
    *(float *)(v327 + 288) = v321;
    v322 = v6;
    *(float *)(v327 + 292) = v322;
    *(_DWORD *)(v327 + 336) = *(_DWORD *)(v589 + 80);
    *(_QWORD *)v327 = 0;
    *(_QWORD *)(v327 + 8) = 0;
    v329 = (_DWORD *)objc_msgSend(v550, "origin");
    *(_DWORD *)(v327 + 304) = *v329;
    *(_DWORD *)(v327 + 308) = v329[1];
    *(_DWORD *)(v327 + 312) = v329[2];
    objc_msgSend(v550, "size");
    *(_DWORD *)(v327 + 320) = v330;
    *(_DWORD *)(v327 + 324) = v331;
    *(_DWORD *)(v327 + 328) = v332;
    *(float *)(v327 + 340) = v580;
    v328 = v575;
    if (v324)
    {
      if ((_QWORD)v584 && *(_BYTE *)(*((_QWORD *)&v584 + 1) + 17) != 2)
        (*(void (**)(void))(*(_QWORD *)v584 + 64))();
      v333 = *(_QWORD *)(*((_QWORD *)&v584 + 1) + 64);
      if (v333 <= v324)
        v333 = v324;
      *(_QWORD *)(*((_QWORD *)&v584 + 1) + 56) = 0;
      *(_QWORD *)(*((_QWORD *)&v584 + 1) + 64) = v333;
    }
  }
  else
  {
    v538 = 0;
    v326 = 0;
    v295 = v589;
    v328 = v575;
  }
  v334 = *(uint64_t ***)(v295 + 16);
  v335 = *v334;
  v577 = v334[1];
  if (*v334 != v577)
  {
    v581 = 0;
    v336 = 0;
    v12 = 1.0;
    v549 = (float32x2_t)vdup_n_s32(0x37800080u);
    while (1)
    {
      v338 = *v335;
      v339 = (std::__shared_weak_count *)v335[1];
      *(_QWORD *)&v601 = *v335;
      *((_QWORD *)&v601 + 1) = v339;
      if (v339)
      {
        v340 = (unint64_t *)&v339->__shared_owners_;
        do
          v341 = __ldxr(v340);
        while (__stxr(v341 + 1, v340));
        *((_QWORD *)&v590 + 1) = v339;
        do
          v342 = __ldxr(v340);
        while (__stxr(v342 + 1, v340));
      }
      else
      {
        *((_QWORD *)&v590 + 1) = 0;
      }
      *(_QWORD *)&v590 = v338;
      v591 = 0;
      v592 = 0;
      LOBYTE(v593) = 0;
      if (v338)
        LODWORD(v338) = (*(uint64_t (**)(uint64_t, ggl::PipelineSetup **))(*(_QWORD *)v338 + 48))(v338, &v591);
      LOBYTE(v593) = v338;
      if (v339)
      {
        v343 = (unint64_t *)&v339->__shared_owners_;
        do
          v344 = __ldaxr(v343);
        while (__stlxr(v344 - 1, v343));
        if (!v344)
        {
          ((void (*)(std::__shared_weak_count *))v339->__on_zero_shared)(v339);
          std::__shared_weak_count::__release_weak(v339);
        }
        LODWORD(v338) = v593;
      }
      if (!(_DWORD)v338)
        goto LABEL_399;
      v345 = *(_QWORD *)(v590 + 24);
      v346 = (int)*(float *)(v295 + 88) >= 0x17 ? 23 : (int)*(float *)(v295 + 88);
      if ((v347 = *(_DWORD **)v345) != 0
        && (LODWORD(v199) = *v347, LODWORD(v347) = *(float *)v347 == v12, *(_BYTE *)(v345 + 10))
        && (*(float *)&v199 != 0.0 ? (v348 = *(float *)&v199 == v12) : (v348 = 1), !v348)
        || (v349 = *(unsigned __int8 *)(v345 + v347 + 11), LODWORD(v199) = 0, v349 == 2))
      {
        LOBYTE(v601) = 1;
        LOBYTE(v606) = 1;
        v350 = *(_BYTE *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<BOOL>((unsigned __int16 *)v345, 0x5Bu, v346, 0, &v601);
        v351 = *(_BYTE *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<BOOL>((unsigned __int16 *)v345, 0x5Bu, v346, 1, &v606);
        if (*(float *)&v199 < v12)
          v351 = v350;
      }
      else
      {
        v351 = *(_BYTE *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<BOOL>(*(unsigned __int16 **)(v590 + 24), 0x5Bu, v346, v349, 0);
      }
      v295 = v589;
      if (!v351)
      {
LABEL_399:
        v369 = v328[1];
        if (v369)
        {
          v370 = v336;
          v371 = (_QWORD *)(v328[9] + 16 * v336);
          *v371 = 0;
          v371[1] = 0;
          if (v328[8] > v369)
            v369 = v328[8];
          v328[7] = 0;
          v328[8] = v369;
        }
        else
        {
          v370 = v336;
          v372 = (_QWORD *)(16 * v336);
          *v372 = 0;
          v372[1] = 0;
        }
        v373 = v294[1];
        if (v373)
        {
          v374 = (_QWORD *)(v294[9] + 16 * v370);
          *v374 = 0;
          v374[1] = 0;
          if (v294[8] > v373)
            v373 = v294[8];
          v294[7] = 0;
          v294[8] = v373;
        }
        else
        {
          v375 = (_QWORD *)(16 * v370);
          *v375 = 0;
          v375[1] = 0;
        }
        if (*(_BYTE *)(*(_QWORD *)(v586 + 392) + 769))
        {
          v376 = v326[1];
          if (v376)
          {
            v377 = v326[9];
            *(_DWORD *)(v377 + 4 * v370 + 256) = 0;
            v378 = v377 + 16 * v370;
            *(_QWORD *)(v378 + 128) = 0;
            *(_QWORD *)(v378 + 136) = 0;
            v379 = v326[8];
            if (v379 <= v376)
              v379 = v376;
            v326[7] = 0;
            v326[8] = v379;
          }
          else
          {
            v337 = 16 * v370;
            *(_QWORD *)(v337 + 128) = 0;
            *(_QWORD *)(v337 + 136) = 0;
          }
        }
        v581 = 0x100000001;
        goto LABEL_342;
      }
      if ((int)*(float *)(v589 + 88) >= 0x17)
        v352 = 23;
      else
        v352 = (int)*(float *)(v589 + 88);
      gss::RenderStyle<gss::PropertyID>::valueForKeyAtZ<geo::Color<unsigned short,4,(geo::ColorSpace)0>>((unint64_t *)&v601, *(_QWORD *)(v590 + 24), 0xA1u, v352, 2u, 0);
      LOWORD(v8) = WORD1(v601);
      LOWORD(v7) = v601;
      LOWORD(v9) = WORD3(v601);
      LOWORD(v10) = WORD2(v601);
      if ((int)*(float *)(v589 + 88) >= 0x17)
        v353 = 23;
      else
        v353 = (int)*(float *)(v589 + 88);
      gss::RenderStyle<gss::PropertyID>::valueForKeyAtZ<geo::Color<unsigned short,4,(geo::ColorSpace)0>>((unint64_t *)&v601, *(_QWORD *)(v590 + 24), 0xA0u, v353, 2u, 0);
      LOWORD(v199) = WORD1(v601);
      LOWORD(v12) = v601;
      LOWORD(v6) = WORD3(v601);
      LOWORD(v11) = WORD2(v601);
      if ((int)*(float *)(v589 + 88) >= 0x17)
        v354 = 23;
      else
        v354 = (int)*(float *)(v589 + 88);
      gss::RenderStyle<gss::PropertyID>::valueForKeyAtZ<geo::Color<unsigned short,4,(geo::ColorSpace)0>>((unint64_t *)&v601, *(_QWORD *)(v590 + 24), 0xA3u, v354, 2u, 0);
      v572 = LODWORD(v199);
      LOWORD(v355) = v601;
      v561 = v355;
      LOWORD(v355) = WORD1(v601);
      v563 = v355;
      LOWORD(v355) = WORD2(v601);
      v565 = v355;
      LOWORD(v355) = WORD3(v601);
      v567 = v355;
      v569 = LODWORD(v12);
      if ((int)*(float *)(v589 + 88) >= 0x17)
        v356 = 23;
      else
        v356 = (int)*(float *)(v589 + 88);
      gss::RenderStyle<gss::PropertyID>::valueForKeyAtZ<geo::Color<unsigned short,4,(geo::ColorSpace)0>>((unint64_t *)&v601, *(_QWORD *)(v590 + 24), 3u, v356, 2u, 0);
      v357 = (unsigned __int16)v601;
      v358 = WORD1(v601);
      LOWORD(v199) = WORD3(v601);
      LOWORD(v12) = WORD2(v601);
      if ((int)*(float *)(v589 + 88) >= 0x17)
        v359 = 23;
      else
        v359 = (int)*(float *)(v589 + 88);
      gss::RenderStyle<gss::PropertyID>::valueForKeyAtZ<geo::Color<unsigned short,4,(geo::ColorSpace)0>>((unint64_t *)&v601, *(_QWORD *)(v590 + 24), 0x5Du, v359, 2u, 0);
      v553.i32[0] = (unsigned __int16)v601;
      v553.i32[1] = WORD1(v601);
      LOWORD(v360) = WORD2(v601);
      v555 = v360;
      v556 = LODWORD(v12);
      v361 = *(float *)(v589 + 88);
      v362 = (int)v361;
      LOWORD(v361) = WORD3(v601);
      v554 = LODWORD(v361);
      v363 = *(_QWORD *)(v590 + 24);
      if (v362 >= 0x17)
        v364 = 23;
      else
        v364 = v362;
      v365 = *(float **)v363;
      v557 = LODWORD(v199);
      if (*(_QWORD *)v363
        && (v366 = *v365, LODWORD(v365) = *v365 == 1.0, *(_BYTE *)(v363 + 10))
        && v366 != 0.0
        && v366 != 1.0
        || (v367 = *(unsigned __int8 *)(v363 + v365 + 11), v366 = 0.0, v367 == 2))
      {
        LOBYTE(v601) = 1;
        LOBYTE(v606) = 1;
        LODWORD(v199) = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v363, 0x14Au, v364, 0, &v601);
        v368 = *(float *)&v199
             + (float)((float)(*(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v363, 0x14Au, v364, 1u, &v606)- *(float *)&v199)* v366);
      }
      else
      {
        v368 = *(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v363, 0x14Au, v364, v367, 0);
      }
      v380 = *(_QWORD *)(v590 + 24);
      if ((int)*(float *)(v589 + 88) >= 0x17)
        v381 = 23;
      else
        v381 = (int)*(float *)(v589 + 88);
      v382 = *(float **)v380;
      v559 = v368;
      if (*(_QWORD *)v380
        && (v383 = *v382, LODWORD(v382) = *v382 == 1.0, *(_BYTE *)(v380 + 10))
        && v383 != 0.0
        && v383 != 1.0
        || (v384 = *(unsigned __int8 *)(v380 + v382 + 11), v383 = 0.0, v384 == 2))
      {
        LOBYTE(v601) = 1;
        LOBYTE(v606) = 1;
        LODWORD(v199) = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v380, 0x14Bu, v381, 0, &v601);
        v385 = *(float *)&v199
             + (float)((float)(*(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v380, 0x14Bu, v381, 1u, &v606)- *(float *)&v199)* v383);
      }
      else
      {
        v385 = *(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v380, 0x14Bu, v381, v384, 0);
      }
      v12 = 1.0;
      v386 = (float)v561 * 0.000015259;
      v387 = (float)v563 * 0.000015259;
      v388 = (float)v565 * 0.000015259;
      v389 = (float)v567 * 0.000015259;
      v390 = *(float *)(v589 + 84);
      v391 = *(float *)(v589 + 76);
      v392 = *(float *)(v589 + 92);
      v393 = (float)(v386 + (float)(v391 * (float)((float)((float)v569 * 0.000015259) - v386))) * v392;
      v394 = (float)(v387 + (float)(v391 * (float)((float)((float)v572 * 0.000015259) - v387))) * v392;
      v395 = (float)(v388 + (float)(v391 * (float)((float)((float)v11 * 0.000015259) - v388))) * v392;
      v396 = (float)(v389 + (float)(v391 * (float)((float)((float)LODWORD(v6) * 0.000015259) - v389)))
           * (float)(v392 * *(float *)(v589 + 72));
      v397 = v396 < 0.9999;
      v398 = v575[1];
      if (v398)
      {
        v399 = v575[9];
        v400 = v336;
        v401 = (float *)(v399 + 16 * v336);
        *v401 = v393;
        v401[1] = v394;
        v401[2] = v395;
        v401[3] = v396;
        if (v399)
        {
          if (v575[8] > v398)
            v398 = v575[8];
          v575[7] = 0;
          v575[8] = v398;
        }
      }
      else
      {
        v400 = v336;
        v402 = (float *)(16 * v336);
        *v402 = v393;
        v402[1] = v394;
        v402[2] = v395;
        v402[3] = v396;
      }
      v403 = *(float *)(v589 + 76);
      v404 = v389 + (float)(v403 * (float)((float)((float)v9 * 0.000015259) - v389));
      v405 = *(float *)(v589 + 92);
      v406 = (float)(v386 + (float)(v403 * (float)((float)((float)LODWORD(v7) * 0.000015259) - v386))) * v405;
      v407 = (float)(v387 + (float)(v403 * (float)((float)((float)LODWORD(v8) * 0.000015259) - v387))) * v405;
      v408 = (float)(v388 + (float)(v403 * (float)((float)((float)v10 * 0.000015259) - v388))) * v405;
      v409 = v404 * (float)(v405 * *(float *)(v589 + 72));
      v410 = v294[1];
      if (v410)
      {
        v411 = v294[9];
        v412 = (float *)(v411 + 16 * v400);
        *v412 = v406;
        v412[1] = v407;
        v412[2] = v408;
        v412[3] = v409;
        if (v411)
        {
          if (v294[8] > v410)
            v410 = v294[8];
          v294[7] = 0;
          v294[8] = v410;
        }
      }
      else
      {
        v413 = (float *)(16 * v400);
        *v413 = v406;
        v413[1] = v407;
        v413[2] = v408;
        v413[3] = v409;
      }
      v414 = v559 * 40075017.0 / ((double)(unint64_t)(1 << (int)v390) * v385);
      LOBYTE(v581) = v581 | v397;
      BYTE4(v581) |= v409 < 0.9999;
      v415 = v552[1];
      v416 = (float *)(v552[9] + 8 * v400);
      *v416 = v414;
      v416[1] = 1.0 - v559;
      if (v552[8] > v415)
        v415 = v552[8];
      v552[7] = 0;
      v552[8] = v415;
      v417 = v551[1];
      v418 = (float *)(v551[9] + 8 * v400);
      *v418 = v414;
      v418[1] = 1.0 - v559;
      if (v551[8] > v417)
        v417 = v551[8];
      v551[7] = 0;
      v551[8] = v417;
      if (!*(_BYTE *)(*(_QWORD *)(v586 + 392) + 769))
        goto LABEL_469;
      v573 = *(float *)(v589 + 92);
      LODWORD(v199) = *(_DWORD *)(v589 + 72);
      v570 = *(float *)(v589 + 76);
      v419 = *(_QWORD *)(v590 + 24);
      if ((int)*(float *)(v589 + 88) >= 0x17)
        v420 = 23;
      else
        v420 = (int)*(float *)(v589 + 88);
      v421 = *(float **)v419;
      if (*(_QWORD *)v419
        && (v422 = *v421, LODWORD(v421) = *v421 == 1.0, *(_BYTE *)(v419 + 10))
        && v422 != 0.0
        && v422 != 1.0
        || (v423 = *(unsigned __int8 *)(v419 + v421 + 11), v422 = 0.0, v423 == 2))
      {
        LOBYTE(v601) = 1;
        LOBYTE(v606) = 1;
        v424 = *(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v419, 2u, v420, 0, &v601);
        *(float *)&v6 = v424
                      + (float)((float)(*(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v419, 2u, v420, 1u, &v606)- v424)* v422);
      }
      else
      {
        LODWORD(v6) = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(*(_QWORD *)(v590 + 24), 2u, v420, v423, 0);
      }
      v425 = *(_QWORD *)(v590 + 24);
      if ((int)*(float *)(v589 + 88) >= 0x17)
        v426 = 23;
      else
        v426 = (int)*(float *)(v589 + 88);
      v427 = *(float **)v425;
      if (*(_QWORD *)v425
        && (v7 = *v427, LODWORD(v427) = *v427 == 1.0, *(_BYTE *)(v425 + 10))
        && v7 != 0.0
        && v7 != 1.0
        || (v428 = *(unsigned __int8 *)(v425 + v427 + 11), v7 = 0.0, v428 == 2))
      {
        LOBYTE(v601) = 1;
        LOBYTE(v606) = 1;
        v8 = *(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v425, 0x61u, v426, 0, &v601);
        v429 = v8
             + (float)((float)(*(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v425, 0x61u, v426, 1u, &v606)- v8)* v7);
        v430 = v326[1];
        if (v430)
          goto LABEL_461;
      }
      else
      {
        v429 = *(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(*(_QWORD *)(v590 + 24), 0x61u, v426, v428, 0);
        v430 = v326[1];
        if (v430)
        {
LABEL_461:
          v431 = v326[9];
          goto LABEL_464;
        }
      }
      v431 = 0;
LABEL_464:
      v432 = vmul_f32(vcvt_f32_u32(v553), v549);
      *(float *)(v431 + 4 * v400 + 256) = (float)(v429 * 0.5)
                                        + (float)(*(float *)(v589 + 76) * (float)(*(float *)&v6 - v429));
      v433 = (float32x2_t *)(v431 + 16 * v400);
      v433[16] = vmul_n_f32(vmla_n_f32(v432, vsub_f32(vmul_f32(vcvt_f32_u32((uint32x2_t)__PAIR64__(v358, v357)), v549), v432), v570), v573);
      v433[17].f32[0] = (float)((float)((float)v555 * 0.000015259)
                              + (float)(v570
                                      * (float)((float)((float)v556 * 0.000015259) - (float)((float)v555 * 0.000015259))))
                      * v573;
      v433[17].f32[1] = (float)((float)((float)v554 * 0.000015259)
                              + (float)(v570
                                      * (float)((float)((float)v557 * 0.000015259) - (float)((float)v554 * 0.000015259))))
                      * (float)(v573 * *(float *)&v199);
      if (v431)
      {
        v328 = v575;
        if (v430)
        {
          if (v326[8] > v430)
            v430 = v326[8];
          v326[7] = 0;
          v326[8] = v430;
          v295 = v589;
        }
        else
        {
          v295 = v589;
        }
        goto LABEL_342;
      }
LABEL_469:
      v295 = v589;
      v328 = v575;
LABEL_342:
      ++v336;
      gss::QueryableLocker<gss::PropertyID>::~QueryableLocker((uint64_t)&v590);
      v335 += 2;
      if (v335 == v577)
        goto LABEL_472;
    }
  }
  v581 = 0;
LABEL_472:
  v434 = *(uint64_t ***)(v295 + 24);
  v435 = *v434;
  v578 = v434[1];
  if (*v434 == v578)
  {
    v585 = 0;
  }
  else
  {
    v585 = 0;
    v436 = 0;
    *(_QWORD *)&v437 = 0;
    *(_QWORD *)&v438 = 0;
    v439 = v579;
    *((_QWORD *)&v438 + 1) = v579;
    *((_QWORD *)&v437 + 1) = v588;
    v574 = v438;
    v576 = v437;
    v440 = 1.0;
    do
    {
      v442 = *v435;
      v443 = (std::__shared_weak_count *)v435[1];
      *(_QWORD *)&v590 = *v435;
      *((_QWORD *)&v590 + 1) = v443;
      if (v443)
      {
        v444 = (unint64_t *)&v443->__shared_owners_;
        do
          v445 = __ldxr(v444);
        while (__stxr(v445 + 1, v444));
        v607 = v443;
        do
          v446 = __ldxr(v444);
        while (__stxr(v446 + 1, v444));
      }
      else
      {
        v607 = 0;
      }
      v606 = v442;
      v608[0] = 0;
      v608[1] = 0;
      v609 = 0;
      if (v442)
        LODWORD(v442) = (*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)v442 + 48))(v442, v608);
      v609 = v442;
      if (v443)
      {
        v447 = (unint64_t *)&v443->__shared_owners_;
        do
          v448 = __ldaxr(v447);
        while (__stlxr(v448 - 1, v447));
        if (!v448)
        {
          ((void (*)(std::__shared_weak_count *))v443->__on_zero_shared)(v443);
          std::__shared_weak_count::__release_weak(v443);
        }
        LODWORD(v442) = v609;
      }
      if ((_DWORD)v442)
      {
        v449 = *(_QWORD *)(v606 + 24);
        if ((int)*(float *)(v589 + 88) >= 0x17)
          v450 = 23;
        else
          v450 = (int)*(float *)(v589 + 88);
        v451 = *(_DWORD **)v449;
        if (*(_QWORD *)v449
          && (LODWORD(v199) = *v451, LODWORD(v451) = *(float *)v451 == v440, *(_BYTE *)(v449 + 10))
          && (*(float *)&v199 != 0.0 ? (v452 = *(float *)&v199 == v440) : (v452 = 1), !v452)
          || (v453 = *(unsigned __int8 *)(v449 + v451 + 11), LODWORD(v199) = 0, v453 == 2))
        {
          LOBYTE(v590) = 1;
          LOBYTE(v601) = 1;
          v454 = *(_BYTE *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<BOOL>((unsigned __int16 *)v449, 0x5Bu, v450, 0, &v590);
          v455 = *(_BYTE *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<BOOL>((unsigned __int16 *)v449, 0x5Bu, v450, 1, &v601);
          if (*(float *)&v199 < v440)
            v455 = v454;
        }
        else
        {
          v455 = *(_BYTE *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<BOOL>(*(unsigned __int16 **)(v606 + 24), 0x5Bu, v450, v453, 0);
        }
        v456 = v455 != 0;
      }
      else
      {
        v456 = 0;
      }
      v457 = v588;
      v590 = 0uLL;
      v458 = *(_QWORD *)(v439 + 8);
      if (v458)
        v459 = *(ggl::PipelineSetup **)(v439 + 72);
      else
        v459 = 0;
      v590 = v574;
      v591 = 0;
      v592 = v458;
      v594 = v459;
      LOWORD(v593) = 1;
      v601 = 0uLL;
      v460 = *(_QWORD *)(v588 + 8);
      if (v460)
        v461 = *(_QWORD *)(v588 + 72);
      else
        v461 = 0;
      v601 = v576;
      v602 = 0;
      v603 = v460;
      v605 = v461;
      v604 = 1;
      if (v456)
      {
        if ((int)*(float *)(v589 + 88) >= 0x17)
          v462 = 23;
        else
          v462 = (int)*(float *)(v589 + 88);
        gss::RenderStyle<gss::PropertyID>::valueForKeyAtZ<geo::Color<unsigned short,4,(geo::ColorSpace)0>>(&v610, *(_QWORD *)(v606 + 24), 0xA0u, v462, 2u, 0);
        LOWORD(v463) = WORD1(v610);
        LOWORD(v10) = v610;
        v571 = v463;
        LOWORD(v7) = HIWORD(v610);
        LOWORD(v8) = WORD2(v610);
        if ((int)*(float *)(v589 + 88) >= 0x17)
          v464 = 23;
        else
          v464 = (int)*(float *)(v589 + 88);
        gss::RenderStyle<gss::PropertyID>::valueForKeyAtZ<geo::Color<unsigned short,4,(geo::ColorSpace)0>>(&v610, *(_QWORD *)(v606 + 24), 0xA1u, v464, 2u, 0);
        LOWORD(v199) = WORD1(v610);
        LOWORD(v6) = v610;
        LOWORD(v11) = HIWORD(v610);
        LOWORD(v12) = WORD2(v610);
        if ((int)*(float *)(v589 + 88) >= 0x17)
          v465 = 23;
        else
          v465 = (int)*(float *)(v589 + 88);
        gss::RenderStyle<gss::PropertyID>::valueForKeyAtZ<geo::Color<unsigned short,4,(geo::ColorSpace)0>>(&v610, *(_QWORD *)(v606 + 24), 0xA3u, v465, 2u, 0);
        v566 = LODWORD(v8);
        v568 = LODWORD(v7);
        LOWORD(v466) = v610;
        v558 = v466;
        LOWORD(v466) = WORD1(v610);
        v562 = v466;
        LOWORD(v466) = WORD2(v610);
        v564 = v466;
        v467 = *(float *)(v589 + 88);
        v468 = (int)v467;
        LOWORD(v467) = HIWORD(v610);
        v560 = LODWORD(v467);
        v469 = *(_QWORD *)(v606 + 24);
        if (v468 >= 0x17)
          v470 = 23;
        else
          v470 = v468;
        v471 = *(float **)v469;
        if (*(_QWORD *)v469
          && (v472 = *v471, LODWORD(v471) = *v471 == v440, *(_BYTE *)(v469 + 10))
          && v472 != 0.0
          && v472 != v440
          || (v474 = *(unsigned __int8 *)(v469 + v471 + 11), v472 = 0.0, v474 == 2))
        {
          LOBYTE(v610) = 1;
          v611 = 1;
          v475 = *(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v469, 0x14Au, v470, 0, &v610);
          v7 = v475
             + (float)((float)(*(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v469, 0x14Au, v470, 1u, &v611)- v475)* v472);
        }
        else
        {
          v7 = *(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(*(_QWORD *)(v606 + 24), 0x14Au, v470, v474, 0);
        }
        v476 = *(_QWORD *)(v606 + 24);
        if ((int)*(float *)(v589 + 88) >= 0x17)
          v477 = 23;
        else
          v477 = (int)*(float *)(v589 + 88);
        v478 = *(float **)v476;
        if (*(_QWORD *)v476
          && (v8 = *v478, LODWORD(v478) = *v478 == v440, *(_BYTE *)(v476 + 10))
          && v8 != 0.0
          && v8 != v440
          || (v479 = *(unsigned __int8 *)(v476 + v478 + 11), v8 = 0.0, v479 == 2))
        {
          LOBYTE(v610) = 1;
          v611 = 1;
          v480 = *(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v476, 0x14Bu, v477, 0, &v610);
          v481 = v480
               + (float)((float)(*(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v476, 0x14Bu, v477, 1u, &v611)- v480)* v8);
        }
        else
        {
          v481 = *(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(*(_QWORD *)(v606 + 24), 0x14Bu, v477, v479, 0);
        }
        v482 = (float)v558 * 0.000015259;
        v483 = (float)v562 * 0.000015259;
        v484 = (float)v564 * 0.000015259;
        v485 = (float)v560 * 0.000015259;
        v486 = v7 * 40075017.0 / ((double)(unint64_t)(1 << (int)*(float *)(v589 + 84)) * v481);
        v440 = 1.0;
        v487 = *(float *)(v589 + 76);
        v488 = *(float *)(v589 + 92);
        v489 = *(float *)(v589 + 72) * v488;
        v490 = v489 * (float)(v485 + (float)(v487 * (float)((float)((float)v568 * 0.000015259) - v485)));
        v491 = v489 * (float)(v485 + (float)(v487 * (float)((float)((float)v11 * 0.000015259) - v485)));
        v492 = (float *)(v461 + 16 * v436);
        *v492 = (float)(v482 + (float)(v487 * (float)((float)((float)v10 * 0.000015259) - v482))) * v488;
        v492[1] = (float)(v483 + (float)(v487 * (float)((float)((float)v571 * 0.000015259) - v483))) * v488;
        v492[2] = (float)(v484 + (float)(v487 * (float)((float)((float)v566 * 0.000015259) - v484))) * v488;
        v492[3] = v490;
        v492[32] = (float)(v482 + (float)(v487 * (float)((float)((float)LODWORD(v6) * 0.000015259) - v482))) * v488;
        v492[33] = (float)(v483 + (float)(v487 * (float)((float)((float)LODWORD(v199) * 0.000015259) - v483))) * v488;
        v492[34] = (float)(v484 + (float)(v487 * (float)((float)((float)LODWORD(v12) * 0.000015259) - v484))) * v488;
        v492[35] = v491;
        v493 = (float *)((char *)v459 + 8 * v436);
        *v493 = v486;
        v493[1] = 1.0 - v7;
        v494 = v490 < 0.9999;
        if (v491 < 0.9999)
          v494 = 1;
        v585 |= v494;
        v457 = v588;
      }
      else
      {
        v473 = (_QWORD *)(v461 + 16 * v436);
        *v473 = 0;
        v473[1] = 0;
        v473[16] = 0;
        v473[17] = 0;
        v585 = 1;
      }
      *(float *)(v461 + 384) = v580;
      if (v460)
      {
        v495 = *(_QWORD *)(v457 + 64);
        if (v495 <= v460)
          v495 = v460;
        *(_QWORD *)(v457 + 56) = 0;
        *(_QWORD *)(v457 + 64) = v495;
      }
      v439 = v579;
      if (v459 && v458)
      {
        v441 = *(_QWORD *)(v579 + 64);
        if (v441 <= v458)
          v441 = v458;
        *(_QWORD *)(v579 + 56) = 0;
        *(_QWORD *)(v579 + 64) = v441;
      }
      ++v436;
      gss::QueryableLocker<gss::PropertyID>::~QueryableLocker((uint64_t)&v606);
      v435 += 2;
    }
    while (v435 != v578);
  }
  if ((v581 & 1) == 0)
  {
    v496 = v541;
    v497 = PointyRoofDepthPipelineSetupForGroup;
    v498 = v550;
    v499 = v546;
    v501 = v539;
    v500 = v540;
    if (v546)
      ggl::Flyover::FlyoverPipelineSetup::setState(v546, *(_QWORD *)(*(_QWORD *)(v586 + 392) + 136), *(std::__shared_weak_count **)(*(_QWORD *)(v586 + 392) + 144));
    if (v547)
    {
      v503 = *(_QWORD *)(*(_QWORD *)(v586 + 392) + 168);
      v502 = *(std::__shared_weak_count **)(*(_QWORD *)(v586 + 392) + 176);
      if (!v502)
        goto LABEL_572;
      goto LABEL_570;
    }
LABEL_592:
    if ((v581 & 0x100000000) != 0)
      goto LABEL_593;
    goto LABEL_600;
  }
  v496 = v541;
  v497 = PointyRoofDepthPipelineSetupForGroup;
  v498 = v550;
  v499 = v546;
  v501 = v539;
  v500 = v540;
  if (v546)
    ggl::Flyover::FlyoverPipelineSetup::setState(v546, *(_QWORD *)(*(_QWORD *)(v586 + 392) + 296), *(std::__shared_weak_count **)(*(_QWORD *)(v586 + 392) + 304));
  if (!v547)
    goto LABEL_592;
  v503 = *(_QWORD *)(*(_QWORD *)(v586 + 392) + 328);
  v502 = *(std::__shared_weak_count **)(*(_QWORD *)(v586 + 392) + 336);
  if (!v502)
    goto LABEL_572;
LABEL_570:
  v504 = (unint64_t *)&v502->__shared_owners_;
  do
    v505 = __ldxr(v504);
  while (__stxr(v505 + 1, v504));
LABEL_572:
  if (v503 && **(_QWORD **)(v503 + 40) == *((_QWORD *)v547 + 1))
  {
    v509 = *((_QWORD *)v547 + 2);
    if (v509 && v509 != v503)
      ggl::PipelineSetup::resetData((uint64_t)v547);
    if (v502)
    {
      v510 = (unint64_t *)&v502->__shared_owners_;
      do
        v511 = __ldxr(v510);
      while (__stxr(v511 + 1, v510));
    }
    v506 = (std::__shared_weak_count *)*((_QWORD *)v547 + 3);
    *((_QWORD *)v547 + 2) = v503;
    *((_QWORD *)v547 + 3) = v502;
    v499 = v546;
    if (!v506)
    {
LABEL_588:
      if (!v502)
        goto LABEL_592;
      goto LABEL_589;
    }
    v512 = (unint64_t *)&v506->__shared_owners_;
    do
      v508 = __ldaxr(v512);
    while (__stlxr(v508 - 1, v512));
  }
  else
  {
    v506 = (std::__shared_weak_count *)*((_QWORD *)v547 + 3);
    *((_QWORD *)v547 + 2) = 0;
    *((_QWORD *)v547 + 3) = 0;
    v499 = v546;
    if (!v506)
      goto LABEL_588;
    v507 = (unint64_t *)&v506->__shared_owners_;
    do
      v508 = __ldaxr(v507);
    while (__stlxr(v508 - 1, v507));
  }
  if (v508)
    goto LABEL_588;
  ((void (*)(std::__shared_weak_count *))v506->__on_zero_shared)(v506);
  std::__shared_weak_count::__release_weak(v506);
  if (!v502)
    goto LABEL_592;
LABEL_589:
  v513 = (unint64_t *)&v502->__shared_owners_;
  do
    v514 = __ldaxr(v513);
  while (__stlxr(v514 - 1, v513));
  if (v514)
    goto LABEL_592;
  ((void (*)(std::__shared_weak_count *))v502->__on_zero_shared)(v502);
  std::__shared_weak_count::__release_weak(v502);
  if ((v581 & 0x100000000) != 0)
  {
LABEL_593:
    if (v501)
      ggl::Flyover::FlyoverPipelineSetup::setState(v501, *(_QWORD *)(*(_QWORD *)(v586 + 392) + 280), *(std::__shared_weak_count **)(*(_QWORD *)(v586 + 392) + 288));
    if (v500)
    {
      v515 = *(_QWORD *)(v586 + 392) + 312;
LABEL_604:
      ggl::Flyover::FlyoverPipelineSetup::setState(v500, *(_QWORD *)v515, *(std::__shared_weak_count **)(v515 + 8));
      goto LABEL_605;
    }
    goto LABEL_605;
  }
LABEL_600:
  if (v501)
    ggl::Flyover::FlyoverPipelineSetup::setState(v501, *(_QWORD *)(*(_QWORD *)(v586 + 392) + 120), *(std::__shared_weak_count **)(*(_QWORD *)(v586 + 392) + 128));
  if (v500)
  {
    v515 = *(_QWORD *)(v586 + 392) + 152;
    goto LABEL_604;
  }
LABEL_605:
  v516 = *(_QWORD **)(v586 + 392);
  if ((v585 & 1) != 0)
  {
    if (!v548)
      goto LABEL_636;
    v518 = v516[43];
    v517 = (std::__shared_weak_count *)v516[44];
    if (!v517)
      goto LABEL_613;
LABEL_611:
    v519 = (unint64_t *)&v517->__shared_owners_;
    do
      v520 = __ldxr(v519);
    while (__stxr(v520 + 1, v519));
    goto LABEL_613;
  }
  if (!v548)
    goto LABEL_636;
  v518 = v516[23];
  v517 = (std::__shared_weak_count *)v516[24];
  if (v517)
    goto LABEL_611;
LABEL_613:
  if (v518 && **(_QWORD **)(v518 + 40) == *((_QWORD *)v548 + 1))
  {
    v524 = *((_QWORD *)v548 + 2);
    if (v524 && v524 != v518)
      ggl::PipelineSetup::resetData((uint64_t)v548);
    if (v517)
    {
      v525 = (unint64_t *)&v517->__shared_owners_;
      do
        v526 = __ldxr(v525);
      while (__stxr(v526 + 1, v525));
    }
    v521 = (std::__shared_weak_count *)*((_QWORD *)v548 + 3);
    *((_QWORD *)v548 + 2) = v518;
    *((_QWORD *)v548 + 3) = v517;
    v499 = v546;
    if (!v521)
      goto LABEL_630;
    v527 = (unint64_t *)&v521->__shared_owners_;
    do
      v523 = __ldaxr(v527);
    while (__stlxr(v523 - 1, v527));
    goto LABEL_628;
  }
  v521 = (std::__shared_weak_count *)*((_QWORD *)v548 + 3);
  *((_QWORD *)v548 + 2) = 0;
  *((_QWORD *)v548 + 3) = 0;
  v499 = v546;
  if (v521)
  {
    v522 = (unint64_t *)&v521->__shared_owners_;
    do
      v523 = __ldaxr(v522);
    while (__stlxr(v523 - 1, v522));
LABEL_628:
    if (!v523)
    {
      ((void (*)(std::__shared_weak_count *))v521->__on_zero_shared)(v521);
      std::__shared_weak_count::__release_weak(v521);
    }
  }
LABEL_630:
  if (v517)
  {
    v528 = (unint64_t *)&v517->__shared_owners_;
    do
      v529 = __ldaxr(v528);
    while (__stlxr(v529 - 1, v528));
    if (!v529)
    {
      ((void (*)(std::__shared_weak_count *))v517->__on_zero_shared)(v517);
      std::__shared_weak_count::__release_weak(v517);
    }
  }
  v516 = *(_QWORD **)(v586 + 392);
LABEL_636:
  *(_QWORD *)&v590 = v544;
  *((_QWORD *)&v590 + 1) = v499;
  v591 = v547;
  v592 = v543;
  v593 = v501;
  v594 = v500;
  v595 = v497;
  v596 = v548;
  v597 = v538;
  v598 = vrev64_s32(*(int32x2_t *)(v589 + 96));
  v599 = *(_QWORD *)(v589 + 48);
  v600 = *(float *)(v589 + 68) > 0.5;
  v530 = v496[3];
  if (!v530)
  {
LABEL_639:
    v613 = (_QWORD *)v530;
    goto LABEL_641;
  }
  if ((_QWORD *)v530 != v496)
  {
    v530 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v530 + 16))(v530);
    goto LABEL_639;
  }
  v613 = v612;
  (*(void (**)(_QWORD *, _QWORD *))(*v496 + 24))(v496, v612);
LABEL_641:
  submitRenderItems(v498, (uint64_t)v516, (uint64_t *)&v590, v612);
  v531 = v613;
  if (v613 == v612)
  {
    v532 = 4;
    v531 = v612;
    goto LABEL_645;
  }
  if (v613)
  {
    v532 = 5;
LABEL_645:
    (*(void (**)(void))(*v531 + 8 * v532))();
  }
  for (i = *(_QWORD **)(objc_msgSend(v498, "featureIds", v537) + 16); i; i = (_QWORD *)*i)
  {
    v534 = i[2];
    v535 = operator new(0x20uLL);
    v536 = *(float *)(v589 + 84);
    v535[24] = (int)v536;
    *(_QWORD *)v535 = 0;
    *((_QWORD *)v535 + 1) = ((v534 << 6) + (v534 >> 2) + (int)v536 - 0x61C8864680B583EBLL) ^ v534;
    *((_QWORD *)v535 + 2) = v534;
    if ((std::__hash_table<md::FeatureIdZoom,md::FeatureIdZoomHash,std::equal_to<md::FeatureIdZoom>,std::allocator<md::FeatureIdZoom>>::__node_insert_unique((_QWORD *)(v586 + 416), (uint64_t)v535) & 1) == 0)operator delete(v535);
  }

}

void sub_19FACCF98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49)
{
  void *v49;
  void *v50;

  ggl::BufferMemory::~BufferMemory((ggl::BufferMemory *)&a49);

  _Unwind_Resume(a1);
}

void md::OcclusionPipelineProxy::setTransformConstant(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;

  v3 = *a2;
  v4 = *(_QWORD *)(*a2 + 64);
  v5 = *a3;
  v6 = a3[1];
  *(_QWORD *)(v4 + 16) = *a3;
  *(_QWORD *)(v4 + 24) = 0;
  v7 = *(_QWORD *)(v3 + 160);
  if (v6)
  {
    v8 = (unint64_t *)(v6 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  v10 = *(std::__shared_weak_count **)(v7 + 24);
  *(_QWORD *)(v7 + 16) = v5;
  *(_QWORD *)(v7 + 24) = v6;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
}

void md::OcclusionPipelineProxy::~OcclusionPipelineProxy(md::OcclusionPipelineProxy *this)
{
  JUMPOUT(0x1A1AF4E00);
}

void md::OcclusionPipelineProxy::update(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  unint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  __int128 *v32;
  uint64_t v33;
  __int128 v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  __int128 *v40;
  uint64_t v41;
  __int128 v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t *v50;
  uint64_t v51;
  uint64_t *v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t *v57;
  uint64_t v58;
  uint64_t *v59;
  uint64_t v60;
  uint64_t *v61;
  uint64_t v62;
  uint64_t *v63;
  uint64_t v64;
  uint64_t *HasTransformConstant;
  uint64_t v66;
  uint64_t *HasTransformInstanceDeviceData;
  _BYTE v68[20];
  int v69;
  uint64_t v70;
  uint64_t v71;
  int v72;
  uint64_t v73;
  uint64_t v74;
  int v75;

  v6 = *(_QWORD *)(a1 + 24);
  v7 = *(_QWORD *)(v6 + 8);
  if (v7 == *(_QWORD *)v6)
  {
    v18 = *(_QWORD *)(v6 + 88);
    if (!v18)
    {
LABEL_57:
      std::__throw_bad_function_call[abi:nn180100]();
LABEL_58:
      abort();
    }
    v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v18 + 48))(v18);
    v9 = *(uint64_t **)(v6 + 40);
    v19 = *(_QWORD *)(v6 + 48);
    if ((unint64_t)v9 >= v19)
    {
      v21 = *(_QWORD *)(v6 + 32);
      v22 = ((uint64_t)v9 - v21) >> 3;
      v13 = v22 + 1;
      if ((unint64_t)(v22 + 1) >> 61)
        goto LABEL_58;
      v23 = v19 - v21;
      if (v23 >> 2 > v13)
        v13 = v23 >> 2;
      if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFF8)
        v13 = 0x1FFFFFFFFFFFFFFFLL;
      if (v13)
      {
        v24 = 8 * v13;
        v25 = (*(uint64_t (**)(_QWORD, unint64_t, uint64_t))(**(_QWORD **)(v6 + 56) + 16))(*(_QWORD *)(v6 + 56), 8 * v13, 8);
        v17 = (uint64_t *)(v25 + 8 * v22);
        v13 = v25 + v24;
        if (v25)
          *v17 = v8;
      }
      else
      {
        v17 = (uint64_t *)(8 * v22);
      }
      v20 = v17 + 1;
      v35 = *(_QWORD *)(v6 + 32);
      v26 = *(_QWORD *)(v6 + 40);
      if (v26 == v35)
        goto LABEL_48;
      v36 = v26 - v35 - 8;
      if (v36 < 0x38)
      {
        v38 = *(_QWORD *)(v6 + 40);
      }
      else if ((unint64_t)(v26 - (_QWORD)v17) < 0x20)
      {
        v38 = *(_QWORD *)(v6 + 40);
      }
      else
      {
        v37 = (v36 >> 3) + 1;
        v38 = v26 - 8 * (v37 & 0x3FFFFFFFFFFFFFFCLL);
        v39 = v17 - 2;
        v40 = (__int128 *)(v26 - 16);
        v41 = v37 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v42 = *v40;
          *((_OWORD *)v39 - 1) = *(v40 - 1);
          *(_OWORD *)v39 = v42;
          v39 -= 4;
          v40 -= 2;
          v41 -= 4;
        }
        while (v41);
        v17 -= v37 & 0x3FFFFFFFFFFFFFFCLL;
        if (v37 == (v37 & 0x3FFFFFFFFFFFFFFCLL))
          goto LABEL_47;
      }
      do
      {
        v44 = *(_QWORD *)(v38 - 8);
        v38 -= 8;
        *--v17 = v44;
      }
      while (v38 != v35);
      goto LABEL_47;
    }
  }
  else
  {
    v8 = *(_QWORD *)(v7 - 8);
    *(_QWORD *)(v6 + 8) = v7 - 8;
    v9 = *(uint64_t **)(v6 + 40);
    v10 = *(_QWORD *)(v6 + 48);
    if ((unint64_t)v9 >= v10)
    {
      v11 = *(_QWORD *)(v6 + 32);
      v12 = ((uint64_t)v9 - v11) >> 3;
      v13 = v12 + 1;
      if ((unint64_t)(v12 + 1) >> 61)
        goto LABEL_58;
      v14 = v10 - v11;
      if (v14 >> 2 > v13)
        v13 = v14 >> 2;
      if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF8)
        v13 = 0x1FFFFFFFFFFFFFFFLL;
      if (v13)
      {
        v15 = 8 * v13;
        v16 = (*(uint64_t (**)(_QWORD, unint64_t, uint64_t))(**(_QWORD **)(v6 + 56) + 16))(*(_QWORD *)(v6 + 56), 8 * v13, 8);
        v17 = (uint64_t *)(v16 + 8 * v12);
        v13 = v16 + v15;
        if (v16)
          *v17 = v8;
      }
      else
      {
        v17 = (uint64_t *)(8 * v12);
      }
      v20 = v17 + 1;
      v27 = *(_QWORD *)(v6 + 32);
      v26 = *(_QWORD *)(v6 + 40);
      if (v26 == v27)
        goto LABEL_48;
      v28 = v26 - v27 - 8;
      if (v28 < 0x38)
      {
        v30 = *(_QWORD *)(v6 + 40);
      }
      else if ((unint64_t)(v26 - (_QWORD)v17) < 0x20)
      {
        v30 = *(_QWORD *)(v6 + 40);
      }
      else
      {
        v29 = (v28 >> 3) + 1;
        v30 = v26 - 8 * (v29 & 0x3FFFFFFFFFFFFFFCLL);
        v31 = v17 - 2;
        v32 = (__int128 *)(v26 - 16);
        v33 = v29 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v34 = *v32;
          *((_OWORD *)v31 - 1) = *(v32 - 1);
          *(_OWORD *)v31 = v34;
          v31 -= 4;
          v32 -= 2;
          v33 -= 4;
        }
        while (v33);
        v17 -= v29 & 0x3FFFFFFFFFFFFFFCLL;
        if (v29 == (v29 & 0x3FFFFFFFFFFFFFFCLL))
          goto LABEL_47;
      }
      do
      {
        v43 = *(_QWORD *)(v30 - 8);
        v30 -= 8;
        *--v17 = v43;
      }
      while (v30 != v27);
LABEL_47:
      v26 = *(_QWORD *)(v6 + 32);
LABEL_48:
      *(_QWORD *)(v6 + 32) = v17;
      *(_QWORD *)(v6 + 40) = v20;
      v45 = *(_QWORD *)(v6 + 48);
      *(_QWORD *)(v6 + 48) = v13;
      if (v26)
        (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v6 + 56) + 40))(*(_QWORD *)(v6 + 56), v26, v45 - v26);
      goto LABEL_50;
    }
  }
  if (v9)
    *v9 = v8;
  v20 = v9 + 1;
LABEL_50:
  *(_QWORD *)(v6 + 40) = v20;
  *(_QWORD *)v68 = v8;
  v46 = *(_QWORD *)(v6 + 120);
  if (!v46)
    goto LABEL_57;
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v46 + 48))(v46, v68);
  v47 = *a3;
  *(_QWORD *)v68 = v8;
  v48 = (uint64_t *)gdc::Registry::storage<arComponents::PipelineInstanceToUse>(a2);
  gdc::ComponentStorageWrapper<md::ls::RegisterHandle>::emplace(v48, v47, v68);
  v49 = *a3;
  *(_QWORD *)&v68[12] = 0;
  *(_QWORD *)&v68[4] = 0;
  v70 = 0;
  v71 = 0;
  v74 = 0;
  v73 = 0;
  *(_DWORD *)v68 = 1065353216;
  v69 = 1065353216;
  v72 = 1065353216;
  v75 = 1065353216;
  v50 = (uint64_t *)gdc::Registry::storage<arComponents::ViewConstantDataComponent>(a2);
  gdc::ComponentStorageWrapper<arComponents::ViewConstantDataComponent>::emplace(v50, v49, (__int128 *)v68);
  v51 = *a3;
  *(_QWORD *)v68 = 0;
  *(_QWORD *)&v68[8] = 0;
  v52 = (uint64_t *)gdc::Registry::storage<arComponents::TransformConstantDataComponent>(a2);
  gdc::ComponentStorageWrapper<arComponents::TransformConstantDataComponent>::emplace(v52, v51, v68);
  v53 = *(std::__shared_weak_count **)&v68[8];
  if (*(_QWORD *)&v68[8])
  {
    v54 = (unint64_t *)(*(_QWORD *)&v68[8] + 8);
    do
      v55 = __ldaxr(v54);
    while (__stlxr(v55 - 1, v54));
    if (!v55)
    {
      ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
      std::__shared_weak_count::__release_weak(v53);
    }
  }
  v56 = *a3;
  v57 = (uint64_t *)gdc::Registry::storage<arComponents::NeedsTransformConstantDataUpdate>(a2);
  gdc::ComponentStorageWrapper<md::components::Collapsible>::emplace(v57, v56);
  v58 = *a3;
  *(_QWORD *)v68 = **(_QWORD **)(v8 + 64);
  v59 = (uint64_t *)gdc::Registry::storage<arComponents::CompWrap<ggl::ConstantDataTyped<ggl::Tile::View>>>(a2);
  gdc::ComponentStorageWrapper<md::ls::RegisterHandle>::emplace(v59, v58, v68);
  v60 = *a3;
  *(_QWORD *)v68 = *(_QWORD *)(*(_QWORD *)(v8 + 64) + 16);
  v61 = (uint64_t *)gdc::Registry::storage<arComponents::CompWrap<ggl::ConstantDataTyped<ggl::Tile::Transform>>>(a2);
  gdc::ComponentStorageWrapper<md::ls::RegisterHandle>::emplace(v61, v60, v68);
  v62 = *a3;
  *(_QWORD *)v68 = **(_QWORD **)(v8 + 32);
  v63 = (uint64_t *)gdc::Registry::storage<arComponents::CompWrap<ggl::DeviceDataTyped<ggl::DaVinci::InstanceTransform>>>(a2);
  gdc::ComponentStorageWrapper<md::ls::RegisterHandle>::emplace(v63, v62, v68);
  v64 = *a3;
  *(_QWORD *)v68 = a1;
  HasTransformConstant = (uint64_t *)gdc::Registry::storage<md::pipelineECS::HasTransformConstantData>(a2);
  gdc::ComponentStorageWrapper<md::ls::RegisterHandle>::emplace(HasTransformConstant, v64, v68);
  v66 = *a3;
  *(_QWORD *)v68 = a1 + 8;
  HasTransformInstanceDeviceData = (uint64_t *)gdc::Registry::storage<md::pipelineECS::HasTransformInstanceDeviceDataFeature>(a2);
  gdc::ComponentStorageWrapper<md::ls::RegisterHandle>::emplace(HasTransformInstanceDeviceData, v66, v68);
}

void sub_19FACD74C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void md::OcclusionPipelineProxy::setTransformInstanceDeviceData(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;

  v3 = *a2;
  v4 = *(uint64_t **)(a3 + 32);
  v5 = *(_QWORD **)(*a2 + 32);
  v6 = *v4;
  v7 = v4[1];
  *v5 = v6;
  v5[1] = 0;
  v8 = *(_QWORD **)(v3 + 128);
  if (v7)
  {
    v9 = (unint64_t *)(v7 + 8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  v11 = (std::__shared_weak_count *)v8[1];
  *v8 = v6;
  v8[1] = v7;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
}

void `non-virtual thunk to'md::OcclusionPipelineProxy::setTransformInstanceDeviceData(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;

  v3 = *a2;
  v4 = *(uint64_t **)(a3 + 32);
  v5 = *(_QWORD **)(*a2 + 32);
  v6 = *v4;
  v7 = v4[1];
  *v5 = v6;
  v5[1] = 0;
  v8 = *(_QWORD **)(v3 + 128);
  if (v7)
  {
    v9 = (unint64_t *)(v7 + 8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  v11 = (std::__shared_weak_count *)v8[1];
  *v8 = v6;
  v8[1] = v7;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
}

void `non-virtual thunk to'md::OcclusionPipelineProxy::update(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  md::OcclusionPipelineProxy::update(a1 - 16, a2, a3);
}

void ggl::Line::BasePipelineSetup::~BasePipelineSetup(ggl::Line::BasePipelineSetup *this)
{
  ggl::PipelineSetup::~PipelineSetup(this);
  JUMPOUT(0x1A1AF4E00);
}

BOOL ggl::Line::BasePipelineSetup::constantDataIsEnabled(ggl::Line::BasePipelineSetup *this, unint64_t a2)
{
  return a2 < 2;
}

uint64_t ggl::Line::BasePipelineSetup::textureIsEnabled(ggl::Line::BasePipelineSetup *this)
{
  return 0;
}

void md::RasterRenderLayer::layout(md::RasterRenderLayer *this, const md::LayoutContext *a2)
{
  const md::LayoutContext *v2;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t *v8;
  int8x8_t v9;
  uint8x8_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  _QWORD *v26;
  _BYTE *v27;
  _BYTE *v28;
  uint64_t v29;
  unsigned int v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unsigned __int8 *v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  ggl::CommandBuffer *v39;
  uint64_t v40;
  uint64_t **v41;
  uint64_t *v42;
  uint64_t *v43;
  uint64_t *v44;
  _QWORD *v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  _QWORD *v59;
  uint64_t v60;
  _OWORD *v61;
  __int128 *v62;
  uint64_t v63;
  __int128 v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t *v68;
  uint64_t *v69;
  uint64_t *v70;
  _QWORD *v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  _QWORD *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  _QWORD *v85;
  uint64_t v86;
  _OWORD *v87;
  __int128 *v88;
  uint64_t v89;
  __int128 v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t *v94;
  uint64_t *v95;
  uint64_t *v96;
  _QWORD *v97;
  uint64_t v98;
  unint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  _QWORD *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  unint64_t v110;
  _QWORD *v111;
  uint64_t v112;
  _OWORD *v113;
  __int128 *v114;
  uint64_t v115;
  __int128 v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  float *v124;
  std::__shared_weak_count *v125;
  unint64_t *v126;
  unint64_t v127;
  int v128;
  float v130;
  uint64_t v131;
  unsigned __int8 v132;
  id v133;
  _QWORD *v134;
  int8x8_t v135;
  uint8x8_t v136;
  unint64_t v137;
  float v138;
  _QWORD *v139;
  unint64_t v140;
  _QWORD *v141;
  unint64_t v142;
  float v143;
  float v144;
  uint64_t v145;
  uint64_t v146;
  _QWORD *v147;
  uint64_t v148;
  uint64_t v149;
  ggl::RenderItem *v150;
  uint64_t v151;
  uint64_t **v152;
  uint64_t *v153;
  uint64_t v154;
  _QWORD *v155;
  _QWORD *v156;
  unint64_t v157;
  uint64_t v158;
  uint64_t v159;
  unint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  _QWORD *v164;
  uint64_t v165;
  uint64_t *v166;
  uint64_t v167;
  _QWORD *v168;
  unint64_t v169;
  uint64_t v170;
  uint64_t v171;
  unint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  _QWORD *v176;
  uint64_t v177;
  uint64_t v178;
  unint64_t v179;
  _QWORD *v180;
  uint64_t *v181;
  uint64_t v182;
  uint64_t v183;
  _QWORD *v184;
  unint64_t v185;
  uint64_t v186;
  uint64_t v187;
  unint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  _QWORD *v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  unint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  unint64_t v203;
  _QWORD *v204;
  uint64_t v205;
  _OWORD *v206;
  __int128 *v207;
  uint64_t v208;
  __int128 v209;
  uint64_t v210;
  unint64_t v211;
  _QWORD *v212;
  uint64_t v213;
  unint64_t v214;
  _QWORD *v215;
  uint64_t v216;
  uint64_t v217;
  unint64_t v218;
  uint64_t v219;
  _OWORD *v220;
  __int128 *v221;
  uint64_t v222;
  __int128 v223;
  uint64_t v224;
  uint64_t v225;
  unint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  unint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  unint64_t v240;
  _QWORD *v241;
  uint64_t v242;
  _OWORD *v243;
  __int128 *v244;
  uint64_t v245;
  __int128 v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  unint64_t v250;
  _QWORD *v251;
  uint64_t v252;
  _OWORD *v253;
  __int128 *v254;
  uint64_t v255;
  __int128 v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  std::__shared_weak_count *v261;
  uint64_t v262;
  unint64_t *v263;
  unint64_t v264;
  std::__shared_weak_count *v265;
  unint64_t *v266;
  unint64_t v267;
  uint64_t v268;
  unint64_t *v269;
  unint64_t v270;
  unint64_t *v271;
  unint64_t *v272;
  unint64_t v273;
  _QWORD *v274;
  uint64_t v275;
  _QWORD *v276;
  uint64_t v277;
  unint64_t *v278;
  unint64_t v279;
  std::__shared_weak_count *v280;
  unint64_t *v281;
  unint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  unint64_t *v287;
  unint64_t v288;
  std::__shared_weak_count *v289;
  unint64_t *v290;
  unint64_t v291;
  uint64_t v292;
  unint64_t v293;
  unint64_t v294;
  unint64_t v295;
  uint64_t v296;
  uint64_t v297;
  unint64_t v298;
  uint64_t v299;
  _OWORD *v300;
  __int128 *v301;
  uint64_t v302;
  __int128 v303;
  uint64_t v304;
  uint64_t v305;
  unint64_t v306;
  uint64_t v307;
  _OWORD *v308;
  __int128 *v309;
  uint64_t v310;
  __int128 v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  std::__shared_weak_count *v318;
  uint64_t v319;
  unint64_t *v320;
  unint64_t v321;
  std::__shared_weak_count *v322;
  unint64_t *v323;
  unint64_t v324;
  uint64_t v325;
  unint64_t *v326;
  unint64_t v327;
  unint64_t *v328;
  unint64_t *v329;
  unint64_t v330;
  _QWORD *v331;
  uint64_t v332;
  unint64_t v333;
  uint64_t v334;
  _QWORD *v335;
  uint64_t v336;
  unint64_t *v337;
  unint64_t v338;
  std::__shared_weak_count *v339;
  unint64_t *v340;
  unint64_t v341;
  uint64_t v342;
  uint64_t v343;
  uint64_t v344;
  uint64_t v345;
  unint64_t *v346;
  unint64_t v347;
  std::__shared_weak_count *v348;
  unint64_t *v349;
  unint64_t v350;
  uint64_t v351;
  uint64_t v352;
  uint64_t v353;
  uint64_t v354;
  std::__shared_weak_count *v355;
  uint64_t v356;
  unint64_t *v357;
  unint64_t v358;
  std::__shared_weak_count *v359;
  unint64_t *v360;
  unint64_t v361;
  uint64_t v362;
  unint64_t *v363;
  unint64_t v364;
  unint64_t *v365;
  unint64_t *v366;
  unint64_t v367;
  _QWORD *v368;
  uint64_t v369;
  _QWORD *v370;
  uint64_t v371;
  unint64_t *v372;
  unint64_t v373;
  std::__shared_weak_count *v374;
  unint64_t *v375;
  unint64_t v376;
  uint64_t v377;
  uint64_t v378;
  uint64_t v379;
  uint64_t v380;
  unint64_t *v381;
  unint64_t v382;
  unint64_t *v383;
  unint64_t *v384;
  unint64_t v385;
  _QWORD *v386;
  uint64_t v387;
  _QWORD *v388;
  _QWORD *v389;
  uint64_t v390;
  unint64_t v391;
  uint64_t v392;
  uint64_t v393;
  id *v394;
  uint64_t v395;
  void *v396;
  uint64_t v397;
  _QWORD *v398;
  _QWORD *v399;
  _QWORD *v400;
  uint64_t v401;
  gss::Allocator *v402;
  uint64_t v403;
  __int128 v404;
  std::__shared_weak_count *v405;
  unint64_t *p_shared_owners;
  unint64_t v407;
  std::__shared_weak_count *size;
  unint64_t *v409;
  unint64_t v410;
  std::__shared_weak_count *v411;
  unint64_t *v412;
  unint64_t v413;
  unint64_t v414;
  unint64_t *v415;
  unint64_t v416;
  std::string::size_type v417;
  std::string::size_type v418;
  char v419;
  std::__shared_weak_count *v420;
  unint64_t *v421;
  id v422;
  void *v423;
  uint64_t *v424;
  unint64_t v425;
  unint64_t v426;
  std::__shared_weak_count *v427;
  unint64_t *v428;
  unint64_t v429;
  uint64_t v430;
  uint64_t v431;
  unint64_t *v432;
  unint64_t v433;
  uint64_t v434;
  std::__shared_weak_count *v435;
  unint64_t *v436;
  unint64_t v437;
  std::__shared_weak_count *v438;
  unint64_t *v439;
  unint64_t v440;
  std::__shared_weak_count *v441;
  unint64_t *v442;
  unint64_t v443;
  const md::LayoutContext *v444;
  uint64_t v445;
  uint64_t *v446;
  uint64_t v447;
  uint64_t v448;
  ggl::CommandBuffer *v449;
  uint64_t v450[2];
  uint64_t *v451;
  std::__shared_weak_count *v452;
  uint64_t v453;
  std::__shared_weak_count *v454;
  std::string v455;
  std::string v456;
  void *__p;
  std::__shared_weak_count *v458;
  char *v459;
  uint64_t v460;
  unsigned __int8 v461;
  _QWORD v462[3];
  _QWORD *v463;
  _QWORD v464[3];
  _QWORD *v465;
  _QWORD v466[3];
  _QWORD *v467;
  _QWORD v468[3];
  _QWORD *v469;
  uint64_t v470;

  v2 = a2;
  v470 = *MEMORY[0x1E0C80C00];
  v466[0] = &off_1E42CE6A8;
  v466[1] = a2;
  v467 = v466;
  v464[0] = &off_1E42CE6F0;
  v464[1] = a2;
  v465 = v464;
  v469 = v468;
  v468[0] = &off_1E42CE6F0;
  v468[1] = a2;
  std::__function::__func<md::RasterRenderLayer::layout(md::LayoutContext const&)::$_0,std::allocator<md::RasterRenderLayer::layout(md::LayoutContext const&)::$_0>,void ()(void)>::operator()((uint64_t)v466);
  v4 = v465;
  if (v465 == v464)
  {
    v5 = 4;
    v4 = v464;
  }
  else
  {
    if (!v465)
      goto LABEL_6;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_6:
  v6 = v467;
  if (v467 == v466)
  {
    v7 = 4;
    v6 = v466;
    goto LABEL_10;
  }
  if (v467)
  {
    v7 = 5;
LABEL_10:
    (*(void (**)(void))(*v6 + 8 * v7))();
  }
  v8 = (uint64_t *)*((_QWORD *)v2 + 1);
  v9 = (int8x8_t)v8[1];
  if (!*(_QWORD *)&v9)
  {
    v448 = 0;
    goto LABEL_58;
  }
  v10 = (uint8x8_t)vcnt_s8(v9);
  v10.i16[0] = vaddlv_u8(v10);
  if (v10.u32[0] > 1uLL)
  {
    v11 = 0x3070CB6B3C7F21D3;
    if (*(_QWORD *)&v9 <= 0x3070CB6B3C7F21D3uLL)
      v11 = 0x3070CB6B3C7F21D3uLL % *(_QWORD *)&v9;
  }
  else
  {
    v11 = (*(_QWORD *)&v9 - 1) & 0x3070CB6B3C7F21D3;
  }
  v12 = *v8;
  v13 = *(_QWORD **)(v12 + 8 * v11);
  if (!v13)
    goto LABEL_35;
  v14 = (_QWORD *)*v13;
  if (!v14)
    goto LABEL_35;
  if (v10.u32[0] < 2uLL)
  {
    while (1)
    {
      v16 = v14[1];
      if (v16 == 0x3070CB6B3C7F21D3)
      {
        if (v14[2] == 0x3070CB6B3C7F21D3)
          goto LABEL_33;
      }
      else if ((v16 & (*(_QWORD *)&v9 - 1)) != v11)
      {
        goto LABEL_35;
      }
      v14 = (_QWORD *)*v14;
      if (!v14)
        goto LABEL_35;
    }
  }
  while (1)
  {
    v15 = v14[1];
    if (v15 == 0x3070CB6B3C7F21D3)
      break;
    if (v15 >= *(_QWORD *)&v9)
      v15 %= *(_QWORD *)&v9;
    if (v15 != v11)
      goto LABEL_35;
LABEL_22:
    v14 = (_QWORD *)*v14;
    if (!v14)
      goto LABEL_35;
  }
  if (v14[2] != 0x3070CB6B3C7F21D3)
    goto LABEL_22;
LABEL_33:
  v17 = v14[5];
  if (*(_QWORD *)(v17 + 8) == 0x3070CB6B3C7F21D3)
  {
    v448 = *(_QWORD *)(v17 + 32);
    goto LABEL_36;
  }
LABEL_35:
  v448 = 0;
LABEL_36:
  if (v10.u32[0] > 1uLL)
  {
    v18 = 0xE42D19AFCA302E68;
    if (*(_QWORD *)&v9 <= 0xE42D19AFCA302E68)
      v18 = 0xE42D19AFCA302E68 % *(_QWORD *)&v9;
  }
  else
  {
    v18 = (*(_QWORD *)&v9 - 1) & 0xE42D19AFCA302E68;
  }
  v19 = *(_QWORD **)(v12 + 8 * v18);
  if (!v19)
    goto LABEL_58;
  v20 = (_QWORD *)*v19;
  if (!v20)
    goto LABEL_58;
  if (v10.u32[0] < 2uLL)
  {
    v21 = *(_QWORD *)&v9 - 1;
    while (1)
    {
      v23 = v20[1];
      if (v23 == 0xE42D19AFCA302E68)
      {
        if (v20[2] == 0xE42D19AFCA302E68)
          goto LABEL_56;
      }
      else if ((v23 & v21) != v18)
      {
        goto LABEL_58;
      }
      v20 = (_QWORD *)*v20;
      if (!v20)
        goto LABEL_58;
    }
  }
  while (2)
  {
    v22 = v20[1];
    if (v22 != 0xE42D19AFCA302E68)
    {
      if (v22 >= *(_QWORD *)&v9)
        v22 %= *(_QWORD *)&v9;
      if (v22 != v18)
        goto LABEL_58;
      goto LABEL_45;
    }
    if (v20[2] != 0xE42D19AFCA302E68)
    {
LABEL_45:
      v20 = (_QWORD *)*v20;
      if (!v20)
        goto LABEL_58;
      continue;
    }
    break;
  }
LABEL_56:
  v24 = v20[5];
  if (*(_QWORD *)(v24 + 8) == 0xE42D19AFCA302E68)
  {
    v25 = *(uint64_t **)(v24 + 32);
    goto LABEL_59;
  }
LABEL_58:
  v25 = 0;
LABEL_59:
  v462[0] = &off_1E42CE738;
  v462[1] = this;
  v26 = v462;
  v462[2] = v25;
  v463 = v462;
  v27 = (_BYTE *)v25[6];
  v28 = (_BYTE *)v25[7];
  if (v27 == v28)
  {
    v29 = 4;
LABEL_67:
    (*(void (**)(void))(*v26 + 8 * v29))();
    goto LABEL_68;
  }
  while (2)
  {
    LOBYTE(__p) = *v27;
    if (!v463)
    {
      std::__throw_bad_function_call[abi:nn180100]();
LABEL_645:
      __break(1u);
      return;
    }
    (*(void (**)(_QWORD *, void **))(*v463 + 48))(v463, &__p);
    if (++v27 != v28)
      continue;
    break;
  }
  v26 = v463;
  if (v463 == v462)
  {
    v29 = 4;
    v26 = v462;
    goto LABEL_67;
  }
  if (v463)
  {
    v29 = 5;
    goto LABEL_67;
  }
LABEL_68:
  (*(void (**)(void **__return_ptr, md::RasterRenderLayer *, const md::LayoutContext *))(*(_QWORD *)this
                                                                                                  + 32))(&__p, this, v2);
  v30 = *(unsigned __int16 *)__p;
  v458 = (std::__shared_weak_count *)__p;
  operator delete(__p);
  v31 = *(_QWORD **)(*(_QWORD *)(*((_QWORD *)this + 5) + 24) + 8);
  v33 = v31[3];
  v32 = v31[4];
  if (v32 == v33)
    goto LABEL_75;
  v34 = 0;
  while (1)
  {
    v35 = *(unsigned __int8 **)(v33 + 8 * v34);
    if (*v35 == v30)
    {
      v36 = *((_QWORD *)v35 + 1);
      v37 = v31[15];
      if (v36 < (v31[16] - v37) >> 3)
        break;
    }
    if (++v34 >= (unint64_t)((v32 - v33) >> 3))
      goto LABEL_75;
  }
  v38 = *(_QWORD *)(v37 + 8 * v36);
  if (!v38)
LABEL_75:
    v39 = 0;
  else
    v39 = *(ggl::CommandBuffer **)(*(_QWORD *)(v38 + 24) + 8 * (v30 >> 8));
  v40 = *((_QWORD *)v39 + 9);
  if (*((_QWORD *)v39 + 10) != v40)
    *((_QWORD *)v39 + 10) = v40;
  v449 = v39;
  *((_QWORD *)v39 + 4) = 0;
  v41 = (uint64_t **)*((_QWORD *)this + 47);
  ggl::FragmentedPool<ggl::RenderItem>::pushAll(v41[3]);
  v42 = *v41;
  v43 = (uint64_t *)(*v41)[4];
  v44 = (uint64_t *)(*v41)[5];
  v444 = v2;
  v446 = v25;
  if (v43 != v44)
  {
    v45 = (_QWORD *)v42[1];
    while (1)
    {
      v46 = *v43;
      v47 = v42[2];
      if ((unint64_t)v45 >= v47)
        break;
      if (v45)
        *v45 = v46;
      ++v45;
LABEL_81:
      v42[1] = (uint64_t)v45;
      if (++v43 == v44)
      {
        v67 = v42[4];
        v25 = v446;
        if (v67 != v42[5])
          v42[5] = v67;
        goto LABEL_110;
      }
    }
    v48 = ((uint64_t)v45 - *v42) >> 3;
    if ((unint64_t)(v48 + 1) >> 61)
LABEL_638:
      abort();
    v49 = v47 - *v42;
    v50 = v49 >> 2;
    if (v49 >> 2 <= (unint64_t)(v48 + 1))
      v50 = v48 + 1;
    if ((unint64_t)v49 >= 0x7FFFFFFFFFFFFFF8)
      v51 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v51 = v50;
    if (v51)
    {
      v52 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v42[3] + 16))(v42[3], 8 * v51, 8);
      v53 = (_QWORD *)(v52 + 8 * v48);
      v54 = v52 + 8 * v51;
      if (v52)
        *v53 = v46;
    }
    else
    {
      v54 = 0;
      v53 = (_QWORD *)(8 * v48);
    }
    v56 = *v42;
    v55 = v42[1];
    v57 = v55 - *v42;
    if (v55 == *v42)
    {
      v59 = v53;
      goto LABEL_106;
    }
    v58 = v57 - 8;
    if ((unint64_t)(v57 - 8) < 0x38)
    {
      v59 = v53;
    }
    else
    {
      v59 = v53;
      if ((unint64_t)(v55 - (_QWORD)v53) >= 0x20)
      {
        v60 = (v58 >> 3) + 1;
        v61 = v53 - 2;
        v62 = (__int128 *)(v55 - 16);
        v63 = v60 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v64 = *v62;
          *(v61 - 1) = *(v62 - 1);
          *v61 = v64;
          v61 -= 2;
          v62 -= 2;
          v63 -= 4;
        }
        while (v63);
        v59 = &v53[-(v60 & 0x3FFFFFFFFFFFFFFCLL)];
        v55 -= 8 * (v60 & 0x3FFFFFFFFFFFFFFCLL);
        if (v60 == (v60 & 0x3FFFFFFFFFFFFFFCLL))
          goto LABEL_105;
      }
    }
    do
    {
      v65 = *(_QWORD *)(v55 - 8);
      v55 -= 8;
      *--v59 = v65;
    }
    while (v55 != v56);
LABEL_105:
    v55 = *v42;
LABEL_106:
    v45 = v53 + 1;
    *v42 = (uint64_t)v59;
    v42[1] = (uint64_t)(v53 + 1);
    v66 = v42[2];
    v42[2] = v54;
    if (v55)
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v42[3] + 40))(v42[3], v55, v66 - v55);
    goto LABEL_81;
  }
LABEL_110:
  v68 = v41[1];
  v69 = (uint64_t *)v68[4];
  v70 = (uint64_t *)v68[5];
  if (v69 == v70)
    goto LABEL_142;
  v71 = (_QWORD *)v68[1];
  do
  {
    v72 = *v69;
    v73 = v68[2];
    if ((unint64_t)v71 < v73)
    {
      if (v71)
        *v71 = v72;
      ++v71;
      goto LABEL_113;
    }
    v74 = ((uint64_t)v71 - *v68) >> 3;
    if ((unint64_t)(v74 + 1) >> 61)
      goto LABEL_638;
    v75 = v73 - *v68;
    v76 = v75 >> 2;
    if (v75 >> 2 <= (unint64_t)(v74 + 1))
      v76 = v74 + 1;
    if ((unint64_t)v75 >= 0x7FFFFFFFFFFFFFF8)
      v77 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v77 = v76;
    if (v77)
    {
      v78 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v68[3] + 16))(v68[3], 8 * v77, 8);
      v79 = (_QWORD *)(v78 + 8 * v74);
      v80 = v78 + 8 * v77;
      if (v78)
        *v79 = v72;
    }
    else
    {
      v80 = 0;
      v79 = (_QWORD *)(8 * v74);
    }
    v82 = *v68;
    v81 = v68[1];
    v83 = v81 - *v68;
    if (v81 == *v68)
    {
      v85 = v79;
      goto LABEL_138;
    }
    v84 = v83 - 8;
    if ((unint64_t)(v83 - 8) < 0x38)
    {
      v85 = v79;
    }
    else
    {
      v85 = v79;
      if ((unint64_t)(v81 - (_QWORD)v79) >= 0x20)
      {
        v86 = (v84 >> 3) + 1;
        v87 = v79 - 2;
        v88 = (__int128 *)(v81 - 16);
        v89 = v86 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v90 = *v88;
          *(v87 - 1) = *(v88 - 1);
          *v87 = v90;
          v87 -= 2;
          v88 -= 2;
          v89 -= 4;
        }
        while (v89);
        v85 = &v79[-(v86 & 0x3FFFFFFFFFFFFFFCLL)];
        v81 -= 8 * (v86 & 0x3FFFFFFFFFFFFFFCLL);
        if (v86 == (v86 & 0x3FFFFFFFFFFFFFFCLL))
          goto LABEL_137;
      }
    }
    do
    {
      v91 = *(_QWORD *)(v81 - 8);
      v81 -= 8;
      *--v85 = v91;
    }
    while (v81 != v82);
LABEL_137:
    v81 = *v68;
LABEL_138:
    v71 = v79 + 1;
    *v68 = (uint64_t)v85;
    v68[1] = (uint64_t)(v79 + 1);
    v92 = v68[2];
    v68[2] = v80;
    if (v81)
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v68[3] + 40))(v68[3], v81, v92 - v81);
LABEL_113:
    v68[1] = (uint64_t)v71;
    ++v69;
  }
  while (v69 != v70);
  v93 = v68[4];
  v25 = v446;
  if (v93 != v68[5])
    v68[5] = v93;
LABEL_142:
  v94 = v41[2];
  v95 = (uint64_t *)v94[4];
  v96 = (uint64_t *)v94[5];
  if (v95 == v96)
    goto LABEL_174;
  v97 = (_QWORD *)v94[1];
  while (2)
  {
    v98 = *v95;
    v99 = v94[2];
    if ((unint64_t)v97 < v99)
    {
      if (v97)
        *v97 = v98;
      ++v97;
      goto LABEL_145;
    }
    v100 = ((uint64_t)v97 - *v94) >> 3;
    if ((unint64_t)(v100 + 1) >> 61)
      goto LABEL_638;
    v101 = v99 - *v94;
    v102 = v101 >> 2;
    if (v101 >> 2 <= (unint64_t)(v100 + 1))
      v102 = v100 + 1;
    if ((unint64_t)v101 >= 0x7FFFFFFFFFFFFFF8)
      v103 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v103 = v102;
    if (v103)
    {
      v104 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v94[3] + 16))(v94[3], 8 * v103, 8);
      v105 = (_QWORD *)(v104 + 8 * v100);
      v106 = v104 + 8 * v103;
      if (v104)
        *v105 = v98;
    }
    else
    {
      v106 = 0;
      v105 = (_QWORD *)(8 * v100);
    }
    v108 = *v94;
    v107 = v94[1];
    v109 = v107 - *v94;
    if (v107 == *v94)
    {
      v111 = v105;
      goto LABEL_170;
    }
    v110 = v109 - 8;
    if ((unint64_t)(v109 - 8) < 0x38)
    {
      v111 = v105;
      do
      {
LABEL_168:
        v117 = *(_QWORD *)(v107 - 8);
        v107 -= 8;
        *--v111 = v117;
      }
      while (v107 != v108);
      goto LABEL_169;
    }
    v111 = v105;
    if ((unint64_t)(v107 - (_QWORD)v105) < 0x20)
      goto LABEL_168;
    v112 = (v110 >> 3) + 1;
    v113 = v105 - 2;
    v114 = (__int128 *)(v107 - 16);
    v115 = v112 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v116 = *v114;
      *(v113 - 1) = *(v114 - 1);
      *v113 = v116;
      v113 -= 2;
      v114 -= 2;
      v115 -= 4;
    }
    while (v115);
    v111 = &v105[-(v112 & 0x3FFFFFFFFFFFFFFCLL)];
    v107 -= 8 * (v112 & 0x3FFFFFFFFFFFFFFCLL);
    if (v112 != (v112 & 0x3FFFFFFFFFFFFFFCLL))
      goto LABEL_168;
LABEL_169:
    v107 = *v94;
LABEL_170:
    v97 = v105 + 1;
    *v94 = (uint64_t)v111;
    v94[1] = (uint64_t)(v105 + 1);
    v118 = v94[2];
    v94[2] = v106;
    if (v107)
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v94[3] + 40))(v94[3], v107, v118 - v107);
LABEL_145:
    v94[1] = (uint64_t)v97;
    if (++v95 != v96)
      continue;
    break;
  }
  v119 = v94[4];
  v2 = v444;
  v25 = v446;
  if (v119 != v94[5])
    v94[5] = v119;
LABEL_174:
  if (*((_QWORD *)this + 34) == *((_QWORD *)this + 35))
    goto LABEL_517;
  if (*(_QWORD *)(*((_QWORD *)this + 46) + 8) || !*v25)
    goto LABEL_176;
  v131 = *(_QWORD *)(*v25 + 16);
  v132 = atomic_load((unsigned __int8 *)(v131 + 2784));
  if ((v132 & 1) == 0)
    std::__assoc_sub_state::wait(*(std::__assoc_sub_state **)(v131 + 2808));
  if (!*(_BYTE *)(v131 + 136) || !md::RasterRenderLayer::shouldEnableCLUT(v25))
    goto LABEL_176;
  v133 = *(id *)v2;
  objc_msgSend(v133, "contentScale");
  v134 = (_QWORD *)*((_QWORD *)v2 + 1);
  v135 = (int8x8_t)v134[1];
  if (!*(_QWORD *)&v135)
    goto LABEL_544;
  v136 = (uint8x8_t)vcnt_s8(v135);
  v136.i16[0] = vaddlv_u8(v136);
  if (v136.u32[0] > 1uLL)
  {
    v137 = 0xA60DDA5A69582425;
    if (*(_QWORD *)&v135 <= 0xA60DDA5A69582425)
      v137 = 0xA60DDA5A69582425 % *(_QWORD *)&v135;
  }
  else
  {
    v137 = (*(_QWORD *)&v135 - 1) & 0xA60DDA5A69582425;
  }
  v388 = *(_QWORD **)(*v134 + 8 * v137);
  if (!v388)
    goto LABEL_544;
  v389 = (_QWORD *)*v388;
  if (!v389)
    goto LABEL_544;
  if (v136.u32[0] < 2uLL)
  {
    v390 = *(_QWORD *)&v135 - 1;
    while (1)
    {
      v392 = v389[1];
      if (v392 == 0xA60DDA5A69582425)
      {
        if (v389[2] == 0xA60DDA5A69582425)
          goto LABEL_542;
      }
      else if ((v392 & v390) != v137)
      {
        goto LABEL_544;
      }
      v389 = (_QWORD *)*v389;
      if (!v389)
        goto LABEL_544;
    }
  }
  while (2)
  {
    v391 = v389[1];
    if (v391 != 0xA60DDA5A69582425)
    {
      if (v391 >= *(_QWORD *)&v135)
        v391 %= *(_QWORD *)&v135;
      if (v391 != v137)
        goto LABEL_544;
      goto LABEL_531;
    }
    if (v389[2] != 0xA60DDA5A69582425)
    {
LABEL_531:
      v389 = (_QWORD *)*v389;
      if (!v389)
        goto LABEL_544;
      continue;
    }
    break;
  }
LABEL_542:
  v393 = v389[5];
  if (*(_QWORD *)(v393 + 8) == 0xA60DDA5A69582425)
  {
    v394 = *(id **)(v393 + 32);
    goto LABEL_545;
  }
LABEL_544:
  v394 = 0;
LABEL_545:
  v395 = *((_QWORD *)this + 46);
  v396 = *(void **)(v395 + 96);
  if (!v396)
  {
    v397 = gss::Allocator::instance(0);
    v398 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v397 + 16))(v397, 8, 4);
    v399 = v398;
    if (v398)
      *v398 = 0x900000005;
    __p = 0;
    v458 = 0;
    v459 = 0;
    v460 = v397;
    v400 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v397 + 16))(v397, 8, 4);
    __p = v400;
    v458 = (std::__shared_weak_count *)v400;
    v459 = (char *)(v400 + 1);
    if (v400)
      *v400 = *v399;
    v458 = (std::__shared_weak_count *)(v400 + 1);
    gss::FeatureAttributeSet::sort((gss::FeatureAttributeSet *)&__p);
    if (v399)
      (*(void (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)v397 + 40))(v397, v399, 8);
    v401 = *v446;
    if (*v446)
    {
      *(std::string::size_type *)((char *)v456.__r_.__value_.__r.__words + 7) = 0;
      v456.__r_.__value_.__r.__words[0] = 0;
      v456.__r_.__value_.__s.__data_[15] = 1;
      gss::StylesheetManager<gss::PropertyID>::styleQueryForFeatureAttributes((unint64_t *)&v455, v401, (gss::FeatureAttributeSet *)&__p, (gss::QueryOverrides *)&v456);
      if (!v456.__r_.__value_.__s.__data_[14] && v456.__r_.__value_.__r.__words[0])
      {
        v403 = gss::Allocator::instance(v402);
        (*(void (**)(uint64_t, std::string::size_type, _QWORD))(*(_QWORD *)v403 + 40))(v403, v456.__r_.__value_.__r.__words[0], WORD2(v456.__r_.__value_.__r.__words[1]));
      }
      v404 = *(_OWORD *)&v455.__r_.__value_.__l.__data_;
    }
    else
    {
      v404 = 0uLL;
    }
    *(_OWORD *)&v455.__r_.__value_.__l.__data_ = 0uLL;
    v405 = *(std::__shared_weak_count **)(v395 + 104);
    *(_OWORD *)(v395 + 96) = v404;
    if (v405)
    {
      p_shared_owners = (unint64_t *)&v405->__shared_owners_;
      do
        v407 = __ldaxr(p_shared_owners);
      while (__stlxr(v407 - 1, p_shared_owners));
      if (!v407)
      {
        ((void (*)(std::__shared_weak_count *))v405->__on_zero_shared)(v405);
        std::__shared_weak_count::__release_weak(v405);
      }
    }
    size = (std::__shared_weak_count *)v455.__r_.__value_.__l.__size_;
    if (v455.__r_.__value_.__l.__size_)
    {
      v409 = (unint64_t *)(v455.__r_.__value_.__l.__size_ + 8);
      do
        v410 = __ldaxr(v409);
      while (__stlxr(v410 - 1, v409));
      if (!v410)
      {
        ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
        std::__shared_weak_count::__release_weak(size);
      }
    }
    if (__p)
    {
      v458 = (std::__shared_weak_count *)__p;
      (*(void (**)(uint64_t, void *, int64_t))(*(_QWORD *)v460 + 40))(v460, __p, v459 - (_BYTE *)__p);
    }
    v396 = *(void **)(v395 + 96);
  }
  v411 = *(std::__shared_weak_count **)(v395 + 104);
  v456.__r_.__value_.__r.__words[0] = (std::string::size_type)v396;
  v456.__r_.__value_.__l.__size_ = (std::string::size_type)v411;
  if (v411)
  {
    v412 = (unint64_t *)&v411->__shared_owners_;
    v25 = v446;
    do
      v413 = __ldxr(v412);
    while (__stxr(v413 + 1, v412));
    v458 = v411;
    do
      v414 = __ldxr(v412);
    while (__stxr(v414 + 1, v412));
  }
  else
  {
    v458 = 0;
    v25 = v446;
  }
  v459 = 0;
  v460 = 0;
  __p = v396;
  v461 = 0;
  if (v396)
    LODWORD(v396) = (*(uint64_t (**)(void *, char **))(*(_QWORD *)v396 + 48))(v396, &v459);
  v461 = v396;
  if (v411)
  {
    v415 = (unint64_t *)&v411->__shared_owners_;
    do
      v416 = __ldaxr(v415);
    while (__stlxr(v416 - 1, v415));
    if (!v416)
    {
      ((void (*)(std::__shared_weak_count *))v411->__on_zero_shared)(v411);
      std::__shared_weak_count::__release_weak(v411);
    }
    LODWORD(v396) = v461;
  }
  if ((_DWORD)v396)
  {
    *((_BYTE *)&v456.__r_.__value_.__s + 23) = 0;
    v456.__r_.__value_.__s.__data_[0] = 0;
    if (!md::RasterRenderLayer::shouldEnableCLUT(v25))
      goto LABEL_593;
    gss::RenderStyle<gss::PropertyID>::valueForKeyAtZ<std::string>(&v455, *((_QWORD *)__p + 3), 0x88u, 1u, 1);
    if (SHIBYTE(v456.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v456.__r_.__value_.__l.__data_);
    v456 = v455;
    v417 = HIBYTE(v455.__r_.__value_.__r.__words[2]);
    if ((v455.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v417 = v455.__r_.__value_.__l.__size_;
    if (!v417)
    {
LABEL_593:
      gss::RenderStyle<gss::PropertyID>::valueForKeyAtZ<std::string>(&v455, *((_QWORD *)__p + 3), 0x88u, 1u, 2);
      if (SHIBYTE(v456.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v456.__r_.__value_.__l.__data_);
      v456 = v455;
    }
    v418 = HIBYTE(v456.__r_.__value_.__r.__words[2]);
    v419 = HIBYTE(v456.__r_.__value_.__r.__words[2]);
    if ((v456.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v418 = v456.__r_.__value_.__l.__size_;
    if (v418)
    {
      v420 = (std::__shared_weak_count *)operator new(0x58uLL);
      v420->__shared_owners_ = 0;
      v421 = (unint64_t *)&v420->__shared_owners_;
      v420->__shared_weak_owners_ = 0;
      v420->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DED18;
      v420[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B63B0;
      v420[1].__shared_weak_owners_ = 0;
      v420[2].__vftable = 0;
      v420[1].__shared_owners_ = 0;
      LODWORD(v420[2].__shared_owners_) = 0;
      *(_OWORD *)((char *)&v420[2].__shared_owners_ + 4) = xmmword_19FFB2EA0;
      *(std::__shared_weak_count_vtbl **)((char *)&v420[3].__vftable + 4) = (std::__shared_weak_count_vtbl *)0x100000001;
      HIDWORD(v420[3].__shared_owners_) = 0;
      v455.__r_.__value_.__r.__words[0] = (std::string::size_type)&v420[1];
      v455.__r_.__value_.__l.__size_ = (std::string::size_type)v420;
      v422 = *v394;
      v423 = v422;
      if (v422)
      {
        objc_msgSend(v422, "textureManager");
        v424 = v451;
      }
      else
      {
        v424 = 0;
        v451 = 0;
        v452 = 0;
      }
      v450[0] = (uint64_t)&v420[1];
      v450[1] = (uint64_t)v420;
      do
        v425 = __ldxr(v421);
      while (__stxr(v425 + 1, v421));
      md::TextureManager::texture(&v453, v424, (uint64_t)&v456, v450, 0, 1.0);
      do
        v426 = __ldaxr(v421);
      while (__stlxr(v426 - 1, v421));
      if (!v426)
      {
        ((void (*)(std::__shared_weak_count *))v420->__on_zero_shared)(v420);
        std::__shared_weak_count::__release_weak(v420);
      }
      v427 = v452;
      v25 = v446;
      if (v452)
      {
        v428 = (unint64_t *)&v452->__shared_owners_;
        do
          v429 = __ldaxr(v428);
        while (__stlxr(v429 - 1, v428));
        if (!v429)
        {
          ((void (*)(std::__shared_weak_count *))v427->__on_zero_shared)(v427);
          std::__shared_weak_count::__release_weak(v427);
        }
      }

      v430 = v453;
      if (v453)
      {
        v431 = *(_QWORD *)(v453 + 32);
        v430 = *(_QWORD *)(v453 + 40);
        if (v430)
        {
          v432 = (unint64_t *)(v430 + 8);
          do
            v433 = __ldxr(v432);
          while (__stxr(v433 + 1, v432));
        }
      }
      else
      {
        v431 = 0;
      }
      v434 = *((_QWORD *)this + 46);
      v435 = *(std::__shared_weak_count **)(v434 + 16);
      *(_QWORD *)(v434 + 8) = v431;
      *(_QWORD *)(v434 + 16) = v430;
      if (v435)
      {
        v436 = (unint64_t *)&v435->__shared_owners_;
        do
          v437 = __ldaxr(v436);
        while (__stlxr(v437 - 1, v436));
        if (!v437)
        {
          ((void (*)(std::__shared_weak_count *))v435->__on_zero_shared)(v435);
          std::__shared_weak_count::__release_weak(v435);
        }
      }
      v438 = v454;
      if (v454)
      {
        v439 = (unint64_t *)&v454->__shared_owners_;
        do
          v440 = __ldaxr(v439);
        while (__stlxr(v440 - 1, v439));
        if (!v440)
        {
          ((void (*)(std::__shared_weak_count *))v438->__on_zero_shared)(v438);
          std::__shared_weak_count::__release_weak(v438);
        }
      }
      v441 = (std::__shared_weak_count *)v455.__r_.__value_.__l.__size_;
      if (v455.__r_.__value_.__l.__size_)
      {
        v442 = (unint64_t *)(v455.__r_.__value_.__l.__size_ + 8);
        do
          v443 = __ldaxr(v442);
        while (__stlxr(v443 - 1, v442));
        if (!v443)
        {
          ((void (*)(std::__shared_weak_count *))v441->__on_zero_shared)(v441);
          std::__shared_weak_count::__release_weak(v441);
        }
      }
      v419 = HIBYTE(v456.__r_.__value_.__r.__words[2]);
    }
    if (v419 < 0)
      operator delete(v456.__r_.__value_.__l.__data_);
  }
  gss::QueryableLocker<gss::PropertyID>::~QueryableLocker((uint64_t)&__p);

LABEL_176:
  v120 = *((_QWORD *)this + 46);
  v447 = *(_QWORD *)(v120 + 8);
  v121 = 40;
  if (!v447)
    v121 = 32;
  v122 = *(_QWORD *)(v120 + v121);
  *((_QWORD *)v449 + 4) = *((_QWORD *)this + 49);
  v445 = v122;
  *(_BYTE *)(v122 + 55) = *((_BYTE *)this + 400);
  v123 = *v25;
  if (!*v25)
  {
    v125 = 0;
    __p = 0;
    v458 = 0;
LABEL_198:
    v130 = 0.0;
    goto LABEL_199;
  }
  v124 = *(float **)(v123 + 520);
  v125 = *(std::__shared_weak_count **)(v123 + 528);
  __p = v124;
  v458 = v125;
  if (v125)
  {
    v126 = (unint64_t *)&v125->__shared_owners_;
    do
      v127 = __ldxr(v126);
    while (__stxr(v127 + 1, v126));
  }
  if (!v124)
    goto LABEL_198;
  v128 = gss::ClientStyleState<gss::PropertyID>::sourceClientStyleAttribute((uint64_t)v124, 0x10001u);
  if (v128 != 1 || (v128 & 0xFFFF0000) == 0)
    v130 = v124[64];
  else
    v130 = 1.0 - v124[64];
LABEL_199:
  v138 = 0.0;
  if (*((_QWORD *)this + 48) == 3)
  {
    v139 = (_QWORD *)*((_QWORD *)v2 + 1);
    v140 = v139[1];
    if ((v140 & (v140 - 1)) != 0)
    {
      v142 = 0x1AF456233693CD46;
      if (v140 <= 0x1AF456233693CD46)
        v142 = 0x1AF456233693CD46 % v140;
      v141 = *(_QWORD **)(*v139 + 8 * v142);
      do
      {
        do
          v141 = (_QWORD *)*v141;
        while (v141[1] != 0x1AF456233693CD46);
      }
      while (v141[2] != 0x1AF456233693CD46);
    }
    else
    {
      v141 = *(_QWORD **)(*v139 + 8 * ((v140 - 1) & 0x1AF456233693CD46));
      do
      {
        do
          v141 = (_QWORD *)*v141;
        while (v141[1] != 0x1AF456233693CD46);
      }
      while (v141[2] != 0x1AF456233693CD46);
    }
    v143 = fmaxf(*(float *)(*(_QWORD *)(v141[5] + 32) + 3080) + *(float *)(*(_QWORD *)(v141[5] + 32) + 3072), 1.0);
    v144 = 0.8;
    if (v143 > 9.0)
      v144 = 0.5;
    if (v143 <= 8.0)
      v138 = 1.0;
    else
      v138 = v144;
  }
  v146 = *((_QWORD *)this + 34);
  v145 = *((_QWORD *)this + 35);
  if (v146 != v145)
  {
    while (1)
    {
      v147 = *(_QWORD **)v146;
      v148 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v146 + 384) + 720);
      if (v148)
        break;
LABEL_219:
      v146 += 8;
      if (v146 == v145)
      {
        v125 = v458;
        if (v458)
          goto LABEL_513;
        goto LABEL_517;
      }
    }
    v149 = ggl::FragmentedPool<ggl::RenderItem>::pop(*(_QWORD *)(*((_QWORD *)this + 47) + 24));
    v150 = (ggl::RenderItem *)v149;
    *(_QWORD *)(v149 + 24) = v445;
    v151 = 16;
    if (*(unsigned __int8 *)(v448 + 320) - 1 < 3)
      v151 = 32;
    *(_QWORD *)(v149 + 64) = *(_QWORD *)(v448 + v151);
    v152 = (uint64_t **)*((_QWORD *)this + 47);
    if (v447)
    {
      v153 = v152[1];
      v154 = v153[1];
      if (v154 == *v153)
      {
        v178 = v153[11];
        if (!v178)
          goto LABEL_642;
        v155 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v178 + 48))(v178);
        v156 = (_QWORD *)v153[5];
        v179 = v153[6];
        if ((unint64_t)v156 >= v179)
        {
          v194 = v153[4];
          v195 = ((uint64_t)v156 - v194) >> 3;
          v196 = v195 + 1;
          if ((unint64_t)(v195 + 1) >> 61)
LABEL_641:
            abort();
          v197 = v179 - v194;
          if (v197 >> 2 > v196)
            v196 = v197 >> 2;
          if ((unint64_t)v197 >= 0x7FFFFFFFFFFFFFF8)
            v198 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v198 = v196;
          if (v198)
          {
            v199 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v153[7] + 16))(v153[7], 8 * v198, 8);
            v164 = (_QWORD *)(v199 + 8 * v195);
            v165 = v199 + 8 * v198;
            if (v199)
              *v164 = v155;
          }
          else
          {
            v165 = 0;
            v164 = (_QWORD *)(8 * v195);
          }
          v216 = v153[4];
          v200 = v153[5];
          v217 = v200 - v216;
          if (v200 != v216)
          {
            v218 = v217 - 8;
            if ((unint64_t)(v217 - 8) < 0x38)
            {
              v204 = v164;
            }
            else
            {
              v204 = v164;
              if ((unint64_t)(v200 - (_QWORD)v164) >= 0x20)
              {
                v219 = (v218 >> 3) + 1;
                v220 = v164 - 2;
                v221 = (__int128 *)(v200 - 16);
                v222 = v219 & 0x3FFFFFFFFFFFFFFCLL;
                do
                {
                  v223 = *v221;
                  *(v220 - 1) = *(v221 - 1);
                  *v220 = v223;
                  v220 -= 2;
                  v221 -= 2;
                  v222 -= 4;
                }
                while (v222);
                v204 = &v164[-(v219 & 0x3FFFFFFFFFFFFFFCLL)];
                v200 -= 8 * (v219 & 0x3FFFFFFFFFFFFFFCLL);
                if (v219 == (v219 & 0x3FFFFFFFFFFFFFFCLL))
                  goto LABEL_338;
              }
            }
            do
            {
              v257 = *(_QWORD *)(v200 - 8);
              v200 -= 8;
              *--v204 = v257;
            }
            while (v200 != v216);
            goto LABEL_338;
          }
LABEL_298:
          v204 = v164;
          goto LABEL_339;
        }
      }
      else
      {
        v155 = *(_QWORD **)(v154 - 8);
        v153[1] = v154 - 8;
        v156 = (_QWORD *)v153[5];
        v157 = v153[6];
        if ((unint64_t)v156 >= v157)
        {
          v158 = v153[4];
          v159 = ((uint64_t)v156 - v158) >> 3;
          v160 = v159 + 1;
          if ((unint64_t)(v159 + 1) >> 61)
            goto LABEL_641;
          v161 = v157 - v158;
          if (v161 >> 2 > v160)
            v160 = v161 >> 2;
          if ((unint64_t)v161 >= 0x7FFFFFFFFFFFFFF8)
            v162 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v162 = v160;
          if (v162)
          {
            v163 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v153[7] + 16))(v153[7], 8 * v162, 8);
            v164 = (_QWORD *)(v163 + 8 * v159);
            v165 = v163 + 8 * v162;
            if (v163)
              *v164 = v155;
          }
          else
          {
            v165 = 0;
            v164 = (_QWORD *)(8 * v159);
          }
          v201 = v153[4];
          v200 = v153[5];
          v202 = v200 - v201;
          if (v200 != v201)
          {
            v203 = v202 - 8;
            if ((unint64_t)(v202 - 8) < 0x38)
            {
              v204 = v164;
            }
            else
            {
              v204 = v164;
              if ((unint64_t)(v200 - (_QWORD)v164) >= 0x20)
              {
                v205 = (v203 >> 3) + 1;
                v206 = v164 - 2;
                v207 = (__int128 *)(v200 - 16);
                v208 = v205 & 0x3FFFFFFFFFFFFFFCLL;
                do
                {
                  v209 = *v207;
                  *(v206 - 1) = *(v207 - 1);
                  *v206 = v209;
                  v206 -= 2;
                  v207 -= 2;
                  v208 -= 4;
                }
                while (v208);
                v204 = &v164[-(v205 & 0x3FFFFFFFFFFFFFFCLL)];
                v200 -= 8 * (v205 & 0x3FFFFFFFFFFFFFFCLL);
                if (v205 == (v205 & 0x3FFFFFFFFFFFFFFCLL))
                  goto LABEL_338;
              }
            }
            do
            {
              v236 = *(_QWORD *)(v200 - 8);
              v200 -= 8;
              *--v204 = v236;
            }
            while (v200 != v201);
LABEL_338:
            v200 = v153[4];
LABEL_339:
            v180 = v164 + 1;
            v153[4] = (uint64_t)v204;
            v153[5] = (uint64_t)(v164 + 1);
            v258 = v153[6];
            v153[6] = v165;
            if (v200)
              (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v153[7] + 40))(v153[7], v200, v258 - v200);
            goto LABEL_341;
          }
          goto LABEL_298;
        }
      }
      if (v156)
        *v156 = v155;
      v180 = v156 + 1;
LABEL_341:
      v153[5] = (uint64_t)v180;
      v456.__r_.__value_.__r.__words[0] = (std::string::size_type)v155;
      v259 = v153[15];
      if (!v259)
        goto LABEL_642;
      (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v259 + 48))(v259, &v456);
      v260 = *((_QWORD *)this + 46);
      v262 = *(_QWORD *)(v260 + 64);
      v261 = *(std::__shared_weak_count **)(v260 + 72);
      if (v261)
      {
        v263 = (unint64_t *)&v261->__shared_owners_;
        do
          v264 = __ldxr(v263);
        while (__stxr(v264 + 1, v263));
      }
      if (v262 && **(_QWORD **)(v262 + 40) == v155[1])
      {
        v268 = v155[2];
        if (v268 && v268 != v262)
          ggl::PipelineSetup::resetData((uint64_t)v155);
        if (v261)
        {
          v269 = (unint64_t *)&v261->__shared_owners_;
          do
            v270 = __ldxr(v269);
          while (__stxr(v270 + 1, v269));
        }
        v265 = (std::__shared_weak_count *)v155[3];
        v155[2] = v262;
        v155[3] = v261;
        if (!v265)
          goto LABEL_361;
        v271 = (unint64_t *)&v265->__shared_owners_;
        do
          v267 = __ldaxr(v271);
        while (__stlxr(v267 - 1, v271));
      }
      else
      {
        v265 = (std::__shared_weak_count *)v155[3];
        v155[2] = 0;
        v155[3] = 0;
        if (!v265)
          goto LABEL_361;
        v266 = (unint64_t *)&v265->__shared_owners_;
        do
          v267 = __ldaxr(v266);
        while (__stlxr(v267 - 1, v266));
      }
      if (!v267)
      {
        ((void (*)(std::__shared_weak_count *))v265->__on_zero_shared)(v265);
        std::__shared_weak_count::__release_weak(v265);
        if (v261)
          goto LABEL_362;
        goto LABEL_367;
      }
LABEL_361:
      if (v261)
      {
LABEL_362:
        v272 = (unint64_t *)&v261->__shared_owners_;
        do
          v273 = __ldaxr(v272);
        while (__stlxr(v273 - 1, v272));
        if (!v273)
        {
          ((void (*)(std::__shared_weak_count *))v261->__on_zero_shared)(v261);
          std::__shared_weak_count::__release_weak(v261);
        }
      }
LABEL_367:
      *(_QWORD *)(v155[12] + 8) = *(_QWORD *)(*((_QWORD *)this + 46) + 8);
      *(_QWORD *)v155[12] = v148;
      v274 = (_QWORD *)v155[8];
      v274[1] = 0;
      v275 = v147[27];
      *v274 = v275;
      v276 = (_QWORD *)v155[20];
      v277 = v147[28];
      if (v277)
      {
        v278 = (unint64_t *)(v277 + 8);
        do
          v279 = __ldxr(v278);
        while (__stxr(v279 + 1, v278));
      }
      v280 = (std::__shared_weak_count *)v276[1];
      *v276 = v275;
      v276[1] = v277;
      if (v280)
      {
        v281 = (unint64_t *)&v280->__shared_owners_;
        do
          v282 = __ldaxr(v281);
        while (__stlxr(v282 - 1, v281));
        if (!v282)
        {
          ((void (*)(std::__shared_weak_count *))v280->__on_zero_shared)(v280);
          std::__shared_weak_count::__release_weak(v280);
        }
      }
      v283 = v155[8];
      *(_QWORD *)(v283 + 24) = 0;
      v284 = v147[29];
      *(_QWORD *)(v283 + 16) = v284;
      v285 = v155[20];
      v286 = v147[30];
      if (v286)
      {
        v287 = (unint64_t *)(v286 + 8);
        do
          v288 = __ldxr(v287);
        while (__stxr(v288 + 1, v287));
      }
      v289 = *(std::__shared_weak_count **)(v285 + 24);
      *(_QWORD *)(v285 + 16) = v284;
      *(_QWORD *)(v285 + 24) = v286;
      if (v289)
      {
        v290 = (unint64_t *)&v289->__shared_owners_;
        do
          v291 = __ldaxr(v290);
        while (__stlxr(v291 - 1, v290));
        if (!v291)
        {
          ((void (*)(std::__shared_weak_count *))v289->__on_zero_shared)(v289);
          std::__shared_weak_count::__release_weak(v289);
        }
      }
      v292 = *(_QWORD *)(v155[8] + 32);
      v293 = *(_QWORD *)(v292 + 8);
      **(float **)(v292 + 72) = v130;
      if (*(_QWORD *)(v292 + 64) > v293)
        v293 = *(_QWORD *)(v292 + 64);
      *(_QWORD *)(v292 + 56) = 0;
      *(_QWORD *)(v292 + 64) = v293;
LABEL_386:
      *((_QWORD *)v150 + 4) = v155;
      if (v155[9] != v155[8])
      {
        v294 = 0;
        do
        {
          (*(void (**)(_QWORD *, unint64_t))(*v155 + 16))(v155, v294++);
          v155 = (_QWORD *)*((_QWORD *)v150 + 4);
        }
        while (v294 < (uint64_t)(v155[9] - v155[8]) >> 4);
      }
      if (v155[13] != v155[12])
      {
        v295 = 0;
        do
        {
          (*(void (**)(_QWORD *, unint64_t))(*v155 + 24))(v155, v295++);
          v155 = (_QWORD *)*((_QWORD *)v150 + 4);
        }
        while (v295 < (uint64_t)(v155[13] - v155[12]) >> 3);
      }
      ggl::CommandBuffer::pushRenderItem((uint64_t)v449, v150);
      goto LABEL_219;
    }
    if (v138 > 0.0)
    {
      v166 = v152[2];
      v167 = v166[1];
      if (v167 == *v166)
      {
        v210 = v166[11];
        if (!v210)
          goto LABEL_642;
        v155 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v210 + 48))(v210);
        v168 = (_QWORD *)v166[5];
        v211 = v166[6];
        if ((unint64_t)v168 >= v211)
        {
          v224 = v166[4];
          v225 = ((uint64_t)v168 - v224) >> 3;
          v226 = v225 + 1;
          if ((unint64_t)(v225 + 1) >> 61)
LABEL_644:
            abort();
          v227 = v211 - v224;
          if (v227 >> 2 > v226)
            v226 = v227 >> 2;
          if ((unint64_t)v227 >= 0x7FFFFFFFFFFFFFF8)
            v228 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v228 = v226;
          if (v228)
          {
            v229 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v166[7] + 16))(v166[7], 8 * v228, 8);
            v176 = (_QWORD *)(v229 + 8 * v225);
            v177 = v229 + 8 * v228;
            if (v229)
              *v176 = v155;
          }
          else
          {
            v177 = 0;
            v176 = (_QWORD *)(8 * v225);
          }
          v296 = v166[4];
          v237 = v166[5];
          v297 = v237 - v296;
          if (v237 != v296)
          {
            v298 = v297 - 8;
            if ((unint64_t)(v297 - 8) < 0x38)
            {
              v241 = v176;
            }
            else
            {
              v241 = v176;
              if ((unint64_t)(v237 - (_QWORD)v176) >= 0x20)
              {
                v299 = (v298 >> 3) + 1;
                v300 = v176 - 2;
                v301 = (__int128 *)(v237 - 16);
                v302 = v299 & 0x3FFFFFFFFFFFFFFCLL;
                do
                {
                  v303 = *v301;
                  *(v300 - 1) = *(v301 - 1);
                  *v300 = v303;
                  v300 -= 2;
                  v301 -= 2;
                  v302 -= 4;
                }
                while (v302);
                v241 = &v176[-(v299 & 0x3FFFFFFFFFFFFFFCLL)];
                v237 -= 8 * (v299 & 0x3FFFFFFFFFFFFFFCLL);
                if (v299 == (v299 & 0x3FFFFFFFFFFFFFFCLL))
                  goto LABEL_419;
              }
            }
            do
            {
              v314 = *(_QWORD *)(v237 - 8);
              v237 -= 8;
              *--v241 = v314;
            }
            while (v237 != v296);
            goto LABEL_419;
          }
LABEL_401:
          v241 = v176;
          goto LABEL_420;
        }
      }
      else
      {
        v155 = *(_QWORD **)(v167 - 8);
        v166[1] = v167 - 8;
        v168 = (_QWORD *)v166[5];
        v169 = v166[6];
        if ((unint64_t)v168 >= v169)
        {
          v170 = v166[4];
          v171 = ((uint64_t)v168 - v170) >> 3;
          v172 = v171 + 1;
          if ((unint64_t)(v171 + 1) >> 61)
            goto LABEL_644;
          v173 = v169 - v170;
          if (v173 >> 2 > v172)
            v172 = v173 >> 2;
          if ((unint64_t)v173 >= 0x7FFFFFFFFFFFFFF8)
            v174 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v174 = v172;
          if (v174)
          {
            v175 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v166[7] + 16))(v166[7], 8 * v174, 8);
            v176 = (_QWORD *)(v175 + 8 * v171);
            v177 = v175 + 8 * v174;
            if (v175)
              *v176 = v155;
          }
          else
          {
            v177 = 0;
            v176 = (_QWORD *)(8 * v171);
          }
          v238 = v166[4];
          v237 = v166[5];
          v239 = v237 - v238;
          if (v237 != v238)
          {
            v240 = v239 - 8;
            if ((unint64_t)(v239 - 8) < 0x38)
            {
              v241 = v176;
            }
            else
            {
              v241 = v176;
              if ((unint64_t)(v237 - (_QWORD)v176) >= 0x20)
              {
                v242 = (v240 >> 3) + 1;
                v243 = v176 - 2;
                v244 = (__int128 *)(v237 - 16);
                v245 = v242 & 0x3FFFFFFFFFFFFFFCLL;
                do
                {
                  v246 = *v244;
                  *(v243 - 1) = *(v244 - 1);
                  *v243 = v246;
                  v243 -= 2;
                  v244 -= 2;
                  v245 -= 4;
                }
                while (v245);
                v241 = &v176[-(v242 & 0x3FFFFFFFFFFFFFFCLL)];
                v237 -= 8 * (v242 & 0x3FFFFFFFFFFFFFFCLL);
                if (v242 == (v242 & 0x3FFFFFFFFFFFFFFCLL))
                  goto LABEL_419;
              }
            }
            do
            {
              v312 = *(_QWORD *)(v237 - 8);
              v237 -= 8;
              *--v241 = v312;
            }
            while (v237 != v238);
LABEL_419:
            v237 = v166[4];
LABEL_420:
            v212 = v176 + 1;
            v166[4] = (uint64_t)v241;
            v166[5] = (uint64_t)(v176 + 1);
            v315 = v166[6];
            v166[6] = v177;
            if (v237)
              (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v166[7] + 40))(v166[7], v237, v315 - v237);
            goto LABEL_422;
          }
          goto LABEL_401;
        }
      }
      if (v168)
        *v168 = v155;
      v212 = v168 + 1;
LABEL_422:
      v166[5] = (uint64_t)v212;
      v456.__r_.__value_.__r.__words[0] = (std::string::size_type)v155;
      v316 = v166[15];
      if (!v316)
        goto LABEL_642;
      (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v316 + 48))(v316, &v456);
      v317 = *((_QWORD *)this + 46);
      v319 = *(_QWORD *)(v317 + 80);
      v318 = *(std::__shared_weak_count **)(v317 + 88);
      if (v318)
      {
        v320 = (unint64_t *)&v318->__shared_owners_;
        do
          v321 = __ldxr(v320);
        while (__stxr(v321 + 1, v320));
      }
      if (v319 && **(_QWORD **)(v319 + 40) == v155[1])
      {
        v325 = v155[2];
        if (v325 && v325 != v319)
          ggl::PipelineSetup::resetData((uint64_t)v155);
        if (v318)
        {
          v326 = (unint64_t *)&v318->__shared_owners_;
          do
            v327 = __ldxr(v326);
          while (__stxr(v327 + 1, v326));
        }
        v322 = (std::__shared_weak_count *)v155[3];
        v155[2] = v319;
        v155[3] = v318;
        if (!v322)
          goto LABEL_443;
        v328 = (unint64_t *)&v322->__shared_owners_;
        do
          v324 = __ldaxr(v328);
        while (__stlxr(v324 - 1, v328));
      }
      else
      {
        v322 = (std::__shared_weak_count *)v155[3];
        v155[2] = 0;
        v155[3] = 0;
        if (!v322)
        {
LABEL_443:
          if (v318)
          {
            v329 = (unint64_t *)&v318->__shared_owners_;
            do
              v330 = __ldaxr(v329);
            while (__stlxr(v330 - 1, v329));
            if (!v330)
            {
              ((void (*)(std::__shared_weak_count *))v318->__on_zero_shared)(v318);
              std::__shared_weak_count::__release_weak(v318);
            }
          }
          *(_QWORD *)v155[12] = v148;
          v331 = (_QWORD *)v155[8];
          v332 = v331[4];
          v333 = *(_QWORD *)(v332 + 8);
          **(float **)(v332 + 72) = v138;
          if (*(_QWORD *)(v332 + 64) > v333)
            v333 = *(_QWORD *)(v332 + 64);
          *(_QWORD *)(v332 + 56) = 0;
          *(_QWORD *)(v332 + 64) = v333;
          v331[1] = 0;
          v334 = v147[27];
          *v331 = v334;
          v335 = (_QWORD *)v155[20];
          v336 = v147[28];
          if (v336)
          {
            v337 = (unint64_t *)(v336 + 8);
            do
              v338 = __ldxr(v337);
            while (__stxr(v338 + 1, v337));
          }
          v339 = (std::__shared_weak_count *)v335[1];
          *v335 = v334;
          v335[1] = v336;
          if (v339)
          {
            v340 = (unint64_t *)&v339->__shared_owners_;
            do
              v341 = __ldaxr(v340);
            while (__stlxr(v341 - 1, v340));
            if (!v341)
            {
              ((void (*)(std::__shared_weak_count *))v339->__on_zero_shared)(v339);
              std::__shared_weak_count::__release_weak(v339);
            }
          }
          v342 = v155[8];
          *(_QWORD *)(v342 + 24) = 0;
          v343 = v147[29];
          *(_QWORD *)(v342 + 16) = v343;
          v344 = v155[20];
          v345 = v147[30];
          if (v345)
          {
            v346 = (unint64_t *)(v345 + 8);
            do
              v347 = __ldxr(v346);
            while (__stxr(v347 + 1, v346));
          }
          v348 = *(std::__shared_weak_count **)(v344 + 24);
          *(_QWORD *)(v344 + 16) = v343;
          *(_QWORD *)(v344 + 24) = v345;
          if (!v348)
            goto LABEL_386;
          v349 = (unint64_t *)&v348->__shared_owners_;
          do
            v350 = __ldaxr(v349);
          while (__stlxr(v350 - 1, v349));
          goto LABEL_510;
        }
        v323 = (unint64_t *)&v322->__shared_owners_;
        do
          v324 = __ldaxr(v323);
        while (__stlxr(v324 - 1, v323));
      }
      if (!v324)
      {
        ((void (*)(std::__shared_weak_count *))v322->__on_zero_shared)(v322);
        std::__shared_weak_count::__release_weak(v322);
      }
      goto LABEL_443;
    }
    v181 = *v152;
    v183 = **v152;
    v182 = (*v152)[1];
    if (v182 == v183)
    {
      v213 = v181[11];
      if (!v213)
        goto LABEL_642;
      v155 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v213 + 48))(v213);
      v184 = (_QWORD *)v181[5];
      v214 = v181[6];
      if ((unint64_t)v184 >= v214)
      {
        v230 = v181[4];
        v231 = ((uint64_t)v184 - v230) >> 3;
        v232 = v231 + 1;
        if ((unint64_t)(v231 + 1) >> 61)
LABEL_643:
          abort();
        v233 = v214 - v230;
        if (v233 >> 2 > v232)
          v232 = v233 >> 2;
        if ((unint64_t)v233 >= 0x7FFFFFFFFFFFFFF8)
          v234 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v234 = v232;
        if (v234)
        {
          v235 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v181[7] + 16))(v181[7], 8 * v234, 8);
          v192 = (_QWORD *)(v235 + 8 * v231);
          v193 = v235 + 8 * v234;
          if (v235)
            *v192 = v155;
        }
        else
        {
          v193 = 0;
          v192 = (_QWORD *)(8 * v231);
        }
        v304 = v181[4];
        v247 = v181[5];
        v305 = v247 - v304;
        if (v247 != v304)
        {
          v306 = v305 - 8;
          if ((unint64_t)(v305 - 8) < 0x38)
          {
            v251 = v192;
          }
          else
          {
            v251 = v192;
            if ((unint64_t)(v247 - (_QWORD)v192) >= 0x20)
            {
              v307 = (v306 >> 3) + 1;
              v308 = v192 - 2;
              v309 = (__int128 *)(v247 - 16);
              v310 = v307 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v311 = *v309;
                *(v308 - 1) = *(v309 - 1);
                *v308 = v311;
                v308 -= 2;
                v309 -= 2;
                v310 -= 4;
              }
              while (v310);
              v251 = &v192[-(v307 & 0x3FFFFFFFFFFFFFFCLL)];
              v247 -= 8 * (v307 & 0x3FFFFFFFFFFFFFFCLL);
              if (v307 == (v307 & 0x3FFFFFFFFFFFFFFCLL))
                goto LABEL_467;
            }
          }
          do
          {
            v351 = *(_QWORD *)(v247 - 8);
            v247 -= 8;
            *--v251 = v351;
          }
          while (v247 != v304);
          goto LABEL_467;
        }
LABEL_410:
        v251 = v192;
        goto LABEL_468;
      }
    }
    else
    {
      v155 = *(_QWORD **)(v182 - 8);
      v181[1] = v182 - 8;
      v184 = (_QWORD *)v181[5];
      v185 = v181[6];
      if ((unint64_t)v184 >= v185)
      {
        v186 = v181[4];
        v187 = ((uint64_t)v184 - v186) >> 3;
        v188 = v187 + 1;
        if ((unint64_t)(v187 + 1) >> 61)
          goto LABEL_643;
        v189 = v185 - v186;
        if (v189 >> 2 > v188)
          v188 = v189 >> 2;
        if ((unint64_t)v189 >= 0x7FFFFFFFFFFFFFF8)
          v190 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v190 = v188;
        if (v190)
        {
          v191 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v181[7] + 16))(v181[7], 8 * v190, 8);
          v192 = (_QWORD *)(v191 + 8 * v187);
          v193 = v191 + 8 * v190;
          if (v191)
            *v192 = v155;
        }
        else
        {
          v193 = 0;
          v192 = (_QWORD *)(8 * v187);
        }
        v248 = v181[4];
        v247 = v181[5];
        v249 = v247 - v248;
        if (v247 != v248)
        {
          v250 = v249 - 8;
          if ((unint64_t)(v249 - 8) < 0x38)
          {
            v251 = v192;
          }
          else
          {
            v251 = v192;
            if ((unint64_t)(v247 - (_QWORD)v192) >= 0x20)
            {
              v252 = (v250 >> 3) + 1;
              v253 = v192 - 2;
              v254 = (__int128 *)(v247 - 16);
              v255 = v252 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v256 = *v254;
                *(v253 - 1) = *(v254 - 1);
                *v253 = v256;
                v253 -= 2;
                v254 -= 2;
                v255 -= 4;
              }
              while (v255);
              v251 = &v192[-(v252 & 0x3FFFFFFFFFFFFFFCLL)];
              v247 -= 8 * (v252 & 0x3FFFFFFFFFFFFFFCLL);
              if (v252 == (v252 & 0x3FFFFFFFFFFFFFFCLL))
                goto LABEL_467;
            }
          }
          do
          {
            v313 = *(_QWORD *)(v247 - 8);
            v247 -= 8;
            *--v251 = v313;
          }
          while (v247 != v248);
LABEL_467:
          v247 = v181[4];
LABEL_468:
          v215 = v192 + 1;
          v181[4] = (uint64_t)v251;
          v181[5] = (uint64_t)(v192 + 1);
          v352 = v181[6];
          v181[6] = v193;
          if (v247)
            (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v181[7] + 40))(v181[7], v247, v352 - v247);
          goto LABEL_470;
        }
        goto LABEL_410;
      }
    }
    if (v184)
      *v184 = v155;
    v215 = v184 + 1;
LABEL_470:
    v181[5] = (uint64_t)v215;
    v456.__r_.__value_.__r.__words[0] = (std::string::size_type)v155;
    v353 = v181[15];
    if (!v353)
      goto LABEL_642;
    (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v353 + 48))(v353, &v456);
    v354 = *((_QWORD *)this + 46);
    v356 = *(_QWORD *)(v354 + 48);
    v355 = *(std::__shared_weak_count **)(v354 + 56);
    if (v355)
    {
      v357 = (unint64_t *)&v355->__shared_owners_;
      do
        v358 = __ldxr(v357);
      while (__stxr(v358 + 1, v357));
    }
    if (v356 && **(_QWORD **)(v356 + 40) == v155[1])
    {
      v362 = v155[2];
      if (v362 && v362 != v356)
        ggl::PipelineSetup::resetData((uint64_t)v155);
      if (v355)
      {
        v363 = (unint64_t *)&v355->__shared_owners_;
        do
          v364 = __ldxr(v363);
        while (__stxr(v364 + 1, v363));
      }
      v359 = (std::__shared_weak_count *)v155[3];
      v155[2] = v356;
      v155[3] = v355;
      if (!v359)
        goto LABEL_491;
      v365 = (unint64_t *)&v359->__shared_owners_;
      do
        v361 = __ldaxr(v365);
      while (__stlxr(v361 - 1, v365));
    }
    else
    {
      v359 = (std::__shared_weak_count *)v155[3];
      v155[2] = 0;
      v155[3] = 0;
      if (!v359)
      {
LABEL_491:
        if (v355)
        {
          v366 = (unint64_t *)&v355->__shared_owners_;
          do
            v367 = __ldaxr(v366);
          while (__stlxr(v367 - 1, v366));
          if (!v367)
          {
            ((void (*)(std::__shared_weak_count *))v355->__on_zero_shared)(v355);
            std::__shared_weak_count::__release_weak(v355);
          }
        }
        *(_QWORD *)v155[12] = v148;
        v368 = (_QWORD *)v155[8];
        v368[1] = 0;
        v369 = v147[27];
        *v368 = v369;
        v370 = (_QWORD *)v155[20];
        v371 = v147[28];
        if (v371)
        {
          v372 = (unint64_t *)(v371 + 8);
          do
            v373 = __ldxr(v372);
          while (__stxr(v373 + 1, v372));
        }
        v374 = (std::__shared_weak_count *)v370[1];
        *v370 = v369;
        v370[1] = v371;
        if (v374)
        {
          v375 = (unint64_t *)&v374->__shared_owners_;
          do
            v376 = __ldaxr(v375);
          while (__stlxr(v376 - 1, v375));
          if (!v376)
          {
            ((void (*)(std::__shared_weak_count *))v374->__on_zero_shared)(v374);
            std::__shared_weak_count::__release_weak(v374);
          }
        }
        v377 = v155[8];
        *(_QWORD *)(v377 + 24) = 0;
        v378 = v147[29];
        *(_QWORD *)(v377 + 16) = v378;
        v379 = v155[20];
        v380 = v147[30];
        if (v380)
        {
          v381 = (unint64_t *)(v380 + 8);
          do
            v382 = __ldxr(v381);
          while (__stxr(v382 + 1, v381));
        }
        v348 = *(std::__shared_weak_count **)(v379 + 24);
        *(_QWORD *)(v379 + 16) = v378;
        *(_QWORD *)(v379 + 24) = v380;
        if (!v348)
          goto LABEL_386;
        v383 = (unint64_t *)&v348->__shared_owners_;
        do
          v350 = __ldaxr(v383);
        while (__stlxr(v350 - 1, v383));
LABEL_510:
        if (!v350)
        {
          ((void (*)(std::__shared_weak_count *))v348->__on_zero_shared)(v348);
          std::__shared_weak_count::__release_weak(v348);
        }
        goto LABEL_386;
      }
      v360 = (unint64_t *)&v359->__shared_owners_;
      do
        v361 = __ldaxr(v360);
      while (__stlxr(v361 - 1, v360));
    }
    if (!v361)
    {
      ((void (*)(std::__shared_weak_count *))v359->__on_zero_shared)(v359);
      std::__shared_weak_count::__release_weak(v359);
    }
    goto LABEL_491;
  }
  if (v125)
  {
LABEL_513:
    v384 = (unint64_t *)&v125->__shared_owners_;
    do
      v385 = __ldaxr(v384);
    while (__stlxr(v385 - 1, v384));
    if (!v385)
    {
      ((void (*)(std::__shared_weak_count *))v125->__on_zero_shared)(v125);
      std::__shared_weak_count::__release_weak(v125);
    }
  }
LABEL_517:
  if (!v469)
  {
LABEL_642:
    std::__throw_bad_function_call[abi:nn180100]();
    goto LABEL_645;
  }
  (*(void (**)(_QWORD *))(*v469 + 48))(v469);
  v386 = v469;
  if (v469 == v468)
  {
    v387 = 4;
    v386 = v468;
LABEL_522:
    (*(void (**)(void))(*v386 + 8 * v387))();
  }
  else if (v469)
  {
    v387 = 5;
    goto LABEL_522;
  }
}

void sub_19FACFAF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,char a38,uint64_t a39,uint64_t a40,uint64_t a41)
{
  void *v41;
  uint64_t v42;

  gss::QueryOverrides::~QueryOverrides((gss::QueryOverrides *)&__p);
  if (a29)
  {
    a30 = a29;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a32 + 40))(a32, a29, a31 - a29);
  }

  geo::ScopedFunctions::~ScopedFunctions((geo::ScopedFunctions *)(v42 - 144));
  _Unwind_Resume(a1);
}

uint64_t md::RasterRenderLayer::reserveStencilRange(uint64_t result, uint64_t a2)
{
  unsigned __int8 *v2;
  unsigned int v3;
  unsigned int v4;
  BOOL v5;
  unsigned __int8 *v6;

  v2 = *(unsigned __int8 **)(a2 + 24);
  v3 = *v2;
  v4 = v2[1];
  v5 = v3 >= v4;
  if (v3 >= v4)
    v6 = v2 + 4;
  else
    v6 = 0;
  *(_QWORD *)(result + 392) = v6;
  if (v5)
  {
    v2[1] = v2[2];
    LOBYTE(v3) = 1;
  }
  *v2 = v3 + 1;
  *(_BYTE *)(result + 400) = v3;
  return result;
}

void std::__function::__func<md::RasterRenderLayer::layout(md::LayoutContext const&)::$_0,std::allocator<md::RasterRenderLayer::layout(md::LayoutContext const&)::$_0>,void ()(void)>::operator()(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  os_signpost_id_t v4;
  uint8_t v5[16];

  if (GEOGetVectorKitPerformanceLog_onceToken != -1)
    dispatch_once(&GEOGetVectorKitPerformanceLog_onceToken, &__block_literal_global_13_11780);
  v2 = (id)GEOGetVectorKitPerformanceLog_log;
  v3 = v2;
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 80);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)v5 = 0;
    _os_signpost_emit_with_name_impl(&dword_19F029000, v3, OS_SIGNPOST_INTERVAL_BEGIN, v4, "RasterLayout", (const char *)&unk_1A0189141, v5, 2u);
  }

}

uint64_t md::RasterRenderLayer::shouldEnableCLUT(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  float v10;
  unint64_t v11;
  uint64_t v12;
  int v13;
  _BOOL4 v15;
  geo::read_write_lock *v16;
  const char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  _DWORD *v23;
  unint64_t v24;
  _DWORD *v25;
  unint64_t v26;
  unint64_t v27;
  unsigned int *v28;
  _DWORD *v29;
  unsigned int v30;
  char v31;
  int v32;
  geo::read_write_lock *v33;
  const char *v34;
  unint64_t *v35;
  unint64_t v36;
  uint64_t v38;
  std::__shared_weak_count *v39;

  v1 = *a1;
  if (!*a1)
  {
    v12 = 0;
    v39 = 0;
    goto LABEL_61;
  }
  v2 = *(_QWORD *)(v1 + 520);
  v3 = *(std::__shared_weak_count **)(v1 + 528);
  v38 = v2;
  v39 = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }
  if (!v2)
  {
    v12 = 0;
    goto LABEL_61;
  }
  v6 = *(_QWORD *)(*a1 + 520);
  v7 = *(std::__shared_weak_count **)(*a1 + 528);
  if (v7)
  {
    v8 = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
    v10 = *(float *)(v6 + 256);
    do
      v11 = __ldaxr(v8);
    while (__stlxr(v11 - 1, v8));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  else
  {
    v10 = *(float *)(v6 + 256);
  }
  v13 = gss::ClientStyleState<gss::PropertyID>::sourceClientStyleAttribute(v38, 0x10001u);
  v15 = (v13 & 0xFFFF0000) != 0 && v13 == 1;
  v16 = (geo::read_write_lock *)pthread_rwlock_rdlock((pthread_rwlock_t *)(v38 + 16));
  if ((_DWORD)v16)
    geo::read_write_lock::logFailure(v16, (uint64_t)"read lock", v17);
  v18 = *(unsigned __int16 *)(v38 + 242);
  if (!*(_WORD *)(v38 + 242))
    goto LABEL_51;
  v19 = *(_QWORD *)(v38 + 232);
  if (*(_BYTE *)(v38 + 247))
  {
    if (v18 >= 0x1E)
    {
      v25 = *(_DWORD **)(v38 + 232);
      v26 = *(unsigned __int16 *)(v38 + 242);
      do
      {
        v27 = v26 >> 1;
        v28 = &v25[v26 >> 1];
        v30 = *v28;
        v29 = v28 + 1;
        v26 += ~(v26 >> 1);
        if (v30 < 0x10001)
          v25 = v29;
        else
          v26 = v27;
      }
      while (v26);
      if (v25 == (_DWORD *)(v19 + 4 * v18)
        || *v25 != 65537
        || (v24 = ((unint64_t)v25 - v19) >> 2, (_DWORD)v18 == (unsigned __int16)v24))
      {
LABEL_51:
        v32 = 0;
        v31 = 1;
        goto LABEL_52;
      }
    }
    else
    {
      v20 = 0;
      while (1)
      {
        v21 = *(_DWORD *)(v19 + 4 * v20);
        if (v21 >= 0x10001)
          break;
        if (v18 == ++v20)
          goto LABEL_51;
      }
      if (v21 == 65537)
        LOWORD(v24) = v20;
      else
        LOWORD(v24) = *(_WORD *)(v38 + 242);
      if ((_DWORD)v18 == (unsigned __int16)v24)
        goto LABEL_51;
    }
  }
  else
  {
    v22 = 4 * v18;
    v23 = *(_DWORD **)(v38 + 232);
    while (*v23 != 65537)
    {
      ++v23;
      v22 -= 4;
      if (!v22)
      {
        v23 = (_DWORD *)(v19 + 4 * v18);
        break;
      }
    }
    v24 = ((unint64_t)v23 - v19) >> 2;
    if ((_DWORD)v18 == (unsigned __int16)v24)
      goto LABEL_51;
  }
  v31 = 0;
  v32 = *(unsigned __int8 *)(*(_QWORD *)(v38 + 232) + *(unsigned __int16 *)(v38 + 240) + 2 * (unsigned __int16)v24);
LABEL_52:
  v33 = (geo::read_write_lock *)pthread_rwlock_unlock((pthread_rwlock_t *)(v38 + 16));
  if ((_DWORD)v33)
    geo::read_write_lock::logFailure(v33, (uint64_t)"unlock", v34);
  if ((v31 & 1) != 0 || v10 <= 0.0 || v32 != 1)
    v12 = v10 < 1.0 && v15;
  else
    v12 = 1;
LABEL_61:
  if (v39)
  {
    v35 = (unint64_t *)&v39->__shared_owners_;
    do
      v36 = __ldaxr(v35);
    while (__stlxr(v36 - 1, v35));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
      std::__shared_weak_count::__release_weak(v39);
    }
  }
  return v12;
}

void sub_19FAD0130(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void std::__function::__func<md::RasterRenderLayer::layout(md::LayoutContext const&)::$_2,std::allocator<md::RasterRenderLayer::layout(md::LayoutContext const&)::$_2>,void ()(md::StyleManagerEvent)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

__n128 std::__function::__func<md::RasterRenderLayer::layout(md::LayoutContext const&)::$_2,std::allocator<md::RasterRenderLayer::layout(md::LayoutContext const&)::$_2>,void ()(md::StyleManagerEvent)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E42CE738;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<md::RasterRenderLayer::layout(md::LayoutContext const&)::$_2,std::allocator<md::RasterRenderLayer::layout(md::LayoutContext const&)::$_2>,void ()(md::StyleManagerEvent)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E42CE738;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<md::RasterRenderLayer::layout(md::LayoutContext const&)::$_2,std::allocator<md::RasterRenderLayer::layout(md::LayoutContext const&)::$_2>,void ()(md::StyleManagerEvent)>::operator()(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  if ((*a2 | 4) == 4)
  {
    v2 = *(_QWORD *)(a1 + 8);
    if ((md::RasterRenderLayer::shouldEnableCLUT(*(uint64_t **)(a1 + 16)) & 1) == 0)
    {
      v3 = *(_QWORD *)(v2 + 368);
      v4 = *(std::__shared_weak_count **)(v3 + 16);
      *(_QWORD *)(v3 + 8) = 0;
      *(_QWORD *)(v3 + 16) = 0;
      if (v4)
      {
        p_shared_owners = (unint64_t *)&v4->__shared_owners_;
        do
          v6 = __ldaxr(p_shared_owners);
        while (__stlxr(v6 - 1, p_shared_owners));
        if (!v6)
        {
          ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
          std::__shared_weak_count::__release_weak(v4);
        }
      }
    }
  }
}

void std::__function::__func<md::RasterRenderLayer::layout(md::LayoutContext const&)::$_1,std::allocator<md::RasterRenderLayer::layout(md::LayoutContext const&)::$_1>,void ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::RasterRenderLayer::layout(md::LayoutContext const&)::$_1,std::allocator<md::RasterRenderLayer::layout(md::LayoutContext const&)::$_1>,void ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42CE6F0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<md::RasterRenderLayer::layout(md::LayoutContext const&)::$_1,std::allocator<md::RasterRenderLayer::layout(md::LayoutContext const&)::$_1>,void ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42CE6F0;
  a2[1] = v2;
  return result;
}

void std::__function::__func<md::RasterRenderLayer::layout(md::LayoutContext const&)::$_1,std::allocator<md::RasterRenderLayer::layout(md::LayoutContext const&)::$_1>,void ()(void)>::operator()(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  os_signpost_id_t v4;
  uint8_t v5[16];

  if (GEOGetVectorKitPerformanceLog_onceToken != -1)
    dispatch_once(&GEOGetVectorKitPerformanceLog_onceToken, &__block_literal_global_13_11780);
  v2 = (id)GEOGetVectorKitPerformanceLog_log;
  v3 = v2;
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 80);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)v5 = 0;
    _os_signpost_emit_with_name_impl(&dword_19F029000, v3, OS_SIGNPOST_INTERVAL_END, v4, "RasterLayout", (const char *)&unk_1A0189141, v5, 2u);
  }

}

void std::__function::__func<md::RasterRenderLayer::layout(md::LayoutContext const&)::$_0,std::allocator<md::RasterRenderLayer::layout(md::LayoutContext const&)::$_0>,void ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::RasterRenderLayer::layout(md::LayoutContext const&)::$_0,std::allocator<md::RasterRenderLayer::layout(md::LayoutContext const&)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42CE6A8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<md::RasterRenderLayer::layout(md::LayoutContext const&)::$_0,std::allocator<md::RasterRenderLayer::layout(md::LayoutContext const&)::$_0>,void ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42CE6A8;
  a2[1] = v2;
  return result;
}

void md::RasterRenderResources::~RasterRenderResources(md::RasterRenderResources *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v2 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v2)
  {
    v3 = ggl::FragmentedPool<ggl::BuildingFlat::CompressedMeshPipelineSetup>::~FragmentedPool(v2);
    MEMORY[0x1A1AF4E00](v3, 0x10A0C40D234DDC7);
  }
  v4 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
  {
    v5 = ggl::FragmentedPool<ggl::BuildingFlat::CompressedMeshPipelineSetup>::~FragmentedPool(v4);
    MEMORY[0x1A1AF4E00](v5, 0x10A0C40D234DDC7);
  }
  v6 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v6)
  {
    v7 = ggl::FragmentedPool<ggl::BuildingFlat::CompressedMeshPipelineSetup>::~FragmentedPool(v6);
    MEMORY[0x1A1AF4E00](v7, 0x10A0C40D234DDC7);
  }
  v8 = *(_QWORD *)this;
  *(_QWORD *)this = 0;
  if (v8)
  {
    v9 = ggl::FragmentedPool<ggl::BuildingFlat::CompressedMeshPipelineSetup>::~FragmentedPool(v8);
    MEMORY[0x1A1AF4E00](v9, 0x10A0C40D234DDC7);
  }
}

void _ZNSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_23TextureWithReverseAlpha20Pos2DUVPipelineSetupEEC1ENS_8functionIFPS5_vEEENS7_IFvS8_EEEmmEd1_UlS8_E_NS_9allocatorISD_EESB_ED0Ev()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *_ZNKSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_23TextureWithReverseAlpha20Pos2DUVPipelineSetupEEC1ENS_8functionIFPS5_vEEENS7_IFvS8_EEEmmEd1_UlS8_E_NS_9allocatorISD_EESB_E7__cloneEv()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E42D7088;
  return result;
}

void std::__function::__func<md::RasterRenderResources::RasterRenderResources(void)::$_3,std::allocator<md::RasterRenderResources::RasterRenderResources(void)::$_3>,ggl::TextureWithReverseAlpha::Pos2DUVPipelineSetup * ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::RasterRenderResources::RasterRenderResources(void)::$_3,std::allocator<md::RasterRenderResources::RasterRenderResources(void)::$_3>,ggl::TextureWithReverseAlpha::Pos2DUVPipelineSetup * ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E42D0CA0;
  return result;
}

_QWORD *std::__function::__func<md::RasterRenderResources::RasterRenderResources(void)::$_3,std::allocator<md::RasterRenderResources::RasterRenderResources(void)::$_3>,ggl::TextureWithReverseAlpha::Pos2DUVPipelineSetup * ()(void)>::operator()()
{
  _QWORD *v0;
  unsigned __int8 v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t v11;
  unsigned __int8 v13;
  unsigned __int8 v14;
  unsigned __int8 v15;

  v0 = (_QWORD *)operator new();
  if ((v1 & 1) == 0
  {
    if ((v13 & 1) == 0
    {
      if ((v15 & 1) == 0
      {
        ggl::MeshTyped<ggl::CommonMesh::BufferPos2UV>::attributesReflection(void)::r = (uint64_t)&ggl::CommonMesh::bufferPos2UVReflection;
      }
      ggl::MeshTyped<ggl::CommonMesh::BufferPos2UV>::typedReflection(void)::r = (uint64_t)&ggl::MeshTyped<ggl::CommonMesh::BufferPos2UV>::attributesReflection(void)::r;
      unk_1ECE43AC8 = 1;
    }
    ggl::TextureWithReverseAlpha::Pos2DUVPipelineSetup::typedReflection(void)::ref = (uint64_t)&ggl::MeshTyped<ggl::CommonMesh::BufferPos2UV>::typedReflection(void)::r;
    unk_1ECE3AC00 = &ggl::TextureWithReverseAlpha::pipelineDataPos2DUVPipelineDeviceStructs(void)::ref;
    qword_1ECE3AC08 = 0;
    if ((v14 & 1) == 0
    {
      ggl::TextureWithReverseAlpha::pipelineDataPos2DUVPipelineConstantStructs(void)::ref = (uint64_t)ggl::Tile::View::reflection(void)::reflection;
      *(_QWORD *)algn_1ECE3AC38 = ggl::Tile::Transform::reflection(void)::reflection;
      qword_1ECE3AC40 = (uint64_t)ggl::TextureWithReverseAlpha::ReverseAlpha::reflection(void)::reflection;
    }
    qword_1ECE3AC10 = (uint64_t)&ggl::TextureWithReverseAlpha::pipelineDataPos2DUVPipelineConstantStructs(void)::ref;
    unk_1ECE3AC18 = xmmword_19FFB35E0;
  }
  ggl::PipelineSetup::PipelineSetup((uint64_t)v0, (uint64_t)&ggl::TextureWithReverseAlpha::Pos2DUVPipelineSetup::typedReflection(void)::ref);
  *v0 = &off_1E42BB1F0;
  v2 = (std::__shared_weak_count *)operator new(0xE8uLL);
  v2->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  v2->__shared_weak_owners_ = 0;
  v2->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E2048;
  v4 = ggl::BufferData::BufferData((uint64_t)&v2[1], qword_1EE54C628, 2, 1, 6, 1);
  v2[9].__shared_owners_ = (uint64_t)ggl::TextureWithReverseAlpha::ReverseAlpha::reflection(void)::reflection;
  v2[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B9650;
  v5 = v0[8];
  *(_QWORD *)(v5 + 32) = v4;
  *(_QWORD *)(v5 + 40) = 0;
  v6 = v0[20];
  do
    v7 = __ldxr(p_shared_owners);
  while (__stxr(v7 + 1, p_shared_owners));
  v8 = *(std::__shared_weak_count **)(v6 + 40);
  *(_QWORD *)(v6 + 32) = v4;
  *(_QWORD *)(v6 + 40) = v2;
  if (v8)
  {
    v9 = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  do
    v11 = __ldaxr(p_shared_owners);
  while (__stlxr(v11 - 1, p_shared_owners));
  if (!v11)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  return v0;
}

uint64_t ggl::ConstantDataTyped<ggl::TextureWithReverseAlpha::ReverseAlpha>::~ConstantDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  return a1;
}

void ggl::ConstantDataTyped<ggl::TextureWithReverseAlpha::ReverseAlpha>::~ConstantDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::TextureWithReverseAlpha::ReverseAlpha>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E2048;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::TextureWithReverseAlpha::ReverseAlpha>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E2048;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::TextureWithReverseAlpha::ReverseAlpha>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void _ZNSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_4Clut20Pos2DUVPipelineSetupEEC1ENS_8functionIFPS5_vEEENS7_IFvS8_EEEmmEd1_UlS8_E_NS_9allocatorISD_EESB_ED0Ev()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *_ZNKSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_4Clut20Pos2DUVPipelineSetupEEC1ENS_8functionIFPS5_vEEENS7_IFvS8_EEEmmEd1_UlS8_E_NS_9allocatorISD_EESB_E7__cloneEv()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E42D73A0;
  return result;
}

void std::__function::__func<md::RasterRenderResources::RasterRenderResources(void)::$_2,std::allocator<md::RasterRenderResources::RasterRenderResources(void)::$_2>,ggl::Clut::Pos2DUVPipelineSetup * ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::RasterRenderResources::RasterRenderResources(void)::$_2,std::allocator<md::RasterRenderResources::RasterRenderResources(void)::$_2>,ggl::Clut::Pos2DUVPipelineSetup * ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E42D0C58;
  return result;
}

_QWORD *std::__function::__func<md::RasterRenderResources::RasterRenderResources(void)::$_2,std::allocator<md::RasterRenderResources::RasterRenderResources(void)::$_2>,ggl::Clut::Pos2DUVPipelineSetup * ()(void)>::operator()()
{
  _QWORD *v0;
  unsigned __int8 v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t v11;
  unsigned __int8 v13;
  unsigned __int8 v14;
  unsigned __int8 v15;

  v0 = (_QWORD *)operator new();
  if ((v1 & 1) == 0
  {
    if ((v13 & 1) == 0
    {
      if ((v15 & 1) == 0
      {
        ggl::MeshTyped<ggl::CommonMesh::BufferPos2UV>::attributesReflection(void)::r = (uint64_t)&ggl::CommonMesh::bufferPos2UVReflection;
      }
      ggl::MeshTyped<ggl::CommonMesh::BufferPos2UV>::typedReflection(void)::r = (uint64_t)&ggl::MeshTyped<ggl::CommonMesh::BufferPos2UV>::attributesReflection(void)::r;
      unk_1ECE43AC8 = 1;
    }
    ggl::Clut::Pos2DUVPipelineSetup::typedReflection(void)::ref = (uint64_t)&ggl::MeshTyped<ggl::CommonMesh::BufferPos2UV>::typedReflection(void)::r;
    *(_QWORD *)algn_1ECE3BF48 = &ggl::Clut::pipelineDataPos2DUVPipelineDeviceStructs(void)::ref;
    qword_1ECE3BF50 = 0;
    if ((v14 & 1) == 0
    {
      ggl::Clut::pipelineDataPos2DUVPipelineConstantStructs(void)::ref = (uint64_t)ggl::Tile::View::reflection(void)::reflection;
      unk_1ECE3BF80 = ggl::Tile::Transform::reflection(void)::reflection;
      qword_1ECE3BF88 = (uint64_t)ggl::Clut::Variation::reflection(void)::reflection;
    }
    qword_1ECE3BF58 = (uint64_t)&ggl::Clut::pipelineDataPos2DUVPipelineConstantStructs(void)::ref;
    unk_1ECE3BF60 = xmmword_19FFB3C60;
  }
  ggl::PipelineSetup::PipelineSetup((uint64_t)v0, (uint64_t)&ggl::Clut::Pos2DUVPipelineSetup::typedReflection(void)::ref);
  *v0 = &off_1E42BB930;
  v2 = (std::__shared_weak_count *)operator new(0xE8uLL);
  v2->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  v2->__shared_weak_owners_ = 0;
  v2->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E2160;
  v4 = ggl::BufferData::BufferData((uint64_t)&v2[1], qword_1EE548ED0, 2, 1, 6, 1);
  v2[9].__shared_owners_ = (uint64_t)ggl::Clut::Variation::reflection(void)::reflection;
  v2[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B96F0;
  v5 = v0[8];
  *(_QWORD *)(v5 + 32) = v4;
  *(_QWORD *)(v5 + 40) = 0;
  v6 = v0[20];
  do
    v7 = __ldxr(p_shared_owners);
  while (__stxr(v7 + 1, p_shared_owners));
  v8 = *(std::__shared_weak_count **)(v6 + 40);
  *(_QWORD *)(v6 + 32) = v4;
  *(_QWORD *)(v6 + 40) = v2;
  if (v8)
  {
    v9 = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  do
    v11 = __ldaxr(p_shared_owners);
  while (__stlxr(v11 - 1, p_shared_owners));
  if (!v11)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  return v0;
}

uint64_t ggl::ConstantDataTyped<ggl::Clut::Variation>::~ConstantDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  return a1;
}

void ggl::ConstantDataTyped<ggl::Clut::Variation>::~ConstantDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::Clut::Variation>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E2160;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::Clut::Variation>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E2160;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::Clut::Variation>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void _ZNSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_8Textured20Pos2DUVPipelineSetupEEC1ENS_8functionIFPS5_vEEENS7_IFvS8_EEEmmEd1_UlS8_E_NS_9allocatorISD_EESB_ED0Ev()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *_ZNKSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_8Textured20Pos2DUVPipelineSetupEEC1ENS_8functionIFPS5_vEEENS7_IFvS8_EEEmmEd1_UlS8_E_NS_9allocatorISD_EESB_E7__cloneEv()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E42D7B80;
  return result;
}

void std::__function::__func<md::RasterRenderResources::RasterRenderResources(void)::$_1,std::allocator<md::RasterRenderResources::RasterRenderResources(void)::$_1>,ggl::Textured::Pos2DUVPipelineSetup * ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::RasterRenderResources::RasterRenderResources(void)::$_1,std::allocator<md::RasterRenderResources::RasterRenderResources(void)::$_1>,ggl::Textured::Pos2DUVPipelineSetup * ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E42D0C10;
  return result;
}

uint64_t std::__function::__func<md::RasterRenderResources::RasterRenderResources(void)::$_1,std::allocator<md::RasterRenderResources::RasterRenderResources(void)::$_1>,ggl::Textured::Pos2DUVPipelineSetup * ()(void)>::operator()()
{
  _QWORD *v0;
  unsigned __int8 v1;
  uint64_t result;
  unsigned __int8 v3;
  unsigned __int8 v4;
  unsigned __int8 v5;

  v0 = (_QWORD *)operator new();
  if ((v1 & 1) == 0
  {
    if ((v3 & 1) == 0
    {
      if ((v5 & 1) == 0
      {
        ggl::MeshTyped<ggl::CommonMesh::BufferPos2UV>::attributesReflection(void)::r = (uint64_t)&ggl::CommonMesh::bufferPos2UVReflection;
      }
      ggl::MeshTyped<ggl::CommonMesh::BufferPos2UV>::typedReflection(void)::r = (uint64_t)&ggl::MeshTyped<ggl::CommonMesh::BufferPos2UV>::attributesReflection(void)::r;
      unk_1ECE43AC8 = 1;
    }
    ggl::Textured::Pos2DUVPipelineSetup::typedReflection(void)::ref = (uint64_t)&ggl::MeshTyped<ggl::CommonMesh::BufferPos2UV>::typedReflection(void)::r;
    *(_QWORD *)algn_1ECE44F28 = &ggl::Textured::pipelineDataPos2DUVPipelineDeviceStructs(void)::ref;
    qword_1ECE44F30 = 0;
    if ((v4 & 1) == 0
    {
      ggl::Textured::pipelineDataPos2DUVPipelineConstantStructs(void)::ref = (uint64_t)ggl::Tile::View::reflection(void)::reflection;
      unk_1ECE44F60 = ggl::Tile::Transform::reflection(void)::reflection;
      qword_1ECE44F68 = (uint64_t)ggl::Textured::TileScalar::reflection(void)::reflection;
    }
    qword_1ECE44F38 = (uint64_t)&ggl::Textured::pipelineDataPos2DUVPipelineConstantStructs(void)::ref;
    unk_1ECE44F40 = xmmword_19FFB35E0;
  }
  result = ggl::PipelineSetup::PipelineSetup((uint64_t)v0, (uint64_t)&ggl::Textured::Pos2DUVPipelineSetup::typedReflection(void)::ref);
  *v0 = &off_1E42BCDE8;
  return result;
}

void std::__function::__func<md::RasterRenderResources::RasterRenderResources(void)::$_0,std::allocator<md::RasterRenderResources::RasterRenderResources(void)::$_0>,ggl::RenderItem * ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::RasterRenderResources::RasterRenderResources(void)::$_0,std::allocator<md::RasterRenderResources::RasterRenderResources(void)::$_0>,ggl::RenderItem * ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E42D0BC8;
  return result;
}

int64x2_t std::__function::__func<md::RasterRenderResources::RasterRenderResources(void)::$_0,std::allocator<md::RasterRenderResources::RasterRenderResources(void)::$_0>,ggl::RenderItem * ()(void)>::operator()()
{
  uint64_t v0;
  int64x2_t result;

  v0 = operator new();
  *(_QWORD *)v0 = &off_1E42B59B0;
  *(_QWORD *)(v0 + 48) = 0;
  *(_QWORD *)(v0 + 24) = 0;
  *(_QWORD *)(v0 + 32) = 0;
  *(_QWORD *)(v0 + 16) = "RasterTile";
  *(_DWORD *)(v0 + 40) = 0;
  *(_DWORD *)(v0 + 56) = 1065353216;
  *(_OWORD *)(v0 + 64) = 0u;
  *(_OWORD *)(v0 + 80) = 0u;
  result = vdupq_n_s64(1uLL);
  *(int64x2_t *)(v0 + 96) = result;
  *(_QWORD *)(v0 + 112) = 0;
  return result;
}

void std::__shared_ptr_emplace<ggl::TextureWithReverseAlpha::Pos2DUVPipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E3D28;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::TextureWithReverseAlpha::Pos2DUVPipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E3D28;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_emplace<ggl::Clut::Pos2DUVPipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E42A0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::Clut::Pos2DUVPipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E42A0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_emplace<ggl::Textured::Pos2DUVPipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E4FC0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::Textured::Pos2DUVPipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E4FC0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

void std::__function::__func<md::RasterRenderLayer::RasterRenderLayer(md::CartographicRenderer &,md::RasterRenderLayerType,std::shared_ptr<md::RasterSharedRenderResources> const&)::$_0,std::allocator<md::RasterRenderLayer::RasterRenderLayer(md::CartographicRenderer &,md::RasterRenderLayerType,std::shared_ptr<md::RasterSharedRenderResources> const&)::$_0>,BOOL ()(md::MapTileDataRenderable<md::RasterTileData> *,md::MapTileDataRenderable<md::RasterTileData> *)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::RasterRenderLayer::RasterRenderLayer(md::CartographicRenderer &,md::RasterRenderLayerType,std::shared_ptr<md::RasterSharedRenderResources> const&)::$_0,std::allocator<md::RasterRenderLayer::RasterRenderLayer(md::CartographicRenderer &,md::RasterRenderLayerType,std::shared_ptr<md::RasterSharedRenderResources> const&)::$_0>,BOOL ()(md::MapTileDataRenderable<md::RasterTileData> *,md::MapTileDataRenderable<md::RasterTileData> *)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E42CE780;
  return result;
}

void std::__function::__func<md::RasterRenderLayer::RasterRenderLayer(md::CartographicRenderer &,md::RasterRenderLayerType,std::shared_ptr<md::RasterSharedRenderResources> const&)::$_0,std::allocator<md::RasterRenderLayer::RasterRenderLayer(md::CartographicRenderer &,md::RasterRenderLayerType,std::shared_ptr<md::RasterSharedRenderResources> const&)::$_0>,BOOL ()(md::MapTileDataRenderable<md::RasterTileData> *,md::MapTileDataRenderable<md::RasterTileData> *)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E42CE780;
}

BOOL std::__function::__func<md::RasterRenderLayer::RasterRenderLayer(md::CartographicRenderer &,md::RasterRenderLayerType,std::shared_ptr<md::RasterSharedRenderResources> const&)::$_0,std::allocator<md::RasterRenderLayer::RasterRenderLayer(md::CartographicRenderer &,md::RasterRenderLayerType,std::shared_ptr<md::RasterSharedRenderResources> const&)::$_0>,BOOL ()(md::MapTileDataRenderable<md::RasterTileData> *,md::MapTileDataRenderable<md::RasterTileData> *)>::operator()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)a2 + 384) + 169) > *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)a3 + 384) + 169);
}

uint64_t md::RasterRenderLayer::RasterRenderLayer(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t *a4)
{
  char v8;
  char v9;
  __int16 v10;
  __int16 v11;
  _WORD *v12;
  void *v13;
  void *v14;
  uint64_t (**v15)();
  uint64_t v16;
  __int16 v17;
  _WORD *v18;
  __int128 v19;
  _WORD *v20;
  uint64_t *p_shared_owners;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t (***v36)();
  uint64_t v37;
  uint64_t *v38;
  unsigned __int8 v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _OWORD *v55;
  __int128 *v56;
  uint64_t v57;
  __int128 v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  _OWORD *v73;
  __int128 *v74;
  uint64_t v75;
  __int128 v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  _QWORD *v81;
  uint64_t v82;
  _QWORD *v83;
  uint64_t v84;
  uint64_t *v85;
  unsigned __int8 v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  unint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  unint64_t v99;
  uint64_t v100;
  uint64_t v101;
  _OWORD *v102;
  __int128 *v103;
  uint64_t v104;
  __int128 v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  unint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  unint64_t v116;
  unint64_t v117;
  uint64_t v118;
  uint64_t v119;
  _OWORD *v120;
  __int128 *v121;
  uint64_t v122;
  __int128 v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  _QWORD *v128;
  uint64_t v129;
  _QWORD *v130;
  uint64_t v131;
  uint64_t *v132;
  unsigned __int8 v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  unint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  unint64_t v145;
  unint64_t v146;
  uint64_t v147;
  uint64_t v148;
  _OWORD *v149;
  __int128 *v150;
  uint64_t v151;
  __int128 v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  unint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  unint64_t v163;
  unint64_t v164;
  uint64_t v165;
  uint64_t v166;
  _OWORD *v167;
  __int128 *v168;
  uint64_t v169;
  __int128 v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  _QWORD *v175;
  uint64_t v176;
  _QWORD *v177;
  uint64_t v178;
  md::RasterRenderResources *v179;
  uint64_t (***v180)();
  uint64_t (***v181)();
  uint64_t v182;
  uint64_t v184;
  geo::read_write_lock *v185;
  const char *v186;
  malloc_zone_t *zone;
  uint64_t v188;
  geo::read_write_lock *v189;
  const char *v190;
  malloc_zone_t *v191;
  uint64_t v192;
  geo::read_write_lock *v193;
  const char *v194;
  malloc_zone_t *v195;
  uint64_t v196;
  geo::read_write_lock *v197;
  const char *v198;
  malloc_zone_t *v199;
  uint64_t v200;
  geo::read_write_lock *v201;
  const char *v202;
  malloc_zone_t *v203;
  uint64_t v204;
  geo::read_write_lock *v205;
  const char *v206;
  malloc_zone_t *v207;
  uint64_t (****v208)();
  __int128 v209;
  _QWORD v210[3];
  _QWORD *v211;
  _QWORD v212[3];
  _QWORD *v213;
  _QWORD v214[3];
  _QWORD *v215;
  _QWORD v216[3];
  _QWORD *v217;
  _QWORD v218[3];
  _QWORD *v219;
  _QWORD v220[3];
  _QWORD *v221;
  _QWORD v222[3];
  _QWORD *v223;
  uint64_t (**v224)();
  std::__shared_weak_count *v225;
  uint64_t (***v226)();
  uint64_t v227;

  v227 = *MEMORY[0x1E0C80C00];
  if (a3 == 2)
    v8 = 9;
  else
    v8 = 11;
  if (a3 == 1)
    v8 = 8;
  if (a3)
    v9 = v8;
  else
    v9 = 7;
  if (a3 == 1)
    v10 = 8;
  else
    v10 = 10;
  if (a3)
    v11 = v10;
  else
    v11 = 7;
  v12 = operator new(2uLL);
  *v12 = v11;
  +[VKSharedResourcesManager sharedResources](VKSharedResourcesManager, "sharedResources");
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  v14 = v13;
  if (v13)
  {
    objc_msgSend(v13, "standardCommandBufferSelector");
    v15 = v224;
    if (a3 <= 2)
    {
LABEL_17:
      v16 = (a3 + 6);
      goto LABEL_21;
    }
  }
  else
  {
    v15 = 0;
    v224 = 0;
    v225 = 0;
    if (a3 <= 2)
      goto LABEL_17;
  }
  v16 = 99;
  if (!*((_BYTE *)v15 + 56))
    v16 = 10;
LABEL_21:
  v17 = *((_WORD *)v15[1] + v16);
  v18 = operator new(2uLL);
  *(_QWORD *)&v19 = v12;
  *((_QWORD *)&v19 + 1) = v12 + 1;
  v209 = v19;
  *v18 = v17;
  *(_QWORD *)a1 = off_1E428C468;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  v20 = operator new(2uLL);
  *(_QWORD *)a1 = off_1E42A4ED8;
  *(_QWORD *)(a1 + 8) = v20;
  *v20++ = *v18;
  *(_QWORD *)(a1 + 16) = v20;
  *(_QWORD *)(a1 + 24) = v20;
  *(_WORD *)(a1 + 32) = 0;
  *(_BYTE *)(a1 + 34) = v9;
  *(_QWORD *)(a1 + 40) = a2;
  *(_WORD *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 52) = 0;
  *(_OWORD *)(a1 + 80) = 0u;
  v208 = (uint64_t (****)())(a1 + 80);
  *(_OWORD *)(a1 + 96) = 0u;
  *(_QWORD *)(a1 + 112) = 0;
  *(_DWORD *)(a1 + 120) = 1065353216;
  *(_QWORD *)(a1 + 144) = 0;
  *(_QWORD *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 128) = a1 + 136;
  *(_QWORD *)(a1 + 160) = 0;
  *(_QWORD *)(a1 + 184) = 0;
  *(_QWORD *)(a1 + 152) = a1 + 160;
  *(_QWORD *)(a1 + 176) = a1 + 184;
  *(_QWORD *)(a1 + 216) = 0;
  *(_QWORD *)(a1 + 208) = 0;
  *(_QWORD *)(a1 + 192) = 0;
  *(_QWORD *)(a1 + 200) = a1 + 208;
  *(_QWORD *)(a1 + 240) = 0;
  *(_OWORD *)(a1 + 248) = xmmword_19FFB4CB0;
  *(_QWORD *)(a1 + 312) = 0;
  *(_OWORD *)(a1 + 320) = v209;
  *(_QWORD *)(a1 + 336) = v12 + 1;
  *(_DWORD *)(a1 + 344) = 1;
  *(_QWORD *)(a1 + 232) = 0;
  *(_QWORD *)(a1 + 168) = 0;
  *(_QWORD *)(a1 + 224) = a1 + 232;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_OWORD *)(a1 + 296) = 0u;
  operator delete(v18);
  if (v225)
  {
    p_shared_owners = &v225->__shared_owners_;
    do
      v22 = __ldaxr((unint64_t *)p_shared_owners);
    while (__stlxr(v22 - 1, (unint64_t *)p_shared_owners));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v225->__on_zero_shared)(v225);
      std::__shared_weak_count::__release_weak(v225);
    }
  }

  *(_QWORD *)a1 = &off_1E4292F70;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_OWORD *)(a1 + 368) = 0u;
  *(_QWORD *)(a1 + 384) = a3;
  *(_QWORD *)(a1 + 392) = 0;
  *(_BYTE *)(a1 + 400) = 0;
  v23 = *a4;
  v24 = a4[1];
  if (v24)
  {
    v25 = (unint64_t *)(v24 + 8);
    do
      v26 = __ldxr(v25);
    while (__stxr(v26 + 1, v25));
    v27 = *(std::__shared_weak_count **)(a1 + 360);
    *(_QWORD *)(a1 + 352) = v23;
    *(_QWORD *)(a1 + 360) = v24;
    if (v27)
    {
      v28 = (unint64_t *)&v27->__shared_owners_;
      do
        v29 = __ldaxr(v28);
      while (__stlxr(v29 - 1, v28));
      if (!v29)
      {
        ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
        std::__shared_weak_count::__release_weak(v27);
      }
    }
  }
  else
  {
    *(_QWORD *)(a1 + 352) = v23;
    *(_QWORD *)(a1 + 360) = 0;
  }
  *(_QWORD *)(a1 + 368) = *(_QWORD *)(a1 + 352);
  v30 = operator new();
  *(_OWORD *)v30 = 0u;
  *(_OWORD *)(v30 + 16) = 0u;
  v31 = (unint64_t *)operator new();
  v226 = &v224;
  v222[0] = &off_1E42D60C8;
  v223 = v222;
  v224 = &off_1E42D0BC8;
  ggl::FragmentedPool<ggl::RenderItem>::FragmentedPool(v31, (uint64_t)&v224, (uint64_t)v222);
  v32 = *(_QWORD *)(v30 + 24);
  *(_QWORD *)(v30 + 24) = v31;
  if (v32)
  {
    v33 = ggl::FragmentedPool<ggl::BuildingFlat::CompressedMeshPipelineSetup>::~FragmentedPool(v32);
    MEMORY[0x1A1AF4E00](v33, 0x10A0C40D234DDC7);
  }
  v34 = v223;
  if (v223 == v222)
  {
    v35 = 4;
    v34 = v222;
  }
  else
  {
    if (!v223)
      goto LABEL_42;
    v35 = 5;
  }
  (*(void (**)(void))(*v34 + 8 * v35))();
LABEL_42:
  v36 = v226;
  if (v226 == &v224)
  {
    v37 = 4;
    v36 = &v224;
    goto LABEL_46;
  }
  if (v226)
  {
    v37 = 5;
LABEL_46:
    (*v36)[v37]();
  }
  v38 = (uint64_t *)operator new();
  v221 = v220;
  v218[0] = &off_1E42D7B80;
  v219 = v218;
  v220[0] = &off_1E42D0C10;
  v38[1] = 0;
  v38[2] = 0;
  *v38 = 0;
  {
    v184 = operator new();
    *(_QWORD *)(v184 + 16) = 0xA3D02C1100000005;
    *(_QWORD *)(v184 + 24) = "GeoGL";
    *(_OWORD *)(v184 + 32) = xmmword_19FFB2DE0;
    *(_QWORD *)v184 = &off_1E42B5668;
    *(_QWORD *)(v184 + 8) = "GeoGL";
    *(_OWORD *)(v184 + 72) = 0u;
    *(_OWORD *)(v184 + 88) = 0u;
    *(_OWORD *)(v184 + 104) = 0u;
    *(_OWORD *)(v184 + 120) = 0u;
    *(_OWORD *)(v184 + 136) = 0u;
    *(_OWORD *)(v184 + 152) = 0u;
    *(_OWORD *)(v184 + 168) = 0u;
    *(_OWORD *)(v184 + 184) = 0u;
    *(_OWORD *)(v184 + 200) = 0u;
    *(_OWORD *)(v184 + 216) = 0u;
    *(_OWORD *)(v184 + 232) = 0u;
    *(_QWORD *)(v184 + 248) = 0;
    *(_OWORD *)(v184 + 56) = 0u;
    v185 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v184 + 56), 0);
    if ((_DWORD)v185)
      geo::read_write_lock::logFailure(v185, (uint64_t)"initialization", v186);
    zone = malloc_create_zone(0, 0);
    *(_QWORD *)(v184 + 48) = zone;
    malloc_set_zone_name(zone, "GeoGL");
    *(_QWORD *)(v184 + 256) = os_log_create("com.apple.VectorKit", "Memory");
    ggl::Allocator::instance(void)::alloc = v184;
  }
  v40 = ggl::Allocator::instance(void)::alloc;
  v38[4] = 0;
  v38[3] = v40;
  v38[5] = 0;
  v38[6] = 0;
  {
    v188 = operator new();
    *(_QWORD *)(v188 + 16) = 0xA3D02C1100000005;
    *(_QWORD *)(v188 + 24) = "GeoGL";
    *(_OWORD *)(v188 + 32) = xmmword_19FFB2DE0;
    *(_QWORD *)v188 = &off_1E42B5668;
    *(_QWORD *)(v188 + 8) = "GeoGL";
    *(_OWORD *)(v188 + 72) = 0u;
    *(_OWORD *)(v188 + 88) = 0u;
    *(_OWORD *)(v188 + 104) = 0u;
    *(_OWORD *)(v188 + 120) = 0u;
    *(_OWORD *)(v188 + 136) = 0u;
    *(_OWORD *)(v188 + 152) = 0u;
    *(_OWORD *)(v188 + 168) = 0u;
    *(_OWORD *)(v188 + 184) = 0u;
    *(_OWORD *)(v188 + 200) = 0u;
    *(_OWORD *)(v188 + 216) = 0u;
    *(_OWORD *)(v188 + 232) = 0u;
    *(_QWORD *)(v188 + 248) = 0;
    *(_OWORD *)(v188 + 56) = 0u;
    v189 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v188 + 56), 0);
    if ((_DWORD)v189)
      geo::read_write_lock::logFailure(v189, (uint64_t)"initialization", v190);
    v191 = malloc_create_zone(0, 0);
    *(_QWORD *)(v188 + 48) = v191;
    malloc_set_zone_name(v191, "GeoGL");
    *(_QWORD *)(v188 + 256) = os_log_create("com.apple.VectorKit", "Memory");
    ggl::Allocator::instance(void)::alloc = v188;
  }
  v38[7] = ggl::Allocator::instance(void)::alloc;
  v41 = (uint64_t)v221;
  if (!v221)
    goto LABEL_52;
  if (v221 != v220)
  {
    v41 = (*(uint64_t (**)(void))(*v221 + 16))();
LABEL_52:
    v38[11] = v41;
    goto LABEL_54;
  }
  v38[11] = (uint64_t)(v38 + 8);
  (*(void (**)(_QWORD *, uint64_t *))(v220[0] + 24))(v220, v38 + 8);
LABEL_54:
  v42 = (uint64_t)v219;
  if (!v219)
  {
LABEL_57:
    v38[15] = v42;
    goto LABEL_59;
  }
  if (v219 != v218)
  {
    v42 = (*(uint64_t (**)(void))(*v219 + 16))();
    goto LABEL_57;
  }
  v38[15] = (uint64_t)(v38 + 12);
  (*(void (**)(uint64_t, _QWORD *))(v218[0] + 24))((uint64_t)v218, v38 + 12);
LABEL_59:
  v38[16] = 2000;
  v43 = *v38;
  if ((unint64_t)(v38[2] - *v38) > 0x31F)
    goto LABEL_72;
  v44 = v38[1];
  v45 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v38[3] + 16))(v38[3], 800, 8);
  v46 = v44 - v43;
  v47 = v45 + ((v44 - v43) & 0xFFFFFFFFFFFFFFF8);
  v49 = *v38;
  v48 = v38[1];
  v50 = v48 - *v38;
  if (v48 == *v38)
  {
    v52 = v45 + ((v44 - v43) & 0xFFFFFFFFFFFFFFF8);
    goto LABEL_70;
  }
  v51 = v50 - 8;
  if ((unint64_t)(v50 - 8) >= 0x58)
  {
    v52 = v45 + ((v44 - v43) & 0xFFFFFFFFFFFFFFF8);
    if (v48 - (v46 & 0xFFFFFFFFFFFFFFF8) - v45 >= 0x20)
    {
      v53 = v46 >> 3;
      v54 = (v51 >> 3) + 1;
      v55 = (_OWORD *)(v45 + 8 * v53 - 16);
      v56 = (__int128 *)(v48 - 16);
      v57 = v54 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v58 = *v56;
        *(v55 - 1) = *(v56 - 1);
        *v55 = v58;
        v55 -= 2;
        v56 -= 2;
        v57 -= 4;
      }
      while (v57);
      v52 = v47 - 8 * (v54 & 0x3FFFFFFFFFFFFFFCLL);
      v48 -= 8 * (v54 & 0x3FFFFFFFFFFFFFFCLL);
      if (v54 == (v54 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_69;
    }
  }
  else
  {
    v52 = v45 + ((v44 - v43) & 0xFFFFFFFFFFFFFFF8);
  }
  do
  {
    v59 = *(_QWORD *)(v48 - 8);
    v48 -= 8;
    *(_QWORD *)(v52 - 8) = v59;
    v52 -= 8;
  }
  while (v48 != v49);
LABEL_69:
  v48 = *v38;
LABEL_70:
  *v38 = v52;
  v38[1] = v47;
  v60 = v38[2];
  v38[2] = v45 + 800;
  if (v48)
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v38[3] + 40))(v38[3], v48, v60 - v48);
LABEL_72:
  v61 = v38[4];
  if ((unint64_t)(v38[6] - v61) > 0x31F)
    goto LABEL_85;
  v62 = v38[5];
  v63 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v38[7] + 16))(v38[7], 800, 8);
  v64 = v62 - v61;
  v65 = v63 + ((v62 - v61) & 0xFFFFFFFFFFFFFFF8);
  v67 = v38[4];
  v66 = v38[5];
  v68 = v66 - v67;
  if (v66 == v67)
  {
    v70 = v63 + ((v62 - v61) & 0xFFFFFFFFFFFFFFF8);
    goto LABEL_83;
  }
  v69 = v68 - 8;
  if ((unint64_t)(v68 - 8) >= 0x58)
  {
    v70 = v63 + ((v62 - v61) & 0xFFFFFFFFFFFFFFF8);
    if (v66 - (v64 & 0xFFFFFFFFFFFFFFF8) - v63 >= 0x20)
    {
      v71 = v64 >> 3;
      v72 = (v69 >> 3) + 1;
      v73 = (_OWORD *)(v63 + 8 * v71 - 16);
      v74 = (__int128 *)(v66 - 16);
      v75 = v72 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v76 = *v74;
        *(v73 - 1) = *(v74 - 1);
        *v73 = v76;
        v73 -= 2;
        v74 -= 2;
        v75 -= 4;
      }
      while (v75);
      v70 = v65 - 8 * (v72 & 0x3FFFFFFFFFFFFFFCLL);
      v66 -= 8 * (v72 & 0x3FFFFFFFFFFFFFFCLL);
      if (v72 == (v72 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_82;
    }
  }
  else
  {
    v70 = v63 + ((v62 - v61) & 0xFFFFFFFFFFFFFFF8);
  }
  do
  {
    v77 = *(_QWORD *)(v66 - 8);
    v66 -= 8;
    *(_QWORD *)(v70 - 8) = v77;
    v70 -= 8;
  }
  while (v66 != v67);
LABEL_82:
  v66 = v38[4];
LABEL_83:
  v38[4] = v70;
  v38[5] = v65;
  v78 = v38[6];
  v38[6] = v63 + 800;
  if (v66)
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v38[7] + 40))(v38[7], v66, v78 - v66);
LABEL_85:
  v79 = *(_QWORD *)v30;
  *(_QWORD *)v30 = v38;
  if (v79)
  {
    v80 = ggl::FragmentedPool<ggl::BuildingFlat::CompressedMeshPipelineSetup>::~FragmentedPool(v79);
    MEMORY[0x1A1AF4E00](v80, 0x10A0C40D234DDC7);
  }
  v81 = v219;
  if (v219 == v218)
  {
    v82 = 4;
    v81 = v218;
  }
  else
  {
    if (!v219)
      goto LABEL_92;
    v82 = 5;
  }
  (*(void (**)(void))(*v81 + 8 * v82))();
LABEL_92:
  v83 = v221;
  if (v221 == v220)
  {
    v84 = 4;
    v83 = v220;
    goto LABEL_96;
  }
  if (v221)
  {
    v84 = 5;
LABEL_96:
    (*(void (**)(void))(*v83 + 8 * v84))();
  }
  v85 = (uint64_t *)operator new();
  v217 = v216;
  v214[0] = &off_1E42D73A0;
  v215 = v214;
  v216[0] = &off_1E42D0C58;
  v85[1] = 0;
  v85[2] = 0;
  *v85 = 0;
  {
    v192 = operator new();
    *(_QWORD *)(v192 + 16) = 0xA3D02C1100000005;
    *(_QWORD *)(v192 + 24) = "GeoGL";
    *(_OWORD *)(v192 + 32) = xmmword_19FFB2DE0;
    *(_QWORD *)v192 = &off_1E42B5668;
    *(_QWORD *)(v192 + 8) = "GeoGL";
    *(_OWORD *)(v192 + 72) = 0u;
    *(_OWORD *)(v192 + 88) = 0u;
    *(_OWORD *)(v192 + 104) = 0u;
    *(_OWORD *)(v192 + 120) = 0u;
    *(_OWORD *)(v192 + 136) = 0u;
    *(_OWORD *)(v192 + 152) = 0u;
    *(_OWORD *)(v192 + 168) = 0u;
    *(_OWORD *)(v192 + 184) = 0u;
    *(_OWORD *)(v192 + 200) = 0u;
    *(_OWORD *)(v192 + 216) = 0u;
    *(_OWORD *)(v192 + 232) = 0u;
    *(_QWORD *)(v192 + 248) = 0;
    *(_OWORD *)(v192 + 56) = 0u;
    v193 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v192 + 56), 0);
    if ((_DWORD)v193)
      geo::read_write_lock::logFailure(v193, (uint64_t)"initialization", v194);
    v195 = malloc_create_zone(0, 0);
    *(_QWORD *)(v192 + 48) = v195;
    malloc_set_zone_name(v195, "GeoGL");
    *(_QWORD *)(v192 + 256) = os_log_create("com.apple.VectorKit", "Memory");
    ggl::Allocator::instance(void)::alloc = v192;
  }
  v87 = ggl::Allocator::instance(void)::alloc;
  v85[4] = 0;
  v85[3] = v87;
  v85[5] = 0;
  v85[6] = 0;
  {
    v196 = operator new();
    *(_QWORD *)(v196 + 16) = 0xA3D02C1100000005;
    *(_QWORD *)(v196 + 24) = "GeoGL";
    *(_OWORD *)(v196 + 32) = xmmword_19FFB2DE0;
    *(_QWORD *)v196 = &off_1E42B5668;
    *(_QWORD *)(v196 + 8) = "GeoGL";
    *(_OWORD *)(v196 + 72) = 0u;
    *(_OWORD *)(v196 + 88) = 0u;
    *(_OWORD *)(v196 + 104) = 0u;
    *(_OWORD *)(v196 + 120) = 0u;
    *(_OWORD *)(v196 + 136) = 0u;
    *(_OWORD *)(v196 + 152) = 0u;
    *(_OWORD *)(v196 + 168) = 0u;
    *(_OWORD *)(v196 + 184) = 0u;
    *(_OWORD *)(v196 + 200) = 0u;
    *(_OWORD *)(v196 + 216) = 0u;
    *(_OWORD *)(v196 + 232) = 0u;
    *(_QWORD *)(v196 + 248) = 0;
    *(_OWORD *)(v196 + 56) = 0u;
    v197 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v196 + 56), 0);
    if ((_DWORD)v197)
      geo::read_write_lock::logFailure(v197, (uint64_t)"initialization", v198);
    v199 = malloc_create_zone(0, 0);
    *(_QWORD *)(v196 + 48) = v199;
    malloc_set_zone_name(v199, "GeoGL");
    *(_QWORD *)(v196 + 256) = os_log_create("com.apple.VectorKit", "Memory");
    ggl::Allocator::instance(void)::alloc = v196;
  }
  v85[7] = ggl::Allocator::instance(void)::alloc;
  v88 = (uint64_t)v217;
  if (!v217)
    goto LABEL_102;
  if (v217 != v216)
  {
    v88 = (*(uint64_t (**)(void))(*v217 + 16))();
LABEL_102:
    v85[11] = v88;
    goto LABEL_104;
  }
  v85[11] = (uint64_t)(v85 + 8);
  (*(void (**)(_QWORD *, uint64_t *))(v216[0] + 24))(v216, v85 + 8);
LABEL_104:
  v89 = (uint64_t)v215;
  if (!v215)
  {
LABEL_107:
    v85[15] = v89;
    goto LABEL_109;
  }
  if (v215 != v214)
  {
    v89 = (*(uint64_t (**)(void))(*v215 + 16))();
    goto LABEL_107;
  }
  v85[15] = (uint64_t)(v85 + 12);
  (*(void (**)(uint64_t, _QWORD *))(v214[0] + 24))((uint64_t)v214, v85 + 12);
LABEL_109:
  v85[16] = 2000;
  v90 = *v85;
  if ((unint64_t)(v85[2] - *v85) > 0x31F)
    goto LABEL_122;
  v91 = v85[1];
  v92 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v85[3] + 16))(v85[3], 800, 8);
  v93 = v91 - v90;
  v94 = v92 + ((v91 - v90) & 0xFFFFFFFFFFFFFFF8);
  v96 = *v85;
  v95 = v85[1];
  v97 = v95 - *v85;
  if (v95 == *v85)
  {
    v99 = v92 + ((v91 - v90) & 0xFFFFFFFFFFFFFFF8);
    goto LABEL_120;
  }
  v98 = v97 - 8;
  if ((unint64_t)(v97 - 8) >= 0x58)
  {
    v99 = v92 + ((v91 - v90) & 0xFFFFFFFFFFFFFFF8);
    if (v95 - (v93 & 0xFFFFFFFFFFFFFFF8) - v92 >= 0x20)
    {
      v100 = v93 >> 3;
      v101 = (v98 >> 3) + 1;
      v102 = (_OWORD *)(v92 + 8 * v100 - 16);
      v103 = (__int128 *)(v95 - 16);
      v104 = v101 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v105 = *v103;
        *(v102 - 1) = *(v103 - 1);
        *v102 = v105;
        v102 -= 2;
        v103 -= 2;
        v104 -= 4;
      }
      while (v104);
      v99 = v94 - 8 * (v101 & 0x3FFFFFFFFFFFFFFCLL);
      v95 -= 8 * (v101 & 0x3FFFFFFFFFFFFFFCLL);
      if (v101 == (v101 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_119;
    }
  }
  else
  {
    v99 = v92 + ((v91 - v90) & 0xFFFFFFFFFFFFFFF8);
  }
  do
  {
    v106 = *(_QWORD *)(v95 - 8);
    v95 -= 8;
    *(_QWORD *)(v99 - 8) = v106;
    v99 -= 8;
  }
  while (v95 != v96);
LABEL_119:
  v95 = *v85;
LABEL_120:
  *v85 = v99;
  v85[1] = v94;
  v107 = v85[2];
  v85[2] = v92 + 800;
  if (v95)
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v85[3] + 40))(v85[3], v95, v107 - v95);
LABEL_122:
  v108 = v85[4];
  if ((unint64_t)(v85[6] - v108) > 0x31F)
    goto LABEL_135;
  v109 = v85[5];
  v110 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v85[7] + 16))(v85[7], 800, 8);
  v111 = v109 - v108;
  v112 = v110 + ((v109 - v108) & 0xFFFFFFFFFFFFFFF8);
  v114 = v85[4];
  v113 = v85[5];
  v115 = v113 - v114;
  if (v113 == v114)
  {
    v117 = v110 + ((v109 - v108) & 0xFFFFFFFFFFFFFFF8);
    goto LABEL_133;
  }
  v116 = v115 - 8;
  if ((unint64_t)(v115 - 8) >= 0x58)
  {
    v117 = v110 + ((v109 - v108) & 0xFFFFFFFFFFFFFFF8);
    if (v113 - (v111 & 0xFFFFFFFFFFFFFFF8) - v110 >= 0x20)
    {
      v118 = v111 >> 3;
      v119 = (v116 >> 3) + 1;
      v120 = (_OWORD *)(v110 + 8 * v118 - 16);
      v121 = (__int128 *)(v113 - 16);
      v122 = v119 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v123 = *v121;
        *(v120 - 1) = *(v121 - 1);
        *v120 = v123;
        v120 -= 2;
        v121 -= 2;
        v122 -= 4;
      }
      while (v122);
      v117 = v112 - 8 * (v119 & 0x3FFFFFFFFFFFFFFCLL);
      v113 -= 8 * (v119 & 0x3FFFFFFFFFFFFFFCLL);
      if (v119 == (v119 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_132;
    }
  }
  else
  {
    v117 = v110 + ((v109 - v108) & 0xFFFFFFFFFFFFFFF8);
  }
  do
  {
    v124 = *(_QWORD *)(v113 - 8);
    v113 -= 8;
    *(_QWORD *)(v117 - 8) = v124;
    v117 -= 8;
  }
  while (v113 != v114);
LABEL_132:
  v113 = v85[4];
LABEL_133:
  v85[4] = v117;
  v85[5] = v112;
  v125 = v85[6];
  v85[6] = v110 + 800;
  if (v113)
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v85[7] + 40))(v85[7], v113, v125 - v113);
LABEL_135:
  v126 = *(_QWORD *)(v30 + 8);
  *(_QWORD *)(v30 + 8) = v85;
  if (v126)
  {
    v127 = ggl::FragmentedPool<ggl::BuildingFlat::CompressedMeshPipelineSetup>::~FragmentedPool(v126);
    MEMORY[0x1A1AF4E00](v127, 0x10A0C40D234DDC7);
  }
  v128 = v215;
  if (v215 == v214)
  {
    v129 = 4;
    v128 = v214;
  }
  else
  {
    if (!v215)
      goto LABEL_142;
    v129 = 5;
  }
  (*(void (**)(void))(*v128 + 8 * v129))();
LABEL_142:
  v130 = v217;
  if (v217 == v216)
  {
    v131 = 4;
    v130 = v216;
    goto LABEL_146;
  }
  if (v217)
  {
    v131 = 5;
LABEL_146:
    (*(void (**)(void))(*v130 + 8 * v131))();
  }
  v132 = (uint64_t *)operator new();
  v213 = v212;
  v210[0] = &off_1E42D7088;
  v211 = v210;
  v212[0] = &off_1E42D0CA0;
  v132[1] = 0;
  v132[2] = 0;
  *v132 = 0;
  {
    v200 = operator new();
    *(_QWORD *)(v200 + 16) = 0xA3D02C1100000005;
    *(_QWORD *)(v200 + 24) = "GeoGL";
    *(_OWORD *)(v200 + 32) = xmmword_19FFB2DE0;
    *(_QWORD *)v200 = &off_1E42B5668;
    *(_QWORD *)(v200 + 8) = "GeoGL";
    *(_OWORD *)(v200 + 72) = 0u;
    *(_OWORD *)(v200 + 88) = 0u;
    *(_OWORD *)(v200 + 104) = 0u;
    *(_OWORD *)(v200 + 120) = 0u;
    *(_OWORD *)(v200 + 136) = 0u;
    *(_OWORD *)(v200 + 152) = 0u;
    *(_OWORD *)(v200 + 168) = 0u;
    *(_OWORD *)(v200 + 184) = 0u;
    *(_OWORD *)(v200 + 200) = 0u;
    *(_OWORD *)(v200 + 216) = 0u;
    *(_OWORD *)(v200 + 232) = 0u;
    *(_QWORD *)(v200 + 248) = 0;
    *(_OWORD *)(v200 + 56) = 0u;
    v201 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v200 + 56), 0);
    if ((_DWORD)v201)
      geo::read_write_lock::logFailure(v201, (uint64_t)"initialization", v202);
    v203 = malloc_create_zone(0, 0);
    *(_QWORD *)(v200 + 48) = v203;
    malloc_set_zone_name(v203, "GeoGL");
    *(_QWORD *)(v200 + 256) = os_log_create("com.apple.VectorKit", "Memory");
    ggl::Allocator::instance(void)::alloc = v200;
  }
  v134 = ggl::Allocator::instance(void)::alloc;
  v132[4] = 0;
  v132[3] = v134;
  v132[5] = 0;
  v132[6] = 0;
  {
    v204 = operator new();
    *(_QWORD *)(v204 + 16) = 0xA3D02C1100000005;
    *(_QWORD *)(v204 + 24) = "GeoGL";
    *(_OWORD *)(v204 + 32) = xmmword_19FFB2DE0;
    *(_QWORD *)v204 = &off_1E42B5668;
    *(_QWORD *)(v204 + 8) = "GeoGL";
    *(_OWORD *)(v204 + 72) = 0u;
    *(_OWORD *)(v204 + 88) = 0u;
    *(_OWORD *)(v204 + 104) = 0u;
    *(_OWORD *)(v204 + 120) = 0u;
    *(_OWORD *)(v204 + 136) = 0u;
    *(_OWORD *)(v204 + 152) = 0u;
    *(_OWORD *)(v204 + 168) = 0u;
    *(_OWORD *)(v204 + 184) = 0u;
    *(_OWORD *)(v204 + 200) = 0u;
    *(_OWORD *)(v204 + 216) = 0u;
    *(_OWORD *)(v204 + 232) = 0u;
    *(_QWORD *)(v204 + 248) = 0;
    *(_OWORD *)(v204 + 56) = 0u;
    v205 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v204 + 56), 0);
    if ((_DWORD)v205)
      geo::read_write_lock::logFailure(v205, (uint64_t)"initialization", v206);
    v207 = malloc_create_zone(0, 0);
    *(_QWORD *)(v204 + 48) = v207;
    malloc_set_zone_name(v207, "GeoGL");
    *(_QWORD *)(v204 + 256) = os_log_create("com.apple.VectorKit", "Memory");
    ggl::Allocator::instance(void)::alloc = v204;
  }
  v132[7] = ggl::Allocator::instance(void)::alloc;
  v135 = (uint64_t)v213;
  if (!v213)
    goto LABEL_152;
  if (v213 != v212)
  {
    v135 = (*(uint64_t (**)(void))(*v213 + 16))();
LABEL_152:
    v132[11] = v135;
    goto LABEL_154;
  }
  v132[11] = (uint64_t)(v132 + 8);
  (*(void (**)(_QWORD *, uint64_t *))(v212[0] + 24))(v212, v132 + 8);
LABEL_154:
  v136 = (uint64_t)v211;
  if (!v211)
  {
LABEL_157:
    v132[15] = v136;
    goto LABEL_159;
  }
  if (v211 != v210)
  {
    v136 = (*(uint64_t (**)(void))(*v211 + 16))();
    goto LABEL_157;
  }
  v132[15] = (uint64_t)(v132 + 12);
  (*(void (**)(uint64_t, _QWORD *))(v210[0] + 24))((uint64_t)v210, v132 + 12);
LABEL_159:
  v132[16] = 2000;
  v137 = *v132;
  if ((unint64_t)(v132[2] - *v132) > 0x31F)
    goto LABEL_172;
  v138 = v132[1];
  v139 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v132[3] + 16))(v132[3], 800, 8);
  v140 = v138 - v137;
  v141 = v139 + ((v138 - v137) & 0xFFFFFFFFFFFFFFF8);
  v143 = *v132;
  v142 = v132[1];
  v144 = v142 - *v132;
  if (v142 == *v132)
  {
    v146 = v139 + ((v138 - v137) & 0xFFFFFFFFFFFFFFF8);
    goto LABEL_170;
  }
  v145 = v144 - 8;
  if ((unint64_t)(v144 - 8) >= 0x58)
  {
    v146 = v139 + ((v138 - v137) & 0xFFFFFFFFFFFFFFF8);
    if (v142 - (v140 & 0xFFFFFFFFFFFFFFF8) - v139 >= 0x20)
    {
      v147 = v140 >> 3;
      v148 = (v145 >> 3) + 1;
      v149 = (_OWORD *)(v139 + 8 * v147 - 16);
      v150 = (__int128 *)(v142 - 16);
      v151 = v148 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v152 = *v150;
        *(v149 - 1) = *(v150 - 1);
        *v149 = v152;
        v149 -= 2;
        v150 -= 2;
        v151 -= 4;
      }
      while (v151);
      v146 = v141 - 8 * (v148 & 0x3FFFFFFFFFFFFFFCLL);
      v142 -= 8 * (v148 & 0x3FFFFFFFFFFFFFFCLL);
      if (v148 == (v148 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_169;
    }
  }
  else
  {
    v146 = v139 + ((v138 - v137) & 0xFFFFFFFFFFFFFFF8);
  }
  do
  {
    v153 = *(_QWORD *)(v142 - 8);
    v142 -= 8;
    *(_QWORD *)(v146 - 8) = v153;
    v146 -= 8;
  }
  while (v142 != v143);
LABEL_169:
  v142 = *v132;
LABEL_170:
  *v132 = v146;
  v132[1] = v141;
  v154 = v132[2];
  v132[2] = v139 + 800;
  if (v142)
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v132[3] + 40))(v132[3], v142, v154 - v142);
LABEL_172:
  v155 = v132[4];
  if ((unint64_t)(v132[6] - v155) > 0x31F)
    goto LABEL_185;
  v156 = v132[5];
  v157 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v132[7] + 16))(v132[7], 800, 8);
  v158 = v156 - v155;
  v159 = v157 + ((v156 - v155) & 0xFFFFFFFFFFFFFFF8);
  v161 = v132[4];
  v160 = v132[5];
  v162 = v160 - v161;
  if (v160 == v161)
  {
    v164 = v157 + ((v156 - v155) & 0xFFFFFFFFFFFFFFF8);
    goto LABEL_183;
  }
  v163 = v162 - 8;
  if ((unint64_t)(v162 - 8) >= 0x58)
  {
    v164 = v157 + ((v156 - v155) & 0xFFFFFFFFFFFFFFF8);
    if (v160 - (v158 & 0xFFFFFFFFFFFFFFF8) - v157 >= 0x20)
    {
      v165 = v158 >> 3;
      v166 = (v163 >> 3) + 1;
      v167 = (_OWORD *)(v157 + 8 * v165 - 16);
      v168 = (__int128 *)(v160 - 16);
      v169 = v166 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v170 = *v168;
        *(v167 - 1) = *(v168 - 1);
        *v167 = v170;
        v167 -= 2;
        v168 -= 2;
        v169 -= 4;
      }
      while (v169);
      v164 = v159 - 8 * (v166 & 0x3FFFFFFFFFFFFFFCLL);
      v160 -= 8 * (v166 & 0x3FFFFFFFFFFFFFFCLL);
      if (v166 == (v166 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_182;
    }
  }
  else
  {
    v164 = v157 + ((v156 - v155) & 0xFFFFFFFFFFFFFFF8);
  }
  do
  {
    v171 = *(_QWORD *)(v160 - 8);
    v160 -= 8;
    *(_QWORD *)(v164 - 8) = v171;
    v164 -= 8;
  }
  while (v160 != v161);
LABEL_182:
  v160 = v132[4];
LABEL_183:
  v132[4] = v164;
  v132[5] = v159;
  v172 = v132[6];
  v132[6] = v157 + 800;
  if (v160)
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v132[7] + 40))(v132[7], v160, v172 - v160);
LABEL_185:
  v173 = *(_QWORD *)(v30 + 16);
  *(_QWORD *)(v30 + 16) = v132;
  if (v173)
  {
    v174 = ggl::FragmentedPool<ggl::BuildingFlat::CompressedMeshPipelineSetup>::~FragmentedPool(v173);
    MEMORY[0x1A1AF4E00](v174, 0x10A0C40D234DDC7);
  }
  v175 = v211;
  if (v211 == v210)
  {
    v176 = 4;
    v175 = v210;
  }
  else
  {
    if (!v211)
      goto LABEL_192;
    v176 = 5;
  }
  (*(void (**)(void))(*v175 + 8 * v176))();
LABEL_192:
  v177 = v213;
  if (v213 == v212)
  {
    v178 = 4;
    v177 = v212;
  }
  else
  {
    if (!v213)
      goto LABEL_197;
    v178 = 5;
  }
  (*(void (**)(void))(*v177 + 8 * v178))();
LABEL_197:
  v179 = *(md::RasterRenderResources **)(a1 + 376);
  *(_QWORD *)(a1 + 376) = v30;
  if (v179)
  {
    md::RasterRenderResources::~RasterRenderResources(v179);
    MEMORY[0x1A1AF4E00]();
  }
  v180 = (uint64_t (***)())(a1 + 56);
  v181 = &v224;
  v224 = &off_1E42CE780;
  v226 = &v224;
  if ((uint64_t (***)())(a1 + 56) == &v224)
  {
    v182 = 4;
LABEL_208:
    (*v181)[v182]();
    return a1;
  }
  if (*v208 == v180)
  {
    std::__function::__func<md::RasterRenderLayer::RasterRenderLayer(md::CartographicRenderer &,md::RasterRenderLayerType,std::shared_ptr<md::RasterSharedRenderResources> const&)::$_0,std::allocator<md::RasterRenderLayer::RasterRenderLayer(md::CartographicRenderer &,md::RasterRenderLayerType,std::shared_ptr<md::RasterSharedRenderResources> const&)::$_0>,BOOL ()(md::MapTileDataRenderable<md::RasterTileData> *,md::MapTileDataRenderable<md::RasterTileData> *)>::__clone((uint64_t)&v224, v222);
    v226 = 0;
    ((void (*)(uint64_t, uint64_t (***)()))(*v180)[3])(a1 + 56, &v224);
    ((void (*)(uint64_t (***)()))(**v208)[4])(*v208);
    *v208 = 0;
    v226 = &v224;
    (*(void (**)(uint64_t, _QWORD *))(v222[0] + 24))((uint64_t)v222, (_QWORD *)(a1 + 56));
    (*(void (**)(_QWORD *))(v222[0] + 32))(v222);
    *v208 = v180;
    v181 = v226;
  }
  else
  {
    std::__function::__func<md::RasterRenderLayer::RasterRenderLayer(md::CartographicRenderer &,md::RasterRenderLayerType,std::shared_ptr<md::RasterSharedRenderResources> const&)::$_0,std::allocator<md::RasterRenderLayer::RasterRenderLayer(md::CartographicRenderer &,md::RasterRenderLayerType,std::shared_ptr<md::RasterSharedRenderResources> const&)::$_0>,BOOL ()(md::MapTileDataRenderable<md::RasterTileData> *,md::MapTileDataRenderable<md::RasterTileData> *)>::__clone((uint64_t)&v224, (_QWORD *)(a1 + 56));
    v181 = *v208;
    v226 = *v208;
    *v208 = v180;
  }
  if (v181 == &v224)
  {
    v182 = 4;
    v181 = &v224;
    goto LABEL_208;
  }
  if (v181)
  {
    v182 = 5;
    goto LABEL_208;
  }
  return a1;
}

void sub_19FAD26C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, char *a16, char a17, uint64_t a18, uint64_t a19, char *a20)
{
  uint64_t v20;
  uint64_t *v21;
  uint64_t *v22;
  _QWORD *v23;
  uint64_t *v24;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  md::RasterRenderResources *v42;
  std::__shared_weak_count *v43;
  unint64_t *p_shared_owners;
  unint64_t v45;

  v26 = (_QWORD *)v22[11];
  if (v26 == v23)
  {
    v27 = 4;
  }
  else
  {
    if (!v26)
    {
      v28 = *v24;
      if (*v24)
        goto LABEL_16;
      goto LABEL_5;
    }
    v27 = 5;
    v23 = (_QWORD *)v22[11];
  }
  (*(void (**)(_QWORD *))(*v23 + 8 * v27))(v23);
  v28 = *v24;
  if (*v24)
  {
LABEL_16:
    v22[5] = v28;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v22[7] + 40))(v22[7], v28, v22[6] - v28);
    v29 = *v22;
    if (!*v22)
    {
LABEL_7:
      v30 = a16;
      if (a16 == &a13)
      {
        v31 = 4;
        v30 = &a13;
      }
      else
      {
        if (!a16)
          goto LABEL_12;
        v31 = 5;
      }
      (*(void (**)(void))(*(_QWORD *)v30 + 8 * v31))();
LABEL_12:
      v32 = a20;
      if (a20 == &a17)
      {
        v33 = 4;
        v32 = &a17;
      }
      else
      {
        if (!a20)
          goto LABEL_21;
        v33 = 5;
      }
      (*(void (**)(void))(*(_QWORD *)v32 + 8 * v33))();
LABEL_21:
      MEMORY[0x1A1AF4E00](v22, 0x10A0C40D234DDC7);
      v34 = v21[3];
      v21[3] = 0;
      if (v34)
      {
        v35 = ggl::FragmentedPool<ggl::BuildingFlat::CompressedMeshPipelineSetup>::~FragmentedPool(v34);
        MEMORY[0x1A1AF4E00](v35, 0x10A0C40D234DDC7);
      }
      v36 = v21[2];
      v21[2] = 0;
      if (v36)
      {
        v37 = ggl::FragmentedPool<ggl::BuildingFlat::CompressedMeshPipelineSetup>::~FragmentedPool(v36);
        MEMORY[0x1A1AF4E00](v37, 0x10A0C40D234DDC7);
      }
      v38 = v21[1];
      v21[1] = 0;
      if (v38)
      {
        v39 = ggl::FragmentedPool<ggl::BuildingFlat::CompressedMeshPipelineSetup>::~FragmentedPool(v38);
        MEMORY[0x1A1AF4E00](v39, 0x10A0C40D234DDC7);
      }
      v40 = *v21;
      *v21 = 0;
      if (v40)
      {
        v41 = ggl::FragmentedPool<ggl::BuildingFlat::CompressedMeshPipelineSetup>::~FragmentedPool(v40);
        MEMORY[0x1A1AF4E00](v41, 0x10A0C40D234DDC7);
      }
      MEMORY[0x1A1AF4E00](v21, 0x20C40DC1BFBCFLL);
      v42 = *(md::RasterRenderResources **)(v20 + 376);
      *(_QWORD *)(v20 + 376) = 0;
      if (v42)
      {
        md::RasterRenderResources::~RasterRenderResources(v42);
        MEMORY[0x1A1AF4E00]();
      }
      v43 = *(std::__shared_weak_count **)(v20 + 360);
      if (v43)
      {
        p_shared_owners = (unint64_t *)&v43->__shared_owners_;
        do
          v45 = __ldaxr(p_shared_owners);
        while (__stlxr(v45 - 1, p_shared_owners));
        if (!v45)
        {
          ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
          std::__shared_weak_count::__release_weak(v43);
        }
      }
      md::CartographicTiledRenderLayer<md::MapTileDataRenderable<md::RasterTileData>>::~CartographicTiledRenderLayer(v20);
      _Unwind_Resume(a1);
    }
LABEL_6:
    v22[1] = v29;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v22[3] + 40))(v22[3], v29, v22[2] - v29);
    goto LABEL_7;
  }
LABEL_5:
  v29 = *v22;
  if (!*v22)
    goto LABEL_7;
  goto LABEL_6;
}

void karo::graphics::FreezeViewNode::~FreezeViewNode(void **this)
{
  *this = off_1E42C34D0;
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
}

{
  *this = off_1E42C34D0;
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t karo::graphics::FreezeViewNode::computeView(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v4;

  v1 = *(_QWORD *)(a1 + 40);
  if (!v1)
    return 0;
  result = *(_QWORD *)(a1 + 48);
  if (result)
  {
    if (*(_BYTE *)(a1 + 56))
    {
      if (*(_BYTE *)(a1 + 57))
      {
        v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 24))(v1);
        karo::graphics::View::copyView(*(_QWORD *)(a1 + 48), v4);
        *(_BYTE *)(a1 + 57) = 0;
        return *(_QWORD *)(a1 + 48);
      }
    }
    else
    {
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 24))(v1);
    }
  }
  return result;
}

void md::SceneQueryLogic::~SceneQueryLogic(md::SceneQueryLogic *this)
{
  md::SceneQueryLogic::~SceneQueryLogic(this);
  JUMPOUT(0x1A1AF4E00);
}

{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  void *v14;
  _QWORD *v15;
  _QWORD *v16;
  void *v17;
  _QWORD *v18;
  void *v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  _QWORD *v23;
  void *v24;

  *(_QWORD *)this = &off_1E4290BC8;
  GEOConfigRemoveBlockListener();
  GEOConfigRemoveBlockListener();
  GEOConfigRemoveBlockListener();
  v2 = (_QWORD *)*((_QWORD *)this + 65);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = (void *)*((_QWORD *)this + 63);
  *((_QWORD *)this + 63) = 0;
  if (v4)
    operator delete(v4);
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((_QWORD **)this + 61));
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((_QWORD **)this + 58));
  std::__tree<std::__value_type<md::FrameGraphPass *,geo::linear_set<md::FrameGraphPass *,md::FrameGraphPassLessThan,std::allocator<md::FrameGraphPass *>,std::vector<md::FrameGraphPass *>>>,std::__map_value_compare<md::FrameGraphPass *,std::__value_type<md::FrameGraphPass *,geo::linear_set<md::FrameGraphPass *,md::FrameGraphPassLessThan,std::allocator<md::FrameGraphPass *>,std::vector<md::FrameGraphPass *>>>,md::FrameGraphPassLessThan,true>,std::allocator<std::__value_type<md::FrameGraphPass *,geo::linear_set<md::FrameGraphPass *,md::FrameGraphPassLessThan,std::allocator<md::FrameGraphPass *>,std::vector<md::FrameGraphPass *>>>>>::destroy(*((_QWORD **)this + 54));
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((_QWORD **)this + 51));
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((_QWORD **)this + 48));
  v5 = (std::__shared_weak_count *)*((_QWORD *)this + 45);
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  v8 = (std::__shared_weak_count *)*((_QWORD *)this + 43);
  if (v8)
  {
    v9 = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  v11 = (std::__shared_weak_count *)*((_QWORD *)this + 41);
  if (v11)
  {
    v12 = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  *((_QWORD *)this + 37) = &off_1E42B4C30;

  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((_QWORD **)this + 35));
  v14 = (void *)*((_QWORD *)this + 31);
  if (v14)
  {
    *((_QWORD *)this + 32) = v14;
    operator delete(v14);
  }
  v15 = (_QWORD *)*((_QWORD *)this + 28);
  if (v15)
  {
    do
    {
      v16 = (_QWORD *)*v15;
      operator delete(v15);
      v15 = v16;
    }
    while (v16);
  }
  v17 = (void *)*((_QWORD *)this + 26);
  *((_QWORD *)this + 26) = 0;
  if (v17)
    operator delete(v17);
  v18 = (_QWORD *)*((_QWORD *)this + 23);
  if (v18)
  {
    do
    {
      v23 = (_QWORD *)*v18;
      v24 = (void *)v18[3];
      if (v24)
      {
        v18[4] = v24;
        operator delete(v24);
      }
      operator delete(v18);
      v18 = v23;
    }
    while (v23);
  }
  v19 = (void *)*((_QWORD *)this + 21);
  *((_QWORD *)this + 21) = 0;
  if (v19)
    operator delete(v19);
  v20 = (std::__shared_weak_count *)*((_QWORD *)this + 20);
  if (v20)
  {
    v21 = (unint64_t *)&v20->__shared_owners_;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }

  *(_QWORD *)this = off_1E42AFC70;
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((_QWORD **)this + 13));
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((_QWORD **)this + 10));
}

void md::SceneQueryLogic::didBecomeInactive(md::SceneQueryLogic *this)
{
  void *v2;

  v2 = (void *)*((_QWORD *)this + 38);
  if (v2)
  {
    *((_QWORD *)this + 38) = 0;

  }
  md::SceneQueryLogic::clearNavigationFlexState(this);
}

uint64_t md::Logic<md::SceneQueryLogic,md::SceneQueryContext,md::LogicDependencies<gdc::TypeList<md::CameraContext,md::RegistryContext,md::NavigationContext,md::StyleLogicContext,md::SettingsContext>,gdc::TypeList<>>>::_debugConsoleString@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _BYTE *a4@<X8>)
{
  uint64_t v4;
  uint64_t v6;
  _QWORD v7[6];

  if (*(_QWORD *)(a3 + 8) == 0xDFC317497CF9A4BFLL && (v4 = *(_QWORD *)(a3 + 32)) != 0)
  {
    v6 = result;
    md::LogicDependencies<gdc::TypeList<md::CameraContext,md::RegistryContext,md::NavigationContext,md::StyleLogicContext,md::SettingsContext>,gdc::TypeList<>>::buildRequiredTuple<md::CameraContext,md::RegistryContext,md::NavigationContext,md::StyleLogicContext,md::SettingsContext>(v7, **(_QWORD **)(a2 + 8), *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8));
    return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD *, uint64_t))(*(_QWORD *)v6 + 160))(v6, a2, v7, v4);
  }
  else
  {
    a4[23] = 0;
    *a4 = 0;
  }
  return result;
}

uint64_t md::Logic<md::SceneQueryLogic,md::SceneQueryContext,md::LogicDependencies<gdc::TypeList<md::CameraContext,md::RegistryContext,md::NavigationContext,md::StyleLogicContext,md::SettingsContext>,gdc::TypeList<>>>::frequency(uint64_t a1)
{
  return *(_QWORD *)(a1 + 64);
}

uint64_t md::SceneQueryLogic::debugConsoleString@<X0>(uint64_t a1@<X0>, uint64_t a2@<X3>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  std::ios_base *v9;
  uint64_t v10;
  const char *v11;
  uint64_t v12;
  const char *v13;
  uint64_t v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  const char *v18;
  uint64_t v19;
  const char *v20;
  uint64_t v21;
  const char *v22;
  uint64_t v23;
  uint64_t v24;
  const char *v25;
  uint64_t v26;
  unsigned __int8 *v27;
  unsigned __int8 *i;
  const char *v29;
  size_t v30;
  _QWORD *v31;
  _QWORD *v32;
  _QWORD *v33;
  _QWORD *v34;
  _QWORD *v35;
  char *v36;
  char *v37;
  char *v38;
  _QWORD *v39;
  _QWORD *v40;
  BOOL v41;
  _QWORD *v42;
  _QWORD *v43;
  _QWORD *v44;
  char *v45;
  char *v46;
  _QWORD *v47;
  _QWORD *v48;
  char *v49;
  _QWORD *v50;
  _QWORD *v51;
  _QWORD *v52;
  char *v53;
  char *v54;
  _QWORD *v55;
  _QWORD *v56;
  char *v57;
  _QWORD *v58;
  _QWORD *v59;
  uint64_t *v60;
  _QWORD *v61;
  _QWORD *v62;
  char *v63;
  char *v64;
  _QWORD *v65;
  _QWORD *v66;
  char *v67;
  _QWORD *v68;
  _QWORD *v69;
  void *v70;
  size_t v71;
  void *v72;
  unint64_t v73;
  const void **v74;
  const void *v75;
  uint64_t v76;
  uint64_t v77;
  void *v78;
  void *__p[2];
  __int128 v82;
  int v83;
  uint64_t v84;
  uint64_t v85;
  _QWORD v86[3];
  uint64_t v87;
  unint64_t v88;
  void *v89[2];
  __int128 v90;
  int v91;
  uint64_t v92[19];
  void *v93[2];
  char v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  uint64_t v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  uint64_t v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  uint64_t v121;
  uint64_t v122;

  v122 = *MEMORY[0x1E0C80C00];
  v5 = MEMORY[0x1E0DE4FE0];
  v6 = MEMORY[0x1E0DE4FE0] + 64;
  v7 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v8 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v92[0] = MEMORY[0x1E0DE4FE0] + 64;
  v84 = v7;
  *(uint64_t *)((char *)&v84 + *(_QWORD *)(v7 - 24)) = v8;
  v9 = (std::ios_base *)((char *)&v84 + *(_QWORD *)(v84 - 24));
  std::ios_base::init(v9, &v85);
  v9[1].__vftable = 0;
  v9[1].__fmtflags_ = -1;
  v84 = v5 + 24;
  v92[0] = v6;
  std::streambuf::basic_streambuf();
  v85 = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)v89 = 0u;
  v90 = 0u;
  v91 = 16;
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v84, (uint64_t)"\n===== SceneQueryLogic =====\n", 29);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v84, (uint64_t)"HasBaseQuery:", 13);
  v10 = *(_QWORD *)(a1 + 320);
  if (v10)
    v11 = "YES";
  else
    v11 = "NO";
  if (v10)
    v12 = 3;
  else
    v12 = 2;
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v84, (uint64_t)v11, v12);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v84, (uint64_t)"\n", 1);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v84, (uint64_t)"== RouteLineMasking ==\n", 23);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v84, (uint64_t)"Allowed:", 8);
  if (*(_BYTE *)(a1 + 121))
    v13 = "YES";
  else
    v13 = "NO";
  if (*(_BYTE *)(a1 + 121))
    v14 = 3;
  else
    v14 = 2;
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v84, (uint64_t)v13, v14);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v84, (uint64_t)" ", 1);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v84, (uint64_t)"Active:", 7);
  if (*(_BYTE *)(a2 + 64))
    v15 = "YES";
  else
    v15 = "NO";
  if (*(_BYTE *)(a2 + 64))
    v16 = 3;
  else
    v16 = 2;
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v84, (uint64_t)v15, v16);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v84, (uint64_t)" ", 1);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v84, (uint64_t)"HasQuery:", 9);
  v17 = *(_QWORD *)(a1 + 352);
  if (v17)
    v18 = "YES";
  else
    v18 = "NO";
  if (v17)
    v19 = 3;
  else
    v19 = 2;
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v84, (uint64_t)v18, v19);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v84, (uint64_t)"\n", 1);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v84, (uint64_t)"== SpatialFlexing ==\n", 21);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v84, (uint64_t)"Allowed:", 8);
  if (*(_BYTE *)(a1 + 120))
    v20 = "YES";
  else
    v20 = "NO";
  if (*(_BYTE *)(a1 + 120))
    v21 = 3;
  else
    v21 = 2;
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v84, (uint64_t)v20, v21);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v84, (uint64_t)" ", 1);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v84, (uint64_t)"Active:", 7);
  if (*(_BYTE *)(a2 + 65))
    v22 = "YES";
  else
    v22 = "NO";
  if (*(_BYTE *)(a2 + 65))
    v23 = 3;
  else
    v23 = 2;
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v84, (uint64_t)v22, v23);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v84, (uint64_t)" ", 1);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v84, (uint64_t)"HasQuery:", 9);
  v24 = *(_QWORD *)(a1 + 336);
  if (v24)
    v25 = "YES";
  else
    v25 = "NO";
  if (v24)
    v26 = 3;
  else
    v26 = 2;
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v84, (uint64_t)v25, v26);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v84, (uint64_t)"\n", 1);
  if (*(_QWORD *)(a1 + 248) != *(_QWORD *)(a1 + 256))
  {
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v84, (uint64_t)"FlexBuckets:\n", 13);
    v27 = *(unsigned __int8 **)(a1 + 248);
    for (i = *(unsigned __int8 **)(a1 + 256); v27 != i; v27 += 12)
    {
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v84, (uint64_t)"  ", 2);
      v29 = gss::to_string(*v27);
      v30 = strlen(v29);
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v84, (uint64_t)v29, v30);
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v84, (uint64_t)":", 1);
      v31 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v31, (uint64_t)" - ", 3);
      if (*((_DWORD *)v27 + 2) == -1)
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v84, (uint64_t)"MAX", 3);
      else
        std::ostream::operator<<();
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v84, (uint64_t)"\n", 1);
    }
  }
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v84, (uint64_t)"Registries Processed:", 21);
  v32 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v32, (uint64_t)"\n", 1);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v84, (uint64_t)"Entities Processed:", 19);
  v33 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v33, (uint64_t)"\n", 1);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v84, (uint64_t)"Pending:", 8);
  v34 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v34, (uint64_t)"\n", 1);
  if (*(_QWORD *)(a1 + 472))
  {
    v35 = *(_QWORD **)(a1 + 456);
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v84, (uint64_t)"[", 1);
    v36 = (char *)&v84 + *(_QWORD *)(v84 - 24);
    if ((v36[32] & 5) != 0)
    {
      v119 = 0u;
      v120 = 0u;
      v117 = 0u;
      v118 = 0u;
      v115 = 0u;
      v116 = 0u;
      v113 = 0u;
      v114 = 0u;
      v121 = -1;
    }
    else
    {
      (*(void (**)(__int128 *__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**((_QWORD **)v36 + 5) + 32))(&v113, *((_QWORD *)v36 + 5), 0, 1, 16);
    }
    if (v35 != (_QWORD *)(a1 + 464))
    {
      while (1)
      {
        v37 = (char *)&v84 + *(_QWORD *)(v84 - 24);
        if ((v37[32] & 5) != 0)
        {
          v110 = 0u;
          v111 = 0u;
          v108 = 0u;
          v109 = 0u;
          v106 = 0u;
          v107 = 0u;
          v104 = 0u;
          v105 = 0u;
          v112 = -1;
        }
        else
        {
          (*(void (**)(__int128 *__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**((_QWORD **)v37 + 5)
                                                                                           + 32))(&v104, *((_QWORD *)v37 + 5), 0, 1, 16);
        }
        std::ostream::operator<<();
        v38 = (char *)&v84 + *(_QWORD *)(v84 - 24);
        if ((v38[32] & 5) != 0)
        {
          v101 = 0u;
          v102 = 0u;
          v99 = 0u;
          v100 = 0u;
          v97 = 0u;
          v98 = 0u;
          v95 = 0u;
          v96 = 0u;
          v103 = -1;
        }
        else
        {
          (*(void (**)(__int128 *__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**((_QWORD **)v38 + 5)
                                                                                           + 32))(&v95, *((_QWORD *)v38 + 5), 0, 1, 16);
        }
        v39 = (_QWORD *)v35[1];
        if (v39)
        {
          do
          {
            v40 = v39;
            v39 = (_QWORD *)*v39;
          }
          while (v39);
        }
        else
        {
          do
          {
            v40 = (_QWORD *)v35[2];
            v41 = *v40 == (_QWORD)v35;
            v35 = v40;
          }
          while (!v41);
        }
        if (v40 == (_QWORD *)(a1 + 464))
          break;
        if (v103 > v112)
        {
          std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v84, (uint64_t)",", 1);
          if (v103 - v121 >= 41)
          {
            std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v84, (uint64_t)"\n", 1);
            BYTE7(v82) = 2;
            strcpy((char *)__p, "  ");
            std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v84, (uint64_t)__p, 2);
            if (SBYTE7(v82) < 0)
              operator delete(__p[0]);
            v119 = v101;
            v120 = v102;
            v121 = v103;
            v115 = v97;
            v116 = v98;
            v117 = v99;
            v118 = v100;
            v113 = v95;
            v114 = v96;
          }
        }
        v35 = v40;
      }
    }
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v84, (uint64_t)"]", 1);
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v84, (uint64_t)"\n", 1);
  }
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v84, (uint64_t)"Modified:", 9);
  v42 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v42, (uint64_t)"\n", 1);
  v43 = *(_QWORD **)(a1 + 152);
  if (v43[48] != v43[49])
  {
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v84, (uint64_t)"Modified(Active):\n", 18);
    v44 = *(_QWORD **)(a1 + 480);
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v84, (uint64_t)"[", 1);
    v45 = (char *)&v84 + *(_QWORD *)(v84 - 24);
    if ((v45[32] & 5) != 0)
    {
      v119 = 0u;
      v120 = 0u;
      v117 = 0u;
      v118 = 0u;
      v115 = 0u;
      v116 = 0u;
      v113 = 0u;
      v114 = 0u;
      v121 = -1;
    }
    else
    {
      (*(void (**)(__int128 *__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**((_QWORD **)v45 + 5) + 32))(&v113, *((_QWORD *)v45 + 5), 0, 1, 16);
    }
    if (v44 != (_QWORD *)(a1 + 488))
    {
      while (1)
      {
        v46 = (char *)&v84 + *(_QWORD *)(v84 - 24);
        if ((v46[32] & 5) != 0)
        {
          v110 = 0u;
          v111 = 0u;
          v108 = 0u;
          v109 = 0u;
          v106 = 0u;
          v107 = 0u;
          v104 = 0u;
          v105 = 0u;
          v112 = -1;
        }
        else
        {
          (*(void (**)(__int128 *__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**((_QWORD **)v46 + 5)
                                                                                           + 32))(&v104, *((_QWORD *)v46 + 5), 0, 1, 16);
        }
        v48 = (_QWORD *)v43[48];
        v47 = (_QWORD *)v43[49];
        if (v48 != v47)
        {
          while (*v48 != v44[5])
          {
            if (++v48 == v47)
            {
              v48 = (_QWORD *)v43[49];
              break;
            }
          }
        }
        if (v48 != v47)
          std::ostream::operator<<();
        v49 = (char *)&v84 + *(_QWORD *)(v84 - 24);
        if ((v49[32] & 5) != 0)
        {
          v101 = 0u;
          v102 = 0u;
          v99 = 0u;
          v100 = 0u;
          v97 = 0u;
          v98 = 0u;
          v95 = 0u;
          v96 = 0u;
          v103 = -1;
        }
        else
        {
          (*(void (**)(__int128 *__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**((_QWORD **)v49 + 5)
                                                                                           + 32))(&v95, *((_QWORD *)v49 + 5), 0, 1, 16);
        }
        v50 = (_QWORD *)v44[1];
        if (v50)
        {
          do
          {
            v51 = v50;
            v50 = (_QWORD *)*v50;
          }
          while (v50);
        }
        else
        {
          do
          {
            v51 = (_QWORD *)v44[2];
            v41 = *v51 == (_QWORD)v44;
            v44 = v51;
          }
          while (!v41);
        }
        if (v51 == (_QWORD *)(a1 + 488))
          break;
        if (v103 > v112)
        {
          std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v84, (uint64_t)",", 1);
          if (v103 - v121 >= 41)
          {
            std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v84, (uint64_t)"\n", 1);
            BYTE7(v82) = 2;
            strcpy((char *)__p, "  ");
            std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v84, (uint64_t)__p, 2);
            if (SBYTE7(v82) < 0)
              operator delete(__p[0]);
            v119 = v101;
            v120 = v102;
            v121 = v103;
            v115 = v97;
            v116 = v98;
            v117 = v99;
            v118 = v100;
            v113 = v95;
            v114 = v96;
          }
        }
        v44 = v51;
      }
    }
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v84, (uint64_t)"]", 1);
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v84, (uint64_t)"\n", 1);
    v43 = *(_QWORD **)(a1 + 152);
  }
  if (v43[60] != v43[61])
  {
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v84, (uint64_t)"Modified(Cached):\n", 18);
    v52 = *(_QWORD **)(a1 + 480);
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v84, (uint64_t)"[", 1);
    v53 = (char *)&v84 + *(_QWORD *)(v84 - 24);
    if ((v53[32] & 5) != 0)
    {
      v119 = 0u;
      v120 = 0u;
      v117 = 0u;
      v118 = 0u;
      v115 = 0u;
      v116 = 0u;
      v113 = 0u;
      v114 = 0u;
      v121 = -1;
    }
    else
    {
      (*(void (**)(__int128 *__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**((_QWORD **)v53 + 5) + 32))(&v113, *((_QWORD *)v53 + 5), 0, 1, 16);
    }
    if (v52 != (_QWORD *)(a1 + 488))
    {
      while (1)
      {
        v54 = (char *)&v84 + *(_QWORD *)(v84 - 24);
        if ((v54[32] & 5) != 0)
        {
          v110 = 0u;
          v111 = 0u;
          v108 = 0u;
          v109 = 0u;
          v106 = 0u;
          v107 = 0u;
          v104 = 0u;
          v105 = 0u;
          v112 = -1;
        }
        else
        {
          (*(void (**)(__int128 *__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**((_QWORD **)v54 + 5)
                                                                                           + 32))(&v104, *((_QWORD *)v54 + 5), 0, 1, 16);
        }
        v56 = (_QWORD *)v43[60];
        v55 = (_QWORD *)v43[61];
        if (v56 != v55)
        {
          while (*v56 != v52[5])
          {
            if (++v56 == v55)
            {
              v56 = (_QWORD *)v43[61];
              break;
            }
          }
        }
        if (v56 != v55)
          std::ostream::operator<<();
        v57 = (char *)&v84 + *(_QWORD *)(v84 - 24);
        if ((v57[32] & 5) != 0)
        {
          v101 = 0u;
          v102 = 0u;
          v99 = 0u;
          v100 = 0u;
          v97 = 0u;
          v98 = 0u;
          v95 = 0u;
          v96 = 0u;
          v103 = -1;
        }
        else
        {
          (*(void (**)(__int128 *__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**((_QWORD **)v57 + 5)
                                                                                           + 32))(&v95, *((_QWORD *)v57 + 5), 0, 1, 16);
        }
        v58 = (_QWORD *)v52[1];
        if (v58)
        {
          do
          {
            v59 = v58;
            v58 = (_QWORD *)*v58;
          }
          while (v58);
        }
        else
        {
          do
          {
            v59 = (_QWORD *)v52[2];
            v41 = *v59 == (_QWORD)v52;
            v52 = v59;
          }
          while (!v41);
        }
        if (v59 == (_QWORD *)(a1 + 488))
          break;
        if (v103 > v112)
        {
          std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v84, (uint64_t)",", 1);
          if (v103 - v121 >= 41)
          {
            std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v84, (uint64_t)"\n", 1);
            BYTE7(v82) = 2;
            strcpy((char *)__p, "  ");
            std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v84, (uint64_t)__p, 2);
            if (SBYTE7(v82) < 0)
              operator delete(__p[0]);
            v119 = v101;
            v120 = v102;
            v121 = v103;
            v115 = v97;
            v116 = v98;
            v117 = v99;
            v118 = v100;
            v113 = v95;
            v114 = v96;
          }
        }
        v52 = v59;
      }
    }
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v84, (uint64_t)"]", 1);
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v84, (uint64_t)"\n", 1);
  }
  if (*(_QWORD *)(a1 + 528))
  {
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v84, (uint64_t)"CacheHits:\n", 11);
    *(_OWORD *)__p = 0u;
    v82 = 0u;
    v83 = 1065353216;
    v60 = *(uint64_t **)(a1 + 520);
    if (v60)
    {
      do
      {
        v61 = std::__hash_table<std::__hash_value_type<unsigned int,unsigned int>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,unsigned int>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>((uint64_t)__p, *((_DWORD *)v60 + 5), (_DWORD *)v60 + 5);
        ++*((_DWORD *)v61 + 5);
        v60 = (uint64_t *)*v60;
      }
      while (v60);
      v62 = (_QWORD *)v82;
    }
    else
    {
      v62 = 0;
    }
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v84, (uint64_t)"[", 1);
    v63 = (char *)&v84 + *(_QWORD *)(v84 - 24);
    if ((v63[32] & 5) != 0)
    {
      v119 = 0u;
      v120 = 0u;
      v117 = 0u;
      v118 = 0u;
      v115 = 0u;
      v116 = 0u;
      v113 = 0u;
      v114 = 0u;
      v121 = -1;
    }
    else
    {
      (*(void (**)(__int128 *__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**((_QWORD **)v63 + 5) + 32))(&v113, *((_QWORD *)v63 + 5), 0, 1, 16);
    }
    if (v62)
    {
      while (1)
      {
        v64 = (char *)&v84 + *(_QWORD *)(v84 - 24);
        if ((v64[32] & 5) != 0)
        {
          v110 = 0u;
          v111 = 0u;
          v108 = 0u;
          v109 = 0u;
          v106 = 0u;
          v107 = 0u;
          v104 = 0u;
          v105 = 0u;
          v112 = -1;
        }
        else
        {
          (*(void (**)(__int128 *__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**((_QWORD **)v64 + 5)
                                                                                           + 32))(&v104, *((_QWORD *)v64 + 5), 0, 1, 16);
        }
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v84, (uint64_t)"(", 1);
        v65 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v65, (uint64_t)",", 1);
        v66 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v66, (uint64_t)")", 1);
        v67 = (char *)&v84 + *(_QWORD *)(v84 - 24);
        if ((v67[32] & 5) != 0)
        {
          v101 = 0u;
          v102 = 0u;
          v99 = 0u;
          v100 = 0u;
          v97 = 0u;
          v98 = 0u;
          v95 = 0u;
          v96 = 0u;
          v103 = -1;
        }
        else
        {
          (*(void (**)(__int128 *__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**((_QWORD **)v67 + 5)
                                                                                           + 32))(&v95, *((_QWORD *)v67 + 5), 0, 1, 16);
        }
        v62 = (_QWORD *)*v62;
        if (!v62)
          break;
        if (v103 > v112)
        {
          std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v84, (uint64_t)",", 1);
          if (v103 - v121 >= 41)
          {
            std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v84, (uint64_t)"\n", 1);
            v94 = 2;
            strcpy((char *)v93, "  ");
            std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v84, (uint64_t)v93, 2);
            if (v94 < 0)
              operator delete(v93[0]);
            v119 = v101;
            v120 = v102;
            v121 = v103;
            v115 = v97;
            v116 = v98;
            v117 = v99;
            v118 = v100;
            v113 = v95;
            v114 = v96;
          }
        }
      }
    }
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v84, (uint64_t)"]", 1);
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v84, (uint64_t)"\n", 1);
    v68 = (_QWORD *)v82;
    if ((_QWORD)v82)
    {
      do
      {
        v69 = (_QWORD *)*v68;
        operator delete(v68);
        v68 = v69;
      }
      while (v69);
    }
    v70 = __p[0];
    __p[0] = 0;
    if (v70)
      operator delete(v70);
  }
  if ((v91 & 0x10) != 0)
  {
    v73 = *((_QWORD *)&v90 + 1);
    if (*((_QWORD *)&v90 + 1) < v88)
    {
      *((_QWORD *)&v90 + 1) = v88;
      v73 = v88;
    }
    v74 = (const void **)&v87;
  }
  else
  {
    if ((v91 & 8) == 0)
    {
      v71 = 0;
      v72 = a3;
      *((_BYTE *)a3 + 23) = 0;
      goto LABEL_177;
    }
    v74 = (const void **)v86;
    v73 = v86[2];
  }
  v72 = a3;
  v75 = *v74;
  v71 = v73 - (_QWORD)*v74;
  if (v71 >= 0x7FFFFFFFFFFFFFF8)
    abort();
  if (v71 >= 0x17)
  {
    v76 = (v71 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v71 | 7) != 0x17)
      v76 = v71 | 7;
    v77 = v76 + 1;
    v78 = operator new(v76 + 1);
    a3[1] = v71;
    a3[2] = v77 | 0x8000000000000000;
    *a3 = v78;
    v72 = v78;
    goto LABEL_176;
  }
  *((_BYTE *)a3 + 23) = v71;
  if (v71)
LABEL_176:
    memmove(v72, v75, v71);
LABEL_177:
  *((_BYTE *)v72 + v71) = 0;
  v84 = *MEMORY[0x1E0DE4F60];
  *(uint64_t *)((char *)&v84 + *(_QWORD *)(v84 - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  v85 = MEMORY[0x1E0DE4FB8] + 16;
  if (SBYTE7(v90) < 0)
    operator delete(v89[0]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1A1AF4D64](v92);
}

void sub_19FAD3F0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  std::ostream::~ostream();
  MEMORY[0x1A1AF4D64](a10);
  _Unwind_Resume(a1);
}

void sub_19FAD3F3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,void *__p,uint64_t a56,int a57,__int16 a58,char a59,char a60)
{
  std::unordered_set<md::MuninJunction const*>::~unordered_set[abi:nn180100]((uint64_t)&a13);
  std::ostringstream::~ostringstream((uint64_t)&a22);
  _Unwind_Resume(a1);
}

void md::SceneQueryLogic::handleNavigationFlex(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6)
{
  uint64_t v9;
  _BOOL4 v10;
  _BOOL4 v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  int v17;
  NSObject *v18;
  const char *v19;
  uint64_t v20;
  unsigned __int16 *v21;
  unsigned __int16 *v22;
  uint64_t **v23;
  unint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t *v27;
  unsigned int v28;
  BOOL v29;
  uint64_t **v30;
  _QWORD *v31;
  _QWORD *v32;
  _QWORD *v33;
  int8x8_t v34;
  uint8x8_t v35;
  unint64_t v36;
  uint64_t v37;
  unsigned __int16 **v38;
  unsigned __int16 *v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unsigned __int16 *v43;
  _QWORD *v44;
  unint64_t v45;
  unint64_t v46;
  unsigned __int16 *v47;
  unint64_t v48;
  void *v49;
  float v50;
  unsigned int v51;
  BOOL v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  unint64_t v56;
  _QWORD *v57;
  uint64_t v58;
  int v59;
  unint64_t *v60;
  unint64_t v61;
  uint64_t v62;
  unsigned int v63;
  float *v64;
  float v65;
  _BOOL4 v66;
  BOOL v67;
  unsigned int v68;
  float v69;
  _BOOL4 v70;
  _QWORD *v72;
  uint64_t v73;
  uint64_t ***p_buf;
  uint64_t v75;
  uint64_t v76;
  _BOOL4 v77;
  unsigned int v78;
  int v79;
  int v80;
  uint64_t *v81;
  uint64_t **v82;
  _BYTE *v83;
  uint64_t *v84;
  float v85;
  BOOL v86;
  unsigned int v87;
  float v88;
  _BOOL4 v89;
  unsigned int v91;
  int v92;
  int v93;
  unsigned int v94;
  uint64_t v95;
  uint64_t *v96;
  uint64_t **v97;
  uint64_t **v98;
  unsigned __int8 v99;
  _BYTE *v100;
  uint64_t *v101;
  float v102;
  _BOOL4 v103;
  BOOL v104;
  unsigned int v105;
  float v106;
  _BOOL4 v107;
  unsigned int v109;
  int v110;
  int v111;
  unsigned int v112;
  uint64_t v113;
  uint64_t *v114;
  uint64_t **v115;
  uint64_t **v116;
  unsigned int v117;
  _BYTE *v118;
  uint64_t *v119;
  uint64_t *v120;
  uint64_t **v121;
  uint64_t **v122;
  _BYTE *v123;
  uint64_t **v124;
  _QWORD *v125;
  uint64_t *v126;
  uint64_t **v127;
  _QWORD *v128;
  _QWORD *v129;
  _QWORD *v130;
  uint64_t *v131;
  uint64_t v132;
  _QWORD *v133;
  _BYTE *v134;
  unint64_t v135;
  _BYTE *v136;
  unint64_t v137;
  unint64_t v138;
  unint64_t v139;
  char *v140;
  char *v141;
  char *i;
  uint64_t v143;
  int v144;
  _QWORD *v145;
  _QWORD *v146;
  int v147;
  uint64_t v148;
  NSObject *v149;
  _QWORD *v150;
  uint64_t v151;
  _QWORD *v152;
  uint64_t v153;
  __int128 *v154;
  uint64_t v155;
  _QWORD *v156;
  uint64_t v157;
  _QWORD *v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t *v161;
  uint64_t *v162;
  char *v163;
  uint64_t *v164;
  uint64_t *v165;
  uint64_t *v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t *v169;
  int64_t v170;
  uint64_t *v171;
  uint64_t v172;
  unint64_t v173;
  unint64_t v174;
  unint64_t v175;
  unint64_t v176;
  _BYTE *v177;
  uint64_t *v178;
  uint64_t *v179;
  unint64_t v180;
  uint64_t *v181;
  uint64_t v182;
  uint64_t v183;
  _OWORD *v184;
  uint64_t *v185;
  uint64_t v186;
  __int128 v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t **v190;
  _BYTE *v191;
  uint64_t v192;
  uint64_t *v193;
  uint64_t *v194;
  char *v195;
  char *v196;
  _QWORD *v197;
  std::__shared_weak_count *v198;
  std::__shared_weak_count *v199;
  void *shared_weak_owners;
  int8x8_t v201;
  uint8x8_t v202;
  uint64_t v203;
  _QWORD *v204;
  _QWORD *v205;
  uint64_t v206;
  unint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t **v210;
  _BYTE *v211;
  _QWORD *v212;
  _QWORD *v213;
  uint64_t v214;
  _QWORD *v215;
  uint64_t v216;
  uint64_t v217;
  _QWORD *v218;
  uint64_t v219;
  std::__shared_weak_count *v220;
  uint64_t *v221;
  double v222;
  double v223;
  double v224;
  double v225;
  double v226;
  double v227;
  double v228;
  double v229;
  double v230;
  double v231;
  double v232;
  double v233;
  double v234;
  double v235;
  double v236;
  unsigned int v237;
  _QWORD *v238;
  int64_t v239;
  uint64_t v240;
  unint64_t v241;
  unint64_t v242;
  char *v243;
  char *v244;
  char *v245;
  std::__shared_weak_count *v246;
  std::__shared_weak_count *v247;
  int64_t v248;
  unint64_t v249;
  char *v250;
  uint64_t v251;
  char *v252;
  uint64_t *p_shared_weak_owners;
  uint64_t v254;
  __int128 v255;
  __int128 v256;
  uint64_t v257;
  std::__shared_weak_count *v258;
  void *v259;
  gss::Allocator **v260;
  unint64_t v261;
  unint64_t v262;
  uint64_t v263;
  unint64_t v264;
  uint64_t v265;
  uint64_t v266;
  unint64_t v267;
  uint64_t v268;
  uint64_t v269;
  unint64_t v270;
  uint64_t v271;
  uint64_t v273;
  uint64_t v274;
  unint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v280;
  uint64_t v281;
  unint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  unint64_t v287;
  unint64_t v288;
  uint64_t v289;
  unint64_t v290;
  uint64_t v291;
  _QWORD *v292;
  uint64_t v293;
  uint64_t v294;
  gss::Allocator **v295;
  uint64_t v296;
  unint64_t v297;
  unint64_t v298;
  uint64_t v299;
  unint64_t v300;
  uint64_t v301;
  uint64_t v302;
  unint64_t v303;
  uint64_t v304;
  uint64_t v305;
  unint64_t v306;
  uint64_t v307;
  uint64_t v309;
  uint64_t v310;
  unint64_t v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v316;
  uint64_t v317;
  unint64_t v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  unint64_t v323;
  unint64_t v324;
  uint64_t v325;
  unint64_t v326;
  uint64_t v327;
  _QWORD *v328;
  uint64_t v329;
  uint64_t v330;
  gss::Allocator **v331;
  unint64_t v332;
  unint64_t v333;
  uint64_t v334;
  unint64_t v335;
  uint64_t v336;
  uint64_t v337;
  unint64_t v338;
  uint64_t v339;
  uint64_t v340;
  unint64_t v341;
  uint64_t v342;
  uint64_t v344;
  unint64_t v345;
  uint64_t v346;
  unint64_t v347;
  uint64_t v348;
  uint64_t v349;
  unint64_t v350;
  uint64_t v351;
  uint64_t v353;
  uint64_t v354;
  unint64_t v355;
  uint64_t v356;
  uint64_t v357;
  uint64_t v358;
  unint64_t v360;
  uint64_t v361;
  unint64_t v362;
  uint64_t v363;
  unint64_t v364;
  uint64_t v365;
  uint64_t v366;
  uint64_t v367;
  unint64_t v368;
  uint64_t v369;
  uint64_t *v370;
  _QWORD *v371;
  uint64_t v372;
  int8x8_t v373;
  uint8x8_t v374;
  uint64_t v375;
  _QWORD *v376;
  _QWORD *v377;
  uint64_t v378;
  unint64_t v379;
  uint64_t v380;
  uint64_t v381;
  _QWORD *v382;
  uint64_t v383;
  unint64_t v384;
  float v385;
  uint64_t v386;
  int8x8_t v387;
  uint8x8_t v388;
  uint64_t v389;
  _QWORD *v390;
  _QWORD *v391;
  uint64_t v392;
  unint64_t v393;
  uint64_t v394;
  uint64_t v395;
  _QWORD *v396;
  uint64_t v397;
  uint64_t v398;
  uint64_t v399;
  gss::Allocator **v400;
  unint64_t v401;
  unint64_t v402;
  uint64_t v403;
  unint64_t v404;
  uint64_t v405;
  uint64_t v406;
  unint64_t v407;
  uint64_t v408;
  uint64_t v409;
  unint64_t v410;
  uint64_t v411;
  uint64_t v413;
  unint64_t v414;
  uint64_t v415;
  unint64_t v416;
  uint64_t v417;
  uint64_t v418;
  unint64_t v419;
  uint64_t v420;
  uint64_t v422;
  uint64_t v423;
  unint64_t v424;
  uint64_t v425;
  uint64_t v426;
  uint64_t v427;
  unint64_t v429;
  uint64_t v430;
  unint64_t v431;
  uint64_t v432;
  unint64_t v433;
  uint64_t v434;
  uint64_t v435;
  uint64_t v436;
  unint64_t v437;
  uint64_t v438;
  std::__shared_weak_count *v439;
  std::__shared_weak_count *v440;
  void *v441;
  void *v442;
  uint64_t *v443;
  uint64_t v444;
  unint64_t v445;
  uint64_t *v446;
  uint64_t *v447;
  uint64_t *v448;
  uint64_t *v449;
  uint64_t v450;
  unsigned int v451;
  uint64_t *v452;
  uint64_t **v453;
  uint64_t **v454;
  uint64_t **v455;
  unsigned int v456;
  _QWORD *v457;
  unsigned int v458;
  _WORD *v459;
  uint64_t v460;
  uint64_t *v461;
  uint64_t v462;
  uint64_t v463;
  uint64_t v464;
  unint64_t v465;
  uint64_t v466;
  int64_t v467;
  uint64_t *v468;
  uint64_t v469;
  unint64_t v470;
  unint64_t v471;
  unint64_t v472;
  unint64_t v473;
  _BYTE *v474;
  uint64_t *v475;
  uint64_t *v476;
  uint64_t *v477;
  unint64_t v478;
  uint64_t *v479;
  uint64_t v480;
  uint64_t v481;
  _OWORD *v482;
  uint64_t *v483;
  uint64_t v484;
  __int128 v485;
  uint64_t v486;
  _BYTE *v487;
  uint64_t **v488;
  _BYTE *v489;
  uint64_t v490;
  uint64_t *v491;
  uint64_t *v492;
  _QWORD *v493;
  std::__shared_weak_count *v494;
  std::__shared_weak_count *v495;
  void *v496;
  int8x8_t v497;
  uint8x8_t v498;
  uint64_t v499;
  _QWORD *v500;
  _QWORD *v501;
  uint64_t v502;
  unint64_t v503;
  uint64_t v504;
  uint64_t v505;
  uint64_t **v506;
  _BYTE *v507;
  uint64_t v508;
  _QWORD *v509;
  _QWORD *v510;
  uint64_t v511;
  _QWORD *v512;
  _QWORD *v513;
  uint64_t v514;
  uint64_t v515;
  uint64_t v516;
  _QWORD *v517;
  uint64_t v518;
  std::__shared_weak_count *v519;
  uint64_t *v520;
  double v521;
  double v522;
  double v523;
  double v524;
  double v525;
  double v526;
  double v527;
  double v528;
  double v529;
  double v530;
  double v531;
  double v532;
  double v533;
  double v534;
  double v535;
  unsigned int v536;
  _QWORD *v537;
  int64_t v538;
  uint64_t v539;
  unint64_t v540;
  unint64_t v541;
  char *v542;
  char *v543;
  char *v544;
  std::__shared_weak_count *v545;
  std::__shared_weak_count *v546;
  int64_t v547;
  unint64_t v548;
  char *v549;
  uint64_t v550;
  char *v551;
  uint64_t *v552;
  uint64_t v553;
  __int128 v554;
  __int128 v555;
  uint64_t v556;
  std::__shared_weak_count *v557;
  void *v558;
  gss::Allocator **v559;
  unint64_t v560;
  unint64_t v561;
  uint64_t v562;
  unint64_t v563;
  uint64_t v564;
  unint64_t v565;
  uint64_t v566;
  uint64_t v567;
  unint64_t v568;
  uint64_t v569;
  uint64_t v571;
  uint64_t v572;
  unint64_t v573;
  uint64_t v574;
  uint64_t v575;
  uint64_t v576;
  unint64_t v578;
  unint64_t v579;
  uint64_t v580;
  unint64_t v581;
  uint64_t v582;
  BOOL v583;
  uint64_t v584;
  uint64_t v585;
  gss::Allocator **v586;
  uint64_t v587;
  unint64_t v588;
  unint64_t v589;
  uint64_t v590;
  unint64_t v591;
  uint64_t v592;
  unint64_t v593;
  uint64_t v594;
  uint64_t v595;
  unint64_t v596;
  uint64_t v597;
  uint64_t v599;
  uint64_t v600;
  unint64_t v601;
  uint64_t v602;
  uint64_t v603;
  uint64_t v604;
  unint64_t v606;
  unint64_t v607;
  uint64_t v608;
  unint64_t v609;
  uint64_t v610;
  BOOL v611;
  uint64_t *v612;
  _QWORD *v613;
  uint64_t v614;
  int8x8_t v615;
  uint8x8_t v616;
  uint64_t v617;
  _QWORD *v618;
  _QWORD *v619;
  uint64_t v620;
  unint64_t v621;
  uint64_t v622;
  uint64_t v623;
  _QWORD *v624;
  uint64_t v625;
  unint64_t v626;
  float v627;
  uint64_t v628;
  int8x8_t v629;
  uint8x8_t v630;
  uint64_t v631;
  _QWORD *v632;
  _QWORD *v633;
  uint64_t v634;
  unint64_t v635;
  uint64_t v636;
  uint64_t v637;
  _QWORD *v638;
  uint64_t v639;
  uint64_t v640;
  uint64_t v641;
  gss::Allocator **v642;
  unint64_t v643;
  unint64_t v644;
  uint64_t v645;
  unint64_t v646;
  uint64_t v647;
  unint64_t v648;
  uint64_t v649;
  uint64_t v650;
  unint64_t v651;
  uint64_t v652;
  uint64_t v654;
  unint64_t v655;
  uint64_t v656;
  unint64_t v657;
  uint64_t v658;
  uint64_t v659;
  unint64_t v660;
  uint64_t v661;
  unint64_t v663;
  uint64_t v664;
  unint64_t v665;
  uint64_t v666;
  unint64_t v667;
  uint64_t v668;
  BOOL v669;
  uint64_t v670;
  uint64_t v671;
  unint64_t v672;
  uint64_t v673;
  std::__shared_weak_count *v675;
  std::__shared_weak_count *v676;
  void *v677;
  void *v678;
  _QWORD *v679;
  _QWORD *v680;
  uint64_t v681;
  _QWORD *v682;
  uint64_t *v683;
  _QWORD *v684;
  _QWORD *v685;
  _QWORD *v686;
  _QWORD *v687;
  _QWORD *v688;
  _BOOL4 v689;
  _BYTE *v690;
  float *v691;
  _BYTE *v692;
  uint64_t *v694;
  unsigned int v695;
  uint64_t *v696;
  uint64_t *__pa;
  char *__pb;
  uint64_t *__pc;
  char *__pd;
  float v702;
  double *v703;
  void *v704;
  _BYTE *v705;
  uint64_t v706;
  uint64_t *v707;
  uint64_t *v708;
  uint64_t v709;
  void *v710;
  std::__shared_weak_count *v711;
  unint64_t v712;
  uint64_t v713;
  _QWORD v714[3];
  _QWORD *v715;
  _QWORD v716[3];
  _QWORD *v717;
  _QWORD v718[3];
  _QWORD *v719;
  _QWORD v720[3];
  _QWORD *v721;
  uint64_t **v722;
  uint64_t *v723;
  uint64_t v724;
  uint64_t ***v725;
  _QWORD v726[3];
  _QWORD *v727;
  _QWORD v728[3];
  _QWORD *v729;
  __int128 buf;
  __int128 v731;
  __int128 v732;
  uint64_t v733;

  v733 = *MEMORY[0x1E0C80C00];
  v9 = *(_QWORD *)(a1 + 336);
  if (v9 == a3)
  {
    v689 = 0;
    v11 = 0;
  }
  else
  {
    if (v9)
      v10 = 0;
    else
      v10 = a3 != 0;
    if (a3)
      v11 = 0;
    else
      v11 = v9 != 0;
    if (a4)
    {
      v12 = (unint64_t *)(a4 + 8);
      do
        v13 = __ldxr(v12);
      while (__stxr(v13 + 1, v12));
    }
    v14 = *(std::__shared_weak_count **)(a1 + 344);
    *(_QWORD *)(a1 + 336) = a3;
    *(_QWORD *)(a1 + 344) = a4;
    v689 = v10;
    if (v14)
    {
      p_shared_owners = (unint64_t *)&v14->__shared_owners_;
      do
        v16 = __ldaxr(p_shared_owners);
      while (__stlxr(v16 - 1, p_shared_owners));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }
  }
  v17 = *(_QWORD *)(a1 + 336) != 0;
  if (*(unsigned __int8 *)(a6 + 65) != v17)
  {
    *(_BYTE *)(a6 + 65) = v17;
    if (GEOGetVectorKitSceneQueryLogicLog(void)::onceToken != -1)
      dispatch_once(&GEOGetVectorKitSceneQueryLogicLog(void)::onceToken, &__block_literal_global_17866);
    v18 = GEOGetVectorKitSceneQueryLogicLog(void)::log;
    if (os_log_type_enabled((os_log_t)GEOGetVectorKitSceneQueryLogicLog(void)::log, OS_LOG_TYPE_INFO))
    {
      if (*(_BYTE *)(a6 + 65))
        v19 = "YES";
      else
        v19 = "NO";
      LODWORD(buf) = 136315138;
      *(_QWORD *)((char *)&buf + 4) = v19;
      _os_log_impl(&dword_19F029000, v18, OS_LOG_TYPE_INFO, "SpatialFlexingEnabled:%s", (uint8_t *)&buf, 0xCu);
    }
  }
  v20 = *(_QWORD *)(a1 + 152);
  v21 = *(unsigned __int16 **)(v20 + 456);
  v22 = *(unsigned __int16 **)(v20 + 464);
  if (v21 != v22 && *(_QWORD *)(a1 + 496))
  {
    v23 = (uint64_t **)(a1 + 488);
    do
    {
      v24 = *v21;
      v25 = *v23;
      if (*v23)
      {
        v26 = a1 + 488;
        v27 = *v23;
        do
        {
          v28 = *((unsigned __int16 *)v27 + 16);
          v29 = v28 >= v24;
          if (v28 >= v24)
            v30 = (uint64_t **)v27;
          else
            v30 = (uint64_t **)(v27 + 1);
          if (v29)
            v26 = (uint64_t)v27;
          v27 = *v30;
        }
        while (*v30);
        if ((uint64_t **)v26 != v23 && v24 >= *(unsigned __int16 *)(v26 + 32))
        {
          v31 = *(_QWORD **)(v26 + 8);
          v32 = (_QWORD *)v26;
          if (v31)
          {
            do
            {
              v33 = v31;
              v31 = (_QWORD *)*v31;
            }
            while (v31);
          }
          else
          {
            do
            {
              v33 = (_QWORD *)v32[2];
              v52 = *v33 == (_QWORD)v32;
              v32 = v33;
            }
            while (!v52);
          }
          if (*(_QWORD *)(a1 + 480) == v26)
            *(_QWORD *)(a1 + 480) = v33;
          --*(_QWORD *)(a1 + 496);
          std::__tree_remove[abi:nn180100]<std::__tree_node_base<void *> *>(v25, (uint64_t *)v26);
          operator delete((void *)v26);
        }
      }
      v34 = *(int8x8_t *)(a1 + 512);
      if (v34)
      {
        v35 = (uint8x8_t)vcnt_s8(v34);
        v35.i16[0] = vaddlv_u8(v35);
        if (v35.u32[0] > 1uLL)
        {
          v36 = v24;
          if (*(_QWORD *)&v34 <= v24)
            v36 = v24 % *(_QWORD *)&v34;
        }
        else
        {
          v36 = (v34.i32[0] - 1) & v24;
        }
        v37 = *(_QWORD *)(a1 + 504);
        v38 = *(unsigned __int16 ***)(v37 + 8 * v36);
        if (v38)
        {
          v39 = *v38;
          if (*v38)
          {
            v40 = *(_QWORD *)&v34 - 1;
            if (v35.u32[0] < 2uLL)
            {
              while (1)
              {
                v41 = *((_QWORD *)v39 + 1);
                if (v41 == v24)
                {
                  if (v39[8] == (_DWORD)v24)
                    goto LABEL_70;
                }
                else if ((v41 & v40) != v36)
                {
                  goto LABEL_29;
                }
                v39 = *(unsigned __int16 **)v39;
                if (!v39)
                  goto LABEL_29;
              }
            }
            do
            {
              v42 = *((_QWORD *)v39 + 1);
              if (v42 == v24)
              {
                if (v39[8] == (_DWORD)v24)
                {
LABEL_70:
                  if (v35.u32[0] > 1uLL)
                  {
                    if (*(_QWORD *)&v34 <= v24)
                      v24 %= *(_QWORD *)&v34;
                  }
                  else
                  {
                    v24 &= v40;
                  }
                  v43 = *(unsigned __int16 **)(v37 + 8 * v24);
                  do
                  {
                    v44 = v43;
                    v43 = *(unsigned __int16 **)v43;
                  }
                  while (v43 != v39);
                  if (v44 == (_QWORD *)(a1 + 520))
                    goto LABEL_87;
                  v45 = v44[1];
                  if (v35.u32[0] > 1uLL)
                  {
                    if (v45 >= *(_QWORD *)&v34)
                      v45 %= *(_QWORD *)&v34;
                  }
                  else
                  {
                    v45 &= v40;
                  }
                  if (v45 != v24)
                  {
LABEL_87:
                    if (!*(_QWORD *)v39)
                      goto LABEL_88;
                    v46 = *(_QWORD *)(*(_QWORD *)v39 + 8);
                    if (v35.u32[0] > 1uLL)
                    {
                      if (v46 >= *(_QWORD *)&v34)
                        v46 %= *(_QWORD *)&v34;
                    }
                    else
                    {
                      v46 &= v40;
                    }
                    if (v46 != v24)
LABEL_88:
                      *(_QWORD *)(v37 + 8 * v24) = 0;
                  }
                  v47 = *(unsigned __int16 **)v39;
                  if (*(_QWORD *)v39)
                  {
                    v48 = *((_QWORD *)v47 + 1);
                    if (v35.u32[0] > 1uLL)
                    {
                      if (v48 >= *(_QWORD *)&v34)
                        v48 %= *(_QWORD *)&v34;
                    }
                    else
                    {
                      v48 &= v40;
                    }
                    if (v48 != v24)
                    {
                      *(_QWORD *)(*(_QWORD *)(a1 + 504) + 8 * v48) = v44;
                      v47 = *(unsigned __int16 **)v39;
                    }
                  }
                  *v44 = v47;
                  --*(_QWORD *)(a1 + 528);
                  operator delete(v39);
                  break;
                }
              }
              else
              {
                if (v42 >= *(_QWORD *)&v34)
                  v42 %= *(_QWORD *)&v34;
                if (v42 != v36)
                  break;
              }
              v39 = *(unsigned __int16 **)v39;
            }
            while (v39);
          }
        }
      }
LABEL_29:
      ++v21;
    }
    while (v21 != v22);
  }
  v49 = *(void **)(a1 + 336);
  if (!v49)
  {
    if (!v11)
      return;
    v716[1] = a2;
    v717 = v716;
    v714[0] = &off_1E42CCB18;
    v714[1] = a2;
    v715 = v714;
    v716[0] = &off_1E42CCAD0;
    *((_QWORD *)&v731 + 1) = &buf;
    *(_QWORD *)&buf = &off_1E42CCB18;
    *((_QWORD *)&buf + 1) = a2;
    std::__function::__func<md::SceneQueryLogic::handleNavigationFlex(md::LayoutContext const&,md::CameraContext const&,md::NavigationContext const&,md::StyleLogicContext const&,std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>> const&,BOOL,md::SceneQueryContext &)::$_4,std::allocator<md::SceneQueryLogic::handleNavigationFlex(md::LayoutContext const&,md::CameraContext const&,md::NavigationContext const&,md::StyleLogicContext const&,std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>> const&,BOOL,md::SceneQueryContext &)::$_4>,void ()(void)>::operator()((uint64_t)v716);
    v57 = v715;
    if (v715 == v714)
    {
      v58 = 4;
      v57 = v714;
    }
    else
    {
      if (!v715)
        goto LABEL_145;
      v58 = 5;
    }
    (*(void (**)(void))(*v57 + 8 * v58))();
LABEL_145:
    v72 = v717;
    if (v717 == v716)
    {
      v73 = 4;
      v72 = v716;
    }
    else
    {
      if (!v717)
      {
LABEL_150:
        md::SceneQueryLogic::clearNavigationFlexState((md::SceneQueryLogic *)a1);
        md::SceneQueryLogic::prepareNavigationFlexSegmentsForRoute((md::SceneQueryLogic *)a1, 0);
        *(_BYTE *)(a1 + 368) = -1;
        std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(_QWORD **)(a1 + 464));
        *(_QWORD *)(a1 + 464) = 0;
        *(_QWORD *)(a1 + 472) = 0;
        *(_QWORD *)(a1 + 456) = a1 + 464;
        std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(_QWORD **)(a1 + 280));
        *(_QWORD *)(a1 + 280) = 0;
        *(_QWORD *)(a1 + 288) = 0;
        *(_QWORD *)(a1 + 272) = a1 + 280;
        *(_QWORD *)(a1 + 256) = *(_QWORD *)(a1 + 248);
        std::__hash_table<md::SceneQueryEvent,std::hash<md::SceneQueryEvent>,std::equal_to<md::SceneQueryEvent>,std::allocator<md::SceneQueryEvent>>::__emplace_unique_key_args<md::SceneQueryEvent,md::SceneQueryEvent&>((float *)(a1 + 208), 0, 0);
        *(_QWORD *)(a1 + 544) = 0;
        if (*((_QWORD *)&v731 + 1))
        {
          (*(void (**)(_QWORD))(**((_QWORD **)&v731 + 1) + 48))(*((_QWORD *)&v731 + 1));
          p_buf = (uint64_t ***)*((_QWORD *)&v731 + 1);
          if (*((__int128 **)&v731 + 1) != &buf)
            goto LABEL_1015;
          v75 = 4;
          p_buf = (uint64_t ***)&buf;
          goto LABEL_1018;
        }
        std::__throw_bad_function_call[abi:nn180100]();
LABEL_1029:
        __break(1u);
        return;
      }
      v73 = 5;
    }
    (*(void (**)(void))(*v72 + 8 * v73))();
    goto LABEL_150;
  }
  md::LayoutContext::zoomAtCentrePoint(*(int8x8_t **)(a2 + 8));
  v51 = (int)v50;
  v52 = *(unsigned __int8 *)(a1 + 368) == (int)v50 && v9 == a3;
  if (v52)
    goto LABEL_302;
  *(_BYTE *)(a1 + 368) = v51;
  v53 = *(std::__shared_weak_count **)(a1 + 344);
  v723 = 0;
  v724 = 0;
  v722 = &v723;
  v710 = v49;
  v711 = v53;
  if (v53)
  {
    v54 = (unint64_t *)&v53->__shared_owners_;
    do
      v55 = __ldxr(v54);
    while (__stxr(v55 + 1, v54));
    *((_QWORD *)&buf + 1) = v53;
    do
      v56 = __ldxr(v54);
    while (__stxr(v56 + 1, v54));
  }
  else
  {
    *((_QWORD *)&buf + 1) = 0;
  }
  *(_QWORD *)&buf = v49;
  v731 = 0uLL;
  LOBYTE(v732) = 0;
  v59 = (*(uint64_t (**)(void *, __int128 *))(*(_QWORD *)v49 + 48))(v49, &v731);
  LOBYTE(v732) = v59;
  if (v53)
  {
    v60 = (unint64_t *)&v53->__shared_owners_;
    do
      v61 = __ldaxr(v60);
    while (__stlxr(v61 - 1, v60));
    if (!v61)
    {
      ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
      std::__shared_weak_count::__release_weak(v53);
    }
    v59 = v732;
  }
  if (!v59)
    goto LABEL_258;
  v62 = *(_QWORD *)(buf + 24);
  if (v51 >= 0x17)
    v63 = 23;
  else
    v63 = v51;
  v64 = *(float **)v62;
  if (!*(_QWORD *)v62)
  {
    v66 = 0;
    goto LABEL_131;
  }
  v65 = *v64;
  v66 = *v64 == 1.0;
  if (!*(_BYTE *)(v62 + 10) || (v65 != 0.0 ? (v67 = v65 == 1.0) : (v67 = 1), v67))
  {
LABEL_131:
    v68 = *(unsigned __int8 *)(v62 + v66 + 11);
    if (v68 != 2)
      goto LABEL_134;
  }
  if ((gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtZAtEnd(*(_QWORD *)(buf + 24), 0x18Au, v63, 0) & 1) != 0)
    goto LABEL_135;
  v68 = 1;
LABEL_134:
  if (!gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtZAtEnd(v62, 0x18Au, v63, v68))
  {
    LODWORD(v76) = 0;
    if (v64)
      goto LABEL_168;
LABEL_154:
    v77 = 0;
    goto LABEL_174;
  }
LABEL_135:
  if (v64)
  {
    v69 = *v64;
    v70 = *v64 == 1.0;
    if (*(_BYTE *)(v62 + 10))
    {
      if (v69 != 0.0 && v69 != 1.0)
        goto LABEL_157;
    }
  }
  else
  {
    v70 = 0;
  }
  v78 = *(unsigned __int8 *)(v62 + v70 + 11);
  v69 = 0.0;
  if (v78 != 2)
  {
    v79 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(v62, 0x18Au, v63, v78, 0);
    goto LABEL_160;
  }
LABEL_157:
  LOBYTE(v710) = 1;
  LOBYTE(v707) = 1;
  v79 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(v62, 0x18Au, v63, 0, &v710);
  v80 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(v62, 0x18Au, v63, 1u, &v707);
  if (v69 >= 1.0)
    v79 = v80;
LABEL_160:
  v81 = v723;
  v82 = &v723;
  if (v723)
  {
    while (1)
    {
      v82 = (uint64_t **)v81;
      if (*((_BYTE *)v81 + 28) == 1)
        break;
      v81 = (uint64_t *)*v81;
      if (!*v82)
        goto LABEL_163;
    }
    v83 = v81;
  }
  else
  {
LABEL_163:
    v83 = operator new(0x28uLL);
    v83[28] = 1;
    *(_QWORD *)v83 = 0;
    *((_QWORD *)v83 + 1) = 0;
    *((_QWORD *)v83 + 2) = v82;
    *v82 = (uint64_t *)v83;
    v84 = (uint64_t *)v83;
    if (*v722)
    {
      v722 = (uint64_t **)*v722;
      v84 = *v82;
    }
    std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(v723, v84);
    ++v724;
  }
  v76 = (v79 * v79);
  *((_QWORD *)v83 + 4) = v76 << 32;
  v62 = *(_QWORD *)(buf + 24);
  v64 = *(float **)v62;
  if (!*(_QWORD *)v62)
    goto LABEL_154;
LABEL_168:
  v85 = *v64;
  v77 = *v64 == 1.0;
  if (!*(_BYTE *)(v62 + 10) || (v85 != 0.0 ? (v86 = v85 == 1.0) : (v86 = 1), v86))
  {
LABEL_174:
    v87 = *(unsigned __int8 *)(v62 + v77 + 11);
    if (v87 != 2)
      goto LABEL_177;
  }
  if ((gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtZAtEnd(v62, 0x18Bu, v63, 0) & 1) != 0)
    goto LABEL_178;
  v87 = 1;
LABEL_177:
  if (!gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtZAtEnd(v62, 0x18Bu, v63, v87))
    goto LABEL_207;
LABEL_178:
  if (v64)
  {
    v88 = *v64;
    v89 = *v64 == 1.0;
    if (*(_BYTE *)(v62 + 10))
    {
      if (v88 != 0.0 && v88 != 1.0)
      {
LABEL_188:
        LOBYTE(v710) = 1;
        LOBYTE(v707) = 1;
        v92 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(v62, 0x18Bu, v63, 0, &v710);
        v93 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(v62, 0x18Bu, v63, 1u, &v707);
        if (v88 < 1.0)
          v93 = v92;
        goto LABEL_192;
      }
    }
  }
  else
  {
    v89 = 0;
  }
  v91 = *(unsigned __int8 *)(v62 + v89 + 11);
  v88 = 0.0;
  if (v91 == 2)
    goto LABEL_188;
  v93 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(v62, 0x18Bu, v63, v91, 0);
LABEL_192:
  v94 = v93 * v93;
  if (v76 <= v94)
    v95 = v94;
  else
    v95 = v76;
  v96 = v723;
  v97 = &v723;
  v98 = &v723;
  if (v723)
  {
    while (1)
    {
      while (1)
      {
        v98 = (uint64_t **)v96;
        v99 = *((_BYTE *)v96 + 28) - 1;
        if (v99 < 2u)
          break;
        v96 = *v98;
        v97 = v98;
        if (!*v98)
          goto LABEL_202;
      }
      if (v99)
        break;
      v96 = v98[1];
      if (!v96)
      {
        v97 = v98 + 1;
        goto LABEL_202;
      }
    }
    v100 = v98;
  }
  else
  {
LABEL_202:
    v100 = operator new(0x28uLL);
    v100[28] = 2;
    *(_QWORD *)v100 = 0;
    *((_QWORD *)v100 + 1) = 0;
    *((_QWORD *)v100 + 2) = v98;
    *v97 = (uint64_t *)v100;
    v101 = (uint64_t *)v100;
    if (*v722)
    {
      v722 = (uint64_t **)*v722;
      v101 = *v97;
    }
    std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(v723, v101);
    ++v724;
  }
  *((_QWORD *)v100 + 4) = v76 | (unint64_t)(v95 << 32);
  v62 = *(_QWORD *)(buf + 24);
  v64 = *(float **)v62;
  LODWORD(v76) = v95;
LABEL_207:
  if (!v64)
  {
    v103 = 0;
    goto LABEL_216;
  }
  v102 = *v64;
  v103 = *v64 == 1.0;
  if (!*(_BYTE *)(v62 + 10) || (v102 != 0.0 ? (v104 = v102 == 1.0) : (v104 = 1), v104))
  {
LABEL_216:
    v105 = *(unsigned __int8 *)(v62 + v103 + 11);
    if (v105 != 2)
      goto LABEL_219;
  }
  if ((gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtZAtEnd(v62, 0x18Cu, v63, 0) & 1) != 0)
    goto LABEL_220;
  v105 = 1;
LABEL_219:
  if (gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtZAtEnd(v62, 0x18Cu, v63, v105))
  {
LABEL_220:
    if (v64)
    {
      v106 = *v64;
      v107 = *v64 == 1.0;
      if (*(_BYTE *)(v62 + 10))
      {
        if (v106 != 0.0 && v106 != 1.0)
          goto LABEL_230;
      }
    }
    else
    {
      v107 = 0;
    }
    v109 = *(unsigned __int8 *)(v62 + v107 + 11);
    v106 = 0.0;
    if (v109 != 2)
    {
      v111 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(v62, 0x18Cu, v63, v109, 0);
LABEL_234:
      v112 = v111 * v111;
      if (v76 <= v112)
        v113 = v112;
      else
        v113 = v76;
      v114 = v723;
      v115 = &v723;
      v116 = &v723;
      if (v723)
      {
        while (1)
        {
          while (1)
          {
            v116 = (uint64_t **)v114;
            v117 = *((unsigned __int8 *)v114 + 28) - 1;
            if (v117 < 3)
              break;
            v114 = *v116;
            v115 = v116;
            if (!*v116)
              goto LABEL_244;
          }
          if (v117 == 2)
            break;
          v114 = v116[1];
          if (!v114)
          {
            v115 = v116 + 1;
            goto LABEL_244;
          }
        }
        v118 = v116;
      }
      else
      {
LABEL_244:
        v118 = operator new(0x28uLL);
        v118[28] = 3;
        *(_QWORD *)v118 = 0;
        *((_QWORD *)v118 + 1) = 0;
        *((_QWORD *)v118 + 2) = v116;
        *v115 = (uint64_t *)v118;
        v119 = (uint64_t *)v118;
        if (*v722)
        {
          v722 = (uint64_t **)*v722;
          v119 = *v115;
        }
        std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(v723, v119);
        ++v724;
      }
      *((_QWORD *)v118 + 4) = v76 | (unint64_t)(v113 << 32);
      LODWORD(v76) = v113;
      goto LABEL_249;
    }
LABEL_230:
    LOBYTE(v710) = 1;
    LOBYTE(v707) = 1;
    v110 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(v62, 0x18Cu, v63, 0, &v710);
    v111 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(v62, 0x18Cu, v63, 1u, &v707);
    if (v106 < 1.0)
      v111 = v110;
    goto LABEL_234;
  }
LABEL_249:
  v120 = v723;
  v121 = &v723;
  v122 = &v723;
  if (v723)
  {
    while (1)
    {
      v122 = (uint64_t **)v120;
      if (!*((_BYTE *)v120 + 28))
        break;
      v120 = (uint64_t *)v120[1];
      if (!v120)
      {
        v121 = v122 + 1;
        goto LABEL_253;
      }
    }
    v123 = v120;
  }
  else
  {
LABEL_253:
    v123 = operator new(0x28uLL);
    v123[28] = 0;
    *(_QWORD *)v123 = 0;
    *((_QWORD *)v123 + 1) = 0;
    *((_QWORD *)v123 + 2) = v122;
    *v121 = (uint64_t *)v123;
    if (*v722)
      v722 = (uint64_t **)*v722;
    std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(v723, (uint64_t *)v123);
    ++v724;
  }
  *((_QWORD *)v123 + 4) = v76 | 0xFFFFFFFF00000000;
LABEL_258:
  gss::QueryableLocker<gss::PropertyID>::~QueryableLocker((uint64_t)&buf);
  if (v724 != *(_QWORD *)(a1 + 288))
    goto LABEL_276;
  v124 = v722;
  if (v722 == &v723)
  {
LABEL_301:
    std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(v723);
LABEL_302:
    v147 = a5;
    v148 = *(_QWORD *)(a1 + 152);
    if ((v689 | a5) != 1)
    {
      md::SceneQueryLogic::updatePendingRegistries(a1, (uint64_t **)(v148 + 432));
      goto LABEL_329;
    }
    md::SceneQueryLogic::updatePendingRegistries(a1, (uint64_t **)(v148 + 384));
LABEL_307:
    if (!v147)
      goto LABEL_328;
    if (GEOGetVectorKitSceneQueryLogicLog(void)::onceToken != -1)
      dispatch_once(&GEOGetVectorKitSceneQueryLogicLog(void)::onceToken, &__block_literal_global_17866);
    v149 = GEOGetVectorKitSceneQueryLogicLog(void)::log;
    if (os_log_type_enabled((os_log_t)GEOGetVectorKitSceneQueryLogicLog(void)::log, OS_LOG_TYPE_DEBUG))
    {
      LOWORD(buf) = 0;
      _os_log_impl(&dword_19F029000, v149, OS_LOG_TYPE_DEBUG, "Route didChange", (uint8_t *)&buf, 2u);
    }
    v726[0] = &off_1E42CC9F8;
    v726[1] = a2;
    v728[0] = &off_1E42CC9B0;
    v728[1] = a2;
    v727 = v726;
    *((_QWORD *)&v731 + 1) = &buf;
    v729 = v728;
    *(_QWORD *)&buf = &off_1E42CC9F8;
    *((_QWORD *)&buf + 1) = a2;
    std::__function::__func<md::SceneQueryLogic::handleNavigationFlex(md::LayoutContext const&,md::CameraContext const&,md::NavigationContext const&,md::StyleLogicContext const&,std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>> const&,BOOL,md::SceneQueryContext &)::$_0,std::allocator<md::SceneQueryLogic::handleNavigationFlex(md::LayoutContext const&,md::CameraContext const&,md::NavigationContext const&,md::StyleLogicContext const&,std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>> const&,BOOL,md::SceneQueryContext &)::$_0>,void ()(void)>::operator()((uint64_t)v728);
    v150 = v727;
    if (v727 == v726)
    {
      v151 = 4;
      v150 = v726;
    }
    else
    {
      if (!v727)
        goto LABEL_317;
      v151 = 5;
    }
    (*(void (**)(void))(*v150 + 8 * v151))();
LABEL_317:
    v152 = v729;
    if (v729 == v728)
    {
      v153 = 4;
      v152 = v728;
    }
    else
    {
      if (!v729)
      {
LABEL_322:
        md::SceneQueryLogic::clearNavigationFlexState((md::SceneQueryLogic *)a1);
        if (!*((_QWORD *)&v731 + 1))
        {
          std::__throw_bad_function_call[abi:nn180100]();
          goto LABEL_1029;
        }
        (*(void (**)(_QWORD))(**((_QWORD **)&v731 + 1) + 48))(*((_QWORD *)&v731 + 1));
        v154 = (__int128 *)*((_QWORD *)&v731 + 1);
        if (*((__int128 **)&v731 + 1) == &buf)
        {
          v155 = 4;
          v154 = &buf;
          goto LABEL_327;
        }
        if (*((_QWORD *)&v731 + 1))
        {
          v155 = 5;
LABEL_327:
          (*(void (**)(void))(*(_QWORD *)v154 + 8 * v155))();
        }
LABEL_328:
        md::SceneQueryLogic::prepareNavigationFlexSegmentsForRoute((md::SceneQueryLogic *)a1, *(GEOComposedRoute **)(a1 + 304));
        goto LABEL_329;
      }
      v153 = 5;
    }
    (*(void (**)(void))(*v152 + 8 * v153))();
    goto LABEL_322;
  }
  v125 = *(_QWORD **)(a1 + 272);
  while (*((unsigned __int8 *)v124 + 28) == *((unsigned __int8 *)v125 + 28)
       && *((_DWORD *)v124 + 8) == *((_DWORD *)v125 + 8)
       && *((_DWORD *)v124 + 9) == *((_DWORD *)v125 + 9))
  {
    v126 = v124[1];
    v127 = v124;
    if (v126)
    {
      do
      {
        v124 = (uint64_t **)v126;
        v126 = (uint64_t *)*v126;
      }
      while (v126);
    }
    else
    {
      do
      {
        v124 = (uint64_t **)v127[2];
        v52 = *v124 == (uint64_t *)v127;
        v127 = v124;
      }
      while (!v52);
    }
    v128 = (_QWORD *)v125[1];
    if (v128)
    {
      do
      {
        v129 = v128;
        v128 = (_QWORD *)*v128;
      }
      while (v128);
    }
    else
    {
      do
      {
        v129 = (_QWORD *)v125[2];
        v52 = *v129 == (_QWORD)v125;
        v125 = v129;
      }
      while (!v52);
    }
    v125 = v129;
    if (v124 == &v723)
      goto LABEL_301;
  }
LABEL_276:
  v130 = (_QWORD *)(a1 + 280);
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(_QWORD **)(a1 + 280));
  v131 = v723;
  *(_QWORD *)(a1 + 272) = v722;
  *(_QWORD *)(a1 + 280) = v131;
  v132 = v724;
  *(_QWORD *)(a1 + 288) = v724;
  if (v132)
  {
    v131[2] = (uint64_t)v130;
    v722 = &v723;
    v723 = 0;
    v724 = 0;
    v133 = *(_QWORD **)(a1 + 272);
    v134 = *(_BYTE **)(a1 + 248);
    *(_QWORD *)(a1 + 256) = v134;
    if (v133 == v130)
    {
      v131 = 0;
    }
    else
    {
      do
      {
        v135 = *(_QWORD *)(a1 + 264);
        if ((unint64_t)v134 >= v135)
        {
          v136 = *(_BYTE **)(a1 + 248);
          v137 = 0xAAAAAAAAAAAAAAABLL * ((v134 - v136) >> 2) + 1;
          if (v137 > 0x1555555555555555)
            abort();
          v138 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v135 - (_QWORD)v136) >> 2);
          if (2 * v138 > v137)
            v137 = 2 * v138;
          if (v138 >= 0xAAAAAAAAAAAAAAALL)
            v139 = 0x1555555555555555;
          else
            v139 = v137;
          if (v139 > 0x1555555555555555)
LABEL_1020:
            std::__throw_bad_array_new_length[abi:nn180100]();
          v140 = (char *)operator new(12 * v139);
          v141 = &v140[4 * ((v134 - v136) >> 2)];
          *v141 = *((_BYTE *)v133 + 28);
          *(_QWORD *)(v141 + 4) = v133[4];
          for (i = v141; v134 != v136; *((_DWORD *)i + 2) = v144)
          {
            v143 = *(_QWORD *)(v134 - 12);
            v134 -= 12;
            v144 = *((_DWORD *)v134 + 2);
            *(_QWORD *)(i - 12) = v143;
            i -= 12;
          }
          v134 = v141 + 12;
          *(_QWORD *)(a1 + 248) = i;
          *(_QWORD *)(a1 + 256) = v141 + 12;
          *(_QWORD *)(a1 + 264) = &v140[12 * v139];
          if (v136)
            operator delete(v136);
        }
        else
        {
          *v134 = *((_BYTE *)v133 + 28);
          *(_QWORD *)(v134 + 4) = v133[4];
          v134 += 12;
        }
        *(_QWORD *)(a1 + 256) = v134;
        v145 = (_QWORD *)v133[1];
        if (v145)
        {
          do
          {
            v146 = v145;
            v145 = (_QWORD *)*v145;
          }
          while (v145);
        }
        else
        {
          do
          {
            v146 = (_QWORD *)v133[2];
            v52 = *v146 == (_QWORD)v133;
            v133 = v146;
          }
          while (!v52);
        }
        v133 = v146;
      }
      while (v146 != v130);
      v131 = v723;
    }
  }
  else
  {
    *(_QWORD *)(a1 + 272) = v130;
    *(_QWORD *)(a1 + 256) = *(_QWORD *)(a1 + 248);
  }
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(v131);
  std::__hash_table<md::SceneQueryEvent,std::hash<md::SceneQueryEvent>,std::equal_to<md::SceneQueryEvent>,std::allocator<md::SceneQueryEvent>>::__emplace_unique_key_args<md::SceneQueryEvent,md::SceneQueryEvent&>((float *)(a1 + 208), 0, 0);
  v147 = a5;
  md::SceneQueryLogic::updatePendingRegistries(a1, (uint64_t **)(*(_QWORD *)(a1 + 152) + 384));
  if (v689 | a5)
    goto LABEL_307;
LABEL_329:
  v718[0] = &off_1E42CCA88;
  v718[1] = a2;
  v720[0] = &off_1E42CCA40;
  v720[1] = a2;
  v719 = v718;
  v725 = &v722;
  v721 = v720;
  v722 = (uint64_t **)&off_1E42CCA88;
  v723 = (uint64_t *)a2;
  std::__function::__func<md::SceneQueryLogic::handleNavigationFlex(md::LayoutContext const&,md::CameraContext const&,md::NavigationContext const&,md::StyleLogicContext const&,std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>> const&,BOOL,md::SceneQueryContext &)::$_2,std::allocator<md::SceneQueryLogic::handleNavigationFlex(md::LayoutContext const&,md::CameraContext const&,md::NavigationContext const&,md::StyleLogicContext const&,std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>> const&,BOOL,md::SceneQueryContext &)::$_2>,void ()(void)>::operator()((uint64_t)v720);
  v156 = v719;
  if (v719 == v718)
  {
    v157 = 4;
    v156 = v718;
  }
  else
  {
    if (!v719)
      goto LABEL_334;
    v157 = 5;
  }
  (*(void (**)(void))(*v156 + 8 * v157))();
LABEL_334:
  v158 = v721;
  if (v721 == v720)
  {
    v159 = 4;
    v158 = v720;
    goto LABEL_338;
  }
  if (v721)
  {
    v159 = 5;
LABEL_338:
    (*(void (**)(void))(*v158 + 8 * v159))();
  }
  if (!*(_QWORD *)(a1 + 304))
    goto LABEL_1013;
  v160 = *(_QWORD *)(a1 + 152);
  v161 = *(uint64_t **)(v160 + 384);
  v162 = *(uint64_t **)(v160 + 392);
  if (v161 != v162)
  {
    v163 = 0;
    v164 = 0;
    v165 = 0;
    while (1)
    {
      v167 = *v161;
      v168 = gdc::Registry::storage<md::components::DidResolvePendingMaterial>(*v161);
      if (*(_QWORD *)(v168 + 88) != *(_QWORD *)(v168 + 80))
      {
        if (v164 >= v165)
        {
          v169 = v165;
          v170 = (char *)v164 - v163;
          v171 = (uint64_t *)v163;
          v172 = ((char *)v164 - v163) >> 3;
          v173 = v172 + 1;
          __pa = v171;
          if ((unint64_t)(v172 + 1) >> 61)
            abort();
          v174 = (char *)v169 - (char *)v171;
          v175 = ((char *)v169 - (char *)v171) >> 2;
          if (v175 > v173)
            v173 = v175;
          if (v174 >= 0x7FFFFFFFFFFFFFF8)
            v176 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v176 = v173;
          if (v176)
          {
            if (v176 >> 61)
              goto LABEL_1020;
            v177 = operator new(8 * v176);
          }
          else
          {
            v177 = 0;
          }
          v178 = (uint64_t *)&v177[8 * v172];
          *v178 = v167;
          v166 = v178 + 1;
          v179 = __pa;
          if (v164 != __pa)
          {
            v180 = (char *)(v164 - 1) - (char *)__pa;
            if (v180 < 0x58 || (unint64_t)((char *)v164 - &v177[v170]) < 0x20)
            {
              v181 = v164;
              v179 = __pa;
              goto LABEL_361;
            }
            v183 = (v180 >> 3) + 1;
            v181 = &v164[-(v183 & 0x3FFFFFFFFFFFFFFCLL)];
            v184 = &v177[8 * v172 - 16];
            v185 = v164 - 2;
            v186 = v183 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v187 = *(_OWORD *)v185;
              *(v184 - 1) = *((_OWORD *)v185 - 1);
              *v184 = v187;
              v184 -= 2;
              v185 -= 4;
              v186 -= 4;
            }
            while (v186);
            v178 -= v183 & 0x3FFFFFFFFFFFFFFCLL;
            v179 = __pa;
            if (v183 != (v183 & 0x3FFFFFFFFFFFFFFCLL))
            {
              do
              {
LABEL_361:
                v182 = *--v181;
                *--v178 = v182;
              }
              while (v181 != v179);
            }
          }
          v165 = (uint64_t *)&v177[8 * v176];
          if (v179)
            operator delete(v179);
          v163 = (char *)v178;
          goto LABEL_344;
        }
        *v164++ = v167;
      }
      v166 = v164;
LABEL_344:
      ++v161;
      v164 = v166;
      if (v161 == v162)
        goto LABEL_370;
    }
  }
  v163 = 0;
  v166 = 0;
  v165 = 0;
LABEL_370:
  if (*(_QWORD *)(a1 + 248) != *(_QWORD *)(a1 + 256))
  {
    v694 = v166;
    __pb = v163;
    v188 = *(_QWORD *)(a1 + 280);
    v683 = v165;
    if (v188)
    {
      while (1)
      {
        v189 = v188;
        if (!*(_BYTE *)(v188 + 28))
          break;
        v188 = *(_QWORD *)(v188 + 8);
        if (!v188)
        {
          v190 = (uint64_t **)(v189 + 8);
          goto LABEL_376;
        }
      }
      v191 = (_BYTE *)v188;
    }
    else
    {
      v190 = (uint64_t **)(a1 + 280);
      v189 = a1 + 280;
LABEL_376:
      v191 = operator new(0x28uLL);
      v191[28] = 0;
      *(_QWORD *)v191 = 0;
      *((_QWORD *)v191 + 1) = 0;
      *((_QWORD *)v191 + 2) = v189;
      *v190 = (uint64_t *)v191;
      v192 = **(_QWORD **)(a1 + 272);
      v193 = (uint64_t *)v191;
      if (v192)
      {
        *(_QWORD *)(a1 + 272) = v192;
        v193 = *v190;
      }
      std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 280), v193);
      ++*(_QWORD *)(a1 + 288);
    }
    v710 = 0;
    v711 = 0;
    v712 = 0;
    v707 = 0;
    v708 = 0;
    v709 = 0;
    v704 = 0;
    v705 = 0;
    v706 = 0;
    if (v163 != (char *)v694)
    {
      v690 = v191;
      v194 = 0;
      v195 = v163;
      do
      {
        v197 = *(_QWORD **)v195;
        ++*(_DWORD *)(a1 + 544);
        v198 = (std::__shared_weak_count *)v710;
        v199 = v711;
        if (v711 != v710)
        {
          do
          {
            shared_weak_owners = (void *)v199[-1].__shared_weak_owners_;
            v199 = (std::__shared_weak_count *)((char *)v199 - 8);

          }
          while (v199 != v198);
          v194 = v707;
          v163 = __pb;
        }
        v711 = v198;
        v705 = v704;
        v708 = v194;
        v703 = 0;
        v201 = (int8x8_t)v197[1];
        if (!*(_QWORD *)&v201)
        {
          v196 = (char *)v694;
          goto LABEL_383;
        }
        v202 = (uint8x8_t)vcnt_s8(v201);
        v202.i16[0] = vaddlv_u8(v202);
        v196 = (char *)v694;
        if (v202.u32[0] > 1uLL)
        {
          v203 = 0x64A448A5CD5D38DBLL;
          if (*(_QWORD *)&v201 <= 0x64A448A5CD5D38DBuLL)
            v203 = 0x64A448A5CD5D38DBuLL % *(_QWORD *)&v201;
        }
        else
        {
          v203 = (*(_QWORD *)&v201 - 1) & 0x64A448A5CD5D38DBLL;
        }
        v204 = *(_QWORD **)(*v197 + 8 * v203);
        if (v204)
        {
          v205 = (_QWORD *)*v204;
          if (v205)
          {
            if (v202.u32[0] < 2uLL)
            {
              v206 = *(_QWORD *)&v201 - 1;
              while (1)
              {
                v208 = v205[1];
                if (v208 == 0x64A448A5CD5D38DBLL)
                {
                  if (v205[2] == 0x64A448A5CD5D38DBLL)
                    goto LABEL_408;
                }
                else if ((v208 & v206) != v203)
                {
                  goto LABEL_383;
                }
                v205 = (_QWORD *)*v205;
                if (!v205)
                  goto LABEL_383;
              }
            }
            do
            {
              v207 = v205[1];
              if (v207 == 0x64A448A5CD5D38DBLL)
              {
                if (v205[2] == 0x64A448A5CD5D38DBLL)
                {
LABEL_408:
                  v209 = v205[5];
                  if (*(_QWORD *)(v209 + 8) != 0x64A448A5CD5D38DBLL)
                    break;
                  v703 = *(double **)(v209 + 32);
                  if (!v703)
                    break;
                  v210 = *(uint64_t ***)(a1 + 184);
                  v211 = v690;
                  v684 = v197;
                  if (!v210)
                  {
LABEL_411:
                    v212 = (_QWORD *)gdc::Registry::storage<md::components::MeshInstance>((uint64_t)v197);
                    v213 = (_QWORD *)gdc::Registry::storage<md::components::ClientState>((uint64_t)v197);
                    v685 = (_QWORD *)gdc::Registry::storage<md::components::SupportsFlexing>((uint64_t)v197);
                    v214 = gdc::Registry::storage<md::components::DidResolvePendingMaterial>((uint64_t)v197);
                    v215 = v685 + 4;
                    v216 = v212[7];
                    v217 = v212[8];
                    if (v213[8] - v213[7] >= (unint64_t)(v217 - v216))
                      v218 = v212 + 4;
                    else
                      v218 = v213 + 4;
                    if (v685[8] - v685[7] < v218[4] - v218[3])
                      v218 = v685 + 4;
                    v681 = v214 + 32;
                    v682 = (_QWORD *)v214;
                    if (*(_QWORD *)(v214 + 64) - *(_QWORD *)(v214 + 56) < v218[4] - v218[3])
                      v218 = (_QWORD *)(v214 + 32);
                    if (v212 + 4 == v218)
                    {
                      v679 = v218;
                      *(_QWORD *)&buf = a1;
                      *((_QWORD *)&buf + 1) = &v703;
                      *(_QWORD *)&v731 = &v710;
                      *((_QWORD *)&v731 + 1) = &v707;
                      *(_QWORD *)&v732 = &v704;
                      if (v216 != v217)
                      {
                        v219 = v212[10];
                        do
                        {
                          v261 = *(unsigned int *)(v216 + 4);
                          v262 = v261 >> 7;
                          v263 = v213[4];
                          v264 = (v213[5] - v263) >> 3;
                          if (v261 >> 7 < v264)
                          {
                            v265 = *(_QWORD *)(v263 + 8 * v262);
                            if (v265)
                            {
                              v266 = v261 & 0x7F;
                              v267 = *(unsigned __int16 *)(v265 + 2 * v266);
                              v269 = v213[7];
                              v268 = v213[8];
                              v270 = (v268 - v269) >> 3;
                              if (v270 > v267)
                              {
                                v271 = v269 + 8 * v267;
                                if (v271 != v268 && *(_DWORD *)(v271 + 4) == (_DWORD)v261)
                                {
                                  v273 = v685[4];
                                  if (v262 < (v685[5] - v273) >> 3)
                                  {
                                    v274 = *(_QWORD *)(v273 + 8 * v262);
                                    if (v274)
                                    {
                                      v275 = *(unsigned __int16 *)(v274 + 2 * v266);
                                      v276 = v685[7];
                                      v277 = v685[8];
                                      if (v275 < (v277 - v276) >> 3)
                                      {
                                        v278 = v276 + 8 * v275;
                                        if (v278 != v277 && *(_DWORD *)(v278 + 4) == (_DWORD)v261)
                                        {
                                          v280 = v682[4];
                                          if (v262 < (v682[5] - v280) >> 3)
                                          {
                                            v281 = *(_QWORD *)(v280 + 8 * v262);
                                            if (v281)
                                            {
                                              v282 = *(unsigned __int16 *)(v281 + 2 * v266);
                                              v284 = v682[7];
                                              v283 = v682[8];
                                              if (v282 < (v283 - v284) >> 3)
                                              {
                                                v285 = v284 + 8 * v282;
                                                if (v285 != v283 && *(_DWORD *)(v285 + 4) == (_DWORD)v261)
                                                {
                                                  v287 = *(_QWORD *)v216;
                                                  v288 = *(_QWORD *)v216 >> 39;
                                                  if (v288 < v264
                                                    && (v289 = *(_QWORD *)(v263 + 8 * v288)) != 0
                                                    && (v290 = *(unsigned __int16 *)(v289 + 2 * (HIDWORD(v287) & 0x7F)),
                                                        v270 > v290)
                                                    && (v291 = v269 + 8 * v290, v291 != v268)
                                                    && *(_DWORD *)(v291 + 4) == HIDWORD(v287))
                                                  {
                                                    v260 = (gss::Allocator **)(v213[10] + 16 * v290);
                                                  }
                                                  else
                                                  {
                                                    v260 = (gss::Allocator **)v213[11];
                                                  }
                                                  md::SceneQueryLogic::categorizeEntitiesByFlexZone<md::components::DidResolvePendingMaterial>(std::vector<gdc::Registry *> const&)::{lambda(gdc::Entity,md::components::MeshInstance &,md::components::ClientState &)#1}::operator()((uint64_t)&buf, v287, v219, v260);
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                          v219 += 112;
                          v216 += 8;
                        }
                        while (v216 != v217);
                      }
                      v214 = (uint64_t)v682;
                      v218 = v679;
                      v215 = v685 + 4;
                    }
                    if (v213 + 4 == v218)
                    {
                      v680 = v215;
                      v292 = v218;
                      *(_QWORD *)&buf = a1;
                      *((_QWORD *)&buf + 1) = &v703;
                      *(_QWORD *)&v731 = &v710;
                      *((_QWORD *)&v731 + 1) = &v707;
                      *(_QWORD *)&v732 = &v704;
                      v293 = v213[7];
                      v294 = v213[8];
                      if (v293 != v294)
                      {
                        v295 = (gss::Allocator **)v213[10];
                        do
                        {
                          v297 = *(unsigned int *)(v293 + 4);
                          v298 = v297 >> 7;
                          v299 = v212[4];
                          v300 = (v212[5] - v299) >> 3;
                          if (v297 >> 7 < v300)
                          {
                            v301 = *(_QWORD *)(v299 + 8 * v298);
                            if (v301)
                            {
                              v302 = v297 & 0x7F;
                              v303 = *(unsigned __int16 *)(v301 + 2 * v302);
                              v305 = v212[7];
                              v304 = v212[8];
                              v306 = (v304 - v305) >> 3;
                              if (v306 > v303)
                              {
                                v307 = v305 + 8 * v303;
                                if (v307 != v304 && *(_DWORD *)(v307 + 4) == (_DWORD)v297)
                                {
                                  v309 = v685[4];
                                  if (v298 < (v685[5] - v309) >> 3)
                                  {
                                    v310 = *(_QWORD *)(v309 + 8 * v298);
                                    if (v310)
                                    {
                                      v311 = *(unsigned __int16 *)(v310 + 2 * v302);
                                      v312 = v685[7];
                                      v313 = v685[8];
                                      if (v311 < (v313 - v312) >> 3)
                                      {
                                        v314 = v312 + 8 * v311;
                                        if (v314 != v313 && *(_DWORD *)(v314 + 4) == (_DWORD)v297)
                                        {
                                          v316 = v682[4];
                                          if (v298 < (v682[5] - v316) >> 3)
                                          {
                                            v317 = *(_QWORD *)(v316 + 8 * v298);
                                            if (v317)
                                            {
                                              v318 = *(unsigned __int16 *)(v317 + 2 * v302);
                                              v320 = v682[7];
                                              v319 = v682[8];
                                              if (v318 < (v319 - v320) >> 3)
                                              {
                                                v321 = v320 + 8 * v318;
                                                if (v321 != v319 && *(_DWORD *)(v321 + 4) == (_DWORD)v297)
                                                {
                                                  v323 = *(_QWORD *)v293;
                                                  v324 = *(_QWORD *)v293 >> 39;
                                                  if (v324 < v300
                                                    && (v325 = *(_QWORD *)(v299 + 8 * v324)) != 0
                                                    && (v326 = *(unsigned __int16 *)(v325 + 2 * (HIDWORD(v323) & 0x7F)),
                                                        v306 > v326)
                                                    && (v327 = v305 + 8 * v326, v327 != v304)
                                                    && *(_DWORD *)(v327 + 4) == HIDWORD(v323))
                                                  {
                                                    v296 = v212[10] + 112 * v326;
                                                  }
                                                  else
                                                  {
                                                    v296 = v212[11];
                                                  }
                                                  md::SceneQueryLogic::categorizeEntitiesByFlexZone<md::components::DidResolvePendingMaterial>(std::vector<gdc::Registry *> const&)::{lambda(gdc::Entity,md::components::MeshInstance &,md::components::ClientState &)#1}::operator()((uint64_t)&buf, v323, v296, v295);
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                          v295 += 2;
                          v293 += 8;
                        }
                        while (v293 != v294);
                      }
                      v214 = (uint64_t)v682;
                      v218 = v292;
                      v215 = v680;
                    }
                    if (v215 == v218)
                    {
                      v328 = v218;
                      *(_QWORD *)&buf = a1;
                      *((_QWORD *)&buf + 1) = &v703;
                      *(_QWORD *)&v731 = &v710;
                      *((_QWORD *)&v731 + 1) = &v707;
                      *(_QWORD *)&v732 = &v704;
                      v329 = v685[7];
                      v330 = v685[8];
                      while (v329 != v330)
                      {
                        v332 = *(unsigned int *)(v329 + 4);
                        v333 = v332 >> 7;
                        v334 = v212[4];
                        v335 = (v212[5] - v334) >> 3;
                        if (v332 >> 7 < v335)
                        {
                          v336 = *(_QWORD *)(v334 + 8 * v333);
                          if (v336)
                          {
                            v337 = v332 & 0x7F;
                            v338 = *(unsigned __int16 *)(v336 + 2 * v337);
                            v340 = v212[7];
                            v339 = v212[8];
                            v341 = (v339 - v340) >> 3;
                            if (v341 > v338)
                            {
                              v342 = v340 + 8 * v338;
                              if (v342 != v339 && *(_DWORD *)(v342 + 4) == (_DWORD)v332)
                              {
                                v344 = v213[4];
                                v345 = (v213[5] - v344) >> 3;
                                if (v333 < v345)
                                {
                                  v346 = *(_QWORD *)(v344 + 8 * v333);
                                  if (v346)
                                  {
                                    v347 = *(unsigned __int16 *)(v346 + 2 * v337);
                                    v349 = v213[7];
                                    v348 = v213[8];
                                    v350 = (v348 - v349) >> 3;
                                    if (v350 > v347)
                                    {
                                      v351 = v349 + 8 * v347;
                                      if (v351 != v348 && *(_DWORD *)(v351 + 4) == (_DWORD)v332)
                                      {
                                        v353 = v682[4];
                                        if (v333 < (v682[5] - v353) >> 3)
                                        {
                                          v354 = *(_QWORD *)(v353 + 8 * v333);
                                          if (v354)
                                          {
                                            v355 = *(unsigned __int16 *)(v354 + 2 * v337);
                                            v357 = v682[7];
                                            v356 = v682[8];
                                            if (v355 < (v356 - v357) >> 3)
                                            {
                                              v358 = v357 + 8 * v355;
                                              if (v358 != v356 && *(_DWORD *)(v358 + 4) == (_DWORD)v332)
                                              {
                                                v360 = *(_QWORD *)v329;
                                                v361 = HIDWORD(*(_QWORD *)v329);
                                                v362 = *(_QWORD *)v329 >> 39;
                                                if (v362 < v335
                                                  && (v363 = *(_QWORD *)(v334 + 8 * v362)) != 0
                                                  && (v364 = *(unsigned __int16 *)(v363 + 2 * (HIDWORD(v360) & 0x7F)),
                                                      v341 > v364)
                                                  && (v365 = v340 + 8 * v364, v365 != v339)
                                                  && *(_DWORD *)(v365 + 4) == (_DWORD)v361)
                                                {
                                                  v366 = v212[10] + 112 * v364;
                                                }
                                                else
                                                {
                                                  v366 = v212[11];
                                                }
                                                if (v362 < v345
                                                  && (v367 = *(_QWORD *)(v344 + 8 * v362)) != 0
                                                  && (v368 = *(unsigned __int16 *)(v367 + 2 * (HIDWORD(v360) & 0x7F)),
                                                      v350 > v368)
                                                  && (v369 = v349 + 8 * v368, v369 != v348)
                                                  && *(_DWORD *)(v369 + 4) == (_DWORD)v361)
                                                {
                                                  v331 = (gss::Allocator **)(v213[10] + 16 * v368);
                                                }
                                                else
                                                {
                                                  v331 = (gss::Allocator **)v213[11];
                                                }
                                                md::SceneQueryLogic::categorizeEntitiesByFlexZone<md::components::DidResolvePendingMaterial>(std::vector<gdc::Registry *> const&)::{lambda(gdc::Entity,md::components::MeshInstance &,md::components::ClientState &)#1}::operator()((uint64_t)&buf, v360, v366, v331);
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                        v329 += 8;
                      }
                      v214 = (uint64_t)v682;
                      v218 = v328;
                    }
                    if ((_QWORD *)v681 == v218)
                    {
                      *(_QWORD *)&buf = a1;
                      *((_QWORD *)&buf + 1) = &v703;
                      *(_QWORD *)&v731 = &v710;
                      *((_QWORD *)&v731 + 1) = &v707;
                      *(_QWORD *)&v732 = &v704;
                      v399 = *(_QWORD *)(v214 + 56);
                      v398 = *(_QWORD *)(v214 + 64);
                      while (v399 != v398)
                      {
                        v401 = *(unsigned int *)(v399 + 4);
                        v402 = v401 >> 7;
                        v403 = v212[4];
                        v404 = (v212[5] - v403) >> 3;
                        if (v401 >> 7 < v404)
                        {
                          v405 = *(_QWORD *)(v403 + 8 * v402);
                          if (v405)
                          {
                            v406 = v401 & 0x7F;
                            v407 = *(unsigned __int16 *)(v405 + 2 * v406);
                            v409 = v212[7];
                            v408 = v212[8];
                            v410 = (v408 - v409) >> 3;
                            if (v410 > v407)
                            {
                              v411 = v409 + 8 * v407;
                              if (v411 != v408 && *(_DWORD *)(v411 + 4) == (_DWORD)v401)
                              {
                                v413 = v213[4];
                                v414 = (v213[5] - v413) >> 3;
                                if (v402 < v414)
                                {
                                  v415 = *(_QWORD *)(v413 + 8 * v402);
                                  if (v415)
                                  {
                                    v416 = *(unsigned __int16 *)(v415 + 2 * v406);
                                    v418 = v213[7];
                                    v417 = v213[8];
                                    v419 = (v417 - v418) >> 3;
                                    if (v419 > v416)
                                    {
                                      v420 = v418 + 8 * v416;
                                      if (v420 != v417 && *(_DWORD *)(v420 + 4) == (_DWORD)v401)
                                      {
                                        v422 = v685[4];
                                        if (v402 < (v685[5] - v422) >> 3)
                                        {
                                          v423 = *(_QWORD *)(v422 + 8 * v402);
                                          if (v423)
                                          {
                                            v424 = *(unsigned __int16 *)(v423 + 2 * v406);
                                            v426 = v685[7];
                                            v425 = v685[8];
                                            if (v424 < (v425 - v426) >> 3)
                                            {
                                              v427 = v426 + 8 * v424;
                                              if (v427 != v425 && *(_DWORD *)(v427 + 4) == (_DWORD)v401)
                                              {
                                                v429 = *(_QWORD *)v399;
                                                v430 = HIDWORD(*(_QWORD *)v399);
                                                v431 = *(_QWORD *)v399 >> 39;
                                                if (v431 < v404
                                                  && (v432 = *(_QWORD *)(v403 + 8 * v431)) != 0
                                                  && (v433 = *(unsigned __int16 *)(v432 + 2 * (HIDWORD(v429) & 0x7F)),
                                                      v410 > v433)
                                                  && (v434 = v409 + 8 * v433, v434 != v408)
                                                  && *(_DWORD *)(v434 + 4) == (_DWORD)v430)
                                                {
                                                  v435 = v212[10] + 112 * v433;
                                                }
                                                else
                                                {
                                                  v435 = v212[11];
                                                }
                                                if (v431 < v414
                                                  && (v436 = *(_QWORD *)(v413 + 8 * v431)) != 0
                                                  && (v437 = *(unsigned __int16 *)(v436 + 2 * (HIDWORD(v429) & 0x7F)),
                                                      v419 > v437)
                                                  && (v438 = v418 + 8 * v437, v438 != v417)
                                                  && *(_DWORD *)(v438 + 4) == (_DWORD)v430)
                                                {
                                                  v400 = (gss::Allocator **)(v213[10] + 16 * v437);
                                                }
                                                else
                                                {
                                                  v400 = (gss::Allocator **)v213[11];
                                                }
                                                md::SceneQueryLogic::categorizeEntitiesByFlexZone<md::components::DidResolvePendingMaterial>(std::vector<gdc::Registry *> const&)::{lambda(gdc::Entity,md::components::MeshInstance &,md::components::ClientState &)#1}::operator()((uint64_t)&buf, v429, v435, v400);
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                        v399 += 8;
                      }
                    }
                    v194 = v707;
                    v370 = v708;
                    if (v707 == v708)
                    {
                      v163 = __pb;
                    }
                    else
                    {
                      v371 = v197 + 15;
                      do
                      {
                        v372 = *v194;
                        v713 = 0x6F78D65E6A19A54BLL;
                        v373 = (int8x8_t)v197[16];
                        if (v373)
                        {
                          v374 = (uint8x8_t)vcnt_s8(v373);
                          v374.i16[0] = vaddlv_u8(v374);
                          if (v374.u32[0] > 1uLL)
                          {
                            v375 = 0x6F78D65E6A19A54BLL;
                            if (*(_QWORD *)&v373 <= 0x6F78D65E6A19A54BuLL)
                              v375 = 0x6F78D65E6A19A54BuLL % *(_QWORD *)&v373;
                          }
                          else
                          {
                            v375 = (*(_QWORD *)&v373 - 1) & 0x6F78D65E6A19A54BLL;
                          }
                          v376 = *(_QWORD **)(*v371 + 8 * v375);
                          if (v376)
                          {
                            v377 = (_QWORD *)*v376;
                            if (v377)
                            {
                              if (v374.u32[0] < 2uLL)
                              {
                                v378 = *(_QWORD *)&v373 - 1;
                                while (1)
                                {
                                  v380 = v377[1];
                                  if (v380 == 0x6F78D65E6A19A54BLL)
                                  {
                                    if (v377[2] == 0x6F78D65E6A19A54BLL)
                                      goto LABEL_610;
                                  }
                                  else if ((v380 & v378) != v375)
                                  {
                                    goto LABEL_605;
                                  }
                                  v377 = (_QWORD *)*v377;
                                  if (!v377)
                                    goto LABEL_605;
                                }
                              }
                              do
                              {
                                v379 = v377[1];
                                if (v379 == 0x6F78D65E6A19A54BLL)
                                {
                                  if (v377[2] == 0x6F78D65E6A19A54BLL)
                                  {
LABEL_610:
                                    v381 = v377[3];
                                    goto LABEL_608;
                                  }
                                }
                                else
                                {
                                  if (v379 >= *(_QWORD *)&v373)
                                    v379 %= *(_QWORD *)&v373;
                                  if (v379 != v375)
                                    break;
                                }
                                v377 = (_QWORD *)*v377;
                              }
                              while (v377);
                            }
                          }
                        }
LABEL_605:
                        v381 = operator new();
                        *(_QWORD *)(v381 + 16) = "md::components::FlexClientStateChanged]";
                        *(_QWORD *)(v381 + 24) = 38;
                        *(_OWORD *)(v381 + 32) = 0u;
                        *(_OWORD *)(v381 + 48) = 0u;
                        *(_OWORD *)(v381 + 64) = 0u;
                        *(_OWORD *)(v381 + 80) = 0u;
                        *(_OWORD *)(v381 + 96) = 0u;
                        *(_OWORD *)(v381 + 112) = 0u;
                        *(_OWORD *)(v381 + 128) = 0u;
                        *(_DWORD *)(v381 + 144) = 1065353216;
                        *(_OWORD *)(v381 + 152) = 0u;
                        *(_OWORD *)(v381 + 168) = 0u;
                        *(_QWORD *)(v381 + 184) = 0;
                        *(_DWORD *)(v381 + 192) = 1065353216;
                        *(_OWORD *)(v381 + 200) = 0u;
                        *(_OWORD *)(v381 + 216) = 0u;
                        *(_QWORD *)(v381 + 232) = 0;
                        *(_DWORD *)(v381 + 240) = 1065353216;
                        *(_QWORD *)v381 = &off_1E42B32E8;
                        *(_QWORD *)(v381 + 8) = 0x6F78D65E6A19A54BLL;
                        *(_QWORD *)(v381 + 248) = v197;
                        v382 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v197 + 15, 0x6F78D65E6A19A54BuLL, &v713);
                        v383 = v382[3];
                        v382[3] = v381;
                        if (v383)
                          (*(void (**)(uint64_t))(*(_QWORD *)v383 + 8))(v383);
                        *(_QWORD *)&buf = 0x6F78D65E6A19A54BLL;
                        *((_QWORD *)&buf + 1) = "md::components::FlexClientStateChanged]";
                        *(_QWORD *)&v731 = 38;
                        gdc::Registry::_registerStorageDataSignals((uint64_t)v197, 0x6F78D65E6A19A54BLL, (uint64_t)&buf, (uint64_t *)(v381 + 104));
LABEL_608:
                        gdc::ComponentStorageWrapper<md::components::Collapsible>::emplace((uint64_t *)v381, v372);
                        ++v194;
                      }
                      while (v194 != v370);
                      v194 = v708;
                      v163 = __pb;
                      if (v708 != v707)
                      {
                        v384 = 0;
                        v194 = v707;
                        do
                        {
                          v385 = -1.0;
                          if (v384 < (v705 - (_BYTE *)v704) >> 2)
                            v385 = *((float *)v704 + v384);
                          v386 = v194[v384];
                          v702 = v385;
                          v713 = 0x1F5CA557A3AFA83FLL;
                          v387 = (int8x8_t)v197[16];
                          if (v387)
                          {
                            v388 = (uint8x8_t)vcnt_s8(v387);
                            v388.i16[0] = vaddlv_u8(v388);
                            if (v388.u32[0] > 1uLL)
                            {
                              v389 = 0x1F5CA557A3AFA83FLL;
                              if (*(_QWORD *)&v387 <= 0x1F5CA557A3AFA83FuLL)
                                v389 = 0x1F5CA557A3AFA83FuLL % *(_QWORD *)&v387;
                            }
                            else
                            {
                              v389 = (*(_QWORD *)&v387 - 1) & 0x1F5CA557A3AFA83FLL;
                            }
                            v390 = *(_QWORD **)(*v371 + 8 * v389);
                            if (v390)
                            {
                              v391 = (_QWORD *)*v390;
                              if (v391)
                              {
                                if (v388.u32[0] < 2uLL)
                                {
                                  v392 = *(_QWORD *)&v387 - 1;
                                  while (1)
                                  {
                                    v394 = v391[1];
                                    if (v394 == 0x1F5CA557A3AFA83FLL)
                                    {
                                      if (v391[2] == 0x1F5CA557A3AFA83FLL)
                                        goto LABEL_640;
                                    }
                                    else if ((v394 & v392) != v389)
                                    {
                                      goto LABEL_635;
                                    }
                                    v391 = (_QWORD *)*v391;
                                    if (!v391)
                                      goto LABEL_635;
                                  }
                                }
                                do
                                {
                                  v393 = v391[1];
                                  if (v393 == 0x1F5CA557A3AFA83FLL)
                                  {
                                    if (v391[2] == 0x1F5CA557A3AFA83FLL)
                                    {
LABEL_640:
                                      v395 = v391[3];
                                      goto LABEL_638;
                                    }
                                  }
                                  else
                                  {
                                    if (v393 >= *(_QWORD *)&v387)
                                      v393 %= *(_QWORD *)&v387;
                                    if (v393 != v389)
                                      break;
                                  }
                                  v391 = (_QWORD *)*v391;
                                }
                                while (v391);
                              }
                            }
                          }
LABEL_635:
                          v395 = operator new();
                          *(_QWORD *)(v395 + 16) = "md::components::FlexSelectionInfo]";
                          *(_QWORD *)(v395 + 24) = 33;
                          *(_OWORD *)(v395 + 32) = 0u;
                          *(_OWORD *)(v395 + 48) = 0u;
                          *(_OWORD *)(v395 + 64) = 0u;
                          *(_OWORD *)(v395 + 80) = 0u;
                          *(_OWORD *)(v395 + 96) = 0u;
                          *(_OWORD *)(v395 + 112) = 0u;
                          *(_OWORD *)(v395 + 128) = 0u;
                          *(_DWORD *)(v395 + 144) = 1065353216;
                          *(_OWORD *)(v395 + 152) = 0u;
                          *(_OWORD *)(v395 + 168) = 0u;
                          *(_QWORD *)(v395 + 184) = 0;
                          *(_DWORD *)(v395 + 192) = 1065353216;
                          *(_OWORD *)(v395 + 200) = 0u;
                          *(_OWORD *)(v395 + 216) = 0u;
                          *(_QWORD *)(v395 + 232) = 0;
                          *(_DWORD *)(v395 + 240) = 1065353216;
                          *(_QWORD *)v395 = &off_1E42B30D8;
                          *(_QWORD *)(v395 + 8) = 0x1F5CA557A3AFA83FLL;
                          *(_QWORD *)(v395 + 248) = v197;
                          v396 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v197 + 15, 0x1F5CA557A3AFA83FuLL, &v713);
                          v397 = v396[3];
                          v396[3] = v395;
                          if (v397)
                            (*(void (**)(uint64_t))(*(_QWORD *)v397 + 8))(v397);
                          *(_QWORD *)&buf = 0x1F5CA557A3AFA83FLL;
                          *((_QWORD *)&buf + 1) = "md::components::FlexSelectionInfo]";
                          *(_QWORD *)&v731 = 33;
                          gdc::Registry::_registerStorageDataSignals((uint64_t)v197, 0x1F5CA557A3AFA83FLL, (uint64_t)&buf, (uint64_t *)(v395 + 104));
LABEL_638:
                          gdc::ComponentStorageWrapper<md::ls::BoundsWidth>::emplace((uint64_t *)v395, v386, &v702);
                          ++v384;
                          v194 = v707;
                        }
                        while (v384 < v708 - v707);
                      }
                    }
                    break;
                  }
                  while (2)
                  {
                    v731 = 0u;
                    v732 = 0u;
                    buf = 0u;
                    v221 = v210[2];
                    if (v221)
                    {
                      objc_msgSend(v221, "bounds");
                      v223 = *((double *)&buf + 1);
                      v222 = *(double *)&buf;
                      v224 = *(double *)&v731;
                      v225 = *((double *)&v732 + 1);
                      v226 = *(double *)&v732;
                    }
                    else
                    {
                      v225 = 0.0;
                      v224 = 0.0;
                      v226 = 0.0;
                      v223 = 0.0;
                      v222 = 0.0;
                    }
                    v227 = *(double *)(MEMORY[0x1E0D266E8] + 16);
                    v228 = v703[19] - v222 / v227;
                    if (v228 >= 0.0)
                    {
                      v230 = v703[16] - (*((double *)&v731 + 1) + v222) / v227;
                      v229 = 0.0;
                      if (v230 > 0.0)
                        v229 = v230 * v230;
                    }
                    else
                    {
                      v229 = v228 * v228;
                    }
                    v231 = v226 + v223;
                    v232 = *(double *)(MEMORY[0x1E0D266E8] + 24);
                    v233 = v231 / v232 + v703[20] + -1.0;
                    if (v233 >= 0.0)
                    {
                      v234 = v223 / v232 + v703[17] + -1.0;
                      if (v234 > 0.0)
                        v229 = v229 + v234 * v234;
                    }
                    else
                    {
                      v229 = v229 + v233 * v233;
                    }
                    v235 = v703[21] - v224 * 0.0000000249532021;
                    if (v235 >= 0.0)
                    {
                      v236 = v703[18] - (v225 + v224) * 0.0000000249532021;
                      if (v236 > 0.0)
                        v229 = v229 + v236 * v236;
                    }
                    else
                    {
                      v229 = v229 + v235 * v235;
                    }
                    v237 = (v229 * 1.60600699e15);
                    if (*((_DWORD *)v211 + 8) > v237 || *((_DWORD *)v211 + 9) < v237)
                    {
                      v238 = &v711->__vftable;
                      if ((unint64_t)v711 < v712)
                      {
                        *v238 = v210[2];
                        v220 = (std::__shared_weak_count *)(v238 + 1);
                      }
                      else
                      {
                        v239 = (char *)v711 - (_BYTE *)v710;
                        v240 = ((char *)v711 - (_BYTE *)v710) >> 3;
                        if ((unint64_t)(v240 + 1) >> 61)
                          abort();
                        v241 = (uint64_t)(v712 - (_QWORD)v710) >> 2;
                        if (v241 <= v240 + 1)
                          v241 = v240 + 1;
                        if (v712 - (unint64_t)v710 >= 0x7FFFFFFFFFFFFFF8)
                          v242 = 0x1FFFFFFFFFFFFFFFLL;
                        else
                          v242 = v241;
                        if (v242)
                        {
                          if (v242 >> 61)
                            goto LABEL_1020;
                          v243 = (char *)operator new(8 * v242);
                        }
                        else
                        {
                          v243 = 0;
                        }
                        v244 = &v243[8 * v240];
                        v245 = &v243[8 * v242];
                        *(_QWORD *)v244 = v210[2];
                        v220 = (std::__shared_weak_count *)(v244 + 8);
                        v246 = (std::__shared_weak_count *)v710;
                        v247 = v711;
                        v248 = (char *)v711 - (_BYTE *)v710;
                        if (v711 == v710)
                        {
                          v710 = &v243[8 * v240];
                          v711 = (std::__shared_weak_count *)(v244 + 8);
                          v712 = (unint64_t)v245;
                          v197 = v684;
                        }
                        else
                        {
                          v249 = v248 - 8;
                          if ((unint64_t)(v248 - 8) <= 0x77)
                          {
                            v250 = v245;
                            v197 = v684;
                            goto LABEL_463;
                          }
                          v250 = v245;
                          v197 = v684;
                          if ((char *)v711 - 8 * (v249 >> 3) - 8 < v244
                            && &v243[v239 - (v249 & 0xFFFFFFFFFFFFFFF8) - 8] < (char *)v711)
                          {
                            goto LABEL_1032;
                          }
                          v251 = (v249 >> 3) + 1;
                          v252 = &v243[8 * v240 - 16];
                          p_shared_weak_owners = &v711[-2].__shared_weak_owners_;
                          v254 = v251 & 0x3FFFFFFFFFFFFFFCLL;
                          do
                          {
                            v256 = *(_OWORD *)p_shared_weak_owners;
                            v255 = *((_OWORD *)p_shared_weak_owners + 1);
                            *(_OWORD *)p_shared_weak_owners = 0uLL;
                            *((_OWORD *)p_shared_weak_owners + 1) = 0uLL;
                            p_shared_weak_owners -= 4;
                            *((_OWORD *)v252 - 1) = v256;
                            *(_OWORD *)v252 = v255;
                            v252 -= 32;
                            v254 -= 4;
                          }
                          while (v254);
                          v244 -= 8 * (v251 & 0x3FFFFFFFFFFFFFFCLL);
                          v247 = (std::__shared_weak_count *)((char *)v247 - 8 * (v251 & 0x3FFFFFFFFFFFFFFCLL));
                          if (v251 != (v251 & 0x3FFFFFFFFFFFFFFCLL))
                          {
LABEL_1032:
                            do
                            {
LABEL_463:
                              v257 = v247[-1].__shared_weak_owners_;
                              v247 = (std::__shared_weak_count *)((char *)v247 - 8);
                              v247->__vftable = 0;
                              *((_QWORD *)v244 - 1) = v257;
                              v244 -= 8;
                            }
                            while (v247 != v246);
                          }
                          v247 = (std::__shared_weak_count *)v710;
                          v258 = v711;
                          v710 = v244;
                          v711 = v220;
                          v712 = (unint64_t)v250;
                          while (v258 != v247)
                          {
                            v259 = (void *)v258[-1].__shared_weak_owners_;
                            v258 = (std::__shared_weak_count *)((char *)v258 - 8);

                          }
                        }
                        v196 = (char *)v694;
                        if (v247)
                          operator delete(v247);
                      }
                      v711 = v220;
                      v211 = v690;
                    }
                    v210 = (uint64_t **)*v210;
                    if (!v210)
                      goto LABEL_411;
                    continue;
                  }
                }
              }
              else
              {
                if (v207 >= *(_QWORD *)&v201)
                  v207 %= *(_QWORD *)&v201;
                if (v207 != v203)
                  break;
              }
              v205 = (_QWORD *)*v205;
            }
            while (v205);
          }
        }
LABEL_383:
        v195 += 8;
      }
      while (v195 != v196);
      if (v704)
      {
        v705 = v704;
        operator delete(v704);
        v194 = v707;
      }
      if (v194)
      {
        v708 = v194;
        operator delete(v194);
      }
    }
    v439 = (std::__shared_weak_count *)v710;
    v165 = v683;
    if (v710)
    {
      v440 = v711;
      v441 = v710;
      if (v711 != v710)
      {
        do
        {
          v442 = (void *)v440[-1].__shared_weak_owners_;
          v440 = (std::__shared_weak_count *)((char *)v440 - 8);

        }
        while (v440 != v439);
        v441 = v710;
        v163 = __pb;
      }
      v711 = v439;
      operator delete(v441);
    }
  }
  if (!*(_QWORD *)(a1 + 472))
    goto LABEL_1011;
  if (*(_DWORD *)(a1 + 124))
  {
    v695 = 0;
    v691 = (float *)(a1 + 504);
    v443 = (uint64_t *)v163;
    while (1)
    {
      v444 = *(_QWORD *)(a1 + 472);
      if (!v444)
        goto LABEL_750;
      v445 = (unint64_t)v165;
      v446 = *(uint64_t **)(a1 + 456);
      v447 = (uint64_t *)v446[1];
      v448 = v446;
      if (v447)
      {
        do
        {
          v449 = v447;
          v447 = (uint64_t *)*v447;
        }
        while (v447);
      }
      else
      {
        do
        {
          v449 = (uint64_t *)v448[2];
          v52 = *v449 == (_QWORD)v448;
          v448 = v449;
        }
        while (!v52);
      }
      v450 = v446[4];
      *(_QWORD *)(a1 + 456) = v449;
      *(_QWORD *)(a1 + 472) = v444 - 1;
      std::__tree_remove[abi:nn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 464), v446);
      operator delete(v446);
      v451 = *(unsigned __int16 *)(v450 + 40);
      v452 = *(uint64_t **)(a1 + 488);
      v453 = (uint64_t **)(a1 + 488);
      v454 = (uint64_t **)(a1 + 488);
      if (v452)
      {
        v455 = *(uint64_t ***)(a1 + 488);
        do
        {
          v456 = *((unsigned __int16 *)v455 + 16);
          if (v451 >= v456)
          {
            if (v456 >= v451)
            {
              LOWORD(buf) = *(_WORD *)(v450 + 40);
              v457 = std::__hash_table<std::__hash_value_type<unsigned short,unsigned int>,std::__unordered_map_hasher<unsigned short,std::__hash_value_type<unsigned short,unsigned int>,std::hash<unsigned short>,std::equal_to<unsigned short>,true>,std::__unordered_map_equal<unsigned short,std::__hash_value_type<unsigned short,unsigned int>,std::equal_to<unsigned short>,std::hash<unsigned short>,true>,std::allocator<std::__hash_value_type<unsigned short,unsigned int>>>::__emplace_unique_key_args<unsigned short,std::piecewise_construct_t const&,std::tuple<unsigned short &&>,std::tuple<>>(v691, v451, &buf);
              ++*((_DWORD *)v457 + 5);
              goto LABEL_696;
            }
            ++v455;
          }
          v455 = (uint64_t **)*v455;
        }
        while (v455);
        while (1)
        {
          while (1)
          {
            v454 = (uint64_t **)v452;
            v458 = *((unsigned __int16 *)v452 + 16);
            if (v451 >= v458)
              break;
            v452 = *v454;
            v453 = v454;
            if (!*v454)
              goto LABEL_716;
          }
          if (v458 >= v451)
            break;
          v452 = v454[1];
          if (!v452)
          {
            v453 = v454 + 1;
            goto LABEL_716;
          }
        }
        v459 = v454;
      }
      else
      {
LABEL_716:
        v459 = operator new(0x30uLL);
        v459[16] = v451;
        *((_QWORD *)v459 + 5) = 0;
        *(_QWORD *)v459 = 0;
        *((_QWORD *)v459 + 1) = 0;
        *((_QWORD *)v459 + 2) = v454;
        *v453 = (uint64_t *)v459;
        v460 = **(_QWORD **)(a1 + 480);
        v461 = (uint64_t *)v459;
        if (v460)
        {
          *(_QWORD *)(a1 + 480) = v460;
          v461 = *v453;
        }
        std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 488), v461);
        ++*(_QWORD *)(a1 + 496);
        LOWORD(v451) = *(_WORD *)(v450 + 40);
      }
      *((_QWORD *)v459 + 5) = v450;
      LOWORD(buf) = v451;
      *((_DWORD *)std::__hash_table<std::__hash_value_type<unsigned short,unsigned int>,std::__unordered_map_hasher<unsigned short,std::__hash_value_type<unsigned short,unsigned int>,std::hash<unsigned short>,std::equal_to<unsigned short>,true>,std::__unordered_map_equal<unsigned short,std::__hash_value_type<unsigned short,unsigned int>,std::equal_to<unsigned short>,std::hash<unsigned short>,true>,std::allocator<std::__hash_value_type<unsigned short,unsigned int>>>::__emplace_unique_key_args<unsigned short,std::piecewise_construct_t const&,std::tuple<unsigned short &&>,std::tuple<>>(v691, v451, &buf)+ 5) = 0;
      v462 = gdc::Registry::storage<md::components::MeshInstance>(v450);
      v463 = gdc::Registry::storage<md::components::ClientState>(v450);
      v464 = gdc::Registry::storage<md::components::SupportsFlexing>(v450);
      v465 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(v462 + 88) - *(_QWORD *)(v462 + 80)) >> 4);
      v466 = *(_QWORD *)(v464 + 80);
      if ((uint64_t)(*(_QWORD *)(v463 + 88) - *(_QWORD *)(v463 + 80)) >> 4 < v465)
        v465 = (uint64_t)(*(_QWORD *)(v463 + 88) - *(_QWORD *)(v463 + 80)) >> 4;
      if (*(_QWORD *)(v464 + 88) - v466 < v465)
        v465 = *(_QWORD *)(v464 + 88) - v466;
      if ((_DWORD)v465)
      {
        v695 += v465;
        v165 = (uint64_t *)v445;
        if ((unint64_t)v443 >= v445)
        {
          v467 = (char *)v443 - v163;
          v468 = (uint64_t *)v163;
          v469 = ((char *)v443 - v163) >> 3;
          v470 = v469 + 1;
          __pc = v468;
          if ((unint64_t)(v469 + 1) >> 61)
            abort();
          v471 = v445 - (_QWORD)v468;
          v472 = (uint64_t)(v445 - (_QWORD)v468) >> 2;
          if (v472 > v470)
            v470 = v472;
          if (v471 >= 0x7FFFFFFFFFFFFFF8)
            v473 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v473 = v470;
          if (v473)
          {
            if (v473 >> 61)
              goto LABEL_1020;
            v474 = operator new(8 * v473);
          }
          else
          {
            v474 = 0;
          }
          v475 = (uint64_t *)&v474[8 * v469];
          *v475 = v450;
          v476 = v475 + 1;
          v477 = __pc;
          if (v443 != __pc)
          {
            v478 = (char *)(v443 - 1) - (char *)__pc;
            if (v478 < 0x58 || (unint64_t)((char *)v443 - &v474[v467]) < 0x20)
            {
              v479 = v443;
              v477 = __pc;
              goto LABEL_741;
            }
            v481 = (v478 >> 3) + 1;
            v479 = &v443[-(v481 & 0x3FFFFFFFFFFFFFFCLL)];
            v482 = &v474[8 * v469 - 16];
            v483 = v443 - 2;
            v484 = v481 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v485 = *(_OWORD *)v483;
              *(v482 - 1) = *((_OWORD *)v483 - 1);
              *v482 = v485;
              v482 -= 2;
              v483 -= 4;
              v484 -= 4;
            }
            while (v484);
            v475 -= v481 & 0x3FFFFFFFFFFFFFFCLL;
            v477 = __pc;
            if (v481 != (v481 & 0x3FFFFFFFFFFFFFFCLL))
            {
              do
              {
LABEL_741:
                v480 = *--v479;
                *--v475 = v480;
              }
              while (v479 != v477);
            }
          }
          v165 = (uint64_t *)&v474[8 * v473];
          if (v477)
            operator delete(v477);
          v163 = (char *)v475;
          v443 = v476;
          goto LABEL_697;
        }
        *v443++ = v450;
      }
      else
      {
LABEL_696:
        v165 = (uint64_t *)v445;
      }
LABEL_697:
      if (v695 >= *(_DWORD *)(a1 + 124))
        goto LABEL_750;
    }
  }
  v443 = (uint64_t *)v163;
LABEL_750:
  if (*(_QWORD *)(a1 + 248) == *(_QWORD *)(a1 + 256))
    goto LABEL_1011;
  v696 = v443;
  v486 = *(_QWORD *)(a1 + 280);
  if (v486)
  {
    while (1)
    {
      v487 = (_BYTE *)v486;
      if (!*(_BYTE *)(v486 + 28))
        break;
      v486 = *(_QWORD *)(v486 + 8);
      if (!v486)
      {
        v488 = (uint64_t **)(v487 + 8);
        goto LABEL_756;
      }
    }
  }
  else
  {
    v488 = (uint64_t **)(a1 + 280);
    v487 = (_BYTE *)(a1 + 280);
LABEL_756:
    v489 = operator new(0x28uLL);
    v489[28] = 0;
    *(_QWORD *)v489 = 0;
    *((_QWORD *)v489 + 1) = 0;
    *((_QWORD *)v489 + 2) = v487;
    *v488 = (uint64_t *)v489;
    v490 = **(_QWORD **)(a1 + 272);
    v491 = (uint64_t *)v489;
    v487 = v489;
    if (v490)
    {
      *(_QWORD *)(a1 + 272) = v490;
      v491 = *v488;
    }
    std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 280), v491);
    ++*(_QWORD *)(a1 + 288);
  }
  v710 = 0;
  v711 = 0;
  v712 = 0;
  v707 = 0;
  v708 = 0;
  v709 = 0;
  v704 = 0;
  v705 = 0;
  v706 = 0;
  if (v163 == (char *)v696)
    goto LABEL_1006;
  v692 = v487;
  v492 = 0;
  __pd = v163;
  while (2)
  {
    v493 = *(_QWORD **)v163;
    ++*(_DWORD *)(a1 + 544);
    v494 = (std::__shared_weak_count *)v710;
    v495 = v711;
    if (v711 != v710)
    {
      do
      {
        v496 = (void *)v495[-1].__shared_weak_owners_;
        v495 = (std::__shared_weak_count *)((char *)v495 - 8);

      }
      while (v495 != v494);
      v492 = v707;
    }
    v711 = v494;
    v705 = v704;
    v708 = v492;
    v703 = 0;
    v497 = (int8x8_t)v493[1];
    if (!*(_QWORD *)&v497)
      goto LABEL_761;
    v498 = (uint8x8_t)vcnt_s8(v497);
    v498.i16[0] = vaddlv_u8(v498);
    if (v498.u32[0] > 1uLL)
    {
      v499 = 0x64A448A5CD5D38DBLL;
      if (*(_QWORD *)&v497 <= 0x64A448A5CD5D38DBuLL)
        v499 = 0x64A448A5CD5D38DBuLL % *(_QWORD *)&v497;
    }
    else
    {
      v499 = (*(_QWORD *)&v497 - 1) & 0x64A448A5CD5D38DBLL;
    }
    v500 = *(_QWORD **)(*v493 + 8 * v499);
    if (!v500)
      goto LABEL_761;
    v501 = (_QWORD *)*v500;
    if (!v501)
      goto LABEL_761;
    if (v498.u32[0] < 2uLL)
    {
      v502 = *(_QWORD *)&v497 - 1;
      while (1)
      {
        v504 = v501[1];
        if (v504 == 0x64A448A5CD5D38DBLL)
        {
          if (v501[2] == 0x64A448A5CD5D38DBLL)
            goto LABEL_786;
        }
        else if ((v504 & v502) != v499)
        {
          goto LABEL_761;
        }
        v501 = (_QWORD *)*v501;
        if (!v501)
          goto LABEL_761;
      }
    }
    while (1)
    {
      v503 = v501[1];
      if (v503 == 0x64A448A5CD5D38DBLL)
        break;
      if (v503 >= *(_QWORD *)&v497)
        v503 %= *(_QWORD *)&v497;
      if (v503 != v499)
        goto LABEL_761;
LABEL_775:
      v501 = (_QWORD *)*v501;
      if (!v501)
        goto LABEL_761;
    }
    if (v501[2] != 0x64A448A5CD5D38DBLL)
      goto LABEL_775;
LABEL_786:
    v505 = v501[5];
    if (*(_QWORD *)(v505 + 8) != 0x64A448A5CD5D38DBLL)
      goto LABEL_761;
    v703 = *(double **)(v505 + 32);
    if (!v703)
      goto LABEL_761;
    v506 = *(uint64_t ***)(a1 + 184);
    v507 = v692;
    v508 = MEMORY[0x1E0D266E8];
    v686 = v493;
    if (v506)
    {
      while (1)
      {
        v731 = 0u;
        v732 = 0u;
        buf = 0u;
        v520 = v506[2];
        if (v520)
        {
          objc_msgSend(v520, "bounds");
          v522 = *((double *)&buf + 1);
          v521 = *(double *)&buf;
          v523 = *(double *)&v731;
          v524 = *((double *)&v732 + 1);
          v525 = *(double *)&v732;
        }
        else
        {
          v524 = 0.0;
          v523 = 0.0;
          v525 = 0.0;
          v522 = 0.0;
          v521 = 0.0;
        }
        v526 = *(double *)(v508 + 16);
        v527 = v703[19] - v521 / v526;
        if (v527 >= 0.0)
        {
          v529 = v703[16] - (*((double *)&v731 + 1) + v521) / v526;
          v528 = 0.0;
          if (v529 > 0.0)
            v528 = v529 * v529;
        }
        else
        {
          v528 = v527 * v527;
        }
        v530 = v525 + v522;
        v531 = *(double *)(v508 + 24);
        v532 = v530 / v531 + v703[20] + -1.0;
        if (v532 >= 0.0)
        {
          v533 = v522 / v531 + v703[17] + -1.0;
          if (v533 > 0.0)
            v528 = v528 + v533 * v533;
        }
        else
        {
          v528 = v528 + v532 * v532;
        }
        v534 = v703[21] - v523 * 0.0000000249532021;
        if (v534 >= 0.0)
        {
          v535 = v703[18] - (v524 + v523) * 0.0000000249532021;
          if (v535 > 0.0)
            v528 = v528 + v535 * v535;
        }
        else
        {
          v528 = v528 + v534 * v534;
        }
        v536 = (v528 * 1.60600699e15);
        if (*((_DWORD *)v507 + 8) <= v536 && *((_DWORD *)v507 + 9) >= v536)
          goto LABEL_799;
        v537 = &v711->__vftable;
        if ((unint64_t)v711 >= v712)
          break;
        *v537 = v506[2];
        v519 = (std::__shared_weak_count *)(v537 + 1);
LABEL_798:
        v711 = v519;
        v507 = v692;
        v508 = MEMORY[0x1E0D266E8];
LABEL_799:
        v506 = (uint64_t **)*v506;
        if (!v506)
          goto LABEL_789;
      }
      v538 = (char *)v711 - (_BYTE *)v710;
      v539 = ((char *)v711 - (_BYTE *)v710) >> 3;
      if ((unint64_t)(v539 + 1) >> 61)
        abort();
      v540 = (uint64_t)(v712 - (_QWORD)v710) >> 2;
      if (v540 <= v539 + 1)
        v540 = v539 + 1;
      if (v712 - (unint64_t)v710 >= 0x7FFFFFFFFFFFFFF8)
        v541 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v541 = v540;
      if (v541)
      {
        if (v541 >> 61)
          goto LABEL_1020;
        v542 = (char *)operator new(8 * v541);
      }
      else
      {
        v542 = 0;
      }
      v543 = &v542[8 * v539];
      v544 = &v542[8 * v541];
      *(_QWORD *)v543 = v506[2];
      v519 = (std::__shared_weak_count *)(v543 + 8);
      v545 = (std::__shared_weak_count *)v710;
      v546 = v711;
      v547 = (char *)v711 - (_BYTE *)v710;
      if (v711 == v710)
      {
        v710 = &v542[8 * v539];
        v711 = (std::__shared_weak_count *)(v543 + 8);
        v712 = (unint64_t)v544;
        v493 = v686;
        goto LABEL_832;
      }
      v548 = v547 - 8;
      if ((unint64_t)(v547 - 8) > 0x77)
      {
        v549 = v544;
        v493 = v686;
        if ((char *)v711 - 8 * (v548 >> 3) - 8 >= v543
          || &v542[v538 - (v548 & 0xFFFFFFFFFFFFFFF8) - 8] >= (char *)v711)
        {
          v550 = (v548 >> 3) + 1;
          v551 = &v542[8 * v539 - 16];
          v552 = &v711[-2].__shared_weak_owners_;
          v553 = v550 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v555 = *(_OWORD *)v552;
            v554 = *((_OWORD *)v552 + 1);
            *(_OWORD *)v552 = 0uLL;
            *((_OWORD *)v552 + 1) = 0uLL;
            v552 -= 4;
            *((_OWORD *)v551 - 1) = v555;
            *(_OWORD *)v551 = v554;
            v551 -= 32;
            v553 -= 4;
          }
          while (v553);
          v543 -= 8 * (v550 & 0x3FFFFFFFFFFFFFFCLL);
          v546 = (std::__shared_weak_count *)((char *)v546 - 8 * (v550 & 0x3FFFFFFFFFFFFFFCLL));
          if (v550 == (v550 & 0x3FFFFFFFFFFFFFFCLL))
            goto LABEL_840;
        }
      }
      else
      {
        v549 = v544;
        v493 = v686;
      }
      do
      {
        v556 = v546[-1].__shared_weak_owners_;
        v546 = (std::__shared_weak_count *)((char *)v546 - 8);
        v546->__vftable = 0;
        *((_QWORD *)v543 - 1) = v556;
        v543 -= 8;
      }
      while (v546 != v545);
LABEL_840:
      v546 = (std::__shared_weak_count *)v710;
      v557 = v711;
      v710 = v543;
      v711 = v519;
      v712 = (unint64_t)v549;
      while (v557 != v546)
      {
        v558 = (void *)v557[-1].__shared_weak_owners_;
        v557 = (std::__shared_weak_count *)((char *)v557 - 8);

      }
LABEL_832:
      if (v546)
        operator delete(v546);
      goto LABEL_798;
    }
LABEL_789:
    v509 = (_QWORD *)gdc::Registry::storage<md::components::MeshInstance>((uint64_t)v493);
    v510 = (_QWORD *)gdc::Registry::storage<md::components::ClientState>((uint64_t)v493);
    v511 = gdc::Registry::storage<md::components::SupportsFlexing>((uint64_t)v493);
    v512 = (_QWORD *)v511;
    v513 = v510 + 4;
    v514 = v511 + 32;
    v515 = v509[7];
    v516 = v509[8];
    if (v510[8] - v510[7] >= (unint64_t)(v516 - v515))
      v517 = v509 + 4;
    else
      v517 = v510 + 4;
    if (*(_QWORD *)(v511 + 64) - *(_QWORD *)(v511 + 56) < v517[4] - v517[3])
      v517 = (_QWORD *)(v511 + 32);
    if (v509 + 4 == v517)
    {
      v687 = v517;
      *(_QWORD *)&buf = a1;
      *((_QWORD *)&buf + 1) = &v703;
      *(_QWORD *)&v731 = &v710;
      *((_QWORD *)&v731 + 1) = &v707;
      *(_QWORD *)&v732 = &v704;
      if (v515 != v516)
      {
        v518 = v509[10];
        do
        {
          v560 = *(unsigned int *)(v515 + 4);
          v561 = v560 >> 7;
          v562 = v510[4];
          v563 = (v510[5] - v562) >> 3;
          if (v560 >> 7 < v563)
          {
            v564 = *(_QWORD *)(v562 + 8 * v561);
            if (v564)
            {
              v565 = *(unsigned __int16 *)(v564 + 2 * (v560 & 0x7F));
              v567 = v510[7];
              v566 = v510[8];
              v568 = (v566 - v567) >> 3;
              if (v568 > v565)
              {
                v569 = v567 + 8 * v565;
                if (v569 != v566 && *(_DWORD *)(v569 + 4) == (_DWORD)v560)
                {
                  v571 = v512[4];
                  if (v561 < (v512[5] - v571) >> 3)
                  {
                    v572 = *(_QWORD *)(v571 + 8 * v561);
                    if (v572)
                    {
                      v573 = *(unsigned __int16 *)(v572 + 2 * (v560 & 0x7F));
                      v575 = v512[7];
                      v574 = v512[8];
                      if (v573 < (v574 - v575) >> 3)
                      {
                        v576 = v575 + 8 * v573;
                        if (v576 != v574 && *(_DWORD *)(v576 + 4) == (_DWORD)v560)
                        {
                          v578 = *(_QWORD *)v515;
                          v579 = *(_QWORD *)v515 >> 39;
                          if (v579 < v563
                            && (v580 = *(_QWORD *)(v562 + 8 * v579)) != 0
                            && (v581 = *(unsigned __int16 *)(v580 + 2 * (HIDWORD(v578) & 0x7F)), v568 > v581)
                            && ((v582 = v567 + 8 * v581, v582 != v566)
                              ? (v583 = *(_DWORD *)(v582 + 4) == HIDWORD(v578))
                              : (v583 = 0),
                                v583))
                          {
                            v559 = (gss::Allocator **)(v510[10] + 16 * v581);
                          }
                          else
                          {
                            v559 = (gss::Allocator **)v510[11];
                          }
                          md::SceneQueryLogic::categorizeEntitiesByFlexZone<>(std::vector<gdc::Registry *> const&)::{lambda(gdc::Entity,md::components::MeshInstance &,md::components::ClientState &)#1}::operator()((uint64_t)&buf, v578, v518, v559);
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          v518 += 112;
          v515 += 8;
        }
        while (v515 != v516);
      }
      v513 = v510 + 4;
      v517 = v687;
    }
    if (v513 == v517)
    {
      v688 = v517;
      *(_QWORD *)&buf = a1;
      *((_QWORD *)&buf + 1) = &v703;
      *(_QWORD *)&v731 = &v710;
      *((_QWORD *)&v731 + 1) = &v707;
      *(_QWORD *)&v732 = &v704;
      v584 = v510[7];
      v585 = v510[8];
      if (v584 != v585)
      {
        v586 = (gss::Allocator **)v510[10];
        do
        {
          v588 = *(unsigned int *)(v584 + 4);
          v589 = v588 >> 7;
          v590 = v509[4];
          v591 = (v509[5] - v590) >> 3;
          if (v588 >> 7 < v591)
          {
            v592 = *(_QWORD *)(v590 + 8 * v589);
            if (v592)
            {
              v593 = *(unsigned __int16 *)(v592 + 2 * (v588 & 0x7F));
              v595 = v509[7];
              v594 = v509[8];
              v596 = (v594 - v595) >> 3;
              if (v596 > v593)
              {
                v597 = v595 + 8 * v593;
                if (v597 != v594 && *(_DWORD *)(v597 + 4) == (_DWORD)v588)
                {
                  v599 = v512[4];
                  if (v589 < (v512[5] - v599) >> 3)
                  {
                    v600 = *(_QWORD *)(v599 + 8 * v589);
                    if (v600)
                    {
                      v601 = *(unsigned __int16 *)(v600 + 2 * (v588 & 0x7F));
                      v603 = v512[7];
                      v602 = v512[8];
                      if (v601 < (v602 - v603) >> 3)
                      {
                        v604 = v603 + 8 * v601;
                        if (v604 != v602 && *(_DWORD *)(v604 + 4) == (_DWORD)v588)
                        {
                          v606 = *(_QWORD *)v584;
                          v607 = *(_QWORD *)v584 >> 39;
                          if (v607 < v591
                            && (v608 = *(_QWORD *)(v590 + 8 * v607)) != 0
                            && (v609 = *(unsigned __int16 *)(v608 + 2 * (HIDWORD(v606) & 0x7F)), v596 > v609)
                            && ((v610 = v595 + 8 * v609, v610 != v594)
                              ? (v611 = *(_DWORD *)(v610 + 4) == HIDWORD(v606))
                              : (v611 = 0),
                                v611))
                          {
                            v587 = v509[10] + 112 * v609;
                          }
                          else
                          {
                            v587 = v509[11];
                          }
                          md::SceneQueryLogic::categorizeEntitiesByFlexZone<>(std::vector<gdc::Registry *> const&)::{lambda(gdc::Entity,md::components::MeshInstance &,md::components::ClientState &)#1}::operator()((uint64_t)&buf, v606, v587, v586);
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          v586 += 2;
          v584 += 8;
        }
        while (v584 != v585);
      }
      v517 = v688;
    }
    if ((_QWORD *)v514 == v517)
    {
      *(_QWORD *)&buf = a1;
      *((_QWORD *)&buf + 1) = &v703;
      *(_QWORD *)&v731 = &v710;
      *((_QWORD *)&v731 + 1) = &v707;
      *(_QWORD *)&v732 = &v704;
      v640 = v512[7];
      v641 = v512[8];
      while (1)
      {
        if (v640 == v641)
          goto LABEL_905;
        v643 = *(unsigned int *)(v640 + 4);
        v644 = v643 >> 7;
        v645 = v509[4];
        v646 = (v509[5] - v645) >> 3;
        if (v643 >> 7 < v646)
        {
          v647 = *(_QWORD *)(v645 + 8 * v644);
          if (v647)
          {
            v648 = *(unsigned __int16 *)(v647 + 2 * (v643 & 0x7F));
            v650 = v509[7];
            v649 = v509[8];
            v651 = (v649 - v650) >> 3;
            if (v651 > v648)
            {
              v652 = v650 + 8 * v648;
              if (v652 != v649 && *(_DWORD *)(v652 + 4) == (_DWORD)v643)
              {
                v654 = v510[4];
                v655 = (v510[5] - v654) >> 3;
                if (v644 < v655)
                {
                  v656 = *(_QWORD *)(v654 + 8 * v644);
                  if (v656)
                  {
                    v657 = *(unsigned __int16 *)(v656 + 2 * (v643 & 0x7F));
                    v659 = v510[7];
                    v658 = v510[8];
                    v660 = (v658 - v659) >> 3;
                    if (v660 > v657)
                    {
                      v661 = v659 + 8 * v657;
                      if (v661 != v658 && *(_DWORD *)(v661 + 4) == (_DWORD)v643)
                        break;
                    }
                  }
                }
              }
            }
          }
        }
LABEL_966:
        v640 += 8;
      }
      v663 = *(_QWORD *)v640;
      v664 = HIDWORD(*(_QWORD *)v640);
      v665 = *(_QWORD *)v640 >> 39;
      if (v665 < v646
        && (v666 = *(_QWORD *)(v645 + 8 * v665)) != 0
        && (v667 = *(unsigned __int16 *)(v666 + 2 * (HIDWORD(v663) & 0x7F)), v651 > v667)
        && ((v668 = v650 + 8 * v667, v668 != v649) ? (v669 = *(_DWORD *)(v668 + 4) == (_DWORD)v664) : (v669 = 0), v669))
      {
        v670 = v509[10] + 112 * v667;
        if (v665 >= v655)
          goto LABEL_964;
      }
      else
      {
        v670 = v509[11];
        if (v665 >= v655)
          goto LABEL_964;
      }
      v671 = *(_QWORD *)(v654 + 8 * v665);
      if (v671)
      {
        v672 = *(unsigned __int16 *)(v671 + 2 * (HIDWORD(v663) & 0x7F));
        if (v660 > v672)
        {
          v673 = v659 + 8 * v672;
          if (v673 != v658 && *(_DWORD *)(v673 + 4) == (_DWORD)v664)
          {
            v642 = (gss::Allocator **)(v510[10] + 16 * v672);
            goto LABEL_965;
          }
        }
      }
LABEL_964:
      v642 = (gss::Allocator **)v510[11];
LABEL_965:
      md::SceneQueryLogic::categorizeEntitiesByFlexZone<>(std::vector<gdc::Registry *> const&)::{lambda(gdc::Entity,md::components::MeshInstance &,md::components::ClientState &)#1}::operator()((uint64_t)&buf, v663, v670, v642);
      goto LABEL_966;
    }
LABEL_905:
    v492 = v707;
    v612 = v708;
    if (v707 != v708)
    {
      v613 = v493 + 15;
      do
      {
        v614 = *v492;
        v713 = 0x6F78D65E6A19A54BLL;
        v615 = (int8x8_t)v493[16];
        if (v615)
        {
          v616 = (uint8x8_t)vcnt_s8(v615);
          v616.i16[0] = vaddlv_u8(v616);
          if (v616.u32[0] > 1uLL)
          {
            v617 = 0x6F78D65E6A19A54BLL;
            if (*(_QWORD *)&v615 <= 0x6F78D65E6A19A54BuLL)
              v617 = 0x6F78D65E6A19A54BuLL % *(_QWORD *)&v615;
          }
          else
          {
            v617 = (*(_QWORD *)&v615 - 1) & 0x6F78D65E6A19A54BLL;
          }
          v618 = *(_QWORD **)(*v613 + 8 * v617);
          if (v618)
          {
            v619 = (_QWORD *)*v618;
            if (v619)
            {
              if (v616.u32[0] < 2uLL)
              {
                v620 = *(_QWORD *)&v615 - 1;
                while (1)
                {
                  v622 = v619[1];
                  if (v622 == 0x6F78D65E6A19A54BLL)
                  {
                    if (v619[2] == 0x6F78D65E6A19A54BLL)
                      goto LABEL_932;
                  }
                  else if ((v622 & v620) != v617)
                  {
                    goto LABEL_927;
                  }
                  v619 = (_QWORD *)*v619;
                  if (!v619)
                    goto LABEL_927;
                }
              }
              do
              {
                v621 = v619[1];
                if (v621 == 0x6F78D65E6A19A54BLL)
                {
                  if (v619[2] == 0x6F78D65E6A19A54BLL)
                  {
LABEL_932:
                    v623 = v619[3];
                    goto LABEL_930;
                  }
                }
                else
                {
                  if (v621 >= *(_QWORD *)&v615)
                    v621 %= *(_QWORD *)&v615;
                  if (v621 != v617)
                    break;
                }
                v619 = (_QWORD *)*v619;
              }
              while (v619);
            }
          }
        }
LABEL_927:
        v623 = operator new();
        *(_QWORD *)(v623 + 16) = "md::components::FlexClientStateChanged]";
        *(_QWORD *)(v623 + 24) = 38;
        *(_OWORD *)(v623 + 32) = 0u;
        *(_OWORD *)(v623 + 48) = 0u;
        *(_OWORD *)(v623 + 64) = 0u;
        *(_OWORD *)(v623 + 80) = 0u;
        *(_OWORD *)(v623 + 96) = 0u;
        *(_OWORD *)(v623 + 112) = 0u;
        *(_OWORD *)(v623 + 128) = 0u;
        *(_DWORD *)(v623 + 144) = 1065353216;
        *(_OWORD *)(v623 + 152) = 0u;
        *(_OWORD *)(v623 + 168) = 0u;
        *(_QWORD *)(v623 + 184) = 0;
        *(_DWORD *)(v623 + 192) = 1065353216;
        *(_OWORD *)(v623 + 200) = 0u;
        *(_OWORD *)(v623 + 216) = 0u;
        *(_QWORD *)(v623 + 232) = 0;
        *(_DWORD *)(v623 + 240) = 1065353216;
        *(_QWORD *)v623 = &off_1E42B32E8;
        *(_QWORD *)(v623 + 8) = 0x6F78D65E6A19A54BLL;
        *(_QWORD *)(v623 + 248) = v493;
        v624 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v493 + 15, 0x6F78D65E6A19A54BuLL, &v713);
        v625 = v624[3];
        v624[3] = v623;
        if (v625)
          (*(void (**)(uint64_t))(*(_QWORD *)v625 + 8))(v625);
        *(_QWORD *)&buf = 0x6F78D65E6A19A54BLL;
        *((_QWORD *)&buf + 1) = "md::components::FlexClientStateChanged]";
        *(_QWORD *)&v731 = 38;
        gdc::Registry::_registerStorageDataSignals((uint64_t)v493, 0x6F78D65E6A19A54BLL, (uint64_t)&buf, (uint64_t *)(v623 + 104));
LABEL_930:
        gdc::ComponentStorageWrapper<md::components::Collapsible>::emplace((uint64_t *)v623, v614);
        ++v492;
      }
      while (v492 != v612);
      v492 = v708;
      if (v708 != v707)
      {
        v626 = 0;
        v492 = v707;
        do
        {
          v627 = -1.0;
          if (v626 < (v705 - (_BYTE *)v704) >> 2)
            v627 = *((float *)v704 + v626);
          v628 = v492[v626];
          v702 = v627;
          v713 = 0x1F5CA557A3AFA83FLL;
          v629 = (int8x8_t)v493[16];
          if (v629)
          {
            v630 = (uint8x8_t)vcnt_s8(v629);
            v630.i16[0] = vaddlv_u8(v630);
            if (v630.u32[0] > 1uLL)
            {
              v631 = 0x1F5CA557A3AFA83FLL;
              if (*(_QWORD *)&v629 <= 0x1F5CA557A3AFA83FuLL)
                v631 = 0x1F5CA557A3AFA83FuLL % *(_QWORD *)&v629;
            }
            else
            {
              v631 = (*(_QWORD *)&v629 - 1) & 0x1F5CA557A3AFA83FLL;
            }
            v632 = *(_QWORD **)(*v613 + 8 * v631);
            if (v632)
            {
              v633 = (_QWORD *)*v632;
              if (v633)
              {
                if (v630.u32[0] < 2uLL)
                {
                  v634 = *(_QWORD *)&v629 - 1;
                  while (1)
                  {
                    v636 = v633[1];
                    if (v636 == 0x1F5CA557A3AFA83FLL)
                    {
                      if (v633[2] == 0x1F5CA557A3AFA83FLL)
                        goto LABEL_962;
                    }
                    else if ((v636 & v634) != v631)
                    {
                      goto LABEL_957;
                    }
                    v633 = (_QWORD *)*v633;
                    if (!v633)
                      goto LABEL_957;
                  }
                }
                do
                {
                  v635 = v633[1];
                  if (v635 == 0x1F5CA557A3AFA83FLL)
                  {
                    if (v633[2] == 0x1F5CA557A3AFA83FLL)
                    {
LABEL_962:
                      v637 = v633[3];
                      goto LABEL_960;
                    }
                  }
                  else
                  {
                    if (v635 >= *(_QWORD *)&v629)
                      v635 %= *(_QWORD *)&v629;
                    if (v635 != v631)
                      break;
                  }
                  v633 = (_QWORD *)*v633;
                }
                while (v633);
              }
            }
          }
LABEL_957:
          v637 = operator new();
          *(_QWORD *)(v637 + 16) = "md::components::FlexSelectionInfo]";
          *(_QWORD *)(v637 + 24) = 33;
          *(_OWORD *)(v637 + 32) = 0u;
          *(_OWORD *)(v637 + 48) = 0u;
          *(_OWORD *)(v637 + 64) = 0u;
          *(_OWORD *)(v637 + 80) = 0u;
          *(_OWORD *)(v637 + 96) = 0u;
          *(_OWORD *)(v637 + 112) = 0u;
          *(_OWORD *)(v637 + 128) = 0u;
          *(_DWORD *)(v637 + 144) = 1065353216;
          *(_OWORD *)(v637 + 152) = 0u;
          *(_OWORD *)(v637 + 168) = 0u;
          *(_QWORD *)(v637 + 184) = 0;
          *(_DWORD *)(v637 + 192) = 1065353216;
          *(_OWORD *)(v637 + 200) = 0u;
          *(_OWORD *)(v637 + 216) = 0u;
          *(_QWORD *)(v637 + 232) = 0;
          *(_DWORD *)(v637 + 240) = 1065353216;
          *(_QWORD *)v637 = &off_1E42B30D8;
          *(_QWORD *)(v637 + 8) = 0x1F5CA557A3AFA83FLL;
          *(_QWORD *)(v637 + 248) = v493;
          v638 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v493 + 15, 0x1F5CA557A3AFA83FuLL, &v713);
          v639 = v638[3];
          v638[3] = v637;
          if (v639)
            (*(void (**)(uint64_t))(*(_QWORD *)v639 + 8))(v639);
          *(_QWORD *)&buf = 0x1F5CA557A3AFA83FLL;
          *((_QWORD *)&buf + 1) = "md::components::FlexSelectionInfo]";
          *(_QWORD *)&v731 = 33;
          gdc::Registry::_registerStorageDataSignals((uint64_t)v493, 0x1F5CA557A3AFA83FLL, (uint64_t)&buf, (uint64_t *)(v637 + 104));
LABEL_960:
          gdc::ComponentStorageWrapper<md::ls::BoundsWidth>::emplace((uint64_t *)v637, v628, &v702);
          ++v626;
          v492 = v707;
        }
        while (v626 < v708 - v707);
      }
    }
LABEL_761:
    v163 += 8;
    if (v163 != (char *)v696)
      continue;
    break;
  }
  if (v704)
  {
    v705 = v704;
    operator delete(v704);
    v492 = v707;
  }
  v163 = __pd;
  if (v492)
  {
    v708 = v492;
    operator delete(v492);
  }
LABEL_1006:
  v675 = (std::__shared_weak_count *)v710;
  if (v710)
  {
    v676 = v711;
    v677 = v710;
    if (v711 != v710)
    {
      do
      {
        v678 = (void *)v676[-1].__shared_weak_owners_;
        v676 = (std::__shared_weak_count *)((char *)v676 - 8);

      }
      while (v676 != v675);
      v677 = v710;
    }
    v711 = v675;
    operator delete(v677);
  }
LABEL_1011:
  if (v163)
    operator delete(v163);
LABEL_1013:
  if (!v725)
  {
    std::__throw_bad_function_call[abi:nn180100]();
    goto LABEL_1029;
  }
  ((void (*)(uint64_t ***))(*v725)[6])(v725);
  p_buf = v725;
  if (v725 == &v722)
  {
    v75 = 4;
    p_buf = &v722;
LABEL_1018:
    ((void (*)(void))(*p_buf)[v75])();
    return;
  }
LABEL_1015:
  if (p_buf)
  {
    v75 = 5;
    goto LABEL_1018;
  }
}

void sub_19FAD75F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39,uint64_t a40,uint64_t a41,uint64_t a42,char a43,uint64_t a44,uint64_t a45,uint64_t a46,char a47)
{
  if (__p)
    operator delete(__p);
  if (a24)
    operator delete(a24);
  std::vector<VKTransitLineMarker * {__strong}>::~vector[abi:nn180100](&a27);
  if (a18)
    operator delete(a18);
  geo::ScopedFunctions::~ScopedFunctions((geo::ScopedFunctions *)&a47);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<md::RouteLineMaskDesc>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DB9E8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<md::RouteLineMaskDesc>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DB9E8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

void md::SceneQueryLogic::updatePendingRegistries(uint64_t a1, uint64_t **a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t **v8;
  unsigned int v9;
  uint64_t *v10;
  uint64_t *v11;
  unsigned int v12;
  BOOL v13;
  uint64_t **v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t *v17;
  BOOL v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t **v29;
  uint64_t **v30;
  unsigned int v31;
  unsigned int v32;
  uint64_t *v33;
  uint64_t v34;
  unsigned __int16 *v35;
  unsigned __int16 *v36;
  unsigned int v37;
  unint64_t v38;
  unint64_t v39;
  unsigned __int16 *v40;
  unsigned __int16 *v41;
  unsigned int v42;
  unsigned int v43;
  uint64_t *v44;
  uint64_t *v45;
  uint64_t *v46;

  v4 = *(_QWORD *)(a1 + 152);
  v5 = *(_QWORD *)(v4 + 408);
  v6 = *(_QWORD *)(v4 + 416);
  if (v5 != v6)
  {
    v7 = *(uint64_t **)(a1 + 464);
    if (v7)
    {
      v8 = (uint64_t **)(a1 + 464);
LABEL_4:
      v9 = *(unsigned __int16 *)(*(_QWORD *)v5 + 40);
      v10 = (uint64_t *)(a1 + 464);
      v11 = v7;
      do
      {
        v12 = *(unsigned __int16 *)(v11[4] + 40);
        v13 = v12 >= v9;
        if (v12 >= v9)
          v14 = (uint64_t **)v11;
        else
          v14 = (uint64_t **)(v11 + 1);
        if (v13)
          v10 = v11;
        v11 = *v14;
      }
      while (*v14);
      if (v10 != (uint64_t *)v8 && v9 >= *(unsigned __int16 *)(v10[4] + 40))
      {
        v15 = (uint64_t *)v10[1];
        v16 = v10;
        if (v15)
        {
          do
          {
            v17 = v15;
            v15 = (uint64_t *)*v15;
          }
          while (v15);
        }
        else
        {
          do
          {
            v17 = (uint64_t *)v16[2];
            v18 = *v17 == (_QWORD)v16;
            v16 = v17;
          }
          while (!v18);
        }
        if (*(uint64_t **)(a1 + 456) == v10)
          *(_QWORD *)(a1 + 456) = v17;
        --*(_QWORD *)(a1 + 472);
        std::__tree_remove[abi:nn180100]<std::__tree_node_base<void *> *>(v7, v10);
        operator delete(v10);
      }
      while (1)
      {
        v5 += 8;
        if (v5 == v6)
          break;
        v7 = *v8;
        if (*v8)
          goto LABEL_4;
      }
    }
  }
  v19 = *(uint64_t **)(a1 + 456);
  v20 = (uint64_t *)(a1 + 464);
  if (v19 != (uint64_t *)(a1 + 464))
  {
    do
    {
      v34 = *(_QWORD *)(a1 + 152);
      v35 = *(unsigned __int16 **)(v34 + 456);
      v36 = *(unsigned __int16 **)(v34 + 464);
      if (v36 == v35)
        goto LABEL_53;
      v37 = *(unsigned __int16 *)(v19[4] + 40);
      v38 = v36 - v35;
      do
      {
        v39 = v38 >> 1;
        v40 = &v35[v38 >> 1];
        v42 = *v40;
        v41 = v40 + 1;
        v38 += ~(v38 >> 1);
        if (v42 < v37)
          v35 = v41;
        else
          v38 = v39;
      }
      while (v38);
      if (v35 == v36)
      {
LABEL_53:
        v44 = (uint64_t *)v19[1];
        if (v44)
          goto LABEL_54;
      }
      else
      {
        v43 = *v35;
        v44 = (uint64_t *)v19[1];
        if (v43 <= v37)
        {
          v46 = v19;
          if (v44)
          {
            do
            {
              v45 = v44;
              v44 = (uint64_t *)*v44;
            }
            while (v44);
          }
          else
          {
            do
            {
              v45 = (uint64_t *)v46[2];
              v18 = *v45 == (_QWORD)v46;
              v46 = v45;
            }
            while (!v18);
          }
          if (*(uint64_t **)(a1 + 456) == v19)
            *(_QWORD *)(a1 + 456) = v45;
          v33 = *(uint64_t **)(a1 + 464);
          --*(_QWORD *)(a1 + 472);
          std::__tree_remove[abi:nn180100]<std::__tree_node_base<void *> *>(v33, v19);
          operator delete(v19);
          goto LABEL_42;
        }
        if (v44)
        {
          do
          {
LABEL_54:
            v45 = v44;
            v44 = (uint64_t *)*v44;
          }
          while (v44);
          goto LABEL_42;
        }
      }
      do
      {
        v45 = (uint64_t *)v19[2];
        v18 = *v45 == (_QWORD)v19;
        v19 = v45;
      }
      while (!v18);
LABEL_42:
      v19 = v45;
    }
    while (v45 != v20);
  }
  v21 = *a2;
  v22 = a2[1];
  while (v21 != v22)
  {
    v26 = *v21;
    v27 = gdc::Registry::storage<md::components::SupportsFlexing>(*v21);
    if (*(_QWORD *)(v27 + 88) != *(_QWORD *)(v27 + 80))
    {
      v28 = (uint64_t *)*v20;
      v29 = (uint64_t **)(a1 + 464);
      v30 = (uint64_t **)(a1 + 464);
      if (*v20)
      {
        v31 = *(unsigned __int16 *)(v26 + 40);
        while (1)
        {
          while (1)
          {
            v30 = (uint64_t **)v28;
            v32 = *(unsigned __int16 *)(v28[4] + 40);
            if (v31 >= v32)
              break;
            v28 = *v30;
            v29 = v30;
            if (!*v30)
              goto LABEL_27;
          }
          if (v32 >= v31)
            break;
          v28 = v30[1];
          if (!v28)
          {
            v29 = v30 + 1;
            goto LABEL_27;
          }
        }
      }
      else
      {
LABEL_27:
        v23 = (uint64_t *)operator new(0x28uLL);
        v23[4] = v26;
        *v23 = 0;
        v23[1] = 0;
        v23[2] = (uint64_t)v30;
        *v29 = v23;
        v24 = **(_QWORD **)(a1 + 456);
        if (v24)
        {
          *(_QWORD *)(a1 + 456) = v24;
          v25 = *v29;
        }
        else
        {
          v25 = v23;
        }
        std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 464), v25);
        ++*(_QWORD *)(a1 + 472);
      }
    }
    ++v21;
  }
}

void std::__hash_table<md::SceneQueryEvent,std::hash<md::SceneQueryEvent>,std::equal_to<md::SceneQueryEvent>,std::allocator<md::SceneQueryEvent>>::__emplace_unique_key_args<md::SceneQueryEvent,md::SceneQueryEvent&>(float *a1, unsigned __int8 a2, char a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  uint64_t ***v9;
  uint64_t **v10;
  unint64_t v11;
  uint64_t *v12;
  _QWORD *v13;
  float v14;
  float v15;
  _BOOL8 v16;
  unint64_t v17;
  unint64_t v18;
  size_t prime;
  void *v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t *v24;
  size_t v25;
  size_t v26;
  size_t v27;
  _QWORD *i;
  size_t v29;
  uint64_t v30;
  unint64_t v31;
  uint8x8_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  size_t v36;
  _QWORD *v37;
  _QWORD *v38;
  unint64_t v39;
  _QWORD *v40;

  v6 = a2;
  v7 = *((_QWORD *)a1 + 1);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = a2;
      if (v7 <= a2)
        v3 = a2 % v7;
    }
    else
    {
      v3 = ((_DWORD)v7 - 1) & a2;
    }
    v9 = *(uint64_t ****)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      v10 = *v9;
      if (v10)
      {
        if (v8.u32[0] < 2uLL)
        {
          while (1)
          {
            v12 = v10[1];
            if (v12 == (uint64_t *)a2)
            {
              if (*((unsigned __int8 *)v10 + 16) == a2)
                return;
            }
            else if (((unint64_t)v12 & (v7 - 1)) != v3)
            {
              goto LABEL_22;
            }
            v10 = (uint64_t **)*v10;
            if (!v10)
              goto LABEL_22;
          }
        }
        do
        {
          v11 = (unint64_t)v10[1];
          if (v11 == a2)
          {
            if (*((unsigned __int8 *)v10 + 16) == a2)
              return;
          }
          else
          {
            if (v11 >= v7)
              v11 %= v7;
            if (v11 != v3)
              break;
          }
          v10 = (uint64_t **)*v10;
        }
        while (v10);
      }
    }
  }
LABEL_22:
  v13 = operator new(0x18uLL);
  *v13 = 0;
  v13[1] = v6;
  *((_BYTE *)v13 + 16) = a3;
  v14 = (float)(unint64_t)(*((_QWORD *)a1 + 3) + 1);
  v15 = a1[8];
  if (!v7 || (float)(v15 * (float)v7) < v14)
  {
    v16 = 1;
    if (v7 >= 3)
      v16 = (v7 & (v7 - 1)) != 0;
    v17 = v16 | (2 * v7);
    v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18)
      prime = v18;
    else
      prime = v17;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v7 = *((_QWORD *)a1 + 1);
    }
    if (prime <= v7)
    {
      if (prime >= v7)
        goto LABEL_59;
      v31 = vcvtps_u32_f32((float)*((unint64_t *)a1 + 3) / a1[8]);
      if (v7 < 3 || (v32 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v32.i16[0] = vaddlv_u8(v32), v32.u32[0] > 1uLL))
      {
        v31 = std::__next_prime(v31);
      }
      else
      {
        v33 = 1 << -(char)__clz(v31 - 1);
        if (v31 >= 2)
          v31 = v33;
      }
      if (prime <= v31)
        prime = v31;
      if (prime >= v7)
      {
        v7 = *((_QWORD *)a1 + 1);
LABEL_59:
        if ((v7 & (v7 - 1)) != 0)
        {
          if (v7 <= v6)
            v3 = v6 % v7;
          else
            v3 = v6;
        }
        else
        {
          v3 = ((_DWORD)v7 - 1) & v6;
        }
        goto LABEL_72;
      }
      if (!prime)
      {
        v40 = *(_QWORD **)a1;
        *(_QWORD *)a1 = 0;
        if (v40)
          operator delete(v40);
        v7 = 0;
        *((_QWORD *)a1 + 1) = 0;
        goto LABEL_59;
      }
    }
    if (prime >> 61)
      std::__throw_bad_array_new_length[abi:nn180100]();
    v20 = operator new(8 * prime);
    v21 = *(_QWORD **)a1;
    *(_QWORD *)a1 = v20;
    if (v21)
      operator delete(v21);
    v22 = 0;
    *((_QWORD *)a1 + 1) = prime;
    do
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v22++) = 0;
    while (prime != v22);
    v24 = (uint64_t *)(a1 + 4);
    v23 = (_QWORD *)*((_QWORD *)a1 + 2);
    if (!v23)
    {
LABEL_58:
      v7 = prime;
      goto LABEL_59;
    }
    v25 = v23[1];
    v26 = prime - 1;
    if ((prime & (prime - 1)) == 0)
    {
      v27 = v25 & v26;
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v27) = v24;
      for (i = (_QWORD *)*v23; *v23; i = (_QWORD *)*v23)
      {
        v29 = i[1] & v26;
        if (v29 == v27)
        {
          v23 = i;
        }
        else if (*(_QWORD *)(*(_QWORD *)a1 + 8 * v29))
        {
          *v23 = *i;
          v30 = 8 * v29;
          *i = **(_QWORD **)(*(_QWORD *)a1 + v30);
          **(_QWORD **)(*(_QWORD *)a1 + v30) = i;
        }
        else
        {
          *(_QWORD *)(*(_QWORD *)a1 + 8 * v29) = v23;
          v23 = i;
          v27 = v29;
        }
      }
      goto LABEL_58;
    }
    if (v25 >= prime)
      v25 %= prime;
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v25) = v24;
    v34 = (_QWORD *)*v23;
    if (!*v23)
      goto LABEL_58;
    while (1)
    {
      v36 = v34[1];
      if (v36 >= prime)
        v36 %= prime;
      if (v36 != v25)
      {
        if (!*(_QWORD *)(*(_QWORD *)a1 + 8 * v36))
        {
          *(_QWORD *)(*(_QWORD *)a1 + 8 * v36) = v23;
          goto LABEL_63;
        }
        *v23 = *v34;
        v35 = 8 * v36;
        *v34 = **(_QWORD **)(*(_QWORD *)a1 + v35);
        **(_QWORD **)(*(_QWORD *)a1 + v35) = v34;
        v34 = v23;
      }
      v36 = v25;
LABEL_63:
      v23 = v34;
      v34 = (_QWORD *)*v34;
      v25 = v36;
      if (!v34)
        goto LABEL_58;
    }
  }
LABEL_72:
  v37 = *(_QWORD **)a1;
  v38 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v38)
  {
    *v13 = *v38;
LABEL_80:
    *v38 = v13;
    goto LABEL_81;
  }
  *v13 = *((_QWORD *)a1 + 2);
  *((_QWORD *)a1 + 2) = v13;
  v37[v3] = a1 + 4;
  if (*v13)
  {
    v39 = *(_QWORD *)(*v13 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v39 >= v7)
        v39 %= v7;
    }
    else
    {
      v39 &= v7 - 1;
    }
    v38 = (_QWORD *)(*(_QWORD *)a1 + 8 * v39);
    goto LABEL_80;
  }
LABEL_81:
  ++*((_QWORD *)a1 + 3);
}

void sub_19FAD8130(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<md::SceneQueryLogic::handleNavigationFlex(md::LayoutContext const&,md::CameraContext const&,md::NavigationContext const&,md::StyleLogicContext const&,std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>> const&,BOOL,md::SceneQueryContext &)::$_0,std::allocator<md::SceneQueryLogic::handleNavigationFlex(md::LayoutContext const&,md::CameraContext const&,md::NavigationContext const&,md::StyleLogicContext const&,std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>> const&,BOOL,md::SceneQueryContext &)::$_0>,void ()(void)>::operator()(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  os_signpost_id_t v4;
  uint8_t v5[16];

  if (GEOGetVectorKitPerformanceLog_onceToken != -1)
    dispatch_once(&GEOGetVectorKitPerformanceLog_onceToken, &__block_literal_global_13_11780);
  v2 = (id)GEOGetVectorKitPerformanceLog_log;
  v3 = v2;
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 80);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)v5 = 0;
    _os_signpost_emit_with_name_impl(&dword_19F029000, v3, OS_SIGNPOST_INTERVAL_BEGIN, v4, "RouteDidChangeForSceneQueryLogic", (const char *)&unk_1A0189141, v5, 2u);
  }

}

void md::SceneQueryLogic::clearNavigationFlexState(md::SceneQueryLogic *this)
{
  char *v1;
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t i;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  BOOL v21;
  char *v22;
  char *v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  BOOL v52;
  uint64_t v53;
  uint64_t *v54;
  md::SceneQueryLogic *v55;
  GEOComposedRoute *v56;
  char *v58;
  uint64_t v59;
  _QWORD v60[2];

  v1 = (char *)*((_QWORD *)this + 60);
  v58 = (char *)this + 488;
  if (v1 == (char *)this + 488)
  {
LABEL_2:
    std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((_QWORD **)this + 61));
    *((_QWORD *)this + 61) = 0;
    *((_QWORD *)this + 62) = 0;
    *((_QWORD *)this + 60) = v58;
    if (*((_QWORD *)this + 66))
    {
      v2 = (_QWORD *)*((_QWORD *)this + 65);
      if (v2)
      {
        do
        {
          v3 = (_QWORD *)*v2;
          operator delete(v2);
          v2 = v3;
        }
        while (v3);
      }
      *((_QWORD *)this + 65) = 0;
      v4 = *((_QWORD *)this + 64);
      if (v4)
      {
        for (i = 0; i != v4; ++i)
          *(_QWORD *)(*((_QWORD *)this + 63) + 8 * i) = 0;
      }
      *((_QWORD *)this + 66) = 0;
    }
  }
  else
  {
    while (1)
    {
      v6 = *((_QWORD *)v1 + 5);
      v7 = (_QWORD *)gdc::Registry::storage<md::components::FlexSelectionInfo>(v6);
      v8 = v7;
      if (v7[29])
      {
        v9 = (_QWORD *)v7[28];
        if (v9)
          break;
      }
LABEL_16:
      v8[8] = v8[7];
      v8[11] = v8[10];
      v14 = (_QWORD *)gdc::Registry::storage<md::components::ClientState>(v6);
      v15 = gdc::Registry::storage<md::components::SupportsFlexing>(v6);
      v16 = (_QWORD *)v15;
      v17 = v15 + 32;
      v18 = v14[7];
      v19 = v14[8];
      if (*(_QWORD *)(v15 + 64) - *(_QWORD *)(v15 + 56) >= (unint64_t)(v19 - v18))
        v20 = v14 + 4;
      else
        v20 = (_QWORD *)(v15 + 32);
      v21 = v14 + 4 != v20 || v18 == v19;
      if (!v21)
      {
        v24 = v14[10];
        do
        {
          v25 = *(unsigned int *)(v18 + 4);
          v26 = v16[4];
          if (v25 >> 7 < (v16[5] - v26) >> 3)
          {
            v27 = *(_QWORD *)(v26 + 8 * (v25 >> 7));
            if (v27)
            {
              v28 = *(unsigned __int16 *)(v27 + 2 * (v25 & 0x7F));
              v30 = v16[7];
              v29 = v16[8];
              if (v28 < (v29 - v30) >> 3)
              {
                v31 = v30 + 8 * v28;
                if (v31 != v29 && *(_DWORD *)(v31 + 4) == (_DWORD)v25)
                {
                  v33 = *(_QWORD *)v18;
                  if (geo::intern_linear_map<gss::StyleAttribute,unsigned short,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::erase(v24, 0x10059u))
                  {
                    v34 = (uint64_t *)gdc::Registry::storage<md::components::FlexClientStateChanged>(v6);
                    gdc::ComponentStorageWrapper<md::components::Collapsible>::emplace(v34, v33);
                  }
                }
              }
            }
          }
          v24 += 16;
          v18 += 8;
        }
        while (v18 != v19);
      }
      if ((_QWORD *)v17 == v20)
      {
        v35 = v16[7];
        v36 = v16[8];
        while (v35 != v36)
        {
          v37 = *(unsigned int *)(v35 + 4);
          v38 = v14[4];
          v39 = (v14[5] - v38) >> 3;
          if (v37 >> 7 < v39)
          {
            v40 = *(_QWORD *)(v38 + 8 * (v37 >> 7));
            if (v40)
            {
              v41 = *(unsigned __int16 *)(v40 + 2 * (v37 & 0x7F));
              v43 = v14[7];
              v42 = v14[8];
              v44 = (v42 - v43) >> 3;
              if (v44 > v41)
              {
                v45 = v43 + 8 * v41;
                if (v45 != v42 && *(_DWORD *)(v45 + 4) == (_DWORD)v37)
                {
                  if ((v47 = *(_QWORD *)v35, v48 = *(_QWORD *)v35 >> 39, v48 < v39)
                    && (v49 = *(_QWORD *)(v38 + 8 * v48)) != 0
                    && (v50 = *(unsigned __int16 *)(v49 + 2 * (HIDWORD(v47) & 0x7F)), v44 > v50)
                    && ((v51 = v43 + 8 * v50, v51 != v42) ? (v52 = *(_DWORD *)(v51 + 4) == HIDWORD(v47)) : (v52 = 0), v52))
                  {
                    v53 = v14[10] + 16 * v50;
                  }
                  else
                  {
                    v53 = v14[11];
                  }
                  if (geo::intern_linear_map<gss::StyleAttribute,unsigned short,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::erase(v53, 0x10059u))
                  {
                    v54 = (uint64_t *)gdc::Registry::storage<md::components::FlexClientStateChanged>(v6);
                    gdc::ComponentStorageWrapper<md::components::Collapsible>::emplace(v54, v47);
                  }
                }
              }
            }
          }
          v35 += 8;
        }
      }
      v22 = (char *)*((_QWORD *)v1 + 1);
      if (v22)
      {
        do
        {
          v23 = v22;
          v22 = *(char **)v22;
        }
        while (v22);
      }
      else
      {
        do
        {
          v23 = (char *)*((_QWORD *)v1 + 2);
          v21 = *(_QWORD *)v23 == (_QWORD)v1;
          v1 = v23;
        }
        while (!v21);
      }
      v1 = v23;
      if (v23 == v58)
        goto LABEL_2;
    }
    v10 = v7[31];
    v11 = v7[7];
    v12 = (v7[8] - v11) >> 3;
    while (1)
    {
      v60[0] = v11;
      v60[1] = v12;
      v59 = v10;
      v13 = v9[6];
      if (!v13)
        break;
      (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v13 + 48))(v13, &v59, v60);
      v9 = (_QWORD *)*v9;
      if (!v9)
        goto LABEL_16;
    }
    std::__throw_bad_function_call[abi:nn180100]();
    md::SceneQueryLogic::prepareNavigationFlexSegmentsForRoute(v55, v56);
  }
}

void md::SceneQueryLogic::prepareNavigationFlexSegmentsForRoute(md::SceneQueryLogic *this, GEOComposedRoute *a2)
{
  GEOComposedRoute *v3;
  uint64_t *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t i;
  void *v8;
  double *v9;
  void *v10;
  void *v11;
  unint64_t k;
  double *v13;
  uint64_t v14;
  double v15;
  double v16;
  void *v17;
  double v18;
  unint64_t v19;
  float v20;
  float v21;
  float v22;
  double v23;
  double v24;
  uint64_t v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  float *v36;
  double v37;
  double v38;
  double v39;
  _QWORD *v40;
  _QWORD *v41;
  double v42;
  unint64_t v43;
  double *v44;
  double *v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  char *v49;
  double *v50;
  double *v51;
  __int128 v52;
  __int128 v53;
  _QWORD *v54;
  void *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t j;
  uint64_t *v59;
  GEOComposedRoute *v60;
  double v61;
  double v62;
  double v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  void *v71;
  _BYTE v72[128];
  uint64_t v73;

  v73 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  v4 = (uint64_t *)((char *)this + 168);
  if (*((_QWORD *)this + 24))
  {
    v5 = (_QWORD *)*((_QWORD *)this + 23);
    if (v5)
    {
      do
      {
        v54 = (_QWORD *)*v5;
        v55 = (void *)v5[3];
        if (v55)
        {
          v5[4] = v55;
          operator delete(v55);
        }
        operator delete(v5);
        v5 = v54;
      }
      while (v54);
    }
    *((_QWORD *)this + 23) = 0;
    v6 = *((_QWORD *)this + 22);
    if (v6)
    {
      for (i = 0; i != v6; ++i)
        *(_QWORD *)(*v4 + 8 * i) = 0;
    }
    *((_QWORD *)this + 24) = 0;
  }
  if (v3)
  {
    v67 = 0u;
    v68 = 0u;
    v69 = 0u;
    v70 = 0u;
    -[GEOComposedRoute sections](v3, "sections");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v59 = v4;
    v57 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v67, v72, 16);
    if (v57)
    {
      v56 = *(_QWORD *)v68;
      v9 = (double *)MEMORY[0x1E0D266F8];
      v60 = v3;
      v10 = v8;
      do
      {
        for (j = 0; j != v57; ++j)
        {
          if (*(_QWORD *)v68 != v56)
            objc_enumerationMutation(v8);
          v11 = *(void **)(*((_QWORD *)&v67 + 1) + 8 * j);
          v71 = v11;
          for (k = 1; k < objc_msgSend(v11, "pointCount"); ++k)
          {
            v14 = objc_msgSend(v11, "points");
            if (v11)
            {
              objc_msgSend(v11, "bounds");
              v15 = *(double *)&v64;
              v16 = *((double *)&v65 + 1);
              v61 = *((double *)&v64 + 1);
              v62 = *(double *)&v65;
              v17 = v11;
              v63 = *((double *)&v66 + 1);
              v18 = *(double *)&v66;
            }
            else
            {
              v17 = 0;
              v65 = 0u;
              v66 = 0u;
              v62 = 0.0;
              v63 = 0.0;
              v18 = 0.0;
              v16 = 0.0;
              v64 = 0u;
              v61 = 0.0;
              v15 = 0.0;
            }
            v19 = v14 + 12 * k;
            v21 = *(float *)(v19 - 12);
            v20 = *(float *)(v19 - 8);
            v22 = *(float *)(v19 - 4);
            v23 = *v9;
            v24 = v9[1];
            v25 = objc_msgSend(v17, "points");
            if (v11)
            {
              v8 = v10;
              objc_msgSend(v11, "bounds");
              v26 = *((double *)&v64 + 1);
              v27 = *(double *)&v64;
              v29 = *((double *)&v65 + 1);
              v28 = *(double *)&v65;
              v30 = *((double *)&v66 + 1);
              v31 = *(double *)&v66;
            }
            else
            {
              v65 = 0u;
              v66 = 0u;
              v30 = 0.0;
              v31 = 0.0;
              v29 = 0.0;
              v28 = 0.0;
              v64 = 0u;
              v26 = 0.0;
              v27 = 0.0;
              v8 = v10;
            }
            v32 = v61 + v18 * (float)(1.0 - v20);
            v33 = (v15 + v16 * v21) / v23;
            v34 = v32 / v24;
            v35 = (v62 + v63 * v22) * 0.0000000249532021;
            v36 = (float *)(v25 + 12 * k);
            v37 = (v27 + v29 * *v36) / *v9;
            v38 = (v26 + v31 * (float)(1.0 - v36[1])) / v9[1];
            v39 = (v28 + v30 * v36[2]) * 0.0000000249532021;
            if (vabdd_f64(v33, v37) >= 0.0000000249532021
              || vabdd_f64(v38, v34) >= 0.0000000249532021
              || vabdd_f64(v35, v39) >= 0.0000000249532021)
            {
              v40 = std::__hash_table<std::__hash_value_type<GEOComposedRouteSection *,std::vector<gm::LineSegment<double,3>>>,std::__unordered_map_hasher<std::vector,std::__unordered_map_hasher,md::SceneQueryLogic::pointer_hasher<GEOComposedRouteSection>,std::equal_to<std::vector>,true>,std::__unordered_map_equal<std::vector,std::__unordered_map_hasher,std::__unordered_map_hasher<std::vector,std::__unordered_map_hasher,md::SceneQueryLogic::pointer_hasher<GEOComposedRouteSection>,std::equal_to<std::vector>,true>,std::equal_to,true>,std::allocator<std::allocator><std::__unordered_map_hasher>>::__emplace_unique_key_args<std::vector,std::piecewise_construct_t const&,std::tuple<GEOComposedRouteSection * const&>,GEOComposedRouteSection * const<>>(v59, (unint64_t)v11, &v71);
              v41 = v40;
              v42 = 1.0 - v34;
              v44 = (double *)v40[4];
              v43 = v40[5];
              if ((unint64_t)v44 < v43)
              {
                *v44 = v33;
                v44[1] = v42;
                v44[2] = v35;
                v44[3] = v37 - v33;
                v44[4] = v34 - v38;
                v44[5] = v39 - v35;
                v13 = v44 + 6;
              }
              else
              {
                v45 = (double *)v40[3];
                v46 = 0xAAAAAAAAAAAAAAABLL * (((char *)v44 - (char *)v45) >> 4) + 1;
                if (v46 > 0x555555555555555)
                  abort();
                v47 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v43 - (_QWORD)v45) >> 4);
                if (2 * v47 > v46)
                  v46 = 2 * v47;
                if (v47 >= 0x2AAAAAAAAAAAAAALL)
                  v48 = 0x555555555555555;
                else
                  v48 = v46;
                if (v48)
                {
                  if (v48 > 0x555555555555555)
                    std::__throw_bad_array_new_length[abi:nn180100]();
                  v49 = (char *)operator new(48 * v48);
                }
                else
                {
                  v49 = 0;
                }
                v50 = (double *)&v49[16 * (((char *)v44 - (char *)v45) >> 4)];
                *v50 = v33;
                v50[1] = v42;
                v50[2] = v35;
                v50[3] = v37 - v33;
                v50[4] = v34 - v38;
                v50[5] = v39 - v35;
                v51 = v50;
                if (v44 != v45)
                {
                  do
                  {
                    v52 = *((_OWORD *)v44 - 3);
                    v53 = *((_OWORD *)v44 - 1);
                    *((_OWORD *)v51 - 2) = *((_OWORD *)v44 - 2);
                    *((_OWORD *)v51 - 1) = v53;
                    *((_OWORD *)v51 - 3) = v52;
                    v51 -= 6;
                    v44 -= 6;
                  }
                  while (v44 != v45);
                  v44 = (double *)v41[3];
                }
                v13 = v50 + 6;
                v41[3] = v51;
                v41[4] = v50 + 6;
                v41[5] = &v49[48 * v48];
                if (v44)
                  operator delete(v44);
              }
              v41[4] = v13;
              v8 = v10;
            }
            v3 = v60;
          }
        }
        v57 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v67, v72, 16);
      }
      while (v57);
    }

  }
}

void sub_19FAD89B4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void std::__function::__func<md::SceneQueryLogic::handleNavigationFlex(md::LayoutContext const&,md::CameraContext const&,md::NavigationContext const&,md::StyleLogicContext const&,std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>> const&,BOOL,md::SceneQueryContext &)::$_2,std::allocator<md::SceneQueryLogic::handleNavigationFlex(md::LayoutContext const&,md::CameraContext const&,md::NavigationContext const&,md::StyleLogicContext const&,std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>> const&,BOOL,md::SceneQueryContext &)::$_2>,void ()(void)>::operator()(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  os_signpost_id_t v4;
  uint8_t v5[16];

  if (GEOGetVectorKitPerformanceLog_onceToken != -1)
    dispatch_once(&GEOGetVectorKitPerformanceLog_onceToken, &__block_literal_global_13_11780);
  v2 = (id)GEOGetVectorKitPerformanceLog_log;
  v3 = v2;
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 80);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)v5 = 0;
    _os_signpost_emit_with_name_impl(&dword_19F029000, v3, OS_SIGNPOST_INTERVAL_BEGIN, v4, "ProcessPendingFeaturesForSceneQueryLogic", (const char *)&unk_1A0189141, v5, 2u);
  }

}

void std::__function::__func<md::SceneQueryLogic::handleNavigationFlex(md::LayoutContext const&,md::CameraContext const&,md::NavigationContext const&,md::StyleLogicContext const&,std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>> const&,BOOL,md::SceneQueryContext &)::$_4,std::allocator<md::SceneQueryLogic::handleNavigationFlex(md::LayoutContext const&,md::CameraContext const&,md::NavigationContext const&,md::StyleLogicContext const&,std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>> const&,BOOL,md::SceneQueryContext &)::$_4>,void ()(void)>::operator()(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  os_signpost_id_t v4;
  uint8_t v5[16];

  if (GEOGetVectorKitPerformanceLog_onceToken != -1)
    dispatch_once(&GEOGetVectorKitPerformanceLog_onceToken, &__block_literal_global_13_11780);
  v2 = (id)GEOGetVectorKitPerformanceLog_log;
  v3 = v2;
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 80);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)v5 = 0;
    _os_signpost_emit_with_name_impl(&dword_19F029000, v3, OS_SIGNPOST_INTERVAL_BEGIN, v4, "ClearExitingForSceneQueryLogic", (const char *)&unk_1A0189141, v5, 2u);
  }

}

void std::__function::__func<md::SceneQueryLogic::handleNavigationFlex(md::LayoutContext const&,md::CameraContext const&,md::NavigationContext const&,md::StyleLogicContext const&,std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>> const&,BOOL,md::SceneQueryContext &)::$_5,std::allocator<md::SceneQueryLogic::handleNavigationFlex(md::LayoutContext const&,md::CameraContext const&,md::NavigationContext const&,md::StyleLogicContext const&,std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>> const&,BOOL,md::SceneQueryContext &)::$_5>,void ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::SceneQueryLogic::handleNavigationFlex(md::LayoutContext const&,md::CameraContext const&,md::NavigationContext const&,md::StyleLogicContext const&,std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>> const&,BOOL,md::SceneQueryContext &)::$_5,std::allocator<md::SceneQueryLogic::handleNavigationFlex(md::LayoutContext const&,md::CameraContext const&,md::NavigationContext const&,md::StyleLogicContext const&,std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>> const&,BOOL,md::SceneQueryContext &)::$_5>,void ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42CCB18;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<md::SceneQueryLogic::handleNavigationFlex(md::LayoutContext const&,md::CameraContext const&,md::NavigationContext const&,md::StyleLogicContext const&,std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>> const&,BOOL,md::SceneQueryContext &)::$_5,std::allocator<md::SceneQueryLogic::handleNavigationFlex(md::LayoutContext const&,md::CameraContext const&,md::NavigationContext const&,md::StyleLogicContext const&,std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>> const&,BOOL,md::SceneQueryContext &)::$_5>,void ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42CCB18;
  a2[1] = v2;
  return result;
}

void std::__function::__func<md::SceneQueryLogic::handleNavigationFlex(md::LayoutContext const&,md::CameraContext const&,md::NavigationContext const&,md::StyleLogicContext const&,std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>> const&,BOOL,md::SceneQueryContext &)::$_5,std::allocator<md::SceneQueryLogic::handleNavigationFlex(md::LayoutContext const&,md::CameraContext const&,md::NavigationContext const&,md::StyleLogicContext const&,std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>> const&,BOOL,md::SceneQueryContext &)::$_5>,void ()(void)>::operator()(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  os_signpost_id_t v4;
  uint8_t v5[16];

  if (GEOGetVectorKitPerformanceLog_onceToken != -1)
    dispatch_once(&GEOGetVectorKitPerformanceLog_onceToken, &__block_literal_global_13_11780);
  v2 = (id)GEOGetVectorKitPerformanceLog_log;
  v3 = v2;
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 80);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)v5 = 0;
    _os_signpost_emit_with_name_impl(&dword_19F029000, v3, OS_SIGNPOST_INTERVAL_END, v4, "ClearExitingForSceneQueryLogic", (const char *)&unk_1A0189141, v5, 2u);
  }

}

void std::__function::__func<md::SceneQueryLogic::handleNavigationFlex(md::LayoutContext const&,md::CameraContext const&,md::NavigationContext const&,md::StyleLogicContext const&,std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>> const&,BOOL,md::SceneQueryContext &)::$_4,std::allocator<md::SceneQueryLogic::handleNavigationFlex(md::LayoutContext const&,md::CameraContext const&,md::NavigationContext const&,md::StyleLogicContext const&,std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>> const&,BOOL,md::SceneQueryContext &)::$_4>,void ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::SceneQueryLogic::handleNavigationFlex(md::LayoutContext const&,md::CameraContext const&,md::NavigationContext const&,md::StyleLogicContext const&,std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>> const&,BOOL,md::SceneQueryContext &)::$_4,std::allocator<md::SceneQueryLogic::handleNavigationFlex(md::LayoutContext const&,md::CameraContext const&,md::NavigationContext const&,md::StyleLogicContext const&,std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>> const&,BOOL,md::SceneQueryContext &)::$_4>,void ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42CCAD0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<md::SceneQueryLogic::handleNavigationFlex(md::LayoutContext const&,md::CameraContext const&,md::NavigationContext const&,md::StyleLogicContext const&,std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>> const&,BOOL,md::SceneQueryContext &)::$_4,std::allocator<md::SceneQueryLogic::handleNavigationFlex(md::LayoutContext const&,md::CameraContext const&,md::NavigationContext const&,md::StyleLogicContext const&,std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>> const&,BOOL,md::SceneQueryContext &)::$_4>,void ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42CCAD0;
  a2[1] = v2;
  return result;
}

_QWORD *std::__hash_table<std::__hash_value_type<unsigned short,unsigned int>,std::__unordered_map_hasher<unsigned short,std::__hash_value_type<unsigned short,unsigned int>,std::hash<unsigned short>,std::equal_to<unsigned short>,true>,std::__unordered_map_equal<unsigned short,std::__hash_value_type<unsigned short,unsigned int>,std::equal_to<unsigned short>,std::hash<unsigned short>,true>,std::allocator<std::__hash_value_type<unsigned short,unsigned int>>>::__emplace_unique_key_args<unsigned short,std::piecewise_construct_t const&,std::tuple<unsigned short &&>,std::tuple<>>(float *a1, unsigned __int16 a2, _WORD *a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  void **v9;
  _QWORD *v10;
  unint64_t v11;
  uint64_t v12;
  float v13;
  float v14;
  _BOOL8 v15;
  unint64_t v16;
  unint64_t v17;
  size_t prime;
  void *v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t *v23;
  size_t v24;
  size_t v25;
  size_t v26;
  _QWORD *i;
  size_t v28;
  uint64_t v29;
  unint64_t v30;
  uint8x8_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  size_t v35;
  _QWORD *v36;
  _QWORD *v37;
  unint64_t v38;
  _QWORD *v40;

  v6 = a2;
  v7 = *((_QWORD *)a1 + 1);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = a2;
      if (v7 <= a2)
        v3 = a2 % v7;
    }
    else
    {
      v3 = ((_DWORD)v7 - 1) & a2;
    }
    v9 = *(void ***)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      v10 = *v9;
      if (*v9)
      {
        if (v8.u32[0] < 2uLL)
        {
          while (1)
          {
            v12 = v10[1];
            if (v12 == a2)
            {
              if (*((unsigned __int16 *)v10 + 8) == a2)
                return v10;
            }
            else if ((v12 & (v7 - 1)) != v3)
            {
              goto LABEL_22;
            }
            v10 = (_QWORD *)*v10;
            if (!v10)
              goto LABEL_22;
          }
        }
        do
        {
          v11 = v10[1];
          if (v11 == a2)
          {
            if (*((unsigned __int16 *)v10 + 8) == a2)
              return v10;
          }
          else
          {
            if (v11 >= v7)
              v11 %= v7;
            if (v11 != v3)
              break;
          }
          v10 = (_QWORD *)*v10;
        }
        while (v10);
      }
    }
  }
LABEL_22:
  v10 = operator new(0x18uLL);
  *v10 = 0;
  v10[1] = v6;
  *((_WORD *)v10 + 8) = *a3;
  *((_DWORD *)v10 + 5) = 0;
  v13 = (float)(unint64_t)(*((_QWORD *)a1 + 3) + 1);
  v14 = a1[8];
  if (!v7 || (float)(v14 * (float)v7) < v13)
  {
    v15 = 1;
    if (v7 >= 3)
      v15 = (v7 & (v7 - 1)) != 0;
    v16 = v15 | (2 * v7);
    v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17)
      prime = v17;
    else
      prime = v16;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v7 = *((_QWORD *)a1 + 1);
    }
    if (prime <= v7)
    {
      if (prime >= v7)
        goto LABEL_59;
      v30 = vcvtps_u32_f32((float)*((unint64_t *)a1 + 3) / a1[8]);
      if (v7 < 3 || (v31 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v31.i16[0] = vaddlv_u8(v31), v31.u32[0] > 1uLL))
      {
        v30 = std::__next_prime(v30);
      }
      else
      {
        v32 = 1 << -(char)__clz(v30 - 1);
        if (v30 >= 2)
          v30 = v32;
      }
      if (prime <= v30)
        prime = v30;
      if (prime >= v7)
      {
        v7 = *((_QWORD *)a1 + 1);
LABEL_59:
        if ((v7 & (v7 - 1)) != 0)
        {
          if (v7 <= v6)
            v3 = v6 % v7;
          else
            v3 = v6;
        }
        else
        {
          v3 = ((_DWORD)v7 - 1) & v6;
        }
        goto LABEL_72;
      }
      if (!prime)
      {
        v40 = *(_QWORD **)a1;
        *(_QWORD *)a1 = 0;
        if (v40)
          operator delete(v40);
        v7 = 0;
        *((_QWORD *)a1 + 1) = 0;
        goto LABEL_59;
      }
    }
    if (prime >> 61)
      std::__throw_bad_array_new_length[abi:nn180100]();
    v19 = operator new(8 * prime);
    v20 = *(_QWORD **)a1;
    *(_QWORD *)a1 = v19;
    if (v20)
      operator delete(v20);
    v21 = 0;
    *((_QWORD *)a1 + 1) = prime;
    do
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v21++) = 0;
    while (prime != v21);
    v23 = (uint64_t *)(a1 + 4);
    v22 = (_QWORD *)*((_QWORD *)a1 + 2);
    if (!v22)
    {
LABEL_58:
      v7 = prime;
      goto LABEL_59;
    }
    v24 = v22[1];
    v25 = prime - 1;
    if ((prime & (prime - 1)) == 0)
    {
      v26 = v24 & v25;
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v26) = v23;
      for (i = (_QWORD *)*v22; *v22; i = (_QWORD *)*v22)
      {
        v28 = i[1] & v25;
        if (v28 == v26)
        {
          v22 = i;
        }
        else if (*(_QWORD *)(*(_QWORD *)a1 + 8 * v28))
        {
          *v22 = *i;
          v29 = 8 * v28;
          *i = **(_QWORD **)(*(_QWORD *)a1 + v29);
          **(_QWORD **)(*(_QWORD *)a1 + v29) = i;
        }
        else
        {
          *(_QWORD *)(*(_QWORD *)a1 + 8 * v28) = v22;
          v22 = i;
          v26 = v28;
        }
      }
      goto LABEL_58;
    }
    if (v24 >= prime)
      v24 %= prime;
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v24) = v23;
    v33 = (_QWORD *)*v22;
    if (!*v22)
      goto LABEL_58;
    while (1)
    {
      v35 = v33[1];
      if (v35 >= prime)
        v35 %= prime;
      if (v35 != v24)
      {
        if (!*(_QWORD *)(*(_QWORD *)a1 + 8 * v35))
        {
          *(_QWORD *)(*(_QWORD *)a1 + 8 * v35) = v22;
          goto LABEL_63;
        }
        *v22 = *v33;
        v34 = 8 * v35;
        *v33 = **(_QWORD **)(*(_QWORD *)a1 + v34);
        **(_QWORD **)(*(_QWORD *)a1 + v34) = v33;
        v33 = v22;
      }
      v35 = v24;
LABEL_63:
      v22 = v33;
      v33 = (_QWORD *)*v33;
      v24 = v35;
      if (!v33)
        goto LABEL_58;
    }
  }
LABEL_72:
  v36 = *(_QWORD **)a1;
  v37 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v37)
  {
    *v10 = *v37;
LABEL_80:
    *v37 = v10;
    goto LABEL_81;
  }
  *v10 = *((_QWORD *)a1 + 2);
  *((_QWORD *)a1 + 2) = v10;
  v36[v3] = a1 + 4;
  if (*v10)
  {
    v38 = *(_QWORD *)(*v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v38 >= v7)
        v38 %= v7;
    }
    else
    {
      v38 &= v7 - 1;
    }
    v37 = (_QWORD *)(*(_QWORD *)a1 + 8 * v38);
    goto LABEL_80;
  }
LABEL_81:
  ++*((_QWORD *)a1 + 3);
  return v10;
}

void sub_19FAD9148(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void md::SceneQueryLogic::categorizeEntitiesByFlexZone<>(std::vector<gdc::Registry *> const&)::{lambda(gdc::Entity,md::components::MeshInstance &,md::components::ClientState &)#1}::operator()(uint64_t a1, uint64_t a2, uint64_t a3, gss::Allocator **a4)
{
  uint64_t *v6;
  float64x2_t v7;
  uint64_t v8;
  __n128 v9;
  _QWORD *v10;
  uint64_t v11;
  id **v12;
  id *v13;
  id *v14;
  uint64_t v15;
  float v16;
  id v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  double v26;
  float64x2_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  double v32;
  float64x2_t v33;
  float64x2_t v34;
  uint64_t v35;
  float64x2_t v36;
  float64x2_t v37;
  float64x2_t v38;
  float64x2_t v39;
  float64x2_t v40;
  double v41;
  float64x2_t v42;
  double v43;
  double v44;
  float64x2_t v45;
  unsigned int v46;
  unsigned int *v47;
  _BOOL4 v49;
  __int16 v50;
  char **v51;
  unint64_t v52;
  char *v53;
  char *v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  unint64_t v60;
  _BYTE *v61;
  char *v62;
  char *v63;
  unint64_t v64;
  uint64_t v65;
  _OWORD *v66;
  char *v67;
  uint64_t v68;
  __int128 v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  float *v73;
  float *v74;
  float *v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  unint64_t v80;
  _BYTE *v81;
  float *v82;
  char *v83;
  unint64_t v84;
  uint64_t v85;
  _OWORD *v86;
  float *v87;
  uint64_t v88;
  __int128 v89;
  int v90;
  float64x2_t v92;
  _OWORD v93[2];
  float64x2_t v94;
  _BYTE v95[32];
  float64x2_t v96;
  _QWORD v97[3];
  _QWORD *v98;
  uint64_t v99;

  v99 = *MEMORY[0x1E0C80C00];
  v6 = *(uint64_t **)a1;
  ++*(_DWORD *)(*(_QWORD *)a1 + 548);
  v7 = vcvtq_f64_f32(*(float32x2_t *)(a3 + 44));
  v93[0] = vcvtq_f64_f32(*(float32x2_t *)(a3 + 36));
  v93[1] = v7;
  v8 = **(_QWORD **)(a1 + 8) + 304;
  v94 = vcvtq_f64_f32(*(float32x2_t *)(a3 + 52));
  *(int64x2_t *)v95 = vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
  *(_OWORD *)&v95[16] = xmmword_19FFB2E00;
  v96 = (float64x2_t)vdupq_n_s64(0xFFEFFFFFFFFFFFFFLL);
  v97[0] = &off_1E42D8A68;
  v97[1] = v95;
  v97[2] = v8;
  v98 = v97;
  v9.n128_f64[0] = gm::Box<double,3>::forEachCorner((uint64_t)v93, (uint64_t)v97);
  v10 = v98;
  if (v98 == v97)
  {
    v11 = 4;
    v10 = v97;
  }
  else
  {
    if (!v98)
      goto LABEL_6;
    v11 = 5;
  }
  (*(void (**)(__n128))(*v10 + 8 * v11))(v9);
LABEL_6:
  v12 = *(id ***)(a1 + 16);
  v13 = *v12;
  v14 = v12[1];
  if (*v12 == v14)
  {
    v50 = 0;
    v16 = 3.4028e38;
  }
  else
  {
    v15 = -1;
    v16 = 3.4028e38;
    __asm { FMOV            V0.2D, #0.5 }
    v92 = _Q0;
    do
    {
      v22 = *v13;
      *(_QWORD *)&v93[0] = v22;
      v23 = std::__hash_table<std::__hash_value_type<GEOComposedRouteSection *,std::vector<gm::LineSegment<double,3>>>,std::__unordered_map_hasher<std::vector,std::__unordered_map_hasher,md::SceneQueryLogic::pointer_hasher<GEOComposedRouteSection>,std::equal_to<std::vector>,true>,std::__unordered_map_equal<std::vector,std::__unordered_map_hasher,std::__unordered_map_hasher<std::vector,std::__unordered_map_hasher,md::SceneQueryLogic::pointer_hasher<GEOComposedRouteSection>,std::equal_to<std::vector>,true>,std::equal_to,true>,std::allocator<std::allocator><std::__unordered_map_hasher>>::__emplace_unique_key_args<std::vector,std::piecewise_construct_t const&,std::tuple<GEOComposedRouteSection * const&>,GEOComposedRouteSection * const<>>(v6 + 21, (unint64_t)v22, v93);
      v24 = v23[3];
      v25 = v23[4];
      if (v24 != v25)
      {
        v26 = *(double *)v95 + (*(double *)&v95[24] - *(double *)v95) * 0.5;
        v27 = vmlaq_f64(*(float64x2_t *)&v95[8], v92, vsubq_f64(v96, *(float64x2_t *)&v95[8]));
        v28 = v6[31];
        v29 = (v6[32] - v28) / 12;
        v30 = v28 + 12 * v29 - 4;
        v31 = v15;
        do
        {
          v32 = *(double *)v24;
          v33 = *(float64x2_t *)(v24 + 8);
          v34 = vsubq_f64(v27, v33);
          v35 = *(uint64_t *)(v24 + 24);
          v36 = *(float64x2_t *)(v24 + 32);
          v37 = (float64x2_t)vdupq_lane_s64(v35, 0);
          v37.f64[0] = v26 - *(double *)v24;
          v38 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v36.f64[0], 0);
          v38.f64[0] = v34.f64[0];
          v39.f64[1] = *(float64_t *)(v24 + 40);
          v39.f64[0] = v34.f64[1];
          v40 = vmlaq_laneq_f64(vmlaq_n_f64(vmulq_n_f64(v37, *(double *)&v35), v38, v36.f64[0]), v39, v36, 1);
          v41 = vdivq_f64(v40, (float64x2_t)vdupq_laneq_s64((int64x2_t)v40, 1)).f64[0];
          if (v41 >= 0.0)
          {
            v44 = v32 - v26;
            if (v41 <= 1.0)
            {
              v43 = (v44 + v41 * *(double *)&v35) * (v44 + v41 * *(double *)&v35);
              v42 = vmlaq_n_f64(vsubq_f64(v33, v27), v36, v41);
            }
            else
            {
              v43 = (*(double *)&v35 + v44) * (*(double *)&v35 + v44);
              v42 = vaddq_f64(v36, vsubq_f64(v33, v27));
            }
          }
          else
          {
            v42 = vsubq_f64(v33, v27);
            v43 = (v32 - v26) * (v32 - v26);
          }
          v45 = vmulq_f64(v42, v42);
          *(float *)v45.f64 = v45.f64[0] + v43 + v45.f64[1];
          *(float *)v45.f64 = *(float *)v45.f64 * 1.60600699e15;
          v16 = fminf(v16, *(float *)v45.f64);
          v46 = *(float *)v45.f64;
          v47 = (unsigned int *)v30;
          v15 = v29;
          do
          {
            while (1)
            {
              if (v15-- < 1)
              {
                v15 = v31;
                goto LABEL_24;
              }
              if (*(v47 - 1) <= v46)
                break;
              v47 -= 3;
            }
            v49 = *v47 >= v46;
            v47 -= 3;
          }
          while (!v49 || v15 >= v31);
          if (!v15)
          {

            v15 = 0;
            goto LABEL_28;
          }
LABEL_24:
          v24 += 48;
          v31 = v15;
        }
        while (v24 != v25);
      }

      ++v13;
    }
    while (v13 != v14);
    if (v15 == -1)
      v50 = 0;
    else
LABEL_28:
      v50 = *(unsigned __int8 *)(v6[31] + 12 * v15);
  }
  geo::intern_linear_map<gss::StyleAttribute,unsigned short,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::emplace<gss::StyleAttribute,unsigned short>((gss::Allocator *)v93, a4, 0x10059u, v50);
  if (LOBYTE(v94.f64[1]))
  {
    v51 = *(char ***)(a1 + 24);
    v53 = v51[1];
    v52 = (unint64_t)v51[2];
    if ((unint64_t)v53 >= v52)
    {
      v55 = *v51;
      v56 = v53 - *v51;
      v57 = v56 >> 3;
      v58 = (v56 >> 3) + 1;
      if (v58 >> 61)
        abort();
      v59 = v52 - (_QWORD)v55;
      if (v59 >> 2 > v58)
        v58 = v59 >> 2;
      if ((unint64_t)v59 >= 0x7FFFFFFFFFFFFFF8)
        v60 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v60 = v58;
      if (v60)
      {
        if (v60 >> 61)
          goto LABEL_76;
        v61 = operator new(8 * v60);
      }
      else
      {
        v61 = 0;
      }
      v62 = &v61[8 * v57];
      v63 = &v61[8 * v60];
      *(_QWORD *)v62 = a2;
      v54 = v62 + 8;
      if (v53 != v55)
      {
        v64 = v53 - v55 - 8;
        if (v64 < 0x58)
          goto LABEL_81;
        if ((unint64_t)(v53 - v61 - v56) < 0x20)
          goto LABEL_81;
        v65 = (v64 >> 3) + 1;
        v66 = &v61[8 * v57 - 16];
        v67 = v53 - 16;
        v68 = v65 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v69 = *(_OWORD *)v67;
          *(v66 - 1) = *((_OWORD *)v67 - 1);
          *v66 = v69;
          v66 -= 2;
          v67 -= 32;
          v68 -= 4;
        }
        while (v68);
        v62 -= 8 * (v65 & 0x3FFFFFFFFFFFFFFCLL);
        v53 -= 8 * (v65 & 0x3FFFFFFFFFFFFFFCLL);
        if (v65 != (v65 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_81:
          do
          {
            v70 = *((_QWORD *)v53 - 1);
            v53 -= 8;
            *((_QWORD *)v62 - 1) = v70;
            v62 -= 8;
          }
          while (v53 != v55);
        }
        v53 = *v51;
      }
      *v51 = v62;
      v51[1] = v54;
      v51[2] = v63;
      if (v53)
        operator delete(v53);
    }
    else
    {
      *(_QWORD *)v53 = a2;
      v54 = v53 + 8;
    }
    v51[1] = v54;
    v71 = *(_QWORD *)(a1 + 32);
    v73 = *(float **)(v71 + 8);
    v72 = *(_QWORD *)(v71 + 16);
    if ((unint64_t)v73 < v72)
    {
      *v73 = v16;
      v74 = v73 + 1;
LABEL_74:
      *(_QWORD *)(v71 + 8) = v74;
      return;
    }
    v75 = *(float **)v71;
    v76 = (uint64_t)v73 - *(_QWORD *)v71;
    v77 = v76 >> 2;
    v78 = (v76 >> 2) + 1;
    if (v78 >> 62)
      abort();
    v79 = v72 - (_QWORD)v75;
    if (v79 >> 1 > v78)
      v78 = v79 >> 1;
    if ((unint64_t)v79 >= 0x7FFFFFFFFFFFFFFCLL)
      v80 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v80 = v78;
    if (!v80)
    {
      v81 = 0;
LABEL_65:
      v82 = (float *)&v81[4 * v77];
      v83 = &v81[4 * v80];
      *v82 = v16;
      v74 = v82 + 1;
      if (v73 != v75)
      {
        v84 = (char *)v73 - (char *)v75 - 4;
        if (v84 < 0x2C)
          goto LABEL_82;
        if ((unint64_t)((char *)v73 - &v81[v76]) < 0x20)
          goto LABEL_82;
        v85 = (v84 >> 2) + 1;
        v86 = &v81[4 * v77 - 16];
        v87 = v73 - 4;
        v88 = v85 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          v89 = *(_OWORD *)v87;
          *(v86 - 1) = *((_OWORD *)v87 - 1);
          *v86 = v89;
          v86 -= 2;
          v87 -= 8;
          v88 -= 8;
        }
        while (v88);
        v82 -= v85 & 0x7FFFFFFFFFFFFFF8;
        v73 -= v85 & 0x7FFFFFFFFFFFFFF8;
        if (v85 != (v85 & 0x7FFFFFFFFFFFFFF8))
        {
LABEL_82:
          do
          {
            v90 = *((_DWORD *)v73-- - 1);
            *((_DWORD *)v82-- - 1) = v90;
          }
          while (v73 != v75);
        }
      }
      *(_QWORD *)v71 = v82;
      *(_QWORD *)(v71 + 8) = v74;
      *(_QWORD *)(v71 + 16) = v83;
      if (v75)
        operator delete(v75);
      goto LABEL_74;
    }
    if (!(v80 >> 62))
    {
      v81 = operator new(4 * v80);
      goto LABEL_65;
    }
LABEL_76:
    std::__throw_bad_array_new_length[abi:nn180100]();
  }
}

void sub_19FAD971C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

_QWORD *std::__hash_table<std::__hash_value_type<GEOComposedRouteSection *,std::vector<gm::LineSegment<double,3>>>,std::__unordered_map_hasher<std::vector,std::__unordered_map_hasher,md::SceneQueryLogic::pointer_hasher<GEOComposedRouteSection>,std::equal_to<std::vector>,true>,std::__unordered_map_equal<std::vector,std::__unordered_map_hasher,std::__unordered_map_hasher<std::vector,std::__unordered_map_hasher,md::SceneQueryLogic::pointer_hasher<GEOComposedRouteSection>,std::equal_to<std::vector>,true>,std::equal_to,true>,std::allocator<std::allocator><std::__unordered_map_hasher>>::__emplace_unique_key_args<std::vector,std::piecewise_construct_t const&,std::tuple<GEOComposedRouteSection * const&>,GEOComposedRouteSection * const<>>(uint64_t *a1, unint64_t a2, _QWORD *a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  _QWORD **v11;
  _QWORD *v12;
  unint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  float v16;
  float v17;
  _BOOL8 v18;
  unint64_t v19;
  unint64_t v20;
  size_t prime;
  void *v22;
  void *v23;
  uint64_t v24;
  _QWORD *v25;
  size_t v26;
  size_t v27;
  size_t v28;
  _QWORD *i;
  size_t v30;
  uint64_t v31;
  unint64_t v32;
  uint8x8_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  size_t v37;
  uint64_t v38;
  _QWORD *v39;
  unint64_t v40;
  void *v42;

  v6 = 0x9DDFEA08EB382D69 * (((8 * a2) + 8) ^ HIDWORD(a2));
  v7 = 0x9DDFEA08EB382D69 * (HIDWORD(a2) ^ (v6 >> 47) ^ v6);
  v8 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
  v9 = a1[1];
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      v3 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
      if (v8 >= v9)
        v3 = v8 % v9;
    }
    else
    {
      v3 = v8 & (v9 - 1);
    }
    v11 = *(_QWORD ***)(*a1 + 8 * v3);
    if (v11)
    {
      v12 = *v11;
      if (*v11)
      {
        if (v10.u32[0] < 2uLL)
        {
          while (1)
          {
            v14 = v12[1];
            if (v14 == v8)
            {
              if (v12[2] == a2)
                return v12;
            }
            else if ((v14 & (v9 - 1)) != v3)
            {
              goto LABEL_22;
            }
            v12 = (_QWORD *)*v12;
            if (!v12)
              goto LABEL_22;
          }
        }
        do
        {
          v13 = v12[1];
          if (v13 == v8)
          {
            if (v12[2] == a2)
              return v12;
          }
          else
          {
            if (v13 >= v9)
              v13 %= v9;
            if (v13 != v3)
              break;
          }
          v12 = (_QWORD *)*v12;
        }
        while (v12);
      }
    }
  }
LABEL_22:
  v15 = a1 + 2;
  v12 = operator new(0x30uLL);
  *v12 = 0;
  v12[1] = v8;
  v12[2] = *a3;
  v12[3] = 0;
  v12[4] = 0;
  v12[5] = 0;
  v16 = (float)(unint64_t)(a1[3] + 1);
  v17 = *((float *)a1 + 8);
  if (!v9 || (float)(v17 * (float)v9) < v16)
  {
    v18 = 1;
    if (v9 >= 3)
      v18 = (v9 & (v9 - 1)) != 0;
    v19 = v18 | (2 * v9);
    v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20)
      prime = v20;
    else
      prime = v19;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v9 = a1[1];
    }
    if (prime <= v9)
    {
      if (prime >= v9)
        goto LABEL_59;
      v32 = vcvtps_u32_f32((float)(unint64_t)a1[3] / *((float *)a1 + 8));
      if (v9 < 3 || (v33 = (uint8x8_t)vcnt_s8((int8x8_t)v9), v33.i16[0] = vaddlv_u8(v33), v33.u32[0] > 1uLL))
      {
        v32 = std::__next_prime(v32);
      }
      else
      {
        v34 = 1 << -(char)__clz(v32 - 1);
        if (v32 >= 2)
          v32 = v34;
      }
      if (prime <= v32)
        prime = v32;
      if (prime >= v9)
      {
        v9 = a1[1];
LABEL_59:
        if ((v9 & (v9 - 1)) != 0)
        {
          if (v8 >= v9)
            v3 = v8 % v9;
          else
            v3 = v8;
        }
        else
        {
          v3 = (v9 - 1) & v8;
        }
        goto LABEL_72;
      }
      if (!prime)
      {
        v42 = (void *)*a1;
        *a1 = 0;
        if (v42)
          operator delete(v42);
        v9 = 0;
        a1[1] = 0;
        goto LABEL_59;
      }
    }
    if (prime >> 61)
      std::__throw_bad_array_new_length[abi:nn180100]();
    v22 = operator new(8 * prime);
    v23 = (void *)*a1;
    *a1 = (uint64_t)v22;
    if (v23)
      operator delete(v23);
    v24 = 0;
    a1[1] = prime;
    do
      *(_QWORD *)(*a1 + 8 * v24++) = 0;
    while (prime != v24);
    v25 = (_QWORD *)*v15;
    if (!*v15)
    {
LABEL_58:
      v9 = prime;
      goto LABEL_59;
    }
    v26 = v25[1];
    v27 = prime - 1;
    if ((prime & (prime - 1)) == 0)
    {
      v28 = v26 & v27;
      *(_QWORD *)(*a1 + 8 * v28) = v15;
      for (i = (_QWORD *)*v25; *v25; i = (_QWORD *)*v25)
      {
        v30 = i[1] & v27;
        if (v30 == v28)
        {
          v25 = i;
        }
        else if (*(_QWORD *)(*a1 + 8 * v30))
        {
          *v25 = *i;
          v31 = 8 * v30;
          *i = **(_QWORD **)(*a1 + v31);
          **(_QWORD **)(*a1 + v31) = i;
        }
        else
        {
          *(_QWORD *)(*a1 + 8 * v30) = v25;
          v25 = i;
          v28 = v30;
        }
      }
      goto LABEL_58;
    }
    if (v26 >= prime)
      v26 %= prime;
    *(_QWORD *)(*a1 + 8 * v26) = v15;
    v35 = (_QWORD *)*v25;
    if (!*v25)
      goto LABEL_58;
    while (1)
    {
      v37 = v35[1];
      if (v37 >= prime)
        v37 %= prime;
      if (v37 != v26)
      {
        if (!*(_QWORD *)(*a1 + 8 * v37))
        {
          *(_QWORD *)(*a1 + 8 * v37) = v25;
          goto LABEL_63;
        }
        *v25 = *v35;
        v36 = 8 * v37;
        *v35 = **(_QWORD **)(*a1 + v36);
        **(_QWORD **)(*a1 + v36) = v35;
        v35 = v25;
      }
      v37 = v26;
LABEL_63:
      v25 = v35;
      v35 = (_QWORD *)*v35;
      v26 = v37;
      if (!v35)
        goto LABEL_58;
    }
  }
LABEL_72:
  v38 = *a1;
  v39 = *(_QWORD **)(*a1 + 8 * v3);
  if (v39)
  {
    *v12 = *v39;
LABEL_80:
    *v39 = v12;
    goto LABEL_81;
  }
  *v12 = *v15;
  *v15 = v12;
  *(_QWORD *)(v38 + 8 * v3) = v15;
  if (*v12)
  {
    v40 = *(_QWORD *)(*v12 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v40 >= v9)
        v40 %= v9;
    }
    else
    {
      v40 &= v9 - 1;
    }
    v39 = (_QWORD *)(*a1 + 8 * v40);
    goto LABEL_80;
  }
LABEL_81:
  ++a1[3];
  return v12;
}

void sub_19FAD9BD0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<gdc::Registry *,std::vector<gdc::Entity>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<gdc::Registry *,std::vector<gdc::Entity>>,void *>>>>::~unique_ptr[abi:nn180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

gss::Allocator *geo::intern_linear_map<gss::StyleAttribute,unsigned short,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::emplace<gss::StyleAttribute,unsigned short>(gss::Allocator *result, gss::Allocator **a2, unsigned int a3, __int16 a4)
{
  gss::Allocator *v5;
  uint64_t v6;
  char v7;
  gss::Allocator *v10;
  unint64_t v11;
  unsigned int v12;
  uint64_t v13;
  char *v14;
  char *v15;
  unint64_t v16;
  unint64_t v17;
  char *v18;
  char *v19;
  unsigned int v20;
  gss::Allocator *v21;
  uint64_t v22;
  unsigned int v23;
  unint64_t v24;
  uint64_t v25;
  gss::Allocator *v26;
  gss::Allocator *v27;
  unint64_t v28;
  unint64_t v29;
  unsigned int *v30;
  gss::Allocator *v31;
  unsigned int v32;
  unsigned int v33;
  unsigned __int16 v34;
  unsigned __int16 v35;
  uint64_t v36;
  gss::Allocator *v37;
  uint64_t v38;

  v5 = result;
  v6 = *((unsigned __int16 *)a2 + 5);
  if (!*((_BYTE *)a2 + 14))
  {
    if (!*((_WORD *)a2 + 5))
      goto LABEL_29;
    v10 = *a2;
    if (*((_BYTE *)a2 + 15))
    {
      if (v6 >= 0x1E)
      {
        v15 = (char *)*a2;
        v16 = *((unsigned __int16 *)a2 + 5);
        do
        {
          v17 = v16 >> 1;
          v18 = &v15[4 * (v16 >> 1)];
          v20 = *(_DWORD *)v18;
          v19 = v18 + 4;
          v16 += ~(v16 >> 1);
          if (v20 < a3)
            v15 = v19;
          else
            v16 = v17;
        }
        while (v16);
        if (v15 == (char *)v10 + 4 * v6)
          goto LABEL_29;
        if (*(_DWORD *)v15 != a3)
          goto LABEL_29;
        v11 = (unint64_t)(v15 - (char *)v10) >> 2;
        if ((_DWORD)v6 == (unsigned __int16)v11)
          goto LABEL_29;
      }
      else
      {
        v11 = 0;
        while (1)
        {
          v12 = *((_DWORD *)v10 + v11);
          if (v12 >= a3)
            break;
          if (v6 == ++v11)
            goto LABEL_29;
        }
        if (v12 != a3)
          LOWORD(v11) = *((_WORD *)a2 + 5);
        if ((_DWORD)v6 == (unsigned __int16)v11)
          goto LABEL_29;
      }
    }
    else
    {
      v13 = 4 * v6;
      v14 = (char *)*a2;
      while (*(_DWORD *)v14 != a3)
      {
        v14 += 4;
        v13 -= 4;
        if (!v13)
        {
          v14 = (char *)v10 + 4 * v6;
          break;
        }
      }
      v11 = (unint64_t)(v14 - (char *)v10) >> 2;
      if ((_DWORD)v6 == (unsigned __int16)v11)
      {
LABEL_29:
        if (*((_WORD *)a2 + 5))
        {
          v21 = *a2;
          if (*((_BYTE *)a2 + 15))
          {
            if (v6 >= 0x1E)
            {
              v27 = *a2;
              v28 = *((unsigned __int16 *)a2 + 5);
              do
              {
                v29 = v28 >> 1;
                v30 = (unsigned int *)((char *)v27 + 4 * (v28 >> 1));
                v32 = *v30;
                v31 = (gss::Allocator *)(v30 + 1);
                v28 += ~(v28 >> 1);
                if (v32 < a3)
                  v27 = v31;
                else
                  v28 = v29;
              }
              while (v28);
              if (v27 == (gss::Allocator *)((char *)v21 + 4 * v6) || *(_DWORD *)v27 != a3)
              {
LABEL_54:
                if ((_DWORD)v6 == *((unsigned __int16 *)a2 + 6))
                {
                  if ((_DWORD)v6 == 0xFFFF)
                  {
                    LOWORD(v6) = -1;
                    goto LABEL_67;
                  }
                  v33 = 2 * (v6 & 0x7FFF);
                  if (v33 <= 4)
                    v34 = 4;
                  else
                    v34 = v33;
                  v35 = (8 * (v34 >> 1)) | 2;
                  v36 = gss::Allocator::instance(result);
                  result = (gss::Allocator *)(*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v36 + 16))(v36, (unsigned __int16)(v35 + 2 * v34) & 0xFFFE, 1);
                  v37 = result;
                  if (*a2)
                  {
                    if (*((_WORD *)a2 + 5))
                    {
                      result = (gss::Allocator *)memmove(result, *a2, 4 * *((unsigned __int16 *)a2 + 5));
                      if (*((_WORD *)a2 + 5))
                        result = (gss::Allocator *)memmove((char *)v37 + v35, (char *)*a2 + *((unsigned __int16 *)a2 + 4), 2 * *((unsigned __int16 *)a2 + 5));
                    }
                    v38 = gss::Allocator::instance(result);
                    result = (gss::Allocator *)(*(uint64_t (**)(uint64_t, gss::Allocator *, _QWORD))(*(_QWORD *)v38 + 40))(v38, *a2, *((unsigned __int16 *)a2 + 6));
                  }
                  *((_WORD *)a2 + 6) = v34;
                  *a2 = v37;
                  *((_WORD *)a2 + 4) = v35;
                  LODWORD(v6) = *((unsigned __int16 *)a2 + 5);
                }
                else
                {
                  v37 = *a2;
                  v35 = *((_WORD *)a2 + 4);
                }
                *((_DWORD *)v37 + v6) = a3;
                *(_WORD *)((char *)v37 + 2 * v6 + v35) = a4;
                LOWORD(v6) = *((_WORD *)a2 + 5) + 1;
                *((_WORD *)a2 + 5) = v6;
                *((_BYTE *)a2 + 15) = 0;
LABEL_67:
                LODWORD(v6) = (unsigned __int16)v6 - 1;
                v7 = 1;
                goto LABEL_68;
              }
              v24 = (unint64_t)(v27 - v21) >> 2;
            }
            else
            {
              v22 = 0;
              while (1)
              {
                v23 = *((_DWORD *)v21 + v22);
                if (v23 >= a3)
                  break;
                if (v6 == ++v22)
                  goto LABEL_54;
              }
              if (v23 == a3)
                LOWORD(v24) = v22;
              else
                LOWORD(v24) = *((_WORD *)a2 + 5);
            }
          }
          else
          {
            v25 = 4 * v6;
            v26 = *a2;
            while (*(_DWORD *)v26 != a3)
            {
              v26 = (gss::Allocator *)((char *)v26 + 4);
              v25 -= 4;
              if (!v25)
              {
                v26 = (gss::Allocator *)((char *)v21 + 4 * v6);
                break;
              }
            }
            v24 = (unint64_t)(v26 - v21) >> 2;
          }
        }
        else
        {
          LOWORD(v24) = 0;
        }
        if ((_DWORD)v6 != (unsigned __int16)v24)
          goto LABEL_67;
        goto LABEL_54;
      }
    }
    v7 = 0;
    LODWORD(v6) = (unsigned __int16)v11;
    goto LABEL_68;
  }
  v7 = 0;
LABEL_68:
  *(_QWORD *)v5 = a2;
  *((_DWORD *)v5 + 2) = v6;
  *((_BYTE *)v5 + 16) = 0;
  *((_BYTE *)v5 + 32) = 0;
  *((_BYTE *)v5 + 40) = v7;
  return result;
}

void md::SceneQueryLogic::categorizeEntitiesByFlexZone<md::components::DidResolvePendingMaterial>(std::vector<gdc::Registry *> const&)::{lambda(gdc::Entity,md::components::MeshInstance &,md::components::ClientState &)#1}::operator()(uint64_t a1, uint64_t a2, uint64_t a3, gss::Allocator **a4)
{
  uint64_t *v6;
  float64x2_t v7;
  uint64_t v8;
  __n128 v9;
  _QWORD *v10;
  uint64_t v11;
  id **v12;
  id *v13;
  id *v14;
  uint64_t v15;
  float v16;
  id v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  double v26;
  float64x2_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  double v32;
  float64x2_t v33;
  float64x2_t v34;
  uint64_t v35;
  float64x2_t v36;
  float64x2_t v37;
  float64x2_t v38;
  float64x2_t v39;
  float64x2_t v40;
  double v41;
  float64x2_t v42;
  double v43;
  double v44;
  float64x2_t v45;
  unsigned int v46;
  unsigned int *v47;
  _BOOL4 v49;
  __int16 v50;
  char **v51;
  unint64_t v52;
  char *v53;
  char *v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  unint64_t v60;
  _BYTE *v61;
  char *v62;
  char *v63;
  unint64_t v64;
  uint64_t v65;
  _OWORD *v66;
  char *v67;
  uint64_t v68;
  __int128 v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  float *v73;
  float *v74;
  float *v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  unint64_t v80;
  _BYTE *v81;
  float *v82;
  char *v83;
  unint64_t v84;
  uint64_t v85;
  _OWORD *v86;
  float *v87;
  uint64_t v88;
  __int128 v89;
  int v90;
  float64x2_t v92;
  _OWORD v93[2];
  float64x2_t v94;
  _BYTE v95[32];
  float64x2_t v96;
  _QWORD v97[3];
  _QWORD *v98;
  uint64_t v99;

  v99 = *MEMORY[0x1E0C80C00];
  v6 = *(uint64_t **)a1;
  ++*(_DWORD *)(*(_QWORD *)a1 + 548);
  v7 = vcvtq_f64_f32(*(float32x2_t *)(a3 + 44));
  v93[0] = vcvtq_f64_f32(*(float32x2_t *)(a3 + 36));
  v93[1] = v7;
  v8 = **(_QWORD **)(a1 + 8) + 304;
  v94 = vcvtq_f64_f32(*(float32x2_t *)(a3 + 52));
  *(int64x2_t *)v95 = vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
  *(_OWORD *)&v95[16] = xmmword_19FFB2E00;
  v96 = (float64x2_t)vdupq_n_s64(0xFFEFFFFFFFFFFFFFLL);
  v97[0] = &off_1E42D8A68;
  v97[1] = v95;
  v97[2] = v8;
  v98 = v97;
  v9.n128_f64[0] = gm::Box<double,3>::forEachCorner((uint64_t)v93, (uint64_t)v97);
  v10 = v98;
  if (v98 == v97)
  {
    v11 = 4;
    v10 = v97;
  }
  else
  {
    if (!v98)
      goto LABEL_6;
    v11 = 5;
  }
  (*(void (**)(__n128))(*v10 + 8 * v11))(v9);
LABEL_6:
  v12 = *(id ***)(a1 + 16);
  v13 = *v12;
  v14 = v12[1];
  if (*v12 == v14)
  {
    v50 = 0;
    v16 = 3.4028e38;
  }
  else
  {
    v15 = -1;
    v16 = 3.4028e38;
    __asm { FMOV            V0.2D, #0.5 }
    v92 = _Q0;
    do
    {
      v22 = *v13;
      *(_QWORD *)&v93[0] = v22;
      v23 = std::__hash_table<std::__hash_value_type<GEOComposedRouteSection *,std::vector<gm::LineSegment<double,3>>>,std::__unordered_map_hasher<std::vector,std::__unordered_map_hasher,md::SceneQueryLogic::pointer_hasher<GEOComposedRouteSection>,std::equal_to<std::vector>,true>,std::__unordered_map_equal<std::vector,std::__unordered_map_hasher,std::__unordered_map_hasher<std::vector,std::__unordered_map_hasher,md::SceneQueryLogic::pointer_hasher<GEOComposedRouteSection>,std::equal_to<std::vector>,true>,std::equal_to,true>,std::allocator<std::allocator><std::__unordered_map_hasher>>::__emplace_unique_key_args<std::vector,std::piecewise_construct_t const&,std::tuple<GEOComposedRouteSection * const&>,GEOComposedRouteSection * const<>>(v6 + 21, (unint64_t)v22, v93);
      v24 = v23[3];
      v25 = v23[4];
      if (v24 != v25)
      {
        v26 = *(double *)v95 + (*(double *)&v95[24] - *(double *)v95) * 0.5;
        v27 = vmlaq_f64(*(float64x2_t *)&v95[8], v92, vsubq_f64(v96, *(float64x2_t *)&v95[8]));
        v28 = v6[31];
        v29 = (v6[32] - v28) / 12;
        v30 = v28 + 12 * v29 - 4;
        v31 = v15;
        do
        {
          v32 = *(double *)v24;
          v33 = *(float64x2_t *)(v24 + 8);
          v34 = vsubq_f64(v27, v33);
          v35 = *(uint64_t *)(v24 + 24);
          v36 = *(float64x2_t *)(v24 + 32);
          v37 = (float64x2_t)vdupq_lane_s64(v35, 0);
          v37.f64[0] = v26 - *(double *)v24;
          v38 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v36.f64[0], 0);
          v38.f64[0] = v34.f64[0];
          v39.f64[1] = *(float64_t *)(v24 + 40);
          v39.f64[0] = v34.f64[1];
          v40 = vmlaq_laneq_f64(vmlaq_n_f64(vmulq_n_f64(v37, *(double *)&v35), v38, v36.f64[0]), v39, v36, 1);
          v41 = vdivq_f64(v40, (float64x2_t)vdupq_laneq_s64((int64x2_t)v40, 1)).f64[0];
          if (v41 >= 0.0)
          {
            v44 = v32 - v26;
            if (v41 <= 1.0)
            {
              v43 = (v44 + v41 * *(double *)&v35) * (v44 + v41 * *(double *)&v35);
              v42 = vmlaq_n_f64(vsubq_f64(v33, v27), v36, v41);
            }
            else
            {
              v43 = (*(double *)&v35 + v44) * (*(double *)&v35 + v44);
              v42 = vaddq_f64(v36, vsubq_f64(v33, v27));
            }
          }
          else
          {
            v42 = vsubq_f64(v33, v27);
            v43 = (v32 - v26) * (v32 - v26);
          }
          v45 = vmulq_f64(v42, v42);
          *(float *)v45.f64 = v45.f64[0] + v43 + v45.f64[1];
          *(float *)v45.f64 = *(float *)v45.f64 * 1.60600699e15;
          v16 = fminf(v16, *(float *)v45.f64);
          v46 = *(float *)v45.f64;
          v47 = (unsigned int *)v30;
          v15 = v29;
          do
          {
            while (1)
            {
              if (v15-- < 1)
              {
                v15 = v31;
                goto LABEL_24;
              }
              if (*(v47 - 1) <= v46)
                break;
              v47 -= 3;
            }
            v49 = *v47 >= v46;
            v47 -= 3;
          }
          while (!v49 || v15 >= v31);
          if (!v15)
          {

            v15 = 0;
            goto LABEL_28;
          }
LABEL_24:
          v24 += 48;
          v31 = v15;
        }
        while (v24 != v25);
      }

      ++v13;
    }
    while (v13 != v14);
    if (v15 == -1)
      v50 = 0;
    else
LABEL_28:
      v50 = *(unsigned __int8 *)(v6[31] + 12 * v15);
  }
  geo::intern_linear_map<gss::StyleAttribute,unsigned short,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::emplace<gss::StyleAttribute,unsigned short>((gss::Allocator *)v93, a4, 0x10059u, v50);
  if (LOBYTE(v94.f64[1]))
  {
    v51 = *(char ***)(a1 + 24);
    v53 = v51[1];
    v52 = (unint64_t)v51[2];
    if ((unint64_t)v53 >= v52)
    {
      v55 = *v51;
      v56 = v53 - *v51;
      v57 = v56 >> 3;
      v58 = (v56 >> 3) + 1;
      if (v58 >> 61)
        abort();
      v59 = v52 - (_QWORD)v55;
      if (v59 >> 2 > v58)
        v58 = v59 >> 2;
      if ((unint64_t)v59 >= 0x7FFFFFFFFFFFFFF8)
        v60 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v60 = v58;
      if (v60)
      {
        if (v60 >> 61)
          goto LABEL_76;
        v61 = operator new(8 * v60);
      }
      else
      {
        v61 = 0;
      }
      v62 = &v61[8 * v57];
      v63 = &v61[8 * v60];
      *(_QWORD *)v62 = a2;
      v54 = v62 + 8;
      if (v53 != v55)
      {
        v64 = v53 - v55 - 8;
        if (v64 < 0x58)
          goto LABEL_81;
        if ((unint64_t)(v53 - v61 - v56) < 0x20)
          goto LABEL_81;
        v65 = (v64 >> 3) + 1;
        v66 = &v61[8 * v57 - 16];
        v67 = v53 - 16;
        v68 = v65 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v69 = *(_OWORD *)v67;
          *(v66 - 1) = *((_OWORD *)v67 - 1);
          *v66 = v69;
          v66 -= 2;
          v67 -= 32;
          v68 -= 4;
        }
        while (v68);
        v62 -= 8 * (v65 & 0x3FFFFFFFFFFFFFFCLL);
        v53 -= 8 * (v65 & 0x3FFFFFFFFFFFFFFCLL);
        if (v65 != (v65 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_81:
          do
          {
            v70 = *((_QWORD *)v53 - 1);
            v53 -= 8;
            *((_QWORD *)v62 - 1) = v70;
            v62 -= 8;
          }
          while (v53 != v55);
        }
        v53 = *v51;
      }
      *v51 = v62;
      v51[1] = v54;
      v51[2] = v63;
      if (v53)
        operator delete(v53);
    }
    else
    {
      *(_QWORD *)v53 = a2;
      v54 = v53 + 8;
    }
    v51[1] = v54;
    v71 = *(_QWORD *)(a1 + 32);
    v73 = *(float **)(v71 + 8);
    v72 = *(_QWORD *)(v71 + 16);
    if ((unint64_t)v73 < v72)
    {
      *v73 = v16;
      v74 = v73 + 1;
LABEL_74:
      *(_QWORD *)(v71 + 8) = v74;
      return;
    }
    v75 = *(float **)v71;
    v76 = (uint64_t)v73 - *(_QWORD *)v71;
    v77 = v76 >> 2;
    v78 = (v76 >> 2) + 1;
    if (v78 >> 62)
      abort();
    v79 = v72 - (_QWORD)v75;
    if (v79 >> 1 > v78)
      v78 = v79 >> 1;
    if ((unint64_t)v79 >= 0x7FFFFFFFFFFFFFFCLL)
      v80 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v80 = v78;
    if (!v80)
    {
      v81 = 0;
LABEL_65:
      v82 = (float *)&v81[4 * v77];
      v83 = &v81[4 * v80];
      *v82 = v16;
      v74 = v82 + 1;
      if (v73 != v75)
      {
        v84 = (char *)v73 - (char *)v75 - 4;
        if (v84 < 0x2C)
          goto LABEL_82;
        if ((unint64_t)((char *)v73 - &v81[v76]) < 0x20)
          goto LABEL_82;
        v85 = (v84 >> 2) + 1;
        v86 = &v81[4 * v77 - 16];
        v87 = v73 - 4;
        v88 = v85 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          v89 = *(_OWORD *)v87;
          *(v86 - 1) = *((_OWORD *)v87 - 1);
          *v86 = v89;
          v86 -= 2;
          v87 -= 8;
          v88 -= 8;
        }
        while (v88);
        v82 -= v85 & 0x7FFFFFFFFFFFFFF8;
        v73 -= v85 & 0x7FFFFFFFFFFFFFF8;
        if (v85 != (v85 & 0x7FFFFFFFFFFFFFF8))
        {
LABEL_82:
          do
          {
            v90 = *((_DWORD *)v73-- - 1);
            *((_DWORD *)v82-- - 1) = v90;
          }
          while (v73 != v75);
        }
      }
      *(_QWORD *)v71 = v82;
      *(_QWORD *)(v71 + 8) = v74;
      *(_QWORD *)(v71 + 16) = v83;
      if (v75)
        operator delete(v75);
      goto LABEL_74;
    }
    if (!(v80 >> 62))
    {
      v81 = operator new(4 * v80);
      goto LABEL_65;
    }
LABEL_76:
    std::__throw_bad_array_new_length[abi:nn180100]();
  }
}

void sub_19FADA4C0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void std::__function::__func<md::SceneQueryLogic::handleNavigationFlex(md::LayoutContext const&,md::CameraContext const&,md::NavigationContext const&,md::StyleLogicContext const&,std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>> const&,BOOL,md::SceneQueryContext &)::$_3,std::allocator<md::SceneQueryLogic::handleNavigationFlex(md::LayoutContext const&,md::CameraContext const&,md::NavigationContext const&,md::StyleLogicContext const&,std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>> const&,BOOL,md::SceneQueryContext &)::$_3>,void ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::SceneQueryLogic::handleNavigationFlex(md::LayoutContext const&,md::CameraContext const&,md::NavigationContext const&,md::StyleLogicContext const&,std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>> const&,BOOL,md::SceneQueryContext &)::$_3,std::allocator<md::SceneQueryLogic::handleNavigationFlex(md::LayoutContext const&,md::CameraContext const&,md::NavigationContext const&,md::StyleLogicContext const&,std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>> const&,BOOL,md::SceneQueryContext &)::$_3>,void ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42CCA88;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<md::SceneQueryLogic::handleNavigationFlex(md::LayoutContext const&,md::CameraContext const&,md::NavigationContext const&,md::StyleLogicContext const&,std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>> const&,BOOL,md::SceneQueryContext &)::$_3,std::allocator<md::SceneQueryLogic::handleNavigationFlex(md::LayoutContext const&,md::CameraContext const&,md::NavigationContext const&,md::StyleLogicContext const&,std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>> const&,BOOL,md::SceneQueryContext &)::$_3>,void ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42CCA88;
  a2[1] = v2;
  return result;
}

void std::__function::__func<md::SceneQueryLogic::handleNavigationFlex(md::LayoutContext const&,md::CameraContext const&,md::NavigationContext const&,md::StyleLogicContext const&,std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>> const&,BOOL,md::SceneQueryContext &)::$_3,std::allocator<md::SceneQueryLogic::handleNavigationFlex(md::LayoutContext const&,md::CameraContext const&,md::NavigationContext const&,md::StyleLogicContext const&,std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>> const&,BOOL,md::SceneQueryContext &)::$_3>,void ()(void)>::operator()(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  os_signpost_id_t v4;
  uint8_t v5[16];

  if (GEOGetVectorKitPerformanceLog_onceToken != -1)
    dispatch_once(&GEOGetVectorKitPerformanceLog_onceToken, &__block_literal_global_13_11780);
  v2 = (id)GEOGetVectorKitPerformanceLog_log;
  v3 = v2;
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 80);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)v5 = 0;
    _os_signpost_emit_with_name_impl(&dword_19F029000, v3, OS_SIGNPOST_INTERVAL_END, v4, "ProcessPendingFeaturesForSceneQueryLogic", (const char *)&unk_1A0189141, v5, 2u);
  }

}

void std::__function::__func<md::SceneQueryLogic::handleNavigationFlex(md::LayoutContext const&,md::CameraContext const&,md::NavigationContext const&,md::StyleLogicContext const&,std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>> const&,BOOL,md::SceneQueryContext &)::$_2,std::allocator<md::SceneQueryLogic::handleNavigationFlex(md::LayoutContext const&,md::CameraContext const&,md::NavigationContext const&,md::StyleLogicContext const&,std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>> const&,BOOL,md::SceneQueryContext &)::$_2>,void ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::SceneQueryLogic::handleNavigationFlex(md::LayoutContext const&,md::CameraContext const&,md::NavigationContext const&,md::StyleLogicContext const&,std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>> const&,BOOL,md::SceneQueryContext &)::$_2,std::allocator<md::SceneQueryLogic::handleNavigationFlex(md::LayoutContext const&,md::CameraContext const&,md::NavigationContext const&,md::StyleLogicContext const&,std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>> const&,BOOL,md::SceneQueryContext &)::$_2>,void ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42CCA40;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<md::SceneQueryLogic::handleNavigationFlex(md::LayoutContext const&,md::CameraContext const&,md::NavigationContext const&,md::StyleLogicContext const&,std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>> const&,BOOL,md::SceneQueryContext &)::$_2,std::allocator<md::SceneQueryLogic::handleNavigationFlex(md::LayoutContext const&,md::CameraContext const&,md::NavigationContext const&,md::StyleLogicContext const&,std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>> const&,BOOL,md::SceneQueryContext &)::$_2>,void ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42CCA40;
  a2[1] = v2;
  return result;
}

void std::__function::__func<md::SceneQueryLogic::handleNavigationFlex(md::LayoutContext const&,md::CameraContext const&,md::NavigationContext const&,md::StyleLogicContext const&,std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>> const&,BOOL,md::SceneQueryContext &)::$_1,std::allocator<md::SceneQueryLogic::handleNavigationFlex(md::LayoutContext const&,md::CameraContext const&,md::NavigationContext const&,md::StyleLogicContext const&,std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>> const&,BOOL,md::SceneQueryContext &)::$_1>,void ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::SceneQueryLogic::handleNavigationFlex(md::LayoutContext const&,md::CameraContext const&,md::NavigationContext const&,md::StyleLogicContext const&,std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>> const&,BOOL,md::SceneQueryContext &)::$_1,std::allocator<md::SceneQueryLogic::handleNavigationFlex(md::LayoutContext const&,md::CameraContext const&,md::NavigationContext const&,md::StyleLogicContext const&,std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>> const&,BOOL,md::SceneQueryContext &)::$_1>,void ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42CC9F8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<md::SceneQueryLogic::handleNavigationFlex(md::LayoutContext const&,md::CameraContext const&,md::NavigationContext const&,md::StyleLogicContext const&,std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>> const&,BOOL,md::SceneQueryContext &)::$_1,std::allocator<md::SceneQueryLogic::handleNavigationFlex(md::LayoutContext const&,md::CameraContext const&,md::NavigationContext const&,md::StyleLogicContext const&,std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>> const&,BOOL,md::SceneQueryContext &)::$_1>,void ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42CC9F8;
  a2[1] = v2;
  return result;
}

void std::__function::__func<md::SceneQueryLogic::handleNavigationFlex(md::LayoutContext const&,md::CameraContext const&,md::NavigationContext const&,md::StyleLogicContext const&,std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>> const&,BOOL,md::SceneQueryContext &)::$_1,std::allocator<md::SceneQueryLogic::handleNavigationFlex(md::LayoutContext const&,md::CameraContext const&,md::NavigationContext const&,md::StyleLogicContext const&,std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>> const&,BOOL,md::SceneQueryContext &)::$_1>,void ()(void)>::operator()(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  os_signpost_id_t v4;
  uint8_t v5[16];

  if (GEOGetVectorKitPerformanceLog_onceToken != -1)
    dispatch_once(&GEOGetVectorKitPerformanceLog_onceToken, &__block_literal_global_13_11780);
  v2 = (id)GEOGetVectorKitPerformanceLog_log;
  v3 = v2;
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 80);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)v5 = 0;
    _os_signpost_emit_with_name_impl(&dword_19F029000, v3, OS_SIGNPOST_INTERVAL_END, v4, "RouteDidChangeForSceneQueryLogic", (const char *)&unk_1A0189141, v5, 2u);
  }

}

void std::__function::__func<md::SceneQueryLogic::handleNavigationFlex(md::LayoutContext const&,md::CameraContext const&,md::NavigationContext const&,md::StyleLogicContext const&,std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>> const&,BOOL,md::SceneQueryContext &)::$_0,std::allocator<md::SceneQueryLogic::handleNavigationFlex(md::LayoutContext const&,md::CameraContext const&,md::NavigationContext const&,md::StyleLogicContext const&,std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>> const&,BOOL,md::SceneQueryContext &)::$_0>,void ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::SceneQueryLogic::handleNavigationFlex(md::LayoutContext const&,md::CameraContext const&,md::NavigationContext const&,md::StyleLogicContext const&,std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>> const&,BOOL,md::SceneQueryContext &)::$_0,std::allocator<md::SceneQueryLogic::handleNavigationFlex(md::LayoutContext const&,md::CameraContext const&,md::NavigationContext const&,md::StyleLogicContext const&,std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>> const&,BOOL,md::SceneQueryContext &)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42CC9B0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<md::SceneQueryLogic::handleNavigationFlex(md::LayoutContext const&,md::CameraContext const&,md::NavigationContext const&,md::StyleLogicContext const&,std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>> const&,BOOL,md::SceneQueryContext &)::$_0,std::allocator<md::SceneQueryLogic::handleNavigationFlex(md::LayoutContext const&,md::CameraContext const&,md::NavigationContext const&,md::StyleLogicContext const&,std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>> const&,BOOL,md::SceneQueryContext &)::$_0>,void ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42CC9B0;
  a2[1] = v2;
  return result;
}

void std::__function::__func<md::SceneQueryLogic::resolveFlexQueries(md::StyleLogicContext const&,md::NavigationContext const&,BOOL,BOOL)::$_0,std::allocator<md::SceneQueryLogic::resolveFlexQueries(md::StyleLogicContext const&,md::NavigationContext const&,BOOL,BOOL)::$_0>,void ()(md::StyleManagerEvent)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::SceneQueryLogic::resolveFlexQueries(md::StyleLogicContext const&,md::NavigationContext const&,BOOL,BOOL)::$_0,std::allocator<md::SceneQueryLogic::resolveFlexQueries(md::StyleLogicContext const&,md::NavigationContext const&,BOOL,BOOL)::$_0>,void ()(md::StyleManagerEvent)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42CC968;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<md::SceneQueryLogic::resolveFlexQueries(md::StyleLogicContext const&,md::NavigationContext const&,BOOL,BOOL)::$_0,std::allocator<md::SceneQueryLogic::resolveFlexQueries(md::StyleLogicContext const&,md::NavigationContext const&,BOOL,BOOL)::$_0>,void ()(md::StyleManagerEvent)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42CC968;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<md::SceneQueryLogic::resolveFlexQueries(md::StyleLogicContext const&,md::NavigationContext const&,BOOL,BOOL)::$_0,std::allocator<md::SceneQueryLogic::resolveFlexQueries(md::StyleLogicContext const&,md::NavigationContext const&,BOOL,BOOL)::$_0>,void ()(md::StyleManagerEvent)>::operator()(uint64_t result, unsigned __int8 *a2)
{
  if ((*a2 | 4) == 4)
    **(_BYTE **)(result + 8) = 1;
  return result;
}

void _ZNSt3__110__function6__funcIZN2md15SceneQueryLogic29runBeforeLayoutAtVariableRateERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_13CameraContextENS2_15RegistryContextENS2_17NavigationContextENS2_17StyleLogicContextENS2_15SettingsContextEEEENS9_IJEEEEE20ResolvedDependenciesERNS2_17SceneQueryContextEE3__1NS_9allocatorISN_EEFvvEED0Ev()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *_ZNKSt3__110__function6__funcIZN2md15SceneQueryLogic29runBeforeLayoutAtVariableRateERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_13CameraContextENS2_15RegistryContextENS2_17NavigationContextENS2_17StyleLogicContextENS2_15SettingsContextEEEENS9_IJEEEEE20ResolvedDependenciesERNS2_17SceneQueryContextEE3__1NS_9allocatorISN_EEFvvEE7__cloneEv(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42CCBA8;
  result[1] = v3;
  return result;
}

void _ZNSt3__110__function6__funcIZN2md15SceneQueryLogic29runBeforeLayoutAtVariableRateERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_13CameraContextENS2_15RegistryContextENS2_17NavigationContextENS2_17StyleLogicContextENS2_15SettingsContextEEEENS9_IJEEEEE20ResolvedDependenciesERNS2_17SceneQueryContextEE3__0NS_9allocatorISN_EEFvvEED0Ev()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *_ZNKSt3__110__function6__funcIZN2md15SceneQueryLogic29runBeforeLayoutAtVariableRateERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_13CameraContextENS2_15RegistryContextENS2_17NavigationContextENS2_17StyleLogicContextENS2_15SettingsContextEEEENS9_IJEEEEE20ResolvedDependenciesERNS2_17SceneQueryContextEE3__0NS_9allocatorISN_EEFvvEE7__cloneEv(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42CCB60;
  result[1] = v3;
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZN2md15SceneQueryLogic29runBeforeLayoutAtVariableRateERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_13CameraContextENS2_15RegistryContextENS2_17NavigationContextENS2_17StyleLogicContextENS2_15SettingsContextEEEENS9_IJEEEEE20ResolvedDependenciesERNS2_17SceneQueryContextEE3__0NS_9allocatorISN_EEFvvEE7__cloneEPNS0_6__baseISQ_EE(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42CCB60;
  a2[1] = v2;
  return result;
}

void md::SceneQueryContext::~SceneQueryContext(md::SceneQueryContext *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  void *v7;

  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 10);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (_QWORD *)*((_QWORD *)this + 5);
    if (!v5)
      goto LABEL_7;
  }
  else
  {
LABEL_5:
    v5 = (_QWORD *)*((_QWORD *)this + 5);
    if (!v5)
      goto LABEL_7;
  }
  do
  {
    v6 = (_QWORD *)*v5;
    operator delete(v5);
    v5 = v6;
  }
  while (v6);
LABEL_7:
  v7 = (void *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v7)
    operator delete(v7);
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((_QWORD **)this + 1));
}

void gdc::ManagedObjectHolder<md::SceneQueryContext>::~ManagedObjectHolder(_QWORD *a1)
{
  gdc::ManagedObjectHolder<md::SceneQueryContext>::~ManagedObjectHolder(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t gdc::ObjectHolder<md::SceneQueryContext>::extract@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 32);
  *(_QWORD *)(result + 32) = 0;
  *a2 = v2;
  return result;
}

_QWORD *gdc::ManagedObjectHolder<md::SceneQueryContext>::~ManagedObjectHolder(_QWORD *a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  void *v8;

  *a1 = &off_1E42B0EB0;
  v2 = a1[4];
  if (v2)
  {
    v3 = *(std::__shared_weak_count **)(v2 + 80);
    if (v3)
    {
      p_shared_owners = (unint64_t *)&v3->__shared_owners_;
      do
        v5 = __ldaxr(p_shared_owners);
      while (__stlxr(v5 - 1, p_shared_owners));
      if (!v5)
      {
        ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
        std::__shared_weak_count::__release_weak(v3);
      }
    }
    v6 = *(_QWORD **)(v2 + 40);
    if (v6)
    {
      do
      {
        v7 = (_QWORD *)*v6;
        operator delete(v6);
        v6 = v7;
      }
      while (v7);
    }
    v8 = *(void **)(v2 + 24);
    *(_QWORD *)(v2 + 24) = 0;
    if (v8)
      operator delete(v8);
    std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(_QWORD **)(v2 + 8));
    MEMORY[0x1A1AF4E00](v2, 0x10A0C4056A13B85);
  }
  return a1;
}

void sub_19FADACE8(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v3;

  std::unordered_set<md::MuninJunction const*>::~unordered_set[abi:nn180100](v1 + 504);
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(_QWORD **)(v1 + 488));
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(_QWORD **)(v1 + 464));
  std::__tree<std::__value_type<md::FrameGraphPass *,geo::linear_set<md::FrameGraphPass *,md::FrameGraphPassLessThan,std::allocator<md::FrameGraphPass *>,std::vector<md::FrameGraphPass *>>>,std::__map_value_compare<md::FrameGraphPass *,std::__value_type<md::FrameGraphPass *,geo::linear_set<md::FrameGraphPass *,md::FrameGraphPassLessThan,std::allocator<md::FrameGraphPass *>,std::vector<md::FrameGraphPass *>>>,md::FrameGraphPassLessThan,true>,std::allocator<std::__value_type<md::FrameGraphPass *,geo::linear_set<md::FrameGraphPass *,md::FrameGraphPassLessThan,std::allocator<md::FrameGraphPass *>,std::vector<md::FrameGraphPass *>>>>>::destroy(*(_QWORD **)(v1 + 432));
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(_QWORD **)(v1 + 408));
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(_QWORD **)(v1 + 384));
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](v1 + 352);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](v1 + 336);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](v1 + 320);
  *(_QWORD *)(v1 + 296) = &off_1E42B4C30;

  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(_QWORD **)(v1 + 280));
  v3 = *(void **)(v1 + 248);
  if (v3)
  {
    *(_QWORD *)(v1 + 256) = v3;
    operator delete(v3);
  }
  std::unordered_set<md::MuninJunction const*>::~unordered_set[abi:nn180100](v1 + 208);
  md::MeshRenderableContext::~MeshRenderableContext((md::MeshRenderableContext *)(v1 + 168));
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](v1 + 152);

  md::Logic<md::DrapingLogic,md::DrapingContext,md::LogicDependencies<gdc::TypeList<md::OverlaysContext,md::CameraContext,md::PendingSceneContext,md::ElevationContext>,gdc::TypeList<>>>::~Logic(v1);
  _Unwind_Resume(a1);
}

void ___ZN2md15SceneQueryLogicC2ERKNSt3__110shared_ptrINS_15RegistryManagerEEEPU28objcproto17OS_dispatch_queue8NSObject_block_invoke(uint64_t a1)
{
  uint64_t v1;
  NSObject *v2;
  int v3;
  _DWORD v4[2];
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  v1 = *(_QWORD *)(a1 + 32);
  *(_BYTE *)(v1 + 120) = GEOConfigGetBOOL();
  if (GEOGetVectorKitSceneQueryLogicLog(void)::onceToken != -1)
    dispatch_once(&GEOGetVectorKitSceneQueryLogicLog(void)::onceToken, &__block_literal_global_17866);
  v2 = GEOGetVectorKitSceneQueryLogicLog(void)::log;
  if (os_log_type_enabled((os_log_t)GEOGetVectorKitSceneQueryLogicLog(void)::log, OS_LOG_TYPE_INFO))
  {
    v3 = *(unsigned __int8 *)(v1 + 120);
    v4[0] = 67109120;
    v4[1] = v3;
    _os_log_impl(&dword_19F029000, v2, OS_LOG_TYPE_INFO, "SpatialFlexingAllowed updated to %d", (uint8_t *)v4, 8u);
  }
}

void ___ZN2md15SceneQueryLogicC2ERKNSt3__110shared_ptrINS_15RegistryManagerEEEPU28objcproto17OS_dispatch_queue8NSObject_block_invoke_6(uint64_t a1)
{
  uint64_t v1;
  NSObject *v2;
  int v3;
  _DWORD v4[2];
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  v1 = *(_QWORD *)(a1 + 32);
  *(_BYTE *)(v1 + 121) = GEOConfigGetBOOL();
  if (GEOGetVectorKitSceneQueryLogicLog(void)::onceToken != -1)
    dispatch_once(&GEOGetVectorKitSceneQueryLogicLog(void)::onceToken, &__block_literal_global_17866);
  v2 = GEOGetVectorKitSceneQueryLogicLog(void)::log;
  if (os_log_type_enabled((os_log_t)GEOGetVectorKitSceneQueryLogicLog(void)::log, OS_LOG_TYPE_INFO))
  {
    v3 = *(unsigned __int8 *)(v1 + 121);
    v4[0] = 67109120;
    v4[1] = v3;
    _os_log_impl(&dword_19F029000, v2, OS_LOG_TYPE_INFO, "RouteLineMaskingAllowed updated to %d", (uint8_t *)v4, 8u);
  }
}

void ___ZN2md15SceneQueryLogicC2ERKNSt3__110shared_ptrINS_15RegistryManagerEEEPU28objcproto17OS_dispatch_queue8NSObject_block_invoke_7(uint64_t a1)
{
  uint64_t v1;
  NSObject *v2;
  int v3;
  _DWORD v4[2];
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  v1 = *(_QWORD *)(a1 + 32);
  *(_DWORD *)(v1 + 124) = GEOConfigGetUInteger();
  if (GEOGetVectorKitSceneQueryLogicLog(void)::onceToken != -1)
    dispatch_once(&GEOGetVectorKitSceneQueryLogicLog(void)::onceToken, &__block_literal_global_17866);
  v2 = GEOGetVectorKitSceneQueryLogicLog(void)::log;
  if (os_log_type_enabled((os_log_t)GEOGetVectorKitSceneQueryLogicLog(void)::log, OS_LOG_TYPE_INFO))
  {
    v3 = *(_DWORD *)(v1 + 124);
    v4[0] = 67109120;
    v4[1] = v3;
    _os_log_impl(&dword_19F029000, v2, OS_LOG_TYPE_INFO, "MaxEntitiesToFlexPerFrame updated to %d", (uint8_t *)v4, 8u);
  }
}

void md::Logic<md::SceneQueryLogic,md::SceneQueryContext,md::LogicDependencies<gdc::TypeList<md::CameraContext,md::RegistryContext,md::NavigationContext,md::StyleLogicContext,md::SettingsContext>,gdc::TypeList<>>>::debugConsoleString(uint64_t a1@<X0>, gdc::DebugTreeNode *a2@<X8>)
{
  void *v3;
  uint64_t v4;
  void *v5;
  void *v6[2];
  char v7;
  void *v8;
  char v9;
  void **v10;
  void *__p;
  void *v12;
  uint64_t v13;

  v13 = 0;
  (*(void (**)(void **__return_ptr, uint64_t, uint64_t *))(*(_QWORD *)a1 + 56))(v6, a1, &v13);
  gdc::DebugTreeNode::toString(a2, (uint64_t)v6);
  v3 = __p;
  if (__p)
  {
    v4 = (uint64_t)v12;
    v5 = __p;
    if (v12 != __p)
    {
      do
      {
        v4 -= 80;
        std::__destroy_at[abi:nn180100]<gdc::DebugTreeProperty,0>(v4);
      }
      while ((void *)v4 != v3);
      v5 = __p;
    }
    v12 = v3;
    operator delete(v5);
  }
  std::vector<gdc::DebugTreeNode>::~vector[abi:nn180100](&v10);
  if ((v9 & 0x80000000) == 0)
  {
    if ((v7 & 0x80000000) == 0)
      return;
LABEL_10:
    operator delete(v6[0]);
    return;
  }
  operator delete(v8);
  if (v7 < 0)
    goto LABEL_10;
}

void sub_19FADB200(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_19FADB280(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, objc_super a9)
{
  void *v9;
  void *v10;

  v10 = v9;

  a9.super_class = (Class)VKRouteLine;
  -[_Unwind_Exception dealloc](&a9, sel_dealloc);
  _Unwind_Resume(a1);
}

void sub_19FADB314(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  std::mutex *v10;

  std::mutex::unlock(v10);

  _Unwind_Resume(a1);
}

void sub_19FADB374(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_19FADB3DC(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_19FADB53C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_19FADB6CC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19FADC174(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,char a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,char a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,char a61,uint64_t a62,uint64_t a63)
{
  id a66;
  void *v66;
  uint64_t v67;
  uint64_t v68;
  void *v70;

  _Block_object_dispose(&a26, 8);
  _Block_object_dispose(&a30, 8);
  _Block_object_dispose(&a38, 8);
  _Block_object_dispose(&a45, 8);
  geo::fast_shared_ptr<md::RouteLineSection,mdm::MDAllocator>::~fast_shared_ptr((_QWORD *)(v67 + 48));
  _Block_object_dispose(&a52, 8);
  _Block_object_dispose(&a61, 8);

  _Block_object_dispose((const void *)(v68 - 200), 8);
  v70 = *(void **)(v68 - 152);
  if (v70)
  {
    *(_QWORD *)(v68 - 144) = v70;
    operator delete(v70);
  }

  _Unwind_Resume(a1);
}

void sub_19FADCB64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  geo::fast_shared_ptr<md::RouteLineSection,mdm::MDAllocator>::~fast_shared_ptr((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_19FADCB90(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19FADCBA0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19FADCC28(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19FADCD6C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19FADD434(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19FADD7B8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19FADD81C()
{
  JUMPOUT(0x19FADD810);
}

void sub_19FADD9E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  void *v10;

  geo::fast_shared_ptr<md::RouteLineSection,mdm::MDAllocator>::~fast_shared_ptr(&a9);
  geo::fast_shared_ptr<md::RouteLineSection,mdm::MDAllocator>::~fast_shared_ptr(&a10);

  _Unwind_Resume(a1);
}

void sub_19FADDEC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39,uint64_t a40,uint64_t a41,uint64_t a42,char a43)
{
  uint64_t v43;

  _Block_object_dispose(&a31, 8);
  _Block_object_dispose(&a35, 8);
  _Block_object_dispose(&a39, 8);
  _Block_object_dispose(&a43, 8);
  _Block_object_dispose((const void *)(v43 - 224), 8);
  _Block_object_dispose((const void *)(v43 - 144), 8);

  _Unwind_Resume(a1);
}

void sub_19FADE1E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  uint64_t v10;
  void *v12;

  v12 = *(void **)v10;
  if (*(_QWORD *)v10)
  {
    *(_QWORD *)(v10 + 8) = v12;
    operator delete(v12);
  }
  _Unwind_Resume(a1);
}

uint64_t geo::_retain_ptr<NSUUID * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>::~_retain_ptr(uint64_t a1)
{
  *(_QWORD *)a1 = &off_1E42B5330;

  return a1;
}

void geo::_retain_ptr<NSUUID * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>::~_retain_ptr(uint64_t a1)
{
  *(_QWORD *)a1 = &off_1E42B5330;

  JUMPOUT(0x1A1AF4E00);
}

uint64_t __Block_byref_object_copy__11(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__12(uint64_t a1)
{

}

__n128 __Block_byref_object_copy__29(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)(a2 + 48);
  v3 = *(_OWORD *)(a2 + 64);
  *(__n128 *)(a1 + 48) = result;
  *(_OWORD *)(a1 + 64) = v3;
  return result;
}

__n128 __Block_byref_object_copy__32(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = a2[3];
  a1[3] = result;
  return result;
}

void sub_19FADEADC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void forEachNodeInSortedPaths(void *a1, void *a2)
{
  id v3;
  id v4;
  void (**v5)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, float);
  void *v6;
  uint64_t v7;
  uint64_t i;
  void *v9;
  void *v10;
  int v11;
  void *v12;
  int v13;
  double v14;
  _BOOL4 v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  _BOOL8 v20;
  float v21;
  id v22;
  unsigned int v23;
  void *v24;
  void *v25;
  void *v26;
  id obj;
  uint64_t v28;
  uint64_t v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  _BYTE v34[128];
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  v5 = (void (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, float))v4;
  v26 = v3;
  if (v3 && v4)
  {
    v32 = 0u;
    v33 = 0u;
    v30 = 0u;
    v31 = 0u;
    obj = v3;
    v6 = 0;
    v7 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v30, v34, 16);
    if (v7)
    {
      v28 = *(_QWORD *)v31;
      do
      {
        for (i = 0; i != v7; ++i)
        {
          if (*(_QWORD *)v31 != v28)
            objc_enumerationMutation(obj);
          v9 = *(void **)(*((_QWORD *)&v30 + 1) + 8 * i);
          if (!v6)
            goto LABEL_11;
          objc_msgSend(v6, "section");
          v10 = (void *)objc_claimAutoreleasedReturnValue();
          v11 = objc_msgSend(v10, "transportType");
          objc_msgSend(v9, "section");
          v12 = (void *)objc_claimAutoreleasedReturnValue();
          v13 = objc_msgSend(v12, "transportType");

          LODWORD(v14) = (unint64_t)objc_msgSend(v6, "routeEnd") >> 32;
          if (*(float *)&v14 >= 0.0)
          {
            v23 = objc_msgSend(v9, "routeStart", v14);
            v15 = 1;
            if (v23 <= objc_msgSend(v6, "routeEnd") && v11 == v13)
            {
              objc_msgSend(v6, "section");
              v24 = (void *)objc_claimAutoreleasedReturnValue();
              if (objc_msgSend(v24, "transportType") != 1)
              {
                objc_msgSend(v9, "section");
                v25 = (void *)objc_claimAutoreleasedReturnValue();
                v15 = objc_msgSend(v25, "transportType") == 2;

              }
            }
          }
          else
          {
LABEL_11:
            v15 = 1;
          }
          v16 = objc_msgSend(v9, "points", v26);
          v17 = objc_msgSend(v9, "pointCount");
          if (v17)
          {
            v18 = 0;
            v19 = v17;
            do
            {
              v29 = *(_QWORD *)(*(_QWORD *)objc_msgSend(v9, "polylineCoordinates") + 8 * v18);
              if (v18)
                v20 = 0;
              else
                v20 = v15;
              objc_msgSend(v9, "laneHalfWidthAtIndex:", v18);
              ((void (**)(_QWORD, uint64_t, uint64_t *, uint64_t, void *, _BOOL8, uint64_t, float))v5)[2](v5, v16, &v29, v18, v9, v20, objc_msgSend(v9, "gradientTrafficAtIndex:", v18), v21);
              ++v18;
              v16 += 12;
            }
            while (v19 != v18);
            if ((int)v19 > 0)
            {
              v22 = v9;

              v6 = v22;
            }
          }
        }
        v7 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v30, v34, 16);
      }
      while (v7);
    }

  }
}

void sub_19FADEDD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_19FADF1EC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  geo::fast_shared_ptr<md::RouteLineSection,mdm::MDAllocator>::~fast_shared_ptr((uint64_t *)va);
  _Unwind_Resume(a1);
}

void ___ZL29GEOGetVectorKitVKRouteLineLogv_block_invoke()
{
  os_log_t v0;
  void *v1;

  v0 = os_log_create("com.apple.VectorKit", "VKRouteLine");
  v1 = (void *)GEOGetVectorKitVKRouteLineLog(void)::log;
  GEOGetVectorKitVKRouteLineLog(void)::log = (uint64_t)v0;

}

uint64_t geo::_retain_ptr<NSUUID * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>::operator==(void *a1, void **a2)
{
  id v3;
  void *v4;
  id v5;
  id v6;
  uint64_t v7;

  v3 = a1;
  v4 = *a2;
  v5 = v3;
  v6 = v4;
  if (v6 == v5)
    v7 = 1;
  else
    v7 = objc_msgSend(v5, "isEqual:", v6);

  return v7;
}

void sub_19FADF29C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19FADF640(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id a9)
{

  _Unwind_Resume(a1);
}

void md::RouteLineSection::pushArrow(_QWORD *a1, __int128 *a2)
{
  unint64_t v4;
  char *v5;
  __int128 v6;
  __int128 v7;
  char *v8;
  char *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;

  v5 = (char *)a1[5];
  v4 = a1[6];
  if ((unint64_t)v5 >= v4)
  {
    v9 = (char *)a1[4];
    v10 = 0x8E38E38E38E38E39 * ((v5 - v9) >> 2) + 1;
    if (v10 > 0x71C71C71C71C71CLL)
      abort();
    v11 = 0x8E38E38E38E38E39 * ((uint64_t)(v4 - (_QWORD)v9) >> 2);
    if (2 * v11 > v10)
      v10 = 2 * v11;
    if (v11 >= 0x38E38E38E38E38ELL)
      v12 = 0x71C71C71C71C71CLL;
    else
      v12 = v10;
    if (v12)
    {
      if (v12 > 0x71C71C71C71C71CLL)
        std::__throw_bad_array_new_length[abi:nn180100]();
      v13 = (char *)operator new(36 * v12);
    }
    else
    {
      v13 = 0;
    }
    v14 = &v13[4 * ((v5 - v9) >> 2)];
    v15 = a2[1];
    *(_OWORD *)v14 = *a2;
    *((_OWORD *)v14 + 1) = v15;
    *((_DWORD *)v14 + 8) = *((_DWORD *)a2 + 8);
    v8 = v14 + 36;
    if (v5 != v9)
    {
      do
      {
        v16 = *(_OWORD *)(v5 - 36);
        v17 = *(_OWORD *)(v5 - 20);
        *((_DWORD *)v14 - 1) = *((_DWORD *)v5 - 1);
        *(_OWORD *)(v14 - 20) = v17;
        *(_OWORD *)(v14 - 36) = v16;
        v14 -= 36;
        v5 -= 36;
      }
      while (v5 != v9);
      v5 = (char *)a1[4];
    }
    a1[4] = v14;
    a1[5] = v8;
    a1[6] = &v13[36 * v12];
    if (v5)
      operator delete(v5);
  }
  else
  {
    v6 = *a2;
    v7 = a2[1];
    *((_DWORD *)v5 + 8) = *((_DWORD *)a2 + 8);
    *(_OWORD *)v5 = v6;
    *((_OWORD *)v5 + 1) = v7;
    v8 = v5 + 36;
  }
  a1[5] = v8;
}

__n128 __Block_byref_object_copy__18077(__n128 *a1, __n128 *a2)
{
  __n128 result;

  a1[3].n128_u64[0] = 0;
  a1[3].n128_u64[1] = 0;
  a1[4].n128_u64[0] = 0;
  result = a2[3];
  a1[3] = result;
  a1[4].n128_u64[0] = a2[4].n128_u64[0];
  a2[3].n128_u64[0] = 0;
  a2[3].n128_u64[1] = 0;
  a2[4].n128_u64[0] = 0;
  return result;
}

void __Block_byref_object_dispose__18078(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 48);
  if (v2)
  {
    *(_QWORD *)(a1 + 56) = v2;
    operator delete(v2);
  }
}

void sub_19FADF9A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

__n128 __Block_byref_object_copy__13(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = a2[3];
  a1[4].n128_u64[0] = a2[4].n128_u64[0];
  a1[3] = result;
  return result;
}

uint64_t __Block_byref_object_copy__16_18081(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 48) = 0;
  *(_QWORD *)(result + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 48) = 0;
  return result;
}

uint64_t __Block_byref_object_dispose__17_18082(uint64_t result)
{
  _QWORD *v1;
  uint64_t v3;
  unsigned __int8 v4;
  uint64_t v5;
  geo::read_write_lock *v6;
  const char *v7;
  malloc_zone_t *zone;

  v1 = *(_QWORD **)(result + 48);
  if (v1)
  {
    if ((*v1)-- == 1)
    {
      v3 = result;
      md::RouteLineSection::~RouteLineSection((md::RouteLineSection *)(v1 + 1));
      {
        v5 = operator new();
        *(_QWORD *)(v5 + 16) = 0x5ED09DD50000000FLL;
        *(_QWORD *)(v5 + 24) = "VectorKitLabels";
        *(_OWORD *)(v5 + 32) = xmmword_19FFB2E80;
        *(_QWORD *)v5 = &off_1E42B5668;
        *(_QWORD *)(v5 + 8) = "VectorKitLabels";
        *(_OWORD *)(v5 + 72) = 0u;
        *(_OWORD *)(v5 + 88) = 0u;
        *(_OWORD *)(v5 + 104) = 0u;
        *(_OWORD *)(v5 + 120) = 0u;
        *(_OWORD *)(v5 + 136) = 0u;
        *(_OWORD *)(v5 + 152) = 0u;
        *(_OWORD *)(v5 + 168) = 0u;
        *(_OWORD *)(v5 + 184) = 0u;
        *(_OWORD *)(v5 + 200) = 0u;
        *(_OWORD *)(v5 + 216) = 0u;
        *(_OWORD *)(v5 + 232) = 0u;
        *(_QWORD *)(v5 + 248) = 0;
        *(_OWORD *)(v5 + 56) = 0u;
        v6 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v5 + 56), 0);
        if ((_DWORD)v6)
          geo::read_write_lock::logFailure(v6, (uint64_t)"initialization", v7);
        zone = malloc_create_zone(0, 0);
        *(_QWORD *)(v5 + 48) = zone;
        malloc_set_zone_name(zone, "VectorKitLabels");
        *(_QWORD *)(v5 + 256) = os_log_create("com.apple.VectorKit", "Memory");
        mdm::Allocator::instance(void)::alloc = v5;
      }
      result = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc
                                                                   + 40))(mdm::Allocator::instance(void)::alloc, *(_QWORD *)(v3 + 48), 424);
      *(_QWORD *)(v3 + 48) = 0;
    }
  }
  return result;
}

uint64_t __Block_byref_object_copy__19(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 48) = *(_QWORD *)(a2 + 48);
  return result;
}

uint64_t __Block_byref_object_copy__22(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 48);
  *(_DWORD *)(result + 56) = *(_DWORD *)(a2 + 56);
  *(_QWORD *)(result + 48) = v2;
  return result;
}

void sub_19FAE0DC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  void *v12;

  _Unwind_Resume(a1);
}

void md::ExternalIconLabelPart::~ExternalIconLabelPart(md::ExternalIconLabelPart *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *(_QWORD *)this = off_1E429A970;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 81);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *(_QWORD *)this = off_1E42AF8C0;
  free(*((void **)this + 59));
  free(*((void **)this + 60));
  free(*((void **)this + 62));
  free(*((void **)this + 29));
  free(*((void **)this + 30));
  free(*((void **)this + 32));
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unsigned __int8 v5;
  uint64_t v6;
  geo::read_write_lock *v7;
  const char *v8;
  malloc_zone_t *zone;

  *(_QWORD *)this = off_1E429A970;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 81);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *(_QWORD *)this = off_1E42AF8C0;
  free(*((void **)this + 59));
  free(*((void **)this + 60));
  free(*((void **)this + 62));
  free(*((void **)this + 29));
  free(*((void **)this + 30));
  free(*((void **)this + 32));
  {
    v6 = operator new();
    *(_QWORD *)(v6 + 16) = 0x5ED09DD50000000FLL;
    *(_QWORD *)(v6 + 24) = "VectorKitLabels";
    *(_OWORD *)(v6 + 32) = xmmword_19FFB2E80;
    *(_QWORD *)v6 = &off_1E42B5668;
    *(_QWORD *)(v6 + 8) = "VectorKitLabels";
    *(_OWORD *)(v6 + 72) = 0u;
    *(_OWORD *)(v6 + 88) = 0u;
    *(_OWORD *)(v6 + 104) = 0u;
    *(_OWORD *)(v6 + 120) = 0u;
    *(_OWORD *)(v6 + 136) = 0u;
    *(_OWORD *)(v6 + 152) = 0u;
    *(_OWORD *)(v6 + 168) = 0u;
    *(_OWORD *)(v6 + 184) = 0u;
    *(_OWORD *)(v6 + 200) = 0u;
    *(_OWORD *)(v6 + 216) = 0u;
    *(_OWORD *)(v6 + 232) = 0u;
    *(_QWORD *)(v6 + 248) = 0;
    *(_OWORD *)(v6 + 56) = 0u;
    v7 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v6 + 56), 0);
    if ((_DWORD)v7)
      geo::read_write_lock::logFailure(v7, (uint64_t)"initialization", v8);
    zone = malloc_create_zone(0, 0);
    *(_QWORD *)(v6 + 48) = zone;
    malloc_set_zone_name(zone, "VectorKitLabels");
    *(_QWORD *)(v6 + 256) = os_log_create("com.apple.VectorKit", "Memory");
    mdm::Allocator::instance(void)::alloc = v6;
  }
  (*(void (**)(uint64_t, md::ExternalIconLabelPart *, uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc
                                                                        + 40))(mdm::Allocator::instance(void)::alloc, this, 680);
}

uint64_t md::ExternalIconLabelPart::layoutForStaging(uint64_t a1, double a2, double a3, double a4, uint64_t a5, _DWORD *a6)
{
  const float *v6;
  float32x2_t v7;

  if (*(_BYTE *)(a1 + 628))
  {
    v6 = (const float *)(a1 + 668);
    v7 = vld1_dup_f32(v6);
    a3 = *(double *)(a1 + 620);
    a2 = COERCE_DOUBLE(vmaxnm_f32(*(float32x2_t *)&a3, v7));
    *(double *)(a1 + 168) = a2;
    *(_BYTE *)(a1 + 271) = *(_BYTE *)(a1 + 631);
    *(_BYTE *)(a1 + 628) = 0;
  }
  *(_DWORD *)(a1 + 280) = *a6;
  *(_DWORD *)(a1 + 284) = a6[1];
  *(_DWORD *)(a1 + 104) = *a6;
  LODWORD(a2) = a6[1];
  *(_DWORD *)(a1 + 108) = LODWORD(a2);
  md::CollisionObject::setupShapeData(a1 + 72, a2, a3, a4);
  return 37;
}

uint64_t md::ExternalIconLabelPart::layoutForDisplay(_DWORD *a1, double a2, double a3, double a4, uint64_t a5, uint64_t a6, _DWORD *a7)
{
  a1[130] = *a7;
  a1[131] = a7[1];
  a1[86] = *a7;
  LODWORD(a2) = a7[1];
  a1[87] = LODWORD(a2);
  md::CollisionObject::setupShapeData((uint64_t)(a1 + 78), a2, a3, a4);
  return 37;
}

float md::ExternalIconLabelPart::pushToRenderModel(uint64_t a1, float a2)
{
  float result;

  result = fmaxf(fminf(*(float *)(a1 + 600) * a2, 1.0), 0.0);
  *(float *)(a1 + 552) = result;
  return result;
}

float md::ExternalIconLabelPart::calloutAnchorRect(md::ExternalIconLabelPart *this)
{
  if (*((_BYTE *)this + 672))
    return -*((float *)this + 164);
  else
    return -*((float *)this + 165);
}

uint64_t md::ExternalIconLabelPart::debugString@<X0>(md::ExternalIconLabelPart *this@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  std::ios_base *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  void **v14;
  uint64_t v15;
  char v16;
  size_t v17;
  unint64_t v18;
  const void **v19;
  const void *v20;
  uint64_t v21;
  uint64_t v22;
  _BYTE *v23;
  void *__p[2];
  unsigned __int8 v26;
  uint64_t v27;
  _QWORD v28[2];
  _QWORD v29[3];
  uint64_t v30;
  unint64_t v31;
  void *v32[2];
  __int128 v33;
  int v34;
  uint64_t v35[19];

  v4 = MEMORY[0x1E0DE4FE0];
  v5 = MEMORY[0x1E0DE4FE0] + 64;
  v6 = (uint64_t *)MEMORY[0x1E0DE4F60];
  v7 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v8 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v35[0] = MEMORY[0x1E0DE4FE0] + 64;
  v27 = v7;
  *(_QWORD *)((char *)&v28[-1] + *(_QWORD *)(v7 - 24)) = v8;
  v9 = (std::ios_base *)((char *)&v28[-1] + *(_QWORD *)(v27 - 24));
  std::ios_base::init(v9, v28);
  v9[1].__vftable = 0;
  v9[1].__fmtflags_ = -1;
  v27 = v4 + 24;
  v35[0] = v5;
  std::streambuf::basic_streambuf();
  v10 = MEMORY[0x1E0DE4FB8];
  v28[0] = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)v32 = 0u;
  v33 = 0u;
  v34 = 16;
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v27, (uint64_t)"ExternalIcon", 12);
  v11 = v27;
  *(_DWORD *)((char *)v28 + *(_QWORD *)(v27 - 24)) = *(_DWORD *)((_BYTE *)v28 + *(_QWORD *)(v27 - 24)) & 0xFFFFFEFB | 4;
  *(_QWORD *)((char *)&v28[1] + *(_QWORD *)(v11 - 24)) = 2;
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v27, (uint64_t)"\n  alpha:", 9);
  std::ostream::operator<<();
  if (*((_BYTE *)this + 672))
  {
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v27, (uint64_t)"\n  radius:", 10);
    std::ostream::operator<<();
  }
  else
  {
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v27, (uint64_t)"\n  halfExt:(", 12);
    v12 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v12, (uint64_t)", ", 2);
    v13 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v13, (uint64_t)")", 1);
  }
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v27, (uint64_t)"\n  ", 3);
  md::ImageLabelPart::debugString(this, __p);
  if ((v26 & 0x80u) == 0)
    v14 = __p;
  else
    v14 = (void **)__p[0];
  if ((v26 & 0x80u) == 0)
    v15 = v26;
  else
    v15 = (uint64_t)__p[1];
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v27, (uint64_t)v14, v15);
  if ((char)v26 < 0)
  {
    operator delete(__p[0]);
    v16 = v34;
    if ((v34 & 0x10) == 0)
      goto LABEL_12;
LABEL_15:
    v18 = *((_QWORD *)&v33 + 1);
    if (*((_QWORD *)&v33 + 1) < v31)
    {
      *((_QWORD *)&v33 + 1) = v31;
      v18 = v31;
    }
    v19 = (const void **)&v30;
    goto LABEL_19;
  }
  v16 = v34;
  if ((v34 & 0x10) != 0)
    goto LABEL_15;
LABEL_12:
  if ((v16 & 8) == 0)
  {
    v17 = 0;
    a2[23] = 0;
    goto LABEL_27;
  }
  v19 = (const void **)v29;
  v18 = v29[2];
LABEL_19:
  v20 = *v19;
  v17 = v18 - (_QWORD)*v19;
  if (v17 >= 0x7FFFFFFFFFFFFFF8)
    abort();
  if (v17 >= 0x17)
  {
    v21 = (v17 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v17 | 7) != 0x17)
      v21 = v17 | 7;
    v22 = v21 + 1;
    v23 = operator new(v21 + 1);
    *((_QWORD *)a2 + 1) = v17;
    *((_QWORD *)a2 + 2) = v22 | 0x8000000000000000;
    *(_QWORD *)a2 = v23;
    a2 = v23;
    goto LABEL_26;
  }
  a2[23] = v17;
  if (v17)
LABEL_26:
    memmove(a2, v20, v17);
LABEL_27:
  a2[v17] = 0;
  v27 = *v6;
  *(_QWORD *)((char *)&v28[-1] + *(_QWORD *)(v27 - 24)) = v6[3];
  v28[0] = v10 + 16;
  if (SBYTE7(v33) < 0)
    operator delete(v32[0]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1A1AF4D64](v35);
}

void sub_19FAE15F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0)
    operator delete(__p);
  std::ostringstream::~ostringstream((uint64_t)&a15);
  _Unwind_Resume(a1);
}

void md::ExternalIconLabelPart::populateDebugNode(md::ExternalIconLabelPart *this, gdc::DebugTreeNode *a2)
{
  char *ChildNode;
  float v5;
  uint64_t v6;
  double v7;
  float v8;
  double v9;
  char *v10;
  uint64_t v11[3];
  _BYTE v12[16];
  double v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  _QWORD v18[7];
  int v19;
  _BYTE v20[16];
  double v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  __int128 v26[2];

  md::ImageLabelPart::populateDebugNode(this, a2);
  BYTE7(v26[1]) = 21;
  strcpy((char *)v26, "ExternalIconLabelPart");
  ChildNode = gdc::DebugTreeNode::createChildNode((uint64_t)a2, v26);
  v5 = *((float *)this + 138);
  BYTE7(v26[1]) = 5;
  strcpy((char *)v26, "Alpha");
  v23 = 0;
  v24 = 0;
  v22 = 0;
  v25 = 2;
  v21 = v5;
  gdc::DebugTreeNode::addProperty((uint64_t)ChildNode, (uint64_t)v26, (uint64_t)v20);
  v6 = *((unsigned __int8 *)this + 672);
  BYTE7(v26[1]) = 8;
  strcpy((char *)v26, "Is Round");
  v19 = 0;
  memset(&v18[4], 0, 24);
  v18[0] = v6;
  gdc::DebugTreeNode::addProperty((uint64_t)ChildNode, (uint64_t)v26, (uint64_t)v18);
  if (*((_BYTE *)this + 672))
  {
    BYTE7(v26[1]) = 6;
    strcpy((char *)v26, "Radius");
    v7 = *((float *)this + 164);
    v15 = 0;
    v16 = 0;
    v14 = 0;
    v17 = 2;
    v13 = v7;
    gdc::DebugTreeNode::addProperty((uint64_t)ChildNode, (uint64_t)v26, (uint64_t)v12);
    return;
  }
  BYTE7(v26[1]) = 8;
  strcpy((char *)v26, "Half Ext");
  v8 = *((float *)this + 165);
  v9 = *((float *)this + 166);
  v10 = (char *)operator new(0x80uLL);
  v11[1] = (uint64_t)(v10 + 128);
  v11[2] = (uint64_t)(v10 + 128);
  *((double *)v10 + 2) = v8;
  *((_QWORD *)v10 + 5) = 0;
  *((_QWORD *)v10 + 6) = 0;
  *((_QWORD *)v10 + 4) = 0;
  *((_DWORD *)v10 + 14) = 2;
  *((_QWORD *)v10 + 12) = 0;
  *((double *)v10 + 10) = v9;
  *((_QWORD *)v10 + 13) = 0;
  *((_QWORD *)v10 + 14) = 0;
  *((_DWORD *)v10 + 30) = 2;
  v11[0] = (uint64_t)v10;
  gdc::DebugTreeNode::addProperty((uint64_t)ChildNode, (uint64_t)v26, v11);
  if (v10[119] < 0)
  {
    operator delete(*((void **)v10 + 12));
    if ((v10[55] & 0x80000000) == 0)
      goto LABEL_5;
LABEL_7:
    operator delete(*((void **)v10 + 4));
    goto LABEL_5;
  }
  if (v10[55] < 0)
    goto LABEL_7;
LABEL_5:
  operator delete(v10);
}

void md::HillshadeRenderLayer::layout(md::HillshadeRenderLayer *this, const md::LayoutContext *a2)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  ggl::CommandBuffer *v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  unsigned int v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *p_shared_owners;
  unint64_t v34;
  unint64_t v35;
  int v36;
  int v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t *v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  _QWORD *v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t *v70;
  uint64_t v71;
  uint64_t *v72;
  __int128 *v73;
  uint64_t v74;
  __int128 v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t *v80;
  __int128 *v81;
  uint64_t v82;
  __int128 v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  std::__shared_weak_count *v92;
  unint64_t *v93;
  unint64_t v94;
  std::__shared_weak_count *v95;
  unint64_t *v96;
  unint64_t v97;
  uint64_t v98;
  unint64_t *v99;
  unint64_t v100;
  unint64_t *v101;
  unint64_t *v102;
  unint64_t v103;
  uint64_t v104;
  std::__shared_weak_count *v105;
  unint64_t *v106;
  unint64_t v107;
  unint64_t v108;
  _QWORD *v109;
  uint64_t v110;
  _QWORD *v111;
  std::__shared_weak_count *v112;
  unint64_t *v113;
  unint64_t v114;
  std::__shared_weak_count *v115;
  unint64_t *v116;
  unint64_t v117;
  uint64_t v118;
  uint64_t v119;
  std::__shared_weak_count *v120;
  uint64_t v121;
  unint64_t *v122;
  unint64_t v123;
  std::__shared_weak_count *v124;
  unint64_t *v125;
  unint64_t v126;
  uint64_t v127;
  ggl::RenderItem *v128;
  uint64_t v129;
  uint64_t v130;
  unint64_t v131;
  float32x4_t *v132;
  __int128 v133;
  unint64_t v134;
  std::__shared_weak_count *v135;
  unint64_t *v136;
  unint64_t v137;
  unint64_t v138;
  unint64_t v139;
  std::__shared_weak_count *v140;
  unint64_t *v141;
  unint64_t v142;
  std::__shared_weak_count *v143;
  unint64_t *v144;
  unint64_t v145;
  int v146;
  uint64_t v147;
  float *v148;
  float v149;
  unsigned int v151;
  float v152;
  float32x4_t *v154;
  uint16x4_t v155;
  uint16x4_t v156;
  void *v157;
  int v158;
  void *v159;
  float v160;
  void *v161;
  float v162;
  unsigned int v163;
  float32x4_t *v164;
  unint64_t v169;
  unint64_t v170;
  _QWORD *v171;
  int v172;
  int v173;
  unint64_t v174;
  unint64_t v175;
  std::__shared_weak_count *v176;
  unint64_t *v177;
  unint64_t v178;
  std::__shared_weak_count *v179;
  unint64_t *v180;
  unint64_t v181;
  float32x4_t v182;
  ggl::CommandBuffer *v183;
  uint64_t v184;
  unsigned int v185;
  uint64_t v186;
  int v187;
  unint64_t v188;
  std::__shared_weak_count *v189;
  unint64_t v190;
  std::__shared_weak_count *v191;
  unint64_t v192;
  std::__shared_weak_count *v193;
  uint64_t v194;
  uint64_t v195;
  unsigned __int8 v196;
  uint64_t v197;
  std::__shared_weak_count *v198;
  uint64_t v199;
  std::__shared_weak_count *v200;
  __int128 v201;
  unint64_t v202;
  unint64_t v203;
  __int16 v204;
  float32x4_t *v205;

  v2 = (uint64_t *)*((_QWORD *)a2 + 1);
  v3 = (int8x8_t)v2[1];
  if (v3)
  {
    v6 = (uint8x8_t)vcnt_s8(v3);
    v6.i16[0] = vaddlv_u8(v6);
    if (v6.u32[0] > 1uLL)
    {
      v7 = 0x3070CB6B3C7F21D3;
      if (*(_QWORD *)&v3 <= 0x3070CB6B3C7F21D3uLL)
        v7 = 0x3070CB6B3C7F21D3uLL % *(_QWORD *)&v3;
    }
    else
    {
      v7 = (*(_QWORD *)&v3 - 1) & 0x3070CB6B3C7F21D3;
    }
    v8 = *v2;
    v9 = *(_QWORD **)(v8 + 8 * v7);
    if (!v9)
      goto LABEL_24;
    v10 = (_QWORD *)*v9;
    if (!v10)
      goto LABEL_24;
    if (v6.u32[0] < 2uLL)
    {
      while (1)
      {
        v12 = v10[1];
        if (v12 == 0x3070CB6B3C7F21D3)
        {
          if (v10[2] == 0x3070CB6B3C7F21D3)
            goto LABEL_22;
        }
        else if ((v12 & (*(_QWORD *)&v3 - 1)) != v7)
        {
          goto LABEL_24;
        }
        v10 = (_QWORD *)*v10;
        if (!v10)
          goto LABEL_24;
      }
    }
    while (1)
    {
      v11 = v10[1];
      if (v11 == 0x3070CB6B3C7F21D3)
        break;
      if (v11 >= *(_QWORD *)&v3)
        v11 %= *(_QWORD *)&v3;
      if (v11 != v7)
        goto LABEL_24;
LABEL_11:
      v10 = (_QWORD *)*v10;
      if (!v10)
        goto LABEL_24;
    }
    if (v10[2] != 0x3070CB6B3C7F21D3)
      goto LABEL_11;
LABEL_22:
    v13 = v10[5];
    if (*(_QWORD *)(v13 + 8) == 0x3070CB6B3C7F21D3)
    {
      v14 = *(_QWORD *)(v13 + 32);
      goto LABEL_25;
    }
LABEL_24:
    v14 = 0;
LABEL_25:
    if (v6.u32[0] > 1uLL)
    {
      v15 = 0x1AF456233693CD46;
      if (*(_QWORD *)&v3 <= 0x1AF456233693CD46uLL)
        v15 = 0x1AF456233693CD46uLL % *(_QWORD *)&v3;
    }
    else
    {
      v15 = (*(_QWORD *)&v3 - 1) & 0x1AF456233693CD46;
    }
    v16 = *(_QWORD **)(v8 + 8 * v15);
    if (v16)
    {
      v17 = (_QWORD *)*v16;
      if (v17)
      {
        if (v6.u32[0] < 2uLL)
        {
          v18 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v20 = v17[1];
            if (v20 == 0x1AF456233693CD46)
            {
              if (v17[2] == 0x1AF456233693CD46)
                goto LABEL_45;
            }
            else if ((v20 & v18) != v15)
            {
              return;
            }
            v17 = (_QWORD *)*v17;
            if (!v17)
              return;
          }
        }
        while (1)
        {
          v19 = v17[1];
          if (v19 == 0x1AF456233693CD46)
            break;
          if (v19 >= *(_QWORD *)&v3)
            v19 %= *(_QWORD *)&v3;
          if (v19 != v15)
            return;
LABEL_34:
          v17 = (_QWORD *)*v17;
          if (!v17)
            return;
        }
        if (v17[2] != 0x1AF456233693CD46)
          goto LABEL_34;
LABEL_45:
        v21 = v17[5];
        if (*(_QWORD *)(v21 + 8) == 0x1AF456233693CD46)
        {
          v184 = *(_QWORD *)(v21 + 32);
          if (v184)
          {
            v22 = *((_QWORD *)this + 44);
            *(_QWORD *)(v22 + 112) = 0;
            *(_QWORD *)(v22 + 120) = 0;
            v23 = *((_QWORD *)this + 48);
            ggl::FragmentedPool<ggl::RenderItem>::pushAll(*(uint64_t **)(v23 + 48));
            ggl::FragmentedPool<ggl::RenderItem>::pushAll(*(uint64_t **)(v23 + 56));
            v24 = (ggl::CommandBuffer *)md::PassList::commandBufferForId(*(_QWORD **)(*(_QWORD *)(*((_QWORD *)this + 5) + 24) + 8), *((_BYTE *)this + 392), *((_BYTE *)this + 393));
            v25 = *((_QWORD *)v24 + 9);
            if (*((_QWORD *)v24 + 10) != v25)
              *((_QWORD *)v24 + 10) = v25;
            *((_QWORD *)v24 + 4) = *((_QWORD *)this + 46);
            v26 = *((_DWORD *)this + 94);
            LOBYTE(v201) = 0;
            v183 = v24;
            md::CartographicTiledVectorRenderLayer<HillshadeRenderable>::layoutStencilTiles((uint64_t)this, a2, (uint64_t)v24, v26, &v201);
            v27 = *((_QWORD *)this + 34);
            v186 = *((_QWORD *)this + 35);
            if (v27 != v186)
            {
              v28 = (int)fmaxf(*(float *)(v184 + 3080) + *(float *)(v184 + 3076), 1.0);
              if (v28 >= 0x17)
                v28 = 23;
              v185 = v28;
              v182 = (float32x4_t)vdupq_n_s32(0x37800080u);
              do
              {
                v29 = *(_QWORD **)v27;
                v30 = *(_QWORD *)(*(_QWORD *)v27 + 384);
                v31 = *(_QWORD *)(v30 + 736);
                v32 = *(std::__shared_weak_count **)(v30 + 744);
                if (v32)
                {
                  p_shared_owners = (unint64_t *)&v32->__shared_owners_;
                  do
                    v34 = __ldxr(p_shared_owners);
                  while (__stxr(v34 + 1, p_shared_owners));
                  do
                    v35 = __ldaxr(p_shared_owners);
                  while (__stlxr(v35 - 1, p_shared_owners));
                  if (!v35)
                  {
                    ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
                    std::__shared_weak_count::__release_weak(v32);
                  }
                }
                if (!v31)
                  goto LABEL_54;
                v36 = *((unsigned __int8 *)this + 360);
                if (*((_BYTE *)this + 360))
                  v187 = *((_DWORD *)this + 94) + *(unsigned __int8 *)(v30 + 169);
                else
                  LOBYTE(v187) = 0;
                v37 = *(unsigned __int8 *)(v184 + 3776);
                v38 = (std::__shared_weak_count *)v29[28];
                v199 = v29[27];
                v200 = v38;
                if (v38)
                {
                  v39 = (unint64_t *)&v38->__shared_owners_;
                  do
                    v40 = __ldxr(v39);
                  while (__stxr(v40 + 1, v39));
                }
                v41 = (std::__shared_weak_count *)v29[30];
                v197 = v29[29];
                v198 = v41;
                if (v41)
                {
                  v42 = (unint64_t *)&v41->__shared_owners_;
                  do
                    v43 = __ldxr(v42);
                  while (__stxr(v43 + 1, v42));
                }
                v44 = *(_QWORD *)(*((_QWORD *)this + 48) + 56);
                v45 = *(_QWORD *)(v44 + 8);
                if (v45 == *(_QWORD *)v44)
                {
                  v57 = *(_QWORD *)(v44 + 88);
                  if (!v57)
                    goto LABEL_244;
                  v46 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v57 + 48))(v57);
                  v47 = *(uint64_t **)(v44 + 40);
                  v58 = *(_QWORD *)(v44 + 48);
                  if ((unint64_t)v47 >= v58)
                  {
                    v60 = *(_QWORD *)(v44 + 32);
                    v61 = ((uint64_t)v47 - v60) >> 3;
                    v62 = v61 + 1;
                    if ((unint64_t)(v61 + 1) >> 61)
LABEL_245:
                      abort();
                    v63 = v58 - v60;
                    if (v63 >> 2 > v62)
                      v62 = v63 >> 2;
                    if ((unint64_t)v63 >= 0x7FFFFFFFFFFFFFF8)
                      v64 = 0x1FFFFFFFFFFFFFFFLL;
                    else
                      v64 = v62;
                    if (v64)
                    {
                      v65 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v44 + 56) + 16))(*(_QWORD *)(v44 + 56), 8 * v64, 8);
                      v55 = (uint64_t *)(v65 + 8 * v61);
                      v56 = v65 + 8 * v64;
                      if (v65)
                        *v55 = v46;
                    }
                    else
                    {
                      v56 = 0;
                      v55 = (uint64_t *)(8 * v61);
                    }
                    v76 = *(_QWORD *)(v44 + 32);
                    v66 = *(_QWORD *)(v44 + 40);
                    v77 = v66 - v76;
                    if (v66 != v76)
                    {
                      v78 = v77 - 8;
                      if ((unint64_t)(v77 - 8) < 0x38)
                      {
                        v70 = v55;
                      }
                      else
                      {
                        v70 = v55;
                        if ((unint64_t)(v66 - (_QWORD)v55) >= 0x20)
                        {
                          v79 = (v78 >> 3) + 1;
                          v80 = v55 - 2;
                          v81 = (__int128 *)(v66 - 16);
                          v82 = v79 & 0x3FFFFFFFFFFFFFFCLL;
                          do
                          {
                            v83 = *v81;
                            *((_OWORD *)v80 - 1) = *(v81 - 1);
                            *(_OWORD *)v80 = v83;
                            v80 -= 4;
                            v81 -= 2;
                            v82 -= 4;
                          }
                          while (v82);
                          v70 = &v55[-(v79 & 0x3FFFFFFFFFFFFFFCLL)];
                          v66 -= 8 * (v79 & 0x3FFFFFFFFFFFFFFCLL);
                          if (v79 == (v79 & 0x3FFFFFFFFFFFFFFCLL))
                          {
LABEL_118:
                            v66 = *(_QWORD *)(v44 + 32);
LABEL_119:
                            v59 = v55 + 1;
                            *(_QWORD *)(v44 + 32) = v70;
                            *(_QWORD *)(v44 + 40) = v55 + 1;
                            v86 = *(_QWORD *)(v44 + 48);
                            *(_QWORD *)(v44 + 48) = v56;
                            if (v66)
                              (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v44 + 56) + 40))(*(_QWORD *)(v44 + 56), v66, v86 - v66);
                            goto LABEL_121;
                          }
                        }
                      }
                      do
                      {
                        v85 = *(_QWORD *)(v66 - 8);
                        v66 -= 8;
                        *--v70 = v85;
                      }
                      while (v66 != v76);
                      goto LABEL_118;
                    }
LABEL_112:
                    v70 = v55;
                    goto LABEL_119;
                  }
                }
                else
                {
                  v46 = *(_QWORD *)(v45 - 8);
                  *(_QWORD *)(v44 + 8) = v45 - 8;
                  v47 = *(uint64_t **)(v44 + 40);
                  v48 = *(_QWORD *)(v44 + 48);
                  if ((unint64_t)v47 >= v48)
                  {
                    v49 = *(_QWORD *)(v44 + 32);
                    v50 = ((uint64_t)v47 - v49) >> 3;
                    v51 = v50 + 1;
                    if ((unint64_t)(v50 + 1) >> 61)
                      goto LABEL_245;
                    v52 = v48 - v49;
                    if (v52 >> 2 > v51)
                      v51 = v52 >> 2;
                    if ((unint64_t)v52 >= 0x7FFFFFFFFFFFFFF8)
                      v53 = 0x1FFFFFFFFFFFFFFFLL;
                    else
                      v53 = v51;
                    if (v53)
                    {
                      v54 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v44 + 56) + 16))(*(_QWORD *)(v44 + 56), 8 * v53, 8);
                      v55 = (uint64_t *)(v54 + 8 * v50);
                      v56 = v54 + 8 * v53;
                      if (v54)
                        *v55 = v46;
                    }
                    else
                    {
                      v56 = 0;
                      v55 = (uint64_t *)(8 * v50);
                    }
                    v67 = *(_QWORD *)(v44 + 32);
                    v66 = *(_QWORD *)(v44 + 40);
                    v68 = v66 - v67;
                    if (v66 != v67)
                    {
                      v69 = v68 - 8;
                      if ((unint64_t)(v68 - 8) < 0x38)
                      {
                        v70 = v55;
                      }
                      else
                      {
                        v70 = v55;
                        if ((unint64_t)(v66 - (_QWORD)v55) >= 0x20)
                        {
                          v71 = (v69 >> 3) + 1;
                          v72 = v55 - 2;
                          v73 = (__int128 *)(v66 - 16);
                          v74 = v71 & 0x3FFFFFFFFFFFFFFCLL;
                          do
                          {
                            v75 = *v73;
                            *((_OWORD *)v72 - 1) = *(v73 - 1);
                            *(_OWORD *)v72 = v75;
                            v72 -= 4;
                            v73 -= 2;
                            v74 -= 4;
                          }
                          while (v74);
                          v70 = &v55[-(v71 & 0x3FFFFFFFFFFFFFFCLL)];
                          v66 -= 8 * (v71 & 0x3FFFFFFFFFFFFFFCLL);
                          if (v71 == (v71 & 0x3FFFFFFFFFFFFFFCLL))
                            goto LABEL_118;
                        }
                      }
                      do
                      {
                        v84 = *(_QWORD *)(v66 - 8);
                        v66 -= 8;
                        *--v70 = v84;
                      }
                      while (v66 != v67);
                      goto LABEL_118;
                    }
                    goto LABEL_112;
                  }
                }
                if (v47)
                  *v47 = v46;
                v59 = v47 + 1;
LABEL_121:
                *(_QWORD *)(v44 + 40) = v59;
                *(_QWORD *)&v201 = v46;
                v87 = *(_QWORD *)(v44 + 120);
                if (!v87)
                {
LABEL_244:
                  std::__throw_bad_function_call[abi:nn180100]();
                  __break(1u);
                  return;
                }
                (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)v87 + 48))(v87, &v201);
                v88 = *((_QWORD *)this + 48);
                v89 = v88 + 32;
                v90 = 16;
                if ((v37 - 1) >= 3)
                  v89 = v88 + 16;
                else
                  v90 = 32;
                v91 = *(_QWORD *)(v88 + v90);
                v92 = *(std::__shared_weak_count **)(v89 + 8);
                if (v92)
                {
                  v93 = (unint64_t *)&v92->__shared_owners_;
                  do
                    v94 = __ldxr(v93);
                  while (__stxr(v94 + 1, v93));
                }
                if (!v91 || **(_QWORD **)(v91 + 40) != *(_QWORD *)(v46 + 8))
                {
                  v95 = *(std::__shared_weak_count **)(v46 + 24);
                  *(_QWORD *)(v46 + 16) = 0;
                  *(_QWORD *)(v46 + 24) = 0;
                  if (!v95)
                    goto LABEL_145;
                  v96 = (unint64_t *)&v95->__shared_owners_;
                  do
                    v97 = __ldaxr(v96);
                  while (__stlxr(v97 - 1, v96));
                  goto LABEL_143;
                }
                v98 = *(_QWORD *)(v46 + 16);
                if (v98 && v98 != v91)
                  ggl::PipelineSetup::resetData(v46);
                if (v92)
                {
                  v99 = (unint64_t *)&v92->__shared_owners_;
                  do
                    v100 = __ldxr(v99);
                  while (__stxr(v100 + 1, v99));
                }
                v95 = *(std::__shared_weak_count **)(v46 + 24);
                *(_QWORD *)(v46 + 16) = v91;
                *(_QWORD *)(v46 + 24) = v92;
                if (v95)
                {
                  v101 = (unint64_t *)&v95->__shared_owners_;
                  do
                    v97 = __ldaxr(v101);
                  while (__stlxr(v97 - 1, v101));
LABEL_143:
                  if (!v97)
                  {
                    ((void (*)(std::__shared_weak_count *))v95->__on_zero_shared)(v95);
                    std::__shared_weak_count::__release_weak(v95);
                  }
                }
LABEL_145:
                if (v92)
                {
                  v102 = (unint64_t *)&v92->__shared_owners_;
                  do
                    v103 = __ldaxr(v102);
                  while (__stlxr(v103 - 1, v102));
                  if (!v103)
                  {
                    ((void (*)(std::__shared_weak_count *))v92->__on_zero_shared)(v92);
                    std::__shared_weak_count::__release_weak(v92);
                  }
                }
                v104 = *(_QWORD *)(v30 + 736);
                v105 = *(std::__shared_weak_count **)(v30 + 744);
                if (v105)
                {
                  v106 = (unint64_t *)&v105->__shared_owners_;
                  do
                    v107 = __ldxr(v106);
                  while (__stxr(v107 + 1, v106));
                  **(_QWORD **)(v46 + 96) = v104;
                  do
                    v108 = __ldaxr(v106);
                  while (__stlxr(v108 - 1, v106));
                  if (!v108)
                  {
                    ((void (*)(std::__shared_weak_count *))v105->__on_zero_shared)(v105);
                    std::__shared_weak_count::__release_weak(v105);
                  }
                }
                else
                {
                  **(_QWORD **)(v46 + 96) = v104;
                }
                v109 = *(_QWORD **)(v46 + 64);
                v110 = v199;
                *v109 = v199;
                v109[1] = 0;
                v111 = *(_QWORD **)(v46 + 160);
                v112 = v200;
                if (v200)
                {
                  v113 = (unint64_t *)&v200->__shared_owners_;
                  do
                    v114 = __ldxr(v113);
                  while (__stxr(v114 + 1, v113));
                }
                v115 = (std::__shared_weak_count *)v111[1];
                *v111 = v110;
                v111[1] = v112;
                if (v115)
                {
                  v116 = (unint64_t *)&v115->__shared_owners_;
                  do
                    v117 = __ldaxr(v116);
                  while (__stlxr(v117 - 1, v116));
                  if (!v117)
                  {
                    ((void (*)(std::__shared_weak_count *))v115->__on_zero_shared)(v115);
                    std::__shared_weak_count::__release_weak(v115);
                  }
                }
                v118 = *(_QWORD *)(v46 + 64);
                v119 = v197;
                v120 = v198;
                *(_QWORD *)(v118 + 16) = v197;
                *(_QWORD *)(v118 + 24) = 0;
                v121 = *(_QWORD *)(v46 + 160);
                if (v120)
                {
                  v122 = (unint64_t *)&v120->__shared_owners_;
                  do
                    v123 = __ldxr(v122);
                  while (__stxr(v123 + 1, v122));
                }
                v124 = *(std::__shared_weak_count **)(v121 + 24);
                *(_QWORD *)(v121 + 16) = v119;
                *(_QWORD *)(v121 + 24) = v120;
                if (v124)
                {
                  v125 = (unint64_t *)&v124->__shared_owners_;
                  do
                    v126 = __ldaxr(v125);
                  while (__stlxr(v126 - 1, v125));
                  if (!v126)
                  {
                    ((void (*)(std::__shared_weak_count *))v124->__on_zero_shared)(v124);
                    std::__shared_weak_count::__release_weak(v124);
                  }
                }
                v127 = ggl::FragmentedPool<ggl::RenderItem>::pop(*(_QWORD *)(*((_QWORD *)this + 48) + 48));
                v128 = (ggl::RenderItem *)v127;
                *(_QWORD *)(v127 + 24) = *(_QWORD *)(*((_QWORD *)this + 48) + 8 * (v36 != 0));
                *(_QWORD *)(v127 + 32) = v46;
                v129 = 16;
                if (*(unsigned __int8 *)(v14 + 320) - 1 < 3)
                  v129 = 32;
                *(_QWORD *)(v127 + 64) = *(_QWORD *)(v14 + v129);
                *(_QWORD *)(v127 + 16) = "hillshade";
                *(_DWORD *)(v127 + 40) = v187;
                v130 = *(_QWORD *)(*(_QWORD *)(v46 + 64) + 32);
                v201 = 0uLL;
                v131 = *(_QWORD *)(v130 + 8);
                if (v131)
                  v132 = *(float32x4_t **)(v130 + 72);
                else
                  v132 = 0;
                *(_QWORD *)&v133 = 0;
                *((_QWORD *)&v133 + 1) = v130;
                v201 = v133;
                v202 = 0;
                v203 = v131;
                v205 = v132;
                v204 = 1;
                v134 = *(_QWORD *)(v30 + 720);
                v135 = *(std::__shared_weak_count **)(v30 + 728);
                v188 = v134;
                v189 = v135;
                if (v135)
                {
                  v136 = (unint64_t *)&v135->__shared_owners_;
                  do
                    v137 = __ldxr(v136);
                  while (__stxr(v137 + 1, v136));
                  v190 = v134;
                  v191 = v135;
                  do
                    v138 = __ldxr(v136);
                  while (__stxr(v138 + 1, v136));
                  v192 = v134;
                  v193 = v135;
                  do
                    v139 = __ldxr(v136);
                  while (__stxr(v139 + 1, v136));
                  v140 = v135;
                }
                else
                {
                  v140 = 0;
                  v190 = v134;
                  v191 = 0;
                  v192 = v134;
                  v193 = 0;
                }
                v194 = 0;
                v195 = 0;
                v196 = 0;
                if (v134)
                  LOBYTE(v134) = (*(uint64_t (**)(unint64_t))(*(_QWORD *)v134 + 48))(v134);
                v196 = v134;
                if (!v135)
                  goto LABEL_194;
                v141 = (unint64_t *)&v140->__shared_owners_;
                do
                  v142 = __ldaxr(v141);
                while (__stlxr(v142 - 1, v141));
                if (!v142)
                {
                  ((void (*)(std::__shared_weak_count *))v140->__on_zero_shared)(v140);
                  std::__shared_weak_count::__release_weak(v140);
                  v143 = v189;
                  if (!v189)
                    goto LABEL_198;
                }
                else
                {
LABEL_194:
                  v143 = v189;
                  if (!v189)
                    goto LABEL_198;
                }
                v144 = (unint64_t *)&v143->__shared_owners_;
                do
                  v145 = __ldaxr(v144);
                while (__stlxr(v145 - 1, v144));
                if (v145)
                {
LABEL_198:
                  v146 = v196;
                  if (!v196)
                    goto LABEL_211;
                  goto LABEL_199;
                }
                ((void (*)(std::__shared_weak_count *))v143->__on_zero_shared)(v143);
                std::__shared_weak_count::__release_weak(v143);
                v146 = v196;
                if (!v196)
                {
LABEL_211:
                  v154 = v205;
                  gss::QueryableLocker<gss::PropertyID>::~QueryableLocker((uint64_t)&v192);
                  if (!v154)
                    goto LABEL_233;
                  goto LABEL_218;
                }
LABEL_199:
                v147 = *(_QWORD *)(v192 + 24);
                v148 = *(float **)v147;
                if (*(_QWORD *)v147
                  && (v149 = *v148, LODWORD(v148) = *v148 == 1.0, *(_BYTE *)(v147 + 10))
                  && (v149 != 0.0 ? (_ZF = v149 == 1.0) : (_ZF = 1), !_ZF)
                  || (v151 = *(unsigned __int8 *)(v147 + v148 + 11), v149 = 0.0, v151 == 2))
                {
                  LOBYTE(v190) = 1;
                  LOBYTE(v188) = 1;
                  v152 = *(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v147, 0xC2u, v185, 0, &v190);
                  _S8 = v152
                      + (float)((float)(*(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v147, 0xC2u, v185, 1u, &v188)- v152)* v149);
                }
                else
                {
                  _S8 = *(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(*(_QWORD *)(v192 + 24), 0xC2u, v185, v151, 0);
                }
                gss::RenderStyle<gss::PropertyID>::valueForKeyAtZ<geo::Color<unsigned short,4,(geo::ColorSpace)0>>(&v190, *(_QWORD *)(v192 + 24), 0x1B6u, v185, 2u, 0);
                v155 = (uint16x4_t)v190;
                gss::RenderStyle<gss::PropertyID>::valueForKeyAtZ<geo::Color<unsigned short,4,(geo::ColorSpace)0>>(&v190, *(_QWORD *)(v192 + 24), 0x5Cu, v185, 2u, 0);
                v156 = (uint16x4_t)v190;
                +[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings");
                v157 = (void *)objc_claimAutoreleasedReturnValue();
                v158 = objc_msgSend(v157, "enableDebugSettingForHillShade");

                if (v158)
                {
                  +[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings");
                  v159 = (void *)objc_claimAutoreleasedReturnValue();
                  objc_msgSend(v159, "hillshadeOpacity");
                  _S8 = v160;

                  +[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings");
                  v161 = (void *)objc_claimAutoreleasedReturnValue();
                  objc_msgSend(v161, "hillshadeBlendMode");
                  v163 = vcvtms_u32_f32(v162);

                }
                else
                {
                  v163 = 11;
                }
                v164 = v205;
                __asm { FCVT            H2, S8 }
                v205[2].i16[0] = _H2;
                *v164 = vmulq_f32(vcvtq_f32_u32(vmovl_u16(v155)), v182);
                v164[1] = vmulq_f32(vcvtq_f32_u32(vmovl_u16(v156)), v182);
                v164[2].i32[1] = v163;
                ggl::CommandBuffer::pushRenderItem((uint64_t)v183, v128);
                gss::QueryableLocker<gss::PropertyID>::~QueryableLocker((uint64_t)&v192);
LABEL_218:
                v170 = v202;
                v169 = v203;
                if (v203 != v202)
                {
                  v171 = (_QWORD *)*((_QWORD *)&v201 + 1);
                  v172 = v204;
                  v173 = HIBYTE(v204);
                  if ((_QWORD)v201 && *(_BYTE *)(*((_QWORD *)&v201 + 1) + 17) != 2)
                    (*(void (**)(void))(*(_QWORD *)v201 + 64))();
                  if (v172 && !v173)
                  {
                    v174 = v171[7];
                    v175 = v171[8];
                    if (v175 == v174)
                      v174 = v171[10] - v171[9];
                    if (v170 < v174)
                      v174 = v170;
                    if (v175 <= v169)
                      v175 = v169;
                    if (v175 == v174)
                      v175 = v174 + v171[10] - v171[9];
                    v171[7] = v174;
                    v171[8] = v175;
                  }
                }
LABEL_233:
                v176 = v198;
                if (v198)
                {
                  v177 = (unint64_t *)&v198->__shared_owners_;
                  do
                    v178 = __ldaxr(v177);
                  while (__stlxr(v178 - 1, v177));
                  if (!v178)
                  {
                    ((void (*)(std::__shared_weak_count *))v176->__on_zero_shared)(v176);
                    std::__shared_weak_count::__release_weak(v176);
                  }
                }
                v179 = v200;
                if (v200)
                {
                  v180 = (unint64_t *)&v200->__shared_owners_;
                  do
                    v181 = __ldaxr(v180);
                  while (__stlxr(v181 - 1, v180));
                  if (!v181)
                  {
                    ((void (*)(std::__shared_weak_count *))v179->__on_zero_shared)(v179);
                    std::__shared_weak_count::__release_weak(v179);
                  }
                }
                if (!v146)
                  return;
LABEL_54:
                v27 += 8;
              }
              while (v27 != v186);
            }
          }
        }
      }
    }
  }
}

void sub_19FAE2620(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,char a29,uint64_t a30,char a31)
{
  void *v31;

  gss::QueryableLocker<gss::PropertyID>::~QueryableLocker((uint64_t)&a22);
  ggl::BufferMemory::~BufferMemory((ggl::BufferMemory *)&a31);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a27);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a29);
  _Unwind_Resume(a1);
}

uint64_t md::HillshadeRenderLayer::reserveStencilRange(uint64_t result, uint64_t a2)
{
  unsigned __int8 v2;
  unsigned __int8 *v3;
  int v4;
  uint64_t v5;

  v2 = *(_BYTE *)(result + 49) - *(_BYTE *)(result + 48) + 1;
  v3 = *(unsigned __int8 **)(a2 + 24);
  v4 = *v3;
  if (v4 + v2 > v3[1])
  {
    v5 = *(_QWORD *)(result + 368);
    *(_BYTE *)(v5 + 28) = v3[32];
    *(_DWORD *)(v5 + 32) = *((_DWORD *)v3 + 9);
    v3[1] = v3[2];
    v4 = 1;
  }
  *v3 = v4 + v2;
  *(_DWORD *)(result + 376) = v4 - *(unsigned __int8 *)(result + 48);
  return result;
}

uint64_t md::HillshadeRenderLayer::prepare(md::HillshadeRenderLayer *this, md::LayoutContext *a2)
{
  return (*(uint64_t (**)(md::HillshadeRenderLayer *, md::LayoutContext *))(*(_QWORD *)this + 104))(this, a2);
}

void md::HillshadeRenderResources::~HillshadeRenderResources(md::HillshadeRenderResources *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 9);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v5 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v5)
  {
    v6 = ggl::FragmentedPool<ggl::BuildingFlat::CompressedMeshPipelineSetup>::~FragmentedPool(v5);
    MEMORY[0x1A1AF4E00](v6, 0x10A0C40D234DDC7);
  }
  v7 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v7)
  {
    v8 = ggl::FragmentedPool<ggl::BuildingFlat::CompressedMeshPipelineSetup>::~FragmentedPool(v7);
    MEMORY[0x1A1AF4E00](v8, 0x10A0C40D234DDC7);
  }
  v9 = (std::__shared_weak_count *)*((_QWORD *)this + 5);
  if (!v9)
    goto LABEL_14;
  v10 = (unint64_t *)&v9->__shared_owners_;
  do
    v11 = __ldaxr(v10);
  while (__stlxr(v11 - 1, v10));
  if (!v11)
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
    v12 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
    if (!v12)
      goto LABEL_20;
  }
  else
  {
LABEL_14:
    v12 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
    if (!v12)
      goto LABEL_20;
  }
  v13 = (unint64_t *)&v12->__shared_owners_;
  do
    v14 = __ldaxr(v13);
  while (__stlxr(v14 - 1, v13));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
LABEL_20:
  v15 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v15)
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  v16 = *(_QWORD *)this;
  *(_QWORD *)this = 0;
  if (v16)
    (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
}

void _ZNSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_9Hillshade20Pos2DUVPipelineSetupEEC1ENS_8functionIFPS5_vEEENS7_IFvS8_EEEmmEd1_UlS8_E_NS_9allocatorISD_EESB_ED0Ev()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *_ZNKSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_9Hillshade20Pos2DUVPipelineSetupEEC1ENS_8functionIFPS5_vEEENS7_IFvS8_EEEmmEd1_UlS8_E_NS_9allocatorISD_EESB_E7__cloneEv()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E42D7D30;
  return result;
}

void std::__function::__func<md::HillshadeRenderResources::HillshadeRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_1,std::allocator<md::HillshadeRenderResources::HillshadeRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_1>,ggl::Hillshade::Pos2DUVPipelineSetup * ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::HillshadeRenderResources::HillshadeRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_1,std::allocator<md::HillshadeRenderResources::HillshadeRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_1>,ggl::Hillshade::Pos2DUVPipelineSetup * ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E42D2128;
  return result;
}

_QWORD *std::__function::__func<md::HillshadeRenderResources::HillshadeRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_1,std::allocator<md::HillshadeRenderResources::HillshadeRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_1>,ggl::Hillshade::Pos2DUVPipelineSetup * ()(void)>::operator()()
{
  _QWORD *v0;
  unsigned __int8 v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t v11;
  unsigned __int8 v13;
  unsigned __int8 v14;
  unsigned __int8 v15;

  v0 = (_QWORD *)operator new();
  if ((v1 & 1) == 0
  {
    if ((v13 & 1) == 0
    {
      if ((v15 & 1) == 0
      {
        ggl::MeshTyped<ggl::CommonMesh::BufferPos2UV>::attributesReflection(void)::r = (uint64_t)&ggl::CommonMesh::bufferPos2UVReflection;
      }
      ggl::MeshTyped<ggl::CommonMesh::BufferPos2UV>::typedReflection(void)::r = (uint64_t)&ggl::MeshTyped<ggl::CommonMesh::BufferPos2UV>::attributesReflection(void)::r;
      unk_1ECE43AC8 = 1;
    }
    ggl::Hillshade::Pos2DUVPipelineSetup::typedReflection(void)::ref = (uint64_t)&ggl::MeshTyped<ggl::CommonMesh::BufferPos2UV>::typedReflection(void)::r;
    *(_QWORD *)algn_1EE5848F8 = &ggl::Hillshade::pipelineDataPos2DUVPipelineDeviceStructs(void)::ref;
    qword_1EE584900 = 0;
    if ((v14 & 1) == 0
    {
      ggl::Hillshade::pipelineDataPos2DUVPipelineConstantStructs(void)::ref = (uint64_t)ggl::Tile::View::reflection(void)::reflection;
      unk_1EE584980 = ggl::Tile::Transform::reflection(void)::reflection;
      qword_1EE584988 = (uint64_t)ggl::Hillshade::HillshadeStyle::reflection(void)::reflection;
    }
    qword_1EE584908 = (uint64_t)&ggl::Hillshade::pipelineDataPos2DUVPipelineConstantStructs(void)::ref;
    unk_1EE584910 = xmmword_19FFB35E0;
  }
  ggl::PipelineSetup::PipelineSetup((uint64_t)v0, (uint64_t)&ggl::Hillshade::Pos2DUVPipelineSetup::typedReflection(void)::ref);
  *v0 = &off_1E42BD058;
  v2 = (std::__shared_weak_count *)operator new(0xE8uLL);
  v2->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  v2->__shared_weak_owners_ = 0;
  v2->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E2E10;
  v4 = ggl::BufferData::BufferData((uint64_t)&v2[1], qword_1EE554FD0, 2, 1, 6, 1);
  v2[9].__shared_owners_ = (uint64_t)ggl::Hillshade::HillshadeStyle::reflection(void)::reflection;
  v2[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B9FB0;
  v5 = v0[8];
  *(_QWORD *)(v5 + 32) = v4;
  *(_QWORD *)(v5 + 40) = 0;
  v6 = v0[20];
  do
    v7 = __ldxr(p_shared_owners);
  while (__stxr(v7 + 1, p_shared_owners));
  v8 = *(std::__shared_weak_count **)(v6 + 40);
  *(_QWORD *)(v6 + 32) = v4;
  *(_QWORD *)(v6 + 40) = v2;
  if (v8)
  {
    v9 = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  do
    v11 = __ldaxr(p_shared_owners);
  while (__stlxr(v11 - 1, p_shared_owners));
  if (!v11)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  return v0;
}

uint64_t ggl::ConstantDataTyped<ggl::Hillshade::HillshadeStyle>::~ConstantDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  return a1;
}

void ggl::ConstantDataTyped<ggl::Hillshade::HillshadeStyle>::~ConstantDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::Hillshade::HillshadeStyle>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E2E10;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::Hillshade::HillshadeStyle>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E2E10;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::Hillshade::HillshadeStyle>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__function::__func<md::HillshadeRenderResources::HillshadeRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_0,std::allocator<md::HillshadeRenderResources::HillshadeRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_0>,ggl::RenderItem * ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::HillshadeRenderResources::HillshadeRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_0,std::allocator<md::HillshadeRenderResources::HillshadeRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_0>,ggl::RenderItem * ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E42D20E0;
  return result;
}

int64x2_t std::__function::__func<md::HillshadeRenderResources::HillshadeRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_0,std::allocator<md::HillshadeRenderResources::HillshadeRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_0>,ggl::RenderItem * ()(void)>::operator()()
{
  uint64_t v0;
  int64x2_t result;

  v0 = operator new();
  *(_QWORD *)v0 = &off_1E42B59B0;
  *(_QWORD *)(v0 + 48) = 0;
  *(_QWORD *)(v0 + 24) = 0;
  *(_QWORD *)(v0 + 32) = 0;
  *(_QWORD *)(v0 + 16) = "Hillshade";
  *(_DWORD *)(v0 + 40) = 0;
  *(_DWORD *)(v0 + 56) = 1065353216;
  *(_OWORD *)(v0 + 64) = 0u;
  *(_OWORD *)(v0 + 80) = 0u;
  result = vdupq_n_s64(1uLL);
  *(int64x2_t *)(v0 + 96) = result;
  *(_QWORD *)(v0 + 112) = 0;
  return result;
}

void std::__shared_ptr_emplace<ggl::Hillshade::Pos2DUVPipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E51B8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::Hillshade::Pos2DUVPipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E51B8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

void altitude::SkeletonRequestManager::~SkeletonRequestManager(altitude::SkeletonRequestManager *this)
{
  altitude::SkeletonRequestManager::~SkeletonRequestManager(this);
  JUMPOUT(0x1A1AF4E00);
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *(_QWORD *)this = &off_1E42C6080;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 13);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *(_QWORD *)this = off_1E42C2FE8;
  while (*((_QWORD *)this + 10))
    (*(void (**)(altitude::SkeletonRequestManager *, uint64_t))(*(_QWORD *)this + 48))(this, *((_QWORD *)this + 8) + 32);
  std::__tree<std::__value_type<karo::media::C3mmFileIndex,std::shared_ptr<karo::media::C3mmFile>>,std::__map_value_compare<karo::media::C3mmFileIndex,std::__value_type<karo::media::C3mmFileIndex,std::shared_ptr<karo::media::C3mmFile>>,std::less<karo::media::C3mmFileIndex>,true>,std::allocator<std::__value_type<karo::media::C3mmFileIndex,std::shared_ptr<karo::media::C3mmFile>>>>::destroy(*((_QWORD **)this + 9));
  karo::AsyncRequestManager::~AsyncRequestManager(this);
}

uint64_t karo::AsyncRequestManagerTemplate<altitude::TileId,karo::AsyncRequestManagerNoArgs>::pruneRequests(uint64_t a1, int a2)
{
  uint64_t *v4;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  BOOL v9;
  uint64_t v10;
  int v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t *v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;

  pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 40));
  v4 = *(uint64_t **)(a1 + 64);
  if (v4 != (uint64_t *)(a1 + 72))
  {
    do
    {
      v6 = (uint64_t *)v4[1];
      v7 = v4;
      if (v6)
      {
        do
        {
          v8 = v6;
          v6 = (uint64_t *)*v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          v8 = (uint64_t *)v7[2];
          v9 = *v8 == (_QWORD)v7;
          v7 = v8;
        }
        while (!v9);
      }
      v10 = v4[6];
      if (atomic_load((unsigned int *)(v10 + 128)))
        *(_DWORD *)(v10 + 180) = a2;
      pthread_mutex_lock(*(pthread_mutex_t **)(v10 + 152));
      v12 = *(_DWORD *)(v10 + 160);
      pthread_mutex_unlock(*(pthread_mutex_t **)(v10 + 152));
      if ((v12 & 1) != 0 && *(_BYTE *)(v10 + 176) && *(_DWORD *)(v10 + 180) != a2
        || (a2 - *(_DWORD *)(v10 + 180)) > *(_DWORD *)(v10 + 184))
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v10 + 16))(v10);
        v13 = (uint64_t *)v4[1];
        v14 = v4;
        if (v13)
        {
          do
          {
            v15 = v13;
            v13 = (uint64_t *)*v13;
          }
          while (v13);
        }
        else
        {
          do
          {
            v15 = (uint64_t *)v14[2];
            v9 = *v15 == (_QWORD)v14;
            v14 = v15;
          }
          while (!v9);
        }
        if (*(uint64_t **)(a1 + 64) == v4)
          *(_QWORD *)(a1 + 64) = v15;
        v16 = *(uint64_t **)(a1 + 72);
        --*(_QWORD *)(a1 + 80);
        std::__tree_remove[abi:nn180100]<std::__tree_node_base<void *> *>(v16, v4);
        v17 = (std::__shared_weak_count *)v4[7];
        if (v17)
        {
          p_shared_owners = (unint64_t *)&v17->__shared_owners_;
          do
            v19 = __ldaxr(p_shared_owners);
          while (__stlxr(v19 - 1, p_shared_owners));
          if (!v19)
          {
            ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
            std::__shared_weak_count::__release_weak(v17);
          }
        }
        operator delete(v4);
      }
      v4 = v8;
    }
    while (v8 != (uint64_t *)(a1 + 72));
  }
  *(_DWORD *)(a1 + 88) = a2;
  return pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 40));
}

void sub_19FAE2FC4(_Unwind_Exception *a1)
{
  uint64_t v1;

  pthread_mutex_unlock(*(pthread_mutex_t **)(v1 + 40));
  _Unwind_Resume(a1);
}

uint64_t karo::AsyncRequestManagerTemplate<altitude::TileId,karo::AsyncRequestManagerNoArgs>::removeFromRequests(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t *v7;
  BOOL v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;

  pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 40));
  v4 = *(uint64_t **)(a1 + 64);
  if (v4 != (uint64_t *)(a1 + 72))
  {
    v5 = *(uint64_t **)(a1 + 64);
    while (1)
    {
      v6 = (uint64_t *)v5[1];
      if (v5[6] == a2)
        break;
      if (v6)
      {
        do
        {
          v7 = v6;
          v6 = (uint64_t *)*v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          v7 = (uint64_t *)v5[2];
          v8 = *v7 == (_QWORD)v5;
          v5 = v7;
        }
        while (!v8);
      }
      v5 = v7;
      if (v7 == (uint64_t *)(a1 + 72))
        return pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 40));
    }
    if (v6)
    {
      do
      {
        v9 = v6;
        v6 = (uint64_t *)*v6;
      }
      while (v6);
    }
    else
    {
      v10 = v5;
      do
      {
        v9 = (uint64_t *)v10[2];
        v8 = *v9 == (_QWORD)v10;
        v10 = v9;
      }
      while (!v8);
    }
    if (v4 == v5)
      *(_QWORD *)(a1 + 64) = v9;
    v11 = *(uint64_t **)(a1 + 72);
    --*(_QWORD *)(a1 + 80);
    std::__tree_remove[abi:nn180100]<std::__tree_node_base<void *> *>(v11, v5);
    v12 = (std::__shared_weak_count *)v5[7];
    if (v12)
    {
      p_shared_owners = (unint64_t *)&v12->__shared_owners_;
      do
        v14 = __ldaxr(p_shared_owners);
      while (__stlxr(v14 - 1, p_shared_owners));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
    operator delete(v5);
  }
  return pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 40));
}

uint64_t karo::AsyncRequestManagerTemplate<altitude::TileId,karo::AsyncRequestManagerNoArgs>::clearRequest(uint64_t a1, unsigned int *a2)
{
  uint64_t *v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t *v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t *v14;
  uint64_t *v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t *v18;
  BOOL v19;
  uint64_t *v20;
  std::__shared_weak_count *v21;
  unint64_t *p_shared_owners;
  unint64_t v23;

  pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 40));
  v4 = *(uint64_t **)(a1 + 72);
  if (!v4)
    return pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 40));
  v6 = *a2;
  v5 = a2[1];
  v7 = (uint64_t *)(a1 + 72);
  v9 = a2[2];
  v8 = a2[3];
  do
  {
    v10 = *((_DWORD *)v4 + 8);
    if (v10 < v6)
    {
LABEL_3:
      ++v4;
      goto LABEL_4;
    }
    if (v10 > v6)
      goto LABEL_11;
    v11 = *((_DWORD *)v4 + 9);
    if (v11 < v5)
      goto LABEL_3;
    if (v11 > v5)
      goto LABEL_11;
    v12 = *((_DWORD *)v4 + 10);
    if (v12 < v9)
      goto LABEL_3;
    if (v12 <= v9)
    {
      if (*((_DWORD *)v4 + 11) < v8)
        ++v4;
      else
        v7 = v4;
    }
    else
    {
LABEL_11:
      v7 = v4;
    }
LABEL_4:
    v4 = (uint64_t *)*v4;
  }
  while (v4);
  if (v7 != (uint64_t *)(a1 + 72))
  {
    v13 = *((_DWORD *)v7 + 8);
    if (v6 >= v13)
    {
      if (v6 > v13
        || (v16 = *((_DWORD *)v7 + 9), v5 >= v16)
        && (v5 > v16 || (v17 = *((_DWORD *)v7 + 10), v9 >= v17) && (v9 > v17 || v8 >= *((_DWORD *)v7 + 11))))
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v7[6] + 16))(v7[6]);
        v14 = (uint64_t *)v7[1];
        if (v14)
        {
          do
          {
            v15 = v14;
            v14 = (uint64_t *)*v14;
          }
          while (v14);
        }
        else
        {
          v18 = v7;
          do
          {
            v15 = (uint64_t *)v18[2];
            v19 = *v15 == (_QWORD)v18;
            v18 = v15;
          }
          while (!v19);
        }
        if (*(uint64_t **)(a1 + 64) == v7)
          *(_QWORD *)(a1 + 64) = v15;
        v20 = *(uint64_t **)(a1 + 72);
        --*(_QWORD *)(a1 + 80);
        std::__tree_remove[abi:nn180100]<std::__tree_node_base<void *> *>(v20, v7);
        v21 = (std::__shared_weak_count *)v7[7];
        if (v21)
        {
          p_shared_owners = (unint64_t *)&v21->__shared_owners_;
          do
            v23 = __ldaxr(p_shared_owners);
          while (__stlxr(v23 - 1, p_shared_owners));
          if (!v23)
          {
            ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
            std::__shared_weak_count::__release_weak(v21);
          }
        }
        operator delete(v7);
      }
    }
  }
  return pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 40));
}

void sub_19FAE3298(_Unwind_Exception *a1)
{
  uint64_t v1;

  pthread_mutex_unlock(*(pthread_mutex_t **)(v1 + 40));
  _Unwind_Resume(a1);
}

void karo::AsyncRequestManagerTemplate<altitude::TileId,karo::AsyncRequestManagerNoArgs>::createAndQueueRequest(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t v9;
  _QWORD v10[2];

  (*(void (**)(uint64_t *__return_ptr))(*a1 + 64))(a2);
  v4 = a1[6];
  if (v4)
  {
    v5 = *a2;
    v6 = (std::__shared_weak_count *)a2[1];
    v10[0] = v5;
    v10[1] = v6;
    if (v6)
    {
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v8 = __ldxr(p_shared_owners);
      while (__stxr(v8 + 1, p_shared_owners));
      karo::JobManager::queueJob(v4, v10);
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
    else
    {
      karo::JobManager::queueJob(v4, v10);
    }
  }
}

_QWORD *altitude::SkeletonRequestManager::createRequest@<X0>(_QWORD *a1@<X0>, _OWORD *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *result;

  v6 = operator new();
  v7 = a1[4];
  v8 = a1[17];
  v9 = a1[14];
  v10 = karo::Job::Job(v6, v7);
  *(_BYTE *)(v10 + 176) = 0;
  *(_QWORD *)(v10 + 180) = 0xFFFFFFFF00000000;
  *(_QWORD *)v10 = &off_1E42C45E0;
  *(_BYTE *)(v10 + 188) = 0;
  *(_OWORD *)(v10 + 196) = 0u;
  *(_OWORD *)(v10 + 212) = 0u;
  *(_OWORD *)(v10 + 228) = 0u;
  *(_OWORD *)(v10 + 244) = 0u;
  *(_OWORD *)(v10 + 256) = 0u;
  *(_QWORD *)(v10 + 272) = v8;
  *(_QWORD *)(v10 + 280) = v9;
  *(_QWORD *)(v10 + 296) = 0;
  *(_QWORD *)(v10 + 304) = 0;
  *(_QWORD *)(v10 + 288) = v10 + 296;
  *(_OWORD *)(v10 + 208) = *a2;
  *(_DWORD *)(v10 + 192) = 22;
  *a3 = v10;
  result = (_QWORD *)operator new();
  *result = &off_1E42E8830;
  result[1] = 0;
  result[2] = 0;
  result[3] = v6;
  a3[1] = (uint64_t)result;
  return result;
}

void sub_19FAE3430(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

